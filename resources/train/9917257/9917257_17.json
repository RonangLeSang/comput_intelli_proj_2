{"test_class": {"identifier": "CloudTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<ServiceConnectorCreator<?, ? extends ServiceInfo>> serviceConnectorCreators;", "modifier": "private", "type": "List<ServiceConnectorCreator<?, ? extends ServiceInfo>>", "declarator": "serviceConnectorCreators", "var_name": "serviceConnectorCreators"}], "file": "spring-cloud-core/src/test/java/org/springframework/cloud/CloudTest.java"}, "test_case": {"identifier": "getSingletonServiceConnectorNoMatchingServiceConnectorCreator", "parameters": "()", "modifiers": "@Test(expected=CloudException.class) public", "return": "void", "body": "@Test(expected=CloudException.class)\n\tpublic void getSingletonServiceConnectorNoMatchingServiceConnectorCreator() {\n\t    // Think an app bound to a (user) service that doesn't have a corresponding\n\t    // registered ServiceConnectorCreator. When user asks for singleton service connector\n\t    // for another type (with a corresponding creator registered), \n\t    // getSingletonServiceConnector() should throw a CloudException.\n\t    BaseServiceInfo testServiceInfo = new BaseServiceInfo(\"user-service\");\n\t    StubCloudConnector stubCloudConnector = CloudTestUtil.getTestCloudConnector(testServiceInfo);\n\t    serviceConnectorCreators.add(new StubServiceConnectorCreator());\n\t    Cloud testCloud = new Cloud(stubCloudConnector, serviceConnectorCreators);\t\n\n\t    testCloud.getSingletonServiceConnector(StubServiceConnector.class, null);\n\t}", "signature": "void getSingletonServiceConnectorNoMatchingServiceConnectorCreator()", "full_signature": "@Test(expected=CloudException.class) public void getSingletonServiceConnectorNoMatchingServiceConnectorCreator()", "class_method_signature": "CloudTest.getSingletonServiceConnectorNoMatchingServiceConnectorCreator()", "testcase": true, "constructor": false, "invocations": ["getTestCloudConnector", "add", "getSingletonServiceConnector"]}, "focal_class": {"identifier": "Cloud", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CloudConnector cloudConnector;", "modifier": "private", "type": "CloudConnector", "declarator": "cloudConnector", "var_name": "cloudConnector"}, {"original_string": "private ServiceConnectorCreatorRegistry serviceConnectorCreatorRegistry = new ServiceConnectorCreatorRegistry();", "modifier": "private", "type": "ServiceConnectorCreatorRegistry", "declarator": "serviceConnectorCreatorRegistry = new ServiceConnectorCreatorRegistry()", "var_name": "serviceConnectorCreatorRegistry"}], "methods": [{"identifier": "Cloud", "parameters": "(CloudConnector cloudConnector, List<ServiceConnectorCreator<?, ? extends ServiceInfo>> serviceConnectorCreators)", "modifiers": "", "return": "", "signature": " Cloud(CloudConnector cloudConnector, List<ServiceConnectorCreator<?, ? extends ServiceInfo>> serviceConnectorCreators)", "full_signature": "  Cloud(CloudConnector cloudConnector, List<ServiceConnectorCreator<?, ? extends ServiceInfo>> serviceConnectorCreators)", "class_method_signature": "Cloud.Cloud(CloudConnector cloudConnector, List<ServiceConnectorCreator<?, ? extends ServiceInfo>> serviceConnectorCreators)", "testcase": false, "constructor": true}, {"identifier": "getApplicationInstanceInfo", "parameters": "()", "modifiers": "public", "return": "ApplicationInstanceInfo", "signature": "ApplicationInstanceInfo getApplicationInstanceInfo()", "full_signature": "public ApplicationInstanceInfo getApplicationInstanceInfo()", "class_method_signature": "Cloud.getApplicationInstanceInfo()", "testcase": false, "constructor": false}, {"identifier": "getServiceInfo", "parameters": "(String serviceId)", "modifiers": "public", "return": "ServiceInfo", "signature": "ServiceInfo getServiceInfo(String serviceId)", "full_signature": "public ServiceInfo getServiceInfo(String serviceId)", "class_method_signature": "Cloud.getServiceInfo(String serviceId)", "testcase": false, "constructor": false}, {"identifier": "getServiceInfos", "parameters": "()", "modifiers": "public", "return": "List<ServiceInfo>", "signature": "List<ServiceInfo> getServiceInfos()", "full_signature": "public List<ServiceInfo> getServiceInfos()", "class_method_signature": "Cloud.getServiceInfos()", "testcase": false, "constructor": false}, {"identifier": "getServiceInfos", "parameters": "(Class<T> serviceConnectorType)", "modifiers": "public", "return": "List<ServiceInfo>", "signature": "List<ServiceInfo> getServiceInfos(Class<T> serviceConnectorType)", "full_signature": "public List<ServiceInfo> getServiceInfos(Class<T> serviceConnectorType)", "class_method_signature": "Cloud.getServiceInfos(Class<T> serviceConnectorType)", "testcase": false, "constructor": false}, {"identifier": "getServiceInfosByType", "parameters": "(Class<T> serviceInfoType)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<T>", "signature": "List<T> getServiceInfosByType(Class<T> serviceInfoType)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<T> getServiceInfosByType(Class<T> serviceInfoType)", "class_method_signature": "Cloud.getServiceInfosByType(Class<T> serviceInfoType)", "testcase": false, "constructor": false}, {"identifier": "getSingletonServiceInfoByType", "parameters": "(Class<T> serviceInfoType)", "modifiers": "public", "return": "T", "signature": "T getSingletonServiceInfoByType(Class<T> serviceInfoType)", "full_signature": "public T getSingletonServiceInfoByType(Class<T> serviceInfoType)", "class_method_signature": "Cloud.getSingletonServiceInfoByType(Class<T> serviceInfoType)", "testcase": false, "constructor": false}, {"identifier": "getServiceConnector", "parameters": "(String serviceId, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "modifiers": "public", "return": "SC", "signature": "SC getServiceConnector(String serviceId, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "full_signature": "public SC getServiceConnector(String serviceId, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "class_method_signature": "Cloud.getServiceConnector(String serviceId, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "testcase": false, "constructor": false}, {"identifier": "getSingletonServiceConnector", "parameters": "(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "modifiers": "public", "return": "SC", "signature": "SC getSingletonServiceConnector(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "full_signature": "public SC getSingletonServiceConnector(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "class_method_signature": "Cloud.getSingletonServiceConnector(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "testcase": false, "constructor": false}, {"identifier": "registerServiceConnectorCreator", "parameters": "(ServiceConnectorCreator<?, ? extends ServiceInfo> serviceConnectorCreator)", "modifiers": "public", "return": "void", "signature": "void registerServiceConnectorCreator(ServiceConnectorCreator<?, ? extends ServiceInfo> serviceConnectorCreator)", "full_signature": "public void registerServiceConnectorCreator(ServiceConnectorCreator<?, ? extends ServiceInfo> serviceConnectorCreator)", "class_method_signature": "Cloud.registerServiceConnectorCreator(ServiceConnectorCreator<?, ? extends ServiceInfo> serviceConnectorCreator)", "testcase": false, "constructor": false}, {"identifier": "getCloudProperties", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getCloudProperties()", "full_signature": "public Properties getCloudProperties()", "class_method_signature": "Cloud.getCloudProperties()", "testcase": false, "constructor": false}, {"identifier": "getServiceConnector", "parameters": "(ServiceInfo serviceInfo, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "modifiers": "private", "return": "SC", "signature": "SC getServiceConnector(ServiceInfo serviceInfo, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "full_signature": "private SC getServiceConnector(ServiceInfo serviceInfo, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "class_method_signature": "Cloud.getServiceConnector(ServiceInfo serviceInfo, Class<SC> serviceConnectorType,\n\t\tServiceConnectorConfig serviceConnectorConfig)", "testcase": false, "constructor": false}, {"identifier": "getAppProperties", "parameters": "()", "modifiers": "private", "return": "Properties", "signature": "Properties getAppProperties()", "full_signature": "private Properties getAppProperties()", "class_method_signature": "Cloud.getAppProperties()", "testcase": false, "constructor": false}, {"identifier": "addProperty", "parameters": "(Properties appProperties, String key, Object value)", "modifiers": "private", "return": "void", "signature": "void addProperty(Properties appProperties, String key, Object value)", "full_signature": "private void addProperty(Properties appProperties, String key, Object value)", "class_method_signature": "Cloud.addProperty(Properties appProperties, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "getServiceProperties", "parameters": "(String keyLead, ServiceInfo serviceInfo)", "modifiers": "private", "return": "Properties", "signature": "Properties getServiceProperties(String keyLead, ServiceInfo serviceInfo)", "full_signature": "private Properties getServiceProperties(String keyLead, ServiceInfo serviceInfo)", "class_method_signature": "Cloud.getServiceProperties(String keyLead, ServiceInfo serviceInfo)", "testcase": false, "constructor": false}, {"identifier": "getServiceLabel", "parameters": "(ServiceInfo serviceInfo)", "modifiers": "private static", "return": "String", "signature": "String getServiceLabel(ServiceInfo serviceInfo)", "full_signature": "private static String getServiceLabel(ServiceInfo serviceInfo)", "class_method_signature": "Cloud.getServiceLabel(ServiceInfo serviceInfo)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(List<ServiceInfo> serviceInfos)", "modifiers": "private static", "return": "List<ServiceInfo>", "signature": "List<ServiceInfo> flatten(List<ServiceInfo> serviceInfos)", "full_signature": "private static List<ServiceInfo> flatten(List<ServiceInfo> serviceInfos)", "class_method_signature": "Cloud.flatten(List<ServiceInfo> serviceInfos)", "testcase": false, "constructor": false}], "file": "spring-cloud-core/src/main/java/org/springframework/cloud/Cloud.java"}, "focal_method": {"identifier": "getSingletonServiceConnector", "parameters": "(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "modifiers": "public", "return": "SC", "body": "public <SC> SC getSingletonServiceConnector(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig) {\n\t\tList<ServiceInfo> matchingServiceInfos = getServiceInfos(serviceConnectorType);\n\n\t\tif (matchingServiceInfos.size() != 1) {\n\t\t\tthrow new CloudException(\"No unique service matching \" + serviceConnectorType + \" found. Expected 1, found \"\n\t\t\t\t+ matchingServiceInfos.size());\n\t\t}\n\n\t\tServiceInfo matchingServiceInfo = matchingServiceInfos.get(0);\n\n\t\treturn getServiceConnector(matchingServiceInfo, serviceConnectorType, serviceConnectorConfig);\n\t}", "signature": "SC getSingletonServiceConnector(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "full_signature": "public SC getSingletonServiceConnector(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "class_method_signature": "Cloud.getSingletonServiceConnector(Class<SC> serviceConnectorType, ServiceConnectorConfig serviceConnectorConfig)", "testcase": false, "constructor": false, "invocations": ["getServiceInfos", "size", "size", "get", "getServiceConnector"]}, "repository": {"repo_id": 9917257, "url": "https://github.com/spring-cloud/spring-cloud-connectors", "language": "Java", "is_fork": false, "fork_count": 155, "stargazer_count": 159, "size": 2712, "license": "licensed"}}