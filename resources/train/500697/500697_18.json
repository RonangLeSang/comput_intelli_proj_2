{"test_class": {"identifier": "ConsistencyParameterizationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Network d_network;", "modifier": "private", "type": "Network", "declarator": "d_network", "var_name": "d_network"}, {"original_string": "private Study d_s1;", "modifier": "private", "type": "Study", "declarator": "d_s1", "var_name": "d_s1"}, {"original_string": "private Study d_s2;", "modifier": "private", "type": "Study", "declarator": "d_s2", "var_name": "d_s2"}, {"original_string": "private Study d_s3;", "modifier": "private", "type": "Study", "declarator": "d_s3", "var_name": "d_s3"}, {"original_string": "private Study d_s4;", "modifier": "private", "type": "Study", "declarator": "d_s4", "var_name": "d_s4"}, {"original_string": "private Treatment d_ta;", "modifier": "private", "type": "Treatment", "declarator": "d_ta", "var_name": "d_ta"}, {"original_string": "private Treatment d_tb;", "modifier": "private", "type": "Treatment", "declarator": "d_tb", "var_name": "d_tb"}, {"original_string": "private Treatment d_tc;", "modifier": "private", "type": "Treatment", "declarator": "d_tc", "var_name": "d_tc"}, {"original_string": "private Treatment d_td;", "modifier": "private", "type": "Treatment", "declarator": "d_td", "var_name": "d_td"}, {"original_string": "private Treatment d_te;", "modifier": "private", "type": "Treatment", "declarator": "d_te", "var_name": "d_te"}, {"original_string": "private Treatment d_tf;", "modifier": "private", "type": "Treatment", "declarator": "d_tf", "var_name": "d_tf"}], "file": "mtc-model/src/test/java/org/drugis/mtc/parameterization/ConsistencyParameterizationTest.java"}, "test_case": {"identifier": "testFindStudyBaselines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindStudyBaselines() {\n\t\tNetwork network = new Network();\n\t\tnetwork.getTreatments().addAll(Arrays.asList(d_ta, d_tb, d_tc, d_td, d_te, d_tf));\n\t\tStudy s1 = new Study(\"1\");\n\t\ts1.getMeasurements().addAll(Arrays.asList(new Measurement(d_tc), new Measurement(d_tf)));\n\t\tStudy s2 = new Study(\"2\");\n\t\ts2.getMeasurements().addAll(Arrays.asList(new Measurement(d_tb), new Measurement(d_tc), new Measurement(d_td)));\n\t\tStudy s3 = new Study(\"3\");\n\t\ts3.getMeasurements().addAll(Arrays.asList(new Measurement(d_ta), new Measurement(d_te), new Measurement(d_tf)));\n\t\tnetwork.getStudies().addAll(Arrays.asList(s1, s2, s3));\n\t\t\n\t\t// First test the tree is as expected since the study baselines depend on the chosen tree\n\t\tHypergraph<Treatment, Study> studyGraph = NetworkModel.createStudyGraph(network);\n\t\tUndirectedGraph<Treatment, FoldedEdge<Treatment, Study>> cGraph = NetworkModel.createComparisonGraph(studyGraph);\n\t\tTree<Treatment, FoldedEdge<Treatment, Study>> tree = ConsistencyParameterization.findSpanningTree(cGraph);\n\t\tassertEquals(d_tc, tree.getRoot());\n\t\tassertNotNull(tree.findEdge(d_tc, d_tf));\n\t\tassertNotNull(tree.findEdge(d_tc, d_tb));\n\t\tassertNotNull(tree.findEdge(d_tc, d_td));\n\t\tassertNotNull(tree.findEdge(d_tf, d_te));\n\t\tassertNotNull(tree.findEdge(d_tf, d_ta));\n\t\t\n\t\t// Now test the study baselines\n\t\tMap<Study, Treatment> baselines = ConsistencyParameterization.findStudyBaselines(studyGraph, tree);\n\t\tassertEquals(d_tc, baselines.get(s1));\n\t\tassertEquals(d_tc, baselines.get(s2));\n\t\tassertEquals(d_tf, baselines.get(s3));\n\t}", "signature": "void testFindStudyBaselines()", "full_signature": "@Test public void testFindStudyBaselines()", "class_method_signature": "ConsistencyParameterizationTest.testFindStudyBaselines()", "testcase": true, "constructor": false, "invocations": ["addAll", "getTreatments", "asList", "addAll", "getMeasurements", "asList", "addAll", "getMeasurements", "asList", "addAll", "getMeasurements", "asList", "addAll", "getStudies", "asList", "createStudyGraph", "createComparisonGraph", "findSpanningTree", "assertEquals", "getRoot", "assertNotNull", "findEdge", "assertNotNull", "findEdge", "assertNotNull", "findEdge", "assertNotNull", "findEdge", "assertNotNull", "findEdge", "findStudyBaselines", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ConsistencyParameterization", "superclass": "", "interfaces": "implements Parameterization", "fields": [{"original_string": "protected final Tree<Treatment, FoldedEdge<Treatment, Study>> d_tree;", "modifier": "protected final", "type": "Tree<Treatment, FoldedEdge<Treatment, Study>>", "declarator": "d_tree", "var_name": "d_tree"}, {"original_string": "private final Map<Study, Treatment> d_baselines;", "modifier": "private final", "type": "Map<Study, Treatment>", "declarator": "d_baselines", "var_name": "d_baselines"}], "methods": [{"identifier": "create", "parameters": "(Network network)", "modifiers": "public static", "return": "ConsistencyParameterization", "signature": "ConsistencyParameterization create(Network network)", "full_signature": "public static ConsistencyParameterization create(Network network)", "class_method_signature": "ConsistencyParameterization.create(Network network)", "testcase": false, "constructor": false}, {"identifier": "findSpanningTree", "parameters": "(UndirectedGraph<Treatment, FoldedEdge<Treatment, Study>> cGraph)", "modifiers": "public static", "return": "Tree<Treatment, FoldedEdge<Treatment, Study>>", "signature": "Tree<Treatment, FoldedEdge<Treatment, Study>> findSpanningTree(UndirectedGraph<Treatment, FoldedEdge<Treatment, Study>> cGraph)", "full_signature": "public static Tree<Treatment, FoldedEdge<Treatment, Study>> findSpanningTree(UndirectedGraph<Treatment, FoldedEdge<Treatment, Study>> cGraph)", "class_method_signature": "ConsistencyParameterization.findSpanningTree(UndirectedGraph<Treatment, FoldedEdge<Treatment, Study>> cGraph)", "testcase": false, "constructor": false}, {"identifier": "findStudyBaselines", "parameters": "(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "modifiers": "public static", "return": "Map<Study, Treatment>", "signature": "Map<Study, Treatment> findStudyBaselines(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "full_signature": "public static Map<Study, Treatment> findStudyBaselines(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "class_method_signature": "ConsistencyParameterization.findStudyBaselines(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "testcase": false, "constructor": false}, {"identifier": "findMaxDegreeVertex", "parameters": "(Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Collection<Treatment> incidentVertices)", "modifiers": "protected static", "return": "Treatment", "signature": "Treatment findMaxDegreeVertex(Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Collection<Treatment> incidentVertices)", "full_signature": "protected static Treatment findMaxDegreeVertex(Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Collection<Treatment> incidentVertices)", "class_method_signature": "ConsistencyParameterization.findMaxDegreeVertex(Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Collection<Treatment> incidentVertices)", "testcase": false, "constructor": false}, {"identifier": "ConsistencyParameterization", "parameters": "(Network network, Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Map<Study, Treatment> baselines)", "modifiers": "public", "return": "", "signature": " ConsistencyParameterization(Network network, Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Map<Study, Treatment> baselines)", "full_signature": "public  ConsistencyParameterization(Network network, Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Map<Study, Treatment> baselines)", "class_method_signature": "ConsistencyParameterization.ConsistencyParameterization(Network network, Tree<Treatment, FoldedEdge<Treatment, Study>> tree, Map<Study, Treatment> baselines)", "testcase": false, "constructor": true}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "List<NetworkParameter>", "signature": "List<NetworkParameter> getParameters()", "full_signature": "public List<NetworkParameter> getParameters()", "class_method_signature": "ConsistencyParameterization.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getBasicParameters", "parameters": "(Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "modifiers": "public static", "return": "List<NetworkParameter>", "signature": "List<NetworkParameter> getBasicParameters(Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "full_signature": "public static List<NetworkParameter> getBasicParameters(Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "class_method_signature": "ConsistencyParameterization.getBasicParameters(Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "testcase": false, "constructor": false}, {"identifier": "parameterize", "parameters": "(Treatment ta, Treatment tb)", "modifiers": "public", "return": "Map<NetworkParameter, Integer>", "signature": "Map<NetworkParameter, Integer> parameterize(Treatment ta, Treatment tb)", "full_signature": "public Map<NetworkParameter, Integer> parameterize(Treatment ta, Treatment tb)", "class_method_signature": "ConsistencyParameterization.parameterize(Treatment ta, Treatment tb)", "testcase": false, "constructor": false}, {"identifier": "parameterizeFunctional", "parameters": "(Treatment ta, Treatment tb)", "modifiers": "protected", "return": "Map<NetworkParameter, Integer>", "signature": "Map<NetworkParameter, Integer> parameterizeFunctional(Treatment ta, Treatment tb)", "full_signature": "protected Map<NetworkParameter, Integer> parameterizeFunctional(Treatment ta, Treatment tb)", "class_method_signature": "ConsistencyParameterization.parameterizeFunctional(Treatment ta, Treatment tb)", "testcase": false, "constructor": false}, {"identifier": "getStudyBaseline", "parameters": "(Study s)", "modifiers": "public", "return": "Treatment", "signature": "Treatment getStudyBaseline(Study s)", "full_signature": "public Treatment getStudyBaseline(Study s)", "class_method_signature": "ConsistencyParameterization.getStudyBaseline(Study s)", "testcase": false, "constructor": false}, {"identifier": "pathToParameterization", "parameters": "(List<Treatment> path)", "modifiers": "private", "return": "Map<NetworkParameter, Integer>", "signature": "Map<NetworkParameter, Integer> pathToParameterization(List<Treatment> path)", "full_signature": "private Map<NetworkParameter, Integer> pathToParameterization(List<Treatment> path)", "class_method_signature": "ConsistencyParameterization.pathToParameterization(List<Treatment> path)", "testcase": false, "constructor": false}, {"identifier": "createBasic", "parameters": "(Treatment first, Treatment second)", "modifiers": "private static", "return": "BasicParameter", "signature": "BasicParameter createBasic(Treatment first, Treatment second)", "full_signature": "private static BasicParameter createBasic(Treatment first, Treatment second)", "class_method_signature": "ConsistencyParameterization.createBasic(Treatment first, Treatment second)", "testcase": false, "constructor": false}, {"identifier": "parameterizeStudy", "parameters": "(Study s)", "modifiers": "public", "return": "List<List<Pair<Treatment>>>", "signature": "List<List<Pair<Treatment>>> parameterizeStudy(Study s)", "full_signature": "public List<List<Pair<Treatment>>> parameterizeStudy(Study s)", "class_method_signature": "ConsistencyParameterization.parameterizeStudy(Study s)", "testcase": false, "constructor": false}, {"identifier": "getBasicParameterTree", "parameters": "()", "modifiers": "public", "return": "Graph<Treatment, FoldedEdge<Treatment, Study>>", "signature": "Graph<Treatment, FoldedEdge<Treatment, Study>> getBasicParameterTree()", "full_signature": "public Graph<Treatment, FoldedEdge<Treatment, Study>> getBasicParameterTree()", "class_method_signature": "ConsistencyParameterization.getBasicParameterTree()", "testcase": false, "constructor": false}], "file": "mtc-model/src/main/java/org/drugis/mtc/parameterization/ConsistencyParameterization.java"}, "focal_method": {"identifier": "findStudyBaselines", "parameters": "(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "modifiers": "public static", "return": "Map<Study, Treatment>", "body": "public static Map<Study, Treatment> findStudyBaselines(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree) {\n\t\tMap<Study, Treatment> map = new HashMap<Study, Treatment>();\n\t\tfor (Study s : studyGraph.getEdges()) {\n\t\t\tmap.put(s, findMaxDegreeVertex(tree, studyGraph.getIncidentVertices(s)));\n\t\t}\n\t\treturn map;\n\t}", "signature": "Map<Study, Treatment> findStudyBaselines(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "full_signature": "public static Map<Study, Treatment> findStudyBaselines(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "class_method_signature": "ConsistencyParameterization.findStudyBaselines(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, FoldedEdge<Treatment, Study>> tree)", "testcase": false, "constructor": false, "invocations": ["getEdges", "put", "findMaxDegreeVertex", "getIncidentVertices"]}, "repository": {"repo_id": 500697, "url": "https://github.com/drugis/mtc", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 8271, "license": "licensed"}}