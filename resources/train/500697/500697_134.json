{"test_class": {"identifier": "SigmaRowArgumentMakerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.000000001", "var_name": "EPSILON"}, {"original_string": "private Treatment d_ta;", "modifier": "private", "type": "Treatment", "declarator": "d_ta", "var_name": "d_ta"}, {"original_string": "private Treatment d_tb;", "modifier": "private", "type": "Treatment", "declarator": "d_tb", "var_name": "d_tb"}, {"original_string": "private Treatment d_tc;", "modifier": "private", "type": "Treatment", "declarator": "d_tc", "var_name": "d_tc"}, {"original_string": "private Treatment d_td;", "modifier": "private", "type": "Treatment", "declarator": "d_td", "var_name": "d_td"}], "file": "mtc-mcmc/src/test/java/org/drugis/mtc/yadas/SigmaRowArgumentMakerTest.java"}, "test_case": {"identifier": "testGetArgumentFourArmSplit", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tpublic void testGetArgumentFourArmSplit() {\n\t\tdouble[] sigma = new double[] {2.0};\n\t\tdouble[] expected0 = new double[] {4.0, 2.0, 0.0};\n\t\tdouble[] expected1 = new double[] {2.0, 4.0, 0.0};\n\t\tdouble[] expected2 = new double[] {0.0, 0.0, 4.0};\n\t\t\n\t\tList<List<Pair<Treatment>>> param = Arrays.asList(\n\t\t\t\tArrays.asList(new Pair<Treatment>(d_ta, d_tb), new Pair<Treatment>(d_ta, d_tc)),\n\t\t\t\tArrays.asList(new Pair<Treatment>(d_ta, d_td)));\n\t\t\n\t\tSigmaRowArgumentMaker maker0 = new SigmaRowArgumentMaker(param, 0, 0);\n\t\tassertArrayEquals(expected0, maker0.getArgument(new double[][] {sigma}), EPSILON);\n\n\t\tSigmaRowArgumentMaker maker1 = new SigmaRowArgumentMaker(param, 1, 0);\n\t\tassertArrayEquals(expected1, maker1.getArgument(new double[][] {sigma}), EPSILON);\n\t\t\n\t\tSigmaRowArgumentMaker maker2 = new SigmaRowArgumentMaker(param, 2, 0);\n\t\tassertArrayEquals(expected2, maker2.getArgument(new double[][] {sigma}), EPSILON);\n\t}", "signature": "void testGetArgumentFourArmSplit()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testGetArgumentFourArmSplit()", "class_method_signature": "SigmaRowArgumentMakerTest.testGetArgumentFourArmSplit()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "asList", "assertArrayEquals", "getArgument", "assertArrayEquals", "getArgument", "assertArrayEquals", "getArgument"]}, "focal_class": {"identifier": "SigmaRowArgumentMaker", "superclass": "", "interfaces": "implements ArgumentMaker", "fields": [{"original_string": "private final int d_sigmaIdx;", "modifier": "private final", "type": "int", "declarator": "d_sigmaIdx", "var_name": "d_sigmaIdx"}, {"original_string": "private final int d_row;", "modifier": "private final", "type": "int", "declarator": "d_row", "var_name": "d_row"}, {"original_string": "private int d_nRows;", "modifier": "private", "type": "int", "declarator": "d_nRows", "var_name": "d_nRows"}, {"original_string": "private int d_from;", "modifier": "private", "type": "int", "declarator": "d_from", "var_name": "d_from"}, {"original_string": "private int d_to;", "modifier": "private", "type": "int", "declarator": "d_to", "var_name": "d_to"}], "methods": [{"identifier": "createMatrixArgumentMaker", "parameters": "(List<List<Pair<Treatment>>> studyPmtz, int sigmaIdx)", "modifiers": "public static", "return": "List<ArgumentMaker>", "signature": "List<ArgumentMaker> createMatrixArgumentMaker(List<List<Pair<Treatment>>> studyPmtz, int sigmaIdx)", "full_signature": "public static List<ArgumentMaker> createMatrixArgumentMaker(List<List<Pair<Treatment>>> studyPmtz, int sigmaIdx)", "class_method_signature": "SigmaRowArgumentMaker.createMatrixArgumentMaker(List<List<Pair<Treatment>>> studyPmtz, int sigmaIdx)", "testcase": false, "constructor": false}, {"identifier": "SigmaRowArgumentMaker", "parameters": "(List<List<Pair<Treatment>>> studyPmtz, int row, int sigmaIdx)", "modifiers": "public", "return": "", "signature": " SigmaRowArgumentMaker(List<List<Pair<Treatment>>> studyPmtz, int row, int sigmaIdx)", "full_signature": "public  SigmaRowArgumentMaker(List<List<Pair<Treatment>>> studyPmtz, int row, int sigmaIdx)", "class_method_signature": "SigmaRowArgumentMaker.SigmaRowArgumentMaker(List<List<Pair<Treatment>>> studyPmtz, int row, int sigmaIdx)", "testcase": false, "constructor": true}, {"identifier": "getArgument", "parameters": "(double[][] data)", "modifiers": "public", "return": "double[]", "signature": "double[] getArgument(double[][] data)", "full_signature": "public double[] getArgument(double[][] data)", "class_method_signature": "SigmaRowArgumentMaker.getArgument(double[][] data)", "testcase": false, "constructor": false}], "file": "mtc-mcmc/src/main/java/org/drugis/mtc/yadas/SigmaRowArgumentMaker.java"}, "focal_method": {"identifier": "getArgument", "parameters": "(double[][] data)", "modifiers": "public", "return": "double[]", "body": "public double[] getArgument(double[][] data) {\n\t\tdouble sd = data[d_sigmaIdx][0];\n\t\tdouble var = sd * sd;\n\t\tdouble cov = var / 2;\n\t\t\n\t\t// Initialize the row to 0.0\n\t\tdouble[] arr = new double[d_nRows];\n\n\t\t// Covariance should != 0.0 only for the block of relative effects that this relative effect belongs to\n\t\tArrays.fill(arr, d_from, d_to, cov);\n\n\t\t// Set the variance at (row, row).\n\t\tarr[d_row] = var;\n\n\t\treturn arr;\n\t}", "signature": "double[] getArgument(double[][] data)", "full_signature": "public double[] getArgument(double[][] data)", "class_method_signature": "SigmaRowArgumentMaker.getArgument(double[][] data)", "testcase": false, "constructor": false, "invocations": ["fill"]}, "repository": {"repo_id": 500697, "url": "https://github.com/drugis/mtc", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 8271, "license": "licensed"}}