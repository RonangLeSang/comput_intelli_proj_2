{"test_class": {"identifier": "RepositoryPersonServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long PERSON_COUNT = 4;", "modifier": "private static final", "type": "long", "declarator": "PERSON_COUNT = 4", "var_name": "PERSON_COUNT"}, {"original_string": "private static final int PAGE_INDEX = 1;", "modifier": "private static final", "type": "int", "declarator": "PAGE_INDEX = 1", "var_name": "PAGE_INDEX"}, {"original_string": "private static final Long PERSON_ID = Long.valueOf(5);", "modifier": "private static final", "type": "Long", "declarator": "PERSON_ID = Long.valueOf(5)", "var_name": "PERSON_ID"}, {"original_string": "private static final String FIRST_NAME = \"Foo\";", "modifier": "private static final", "type": "String", "declarator": "FIRST_NAME = \"Foo\"", "var_name": "FIRST_NAME"}, {"original_string": "private static final String FIRST_NAME_UPDATED = \"FooUpdated\";", "modifier": "private static final", "type": "String", "declarator": "FIRST_NAME_UPDATED = \"FooUpdated\"", "var_name": "FIRST_NAME_UPDATED"}, {"original_string": "private static final String LAST_NAME = \"Bar\";", "modifier": "private static final", "type": "String", "declarator": "LAST_NAME = \"Bar\"", "var_name": "LAST_NAME"}, {"original_string": "private static final String LAST_NAME_UPDATED = \"BarUpdated\";", "modifier": "private static final", "type": "String", "declarator": "LAST_NAME_UPDATED = \"BarUpdated\"", "var_name": "LAST_NAME_UPDATED"}, {"original_string": "private static final String SEARCH_TERM = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TERM = \"foo\"", "var_name": "SEARCH_TERM"}, {"original_string": "private RepositoryPersonService personService;", "modifier": "private", "type": "RepositoryPersonService", "declarator": "personService", "var_name": "personService"}, {"original_string": "private PersonRepository personRepositoryMock;", "modifier": "private", "type": "PersonRepository", "declarator": "personRepositoryMock", "var_name": "personRepositoryMock"}], "file": "tutorial-part-eight/src/test/java/net/petrikainulainen/spring/datajpa/service/RepositoryPersonServiceTest.java"}, "test_case": {"identifier": "delete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void delete() throws PersonNotFoundException {\n        Person deleted = PersonTestUtil.createModelObject(PERSON_ID, FIRST_NAME, LAST_NAME);\n        when(personRepositoryMock.findOne(PERSON_ID)).thenReturn(deleted);\n        \n        Person returned = personService.delete(PERSON_ID);\n        \n        verify(personRepositoryMock, times(1)).findOne(PERSON_ID);\n        verify(personRepositoryMock, times(1)).delete(deleted);\n        verifyNoMoreInteractions(personRepositoryMock);\n        \n        assertEquals(deleted, returned);\n    }", "signature": "void delete()", "full_signature": "@Test public void delete()", "class_method_signature": "RepositoryPersonServiceTest.delete()", "testcase": true, "constructor": false, "invocations": ["createModelObject", "thenReturn", "when", "findOne", "delete", "findOne", "verify", "times", "delete", "verify", "times", "verifyNoMoreInteractions", "assertEquals"]}, "focal_class": {"identifier": "RepositoryPersonService", "superclass": "", "interfaces": "implements PersonService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryPersonService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RepositoryPersonService.class)", "var_name": "LOGGER"}, {"original_string": "protected static final int NUMBER_OF_PERSONS_PER_PAGE = 5;", "modifier": "protected static final", "type": "int", "declarator": "NUMBER_OF_PERSONS_PER_PAGE = 5", "var_name": "NUMBER_OF_PERSONS_PER_PAGE"}, {"original_string": "@Resource\n    private PersonRepository personRepository;", "modifier": "@Resource\n    private", "type": "PersonRepository", "declarator": "personRepository", "var_name": "personRepository"}], "methods": [{"identifier": "create", "parameters": "(PersonDTO created)", "modifiers": "@Transactional @Override public", "return": "Person", "signature": "Person create(PersonDTO created)", "full_signature": "@Transactional @Override public Person create(PersonDTO created)", "class_method_signature": "RepositoryPersonService.create(PersonDTO created)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String searchTerm)", "modifiers": "@Transactional @Override public", "return": "long", "signature": "long count(String searchTerm)", "full_signature": "@Transactional @Override public long count(String searchTerm)", "class_method_signature": "RepositoryPersonService.count(String searchTerm)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Long personId)", "modifiers": "@Transactional(rollbackFor = PersonNotFoundException.class) @Override public", "return": "Person", "signature": "Person delete(Long personId)", "full_signature": "@Transactional(rollbackFor = PersonNotFoundException.class) @Override public Person delete(Long personId)", "class_method_signature": "RepositoryPersonService.delete(Long personId)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "List<Person>", "signature": "List<Person> findAll()", "full_signature": "@Transactional(readOnly = true) @Override public List<Person> findAll()", "class_method_signature": "RepositoryPersonService.findAll()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(Long id)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "Person", "signature": "Person findById(Long id)", "full_signature": "@Transactional(readOnly = true) @Override public Person findById(Long id)", "class_method_signature": "RepositoryPersonService.findById(Long id)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String searchTerm, int pageIndex)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "List<Person>", "signature": "List<Person> search(String searchTerm, int pageIndex)", "full_signature": "@Transactional(readOnly = true) @Override public List<Person> search(String searchTerm, int pageIndex)", "class_method_signature": "RepositoryPersonService.search(String searchTerm, int pageIndex)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(PersonDTO updated)", "modifiers": "@Transactional(rollbackFor = PersonNotFoundException.class) @Override public", "return": "Person", "signature": "Person update(PersonDTO updated)", "full_signature": "@Transactional(rollbackFor = PersonNotFoundException.class) @Override public Person update(PersonDTO updated)", "class_method_signature": "RepositoryPersonService.update(PersonDTO updated)", "testcase": false, "constructor": false}, {"identifier": "setPersonRepository", "parameters": "(PersonRepository personRepository)", "modifiers": "protected", "return": "void", "signature": "void setPersonRepository(PersonRepository personRepository)", "full_signature": "protected void setPersonRepository(PersonRepository personRepository)", "class_method_signature": "RepositoryPersonService.setPersonRepository(PersonRepository personRepository)", "testcase": false, "constructor": false}], "file": "tutorial-part-eight/src/main/java/net/petrikainulainen/spring/datajpa/service/RepositoryPersonService.java"}, "focal_method": {"identifier": "delete", "parameters": "(Long personId)", "modifiers": "@Transactional(rollbackFor = PersonNotFoundException.class) @Override public", "return": "Person", "body": "@Transactional(rollbackFor = PersonNotFoundException.class)\n    @Override\n    public Person delete(Long personId) throws PersonNotFoundException {\n        LOGGER.debug(\"Deleting person with id: \" + personId);\n        \n        Person deleted = personRepository.findOne(personId);\n        \n        if (deleted == null) {\n            LOGGER.debug(\"No person found with id: \" + personId);\n            throw new PersonNotFoundException();\n        }\n        \n        personRepository.delete(deleted);\n        return deleted;\n    }", "signature": "Person delete(Long personId)", "full_signature": "@Transactional(rollbackFor = PersonNotFoundException.class) @Override public Person delete(Long personId)", "class_method_signature": "RepositoryPersonService.delete(Long personId)", "testcase": false, "constructor": false, "invocations": ["debug", "findOne", "debug", "delete"]}, "repository": {"repo_id": 10288749, "url": "https://github.com/pkainulainen/spring-data-jpa-examples", "language": "Java", "is_fork": false, "fork_count": 691, "stargazer_count": 579, "size": 587, "license": "licensed"}}