{"test_class": {"identifier": "TestTransactionSchedulerImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SgsTestNode serverNode = null;", "modifier": "private", "type": "SgsTestNode", "declarator": "serverNode = null", "var_name": "serverNode"}, {"original_string": "private TransactionSchedulerImpl txnScheduler;", "modifier": "private", "type": "TransactionSchedulerImpl", "declarator": "txnScheduler", "var_name": "txnScheduler"}, {"original_string": "private Identity taskOwner;", "modifier": "private", "type": "Identity", "declarator": "taskOwner", "var_name": "taskOwner"}], "file": "sgs-server/src/test/java/com/sun/sgs/impl/kernel/TestTransactionSchedulerImpl.java"}, "test_case": {"identifier": "runUnboundedTaskNullOwner", "parameters": "()", "modifiers": "@Test (expected=NullPointerException.class) public", "return": "void", "body": "@Test (expected=NullPointerException.class)\n    public void runUnboundedTaskNullOwner() throws Exception {\n        txnScheduler.runUnboundedTask(new TestAbstractKernelRunnable() {\n            public void run() {\n            }\n        }, null);\n    }", "signature": "void runUnboundedTaskNullOwner()", "full_signature": "@Test (expected=NullPointerException.class) public void runUnboundedTaskNullOwner()", "class_method_signature": "TestTransactionSchedulerImpl.runUnboundedTaskNullOwner()", "testcase": true, "constructor": false, "invocations": ["runUnboundedTask"]}, "focal_class": {"identifier": "TransactionSchedulerImpl", "superclass": "", "interfaces": "implements TransactionScheduler, PriorityScheduler, ProfileListener", "fields": [{"original_string": "private static final LoggerWrapper logger =\n        new LoggerWrapper(Logger.getLogger(TransactionSchedulerImpl.\n                                           class.getName()));", "modifier": "private static final", "type": "LoggerWrapper", "declarator": "logger =\n        new LoggerWrapper(Logger.getLogger(TransactionSchedulerImpl.\n                                           class.getName()))", "var_name": "logger"}, {"original_string": "public static final String SCHEDULER_QUEUE_PROPERTY =\n            \"com.sun.sgs.impl.kernel.scheduler.queue\";", "modifier": "public static final", "type": "String", "declarator": "SCHEDULER_QUEUE_PROPERTY =\n            \"com.sun.sgs.impl.kernel.scheduler.queue\"", "var_name": "SCHEDULER_QUEUE_PROPERTY"}, {"original_string": "public static final String DEFAULT_SCHEDULER_QUEUE =\n            \"com.sun.sgs.impl.kernel.schedule.FIFOSchedulerQueue\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SCHEDULER_QUEUE =\n            \"com.sun.sgs.impl.kernel.schedule.FIFOSchedulerQueue\"", "var_name": "DEFAULT_SCHEDULER_QUEUE"}, {"original_string": "public static final String SCHEDULER_RETRY_PROPERTY =\n            \"com.sun.sgs.impl.kernel.scheduler.retry\";", "modifier": "public static final", "type": "String", "declarator": "SCHEDULER_RETRY_PROPERTY =\n            \"com.sun.sgs.impl.kernel.scheduler.retry\"", "var_name": "SCHEDULER_RETRY_PROPERTY"}, {"original_string": "public static final String DEFAULT_SCHEDULER_RETRY =\n            \"com.sun.sgs.impl.kernel.schedule.ImmediateRetryPolicy\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SCHEDULER_RETRY =\n            \"com.sun.sgs.impl.kernel.schedule.ImmediateRetryPolicy\"", "var_name": "DEFAULT_SCHEDULER_RETRY"}, {"original_string": "public static final String CONSUMER_THREADS_PROPERTY =\n        \"com.sun.sgs.impl.kernel.transaction.threads\";", "modifier": "public static final", "type": "String", "declarator": "CONSUMER_THREADS_PROPERTY =\n        \"com.sun.sgs.impl.kernel.transaction.threads\"", "var_name": "CONSUMER_THREADS_PROPERTY"}, {"original_string": "public static final String DEFAULT_CONSUMER_THREADS = \"4\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONSUMER_THREADS = \"4\"", "var_name": "DEFAULT_CONSUMER_THREADS"}, {"original_string": "private static final Priority defaultPriority =\n        Priority.getDefaultPriority();", "modifier": "private static final", "type": "Priority", "declarator": "defaultPriority =\n        Priority.getDefaultPriority()", "var_name": "defaultPriority"}, {"original_string": "private final TransactionCoordinator transactionCoordinator;", "modifier": "private final", "type": "TransactionCoordinator", "declarator": "transactionCoordinator", "var_name": "transactionCoordinator"}, {"original_string": "private final SchedulerQueue backingQueue;", "modifier": "private final", "type": "SchedulerQueue", "declarator": "backingQueue", "var_name": "backingQueue"}, {"original_string": "private final SchedulerRetryPolicy retryPolicy;", "modifier": "private final", "type": "SchedulerRetryPolicy", "declarator": "retryPolicy", "var_name": "retryPolicy"}, {"original_string": "private final ProfileCollectorHandle profileCollectorHandle;", "modifier": "private final", "type": "ProfileCollectorHandle", "declarator": "profileCollectorHandle", "var_name": "profileCollectorHandle"}, {"original_string": "private final AccessCoordinatorHandle accessCoordinator;", "modifier": "private final", "type": "AccessCoordinatorHandle", "declarator": "accessCoordinator", "var_name": "accessCoordinator"}, {"original_string": "private final ExecutorService executor;", "modifier": "private final", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final AtomicInteger threadCount = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "threadCount = new AtomicInteger(0)", "var_name": "threadCount"}, {"original_string": "private final int requestedThreads;", "modifier": "private final", "type": "int", "declarator": "requestedThreads", "var_name": "requestedThreads"}, {"original_string": "private volatile boolean isShutdown = false;", "modifier": "private volatile", "type": "boolean", "declarator": "isShutdown = false", "var_name": "isShutdown"}, {"original_string": "private volatile KernelContext kernelContext = null;", "modifier": "private volatile", "type": "KernelContext", "declarator": "kernelContext = null", "var_name": "kernelContext"}, {"original_string": "private final AtomicInteger dependencyCount = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "dependencyCount = new AtomicInteger(0)", "var_name": "dependencyCount"}], "methods": [{"identifier": "TransactionSchedulerImpl", "parameters": "(Properties properties,\n                             TransactionCoordinator transactionCoordinator,\n                             ProfileCollectorHandle profileCollectorHandle,\n                             AccessCoordinatorHandle accessCoordinator)", "modifiers": "", "return": "", "signature": " TransactionSchedulerImpl(Properties properties,\n                             TransactionCoordinator transactionCoordinator,\n                             ProfileCollectorHandle profileCollectorHandle,\n                             AccessCoordinatorHandle accessCoordinator)", "full_signature": "  TransactionSchedulerImpl(Properties properties,\n                             TransactionCoordinator transactionCoordinator,\n                             ProfileCollectorHandle profileCollectorHandle,\n                             AccessCoordinatorHandle accessCoordinator)", "class_method_signature": "TransactionSchedulerImpl.TransactionSchedulerImpl(Properties properties,\n                             TransactionCoordinator transactionCoordinator,\n                             ProfileCollectorHandle profileCollectorHandle,\n                             AccessCoordinatorHandle accessCoordinator)", "testcase": false, "constructor": true}, {"identifier": "setContext", "parameters": "(KernelContext kernelContext)", "modifiers": "", "return": "void", "signature": "void setContext(KernelContext kernelContext)", "full_signature": " void setContext(KernelContext kernelContext)", "class_method_signature": "TransactionSchedulerImpl.setContext(KernelContext kernelContext)", "testcase": false, "constructor": false}, {"identifier": "reserveTask", "parameters": "(KernelRunnable task, Identity owner)", "modifiers": "public", "return": "TaskReservation", "signature": "TaskReservation reserveTask(KernelRunnable task, Identity owner)", "full_signature": "public TaskReservation reserveTask(KernelRunnable task, Identity owner)", "class_method_signature": "TransactionSchedulerImpl.reserveTask(KernelRunnable task, Identity owner)", "testcase": false, "constructor": false}, {"identifier": "reserveTask", "parameters": "(KernelRunnable task, Identity owner,\n                                       long startTime)", "modifiers": "public", "return": "TaskReservation", "signature": "TaskReservation reserveTask(KernelRunnable task, Identity owner,\n                                       long startTime)", "full_signature": "public TaskReservation reserveTask(KernelRunnable task, Identity owner,\n                                       long startTime)", "class_method_signature": "TransactionSchedulerImpl.reserveTask(KernelRunnable task, Identity owner,\n                                       long startTime)", "testcase": false, "constructor": false}, {"identifier": "scheduleTask", "parameters": "(KernelRunnable task, Identity owner)", "modifiers": "public", "return": "void", "signature": "void scheduleTask(KernelRunnable task, Identity owner)", "full_signature": "public void scheduleTask(KernelRunnable task, Identity owner)", "class_method_signature": "TransactionSchedulerImpl.scheduleTask(KernelRunnable task, Identity owner)", "testcase": false, "constructor": false}, {"identifier": "scheduleTask", "parameters": "(KernelRunnable task, Identity owner,\n                             long startTime)", "modifiers": "public", "return": "void", "signature": "void scheduleTask(KernelRunnable task, Identity owner,\n                             long startTime)", "full_signature": "public void scheduleTask(KernelRunnable task, Identity owner,\n                             long startTime)", "class_method_signature": "TransactionSchedulerImpl.scheduleTask(KernelRunnable task, Identity owner,\n                             long startTime)", "testcase": false, "constructor": false}, {"identifier": "scheduleRecurringTask", "parameters": "(KernelRunnable task,\n                                                     Identity owner,\n                                                     long startTime,\n                                                     long period)", "modifiers": "public", "return": "RecurringTaskHandle", "signature": "RecurringTaskHandle scheduleRecurringTask(KernelRunnable task,\n                                                     Identity owner,\n                                                     long startTime,\n                                                     long period)", "full_signature": "public RecurringTaskHandle scheduleRecurringTask(KernelRunnable task,\n                                                     Identity owner,\n                                                     long startTime,\n                                                     long period)", "class_method_signature": "TransactionSchedulerImpl.scheduleRecurringTask(KernelRunnable task,\n                                                     Identity owner,\n                                                     long startTime,\n                                                     long period)", "testcase": false, "constructor": false}, {"identifier": "createTaskQueue", "parameters": "()", "modifiers": "public", "return": "TaskQueue", "signature": "TaskQueue createTaskQueue()", "full_signature": "public TaskQueue createTaskQueue()", "class_method_signature": "TransactionSchedulerImpl.createTaskQueue()", "testcase": false, "constructor": false}, {"identifier": "runTask", "parameters": "(KernelRunnable task, Identity owner)", "modifiers": "public", "return": "void", "signature": "void runTask(KernelRunnable task, Identity owner)", "full_signature": "public void runTask(KernelRunnable task, Identity owner)", "class_method_signature": "TransactionSchedulerImpl.runTask(KernelRunnable task, Identity owner)", "testcase": false, "constructor": false}, {"identifier": "reserveTask", "parameters": "(KernelRunnable task, Identity owner,\n                                       Priority priority)", "modifiers": "public", "return": "TaskReservation", "signature": "TaskReservation reserveTask(KernelRunnable task, Identity owner,\n                                       Priority priority)", "full_signature": "public TaskReservation reserveTask(KernelRunnable task, Identity owner,\n                                       Priority priority)", "class_method_signature": "TransactionSchedulerImpl.reserveTask(KernelRunnable task, Identity owner,\n                                       Priority priority)", "testcase": false, "constructor": false}, {"identifier": "scheduleTask", "parameters": "(KernelRunnable task, Identity owner,\n                             Priority priority)", "modifiers": "public", "return": "void", "signature": "void scheduleTask(KernelRunnable task, Identity owner,\n                             Priority priority)", "full_signature": "public void scheduleTask(KernelRunnable task, Identity owner,\n                             Priority priority)", "class_method_signature": "TransactionSchedulerImpl.scheduleTask(KernelRunnable task, Identity owner,\n                             Priority priority)", "testcase": false, "constructor": false}, {"identifier": "propertyChange", "parameters": "(PropertyChangeEvent event)", "modifiers": "public", "return": "void", "signature": "void propertyChange(PropertyChangeEvent event)", "full_signature": "public void propertyChange(PropertyChangeEvent event)", "class_method_signature": "TransactionSchedulerImpl.propertyChange(PropertyChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(ProfileReport profileReport)", "modifiers": "public", "return": "void", "signature": "void report(ProfileReport profileReport)", "full_signature": "public void report(ProfileReport profileReport)", "class_method_signature": "TransactionSchedulerImpl.report(ProfileReport profileReport)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "TransactionSchedulerImpl.shutdown()", "testcase": false, "constructor": false}, {"identifier": "waitForTask", "parameters": "(ScheduledTaskImpl task)", "modifiers": "private", "return": "void", "signature": "void waitForTask(ScheduledTaskImpl task)", "full_signature": "private void waitForTask(ScheduledTaskImpl task)", "class_method_signature": "TransactionSchedulerImpl.waitForTask(ScheduledTaskImpl task)", "testcase": false, "constructor": false}, {"identifier": "runUnboundedTask", "parameters": "(KernelRunnable task, Identity owner)", "modifiers": "", "return": "void", "signature": "void runUnboundedTask(KernelRunnable task, Identity owner)", "full_signature": " void runUnboundedTask(KernelRunnable task, Identity owner)", "class_method_signature": "TransactionSchedulerImpl.runUnboundedTask(KernelRunnable task, Identity owner)", "testcase": false, "constructor": false}, {"identifier": "notifyThreadJoining", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyThreadJoining()", "full_signature": "private void notifyThreadJoining()", "class_method_signature": "TransactionSchedulerImpl.notifyThreadJoining()", "testcase": false, "constructor": false}, {"identifier": "notifyThreadLeaving", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyThreadLeaving()", "full_signature": "private void notifyThreadLeaving()", "class_method_signature": "TransactionSchedulerImpl.notifyThreadLeaving()", "testcase": false, "constructor": false}, {"identifier": "executeTask", "parameters": "(ScheduledTaskImpl task,\n                                boolean retryOnInterruption)", "modifiers": "private", "return": "boolean", "signature": "boolean executeTask(ScheduledTaskImpl task,\n                                boolean retryOnInterruption)", "full_signature": "private boolean executeTask(ScheduledTaskImpl task,\n                                boolean retryOnInterruption)", "class_method_signature": "TransactionSchedulerImpl.executeTask(ScheduledTaskImpl task,\n                                boolean retryOnInterruption)", "testcase": false, "constructor": false}, {"identifier": "handoff", "parameters": "(ScheduledTaskImpl task)", "modifiers": "private", "return": "boolean", "signature": "boolean handoff(ScheduledTaskImpl task)", "full_signature": "private boolean handoff(ScheduledTaskImpl task)", "class_method_signature": "TransactionSchedulerImpl.handoff(ScheduledTaskImpl task)", "testcase": false, "constructor": false}], "file": "sgs-server/src/main/java/com/sun/sgs/impl/kernel/TransactionSchedulerImpl.java"}, "focal_method": {"identifier": "runUnboundedTask", "parameters": "(KernelRunnable task, Identity owner)", "modifiers": "", "return": "void", "body": "void runUnboundedTask(KernelRunnable task, Identity owner)\n        throws Exception\n    {\n        if (isShutdown) {\n            throw new IllegalStateException(\"Scheduler is shutdown\");\n        }\n        if (ContextResolver.isCurrentTransaction()) {\n            throw new IllegalStateException(\"Cannot be called from within \" +\n                                            \"an active transaction\");\n        }\n\n        // NOTE: in the current system we only use this method once, and\n        // that's when the application is initialized, in which case there\n        // is no other task trying to run...if we decide to start using\n        // this method more broadly, then it should probably use a separate\n        // thread-pool so that it doesn't affect transaction latency\n\n        ScheduledTaskImpl scheduledTask = new ScheduledTaskImpl.Builder(\n                task, owner, defaultPriority).\n                timeout(ScheduledTask.UNBOUNDED).\n                build();\n        waitForTask(scheduledTask);\n    }", "signature": "void runUnboundedTask(KernelRunnable task, Identity owner)", "full_signature": " void runUnboundedTask(KernelRunnable task, Identity owner)", "class_method_signature": "TransactionSchedulerImpl.runUnboundedTask(KernelRunnable task, Identity owner)", "testcase": false, "constructor": false, "invocations": ["isCurrentTransaction", "build", "timeout", "waitForTask"]}, "repository": {"repo_id": 502000, "url": "https://github.com/luontola/sgs-server", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 5331, "license": "licensed"}}