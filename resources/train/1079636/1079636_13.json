{"test_class": {"identifier": "DifferenceAccumulatingHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/org/semver/jardiff/DifferenceAccumulatingHandlerTest.java"}, "test_case": {"identifier": "shouldClassNotBeConsideredWithOnePlaceholderInsideAndSpecificEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldClassNotBeConsideredWithOnePlaceholderInsideAndSpecificEnd() {\n\n        List<String> inclusions = new ArrayList<String>();\n        Set<String> inclusionSet = new HashSet<String>( inclusions );\n        List<String> exclusions = new ArrayList<String>();\n        exclusions.add( \"java/*/*Impl\" );\n        Set<String> exclusionSet = new HashSet<String>( exclusions );\n\n        Assert.assertEquals( \"Class should not be considered: \", false, new DifferenceAccumulatingHandler(\n                inclusionSet, exclusionSet ).isClassConsidered( \"de/test/java/regex/classImpl\" ) );\n    }", "signature": "void shouldClassNotBeConsideredWithOnePlaceholderInsideAndSpecificEnd()", "full_signature": "@Test public void shouldClassNotBeConsideredWithOnePlaceholderInsideAndSpecificEnd()", "class_method_signature": "DifferenceAccumulatingHandlerTest.shouldClassNotBeConsideredWithOnePlaceholderInsideAndSpecificEnd()", "testcase": true, "constructor": false, "invocations": ["add", "assertEquals", "isClassConsidered"]}, "focal_class": {"identifier": "DifferenceAccumulatingHandler", "superclass": "extends AbstractDiffHandler", "interfaces": "", "fields": [{"original_string": "private String currentClassName;", "modifier": "private", "type": "String", "declarator": "currentClassName", "var_name": "currentClassName"}, {"original_string": "private final Set<String> includes;", "modifier": "private final", "type": "Set<String>", "declarator": "includes", "var_name": "includes"}, {"original_string": "private final boolean includesAreRegExp;", "modifier": "private final", "type": "boolean", "declarator": "includesAreRegExp", "var_name": "includesAreRegExp"}, {"original_string": "private final Set<String> excludes;", "modifier": "private final", "type": "Set<String>", "declarator": "excludes", "var_name": "excludes"}, {"original_string": "private final boolean excludesAreRegExp;", "modifier": "private final", "type": "boolean", "declarator": "excludesAreRegExp", "var_name": "excludesAreRegExp"}, {"original_string": "private final Set<Difference> differences = new HashSet<Difference>();", "modifier": "private final", "type": "Set<Difference>", "declarator": "differences = new HashSet<Difference>()", "var_name": "differences"}], "methods": [{"identifier": "DifferenceAccumulatingHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " DifferenceAccumulatingHandler()", "full_signature": "public  DifferenceAccumulatingHandler()", "class_method_signature": "DifferenceAccumulatingHandler.DifferenceAccumulatingHandler()", "testcase": false, "constructor": true}, {"identifier": "DifferenceAccumulatingHandler", "parameters": "(@Nonnull final Set<String> includes, @Nonnull final Set<String> excludes)", "modifiers": "public", "return": "", "signature": " DifferenceAccumulatingHandler(@Nonnull final Set<String> includes, @Nonnull final Set<String> excludes)", "full_signature": "public  DifferenceAccumulatingHandler(@Nonnull final Set<String> includes, @Nonnull final Set<String> excludes)", "class_method_signature": "DifferenceAccumulatingHandler.DifferenceAccumulatingHandler(@Nonnull final Set<String> includes, @Nonnull final Set<String> excludes)", "testcase": false, "constructor": true}, {"identifier": "DifferenceAccumulatingHandler", "parameters": "(@Nonnull final Set<String> includes, final boolean includesAreRegExp,\n                                         @Nonnull final Set<String> excludes, final boolean excludesAreRegExp)", "modifiers": "public", "return": "", "signature": " DifferenceAccumulatingHandler(@Nonnull final Set<String> includes, final boolean includesAreRegExp,\n                                         @Nonnull final Set<String> excludes, final boolean excludesAreRegExp)", "full_signature": "public  DifferenceAccumulatingHandler(@Nonnull final Set<String> includes, final boolean includesAreRegExp,\n                                         @Nonnull final Set<String> excludes, final boolean excludesAreRegExp)", "class_method_signature": "DifferenceAccumulatingHandler.DifferenceAccumulatingHandler(@Nonnull final Set<String> includes, final boolean includesAreRegExp,\n                                         @Nonnull final Set<String> excludes, final boolean excludesAreRegExp)", "testcase": false, "constructor": true}, {"identifier": "getCurrentClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCurrentClassName()", "full_signature": "public String getCurrentClassName()", "class_method_signature": "DifferenceAccumulatingHandler.getCurrentClassName()", "testcase": false, "constructor": false}, {"identifier": "startDiff", "parameters": "(final String previous, final String current)", "modifiers": "@Override public", "return": "void", "signature": "void startDiff(final String previous, final String current)", "full_signature": "@Override public void startDiff(final String previous, final String current)", "class_method_signature": "DifferenceAccumulatingHandler.startDiff(final String previous, final String current)", "testcase": false, "constructor": false}, {"identifier": "endDiff", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endDiff()", "full_signature": "@Override public void endDiff()", "class_method_signature": "DifferenceAccumulatingHandler.endDiff()", "testcase": false, "constructor": false}, {"identifier": "startOldContents", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startOldContents()", "full_signature": "@Override public void startOldContents()", "class_method_signature": "DifferenceAccumulatingHandler.startOldContents()", "testcase": false, "constructor": false}, {"identifier": "endOldContents", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endOldContents()", "full_signature": "@Override public void endOldContents()", "class_method_signature": "DifferenceAccumulatingHandler.endOldContents()", "testcase": false, "constructor": false}, {"identifier": "startNewContents", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startNewContents()", "full_signature": "@Override public void startNewContents()", "class_method_signature": "DifferenceAccumulatingHandler.startNewContents()", "testcase": false, "constructor": false}, {"identifier": "endNewContents", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endNewContents()", "full_signature": "@Override public void endNewContents()", "class_method_signature": "DifferenceAccumulatingHandler.endNewContents()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final ClassInfo classInfo)", "modifiers": "@Override public", "return": "void", "signature": "void contains(final ClassInfo classInfo)", "full_signature": "@Override public void contains(final ClassInfo classInfo)", "class_method_signature": "DifferenceAccumulatingHandler.contains(final ClassInfo classInfo)", "testcase": false, "constructor": false}, {"identifier": "startAdded", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startAdded()", "full_signature": "@Override public void startAdded()", "class_method_signature": "DifferenceAccumulatingHandler.startAdded()", "testcase": false, "constructor": false}, {"identifier": "classAdded", "parameters": "(final ClassInfo classInfo)", "modifiers": "@Override public", "return": "void", "signature": "void classAdded(final ClassInfo classInfo)", "full_signature": "@Override public void classAdded(final ClassInfo classInfo)", "class_method_signature": "DifferenceAccumulatingHandler.classAdded(final ClassInfo classInfo)", "testcase": false, "constructor": false}, {"identifier": "fieldAdded", "parameters": "(final FieldInfo fieldInfo)", "modifiers": "@Override public", "return": "void", "signature": "void fieldAdded(final FieldInfo fieldInfo)", "full_signature": "@Override public void fieldAdded(final FieldInfo fieldInfo)", "class_method_signature": "DifferenceAccumulatingHandler.fieldAdded(final FieldInfo fieldInfo)", "testcase": false, "constructor": false}, {"identifier": "methodAdded", "parameters": "(final MethodInfo methodInfo)", "modifiers": "@Override public", "return": "void", "signature": "void methodAdded(final MethodInfo methodInfo)", "full_signature": "@Override public void methodAdded(final MethodInfo methodInfo)", "class_method_signature": "DifferenceAccumulatingHandler.methodAdded(final MethodInfo methodInfo)", "testcase": false, "constructor": false}, {"identifier": "endAdded", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endAdded()", "full_signature": "@Override public void endAdded()", "class_method_signature": "DifferenceAccumulatingHandler.endAdded()", "testcase": false, "constructor": false}, {"identifier": "startChanged", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startChanged()", "full_signature": "@Override public void startChanged()", "class_method_signature": "DifferenceAccumulatingHandler.startChanged()", "testcase": false, "constructor": false}, {"identifier": "startClassChanged", "parameters": "(final String className)", "modifiers": "@Override public", "return": "void", "signature": "void startClassChanged(final String className)", "full_signature": "@Override public void startClassChanged(final String className)", "class_method_signature": "DifferenceAccumulatingHandler.startClassChanged(final String className)", "testcase": false, "constructor": false}, {"identifier": "classChanged", "parameters": "(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "modifiers": "@Override public", "return": "void", "signature": "void classChanged(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "full_signature": "@Override public void classChanged(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "class_method_signature": "DifferenceAccumulatingHandler.classChanged(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "testcase": false, "constructor": false}, {"identifier": "classDeprecated", "parameters": "(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "modifiers": "@Override public", "return": "void", "signature": "void classDeprecated(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "full_signature": "@Override public void classDeprecated(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "class_method_signature": "DifferenceAccumulatingHandler.classDeprecated(final ClassInfo oldClassInfo, final ClassInfo newClassInfo)", "testcase": false, "constructor": false}, {"identifier": "fieldChanged", "parameters": "(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "modifiers": "@Override public", "return": "void", "signature": "void fieldChanged(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "full_signature": "@Override public void fieldChanged(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "class_method_signature": "DifferenceAccumulatingHandler.fieldChanged(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "testcase": false, "constructor": false}, {"identifier": "fieldDeprecated", "parameters": "(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "modifiers": "@Override public", "return": "void", "signature": "void fieldDeprecated(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "full_signature": "@Override public void fieldDeprecated(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "class_method_signature": "DifferenceAccumulatingHandler.fieldDeprecated(final FieldInfo oldFieldInfo, final FieldInfo newFieldInfo)", "testcase": false, "constructor": false}, {"identifier": "methodChanged", "parameters": "(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "modifiers": "@Override public", "return": "void", "signature": "void methodChanged(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "full_signature": "@Override public void methodChanged(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "class_method_signature": "DifferenceAccumulatingHandler.methodChanged(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "testcase": false, "constructor": false}, {"identifier": "methodDeprecated", "parameters": "(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "modifiers": "@Override public", "return": "void", "signature": "void methodDeprecated(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "full_signature": "@Override public void methodDeprecated(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "class_method_signature": "DifferenceAccumulatingHandler.methodDeprecated(final MethodInfo oldMethodInfo, final MethodInfo newMethodInfo)", "testcase": false, "constructor": false}, {"identifier": "endClassChanged", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endClassChanged()", "full_signature": "@Override public void endClassChanged()", "class_method_signature": "DifferenceAccumulatingHandler.endClassChanged()", "testcase": false, "constructor": false}, {"identifier": "endChanged", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endChanged()", "full_signature": "@Override public void endChanged()", "class_method_signature": "DifferenceAccumulatingHandler.endChanged()", "testcase": false, "constructor": false}, {"identifier": "startRemoved", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startRemoved()", "full_signature": "@Override public void startRemoved()", "class_method_signature": "DifferenceAccumulatingHandler.startRemoved()", "testcase": false, "constructor": false}, {"identifier": "classRemoved", "parameters": "(final ClassInfo classInfo)", "modifiers": "@Override public", "return": "void", "signature": "void classRemoved(final ClassInfo classInfo)", "full_signature": "@Override public void classRemoved(final ClassInfo classInfo)", "class_method_signature": "DifferenceAccumulatingHandler.classRemoved(final ClassInfo classInfo)", "testcase": false, "constructor": false}, {"identifier": "fieldRemoved", "parameters": "(final FieldInfo fieldInfo)", "modifiers": "@Override public", "return": "void", "signature": "void fieldRemoved(final FieldInfo fieldInfo)", "full_signature": "@Override public void fieldRemoved(final FieldInfo fieldInfo)", "class_method_signature": "DifferenceAccumulatingHandler.fieldRemoved(final FieldInfo fieldInfo)", "testcase": false, "constructor": false}, {"identifier": "methodRemoved", "parameters": "(final MethodInfo methodInfo)", "modifiers": "@Override public", "return": "void", "signature": "void methodRemoved(final MethodInfo methodInfo)", "full_signature": "@Override public void methodRemoved(final MethodInfo methodInfo)", "class_method_signature": "DifferenceAccumulatingHandler.methodRemoved(final MethodInfo methodInfo)", "testcase": false, "constructor": false}, {"identifier": "endRemoved", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endRemoved()", "full_signature": "@Override public void endRemoved()", "class_method_signature": "DifferenceAccumulatingHandler.endRemoved()", "testcase": false, "constructor": false}, {"identifier": "isClassConsidered", "parameters": "( final String className )", "modifiers": "protected", "return": "boolean", "signature": "boolean isClassConsidered( final String className )", "full_signature": "protected boolean isClassConsidered( final String className )", "class_method_signature": "DifferenceAccumulatingHandler.isClassConsidered( final String className )", "testcase": false, "constructor": false}, {"identifier": "simplifyRegularExpression", "parameters": "( final String regEx, final boolean caseSensitive )", "modifiers": "private static", "return": "Pattern", "signature": "Pattern simplifyRegularExpression( final String regEx, final boolean caseSensitive )", "full_signature": "private static Pattern simplifyRegularExpression( final String regEx, final boolean caseSensitive )", "class_method_signature": "DifferenceAccumulatingHandler.simplifyRegularExpression( final String regEx, final boolean caseSensitive )", "testcase": false, "constructor": false}, {"identifier": "getDelta", "parameters": "()", "modifiers": "public", "return": "Delta", "signature": "Delta getDelta()", "full_signature": "public Delta getDelta()", "class_method_signature": "DifferenceAccumulatingHandler.getDelta()", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/semver/jardiff/DifferenceAccumulatingHandler.java"}, "focal_method": {"identifier": "isClassConsidered", "parameters": "( final String className )", "modifiers": "protected", "return": "boolean", "body": "protected boolean isClassConsidered( final String className ) {\n         // Fix case where class names are reported with '.'\n         final String fixedClassName = className.replace('.', '/');\n         for ( String exclude : this.excludes ) {\n             final Pattern excludePattern;\n             if( !excludesAreRegExp ) {\n                 if ( exclude.contains( \"/**/\" ) ) {\n                     exclude = exclude.replaceAll( \"/\\\\*\\\\*/\", \"{0,1}**/\" );\n                 }\n                 if ( exclude.contains( \"/*/\" ) ) {\n                     exclude = exclude.replaceAll( \"/\\\\*/\", \"{0,1}*/{0,1}\" );\n                 }\n                 excludePattern = simplifyRegularExpression( exclude, false );\n             } else {\n                 excludePattern = Pattern.compile( exclude );\n             }\n             final Matcher excludeMatcher = excludePattern.matcher( fixedClassName );\n\n             while ( excludeMatcher.find() ) {\n                  return false;\n             }\n         }\n         if ( !this.includes.isEmpty() ) {\n             for ( String include : this.includes ) {\n                 final Pattern includePattern;\n                 if( !includesAreRegExp ) {\n                     if ( include.contains( \"/**/\" ) ) {\n                         include = include.replaceAll( \"/\\\\*\\\\*/\", \"{0,1}**/\" );\n                     }\n                     if ( include.contains( \"/*/\" ) ) {\n                         include = include.replaceAll( \"/\\\\*/\", \"{0,1}*/{0,1}\" );\n                     }\n                     includePattern = simplifyRegularExpression( include, false );\n                 } else {\n                     includePattern = Pattern.compile( include );\n                 }\n                 final Matcher includeMatcher = includePattern.matcher( fixedClassName );\n\n                 while ( includeMatcher.find() ) {\n                     return true;\n                 }\n              }\n              return false;\n          }\n          return true;\n      }", "signature": "boolean isClassConsidered( final String className )", "full_signature": "protected boolean isClassConsidered( final String className )", "class_method_signature": "DifferenceAccumulatingHandler.isClassConsidered( final String className )", "testcase": false, "constructor": false, "invocations": ["replace", "contains", "replaceAll", "contains", "replaceAll", "simplifyRegularExpression", "compile", "matcher", "find", "isEmpty", "contains", "replaceAll", "contains", "replaceAll", "simplifyRegularExpression", "compile", "matcher", "find"]}, "repository": {"repo_id": 1079636, "url": "https://github.com/jeluard/semantic-versioning", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 135, "size": 1735, "license": "licensed"}}