{"test_class": {"identifier": "VersionTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/org/semver/VersionTest.java"}, "test_case": {"identifier": "shouldNextWithNullComparisonTypeFail", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void shouldNextWithNullComparisonTypeFail() {\n        final int major = 1;\n        final int minor = 2;\n        final int patch = 3;\n        final Version version = new Version(major, minor, patch);\n\n        version.next(null);\n    }", "signature": "void shouldNextWithNullComparisonTypeFail()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void shouldNextWithNullComparisonTypeFail()", "class_method_signature": "VersionTest.shouldNextWithNullComparisonTypeFail()", "testcase": true, "constructor": false, "invocations": ["next"]}, "focal_class": {"identifier": "Version", "superclass": "", "interfaces": "implements Comparable<Version>", "fields": [{"original_string": "private static final String FORMAT = \"(\\\\d+)\\\\.(\\\\d+)(?:\\\\.)?(\\\\d*)(\\\\.|-|\\\\+)?([0-9A-Za-z-.]*)?\";", "modifier": "private static final", "type": "String", "declarator": "FORMAT = \"(\\\\d+)\\\\.(\\\\d+)(?:\\\\.)?(\\\\d*)(\\\\.|-|\\\\+)?([0-9A-Za-z-.]*)?\"", "var_name": "FORMAT"}, {"original_string": "private static final Pattern PATTERN = Pattern.compile(Version.FORMAT);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(Version.FORMAT)", "var_name": "PATTERN"}, {"original_string": "private static final Pattern DIGITS_ONLY = Pattern.compile(\"\\\\d+\");", "modifier": "private static final", "type": "Pattern", "declarator": "DIGITS_ONLY = Pattern.compile(\"\\\\d+\")", "var_name": "DIGITS_ONLY"}, {"original_string": "private static final String SNAPSHOT_VERSION_SUFFIX = \"SNAPSHOT\";", "modifier": "private static final", "type": "String", "declarator": "SNAPSHOT_VERSION_SUFFIX = \"SNAPSHOT\"", "var_name": "SNAPSHOT_VERSION_SUFFIX"}, {"original_string": "private final int major;", "modifier": "private final", "type": "int", "declarator": "major", "var_name": "major"}, {"original_string": "private final int minor;", "modifier": "private final", "type": "int", "declarator": "minor", "var_name": "minor"}, {"original_string": "private final int patch;", "modifier": "private final", "type": "int", "declarator": "patch", "var_name": "patch"}, {"original_string": "private final String separator;", "modifier": "private final", "type": "String", "declarator": "separator", "var_name": "separator"}, {"original_string": "private final Special special;", "modifier": "private final", "type": "Special", "declarator": "special", "var_name": "special"}], "methods": [{"identifier": "Version", "parameters": "(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch)", "modifiers": "public", "return": "", "signature": " Version(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch)", "full_signature": "public  Version(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch)", "class_method_signature": "Version.Version(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch)", "testcase": false, "constructor": true}, {"identifier": "Version", "parameters": "(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch, @Nullable final String separator, @Nullable final String special)", "modifiers": "public", "return": "", "signature": " Version(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch, @Nullable final String separator, @Nullable final String special)", "full_signature": "public  Version(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch, @Nullable final String separator, @Nullable final String special)", "class_method_signature": "Version.Version(@Nonnegative final int major, @Nonnegative final int minor, @Nonnegative final int patch, @Nullable final String separator, @Nullable final String special)", "testcase": false, "constructor": true}, {"identifier": "parseSpecial", "parameters": "(String specialString)", "modifiers": "private", "return": "Special", "signature": "Special parseSpecial(String specialString)", "full_signature": "private Special parseSpecial(String specialString)", "class_method_signature": "Version.parseSpecial(String specialString)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@Nonnull final String version)", "modifiers": "public static", "return": "Version", "signature": "Version parse(@Nonnull final String version)", "full_signature": "public static Version parse(@Nonnull final String version)", "class_method_signature": "Version.parse(@Nonnull final String version)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(@Nonnull final Version.Element element)", "modifiers": "public", "return": "Version", "signature": "Version next(@Nonnull final Version.Element element)", "full_signature": "public Version next(@Nonnull final Version.Element element)", "class_method_signature": "Version.next(@Nonnull final Version.Element element)", "testcase": false, "constructor": false}, {"identifier": "toReleaseVersion", "parameters": "()", "modifiers": "public", "return": "Version", "signature": "Version toReleaseVersion()", "full_signature": "public Version toReleaseVersion()", "class_method_signature": "Version.toReleaseVersion()", "testcase": false, "constructor": false}, {"identifier": "isInDevelopment", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInDevelopment()", "full_signature": "public boolean isInDevelopment()", "class_method_signature": "Version.isInDevelopment()", "testcase": false, "constructor": false}, {"identifier": "isStable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStable()", "full_signature": "public boolean isStable()", "class_method_signature": "Version.isStable()", "testcase": false, "constructor": false}, {"identifier": "isSnapshot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSnapshot()", "full_signature": "public boolean isSnapshot()", "class_method_signature": "Version.isSnapshot()", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(Version version)", "modifiers": "public", "return": "boolean", "signature": "boolean isCompatible(Version version)", "full_signature": "public boolean isCompatible(Version version)", "class_method_signature": "Version.isCompatible(Version version)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Version.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object object)", "full_signature": "@Override public boolean equals(@Nullable final Object object)", "class_method_signature": "Version.equals(@Nullable final Object object)", "testcase": false, "constructor": false}, {"identifier": "parseSpecialId", "parameters": "(String id)", "modifiers": "private static", "return": "SpecialId", "signature": "SpecialId parseSpecialId(String id)", "full_signature": "private static SpecialId parseSpecialId(String id)", "class_method_signature": "Version.parseSpecialId(String id)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final Version other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final Version other)", "full_signature": "@Override public int compareTo(final Version other)", "class_method_signature": "Version.compareTo(final Version other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Version.toString()", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/semver/Version.java"}, "focal_method": {"identifier": "next", "parameters": "(@Nonnull final Version.Element element)", "modifiers": "public", "return": "Version", "body": "public Version next(@Nonnull final Version.Element element) {\n        if (element == null) {\n            throw new IllegalArgumentException(\"null element\");\n        }\n\n        switch (element) {\n            case MAJOR:\n              if (special == null || this.minor != 0 || this.patch != 0) {\n                return new Version(this.major + 1, 0, 0);\n              } else {\n                return new Version(this.major, 0, 0);\n              }\n            case MINOR:\n              if (special == null || this.patch != 0) {\n                return new Version(this.major, this.minor + 1, 0);\n              } else {\n                return new Version(this.major, this.minor, 0);\n              }\n            case PATCH:\n              if (special == null) {\n                return new Version(this.major, this.minor, this.patch + 1);\n              } else {\n                return new Version(this.major, this.minor, this.patch);\n              }\n            default:\n                throw new IllegalArgumentException(\"Unknown element <\"+element+\">\");\n        }\n    }", "signature": "Version next(@Nonnull final Version.Element element)", "full_signature": "public Version next(@Nonnull final Version.Element element)", "class_method_signature": "Version.next(@Nonnull final Version.Element element)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1079636, "url": "https://github.com/jeluard/semantic-versioning", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 135, "size": 1735, "license": "licensed"}}