{"test_class": {"identifier": "DeltaTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<Difference> EMPTY_DIFFERENCES = Collections.<Difference>emptySet();", "modifier": "private static final", "type": "Set<Difference>", "declarator": "EMPTY_DIFFERENCES = Collections.<Difference>emptySet()", "var_name": "EMPTY_DIFFERENCES"}], "file": "api/src/test/java/org/semver/DeltaTest.java"}, "test_case": {"identifier": "shouldValidateWithCorrectVersionsSucceed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldValidateWithCorrectVersionsSucceed() {\n      validate(EMPTY_DIFFERENCES, new Version(1, 1, 0), new Version(1, 1, 1), true);\n    }", "signature": "void shouldValidateWithCorrectVersionsSucceed()", "full_signature": "@Test public void shouldValidateWithCorrectVersionsSucceed()", "class_method_signature": "DeltaTest.shouldValidateWithCorrectVersionsSucceed()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "Delta", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<Difference> differences;", "modifier": "private final", "type": "Set<Difference>", "declarator": "differences", "var_name": "differences"}], "methods": [{"identifier": "Delta", "parameters": "(@Nonnull final Set<? extends Difference> differences)", "modifiers": "public", "return": "", "signature": " Delta(@Nonnull final Set<? extends Difference> differences)", "full_signature": "public  Delta(@Nonnull final Set<? extends Difference> differences)", "class_method_signature": "Delta.Delta(@Nonnull final Set<? extends Difference> differences)", "testcase": false, "constructor": true}, {"identifier": "getDifferences", "parameters": "()", "modifiers": "@Nonnull public final", "return": "Set<Difference>", "signature": "Set<Difference> getDifferences()", "full_signature": "@Nonnull public final Set<Difference> getDifferences()", "class_method_signature": "Delta.getDifferences()", "testcase": false, "constructor": false}, {"identifier": "computeCompatibilityType", "parameters": "()", "modifiers": "@Nonnull public final", "return": "CompatibilityType", "signature": "CompatibilityType computeCompatibilityType()", "full_signature": "@Nonnull public final CompatibilityType computeCompatibilityType()", "class_method_signature": "Delta.computeCompatibilityType()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final Set<Difference> differences, final Class<? extends Difference> type)", "modifiers": "protected final", "return": "boolean", "signature": "boolean contains(final Set<Difference> differences, final Class<? extends Difference> type)", "full_signature": "protected final boolean contains(final Set<Difference> differences, final Class<? extends Difference> type)", "class_method_signature": "Delta.contains(final Set<Difference> differences, final Class<? extends Difference> type)", "testcase": false, "constructor": false}, {"identifier": "inferNextVersion", "parameters": "(@Nonnull final Version version, @Nonnull final CompatibilityType compatibilityType)", "modifiers": "@Nonnull public static", "return": "Version", "signature": "Version inferNextVersion(@Nonnull final Version version, @Nonnull final CompatibilityType compatibilityType)", "full_signature": "@Nonnull public static Version inferNextVersion(@Nonnull final Version version, @Nonnull final CompatibilityType compatibilityType)", "class_method_signature": "Delta.inferNextVersion(@Nonnull final Version version, @Nonnull final CompatibilityType compatibilityType)", "testcase": false, "constructor": false}, {"identifier": "infer", "parameters": "(@Nonnull final Version previous)", "modifiers": "@Nonnull public final", "return": "Version", "signature": "Version infer(@Nonnull final Version previous)", "full_signature": "@Nonnull public final Version infer(@Nonnull final Version previous)", "class_method_signature": "Delta.infer(@Nonnull final Version previous)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@Nonnull final Version previous, @Nonnull final Version current)", "modifiers": "public final", "return": "boolean", "signature": "boolean validate(@Nonnull final Version previous, @Nonnull final Version current)", "full_signature": "public final boolean validate(@Nonnull final Version previous, @Nonnull final Version current)", "class_method_signature": "Delta.validate(@Nonnull final Version previous, @Nonnull final Version current)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/semver/Delta.java"}, "focal_method": {"identifier": "validate", "parameters": "(@Nonnull final Version previous, @Nonnull final Version current)", "modifiers": "public final", "return": "boolean", "body": "public final boolean validate(@Nonnull final Version previous, @Nonnull final Version current) {\n        if (previous == null) {\n            throw new IllegalArgumentException(\"null previous\");\n        }\n        if (current == null) {\n            throw new IllegalArgumentException(\"null current\");\n        }\n        if (current.compareTo(previous) <= 0) {\n            throw new IllegalArgumentException(\"Current version <\"+previous+\"> must be more recent than previous version <\"+current+\">.\");\n        }\n        //When in development public API is not considered stable\n        if (current.isInDevelopment()) {\n            return true;\n        }\n\n        //Current version must be superior or equals to inferred version\n        final Version inferredVersion = infer(previous);\n        // if the current version is a pre-release then the corresponding release need to be superior or equal\n        return current.toReleaseVersion().compareTo(inferredVersion) >= 0;\n    }", "signature": "boolean validate(@Nonnull final Version previous, @Nonnull final Version current)", "full_signature": "public final boolean validate(@Nonnull final Version previous, @Nonnull final Version current)", "class_method_signature": "Delta.validate(@Nonnull final Version previous, @Nonnull final Version current)", "testcase": false, "constructor": false, "invocations": ["compareTo", "isInDevelopment", "infer", "compareTo", "toReleaseVersion"]}, "repository": {"repo_id": 1079636, "url": "https://github.com/jeluard/semantic-versioning", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 135, "size": 1735, "license": "licensed"}}