{"test_class": {"identifier": "PHPSensorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@org.junit.Rule\n  public LogTester logTester = new LogTester();", "modifier": "@org.junit.Rule\n  public", "type": "LogTester", "declarator": "logTester = new LogTester()", "var_name": "logTester"}, {"original_string": "private final SensorContextTester context = SensorContextTester.create(new File(\"src/test/resources\").getAbsoluteFile());", "modifier": "private final", "type": "SensorContextTester", "declarator": "context = SensorContextTester.create(new File(\"src/test/resources\").getAbsoluteFile())", "var_name": "context"}, {"original_string": "private CheckFactory checkFactory = new CheckFactory(mock(ActiveRules.class));", "modifier": "private", "type": "CheckFactory", "declarator": "checkFactory = new CheckFactory(mock(ActiveRules.class))", "var_name": "checkFactory"}, {"original_string": "private static final Version SONARLINT_DETECTABLE_VERSION = Version.create(6, 7);", "modifier": "private static final", "type": "Version", "declarator": "SONARLINT_DETECTABLE_VERSION = Version.create(6, 7)", "var_name": "SONARLINT_DETECTABLE_VERSION"}, {"original_string": "private static final SonarRuntime SONARLINT_RUNTIME = SonarRuntimeImpl.forSonarLint(SONARLINT_DETECTABLE_VERSION);", "modifier": "private static final", "type": "SonarRuntime", "declarator": "SONARLINT_RUNTIME = SonarRuntimeImpl.forSonarLint(SONARLINT_DETECTABLE_VERSION)", "var_name": "SONARLINT_RUNTIME"}, {"original_string": "private static final SonarRuntime NOT_SONARLINT_RUNTIME = SonarRuntimeImpl.forSonarQube(SONARLINT_DETECTABLE_VERSION, SonarQubeSide.SERVER, SonarEdition.COMMUNITY);", "modifier": "private static final", "type": "SonarRuntime", "declarator": "NOT_SONARLINT_RUNTIME = SonarRuntimeImpl.forSonarQube(SONARLINT_DETECTABLE_VERSION, SonarQubeSide.SERVER, SonarEdition.COMMUNITY)", "var_name": "NOT_SONARLINT_RUNTIME"}, {"original_string": "private static final SonarRuntime SONARQUBE_6_7 = SonarRuntimeImpl.forSonarQube(Version.create(6, 7), SonarQubeSide.SCANNER, SonarEdition.COMMUNITY);", "modifier": "private static final", "type": "SonarRuntime", "declarator": "SONARQUBE_6_7 = SonarRuntimeImpl.forSonarQube(Version.create(6, 7), SonarQubeSide.SCANNER, SonarEdition.COMMUNITY)", "var_name": "SONARQUBE_6_7"}, {"original_string": "private static final String PARSE_ERROR_FILE = \"parseError.php\";", "modifier": "private static final", "type": "String", "declarator": "PARSE_ERROR_FILE = \"parseError.php\"", "var_name": "PARSE_ERROR_FILE"}, {"original_string": "private static final String ANALYZED_FILE = \"PHPSquidSensor.php\";", "modifier": "private static final", "type": "String", "declarator": "ANALYZED_FILE = \"PHPSquidSensor.php\"", "var_name": "ANALYZED_FILE"}, {"original_string": "private static final String TEST_FILE = \"Test.php\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE = \"Test.php\"", "var_name": "TEST_FILE"}, {"original_string": "private Set<File> tempReportFiles = new HashSet<>();", "modifier": "private", "type": "Set<File>", "declarator": "tempReportFiles = new HashSet<>()", "var_name": "tempReportFiles"}, {"original_string": "@org.junit.Rule\n  public TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@org.junit.Rule\n  public", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}, {"original_string": "private static final PHPCustomRuleRepository[] CUSTOM_RULES = {new PHPCustomRuleRepository() {\n    @Override\n    public String repositoryKey() {\n      return \"customKey\";\n    }\n\n    @Override\n    public ImmutableList<Class> checkClasses() {\n      return ImmutableList.of(MyCustomRule.class);\n    }\n  }};", "modifier": "private static final", "type": "PHPCustomRuleRepository[]", "declarator": "CUSTOM_RULES = {new PHPCustomRuleRepository() {\n    @Override\n    public String repositoryKey() {\n      return \"customKey\";\n    }\n\n    @Override\n    public ImmutableList<Class> checkClasses() {\n      return ImmutableList.of(MyCustomRule.class);\n    }\n  }}", "var_name": "CUSTOM_RULES"}], "file": "sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java"}, "test_case": {"identifier": "should_use_multi_path_coverage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void should_use_multi_path_coverage() throws Exception {\n    context.setRuntime(SONARQUBE_6_7);\n\n    context.settings().setProperty(PhpPlugin.PHPUNIT_COVERAGE_REPORT_PATHS_KEY,\n      String.join(\",\", PhpTestUtils.GENERATED_UT_COVERAGE_REPORT_RELATIVE_PATH, PhpTestUtils.GENERATED_IT_COVERAGE_REPORT_RELATIVE_PATH,\n        // should not fail with empty path, it should be ignored\n        \" \",\n        PhpTestUtils.GENERATED_OVERALL_COVERAGE_REPORT_RELATIVE_PATH));\n\n    DefaultInputFile inputFile = inputFile(\"src/App.php\");\n\n    createReportWithAbsolutePath(PhpTestUtils.GENERATED_UT_COVERAGE_REPORT_RELATIVE_PATH, PhpTestUtils.UT_COVERAGE_REPORT_RELATIVE_PATH, inputFile);\n    createReportWithAbsolutePath(PhpTestUtils.GENERATED_IT_COVERAGE_REPORT_RELATIVE_PATH, PhpTestUtils.IT_COVERAGE_REPORT_RELATIVE_PATH, inputFile);\n    createReportWithAbsolutePath(PhpTestUtils.GENERATED_OVERALL_COVERAGE_REPORT_RELATIVE_PATH, PhpTestUtils.OVERALL_COVERAGE_REPORT_RELATIVE_PATH, inputFile);\n\n    String mainFileKey = inputFile.key();\n    context.fileSystem().add(inputFile);\n\n    createSensor().execute(context);\n\n    assertThat(context.lineHits(mainFileKey, 3)).isEqualTo(3);\n    assertThat(context.lineHits(mainFileKey, 6)).isEqualTo(2);\n    assertThat(context.lineHits(mainFileKey, 7)).isEqualTo(1);\n  }", "signature": "void should_use_multi_path_coverage()", "full_signature": "@Test public void should_use_multi_path_coverage()", "class_method_signature": "PHPSensorTest.should_use_multi_path_coverage()", "testcase": true, "constructor": false, "invocations": ["setRuntime", "setProperty", "settings", "join", "inputFile", "createReportWithAbsolutePath", "createReportWithAbsolutePath", "createReportWithAbsolutePath", "key", "add", "fileSystem", "execute", "createSensor", "isEqualTo", "assertThat", "lineHits", "isEqualTo", "assertThat", "lineHits", "isEqualTo", "assertThat", "lineHits"]}, "focal_class": {"identifier": "PHPSensor", "superclass": "", "interfaces": "implements Sensor", "fields": [{"original_string": "private static final Logger LOG = Loggers.get(PHPSensor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Loggers.get(PHPSensor.class)", "var_name": "LOG"}, {"original_string": "private final FileLinesContextFactory fileLinesContextFactory;", "modifier": "private final", "type": "FileLinesContextFactory", "declarator": "fileLinesContextFactory", "var_name": "fileLinesContextFactory"}, {"original_string": "private final PHPChecks checks;", "modifier": "private final", "type": "PHPChecks", "declarator": "checks", "var_name": "checks"}, {"original_string": "private final NoSonarFilter noSonarFilter;", "modifier": "private final", "type": "NoSonarFilter", "declarator": "noSonarFilter", "var_name": "noSonarFilter"}, {"original_string": "private RuleKey parsingErrorRuleKey;", "modifier": "private", "type": "RuleKey", "declarator": "parsingErrorRuleKey", "var_name": "parsingErrorRuleKey"}], "methods": [{"identifier": "PHPSensor", "parameters": "(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter)", "modifiers": "public", "return": "", "signature": " PHPSensor(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter)", "full_signature": "public  PHPSensor(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter)", "class_method_signature": "PHPSensor.PHPSensor(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter)", "testcase": false, "constructor": true}, {"identifier": "PHPSensor", "parameters": "(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter, @Nullable PHPCustomRuleRepository[] customRuleRepositories)", "modifiers": "public", "return": "", "signature": " PHPSensor(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter, @Nullable PHPCustomRuleRepository[] customRuleRepositories)", "full_signature": "public  PHPSensor(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter, @Nullable PHPCustomRuleRepository[] customRuleRepositories)", "class_method_signature": "PHPSensor.PHPSensor(FileLinesContextFactory fileLinesContextFactory,\n    CheckFactory checkFactory, NoSonarFilter noSonarFilter, @Nullable PHPCustomRuleRepository[] customRuleRepositories)", "testcase": false, "constructor": true}, {"identifier": "PHPSensor", "parameters": "(FileLinesContextFactory fileLinesContextFactory, PHPChecks checks, NoSonarFilter noSonarFilter)", "modifiers": "", "return": "", "signature": " PHPSensor(FileLinesContextFactory fileLinesContextFactory, PHPChecks checks, NoSonarFilter noSonarFilter)", "full_signature": "  PHPSensor(FileLinesContextFactory fileLinesContextFactory, PHPChecks checks, NoSonarFilter noSonarFilter)", "class_method_signature": "PHPSensor.PHPSensor(FileLinesContextFactory fileLinesContextFactory, PHPChecks checks, NoSonarFilter noSonarFilter)", "testcase": false, "constructor": true}, {"identifier": "describe", "parameters": "(SensorDescriptor descriptor)", "modifiers": "@Override public", "return": "void", "signature": "void describe(SensorDescriptor descriptor)", "full_signature": "@Override public void describe(SensorDescriptor descriptor)", "class_method_signature": "PHPSensor.describe(SensorDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(SensorContext context)", "modifiers": "@Override public", "return": "void", "signature": "void execute(SensorContext context)", "full_signature": "@Override public void execute(SensorContext context)", "class_method_signature": "PHPSensor.execute(SensorContext context)", "testcase": false, "constructor": false}, {"identifier": "inSonarLint", "parameters": "(SensorContext context)", "modifiers": "private static", "return": "boolean", "signature": "boolean inSonarLint(SensorContext context)", "full_signature": "private static boolean inSonarLint(SensorContext context)", "class_method_signature": "PHPSensor.inSonarLint(SensorContext context)", "testcase": false, "constructor": false}, {"identifier": "processTestsAndCoverage", "parameters": "(SensorContext context)", "modifiers": "private static", "return": "void", "signature": "void processTestsAndCoverage(SensorContext context)", "full_signature": "private static void processTestsAndCoverage(SensorContext context)", "class_method_signature": "PHPSensor.processTestsAndCoverage(SensorContext context)", "testcase": false, "constructor": false}, {"identifier": "checkInterrupted", "parameters": "(Exception e)", "modifiers": "private static", "return": "void", "signature": "void checkInterrupted(Exception e)", "full_signature": "private static void checkInterrupted(Exception e)", "class_method_signature": "PHPSensor.checkInterrupted(Exception e)", "testcase": false, "constructor": false}, {"identifier": "saveNewFileMeasures", "parameters": "(SensorContext context, FileMeasures fileMeasures, InputFile inputFile)", "modifiers": "private static", "return": "void", "signature": "void saveNewFileMeasures(SensorContext context, FileMeasures fileMeasures, InputFile inputFile)", "full_signature": "private static void saveNewFileMeasures(SensorContext context, FileMeasures fileMeasures, InputFile inputFile)", "class_method_signature": "PHPSensor.saveNewFileMeasures(SensorContext context, FileMeasures fileMeasures, InputFile inputFile)", "testcase": false, "constructor": false}, {"identifier": "saveParsingIssue", "parameters": "(SensorContext context, RecognitionException e, InputFile inputFile)", "modifiers": "private", "return": "void", "signature": "void saveParsingIssue(SensorContext context, RecognitionException e, InputFile inputFile)", "full_signature": "private void saveParsingIssue(SensorContext context, RecognitionException e, InputFile inputFile)", "class_method_signature": "PHPSensor.saveParsingIssue(SensorContext context, RecognitionException e, InputFile inputFile)", "testcase": false, "constructor": false}, {"identifier": "saveIssues", "parameters": "(SensorContext context, List<PhpIssue> issues, InputFile inputFile)", "modifiers": "private", "return": "void", "signature": "void saveIssues(SensorContext context, List<PhpIssue> issues, InputFile inputFile)", "full_signature": "private void saveIssues(SensorContext context, List<PhpIssue> issues, InputFile inputFile)", "class_method_signature": "PHPSensor.saveIssues(SensorContext context, List<PhpIssue> issues, InputFile inputFile)", "testcase": false, "constructor": false}, {"identifier": "addSecondaryLocation", "parameters": "(SensorContext context, InputFile inputFile, NewIssue newIssue, IssueLocation secondary)", "modifiers": "private static", "return": "void", "signature": "void addSecondaryLocation(SensorContext context, InputFile inputFile, NewIssue newIssue, IssueLocation secondary)", "full_signature": "private static void addSecondaryLocation(SensorContext context, InputFile inputFile, NewIssue newIssue, IssueLocation secondary)", "class_method_signature": "PHPSensor.addSecondaryLocation(SensorContext context, InputFile inputFile, NewIssue newIssue, IssueLocation secondary)", "testcase": false, "constructor": false}, {"identifier": "newLocation", "parameters": "(InputFile inputFile, NewIssue issue, IssueLocation location)", "modifiers": "private static", "return": "NewIssueLocation", "signature": "NewIssueLocation newLocation(InputFile inputFile, NewIssue issue, IssueLocation location)", "full_signature": "private static NewIssueLocation newLocation(InputFile inputFile, NewIssue issue, IssueLocation location)", "class_method_signature": "PHPSensor.newLocation(InputFile inputFile, NewIssue issue, IssueLocation location)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PHPSensor.toString()", "testcase": false, "constructor": false}, {"identifier": "getParsingErrorRuleKey", "parameters": "()", "modifiers": "private", "return": "RuleKey", "signature": "RuleKey getParsingErrorRuleKey()", "full_signature": "private RuleKey getParsingErrorRuleKey()", "class_method_signature": "PHPSensor.getParsingErrorRuleKey()", "testcase": false, "constructor": false}, {"identifier": "saveCpdData", "parameters": "(List<CpdToken> cpdTokens, InputFile inputFile, SensorContext context)", "modifiers": "private static", "return": "void", "signature": "void saveCpdData(List<CpdToken> cpdTokens, InputFile inputFile, SensorContext context)", "full_signature": "private static void saveCpdData(List<CpdToken> cpdTokens, InputFile inputFile, SensorContext context)", "class_method_signature": "PHPSensor.saveCpdData(List<CpdToken> cpdTokens, InputFile inputFile, SensorContext context)", "testcase": false, "constructor": false}], "file": "sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java"}, "focal_method": {"identifier": "execute", "parameters": "(SensorContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute(SensorContext context) {\n    FileSystem fileSystem = context.fileSystem();\n\n    FilePredicate phpFilePredicate = fileSystem.predicates().hasLanguage(Php.KEY);\n\n    List<InputFile> inputFiles = new ArrayList<>();\n    fileSystem.inputFiles(phpFilePredicate).forEach(inputFiles::add);\n\n    SymbolScanner symbolScanner = new SymbolScanner(context);\n\n    try {\n      symbolScanner.execute(inputFiles);\n      ProjectSymbolData projectSymbolData = symbolScanner.getProjectSymbolData();\n      new AnalysisScanner(context, projectSymbolData).execute(inputFiles);\n      if (!inSonarLint(context)) {\n        processTestsAndCoverage(context);\n      }\n    } catch (CancellationException e) {\n      LOG.info(e.getMessage());\n    }\n  }", "signature": "void execute(SensorContext context)", "full_signature": "@Override public void execute(SensorContext context)", "class_method_signature": "PHPSensor.execute(SensorContext context)", "testcase": false, "constructor": false, "invocations": ["fileSystem", "hasLanguage", "predicates", "forEach", "inputFiles", "execute", "getProjectSymbolData", "execute", "inSonarLint", "processTestsAndCoverage", "info", "getMessage"]}, "repository": {"repo_id": 4544982, "url": "https://github.com/SonarSource/sonar-php", "stars": 227, "created": "6/4/2012 8:36:12 AM +00:00", "updates": "2020-01-20T15:23:41+00:00", "fork": "False", "license": "licensed"}}