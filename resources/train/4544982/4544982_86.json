{"test_class": {"identifier": "SymbolTableImplTest", "superclass": "extends ParsingTestUtils", "interfaces": "", "fields": [{"original_string": "private CompilationUnitTree cut = parse(\"symbols/symbolTable.php\");", "modifier": "private", "type": "CompilationUnitTree", "declarator": "cut = parse(\"symbols/symbolTable.php\")", "var_name": "cut"}, {"original_string": "private SymbolTableImpl SYMBOL_MODEL = SymbolTableImpl.create(cut);", "modifier": "private", "type": "SymbolTableImpl", "declarator": "SYMBOL_MODEL = SymbolTableImpl.create(cut)", "var_name": "SYMBOL_MODEL"}], "file": "php-frontend/src/test/java/org/sonar/php/tree/symbols/SymbolTableImplTest.java"}, "test_case": {"identifier": "test_class_symbol_with_interfaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_class_symbol_with_interfaces() {\n    SymbolTableImpl symbolTable = symbolTableFor(\"<?php  namespace N { class B implements I1, I2 {} interface I1 {} } \");\n    TypeSymbol classB = (TypeSymbol) symbolTable.getSymbol(\"n\\\\b\");\n    Symbol iface1 = symbolTable.getSymbol(\"n\\\\i1\");\n    Symbol iface2 = symbolTable.getSymbol(\"n\\\\i2\");\n    assertThat(classB.interfaces()).containsExactly(iface1, iface2);\n    assertThat(iface1).isInstanceOf(TypeSymbol.class);\n    assertThat(iface2).isInstanceOf(UndeclaredSymbol.class);\n  }", "signature": "void test_class_symbol_with_interfaces()", "full_signature": "@Test public void test_class_symbol_with_interfaces()", "class_method_signature": "SymbolTableImplTest.test_class_symbol_with_interfaces()", "testcase": true, "constructor": false, "invocations": ["symbolTableFor", "getSymbol", "getSymbol", "getSymbol", "containsExactly", "assertThat", "interfaces", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat"]}, "focal_class": {"identifier": "SymbolTableImpl", "superclass": "", "interfaces": "implements SymbolTable", "fields": [{"original_string": "private List<Symbol> symbols = new ArrayList<>();", "modifier": "private", "type": "List<Symbol>", "declarator": "symbols = new ArrayList<>()", "var_name": "symbols"}, {"original_string": "private Map<Tree, Scope> scopes = new HashMap<>();", "modifier": "private", "type": "Map<Tree, Scope>", "declarator": "scopes = new HashMap<>()", "var_name": "scopes"}, {"original_string": "private Map<Tree, Symbol> symbolsByTree = new HashMap<>();", "modifier": "private", "type": "Map<Tree, Symbol>", "declarator": "symbolsByTree = new HashMap<>()", "var_name": "symbolsByTree"}, {"original_string": "private Map<QualifiedName, Symbol> symbolByQualifiedName = new HashMap<>();", "modifier": "private", "type": "Map<QualifiedName, Symbol>", "declarator": "symbolByQualifiedName = new HashMap<>()", "var_name": "symbolByQualifiedName"}, {"original_string": "private Collection<ClassSymbolData> classSymbolData;", "modifier": "private", "type": "Collection<ClassSymbolData>", "declarator": "classSymbolData", "var_name": "classSymbolData"}, {"original_string": "private Collection<FunctionSymbolData> functionSymbolData;", "modifier": "private", "type": "Collection<FunctionSymbolData>", "declarator": "functionSymbolData", "var_name": "functionSymbolData"}], "methods": [{"identifier": "SymbolTableImpl", "parameters": "()", "modifiers": "private", "return": "", "signature": " SymbolTableImpl()", "full_signature": "private  SymbolTableImpl()", "class_method_signature": "SymbolTableImpl.SymbolTableImpl()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(CompilationUnitTree compilationUnit)", "modifiers": "public static", "return": "SymbolTableImpl", "signature": "SymbolTableImpl create(CompilationUnitTree compilationUnit)", "full_signature": "public static SymbolTableImpl create(CompilationUnitTree compilationUnit)", "class_method_signature": "SymbolTableImpl.create(CompilationUnitTree compilationUnit)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(CompilationUnitTree compilationUnit, ProjectSymbolData projectSymbolData, @Nullable PhpFile file)", "modifiers": "public static", "return": "SymbolTableImpl", "signature": "SymbolTableImpl create(CompilationUnitTree compilationUnit, ProjectSymbolData projectSymbolData, @Nullable PhpFile file)", "full_signature": "public static SymbolTableImpl create(CompilationUnitTree compilationUnit, ProjectSymbolData projectSymbolData, @Nullable PhpFile file)", "class_method_signature": "SymbolTableImpl.create(CompilationUnitTree compilationUnit, ProjectSymbolData projectSymbolData, @Nullable PhpFile file)", "testcase": false, "constructor": false}, {"identifier": "addScope", "parameters": "(Scope scope)", "modifiers": "", "return": "Scope", "signature": "Scope addScope(Scope scope)", "full_signature": " Scope addScope(Scope scope)", "class_method_signature": "SymbolTableImpl.addScope(Scope scope)", "testcase": false, "constructor": false}, {"identifier": "getScopes", "parameters": "()", "modifiers": "@Override public", "return": "ImmutableSet<Scope>", "signature": "ImmutableSet<Scope> getScopes()", "full_signature": "@Override public ImmutableSet<Scope> getScopes()", "class_method_signature": "SymbolTableImpl.getScopes()", "testcase": false, "constructor": false}, {"identifier": "getScopeFor", "parameters": "(Tree tree)", "modifiers": "@Nullable @Override public", "return": "Scope", "signature": "Scope getScopeFor(Tree tree)", "full_signature": "@Nullable @Override public Scope getScopeFor(Tree tree)", "class_method_signature": "SymbolTableImpl.getScopeFor(Tree tree)", "testcase": false, "constructor": false}, {"identifier": "declareSymbol", "parameters": "(IdentifierTree name, Symbol.Kind kind, Scope scope, SymbolQualifiedName namespace)", "modifiers": "", "return": "SymbolImpl", "signature": "SymbolImpl declareSymbol(IdentifierTree name, Symbol.Kind kind, Scope scope, SymbolQualifiedName namespace)", "full_signature": " SymbolImpl declareSymbol(IdentifierTree name, Symbol.Kind kind, Scope scope, SymbolQualifiedName namespace)", "class_method_signature": "SymbolTableImpl.declareSymbol(IdentifierTree name, Symbol.Kind kind, Scope scope, SymbolQualifiedName namespace)", "testcase": false, "constructor": false}, {"identifier": "addSymbol", "parameters": "(IdentifierTree name, Scope scope, Symbol symbol)", "modifiers": "private", "return": "void", "signature": "void addSymbol(IdentifierTree name, Scope scope, Symbol symbol)", "full_signature": "private void addSymbol(IdentifierTree name, Scope scope, Symbol symbol)", "class_method_signature": "SymbolTableImpl.addSymbol(IdentifierTree name, Scope scope, Symbol symbol)", "testcase": false, "constructor": false}, {"identifier": "declareTypeSymbol", "parameters": "(IdentifierTree name, Scope scope, SymbolQualifiedName qualifiedName)", "modifiers": "", "return": "TypeSymbolImpl", "signature": "TypeSymbolImpl declareTypeSymbol(IdentifierTree name, Scope scope, SymbolQualifiedName qualifiedName)", "full_signature": " TypeSymbolImpl declareTypeSymbol(IdentifierTree name, Scope scope, SymbolQualifiedName qualifiedName)", "class_method_signature": "SymbolTableImpl.declareTypeSymbol(IdentifierTree name, Scope scope, SymbolQualifiedName qualifiedName)", "testcase": false, "constructor": false}, {"identifier": "declareMemberSymbol", "parameters": "(IdentifierTree name, Symbol.Kind kind, Scope scope, TypeSymbol owner)", "modifiers": "", "return": "MemberSymbolImpl", "signature": "MemberSymbolImpl declareMemberSymbol(IdentifierTree name, Symbol.Kind kind, Scope scope, TypeSymbol owner)", "full_signature": " MemberSymbolImpl declareMemberSymbol(IdentifierTree name, Symbol.Kind kind, Scope scope, TypeSymbol owner)", "class_method_signature": "SymbolTableImpl.declareMemberSymbol(IdentifierTree name, Symbol.Kind kind, Scope scope, TypeSymbol owner)", "testcase": false, "constructor": false}, {"identifier": "createUndeclaredSymbol", "parameters": "(QualifiedName fullyQualifiedName, Symbol.Kind kind)", "modifiers": "", "return": "SymbolImpl", "signature": "SymbolImpl createUndeclaredSymbol(QualifiedName fullyQualifiedName, Symbol.Kind kind)", "full_signature": " SymbolImpl createUndeclaredSymbol(QualifiedName fullyQualifiedName, Symbol.Kind kind)", "class_method_signature": "SymbolTableImpl.createUndeclaredSymbol(QualifiedName fullyQualifiedName, Symbol.Kind kind)", "testcase": false, "constructor": false}, {"identifier": "getSymbols", "parameters": "()", "modifiers": "public", "return": "ImmutableList<Symbol>", "signature": "ImmutableList<Symbol> getSymbols()", "full_signature": "public ImmutableList<Symbol> getSymbols()", "class_method_signature": "SymbolTableImpl.getSymbols()", "testcase": false, "constructor": false}, {"identifier": "getSymbols", "parameters": "(Symbol.Kind kind)", "modifiers": "@Override public", "return": "List<Symbol>", "signature": "List<Symbol> getSymbols(Symbol.Kind kind)", "full_signature": "@Override public List<Symbol> getSymbols(Symbol.Kind kind)", "class_method_signature": "SymbolTableImpl.getSymbols(Symbol.Kind kind)", "testcase": false, "constructor": false}, {"identifier": "getSymbols", "parameters": "(String name)", "modifiers": "public", "return": "List<Symbol>", "signature": "List<Symbol> getSymbols(String name)", "full_signature": "public List<Symbol> getSymbols(String name)", "class_method_signature": "SymbolTableImpl.getSymbols(String name)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "(QualifiedName qualifiedName)", "modifiers": "", "return": "Symbol", "signature": "Symbol getSymbol(QualifiedName qualifiedName)", "full_signature": " Symbol getSymbol(QualifiedName qualifiedName)", "class_method_signature": "SymbolTableImpl.getSymbol(QualifiedName qualifiedName)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "(String qualifiedName)", "modifiers": "", "return": "Symbol", "signature": "Symbol getSymbol(String qualifiedName)", "full_signature": " Symbol getSymbol(String qualifiedName)", "class_method_signature": "SymbolTableImpl.getSymbol(String qualifiedName)", "testcase": false, "constructor": false}, {"identifier": "associateSymbol", "parameters": "(Tree identifier, Symbol symbol)", "modifiers": "", "return": "void", "signature": "void associateSymbol(Tree identifier, Symbol symbol)", "full_signature": " void associateSymbol(Tree identifier, Symbol symbol)", "class_method_signature": "SymbolTableImpl.associateSymbol(Tree identifier, Symbol symbol)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "(Tree tree)", "modifiers": "@Override @CheckForNull public", "return": "Symbol", "signature": "Symbol getSymbol(Tree tree)", "full_signature": "@Override @CheckForNull public Symbol getSymbol(Tree tree)", "class_method_signature": "SymbolTableImpl.getSymbol(Tree tree)", "testcase": false, "constructor": false}, {"identifier": "classSymbolDatas", "parameters": "()", "modifiers": "public", "return": "Collection<ClassSymbolData>", "signature": "Collection<ClassSymbolData> classSymbolDatas()", "full_signature": "public Collection<ClassSymbolData> classSymbolDatas()", "class_method_signature": "SymbolTableImpl.classSymbolDatas()", "testcase": false, "constructor": false}, {"identifier": "functionSymbolDatas", "parameters": "()", "modifiers": "public", "return": "Collection<FunctionSymbolData>", "signature": "Collection<FunctionSymbolData> functionSymbolDatas()", "full_signature": "public Collection<FunctionSymbolData> functionSymbolDatas()", "class_method_signature": "SymbolTableImpl.functionSymbolDatas()", "testcase": false, "constructor": false}], "file": "php-frontend/src/main/java/org/sonar/php/tree/symbols/SymbolTableImpl.java"}, "focal_method": {"identifier": "getSymbol", "parameters": "(QualifiedName qualifiedName)", "modifiers": "", "return": "Symbol", "body": "Symbol getSymbol(QualifiedName qualifiedName) {\n    return symbolByQualifiedName.get(qualifiedName);\n  }", "signature": "Symbol getSymbol(QualifiedName qualifiedName)", "full_signature": " Symbol getSymbol(QualifiedName qualifiedName)", "class_method_signature": "SymbolTableImpl.getSymbol(QualifiedName qualifiedName)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 4544982, "url": "https://github.com/SonarSource/sonar-php", "stars": 227, "created": "6/4/2012 8:36:12 AM +00:00", "updates": "2020-01-20T15:23:41+00:00", "fork": "False", "license": "licensed"}}