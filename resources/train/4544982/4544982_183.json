{"test_class": {"identifier": "SyntacticEquivalenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ActionParser<Tree> parser = PHPParserBuilder.createParser(PHPLexicalGrammar.TOP_STATEMENT);", "modifier": "private", "type": "ActionParser<Tree>", "declarator": "parser = PHPParserBuilder.createParser(PHPLexicalGrammar.TOP_STATEMENT)", "var_name": "parser"}], "file": "php-checks/src/test/java/org/sonar/php/checks/utils/SyntacticEquivalenceTest.java"}, "test_case": {"identifier": "areSyntacticallyEquivalent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void areSyntacticallyEquivalent() throws Exception {\n    assertThat(areSyntacticallyEquivalent(null, null)).isTrue();\n    assertThat(areSyntacticallyEquivalent(null, \"1;\")).isFalse();\n    assertThat(areSyntacticallyEquivalent(\"$x;\", null)).isFalse();\n    assertThat(areSyntacticallyEquivalent(\"$x;\", \"1;\")).isFalse();\n    assertThat(areSyntacticallyEquivalent(\"$x;\", \"$x;\")).isTrue();\n    assertThat(areSyntacticallyEquivalent(\"$x;\", \"$y;\")).isFalse();\n    assertThat(areSyntacticallyEquivalent(\"switch ($a) {case 1:}\", \"switch ($a) {case 1:}\")).isTrue();\n    assertThat(areSyntacticallyEquivalent(\"switch ($a) {case 1:}\", \"switch ($a) {case 1: case2:}\")).isFalse();\n    assertThat(areSyntacticallyEquivalent(\"switch ($a) {case 1: case2:}\", \"switch ($a) {case 1:}\")).isFalse();\n  }", "signature": "void areSyntacticallyEquivalent()", "full_signature": "@Test public void areSyntacticallyEquivalent()", "class_method_signature": "SyntacticEquivalenceTest.areSyntacticallyEquivalent()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "areSyntacticallyEquivalent", "isFalse", "assertThat", "areSyntacticallyEquivalent", "isFalse", "assertThat", "areSyntacticallyEquivalent", "isFalse", "assertThat", "areSyntacticallyEquivalent", "isTrue", "assertThat", "areSyntacticallyEquivalent", "isFalse", "assertThat", "areSyntacticallyEquivalent", "isTrue", "assertThat", "areSyntacticallyEquivalent", "isFalse", "assertThat", "areSyntacticallyEquivalent", "isFalse", "assertThat", "areSyntacticallyEquivalent"]}, "focal_class": {"identifier": "SyntacticEquivalence", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SyntacticEquivalence", "parameters": "()", "modifiers": "private", "return": "", "signature": " SyntacticEquivalence()", "full_signature": "private  SyntacticEquivalence()", "class_method_signature": "SyntacticEquivalence.SyntacticEquivalence()", "testcase": false, "constructor": true}, {"identifier": "areSyntacticallyEquivalent", "parameters": "(@Nullable Tree tree1, @Nullable Tree tree2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areSyntacticallyEquivalent(@Nullable Tree tree1, @Nullable Tree tree2)", "full_signature": "public static boolean areSyntacticallyEquivalent(@Nullable Tree tree1, @Nullable Tree tree2)", "class_method_signature": "SyntacticEquivalence.areSyntacticallyEquivalent(@Nullable Tree tree1, @Nullable Tree tree2)", "testcase": false, "constructor": false}, {"identifier": "areSyntacticallyEquivalent", "parameters": "(Iterable<? extends Tree> iterable1, Iterable<? extends Tree> iterable2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areSyntacticallyEquivalent(Iterable<? extends Tree> iterable1, Iterable<? extends Tree> iterable2)", "full_signature": "public static boolean areSyntacticallyEquivalent(Iterable<? extends Tree> iterable1, Iterable<? extends Tree> iterable2)", "class_method_signature": "SyntacticEquivalence.areSyntacticallyEquivalent(Iterable<? extends Tree> iterable1, Iterable<? extends Tree> iterable2)", "testcase": false, "constructor": false}, {"identifier": "areSyntacticallyEquivalent", "parameters": "(Iterator<? extends Tree> iterator1, Iterator<? extends Tree> iterator2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areSyntacticallyEquivalent(Iterator<? extends Tree> iterator1, Iterator<? extends Tree> iterator2)", "full_signature": "public static boolean areSyntacticallyEquivalent(Iterator<? extends Tree> iterator1, Iterator<? extends Tree> iterator2)", "class_method_signature": "SyntacticEquivalence.areSyntacticallyEquivalent(Iterator<? extends Tree> iterator1, Iterator<? extends Tree> iterator2)", "testcase": false, "constructor": false}], "file": "php-checks/src/main/java/org/sonar/php/checks/utils/SyntacticEquivalence.java"}, "focal_method": {"identifier": "areSyntacticallyEquivalent", "parameters": "(@Nullable Tree tree1, @Nullable Tree tree2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean areSyntacticallyEquivalent(@Nullable Tree tree1, @Nullable Tree tree2) {\n    if (tree1 == tree2) {\n      return true;\n    }\n\n    if (tree1 == null || tree2 == null) {\n      return false;\n    }\n\n    PHPTree phpTree1 = (PHPTree) tree1;\n    PHPTree phpTree2 = (PHPTree) tree2;\n\n    if (phpTree1.getKind() != phpTree2.getKind()) {\n      return false;\n    } else if (phpTree1.isLeaf()) {\n      return phpTree1.getFirstToken().text().equals(phpTree2.getFirstToken().text());\n    }\n\n    Iterator<Tree> iterator1 = phpTree1.childrenIterator();\n    Iterator<Tree> iterator2 = phpTree2.childrenIterator();\n    return areSyntacticallyEquivalent(iterator1, iterator2);\n  }", "signature": "boolean areSyntacticallyEquivalent(@Nullable Tree tree1, @Nullable Tree tree2)", "full_signature": "public static boolean areSyntacticallyEquivalent(@Nullable Tree tree1, @Nullable Tree tree2)", "class_method_signature": "SyntacticEquivalence.areSyntacticallyEquivalent(@Nullable Tree tree1, @Nullable Tree tree2)", "testcase": false, "constructor": false, "invocations": ["getKind", "getKind", "isLeaf", "equals", "text", "getFirstToken", "text", "getFirstToken", "childrenIterator", "childrenIterator", "areSyntacticallyEquivalent"]}, "repository": {"repo_id": 4544982, "url": "https://github.com/SonarSource/sonar-php", "stars": 227, "created": "6/4/2012 8:36:12 AM +00:00", "updates": "2020-01-20T15:23:41+00:00", "fork": "False", "license": "licensed"}}