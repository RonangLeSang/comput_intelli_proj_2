{"test_class": {"identifier": "CheckUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ActionParser<Tree> parser = PHPParserBuilder.createParser(PHPLexicalGrammar.TOP_STATEMENT);", "modifier": "private", "type": "ActionParser<Tree>", "declarator": "parser = PHPParserBuilder.createParser(PHPLexicalGrammar.TOP_STATEMENT)", "var_name": "parser"}], "file": "php-checks/src/test/java/org/sonar/php/checks/utils/CheckUtilsTest.java"}, "test_case": {"identifier": "is_false_value", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void is_false_value() throws Exception {\n    assertThat(createLiterals(Tree.Kind.BOOLEAN_LITERAL, \"false\", \"False\", \"FALSE\")\n      .allMatch(CheckUtils::isFalseValue)).isTrue();\n\n    assertThat(createLiterals(Tree.Kind.NUMERIC_LITERAL, \"0\", \"0.0\")\n      .allMatch(CheckUtils::isFalseValue)).isTrue();\n\n    assertThat(createLiterals(Tree.Kind.REGULAR_STRING_LITERAL, \"\\\"0\\\"\", \"'0'\", \"''\")\n      .allMatch(CheckUtils::isFalseValue)).isTrue();\n\n    assertThat((createLiterals(Tree.Kind.NULL_LITERAL, \"NULL\"))\n      .allMatch(CheckUtils::isFalseValue)).isTrue();\n\n    VariableIdentifierTreeImpl variableIdentifierTree = new VariableIdentifierTreeImpl(\n      new InternalSyntaxToken(1, 1, \"var\", Collections.emptyList(), 1, false));\n    assertThat(CheckUtils.isFalseValue(variableIdentifierTree)).isFalse();\n  }", "signature": "void is_false_value()", "full_signature": "@Test public void is_false_value()", "class_method_signature": "CheckUtilsTest.is_false_value()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "allMatch", "createLiterals", "isTrue", "assertThat", "allMatch", "createLiterals", "isTrue", "assertThat", "allMatch", "createLiterals", "isTrue", "assertThat", "allMatch", "createLiterals", "emptyList", "isFalse", "assertThat", "isFalseValue"]}, "focal_class": {"identifier": "CheckUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Kind[] FUNCTION_KINDS_ARRAY = {\n    Kind.METHOD_DECLARATION,\n    Kind.FUNCTION_DECLARATION,\n    Kind.FUNCTION_EXPRESSION,\n    Kind.ARROW_FUNCTION_EXPRESSION};", "modifier": "private static final", "type": "Kind[]", "declarator": "FUNCTION_KINDS_ARRAY = {\n    Kind.METHOD_DECLARATION,\n    Kind.FUNCTION_DECLARATION,\n    Kind.FUNCTION_EXPRESSION,\n    Kind.ARROW_FUNCTION_EXPRESSION}", "var_name": "FUNCTION_KINDS_ARRAY"}, {"original_string": "public static final ImmutableList<Kind> FUNCTION_KINDS = ImmutableList.copyOf(FUNCTION_KINDS_ARRAY);", "modifier": "public static final", "type": "ImmutableList<Kind>", "declarator": "FUNCTION_KINDS = ImmutableList.copyOf(FUNCTION_KINDS_ARRAY)", "var_name": "FUNCTION_KINDS"}, {"original_string": "public static final ImmutableMap<String, String> SUPERGLOBALS_BY_OLD_NAME = ImmutableMap.<String, String>builder()\n    .put(\"$HTTP_SERVER_VARS\", \"$_SERVER\")\n    .put(\"$HTTP_GET_VARS\", \"$_GET\")\n    .put(\"$HTTP_POST_VARS\", \"$_POST\")\n    .put(\"$HTTP_POST_FILES\", \"$_FILES\")\n    .put(\"$HTTP_SESSION_VARS\", \"$_SESSION\")\n    .put(\"$HTTP_ENV_VARS\", \"$_ENV\")\n    .put(\"$HTTP_COOKIE_VARS\", \"$_COOKIE\").build();", "modifier": "public static final", "type": "ImmutableMap<String, String>", "declarator": "SUPERGLOBALS_BY_OLD_NAME = ImmutableMap.<String, String>builder()\n    .put(\"$HTTP_SERVER_VARS\", \"$_SERVER\")\n    .put(\"$HTTP_GET_VARS\", \"$_GET\")\n    .put(\"$HTTP_POST_VARS\", \"$_POST\")\n    .put(\"$HTTP_POST_FILES\", \"$_FILES\")\n    .put(\"$HTTP_SESSION_VARS\", \"$_SESSION\")\n    .put(\"$HTTP_ENV_VARS\", \"$_ENV\")\n    .put(\"$HTTP_COOKIE_VARS\", \"$_COOKIE\").build()", "var_name": "SUPERGLOBALS_BY_OLD_NAME"}, {"original_string": "public static final ImmutableSet<String> SUPERGLOBALS = ImmutableSet.of(\n      \"$GLOBALS\", \"$_SERVER\", \"$_GET\", \"$_POST\", \"$_FILES\", \"$_COOKIE\", \"$_SESSION\", \"$_REQUEST\", \"$_ENV\");", "modifier": "public static final", "type": "ImmutableSet<String>", "declarator": "SUPERGLOBALS = ImmutableSet.of(\n      \"$GLOBALS\", \"$_SERVER\", \"$_GET\", \"$_POST\", \"$_FILES\", \"$_COOKIE\", \"$_SESSION\", \"$_REQUEST\", \"$_ENV\")", "var_name": "SUPERGLOBALS"}], "methods": [{"identifier": "CheckUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CheckUtils()", "full_signature": "private  CheckUtils()", "class_method_signature": "CheckUtils.CheckUtils()", "testcase": false, "constructor": true}, {"identifier": "isFunction", "parameters": "(Tree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFunction(Tree tree)", "full_signature": "public static boolean isFunction(Tree tree)", "class_method_signature": "CheckUtils.isFunction(Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getFunctionName", "parameters": "(FunctionTree functionDec)", "modifiers": "public static", "return": "String", "signature": "String getFunctionName(FunctionTree functionDec)", "full_signature": "public static String getFunctionName(FunctionTree functionDec)", "class_method_signature": "CheckUtils.getFunctionName(FunctionTree functionDec)", "testcase": false, "constructor": false}, {"identifier": "getFunctionName", "parameters": "(FunctionCallTree functionCall)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getFunctionName(FunctionCallTree functionCall)", "full_signature": "@Nullable public static String getFunctionName(FunctionCallTree functionCall)", "class_method_signature": "CheckUtils.getFunctionName(FunctionCallTree functionCall)", "testcase": false, "constructor": false}, {"identifier": "getLowerCaseFunctionName", "parameters": "(FunctionCallTree functionCall)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getLowerCaseFunctionName(FunctionCallTree functionCall)", "full_signature": "@Nullable public static String getLowerCaseFunctionName(FunctionCallTree functionCall)", "class_method_signature": "CheckUtils.getLowerCaseFunctionName(FunctionCallTree functionCall)", "testcase": false, "constructor": false}, {"identifier": "functionName", "parameters": "(FunctionCallTree functionCall)", "modifiers": "@Nullable public static", "return": "String", "signature": "String functionName(FunctionCallTree functionCall)", "full_signature": "@Nullable public static String functionName(FunctionCallTree functionCall)", "class_method_signature": "CheckUtils.functionName(FunctionCallTree functionCall)", "testcase": false, "constructor": false}, {"identifier": "lowerCaseFunctionName", "parameters": "(FunctionCallTree functionCall)", "modifiers": "@Nullable public static", "return": "String", "signature": "String lowerCaseFunctionName(FunctionCallTree functionCall)", "full_signature": "@Nullable public static String lowerCaseFunctionName(FunctionCallTree functionCall)", "class_method_signature": "CheckUtils.lowerCaseFunctionName(FunctionCallTree functionCall)", "testcase": false, "constructor": false}, {"identifier": "lowerCaseSet", "parameters": "(String... names)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> lowerCaseSet(String... names)", "full_signature": "public static Set<String> lowerCaseSet(String... names)", "class_method_signature": "CheckUtils.lowerCaseSet(String... names)", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "(ClassDeclarationTree classDeclaration)", "modifiers": "public static", "return": "String", "signature": "String getClassName(ClassDeclarationTree classDeclaration)", "full_signature": "public static String getClassName(ClassDeclarationTree classDeclaration)", "class_method_signature": "CheckUtils.getClassName(ClassDeclarationTree classDeclaration)", "testcase": false, "constructor": false}, {"identifier": "getLowerCaseClassName", "parameters": "(ClassDeclarationTree classDeclarationTree)", "modifiers": "public static", "return": "String", "signature": "String getLowerCaseClassName(ClassDeclarationTree classDeclarationTree)", "full_signature": "public static String getLowerCaseClassName(ClassDeclarationTree classDeclarationTree)", "class_method_signature": "CheckUtils.getLowerCaseClassName(ClassDeclarationTree classDeclarationTree)", "testcase": false, "constructor": false}, {"identifier": "nameOf", "parameters": "(Tree tree)", "modifiers": "@Nullable public static", "return": "String", "signature": "String nameOf(Tree tree)", "full_signature": "@Nullable public static String nameOf(Tree tree)", "class_method_signature": "CheckUtils.nameOf(Tree tree)", "testcase": false, "constructor": false}, {"identifier": "isOverriding", "parameters": "(MethodDeclarationTree declaration)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOverriding(MethodDeclarationTree declaration)", "full_signature": "public static boolean isOverriding(MethodDeclarationTree declaration)", "class_method_signature": "CheckUtils.isOverriding(MethodDeclarationTree declaration)", "testcase": false, "constructor": false}, {"identifier": "isExitExpression", "parameters": "(FunctionCallTree functionCallTree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExitExpression(FunctionCallTree functionCallTree)", "full_signature": "public static boolean isExitExpression(FunctionCallTree functionCallTree)", "class_method_signature": "CheckUtils.isExitExpression(FunctionCallTree functionCallTree)", "testcase": false, "constructor": false}, {"identifier": "hasModifier", "parameters": "(ClassMemberTree tree, String toFind)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasModifier(ClassMemberTree tree, String toFind)", "full_signature": "public static boolean hasModifier(ClassMemberTree tree, String toFind)", "class_method_signature": "CheckUtils.hasModifier(ClassMemberTree tree, String toFind)", "testcase": false, "constructor": false}, {"identifier": "hasModifier", "parameters": "(List<SyntaxToken> modifiers, String toFind)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasModifier(List<SyntaxToken> modifiers, String toFind)", "full_signature": "public static boolean hasModifier(List<SyntaxToken> modifiers, String toFind)", "class_method_signature": "CheckUtils.hasModifier(List<SyntaxToken> modifiers, String toFind)", "testcase": false, "constructor": false}, {"identifier": "isClosingTag", "parameters": "(SyntaxToken token)", "modifiers": "public static", "return": "boolean", "signature": "boolean isClosingTag(SyntaxToken token)", "full_signature": "public static boolean isClosingTag(SyntaxToken token)", "class_method_signature": "CheckUtils.isClosingTag(SyntaxToken token)", "testcase": false, "constructor": false}, {"identifier": "isClosingTag", "parameters": "(Tree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isClosingTag(Tree tree)", "full_signature": "public static boolean isClosingTag(Tree tree)", "class_method_signature": "CheckUtils.isClosingTag(Tree tree)", "testcase": false, "constructor": false}, {"identifier": "lines", "parameters": "(PhpFile file)", "modifiers": "public static", "return": "Stream<String>", "signature": "Stream<String> lines(PhpFile file)", "full_signature": "public static Stream<String> lines(PhpFile file)", "class_method_signature": "CheckUtils.lines(PhpFile file)", "testcase": false, "constructor": false}, {"identifier": "skipParenthesis", "parameters": "(ExpressionTree expr)", "modifiers": "public static", "return": "ExpressionTree", "signature": "ExpressionTree skipParenthesis(ExpressionTree expr)", "full_signature": "public static ExpressionTree skipParenthesis(ExpressionTree expr)", "class_method_signature": "CheckUtils.skipParenthesis(ExpressionTree expr)", "testcase": false, "constructor": false}, {"identifier": "getForCondition", "parameters": "(ForStatementTree tree)", "modifiers": "@Nullable public static", "return": "ExpressionTree", "signature": "ExpressionTree getForCondition(ForStatementTree tree)", "full_signature": "@Nullable public static ExpressionTree getForCondition(ForStatementTree tree)", "class_method_signature": "CheckUtils.getForCondition(ForStatementTree tree)", "testcase": false, "constructor": false}, {"identifier": "trimQuotes", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String trimQuotes(String value)", "full_signature": "public static String trimQuotes(String value)", "class_method_signature": "CheckUtils.trimQuotes(String value)", "testcase": false, "constructor": false}, {"identifier": "trimQuotes", "parameters": "(LiteralTree literalTree)", "modifiers": "public static", "return": "String", "signature": "String trimQuotes(LiteralTree literalTree)", "full_signature": "public static String trimQuotes(LiteralTree literalTree)", "class_method_signature": "CheckUtils.trimQuotes(LiteralTree literalTree)", "testcase": false, "constructor": false}, {"identifier": "isFalseValue", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFalseValue(ExpressionTree tree)", "full_signature": "public static boolean isFalseValue(ExpressionTree tree)", "class_method_signature": "CheckUtils.isFalseValue(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "isTrueValue", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTrueValue(ExpressionTree tree)", "full_signature": "public static boolean isTrueValue(ExpressionTree tree)", "class_method_signature": "CheckUtils.isTrueValue(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "isStringLiteralWithValue", "parameters": "(@Nullable Tree tree, String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStringLiteralWithValue(@Nullable Tree tree, String s)", "full_signature": "public static boolean isStringLiteralWithValue(@Nullable Tree tree, String s)", "class_method_signature": "CheckUtils.isStringLiteralWithValue(@Nullable Tree tree, String s)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmptyString", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmptyString(ExpressionTree tree)", "full_signature": "public static boolean isNullOrEmptyString(ExpressionTree tree)", "class_method_signature": "CheckUtils.isNullOrEmptyString(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(Tree declaration, String annotation)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAnnotation(Tree declaration, String annotation)", "full_signature": "public static boolean hasAnnotation(Tree declaration, String annotation)", "class_method_signature": "CheckUtils.hasAnnotation(Tree declaration, String annotation)", "testcase": false, "constructor": false}, {"identifier": "isPublic", "parameters": "(ClassMemberTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPublic(ClassMemberTree tree)", "full_signature": "public static boolean isPublic(ClassMemberTree tree)", "class_method_signature": "CheckUtils.isPublic(ClassMemberTree tree)", "testcase": false, "constructor": false}, {"identifier": "isAbstract", "parameters": "(ClassDeclarationTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAbstract(ClassDeclarationTree tree)", "full_signature": "public static boolean isAbstract(ClassDeclarationTree tree)", "class_method_signature": "CheckUtils.isAbstract(ClassDeclarationTree tree)", "testcase": false, "constructor": false}], "file": "php-checks/src/main/java/org/sonar/php/checks/utils/CheckUtils.java"}, "focal_method": {"identifier": "isFalseValue", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isFalseValue(ExpressionTree tree) {\n    if (tree.is(Tree.Kind.BOOLEAN_LITERAL, Kind.NUMERIC_LITERAL)) {\n      String value = ((LiteralTree) tree).value();\n      return value.equalsIgnoreCase(\"false\")\n        || value.equals(\"0\")\n        || value.equals(\"0.0\");\n    }\n    if (tree.is(Kind.REGULAR_STRING_LITERAL)) {\n      String value = trimQuotes(((LiteralTree) tree).value());\n      return value.isEmpty() || value.equals(\"0\");\n    }\n    return tree.is(Kind.NULL_LITERAL);\n  }", "signature": "boolean isFalseValue(ExpressionTree tree)", "full_signature": "public static boolean isFalseValue(ExpressionTree tree)", "class_method_signature": "CheckUtils.isFalseValue(ExpressionTree tree)", "testcase": false, "constructor": false, "invocations": ["is", "value", "equalsIgnoreCase", "equals", "equals", "is", "trimQuotes", "value", "isEmpty", "equals", "is"]}, "repository": {"repo_id": 4544982, "url": "https://github.com/SonarSource/sonar-php", "stars": 227, "created": "6/4/2012 8:36:12 AM +00:00", "updates": "2020-01-20T15:23:41+00:00", "fork": "False", "license": "licensed"}}