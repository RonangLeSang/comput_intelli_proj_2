{"test_class": {"identifier": "OAuthUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BASIC_PREFIX = \"Basic \";", "modifier": "private static final", "type": "String", "declarator": "BASIC_PREFIX = \"Basic \"", "var_name": "BASIC_PREFIX"}], "file": "oauth-2.0/common/src/test/java/org/apache/oltu/oauth2/common/utils/OAuthUtilsTest.java"}, "test_case": {"identifier": "testDecodeOAuthHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecodeOAuthHeader() throws Exception {\n        Map<String, String> parameters = OAuthUtils.decodeOAuthHeader(\"Bearer realm=\\\"example\\\"\");\n\n        Map<String, String> expected = new HashMap<String, String>();\n        expected.put(\"realm\", \"example\");\n\n        assertEquals(expected, parameters);\n    }", "signature": "void testDecodeOAuthHeader()", "full_signature": "@Test public void testDecodeOAuthHeader()", "class_method_signature": "OAuthUtilsTest.testDecodeOAuthHeader()", "testcase": true, "constructor": false, "invocations": ["decodeOAuthHeader", "put", "assertEquals"]}, "focal_class": {"identifier": "OAuthUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"UTF-8\"", "var_name": "ENCODING"}, {"original_string": "private static final String PARAMETER_SEPARATOR = \"&\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_SEPARATOR = \"&\"", "var_name": "PARAMETER_SEPARATOR"}, {"original_string": "private static final String NAME_VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "NAME_VALUE_SEPARATOR = \"=\"", "var_name": "NAME_VALUE_SEPARATOR"}, {"original_string": "public static final String AUTH_SCHEME = OAuth.OAUTH_HEADER_NAME;", "modifier": "public static final", "type": "String", "declarator": "AUTH_SCHEME = OAuth.OAUTH_HEADER_NAME", "var_name": "AUTH_SCHEME"}, {"original_string": "private static final Pattern OAUTH_HEADER = Pattern.compile(\"\\\\s*(\\\\w*)\\\\s+(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "OAUTH_HEADER = Pattern.compile(\"\\\\s*(\\\\w*)\\\\s+(.*)\")", "var_name": "OAUTH_HEADER"}, {"original_string": "private static final Pattern NVP = Pattern.compile(\"(\\\\S*)\\\\s*\\\\=\\\\s*\\\"([^\\\"]*)\\\"\");", "modifier": "private static final", "type": "Pattern", "declarator": "NVP = Pattern.compile(\"(\\\\S*)\\\\s*\\\\=\\\\s*\\\"([^\\\"]*)\\\"\")", "var_name": "NVP"}, {"original_string": "public static final String MULTIPART = \"multipart/\";", "modifier": "public static final", "type": "String", "declarator": "MULTIPART = \"multipart/\"", "var_name": "MULTIPART"}, {"original_string": "private static final String DEFAULT_CONTENT_CHARSET = ENCODING;", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONTENT_CHARSET = ENCODING", "var_name": "DEFAULT_CONTENT_CHARSET"}], "methods": [{"identifier": "format", "parameters": "(\n        final Collection<? extends Map.Entry<String, Object>> parameters,\n        final String encoding)", "modifiers": "public static", "return": "String", "signature": "String format(\n        final Collection<? extends Map.Entry<String, Object>> parameters,\n        final String encoding)", "full_signature": "public static String format(\n        final Collection<? extends Map.Entry<String, Object>> parameters,\n        final String encoding)", "class_method_signature": "OAuthUtils.format(\n        final Collection<? extends Map.Entry<String, Object>> parameters,\n        final String encoding)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(final String content, final String encoding)", "modifiers": "private static", "return": "String", "signature": "String encode(final String content, final String encoding)", "full_signature": "private static String encode(final String content, final String encoding)", "class_method_signature": "OAuthUtils.encode(final String content, final String encoding)", "testcase": false, "constructor": false}, {"identifier": "saveStreamAsString", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String", "signature": "String saveStreamAsString(InputStream is)", "full_signature": "public static String saveStreamAsString(InputStream is)", "class_method_signature": "OAuthUtils.saveStreamAsString(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(\n        final InputStream is, final String defaultCharset)", "modifiers": "public static", "return": "String", "signature": "String toString(\n        final InputStream is, final String defaultCharset)", "full_signature": "public static String toString(\n        final InputStream is, final String defaultCharset)", "class_method_signature": "OAuthUtils.toString(\n        final InputStream is, final String defaultCharset)", "testcase": false, "constructor": false}, {"identifier": "handleOAuthProblemException", "parameters": "(String message)", "modifiers": "public static", "return": "OAuthProblemException", "signature": "OAuthProblemException handleOAuthProblemException(String message)", "full_signature": "public static OAuthProblemException handleOAuthProblemException(String message)", "class_method_signature": "OAuthUtils.handleOAuthProblemException(String message)", "testcase": false, "constructor": false}, {"identifier": "handleMissingParameters", "parameters": "(Set<String> missingParams)", "modifiers": "public static", "return": "OAuthProblemException", "signature": "OAuthProblemException handleMissingParameters(Set<String> missingParams)", "full_signature": "public static OAuthProblemException handleMissingParameters(Set<String> missingParams)", "class_method_signature": "OAuthUtils.handleMissingParameters(Set<String> missingParams)", "testcase": false, "constructor": false}, {"identifier": "handleBadContentTypeException", "parameters": "(String expectedContentType)", "modifiers": "public static", "return": "OAuthProblemException", "signature": "OAuthProblemException handleBadContentTypeException(String expectedContentType)", "full_signature": "public static OAuthProblemException handleBadContentTypeException(String expectedContentType)", "class_method_signature": "OAuthUtils.handleBadContentTypeException(String expectedContentType)", "testcase": false, "constructor": false}, {"identifier": "handleNotAllowedParametersOAuthException", "parameters": "(\n        List<String> notAllowedParams)", "modifiers": "public static", "return": "OAuthProblemException", "signature": "OAuthProblemException handleNotAllowedParametersOAuthException(\n        List<String> notAllowedParams)", "full_signature": "public static OAuthProblemException handleNotAllowedParametersOAuthException(\n        List<String> notAllowedParams)", "class_method_signature": "OAuthUtils.handleNotAllowedParametersOAuthException(\n        List<String> notAllowedParams)", "testcase": false, "constructor": false}, {"identifier": "decodeForm", "parameters": "(String form)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> decodeForm(String form)", "full_signature": "public static Map<String, Object> decodeForm(String form)", "class_method_signature": "OAuthUtils.decodeForm(String form)", "testcase": false, "constructor": false}, {"identifier": "isFormEncoded", "parameters": "(String contentType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFormEncoded(String contentType)", "full_signature": "public static boolean isFormEncoded(String contentType)", "class_method_signature": "OAuthUtils.isFormEncoded(String contentType)", "testcase": false, "constructor": false}, {"identifier": "decodePercent", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String decodePercent(String s)", "full_signature": "public static String decodePercent(String s)", "class_method_signature": "OAuthUtils.decodePercent(String s)", "testcase": false, "constructor": false}, {"identifier": "percentEncode", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String percentEncode(String s)", "full_signature": "public static String percentEncode(String s)", "class_method_signature": "OAuthUtils.percentEncode(String s)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Set<String> missingParams)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmpty(Set<String> missingParams)", "full_signature": "private static boolean isEmpty(Set<String> missingParams)", "class_method_signature": "OAuthUtils.isEmpty(Set<String> missingParams)", "testcase": false, "constructor": false}, {"identifier": "instantiateClass", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T instantiateClass(Class<T> clazz)", "full_signature": "public static T instantiateClass(Class<T> clazz)", "class_method_signature": "OAuthUtils.instantiateClass(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "instantiateClassWithParameters", "parameters": "(Class<T> clazz, Class<?>[] paramsTypes,\n                                                       Object[] paramValues)", "modifiers": "public static", "return": "T", "signature": "T instantiateClassWithParameters(Class<T> clazz, Class<?>[] paramsTypes,\n                                                       Object[] paramValues)", "full_signature": "public static T instantiateClassWithParameters(Class<T> clazz, Class<?>[] paramsTypes,\n                                                       Object[] paramValues)", "class_method_signature": "OAuthUtils.instantiateClassWithParameters(Class<T> clazz, Class<?>[] paramsTypes,\n                                                       Object[] paramValues)", "testcase": false, "constructor": false}, {"identifier": "getAuthHeaderField", "parameters": "(String authHeader)", "modifiers": "public static", "return": "String", "signature": "String getAuthHeaderField(String authHeader)", "full_signature": "public static String getAuthHeaderField(String authHeader)", "class_method_signature": "OAuthUtils.getAuthHeaderField(String authHeader)", "testcase": false, "constructor": false}, {"identifier": "decodeOAuthHeader", "parameters": "(String header)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> decodeOAuthHeader(String header)", "full_signature": "public static Map<String, String> decodeOAuthHeader(String header)", "class_method_signature": "OAuthUtils.decodeOAuthHeader(String header)", "testcase": false, "constructor": false}, {"identifier": "decodeClientAuthenticationHeader", "parameters": "(String authenticationHeader)", "modifiers": "public static", "return": "String[]", "signature": "String[] decodeClientAuthenticationHeader(String authenticationHeader)", "full_signature": "public static String[] decodeClientAuthenticationHeader(String authenticationHeader)", "class_method_signature": "OAuthUtils.decodeClientAuthenticationHeader(String authenticationHeader)", "testcase": false, "constructor": false}, {"identifier": "decodeBase64EncodedCredentials", "parameters": "(String encodedCreds)", "modifiers": "private static", "return": "String[]", "signature": "String[] decodeBase64EncodedCredentials(String encodedCreds)", "full_signature": "private static String[] decodeBase64EncodedCredentials(String encodedCreds)", "class_method_signature": "OAuthUtils.decodeBase64EncodedCredentials(String encodedCreds)", "testcase": false, "constructor": false}, {"identifier": "encodeOAuthHeader", "parameters": "(Map<String, Object> entries)", "modifiers": "public static", "return": "String", "signature": "String encodeOAuthHeader(Map<String, Object> entries)", "full_signature": "public static String encodeOAuthHeader(Map<String, Object> entries)", "class_method_signature": "OAuthUtils.encodeOAuthHeader(Map<String, Object> entries)", "testcase": false, "constructor": false}, {"identifier": "encodeAuthorizationBearerHeader", "parameters": "(Map<String, Object> entries)", "modifiers": "public static", "return": "String", "signature": "String encodeAuthorizationBearerHeader(Map<String, Object> entries)", "full_signature": "public static String encodeAuthorizationBearerHeader(Map<String, Object> entries)", "class_method_signature": "OAuthUtils.encodeAuthorizationBearerHeader(Map<String, Object> entries)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String value)", "full_signature": "public static boolean isEmpty(String value)", "class_method_signature": "OAuthUtils.isEmpty(String value)", "testcase": false, "constructor": false}, {"identifier": "hasEmptyValues", "parameters": "(String[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasEmptyValues(String[] array)", "full_signature": "public static boolean hasEmptyValues(String[] array)", "class_method_signature": "OAuthUtils.hasEmptyValues(String[] array)", "testcase": false, "constructor": false}, {"identifier": "getAuthzMethod", "parameters": "(String header)", "modifiers": "public static", "return": "String", "signature": "String getAuthzMethod(String header)", "full_signature": "public static String getAuthzMethod(String header)", "class_method_signature": "OAuthUtils.getAuthzMethod(String header)", "testcase": false, "constructor": false}, {"identifier": "decodeScopes", "parameters": "(String s)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> decodeScopes(String s)", "full_signature": "public static Set<String> decodeScopes(String s)", "class_method_signature": "OAuthUtils.decodeScopes(String s)", "testcase": false, "constructor": false}, {"identifier": "encodeScopes", "parameters": "(Set<String> s)", "modifiers": "public static", "return": "String", "signature": "String encodeScopes(Set<String> s)", "full_signature": "public static String encodeScopes(Set<String> s)", "class_method_signature": "OAuthUtils.encodeScopes(Set<String> s)", "testcase": false, "constructor": false}, {"identifier": "isMultipart", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMultipart(HttpServletRequest request)", "full_signature": "public static boolean isMultipart(HttpServletRequest request)", "class_method_signature": "OAuthUtils.isMultipart(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "hasContentType", "parameters": "(String requestContentType, String requiredContentType)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasContentType(String requestContentType, String requiredContentType)", "full_signature": "public static boolean hasContentType(String requestContentType, String requiredContentType)", "class_method_signature": "OAuthUtils.hasContentType(String requestContentType, String requiredContentType)", "testcase": false, "constructor": false}], "file": "oauth-2.0/common/src/main/java/org/apache/oltu/oauth2/common/utils/OAuthUtils.java"}, "focal_method": {"identifier": "decodeOAuthHeader", "parameters": "(String header)", "modifiers": "public static", "return": "Map<String, String>", "body": "public static Map<String, String> decodeOAuthHeader(String header) {\n        Map<String, String> headerValues = new HashMap<String, String>();\n        if (header != null) {\n            Matcher m = OAUTH_HEADER.matcher(header);\n            if (m.matches()) {\n                if (AUTH_SCHEME.equalsIgnoreCase(m.group(1))) {\n                    for (String nvp : m.group(2).split(\"\\\\s*,\\\\s*\")) {\n                        m = NVP.matcher(nvp);\n                        if (m.matches()) {\n                            String name = decodePercent(m.group(1));\n                            String value = decodePercent(m.group(2));\n                            headerValues.put(name, value);\n                        }\n                    }\n                }\n            }\n        }\n        return headerValues;\n    }", "signature": "Map<String, String> decodeOAuthHeader(String header)", "full_signature": "public static Map<String, String> decodeOAuthHeader(String header)", "class_method_signature": "OAuthUtils.decodeOAuthHeader(String header)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "equalsIgnoreCase", "group", "split", "group", "matcher", "matches", "decodePercent", "group", "decodePercent", "group", "put"]}, "repository": {"repo_id": 10329619, "url": "https://github.com/apache/oltu", "stars": 151, "created": "5/28/2013 7:00:14 AM +00:00", "updates": "2020-01-27T09:31:03+00:00", "fork": "False", "license": "licensed"}}