{"test_class": {"identifier": "AbstractValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "oauth-2.0/common/src/test/java/org/apache/oltu/oauth2/common/validators/AbstractValidatorTest.java"}, "test_case": {"identifier": "testInvalidContentType", "parameters": "()", "modifiers": "@Test(expected = OAuthProblemException.class) public", "return": "void", "body": "@Test(expected = OAuthProblemException.class)\n    public void testInvalidContentType() throws Exception {\n        HttpServletRequest request = createStrictMock(HttpServletRequest.class);\n\n        expect(request.getContentType()).andStubReturn(OAuth.ContentType.JSON);\n        replay(request);\n\n        AbstractValidator validator = new AbstractValidatorImpl();\n        validator.validateContentType(request);\n        verify(request);\n    }", "signature": "void testInvalidContentType()", "full_signature": "@Test(expected = OAuthProblemException.class) public void testInvalidContentType()", "class_method_signature": "AbstractValidatorTest.testInvalidContentType()", "testcase": true, "constructor": false, "invocations": ["createStrictMock", "andStubReturn", "expect", "getContentType", "replay", "validateContentType", "verify"]}, "focal_class": {"identifier": "AbstractValidator", "superclass": "", "interfaces": "implements OAuthValidator<T>", "fields": [{"original_string": "protected List<String> requiredParams = new ArrayList<String>();", "modifier": "protected", "type": "List<String>", "declarator": "requiredParams = new ArrayList<String>()", "var_name": "requiredParams"}, {"original_string": "protected Map<String, String[]> optionalParams = new HashMap<String, String[]>();", "modifier": "protected", "type": "Map<String, String[]>", "declarator": "optionalParams = new HashMap<String, String[]>()", "var_name": "optionalParams"}, {"original_string": "protected List<String> notAllowedParams = new ArrayList<String>();", "modifier": "protected", "type": "List<String>", "declarator": "notAllowedParams = new ArrayList<String>()", "var_name": "notAllowedParams"}, {"original_string": "protected boolean enforceClientAuthentication;", "modifier": "protected", "type": "boolean", "declarator": "enforceClientAuthentication", "var_name": "enforceClientAuthentication"}], "methods": [{"identifier": "validateMethod", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "signature": "void validateMethod(T request)", "full_signature": "@Override public void validateMethod(T request)", "class_method_signature": "AbstractValidator.validateMethod(T request)", "testcase": false, "constructor": false}, {"identifier": "validateContentType", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "signature": "void validateContentType(T request)", "full_signature": "@Override public void validateContentType(T request)", "class_method_signature": "AbstractValidator.validateContentType(T request)", "testcase": false, "constructor": false}, {"identifier": "validateRequiredParameters", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "signature": "void validateRequiredParameters(T request)", "full_signature": "@Override public void validateRequiredParameters(T request)", "class_method_signature": "AbstractValidator.validateRequiredParameters(T request)", "testcase": false, "constructor": false}, {"identifier": "validateOptionalParameters", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "signature": "void validateOptionalParameters(T request)", "full_signature": "@Override public void validateOptionalParameters(T request)", "class_method_signature": "AbstractValidator.validateOptionalParameters(T request)", "testcase": false, "constructor": false}, {"identifier": "validateNotAllowedParameters", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "signature": "void validateNotAllowedParameters(T request)", "full_signature": "@Override public void validateNotAllowedParameters(T request)", "class_method_signature": "AbstractValidator.validateNotAllowedParameters(T request)", "testcase": false, "constructor": false}, {"identifier": "validateClientAuthenticationCredentials", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "signature": "void validateClientAuthenticationCredentials(T request)", "full_signature": "@Override public void validateClientAuthenticationCredentials(T request)", "class_method_signature": "AbstractValidator.validateClientAuthenticationCredentials(T request)", "testcase": false, "constructor": false}, {"identifier": "performAllValidations", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "signature": "void performAllValidations(T request)", "full_signature": "@Override public void performAllValidations(T request)", "class_method_signature": "AbstractValidator.performAllValidations(T request)", "testcase": false, "constructor": false}], "file": "oauth-2.0/common/src/main/java/org/apache/oltu/oauth2/common/validators/AbstractValidator.java"}, "focal_method": {"identifier": "validateContentType", "parameters": "(T request)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validateContentType(T request) throws OAuthProblemException {\n        String contentType = request.getContentType();\n        final String expectedContentType = OAuth.ContentType.URL_ENCODED;\n        if (!OAuthUtils.hasContentType(contentType, expectedContentType)) {\n            throw OAuthUtils.handleBadContentTypeException(expectedContentType);\n        }\n    }", "signature": "void validateContentType(T request)", "full_signature": "@Override public void validateContentType(T request)", "class_method_signature": "AbstractValidator.validateContentType(T request)", "testcase": false, "constructor": false, "invocations": ["getContentType", "hasContentType", "handleBadContentTypeException"]}, "repository": {"repo_id": 10329619, "url": "https://github.com/apache/oltu", "stars": 151, "created": "5/28/2013 7:00:14 AM +00:00", "updates": "2020-01-27T09:31:03+00:00", "fork": "False", "license": "licensed"}}