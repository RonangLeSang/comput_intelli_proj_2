{"test_class": {"identifier": "TestAS3Parser", "superclass": "extends AbstractAs3ParserTest", "interfaces": "", "fields": [], "file": "as3-parser/src/test/java/de/bokelberg/flex/parser/TestAS3Parser.java"}, "test_case": {"identifier": "testBuildAst", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testBuildAst() throws IOException,\n                             URISyntaxException,\n                             TokenException\n   {\n      asp.buildAst( getClass().getResource( \"/examples/unformatted/IContext.as\" ).toURI().getPath() );\n      asp.buildAst( getClass().getResource( \"/examples/FlexPMD115.as\" ).toURI().getPath() );\n      asp.buildAst( getClass().getResource( \"/examples/JPEGEncoder.as\" ).toURI().getPath() );\n      asp.buildAst( getClass().getResource( \"/examples/JPEGEncoder2.as\" ).toURI().getPath() );\n      asp.buildAst( getClass().getResource( \"/examples/FisheyeBase.as\" ).toURI().getPath() );\n      asp.buildAst( getClass().getResource( \"/examples/FlexPMD98.as\" ).toURI().getPath() );\n      asp.buildAst( getClass().getResource( \"/examples/FlexPMD195.as\" ).toURI().getPath() );\n      final String titlePath = getClass().getResource( \"/examples/unformatted/Title.as\" ).toURI().getPath();\n\n      asp.buildAst( titlePath );\n      asp.buildAst( titlePath,\n                    FileUtils.readLines( new File( titlePath ) ) );\n   }", "signature": "void testBuildAst()", "full_signature": "@Test public void testBuildAst()", "class_method_signature": "TestAS3Parser.testBuildAst()", "testcase": true, "constructor": false, "invocations": ["buildAst", "getPath", "toURI", "getResource", "getClass", "buildAst", "getPath", "toURI", "getResource", "getClass", "buildAst", "getPath", "toURI", "getResource", "getClass", "buildAst", "getPath", "toURI", "getResource", "getClass", "buildAst", "getPath", "toURI", "getResource", "getClass", "buildAst", "getPath", "toURI", "getResource", "getClass", "buildAst", "getPath", "toURI", "getResource", "getClass", "getPath", "toURI", "getResource", "getClass", "buildAst", "buildAst", "readLines"]}, "focal_class": {"identifier": "AS3Parser", "superclass": "", "interfaces": "implements IAS3Parser", "fields": [{"original_string": "public static final String  ASDOC_COMMENT          = \"/**\";", "modifier": "public static final", "type": "String", "declarator": "ASDOC_COMMENT          = \"/**\"", "var_name": "ASDOC_COMMENT"}, {"original_string": "public static final String  MULTIPLE_LINES_COMMENT = \"/*\";", "modifier": "public static final", "type": "String", "declarator": "MULTIPLE_LINES_COMMENT = \"/*\"", "var_name": "MULTIPLE_LINES_COMMENT"}, {"original_string": "public static final String  NEW_LINE               = \"\\n\";", "modifier": "public static final", "type": "String", "declarator": "NEW_LINE               = \"\\n\"", "var_name": "NEW_LINE"}, {"original_string": "public static final String  SINGLE_LINE_COMMENT    = \"//\";", "modifier": "public static final", "type": "String", "declarator": "SINGLE_LINE_COMMENT    = \"//\"", "var_name": "SINGLE_LINE_COMMENT"}, {"original_string": "private static final String VECTOR                 = \"Vector\";", "modifier": "private static final", "type": "String", "declarator": "VECTOR                 = \"Vector\"", "var_name": "VECTOR"}, {"original_string": "private Node                currentAsDoc;", "modifier": "private", "type": "Node", "declarator": "currentAsDoc", "var_name": "currentAsDoc"}, {"original_string": "private Node                currentFunctionNode;", "modifier": "private", "type": "Node", "declarator": "currentFunctionNode", "var_name": "currentFunctionNode"}, {"original_string": "private Node                currentMultiLineComment;", "modifier": "private", "type": "Node", "declarator": "currentMultiLineComment", "var_name": "currentMultiLineComment"}, {"original_string": "private String              fileName;", "modifier": "private", "type": "String", "declarator": "fileName", "var_name": "fileName"}, {"original_string": "private boolean             isInFor;", "modifier": "private", "type": "boolean", "declarator": "isInFor", "var_name": "isInFor"}, {"original_string": "private AS3Scanner          scn;", "modifier": "private", "type": "AS3Scanner", "declarator": "scn", "var_name": "scn"}, {"original_string": "private Token               tok;", "modifier": "private", "type": "Token", "declarator": "tok", "var_name": "tok"}], "methods": [{"identifier": "AS3Parser", "parameters": "()", "modifiers": "public", "return": "", "signature": " AS3Parser()", "full_signature": "public  AS3Parser()", "class_method_signature": "AS3Parser.AS3Parser()", "testcase": false, "constructor": true}, {"identifier": "buildAst", "parameters": "( final String filePath )", "modifiers": "public final", "return": "IParserNode", "signature": "IParserNode buildAst( final String filePath )", "full_signature": "public final IParserNode buildAst( final String filePath )", "class_method_signature": "AS3Parser.buildAst( final String filePath )", "testcase": false, "constructor": false}, {"identifier": "buildAst", "parameters": "( final String filePath,\n                                      final String[] scriptBlockLines )", "modifiers": "public final", "return": "IParserNode", "signature": "IParserNode buildAst( final String filePath,\n                                      final String[] scriptBlockLines )", "full_signature": "public final IParserNode buildAst( final String filePath,\n                                      final String[] scriptBlockLines )", "class_method_signature": "AS3Parser.buildAst( final String filePath,\n                                      final String[] scriptBlockLines )", "testcase": false, "constructor": false}, {"identifier": "getScn", "parameters": "()", "modifiers": "final", "return": "AS3Scanner", "signature": "AS3Scanner getScn()", "full_signature": "final AS3Scanner getScn()", "class_method_signature": "AS3Parser.getScn()", "testcase": false, "constructor": false}, {"identifier": "nextToken", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void nextToken()", "full_signature": "final void nextToken()", "class_method_signature": "AS3Parser.nextToken()", "testcase": false, "constructor": false}, {"identifier": "nextToken", "parameters": "( final boolean ignoreDocumentation )", "modifiers": "final", "return": "void", "signature": "void nextToken( final boolean ignoreDocumentation )", "full_signature": "final void nextToken( final boolean ignoreDocumentation )", "class_method_signature": "AS3Parser.nextToken( final boolean ignoreDocumentation )", "testcase": false, "constructor": false}, {"identifier": "parseClassContent", "parameters": "()", "modifiers": "final", "return": "Node", "signature": "Node parseClassContent()", "full_signature": "final Node parseClassContent()", "class_method_signature": "AS3Parser.parseClassContent()", "testcase": false, "constructor": false}, {"identifier": "parseCompilationUnit", "parameters": "()", "modifiers": "final", "return": "Node", "signature": "Node parseCompilationUnit()", "full_signature": "final Node parseCompilationUnit()", "class_method_signature": "AS3Parser.parseCompilationUnit()", "testcase": false, "constructor": false}, {"identifier": "parseExpression", "parameters": "()", "modifiers": "final", "return": "IParserNode", "signature": "IParserNode parseExpression()", "full_signature": "final IParserNode parseExpression()", "class_method_signature": "AS3Parser.parseExpression()", "testcase": false, "constructor": false}, {"identifier": "parseInterfaceContent", "parameters": "()", "modifiers": "final", "return": "Node", "signature": "Node parseInterfaceContent()", "full_signature": "final Node parseInterfaceContent()", "class_method_signature": "AS3Parser.parseInterfaceContent()", "testcase": false, "constructor": false}, {"identifier": "parsePackageContent", "parameters": "()", "modifiers": "final", "return": "Node", "signature": "Node parsePackageContent()", "full_signature": "final Node parsePackageContent()", "class_method_signature": "AS3Parser.parsePackageContent()", "testcase": false, "constructor": false}, {"identifier": "parsePrimaryExpression", "parameters": "()", "modifiers": "final", "return": "Node", "signature": "Node parsePrimaryExpression()", "full_signature": "final Node parsePrimaryExpression()", "class_method_signature": "AS3Parser.parsePrimaryExpression()", "testcase": false, "constructor": false}, {"identifier": "parseStatement", "parameters": "()", "modifiers": "final", "return": "IParserNode", "signature": "IParserNode parseStatement()", "full_signature": "final IParserNode parseStatement()", "class_method_signature": "AS3Parser.parseStatement()", "testcase": false, "constructor": false}, {"identifier": "parseUnaryExpression", "parameters": "()", "modifiers": "final", "return": "Node", "signature": "Node parseUnaryExpression()", "full_signature": "final Node parseUnaryExpression()", "class_method_signature": "AS3Parser.parseUnaryExpression()", "testcase": false, "constructor": false}, {"identifier": "collectVarListContent", "parameters": "( final Node result )", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode collectVarListContent( final Node result )", "full_signature": "private IParserNode collectVarListContent( final Node result )", "class_method_signature": "AS3Parser.collectVarListContent( final Node result )", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "( final KeyWords keyword )", "modifiers": "private", "return": "void", "signature": "void consume( final KeyWords keyword )", "full_signature": "private void consume( final KeyWords keyword )", "class_method_signature": "AS3Parser.consume( final KeyWords keyword )", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "( final Operators operator )", "modifiers": "private", "return": "void", "signature": "void consume( final Operators operator )", "full_signature": "private void consume( final Operators operator )", "class_method_signature": "AS3Parser.consume( final Operators operator )", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "( final String text )", "modifiers": "private", "return": "void", "signature": "void consume( final String text )", "full_signature": "private void consume( final String text )", "class_method_signature": "AS3Parser.consume( final String text )", "testcase": false, "constructor": false}, {"identifier": "convertMeta", "parameters": "( final List< Node > metadataList )", "modifiers": "private", "return": "Node", "signature": "Node convertMeta( final List< Node > metadataList )", "full_signature": "private Node convertMeta( final List< Node > metadataList )", "class_method_signature": "AS3Parser.convertMeta( final List< Node > metadataList )", "testcase": false, "constructor": false}, {"identifier": "convertModifiers", "parameters": "( final List< Token > modifierList )", "modifiers": "private", "return": "Node", "signature": "Node convertModifiers( final List< Token > modifierList )", "full_signature": "private Node convertModifiers( final List< Token > modifierList )", "class_method_signature": "AS3Parser.convertModifiers( final List< Token > modifierList )", "testcase": false, "constructor": false}, {"identifier": "doParseSignature", "parameters": "()", "modifiers": "private", "return": "Node[]", "signature": "Node[] doParseSignature()", "full_signature": "private Node[] doParseSignature()", "class_method_signature": "AS3Parser.doParseSignature()", "testcase": false, "constructor": false}, {"identifier": "findFunctionTypeFromSignature", "parameters": "( final Node[] signature )", "modifiers": "private", "return": "NodeKind", "signature": "NodeKind findFunctionTypeFromSignature( final Node[] signature )", "full_signature": "private NodeKind findFunctionTypeFromSignature( final Node[] signature )", "class_method_signature": "AS3Parser.findFunctionTypeFromSignature( final Node[] signature )", "testcase": false, "constructor": false}, {"identifier": "nextTokenAllowNewLine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void nextTokenAllowNewLine()", "full_signature": "private void nextTokenAllowNewLine()", "class_method_signature": "AS3Parser.nextTokenAllowNewLine()", "testcase": false, "constructor": false}, {"identifier": "nextTokenIgnoringDocumentation", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void nextTokenIgnoringDocumentation()", "full_signature": "private void nextTokenIgnoringDocumentation()", "class_method_signature": "AS3Parser.nextTokenIgnoringDocumentation()", "testcase": false, "constructor": false}, {"identifier": "parseAdditiveExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseAdditiveExpression()", "full_signature": "private IParserNode parseAdditiveExpression()", "class_method_signature": "AS3Parser.parseAdditiveExpression()", "testcase": false, "constructor": false}, {"identifier": "parseAndExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseAndExpression()", "full_signature": "private IParserNode parseAndExpression()", "class_method_signature": "AS3Parser.parseAndExpression()", "testcase": false, "constructor": false}, {"identifier": "parseArgumentList", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseArgumentList()", "full_signature": "private Node parseArgumentList()", "class_method_signature": "AS3Parser.parseArgumentList()", "testcase": false, "constructor": false}, {"identifier": "parseArrayAccessor", "parameters": "( final Node node )", "modifiers": "private", "return": "Node", "signature": "Node parseArrayAccessor( final Node node )", "full_signature": "private Node parseArrayAccessor( final Node node )", "class_method_signature": "AS3Parser.parseArrayAccessor( final Node node )", "testcase": false, "constructor": false}, {"identifier": "parseArrayLiteral", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseArrayLiteral()", "full_signature": "private IParserNode parseArrayLiteral()", "class_method_signature": "AS3Parser.parseArrayLiteral()", "testcase": false, "constructor": false}, {"identifier": "parseAssignmentExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseAssignmentExpression()", "full_signature": "private IParserNode parseAssignmentExpression()", "class_method_signature": "AS3Parser.parseAssignmentExpression()", "testcase": false, "constructor": false}, {"identifier": "parseBitwiseAndExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseBitwiseAndExpression()", "full_signature": "private IParserNode parseBitwiseAndExpression()", "class_method_signature": "AS3Parser.parseBitwiseAndExpression()", "testcase": false, "constructor": false}, {"identifier": "parseBitwiseOrExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseBitwiseOrExpression()", "full_signature": "private IParserNode parseBitwiseOrExpression()", "class_method_signature": "AS3Parser.parseBitwiseOrExpression()", "testcase": false, "constructor": false}, {"identifier": "parseBitwiseXorExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseBitwiseXorExpression()", "full_signature": "private IParserNode parseBitwiseXorExpression()", "class_method_signature": "AS3Parser.parseBitwiseXorExpression()", "testcase": false, "constructor": false}, {"identifier": "parseBlock", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseBlock()", "full_signature": "private Node parseBlock()", "class_method_signature": "AS3Parser.parseBlock()", "testcase": false, "constructor": false}, {"identifier": "parseBlock", "parameters": "( final Node result )", "modifiers": "private", "return": "Node", "signature": "Node parseBlock( final Node result )", "full_signature": "private Node parseBlock( final Node result )", "class_method_signature": "AS3Parser.parseBlock( final Node result )", "testcase": false, "constructor": false}, {"identifier": "parseCatch", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseCatch()", "full_signature": "private Node parseCatch()", "class_method_signature": "AS3Parser.parseCatch()", "testcase": false, "constructor": false}, {"identifier": "parseClass", "parameters": "( final List< Node > meta,\n                            final List< Token > modifier )", "modifiers": "private", "return": "Node", "signature": "Node parseClass( final List< Node > meta,\n                            final List< Token > modifier )", "full_signature": "private Node parseClass( final List< Node > meta,\n                            final List< Token > modifier )", "class_method_signature": "AS3Parser.parseClass( final List< Node > meta,\n                            final List< Token > modifier )", "testcase": false, "constructor": false}, {"identifier": "parseClassConstant", "parameters": "( final Node result,\n                                    final List< Token > modifiers,\n                                    final List< Node > meta )", "modifiers": "private", "return": "void", "signature": "void parseClassConstant( final Node result,\n                                    final List< Token > modifiers,\n                                    final List< Node > meta )", "full_signature": "private void parseClassConstant( final Node result,\n                                    final List< Token > modifiers,\n                                    final List< Node > meta )", "class_method_signature": "AS3Parser.parseClassConstant( final Node result,\n                                    final List< Token > modifiers,\n                                    final List< Node > meta )", "testcase": false, "constructor": false}, {"identifier": "parseClassField", "parameters": "( final Node result,\n                                 final List< Token > modifiers,\n                                 final List< Node > meta )", "modifiers": "private", "return": "void", "signature": "void parseClassField( final Node result,\n                                 final List< Token > modifiers,\n                                 final List< Node > meta )", "full_signature": "private void parseClassField( final Node result,\n                                 final List< Token > modifiers,\n                                 final List< Node > meta )", "class_method_signature": "AS3Parser.parseClassField( final Node result,\n                                 final List< Token > modifiers,\n                                 final List< Node > meta )", "testcase": false, "constructor": false}, {"identifier": "parseClassFunctions", "parameters": "( final Node result,\n                                     final List< Token > modifiers,\n                                     final List< Node > meta )", "modifiers": "private", "return": "void", "signature": "void parseClassFunctions( final Node result,\n                                     final List< Token > modifiers,\n                                     final List< Node > meta )", "full_signature": "private void parseClassFunctions( final Node result,\n                                     final List< Token > modifiers,\n                                     final List< Node > meta )", "class_method_signature": "AS3Parser.parseClassFunctions( final Node result,\n                                     final List< Token > modifiers,\n                                     final List< Node > meta )", "testcase": false, "constructor": false}, {"identifier": "parseCondition", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseCondition()", "full_signature": "private Node parseCondition()", "class_method_signature": "AS3Parser.parseCondition()", "testcase": false, "constructor": false}, {"identifier": "parseConditionalExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseConditionalExpression()", "full_signature": "private IParserNode parseConditionalExpression()", "class_method_signature": "AS3Parser.parseConditionalExpression()", "testcase": false, "constructor": false}, {"identifier": "parseConst", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseConst()", "full_signature": "private Node parseConst()", "class_method_signature": "AS3Parser.parseConst()", "testcase": false, "constructor": false}, {"identifier": "parseConstList", "parameters": "( final List< Node > meta,\n                                final List< Token > modifiers )", "modifiers": "private", "return": "Node", "signature": "Node parseConstList( final List< Node > meta,\n                                final List< Token > modifiers )", "full_signature": "private Node parseConstList( final List< Node > meta,\n                                final List< Token > modifiers )", "class_method_signature": "AS3Parser.parseConstList( final List< Node > meta,\n                                final List< Token > modifiers )", "testcase": false, "constructor": false}, {"identifier": "parseDecrement", "parameters": "( final Node node )", "modifiers": "private", "return": "Node", "signature": "Node parseDecrement( final Node node )", "full_signature": "private Node parseDecrement( final Node node )", "class_method_signature": "AS3Parser.parseDecrement( final Node node )", "testcase": false, "constructor": false}, {"identifier": "parseDo", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseDo()", "full_signature": "private Node parseDo()", "class_method_signature": "AS3Parser.parseDo()", "testcase": false, "constructor": false}, {"identifier": "parseDot", "parameters": "( final Node node )", "modifiers": "private", "return": "Node", "signature": "Node parseDot( final Node node )", "full_signature": "private Node parseDot( final Node node )", "class_method_signature": "AS3Parser.parseDot( final Node node )", "testcase": false, "constructor": false}, {"identifier": "parseEmptyStatement", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseEmptyStatement()", "full_signature": "private Node parseEmptyStatement()", "class_method_signature": "AS3Parser.parseEmptyStatement()", "testcase": false, "constructor": false}, {"identifier": "parseEncapsulatedExpression", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseEncapsulatedExpression()", "full_signature": "private Node parseEncapsulatedExpression()", "class_method_signature": "AS3Parser.parseEncapsulatedExpression()", "testcase": false, "constructor": false}, {"identifier": "parseEqualityExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseEqualityExpression()", "full_signature": "private IParserNode parseEqualityExpression()", "class_method_signature": "AS3Parser.parseEqualityExpression()", "testcase": false, "constructor": false}, {"identifier": "parseExpressionList", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseExpressionList()", "full_signature": "private IParserNode parseExpressionList()", "class_method_signature": "AS3Parser.parseExpressionList()", "testcase": false, "constructor": false}, {"identifier": "parseFinally", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseFinally()", "full_signature": "private Node parseFinally()", "class_method_signature": "AS3Parser.parseFinally()", "testcase": false, "constructor": false}, {"identifier": "parseFor", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseFor()", "full_signature": "private Node parseFor()", "class_method_signature": "AS3Parser.parseFor()", "testcase": false, "constructor": false}, {"identifier": "parseForEach", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseForEach()", "full_signature": "private Node parseForEach()", "class_method_signature": "AS3Parser.parseForEach()", "testcase": false, "constructor": false}, {"identifier": "parseForIn", "parameters": "( final Node result )", "modifiers": "private", "return": "Node", "signature": "Node parseForIn( final Node result )", "full_signature": "private Node parseForIn( final Node result )", "class_method_signature": "AS3Parser.parseForIn( final Node result )", "testcase": false, "constructor": false}, {"identifier": "parseFunction", "parameters": "( final List< Node > meta,\n                               final List< Token > modifiers )", "modifiers": "private", "return": "Node", "signature": "Node parseFunction( final List< Node > meta,\n                               final List< Token > modifiers )", "full_signature": "private Node parseFunction( final List< Node > meta,\n                               final List< Token > modifiers )", "class_method_signature": "AS3Parser.parseFunction( final List< Node > meta,\n                               final List< Token > modifiers )", "testcase": false, "constructor": false}, {"identifier": "parseFunctionBlock", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseFunctionBlock()", "full_signature": "private Node parseFunctionBlock()", "class_method_signature": "AS3Parser.parseFunctionBlock()", "testcase": false, "constructor": false}, {"identifier": "parseFunctionCall", "parameters": "( final Node node )", "modifiers": "private", "return": "Node", "signature": "Node parseFunctionCall( final Node node )", "full_signature": "private Node parseFunctionCall( final Node node )", "class_method_signature": "AS3Parser.parseFunctionCall( final Node node )", "testcase": false, "constructor": false}, {"identifier": "parseFunctionSignature", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseFunctionSignature()", "full_signature": "private Node parseFunctionSignature()", "class_method_signature": "AS3Parser.parseFunctionSignature()", "testcase": false, "constructor": false}, {"identifier": "parseIf", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseIf()", "full_signature": "private Node parseIf()", "class_method_signature": "AS3Parser.parseIf()", "testcase": false, "constructor": false}, {"identifier": "parseImplementsList", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseImplementsList()", "full_signature": "private Node parseImplementsList()", "class_method_signature": "AS3Parser.parseImplementsList()", "testcase": false, "constructor": false}, {"identifier": "parseImport", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseImport()", "full_signature": "private Node parseImport()", "class_method_signature": "AS3Parser.parseImport()", "testcase": false, "constructor": false}, {"identifier": "parseImportName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String parseImportName()", "full_signature": "private String parseImportName()", "class_method_signature": "AS3Parser.parseImportName()", "testcase": false, "constructor": false}, {"identifier": "parseIncludeExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseIncludeExpression()", "full_signature": "private IParserNode parseIncludeExpression()", "class_method_signature": "AS3Parser.parseIncludeExpression()", "testcase": false, "constructor": false}, {"identifier": "parseIncrement", "parameters": "( final Node node )", "modifiers": "private", "return": "Node", "signature": "Node parseIncrement( final Node node )", "full_signature": "private Node parseIncrement( final Node node )", "class_method_signature": "AS3Parser.parseIncrement( final Node node )", "testcase": false, "constructor": false}, {"identifier": "parseInterface", "parameters": "( final List< Node > meta,\n                                final List< Token > modifier )", "modifiers": "private", "return": "Node", "signature": "Node parseInterface( final List< Node > meta,\n                                final List< Token > modifier )", "full_signature": "private Node parseInterface( final List< Node > meta,\n                                final List< Token > modifier )", "class_method_signature": "AS3Parser.parseInterface( final List< Node > meta,\n                                final List< Token > modifier )", "testcase": false, "constructor": false}, {"identifier": "parseLambdaExpression", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseLambdaExpression()", "full_signature": "private Node parseLambdaExpression()", "class_method_signature": "AS3Parser.parseLambdaExpression()", "testcase": false, "constructor": false}, {"identifier": "parseLines", "parameters": "( final String filePath,\n                                   final String[] lines )", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseLines( final String filePath,\n                                   final String[] lines )", "full_signature": "private IParserNode parseLines( final String filePath,\n                                   final String[] lines )", "class_method_signature": "AS3Parser.parseLines( final String filePath,\n                                   final String[] lines )", "testcase": false, "constructor": false}, {"identifier": "parseMetaData", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseMetaData()", "full_signature": "private Node parseMetaData()", "class_method_signature": "AS3Parser.parseMetaData()", "testcase": false, "constructor": false}, {"identifier": "parseMultiplicativeExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseMultiplicativeExpression()", "full_signature": "private IParserNode parseMultiplicativeExpression()", "class_method_signature": "AS3Parser.parseMultiplicativeExpression()", "testcase": false, "constructor": false}, {"identifier": "parseNamespaceName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String parseNamespaceName()", "full_signature": "private String parseNamespaceName()", "class_method_signature": "AS3Parser.parseNamespaceName()", "testcase": false, "constructor": false}, {"identifier": "parseNameTypeInit", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseNameTypeInit()", "full_signature": "private Node parseNameTypeInit()", "class_method_signature": "AS3Parser.parseNameTypeInit()", "testcase": false, "constructor": false}, {"identifier": "parseNewExpression", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseNewExpression()", "full_signature": "private Node parseNewExpression()", "class_method_signature": "AS3Parser.parseNewExpression()", "testcase": false, "constructor": false}, {"identifier": "parseObjectLiteral", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseObjectLiteral()", "full_signature": "private Node parseObjectLiteral()", "class_method_signature": "AS3Parser.parseObjectLiteral()", "testcase": false, "constructor": false}, {"identifier": "parseObjectLiteralPropertyDeclaration", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseObjectLiteralPropertyDeclaration()", "full_signature": "private Node parseObjectLiteralPropertyDeclaration()", "class_method_signature": "AS3Parser.parseObjectLiteralPropertyDeclaration()", "testcase": false, "constructor": false}, {"identifier": "parseOptionalInit", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseOptionalInit()", "full_signature": "private Node parseOptionalInit()", "class_method_signature": "AS3Parser.parseOptionalInit()", "testcase": false, "constructor": false}, {"identifier": "parseOptionalType", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseOptionalType()", "full_signature": "private Node parseOptionalType()", "class_method_signature": "AS3Parser.parseOptionalType()", "testcase": false, "constructor": false}, {"identifier": "parseOrExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseOrExpression()", "full_signature": "private IParserNode parseOrExpression()", "class_method_signature": "AS3Parser.parseOrExpression()", "testcase": false, "constructor": false}, {"identifier": "parsePackage", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parsePackage()", "full_signature": "private Node parsePackage()", "class_method_signature": "AS3Parser.parsePackage()", "testcase": false, "constructor": false}, {"identifier": "parseParameter", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseParameter()", "full_signature": "private Node parseParameter()", "class_method_signature": "AS3Parser.parseParameter()", "testcase": false, "constructor": false}, {"identifier": "parseParameterList", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseParameterList()", "full_signature": "private Node parseParameterList()", "class_method_signature": "AS3Parser.parseParameterList()", "testcase": false, "constructor": false}, {"identifier": "parseQualifiedName", "parameters": "( final boolean skipPackage )", "modifiers": "private", "return": "String", "signature": "String parseQualifiedName( final boolean skipPackage )", "full_signature": "private String parseQualifiedName( final boolean skipPackage )", "class_method_signature": "AS3Parser.parseQualifiedName( final boolean skipPackage )", "testcase": false, "constructor": false}, {"identifier": "parseRelationalExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseRelationalExpression()", "full_signature": "private IParserNode parseRelationalExpression()", "class_method_signature": "AS3Parser.parseRelationalExpression()", "testcase": false, "constructor": false}, {"identifier": "parseReturnStatement", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseReturnStatement()", "full_signature": "private IParserNode parseReturnStatement()", "class_method_signature": "AS3Parser.parseReturnStatement()", "testcase": false, "constructor": false}, {"identifier": "parseShiftExpression", "parameters": "()", "modifiers": "private", "return": "IParserNode", "signature": "IParserNode parseShiftExpression()", "full_signature": "private IParserNode parseShiftExpression()", "class_method_signature": "AS3Parser.parseShiftExpression()", "testcase": false, "constructor": false}, {"identifier": "parseSwitch", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseSwitch()", "full_signature": "private Node parseSwitch()", "class_method_signature": "AS3Parser.parseSwitch()", "testcase": false, "constructor": false}, {"identifier": "parseSwitchBlock", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseSwitchBlock()", "full_signature": "private Node parseSwitchBlock()", "class_method_signature": "AS3Parser.parseSwitchBlock()", "testcase": false, "constructor": false}, {"identifier": "parseSwitchCases", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseSwitchCases()", "full_signature": "private Node parseSwitchCases()", "class_method_signature": "AS3Parser.parseSwitchCases()", "testcase": false, "constructor": false}, {"identifier": "parseTraditionalFor", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseTraditionalFor()", "full_signature": "private Node parseTraditionalFor()", "class_method_signature": "AS3Parser.parseTraditionalFor()", "testcase": false, "constructor": false}, {"identifier": "parseTry", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseTry()", "full_signature": "private Node parseTry()", "class_method_signature": "AS3Parser.parseTry()", "testcase": false, "constructor": false}, {"identifier": "parseType", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseType()", "full_signature": "private Node parseType()", "class_method_signature": "AS3Parser.parseType()", "testcase": false, "constructor": false}, {"identifier": "parseUnaryExpressionNotPlusMinus", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseUnaryExpressionNotPlusMinus()", "full_signature": "private Node parseUnaryExpressionNotPlusMinus()", "class_method_signature": "AS3Parser.parseUnaryExpressionNotPlusMinus()", "testcase": false, "constructor": false}, {"identifier": "parseUnaryPostfixExpression", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseUnaryPostfixExpression()", "full_signature": "private Node parseUnaryPostfixExpression()", "class_method_signature": "AS3Parser.parseUnaryPostfixExpression()", "testcase": false, "constructor": false}, {"identifier": "parseUse", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseUse()", "full_signature": "private Node parseUse()", "class_method_signature": "AS3Parser.parseUse()", "testcase": false, "constructor": false}, {"identifier": "parseVar", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseVar()", "full_signature": "private Node parseVar()", "class_method_signature": "AS3Parser.parseVar()", "testcase": false, "constructor": false}, {"identifier": "parseVarList", "parameters": "( final List< Node > meta,\n                              final List< Token > modifiers )", "modifiers": "private", "return": "Node", "signature": "Node parseVarList( final List< Node > meta,\n                              final List< Token > modifiers )", "full_signature": "private Node parseVarList( final List< Node > meta,\n                              final List< Token > modifiers )", "class_method_signature": "AS3Parser.parseVarList( final List< Node > meta,\n                              final List< Token > modifiers )", "testcase": false, "constructor": false}, {"identifier": "parseVector", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseVector()", "full_signature": "private Node parseVector()", "class_method_signature": "AS3Parser.parseVector()", "testcase": false, "constructor": false}, {"identifier": "parseWhile", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node parseWhile()", "full_signature": "private Node parseWhile()", "class_method_signature": "AS3Parser.parseWhile()", "testcase": false, "constructor": false}, {"identifier": "setFileName", "parameters": "( final String fileNameToParse )", "modifiers": "private", "return": "void", "signature": "void setFileName( final String fileNameToParse )", "full_signature": "private void setFileName( final String fileNameToParse )", "class_method_signature": "AS3Parser.setFileName( final String fileNameToParse )", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "( final Operators operator )", "modifiers": "private", "return": "void", "signature": "void skip( final Operators operator )", "full_signature": "private void skip( final Operators operator )", "class_method_signature": "AS3Parser.skip( final Operators operator )", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "( final String text )", "modifiers": "private", "return": "void", "signature": "void skip( final String text )", "full_signature": "private void skip( final String text )", "class_method_signature": "AS3Parser.skip( final String text )", "testcase": false, "constructor": false}, {"identifier": "tokIs", "parameters": "( final KeyWords keyword )", "modifiers": "private", "return": "boolean", "signature": "boolean tokIs( final KeyWords keyword )", "full_signature": "private boolean tokIs( final KeyWords keyword )", "class_method_signature": "AS3Parser.tokIs( final KeyWords keyword )", "testcase": false, "constructor": false}, {"identifier": "tokIs", "parameters": "( final Operators operator )", "modifiers": "private", "return": "boolean", "signature": "boolean tokIs( final Operators operator )", "full_signature": "private boolean tokIs( final Operators operator )", "class_method_signature": "AS3Parser.tokIs( final Operators operator )", "testcase": false, "constructor": false}, {"identifier": "tokIs", "parameters": "( final String text )", "modifiers": "private", "return": "boolean", "signature": "boolean tokIs( final String text )", "full_signature": "private boolean tokIs( final String text )", "class_method_signature": "AS3Parser.tokIs( final String text )", "testcase": false, "constructor": false}, {"identifier": "tryToParseCommentNode", "parameters": "( final Node result,\n                                       final List< Token > modifiers )", "modifiers": "private", "return": "void", "signature": "void tryToParseCommentNode( final Node result,\n                                       final List< Token > modifiers )", "full_signature": "private void tryToParseCommentNode( final Node result,\n                                       final List< Token > modifiers )", "class_method_signature": "AS3Parser.tryToParseCommentNode( final Node result,\n                                       final List< Token > modifiers )", "testcase": false, "constructor": false}], "file": "as3-parser/src/main/java/de/bokelberg/flex/parser/AS3Parser.java"}, "focal_method": {"identifier": "buildAst", "parameters": "( final String filePath )", "modifiers": "public final", "return": "IParserNode", "body": "public final IParserNode buildAst( final String filePath ) throws IOException,\n                                                             TokenException\n   {\n      return parseLines( filePath,\n                         FileUtils.readLines( new File( filePath ) ) );\n   }", "signature": "IParserNode buildAst( final String filePath )", "full_signature": "public final IParserNode buildAst( final String filePath )", "class_method_signature": "AS3Parser.buildAst( final String filePath )", "testcase": false, "constructor": false, "invocations": ["parseLines", "readLines"]}, "repository": {"repo_id": 4494450, "url": "https://github.com/PeterHoeche/adobe-flex-pmd", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 9, "size": 8395, "license": "licensed"}}