{"test_class": {"identifier": "TestAS3Scanner", "superclass": "extends AbstractAs3ParserTest", "interfaces": "", "fields": [], "file": "as3-parser/src/test/java/de/bokelberg/flex/parser/TestAS3Scanner.java"}, "test_case": {"identifier": "testBooleanOperators", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testBooleanOperators()\n   {\n      final String[] lines = new String[]\n      { \"&&\",\n                  \"&=\",\n                  \"||\",\n                  \"|=\" };\n      scn.setLines( lines );\n\n      for ( int i = 0; i < lines.length; i++ )\n      {\n         assertText( Integer.toString( i ),\n                     lines[ i ] );\n         assertText( \"\\n\" );\n      }\n   }", "signature": "void testBooleanOperators()", "full_signature": "@Test public void testBooleanOperators()", "class_method_signature": "TestAS3Scanner.testBooleanOperators()", "testcase": true, "constructor": false, "invocations": ["setLines", "assertText", "toString", "assertText"]}, "focal_class": {"identifier": "AS3Scanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String END    = \"__END__\";", "modifier": "private static final", "type": "String", "declarator": "END    = \"__END__\"", "var_name": "END"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger( AS3Scanner.class.getName() );", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger( AS3Scanner.class.getName() )", "var_name": "LOGGER"}, {"original_string": "private int      column;", "modifier": "private", "type": "int", "declarator": "column", "var_name": "column"}, {"original_string": "private boolean  inVector;", "modifier": "private", "type": "boolean", "declarator": "inVector", "var_name": "inVector"}, {"original_string": "private int      line;", "modifier": "private", "type": "int", "declarator": "line", "var_name": "line"}, {"original_string": "private String[] lines = null;", "modifier": "private", "type": "String[]", "declarator": "lines = null", "var_name": "lines"}], "methods": [{"identifier": "isDecimalChar", "parameters": "( final char currentCharacter )", "modifiers": "protected static", "return": "boolean", "signature": "boolean isDecimalChar( final char currentCharacter )", "full_signature": "protected static boolean isDecimalChar( final char currentCharacter )", "class_method_signature": "AS3Scanner.isDecimalChar( final char currentCharacter )", "testcase": false, "constructor": false}, {"identifier": "moveToNextToken", "parameters": "()", "modifiers": "public", "return": "Token", "signature": "Token moveToNextToken()", "full_signature": "public Token moveToNextToken()", "class_method_signature": "AS3Scanner.moveToNextToken()", "testcase": false, "constructor": false}, {"identifier": "setLines", "parameters": "( final String[] linesToBeSet )", "modifiers": "public", "return": "void", "signature": "void setLines( final String[] linesToBeSet )", "full_signature": "public void setLines( final String[] linesToBeSet )", "class_method_signature": "AS3Scanner.setLines( final String[] linesToBeSet )", "testcase": false, "constructor": false}, {"identifier": "isHexChar", "parameters": "( final char currentCharacter )", "modifiers": "", "return": "boolean", "signature": "boolean isHexChar( final char currentCharacter )", "full_signature": " boolean isHexChar( final char currentCharacter )", "class_method_signature": "AS3Scanner.isHexChar( final char currentCharacter )", "testcase": false, "constructor": false}, {"identifier": "nextToken", "parameters": "()", "modifiers": "protected", "return": "Token", "signature": "Token nextToken()", "full_signature": "protected Token nextToken()", "class_method_signature": "AS3Scanner.nextToken()", "testcase": false, "constructor": false}, {"identifier": "computePossibleMatchesMaxLength", "parameters": "( final String[] possibleMatches )", "modifiers": "private", "return": "int", "signature": "int computePossibleMatchesMaxLength( final String[] possibleMatches )", "full_signature": "private int computePossibleMatchesMaxLength( final String[] possibleMatches )", "class_method_signature": "AS3Scanner.computePossibleMatchesMaxLength( final String[] possibleMatches )", "testcase": false, "constructor": false}, {"identifier": "getPreviousCharacter", "parameters": "()", "modifiers": "private", "return": "char", "signature": "char getPreviousCharacter()", "full_signature": "private char getPreviousCharacter()", "class_method_signature": "AS3Scanner.getPreviousCharacter()", "testcase": false, "constructor": false}, {"identifier": "isIdentifierCharacter", "parameters": "( final char currentCharacter )", "modifiers": "private", "return": "boolean", "signature": "boolean isIdentifierCharacter( final char currentCharacter )", "full_signature": "private boolean isIdentifierCharacter( final char currentCharacter )", "class_method_signature": "AS3Scanner.isIdentifierCharacter( final char currentCharacter )", "testcase": false, "constructor": false}, {"identifier": "isProcessingInstruction", "parameters": "( final String text )", "modifiers": "private", "return": "boolean", "signature": "boolean isProcessingInstruction( final String text )", "full_signature": "private boolean isProcessingInstruction( final String text )", "class_method_signature": "AS3Scanner.isProcessingInstruction( final String text )", "testcase": false, "constructor": false}, {"identifier": "isValidRegExp", "parameters": "( final String pattern )", "modifiers": "private", "return": "boolean", "signature": "boolean isValidRegExp( final String pattern )", "full_signature": "private boolean isValidRegExp( final String pattern )", "class_method_signature": "AS3Scanner.isValidRegExp( final String pattern )", "testcase": false, "constructor": false}, {"identifier": "isValidXML", "parameters": "( final String text )", "modifiers": "private", "return": "boolean", "signature": "boolean isValidXML( final String text )", "full_signature": "private boolean isValidXML( final String text )", "class_method_signature": "AS3Scanner.isValidXML( final String text )", "testcase": false, "constructor": false}, {"identifier": "nextChar", "parameters": "()", "modifiers": "private", "return": "char", "signature": "char nextChar()", "full_signature": "private char nextChar()", "class_method_signature": "AS3Scanner.nextChar()", "testcase": false, "constructor": false}, {"identifier": "nextNonWhitespaceCharacter", "parameters": "()", "modifiers": "private", "return": "char", "signature": "char nextNonWhitespaceCharacter()", "full_signature": "private char nextNonWhitespaceCharacter()", "class_method_signature": "AS3Scanner.nextNonWhitespaceCharacter()", "testcase": false, "constructor": false}, {"identifier": "peekChar", "parameters": "( final int offset )", "modifiers": "private", "return": "char", "signature": "char peekChar( final int offset )", "full_signature": "private char peekChar( final int offset )", "class_method_signature": "AS3Scanner.peekChar( final int offset )", "testcase": false, "constructor": false}, {"identifier": "scanCharacterSequence", "parameters": "( final char currentCharacter,\n                                        final String[] possibleMatches )", "modifiers": "private", "return": "Token", "signature": "Token scanCharacterSequence( final char currentCharacter,\n                                        final String[] possibleMatches )", "full_signature": "private Token scanCharacterSequence( final char currentCharacter,\n                                        final String[] possibleMatches )", "class_method_signature": "AS3Scanner.scanCharacterSequence( final char currentCharacter,\n                                        final String[] possibleMatches )", "testcase": false, "constructor": false}, {"identifier": "scanCommentRegExpOrOperator", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token scanCommentRegExpOrOperator()", "full_signature": "private Token scanCommentRegExpOrOperator()", "class_method_signature": "AS3Scanner.scanCommentRegExpOrOperator()", "testcase": false, "constructor": false}, {"identifier": "scanDecimal", "parameters": "( final char currentCharacter )", "modifiers": "private", "return": "Token", "signature": "Token scanDecimal( final char currentCharacter )", "full_signature": "private Token scanDecimal( final char currentCharacter )", "class_method_signature": "AS3Scanner.scanDecimal( final char currentCharacter )", "testcase": false, "constructor": false}, {"identifier": "scanDots", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token scanDots()", "full_signature": "private Token scanDots()", "class_method_signature": "AS3Scanner.scanDots()", "testcase": false, "constructor": false}, {"identifier": "scanHex", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token scanHex()", "full_signature": "private Token scanHex()", "class_method_signature": "AS3Scanner.scanHex()", "testcase": false, "constructor": false}, {"identifier": "scanMultiLineComment", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token scanMultiLineComment()", "full_signature": "private Token scanMultiLineComment()", "class_method_signature": "AS3Scanner.scanMultiLineComment()", "testcase": false, "constructor": false}, {"identifier": "scanNumberOrDots", "parameters": "( final char characterToBeScanned )", "modifiers": "private", "return": "Token", "signature": "Token scanNumberOrDots( final char characterToBeScanned )", "full_signature": "private Token scanNumberOrDots( final char characterToBeScanned )", "class_method_signature": "AS3Scanner.scanNumberOrDots( final char characterToBeScanned )", "testcase": false, "constructor": false}, {"identifier": "scanRegExp", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token scanRegExp()", "full_signature": "private Token scanRegExp()", "class_method_signature": "AS3Scanner.scanRegExp()", "testcase": false, "constructor": false}, {"identifier": "scanSingleCharacterToken", "parameters": "( final char character )", "modifiers": "private", "return": "Token", "signature": "Token scanSingleCharacterToken( final char character )", "full_signature": "private Token scanSingleCharacterToken( final char character )", "class_method_signature": "AS3Scanner.scanSingleCharacterToken( final char character )", "testcase": false, "constructor": false}, {"identifier": "scanSingleLineComment", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token scanSingleLineComment()", "full_signature": "private Token scanSingleLineComment()", "class_method_signature": "AS3Scanner.scanSingleLineComment()", "testcase": false, "constructor": false}, {"identifier": "scanString", "parameters": "( final char startingCharacter )", "modifiers": "private", "return": "Token", "signature": "Token scanString( final char startingCharacter )", "full_signature": "private Token scanString( final char startingCharacter )", "class_method_signature": "AS3Scanner.scanString( final char startingCharacter )", "testcase": false, "constructor": false}, {"identifier": "scanUntilDelimiter", "parameters": "( final char delimiter )", "modifiers": "private", "return": "Token", "signature": "Token scanUntilDelimiter( final char delimiter )", "full_signature": "private Token scanUntilDelimiter( final char delimiter )", "class_method_signature": "AS3Scanner.scanUntilDelimiter( final char delimiter )", "testcase": false, "constructor": false}, {"identifier": "scanUntilDelimiter", "parameters": "( final char start,\n                                     final char delimiter )", "modifiers": "private", "return": "Token", "signature": "Token scanUntilDelimiter( final char start,\n                                     final char delimiter )", "full_signature": "private Token scanUntilDelimiter( final char start,\n                                     final char delimiter )", "class_method_signature": "AS3Scanner.scanUntilDelimiter( final char start,\n                                     final char delimiter )", "testcase": false, "constructor": false}, {"identifier": "scanWord", "parameters": "( final char startingCharacter )", "modifiers": "private", "return": "Token", "signature": "Token scanWord( final char startingCharacter )", "full_signature": "private Token scanWord( final char startingCharacter )", "class_method_signature": "AS3Scanner.scanWord( final char startingCharacter )", "testcase": false, "constructor": false}, {"identifier": "scanXML", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token scanXML()", "full_signature": "private Token scanXML()", "class_method_signature": "AS3Scanner.scanXML()", "testcase": false, "constructor": false}, {"identifier": "scanXMLOrOperator", "parameters": "( final char startingCharacterc )", "modifiers": "private", "return": "Token", "signature": "Token scanXMLOrOperator( final char startingCharacterc )", "full_signature": "private Token scanXMLOrOperator( final char startingCharacterc )", "class_method_signature": "AS3Scanner.scanXMLOrOperator( final char startingCharacterc )", "testcase": false, "constructor": false}, {"identifier": "skipChar", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipChar()", "full_signature": "private void skipChar()", "class_method_signature": "AS3Scanner.skipChar()", "testcase": false, "constructor": false}, {"identifier": "skipChars", "parameters": "( final int count )", "modifiers": "private", "return": "void", "signature": "void skipChars( final int count )", "full_signature": "private void skipChars( final int count )", "class_method_signature": "AS3Scanner.skipChars( final int count )", "testcase": false, "constructor": false}], "file": "as3-parser/src/main/java/de/bokelberg/flex/parser/AS3Scanner.java"}, "focal_method": {"identifier": "setLines", "parameters": "( final String[] linesToBeSet )", "modifiers": "public", "return": "void", "body": "public void setLines( final String[] linesToBeSet )\n   {\n      lines = linesToBeSet;\n      line = 0;\n      column = -1;\n   }", "signature": "void setLines( final String[] linesToBeSet )", "full_signature": "public void setLines( final String[] linesToBeSet )", "class_method_signature": "AS3Scanner.setLines( final String[] linesToBeSet )", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4494450, "url": "https://github.com/PeterHoeche/adobe-flex-pmd", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 9, "size": 8395, "license": "licensed"}}