{"test_class": {"identifier": "AbstractFlexFileTest", "superclass": "extends FlexPmdTestBase", "interfaces": "", "fields": [{"original_string": "private IAs3File  as3;", "modifier": "private", "type": "IAs3File", "declarator": "as3", "var_name": "as3"}, {"original_string": "private IMxmlFile mainMxml;", "modifier": "private", "type": "IMxmlFile", "declarator": "mainMxml", "var_name": "mainMxml"}, {"original_string": "private IMxmlFile mxml;", "modifier": "private", "type": "IMxmlFile", "declarator": "mxml", "var_name": "mxml"}], "file": "flex-pmd-files/src/test/java/com/adobe/ac/pmd/files/impl/AbstractFlexFileTest.java"}, "test_case": {"identifier": "testFlexPMD152", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testFlexPMD152()\n   {\n      Assert.assertEquals( \"com.something\",\n                           AbstractFlexFile.computePackageName( \"C:/somePath/ProjectName/com/something/Test.mxml\",\n                                                                \"C:/somePath/ProjectName\",\n                                                                \"Test.mxml\",\n                                                                \"/\" ) );\n\n      Assert.assertEquals( \"com.something\",\n                           AbstractFlexFile.computePackageName( \"C:/somePath/ProjectName/com/something/Test.mxml\",\n                                                                \"C:/somePath/ProjectName/\",\n                                                                \"Test.mxml\",\n                                                                \"/\" ) );\n   }", "signature": "void testFlexPMD152()", "full_signature": "@Test public void testFlexPMD152()", "class_method_signature": "AbstractFlexFileTest.testFlexPMD152()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computePackageName", "assertEquals", "computePackageName"]}, "focal_class": {"identifier": "AbstractFlexFile", "superclass": "", "interfaces": "implements IFlexFile", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger( AbstractFlexFile.class.getName() );", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger( AbstractFlexFile.class.getName() )", "var_name": "LOGGER"}, {"original_string": "private final String         className;", "modifier": "private final", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "private final File           file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private final List< String > lines;", "modifier": "private final", "type": "List< String >", "declarator": "lines", "var_name": "lines"}, {"original_string": "private final String         packageName;", "modifier": "private final", "type": "String", "declarator": "packageName", "var_name": "packageName"}], "methods": [{"identifier": "computePackageName", "parameters": "( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "modifiers": "protected static", "return": "String", "signature": "String computePackageName( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "full_signature": "protected static String computePackageName( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "class_method_signature": "AbstractFlexFile.computePackageName( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "testcase": false, "constructor": false}, {"identifier": "doesCurrentLineContain", "parameters": "( final String line,\n                                                  final String search )", "modifiers": "private static", "return": "boolean", "signature": "boolean doesCurrentLineContain( final String line,\n                                                  final String search )", "full_signature": "private static boolean doesCurrentLineContain( final String line,\n                                                  final String search )", "class_method_signature": "AbstractFlexFile.doesCurrentLineContain( final String line,\n                                                  final String search )", "testcase": false, "constructor": false}, {"identifier": "AbstractFlexFile", "parameters": "( final File underlyingFile,\n                               final File rootDirectory )", "modifiers": "protected", "return": "", "signature": " AbstractFlexFile( final File underlyingFile,\n                               final File rootDirectory )", "full_signature": "protected  AbstractFlexFile( final File underlyingFile,\n                               final File rootDirectory )", "class_method_signature": "AbstractFlexFile.AbstractFlexFile( final File underlyingFile,\n                               final File rootDirectory )", "testcase": false, "constructor": true}, {"identifier": "contains", "parameters": "( final String stringToLookup,\n                                  final Set< Integer > linesToBeIgnored )", "modifiers": "public final", "return": "boolean", "signature": "boolean contains( final String stringToLookup,\n                                  final Set< Integer > linesToBeIgnored )", "full_signature": "public final boolean contains( final String stringToLookup,\n                                  final Set< Integer > linesToBeIgnored )", "class_method_signature": "AbstractFlexFile.contains( final String stringToLookup,\n                                  final Set< Integer > linesToBeIgnored )", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( final Object obj )", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals( final Object obj )", "full_signature": "@Override public final boolean equals( final Object obj )", "class_method_signature": "AbstractFlexFile.equals( final Object obj )", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getClassName()", "full_signature": "public final String getClassName()", "class_method_signature": "AbstractFlexFile.getClassName()", "testcase": false, "constructor": false}, {"identifier": "getCommentClosingTag", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getCommentClosingTag()", "full_signature": "public abstract String getCommentClosingTag()", "class_method_signature": "AbstractFlexFile.getCommentClosingTag()", "testcase": false, "constructor": false}, {"identifier": "getCommentOpeningTag", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getCommentOpeningTag()", "full_signature": "public abstract String getCommentOpeningTag()", "class_method_signature": "AbstractFlexFile.getCommentOpeningTag()", "testcase": false, "constructor": false}, {"identifier": "getFilename", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getFilename()", "full_signature": "public final String getFilename()", "class_method_signature": "AbstractFlexFile.getFilename()", "testcase": false, "constructor": false}, {"identifier": "getFilePath", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getFilePath()", "full_signature": "public final String getFilePath()", "class_method_signature": "AbstractFlexFile.getFilePath()", "testcase": false, "constructor": false}, {"identifier": "getFullyQualifiedName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getFullyQualifiedName()", "full_signature": "public final String getFullyQualifiedName()", "class_method_signature": "AbstractFlexFile.getFullyQualifiedName()", "testcase": false, "constructor": false}, {"identifier": "getLineAt", "parameters": "( final int lineIndex )", "modifiers": "public", "return": "String", "signature": "String getLineAt( final int lineIndex )", "full_signature": "public String getLineAt( final int lineIndex )", "class_method_signature": "AbstractFlexFile.getLineAt( final int lineIndex )", "testcase": false, "constructor": false}, {"identifier": "getLines", "parameters": "()", "modifiers": "public final", "return": "List< String >", "signature": "List< String > getLines()", "full_signature": "public final List< String > getLines()", "class_method_signature": "AbstractFlexFile.getLines()", "testcase": false, "constructor": false}, {"identifier": "getLinesNb", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLinesNb()", "full_signature": "public int getLinesNb()", "class_method_signature": "AbstractFlexFile.getLinesNb()", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getPackageName()", "full_signature": "public final String getPackageName()", "class_method_signature": "AbstractFlexFile.getPackageName()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractFlexFile.hashCode()", "testcase": false, "constructor": false}, {"identifier": "isMainApplication", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isMainApplication()", "full_signature": "public abstract boolean isMainApplication()", "class_method_signature": "AbstractFlexFile.isMainApplication()", "testcase": false, "constructor": false}, {"identifier": "isMxml", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isMxml()", "full_signature": "public abstract boolean isMxml()", "class_method_signature": "AbstractFlexFile.isMxml()", "testcase": false, "constructor": false}], "file": "flex-pmd-files/src/main/java/com/adobe/ac/pmd/files/impl/AbstractFlexFile.java"}, "focal_method": {"identifier": "computePackageName", "parameters": "( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "modifiers": "protected static", "return": "String", "body": "protected static String computePackageName( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )\n   {\n      String temporaryPackage;\n\n      temporaryPackage = filePath.replace( className,\n                                           \"\" ).replace( rootPath,\n                                                         \"\" ).replace( fileSeparator,\n                                                                       \".\" );\n      if ( temporaryPackage.endsWith( \".\" ) )\n      {\n         temporaryPackage = temporaryPackage.substring( 0,\n                                                        temporaryPackage.length() - 1 );\n      }\n      if ( temporaryPackage.length() > 0\n            && temporaryPackage.charAt( 0 ) == '.' )\n      {\n         temporaryPackage = temporaryPackage.substring( 1,\n                                                        temporaryPackage.length() );\n      }\n      return temporaryPackage;\n   }", "signature": "String computePackageName( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "full_signature": "protected static String computePackageName( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "class_method_signature": "AbstractFlexFile.computePackageName( final String filePath,\n                                               final CharSequence rootPath,\n                                               final String className,\n                                               final String fileSeparator )", "testcase": false, "constructor": false, "invocations": ["replace", "replace", "replace", "endsWith", "substring", "length", "length", "charAt", "substring", "length"]}, "repository": {"repo_id": 4494450, "url": "https://github.com/PeterHoeche/adobe-flex-pmd", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 9, "size": 8395, "license": "licensed"}}