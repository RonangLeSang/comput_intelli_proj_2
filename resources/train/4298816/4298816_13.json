{"test_class": {"identifier": "StudyServiceImplTest", "superclass": "extends BaseUnit", "interfaces": "", "fields": [{"original_string": "private static StudyService ss;", "modifier": "private static", "type": "StudyService", "declarator": "ss", "var_name": "ss"}], "file": "seqware-common/src/test/java/net/sourceforge/seqware/common/business/impl/StudyServiceImplTest.java"}, "test_case": {"identifier": "testFindByTitle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindByTitle() {\n\n        List<Study> studySensitive = ss.findByTitle(\"AbcCo_Exome_Sequencing\");\n        // Should return one item.\n        assertNotNull(studySensitive);\n\n        List<Study> studyInsensitive = ss.findByTitle(\"abcco_Exome_Sequencing\");\n        // Should return one item.\n        assertNotNull(studyInsensitive);\n\n        // Look for not existing Title\n        List<Study> studyNotExist = ss.findByTitle(\"Not Exist\");\n        // Should return one item.\n        assertNull(studyNotExist);\n    }", "signature": "void testFindByTitle()", "full_signature": "@Test public void testFindByTitle()", "class_method_signature": "StudyServiceImplTest.testFindByTitle()", "testcase": true, "constructor": false, "invocations": ["findByTitle", "assertNotNull", "findByTitle", "assertNotNull", "findByTitle", "assertNull"]}, "focal_class": {"identifier": "StudyServiceImpl", "superclass": "", "interfaces": "implements StudyService", "fields": [{"original_string": "private StudyDAO studyDAO = null;", "modifier": "private", "type": "StudyDAO", "declarator": "studyDAO = null", "var_name": "studyDAO"}, {"original_string": "private StudyTypeDAO studyTypeDAO = null;", "modifier": "private", "type": "StudyTypeDAO", "declarator": "studyTypeDAO = null", "var_name": "studyTypeDAO"}, {"original_string": "private FileDAO fileDAO = null;", "modifier": "private", "type": "FileDAO", "declarator": "fileDAO = null", "var_name": "fileDAO"}, {"original_string": "private static final Log LOG = LogFactory.getLog(StudyServiceImpl.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(StudyServiceImpl.class)", "var_name": "LOG"}], "methods": [{"identifier": "StudyServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " StudyServiceImpl()", "full_signature": "public  StudyServiceImpl()", "class_method_signature": "StudyServiceImpl.StudyServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "setStudyDAO", "parameters": "(StudyDAO studyDAO)", "modifiers": "@Override public", "return": "void", "signature": "void setStudyDAO(StudyDAO studyDAO)", "full_signature": "@Override public void setStudyDAO(StudyDAO studyDAO)", "class_method_signature": "StudyServiceImpl.setStudyDAO(StudyDAO studyDAO)", "testcase": false, "constructor": false}, {"identifier": "setFileDAO", "parameters": "(FileDAO fileDAO)", "modifiers": "public", "return": "void", "signature": "void setFileDAO(FileDAO fileDAO)", "full_signature": "public void setFileDAO(FileDAO fileDAO)", "class_method_signature": "StudyServiceImpl.setFileDAO(FileDAO fileDAO)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Study study)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer insert(Study study)", "full_signature": "@Override public Integer insert(Study study)", "class_method_signature": "StudyServiceImpl.insert(Study study)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Study study)", "modifiers": "@Override public", "return": "void", "signature": "void update(Study study)", "full_signature": "@Override public void update(Study study)", "class_method_signature": "StudyServiceImpl.update(Study study)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Study study)", "modifiers": "@Override public", "return": "void", "signature": "void merge(Study study)", "full_signature": "@Override public void merge(Study study)", "class_method_signature": "StudyServiceImpl.merge(Study study)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Study study, boolean deleteRealFiles)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Study study, boolean deleteRealFiles)", "full_signature": "@Override public void delete(Study study, boolean deleteRealFiles)", "class_method_signature": "StudyServiceImpl.delete(Study study, boolean deleteRealFiles)", "testcase": false, "constructor": false}, {"identifier": "getFiles", "parameters": "(Integer studyId)", "modifiers": "@Override public", "return": "List<File>", "signature": "List<File> getFiles(Integer studyId)", "full_signature": "@Override public List<File> getFiles(Integer studyId)", "class_method_signature": "StudyServiceImpl.getFiles(Integer studyId)", "testcase": false, "constructor": false}, {"identifier": "isHasFile", "parameters": "(Integer studyId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHasFile(Integer studyId)", "full_signature": "@Override public boolean isHasFile(Integer studyId)", "class_method_signature": "StudyServiceImpl.isHasFile(Integer studyId)", "testcase": false, "constructor": false}, {"identifier": "getFiles", "parameters": "(Integer studyId, String metaType)", "modifiers": "@Override public", "return": "List<File>", "signature": "List<File> getFiles(Integer studyId, String metaType)", "full_signature": "@Override public List<File> getFiles(Integer studyId, String metaType)", "class_method_signature": "StudyServiceImpl.getFiles(Integer studyId, String metaType)", "testcase": false, "constructor": false}, {"identifier": "isHasFile", "parameters": "(Integer studyId, String metaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHasFile(Integer studyId, String metaType)", "full_signature": "@Override public boolean isHasFile(Integer studyId, String metaType)", "class_method_signature": "StudyServiceImpl.isHasFile(Integer studyId, String metaType)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Registration registration)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> list(Registration registration)", "full_signature": "@Override public List<Study> list(Registration registration)", "class_method_signature": "StudyServiceImpl.list(Registration registration)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Registration registration, Boolean isAcs)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> list(Registration registration, Boolean isAcs)", "full_signature": "@Override public List<Study> list(Registration registration, Boolean isAcs)", "class_method_signature": "StudyServiceImpl.list(Registration registration, Boolean isAcs)", "testcase": false, "constructor": false}, {"identifier": "listMyShared", "parameters": "(Registration registration, Boolean isAcs)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> listMyShared(Registration registration, Boolean isAcs)", "full_signature": "@Override public List<Study> listMyShared(Registration registration, Boolean isAcs)", "class_method_signature": "StudyServiceImpl.listMyShared(Registration registration, Boolean isAcs)", "testcase": false, "constructor": false}, {"identifier": "listSharedWithMe", "parameters": "(Registration registration)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> listSharedWithMe(Registration registration)", "full_signature": "@Override public List<Study> listSharedWithMe(Registration registration)", "class_method_signature": "StudyServiceImpl.listSharedWithMe(Registration registration)", "testcase": false, "constructor": false}, {"identifier": "listSharedWithMe", "parameters": "(Registration registration, Boolean isAcs)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> listSharedWithMe(Registration registration, Boolean isAcs)", "full_signature": "@Override public List<Study> listSharedWithMe(Registration registration, Boolean isAcs)", "class_method_signature": "StudyServiceImpl.listSharedWithMe(Registration registration, Boolean isAcs)", "testcase": false, "constructor": false}, {"identifier": "findByTitle", "parameters": "(String title)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> findByTitle(String title)", "full_signature": "@Override public List<Study> findByTitle(String title)", "class_method_signature": "StudyServiceImpl.findByTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "findByID", "parameters": "(Integer studyID)", "modifiers": "@Override public", "return": "Study", "signature": "Study findByID(Integer studyID)", "full_signature": "@Override public Study findByID(Integer studyID)", "class_method_signature": "StudyServiceImpl.findByID(Integer studyID)", "testcase": false, "constructor": false}, {"identifier": "findBySWAccession", "parameters": "(Integer swAccession)", "modifiers": "@Override public", "return": "Study", "signature": "Study findBySWAccession(Integer swAccession)", "full_signature": "@Override public Study findBySWAccession(Integer swAccession)", "class_method_signature": "StudyServiceImpl.findBySWAccession(Integer swAccession)", "testcase": false, "constructor": false}, {"identifier": "findByOwnerID", "parameters": "(Integer registrationId)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> findByOwnerID(Integer registrationId)", "full_signature": "@Override public List<Study> findByOwnerID(Integer registrationId)", "class_method_signature": "StudyServiceImpl.findByOwnerID(Integer registrationId)", "testcase": false, "constructor": false}, {"identifier": "findByCriteria", "parameters": "(String criteria, boolean isCaseSens)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> findByCriteria(String criteria, boolean isCaseSens)", "full_signature": "@Override public List<Study> findByCriteria(String criteria, boolean isCaseSens)", "class_method_signature": "StudyServiceImpl.findByCriteria(String criteria, boolean isCaseSens)", "testcase": false, "constructor": false}, {"identifier": "findByCriteria", "parameters": "(String criteria)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> findByCriteria(String criteria)", "full_signature": "@Override public List<Study> findByCriteria(String criteria)", "class_method_signature": "StudyServiceImpl.findByCriteria(String criteria)", "testcase": false, "constructor": false}, {"identifier": "hasTitleBeenUsed", "parameters": "(String oldTitle, String newTitle)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasTitleBeenUsed(String oldTitle, String newTitle)", "full_signature": "@Override public boolean hasTitleBeenUsed(String oldTitle, String newTitle)", "class_method_signature": "StudyServiceImpl.hasTitleBeenUsed(String oldTitle, String newTitle)", "testcase": false, "constructor": false}, {"identifier": "listWithHasFile", "parameters": "(List<Study> list)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> listWithHasFile(List<Study> list)", "full_signature": "@Override public List<Study> listWithHasFile(List<Study> list)", "class_method_signature": "StudyServiceImpl.listWithHasFile(List<Study> list)", "testcase": false, "constructor": false}, {"identifier": "listWithHasFile", "parameters": "(List<Study> list, String metaType)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> listWithHasFile(List<Study> list, String metaType)", "full_signature": "@Override public List<Study> listWithHasFile(List<Study> list, String metaType)", "class_method_signature": "StudyServiceImpl.listWithHasFile(List<Study> list, String metaType)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> list()", "full_signature": "@Override public List<Study> list()", "class_method_signature": "StudyServiceImpl.list()", "testcase": false, "constructor": false}, {"identifier": "listStudyHasFile", "parameters": "(Registration registration, String metaType, Boolean isAsc)", "modifiers": "@Override public", "return": "List<Study>", "signature": "List<Study> listStudyHasFile(Registration registration, String metaType, Boolean isAsc)", "full_signature": "@Override public List<Study> listStudyHasFile(Registration registration, String metaType, Boolean isAsc)", "class_method_signature": "StudyServiceImpl.listStudyHasFile(Registration registration, String metaType, Boolean isAsc)", "testcase": false, "constructor": false}, {"identifier": "getStudyTypeDAO", "parameters": "()", "modifiers": "public", "return": "StudyTypeDAO", "signature": "StudyTypeDAO getStudyTypeDAO()", "full_signature": "public StudyTypeDAO getStudyTypeDAO()", "class_method_signature": "StudyServiceImpl.getStudyTypeDAO()", "testcase": false, "constructor": false}, {"identifier": "setStudyTypeDAO", "parameters": "(StudyTypeDAO studyTypeDAO)", "modifiers": "public", "return": "void", "signature": "void setStudyTypeDAO(StudyTypeDAO studyTypeDAO)", "full_signature": "public void setStudyTypeDAO(StudyTypeDAO studyTypeDAO)", "class_method_signature": "StudyServiceImpl.setStudyTypeDAO(StudyTypeDAO studyTypeDAO)", "testcase": false, "constructor": false}, {"identifier": "getStudyDAO", "parameters": "()", "modifiers": "public", "return": "StudyDAO", "signature": "StudyDAO getStudyDAO()", "full_signature": "public StudyDAO getStudyDAO()", "class_method_signature": "StudyServiceImpl.getStudyDAO()", "testcase": false, "constructor": false}, {"identifier": "updateDetached", "parameters": "(Study study)", "modifiers": "@Override public", "return": "Study", "signature": "Study updateDetached(Study study)", "full_signature": "@Override public Study updateDetached(Study study)", "class_method_signature": "StudyServiceImpl.updateDetached(Study study)", "testcase": false, "constructor": false}, {"identifier": "updateOwners", "parameters": "(Integer swAccession)", "modifiers": "@Override public", "return": "void", "signature": "void updateOwners(Integer swAccession)", "full_signature": "@Override public void updateOwners(Integer swAccession)", "class_method_signature": "StudyServiceImpl.updateOwners(Integer swAccession)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Registration registration, Study study)", "modifiers": "@Override public", "return": "void", "signature": "void update(Registration registration, Study study)", "full_signature": "@Override public void update(Registration registration, Study study)", "class_method_signature": "StudyServiceImpl.update(Registration registration, Study study)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Registration registration, Study study)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer insert(Registration registration, Study study)", "full_signature": "@Override public Integer insert(Registration registration, Study study)", "class_method_signature": "StudyServiceImpl.insert(Registration registration, Study study)", "testcase": false, "constructor": false}, {"identifier": "updateDetached", "parameters": "(Registration registration, Study study)", "modifiers": "@Override public", "return": "Study", "signature": "Study updateDetached(Registration registration, Study study)", "full_signature": "@Override public Study updateDetached(Registration registration, Study study)", "class_method_signature": "StudyServiceImpl.updateDetached(Registration registration, Study study)", "testcase": false, "constructor": false}, {"identifier": "getRunningCount", "parameters": "(Study study)", "modifiers": "@Override public", "return": "int", "signature": "int getRunningCount(Study study)", "full_signature": "@Override public int getRunningCount(Study study)", "class_method_signature": "StudyServiceImpl.getRunningCount(Study study)", "testcase": false, "constructor": false}, {"identifier": "getFinishedCount", "parameters": "(Study study)", "modifiers": "@Override public", "return": "int", "signature": "int getFinishedCount(Study study)", "full_signature": "@Override public int getFinishedCount(Study study)", "class_method_signature": "StudyServiceImpl.getFinishedCount(Study study)", "testcase": false, "constructor": false}, {"identifier": "getFailedCount", "parameters": "(Study study)", "modifiers": "@Override public", "return": "int", "signature": "int getFailedCount(Study study)", "full_signature": "@Override public int getFailedCount(Study study)", "class_method_signature": "StudyServiceImpl.getFailedCount(Study study)", "testcase": false, "constructor": false}], "file": "seqware-common/src/main/java/net/sourceforge/seqware/common/business/impl/StudyServiceImpl.java"}, "focal_method": {"identifier": "findByTitle", "parameters": "(String title)", "modifiers": "@Override public", "return": "List<Study>", "body": "@Override\n    public List<Study> findByTitle(String title) {\n        List<Study> study = null;\n        if (title != null) {\n            try {\n                study = studyDAO.findByTitle(title.trim());\n            } catch (Exception exception) {\n                LOG.debug(\"Cannot find Study by title \" + title);\n            }\n        }\n        return study;\n    }", "signature": "List<Study> findByTitle(String title)", "full_signature": "@Override public List<Study> findByTitle(String title)", "class_method_signature": "StudyServiceImpl.findByTitle(String title)", "testcase": false, "constructor": false, "invocations": ["findByTitle", "trim", "debug"]}, "repository": {"repo_id": 4298816, "url": "https://github.com/SeqWare/seqware", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 27, "size": 26902, "license": "licensed"}}