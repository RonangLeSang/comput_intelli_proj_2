{"test_class": {"identifier": "ODataExpressionParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXPECTED_STR_1 = \"gwt1.SalesOrder = 1234\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_1 = \"gwt1.SalesOrder = 1234\"", "var_name": "EXPECTED_STR_1"}, {"original_string": "private static final String EXPECTED_STR_2 = \"gwt1.SalesOrder >= 1234 AND gwt1.SalesABC <> XYZ\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_2 = \"gwt1.SalesOrder >= 1234 AND gwt1.SalesABC <> XYZ\"", "var_name": "EXPECTED_STR_2"}, {"original_string": "private static final String EXPECTED_STR_3 = \"gwt1.SalesOrder >= 1234 OR gwt1.SalesABC <> XYZ\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_3 = \"gwt1.SalesOrder >= 1234 OR gwt1.SalesABC <> XYZ\"", "var_name": "EXPECTED_STR_3"}, {"original_string": "private static final String EXPECTED_STR_4 = \"gwt1.SalesOrder < 1234 AND gwt1.SalesABC <= XYZ\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_4 = \"gwt1.SalesOrder < 1234 AND gwt1.SalesABC <= XYZ\"", "var_name": "EXPECTED_STR_4"}, {"original_string": "private static final String EXPECTED_STR_5 = \"gwt1.LineItems > 2345 AND gwt1.SalesOrder >= Amazon\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_5 = \"gwt1.LineItems > 2345 AND gwt1.SalesOrder >= Amazon\"", "var_name": "EXPECTED_STR_5"}, {"original_string": "private static final String EXPECTED_STR_6 = \"gwt1.Address.city = \\'City_3\\'\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_6 = \"gwt1.Address.city = \\'City_3\\'\"", "var_name": "EXPECTED_STR_6"}, {"original_string": "private static final String EXPECTED_STR_7 = \"gwt1.Address.city.area = \\'BTM\\'\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_7 = \"gwt1.Address.city.area = \\'BTM\\'\"", "var_name": "EXPECTED_STR_7"}, {"original_string": "private static final String EXPECTED_STR_8 = \"gwt1.field1 = 1 AND gwt1.field2 = 'abc'\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_8 = \"gwt1.field1 = 1 AND gwt1.field2 = 'abc'\"", "var_name": "EXPECTED_STR_8"}, {"original_string": "private static final String EXPECTED_STR_9 = \"gwt1.BuyerAddress, gwt1.BuyerName, gwt1.BuyerId\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_9 = \"gwt1.BuyerAddress, gwt1.BuyerName, gwt1.BuyerId\"", "var_name": "EXPECTED_STR_9"}, {"original_string": "private static final String EXPECTED_STR_10 = \"gwt1.SalesOrder\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_10 = \"gwt1.SalesOrder\"", "var_name": "EXPECTED_STR_10"}, {"original_string": "private static final String EXPECTED_STR_11 = \"NOT(gwt1.deliveryStatus)\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_11 = \"NOT(gwt1.deliveryStatus)\"", "var_name": "EXPECTED_STR_11"}, {"original_string": "private static final String EXPECTED_STR_12 = \"(CASE WHEN (gwt1.currencyCode LIKE '%Ru%') THEN TRUE ELSE FALSE END) = true\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_12 = \"(CASE WHEN (gwt1.currencyCode LIKE '%Ru%') THEN TRUE ELSE FALSE END) = true\"", "var_name": "EXPECTED_STR_12"}, {"original_string": "private static final String EXPECTED_STR_13 = \"SUBSTRING(gwt1.currencyCode, 1 + 1 , 2) = 'NR'\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_13 = \"SUBSTRING(gwt1.currencyCode, 1 + 1 , 2) = 'NR'\"", "var_name": "EXPECTED_STR_13"}, {"original_string": "private static final String EXPECTED_STR_14 = \"LOWER(gwt1.currencyCode) = 'inr rupees'\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_14 = \"LOWER(gwt1.currencyCode) = 'inr rupees'\"", "var_name": "EXPECTED_STR_14"}, {"original_string": "private static final String EXPECTED_STR_15 = \"(CASE WHEN (LOWER(gwt1.currencyCode) LIKE '%nr rupees%') THEN TRUE ELSE FALSE END) = true\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_15 = \"(CASE WHEN (LOWER(gwt1.currencyCode) LIKE '%nr rupees%') THEN TRUE ELSE FALSE END) = true\"", "var_name": "EXPECTED_STR_15"}, {"original_string": "private static final String EXPECTED_STR_16 = \"(CASE WHEN (gwt1.currencyCode LIKE '%INR%') THEN TRUE ELSE FALSE END) = true\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_16 = \"(CASE WHEN (gwt1.currencyCode LIKE '%INR%') THEN TRUE ELSE FALSE END) = true\"", "var_name": "EXPECTED_STR_16"}, {"original_string": "private static final String EXPECTED_STR_17 = \"(CASE WHEN (LOWER(gwt1.currencyCode) LIKE '%nr rupees%') THEN TRUE ELSE FALSE END) = true\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_STR_17 = \"(CASE WHEN (LOWER(gwt1.currencyCode) LIKE '%nr rupees%') THEN TRUE ELSE FALSE END) = true\"", "var_name": "EXPECTED_STR_17"}, {"original_string": "private static final String ADDRESS = \"Address\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS = \"Address\"", "var_name": "ADDRESS"}, {"original_string": "private static final String CITY = \"city\";", "modifier": "private static final", "type": "String", "declarator": "CITY = \"city\"", "var_name": "CITY"}, {"original_string": "private static final String AREA = \"area\";", "modifier": "private static final", "type": "String", "declarator": "AREA = \"area\"", "var_name": "AREA"}, {"original_string": "private static final String SALES_ORDER = \"SalesOrder\";", "modifier": "private static final", "type": "String", "declarator": "SALES_ORDER = \"SalesOrder\"", "var_name": "SALES_ORDER"}, {"original_string": "private static final String SALES_ABC = \"SalesABC\";", "modifier": "private static final", "type": "String", "declarator": "SALES_ABC = \"SalesABC\"", "var_name": "SALES_ABC"}, {"original_string": "private static final String SAMPLE_DATA_1 = \"1234\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_1 = \"1234\"", "var_name": "SAMPLE_DATA_1"}, {"original_string": "private static final String SAMPLE_DATA_2 = \"2345\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_2 = \"2345\"", "var_name": "SAMPLE_DATA_2"}, {"original_string": "private static final String SAMPLE_DATA_XYZ = \"XYZ\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_XYZ = \"XYZ\"", "var_name": "SAMPLE_DATA_XYZ"}, {"original_string": "private static final String SAMPLE_DATA_BTM = \"\\'BTM\\'\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_BTM = \"\\'BTM\\'\"", "var_name": "SAMPLE_DATA_BTM"}, {"original_string": "private static final String SAMPLE_DATA_CITY_3 = \"\\'City_3\\'\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_CITY_3 = \"\\'City_3\\'\"", "var_name": "SAMPLE_DATA_CITY_3"}, {"original_string": "private static final String SAMPLE_DATA_LINE_ITEMS = \"LineItems\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_LINE_ITEMS = \"LineItems\"", "var_name": "SAMPLE_DATA_LINE_ITEMS"}, {"original_string": "private static final String SAMPLE_DATA_AMAZON = \"Amazon\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_AMAZON = \"Amazon\"", "var_name": "SAMPLE_DATA_AMAZON"}, {"original_string": "private static final String SAMPLE_DATA_FIELD1 = \"field1\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_FIELD1 = \"field1\"", "var_name": "SAMPLE_DATA_FIELD1"}, {"original_string": "private static final String SAMPLE_DATA_FIELD2 = \"field2\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DATA_FIELD2 = \"field2\"", "var_name": "SAMPLE_DATA_FIELD2"}, {"original_string": "private static final String TABLE_ALIAS = \"gwt1\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_ALIAS = \"gwt1\"", "var_name": "TABLE_ALIAS"}], "file": "com.sap.core.odata.processor.core/src/test/java/com/sap/core/odata/processor/core/jpa/ODataExpressionParserTest.java"}, "test_case": {"identifier": "testParseWhereExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParseWhereExpression() {\n    try {\n      String parsedStr = ODataJPATestConstants.EMPTY_STRING;\n      // Simple Binary query -\n      parsedStr = ODataExpressionParser.parseToJPAWhereExpression(\n          getBinaryExpressionMockedObj(BinaryOperator.EQ, ExpressionKind.PROPERTY,\n              SALES_ORDER, SAMPLE_DATA_1), TABLE_ALIAS);\n\n      assertEquals(EXPECTED_STR_1, parsedStr);\n      // complex query -\n      parsedStr = ODataJPATestConstants.EMPTY_STRING;\n\n      CommonExpression exp1 = getBinaryExpressionMockedObj(\n          BinaryOperator.GE, ExpressionKind.PROPERTY, SALES_ORDER, SAMPLE_DATA_1);\n      CommonExpression exp2 = getBinaryExpressionMockedObj(\n          BinaryOperator.NE, ExpressionKind.PROPERTY, SALES_ABC, SAMPLE_DATA_XYZ);\n      parsedStr = ODataExpressionParser.parseToJPAWhereExpression(\n          getBinaryExpression(exp1, BinaryOperator.AND, exp2), TABLE_ALIAS);\n      assertEquals(EXPECTED_STR_2, parsedStr);\n    } catch (EdmException e) {\n      fail(ODataJPATestConstants.EXCEPTION_MSG_PART_1 + e.getMessage()\n          + ODataJPATestConstants.EXCEPTION_MSG_PART_2);\n    } catch (ODataException e) {\n      fail(ODataJPATestConstants.EXCEPTION_MSG_PART_1 + e.getMessage()\n          + ODataJPATestConstants.EXCEPTION_MSG_PART_2);\n    }\n  }", "signature": "void testParseWhereExpression()", "full_signature": "@Test public void testParseWhereExpression()", "class_method_signature": "ODataExpressionParserTest.testParseWhereExpression()", "testcase": true, "constructor": false, "invocations": ["parseToJPAWhereExpression", "getBinaryExpressionMockedObj", "assertEquals", "getBinaryExpressionMockedObj", "getBinaryExpressionMockedObj", "parseToJPAWhereExpression", "getBinaryExpression", "assertEquals", "fail", "getMessage", "fail", "getMessage"]}, "focal_class": {"identifier": "ODataExpressionParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EMPTY = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "public static Integer methodFlag = 0;", "modifier": "public static", "type": "Integer", "declarator": "methodFlag = 0", "var_name": "methodFlag"}], "methods": [{"identifier": "parseToJPAWhereExpression", "parameters": "(final CommonExpression whereExpression, final String tableAlias)", "modifiers": "public static", "return": "String", "signature": "String parseToJPAWhereExpression(final CommonExpression whereExpression, final String tableAlias)", "full_signature": "public static String parseToJPAWhereExpression(final CommonExpression whereExpression, final String tableAlias)", "class_method_signature": "ODataExpressionParser.parseToJPAWhereExpression(final CommonExpression whereExpression, final String tableAlias)", "testcase": false, "constructor": false}, {"identifier": "parseToJPASelectExpression", "parameters": "(final String tableAlias, final ArrayList<String> selectedFields)", "modifiers": "public static", "return": "String", "signature": "String parseToJPASelectExpression(final String tableAlias, final ArrayList<String> selectedFields)", "full_signature": "public static String parseToJPASelectExpression(final String tableAlias, final ArrayList<String> selectedFields)", "class_method_signature": "ODataExpressionParser.parseToJPASelectExpression(final String tableAlias, final ArrayList<String> selectedFields)", "testcase": false, "constructor": false}, {"identifier": "parseToJPAOrderByExpression", "parameters": "(final OrderByExpression orderByExpression, final String tableAlias)", "modifiers": "public static", "return": "HashMap<String, String>", "signature": "HashMap<String, String> parseToJPAOrderByExpression(final OrderByExpression orderByExpression, final String tableAlias)", "full_signature": "public static HashMap<String, String> parseToJPAOrderByExpression(final OrderByExpression orderByExpression, final String tableAlias)", "class_method_signature": "ODataExpressionParser.parseToJPAOrderByExpression(final OrderByExpression orderByExpression, final String tableAlias)", "testcase": false, "constructor": false}, {"identifier": "parseKeyPredicates", "parameters": "(final List<KeyPredicate> keyPredicates, final String tableAlias)", "modifiers": "public static", "return": "String", "signature": "String parseKeyPredicates(final List<KeyPredicate> keyPredicates, final String tableAlias)", "full_signature": "public static String parseKeyPredicates(final List<KeyPredicate> keyPredicates, final String tableAlias)", "class_method_signature": "ODataExpressionParser.parseKeyPredicates(final List<KeyPredicate> keyPredicates, final String tableAlias)", "testcase": false, "constructor": false}, {"identifier": "evaluateComparingExpression", "parameters": "(String value, final EdmSimpleType edmSimpleType)", "modifiers": "private static", "return": "String", "signature": "String evaluateComparingExpression(String value, final EdmSimpleType edmSimpleType)", "full_signature": "private static String evaluateComparingExpression(String value, final EdmSimpleType edmSimpleType)", "class_method_signature": "ODataExpressionParser.evaluateComparingExpression(String value, final EdmSimpleType edmSimpleType)", "testcase": false, "constructor": false}, {"identifier": "parseKeyPropertiesToJPAOrderByExpression", "parameters": "(final List<EdmProperty> edmPropertylist, final String tableAlias)", "modifiers": "public static", "return": "HashMap<String, String>", "signature": "HashMap<String, String> parseKeyPropertiesToJPAOrderByExpression(final List<EdmProperty> edmPropertylist, final String tableAlias)", "full_signature": "public static HashMap<String, String> parseKeyPropertiesToJPAOrderByExpression(final List<EdmProperty> edmPropertylist, final String tableAlias)", "class_method_signature": "ODataExpressionParser.parseKeyPropertiesToJPAOrderByExpression(final List<EdmProperty> edmPropertylist, final String tableAlias)", "testcase": false, "constructor": false}], "file": "com.sap.core.odata.processor.core/src/main/java/com/sap/core/odata/processor/core/jpa/ODataExpressionParser.java"}, "focal_method": {"identifier": "parseToJPAWhereExpression", "parameters": "(final CommonExpression whereExpression, final String tableAlias)", "modifiers": "public static", "return": "String", "body": "public static String parseToJPAWhereExpression(final CommonExpression whereExpression, final String tableAlias) throws ODataException {\n    switch (whereExpression.getKind()) {\n    case UNARY:\n      final UnaryExpression unaryExpression = (UnaryExpression) whereExpression;\n      final String operand = parseToJPAWhereExpression(unaryExpression.getOperand(), tableAlias);\n\n      switch (unaryExpression.getOperator()) {\n      case NOT:\n        return JPQLStatement.Operator.NOT + \"(\" + operand + \")\"; //$NON-NLS-1$ //$NON-NLS-2$\n      case MINUS:\n        if (operand.startsWith(\"-\")) {\n          return operand.substring(1);\n        }\n        else {\n          return \"-\" + operand; //$NON-NLS-1$\n        }\n      default:\n        throw new ODataNotImplementedException();\n      }\n\n    case FILTER:\n      return parseToJPAWhereExpression(((FilterExpression) whereExpression).getExpression(), tableAlias);\n    case BINARY:\n      final BinaryExpression binaryExpression = (BinaryExpression) whereExpression;\n      if ((binaryExpression.getLeftOperand().getKind() == ExpressionKind.METHOD) && ((binaryExpression.getOperator() == BinaryOperator.EQ) || (binaryExpression.getOperator() == BinaryOperator.NE)) && (((MethodExpression) binaryExpression.getLeftOperand()).getMethod() == MethodOperator.SUBSTRINGOF)) {\n        methodFlag = 1;\n      }\n      final String left = parseToJPAWhereExpression(binaryExpression.getLeftOperand(), tableAlias);\n      final String right = parseToJPAWhereExpression(binaryExpression.getRightOperand(), tableAlias);\n\n      switch (binaryExpression.getOperator()) {\n      case AND:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.AND + JPQLStatement.DELIMITER.SPACE + right;\n      case OR:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.OR + JPQLStatement.DELIMITER.SPACE + right;\n      case EQ:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.EQ + JPQLStatement.DELIMITER.SPACE + right;\n      case NE:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.NE + JPQLStatement.DELIMITER.SPACE + right;\n      case LT:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.LT + JPQLStatement.DELIMITER.SPACE + right;\n      case LE:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.LE + JPQLStatement.DELIMITER.SPACE + right;\n      case GT:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.GT + JPQLStatement.DELIMITER.SPACE + right;\n      case GE:\n        return left + JPQLStatement.DELIMITER.SPACE + JPQLStatement.Operator.GE + JPQLStatement.DELIMITER.SPACE + right;\n      case PROPERTY_ACCESS:\n        throw new ODataNotImplementedException();\n      default:\n        throw new ODataNotImplementedException();\n      }\n\n    case PROPERTY:\n      String returnStr = tableAlias + JPQLStatement.DELIMITER.PERIOD + ((EdmProperty) ((PropertyExpression) whereExpression).getEdmProperty()).getMapping().getInternalName();\n      return returnStr;\n\n    case MEMBER:\n      String memberExpStr = EMPTY;\n      int i = 0;\n      MemberExpression member = null;\n      CommonExpression tempExp = whereExpression;\n      while (tempExp != null && tempExp.getKind() == ExpressionKind.MEMBER) {\n        member = (MemberExpression) tempExp;\n        if (i > 0) {\n          memberExpStr = JPQLStatement.DELIMITER.PERIOD + memberExpStr;\n        }\n        i++;\n        memberExpStr = ((EdmProperty) ((PropertyExpression) member.getProperty()).getEdmProperty()).getMapping().getInternalName() + memberExpStr;\n        tempExp = member.getPath();\n      }\n      memberExpStr = ((EdmProperty) ((PropertyExpression) tempExp).getEdmProperty()).getMapping().getInternalName() + JPQLStatement.DELIMITER.PERIOD + memberExpStr;\n      return tableAlias + JPQLStatement.DELIMITER.PERIOD + memberExpStr;\n\n    case LITERAL:\n      final LiteralExpression literal = (LiteralExpression) whereExpression;\n      final EdmSimpleType literalType = (EdmSimpleType) literal.getEdmType();\n      String value = literalType.valueToString(literalType.valueOfString(literal.getUriLiteral(), EdmLiteralKind.URI, null, literalType.getDefaultType()), EdmLiteralKind.DEFAULT, null);\n      return evaluateComparingExpression(value, literalType);\n\n    case METHOD:\n      final MethodExpression methodExpression = (MethodExpression) whereExpression;\n      String first = parseToJPAWhereExpression(methodExpression.getParameters().get(0), tableAlias);\n      final String second = methodExpression.getParameterCount() > 1 ?\n          parseToJPAWhereExpression(methodExpression.getParameters().get(1), tableAlias) : null;\n      String third = methodExpression.getParameterCount() > 2 ?\n          parseToJPAWhereExpression(methodExpression.getParameters().get(2), tableAlias) : null;\n\n      switch (methodExpression.getMethod()) {\n      case SUBSTRING:\n        third = third != null ? \", \" + third : \"\";\n        return String.format(\"SUBSTRING(%s, %s + 1 %s)\", first, second, third);\n      case SUBSTRINGOF:\n        first = first.substring(1, first.length() - 1);\n        if (methodFlag == 1) {\n          methodFlag = 0;\n          return String.format(\"(CASE WHEN (%s LIKE '%%%s%%') THEN TRUE ELSE FALSE END)\", second, first);\n        }\n        else {\n          return String.format(\"(CASE WHEN (%s LIKE '%%%s%%') THEN TRUE ELSE FALSE END) = true\", second, first);\n        }\n      case TOLOWER:\n        return String.format(\"LOWER(%s)\", first);\n      default:\n        throw new ODataNotImplementedException();\n      }\n\n    default:\n      throw new ODataNotImplementedException();\n    }\n  }", "signature": "String parseToJPAWhereExpression(final CommonExpression whereExpression, final String tableAlias)", "full_signature": "public static String parseToJPAWhereExpression(final CommonExpression whereExpression, final String tableAlias)", "class_method_signature": "ODataExpressionParser.parseToJPAWhereExpression(final CommonExpression whereExpression, final String tableAlias)", "testcase": false, "constructor": false, "invocations": ["getKind", "parseToJPAWhereExpression", "getOperand", "getOperator", "startsWith", "substring", "parseToJPAWhereExpression", "getExpression", "getKind", "getLeftOperand", "getOperator", "getOperator", "getMethod", "getLeftOperand", "parseToJPAWhereExpression", "getLeftOperand", "parseToJPAWhereExpression", "getRightOperand", "getOperator", "getInternalName", "getMapping", "getEdmProperty", "getKind", "getInternalName", "getMapping", "getEdmProperty", "getProperty", "getPath", "getInternalName", "getMapping", "getEdmProperty", "getEdmType", "valueToString", "valueOfString", "getUriLiteral", "getDefaultType", "evaluateComparingExpression", "parseToJPAWhereExpression", "get", "getParameters", "getParameterCount", "parseToJPAWhereExpression", "get", "getParameters", "getParameterCount", "parseToJPAWhereExpression", "get", "getParameters", "getMethod", "format", "substring", "length", "format", "format", "format"]}, "repository": {"repo_id": 9327416, "url": "https://github.com/SAP/cloud-odata-java", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 45, "size": 20455, "license": "licensed"}}