{"test_class": {"identifier": "EdmxProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "odata-core/src/test/java/com/sap/core/odata/core/edm/parser/EdmxProviderTest.java"}, "test_case": {"identifier": "testEntityType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEntityType() throws EntityProviderException, ODataException, XMLStreamException {\n    Edm edm = createEdm();\n\n    assertNotNull(edm);\n    FullQualifiedName fqNameEmployee = new FullQualifiedName(\"RefScenario\", \"Employee\");\n    EdmProvider testProvider = new EdmTestProvider();\n    EdmImplProv edmImpl = (EdmImplProv) edm;\n    EntityType employee = edmImpl.getEdmProvider().getEntityType(fqNameEmployee);\n    EntityType testEmployee = testProvider.getEntityType(fqNameEmployee);\n    assertEquals(testEmployee.getName(), employee.getName());\n    assertEquals(testEmployee.isHasStream(), employee.isHasStream());\n    assertEquals(testEmployee.getProperties().size(), employee.getProperties().size());\n    assertEquals(testEmployee.getNavigationProperties().size(), employee.getNavigationProperties().size());\n\n  }", "signature": "void testEntityType()", "full_signature": "@Test public void testEntityType()", "class_method_signature": "EdmxProviderTest.testEntityType()", "testcase": true, "constructor": false, "invocations": ["createEdm", "assertNotNull", "getEntityType", "getEdmProvider", "getEntityType", "assertEquals", "getName", "getName", "assertEquals", "isHasStream", "isHasStream", "assertEquals", "size", "getProperties", "size", "getProperties", "assertEquals", "size", "getNavigationProperties", "size", "getNavigationProperties"]}, "focal_class": {"identifier": "EdmxProvider", "superclass": "extends EdmProvider", "interfaces": "", "fields": [{"original_string": "private DataServices dataServices;", "modifier": "private", "type": "DataServices", "declarator": "dataServices", "var_name": "dataServices"}], "methods": [{"identifier": "parse", "parameters": "(final InputStream in, final boolean validate)", "modifiers": "public", "return": "EdmxProvider", "signature": "EdmxProvider parse(final InputStream in, final boolean validate)", "full_signature": "public EdmxProvider parse(final InputStream in, final boolean validate)", "class_method_signature": "EdmxProvider.parse(final InputStream in, final boolean validate)", "testcase": false, "constructor": false}, {"identifier": "getEntityContainerInfo", "parameters": "(final String name)", "modifiers": "@Override public", "return": "EntityContainerInfo", "signature": "EntityContainerInfo getEntityContainerInfo(final String name)", "full_signature": "@Override public EntityContainerInfo getEntityContainerInfo(final String name)", "class_method_signature": "EdmxProvider.getEntityContainerInfo(final String name)", "testcase": false, "constructor": false}, {"identifier": "getEntityType", "parameters": "(final FullQualifiedName edmFQName)", "modifiers": "@Override public", "return": "EntityType", "signature": "EntityType getEntityType(final FullQualifiedName edmFQName)", "full_signature": "@Override public EntityType getEntityType(final FullQualifiedName edmFQName)", "class_method_signature": "EdmxProvider.getEntityType(final FullQualifiedName edmFQName)", "testcase": false, "constructor": false}, {"identifier": "getComplexType", "parameters": "(final FullQualifiedName edmFQName)", "modifiers": "@Override public", "return": "ComplexType", "signature": "ComplexType getComplexType(final FullQualifiedName edmFQName)", "full_signature": "@Override public ComplexType getComplexType(final FullQualifiedName edmFQName)", "class_method_signature": "EdmxProvider.getComplexType(final FullQualifiedName edmFQName)", "testcase": false, "constructor": false}, {"identifier": "getAssociation", "parameters": "(final FullQualifiedName edmFQName)", "modifiers": "@Override public", "return": "Association", "signature": "Association getAssociation(final FullQualifiedName edmFQName)", "full_signature": "@Override public Association getAssociation(final FullQualifiedName edmFQName)", "class_method_signature": "EdmxProvider.getAssociation(final FullQualifiedName edmFQName)", "testcase": false, "constructor": false}, {"identifier": "getEntitySet", "parameters": "(final String entityContainer, final String name)", "modifiers": "@Override public", "return": "EntitySet", "signature": "EntitySet getEntitySet(final String entityContainer, final String name)", "full_signature": "@Override public EntitySet getEntitySet(final String entityContainer, final String name)", "class_method_signature": "EdmxProvider.getEntitySet(final String entityContainer, final String name)", "testcase": false, "constructor": false}, {"identifier": "getAssociationSet", "parameters": "(final String entityContainer, final FullQualifiedName association, final String sourceEntitySetName, final String sourceEntitySetRole)", "modifiers": "@Override public", "return": "AssociationSet", "signature": "AssociationSet getAssociationSet(final String entityContainer, final FullQualifiedName association, final String sourceEntitySetName, final String sourceEntitySetRole)", "full_signature": "@Override public AssociationSet getAssociationSet(final String entityContainer, final FullQualifiedName association, final String sourceEntitySetName, final String sourceEntitySetRole)", "class_method_signature": "EdmxProvider.getAssociationSet(final String entityContainer, final FullQualifiedName association, final String sourceEntitySetName, final String sourceEntitySetRole)", "testcase": false, "constructor": false}, {"identifier": "getFunctionImport", "parameters": "(final String entityContainer, final String name)", "modifiers": "@Override public", "return": "FunctionImport", "signature": "FunctionImport getFunctionImport(final String entityContainer, final String name)", "full_signature": "@Override public FunctionImport getFunctionImport(final String entityContainer, final String name)", "class_method_signature": "EdmxProvider.getFunctionImport(final String entityContainer, final String name)", "testcase": false, "constructor": false}, {"identifier": "getSchemas", "parameters": "()", "modifiers": "@Override public", "return": "List<Schema>", "signature": "List<Schema> getSchemas()", "full_signature": "@Override public List<Schema> getSchemas()", "class_method_signature": "EdmxProvider.getSchemas()", "testcase": false, "constructor": false}, {"identifier": "createStreamReader", "parameters": "(final InputStream in)", "modifiers": "private", "return": "XMLStreamReader", "signature": "XMLStreamReader createStreamReader(final InputStream in)", "full_signature": "private XMLStreamReader createStreamReader(final InputStream in)", "class_method_signature": "EdmxProvider.createStreamReader(final InputStream in)", "testcase": false, "constructor": false}], "file": "odata-core/src/main/java/com/sap/core/odata/core/edm/parser/EdmxProvider.java"}, "focal_method": {"identifier": "getEntityType", "parameters": "(final FullQualifiedName edmFQName)", "modifiers": "@Override public", "return": "EntityType", "body": "@Override\n  public EntityType getEntityType(final FullQualifiedName edmFQName) throws ODataException {\n    for (Schema schema : dataServices.getSchemas()) {\n      if (schema.getNamespace().equals(edmFQName.getNamespace())) {\n        for (EntityType entityType : schema.getEntityTypes()) {\n          if (entityType.getName().equals(edmFQName.getName())) {\n            return entityType;\n          }\n        }\n      }\n    }\n    return null;\n  }", "signature": "EntityType getEntityType(final FullQualifiedName edmFQName)", "full_signature": "@Override public EntityType getEntityType(final FullQualifiedName edmFQName)", "class_method_signature": "EdmxProvider.getEntityType(final FullQualifiedName edmFQName)", "testcase": false, "constructor": false, "invocations": ["getSchemas", "equals", "getNamespace", "getNamespace", "getEntityTypes", "equals", "getName", "getName"]}, "repository": {"repo_id": 9327416, "url": "https://github.com/SAP/cloud-odata-java", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 45, "size": 20455, "license": "licensed"}}