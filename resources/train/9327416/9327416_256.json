{"test_class": {"identifier": "AcceptParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAB = \"\\t\";", "modifier": "private static final", "type": "String", "declarator": "TAB = \"\\t\"", "var_name": "TAB"}], "file": "odata-core/src/test/java/com/sap/core/odata/core/batch/AcceptParserTest.java"}, "test_case": {"identifier": "testInvalidQualityParameter2", "parameters": "()", "modifiers": "@Test(expected = BatchException.class) public", "return": "void", "body": "@Test(expected = BatchException.class)\n  public void testInvalidQualityParameter2() throws BatchException {\n    AcceptParser.parseAcceptHeaders(\"appication/*, */*;q=1.0001\");\n  }", "signature": "void testInvalidQualityParameter2()", "full_signature": "@Test(expected = BatchException.class) public void testInvalidQualityParameter2()", "class_method_signature": "AcceptParserTest.testInvalidQualityParameter2()", "testcase": true, "constructor": false, "invocations": ["parseAcceptHeaders"]}, "focal_class": {"identifier": "AcceptParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BAD_REQUEST = \"400\";", "modifier": "private static final", "type": "String", "declarator": "BAD_REQUEST = \"400\"", "var_name": "BAD_REQUEST"}, {"original_string": "private static final String ALL = \"*\";", "modifier": "private static final", "type": "String", "declarator": "ALL = \"*\"", "var_name": "ALL"}, {"original_string": "private static final String REG_EX_QUALITY_FACTOR = \"q=((?:1\\\\.0{0,3})|(?:0\\\\.[0-9]{0,2}[1-9]))\";", "modifier": "private static final", "type": "String", "declarator": "REG_EX_QUALITY_FACTOR = \"q=((?:1\\\\.0{0,3})|(?:0\\\\.[0-9]{0,2}[1-9]))\"", "var_name": "REG_EX_QUALITY_FACTOR"}, {"original_string": "private static final String REG_EX_OPTIONAL_WHITESPACE = \"\\\\s?\";", "modifier": "private static final", "type": "String", "declarator": "REG_EX_OPTIONAL_WHITESPACE = \"\\\\s?\"", "var_name": "REG_EX_OPTIONAL_WHITESPACE"}, {"original_string": "private static final Pattern REG_EX_ACCEPT = Pattern.compile(\"([a-z\\\\*]+/[a-z0-9\\\\+\\\\*\\\\-=;\\\\s]+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "REG_EX_ACCEPT = Pattern.compile(\"([a-z\\\\*]+/[a-z0-9\\\\+\\\\*\\\\-=;\\\\s]+)\")", "var_name": "REG_EX_ACCEPT"}, {"original_string": "private static final Pattern REG_EX_ACCEPT_WITH_Q_FACTOR = Pattern.compile(REG_EX_ACCEPT + \"(?:;\" + REG_EX_OPTIONAL_WHITESPACE + REG_EX_QUALITY_FACTOR + \")?\");", "modifier": "private static final", "type": "Pattern", "declarator": "REG_EX_ACCEPT_WITH_Q_FACTOR = Pattern.compile(REG_EX_ACCEPT + \"(?:;\" + REG_EX_OPTIONAL_WHITESPACE + REG_EX_QUALITY_FACTOR + \")?\")", "var_name": "REG_EX_ACCEPT_WITH_Q_FACTOR"}, {"original_string": "private static final Pattern REG_EX_ACCEPT_LANGUAGES = Pattern.compile(\"((?:(?:[a-z]{1,8})|(?:\\\\*))\\\\-?(?:[a-zA-Z]{1,8})?)\");", "modifier": "private static final", "type": "Pattern", "declarator": "REG_EX_ACCEPT_LANGUAGES = Pattern.compile(\"((?:(?:[a-z]{1,8})|(?:\\\\*))\\\\-?(?:[a-zA-Z]{1,8})?)\")", "var_name": "REG_EX_ACCEPT_LANGUAGES"}, {"original_string": "private static final Pattern REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR = Pattern.compile(REG_EX_ACCEPT_LANGUAGES + \"(?:;\" + REG_EX_OPTIONAL_WHITESPACE + REG_EX_QUALITY_FACTOR + \")?\");", "modifier": "private static final", "type": "Pattern", "declarator": "REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR = Pattern.compile(REG_EX_ACCEPT_LANGUAGES + \"(?:;\" + REG_EX_OPTIONAL_WHITESPACE + REG_EX_QUALITY_FACTOR + \")?\")", "var_name": "REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR"}, {"original_string": "private static final double QUALITY_PARAM_FACTOR = 0.001;", "modifier": "private static final", "type": "double", "declarator": "QUALITY_PARAM_FACTOR = 0.001", "var_name": "QUALITY_PARAM_FACTOR"}], "methods": [{"identifier": "parseAcceptHeaders", "parameters": "(final String headerValue)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> parseAcceptHeaders(final String headerValue)", "full_signature": "public static List<String> parseAcceptHeaders(final String headerValue)", "class_method_signature": "AcceptParser.parseAcceptHeaders(final String headerValue)", "testcase": false, "constructor": false}, {"identifier": "getQualityFactor", "parameters": "(final String acceptHeaderValue, double qualityFactor)", "modifiers": "private static", "return": "double", "signature": "double getQualityFactor(final String acceptHeaderValue, double qualityFactor)", "full_signature": "private static double getQualityFactor(final String acceptHeaderValue, double qualityFactor)", "class_method_signature": "AcceptParser.getQualityFactor(final String acceptHeaderValue, double qualityFactor)", "testcase": false, "constructor": false}, {"identifier": "parseAcceptableLanguages", "parameters": "(final String headerValue)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> parseAcceptableLanguages(final String headerValue)", "full_signature": "public static List<String> parseAcceptableLanguages(final String headerValue)", "class_method_signature": "AcceptParser.parseAcceptableLanguages(final String headerValue)", "testcase": false, "constructor": false}, {"identifier": "getAcceptTree", "parameters": "()", "modifiers": "private static", "return": "TreeSet<Accept>", "signature": "TreeSet<Accept> getAcceptTree()", "full_signature": "private static TreeSet<Accept> getAcceptTree()", "class_method_signature": "AcceptParser.getAcceptTree()", "testcase": false, "constructor": false}], "file": "odata-core/src/main/java/com/sap/core/odata/core/batch/AcceptParser.java"}, "focal_method": {"identifier": "parseAcceptHeaders", "parameters": "(final String headerValue)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> parseAcceptHeaders(final String headerValue) throws BatchException {\n    TreeSet<Accept> acceptTree = getAcceptTree();\n    List<String> acceptHeaders = new ArrayList<String>();\n    Scanner acceptHeaderScanner = new Scanner(headerValue).useDelimiter(\",\\\\s?\");\n    while (acceptHeaderScanner.hasNext()) {\n      if (acceptHeaderScanner.hasNext(REG_EX_ACCEPT_WITH_Q_FACTOR)) {\n        acceptHeaderScanner.next(REG_EX_ACCEPT_WITH_Q_FACTOR);\n        MatchResult result = acceptHeaderScanner.match();\n        if (result.groupCount() == 2) {\n          String acceptHeaderValue = result.group(1);\n          double qualityFactor = result.group(2) != null ? Double.parseDouble(result.group(2)) : 1d;\n          qualityFactor = getQualityFactor(acceptHeaderValue, qualityFactor);\n          Accept acceptHeader = new Accept().setQuality(qualityFactor).setValue(acceptHeaderValue);\n          acceptTree.add(acceptHeader);\n        } else {\n          String header = acceptHeaderScanner.next();\n          acceptHeaderScanner.close();\n          throw new BatchException(BatchException.INVALID_ACCEPT_HEADER.addContent(header), BAD_REQUEST);\n        }\n      } else {\n        String header = acceptHeaderScanner.next();\n        acceptHeaderScanner.close();\n        throw new BatchException(BatchException.INVALID_ACCEPT_HEADER.addContent(header), BAD_REQUEST);\n      }\n    }\n    for (Accept accept : acceptTree) {\n      acceptHeaders.add(accept.getValue());\n    }\n    acceptHeaderScanner.close();\n    return acceptHeaders;\n  }", "signature": "List<String> parseAcceptHeaders(final String headerValue)", "full_signature": "public static List<String> parseAcceptHeaders(final String headerValue)", "class_method_signature": "AcceptParser.parseAcceptHeaders(final String headerValue)", "testcase": false, "constructor": false, "invocations": ["getAcceptTree", "useDelimiter", "hasNext", "hasNext", "next", "match", "groupCount", "group", "group", "parseDouble", "group", "getQualityFactor", "setValue", "setQuality", "add", "next", "close", "addContent", "next", "close", "addContent", "add", "getValue", "close"]}, "repository": {"repo_id": 9327416, "url": "https://github.com/SAP/cloud-odata-java", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 45, "size": 20455, "license": "licensed"}}