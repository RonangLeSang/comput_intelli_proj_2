{"test_class": {"identifier": "DecoratorHelperTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "core/src/test/java/org/trimou/handlebars/DecoratorHelperTest.java"}, "test_case": {"identifier": "testHelper", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testHelper() {\n        final MustacheEngine engine = MustacheEngineBuilder.newBuilder()\n                .registerHelper(\"decorateCat\", decorate(Cat.class).put(\"const\", \"Cat\")\n                        // This overrides and delegates to Cat#getName()\n                        .compute(\"name\", cat -> cat.getName().toUpperCase())\n                        .compute(\"overweight\", (cat) -> cat.getWeight() > 4500 ? cat.getWeight() - 4500 : 0).build())\n                .registerHelper(\"decorateIntList\", decorate(List.class)\n                        .compute(\"sum\", l -> l.stream().mapToInt(e -> Integer.valueOf(e.toString())).sum()).build())\n                .registerHelper(\"dummy\",\n                        decorate(String.class).delegateKey(\"foo\").compute(\"toUpperCase\", s -> s.toLowerCase()).build())\n                .registerHelper(\"decorateStr\", decorate(String.class)\n                        .compute(\"reverse\", s -> new StringBuilder(s).reverse().toString()).build())\n                .build();\n\n        // javadoc example\n        assertEquals(\"ooF\", engine.compileMustache(\"{{#decorateStr}}{{reverse}}{{/decorateStr}}\").render(\"Foo\"));\n\n        List<Cat> cats = new ArrayList<>();\n        cats.add(new Cat(\"Mikes\", 3000));\n        cats.add(new Cat(\"Mourek\", 5000));\n        assertEquals(\"Cat MIKES [3000g] has overweight 0g.Cat MOUREK [5000g] has overweight 500g.\",\n                engine.compileMustache(\n                        \"{{#each}}{{#decorateCat}}{{const}} {{name}} [{{weight}}g] has overweight {{overweight}}g.{{/decorateCat}}{{/each}}\")\n                        .render(cats));\n\n        // Test wrong type\n        try {\n            engine.compileMustache(\"{{#decorateCat}}{{name}}{{/decorateCat}}\").render(\"foo\");\n            fail();\n        } catch (IllegalStateException expected) {\n        }\n\n        // Test iterable decorator\n        assertEquals(\"6:123\",\n                engine.compileMustache(\"{{#decorateIntList}}{{sum}}:{{#each}}{{.}}{{/each}}{{/decorateIntList}}\")\n                        .render(Arrays.asList(1, 2, 3)));\n\n        // Test delegate key\n        assertEquals(\"lu vs LU\",\n                engine.compileMustache(\"{{#dummy}}{{toUpperCase}} vs {{foo.toUpperCase}}{{/dummy}}\").render(\"Lu\"));\n    }", "signature": "void testHelper()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testHelper()", "class_method_signature": "DecoratorHelperTest.testHelper()", "testcase": true, "constructor": false, "invocations": ["build", "registerHelper", "registerHelper", "registerHelper", "registerHelper", "newBuilder", "build", "compute", "compute", "put", "decorate", "toUpperCase", "getName", "getWeight", "getWeight", "build", "compute", "decorate", "sum", "mapToInt", "stream", "valueOf", "toString", "build", "compute", "delegateKey", "decorate", "toLowerCase", "build", "compute", "decorate", "toString", "reverse", "assertEquals", "render", "compileMustache", "add", "add", "assertEquals", "render", "compileMustache", "render", "compileMustache", "fail", "assertEquals", "render", "compileMustache", "asList", "assertEquals", "render", "compileMustache"]}, "focal_class": {"identifier": "DecoratorHelper", "superclass": "extends BasicSectionHelper", "interfaces": "", "fields": [{"original_string": "private final String delegateKey;", "modifier": "private final", "type": "String", "declarator": "delegateKey", "var_name": "delegateKey"}, {"original_string": "private final Predicate<Object> test;", "modifier": "private final", "type": "Predicate<Object>", "declarator": "test", "var_name": "test"}, {"original_string": "private final Map<String, Function<T, Object>> mappings;", "modifier": "private final", "type": "Map<String, Function<T, Object>>", "declarator": "mappings", "var_name": "mappings"}], "methods": [{"identifier": "decorate", "parameters": "(Class<T> delegateType)", "modifiers": "public static", "return": "Builder<T>", "signature": "Builder<T> decorate(Class<T> delegateType)", "full_signature": "public static Builder<T> decorate(Class<T> delegateType)", "class_method_signature": "DecoratorHelper.decorate(Class<T> delegateType)", "testcase": false, "constructor": false}, {"identifier": "decorate", "parameters": "(Predicate<Object> test)", "modifiers": "public static", "return": "Builder<T>", "signature": "Builder<T> decorate(Predicate<Object> test)", "full_signature": "public static Builder<T> decorate(Predicate<Object> test)", "class_method_signature": "DecoratorHelper.decorate(Predicate<Object> test)", "testcase": false, "constructor": false}, {"identifier": "DecoratorHelper", "parameters": "(Predicate<Object> test, Map<String, Function<T, Object>> mappings, String delegateKey)", "modifiers": "private", "return": "", "signature": " DecoratorHelper(Predicate<Object> test, Map<String, Function<T, Object>> mappings, String delegateKey)", "full_signature": "private  DecoratorHelper(Predicate<Object> test, Map<String, Function<T, Object>> mappings, String delegateKey)", "class_method_signature": "DecoratorHelper.DecoratorHelper(Predicate<Object> test, Map<String, Function<T, Object>> mappings, String delegateKey)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Options options)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void execute(Options options)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void execute(Options options)", "class_method_signature": "DecoratorHelper.execute(Options options)", "testcase": false, "constructor": false}, {"identifier": "numberOfRequiredParameters", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int numberOfRequiredParameters()", "full_signature": "@Override protected int numberOfRequiredParameters()", "class_method_signature": "DecoratorHelper.numberOfRequiredParameters()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/trimou/handlebars/DecoratorHelper.java"}, "focal_method": {"identifier": "decorate", "parameters": "(Class<T> delegateType)", "modifiers": "public static", "return": "Builder<T>", "body": "public static <T> Builder<T> decorate(Class<T> delegateType) {\n        return new Builder<>(o -> delegateType.isAssignableFrom(o.getClass()));\n    }", "signature": "Builder<T> decorate(Class<T> delegateType)", "full_signature": "public static Builder<T> decorate(Class<T> delegateType)", "class_method_signature": "DecoratorHelper.decorate(Class<T> delegateType)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getClass"]}, "repository": {"repo_id": 10064418, "url": "https://github.com/trimou/trimou", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 66, "size": 2384, "license": "licensed"}}