{"test_class": {"identifier": "GenbankTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NEWLINE = System.lineSeparator();", "modifier": "private static final", "type": "String", "declarator": "NEWLINE = System.lineSeparator()", "var_name": "NEWLINE"}], "file": "core2/src/test/java/org/sbolstandard/core2/GenbankTest.java"}, "test_case": {"identifier": "testParseMultilineLabelContainsSOTerm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParseMultilineLabelContainsSOTerm() {\n\t\tString genbank = \n\t\t\t\t\"LOCUS       simple                    56 bp    DNA     circular      29-MAR-2016\" + NEWLINE +\n\t\t\t\t\"FEATURES             Location/Qualifiers                        \" + NEWLINE +\n\t\t\t\t\"     CDS             1..56                                      \" + NEWLINE +\n\t\t\t\t\"                     /note=\\\"this is a very interesting and yet not studied \" + NEWLINE +\n\t\t\t\t\"                     gene since it does not start with a typical start codon \" + NEWLINE +\n\t\t\t\t\"                     and its length is not a multiple of 3\\\"\" + NEWLINE +\n\t\t\t\t\"ORIGIN\"+ NEWLINE +\n\t\t\t\t\"         1 CGTGGAAACC GTTCGAGAGC AAAAATCATA GTGGAATAAC ATTTAGTCTT GATAGT\" + NEWLINE +\n\t\t\t\t\"//\";\t\t\n\t\t\n\t\ttry (\n\t\t\t\tBufferedInputStream bis =\n\t\t\t\t\tnew BufferedInputStream(new ByteArrayInputStream(genbank.getBytes()));\n\t\t\t) {\n\t\t\t\n\t\t\tSBOLReader.setURIPrefix(\"http://synbio.jgi.doe.gov/\");\n\t\t\t\n\t\t\tSBOLDocument doc = SBOLReader.read(bis);\n\t\t\t\n\t\t\t// two CDs\n\t\t\tassertTrue(null != doc.getComponentDefinitions());\n\t\t\t//assertTrue(doc.getComponentDefinitions().size() == 2);\n\t\t\t\t\t// -- one CD for the CDS (\"child\")\n\t\t\t\t\t// -- one CD for the entire sequence (\"parent\")\n\t\t\t\n\t\t\t// two Sequences\n\t\t\tassertTrue(null != doc.getSequences());\n\t\t\t//assertTrue(doc.getSequences().size() == 2);\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tassertTrue(false);\n\t\t}\n\t}", "signature": "void testParseMultilineLabelContainsSOTerm()", "full_signature": "@Test public void testParseMultilineLabelContainsSOTerm()", "class_method_signature": "GenbankTest.testParseMultilineLabelContainsSOTerm()", "testcase": true, "constructor": false, "invocations": ["getBytes", "setURIPrefix", "read", "assertTrue", "getComponentDefinitions", "assertTrue", "getSequences", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "GenBank", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SequenceOntology so = null;", "modifier": "private static", "type": "SequenceOntology", "declarator": "so = null", "var_name": "so"}, {"original_string": "public static final String GBPREFIX = \"genbank\";", "modifier": "public static final", "type": "String", "declarator": "GBPREFIX = \"genbank\"", "var_name": "GBPREFIX"}, {"original_string": "public static final String GBNAMESPACE = \"http://www.ncbi.nlm.nih.gov/genbank#\";", "modifier": "public static final", "type": "String", "declarator": "GBNAMESPACE = \"http://www.ncbi.nlm.nih.gov/genbank#\"", "var_name": "GBNAMESPACE"}, {"original_string": "public static final String LOCUS = \"locus\";", "modifier": "public static final", "type": "String", "declarator": "LOCUS = \"locus\"", "var_name": "LOCUS"}, {"original_string": "public static final String REGION = \"region\";", "modifier": "public static final", "type": "String", "declarator": "REGION = \"region\"", "var_name": "REGION"}, {"original_string": "public static final String MOLECULE = \"molecule\";", "modifier": "public static final", "type": "String", "declarator": "MOLECULE = \"molecule\"", "var_name": "MOLECULE"}, {"original_string": "public static final String TOPOLOGY = \"topology\";", "modifier": "public static final", "type": "String", "declarator": "TOPOLOGY = \"topology\"", "var_name": "TOPOLOGY"}, {"original_string": "public static final String DIVISION = \"division\";", "modifier": "public static final", "type": "String", "declarator": "DIVISION = \"division\"", "var_name": "DIVISION"}, {"original_string": "public static final String DATE = \"date\";", "modifier": "public static final", "type": "String", "declarator": "DATE = \"date\"", "var_name": "DATE"}, {"original_string": "public static final String GINUMBER = \"GInumber\";", "modifier": "public static final", "type": "String", "declarator": "GINUMBER = \"GInumber\"", "var_name": "GINUMBER"}, {"original_string": "public static final String KEYWORDS = \"keywords\";", "modifier": "public static final", "type": "String", "declarator": "KEYWORDS = \"keywords\"", "var_name": "KEYWORDS"}, {"original_string": "public static final String SOURCE = \"source\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE = \"source\"", "var_name": "SOURCE"}, {"original_string": "public static final String ORGANISM = \"organism\";", "modifier": "public static final", "type": "String", "declarator": "ORGANISM = \"organism\"", "var_name": "ORGANISM"}, {"original_string": "public static final String REFERENCE = \"reference\";", "modifier": "public static final", "type": "String", "declarator": "REFERENCE = \"reference\"", "var_name": "REFERENCE"}, {"original_string": "public static final String NESTEDREFERENCE = \"Reference\";", "modifier": "public static final", "type": "String", "declarator": "NESTEDREFERENCE = \"Reference\"", "var_name": "NESTEDREFERENCE"}, {"original_string": "public static final String LABEL = \"label\";", "modifier": "public static final", "type": "String", "declarator": "LABEL = \"label\"", "var_name": "LABEL"}, {"original_string": "public static final String AUTHORS = \"authors\";", "modifier": "public static final", "type": "String", "declarator": "AUTHORS = \"authors\"", "var_name": "AUTHORS"}, {"original_string": "public static final String TITLE = \"title\";", "modifier": "public static final", "type": "String", "declarator": "TITLE = \"title\"", "var_name": "TITLE"}, {"original_string": "public static final String JOURNAL = \"journal\";", "modifier": "public static final", "type": "String", "declarator": "JOURNAL = \"journal\"", "var_name": "JOURNAL"}, {"original_string": "public static final String MEDLINE = \"medline\";", "modifier": "public static final", "type": "String", "declarator": "MEDLINE = \"medline\"", "var_name": "MEDLINE"}, {"original_string": "public static final String PUBMED = \"pubmed\";", "modifier": "public static final", "type": "String", "declarator": "PUBMED = \"pubmed\"", "var_name": "PUBMED"}, {"original_string": "public static final String COMMENT = \"comment\";", "modifier": "public static final", "type": "String", "declarator": "COMMENT = \"comment\"", "var_name": "COMMENT"}, {"original_string": "public static final String BASECOUNT = \"baseCount\";", "modifier": "public static final", "type": "String", "declarator": "BASECOUNT = \"baseCount\"", "var_name": "BASECOUNT"}, {"original_string": "public static final String FEATURETYPE = \"featureType\";", "modifier": "public static final", "type": "String", "declarator": "FEATURETYPE = \"featureType\"", "var_name": "FEATURETYPE"}, {"original_string": "public static final String GBCONVPREFIX = \"gbConv\";", "modifier": "public static final", "type": "String", "declarator": "GBCONVPREFIX = \"gbConv\"", "var_name": "GBCONVPREFIX"}, {"original_string": "public static final String GBCONVNAMESPACE = \"http://sbols.org/genBankConversion#\";", "modifier": "public static final", "type": "String", "declarator": "GBCONVNAMESPACE = \"http://sbols.org/genBankConversion#\"", "var_name": "GBCONVNAMESPACE"}, {"original_string": "public static final String POSITION = \"position\";", "modifier": "public static final", "type": "String", "declarator": "POSITION = \"position\"", "var_name": "POSITION"}, {"original_string": "public static final String STRADLESORIGIN = \"stradlesOrigin\";", "modifier": "public static final", "type": "String", "declarator": "STRADLESORIGIN = \"stradlesOrigin\"", "var_name": "STRADLESORIGIN"}, {"original_string": "public static final String STARTLESSTHAN = \"startLessThan\";", "modifier": "public static final", "type": "String", "declarator": "STARTLESSTHAN = \"startLessThan\"", "var_name": "STARTLESSTHAN"}, {"original_string": "public static final String ENDGREATERTHAN = \"endGreaterThan\";", "modifier": "public static final", "type": "String", "declarator": "ENDGREATERTHAN = \"endGreaterThan\"", "var_name": "ENDGREATERTHAN"}, {"original_string": "public static final String SINGLEBASERANGE = \"singleBaseRange\";", "modifier": "public static final", "type": "String", "declarator": "SINGLEBASERANGE = \"singleBaseRange\"", "var_name": "SINGLEBASERANGE"}, {"original_string": "public static final String MULTIRANGETYPE = \"multiRangeType\";", "modifier": "public static final", "type": "String", "declarator": "MULTIRANGETYPE = \"multiRangeType\"", "var_name": "MULTIRANGETYPE"}, {"original_string": "protected static final Pattern lp = Pattern.compile(\"LOCUS\\\\s+([\\\\S+\\\\s]*)\\\\s+(\\\\d+)\\\\s+(bp|BP|aa|AA)\\\\s{0,4}(([dmsDMS][sS]-)?(\\\\S+))?\\\\s*(circular|CIRCULAR|linear|LINEAR)?\\\\s*(\\\\S+)?\\\\s*(\\\\S+)?$\");", "modifier": "protected static final", "type": "Pattern", "declarator": "lp = Pattern.compile(\"LOCUS\\\\s+([\\\\S+\\\\s]*)\\\\s+(\\\\d+)\\\\s+(bp|BP|aa|AA)\\\\s{0,4}(([dmsDMS][sS]-)?(\\\\S+))?\\\\s*(circular|CIRCULAR|linear|LINEAR)?\\\\s*(\\\\S+)?\\\\s*(\\\\S+)?$\")", "var_name": "lp"}, {"original_string": "private static String nextLine = null;", "modifier": "private static", "type": "String", "declarator": "nextLine = null", "var_name": "nextLine"}, {"original_string": "private static boolean featureMode = false;", "modifier": "private static", "type": "boolean", "declarator": "featureMode = false", "var_name": "featureMode"}, {"original_string": "private static boolean originMode = false;", "modifier": "private static", "type": "boolean", "declarator": "originMode = false", "var_name": "originMode"}], "methods": [{"identifier": "writeGenBankLine", "parameters": "(Writer w, String line, int margin, int indent)", "modifiers": "private static", "return": "void", "signature": "void writeGenBankLine(Writer w, String line, int margin, int indent)", "full_signature": "private static void writeGenBankLine(Writer w, String line, int margin, int indent)", "class_method_signature": "GenBank.writeGenBankLine(Writer w, String line, int margin, int indent)", "testcase": false, "constructor": false}, {"identifier": "writeComponentDefinition", "parameters": "(ComponentDefinition componentDefinition, Writer w)", "modifiers": "private static", "return": "void", "signature": "void writeComponentDefinition(ComponentDefinition componentDefinition, Writer w)", "full_signature": "private static void writeComponentDefinition(ComponentDefinition componentDefinition, Writer w)", "class_method_signature": "GenBank.writeComponentDefinition(ComponentDefinition componentDefinition, Writer w)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(ComponentDefinition componentDefinition, Writer w)", "modifiers": "private static", "return": "void", "signature": "void write(ComponentDefinition componentDefinition, Writer w)", "full_signature": "private static void write(ComponentDefinition componentDefinition, Writer w)", "class_method_signature": "GenBank.write(ComponentDefinition componentDefinition, Writer w)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(SBOLDocument sbolDocument, OutputStream out)", "modifiers": "static", "return": "void", "signature": "void write(SBOLDocument sbolDocument, OutputStream out)", "full_signature": "static void write(SBOLDocument sbolDocument, OutputStream out)", "class_method_signature": "GenBank.write(SBOLDocument sbolDocument, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "convertSOtoGenBank", "parameters": "(String soTerm)", "modifiers": "private static", "return": "String", "signature": "String convertSOtoGenBank(String soTerm)", "full_signature": "private static String convertSOtoGenBank(String soTerm)", "class_method_signature": "GenBank.convertSOtoGenBank(String soTerm)", "testcase": false, "constructor": false}, {"identifier": "convertGenBanktoSO", "parameters": "(String genBankTerm)", "modifiers": "private static", "return": "URI", "signature": "URI convertGenBanktoSO(String genBankTerm)", "full_signature": "private static URI convertGenBanktoSO(String genBankTerm)", "class_method_signature": "GenBank.convertGenBanktoSO(String genBankTerm)", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(Writer w,ComponentDefinition componentDefinition,int size)", "modifiers": "private static", "return": "void", "signature": "void writeHeader(Writer w,ComponentDefinition componentDefinition,int size)", "full_signature": "private static void writeHeader(Writer w,ComponentDefinition componentDefinition,int size)", "class_method_signature": "GenBank.writeHeader(Writer w,ComponentDefinition componentDefinition,int size)", "testcase": false, "constructor": false}, {"identifier": "writeReferences", "parameters": "(Writer w,ComponentDefinition componentDefinition)", "modifiers": "private static", "return": "void", "signature": "void writeReferences(Writer w,ComponentDefinition componentDefinition)", "full_signature": "private static void writeReferences(Writer w,ComponentDefinition componentDefinition)", "class_method_signature": "GenBank.writeReferences(Writer w,ComponentDefinition componentDefinition)", "testcase": false, "constructor": false}, {"identifier": "writeComment", "parameters": "(Writer w,ComponentDefinition componentDefinition)", "modifiers": "private static", "return": "void", "signature": "void writeComment(Writer w,ComponentDefinition componentDefinition)", "full_signature": "private static void writeComment(Writer w,ComponentDefinition componentDefinition)", "class_method_signature": "GenBank.writeComment(Writer w,ComponentDefinition componentDefinition)", "testcase": false, "constructor": false}, {"identifier": "locationStr", "parameters": "(Location location,int offset,boolean complement,Location location2)", "modifiers": "private static", "return": "String", "signature": "String locationStr(Location location,int offset,boolean complement,Location location2)", "full_signature": "private static String locationStr(Location location,int offset,boolean complement,Location location2)", "class_method_signature": "GenBank.locationStr(Location location,int offset,boolean complement,Location location2)", "testcase": false, "constructor": false}, {"identifier": "stradlesOrigin", "parameters": "(SequenceAnnotation sa)", "modifiers": "private static", "return": "boolean", "signature": "boolean stradlesOrigin(SequenceAnnotation sa)", "full_signature": "private static boolean stradlesOrigin(SequenceAnnotation sa)", "class_method_signature": "GenBank.stradlesOrigin(SequenceAnnotation sa)", "testcase": false, "constructor": false}, {"identifier": "writeFeature", "parameters": "(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline)", "modifiers": "private static", "return": "void", "signature": "void writeFeature(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline)", "full_signature": "private static void writeFeature(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline)", "class_method_signature": "GenBank.writeFeature(Writer w,SequenceAnnotation sa,String role,int offset,boolean inline)", "testcase": false, "constructor": false}, {"identifier": "writeSequence", "parameters": "(Writer w,Sequence sequence,int size)", "modifiers": "private static", "return": "void", "signature": "void writeSequence(Writer w,Sequence sequence,int size)", "full_signature": "private static void writeSequence(Writer w,Sequence sequence,int size)", "class_method_signature": "GenBank.writeSequence(Writer w,Sequence sequence,int size)", "testcase": false, "constructor": false}, {"identifier": "getFeatureStart", "parameters": "(SequenceAnnotation sa)", "modifiers": "static", "return": "int", "signature": "int getFeatureStart(SequenceAnnotation sa)", "full_signature": "static int getFeatureStart(SequenceAnnotation sa)", "class_method_signature": "GenBank.getFeatureStart(SequenceAnnotation sa)", "testcase": false, "constructor": false}, {"identifier": "getFeatureEnd", "parameters": "(SequenceAnnotation sa)", "modifiers": "static", "return": "int", "signature": "int getFeatureEnd(SequenceAnnotation sa)", "full_signature": "static int getFeatureEnd(SequenceAnnotation sa)", "class_method_signature": "GenBank.getFeatureEnd(SequenceAnnotation sa)", "testcase": false, "constructor": false}, {"identifier": "isInlineFeature", "parameters": "(SequenceAnnotation sa)", "modifiers": "static", "return": "boolean", "signature": "boolean isInlineFeature(SequenceAnnotation sa)", "full_signature": "static boolean isInlineFeature(SequenceAnnotation sa)", "class_method_signature": "GenBank.isInlineFeature(SequenceAnnotation sa)", "testcase": false, "constructor": false}, {"identifier": "recurseComponentDefinition", "parameters": "(ComponentDefinition componentDefinition, Writer w, int offset,\n\t\t\tboolean inline, int featureEnd)", "modifiers": "private static", "return": "void", "signature": "void recurseComponentDefinition(ComponentDefinition componentDefinition, Writer w, int offset,\n\t\t\tboolean inline, int featureEnd)", "full_signature": "private static void recurseComponentDefinition(ComponentDefinition componentDefinition, Writer w, int offset,\n\t\t\tboolean inline, int featureEnd)", "class_method_signature": "GenBank.recurseComponentDefinition(ComponentDefinition componentDefinition, Writer w, int offset,\n\t\t\tboolean inline, int featureEnd)", "testcase": false, "constructor": false}, {"identifier": "readGenBankLine", "parameters": "(BufferedReader br)", "modifiers": "private static", "return": "String", "signature": "String readGenBankLine(BufferedReader br)", "full_signature": "private static String readGenBankLine(BufferedReader br)", "class_method_signature": "GenBank.readGenBankLine(BufferedReader br)", "testcase": false, "constructor": false}, {"identifier": "createSubComponentDefinitions", "parameters": "(SBOLDocument doc,ComponentDefinition topCD,URI type,String elements,String version)", "modifiers": "private static", "return": "void", "signature": "void createSubComponentDefinitions(SBOLDocument doc,ComponentDefinition topCD,URI type,String elements,String version)", "full_signature": "private static void createSubComponentDefinitions(SBOLDocument doc,ComponentDefinition topCD,URI type,String elements,String version)", "class_method_signature": "GenBank.createSubComponentDefinitions(SBOLDocument doc,ComponentDefinition topCD,URI type,String elements,String version)", "testcase": false, "constructor": false}, {"identifier": "fixTag", "parameters": "(String tag)", "modifiers": "private static", "return": "String", "signature": "String fixTag(String tag)", "full_signature": "private static String fixTag(String tag)", "class_method_signature": "GenBank.fixTag(String tag)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "modifiers": "static", "return": "void", "signature": "void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "full_signature": "static void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "class_method_signature": "GenBank.read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "testcase": false, "constructor": false}], "file": "core2/src/main/java/org/sbolstandard/core2/GenBank.java"}, "focal_method": {"identifier": "read", "parameters": "(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "modifiers": "static", "return": "void", "body": "static void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion) throws IOException, SBOLConversionException, SBOLValidationException {\n\t\tso = new SequenceOntology();\n\n\t\t// reset the global static variables needed for parsing\n\t\t//lineCounter = 0;\n\n\t\tdoc.addNamespace(URI.create(GBNAMESPACE), GBPREFIX);\n\t\tdoc.addNamespace(URI.create(GBCONVNAMESPACE), GBCONVPREFIX);\n\t\tBufferedReader br = new BufferedReader(new StringReader(stringBuffer));\n\t\tString strLine;\n\t\tint featureCnt = 0;\n\t\tint refCnt = 0;\n\t\tnextLine = null;\n\t\tString labelType = \"\";\n\t\tURI lastRole = null;\n\t\twhile (true) {\n\t\t\tboolean cont = false;\n\t\t\tString id = displayId;\n\t\t\tString accession = \"\";\n\t\t\tString version = defaultVersion;\n\t\t\tfeatureMode = false;\n\t\t\toriginMode = false;\n\t\t\tStringBuilder sbSequence = new StringBuilder();\n\t\t\tString elements = null;\n\t\t\tString description = \"\";\n\t\t\tString comment = \"\";\n\t\t\tURI type = ComponentDefinition.DNA_REGION;\n\t\t\tComponentDefinition topCD = null;\n\t\t\tList<Annotation> annotations = new ArrayList<Annotation>();\n\t\t\tList<Annotation> nestedAnnotations = null;\n\t\t\tAnnotation annotation = null;\n\t\t\tboolean circular = false;\n\t\t\tint baseCount = 0;\n\t\t\twhile ((strLine = readGenBankLine(br)) != null)   {\n\t\t\t\tstrLine = strLine.trim();\n\t\t\t\t// LOCUS line\n\t\t\t\t// Example:\n\t\t\t\t// LOCUS       AF123456                1510 bp    mRNA    linear   VRT 12-APR-2012\n\t\t\t\tif (strLine.startsWith(\"LOCUS\")) {\n\t\t\t\t\tMatcher m = lp.matcher(strLine.trim());\n\t\t\t\t\tif (m.matches()) {\n//\t\t\t\t\t\tSystem.out.println(strLine);\n//\t\t\t\t\t\tSystem.out.println(\"1 = \" + m.group(1));\n//\t\t\t\t\t\tSystem.out.println(\"2 = \" + m.group(2));\n//\t\t\t\t\t\tSystem.out.println(\"3 = \" + m.group(3));\n//\t\t\t\t\t\tSystem.out.println(\"4 = \" + m.group(4));\n//\t\t\t\t\t\tSystem.out.println(\"5 = \" + m.group(5));\n//\t\t\t\t\t\tSystem.out.println(\"6 = \" + m.group(6));\n//\t\t\t\t\t\tSystem.out.println(\"7 = \" + m.group(7));\n//\t\t\t\t\t\tSystem.out.println(\"8 = \" + m.group(8));\n//\t\t\t\t\t\tSystem.out.println(\"9 = \" + m.group(9));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(strLine.trim());\n\t\t\t\t\t\tthrow new SBOLConversionException(\"Error: bad locus line\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// ID of the sequence\n\t\t\t\t\tif (id == null || id.equals(\"\")) {\n\t\t\t\t\t\tid = m.group(1).trim();\n\t\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE, LOCUS, GBPREFIX), id);\n\t\t\t\t\t\tid = URIcompliance.fixDisplayId(id);\n\t\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t\t} \n\t\t\t\t\t\n\t\t\t\t\t// Base count of the sequence\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbaseCount = Integer.parseInt(m.group(2));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\tthrow new SBOLConversionException(\"Error: bad sequence length\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t// type of sequence\n\t\t\t\t\tString seqType = m.group(4);\n\t\t\t\t\tif (seqType.toUpperCase().contains(\"RNA\")) {\n\t\t\t\t\t\ttype = ComponentDefinition.RNA_REGION;\n\t\t\t\t\t}\n\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE, MOLECULE, GBPREFIX), seqType);\n\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t\t\n\t\t\t\t\tString topology = m.group(7);\n\n\t\t\t\t\t// linear vs. circular construct\n\t\t\t\t\tif (topology != null) {\n\t\t\t\t\t\tif (topology.startsWith(\"linear\") || topology.startsWith(\"circular\")) {\n\t\t\t\t\t\t\tif (topology.startsWith(\"circular\")) circular = true;\n\t\t\t\t\t\t\t//annotation = new Annotation(new QName(GBNAMESPACE, TOPOLOGY, GBPREFIX), strSplit[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tString division = null;\n\t\t\t\t\tString date = null;\n\t\t\t\t\tif (m.group(8) != null && m.group(9) != null) {\n\t\t\t\t\t\tdivision = m.group(8);\n\t\t\t\t\t\tdate = m.group(9);\n\t\t\t\t\t} else if (m.group(8) != null) {\n\t\t\t\t\t\tdate = m.group(8);\n\t\t\t\t\t} else if (m.group(9) != null) {\n\t\t\t\t\t\tdate = m.group(9);\n\t\t\t\t\t} \n\t\t\t\t\tif (division != null) {\n\t\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE, DIVISION, GBPREFIX), division);\n\t\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t\t}\n\t\t\t\t\tif (date != null) {\n\t\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE, DATE, GBPREFIX), date);\n\t\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (strLine.startsWith(\"DEFINITION\")) {\n\t\t\t\t\tdescription = strLine.replaceFirst(\"DEFINITION  \", \"\");\n\t\t\t\t} else if (strLine.startsWith(\"ACCESSION\")) {\n\t\t\t\t\tString[] strSplit = strLine.split(\"\\\\s+\");\n\t\t\t\t\tif (strSplit.length > 1) {\n\t\t\t\t\t\taccession = strSplit[1];\n\t\t\t\t\t\tif (accession.length()>1) {\n\t\t\t\t\t\t\tid = accession;\n\t\t\t\t\t\t\tid = URIcompliance.fixDisplayId(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (strSplit.length > 3) {\n\t\t\t\t\t\tif (strSplit[2].equals(\"REGION:\")) {\n\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE, REGION, GBPREFIX), strSplit[3]);\n\t\t\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (strLine.startsWith(\"VERSION\")) {\n\t\t\t\t\tString[] strSplit = strLine.split(\"\\\\s+\");\n\t\t\t\t\t//id = URIcompliance.fixDisplayId(id);\n\t\t\t\t\tif (strSplit.length > 1) {\n\t\t\t\t\t\tif (!accession.equals(strSplit[1])) {\n\t\t\t\t\t\t\tif (strSplit[1].split(\"\\\\.\").length > 1) {\n\t\t\t\t\t\t\t\tversion = strSplit[1].split(\"\\\\.\")[strSplit[1].split(\"\\\\.\").length-1];\n\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\tif (strSplit[1].split(\"\\\\.\").length > 0) {\n\t\t\t\t\t\t\t\tString vId = strSplit[1].split(\"\\\\.\")[0];\n\t\t\t\t\t\t\t\tif (!accession.equals(vId)) {\n\t\t\t\t\t\t\t\t\tthrow new SBOLConversionException(\"Warning: id in version does not match id in accession\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//id = id.replaceAll(\"\\\\.\", \"_\");\n\t\t\t\t\tif (strSplit.length > 2) {\n\t\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE,GINUMBER,GBPREFIX),strSplit[2]);\n\t\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t\t}\n\t\t\t\t} else if (strLine.startsWith(\"KEYWORDS\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"KEYWORDS\", \"\").trim();\n\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE,KEYWORDS,GBPREFIX), annotationStr);\n\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t} else if (strLine.startsWith(\"SOURCE\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"SOURCE\", \"\").trim();\n\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE,SOURCE,GBPREFIX), annotationStr);\n\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t} else if (strLine.startsWith(\"ORGANISM\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"ORGANISM\", \"\").trim();\n\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE,ORGANISM,GBPREFIX), annotationStr);\n\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t} else if (strLine.startsWith(\"REFERENCE\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"REFERENCE\", \"\").trim();\n\t\t\t\t\tnestedAnnotations = new ArrayList<Annotation>();\n\t\t\t\t\tAnnotation labelAnnotation = new Annotation(new QName(GBNAMESPACE,LABEL,GBPREFIX), annotationStr);\n\t\t\t\t\tnestedAnnotations.add(labelAnnotation);\n\t\t\t\t\tURI nestedURI = URI.create(URIPrefix+id+\"/reference\"+refCnt);\n\t\t\t\t\trefCnt++;\n\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE,REFERENCE,GBPREFIX),\n\t\t\t\t\t\t\tnew QName(GBNAMESPACE,NESTEDREFERENCE,GBPREFIX),nestedURI,nestedAnnotations);\n\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t} else if (strLine.startsWith(\"AUTHORS\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"AUTHORS\", \"\").trim();\n\t\t\t\t\tAnnotation nestedAnnotation = new Annotation(new QName(GBNAMESPACE,AUTHORS,GBPREFIX), annotationStr);\n\t\t\t\t\tnestedAnnotations.add(nestedAnnotation);\n\t\t\t\t\tannotation.setAnnotations(nestedAnnotations);\n\t\t\t\t} else if (strLine.startsWith(\"TITLE\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"TITLE\", \"\").trim();\n\t\t\t\t\tAnnotation nestedAnnotation = new Annotation(new QName(GBNAMESPACE,TITLE,GBPREFIX), annotationStr);\n\t\t\t\t\tnestedAnnotations.add(nestedAnnotation);\n\t\t\t\t\tannotation.setAnnotations(nestedAnnotations);\n\t\t\t\t} else if (strLine.startsWith(\"JOURNAL\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"JOURNAL\", \"\").trim();\n\t\t\t\t\tAnnotation nestedAnnotation = new Annotation(new QName(GBNAMESPACE,JOURNAL,GBPREFIX), annotationStr);\n\t\t\t\t\tnestedAnnotations.add(nestedAnnotation);\n\t\t\t\t\tannotation.setAnnotations(nestedAnnotations);\n\t\t\t\t} else if (strLine.startsWith(\"MEDLINE\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"MEDLINE\", \"\").trim();\n\t\t\t\t\tAnnotation nestedAnnotation = new Annotation(new QName(GBNAMESPACE,MEDLINE,GBPREFIX), annotationStr);\n\t\t\t\t\tnestedAnnotations.add(nestedAnnotation);\n\t\t\t\t\tannotation.setAnnotations(nestedAnnotations);\n\t\t\t\t} else if (strLine.startsWith(\"PUBMED\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"PUBMED\", \"\").trim();\n\t\t\t\t\tAnnotation nestedAnnotation = new Annotation(new QName(GBNAMESPACE,PUBMED,GBPREFIX), annotationStr);\n\t\t\t\t\tnestedAnnotations.add(nestedAnnotation);\n\t\t\t\t\tannotation.setAnnotations(nestedAnnotations);\n\t\t\t\t\tAnnotation pubMedAnnotation = new Annotation(new QName(\"http://purl.obolibrary.org/obo/\", \"OBI_0001617\", \"obo\"), annotationStr);\n\t\t\t\t\tannotations.add(pubMedAnnotation);\n\t\t\t\t} else if (strLine.startsWith(\"COMMENT\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"COMMENT     \", \"\");\n\t\t\t\t\tif (!comment.equals(\"\")) {\n\t\t\t\t\t\tcomment += \"\\n \";\n\t\t\t\t\t} \n\t\t\t\t\tcomment += annotationStr;\n\t\t\t\t} else if (strLine.startsWith(\"BASE COUNT\")) {\n\t\t\t\t\tString annotationStr = strLine.replace(\"BASE COUNT\", \"\").trim();\n\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE,BASECOUNT,GBPREFIX), annotationStr);\n\t\t\t\t\tannotations.add(annotation);\n\n\t\t\t\t\t// sequence features\n\t\t\t\t} else if (strLine.startsWith(\"FEATURE\")) {\n\t\t\t\t\tif (!comment.equals(\"\")) {\n\t\t\t\t\t\tannotation = new Annotation(new QName(GBNAMESPACE,COMMENT,GBPREFIX), comment);\n\t\t\t\t\t\tannotations.add(annotation);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttopCD = doc.createComponentDefinition(id, version, type);\n\t\t\t\t\tif (circular) {\n\t\t\t\t\t\ttopCD.addType(SequenceOntology.CIRCULAR);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttopCD.addType(SequenceOntology.LINEAR);\n\t\t\t\t\t}\n\t\t\t\t\ttopCD.addRole(SequenceOntology.ENGINEERED_REGION);\n\t\t\t\t\tif (!\"\".equals(description)) {\n\t\t\t\t\t\ttopCD.setDescription(description);\n\t\t\t\t\t}\n\t\t\t\t\ttopCD.setAnnotations(annotations);\n\n\t\t\t\t\t// tell the parser that we're in the \"FEATURE\" section\n\t\t\t\t\tfeatureMode = true;\n\n\t\t\t\t} else if (strLine.startsWith(\"ORIGIN\")) {\n\t\t\t\t\t// switch from feature to origin mode\n\t\t\t\t\toriginMode = true;\n\t\t\t\t\tfeatureMode = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t/*---------------------\n\t\t\t\t\t * FEATURE MODE\n\t\t\t\t\t *---------------------*/\n\t\t\t\t\tif (featureMode) {\n\n\n\t\t\t\t\t\t// parse the labels of a feature\n\t\t\t\t\t\tif (strLine.startsWith(\"/\")) {\n\n\n\t\t\t\t\t\t\t// per default, we assume that every label\n\t\t\t\t\t\t\t// has a key only\n\t\t\t\t\t\t\tString tag = strLine.replace(\"/\",\"\").trim();\n\t\t\t\t\t\t\tString value = \"\";\n\n\t\t\t\t\t\t\t// now, we check if the key has a value too\n\t\t\t\t\t\t\t// i.e. /<key>=<value>\n\t\t\t\t\t\t\tif((-1) != strLine.indexOf('=')) {\n\t\t\t\t\t\t\t\tString[] splitStr = strLine.split(\"=\");\n\t\t\t\t\t\t\t\ttag = splitStr[0].replace(\"/\",\"\");\n\t\t\t\t\t\t\t\tvalue = splitStr[1];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// here, we just read the next lines until we find the closing double-quota\n\t\t\t\t\t\t\tStringBuilder sbValue = new StringBuilder();\n\t\t\t\t\t\t\tsbValue.append(value);\n\n\t\t\t\t\t\t\t// multi-line string value\n\t\t\t\t\t\t\tif(value.startsWith(\"\\\"\") && !value.endsWith(\"\\\"\")) {\n\t\t\t\t\t\t\t\twhile(true) {\n\t\t\t\t\t\t\t\t\tstrLine = readGenBankLine(br).trim();\n\t\t\t\t\t\t\t\t\tsbValue.append(strLine);\n\t\t\t\t\t\t\t\t\tif (value.contains(\" \") || strLine.contains(\" \")) {\n\t\t\t\t\t\t\t\t\t\tvalue += \" \" + strLine;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvalue += strLine;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(strLine.endsWith(\"\\\"\")) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t// a Genbank feature label is mapped to an SBOL SequenceAnnotation\n\t\t\t\t\t\t\tSequenceAnnotation sa = topCD.getSequenceAnnotation(\"annotation\" + (featureCnt - 1));\n\t\t\t\t\t\t\tif(sa != null) {\n\t\t\t\t\t\t\t\tif (tag.equals(\"Apeinfo_label\")) {\n\t\t\t\t\t\t\t\t\tsa.setName(value.replace(\"\\\"\", \"\"));\n\t\t\t\t\t\t\t\t\tlabelType = \"Apeinfo_label\";\n\t\t\t\t\t\t\t\t} else if (tag.equals(\"label\")) {\n\t\t\t\t\t\t\t\t\tif (!labelType.equals(\"Apeinfo_label\")) {\n\t\t\t\t\t\t\t\t\t\tsa.setName(value.replace(\"\\\"\", \"\"));\n\t\t\t\t\t\t\t\t\t\tlabelType = \"label\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (tag.equals(\"product\")) {\n\t\t\t\t\t\t\t\t\tif (!labelType.equals(\"Apeinfo_label\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"label\")) {\n\t\t\t\t\t\t\t\t\t\tsa.setName(value.replace(\"\\\"\", \"\"));\n\t\t\t\t\t\t\t\t\t\tlabelType = \"product\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (tag.equals(\"gene\")) {\n\t\t\t\t\t\t\t\t\tif (!labelType.equals(\"Apeinfo_label\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"label\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"product\")) {\n\t\t\t\t\t\t\t\t\t\tsa.setName(value.replace(\"\\\"\", \"\"));\n\t\t\t\t\t\t\t\t\t\tlabelType = \"gene\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (tag.equals(\"note\")) {\n\t\t\t\t\t\t\t\t\tif (!labelType.equals(\"Apeinfo_label\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"label\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"product\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"gene\")) {\n\t\t\t\t\t\t\t\t\t\tsa.setName(value.replace(\"\\\"\", \"\"));\n\t\t\t\t\t\t\t\t\t\tlabelType = \"note\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (tag.equals(\"organism\")) {\n\t\t\t\t\t\t\t\t\tif (!labelType.equals(\"Apeinfo_label\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"label\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"product\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"gene\")&&\n\t\t\t\t\t\t\t\t\t\t\t!labelType.equals(\"note\")) {\n\t\t\t\t\t\t\t\t\t\tsa.setName(value.replace(\"\\\"\", \"\"));\n\t\t\t\t\t\t\t\t\t\tlabelType = \"organism\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttag = fixTag(tag);\n\t\t\t\t\t\t\t\tif (value.startsWith(\"\\\"\")) {\n\t\t\t\t\t\t\t\t\tvalue = value.replaceAll(\"\\\"\", \"\");\n\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,tag,GBCONVPREFIX),value);\n\t\t\t\t\t\t\t\t\t// TODO: does not work because integer type of annotation is lost on serialization\n\t\t\t\t\t\t\t\t\t//annotation = new Annotation(new QName(GBNAMESPACE,tag,GBPREFIX),Integer.parseInt(value));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsa.addAnnotation(annotation);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// start of a new feature\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstrLine = strLine.replace(\", \",\",\");\n\t\t\t\t\t\t\tString[] strSplit = strLine.split(\"\\\\s+\");\n\t\t\t\t\t\t\tString featureType = strSplit[0];\n\n\t\t\t\t\t\t\t// a Genbank feature is mapped to a SBOL role\n\t\t\t\t\t\t\t// documented by an SO term\n\t\t\t\t\t\t\tURI role = convertGenBanktoSO(featureType);\n//\t\t\t\t\t\t\tComponentDefinition feature =\n//\t\t\t\t\t\t\t\t\tdoc.createComponentDefinition(\"feature\"+featureCnt, version, type);\n//\t\t\t\t\t\t\tfeature.addRole(role);\n\n\t\t\t\t\t\t\tString range = strSplit[1];\n\t\t\t\t\t\t\tboolean outerComplement = false;\n\t\t\t\t\t\t\tOrientationType orientation = OrientationType.INLINE;\n\t\t\t\t\t\t\tif (range.startsWith(\"complement\")) {\n\t\t\t\t\t\t\t\touterComplement = true;\n\t\t\t\t\t\t\t\torientation = OrientationType.REVERSECOMPLEMENT;\n\t\t\t\t\t\t\t\trange = range.replace(\"complement(\", \"\").replace(\")\",\"\");\n\t\t\t\t\t\t\t\tif ((range.startsWith(\"join\")) || (range.startsWith(\"order\"))) range += \")\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (range.startsWith(\"join\")||range.startsWith(\"order\")) {\n\t\t\t\t\t\t\t\tString multiType = \"join\";\n\t\t\t\t\t\t\t\tif (range.startsWith(\"order\")) {\n\t\t\t\t\t\t\t\t\tmultiType = \"order\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twhile (!range.endsWith(\")\")) {\n\t\t\t\t\t\t\t\t\tstrLine = readGenBankLine(br).trim();\n//\t\t\t\t\t\t\t\t\tSystem.out.println(\"Multi:\"+strLine);\n\t\t\t\t\t\t\t\t\trange += strLine;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trange = range.replace(\"join(\", \"\").replace(\")\",\"\");\n\t\t\t\t\t\t\t\trange = range.replace(\"order(\", \"\").replace(\")\",\"\");\n\t\t\t\t\t\t\t\tString[] ranges = range.split(\",\");\n\t\t\t\t\t\t\t\tint rangeCnt = 0;\n\t\t\t\t\t\t\t\tSequenceAnnotation sa =  null;\n\t\t\t\t\t\t\t\tfor (String r : ranges) {\n\t\t\t\t\t\t\t\t\torientation = OrientationType.INLINE;\n\t\t\t\t\t\t\t\t\tif (r.startsWith(\"complement\")||outerComplement) {\n\t\t\t\t\t\t\t\t\t\torientation = OrientationType.REVERSECOMPLEMENT;\n\t\t\t\t\t\t\t\t\t\tr = r.replace(\"complement(\", \"\").replace(\")\",\"\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tboolean startLessThan=false;\n\t\t\t\t\t\t\t\t\tboolean endGreaterThan=false;\n\t\t\t\t\t\t\t\t\tif (r.contains(\"<\")) {\n\t\t\t\t\t\t\t\t\t\tstartLessThan=true;\n\t\t\t\t\t\t\t\t\t\tr = r.replace(\"<\",\"\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (r.contains(\">\")) {\n\t\t\t\t\t\t\t\t\t\tendGreaterThan=true;\n\t\t\t\t\t\t\t\t\t\tr = r.replace(\">\", \"\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tboolean singleBaseRange = false;\n\t\t\t\t\t\t\t\t\tString[] rangeSplit = null;\n\t\t\t\t\t\t\t\t\tif (range.contains(\".\") && !range.contains(\"..\")) {\n\t\t\t\t\t\t\t\t\t\trangeSplit = r.split(\"\\\\.\");\n\t\t\t\t\t\t\t\t\t\tsingleBaseRange = true;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\trangeSplit = r.split(\"\\\\.\\\\.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tint start = 0;\n\t\t\t\t\t\t\t\t\tif (rangeSplit.length > 0) {\n\t\t\t\t\t\t\t\t\t\tstart = Integer.parseInt(rangeSplit[0]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tint end = start;\n\t\t\t\t\t\t\t\t\tif (rangeSplit.length > 1) {\n\t\t\t\t\t\t\t\t\t\tend = Integer.parseInt(rangeSplit[1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tRange newRange = null;\n\t\t\t\t\t\t\t\t\tif (rangeCnt==0) {\n\t\t\t\t\t\t\t\t\t\tsa = topCD.createSequenceAnnotation(\"annotation\"+featureCnt,\"range\"+rangeCnt,\n\t\t\t\t\t\t\t\t\t\t\t\tstart,end,orientation);\n\t\t\t\t\t\t\t\t\t\t//sa.setComponent(\"feature\"+featureCnt);\n\t\t\t\t\t\t\t\t\t\tsa.setName(featureType);\n\t\t\t\t\t\t\t\t\t\tsa.addRole(role);\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,MULTIRANGETYPE,GBCONVPREFIX),multiType);\n\t\t\t\t\t\t\t\t\t\tsa.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t\tif (role.equals(SequenceOntology.SEQUENCE_FEATURE)) {\n\t\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,FEATURETYPE,GBCONVPREFIX),featureType);\n\t\t\t\t\t\t\t\t\t\t\tsa.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tnewRange = (Range)sa.getLocation(\"range\"+rangeCnt);\n\t\t\t\t\t\t\t\t\t} else if (sa != null) {\n\t\t\t\t\t\t\t\t\t\tnewRange = sa.addRange(\"range\"+rangeCnt, start, end, orientation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (outerComplement) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),\"position\"+((ranges.length-1)-rangeCnt));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,POSITION,GBCONVPREFIX),\"position\"+rangeCnt);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\tif (startLessThan) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (endGreaterThan) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (singleBaseRange) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trangeCnt++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (range.contains(\"^\")) {\n\t\t\t\t\t\t\t\tString[] rangeSplit = range.split(\"\\\\^\");\n\t\t\t\t\t\t\t\tint at = Integer.parseInt(rangeSplit[0]);\n\t\t\t\t\t\t\t\tSequenceAnnotation sa =\n\t\t\t\t\t\t\t\t\t\ttopCD.createSequenceAnnotation(\"annotation\"+featureCnt,\"cut\",at,orientation);\n\t\t\t\t\t\t\t\t//sa.setComponent(\"feature\"+featureCnt);\n\t\t\t\t\t\t\t\tsa.addRole(role);\n\t\t\t\t\t\t\t\tsa.setName(featureType);\n\t\t\t\t\t\t\t\tif (role.equals(SequenceOntology.SEQUENCE_FEATURE)) {\n\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,FEATURETYPE,GBCONVPREFIX),featureType);\n\t\t\t\t\t\t\t\t\tsa.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tboolean startLessThan=false;\n\t\t\t\t\t\t\t\tboolean endGreaterThan=false;\n\t\t\t\t\t\t\t\tif (range.contains(\"<\")) {\n\t\t\t\t\t\t\t\t\tstartLessThan=true;\n\t\t\t\t\t\t\t\t\trange = range.replace(\"<\",\"\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (range.contains(\">\")) {\n\t\t\t\t\t\t\t\t\tendGreaterThan=true;\n\t\t\t\t\t\t\t\t\trange = range.replace(\">\", \"\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tboolean singleBaseRange = false;\n\t\t\t\t\t\t\t\tString[] rangeSplit = null;\n\t\t\t\t\t\t\t\tif (range.contains(\".\") && !range.contains(\"..\")) {\n\t\t\t\t\t\t\t\t\trangeSplit = range.split(\"\\\\.\");\n\t\t\t\t\t\t\t\t\tsingleBaseRange = true;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\trangeSplit = range.split(\"\\\\.\\\\.\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tint start = Integer.parseInt(rangeSplit[0]);\n\t\t\t\t\t\t\t\tint end = Integer.parseInt(rangeSplit[0]);\n\t\t\t\t\t\t\t\tif (rangeSplit.length > 1) {\n\t\t\t\t\t\t\t\t\tend = Integer.parseInt(rangeSplit[1]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (start > end && circular) {\n\t\t\t\t\t\t\t\t\tSequenceAnnotation sa =\n\t\t\t\t\t\t\t\t\t\t\ttopCD.createSequenceAnnotation(\"annotation\"+featureCnt,\"range0\",start,baseCount,orientation);\n\t\t\t\t\t\t\t\t\t//sa.setComponent(\"feature\"+featureCnt);\n\t\t\t\t\t\t\t\t\tsa.addRole(role);\n\t\t\t\t\t\t\t\t\tsa.setName(featureType);\n\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,STRADLESORIGIN,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\tsa.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\tif (role.equals(SequenceOntology.SEQUENCE_FEATURE)) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,FEATURETYPE,GBCONVPREFIX),featureType);\n\t\t\t\t\t\t\t\t\t\tsa.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tRange newRange = (Range)sa.getLocation(\"range0\");\n\t\t\t\t\t\t\t\t\tif (startLessThan) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (singleBaseRange) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnewRange = sa.addRange(\"range1\", 1, end, orientation);\n\t\t\t\t\t\t\t\t\tif (singleBaseRange) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (endGreaterThan) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tSequenceAnnotation sa =\n\t\t\t\t\t\t\t\t\t\t\ttopCD.createSequenceAnnotation(\"annotation\"+featureCnt,\"range\",start,end,orientation);\n\t\t\t\t\t\t\t\t\t//sa.setComponent(\"feature\"+featureCnt);\n\t\t\t\t\t\t\t\t\tsa.addRole(role);\n\t\t\t\t\t\t\t\t\tsa.setName(featureType);\n\t\t\t\t\t\t\t\t\tif (role.equals(SequenceOntology.SEQUENCE_FEATURE)) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,FEATURETYPE,GBCONVPREFIX),featureType);\n\t\t\t\t\t\t\t\t\t\tsa.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tRange newRange = (Range)sa.getLocation(\"range\");\n\t\t\t\t\t\t\t\t\tif (startLessThan) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,STARTLESSTHAN,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (endGreaterThan) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,ENDGREATERTHAN,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (singleBaseRange) {\n\t\t\t\t\t\t\t\t\t\tannotation = new Annotation(new QName(GBCONVNAMESPACE,SINGLEBASERANGE,GBCONVPREFIX),\"true\");\n\t\t\t\t\t\t\t\t\t\tnewRange.addAnnotation(annotation);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabelType = \"\";\n\t\t\t\t\t\t\tlastRole = role;\n\t\t\t\t\t\t\tfeatureCnt++;\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t/*---------------------\n\t\t\t\t\t\t * SEQUENCE MODE\n\t\t\t\t\t\t *---------------------*/\n\t\t\t\t\t} else if (originMode) {\n\t\t\t\t\t\tif (featureCnt==1) {\n\t\t\t\t\t\t\ttopCD.clearRoles();\n\t\t\t\t\t\t\ttopCD.addRole(lastRole);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(elements == null) { elements = new String(\"\"); }\n\t\t\t\t\t\tif (strLine.startsWith(\"//\")) {\n\t\t\t\t\t\t\tcont = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString[] strSplit = strLine.split(\" \");\n\t\t\t\t\t\tfor (int i = 1; i < strSplit.length; i++) {\n\t\t\t\t\t\t\tsbSequence.append(strSplit[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcont = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (topCD!=null) {\n\t\t\t\t//throw new SBOLConversionException(\"Invalid GenBank file.\");\n\t\t\t\tSequence sequence = doc.createSequence(id+\"_seq\", version, sbSequence.toString(), Sequence.IUPAC_DNA);\n\t\t\t\ttopCD.addSequence(sequence);\n\t\t\t\tcreateSubComponentDefinitions(doc,topCD,type,sbSequence.toString(),version);\n\t\t\t}\n\t\t\tif (!cont) break;\n\t\t}\n\t\tbr.close();\n\t}", "signature": "void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "full_signature": "static void read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "class_method_signature": "GenBank.read(SBOLDocument doc,String stringBuffer,String URIPrefix,String displayId,String defaultVersion)", "testcase": false, "constructor": false, "invocations": ["addNamespace", "create", "addNamespace", "create", "readGenBankLine", "trim", "startsWith", "matcher", "trim", "matches", "println", "trim", "equals", "trim", "group", "fixDisplayId", "add", "parseInt", "group", "group", "contains", "toUpperCase", "add", "group", "startsWith", "startsWith", "startsWith", "group", "group", "group", "group", "group", "group", "group", "group", "add", "add", "startsWith", "replaceFirst", "startsWith", "split", "length", "fixDisplayId", "equals", "add", "startsWith", "split", "equals", "split", "split", "split", "split", "split", "equals", "add", "startsWith", "trim", "replace", "add", "startsWith", "trim", "replace", "add", "startsWith", "trim", "replace", "add", "startsWith", "trim", "replace", "add", "create", "add", "startsWith", "trim", "replace", "add", "setAnnotations", "startsWith", "trim", "replace", "add", "setAnnotations", "startsWith", "trim", "replace", "add", "setAnnotations", "startsWith", "trim", "replace", "add", "setAnnotations", "startsWith", "trim", "replace", "add", "setAnnotations", "add", "startsWith", "replace", "equals", "startsWith", "trim", "replace", "add", "startsWith", "equals", "add", "createComponentDefinition", "addType", "addType", "addRole", "equals", "setDescription", "setAnnotations", "startsWith", "startsWith", "trim", "replace", "indexOf", "split", "replace", "append", "startsWith", "endsWith", "trim", "readGenBankLine", "append", "contains", "contains", "endsWith", "getSequenceAnnotation", "equals", "setName", "replace", "equals", "equals", "setName", "replace", "equals", "equals", "equals", "setName", "replace", "equals", "equals", "equals", "equals", "setName", "replace", "equals", "equals", "equals", "equals", "equals", "setName", "replace", "equals", "equals", "equals", "equals", "equals", "equals", "setName", "replace", "fixTag", "startsWith", "replaceAll", "addAnnotation", "replace", "split", "convertGenBanktoSO", "startsWith", "replace", "replace", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "endsWith", "trim", "readGenBankLine", "replace", "replace", "replace", "replace", "split", "startsWith", "replace", "replace", "contains", "replace", "contains", "replace", "contains", "contains", "split", "split", "parseInt", "parseInt", "createSequenceAnnotation", "setName", "addRole", "addAnnotation", "equals", "addAnnotation", "getLocation", "addRange", "addAnnotation", "addAnnotation", "addAnnotation", "addAnnotation", "contains", "split", "parseInt", "createSequenceAnnotation", "addRole", "setName", "equals", "addAnnotation", "contains", "replace", "contains", "replace", "contains", "contains", "split", "split", "parseInt", "parseInt", "parseInt", "createSequenceAnnotation", "addRole", "setName", "addAnnotation", "equals", "addAnnotation", "getLocation", "addAnnotation", "addAnnotation", "addRange", "addAnnotation", "addAnnotation", "createSequenceAnnotation", "addRole", "setName", "equals", "addAnnotation", "getLocation", "addAnnotation", "addAnnotation", "addAnnotation", "clearRoles", "addRole", "startsWith", "split", "append", "createSequence", "toString", "addSequence", "createSubComponentDefinitions", "toString", "close"]}, "repository": {"repo_id": 3655926, "url": "https://github.com/SynBioDex/libSBOLj", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 50983, "license": "licensed"}}