{"test_class": {"identifier": "BufferedImageAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "jt-utilities/src/test/java/it/geosolutions/jaiext/BufferedImageAdapterTest.java"}, "test_case": {"identifier": "testSubimage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubimage() {\n        BufferedImage bi = new BufferedImage(768, 768, BufferedImage.TYPE_4BYTE_ABGR);\n        // get a subimage\n        BufferedImage subimage = bi.getSubimage(0, 512, 256, 256);\n        BufferedImageAdapter adapter = new BufferedImageAdapter(subimage);\n        // a buffered image is always stuck in 0,0, even if it's a subimage\n        assertEquals(0, adapter.getMinX());\n        assertEquals(0, adapter.getMinY());\n        assertEquals(0, adapter.getMinTileX());\n        assertEquals(0, adapter.getMinTileY());\n        assertEquals(0, adapter.getTileGridXOffset());\n        assertEquals(0, adapter.getTileGridYOffset());\n        RenderedOp op = BandSelectDescriptor.create(adapter, new int[1], null);\n        // JAI did not need to wrap it\n        assertSame(adapter, op.getSourceObject(0));\n        // no NPE (RenderedImageAdapter would blow up here)\n        assertNotNull(op.getTile(op.getMinTileX(), op.getMinTileY()));\n    }", "signature": "void testSubimage()", "full_signature": "@Test public void testSubimage()", "class_method_signature": "BufferedImageAdapterTest.testSubimage()", "testcase": true, "constructor": false, "invocations": ["getSubimage", "assertEquals", "getMinX", "assertEquals", "getMinY", "assertEquals", "getMinTileX", "assertEquals", "getMinTileY", "assertEquals", "getTileGridXOffset", "assertEquals", "getTileGridYOffset", "create", "assertSame", "getSourceObject", "assertNotNull", "getTile", "getMinTileX", "getMinTileY"]}, "focal_class": {"identifier": "BufferedImageAdapter", "superclass": "extends PlanarImage", "interfaces": "", "fields": [{"original_string": "private BufferedImage image;", "modifier": "private", "type": "BufferedImage", "declarator": "image", "var_name": "image"}], "methods": [{"identifier": "getProperties", "parameters": "(BufferedImage bi)", "modifiers": "private static", "return": "Map", "signature": "Map getProperties(BufferedImage bi)", "full_signature": "private static Map getProperties(BufferedImage bi)", "class_method_signature": "BufferedImageAdapter.getProperties(BufferedImage bi)", "testcase": false, "constructor": false}, {"identifier": "getImageLayout", "parameters": "(BufferedImage im)", "modifiers": "private static", "return": "ImageLayout", "signature": "ImageLayout getImageLayout(BufferedImage im)", "full_signature": "private static ImageLayout getImageLayout(BufferedImage im)", "class_method_signature": "BufferedImageAdapter.getImageLayout(BufferedImage im)", "testcase": false, "constructor": false}, {"identifier": "BufferedImageAdapter", "parameters": "(BufferedImage image)", "modifiers": "public", "return": "", "signature": " BufferedImageAdapter(BufferedImage image)", "full_signature": "public  BufferedImageAdapter(BufferedImage image)", "class_method_signature": "BufferedImageAdapter.BufferedImageAdapter(BufferedImage image)", "testcase": false, "constructor": true}, {"identifier": "getTile", "parameters": "(int tileX, int tileY)", "modifiers": "@Override public", "return": "Raster", "signature": "Raster getTile(int tileX, int tileY)", "full_signature": "@Override public Raster getTile(int tileX, int tileY)", "class_method_signature": "BufferedImageAdapter.getTile(int tileX, int tileY)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "Raster", "signature": "Raster getData()", "full_signature": "public Raster getData()", "class_method_signature": "BufferedImageAdapter.getData()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(Rectangle rect)", "modifiers": "public", "return": "Raster", "signature": "Raster getData(Rectangle rect)", "full_signature": "public Raster getData(Rectangle rect)", "class_method_signature": "BufferedImageAdapter.getData(Rectangle rect)", "testcase": false, "constructor": false}, {"identifier": "copyData", "parameters": "(WritableRaster raster)", "modifiers": "public", "return": "WritableRaster", "signature": "WritableRaster copyData(WritableRaster raster)", "full_signature": "public WritableRaster copyData(WritableRaster raster)", "class_method_signature": "BufferedImageAdapter.copyData(WritableRaster raster)", "testcase": false, "constructor": false}], "file": "jt-utilities/src/main/java/it/geosolutions/jaiext/BufferedImageAdapter.java"}, "focal_method": {"identifier": "getTile", "parameters": "(int tileX, int tileY)", "modifiers": "@Override public", "return": "Raster", "body": "@Override\n    public Raster getTile(int tileX, int tileY) {\n        if (tileX != 0 || tileY != 0) {\n            return null;\n        } else {\n            return image.getTile(tileX, tileY);\n        }\n    }", "signature": "Raster getTile(int tileX, int tileY)", "full_signature": "@Override public Raster getTile(int tileX, int tileY)", "class_method_signature": "BufferedImageAdapter.getTile(int tileX, int tileY)", "testcase": false, "constructor": false, "invocations": ["getTile"]}, "repository": {"repo_id": 5947247, "url": "https://github.com/geosolutions-it/jai-ext", "stars": 57, "created": "9/25/2012 8:47:49 AM +00:00", "updates": "2020-01-23T20:33:46+00:00", "fork": "False", "license": "licensed"}}