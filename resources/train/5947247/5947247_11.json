{"test_class": {"identifier": "ImageLayout2Test", "superclass": "", "interfaces": "", "fields": [], "file": "jt-utilities/src/test/java/it/geosolutions/jaiext/utilities/ImageLayout2Test.java"}, "test_case": {"identifier": "testNotEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotEquals() {\n        ImageLayout2 il1 = new ImageLayout2(1, 2, 3, 4, 5, 6, 7, 8, null, null);\n\n        int[] z = { 1, 2, 3, 4, 5, 6, 7, 8 };\n        for (int i = 0; i < 8; i++) {\n            int oldz = z[i];\n            z[i] = 99;\n            ImageLayout2 il2 = new ImageLayout2(\n                    z[0], z[1], z[2], z[3], z[4], z[5], z[6], z[7], null, null);\n            \n            assertFalse(il1.equals(il2));\n            z[i] = oldz;\n        }\n    }", "signature": "void testNotEquals()", "full_signature": "@Test public void testNotEquals()", "class_method_signature": "ImageLayout2Test.testNotEquals()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "equals"]}, "focal_class": {"identifier": "ImageLayout2", "superclass": "extends ImageLayout", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -7921590012423277029L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7921590012423277029L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "ImageLayout2", "parameters": "()", "modifiers": "public", "return": "", "signature": " ImageLayout2()", "full_signature": "public  ImageLayout2()", "class_method_signature": "ImageLayout2.ImageLayout2()", "testcase": false, "constructor": true}, {"identifier": "ImageLayout2", "parameters": "(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height, \n            final int tileGridXOffset,\n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight, \n            final SampleModel sampleModel,\n            final ColorModel colorModel)", "modifiers": "public", "return": "", "signature": " ImageLayout2(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height, \n            final int tileGridXOffset,\n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight, \n            final SampleModel sampleModel,\n            final ColorModel colorModel)", "full_signature": "public  ImageLayout2(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height, \n            final int tileGridXOffset,\n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight, \n            final SampleModel sampleModel,\n            final ColorModel colorModel)", "class_method_signature": "ImageLayout2.ImageLayout2(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height, \n            final int tileGridXOffset,\n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight, \n            final SampleModel sampleModel,\n            final ColorModel colorModel)", "testcase": false, "constructor": true}, {"identifier": "ImageLayout2", "parameters": "(\n            final int tileGridXOffset, \n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight,\n            final SampleModel sampleModel, \n            final ColorModel colorModel)", "modifiers": "public", "return": "", "signature": " ImageLayout2(\n            final int tileGridXOffset, \n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight,\n            final SampleModel sampleModel, \n            final ColorModel colorModel)", "full_signature": "public  ImageLayout2(\n            final int tileGridXOffset, \n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight,\n            final SampleModel sampleModel, \n            final ColorModel colorModel)", "class_method_signature": "ImageLayout2.ImageLayout2(\n            final int tileGridXOffset, \n            final int tileGridYOffset, \n            final int tileWidth, \n            final int tileHeight,\n            final SampleModel sampleModel, \n            final ColorModel colorModel)", "testcase": false, "constructor": true}, {"identifier": "ImageLayout2", "parameters": "(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height)", "modifiers": "public", "return": "", "signature": " ImageLayout2(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height)", "full_signature": "public  ImageLayout2(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height)", "class_method_signature": "ImageLayout2.ImageLayout2(\n            final int minX, \n            final int minY, \n            final int width, \n            final int height)", "testcase": false, "constructor": true}, {"identifier": "ImageLayout2", "parameters": "(RenderedImage im)", "modifiers": "public", "return": "", "signature": " ImageLayout2(RenderedImage im)", "full_signature": "public  ImageLayout2(RenderedImage im)", "class_method_signature": "ImageLayout2.ImageLayout2(RenderedImage im)", "testcase": false, "constructor": true}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImageLayout2.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ImageLayout2.equals(Object obj)", "testcase": false, "constructor": false}], "file": "jt-utilities/src/main/java/it/geosolutions/jaiext/utilities/ImageLayout2.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;\n        }\n\n        if (obj == this) {\n            return true;\n        }\n\n        if (!ImageLayout.class.isAssignableFrom(obj.getClass())) {\n            return false;\n        }\n        \n        ImageLayout other = (ImageLayout) obj;\n        \n        if (getValidMask() != other.getValidMask()) {\n            return false;\n        }\n        if (getWidth(null) != other.getWidth(null)) {\n            return false;\n        }\n        if (getHeight(null) != other.getHeight(null)) {\n            return false;\n        }\n        if (getMinX(null) != other.getMinX(null)) {\n            return false;\n        }\n        if (getMinY(null) != other.getMinY(null)) {\n            return false;\n        }\n        if (getTileWidth(null) != other.getTileWidth(null)) {\n            return false;\n        }\n        if (getTileHeight(null) != other.getTileHeight(null)) {\n            return false;\n        }\n        if (getTileGridXOffset(null) != other.getTileGridXOffset(null)) {\n            return false;\n        }\n        if (getTileGridYOffset(null) != other.getTileGridYOffset(null)) {\n            return false;\n        }\n        \n        SampleModel sm = getSampleModel(null);\n        if (sm == null) {\n            if (other.getSampleModel(null) != null) {\n                return false;\n            }\n        } else {\n            if (!sm.equals(other.getSampleModel(null))) {\n                return false;\n            }\n        }\n\n        ColorModel cm = getColorModel(null);\n        if (cm == null) {\n            if (other.getColorModel(null) != null) {\n                return false;\n            }\n        } else {\n            if (!cm.equals(other.getColorModel(null))) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ImageLayout2.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getClass", "getValidMask", "getValidMask", "getWidth", "getWidth", "getHeight", "getHeight", "getMinX", "getMinX", "getMinY", "getMinY", "getTileWidth", "getTileWidth", "getTileHeight", "getTileHeight", "getTileGridXOffset", "getTileGridXOffset", "getTileGridYOffset", "getTileGridYOffset", "getSampleModel", "getSampleModel", "equals", "getSampleModel", "getColorModel", "getColorModel", "equals", "getColorModel"]}, "repository": {"repo_id": 5947247, "url": "https://github.com/geosolutions-it/jai-ext", "stars": 57, "created": "9/25/2012 8:47:49 AM +00:00", "updates": "2020-01-23T20:33:46+00:00", "fork": "False", "license": "licensed"}}