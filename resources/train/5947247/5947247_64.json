{"test_class": {"identifier": "RasterAccessorExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "jt-mosaic/src/test/java/it/geosolutions/jaiext/mosaic/RasterAccessorExtTest.java"}, "test_case": {"identifier": "testPreserveScanlineStride", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPreserveScanlineStride() {\n        BufferedImage byteGray = new BufferedImage(10, 10, BufferedImage.TYPE_BYTE_GRAY);\n        BufferedImage rgb = new BufferedImage(10, 10, BufferedImage.TYPE_3BYTE_BGR);\n        BufferedImage subimage = byteGray.getSubimage(5, 5, 5, 5);\n        RasterFormatTag[] tags = RasterAccessorExt\n                .findCompatibleTags(new RenderedImage[] { subimage }, rgb);\n        Raster raster = subimage.getData();\n        RasterAccessorExt ra = new RasterAccessorExt(raster, raster.getBounds(),\n                tags[0],\n                subimage.getColorModel(), 3, DataBuffer.TYPE_BYTE);\n        assertEquals(10, ra.getScanlineStride());\n    }", "signature": "void testPreserveScanlineStride()", "full_signature": "@Test public void testPreserveScanlineStride()", "class_method_signature": "RasterAccessorExtTest.testPreserveScanlineStride()", "testcase": true, "constructor": false, "invocations": ["getSubimage", "findCompatibleTags", "getData", "getBounds", "getColorModel", "assertEquals", "getScanlineStride"]}, "focal_class": {"identifier": "RasterAccessorExt", "superclass": "extends RasterAccessor", "interfaces": "", "fields": [{"original_string": "private static final int GRAY_EXPANSION_MASK_SHIFT = 11;", "modifier": "private static final", "type": "int", "declarator": "GRAY_EXPANSION_MASK_SHIFT = 11", "var_name": "GRAY_EXPANSION_MASK_SHIFT"}, {"original_string": "private static final int GRAY_EXPANSION_MASK_SIZE = 1;", "modifier": "private static final", "type": "int", "declarator": "GRAY_EXPANSION_MASK_SIZE = 1", "var_name": "GRAY_EXPANSION_MASK_SIZE"}, {"original_string": "public static final int GRAY_EXPANSION_MASK = 3 << GRAY_EXPANSION_MASK_SHIFT;", "modifier": "public static final", "type": "int", "declarator": "GRAY_EXPANSION_MASK = 3 << GRAY_EXPANSION_MASK_SHIFT", "var_name": "GRAY_EXPANSION_MASK"}, {"original_string": "public static final int UNEXPANDED = 0x00 << GRAY_EXPANSION_MASK_SHIFT;", "modifier": "public static final", "type": "int", "declarator": "UNEXPANDED = 0x00 << GRAY_EXPANSION_MASK_SHIFT", "var_name": "UNEXPANDED"}, {"original_string": "public static final int GRAY_TO_RGB = 0X01 << GRAY_EXPANSION_MASK_SHIFT;", "modifier": "public static final", "type": "int", "declarator": "GRAY_TO_RGB = 0X01 << GRAY_EXPANSION_MASK_SHIFT", "var_name": "GRAY_TO_RGB"}, {"original_string": "public static final int GRAY_SCALE = 0X02 << GRAY_EXPANSION_MASK_SHIFT;", "modifier": "public static final", "type": "int", "declarator": "GRAY_SCALE = 0X02 << GRAY_EXPANSION_MASK_SHIFT", "var_name": "GRAY_SCALE"}], "methods": [{"identifier": "RasterAccessorExt", "parameters": "(Raster raster, Rectangle rect, RasterFormatTag rft,\n            ColorModel theColorModel, int targetBands, int targetDataType)", "modifiers": "public", "return": "", "signature": " RasterAccessorExt(Raster raster, Rectangle rect, RasterFormatTag rft,\n            ColorModel theColorModel, int targetBands, int targetDataType)", "full_signature": "public  RasterAccessorExt(Raster raster, Rectangle rect, RasterFormatTag rft,\n            ColorModel theColorModel, int targetBands, int targetDataType)", "class_method_signature": "RasterAccessorExt.RasterAccessorExt(Raster raster, Rectangle rect, RasterFormatTag rft,\n            ColorModel theColorModel, int targetBands, int targetDataType)", "testcase": false, "constructor": true}, {"identifier": "isGray", "parameters": "(ColorModel theColorModel, int numBands)", "modifiers": "static", "return": "boolean", "signature": "boolean isGray(ColorModel theColorModel, int numBands)", "full_signature": "static boolean isGray(ColorModel theColorModel, int numBands)", "class_method_signature": "RasterAccessorExt.isGray(ColorModel theColorModel, int numBands)", "testcase": false, "constructor": false}, {"identifier": "shortToByte", "parameters": "(int sample)", "modifiers": "private static final", "return": "int", "signature": "int shortToByte(int sample)", "full_signature": "private static final int shortToByte(int sample)", "class_method_signature": "RasterAccessorExt.shortToByte(int sample)", "testcase": false, "constructor": false}, {"identifier": "byteToShort", "parameters": "(int theByte)", "modifiers": "private static final", "return": "int", "signature": "int byteToShort(int theByte)", "full_signature": "private static final int byteToShort(int theByte)", "class_method_signature": "RasterAccessorExt.byteToShort(int theByte)", "testcase": false, "constructor": false}, {"identifier": "findCompatibleTags", "parameters": "(RenderedImage srcs[], RenderedImage dst)", "modifiers": "public static", "return": "RasterFormatTag[]", "signature": "RasterFormatTag[] findCompatibleTags(RenderedImage srcs[], RenderedImage dst)", "full_signature": "public static RasterFormatTag[] findCompatibleTags(RenderedImage srcs[], RenderedImage dst)", "class_method_signature": "RasterAccessorExt.findCompatibleTags(RenderedImage srcs[], RenderedImage dst)", "testcase": false, "constructor": false}, {"identifier": "applyMask", "parameters": "(RenderedImage src, RasterFormatTag oldTag, int mask)", "modifiers": "private static", "return": "RasterFormatTag", "signature": "RasterFormatTag applyMask(RenderedImage src, RasterFormatTag oldTag, int mask)", "full_signature": "private static RasterFormatTag applyMask(RenderedImage src, RasterFormatTag oldTag, int mask)", "class_method_signature": "RasterAccessorExt.applyMask(RenderedImage src, RasterFormatTag oldTag, int mask)", "testcase": false, "constructor": false}, {"identifier": "expandNoData", "parameters": "(Range noData, RasterFormatTag rft, RenderedImage sourceImage,\n            RenderedImage destImage)", "modifiers": "public static", "return": "Range", "signature": "Range expandNoData(Range noData, RasterFormatTag rft, RenderedImage sourceImage,\n            RenderedImage destImage)", "full_signature": "public static Range expandNoData(Range noData, RasterFormatTag rft, RenderedImage sourceImage,\n            RenderedImage destImage)", "class_method_signature": "RasterAccessorExt.expandNoData(Range noData, RasterFormatTag rft, RenderedImage sourceImage,\n            RenderedImage destImage)", "testcase": false, "constructor": false}, {"identifier": "isPaletteExpansionRequired", "parameters": "(RenderedImage sourceImage, int formatTagID)", "modifiers": "static", "return": "boolean", "signature": "boolean isPaletteExpansionRequired(RenderedImage sourceImage, int formatTagID)", "full_signature": "static boolean isPaletteExpansionRequired(RenderedImage sourceImage, int formatTagID)", "class_method_signature": "RasterAccessorExt.isPaletteExpansionRequired(RenderedImage sourceImage, int formatTagID)", "testcase": false, "constructor": false}], "file": "jt-mosaic/src/main/java/it/geosolutions/jaiext/mosaic/RasterAccessorExt.java"}, "focal_method": {"identifier": "findCompatibleTags", "parameters": "(RenderedImage srcs[], RenderedImage dst)", "modifiers": "public static", "return": "RasterFormatTag[]", "body": "public static RasterFormatTag[] findCompatibleTags(RenderedImage srcs[], RenderedImage dst) {\n        RasterFormatTag[] tags = RasterAccessor.findCompatibleTags(srcs, dst);\n        // check if we need to perform gray expansion\n        if (dst.getSampleModel().getNumBands() > 1) {\n            for (int i = 0; i < srcs.length; i++) {\n                RenderedImage src = srcs[i];\n                int numBands = src.getSampleModel().getNumBands();\n                if ((numBands == 1 || numBands == 2) \n                        && !(src.getColorModel() instanceof IndexColorModel)) {\n                    tags[i] = applyMask(src, tags[i], GRAY_TO_RGB);\n                }\n            }\n        } else if (dst.getSampleModel().getNumBands() == 1\n                && !(dst.getColorModel() instanceof IndexColorModel)) {\n            int destinationDataType = dst.getSampleModel().getDataType();\n            for (int i = 0; i < srcs.length; i++) {\n                RenderedImage src = srcs[i];\n\n                int sourceDataType = src.getSampleModel().getDataType();\n                if (destinationDataType != sourceDataType) {\n                    tags[i] = applyMask(src, tags[i], GRAY_SCALE);\n                }\n            }\n        }\n\n        return tags;\n    }", "signature": "RasterFormatTag[] findCompatibleTags(RenderedImage srcs[], RenderedImage dst)", "full_signature": "public static RasterFormatTag[] findCompatibleTags(RenderedImage srcs[], RenderedImage dst)", "class_method_signature": "RasterAccessorExt.findCompatibleTags(RenderedImage srcs[], RenderedImage dst)", "testcase": false, "constructor": false, "invocations": ["findCompatibleTags", "getNumBands", "getSampleModel", "getNumBands", "getSampleModel", "getColorModel", "applyMask", "getNumBands", "getSampleModel", "getColorModel", "getDataType", "getSampleModel", "getDataType", "getSampleModel", "applyMask"]}, "repository": {"repo_id": 5947247, "url": "https://github.com/geosolutions-it/jai-ext", "stars": 57, "created": "9/25/2012 8:47:49 AM +00:00", "updates": "2020-01-23T20:33:46+00:00", "fork": "False", "license": "licensed"}}