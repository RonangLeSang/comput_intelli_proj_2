{"test_class": {"identifier": "ClassBreaksOpImageTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "static final double EPS = 1e-3;", "modifier": "static final", "type": "double", "declarator": "EPS = 1e-3", "var_name": "EPS"}], "file": "jt-classbreaks/src/test/java/it/geosolutions/jaiext/classbreaks/ClassBreaksOpImageTest.java"}, "test_case": {"identifier": "testQuantileBreaksWithPercentages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQuantileBreaksWithPercentages() throws Exception {\n        RenderedImage image = createImage();\n\n        ParameterBlockJAI pb = new ParameterBlockJAI(new ClassBreaksDescriptor());\n        pb.addSource(image);\n        pb.setParameter(\"method\", ClassificationMethod.QUANTILE);\n        pb.setParameter(\"numClasses\", 4);\n        pb.setParameter(\"percentages\",true);\n        RenderedImage op  = JAI.create(\"ClassBreaks\", pb, null);\n        Classification classification =\n                (Classification) op.getProperty(ClassBreaksDescriptor.CLASSIFICATION_PROPERTY);\n        assertNotNull(classification);\n        double[] percentages = classification.getPercentages();\n        assertEquals(percentages.length, 4);\n        assertTrue(percentages[0]== 18.75);\n        assertTrue(percentages[1]== 31.25);\n        assertTrue(percentages[2]== 25.0);\n        assertTrue(percentages[3]== 25.0);\n    }", "signature": "void testQuantileBreaksWithPercentages()", "full_signature": "@Test public void testQuantileBreaksWithPercentages()", "class_method_signature": "ClassBreaksOpImageTest.testQuantileBreaksWithPercentages()", "testcase": true, "constructor": false, "invocations": ["createImage", "addSource", "setParameter", "setParameter", "setParameter", "create", "getProperty", "assertNotNull", "getPercentages", "assertEquals", "assertTrue", "assertTrue", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "ClassBreaksOpImage", "superclass": "extends StatisticsOpImage", "interfaces": "", "fields": [{"original_string": "protected Integer numClasses;", "modifier": "protected", "type": "Integer", "declarator": "numClasses", "var_name": "numClasses"}, {"original_string": "protected Double[][] extrema;", "modifier": "protected", "type": "Double[][]", "declarator": "extrema", "var_name": "extrema"}, {"original_string": "protected Integer[] bands;", "modifier": "protected", "type": "Integer[]", "declarator": "bands", "var_name": "bands"}, {"original_string": "protected Double noData;", "modifier": "protected", "type": "Double", "declarator": "noData", "var_name": "noData"}, {"original_string": "protected Boolean percentages;", "modifier": "protected", "type": "Boolean", "declarator": "percentages", "var_name": "percentages"}], "methods": [{"identifier": "ClassBreaksOpImage", "parameters": "(\n            RenderedImage image,\n            Integer numClasses,\n            Double[][] extrema,\n            ROI roi,\n            Integer[] bands,\n            Integer xStart,\n            Integer yStart,\n            Integer xPeriod,\n            Integer yPeriod,\n            Double noData,\n            Boolean percentages)", "modifiers": "public", "return": "", "signature": " ClassBreaksOpImage(\n            RenderedImage image,\n            Integer numClasses,\n            Double[][] extrema,\n            ROI roi,\n            Integer[] bands,\n            Integer xStart,\n            Integer yStart,\n            Integer xPeriod,\n            Integer yPeriod,\n            Double noData,\n            Boolean percentages)", "full_signature": "public  ClassBreaksOpImage(\n            RenderedImage image,\n            Integer numClasses,\n            Double[][] extrema,\n            ROI roi,\n            Integer[] bands,\n            Integer xStart,\n            Integer yStart,\n            Integer xPeriod,\n            Integer yPeriod,\n            Double noData,\n            Boolean percentages)", "class_method_signature": "ClassBreaksOpImage.ClassBreaksOpImage(\n            RenderedImage image,\n            Integer numClasses,\n            Double[][] extrema,\n            ROI roi,\n            Integer[] bands,\n            Integer xStart,\n            Integer yStart,\n            Integer xPeriod,\n            Integer yPeriod,\n            Double noData,\n            Boolean percentages)", "testcase": false, "constructor": true}, {"identifier": "getStatisticsNames", "parameters": "()", "modifiers": "@Override protected", "return": "String[]", "signature": "String[] getStatisticsNames()", "full_signature": "@Override protected String[] getStatisticsNames()", "class_method_signature": "ClassBreaksOpImage.getStatisticsNames()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getProperty(String name)", "full_signature": "@Override public Object getProperty(String name)", "class_method_signature": "ClassBreaksOpImage.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String name, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(String name, Object value)", "full_signature": "@Override public void setProperty(String name, Object value)", "class_method_signature": "ClassBreaksOpImage.setProperty(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "createStatistics", "parameters": "(String name)", "modifiers": "@Override protected", "return": "Object", "signature": "Object createStatistics(String name)", "full_signature": "@Override protected Object createStatistics(String name)", "class_method_signature": "ClassBreaksOpImage.createStatistics(String name)", "testcase": false, "constructor": false}, {"identifier": "accumulateStatistics", "parameters": "(String name, Raster raster, Object obj)", "modifiers": "@Override protected", "return": "void", "signature": "void accumulateStatistics(String name, Raster raster, Object obj)", "full_signature": "@Override protected void accumulateStatistics(String name, Raster raster, Object obj)", "class_method_signature": "ClassBreaksOpImage.accumulateStatistics(String name, Raster raster, Object obj)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(\n            PixelAccessor accessor,\n            Raster raster,\n            Rectangle rect,\n            int xPeriod,\n            int yPeriod,\n            Classification c)", "modifiers": "", "return": "void", "signature": "void calculate(\n            PixelAccessor accessor,\n            Raster raster,\n            Rectangle rect,\n            int xPeriod,\n            int yPeriod,\n            Classification c)", "full_signature": " void calculate(\n            PixelAccessor accessor,\n            Raster raster,\n            Rectangle rect,\n            int xPeriod,\n            int yPeriod,\n            Classification c)", "class_method_signature": "ClassBreaksOpImage.calculate(\n            PixelAccessor accessor,\n            Raster raster,\n            Rectangle rect,\n            int xPeriod,\n            int yPeriod,\n            Classification c)", "testcase": false, "constructor": false}, {"identifier": "handleValue", "parameters": "(double d, Classification c, int band)", "modifiers": "protected abstract", "return": "void", "signature": "void handleValue(double d, Classification c, int band)", "full_signature": "protected abstract void handleValue(double d, Classification c, int band)", "class_method_signature": "ClassBreaksOpImage.handleValue(double d, Classification c, int band)", "testcase": false, "constructor": false}, {"identifier": "createClassification", "parameters": "()", "modifiers": "protected abstract", "return": "Classification", "signature": "Classification createClassification()", "full_signature": "protected abstract Classification createClassification()", "class_method_signature": "ClassBreaksOpImage.createClassification()", "testcase": false, "constructor": false}, {"identifier": "preCalculate", "parameters": "()", "modifiers": "protected", "return": "Classification", "signature": "Classification preCalculate()", "full_signature": "protected Classification preCalculate()", "class_method_signature": "ClassBreaksOpImage.preCalculate()", "testcase": false, "constructor": false}, {"identifier": "postCalculate", "parameters": "(Classification c, int band)", "modifiers": "protected abstract", "return": "void", "signature": "void postCalculate(Classification c, int band)", "full_signature": "protected abstract void postCalculate(Classification c, int band)", "class_method_signature": "ClassBreaksOpImage.postCalculate(Classification c, int band)", "testcase": false, "constructor": false}, {"identifier": "startPosition", "parameters": "(int pos, int start, int Period)", "modifiers": "private", "return": "int", "signature": "int startPosition(int pos, int start, int Period)", "full_signature": "private int startPosition(int pos, int start, int Period)", "class_method_signature": "ClassBreaksOpImage.startPosition(int pos, int start, int Period)", "testcase": false, "constructor": false}], "file": "jt-classbreaks/src/main/java/it/geosolutions/jaiext/classbreaks/ClassBreaksOpImage.java"}, "focal_method": {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object getProperty(String name) {\n        Object obj = properties.getProperty(ClassBreaksDescriptor.CLASSIFICATION_PROPERTY);\n        if (obj == Image.UndefinedProperty) {\n            // not calculated yet, give subclass a chance to optimize in cases where enough\n            // parameters are specified that the image does not have to be scanned\n            Classification c = preCalculate();\n            if (c != null) {\n                properties.setProperty(ClassBreaksDescriptor.CLASSIFICATION_PROPERTY, c);\n            }\n        }\n\n        return super.getProperty(name);\n    }", "signature": "Object getProperty(String name)", "full_signature": "@Override public Object getProperty(String name)", "class_method_signature": "ClassBreaksOpImage.getProperty(String name)", "testcase": false, "constructor": false, "invocations": ["getProperty", "preCalculate", "setProperty", "getProperty"]}, "repository": {"repo_id": 5947247, "url": "https://github.com/geosolutions-it/jai-ext", "stars": 57, "created": "9/25/2012 8:47:49 AM +00:00", "updates": "2020-01-23T20:33:46+00:00", "fork": "False", "license": "licensed"}}