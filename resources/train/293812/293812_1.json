{"test_class": {"identifier": "PrettyFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<Comment> NO_COMMENTS = emptyList();", "modifier": "private static final", "type": "List<Comment>", "declarator": "NO_COMMENTS = emptyList()", "var_name": "NO_COMMENTS"}, {"original_string": "private static final List<Tag> NO_TAGS = Collections.emptyList();", "modifier": "private static final", "type": "List<Tag>", "declarator": "NO_TAGS = Collections.emptyList()", "var_name": "NO_TAGS"}], "file": "java/src/test/java/gherkin/formatter/PrettyFormatterTest.java"}, "test_case": {"identifier": "shouldAppendOnlyCompleteLinesAndFlushBetween", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAppendOnlyCompleteLinesAndFlushBetween() throws IOException {\n\n        StringBuilder featureBuilder = new StringBuilder();\n        featureBuilder.append(\"Feature: PrettyFormatter\\n\");\n        featureBuilder.append(\"Scenario: Formmat beautifully\\n\");\n        featureBuilder.append(\"When I have this table:\\n\");\n        featureBuilder.append(\"\\t|name|value|\\n\");\n        featureBuilder.append(\"\\t|a|b|\\n\");\n        featureBuilder.append(\"Then should formatt beautifully.\\n\");\n        String feature = featureBuilder.toString();\n\n        Formatter formatter = new PrettyFormatter(new CheckingAppendable(), false, false);\n        new Parser(formatter).parse(feature, \"\", 0);\n        formatter.close();\n    }", "signature": "void shouldAppendOnlyCompleteLinesAndFlushBetween()", "full_signature": "@Test public void shouldAppendOnlyCompleteLinesAndFlushBetween()", "class_method_signature": "PrettyFormatterTest.shouldAppendOnlyCompleteLinesAndFlushBetween()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "toString", "parse", "close"]}, "focal_class": {"identifier": "PrettyFormatter", "superclass": "", "interfaces": "implements Reporter, Formatter", "fields": [{"original_string": "private final StepPrinter stepPrinter = new StepPrinter();", "modifier": "private final", "type": "StepPrinter", "declarator": "stepPrinter = new StepPrinter()", "var_name": "stepPrinter"}, {"original_string": "private final NiceAppendable out;", "modifier": "private final", "type": "NiceAppendable", "declarator": "out", "var_name": "out"}, {"original_string": "private final boolean executing;", "modifier": "private final", "type": "boolean", "declarator": "executing", "var_name": "executing"}, {"original_string": "private String uri;", "modifier": "private", "type": "String", "declarator": "uri", "var_name": "uri"}, {"original_string": "private Mapper<Tag, String> tagNameMapper = new Mapper<Tag, String>() {\n        @Override\n        public String map(Tag tag) {\n            return tag.getName();\n        }\n    };", "modifier": "private", "type": "Mapper<Tag, String>", "declarator": "tagNameMapper = new Mapper<Tag, String>() {\n        @Override\n        public String map(Tag tag) {\n            return tag.getName();\n        }\n    }", "var_name": "tagNameMapper"}, {"original_string": "private Formats formats;", "modifier": "private", "type": "Formats", "declarator": "formats", "var_name": "formats"}, {"original_string": "private Match match;", "modifier": "private", "type": "Match", "declarator": "match", "var_name": "match"}, {"original_string": "private int[][] cellLengths;", "modifier": "private", "type": "int[][]", "declarator": "cellLengths", "var_name": "cellLengths"}, {"original_string": "private int[] maxLengths;", "modifier": "private", "type": "int[]", "declarator": "maxLengths", "var_name": "maxLengths"}, {"original_string": "private int rowIndex;", "modifier": "private", "type": "int", "declarator": "rowIndex", "var_name": "rowIndex"}, {"original_string": "private List<? extends Row> rows;", "modifier": "private", "type": "List<? extends Row>", "declarator": "rows", "var_name": "rows"}, {"original_string": "private Integer rowHeight = null;", "modifier": "private", "type": "Integer", "declarator": "rowHeight = null", "var_name": "rowHeight"}, {"original_string": "private boolean rowsAbove = false;", "modifier": "private", "type": "boolean", "declarator": "rowsAbove = false", "var_name": "rowsAbove"}, {"original_string": "private List<Step> steps = new ArrayList<Step>();", "modifier": "private", "type": "List<Step>", "declarator": "steps = new ArrayList<Step>()", "var_name": "steps"}, {"original_string": "private List<Integer> indentations = new ArrayList<Integer>();", "modifier": "private", "type": "List<Integer>", "declarator": "indentations = new ArrayList<Integer>()", "var_name": "indentations"}, {"original_string": "private List<MatchResultPair> matchesAndResults = new ArrayList<MatchResultPair>();", "modifier": "private", "type": "List<MatchResultPair>", "declarator": "matchesAndResults = new ArrayList<MatchResultPair>()", "var_name": "matchesAndResults"}, {"original_string": "private DescribedStatement statement;", "modifier": "private", "type": "DescribedStatement", "declarator": "statement", "var_name": "statement"}, {"original_string": "private static final Pattern START = Pattern.compile(\"^\", Pattern.MULTILINE);", "modifier": "private static final", "type": "Pattern", "declarator": "START = Pattern.compile(\"^\", Pattern.MULTILINE)", "var_name": "START"}, {"original_string": "private static final Pattern TRIPLE_QUOTES = Pattern.compile(\"\\\"\\\"\\\"\", Pattern.MULTILINE);", "modifier": "private static final", "type": "Pattern", "declarator": "TRIPLE_QUOTES = Pattern.compile(\"\\\"\\\"\\\"\", Pattern.MULTILINE)", "var_name": "TRIPLE_QUOTES"}, {"original_string": "private static final String ESCAPED_TRIPLE_QUOTES = \"\\\\\\\\\\\"\\\\\\\\\\\"\\\\\\\\\\\"\";", "modifier": "private static final", "type": "String", "declarator": "ESCAPED_TRIPLE_QUOTES = \"\\\\\\\\\\\"\\\\\\\\\\\"\\\\\\\\\\\"\"", "var_name": "ESCAPED_TRIPLE_QUOTES"}], "methods": [{"identifier": "PrettyFormatter", "parameters": "(Appendable out, boolean monochrome, boolean executing)", "modifiers": "public", "return": "", "signature": " PrettyFormatter(Appendable out, boolean monochrome, boolean executing)", "full_signature": "public  PrettyFormatter(Appendable out, boolean monochrome, boolean executing)", "class_method_signature": "PrettyFormatter.PrettyFormatter(Appendable out, boolean monochrome, boolean executing)", "testcase": false, "constructor": true}, {"identifier": "setMonochrome", "parameters": "(boolean monochrome)", "modifiers": "public", "return": "void", "signature": "void setMonochrome(boolean monochrome)", "full_signature": "public void setMonochrome(boolean monochrome)", "class_method_signature": "PrettyFormatter.setMonochrome(boolean monochrome)", "testcase": false, "constructor": false}, {"identifier": "uri", "parameters": "(String uri)", "modifiers": "@Override public", "return": "void", "signature": "void uri(String uri)", "full_signature": "@Override public void uri(String uri)", "class_method_signature": "PrettyFormatter.uri(String uri)", "testcase": false, "constructor": false}, {"identifier": "feature", "parameters": "(Feature feature)", "modifiers": "@Override public", "return": "void", "signature": "void feature(Feature feature)", "full_signature": "@Override public void feature(Feature feature)", "class_method_signature": "PrettyFormatter.feature(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "background", "parameters": "(Background background)", "modifiers": "@Override public", "return": "void", "signature": "void background(Background background)", "full_signature": "@Override public void background(Background background)", "class_method_signature": "PrettyFormatter.background(Background background)", "testcase": false, "constructor": false}, {"identifier": "scenario", "parameters": "(Scenario scenario)", "modifiers": "@Override public", "return": "void", "signature": "void scenario(Scenario scenario)", "full_signature": "@Override public void scenario(Scenario scenario)", "class_method_signature": "PrettyFormatter.scenario(Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "scenarioOutline", "parameters": "(ScenarioOutline scenarioOutline)", "modifiers": "@Override public", "return": "void", "signature": "void scenarioOutline(ScenarioOutline scenarioOutline)", "full_signature": "@Override public void scenarioOutline(ScenarioOutline scenarioOutline)", "class_method_signature": "PrettyFormatter.scenarioOutline(ScenarioOutline scenarioOutline)", "testcase": false, "constructor": false}, {"identifier": "startOfScenarioLifeCycle", "parameters": "(Scenario scenario)", "modifiers": "@Override public", "return": "void", "signature": "void startOfScenarioLifeCycle(Scenario scenario)", "full_signature": "@Override public void startOfScenarioLifeCycle(Scenario scenario)", "class_method_signature": "PrettyFormatter.startOfScenarioLifeCycle(Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "endOfScenarioLifeCycle", "parameters": "(Scenario scenario)", "modifiers": "@Override public", "return": "void", "signature": "void endOfScenarioLifeCycle(Scenario scenario)", "full_signature": "@Override public void endOfScenarioLifeCycle(Scenario scenario)", "class_method_signature": "PrettyFormatter.endOfScenarioLifeCycle(Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "replay", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void replay()", "full_signature": "private void replay()", "class_method_signature": "PrettyFormatter.replay()", "testcase": false, "constructor": false}, {"identifier": "printSteps", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void printSteps()", "full_signature": "private void printSteps()", "class_method_signature": "PrettyFormatter.printSteps()", "testcase": false, "constructor": false}, {"identifier": "printStatement", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void printStatement()", "full_signature": "private void printStatement()", "class_method_signature": "PrettyFormatter.printStatement()", "testcase": false, "constructor": false}, {"identifier": "indentedLocation", "parameters": "(String location)", "modifiers": "private", "return": "String", "signature": "String indentedLocation(String location)", "full_signature": "private String indentedLocation(String location)", "class_method_signature": "PrettyFormatter.indentedLocation(String location)", "testcase": false, "constructor": false}, {"identifier": "examples", "parameters": "(Examples examples)", "modifiers": "@Override public", "return": "void", "signature": "void examples(Examples examples)", "full_signature": "@Override public void examples(Examples examples)", "class_method_signature": "PrettyFormatter.examples(Examples examples)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(Step step)", "modifiers": "@Override public", "return": "void", "signature": "void step(Step step)", "full_signature": "@Override public void step(Step step)", "class_method_signature": "PrettyFormatter.step(Step step)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(Match match)", "modifiers": "@Override public", "return": "void", "signature": "void match(Match match)", "full_signature": "@Override public void match(Match match)", "class_method_signature": "PrettyFormatter.match(Match match)", "testcase": false, "constructor": false}, {"identifier": "addAnyOrphanMatch", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addAnyOrphanMatch()", "full_signature": "private void addAnyOrphanMatch()", "class_method_signature": "PrettyFormatter.addAnyOrphanMatch()", "testcase": false, "constructor": false}, {"identifier": "embedding", "parameters": "(String mimeType, byte[] data)", "modifiers": "@Override public", "return": "void", "signature": "void embedding(String mimeType, byte[] data)", "full_signature": "@Override public void embedding(String mimeType, byte[] data)", "class_method_signature": "PrettyFormatter.embedding(String mimeType, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String text)", "modifiers": "@Override public", "return": "void", "signature": "void write(String text)", "full_signature": "@Override public void write(String text)", "class_method_signature": "PrettyFormatter.write(String text)", "testcase": false, "constructor": false}, {"identifier": "result", "parameters": "(Result result)", "modifiers": "@Override public", "return": "void", "signature": "void result(Result result)", "full_signature": "@Override public void result(Result result)", "class_method_signature": "PrettyFormatter.result(Result result)", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "(Match match, Result result)", "modifiers": "@Override public", "return": "void", "signature": "void before(Match match, Result result)", "full_signature": "@Override public void before(Match match, Result result)", "class_method_signature": "PrettyFormatter.before(Match match, Result result)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "(Match match, Result result)", "modifiers": "@Override public", "return": "void", "signature": "void after(Match match, Result result)", "full_signature": "@Override public void after(Match match, Result result)", "class_method_signature": "PrettyFormatter.after(Match match, Result result)", "testcase": false, "constructor": false}, {"identifier": "printHookFailure", "parameters": "(Match match, Result result, boolean isBefore)", "modifiers": "private", "return": "void", "signature": "void printHookFailure(Match match, Result result, boolean isBefore)", "full_signature": "private void printHookFailure(Match match, Result result, boolean isBefore)", "class_method_signature": "PrettyFormatter.printHookFailure(Match match, Result result, boolean isBefore)", "testcase": false, "constructor": false}, {"identifier": "printStep", "parameters": "(String status, List<Argument> arguments, String location)", "modifiers": "private", "return": "void", "signature": "void printStep(String status, List<Argument> arguments, String location)", "full_signature": "private void printStep(String status, List<Argument> arguments, String location)", "class_method_signature": "PrettyFormatter.printStep(String status, List<Argument> arguments, String location)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "(String key)", "modifiers": "private", "return": "Format", "signature": "Format getFormat(String key)", "full_signature": "private Format getFormat(String key)", "class_method_signature": "PrettyFormatter.getFormat(String key)", "testcase": false, "constructor": false}, {"identifier": "getArgFormat", "parameters": "(String key)", "modifiers": "private", "return": "Format", "signature": "Format getArgFormat(String key)", "full_signature": "private Format getArgFormat(String key)", "class_method_signature": "PrettyFormatter.getArgFormat(String key)", "testcase": false, "constructor": false}, {"identifier": "table", "parameters": "(List<? extends Row> rows)", "modifiers": "public", "return": "void", "signature": "void table(List<? extends Row> rows)", "full_signature": "public void table(List<? extends Row> rows)", "class_method_signature": "PrettyFormatter.table(List<? extends Row> rows)", "testcase": false, "constructor": false}, {"identifier": "prepareTable", "parameters": "(List<? extends Row> rows)", "modifiers": "private", "return": "void", "signature": "void prepareTable(List<? extends Row> rows)", "full_signature": "private void prepareTable(List<? extends Row> rows)", "class_method_signature": "PrettyFormatter.prepareTable(List<? extends Row> rows)", "testcase": false, "constructor": false}, {"identifier": "getCellSafely", "parameters": "(final List<String> cells, final int colIndex)", "modifiers": "private", "return": "String", "signature": "String getCellSafely(final List<String> cells, final int colIndex)", "full_signature": "private String getCellSafely(final List<String> cells, final int colIndex)", "class_method_signature": "PrettyFormatter.getCellSafely(final List<String> cells, final int colIndex)", "testcase": false, "constructor": false}, {"identifier": "row", "parameters": "(List<CellResult> cellResults)", "modifiers": "public", "return": "void", "signature": "void row(List<CellResult> cellResults)", "full_signature": "public void row(List<CellResult> cellResults)", "class_method_signature": "PrettyFormatter.row(List<CellResult> cellResults)", "testcase": false, "constructor": false}, {"identifier": "printError", "parameters": "(Result result)", "modifiers": "private", "return": "void", "signature": "void printError(Result result)", "full_signature": "private void printError(Result result)", "class_method_signature": "PrettyFormatter.printError(Result result)", "testcase": false, "constructor": false}, {"identifier": "nextRow", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nextRow()", "full_signature": "public void nextRow()", "class_method_signature": "PrettyFormatter.nextRow()", "testcase": false, "constructor": false}, {"identifier": "syntaxError", "parameters": "(String state, String event, List<String> legalEvents, String uri, Integer line)", "modifiers": "@Override public", "return": "void", "signature": "void syntaxError(String state, String event, List<String> legalEvents, String uri, Integer line)", "full_signature": "@Override public void syntaxError(String state, String event, List<String> legalEvents, String uri, Integer line)", "class_method_signature": "PrettyFormatter.syntaxError(String state, String event, List<String> legalEvents, String uri, Integer line)", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void done()", "full_signature": "@Override public void done()", "class_method_signature": "PrettyFormatter.done()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PrettyFormatter.close()", "testcase": false, "constructor": false}, {"identifier": "escapeCell", "parameters": "(String cell)", "modifiers": "private", "return": "String", "signature": "String escapeCell(String cell)", "full_signature": "private String escapeCell(String cell)", "class_method_signature": "PrettyFormatter.escapeCell(String cell)", "testcase": false, "constructor": false}, {"identifier": "docString", "parameters": "(DocString docString)", "modifiers": "public", "return": "void", "signature": "void docString(DocString docString)", "full_signature": "public void docString(DocString docString)", "class_method_signature": "PrettyFormatter.docString(DocString docString)", "testcase": false, "constructor": false}, {"identifier": "eof", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void eof()", "full_signature": "public void eof()", "class_method_signature": "PrettyFormatter.eof()", "testcase": false, "constructor": false}, {"identifier": "calculateLocationIndentations", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calculateLocationIndentations()", "full_signature": "private void calculateLocationIndentations()", "class_method_signature": "PrettyFormatter.calculateLocationIndentations()", "testcase": false, "constructor": false}, {"identifier": "padSpace", "parameters": "(StringBuilder buffer, int indent)", "modifiers": "private", "return": "void", "signature": "void padSpace(StringBuilder buffer, int indent)", "full_signature": "private void padSpace(StringBuilder buffer, int indent)", "class_method_signature": "PrettyFormatter.padSpace(StringBuilder buffer, int indent)", "testcase": false, "constructor": false}, {"identifier": "printComments", "parameters": "(List<Comment> comments, String indent)", "modifiers": "private", "return": "void", "signature": "void printComments(List<Comment> comments, String indent)", "full_signature": "private void printComments(List<Comment> comments, String indent)", "class_method_signature": "PrettyFormatter.printComments(List<Comment> comments, String indent)", "testcase": false, "constructor": false}, {"identifier": "printTags", "parameters": "(List<Tag> tags, String indent)", "modifiers": "private", "return": "void", "signature": "void printTags(List<Tag> tags, String indent)", "full_signature": "private void printTags(List<Tag> tags, String indent)", "class_method_signature": "PrettyFormatter.printTags(List<Tag> tags, String indent)", "testcase": false, "constructor": false}, {"identifier": "printDescription", "parameters": "(String description, String indentation, boolean newline)", "modifiers": "private", "return": "void", "signature": "void printDescription(String description, String indentation, boolean newline)", "full_signature": "private void printDescription(String description, String indentation, boolean newline)", "class_method_signature": "PrettyFormatter.printDescription(String description, String indentation, boolean newline)", "testcase": false, "constructor": false}, {"identifier": "indent", "parameters": "(String s, String indentation)", "modifiers": "private static", "return": "String", "signature": "String indent(String s, String indentation)", "full_signature": "private static String indent(String s, String indentation)", "class_method_signature": "PrettyFormatter.indent(String s, String indentation)", "testcase": false, "constructor": false}, {"identifier": "escapeTripleQuotes", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String escapeTripleQuotes(String s)", "full_signature": "private static String escapeTripleQuotes(String s)", "class_method_signature": "PrettyFormatter.escapeTripleQuotes(String s)", "testcase": false, "constructor": false}], "file": "java/src/main/java/gherkin/formatter/PrettyFormatter.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        out.close();\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PrettyFormatter.close()", "testcase": false, "constructor": false, "invocations": ["close"]}, "repository": {"repo_id": 293812, "url": "https://github.com/cucumber-attic/gherkin2", "stars": 393, "created": "9/1/2009 12:42:05 AM +00:00", "updates": "2019-09-28T22:05:48+00:00", "fork": "False", "license": "licensed"}}