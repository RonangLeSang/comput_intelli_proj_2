{"test_class": {"identifier": "NodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int NUMBER_OF_NETWORKS = 2;", "modifier": "private static", "type": "int", "declarator": "NUMBER_OF_NETWORKS = 2", "var_name": "NUMBER_OF_NETWORKS"}, {"original_string": "Node node;", "modifier": "", "type": "Node", "declarator": "node", "var_name": "node"}, {"original_string": "Channel channel1;", "modifier": "", "type": "Channel", "declarator": "channel1", "var_name": "channel1"}, {"original_string": "Network [] networks;", "modifier": "", "type": "Network []", "declarator": "networks", "var_name": "networks"}, {"original_string": "NetworkKey networkKey1 = new NetworkKey(0,0,0,0,0,0,0,0);", "modifier": "", "type": "NetworkKey", "declarator": "networkKey1 = new NetworkKey(0,0,0,0,0,0,0,0)", "var_name": "networkKey1"}, {"original_string": "NetworkKey networkKey2 = new NetworkKey(1,0,0,0,0,0,0,0);", "modifier": "", "type": "NetworkKey", "declarator": "networkKey2 = new NetworkKey(1,0,0,0,0,0,0,0)", "var_name": "networkKey2"}], "file": "jformica_core/src/test/java/org/cowboycoders/ant/NodeTest.java"}, "test_case": {"identifier": "shouldLimitNumberOfNetworks", "parameters": "()", "modifiers": "@Test (expected=NetworkAllocationException.class) public", "return": "void", "body": "@Test (expected=NetworkAllocationException.class)\n    public void shouldLimitNumberOfNetworks() {\n    \tfor (int i = 0 ; i <= NUMBER_OF_NETWORKS ; i++) {\n    \t\tnode.getNetworkForKey(new NetworkKey(i,0,0,0,0,0,0,0));\n    \t}\n    }", "signature": "void shouldLimitNumberOfNetworks()", "full_signature": "@Test (expected=NetworkAllocationException.class) public void shouldLimitNumberOfNetworks()", "class_method_signature": "NodeTest.shouldLimitNumberOfNetworks()", "testcase": true, "constructor": false, "invocations": ["getNetworkForKey"]}, "focal_class": {"identifier": "Node", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Logger LOGGER = Logger.getLogger(EventMachine.class\n\t\t\t.getName());", "modifier": "public final static", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(EventMachine.class\n\t\t\t.getName())", "var_name": "LOGGER"}, {"original_string": "private final Set<AntLogger> antLoggers = Collections\n\t\t\t.newSetFromMap(new WeakHashMap<AntLogger, Boolean>());", "modifier": "private final", "type": "Set<AntLogger>", "declarator": "antLoggers = Collections\n\t\t\t.newSetFromMap(new WeakHashMap<AntLogger, Boolean>())", "var_name": "antLoggers"}, {"original_string": "private boolean running = false;", "modifier": "private", "type": "boolean", "declarator": "running = false", "var_name": "running"}, {"original_string": "private EventMachine evm;", "modifier": "private", "type": "EventMachine", "declarator": "evm", "var_name": "evm"}, {"original_string": "private Channel[] channels = new Channel[0];", "modifier": "private", "type": "Channel[]", "declarator": "channels = new Channel[0]", "var_name": "channels"}, {"original_string": "private Network[] networks = new Network[0];", "modifier": "private", "type": "Network[]", "declarator": "networks = new Network[0]", "var_name": "networks"}, {"original_string": "private CapabilityResponse capabilities;", "modifier": "private", "type": "CapabilityResponse", "declarator": "capabilities", "var_name": "capabilities"}, {"original_string": "private AntChipInterface antChipInterface;", "modifier": "private", "type": "AntChipInterface", "declarator": "antChipInterface", "var_name": "antChipInterface"}, {"original_string": "private BroadcastMessenger<AntStatusUpdate> mStatusMessenger = new BroadcastMessenger<AntStatusUpdate>();", "modifier": "private", "type": "BroadcastMessenger<AntStatusUpdate>", "declarator": "mStatusMessenger = new BroadcastMessenger<AntStatusUpdate>()", "var_name": "mStatusMessenger"}, {"original_string": "private volatile boolean weReset;", "modifier": "private volatile", "type": "boolean", "declarator": "weReset", "var_name": "weReset"}, {"original_string": "private NetworkListener networkListener = new NetworkListenerImpl();", "modifier": "private", "type": "NetworkListener", "declarator": "networkListener = new NetworkListenerImpl()", "var_name": "networkListener"}, {"original_string": "private final MessageSender nodeSender = new MessageSender() {\n\n\t\t@Override\n\t\tpublic List<MessageMetaWrapper<? extends StandardMessage>> send(\n\t\t\t\tStandardMessage msg) {\n\t\t\tMessageMetaWrapper<StandardMessage> sentMeta = Node.this.send(msg);\n\t\t\tList<MessageMetaWrapper<? extends StandardMessage>> rtn = new ArrayList<MessageMetaWrapper<? extends StandardMessage>>(\n\t\t\t\t\t1);\n\t\t\trtn.add(sentMeta);\n\t\t\treturn rtn;\n\t\t}\n\n\t};", "modifier": "private final", "type": "MessageSender", "declarator": "nodeSender = new MessageSender() {\n\n\t\t@Override\n\t\tpublic List<MessageMetaWrapper<? extends StandardMessage>> send(\n\t\t\t\tStandardMessage msg) {\n\t\t\tMessageMetaWrapper<StandardMessage> sentMeta = Node.this.send(msg);\n\t\t\tList<MessageMetaWrapper<? extends StandardMessage>> rtn = new ArrayList<MessageMetaWrapper<? extends StandardMessage>>(\n\t\t\t\t\t1);\n\t\t\trtn.add(sentMeta);\n\t\t\treturn rtn;\n\t\t}\n\n\t}", "var_name": "nodeSender"}, {"original_string": "private Map<Object, BroadcastListener<StandardMessage>> mAdapterListenerMap = new HashMap<Object, BroadcastListener<StandardMessage>>();", "modifier": "private", "type": "Map<Object, BroadcastListener<StandardMessage>>", "declarator": "mAdapterListenerMap = new HashMap<Object, BroadcastListener<StandardMessage>>()", "var_name": "mAdapterListenerMap"}], "methods": [{"identifier": "getEvm", "parameters": "()", "modifiers": "protected synchronized", "return": "EventMachine", "signature": "EventMachine getEvm()", "full_signature": "protected synchronized EventMachine getEvm()", "class_method_signature": "Node.getEvm()", "testcase": false, "constructor": false}, {"identifier": "Node", "parameters": "(AntChipInterface antchip)", "modifiers": "public", "return": "", "signature": " Node(AntChipInterface antchip)", "full_signature": "public  Node(AntChipInterface antchip)", "class_method_signature": "Node.Node(AntChipInterface antchip)", "testcase": false, "constructor": true}, {"identifier": "getAntChip", "parameters": "()", "modifiers": "public", "return": "AntChipInterface", "signature": "AntChipInterface getAntChip()", "full_signature": "public AntChipInterface getAntChip()", "class_method_signature": "Node.getAntChip()", "testcase": false, "constructor": false}, {"identifier": "registerStatusListener", "parameters": "(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "modifiers": "public synchronized", "return": "void", "signature": "void registerStatusListener(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "full_signature": "public synchronized void registerStatusListener(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "class_method_signature": "Node.registerStatusListener(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "testcase": false, "constructor": false}, {"identifier": "removeStatusListener", "parameters": "(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "modifiers": "public synchronized", "return": "void", "signature": "void removeStatusListener(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "full_signature": "public synchronized void removeStatusListener(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "class_method_signature": "Node.removeStatusListener(\n\t\t\tBroadcastListener<AntStatusUpdate> listener)", "testcase": false, "constructor": false}, {"identifier": "getCapabiltites", "parameters": "()", "modifiers": "public synchronized", "return": "List<Capability>", "signature": "List<Capability> getCapabiltites()", "full_signature": "public synchronized List<Capability> getCapabiltites()", "class_method_signature": "Node.getCapabiltites()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void start()", "full_signature": "public synchronized void start()", "class_method_signature": "Node.start()", "testcase": false, "constructor": false}, {"identifier": "getCapabilityResponse", "parameters": "(final int maxRetries)", "modifiers": "private", "return": "CapabilityResponse", "signature": "CapabilityResponse getCapabilityResponse(final int maxRetries)", "full_signature": "private CapabilityResponse getCapabilityResponse(final int maxRetries)", "class_method_signature": "Node.getCapabilityResponse(final int maxRetries)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "Node.init()", "testcase": false, "constructor": false}, {"identifier": "freeNetwork", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void freeNetwork(int i)", "full_signature": "private void freeNetwork(int i)", "class_method_signature": "Node.freeNetwork(int i)", "testcase": false, "constructor": false}, {"identifier": "getFreeChannel", "parameters": "()", "modifiers": "public synchronized", "return": "Channel", "signature": "Channel getFreeChannel()", "full_signature": "public synchronized Channel getFreeChannel()", "class_method_signature": "Node.getFreeChannel()", "testcase": false, "constructor": false}, {"identifier": "freeChannel", "parameters": "(Channel channel)", "modifiers": "public synchronized", "return": "void", "signature": "void freeChannel(Channel channel)", "full_signature": "public synchronized void freeChannel(Channel channel)", "class_method_signature": "Node.freeChannel(Channel channel)", "testcase": false, "constructor": false}, {"identifier": "setNetworkKey", "parameters": "(int network, NetworkKey key,\n\t\t\tboolean send)", "modifiers": "private synchronized", "return": "void", "signature": "void setNetworkKey(int network, NetworkKey key,\n\t\t\tboolean send)", "full_signature": "private synchronized void setNetworkKey(int network, NetworkKey key,\n\t\t\tboolean send)", "class_method_signature": "Node.setNetworkKey(int network, NetworkKey key,\n\t\t\tboolean send)", "testcase": false, "constructor": false}, {"identifier": "setNetworkKey", "parameters": "(int network, NetworkKey key)", "modifiers": "@Deprecated public synchronized", "return": "void", "signature": "void setNetworkKey(int network, NetworkKey key)", "full_signature": "@Deprecated public synchronized void setNetworkKey(int network, NetworkKey key)", "class_method_signature": "Node.setNetworkKey(int network, NetworkKey key)", "testcase": false, "constructor": false}, {"identifier": "getNetworkForKey", "parameters": "(NetworkKey key)", "modifiers": "public synchronized", "return": "Network", "signature": "Network getNetworkForKey(NetworkKey key)", "full_signature": "public synchronized Network getNetworkForKey(NetworkKey key)", "class_method_signature": "Node.getNetworkForKey(NetworkKey key)", "testcase": false, "constructor": false}, {"identifier": "getMaxNetworks", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getMaxNetworks()", "full_signature": "public synchronized int getMaxNetworks()", "class_method_signature": "Node.getMaxNetworks()", "testcase": false, "constructor": false}, {"identifier": "getMaxChannels", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getMaxChannels()", "full_signature": "public synchronized int getMaxChannels()", "class_method_signature": "Node.getMaxChannels()", "testcase": false, "constructor": false}, {"identifier": "sendAndWaitWithAdapter", "parameters": "(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer)", "modifiers": "public", "return": "StandardMessage", "signature": "StandardMessage sendAndWaitWithAdapter(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer)", "full_signature": "public StandardMessage sendAndWaitWithAdapter(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer)", "class_method_signature": "Node.sendAndWaitWithAdapter(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer)", "testcase": false, "constructor": false}, {"identifier": "sendAndWaitWithAdapter", "parameters": "(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer,\n\t\t\tMessageSender sender, Receipt receipt)", "modifiers": "public", "return": "StandardMessage", "signature": "StandardMessage sendAndWaitWithAdapter(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer,\n\t\t\tMessageSender sender, Receipt receipt)", "full_signature": "public StandardMessage sendAndWaitWithAdapter(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer,\n\t\t\tMessageSender sender, Receipt receipt)", "class_method_signature": "Node.sendAndWaitWithAdapter(WaitAdapter waitAdapter,\n\t\t\tStandardMessage msg, LockExchangeContainer lockContainer,\n\t\t\tMessageSender sender, Receipt receipt)", "testcase": false, "constructor": false}, {"identifier": "registerRxListener", "parameters": "(\n\t\t\tfinal BroadcastListener<V> listener, final Class<V> clazz)", "modifiers": "public synchronized", "return": "void", "signature": "void registerRxListener(\n\t\t\tfinal BroadcastListener<V> listener, final Class<V> clazz)", "full_signature": "public synchronized void registerRxListener(\n\t\t\tfinal BroadcastListener<V> listener, final Class<V> clazz)", "class_method_signature": "Node.registerRxListener(\n\t\t\tfinal BroadcastListener<V> listener, final Class<V> clazz)", "testcase": false, "constructor": false}, {"identifier": "removeRxListener", "parameters": "(\n\t\t\tfinal BroadcastListener<V> listener)", "modifiers": "public synchronized", "return": "void", "signature": "void removeRxListener(\n\t\t\tfinal BroadcastListener<V> listener)", "full_signature": "public synchronized void removeRxListener(\n\t\t\tfinal BroadcastListener<V> listener)", "class_method_signature": "Node.removeRxListener(\n\t\t\tfinal BroadcastListener<V> listener)", "testcase": false, "constructor": false}, {"identifier": "sendAndWaitForMessage", "parameters": "(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt)", "modifiers": "public", "return": "StandardMessage", "signature": "StandardMessage sendAndWaitForMessage(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt)", "full_signature": "public StandardMessage sendAndWaitForMessage(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt)", "class_method_signature": "Node.sendAndWaitForMessage(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt)", "testcase": false, "constructor": false}, {"identifier": "sendAndWaitForMessage", "parameters": "(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt, final MessageCondition errorCheckCondition)", "modifiers": "public", "return": "StandardMessage", "signature": "StandardMessage sendAndWaitForMessage(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt, final MessageCondition errorCheckCondition)", "full_signature": "public StandardMessage sendAndWaitForMessage(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt, final MessageCondition errorCheckCondition)", "class_method_signature": "Node.sendAndWaitForMessage(final StandardMessage msg,\n\t\t\tfinal MessageCondition condition, final Long timeout,\n\t\t\tfinal TimeUnit timeoutUnit, final MessageSender sender,\n\t\t\tfinal Receipt receipt, final MessageCondition errorCheckCondition)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(boolean wait)", "modifiers": "public synchronized", "return": "void", "signature": "void reset(boolean wait)", "full_signature": "public synchronized void reset(boolean wait)", "class_method_signature": "Node.reset(boolean wait)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "Node.reset()", "testcase": false, "constructor": false}, {"identifier": "logMessage", "parameters": "(AntLogger.Direction direction, StandardMessage msg)", "modifiers": "private", "return": "void", "signature": "void logMessage(AntLogger.Direction direction, StandardMessage msg)", "full_signature": "private void logMessage(AntLogger.Direction direction, StandardMessage msg)", "class_method_signature": "Node.logMessage(AntLogger.Direction direction, StandardMessage msg)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(\n\t\t\tStandardMessage msg)", "modifiers": "public synchronized", "return": "MessageMetaWrapper<StandardMessage>", "signature": "MessageMetaWrapper<StandardMessage> send(\n\t\t\tStandardMessage msg)", "full_signature": "public synchronized MessageMetaWrapper<StandardMessage> send(\n\t\t\tStandardMessage msg)", "class_method_signature": "Node.send(\n\t\t\tStandardMessage msg)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void stop()", "full_signature": "public synchronized void stop()", "class_method_signature": "Node.stop()", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "public synchronized boolean isRunning()", "class_method_signature": "Node.isRunning()", "testcase": false, "constructor": false}, {"identifier": "registerAntLogger", "parameters": "(AntLogger logger)", "modifiers": "public", "return": "void", "signature": "void registerAntLogger(AntLogger logger)", "full_signature": "public void registerAntLogger(AntLogger logger)", "class_method_signature": "Node.registerAntLogger(AntLogger logger)", "testcase": false, "constructor": false}, {"identifier": "unregisterAntLogger", "parameters": "(AntLogger logger)", "modifiers": "public", "return": "void", "signature": "void unregisterAntLogger(AntLogger logger)", "full_signature": "public void unregisterAntLogger(AntLogger logger)", "class_method_signature": "Node.unregisterAntLogger(AntLogger logger)", "testcase": false, "constructor": false}, {"identifier": "registerEventHandler", "parameters": "(NodeEventHandler handler)", "modifiers": "public", "return": "void", "signature": "void registerEventHandler(NodeEventHandler handler)", "full_signature": "public void registerEventHandler(NodeEventHandler handler)", "class_method_signature": "Node.registerEventHandler(NodeEventHandler handler)", "testcase": false, "constructor": false}, {"identifier": "sendAndWaitForResponseNoError", "parameters": "(StandardMessage msg)", "modifiers": "public", "return": "void", "signature": "void sendAndWaitForResponseNoError(StandardMessage msg)", "full_signature": "public void sendAndWaitForResponseNoError(StandardMessage msg)", "class_method_signature": "Node.sendAndWaitForResponseNoError(StandardMessage msg)", "testcase": false, "constructor": false}, {"identifier": "handleTimeOutException", "parameters": "(Exception e)", "modifiers": "private", "return": "void", "signature": "void handleTimeOutException(Exception e)", "full_signature": "private void handleTimeOutException(Exception e)", "class_method_signature": "Node.handleTimeOutException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "setTransmitPower", "parameters": "(int powerLevel)", "modifiers": "public synchronized", "return": "void", "signature": "void setTransmitPower(int powerLevel)", "full_signature": "public synchronized void setTransmitPower(int powerLevel)", "class_method_signature": "Node.setTransmitPower(int powerLevel)", "testcase": false, "constructor": false}, {"identifier": "setLibConfig", "parameters": "(boolean enableChannelId, boolean enableRssi,\n\t\t\tboolean enableTimestamps)", "modifiers": "public synchronized", "return": "void", "signature": "void setLibConfig(boolean enableChannelId, boolean enableRssi,\n\t\t\tboolean enableTimestamps)", "full_signature": "public synchronized void setLibConfig(boolean enableChannelId, boolean enableRssi,\n\t\t\tboolean enableTimestamps)", "class_method_signature": "Node.setLibConfig(boolean enableChannelId, boolean enableRssi,\n\t\t\tboolean enableTimestamps)", "testcase": false, "constructor": false}, {"identifier": "enableExtendedMessages", "parameters": "(boolean enable)", "modifiers": "public synchronized", "return": "void", "signature": "void enableExtendedMessages(boolean enable)", "full_signature": "public synchronized void enableExtendedMessages(boolean enable)", "class_method_signature": "Node.enableExtendedMessages(boolean enable)", "testcase": false, "constructor": false}], "file": "jformica_core/src/main/java/org/cowboycoders/ant/Node.java"}, "focal_method": {"identifier": "getNetworkForKey", "parameters": "(NetworkKey key)", "modifiers": "public synchronized", "return": "Network", "body": "public synchronized Network getNetworkForKey(NetworkKey key) {\n\t\tint count = 0;\n\t\tInteger freeIndex = null;\n\t\t\n\t\tfor (Network network : networks) {\n\t\t\tNetworkKey currentNetworkKey = network.getNetworkKey();\n\t\t\t\n\t\t\t// if network not associated with a key already\n\t\t\tif (currentNetworkKey == null) {\n\t\t\t\tif (freeIndex == null) {\n\t\t\t\t\tfreeIndex = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if key already mapped\n\t\t\telse if (currentNetworkKey.equals(key)) {\n\t\t\t\treturn new NetworkHandle(network);\n\t\t\t}\n\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif (freeIndex == null) {\n\t\t\tthrow new NetworkAllocationException(\"No free networks available\");\n\t\t}\n\t\tsetNetworkKey(freeIndex, key, true);\n\t\treturn new NetworkHandle(networks[freeIndex]);\n\t}", "signature": "Network getNetworkForKey(NetworkKey key)", "full_signature": "public synchronized Network getNetworkForKey(NetworkKey key)", "class_method_signature": "Node.getNetworkForKey(NetworkKey key)", "testcase": false, "constructor": false, "invocations": ["getNetworkKey", "equals", "setNetworkKey"]}, "repository": {"repo_id": 7416746, "url": "https://github.com/fluxoid-org/JFormica", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 17, "size": 25201, "license": "licensed"}}