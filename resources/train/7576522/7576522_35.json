{"test_class": {"identifier": "StorageTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/github/jeluard/stone/spi/StorageTest.java"}, "test_case": {"identifier": "shouldDuringStopWhenAllStop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldDuringStopWhenAllStop() throws IOException {\n    final long millis = System.currentTimeMillis();\n    final long millis2 = millis + 1;\n    final long millis3 = millis + 2;\n    final long millis4 = millis + 3;\n    final long millis5 = millis + 4;\n    final Storage storage = createStorage(1000, Arrays.asList(new Pair<Long, int[]>(millis, new int[0]), \n                new Pair<Long, int[]>(millis2, new int[0]),\n                new Pair<Long, int[]>(millis3, new int[0]),\n                new Pair<Long, int[]>(millis4, new int[0])));\n\n    final Iterable<Pair<Long, int[]>> iterable = storage.during(millis3, millis5);\n    final Iterator<Pair<Long, int[]>> result = iterable.iterator();\n    Assert.assertEquals(millis3, (long) result.next().first);\n    Assert.assertEquals(millis4, (long) result.next().first);\n    Assert.assertFalse(result.hasNext());\n  }", "signature": "void shouldDuringStopWhenAllStop()", "full_signature": "@Test public void shouldDuringStopWhenAllStop()", "class_method_signature": "StorageTest.shouldDuringStopWhenAllStop()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "createStorage", "asList", "during", "iterator", "assertEquals", "next", "assertEquals", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "Storage", "superclass": "", "interfaces": "implements Reader", "fields": [{"original_string": "private final int maximumSize;", "modifier": "private final", "type": "int", "declarator": "maximumSize", "var_name": "maximumSize"}], "methods": [{"identifier": "Storage", "parameters": "(final int maximumSize)", "modifiers": "public", "return": "", "signature": " Storage(final int maximumSize)", "full_signature": "public  Storage(final int maximumSize)", "class_method_signature": "Storage.Storage(final int maximumSize)", "testcase": false, "constructor": true}, {"identifier": "getMaximumSize", "parameters": "()", "modifiers": "protected final", "return": "int", "signature": "int getMaximumSize()", "full_signature": "protected final int getMaximumSize()", "class_method_signature": "Storage.getMaximumSize()", "testcase": false, "constructor": false}, {"identifier": "beginning", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Long>", "signature": "Optional<Long> beginning()", "full_signature": "@Override public Optional<Long> beginning()", "class_method_signature": "Storage.beginning()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Long>", "signature": "Optional<Long> end()", "full_signature": "@Override public Optional<Long> end()", "class_method_signature": "Storage.end()", "testcase": false, "constructor": false}, {"identifier": "during", "parameters": "(final long beginning, final long end)", "modifiers": "@Override public", "return": "Iterable<Pair<Long, int[]>>", "signature": "Iterable<Pair<Long, int[]>> during(final long beginning, final long end)", "full_signature": "@Override public Iterable<Pair<Long, int[]>> during(final long beginning, final long end)", "class_method_signature": "Storage.during(final long beginning, final long end)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(long timestamp, int[] values)", "modifiers": "public abstract", "return": "void", "signature": "void append(long timestamp, int[] values)", "full_signature": "public abstract void append(long timestamp, int[] values)", "class_method_signature": "Storage.append(long timestamp, int[] values)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/jeluard/stone/spi/Storage.java"}, "focal_method": {"identifier": "during", "parameters": "(final long beginning, final long end)", "modifiers": "@Override public", "return": "Iterable<Pair<Long, int[]>>", "body": "@Override\n  public Iterable<Pair<Long, int[]>> during(final long beginning, final long end) throws IOException {\n    return new Iterable<Pair<Long, int[]>>() {\n      final Iterable<Pair<Long, int[]>> all = all();\n      @Override \n      public Iterator<Pair<Long, int[]>> iterator() {\n        return new AbstractIterator<Pair<Long, int[]>>() {\n          final Iterator<Pair<Long, int[]>> iterator = all.iterator();\n          @Override\n          protected Pair<Long, int[]> computeNext() {\n            while (this.iterator.hasNext()) {\n              final Pair<Long, int[]> consolidates = this.iterator.next();\n              final long timestamp = consolidates.first;\n              if (timestamp < beginning) {\n                //Before the beginning\n                continue;\n              }\n              if (timestamp > end) {\n                //After the beginning\n                break;\n              }\n\n              return consolidates;\n            }\n            return endOfData();\n          }\n        };\n      }\n    };\n  }", "signature": "Iterable<Pair<Long, int[]>> during(final long beginning, final long end)", "full_signature": "@Override public Iterable<Pair<Long, int[]>> during(final long beginning, final long end)", "class_method_signature": "Storage.during(final long beginning, final long end)", "testcase": false, "constructor": false, "invocations": ["all", "iterator", "hasNext", "next", "endOfData"]}, "repository": {"repo_id": 7576522, "url": "https://github.com/jeluard/stone", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 1168, "license": "licensed"}}