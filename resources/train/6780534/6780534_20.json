{"test_class": {"identifier": "MessagesDataMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FAKE_ID = \"123\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_ID = \"123\"", "var_name": "FAKE_ID"}, {"original_string": "private static final String FAKE_SUBJECT = \"fake-subject\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SUBJECT = \"fake-subject\"", "var_name": "FAKE_SUBJECT"}, {"original_string": "private static final String FAKE_MESSAGE = \"fake-message\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_MESSAGE = \"fake-message\"", "var_name": "FAKE_MESSAGE"}, {"original_string": "private static final long FAKE_DATE = 123L;", "modifier": "private static final", "type": "long", "declarator": "FAKE_DATE = 123L", "var_name": "FAKE_DATE"}, {"original_string": "@Mock UserModelDataMapper mockUserModelDataMapper;", "modifier": "@Mock", "type": "UserModelDataMapper", "declarator": "mockUserModelDataMapper", "var_name": "mockUserModelDataMapper"}, {"original_string": "@Mock User mockDomainSender;", "modifier": "@Mock", "type": "User", "declarator": "mockDomainSender", "var_name": "mockDomainSender"}, {"original_string": "@Mock User mockDomainReceiver;", "modifier": "@Mock", "type": "User", "declarator": "mockDomainReceiver", "var_name": "mockDomainReceiver"}, {"original_string": "@Mock UserModel mockPresentationSender;", "modifier": "@Mock", "type": "UserModel", "declarator": "mockPresentationSender", "var_name": "mockPresentationSender"}, {"original_string": "@Mock UserModel mockPresentationReceiver;", "modifier": "@Mock", "type": "UserModel", "declarator": "mockPresentationReceiver", "var_name": "mockPresentationReceiver"}, {"original_string": "private MessagesDataMapper messagesDataMapper;", "modifier": "private", "type": "MessagesDataMapper", "declarator": "messagesDataMapper", "var_name": "messagesDataMapper"}], "file": "app/src/test/java/de/elanev/studip/android/app/messages/presentation/mapper/MessagesDataMapperTest.java"}, "test_case": {"identifier": "transformMessagesListToMessageModelList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void transformMessagesListToMessageModelList() throws Exception {\n    Message mockMessage1= mock(Message.class);\n    Message mockMessage2 = mock(Message.class);\n\n    List<Message> list = new ArrayList<>(5);\n    list.add(mockMessage1);\n    list.add(mockMessage2);\n\n    List<MessageModel> messageModelList = messagesDataMapper.transform(list);\n\n    assertThat(messageModelList.toArray()[0], is(instanceOf(MessageModel.class)));\n    assertThat(messageModelList.toArray()[1], is(instanceOf(MessageModel.class)));\n    assertThat(messageModelList.size(), is(2));\n  }", "signature": "void transformMessagesListToMessageModelList()", "full_signature": "@Test public void transformMessagesListToMessageModelList()", "class_method_signature": "MessagesDataMapperTest.transformMessagesListToMessageModelList()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "add", "add", "transform", "assertThat", "toArray", "is", "instanceOf", "assertThat", "toArray", "is", "instanceOf", "assertThat", "size", "is"]}, "focal_class": {"identifier": "MessagesDataMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UserModelDataMapper userDataMapper;", "modifier": "private final", "type": "UserModelDataMapper", "declarator": "userDataMapper", "var_name": "userDataMapper"}], "methods": [{"identifier": "MessagesDataMapper", "parameters": "(UserModelDataMapper userModelDataMapper)", "modifiers": "@Inject", "return": "", "signature": " MessagesDataMapper(UserModelDataMapper userModelDataMapper)", "full_signature": "@Inject  MessagesDataMapper(UserModelDataMapper userModelDataMapper)", "class_method_signature": "MessagesDataMapper.MessagesDataMapper(UserModelDataMapper userModelDataMapper)", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(List<Message> messages)", "modifiers": "public", "return": "List<MessageModel>", "signature": "List<MessageModel> transform(List<Message> messages)", "full_signature": "public List<MessageModel> transform(List<Message> messages)", "class_method_signature": "MessagesDataMapper.transform(List<Message> messages)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Message message)", "modifiers": "public", "return": "MessageModel", "signature": "MessageModel transform(Message message)", "full_signature": "public MessageModel transform(Message message)", "class_method_signature": "MessagesDataMapper.transform(Message message)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(MessageModel messageModel)", "modifiers": "public", "return": "Message", "signature": "Message transform(MessageModel messageModel)", "full_signature": "public Message transform(MessageModel messageModel)", "class_method_signature": "MessagesDataMapper.transform(MessageModel messageModel)", "testcase": false, "constructor": false}], "file": "app/src/main/java/de/elanev/studip/android/app/messages/presentation/mapper/MessagesDataMapper.java"}, "focal_method": {"identifier": "transform", "parameters": "(List<Message> messages)", "modifiers": "public", "return": "List<MessageModel>", "body": "public List<MessageModel> transform(List<Message> messages) {\n    List<MessageModel> messageModels = new ArrayList<>();\n\n    for (Message message : messages) {\n      if (message != null) {\n        messageModels.add(transform(message));\n      }\n    }\n\n    return messageModels;\n  }", "signature": "List<MessageModel> transform(List<Message> messages)", "full_signature": "public List<MessageModel> transform(List<Message> messages)", "class_method_signature": "MessagesDataMapper.transform(List<Message> messages)", "testcase": false, "constructor": false, "invocations": ["add", "transform"]}, "repository": {"repo_id": 6780534, "url": "https://github.com/elan-ev/StudIPAndroidApp", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 11, "size": 27254, "license": "licensed"}}