{"test_class": {"identifier": "FacilityTypeRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private FacilityTypeMapper mapper;", "modifier": "@Mock\n  private", "type": "FacilityTypeMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private FacilityTypeRepository repo;", "modifier": "private", "type": "FacilityTypeRepository", "declarator": "repo", "var_name": "repo"}], "file": "modules/core/src/test/java/org/openlmis/core/repository/FacilityTypeRepositoryTest.java"}, "test_case": {"identifier": "shouldThrowNullPointerExceptionOnSaveWithNull", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n  public void shouldThrowNullPointerExceptionOnSaveWithNull() {\n    repo.save(null);\n  }", "signature": "void shouldThrowNullPointerExceptionOnSaveWithNull()", "full_signature": "@Test(expected = NullPointerException.class) public void shouldThrowNullPointerExceptionOnSaveWithNull()", "class_method_signature": "FacilityTypeRepositoryTest.shouldThrowNullPointerExceptionOnSaveWithNull()", "testcase": true, "constructor": false, "invocations": ["save"]}, "focal_class": {"identifier": "FacilityTypeRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ERROR_FACILITY_TYPE_CODE_INVALID = \"error.facility.type.code.invalid\";", "modifier": "public static final", "type": "String", "declarator": "ERROR_FACILITY_TYPE_CODE_INVALID = \"error.facility.type.code.invalid\"", "var_name": "ERROR_FACILITY_TYPE_CODE_INVALID"}, {"original_string": "private FacilityTypeMapper mapper;", "modifier": "private", "type": "FacilityTypeMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "FacilityTypeRepository", "parameters": "(FacilityTypeMapper facilityTypeMapper)", "modifiers": "@Autowired public", "return": "", "signature": " FacilityTypeRepository(FacilityTypeMapper facilityTypeMapper)", "full_signature": "@Autowired public  FacilityTypeRepository(FacilityTypeMapper facilityTypeMapper)", "class_method_signature": "FacilityTypeRepository.FacilityTypeRepository(FacilityTypeMapper facilityTypeMapper)", "testcase": false, "constructor": true}, {"identifier": "getByCode", "parameters": "(String code)", "modifiers": "public", "return": "FacilityType", "signature": "FacilityType getByCode(String code)", "full_signature": "public FacilityType getByCode(String code)", "class_method_signature": "FacilityTypeRepository.getByCode(String code)", "testcase": false, "constructor": false}, {"identifier": "getByCodeOrThrowException", "parameters": "(String code)", "modifiers": "public", "return": "FacilityType", "signature": "FacilityType getByCodeOrThrowException(String code)", "full_signature": "public FacilityType getByCodeOrThrowException(String code)", "class_method_signature": "FacilityTypeRepository.getByCodeOrThrowException(String code)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<FacilityType>", "signature": "List<FacilityType> getAll()", "full_signature": "public List<FacilityType> getAll()", "class_method_signature": "FacilityTypeRepository.getAll()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(FacilityType facilityType)", "modifiers": "public", "return": "void", "signature": "void save(FacilityType facilityType)", "full_signature": "public void save(FacilityType facilityType)", "class_method_signature": "FacilityTypeRepository.save(FacilityType facilityType)", "testcase": false, "constructor": false}, {"identifier": "getFacilityTypeByCode", "parameters": "(FacilityType facilityType)", "modifiers": "public", "return": "FacilityType", "signature": "FacilityType getFacilityTypeByCode(FacilityType facilityType)", "full_signature": "public FacilityType getFacilityTypeByCode(FacilityType facilityType)", "class_method_signature": "FacilityTypeRepository.getFacilityTypeByCode(FacilityType facilityType)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/repository/FacilityTypeRepository.java"}, "focal_method": {"identifier": "save", "parameters": "(FacilityType facilityType)", "modifiers": "public", "return": "void", "body": "public void save(FacilityType facilityType) {\n    if(facilityType == null) throw new NullPointerException(\"FacilityType argument is null\");\n\n    try {\n      if(facilityType.hasId()) mapper.update(facilityType);\n      else mapper.insert(facilityType);\n    } catch(DuplicateKeyException dke) {\n      throw new DataException(\"error.duplicate.facility.type\", dke);\n    } catch(DataIntegrityViolationException dive) {\n      throw new DataException(\"error.incorrect.length\", dive);\n    }\n  }", "signature": "void save(FacilityType facilityType)", "full_signature": "public void save(FacilityType facilityType)", "class_method_signature": "FacilityTypeRepository.save(FacilityType facilityType)", "testcase": false, "constructor": false, "invocations": ["hasId", "update", "insert"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}