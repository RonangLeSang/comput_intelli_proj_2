{"test_class": {"identifier": "AtomFeedControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  EventFeedService eventFeedService;", "modifier": "@Mock", "type": "EventFeedService", "declarator": "eventFeedService", "var_name": "eventFeedService"}, {"original_string": "@Mock\n  VendorEventFeedService vendorEventFeedService;", "modifier": "@Mock", "type": "VendorEventFeedService", "declarator": "vendorEventFeedService", "var_name": "vendorEventFeedService"}, {"original_string": "@InjectMocks\n  AtomFeedController controller;", "modifier": "@InjectMocks", "type": "AtomFeedController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Mock\n  HttpServletRequest request;", "modifier": "@Mock", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}], "file": "modules/openlmis-web/src/test/java/org/openlmis/web/controller/AtomFeedControllerTest.java"}, "test_case": {"identifier": "shouldFeedById", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldFeedById() throws Exception {\n    String category = \"category1\";\n    String vendor = \"vendor1\";\n    String baseUrl = \"baseUrl\";\n    int feedNumber = 1;\n\n    when(vendorEventFeedService.getEventFeed(\"baseUrl/path\", vendor, category, feedNumber)).thenReturn(\"xml atom feed content\");\n\n    String feed = controller.getFeed(category, vendor, feedNumber, baseUrl, request);\n\n    assertThat(feed, is(\"xml atom feed content\"));\n  }", "signature": "void shouldFeedById()", "full_signature": "@Test public void shouldFeedById()", "class_method_signature": "AtomFeedControllerTest.shouldFeedById()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getEventFeed", "getFeed", "assertThat", "is"]}, "focal_class": {"identifier": "AtomFeedController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private VendorEventFeedService vendorEventFeedService;", "modifier": "@Autowired\n  private", "type": "VendorEventFeedService", "declarator": "vendorEventFeedService", "var_name": "vendorEventFeedService"}], "methods": [{"identifier": "getRecentFeeds", "parameters": "(@PathVariable(value = \"category\") String category,\n                               @RequestParam(value = \"vendor\", required = false) String vendor,\n                               @Value(\"${app.url}\") String baseUrl,\n                               HttpServletRequest request)", "modifiers": "@RequestMapping(method = GET, value = \"feeds/{category}/recent\", produces = \"application/atom+xml\") @ResponseBody public", "return": "String", "signature": "String getRecentFeeds(@PathVariable(value = \"category\") String category,\n                               @RequestParam(value = \"vendor\", required = false) String vendor,\n                               @Value(\"${app.url}\") String baseUrl,\n                               HttpServletRequest request)", "full_signature": "@RequestMapping(method = GET, value = \"feeds/{category}/recent\", produces = \"application/atom+xml\") @ResponseBody public String getRecentFeeds(@PathVariable(value = \"category\") String category,\n                               @RequestParam(value = \"vendor\", required = false) String vendor,\n                               @Value(\"${app.url}\") String baseUrl,\n                               HttpServletRequest request)", "class_method_signature": "AtomFeedController.getRecentFeeds(@PathVariable(value = \"category\") String category,\n                               @RequestParam(value = \"vendor\", required = false) String vendor,\n                               @Value(\"${app.url}\") String baseUrl,\n                               HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getFeed", "parameters": "(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "modifiers": "@RequestMapping(method = GET, value = \"feeds/{category}/{feedNumber}\", produces = \"application/atom+xml\") @ResponseBody public", "return": "String", "signature": "String getFeed(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "full_signature": "@RequestMapping(method = GET, value = \"feeds/{category}/{feedNumber}\", produces = \"application/atom+xml\") @ResponseBody public String getFeed(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "class_method_signature": "AtomFeedController.getFeed(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "modules/openlmis-web/src/main/java/org/openlmis/web/controller/AtomFeedController.java"}, "focal_method": {"identifier": "getFeed", "parameters": "(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "modifiers": "@RequestMapping(method = GET, value = \"feeds/{category}/{feedNumber}\", produces = \"application/atom+xml\") @ResponseBody public", "return": "String", "body": "@RequestMapping(method = GET, value = \"feeds/{category}/{feedNumber}\", produces = \"application/atom+xml\")\n  @ResponseBody\n  public String getFeed(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request) {\n\n    return vendorEventFeedService.getEventFeed(baseUrl + request.getServletPath(), vendor, category, feedNumber);\n  }", "signature": "String getFeed(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "full_signature": "@RequestMapping(method = GET, value = \"feeds/{category}/{feedNumber}\", produces = \"application/atom+xml\") @ResponseBody public String getFeed(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "class_method_signature": "AtomFeedController.getFeed(@PathVariable(value = \"category\") String category,\n                        @RequestParam(value = \"vendor\", required = false) String vendor,\n                        @PathVariable Integer feedNumber,\n                        @Value(\"${app.url}\") String baseUrl,\n                        HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["getEventFeed", "getServletPath"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}