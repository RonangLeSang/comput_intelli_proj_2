{"test_class": {"identifier": "VaccineReportControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  VaccineReportService service;", "modifier": "@Mock", "type": "VaccineReportService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n  ProgramService programService;", "modifier": "@Mock", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Mock\n  FacilityService facilityService;", "modifier": "@Mock", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Mock\n  UserService userService;", "modifier": "@Mock", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@InjectMocks\n  VaccineReportController controller;", "modifier": "@InjectMocks", "type": "VaccineReportController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private MockHttpSession session;", "modifier": "private", "type": "MockHttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "private MockHttpServletRequest httpServletRequest;", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}], "file": "modules/openlmis-web/src/test/java/org/openlmis/web/controller/vaccine/VaccineReportControllerTest.java"}, "test_case": {"identifier": "shouldGetReport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetReport() throws Exception {\n    VaccineReport report = new VaccineReport();\n    when(service.getById(23L)).thenReturn(report);\n\n    ResponseEntity<OpenLmisResponse> response = controller.getReport(23L);\n\n    verify(service).getById(23L);\n    assertThat(report, is(response.getBody().getData().get(\"report\")));\n  }", "signature": "void shouldGetReport()", "full_signature": "@Test public void shouldGetReport()", "class_method_signature": "VaccineReportControllerTest.shouldGetReport()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getById", "getReport", "getById", "verify", "assertThat", "is", "get", "getData", "getBody"]}, "focal_class": {"identifier": "VaccineReportController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "public static final String PERIODS = \"periods\";", "modifier": "public static final", "type": "String", "declarator": "PERIODS = \"periods\"", "var_name": "PERIODS"}, {"original_string": "public static final String REPORT = \"report\";", "modifier": "public static final", "type": "String", "declarator": "REPORT = \"report\"", "var_name": "REPORT"}, {"original_string": "@Autowired\n  VaccineReportService service;", "modifier": "@Autowired", "type": "VaccineReportService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n  ProgramService programService;", "modifier": "@Autowired", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Autowired\n  UserService userService;", "modifier": "@Autowired", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Autowired\n  FacilityService facilityService;", "modifier": "@Autowired", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}], "methods": [{"identifier": "getPeriods", "parameters": "(@PathVariable Long facilityId, @PathVariable Long programId)", "modifiers": "@RequestMapping(value = \"periods/{facilityId}/{programId}\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getPeriods(@PathVariable Long facilityId, @PathVariable Long programId)", "full_signature": "@RequestMapping(value = \"periods/{facilityId}/{programId}\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public ResponseEntity<OpenLmisResponse> getPeriods(@PathVariable Long facilityId, @PathVariable Long programId)", "class_method_signature": "VaccineReportController.getPeriods(@PathVariable Long facilityId, @PathVariable Long programId)", "testcase": false, "constructor": false}, {"identifier": "getViewPeriods", "parameters": "(@PathVariable Long facilityId, @PathVariable Long programId)", "modifiers": "@RequestMapping(value = \"view-periods/{facilityId}/{programId}\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'VIEW_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getViewPeriods(@PathVariable Long facilityId, @PathVariable Long programId)", "full_signature": "@RequestMapping(value = \"view-periods/{facilityId}/{programId}\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'VIEW_IVD')\") public ResponseEntity<OpenLmisResponse> getViewPeriods(@PathVariable Long facilityId, @PathVariable Long programId)", "class_method_signature": "VaccineReportController.getViewPeriods(@PathVariable Long facilityId, @PathVariable Long programId)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(\n          @PathVariable Long facilityId,\n          @PathVariable Long programId,\n          @PathVariable Long periodId,\n          HttpServletRequest request\n  )", "modifiers": "@RequestMapping(value = \"initialize/{facilityId}/{programId}/{periodId}\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> initialize(\n          @PathVariable Long facilityId,\n          @PathVariable Long programId,\n          @PathVariable Long periodId,\n          HttpServletRequest request\n  )", "full_signature": "@RequestMapping(value = \"initialize/{facilityId}/{programId}/{periodId}\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public ResponseEntity<OpenLmisResponse> initialize(\n          @PathVariable Long facilityId,\n          @PathVariable Long programId,\n          @PathVariable Long periodId,\n          HttpServletRequest request\n  )", "class_method_signature": "VaccineReportController.initialize(\n          @PathVariable Long facilityId,\n          @PathVariable Long programId,\n          @PathVariable Long periodId,\n          HttpServletRequest request\n  )", "testcase": false, "constructor": false}, {"identifier": "getReport", "parameters": "(@PathVariable Long id)", "modifiers": "@RequestMapping(value = \"get/{id}.json\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD, VIEW_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getReport(@PathVariable Long id)", "full_signature": "@RequestMapping(value = \"get/{id}.json\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD, VIEW_IVD')\") public ResponseEntity<OpenLmisResponse> getReport(@PathVariable Long id)", "class_method_signature": "VaccineReportController.getReport(@PathVariable Long id)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@RequestBody VaccineReport report, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"save\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> save(@RequestBody VaccineReport report, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"save\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public ResponseEntity<OpenLmisResponse> save(@RequestBody VaccineReport report, HttpServletRequest request)", "class_method_signature": "VaccineReportController.save(@RequestBody VaccineReport report, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(@RequestBody VaccineReport report, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"submit\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> submit(@RequestBody VaccineReport report, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"submit\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public ResponseEntity<OpenLmisResponse> submit(@RequestBody VaccineReport report, HttpServletRequest request)", "class_method_signature": "VaccineReportController.submit(@RequestBody VaccineReport report, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getVaccineMonthlyReport", "parameters": "(@RequestParam(\"facility\") Long facilityId, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "modifiers": "@RequestMapping(value = \"vaccine-monthly-report\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getVaccineMonthlyReport(@RequestParam(\"facility\") Long facilityId, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "full_signature": "@RequestMapping(value = \"vaccine-monthly-report\") @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD')\") public ResponseEntity<OpenLmisResponse> getVaccineMonthlyReport(@RequestParam(\"facility\") Long facilityId, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "class_method_signature": "VaccineReportController.getVaccineMonthlyReport(@RequestParam(\"facility\") Long facilityId, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "testcase": false, "constructor": false}, {"identifier": "vaccineUsageTrend", "parameters": "(@RequestParam(\"facilityCode\") String facilityCode, @RequestParam(\"productCode\") String productCode, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "modifiers": "@RequestMapping(value = \"vaccine-usage-trend\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> vaccineUsageTrend(@RequestParam(\"facilityCode\") String facilityCode, @RequestParam(\"productCode\") String productCode, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "full_signature": "@RequestMapping(value = \"vaccine-usage-trend\") public ResponseEntity<OpenLmisResponse> vaccineUsageTrend(@RequestParam(\"facilityCode\") String facilityCode, @RequestParam(\"productCode\") String productCode, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "class_method_signature": "VaccineReportController.vaccineUsageTrend(@RequestParam(\"facilityCode\") String facilityCode, @RequestParam(\"productCode\") String productCode, @RequestParam(\"period\") Long periodId, @RequestParam(\"zone\") Long zoneId)", "testcase": false, "constructor": false}, {"identifier": "downloadPDF", "parameters": "()", "modifiers": "@RequestMapping(value = \"/orderRequisition/downloadPDF\", method = RequestMethod.GET) public", "return": "ModelAndView", "signature": "ModelAndView downloadPDF()", "full_signature": "@RequestMapping(value = \"/orderRequisition/downloadPDF\", method = RequestMethod.GET) public ModelAndView downloadPDF()", "class_method_signature": "VaccineReportController.downloadPDF()", "testcase": false, "constructor": false}], "file": "modules/openlmis-web/src/main/java/org/openlmis/web/controller/vaccine/VaccineReportController.java"}, "focal_method": {"identifier": "getReport", "parameters": "(@PathVariable Long id)", "modifiers": "@RequestMapping(value = \"get/{id}.json\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD, VIEW_IVD')\") public", "return": "ResponseEntity<OpenLmisResponse>", "body": "@RequestMapping(value = \"get/{id}.json\", method = RequestMethod.GET)\n  @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD, VIEW_IVD')\")\n  public ResponseEntity<OpenLmisResponse> getReport(@PathVariable Long id) {\n    return OpenLmisResponse.response(REPORT, service.getById(id));\n  }", "signature": "ResponseEntity<OpenLmisResponse> getReport(@PathVariable Long id)", "full_signature": "@RequestMapping(value = \"get/{id}.json\", method = RequestMethod.GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_IVD, VIEW_IVD')\") public ResponseEntity<OpenLmisResponse> getReport(@PathVariable Long id)", "class_method_signature": "VaccineReportController.getReport(@PathVariable Long id)", "testcase": false, "constructor": false, "invocations": ["response", "getById"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}