{"test_class": {"identifier": "ProcessingScheduleRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedEx = org.junit.rules.ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedEx = org.junit.rules.ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "@Mock\n  private ProcessingScheduleMapper processingScheduleMapper;", "modifier": "@Mock\n  private", "type": "ProcessingScheduleMapper", "declarator": "processingScheduleMapper", "var_name": "processingScheduleMapper"}, {"original_string": "private ProcessingScheduleRepository repository;", "modifier": "private", "type": "ProcessingScheduleRepository", "declarator": "repository", "var_name": "repository"}], "file": "modules/core/src/test/java/org/openlmis/core/repository/ProcessingScheduleRepositoryTest.java"}, "test_case": {"identifier": "shouldGetAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetAll() throws Exception {\n    List<ProcessingSchedule> scheduleList = new ArrayList<>();\n    scheduleList.add(new ProcessingSchedule());\n    when(processingScheduleMapper.getAll()).thenReturn(scheduleList);\n\n    List<ProcessingSchedule> schedules = repository.getAll();\n\n    assertThat(schedules, is(scheduleList));\n  }", "signature": "void shouldGetAll()", "full_signature": "@Test public void shouldGetAll()", "class_method_signature": "ProcessingScheduleRepositoryTest.shouldGetAll()", "testcase": true, "constructor": false, "invocations": ["add", "thenReturn", "when", "getAll", "getAll", "assertThat", "is"]}, "focal_class": {"identifier": "ProcessingScheduleRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProcessingScheduleMapper processingScheduleMapper;", "modifier": "private", "type": "ProcessingScheduleMapper", "declarator": "processingScheduleMapper", "var_name": "processingScheduleMapper"}], "methods": [{"identifier": "ProcessingScheduleRepository", "parameters": "(ProcessingScheduleMapper processingScheduleMapper)", "modifiers": "@Autowired public", "return": "", "signature": " ProcessingScheduleRepository(ProcessingScheduleMapper processingScheduleMapper)", "full_signature": "@Autowired public  ProcessingScheduleRepository(ProcessingScheduleMapper processingScheduleMapper)", "class_method_signature": "ProcessingScheduleRepository.ProcessingScheduleRepository(ProcessingScheduleMapper processingScheduleMapper)", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<ProcessingSchedule>", "signature": "List<ProcessingSchedule> getAll()", "full_signature": "public List<ProcessingSchedule> getAll()", "class_method_signature": "ProcessingScheduleRepository.getAll()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ProcessingSchedule processingSchedule)", "modifiers": "public", "return": "void", "signature": "void create(ProcessingSchedule processingSchedule)", "full_signature": "public void create(ProcessingSchedule processingSchedule)", "class_method_signature": "ProcessingScheduleRepository.create(ProcessingSchedule processingSchedule)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Long id)", "modifiers": "public", "return": "ProcessingSchedule", "signature": "ProcessingSchedule get(Long id)", "full_signature": "public ProcessingSchedule get(Long id)", "class_method_signature": "ProcessingScheduleRepository.get(Long id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ProcessingSchedule processingSchedule)", "modifiers": "public", "return": "void", "signature": "void update(ProcessingSchedule processingSchedule)", "full_signature": "public void update(ProcessingSchedule processingSchedule)", "class_method_signature": "ProcessingScheduleRepository.update(ProcessingSchedule processingSchedule)", "testcase": false, "constructor": false}, {"identifier": "getByCode", "parameters": "(String code)", "modifiers": "public", "return": "ProcessingSchedule", "signature": "ProcessingSchedule getByCode(String code)", "full_signature": "public ProcessingSchedule getByCode(String code)", "class_method_signature": "ProcessingScheduleRepository.getByCode(String code)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/repository/ProcessingScheduleRepository.java"}, "focal_method": {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<ProcessingSchedule>", "body": "public List<ProcessingSchedule> getAll() {\n    return processingScheduleMapper.getAll();\n  }", "signature": "List<ProcessingSchedule> getAll()", "full_signature": "public List<ProcessingSchedule> getAll()", "class_method_signature": "ProcessingScheduleRepository.getAll()", "testcase": false, "constructor": false, "invocations": ["getAll"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}