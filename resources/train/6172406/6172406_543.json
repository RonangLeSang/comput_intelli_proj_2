{"test_class": {"identifier": "RnrColumnTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/requisition/src/test/java/org/openlmis/rnr/domain/RnrColumnTest.java"}, "test_case": {"identifier": "shouldGetColumnTypeAsCurrencyForPrice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetColumnTypeAsCurrencyForPrice() {\n    RnrColumn rnrColumn = new RnrColumn();\n    rnrColumn.setName(\"price\");\n\n    assertThat(rnrColumn.getColumnType(), is(ColumnType.CURRENCY));\n  }", "signature": "void shouldGetColumnTypeAsCurrencyForPrice()", "full_signature": "@Test public void shouldGetColumnTypeAsCurrencyForPrice()", "class_method_signature": "RnrColumnTest.shouldGetColumnTypeAsCurrencyForPrice()", "testcase": true, "constructor": false, "invocations": ["setName", "assertThat", "getColumnType", "is"]}, "focal_class": {"identifier": "RnrColumn", "superclass": "extends Column", "interfaces": "", "fields": [{"original_string": "private int position;", "modifier": "private", "type": "int", "declarator": "position", "var_name": "position"}, {"original_string": "private RnRColumnSource source;", "modifier": "private", "type": "RnRColumnSource", "declarator": "source", "var_name": "source"}, {"original_string": "private Boolean sourceConfigurable;", "modifier": "private", "type": "Boolean", "declarator": "sourceConfigurable", "var_name": "sourceConfigurable"}, {"original_string": "private String formula;", "modifier": "private", "type": "String", "declarator": "formula", "var_name": "formula"}, {"original_string": "private String indicator;", "modifier": "private", "type": "String", "declarator": "indicator", "var_name": "indicator"}, {"original_string": "private boolean used;", "modifier": "private", "type": "boolean", "declarator": "used", "var_name": "used"}, {"original_string": "private boolean mandatory;", "modifier": "private", "type": "boolean", "declarator": "mandatory", "var_name": "mandatory"}, {"original_string": "private String calculationOption;", "modifier": "private", "type": "String", "declarator": "calculationOption", "var_name": "calculationOption"}, {"original_string": "private FormulaOption options;", "modifier": "private", "type": "FormulaOption", "declarator": "options", "var_name": "options"}, {"original_string": "private String description;", "modifier": "private", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private boolean formulaValidationRequired = true;", "modifier": "private", "type": "boolean", "declarator": "formulaValidationRequired = true", "var_name": "formulaValidationRequired"}, {"original_string": "private RnrColumnOption configuredOption;", "modifier": "private", "type": "RnrColumnOption", "declarator": "configuredOption", "var_name": "configuredOption"}, {"original_string": "private Long createdBy;", "modifier": "private", "type": "Long", "declarator": "createdBy", "var_name": "createdBy"}, {"original_string": "@JsonSerialize(include = NON_EMPTY)\n  private List<RnrColumnOption> rnrColumnOptions;", "modifier": "@JsonSerialize(include = NON_EMPTY)\n  private", "type": "List<RnrColumnOption>", "declarator": "rnrColumnOptions", "var_name": "rnrColumnOptions"}], "methods": [{"identifier": "setSourceString", "parameters": "(String sourceString)", "modifiers": "@SuppressWarnings(value = \"unused\") public", "return": "void", "signature": "void setSourceString(String sourceString)", "full_signature": "@SuppressWarnings(value = \"unused\") public void setSourceString(String sourceString)", "class_method_signature": "RnrColumn.setSourceString(String sourceString)", "testcase": false, "constructor": false}, {"identifier": "setOptions", "parameters": "(String opt)", "modifiers": "@SuppressWarnings(value = \"unused\") public", "return": "void", "signature": "void setOptions(String opt)", "full_signature": "@SuppressWarnings(value = \"unused\") public void setOptions(String opt)", "class_method_signature": "RnrColumn.setOptions(String opt)", "testcase": false, "constructor": false}, {"identifier": "getColumnWidth", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getColumnWidth()", "full_signature": "@Override public Integer getColumnWidth()", "class_method_signature": "RnrColumn.getColumnWidth()", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "()", "modifiers": "@Override public", "return": "ColumnType", "signature": "ColumnType getColumnType()", "full_signature": "@Override public ColumnType getColumnType()", "class_method_signature": "RnrColumn.getColumnType()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RnrColumn.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RnrColumn.hashCode()", "testcase": false, "constructor": false}], "file": "modules/requisition/src/main/java/org/openlmis/rnr/domain/RnrColumn.java"}, "focal_method": {"identifier": "getColumnType", "parameters": "()", "modifiers": "@Override public", "return": "ColumnType", "body": "@Override\n  public ColumnType getColumnType() {\n    if (this.getName().equals(\"price\") || this.getName().equals(\"cost\")) {\n      return ColumnType.CURRENCY;\n    }\n    if (this.getName().equals(\"product\") || this.getName().equals(\"dispensingUnit\") || this.getName().equals(\"productCode\")) {\n      return ColumnType.TEXT;\n    }\n    if (this.getName().equals(\"skipped\")) {\n      return ColumnType.BOOLEAN;\n    }\n    return ColumnType.NUMERIC;\n  }", "signature": "ColumnType getColumnType()", "full_signature": "@Override public ColumnType getColumnType()", "class_method_signature": "RnrColumn.getColumnType()", "testcase": false, "constructor": false, "invocations": ["equals", "getName", "equals", "getName", "equals", "getName", "equals", "getName", "equals", "getName", "equals", "getName"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}