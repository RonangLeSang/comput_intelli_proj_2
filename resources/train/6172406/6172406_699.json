{"test_class": {"identifier": "ReportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private String nullString = null;", "modifier": "private", "type": "String", "declarator": "nullString = null", "var_name": "nullString"}], "file": "modules/rest-api/src/test/java/org/openlmis/restapi/domain/ReportTest.java"}, "test_case": {"identifier": "shouldThrowExceptionIfReportDoesNotContainAgentCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldThrowExceptionIfReportDoesNotContainAgentCode() {\n    Report report = make(a(ReportBuilder.defaultReport, with(ReportBuilder.agentCode, nullString)));\n\n    expectedException.expect(DataException.class);\n    expectedException.expectMessage(\"error.mandatory.fields.missing\");\n\n    report.validate();\n  }", "signature": "void shouldThrowExceptionIfReportDoesNotContainAgentCode()", "full_signature": "@Test public void shouldThrowExceptionIfReportDoesNotContainAgentCode()", "class_method_signature": "ReportTest.shouldThrowExceptionIfReportDoesNotContainAgentCode()", "testcase": true, "constructor": false, "invocations": ["make", "a", "with", "expect", "expectMessage", "validate"]}, "focal_class": {"identifier": "Report", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<RnrLineItem> products;", "modifier": "private", "type": "List<RnrLineItem>", "declarator": "products", "var_name": "products"}, {"original_string": "private List<RnrLineItem> nonFullSupplyProducts;", "modifier": "private", "type": "List<RnrLineItem>", "declarator": "nonFullSupplyProducts", "var_name": "nonFullSupplyProducts"}, {"original_string": "private List<RegimenLineItem> regimens;", "modifier": "private", "type": "List<RegimenLineItem>", "declarator": "regimens", "var_name": "regimens"}, {"original_string": "private List<PatientQuantificationLineItem> patientQuantifications;", "modifier": "private", "type": "List<PatientQuantificationLineItem>", "declarator": "patientQuantifications", "var_name": "patientQuantifications"}, {"original_string": "private String agentCode;", "modifier": "private", "type": "String", "declarator": "agentCode", "var_name": "agentCode"}, {"original_string": "private String programCode;", "modifier": "private", "type": "String", "declarator": "programCode", "var_name": "programCode"}, {"original_string": "private String approverName;", "modifier": "private", "type": "String", "declarator": "approverName", "var_name": "approverName"}, {"original_string": "private Long periodId;", "modifier": "private", "type": "Long", "declarator": "periodId", "var_name": "periodId"}, {"original_string": "private Boolean emergency;", "modifier": "private", "type": "Boolean", "declarator": "emergency", "var_name": "emergency"}, {"original_string": "private String clientSubmittedTime;", "modifier": "private", "type": "String", "declarator": "clientSubmittedTime", "var_name": "clientSubmittedTime"}, {"original_string": "private String clientSubmittedNotes;", "modifier": "private", "type": "String", "declarator": "clientSubmittedNotes", "var_name": "clientSubmittedNotes"}, {"original_string": "private Date periodStartDate;", "modifier": "private", "type": "Date", "declarator": "periodStartDate", "var_name": "periodStartDate"}, {"original_string": "private List<Signature> rnrSignatures;", "modifier": "private", "type": "List<Signature>", "declarator": "rnrSignatures", "var_name": "rnrSignatures"}], "methods": [{"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "Report.validate()", "testcase": false, "constructor": false}, {"identifier": "getClientSubmittedTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getClientSubmittedTime()", "full_signature": "public Date getClientSubmittedTime()", "class_method_signature": "Report.getClientSubmittedTime()", "testcase": false, "constructor": false}, {"identifier": "getRequisition", "parameters": "(Long requisitionId, Long modifiedBy)", "modifiers": "@JsonIgnore public", "return": "Rnr", "signature": "Rnr getRequisition(Long requisitionId, Long modifiedBy)", "full_signature": "@JsonIgnore public Rnr getRequisition(Long requisitionId, Long modifiedBy)", "class_method_signature": "Report.getRequisition(Long requisitionId, Long modifiedBy)", "testcase": false, "constructor": false}, {"identifier": "validateForApproval", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validateForApproval()", "full_signature": "public void validateForApproval()", "class_method_signature": "Report.validateForApproval()", "testcase": false, "constructor": false}, {"identifier": "prepareForREST", "parameters": "(final Rnr rnr)", "modifiers": "public static", "return": "Report", "signature": "Report prepareForREST(final Rnr rnr)", "full_signature": "public static Report prepareForREST(final Rnr rnr)", "class_method_signature": "Report.prepareForREST(final Rnr rnr)", "testcase": false, "constructor": false}], "file": "modules/rest-api/src/main/java/org/openlmis/restapi/domain/Report.java"}, "focal_method": {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void validate() {\n    if (isEmpty(agentCode) || isEmpty(programCode)) {\n      throw new DataException(\"error.mandatory.fields.missing\");\n    }\n  }", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "Report.validate()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}