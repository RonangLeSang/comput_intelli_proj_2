{"test_class": {"identifier": "UserAuthenticationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UserAuthenticationService userAuthenticationService;", "modifier": "private", "type": "UserAuthenticationService", "declarator": "userAuthenticationService", "var_name": "userAuthenticationService"}, {"original_string": "@Mock\n  @SuppressWarnings(\"unused\")\n  private UserService userService;", "modifier": "@Mock\n  @SuppressWarnings(\"unused\")\n  private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "file": "modules/authentication/src/test/java/org/openlmis/authentication/service/UserAuthenticationServiceTest.java"}, "test_case": {"identifier": "shouldNotAuthenticateRestrictedUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotAuthenticateRestrictedUser() {\n    mockStatic(Encoder.class);\n    when(Encoder.hash(\"defaultPassword\")).thenReturn(\"hashedPassword\");\n    User user = new User();\n    user.setUserName(\"defaultUserName\");\n    user.setPassword(\"defaultPassword\");\n    user.setRestrictLogin(true);\n\n    when(userService.selectUserByUserNameAndPassword(\"defaultUserName\", \"hashedPassword\")).thenReturn(user);\n\n    UserToken userToken = userAuthenticationService.authenticateUser(user);\n\n    verify(userService).selectUserByUserNameAndPassword(\"defaultUserName\", \"hashedPassword\");\n    assertThat(userToken.isAuthenticated(), is(false));\n  }", "signature": "void shouldNotAuthenticateRestrictedUser()", "full_signature": "@Test public void shouldNotAuthenticateRestrictedUser()", "class_method_signature": "UserAuthenticationServiceTest.shouldNotAuthenticateRestrictedUser()", "testcase": true, "constructor": false, "invocations": ["mockStatic", "thenReturn", "when", "hash", "setUserName", "setPassword", "setRestrictLogin", "thenReturn", "when", "selectUserByUserNameAndPassword", "authenticateUser", "selectUserByUserNameAndPassword", "verify", "assertThat", "isAuthenticated", "is"]}, "focal_class": {"identifier": "UserAuthenticationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean AUTHENTICATION_SUCCESSFUL = true;", "modifier": "private static final", "type": "boolean", "declarator": "AUTHENTICATION_SUCCESSFUL = true", "var_name": "AUTHENTICATION_SUCCESSFUL"}, {"original_string": "private static final boolean AUTHENTICATION_FAILED = false;", "modifier": "private static final", "type": "boolean", "declarator": "AUTHENTICATION_FAILED = false", "var_name": "AUTHENTICATION_FAILED"}, {"original_string": "private UserService userService;", "modifier": "private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "methods": [{"identifier": "UserAuthenticationService", "parameters": "(UserService userService)", "modifiers": "@Autowired public", "return": "", "signature": " UserAuthenticationService(UserService userService)", "full_signature": "@Autowired public  UserAuthenticationService(UserService userService)", "class_method_signature": "UserAuthenticationService.UserAuthenticationService(UserService userService)", "testcase": false, "constructor": true}, {"identifier": "authenticateUser", "parameters": "(User user)", "modifiers": "public", "return": "UserToken", "signature": "UserToken authenticateUser(User user)", "full_signature": "public UserToken authenticateUser(User user)", "class_method_signature": "UserAuthenticationService.authenticateUser(User user)", "testcase": false, "constructor": false}], "file": "modules/authentication/src/main/java/org/openlmis/authentication/service/UserAuthenticationService.java"}, "focal_method": {"identifier": "authenticateUser", "parameters": "(User user)", "modifiers": "public", "return": "UserToken", "body": "public UserToken authenticateUser(User user) {\n    User fetchedUser = userService.selectUserByUserNameAndPassword(user.getUserName(),\n      user.getPassword());\n    if (fetchedUser == null || fetchedUser.getRestrictLogin())\n      return new UserToken(user.getUserName(), null, AUTHENTICATION_FAILED);\n\n    return new UserToken(fetchedUser.getUserName(), fetchedUser.getId(), AUTHENTICATION_SUCCESSFUL);\n  }", "signature": "UserToken authenticateUser(User user)", "full_signature": "public UserToken authenticateUser(User user)", "class_method_signature": "UserAuthenticationService.authenticateUser(User user)", "testcase": false, "constructor": false, "invocations": ["selectUserByUserNameAndPassword", "getUserName", "getPassword", "getRestrictLogin", "getUserName", "getUserName", "getId"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}