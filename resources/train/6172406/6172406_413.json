{"test_class": {"identifier": "CalculationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Rnr rnr;", "modifier": "private", "type": "Rnr", "declarator": "rnr", "var_name": "rnr"}, {"original_string": "private Integer M;", "modifier": "private", "type": "Integer", "declarator": "M", "var_name": "M"}, {"original_string": "@Mock\n  List<LossesAndAdjustmentsType> lossesAndAdjustmentsTypes;", "modifier": "@Mock", "type": "List<LossesAndAdjustmentsType>", "declarator": "lossesAndAdjustmentsTypes", "var_name": "lossesAndAdjustmentsTypes"}, {"original_string": "@Mock\n  RequisitionRepository requisitionRepository;", "modifier": "@Mock", "type": "RequisitionRepository", "declarator": "requisitionRepository", "var_name": "requisitionRepository"}, {"original_string": "@Mock\n  ProcessingScheduleService processingScheduleService;", "modifier": "@Mock", "type": "ProcessingScheduleService", "declarator": "processingScheduleService", "var_name": "processingScheduleService"}, {"original_string": "@InjectMocks\n  CalculationService calculationService;", "modifier": "@InjectMocks", "type": "CalculationService", "declarator": "calculationService", "var_name": "calculationService"}, {"original_string": "private List<ProcessingPeriod> emptyPeriodList;", "modifier": "private", "type": "List<ProcessingPeriod>", "declarator": "emptyPeriodList", "var_name": "emptyPeriodList"}], "file": "modules/requisition/src/test/java/org/openlmis/rnr/service/CalculationServiceTest.java"}, "test_case": {"identifier": "shouldGetPreviousTwoNormalizedConsumptionFor1MonthInCurrentPeriodIfPreviousPeriodDoesNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetPreviousTwoNormalizedConsumptionFor1MonthInCurrentPeriodIfPreviousPeriodDoesNotExist() throws Exception {\n    Rnr requisition = getVirtualFacilityRnr();\n    String productCode = \"Code1\";\n    requisition.setFullSupplyLineItems(asList(make(a(defaultRnrLineItem, with(RnrLineItemBuilder.productCode, productCode)))));\n    requisition.setPeriod(make(a(defaultProcessingPeriod, with(numberOfMonths, 1))));\n\n    ProgramRnrTemplate programTemplate = new ProgramRnrTemplate();\n    RegimenTemplate regimenTemplate = new RegimenTemplate();\n    doNothing().when(requisition).setFieldsAccordingToTemplateFrom(null, programTemplate, regimenTemplate);\n\n    when(processingScheduleService.findM(requisition.getPeriod())).thenReturn(1);\n    when(processingScheduleService.getNPreviousPeriodsInDescOrder(requisition.getPeriod(), 5)).thenReturn(emptyPeriodList);\n    RnrLineItem rnrLineItem = new RnrLineItem();\n    rnrLineItem.setNormalizedConsumption(4);\n    RnrLineItem rnrLineItem2 = new RnrLineItem();\n    rnrLineItem2.setNormalizedConsumption(9);\n    List<RnrLineItem> rnrLineItems = asList(rnrLineItem, rnrLineItem2);\n    when(requisitionRepository.getAuthorizedRegularUnSkippedLineItems(productCode, requisition, 2, requisition.getPeriod().getStartDate())).thenReturn(rnrLineItems);\n\n    calculationService.fillFieldsForInitiatedRequisition(requisition, programTemplate, regimenTemplate);\n\n    verify(processingScheduleService).getNPreviousPeriodsInDescOrder(requisition.getPeriod(), 5);\n    verify(requisitionRepository).getAuthorizedRegularUnSkippedLineItems(productCode, requisition, 2, requisition.getPeriod().getStartDate());\n    assertThat(requisition.getFullSupplyLineItems().get(0).getPreviousNormalizedConsumptions(), is(asList(4, 9)));\n  }", "signature": "void shouldGetPreviousTwoNormalizedConsumptionFor1MonthInCurrentPeriodIfPreviousPeriodDoesNotExist()", "full_signature": "@Test public void shouldGetPreviousTwoNormalizedConsumptionFor1MonthInCurrentPeriodIfPreviousPeriodDoesNotExist()", "class_method_signature": "CalculationServiceTest.shouldGetPreviousTwoNormalizedConsumptionFor1MonthInCurrentPeriodIfPreviousPeriodDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["getVirtualFacilityRnr", "setFullSupplyLineItems", "asList", "make", "a", "with", "setPeriod", "make", "a", "with", "setFieldsAccordingToTemplateFrom", "when", "doNothing", "thenReturn", "when", "findM", "getPeriod", "thenReturn", "when", "getNPreviousPeriodsInDescOrder", "getPeriod", "setNormalizedConsumption", "setNormalizedConsumption", "asList", "thenReturn", "when", "getAuthorizedRegularUnSkippedLineItems", "getStartDate", "getPeriod", "fillFieldsForInitiatedRequisition", "getNPreviousPeriodsInDescOrder", "verify", "getPeriod", "getAuthorizedRegularUnSkippedLineItems", "verify", "getStartDate", "getPeriod", "assertThat", "getPreviousNormalizedConsumptions", "get", "getFullSupplyLineItems", "is", "asList"]}, "focal_class": {"identifier": "CalculationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MILLI_SECONDS_IN_ONE_DAY = 24 * 60 * 60 * 1000;", "modifier": "public static final", "type": "int", "declarator": "MILLI_SECONDS_IN_ONE_DAY = 24 * 60 * 60 * 1000", "var_name": "MILLI_SECONDS_IN_ONE_DAY"}, {"original_string": "public static final int MAX_NUMBER_OF_PERIODS_TO_TRACK = 5;", "modifier": "public static final", "type": "int", "declarator": "MAX_NUMBER_OF_PERIODS_TO_TRACK = 5", "var_name": "MAX_NUMBER_OF_PERIODS_TO_TRACK"}, {"original_string": "@Autowired\n  RequisitionRepository requisitionRepository;", "modifier": "@Autowired", "type": "RequisitionRepository", "declarator": "requisitionRepository", "var_name": "requisitionRepository"}, {"original_string": "@Autowired\n  ProcessingScheduleService processingScheduleService;", "modifier": "@Autowired", "type": "ProcessingScheduleService", "declarator": "processingScheduleService", "var_name": "processingScheduleService"}], "methods": [{"identifier": "perform", "parameters": "(Rnr requisition, ProgramRnrTemplate template)", "modifiers": "public", "return": "void", "signature": "void perform(Rnr requisition, ProgramRnrTemplate template)", "full_signature": "public void perform(Rnr requisition, ProgramRnrTemplate template)", "class_method_signature": "CalculationService.perform(Rnr requisition, ProgramRnrTemplate template)", "testcase": false, "constructor": false}, {"identifier": "fillReportingDays", "parameters": "(Rnr requisition)", "modifiers": "public", "return": "void", "signature": "void fillReportingDays(Rnr requisition)", "full_signature": "public void fillReportingDays(Rnr requisition)", "class_method_signature": "CalculationService.fillReportingDays(Rnr requisition)", "testcase": false, "constructor": false}, {"identifier": "fillFieldsForInitiatedRequisition", "parameters": "(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "modifiers": "public", "return": "void", "signature": "void fillFieldsForInitiatedRequisition(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "full_signature": "public void fillFieldsForInitiatedRequisition(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "class_method_signature": "CalculationService.fillFieldsForInitiatedRequisition(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "testcase": false, "constructor": false}, {"identifier": "copySkippedFieldFromPreviousPeriod", "parameters": "(Rnr requisition)", "modifiers": "public", "return": "void", "signature": "void copySkippedFieldFromPreviousPeriod(Rnr requisition)", "full_signature": "public void copySkippedFieldFromPreviousPeriod(Rnr requisition)", "class_method_signature": "CalculationService.copySkippedFieldFromPreviousPeriod(Rnr requisition)", "testcase": false, "constructor": false}, {"identifier": "getReportingDaysBasedOnRequisition", "parameters": "(Rnr requisition, String lineItemProductCode, Date startDate, Integer numberOfMonths)", "modifiers": "private", "return": "Integer", "signature": "Integer getReportingDaysBasedOnRequisition(Rnr requisition, String lineItemProductCode, Date startDate, Integer numberOfMonths)", "full_signature": "private Integer getReportingDaysBasedOnRequisition(Rnr requisition, String lineItemProductCode, Date startDate, Integer numberOfMonths)", "class_method_signature": "CalculationService.getReportingDaysBasedOnRequisition(Rnr requisition, String lineItemProductCode, Date startDate, Integer numberOfMonths)", "testcase": false, "constructor": false}, {"identifier": "getDaysForNC", "parameters": "(Date requisitionCreatedDate, Date calculationDate)", "modifiers": "private", "return": "Integer", "signature": "Integer getDaysForNC(Date requisitionCreatedDate, Date calculationDate)", "full_signature": "private Integer getDaysForNC(Date requisitionCreatedDate, Date calculationDate)", "class_method_signature": "CalculationService.getDaysForNC(Date requisitionCreatedDate, Date calculationDate)", "testcase": false, "constructor": false}, {"identifier": "fillPreviousNCsInLineItems", "parameters": "(Rnr requisition, Integer numberOfMonths, Date trackingDate)", "modifiers": "private", "return": "void", "signature": "void fillPreviousNCsInLineItems(Rnr requisition, Integer numberOfMonths, Date trackingDate)", "full_signature": "private void fillPreviousNCsInLineItems(Rnr requisition, Integer numberOfMonths, Date trackingDate)", "class_method_signature": "CalculationService.fillPreviousNCsInLineItems(Rnr requisition, Integer numberOfMonths, Date trackingDate)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPreviousNCToTrack", "parameters": "(Integer m)", "modifiers": "private", "return": "Integer", "signature": "Integer getNumberOfPreviousNCToTrack(Integer m)", "full_signature": "private Integer getNumberOfPreviousNCToTrack(Integer m)", "class_method_signature": "CalculationService.getNumberOfPreviousNCToTrack(Integer m)", "testcase": false, "constructor": false}, {"identifier": "getStartDateForNthPreviousPeriod", "parameters": "(List<ProcessingPeriod> fivePreviousPeriods, Integer index)", "modifiers": "private", "return": "Date", "signature": "Date getStartDateForNthPreviousPeriod(List<ProcessingPeriod> fivePreviousPeriods, Integer index)", "full_signature": "private Date getStartDateForNthPreviousPeriod(List<ProcessingPeriod> fivePreviousPeriods, Integer index)", "class_method_signature": "CalculationService.getStartDateForNthPreviousPeriod(List<ProcessingPeriod> fivePreviousPeriods, Integer index)", "testcase": false, "constructor": false}, {"identifier": "calculateForNonFullSupply", "parameters": "(Rnr requisition)", "modifiers": "private", "return": "void", "signature": "void calculateForNonFullSupply(Rnr requisition)", "full_signature": "private void calculateForNonFullSupply(Rnr requisition)", "class_method_signature": "CalculationService.calculateForNonFullSupply(Rnr requisition)", "testcase": false, "constructor": false}, {"identifier": "calculateForFullSupply", "parameters": "(Rnr requisition, ProgramRnrTemplate template)", "modifiers": "private", "return": "void", "signature": "void calculateForFullSupply(Rnr requisition, ProgramRnrTemplate template)", "full_signature": "private void calculateForFullSupply(Rnr requisition, ProgramRnrTemplate template)", "class_method_signature": "CalculationService.calculateForFullSupply(Rnr requisition, ProgramRnrTemplate template)", "testcase": false, "constructor": false}], "file": "modules/requisition/src/main/java/org/openlmis/rnr/service/CalculationService.java"}, "focal_method": {"identifier": "fillFieldsForInitiatedRequisition", "parameters": "(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "modifiers": "public", "return": "void", "body": "public void fillFieldsForInitiatedRequisition(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate) {\n    List<ProcessingPeriod> fivePreviousPeriods = processingScheduleService.getNPreviousPeriodsInDescOrder(requisition.getPeriod(), MAX_NUMBER_OF_PERIODS_TO_TRACK);\n\n    if (fivePreviousPeriods.size() == 0) {\n      requisition.setFieldsAccordingToTemplateFrom(null, rnrTemplate, regimenTemplate);\n      fillPreviousNCsInLineItems(requisition, requisition.getPeriod().getNumberOfMonths(), requisition.getPeriod().getStartDate());\n      return;\n    }\n\n    Rnr previousRequisition = requisitionRepository.getRegularRequisitionWithLineItems(requisition.getFacility(),\n      requisition.getProgram(), fivePreviousPeriods.get(0));\n    requisition.setFieldsAccordingToTemplateFrom(previousRequisition, rnrTemplate, regimenTemplate);\n\n    Integer numberOfMonths = fivePreviousPeriods.get(0).getNumberOfMonths();\n    Date trackingDate = fivePreviousPeriods.get(0).getStartDate();\n\n    int lastPeriodIndex = MAX_NUMBER_OF_PERIODS_TO_TRACK - 1;\n    int secondPeriodIndex = 1;\n\n    if (numberOfMonths == 1) {\n      trackingDate = getStartDateForNthPreviousPeriod(fivePreviousPeriods, lastPeriodIndex);\n    } else if (numberOfMonths == 2) {\n      trackingDate = getStartDateForNthPreviousPeriod(fivePreviousPeriods, secondPeriodIndex);\n    }\n\n    fillPreviousNCsInLineItems(requisition, numberOfMonths, trackingDate);\n  }", "signature": "void fillFieldsForInitiatedRequisition(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "full_signature": "public void fillFieldsForInitiatedRequisition(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "class_method_signature": "CalculationService.fillFieldsForInitiatedRequisition(Rnr requisition, ProgramRnrTemplate rnrTemplate, RegimenTemplate regimenTemplate)", "testcase": false, "constructor": false, "invocations": ["getNPreviousPeriodsInDescOrder", "getPeriod", "size", "setFieldsAccordingToTemplateFrom", "fillPreviousNCsInLineItems", "getNumberOfMonths", "getPeriod", "getStartDate", "getPeriod", "getRegularRequisitionWithLineItems", "getFacility", "getProgram", "get", "setFieldsAccordingToTemplateFrom", "getNumberOfMonths", "get", "getStartDate", "get", "getStartDateForNthPreviousPeriod", "getStartDateForNthPreviousPeriod", "fillPreviousNCsInLineItems"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}