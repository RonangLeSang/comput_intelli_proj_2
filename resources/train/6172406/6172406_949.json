{"test_class": {"identifier": "UploadControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Long USER = 1L;", "modifier": "public static final", "type": "Long", "declarator": "USER = 1L", "var_name": "USER"}, {"original_string": "@Mock\n  CSVParser csvParser;", "modifier": "@Mock", "type": "CSVParser", "declarator": "csvParser", "var_name": "csvParser"}, {"original_string": "@Mock\n  DbService dbService;", "modifier": "@Mock", "type": "DbService", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "@Mock\n  MessageService messageService;", "modifier": "@Mock", "type": "MessageService", "declarator": "messageService", "var_name": "messageService"}, {"original_string": "RecordHandler handler = new ProductPersistenceHandler();", "modifier": "", "type": "RecordHandler", "declarator": "handler = new ProductPersistenceHandler()", "var_name": "handler"}, {"original_string": "private MockHttpServletRequest request;", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private UploadBean productUploadBean = new UploadBean(\"product\", handler, Product.class);", "modifier": "private", "type": "UploadBean", "declarator": "productUploadBean = new UploadBean(\"product\", handler, Product.class)", "var_name": "productUploadBean"}, {"original_string": "@Spy\n  Map<String, UploadBean> uploadBeansMap = new HashMap<String, UploadBean>() {{\n    put(\"product\", productUploadBean);\n  }};", "modifier": "@Spy", "type": "Map<String, UploadBean>", "declarator": "uploadBeansMap = new HashMap<String, UploadBean>() {{\n    put(\"product\", productUploadBean);\n  }}", "var_name": "uploadBeansMap"}, {"original_string": "@InjectMocks\n  UploadController controller;", "modifier": "@InjectMocks", "type": "UploadController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private Date currentTimestamp;", "modifier": "private", "type": "Date", "declarator": "currentTimestamp", "var_name": "currentTimestamp"}, {"original_string": "AuditFields auditFields;", "modifier": "", "type": "AuditFields", "declarator": "auditFields", "var_name": "auditFields"}], "file": "modules/openlmis-web/src/test/java/org/openlmis/web/controller/UploadControllerTest.java"}, "test_case": {"identifier": "shouldParseIfFileIsCsv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldParseIfFileIsCsv() throws Exception {\n    byte[] content = new byte[1];\n    MockMultipartFile multiPartMock = new MockMultipartFile(\"csvFile\", \"mock.csv\", null, content);\n    String uploadSuccessMessage = \"File uploaded successfully.  \" +\n      \"'Number of records processed: 0'\";\n\n    when(messageService.message(UPLOAD_FILE_SUCCESS, 0)).thenReturn(uploadSuccessMessage);\n\n    ResponseEntity<OpenLmisResponse> uploadResponse = controller.upload(multiPartMock, \"product\", request);\n\n    assertThat(uploadResponse.getBody().getSuccessMsg(), is(uploadSuccessMessage));\n  }", "signature": "void shouldParseIfFileIsCsv()", "full_signature": "@Test public void shouldParseIfFileIsCsv()", "class_method_signature": "UploadControllerTest.shouldParseIfFileIsCsv()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "message", "upload", "assertThat", "getSuccessMsg", "getBody", "is"]}, "focal_class": {"identifier": "UploadController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "public static final String SELECT_UPLOAD_TYPE = \"upload.select.type\";", "modifier": "public static final", "type": "String", "declarator": "SELECT_UPLOAD_TYPE = \"upload.select.type\"", "var_name": "SELECT_UPLOAD_TYPE"}, {"original_string": "public static final String INCORRECT_FILE = \"upload.incorrect.file\";", "modifier": "public static final", "type": "String", "declarator": "INCORRECT_FILE = \"upload.incorrect.file\"", "var_name": "INCORRECT_FILE"}, {"original_string": "public static final String FILE_IS_EMPTY = \"upload.file.empty\";", "modifier": "public static final", "type": "String", "declarator": "FILE_IS_EMPTY = \"upload.file.empty\"", "var_name": "FILE_IS_EMPTY"}, {"original_string": "public static final String INCORRECT_FILE_FORMAT = \"upload.incorrect.file.format\";", "modifier": "public static final", "type": "String", "declarator": "INCORRECT_FILE_FORMAT = \"upload.incorrect.file.format\"", "var_name": "INCORRECT_FILE_FORMAT"}, {"original_string": "public static final String UPLOAD_FILE_SUCCESS = \"upload.file.successful\";", "modifier": "public static final", "type": "String", "declarator": "UPLOAD_FILE_SUCCESS = \"upload.file.successful\"", "var_name": "UPLOAD_FILE_SUCCESS"}, {"original_string": "public static final String SUCCESS = \"success\";", "modifier": "public static final", "type": "String", "declarator": "SUCCESS = \"success\"", "var_name": "SUCCESS"}, {"original_string": "public static final String ERROR = \"error\";", "modifier": "public static final", "type": "String", "declarator": "ERROR = \"error\"", "var_name": "ERROR"}, {"original_string": "public static final String SUPPORTED_UPLOADS = \"supportedUploads\";", "modifier": "public static final", "type": "String", "declarator": "SUPPORTED_UPLOADS = \"supportedUploads\"", "var_name": "SUPPORTED_UPLOADS"}, {"original_string": "@Autowired\n  private CSVParser csvParser;", "modifier": "@Autowired\n  private", "type": "CSVParser", "declarator": "csvParser", "var_name": "csvParser"}, {"original_string": "@Autowired\n  private DbService dbService;", "modifier": "@Autowired\n  private", "type": "DbService", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "@Autowired\n  private HashMap<String, UploadBean> uploadBeansMap;", "modifier": "@Autowired\n  private", "type": "HashMap<String, UploadBean>", "declarator": "uploadBeansMap", "var_name": "uploadBeansMap"}], "methods": [{"identifier": "upload", "parameters": "(MultipartFile csvFile, String model, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/upload\", method = POST) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'UPLOADS')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> upload(MultipartFile csvFile, String model, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/upload\", method = POST) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'UPLOADS')\") public ResponseEntity<OpenLmisResponse> upload(MultipartFile csvFile, String model, HttpServletRequest request)", "class_method_signature": "UploadController.upload(MultipartFile csvFile, String model, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getSupportedUploads", "parameters": "()", "modifiers": "@RequestMapping(value = \"/supported-uploads\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'UPLOADS')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getSupportedUploads()", "full_signature": "@RequestMapping(value = \"/supported-uploads\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'UPLOADS')\") public ResponseEntity<OpenLmisResponse> getSupportedUploads()", "class_method_signature": "UploadController.getSupportedUploads()", "testcase": false, "constructor": false}, {"identifier": "validateFile", "parameters": "(String model, MultipartFile csvFile)", "modifiers": "private", "return": "OpenLmisMessage", "signature": "OpenLmisMessage validateFile(String model, MultipartFile csvFile)", "full_signature": "private OpenLmisMessage validateFile(String model, MultipartFile csvFile)", "class_method_signature": "UploadController.validateFile(String model, MultipartFile csvFile)", "testcase": false, "constructor": false}, {"identifier": "successPage", "parameters": "(int recordsProcessed)", "modifiers": "private", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> successPage(int recordsProcessed)", "full_signature": "private ResponseEntity<OpenLmisResponse> successPage(int recordsProcessed)", "class_method_signature": "UploadController.successPage(int recordsProcessed)", "testcase": false, "constructor": false}, {"identifier": "errorResponse", "parameters": "(OpenLmisMessage errorMessage)", "modifiers": "private", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> errorResponse(OpenLmisMessage errorMessage)", "full_signature": "private ResponseEntity<OpenLmisResponse> errorResponse(OpenLmisMessage errorMessage)", "class_method_signature": "UploadController.errorResponse(OpenLmisMessage errorMessage)", "testcase": false, "constructor": false}], "file": "modules/openlmis-web/src/main/java/org/openlmis/web/controller/UploadController.java"}, "focal_method": {"identifier": "upload", "parameters": "(MultipartFile csvFile, String model, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/upload\", method = POST) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'UPLOADS')\") public", "return": "ResponseEntity<OpenLmisResponse>", "body": "@RequestMapping(value = \"/upload\", method = POST)\n  @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'UPLOADS')\")\n  public ResponseEntity<OpenLmisResponse> upload(MultipartFile csvFile, String model, HttpServletRequest request) {\n    try {\n      OpenLmisMessage errorMessage = validateFile(model, csvFile);\n      if (errorMessage != null) {\n        return errorResponse(errorMessage);\n      }\n\n      Date currentTimestamp = dbService.getCurrentTimestamp();\n\n      RecordHandler recordHandler = uploadBeansMap.get(model).getRecordHandler();\n      ModelClass modelClass = new ModelClass(uploadBeansMap.get(model).getImportableClass());\n      AuditFields auditFields = new AuditFields(loggedInUserId(request), currentTimestamp);\n\n      int recordsToBeUploaded = csvParser.process(csvFile.getInputStream(), modelClass, recordHandler, auditFields);\n\n      return successPage(recordsToBeUploaded);\n    } catch (DataException dataException) {\n      return errorResponse(dataException.getOpenLmisMessage());\n    } catch (UploadException e) {\n      return errorResponse(new OpenLmisMessage(messageService.message(e.getCode(), (Object[])e.getParams())));\n    } catch (IOException e) {\n      return errorResponse(new OpenLmisMessage(e.getMessage()));\n    }\n  }", "signature": "ResponseEntity<OpenLmisResponse> upload(MultipartFile csvFile, String model, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/upload\", method = POST) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'UPLOADS')\") public ResponseEntity<OpenLmisResponse> upload(MultipartFile csvFile, String model, HttpServletRequest request)", "class_method_signature": "UploadController.upload(MultipartFile csvFile, String model, HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["validateFile", "errorResponse", "getCurrentTimestamp", "getRecordHandler", "get", "getImportableClass", "get", "loggedInUserId", "process", "getInputStream", "successPage", "errorResponse", "getOpenLmisMessage", "errorResponse", "message", "getCode", "getParams", "errorResponse", "getMessage"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}