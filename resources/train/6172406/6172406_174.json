{"test_class": {"identifier": "VendorUserRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  VendorUserMapper mapper;", "modifier": "@Mock", "type": "VendorUserMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@InjectMocks\n  VendorUserRepository repository;", "modifier": "@InjectMocks", "type": "VendorUserRepository", "declarator": "repository", "var_name": "repository"}], "file": "modules/equipment/src/test/java/org/openlmis/equipment/repository/VendorUserRepositoryTest.java"}, "test_case": {"identifier": "shouldUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldUpdate() throws Exception {\n    VendorUser vendorUser = new VendorUser();\n    repository.update(vendorUser);\n\n    verify(mapper).update(vendorUser);\n  }", "signature": "void shouldUpdate()", "full_signature": "@Test public void shouldUpdate()", "class_method_signature": "VendorUserRepositoryTest.shouldUpdate()", "testcase": true, "constructor": false, "invocations": ["update", "update", "verify"]}, "focal_class": {"identifier": "VendorUserRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private VendorUserMapper vendorUserMapper;", "modifier": "@Autowired\n  private", "type": "VendorUserMapper", "declarator": "vendorUserMapper", "var_name": "vendorUserMapper"}], "methods": [{"identifier": "getAllUsersForVendor", "parameters": "(Long vendorId)", "modifiers": "public", "return": "List<User>", "signature": "List<User> getAllUsersForVendor(Long vendorId)", "full_signature": "public List<User> getAllUsersForVendor(Long vendorId)", "class_method_signature": "VendorUserRepository.getAllUsersForVendor(Long vendorId)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(VendorUser vendorUser)", "modifiers": "public", "return": "void", "signature": "void insert(VendorUser vendorUser)", "full_signature": "public void insert(VendorUser vendorUser)", "class_method_signature": "VendorUserRepository.insert(VendorUser vendorUser)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(VendorUser vendorUser)", "modifiers": "public", "return": "void", "signature": "void update(VendorUser vendorUser)", "full_signature": "public void update(VendorUser vendorUser)", "class_method_signature": "VendorUserRepository.update(VendorUser vendorUser)", "testcase": false, "constructor": false}, {"identifier": "removeVendorUserAssociation", "parameters": "(Long vendorId, Long userId)", "modifiers": "public", "return": "void", "signature": "void removeVendorUserAssociation(Long vendorId, Long userId)", "full_signature": "public void removeVendorUserAssociation(Long vendorId, Long userId)", "class_method_signature": "VendorUserRepository.removeVendorUserAssociation(Long vendorId, Long userId)", "testcase": false, "constructor": false}, {"identifier": "getAllUsersAvailableForVendor", "parameters": "()", "modifiers": "public", "return": "List<User>", "signature": "List<User> getAllUsersAvailableForVendor()", "full_signature": "public List<User> getAllUsersAvailableForVendor()", "class_method_signature": "VendorUserRepository.getAllUsersAvailableForVendor()", "testcase": false, "constructor": false}], "file": "modules/equipment/src/main/java/org/openlmis/equipment/repository/VendorUserRepository.java"}, "focal_method": {"identifier": "update", "parameters": "(VendorUser vendorUser)", "modifiers": "public", "return": "void", "body": "public void update(VendorUser vendorUser){\n    vendorUserMapper.update(vendorUser);\n  }", "signature": "void update(VendorUser vendorUser)", "full_signature": "public void update(VendorUser vendorUser)", "class_method_signature": "VendorUserRepository.update(VendorUser vendorUser)", "testcase": false, "constructor": false, "invocations": ["update"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}