{"test_class": {"identifier": "ProcessingPeriodRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException exException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "exException = ExpectedException.none()", "var_name": "exException"}, {"original_string": "@Mock\n  private ProcessingPeriodMapper mapper;", "modifier": "@Mock\n  private", "type": "ProcessingPeriodMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private ProcessingPeriodRepository repository;", "modifier": "private", "type": "ProcessingPeriodRepository", "declarator": "repository", "var_name": "repository"}], "file": "modules/core/src/test/java/org/openlmis/core/repository/ProcessingPeriodRepositoryTest.java"}, "test_case": {"identifier": "shouldGetAllPeriodsAfterAGivenDateAndPeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetAllPeriodsAfterAGivenDateAndPeriod() throws Exception {\n    Long scheduleId = 1L;\n    Long startingPeriodId = 10L;\n    DateTime currentDate = new DateTime();\n    Date programStartDate = currentDate.minusMonths(1).toDate();\n    List<ProcessingPeriod> processingPeriods = Arrays.asList(new ProcessingPeriod());\n    when(mapper.getAllPeriodsAfterDateAndPeriod(scheduleId, startingPeriodId, programStartDate, currentDate.toDate())).thenReturn(processingPeriods);\n\n    List<ProcessingPeriod> periodList = repository.getAllPeriodsAfterDateAndPeriod(scheduleId, startingPeriodId, programStartDate, currentDate.toDate());\n\n    assertThat(periodList, is(processingPeriods));\n  }", "signature": "void shouldGetAllPeriodsAfterAGivenDateAndPeriod()", "full_signature": "@Test public void shouldGetAllPeriodsAfterAGivenDateAndPeriod()", "class_method_signature": "ProcessingPeriodRepositoryTest.shouldGetAllPeriodsAfterAGivenDateAndPeriod()", "testcase": true, "constructor": false, "invocations": ["toDate", "minusMonths", "asList", "thenReturn", "when", "getAllPeriodsAfterDateAndPeriod", "toDate", "getAllPeriodsAfterDateAndPeriod", "toDate", "assertThat", "is"]}, "focal_class": {"identifier": "ProcessingPeriodRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProcessingPeriodMapper mapper;", "modifier": "private", "type": "ProcessingPeriodMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "ProcessingPeriodRepository", "parameters": "(ProcessingPeriodMapper processingPeriodMapper)", "modifiers": "@Autowired public", "return": "", "signature": " ProcessingPeriodRepository(ProcessingPeriodMapper processingPeriodMapper)", "full_signature": "@Autowired public  ProcessingPeriodRepository(ProcessingPeriodMapper processingPeriodMapper)", "class_method_signature": "ProcessingPeriodRepository.ProcessingPeriodRepository(ProcessingPeriodMapper processingPeriodMapper)", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "(Long scheduleId)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAll(Long scheduleId)", "full_signature": "public List<ProcessingPeriod> getAll(Long scheduleId)", "class_method_signature": "ProcessingPeriodRepository.getAll(Long scheduleId)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(ProcessingPeriod processingPeriod)", "modifiers": "public", "return": "void", "signature": "void insert(ProcessingPeriod processingPeriod)", "full_signature": "public void insert(ProcessingPeriod processingPeriod)", "class_method_signature": "ProcessingPeriodRepository.insert(ProcessingPeriod processingPeriod)", "testcase": false, "constructor": false}, {"identifier": "validateStartDateGreaterThanLastPeriodEndDate", "parameters": "(ProcessingPeriod processingPeriod)", "modifiers": "private", "return": "void", "signature": "void validateStartDateGreaterThanLastPeriodEndDate(ProcessingPeriod processingPeriod)", "full_signature": "private void validateStartDateGreaterThanLastPeriodEndDate(ProcessingPeriod processingPeriod)", "class_method_signature": "ProcessingPeriodRepository.validateStartDateGreaterThanLastPeriodEndDate(ProcessingPeriod processingPeriod)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Long processingPeriodId)", "modifiers": "public", "return": "void", "signature": "void delete(Long processingPeriodId)", "full_signature": "public void delete(Long processingPeriodId)", "class_method_signature": "ProcessingPeriodRepository.delete(Long processingPeriodId)", "testcase": false, "constructor": false}, {"identifier": "validateStartDateGreaterThanCurrentDate", "parameters": "(ProcessingPeriod processingPeriod)", "modifiers": "private", "return": "void", "signature": "void validateStartDateGreaterThanCurrentDate(ProcessingPeriod processingPeriod)", "full_signature": "private void validateStartDateGreaterThanCurrentDate(ProcessingPeriod processingPeriod)", "class_method_signature": "ProcessingPeriodRepository.validateStartDateGreaterThanCurrentDate(ProcessingPeriod processingPeriod)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsAfterDateAndPeriod", "parameters": "(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsAfterDateAndPeriod(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsAfterDateAndPeriod(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "class_method_signature": "ProcessingPeriodRepository.getAllPeriodsAfterDateAndPeriod(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "testcase": false, "constructor": false}, {"identifier": "getOpenPeriods", "parameters": "(Long facilityId, Long programId, Long startingPeriodId)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getOpenPeriods(Long facilityId, Long programId, Long startingPeriodId)", "full_signature": "public List<ProcessingPeriod> getOpenPeriods(Long facilityId, Long programId, Long startingPeriodId)", "class_method_signature": "ProcessingPeriodRepository.getOpenPeriods(Long facilityId, Long programId, Long startingPeriodId)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(Long id)", "modifiers": "public", "return": "ProcessingPeriod", "signature": "ProcessingPeriod getById(Long id)", "full_signature": "public ProcessingPeriod getById(Long id)", "class_method_signature": "ProcessingPeriodRepository.getById(Long id)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsForDateRange", "parameters": "(Long scheduleId, Date startDate, Date endDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsForDateRange(Long scheduleId, Date startDate, Date endDate)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsForDateRange(Long scheduleId, Date startDate, Date endDate)", "class_method_signature": "ProcessingPeriodRepository.getAllPeriodsForDateRange(Long scheduleId, Date startDate, Date endDate)", "testcase": false, "constructor": false}, {"identifier": "getRnrPeriodsForDateRange", "parameters": "(Long facilityId, Long programId, Date startDate, Date endDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getRnrPeriodsForDateRange(Long facilityId, Long programId, Date startDate, Date endDate)", "full_signature": "public List<ProcessingPeriod> getRnrPeriodsForDateRange(Long facilityId, Long programId, Date startDate, Date endDate)", "class_method_signature": "ProcessingPeriodRepository.getRnrPeriodsForDateRange(Long facilityId, Long programId, Date startDate, Date endDate)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsBefore", "parameters": "(Long scheduleId, Date beforeDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsBefore(Long scheduleId, Date beforeDate)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsBefore(Long scheduleId, Date beforeDate)", "class_method_signature": "ProcessingPeriodRepository.getAllPeriodsBefore(Long scheduleId, Date beforeDate)", "testcase": false, "constructor": false}, {"identifier": "getCurrentPeriod", "parameters": "(Long scheduleId, Date programStartDate)", "modifiers": "public", "return": "ProcessingPeriod", "signature": "ProcessingPeriod getCurrentPeriod(Long scheduleId, Date programStartDate)", "full_signature": "public ProcessingPeriod getCurrentPeriod(Long scheduleId, Date programStartDate)", "class_method_signature": "ProcessingPeriodRepository.getCurrentPeriod(Long scheduleId, Date programStartDate)", "testcase": false, "constructor": false}, {"identifier": "getNPreviousPeriods", "parameters": "(ProcessingPeriod currentPeriod, Integer n)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getNPreviousPeriods(ProcessingPeriod currentPeriod, Integer n)", "full_signature": "public List<ProcessingPeriod> getNPreviousPeriods(ProcessingPeriod currentPeriod, Integer n)", "class_method_signature": "ProcessingPeriodRepository.getNPreviousPeriods(ProcessingPeriod currentPeriod, Integer n)", "testcase": false, "constructor": false}, {"identifier": "getPeriodForDate", "parameters": "(Long scheduleId, Date date)", "modifiers": "public", "return": "ProcessingPeriod", "signature": "ProcessingPeriod getPeriodForDate(Long scheduleId, Date date)", "full_signature": "public ProcessingPeriod getPeriodForDate(Long scheduleId, Date date)", "class_method_signature": "ProcessingPeriodRepository.getPeriodForDate(Long scheduleId, Date date)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsForScheduleAndYear", "parameters": "(Long scheduleId, Long year)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsForScheduleAndYear(Long scheduleId, Long year)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsForScheduleAndYear(Long scheduleId, Long year)", "class_method_signature": "ProcessingPeriodRepository.getAllPeriodsForScheduleAndYear(Long scheduleId, Long year)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/repository/ProcessingPeriodRepository.java"}, "focal_method": {"identifier": "getAllPeriodsAfterDateAndPeriod", "parameters": "(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "body": "public List<ProcessingPeriod> getAllPeriodsAfterDateAndPeriod(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate) {\n    return startPeriodId == null ?\n      mapper.getAllPeriodsAfterDate(scheduleId, afterDate, beforeDate) :\n      mapper.getAllPeriodsAfterDateAndPeriod(scheduleId, startPeriodId, afterDate, beforeDate);\n  }", "signature": "List<ProcessingPeriod> getAllPeriodsAfterDateAndPeriod(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsAfterDateAndPeriod(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "class_method_signature": "ProcessingPeriodRepository.getAllPeriodsAfterDateAndPeriod(Long scheduleId, Long startPeriodId, Date afterDate, Date beforeDate)", "testcase": false, "constructor": false, "invocations": ["getAllPeriodsAfterDate", "getAllPeriodsAfterDateAndPeriod"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}