{"test_class": {"identifier": "CsvCellProcessorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ModelClass dummyImportableClass;", "modifier": "private", "type": "ModelClass", "declarator": "dummyImportableClass", "var_name": "dummyImportableClass"}], "file": "modules/upload/src/test/java/org/openlmis/upload/processor/CsvCellProcessorsTest.java"}, "test_case": {"identifier": "testReturnProcessorForMismatchCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReturnProcessorForMismatchCase() throws UploadException {\n    List<String> headers = new ArrayList<String>();\n    headers.add(\"MANDAtory String Field\");\n    headers.add(\"mandatoryIntFIELD\");\n\n    List<CellProcessor> cellProcessors = CsvCellProcessors.getProcessors(dummyImportableClass, headers);\n\n    assertEquals(2, cellProcessors.size());\n    assertTrue(cellProcessors.get(0) instanceof NotNull);\n    assertTrue(cellProcessors.get(1) instanceof NotNull);\n  }", "signature": "void testReturnProcessorForMismatchCase()", "full_signature": "@Test public void testReturnProcessorForMismatchCase()", "class_method_signature": "CsvCellProcessorsTest.testReturnProcessorForMismatchCase()", "testcase": true, "constructor": false, "invocations": ["add", "add", "getProcessors", "assertEquals", "size", "assertTrue", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "CsvCellProcessors", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String format = \"dd/MM/yyyy\";", "modifier": "private static final", "type": "String", "declarator": "format = \"dd/MM/yyyy\"", "var_name": "format"}, {"original_string": "public static Map<String, CellProcessor> typeMappings = new HashMap<>();", "modifier": "public static", "type": "Map<String, CellProcessor>", "declarator": "typeMappings = new HashMap<>()", "var_name": "typeMappings"}], "methods": [{"identifier": "getProcessors", "parameters": "(ModelClass modelClass, List<String> headers)", "modifiers": "public static", "return": "List<CellProcessor>", "signature": "List<CellProcessor> getProcessors(ModelClass modelClass, List<String> headers)", "full_signature": "public static List<CellProcessor> getProcessors(ModelClass modelClass, List<String> headers)", "class_method_signature": "CsvCellProcessors.getProcessors(ModelClass modelClass, List<String> headers)", "testcase": false, "constructor": false}, {"identifier": "chainTypeProcessor", "parameters": "(Field field)", "modifiers": "private static", "return": "CellProcessor", "signature": "CellProcessor chainTypeProcessor(Field field)", "full_signature": "private static CellProcessor chainTypeProcessor(Field field)", "class_method_signature": "CsvCellProcessors.chainTypeProcessor(Field field)", "testcase": false, "constructor": false}], "file": "modules/upload/src/main/java/org/openlmis/upload/processor/CsvCellProcessors.java"}, "focal_method": {"identifier": "getProcessors", "parameters": "(ModelClass modelClass, List<String> headers)", "modifiers": "public static", "return": "List<CellProcessor>", "body": "public static List<CellProcessor> getProcessors(ModelClass modelClass, List<String> headers) {\n    List<CellProcessor> processors = new ArrayList<>();\n    for (String header : headers) {\n      org.openlmis.upload.model.Field field = modelClass.findImportFieldWithName(header);\n      CellProcessor processor = null;\n      if (field != null) {\n        processor = chainTypeProcessor(field);\n      }\n      processors.add(processor);\n    }\n    return processors;\n  }", "signature": "List<CellProcessor> getProcessors(ModelClass modelClass, List<String> headers)", "full_signature": "public static List<CellProcessor> getProcessors(ModelClass modelClass, List<String> headers)", "class_method_signature": "CsvCellProcessors.getProcessors(ModelClass modelClass, List<String> headers)", "testcase": false, "constructor": false, "invocations": ["findImportFieldWithName", "chainTypeProcessor", "add"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}