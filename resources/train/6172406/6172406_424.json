{"test_class": {"identifier": "RequisitionPermissionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private RoleRightsService roleRightsService;", "modifier": "@Mock\n  private", "type": "RoleRightsService", "declarator": "roleRightsService", "var_name": "roleRightsService"}, {"original_string": "@Mock\n  private RoleAssignmentService roleAssignmentService;", "modifier": "@Mock\n  private", "type": "RoleAssignmentService", "declarator": "roleAssignmentService", "var_name": "roleAssignmentService"}, {"original_string": "@Mock\n  private ProgramSupportedService programSupportedService;", "modifier": "@Mock\n  private", "type": "ProgramSupportedService", "declarator": "programSupportedService", "var_name": "programSupportedService"}, {"original_string": "@InjectMocks\n  private RequisitionPermissionService requisitionPermissionService;", "modifier": "@InjectMocks\n  private", "type": "RequisitionPermissionService", "declarator": "requisitionPermissionService", "var_name": "requisitionPermissionService"}, {"original_string": "private Long userId;", "modifier": "private", "type": "Long", "declarator": "userId", "var_name": "userId"}, {"original_string": "private Long programId;", "modifier": "private", "type": "Long", "declarator": "programId", "var_name": "programId"}, {"original_string": "private Long facilityId;", "modifier": "private", "type": "Long", "declarator": "facilityId", "var_name": "facilityId"}], "file": "modules/requisition/src/test/java/org/openlmis/rnr/service/RequisitionPermissionServiceTest.java"}, "test_case": {"identifier": "shouldReturnFalseIfFacilityDoesNotSupportAProgram", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnFalseIfFacilityDoesNotSupportAProgram() throws Exception {\n    Facility facility = new Facility(facilityId);\n    Program program = new Program(programId);\n\n    when(programSupportedService.getByFacilityIdAndProgramId(facility.getId(), program.getId())).thenReturn(null);\n\n    assertThat(requisitionPermissionService.hasPermission(userId, facility, program, CREATE_REQUISITION), is(false));\n    verify(programSupportedService).getByFacilityIdAndProgramId(facility.getId(), program.getId());\n  }", "signature": "void shouldReturnFalseIfFacilityDoesNotSupportAProgram()", "full_signature": "@Test public void shouldReturnFalseIfFacilityDoesNotSupportAProgram()", "class_method_signature": "RequisitionPermissionServiceTest.shouldReturnFalseIfFacilityDoesNotSupportAProgram()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getByFacilityIdAndProgramId", "getId", "getId", "assertThat", "hasPermission", "is", "getByFacilityIdAndProgramId", "verify", "getId", "getId"]}, "focal_class": {"identifier": "RequisitionPermissionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private RoleRightsService roleRightsService;", "modifier": "@Autowired\n  private", "type": "RoleRightsService", "declarator": "roleRightsService", "var_name": "roleRightsService"}, {"original_string": "@Autowired\n  private RoleAssignmentService roleAssignmentService;", "modifier": "@Autowired\n  private", "type": "RoleAssignmentService", "declarator": "roleAssignmentService", "var_name": "roleAssignmentService"}, {"original_string": "@Autowired\n  ProgramSupportedService programSupportedService;", "modifier": "@Autowired", "type": "ProgramSupportedService", "declarator": "programSupportedService", "var_name": "programSupportedService"}], "methods": [{"identifier": "hasPermission", "parameters": "(Long userId, Facility facility, Program program, String rightName)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasPermission(Long userId, Facility facility, Program program, String rightName)", "full_signature": "public Boolean hasPermission(Long userId, Facility facility, Program program, String rightName)", "class_method_signature": "RequisitionPermissionService.hasPermission(Long userId, Facility facility, Program program, String rightName)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(Long userId, Rnr rnr, String rightName)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasPermission(Long userId, Rnr rnr, String rightName)", "full_signature": "public Boolean hasPermission(Long userId, Rnr rnr, String rightName)", "class_method_signature": "RequisitionPermissionService.hasPermission(Long userId, Rnr rnr, String rightName)", "testcase": false, "constructor": false}, {"identifier": "hasPermissionToSave", "parameters": "(Long userId, Rnr rnr)", "modifiers": "public", "return": "boolean", "signature": "boolean hasPermissionToSave(Long userId, Rnr rnr)", "full_signature": "public boolean hasPermissionToSave(Long userId, Rnr rnr)", "class_method_signature": "RequisitionPermissionService.hasPermissionToSave(Long userId, Rnr rnr)", "testcase": false, "constructor": false}, {"identifier": "hasPermissionToApprove", "parameters": "(Long userId, final Rnr rnr)", "modifiers": "private", "return": "boolean", "signature": "boolean hasPermissionToApprove(Long userId, final Rnr rnr)", "full_signature": "private boolean hasPermissionToApprove(Long userId, final Rnr rnr)", "class_method_signature": "RequisitionPermissionService.hasPermissionToApprove(Long userId, final Rnr rnr)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(Long userId, String rightName)", "modifiers": "public", "return": "boolean", "signature": "boolean hasPermission(Long userId, String rightName)", "full_signature": "public boolean hasPermission(Long userId, String rightName)", "class_method_signature": "RequisitionPermissionService.hasPermission(Long userId, String rightName)", "testcase": false, "constructor": false}], "file": "modules/requisition/src/main/java/org/openlmis/rnr/service/RequisitionPermissionService.java"}, "focal_method": {"identifier": "hasPermission", "parameters": "(Long userId, Facility facility, Program program, String rightName)", "modifiers": "public", "return": "Boolean", "body": "public Boolean hasPermission(Long userId, Facility facility, Program program, String rightName) {\n    ProgramSupported programSupported = programSupportedService.getByFacilityIdAndProgramId(facility.getId(), program.getId());\n    if (!(programSupported != null && programSupported.getActive() && programSupported.getProgram().getActive())) {\n      return false;\n    }\n\n    List<Right> userRights = roleRightsService.getRightsForUserAndFacilityProgram(userId, facility, program);\n    return any(userRights, with(rightName));\n  }", "signature": "Boolean hasPermission(Long userId, Facility facility, Program program, String rightName)", "full_signature": "public Boolean hasPermission(Long userId, Facility facility, Program program, String rightName)", "class_method_signature": "RequisitionPermissionService.hasPermission(Long userId, Facility facility, Program program, String rightName)", "testcase": false, "constructor": false, "invocations": ["getByFacilityIdAndProgramId", "getId", "getId", "getActive", "getActive", "getProgram", "getRightsForUserAndFacilityProgram", "any", "with"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}