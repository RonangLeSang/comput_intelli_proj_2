{"test_class": {"identifier": "ProgramProductRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "@InjectMocks\n  private ProgramProductRepository programProductRepository;", "modifier": "@InjectMocks\n  private", "type": "ProgramProductRepository", "declarator": "programProductRepository", "var_name": "programProductRepository"}, {"original_string": "@Mock\n  private ProgramProductMapper programProductMapper;", "modifier": "@Mock\n  private", "type": "ProgramProductMapper", "declarator": "programProductMapper", "var_name": "programProductMapper"}, {"original_string": "@Mock\n  private ProgramRepository programRepository;", "modifier": "@Mock\n  private", "type": "ProgramRepository", "declarator": "programRepository", "var_name": "programRepository"}, {"original_string": "@Mock\n  private ProductMapper productMapper;", "modifier": "@Mock\n  private", "type": "ProductMapper", "declarator": "productMapper", "var_name": "productMapper"}, {"original_string": "@Mock\n  private ProductRepository productRepository;", "modifier": "@Mock\n  private", "type": "ProductRepository", "declarator": "productRepository", "var_name": "productRepository"}, {"original_string": "@Mock\n  private ProgramProductPriceMapper programProductPriceMapper;", "modifier": "@Mock\n  private", "type": "ProgramProductPriceMapper", "declarator": "programProductPriceMapper", "var_name": "programProductPriceMapper"}, {"original_string": "private ProgramProduct programProduct;", "modifier": "private", "type": "ProgramProduct", "declarator": "programProduct", "var_name": "programProduct"}], "file": "modules/core/src/test/java/org/openlmis/core/repository/ProgramProductRepositoryTest.java"}, "test_case": {"identifier": "shouldGetProgramProductIdByProgramAndProductId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetProgramProductIdByProgramAndProductId() {\n    when(programProductMapper.getIdByProgramAndProductId(1L, 2L)).thenReturn(3L);\n\n    assertThat(programProductRepository.getIdByProgramIdAndProductId(1L, 2L), is(3L));\n    verify(programProductMapper).getIdByProgramAndProductId(1L, 2L);\n  }", "signature": "void shouldGetProgramProductIdByProgramAndProductId()", "full_signature": "@Test public void shouldGetProgramProductIdByProgramAndProductId()", "class_method_signature": "ProgramProductRepositoryTest.shouldGetProgramProductIdByProgramAndProductId()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getIdByProgramAndProductId", "assertThat", "getIdByProgramIdAndProductId", "is", "getIdByProgramAndProductId", "verify"]}, "focal_class": {"identifier": "ProgramProductRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private ProgramProductMapper mapper;", "modifier": "@Autowired\n  private", "type": "ProgramProductMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Autowired\n  private ProgramRepository programRepository;", "modifier": "@Autowired\n  private", "type": "ProgramRepository", "declarator": "programRepository", "var_name": "programRepository"}, {"original_string": "@Autowired\n  private ProductRepository productRepository;", "modifier": "@Autowired\n  private", "type": "ProductRepository", "declarator": "productRepository", "var_name": "productRepository"}, {"original_string": "@Autowired\n  private ProgramProductPriceMapper programProductPriceMapper;", "modifier": "@Autowired\n  private", "type": "ProgramProductPriceMapper", "declarator": "programProductPriceMapper", "var_name": "programProductPriceMapper"}, {"original_string": "@Autowired\n  private ProgramProductIsaMapper programProductIsaMapper;", "modifier": "@Autowired\n  private", "type": "ProgramProductIsaMapper", "declarator": "programProductIsaMapper", "var_name": "programProductIsaMapper"}], "methods": [{"identifier": "save", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "void", "signature": "void save(ProgramProduct programProduct)", "full_signature": "public void save(ProgramProduct programProduct)", "class_method_signature": "ProgramProductRepository.save(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getIdByProgramIdAndProductId", "parameters": "(Long programId, Long productId)", "modifiers": "public", "return": "Long", "signature": "Long getIdByProgramIdAndProductId(Long programId, Long productId)", "full_signature": "public Long getIdByProgramIdAndProductId(Long programId, Long productId)", "class_method_signature": "ProgramProductRepository.getIdByProgramIdAndProductId(Long programId, Long productId)", "testcase": false, "constructor": false}, {"identifier": "validateProductCode", "parameters": "(String code)", "modifiers": "private", "return": "void", "signature": "void validateProductCode(String code)", "full_signature": "private void validateProductCode(String code)", "class_method_signature": "ProgramProductRepository.validateProductCode(String code)", "testcase": false, "constructor": false}, {"identifier": "updateCurrentPrice", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "void", "signature": "void updateCurrentPrice(ProgramProduct programProduct)", "full_signature": "public void updateCurrentPrice(ProgramProduct programProduct)", "class_method_signature": "ProgramProductRepository.updateCurrentPrice(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getByProgramAndProductCode", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "ProgramProduct", "signature": "ProgramProduct getByProgramAndProductCode(ProgramProduct programProduct)", "full_signature": "public ProgramProduct getByProgramAndProductCode(ProgramProduct programProduct)", "class_method_signature": "ProgramProductRepository.getByProgramAndProductCode(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getByProgramAndProductId", "parameters": "(Long programId, Long productId)", "modifiers": "public", "return": "ProgramProduct", "signature": "ProgramProduct getByProgramAndProductId(Long programId, Long productId)", "full_signature": "public ProgramProduct getByProgramAndProductId(Long programId, Long productId)", "class_method_signature": "ProgramProductRepository.getByProgramAndProductId(Long programId, Long productId)", "testcase": false, "constructor": false}, {"identifier": "updatePriceHistory", "parameters": "(ProgramProductPrice programProductPrice)", "modifiers": "public", "return": "void", "signature": "void updatePriceHistory(ProgramProductPrice programProductPrice)", "full_signature": "public void updatePriceHistory(ProgramProductPrice programProductPrice)", "class_method_signature": "ProgramProductRepository.updatePriceHistory(ProgramProductPrice programProductPrice)", "testcase": false, "constructor": false}, {"identifier": "updateProgramProduct", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "void", "signature": "void updateProgramProduct(ProgramProduct programProduct)", "full_signature": "public void updateProgramProduct(ProgramProduct programProduct)", "class_method_signature": "ProgramProductRepository.updateProgramProduct(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getProgramProductPrice", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "ProgramProductPrice", "signature": "ProgramProductPrice getProgramProductPrice(ProgramProduct programProduct)", "full_signature": "public ProgramProductPrice getProgramProductPrice(ProgramProduct programProduct)", "class_method_signature": "ProgramProductRepository.getProgramProductPrice(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getByProgram", "parameters": "(Program program)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getByProgram(Program program)", "full_signature": "public List<ProgramProduct> getByProgram(Program program)", "class_method_signature": "ProgramProductRepository.getByProgram(Program program)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(Long id)", "modifiers": "public", "return": "ProgramProduct", "signature": "ProgramProduct getById(Long id)", "full_signature": "public ProgramProduct getById(Long id)", "class_method_signature": "ProgramProductRepository.getById(Long id)", "testcase": false, "constructor": false}, {"identifier": "getByProductCode", "parameters": "(String code)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getByProductCode(String code)", "full_signature": "public List<ProgramProduct> getByProductCode(String code)", "class_method_signature": "ProgramProductRepository.getByProductCode(String code)", "testcase": false, "constructor": false}, {"identifier": "getProgramProductsBy", "parameters": "(Long programId, String facilityTypeCode)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getProgramProductsBy(Long programId, String facilityTypeCode)", "full_signature": "public List<ProgramProduct> getProgramProductsBy(Long programId, String facilityTypeCode)", "class_method_signature": "ProgramProductRepository.getProgramProductsBy(Long programId, String facilityTypeCode)", "testcase": false, "constructor": false}, {"identifier": "getNonFullSupplyProductsForProgram", "parameters": "(Program program)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getNonFullSupplyProductsForProgram(Program program)", "full_signature": "public List<ProgramProduct> getNonFullSupplyProductsForProgram(Program program)", "class_method_signature": "ProgramProductRepository.getNonFullSupplyProductsForProgram(Program program)", "testcase": false, "constructor": false}, {"identifier": "searchByProgram", "parameters": "(String searchParam, Pagination pagination)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> searchByProgram(String searchParam, Pagination pagination)", "full_signature": "public List<ProgramProduct> searchByProgram(String searchParam, Pagination pagination)", "class_method_signature": "ProgramProductRepository.searchByProgram(String searchParam, Pagination pagination)", "testcase": false, "constructor": false}, {"identifier": "getTotalSearchResultCount", "parameters": "(String searchParam)", "modifiers": "public", "return": "Integer", "signature": "Integer getTotalSearchResultCount(String searchParam)", "full_signature": "public Integer getTotalSearchResultCount(String searchParam)", "class_method_signature": "ProgramProductRepository.getTotalSearchResultCount(String searchParam)", "testcase": false, "constructor": false}, {"identifier": "searchByProduct", "parameters": "(String searchParam, Pagination pagination)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> searchByProduct(String searchParam, Pagination pagination)", "full_signature": "public List<ProgramProduct> searchByProduct(String searchParam, Pagination pagination)", "class_method_signature": "ProgramProductRepository.searchByProduct(String searchParam, Pagination pagination)", "testcase": false, "constructor": false}, {"identifier": "getActiveByProgram", "parameters": "(Long programId)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getActiveByProgram(Long programId)", "full_signature": "public List<ProgramProduct> getActiveByProgram(Long programId)", "class_method_signature": "ProgramProductRepository.getActiveByProgram(Long programId)", "testcase": false, "constructor": false}, {"identifier": "insertISA", "parameters": "(ProgramProductISA programProductISA)", "modifiers": "@Transactional public", "return": "void", "signature": "void insertISA(ProgramProductISA programProductISA)", "full_signature": "@Transactional public void insertISA(ProgramProductISA programProductISA)", "class_method_signature": "ProgramProductRepository.insertISA(ProgramProductISA programProductISA)", "testcase": false, "constructor": false}, {"identifier": "updateISA", "parameters": "(ProgramProductISA programProductISA)", "modifiers": "public", "return": "void", "signature": "void updateISA(ProgramProductISA programProductISA)", "full_signature": "public void updateISA(ProgramProductISA programProductISA)", "class_method_signature": "ProgramProductRepository.updateISA(ProgramProductISA programProductISA)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/repository/ProgramProductRepository.java"}, "focal_method": {"identifier": "getIdByProgramIdAndProductId", "parameters": "(Long programId, Long productId)", "modifiers": "public", "return": "Long", "body": "public Long getIdByProgramIdAndProductId(Long programId, Long productId) {\n    Long programProductId = mapper.getIdByProgramAndProductId(programId, productId);\n\n    if (programProductId == null)\n      throw new DataException(\"programProduct.product.program.invalid\");\n\n    return programProductId;\n  }", "signature": "Long getIdByProgramIdAndProductId(Long programId, Long productId)", "full_signature": "public Long getIdByProgramIdAndProductId(Long programId, Long productId)", "class_method_signature": "ProgramProductRepository.getIdByProgramIdAndProductId(Long programId, Long productId)", "testcase": false, "constructor": false, "invocations": ["getIdByProgramAndProductId"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}