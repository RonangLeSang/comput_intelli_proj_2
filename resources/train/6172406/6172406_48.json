{"test_class": {"identifier": "StockCardServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private FacilityService facilityService;", "modifier": "@Mock\n    private", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Mock\n    private ProductRepository productRepository;", "modifier": "@Mock\n    private", "type": "ProductRepository", "declarator": "productRepository", "var_name": "productRepository"}, {"original_string": "@Mock\n    private LotRepository lotRepository;", "modifier": "@Mock\n    private", "type": "LotRepository", "declarator": "lotRepository", "var_name": "lotRepository"}, {"original_string": "@Mock\n    private StockCardRepository repository;", "modifier": "@Mock\n    private", "type": "StockCardRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private StockCardService service;", "modifier": "private", "type": "StockCardService", "declarator": "service", "var_name": "service"}, {"original_string": "private static final Facility defaultFacility;", "modifier": "private static final", "type": "Facility", "declarator": "defaultFacility", "var_name": "defaultFacility"}, {"original_string": "private static final Product defaultProduct;", "modifier": "private static final", "type": "Product", "declarator": "defaultProduct", "var_name": "defaultProduct"}, {"original_string": "private static final StockCard dummyCard;", "modifier": "private static final", "type": "StockCard", "declarator": "dummyCard", "var_name": "dummyCard"}, {"original_string": "private long stockCardId;", "modifier": "private", "type": "long", "declarator": "stockCardId", "var_name": "stockCardId"}, {"original_string": "private Lot lot;", "modifier": "private", "type": "Lot", "declarator": "lot", "var_name": "lot"}, {"original_string": "private Lot createdLot;", "modifier": "private", "type": "Lot", "declarator": "createdLot", "var_name": "createdLot"}, {"original_string": "private LotOnHand expectedLotOnHand;", "modifier": "private", "type": "LotOnHand", "declarator": "expectedLotOnHand", "var_name": "expectedLotOnHand"}], "file": "modules/stock-management/src/test/java/org/openlmis/stockmanagement/service/StockCardServiceTest.java"}, "test_case": {"identifier": "shouldErrorWithInvalidLotObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldErrorWithInvalidLotObject() {\n        StringBuilder str = new StringBuilder();\n        lot.setLotCode(\"\");\n\n        // test\n        LotOnHand lotOnHand = service.getLotOnHand(null, lot, defaultProduct.getCode(), dummyCard, str);\n\n        // verify\n        assertNull(lotOnHand);\n        assertEquals(str.toString(), \"error.lot.invalid\");\n    }", "signature": "void shouldErrorWithInvalidLotObject()", "full_signature": "@Test public void shouldErrorWithInvalidLotObject()", "class_method_signature": "StockCardServiceTest.shouldErrorWithInvalidLotObject()", "testcase": true, "constructor": false, "invocations": ["setLotCode", "getLotOnHand", "getCode", "assertNull", "assertEquals", "toString"]}, "focal_class": {"identifier": "StockCardService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  FacilityService facilityService;", "modifier": "@Autowired", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Autowired\n  ProductRepository productRepository;", "modifier": "@Autowired", "type": "ProductRepository", "declarator": "productRepository", "var_name": "productRepository"}, {"original_string": "@Autowired\n  LotRepository lotRepository;", "modifier": "@Autowired", "type": "LotRepository", "declarator": "lotRepository", "var_name": "lotRepository"}, {"original_string": "@Autowired\n  StockCardRepository repository;", "modifier": "@Autowired", "type": "StockCardRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "StockCardService", "parameters": "(FacilityService facilityService,\n                   ProductRepository productRepository,\n                   LotRepository lotRepository,\n                   StockCardRepository repository)", "modifiers": "", "return": "", "signature": " StockCardService(FacilityService facilityService,\n                   ProductRepository productRepository,\n                   LotRepository lotRepository,\n                   StockCardRepository repository)", "full_signature": "  StockCardService(FacilityService facilityService,\n                   ProductRepository productRepository,\n                   LotRepository lotRepository,\n                   StockCardRepository repository)", "class_method_signature": "StockCardService.StockCardService(FacilityService facilityService,\n                   ProductRepository productRepository,\n                   LotRepository lotRepository,\n                   StockCardRepository repository)", "testcase": false, "constructor": true}, {"identifier": "getOrCreateLotOnHand", "parameters": "(Lot lot, StockCard stockCard)", "modifiers": "@Transactional public", "return": "LotOnHand", "signature": "LotOnHand getOrCreateLotOnHand(Lot lot, StockCard stockCard)", "full_signature": "@Transactional public LotOnHand getOrCreateLotOnHand(Lot lot, StockCard stockCard)", "class_method_signature": "StockCardService.getOrCreateLotOnHand(Lot lot, StockCard stockCard)", "testcase": false, "constructor": false}, {"identifier": "getLotOnHand", "parameters": "(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "modifiers": "public", "return": "LotOnHand", "signature": "LotOnHand getLotOnHand(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "full_signature": "public LotOnHand getLotOnHand(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "class_method_signature": "StockCardService.getLotOnHand(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateStockCard", "parameters": "(Long facilityId, String productCode)", "modifiers": "public", "return": "StockCard", "signature": "StockCard getOrCreateStockCard(Long facilityId, String productCode)", "full_signature": "public StockCard getOrCreateStockCard(Long facilityId, String productCode)", "class_method_signature": "StockCardService.getOrCreateStockCard(Long facilityId, String productCode)", "testcase": false, "constructor": false}, {"identifier": "getStockCardById", "parameters": "(Long facilityId, Long stockCardId)", "modifiers": "public", "return": "StockCard", "signature": "StockCard getStockCardById(Long facilityId, Long stockCardId)", "full_signature": "public StockCard getStockCardById(Long facilityId, Long stockCardId)", "class_method_signature": "StockCardService.getStockCardById(Long facilityId, Long stockCardId)", "testcase": false, "constructor": false}, {"identifier": "getStockCards", "parameters": "(Long facilityId)", "modifiers": "public", "return": "List<StockCard>", "signature": "List<StockCard> getStockCards(Long facilityId)", "full_signature": "public List<StockCard> getStockCards(Long facilityId)", "class_method_signature": "StockCardService.getStockCards(Long facilityId)", "testcase": false, "constructor": false}, {"identifier": "addStockCardEntry", "parameters": "(StockCardEntry entry)", "modifiers": "@Transactional public", "return": "void", "signature": "void addStockCardEntry(StockCardEntry entry)", "full_signature": "@Transactional public void addStockCardEntry(StockCardEntry entry)", "class_method_signature": "StockCardService.addStockCardEntry(StockCardEntry entry)", "testcase": false, "constructor": false}, {"identifier": "addStockCardEntries", "parameters": "(List<StockCardEntry> entries)", "modifiers": "@Transactional public", "return": "void", "signature": "void addStockCardEntries(List<StockCardEntry> entries)", "full_signature": "@Transactional public void addStockCardEntries(List<StockCardEntry> entries)", "class_method_signature": "StockCardService.addStockCardEntries(List<StockCardEntry> entries)", "testcase": false, "constructor": false}], "file": "modules/stock-management/src/main/java/org/openlmis/stockmanagement/service/StockCardService.java"}, "focal_method": {"identifier": "getLotOnHand", "parameters": "(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "modifiers": "public", "return": "LotOnHand", "body": "public LotOnHand getLotOnHand(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str) {\n    LotOnHand lotOnHand = null;\n    if (null != lotId) { // Lot specified by id\n      lotOnHand = lotRepository.getLotOnHandByStockCardAndLot(card.getId(), lotId);\n      if (null == lotOnHand) {\n        str.append(\"error.lot.unknown\");\n      }\n    } else if (null != lotObj) { // Lot specified by object\n      if (null == lotObj.getProduct()) {\n        lotObj.setProduct(productRepository.getByCode(productCode));\n      }\n      if (!lotObj.isValid()) {\n        str.append(\"error.lot.invalid\");\n      } else {\n        //TODO:  this call might create a lot if it doesn't exist, need to implement permission check\n        lotOnHand = getOrCreateLotOnHand(lotObj, card);\n      }\n    }\n\n    return lotOnHand;\n  }", "signature": "LotOnHand getLotOnHand(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "full_signature": "public LotOnHand getLotOnHand(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "class_method_signature": "StockCardService.getLotOnHand(Long lotId, Lot lotObj, String productCode, StockCard card, StringBuilder str)", "testcase": false, "constructor": false, "invocations": ["getLotOnHandByStockCardAndLot", "getId", "append", "getProduct", "setProduct", "getByCode", "isValid", "append", "getOrCreateLotOnHand"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}