{"test_class": {"identifier": "ProductFormServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "@Mock\n  private ProductFormRepository repository;", "modifier": "@Mock\n  private", "type": "ProductFormRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@InjectMocks\n  private ProductFormService service;", "modifier": "@InjectMocks\n  private", "type": "ProductFormService", "declarator": "service", "var_name": "service"}], "file": "modules/core/src/test/java/org/openlmis/core/service/ProductFormServiceTest.java"}, "test_case": {"identifier": "shouldGetAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetAll() {\n    service.getAll();\n\n    verify(repository).getAll();\n  }", "signature": "void shouldGetAll()", "full_signature": "@Test public void shouldGetAll()", "class_method_signature": "ProductFormServiceTest.shouldGetAll()", "testcase": true, "constructor": false, "invocations": ["getAll", "getAll", "verify"]}, "focal_class": {"identifier": "ProductFormService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProductFormRepository repository;", "modifier": "private", "type": "ProductFormRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "ProductFormService", "parameters": "(ProductFormRepository productFormRepository)", "modifiers": "@Autowired public", "return": "", "signature": " ProductFormService(ProductFormRepository productFormRepository)", "full_signature": "@Autowired public  ProductFormService(ProductFormRepository productFormRepository)", "class_method_signature": "ProductFormService.ProductFormService(ProductFormRepository productFormRepository)", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<ProductForm>", "signature": "List<ProductForm> getAll()", "full_signature": "public List<ProductForm> getAll()", "class_method_signature": "ProductFormService.getAll()", "testcase": false, "constructor": false}, {"identifier": "getExisting", "parameters": "(ProductForm pf)", "modifiers": "public", "return": "ProductForm", "signature": "ProductForm getExisting(ProductForm pf)", "full_signature": "public ProductForm getExisting(ProductForm pf)", "class_method_signature": "ProductFormService.getExisting(ProductForm pf)", "testcase": false, "constructor": false}, {"identifier": "validateAndReturn", "parameters": "(ProductForm form)", "modifiers": "public", "return": "ProductForm", "signature": "ProductForm validateAndReturn(ProductForm form)", "full_signature": "public ProductForm validateAndReturn(ProductForm form)", "class_method_signature": "ProductFormService.validateAndReturn(ProductForm form)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(ProductForm pf)", "modifiers": "public", "return": "void", "signature": "void save(ProductForm pf)", "full_signature": "public void save(ProductForm pf)", "class_method_signature": "ProductFormService.save(ProductForm pf)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/service/ProductFormService.java"}, "focal_method": {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<ProductForm>", "body": "public List<ProductForm> getAll() {\n    return repository.getAll();\n  }", "signature": "List<ProductForm> getAll()", "full_signature": "public List<ProductForm> getAll()", "class_method_signature": "ProductFormService.getAll()", "testcase": false, "constructor": false, "invocations": ["getAll"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}