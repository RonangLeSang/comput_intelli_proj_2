{"test_class": {"identifier": "FacilityApprovedProductServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private FacilityApprovedProductRepository repository;", "modifier": "@Mock\n  private", "type": "FacilityApprovedProductRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Mock\n  private ProgramService programService;", "modifier": "@Mock\n  private", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Mock\n  private ProductService productService;", "modifier": "@Mock\n  private", "type": "ProductService", "declarator": "productService", "var_name": "productService"}, {"original_string": "@Mock\n  private ProgramProductService programProductService;", "modifier": "@Mock\n  private", "type": "ProgramProductService", "declarator": "programProductService", "var_name": "programProductService"}, {"original_string": "@Mock\n  private FacilityService facilityService;", "modifier": "@Mock\n  private", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Rule\n  public ExpectedException expectedException = none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = none()", "var_name": "expectedException"}, {"original_string": "@InjectMocks\n  FacilityApprovedProductService service;", "modifier": "@InjectMocks", "type": "FacilityApprovedProductService", "declarator": "service", "var_name": "service"}], "file": "modules/core/src/test/java/org/openlmis/core/service/FacilityApprovedProductServiceTest.java"}, "test_case": {"identifier": "shouldNotUpdateFacilityApprovedProductWhenItDoesNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotUpdateFacilityApprovedProductWhenItDoesNotExist() throws Exception {\n    FacilityTypeApprovedProduct facilityTypeApprovedProduct = make(a(defaultFacilityApprovedProduct));\n    facilityTypeApprovedProduct.setId(2L);\n    Long programId = 45L;\n    Long productId = 10L;\n    when(programService.getIdForCode(defaultProgramCode)).thenReturn(programId);\n    when(productService.getIdForCode(defaultProductCode)).thenReturn(productId);\n    when(programProductService.getIdByProgramIdAndProductId(programId, productId)).thenReturn(100L);\n    when(facilityService.getFacilityTypeByCode(facilityTypeApprovedProduct.getFacilityType())).thenReturn(new FacilityType());\n    when(repository.get(facilityTypeApprovedProduct.getId())).thenReturn(null);\n    expectedException.expect(DataException.class);\n    expectedException.expectMessage(FACILITY_APPROVED_PRODUCT_DOES_NOT_EXIST);\n\n    service.save(facilityTypeApprovedProduct);\n\n    verify(programService).getIdForCode(defaultProgramCode);\n    verify(productService).getIdForCode(defaultProductCode);\n    verify(programProductService).getIdByProgramIdAndProductId(programId, productId);\n    verify(repository, never()).update(facilityTypeApprovedProduct);\n  }", "signature": "void shouldNotUpdateFacilityApprovedProductWhenItDoesNotExist()", "full_signature": "@Test public void shouldNotUpdateFacilityApprovedProductWhenItDoesNotExist()", "class_method_signature": "FacilityApprovedProductServiceTest.shouldNotUpdateFacilityApprovedProductWhenItDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["make", "a", "setId", "thenReturn", "when", "getIdForCode", "thenReturn", "when", "getIdForCode", "thenReturn", "when", "getIdByProgramIdAndProductId", "thenReturn", "when", "getFacilityTypeByCode", "getFacilityType", "thenReturn", "when", "get", "getId", "expect", "expectMessage", "save", "getIdForCode", "verify", "getIdForCode", "verify", "getIdByProgramIdAndProductId", "verify", "update", "verify", "never"]}, "focal_class": {"identifier": "FacilityApprovedProductService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String FACILITY_TYPE_DOES_NOT_EXIST = \"facilityType.invalid\";", "modifier": "public static final", "type": "String", "declarator": "FACILITY_TYPE_DOES_NOT_EXIST = \"facilityType.invalid\"", "var_name": "FACILITY_TYPE_DOES_NOT_EXIST"}, {"original_string": "public static final String FACILITY_APPROVED_PRODUCT_DOES_NOT_EXIST = \"facility.approved.product.does.not.exist\";", "modifier": "public static final", "type": "String", "declarator": "FACILITY_APPROVED_PRODUCT_DOES_NOT_EXIST = \"facility.approved.product.does.not.exist\"", "var_name": "FACILITY_APPROVED_PRODUCT_DOES_NOT_EXIST"}, {"original_string": "@Autowired\n  private FacilityApprovedProductRepository repository;", "modifier": "@Autowired\n  private", "type": "FacilityApprovedProductRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n  private ProgramService programService;", "modifier": "@Autowired\n  private", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Autowired\n  private ProductService productService;", "modifier": "@Autowired\n  private", "type": "ProductService", "declarator": "productService", "var_name": "productService"}, {"original_string": "@Autowired\n  private ProgramProductService programProductService;", "modifier": "@Autowired\n  private", "type": "ProgramProductService", "declarator": "programProductService", "var_name": "programProductService"}, {"original_string": "@Autowired\n  private FacilityService facilityService;", "modifier": "@Autowired\n  private", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}], "methods": [{"identifier": "getFullSupplyFacilityApprovedProductByFacilityAndProgram", "parameters": "(Long facilityId, Long programId)", "modifiers": "public", "return": "List<FacilityTypeApprovedProduct>", "signature": "List<FacilityTypeApprovedProduct> getFullSupplyFacilityApprovedProductByFacilityAndProgram(Long facilityId, Long programId)", "full_signature": "public List<FacilityTypeApprovedProduct> getFullSupplyFacilityApprovedProductByFacilityAndProgram(Long facilityId, Long programId)", "class_method_signature": "FacilityApprovedProductService.getFullSupplyFacilityApprovedProductByFacilityAndProgram(Long facilityId, Long programId)", "testcase": false, "constructor": false}, {"identifier": "getNonFullSupplyFacilityApprovedProductByFacilityAndProgram", "parameters": "(Long facilityId, Long programId)", "modifiers": "public", "return": "List<FacilityTypeApprovedProduct>", "signature": "List<FacilityTypeApprovedProduct> getNonFullSupplyFacilityApprovedProductByFacilityAndProgram(Long facilityId, Long programId)", "full_signature": "public List<FacilityTypeApprovedProduct> getNonFullSupplyFacilityApprovedProductByFacilityAndProgram(Long facilityId, Long programId)", "class_method_signature": "FacilityApprovedProductService.getNonFullSupplyFacilityApprovedProductByFacilityAndProgram(Long facilityId, Long programId)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "modifiers": "public", "return": "void", "signature": "void save(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "full_signature": "public void save(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "class_method_signature": "FacilityApprovedProductService.save(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "testcase": false, "constructor": false}, {"identifier": "getFacilityApprovedProductByProgramProductAndFacilityTypeCode", "parameters": "(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "modifiers": "public", "return": "FacilityTypeApprovedProduct", "signature": "FacilityTypeApprovedProduct getFacilityApprovedProductByProgramProductAndFacilityTypeCode(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "full_signature": "public FacilityTypeApprovedProduct getFacilityApprovedProductByProgramProductAndFacilityTypeCode(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "class_method_signature": "FacilityApprovedProductService.getFacilityApprovedProductByProgramProductAndFacilityTypeCode(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "testcase": false, "constructor": false}, {"identifier": "getAllBy", "parameters": "(Long facilityTypeId, Long programId, String searchParam, Pagination pagination)", "modifiers": "public", "return": "List<FacilityTypeApprovedProduct>", "signature": "List<FacilityTypeApprovedProduct> getAllBy(Long facilityTypeId, Long programId, String searchParam, Pagination pagination)", "full_signature": "public List<FacilityTypeApprovedProduct> getAllBy(Long facilityTypeId, Long programId, String searchParam, Pagination pagination)", "class_method_signature": "FacilityApprovedProductService.getAllBy(Long facilityTypeId, Long programId, String searchParam, Pagination pagination)", "testcase": false, "constructor": false}, {"identifier": "getTotalSearchResultCount", "parameters": "(Long facilityTypeId, Long programId, String searchParam)", "modifiers": "public", "return": "Integer", "signature": "Integer getTotalSearchResultCount(Long facilityTypeId, Long programId, String searchParam)", "full_signature": "public Integer getTotalSearchResultCount(Long facilityTypeId, Long programId, String searchParam)", "class_method_signature": "FacilityApprovedProductService.getTotalSearchResultCount(Long facilityTypeId, Long programId, String searchParam)", "testcase": false, "constructor": false}, {"identifier": "fillProgramProductIds", "parameters": "(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "modifiers": "private", "return": "void", "signature": "void fillProgramProductIds(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "full_signature": "private void fillProgramProductIds(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "class_method_signature": "FacilityApprovedProductService.fillProgramProductIds(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "testcase": false, "constructor": false}, {"identifier": "saveAll", "parameters": "(List<FacilityTypeApprovedProduct> facilityTypeApprovedProducts, Long userId)", "modifiers": "public", "return": "void", "signature": "void saveAll(List<FacilityTypeApprovedProduct> facilityTypeApprovedProducts, Long userId)", "full_signature": "public void saveAll(List<FacilityTypeApprovedProduct> facilityTypeApprovedProducts, Long userId)", "class_method_signature": "FacilityApprovedProductService.saveAll(List<FacilityTypeApprovedProduct> facilityTypeApprovedProducts, Long userId)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Long id)", "modifiers": "public", "return": "void", "signature": "void delete(Long id)", "full_signature": "public void delete(Long id)", "class_method_signature": "FacilityApprovedProductService.delete(Long id)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/service/FacilityApprovedProductService.java"}, "focal_method": {"identifier": "save", "parameters": "(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "modifiers": "public", "return": "void", "body": "public void save(FacilityTypeApprovedProduct facilityTypeApprovedProduct) {\n    fillProgramProductIds(facilityTypeApprovedProduct);\n    FacilityType facilityType = facilityService.getFacilityTypeByCode(facilityTypeApprovedProduct.getFacilityType());\n    if (facilityType == null) throw new DataException(FACILITY_TYPE_DOES_NOT_EXIST);\n\n    facilityTypeApprovedProduct.getFacilityType().setId(facilityType.getId());\n\n    if (facilityTypeApprovedProduct.getId() != null) {\n      if(repository.get(facilityTypeApprovedProduct.getId()) == null){\n        throw new DataException(FACILITY_APPROVED_PRODUCT_DOES_NOT_EXIST);\n      }\n      repository.update(facilityTypeApprovedProduct);\n    } else {\n      repository.insert(facilityTypeApprovedProduct);\n    }\n  }", "signature": "void save(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "full_signature": "public void save(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "class_method_signature": "FacilityApprovedProductService.save(FacilityTypeApprovedProduct facilityTypeApprovedProduct)", "testcase": false, "constructor": false, "invocations": ["fillProgramProductIds", "getFacilityTypeByCode", "getFacilityType", "setId", "getFacilityType", "getId", "getId", "get", "getId", "update", "insert"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}