{"test_class": {"identifier": "RestAgentServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  FacilityService facilityService;", "modifier": "@Mock", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@InjectMocks\n  RestAgentService restAgentService;", "modifier": "@InjectMocks", "type": "RestAgentService", "declarator": "restAgentService", "var_name": "restAgentService"}, {"original_string": "@Mock\n  private UserService userService;", "modifier": "@Mock\n  private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Mock\n  private ProgramSupportedService programSupportedService;", "modifier": "@Mock\n  private", "type": "ProgramSupportedService", "declarator": "programSupportedService", "var_name": "programSupportedService"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "Principal principal;", "modifier": "", "type": "Principal", "declarator": "principal", "var_name": "principal"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n  private RequisitionGroupMemberService requisitionGroupMemberService;", "modifier": "@Mock\n  private", "type": "RequisitionGroupMemberService", "declarator": "requisitionGroupMemberService", "var_name": "requisitionGroupMemberService"}], "file": "modules/rest-api/src/test/java/org/openlmis/restapi/service/RestAgentServiceTest.java"}, "test_case": {"identifier": "shouldUpdateACHWFacilityAndRequisitionGroupIfParentChanges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldUpdateACHWFacilityAndRequisitionGroupIfParentChanges() throws Exception {\n    Agent agent = make(a(defaultCHW));\n\n    Facility baseFacility = getBaseFacility(agent);\n\n    when(facilityService.getFacilityWithReferenceDataForCode(agent.getParentFacilityCode())).thenReturn(baseFacility);\n    Date currentTimeStamp = mock(Date.class);\n    whenNew(Date.class).withNoArguments().thenReturn(currentTimeStamp);\n\n    Facility chwFacility = spy(new Facility());\n    chwFacility.setVirtualFacility(true);\n    chwFacility.setEnabled(true);\n    chwFacility.setParentFacilityId(3l);\n    whenNew(Facility.class).withNoArguments().thenReturn(chwFacility);\n    when(facilityService.getByCode(chwFacility)).thenReturn(chwFacility);\n    when(userService.getByUserName(user.getUserName())).thenReturn(user);\n    RequisitionGroup requisitionGroup = new RequisitionGroup();\n    when(requisitionGroupMemberService.getAllRequisitionGroupMembersByFacility(baseFacility.getId())).\n      thenReturn(asList(new RequisitionGroupMember(requisitionGroup, baseFacility)));\n\n    restAgentService.update(agent, user.getId());\n\n    verify(chwFacility).setName(agent.getAgentName());\n    verify(chwFacility).setMainPhone(agent.getPhoneNumber());\n    verify(chwFacility).setActive(Boolean.parseBoolean(agent.getActive()));\n    verify(chwFacility).setParentFacilityId(baseFacility.getId());\n    verify(chwFacility).setGeographicZone(baseFacility.getGeographicZone());\n    verify(chwFacility).setFacilityType(baseFacility.getFacilityType());\n    verify(facilityService).update(chwFacility);\n    verify(requisitionGroupMemberService).deleteMembersFor(chwFacility);\n    verify(requisitionGroupMemberService).getAllRequisitionGroupMembersByFacility(baseFacility.getId());\n    ArgumentCaptor<RequisitionGroupMember> captor = ArgumentCaptor.forClass(RequisitionGroupMember.class);\n    verify(requisitionGroupMemberService).save(captor.capture());\n  }", "signature": "void shouldUpdateACHWFacilityAndRequisitionGroupIfParentChanges()", "full_signature": "@Test public void shouldUpdateACHWFacilityAndRequisitionGroupIfParentChanges()", "class_method_signature": "RestAgentServiceTest.shouldUpdateACHWFacilityAndRequisitionGroupIfParentChanges()", "testcase": true, "constructor": false, "invocations": ["make", "a", "getBaseFacility", "thenReturn", "when", "getFacilityWithReferenceDataForCode", "getParentFacilityCode", "mock", "thenReturn", "withNoArguments", "whenNew", "spy", "setVirtualFacility", "setEnabled", "setParentFacilityId", "thenReturn", "withNoArguments", "whenNew", "thenReturn", "when", "getByCode", "thenReturn", "when", "getByUserName", "getUserName", "thenReturn", "when", "getAllRequisitionGroupMembersByFacility", "getId", "asList", "update", "getId", "setName", "verify", "getAgentName", "setMainPhone", "verify", "getPhoneNumber", "setActive", "verify", "parseBoolean", "getActive", "setParentFacilityId", "verify", "getId", "setGeographicZone", "verify", "getGeographicZone", "setFacilityType", "verify", "getFacilityType", "update", "verify", "deleteMembersFor", "verify", "getAllRequisitionGroupMembersByFacility", "verify", "getId", "forClass", "save", "verify", "capture"]}, "focal_class": {"identifier": "RestAgentService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  FacilityService facilityService;", "modifier": "@Autowired", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Autowired\n  UserService userService;", "modifier": "@Autowired", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Autowired\n  ProgramSupportedService programSupportedService;", "modifier": "@Autowired", "type": "ProgramSupportedService", "declarator": "programSupportedService", "var_name": "programSupportedService"}, {"original_string": "@Autowired\n  RequisitionGroupMemberService requisitionGroupMemberService;", "modifier": "@Autowired", "type": "RequisitionGroupMemberService", "declarator": "requisitionGroupMemberService", "var_name": "requisitionGroupMemberService"}], "methods": [{"identifier": "create", "parameters": "(Agent agent, Long userId)", "modifiers": "@Transactional public", "return": "void", "signature": "void create(Agent agent, Long userId)", "full_signature": "@Transactional public void create(Agent agent, Long userId)", "class_method_signature": "RestAgentService.create(Agent agent, Long userId)", "testcase": false, "constructor": false}, {"identifier": "saveRequisitionGroupMembers", "parameters": "(Facility facility, Long userId)", "modifiers": "private", "return": "void", "signature": "void saveRequisitionGroupMembers(Facility facility, Long userId)", "full_signature": "private void saveRequisitionGroupMembers(Facility facility, Long userId)", "class_method_signature": "RestAgentService.saveRequisitionGroupMembers(Facility facility, Long userId)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Agent agent, Long userId)", "modifiers": "public", "return": "void", "signature": "void update(Agent agent, Long userId)", "full_signature": "public void update(Agent agent, Long userId)", "class_method_signature": "RestAgentService.update(Agent agent, Long userId)", "testcase": false, "constructor": false}, {"identifier": "getExistingFacilityForCode", "parameters": "(String agentCode)", "modifiers": "private", "return": "Facility", "signature": "Facility getExistingFacilityForCode(String agentCode)", "full_signature": "private Facility getExistingFacilityForCode(String agentCode)", "class_method_signature": "RestAgentService.getExistingFacilityForCode(String agentCode)", "testcase": false, "constructor": false}, {"identifier": "createFacilityFrom", "parameters": "(Agent agent)", "modifiers": "private", "return": "Facility", "signature": "Facility createFacilityFrom(Agent agent)", "full_signature": "private Facility createFacilityFrom(Agent agent)", "class_method_signature": "RestAgentService.createFacilityFrom(Agent agent)", "testcase": false, "constructor": false}, {"identifier": "fillBaseFacility", "parameters": "(Agent agent, Facility facility)", "modifiers": "private", "return": "void", "signature": "void fillBaseFacility(Agent agent, Facility facility)", "full_signature": "private void fillBaseFacility(Agent agent, Facility facility)", "class_method_signature": "RestAgentService.fillBaseFacility(Agent agent, Facility facility)", "testcase": false, "constructor": false}, {"identifier": "getValidatedBaseFacility", "parameters": "(Agent agent)", "modifiers": "private", "return": "Facility", "signature": "Facility getValidatedBaseFacility(Agent agent)", "full_signature": "private Facility getValidatedBaseFacility(Agent agent)", "class_method_signature": "RestAgentService.getValidatedBaseFacility(Agent agent)", "testcase": false, "constructor": false}, {"identifier": "validateCHWForUpdate", "parameters": "(Facility chwFacility)", "modifiers": "private", "return": "void", "signature": "void validateCHWForUpdate(Facility chwFacility)", "full_signature": "private void validateCHWForUpdate(Facility chwFacility)", "class_method_signature": "RestAgentService.validateCHWForUpdate(Facility chwFacility)", "testcase": false, "constructor": false}], "file": "modules/rest-api/src/main/java/org/openlmis/restapi/service/RestAgentService.java"}, "focal_method": {"identifier": "update", "parameters": "(Agent agent, Long userId)", "modifiers": "public", "return": "void", "body": "public void update(Agent agent, Long userId) {\n    if (agent.getActive() == null) {\n      throw new DataException(\"error.mandatory.fields.missing\");\n    }\n    agent.validate();\n\n    Facility chwFacility = getExistingFacilityForCode(agent.getAgentCode());\n    validateCHWForUpdate(chwFacility);\n\n    chwFacility.setName(agent.getAgentName());\n    chwFacility.setMainPhone(agent.getPhoneNumber() == null ? chwFacility.getMainPhone() : agent.getPhoneNumber());\n    chwFacility.setActive(Boolean.parseBoolean(agent.getActive()));\n    Long previousParent = chwFacility.getParentFacilityId();\n    fillBaseFacility(agent, chwFacility);\n    if (!previousParent.equals(chwFacility.getParentFacilityId())) {\n      requisitionGroupMemberService.deleteMembersFor(chwFacility);\n      saveRequisitionGroupMembers(chwFacility, userId);\n    }\n    chwFacility.setModifiedDate(new Date());\n    chwFacility.setModifiedBy(userId);\n    facilityService.update(chwFacility);\n  }", "signature": "void update(Agent agent, Long userId)", "full_signature": "public void update(Agent agent, Long userId)", "class_method_signature": "RestAgentService.update(Agent agent, Long userId)", "testcase": false, "constructor": false, "invocations": ["getActive", "validate", "getExistingFacilityForCode", "getAgentCode", "validateCHWForUpdate", "setName", "getAgentName", "setMainPhone", "getPhoneNumber", "getMainPhone", "getPhoneNumber", "setActive", "parseBoolean", "getActive", "getParentFacilityId", "fillBaseFacility", "equals", "getParentFacilityId", "deleteMembersFor", "saveRequisitionGroupMembers", "setModifiedDate", "setModifiedBy", "update"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}