{"test_class": {"identifier": "AnnualFacilityDemographicEstimateServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  EstimateCategoryService estimateCategoryService;", "modifier": "@Mock", "type": "EstimateCategoryService", "declarator": "estimateCategoryService", "var_name": "estimateCategoryService"}, {"original_string": "@Mock\n  private AnnualFacilityEstimateRepository repository;", "modifier": "@Mock\n  private", "type": "AnnualFacilityEstimateRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Mock\n  private FacilityService facilityService;", "modifier": "@Mock\n  private", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Mock\n  private CommaSeparator commaSeparator;", "modifier": "@Mock\n  private", "type": "CommaSeparator", "declarator": "commaSeparator", "var_name": "commaSeparator"}, {"original_string": "@Mock\n  private SupervisoryNodeService supervisoryNodeService;", "modifier": "@Mock\n  private", "type": "SupervisoryNodeService", "declarator": "supervisoryNodeService", "var_name": "supervisoryNodeService"}, {"original_string": "@Mock\n  private RequisitionGroupService requisitionGroupService;", "modifier": "@Mock\n  private", "type": "RequisitionGroupService", "declarator": "requisitionGroupService", "var_name": "requisitionGroupService"}, {"original_string": "@InjectMocks\n  private AnnualFacilityDemographicEstimateService service;", "modifier": "@InjectMocks\n  private", "type": "AnnualFacilityDemographicEstimateService", "declarator": "service", "var_name": "service"}], "file": "modules/demographics/src/test/java/org/openlmis/demographics/service/AnnualFacilityDemographicEstimateServiceTest.java"}, "test_case": {"identifier": "shouldGetEstimateValuesForFacilityWhenEstimatesAreNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetEstimateValuesForFacilityWhenEstimatesAreNotFound() throws Exception{\n    EstimateCategory category1 = new EstimateCategory();\n    category1.setDefaultConversionFactor(50.0);\n    EstimateCategory category2 = new EstimateCategory();\n    category2.setDefaultConversionFactor(5.0);\n\n    Facility facility = new Facility();\n    facility.setCatchmentPopulation(20000L);\n    when(facilityService.getById(2L)).thenReturn(facility);\n    when(estimateCategoryService.getAll()).thenReturn(asList(category1, category2));\n    when(repository.getFacilityEstimate(2005, 2L, 2L)).thenReturn(null);\n\n\n    List<AnnualFacilityEstimateEntry> response = service.getEstimateValuesForFacility(2L, 2L, 2005);\n    assertThat(response.size(), is(2));\n    assertThat(response.get(0).getValue(), is(10000L));\n    assertThat(response.get(1).getValue(), is(1000L));\n\n    verify(estimateCategoryService, atMost(1)).getAll();\n  }", "signature": "void shouldGetEstimateValuesForFacilityWhenEstimatesAreNotFound()", "full_signature": "@Test public void shouldGetEstimateValuesForFacilityWhenEstimatesAreNotFound()", "class_method_signature": "AnnualFacilityDemographicEstimateServiceTest.shouldGetEstimateValuesForFacilityWhenEstimatesAreNotFound()", "testcase": true, "constructor": false, "invocations": ["setDefaultConversionFactor", "setDefaultConversionFactor", "setCatchmentPopulation", "thenReturn", "when", "getById", "thenReturn", "when", "getAll", "asList", "thenReturn", "when", "getFacilityEstimate", "getEstimateValuesForFacility", "assertThat", "size", "is", "assertThat", "getValue", "get", "is", "assertThat", "getValue", "get", "is", "getAll", "verify", "atMost"]}, "focal_class": {"identifier": "AnnualFacilityDemographicEstimateService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  EstimateCategoryService estimateCategoryService;", "modifier": "@Autowired", "type": "EstimateCategoryService", "declarator": "estimateCategoryService", "var_name": "estimateCategoryService"}, {"original_string": "@Autowired\n  private AnnualFacilityEstimateRepository repository;", "modifier": "@Autowired\n  private", "type": "AnnualFacilityEstimateRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n  private FacilityService facilityService;", "modifier": "@Autowired\n  private", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Autowired\n  private CommaSeparator commaSeparator;", "modifier": "@Autowired\n  private", "type": "CommaSeparator", "declarator": "commaSeparator", "var_name": "commaSeparator"}, {"original_string": "@Autowired\n  private SupervisoryNodeService supervisoryNodeService;", "modifier": "@Autowired\n  private", "type": "SupervisoryNodeService", "declarator": "supervisoryNodeService", "var_name": "supervisoryNodeService"}, {"original_string": "@Autowired\n  private RequisitionGroupService requisitionGroupService;", "modifier": "@Autowired\n  private", "type": "RequisitionGroupService", "declarator": "requisitionGroupService", "var_name": "requisitionGroupService"}], "methods": [{"identifier": "save", "parameters": "(EstimateForm estimateForm, Long userId)", "modifiers": "public", "return": "void", "signature": "void save(EstimateForm estimateForm, Long userId)", "full_signature": "public void save(EstimateForm estimateForm, Long userId)", "class_method_signature": "AnnualFacilityDemographicEstimateService.save(EstimateForm estimateForm, Long userId)", "testcase": false, "constructor": false}, {"identifier": "finalizeEstimate", "parameters": "(EstimateForm form, Long userId)", "modifiers": "public", "return": "void", "signature": "void finalizeEstimate(EstimateForm form, Long userId)", "full_signature": "public void finalizeEstimate(EstimateForm form, Long userId)", "class_method_signature": "AnnualFacilityDemographicEstimateService.finalizeEstimate(EstimateForm form, Long userId)", "testcase": false, "constructor": false}, {"identifier": "undoFinalize", "parameters": "(EstimateForm form, Long userId)", "modifiers": "public", "return": "void", "signature": "void undoFinalize(EstimateForm form, Long userId)", "full_signature": "public void undoFinalize(EstimateForm form, Long userId)", "class_method_signature": "AnnualFacilityDemographicEstimateService.undoFinalize(EstimateForm form, Long userId)", "testcase": false, "constructor": false}, {"identifier": "createDefaultEstimateEntries", "parameters": "(List<EstimateCategory> categories, Long facilityId, Long programId, Integer year, Boolean includeDetails)", "modifiers": "private static", "return": "List<AnnualFacilityEstimateEntry>", "signature": "List<AnnualFacilityEstimateEntry> createDefaultEstimateEntries(List<EstimateCategory> categories, Long facilityId, Long programId, Integer year, Boolean includeDetails)", "full_signature": "private static List<AnnualFacilityEstimateEntry> createDefaultEstimateEntries(List<EstimateCategory> categories, Long facilityId, Long programId, Integer year, Boolean includeDetails)", "class_method_signature": "AnnualFacilityDemographicEstimateService.createDefaultEstimateEntries(List<EstimateCategory> categories, Long facilityId, Long programId, Integer year, Boolean includeDetails)", "testcase": false, "constructor": false}, {"identifier": "getEstimateForm", "parameters": "(Long userId, Long programId, Integer year)", "modifiers": "public", "return": "EstimateForm", "signature": "EstimateForm getEstimateForm(Long userId, Long programId, Integer year)", "full_signature": "public EstimateForm getEstimateForm(Long userId, Long programId, Integer year)", "class_method_signature": "AnnualFacilityDemographicEstimateService.getEstimateForm(Long userId, Long programId, Integer year)", "testcase": false, "constructor": false}, {"identifier": "getEstimateValuesForFacility", "parameters": "(Long facilityId, Long programId, Integer year)", "modifiers": "public", "return": "List<AnnualFacilityEstimateEntry>", "signature": "List<AnnualFacilityEstimateEntry> getEstimateValuesForFacility(Long facilityId, Long programId, Integer year)", "full_signature": "public List<AnnualFacilityEstimateEntry> getEstimateValuesForFacility(Long facilityId, Long programId, Integer year)", "class_method_signature": "AnnualFacilityDemographicEstimateService.getEstimateValuesForFacility(Long facilityId, Long programId, Integer year)", "testcase": false, "constructor": false}], "file": "modules/demographics/src/main/java/org/openlmis/demographics/service/AnnualFacilityDemographicEstimateService.java"}, "focal_method": {"identifier": "getEstimateValuesForFacility", "parameters": "(Long facilityId, Long programId, Integer year)", "modifiers": "public", "return": "List<AnnualFacilityEstimateEntry>", "body": "public List<AnnualFacilityEstimateEntry> getEstimateValuesForFacility(Long facilityId, Long programId, Integer year) {\n    List<AnnualFacilityEstimateEntry> estimates = repository.getFacilityEstimateWithDetails(year, facilityId, programId);\n    if (CollectionUtils.isEmpty(estimates)) {\n      Facility facility = facilityService.getById(facilityId);\n      List<EstimateCategory> categories = estimateCategoryService.getAll();\n      estimates = createDefaultEstimateEntries(categories, facility.getId(), programId, year, true);\n      for (AnnualFacilityEstimateEntry estimate : estimates) {\n        estimate.calculateAndSetValue(facility.getCatchmentPopulation());\n      }\n    }\n    return estimates;\n  }", "signature": "List<AnnualFacilityEstimateEntry> getEstimateValuesForFacility(Long facilityId, Long programId, Integer year)", "full_signature": "public List<AnnualFacilityEstimateEntry> getEstimateValuesForFacility(Long facilityId, Long programId, Integer year)", "class_method_signature": "AnnualFacilityDemographicEstimateService.getEstimateValuesForFacility(Long facilityId, Long programId, Integer year)", "testcase": false, "constructor": false, "invocations": ["getFacilityEstimateWithDetails", "isEmpty", "getById", "getAll", "createDefaultEstimateEntries", "getId", "calculateAndSetValue", "getCatchmentPopulation"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}