{"test_class": {"identifier": "SupplyLineControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  SupplyLineService service;", "modifier": "@Mock", "type": "SupplyLineService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n  MessageService messageService;", "modifier": "@Mock", "type": "MessageService", "declarator": "messageService", "var_name": "messageService"}, {"original_string": "@InjectMocks\n  SupplyLineController controller;", "modifier": "@InjectMocks", "type": "SupplyLineController", "declarator": "controller", "var_name": "controller"}, {"original_string": "public static final String USER_ID = \"USER_ID\";", "modifier": "public static final", "type": "String", "declarator": "USER_ID = \"USER_ID\"", "var_name": "USER_ID"}, {"original_string": "private MockHttpServletRequest request = new MockHttpServletRequest();", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "request = new MockHttpServletRequest()", "var_name": "request"}], "file": "modules/openlmis-web/src/test/java/org/openlmis/web/controller/SupplyLineControllerTest.java"}, "test_case": {"identifier": "shouldUpdateSupplyLineSuccessfully", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldUpdateSupplyLineSuccessfully() {\n    SupplyLine supplyLine = new SupplyLine(1L);\n    Mockito.when(messageService.message(\"message.supply.line.updated.success\")).thenReturn(\"success\");\n\n    ResponseEntity<OpenLmisResponse> responseEntity = controller.update(supplyLine, supplyLine.getId(), request);\n\n    verify(service).save(supplyLine);\n    assertThat((Long) responseEntity.getBody().getData().get(\"supplyLineId\"), CoreMatchers.is(supplyLine.getId()));\n    assertThat(responseEntity.getBody().getSuccessMsg(), CoreMatchers.is(\"success\"));\n    assertThat(supplyLine.getModifiedBy(), CoreMatchers.is(1L));\n  }", "signature": "void shouldUpdateSupplyLineSuccessfully()", "full_signature": "@Test public void shouldUpdateSupplyLineSuccessfully()", "class_method_signature": "SupplyLineControllerTest.shouldUpdateSupplyLineSuccessfully()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "message", "update", "getId", "save", "verify", "assertThat", "get", "getData", "getBody", "is", "getId", "assertThat", "getSuccessMsg", "getBody", "is", "assertThat", "getModifiedBy", "is"]}, "focal_class": {"identifier": "SupplyLineController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "public static final String SUPPLY_LINES = \"supplyLines\";", "modifier": "public static final", "type": "String", "declarator": "SUPPLY_LINES = \"supplyLines\"", "var_name": "SUPPLY_LINES"}, {"original_string": "public static final String PAGINATION = \"pagination\";", "modifier": "public static final", "type": "String", "declarator": "PAGINATION = \"pagination\"", "var_name": "PAGINATION"}, {"original_string": "public static final String SUPPLYLINES = \"supplylines\";", "modifier": "public static final", "type": "String", "declarator": "SUPPLYLINES = \"supplylines\"", "var_name": "SUPPLYLINES"}, {"original_string": "public static final String SUPPLY_LINE_ID = \"supplyLineId\";", "modifier": "public static final", "type": "String", "declarator": "SUPPLY_LINE_ID = \"supplyLineId\"", "var_name": "SUPPLY_LINE_ID"}, {"original_string": "@Autowired\n  private SupplyLineService service;", "modifier": "@Autowired\n  private", "type": "SupplyLineService", "declarator": "service", "var_name": "service"}], "methods": [{"identifier": "search", "parameters": "(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"column\") String column,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,\n                                                 @Value(\"${search.page.size}\") String limit)", "modifiers": "@RequestMapping(value = \"/search\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> search(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"column\") String column,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,\n                                                 @Value(\"${search.page.size}\") String limit)", "full_signature": "@RequestMapping(value = \"/search\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public ResponseEntity<OpenLmisResponse> search(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"column\") String column,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,\n                                                 @Value(\"${search.page.size}\") String limit)", "class_method_signature": "SupplyLineController.search(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"column\") String column,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page,\n                                                 @Value(\"${search.page.size}\") String limit)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(@RequestBody SupplyLine supplyLine,\n                                                 HttpServletRequest request)", "modifiers": "@RequestMapping(method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> insert(@RequestBody SupplyLine supplyLine,\n                                                 HttpServletRequest request)", "full_signature": "@RequestMapping(method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public ResponseEntity<OpenLmisResponse> insert(@RequestBody SupplyLine supplyLine,\n                                                 HttpServletRequest request)", "class_method_signature": "SupplyLineController.insert(@RequestBody SupplyLine supplyLine,\n                                                 HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> update(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public ResponseEntity<OpenLmisResponse> update(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "class_method_signature": "SupplyLineController.update(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(@PathVariable(value = \"id\") Long id)", "modifiers": "@RequestMapping(value = \"/{id}\", method = GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public", "return": "SupplyLine", "signature": "SupplyLine getById(@PathVariable(value = \"id\") Long id)", "full_signature": "@RequestMapping(value = \"/{id}\", method = GET) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public SupplyLine getById(@PathVariable(value = \"id\") Long id)", "class_method_signature": "SupplyLineController.getById(@PathVariable(value = \"id\") Long id)", "testcase": false, "constructor": false}, {"identifier": "getSupplyingDepots", "parameters": "(HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/supplying-depots.json\", method = GET, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getSupplyingDepots(HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/supplying-depots.json\", method = GET, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> getSupplyingDepots(HttpServletRequest request)", "class_method_signature": "SupplyLineController.getSupplyingDepots(HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "modules/openlmis-web/src/main/java/org/openlmis/web/controller/SupplyLineController.java"}, "focal_method": {"identifier": "update", "parameters": "(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "body": "@RequestMapping(value = \"/{id}\", method = PUT, headers = ACCEPT_JSON)\n  @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\")\n  public ResponseEntity<OpenLmisResponse> update(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request) {\n    ResponseEntity<OpenLmisResponse> response;\n    Long userId = loggedInUserId(request);\n    supplyLine.setModifiedBy(userId);\n    supplyLine.setId(supervisoryNodeId);\n    try {\n      service.save(supplyLine);\n    } catch (DataException de) {\n      response = OpenLmisResponse.error(de, BAD_REQUEST);\n      return response;\n    }\n    response = OpenLmisResponse.success(messageService.message(\"message.supply.line.updated.success\"));\n    response.getBody().addData(SUPPLY_LINE_ID, supplyLine.getId());\n    return response;\n  }", "signature": "ResponseEntity<OpenLmisResponse> update(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_SUPPLY_LINE')\") public ResponseEntity<OpenLmisResponse> update(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "class_method_signature": "SupplyLineController.update(@RequestBody SupplyLine supplyLine,\n                                                 @PathVariable(value = \"id\") Long supervisoryNodeId,\n                                                 HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["loggedInUserId", "setModifiedBy", "setId", "save", "error", "success", "message", "addData", "getBody", "getId"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}