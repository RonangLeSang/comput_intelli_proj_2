{"test_class": {"identifier": "ShipmentServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private ShipmentRepository shipmentRepository;", "modifier": "@Mock\n  private", "type": "ShipmentRepository", "declarator": "shipmentRepository", "var_name": "shipmentRepository"}, {"original_string": "@Mock\n  private ProductService productService;", "modifier": "@Mock\n  private", "type": "ProductService", "declarator": "productService", "var_name": "productService"}, {"original_string": "@Mock\n  private RequisitionService requisitionService;", "modifier": "@Mock\n  private", "type": "RequisitionService", "declarator": "requisitionService", "var_name": "requisitionService"}, {"original_string": "@Mock\n  private ProgramProductService programproductService;", "modifier": "@Mock\n  private", "type": "ProgramProductService", "declarator": "programproductService", "var_name": "programproductService"}, {"original_string": "@InjectMocks\n  private ShipmentService shipmentService;", "modifier": "@InjectMocks\n  private", "type": "ShipmentService", "declarator": "shipmentService", "var_name": "shipmentService"}, {"original_string": "@Rule\n  public ExpectedException exException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "exException = ExpectedException.none()", "var_name": "exException"}], "file": "modules/shipment/src/test/java/org/openlmis/shipment/service/ShipmentServiceTest.java"}, "test_case": {"identifier": "shouldFillProductInfoFromRequisitionIfLineItemExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldFillProductInfoFromRequisitionIfLineItemExists() throws Exception {\n    ShipmentLineItem shipmentLineItem = spy(make(a(defaultShipmentLineItem, with(productCode, \"P10\"), with(orderId, 1L),\n      with(quantityShipped, 20))));\n\n    shipmentLineItem.setReplacedProductCode(null);\n    RnrLineItem lineItem = make(a(defaultRnrLineItem));\n    when(requisitionService.getNonSkippedLineItem(shipmentLineItem.getOrderId(), \"P10\")).thenReturn(lineItem);\n    when(productService.getByCode(shipmentLineItem.getProductCode())).thenReturn(new Product());\n\n    shipmentService.save(shipmentLineItem);\n\n    verify(shipmentLineItem).fillReferenceFields(lineItem);\n  }", "signature": "void shouldFillProductInfoFromRequisitionIfLineItemExists()", "full_signature": "@Test public void shouldFillProductInfoFromRequisitionIfLineItemExists()", "class_method_signature": "ShipmentServiceTest.shouldFillProductInfoFromRequisitionIfLineItemExists()", "testcase": true, "constructor": false, "invocations": ["spy", "make", "a", "with", "with", "with", "setReplacedProductCode", "make", "a", "thenReturn", "when", "getNonSkippedLineItem", "getOrderId", "thenReturn", "when", "getByCode", "getProductCode", "save", "fillReferenceFields", "verify"]}, "focal_class": {"identifier": "ShipmentService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private ShipmentRepository shipmentRepository;", "modifier": "@Autowired\n  private", "type": "ShipmentRepository", "declarator": "shipmentRepository", "var_name": "shipmentRepository"}, {"original_string": "@Autowired\n  private ProductService productService;", "modifier": "@Autowired\n  private", "type": "ProductService", "declarator": "productService", "var_name": "productService"}, {"original_string": "@Autowired\n  private RequisitionService requisitionService;", "modifier": "@Autowired\n  private", "type": "RequisitionService", "declarator": "requisitionService", "var_name": "requisitionService"}, {"original_string": "@Autowired\n  private ProgramProductService programProductService;", "modifier": "@Autowired\n  private", "type": "ProgramProductService", "declarator": "programProductService", "var_name": "programProductService"}], "methods": [{"identifier": "save", "parameters": "(ShipmentLineItem shipmentLineItem)", "modifiers": "public", "return": "void", "signature": "void save(ShipmentLineItem shipmentLineItem)", "full_signature": "public void save(ShipmentLineItem shipmentLineItem)", "class_method_signature": "ShipmentService.save(ShipmentLineItem shipmentLineItem)", "testcase": false, "constructor": false}, {"identifier": "insertShipmentFileInfo", "parameters": "(ShipmentFileInfo shipmentFileInfo)", "modifiers": "public", "return": "void", "signature": "void insertShipmentFileInfo(ShipmentFileInfo shipmentFileInfo)", "full_signature": "public void insertShipmentFileInfo(ShipmentFileInfo shipmentFileInfo)", "class_method_signature": "ShipmentService.insertShipmentFileInfo(ShipmentFileInfo shipmentFileInfo)", "testcase": false, "constructor": false}, {"identifier": "getLineItems", "parameters": "(long orderId)", "modifiers": "public", "return": "List<ShipmentLineItem>", "signature": "List<ShipmentLineItem> getLineItems(long orderId)", "full_signature": "public List<ShipmentLineItem> getLineItems(long orderId)", "class_method_signature": "ShipmentService.getLineItems(long orderId)", "testcase": false, "constructor": false}], "file": "modules/shipment/src/main/java/org/openlmis/shipment/service/ShipmentService.java"}, "focal_method": {"identifier": "save", "parameters": "(ShipmentLineItem shipmentLineItem)", "modifiers": "public", "return": "void", "body": "public void save(ShipmentLineItem shipmentLineItem) {\n    if (shipmentLineItem.getQuantityShipped() < 0) {\n      throw new DataException(\"error.negative.shipped.quantity\");\n    }\n    RnrLineItem lineItem;\n    if ((lineItem = requisitionService.getNonSkippedLineItem(shipmentLineItem.getOrderId(), shipmentLineItem.getProductCode())) != null) {\n      shipmentLineItem.fillReferenceFields(lineItem);\n    } else {\n      Product product = productService.getByCode(shipmentLineItem.getProductCode());\n      if (product == null) {\n        throw new DataException(\"error.unknown.product\");\n      }\n\n      Long programId = requisitionService.getProgramId(shipmentLineItem.getOrderId());\n      ProgramProduct programProduct = programProductService.getByProgramAndProductId(programId, product.getId());\n      if (programProduct != null) {\n        programProduct.setProduct(product);\n        shipmentLineItem.fillReferenceFields(programProduct);\n      } else {\n        shipmentLineItem.fillReferenceFields(product);\n      }\n    }\n\n    if (shipmentLineItem.getReplacedProductCode() != null) {\n      if (productService.getByCode(shipmentLineItem.getReplacedProductCode()) == null) {\n        throw new DataException(\"error.unknown.product\");\n      }\n    }\n\n    shipmentRepository.save(shipmentLineItem);\n  }", "signature": "void save(ShipmentLineItem shipmentLineItem)", "full_signature": "public void save(ShipmentLineItem shipmentLineItem)", "class_method_signature": "ShipmentService.save(ShipmentLineItem shipmentLineItem)", "testcase": false, "constructor": false, "invocations": ["getQuantityShipped", "getNonSkippedLineItem", "getOrderId", "getProductCode", "fillReferenceFields", "getByCode", "getProductCode", "getProgramId", "getOrderId", "getByProgramAndProductId", "getId", "setProduct", "fillReferenceFields", "fillReferenceFields", "getReplacedProductCode", "getByCode", "getReplacedProductCode", "save"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}