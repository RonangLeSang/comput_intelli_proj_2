{"test_class": {"identifier": "ProgramSupportedServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "@InjectMocks\n  ProgramSupportedService service;", "modifier": "@InjectMocks", "type": "ProgramSupportedService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n  FacilityService facilityService;", "modifier": "@Mock", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Mock\n  ProgramService programService;", "modifier": "@Mock", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Mock\n  ProgramSupportedRepository repository;", "modifier": "@Mock", "type": "ProgramSupportedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Mock\n  FacilityProgramProductService facilityProgramProductService;", "modifier": "@Mock", "type": "FacilityProgramProductService", "declarator": "facilityProgramProductService", "var_name": "facilityProgramProductService"}, {"original_string": "@Mock\n  private EventService eventService;", "modifier": "@Mock\n  private", "type": "EventService", "declarator": "eventService", "var_name": "eventService"}], "file": "modules/core/src/test/java/org/openlmis/core/service/ProgramSupportedServiceTest.java"}, "test_case": {"identifier": "shouldGetActiveProgramsSupportedByFacilityId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetActiveProgramsSupportedByFacilityId() throws Exception {\n\n    Long facilityId = 1L;\n    List<ProgramSupported> programSupported = asList(new ProgramSupported());\n    when(repository.getActiveByFacilityId(facilityId)).thenReturn(programSupported);\n\n    List<ProgramSupported> activeProgramSupported = service.getActiveByFacilityId(facilityId);\n\n    verify(repository).getActiveByFacilityId(facilityId);\n    assertThat(activeProgramSupported, equalTo(programSupported));\n\n  }", "signature": "void shouldGetActiveProgramsSupportedByFacilityId()", "full_signature": "@Test public void shouldGetActiveProgramsSupportedByFacilityId()", "class_method_signature": "ProgramSupportedServiceTest.shouldGetActiveProgramsSupportedByFacilityId()", "testcase": true, "constructor": false, "invocations": ["asList", "thenReturn", "when", "getActiveByFacilityId", "getActiveByFacilityId", "getActiveByFacilityId", "verify", "assertThat", "equalTo"]}, "focal_class": {"identifier": "ProgramSupportedService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  ProgramSupportedRepository repository;", "modifier": "@Autowired", "type": "ProgramSupportedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n  ProgramService programService;", "modifier": "@Autowired", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Autowired\n  FacilityService facilityService;", "modifier": "@Autowired", "type": "FacilityService", "declarator": "facilityService", "var_name": "facilityService"}, {"original_string": "@Autowired\n  EventService eventService;", "modifier": "@Autowired", "type": "EventService", "declarator": "eventService", "var_name": "eventService"}, {"original_string": "@Autowired\n  FacilityProgramProductService facilityProgramProductService;", "modifier": "@Autowired", "type": "FacilityProgramProductService", "declarator": "facilityProgramProductService", "var_name": "facilityProgramProductService"}, {"original_string": "Logger logger = Logger.getLogger(ProgramSupportedService.class);", "modifier": "", "type": "Logger", "declarator": "logger = Logger.getLogger(ProgramSupportedService.class)", "var_name": "logger"}], "methods": [{"identifier": "getAllByFacilityId", "parameters": "(Long facilityId)", "modifiers": "public", "return": "List<ProgramSupported>", "signature": "List<ProgramSupported> getAllByFacilityId(Long facilityId)", "full_signature": "public List<ProgramSupported> getAllByFacilityId(Long facilityId)", "class_method_signature": "ProgramSupportedService.getAllByFacilityId(Long facilityId)", "testcase": false, "constructor": false}, {"identifier": "updateSupportedPrograms", "parameters": "(Facility facility)", "modifiers": "public", "return": "void", "signature": "void updateSupportedPrograms(Facility facility)", "full_signature": "public void updateSupportedPrograms(Facility facility)", "class_method_signature": "ProgramSupportedService.updateSupportedPrograms(Facility facility)", "testcase": false, "constructor": false}, {"identifier": "cloneFacility", "parameters": "(Facility facility)", "modifiers": "private", "return": "Facility", "signature": "Facility cloneFacility(Facility facility)", "full_signature": "private Facility cloneFacility(Facility facility)", "class_method_signature": "ProgramSupportedService.cloneFacility(Facility facility)", "testcase": false, "constructor": false}, {"identifier": "getFilledByFacilityIdAndProgramId", "parameters": "(Long facilityId, Long programId)", "modifiers": "public", "return": "ProgramSupported", "signature": "ProgramSupported getFilledByFacilityIdAndProgramId(Long facilityId, Long programId)", "full_signature": "public ProgramSupported getFilledByFacilityIdAndProgramId(Long facilityId, Long programId)", "class_method_signature": "ProgramSupportedService.getFilledByFacilityIdAndProgramId(Long facilityId, Long programId)", "testcase": false, "constructor": false}, {"identifier": "getByFacilityIdAndProgramId", "parameters": "(Long facilityId, Long programId)", "modifiers": "public", "return": "ProgramSupported", "signature": "ProgramSupported getByFacilityIdAndProgramId(Long facilityId, Long programId)", "full_signature": "public ProgramSupported getByFacilityIdAndProgramId(Long facilityId, Long programId)", "class_method_signature": "ProgramSupportedService.getByFacilityIdAndProgramId(Long facilityId, Long programId)", "testcase": false, "constructor": false}, {"identifier": "uploadSupportedProgram", "parameters": "(ProgramSupported programSupported)", "modifiers": "public", "return": "void", "signature": "void uploadSupportedProgram(ProgramSupported programSupported)", "full_signature": "public void uploadSupportedProgram(ProgramSupported programSupported)", "class_method_signature": "ProgramSupportedService.uploadSupportedProgram(ProgramSupported programSupported)", "testcase": false, "constructor": false}, {"identifier": "getProgramSupported", "parameters": "(ProgramSupported programSupported)", "modifiers": "public", "return": "ProgramSupported", "signature": "ProgramSupported getProgramSupported(ProgramSupported programSupported)", "full_signature": "public ProgramSupported getProgramSupported(ProgramSupported programSupported)", "class_method_signature": "ProgramSupportedService.getProgramSupported(ProgramSupported programSupported)", "testcase": false, "constructor": false}, {"identifier": "getProgram", "parameters": "(ProgramSupported programSupported)", "modifiers": "private", "return": "Program", "signature": "Program getProgram(ProgramSupported programSupported)", "full_signature": "private Program getProgram(ProgramSupported programSupported)", "class_method_signature": "ProgramSupportedService.getProgram(ProgramSupported programSupported)", "testcase": false, "constructor": false}, {"identifier": "getFacility", "parameters": "(ProgramSupported programSupported)", "modifiers": "private", "return": "Facility", "signature": "Facility getFacility(ProgramSupported programSupported)", "full_signature": "private Facility getFacility(ProgramSupported programSupported)", "class_method_signature": "ProgramSupportedService.getFacility(ProgramSupported programSupported)", "testcase": false, "constructor": false}, {"identifier": "notifyProgramSupportedUpdated", "parameters": "(Facility facility)", "modifiers": "public", "return": "void", "signature": "void notifyProgramSupportedUpdated(Facility facility)", "full_signature": "public void notifyProgramSupportedUpdated(Facility facility)", "class_method_signature": "ProgramSupportedService.notifyProgramSupportedUpdated(Facility facility)", "testcase": false, "constructor": false}, {"identifier": "getActiveByFacilityId", "parameters": "(Long facilityId)", "modifiers": "public", "return": "List<ProgramSupported>", "signature": "List<ProgramSupported> getActiveByFacilityId(Long facilityId)", "full_signature": "public List<ProgramSupported> getActiveByFacilityId(Long facilityId)", "class_method_signature": "ProgramSupportedService.getActiveByFacilityId(Long facilityId)", "testcase": false, "constructor": false}, {"identifier": "updateForVirtualFacilities", "parameters": "(Facility parentFacility)", "modifiers": "public", "return": "void", "signature": "void updateForVirtualFacilities(Facility parentFacility)", "full_signature": "public void updateForVirtualFacilities(Facility parentFacility)", "class_method_signature": "ProgramSupportedService.updateForVirtualFacilities(Facility parentFacility)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/service/ProgramSupportedService.java"}, "focal_method": {"identifier": "getActiveByFacilityId", "parameters": "(Long facilityId)", "modifiers": "public", "return": "List<ProgramSupported>", "body": "public List<ProgramSupported> getActiveByFacilityId(Long facilityId) {\n    return repository.getActiveByFacilityId(facilityId);\n  }", "signature": "List<ProgramSupported> getActiveByFacilityId(Long facilityId)", "full_signature": "public List<ProgramSupported> getActiveByFacilityId(Long facilityId)", "class_method_signature": "ProgramSupportedService.getActiveByFacilityId(Long facilityId)", "testcase": false, "constructor": false, "invocations": ["getActiveByFacilityId"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}