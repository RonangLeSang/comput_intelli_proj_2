{"test_class": {"identifier": "RefrigeratorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n  RefrigeratorService service;", "modifier": "@InjectMocks", "type": "RefrigeratorService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n  RefrigeratorRepository repository;", "modifier": "@Mock", "type": "RefrigeratorRepository", "declarator": "repository", "var_name": "repository"}], "file": "modules/core/src/test/java/org/openlmis/core/service/RefrigeratorServiceTest.java"}, "test_case": {"identifier": "shouldInsertRefrigeratorIfDoesNotExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldInsertRefrigeratorIfDoesNotExists() {\n    Refrigerator refrigerator = new Refrigerator(\"SerialNumber\");\n\n    service.save(refrigerator);\n\n    verify(repository).insert(refrigerator);\n  }", "signature": "void shouldInsertRefrigeratorIfDoesNotExists()", "full_signature": "@Test public void shouldInsertRefrigeratorIfDoesNotExists()", "class_method_signature": "RefrigeratorServiceTest.shouldInsertRefrigeratorIfDoesNotExists()", "testcase": true, "constructor": false, "invocations": ["save", "insert", "verify"]}, "focal_class": {"identifier": "RefrigeratorService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  RefrigeratorRepository repository;", "modifier": "@Autowired", "type": "RefrigeratorRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "getRefrigeratorsForADeliveryZoneAndProgram", "parameters": "(Long deliveryZoneId, Long programId)", "modifiers": "public", "return": "List<Refrigerator>", "signature": "List<Refrigerator> getRefrigeratorsForADeliveryZoneAndProgram(Long deliveryZoneId, Long programId)", "full_signature": "public List<Refrigerator> getRefrigeratorsForADeliveryZoneAndProgram(Long deliveryZoneId, Long programId)", "class_method_signature": "RefrigeratorService.getRefrigeratorsForADeliveryZoneAndProgram(Long deliveryZoneId, Long programId)", "testcase": false, "constructor": false}, {"identifier": "disableAllFor", "parameters": "(Long facilityId)", "modifiers": "public", "return": "void", "signature": "void disableAllFor(Long facilityId)", "full_signature": "public void disableAllFor(Long facilityId)", "class_method_signature": "RefrigeratorService.disableAllFor(Long facilityId)", "testcase": false, "constructor": false}, {"identifier": "getAllBy", "parameters": "(Long facilityId)", "modifiers": "public", "return": "List<Refrigerator>", "signature": "List<Refrigerator> getAllBy(Long facilityId)", "full_signature": "public List<Refrigerator> getAllBy(Long facilityId)", "class_method_signature": "RefrigeratorService.getAllBy(Long facilityId)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Refrigerator refrigerator)", "modifiers": "public", "return": "void", "signature": "void save(Refrigerator refrigerator)", "full_signature": "public void save(Refrigerator refrigerator)", "class_method_signature": "RefrigeratorService.save(Refrigerator refrigerator)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/service/RefrigeratorService.java"}, "focal_method": {"identifier": "save", "parameters": "(Refrigerator refrigerator)", "modifiers": "public", "return": "void", "body": "public void save(Refrigerator refrigerator) {\n    if (refrigerator.getId() == null) {\n      repository.insert(refrigerator);\n    } else {\n      repository.update(refrigerator);\n    }\n  }", "signature": "void save(Refrigerator refrigerator)", "full_signature": "public void save(Refrigerator refrigerator)", "class_method_signature": "RefrigeratorService.save(Refrigerator refrigerator)", "testcase": false, "constructor": false, "invocations": ["getId", "insert", "update"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}