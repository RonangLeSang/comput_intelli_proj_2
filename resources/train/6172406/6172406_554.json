{"test_class": {"identifier": "ProgramRnrTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProgramRnrTemplate template;", "modifier": "private", "type": "ProgramRnrTemplate", "declarator": "template", "var_name": "template"}], "file": "modules/requisition/src/test/java/org/openlmis/rnr/domain/ProgramRnrTemplateTest.java"}, "test_case": {"identifier": "shouldGetOnlyVisibleColumnsAsPrintableColumnsForNonFullSupply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetOnlyVisibleColumnsAsPrintableColumnsForNonFullSupply() throws Exception {\n    boolean visible = true;\n    boolean fullSupply = false;\n\n    ProgramRnrTemplate programRnrTemplate = new ProgramRnrTemplate(1L, asList(\n      rnrColumn(PRODUCT, visible),\n      rnrColumn(PRODUCT_CODE, visible),\n      rnrColumn(DISPENSING_UNIT, visible),\n      rnrColumn(QUANTITY_REQUESTED, visible),\n      rnrColumn(PACKS_TO_SHIP, visible),\n      rnrColumn(PRICE, visible),\n      rnrColumn(COST, visible),\n      rnrColumn(QUANTITY_APPROVED, visible),\n\n      rnrColumn(QUANTITY_DISPENSED, visible)\n    ));\n\n    List<? extends Column> printableColumns = programRnrTemplate.getPrintableColumns(fullSupply);\n\n    assertThat(printableColumns.size(), is(8));\n    assertFalse(printableColumns.contains(rnrColumn(QUANTITY_DISPENSED, visible)));\n    assertTrue(printableColumns.contains(rnrColumn(QUANTITY_APPROVED, visible)));\n  }", "signature": "void shouldGetOnlyVisibleColumnsAsPrintableColumnsForNonFullSupply()", "full_signature": "@Test public void shouldGetOnlyVisibleColumnsAsPrintableColumnsForNonFullSupply()", "class_method_signature": "ProgramRnrTemplateTest.shouldGetOnlyVisibleColumnsAsPrintableColumnsForNonFullSupply()", "testcase": true, "constructor": false, "invocations": ["asList", "rnrColumn", "rnrColumn", "rnrColumn", "rnrColumn", "rnrColumn", "rnrColumn", "rnrColumn", "rnrColumn", "rnrColumn", "getPrintableColumns", "assertThat", "size", "is", "assertFalse", "contains", "rnrColumn", "assertTrue", "contains", "rnrColumn"]}, "focal_class": {"identifier": "ProgramRnrTemplate", "superclass": "extends Template", "interfaces": "", "fields": [{"original_string": "public static final String STOCK_IN_HAND = \"stockInHand\";", "modifier": "public static final", "type": "String", "declarator": "STOCK_IN_HAND = \"stockInHand\"", "var_name": "STOCK_IN_HAND"}, {"original_string": "public static final String REMARKS = \"remarks\";", "modifier": "public static final", "type": "String", "declarator": "REMARKS = \"remarks\"", "var_name": "REMARKS"}, {"original_string": "public static final String QUANTITY_DISPENSED = \"quantityDispensed\";", "modifier": "public static final", "type": "String", "declarator": "QUANTITY_DISPENSED = \"quantityDispensed\"", "var_name": "QUANTITY_DISPENSED"}, {"original_string": "public static final String BEGINNING_BALANCE = \"beginningBalance\";", "modifier": "public static final", "type": "String", "declarator": "BEGINNING_BALANCE = \"beginningBalance\"", "var_name": "BEGINNING_BALANCE"}, {"original_string": "public static final String QUANTITY_RECEIVED = \"quantityReceived\";", "modifier": "public static final", "type": "String", "declarator": "QUANTITY_RECEIVED = \"quantityReceived\"", "var_name": "QUANTITY_RECEIVED"}, {"original_string": "public static final String QUANTITY_APPROVED = \"quantityApproved\";", "modifier": "public static final", "type": "String", "declarator": "QUANTITY_APPROVED = \"quantityApproved\"", "var_name": "QUANTITY_APPROVED"}, {"original_string": "public static final String LOSSES_AND_ADJUSTMENTS = \"lossesAndAdjustments\";", "modifier": "public static final", "type": "String", "declarator": "LOSSES_AND_ADJUSTMENTS = \"lossesAndAdjustments\"", "var_name": "LOSSES_AND_ADJUSTMENTS"}, {"original_string": "public static final String STOCK_OUT_DAYS = \"stockOutDays\";", "modifier": "public static final", "type": "String", "declarator": "STOCK_OUT_DAYS = \"stockOutDays\"", "var_name": "STOCK_OUT_DAYS"}, {"original_string": "public static final String NORMALIZED_CONSUMPTION = \"normalizedConsumption\";", "modifier": "public static final", "type": "String", "declarator": "NORMALIZED_CONSUMPTION = \"normalizedConsumption\"", "var_name": "NORMALIZED_CONSUMPTION"}, {"original_string": "public static final String QUANTITY_REQUESTED = \"quantityRequested\";", "modifier": "public static final", "type": "String", "declarator": "QUANTITY_REQUESTED = \"quantityRequested\"", "var_name": "QUANTITY_REQUESTED"}, {"original_string": "public static final String REASON_FOR_REQUESTED_QUANTITY = \"reasonForRequestedQuantity\";", "modifier": "public static final", "type": "String", "declarator": "REASON_FOR_REQUESTED_QUANTITY = \"reasonForRequestedQuantity\"", "var_name": "REASON_FOR_REQUESTED_QUANTITY"}, {"original_string": "public static final String NEW_PATIENT_COUNT = \"newPatientCount\";", "modifier": "public static final", "type": "String", "declarator": "NEW_PATIENT_COUNT = \"newPatientCount\"", "var_name": "NEW_PATIENT_COUNT"}, {"original_string": "public static final String COST = \"cost\";", "modifier": "public static final", "type": "String", "declarator": "COST = \"cost\"", "var_name": "COST"}, {"original_string": "public static final String PRICE = \"price\";", "modifier": "public static final", "type": "String", "declarator": "PRICE = \"price\"", "var_name": "PRICE"}, {"original_string": "public static final String TOTAL = \"total\";", "modifier": "public static final", "type": "String", "declarator": "TOTAL = \"total\"", "var_name": "TOTAL"}, {"original_string": "public static final String PRODUCT = \"product\";", "modifier": "public static final", "type": "String", "declarator": "PRODUCT = \"product\"", "var_name": "PRODUCT"}, {"original_string": "public static final String DISPENSING_UNIT = \"dispensingUnit\";", "modifier": "public static final", "type": "String", "declarator": "DISPENSING_UNIT = \"dispensingUnit\"", "var_name": "DISPENSING_UNIT"}, {"original_string": "public static final String PRODUCT_CODE = \"productCode\";", "modifier": "public static final", "type": "String", "declarator": "PRODUCT_CODE = \"productCode\"", "var_name": "PRODUCT_CODE"}, {"original_string": "public static final String PACKS_TO_SHIP = \"packsToShip\";", "modifier": "public static final", "type": "String", "declarator": "PACKS_TO_SHIP = \"packsToShip\"", "var_name": "PACKS_TO_SHIP"}, {"original_string": "public static final String SKIPPED = \"skipped\";", "modifier": "public static final", "type": "String", "declarator": "SKIPPED = \"skipped\"", "var_name": "SKIPPED"}, {"original_string": "public static final String CALCULATED_ORDER_QUANTITY = \"calculatedOrderQuantity\";", "modifier": "public static final", "type": "String", "declarator": "CALCULATED_ORDER_QUANTITY = \"calculatedOrderQuantity\"", "var_name": "CALCULATED_ORDER_QUANTITY"}, {"original_string": "public static final String USER_NEEDS_TO_ENTER_DEPENDENT_FIELD = \"user.needs.to.enter.dependent.field\";", "modifier": "public static final", "type": "String", "declarator": "USER_NEEDS_TO_ENTER_DEPENDENT_FIELD = \"user.needs.to.enter.dependent.field\"", "var_name": "USER_NEEDS_TO_ENTER_DEPENDENT_FIELD"}, {"original_string": "public static final String INTERDEPENDENT_FIELDS_CAN_NOT_BE_CALCULATED = \"error.interdependent.fields.can.not.be.calculated\";", "modifier": "public static final", "type": "String", "declarator": "INTERDEPENDENT_FIELDS_CAN_NOT_BE_CALCULATED = \"error.interdependent.fields.can.not.be.calculated\"", "var_name": "INTERDEPENDENT_FIELDS_CAN_NOT_BE_CALCULATED"}, {"original_string": "public static final String COLUMN_SHOULD_BE_VISIBLE_IF_USER_INPUT = \"error.column.should.be.visible.if.user.input\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_SHOULD_BE_VISIBLE_IF_USER_INPUT = \"error.column.should.be.visible.if.user.input\"", "var_name": "COLUMN_SHOULD_BE_VISIBLE_IF_USER_INPUT"}, {"original_string": "public static final String USER_NEED_TO_ENTER_REQUESTED_QUANTITY_REASON = \"error.user.needs.to.enter.requested.quantity.reason\";", "modifier": "public static final", "type": "String", "declarator": "USER_NEED_TO_ENTER_REQUESTED_QUANTITY_REASON = \"error.user.needs.to.enter.requested.quantity.reason\"", "var_name": "USER_NEED_TO_ENTER_REQUESTED_QUANTITY_REASON"}, {"original_string": "final List<String> nonPrintableFullSupplyColumnNames = asList(REMARKS, REASON_FOR_REQUESTED_QUANTITY);", "modifier": "final", "type": "List<String>", "declarator": "nonPrintableFullSupplyColumnNames = asList(REMARKS, REASON_FOR_REQUESTED_QUANTITY)", "var_name": "nonPrintableFullSupplyColumnNames"}, {"original_string": "final List<String> printableNonFullSupplyColumnNames = asList(PRODUCT, PRODUCT_CODE, DISPENSING_UNIT, QUANTITY_REQUESTED, PACKS_TO_SHIP, PRICE, COST, QUANTITY_APPROVED);", "modifier": "final", "type": "List<String>", "declarator": "printableNonFullSupplyColumnNames = asList(PRODUCT, PRODUCT_CODE, DISPENSING_UNIT, QUANTITY_REQUESTED, PACKS_TO_SHIP, PRICE, COST, QUANTITY_APPROVED)", "var_name": "printableNonFullSupplyColumnNames"}, {"original_string": "@Getter\n  private Map<String, RnrColumn> rnrColumnsMap = new HashMap<>();", "modifier": "@Getter\n  private", "type": "Map<String, RnrColumn>", "declarator": "rnrColumnsMap = new HashMap<>()", "var_name": "rnrColumnsMap"}, {"original_string": "private Map<String, OpenLmisMessage> errorMap = new HashMap<>();", "modifier": "private", "type": "Map<String, OpenLmisMessage>", "declarator": "errorMap = new HashMap<>()", "var_name": "errorMap"}, {"original_string": "@Getter\n  @Setter\n  private Long modifiedBy;", "modifier": "@Getter\n  @Setter\n  private", "type": "Long", "declarator": "modifiedBy", "var_name": "modifiedBy"}, {"original_string": "@Getter\n  @Setter\n  private Boolean ApplyDefaultZero = false;", "modifier": "@Getter\n  @Setter\n  private", "type": "Boolean", "declarator": "ApplyDefaultZero = false", "var_name": "ApplyDefaultZero"}], "methods": [{"identifier": "ProgramRnrTemplate", "parameters": "(Long programId, List<? extends Column> rnrColumns)", "modifiers": "public", "return": "", "signature": " ProgramRnrTemplate(Long programId, List<? extends Column> rnrColumns)", "full_signature": "public  ProgramRnrTemplate(Long programId, List<? extends Column> rnrColumns)", "class_method_signature": "ProgramRnrTemplate.ProgramRnrTemplate(Long programId, List<? extends Column> rnrColumns)", "testcase": false, "constructor": true}, {"identifier": "ProgramRnrTemplate", "parameters": "(List<? extends Column> programRnrColumns)", "modifiers": "public", "return": "", "signature": " ProgramRnrTemplate(List<? extends Column> programRnrColumns)", "full_signature": "public  ProgramRnrTemplate(List<? extends Column> programRnrColumns)", "class_method_signature": "ProgramRnrTemplate.ProgramRnrTemplate(List<? extends Column> programRnrColumns)", "testcase": false, "constructor": true}, {"identifier": "columnsVisible", "parameters": "(String... rnrColumnNames)", "modifiers": "public", "return": "boolean", "signature": "boolean columnsVisible(String... rnrColumnNames)", "full_signature": "public boolean columnsVisible(String... rnrColumnNames)", "class_method_signature": "ProgramRnrTemplate.columnsVisible(String... rnrColumnNames)", "testcase": false, "constructor": false}, {"identifier": "columnsCalculated", "parameters": "(String... rnrColumnNames)", "modifiers": "public", "return": "boolean", "signature": "boolean columnsCalculated(String... rnrColumnNames)", "full_signature": "public boolean columnsCalculated(String... rnrColumnNames)", "class_method_signature": "ProgramRnrTemplate.columnsCalculated(String... rnrColumnNames)", "testcase": false, "constructor": false}, {"identifier": "columnsUserInput", "parameters": "(String... rnrColumnNames)", "modifiers": "public", "return": "boolean", "signature": "boolean columnsUserInput(String... rnrColumnNames)", "full_signature": "public boolean columnsUserInput(String... rnrColumnNames)", "class_method_signature": "ProgramRnrTemplate.columnsUserInput(String... rnrColumnNames)", "testcase": false, "constructor": false}, {"identifier": "getRnrColumnLabelFor", "parameters": "(String columnName)", "modifiers": "public", "return": "String", "signature": "String getRnrColumnLabelFor(String columnName)", "full_signature": "public String getRnrColumnLabelFor(String columnName)", "class_method_signature": "ProgramRnrTemplate.getRnrColumnLabelFor(String columnName)", "testcase": false, "constructor": false}, {"identifier": "areSelectedTogether", "parameters": "(String column1, String column2)", "modifiers": "private", "return": "boolean", "signature": "boolean areSelectedTogether(String column1, String column2)", "full_signature": "private boolean areSelectedTogether(String column1, String column2)", "class_method_signature": "ProgramRnrTemplate.areSelectedTogether(String column1, String column2)", "testcase": false, "constructor": false}, {"identifier": "validateToSave", "parameters": "()", "modifiers": "public", "return": "Map<String, OpenLmisMessage>", "signature": "Map<String, OpenLmisMessage> validateToSave()", "full_signature": "public Map<String, OpenLmisMessage> validateToSave()", "class_method_signature": "ProgramRnrTemplate.validateToSave()", "testcase": false, "constructor": false}, {"identifier": "validateColumnsTobeCheckedIfUserInput", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateColumnsTobeCheckedIfUserInput()", "full_signature": "private void validateColumnsTobeCheckedIfUserInput()", "class_method_signature": "ProgramRnrTemplate.validateColumnsTobeCheckedIfUserInput()", "testcase": false, "constructor": false}, {"identifier": "validateColumnToBeCheckedIfUserInput", "parameters": "(String column)", "modifiers": "private", "return": "void", "signature": "void validateColumnToBeCheckedIfUserInput(String column)", "full_signature": "private void validateColumnToBeCheckedIfUserInput(String column)", "class_method_signature": "ProgramRnrTemplate.validateColumnToBeCheckedIfUserInput(String column)", "testcase": false, "constructor": false}, {"identifier": "columnIsUserInput", "parameters": "(String column)", "modifiers": "private", "return": "boolean", "signature": "boolean columnIsUserInput(String column)", "full_signature": "private boolean columnIsUserInput(String column)", "class_method_signature": "ProgramRnrTemplate.columnIsUserInput(String column)", "testcase": false, "constructor": false}, {"identifier": "validateQuantityDispensedAndStockInHandCannotBeCalculatedAtSameTime", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateQuantityDispensedAndStockInHandCannotBeCalculatedAtSameTime()", "full_signature": "private void validateQuantityDispensedAndStockInHandCannotBeCalculatedAtSameTime()", "class_method_signature": "ProgramRnrTemplate.validateQuantityDispensedAndStockInHandCannotBeCalculatedAtSameTime()", "testcase": false, "constructor": false}, {"identifier": "validateCalculatedColumnHasDependentChecked", "parameters": "(String columnToEvaluate, String dependent)", "modifiers": "private", "return": "void", "signature": "void validateCalculatedColumnHasDependentChecked(String columnToEvaluate, String dependent)", "full_signature": "private void validateCalculatedColumnHasDependentChecked(String columnToEvaluate, String dependent)", "class_method_signature": "ProgramRnrTemplate.validateCalculatedColumnHasDependentChecked(String columnToEvaluate, String dependent)", "testcase": false, "constructor": false}, {"identifier": "validateQuantityRequested", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateQuantityRequested()", "full_signature": "private void validateQuantityRequested()", "class_method_signature": "ProgramRnrTemplate.validateQuantityRequested()", "testcase": false, "constructor": false}, {"identifier": "getPrintableColumns", "parameters": "(Boolean fullSupply)", "modifiers": "public", "return": "List<? extends Column>", "signature": "List<? extends Column> getPrintableColumns(Boolean fullSupply)", "full_signature": "public List<? extends Column> getPrintableColumns(Boolean fullSupply)", "class_method_signature": "ProgramRnrTemplate.getPrintableColumns(Boolean fullSupply)", "testcase": false, "constructor": false}], "file": "modules/requisition/src/main/java/org/openlmis/rnr/domain/ProgramRnrTemplate.java"}, "focal_method": {"identifier": "getPrintableColumns", "parameters": "(Boolean fullSupply)", "modifiers": "public", "return": "List<? extends Column>", "body": "public List<? extends Column> getPrintableColumns(Boolean fullSupply) {\n    List<RnrColumn> printableRnrColumns = new ArrayList<>();\n\n    for (Column rnrColumn : columns) {\n      if (rnrColumn.getVisible()) {\n        if (fullSupply && !nonPrintableFullSupplyColumnNames.contains(rnrColumn.getName())) {\n          printableRnrColumns.add((RnrColumn) rnrColumn);\n        } else if (!fullSupply && printableNonFullSupplyColumnNames.contains(rnrColumn.getName())) {\n          printableRnrColumns.add((RnrColumn) rnrColumn);\n        }\n      }\n    }\n    return printableRnrColumns;\n  }", "signature": "List<? extends Column> getPrintableColumns(Boolean fullSupply)", "full_signature": "public List<? extends Column> getPrintableColumns(Boolean fullSupply)", "class_method_signature": "ProgramRnrTemplate.getPrintableColumns(Boolean fullSupply)", "testcase": false, "constructor": false, "invocations": ["getVisible", "contains", "getName", "add", "contains", "getName", "add"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}