{"test_class": {"identifier": "RequisitionControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String FACILITY_CODE = \"F14\";", "modifier": "public static final", "type": "String", "declarator": "FACILITY_CODE = \"F14\"", "var_name": "FACILITY_CODE"}, {"original_string": "public static final String FACILITY_NAME = \"Facility\";", "modifier": "public static final", "type": "String", "declarator": "FACILITY_NAME = \"Facility\"", "var_name": "FACILITY_NAME"}, {"original_string": "public static final String PROGRAM_NAME = \"HIV\";", "modifier": "public static final", "type": "String", "declarator": "PROGRAM_NAME = \"HIV\"", "var_name": "PROGRAM_NAME"}, {"original_string": "private static final String USER = \"user\";", "modifier": "private static final", "type": "String", "declarator": "USER = \"user\"", "var_name": "USER"}, {"original_string": "private static final Long USER_ID = 1L;", "modifier": "private static final", "type": "Long", "declarator": "USER_ID = 1L", "var_name": "USER_ID"}, {"original_string": "private Rnr rnr;", "modifier": "private", "type": "Rnr", "declarator": "rnr", "var_name": "rnr"}, {"original_string": "private MockHttpServletRequest request;", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n  private RequisitionService requisitionService;", "modifier": "@Mock\n  private", "type": "RequisitionService", "declarator": "requisitionService", "var_name": "requisitionService"}, {"original_string": "@Mock\n  private RnrTemplateService rnrTemplateService;", "modifier": "@Mock\n  private", "type": "RnrTemplateService", "declarator": "rnrTemplateService", "var_name": "rnrTemplateService"}, {"original_string": "@Mock\n  private MessageService messageService;", "modifier": "@Mock\n  private", "type": "MessageService", "declarator": "messageService", "var_name": "messageService"}, {"original_string": "@Mock\n  private RegimenColumnService regimenColumnService;", "modifier": "@Mock\n  private", "type": "RegimenColumnService", "declarator": "regimenColumnService", "var_name": "regimenColumnService"}, {"original_string": "@Mock\n  private RequisitionStatusChangeService requisitionStatusChangeService;", "modifier": "@Mock\n  private", "type": "RequisitionStatusChangeService", "declarator": "requisitionStatusChangeService", "var_name": "requisitionStatusChangeService"}, {"original_string": "@Mock\n  private StaticReferenceDataService staticReferenceDataService;", "modifier": "@Mock\n  private", "type": "StaticReferenceDataService", "declarator": "staticReferenceDataService", "var_name": "staticReferenceDataService"}, {"original_string": "@Mock\n  private RequisitionPermissionService requisitionPermissionService;", "modifier": "@Mock\n  private", "type": "RequisitionPermissionService", "declarator": "requisitionPermissionService", "var_name": "requisitionPermissionService"}, {"original_string": "@InjectMocks\n  private RequisitionController controller;", "modifier": "@InjectMocks\n  private", "type": "RequisitionController", "declarator": "controller", "var_name": "controller"}], "file": "modules/openlmis-web/src/test/java/org/openlmis/web/controller/RequisitionControllerTest.java"}, "test_case": {"identifier": "shouldSaveWIPRnr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldSaveWIPRnr() throws Exception {\n\n    when(messageService.message(RNR_SAVE_SUCCESS)).thenReturn(\"R&R submitted successfully!\");\n\n    controller.saveRnr(rnr, rnr.getId(), request);\n\n    verify(requisitionService).save(rnr);\n    assertThat(rnr.getModifiedBy(), is(equalTo(USER_ID)));\n  }", "signature": "void shouldSaveWIPRnr()", "full_signature": "@Test public void shouldSaveWIPRnr()", "class_method_signature": "RequisitionControllerTest.shouldSaveWIPRnr()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "message", "saveRnr", "getId", "save", "verify", "assertThat", "getModifiedBy", "is", "equalTo"]}, "focal_class": {"identifier": "RequisitionController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "public static final String RNR = \"rnr\";", "modifier": "public static final", "type": "String", "declarator": "RNR = \"rnr\"", "var_name": "RNR"}, {"original_string": "public static final String RNR_SAVE_SUCCESS = \"msg.rnr.save.success\";", "modifier": "public static final", "type": "String", "declarator": "RNR_SAVE_SUCCESS = \"msg.rnr.save.success\"", "var_name": "RNR_SAVE_SUCCESS"}, {"original_string": "public static final String RNR_LIST = \"rnr_list\";", "modifier": "public static final", "type": "String", "declarator": "RNR_LIST = \"rnr_list\"", "var_name": "RNR_LIST"}, {"original_string": "public static final String RNR_TEMPLATE = \"rnr_template\";", "modifier": "public static final", "type": "String", "declarator": "RNR_TEMPLATE = \"rnr_template\"", "var_name": "RNR_TEMPLATE"}, {"original_string": "public static final String PERIODS = \"periods\";", "modifier": "public static final", "type": "String", "declarator": "PERIODS = \"periods\"", "var_name": "PERIODS"}, {"original_string": "public static final String CURRENCY = \"currency\";", "modifier": "public static final", "type": "String", "declarator": "CURRENCY = \"currency\"", "var_name": "CURRENCY"}, {"original_string": "public static final String COMMENTS = \"comments\";", "modifier": "public static final", "type": "String", "declarator": "COMMENTS = \"comments\"", "var_name": "COMMENTS"}, {"original_string": "public static final String REGIMEN_TEMPLATE = \"regimen_template\";", "modifier": "public static final", "type": "String", "declarator": "REGIMEN_TEMPLATE = \"regimen_template\"", "var_name": "REGIMEN_TEMPLATE"}, {"original_string": "public static final String LOSS_ADJUSTMENT_TYPES = \"lossAdjustmentTypes\";", "modifier": "public static final", "type": "String", "declarator": "LOSS_ADJUSTMENT_TYPES = \"lossAdjustmentTypes\"", "var_name": "LOSS_ADJUSTMENT_TYPES"}, {"original_string": "public static final String STATUS_CHANGES = \"statusChanges\";", "modifier": "public static final", "type": "String", "declarator": "STATUS_CHANGES = \"statusChanges\"", "var_name": "STATUS_CHANGES"}, {"original_string": "public static final String IS_EMERGENCY = \"is_emergency\";", "modifier": "public static final", "type": "String", "declarator": "IS_EMERGENCY = \"is_emergency\"", "var_name": "IS_EMERGENCY"}, {"original_string": "public static final String LOSSES_AND_ADJUSTMENT_TYPES = \"lossesAndAdjustmentTypes\";", "modifier": "public static final", "type": "String", "declarator": "LOSSES_AND_ADJUSTMENT_TYPES = \"lossesAndAdjustmentTypes\"", "var_name": "LOSSES_AND_ADJUSTMENT_TYPES"}, {"original_string": "public static final String NUMBER_OF_MONTHS = \"numberOfMonths\";", "modifier": "public static final", "type": "String", "declarator": "NUMBER_OF_MONTHS = \"numberOfMonths\"", "var_name": "NUMBER_OF_MONTHS"}, {"original_string": "public static final String CAN_APPROVE_RNR = \"canApproveRnr\";", "modifier": "public static final", "type": "String", "declarator": "CAN_APPROVE_RNR = \"canApproveRnr\"", "var_name": "CAN_APPROVE_RNR"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(RequisitionController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RequisitionController.class)", "var_name": "logger"}, {"original_string": "@Autowired\n  private RequisitionService requisitionService;", "modifier": "@Autowired\n  private", "type": "RequisitionService", "declarator": "requisitionService", "var_name": "requisitionService"}, {"original_string": "@Autowired\n  private RnrTemplateService rnrTemplateService;", "modifier": "@Autowired\n  private", "type": "RnrTemplateService", "declarator": "rnrTemplateService", "var_name": "rnrTemplateService"}, {"original_string": "@Autowired\n  private RequisitionStatusChangeService requisitionStatusChangeService;", "modifier": "@Autowired\n  private", "type": "RequisitionStatusChangeService", "declarator": "requisitionStatusChangeService", "var_name": "requisitionStatusChangeService"}, {"original_string": "@Autowired\n  private RegimenColumnService regimenColumnService;", "modifier": "@Autowired\n  private", "type": "RegimenColumnService", "declarator": "regimenColumnService", "var_name": "regimenColumnService"}, {"original_string": "@Autowired\n  private RequisitionPermissionService requisitionPermissionService;", "modifier": "@Autowired\n  private", "type": "RequisitionPermissionService", "declarator": "requisitionPermissionService", "var_name": "requisitionPermissionService"}], "methods": [{"identifier": "initiateRnr", "parameters": "(@RequestParam(\"facilityId\") Long facilityId,\n                                                      @RequestParam(\"programId\") Long programId,\n                                                      @RequestParam(\"emergency\") Boolean emergency,\n                                                      HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions\", method = POST, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> initiateRnr(@RequestParam(\"facilityId\") Long facilityId,\n                                                      @RequestParam(\"programId\") Long programId,\n                                                      @RequestParam(\"emergency\") Boolean emergency,\n                                                      HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions\", method = POST, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> initiateRnr(@RequestParam(\"facilityId\") Long facilityId,\n                                                      @RequestParam(\"programId\") Long programId,\n                                                      @RequestParam(\"emergency\") Boolean emergency,\n                                                      HttpServletRequest request)", "class_method_signature": "RequisitionController.initiateRnr(@RequestParam(\"facilityId\") Long facilityId,\n                                                      @RequestParam(\"programId\") Long programId,\n                                                      @RequestParam(\"emergency\") Boolean emergency,\n                                                      HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(@PathVariable Long id, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}\", method = GET) @PostAuthorize(\"@requisitionPermissionService.hasPermission(principal, returnObject.body.data.get(\\\"rnr\\\"), 'VIEW_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getById(@PathVariable Long id, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}\", method = GET) @PostAuthorize(\"@requisitionPermissionService.hasPermission(principal, returnObject.body.data.get(\\\"rnr\\\"), 'VIEW_REQUISITION')\") public ResponseEntity<OpenLmisResponse> getById(@PathVariable Long id, HttpServletRequest request)", "class_method_signature": "RequisitionController.getById(@PathVariable Long id, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getByIdWithOutSkippedItems", "parameters": "(@PathVariable Long id, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/skipped\", method = GET) @PostAuthorize(\"@requisitionPermissionService.hasPermission(principal, returnObject.body.data.get(\\\"rnr\\\"), 'VIEW_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getByIdWithOutSkippedItems(@PathVariable Long id, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/skipped\", method = GET) @PostAuthorize(\"@requisitionPermissionService.hasPermission(principal, returnObject.body.data.get(\\\"rnr\\\"), 'VIEW_REQUISITION')\") public ResponseEntity<OpenLmisResponse> getByIdWithOutSkippedItems(@PathVariable Long id, HttpServletRequest request)", "class_method_signature": "RequisitionController.getByIdWithOutSkippedItems(@PathVariable Long id, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "saveRnr", "parameters": "(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/save\", method = PUT, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> saveRnr(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/save\", method = PUT, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> saveRnr(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "class_method_signature": "RequisitionController.saveRnr(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(@PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/submit\", method = PUT, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> submit(@PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/submit\", method = PUT, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> submit(@PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "class_method_signature": "RequisitionController.submit(@PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "authorize", "parameters": "(@PathVariable(\"id\") Long id,\n                                                    HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/authorize\", method = PUT, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> authorize(@PathVariable(\"id\") Long id,\n                                                    HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/authorize\", method = PUT, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> authorize(@PathVariable(\"id\") Long id,\n                                                    HttpServletRequest request)", "class_method_signature": "RequisitionController.authorize(@PathVariable(\"id\") Long id,\n                                                    HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "approve", "parameters": "(@PathVariable(\"id\") Long id, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/approve\", method = PUT, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> approve(@PathVariable(\"id\") Long id, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/approve\", method = PUT, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> approve(@PathVariable(\"id\") Long id, HttpServletRequest request)", "class_method_signature": "RequisitionController.approve(@PathVariable(\"id\") Long id, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getReferenceData", "parameters": "()", "modifiers": "@RequestMapping(value = \"/requisitions/lossAndAdjustments/reference-data\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_REQUISITION, AUTHORIZE_REQUISITION, APPROVE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getReferenceData()", "full_signature": "@RequestMapping(value = \"/requisitions/lossAndAdjustments/reference-data\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'CREATE_REQUISITION, AUTHORIZE_REQUISITION, APPROVE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> getReferenceData()", "class_method_signature": "RequisitionController.getReferenceData()", "testcase": false, "constructor": false}, {"identifier": "getRequisitionsForView", "parameters": "(RequisitionSearchCriteria criteria, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'VIEW_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getRequisitionsForView(RequisitionSearchCriteria criteria, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'VIEW_REQUISITION')\") public ResponseEntity<OpenLmisResponse> getRequisitionsForView(RequisitionSearchCriteria criteria, HttpServletRequest request)", "class_method_signature": "RequisitionController.getRequisitionsForView(RequisitionSearchCriteria criteria, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "listForApproval", "parameters": "(HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions-for-approval\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'APPROVE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> listForApproval(HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions-for-approval\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'APPROVE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> listForApproval(HttpServletRequest request)", "class_method_signature": "RequisitionController.listForApproval(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "listForConvertToOrder", "parameters": "(@RequestParam(value = \"searchType\", required = false, defaultValue = SEARCH_ALL) String searchType,\n                                                                @RequestParam(value = \"searchVal\", required = false, defaultValue = \"\") String searchVal,\n                                                                @RequestParam(value = \"page\", required = true, defaultValue = \"1\") Integer page,\n                                                                @RequestParam(value = \"sortBy\", required = false, defaultValue = \"submittedDate\") String sortBy,\n                                                                @RequestParam(value = \"sortDirection\", required = false, defaultValue = \"asc\") String sortDirection,\n                                                                HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions-for-convert-to-order\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CONVERT_TO_ORDER')\") //TODO: move request params into form public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> listForConvertToOrder(@RequestParam(value = \"searchType\", required = false, defaultValue = SEARCH_ALL) String searchType,\n                                                                @RequestParam(value = \"searchVal\", required = false, defaultValue = \"\") String searchVal,\n                                                                @RequestParam(value = \"page\", required = true, defaultValue = \"1\") Integer page,\n                                                                @RequestParam(value = \"sortBy\", required = false, defaultValue = \"submittedDate\") String sortBy,\n                                                                @RequestParam(value = \"sortDirection\", required = false, defaultValue = \"asc\") String sortDirection,\n                                                                HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions-for-convert-to-order\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CONVERT_TO_ORDER')\") //TODO: move request params into form public ResponseEntity<OpenLmisResponse> listForConvertToOrder(@RequestParam(value = \"searchType\", required = false, defaultValue = SEARCH_ALL) String searchType,\n                                                                @RequestParam(value = \"searchVal\", required = false, defaultValue = \"\") String searchVal,\n                                                                @RequestParam(value = \"page\", required = true, defaultValue = \"1\") Integer page,\n                                                                @RequestParam(value = \"sortBy\", required = false, defaultValue = \"submittedDate\") String sortBy,\n                                                                @RequestParam(value = \"sortDirection\", required = false, defaultValue = \"asc\") String sortDirection,\n                                                                HttpServletRequest request)", "class_method_signature": "RequisitionController.listForConvertToOrder(@RequestParam(value = \"searchType\", required = false, defaultValue = SEARCH_ALL) String searchType,\n                                                                @RequestParam(value = \"searchVal\", required = false, defaultValue = \"\") String searchVal,\n                                                                @RequestParam(value = \"page\", required = true, defaultValue = \"1\") Integer page,\n                                                                @RequestParam(value = \"sortBy\", required = false, defaultValue = \"submittedDate\") String sortBy,\n                                                                @RequestParam(value = \"sortDirection\", required = false, defaultValue = \"asc\") String sortDirection,\n                                                                HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsForInitiatingRequisitionWithRequisitionStatus", "parameters": "(\n    RequisitionSearchCriteria criteria, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/logistics/periods\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION, AUTHORIZE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getAllPeriodsForInitiatingRequisitionWithRequisitionStatus(\n    RequisitionSearchCriteria criteria, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/logistics/periods\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION, AUTHORIZE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> getAllPeriodsForInitiatingRequisitionWithRequisitionStatus(\n    RequisitionSearchCriteria criteria, HttpServletRequest request)", "class_method_signature": "RequisitionController.getAllPeriodsForInitiatingRequisitionWithRequisitionStatus(\n    RequisitionSearchCriteria criteria, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "printRequisition", "parameters": "(@PathVariable Long id)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/print\", method = GET, headers = ACCEPT_PDF) @PostAuthorize(\"@requisitionPermissionService.hasPermission(principal, returnObject.model.get(\\\"rnr\\\"), 'VIEW_REQUISITION')\") public", "return": "ModelAndView", "signature": "ModelAndView printRequisition(@PathVariable Long id)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/print\", method = GET, headers = ACCEPT_PDF) @PostAuthorize(\"@requisitionPermissionService.hasPermission(principal, returnObject.model.get(\\\"rnr\\\"), 'VIEW_REQUISITION')\") public ModelAndView printRequisition(@PathVariable Long id)", "class_method_signature": "RequisitionController.printRequisition(@PathVariable Long id)", "testcase": false, "constructor": false}, {"identifier": "insertComment", "parameters": "(@RequestBody Comment comment,\n                                                        @PathVariable(\"id\") Long id,\n                                                        HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/comments\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION, AUTHORIZE_REQUISITION, APPROVE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> insertComment(@RequestBody Comment comment,\n                                                        @PathVariable(\"id\") Long id,\n                                                        HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/comments\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION, AUTHORIZE_REQUISITION, APPROVE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> insertComment(@RequestBody Comment comment,\n                                                        @PathVariable(\"id\") Long id,\n                                                        HttpServletRequest request)", "class_method_signature": "RequisitionController.insertComment(@RequestBody Comment comment,\n                                                        @PathVariable(\"id\") Long id,\n                                                        HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getCommentsForARnr", "parameters": "(@PathVariable Long id)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/comments\", method = GET, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getCommentsForARnr(@PathVariable Long id)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/comments\", method = GET, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> getCommentsForARnr(@PathVariable Long id)", "class_method_signature": "RequisitionController.getCommentsForARnr(@PathVariable Long id)", "testcase": false, "constructor": false}, {"identifier": "deleteRnR", "parameters": "(@PathVariable(\"id\") Long rnrId)", "modifiers": "@RequestMapping(value = \"/requisitions/delete/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'DELETE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> deleteRnR(@PathVariable(\"id\") Long rnrId)", "full_signature": "@RequestMapping(value = \"/requisitions/delete/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'DELETE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> deleteRnR(@PathVariable(\"id\") Long rnrId)", "class_method_signature": "RequisitionController.deleteRnR(@PathVariable(\"id\") Long rnrId)", "testcase": false, "constructor": false}, {"identifier": "skipRnR", "parameters": "(@PathVariable(\"id\") Long rnrId,\n                                                    HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/skip/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> skipRnR(@PathVariable(\"id\") Long rnrId,\n                                                    HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/skip/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> skipRnR(@PathVariable(\"id\") Long rnrId,\n                                                    HttpServletRequest request)", "class_method_signature": "RequisitionController.skipRnR(@PathVariable(\"id\") Long rnrId,\n                                                    HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "rejectRnR", "parameters": "(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/reject/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> rejectRnR(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/reject/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> rejectRnR(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "class_method_signature": "RequisitionController.rejectRnR(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "reopenRnR", "parameters": "(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/reopen/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> reopenRnR(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/reopen/{id}\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal, 'CREATE_REQUISITION')\") public ResponseEntity<OpenLmisResponse> reopenRnR(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "class_method_signature": "RequisitionController.reopenRnR(@PathVariable(\"id\") Long rnrId,\n                                                  HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "modules/openlmis-web/src/main/java/org/openlmis/web/controller/RequisitionController.java"}, "focal_method": {"identifier": "saveRnr", "parameters": "(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/requisitions/{id}/save\", method = PUT, headers = ACCEPT_JSON) public", "return": "ResponseEntity<OpenLmisResponse>", "body": "@RequestMapping(value = \"/requisitions/{id}/save\", method = PUT, headers = ACCEPT_JSON)\n  public ResponseEntity<OpenLmisResponse> saveRnr(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request) {\n    try {\n      rnr.setId(id);\n      rnr.setModifiedBy(loggedInUserId(request));\n      requisitionService.save(rnr);\n      return OpenLmisResponse.success(messageService.message(RNR_SAVE_SUCCESS));\n    } catch (DataException e) {\n      return OpenLmisResponse.error(e, BAD_REQUEST);\n    }\n  }", "signature": "ResponseEntity<OpenLmisResponse> saveRnr(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/requisitions/{id}/save\", method = PUT, headers = ACCEPT_JSON) public ResponseEntity<OpenLmisResponse> saveRnr(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "class_method_signature": "RequisitionController.saveRnr(@RequestBody Rnr rnr,\n                                                  @PathVariable(\"id\") Long id,\n                                                  HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["setId", "setModifiedBy", "loggedInUserId", "save", "success", "message", "error"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}