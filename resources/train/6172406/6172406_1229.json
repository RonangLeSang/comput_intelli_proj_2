{"test_class": {"identifier": "ProgramProductServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectException = ExpectedException.none()", "var_name": "expectException"}, {"original_string": "@Mock\n  private ProgramProductRepository programProductRepository;", "modifier": "@Mock\n  private", "type": "ProgramProductRepository", "declarator": "programProductRepository", "var_name": "programProductRepository"}, {"original_string": "@Mock\n  private ProductService productService;", "modifier": "@Mock\n  private", "type": "ProductService", "declarator": "productService", "var_name": "productService"}, {"original_string": "@Mock\n  private ProgramService programService;", "modifier": "@Mock\n  private", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Mock\n  private ProgramRepository programRepository;", "modifier": "@Mock\n  private", "type": "ProgramRepository", "declarator": "programRepository", "var_name": "programRepository"}, {"original_string": "@Mock\n  private FacilityRepository facilityRepository;", "modifier": "@Mock\n  private", "type": "FacilityRepository", "declarator": "facilityRepository", "var_name": "facilityRepository"}, {"original_string": "@Mock\n  private FacilityTypeRepository facilityTypeRepository;", "modifier": "@Mock\n  private", "type": "FacilityTypeRepository", "declarator": "facilityTypeRepository", "var_name": "facilityTypeRepository"}, {"original_string": "@Mock\n  private ProductCategoryService categoryService;", "modifier": "@Mock\n  private", "type": "ProductCategoryService", "declarator": "categoryService", "var_name": "categoryService"}, {"original_string": "@Mock\n  private FacilityApprovedProductService facilityApprovedProductService;", "modifier": "@Mock\n  private", "type": "FacilityApprovedProductService", "declarator": "facilityApprovedProductService", "var_name": "facilityApprovedProductService"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@InjectMocks\n  private ProgramProductService service;", "modifier": "@InjectMocks\n  private", "type": "ProgramProductService", "declarator": "service", "var_name": "service"}], "file": "modules/core/src/test/java/org/openlmis/core/service/ProgramProductServiceTest.java"}, "test_case": {"identifier": "shouldValidateProgramProductPriceBeforeSaving", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldValidateProgramProductPriceBeforeSaving() throws Exception {\n    expectException.expect(DataException.class);\n    expectException.expectMessage(\"error-code\");\n\n    ProgramProductPrice programProductPrice = mock(ProgramProductPrice.class);\n    doThrow(new DataException(\"error-code\")).when(programProductPrice).validate();\n\n    service.updateProgramProductPrice(programProductPrice);\n  }", "signature": "void shouldValidateProgramProductPriceBeforeSaving()", "full_signature": "@Test public void shouldValidateProgramProductPriceBeforeSaving()", "class_method_signature": "ProgramProductServiceTest.shouldValidateProgramProductPriceBeforeSaving()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "mock", "validate", "when", "doThrow", "updateProgramProductPrice"]}, "focal_class": {"identifier": "ProgramProductService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private ProgramProductRepository programProductRepository;", "modifier": "@Autowired\n  private", "type": "ProgramProductRepository", "declarator": "programProductRepository", "var_name": "programProductRepository"}, {"original_string": "@Autowired\n  private ProgramService programService;", "modifier": "@Autowired\n  private", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Autowired\n  private ProductService productService;", "modifier": "@Autowired\n  private", "type": "ProductService", "declarator": "productService", "var_name": "productService"}, {"original_string": "@Autowired\n  private ProgramRepository programRepository;", "modifier": "@Autowired\n  private", "type": "ProgramRepository", "declarator": "programRepository", "var_name": "programRepository"}, {"original_string": "@Autowired\n  private FacilityTypeRepository facilityTypeRepository;", "modifier": "@Autowired\n  private", "type": "FacilityTypeRepository", "declarator": "facilityTypeRepository", "var_name": "facilityTypeRepository"}, {"original_string": "@Autowired\n  private ProductCategoryService categoryService;", "modifier": "@Autowired\n  private", "type": "ProductCategoryService", "declarator": "categoryService", "var_name": "categoryService"}, {"original_string": "@Autowired\n  private FacilityApprovedProductService facilityApprovedProductService;", "modifier": "@Autowired\n  private", "type": "FacilityApprovedProductService", "declarator": "facilityApprovedProductService", "var_name": "facilityApprovedProductService"}], "methods": [{"identifier": "getIdByProgramIdAndProductId", "parameters": "(Long programId, Long productId)", "modifiers": "public", "return": "Long", "signature": "Long getIdByProgramIdAndProductId(Long programId, Long productId)", "full_signature": "public Long getIdByProgramIdAndProductId(Long programId, Long productId)", "class_method_signature": "ProgramProductService.getIdByProgramIdAndProductId(Long programId, Long productId)", "testcase": false, "constructor": false}, {"identifier": "updateProgramProductPrice", "parameters": "(ProgramProductPrice programProductPrice)", "modifiers": "public", "return": "void", "signature": "void updateProgramProductPrice(ProgramProductPrice programProductPrice)", "full_signature": "public void updateProgramProductPrice(ProgramProductPrice programProductPrice)", "class_method_signature": "ProgramProductService.updateProgramProductPrice(ProgramProductPrice programProductPrice)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "void", "signature": "void save(ProgramProduct programProduct)", "full_signature": "public void save(ProgramProduct programProduct)", "class_method_signature": "ProgramProductService.save(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "saveAndLogPriceChange", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "void", "signature": "void saveAndLogPriceChange(ProgramProduct programProduct)", "full_signature": "public void saveAndLogPriceChange(ProgramProduct programProduct)", "class_method_signature": "ProgramProductService.saveAndLogPriceChange(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "logPriceChange", "parameters": "(ProgramProduct programProduct)", "modifiers": "private", "return": "void", "signature": "void logPriceChange(ProgramProduct programProduct)", "full_signature": "private void logPriceChange(ProgramProduct programProduct)", "class_method_signature": "ProgramProductService.logPriceChange(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getByProgramAndProductCode", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "ProgramProduct", "signature": "ProgramProduct getByProgramAndProductCode(ProgramProduct programProduct)", "full_signature": "public ProgramProduct getByProgramAndProductCode(ProgramProduct programProduct)", "class_method_signature": "ProgramProductService.getByProgramAndProductCode(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getProgramProductPrice", "parameters": "(ProgramProduct programProduct)", "modifiers": "public", "return": "ProgramProductPrice", "signature": "ProgramProductPrice getProgramProductPrice(ProgramProduct programProduct)", "full_signature": "public ProgramProductPrice getProgramProductPrice(ProgramProduct programProduct)", "class_method_signature": "ProgramProductService.getProgramProductPrice(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "populateProgramProductIds", "parameters": "(ProgramProduct programProduct)", "modifiers": "private", "return": "void", "signature": "void populateProgramProductIds(ProgramProduct programProduct)", "full_signature": "private void populateProgramProductIds(ProgramProduct programProduct)", "class_method_signature": "ProgramProductService.populateProgramProductIds(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getByProgram", "parameters": "(Program program)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getByProgram(Program program)", "full_signature": "public List<ProgramProduct> getByProgram(Program program)", "class_method_signature": "ProgramProductService.getByProgram(Program program)", "testcase": false, "constructor": false}, {"identifier": "getByProductCode", "parameters": "(String productCode)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getByProductCode(String productCode)", "full_signature": "public List<ProgramProduct> getByProductCode(String productCode)", "class_method_signature": "ProgramProductService.getByProductCode(String productCode)", "testcase": false, "constructor": false}, {"identifier": "getProgramProductsBy", "parameters": "(String programCode, String facilityTypeCode)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getProgramProductsBy(String programCode, String facilityTypeCode)", "full_signature": "public List<ProgramProduct> getProgramProductsBy(String programCode, String facilityTypeCode)", "class_method_signature": "ProgramProductService.getProgramProductsBy(String programCode, String facilityTypeCode)", "testcase": false, "constructor": false}, {"identifier": "getNonFullSupplyProductsForProgram", "parameters": "(Program program)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getNonFullSupplyProductsForProgram(Program program)", "full_signature": "public List<ProgramProduct> getNonFullSupplyProductsForProgram(Program program)", "class_method_signature": "ProgramProductService.getNonFullSupplyProductsForProgram(Program program)", "testcase": false, "constructor": false}, {"identifier": "validateAndSetProductCategory", "parameters": "(ProgramProduct programProduct)", "modifiers": "private", "return": "void", "signature": "void validateAndSetProductCategory(ProgramProduct programProduct)", "full_signature": "private void validateAndSetProductCategory(ProgramProduct programProduct)", "class_method_signature": "ProgramProductService.validateAndSetProductCategory(ProgramProduct programProduct)", "testcase": false, "constructor": false}, {"identifier": "getActiveByProgram", "parameters": "(Long programId)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getActiveByProgram(Long programId)", "full_signature": "public List<ProgramProduct> getActiveByProgram(Long programId)", "class_method_signature": "ProgramProductService.getActiveByProgram(Long programId)", "testcase": false, "constructor": false}, {"identifier": "getByProgramAndProductId", "parameters": "(Long programId, Long productId)", "modifiers": "public", "return": "ProgramProduct", "signature": "ProgramProduct getByProgramAndProductId(Long programId, Long productId)", "full_signature": "public ProgramProduct getByProgramAndProductId(Long programId, Long productId)", "class_method_signature": "ProgramProductService.getByProgramAndProductId(Long programId, Long productId)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String searchParam, Pagination pagination, String column)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> search(String searchParam, Pagination pagination, String column)", "full_signature": "public List<ProgramProduct> search(String searchParam, Pagination pagination, String column)", "class_method_signature": "ProgramProductService.search(String searchParam, Pagination pagination, String column)", "testcase": false, "constructor": false}, {"identifier": "getUnapprovedProgramProducts", "parameters": "(Long facilityTypeId, Long programId)", "modifiers": "public", "return": "List<ProgramProduct>", "signature": "List<ProgramProduct> getUnapprovedProgramProducts(Long facilityTypeId, Long programId)", "full_signature": "public List<ProgramProduct> getUnapprovedProgramProducts(Long facilityTypeId, Long programId)", "class_method_signature": "ProgramProductService.getUnapprovedProgramProducts(Long facilityTypeId, Long programId)", "testcase": false, "constructor": false}, {"identifier": "isApproved", "parameters": "(final ProgramProduct programProduct, List<FacilityTypeApprovedProduct> approvedProducts)", "modifiers": "private", "return": "boolean", "signature": "boolean isApproved(final ProgramProduct programProduct, List<FacilityTypeApprovedProduct> approvedProducts)", "full_signature": "private boolean isApproved(final ProgramProduct programProduct, List<FacilityTypeApprovedProduct> approvedProducts)", "class_method_signature": "ProgramProductService.isApproved(final ProgramProduct programProduct, List<FacilityTypeApprovedProduct> approvedProducts)", "testcase": false, "constructor": false}, {"identifier": "getTotalSearchResultCount", "parameters": "(String searchParam, String column)", "modifiers": "public", "return": "Integer", "signature": "Integer getTotalSearchResultCount(String searchParam, String column)", "full_signature": "public Integer getTotalSearchResultCount(String searchParam, String column)", "class_method_signature": "ProgramProductService.getTotalSearchResultCount(String searchParam, String column)", "testcase": false, "constructor": false}, {"identifier": "saveAll", "parameters": "(List<ProgramProduct> programProducts, Product product)", "modifiers": "@Transactional public", "return": "void", "signature": "void saveAll(List<ProgramProduct> programProducts, Product product)", "full_signature": "@Transactional public void saveAll(List<ProgramProduct> programProducts, Product product)", "class_method_signature": "ProgramProductService.saveAll(List<ProgramProduct> programProducts, Product product)", "testcase": false, "constructor": false}, {"identifier": "insertISA", "parameters": "(ProgramProductISA isa)", "modifiers": "public", "return": "void", "signature": "void insertISA(ProgramProductISA isa)", "full_signature": "public void insertISA(ProgramProductISA isa)", "class_method_signature": "ProgramProductService.insertISA(ProgramProductISA isa)", "testcase": false, "constructor": false}, {"identifier": "updateISA", "parameters": "(ProgramProductISA isa)", "modifiers": "public", "return": "void", "signature": "void updateISA(ProgramProductISA isa)", "full_signature": "public void updateISA(ProgramProductISA isa)", "class_method_signature": "ProgramProductService.updateISA(ProgramProductISA isa)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/service/ProgramProductService.java"}, "focal_method": {"identifier": "updateProgramProductPrice", "parameters": "(ProgramProductPrice programProductPrice)", "modifiers": "public", "return": "void", "body": "public void updateProgramProductPrice(ProgramProductPrice programProductPrice) {\n    programProductPrice.validate();\n\n    ProgramProduct programProduct = programProductPrice.getProgramProduct();\n    ProgramProduct programProductWithId = programProductRepository.getByProgramAndProductCode(programProduct);\n    if (programProductWithId == null)\n      throw new DataException(\"programProduct.product.program.invalid\");\n\n    programProduct.setId(programProductWithId.getId());\n    programProduct.setModifiedBy(programProductPrice.getModifiedBy());\n    programProduct.setModifiedDate(programProductPrice.getModifiedDate());\n\n    programProductRepository.updateCurrentPrice(programProduct);\n    programProductRepository.updatePriceHistory(programProductPrice);\n  }", "signature": "void updateProgramProductPrice(ProgramProductPrice programProductPrice)", "full_signature": "public void updateProgramProductPrice(ProgramProductPrice programProductPrice)", "class_method_signature": "ProgramProductService.updateProgramProductPrice(ProgramProductPrice programProductPrice)", "testcase": false, "constructor": false, "invocations": ["validate", "getProgramProduct", "getByProgramAndProductCode", "setId", "getId", "setModifiedBy", "getModifiedBy", "setModifiedDate", "getModifiedDate", "updateCurrentPrice", "updatePriceHistory"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}