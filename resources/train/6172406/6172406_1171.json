{"test_class": {"identifier": "ProcessingScheduleServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n  private ProcessingScheduleRepository processingScheduleRepository;", "modifier": "@Mock\n  private", "type": "ProcessingScheduleRepository", "declarator": "processingScheduleRepository", "var_name": "processingScheduleRepository"}, {"original_string": "@Mock\n  private ProcessingPeriodRepository periodRepository;", "modifier": "@Mock\n  private", "type": "ProcessingPeriodRepository", "declarator": "periodRepository", "var_name": "periodRepository"}, {"original_string": "@Mock\n  private RequisitionGroupRepository requisitionGroupRepository;", "modifier": "@Mock\n  private", "type": "RequisitionGroupRepository", "declarator": "requisitionGroupRepository", "var_name": "requisitionGroupRepository"}, {"original_string": "@Mock\n  private RequisitionGroupProgramScheduleRepository requisitionGroupProgramScheduleRepository;", "modifier": "@Mock\n  private", "type": "RequisitionGroupProgramScheduleRepository", "declarator": "requisitionGroupProgramScheduleRepository", "var_name": "requisitionGroupProgramScheduleRepository"}, {"original_string": "private ProcessingScheduleService service;", "modifier": "private", "type": "ProcessingScheduleService", "declarator": "service", "var_name": "service"}, {"original_string": "private final Long PROCESSING_PERIOD_ID = 1L;", "modifier": "private final", "type": "Long", "declarator": "PROCESSING_PERIOD_ID = 1L", "var_name": "PROCESSING_PERIOD_ID"}], "file": "modules/core/src/test/java/org/openlmis/core/service/ProcessingScheduleServiceTest.java"}, "test_case": {"identifier": "shouldGetAllSchedules", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGetAllSchedules() throws Exception {\n    List<ProcessingSchedule> processingScheduleList = new ArrayList<>();\n    processingScheduleList.add(new ProcessingSchedule());\n    when(processingScheduleRepository.getAll()).thenReturn(processingScheduleList);\n\n    List<ProcessingSchedule> processingSchedules = service.getAll();\n\n    assertThat(processingSchedules, is(processingScheduleList));\n  }", "signature": "void shouldGetAllSchedules()", "full_signature": "@Test public void shouldGetAllSchedules()", "class_method_signature": "ProcessingScheduleServiceTest.shouldGetAllSchedules()", "testcase": true, "constructor": false, "invocations": ["add", "thenReturn", "when", "getAll", "getAll", "assertThat", "is"]}, "focal_class": {"identifier": "ProcessingScheduleService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProcessingScheduleRepository repository;", "modifier": "private", "type": "ProcessingScheduleRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private ProcessingPeriodRepository periodRepository;", "modifier": "private", "type": "ProcessingPeriodRepository", "declarator": "periodRepository", "var_name": "periodRepository"}, {"original_string": "private RequisitionGroupRepository requisitionGroupRepository;", "modifier": "private", "type": "RequisitionGroupRepository", "declarator": "requisitionGroupRepository", "var_name": "requisitionGroupRepository"}, {"original_string": "private RequisitionGroupProgramScheduleRepository requisitionGroupProgramScheduleRepository;", "modifier": "private", "type": "RequisitionGroupProgramScheduleRepository", "declarator": "requisitionGroupProgramScheduleRepository", "var_name": "requisitionGroupProgramScheduleRepository"}], "methods": [{"identifier": "ProcessingScheduleService", "parameters": "(ProcessingScheduleRepository scheduleRepository, ProcessingPeriodRepository periodRepository,\n                                   RequisitionGroupRepository requisitionGroupRepository, RequisitionGroupProgramScheduleRepository requisitionGroupProgramScheduleRepository)", "modifiers": "@Autowired public", "return": "", "signature": " ProcessingScheduleService(ProcessingScheduleRepository scheduleRepository, ProcessingPeriodRepository periodRepository,\n                                   RequisitionGroupRepository requisitionGroupRepository, RequisitionGroupProgramScheduleRepository requisitionGroupProgramScheduleRepository)", "full_signature": "@Autowired public  ProcessingScheduleService(ProcessingScheduleRepository scheduleRepository, ProcessingPeriodRepository periodRepository,\n                                   RequisitionGroupRepository requisitionGroupRepository, RequisitionGroupProgramScheduleRepository requisitionGroupProgramScheduleRepository)", "class_method_signature": "ProcessingScheduleService.ProcessingScheduleService(ProcessingScheduleRepository scheduleRepository, ProcessingPeriodRepository periodRepository,\n                                   RequisitionGroupRepository requisitionGroupRepository, RequisitionGroupProgramScheduleRepository requisitionGroupProgramScheduleRepository)", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<ProcessingSchedule>", "signature": "List<ProcessingSchedule> getAll()", "full_signature": "public List<ProcessingSchedule> getAll()", "class_method_signature": "ProcessingScheduleService.getAll()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(ProcessingSchedule processingSchedule)", "modifiers": "public", "return": "ProcessingSchedule", "signature": "ProcessingSchedule save(ProcessingSchedule processingSchedule)", "full_signature": "public ProcessingSchedule save(ProcessingSchedule processingSchedule)", "class_method_signature": "ProcessingScheduleService.save(ProcessingSchedule processingSchedule)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriods", "parameters": "(Long scheduleId)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriods(Long scheduleId)", "full_signature": "public List<ProcessingPeriod> getAllPeriods(Long scheduleId)", "class_method_signature": "ProcessingScheduleService.getAllPeriods(Long scheduleId)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Long id)", "modifiers": "public", "return": "ProcessingSchedule", "signature": "ProcessingSchedule get(Long id)", "full_signature": "public ProcessingSchedule get(Long id)", "class_method_signature": "ProcessingScheduleService.get(Long id)", "testcase": false, "constructor": false}, {"identifier": "savePeriod", "parameters": "(ProcessingPeriod processingPeriod)", "modifiers": "public", "return": "void", "signature": "void savePeriod(ProcessingPeriod processingPeriod)", "full_signature": "public void savePeriod(ProcessingPeriod processingPeriod)", "class_method_signature": "ProcessingScheduleService.savePeriod(ProcessingPeriod processingPeriod)", "testcase": false, "constructor": false}, {"identifier": "deletePeriod", "parameters": "(Long processingPeriodId)", "modifiers": "public", "return": "void", "signature": "void deletePeriod(Long processingPeriodId)", "full_signature": "public void deletePeriod(Long processingPeriodId)", "class_method_signature": "ProcessingScheduleService.deletePeriod(Long processingPeriodId)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsAfterDateAndPeriod", "parameters": "(Long facilityId, Long programId, Date programStartDate, Long startingPeriodId)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsAfterDateAndPeriod(Long facilityId, Long programId, Date programStartDate, Long startingPeriodId)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsAfterDateAndPeriod(Long facilityId, Long programId, Date programStartDate, Long startingPeriodId)", "class_method_signature": "ProcessingScheduleService.getAllPeriodsAfterDateAndPeriod(Long facilityId, Long programId, Date programStartDate, Long startingPeriodId)", "testcase": false, "constructor": false}, {"identifier": "getOpenPeriods", "parameters": "(Long facilityId, Long programId, Long startingPeriodId)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getOpenPeriods(Long facilityId, Long programId, Long startingPeriodId)", "full_signature": "public List<ProcessingPeriod> getOpenPeriods(Long facilityId, Long programId, Long startingPeriodId)", "class_method_signature": "ProcessingScheduleService.getOpenPeriods(Long facilityId, Long programId, Long startingPeriodId)", "testcase": false, "constructor": false}, {"identifier": "getSchedule", "parameters": "(Facility facility, Program program)", "modifiers": "private", "return": "RequisitionGroupProgramSchedule", "signature": "RequisitionGroupProgramSchedule getSchedule(Facility facility, Program program)", "full_signature": "private RequisitionGroupProgramSchedule getSchedule(Facility facility, Program program)", "class_method_signature": "ProcessingScheduleService.getSchedule(Facility facility, Program program)", "testcase": false, "constructor": false}, {"identifier": "getPeriodById", "parameters": "(Long periodId)", "modifiers": "public", "return": "ProcessingPeriod", "signature": "ProcessingPeriod getPeriodById(Long periodId)", "full_signature": "public ProcessingPeriod getPeriodById(Long periodId)", "class_method_signature": "ProcessingScheduleService.getPeriodById(Long periodId)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsForDateRange", "parameters": "(Facility facility, Program program, Date startDate, Date endDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsForDateRange(Facility facility, Program program, Date startDate, Date endDate)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsForDateRange(Facility facility, Program program, Date startDate, Date endDate)", "class_method_signature": "ProcessingScheduleService.getAllPeriodsForDateRange(Facility facility, Program program, Date startDate, Date endDate)", "testcase": false, "constructor": false}, {"identifier": "getUsedPeriodsForDateRange", "parameters": "(Facility facility, Program program, Date startDate, Date endDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getUsedPeriodsForDateRange(Facility facility, Program program, Date startDate, Date endDate)", "full_signature": "public List<ProcessingPeriod> getUsedPeriodsForDateRange(Facility facility, Program program, Date startDate, Date endDate)", "class_method_signature": "ProcessingScheduleService.getUsedPeriodsForDateRange(Facility facility, Program program, Date startDate, Date endDate)", "testcase": false, "constructor": false}, {"identifier": "getByCode", "parameters": "(String code)", "modifiers": "public", "return": "ProcessingSchedule", "signature": "ProcessingSchedule getByCode(String code)", "full_signature": "public ProcessingSchedule getByCode(String code)", "class_method_signature": "ProcessingScheduleService.getByCode(String code)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsBefore", "parameters": "(Long scheduleId, Date beforeDate)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsBefore(Long scheduleId, Date beforeDate)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsBefore(Long scheduleId, Date beforeDate)", "class_method_signature": "ProcessingScheduleService.getAllPeriodsBefore(Long scheduleId, Date beforeDate)", "testcase": false, "constructor": false}, {"identifier": "getPeriodForDate", "parameters": "(Facility facility, Program program, Date date)", "modifiers": "public", "return": "ProcessingPeriod", "signature": "ProcessingPeriod getPeriodForDate(Facility facility, Program program, Date date)", "full_signature": "public ProcessingPeriod getPeriodForDate(Facility facility, Program program, Date date)", "class_method_signature": "ProcessingScheduleService.getPeriodForDate(Facility facility, Program program, Date date)", "testcase": false, "constructor": false}, {"identifier": "getCurrentPeriod", "parameters": "(Long facilityId, Long programId, Date programStartDate)", "modifiers": "public", "return": "ProcessingPeriod", "signature": "ProcessingPeriod getCurrentPeriod(Long facilityId, Long programId, Date programStartDate)", "full_signature": "public ProcessingPeriod getCurrentPeriod(Long facilityId, Long programId, Date programStartDate)", "class_method_signature": "ProcessingScheduleService.getCurrentPeriod(Long facilityId, Long programId, Date programStartDate)", "testcase": false, "constructor": false}, {"identifier": "getNPreviousPeriodsInDescOrder", "parameters": "(ProcessingPeriod currentPeriod, Integer n)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getNPreviousPeriodsInDescOrder(ProcessingPeriod currentPeriod, Integer n)", "full_signature": "public List<ProcessingPeriod> getNPreviousPeriodsInDescOrder(ProcessingPeriod currentPeriod, Integer n)", "class_method_signature": "ProcessingScheduleService.getNPreviousPeriodsInDescOrder(ProcessingPeriod currentPeriod, Integer n)", "testcase": false, "constructor": false}, {"identifier": "findM", "parameters": "(ProcessingPeriod period)", "modifiers": "public", "return": "Integer", "signature": "Integer findM(ProcessingPeriod period)", "full_signature": "public Integer findM(ProcessingPeriod period)", "class_method_signature": "ProcessingScheduleService.findM(ProcessingPeriod period)", "testcase": false, "constructor": false}, {"identifier": "getAllPeriodsForScheduleAndYear", "parameters": "(Long scheduleId, Long year)", "modifiers": "public", "return": "List<ProcessingPeriod>", "signature": "List<ProcessingPeriod> getAllPeriodsForScheduleAndYear(Long scheduleId, Long year)", "full_signature": "public List<ProcessingPeriod> getAllPeriodsForScheduleAndYear(Long scheduleId, Long year)", "class_method_signature": "ProcessingScheduleService.getAllPeriodsForScheduleAndYear(Long scheduleId, Long year)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/service/ProcessingScheduleService.java"}, "focal_method": {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<ProcessingSchedule>", "body": "public List<ProcessingSchedule> getAll() {\n    return repository.getAll();\n  }", "signature": "List<ProcessingSchedule> getAll()", "full_signature": "public List<ProcessingSchedule> getAll()", "class_method_signature": "ProcessingScheduleService.getAll()", "testcase": false, "constructor": false, "invocations": ["getAll"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}