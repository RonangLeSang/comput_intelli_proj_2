{"test_class": {"identifier": "RequisitionCellFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/openlmis-web/src/test/java/org/openlmis/web/view/pdf/requisition/RequisitionCellFactoryTest.java"}, "test_case": {"identifier": "headingCellShouldHaveRequiredFontSizeAndShouldBeLeftAligned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void headingCellShouldHaveRequiredFontSizeAndShouldBeLeftAligned() throws Exception {\n    PdfPCell cell = headingCell(\"value\");\n    assertThat(cell.getPhrase().getFont(), is(H2_FONT));\n    assertThat(cell.getHorizontalAlignment(), is(ALIGN_LEFT));\n    assertThat(cell.getPhrase().getContent(), is(\"value\"));\n  }", "signature": "void headingCellShouldHaveRequiredFontSizeAndShouldBeLeftAligned()", "full_signature": "@Test public void headingCellShouldHaveRequiredFontSizeAndShouldBeLeftAligned()", "class_method_signature": "RequisitionCellFactoryTest.headingCellShouldHaveRequiredFontSizeAndShouldBeLeftAligned()", "testcase": true, "constructor": false, "invocations": ["headingCell", "assertThat", "getFont", "getPhrase", "is", "assertThat", "getHorizontalAlignment", "is", "assertThat", "getContent", "getPhrase", "is"]}, "focal_class": {"identifier": "RequisitionCellFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final float CELL_PADDING = 5f;", "modifier": "public static final", "type": "float", "declarator": "CELL_PADDING = 5f", "var_name": "CELL_PADDING"}, {"original_string": "public static final BaseColor HEADER_BACKGROUND = new BaseColor(210, 210, 210);", "modifier": "public static final", "type": "BaseColor", "declarator": "HEADER_BACKGROUND = new BaseColor(210, 210, 210)", "var_name": "HEADER_BACKGROUND"}, {"original_string": "public static final Font H2_FONT = FontFactory.getFont(FontFactory.TIMES, 20f, Font.BOLD, BaseColor.BLACK);", "modifier": "public static final", "type": "Font", "declarator": "H2_FONT = FontFactory.getFont(FontFactory.TIMES, 20f, Font.BOLD, BaseColor.BLACK)", "var_name": "H2_FONT"}, {"original_string": "public static final int WIDTH_PERCENTAGE = 100;", "modifier": "public static final", "type": "int", "declarator": "WIDTH_PERCENTAGE = 100", "var_name": "WIDTH_PERCENTAGE"}, {"original_string": "private static final String OK_IMAGE = \"images/ok-icon.png\";", "modifier": "private static final", "type": "String", "declarator": "OK_IMAGE = \"images/ok-icon.png\"", "var_name": "OK_IMAGE"}, {"original_string": "public static final Logger logger = Logger.getLogger(RequisitionCellFactory.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = Logger.getLogger(RequisitionCellFactory.class)", "var_name": "logger"}], "methods": [{"identifier": "numberCell", "parameters": "(String value)", "modifiers": "public static", "return": "PdfPCell", "signature": "PdfPCell numberCell(String value)", "full_signature": "public static PdfPCell numberCell(String value)", "class_method_signature": "RequisitionCellFactory.numberCell(String value)", "testcase": false, "constructor": false}, {"identifier": "getPdfPCell", "parameters": "(String value)", "modifiers": "private static", "return": "PdfPCell", "signature": "PdfPCell getPdfPCell(String value)", "full_signature": "private static PdfPCell getPdfPCell(String value)", "class_method_signature": "RequisitionCellFactory.getPdfPCell(String value)", "testcase": false, "constructor": false}, {"identifier": "textCell", "parameters": "(String value)", "modifiers": "public static", "return": "PdfPCell", "signature": "PdfPCell textCell(String value)", "full_signature": "public static PdfPCell textCell(String value)", "class_method_signature": "RequisitionCellFactory.textCell(String value)", "testcase": false, "constructor": false}, {"identifier": "headingCell", "parameters": "(String value)", "modifiers": "public static", "return": "PdfPCell", "signature": "PdfPCell headingCell(String value)", "full_signature": "public static PdfPCell headingCell(String value)", "class_method_signature": "RequisitionCellFactory.headingCell(String value)", "testcase": false, "constructor": false}, {"identifier": "getCells", "parameters": "(List<? extends Column> visibleColumns,\n                                        LineItem lineItem,\n                                        String currency)", "modifiers": "public static", "return": "List<PdfPCell>", "signature": "List<PdfPCell> getCells(List<? extends Column> visibleColumns,\n                                        LineItem lineItem,\n                                        String currency)", "full_signature": "public static List<PdfPCell> getCells(List<? extends Column> visibleColumns,\n                                        LineItem lineItem,\n                                        String currency)", "class_method_signature": "RequisitionCellFactory.getCells(List<? extends Column> visibleColumns,\n                                        LineItem lineItem,\n                                        String currency)", "testcase": false, "constructor": false}, {"identifier": "createCell", "parameters": "(List<PdfPCell> result,\n                                 ColumnType columnType,\n                                 String columnValue,\n                                 String currency)", "modifiers": "private static", "return": "void", "signature": "void createCell(List<PdfPCell> result,\n                                 ColumnType columnType,\n                                 String columnValue,\n                                 String currency)", "full_signature": "private static void createCell(List<PdfPCell> result,\n                                 ColumnType columnType,\n                                 String columnValue,\n                                 String currency)", "class_method_signature": "RequisitionCellFactory.createCell(List<PdfPCell> result,\n                                 ColumnType columnType,\n                                 String columnValue,\n                                 String currency)", "testcase": false, "constructor": false}, {"identifier": "imageCell", "parameters": "()", "modifiers": "public static", "return": "PdfPCell", "signature": "PdfPCell imageCell()", "full_signature": "public static PdfPCell imageCell()", "class_method_signature": "RequisitionCellFactory.imageCell()", "testcase": false, "constructor": false}, {"identifier": "categoryRow", "parameters": "(Integer visibleColumnsSize, LineItem lineItem)", "modifiers": "public static", "return": "PdfPCell", "signature": "PdfPCell categoryRow(Integer visibleColumnsSize, LineItem lineItem)", "full_signature": "public static PdfPCell categoryRow(Integer visibleColumnsSize, LineItem lineItem)", "class_method_signature": "RequisitionCellFactory.categoryRow(Integer visibleColumnsSize, LineItem lineItem)", "testcase": false, "constructor": false}], "file": "modules/openlmis-web/src/main/java/org/openlmis/web/view/pdf/requisition/RequisitionCellFactory.java"}, "focal_method": {"identifier": "headingCell", "parameters": "(String value)", "modifiers": "public static", "return": "PdfPCell", "body": "public static PdfPCell headingCell(String value) {\n    Chunk chunk = new Chunk(value, H2_FONT);\n    PdfPCell cell = new PdfPCell(new Phrase(chunk));\n    cell.setPadding(CELL_PADDING);\n    cell.setHorizontalAlignment(Element.ALIGN_LEFT);\n    return cell;\n  }", "signature": "PdfPCell headingCell(String value)", "full_signature": "public static PdfPCell headingCell(String value)", "class_method_signature": "RequisitionCellFactory.headingCell(String value)", "testcase": false, "constructor": false, "invocations": ["setPadding", "setHorizontalAlignment"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}