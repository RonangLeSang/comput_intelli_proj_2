{"test_class": {"identifier": "GeographicZoneRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GeographicZoneRepository repository;", "modifier": "", "type": "GeographicZoneRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Rule\n  public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "@Mock\n  private GeographicZoneMapper mapper;", "modifier": "@Mock\n  private", "type": "GeographicZoneMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Mock\n  private GeographicLevelRepository geographicLevelRepository;", "modifier": "@Mock\n  private", "type": "GeographicLevelRepository", "declarator": "geographicLevelRepository", "var_name": "geographicLevelRepository"}, {"original_string": "private GeographicZone geographicZone;", "modifier": "private", "type": "GeographicZone", "declarator": "geographicZone", "var_name": "geographicZone"}], "file": "modules/core/src/test/java/org/openlmis/core/repository/GeographicZoneRepositoryTest.java"}, "test_case": {"identifier": "shouldThrowErrorIfDuplicateZoneInsert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldThrowErrorIfDuplicateZoneInsert() throws Exception {\n    expectedEx.expect(dataExceptionMatcher(\"error.duplicate.geographic.zone.code\"));\n\n    doThrow(new DuplicateKeyException(\"duplicate key\")).when(mapper).insert(geographicZone);\n\n    repository.save(geographicZone);\n  }", "signature": "void shouldThrowErrorIfDuplicateZoneInsert()", "full_signature": "@Test public void shouldThrowErrorIfDuplicateZoneInsert()", "class_method_signature": "GeographicZoneRepositoryTest.shouldThrowErrorIfDuplicateZoneInsert()", "testcase": true, "constructor": false, "invocations": ["expect", "dataExceptionMatcher", "insert", "when", "doThrow", "save"]}, "focal_class": {"identifier": "GeographicZoneRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GeographicZoneMapper mapper;", "modifier": "private", "type": "GeographicZoneMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private GeographicLevelRepository geographicLevelRepository;", "modifier": "private", "type": "GeographicLevelRepository", "declarator": "geographicLevelRepository", "var_name": "geographicLevelRepository"}], "methods": [{"identifier": "GeographicZoneRepository", "parameters": "(GeographicZoneMapper mapper, GeographicLevelRepository geographicLevelRepository)", "modifiers": "@Autowired public", "return": "", "signature": " GeographicZoneRepository(GeographicZoneMapper mapper, GeographicLevelRepository geographicLevelRepository)", "full_signature": "@Autowired public  GeographicZoneRepository(GeographicZoneMapper mapper, GeographicLevelRepository geographicLevelRepository)", "class_method_signature": "GeographicZoneRepository.GeographicZoneRepository(GeographicZoneMapper mapper, GeographicLevelRepository geographicLevelRepository)", "testcase": false, "constructor": true}, {"identifier": "getByCode", "parameters": "(String code)", "modifiers": "public", "return": "GeographicZone", "signature": "GeographicZone getByCode(String code)", "full_signature": "public GeographicZone getByCode(String code)", "class_method_signature": "GeographicZoneRepository.getByCode(String code)", "testcase": false, "constructor": false}, {"identifier": "getLowestGeographicLevel", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getLowestGeographicLevel()", "full_signature": "public Integer getLowestGeographicLevel()", "class_method_signature": "GeographicZoneRepository.getLowestGeographicLevel()", "testcase": false, "constructor": false}, {"identifier": "getAllGeographicZones", "parameters": "()", "modifiers": "public", "return": "List<GeographicZone>", "signature": "List<GeographicZone> getAllGeographicZones()", "full_signature": "public List<GeographicZone> getAllGeographicZones()", "class_method_signature": "GeographicZoneRepository.getAllGeographicZones()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(GeographicZone zone)", "modifiers": "public", "return": "void", "signature": "void save(GeographicZone zone)", "full_signature": "public void save(GeographicZone zone)", "class_method_signature": "GeographicZoneRepository.save(GeographicZone zone)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(Long id)", "modifiers": "public", "return": "GeographicZone", "signature": "GeographicZone getById(Long id)", "full_signature": "public GeographicZone getById(Long id)", "class_method_signature": "GeographicZoneRepository.getById(Long id)", "testcase": false, "constructor": false}, {"identifier": "searchByParentName", "parameters": "(String searchParam, Pagination pagination)", "modifiers": "public", "return": "List<GeographicZone>", "signature": "List<GeographicZone> searchByParentName(String searchParam, Pagination pagination)", "full_signature": "public List<GeographicZone> searchByParentName(String searchParam, Pagination pagination)", "class_method_signature": "GeographicZoneRepository.searchByParentName(String searchParam, Pagination pagination)", "testcase": false, "constructor": false}, {"identifier": "searchByName", "parameters": "(String searchParam, Pagination pagination)", "modifiers": "public", "return": "List<GeographicZone>", "signature": "List<GeographicZone> searchByName(String searchParam, Pagination pagination)", "full_signature": "public List<GeographicZone> searchByName(String searchParam, Pagination pagination)", "class_method_signature": "GeographicZoneRepository.searchByName(String searchParam, Pagination pagination)", "testcase": false, "constructor": false}, {"identifier": "getAllGeographicLevels", "parameters": "()", "modifiers": "public", "return": "List<GeographicLevel>", "signature": "List<GeographicLevel> getAllGeographicLevels()", "full_signature": "public List<GeographicLevel> getAllGeographicLevels()", "class_method_signature": "GeographicZoneRepository.getAllGeographicLevels()", "testcase": false, "constructor": false}, {"identifier": "getAllGeographicZonesAbove", "parameters": "(GeographicLevel geographicLevel)", "modifiers": "public", "return": "List<GeographicZone>", "signature": "List<GeographicZone> getAllGeographicZonesAbove(GeographicLevel geographicLevel)", "full_signature": "public List<GeographicZone> getAllGeographicZonesAbove(GeographicLevel geographicLevel)", "class_method_signature": "GeographicZoneRepository.getAllGeographicZonesAbove(GeographicLevel geographicLevel)", "testcase": false, "constructor": false}, {"identifier": "getTotalParentSearchResultCount", "parameters": "(String param)", "modifiers": "public", "return": "Integer", "signature": "Integer getTotalParentSearchResultCount(String param)", "full_signature": "public Integer getTotalParentSearchResultCount(String param)", "class_method_signature": "GeographicZoneRepository.getTotalParentSearchResultCount(String param)", "testcase": false, "constructor": false}, {"identifier": "getTotalSearchResultCount", "parameters": "(String param)", "modifiers": "public", "return": "Integer", "signature": "Integer getTotalSearchResultCount(String param)", "full_signature": "public Integer getTotalSearchResultCount(String param)", "class_method_signature": "GeographicZoneRepository.getTotalSearchResultCount(String param)", "testcase": false, "constructor": false}, {"identifier": "getGeographicZonesByCodeOrName", "parameters": "(String searchParam)", "modifiers": "public", "return": "List<GeographicZone>", "signature": "List<GeographicZone> getGeographicZonesByCodeOrName(String searchParam)", "full_signature": "public List<GeographicZone> getGeographicZonesByCodeOrName(String searchParam)", "class_method_signature": "GeographicZoneRepository.getGeographicZonesByCodeOrName(String searchParam)", "testcase": false, "constructor": false}, {"identifier": "getGeographicZonesCountBy", "parameters": "(String searchParam)", "modifiers": "public", "return": "Integer", "signature": "Integer getGeographicZonesCountBy(String searchParam)", "full_signature": "public Integer getGeographicZonesCountBy(String searchParam)", "class_method_signature": "GeographicZoneRepository.getGeographicZonesCountBy(String searchParam)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/openlmis/core/repository/GeographicZoneRepository.java"}, "focal_method": {"identifier": "save", "parameters": "(GeographicZone zone)", "modifiers": "public", "return": "void", "body": "public void save(GeographicZone zone) {\n    try {\n      if (zone.getId() == null) {\n        mapper.insert(zone);\n        return;\n      }\n      mapper.update(zone);\n    } catch (DuplicateKeyException e) {\n      throw new DataException(\"error.duplicate.geographic.zone.code\");\n    } catch (DataIntegrityViolationException e) {\n      throw new DataException(\"error.incorrect.length\");\n    }\n  }", "signature": "void save(GeographicZone zone)", "full_signature": "public void save(GeographicZone zone)", "class_method_signature": "GeographicZoneRepository.save(GeographicZone zone)", "testcase": false, "constructor": false, "invocations": ["getId", "insert", "update"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}