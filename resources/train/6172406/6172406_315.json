{"test_class": {"identifier": "OrderServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n  private OrderConfigurationRepository orderConfigurationRepository;", "modifier": "@Mock\n  private", "type": "OrderConfigurationRepository", "declarator": "orderConfigurationRepository", "var_name": "orderConfigurationRepository"}, {"original_string": "@Mock\n  private OrderRepository orderRepository;", "modifier": "@Mock\n  private", "type": "OrderRepository", "declarator": "orderRepository", "var_name": "orderRepository"}, {"original_string": "@Mock\n  private RequisitionService requisitionService;", "modifier": "@Mock\n  private", "type": "RequisitionService", "declarator": "requisitionService", "var_name": "requisitionService"}, {"original_string": "@Mock\n  private OrderEventService orderEventService;", "modifier": "@Mock\n  private", "type": "OrderEventService", "declarator": "orderEventService", "var_name": "orderEventService"}, {"original_string": "@Mock\n  private SupplyLineService supplyLineService;", "modifier": "@Mock\n  private", "type": "SupplyLineService", "declarator": "supplyLineService", "var_name": "supplyLineService"}, {"original_string": "@Mock\n  private RoleAssignmentService roleAssignmentService;", "modifier": "@Mock\n  private", "type": "RoleAssignmentService", "declarator": "roleAssignmentService", "var_name": "roleAssignmentService"}, {"original_string": "@Mock\n  private FulfillmentPermissionService fulfillmentPermissionService;", "modifier": "@Mock\n  private", "type": "FulfillmentPermissionService", "declarator": "fulfillmentPermissionService", "var_name": "fulfillmentPermissionService"}, {"original_string": "@Mock\n  private UserService userService;", "modifier": "@Mock\n  private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Mock\n  private ProgramService programService;", "modifier": "@Mock\n  private", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Mock\n  private StatusChangeEventService statusChangeEventService;", "modifier": "@Mock\n  private", "type": "StatusChangeEventService", "declarator": "statusChangeEventService", "var_name": "statusChangeEventService"}, {"original_string": "@InjectMocks\n  private OrderService orderService;", "modifier": "@InjectMocks\n  private", "type": "OrderService", "declarator": "orderService", "var_name": "orderService"}], "file": "modules/shipment/src/test/java/org/openlmis/order/service/OrderServiceTest.java"}, "test_case": {"identifier": "shouldSortOrdersBasedOnSupplyingFacilityNameProgramNameAndThenCreationDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldSortOrdersBasedOnSupplyingFacilityNameProgramNameAndThenCreationDate() throws Exception {\n    Rnr rnrForHIV = make(a(RequisitionBuilder.defaultRequisition, with(id, 2L), with(program, make(a(defaultProgram, with(ProgramBuilder.programName, \"HIV\"))))));\n    Rnr rnrForTB = make(a(RequisitionBuilder.defaultRequisition, with(id, 4L), with(program, make(a(defaultProgram, with(ProgramBuilder.programName, \"TB\"))))));\n    Rnr rnrForMalaria = make(a(RequisitionBuilder.defaultRequisition, with(id, 6L), with(program, make(a(defaultProgram, with(ProgramBuilder.programName, \"MALARIA\"))))));\n\n    Order order1 = new Order(new Rnr(2L));\n    order1.setSupplyLine(make(a(defaultSupplyLine, with(SupplyLineBuilder.facility, make(a(FacilityBuilder.defaultFacility, with(name, \"F10\")))))));\n\n    Order order2 = new Order(new Rnr(4L));\n    order2.setSupplyLine(make(a(defaultSupplyLine, with(SupplyLineBuilder.facility, make(a(FacilityBuilder.defaultFacility, with(name, \"F11\")))))));\n\n    Order order3 = new Order(new Rnr(6L));\n    order3.setSupplyLine(make(a(defaultSupplyLine, with(SupplyLineBuilder.facility, make(a(FacilityBuilder.defaultFacility, with(name, \"F10\")))))));\n\n    List<Order> expectedOrders = asList(order1, order2, order3);\n    when(roleAssignmentService.getFulfilmentRolesWithRight(3L, MANAGE_POD)).thenReturn(asList(new FulfillmentRoleAssignment(3L, 4l, new ArrayList<Long>())));\n    when(requisitionService.getFullRequisitionById(2L)).thenReturn(rnrForHIV);\n    when(requisitionService.getFullRequisitionById(4L)).thenReturn(rnrForTB);\n    when(requisitionService.getFullRequisitionById(6L)).thenReturn(rnrForMalaria);\n    when(orderRepository.searchByWarehousesAndStatuses(asList(4l), asList(RELEASED, PACKED, TRANSFER_FAILED, READY_TO_PACK),1L,0L)).thenReturn(expectedOrders);\n\n    List<Order> returnedOrders = orderService.searchByStatusAndRight(3l, MANAGE_POD, asList(RELEASED, PACKED, TRANSFER_FAILED, READY_TO_PACK),1L,0L);\n\n    assertThat(returnedOrders.get(0).getId(), is(2L));\n    assertThat(returnedOrders.get(1).getId(), is(6L));\n    assertThat(returnedOrders.get(2).getId(), is(4L));\n  }", "signature": "void shouldSortOrdersBasedOnSupplyingFacilityNameProgramNameAndThenCreationDate()", "full_signature": "@Test public void shouldSortOrdersBasedOnSupplyingFacilityNameProgramNameAndThenCreationDate()", "class_method_signature": "OrderServiceTest.shouldSortOrdersBasedOnSupplyingFacilityNameProgramNameAndThenCreationDate()", "testcase": true, "constructor": false, "invocations": ["make", "a", "with", "with", "make", "a", "with", "make", "a", "with", "with", "make", "a", "with", "make", "a", "with", "with", "make", "a", "with", "setSupplyLine", "make", "a", "with", "make", "a", "with", "setSupplyLine", "make", "a", "with", "make", "a", "with", "setSupplyLine", "make", "a", "with", "make", "a", "with", "asList", "thenReturn", "when", "getFulfilmentRolesWithRight", "asList", "thenReturn", "when", "getFullRequisitionById", "thenReturn", "when", "getFullRequisitionById", "thenReturn", "when", "getFullRequisitionById", "thenReturn", "when", "searchByWarehousesAndStatuses", "asList", "asList", "searchByStatusAndRight", "asList", "assertThat", "getId", "get", "is", "assertThat", "getId", "get", "is", "assertThat", "getId", "get", "is"]}, "focal_class": {"identifier": "OrderService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private OrderConfigurationRepository orderConfigurationRepository;", "modifier": "@Autowired\n  private", "type": "OrderConfigurationRepository", "declarator": "orderConfigurationRepository", "var_name": "orderConfigurationRepository"}, {"original_string": "@Autowired\n  private OrderRepository orderRepository;", "modifier": "@Autowired\n  private", "type": "OrderRepository", "declarator": "orderRepository", "var_name": "orderRepository"}, {"original_string": "@Autowired\n  private RequisitionService requisitionService;", "modifier": "@Autowired\n  private", "type": "RequisitionService", "declarator": "requisitionService", "var_name": "requisitionService"}, {"original_string": "@Autowired\n  private SupplyLineService supplyLineService;", "modifier": "@Autowired\n  private", "type": "SupplyLineService", "declarator": "supplyLineService", "var_name": "supplyLineService"}, {"original_string": "@Autowired\n  private OrderEventService orderEventService;", "modifier": "@Autowired\n  private", "type": "OrderEventService", "declarator": "orderEventService", "var_name": "orderEventService"}, {"original_string": "@Autowired\n  RoleAssignmentService roleAssignmentService;", "modifier": "@Autowired", "type": "RoleAssignmentService", "declarator": "roleAssignmentService", "var_name": "roleAssignmentService"}, {"original_string": "@Autowired\n  FulfillmentPermissionService fulfillmentPermissionService;", "modifier": "@Autowired", "type": "FulfillmentPermissionService", "declarator": "fulfillmentPermissionService", "var_name": "fulfillmentPermissionService"}, {"original_string": "@Autowired\n  private ProgramService programService;", "modifier": "@Autowired\n  private", "type": "ProgramService", "declarator": "programService", "var_name": "programService"}, {"original_string": "@Autowired\n  private StatusChangeEventService statusChangeEventService;", "modifier": "@Autowired\n  private", "type": "StatusChangeEventService", "declarator": "statusChangeEventService", "var_name": "statusChangeEventService"}, {"original_string": "@Autowired\n  private UserService userService;", "modifier": "@Autowired\n  private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "public static String SUPPLY_LINE_MISSING_COMMENT = \"order.ftpComment.supplyline.missing\";", "modifier": "public static", "type": "String", "declarator": "SUPPLY_LINE_MISSING_COMMENT = \"order.ftpComment.supplyline.missing\"", "var_name": "SUPPLY_LINE_MISSING_COMMENT"}, {"original_string": "private Integer pageSize;", "modifier": "private", "type": "Integer", "declarator": "pageSize", "var_name": "pageSize"}], "methods": [{"identifier": "setPageSize", "parameters": "(@Value(\"${order.page.size}\") String pageSize)", "modifiers": "@Autowired public", "return": "void", "signature": "void setPageSize(@Value(\"${order.page.size}\") String pageSize)", "full_signature": "@Autowired public void setPageSize(@Value(\"${order.page.size}\") String pageSize)", "class_method_signature": "OrderService.setPageSize(@Value(\"${order.page.size}\") String pageSize)", "testcase": false, "constructor": false}, {"identifier": "convertToOrder", "parameters": "(List<Rnr> rnrList, Long userId)", "modifiers": "@Transactional public", "return": "void", "signature": "void convertToOrder(List<Rnr> rnrList, Long userId)", "full_signature": "@Transactional public void convertToOrder(List<Rnr> rnrList, Long userId)", "class_method_signature": "OrderService.convertToOrder(List<Rnr> rnrList, Long userId)", "testcase": false, "constructor": false}, {"identifier": "sendOrderStatusChangeMail", "parameters": "(Order order)", "modifiers": "private", "return": "void", "signature": "void sendOrderStatusChangeMail(Order order)", "full_signature": "private void sendOrderStatusChangeMail(Order order)", "class_method_signature": "OrderService.sendOrderStatusChangeMail(Order order)", "testcase": false, "constructor": false}, {"identifier": "getOrdersForPage", "parameters": "(int page, Long userId, String rightName)", "modifiers": "public", "return": "List<Order>", "signature": "List<Order> getOrdersForPage(int page, Long userId, String rightName)", "full_signature": "public List<Order> getOrdersForPage(int page, Long userId, String rightName)", "class_method_signature": "OrderService.getOrdersForPage(int page, Long userId, String rightName)", "testcase": false, "constructor": false}, {"identifier": "getOrdersForPage", "parameters": "(int page, Long userId, String right, Long supplyDepot, Long program, Long period)", "modifiers": "public", "return": "List<Order>", "signature": "List<Order> getOrdersForPage(int page, Long userId, String right, Long supplyDepot, Long program, Long period)", "full_signature": "public List<Order> getOrdersForPage(int page, Long userId, String right, Long supplyDepot, Long program, Long period)", "class_method_signature": "OrderService.getOrdersForPage(int page, Long userId, String right, Long supplyDepot, Long program, Long period)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "(Long id)", "modifiers": "public", "return": "Order", "signature": "Order getOrder(Long id)", "full_signature": "public Order getOrder(Long id)", "class_method_signature": "OrderService.getOrder(Long id)", "testcase": false, "constructor": false}, {"identifier": "removeUnorderedProducts", "parameters": "(Rnr requisition)", "modifiers": "private", "return": "void", "signature": "void removeUnorderedProducts(Rnr requisition)", "full_signature": "private void removeUnorderedProducts(Rnr requisition)", "class_method_signature": "OrderService.removeUnorderedProducts(Rnr requisition)", "testcase": false, "constructor": false}, {"identifier": "updateStatusAndShipmentIdForOrders", "parameters": "(Set<String> orderNumbers, ShipmentFileInfo shipmentFileInfo)", "modifiers": "public", "return": "void", "signature": "void updateStatusAndShipmentIdForOrders(Set<String> orderNumbers, ShipmentFileInfo shipmentFileInfo)", "full_signature": "public void updateStatusAndShipmentIdForOrders(Set<String> orderNumbers, ShipmentFileInfo shipmentFileInfo)", "class_method_signature": "OrderService.updateStatusAndShipmentIdForOrders(Set<String> orderNumbers, ShipmentFileInfo shipmentFileInfo)", "testcase": false, "constructor": false}, {"identifier": "getOrderFileTemplateDTO", "parameters": "()", "modifiers": "public", "return": "OrderFileTemplateDTO", "signature": "OrderFileTemplateDTO getOrderFileTemplateDTO()", "full_signature": "public OrderFileTemplateDTO getOrderFileTemplateDTO()", "class_method_signature": "OrderService.getOrderFileTemplateDTO()", "testcase": false, "constructor": false}, {"identifier": "saveOrderFileTemplate", "parameters": "(OrderFileTemplateDTO orderFileTemplateDTO, Long userId)", "modifiers": "@Transactional public", "return": "void", "signature": "void saveOrderFileTemplate(OrderFileTemplateDTO orderFileTemplateDTO, Long userId)", "full_signature": "@Transactional public void saveOrderFileTemplate(OrderFileTemplateDTO orderFileTemplateDTO, Long userId)", "class_method_signature": "OrderService.saveOrderFileTemplate(OrderFileTemplateDTO orderFileTemplateDTO, Long userId)", "testcase": false, "constructor": false}, {"identifier": "getOrderNumberConfiguration", "parameters": "()", "modifiers": "public", "return": "OrderNumberConfiguration", "signature": "OrderNumberConfiguration getOrderNumberConfiguration()", "full_signature": "public OrderNumberConfiguration getOrderNumberConfiguration()", "class_method_signature": "OrderService.getOrderNumberConfiguration()", "testcase": false, "constructor": false}, {"identifier": "updateOrderNumberConfiguration", "parameters": "(OrderNumberConfiguration orderNumberConfiguration)", "modifiers": "@Transactional public", "return": "void", "signature": "void updateOrderNumberConfiguration(OrderNumberConfiguration orderNumberConfiguration)", "full_signature": "@Transactional public void updateOrderNumberConfiguration(OrderNumberConfiguration orderNumberConfiguration)", "class_method_signature": "OrderService.updateOrderNumberConfiguration(OrderNumberConfiguration orderNumberConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getAllDateFormats", "parameters": "()", "modifiers": "public", "return": "Set<DateFormat>", "signature": "Set<DateFormat> getAllDateFormats()", "full_signature": "public Set<DateFormat> getAllDateFormats()", "class_method_signature": "OrderService.getAllDateFormats()", "testcase": false, "constructor": false}, {"identifier": "updateOrderStatus", "parameters": "(Order order)", "modifiers": "public", "return": "void", "signature": "void updateOrderStatus(Order order)", "full_signature": "public void updateOrderStatus(Order order)", "class_method_signature": "OrderService.updateOrderStatus(Order order)", "testcase": false, "constructor": false}, {"identifier": "isShippable", "parameters": "(String orderNumber)", "modifiers": "public", "return": "boolean", "signature": "boolean isShippable(String orderNumber)", "full_signature": "public boolean isShippable(String orderNumber)", "class_method_signature": "OrderService.isShippable(String orderNumber)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPages", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getNumberOfPages()", "full_signature": "public Integer getNumberOfPages()", "class_method_signature": "OrderService.getNumberOfPages()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPages", "parameters": "(Long supplyDepot, Long program, Long period)", "modifiers": "public", "return": "Integer", "signature": "Integer getNumberOfPages(Long supplyDepot, Long program, Long period)", "full_signature": "public Integer getNumberOfPages(Long supplyDepot, Long program, Long period)", "class_method_signature": "OrderService.getNumberOfPages(Long supplyDepot, Long program, Long period)", "testcase": false, "constructor": false}, {"identifier": "getPageSize", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getPageSize()", "full_signature": "public Integer getPageSize()", "class_method_signature": "OrderService.getPageSize()", "testcase": false, "constructor": false}, {"identifier": "searchByStatusAndRight", "parameters": "(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "modifiers": "public", "return": "List<Order>", "signature": "List<Order> searchByStatusAndRight(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "full_signature": "public List<Order> searchByStatusAndRight(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "class_method_signature": "OrderService.searchByStatusAndRight(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "testcase": false, "constructor": false}, {"identifier": "fillOrders", "parameters": "(List<Order> orders)", "modifiers": "private", "return": "List<Order>", "signature": "List<Order> fillOrders(List<Order> orders)", "full_signature": "private List<Order> fillOrders(List<Order> orders)", "class_method_signature": "OrderService.fillOrders(List<Order> orders)", "testcase": false, "constructor": false}, {"identifier": "getLineItemsForOrder", "parameters": "(List<RnrLineItem> rnrLineItems)", "modifiers": "private", "return": "List<RnrLineItem>", "signature": "List<RnrLineItem> getLineItemsForOrder(List<RnrLineItem> rnrLineItems)", "full_signature": "private List<RnrLineItem> getLineItemsForOrder(List<RnrLineItem> rnrLineItems)", "class_method_signature": "OrderService.getLineItemsForOrder(List<RnrLineItem> rnrLineItems)", "testcase": false, "constructor": false}, {"identifier": "hasStatus", "parameters": "(String orderNumber, OrderStatus... statuses)", "modifiers": "public", "return": "boolean", "signature": "boolean hasStatus(String orderNumber, OrderStatus... statuses)", "full_signature": "public boolean hasStatus(String orderNumber, OrderStatus... statuses)", "class_method_signature": "OrderService.hasStatus(String orderNumber, OrderStatus... statuses)", "testcase": false, "constructor": false}, {"identifier": "getByOrderNumber", "parameters": "(String orderNumber)", "modifiers": "public", "return": "Order", "signature": "Order getByOrderNumber(String orderNumber)", "full_signature": "public Order getByOrderNumber(String orderNumber)", "class_method_signature": "OrderService.getByOrderNumber(String orderNumber)", "testcase": false, "constructor": false}], "file": "modules/shipment/src/main/java/org/openlmis/order/service/OrderService.java"}, "focal_method": {"identifier": "searchByStatusAndRight", "parameters": "(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "modifiers": "public", "return": "List<Order>", "body": "public List<Order> searchByStatusAndRight(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId) {\n    List<FulfillmentRoleAssignment> fulfilmentRolesWithRight = roleAssignmentService.getFulfilmentRolesWithRight(userId, rightName);\n\n    List<Order> orders = orderRepository.searchByWarehousesAndStatuses((List<Long>) collect(fulfilmentRolesWithRight, new Transformer() {\n      @Override\n      public Object transform(Object o) {\n        return ((FulfillmentRoleAssignment) o).getFacilityId();\n      }\n    }), statuses, programId, facilityId);\n\n    orders = fillOrders(orders);\n    sort(orders);\n\n    return orders;\n  }", "signature": "List<Order> searchByStatusAndRight(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "full_signature": "public List<Order> searchByStatusAndRight(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "class_method_signature": "OrderService.searchByStatusAndRight(Long userId, String rightName, List<OrderStatus> statuses, Long programId, Long facilityId)", "testcase": false, "constructor": false, "invocations": ["getFulfilmentRolesWithRight", "searchByWarehousesAndStatuses", "collect", "getFacilityId", "fillOrders", "sort"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}