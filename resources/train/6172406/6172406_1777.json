{"test_class": {"identifier": "ReadingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "modules/distribution/src/test/java/org/openlmis/distribution/dto/ReadingTest.java"}, "test_case": {"identifier": "shouldParseStringToInteger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldParseStringToInteger() throws Exception {\n    Reading reading = new Reading(\"345\", false);\n\n    assertThat(reading.parsePositiveInt(), is(345));\n  }", "signature": "void shouldParseStringToInteger()", "full_signature": "@Test public void shouldParseStringToInteger()", "class_method_signature": "ReadingTest.shouldParseStringToInteger()", "testcase": true, "constructor": false, "invocations": ["assertThat", "parsePositiveInt", "is"]}, "focal_class": {"identifier": "Reading", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String value;", "modifier": "private", "type": "String", "declarator": "value", "var_name": "value"}, {"original_string": "private Boolean notRecorded;", "modifier": "private", "type": "Boolean", "declarator": "notRecorded", "var_name": "notRecorded"}], "methods": [{"identifier": "Reading", "parameters": "(String value, Boolean notRecorded)", "modifiers": "public", "return": "", "signature": " Reading(String value, Boolean notRecorded)", "full_signature": "public  Reading(String value, Boolean notRecorded)", "class_method_signature": "Reading.Reading(String value, Boolean notRecorded)", "testcase": false, "constructor": true}, {"identifier": "getEffectiveValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEffectiveValue()", "full_signature": "public String getEffectiveValue()", "class_method_signature": "Reading.getEffectiveValue()", "testcase": false, "constructor": false}, {"identifier": "parsePositiveInt", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer parsePositiveInt()", "full_signature": "public Integer parsePositiveInt()", "class_method_signature": "Reading.parsePositiveInt()", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer parseInt()", "full_signature": "public Integer parseInt()", "class_method_signature": "Reading.parseInt()", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "()", "modifiers": "public", "return": "Float", "signature": "Float parseFloat()", "full_signature": "public Float parseFloat()", "class_method_signature": "Reading.parseFloat()", "testcase": false, "constructor": false}], "file": "modules/distribution/src/main/java/org/openlmis/distribution/dto/Reading.java"}, "focal_method": {"identifier": "parsePositiveInt", "parameters": "()", "modifiers": "public", "return": "Integer", "body": "public Integer parsePositiveInt() {\n    String stringValue = getEffectiveValue();\n    if (stringValue == null) {\n      return null;\n    }\n\n    int intValue = Integer.parseInt(stringValue);\n    if (intValue < 0) {\n      throw new DataException(\"error.epi.use.line.item.invalid\");\n    }\n    return intValue;\n  }", "signature": "Integer parsePositiveInt()", "full_signature": "public Integer parsePositiveInt()", "class_method_signature": "Reading.parsePositiveInt()", "testcase": false, "constructor": false, "invocations": ["getEffectiveValue", "parseInt"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}