{"test_class": {"identifier": "GeographicZoneControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockHttpServletRequest request = new MockHttpServletRequest();", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "request = new MockHttpServletRequest()", "var_name": "request"}, {"original_string": "@Mock\n  private GeographicZoneService service;", "modifier": "@Mock\n  private", "type": "GeographicZoneService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n  private MessageService messageService;", "modifier": "@Mock\n  private", "type": "MessageService", "declarator": "messageService", "var_name": "messageService"}, {"original_string": "@InjectMocks\n  private GeographicZoneController controller;", "modifier": "@InjectMocks\n  private", "type": "GeographicZoneController", "declarator": "controller", "var_name": "controller"}], "file": "modules/openlmis-web/src/test/java/org/openlmis/web/controller/GeographicZoneControllerTest.java"}, "test_case": {"identifier": "shouldThrowExceptionIfInvalidGeoZoneBeingUpdated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldThrowExceptionIfInvalidGeoZoneBeingUpdated() throws Exception {\n    GeographicZone geographicZone = new GeographicZone();\n    doThrow(new DataException(\"error\")).when(service).save(geographicZone);\n\n    ResponseEntity<OpenLmisResponse> errorResponse = controller.update(geographicZone, 9L, request);\n\n    assertThat(errorResponse.getBody().getErrorMsg(), is(\"error\"));\n    assertThat(errorResponse.getStatusCode(), is(BAD_REQUEST));\n  }", "signature": "void shouldThrowExceptionIfInvalidGeoZoneBeingUpdated()", "full_signature": "@Test public void shouldThrowExceptionIfInvalidGeoZoneBeingUpdated()", "class_method_signature": "GeographicZoneControllerTest.shouldThrowExceptionIfInvalidGeoZoneBeingUpdated()", "testcase": true, "constructor": false, "invocations": ["save", "when", "doThrow", "update", "assertThat", "getErrorMsg", "getBody", "is", "assertThat", "getStatusCode", "is"]}, "focal_class": {"identifier": "GeographicZoneController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "public static final String GEO_ZONES = \"geoZones\";", "modifier": "public static final", "type": "String", "declarator": "GEO_ZONES = \"geoZones\"", "var_name": "GEO_ZONES"}, {"original_string": "@Autowired\n  private GeographicZoneService service;", "modifier": "@Autowired\n  private", "type": "GeographicZoneService", "declarator": "service", "var_name": "service"}], "methods": [{"identifier": "get", "parameters": "(@PathVariable Long id)", "modifiers": "@RequestMapping(value = \"/geographicZones/{id}\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_DISTRIBUTION, MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> get(@PathVariable Long id)", "full_signature": "@RequestMapping(value = \"/geographicZones/{id}\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_DISTRIBUTION, MANAGE_GEOGRAPHIC_ZONE')\") public ResponseEntity<OpenLmisResponse> get(@PathVariable Long id)", "class_method_signature": "GeographicZoneController.get(@PathVariable Long id)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(@RequestBody GeographicZone geographicZone,\n                                                 HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/geographicZones\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> insert(@RequestBody GeographicZone geographicZone,\n                                                 HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/geographicZones\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public ResponseEntity<OpenLmisResponse> insert(@RequestBody GeographicZone geographicZone,\n                                                 HttpServletRequest request)", "class_method_signature": "GeographicZoneController.insert(@RequestBody GeographicZone geographicZone,\n                                                 HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/geographicZones/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> update(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/geographicZones/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public ResponseEntity<OpenLmisResponse> update(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "class_method_signature": "GeographicZoneController.update(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"columnName\") String columnName,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page)", "modifiers": "@RequestMapping(value = \"/geographicZones\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> search(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"columnName\") String columnName,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page)", "full_signature": "@RequestMapping(value = \"/geographicZones\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public ResponseEntity<OpenLmisResponse> search(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"columnName\") String columnName,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page)", "class_method_signature": "GeographicZoneController.search(@RequestParam(value = \"searchParam\") String searchParam,\n                                                 @RequestParam(value = \"columnName\") String columnName,\n                                                 @RequestParam(value = \"page\", defaultValue = \"1\") Integer page)", "testcase": false, "constructor": false}, {"identifier": "getAllGeographicLevels", "parameters": "()", "modifiers": "@RequestMapping(value = \"/geographicLevels\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "List<GeographicLevel>", "signature": "List<GeographicLevel> getAllGeographicLevels()", "full_signature": "@RequestMapping(value = \"/geographicLevels\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public List<GeographicLevel> getAllGeographicLevels()", "class_method_signature": "GeographicZoneController.getAllGeographicLevels()", "testcase": false, "constructor": false}, {"identifier": "getAllGeographicZonesAbove", "parameters": "(@PathVariable(\"geoLevelCode\") String geographicLevelCode)", "modifiers": "@RequestMapping(value = \"/parentGeographicZones/{geoLevelCode}\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "List<GeographicZone>", "signature": "List<GeographicZone> getAllGeographicZonesAbove(@PathVariable(\"geoLevelCode\") String geographicLevelCode)", "full_signature": "@RequestMapping(value = \"/parentGeographicZones/{geoLevelCode}\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public List<GeographicZone> getAllGeographicZonesAbove(@PathVariable(\"geoLevelCode\") String geographicLevelCode)", "class_method_signature": "GeographicZoneController.getAllGeographicZonesAbove(@PathVariable(\"geoLevelCode\") String geographicLevelCode)", "testcase": false, "constructor": false}, {"identifier": "getGeographicZoneByCodeOrName", "parameters": "(@RequestParam(value = \"searchParam\") String searchParam,\n                                                                        @Value(\"${search.results.limit}\") String searchLimit)", "modifiers": "@RequestMapping(value = \"/filtered-geographicZones\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE, MANAGE_SUPERVISORY_NODE, MANAGE_REQUISITION_GROUP, MANAGE_SUPPLY_LINE, MANAGE_USER')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> getGeographicZoneByCodeOrName(@RequestParam(value = \"searchParam\") String searchParam,\n                                                                        @Value(\"${search.results.limit}\") String searchLimit)", "full_signature": "@RequestMapping(value = \"/filtered-geographicZones\", method = GET, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE, MANAGE_SUPERVISORY_NODE, MANAGE_REQUISITION_GROUP, MANAGE_SUPPLY_LINE, MANAGE_USER')\") public ResponseEntity<OpenLmisResponse> getGeographicZoneByCodeOrName(@RequestParam(value = \"searchParam\") String searchParam,\n                                                                        @Value(\"${search.results.limit}\") String searchLimit)", "class_method_signature": "GeographicZoneController.getGeographicZoneByCodeOrName(@RequestParam(value = \"searchParam\") String searchParam,\n                                                                        @Value(\"${search.results.limit}\") String searchLimit)", "testcase": false, "constructor": false}, {"identifier": "saveGeographicZoneGIS", "parameters": "(@RequestBody GeoZoneInfo geoZoneGeometries, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/geographic-zone/save-gis\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "signature": "ResponseEntity<OpenLmisResponse> saveGeographicZoneGIS(@RequestBody GeoZoneInfo geoZoneGeometries, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/geographic-zone/save-gis\", method = POST, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public ResponseEntity<OpenLmisResponse> saveGeographicZoneGIS(@RequestBody GeoZoneInfo geoZoneGeometries, HttpServletRequest request)", "class_method_signature": "GeographicZoneController.saveGeographicZoneGIS(@RequestBody GeoZoneInfo geoZoneGeometries, HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "modules/openlmis-web/src/main/java/org/openlmis/web/controller/GeographicZoneController.java"}, "focal_method": {"identifier": "update", "parameters": "(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/geographicZones/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public", "return": "ResponseEntity<OpenLmisResponse>", "body": "@RequestMapping(value = \"/geographicZones/{id}\", method = PUT, headers = ACCEPT_JSON)\n  @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\")\n  public ResponseEntity<OpenLmisResponse> update(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request) {\n    Long userId = loggedInUserId(request);\n    geographicZone.setId(id);\n    geographicZone.setModifiedBy(userId);\n    try {\n      service.save(geographicZone);\n    } catch (DataException e) {\n      return OpenLmisResponse.error(e, BAD_REQUEST);\n    }\n    ResponseEntity<OpenLmisResponse> success = success(\n      messageService.message(\"message.geo.zone.updated.success\", geographicZone.getName()));\n    success.getBody().addData(\"geoZone\", geographicZone);\n    return success;\n  }", "signature": "ResponseEntity<OpenLmisResponse> update(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/geographicZones/{id}\", method = PUT, headers = ACCEPT_JSON) @PreAuthorize(\"@permissionEvaluator.hasPermission(principal,'MANAGE_GEOGRAPHIC_ZONE')\") public ResponseEntity<OpenLmisResponse> update(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "class_method_signature": "GeographicZoneController.update(@RequestBody GeographicZone geographicZone,\n                                                 @PathVariable(\"id\") Long id,\n                                                 HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["loggedInUserId", "setId", "setModifiedBy", "save", "error", "success", "message", "getName", "addData", "getBody"]}, "repository": {"repo_id": 6172406, "url": "https://github.com/OpenLMIS/open-lmis", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 89, "size": 125128, "license": "licensed"}}