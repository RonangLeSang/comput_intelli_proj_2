{"test_class": {"identifier": "OSMemoryTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "libcore/luni/src/test/java/org/apache/harmony/luni/platform/OSMemoryTest.java"}, "test_case": {"identifier": "testSetIntArray", "parameters": "()", "modifiers": "@TestTargetNew( level = TestLevel.PARTIAL_COMPLETE, notes = \"\", method = \"setIntArray\", args = {} ) public", "return": "void", "body": "@TestTargetNew(\n        level = TestLevel.PARTIAL_COMPLETE,\n        notes = \"\",\n        method = \"setIntArray\",\n        args = {}\n    )\n    public void testSetIntArray() {\n        IMemorySystem memory = Platform.getMemorySystem();\n        \n        int[] values = { 3, 7, 31, 127, 8191, 131071, 524287, 2147483647 };\n        int[] swappedValues = new int[values.length];\n        for (int i = 0; i < values.length; ++i) {\n            swappedValues[i] = swapInt(values[i]);\n        }\n        \n        int scale = ICommonDataTypes.SIZEOF_JINT;\n        int ptr = memory.malloc(scale * values.length);\n        try {\n            // Regular copy. Memset first so we start from a known state.\n            memory.memset(ptr, (byte) 0, scale * values.length);\n            memory.setIntArray(ptr, values, 0, values.length, false);\n            assertIntsEqual(values, ptr);\n            \n            // Swapped copy.\n            memory.memset(ptr, (byte) 0, scale * values.length);\n            memory.setIntArray(ptr, values, 0, values.length, true);\n            assertIntsEqual(swappedValues, ptr);\n            \n            // Swapped copies of slices (to ensure we test non-zero offsets).\n            memory.memset(ptr, (byte) 0, scale * values.length);\n            for (int i = 0; i < values.length; ++i) {\n                memory.setIntArray(ptr + i * scale, values, i, 1, true);\n            }\n            assertIntsEqual(swappedValues, ptr);\n        } finally {\n            memory.free(ptr);\n        }\n    }", "signature": "void testSetIntArray()", "full_signature": "@TestTargetNew( level = TestLevel.PARTIAL_COMPLETE, notes = \"\", method = \"setIntArray\", args = {} ) public void testSetIntArray()", "class_method_signature": "OSMemoryTest.testSetIntArray()", "testcase": true, "constructor": false, "invocations": ["getMemorySystem", "swapInt", "malloc", "memset", "setIntArray", "assertIntsEqual", "memset", "setIntArray", "assertIntsEqual", "memset", "setIntArray", "assertIntsEqual", "free"]}, "focal_class": {"identifier": "OSMemory", "superclass": "", "interfaces": "implements IMemorySystem", "fields": [{"original_string": "public static final int POINTER_SIZE;", "modifier": "public static final", "type": "int", "declarator": "POINTER_SIZE", "var_name": "POINTER_SIZE"}, {"original_string": "public static final Endianness NATIVE_ORDER;", "modifier": "public static final", "type": "Endianness", "declarator": "NATIVE_ORDER", "var_name": "NATIVE_ORDER"}, {"original_string": "private static final OSMemory singleton = new OSMemory();", "modifier": "private static final", "type": "OSMemory", "declarator": "singleton = new OSMemory()", "var_name": "singleton"}], "methods": [{"identifier": "getOSMemory", "parameters": "()", "modifiers": "public static", "return": "OSMemory", "signature": "OSMemory getOSMemory()", "full_signature": "public static OSMemory getOSMemory()", "class_method_signature": "OSMemory.getOSMemory()", "testcase": false, "constructor": false}, {"identifier": "OSMemory", "parameters": "()", "modifiers": "private", "return": "", "signature": " OSMemory()", "full_signature": "private  OSMemory()", "class_method_signature": "OSMemory.OSMemory()", "testcase": false, "constructor": true}, {"identifier": "isLittleEndianImpl", "parameters": "()", "modifiers": "private static native", "return": "boolean", "signature": "boolean isLittleEndianImpl()", "full_signature": "private static native boolean isLittleEndianImpl()", "class_method_signature": "OSMemory.isLittleEndianImpl()", "testcase": false, "constructor": false}, {"identifier": "isLittleEndian", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLittleEndian()", "full_signature": "public boolean isLittleEndian()", "class_method_signature": "OSMemory.isLittleEndian()", "testcase": false, "constructor": false}, {"identifier": "getNativeOrder", "parameters": "()", "modifiers": "public", "return": "Endianness", "signature": "Endianness getNativeOrder()", "full_signature": "public Endianness getNativeOrder()", "class_method_signature": "OSMemory.getNativeOrder()", "testcase": false, "constructor": false}, {"identifier": "getPointerSizeImpl", "parameters": "()", "modifiers": "private static native", "return": "int", "signature": "int getPointerSizeImpl()", "full_signature": "private static native int getPointerSizeImpl()", "class_method_signature": "OSMemory.getPointerSizeImpl()", "testcase": false, "constructor": false}, {"identifier": "getPointerSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPointerSize()", "full_signature": "public int getPointerSize()", "class_method_signature": "OSMemory.getPointerSize()", "testcase": false, "constructor": false}, {"identifier": "malloc", "parameters": "(int length)", "modifiers": "public native", "return": "int", "signature": "int malloc(int length)", "full_signature": "public native int malloc(int length)", "class_method_signature": "OSMemory.malloc(int length)", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "(int address)", "modifiers": "public native", "return": "void", "signature": "void free(int address)", "full_signature": "public native void free(int address)", "class_method_signature": "OSMemory.free(int address)", "testcase": false, "constructor": false}, {"identifier": "memset", "parameters": "(int address, byte value, long length)", "modifiers": "public native", "return": "void", "signature": "void memset(int address, byte value, long length)", "full_signature": "public native void memset(int address, byte value, long length)", "class_method_signature": "OSMemory.memset(int address, byte value, long length)", "testcase": false, "constructor": false}, {"identifier": "memmove", "parameters": "(int destAddress, int srcAddress, long length)", "modifiers": "public native", "return": "void", "signature": "void memmove(int destAddress, int srcAddress, long length)", "full_signature": "public native void memmove(int destAddress, int srcAddress, long length)", "class_method_signature": "OSMemory.memmove(int destAddress, int srcAddress, long length)", "testcase": false, "constructor": false}, {"identifier": "getByteArray", "parameters": "(int address, byte[] bytes, int offset,\n            int length)", "modifiers": "public native", "return": "void", "signature": "void getByteArray(int address, byte[] bytes, int offset,\n            int length)", "full_signature": "public native void getByteArray(int address, byte[] bytes, int offset,\n            int length)", "class_method_signature": "OSMemory.getByteArray(int address, byte[] bytes, int offset,\n            int length)", "testcase": false, "constructor": false}, {"identifier": "setByteArray", "parameters": "(int address, byte[] bytes, int offset,\n            int length)", "modifiers": "public native", "return": "void", "signature": "void setByteArray(int address, byte[] bytes, int offset,\n            int length)", "full_signature": "public native void setByteArray(int address, byte[] bytes, int offset,\n            int length)", "class_method_signature": "OSMemory.setByteArray(int address, byte[] bytes, int offset,\n            int length)", "testcase": false, "constructor": false}, {"identifier": "setShortArray", "parameters": "(int address, short[] shorts, int offset,\n            int length, boolean swap)", "modifiers": "public native", "return": "void", "signature": "void setShortArray(int address, short[] shorts, int offset,\n            int length, boolean swap)", "full_signature": "public native void setShortArray(int address, short[] shorts, int offset,\n            int length, boolean swap)", "class_method_signature": "OSMemory.setShortArray(int address, short[] shorts, int offset,\n            int length, boolean swap)", "testcase": false, "constructor": false}, {"identifier": "setIntArray", "parameters": "(int address, int[] ints, int offset,\n            int length, boolean swap)", "modifiers": "public native", "return": "void", "signature": "void setIntArray(int address, int[] ints, int offset,\n            int length, boolean swap)", "full_signature": "public native void setIntArray(int address, int[] ints, int offset,\n            int length, boolean swap)", "class_method_signature": "OSMemory.setIntArray(int address, int[] ints, int offset,\n            int length, boolean swap)", "testcase": false, "constructor": false}, {"identifier": "getByte", "parameters": "(int address)", "modifiers": "public native", "return": "byte", "signature": "byte getByte(int address)", "full_signature": "public native byte getByte(int address)", "class_method_signature": "OSMemory.getByte(int address)", "testcase": false, "constructor": false}, {"identifier": "setByte", "parameters": "(int address, byte value)", "modifiers": "public native", "return": "void", "signature": "void setByte(int address, byte value)", "full_signature": "public native void setByte(int address, byte value)", "class_method_signature": "OSMemory.setByte(int address, byte value)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(int address)", "modifiers": "public native", "return": "short", "signature": "short getShort(int address)", "full_signature": "public native short getShort(int address)", "class_method_signature": "OSMemory.getShort(int address)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(int address, Endianness endianness)", "modifiers": "public", "return": "short", "signature": "short getShort(int address, Endianness endianness)", "full_signature": "public short getShort(int address, Endianness endianness)", "class_method_signature": "OSMemory.getShort(int address, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "setShort", "parameters": "(int address, short value)", "modifiers": "public native", "return": "void", "signature": "void setShort(int address, short value)", "full_signature": "public native void setShort(int address, short value)", "class_method_signature": "OSMemory.setShort(int address, short value)", "testcase": false, "constructor": false}, {"identifier": "setShort", "parameters": "(int address, short value, Endianness endianness)", "modifiers": "public", "return": "void", "signature": "void setShort(int address, short value, Endianness endianness)", "full_signature": "public void setShort(int address, short value, Endianness endianness)", "class_method_signature": "OSMemory.setShort(int address, short value, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(int address)", "modifiers": "public native", "return": "int", "signature": "int getInt(int address)", "full_signature": "public native int getInt(int address)", "class_method_signature": "OSMemory.getInt(int address)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(int address, Endianness endianness)", "modifiers": "public", "return": "int", "signature": "int getInt(int address, Endianness endianness)", "full_signature": "public int getInt(int address, Endianness endianness)", "class_method_signature": "OSMemory.getInt(int address, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "setInt", "parameters": "(int address, int value)", "modifiers": "public native", "return": "void", "signature": "void setInt(int address, int value)", "full_signature": "public native void setInt(int address, int value)", "class_method_signature": "OSMemory.setInt(int address, int value)", "testcase": false, "constructor": false}, {"identifier": "setInt", "parameters": "(int address, int value, Endianness endianness)", "modifiers": "public", "return": "void", "signature": "void setInt(int address, int value, Endianness endianness)", "full_signature": "public void setInt(int address, int value, Endianness endianness)", "class_method_signature": "OSMemory.setInt(int address, int value, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(int address)", "modifiers": "public native", "return": "long", "signature": "long getLong(int address)", "full_signature": "public native long getLong(int address)", "class_method_signature": "OSMemory.getLong(int address)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(int address, Endianness endianness)", "modifiers": "public", "return": "long", "signature": "long getLong(int address, Endianness endianness)", "full_signature": "public long getLong(int address, Endianness endianness)", "class_method_signature": "OSMemory.getLong(int address, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "setLong", "parameters": "(int address, long value)", "modifiers": "public native", "return": "void", "signature": "void setLong(int address, long value)", "full_signature": "public native void setLong(int address, long value)", "class_method_signature": "OSMemory.setLong(int address, long value)", "testcase": false, "constructor": false}, {"identifier": "setLong", "parameters": "(int address, long value, Endianness endianness)", "modifiers": "public", "return": "void", "signature": "void setLong(int address, long value, Endianness endianness)", "full_signature": "public void setLong(int address, long value, Endianness endianness)", "class_method_signature": "OSMemory.setLong(int address, long value, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "getFloat", "parameters": "(int address)", "modifiers": "public native", "return": "float", "signature": "float getFloat(int address)", "full_signature": "public native float getFloat(int address)", "class_method_signature": "OSMemory.getFloat(int address)", "testcase": false, "constructor": false}, {"identifier": "getFloat", "parameters": "(int address, Endianness endianness)", "modifiers": "public", "return": "float", "signature": "float getFloat(int address, Endianness endianness)", "full_signature": "public float getFloat(int address, Endianness endianness)", "class_method_signature": "OSMemory.getFloat(int address, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "setFloat", "parameters": "(int address, float value)", "modifiers": "public native", "return": "void", "signature": "void setFloat(int address, float value)", "full_signature": "public native void setFloat(int address, float value)", "class_method_signature": "OSMemory.setFloat(int address, float value)", "testcase": false, "constructor": false}, {"identifier": "setFloat", "parameters": "(int address, float value, Endianness endianness)", "modifiers": "public", "return": "void", "signature": "void setFloat(int address, float value, Endianness endianness)", "full_signature": "public void setFloat(int address, float value, Endianness endianness)", "class_method_signature": "OSMemory.setFloat(int address, float value, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(int address)", "modifiers": "public native", "return": "double", "signature": "double getDouble(int address)", "full_signature": "public native double getDouble(int address)", "class_method_signature": "OSMemory.getDouble(int address)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(int address, Endianness endianness)", "modifiers": "public", "return": "double", "signature": "double getDouble(int address, Endianness endianness)", "full_signature": "public double getDouble(int address, Endianness endianness)", "class_method_signature": "OSMemory.getDouble(int address, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "setDouble", "parameters": "(int address, double value)", "modifiers": "public native", "return": "void", "signature": "void setDouble(int address, double value)", "full_signature": "public native void setDouble(int address, double value)", "class_method_signature": "OSMemory.setDouble(int address, double value)", "testcase": false, "constructor": false}, {"identifier": "setDouble", "parameters": "(int address, double value, Endianness endianness)", "modifiers": "public", "return": "void", "signature": "void setDouble(int address, double value, Endianness endianness)", "full_signature": "public void setDouble(int address, double value, Endianness endianness)", "class_method_signature": "OSMemory.setDouble(int address, double value, Endianness endianness)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "(int address)", "modifiers": "public native", "return": "int", "signature": "int getAddress(int address)", "full_signature": "public native int getAddress(int address)", "class_method_signature": "OSMemory.getAddress(int address)", "testcase": false, "constructor": false}, {"identifier": "setAddress", "parameters": "(int address, int value)", "modifiers": "public native", "return": "void", "signature": "void setAddress(int address, int value)", "full_signature": "public native void setAddress(int address, int value)", "class_method_signature": "OSMemory.setAddress(int address, int value)", "testcase": false, "constructor": false}, {"identifier": "mmapImpl", "parameters": "(int fileDescriptor, long alignment,\n            long size, int mapMode)", "modifiers": "private native", "return": "int", "signature": "int mmapImpl(int fileDescriptor, long alignment,\n            long size, int mapMode)", "full_signature": "private native int mmapImpl(int fileDescriptor, long alignment,\n            long size, int mapMode)", "class_method_signature": "OSMemory.mmapImpl(int fileDescriptor, long alignment,\n            long size, int mapMode)", "testcase": false, "constructor": false}, {"identifier": "mmap", "parameters": "(int fileDescriptor, long alignment, long size,\n            int mapMode)", "modifiers": "public", "return": "int", "signature": "int mmap(int fileDescriptor, long alignment, long size,\n            int mapMode)", "full_signature": "public int mmap(int fileDescriptor, long alignment, long size,\n            int mapMode)", "class_method_signature": "OSMemory.mmap(int fileDescriptor, long alignment, long size,\n            int mapMode)", "testcase": false, "constructor": false}, {"identifier": "unmapImpl", "parameters": "(int addr, long size)", "modifiers": "private native", "return": "void", "signature": "void unmapImpl(int addr, long size)", "full_signature": "private native void unmapImpl(int addr, long size)", "class_method_signature": "OSMemory.unmapImpl(int addr, long size)", "testcase": false, "constructor": false}, {"identifier": "unmap", "parameters": "(int addr, long size)", "modifiers": "public", "return": "void", "signature": "void unmap(int addr, long size)", "full_signature": "public void unmap(int addr, long size)", "class_method_signature": "OSMemory.unmap(int addr, long size)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(int addr, long size)", "modifiers": "public", "return": "void", "signature": "void load(int addr, long size)", "full_signature": "public void load(int addr, long size)", "class_method_signature": "OSMemory.load(int addr, long size)", "testcase": false, "constructor": false}, {"identifier": "loadImpl", "parameters": "(int l, long size)", "modifiers": "private native", "return": "int", "signature": "int loadImpl(int l, long size)", "full_signature": "private native int loadImpl(int l, long size)", "class_method_signature": "OSMemory.loadImpl(int l, long size)", "testcase": false, "constructor": false}, {"identifier": "isLoaded", "parameters": "(int addr, long size)", "modifiers": "public", "return": "boolean", "signature": "boolean isLoaded(int addr, long size)", "full_signature": "public boolean isLoaded(int addr, long size)", "class_method_signature": "OSMemory.isLoaded(int addr, long size)", "testcase": false, "constructor": false}, {"identifier": "isLoadedImpl", "parameters": "(int l, long size)", "modifiers": "private native", "return": "boolean", "signature": "boolean isLoadedImpl(int l, long size)", "full_signature": "private native boolean isLoadedImpl(int l, long size)", "class_method_signature": "OSMemory.isLoadedImpl(int l, long size)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "(int addr, long size)", "modifiers": "public", "return": "void", "signature": "void flush(int addr, long size)", "full_signature": "public void flush(int addr, long size)", "class_method_signature": "OSMemory.flush(int addr, long size)", "testcase": false, "constructor": false}, {"identifier": "flushImpl", "parameters": "(int l, long size)", "modifiers": "private native", "return": "int", "signature": "int flushImpl(int l, long size)", "full_signature": "private native int flushImpl(int l, long size)", "class_method_signature": "OSMemory.flushImpl(int l, long size)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(short value)", "modifiers": "private", "return": "short", "signature": "short swap(short value)", "full_signature": "private short swap(short value)", "class_method_signature": "OSMemory.swap(short value)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int value)", "modifiers": "private", "return": "int", "signature": "int swap(int value)", "full_signature": "private int swap(int value)", "class_method_signature": "OSMemory.swap(int value)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(long value)", "modifiers": "private", "return": "long", "signature": "long swap(long value)", "full_signature": "private long swap(long value)", "class_method_signature": "OSMemory.swap(long value)", "testcase": false, "constructor": false}], "file": "libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSMemory.java"}, "focal_method": {"identifier": "setIntArray", "parameters": "(int address, int[] ints, int offset,\n            int length, boolean swap)", "modifiers": "public native", "return": "void", "body": "public native void setIntArray(int address, int[] ints, int offset,\n            int length, boolean swap) throws NullPointerException,\n            IndexOutOfBoundsException;", "signature": "void setIntArray(int address, int[] ints, int offset,\n            int length, boolean swap)", "full_signature": "public native void setIntArray(int address, int[] ints, int offset,\n            int length, boolean swap)", "class_method_signature": "OSMemory.setIntArray(int address, int[] ints, int offset,\n            int length, boolean swap)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 608843, "url": "https://github.com/asnowfix/android_dalvik", "language": "Java", "is_fork": false, "fork_count": 209, "stargazer_count": 19, "size": 13087, "license": "licensed"}}