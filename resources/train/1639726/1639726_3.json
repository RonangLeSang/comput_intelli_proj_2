{"test_class": {"identifier": "EbmsMessageHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "EbmsMessageHandler mh = null;", "modifier": "", "type": "EbmsMessageHandler", "declarator": "mh = null", "var_name": "mh"}, {"original_string": "MessageServiceHandler msh = null;", "modifier": "", "type": "MessageServiceHandler", "declarator": "msh = null", "var_name": "msh"}], "file": "Plugins/CorvusEbMS/src/test/java/hk/hku/cecid/ebms/spa/handler/jms/EbmsMessageHandlerTest.java"}, "test_case": {"identifier": "testEbmsMessageHandlerValidMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEbmsMessageHandlerValidMessage() throws Exception {\n        Message msg = buildMessage(\"TestMessage\");\n        \n        doAnswer(new Answer<Object>() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                Object arg = invocation.getArguments()[0];\n                assertThat(arg, instanceOf(EbmsRequest.class));\n                EbmsRequest request = (EbmsRequest) invocation.getArguments()[0];\n                assertThat(request, notNullValue());\n\n                //Check if the ebxml message is valid\n                EbxmlMessage ebxml = request.getMessage();\n                assertThat(ebxml, notNullValue());\n                assertThat(ebxml.getCpaId(),equalTo(\"cpaId\"));\n                assertThat(ebxml.getService(),equalTo(\"http://localhost/inbound\"));\n                assertThat(ebxml.getAction(),equalTo(\"action\"));\n                assertThat(ebxml.getConversationId(),equalTo(\"conversationId\"));\n                assertThat(first(ebxml.getFromPartyIds()),equalTo(\"test_a\"));\n                assertThat(first(ebxml.getToPartyIds()),equalTo(\"test_b\"));\n                assertThat(ebxml.getTimeToLive(),notNullValue());\n                assertThat(ebxml.getMessageId(), equalTo(\"TEST-123456789\"));\n                \n                //Check the payload.\n                assertThat(ebxml.getPayloadCount(),equalTo(1));\n                assertThat(ebxml.getPayloadContainer(\"Payload-0\").getContentType(),equalTo(\"text/xml; charset=UTF-8\"));\n                return null;\n            }\n        }).when(msh).processOutboundMessage((EbmsRequest) any(), (EbmsResponse) isNull());\n        \n        mh.onMessage(msg);\n        \n        verify(msh).processOutboundMessage((EbmsRequest) any(), (EbmsResponse) isNull());\n    }", "signature": "void testEbmsMessageHandlerValidMessage()", "full_signature": "@Test public void testEbmsMessageHandlerValidMessage()", "class_method_signature": "EbmsMessageHandlerTest.testEbmsMessageHandlerValidMessage()", "testcase": true, "constructor": false, "invocations": ["buildMessage", "processOutboundMessage", "when", "doAnswer", "getArguments", "assertThat", "instanceOf", "getArguments", "assertThat", "notNullValue", "getMessage", "assertThat", "notNullValue", "assertThat", "getCpaId", "equalTo", "assertThat", "getService", "equalTo", "assertThat", "getAction", "equalTo", "assertThat", "getConversationId", "equalTo", "assertThat", "first", "getFromPartyIds", "equalTo", "assertThat", "first", "getToPartyIds", "equalTo", "assertThat", "getTimeToLive", "notNullValue", "assertThat", "getMessageId", "equalTo", "assertThat", "getPayloadCount", "equalTo", "assertThat", "getContentType", "getPayloadContainer", "equalTo", "any", "isNull", "onMessage", "processOutboundMessage", "verify", "any", "isNull"]}, "focal_class": {"identifier": "EbmsMessageHandler", "superclass": "", "interfaces": "implements MessageHandler", "fields": [], "methods": [{"identifier": "onMessage", "parameters": "(Message message)", "modifiers": "public", "return": "void", "signature": "void onMessage(Message message)", "full_signature": "public void onMessage(Message message)", "class_method_signature": "EbmsMessageHandler.onMessage(Message message)", "testcase": false, "constructor": false}, {"identifier": "getMSH", "parameters": "()", "modifiers": "protected", "return": "MessageServiceHandler", "signature": "MessageServiceHandler getMSH()", "full_signature": "protected MessageServiceHandler getMSH()", "class_method_signature": "EbmsMessageHandler.getMSH()", "testcase": false, "constructor": false}, {"identifier": "buildEbmsRequest", "parameters": "(Message message)", "modifiers": "private", "return": "EbmsRequest", "signature": "EbmsRequest buildEbmsRequest(Message message)", "full_signature": "private EbmsRequest buildEbmsRequest(Message message)", "class_method_signature": "EbmsMessageHandler.buildEbmsRequest(Message message)", "testcase": false, "constructor": false}, {"identifier": "checkValidChannel", "parameters": "(String cpaId, String service, String action)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkValidChannel(String cpaId, String service, String action)", "full_signature": "protected boolean checkValidChannel(String cpaId, String service, String action)", "class_method_signature": "EbmsMessageHandler.checkValidChannel(String cpaId, String service, String action)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger log()", "full_signature": "protected Logger log()", "class_method_signature": "EbmsMessageHandler.log()", "testcase": false, "constructor": false}, {"identifier": "attachPayloads", "parameters": "(EbxmlMessage ebxml, List<byte[]> payloads)", "modifiers": "private", "return": "void", "signature": "void attachPayloads(EbxmlMessage ebxml, List<byte[]> payloads)", "full_signature": "private void attachPayloads(EbxmlMessage ebxml, List<byte[]> payloads)", "class_method_signature": "EbmsMessageHandler.attachPayloads(EbxmlMessage ebxml, List<byte[]> payloads)", "testcase": false, "constructor": false}, {"identifier": "attachPayloads", "parameters": "(EbxmlMessage ebxml, String [] payloadIds, String [] contentIds, List<byte[]> payloads)", "modifiers": "private", "return": "void", "signature": "void attachPayloads(EbxmlMessage ebxml, String [] payloadIds, String [] contentIds, List<byte[]> payloads)", "full_signature": "private void attachPayloads(EbxmlMessage ebxml, String [] payloadIds, String [] contentIds, List<byte[]> payloads)", "class_method_signature": "EbmsMessageHandler.attachPayloads(EbxmlMessage ebxml, String [] payloadIds, String [] contentIds, List<byte[]> payloads)", "testcase": false, "constructor": false}, {"identifier": "addToParty", "parameters": "(MessageHeader ebxmlHeader, String[] toPartyIds, String[] toPartyIdTypes)", "modifiers": "private", "return": "void", "signature": "void addToParty(MessageHeader ebxmlHeader, String[] toPartyIds, String[] toPartyIdTypes)", "full_signature": "private void addToParty(MessageHeader ebxmlHeader, String[] toPartyIds, String[] toPartyIdTypes)", "class_method_signature": "EbmsMessageHandler.addToParty(MessageHeader ebxmlHeader, String[] toPartyIds, String[] toPartyIdTypes)", "testcase": false, "constructor": false}, {"identifier": "addFromParty", "parameters": "(MessageHeader ebxmlHeader, String[] fromPartyIds, String[] fromPartyIdTypes)", "modifiers": "private", "return": "void", "signature": "void addFromParty(MessageHeader ebxmlHeader, String[] fromPartyIds, String[] fromPartyIdTypes)", "full_signature": "private void addFromParty(MessageHeader ebxmlHeader, String[] fromPartyIds, String[] fromPartyIdTypes)", "class_method_signature": "EbmsMessageHandler.addFromParty(MessageHeader ebxmlHeader, String[] fromPartyIds, String[] fromPartyIdTypes)", "testcase": false, "constructor": false}, {"identifier": "asStringArray", "parameters": "(Map<String, Object> map, String key)", "modifiers": "private", "return": "String[]", "signature": "String[] asStringArray(Map<String, Object> map, String key)", "full_signature": "private String[] asStringArray(Map<String, Object> map, String key)", "class_method_signature": "EbmsMessageHandler.asStringArray(Map<String, Object> map, String key)", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "(Map<String,Object> map, String key)", "modifiers": "private", "return": "String", "signature": "String asString(Map<String,Object> map, String key)", "full_signature": "private String asString(Map<String,Object> map, String key)", "class_method_signature": "EbmsMessageHandler.asString(Map<String,Object> map, String key)", "testcase": false, "constructor": false}, {"identifier": "asInt", "parameters": "(Map<String, Object> map, String key)", "modifiers": "private", "return": "Integer", "signature": "Integer asInt(Map<String, Object> map, String key)", "full_signature": "private Integer asInt(Map<String, Object> map, String key)", "class_method_signature": "EbmsMessageHandler.asInt(Map<String, Object> map, String key)", "testcase": false, "constructor": false}], "file": "Plugins/CorvusEbMS/src/main/java/hk/hku/cecid/ebms/spa/handler/jms/EbmsMessageHandler.java"}, "focal_method": {"identifier": "onMessage", "parameters": "(Message message)", "modifiers": "public", "return": "void", "body": "public void onMessage(Message message) {\n    \n        log().debug(\"got message:\" + message.getSource().toString());\n        try {\n            EbmsRequest ebmsRequest = buildEbmsRequest(message);\n            getMSH().processOutboundMessage(ebmsRequest, null);\n        } catch (Exception e) {\n            log().error(\"Failed to process outbound message: \" + e);\n            log().debug(\"\",e);\n            throw new RuntimeException(e);\n        }\n    }", "signature": "void onMessage(Message message)", "full_signature": "public void onMessage(Message message)", "class_method_signature": "EbmsMessageHandler.onMessage(Message message)", "testcase": false, "constructor": false, "invocations": ["debug", "log", "toString", "getSource", "buildEbmsRequest", "processOutboundMessage", "getMSH", "error", "log", "debug", "log"]}, "repository": {"repo_id": 1639726, "url": "https://github.com/jentrata/jentrata-msh", "language": "Java", "is_fork": false, "fork_count": 60, "stargazer_count": 20, "size": 1986, "license": "licensed"}}