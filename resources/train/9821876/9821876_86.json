{"test_class": {"identifier": "ParanamerNameProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ParanamerNameProvider provider = new ParanamerNameProvider();", "modifier": "private", "type": "ParanamerNameProvider", "declarator": "provider = new ParanamerNameProvider()", "var_name": "provider"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/http/ParanamerNameProviderTest.java"}, "test_case": {"identifier": "shouldNameMethodsFieldsWhenAnnotatedOrNot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNameMethodsFieldsWhenAnnotatedOrNot() throws SecurityException, NoSuchMethodException  {\n\t\tParameter[] namesFor = provider.parametersFor(Horse.class.getMethod(\"runThroughWithAnnotation2\", Field.class, Field.class));\n\t\tassertThat(toNames(namesFor), contains(\"one\", \"two\"));\n\t}", "signature": "void shouldNameMethodsFieldsWhenAnnotatedOrNot()", "full_signature": "@Test public void shouldNameMethodsFieldsWhenAnnotatedOrNot()", "class_method_signature": "ParanamerNameProviderTest.shouldNameMethodsFieldsWhenAnnotatedOrNot()", "testcase": true, "constructor": false, "invocations": ["parametersFor", "getMethod", "assertThat", "toNames", "contains"]}, "focal_class": {"identifier": "ParanamerNameProvider", "superclass": "", "interfaces": "implements ParameterNameProvider", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ParanamerNameProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ParanamerNameProvider.class)", "var_name": "logger"}, {"original_string": "private final Paranamer info = new CachingParanamer(new AnnotationParanamer(new BytecodeReadingParanamer()));", "modifier": "private final", "type": "Paranamer", "declarator": "info = new CachingParanamer(new AnnotationParanamer(new BytecodeReadingParanamer()))", "var_name": "info"}], "methods": [{"identifier": "parametersFor", "parameters": "(final AccessibleObject executable)", "modifiers": "@Override public", "return": "Parameter[]", "signature": "Parameter[] parametersFor(final AccessibleObject executable)", "full_signature": "@Override public Parameter[] parametersFor(final AccessibleObject executable)", "class_method_signature": "ParanamerNameProvider.parametersFor(final AccessibleObject executable)", "testcase": false, "constructor": false}, {"identifier": "defensiveCopy", "parameters": "(Parameter[] src)", "modifiers": "private", "return": "Parameter[]", "signature": "Parameter[] defensiveCopy(Parameter[] src)", "full_signature": "private Parameter[] defensiveCopy(Parameter[] src)", "class_method_signature": "ParanamerNameProvider.defensiveCopy(Parameter[] src)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/http/ParanamerNameProvider.java"}, "focal_method": {"identifier": "parametersFor", "parameters": "(final AccessibleObject executable)", "modifiers": "@Override public", "return": "Parameter[]", "body": "@Override\n\tpublic Parameter[] parametersFor(final AccessibleObject executable) {\n\t\ttry {\n\t\t\tString[] names = info.lookupParameterNames(executable);\n\t\t\tParameter[] params = new Parameter[names.length];\n\t\t\tlogger.debug(\"Found parameter names with paranamer for {} as {}\", executable, (Object) names);\n\n\t\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\t\tparams[i] = new Parameter(i, names[i], executable);\n\t\t\t}\n\n\t\t\treturn defensiveCopy(params);\n\t\t} catch (ParameterNamesNotFoundException e) {\n\t\t\tthrow new IllegalStateException(\"Paranamer were not able to find your parameter names for \" + executable\n\t\t\t\t\t+ \"You must compile your code with debug information (javac -g), or using @Named on \"\n\t\t\t\t\t+ \"each method parameter.\", e);\n\t\t}\n\t}", "signature": "Parameter[] parametersFor(final AccessibleObject executable)", "full_signature": "@Override public Parameter[] parametersFor(final AccessibleObject executable)", "class_method_signature": "ParanamerNameProvider.parametersFor(final AccessibleObject executable)", "testcase": false, "constructor": false, "invocations": ["lookupParameterNames", "debug", "defensiveCopy"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}