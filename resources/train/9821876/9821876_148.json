{"test_class": {"identifier": "OutjectResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private @Mock Result result;", "modifier": "private @Mock", "type": "Result", "declarator": "result", "var_name": "result"}, {"original_string": "private @Mock MethodInfo methodInfo;", "modifier": "private @Mock", "type": "MethodInfo", "declarator": "methodInfo", "var_name": "methodInfo"}, {"original_string": "private @Mock Object instance;", "modifier": "private @Mock", "type": "Object", "declarator": "instance", "var_name": "instance"}, {"original_string": "private @Mock InterceptorStack stack;", "modifier": "private @Mock", "type": "InterceptorStack", "declarator": "stack", "var_name": "stack"}, {"original_string": "private @Mock TypeNameExtractor extractor;", "modifier": "private @Mock", "type": "TypeNameExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private @Mock ControllerMethod controllerMethod;", "modifier": "private @Mock", "type": "ControllerMethod", "declarator": "controllerMethod", "var_name": "controllerMethod"}, {"original_string": "private OutjectResult outjectResult;", "modifier": "private", "type": "OutjectResult", "declarator": "outjectResult", "var_name": "outjectResult"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/observer/OutjectResultTest.java"}, "test_case": {"identifier": "shouldOutjectWithASimpleTypeName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldOutjectWithASimpleTypeName() throws NoSuchMethodException {\n\t\tMethod method = MyComponent.class.getMethod(\"returnsAString\");\n\t\twhen(controllerMethod.getMethod()).thenReturn(method);\n\t\twhen(methodInfo.getResult()).thenReturn(\"myString\");\n\t\twhen(extractor.nameFor(String.class)).thenReturn(\"string\");\n\t\toutjectResult.outject(new MethodExecuted(controllerMethod, methodInfo), result, methodInfo);\n\t\tverify(result).include(\"string\", \"myString\");\n\t}", "signature": "void shouldOutjectWithASimpleTypeName()", "full_signature": "@Test public void shouldOutjectWithASimpleTypeName()", "class_method_signature": "OutjectResultTest.shouldOutjectWithASimpleTypeName()", "testcase": true, "constructor": false, "invocations": ["getMethod", "thenReturn", "when", "getMethod", "thenReturn", "when", "getResult", "thenReturn", "when", "nameFor", "outject", "include", "verify"]}, "focal_class": {"identifier": "OutjectResult", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = getLogger(OutjectResult.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = getLogger(OutjectResult.class)", "var_name": "logger"}, {"original_string": "private final TypeNameExtractor extractor;", "modifier": "private final", "type": "TypeNameExtractor", "declarator": "extractor", "var_name": "extractor"}], "methods": [{"identifier": "OutjectResult", "parameters": "()", "modifiers": "protected", "return": "", "signature": " OutjectResult()", "full_signature": "protected  OutjectResult()", "class_method_signature": "OutjectResult.OutjectResult()", "testcase": false, "constructor": true}, {"identifier": "OutjectResult", "parameters": "(TypeNameExtractor extractor)", "modifiers": "@Inject public", "return": "", "signature": " OutjectResult(TypeNameExtractor extractor)", "full_signature": "@Inject public  OutjectResult(TypeNameExtractor extractor)", "class_method_signature": "OutjectResult.OutjectResult(TypeNameExtractor extractor)", "testcase": false, "constructor": true}, {"identifier": "outject", "parameters": "(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "modifiers": "public", "return": "void", "signature": "void outject(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "full_signature": "public void outject(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "class_method_signature": "OutjectResult.outject(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/observer/OutjectResult.java"}, "focal_method": {"identifier": "outject", "parameters": "(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "modifiers": "public", "return": "void", "body": "public void outject(@Observes MethodExecuted event, Result result, MethodInfo methodInfo) {\n\n\t\tType returnType = event.getMethodReturnType();\n\n\t\tif (!returnType.equals(Void.TYPE)) {\n\t\t\tString name = extractor.nameFor(returnType);\n\t\t\tObject value = methodInfo.getResult();\n\t\t\tlogger.debug(\"outjecting {}={}\", name, value);\n\t\t\tresult.include(name, value);\n\t\t}\n\t}", "signature": "void outject(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "full_signature": "public void outject(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "class_method_signature": "OutjectResult.outject(@Observes MethodExecuted event, Result result, MethodInfo methodInfo)", "testcase": false, "constructor": false, "invocations": ["getMethodReturnType", "equals", "nameFor", "getResult", "debug", "include"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}