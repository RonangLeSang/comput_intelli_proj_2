{"test_class": {"identifier": "DefaultResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private HttpServletRequest request;", "modifier": "@Mock private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock private Container container;", "modifier": "@Mock private", "type": "Container", "declarator": "container", "var_name": "container"}, {"original_string": "@Mock private TypeNameExtractor extractor;", "modifier": "@Mock private", "type": "TypeNameExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "@Mock private Messages messages;", "modifier": "@Mock private", "type": "Messages", "declarator": "messages", "var_name": "messages"}, {"original_string": "private Result result;", "modifier": "private", "type": "Result", "declarator": "result", "var_name": "result"}, {"original_string": "private WeldProxifier weldProxifier;", "modifier": "private", "type": "WeldProxifier", "declarator": "weldProxifier", "var_name": "weldProxifier"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/core/DefaultResultTest.java"}, "test_case": {"identifier": "shouldUseContainerForNewView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldUseContainerForNewView() {\n\t\tfinal MyView expectedView = new MyView();\n\t\twhen(container.instanceFor(MyView.class)).thenReturn(expectedView);\n\n\t\tMyView view = result.use(MyView.class);\n\t\tassertThat(view, is(expectedView));\n\t}", "signature": "void shouldUseContainerForNewView()", "full_signature": "@Test public void shouldUseContainerForNewView()", "class_method_signature": "DefaultResultTest.shouldUseContainerForNewView()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "instanceFor", "use", "assertThat", "is"]}, "focal_class": {"identifier": "DefaultResult", "superclass": "extends AbstractResult", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultResult.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultResult.class)", "var_name": "logger"}, {"original_string": "private final HttpServletRequest request;", "modifier": "private final", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private final Container container;", "modifier": "private final", "type": "Container", "declarator": "container", "var_name": "container"}, {"original_string": "private final ExceptionMapper exceptions;", "modifier": "private final", "type": "ExceptionMapper", "declarator": "exceptions", "var_name": "exceptions"}, {"original_string": "private final TypeNameExtractor extractor;", "modifier": "private final", "type": "TypeNameExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private final Messages messages;", "modifier": "private final", "type": "Messages", "declarator": "messages", "var_name": "messages"}, {"original_string": "private Map<String, Object> includedAttributes;", "modifier": "private", "type": "Map<String, Object>", "declarator": "includedAttributes", "var_name": "includedAttributes"}, {"original_string": "private boolean responseCommitted;", "modifier": "private", "type": "boolean", "declarator": "responseCommitted", "var_name": "responseCommitted"}], "methods": [{"identifier": "DefaultResult", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultResult()", "full_signature": "protected  DefaultResult()", "class_method_signature": "DefaultResult.DefaultResult()", "testcase": false, "constructor": true}, {"identifier": "DefaultResult", "parameters": "(HttpServletRequest request, Container container, ExceptionMapper exceptions, TypeNameExtractor extractor,\n\t\t\tMessages messages)", "modifiers": "@Inject public", "return": "", "signature": " DefaultResult(HttpServletRequest request, Container container, ExceptionMapper exceptions, TypeNameExtractor extractor,\n\t\t\tMessages messages)", "full_signature": "@Inject public  DefaultResult(HttpServletRequest request, Container container, ExceptionMapper exceptions, TypeNameExtractor extractor,\n\t\t\tMessages messages)", "class_method_signature": "DefaultResult.DefaultResult(HttpServletRequest request, Container container, ExceptionMapper exceptions, TypeNameExtractor extractor,\n\t\t\tMessages messages)", "testcase": false, "constructor": true}, {"identifier": "use", "parameters": "(Class<T> view)", "modifiers": "@Override public", "return": "T", "signature": "T use(Class<T> view)", "full_signature": "@Override public T use(Class<T> view)", "class_method_signature": "DefaultResult.use(Class<T> view)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(Class<? extends Exception> exception)", "modifiers": "@Override public", "return": "Result", "signature": "Result on(Class<? extends Exception> exception)", "full_signature": "@Override public Result on(Class<? extends Exception> exception)", "class_method_signature": "DefaultResult.on(Class<? extends Exception> exception)", "testcase": false, "constructor": false}, {"identifier": "include", "parameters": "(String key, Object value)", "modifiers": "@Override public", "return": "Result", "signature": "Result include(String key, Object value)", "full_signature": "@Override public Result include(String key, Object value)", "class_method_signature": "DefaultResult.include(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "used", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean used()", "full_signature": "@Override public boolean used()", "class_method_signature": "DefaultResult.used()", "testcase": false, "constructor": false}, {"identifier": "included", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> included()", "full_signature": "@Override public Map<String, Object> included()", "class_method_signature": "DefaultResult.included()", "testcase": false, "constructor": false}, {"identifier": "include", "parameters": "(Object value)", "modifiers": "@Override public", "return": "Result", "signature": "Result include(Object value)", "full_signature": "@Override public Result include(Object value)", "class_method_signature": "DefaultResult.include(Object value)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/core/DefaultResult.java"}, "focal_method": {"identifier": "use", "parameters": "(Class<T> view)", "modifiers": "@Override public", "return": "T", "body": "@Override\n\tpublic <T extends View> T use(Class<T> view) {\n\t\t\n\t\tmessages.assertAbsenceOfErrors();\n\t    \n\t\tresponseCommitted = true;\n\t\treturn container.instanceFor(view);\n\t}", "signature": "T use(Class<T> view)", "full_signature": "@Override public T use(Class<T> view)", "class_method_signature": "DefaultResult.use(Class<T> view)", "testcase": false, "constructor": false, "invocations": ["assertAbsenceOfErrors", "instanceFor"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}