{"test_class": {"identifier": "JavaEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Evaluator evaluator;", "modifier": "private", "type": "Evaluator", "declarator": "evaluator", "var_name": "evaluator"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/http/route/JavaEvaluatorTest.java"}, "test_case": {"identifier": "shouldInvokeAGetterDeclaredOnSuperClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldInvokeAGetterDeclaredOnSuperClass() {\n\t\tClient c = vipClient(1L);\n\t\tassertThat((Long) evaluator.get(c, \"client.id\"), is(equalTo(1L)));\n\t}", "signature": "void shouldInvokeAGetterDeclaredOnSuperClass()", "full_signature": "@Test public void shouldInvokeAGetterDeclaredOnSuperClass()", "class_method_signature": "JavaEvaluatorTest.shouldInvokeAGetterDeclaredOnSuperClass()", "testcase": true, "constructor": false, "invocations": ["vipClient", "assertThat", "get", "is", "equalTo"]}, "focal_class": {"identifier": "JavaEvaluator", "superclass": "", "interfaces": "implements Evaluator", "fields": [{"original_string": "private final ReflectionProvider reflectionProvider;", "modifier": "private final", "type": "ReflectionProvider", "declarator": "reflectionProvider", "var_name": "reflectionProvider"}], "methods": [{"identifier": "JavaEvaluator", "parameters": "()", "modifiers": "protected", "return": "", "signature": " JavaEvaluator()", "full_signature": "protected  JavaEvaluator()", "class_method_signature": "JavaEvaluator.JavaEvaluator()", "testcase": false, "constructor": true}, {"identifier": "JavaEvaluator", "parameters": "(ReflectionProvider reflectionProvider)", "modifiers": "@Inject public", "return": "", "signature": " JavaEvaluator(ReflectionProvider reflectionProvider)", "full_signature": "@Inject public  JavaEvaluator(ReflectionProvider reflectionProvider)", "class_method_signature": "JavaEvaluator.JavaEvaluator(ReflectionProvider reflectionProvider)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(Object root, String path)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(Object root, String path)", "full_signature": "@Override public Object get(Object root, String path)", "class_method_signature": "JavaEvaluator.get(Object root, String path)", "testcase": false, "constructor": false}, {"identifier": "navigate", "parameters": "(Object current, String path)", "modifiers": "private", "return": "Object", "signature": "Object navigate(Object current, String path)", "full_signature": "private Object navigate(Object current, String path)", "class_method_signature": "JavaEvaluator.navigate(Object current, String path)", "testcase": false, "constructor": false}, {"identifier": "access", "parameters": "(Object current, int position)", "modifiers": "private", "return": "Object", "signature": "Object access(Object current, int position)", "full_signature": "private Object access(Object current, int position)", "class_method_signature": "JavaEvaluator.access(Object current, int position)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/JavaEvaluator.java"}, "focal_method": {"identifier": "get", "parameters": "(Object root, String path)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object get(Object root, String path) {\n\t\tif (root == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString[] paths = path.split(\"[\\\\]\\\\.]\");\n\t\tObject current = root;\n\t\tfor (int i = 1; i < paths.length; i++) {\n\t\t\ttry {\n\t\t\t\tcurrent = navigate(current, paths[i]);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new VRaptorException(\"Unable to evaluate expression \" + path, e);\n\t\t\t}\n\t\t\tif (current == null) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\t\treturn current;\n\t}", "signature": "Object get(Object root, String path)", "full_signature": "@Override public Object get(Object root, String path)", "class_method_signature": "JavaEvaluator.get(Object root, String path)", "testcase": false, "constructor": false, "invocations": ["split", "navigate"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}