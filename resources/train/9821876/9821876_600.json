{"test_class": {"identifier": "MusicControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockSerializationResult result;", "modifier": "private", "type": "MockSerializationResult", "declarator": "result", "var_name": "result"}, {"original_string": "private MockValidator validator;", "modifier": "private", "type": "MockValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private MusicController controller;", "modifier": "private", "type": "MusicController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private Music music;", "modifier": "private", "type": "Music", "declarator": "music", "var_name": "music"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock private UserInfo userInfo;", "modifier": "@Mock private", "type": "UserInfo", "declarator": "userInfo", "var_name": "userInfo"}, {"original_string": "@Mock private MusicDao dao;", "modifier": "@Mock private", "type": "MusicDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "@Mock private Musics musics;", "modifier": "@Mock private", "type": "Musics", "declarator": "musics", "var_name": "musics"}, {"original_string": "@Mock private UploadedFile uploadFile;", "modifier": "@Mock private", "type": "UploadedFile", "declarator": "uploadFile", "var_name": "uploadFile"}, {"original_string": "@Mock private UserDao userDao;", "modifier": "@Mock private", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}], "file": "vraptor-musicjungle/src/test/java/br/com/caelum/vraptor/musicjungle/controller/MusicControllerTest.java"}, "test_case": {"identifier": "shouldNotShowMusicWhenDoesNotExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNotShowMusicWhenDoesNotExists() {\n\t\twhen(dao.load(music)).thenReturn(null);\n\t\t\n\t\tcontroller.show(music);\n\t\t\n\t\tassertNull(result.included().get(\"music\"));\n\t}", "signature": "void shouldNotShowMusicWhenDoesNotExists()", "full_signature": "@Test public void shouldNotShowMusicWhenDoesNotExists()", "class_method_signature": "MusicControllerTest.shouldNotShowMusicWhenDoesNotExists()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "load", "show", "assertNull", "get", "included"]}, "focal_class": {"identifier": "MusicController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MusicController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MusicController.class)", "var_name": "logger"}, {"original_string": "private final Result result;", "modifier": "private final", "type": "Result", "declarator": "result", "var_name": "result"}, {"original_string": "private final Validator validator;", "modifier": "private final", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private final UserInfo userInfo;", "modifier": "private final", "type": "UserInfo", "declarator": "userInfo", "var_name": "userInfo"}, {"original_string": "private final MusicDao musicDao;", "modifier": "private final", "type": "MusicDao", "declarator": "musicDao", "var_name": "musicDao"}, {"original_string": "private final Musics musics;", "modifier": "private final", "type": "Musics", "declarator": "musics", "var_name": "musics"}, {"original_string": "private final UserDao userDao;", "modifier": "private final", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}], "methods": [{"identifier": "MusicController", "parameters": "()", "modifiers": "protected", "return": "", "signature": " MusicController()", "full_signature": "protected  MusicController()", "class_method_signature": "MusicController.MusicController()", "testcase": false, "constructor": true}, {"identifier": "MusicController", "parameters": "(MusicDao musicDao, UserInfo userInfo, \n\t\t\t\tResult result, Validator validator, Musics musics, UserDao userDao)", "modifiers": "@Inject public", "return": "", "signature": " MusicController(MusicDao musicDao, UserInfo userInfo, \n\t\t\t\tResult result, Validator validator, Musics musics, UserDao userDao)", "full_signature": "@Inject public  MusicController(MusicDao musicDao, UserInfo userInfo, \n\t\t\t\tResult result, Validator validator, Musics musics, UserDao userDao)", "class_method_signature": "MusicController.MusicController(MusicDao musicDao, UserInfo userInfo, \n\t\t\t\tResult result, Validator validator, Musics musics, UserDao userDao)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final @NotNull @Valid Music music, UploadedFile file)", "modifiers": "@Path(\"/musics\") @Post public", "return": "void", "signature": "void add(final @NotNull @Valid Music music, UploadedFile file)", "full_signature": "@Path(\"/musics\") @Post public void add(final @NotNull @Valid Music music, UploadedFile file)", "class_method_signature": "MusicController.add(final @NotNull @Valid Music music, UploadedFile file)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(Music music)", "modifiers": "@Path(\"/musics/{music.id}\") @Get public", "return": "void", "signature": "void show(Music music)", "full_signature": "@Path(\"/musics/{music.id}\") @Get public void show(Music music)", "class_method_signature": "MusicController.show(Music music)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(Music music)", "modifiers": "@Get(\"/musics/search\") public", "return": "void", "signature": "void search(Music music)", "full_signature": "@Get(\"/musics/search\") public void search(Music music)", "class_method_signature": "MusicController.search(Music music)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(Music m)", "modifiers": "@Path(\"/musics/download/{m.id}\") @Get public", "return": "Download", "signature": "Download download(Music m)", "full_signature": "@Path(\"/musics/download/{m.id}\") @Get public Download download(Music m)", "class_method_signature": "MusicController.download(Music m)", "testcase": false, "constructor": false}, {"identifier": "showAllMusicsAsJSON", "parameters": "()", "modifiers": "@Public @Path(\"/musics/list/json\") public", "return": "void", "signature": "void showAllMusicsAsJSON()", "full_signature": "@Public @Path(\"/musics/list/json\") public void showAllMusicsAsJSON()", "class_method_signature": "MusicController.showAllMusicsAsJSON()", "testcase": false, "constructor": false}, {"identifier": "showAllMusicsAsXML", "parameters": "()", "modifiers": "@Public @Path(\"/musics/list/xml\") public", "return": "void", "signature": "void showAllMusicsAsXML()", "full_signature": "@Public @Path(\"/musics/list/xml\") public void showAllMusicsAsXML()", "class_method_signature": "MusicController.showAllMusicsAsXML()", "testcase": false, "constructor": false}, {"identifier": "showAllMusicsAsHTTP", "parameters": "()", "modifiers": "@Public @Path(\"/musics/list/http\") public", "return": "void", "signature": "void showAllMusicsAsHTTP()", "full_signature": "@Public @Path(\"/musics/list/http\") public void showAllMusicsAsHTTP()", "class_method_signature": "MusicController.showAllMusicsAsHTTP()", "testcase": false, "constructor": false}, {"identifier": "listForm", "parameters": "()", "modifiers": "@Public @Path(\"/musics/list/form\") public", "return": "void", "signature": "void listForm()", "full_signature": "@Public @Path(\"/musics/list/form\") public void listForm()", "class_method_signature": "MusicController.listForm()", "testcase": false, "constructor": false}, {"identifier": "listAs", "parameters": "()", "modifiers": "@Public @Path(\"musics/listAs\") public", "return": "void", "signature": "void listAs()", "full_signature": "@Public @Path(\"musics/listAs\") public void listAs()", "class_method_signature": "MusicController.listAs()", "testcase": false, "constructor": false}], "file": "vraptor-musicjungle/src/main/java/br/com/caelum/vraptor/musicjungle/controller/MusicController.java"}, "focal_method": {"identifier": "show", "parameters": "(Music music)", "modifiers": "@Path(\"/musics/{music.id}\") @Get public", "return": "void", "body": "@Path(\"/musics/{music.id}\")\n\t@Get\n\tpublic void show(Music music) {\n\t    result.include(\"music\", musicDao.load(music));\n\t}", "signature": "void show(Music music)", "full_signature": "@Path(\"/musics/{music.id}\") @Get public void show(Music music)", "class_method_signature": "MusicController.show(Music music)", "testcase": false, "constructor": false, "invocations": ["include", "load"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}