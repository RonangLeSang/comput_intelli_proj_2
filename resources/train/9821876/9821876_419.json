{"test_class": {"identifier": "DefaultHttpResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private @Mock HttpServletResponse response;", "modifier": "private @Mock", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private @Mock Status status;", "modifier": "private @Mock", "type": "Status", "declarator": "status", "var_name": "status"}, {"original_string": "private HttpResult httpResult;", "modifier": "private", "type": "HttpResult", "declarator": "httpResult", "var_name": "httpResult"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/view/DefaultHttpResultTest.java"}, "test_case": {"identifier": "shouldThrowResultExceptionIfAnIOExceptionWhenSendErrorWithMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldThrowResultExceptionIfAnIOExceptionWhenSendErrorWithMessage() throws Exception {\n\t\tdoThrow(new IOException()).when(response).sendError(anyInt(), anyString());\n\n\t\ttry {\n\t\t\thttpResult.sendError(SC_INTERNAL_SERVER_ERROR, \"A simple message\");\n\t\t\tfail(\"should throw ResultException\");\n\t\t} catch (ResultException e) {\n\t\t\tverify(response, only()).sendError(anyInt(), anyString());\n\t\t}\n\t}", "signature": "void shouldThrowResultExceptionIfAnIOExceptionWhenSendErrorWithMessage()", "full_signature": "@Test public void shouldThrowResultExceptionIfAnIOExceptionWhenSendErrorWithMessage()", "class_method_signature": "DefaultHttpResultTest.shouldThrowResultExceptionIfAnIOExceptionWhenSendErrorWithMessage()", "testcase": true, "constructor": false, "invocations": ["sendError", "when", "doThrow", "anyInt", "anyString", "sendError", "fail", "sendError", "verify", "only", "anyInt", "anyString"]}, "focal_class": {"identifier": "DefaultHttpResult", "superclass": "", "interfaces": "implements HttpResult", "fields": [{"original_string": "private final HttpServletResponse response;", "modifier": "private final", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private final Status status;", "modifier": "private final", "type": "Status", "declarator": "status", "var_name": "status"}], "methods": [{"identifier": "DefaultHttpResult", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultHttpResult()", "full_signature": "protected  DefaultHttpResult()", "class_method_signature": "DefaultHttpResult.DefaultHttpResult()", "testcase": false, "constructor": true}, {"identifier": "DefaultHttpResult", "parameters": "(HttpServletResponse response, Status status)", "modifiers": "@Inject public", "return": "", "signature": " DefaultHttpResult(HttpServletResponse response, Status status)", "full_signature": "@Inject public  DefaultHttpResult(HttpServletResponse response, Status status)", "class_method_signature": "DefaultHttpResult.DefaultHttpResult(HttpServletResponse response, Status status)", "testcase": false, "constructor": true}, {"identifier": "addDateHeader", "parameters": "(String name, long date)", "modifiers": "@Override public", "return": "HttpResult", "signature": "HttpResult addDateHeader(String name, long date)", "full_signature": "@Override public HttpResult addDateHeader(String name, long date)", "class_method_signature": "DefaultHttpResult.addDateHeader(String name, long date)", "testcase": false, "constructor": false}, {"identifier": "addHeader", "parameters": "(String name, String value)", "modifiers": "@Override public", "return": "HttpResult", "signature": "HttpResult addHeader(String name, String value)", "full_signature": "@Override public HttpResult addHeader(String name, String value)", "class_method_signature": "DefaultHttpResult.addHeader(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "addIntHeader", "parameters": "(String name, int value)", "modifiers": "@Override public", "return": "HttpResult", "signature": "HttpResult addIntHeader(String name, int value)", "full_signature": "@Override public HttpResult addIntHeader(String name, int value)", "class_method_signature": "DefaultHttpResult.addIntHeader(String name, int value)", "testcase": false, "constructor": false}, {"identifier": "sendError", "parameters": "(int statusCode)", "modifiers": "@Override public", "return": "void", "signature": "void sendError(int statusCode)", "full_signature": "@Override public void sendError(int statusCode)", "class_method_signature": "DefaultHttpResult.sendError(int statusCode)", "testcase": false, "constructor": false}, {"identifier": "sendError", "parameters": "(int statusCode, String message)", "modifiers": "@Override public", "return": "void", "signature": "void sendError(int statusCode, String message)", "full_signature": "@Override public void sendError(int statusCode, String message)", "class_method_signature": "DefaultHttpResult.sendError(int statusCode, String message)", "testcase": false, "constructor": false}, {"identifier": "setStatusCode", "parameters": "(int statusCode)", "modifiers": "@Override public", "return": "void", "signature": "void setStatusCode(int statusCode)", "full_signature": "@Override public void setStatusCode(int statusCode)", "class_method_signature": "DefaultHttpResult.setStatusCode(int statusCode)", "testcase": false, "constructor": false}, {"identifier": "movedPermanentlyTo", "parameters": "(String uri)", "modifiers": "public", "return": "void", "signature": "void movedPermanentlyTo(String uri)", "full_signature": "public void movedPermanentlyTo(String uri)", "class_method_signature": "DefaultHttpResult.movedPermanentlyTo(String uri)", "testcase": false, "constructor": false}, {"identifier": "movedPermanentlyTo", "parameters": "(final Class<T> controller)", "modifiers": "public", "return": "T", "signature": "T movedPermanentlyTo(final Class<T> controller)", "full_signature": "public T movedPermanentlyTo(final Class<T> controller)", "class_method_signature": "DefaultHttpResult.movedPermanentlyTo(final Class<T> controller)", "testcase": false, "constructor": false}, {"identifier": "body", "parameters": "(String body)", "modifiers": "@Override public", "return": "HttpResult", "signature": "HttpResult body(String body)", "full_signature": "@Override public HttpResult body(String body)", "class_method_signature": "DefaultHttpResult.body(String body)", "testcase": false, "constructor": false}, {"identifier": "body", "parameters": "(InputStream body)", "modifiers": "@Override public", "return": "HttpResult", "signature": "HttpResult body(InputStream body)", "full_signature": "@Override public HttpResult body(InputStream body)", "class_method_signature": "DefaultHttpResult.body(InputStream body)", "testcase": false, "constructor": false}, {"identifier": "body", "parameters": "(Reader body)", "modifiers": "@Override public", "return": "HttpResult", "signature": "HttpResult body(Reader body)", "full_signature": "@Override public HttpResult body(Reader body)", "class_method_signature": "DefaultHttpResult.body(Reader body)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/view/DefaultHttpResult.java"}, "focal_method": {"identifier": "sendError", "parameters": "(int statusCode)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void sendError(int statusCode) {\n\t\ttry {\n\t\t\tresponse.sendError(statusCode);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(\"Error while setting status code\", e);\n\t\t}\n\n\t}", "signature": "void sendError(int statusCode)", "full_signature": "@Override public void sendError(int statusCode)", "class_method_signature": "DefaultHttpResult.sendError(int statusCode)", "testcase": false, "constructor": false, "invocations": ["sendError"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}