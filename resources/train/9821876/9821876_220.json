{"test_class": {"identifier": "XStreamXMLSerializationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "protected XStreamXMLSerialization serialization;", "modifier": "protected", "type": "XStreamXMLSerialization", "declarator": "serialization", "var_name": "serialization"}, {"original_string": "protected ByteArrayOutputStream stream;", "modifier": "protected", "type": "ByteArrayOutputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "protected Environment environment;", "modifier": "protected", "type": "Environment", "declarator": "environment", "var_name": "environment"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/serialization/xstream/XStreamXMLSerializationTest.java"}, "test_case": {"identifier": "shouldIncludeFieldsFromACollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldIncludeFieldsFromACollection() {\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\",\n\t\t\t\tnew Item(\"name\", 12.99));\n\t\tserialization.from(Arrays.asList(order, order), \"orders\").include(\"items\").serialize();\n\n\t\tassertThat(result(), containsString(\"<items>\"));\n\t\tassertThat(result(), containsString(\"<name>name</name>\"));\n\t\tassertThat(result(), containsString(\"<price>12.99</price>\"));\n\t\tassertThat(result(), containsString(\"</items>\"));\n\t}", "signature": "void shouldIncludeFieldsFromACollection()", "full_signature": "@Test public void shouldIncludeFieldsFromACollection()", "class_method_signature": "XStreamXMLSerializationTest.shouldIncludeFieldsFromACollection()", "testcase": true, "constructor": false, "invocations": ["serialize", "include", "from", "asList", "assertThat", "result", "containsString", "assertThat", "result", "containsString", "assertThat", "result", "containsString", "assertThat", "result", "containsString"]}, "focal_class": {"identifier": "XStreamXMLSerialization", "superclass": "", "interfaces": "implements XMLSerialization", "fields": [{"original_string": "private final HttpServletResponse response;", "modifier": "private final", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private final XStreamBuilder builder;", "modifier": "private final", "type": "XStreamBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private final Environment environment;", "modifier": "private final", "type": "Environment", "declarator": "environment", "var_name": "environment"}, {"original_string": "private boolean indented;", "modifier": "private", "type": "boolean", "declarator": "indented", "var_name": "indented"}], "methods": [{"identifier": "XStreamXMLSerialization", "parameters": "()", "modifiers": "protected", "return": "", "signature": " XStreamXMLSerialization()", "full_signature": "protected  XStreamXMLSerialization()", "class_method_signature": "XStreamXMLSerialization.XStreamXMLSerialization()", "testcase": false, "constructor": true}, {"identifier": "XStreamXMLSerialization", "parameters": "(HttpServletResponse response, XStreamBuilder builder, Environment environment)", "modifiers": "@Inject public", "return": "", "signature": " XStreamXMLSerialization(HttpServletResponse response, XStreamBuilder builder, Environment environment)", "full_signature": "@Inject public  XStreamXMLSerialization(HttpServletResponse response, XStreamBuilder builder, Environment environment)", "class_method_signature": "XStreamXMLSerialization.XStreamXMLSerialization(HttpServletResponse response, XStreamBuilder builder, Environment environment)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct protected void init()", "class_method_signature": "XStreamXMLSerialization.init()", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(String format)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(String format)", "full_signature": "@Override public boolean accepts(String format)", "class_method_signature": "XStreamXMLSerialization.accepts(String format)", "testcase": false, "constructor": false}, {"identifier": "indented", "parameters": "()", "modifiers": "@Override public", "return": "XMLSerialization", "signature": "XMLSerialization indented()", "full_signature": "@Override public XMLSerialization indented()", "class_method_signature": "XStreamXMLSerialization.indented()", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(T object)", "modifiers": "@Override public", "return": "Serializer", "signature": "Serializer from(T object)", "full_signature": "@Override public Serializer from(T object)", "class_method_signature": "XStreamXMLSerialization.from(T object)", "testcase": false, "constructor": false}, {"identifier": "getSerializer", "parameters": "()", "modifiers": "protected", "return": "SerializerBuilder", "signature": "SerializerBuilder getSerializer()", "full_signature": "protected SerializerBuilder getSerializer()", "class_method_signature": "XStreamXMLSerialization.getSerializer()", "testcase": false, "constructor": false}, {"identifier": "getWriter", "parameters": "()", "modifiers": "protected", "return": "HierarchicalStreamWriter", "signature": "HierarchicalStreamWriter getWriter()", "full_signature": "protected HierarchicalStreamWriter getWriter()", "class_method_signature": "XStreamXMLSerialization.getWriter()", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(T object, String alias)", "modifiers": "@Override public", "return": "Serializer", "signature": "Serializer from(T object, String alias)", "full_signature": "@Override public Serializer from(T object, String alias)", "class_method_signature": "XStreamXMLSerialization.from(T object, String alias)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/serialization/xstream/XStreamXMLSerialization.java"}, "focal_method": {"identifier": "from", "parameters": "(T object)", "modifiers": "@Override public", "return": "Serializer", "body": "@Override\n\tpublic <T> Serializer from(T object) {\n\t\tresponse.setContentType(\"application/xml\");\n\t\treturn getSerializer().from(object);\n\t}", "signature": "Serializer from(T object)", "full_signature": "@Override public Serializer from(T object)", "class_method_signature": "XStreamXMLSerialization.from(T object)", "testcase": false, "constructor": false, "invocations": ["setContentType", "from", "getSerializer"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}