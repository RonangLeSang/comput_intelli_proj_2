{"test_class": {"identifier": "DefaultLogicResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private LogicResult logicResult;", "modifier": "private", "type": "LogicResult", "declarator": "logicResult", "var_name": "logicResult"}, {"original_string": "private @Mock Router router;", "modifier": "private @Mock", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private @Mock MutableResponse response;", "modifier": "private @Mock", "type": "MutableResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private @Mock MutableRequest request;", "modifier": "private @Mock", "type": "MutableRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private @Mock Container container;", "modifier": "private @Mock", "type": "Container", "declarator": "container", "var_name": "container"}, {"original_string": "private @Mock PathResolver resolver;", "modifier": "private @Mock", "type": "PathResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private @Mock TypeNameExtractor extractor;", "modifier": "private @Mock", "type": "TypeNameExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private @Mock RequestDispatcher dispatcher;", "modifier": "private @Mock", "type": "RequestDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private @Mock FlashScope flash;", "modifier": "private @Mock", "type": "FlashScope", "declarator": "flash", "var_name": "flash"}, {"original_string": "private Proxifier proxifier;", "modifier": "private", "type": "Proxifier", "declarator": "proxifier", "var_name": "proxifier"}, {"original_string": "private MethodInfo methodInfo;", "modifier": "private", "type": "MethodInfo", "declarator": "methodInfo", "var_name": "methodInfo"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/view/DefaultLogicResultTest.java"}, "test_case": {"identifier": "canRedirectWhenLogicMethodIsAnnotatedWithHttpGetMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void canRedirectWhenLogicMethodIsAnnotatedWithHttpGetMethod() throws Exception {\n\t\tlogicResult.redirectTo(MyComponent.class).annotatedWithGet();\n\n\t\tverify(response).sendRedirect(any(String.class));\n\t}", "signature": "void canRedirectWhenLogicMethodIsAnnotatedWithHttpGetMethod()", "full_signature": "@Test public void canRedirectWhenLogicMethodIsAnnotatedWithHttpGetMethod()", "class_method_signature": "DefaultLogicResultTest.canRedirectWhenLogicMethodIsAnnotatedWithHttpGetMethod()", "testcase": true, "constructor": false, "invocations": ["annotatedWithGet", "redirectTo", "sendRedirect", "verify", "any"]}, "focal_class": {"identifier": "DefaultLogicResult", "superclass": "", "interfaces": "implements LogicResult", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultLogicResult.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultLogicResult.class)", "var_name": "logger"}, {"original_string": "private final Proxifier proxifier;", "modifier": "private final", "type": "Proxifier", "declarator": "proxifier", "var_name": "proxifier"}, {"original_string": "private final Router router;", "modifier": "private final", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private final MutableRequest request;", "modifier": "private final", "type": "MutableRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private final HttpServletResponse response;", "modifier": "private final", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private final Container container;", "modifier": "private final", "type": "Container", "declarator": "container", "var_name": "container"}, {"original_string": "private final PathResolver resolver;", "modifier": "private final", "type": "PathResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private final TypeNameExtractor extractor;", "modifier": "private final", "type": "TypeNameExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private final FlashScope flash;", "modifier": "private final", "type": "FlashScope", "declarator": "flash", "var_name": "flash"}, {"original_string": "private final MethodInfo methodInfo;", "modifier": "private final", "type": "MethodInfo", "declarator": "methodInfo", "var_name": "methodInfo"}], "methods": [{"identifier": "DefaultLogicResult", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultLogicResult()", "full_signature": "protected  DefaultLogicResult()", "class_method_signature": "DefaultLogicResult.DefaultLogicResult()", "testcase": false, "constructor": true}, {"identifier": "DefaultLogicResult", "parameters": "(Proxifier proxifier, Router router, MutableRequest request, HttpServletResponse response,\n\t\t\tContainer container, PathResolver resolver, TypeNameExtractor extractor, FlashScope flash, MethodInfo methodInfo)", "modifiers": "@Inject public", "return": "", "signature": " DefaultLogicResult(Proxifier proxifier, Router router, MutableRequest request, HttpServletResponse response,\n\t\t\tContainer container, PathResolver resolver, TypeNameExtractor extractor, FlashScope flash, MethodInfo methodInfo)", "full_signature": "@Inject public  DefaultLogicResult(Proxifier proxifier, Router router, MutableRequest request, HttpServletResponse response,\n\t\t\tContainer container, PathResolver resolver, TypeNameExtractor extractor, FlashScope flash, MethodInfo methodInfo)", "class_method_signature": "DefaultLogicResult.DefaultLogicResult(Proxifier proxifier, Router router, MutableRequest request, HttpServletResponse response,\n\t\t\tContainer container, PathResolver resolver, TypeNameExtractor extractor, FlashScope flash, MethodInfo methodInfo)", "testcase": false, "constructor": true}, {"identifier": "forwardTo", "parameters": "(final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T forwardTo(final Class<T> type)", "full_signature": "@Override public T forwardTo(final Class<T> type)", "class_method_signature": "DefaultLogicResult.forwardTo(final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "redirectTo", "parameters": "(final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T redirectTo(final Class<T> type)", "full_signature": "@Override public T redirectTo(final Class<T> type)", "class_method_signature": "DefaultLogicResult.redirectTo(final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "includeParametersInFlash", "parameters": "(final Class<T> type, Method method, Object[] args)", "modifiers": "protected", "return": "void", "signature": "void includeParametersInFlash(final Class<T> type, Method method, Object[] args)", "full_signature": "protected void includeParametersInFlash(final Class<T> type, Method method, Object[] args)", "class_method_signature": "DefaultLogicResult.includeParametersInFlash(final Class<T> type, Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "acceptsHttpGet", "parameters": "(Method method)", "modifiers": "protected", "return": "boolean", "signature": "boolean acceptsHttpGet(Method method)", "full_signature": "protected boolean acceptsHttpGet(Method method)", "class_method_signature": "DefaultLogicResult.acceptsHttpGet(Method method)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/view/DefaultLogicResult.java"}, "focal_method": {"identifier": "redirectTo", "parameters": "(final Class<T> type)", "modifiers": "@Override public", "return": "T", "body": "@Override\n\tpublic <T> T redirectTo(final Class<T> type) {\n\t\tlogger.debug(\"redirecting to class {}\", type.getSimpleName());\n\n\t\treturn proxifier.proxify(type, new MethodInvocation<T>() {\n\t\t\t@Override\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tcheckArgument(acceptsHttpGet(method), \"Your logic method must accept HTTP GET method if you want to redirect to it\");\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tString url = router.urlFor(type, method, args);\n\t\t\t\t\tString path = request.getContextPath() + url;\n\t\t\t\t\tincludeParametersInFlash(type, method, args);\n\n\t\t\t\t\tlogger.debug(\"redirecting to {}\", path);\n\t\t\t\t\tresponse.sendRedirect(path);\n\t\t\t\t\treturn null;\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new ProxyInvocationException(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\t}", "signature": "T redirectTo(final Class<T> type)", "full_signature": "@Override public T redirectTo(final Class<T> type)", "class_method_signature": "DefaultLogicResult.redirectTo(final Class<T> type)", "testcase": false, "constructor": false, "invocations": ["debug", "getSimpleName", "proxify", "checkArgument", "acceptsHttpGet", "urlFor", "getContextPath", "includeParametersInFlash", "debug", "sendRedirect"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}