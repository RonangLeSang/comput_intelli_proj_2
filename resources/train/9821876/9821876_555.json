{"test_class": {"identifier": "DoubleConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private DoubleConverter converter;", "modifier": "private", "type": "DoubleConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private @Mock MutableRequest request;", "modifier": "private @Mock", "type": "MutableRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private @Mock HttpSession session;", "modifier": "private @Mock", "type": "HttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "private @Mock ServletContext context;", "modifier": "private @Mock", "type": "ServletContext", "declarator": "context", "var_name": "context"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/converter/DoubleConverterTest.java"}, "test_case": {"identifier": "shouldBeAbleToConvertWithGroupingAndENUS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldBeAbleToConvertWithGroupingAndENUS() {\n\t\tconverter = new DoubleConverter(new Locale(\"en\", \"US\"));\n\t\tassertThat(converter.convert(\"1,000,000.00\", Double.class), is(equalTo(new Double(\"1000000.00\"))));\n\t\tassertThat(converter.convert(\"1,001,000.01\", Double.class), is(equalTo(new Double(\"1001000.01\"))));\n\t}", "signature": "void shouldBeAbleToConvertWithGroupingAndENUS()", "full_signature": "@Test public void shouldBeAbleToConvertWithGroupingAndENUS()", "class_method_signature": "DoubleConverterTest.shouldBeAbleToConvertWithGroupingAndENUS()", "testcase": true, "constructor": false, "invocations": ["assertThat", "convert", "is", "equalTo", "assertThat", "convert", "is", "equalTo"]}, "focal_class": {"identifier": "DoubleConverter", "superclass": "", "interfaces": "implements Converter<Double>", "fields": [{"original_string": "public static final String INVALID_MESSAGE_KEY = \"is_not_a_valid_number\";", "modifier": "public static final", "type": "String", "declarator": "INVALID_MESSAGE_KEY = \"is_not_a_valid_number\"", "var_name": "INVALID_MESSAGE_KEY"}, {"original_string": "private final Locale locale;", "modifier": "private final", "type": "Locale", "declarator": "locale", "var_name": "locale"}], "methods": [{"identifier": "DoubleConverter", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DoubleConverter()", "full_signature": "protected  DoubleConverter()", "class_method_signature": "DoubleConverter.DoubleConverter()", "testcase": false, "constructor": true}, {"identifier": "DoubleConverter", "parameters": "(Locale locale)", "modifiers": "@Inject public", "return": "", "signature": " DoubleConverter(Locale locale)", "full_signature": "@Inject public  DoubleConverter(Locale locale)", "class_method_signature": "DoubleConverter.DoubleConverter(Locale locale)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(String value, Class<? extends Double> type)", "modifiers": "@Override public", "return": "Double", "signature": "Double convert(String value, Class<? extends Double> type)", "full_signature": "@Override public Double convert(String value, Class<? extends Double> type)", "class_method_signature": "DoubleConverter.convert(String value, Class<? extends Double> type)", "testcase": false, "constructor": false}, {"identifier": "getNumberFormat", "parameters": "()", "modifiers": "protected", "return": "NumberFormat", "signature": "NumberFormat getNumberFormat()", "full_signature": "protected NumberFormat getNumberFormat()", "class_method_signature": "DoubleConverter.getNumberFormat()", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/converter/DoubleConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, Class<? extends Double> type)", "modifiers": "@Override public", "return": "Double", "body": "@Override\n\tpublic Double convert(String value, Class<? extends Double> type) {\n\t\tif (isNullOrEmpty(value)) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn getNumberFormat().parse(value).doubleValue();\n\t\t} catch (ParseException e) {\n\t\t\tthrow new ConversionException(new ConversionMessage(INVALID_MESSAGE_KEY, value));\n\t\t}\n\t}", "signature": "Double convert(String value, Class<? extends Double> type)", "full_signature": "@Override public Double convert(String value, Class<? extends Double> type)", "class_method_signature": "DoubleConverter.convert(String value, Class<? extends Double> type)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "doubleValue", "parse", "getNumberFormat"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}