{"test_class": {"identifier": "CDIProxiesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject private AnyProxiableBean proxiable;", "modifier": "@Inject private", "type": "AnyProxiableBean", "declarator": "proxiable", "var_name": "proxiable"}, {"original_string": "@Inject private NonProxiableBean nonProxiable;", "modifier": "@Inject private", "type": "NonProxiableBean", "declarator": "nonProxiable", "var_name": "nonProxiable"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/proxy/CDIProxiesTest.java"}, "test_case": {"identifier": "shoulIdentifyCDIProxies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shoulIdentifyCDIProxies() {\n\t\tassertTrue(isCDIProxy(proxiable.getClass()));\n\t\tassertFalse(isCDIProxy(nonProxiable.getClass()));\n\t}", "signature": "void shoulIdentifyCDIProxies()", "full_signature": "@Test public void shoulIdentifyCDIProxies()", "class_method_signature": "CDIProxiesTest.shoulIdentifyCDIProxies()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isCDIProxy", "getClass", "assertFalse", "isCDIProxy", "getClass"]}, "focal_class": {"identifier": "CDIProxies", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CDIProxies", "parameters": "()", "modifiers": "private", "return": "", "signature": " CDIProxies()", "full_signature": "private  CDIProxies()", "class_method_signature": "CDIProxies.CDIProxies()", "testcase": false, "constructor": true}, {"identifier": "isCDIProxy", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCDIProxy(Class<?> type)", "full_signature": "public static boolean isCDIProxy(Class<?> type)", "class_method_signature": "CDIProxies.isCDIProxy(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "extractRawTypeIfPossible", "parameters": "(Class<T> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> extractRawTypeIfPossible(Class<T> type)", "full_signature": "public static Class<?> extractRawTypeIfPossible(Class<T> type)", "class_method_signature": "CDIProxies.extractRawTypeIfPossible(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "unproxifyIfPossible", "parameters": "(T source)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public static", "return": "T", "signature": "T unproxifyIfPossible(T source)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public static T unproxifyIfPossible(T source)", "class_method_signature": "CDIProxies.unproxifyIfPossible(T source)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/proxy/CDIProxies.java"}, "focal_method": {"identifier": "isCDIProxy", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isCDIProxy(Class<?> type) {\n\t\treturn ProxyObject.class.isAssignableFrom(type);\n\t}", "signature": "boolean isCDIProxy(Class<?> type)", "full_signature": "public static boolean isCDIProxy(Class<?> type)", "class_method_signature": "CDIProxies.isCDIProxy(Class<?> type)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}