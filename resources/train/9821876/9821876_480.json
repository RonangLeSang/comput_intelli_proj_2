{"test_class": {"identifier": "DefaultValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Message A_MESSAGE = new SimpleMessage(\"\", \"\");", "modifier": "private static final", "type": "Message", "declarator": "A_MESSAGE = new SimpleMessage(\"\", \"\")", "var_name": "A_MESSAGE"}, {"original_string": "private @Mock Result result = new MockResult();", "modifier": "private @Mock", "type": "Result", "declarator": "result = new MockResult()", "var_name": "result"}, {"original_string": "private @Mock LogicResult logicResult;", "modifier": "private @Mock", "type": "LogicResult", "declarator": "logicResult", "var_name": "logicResult"}, {"original_string": "private @Mock PageResult pageResult;", "modifier": "private @Mock", "type": "PageResult", "declarator": "pageResult", "var_name": "pageResult"}, {"original_string": "private @Mock Outjector outjector;", "modifier": "private @Mock", "type": "Outjector", "declarator": "outjector", "var_name": "outjector"}, {"original_string": "private @Mock MyComponent instance;", "modifier": "private @Mock", "type": "MyComponent", "declarator": "instance", "var_name": "instance"}, {"original_string": "private DefaultValidator validator;", "modifier": "private", "type": "DefaultValidator", "declarator": "validator", "var_name": "validator"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/validator/DefaultValidatorTest.java"}, "test_case": {"identifier": "addsTheErrorsOnTheResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void addsTheErrorsOnTheResult() {\n\t\ttry {\n\t\t\tvalidator.add(A_MESSAGE);\n\t\t\tvalidator.onErrorForwardTo(MyComponent.class).logic();\n\t\t} catch (ValidationException e) {\n\t\t}\n\t\tverify(result).include(eq(\"errors\"), argThat(is(not(empty()))));\n\t}", "signature": "void addsTheErrorsOnTheResult()", "full_signature": "@Test public void addsTheErrorsOnTheResult()", "class_method_signature": "DefaultValidatorTest.addsTheErrorsOnTheResult()", "testcase": true, "constructor": false, "invocations": ["add", "logic", "onErrorForwardTo", "include", "verify", "eq", "argThat", "is", "not", "empty"]}, "focal_class": {"identifier": "DefaultValidator", "superclass": "extends AbstractValidator", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultValidator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultValidator.class)", "var_name": "logger"}, {"original_string": "private final Result result;", "modifier": "private final", "type": "Result", "declarator": "result", "var_name": "result"}, {"original_string": "private final ValidationViewsFactory viewsFactory;", "modifier": "private final", "type": "ValidationViewsFactory", "declarator": "viewsFactory", "var_name": "viewsFactory"}, {"original_string": "private final Outjector outjector;", "modifier": "private final", "type": "Outjector", "declarator": "outjector", "var_name": "outjector"}, {"original_string": "private final Proxifier proxifier;", "modifier": "private final", "type": "Proxifier", "declarator": "proxifier", "var_name": "proxifier"}, {"original_string": "private final ResourceBundle bundle;", "modifier": "private final", "type": "ResourceBundle", "declarator": "bundle", "var_name": "bundle"}, {"original_string": "private final javax.validation.Validator bvalidator;", "modifier": "private final", "type": "javax.validation.Validator", "declarator": "bvalidator", "var_name": "bvalidator"}, {"original_string": "private final MessageInterpolator interpolator;", "modifier": "private final", "type": "MessageInterpolator", "declarator": "interpolator", "var_name": "interpolator"}, {"original_string": "private final Locale locale;", "modifier": "private final", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "private final Messages messages;", "modifier": "private final", "type": "Messages", "declarator": "messages", "var_name": "messages"}], "methods": [{"identifier": "DefaultValidator", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultValidator()", "full_signature": "protected  DefaultValidator()", "class_method_signature": "DefaultValidator.DefaultValidator()", "testcase": false, "constructor": true}, {"identifier": "DefaultValidator", "parameters": "(Result result, ValidationViewsFactory factory, Outjector outjector, Proxifier proxifier, \n\t\t\tResourceBundle bundle, javax.validation.Validator bvalidator, MessageInterpolator interpolator, Locale locale,\n\t\t\tMessages messages)", "modifiers": "@Inject public", "return": "", "signature": " DefaultValidator(Result result, ValidationViewsFactory factory, Outjector outjector, Proxifier proxifier, \n\t\t\tResourceBundle bundle, javax.validation.Validator bvalidator, MessageInterpolator interpolator, Locale locale,\n\t\t\tMessages messages)", "full_signature": "@Inject public  DefaultValidator(Result result, ValidationViewsFactory factory, Outjector outjector, Proxifier proxifier, \n\t\t\tResourceBundle bundle, javax.validation.Validator bvalidator, MessageInterpolator interpolator, Locale locale,\n\t\t\tMessages messages)", "class_method_signature": "DefaultValidator.DefaultValidator(Result result, ValidationViewsFactory factory, Outjector outjector, Proxifier proxifier, \n\t\t\tResourceBundle bundle, javax.validation.Validator bvalidator, MessageInterpolator interpolator, Locale locale,\n\t\t\tMessages messages)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "(boolean condition, Message message)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator check(boolean condition, Message message)", "full_signature": "@Override public Validator check(boolean condition, Message message)", "class_method_signature": "DefaultValidator.check(boolean condition, Message message)", "testcase": false, "constructor": false}, {"identifier": "ensure", "parameters": "(boolean expression, Message message)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator ensure(boolean expression, Message message)", "full_signature": "@Override public Validator ensure(boolean expression, Message message)", "class_method_signature": "DefaultValidator.ensure(boolean expression, Message message)", "testcase": false, "constructor": false}, {"identifier": "addIf", "parameters": "(boolean expression, Message message)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator addIf(boolean expression, Message message)", "full_signature": "@Override public Validator addIf(boolean expression, Message message)", "class_method_signature": "DefaultValidator.addIf(boolean expression, Message message)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object object, Class<?>... groups)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator validate(Object object, Class<?>... groups)", "full_signature": "@Override public Validator validate(Object object, Class<?>... groups)", "class_method_signature": "DefaultValidator.validate(Object object, Class<?>... groups)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String alias, Object object, Class<?>... groups)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator validate(String alias, Object object, Class<?>... groups)", "full_signature": "@Override public Validator validate(String alias, Object object, Class<?>... groups)", "class_method_signature": "DefaultValidator.validate(String alias, Object object, Class<?>... groups)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Message message)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator add(Message message)", "full_signature": "@Override public Validator add(Message message)", "class_method_signature": "DefaultValidator.add(Message message)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends Message> messages)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator addAll(Collection<? extends Message> messages)", "full_signature": "@Override public Validator addAll(Collection<? extends Message> messages)", "class_method_signature": "DefaultValidator.addAll(Collection<? extends Message> messages)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Set<ConstraintViolation<T>>  errors)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator addAll(Set<ConstraintViolation<T>>  errors)", "full_signature": "@Override public Validator addAll(Set<ConstraintViolation<T>>  errors)", "class_method_signature": "DefaultValidator.addAll(Set<ConstraintViolation<T>>  errors)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(String alias, Set<ConstraintViolation<T>> errors)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator addAll(String alias, Set<ConstraintViolation<T>> errors)", "full_signature": "@Override public Validator addAll(String alias, Set<ConstraintViolation<T>> errors)", "class_method_signature": "DefaultValidator.addAll(String alias, Set<ConstraintViolation<T>> errors)", "testcase": false, "constructor": false}, {"identifier": "onErrorUse", "parameters": "(Class<T> view)", "modifiers": "@Override public", "return": "T", "signature": "T onErrorUse(Class<T> view)", "full_signature": "@Override public T onErrorUse(Class<T> view)", "class_method_signature": "DefaultValidator.onErrorUse(Class<T> view)", "testcase": false, "constructor": false}, {"identifier": "hasErrors", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasErrors()", "full_signature": "@Override public boolean hasErrors()", "class_method_signature": "DefaultValidator.hasErrors()", "testcase": false, "constructor": false}, {"identifier": "getErrors", "parameters": "()", "modifiers": "@Override public", "return": "List<Message>", "signature": "List<Message> getErrors()", "full_signature": "@Override public List<Message> getErrors()", "class_method_signature": "DefaultValidator.getErrors()", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/validator/DefaultValidator.java"}, "focal_method": {"identifier": "add", "parameters": "(Message message)", "modifiers": "@Override public", "return": "Validator", "body": "@Override\n\tpublic Validator add(Message message) {\n\t\tmessage.setBundle(bundle);\n\t\tmessages.add(message);\n\t\treturn this;\n\t}", "signature": "Validator add(Message message)", "full_signature": "@Override public Validator add(Message message)", "class_method_signature": "DefaultValidator.add(Message message)", "testcase": false, "constructor": false, "invocations": ["setBundle", "add"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}