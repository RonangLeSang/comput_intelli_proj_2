{"test_class": {"identifier": "DefaultControllerTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private @Mock Router router;", "modifier": "private @Mock", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private @Mock HttpServletRequest request;", "modifier": "private @Mock", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private @Mock ControllerMethod method;", "modifier": "private @Mock", "type": "ControllerMethod", "declarator": "method", "var_name": "method"}, {"original_string": "private VRaptorRequest webRequest;", "modifier": "private", "type": "VRaptorRequest", "declarator": "webRequest", "var_name": "webRequest"}, {"original_string": "private DefaultControllerTranslator translator;", "modifier": "private", "type": "DefaultControllerTranslator", "declarator": "translator", "var_name": "translator"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/http/DefaultControllerTranslatorTest.java"}, "test_case": {"identifier": "shouldThrowExceptionWhenRequestANotKnownMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldThrowExceptionWhenRequestANotKnownMethod() {\n\t\texception.expect(MethodNotAllowedException.class);\n\t\texception.expectMessage(\"Method COOK is not allowed for requested URI. Allowed Methods are [GET, POST]\");\n\t\t\n\t\twhen(request.getRequestURI()).thenReturn(\"/url\");\n\t\twhen(request.getMethod()).thenReturn(\"COOK\");\n\t\twhen(router.parse(anyString(), any(HttpMethod.class), any(MutableRequest.class))).thenReturn(method);\n\t\twhen(router.allowedMethodsFor(\"/url\")).thenReturn(EnumSet.of(HttpMethod.GET, HttpMethod.POST));\n\n\t\ttranslator.translate(webRequest);\n\t}", "signature": "void shouldThrowExceptionWhenRequestANotKnownMethod()", "full_signature": "@Test public void shouldThrowExceptionWhenRequestANotKnownMethod()", "class_method_signature": "DefaultControllerTranslatorTest.shouldThrowExceptionWhenRequestANotKnownMethod()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "thenReturn", "when", "getRequestURI", "thenReturn", "when", "getMethod", "thenReturn", "when", "parse", "anyString", "any", "any", "thenReturn", "when", "allowedMethodsFor", "of", "translate"]}, "focal_class": {"identifier": "DefaultControllerTranslator", "superclass": "", "interfaces": "implements UrlToControllerTranslator", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(DefaultControllerTranslator.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultControllerTranslator.class)", "var_name": "logger"}, {"original_string": "private final Router router;", "modifier": "private final", "type": "Router", "declarator": "router", "var_name": "router"}], "methods": [{"identifier": "DefaultControllerTranslator", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultControllerTranslator()", "full_signature": "protected  DefaultControllerTranslator()", "class_method_signature": "DefaultControllerTranslator.DefaultControllerTranslator()", "testcase": false, "constructor": true}, {"identifier": "DefaultControllerTranslator", "parameters": "(Router router)", "modifiers": "@Inject public", "return": "", "signature": " DefaultControllerTranslator(Router router)", "full_signature": "@Inject public  DefaultControllerTranslator(Router router)", "class_method_signature": "DefaultControllerTranslator.DefaultControllerTranslator(Router router)", "testcase": false, "constructor": true}, {"identifier": "translate", "parameters": "(MutableRequest request)", "modifiers": "@Override public", "return": "ControllerMethod", "signature": "ControllerMethod translate(MutableRequest request)", "full_signature": "@Override public ControllerMethod translate(MutableRequest request)", "class_method_signature": "DefaultControllerTranslator.translate(MutableRequest request)", "testcase": false, "constructor": false}, {"identifier": "getHttpMethod", "parameters": "(MutableRequest request, String controllerName)", "modifiers": "private", "return": "HttpMethod", "signature": "HttpMethod getHttpMethod(MutableRequest request, String controllerName)", "full_signature": "private HttpMethod getHttpMethod(MutableRequest request, String controllerName)", "class_method_signature": "DefaultControllerTranslator.getHttpMethod(MutableRequest request, String controllerName)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/http/DefaultControllerTranslator.java"}, "focal_method": {"identifier": "translate", "parameters": "(MutableRequest request)", "modifiers": "@Override public", "return": "ControllerMethod", "body": "@Override\n\tpublic ControllerMethod translate(MutableRequest request) {\n\t\tString controllerName = request.getRequestedUri();\n\n\t\tlogger.debug(\"trying to access {}\", controllerName);\n\n\t\tHttpMethod method = getHttpMethod(request, controllerName);\n\t\tControllerMethod controller = router.parse(controllerName, method, request);\n\n\t\tlogger.debug(\"found controller {}\", controller);\n\t\treturn controller;\n\t}", "signature": "ControllerMethod translate(MutableRequest request)", "full_signature": "@Override public ControllerMethod translate(MutableRequest request)", "class_method_signature": "DefaultControllerTranslator.translate(MutableRequest request)", "testcase": false, "constructor": false, "invocations": ["getRequestedUri", "debug", "getHttpMethod", "parse", "debug"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}