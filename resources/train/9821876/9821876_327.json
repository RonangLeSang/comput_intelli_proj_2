{"test_class": {"identifier": "LinkToHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private @Mock ServletContext context;", "modifier": "private @Mock", "type": "ServletContext", "declarator": "context", "var_name": "context"}, {"original_string": "private @Mock Router router;", "modifier": "private @Mock", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private LinkToHandler handler;", "modifier": "private", "type": "LinkToHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private Method method2params;", "modifier": "private", "type": "Method", "declarator": "method2params", "var_name": "method2params"}, {"original_string": "private Method method1param;", "modifier": "private", "type": "Method", "declarator": "method1param", "var_name": "method1param"}, {"original_string": "private Method anotherMethod;", "modifier": "private", "type": "Method", "declarator": "anotherMethod", "var_name": "anotherMethod"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/view/LinkToHandlerTest.java"}, "test_case": {"identifier": "shouldReturnWantedUrlWithoutArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldReturnWantedUrlWithoutArgs() throws Throwable {\n\t\twhen(router.urlFor(TestController.class, anotherMethod, new Object[2])).thenReturn(\"/expectedURL\");\n\n\t\t//${linkTo[TestController].anotherMethod()}\n\t\tString uri = invoke(handler.get(new DefaultBeanClass(TestController.class)), \"anotherMethod\");\n\t\tassertThat(uri, is(\"/path/expectedURL\"));\n\t}", "signature": "void shouldReturnWantedUrlWithoutArgs()", "full_signature": "@Test public void shouldReturnWantedUrlWithoutArgs()", "class_method_signature": "LinkToHandlerTest.shouldReturnWantedUrlWithoutArgs()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "urlFor", "invoke", "get", "assertThat", "is"]}, "focal_class": {"identifier": "LinkToHandler", "superclass": "extends ForwardingMap<Class<?>, Object>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LinkToHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LinkToHandler.class)", "var_name": "logger"}, {"original_string": "private final ServletContext context;", "modifier": "private final", "type": "ServletContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final Router router;", "modifier": "private final", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private final Proxifier proxifier;", "modifier": "private final", "type": "Proxifier", "declarator": "proxifier", "var_name": "proxifier"}, {"original_string": "private final ReflectionProvider reflectionProvider;", "modifier": "private final", "type": "ReflectionProvider", "declarator": "reflectionProvider", "var_name": "reflectionProvider"}, {"original_string": "private final ConcurrentMap<Class<?>, Class<?>> interfaces = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<Class<?>, Class<?>>", "declarator": "interfaces = new ConcurrentHashMap<>()", "var_name": "interfaces"}, {"original_string": "private final Lock lock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}], "methods": [{"identifier": "LinkToHandler", "parameters": "()", "modifiers": "protected", "return": "", "signature": " LinkToHandler()", "full_signature": "protected  LinkToHandler()", "class_method_signature": "LinkToHandler.LinkToHandler()", "testcase": false, "constructor": true}, {"identifier": "LinkToHandler", "parameters": "(ServletContext context, Router router, Proxifier proxifier, ReflectionProvider reflectionProvider)", "modifiers": "@Inject public", "return": "", "signature": " LinkToHandler(ServletContext context, Router router, Proxifier proxifier, ReflectionProvider reflectionProvider)", "full_signature": "@Inject public  LinkToHandler(ServletContext context, Router router, Proxifier proxifier, ReflectionProvider reflectionProvider)", "class_method_signature": "LinkToHandler.LinkToHandler(ServletContext context, Router router, Proxifier proxifier, ReflectionProvider reflectionProvider)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void start()", "full_signature": "@PostConstruct public void start()", "class_method_signature": "LinkToHandler.start()", "testcase": false, "constructor": false}, {"identifier": "delegate", "parameters": "()", "modifiers": "@Override protected", "return": "Map<Class<?>, Object>", "signature": "Map<Class<?>, Object> delegate()", "full_signature": "@Override protected Map<Class<?>, Object> delegate()", "class_method_signature": "LinkToHandler.delegate()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(Object key)", "full_signature": "@Override public Object get(Object key)", "class_method_signature": "LinkToHandler.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "linker", "parameters": "(final Class<?> controller,\n\t\t\tString methodName, List<Object> params)", "modifiers": "protected", "return": "Linker", "signature": "Linker linker(final Class<?> controller,\n\t\t\tString methodName, List<Object> params)", "full_signature": "protected Linker linker(final Class<?> controller,\n\t\t\tString methodName, List<Object> params)", "class_method_signature": "LinkToHandler.linker(final Class<?> controller,\n\t\t\tString methodName, List<Object> params)", "testcase": false, "constructor": false}, {"identifier": "createLinkToInterface", "parameters": "(final Class<?> controller, String interfaceName)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> createLinkToInterface(final Class<?> controller, String interfaceName)", "full_signature": "private Class<?> createLinkToInterface(final Class<?> controller, String interfaceName)", "class_method_signature": "LinkToHandler.createLinkToInterface(final Class<?> controller, String interfaceName)", "testcase": false, "constructor": false}, {"identifier": "createParameters", "parameters": "(CtClass objectType, int num)", "modifiers": "private", "return": "CtClass[]", "signature": "CtClass[] createParameters(CtClass objectType, int num)", "full_signature": "private CtClass[] createParameters(CtClass objectType, int num)", "class_method_signature": "LinkToHandler.createParameters(CtClass objectType, int num)", "testcase": false, "constructor": false}, {"identifier": "getMethods", "parameters": "(Class<?> controller)", "modifiers": "private", "return": "List<Method>", "signature": "List<Method> getMethods(Class<?> controller)", "full_signature": "private List<Method> getMethods(Class<?> controller)", "class_method_signature": "LinkToHandler.getMethods(Class<?> controller)", "testcase": false, "constructor": false}, {"identifier": "removeGeneratedClasses", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void removeGeneratedClasses()", "full_signature": "@PreDestroy public void removeGeneratedClasses()", "class_method_signature": "LinkToHandler.removeGeneratedClasses()", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/view/LinkToHandler.java"}, "focal_method": {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object get(Object key) {\n\t\tlogger.debug(\"getting key {}\", key);\n\t\t\n\t\tBeanClass beanClass = (BeanClass) key;\n\t\tfinal Class<?> controller = beanClass.getType();\n\t\tClass<?> linkToInterface = interfaces.get(controller);\n\t\tif (linkToInterface == null) {\n\t\t\tlogger.debug(\"interface not found, creating one {}\", controller);\n\n\t\t\tlock.lock();\n\t\t\ttry {\n\t\t\t\tlinkToInterface = interfaces.get(controller);\n\t\t\t\tif (linkToInterface == null) {\n\t\t\t\t\tString path = context.getContextPath().replace('/', '$');\n\t\t\t\t\tString interfaceName = controller.getName() + \"$linkTo\" + path;\n\t\t\t\t\tlinkToInterface = createLinkToInterface(controller, interfaceName);\n\t\t\t\t\tinterfaces.put(controller, linkToInterface);\n\n\t\t\t\t\tlogger.debug(\"created interface {} to {}\", interfaceName, controller);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tlock.unlock();\n\t\t\t}\n\t\t}\n\n\t\treturn proxifier.proxify(linkToInterface, new MethodInvocation<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tString methodName = StringUtils.decapitalize(method.getName().replaceFirst(\"^get\", \"\"));\n\t\t\t\tList<Object> params = args.length == 0 ? Collections.emptyList() : Arrays.asList(args);\n\t\t\t\treturn linker(controller, methodName, params).getLink();\n\t\t\t}\n\n\t\t});\n\t}", "signature": "Object get(Object key)", "full_signature": "@Override public Object get(Object key)", "class_method_signature": "LinkToHandler.get(Object key)", "testcase": false, "constructor": false, "invocations": ["debug", "getType", "get", "debug", "lock", "get", "replace", "getContextPath", "getName", "createLinkToInterface", "put", "debug", "unlock", "proxify", "decapitalize", "replaceFirst", "getName", "emptyList", "asList", "getLink", "linker"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}