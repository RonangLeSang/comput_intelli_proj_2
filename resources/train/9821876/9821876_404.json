{"test_class": {"identifier": "DefaultPageResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private @Mock MutableRequest request;", "modifier": "private @Mock", "type": "MutableRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private @Mock MutableResponse response;", "modifier": "private @Mock", "type": "MutableResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private @Mock RequestDispatcher dispatcher;", "modifier": "private @Mock", "type": "RequestDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private Proxifier proxifier;", "modifier": "private", "type": "Proxifier", "declarator": "proxifier", "var_name": "proxifier"}, {"original_string": "private ControllerMethod method;", "modifier": "private", "type": "ControllerMethod", "declarator": "method", "var_name": "method"}, {"original_string": "private PathResolver fixedResolver;", "modifier": "private", "type": "PathResolver", "declarator": "fixedResolver", "var_name": "fixedResolver"}, {"original_string": "private MethodInfo methodInfo;", "modifier": "private", "type": "MethodInfo", "declarator": "methodInfo", "var_name": "methodInfo"}, {"original_string": "private DefaultPageResult view;", "modifier": "private", "type": "DefaultPageResult", "declarator": "view", "var_name": "view"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/view/DefaultPageResultTest.java"}, "test_case": {"identifier": "shouldThrowResultExceptionIfIOExceptionOccursWhileForwarding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldThrowResultExceptionIfIOExceptionOccursWhileForwarding() throws Exception {\n\t\texception.expect(ResultException.class);\n\n\t\twhen(request.getRequestDispatcher(anyString())).thenReturn(dispatcher);\n\t\tdoThrow(new IOException()).when(dispatcher).forward(request, response);\n\n\t\tview.forwardTo(\"/any/url\");\n\t}", "signature": "void shouldThrowResultExceptionIfIOExceptionOccursWhileForwarding()", "full_signature": "@Test public void shouldThrowResultExceptionIfIOExceptionOccursWhileForwarding()", "class_method_signature": "DefaultPageResultTest.shouldThrowResultExceptionIfIOExceptionOccursWhileForwarding()", "testcase": true, "constructor": false, "invocations": ["expect", "thenReturn", "when", "getRequestDispatcher", "anyString", "forward", "when", "doThrow", "forwardTo"]}, "focal_class": {"identifier": "DefaultPageResult", "superclass": "", "interfaces": "implements PageResult", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultPageResult.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultPageResult.class)", "var_name": "logger"}, {"original_string": "private final MutableRequest request;", "modifier": "private final", "type": "MutableRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private final MutableResponse response;", "modifier": "private final", "type": "MutableResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private final PathResolver resolver;", "modifier": "private final", "type": "PathResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private final Proxifier proxifier;", "modifier": "private final", "type": "Proxifier", "declarator": "proxifier", "var_name": "proxifier"}, {"original_string": "private final MethodInfo methodInfo;", "modifier": "private final", "type": "MethodInfo", "declarator": "methodInfo", "var_name": "methodInfo"}], "methods": [{"identifier": "DefaultPageResult", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultPageResult()", "full_signature": "protected  DefaultPageResult()", "class_method_signature": "DefaultPageResult.DefaultPageResult()", "testcase": false, "constructor": true}, {"identifier": "DefaultPageResult", "parameters": "(MutableRequest req, MutableResponse res, MethodInfo methodInfo,\n\t\t\tPathResolver resolver, Proxifier proxifier)", "modifiers": "@Inject public", "return": "", "signature": " DefaultPageResult(MutableRequest req, MutableResponse res, MethodInfo methodInfo,\n\t\t\tPathResolver resolver, Proxifier proxifier)", "full_signature": "@Inject public  DefaultPageResult(MutableRequest req, MutableResponse res, MethodInfo methodInfo,\n\t\t\tPathResolver resolver, Proxifier proxifier)", "class_method_signature": "DefaultPageResult.DefaultPageResult(MutableRequest req, MutableResponse res, MethodInfo methodInfo,\n\t\t\tPathResolver resolver, Proxifier proxifier)", "testcase": false, "constructor": true}, {"identifier": "defaultView", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void defaultView()", "full_signature": "@Override public void defaultView()", "class_method_signature": "DefaultPageResult.defaultView()", "testcase": false, "constructor": false}, {"identifier": "include", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void include()", "full_signature": "@Override public void include()", "class_method_signature": "DefaultPageResult.include()", "testcase": false, "constructor": false}, {"identifier": "redirectTo", "parameters": "(String url)", "modifiers": "@Override public", "return": "void", "signature": "void redirectTo(String url)", "full_signature": "@Override public void redirectTo(String url)", "class_method_signature": "DefaultPageResult.redirectTo(String url)", "testcase": false, "constructor": false}, {"identifier": "forwardTo", "parameters": "(String url)", "modifiers": "@Override public", "return": "void", "signature": "void forwardTo(String url)", "full_signature": "@Override public void forwardTo(String url)", "class_method_signature": "DefaultPageResult.forwardTo(String url)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final Class<T> controllerType)", "modifiers": "@Override public", "return": "T", "signature": "T of(final Class<T> controllerType)", "full_signature": "@Override public T of(final Class<T> controllerType)", "class_method_signature": "DefaultPageResult.of(final Class<T> controllerType)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/view/DefaultPageResult.java"}, "focal_method": {"identifier": "forwardTo", "parameters": "(String url)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void forwardTo(String url) {\n\t\tlogger.debug(\"forwarding to {}\", url);\n\n\t\ttry {\n\t\t\trequest.getRequestDispatcher(url).forward(request, response);\n\t\t} catch (ServletException | IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}", "signature": "void forwardTo(String url)", "full_signature": "@Override public void forwardTo(String url)", "class_method_signature": "DefaultPageResult.forwardTo(String url)", "testcase": false, "constructor": false, "invocations": ["debug", "forward", "getRequestDispatcher"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}