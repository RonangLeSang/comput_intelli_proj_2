{"test_class": {"identifier": "DefaultParametersControlTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private @Mock MutableRequest request;", "modifier": "private @Mock", "type": "MutableRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private @Mock Converters converters;", "modifier": "private @Mock", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "private @Mock TwoWayConverter converter;", "modifier": "private @Mock", "type": "TwoWayConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private @Mock EncodingHandler encodingHandler;", "modifier": "private @Mock", "type": "EncodingHandler", "declarator": "encodingHandler", "var_name": "encodingHandler"}, {"original_string": "private Evaluator evaluator;", "modifier": "private", "type": "Evaluator", "declarator": "evaluator", "var_name": "evaluator"}, {"original_string": "private ParameterNameProvider nameProvider;", "modifier": "private", "type": "ParameterNameProvider", "declarator": "nameProvider", "var_name": "nameProvider"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/http/route/DefaultParametersControlTest.java"}, "test_case": {"identifier": "shouldTranslatePatternArgsWithMultipleRegexes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldTranslatePatternArgsWithMultipleRegexes() throws Exception {\n\t\tMethod method = Controller.class.getDeclaredMethod(\"mregex\", String.class, String.class, String.class);\n\t\t\n\t\tString uri = getDefaultParameterControlForUrl(\"/test/{hash1:[a-z0-9]{16}}{id}{hash2:[a-z0-9]{16}}/\")\n\t\t\t\t.fillUri(nameProvider.parametersFor(method), \"0123456789abcdef\", \"1234\", \"fedcba9876543210\");\n\t\tassertThat(uri, is(equalTo(\"/test/0123456789abcdef1234fedcba9876543210/\")));\n\t}", "signature": "void shouldTranslatePatternArgsWithMultipleRegexes()", "full_signature": "@Test public void shouldTranslatePatternArgsWithMultipleRegexes()", "class_method_signature": "DefaultParametersControlTest.shouldTranslatePatternArgsWithMultipleRegexes()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "fillUri", "getDefaultParameterControlForUrl", "parametersFor", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "DefaultParametersControl", "superclass": "", "interfaces": "implements ParametersControl", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultParametersControl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultParametersControl.class)", "var_name": "logger"}, {"original_string": "private final List<String> parameters = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "parameters = new ArrayList<>()", "var_name": "parameters"}, {"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private final String originalPattern;", "modifier": "private final", "type": "String", "declarator": "originalPattern", "var_name": "originalPattern"}, {"original_string": "private final Converters converters;", "modifier": "private final", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "private final Evaluator evaluator;", "modifier": "private final", "type": "Evaluator", "declarator": "evaluator", "var_name": "evaluator"}, {"original_string": "private EncodingHandler encodingHandler;", "modifier": "private", "type": "EncodingHandler", "declarator": "encodingHandler", "var_name": "encodingHandler"}], "methods": [{"identifier": "DefaultParametersControl", "parameters": "(String originalPattern, Map<String, String> parameterPatterns, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "modifiers": "public", "return": "", "signature": " DefaultParametersControl(String originalPattern, Map<String, String> parameterPatterns, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "full_signature": "public  DefaultParametersControl(String originalPattern, Map<String, String> parameterPatterns, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "class_method_signature": "DefaultParametersControl.DefaultParametersControl(String originalPattern, Map<String, String> parameterPatterns, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "testcase": false, "constructor": true}, {"identifier": "DefaultParametersControl", "parameters": "(String originalPattern, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "modifiers": "public", "return": "", "signature": " DefaultParametersControl(String originalPattern, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "full_signature": "public  DefaultParametersControl(String originalPattern, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "class_method_signature": "DefaultParametersControl.DefaultParametersControl(String originalPattern, Converters converters, Evaluator evaluator, EncodingHandler encodingHandler)", "testcase": false, "constructor": true}, {"identifier": "compilePattern", "parameters": "(String originalPattern, Map<String, String> parameterPatterns)", "modifiers": "private", "return": "Pattern", "signature": "Pattern compilePattern(String originalPattern, Map<String, String> parameterPatterns)", "full_signature": "private Pattern compilePattern(String originalPattern, Map<String, String> parameterPatterns)", "class_method_signature": "DefaultParametersControl.compilePattern(String originalPattern, Map<String, String> parameterPatterns)", "testcase": false, "constructor": false}, {"identifier": "fillUri", "parameters": "(Parameter[] paramNames, Object... paramValues)", "modifiers": "@Override public", "return": "String", "signature": "String fillUri(Parameter[] paramNames, Object... paramValues)", "full_signature": "@Override public String fillUri(Parameter[] paramNames, Object... paramValues)", "class_method_signature": "DefaultParametersControl.fillUri(Parameter[] paramNames, Object... paramValues)", "testcase": false, "constructor": false}, {"identifier": "encodeParameter", "parameters": "(String parameter)", "modifiers": "private", "return": "String", "signature": "String encodeParameter(String parameter)", "full_signature": "private String encodeParameter(String parameter)", "class_method_signature": "DefaultParametersControl.encodeParameter(String parameter)", "testcase": false, "constructor": false}, {"identifier": "selectParam", "parameters": "(String key, Parameter[] paramNames, Object[] paramValues)", "modifiers": "private", "return": "Object", "signature": "Object selectParam(String key, Parameter[] paramNames, Object[] paramValues)", "full_signature": "private Object selectParam(String key, Parameter[] paramNames, Object[] paramValues)", "class_method_signature": "DefaultParametersControl.selectParam(String key, Parameter[] paramNames, Object[] paramValues)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String uri)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(String uri)", "full_signature": "@Override public boolean matches(String uri)", "class_method_signature": "DefaultParametersControl.matches(String uri)", "testcase": false, "constructor": false}, {"identifier": "fillIntoRequest", "parameters": "(String uri, MutableRequest request)", "modifiers": "@Override public", "return": "void", "signature": "void fillIntoRequest(String uri, MutableRequest request)", "full_signature": "@Override public void fillIntoRequest(String uri, MutableRequest request)", "class_method_signature": "DefaultParametersControl.fillIntoRequest(String uri, MutableRequest request)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(String[] values)", "modifiers": "@Override public", "return": "String", "signature": "String apply(String[] values)", "full_signature": "@Override public String apply(String[] values)", "class_method_signature": "DefaultParametersControl.apply(String[] values)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/DefaultParametersControl.java"}, "focal_method": {"identifier": "fillUri", "parameters": "(Parameter[] paramNames, Object... paramValues)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String fillUri(Parameter[] paramNames, Object... paramValues) {\n\t\tif (paramNames.length != paramValues.length) {\n\t\t\tString message = String.format(\"paramNames must have the same length as paramValues. Names: %s Values: %s\",\n\t\t\t\t\tArrays.toString(paramNames), Arrays.toString(paramValues));\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\n\t\tString[] splittedPatterns = StringUtils.extractParameters(originalPattern);\n\n\t\tString base = originalPattern;\n\t\tfor (int i=0; i<parameters.size(); i++) {\n\t\t\tString key = parameters.get(i);\n\t\t\tObject param = selectParam(key, paramNames, paramValues);\n\t\t\tObject result = evaluator.get(param, key);\n\t\t\tif (result != null) {\n\t\t\t\tClass<?> type = result.getClass();\n\t\t\t\tif (converters.existsTwoWayFor(type)) {\n\t\t\t\t\tTwoWayConverter converter = converters.twoWayConverterFor(type);\n\t\t\t\t\tresult = converter.convert(result);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tString parameter = encodeParameter(result == null ? \"\" : result.toString());\n\t\t\tbase = base.replace(\"{\" + splittedPatterns[i] + \"}\", result == null ? \"\" : parameter);\n\t\t}\n\n\t\treturn base.replaceAll(\"\\\\.\\\\*\", \"\");\n\t}", "signature": "String fillUri(Parameter[] paramNames, Object... paramValues)", "full_signature": "@Override public String fillUri(Parameter[] paramNames, Object... paramValues)", "class_method_signature": "DefaultParametersControl.fillUri(Parameter[] paramNames, Object... paramValues)", "testcase": false, "constructor": false, "invocations": ["format", "toString", "toString", "extractParameters", "size", "get", "selectParam", "get", "getClass", "existsTwoWayFor", "twoWayConverterFor", "convert", "encodeParameter", "toString", "replace", "replaceAll"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}