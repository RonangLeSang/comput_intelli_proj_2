{"test_class": {"identifier": "DefaultAcceptHeaderToFormatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AcceptHeaderToFormat mimeTypeToFormat;", "modifier": "private", "type": "AcceptHeaderToFormat", "declarator": "mimeTypeToFormat", "var_name": "mimeTypeToFormat"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/view/DefaultAcceptHeaderToFormatTest.java"}, "test_case": {"identifier": "shouldReturnHtmlWhenAcceptsIsBlankContentType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldReturnHtmlWhenAcceptsIsBlankContentType() {\n\t\tAssert.assertEquals(\"html\", mimeTypeToFormat.getFormat(\"\"));\n\t}", "signature": "void shouldReturnHtmlWhenAcceptsIsBlankContentType()", "full_signature": "@Test public void shouldReturnHtmlWhenAcceptsIsBlankContentType()", "class_method_signature": "DefaultAcceptHeaderToFormatTest.shouldReturnHtmlWhenAcceptsIsBlankContentType()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getFormat"]}, "focal_class": {"identifier": "DefaultAcceptHeaderToFormat", "superclass": "", "interfaces": "implements AcceptHeaderToFormat", "fields": [{"original_string": "private final CacheStore<String, String> acceptToFormatCache;", "modifier": "private final", "type": "CacheStore<String, String>", "declarator": "acceptToFormatCache", "var_name": "acceptToFormatCache"}, {"original_string": "private static final String DEFAULT_FORMAT = \"html\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FORMAT = \"html\"", "var_name": "DEFAULT_FORMAT"}, {"original_string": "private static final double DEFAULT_QUALIFIER_VALUE = 0.01;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_QUALIFIER_VALUE = 0.01", "var_name": "DEFAULT_QUALIFIER_VALUE"}, {"original_string": "protected final Map<String, String> mimeToFormat;", "modifier": "protected final", "type": "Map<String, String>", "declarator": "mimeToFormat", "var_name": "mimeToFormat"}], "methods": [{"identifier": "DefaultAcceptHeaderToFormat", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultAcceptHeaderToFormat()", "full_signature": "protected  DefaultAcceptHeaderToFormat()", "class_method_signature": "DefaultAcceptHeaderToFormat.DefaultAcceptHeaderToFormat()", "testcase": false, "constructor": true}, {"identifier": "DefaultAcceptHeaderToFormat", "parameters": "(@LRU CacheStore<String, String> acceptToFormatCache)", "modifiers": "@Inject public", "return": "", "signature": " DefaultAcceptHeaderToFormat(@LRU CacheStore<String, String> acceptToFormatCache)", "full_signature": "@Inject public  DefaultAcceptHeaderToFormat(@LRU CacheStore<String, String> acceptToFormatCache)", "class_method_signature": "DefaultAcceptHeaderToFormat.DefaultAcceptHeaderToFormat(@LRU CacheStore<String, String> acceptToFormatCache)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "(final String acceptHeader)", "modifiers": "@Override public", "return": "String", "signature": "String getFormat(final String acceptHeader)", "full_signature": "@Override public String getFormat(final String acceptHeader)", "class_method_signature": "DefaultAcceptHeaderToFormat.getFormat(final String acceptHeader)", "testcase": false, "constructor": false}, {"identifier": "chooseMimeType", "parameters": "(String acceptHeader)", "modifiers": "private", "return": "String", "signature": "String chooseMimeType(String acceptHeader)", "full_signature": "private String chooseMimeType(String acceptHeader)", "class_method_signature": "DefaultAcceptHeaderToFormat.chooseMimeType(String acceptHeader)", "testcase": false, "constructor": false}, {"identifier": "getOrderedMimeTypes", "parameters": "(String acceptHeader)", "modifiers": "", "return": "String[]", "signature": "String[] getOrderedMimeTypes(String acceptHeader)", "full_signature": " String[] getOrderedMimeTypes(String acceptHeader)", "class_method_signature": "DefaultAcceptHeaderToFormat.getOrderedMimeTypes(String acceptHeader)", "testcase": false, "constructor": false}, {"identifier": "mimeType", "parameters": "()", "modifiers": "private", "return": "Function<MimeType, String>", "signature": "Function<MimeType, String> mimeType()", "full_signature": "private Function<MimeType, String> mimeType()", "class_method_signature": "DefaultAcceptHeaderToFormat.mimeType()", "testcase": false, "constructor": false}, {"identifier": "convertToMimeType", "parameters": "(String string)", "modifiers": "private", "return": "MimeType", "signature": "MimeType convertToMimeType(String string)", "full_signature": "private MimeType convertToMimeType(String string)", "class_method_signature": "DefaultAcceptHeaderToFormat.convertToMimeType(String string)", "testcase": false, "constructor": false}, {"identifier": "extractQualifier", "parameters": "(String string)", "modifiers": "private static", "return": "double", "signature": "double extractQualifier(String string)", "full_signature": "private static double extractQualifier(String string)", "class_method_signature": "DefaultAcceptHeaderToFormat.extractQualifier(String string)", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/view/DefaultAcceptHeaderToFormat.java"}, "focal_method": {"identifier": "getFormat", "parameters": "(final String acceptHeader)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getFormat(final String acceptHeader) {\n\t\tif (acceptHeader == null || acceptHeader.trim().equals(\"\")) {\n\t\t\treturn DEFAULT_FORMAT;\n\t\t}\n\n\t\tif (acceptHeader.contains(DEFAULT_FORMAT)) {\n\t\t\t// HACK! Opera may send \"application/json, text/html, */*\" and this should return html.\n\t\t\treturn DEFAULT_FORMAT;\n\t\t}\n\n\t\treturn acceptToFormatCache.fetch(acceptHeader, new Supplier<String>() {\n\t\t\t@Override\n\t\t\tpublic String get() {\n\t\t\t\treturn chooseMimeType(acceptHeader);\n\t\t\t}\n\t\t});\n\t}", "signature": "String getFormat(final String acceptHeader)", "full_signature": "@Override public String getFormat(final String acceptHeader)", "class_method_signature": "DefaultAcceptHeaderToFormat.getFormat(final String acceptHeader)", "testcase": false, "constructor": false, "invocations": ["equals", "trim", "contains", "fetch", "chooseMimeType"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}