{"test_class": {"identifier": "PathAnnotationRoutesParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private Proxifier proxifier;", "modifier": "private", "type": "Proxifier", "declarator": "proxifier", "var_name": "proxifier"}, {"original_string": "private @Mock Converters converters;", "modifier": "private @Mock", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "private NoTypeFinder typeFinder;", "modifier": "private", "type": "NoTypeFinder", "declarator": "typeFinder", "var_name": "typeFinder"}, {"original_string": "private @Mock Router router;", "modifier": "private @Mock", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private ParameterNameProvider nameProvider;", "modifier": "private", "type": "ParameterNameProvider", "declarator": "nameProvider", "var_name": "nameProvider"}, {"original_string": "private @Mock EncodingHandler encodingHandler;", "modifier": "private @Mock", "type": "EncodingHandler", "declarator": "encodingHandler", "var_name": "encodingHandler"}, {"original_string": "private PathAnnotationRoutesParser parser;", "modifier": "private", "type": "PathAnnotationRoutesParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private ReflectionProvider reflectionProvider;", "modifier": "private", "type": "ReflectionProvider", "declarator": "reflectionProvider", "var_name": "reflectionProvider"}], "file": "vraptor-core/src/test/java/br/com/caelum/vraptor/http/route/PathAnnotationRoutesParserTest.java"}, "test_case": {"identifier": "dontRegisterRouteIfMethodIsStatic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void dontRegisterRouteIfMethodIsStatic() {\n\t\tList<Route> routes = parser.rulesFor(new DefaultBeanClass(ClientsController.class));\n\t\tRoute route = getRouteMatching(routes, \"/staticMe\");\n\t\tassertNull(route);\n\n\t}", "signature": "void dontRegisterRouteIfMethodIsStatic()", "full_signature": "@Test public void dontRegisterRouteIfMethodIsStatic()", "class_method_signature": "PathAnnotationRoutesParserTest.dontRegisterRouteIfMethodIsStatic()", "testcase": true, "constructor": false, "invocations": ["rulesFor", "getRouteMatching", "assertNull"]}, "focal_class": {"identifier": "PathAnnotationRoutesParser", "superclass": "", "interfaces": "implements RoutesParser", "fields": [{"original_string": "private final Router router;", "modifier": "private final", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private ReflectionProvider reflectionProvider;", "modifier": "private", "type": "ReflectionProvider", "declarator": "reflectionProvider", "var_name": "reflectionProvider"}], "methods": [{"identifier": "PathAnnotationRoutesParser", "parameters": "()", "modifiers": "protected", "return": "", "signature": " PathAnnotationRoutesParser()", "full_signature": "protected  PathAnnotationRoutesParser()", "class_method_signature": "PathAnnotationRoutesParser.PathAnnotationRoutesParser()", "testcase": false, "constructor": true}, {"identifier": "PathAnnotationRoutesParser", "parameters": "(Router router, ReflectionProvider reflectionProvider)", "modifiers": "@Inject public", "return": "", "signature": " PathAnnotationRoutesParser(Router router, ReflectionProvider reflectionProvider)", "full_signature": "@Inject public  PathAnnotationRoutesParser(Router router, ReflectionProvider reflectionProvider)", "class_method_signature": "PathAnnotationRoutesParser.PathAnnotationRoutesParser(Router router, ReflectionProvider reflectionProvider)", "testcase": false, "constructor": true}, {"identifier": "rulesFor", "parameters": "(BeanClass controller)", "modifiers": "@Override public", "return": "List<Route>", "signature": "List<Route> rulesFor(BeanClass controller)", "full_signature": "@Override public List<Route> rulesFor(BeanClass controller)", "class_method_signature": "PathAnnotationRoutesParser.rulesFor(BeanClass controller)", "testcase": false, "constructor": false}, {"identifier": "registerRulesFor", "parameters": "(Class<?> baseType)", "modifiers": "protected", "return": "List<Route>", "signature": "List<Route> registerRulesFor(Class<?> baseType)", "full_signature": "protected List<Route> registerRulesFor(Class<?> baseType)", "class_method_signature": "PathAnnotationRoutesParser.registerRulesFor(Class<?> baseType)", "testcase": false, "constructor": false}, {"identifier": "getHttpMethods", "parameters": "(AnnotatedElement annotated)", "modifiers": "private", "return": "EnumSet<HttpMethod>", "signature": "EnumSet<HttpMethod> getHttpMethods(AnnotatedElement annotated)", "full_signature": "private EnumSet<HttpMethod> getHttpMethods(AnnotatedElement annotated)", "class_method_signature": "PathAnnotationRoutesParser.getHttpMethods(AnnotatedElement annotated)", "testcase": false, "constructor": false}, {"identifier": "isEligible", "parameters": "(Method javaMethod)", "modifiers": "protected", "return": "boolean", "signature": "boolean isEligible(Method javaMethod)", "full_signature": "protected boolean isEligible(Method javaMethod)", "class_method_signature": "PathAnnotationRoutesParser.isEligible(Method javaMethod)", "testcase": false, "constructor": false}, {"identifier": "getURIsFor", "parameters": "(Method javaMethod, Class<?> type)", "modifiers": "protected", "return": "String[]", "signature": "String[] getURIsFor(Method javaMethod, Class<?> type)", "full_signature": "protected String[] getURIsFor(Method javaMethod, Class<?> type)", "class_method_signature": "PathAnnotationRoutesParser.getURIsFor(Method javaMethod, Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getUris", "parameters": "(Method javaMethod)", "modifiers": "protected", "return": "String[]", "signature": "String[] getUris(Method javaMethod)", "full_signature": "protected String[] getUris(Method javaMethod)", "class_method_signature": "PathAnnotationRoutesParser.getUris(Method javaMethod)", "testcase": false, "constructor": false}, {"identifier": "fixURIs", "parameters": "(Class<?> type, String[] uris)", "modifiers": "protected", "return": "void", "signature": "void fixURIs(Class<?> type, String[] uris)", "full_signature": "protected void fixURIs(Class<?> type, String[] uris)", "class_method_signature": "PathAnnotationRoutesParser.fixURIs(Class<?> type, String[] uris)", "testcase": false, "constructor": false}, {"identifier": "removeTrailingSlash", "parameters": "(String prefix)", "modifiers": "protected", "return": "String", "signature": "String removeTrailingSlash(String prefix)", "full_signature": "protected String removeTrailingSlash(String prefix)", "class_method_signature": "PathAnnotationRoutesParser.removeTrailingSlash(String prefix)", "testcase": false, "constructor": false}, {"identifier": "extractPrefix", "parameters": "(Class<?> type)", "modifiers": "protected", "return": "String", "signature": "String extractPrefix(Class<?> type)", "full_signature": "protected String extractPrefix(Class<?> type)", "class_method_signature": "PathAnnotationRoutesParser.extractPrefix(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "fixLeadingSlash", "parameters": "(String uri)", "modifiers": "private static", "return": "String", "signature": "String fixLeadingSlash(String uri)", "full_signature": "private static String fixLeadingSlash(String uri)", "class_method_signature": "PathAnnotationRoutesParser.fixLeadingSlash(String uri)", "testcase": false, "constructor": false}, {"identifier": "extractControllerNameFrom", "parameters": "(Class<?> type)", "modifiers": "protected", "return": "String", "signature": "String extractControllerNameFrom(Class<?> type)", "full_signature": "protected String extractControllerNameFrom(Class<?> type)", "class_method_signature": "PathAnnotationRoutesParser.extractControllerNameFrom(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "defaultUriFor", "parameters": "(String controllerName, String methodName)", "modifiers": "protected", "return": "String", "signature": "String defaultUriFor(String controllerName, String methodName)", "full_signature": "protected String defaultUriFor(String controllerName, String methodName)", "class_method_signature": "PathAnnotationRoutesParser.defaultUriFor(String controllerName, String methodName)", "testcase": false, "constructor": false}, {"identifier": "instanceOfMethodAnnotation", "parameters": "()", "modifiers": "private", "return": "Predicate<Annotation>", "signature": "Predicate<Annotation> instanceOfMethodAnnotation()", "full_signature": "private Predicate<Annotation> instanceOfMethodAnnotation()", "class_method_signature": "PathAnnotationRoutesParser.instanceOfMethodAnnotation()", "testcase": false, "constructor": false}], "file": "vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/PathAnnotationRoutesParser.java"}, "focal_method": {"identifier": "rulesFor", "parameters": "(BeanClass controller)", "modifiers": "@Override public", "return": "List<Route>", "body": "@Override\n\tpublic List<Route> rulesFor(BeanClass controller) {\n\t\tClass<?> baseType = controller.getType();\n\t\treturn registerRulesFor(baseType);\n\t}", "signature": "List<Route> rulesFor(BeanClass controller)", "full_signature": "@Override public List<Route> rulesFor(BeanClass controller)", "class_method_signature": "PathAnnotationRoutesParser.rulesFor(BeanClass controller)", "testcase": false, "constructor": false, "invocations": ["getType", "registerRulesFor"]}, "repository": {"repo_id": 9821876, "url": "https://github.com/caelum/vraptor4", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 341, "size": 14087, "license": "licensed"}}