{"test_class": {"identifier": "AssertTest", "superclass": "", "interfaces": "", "fields": [], "file": "dddlib-utils/src/test/java/org/dayatang/utils/AssertTest.java"}, "test_case": {"identifier": "testNotEmptyMapFailure1", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testNotEmptyMapFailure1() {\n        Assert.notEmpty(Collections.EMPTY_MAP);\n    }", "signature": "void testNotEmptyMapFailure1()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testNotEmptyMapFailure1()", "class_method_signature": "AssertTest.testNotEmptyMapFailure1()", "testcase": true, "constructor": false, "invocations": ["notEmpty"]}, "focal_class": {"identifier": "Assert", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Assert", "parameters": "()", "modifiers": "private", "return": "", "signature": " Assert()", "full_signature": "private  Assert()", "class_method_signature": "Assert.Assert()", "testcase": false, "constructor": true}, {"identifier": "isTrue", "parameters": "(boolean expression, String message)", "modifiers": "public static", "return": "void", "signature": "void isTrue(boolean expression, String message)", "full_signature": "public static void isTrue(boolean expression, String message)", "class_method_signature": "Assert.isTrue(boolean expression, String message)", "testcase": false, "constructor": false}, {"identifier": "isTrue", "parameters": "(boolean expression)", "modifiers": "public static", "return": "void", "signature": "void isTrue(boolean expression)", "full_signature": "public static void isTrue(boolean expression)", "class_method_signature": "Assert.isTrue(boolean expression)", "testcase": false, "constructor": false}, {"identifier": "isFalse", "parameters": "(boolean expression, String message)", "modifiers": "public static", "return": "void", "signature": "void isFalse(boolean expression, String message)", "full_signature": "public static void isFalse(boolean expression, String message)", "class_method_signature": "Assert.isFalse(boolean expression, String message)", "testcase": false, "constructor": false}, {"identifier": "isFalse", "parameters": "(boolean expression)", "modifiers": "public static", "return": "void", "signature": "void isFalse(boolean expression)", "full_signature": "public static void isFalse(boolean expression)", "class_method_signature": "Assert.isFalse(boolean expression)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(Object object, String message)", "modifiers": "public static", "return": "void", "signature": "void isNull(Object object, String message)", "full_signature": "public static void isNull(Object object, String message)", "class_method_signature": "Assert.isNull(Object object, String message)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(Object object)", "modifiers": "public static", "return": "void", "signature": "void isNull(Object object)", "full_signature": "public static void isNull(Object object)", "class_method_signature": "Assert.isNull(Object object)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(Object object, String message)", "modifiers": "public static", "return": "void", "signature": "void notNull(Object object, String message)", "full_signature": "public static void notNull(Object object, String message)", "class_method_signature": "Assert.notNull(Object object, String message)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(Object object)", "modifiers": "public static", "return": "void", "signature": "void notNull(Object object)", "full_signature": "public static void notNull(Object object)", "class_method_signature": "Assert.notNull(Object object)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(CharSequence text, String message)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(CharSequence text, String message)", "full_signature": "public static void isEmpty(CharSequence text, String message)", "class_method_signature": "Assert.isEmpty(CharSequence text, String message)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(CharSequence text)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(CharSequence text)", "full_signature": "public static void isEmpty(CharSequence text)", "class_method_signature": "Assert.isEmpty(CharSequence text)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(CharSequence text, String message)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(CharSequence text, String message)", "full_signature": "public static void notEmpty(CharSequence text, String message)", "class_method_signature": "Assert.notEmpty(CharSequence text, String message)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(CharSequence text)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(CharSequence text)", "full_signature": "public static void notEmpty(CharSequence text)", "class_method_signature": "Assert.notEmpty(CharSequence text)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object[] array, String message)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(Object[] array, String message)", "full_signature": "public static void isEmpty(Object[] array, String message)", "class_method_signature": "Assert.isEmpty(Object[] array, String message)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object[] array)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(Object[] array)", "full_signature": "public static void isEmpty(Object[] array)", "class_method_signature": "Assert.isEmpty(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(Object[] array, String message)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(Object[] array, String message)", "full_signature": "public static void notEmpty(Object[] array, String message)", "class_method_signature": "Assert.notEmpty(Object[] array, String message)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(Object[] array)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(Object[] array)", "full_signature": "public static void notEmpty(Object[] array)", "class_method_signature": "Assert.notEmpty(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Collection collection, String message)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(Collection collection, String message)", "full_signature": "public static void isEmpty(Collection collection, String message)", "class_method_signature": "Assert.isEmpty(Collection collection, String message)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Collection collection)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(Collection collection)", "full_signature": "public static void isEmpty(Collection collection)", "class_method_signature": "Assert.isEmpty(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(Collection collection, String message)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(Collection collection, String message)", "full_signature": "public static void notEmpty(Collection collection, String message)", "class_method_signature": "Assert.notEmpty(Collection collection, String message)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(Collection collection)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(Collection collection)", "full_signature": "public static void notEmpty(Collection collection)", "class_method_signature": "Assert.notEmpty(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Map map, String message)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(Map map, String message)", "full_signature": "public static void isEmpty(Map map, String message)", "class_method_signature": "Assert.isEmpty(Map map, String message)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Map map)", "modifiers": "public static", "return": "void", "signature": "void isEmpty(Map map)", "full_signature": "public static void isEmpty(Map map)", "class_method_signature": "Assert.isEmpty(Map map)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(Map map, String message)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(Map map, String message)", "full_signature": "public static void notEmpty(Map map, String message)", "class_method_signature": "Assert.notEmpty(Map map, String message)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(Map map)", "modifiers": "public static", "return": "void", "signature": "void notEmpty(Map map)", "full_signature": "public static void notEmpty(Map map)", "class_method_signature": "Assert.notEmpty(Map map)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(CharSequence text, String message)", "modifiers": "public static", "return": "void", "signature": "void isBlank(CharSequence text, String message)", "full_signature": "public static void isBlank(CharSequence text, String message)", "class_method_signature": "Assert.isBlank(CharSequence text, String message)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(CharSequence text)", "modifiers": "public static", "return": "void", "signature": "void isBlank(CharSequence text)", "full_signature": "public static void isBlank(CharSequence text)", "class_method_signature": "Assert.isBlank(CharSequence text)", "testcase": false, "constructor": false}, {"identifier": "notBlank", "parameters": "(CharSequence text, String message)", "modifiers": "public static", "return": "void", "signature": "void notBlank(CharSequence text, String message)", "full_signature": "public static void notBlank(CharSequence text, String message)", "class_method_signature": "Assert.notBlank(CharSequence text, String message)", "testcase": false, "constructor": false}, {"identifier": "notBlank", "parameters": "(CharSequence text)", "modifiers": "public static", "return": "void", "signature": "void notBlank(CharSequence text)", "full_signature": "public static void notBlank(CharSequence text)", "class_method_signature": "Assert.notBlank(CharSequence text)", "testcase": false, "constructor": false}, {"identifier": "containsText", "parameters": "(String textToSearch, String substring,\n            String message)", "modifiers": "public static", "return": "void", "signature": "void containsText(String textToSearch, String substring,\n            String message)", "full_signature": "public static void containsText(String textToSearch, String substring,\n            String message)", "class_method_signature": "Assert.containsText(String textToSearch, String substring,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "containsText", "parameters": "(String textToSearch, String substring)", "modifiers": "public static", "return": "void", "signature": "void containsText(String textToSearch, String substring)", "full_signature": "public static void containsText(String textToSearch, String substring)", "class_method_signature": "Assert.containsText(String textToSearch, String substring)", "testcase": false, "constructor": false}, {"identifier": "notContainsText", "parameters": "(String textToSearch, String substring,\n            String message)", "modifiers": "public static", "return": "void", "signature": "void notContainsText(String textToSearch, String substring,\n            String message)", "full_signature": "public static void notContainsText(String textToSearch, String substring,\n            String message)", "class_method_signature": "Assert.notContainsText(String textToSearch, String substring,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "notContainsText", "parameters": "(String textToSearch, String substring)", "modifiers": "public static", "return": "void", "signature": "void notContainsText(String textToSearch, String substring)", "full_signature": "public static void notContainsText(String textToSearch, String substring)", "class_method_signature": "Assert.notContainsText(String textToSearch, String substring)", "testcase": false, "constructor": false}, {"identifier": "startsWithText", "parameters": "(String textToSearch, String substring,\n            String message)", "modifiers": "public static", "return": "void", "signature": "void startsWithText(String textToSearch, String substring,\n            String message)", "full_signature": "public static void startsWithText(String textToSearch, String substring,\n            String message)", "class_method_signature": "Assert.startsWithText(String textToSearch, String substring,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "startsWithText", "parameters": "(String textToSearch, String substring)", "modifiers": "public static", "return": "void", "signature": "void startsWithText(String textToSearch, String substring)", "full_signature": "public static void startsWithText(String textToSearch, String substring)", "class_method_signature": "Assert.startsWithText(String textToSearch, String substring)", "testcase": false, "constructor": false}, {"identifier": "notStartsWithText", "parameters": "(String textToSearch, String substring,\n            String message)", "modifiers": "public static", "return": "void", "signature": "void notStartsWithText(String textToSearch, String substring,\n            String message)", "full_signature": "public static void notStartsWithText(String textToSearch, String substring,\n            String message)", "class_method_signature": "Assert.notStartsWithText(String textToSearch, String substring,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "notStartsWithText", "parameters": "(String textToSearch, String substring)", "modifiers": "public static", "return": "void", "signature": "void notStartsWithText(String textToSearch, String substring)", "full_signature": "public static void notStartsWithText(String textToSearch, String substring)", "class_method_signature": "Assert.notStartsWithText(String textToSearch, String substring)", "testcase": false, "constructor": false}, {"identifier": "endsWithText", "parameters": "(String textToSearch, String substring,\n            String message)", "modifiers": "public static", "return": "void", "signature": "void endsWithText(String textToSearch, String substring,\n            String message)", "full_signature": "public static void endsWithText(String textToSearch, String substring,\n            String message)", "class_method_signature": "Assert.endsWithText(String textToSearch, String substring,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "endsWithText", "parameters": "(String textToSearch, String substring)", "modifiers": "public static", "return": "void", "signature": "void endsWithText(String textToSearch, String substring)", "full_signature": "public static void endsWithText(String textToSearch, String substring)", "class_method_signature": "Assert.endsWithText(String textToSearch, String substring)", "testcase": false, "constructor": false}, {"identifier": "notEndsWithText", "parameters": "(String textToSearch, String substring,\n            String message)", "modifiers": "public static", "return": "void", "signature": "void notEndsWithText(String textToSearch, String substring,\n            String message)", "full_signature": "public static void notEndsWithText(String textToSearch, String substring,\n            String message)", "class_method_signature": "Assert.notEndsWithText(String textToSearch, String substring,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "notEndsWithText", "parameters": "(String textToSearch, String substring)", "modifiers": "public static", "return": "void", "signature": "void notEndsWithText(String textToSearch, String substring)", "full_signature": "public static void notEndsWithText(String textToSearch, String substring)", "class_method_signature": "Assert.notEndsWithText(String textToSearch, String substring)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(Object[] array, String message)", "modifiers": "public static", "return": "void", "signature": "void noNullElements(Object[] array, String message)", "full_signature": "public static void noNullElements(Object[] array, String message)", "class_method_signature": "Assert.noNullElements(Object[] array, String message)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(Object[] array)", "modifiers": "public static", "return": "void", "signature": "void noNullElements(Object[] array)", "full_signature": "public static void noNullElements(Object[] array)", "class_method_signature": "Assert.noNullElements(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(Collection collection, String message)", "modifiers": "public static", "return": "void", "signature": "void noNullElements(Collection collection, String message)", "full_signature": "public static void noNullElements(Collection collection, String message)", "class_method_signature": "Assert.noNullElements(Collection collection, String message)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(Collection collection)", "modifiers": "public static", "return": "void", "signature": "void noNullElements(Collection collection)", "full_signature": "public static void noNullElements(Collection collection)", "class_method_signature": "Assert.noNullElements(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(Map map, String message)", "modifiers": "public static", "return": "void", "signature": "void noNullElements(Map map, String message)", "full_signature": "public static void noNullElements(Map map, String message)", "class_method_signature": "Assert.noNullElements(Map map, String message)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(Map map)", "modifiers": "public static", "return": "void", "signature": "void noNullElements(Map map)", "full_signature": "public static void noNullElements(Map map)", "class_method_signature": "Assert.noNullElements(Map map)", "testcase": false, "constructor": false}, {"identifier": "isInstanceOf", "parameters": "(Class type, Object obj, String message)", "modifiers": "public static", "return": "void", "signature": "void isInstanceOf(Class type, Object obj, String message)", "full_signature": "public static void isInstanceOf(Class type, Object obj, String message)", "class_method_signature": "Assert.isInstanceOf(Class type, Object obj, String message)", "testcase": false, "constructor": false}, {"identifier": "isInstanceOf", "parameters": "(Class type, Object obj)", "modifiers": "public static", "return": "void", "signature": "void isInstanceOf(Class type, Object obj)", "full_signature": "public static void isInstanceOf(Class type, Object obj)", "class_method_signature": "Assert.isInstanceOf(Class type, Object obj)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Class superType, Class subType,\n            String message)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void isAssignableFrom(Class superType, Class subType,\n            String message)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void isAssignableFrom(Class superType, Class subType,\n            String message)", "class_method_signature": "Assert.isAssignableFrom(Class superType, Class subType,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Class superType, Class subType)", "modifiers": "public static", "return": "void", "signature": "void isAssignableFrom(Class superType, Class subType)", "full_signature": "public static void isAssignableFrom(Class superType, Class subType)", "class_method_signature": "Assert.isAssignableFrom(Class superType, Class subType)", "testcase": false, "constructor": false}], "file": "dddlib-utils/src/main/java/org/dayatang/utils/Assert.java"}, "focal_method": {"identifier": "notEmpty", "parameters": "(CharSequence text, String message)", "modifiers": "public static", "return": "void", "body": "public static void notEmpty(CharSequence text, String message) {\n        if (StringUtils.isEmpty(text)) {\n            throw new IllegalArgumentException(message);\n        }\n    }", "signature": "void notEmpty(CharSequence text, String message)", "full_signature": "public static void notEmpty(CharSequence text, String message)", "class_method_signature": "Assert.notEmpty(CharSequence text, String message)", "testcase": false, "constructor": false, "invocations": ["isEmpty"]}, "repository": {"repo_id": 9467906, "url": "https://github.com/dayatang/dddlib", "language": "Java", "is_fork": false, "fork_count": 202, "stargazer_count": 402, "size": 52576, "license": "licensed"}}