{"test_class": {"identifier": "DateUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dddlib-utils/src/test/java/org/dayatang/utils/DateUtilsTest.java"}, "test_case": {"identifier": "testParseDateTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParseDateTime() {\n\t\tCalendar calendar = Calendar.getInstance();\n\n\t\tcalendar.setTime(DateUtils.parseDateTime(\"1968-04-16 02:04:06\"));\n\t\tassertEquals(1968, calendar.get(Calendar.YEAR));\n\t\tassertEquals(3, calendar.get(Calendar.MONTH));\n\t\tassertEquals(16, calendar.get(Calendar.DATE));\n\t\tassertEquals(2, calendar.get(Calendar.HOUR));\n\t\tassertEquals(4, calendar.get(Calendar.MINUTE));\n\t\tassertEquals(6, calendar.get(Calendar.SECOND));\n\n\t\tcalendar.setTime(DateUtils.parseDateTime(\"1968-4-16 2:4:6\"));\n\t\tassertEquals(1968, calendar.get(Calendar.YEAR));\n\t\tassertEquals(3, calendar.get(Calendar.MONTH));\n\t\tassertEquals(16, calendar.get(Calendar.DATE));\n\t\tassertEquals(2, calendar.get(Calendar.HOUR));\n\t\tassertEquals(4, calendar.get(Calendar.MINUTE));\n\t\tassertEquals(6, calendar.get(Calendar.SECOND));\n\n\t\tcalendar.setTime(DateUtils.parseDateTime(\"1968-04-16 2:4:6\"));\n\t\tassertEquals(1968, calendar.get(Calendar.YEAR));\n\t\tassertEquals(3, calendar.get(Calendar.MONTH));\n\t\tassertEquals(16, calendar.get(Calendar.DATE));\n\t\tassertEquals(2, calendar.get(Calendar.HOUR));\n\t\tassertEquals(4, calendar.get(Calendar.MINUTE));\n\t\tassertEquals(6, calendar.get(Calendar.SECOND));\n\n\t\tcalendar.setTime(DateUtils.parseDateTime(\"1968-04-16 2:4:6\"));\n\t\tassertEquals(1968, calendar.get(Calendar.YEAR));\n\t\tassertEquals(3, calendar.get(Calendar.MONTH));\n\t\tassertEquals(16, calendar.get(Calendar.DATE));\n\t\tassertEquals(2, calendar.get(Calendar.HOUR));\n\t\tassertEquals(4, calendar.get(Calendar.MINUTE));\n\t\tassertEquals(6, calendar.get(Calendar.SECOND));\n\t}", "signature": "void testParseDateTime()", "full_signature": "@Test public void testParseDateTime()", "class_method_signature": "DateUtilsTest.testParseDateTime()", "testcase": true, "constructor": false, "invocations": ["getInstance", "setTime", "parseDateTime", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "setTime", "parseDateTime", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "setTime", "parseDateTime", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "setTime", "parseDateTime", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "DateUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Date MIN_DATE = date(1000, 1, 1);", "modifier": "public static final", "type": "Date", "declarator": "MIN_DATE = date(1000, 1, 1)", "var_name": "MIN_DATE"}, {"original_string": "public static final Date MAX_DATE = date(8888, 1, 1);", "modifier": "public static final", "type": "Date", "declarator": "MAX_DATE = date(8888, 1, 1)", "var_name": "MAX_DATE"}, {"original_string": "private static final long MILLIS_IN_A_SECOND = 1000;", "modifier": "private static final", "type": "long", "declarator": "MILLIS_IN_A_SECOND = 1000", "var_name": "MILLIS_IN_A_SECOND"}, {"original_string": "private static final long SECONDS_IN_A_MINUTE = 60;", "modifier": "private static final", "type": "long", "declarator": "SECONDS_IN_A_MINUTE = 60", "var_name": "SECONDS_IN_A_MINUTE"}, {"original_string": "private static final long MINUTES_IN_AN_HOUR = 60;", "modifier": "private static final", "type": "long", "declarator": "MINUTES_IN_AN_HOUR = 60", "var_name": "MINUTES_IN_AN_HOUR"}, {"original_string": "private static final long HOURS_IN_A_DAY = 24;", "modifier": "private static final", "type": "long", "declarator": "HOURS_IN_A_DAY = 24", "var_name": "HOURS_IN_A_DAY"}, {"original_string": "private static final int DAYS_IN_A_WEEK = 7;", "modifier": "private static final", "type": "int", "declarator": "DAYS_IN_A_WEEK = 7", "var_name": "DAYS_IN_A_WEEK"}, {"original_string": "private static final int MONTHS_IN_A_YEAR = 12;", "modifier": "private static final", "type": "int", "declarator": "MONTHS_IN_A_YEAR = 12", "var_name": "MONTHS_IN_A_YEAR"}], "methods": [{"identifier": "DateUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateUtils()", "full_signature": "private  DateUtils()", "class_method_signature": "DateUtils.DateUtils()", "testcase": false, "constructor": true}, {"identifier": "date", "parameters": "(int year, int month, int day)", "modifiers": "public static", "return": "Date", "signature": "Date date(int year, int month, int day)", "full_signature": "public static Date date(int year, int month, int day)", "class_method_signature": "DateUtils.date(int year, int month, int day)", "testcase": false, "constructor": false}, {"identifier": "date", "parameters": "(int year, int month, int day,\n            int hour, int minute, int second)", "modifiers": "public static", "return": "Date", "signature": "Date date(int year, int month, int day,\n            int hour, int minute, int second)", "full_signature": "public static Date date(int year, int month, int day,\n            int hour, int minute, int second)", "class_method_signature": "DateUtils.date(int year, int month, int day,\n            int hour, int minute, int second)", "testcase": false, "constructor": false}, {"identifier": "getYearDiff", "parameters": "(Date date1, Date date2)", "modifiers": "public static", "return": "int", "signature": "int getYearDiff(Date date1, Date date2)", "full_signature": "public static int getYearDiff(Date date1, Date date2)", "class_method_signature": "DateUtils.getYearDiff(Date date1, Date date2)", "testcase": false, "constructor": false}, {"identifier": "getMonthDiff", "parameters": "(Date date1, Date date2)", "modifiers": "public static", "return": "int", "signature": "int getMonthDiff(Date date1, Date date2)", "full_signature": "public static int getMonthDiff(Date date1, Date date2)", "class_method_signature": "DateUtils.getMonthDiff(Date date1, Date date2)", "testcase": false, "constructor": false}, {"identifier": "getDayDiff", "parameters": "(Date date1, Date date2)", "modifiers": "public static", "return": "int", "signature": "int getDayDiff(Date date1, Date date2)", "full_signature": "public static int getDayDiff(Date date1, Date date2)", "class_method_signature": "DateUtils.getDayDiff(Date date1, Date date2)", "testcase": false, "constructor": false}, {"identifier": "getMinuteDiffByTime", "parameters": "(Date time1, Date time2)", "modifiers": "public static", "return": "int", "signature": "int getMinuteDiffByTime(Date time1, Date time2)", "full_signature": "public static int getMinuteDiffByTime(Date time1, Date time2)", "class_method_signature": "DateUtils.getMinuteDiffByTime(Date time1, Date time2)", "testcase": false, "constructor": false}, {"identifier": "getPrevDay", "parameters": "(Date date)", "modifiers": "public static", "return": "Date", "signature": "Date getPrevDay(Date date)", "full_signature": "public static Date getPrevDay(Date date)", "class_method_signature": "DateUtils.getPrevDay(Date date)", "testcase": false, "constructor": false}, {"identifier": "getNextDay", "parameters": "(Date date)", "modifiers": "public static", "return": "Date", "signature": "Date getNextDay(Date date)", "full_signature": "public static Date getNextDay(Date date)", "class_method_signature": "DateUtils.getNextDay(Date date)", "testcase": false, "constructor": false}, {"identifier": "isDateAfter", "parameters": "(Date date1, Date date2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDateAfter(Date date1, Date date2)", "full_signature": "public static boolean isDateAfter(Date date1, Date date2)", "class_method_signature": "DateUtils.isDateAfter(Date date1, Date date2)", "testcase": false, "constructor": false}, {"identifier": "isDateBefore", "parameters": "(Date date1, Date date2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDateBefore(Date date1, Date date2)", "full_signature": "public static boolean isDateBefore(Date date1, Date date2)", "class_method_signature": "DateUtils.isDateBefore(Date date1, Date date2)", "testcase": false, "constructor": false}, {"identifier": "isTimeAfter", "parameters": "(Date time1, Date time2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeAfter(Date time1, Date time2)", "full_signature": "public static boolean isTimeAfter(Date time1, Date time2)", "class_method_signature": "DateUtils.isTimeAfter(Date time1, Date time2)", "testcase": false, "constructor": false}, {"identifier": "isTimeBefore", "parameters": "(Date time1, Date time2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeBefore(Date time1, Date time2)", "full_signature": "public static boolean isTimeBefore(Date time1, Date time2)", "class_method_signature": "DateUtils.isTimeBefore(Date time1, Date time2)", "testcase": false, "constructor": false}, {"identifier": "isSameDay", "parameters": "(Date date1, Date date2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSameDay(Date date1, Date date2)", "full_signature": "public static boolean isSameDay(Date date1, Date date2)", "class_method_signature": "DateUtils.isSameDay(Date date1, Date date2)", "testcase": false, "constructor": false}, {"identifier": "isSameDay", "parameters": "(Calendar date1, Calendar date2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSameDay(Calendar date1, Calendar date2)", "full_signature": "public static boolean isSameDay(Calendar date1, Calendar date2)", "class_method_signature": "DateUtils.isSameDay(Calendar date1, Calendar date2)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String dateString)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String dateString)", "full_signature": "public static Date parseDate(String dateString)", "class_method_signature": "DateUtils.parseDate(String dateString)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(String timeString)", "modifiers": "public static", "return": "Date", "signature": "Date parseTime(String timeString)", "full_signature": "public static Date parseTime(String timeString)", "class_method_signature": "DateUtils.parseTime(String timeString)", "testcase": false, "constructor": false}, {"identifier": "parseDateTime", "parameters": "(String timeString)", "modifiers": "public static", "return": "Date", "signature": "Date parseDateTime(String timeString)", "full_signature": "public static Date parseDateTime(String timeString)", "class_method_signature": "DateUtils.parseDateTime(String timeString)", "testcase": false, "constructor": false}, {"identifier": "getWeekDaysBetween", "parameters": "(Date fromDate, Date toDate,\n            int dayOfWeek)", "modifiers": "public static", "return": "int", "signature": "int getWeekDaysBetween(Date fromDate, Date toDate,\n            int dayOfWeek)", "full_signature": "public static int getWeekDaysBetween(Date fromDate, Date toDate,\n            int dayOfWeek)", "class_method_signature": "DateUtils.getWeekDaysBetween(Date fromDate, Date toDate,\n            int dayOfWeek)", "testcase": false, "constructor": false}, {"identifier": "getFirstWeekdayBetween", "parameters": "(Date fromDate, Date toDate,\n            int dayOfWeek)", "modifiers": "public static", "return": "Date", "signature": "Date getFirstWeekdayBetween(Date fromDate, Date toDate,\n            int dayOfWeek)", "full_signature": "public static Date getFirstWeekdayBetween(Date fromDate, Date toDate,\n            int dayOfWeek)", "class_method_signature": "DateUtils.getFirstWeekdayBetween(Date fromDate, Date toDate,\n            int dayOfWeek)", "testcase": false, "constructor": false}, {"identifier": "getDaysInYear", "parameters": "(int year)", "modifiers": "public static", "return": "int", "signature": "int getDaysInYear(int year)", "full_signature": "public static int getDaysInYear(int year)", "class_method_signature": "DateUtils.getDaysInYear(int year)", "testcase": false, "constructor": false}, {"identifier": "getDaysInMonth", "parameters": "(int year, int month)", "modifiers": "public static", "return": "int", "signature": "int getDaysInMonth(int year, int month)", "full_signature": "public static int getDaysInMonth(int year, int month)", "class_method_signature": "DateUtils.getDaysInMonth(int year, int month)", "testcase": false, "constructor": false}, {"identifier": "getYear", "parameters": "(Date date)", "modifiers": "public static", "return": "int", "signature": "int getYear(Date date)", "full_signature": "public static int getYear(Date date)", "class_method_signature": "DateUtils.getYear(Date date)", "testcase": false, "constructor": false}, {"identifier": "getMonth", "parameters": "(Date date)", "modifiers": "public static", "return": "int", "signature": "int getMonth(Date date)", "full_signature": "public static int getMonth(Date date)", "class_method_signature": "DateUtils.getMonth(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDayOfYear", "parameters": "(Date date)", "modifiers": "public static", "return": "int", "signature": "int getDayOfYear(Date date)", "full_signature": "public static int getDayOfYear(Date date)", "class_method_signature": "DateUtils.getDayOfYear(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDayOfMonth", "parameters": "(Date date)", "modifiers": "public static", "return": "int", "signature": "int getDayOfMonth(Date date)", "full_signature": "public static int getDayOfMonth(Date date)", "class_method_signature": "DateUtils.getDayOfMonth(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDayOfWeek", "parameters": "(Date date)", "modifiers": "public static", "return": "int", "signature": "int getDayOfWeek(Date date)", "full_signature": "public static int getDayOfWeek(Date date)", "class_method_signature": "DateUtils.getDayOfWeek(Date date)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Date date, int field)", "modifiers": "private static", "return": "int", "signature": "int getFieldValue(Date date, int field)", "full_signature": "private static int getFieldValue(Date date, int field)", "class_method_signature": "DateUtils.getFieldValue(Date date, int field)", "testcase": false, "constructor": false}, {"identifier": "dateAfter", "parameters": "(Date origDate, int amount, int timeUnit)", "modifiers": "public static final", "return": "Date", "signature": "Date dateAfter(Date origDate, int amount, int timeUnit)", "full_signature": "public static final Date dateAfter(Date origDate, int amount, int timeUnit)", "class_method_signature": "DateUtils.dateAfter(Date origDate, int amount, int timeUnit)", "testcase": false, "constructor": false}, {"identifier": "dateBefore", "parameters": "(Date origDate, int amount, int timeUnit)", "modifiers": "public static final", "return": "Date", "signature": "Date dateBefore(Date origDate, int amount, int timeUnit)", "full_signature": "public static final Date dateBefore(Date origDate, int amount, int timeUnit)", "class_method_signature": "DateUtils.dateBefore(Date origDate, int amount, int timeUnit)", "testcase": false, "constructor": false}], "file": "dddlib-utils/src/main/java/org/dayatang/utils/DateUtils.java"}, "focal_method": {"identifier": "parseDateTime", "parameters": "(String timeString)", "modifiers": "public static", "return": "Date", "body": "public static Date parseDateTime(String timeString) {\n        try {\n            return org.apache.commons.lang3.time.DateUtils.parseDate(\n                    timeString, new String[]{\"yyyy-MM-dd HH:mm:ss\",\n                        \"yyyy-M-d H:m:s\", \"yyyy-MM-dd H:m:s\",\n                        \"yyyy-M-d HH:mm:ss\"});\n        } catch (ParseException e) {\n            return null;\n        }\n    }", "signature": "Date parseDateTime(String timeString)", "full_signature": "public static Date parseDateTime(String timeString)", "class_method_signature": "DateUtils.parseDateTime(String timeString)", "testcase": false, "constructor": false, "invocations": ["parseDate"]}, "repository": {"repo_id": 9467906, "url": "https://github.com/dayatang/dddlib", "language": "Java", "is_fork": false, "fork_count": 202, "stargazer_count": 402, "size": 52576, "license": "licensed"}}