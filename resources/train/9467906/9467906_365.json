{"test_class": {"identifier": "BeanUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BeanUtils instance;", "modifier": "private", "type": "BeanUtils", "declarator": "instance", "var_name": "instance"}, {"original_string": "private ConcreteItem item;", "modifier": "private", "type": "ConcreteItem", "declarator": "item", "var_name": "item"}], "file": "dddlib-utils/src/test/java/org/dayatang/utils/BeanUtilsTest.java"}, "test_case": {"identifier": "testCopyPropertiesTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCopyPropertiesTo() {\n        Item item1 = new Item(12, \"abc\", true);\n        ConcreteItem item2 = new ConcreteItem(20, \"xyz\", false);\n        item2.setPrice(15.5);\n        instance = new BeanUtils(item2);\n        instance.copyPropertiesTo(item1);\n        assertEquals(\"xyz\", item1.getName());\n    }", "signature": "void testCopyPropertiesTo()", "full_signature": "@Test public void testCopyPropertiesTo()", "class_method_signature": "BeanUtilsTest.testCopyPropertiesTo()", "testcase": true, "constructor": false, "invocations": ["setPrice", "copyPropertiesTo", "assertEquals", "getName"]}, "focal_class": {"identifier": "BeanUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BeanUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BeanUtils.class)", "var_name": "LOGGER"}, {"original_string": "private final Object bean;", "modifier": "private final", "type": "Object", "declarator": "bean", "var_name": "bean"}, {"original_string": "private final BeanClassUtils beanClassUtils;", "modifier": "private final", "type": "BeanClassUtils", "declarator": "beanClassUtils", "var_name": "beanClassUtils"}], "methods": [{"identifier": "BeanUtils", "parameters": "(final Object bean)", "modifiers": "public", "return": "", "signature": " BeanUtils(final Object bean)", "full_signature": "public  BeanUtils(final Object bean)", "class_method_signature": "BeanUtils.BeanUtils(final Object bean)", "testcase": false, "constructor": true}, {"identifier": "copyProperties", "parameters": "(Object fromBean, Object toBean, String... excludeProps)", "modifiers": "private static", "return": "void", "signature": "void copyProperties(Object fromBean, Object toBean, String... excludeProps)", "full_signature": "private static void copyProperties(Object fromBean, Object toBean, String... excludeProps)", "class_method_signature": "BeanUtils.copyProperties(Object fromBean, Object toBean, String... excludeProps)", "testcase": false, "constructor": false}, {"identifier": "getPropTypes", "parameters": "()", "modifiers": "public", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> getPropTypes()", "full_signature": "public Map<String, Class<?>> getPropTypes()", "class_method_signature": "BeanUtils.getPropTypes()", "testcase": false, "constructor": false}, {"identifier": "getPropType", "parameters": "(String propName)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getPropType(String propName)", "full_signature": "public Class<?> getPropType(String propName)", "class_method_signature": "BeanUtils.getPropType(String propName)", "testcase": false, "constructor": false}, {"identifier": "getPropValues", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getPropValues()", "full_signature": "public Map<String, Object> getPropValues()", "class_method_signature": "BeanUtils.getPropValues()", "testcase": false, "constructor": false}, {"identifier": "getPropValuesExclude", "parameters": "(String... excludePropNames)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getPropValuesExclude(String... excludePropNames)", "full_signature": "public Map<String, Object> getPropValuesExclude(String... excludePropNames)", "class_method_signature": "BeanUtils.getPropValuesExclude(String... excludePropNames)", "testcase": false, "constructor": false}, {"identifier": "getPropValuesExclude", "parameters": "(Class<? extends Annotation>... excludeAnnotations)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getPropValuesExclude(Class<? extends Annotation>... excludeAnnotations)", "full_signature": "public Map<String, Object> getPropValuesExclude(Class<? extends Annotation>... excludeAnnotations)", "class_method_signature": "BeanUtils.getPropValuesExclude(Class<? extends Annotation>... excludeAnnotations)", "testcase": false, "constructor": false}, {"identifier": "getPropValues", "parameters": "(Set<String> propNames)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getPropValues(Set<String> propNames)", "full_signature": "private Map<String, Object> getPropValues(Set<String> propNames)", "class_method_signature": "BeanUtils.getPropValues(Set<String> propNames)", "testcase": false, "constructor": false}, {"identifier": "getPropNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getPropNames()", "full_signature": "public Set<String> getPropNames()", "class_method_signature": "BeanUtils.getPropNames()", "testcase": false, "constructor": false}, {"identifier": "getReadablePropNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getReadablePropNames()", "full_signature": "public Set<String> getReadablePropNames()", "class_method_signature": "BeanUtils.getReadablePropNames()", "testcase": false, "constructor": false}, {"identifier": "getWritablePropNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getWritablePropNames()", "full_signature": "public Set<String> getWritablePropNames()", "class_method_signature": "BeanUtils.getWritablePropNames()", "testcase": false, "constructor": false}, {"identifier": "getPropValue", "parameters": "(String propName)", "modifiers": "public", "return": "Object", "signature": "Object getPropValue(String propName)", "full_signature": "public Object getPropValue(String propName)", "class_method_signature": "BeanUtils.getPropValue(String propName)", "testcase": false, "constructor": false}, {"identifier": "setPropValue", "parameters": "(String key, Object value)", "modifiers": "public", "return": "void", "signature": "void setPropValue(String key, Object value)", "full_signature": "public void setPropValue(String key, Object value)", "class_method_signature": "BeanUtils.setPropValue(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(Map<String, ? extends Object> properties)", "modifiers": "public", "return": "void", "signature": "void populate(Map<String, ? extends Object> properties)", "full_signature": "public void populate(Map<String, ? extends Object> properties)", "class_method_signature": "BeanUtils.populate(Map<String, ? extends Object> properties)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesFrom", "parameters": "(Object otherBean)", "modifiers": "public", "return": "void", "signature": "void copyPropertiesFrom(Object otherBean)", "full_signature": "public void copyPropertiesFrom(Object otherBean)", "class_method_signature": "BeanUtils.copyPropertiesFrom(Object otherBean)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesTo", "parameters": "(Object otherBean)", "modifiers": "public", "return": "void", "signature": "void copyPropertiesTo(Object otherBean)", "full_signature": "public void copyPropertiesTo(Object otherBean)", "class_method_signature": "BeanUtils.copyPropertiesTo(Object otherBean)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesFrom", "parameters": "(Object otherBean, String... excludeProps)", "modifiers": "public", "return": "void", "signature": "void copyPropertiesFrom(Object otherBean, String... excludeProps)", "full_signature": "public void copyPropertiesFrom(Object otherBean, String... excludeProps)", "class_method_signature": "BeanUtils.copyPropertiesFrom(Object otherBean, String... excludeProps)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesTo", "parameters": "(Object otherBean, String... excludeProps)", "modifiers": "public", "return": "void", "signature": "void copyPropertiesTo(Object otherBean, String... excludeProps)", "full_signature": "public void copyPropertiesTo(Object otherBean, String... excludeProps)", "class_method_signature": "BeanUtils.copyPropertiesTo(Object otherBean, String... excludeProps)", "testcase": false, "constructor": false}, {"identifier": "getPropInfos", "parameters": "()", "modifiers": "public", "return": "Map<String, PropertyInfo>", "signature": "Map<String, PropertyInfo> getPropInfos()", "full_signature": "public Map<String, PropertyInfo> getPropInfos()", "class_method_signature": "BeanUtils.getPropInfos()", "testcase": false, "constructor": false}, {"identifier": "getPropInfo", "parameters": "(String propName)", "modifiers": "public", "return": "PropertyInfo", "signature": "PropertyInfo getPropInfo(String propName)", "full_signature": "public PropertyInfo getPropInfo(String propName)", "class_method_signature": "BeanUtils.getPropInfo(String propName)", "testcase": false, "constructor": false}], "file": "dddlib-utils/src/main/java/org/dayatang/utils/BeanUtils.java"}, "focal_method": {"identifier": "copyPropertiesTo", "parameters": "(Object otherBean)", "modifiers": "public", "return": "void", "body": "public void copyPropertiesTo(Object otherBean) {\n        copyProperties(bean, otherBean);\n    }", "signature": "void copyPropertiesTo(Object otherBean)", "full_signature": "public void copyPropertiesTo(Object otherBean)", "class_method_signature": "BeanUtils.copyPropertiesTo(Object otherBean)", "testcase": false, "constructor": false, "invocations": ["copyProperties"]}, "repository": {"repo_id": 9467906, "url": "https://github.com/dayatang/dddlib", "language": "Java", "is_fork": false, "fork_count": 202, "stargazer_count": 402, "size": 52576, "license": "licensed"}}