{"test_class": {"identifier": "ConfigurationFileImplTest", "superclass": "extends AbstractConfigurationTest", "interfaces": "", "fields": [{"original_string": "private String fileInClass = \"/conf.properties\";", "modifier": "private", "type": "String", "declarator": "fileInClass = \"/conf.properties\"", "var_name": "fileInClass"}], "file": "dddlib-configuration/src/test/java/org/dayatang/configuration/impl/ConfigurationFileImplTest.java"}, "test_case": {"identifier": "testFromFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFromFile() {\n\t\tString pathname = getClass().getResource(fileInClass).getFile();\n\t\tFile file = new File(pathname);\n\t\tinstance = ConfigurationFileImpl.fromFile(file);\n\t\tassertTrue(instance.getProperties().size() > 0);\n\t}", "signature": "void testFromFile()", "full_signature": "@Test public void testFromFile()", "class_method_signature": "ConfigurationFileImplTest.testFromFile()", "testcase": true, "constructor": false, "invocations": ["getFile", "getResource", "getClass", "fromFile", "assertTrue", "size", "getProperties"]}, "focal_class": {"identifier": "ConfigurationFileImpl", "superclass": "extends AbstractConfiguration", "interfaces": "implements WritableConfiguration", "fields": [{"original_string": "private static final Slf4JLogger LOGGER = Slf4JLogger.getLogger(ConfigurationFileImpl.class);", "modifier": "private static final", "type": "Slf4JLogger", "declarator": "LOGGER = Slf4JLogger.getLogger(ConfigurationFileImpl.class)", "var_name": "LOGGER"}, {"original_string": "private PropertiesFileUtils pfu = new PropertiesFileUtils(\"utf-8\");", "modifier": "private", "type": "PropertiesFileUtils", "declarator": "pfu = new PropertiesFileUtils(\"utf-8\")", "var_name": "pfu"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "fromFile", "parameters": "(final File file)", "modifiers": "public static", "return": "ConfigurationFileImpl", "signature": "ConfigurationFileImpl fromFile(final File file)", "full_signature": "public static ConfigurationFileImpl fromFile(final File file)", "class_method_signature": "ConfigurationFileImpl.fromFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "ConfigurationFileImpl", "parameters": "(final String pathname)", "modifiers": "public", "return": "", "signature": " ConfigurationFileImpl(final String pathname)", "full_signature": "public  ConfigurationFileImpl(final String pathname)", "class_method_signature": "ConfigurationFileImpl.ConfigurationFileImpl(final String pathname)", "testcase": false, "constructor": true}, {"identifier": "ConfigurationFileImpl", "parameters": "(final String dirPath, final String fileName)", "modifiers": "public", "return": "", "signature": " ConfigurationFileImpl(final String dirPath, final String fileName)", "full_signature": "public  ConfigurationFileImpl(final String dirPath, final String fileName)", "class_method_signature": "ConfigurationFileImpl.ConfigurationFileImpl(final String dirPath, final String fileName)", "testcase": false, "constructor": true}, {"identifier": "ConfigurationFileImpl", "parameters": "(final File file)", "modifiers": "public", "return": "", "signature": " ConfigurationFileImpl(final File file)", "full_signature": "public  ConfigurationFileImpl(final File file)", "class_method_signature": "ConfigurationFileImpl.ConfigurationFileImpl(final File file)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "ConfigurationFileImpl.load()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void save()", "full_signature": "@Override public void save()", "class_method_signature": "ConfigurationFileImpl.save()", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(Properties props, BufferedWriter out, String comments)", "modifiers": "private", "return": "void", "signature": "void store(Properties props, BufferedWriter out, String comments)", "full_signature": "private void store(Properties props, BufferedWriter out, String comments)", "class_method_signature": "ConfigurationFileImpl.store(Properties props, BufferedWriter out, String comments)", "testcase": false, "constructor": false}, {"identifier": "convertString", "parameters": "(String theString, boolean escapeSpace)", "modifiers": "private", "return": "String", "signature": "String convertString(String theString, boolean escapeSpace)", "full_signature": "private String convertString(String theString, boolean escapeSpace)", "class_method_signature": "ConfigurationFileImpl.convertString(String theString, boolean escapeSpace)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConfigurationFileImpl.toString()", "testcase": false, "constructor": false}], "file": "dddlib-configuration/src/main/java/org/dayatang/configuration/impl/ConfigurationFileImpl.java"}, "focal_method": {"identifier": "fromFile", "parameters": "(final File file)", "modifiers": "public static", "return": "ConfigurationFileImpl", "body": "public static ConfigurationFileImpl fromFile(final File file) {\n\t\treturn new ConfigurationFileImpl(file);\n\t}", "signature": "ConfigurationFileImpl fromFile(final File file)", "full_signature": "public static ConfigurationFileImpl fromFile(final File file)", "class_method_signature": "ConfigurationFileImpl.fromFile(final File file)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9467906, "url": "https://github.com/dayatang/dddlib", "language": "Java", "is_fork": false, "fork_count": 202, "stargazer_count": 402, "size": 52576, "license": "licensed"}}