{"test_class": {"identifier": "UriUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "aether-transport-http/src/test/java/org/eclipse/aether/transport/http/UriUtilsTest.java"}, "test_case": {"identifier": "testResolve_BasePathNoTrailingSlash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolve_BasePathNoTrailingSlash()\n    {\n        URI base = URI.create( \"http://host/sub/d%20r\" );\n        assertEquals( \"http://host/sub/d%20r/file.jar\", resolve( base, \"file.jar\" ) );\n        assertEquals( \"http://host/sub/d%20r/dir/file.jar\", resolve( base, \"dir/file.jar\" ) );\n        assertEquals( \"http://host/sub/d%20r?arg=val\", resolve( base, \"?arg=val\" ) );\n        assertEquals( \"http://host/sub/d%20r/file?arg=val\", resolve( base, \"file?arg=val\" ) );\n        assertEquals( \"http://host/sub/d%20r/dir/file?arg=val\", resolve( base, \"dir/file?arg=val\" ) );\n    }", "signature": "void testResolve_BasePathNoTrailingSlash()", "full_signature": "@Test public void testResolve_BasePathNoTrailingSlash()", "class_method_signature": "UriUtilsTest.testResolve_BasePathNoTrailingSlash()", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "resolve", "assertEquals", "resolve", "assertEquals", "resolve", "assertEquals", "resolve", "assertEquals", "resolve"]}, "focal_class": {"identifier": "UriUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "resolve", "parameters": "( URI base, URI ref )", "modifiers": "public static", "return": "URI", "signature": "URI resolve( URI base, URI ref )", "full_signature": "public static URI resolve( URI base, URI ref )", "class_method_signature": "UriUtils.resolve( URI base, URI ref )", "testcase": false, "constructor": false}, {"identifier": "getDirectories", "parameters": "( URI base, URI uri )", "modifiers": "public static", "return": "List<URI>", "signature": "List<URI> getDirectories( URI base, URI uri )", "full_signature": "public static List<URI> getDirectories( URI base, URI uri )", "class_method_signature": "UriUtils.getDirectories( URI base, URI uri )", "testcase": false, "constructor": false}, {"identifier": "isBase", "parameters": "( URI base, URI uri )", "modifiers": "private static", "return": "boolean", "signature": "boolean isBase( URI base, URI uri )", "full_signature": "private static boolean isBase( URI base, URI uri )", "class_method_signature": "UriUtils.isBase( URI base, URI uri )", "testcase": false, "constructor": false}], "file": "aether-transport-http/src/main/java/org/eclipse/aether/transport/http/UriUtils.java"}, "focal_method": {"identifier": "resolve", "parameters": "( URI base, URI ref )", "modifiers": "public static", "return": "URI", "body": "public static URI resolve( URI base, URI ref )\n    {\n        String path = ref.getRawPath();\n        if ( path != null && path.length() > 0 )\n        {\n            path = base.getRawPath();\n            if ( path == null || !path.endsWith( \"/\" ) )\n            {\n                try\n                {\n                    base = new URI( base.getScheme(), base.getAuthority(), base.getPath() + '/', null, null );\n                }\n                catch ( URISyntaxException e )\n                {\n                    throw new IllegalStateException( e );\n                }\n            }\n        }\n        return URIUtils.resolve( base, ref );\n    }", "signature": "URI resolve( URI base, URI ref )", "full_signature": "public static URI resolve( URI base, URI ref )", "class_method_signature": "UriUtils.resolve( URI base, URI ref )", "testcase": false, "constructor": false, "invocations": ["getRawPath", "length", "getRawPath", "endsWith", "getScheme", "getAuthority", "getPath", "resolve"]}, "repository": {"repo_id": 2666578, "url": "https://github.com/eclipse/aether-core", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 55, "size": 3219, "license": "licensed"}}