{"test_class": {"identifier": "DefaultDeployerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Artifact artifact;", "modifier": "private", "type": "Artifact", "declarator": "artifact", "var_name": "artifact"}, {"original_string": "private DefaultMetadata metadata;", "modifier": "private", "type": "DefaultMetadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private DefaultRepositorySystemSession session;", "modifier": "private", "type": "DefaultRepositorySystemSession", "declarator": "session", "var_name": "session"}, {"original_string": "private StubRepositoryConnectorProvider connectorProvider;", "modifier": "private", "type": "StubRepositoryConnectorProvider", "declarator": "connectorProvider", "var_name": "connectorProvider"}, {"original_string": "private DefaultDeployer deployer;", "modifier": "private", "type": "DefaultDeployer", "declarator": "deployer", "var_name": "deployer"}, {"original_string": "private DeployRequest request;", "modifier": "private", "type": "DeployRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private RecordingRepositoryConnector connector;", "modifier": "private", "type": "RecordingRepositoryConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private RecordingRepositoryListener listener;", "modifier": "private", "type": "RecordingRepositoryListener", "declarator": "listener", "var_name": "listener"}], "file": "aether-impl/src/test/java/org/eclipse/aether/internal/impl/DefaultDeployerTest.java"}, "test_case": {"identifier": "testNullMetadataFile", "parameters": "()", "modifiers": "@Test( expected = DeploymentException.class ) public", "return": "void", "body": "@Test( expected = DeploymentException.class )\n    public void testNullMetadataFile()\n        throws DeploymentException\n    {\n        request.addArtifact( artifact.setFile( null ) );\n        deployer.deploy( session, request );\n    }", "signature": "void testNullMetadataFile()", "full_signature": "@Test( expected = DeploymentException.class ) public void testNullMetadataFile()", "class_method_signature": "DefaultDeployerTest.testNullMetadataFile()", "testcase": true, "constructor": false, "invocations": ["addArtifact", "setFile", "deploy"]}, "focal_class": {"identifier": "DefaultDeployer", "superclass": "", "interfaces": "implements Deployer, Service", "fields": [{"original_string": "private Logger logger = NullLoggerFactory.LOGGER;", "modifier": "private", "type": "Logger", "declarator": "logger = NullLoggerFactory.LOGGER", "var_name": "logger"}, {"original_string": "private FileProcessor fileProcessor;", "modifier": "private", "type": "FileProcessor", "declarator": "fileProcessor", "var_name": "fileProcessor"}, {"original_string": "private RepositoryEventDispatcher repositoryEventDispatcher;", "modifier": "private", "type": "RepositoryEventDispatcher", "declarator": "repositoryEventDispatcher", "var_name": "repositoryEventDispatcher"}, {"original_string": "private RepositoryConnectorProvider repositoryConnectorProvider;", "modifier": "private", "type": "RepositoryConnectorProvider", "declarator": "repositoryConnectorProvider", "var_name": "repositoryConnectorProvider"}, {"original_string": "private RemoteRepositoryManager remoteRepositoryManager;", "modifier": "private", "type": "RemoteRepositoryManager", "declarator": "remoteRepositoryManager", "var_name": "remoteRepositoryManager"}, {"original_string": "private UpdateCheckManager updateCheckManager;", "modifier": "private", "type": "UpdateCheckManager", "declarator": "updateCheckManager", "var_name": "updateCheckManager"}, {"original_string": "private Collection<MetadataGeneratorFactory> metadataFactories = new ArrayList<MetadataGeneratorFactory>();", "modifier": "private", "type": "Collection<MetadataGeneratorFactory>", "declarator": "metadataFactories = new ArrayList<MetadataGeneratorFactory>()", "var_name": "metadataFactories"}, {"original_string": "private SyncContextFactory syncContextFactory;", "modifier": "private", "type": "SyncContextFactory", "declarator": "syncContextFactory", "var_name": "syncContextFactory"}, {"original_string": "private OfflineController offlineController;", "modifier": "private", "type": "OfflineController", "declarator": "offlineController", "var_name": "offlineController"}], "methods": [{"identifier": "DefaultDeployer", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultDeployer()", "full_signature": "public  DefaultDeployer()", "class_method_signature": "DefaultDeployer.DefaultDeployer()", "testcase": false, "constructor": true}, {"identifier": "DefaultDeployer", "parameters": "( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                     RepositoryConnectorProvider repositoryConnectorProvider,\n                     RemoteRepositoryManager remoteRepositoryManager, UpdateCheckManager updateCheckManager,\n                     Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                     OfflineController offlineController, LoggerFactory loggerFactory )", "modifiers": "@Inject", "return": "", "signature": " DefaultDeployer( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                     RepositoryConnectorProvider repositoryConnectorProvider,\n                     RemoteRepositoryManager remoteRepositoryManager, UpdateCheckManager updateCheckManager,\n                     Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                     OfflineController offlineController, LoggerFactory loggerFactory )", "full_signature": "@Inject  DefaultDeployer( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                     RepositoryConnectorProvider repositoryConnectorProvider,\n                     RemoteRepositoryManager remoteRepositoryManager, UpdateCheckManager updateCheckManager,\n                     Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                     OfflineController offlineController, LoggerFactory loggerFactory )", "class_method_signature": "DefaultDeployer.DefaultDeployer( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                     RepositoryConnectorProvider repositoryConnectorProvider,\n                     RemoteRepositoryManager remoteRepositoryManager, UpdateCheckManager updateCheckManager,\n                     Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                     OfflineController offlineController, LoggerFactory loggerFactory )", "testcase": false, "constructor": true}, {"identifier": "initService", "parameters": "( ServiceLocator locator )", "modifiers": "public", "return": "void", "signature": "void initService( ServiceLocator locator )", "full_signature": "public void initService( ServiceLocator locator )", "class_method_signature": "DefaultDeployer.initService( ServiceLocator locator )", "testcase": false, "constructor": false}, {"identifier": "setLoggerFactory", "parameters": "( LoggerFactory loggerFactory )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setLoggerFactory( LoggerFactory loggerFactory )", "full_signature": "public DefaultDeployer setLoggerFactory( LoggerFactory loggerFactory )", "class_method_signature": "DefaultDeployer.setLoggerFactory( LoggerFactory loggerFactory )", "testcase": false, "constructor": false}, {"identifier": "setFileProcessor", "parameters": "( FileProcessor fileProcessor )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setFileProcessor( FileProcessor fileProcessor )", "full_signature": "public DefaultDeployer setFileProcessor( FileProcessor fileProcessor )", "class_method_signature": "DefaultDeployer.setFileProcessor( FileProcessor fileProcessor )", "testcase": false, "constructor": false}, {"identifier": "setRepositoryEventDispatcher", "parameters": "( RepositoryEventDispatcher repositoryEventDispatcher )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setRepositoryEventDispatcher( RepositoryEventDispatcher repositoryEventDispatcher )", "full_signature": "public DefaultDeployer setRepositoryEventDispatcher( RepositoryEventDispatcher repositoryEventDispatcher )", "class_method_signature": "DefaultDeployer.setRepositoryEventDispatcher( RepositoryEventDispatcher repositoryEventDispatcher )", "testcase": false, "constructor": false}, {"identifier": "setRepositoryConnectorProvider", "parameters": "( RepositoryConnectorProvider repositoryConnectorProvider )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setRepositoryConnectorProvider( RepositoryConnectorProvider repositoryConnectorProvider )", "full_signature": "public DefaultDeployer setRepositoryConnectorProvider( RepositoryConnectorProvider repositoryConnectorProvider )", "class_method_signature": "DefaultDeployer.setRepositoryConnectorProvider( RepositoryConnectorProvider repositoryConnectorProvider )", "testcase": false, "constructor": false}, {"identifier": "setRemoteRepositoryManager", "parameters": "( RemoteRepositoryManager remoteRepositoryManager )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setRemoteRepositoryManager( RemoteRepositoryManager remoteRepositoryManager )", "full_signature": "public DefaultDeployer setRemoteRepositoryManager( RemoteRepositoryManager remoteRepositoryManager )", "class_method_signature": "DefaultDeployer.setRemoteRepositoryManager( RemoteRepositoryManager remoteRepositoryManager )", "testcase": false, "constructor": false}, {"identifier": "setUpdateCheckManager", "parameters": "( UpdateCheckManager updateCheckManager )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setUpdateCheckManager( UpdateCheckManager updateCheckManager )", "full_signature": "public DefaultDeployer setUpdateCheckManager( UpdateCheckManager updateCheckManager )", "class_method_signature": "DefaultDeployer.setUpdateCheckManager( UpdateCheckManager updateCheckManager )", "testcase": false, "constructor": false}, {"identifier": "addMetadataGeneratorFactory", "parameters": "( MetadataGeneratorFactory factory )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer addMetadataGeneratorFactory( MetadataGeneratorFactory factory )", "full_signature": "public DefaultDeployer addMetadataGeneratorFactory( MetadataGeneratorFactory factory )", "class_method_signature": "DefaultDeployer.addMetadataGeneratorFactory( MetadataGeneratorFactory factory )", "testcase": false, "constructor": false}, {"identifier": "setMetadataGeneratorFactories", "parameters": "( Collection<MetadataGeneratorFactory> metadataFactories )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setMetadataGeneratorFactories( Collection<MetadataGeneratorFactory> metadataFactories )", "full_signature": "public DefaultDeployer setMetadataGeneratorFactories( Collection<MetadataGeneratorFactory> metadataFactories )", "class_method_signature": "DefaultDeployer.setMetadataGeneratorFactories( Collection<MetadataGeneratorFactory> metadataFactories )", "testcase": false, "constructor": false}, {"identifier": "setSyncContextFactory", "parameters": "( SyncContextFactory syncContextFactory )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setSyncContextFactory( SyncContextFactory syncContextFactory )", "full_signature": "public DefaultDeployer setSyncContextFactory( SyncContextFactory syncContextFactory )", "class_method_signature": "DefaultDeployer.setSyncContextFactory( SyncContextFactory syncContextFactory )", "testcase": false, "constructor": false}, {"identifier": "setOfflineController", "parameters": "( OfflineController offlineController )", "modifiers": "public", "return": "DefaultDeployer", "signature": "DefaultDeployer setOfflineController( OfflineController offlineController )", "full_signature": "public DefaultDeployer setOfflineController( OfflineController offlineController )", "class_method_signature": "DefaultDeployer.setOfflineController( OfflineController offlineController )", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "( RepositorySystemSession session, DeployRequest request )", "modifiers": "public", "return": "DeployResult", "signature": "DeployResult deploy( RepositorySystemSession session, DeployRequest request )", "full_signature": "public DeployResult deploy( RepositorySystemSession session, DeployRequest request )", "class_method_signature": "DefaultDeployer.deploy( RepositorySystemSession session, DeployRequest request )", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "( SyncContext syncContext, RepositorySystemSession session, DeployRequest request )", "modifiers": "private", "return": "DeployResult", "signature": "DeployResult deploy( SyncContext syncContext, RepositorySystemSession session, DeployRequest request )", "full_signature": "private DeployResult deploy( SyncContext syncContext, RepositorySystemSession session, DeployRequest request )", "class_method_signature": "DefaultDeployer.deploy( SyncContext syncContext, RepositorySystemSession session, DeployRequest request )", "testcase": false, "constructor": false}, {"identifier": "getMetadataGenerators", "parameters": "( RepositorySystemSession session,\n                                                                     DeployRequest request )", "modifiers": "private", "return": "List<? extends MetadataGenerator>", "signature": "List<? extends MetadataGenerator> getMetadataGenerators( RepositorySystemSession session,\n                                                                     DeployRequest request )", "full_signature": "private List<? extends MetadataGenerator> getMetadataGenerators( RepositorySystemSession session,\n                                                                     DeployRequest request )", "class_method_signature": "DefaultDeployer.getMetadataGenerators( RepositorySystemSession session,\n                                                                     DeployRequest request )", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "( Collection<MetadataUpload> metadataUploads, RepositorySystemSession session,\n                         Metadata metadata, RemoteRepository repository, RepositoryConnector connector,\n                         EventCatapult catapult )", "modifiers": "private", "return": "void", "signature": "void upload( Collection<MetadataUpload> metadataUploads, RepositorySystemSession session,\n                         Metadata metadata, RemoteRepository repository, RepositoryConnector connector,\n                         EventCatapult catapult )", "full_signature": "private void upload( Collection<MetadataUpload> metadataUploads, RepositorySystemSession session,\n                         Metadata metadata, RemoteRepository repository, RepositoryConnector connector,\n                         EventCatapult catapult )", "class_method_signature": "DefaultDeployer.upload( Collection<MetadataUpload> metadataUploads, RepositorySystemSession session,\n                         Metadata metadata, RemoteRepository repository, RepositoryConnector connector,\n                         EventCatapult catapult )", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "( RepositorySystemSession session, RemoteRepository repository,\n                                        Metadata.Nature nature )", "modifiers": "private", "return": "RepositoryPolicy", "signature": "RepositoryPolicy getPolicy( RepositorySystemSession session, RemoteRepository repository,\n                                        Metadata.Nature nature )", "full_signature": "private RepositoryPolicy getPolicy( RepositorySystemSession session, RemoteRepository repository,\n                                        Metadata.Nature nature )", "class_method_signature": "DefaultDeployer.getPolicy( RepositorySystemSession session, RemoteRepository repository,\n                                        Metadata.Nature nature )", "testcase": false, "constructor": false}], "file": "aether-impl/src/main/java/org/eclipse/aether/internal/impl/DefaultDeployer.java"}, "focal_method": {"identifier": "deploy", "parameters": "( RepositorySystemSession session, DeployRequest request )", "modifiers": "public", "return": "DeployResult", "body": "public DeployResult deploy( RepositorySystemSession session, DeployRequest request )\n        throws DeploymentException\n    {\n        try\n        {\n            Utils.checkOffline( session, offlineController, request.getRepository() );\n        }\n        catch ( RepositoryOfflineException e )\n        {\n            throw new DeploymentException( \"Cannot deploy while \" + request.getRepository().getId() + \" (\"\n                + request.getRepository().getUrl() + \") is in offline mode\", e );\n        }\n\n        SyncContext syncContext = syncContextFactory.newInstance( session, false );\n\n        try\n        {\n            return deploy( syncContext, session, request );\n        }\n        finally\n        {\n            syncContext.close();\n        }\n    }", "signature": "DeployResult deploy( RepositorySystemSession session, DeployRequest request )", "full_signature": "public DeployResult deploy( RepositorySystemSession session, DeployRequest request )", "class_method_signature": "DefaultDeployer.deploy( RepositorySystemSession session, DeployRequest request )", "testcase": false, "constructor": false, "invocations": ["checkOffline", "getRepository", "getId", "getRepository", "getUrl", "getRepository", "newInstance", "deploy", "close"]}, "repository": {"repo_id": 2666578, "url": "https://github.com/eclipse/aether-core", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 55, "size": 3219, "license": "licensed"}}