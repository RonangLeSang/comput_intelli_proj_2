{"test_class": {"identifier": "DefaultInstallerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Artifact artifact;", "modifier": "private", "type": "Artifact", "declarator": "artifact", "var_name": "artifact"}, {"original_string": "private Metadata metadata;", "modifier": "private", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private DefaultRepositorySystemSession session;", "modifier": "private", "type": "DefaultRepositorySystemSession", "declarator": "session", "var_name": "session"}, {"original_string": "private String localArtifactPath;", "modifier": "private", "type": "String", "declarator": "localArtifactPath", "var_name": "localArtifactPath"}, {"original_string": "private String localMetadataPath;", "modifier": "private", "type": "String", "declarator": "localMetadataPath", "var_name": "localMetadataPath"}, {"original_string": "private DefaultInstaller installer;", "modifier": "private", "type": "DefaultInstaller", "declarator": "installer", "var_name": "installer"}, {"original_string": "private InstallRequest request;", "modifier": "private", "type": "InstallRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private RecordingRepositoryListener listener;", "modifier": "private", "type": "RecordingRepositoryListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private File localArtifactFile;", "modifier": "private", "type": "File", "declarator": "localArtifactFile", "var_name": "localArtifactFile"}, {"original_string": "private TestLocalRepositoryManager lrm;", "modifier": "private", "type": "TestLocalRepositoryManager", "declarator": "lrm", "var_name": "lrm"}], "file": "aether-impl/src/test/java/org/eclipse/aether/internal/impl/DefaultInstallerTest.java"}, "test_case": {"identifier": "testSuccessfulInstall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccessfulInstall()\n        throws InstallationException, UnsupportedEncodingException, IOException\n    {\n        File artifactFile =\n            new File( session.getLocalRepositoryManager().getRepository().getBasedir(), localArtifactPath );\n        File metadataFile =\n            new File( session.getLocalRepositoryManager().getRepository().getBasedir(), localMetadataPath );\n\n        artifactFile.delete();\n        metadataFile.delete();\n\n        request.addArtifact( artifact );\n        request.addMetadata( metadata );\n\n        InstallResult result = installer.install( session, request );\n\n        assertTrue( artifactFile.exists() );\n        assertEquals( \"artifact\", TestFileUtils.readString( artifactFile ) );\n\n        assertTrue( metadataFile.exists() );\n        assertEquals( \"metadata\", TestFileUtils.readString( metadataFile ) );\n\n        assertEquals( result.getRequest(), request );\n\n        assertEquals( result.getArtifacts().size(), 1 );\n        assertTrue( result.getArtifacts().contains( artifact ) );\n\n        assertEquals( result.getMetadata().size(), 1 );\n        assertTrue( result.getMetadata().contains( metadata ) );\n\n        assertEquals( 1, lrm.getMetadataRegistration().size() );\n        assertTrue( lrm.getMetadataRegistration().contains( metadata ) );\n        assertEquals( 1, lrm.getArtifactRegistration().size() );\n        assertTrue( lrm.getArtifactRegistration().contains( artifact ) );\n    }", "signature": "void testSuccessfulInstall()", "full_signature": "@Test public void testSuccessfulInstall()", "class_method_signature": "DefaultInstallerTest.testSuccessfulInstall()", "testcase": true, "constructor": false, "invocations": ["getBasedir", "getRepository", "getLocalRepositoryManager", "getBasedir", "getRepository", "getLocalRepositoryManager", "delete", "delete", "addArtifact", "addMetadata", "install", "assertTrue", "exists", "assertEquals", "readString", "assertTrue", "exists", "assertEquals", "readString", "assertEquals", "getRequest", "assertEquals", "size", "getArtifacts", "assertTrue", "contains", "getArtifacts", "assertEquals", "size", "getMetadata", "assertTrue", "contains", "getMetadata", "assertEquals", "size", "getMetadataRegistration", "assertTrue", "contains", "getMetadataRegistration", "assertEquals", "size", "getArtifactRegistration", "assertTrue", "contains", "getArtifactRegistration"]}, "focal_class": {"identifier": "DefaultInstaller", "superclass": "", "interfaces": "implements Installer, Service", "fields": [{"original_string": "private Logger logger = NullLoggerFactory.LOGGER;", "modifier": "private", "type": "Logger", "declarator": "logger = NullLoggerFactory.LOGGER", "var_name": "logger"}, {"original_string": "private FileProcessor fileProcessor;", "modifier": "private", "type": "FileProcessor", "declarator": "fileProcessor", "var_name": "fileProcessor"}, {"original_string": "private RepositoryEventDispatcher repositoryEventDispatcher;", "modifier": "private", "type": "RepositoryEventDispatcher", "declarator": "repositoryEventDispatcher", "var_name": "repositoryEventDispatcher"}, {"original_string": "private Collection<MetadataGeneratorFactory> metadataFactories = new ArrayList<MetadataGeneratorFactory>();", "modifier": "private", "type": "Collection<MetadataGeneratorFactory>", "declarator": "metadataFactories = new ArrayList<MetadataGeneratorFactory>()", "var_name": "metadataFactories"}, {"original_string": "private SyncContextFactory syncContextFactory;", "modifier": "private", "type": "SyncContextFactory", "declarator": "syncContextFactory", "var_name": "syncContextFactory"}], "methods": [{"identifier": "DefaultInstaller", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultInstaller()", "full_signature": "public  DefaultInstaller()", "class_method_signature": "DefaultInstaller.DefaultInstaller()", "testcase": false, "constructor": true}, {"identifier": "DefaultInstaller", "parameters": "( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                      Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                      LoggerFactory loggerFactory )", "modifiers": "@Inject", "return": "", "signature": " DefaultInstaller( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                      Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                      LoggerFactory loggerFactory )", "full_signature": "@Inject  DefaultInstaller( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                      Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                      LoggerFactory loggerFactory )", "class_method_signature": "DefaultInstaller.DefaultInstaller( FileProcessor fileProcessor, RepositoryEventDispatcher repositoryEventDispatcher,\n                      Set<MetadataGeneratorFactory> metadataFactories, SyncContextFactory syncContextFactory,\n                      LoggerFactory loggerFactory )", "testcase": false, "constructor": true}, {"identifier": "initService", "parameters": "( ServiceLocator locator )", "modifiers": "public", "return": "void", "signature": "void initService( ServiceLocator locator )", "full_signature": "public void initService( ServiceLocator locator )", "class_method_signature": "DefaultInstaller.initService( ServiceLocator locator )", "testcase": false, "constructor": false}, {"identifier": "setLoggerFactory", "parameters": "( LoggerFactory loggerFactory )", "modifiers": "public", "return": "DefaultInstaller", "signature": "DefaultInstaller setLoggerFactory( LoggerFactory loggerFactory )", "full_signature": "public DefaultInstaller setLoggerFactory( LoggerFactory loggerFactory )", "class_method_signature": "DefaultInstaller.setLoggerFactory( LoggerFactory loggerFactory )", "testcase": false, "constructor": false}, {"identifier": "setFileProcessor", "parameters": "( FileProcessor fileProcessor )", "modifiers": "public", "return": "DefaultInstaller", "signature": "DefaultInstaller setFileProcessor( FileProcessor fileProcessor )", "full_signature": "public DefaultInstaller setFileProcessor( FileProcessor fileProcessor )", "class_method_signature": "DefaultInstaller.setFileProcessor( FileProcessor fileProcessor )", "testcase": false, "constructor": false}, {"identifier": "setRepositoryEventDispatcher", "parameters": "( RepositoryEventDispatcher repositoryEventDispatcher )", "modifiers": "public", "return": "DefaultInstaller", "signature": "DefaultInstaller setRepositoryEventDispatcher( RepositoryEventDispatcher repositoryEventDispatcher )", "full_signature": "public DefaultInstaller setRepositoryEventDispatcher( RepositoryEventDispatcher repositoryEventDispatcher )", "class_method_signature": "DefaultInstaller.setRepositoryEventDispatcher( RepositoryEventDispatcher repositoryEventDispatcher )", "testcase": false, "constructor": false}, {"identifier": "addMetadataGeneratorFactory", "parameters": "( MetadataGeneratorFactory factory )", "modifiers": "public", "return": "DefaultInstaller", "signature": "DefaultInstaller addMetadataGeneratorFactory( MetadataGeneratorFactory factory )", "full_signature": "public DefaultInstaller addMetadataGeneratorFactory( MetadataGeneratorFactory factory )", "class_method_signature": "DefaultInstaller.addMetadataGeneratorFactory( MetadataGeneratorFactory factory )", "testcase": false, "constructor": false}, {"identifier": "setMetadataGeneratorFactories", "parameters": "( Collection<MetadataGeneratorFactory> metadataFactories )", "modifiers": "public", "return": "DefaultInstaller", "signature": "DefaultInstaller setMetadataGeneratorFactories( Collection<MetadataGeneratorFactory> metadataFactories )", "full_signature": "public DefaultInstaller setMetadataGeneratorFactories( Collection<MetadataGeneratorFactory> metadataFactories )", "class_method_signature": "DefaultInstaller.setMetadataGeneratorFactories( Collection<MetadataGeneratorFactory> metadataFactories )", "testcase": false, "constructor": false}, {"identifier": "setSyncContextFactory", "parameters": "( SyncContextFactory syncContextFactory )", "modifiers": "public", "return": "DefaultInstaller", "signature": "DefaultInstaller setSyncContextFactory( SyncContextFactory syncContextFactory )", "full_signature": "public DefaultInstaller setSyncContextFactory( SyncContextFactory syncContextFactory )", "class_method_signature": "DefaultInstaller.setSyncContextFactory( SyncContextFactory syncContextFactory )", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "( RepositorySystemSession session, InstallRequest request )", "modifiers": "public", "return": "InstallResult", "signature": "InstallResult install( RepositorySystemSession session, InstallRequest request )", "full_signature": "public InstallResult install( RepositorySystemSession session, InstallRequest request )", "class_method_signature": "DefaultInstaller.install( RepositorySystemSession session, InstallRequest request )", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "( SyncContext syncContext, RepositorySystemSession session, InstallRequest request )", "modifiers": "private", "return": "InstallResult", "signature": "InstallResult install( SyncContext syncContext, RepositorySystemSession session, InstallRequest request )", "full_signature": "private InstallResult install( SyncContext syncContext, RepositorySystemSession session, InstallRequest request )", "class_method_signature": "DefaultInstaller.install( SyncContext syncContext, RepositorySystemSession session, InstallRequest request )", "testcase": false, "constructor": false}, {"identifier": "getMetadataGenerators", "parameters": "( RepositorySystemSession session,\n                                                                     InstallRequest request )", "modifiers": "private", "return": "List<? extends MetadataGenerator>", "signature": "List<? extends MetadataGenerator> getMetadataGenerators( RepositorySystemSession session,\n                                                                     InstallRequest request )", "full_signature": "private List<? extends MetadataGenerator> getMetadataGenerators( RepositorySystemSession session,\n                                                                     InstallRequest request )", "class_method_signature": "DefaultInstaller.getMetadataGenerators( RepositorySystemSession session,\n                                                                     InstallRequest request )", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "( RepositorySystemSession session, RequestTrace trace, Artifact artifact )", "modifiers": "private", "return": "void", "signature": "void install( RepositorySystemSession session, RequestTrace trace, Artifact artifact )", "full_signature": "private void install( RepositorySystemSession session, RequestTrace trace, Artifact artifact )", "class_method_signature": "DefaultInstaller.install( RepositorySystemSession session, RequestTrace trace, Artifact artifact )", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "( RepositorySystemSession session, RequestTrace trace, Metadata metadata )", "modifiers": "private", "return": "void", "signature": "void install( RepositorySystemSession session, RequestTrace trace, Metadata metadata )", "full_signature": "private void install( RepositorySystemSession session, RequestTrace trace, Metadata metadata )", "class_method_signature": "DefaultInstaller.install( RepositorySystemSession session, RequestTrace trace, Metadata metadata )", "testcase": false, "constructor": false}, {"identifier": "artifactInstalling", "parameters": "( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                     File dstFile )", "modifiers": "private", "return": "void", "signature": "void artifactInstalling( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                     File dstFile )", "full_signature": "private void artifactInstalling( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                     File dstFile )", "class_method_signature": "DefaultInstaller.artifactInstalling( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                     File dstFile )", "testcase": false, "constructor": false}, {"identifier": "artifactInstalled", "parameters": "( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                    File dstFile, Exception exception )", "modifiers": "private", "return": "void", "signature": "void artifactInstalled( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                    File dstFile, Exception exception )", "full_signature": "private void artifactInstalled( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                    File dstFile, Exception exception )", "class_method_signature": "DefaultInstaller.artifactInstalled( RepositorySystemSession session, RequestTrace trace, Artifact artifact,\n                                    File dstFile, Exception exception )", "testcase": false, "constructor": false}, {"identifier": "metadataInstalling", "parameters": "( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     File dstFile )", "modifiers": "private", "return": "void", "signature": "void metadataInstalling( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     File dstFile )", "full_signature": "private void metadataInstalling( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     File dstFile )", "class_method_signature": "DefaultInstaller.metadataInstalling( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     File dstFile )", "testcase": false, "constructor": false}, {"identifier": "metadataInstalled", "parameters": "( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                    File dstFile, Exception exception )", "modifiers": "private", "return": "void", "signature": "void metadataInstalled( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                    File dstFile, Exception exception )", "full_signature": "private void metadataInstalled( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                    File dstFile, Exception exception )", "class_method_signature": "DefaultInstaller.metadataInstalled( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                    File dstFile, Exception exception )", "testcase": false, "constructor": false}], "file": "aether-impl/src/main/java/org/eclipse/aether/internal/impl/DefaultInstaller.java"}, "focal_method": {"identifier": "install", "parameters": "( RepositorySystemSession session, InstallRequest request )", "modifiers": "public", "return": "InstallResult", "body": "public InstallResult install( RepositorySystemSession session, InstallRequest request )\n        throws InstallationException\n    {\n        SyncContext syncContext = syncContextFactory.newInstance( session, false );\n\n        try\n        {\n            return install( syncContext, session, request );\n        }\n        finally\n        {\n            syncContext.close();\n        }\n    }", "signature": "InstallResult install( RepositorySystemSession session, InstallRequest request )", "full_signature": "public InstallResult install( RepositorySystemSession session, InstallRequest request )", "class_method_signature": "DefaultInstaller.install( RepositorySystemSession session, InstallRequest request )", "testcase": false, "constructor": false, "invocations": ["newInstance", "install", "close"]}, "repository": {"repo_id": 2666578, "url": "https://github.com/eclipse/aether-core", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 55, "size": 3219, "license": "licensed"}}