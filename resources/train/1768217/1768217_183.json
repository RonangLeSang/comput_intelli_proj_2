{"test_class": {"identifier": "StreamingTemplateTest", "superclass": "extends AbstractTwitterApiTest", "interfaces": "", "fields": [], "file": "spring-social-twitter/src/test/java/org/springframework/social/twitter/api/impl/StreamingTemplateTest.java"}, "test_case": {"identifier": "filter_streamClosedByTwitter", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n\t@Ignore\n\tpublic void filter_streamClosedByTwitter() throws Exception {\n\t\tfor(int i=0;i<3;i++) { // expect the stream to be reopened 3 times\n\t\t\tmockServer.expect(requestTo(\"https://stream.twitter.com/1/statuses/filter.json\"))\n\t\t\t\t.andExpect(method(POST))\n\t\t\t.andExpect(content().string(\"track=dallas\"))\n\t\t\t\t.andRespond(withSuccess(new ClassPathResource(\"filter-stream-track.json\"), APPLICATION_JSON));\n\t\t}\n\t\t\n\t\tMockStreamListener listener = new MockStreamListener(21) {\n\t\t\tprotected void shutdown() {\n//\t\t\t\ttwitter.streamingOperations().stopStreaming();\n\t\t\t}\n\t\t};\n\t\t\n\t\ttwitter.streamingOperations().filter(\"dallas\", Arrays.<StreamListener>asList(listener));\n\t\tThread.sleep(1000); // delay while stream is read\n\t\tassertEquals(12, listener.tweetsReceived.size());\n\t\tassertEquals(6, listener.deletesReceived.size());\n\t\tassertEquals(3, listener.limitsReceived.size());\n\t}", "signature": "void filter_streamClosedByTwitter()", "full_signature": "@Test @Ignore public void filter_streamClosedByTwitter()", "class_method_signature": "StreamingTemplateTest.filter_streamClosedByTwitter()", "testcase": true, "constructor": false, "invocations": ["andRespond", "andExpect", "andExpect", "expect", "requestTo", "method", "string", "content", "withSuccess", "filter", "streamingOperations", "asList", "sleep", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "StreamingTemplate", "superclass": "extends AbstractTwitterOperations", "interfaces": "implements StreamingOperations", "fields": [{"original_string": "private final RestTemplate restTemplate;", "modifier": "private final", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private static final String SAMPLE_STREAM_URL = \"https://stream.twitter.com/1.1/statuses/sample.json\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_STREAM_URL = \"https://stream.twitter.com/1.1/statuses/sample.json\"", "var_name": "SAMPLE_STREAM_URL"}, {"original_string": "private static final String FIREHOSE_STREAM_URL = \"https://stream.twitter.com/1.1/statuses/firehose.json\";", "modifier": "private static final", "type": "String", "declarator": "FIREHOSE_STREAM_URL = \"https://stream.twitter.com/1.1/statuses/firehose.json\"", "var_name": "FIREHOSE_STREAM_URL"}, {"original_string": "private static final String FILTERED_STREAM_URL = \"https://stream.twitter.com/1.1/statuses/filter.json\";", "modifier": "private static final", "type": "String", "declarator": "FILTERED_STREAM_URL = \"https://stream.twitter.com/1.1/statuses/filter.json\"", "var_name": "FILTERED_STREAM_URL"}, {"original_string": "private static final String USER_STREAM_URL = \"https://userstream.twitter.com/1.1/user.json\";", "modifier": "private static final", "type": "String", "declarator": "USER_STREAM_URL = \"https://userstream.twitter.com/1.1/user.json\"", "var_name": "USER_STREAM_URL"}, {"original_string": "private static final LinkedMultiValueMap<String, String> EMPTY_BODY = new LinkedMultiValueMap<String, String>();", "modifier": "private static final", "type": "LinkedMultiValueMap<String, String>", "declarator": "EMPTY_BODY = new LinkedMultiValueMap<String, String>()", "var_name": "EMPTY_BODY"}], "methods": [{"identifier": "StreamingTemplate", "parameters": "(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "modifiers": "public", "return": "", "signature": " StreamingTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "full_signature": "public  StreamingTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "class_method_signature": "StreamingTemplate.StreamingTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "testcase": false, "constructor": true}, {"identifier": "firehose", "parameters": "(final List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "signature": "Stream firehose(final List<StreamListener> listeners)", "full_signature": "public Stream firehose(final List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.firehose(final List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "firehose", "parameters": "(final int backfill, final List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "signature": "Stream firehose(final int backfill, final List<StreamListener> listeners)", "full_signature": "public Stream firehose(final int backfill, final List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.firehose(final int backfill, final List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "(final List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "signature": "Stream sample(final List<StreamListener> listeners)", "full_signature": "public Stream sample(final List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.sample(final List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(String trackKeywords, List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "signature": "Stream filter(String trackKeywords, List<StreamListener> listeners)", "full_signature": "public Stream filter(String trackKeywords, List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.filter(String trackKeywords, List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(final FilterStreamParameters parameters, final List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "signature": "Stream filter(final FilterStreamParameters parameters, final List<StreamListener> listeners)", "full_signature": "public Stream filter(final FilterStreamParameters parameters, final List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.filter(final FilterStreamParameters parameters, final List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "user", "parameters": "(List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "signature": "Stream user(List<StreamListener> listeners)", "full_signature": "public Stream user(List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.user(List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "user", "parameters": "(final UserStreamParameters parameters, final List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "signature": "Stream user(final UserStreamParameters parameters, final List<StreamListener> listeners)", "full_signature": "public Stream user(final UserStreamParameters parameters, final List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.user(final UserStreamParameters parameters, final List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "createStream", "parameters": "(HttpMethod method, String streamUrl, MultiValueMap<String, String> body, List<StreamListener> listeners)", "modifiers": "private", "return": "StreamReader", "signature": "StreamReader createStream(HttpMethod method, String streamUrl, MultiValueMap<String, String> body, List<StreamListener> listeners)", "full_signature": "private StreamReader createStream(HttpMethod method, String streamUrl, MultiValueMap<String, String> body, List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.createStream(HttpMethod method, String streamUrl, MultiValueMap<String, String> body, List<StreamListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "executeRequest", "parameters": "(HttpMethod method, String url, MultiValueMap<String, String> body)", "modifiers": "private", "return": "ClientHttpResponse", "signature": "ClientHttpResponse executeRequest(HttpMethod method, String url, MultiValueMap<String, String> body)", "full_signature": "private ClientHttpResponse executeRequest(HttpMethod method, String url, MultiValueMap<String, String> body)", "class_method_signature": "StreamingTemplate.executeRequest(HttpMethod method, String url, MultiValueMap<String, String> body)", "testcase": false, "constructor": false}, {"identifier": "createFormUrlEncodedBodyString", "parameters": "(MultiValueMap<String, String> body)", "modifiers": "private", "return": "String", "signature": "String createFormUrlEncodedBodyString(MultiValueMap<String, String> body)", "full_signature": "private String createFormUrlEncodedBodyString(MultiValueMap<String, String> body)", "class_method_signature": "StreamingTemplate.createFormUrlEncodedBodyString(MultiValueMap<String, String> body)", "testcase": false, "constructor": false}, {"identifier": "formEncode", "parameters": "(String data)", "modifiers": "private", "return": "String", "signature": "String formEncode(String data)", "full_signature": "private String formEncode(String data)", "class_method_signature": "StreamingTemplate.formEncode(String data)", "testcase": false, "constructor": false}], "file": "spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/StreamingTemplate.java"}, "focal_method": {"identifier": "filter", "parameters": "(String trackKeywords, List<StreamListener> listeners)", "modifiers": "public", "return": "Stream", "body": "public Stream filter(String trackKeywords, List<StreamListener> listeners) {\n\t\treturn filter((FilterStreamParameters) new FilterStreamParameters().track(trackKeywords), listeners);\n\t}", "signature": "Stream filter(String trackKeywords, List<StreamListener> listeners)", "full_signature": "public Stream filter(String trackKeywords, List<StreamListener> listeners)", "class_method_signature": "StreamingTemplate.filter(String trackKeywords, List<StreamListener> listeners)", "testcase": false, "constructor": false, "invocations": ["filter", "track"]}, "repository": {"repo_id": 1768217, "url": "https://github.com/spring-projects/spring-social-twitter", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 114, "size": 6567, "license": "licensed"}}