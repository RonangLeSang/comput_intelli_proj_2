{"test_class": {"identifier": "GeoTemplateTest", "superclass": "extends AbstractTwitterApiTest", "interfaces": "", "fields": [], "file": "spring-social-twitter/src/test/java/org/springframework/social/twitter/api/impl/GeoTemplateTest.java"}, "test_case": {"identifier": "getPlace_multipolygonGeometry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getPlace_multipolygonGeometry() {\n\t\tmockServer.expect(requestTo(\"https://api.twitter.com/1.1/geo/id/0bba15b36bd9e8cc.json\"))\n\t\t\t.andExpect(method(GET))\n\t\t\t.andRespond(withSuccess(jsonResource(\"geo-place-multipolygon-geometry\"), APPLICATION_JSON));\n\t\tPlace place = twitter.geoOperations().getPlace(\"0bba15b36bd9e8cc\");\n\t\tGeometry geometry = place.getGeometry();\n\t\tassertEquals(GeometryType.MULTIPOLYGON, geometry.getType());\n\t\tList<List<GeoPoint>> coordinates = geometry.getCoordinates();\n\t\tassertEquals(3, coordinates.size());\n\t\tList<GeoPoint> poly1 = coordinates.get(0);\n\t\tassertEquals(28.421849, poly1.get(0).getLatitude(), 0.000001);\n\t\tassertEquals(-81.359005, poly1.get(0).getLongitude(), 0.000001);\n\t\tassertEquals(28.422499, poly1.get(1).getLatitude(), 0.000001);\n\t\tassertEquals(-81.357395, poly1.get(1).getLongitude(), 0.000001);\n\t\tassertEquals(28.422622, poly1.get(2).getLatitude(), 0.000001);\n\t\tassertEquals(-81.357098, poly1.get(2).getLongitude(), 0.000001);\n\t\tassertEquals(28.421602, poly1.get(3).getLatitude(), 0.000001);\n\t\tassertEquals(-81.357104, poly1.get(3).getLongitude(), 0.000001);\n\t\tassertEquals(28.421849, poly1.get(4).getLatitude(), 0.000001);\n\t\tassertEquals(-81.359005, poly1.get(4).getLongitude(), 0.000001);\n\t\tList<GeoPoint> poly2 = coordinates.get(1);\n\t\tassertEquals(28.507288, poly2.get(0).getLatitude(), 0.000001);\n\t\tassertEquals(-81.285984, poly2.get(0).getLongitude(), 0.000001);\n\t\tassertEquals(28.507449, poly2.get(1).getLatitude(), 0.000001);\n\t\tassertEquals(-81.285821, poly2.get(1).getLongitude(), 0.000001);\n\t\tassertEquals(28.50598, poly2.get(2).getLatitude(), 0.000001);\n\t\tassertEquals(-81.285357, poly2.get(2).getLongitude(), 0.000001);\n\t\tassertEquals(28.50598, poly2.get(3).getLatitude(), 0.000001);\n\t\tassertEquals(-81.285469, poly2.get(3).getLongitude(), 0.000001);\n\t\tassertEquals(28.507288, poly2.get(4).getLatitude(), 0.000001);\n\t\tassertEquals(-81.285984, poly2.get(4).getLongitude(), 0.000001);\n\t\tList<GeoPoint> poly3 = coordinates.get(2);\n\t\tassertEquals(28.587731, poly3.get(0).getLatitude(), 0.000001);\n\t\tassertEquals(-81.382777, poly3.get(0).getLongitude(), 0.000001);\n\t\tassertEquals(28.587534, poly3.get(1).getLatitude(), 0.000001);\n\t\tassertEquals(-81.38229, poly3.get(1).getLongitude(), 0.000001);\n\t\tassertEquals(28.587358, poly3.get(2).getLatitude(), 0.000001);\n\t\tassertEquals(-81.382407, poly3.get(2).getLongitude(), 0.000001);\n\t\tassertEquals(28.587597, poly3.get(3).getLatitude(), 0.000001);\n\t\tassertEquals(-81.382816, poly3.get(3).getLongitude(), 0.000001);\n\t\tassertEquals(28.587731, poly3.get(4).getLatitude(), 0.000001);\n\t\tassertEquals(-81.382777, poly3.get(4).getLongitude(), 0.000001);\n\t}", "signature": "void getPlace_multipolygonGeometry()", "full_signature": "@Test public void getPlace_multipolygonGeometry()", "class_method_signature": "GeoTemplateTest.getPlace_multipolygonGeometry()", "testcase": true, "constructor": false, "invocations": ["andRespond", "andExpect", "expect", "requestTo", "method", "withSuccess", "jsonResource", "getPlace", "geoOperations", "getGeometry", "assertEquals", "getType", "getCoordinates", "assertEquals", "size", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get", "assertEquals", "getLatitude", "get", "assertEquals", "getLongitude", "get"]}, "focal_class": {"identifier": "GeoTemplate", "superclass": "extends AbstractTwitterOperations", "interfaces": "implements GeoOperations", "fields": [{"original_string": "private final RestTemplate restTemplate;", "modifier": "private final", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "methods": [{"identifier": "GeoTemplate", "parameters": "(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "modifiers": "public", "return": "", "signature": " GeoTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "full_signature": "public  GeoTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "class_method_signature": "GeoTemplate.GeoTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser, boolean isAuthorizedForApp)", "testcase": false, "constructor": true}, {"identifier": "getPlace", "parameters": "(String placeId)", "modifiers": "public", "return": "Place", "signature": "Place getPlace(String placeId)", "full_signature": "public Place getPlace(String placeId)", "class_method_signature": "GeoTemplate.getPlace(String placeId)", "testcase": false, "constructor": false}, {"identifier": "reverseGeoCode", "parameters": "(double latitude, double longitude)", "modifiers": "public", "return": "List<Place>", "signature": "List<Place> reverseGeoCode(double latitude, double longitude)", "full_signature": "public List<Place> reverseGeoCode(double latitude, double longitude)", "class_method_signature": "GeoTemplate.reverseGeoCode(double latitude, double longitude)", "testcase": false, "constructor": false}, {"identifier": "reverseGeoCode", "parameters": "(double latitude, double longitude, PlaceType granularity, String accuracy)", "modifiers": "public", "return": "List<Place>", "signature": "List<Place> reverseGeoCode(double latitude, double longitude, PlaceType granularity, String accuracy)", "full_signature": "public List<Place> reverseGeoCode(double latitude, double longitude, PlaceType granularity, String accuracy)", "class_method_signature": "GeoTemplate.reverseGeoCode(double latitude, double longitude, PlaceType granularity, String accuracy)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(double latitude, double longitude)", "modifiers": "public", "return": "List<Place>", "signature": "List<Place> search(double latitude, double longitude)", "full_signature": "public List<Place> search(double latitude, double longitude)", "class_method_signature": "GeoTemplate.search(double latitude, double longitude)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "modifiers": "public", "return": "List<Place>", "signature": "List<Place> search(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "full_signature": "public List<Place> search(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "class_method_signature": "GeoTemplate.search(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "testcase": false, "constructor": false}, {"identifier": "findSimilarPlaces", "parameters": "(double latitude, double longitude, String name)", "modifiers": "public", "return": "SimilarPlaces", "signature": "SimilarPlaces findSimilarPlaces(double latitude, double longitude, String name)", "full_signature": "public SimilarPlaces findSimilarPlaces(double latitude, double longitude, String name)", "class_method_signature": "GeoTemplate.findSimilarPlaces(double latitude, double longitude, String name)", "testcase": false, "constructor": false}, {"identifier": "findSimilarPlaces", "parameters": "(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "modifiers": "public", "return": "SimilarPlaces", "signature": "SimilarPlaces findSimilarPlaces(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "full_signature": "public SimilarPlaces findSimilarPlaces(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "class_method_signature": "GeoTemplate.findSimilarPlaces(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "testcase": false, "constructor": false}, {"identifier": "createPlace", "parameters": "(PlacePrototype placePrototype)", "modifiers": "public", "return": "Place", "signature": "Place createPlace(PlacePrototype placePrototype)", "full_signature": "public Place createPlace(PlacePrototype placePrototype)", "class_method_signature": "GeoTemplate.createPlace(PlacePrototype placePrototype)", "testcase": false, "constructor": false}, {"identifier": "buildGeoParameters", "parameters": "(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "modifiers": "private", "return": "MultiValueMap<String, String>", "signature": "MultiValueMap<String, String> buildGeoParameters(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "full_signature": "private MultiValueMap<String, String> buildGeoParameters(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "class_method_signature": "GeoTemplate.buildGeoParameters(double latitude, double longitude, PlaceType granularity, String accuracy, String query)", "testcase": false, "constructor": false}, {"identifier": "buildPlaceParameters", "parameters": "(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "modifiers": "private", "return": "MultiValueMap<String, String>", "signature": "MultiValueMap<String, String> buildPlaceParameters(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "full_signature": "private MultiValueMap<String, String> buildPlaceParameters(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "class_method_signature": "GeoTemplate.buildPlaceParameters(double latitude, double longitude, String name, String streetAddress, String containedWithin)", "testcase": false, "constructor": false}], "file": "spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/GeoTemplate.java"}, "focal_method": {"identifier": "getPlace", "parameters": "(String placeId)", "modifiers": "public", "return": "Place", "body": "public Place getPlace(String placeId) {\n\t\trequireUserAuthorization();\n\t\treturn restTemplate.getForObject(buildUri(\"geo/id/\" + placeId + \".json\"), Place.class);\n\t}", "signature": "Place getPlace(String placeId)", "full_signature": "public Place getPlace(String placeId)", "class_method_signature": "GeoTemplate.getPlace(String placeId)", "testcase": false, "constructor": false, "invocations": ["requireUserAuthorization", "getForObject", "buildUri"]}, "repository": {"repo_id": 1768217, "url": "https://github.com/spring-projects/spring-social-twitter", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 114, "size": 6567, "license": "licensed"}}