{"test_class": {"identifier": "DecimalUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "cobra/commons/src/test/java/nl/topicus/cobra/util/DecimalUtilTest.java"}, "test_case": {"identifier": "testLessOrEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLessOrEqual()\n\t{\n\t\tAssert.assertTrue(DecimalUtil.lessOrEqual(DecimalUtil.FIVE, 11));\n\t\tAssert.assertFalse(DecimalUtil.lessOrEqual(DecimalUtil.FIVE, 3));\n\t}", "signature": "void testLessOrEqual()", "full_signature": "@Test public void testLessOrEqual()", "class_method_signature": "DecimalUtilTest.testLessOrEqual()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "lessOrEqual", "assertFalse", "lessOrEqual"]}, "focal_class": {"identifier": "DecimalUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final BigDecimal ONE = BigDecimal.ONE;", "modifier": "public static final", "type": "BigDecimal", "declarator": "ONE = BigDecimal.ONE", "var_name": "ONE"}, {"original_string": "public static final BigDecimal TWO = BigDecimal.valueOf(2);", "modifier": "public static final", "type": "BigDecimal", "declarator": "TWO = BigDecimal.valueOf(2)", "var_name": "TWO"}, {"original_string": "public static final BigDecimal THREE = BigDecimal.valueOf(3);", "modifier": "public static final", "type": "BigDecimal", "declarator": "THREE = BigDecimal.valueOf(3)", "var_name": "THREE"}, {"original_string": "public static final BigDecimal FOUR = BigDecimal.valueOf(4);", "modifier": "public static final", "type": "BigDecimal", "declarator": "FOUR = BigDecimal.valueOf(4)", "var_name": "FOUR"}, {"original_string": "public static final BigDecimal FIVE = BigDecimal.valueOf(5);", "modifier": "public static final", "type": "BigDecimal", "declarator": "FIVE = BigDecimal.valueOf(5)", "var_name": "FIVE"}, {"original_string": "public static final BigDecimal SIX = BigDecimal.valueOf(6);", "modifier": "public static final", "type": "BigDecimal", "declarator": "SIX = BigDecimal.valueOf(6)", "var_name": "SIX"}, {"original_string": "public static final BigDecimal SEVEN = BigDecimal.valueOf(7);", "modifier": "public static final", "type": "BigDecimal", "declarator": "SEVEN = BigDecimal.valueOf(7)", "var_name": "SEVEN"}, {"original_string": "public static final BigDecimal EIGHT = BigDecimal.valueOf(8);", "modifier": "public static final", "type": "BigDecimal", "declarator": "EIGHT = BigDecimal.valueOf(8)", "var_name": "EIGHT"}, {"original_string": "public static final BigDecimal NINE = BigDecimal.valueOf(9);", "modifier": "public static final", "type": "BigDecimal", "declarator": "NINE = BigDecimal.valueOf(9)", "var_name": "NINE"}, {"original_string": "public static final BigDecimal TEN = BigDecimal.TEN;", "modifier": "public static final", "type": "BigDecimal", "declarator": "TEN = BigDecimal.TEN", "var_name": "TEN"}, {"original_string": "public static final BigDecimal ELEVEN = BigDecimal.valueOf(11);", "modifier": "public static final", "type": "BigDecimal", "declarator": "ELEVEN = BigDecimal.valueOf(11)", "var_name": "ELEVEN"}, {"original_string": "public static final BigDecimal SIXTEEN = BigDecimal.valueOf(16);", "modifier": "public static final", "type": "BigDecimal", "declarator": "SIXTEEN = BigDecimal.valueOf(16)", "var_name": "SIXTEEN"}, {"original_string": "public static final BigDecimal EIGHTEEN = BigDecimal.valueOf(18);", "modifier": "public static final", "type": "BigDecimal", "declarator": "EIGHTEEN = BigDecimal.valueOf(18)", "var_name": "EIGHTEEN"}, {"original_string": "public static final BigDecimal TWENTY = BigDecimal.valueOf(20);", "modifier": "public static final", "type": "BigDecimal", "declarator": "TWENTY = BigDecimal.valueOf(20)", "var_name": "TWENTY"}, {"original_string": "public static final BigDecimal THIRTYSIX = BigDecimal.valueOf(36);", "modifier": "public static final", "type": "BigDecimal", "declarator": "THIRTYSIX = BigDecimal.valueOf(36)", "var_name": "THIRTYSIX"}, {"original_string": "public static final BigDecimal HUNDRED = BigDecimal.valueOf(100);", "modifier": "public static final", "type": "BigDecimal", "declarator": "HUNDRED = BigDecimal.valueOf(100)", "var_name": "HUNDRED"}, {"original_string": "public static final BigDecimal FIVE_POINT_FIVE = new BigDecimal(\"5.5\");", "modifier": "public static final", "type": "BigDecimal", "declarator": "FIVE_POINT_FIVE = new BigDecimal(\"5.5\")", "var_name": "FIVE_POINT_FIVE"}, {"original_string": "public static final MathContext RESULTAAT_MATH_CONTEXT =\n\t\tnew MathContext(10, RoundingMode.HALF_UP);", "modifier": "public static final", "type": "MathContext", "declarator": "RESULTAAT_MATH_CONTEXT =\n\t\tnew MathContext(10, RoundingMode.HALF_UP)", "var_name": "RESULTAAT_MATH_CONTEXT"}], "methods": [{"identifier": "nonZero", "parameters": "(BigDecimal decimal)", "modifiers": "public static final", "return": "boolean", "signature": "boolean nonZero(BigDecimal decimal)", "full_signature": "public static final boolean nonZero(BigDecimal decimal)", "class_method_signature": "DecimalUtil.nonZero(BigDecimal decimal)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(BigDecimal decimal)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isZero(BigDecimal decimal)", "full_signature": "public static final boolean isZero(BigDecimal decimal)", "class_method_signature": "DecimalUtil.isZero(BigDecimal decimal)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(BigDecimal is, BigDecimal than)", "modifiers": "public static final", "return": "boolean", "signature": "boolean greaterThan(BigDecimal is, BigDecimal than)", "full_signature": "public static final boolean greaterThan(BigDecimal is, BigDecimal than)", "class_method_signature": "DecimalUtil.greaterThan(BigDecimal is, BigDecimal than)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(BigDecimal is, int than)", "modifiers": "public static final", "return": "boolean", "signature": "boolean greaterThan(BigDecimal is, int than)", "full_signature": "public static final boolean greaterThan(BigDecimal is, int than)", "class_method_signature": "DecimalUtil.greaterThan(BigDecimal is, int than)", "testcase": false, "constructor": false}, {"identifier": "greaterThanOrEqual", "parameters": "(BigDecimal is, int than)", "modifiers": "public static final", "return": "boolean", "signature": "boolean greaterThanOrEqual(BigDecimal is, int than)", "full_signature": "public static final boolean greaterThanOrEqual(BigDecimal is, int than)", "class_method_signature": "DecimalUtil.greaterThanOrEqual(BigDecimal is, int than)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(BigDecimal one, BigDecimal other)", "modifiers": "public static final", "return": "int", "signature": "int compare(BigDecimal one, BigDecimal other)", "full_signature": "public static final int compare(BigDecimal one, BigDecimal other)", "class_method_signature": "DecimalUtil.compare(BigDecimal one, BigDecimal other)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "(BigDecimal one, BigDecimal other)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal max(BigDecimal one, BigDecimal other)", "full_signature": "public static final BigDecimal max(BigDecimal one, BigDecimal other)", "class_method_signature": "DecimalUtil.max(BigDecimal one, BigDecimal other)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(BigDecimal one, BigDecimal other)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal min(BigDecimal one, BigDecimal other)", "full_signature": "public static final BigDecimal min(BigDecimal one, BigDecimal other)", "class_method_signature": "DecimalUtil.min(BigDecimal one, BigDecimal other)", "testcase": false, "constructor": false}, {"identifier": "greaterThanZero", "parameters": "(BigDecimal is)", "modifiers": "public static final", "return": "boolean", "signature": "boolean greaterThanZero(BigDecimal is)", "full_signature": "public static final boolean greaterThanZero(BigDecimal is)", "class_method_signature": "DecimalUtil.greaterThanZero(BigDecimal is)", "testcase": false, "constructor": false}, {"identifier": "zeroOrMore", "parameters": "(BigDecimal decimal)", "modifiers": "public static", "return": "boolean", "signature": "boolean zeroOrMore(BigDecimal decimal)", "full_signature": "public static boolean zeroOrMore(BigDecimal decimal)", "class_method_signature": "DecimalUtil.zeroOrMore(BigDecimal decimal)", "testcase": false, "constructor": false}, {"identifier": "lessThanZero", "parameters": "(BigDecimal decimal)", "modifiers": "public static final", "return": "boolean", "signature": "boolean lessThanZero(BigDecimal decimal)", "full_signature": "public static final boolean lessThanZero(BigDecimal decimal)", "class_method_signature": "DecimalUtil.lessThanZero(BigDecimal decimal)", "testcase": false, "constructor": false}, {"identifier": "lessOrEqualtoZero", "parameters": "(BigDecimal decimal)", "modifiers": "public static final", "return": "boolean", "signature": "boolean lessOrEqualtoZero(BigDecimal decimal)", "full_signature": "public static final boolean lessOrEqualtoZero(BigDecimal decimal)", "class_method_signature": "DecimalUtil.lessOrEqualtoZero(BigDecimal decimal)", "testcase": false, "constructor": false}, {"identifier": "lessOrEqual", "parameters": "(BigDecimal decimal, int other)", "modifiers": "public static final", "return": "boolean", "signature": "boolean lessOrEqual(BigDecimal decimal, int other)", "full_signature": "public static final boolean lessOrEqual(BigDecimal decimal, int other)", "class_method_signature": "DecimalUtil.lessOrEqual(BigDecimal decimal, int other)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigDecimal decimal, int by)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal divide(BigDecimal decimal, int by)", "full_signature": "public static final BigDecimal divide(BigDecimal decimal, int by)", "class_method_signature": "DecimalUtil.divide(BigDecimal decimal, int by)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigDecimal decimal, MathContext mc, int by)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal divide(BigDecimal decimal, MathContext mc, int by)", "full_signature": "public static final BigDecimal divide(BigDecimal decimal, MathContext mc, int by)", "class_method_signature": "DecimalUtil.divide(BigDecimal decimal, MathContext mc, int by)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigDecimal decimal, MathContext mc, BigDecimal by)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal divide(BigDecimal decimal, MathContext mc, BigDecimal by)", "full_signature": "public static final BigDecimal divide(BigDecimal decimal, MathContext mc, BigDecimal by)", "class_method_signature": "DecimalUtil.divide(BigDecimal decimal, MathContext mc, BigDecimal by)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(int decimal, int by)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal divide(int decimal, int by)", "full_signature": "public static final BigDecimal divide(int decimal, int by)", "class_method_signature": "DecimalUtil.divide(int decimal, int by)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(int decimal, MathContext mc, int by)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal divide(int decimal, MathContext mc, int by)", "full_signature": "public static final BigDecimal divide(int decimal, MathContext mc, int by)", "class_method_signature": "DecimalUtil.divide(int decimal, MathContext mc, int by)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(BigDecimal decimal, int by)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal multiply(BigDecimal decimal, int by)", "full_signature": "public static final BigDecimal multiply(BigDecimal decimal, int by)", "class_method_signature": "DecimalUtil.multiply(BigDecimal decimal, int by)", "testcase": false, "constructor": false}, {"identifier": "multiplyRounded", "parameters": "(BigDecimal decimal, int by)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal multiplyRounded(BigDecimal decimal, int by)", "full_signature": "public static final BigDecimal multiplyRounded(BigDecimal decimal, int by)", "class_method_signature": "DecimalUtil.multiplyRounded(BigDecimal decimal, int by)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String string)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal valueOf(String string)", "full_signature": "public static final BigDecimal valueOf(String string)", "class_method_signature": "DecimalUtil.valueOf(String string)", "testcase": false, "constructor": false}, {"identifier": "localizeString", "parameters": "(String org)", "modifiers": "private static final", "return": "String", "signature": "String localizeString(String org)", "full_signature": "private static final String localizeString(String org)", "class_method_signature": "DecimalUtil.localizeString(String org)", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "(int index1, int index2)", "modifiers": "private static final", "return": "boolean", "signature": "boolean before(int index1, int index2)", "full_signature": "private static final boolean before(int index1, int index2)", "class_method_signature": "DecimalUtil.before(int index1, int index2)", "testcase": false, "constructor": false}, {"identifier": "handleParts", "parameters": "(String org, String[] tokens, char decimalSeparator,\n\t\t\tboolean replaceDot)", "modifiers": "private static final", "return": "String", "signature": "String handleParts(String org, String[] tokens, char decimalSeparator,\n\t\t\tboolean replaceDot)", "full_signature": "private static final String handleParts(String org, String[] tokens, char decimalSeparator,\n\t\t\tboolean replaceDot)", "class_method_signature": "DecimalUtil.handleParts(String org, String[] tokens, char decimalSeparator,\n\t\t\tboolean replaceDot)", "testcase": false, "constructor": false}, {"identifier": "validateString", "parameters": "(String[] split, char decimalSeparator)", "modifiers": "private static final", "return": "String", "signature": "String validateString(String[] split, char decimalSeparator)", "full_signature": "private static final String validateString(String[] split, char decimalSeparator)", "class_method_signature": "DecimalUtil.validateString(String[] split, char decimalSeparator)", "testcase": false, "constructor": false}, {"identifier": "average", "parameters": "(List<BigDecimal> bigDecimalList)", "modifiers": "public static final", "return": "BigDecimal", "signature": "BigDecimal average(List<BigDecimal> bigDecimalList)", "full_signature": "public static final BigDecimal average(List<BigDecimal> bigDecimalList)", "class_method_signature": "DecimalUtil.average(List<BigDecimal> bigDecimalList)", "testcase": false, "constructor": false}], "file": "cobra/commons/src/main/java/nl/topicus/cobra/util/DecimalUtil.java"}, "focal_method": {"identifier": "lessOrEqual", "parameters": "(BigDecimal decimal, int other)", "modifiers": "public static final", "return": "boolean", "body": "public static final boolean lessOrEqual(BigDecimal decimal, int other)\n\t{\n\t\treturn decimal.compareTo(BigDecimal.valueOf(other)) <= 0;\n\t}", "signature": "boolean lessOrEqual(BigDecimal decimal, int other)", "full_signature": "public static final boolean lessOrEqual(BigDecimal decimal, int other)", "class_method_signature": "DecimalUtil.lessOrEqual(BigDecimal decimal, int other)", "testcase": false, "constructor": false, "invocations": ["compareTo", "valueOf"]}, "repository": {"repo_id": 9812178, "url": "https://github.com/topicusonderwijs/tribe-krd-opensource", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 6540, "license": "licensed"}}