{"test_class": {"identifier": "CompoundHibernateInterceptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "cobra/hibernate/src/test/java/nl/topicus/cobra/hibernate/CompoundHibernateInterceptorTest.java"}, "test_case": {"identifier": "isTransientReturnsFirstResultWithTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isTransientReturnsFirstResultWithTrue()\n\t{\n\t\tInterceptor interceptor1 = mock(Interceptor.class);\n\t\tInterceptor interceptor2 = mock(Interceptor.class);\n\n\t\twhen(interceptor1.isTransient(null)).thenReturn(true);\n\t\twhen(interceptor2.isTransient(null)).thenReturn(null);\n\n\t\tInterceptor compound = new CompoundHibernateInterceptor(interceptor1, interceptor2);\n\t\tassertTrue(compound.isTransient(null));\n\n\t\tverify(interceptor1).isTransient(null);\n\t\tverifyNoMoreInteractions(interceptor1, interceptor2);\n\t}", "signature": "void isTransientReturnsFirstResultWithTrue()", "full_signature": "@Test public void isTransientReturnsFirstResultWithTrue()", "class_method_signature": "CompoundHibernateInterceptorTest.isTransientReturnsFirstResultWithTrue()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "isTransient", "thenReturn", "when", "isTransient", "assertTrue", "isTransient", "isTransient", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "CompoundHibernateInterceptor", "superclass": "extends EmptyInterceptor", "interfaces": "implements Iterable<Interceptor>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(CompoundHibernateInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CompoundHibernateInterceptor.class)", "var_name": "log"}, {"original_string": "private final List<Interceptor> interceptors = new ArrayList<Interceptor>();", "modifier": "private final", "type": "List<Interceptor>", "declarator": "interceptors = new ArrayList<Interceptor>()", "var_name": "interceptors"}, {"original_string": "private static CompoundHibernateInterceptor singleton;", "modifier": "private static", "type": "CompoundHibernateInterceptor", "declarator": "singleton", "var_name": "singleton"}], "methods": [{"identifier": "CompoundHibernateInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompoundHibernateInterceptor()", "full_signature": "public  CompoundHibernateInterceptor()", "class_method_signature": "CompoundHibernateInterceptor.CompoundHibernateInterceptor()", "testcase": false, "constructor": true}, {"identifier": "CompoundHibernateInterceptor", "parameters": "(Interceptor... interceptors)", "modifiers": "public", "return": "", "signature": " CompoundHibernateInterceptor(Interceptor... interceptors)", "full_signature": "public  CompoundHibernateInterceptor(Interceptor... interceptors)", "class_method_signature": "CompoundHibernateInterceptor.CompoundHibernateInterceptor(Interceptor... interceptors)", "testcase": false, "constructor": true}, {"identifier": "addInterceptor", "parameters": "(Interceptor interceptor)", "modifiers": "public", "return": "void", "signature": "void addInterceptor(Interceptor interceptor)", "full_signature": "public void addInterceptor(Interceptor interceptor)", "class_method_signature": "CompoundHibernateInterceptor.addInterceptor(Interceptor interceptor)", "testcase": false, "constructor": false}, {"identifier": "removeInterceptor", "parameters": "(Interceptor interceptor)", "modifiers": "public", "return": "void", "signature": "void removeInterceptor(Interceptor interceptor)", "full_signature": "public void removeInterceptor(Interceptor interceptor)", "class_method_signature": "CompoundHibernateInterceptor.removeInterceptor(Interceptor interceptor)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Interceptor>", "signature": "Iterator<Interceptor> iterator()", "full_signature": "@Override public Iterator<Interceptor> iterator()", "class_method_signature": "CompoundHibernateInterceptor.iterator()", "testcase": false, "constructor": false}, {"identifier": "afterTransactionBegin", "parameters": "(Transaction tx)", "modifiers": "@Override public", "return": "void", "signature": "void afterTransactionBegin(Transaction tx)", "full_signature": "@Override public void afterTransactionBegin(Transaction tx)", "class_method_signature": "CompoundHibernateInterceptor.afterTransactionBegin(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "afterTransactionCompletion", "parameters": "(Transaction tx)", "modifiers": "@Override public", "return": "void", "signature": "void afterTransactionCompletion(Transaction tx)", "full_signature": "@Override public void afterTransactionCompletion(Transaction tx)", "class_method_signature": "CompoundHibernateInterceptor.afterTransactionCompletion(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "beforeTransactionCompletion", "parameters": "(Transaction tx)", "modifiers": "@Override public", "return": "void", "signature": "void beforeTransactionCompletion(Transaction tx)", "full_signature": "@Override public void beforeTransactionCompletion(Transaction tx)", "class_method_signature": "CompoundHibernateInterceptor.beforeTransactionCompletion(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "findDirty", "parameters": "(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] findDirty(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "full_signature": "@Override public int[] findDirty(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "class_method_signature": "CompoundHibernateInterceptor.findDirty(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "testcase": false, "constructor": false}, {"identifier": "getEntity", "parameters": "(String entityName, Serializable id)", "modifiers": "@Override public", "return": "Object", "signature": "Object getEntity(String entityName, Serializable id)", "full_signature": "@Override public Object getEntity(String entityName, Serializable id)", "class_method_signature": "CompoundHibernateInterceptor.getEntity(String entityName, Serializable id)", "testcase": false, "constructor": false}, {"identifier": "getEntityName", "parameters": "(Object object)", "modifiers": "@Override public", "return": "String", "signature": "String getEntityName(Object object)", "full_signature": "@Override public String getEntityName(Object object)", "class_method_signature": "CompoundHibernateInterceptor.getEntityName(Object object)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(String entityName, EntityMode entityMode, Serializable id)", "modifiers": "@Override public", "return": "Object", "signature": "Object instantiate(String entityName, EntityMode entityMode, Serializable id)", "full_signature": "@Override public Object instantiate(String entityName, EntityMode entityMode, Serializable id)", "class_method_signature": "CompoundHibernateInterceptor.instantiate(String entityName, EntityMode entityMode, Serializable id)", "testcase": false, "constructor": false}, {"identifier": "isTransient", "parameters": "(Object entity)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean isTransient(Object entity)", "full_signature": "@Override public Boolean isTransient(Object entity)", "class_method_signature": "CompoundHibernateInterceptor.isTransient(Object entity)", "testcase": false, "constructor": false}, {"identifier": "onCollectionRecreate", "parameters": "(Object collection, Serializable key)", "modifiers": "@Override public", "return": "void", "signature": "void onCollectionRecreate(Object collection, Serializable key)", "full_signature": "@Override public void onCollectionRecreate(Object collection, Serializable key)", "class_method_signature": "CompoundHibernateInterceptor.onCollectionRecreate(Object collection, Serializable key)", "testcase": false, "constructor": false}, {"identifier": "onCollectionRemove", "parameters": "(Object collection, Serializable key)", "modifiers": "@Override public", "return": "void", "signature": "void onCollectionRemove(Object collection, Serializable key)", "full_signature": "@Override public void onCollectionRemove(Object collection, Serializable key)", "class_method_signature": "CompoundHibernateInterceptor.onCollectionRemove(Object collection, Serializable key)", "testcase": false, "constructor": false}, {"identifier": "onCollectionUpdate", "parameters": "(Object collection, Serializable key)", "modifiers": "@Override public", "return": "void", "signature": "void onCollectionUpdate(Object collection, Serializable key)", "full_signature": "@Override public void onCollectionUpdate(Object collection, Serializable key)", "class_method_signature": "CompoundHibernateInterceptor.onCollectionUpdate(Object collection, Serializable key)", "testcase": false, "constructor": false}, {"identifier": "onDelete", "parameters": "(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "modifiers": "@Override public", "return": "void", "signature": "void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "full_signature": "@Override public void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "class_method_signature": "CompoundHibernateInterceptor.onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "testcase": false, "constructor": false}, {"identifier": "onFlushDirty", "parameters": "(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onFlushDirty(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "full_signature": "@Override public boolean onFlushDirty(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "class_method_signature": "CompoundHibernateInterceptor.onFlushDirty(Object entity, Serializable id, Object[] currentState,\n\t\t\tObject[] previousState, String[] propertyNames, Type[] types)", "testcase": false, "constructor": false}, {"identifier": "onLoad", "parameters": "(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "full_signature": "@Override public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "class_method_signature": "CompoundHibernateInterceptor.onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "testcase": false, "constructor": false}, {"identifier": "onPrepareStatement", "parameters": "(String sql)", "modifiers": "@Override public", "return": "String", "signature": "String onPrepareStatement(String sql)", "full_signature": "@Override public String onPrepareStatement(String sql)", "class_method_signature": "CompoundHibernateInterceptor.onPrepareStatement(String sql)", "testcase": false, "constructor": false}, {"identifier": "onSave", "parameters": "(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "full_signature": "@Override public boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "class_method_signature": "CompoundHibernateInterceptor.onSave(Object entity, Serializable id, Object[] state, String[] propertyNames,\n\t\t\tType[] types)", "testcase": false, "constructor": false}, {"identifier": "postFlush", "parameters": "(Iterator entities)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void postFlush(Iterator entities)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void postFlush(Iterator entities)", "class_method_signature": "CompoundHibernateInterceptor.postFlush(Iterator entities)", "testcase": false, "constructor": false}, {"identifier": "preFlush", "parameters": "(Iterator entities)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void preFlush(Iterator entities)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void preFlush(Iterator entities)", "class_method_signature": "CompoundHibernateInterceptor.preFlush(Iterator entities)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "CompoundHibernateInterceptor", "signature": "CompoundHibernateInterceptor get()", "full_signature": "public static CompoundHibernateInterceptor get()", "class_method_signature": "CompoundHibernateInterceptor.get()", "testcase": false, "constructor": false}], "file": "cobra/hibernate/src/main/java/nl/topicus/cobra/hibernate/CompoundHibernateInterceptor.java"}, "focal_method": {"identifier": "isTransient", "parameters": "(Object entity)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n\tpublic Boolean isTransient(Object entity)\n\t{\n\t\tBoolean isTransient = null;\n\t\tfor (Interceptor interceptor : interceptors)\n\t\t{\n\t\t\tisTransient = interceptor.isTransient(entity);\n\t\t\tif (isTransient != null)\n\t\t\t{\n\t\t\t\treturn isTransient;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "signature": "Boolean isTransient(Object entity)", "full_signature": "@Override public Boolean isTransient(Object entity)", "class_method_signature": "CompoundHibernateInterceptor.isTransient(Object entity)", "testcase": false, "constructor": false, "invocations": ["isTransient"]}, "repository": {"repo_id": 9812178, "url": "https://github.com/topicusonderwijs/tribe-krd-opensource", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 6540, "license": "licensed"}}