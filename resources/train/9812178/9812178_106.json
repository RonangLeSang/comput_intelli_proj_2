{"test_class": {"identifier": "StringUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "cobra/commons/src/test/java/nl/topicus/cobra/util/StringUtilTest.java"}, "test_case": {"identifier": "nullOrStringValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void nullOrStringValue()\n\t{\n\t\tassertNull(StringUtil.nullOrStringValue(null));\n\t\tassertEquals(\"1\", StringUtil.nullOrStringValue(1));\n\t}", "signature": "void nullOrStringValue()", "full_signature": "@Test public void nullOrStringValue()", "class_method_signature": "StringUtilTest.nullOrStringValue()", "testcase": true, "constructor": false, "invocations": ["assertNull", "nullOrStringValue", "assertEquals", "nullOrStringValue"]}, "focal_class": {"identifier": "StringUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String[] SAMENGESTELDE_LETTERS = {\"IJ\"};", "modifier": "public static final", "type": "String[]", "declarator": "SAMENGESTELDE_LETTERS = {\"IJ\"}", "var_name": "SAMENGESTELDE_LETTERS"}, {"original_string": "private static final char[] ORACLE_WILDCARDS = {'%', '_', '['};", "modifier": "private static final", "type": "char[]", "declarator": "ORACLE_WILDCARDS = {'%', '_', '['}", "var_name": "ORACLE_WILDCARDS"}, {"original_string": "private static final String EMAIL_PATTERN =\n\t\t\"^[_A-Za-z0-9-]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*((\\\\.[A-Za-z]{2,}){1}$)\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL_PATTERN =\n\t\t\"^[_A-Za-z0-9-]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*((\\\\.[A-Za-z]{2,}){1}$)\"", "var_name": "EMAIL_PATTERN"}, {"original_string": "private static final String IPADRES_PATTERN =\n\t\t\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\";", "modifier": "private static final", "type": "String", "declarator": "IPADRES_PATTERN =\n\t\t\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\"", "var_name": "IPADRES_PATTERN"}, {"original_string": "private static String SUB = \"\";", "modifier": "private static", "type": "String", "declarator": "SUB = \"\"", "var_name": "SUB"}, {"original_string": "private static String[] HIGH_ASCII_XLATE =\n\t\tnew String[] {\" \", \"!\", \"c\", SUB, SUB, \"Y\", \"|\", SUB, \"\\\"\", \"(c)\", \"a\", \"<<\", \"-\", \"-\",\n\t\t\t\"(R)\", \"-\", \" \", \"+/-\", \"2\", \"3\", \"'\", \"u\", \"P\", \".\", \",\", \"1\", \"o\", \">>\", \" 1/4\",\n\t\t\t\" 1/2\", \" 3/4\", \"?\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"AE\", \"C\", \"E\", \"E\", \"E\", \"E\", \"I\",\n\t\t\t\"I\", \"I\", \"I\", \"D\", \"N\", \"O\", \"O\", \"O\", \"O\", \"O\", \"x\", \"O\", \"U\", \"U\", \"U\", \"U\", \"Y\",\n\t\t\t\"Th\", \"ss\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"ae\", \"c\", \"e\", \"e\", \"e\", \"e\", \"i\", \"i\", \"i\",\n\t\t\t\"i\", \"d\", \"n\", \"o\", \"o\", \"o\", \"o\", \"o\", \":\", \"o\", \"u\", \"u\", \"u\", \"u\", \"y\", \"th\", \"y\"};", "modifier": "private static", "type": "String[]", "declarator": "HIGH_ASCII_XLATE =\n\t\tnew String[] {\" \", \"!\", \"c\", SUB, SUB, \"Y\", \"|\", SUB, \"\\\"\", \"(c)\", \"a\", \"<<\", \"-\", \"-\",\n\t\t\t\"(R)\", \"-\", \" \", \"+/-\", \"2\", \"3\", \"'\", \"u\", \"P\", \".\", \",\", \"1\", \"o\", \">>\", \" 1/4\",\n\t\t\t\" 1/2\", \" 3/4\", \"?\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"AE\", \"C\", \"E\", \"E\", \"E\", \"E\", \"I\",\n\t\t\t\"I\", \"I\", \"I\", \"D\", \"N\", \"O\", \"O\", \"O\", \"O\", \"O\", \"x\", \"O\", \"U\", \"U\", \"U\", \"U\", \"Y\",\n\t\t\t\"Th\", \"ss\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"ae\", \"c\", \"e\", \"e\", \"e\", \"e\", \"i\", \"i\", \"i\",\n\t\t\t\"i\", \"d\", \"n\", \"o\", \"o\", \"o\", \"o\", \"o\", \":\", \"o\", \"u\", \"u\", \"u\", \"u\", \"y\", \"th\", \"y\"}", "var_name": "HIGH_ASCII_XLATE"}], "methods": [{"identifier": "StringUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtil()", "full_signature": "private  StringUtil()", "class_method_signature": "StringUtil.StringUtil()", "testcase": false, "constructor": true}, {"identifier": "checkMatchesRegExp", "parameters": "(String parameter, String value, String regexp)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkMatchesRegExp(String parameter, String value, String regexp)", "full_signature": "public static boolean checkMatchesRegExp(String parameter, String value, String regexp)", "class_method_signature": "StringUtil.checkMatchesRegExp(String parameter, String value, String regexp)", "testcase": false, "constructor": false}, {"identifier": "stripHighAscii", "parameters": "(String tekst)", "modifiers": "@Deprecated() public static", "return": "String", "signature": "String stripHighAscii(String tekst)", "full_signature": "@Deprecated() public static String stripHighAscii(String tekst)", "class_method_signature": "StringUtil.stripHighAscii(String tekst)", "testcase": false, "constructor": false}, {"identifier": "getFirstNumberSequence", "parameters": "(String tekst)", "modifiers": "public static", "return": "Integer", "signature": "Integer getFirstNumberSequence(String tekst)", "full_signature": "public static Integer getFirstNumberSequence(String tekst)", "class_method_signature": "StringUtil.getFirstNumberSequence(String tekst)", "testcase": false, "constructor": false}, {"identifier": "getLastCharacter", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String getLastCharacter(String string)", "full_signature": "public static String getLastCharacter(String string)", "class_method_signature": "StringUtil.getLastCharacter(String string)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric(String string)", "full_signature": "public static boolean isNumeric(String string)", "class_method_signature": "StringUtil.isNumeric(String string)", "testcase": false, "constructor": false}, {"identifier": "isEmail", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmail(String string)", "full_signature": "public static boolean isEmail(String string)", "class_method_signature": "StringUtil.isEmail(String string)", "testcase": false, "constructor": false}, {"identifier": "isIpAdres", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIpAdres(String string)", "full_signature": "public static boolean isIpAdres(String string)", "class_method_signature": "StringUtil.isIpAdres(String string)", "testcase": false, "constructor": false}, {"identifier": "isDecimal", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDecimal(String string)", "full_signature": "public static boolean isDecimal(String string)", "class_method_signature": "StringUtil.isDecimal(String string)", "testcase": false, "constructor": false}, {"identifier": "firstCharUppercase", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String firstCharUppercase(String name)", "full_signature": "public static String firstCharUppercase(String name)", "class_method_signature": "StringUtil.firstCharUppercase(String name)", "testcase": false, "constructor": false}, {"identifier": "firstLetterUppercase", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String firstLetterUppercase(String name)", "full_signature": "public static String firstLetterUppercase(String name)", "class_method_signature": "StringUtil.firstLetterUppercase(String name)", "testcase": false, "constructor": false}, {"identifier": "onlyFirstCharUppercase", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String onlyFirstCharUppercase(String name)", "full_signature": "public static String onlyFirstCharUppercase(String name)", "class_method_signature": "StringUtil.onlyFirstCharUppercase(String name)", "testcase": false, "constructor": false}, {"identifier": "containsSamengesteldeLetter", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String containsSamengesteldeLetter(String value)", "full_signature": "public static String containsSamengesteldeLetter(String value)", "class_method_signature": "StringUtil.containsSamengesteldeLetter(String value)", "testcase": false, "constructor": false}, {"identifier": "firstCharUppercaseOfEachWord", "parameters": "(String sentence)", "modifiers": "public static", "return": "String", "signature": "String firstCharUppercaseOfEachWord(String sentence)", "full_signature": "public static String firstCharUppercaseOfEachWord(String sentence)", "class_method_signature": "StringUtil.firstCharUppercaseOfEachWord(String sentence)", "testcase": false, "constructor": false}, {"identifier": "firstCharUppercaseOnlyIfOneWordAndStartWithLowercase", "parameters": "(String sentence)", "modifiers": "public static", "return": "String", "signature": "String firstCharUppercaseOnlyIfOneWordAndStartWithLowercase(String sentence)", "full_signature": "public static String firstCharUppercaseOnlyIfOneWordAndStartWithLowercase(String sentence)", "class_method_signature": "StringUtil.firstCharUppercaseOnlyIfOneWordAndStartWithLowercase(String sentence)", "testcase": false, "constructor": false}, {"identifier": "puntSeperated", "parameters": "(String sentence)", "modifiers": "public static", "return": "String", "signature": "String puntSeperated(String sentence)", "full_signature": "public static String puntSeperated(String sentence)", "class_method_signature": "StringUtil.puntSeperated(String sentence)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String string)", "full_signature": "public static boolean isEmpty(String string)", "class_method_signature": "StringUtil.isEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "areAllEmpty", "parameters": "(String... strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean areAllEmpty(String... strings)", "full_signature": "public static boolean areAllEmpty(String... strings)", "class_method_signature": "StringUtil.areAllEmpty(String... strings)", "testcase": false, "constructor": false}, {"identifier": "areAllNotEmpty", "parameters": "(String... strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean areAllNotEmpty(String... strings)", "full_signature": "public static boolean areAllNotEmpty(String... strings)", "class_method_signature": "StringUtil.areAllNotEmpty(String... strings)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object object)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Object object)", "full_signature": "public static boolean isEmpty(Object object)", "class_method_signature": "StringUtil.isEmpty(Object object)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(String string)", "full_signature": "public static boolean isNotEmpty(String string)", "class_method_signature": "StringUtil.isNotEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Object string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Object string)", "full_signature": "public static boolean isNotEmpty(Object string)", "class_method_signature": "StringUtil.isNotEmpty(Object string)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(String source, int maxLength, String cutoffReplacement)", "modifiers": "public static", "return": "String", "signature": "String truncate(String source, int maxLength, String cutoffReplacement)", "full_signature": "public static String truncate(String source, int maxLength, String cutoffReplacement)", "class_method_signature": "StringUtil.truncate(String source, int maxLength, String cutoffReplacement)", "testcase": false, "constructor": false}, {"identifier": "escapeString", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String escapeString(String value)", "full_signature": "public static String escapeString(String value)", "class_method_signature": "StringUtil.escapeString(String value)", "testcase": false, "constructor": false}, {"identifier": "escapeForJavascriptString", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String escapeForJavascriptString(String value)", "full_signature": "public static String escapeForJavascriptString(String value)", "class_method_signature": "StringUtil.escapeForJavascriptString(String value)", "testcase": false, "constructor": false}, {"identifier": "valueOrEmptyIfNull", "parameters": "(Object text)", "modifiers": "public static", "return": "String", "signature": "String valueOrEmptyIfNull(Object text)", "full_signature": "public static String valueOrEmptyIfNull(Object text)", "class_method_signature": "StringUtil.valueOrEmptyIfNull(Object text)", "testcase": false, "constructor": false}, {"identifier": "valueOrAlternativeIfNull", "parameters": "(Object text, String alternative)", "modifiers": "public static", "return": "String", "signature": "String valueOrAlternativeIfNull(Object text, String alternative)", "full_signature": "public static String valueOrAlternativeIfNull(Object text, String alternative)", "class_method_signature": "StringUtil.valueOrAlternativeIfNull(Object text, String alternative)", "testcase": false, "constructor": false}, {"identifier": "valueOrAlternativeIfEmpty", "parameters": "(Object text, String alternative)", "modifiers": "public static", "return": "String", "signature": "String valueOrAlternativeIfEmpty(Object text, String alternative)", "full_signature": "public static String valueOrAlternativeIfEmpty(Object text, String alternative)", "class_method_signature": "StringUtil.valueOrAlternativeIfEmpty(Object text, String alternative)", "testcase": false, "constructor": false}, {"identifier": "repeatString", "parameters": "(String src, int repeat)", "modifiers": "public static", "return": "String", "signature": "String repeatString(String src, int repeat)", "full_signature": "public static String repeatString(String src, int repeat)", "class_method_signature": "StringUtil.repeatString(String src, int repeat)", "testcase": false, "constructor": false}, {"identifier": "maakTekenSeparatedString", "parameters": "(Collection< ? extends Object> list, String teken)", "modifiers": "public static", "return": "String", "signature": "String maakTekenSeparatedString(Collection< ? extends Object> list, String teken)", "full_signature": "public static String maakTekenSeparatedString(Collection< ? extends Object> list, String teken)", "class_method_signature": "StringUtil.maakTekenSeparatedString(Collection< ? extends Object> list, String teken)", "testcase": false, "constructor": false}, {"identifier": "maakCommaSeparatedString", "parameters": "(Collection< ? extends Object> list)", "modifiers": "public static", "return": "String", "signature": "String maakCommaSeparatedString(Collection< ? extends Object> list)", "full_signature": "public static String maakCommaSeparatedString(Collection< ? extends Object> list)", "class_method_signature": "StringUtil.maakCommaSeparatedString(Collection< ? extends Object> list)", "testcase": false, "constructor": false}, {"identifier": "maakCommaSeparatedString", "parameters": "(Collection< ? extends Object> list,\n\t\t\tString defaultByEmptyList)", "modifiers": "public static", "return": "String", "signature": "String maakCommaSeparatedString(Collection< ? extends Object> list,\n\t\t\tString defaultByEmptyList)", "full_signature": "public static String maakCommaSeparatedString(Collection< ? extends Object> list,\n\t\t\tString defaultByEmptyList)", "class_method_signature": "StringUtil.maakCommaSeparatedString(Collection< ? extends Object> list,\n\t\t\tString defaultByEmptyList)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Collection<T> list, String token, String defaultString)", "modifiers": "public static", "return": "String", "signature": "String toString(Collection<T> list, String token, String defaultString)", "full_signature": "public static String toString(Collection<T> list, String token, String defaultString)", "class_method_signature": "StringUtil.toString(Collection<T> list, String token, String defaultString)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Collection<T> list, String defaultString,\n\t\t\tStringConverter< ? super T> converter)", "modifiers": "public static", "return": "String", "signature": "String toString(Collection<T> list, String defaultString,\n\t\t\tStringConverter< ? super T> converter)", "full_signature": "public static String toString(Collection<T> list, String defaultString,\n\t\t\tStringConverter< ? super T> converter)", "class_method_signature": "StringUtil.toString(Collection<T> list, String defaultString,\n\t\t\tStringConverter< ? super T> converter)", "testcase": false, "constructor": false}, {"identifier": "maakPuntSeparatedString", "parameters": "(Collection< ? extends Object> list)", "modifiers": "public static", "return": "String", "signature": "String maakPuntSeparatedString(Collection< ? extends Object> list)", "full_signature": "public static String maakPuntSeparatedString(Collection< ? extends Object> list)", "class_method_signature": "StringUtil.maakPuntSeparatedString(Collection< ? extends Object> list)", "testcase": false, "constructor": false}, {"identifier": "verwijderCijfers", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String verwijderCijfers(String input)", "full_signature": "public static String verwijderCijfers(String input)", "class_method_signature": "StringUtil.verwijderCijfers(String input)", "testcase": false, "constructor": false}, {"identifier": "voegVoorloopnullenToe", "parameters": "(String str, int length)", "modifiers": "public static", "return": "String", "signature": "String voegVoorloopnullenToe(String str, int length)", "full_signature": "public static String voegVoorloopnullenToe(String str, int length)", "class_method_signature": "StringUtil.voegVoorloopnullenToe(String str, int length)", "testcase": false, "constructor": false}, {"identifier": "voegVoorloopnullenToe", "parameters": "(int i, int length)", "modifiers": "public static", "return": "String", "signature": "String voegVoorloopnullenToe(int i, int length)", "full_signature": "public static String voegVoorloopnullenToe(int i, int length)", "class_method_signature": "StringUtil.voegVoorloopnullenToe(int i, int length)", "testcase": false, "constructor": false}, {"identifier": "kapAfOfVoegSpatiesToe", "parameters": "(String str, int length)", "modifiers": "public static", "return": "String", "signature": "String kapAfOfVoegSpatiesToe(String str, int length)", "full_signature": "public static String kapAfOfVoegSpatiesToe(String str, int length)", "class_method_signature": "StringUtil.kapAfOfVoegSpatiesToe(String str, int length)", "testcase": false, "constructor": false}, {"identifier": "kapAfOfVoegNullenToe", "parameters": "(Integer i, int length)", "modifiers": "public static", "return": "String", "signature": "String kapAfOfVoegNullenToe(Integer i, int length)", "full_signature": "public static String kapAfOfVoegNullenToe(Integer i, int length)", "class_method_signature": "StringUtil.kapAfOfVoegNullenToe(Integer i, int length)", "testcase": false, "constructor": false}, {"identifier": "kapAfOfVoegNullenToe", "parameters": "(String str, int length)", "modifiers": "public static", "return": "String", "signature": "String kapAfOfVoegNullenToe(String str, int length)", "full_signature": "public static String kapAfOfVoegNullenToe(String str, int length)", "class_method_signature": "StringUtil.kapAfOfVoegNullenToe(String str, int length)", "testcase": false, "constructor": false}, {"identifier": "verwijderVoorloopnullen", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String verwijderVoorloopnullen(String str)", "full_signature": "public static String verwijderVoorloopnullen(String str)", "class_method_signature": "StringUtil.verwijderVoorloopnullen(String str)", "testcase": false, "constructor": false}, {"identifier": "countOccurances", "parameters": "(String org, char character)", "modifiers": "public static", "return": "int", "signature": "int countOccurances(String org, char character)", "full_signature": "public static int countOccurances(String org, char character)", "class_method_signature": "StringUtil.countOccurances(String org, char character)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<String> strings, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<String> strings, String separator)", "full_signature": "public static String join(Collection<String> strings, String separator)", "class_method_signature": "StringUtil.join(Collection<String> strings, String separator)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCase", "parameters": "(String string1, String string2)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCase(String string1, String string2)", "full_signature": "public static boolean startsWithIgnoreCase(String string1, String string2)", "class_method_signature": "StringUtil.startsWithIgnoreCase(String string1, String string2)", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "(Class< ? > class1)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String getClassName(Class< ? > class1)", "full_signature": "@Deprecated public static String getClassName(Class< ? > class1)", "class_method_signature": "StringUtil.getClassName(Class< ? > class1)", "testcase": false, "constructor": false}, {"identifier": "getFirstWord", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String getFirstWord(String input)", "full_signature": "public static String getFirstWord(String input)", "class_method_signature": "StringUtil.getFirstWord(String input)", "testcase": false, "constructor": false}, {"identifier": "containsOracleWildcard", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsOracleWildcard(String string)", "full_signature": "public static boolean containsOracleWildcard(String string)", "class_method_signature": "StringUtil.containsOracleWildcard(String string)", "testcase": false, "constructor": false}, {"identifier": "wildcardToRegex", "parameters": "(String wildcard)", "modifiers": "public static", "return": "String", "signature": "String wildcardToRegex(String wildcard)", "full_signature": "public static String wildcardToRegex(String wildcard)", "class_method_signature": "StringUtil.wildcardToRegex(String wildcard)", "testcase": false, "constructor": false}, {"identifier": "convertCamelCase", "parameters": "(String camelCase)", "modifiers": "public static", "return": "String", "signature": "String convertCamelCase(String camelCase)", "full_signature": "public static String convertCamelCase(String camelCase)", "class_method_signature": "StringUtil.convertCamelCase(String camelCase)", "testcase": false, "constructor": false}, {"identifier": "replaceAll", "parameters": "(StringBuilder builder, String tekst, String replaceWith)", "modifiers": "private static", "return": "void", "signature": "void replaceAll(StringBuilder builder, String tekst, String replaceWith)", "full_signature": "private static void replaceAll(StringBuilder builder, String tekst, String replaceWith)", "class_method_signature": "StringUtil.replaceAll(StringBuilder builder, String tekst, String replaceWith)", "testcase": false, "constructor": false}, {"identifier": "convertCamelCaseFirstCharUpperCase", "parameters": "(String camelCase)", "modifiers": "public static", "return": "String", "signature": "String convertCamelCaseFirstCharUpperCase(String camelCase)", "full_signature": "public static String convertCamelCaseFirstCharUpperCase(String camelCase)", "class_method_signature": "StringUtil.convertCamelCaseFirstCharUpperCase(String camelCase)", "testcase": false, "constructor": false}, {"identifier": "stripHtmlTags", "parameters": "(String html)", "modifiers": "public static", "return": "String", "signature": "String stripHtmlTags(String html)", "full_signature": "public static String stripHtmlTags(String html)", "class_method_signature": "StringUtil.stripHtmlTags(String html)", "testcase": false, "constructor": false}, {"identifier": "equalOrBothNull", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalOrBothNull(String str1, String str2)", "full_signature": "public static boolean equalOrBothNull(String str1, String str2)", "class_method_signature": "StringUtil.equalOrBothNull(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "equalOrBothEmpty", "parameters": "(String a, String b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalOrBothEmpty(String a, String b)", "full_signature": "public static boolean equalOrBothEmpty(String a, String b)", "class_method_signature": "StringUtil.equalOrBothEmpty(String a, String b)", "testcase": false, "constructor": false}, {"identifier": "genereerVoorletters", "parameters": "(String voornamen)", "modifiers": "public static", "return": "String", "signature": "String genereerVoorletters(String voornamen)", "full_signature": "public static String genereerVoorletters(String voornamen)", "class_method_signature": "StringUtil.genereerVoorletters(String voornamen)", "testcase": false, "constructor": false}, {"identifier": "hexEncode", "parameters": "(byte[] aInput)", "modifiers": "public static", "return": "String", "signature": "String hexEncode(byte[] aInput)", "full_signature": "public static String hexEncode(byte[] aInput)", "class_method_signature": "StringUtil.hexEncode(byte[] aInput)", "testcase": false, "constructor": false}, {"identifier": "containsStringStartingWith", "parameters": "(List<String> list, String prefix)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsStringStartingWith(List<String> list, String prefix)", "full_signature": "public static boolean containsStringStartingWith(List<String> list, String prefix)", "class_method_signature": "StringUtil.containsStringStartingWith(List<String> list, String prefix)", "testcase": false, "constructor": false}, {"identifier": "nullOrStringValue", "parameters": "(Object value)", "modifiers": "public static", "return": "String", "signature": "String nullOrStringValue(Object value)", "full_signature": "public static String nullOrStringValue(Object value)", "class_method_signature": "StringUtil.nullOrStringValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "emptyOrStringValue", "parameters": "(Object value)", "modifiers": "public static", "return": "String", "signature": "String emptyOrStringValue(Object value)", "full_signature": "public static String emptyOrStringValue(Object value)", "class_method_signature": "StringUtil.emptyOrStringValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "firstCharLowercase", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String firstCharLowercase(String name)", "full_signature": "public static String firstCharLowercase(String name)", "class_method_signature": "StringUtil.firstCharLowercase(String name)", "testcase": false, "constructor": false}, {"identifier": "spaties", "parameters": "(int aantal)", "modifiers": "public static", "return": "String", "signature": "String spaties(int aantal)", "full_signature": "public static String spaties(int aantal)", "class_method_signature": "StringUtil.spaties(int aantal)", "testcase": false, "constructor": false}, {"identifier": "createValidFileName", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String createValidFileName(String filename)", "full_signature": "public static String createValidFileName(String filename)", "class_method_signature": "StringUtil.createValidFileName(String filename)", "testcase": false, "constructor": false}], "file": "cobra/commons/src/main/java/nl/topicus/cobra/util/StringUtil.java"}, "focal_method": {"identifier": "nullOrStringValue", "parameters": "(Object value)", "modifiers": "public static", "return": "String", "body": "public static String nullOrStringValue(Object value)\n\t{\n\t\tif (value == null)\n\t\t\treturn null;\n\n\t\treturn String.valueOf(value);\n\t}", "signature": "String nullOrStringValue(Object value)", "full_signature": "public static String nullOrStringValue(Object value)", "class_method_signature": "StringUtil.nullOrStringValue(Object value)", "testcase": false, "constructor": false, "invocations": ["valueOf"]}, "repository": {"repo_id": 9812178, "url": "https://github.com/topicusonderwijs/tribe-krd-opensource", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 6540, "license": "licensed"}}