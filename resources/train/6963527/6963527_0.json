{"test_class": {"identifier": "SimpleJSONParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "node-projects/src/test/java/org/netbeans/modules/nodejs/json/SimpleJSONParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse () throws IOException, JsonException {\n        for (int i = 0; i < 11; i++) {\n            parseJSON( \"package_\" + i + \".json\" );\n        }\n        for (int i = 0; i < 4; i++) {\n            try {\n                parseJSON( \"bad_\" + (i + 1) + \".json\" );\n                fail( \"bad_\" + i + \" should not have been parsed\" );\n            } catch ( JsonException e ) {\n                System.out.println( e.getMessage() );\n            }\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "SimpleJSONParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["parseJSON", "parseJSON", "fail", "println", "getMessage"]}, "focal_class": {"identifier": "SimpleJSONParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean permissive;", "modifier": "private", "type": "boolean", "declarator": "permissive", "var_name": "permissive"}, {"original_string": "boolean thrown = false;", "modifier": "", "type": "boolean", "declarator": "thrown = false", "var_name": "thrown"}, {"original_string": "private static final int INDENT_COUNT = 4;", "modifier": "private static final", "type": "int", "declarator": "INDENT_COUNT = 4", "var_name": "INDENT_COUNT"}], "methods": [{"identifier": "SimpleJSONParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleJSONParser()", "full_signature": "public  SimpleJSONParser()", "class_method_signature": "SimpleJSONParser.SimpleJSONParser()", "testcase": false, "constructor": true}, {"identifier": "SimpleJSONParser", "parameters": "( boolean permissive )", "modifiers": "public", "return": "", "signature": " SimpleJSONParser( boolean permissive )", "full_signature": "public  SimpleJSONParser( boolean permissive )", "class_method_signature": "SimpleJSONParser.SimpleJSONParser( boolean permissive )", "testcase": false, "constructor": true}, {"identifier": "setPermissive", "parameters": "( boolean val )", "modifiers": "", "return": "void", "signature": "void setPermissive( boolean val )", "full_signature": " void setPermissive( boolean val )", "class_method_signature": "SimpleJSONParser.setPermissive( boolean val )", "testcase": false, "constructor": false}, {"identifier": "hasErrors", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasErrors()", "full_signature": "public boolean hasErrors()", "class_method_signature": "SimpleJSONParser.hasErrors()", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "( Properties properties )", "modifiers": "public", "return": "CharSequence", "signature": "CharSequence toJSON( Properties properties )", "full_signature": "public CharSequence toJSON( Properties properties )", "class_method_signature": "SimpleJSONParser.toJSON( Properties properties )", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "( Map<String, Object> properties )", "modifiers": "public", "return": "CharSequence", "signature": "CharSequence toJSON( Map<String, Object> properties )", "full_signature": "public CharSequence toJSON( Map<String, Object> properties )", "class_method_signature": "SimpleJSONParser.toJSON( Map<String, Object> properties )", "testcase": false, "constructor": false}, {"identifier": "reflectToJSON", "parameters": "( Object o )", "modifiers": "", "return": "CharSequence", "signature": "CharSequence reflectToJSON( Object o )", "full_signature": " CharSequence reflectToJSON( Object o )", "class_method_signature": "SimpleJSONParser.reflectToJSON( Object o )", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "( FileObject in )", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> parse( FileObject in )", "full_signature": "public Map<String, Object> parse( FileObject in )", "class_method_signature": "SimpleJSONParser.parse( FileObject in )", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "( InputStream in )", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> parse( InputStream in )", "full_signature": "public Map<String, Object> parse( InputStream in )", "class_method_signature": "SimpleJSONParser.parse( InputStream in )", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "( InputStream in, String encoding )", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> parse( InputStream in, String encoding )", "full_signature": "public Map<String, Object> parse( InputStream in, String encoding )", "class_method_signature": "SimpleJSONParser.parse( InputStream in, String encoding )", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "( CharSequence seq )", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> parse( CharSequence seq )", "full_signature": "public Map<String, Object> parse( CharSequence seq )", "class_method_signature": "SimpleJSONParser.parse( CharSequence seq )", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "( Map<String, Object> m )", "modifiers": "public static", "return": "CharSequence", "signature": "CharSequence out( Map<String, Object> m )", "full_signature": "public static CharSequence out( Map<String, Object> m )", "class_method_signature": "SimpleJSONParser.out( Map<String, Object> m )", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "( List<Object> l, StringBuilder sb, int indent )", "modifiers": "@SuppressWarnings (\"unchecked\") private static final", "return": "void", "signature": "void out( List<Object> l, StringBuilder sb, int indent )", "full_signature": "@SuppressWarnings (\"unchecked\") private static final void out( List<Object> l, StringBuilder sb, int indent )", "class_method_signature": "SimpleJSONParser.out( List<Object> l, StringBuilder sb, int indent )", "testcase": false, "constructor": false}, {"identifier": "reflectOut", "parameters": "( Object o, StringBuilder sb, int indent )", "modifiers": "@SuppressWarnings(\"unchecked\") private static final", "return": "void", "signature": "void reflectOut( Object o, StringBuilder sb, int indent )", "full_signature": "@SuppressWarnings(\"unchecked\") private static final void reflectOut( Object o, StringBuilder sb, int indent )", "class_method_signature": "SimpleJSONParser.reflectOut( Object o, StringBuilder sb, int indent )", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "( Map<String, Object> m, StringBuilder sb, int indent )", "modifiers": "@SuppressWarnings(\"unchecked\") private static final", "return": "void", "signature": "void out( Map<String, Object> m, StringBuilder sb, int indent )", "full_signature": "@SuppressWarnings(\"unchecked\") private static final void out( Map<String, Object> m, StringBuilder sb, int indent )", "class_method_signature": "SimpleJSONParser.out( Map<String, Object> m, StringBuilder sb, int indent )", "testcase": false, "constructor": false}], "file": "node-projects/src/main/java/org/netbeans/modules/nodejs/json/SimpleJSONParser.java"}, "focal_method": {"identifier": "parse", "parameters": "( FileObject in )", "modifiers": "public", "return": "Map<String, Object>", "body": "public Map<String, Object> parse ( FileObject in ) throws JsonException, IOException {\n        return parse( in.asText( \"UTF-8\" ) );\n    }", "signature": "Map<String, Object> parse( FileObject in )", "full_signature": "public Map<String, Object> parse( FileObject in )", "class_method_signature": "SimpleJSONParser.parse( FileObject in )", "testcase": false, "constructor": false, "invocations": ["parse", "asText"]}, "repository": {"repo_id": 6963527, "url": "https://github.com/timboudreau/nb-nodejs", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 89, "size": 657, "license": "licensed"}}