{"test_class": {"identifier": "SuggestionBaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected SuggestionBase suggestion = null;", "modifier": "protected", "type": "SuggestionBase", "declarator": "suggestion = null", "var_name": "suggestion"}, {"original_string": "protected String hint = \"llo\";", "modifier": "protected", "type": "String", "declarator": "hint = \"llo\"", "var_name": "hint"}, {"original_string": "protected String text = \"Yellow melLow\";", "modifier": "protected", "type": "String", "declarator": "text = \"Yellow melLow\"", "var_name": "text"}, {"original_string": "protected String delimiter = \"b\";", "modifier": "protected", "type": "String", "declarator": "delimiter = \"b\"", "var_name": "delimiter"}, {"original_string": "protected String highlightedText = \"Ye<b>llo</b>w me<b>lLo</b>w\";", "modifier": "protected", "type": "String", "declarator": "highlightedText = \"Ye<b>llo</b>w me<b>lLo</b>w\"", "var_name": "highlightedText"}], "file": "modules/weblounge-workbench/src/test/java/ch/entwine/weblounge/workbench/suggest/SuggestionBaseTest.java"}, "test_case": {"identifier": "testHighlight", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHighlight() {\n    assertEquals(highlightedText, suggestion.highlight(text, hint, delimiter));\n    assertEquals(text, suggestion.highlight(text, hint, null));\n    assertNull(suggestion.highlight(null, hint, delimiter));\n  }", "signature": "void testHighlight()", "full_signature": "@Test public void testHighlight()", "class_method_signature": "SuggestionBaseTest.testHighlight()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "highlight", "assertEquals", "highlight", "assertNull", "highlight"]}, "focal_class": {"identifier": "SuggestionBase", "superclass": "", "interfaces": "implements Suggestion", "fields": [], "methods": [{"identifier": "highlight", "parameters": "(String text, String hint, String delimiter)", "modifiers": "protected", "return": "String", "signature": "String highlight(String text, String hint, String delimiter)", "full_signature": "protected String highlight(String text, String hint, String delimiter)", "class_method_signature": "SuggestionBase.highlight(String text, String hint, String delimiter)", "testcase": false, "constructor": false}], "file": "modules/weblounge-workbench/src/main/java/ch/entwine/weblounge/workbench/suggest/SuggestionBase.java"}, "focal_method": {"identifier": "highlight", "parameters": "(String text, String hint, String delimiter)", "modifiers": "protected", "return": "String", "body": "protected String highlight(String text, String hint, String delimiter) {\n    if (StringUtils.isBlank(text) || StringUtils.isBlank(delimiter))\n      return text;\n    String lowercasedText = text.toLowerCase();\n    int position = lowercasedText.indexOf(hint);\n    if (position >= 0) {\n      StringBuffer result = new StringBuffer();\n      int startOfRest = 0;\n      while (position >= 0) {\n        result.append(text.substring(startOfRest, position));\n        result.append(\"<\").append(delimiter).append(\">\");\n        result.append(text.substring(position, position + hint.length()));\n        result.append(\"</\").append(delimiter).append(\">\");\n        startOfRest = position + hint.length();\n        position = lowercasedText.indexOf(hint, startOfRest);\n      }\n      result.append(text.substring(startOfRest));\n      return result.toString();\n    } else {\n      return text;\n    }\n  }", "signature": "String highlight(String text, String hint, String delimiter)", "full_signature": "protected String highlight(String text, String hint, String delimiter)", "class_method_signature": "SuggestionBase.highlight(String text, String hint, String delimiter)", "testcase": false, "constructor": false, "invocations": ["isBlank", "isBlank", "toLowerCase", "indexOf", "append", "substring", "append", "append", "append", "append", "substring", "length", "append", "append", "append", "length", "indexOf", "append", "substring", "toString"]}, "repository": {"repo_id": 3847504, "url": "https://github.com/digitalroastery/weblounge", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 111809, "license": "licensed"}}