{"test_class": {"identifier": "HK2VerticleFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HK2VerticleFactory factory;", "modifier": "private", "type": "HK2VerticleFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Mock\n    private Vertx vertx;", "modifier": "@Mock\n    private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}], "file": "vertx-hk2/src/test/java/com/englishtown/vertx/hk2/HK2VerticleFactoryTest.java"}, "test_case": {"identifier": "testCreateVerticle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateVerticle() throws Exception {\n        String identifier = HK2VerticleFactory.getIdentifier(TestHK2Verticle.class);\n        Verticle verticle = factory.createVerticle(identifier, this.getClass().getClassLoader());\n        assertThat(verticle, instanceOf(HK2VerticleLoader.class));\n\n        HK2VerticleLoader loader = (HK2VerticleLoader) verticle;\n        assertEquals(TestHK2Verticle.class.getName(), loader.getVerticleName());\n    }", "signature": "void testCreateVerticle()", "full_signature": "@Test public void testCreateVerticle()", "class_method_signature": "HK2VerticleFactoryTest.testCreateVerticle()", "testcase": true, "constructor": false, "invocations": ["getIdentifier", "createVerticle", "getClassLoader", "getClass", "assertThat", "instanceOf", "assertEquals", "getName", "getVerticleName"]}, "focal_class": {"identifier": "HK2VerticleFactory", "superclass": "", "interfaces": "implements VerticleFactory", "fields": [{"original_string": "public static final String PREFIX = \"java-hk2\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX = \"java-hk2\"", "var_name": "PREFIX"}, {"original_string": "private ServiceLocator locator;", "modifier": "private", "type": "ServiceLocator", "declarator": "locator", "var_name": "locator"}], "methods": [{"identifier": "prefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String prefix()", "full_signature": "@Override public String prefix()", "class_method_signature": "HK2VerticleFactory.prefix()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "HK2VerticleFactory.close()", "testcase": false, "constructor": false}, {"identifier": "getLocator", "parameters": "()", "modifiers": "public", "return": "ServiceLocator", "signature": "ServiceLocator getLocator()", "full_signature": "public ServiceLocator getLocator()", "class_method_signature": "HK2VerticleFactory.getLocator()", "testcase": false, "constructor": false}, {"identifier": "setLocator", "parameters": "(ServiceLocator locator)", "modifiers": "public", "return": "HK2VerticleFactory", "signature": "HK2VerticleFactory setLocator(ServiceLocator locator)", "full_signature": "public HK2VerticleFactory setLocator(ServiceLocator locator)", "class_method_signature": "HK2VerticleFactory.setLocator(ServiceLocator locator)", "testcase": false, "constructor": false}, {"identifier": "createVerticle", "parameters": "(String verticleName, ClassLoader classLoader)", "modifiers": "@Override public", "return": "Verticle", "signature": "Verticle createVerticle(String verticleName, ClassLoader classLoader)", "full_signature": "@Override public Verticle createVerticle(String verticleName, ClassLoader classLoader)", "class_method_signature": "HK2VerticleFactory.createVerticle(String verticleName, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "createLocator", "parameters": "()", "modifiers": "protected", "return": "ServiceLocator", "signature": "ServiceLocator createLocator()", "full_signature": "protected ServiceLocator createLocator()", "class_method_signature": "HK2VerticleFactory.createLocator()", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "(Class<? extends Verticle> clazz)", "modifiers": "public static", "return": "String", "signature": "String getIdentifier(Class<? extends Verticle> clazz)", "full_signature": "public static String getIdentifier(Class<? extends Verticle> clazz)", "class_method_signature": "HK2VerticleFactory.getIdentifier(Class<? extends Verticle> clazz)", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "(String clazz)", "modifiers": "public static", "return": "String", "signature": "String getIdentifier(String clazz)", "full_signature": "public static String getIdentifier(String clazz)", "class_method_signature": "HK2VerticleFactory.getIdentifier(String clazz)", "testcase": false, "constructor": false}], "file": "vertx-hk2/src/main/java/com/englishtown/vertx/hk2/HK2VerticleFactory.java"}, "focal_method": {"identifier": "createVerticle", "parameters": "(String verticleName, ClassLoader classLoader)", "modifiers": "@Override public", "return": "Verticle", "body": "@Override\n    public Verticle createVerticle(String verticleName, ClassLoader classLoader) throws Exception {\n        verticleName = VerticleFactory.removePrefix(verticleName);\n\n        // Use the provided class loader to create an instance of HK2VerticleLoader.  This is necessary when working with vert.x IsolatingClassLoader\n        @SuppressWarnings(\"unchecked\")\n        Class<Verticle> loader = (Class<Verticle>) classLoader.loadClass(HK2VerticleLoader.class.getName());\n        Constructor<Verticle> ctor = loader.getConstructor(String.class, ClassLoader.class, ServiceLocator.class);\n\n        if (ctor == null) {\n            throw new IllegalStateException(\"Could not find HK2VerticleLoad constructor\");\n        }\n\n        return ctor.newInstance(verticleName, classLoader, getLocator());\n    }", "signature": "Verticle createVerticle(String verticleName, ClassLoader classLoader)", "full_signature": "@Override public Verticle createVerticle(String verticleName, ClassLoader classLoader)", "class_method_signature": "HK2VerticleFactory.createVerticle(String verticleName, ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["removePrefix", "loadClass", "getName", "getConstructor", "newInstance", "getLocator"]}, "repository": {"repo_id": 9239163, "url": "https://github.com/ef-labs/vertx-hk2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 30, "size": 153, "license": "licensed"}}