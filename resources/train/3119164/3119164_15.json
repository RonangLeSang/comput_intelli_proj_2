{"test_class": {"identifier": "GammaStmConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "multiverse-core/src/test/java/org/multiverse/stms/gamma/GammaStmConfigTest.java"}, "test_case": {"identifier": "minimalVariableLengthTransactionSize_whenSmallerThan1", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void minimalVariableLengthTransactionSize_whenSmallerThan1() {\n        GammaStmConfig config = new GammaStmConfig();\n        config.minimalVariableLengthTransactionSize = 0;\n        config.validate();\n    }", "signature": "void minimalVariableLengthTransactionSize_whenSmallerThan1()", "full_signature": "@Test(expected = IllegalStateException.class) public void minimalVariableLengthTransactionSize_whenSmallerThan1()", "class_method_signature": "GammaStmConfigTest.minimalVariableLengthTransactionSize_whenSmallerThan1()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "GammaStmConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "public List<TxnListener> permanentListeners = new LinkedList<TxnListener>();", "modifier": "public", "type": "List<TxnListener>", "declarator": "permanentListeners = new LinkedList<TxnListener>()", "var_name": "permanentListeners"}, {"original_string": "public PropagationLevel propagationLevel = PropagationLevel.Requires;", "modifier": "public", "type": "PropagationLevel", "declarator": "propagationLevel = PropagationLevel.Requires", "var_name": "propagationLevel"}, {"original_string": "public IsolationLevel isolationLevel = IsolationLevel.Snapshot;", "modifier": "public", "type": "IsolationLevel", "declarator": "isolationLevel = IsolationLevel.Snapshot", "var_name": "isolationLevel"}, {"original_string": "public LockMode readLockMode = LockMode.None;", "modifier": "public", "type": "LockMode", "declarator": "readLockMode = LockMode.None", "var_name": "readLockMode"}, {"original_string": "public LockMode writeLockMode = LockMode.None;", "modifier": "public", "type": "LockMode", "declarator": "writeLockMode = LockMode.None", "var_name": "writeLockMode"}, {"original_string": "public boolean blockingAllowed = true;", "modifier": "public", "type": "boolean", "declarator": "blockingAllowed = true", "var_name": "blockingAllowed"}, {"original_string": "public boolean interruptible = false;", "modifier": "public", "type": "boolean", "declarator": "interruptible = false", "var_name": "interruptible"}, {"original_string": "public long timeoutNs = Long.MAX_VALUE;", "modifier": "public", "type": "long", "declarator": "timeoutNs = Long.MAX_VALUE", "var_name": "timeoutNs"}, {"original_string": "public boolean readonly = false;", "modifier": "public", "type": "boolean", "declarator": "readonly = false", "var_name": "readonly"}, {"original_string": "public int spinCount = 64;", "modifier": "public", "type": "int", "declarator": "spinCount = 64", "var_name": "spinCount"}, {"original_string": "public boolean dirtyCheck = true;", "modifier": "public", "type": "boolean", "declarator": "dirtyCheck = true", "var_name": "dirtyCheck"}, {"original_string": "public int minimalVariableLengthTransactionSize = 4;", "modifier": "public", "type": "int", "declarator": "minimalVariableLengthTransactionSize = 4", "var_name": "minimalVariableLengthTransactionSize"}, {"original_string": "public boolean trackReads = true;", "modifier": "public", "type": "boolean", "declarator": "trackReads = true", "var_name": "trackReads"}, {"original_string": "public int maxRetries = 1000;", "modifier": "public", "type": "int", "declarator": "maxRetries = 1000", "var_name": "maxRetries"}, {"original_string": "public boolean speculativeConfigEnabled = true;", "modifier": "public", "type": "boolean", "declarator": "speculativeConfigEnabled = true", "var_name": "speculativeConfigEnabled"}, {"original_string": "public int maxFixedLengthTransactionSize = 20;", "modifier": "public", "type": "int", "declarator": "maxFixedLengthTransactionSize = 20", "var_name": "maxFixedLengthTransactionSize"}, {"original_string": "public BackoffPolicy backoffPolicy = DefaultBackoffPolicy.MAX_100_MS;", "modifier": "public", "type": "BackoffPolicy", "declarator": "backoffPolicy = DefaultBackoffPolicy.MAX_100_MS", "var_name": "backoffPolicy"}, {"original_string": "public TraceLevel traceLevel = TraceLevel.None;", "modifier": "public", "type": "TraceLevel", "declarator": "traceLevel = TraceLevel.None", "var_name": "traceLevel"}, {"original_string": "public boolean controlFlowErrorsReused = true;", "modifier": "public", "type": "boolean", "declarator": "controlFlowErrorsReused = true", "var_name": "controlFlowErrorsReused"}, {"original_string": "public boolean isFat = false;", "modifier": "public", "type": "boolean", "declarator": "isFat = false", "var_name": "isFat"}, {"original_string": "public int maximumPoorMansConflictScanLength = 20;", "modifier": "public", "type": "int", "declarator": "maximumPoorMansConflictScanLength = 20", "var_name": "maximumPoorMansConflictScanLength"}, {"original_string": "public int readBiasedThreshold = 128;", "modifier": "public", "type": "int", "declarator": "readBiasedThreshold = 128", "var_name": "readBiasedThreshold"}], "methods": [{"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "GammaStmConfig.validate()", "testcase": false, "constructor": false}], "file": "multiverse-core/src/main/java/org/multiverse/stms/gamma/GammaStmConfig.java"}, "focal_method": {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void validate() {\n        if (timeoutNs < 0) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] timeoutNs can't be smaller than 0, \" +\n                            \"timeoutNs was \" + timeoutNs);\n        }\n\n        if (readBiasedThreshold < 0) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] readBiasedThreshold can't be smaller than 0, \" +\n                            \"readBiasedThreshold was \" + readBiasedThreshold);\n        }\n\n        if (readBiasedThreshold > 1023) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] readBiasedThreshold can't be larger than 1023, \" +\n                            \"readBiasedThreshold was \" + readBiasedThreshold);\n        }\n\n        if (maximumPoorMansConflictScanLength < 0) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] maximumFullConflictScanSize can't be smaller than 0, \" +\n                            \"maximumFullConflictScanSize was \" + maxFixedLengthTransactionSize);\n        }\n\n        if (readLockMode == null) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] readLockMode can't be null\");\n        }\n\n        if (writeLockMode == null) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] writeLockMode can't be null\");\n        }\n\n        if (writeLockMode.asInt() < readLockMode.asInt()) {\n            throw new IllegalStateException(\n                    format(\"[GammaStmConfig] writeLockMode [%s] can't be lower than readLockMode [%s]\",\n                            writeLockMode, readLockMode));\n        }\n\n        if (isolationLevel == null) {\n            throw new IllegalStateException(\"[GammaStmConfig] isolationLevel can't be null\");\n        }\n\n        if (isolationLevel.doesAllowWriteSkew() && !trackReads) {\n            throw new IllegalStateException(\n                    format(\"[GammaStmConfig] isolation level '%s' can't be combined with readtracking\" +\n                            \"is false since it is needed to prevent the writeskew problem\", isolationLevel));\n        }\n\n        if (blockingAllowed && !trackReads) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] blockingAllowed can't be true if trackReads is false\");\n        }\n\n        if (spinCount < 0) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] spinCount can't be smaller than 0, but was \" + spinCount);\n        }\n\n        if (minimalVariableLengthTransactionSize < 1) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] minimalVariableLengthTransactionSize can't be smaller than 1, but was \"\n                            + minimalVariableLengthTransactionSize);\n        }\n\n        if (maxRetries < 0) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] maxRetries can't be smaller than 0, but was \" + maxRetries);\n        }\n\n        if (maxFixedLengthTransactionSize < 2) {\n            throw new IllegalStateException(\n                    \"[GammaStmConfig] maxFixedLengthTransactionSize can't be smaller than 2, but was \"\n                            + maxFixedLengthTransactionSize);\n        }\n\n        if (backoffPolicy == null) {\n            throw new IllegalStateException(\"[GammaStmConfig] backoffPolicy can't be null\");\n        }\n\n        if (traceLevel == null) {\n            throw new IllegalStateException(\"[GammaStmConfig] traceLevel can't be null\");\n        }\n\n        if (propagationLevel == null) {\n            throw new IllegalStateException(\"[GammaStmConfig] propagationLevel can't be null\");\n        }\n\n        if (permanentListeners == null) {\n            throw new IllegalStateException(\"[GammaStmConfig] permanentListeners can't be null\");\n        }\n\n        for (int k = 0; k < permanentListeners.size(); k++) {\n            TxnListener listener = permanentListeners.get(k);\n            if (listener == null) {\n                throw new IllegalStateException(\n                        format(\"[GammaStmConfig] permanentListener at index %s can't be null\", k));\n            }\n        }\n    }", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "GammaStmConfig.validate()", "testcase": false, "constructor": false, "invocations": ["asInt", "asInt", "format", "doesAllowWriteSkew", "format", "size", "get", "format"]}, "repository": {"repo_id": 3119164, "url": "https://github.com/pveentjer/Multiverse", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 186, "size": 4592, "license": "licensed"}}