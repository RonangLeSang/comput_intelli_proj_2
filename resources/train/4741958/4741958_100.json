{"test_class": {"identifier": "LogLikelihoodTest", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [], "file": "math/src/test/java/org/apache/mahout/math/stats/LogLikelihoodTest.java"}, "test_case": {"identifier": "testRootLogLikelihood", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRootLogLikelihood() throws Exception {\n    // positive where k11 is bigger than expected.\n    assertTrue(LogLikelihood.rootLogLikelihoodRatio(904, 21060, 1144, 283012) > 0.0);\n\n    // negative because k11 is lower than expected\n    assertTrue(LogLikelihood.rootLogLikelihoodRatio(36, 21928, 60280, 623876) < 0.0);\n  }", "signature": "void testRootLogLikelihood()", "full_signature": "@Test public void testRootLogLikelihood()", "class_method_signature": "LogLikelihoodTest.testRootLogLikelihood()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "rootLogLikelihoodRatio", "assertTrue", "rootLogLikelihoodRatio"]}, "focal_class": {"identifier": "LogLikelihood", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "LogLikelihood", "parameters": "()", "modifiers": "private", "return": "", "signature": " LogLikelihood()", "full_signature": "private  LogLikelihood()", "class_method_signature": "LogLikelihood.LogLikelihood()", "testcase": false, "constructor": true}, {"identifier": "entropy", "parameters": "(long... elements)", "modifiers": "public static", "return": "double", "signature": "double entropy(long... elements)", "full_signature": "public static double entropy(long... elements)", "class_method_signature": "LogLikelihood.entropy(long... elements)", "testcase": false, "constructor": false}, {"identifier": "xLogX", "parameters": "(long x)", "modifiers": "private static", "return": "double", "signature": "double xLogX(long x)", "full_signature": "private static double xLogX(long x)", "class_method_signature": "LogLikelihood.xLogX(long x)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(long a, long b)", "modifiers": "private static", "return": "double", "signature": "double entropy(long a, long b)", "full_signature": "private static double entropy(long a, long b)", "class_method_signature": "LogLikelihood.entropy(long a, long b)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(long a, long b, long c, long d)", "modifiers": "private static", "return": "double", "signature": "double entropy(long a, long b, long c, long d)", "full_signature": "private static double entropy(long a, long b, long c, long d)", "class_method_signature": "LogLikelihood.entropy(long a, long b, long c, long d)", "testcase": false, "constructor": false}, {"identifier": "logLikelihoodRatio", "parameters": "(long k11, long k12, long k21, long k22)", "modifiers": "public static", "return": "double", "signature": "double logLikelihoodRatio(long k11, long k12, long k21, long k22)", "full_signature": "public static double logLikelihoodRatio(long k11, long k12, long k21, long k22)", "class_method_signature": "LogLikelihood.logLikelihoodRatio(long k11, long k12, long k21, long k22)", "testcase": false, "constructor": false}, {"identifier": "rootLogLikelihoodRatio", "parameters": "(long k11, long k12, long k21, long k22)", "modifiers": "public static", "return": "double", "signature": "double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22)", "full_signature": "public static double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22)", "class_method_signature": "LogLikelihood.rootLogLikelihoodRatio(long k11, long k12, long k21, long k22)", "testcase": false, "constructor": false}, {"identifier": "compareFrequencies", "parameters": "(Multiset<T> a,\n                                                           Multiset<T> b,\n                                                           int maxReturn,\n                                                           double threshold)", "modifiers": "public static", "return": "List<ScoredItem<T>>", "signature": "List<ScoredItem<T>> compareFrequencies(Multiset<T> a,\n                                                           Multiset<T> b,\n                                                           int maxReturn,\n                                                           double threshold)", "full_signature": "public static List<ScoredItem<T>> compareFrequencies(Multiset<T> a,\n                                                           Multiset<T> b,\n                                                           int maxReturn,\n                                                           double threshold)", "class_method_signature": "LogLikelihood.compareFrequencies(Multiset<T> a,\n                                                           Multiset<T> b,\n                                                           int maxReturn,\n                                                           double threshold)", "testcase": false, "constructor": false}, {"identifier": "compareAndAdd", "parameters": "(Multiset<T> a,\n                                        Multiset<T> b,\n                                        int maxReturn,\n                                        double threshold,\n                                        int totalA,\n                                        int totalB,\n                                        Queue<ScoredItem<T>> best,\n                                        T t)", "modifiers": "private static", "return": "void", "signature": "void compareAndAdd(Multiset<T> a,\n                                        Multiset<T> b,\n                                        int maxReturn,\n                                        double threshold,\n                                        int totalA,\n                                        int totalB,\n                                        Queue<ScoredItem<T>> best,\n                                        T t)", "full_signature": "private static void compareAndAdd(Multiset<T> a,\n                                        Multiset<T> b,\n                                        int maxReturn,\n                                        double threshold,\n                                        int totalA,\n                                        int totalB,\n                                        Queue<ScoredItem<T>> best,\n                                        T t)", "class_method_signature": "LogLikelihood.compareAndAdd(Multiset<T> a,\n                                        Multiset<T> b,\n                                        int maxReturn,\n                                        double threshold,\n                                        int totalA,\n                                        int totalB,\n                                        Queue<ScoredItem<T>> best,\n                                        T t)", "testcase": false, "constructor": false}], "file": "math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java"}, "focal_method": {"identifier": "rootLogLikelihoodRatio", "parameters": "(long k11, long k12, long k21, long k22)", "modifiers": "public static", "return": "double", "body": "public static double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22) {\n    double llr = logLikelihoodRatio(k11, k12, k21, k22);\n    double sqrt = Math.sqrt(llr);\n    if ((double) k11 / (k11 + k12) < (double) k21 / (k21 + k22)) {\n      sqrt = -sqrt;\n    }\n    return sqrt;\n  }", "signature": "double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22)", "full_signature": "public static double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22)", "class_method_signature": "LogLikelihood.rootLogLikelihoodRatio(long k11, long k12, long k21, long k22)", "testcase": false, "constructor": false, "invocations": ["logLikelihoodRatio", "sqrt"]}, "repository": {"repo_id": 4741958, "url": "https://github.com/cloudera/mahout", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 41618, "license": "licensed"}}