{"test_class": {"identifier": "RegexUtilsTest", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "static final String[] TEST_STRS = {\n          \"127.0.0.1 -  -  [01/10/2011:00:01:51 +0000] \\\"GET /solr/collection1/browse?q=foo&rows=10&wt=json&hl=true&hl.fl=body&hl.fl=content\",\n          \"127.0.0.1 -  -  [01/10/2011:00:20:58 +0000] \\\"GET /solr/collection1/browse?q=Using+Solr+Search+RDBMS&fq=%7B%21tag%3Dsource%7D%28%28source%3Alucid+AND+lucid_facet%3A%28site%29%29%29&rows=10\",\n          \"127.0.0.1 -  -  [01/10/2011:00:21:21 +0000] \\\"GET /solr/collection1/browse?q=language+detection&start=560&rows=10 HTTP/1.1\\\" 200 45071\",\n          \"127.0.0.1 -  -  [01/10/2011:00:21:21 +0000] \\\"GET /solr/collection1/browse?q=&start=560&rows=10 HTTP/1.1\\\" 200 45071\"\n  };", "modifier": "static final", "type": "String[]", "declarator": "TEST_STRS = {\n          \"127.0.0.1 -  -  [01/10/2011:00:01:51 +0000] \\\"GET /solr/collection1/browse?q=foo&rows=10&wt=json&hl=true&hl.fl=body&hl.fl=content\",\n          \"127.0.0.1 -  -  [01/10/2011:00:20:58 +0000] \\\"GET /solr/collection1/browse?q=Using+Solr+Search+RDBMS&fq=%7B%21tag%3Dsource%7D%28%28source%3Alucid+AND+lucid_facet%3A%28site%29%29%29&rows=10\",\n          \"127.0.0.1 -  -  [01/10/2011:00:21:21 +0000] \\\"GET /solr/collection1/browse?q=language+detection&start=560&rows=10 HTTP/1.1\\\" 200 45071\",\n          \"127.0.0.1 -  -  [01/10/2011:00:21:21 +0000] \\\"GET /solr/collection1/browse?q=&start=560&rows=10 HTTP/1.1\\\" 200 45071\"\n  }", "var_name": "TEST_STRS"}, {"original_string": "static final String[] GOLD = {\"foo\", \"Using Solr Search RDBMS\", \"language detection\", \"\"};", "modifier": "static final", "type": "String[]", "declarator": "GOLD = {\"foo\", \"Using Solr Search RDBMS\", \"language detection\", \"\"}", "var_name": "GOLD"}], "file": "integration/src/test/java/org/apache/mahout/utils/regex/RegexUtilsTest.java"}, "test_case": {"identifier": "testExtract", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExtract() throws Exception {\n    Pattern pattern = Pattern.compile(\"(?<=(\\\\?|&)q=).*?(?=&|$)\");\n    String line = \"127.0.0.1 -  -  [24/05/2010:01:19:22 +0000] \\\"GET /solr/select?q=import statement&start=1 HTTP/1.1\\\" 200 37571\";\n    String res = RegexUtils.extract(line, pattern, Collections.<Integer>emptyList(), \" \", RegexUtils.IDENTITY_TRANSFORMER);\n    assertEquals(res, \"import statement\", res);\n\n    for (int i = 0; i < TEST_STRS.length; i++) {\n      String testStr = TEST_STRS[i];\n      res = RegexUtils.extract(testStr, pattern, Collections.<Integer>emptyList(), \" \", new URLDecodeTransformer());\n      assertEquals(GOLD[i], res);\n    }\n\n    pattern = Pattern.compile(\"((?<=(\\\\?|&)q=)(.*?)(?=(&|$))|(?<=((\\\\?|&)start=))(\\\\d+))\");\n    res = RegexUtils.extract(line, pattern, Collections.<Integer>emptyList(), \" \", RegexUtils.IDENTITY_TRANSFORMER);\n    assertEquals(res, \"import statement 1\", res);\n\n    pattern = Pattern.compile(\"(start=1) HTTP\");\n    Collection<Integer> groupsToKeep = new ArrayList<Integer>();\n    groupsToKeep.add(1);\n    res = RegexUtils.extract(line, pattern, groupsToKeep, \" \", RegexUtils.IDENTITY_TRANSFORMER);\n    assertEquals(res, \"start=1\", res);\n  }", "signature": "void testExtract()", "full_signature": "@Test public void testExtract()", "class_method_signature": "RegexUtilsTest.testExtract()", "testcase": true, "constructor": false, "invocations": ["compile", "extract", "emptyList", "assertEquals", "extract", "emptyList", "assertEquals", "compile", "extract", "emptyList", "assertEquals", "compile", "add", "extract", "assertEquals"]}, "focal_class": {"identifier": "RegexUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final RegexTransformer IDENTITY_TRANSFORMER = new IdentityTransformer();", "modifier": "public static final", "type": "RegexTransformer", "declarator": "IDENTITY_TRANSFORMER = new IdentityTransformer()", "var_name": "IDENTITY_TRANSFORMER"}, {"original_string": "public static final RegexFormatter IDENTITY_FORMATTER = new IdentityFormatter();", "modifier": "public static final", "type": "RegexFormatter", "declarator": "IDENTITY_FORMATTER = new IdentityFormatter()", "var_name": "IDENTITY_FORMATTER"}], "methods": [{"identifier": "RegexUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " RegexUtils()", "full_signature": "private  RegexUtils()", "class_method_signature": "RegexUtils.RegexUtils()", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "modifiers": "public static", "return": "String", "signature": "String extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "full_signature": "public static String extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "class_method_signature": "RegexUtils.extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(CharSequence line, StringBuilder outputBuffer,\n                             Pattern pattern, Collection<Integer> groupsToKeep, String separator,\n                             RegexTransformer transformer)", "modifiers": "public static", "return": "void", "signature": "void extract(CharSequence line, StringBuilder outputBuffer,\n                             Pattern pattern, Collection<Integer> groupsToKeep, String separator,\n                             RegexTransformer transformer)", "full_signature": "public static void extract(CharSequence line, StringBuilder outputBuffer,\n                             Pattern pattern, Collection<Integer> groupsToKeep, String separator,\n                             RegexTransformer transformer)", "class_method_signature": "RegexUtils.extract(CharSequence line, StringBuilder outputBuffer,\n                             Pattern pattern, Collection<Integer> groupsToKeep, String separator,\n                             RegexTransformer transformer)", "testcase": false, "constructor": false}], "file": "integration/src/main/java/org/apache/mahout/utils/regex/RegexUtils.java"}, "focal_method": {"identifier": "extract", "parameters": "(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "modifiers": "public static", "return": "String", "body": "public static String extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer) {\n    StringBuilder bldr = new StringBuilder();\n    extract(line, bldr, pattern, groupsToKeep, separator, transformer);\n    return bldr.toString();\n  }", "signature": "String extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "full_signature": "public static String extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "class_method_signature": "RegexUtils.extract(CharSequence line, Pattern pattern, Collection<Integer> groupsToKeep,\n                               String separator, RegexTransformer transformer)", "testcase": false, "constructor": false, "invocations": ["extract", "toString"]}, "repository": {"repo_id": 4741958, "url": "https://github.com/cloudera/mahout", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 41618, "license": "licensed"}}