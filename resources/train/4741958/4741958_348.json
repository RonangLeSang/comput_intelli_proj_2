{"test_class": {"identifier": "HMMEvaluatorTest", "superclass": "extends HMMTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/mahout/classifier/sequencelearning/hmm/HMMEvaluatorTest.java"}, "test_case": {"identifier": "testScaledModelLikelihood", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testScaledModelLikelihood() {\n    // compute alpha and beta values\n    Matrix alpha = HmmAlgorithms.forwardAlgorithm(getModel(), getSequence(), true);\n    Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), true);\n    // now test whether forward == backward likelihood\n    double forwardLikelihood = HmmEvaluator.modelLikelihood(alpha, true);\n    double backwardLikelihood = HmmEvaluator.modelLikelihood(getModel(), getSequence(),\n        beta, true);\n    assertEquals(forwardLikelihood, backwardLikelihood, EPSILON);\n    // also make sure that the likelihood matches the expected one\n    assertEquals(1.8425e-4, forwardLikelihood, EPSILON);\n  }", "signature": "void testScaledModelLikelihood()", "full_signature": "@Test public void testScaledModelLikelihood()", "class_method_signature": "HMMEvaluatorTest.testScaledModelLikelihood()", "testcase": true, "constructor": false, "invocations": ["forwardAlgorithm", "getModel", "getSequence", "backwardAlgorithm", "getModel", "getSequence", "modelLikelihood", "modelLikelihood", "getModel", "getSequence", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "HmmEvaluator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HmmEvaluator", "parameters": "()", "modifiers": "private", "return": "", "signature": " HmmEvaluator()", "full_signature": "private  HmmEvaluator()", "class_method_signature": "HmmEvaluator.HmmEvaluator()", "testcase": false, "constructor": true}, {"identifier": "predict", "parameters": "(HmmModel model, int steps)", "modifiers": "public static", "return": "int[]", "signature": "int[] predict(HmmModel model, int steps)", "full_signature": "public static int[] predict(HmmModel model, int steps)", "class_method_signature": "HmmEvaluator.predict(HmmModel model, int steps)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(HmmModel model, int steps, long seed)", "modifiers": "public static", "return": "int[]", "signature": "int[] predict(HmmModel model, int steps, long seed)", "full_signature": "public static int[] predict(HmmModel model, int steps, long seed)", "class_method_signature": "HmmEvaluator.predict(HmmModel model, int steps, long seed)", "testcase": false, "constructor": false}, {"identifier": "modelLikelihood", "parameters": "(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "modifiers": "public static", "return": "double", "signature": "double modelLikelihood(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "full_signature": "public static double modelLikelihood(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "class_method_signature": "HmmEvaluator.modelLikelihood(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "modelLikelihood", "parameters": "(Matrix alpha, boolean scaled)", "modifiers": "public static", "return": "double", "signature": "double modelLikelihood(Matrix alpha, boolean scaled)", "full_signature": "public static double modelLikelihood(Matrix alpha, boolean scaled)", "class_method_signature": "HmmEvaluator.modelLikelihood(Matrix alpha, boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "modelLikelihood", "parameters": "(HmmModel model, int[] outputSequence, Matrix beta, boolean scaled)", "modifiers": "public static", "return": "double", "signature": "double modelLikelihood(HmmModel model, int[] outputSequence, Matrix beta, boolean scaled)", "full_signature": "public static double modelLikelihood(HmmModel model, int[] outputSequence, Matrix beta, boolean scaled)", "class_method_signature": "HmmEvaluator.modelLikelihood(HmmModel model, int[] outputSequence, Matrix beta, boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(HmmModel model, int[] observations, boolean scaled)", "modifiers": "public static", "return": "int[]", "signature": "int[] decode(HmmModel model, int[] observations, boolean scaled)", "full_signature": "public static int[] decode(HmmModel model, int[] observations, boolean scaled)", "class_method_signature": "HmmEvaluator.decode(HmmModel model, int[] observations, boolean scaled)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/HmmEvaluator.java"}, "focal_method": {"identifier": "modelLikelihood", "parameters": "(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "modifiers": "public static", "return": "double", "body": "public static double modelLikelihood(HmmModel model, int[] outputSequence,\n                                       boolean scaled) {\n    return modelLikelihood(HmmAlgorithms.forwardAlgorithm(model, outputSequence, scaled), scaled);\n  }", "signature": "double modelLikelihood(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "full_signature": "public static double modelLikelihood(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "class_method_signature": "HmmEvaluator.modelLikelihood(HmmModel model, int[] outputSequence,\n                                       boolean scaled)", "testcase": false, "constructor": false, "invocations": ["modelLikelihood", "forwardAlgorithm"]}, "repository": {"repo_id": 4741958, "url": "https://github.com/cloudera/mahout", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 41618, "license": "licensed"}}