{"test_class": {"identifier": "PerceptronTrainerTest", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private PerceptronTrainer trainer;", "modifier": "private", "type": "PerceptronTrainer", "declarator": "trainer", "var_name": "trainer"}], "file": "core/src/test/java/org/apache/mahout/classifier/discriminative/PerceptronTrainerTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUpdate() throws Exception {\n    double[] labels = { 1.0, 1.0, 1.0, 0.0 };\n    Vector labelset = new DenseVector(labels);\n    double[][] values = new double[3][4];\n    for (int i = 0; i < 3; i++) {\n      values[i][0] = 1.0;\n      values[i][1] = 1.0;\n      values[i][2] = 1.0;\n      values[i][3] = 1.0;\n    }\n    values[1][0] = 0.0;\n    values[2][0] = 0.0;\n    values[1][1] = 0.0;\n    values[2][2] = 0.0;\n\n    Matrix dataset = new DenseMatrix(values);\n    this.trainer.train(labelset, dataset);\n    assertFalse(this.trainer.getModel().classify(dataset.viewColumn(3)));\n    assertTrue(this.trainer.getModel().classify(dataset.viewColumn(0)));\n  }", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "PerceptronTrainerTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["train", "assertFalse", "classify", "getModel", "viewColumn", "assertTrue", "classify", "getModel", "viewColumn"]}, "focal_class": {"identifier": "PerceptronTrainer", "superclass": "extends LinearTrainer", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PerceptronTrainer.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PerceptronTrainer.class)", "var_name": "log"}, {"original_string": "private final double learningRate;", "modifier": "private final", "type": "double", "declarator": "learningRate", "var_name": "learningRate"}], "methods": [{"identifier": "PerceptronTrainer", "parameters": "(int dimension, double threshold,\n                           double learningRate, double init, double initBias)", "modifiers": "public", "return": "", "signature": " PerceptronTrainer(int dimension, double threshold,\n                           double learningRate, double init, double initBias)", "full_signature": "public  PerceptronTrainer(int dimension, double threshold,\n                           double learningRate, double init, double initBias)", "class_method_signature": "PerceptronTrainer.PerceptronTrainer(int dimension, double threshold,\n                           double learningRate, double init, double initBias)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(double label, Vector dataPoint, LinearModel model)", "modifiers": "@Override protected", "return": "void", "signature": "void update(double label, Vector dataPoint, LinearModel model)", "full_signature": "@Override protected void update(double label, Vector dataPoint, LinearModel model)", "class_method_signature": "PerceptronTrainer.update(double label, Vector dataPoint, LinearModel model)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/mahout/classifier/discriminative/PerceptronTrainer.java"}, "focal_method": {"identifier": "update", "parameters": "(double label, Vector dataPoint, LinearModel model)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void update(double label, Vector dataPoint, LinearModel model) {\n    double factor = 1.0;\n    if (label == 0.0) {\n      factor = -1.0;\n    }\n    \n    Vector updateVector = dataPoint.times(factor).times(this.learningRate);\n    log.debug(\"Updatevec: {}\", updateVector);\n    \n    model.addDelta(updateVector);\n    model.shiftBias(factor * this.learningRate);\n    log.debug(\"{}\", model);\n  }", "signature": "void update(double label, Vector dataPoint, LinearModel model)", "full_signature": "@Override protected void update(double label, Vector dataPoint, LinearModel model)", "class_method_signature": "PerceptronTrainer.update(double label, Vector dataPoint, LinearModel model)", "testcase": false, "constructor": false, "invocations": ["times", "times", "debug", "addDelta", "shiftBias", "debug"]}, "repository": {"repo_id": 4741958, "url": "https://github.com/cloudera/mahout", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 41618, "license": "licensed"}}