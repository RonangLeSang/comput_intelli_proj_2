{"test_class": {"identifier": "TestMatrixView", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private static final int ROW = AbstractMatrix.ROW;", "modifier": "private static final", "type": "int", "declarator": "ROW = AbstractMatrix.ROW", "var_name": "ROW"}, {"original_string": "private static final int COL = AbstractMatrix.COL;", "modifier": "private static final", "type": "int", "declarator": "COL = AbstractMatrix.COL", "var_name": "COL"}, {"original_string": "private final double[][] values = {{0.0, 1.1, 2.2}, {1.1, 2.2, 3.3},\n    {3.3, 4.4, 5.5}, {5.5, 6.6, 7.7}, {7.7, 8.8, 9.9}};", "modifier": "private final", "type": "double[][]", "declarator": "values = {{0.0, 1.1, 2.2}, {1.1, 2.2, 3.3},\n    {3.3, 4.4, 5.5}, {5.5, 6.6, 7.7}, {7.7, 8.8, 9.9}}", "var_name": "values"}, {"original_string": "private Matrix test;", "modifier": "private", "type": "Matrix", "declarator": "test", "var_name": "test"}], "file": "math/src/test/java/org/apache/mahout/math/TestMatrixView.java"}, "test_case": {"identifier": "testViewPartCardinality", "parameters": "()", "modifiers": "@Test(expected = IndexException.class) public", "return": "void", "body": "@Test(expected = IndexException.class)\n  public void testViewPartCardinality() {\n    int[] offset = {1, 1};\n    int[] size = {3, 3};\n    test.viewPart(offset, size);\n  }", "signature": "void testViewPartCardinality()", "full_signature": "@Test(expected = IndexException.class) public void testViewPartCardinality()", "class_method_signature": "TestMatrixView.testViewPartCardinality()", "testcase": true, "constructor": false, "invocations": ["viewPart"]}, "focal_class": {"identifier": "MatrixView", "superclass": "extends AbstractMatrix", "interfaces": "", "fields": [{"original_string": "private Matrix matrix;", "modifier": "private", "type": "Matrix", "declarator": "matrix", "var_name": "matrix"}, {"original_string": "private int[] offset;", "modifier": "private", "type": "int[]", "declarator": "offset", "var_name": "offset"}], "methods": [{"identifier": "MatrixView", "parameters": "(Matrix matrix, int[] offset, int[] size)", "modifiers": "public", "return": "", "signature": " MatrixView(Matrix matrix, int[] offset, int[] size)", "full_signature": "public  MatrixView(Matrix matrix, int[] offset, int[] size)", "class_method_signature": "MatrixView.MatrixView(Matrix matrix, int[] offset, int[] size)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix clone()", "full_signature": "@Override public Matrix clone()", "class_method_signature": "MatrixView.clone()", "testcase": false, "constructor": false}, {"identifier": "getQuick", "parameters": "(int row, int column)", "modifiers": "@Override public", "return": "double", "signature": "double getQuick(int row, int column)", "full_signature": "@Override public double getQuick(int row, int column)", "class_method_signature": "MatrixView.getQuick(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "like", "parameters": "()", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix like()", "full_signature": "@Override public Matrix like()", "class_method_signature": "MatrixView.like()", "testcase": false, "constructor": false}, {"identifier": "like", "parameters": "(int rows, int columns)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix like(int rows, int columns)", "full_signature": "@Override public Matrix like(int rows, int columns)", "class_method_signature": "MatrixView.like(int rows, int columns)", "testcase": false, "constructor": false}, {"identifier": "setQuick", "parameters": "(int row, int column, double value)", "modifiers": "@Override public", "return": "void", "signature": "void setQuick(int row, int column, double value)", "full_signature": "@Override public void setQuick(int row, int column, double value)", "class_method_signature": "MatrixView.setQuick(int row, int column, double value)", "testcase": false, "constructor": false}, {"identifier": "getNumNondefaultElements", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getNumNondefaultElements()", "full_signature": "@Override public int[] getNumNondefaultElements()", "class_method_signature": "MatrixView.getNumNondefaultElements()", "testcase": false, "constructor": false}, {"identifier": "viewPart", "parameters": "(int[] offset, int[] size)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix viewPart(int[] offset, int[] size)", "full_signature": "@Override public Matrix viewPart(int[] offset, int[] size)", "class_method_signature": "MatrixView.viewPart(int[] offset, int[] size)", "testcase": false, "constructor": false}, {"identifier": "assignColumn", "parameters": "(int column, Vector other)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix assignColumn(int column, Vector other)", "full_signature": "@Override public Matrix assignColumn(int column, Vector other)", "class_method_signature": "MatrixView.assignColumn(int column, Vector other)", "testcase": false, "constructor": false}, {"identifier": "assignRow", "parameters": "(int row, Vector other)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix assignRow(int row, Vector other)", "full_signature": "@Override public Matrix assignRow(int row, Vector other)", "class_method_signature": "MatrixView.assignRow(int row, Vector other)", "testcase": false, "constructor": false}, {"identifier": "viewColumn", "parameters": "(int column)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector viewColumn(int column)", "full_signature": "@Override public Vector viewColumn(int column)", "class_method_signature": "MatrixView.viewColumn(int column)", "testcase": false, "constructor": false}, {"identifier": "viewRow", "parameters": "(int row)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector viewRow(int row)", "full_signature": "@Override public Vector viewRow(int row)", "class_method_signature": "MatrixView.viewRow(int row)", "testcase": false, "constructor": false}], "file": "math/src/main/java/org/apache/mahout/math/MatrixView.java"}, "focal_method": {"identifier": "viewPart", "parameters": "(int[] offset, int[] size)", "modifiers": "@Override public", "return": "Matrix", "body": "@Override\n  public Matrix viewPart(int[] offset, int[] size) {\n    if (offset[ROW] < ROW) {\n      throw new IndexException(offset[ROW], ROW);\n    }\n    if (offset[ROW] + size[ROW] > rowSize()) {\n      throw new IndexException(offset[ROW] + size[ROW], rowSize());\n    }\n    if (offset[COL] < ROW) {\n      throw new IndexException(offset[COL], ROW);\n    }\n    if (offset[COL] + size[COL] > columnSize()) {\n      throw new IndexException(offset[COL] + size[COL], columnSize());\n    }\n    int[] origin = offset.clone();\n    origin[ROW] += offset[ROW];\n    origin[COL] += offset[COL];\n    return new MatrixView(matrix, origin, size);\n  }", "signature": "Matrix viewPart(int[] offset, int[] size)", "full_signature": "@Override public Matrix viewPart(int[] offset, int[] size)", "class_method_signature": "MatrixView.viewPart(int[] offset, int[] size)", "testcase": false, "constructor": false, "invocations": ["rowSize", "rowSize", "columnSize", "columnSize", "clone"]}, "repository": {"repo_id": 4741958, "url": "https://github.com/cloudera/mahout", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 41618, "license": "licensed"}}