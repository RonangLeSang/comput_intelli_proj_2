{"test_class": {"identifier": "MurmurHash3Test", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private static final int[] ANSWERS =\n      {0x0,0xcf9ce026,0x7b1ebceb,0x8a59e474,0xcf337f94,0x8b678f66,0x813ff5a2,0x1c2f4b2b,0xa6fcba77,0xe658f908,\n          0x9f2656af,0x826b85ca,0xebb6ceca,0x24c4112c,0x66eff5b0,0xa9aca7d5,0xf7f04d03,0x9d781105,0x6dcde4f3,\n          0x69edd8a8,0x5cdcd417,0x18d67f6,0xea040c90,0xdf70ea4a,0x8fb349e6,0x79a89b03,0x7ef9fc34,0x6017f692,\n          0x5be02058,0x9e3986f9,0x8fa6dd28,0x6733b993,0x26230d32,0x92051d69,0x8d6f37f7,0xa1653103,0x8491c23f,\n          0x2e8f59ce,0x5ae9461e,0xfe286e6,0x844e6959,0x87e9065d,0xe302e21c,0x1b3b3296,0xd29849c9,0x4e625f26,\n          0xa8c35ac0,0x71335a06,0xfd256d8f,0x4e5eb258,0x4e2320d1,0xba2e9832,0xb00df8eb,0xbd87594d,0x83b6dce3,\n          0xcf8646d0,0x7e79f2e2,0xd41fcd97,0x556a93,0x4419437b,0x39aa0e4e,0x43a57251,0x9430922f,0xd784b08f,\n          0xa2772512,0xa2a6ee4b,0x9cb1abae,0xebd2bef0};", "modifier": "private static final", "type": "int[]", "declarator": "ANSWERS =\n      {0x0,0xcf9ce026,0x7b1ebceb,0x8a59e474,0xcf337f94,0x8b678f66,0x813ff5a2,0x1c2f4b2b,0xa6fcba77,0xe658f908,\n          0x9f2656af,0x826b85ca,0xebb6ceca,0x24c4112c,0x66eff5b0,0xa9aca7d5,0xf7f04d03,0x9d781105,0x6dcde4f3,\n          0x69edd8a8,0x5cdcd417,0x18d67f6,0xea040c90,0xdf70ea4a,0x8fb349e6,0x79a89b03,0x7ef9fc34,0x6017f692,\n          0x5be02058,0x9e3986f9,0x8fa6dd28,0x6733b993,0x26230d32,0x92051d69,0x8d6f37f7,0xa1653103,0x8491c23f,\n          0x2e8f59ce,0x5ae9461e,0xfe286e6,0x844e6959,0x87e9065d,0xe302e21c,0x1b3b3296,0xd29849c9,0x4e625f26,\n          0xa8c35ac0,0x71335a06,0xfd256d8f,0x4e5eb258,0x4e2320d1,0xba2e9832,0xb00df8eb,0xbd87594d,0x83b6dce3,\n          0xcf8646d0,0x7e79f2e2,0xd41fcd97,0x556a93,0x4419437b,0x39aa0e4e,0x43a57251,0x9430922f,0xd784b08f,\n          0xa2772512,0xa2a6ee4b,0x9cb1abae,0xebd2bef0}", "var_name": "ANSWERS"}], "file": "math/src/test/java/org/apache/mahout/math/MurmurHash3Test.java"}, "test_case": {"identifier": "testCorrectValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCorrectValues() throws Exception {\n    byte[] bytes = \"Now is the time for all good men to come to the aid of their country\".getBytes(\"UTF-8\");\n    int hash = 0;\n    for (int i = 0; i < bytes.length; i++) {\n      hash = hash * 31 + (bytes[i] & 0xff);\n      bytes[i] = (byte) hash;\n    }\n\n    // test different offsets.\n    for (int offset = 0; offset < 10; offset++) {\n      byte[] arr = new byte[bytes.length + offset];\n      System.arraycopy(bytes, 0, arr, offset, bytes.length);\n      for (int len = 0; len < bytes.length; len++) {\n        int h = MurmurHash3.murmurhash3_x86_32(arr, offset, len, len);\n        assertEquals(ANSWERS[len], h);\n      }\n    }\n  }", "signature": "void testCorrectValues()", "full_signature": "@Test public void testCorrectValues()", "class_method_signature": "MurmurHash3Test.testCorrectValues()", "testcase": true, "constructor": false, "invocations": ["getBytes", "arraycopy", "murmurhash3_x86_32", "assertEquals"]}, "focal_class": {"identifier": "MurmurHash3", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MurmurHash3", "parameters": "()", "modifiers": "private", "return": "", "signature": " MurmurHash3()", "full_signature": "private  MurmurHash3()", "class_method_signature": "MurmurHash3.MurmurHash3()", "testcase": false, "constructor": true}, {"identifier": "murmurhash3_x86_32", "parameters": "(byte[] data, int offset, int len, int seed)", "modifiers": "public static", "return": "int", "signature": "int murmurhash3_x86_32(byte[] data, int offset, int len, int seed)", "full_signature": "public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed)", "class_method_signature": "MurmurHash3.murmurhash3_x86_32(byte[] data, int offset, int len, int seed)", "testcase": false, "constructor": false}], "file": "math/src/main/java/org/apache/mahout/math/MurmurHash3.java"}, "focal_method": {"identifier": "murmurhash3_x86_32", "parameters": "(byte[] data, int offset, int len, int seed)", "modifiers": "public static", "return": "int", "body": "public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {\n\n    int c1 = 0xcc9e2d51;\n    int c2 = 0x1b873593;\n\n    int h1 = seed;\n    int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block\n\n    for (int i=offset; i<roundedEnd; i+=4) {\n      // little endian load order\n      int k1 = (data[i] & 0xff) | ((data[i+1] & 0xff) << 8) | ((data[i+2] & 0xff) << 16) | (data[i+3] << 24);\n      k1 *= c1;\n      k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);\n      k1 *= c2;\n\n      h1 ^= k1;\n      h1 = (h1 << 13) | (h1 >>> 19);  // ROTL32(h1,13);\n      h1 = h1*5+0xe6546b64;\n    }\n\n    // tail\n    int k1 = 0;\n\n    switch(len & 0x03) {\n      case 3:\n        k1 = (data[roundedEnd + 2] & 0xff) << 16;\n        // fallthrough\n      case 2:\n        k1 |= (data[roundedEnd + 1] & 0xff) << 8;\n        // fallthrough\n      case 1:\n        k1 |= data[roundedEnd] & 0xff;\n        k1 *= c1;\n        k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // finalization\n    h1 ^= len;\n\n    // fmix(h1);\n    h1 ^= h1 >>> 16;\n    h1 *= 0x85ebca6b;\n    h1 ^= h1 >>> 13;\n    h1 *= 0xc2b2ae35;\n    h1 ^= h1 >>> 16;\n\n    return h1;\n  }", "signature": "int murmurhash3_x86_32(byte[] data, int offset, int len, int seed)", "full_signature": "public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed)", "class_method_signature": "MurmurHash3.murmurhash3_x86_32(byte[] data, int offset, int len, int seed)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4741958, "url": "https://github.com/cloudera/mahout", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 41618, "license": "licensed"}}