{"test_class": {"identifier": "TestXmlConfigVerification", "superclass": "", "interfaces": "", "fields": [], "file": "electric/electric-core/src/test/java/com/sun/electric/util/config/TestXmlConfigVerification.java"}, "test_case": {"identifier": "testWithoutLoopAndChain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithoutLoopAndChain() throws LoopExistsException {\n        Injection injection1 = new Injection(\"t1\", \"t2\", null, false);\n        Injection injection2 = new Injection(\"t3\", \"t4\", null, false);\n        Map<String, Injection> injections = CollectionFactory.createHashMap();\n        injections.put(injection1.getName(), injection1);\n        injections.put(injection2.getName(), injection2);\n        \n        Assert.assertTrue(XmlConfigVerification.runVerification(injections));\n    }", "signature": "void testWithoutLoopAndChain()", "full_signature": "@Test public void testWithoutLoopAndChain()", "class_method_signature": "TestXmlConfigVerification.testWithoutLoopAndChain()", "testcase": true, "constructor": false, "invocations": ["createHashMap", "put", "getName", "put", "getName", "assertTrue", "runVerification"]}, "focal_class": {"identifier": "XmlConfigVerification", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static XmlConfigVerification instance = new XmlConfigVerification();", "modifier": "private static", "type": "XmlConfigVerification", "declarator": "instance = new XmlConfigVerification()", "var_name": "instance"}], "methods": [{"identifier": "XmlConfigVerification", "parameters": "()", "modifiers": "private", "return": "", "signature": " XmlConfigVerification()", "full_signature": "private  XmlConfigVerification()", "class_method_signature": "XmlConfigVerification.XmlConfigVerification()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "XmlConfigVerification", "signature": "XmlConfigVerification getInstance()", "full_signature": "public static XmlConfigVerification getInstance()", "class_method_signature": "XmlConfigVerification.getInstance()", "testcase": false, "constructor": false}, {"identifier": "runVerification", "parameters": "(Map<String, Injection> injections)", "modifiers": "public static", "return": "boolean", "signature": "boolean runVerification(Map<String, Injection> injections)", "full_signature": "public static boolean runVerification(Map<String, Injection> injections)", "class_method_signature": "XmlConfigVerification.runVerification(Map<String, Injection> injections)", "testcase": false, "constructor": false}, {"identifier": "verifyConfiguration", "parameters": "(Map<String, Injection> injections)", "modifiers": "public", "return": "boolean", "signature": "boolean verifyConfiguration(Map<String, Injection> injections)", "full_signature": "public boolean verifyConfiguration(Map<String, Injection> injections)", "class_method_signature": "XmlConfigVerification.verifyConfiguration(Map<String, Injection> injections)", "testcase": false, "constructor": false}, {"identifier": "deepFirstSearch", "parameters": "(InjectionWrapper wrapper, Map<String, InjectionWrapper> injections)", "modifiers": "private", "return": "void", "signature": "void deepFirstSearch(InjectionWrapper wrapper, Map<String, InjectionWrapper> injections)", "full_signature": "private void deepFirstSearch(InjectionWrapper wrapper, Map<String, InjectionWrapper> injections)", "class_method_signature": "XmlConfigVerification.deepFirstSearch(InjectionWrapper wrapper, Map<String, InjectionWrapper> injections)", "testcase": false, "constructor": false}], "file": "electric/electric-core/src/main/java/com/sun/electric/util/config/XmlConfigVerification.java"}, "focal_method": {"identifier": "runVerification", "parameters": "(Map<String, Injection> injections)", "modifiers": "public static", "return": "boolean", "body": "public static boolean runVerification(Map<String, Injection> injections) throws LoopExistsException {\n        return XmlConfigVerification.getInstance().verifyConfiguration(injections);\n    }", "signature": "boolean runVerification(Map<String, Injection> injections)", "full_signature": "public static boolean runVerification(Map<String, Injection> injections)", "class_method_signature": "XmlConfigVerification.runVerification(Map<String, Injection> injections)", "testcase": false, "constructor": false, "invocations": ["verifyConfiguration", "getInstance"]}, "repository": {"repo_id": 1269176, "url": "https://github.com/imr/Electric-VLSI", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 87437, "license": "licensed"}}