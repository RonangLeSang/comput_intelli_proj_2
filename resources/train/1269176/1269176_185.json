{"test_class": {"identifier": "TextDescriptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AbstractTextDescriptor emptyDescriptor;", "modifier": "", "type": "AbstractTextDescriptor", "declarator": "emptyDescriptor", "var_name": "emptyDescriptor"}], "file": "electric/electric-core/src/test/java/com/sun/electric/database/variable/TextDescriptorTest.java"}, "test_case": {"identifier": "testLowLevelGet0", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLowLevelGet0() {\n        System.out.println(\"lowLevelGet0\");\n\n        int expResult = (int) emptyDescriptor.lowLevelGet();\n        int result = emptyDescriptor.lowLevelGet0();\n        assertEquals(expResult, result);\n    }", "signature": "void testLowLevelGet0()", "full_signature": "@Test public void testLowLevelGet0()", "class_method_signature": "TextDescriptorTest.testLowLevelGet0()", "testcase": true, "constructor": false, "invocations": ["println", "lowLevelGet", "lowLevelGet0", "assertEquals"]}, "focal_class": {"identifier": "TextDescriptor", "superclass": "extends AbstractTextDescriptor", "interfaces": "", "fields": [{"original_string": "private final Display display;", "modifier": "private final", "type": "Display", "declarator": "display", "var_name": "display"}, {"original_string": "private final long bits;", "modifier": "private final", "type": "long", "declarator": "bits", "var_name": "bits"}, {"original_string": "private final int colorIndex;", "modifier": "private final", "type": "int", "declarator": "colorIndex", "var_name": "colorIndex"}, {"original_string": "private static final HashMap<TextDescriptor, TextDescriptor> allDescriptors = new HashMap<TextDescriptor, TextDescriptor>();", "modifier": "private static final", "type": "HashMap<TextDescriptor, TextDescriptor>", "declarator": "allDescriptors = new HashMap<TextDescriptor, TextDescriptor>()", "var_name": "allDescriptors"}, {"original_string": "public static final TextDescriptor EMPTY = newTextDescriptor(new MutableTextDescriptor());", "modifier": "public static final", "type": "TextDescriptor", "declarator": "EMPTY = newTextDescriptor(new MutableTextDescriptor())", "var_name": "EMPTY"}], "methods": [{"identifier": "TextDescriptor", "parameters": "(AbstractTextDescriptor descriptor)", "modifiers": "private", "return": "", "signature": " TextDescriptor(AbstractTextDescriptor descriptor)", "full_signature": "private  TextDescriptor(AbstractTextDescriptor descriptor)", "class_method_signature": "TextDescriptor.TextDescriptor(AbstractTextDescriptor descriptor)", "testcase": false, "constructor": true}, {"identifier": "readResolve", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object readResolve()", "full_signature": "private Object readResolve()", "class_method_signature": "TextDescriptor.readResolve()", "testcase": false, "constructor": false}, {"identifier": "newTextDescriptor", "parameters": "(AbstractTextDescriptor td)", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor newTextDescriptor(AbstractTextDescriptor td)", "full_signature": "public static TextDescriptor newTextDescriptor(AbstractTextDescriptor td)", "class_method_signature": "TextDescriptor.newTextDescriptor(AbstractTextDescriptor td)", "testcase": false, "constructor": false}, {"identifier": "getUniqueTextDescriptor", "parameters": "(AbstractTextDescriptor td)", "modifiers": "private synchronized static", "return": "TextDescriptor", "signature": "TextDescriptor getUniqueTextDescriptor(AbstractTextDescriptor td)", "full_signature": "private synchronized static TextDescriptor getUniqueTextDescriptor(AbstractTextDescriptor td)", "class_method_signature": "TextDescriptor.getUniqueTextDescriptor(AbstractTextDescriptor td)", "testcase": false, "constructor": false}, {"identifier": "withDisplay", "parameters": "(boolean state)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withDisplay(boolean state)", "full_signature": "public TextDescriptor withDisplay(boolean state)", "class_method_signature": "TextDescriptor.withDisplay(boolean state)", "testcase": false, "constructor": false}, {"identifier": "withDisplay", "parameters": "(Display display)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withDisplay(Display display)", "full_signature": "public TextDescriptor withDisplay(Display display)", "class_method_signature": "TextDescriptor.withDisplay(Display display)", "testcase": false, "constructor": false}, {"identifier": "withPos", "parameters": "(Position p)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withPos(Position p)", "full_signature": "public TextDescriptor withPos(Position p)", "class_method_signature": "TextDescriptor.withPos(Position p)", "testcase": false, "constructor": false}, {"identifier": "withAbsSize", "parameters": "(int s)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withAbsSize(int s)", "full_signature": "public TextDescriptor withAbsSize(int s)", "class_method_signature": "TextDescriptor.withAbsSize(int s)", "testcase": false, "constructor": false}, {"identifier": "withRelSize", "parameters": "(double s)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withRelSize(double s)", "full_signature": "public TextDescriptor withRelSize(double s)", "class_method_signature": "TextDescriptor.withRelSize(double s)", "testcase": false, "constructor": false}, {"identifier": "withFace", "parameters": "(int f)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withFace(int f)", "full_signature": "public TextDescriptor withFace(int f)", "class_method_signature": "TextDescriptor.withFace(int f)", "testcase": false, "constructor": false}, {"identifier": "withRotation", "parameters": "(Rotation r)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withRotation(Rotation r)", "full_signature": "public TextDescriptor withRotation(Rotation r)", "class_method_signature": "TextDescriptor.withRotation(Rotation r)", "testcase": false, "constructor": false}, {"identifier": "withDispPart", "parameters": "(DispPos dispPos)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withDispPart(DispPos dispPos)", "full_signature": "public TextDescriptor withDispPart(DispPos dispPos)", "class_method_signature": "TextDescriptor.withDispPart(DispPos dispPos)", "testcase": false, "constructor": false}, {"identifier": "withItalic", "parameters": "(boolean state)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withItalic(boolean state)", "full_signature": "public TextDescriptor withItalic(boolean state)", "class_method_signature": "TextDescriptor.withItalic(boolean state)", "testcase": false, "constructor": false}, {"identifier": "withBold", "parameters": "(boolean state)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withBold(boolean state)", "full_signature": "public TextDescriptor withBold(boolean state)", "class_method_signature": "TextDescriptor.withBold(boolean state)", "testcase": false, "constructor": false}, {"identifier": "withUnderline", "parameters": "(boolean state)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withUnderline(boolean state)", "full_signature": "public TextDescriptor withUnderline(boolean state)", "class_method_signature": "TextDescriptor.withUnderline(boolean state)", "testcase": false, "constructor": false}, {"identifier": "withInterior", "parameters": "(boolean state)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withInterior(boolean state)", "full_signature": "public TextDescriptor withInterior(boolean state)", "class_method_signature": "TextDescriptor.withInterior(boolean state)", "testcase": false, "constructor": false}, {"identifier": "withInherit", "parameters": "(boolean state)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withInherit(boolean state)", "full_signature": "public TextDescriptor withInherit(boolean state)", "class_method_signature": "TextDescriptor.withInherit(boolean state)", "testcase": false, "constructor": false}, {"identifier": "withParam", "parameters": "(boolean state)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withParam(boolean state)", "full_signature": "public TextDescriptor withParam(boolean state)", "class_method_signature": "TextDescriptor.withParam(boolean state)", "testcase": false, "constructor": false}, {"identifier": "withOff", "parameters": "(double xd, double yd)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withOff(double xd, double yd)", "full_signature": "public TextDescriptor withOff(double xd, double yd)", "class_method_signature": "TextDescriptor.withOff(double xd, double yd)", "testcase": false, "constructor": false}, {"identifier": "withUnit", "parameters": "(Unit u)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withUnit(Unit u)", "full_signature": "public TextDescriptor withUnit(Unit u)", "class_method_signature": "TextDescriptor.withUnit(Unit u)", "testcase": false, "constructor": false}, {"identifier": "withColorIndex", "parameters": "(int colorIndex)", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withColorIndex(int colorIndex)", "full_signature": "public TextDescriptor withColorIndex(int colorIndex)", "class_method_signature": "TextDescriptor.withColorIndex(int colorIndex)", "testcase": false, "constructor": false}, {"identifier": "withDisplayWithoutParam", "parameters": "()", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withDisplayWithoutParam()", "full_signature": "public TextDescriptor withDisplayWithoutParam()", "class_method_signature": "TextDescriptor.withDisplayWithoutParam()", "testcase": false, "constructor": false}, {"identifier": "withoutParam", "parameters": "()", "modifiers": "public", "return": "TextDescriptor", "signature": "TextDescriptor withoutParam()", "full_signature": "public TextDescriptor withoutParam()", "class_method_signature": "TextDescriptor.withoutParam()", "testcase": false, "constructor": false}, {"identifier": "cacheSize", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int cacheSize()", "full_signature": "public static int cacheSize()", "class_method_signature": "TextDescriptor.cacheSize()", "testcase": false, "constructor": false}, {"identifier": "getDisplay", "parameters": "()", "modifiers": "@Override public", "return": "Display", "signature": "Display getDisplay()", "full_signature": "@Override public Display getDisplay()", "class_method_signature": "TextDescriptor.getDisplay()", "testcase": false, "constructor": false}, {"identifier": "lowLevelGet", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long lowLevelGet()", "full_signature": "@Override public long lowLevelGet()", "class_method_signature": "TextDescriptor.lowLevelGet()", "testcase": false, "constructor": false}, {"identifier": "getColorIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getColorIndex()", "full_signature": "@Override public int getColorIndex()", "class_method_signature": "TextDescriptor.getColorIndex()", "testcase": false, "constructor": false}, {"identifier": "getNodeTextDescriptor", "parameters": "()", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor getNodeTextDescriptor()", "full_signature": "public static TextDescriptor getNodeTextDescriptor()", "class_method_signature": "TextDescriptor.getNodeTextDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getArcTextDescriptor", "parameters": "()", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor getArcTextDescriptor()", "full_signature": "public static TextDescriptor getArcTextDescriptor()", "class_method_signature": "TextDescriptor.getArcTextDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getExportTextDescriptor", "parameters": "()", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor getExportTextDescriptor()", "full_signature": "public static TextDescriptor getExportTextDescriptor()", "class_method_signature": "TextDescriptor.getExportTextDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getPortInstTextDescriptor", "parameters": "()", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor getPortInstTextDescriptor()", "full_signature": "public static TextDescriptor getPortInstTextDescriptor()", "class_method_signature": "TextDescriptor.getPortInstTextDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getAnnotationTextDescriptor", "parameters": "()", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor getAnnotationTextDescriptor()", "full_signature": "public static TextDescriptor getAnnotationTextDescriptor()", "class_method_signature": "TextDescriptor.getAnnotationTextDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getInstanceTextDescriptor", "parameters": "()", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor getInstanceTextDescriptor()", "full_signature": "public static TextDescriptor getInstanceTextDescriptor()", "class_method_signature": "TextDescriptor.getInstanceTextDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getCellTextDescriptor", "parameters": "()", "modifiers": "public static", "return": "TextDescriptor", "signature": "TextDescriptor getCellTextDescriptor()", "full_signature": "public static TextDescriptor getCellTextDescriptor()", "class_method_signature": "TextDescriptor.getCellTextDescriptor()", "testcase": false, "constructor": false}], "file": "electric/electric-core/src/main/java/com/sun/electric/database/variable/TextDescriptor.java"}, "focal_method": {"identifier": "lowLevelGet", "parameters": "()", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long lowLevelGet() {\n        return bits;\n    }", "signature": "long lowLevelGet()", "full_signature": "@Override public long lowLevelGet()", "class_method_signature": "TextDescriptor.lowLevelGet()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1269176, "url": "https://github.com/imr/Electric-VLSI", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 87437, "license": "licensed"}}