{"test_class": {"identifier": "TechIdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IdManager idManager;", "modifier": "", "type": "IdManager", "declarator": "idManager", "var_name": "idManager"}, {"original_string": "String techName = \"tech\";", "modifier": "", "type": "String", "declarator": "techName = \"tech\"", "var_name": "techName"}, {"original_string": "TechId techId0;", "modifier": "", "type": "TechId", "declarator": "techId0", "var_name": "techId0"}, {"original_string": "TechId techId2;", "modifier": "", "type": "TechId", "declarator": "techId2", "var_name": "techId2"}, {"original_string": "ArcProtoId aId0_a;", "modifier": "", "type": "ArcProtoId", "declarator": "aId0_a", "var_name": "aId0_a"}, {"original_string": "ArcProtoId aId2_a;", "modifier": "", "type": "ArcProtoId", "declarator": "aId2_a", "var_name": "aId2_a"}, {"original_string": "ArcProtoId aId0_A;", "modifier": "", "type": "ArcProtoId", "declarator": "aId0_A", "var_name": "aId0_A"}, {"original_string": "PrimitiveNodeId nId2_a;", "modifier": "", "type": "PrimitiveNodeId", "declarator": "nId2_a", "var_name": "nId2_a"}, {"original_string": "PrimitiveNodeId nId0_A;", "modifier": "", "type": "PrimitiveNodeId", "declarator": "nId0_A", "var_name": "nId0_A"}, {"original_string": "PrimitivePortId p0_A_p;", "modifier": "", "type": "PrimitivePortId", "declarator": "p0_A_p", "var_name": "p0_A_p"}], "file": "electric/electric-core/src/test/java/com/sun/electric/database/id/TechIdTest.java"}, "test_case": {"identifier": "newPrimitiveNodeIdNull", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void newPrimitiveNodeIdNull() {\n        System.out.println(\"newPrimitiveNodeIdNull\");\n        techId0.newPrimitiveNodeId(null);\n    }", "signature": "void newPrimitiveNodeIdNull()", "full_signature": "@Test(expected = NullPointerException.class) public void newPrimitiveNodeIdNull()", "class_method_signature": "TechIdTest.newPrimitiveNodeIdNull()", "testcase": true, "constructor": false, "invocations": ["println", "newPrimitiveNodeId"]}, "focal_class": {"identifier": "TechId", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "public static final TechId[] NULL_ARRAY = {};", "modifier": "public static final", "type": "TechId[]", "declarator": "NULL_ARRAY = {}", "var_name": "NULL_ARRAY"}, {"original_string": "public final IdManager idManager;", "modifier": "public final", "type": "IdManager", "declarator": "idManager", "var_name": "idManager"}, {"original_string": "public final String techName;", "modifier": "public final", "type": "String", "declarator": "techName", "var_name": "techName"}, {"original_string": "public final int techIndex;", "modifier": "public final", "type": "int", "declarator": "techIndex", "var_name": "techIndex"}, {"original_string": "final ArrayList<LayerId> layerIds = new ArrayList<LayerId>();", "modifier": "final", "type": "ArrayList<LayerId>", "declarator": "layerIds = new ArrayList<LayerId>()", "var_name": "layerIds"}, {"original_string": "private final HashMap<String, LayerId> layerIdsByName = new HashMap<String, LayerId>();", "modifier": "private final", "type": "HashMap<String, LayerId>", "declarator": "layerIdsByName = new HashMap<String, LayerId>()", "var_name": "layerIdsByName"}, {"original_string": "final ArrayList<ArcProtoId> arcProtoIds = new ArrayList<ArcProtoId>();", "modifier": "final", "type": "ArrayList<ArcProtoId>", "declarator": "arcProtoIds = new ArrayList<ArcProtoId>()", "var_name": "arcProtoIds"}, {"original_string": "private final HashMap<String, ArcProtoId> arcProtoIdsByName = new HashMap<String, ArcProtoId>();", "modifier": "private final", "type": "HashMap<String, ArcProtoId>", "declarator": "arcProtoIdsByName = new HashMap<String, ArcProtoId>()", "var_name": "arcProtoIdsByName"}, {"original_string": "final ArrayList<PrimitiveNodeId> primitiveNodeIds = new ArrayList<PrimitiveNodeId>();", "modifier": "final", "type": "ArrayList<PrimitiveNodeId>", "declarator": "primitiveNodeIds = new ArrayList<PrimitiveNodeId>()", "var_name": "primitiveNodeIds"}, {"original_string": "private final HashMap<String, PrimitiveNodeId> primitiveNodeIdsByName = new HashMap<String, PrimitiveNodeId>();", "modifier": "private final", "type": "HashMap<String, PrimitiveNodeId>", "declarator": "primitiveNodeIdsByName = new HashMap<String, PrimitiveNodeId>()", "var_name": "primitiveNodeIdsByName"}, {"original_string": "volatile int modCount;", "modifier": "volatile", "type": "int", "declarator": "modCount", "var_name": "modCount"}], "methods": [{"identifier": "TechId", "parameters": "(IdManager idManager, String techName, int techIndex)", "modifiers": "", "return": "", "signature": " TechId(IdManager idManager, String techName, int techIndex)", "full_signature": "  TechId(IdManager idManager, String techName, int techIndex)", "class_method_signature": "TechId.TechId(IdManager idManager, String techName, int techIndex)", "testcase": false, "constructor": true}, {"identifier": "writeReplace", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object writeReplace()", "full_signature": "private Object writeReplace()", "class_method_signature": "TechId.writeReplace()", "testcase": false, "constructor": false}, {"identifier": "numLayerIds", "parameters": "()", "modifiers": "synchronized", "return": "int", "signature": "int numLayerIds()", "full_signature": "synchronized int numLayerIds()", "class_method_signature": "TechId.numLayerIds()", "testcase": false, "constructor": false}, {"identifier": "getLayerId", "parameters": "(int chronIndex)", "modifiers": "synchronized", "return": "LayerId", "signature": "LayerId getLayerId(int chronIndex)", "full_signature": "synchronized LayerId getLayerId(int chronIndex)", "class_method_signature": "TechId.getLayerId(int chronIndex)", "testcase": false, "constructor": false}, {"identifier": "newLayerId", "parameters": "(String layerName)", "modifiers": "public synchronized", "return": "LayerId", "signature": "LayerId newLayerId(String layerName)", "full_signature": "public synchronized LayerId newLayerId(String layerName)", "class_method_signature": "TechId.newLayerId(String layerName)", "testcase": false, "constructor": false}, {"identifier": "newLayerIdInternal", "parameters": "(String layerName)", "modifiers": "", "return": "LayerId", "signature": "LayerId newLayerIdInternal(String layerName)", "full_signature": " LayerId newLayerIdInternal(String layerName)", "class_method_signature": "TechId.newLayerIdInternal(String layerName)", "testcase": false, "constructor": false}, {"identifier": "numArcProtoIds", "parameters": "()", "modifiers": "synchronized", "return": "int", "signature": "int numArcProtoIds()", "full_signature": "synchronized int numArcProtoIds()", "class_method_signature": "TechId.numArcProtoIds()", "testcase": false, "constructor": false}, {"identifier": "getArcProtoId", "parameters": "(int chronIndex)", "modifiers": "synchronized", "return": "ArcProtoId", "signature": "ArcProtoId getArcProtoId(int chronIndex)", "full_signature": "synchronized ArcProtoId getArcProtoId(int chronIndex)", "class_method_signature": "TechId.getArcProtoId(int chronIndex)", "testcase": false, "constructor": false}, {"identifier": "newArcProtoId", "parameters": "(String arcProtoName)", "modifiers": "public synchronized", "return": "ArcProtoId", "signature": "ArcProtoId newArcProtoId(String arcProtoName)", "full_signature": "public synchronized ArcProtoId newArcProtoId(String arcProtoName)", "class_method_signature": "TechId.newArcProtoId(String arcProtoName)", "testcase": false, "constructor": false}, {"identifier": "newArcProtoIdInternal", "parameters": "(String arcProtoName)", "modifiers": "", "return": "ArcProtoId", "signature": "ArcProtoId newArcProtoIdInternal(String arcProtoName)", "full_signature": " ArcProtoId newArcProtoIdInternal(String arcProtoName)", "class_method_signature": "TechId.newArcProtoIdInternal(String arcProtoName)", "testcase": false, "constructor": false}, {"identifier": "numPrimitiveNodeIds", "parameters": "()", "modifiers": "synchronized", "return": "int", "signature": "int numPrimitiveNodeIds()", "full_signature": "synchronized int numPrimitiveNodeIds()", "class_method_signature": "TechId.numPrimitiveNodeIds()", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveNodeId", "parameters": "(int chronIndex)", "modifiers": "synchronized", "return": "PrimitiveNodeId", "signature": "PrimitiveNodeId getPrimitiveNodeId(int chronIndex)", "full_signature": "synchronized PrimitiveNodeId getPrimitiveNodeId(int chronIndex)", "class_method_signature": "TechId.getPrimitiveNodeId(int chronIndex)", "testcase": false, "constructor": false}, {"identifier": "newPrimitiveNodeId", "parameters": "(String primitiveNodeName)", "modifiers": "public synchronized", "return": "PrimitiveNodeId", "signature": "PrimitiveNodeId newPrimitiveNodeId(String primitiveNodeName)", "full_signature": "public synchronized PrimitiveNodeId newPrimitiveNodeId(String primitiveNodeName)", "class_method_signature": "TechId.newPrimitiveNodeId(String primitiveNodeName)", "testcase": false, "constructor": false}, {"identifier": "newPrimitiveNodeIdInternal", "parameters": "(String primitiveNodeName)", "modifiers": "", "return": "PrimitiveNodeId", "signature": "PrimitiveNodeId newPrimitiveNodeIdInternal(String primitiveNodeName)", "full_signature": " PrimitiveNodeId newPrimitiveNodeIdInternal(String primitiveNodeName)", "class_method_signature": "TechId.newPrimitiveNodeIdInternal(String primitiveNodeName)", "testcase": false, "constructor": false}, {"identifier": "inDatabase", "parameters": "(EDatabase database)", "modifiers": "public", "return": "Technology", "signature": "Technology inDatabase(EDatabase database)", "full_signature": "public Technology inDatabase(EDatabase database)", "class_method_signature": "TechId.inDatabase(EDatabase database)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "TechId.toString()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "()", "modifiers": "", "return": "void", "signature": "void check()", "full_signature": " void check()", "class_method_signature": "TechId.check()", "testcase": false, "constructor": false}, {"identifier": "jelibSafeName", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean jelibSafeName(String str)", "full_signature": "public static boolean jelibSafeName(String str)", "class_method_signature": "TechId.jelibSafeName(String str)", "testcase": false, "constructor": false}, {"identifier": "jelibSafeName", "parameters": "(String str, boolean allowSpace)", "modifiers": "static", "return": "boolean", "signature": "boolean jelibSafeName(String str, boolean allowSpace)", "full_signature": "static boolean jelibSafeName(String str, boolean allowSpace)", "class_method_signature": "TechId.jelibSafeName(String str, boolean allowSpace)", "testcase": false, "constructor": false}], "file": "electric/electric-core/src/main/java/com/sun/electric/database/id/TechId.java"}, "focal_method": {"identifier": "newPrimitiveNodeId", "parameters": "(String primitiveNodeName)", "modifiers": "public synchronized", "return": "PrimitiveNodeId", "body": "public synchronized PrimitiveNodeId newPrimitiveNodeId(String primitiveNodeName) {\n        PrimitiveNodeId primitiveNodeId = primitiveNodeIdsByName.get(primitiveNodeName);\n        if (primitiveNodeId != null) {\n            return primitiveNodeId;\n        }\n        assert !idManager.readOnly;\n        return newPrimitiveNodeIdInternal(primitiveNodeName);\n    }", "signature": "PrimitiveNodeId newPrimitiveNodeId(String primitiveNodeName)", "full_signature": "public synchronized PrimitiveNodeId newPrimitiveNodeId(String primitiveNodeName)", "class_method_signature": "TechId.newPrimitiveNodeId(String primitiveNodeName)", "testcase": false, "constructor": false, "invocations": ["get", "newPrimitiveNodeIdInternal"]}, "repository": {"repo_id": 1269176, "url": "https://github.com/imr/Electric-VLSI", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 87437, "license": "licensed"}}