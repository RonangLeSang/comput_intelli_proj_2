{"test_class": {"identifier": "ImmutableNodeInstTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IdManager idManager;", "modifier": "private", "type": "IdManager", "declarator": "idManager", "var_name": "idManager"}, {"original_string": "private Generic generic;", "modifier": "private", "type": "Generic", "declarator": "generic", "var_name": "generic"}, {"original_string": "private Technology tech;", "modifier": "private", "type": "Technology", "declarator": "tech", "var_name": "tech"}, {"original_string": "private PrimitiveNode pn;", "modifier": "private", "type": "PrimitiveNode", "declarator": "pn", "var_name": "pn"}, {"original_string": "private PrimitiveNodeId pnId;", "modifier": "private", "type": "PrimitiveNodeId", "declarator": "pnId", "var_name": "pnId"}, {"original_string": "private PrimitiveNodeId cellCenterNodeId;", "modifier": "private", "type": "PrimitiveNodeId", "declarator": "cellCenterNodeId", "var_name": "cellCenterNodeId"}, {"original_string": "private Name nameA0;", "modifier": "private", "type": "Name", "declarator": "nameA0", "var_name": "nameA0"}, {"original_string": "private ImmutableNodeInst n0;", "modifier": "private", "type": "ImmutableNodeInst", "declarator": "n0", "var_name": "n0"}], "file": "electric/electric-core/src/test/java/com/sun/electric/database/ImmutableNodeInstTest.java"}, "test_case": {"identifier": "testWithVariable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithVariable() {\n        System.out.println(\"withVariable\");\n        Variable.Key varKey = Variable.newKey(\"key\");\n        Variable var = Variable.newInstance(varKey, \"valueA\", TextDescriptor.newTextDescriptor(new MutableTextDescriptor()));\n        ImmutableNodeInst n1 = n0.withVariable(var);\n        n1.check();\n        assertEquals(1, n1.getNumVariables());\n        assertSame(var, n1.getVar(0));\n    }", "signature": "void testWithVariable()", "full_signature": "@Test public void testWithVariable()", "class_method_signature": "ImmutableNodeInstTest.testWithVariable()", "testcase": true, "constructor": false, "invocations": ["println", "newKey", "newInstance", "newTextDescriptor", "withVariable", "check", "assertEquals", "getNumVariables", "assertSame", "getVar"]}, "focal_class": {"identifier": "ImmutableNodeInst", "superclass": "extends ImmutableElectricObject", "interfaces": "", "fields": [{"original_string": "private static final int HARDSELECTN = 0100000;", "modifier": "private static final", "type": "int", "declarator": "HARDSELECTN = 0100000", "var_name": "HARDSELECTN"}, {"original_string": "private static final int NVISIBLEINSIDE = 040000000;", "modifier": "private static final", "type": "int", "declarator": "NVISIBLEINSIDE = 040000000", "var_name": "NVISIBLEINSIDE"}, {"original_string": "private static final int NTECHBITS = 037400000;", "modifier": "private static final", "type": "int", "declarator": "NTECHBITS = 037400000", "var_name": "NTECHBITS"}, {"original_string": "private static final int NTECHBITSSH = 17;", "modifier": "private static final", "type": "int", "declarator": "NTECHBITSSH = 17", "var_name": "NTECHBITSSH"}, {"original_string": "private static final int NILOCKED = 0100000000;", "modifier": "private static final", "type": "int", "declarator": "NILOCKED = 0100000000", "var_name": "NILOCKED"}, {"original_string": "private static final int FLAG_BITS = HARDSELECTN | NVISIBLEINSIDE | NILOCKED;", "modifier": "private static final", "type": "int", "declarator": "FLAG_BITS = HARDSELECTN | NVISIBLEINSIDE | NILOCKED", "var_name": "FLAG_BITS"}, {"original_string": "private static final int HARD_SHAPE_MASK = 0x0001;", "modifier": "private static final", "type": "int", "declarator": "HARD_SHAPE_MASK = 0x0001", "var_name": "HARD_SHAPE_MASK"}, {"original_string": "public static final Flag HARD_SELECT = new Flag(HARDSELECTN);", "modifier": "public static final", "type": "Flag", "declarator": "HARD_SELECT = new Flag(HARDSELECTN)", "var_name": "HARD_SELECT"}, {"original_string": "public static final Flag VIS_INSIDE = new Flag(NVISIBLEINSIDE);", "modifier": "public static final", "type": "Flag", "declarator": "VIS_INSIDE = new Flag(NVISIBLEINSIDE)", "var_name": "VIS_INSIDE"}, {"original_string": "public static final Flag LOCKED = new Flag(NILOCKED);", "modifier": "public static final", "type": "Flag", "declarator": "LOCKED = new Flag(NILOCKED)", "var_name": "LOCKED"}, {"original_string": "public final static ImmutableNodeInst[] NULL_ARRAY = {};", "modifier": "public final static", "type": "ImmutableNodeInst[]", "declarator": "NULL_ARRAY = {}", "var_name": "NULL_ARRAY"}, {"original_string": "public final static ImmutableArrayList<ImmutableNodeInst> EMPTY_LIST = new ImmutableArrayList<ImmutableNodeInst>(NULL_ARRAY);", "modifier": "public final static", "type": "ImmutableArrayList<ImmutableNodeInst>", "declarator": "EMPTY_LIST = new ImmutableArrayList<ImmutableNodeInst>(NULL_ARRAY)", "var_name": "EMPTY_LIST"}, {"original_string": "public final int nodeId;", "modifier": "public final", "type": "int", "declarator": "nodeId", "var_name": "nodeId"}, {"original_string": "public final NodeProtoId protoId;", "modifier": "public final", "type": "NodeProtoId", "declarator": "protoId", "var_name": "protoId"}, {"original_string": "public final Name name;", "modifier": "public final", "type": "Name", "declarator": "name", "var_name": "name"}, {"original_string": "public final TextDescriptor nameDescriptor;", "modifier": "public final", "type": "TextDescriptor", "declarator": "nameDescriptor", "var_name": "nameDescriptor"}, {"original_string": "public final Orientation orient;", "modifier": "public final", "type": "Orientation", "declarator": "orient", "var_name": "orient"}, {"original_string": "public final EPoint anchor;", "modifier": "public final", "type": "EPoint", "declarator": "anchor", "var_name": "anchor"}, {"original_string": "public final EPoint size;", "modifier": "public final", "type": "EPoint", "declarator": "size", "var_name": "size"}, {"original_string": "public final byte techBits;", "modifier": "public final", "type": "byte", "declarator": "techBits", "var_name": "techBits"}, {"original_string": "public final TextDescriptor protoDescriptor;", "modifier": "public final", "type": "TextDescriptor", "declarator": "protoDescriptor", "var_name": "protoDescriptor"}, {"original_string": "final ImmutablePortInst[] ports;", "modifier": "final", "type": "ImmutablePortInst[]", "declarator": "ports", "var_name": "ports"}, {"original_string": "public static Comparator<ImmutableNodeInst> NAME_ORDER = new Comparator<ImmutableNodeInst>() {\n        public int compare(ImmutableNodeInst n1, ImmutableNodeInst n2) {\n            return TextUtils.STRING_NUMBER_ORDER.compare(n1.name.toString(), n2.name.toString());\n        }\n    };", "modifier": "public static", "type": "Comparator<ImmutableNodeInst>", "declarator": "NAME_ORDER = new Comparator<ImmutableNodeInst>() {\n        public int compare(ImmutableNodeInst n1, ImmutableNodeInst n2) {\n            return TextUtils.STRING_NUMBER_ORDER.compare(n1.name.toString(), n2.name.toString());\n        }\n    }", "var_name": "NAME_ORDER"}], "methods": [{"identifier": "ImmutableNodeInst", "parameters": "(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor, Variable[] vars, ImmutablePortInst[] ports)", "modifiers": "", "return": "", "signature": " ImmutableNodeInst(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor, Variable[] vars, ImmutablePortInst[] ports)", "full_signature": "  ImmutableNodeInst(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor, Variable[] vars, ImmutablePortInst[] ports)", "class_method_signature": "ImmutableNodeInst.ImmutableNodeInst(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor, Variable[] vars, ImmutablePortInst[] ports)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor,\n            Variable[] vars, ImmutablePortInst[] ports, Variable[] params)", "modifiers": "static", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst newInstance(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor,\n            Variable[] vars, ImmutablePortInst[] ports, Variable[] params)", "full_signature": "static ImmutableNodeInst newInstance(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor,\n            Variable[] vars, ImmutablePortInst[] ports, Variable[] params)", "class_method_signature": "ImmutableNodeInst.newInstance(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, byte techBits, TextDescriptor protoDescriptor,\n            Variable[] vars, ImmutablePortInst[] ports, Variable[] params)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, int techBits, TextDescriptor protoDescriptor)", "modifiers": "public static", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst newInstance(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, int techBits, TextDescriptor protoDescriptor)", "full_signature": "public static ImmutableNodeInst newInstance(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, int techBits, TextDescriptor protoDescriptor)", "class_method_signature": "ImmutableNodeInst.newInstance(int nodeId, NodeProtoId protoId, Name name, TextDescriptor nameDescriptor,\n            Orientation orient, EPoint anchor, EPoint size,\n            int flags, int techBits, TextDescriptor protoDescriptor)", "testcase": false, "constructor": false}, {"identifier": "withName", "parameters": "(Name name)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withName(Name name)", "full_signature": "public ImmutableNodeInst withName(Name name)", "class_method_signature": "ImmutableNodeInst.withName(Name name)", "testcase": false, "constructor": false}, {"identifier": "withNameDescriptor", "parameters": "(TextDescriptor nameDescriptor)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withNameDescriptor(TextDescriptor nameDescriptor)", "full_signature": "public ImmutableNodeInst withNameDescriptor(TextDescriptor nameDescriptor)", "class_method_signature": "ImmutableNodeInst.withNameDescriptor(TextDescriptor nameDescriptor)", "testcase": false, "constructor": false}, {"identifier": "withOrient", "parameters": "(Orientation orient)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withOrient(Orientation orient)", "full_signature": "public ImmutableNodeInst withOrient(Orientation orient)", "class_method_signature": "ImmutableNodeInst.withOrient(Orientation orient)", "testcase": false, "constructor": false}, {"identifier": "withAnchor", "parameters": "(EPoint anchor)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withAnchor(EPoint anchor)", "full_signature": "public ImmutableNodeInst withAnchor(EPoint anchor)", "class_method_signature": "ImmutableNodeInst.withAnchor(EPoint anchor)", "testcase": false, "constructor": false}, {"identifier": "withSize", "parameters": "(EPoint size)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withSize(EPoint size)", "full_signature": "public ImmutableNodeInst withSize(EPoint size)", "class_method_signature": "ImmutableNodeInst.withSize(EPoint size)", "testcase": false, "constructor": false}, {"identifier": "withFlags", "parameters": "(int flags)", "modifiers": "private", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withFlags(int flags)", "full_signature": "private ImmutableNodeInst withFlags(int flags)", "class_method_signature": "ImmutableNodeInst.withFlags(int flags)", "testcase": false, "constructor": false}, {"identifier": "withStateBits", "parameters": "(ImmutableNodeInst d)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withStateBits(ImmutableNodeInst d)", "full_signature": "public ImmutableNodeInst withStateBits(ImmutableNodeInst d)", "class_method_signature": "ImmutableNodeInst.withStateBits(ImmutableNodeInst d)", "testcase": false, "constructor": false}, {"identifier": "withFlag", "parameters": "(Flag flag, boolean value)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withFlag(Flag flag, boolean value)", "full_signature": "public ImmutableNodeInst withFlag(Flag flag, boolean value)", "class_method_signature": "ImmutableNodeInst.withFlag(Flag flag, boolean value)", "testcase": false, "constructor": false}, {"identifier": "withTechSpecific", "parameters": "(int techBits)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withTechSpecific(int techBits)", "full_signature": "public ImmutableNodeInst withTechSpecific(int techBits)", "class_method_signature": "ImmutableNodeInst.withTechSpecific(int techBits)", "testcase": false, "constructor": false}, {"identifier": "withProtoDescriptor", "parameters": "(TextDescriptor protoDescriptor)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withProtoDescriptor(TextDescriptor protoDescriptor)", "full_signature": "public ImmutableNodeInst withProtoDescriptor(TextDescriptor protoDescriptor)", "class_method_signature": "ImmutableNodeInst.withProtoDescriptor(TextDescriptor protoDescriptor)", "testcase": false, "constructor": false}, {"identifier": "withVariable", "parameters": "(Variable var)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withVariable(Variable var)", "full_signature": "public ImmutableNodeInst withVariable(Variable var)", "class_method_signature": "ImmutableNodeInst.withVariable(Variable var)", "testcase": false, "constructor": false}, {"identifier": "withoutVariable", "parameters": "(Variable.Key key)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withoutVariable(Variable.Key key)", "full_signature": "public ImmutableNodeInst withoutVariable(Variable.Key key)", "class_method_signature": "ImmutableNodeInst.withoutVariable(Variable.Key key)", "testcase": false, "constructor": false}, {"identifier": "isEasyShape", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEasyShape()", "full_signature": "public boolean isEasyShape()", "class_method_signature": "ImmutableNodeInst.isEasyShape()", "testcase": false, "constructor": false}, {"identifier": "updateHardShape", "parameters": "(int flags, Variable[] vars)", "modifiers": "private static", "return": "int", "signature": "int updateHardShape(int flags, Variable[] vars)", "full_signature": "private static int updateHardShape(int flags, Variable[] vars)", "class_method_signature": "ImmutableNodeInst.updateHardShape(int flags, Variable[] vars)", "testcase": false, "constructor": false}, {"identifier": "withRenamedIds", "parameters": "(IdMapper idMapper)", "modifiers": "", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withRenamedIds(IdMapper idMapper)", "full_signature": " ImmutableNodeInst withRenamedIds(IdMapper idMapper)", "class_method_signature": "ImmutableNodeInst.withRenamedIds(IdMapper idMapper)", "testcase": false, "constructor": false}, {"identifier": "portsWithRenamedIds", "parameters": "(IdMapper idMapper)", "modifiers": "private", "return": "ImmutablePortInst[]", "signature": "ImmutablePortInst[] portsWithRenamedIds(IdMapper idMapper)", "full_signature": "private ImmutablePortInst[] portsWithRenamedIds(IdMapper idMapper)", "class_method_signature": "ImmutableNodeInst.portsWithRenamedIds(IdMapper idMapper)", "testcase": false, "constructor": false}, {"identifier": "withPortInst", "parameters": "(PortProtoId portProtoId, ImmutablePortInst portInst)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withPortInst(PortProtoId portProtoId, ImmutablePortInst portInst)", "full_signature": "public ImmutableNodeInst withPortInst(PortProtoId portProtoId, ImmutablePortInst portInst)", "class_method_signature": "ImmutableNodeInst.withPortInst(PortProtoId portProtoId, ImmutablePortInst portInst)", "testcase": false, "constructor": false}, {"identifier": "isUsernamed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsernamed()", "full_signature": "public boolean isUsernamed()", "class_method_signature": "ImmutableNodeInst.isUsernamed()", "testcase": false, "constructor": false}, {"identifier": "isCellInstance", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCellInstance()", "full_signature": "public boolean isCellInstance()", "class_method_signature": "ImmutableNodeInst.isCellInstance()", "testcase": false, "constructor": false}, {"identifier": "getPortInst", "parameters": "(PortProtoId portProtoId)", "modifiers": "public", "return": "ImmutablePortInst", "signature": "ImmutablePortInst getPortInst(PortProtoId portProtoId)", "full_signature": "public ImmutablePortInst getPortInst(PortProtoId portProtoId)", "class_method_signature": "ImmutableNodeInst.getPortInst(PortProtoId portProtoId)", "testcase": false, "constructor": false}, {"identifier": "getPortsWithVariables", "parameters": "()", "modifiers": "public", "return": "Iterator<PortProtoId>", "signature": "Iterator<PortProtoId> getPortsWithVariables()", "full_signature": "public Iterator<PortProtoId> getPortsWithVariables()", "class_method_signature": "ImmutableNodeInst.getPortsWithVariables()", "testcase": false, "constructor": false}, {"identifier": "hasPortInstVariables", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasPortInstVariables()", "full_signature": "public boolean hasPortInstVariables()", "class_method_signature": "ImmutableNodeInst.hasPortInstVariables()", "testcase": false, "constructor": false}, {"identifier": "is", "parameters": "(Flag flag)", "modifiers": "public", "return": "boolean", "signature": "boolean is(Flag flag)", "full_signature": "public boolean is(Flag flag)", "class_method_signature": "ImmutableNodeInst.is(Flag flag)", "testcase": false, "constructor": false}, {"identifier": "getDefinedParams", "parameters": "()", "modifiers": "", "return": "Variable[]", "signature": "Variable[] getDefinedParams()", "full_signature": " Variable[] getDefinedParams()", "class_method_signature": "ImmutableNodeInst.getDefinedParams()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(IdWriter writer)", "modifiers": "@Override", "return": "void", "signature": "void write(IdWriter writer)", "full_signature": "@Override void write(IdWriter writer)", "class_method_signature": "ImmutableNodeInst.write(IdWriter writer)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(IdReader reader)", "modifiers": "static", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst read(IdReader reader)", "full_signature": "static ImmutableNodeInst read(IdReader reader)", "class_method_signature": "ImmutableNodeInst.read(IdReader reader)", "testcase": false, "constructor": false}, {"identifier": "hashCodeExceptVariables", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCodeExceptVariables()", "full_signature": "public int hashCodeExceptVariables()", "class_method_signature": "ImmutableNodeInst.hashCodeExceptVariables()", "testcase": false, "constructor": false}, {"identifier": "equalsExceptVariables", "parameters": "(ImmutableElectricObject o)", "modifiers": "public", "return": "boolean", "signature": "boolean equalsExceptVariables(ImmutableElectricObject o)", "full_signature": "public boolean equalsExceptVariables(ImmutableElectricObject o)", "class_method_signature": "ImmutableNodeInst.equalsExceptVariables(ImmutableElectricObject o)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void check()", "full_signature": "public void check()", "class_method_signature": "ImmutableNodeInst.check()", "testcase": false, "constructor": false}, {"identifier": "isCellCenter", "parameters": "(NodeProtoId protoId)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCellCenter(NodeProtoId protoId)", "full_signature": "public static boolean isCellCenter(NodeProtoId protoId)", "class_method_signature": "ImmutableNodeInst.isCellCenter(NodeProtoId protoId)", "testcase": false, "constructor": false}, {"identifier": "getElibBits", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getElibBits()", "full_signature": "public int getElibBits()", "class_method_signature": "ImmutableNodeInst.getElibBits()", "testcase": false, "constructor": false}, {"identifier": "flagsFromElib", "parameters": "(int elibBits)", "modifiers": "public static", "return": "int", "signature": "int flagsFromElib(int elibBits)", "full_signature": "public static int flagsFromElib(int elibBits)", "class_method_signature": "ImmutableNodeInst.flagsFromElib(int elibBits)", "testcase": false, "constructor": false}, {"identifier": "techSpecificFromElib", "parameters": "(int elibBits)", "modifiers": "public static", "return": "int", "signature": "int techSpecificFromElib(int elibBits)", "full_signature": "public static int techSpecificFromElib(int elibBits)", "class_method_signature": "ImmutableNodeInst.techSpecificFromElib(int elibBits)", "testcase": false, "constructor": false}, {"identifier": "computeBounds", "parameters": "(BoundsBuilder b, Rectangle2D.Double dstBounds)", "modifiers": "public", "return": "void", "signature": "void computeBounds(BoundsBuilder b, Rectangle2D.Double dstBounds)", "full_signature": "public void computeBounds(BoundsBuilder b, Rectangle2D.Double dstBounds)", "class_method_signature": "ImmutableNodeInst.computeBounds(BoundsBuilder b, Rectangle2D.Double dstBounds)", "testcase": false, "constructor": false}, {"identifier": "getTrace", "parameters": "()", "modifiers": "public", "return": "EPoint[]", "signature": "EPoint[] getTrace()", "full_signature": "public EPoint[] getTrace()", "class_method_signature": "ImmutableNodeInst.getTrace()", "testcase": false, "constructor": false}, {"identifier": "withTrace", "parameters": "(Point2D[] points, TextDescriptor td)", "modifiers": "public", "return": "ImmutableNodeInst", "signature": "ImmutableNodeInst withTrace(Point2D[] points, TextDescriptor td)", "full_signature": "public ImmutableNodeInst withTrace(Point2D[] points, TextDescriptor td)", "class_method_signature": "ImmutableNodeInst.withTrace(Point2D[] points, TextDescriptor td)", "testcase": false, "constructor": false}, {"identifier": "calcTraceSize", "parameters": "(EPoint[] trace)", "modifiers": "private static", "return": "EPoint", "signature": "EPoint calcTraceSize(EPoint[] trace)", "full_signature": "private static EPoint calcTraceSize(EPoint[] trace)", "class_method_signature": "ImmutableNodeInst.calcTraceSize(EPoint[] trace)", "testcase": false, "constructor": false}, {"identifier": "getArcDegrees", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getArcDegrees()", "full_signature": "public double[] getArcDegrees()", "class_method_signature": "ImmutableNodeInst.getArcDegrees()", "testcase": false, "constructor": false}, {"identifier": "getSerpentineTransistorLength", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSerpentineTransistorLength()", "full_signature": "public double getSerpentineTransistorLength()", "class_method_signature": "ImmutableNodeInst.getSerpentineTransistorLength()", "testcase": false, "constructor": false}], "file": "electric/electric-core/src/main/java/com/sun/electric/database/ImmutableNodeInst.java"}, "focal_method": {"identifier": "withVariable", "parameters": "(Variable var)", "modifiers": "public", "return": "ImmutableNodeInst", "body": "public ImmutableNodeInst withVariable(Variable var) {\n        Variable[] vars = arrayWithVariable(var.withParam(false).withInherit(false));\n        if (this.getVars() == vars) {\n            return this;\n        }\n        EPoint size = this.size;\n        if (var.getKey() == NodeInst.TRACE &&\n                protoId instanceof PrimitiveNodeId && !isCellCenter(protoId)) {\n            Object value = var.getObject();\n            if (value instanceof EPoint[]) {\n                EPoint newSize = calcTraceSize((EPoint[]) value);\n                if (!newSize.equals(size)) {\n                    size = newSize;\n                }\n            }\n        }\n        int flags = updateHardShape(this.flags, vars);\n        return newInstance(this.nodeId, this.protoId, this.name, this.nameDescriptor,\n                this.orient, this.anchor, size, flags, this.techBits, this.protoDescriptor,\n                vars, this.ports, getDefinedParams());\n    }", "signature": "ImmutableNodeInst withVariable(Variable var)", "full_signature": "public ImmutableNodeInst withVariable(Variable var)", "class_method_signature": "ImmutableNodeInst.withVariable(Variable var)", "testcase": false, "constructor": false, "invocations": ["arrayWithVariable", "withInherit", "withParam", "getVars", "getKey", "isCellCenter", "getObject", "calcTraceSize", "equals", "updateHardShape", "newInstance", "getDefinedParams"]}, "repository": {"repo_id": 1269176, "url": "https://github.com/imr/Electric-VLSI", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 87437, "license": "licensed"}}