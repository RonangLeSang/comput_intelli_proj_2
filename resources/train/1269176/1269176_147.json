{"test_class": {"identifier": "ImmutableCellTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IdManager idManager;", "modifier": "private", "type": "IdManager", "declarator": "idManager", "var_name": "idManager"}, {"original_string": "private TechId genericTechId;", "modifier": "private", "type": "TechId", "declarator": "genericTechId", "var_name": "genericTechId"}, {"original_string": "private TechId schematicTechId;", "modifier": "private", "type": "TechId", "declarator": "schematicTechId", "var_name": "schematicTechId"}, {"original_string": "private LibId libId;", "modifier": "private", "type": "LibId", "declarator": "libId", "var_name": "libId"}, {"original_string": "private CellId cellId;", "modifier": "private", "type": "CellId", "declarator": "cellId", "var_name": "cellId"}, {"original_string": "private CellName fooName;", "modifier": "private", "type": "CellName", "declarator": "fooName", "var_name": "fooName"}, {"original_string": "private CellName groupName;", "modifier": "private", "type": "CellName", "declarator": "groupName", "var_name": "groupName"}, {"original_string": "private ImmutableCell d;", "modifier": "private", "type": "ImmutableCell", "declarator": "d", "var_name": "d"}, {"original_string": "private Variable var;", "modifier": "private", "type": "Variable", "declarator": "var", "var_name": "var"}], "file": "electric/electric-core/src/test/java/com/sun/electric/database/ImmutableCellTest.java"}, "test_case": {"identifier": "testWithGroupName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithGroupName() {\n        System.out.println(\"withGroupName\");\n\n        assertSame(d, d.withGroupName(CellName.parseName(\"foo{sch}\")));\n\n        CellName groupName = CellName.parseName(\"bar{sch}\");\n        ImmutableCell d1 = d.withGroupName(groupName);\n        d1.check();\n        assertSame(d.cellId, d1.cellId);\n        assertSame(groupName, d1.groupName);\n        assertEquals(d.creationDate, d1.creationDate);\n        assertSame(d.techId, d1.techId);\n        assertSame(d.getVars(), d1.getVars());\n        assertEquals(d.flags, d1.flags);\n    }", "signature": "void testWithGroupName()", "full_signature": "@Test public void testWithGroupName()", "class_method_signature": "ImmutableCellTest.testWithGroupName()", "testcase": true, "constructor": false, "invocations": ["println", "assertSame", "withGroupName", "parseName", "parseName", "withGroupName", "check", "assertSame", "assertSame", "assertEquals", "assertSame", "assertSame", "getVars", "getVars", "assertEquals"]}, "focal_class": {"identifier": "ImmutableCell", "superclass": "extends ImmutableElectricObject", "interfaces": "", "fields": [{"original_string": "public final CellId cellId;", "modifier": "public final", "type": "CellId", "declarator": "cellId", "var_name": "cellId"}, {"original_string": "public final CellName groupName;", "modifier": "public final", "type": "CellName", "declarator": "groupName", "var_name": "groupName"}, {"original_string": "public final long creationDate;", "modifier": "public final", "type": "long", "declarator": "creationDate", "var_name": "creationDate"}, {"original_string": "public final long revisionDate;", "modifier": "public final", "type": "long", "declarator": "revisionDate", "var_name": "revisionDate"}, {"original_string": "public final TechId techId;", "modifier": "public final", "type": "TechId", "declarator": "techId", "var_name": "techId"}, {"original_string": "final Variable[] params;", "modifier": "final", "type": "Variable[]", "declarator": "params", "var_name": "params"}], "methods": [{"identifier": "ImmutableCell", "parameters": "(CellId cellId, CellName groupName,\n            long creationDate, long revisionDate, TechId techId, int flags, Variable[] vars, Variable[] params)", "modifiers": "private", "return": "", "signature": " ImmutableCell(CellId cellId, CellName groupName,\n            long creationDate, long revisionDate, TechId techId, int flags, Variable[] vars, Variable[] params)", "full_signature": "private  ImmutableCell(CellId cellId, CellName groupName,\n            long creationDate, long revisionDate, TechId techId, int flags, Variable[] vars, Variable[] params)", "class_method_signature": "ImmutableCell.ImmutableCell(CellId cellId, CellName groupName,\n            long creationDate, long revisionDate, TechId techId, int flags, Variable[] vars, Variable[] params)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(CellId cellId, long creationDate)", "modifiers": "public static", "return": "ImmutableCell", "signature": "ImmutableCell newInstance(CellId cellId, long creationDate)", "full_signature": "public static ImmutableCell newInstance(CellId cellId, long creationDate)", "class_method_signature": "ImmutableCell.newInstance(CellId cellId, long creationDate)", "testcase": false, "constructor": false}, {"identifier": "withGroupName", "parameters": "(CellName groupName)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withGroupName(CellName groupName)", "full_signature": "public ImmutableCell withGroupName(CellName groupName)", "class_method_signature": "ImmutableCell.withGroupName(CellName groupName)", "testcase": false, "constructor": false}, {"identifier": "withCreationDate", "parameters": "(long creationDate)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withCreationDate(long creationDate)", "full_signature": "public ImmutableCell withCreationDate(long creationDate)", "class_method_signature": "ImmutableCell.withCreationDate(long creationDate)", "testcase": false, "constructor": false}, {"identifier": "withRevisionDate", "parameters": "(long revisionDate)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withRevisionDate(long revisionDate)", "full_signature": "public ImmutableCell withRevisionDate(long revisionDate)", "class_method_signature": "ImmutableCell.withRevisionDate(long revisionDate)", "testcase": false, "constructor": false}, {"identifier": "withTechId", "parameters": "(TechId techId)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withTechId(TechId techId)", "full_signature": "public ImmutableCell withTechId(TechId techId)", "class_method_signature": "ImmutableCell.withTechId(TechId techId)", "testcase": false, "constructor": false}, {"identifier": "withFlags", "parameters": "(int flags)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withFlags(int flags)", "full_signature": "public ImmutableCell withFlags(int flags)", "class_method_signature": "ImmutableCell.withFlags(int flags)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(Variable.AttrKey key)", "modifiers": "public", "return": "Variable", "signature": "Variable getParameter(Variable.AttrKey key)", "full_signature": "public Variable getParameter(Variable.AttrKey key)", "class_method_signature": "ImmutableCell.getParameter(Variable.AttrKey key)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "Iterator<Variable>", "signature": "Iterator<Variable> getParameters()", "full_signature": "public Iterator<Variable> getParameters()", "class_method_signature": "ImmutableCell.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getNumParameters", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumParameters()", "full_signature": "public int getNumParameters()", "class_method_signature": "ImmutableCell.getNumParameters()", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(int paramIndex)", "modifiers": "public", "return": "Variable", "signature": "Variable getParameter(int paramIndex)", "full_signature": "public Variable getParameter(int paramIndex)", "class_method_signature": "ImmutableCell.getParameter(int paramIndex)", "testcase": false, "constructor": false}, {"identifier": "withParam", "parameters": "(Variable var)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withParam(Variable var)", "full_signature": "public ImmutableCell withParam(Variable var)", "class_method_signature": "ImmutableCell.withParam(Variable var)", "testcase": false, "constructor": false}, {"identifier": "withoutParam", "parameters": "(Variable.AttrKey key)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withoutParam(Variable.AttrKey key)", "full_signature": "public ImmutableCell withoutParam(Variable.AttrKey key)", "class_method_signature": "ImmutableCell.withoutParam(Variable.AttrKey key)", "testcase": false, "constructor": false}, {"identifier": "withVariable", "parameters": "(Variable var)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withVariable(Variable var)", "full_signature": "public ImmutableCell withVariable(Variable var)", "class_method_signature": "ImmutableCell.withVariable(Variable var)", "testcase": false, "constructor": false}, {"identifier": "withoutVariable", "parameters": "(Variable.Key key)", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withoutVariable(Variable.Key key)", "full_signature": "public ImmutableCell withoutVariable(Variable.Key key)", "class_method_signature": "ImmutableCell.withoutVariable(Variable.Key key)", "testcase": false, "constructor": false}, {"identifier": "withRenamedIds", "parameters": "(IdMapper idMapper)", "modifiers": "", "return": "ImmutableCell", "signature": "ImmutableCell withRenamedIds(IdMapper idMapper)", "full_signature": " ImmutableCell withRenamedIds(IdMapper idMapper)", "class_method_signature": "ImmutableCell.withRenamedIds(IdMapper idMapper)", "testcase": false, "constructor": false}, {"identifier": "withoutVariables", "parameters": "()", "modifiers": "public", "return": "ImmutableCell", "signature": "ImmutableCell withoutVariables()", "full_signature": "public ImmutableCell withoutVariables()", "class_method_signature": "ImmutableCell.withoutVariables()", "testcase": false, "constructor": false}, {"identifier": "checkSimilarParams", "parameters": "(ImmutableCell that)", "modifiers": "", "return": "void", "signature": "void checkSimilarParams(ImmutableCell that)", "full_signature": " void checkSimilarParams(ImmutableCell that)", "class_method_signature": "ImmutableCell.checkSimilarParams(ImmutableCell that)", "testcase": false, "constructor": false}, {"identifier": "getLibId", "parameters": "()", "modifiers": "public", "return": "LibId", "signature": "LibId getLibId()", "full_signature": "public LibId getLibId()", "class_method_signature": "ImmutableCell.getLibId()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(IdWriter writer)", "modifiers": "", "return": "void", "signature": "void write(IdWriter writer)", "full_signature": " void write(IdWriter writer)", "class_method_signature": "ImmutableCell.write(IdWriter writer)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(IdReader reader)", "modifiers": "static", "return": "ImmutableCell", "signature": "ImmutableCell read(IdReader reader)", "full_signature": "static ImmutableCell read(IdReader reader)", "class_method_signature": "ImmutableCell.read(IdReader reader)", "testcase": false, "constructor": false}, {"identifier": "hashCodeExceptVariables", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCodeExceptVariables()", "full_signature": "public int hashCodeExceptVariables()", "class_method_signature": "ImmutableCell.hashCodeExceptVariables()", "testcase": false, "constructor": false}, {"identifier": "equalsExceptVariables", "parameters": "(ImmutableElectricObject o)", "modifiers": "public", "return": "boolean", "signature": "boolean equalsExceptVariables(ImmutableElectricObject o)", "full_signature": "public boolean equalsExceptVariables(ImmutableElectricObject o)", "class_method_signature": "ImmutableCell.equalsExceptVariables(ImmutableElectricObject o)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void check()", "full_signature": "public void check()", "class_method_signature": "ImmutableCell.check()", "testcase": false, "constructor": false}, {"identifier": "paramsAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean paramsAllowed()", "full_signature": "public boolean paramsAllowed()", "class_method_signature": "ImmutableCell.paramsAllowed()", "testcase": false, "constructor": false}, {"identifier": "busNamesAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean busNamesAllowed()", "full_signature": "public boolean busNamesAllowed()", "class_method_signature": "ImmutableCell.busNamesAllowed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableCell.toString()", "testcase": false, "constructor": false}], "file": "electric/electric-core/src/main/java/com/sun/electric/database/ImmutableCell.java"}, "focal_method": {"identifier": "withGroupName", "parameters": "(CellName groupName)", "modifiers": "public", "return": "ImmutableCell", "body": "public ImmutableCell withGroupName(CellName groupName) {\n        if (this.groupName.equals(groupName)) {\n            return this;\n        }\n        if (groupName.getVersion() != 0 || groupName.getView() != View.SCHEMATIC) {\n            throw new IllegalArgumentException(groupName.toString());\n        }\n        return new ImmutableCell(this.cellId, groupName,\n                this.creationDate, this.revisionDate, this.techId, this.flags, getVars(), this.params);\n    }", "signature": "ImmutableCell withGroupName(CellName groupName)", "full_signature": "public ImmutableCell withGroupName(CellName groupName)", "class_method_signature": "ImmutableCell.withGroupName(CellName groupName)", "testcase": false, "constructor": false, "invocations": ["equals", "getVersion", "getView", "toString", "getVars"]}, "repository": {"repo_id": 1269176, "url": "https://github.com/imr/Electric-VLSI", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 87437, "license": "licensed"}}