{"test_class": {"identifier": "ArrayAccessTest", "superclass": "extends EvaluableExpressionTest<ArrayAccess>", "interfaces": "", "fields": [], "file": "sopremo/sopremo-common/src/test/java/eu/stratosphere/sopremo/expressions/ArrayAccessTest.java"}, "test_case": {"identifier": "shouldAccessRangeOfElementWithNegativeStartAndEndIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldAccessRangeOfElementWithNegativeStartAndEndIndex() {\n\t\tfinal IJsonNode result = new ArrayAccess(-3, -1).evaluate(\n\t\t\tcreateArrayNode(createObjectNode(\"fieldName\", 1), createObjectNode(\"fieldName\", 2),\n\t\t\t\tcreateObjectNode(\"fieldName\", 3), createObjectNode(\"fieldName\", 4),\n\t\t\t\tcreateObjectNode(\"fieldName\", 5)),\n\t\t\tnull, this.context);\n\t\tAssert.assertEquals(createArrayNode(createObjectNode(\"fieldName\", 3), createObjectNode(\"fieldName\", 4),\n\t\t\tcreateObjectNode(\"fieldName\", 5)), result);\n\t}", "signature": "void shouldAccessRangeOfElementWithNegativeStartAndEndIndex()", "full_signature": "@Test public void shouldAccessRangeOfElementWithNegativeStartAndEndIndex()", "class_method_signature": "ArrayAccessTest.shouldAccessRangeOfElementWithNegativeStartAndEndIndex()", "testcase": true, "constructor": false, "invocations": ["evaluate", "createArrayNode", "createObjectNode", "createObjectNode", "createObjectNode", "createObjectNode", "createObjectNode", "assertEquals", "createArrayNode", "createObjectNode", "createObjectNode", "createObjectNode"]}, "focal_class": {"identifier": "ArrayAccess", "superclass": "extends EvaluationExpression", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -2326222517008315722L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2326222517008315722L", "var_name": "serialVersionUID"}, {"original_string": "private final int startIndex, endIndex;", "modifier": "private final", "type": "int", "declarator": "startIndex", "var_name": "startIndex"}], "methods": [{"identifier": "ArrayAccess", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArrayAccess()", "full_signature": "public  ArrayAccess()", "class_method_signature": "ArrayAccess.ArrayAccess()", "testcase": false, "constructor": true}, {"identifier": "ArrayAccess", "parameters": "(final int index)", "modifiers": "public", "return": "", "signature": " ArrayAccess(final int index)", "full_signature": "public  ArrayAccess(final int index)", "class_method_signature": "ArrayAccess.ArrayAccess(final int index)", "testcase": false, "constructor": true}, {"identifier": "ArrayAccess", "parameters": "(final int startIndex, final int endIndex)", "modifiers": "public", "return": "", "signature": " ArrayAccess(final int startIndex, final int endIndex)", "full_signature": "public  ArrayAccess(final int startIndex, final int endIndex)", "class_method_signature": "ArrayAccess.ArrayAccess(final int startIndex, final int endIndex)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "ArrayAccess.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "modifiers": "@Override public", "return": "IJsonNode", "signature": "IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "full_signature": "@Override public IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "class_method_signature": "ArrayAccess.evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "testcase": false, "constructor": false}, {"identifier": "getEndIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEndIndex()", "full_signature": "public int getEndIndex()", "class_method_signature": "ArrayAccess.getEndIndex()", "testcase": false, "constructor": false}, {"identifier": "getStartIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStartIndex()", "full_signature": "public int getStartIndex()", "class_method_signature": "ArrayAccess.getStartIndex()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ArrayAccess.hashCode()", "testcase": false, "constructor": false}, {"identifier": "isSelectingAll", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSelectingAll()", "full_signature": "public boolean isSelectingAll()", "class_method_signature": "ArrayAccess.isSelectingAll()", "testcase": false, "constructor": false}, {"identifier": "isSelectingRange", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSelectingRange()", "full_signature": "public boolean isSelectingRange()", "class_method_signature": "ArrayAccess.isSelectingRange()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final IJsonNode node, final IJsonNode value, final EvaluationContext context)", "modifiers": "@Override public", "return": "IJsonNode", "signature": "IJsonNode set(final IJsonNode node, final IJsonNode value, final EvaluationContext context)", "full_signature": "@Override public IJsonNode set(final IJsonNode node, final IJsonNode value, final EvaluationContext context)", "class_method_signature": "ArrayAccess.set(final IJsonNode node, final IJsonNode value, final EvaluationContext context)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final StringBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void toString(final StringBuilder builder)", "full_signature": "@Override public void toString(final StringBuilder builder)", "class_method_signature": "ArrayAccess.toString(final StringBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "resolveIndex", "parameters": "(final int index, final int size)", "modifiers": "private", "return": "int", "signature": "int resolveIndex(final int index, final int size)", "full_signature": "private int resolveIndex(final int index, final int size)", "class_method_signature": "ArrayAccess.resolveIndex(final int index, final int size)", "testcase": false, "constructor": false}, {"identifier": "arrayWithIndices", "parameters": "(final int... indices)", "modifiers": "public static", "return": "EvaluationExpression", "signature": "EvaluationExpression arrayWithIndices(final int... indices)", "full_signature": "public static EvaluationExpression arrayWithIndices(final int... indices)", "class_method_signature": "ArrayAccess.arrayWithIndices(final int... indices)", "testcase": false, "constructor": false}], "file": "sopremo/sopremo-common/src/main/java/eu/stratosphere/sopremo/expressions/ArrayAccess.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "modifiers": "@Override public", "return": "IJsonNode", "body": "@Override\n\tpublic IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context) {\n\t\tif (!node.isArray())\n\t\t\treturn MissingNode.getInstance();\n\n\t\tfinal IArrayNode arrayNode = (IArrayNode) node;\n\t\tif (this.isSelectingAll()) {\n\t\t\tfinal IArrayNode targetArray = SopremoUtil.reinitializeTarget(target, ArrayNode.class);\n\t\t\ttargetArray.addAll(arrayNode);\n\t\t\treturn targetArray;\n\t\t}\n\t\tfinal int size = arrayNode.size();\n\t\tif (this.isSelectingRange()) {\n\t\t\tfinal IArrayNode targetArray = SopremoUtil.reinitializeTarget(target, ArrayNode.class);\n\t\t\tint index = this.resolveIndex(this.startIndex, size);\n\t\t\tfinal int endIndex = this.resolveIndex(this.endIndex, size);\n\t\t\tfinal int increment = index < endIndex ? 1 : -1;\n\n\t\t\tfor (boolean moreElements = true; moreElements; index += increment) {\n\t\t\t\ttargetArray.add(arrayNode.get(index));\n\t\t\t\tmoreElements = index != endIndex;\n\t\t\t}\n\t\t\treturn targetArray;\n\t\t}\n\n\t\tfinal IJsonNode value = arrayNode.get(this.resolveIndex(this.startIndex, size));\n\t\treturn value == null ? NullNode.getInstance() : value;\n\t}", "signature": "IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "full_signature": "@Override public IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "class_method_signature": "ArrayAccess.evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "testcase": false, "constructor": false, "invocations": ["isArray", "getInstance", "isSelectingAll", "reinitializeTarget", "addAll", "size", "isSelectingRange", "reinitializeTarget", "resolveIndex", "resolveIndex", "add", "get", "get", "resolveIndex", "getInstance"]}, "repository": {"repo_id": 4726303, "url": "https://github.com/stratosphere-eu/stratosphere-OLD-REPO", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 14146, "license": "licensed"}}