{"test_class": {"identifier": "TypeHierarchyBrowserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Visitor<Class<?>> DEFAULT_VISITOR = new Visitor<Class<?>>() {\n\t\t@Override\n\t\tpublic boolean visited(final Class<?> node, final int distance) {\n\t\t\treturn true;\n\t\t}\n\t};", "modifier": "private static final", "type": "Visitor<Class<?>>", "declarator": "DEFAULT_VISITOR = new Visitor<Class<?>>() {\n\t\t@Override\n\t\tpublic boolean visited(final Class<?> node, final int distance) {\n\t\t\treturn true;\n\t\t}\n\t}", "var_name": "DEFAULT_VISITOR"}, {"original_string": "private final Class<?> startClass;", "modifier": "private final", "type": "Class<?>", "declarator": "startClass", "var_name": "startClass"}, {"original_string": "private final Mode mode;", "modifier": "private final", "type": "Mode", "declarator": "mode", "var_name": "mode"}, {"original_string": "private final int maxDepth;", "modifier": "private final", "type": "int", "declarator": "maxDepth", "var_name": "maxDepth"}, {"original_string": "private final List<? extends Map.Entry<Class<?>, Integer>> expectedClasses;", "modifier": "private final", "type": "List<? extends Map.Entry<Class<?>, Integer>>", "declarator": "expectedClasses", "var_name": "expectedClasses"}, {"original_string": "private final Visitor<Class<?>> visitor;", "modifier": "private final", "type": "Visitor<Class<?>>", "declarator": "visitor", "var_name": "visitor"}], "file": "sopremo/sopremo-common/src/test/java/eu/stratosphere/util/reflect/TypeHierarchyBrowserTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tfinal List<SimpleEntry<Class<?>, Integer>> actual = new ArrayList<SimpleEntry<Class<?>, Integer>>();\n\t\tTypeHierarchyBrowser.INSTANCE.visit(this.startClass, this.mode, new Visitor<Class<?>>() {\n\t\t\t@Override\n\t\t\tpublic boolean visited(final Class<?> node, final int distance) {\n\t\t\t\tactual.add(new SimpleEntry<Class<?>, Integer>(node, distance));\n\t\t\t\treturn TypeHierarchyBrowserTest.this.visitor.visited(node, distance);\n\t\t\t}\n\t\t}, this.maxDepth);\n\n\t\tif (this.mode == Mode.ALL)\n\t\t\tAssert.assertEquals(String.format(\"Failed to browser %s (%s) to %d\", this.startClass, this.mode,\n\t\t\t\tthis.maxDepth),\n\t\t\t\tnew HashSet<Map.Entry<Class<?>, Integer>>(this.expectedClasses),\n\t\t\t\tnew HashSet<Map.Entry<Class<?>, Integer>>(actual));\n\t\telse\n\t\t\tAssert.assertEquals(String.format(\"Failed to browser %s (%s) to %d\", this.startClass, this.mode,\n\t\t\t\tthis.maxDepth), this.expectedClasses, actual);\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "TypeHierarchyBrowserTest.test()", "testcase": true, "constructor": false, "invocations": ["visit", "add", "visited", "assertEquals", "format", "assertEquals", "format"]}, "focal_class": {"identifier": "TypeHierarchyBrowser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static TypeHierarchyBrowser INSTANCE = new TypeHierarchyBrowser();", "modifier": "public static", "type": "TypeHierarchyBrowser", "declarator": "INSTANCE = new TypeHierarchyBrowser()", "var_name": "INSTANCE"}], "methods": [{"identifier": "visit", "parameters": "(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "modifiers": "public", "return": "void", "signature": "void visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "full_signature": "public void visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "class_method_signature": "TypeHierarchyBrowser.visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback)", "modifiers": "public", "return": "void", "signature": "void visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback)", "full_signature": "public void visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback)", "class_method_signature": "TypeHierarchyBrowser.visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback)", "testcase": false, "constructor": false}], "file": "sopremo/sopremo-common/src/main/java/eu/stratosphere/util/reflect/TypeHierarchyBrowser.java"}, "focal_method": {"identifier": "visit", "parameters": "(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "modifiers": "public", "return": "void", "body": "public void visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth) {\n\t\tif (maxDepth <= 0)\n\t\t\treturn;\n\n\t\tList<Class<?>> currentTypes = new LinkedList<Class<?>>(), nextTypes = new LinkedList<Class<?>>();\n\t\tcurrentTypes.add(startType);\n\t\tfor (int depth = 1; depth <= maxDepth && !currentTypes.isEmpty(); depth++) {\n\t\t\tfinal boolean shouldDescend = depth + 1 <= maxDepth;\n\n\t\t\tfor (final Class<?> type : currentTypes) {\n\t\t\t\tfinal Iterable<? extends Class<?>> superTypes = mode.getSuperTypes(type);\n\t\t\t\tfor (final Class<?> superType : superTypes) {\n\t\t\t\t\tif (mode.shouldInvokeCallback(superType))\n\t\t\t\t\t\tif (!callback.visited(superType, depth))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\tif (shouldDescend)\n\t\t\t\t\t\tnextTypes.add(superType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTypes.clear();\n\t\t\tfinal List<Class<?>> swap = currentTypes;\n\t\t\tcurrentTypes = mode.prepare(nextTypes);\n\t\t\tnextTypes = swap;\n\t\t}\n\t}", "signature": "void visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "full_signature": "public void visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "class_method_signature": "TypeHierarchyBrowser.visit(final Class<?> startType, final Mode mode, final Visitor<Class<?>> callback, final int maxDepth)", "testcase": false, "constructor": false, "invocations": ["add", "isEmpty", "getSuperTypes", "shouldInvokeCallback", "visited", "add", "clear", "prepare"]}, "repository": {"repo_id": 4726303, "url": "https://github.com/stratosphere-eu/stratosphere-OLD-REPO", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 14146, "license": "licensed"}}