{"test_class": {"identifier": "ContractUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "pact/pact-clients/src/test/java/eu/stratosphere/pact/common/plan/ContractUtilTest.java"}, "test_case": {"identifier": "getContractClassShouldReturnSinkForOutputFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getContractClassShouldReturnSinkForOutputFormat() {\n\t\tfinal Class<?> result = ContractUtil.getContractClass(DelimitedOutputFormat.class);\n\t\tassertEquals(FileDataSink.class, result);\n\t}", "signature": "void getContractClassShouldReturnSinkForOutputFormat()", "full_signature": "@Test public void getContractClassShouldReturnSinkForOutputFormat()", "class_method_signature": "ContractUtilTest.getContractClassShouldReturnSinkForOutputFormat()", "testcase": true, "constructor": false, "invocations": ["getContractClass", "assertEquals"]}, "focal_class": {"identifier": "ContractUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Map<Class<?>, Class<? extends Contract>> STUB_CONTRACTS =\n\t\tnew LinkedHashMap<Class<?>, Class<? extends Contract>>();", "modifier": "private final static", "type": "Map<Class<?>, Class<? extends Contract>>", "declarator": "STUB_CONTRACTS =\n\t\tnew LinkedHashMap<Class<?>, Class<? extends Contract>>()", "var_name": "STUB_CONTRACTS"}], "methods": [{"identifier": "getContractClass", "parameters": "(final Class<?> stubClass)", "modifiers": "@SuppressWarnings({ \"unchecked\" }) public static", "return": "Class<? extends Contract>", "signature": "Class<? extends Contract> getContractClass(final Class<?> stubClass)", "full_signature": "@SuppressWarnings({ \"unchecked\" }) public static Class<? extends Contract> getContractClass(final Class<?> stubClass)", "class_method_signature": "ContractUtil.getContractClass(final Class<?> stubClass)", "testcase": false, "constructor": false}, {"identifier": "getNumInputs", "parameters": "(final Class<? extends Contract> contractType)", "modifiers": "public static", "return": "int", "signature": "int getNumInputs(final Class<? extends Contract> contractType)", "full_signature": "public static int getNumInputs(final Class<? extends Contract> contractType)", "class_method_signature": "ContractUtil.getNumInputs(final Class<? extends Contract> contractType)", "testcase": false, "constructor": false}, {"identifier": "getInputs", "parameters": "(final Contract contract)", "modifiers": "public static", "return": "List<List<Contract>>", "signature": "List<List<Contract>> getInputs(final Contract contract)", "full_signature": "public static List<List<Contract>> getInputs(final Contract contract)", "class_method_signature": "ContractUtil.getInputs(final Contract contract)", "testcase": false, "constructor": false}, {"identifier": "getFlatInputs", "parameters": "(final Contract contract)", "modifiers": "public static", "return": "List<Contract>", "signature": "List<Contract> getFlatInputs(final Contract contract)", "full_signature": "public static List<Contract> getFlatInputs(final Contract contract)", "class_method_signature": "ContractUtil.getFlatInputs(final Contract contract)", "testcase": false, "constructor": false}, {"identifier": "setInputs", "parameters": "(final Contract contract, final List<List<Contract>> inputs)", "modifiers": "public static", "return": "void", "signature": "void setInputs(final Contract contract, final List<List<Contract>> inputs)", "full_signature": "public static void setInputs(final Contract contract, final List<List<Contract>> inputs)", "class_method_signature": "ContractUtil.setInputs(final Contract contract, final List<List<Contract>> inputs)", "testcase": false, "constructor": false}, {"identifier": "swapInputs", "parameters": "(Contract contract, int input1, int input2)", "modifiers": "public static", "return": "void", "signature": "void swapInputs(Contract contract, int input1, int input2)", "full_signature": "public static void swapInputs(Contract contract, int input1, int input2)", "class_method_signature": "ContractUtil.swapInputs(Contract contract, int input1, int input2)", "testcase": false, "constructor": false}], "file": "pact/pact-clients/src/main/java/eu/stratosphere/pact/common/plan/ContractUtil.java"}, "focal_method": {"identifier": "getContractClass", "parameters": "(final Class<?> stubClass)", "modifiers": "@SuppressWarnings({ \"unchecked\" }) public static", "return": "Class<? extends Contract>", "body": "@SuppressWarnings({ \"unchecked\" })\n\tpublic static Class<? extends Contract> getContractClass(final Class<?> stubClass) {\n\t\tif (stubClass == null)\n\t\t\treturn null;\n\t\tfinal Class<?> contract = STUB_CONTRACTS.get(stubClass);\n\t\tif (contract != null)\n\t\t\treturn (Class<? extends Contract>) contract;\n\t\tIterator<Entry<Class<?>, Class<? extends Contract>>> stubContracts = STUB_CONTRACTS.entrySet().iterator();\n\t\twhile (stubContracts.hasNext()) {\n\t\t\tMap.Entry<Class<?>, Class<? extends Contract>> entry = stubContracts.next();\n\t\t\tif (entry.getKey().isAssignableFrom(stubClass))\n\t\t\t\treturn entry.getValue();\n\t\t}\n\t\treturn null;\n\n\t}", "signature": "Class<? extends Contract> getContractClass(final Class<?> stubClass)", "full_signature": "@SuppressWarnings({ \"unchecked\" }) public static Class<? extends Contract> getContractClass(final Class<?> stubClass)", "class_method_signature": "ContractUtil.getContractClass(final Class<?> stubClass)", "testcase": false, "constructor": false, "invocations": ["get", "iterator", "entrySet", "hasNext", "next", "isAssignableFrom", "getKey", "getValue"]}, "repository": {"repo_id": 4726303, "url": "https://github.com/stratosphere-eu/stratosphere-OLD-REPO", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 14146, "license": "licensed"}}