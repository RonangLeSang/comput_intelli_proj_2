{"test_class": {"identifier": "TernaryExpressionTest", "superclass": "extends EvaluableExpressionTest<TernaryExpression>", "interfaces": "", "fields": [], "file": "sopremo/sopremo-common/src/test/java/eu/stratosphere/sopremo/expressions/TernaryExpressionTest.java"}, "test_case": {"identifier": "shouldEvaluateIfExpIfClauseIsTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldEvaluateIfExpIfClauseIsTrue() {\n\t\tfinal IJsonNode result = new TernaryExpression(new InputSelection(0),\n\t\t\tnew ConstantExpression(IntNode.valueOf(0)), new ConstantExpression(IntNode.valueOf(1))).evaluate(\n\t\t\tcreateArrayNode(BooleanNode.TRUE, BooleanNode.FALSE), null, this.context);\n\n\t\tAssert.assertEquals(IntNode.valueOf(0), result);\n\t}", "signature": "void shouldEvaluateIfExpIfClauseIsTrue()", "full_signature": "@Test public void shouldEvaluateIfExpIfClauseIsTrue()", "class_method_signature": "TernaryExpressionTest.shouldEvaluateIfExpIfClauseIsTrue()", "testcase": true, "constructor": false, "invocations": ["evaluate", "valueOf", "valueOf", "createArrayNode", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "TernaryExpression", "superclass": "extends EvaluationExpression", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -5854293822552106472L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5854293822552106472L", "var_name": "serialVersionUID"}, {"original_string": "private CachingExpression<IJsonNode> ifClause;", "modifier": "private", "type": "CachingExpression<IJsonNode>", "declarator": "ifClause", "var_name": "ifClause"}, {"original_string": "private EvaluationExpression ifExpression, thenExpression;", "modifier": "private", "type": "EvaluationExpression", "declarator": "ifExpression", "var_name": "ifExpression"}], "methods": [{"identifier": "TernaryExpression", "parameters": "(final EvaluationExpression ifClause, final EvaluationExpression ifExpression,\n\t\t\tfinal EvaluationExpression thenExpression)", "modifiers": "public", "return": "", "signature": " TernaryExpression(final EvaluationExpression ifClause, final EvaluationExpression ifExpression,\n\t\t\tfinal EvaluationExpression thenExpression)", "full_signature": "public  TernaryExpression(final EvaluationExpression ifClause, final EvaluationExpression ifExpression,\n\t\t\tfinal EvaluationExpression thenExpression)", "class_method_signature": "TernaryExpression.TernaryExpression(final EvaluationExpression ifClause, final EvaluationExpression ifExpression,\n\t\t\tfinal EvaluationExpression thenExpression)", "testcase": false, "constructor": true}, {"identifier": "TernaryExpression", "parameters": "(final EvaluationExpression ifClause, final EvaluationExpression ifExpression)", "modifiers": "public", "return": "", "signature": " TernaryExpression(final EvaluationExpression ifClause, final EvaluationExpression ifExpression)", "full_signature": "public  TernaryExpression(final EvaluationExpression ifClause, final EvaluationExpression ifExpression)", "class_method_signature": "TernaryExpression.TernaryExpression(final EvaluationExpression ifClause, final EvaluationExpression ifExpression)", "testcase": false, "constructor": true}, {"identifier": "getIfClause", "parameters": "()", "modifiers": "public", "return": "EvaluationExpression", "signature": "EvaluationExpression getIfClause()", "full_signature": "public EvaluationExpression getIfClause()", "class_method_signature": "TernaryExpression.getIfClause()", "testcase": false, "constructor": false}, {"identifier": "setIfClause", "parameters": "(final EvaluationExpression ifClause)", "modifiers": "public", "return": "void", "signature": "void setIfClause(final EvaluationExpression ifClause)", "full_signature": "public void setIfClause(final EvaluationExpression ifClause)", "class_method_signature": "TernaryExpression.setIfClause(final EvaluationExpression ifClause)", "testcase": false, "constructor": false}, {"identifier": "getIfExpression", "parameters": "()", "modifiers": "public", "return": "EvaluationExpression", "signature": "EvaluationExpression getIfExpression()", "full_signature": "public EvaluationExpression getIfExpression()", "class_method_signature": "TernaryExpression.getIfExpression()", "testcase": false, "constructor": false}, {"identifier": "setIfExpression", "parameters": "(final EvaluationExpression ifExpression)", "modifiers": "public", "return": "void", "signature": "void setIfExpression(final EvaluationExpression ifExpression)", "full_signature": "public void setIfExpression(final EvaluationExpression ifExpression)", "class_method_signature": "TernaryExpression.setIfExpression(final EvaluationExpression ifExpression)", "testcase": false, "constructor": false}, {"identifier": "getThenExpression", "parameters": "()", "modifiers": "public", "return": "EvaluationExpression", "signature": "EvaluationExpression getThenExpression()", "full_signature": "public EvaluationExpression getThenExpression()", "class_method_signature": "TernaryExpression.getThenExpression()", "testcase": false, "constructor": false}, {"identifier": "setThenExpression", "parameters": "(final EvaluationExpression thenExpression)", "modifiers": "public", "return": "void", "signature": "void setThenExpression(final EvaluationExpression thenExpression)", "full_signature": "public void setThenExpression(final EvaluationExpression thenExpression)", "class_method_signature": "TernaryExpression.setThenExpression(final EvaluationExpression thenExpression)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "modifiers": "@Override public", "return": "IJsonNode", "signature": "IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "full_signature": "@Override public IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "class_method_signature": "TernaryExpression.evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "testcase": false, "constructor": false}, {"identifier": "transformRecursively", "parameters": "(final TransformFunction function)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "EvaluationExpression", "signature": "EvaluationExpression transformRecursively(final TransformFunction function)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public EvaluationExpression transformRecursively(final TransformFunction function)", "class_method_signature": "TernaryExpression.transformRecursively(final TransformFunction function)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final StringBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void toString(final StringBuilder builder)", "full_signature": "@Override public void toString(final StringBuilder builder)", "class_method_signature": "TernaryExpression.toString(final StringBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TernaryExpression.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "TernaryExpression.equals(final Object obj)", "testcase": false, "constructor": false}], "file": "sopremo/sopremo-common/src/main/java/eu/stratosphere/sopremo/expressions/TernaryExpression.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "modifiers": "@Override public", "return": "IJsonNode", "body": "@Override\n\tpublic IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context) {\n\t\t// no need to reuse the target of the coercion - a boolean node is never created anew\n\t\tif (TypeCoercer.INSTANCE.coerce(this.ifClause.evaluate(node, context), null, BooleanNode.class) == BooleanNode.TRUE)\n\t\t\treturn this.ifExpression.evaluate(node, target, context);\n\t\treturn this.thenExpression.evaluate(node, target, context);\n\t}", "signature": "IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "full_signature": "@Override public IJsonNode evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "class_method_signature": "TernaryExpression.evaluate(final IJsonNode node, final IJsonNode target, final EvaluationContext context)", "testcase": false, "constructor": false, "invocations": ["coerce", "evaluate", "evaluate", "evaluate"]}, "repository": {"repo_id": 4726303, "url": "https://github.com/stratosphere-eu/stratosphere-OLD-REPO", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 14146, "license": "licensed"}}