{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/nl/lxtreme/ols/util/NumberUtilsTest.java"}, "test_case": {"identifier": "testGetPercentageWithBoundsOk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetPercentageWithBoundsOk()\n  {\n    assertEquals( 0, getPercentage( -1, 1, 11 ) );\n    assertEquals( 0, getPercentage( 0, 1, 11 ) );\n    assertEquals( 0, getPercentage( 1, 1, 11 ) );\n    assertEquals( 10, getPercentage( 2, 1, 11 ) );\n    assertEquals( 20, getPercentage( 3, 1, 11 ) );\n    assertEquals( 30, getPercentage( 4, 1, 11 ) );\n    assertEquals( 40, getPercentage( 5, 1, 11 ) );\n    assertEquals( 50, getPercentage( 6, 1, 11 ) );\n    assertEquals( 60, getPercentage( 7, 1, 11 ) );\n    assertEquals( 70, getPercentage( 8, 1, 11 ) );\n    assertEquals( 80, getPercentage( 9, 1, 11 ) );\n    assertEquals( 90, getPercentage( 10, 1, 11 ) );\n    assertEquals( 100, getPercentage( 11, 1, 11 ) );\n    assertEquals( 100, getPercentage( 12, 1, 11 ) );\n  }", "signature": "void testGetPercentageWithBoundsOk()", "full_signature": "@Test public void testGetPercentageWithBoundsOk()", "class_method_signature": "NumberUtilsTest.testGetPercentageWithBoundsOk()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage", "assertEquals", "getPercentage"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern SMART_INT_PATTERN = Pattern.compile( \"^([-+]?\\\\d+)(?:\\\\s*([kKM]))?.*$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "SMART_INT_PATTERN = Pattern.compile( \"^([-+]?\\\\d+)(?:\\\\s*([kKM]))?.*$\" )", "var_name": "SMART_INT_PATTERN"}], "methods": [{"identifier": "NumberUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " NumberUtils()", "full_signature": "private  NumberUtils()", "class_method_signature": "NumberUtils.NumberUtils()", "testcase": false, "constructor": true}, {"identifier": "convertBitOrder", "parameters": "( final int aValue, final int aBitCount, final BitOrder aBitOrder )", "modifiers": "public static", "return": "int", "signature": "int convertBitOrder( final int aValue, final int aBitCount, final BitOrder aBitOrder )", "full_signature": "public static int convertBitOrder( final int aValue, final int aBitCount, final BitOrder aBitOrder )", "class_method_signature": "NumberUtils.convertBitOrder( final int aValue, final int aBitCount, final BitOrder aBitOrder )", "testcase": false, "constructor": false}, {"identifier": "convertByteOrder", "parameters": "( final int aValue, final int aByteCount, final ByteOrder aByteOrder )", "modifiers": "public static", "return": "int", "signature": "int convertByteOrder( final int aValue, final int aByteCount, final ByteOrder aByteOrder )", "full_signature": "public static int convertByteOrder( final int aValue, final int aByteCount, final ByteOrder aByteOrder )", "class_method_signature": "NumberUtils.convertByteOrder( final int aValue, final int aByteCount, final ByteOrder aByteOrder )", "testcase": false, "constructor": false}, {"identifier": "createNumberComparator", "parameters": "( final boolean aSortAscending )", "modifiers": "public static", "return": "Comparator<T>", "signature": "Comparator<T> createNumberComparator( final boolean aSortAscending )", "full_signature": "public static Comparator<T> createNumberComparator( final boolean aSortAscending )", "class_method_signature": "NumberUtils.createNumberComparator( final boolean aSortAscending )", "testcase": false, "constructor": false}, {"identifier": "getBitIndex", "parameters": "( final int aMaskValue )", "modifiers": "public static", "return": "int", "signature": "int getBitIndex( final int aMaskValue )", "full_signature": "public static int getBitIndex( final int aMaskValue )", "class_method_signature": "NumberUtils.getBitIndex( final int aMaskValue )", "testcase": false, "constructor": false}, {"identifier": "getBitMask", "parameters": "( final int aBitCount )", "modifiers": "public static", "return": "int", "signature": "int getBitMask( final int aBitCount )", "full_signature": "public static int getBitMask( final int aBitCount )", "class_method_signature": "NumberUtils.getBitMask( final int aBitCount )", "testcase": false, "constructor": false}, {"identifier": "getPercentage", "parameters": "( final int aValue, final int aRange )", "modifiers": "public static", "return": "int", "signature": "int getPercentage( final int aValue, final int aRange )", "full_signature": "public static int getPercentage( final int aValue, final int aRange )", "class_method_signature": "NumberUtils.getPercentage( final int aValue, final int aRange )", "testcase": false, "constructor": false}, {"identifier": "getPercentage", "parameters": "( final int aValue, final int aLowerBound, final int aUpperBound )", "modifiers": "public static", "return": "int", "signature": "int getPercentage( final int aValue, final int aLowerBound, final int aUpperBound )", "full_signature": "public static int getPercentage( final int aValue, final int aLowerBound, final int aUpperBound )", "class_method_signature": "NumberUtils.getPercentage( final int aValue, final int aLowerBound, final int aUpperBound )", "testcase": false, "constructor": false}, {"identifier": "getPercentage", "parameters": "( final long aValue, final long aRange )", "modifiers": "public static", "return": "int", "signature": "int getPercentage( final long aValue, final long aRange )", "full_signature": "public static int getPercentage( final long aValue, final long aRange )", "class_method_signature": "NumberUtils.getPercentage( final long aValue, final long aRange )", "testcase": false, "constructor": false}, {"identifier": "getPercentage", "parameters": "( final long aValue, final long aLowerBound, final long aUpperBound )", "modifiers": "public static", "return": "int", "signature": "int getPercentage( final long aValue, final long aLowerBound, final long aUpperBound )", "full_signature": "public static int getPercentage( final long aValue, final long aLowerBound, final long aUpperBound )", "class_method_signature": "NumberUtils.getPercentage( final long aValue, final long aLowerBound, final long aUpperBound )", "testcase": false, "constructor": false}, {"identifier": "isPowerOfTwo", "parameters": "( final int aValue )", "modifiers": "public static", "return": "boolean", "signature": "boolean isPowerOfTwo( final int aValue )", "full_signature": "public static boolean isPowerOfTwo( final int aValue )", "class_method_signature": "NumberUtils.isPowerOfTwo( final int aValue )", "testcase": false, "constructor": false}, {"identifier": "packBytes", "parameters": "( final int aValue )", "modifiers": "public static", "return": "int", "signature": "int packBytes( final int aValue )", "full_signature": "public static int packBytes( final int aValue )", "class_method_signature": "NumberUtils.packBytes( final int aValue )", "testcase": false, "constructor": false}, {"identifier": "reverseBits", "parameters": "( final int aValue, final int aBitCount )", "modifiers": "public static", "return": "int", "signature": "int reverseBits( final int aValue, final int aBitCount )", "full_signature": "public static int reverseBits( final int aValue, final int aBitCount )", "class_method_signature": "NumberUtils.reverseBits( final int aValue, final int aBitCount )", "testcase": false, "constructor": false}, {"identifier": "safeParseInt", "parameters": "( final String aText )", "modifiers": "public static", "return": "int", "signature": "int safeParseInt( final String aText )", "full_signature": "public static int safeParseInt( final String aText )", "class_method_signature": "NumberUtils.safeParseInt( final String aText )", "testcase": false, "constructor": false}, {"identifier": "safeParseInt", "parameters": "( final String aText, final int aDefault )", "modifiers": "public static", "return": "int", "signature": "int safeParseInt( final String aText, final int aDefault )", "full_signature": "public static int safeParseInt( final String aText, final int aDefault )", "class_method_signature": "NumberUtils.safeParseInt( final String aText, final int aDefault )", "testcase": false, "constructor": false}, {"identifier": "safeParseLong", "parameters": "( final String aText )", "modifiers": "public static", "return": "long", "signature": "long safeParseLong( final String aText )", "full_signature": "public static long safeParseLong( final String aText )", "class_method_signature": "NumberUtils.safeParseLong( final String aText )", "testcase": false, "constructor": false}, {"identifier": "safeParseLong", "parameters": "( final String aText, final long aDefault )", "modifiers": "public static", "return": "long", "signature": "long safeParseLong( final String aText, final long aDefault )", "full_signature": "public static long safeParseLong( final String aText, final long aDefault )", "class_method_signature": "NumberUtils.safeParseLong( final String aText, final long aDefault )", "testcase": false, "constructor": false}, {"identifier": "smartParseInt", "parameters": "( final String aText )", "modifiers": "public static", "return": "int", "signature": "int smartParseInt( final String aText )", "full_signature": "public static int smartParseInt( final String aText )", "class_method_signature": "NumberUtils.smartParseInt( final String aText )", "testcase": false, "constructor": false}, {"identifier": "smartParseInt", "parameters": "( final String aText, final int aDefault )", "modifiers": "public static", "return": "int", "signature": "int smartParseInt( final String aText, final int aDefault )", "full_signature": "public static int smartParseInt( final String aText, final int aDefault )", "class_method_signature": "NumberUtils.smartParseInt( final String aText, final int aDefault )", "testcase": false, "constructor": false}, {"identifier": "smartParseInt", "parameters": "( final String aText, final UnitDefinition aUnitDefinition )", "modifiers": "public static", "return": "int", "signature": "int smartParseInt( final String aText, final UnitDefinition aUnitDefinition )", "full_signature": "public static int smartParseInt( final String aText, final UnitDefinition aUnitDefinition )", "class_method_signature": "NumberUtils.smartParseInt( final String aText, final UnitDefinition aUnitDefinition )", "testcase": false, "constructor": false}, {"identifier": "smartParseInt", "parameters": "( final String aText, final UnitDefinition aUnitDefinition, final int aDefault )", "modifiers": "public static", "return": "int", "signature": "int smartParseInt( final String aText, final UnitDefinition aUnitDefinition, final int aDefault )", "full_signature": "public static int smartParseInt( final String aText, final UnitDefinition aUnitDefinition, final int aDefault )", "class_method_signature": "NumberUtils.smartParseInt( final String aText, final UnitDefinition aUnitDefinition, final int aDefault )", "testcase": false, "constructor": false}, {"identifier": "parseUnit", "parameters": "( final String aUnit, final UnitDefinition aUnitDefinition )", "modifiers": "private static", "return": "long", "signature": "long parseUnit( final String aUnit, final UnitDefinition aUnitDefinition )", "full_signature": "private static long parseUnit( final String aUnit, final UnitDefinition aUnitDefinition )", "class_method_signature": "NumberUtils.parseUnit( final String aUnit, final UnitDefinition aUnitDefinition )", "testcase": false, "constructor": false}], "file": "util/src/main/java/nl/lxtreme/ols/util/NumberUtils.java"}, "focal_method": {"identifier": "getPercentage", "parameters": "( final int aValue, final int aRange )", "modifiers": "public static", "return": "int", "body": "public static int getPercentage( final int aValue, final int aRange )\n  {\n    double value = 0.0;\n    if ( aRange != 0 )\n    {\n      value = aValue * 100.0 / aRange;\n    }\n\n    return ( int )Math.max( 0.0, Math.min( 100.0, value ) );\n  }", "signature": "int getPercentage( final int aValue, final int aRange )", "full_signature": "public static int getPercentage( final int aValue, final int aRange )", "class_method_signature": "NumberUtils.getPercentage( final int aValue, final int aRange )", "testcase": false, "constructor": false, "invocations": ["max", "min"]}, "repository": {"repo_id": 782257, "url": "https://github.com/jawi/ols", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 286, "size": 40548, "license": "licensed"}}