{"test_class": {"identifier": "ProjectManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProjectManagerImpl projectManager;", "modifier": "private", "type": "ProjectManagerImpl", "declarator": "projectManager", "var_name": "projectManager"}], "file": "client.project/src/test/java/nl/lxtreme/ols/client/project/impl/ProjectManagerImplTest.java"}, "test_case": {"identifier": "testLoadNullProjectFail", "parameters": "()", "modifiers": "@Test( expected = IllegalArgumentException.class ) public", "return": "void", "body": "@Test( expected = IllegalArgumentException.class )\n  public void testLoadNullProjectFail() throws IOException\n  {\n    this.projectManager.loadProject( null );\n  }", "signature": "void testLoadNullProjectFail()", "full_signature": "@Test( expected = IllegalArgumentException.class ) public void testLoadNullProjectFail()", "class_method_signature": "ProjectManagerImplTest.testLoadNullProjectFail()", "testcase": true, "constructor": false, "invocations": ["loadProject"]}, "focal_class": {"identifier": "ProjectManagerImpl", "superclass": "", "interfaces": "implements PropertyChangeListener, ProjectManager, ProjectProperties", "fields": [{"original_string": "private static final String FILENAME_PROJECT_METADATA = \"ols.project\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_PROJECT_METADATA = \"ols.project\"", "var_name": "FILENAME_PROJECT_METADATA"}, {"original_string": "private static final String FILENAME_CHANNEL_LABELS = \"channel.labels\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_CHANNEL_LABELS = \"channel.labels\"", "var_name": "FILENAME_CHANNEL_LABELS"}, {"original_string": "private static final String FILENAME_PROJECT_SETTINGS = \"settings/\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_PROJECT_SETTINGS = \"settings/\"", "var_name": "FILENAME_PROJECT_SETTINGS"}, {"original_string": "private static final String FILENAME_CAPTURE_RESULTS = \"data.ols\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_CAPTURE_RESULTS = \"data.ols\"", "var_name": "FILENAME_CAPTURE_RESULTS"}, {"original_string": "private volatile HostProperties hostProperties;", "modifier": "private volatile", "type": "HostProperties", "declarator": "hostProperties", "var_name": "hostProperties"}, {"original_string": "private final PropertyChangeSupport propertyChangeSupport;", "modifier": "private final", "type": "PropertyChangeSupport", "declarator": "propertyChangeSupport", "var_name": "propertyChangeSupport"}, {"original_string": "private ProjectImpl project;", "modifier": "private", "type": "ProjectImpl", "declarator": "project", "var_name": "project"}], "methods": [{"identifier": "ProjectManagerImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProjectManagerImpl()", "full_signature": "public  ProjectManagerImpl()", "class_method_signature": "ProjectManagerImpl.ProjectManagerImpl()", "testcase": false, "constructor": true}, {"identifier": "addPropertyChangeListener", "parameters": "( final PropertyChangeListener aListener )", "modifiers": "public", "return": "void", "signature": "void addPropertyChangeListener( final PropertyChangeListener aListener )", "full_signature": "public void addPropertyChangeListener( final PropertyChangeListener aListener )", "class_method_signature": "ProjectManagerImpl.addPropertyChangeListener( final PropertyChangeListener aListener )", "testcase": false, "constructor": false}, {"identifier": "createNewProject", "parameters": "()", "modifiers": "public", "return": "Project", "signature": "Project createNewProject()", "full_signature": "public Project createNewProject()", "class_method_signature": "ProjectManagerImpl.createNewProject()", "testcase": false, "constructor": false}, {"identifier": "createTemporaryProject", "parameters": "()", "modifiers": "public", "return": "Project", "signature": "Project createTemporaryProject()", "full_signature": "public Project createTemporaryProject()", "class_method_signature": "ProjectManagerImpl.createTemporaryProject()", "testcase": false, "constructor": false}, {"identifier": "getCurrentProject", "parameters": "()", "modifiers": "@Override public", "return": "Project", "signature": "Project getCurrentProject()", "full_signature": "@Override public Project getCurrentProject()", "class_method_signature": "ProjectManagerImpl.getCurrentProject()", "testcase": false, "constructor": false}, {"identifier": "loadProject", "parameters": "( final InputStream aInput )", "modifiers": "@Override public", "return": "void", "signature": "void loadProject( final InputStream aInput )", "full_signature": "@Override public void loadProject( final InputStream aInput )", "class_method_signature": "ProjectManagerImpl.loadProject( final InputStream aInput )", "testcase": false, "constructor": false}, {"identifier": "propertyChange", "parameters": "( final PropertyChangeEvent aEvent )", "modifiers": "@Override public", "return": "void", "signature": "void propertyChange( final PropertyChangeEvent aEvent )", "full_signature": "@Override public void propertyChange( final PropertyChangeEvent aEvent )", "class_method_signature": "ProjectManagerImpl.propertyChange( final PropertyChangeEvent aEvent )", "testcase": false, "constructor": false}, {"identifier": "removePropertyChangeListener", "parameters": "( final PropertyChangeListener aListener )", "modifiers": "public", "return": "void", "signature": "void removePropertyChangeListener( final PropertyChangeListener aListener )", "full_signature": "public void removePropertyChangeListener( final PropertyChangeListener aListener )", "class_method_signature": "ProjectManagerImpl.removePropertyChangeListener( final PropertyChangeListener aListener )", "testcase": false, "constructor": false}, {"identifier": "saveProject", "parameters": "( final OutputStream aOutput )", "modifiers": "@Override public", "return": "void", "signature": "void saveProject( final OutputStream aOutput )", "full_signature": "@Override public void saveProject( final OutputStream aOutput )", "class_method_signature": "ProjectManagerImpl.saveProject( final OutputStream aOutput )", "testcase": false, "constructor": false}, {"identifier": "setHostProperties", "parameters": "( final HostProperties aHostProperties )", "modifiers": "public", "return": "void", "signature": "void setHostProperties( final HostProperties aHostProperties )", "full_signature": "public void setHostProperties( final HostProperties aHostProperties )", "class_method_signature": "ProjectManagerImpl.setHostProperties( final HostProperties aHostProperties )", "testcase": false, "constructor": false}, {"identifier": "loadCapturedResults", "parameters": "( final Project aProject, final ZipInputStream aZipIS )", "modifiers": "protected", "return": "void", "signature": "void loadCapturedResults( final Project aProject, final ZipInputStream aZipIS )", "full_signature": "protected void loadCapturedResults( final Project aProject, final ZipInputStream aZipIS )", "class_method_signature": "ProjectManagerImpl.loadCapturedResults( final Project aProject, final ZipInputStream aZipIS )", "testcase": false, "constructor": false}, {"identifier": "loadChannelLabels", "parameters": "( final ZipInputStream aZipIS )", "modifiers": "protected", "return": "List<String>", "signature": "List<String> loadChannelLabels( final ZipInputStream aZipIS )", "full_signature": "protected List<String> loadChannelLabels( final ZipInputStream aZipIS )", "class_method_signature": "ProjectManagerImpl.loadChannelLabels( final ZipInputStream aZipIS )", "testcase": false, "constructor": false}, {"identifier": "loadProjectMetadata", "parameters": "( final Project aProject, final ZipInputStream aZipIS )", "modifiers": "protected", "return": "void", "signature": "void loadProjectMetadata( final Project aProject, final ZipInputStream aZipIS )", "full_signature": "protected void loadProjectMetadata( final Project aProject, final ZipInputStream aZipIS )", "class_method_signature": "ProjectManagerImpl.loadProjectMetadata( final Project aProject, final ZipInputStream aZipIS )", "testcase": false, "constructor": false}, {"identifier": "loadProjectSettings", "parameters": "( final ProjectImpl aProject, final String aUserSettingsName,\n      final ZipInputStream aZipIS )", "modifiers": "protected", "return": "void", "signature": "void loadProjectSettings( final ProjectImpl aProject, final String aUserSettingsName,\n      final ZipInputStream aZipIS )", "full_signature": "protected void loadProjectSettings( final ProjectImpl aProject, final String aUserSettingsName,\n      final ZipInputStream aZipIS )", "class_method_signature": "ProjectManagerImpl.loadProjectSettings( final ProjectImpl aProject, final String aUserSettingsName,\n      final ZipInputStream aZipIS )", "testcase": false, "constructor": false}, {"identifier": "storeCapturedResults", "parameters": "( final Project aProject, final ZipOutputStream aZipOS )", "modifiers": "protected", "return": "void", "signature": "void storeCapturedResults( final Project aProject, final ZipOutputStream aZipOS )", "full_signature": "protected void storeCapturedResults( final Project aProject, final ZipOutputStream aZipOS )", "class_method_signature": "ProjectManagerImpl.storeCapturedResults( final Project aProject, final ZipOutputStream aZipOS )", "testcase": false, "constructor": false}, {"identifier": "storeChannelLabels", "parameters": "( final DataSet aDataSet, final ZipOutputStream aZipOS )", "modifiers": "protected", "return": "void", "signature": "void storeChannelLabels( final DataSet aDataSet, final ZipOutputStream aZipOS )", "full_signature": "protected void storeChannelLabels( final DataSet aDataSet, final ZipOutputStream aZipOS )", "class_method_signature": "ProjectManagerImpl.storeChannelLabels( final DataSet aDataSet, final ZipOutputStream aZipOS )", "testcase": false, "constructor": false}, {"identifier": "storeProjectMetadata", "parameters": "( final Project aProject, final ZipOutputStream aZipOS )", "modifiers": "protected", "return": "void", "signature": "void storeProjectMetadata( final Project aProject, final ZipOutputStream aZipOS )", "full_signature": "protected void storeProjectMetadata( final Project aProject, final ZipOutputStream aZipOS )", "class_method_signature": "ProjectManagerImpl.storeProjectMetadata( final Project aProject, final ZipOutputStream aZipOS )", "testcase": false, "constructor": false}, {"identifier": "storeProjectSettings", "parameters": "( final ProjectImpl aProject, final ZipOutputStream aZipOS )", "modifiers": "protected", "return": "void", "signature": "void storeProjectSettings( final ProjectImpl aProject, final ZipOutputStream aZipOS )", "full_signature": "protected void storeProjectSettings( final ProjectImpl aProject, final ZipOutputStream aZipOS )", "class_method_signature": "ProjectManagerImpl.storeProjectSettings( final ProjectImpl aProject, final ZipOutputStream aZipOS )", "testcase": false, "constructor": false}, {"identifier": "copyPropertyChangeListeners", "parameters": "( final ProjectImpl aSource, final ProjectImpl aTarget )", "modifiers": "private", "return": "void", "signature": "void copyPropertyChangeListeners( final ProjectImpl aSource, final ProjectImpl aTarget )", "full_signature": "private void copyPropertyChangeListeners( final ProjectImpl aSource, final ProjectImpl aTarget )", "class_method_signature": "ProjectManagerImpl.copyPropertyChangeListeners( final ProjectImpl aSource, final ProjectImpl aTarget )", "testcase": false, "constructor": false}, {"identifier": "setProject", "parameters": "( final ProjectImpl aProject )", "modifiers": "private", "return": "void", "signature": "void setProject( final ProjectImpl aProject )", "full_signature": "private void setProject( final ProjectImpl aProject )", "class_method_signature": "ProjectManagerImpl.setProject( final ProjectImpl aProject )", "testcase": false, "constructor": false}], "file": "client.project/src/main/java/nl/lxtreme/ols/client/project/impl/ProjectManagerImpl.java"}, "focal_method": {"identifier": "loadProject", "parameters": "( final InputStream aInput )", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void loadProject( final InputStream aInput ) throws IOException\n  {\n    if ( aInput == null )\n    {\n      throw new IllegalArgumentException( \"Input stream cannot be null!\" );\n    }\n\n    final BufferedInputStream in = new BufferedInputStream( aInput );\n    final ZipInputStream zipIS = new ZipInputStream( in );\n\n    final ProjectImpl newProject = new ProjectImpl();\n    // Make sure listeners retrieve the proper events...\n    copyPropertyChangeListeners( this.project, newProject );\n\n    List<String> labels = null;\n\n    try\n    {\n      ZipEntry ze = null;\n      boolean entriesSeen = false;\n      while ( ( ze = zipIS.getNextEntry() ) != null )\n      {\n        final String name = ze.getName();\n        if ( FILENAME_PROJECT_METADATA.equals( name ) )\n        {\n          loadProjectMetadata( newProject, zipIS );\n          entriesSeen = true;\n        }\n        else if ( FILENAME_CHANNEL_LABELS.equals( name ) )\n        {\n          labels = loadChannelLabels( zipIS );\n          entriesSeen = true;\n        }\n        else if ( FILENAME_CAPTURE_RESULTS.equals( name ) )\n        {\n          loadCapturedResults( newProject, zipIS );\n          entriesSeen = true;\n        }\n        else if ( name.startsWith( FILENAME_PROJECT_SETTINGS ) )\n        {\n          final String userSettingsName = name.substring( FILENAME_PROJECT_SETTINGS.length() );\n          loadProjectSettings( newProject, userSettingsName, zipIS );\n          entriesSeen = true;\n        }\n\n        zipIS.closeEntry();\n      }\n\n      if ( !entriesSeen )\n      {\n        throw new IOException( \"Invalid project file!\" );\n      }\n\n      // Merge the channel labels with the channel-data in the project's data\n      // set; this is not the nicest way of doing this, but we otherwise have to\n      // break our project file-format, which is not done at the moment...\n      newProject.getDataSet().mergeChannelLabels( labels );\n\n      // Mark the project as no longer changed...\n      newProject.setChanged( false );\n\n      // Overwrite the main project...\n      setProject( newProject );\n    }\n    finally\n    {\n      HostUtils.closeResource( zipIS );\n    }\n  }", "signature": "void loadProject( final InputStream aInput )", "full_signature": "@Override public void loadProject( final InputStream aInput )", "class_method_signature": "ProjectManagerImpl.loadProject( final InputStream aInput )", "testcase": false, "constructor": false, "invocations": ["copyPropertyChangeListeners", "getNextEntry", "getName", "equals", "loadProjectMetadata", "equals", "loadChannelLabels", "equals", "loadCapturedResults", "startsWith", "substring", "length", "loadProjectSettings", "closeEntry", "mergeChannelLabels", "getDataSet", "setChanged", "setProject", "closeResource"]}, "repository": {"repo_id": 782257, "url": "https://github.com/jawi/ols", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 286, "size": 40548, "license": "licensed"}}