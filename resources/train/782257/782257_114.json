{"test_class": {"identifier": "BackgroundTaskExecutionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int THROW_EXCEPTION = -1;", "modifier": "private static final", "type": "int", "declarator": "THROW_EXCEPTION = -1", "var_name": "THROW_EXCEPTION"}, {"original_string": "private static final int INFINITE_BLOCKING_CALL = -2;", "modifier": "private static final", "type": "int", "declarator": "INFINITE_BLOCKING_CALL = -2", "var_name": "INFINITE_BLOCKING_CALL"}, {"original_string": "private static final int INTERRUPTABLE_BLOCKING_CALL = -3;", "modifier": "private static final", "type": "int", "declarator": "INTERRUPTABLE_BLOCKING_CALL = -3", "var_name": "INTERRUPTABLE_BLOCKING_CALL"}, {"original_string": "private TaskStatusListener mockTaskStatusListener;", "modifier": "private", "type": "TaskStatusListener", "declarator": "mockTaskStatusListener", "var_name": "mockTaskStatusListener"}, {"original_string": "private BackgroundTaskExecutionService service;", "modifier": "private", "type": "BackgroundTaskExecutionService", "declarator": "service", "var_name": "service"}], "file": "service.taskexecution/src/test/java/nl/lxtreme/ols/task/execution/BackgroundTaskExecutionServiceTest.java"}, "test_case": {"identifier": "testExecuteNullToolArgumentFail", "parameters": "()", "modifiers": "@Test( expected = IllegalArgumentException.class ) public", "return": "void", "body": "@Test( expected = IllegalArgumentException.class )\n  public void testExecuteNullToolArgumentFail() throws Exception\n  {\n    this.service.execute( null );\n  }", "signature": "void testExecuteNullToolArgumentFail()", "full_signature": "@Test( expected = IllegalArgumentException.class ) public void testExecuteNullToolArgumentFail()", "class_method_signature": "BackgroundTaskExecutionServiceTest.testExecuteNullToolArgumentFail()", "testcase": true, "constructor": false, "invocations": ["execute"]}, "focal_class": {"identifier": "BackgroundTaskExecutionService", "superclass": "", "interfaces": "implements TaskExecutionService", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger( BackgroundTaskExecutionService.class.getName() );", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger( BackgroundTaskExecutionService.class.getName() )", "var_name": "LOG"}, {"original_string": "private static final int POOL_SIZE = 5;", "modifier": "private static final", "type": "int", "declarator": "POOL_SIZE = 5", "var_name": "POOL_SIZE"}, {"original_string": "private final TaskStatusListener taskStatusListener;", "modifier": "private final", "type": "TaskStatusListener", "declarator": "taskStatusListener", "var_name": "taskStatusListener"}, {"original_string": "final ExecutorService executorService;", "modifier": "final", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}], "methods": [{"identifier": "BackgroundTaskExecutionService", "parameters": "( final TaskStatusListener aTaskStatusListener )", "modifiers": "public", "return": "", "signature": " BackgroundTaskExecutionService( final TaskStatusListener aTaskStatusListener )", "full_signature": "public  BackgroundTaskExecutionService( final TaskStatusListener aTaskStatusListener )", "class_method_signature": "BackgroundTaskExecutionService.BackgroundTaskExecutionService( final TaskStatusListener aTaskStatusListener )", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "BackgroundTaskExecutionService.close()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "( final Task<RESULT_TYPE> aTask )", "modifiers": "@Override public", "return": "Future<RESULT_TYPE>", "signature": "Future<RESULT_TYPE> execute( final Task<RESULT_TYPE> aTask )", "full_signature": "@Override public Future<RESULT_TYPE> execute( final Task<RESULT_TYPE> aTask )", "class_method_signature": "BackgroundTaskExecutionService.execute( final Task<RESULT_TYPE> aTask )", "testcase": false, "constructor": false}], "file": "service.taskexecution/src/main/java/nl/lxtreme/ols/task/execution/BackgroundTaskExecutionService.java"}, "focal_method": {"identifier": "execute", "parameters": "( final Task<RESULT_TYPE> aTask )", "modifiers": "@Override public", "return": "Future<RESULT_TYPE>", "body": "@Override\n  public <RESULT_TYPE> Future<RESULT_TYPE> execute( final Task<RESULT_TYPE> aTask )\n  {\n    if ( aTask == null )\n    {\n      throw new IllegalArgumentException( \"Parameter Task cannot be null!\" );\n    }\n\n    final Callable<RESULT_TYPE> task = new Callable<RESULT_TYPE>()\n    {\n      private final TaskStatusListener tsl = BackgroundTaskExecutionService.this.taskStatusListener;\n\n      /**\n       * {@inheritDoc}\n       */\n      @Override\n      public RESULT_TYPE call() throws Exception\n      {\n        this.tsl.taskStarted( aTask );\n\n        try\n        {\n          RESULT_TYPE result = aTask.call();\n          this.tsl.taskEnded( aTask, result );\n          return result;\n        }\n        catch ( Exception exception )\n        {\n          LOG.log( Level.FINE, \"Task execution failed!\", exception );\n          this.tsl.taskFailed( aTask, exception );\n          throw exception;\n        }\n      }\n    };\n\n    return this.executorService.submit( task );\n  }", "signature": "Future<RESULT_TYPE> execute( final Task<RESULT_TYPE> aTask )", "full_signature": "@Override public Future<RESULT_TYPE> execute( final Task<RESULT_TYPE> aTask )", "class_method_signature": "BackgroundTaskExecutionService.execute( final Task<RESULT_TYPE> aTask )", "testcase": false, "constructor": false, "invocations": ["taskStarted", "call", "taskEnded", "log", "taskFailed", "submit"]}, "repository": {"repo_id": 782257, "url": "https://github.com/jawi/ols", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 286, "size": 40548, "license": "licensed"}}