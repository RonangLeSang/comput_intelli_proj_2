{"test_class": {"identifier": "TestRangeSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Set<Long> set;", "modifier": "private", "type": "Set<Long>", "declarator": "set", "var_name": "set"}], "file": "collections/src/test/java/com/facebook/collections/TestRangeSet.java"}, "test_case": {"identifier": "testIllegalIterator", "parameters": "()", "modifiers": "@Test(groups = \"fast\", expectedExceptions = NoSuchElementException.class) public", "return": "void", "body": "@Test(groups = \"fast\", expectedExceptions = NoSuchElementException.class)\n  public void testIllegalIterator() throws Exception {\n    Iterator<Long> iter;\n\n    iter = set.iterator();\n    Assert.assertFalse(iter.hasNext());\n    iter.next();\n  }", "signature": "void testIllegalIterator()", "full_signature": "@Test(groups = \"fast\", expectedExceptions = NoSuchElementException.class) public void testIllegalIterator()", "class_method_signature": "TestRangeSet.testIllegalIterator()", "testcase": true, "constructor": false, "invocations": ["iterator", "assertFalse", "hasNext", "next"]}, "focal_class": {"identifier": "RangeSet", "superclass": "extends AbstractSet<Long>", "interfaces": "implements Set<Long>", "fields": [{"original_string": "private final NavigableMap<Long, LongSegment> map = new TreeMap<>();", "modifier": "private final", "type": "NavigableMap<Long, LongSegment>", "declarator": "map = new TreeMap<>()", "var_name": "map"}, {"original_string": "private int size = 0;", "modifier": "private", "type": "int", "declarator": "size = 0", "var_name": "size"}], "methods": [{"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "RangeSet.size()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "RangeSet.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Long>", "signature": "Iterator<Long> iterator()", "full_signature": "@Override public Iterator<Long> iterator()", "class_method_signature": "RangeSet.iterator()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Long aLong)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Long aLong)", "full_signature": "@Override public boolean add(Long aLong)", "class_method_signature": "RangeSet.add(Long aLong)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "RangeSet.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> c)", "full_signature": "@Override public boolean removeAll(Collection<?> c)", "class_method_signature": "RangeSet.removeAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "RangeSet.clear()", "testcase": false, "constructor": false}], "file": "collections/src/main/java/com/facebook/collections/RangeSet.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Long>", "body": "@Override\n  public Iterator<Long> iterator() {\n    return new Iterator<Long>() {\n      // Get Segments in ascending order\n      private final Iterator<LongSegment> segmentIterator = map.values().iterator();\n      private Iterator<Long> longIterator =\n          segmentIterator.hasNext() ? segmentIterator.next().iterator() : null;\n\n      @Override\n      public boolean hasNext() {\n        return longIterator != null && longIterator.hasNext();\n      }\n\n      @Override\n      public Long next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        Long ret = longIterator.next();\n        if (!longIterator.hasNext()) {\n          longIterator = segmentIterator.hasNext() ? segmentIterator.next().iterator() : null;\n        }\n        return ret;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException(\"Iterator does not support remove\");\n      }\n    };\n  }", "signature": "Iterator<Long> iterator()", "full_signature": "@Override public Iterator<Long> iterator()", "class_method_signature": "RangeSet.iterator()", "testcase": false, "constructor": false, "invocations": ["iterator", "values", "hasNext", "iterator", "next", "hasNext", "hasNext", "next", "hasNext", "hasNext", "iterator", "next"]}, "repository": {"repo_id": 5122021, "url": "https://github.com/facebookarchive/jcommon", "language": "Java", "is_fork": false, "fork_count": 226, "stargazer_count": 670, "size": 7081, "license": "licensed"}}