{"test_class": {"identifier": "TestAsyncXCommandExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_TYPE = \"test\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TYPE = \"test\"", "var_name": "DEFAULT_TYPE"}, {"original_string": "private static final int DEFAULT_MAX_ACTIVE_COMMANDS = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_ACTIVE_COMMANDS = 5", "var_name": "DEFAULT_MAX_ACTIVE_COMMANDS"}, {"original_string": "private static final boolean DEFAULT_ENABLE_CONCURRENCY_CHECK = true;", "modifier": "private static final", "type": "boolean", "declarator": "DEFAULT_ENABLE_CONCURRENCY_CHECK = true", "var_name": "DEFAULT_ENABLE_CONCURRENCY_CHECK"}, {"original_string": "private static final long DEFAULT_MAXWAIT = 30_000;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_MAXWAIT = 30_000", "var_name": "DEFAULT_MAXWAIT"}, {"original_string": "private static final int TEST_PRIORITIES = 5;", "modifier": "private static final", "type": "int", "declarator": "TEST_PRIORITIES = 5", "var_name": "TEST_PRIORITIES"}, {"original_string": "private static final int MAX_PRIORITY = TEST_PRIORITIES - 1;", "modifier": "private static final", "type": "int", "declarator": "MAX_PRIORITY = TEST_PRIORITIES - 1", "var_name": "MAX_PRIORITY"}, {"original_string": "private static final int AWAIT_TERMINATION_TIMEOUT_SECONDS = 1;", "modifier": "private static final", "type": "int", "declarator": "AWAIT_TERMINATION_TIMEOUT_SECONDS = 1", "var_name": "AWAIT_TERMINATION_TIMEOUT_SECONDS"}, {"original_string": "@Mock\n    private ThreadPoolExecutor executor;", "modifier": "@Mock\n    private", "type": "ThreadPoolExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Mock\n    private ScheduledThreadPoolExecutor scheduledExecutor;", "modifier": "@Mock\n    private", "type": "ScheduledThreadPoolExecutor", "declarator": "scheduledExecutor", "var_name": "scheduledExecutor"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private CallableWrapper<?> callableWrapper;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "CallableWrapper<?>", "declarator": "callableWrapper", "var_name": "callableWrapper"}, {"original_string": "@Mock\n    private CallableQueueService callableQueueService;", "modifier": "@Mock\n    private", "type": "CallableQueueService", "declarator": "callableQueueService", "var_name": "callableQueueService"}, {"original_string": "private PriorityBlockingQueue<CallableWrapper<?>> priorityBlockingQueue;", "modifier": "private", "type": "PriorityBlockingQueue<CallableWrapper<?>>", "declarator": "priorityBlockingQueue", "var_name": "priorityBlockingQueue"}, {"original_string": "private BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>> delayQueue;", "modifier": "private", "type": "BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>>", "declarator": "delayQueue", "var_name": "delayQueue"}, {"original_string": "private ConcurrentHashMap<String, Set<CallableWrapper<?>>> pendingCommandsPerType;", "modifier": "private", "type": "ConcurrentHashMap<String, Set<CallableWrapper<?>>>", "declarator": "pendingCommandsPerType", "var_name": "pendingCommandsPerType"}, {"original_string": "private AtomicInteger activeCommands;", "modifier": "private", "type": "AtomicInteger", "declarator": "activeCommands", "var_name": "activeCommands"}, {"original_string": "private AsyncXCommandExecutor asyncExecutor;", "modifier": "private", "type": "AsyncXCommandExecutor", "declarator": "asyncExecutor", "var_name": "asyncExecutor"}], "file": "core/src/test/java/org/apache/oozie/service/TestAsyncXCommandExecutor.java"}, "test_case": {"identifier": "testQueueDump", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueueDump() {\n        CallableWrapper<?> pendingCallable = mock(CallableWrapper.class);\n        CallableWrapper<?> waitingCallable = mock(CallableWrapper.class);\n        ScheduledXCallable delayedXCallable = mock(ScheduledXCallable.class);\n        @SuppressWarnings(\"unchecked\")\n        AccessibleRunnableScheduledFuture<ScheduledXCallable> asrf = mock(AccessibleRunnableScheduledFuture.class);\n        Mockito.<CallableWrapper<?>>when(delayedXCallable.getCallableWrapper()).thenReturn(waitingCallable);\n        when(asrf.getTask()).thenReturn(delayedXCallable);\n        when(pendingCallable.toString()).thenReturn(\"pendingCallable\");\n        when(waitingCallable.toString()).thenReturn(\"waitingCallable\");\n        when(callableWrapper.toString()).thenReturn(\"callableWrapper\");\n\n        priorityBlockingQueue.add(callableWrapper);\n        delayQueue.add(asrf);\n        pendingCommandsPerType.put(DEFAULT_TYPE, Sets.newHashSet(pendingCallable));\n\n        List<String> queueDump = asyncExecutor.getQueueDump();\n        assertEquals(\"Size\", 3, queueDump.size());\n        assertTrue(\"PendingCallable not found\", queueDump.contains(\"pendingCallable\"));\n        assertTrue(\"WaitingCallable not found\", queueDump.contains(\"waitingCallable\"));\n        assertTrue(\"CallableWrapper not found\", queueDump.contains(\"callableWrapper\"));\n    }", "signature": "void testQueueDump()", "full_signature": "@Test public void testQueueDump()", "class_method_signature": "TestAsyncXCommandExecutor.testQueueDump()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "getCallableWrapper", "thenReturn", "when", "getTask", "thenReturn", "when", "toString", "thenReturn", "when", "toString", "thenReturn", "when", "toString", "add", "add", "put", "newHashSet", "getQueueDump", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "AsyncXCommandExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MIN_PRIORITY = 0;", "modifier": "public static final", "type": "int", "declarator": "MIN_PRIORITY = 0", "var_name": "MIN_PRIORITY"}, {"original_string": "public static final long ANTI_STARVATION_INTERVAL = 500;", "modifier": "public static final", "type": "long", "declarator": "ANTI_STARVATION_INTERVAL = 500", "var_name": "ANTI_STARVATION_INTERVAL"}, {"original_string": "private static XLog log = XLog.getLog(AsyncXCommandExecutor.class);", "modifier": "private static", "type": "XLog", "declarator": "log = XLog.getLog(AsyncXCommandExecutor.class)", "var_name": "log"}, {"original_string": "private final ThreadPoolExecutor executor;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final ScheduledThreadPoolExecutor scheduledExecutor;", "modifier": "private final", "type": "ScheduledThreadPoolExecutor", "declarator": "scheduledExecutor", "var_name": "scheduledExecutor"}, {"original_string": "private final boolean needConcurrencyCheck;", "modifier": "private final", "type": "boolean", "declarator": "needConcurrencyCheck", "var_name": "needConcurrencyCheck"}, {"original_string": "private final CallableQueueService callableQueueService;", "modifier": "private final", "type": "CallableQueueService", "declarator": "callableQueueService", "var_name": "callableQueueService"}, {"original_string": "private final AtomicInteger activeCommands;", "modifier": "private final", "type": "AtomicInteger", "declarator": "activeCommands", "var_name": "activeCommands"}, {"original_string": "private final long maxActiveCommands;", "modifier": "private final", "type": "long", "declarator": "maxActiveCommands", "var_name": "maxActiveCommands"}, {"original_string": "private final long maxWait;", "modifier": "private final", "type": "long", "declarator": "maxWait", "var_name": "maxWait"}, {"original_string": "private final long maxPriority;", "modifier": "private final", "type": "long", "declarator": "maxPriority", "var_name": "maxPriority"}, {"original_string": "private final int awaitTerminationTimeoutSeconds;", "modifier": "private final", "type": "int", "declarator": "awaitTerminationTimeoutSeconds", "var_name": "awaitTerminationTimeoutSeconds"}, {"original_string": "private final BlockingQueue<CallableWrapper<?>> priorityBlockingQueue;", "modifier": "private final", "type": "BlockingQueue<CallableWrapper<?>>", "declarator": "priorityBlockingQueue", "var_name": "priorityBlockingQueue"}, {"original_string": "private final BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>> delayWorkQueue;", "modifier": "private final", "type": "BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>>", "declarator": "delayWorkQueue", "var_name": "delayWorkQueue"}, {"original_string": "private final ConcurrentHashMap<String, Set<CallableWrapper<?>>> pendingCommandsPerType;", "modifier": "private final", "type": "ConcurrentHashMap<String, Set<CallableWrapper<?>>>", "declarator": "pendingCommandsPerType", "var_name": "pendingCommandsPerType"}, {"original_string": "private long lastAntiStarvationCheck = 0;", "modifier": "private", "type": "long", "declarator": "lastAntiStarvationCheck = 0", "var_name": "lastAntiStarvationCheck"}], "methods": [{"identifier": "AsyncXCommandExecutor", "parameters": "(int threads,\n            int delayedCallableThreads,\n            boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            long maxWait,\n            int priorities,\n            int awaitTerminationTimeoutSeconds)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @SuppressFBWarnings( value = \"SIC_INNER_SHOULD_BE_STATIC_ANON\", justification = \"Unnecessary to refactor innen classes defined here\") public", "return": "", "signature": " AsyncXCommandExecutor(int threads,\n            int delayedCallableThreads,\n            boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            long maxWait,\n            int priorities,\n            int awaitTerminationTimeoutSeconds)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @SuppressFBWarnings( value = \"SIC_INNER_SHOULD_BE_STATIC_ANON\", justification = \"Unnecessary to refactor innen classes defined here\") public  AsyncXCommandExecutor(int threads,\n            int delayedCallableThreads,\n            boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            long maxWait,\n            int priorities,\n            int awaitTerminationTimeoutSeconds)", "class_method_signature": "AsyncXCommandExecutor.AsyncXCommandExecutor(int threads,\n            int delayedCallableThreads,\n            boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            long maxWait,\n            int priorities,\n            int awaitTerminationTimeoutSeconds)", "testcase": false, "constructor": true}, {"identifier": "AsyncXCommandExecutor", "parameters": "(boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            ThreadPoolExecutor executor,\n            ScheduledThreadPoolExecutor scheduledExecutor,\n            PriorityBlockingQueue<CallableWrapper<?>> priorityBlockingQueue,\n            BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>> delayQueue,\n            ConcurrentHashMap<String, Set<CallableWrapper<?>>> pendingCommandsPerType,\n            AtomicInteger activeCommands,\n            long maxWait,\n            long priorities,\n            int awaitTerminationTimeoutSeconds)", "modifiers": "@VisibleForTesting", "return": "", "signature": " AsyncXCommandExecutor(boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            ThreadPoolExecutor executor,\n            ScheduledThreadPoolExecutor scheduledExecutor,\n            PriorityBlockingQueue<CallableWrapper<?>> priorityBlockingQueue,\n            BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>> delayQueue,\n            ConcurrentHashMap<String, Set<CallableWrapper<?>>> pendingCommandsPerType,\n            AtomicInteger activeCommands,\n            long maxWait,\n            long priorities,\n            int awaitTerminationTimeoutSeconds)", "full_signature": "@VisibleForTesting  AsyncXCommandExecutor(boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            ThreadPoolExecutor executor,\n            ScheduledThreadPoolExecutor scheduledExecutor,\n            PriorityBlockingQueue<CallableWrapper<?>> priorityBlockingQueue,\n            BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>> delayQueue,\n            ConcurrentHashMap<String, Set<CallableWrapper<?>>> pendingCommandsPerType,\n            AtomicInteger activeCommands,\n            long maxWait,\n            long priorities,\n            int awaitTerminationTimeoutSeconds)", "class_method_signature": "AsyncXCommandExecutor.AsyncXCommandExecutor(boolean needConcurrencyCheck,\n            CallableQueueService callableAccess,\n            long maxActiveCommands,\n            ThreadPoolExecutor executor,\n            ScheduledThreadPoolExecutor scheduledExecutor,\n            PriorityBlockingQueue<CallableWrapper<?>> priorityBlockingQueue,\n            BlockingQueue<AccessibleRunnableScheduledFuture<ScheduledXCallable>> delayQueue,\n            ConcurrentHashMap<String, Set<CallableWrapper<?>>> pendingCommandsPerType,\n            AtomicInteger activeCommands,\n            long maxWait,\n            long priorities,\n            int awaitTerminationTimeoutSeconds)", "testcase": false, "constructor": true}, {"identifier": "queue", "parameters": "(CallableWrapper<?> wrapper, boolean ignoreQueueSize)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean queue(CallableWrapper<?> wrapper, boolean ignoreQueueSize)", "full_signature": "public synchronized boolean queue(CallableWrapper<?> wrapper, boolean ignoreQueueSize)", "class_method_signature": "AsyncXCommandExecutor.queue(CallableWrapper<?> wrapper, boolean ignoreQueueSize)", "testcase": false, "constructor": false}, {"identifier": "handleConcurrencyExceeded", "parameters": "(CallableWrapper<?> command)", "modifiers": "public", "return": "void", "signature": "void handleConcurrencyExceeded(CallableWrapper<?> command)", "full_signature": "public void handleConcurrencyExceeded(CallableWrapper<?> command)", "class_method_signature": "AsyncXCommandExecutor.handleConcurrencyExceeded(CallableWrapper<?> command)", "testcase": false, "constructor": false}, {"identifier": "checkMaxConcurrency", "parameters": "(String type)", "modifiers": "public", "return": "void", "signature": "void checkMaxConcurrency(String type)", "full_signature": "public void checkMaxConcurrency(String type)", "class_method_signature": "AsyncXCommandExecutor.checkMaxConcurrency(String type)", "testcase": false, "constructor": false}, {"identifier": "commandFinished", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void commandFinished()", "full_signature": "public void commandFinished()", "class_method_signature": "AsyncXCommandExecutor.commandFinished()", "testcase": false, "constructor": false}, {"identifier": "getExecutorService", "parameters": "()", "modifiers": "public", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor getExecutorService()", "full_signature": "public ThreadPoolExecutor getExecutorService()", "class_method_signature": "AsyncXCommandExecutor.getExecutorService()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "AsyncXCommandExecutor.shutdown()", "testcase": false, "constructor": false}, {"identifier": "isShutDown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShutDown()", "full_signature": "public boolean isShutDown()", "class_method_signature": "AsyncXCommandExecutor.isShutDown()", "testcase": false, "constructor": false}, {"identifier": "isTerminated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTerminated()", "full_signature": "public boolean isTerminated()", "class_method_signature": "AsyncXCommandExecutor.isTerminated()", "testcase": false, "constructor": false}, {"identifier": "getQueueDump", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getQueueDump()", "full_signature": "public List<String> getQueueDump()", "class_method_signature": "AsyncXCommandExecutor.getQueueDump()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "AsyncXCommandExecutor.getSize()", "testcase": false, "constructor": false}, {"identifier": "shutdownExecutor", "parameters": "(ExecutorService executor, String name)", "modifiers": "private", "return": "void", "signature": "void shutdownExecutor(ExecutorService executor, String name)", "full_signature": "private void shutdownExecutor(ExecutorService executor, String name)", "class_method_signature": "AsyncXCommandExecutor.shutdownExecutor(ExecutorService executor, String name)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/oozie/service/AsyncXCommandExecutor.java"}, "focal_method": {"identifier": "getQueueDump", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> getQueueDump() {\n        List<CallableWrapper<?>> copyOfPending = new ArrayList<>(100);\n        List<String> queueDump = new ArrayList<>(100);\n\n        // Safe to iterate\n        for (Map.Entry<String, Set<CallableWrapper<?>>> entry : pendingCommandsPerType.entrySet()) {\n            Set<CallableWrapper<?>> pendingCommandsPerType = entry.getValue();\n            copyOfPending.addAll(pendingCommandsPerType);\n        }\n\n        // Safe to iterate\n        for (final CallableWrapper<?> wrapper : priorityBlockingQueue) {\n            queueDump.add(wrapper.toString());\n        }\n\n        // Safe to iterate\n        for (final AccessibleRunnableScheduledFuture<ScheduledXCallable> future : delayWorkQueue) {\n            ScheduledXCallable delayedXCallable = (ScheduledXCallable) future.getTask();\n            queueDump.add(delayedXCallable.getCallableWrapper().toString());\n        }\n\n        for (final CallableWrapper<?> wrapper : copyOfPending) {\n            queueDump.add(wrapper.toString());\n        }\n\n        return queueDump;\n    }", "signature": "List<String> getQueueDump()", "full_signature": "public List<String> getQueueDump()", "class_method_signature": "AsyncXCommandExecutor.getQueueDump()", "testcase": false, "constructor": false, "invocations": ["entrySet", "getValue", "addAll", "add", "toString", "getTask", "add", "toString", "getCallableWrapper", "add", "toString"]}, "repository": {"repo_id": 2383782, "url": "https://github.com/apache/oozie", "stars": 542, "created": "9/14/2011 7:00:10 AM +00:00", "updates": "2020-01-18T12:54:24+00:00", "fork": "False", "license": "licensed"}}