{"test_class": {"identifier": "TestECPolicyDisabler", "superclass": "", "interfaces": "", "fields": [], "file": "tools/src/test/java/org/apache/oozie/tools/TestECPolicyDisabler.java"}, "test_case": {"identifier": "testOkNotChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOkNotChanged() {\n        MockDistributedFileSystem fs = mock(MockDistributedFileSystem.class);\n        when(fs.getErasureCodingPolicy(any())).thenReturn(ReplicationPolicy.DEFAULT);\n        ECPolicyDisabler.Result result = ECPolicyDisabler.check(fs, null);\n        assertEquals(\"result is expected\", Result.ALREADY_SET, result);\n        verify(fs).getErasureCodingPolicy(any());\n        verifyNoMoreInteractions(fs);\n    }", "signature": "void testOkNotChanged()", "full_signature": "@Test public void testOkNotChanged()", "class_method_signature": "TestECPolicyDisabler.testOkNotChanged()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getErasureCodingPolicy", "any", "check", "assertEquals", "getErasureCodingPolicy", "verify", "any", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ECPolicyDisabler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GETREPLICATIONPOLICY_METHOD = \"getReplicationPolicy\";", "modifier": "private static final", "type": "String", "declarator": "GETREPLICATIONPOLICY_METHOD = \"getReplicationPolicy\"", "var_name": "GETREPLICATIONPOLICY_METHOD"}, {"original_string": "private static final String ERASURECODING_POLICIES_CLASS = \"org.apache.hadoop.hdfs.protocol.SystemErasureCodingPolicies\";", "modifier": "private static final", "type": "String", "declarator": "ERASURECODING_POLICIES_CLASS = \"org.apache.hadoop.hdfs.protocol.SystemErasureCodingPolicies\"", "var_name": "ERASURECODING_POLICIES_CLASS"}, {"original_string": "private static final String GETNAME_METHOD = \"getName\";", "modifier": "private static final", "type": "String", "declarator": "GETNAME_METHOD = \"getName\"", "var_name": "GETNAME_METHOD"}, {"original_string": "private static final String SETERASURECODINGPOLICY_METHOD = \"setErasureCodingPolicy\";", "modifier": "private static final", "type": "String", "declarator": "SETERASURECODINGPOLICY_METHOD = \"setErasureCodingPolicy\"", "var_name": "SETERASURECODINGPOLICY_METHOD"}, {"original_string": "private static final String GETERASURECODINGPOLICY_METHOD = \"getErasureCodingPolicy\";", "modifier": "private static final", "type": "String", "declarator": "GETERASURECODINGPOLICY_METHOD = \"getErasureCodingPolicy\"", "var_name": "GETERASURECODINGPOLICY_METHOD"}], "methods": [{"identifier": "tryDisableECPolicyForPath", "parameters": "(FileSystem fs, Path path)", "modifiers": "public static", "return": "void", "signature": "void tryDisableECPolicyForPath(FileSystem fs, Path path)", "full_signature": "public static void tryDisableECPolicyForPath(FileSystem fs, Path path)", "class_method_signature": "ECPolicyDisabler.tryDisableECPolicyForPath(FileSystem fs, Path path)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(FileSystem fs, Path path)", "modifiers": "static", "return": "Result", "signature": "Result check(FileSystem fs, Path path)", "full_signature": "static Result check(FileSystem fs, Path path)", "class_method_signature": "ECPolicyDisabler.check(FileSystem fs, Path path)", "testcase": false, "constructor": false}, {"identifier": "safeInvokeMethod", "parameters": "(Method method, Object instance, Object... args)", "modifiers": "private static", "return": "Pair<X, Result>", "signature": "Pair<X, Result> safeInvokeMethod(Method method, Object instance, Object... args)", "full_signature": "private static Pair<X, Result> safeInvokeMethod(Method method, Object instance, Object... args)", "class_method_signature": "ECPolicyDisabler.safeInvokeMethod(Method method, Object instance, Object... args)", "testcase": false, "constructor": false}, {"identifier": "unwrapRemote", "parameters": "(Throwable e)", "modifiers": "private static", "return": "RpcErrorCodeProto", "signature": "RpcErrorCodeProto unwrapRemote(Throwable e)", "full_signature": "private static RpcErrorCodeProto unwrapRemote(Throwable e)", "class_method_signature": "ECPolicyDisabler.unwrapRemote(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "supportsErasureCoding", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean supportsErasureCoding()", "full_signature": "private static boolean supportsErasureCoding()", "class_method_signature": "ECPolicyDisabler.supportsErasureCoding()", "testcase": false, "constructor": false}, {"identifier": "getReplicationPolicy", "parameters": "()", "modifiers": "private static", "return": "Object", "signature": "Object getReplicationPolicy()", "full_signature": "private static Object getReplicationPolicy()", "class_method_signature": "ECPolicyDisabler.getReplicationPolicy()", "testcase": false, "constructor": false}, {"identifier": "getECPoliciesClass", "parameters": "()", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> getECPoliciesClass()", "full_signature": "private static Class<?> getECPoliciesClass()", "class_method_signature": "ECPolicyDisabler.getECPoliciesClass()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Object object, String methodName)", "modifiers": "private static", "return": "Method", "signature": "Method getMethod(Object object, String methodName)", "full_signature": "private static Method getMethod(Object object, String methodName)", "class_method_signature": "ECPolicyDisabler.getMethod(Object object, String methodName)", "testcase": false, "constructor": false}, {"identifier": "invokeMethod", "parameters": "(Method m, Object instance, Object... args)", "modifiers": "private static", "return": "Object", "signature": "Object invokeMethod(Method m, Object instance, Object... args)", "full_signature": "private static Object invokeMethod(Method m, Object instance, Object... args)", "class_method_signature": "ECPolicyDisabler.invokeMethod(Method m, Object instance, Object... args)", "testcase": false, "constructor": false}], "file": "tools/src/main/java/org/apache/oozie/tools/ECPolicyDisabler.java"}, "focal_method": {"identifier": "check", "parameters": "(FileSystem fs, Path path)", "modifiers": "static", "return": "Result", "body": "static Result check(FileSystem fs, Path path) {\n        if (fs instanceof DistributedFileSystem && supportsErasureCoding()) {\n            System.out.println(\"Found Hadoop that supports Erasure Coding. Trying to disable Erasure Coding for path: \"+ path);\n            DistributedFileSystem dfs = (DistributedFileSystem) fs;\n            final Object replicationPolicy = getReplicationPolicy();\n            Method getErasureCodingPolicyMethod = getMethod(dfs, GETERASURECODINGPOLICY_METHOD);\n            final Pair<Object,Result> currentECPolicy = safeInvokeMethod(getErasureCodingPolicyMethod, dfs, path);\n            if (currentECPolicy.getRight() != null) {\n                return currentECPolicy.getRight();\n            }\n\n            if (currentECPolicy.getLeft() != replicationPolicy) {\n                Method setECPolicyMethod = getMethod(dfs, SETERASURECODINGPOLICY_METHOD);\n                Method policyGetNameMethod = getMethod(replicationPolicy, GETNAME_METHOD);\n\n                Pair<String,Result> pairName = safeInvokeMethod(policyGetNameMethod, replicationPolicy);\n                if (pairName.getRight() != null) {\n                    return pairName.getRight();\n                }\n\n                Pair<String,Result> result = safeInvokeMethod(setECPolicyMethod, dfs, path, pairName.getLeft());\n                if (result.getRight() != null) {\n                    return result.getRight();\n                }\n                return Result.DONE;\n            } else {\n                return Result.ALREADY_SET;\n            }\n        } else {\n            return Result.NOT_SUPPORTED;\n        }\n    }", "signature": "Result check(FileSystem fs, Path path)", "full_signature": "static Result check(FileSystem fs, Path path)", "class_method_signature": "ECPolicyDisabler.check(FileSystem fs, Path path)", "testcase": false, "constructor": false, "invocations": ["supportsErasureCoding", "println", "getReplicationPolicy", "getMethod", "safeInvokeMethod", "getRight", "getRight", "getLeft", "getMethod", "getMethod", "safeInvokeMethod", "getRight", "getRight", "safeInvokeMethod", "getLeft", "getRight", "getRight"]}, "repository": {"repo_id": 2383782, "url": "https://github.com/apache/oozie", "stars": 542, "created": "9/14/2011 7:00:10 AM +00:00", "updates": "2020-01-18T12:54:24+00:00", "fork": "False", "license": "licensed"}}