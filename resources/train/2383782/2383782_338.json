{"test_class": {"identifier": "TestShareLibService", "superclass": "extends XFsTestCase", "interfaces": "", "fields": [{"original_string": "private static final String HDFS_SCHEME_PREFIX = \"hdfs\";", "modifier": "private static final", "type": "String", "declarator": "HDFS_SCHEME_PREFIX = \"hdfs\"", "var_name": "HDFS_SCHEME_PREFIX"}, {"original_string": "private static final String TEST_HDFS_HOME = \"/user/test/\";", "modifier": "private static final", "type": "String", "declarator": "TEST_HDFS_HOME = \"/user/test/\"", "var_name": "TEST_HDFS_HOME"}, {"original_string": "private static final String TEST_MAPPING_FILENAME = \"config.properties\";", "modifier": "private static final", "type": "String", "declarator": "TEST_MAPPING_FILENAME = \"config.properties\"", "var_name": "TEST_MAPPING_FILENAME"}, {"original_string": "private static final String TEST_HDFS_MAPPING_FILE_PATH = TEST_HDFS_HOME + TEST_MAPPING_FILENAME;", "modifier": "private static final", "type": "String", "declarator": "TEST_HDFS_MAPPING_FILE_PATH = TEST_HDFS_HOME + TEST_MAPPING_FILENAME", "var_name": "TEST_HDFS_MAPPING_FILE_PATH"}, {"original_string": "private static final String SHARELIB_PATH = \"shareLibPath/\";", "modifier": "private static final", "type": "String", "declarator": "SHARELIB_PATH = \"shareLibPath/\"", "var_name": "SHARELIB_PATH"}, {"original_string": "Services services;", "modifier": "", "type": "Services", "declarator": "services", "var_name": "services"}, {"original_string": "private static String testCaseDirPath;", "modifier": "private static", "type": "String", "declarator": "testCaseDirPath", "var_name": "testCaseDirPath"}, {"original_string": "SimpleDateFormat dt = new SimpleDateFormat(\"yyyyMMddHHmmss\");", "modifier": "", "type": "SimpleDateFormat", "declarator": "dt = new SimpleDateFormat(\"yyyyMMddHHmmss\")", "var_name": "dt"}], "file": "core/src/test/java/org/apache/oozie/service/TestShareLibService.java"}, "test_case": {"identifier": "testRetentionOverflow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetentionOverflow() throws Exception {\n        getOozieConfig().set(ShareLibService.LAUNCHERJAR_LIB_RETENTION, \"25\");\n        services.init();\n        ShareLibService shareLibService = services.get(ShareLibService.class);\n        assertTrue(shareLibService.retentionTime > 0);\n    }", "signature": "void testRetentionOverflow()", "full_signature": "@Test public void testRetentionOverflow()", "class_method_signature": "TestShareLibService.testRetentionOverflow()", "testcase": true, "constructor": false, "invocations": ["set", "getOozieConfig", "init", "get", "assertTrue"]}, "focal_class": {"identifier": "ShareLibService", "superclass": "", "interfaces": "implements Service, Instrumentable", "fields": [{"original_string": "public static final String LAUNCHERJAR_LIB_RETENTION = CONF_PREFIX + \"ShareLibService.temp.sharelib.retention.days\";", "modifier": "public static final", "type": "String", "declarator": "LAUNCHERJAR_LIB_RETENTION = CONF_PREFIX + \"ShareLibService.temp.sharelib.retention.days\"", "var_name": "LAUNCHERJAR_LIB_RETENTION"}, {"original_string": "public static final String SHARELIB_MAPPING_FILE = CONF_PREFIX + \"ShareLibService.mapping.file\";", "modifier": "public static final", "type": "String", "declarator": "SHARELIB_MAPPING_FILE = CONF_PREFIX + \"ShareLibService.mapping.file\"", "var_name": "SHARELIB_MAPPING_FILE"}, {"original_string": "public static final String SHIP_LAUNCHER_JAR = \"oozie.action.ship.launcher.jar\";", "modifier": "public static final", "type": "String", "declarator": "SHIP_LAUNCHER_JAR = \"oozie.action.ship.launcher.jar\"", "var_name": "SHIP_LAUNCHER_JAR"}, {"original_string": "public static final String PURGE_INTERVAL = CONF_PREFIX + \"ShareLibService.purge.interval\";", "modifier": "public static final", "type": "String", "declarator": "PURGE_INTERVAL = CONF_PREFIX + \"ShareLibService.purge.interval\"", "var_name": "PURGE_INTERVAL"}, {"original_string": "public static final String FAIL_FAST_ON_STARTUP = CONF_PREFIX + \"ShareLibService.fail.fast.on.startup\";", "modifier": "public static final", "type": "String", "declarator": "FAIL_FAST_ON_STARTUP = CONF_PREFIX + \"ShareLibService.fail.fast.on.startup\"", "var_name": "FAIL_FAST_ON_STARTUP"}, {"original_string": "private static final String PERMISSION_STRING = \"-rwxr-xr-x\";", "modifier": "private static final", "type": "String", "declarator": "PERMISSION_STRING = \"-rwxr-xr-x\"", "var_name": "PERMISSION_STRING"}, {"original_string": "public static final String LAUNCHER_LIB_PREFIX = \"launcher_\";", "modifier": "public static final", "type": "String", "declarator": "LAUNCHER_LIB_PREFIX = \"launcher_\"", "var_name": "LAUNCHER_LIB_PREFIX"}, {"original_string": "public static final String SHARE_LIB_PREFIX = \"lib_\";", "modifier": "public static final", "type": "String", "declarator": "SHARE_LIB_PREFIX = \"lib_\"", "var_name": "SHARE_LIB_PREFIX"}, {"original_string": "private Services services;", "modifier": "private", "type": "Services", "declarator": "services", "var_name": "services"}, {"original_string": "private Map<String, List<Path>> shareLibMap = new HashMap<String, List<Path>>();", "modifier": "private", "type": "Map<String, List<Path>>", "declarator": "shareLibMap = new HashMap<String, List<Path>>()", "var_name": "shareLibMap"}, {"original_string": "private Map<String, Map<Path, Configuration>> shareLibConfigMap = new HashMap<String, Map<Path, Configuration>>();", "modifier": "private", "type": "Map<String, Map<Path, Configuration>>", "declarator": "shareLibConfigMap = new HashMap<String, Map<Path, Configuration>>()", "var_name": "shareLibConfigMap"}, {"original_string": "private Map<String, List<Path>> launcherLibMap = new HashMap<String, List<Path>>();", "modifier": "private", "type": "Map<String, List<Path>>", "declarator": "launcherLibMap = new HashMap<String, List<Path>>()", "var_name": "launcherLibMap"}, {"original_string": "private Set<String> actionConfSet = new HashSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "actionConfSet = new HashSet<String>()", "var_name": "actionConfSet"}, {"original_string": "private Map<String, Map<Path, Path>> symlinkMapping = new HashMap<String, Map<Path, Path>>();", "modifier": "private", "type": "Map<String, Map<Path, Path>>", "declarator": "symlinkMapping = new HashMap<String, Map<Path, Path>>()", "var_name": "symlinkMapping"}, {"original_string": "private static XLog LOG = XLog.getLog(ShareLibService.class);", "modifier": "private static", "type": "XLog", "declarator": "LOG = XLog.getLog(ShareLibService.class)", "var_name": "LOG"}, {"original_string": "private String sharelibMappingFile;", "modifier": "private", "type": "String", "declarator": "sharelibMappingFile", "var_name": "sharelibMappingFile"}, {"original_string": "private boolean isShipLauncherEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "isShipLauncherEnabled = false", "var_name": "isShipLauncherEnabled"}, {"original_string": "public static String SHARE_LIB_CONF_PREFIX = \"oozie\";", "modifier": "public static", "type": "String", "declarator": "SHARE_LIB_CONF_PREFIX = \"oozie\"", "var_name": "SHARE_LIB_CONF_PREFIX"}, {"original_string": "private boolean shareLibLoadAttempted = false;", "modifier": "private", "type": "boolean", "declarator": "shareLibLoadAttempted = false", "var_name": "shareLibLoadAttempted"}, {"original_string": "private String sharelibMetaFileOldTimeStamp;", "modifier": "private", "type": "String", "declarator": "sharelibMetaFileOldTimeStamp", "var_name": "sharelibMetaFileOldTimeStamp"}, {"original_string": "private String sharelibDirOld;", "modifier": "private", "type": "String", "declarator": "sharelibDirOld", "var_name": "sharelibDirOld"}, {"original_string": "FileSystem fs;", "modifier": "", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "FileSystem localFs;", "modifier": "", "type": "FileSystem", "declarator": "localFs", "var_name": "localFs"}, {"original_string": "final long retentionTime = 1000L * 60 * 60 * 24 * ConfigurationService.getInt(LAUNCHERJAR_LIB_RETENTION);", "modifier": "final", "type": "long", "declarator": "retentionTime = 1000L * 60 * 60 * 24 * ConfigurationService.getInt(LAUNCHERJAR_LIB_RETENTION)", "var_name": "retentionTime"}, {"original_string": "@VisibleForTesting\n    protected static final ThreadLocal<SimpleDateFormat> dt = new ThreadLocal<SimpleDateFormat>() {\n        @Override\n        protected SimpleDateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        }\n    };", "modifier": "@VisibleForTesting\n    protected static final", "type": "ThreadLocal<SimpleDateFormat>", "declarator": "dt = new ThreadLocal<SimpleDateFormat>() {\n        @Override\n        protected SimpleDateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        }\n    }", "var_name": "dt"}], "methods": [{"identifier": "init", "parameters": "(Services services)", "modifiers": "@Override public", "return": "void", "signature": "void init(Services services)", "full_signature": "@Override public void init(Services services)", "class_method_signature": "ShareLibService.init(Services services)", "testcase": false, "constructor": false}, {"identifier": "updateLauncherLib", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateLauncherLib()", "full_signature": "private void updateLauncherLib()", "class_method_signature": "ShareLibService.updateLauncherLib()", "testcase": false, "constructor": false}, {"identifier": "setupLauncherLibPath", "parameters": "(FileSystem fs, Path tmpLauncherLibPath)", "modifiers": "private", "return": "void", "signature": "void setupLauncherLibPath(FileSystem fs, Path tmpLauncherLibPath)", "full_signature": "private void setupLauncherLibPath(FileSystem fs, Path tmpLauncherLibPath)", "class_method_signature": "ShareLibService.setupLauncherLibPath(FileSystem fs, Path tmpLauncherLibPath)", "testcase": false, "constructor": false}, {"identifier": "recursiveChangePermissions", "parameters": "(FileSystem fs, Path path, FsPermission fsPerm)", "modifiers": "private", "return": "void", "signature": "void recursiveChangePermissions(FileSystem fs, Path path, FsPermission fsPerm)", "full_signature": "private void recursiveChangePermissions(FileSystem fs, Path path, FsPermission fsPerm)", "class_method_signature": "ShareLibService.recursiveChangePermissions(FileSystem fs, Path path, FsPermission fsPerm)", "testcase": false, "constructor": false}, {"identifier": "copyJarContainingClasses", "parameters": "(List<Class<?>> classes, FileSystem fs, Path executorDir, String type)", "modifiers": "private", "return": "void", "signature": "void copyJarContainingClasses(List<Class<?>> classes, FileSystem fs, Path executorDir, String type)", "full_signature": "private void copyJarContainingClasses(List<Class<?>> classes, FileSystem fs, Path executorDir, String type)", "class_method_signature": "ShareLibService.copyJarContainingClasses(List<Class<?>> classes, FileSystem fs, Path executorDir, String type)", "testcase": false, "constructor": false}, {"identifier": "copyFromLocalFile", "parameters": "(File src, FileSystem dstFS, Path dstDir)", "modifiers": "private static", "return": "boolean", "signature": "boolean copyFromLocalFile(File src, FileSystem dstFS, Path dstDir)", "full_signature": "private static boolean copyFromLocalFile(File src, FileSystem dstFS, Path dstDir)", "class_method_signature": "ShareLibService.copyFromLocalFile(File src, FileSystem dstFS, Path dstDir)", "testcase": false, "constructor": false}, {"identifier": "getPathRecursively", "parameters": "(FileSystem fs, Path rootDir, List<Path> listOfPaths, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "modifiers": "private", "return": "void", "signature": "void getPathRecursively(FileSystem fs, Path rootDir, List<Path> listOfPaths, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "full_signature": "private void getPathRecursively(FileSystem fs, Path rootDir, List<Path> listOfPaths, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "class_method_signature": "ShareLibService.getPathRecursively(FileSystem fs, Path rootDir, List<Path> listOfPaths, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "testcase": false, "constructor": false}, {"identifier": "getShareLib", "parameters": "()", "modifiers": "public", "return": "Map<String, List<Path>>", "signature": "Map<String, List<Path>> getShareLib()", "full_signature": "public Map<String, List<Path>> getShareLib()", "class_method_signature": "ShareLibService.getShareLib()", "testcase": false, "constructor": false}, {"identifier": "getSymlinkMapping", "parameters": "()", "modifiers": "private", "return": "Map<String, Map<Path, Path>>", "signature": "Map<String, Map<Path, Path>> getSymlinkMapping()", "full_signature": "private Map<String, Map<Path, Path>> getSymlinkMapping()", "class_method_signature": "ShareLibService.getSymlinkMapping()", "testcase": false, "constructor": false}, {"identifier": "getShareLibJars", "parameters": "(String shareLibKey)", "modifiers": "public", "return": "List<Path>", "signature": "List<Path> getShareLibJars(String shareLibKey)", "full_signature": "public List<Path> getShareLibJars(String shareLibKey)", "class_method_signature": "ShareLibService.getShareLibJars(String shareLibKey)", "testcase": false, "constructor": false}, {"identifier": "checkSymlink", "parameters": "(final String shareLibKey)", "modifiers": "private", "return": "void", "signature": "void checkSymlink(final String shareLibKey)", "full_signature": "private void checkSymlink(final String shareLibKey)", "class_method_signature": "ShareLibService.checkSymlink(final String shareLibKey)", "testcase": false, "constructor": false}, {"identifier": "getSymlinkSharelibPath", "parameters": "(String shareLibKey, Path path)", "modifiers": "private", "return": "Path", "signature": "Path getSymlinkSharelibPath(String shareLibKey, Path path)", "full_signature": "private Path getSymlinkSharelibPath(String shareLibKey, Path path)", "class_method_signature": "ShareLibService.getSymlinkSharelibPath(String shareLibKey, Path path)", "testcase": false, "constructor": false}, {"identifier": "getHostFileSystem", "parameters": "(String pathStr)", "modifiers": "private", "return": "FileSystem", "signature": "FileSystem getHostFileSystem(String pathStr)", "full_signature": "private FileSystem getHostFileSystem(String pathStr)", "class_method_signature": "ShareLibService.getHostFileSystem(String pathStr)", "testcase": false, "constructor": false}, {"identifier": "getHostFileSystem", "parameters": "(Path path)", "modifiers": "private", "return": "FileSystem", "signature": "FileSystem getHostFileSystem(Path path)", "full_signature": "private FileSystem getHostFileSystem(Path path)", "class_method_signature": "ShareLibService.getHostFileSystem(Path path)", "testcase": false, "constructor": false}, {"identifier": "getSystemLibJars", "parameters": "(String shareLibKey)", "modifiers": "public", "return": "List<Path>", "signature": "List<Path> getSystemLibJars(String shareLibKey)", "full_signature": "public List<Path> getSystemLibJars(String shareLibKey)", "class_method_signature": "ShareLibService.getSystemLibJars(String shareLibKey)", "testcase": false, "constructor": false}, {"identifier": "findContainingJar", "parameters": "(Class<?> clazz)", "modifiers": "@VisibleForTesting protected", "return": "String", "signature": "String findContainingJar(Class<?> clazz)", "full_signature": "@VisibleForTesting protected String findContainingJar(Class<?> clazz)", "class_method_signature": "ShareLibService.findContainingJar(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "purgeLibs", "parameters": "(FileSystem fs, final String prefix, final Date current)", "modifiers": "private", "return": "void", "signature": "void purgeLibs(FileSystem fs, final String prefix, final Date current)", "full_signature": "private void purgeLibs(FileSystem fs, final String prefix, final Date current)", "class_method_signature": "ShareLibService.purgeLibs(FileSystem fs, final String prefix, final Date current)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ShareLibService.destroy()", "testcase": false, "constructor": false}, {"identifier": "getInterface", "parameters": "()", "modifiers": "@Override public", "return": "Class<? extends Service>", "signature": "Class<? extends Service> getInterface()", "full_signature": "@Override public Class<? extends Service> getInterface()", "class_method_signature": "ShareLibService.getInterface()", "testcase": false, "constructor": false}, {"identifier": "updateShareLib", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> updateShareLib()", "full_signature": "public Map<String, String> updateShareLib()", "class_method_signature": "ShareLibService.updateShareLib()", "testcase": false, "constructor": false}, {"identifier": "getShareLibRootPath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getShareLibRootPath()", "full_signature": "public Path getShareLibRootPath()", "class_method_signature": "ShareLibService.getShareLibRootPath()", "testcase": false, "constructor": false}, {"identifier": "loadShareLibfromDFS", "parameters": "(Map<String, List<Path>> shareLibMap, Path shareLibpath,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "modifiers": "private", "return": "void", "signature": "void loadShareLibfromDFS(Map<String, List<Path>> shareLibMap, Path shareLibpath,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "full_signature": "private void loadShareLibfromDFS(Map<String, List<Path>> shareLibMap, Path shareLibpath,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "class_method_signature": "ShareLibService.loadShareLibfromDFS(Map<String, List<Path>> shareLibMap, Path shareLibpath,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "testcase": false, "constructor": false}, {"identifier": "loadShareLibMetaFile", "parameters": "(Map<String, List<Path>> shareLibMap, Map<String, Map<Path, Path>> symlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String sharelibFileMapping, String shareLibKey)", "modifiers": "private", "return": "void", "signature": "void loadShareLibMetaFile(Map<String, List<Path>> shareLibMap, Map<String, Map<Path, Path>> symlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String sharelibFileMapping, String shareLibKey)", "full_signature": "private void loadShareLibMetaFile(Map<String, List<Path>> shareLibMap, Map<String, Map<Path, Path>> symlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String sharelibFileMapping, String shareLibKey)", "class_method_signature": "ShareLibService.loadShareLibMetaFile(Map<String, List<Path>> shareLibMap, Map<String, Map<Path, Path>> symlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String sharelibFileMapping, String shareLibKey)", "testcase": false, "constructor": false}, {"identifier": "loadSharelib", "parameters": "(Map<String, List<Path>> tmpShareLibMap, Map<String, Map<Path, Path>> tmpSymlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String shareLibKey, String pathList[])", "modifiers": "private", "return": "void", "signature": "void loadSharelib(Map<String, List<Path>> tmpShareLibMap, Map<String, Map<Path, Path>> tmpSymlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String shareLibKey, String pathList[])", "full_signature": "private void loadSharelib(Map<String, List<Path>> tmpShareLibMap, Map<String, Map<Path, Path>> tmpSymlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String shareLibKey, String pathList[])", "class_method_signature": "ShareLibService.loadSharelib(Map<String, List<Path>> tmpShareLibMap, Map<String, Map<Path, Path>> tmpSymlinkMapping,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap, String shareLibKey, String pathList[])", "testcase": false, "constructor": false}, {"identifier": "getLauncherlibPath", "parameters": "()", "modifiers": "private", "return": "Path", "signature": "Path getLauncherlibPath()", "full_signature": "private Path getLauncherlibPath()", "class_method_signature": "ShareLibService.getLauncherlibPath()", "testcase": false, "constructor": false}, {"identifier": "getLatestLibPath", "parameters": "(Path rootDir, final String prefix)", "modifiers": "public", "return": "Path", "signature": "Path getLatestLibPath(Path rootDir, final String prefix)", "full_signature": "public Path getLatestLibPath(Path rootDir, final String prefix)", "class_method_signature": "ShareLibService.getLatestLibPath(Path rootDir, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "instrument", "parameters": "(Instrumentation instr)", "modifiers": "@Override public", "return": "void", "signature": "void instrument(Instrumentation instr)", "full_signature": "@Override public void instrument(Instrumentation instr)", "class_method_signature": "ShareLibService.instrument(Instrumentation instr)", "testcase": false, "constructor": false}, {"identifier": "getFileSystem", "parameters": "()", "modifiers": "public", "return": "FileSystem", "signature": "FileSystem getFileSystem()", "full_signature": "public FileSystem getFileSystem()", "class_method_signature": "ShareLibService.getFileSystem()", "testcase": false, "constructor": false}, {"identifier": "cachePropertyFile", "parameters": "(Path qualifiedHdfsPath, Path propertyFilePath, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "modifiers": "private", "return": "void", "signature": "void cachePropertyFile(Path qualifiedHdfsPath, Path propertyFilePath, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "full_signature": "private void cachePropertyFile(Path qualifiedHdfsPath, Path propertyFilePath, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "class_method_signature": "ShareLibService.cachePropertyFile(Path qualifiedHdfsPath, Path propertyFilePath, String shareLibKey,\n            Map<String, Map<Path, Configuration>> shareLibConfigMap)", "testcase": false, "constructor": false}, {"identifier": "cacheActionKeySharelibConfList", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cacheActionKeySharelibConfList()", "full_signature": "private void cacheActionKeySharelibConfList()", "class_method_signature": "ShareLibService.cacheActionKeySharelibConfList()", "testcase": false, "constructor": false}, {"identifier": "getShareLibConf", "parameters": "(String inputKey, Path path)", "modifiers": "public", "return": "Configuration", "signature": "Configuration getShareLibConf(String inputKey, Path path)", "full_signature": "public Configuration getShareLibConf(String inputKey, Path path)", "class_method_signature": "ShareLibService.getShareLibConf(String inputKey, Path path)", "testcase": false, "constructor": false}, {"identifier": "getShareLibConfigMap", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "Map<String, Map<Path, Configuration>>", "signature": "Map<String, Map<Path, Configuration>> getShareLibConfigMap()", "full_signature": "@VisibleForTesting public Map<String, Map<Path, Configuration>> getShareLibConfigMap()", "class_method_signature": "ShareLibService.getShareLibConfigMap()", "testcase": false, "constructor": false}, {"identifier": "isFilePartOfConfList", "parameters": "(Path path)", "modifiers": "private", "return": "boolean", "signature": "boolean isFilePartOfConfList(Path path)", "full_signature": "private boolean isFilePartOfConfList(Path path)", "class_method_signature": "ShareLibService.isFilePartOfConfList(Path path)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/oozie/service/ShareLibService.java"}, "focal_method": {"identifier": "init", "parameters": "(Services services)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(Services services) throws ServiceException {\n        this.services = services;\n        sharelibMappingFile = ConfigurationService.get(services.getConf(), SHARELIB_MAPPING_FILE);\n        isShipLauncherEnabled = ConfigurationService.getBoolean(services.getConf(), SHIP_LAUNCHER_JAR);\n        boolean failOnfailure = ConfigurationService.getBoolean(services.getConf(), FAIL_FAST_ON_STARTUP);\n        Path launcherlibPath = getLauncherlibPath();\n        HadoopAccessorService has = Services.get().get(HadoopAccessorService.class);\n        URI uri = launcherlibPath.toUri();\n        try {\n\n            fs = FileSystem.get(has.createConfiguration(uri.getAuthority()));\n            localFs = LocalFileSystem.get(new Configuration(false));\n            //cache action key sharelib conf list\n            cacheActionKeySharelibConfList();\n            updateLauncherLib();\n            updateShareLib();\n        }\n        catch (Throwable e) {\n            if (failOnfailure) {\n                LOG.error(\"Sharelib initialization fails\", e);\n                throw new ServiceException(ErrorCode.E0104, getClass().getName(), \"Sharelib initialization fails. \", e);\n            }\n            else {\n                // We don't want to actually fail init by throwing an Exception, so only create the ServiceException and\n                // log it\n                ServiceException se = new ServiceException(ErrorCode.E0104, getClass().getName(),\n                        \"Not able to cache sharelib. An Admin needs to install the sharelib with oozie-setup.sh and issue the \"\n                                + \"'oozie admin' CLI command to update the sharelib\", e);\n                LOG.error(se);\n            }\n        }\n        Runnable purgeLibsRunnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.flush();\n                try {\n                    // Only one server should purge sharelib\n                    if (Services.get().get(JobsConcurrencyService.class).isLeader()) {\n                        final Date current = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\")).getTime();\n                        purgeLibs(fs, LAUNCHER_LIB_PREFIX, current);\n                        purgeLibs(fs, SHARE_LIB_PREFIX, current);\n                    }\n                }\n                catch (IOException e) {\n                    LOG.error(\"There was an issue purging the sharelib\", e);\n                }\n            }\n        };\n        services.get(SchedulerService.class).schedule(purgeLibsRunnable, 10,\n                ConfigurationService.getInt(services.getConf(), PURGE_INTERVAL) * 60 * 60 * 24,\n                SchedulerService.Unit.SEC);\n    }", "signature": "void init(Services services)", "full_signature": "@Override public void init(Services services)", "class_method_signature": "ShareLibService.init(Services services)", "testcase": false, "constructor": false, "invocations": ["get", "getConf", "getBoolean", "getConf", "getBoolean", "getConf", "getLauncherlibPath", "get", "get", "toUri", "get", "createConfiguration", "getAuthority", "get", "cacheActionKeySharelibConfList", "updateLauncherLib", "updateShareLib", "error", "getName", "getClass", "getName", "getClass", "error", "flush", "isLeader", "get", "get", "getTime", "getInstance", "getTimeZone", "purgeLibs", "purgeLibs", "error", "schedule", "get", "getInt", "getConf"]}, "repository": {"repo_id": 2383782, "url": "https://github.com/apache/oozie", "stars": 542, "created": "9/14/2011 7:00:10 AM +00:00", "updates": "2020-01-18T12:54:24+00:00", "fork": "False", "license": "licensed"}}