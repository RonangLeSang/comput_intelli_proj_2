{"test_class": {"identifier": "TestEmbeddedOozieServer", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private JspHandler mockJspHandler;", "modifier": "@Mock private", "type": "JspHandler", "declarator": "mockJspHandler", "var_name": "mockJspHandler"}, {"original_string": "@Mock private Services mockServices;", "modifier": "@Mock private", "type": "Services", "declarator": "mockServices", "var_name": "mockServices"}, {"original_string": "@Mock private SSLServerConnectorFactory mockSSLServerConnectorFactory;", "modifier": "@Mock private", "type": "SSLServerConnectorFactory", "declarator": "mockSSLServerConnectorFactory", "var_name": "mockSSLServerConnectorFactory"}, {"original_string": "@Spy private Server mockServer;", "modifier": "@Spy private", "type": "Server", "declarator": "mockServer", "var_name": "mockServer"}, {"original_string": "@Mock private ServerConnector mockServerConnector;", "modifier": "@Mock private", "type": "ServerConnector", "declarator": "mockServerConnector", "var_name": "mockServerConnector"}, {"original_string": "@Mock private ConfigurationService mockConfigService;", "modifier": "@Mock private", "type": "ConfigurationService", "declarator": "mockConfigService", "var_name": "mockConfigService"}, {"original_string": "@Mock private Configuration mockConfiguration;", "modifier": "@Mock private", "type": "Configuration", "declarator": "mockConfiguration", "var_name": "mockConfiguration"}, {"original_string": "@Mock private RewriteHandler mockOozieRewriteHandler;", "modifier": "@Mock private", "type": "RewriteHandler", "declarator": "mockOozieRewriteHandler", "var_name": "mockOozieRewriteHandler"}, {"original_string": "@Mock private WebAppContext servletContextHandler;", "modifier": "@Mock private", "type": "WebAppContext", "declarator": "servletContextHandler", "var_name": "servletContextHandler"}, {"original_string": "@Mock private ServletMapper oozieServletMapper;", "modifier": "@Mock private", "type": "ServletMapper", "declarator": "oozieServletMapper", "var_name": "oozieServletMapper"}, {"original_string": "@Mock private FilterMapper oozieFilterMapper;", "modifier": "@Mock private", "type": "FilterMapper", "declarator": "oozieFilterMapper", "var_name": "oozieFilterMapper"}, {"original_string": "@Mock private ConstraintSecurityHandler constraintSecurityHandler;", "modifier": "@Mock private", "type": "ConstraintSecurityHandler", "declarator": "constraintSecurityHandler", "var_name": "constraintSecurityHandler"}, {"original_string": "private EmbeddedOozieServer embeddedOozieServer;", "modifier": "private", "type": "EmbeddedOozieServer", "declarator": "embeddedOozieServer", "var_name": "embeddedOozieServer"}, {"original_string": "private String confTruststoreFile = \"oozie.truststore\";", "modifier": "private", "type": "String", "declarator": "confTruststoreFile = \"oozie.truststore\"", "var_name": "confTruststoreFile"}], "file": "server/src/test/java/org/apache/oozie/server/TestEmbeddedOozieServer.java"}, "test_case": {"identifier": "testServerSetupTruststorePathSetViaSystemProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServerSetupTruststorePathSetViaSystemProperty() throws Exception {\n        final String truststorePath2 = \"truststore.jks\";\n        doReturn(String.valueOf(false)).when(mockConfiguration).get(\"oozie.https.enabled\");\n        System.setProperty(EmbeddedOozieServer.TRUSTSTORE_PATH_SYSTEM_PROPERTY, truststorePath2);\n\n        embeddedOozieServer.setup();\n        verify(mockJspHandler).setupWebAppContext(isA(WebAppContext.class));\n        verify(oozieFilterMapper).addFilters();\n\n        Assert.assertEquals(truststorePath2, System.getProperty(\"javax.net.ssl.trustStore\"));\n        verify(mockConfiguration, never()).get(EmbeddedOozieServer.OOZIE_HTTPS_TRUSTSTORE_FILE);\n    }", "signature": "void testServerSetupTruststorePathSetViaSystemProperty()", "full_signature": "@Test public void testServerSetupTruststorePathSetViaSystemProperty()", "class_method_signature": "TestEmbeddedOozieServer.testServerSetupTruststorePathSetViaSystemProperty()", "testcase": true, "constructor": false, "invocations": ["get", "when", "doReturn", "valueOf", "setProperty", "setup", "setupWebAppContext", "verify", "isA", "addFilters", "verify", "assertEquals", "getProperty", "get", "verify", "never"]}, "focal_class": {"identifier": "EmbeddedOozieServer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EmbeddedOozieServer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EmbeddedOozieServer.class)", "var_name": "LOG"}, {"original_string": "protected static final String OOZIE_HTTPS_TRUSTSTORE_FILE = \"oozie.https.truststore.file\";", "modifier": "protected static final", "type": "String", "declarator": "OOZIE_HTTPS_TRUSTSTORE_FILE = \"oozie.https.truststore.file\"", "var_name": "OOZIE_HTTPS_TRUSTSTORE_FILE"}, {"original_string": "protected static final String OOZIE_HTTPS_TRUSTSTORE_PASS = \"oozie.https.truststore.pass\";", "modifier": "protected static final", "type": "String", "declarator": "OOZIE_HTTPS_TRUSTSTORE_PASS = \"oozie.https.truststore.pass\"", "var_name": "OOZIE_HTTPS_TRUSTSTORE_PASS"}, {"original_string": "protected static final String TRUSTSTORE_PATH_SYSTEM_PROPERTY = \"javax.net.ssl.trustStore\";", "modifier": "protected static final", "type": "String", "declarator": "TRUSTSTORE_PATH_SYSTEM_PROPERTY = \"javax.net.ssl.trustStore\"", "var_name": "TRUSTSTORE_PATH_SYSTEM_PROPERTY"}, {"original_string": "protected static final String TRUSTSTORE_PASS_SYSTEM_PROPERTY = \"javax.net.ssl.trustStorePassword\";", "modifier": "protected static final", "type": "String", "declarator": "TRUSTSTORE_PASS_SYSTEM_PROPERTY = \"javax.net.ssl.trustStorePassword\"", "var_name": "TRUSTSTORE_PASS_SYSTEM_PROPERTY"}, {"original_string": "private static String contextPath;", "modifier": "private static", "type": "String", "declarator": "contextPath", "var_name": "contextPath"}, {"original_string": "protected Server server;", "modifier": "protected", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private int httpPort;", "modifier": "private", "type": "int", "declarator": "httpPort", "var_name": "httpPort"}, {"original_string": "private int httpsPort;", "modifier": "private", "type": "int", "declarator": "httpsPort", "var_name": "httpsPort"}, {"original_string": "private final WebAppContext servletContextHandler;", "modifier": "private final", "type": "WebAppContext", "declarator": "servletContextHandler", "var_name": "servletContextHandler"}, {"original_string": "private final ServletMapper oozieServletMapper;", "modifier": "private final", "type": "ServletMapper", "declarator": "oozieServletMapper", "var_name": "oozieServletMapper"}, {"original_string": "private final FilterMapper oozieFilterMapper;", "modifier": "private final", "type": "FilterMapper", "declarator": "oozieFilterMapper", "var_name": "oozieFilterMapper"}, {"original_string": "private JspHandler jspHandler;", "modifier": "private", "type": "JspHandler", "declarator": "jspHandler", "var_name": "jspHandler"}, {"original_string": "private Services serviceController;", "modifier": "private", "type": "Services", "declarator": "serviceController", "var_name": "serviceController"}, {"original_string": "private SSLServerConnectorFactory sslServerConnectorFactory;", "modifier": "private", "type": "SSLServerConnectorFactory", "declarator": "sslServerConnectorFactory", "var_name": "sslServerConnectorFactory"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private final RewriteHandler oozieRewriteHandler;", "modifier": "private final", "type": "RewriteHandler", "declarator": "oozieRewriteHandler", "var_name": "oozieRewriteHandler"}, {"original_string": "private final ConstraintSecurityHandler constraintSecurityHandler;", "modifier": "private final", "type": "ConstraintSecurityHandler", "declarator": "constraintSecurityHandler", "var_name": "constraintSecurityHandler"}], "methods": [{"identifier": "EmbeddedOozieServer", "parameters": "(final Server server,\n                               final JspHandler jspHandler,\n                               final Services serviceController,\n                               final SSLServerConnectorFactory sslServerConnectorFactory,\n                               final RewriteHandler oozieRewriteHandler,\n                               final WebAppContext servletContextHandler,\n                               final ServletMapper oozieServletMapper,\n                               final FilterMapper oozieFilterMapper,\n                               final ConstraintSecurityHandler constraintSecurityHandler)", "modifiers": "@Inject public", "return": "", "signature": " EmbeddedOozieServer(final Server server,\n                               final JspHandler jspHandler,\n                               final Services serviceController,\n                               final SSLServerConnectorFactory sslServerConnectorFactory,\n                               final RewriteHandler oozieRewriteHandler,\n                               final WebAppContext servletContextHandler,\n                               final ServletMapper oozieServletMapper,\n                               final FilterMapper oozieFilterMapper,\n                               final ConstraintSecurityHandler constraintSecurityHandler)", "full_signature": "@Inject public  EmbeddedOozieServer(final Server server,\n                               final JspHandler jspHandler,\n                               final Services serviceController,\n                               final SSLServerConnectorFactory sslServerConnectorFactory,\n                               final RewriteHandler oozieRewriteHandler,\n                               final WebAppContext servletContextHandler,\n                               final ServletMapper oozieServletMapper,\n                               final FilterMapper oozieFilterMapper,\n                               final ConstraintSecurityHandler constraintSecurityHandler)", "class_method_signature": "EmbeddedOozieServer.EmbeddedOozieServer(final Server server,\n                               final JspHandler jspHandler,\n                               final Services serviceController,\n                               final SSLServerConnectorFactory sslServerConnectorFactory,\n                               final RewriteHandler oozieRewriteHandler,\n                               final WebAppContext servletContextHandler,\n                               final ServletMapper oozieServletMapper,\n                               final FilterMapper oozieFilterMapper,\n                               final ConstraintSecurityHandler constraintSecurityHandler)", "testcase": false, "constructor": true}, {"identifier": "setup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setup()", "full_signature": "public void setup()", "class_method_signature": "EmbeddedOozieServer.setup()", "testcase": false, "constructor": false}, {"identifier": "setTrustStore", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setTrustStore()", "full_signature": "private void setTrustStore()", "class_method_signature": "EmbeddedOozieServer.setTrustStore()", "testcase": false, "constructor": false}, {"identifier": "setTrustStorePassword", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setTrustStorePassword()", "full_signature": "private void setTrustStorePassword()", "class_method_signature": "EmbeddedOozieServer.setTrustStorePassword()", "testcase": false, "constructor": false}, {"identifier": "addErrorHandler", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addErrorHandler()", "full_signature": "private void addErrorHandler()", "class_method_signature": "EmbeddedOozieServer.addErrorHandler()", "testcase": false, "constructor": false}, {"identifier": "getConfigPort", "parameters": "(String confVar)", "modifiers": "private", "return": "int", "signature": "int getConfigPort(String confVar)", "full_signature": "private int getConfigPort(String confVar)", "class_method_signature": "EmbeddedOozieServer.getConfigPort(String confVar)", "testcase": false, "constructor": false}, {"identifier": "isSecured", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSecured()", "full_signature": "private boolean isSecured()", "class_method_signature": "EmbeddedOozieServer.isSecured()", "testcase": false, "constructor": false}, {"identifier": "setContextPath", "parameters": "(Configuration oozieConfiguration)", "modifiers": "public static", "return": "void", "signature": "void setContextPath(Configuration oozieConfiguration)", "full_signature": "public static void setContextPath(Configuration oozieConfiguration)", "class_method_signature": "EmbeddedOozieServer.setContextPath(Configuration oozieConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getContextPath", "parameters": "(Configuration oozieConfiguration)", "modifiers": "public static", "return": "String", "signature": "String getContextPath(Configuration oozieConfiguration)", "full_signature": "public static String getContextPath(Configuration oozieConfiguration)", "class_method_signature": "EmbeddedOozieServer.getContextPath(Configuration oozieConfiguration)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "EmbeddedOozieServer.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "EmbeddedOozieServer.shutdown()", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void join()", "full_signature": "public void join()", "class_method_signature": "EmbeddedOozieServer.join()", "testcase": false, "constructor": false}, {"identifier": "addShutdownHook", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addShutdownHook()", "full_signature": "public void addShutdownHook()", "class_method_signature": "EmbeddedOozieServer.addShutdownHook()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "EmbeddedOozieServer.main(String[] args)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/oozie/server/EmbeddedOozieServer.java"}, "focal_method": {"identifier": "setup", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void setup() throws URISyntaxException, IOException, ServiceException {\n        conf = serviceController.get(ConfigurationService.class).getConf();\n        setContextPath(conf);\n        httpPort = getConfigPort(ConfigUtils.OOZIE_HTTP_PORT);\n\n        HttpConfiguration httpConfiguration = new HttpConfigurationWrapper(conf).getDefaultHttpConfiguration();\n\n        ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory(httpConfiguration));\n        connector.setPort(httpPort);\n        connector.setHost(conf.get(ConfigUtils.OOZIE_HTTP_HOSTNAME));\n\n        HandlerCollection handlerCollection = new HandlerCollection();\n        setTrustStore();\n        setTrustStorePassword();\n\n        if (isSecured()) {\n            httpsPort =  getConfigPort(ConfigUtils.OOZIE_HTTPS_PORT);\n            ServerConnector sslConnector = sslServerConnectorFactory.createSecureServerConnector(httpsPort, conf, server);\n            server.setConnectors(new Connector[]{connector, sslConnector});\n            constraintSecurityHandler.setHandler(servletContextHandler);\n            handlerCollection.addHandler(constraintSecurityHandler);\n        }\n        else {\n            server.setConnectors(new Connector[]{connector});\n        }\n\n        servletContextHandler.setContextPath(contextPath);\n        oozieServletMapper.mapOozieServlets();\n        oozieFilterMapper.addFilters();\n\n        servletContextHandler.setParentLoaderPriority(true);\n        jspHandler.setupWebAppContext(servletContextHandler);\n\n        addErrorHandler();\n\n        handlerCollection.addHandler(servletContextHandler);\n        handlerCollection.addHandler(oozieRewriteHandler);\n        server.setHandler(handlerCollection);\n    }", "signature": "void setup()", "full_signature": "public void setup()", "class_method_signature": "EmbeddedOozieServer.setup()", "testcase": false, "constructor": false, "invocations": ["getConf", "get", "setContextPath", "getConfigPort", "getDefaultHttpConfiguration", "setPort", "setHost", "get", "setTrustStore", "setTrustStorePassword", "isSecured", "getConfigPort", "createSecureServerConnector", "setConnectors", "setHandler", "addHandler", "setConnectors", "setContextPath", "mapOozieServlets", "addFilters", "setParentLoaderPriority", "setupWebAppContext", "addErrorHandler", "addHandler", "addHandler", "setHandler"]}, "repository": {"repo_id": 2383782, "url": "https://github.com/apache/oozie", "stars": 542, "created": "9/14/2011 7:00:10 AM +00:00", "updates": "2020-01-18T12:54:24+00:00", "fork": "False", "license": "licensed"}}