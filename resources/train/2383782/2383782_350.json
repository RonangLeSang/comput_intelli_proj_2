{"test_class": {"identifier": "TestDaylightOffsetCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static TimeZone TZ_DST = TimeZone.getTimeZone(\"America/Los_Angeles\");", "modifier": "private final static", "type": "TimeZone", "declarator": "TZ_DST = TimeZone.getTimeZone(\"America/Los_Angeles\")", "var_name": "TZ_DST"}, {"original_string": "private final static TimeZone TZ_STANDARD = TimeZone.getTimeZone(\"Asia/Kolkata\");", "modifier": "private final static", "type": "TimeZone", "declarator": "TZ_STANDARD = TimeZone.getTimeZone(\"Asia/Kolkata\")", "var_name": "TZ_STANDARD"}], "file": "core/src/test/java/org/apache/oozie/command/coord/TestDaylightOffsetCalculator.java"}, "test_case": {"identifier": "testCalculateBetweenNonDSTStartAndEndGivesZeroOffset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculateBetweenNonDSTStartAndEndGivesZeroOffset() throws ParseException {\n        final DaylightOffsetCalculator nonDSTStartAndEndCalculator = new DaylightOffsetCalculator(\n                DateUtils.parseDateOozieTZ(\"2013-01-18T00:00Z\"),\n                DateUtils.parseDateOozieTZ(\"2014-01-18T00:00Z\"));\n\n        final Calendar target = Calendar.getInstance();\n        target.setTime(DateUtils.parseDateOozieTZ(\"2014-01-18T00:00Z\"));\n\n        assertEquals(nonDSTStartAndEndCalculator.calculate(TZ_DST, target), target);\n    }", "signature": "void testCalculateBetweenNonDSTStartAndEndGivesZeroOffset()", "full_signature": "@Test public void testCalculateBetweenNonDSTStartAndEndGivesZeroOffset()", "class_method_signature": "TestDaylightOffsetCalculator.testCalculateBetweenNonDSTStartAndEndGivesZeroOffset()", "testcase": true, "constructor": false, "invocations": ["parseDateOozieTZ", "parseDateOozieTZ", "getInstance", "setTime", "parseDateOozieTZ", "assertEquals", "calculate"]}, "focal_class": {"identifier": "DaylightOffsetCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Date startMatdTime;", "modifier": "private final", "type": "Date", "declarator": "startMatdTime", "var_name": "startMatdTime"}, {"original_string": "private final Date endMatdTime;", "modifier": "private final", "type": "Date", "declarator": "endMatdTime", "var_name": "endMatdTime"}], "methods": [{"identifier": "DaylightOffsetCalculator", "parameters": "(final Date startMatdTime, final Date endMatdTime)", "modifiers": "", "return": "", "signature": " DaylightOffsetCalculator(final Date startMatdTime, final Date endMatdTime)", "full_signature": "  DaylightOffsetCalculator(final Date startMatdTime, final Date endMatdTime)", "class_method_signature": "DaylightOffsetCalculator.DaylightOffsetCalculator(final Date startMatdTime, final Date endMatdTime)", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(final TimeZone tz, final Calendar target)", "modifiers": "", "return": "Calendar", "signature": "Calendar calculate(final TimeZone tz, final Calendar target)", "full_signature": " Calendar calculate(final TimeZone tz, final Calendar target)", "class_method_signature": "DaylightOffsetCalculator.calculate(final TimeZone tz, final Calendar target)", "testcase": false, "constructor": false}, {"identifier": "getDSTOffset", "parameters": "(final TimeZone tz, final Date beginDate, final Date endDate)", "modifiers": "static", "return": "long", "signature": "long getDSTOffset(final TimeZone tz, final Date beginDate, final Date endDate)", "full_signature": "static long getDSTOffset(final TimeZone tz, final Date beginDate, final Date endDate)", "class_method_signature": "DaylightOffsetCalculator.getDSTOffset(final TimeZone tz, final Date beginDate, final Date endDate)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/oozie/command/coord/DaylightOffsetCalculator.java"}, "focal_method": {"identifier": "calculate", "parameters": "(final TimeZone tz, final Calendar target)", "modifiers": "", "return": "Calendar", "body": "Calendar calculate(final TimeZone tz, final Calendar target) {\n        final Calendar targetWithDSTOffset = Calendar.getInstance();\n        targetWithDSTOffset.setTimeInMillis(target.getTime().getTime() + getDSTOffset(tz, startMatdTime, endMatdTime));\n\n        return targetWithDSTOffset;\n    }", "signature": "Calendar calculate(final TimeZone tz, final Calendar target)", "full_signature": " Calendar calculate(final TimeZone tz, final Calendar target)", "class_method_signature": "DaylightOffsetCalculator.calculate(final TimeZone tz, final Calendar target)", "testcase": false, "constructor": false, "invocations": ["getInstance", "setTimeInMillis", "getTime", "getTime", "getDSTOffset"]}, "repository": {"repo_id": 2383782, "url": "https://github.com/apache/oozie", "stars": 542, "created": "9/14/2011 7:00:10 AM +00:00", "updates": "2020-01-18T12:54:24+00:00", "fork": "False", "license": "licensed"}}