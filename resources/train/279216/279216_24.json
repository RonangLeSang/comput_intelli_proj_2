{"test_class": {"identifier": "TestLoadPlaylist", "superclass": "extends DespotifyClientTest", "interfaces": "", "fields": [], "file": "java/tags/0.4.1/src/test/java/se/despotify/client/protocol/command/media/playlist/TestLoadPlaylist.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test() throws Exception {\n\n    Playlist playlist;\n\n//    try {\n//      // this playlist contains a bad checksum\n//      playlist = (Playlist) SpotifyURL.browse(\"spotify:user:kent.finell:playlist:6Odybr7gR4L9LwO8dBgBwS\", store, connection);\n//      fail(\"Bad checksum in playlist, should not be valid.\");\n//    } catch (Exception e) {\n//      e.printStackTrace();\n//    }\n\n\n//    MediaTestCaseGenerator.createEqualsTest((Playlist)SpotifyURL.browse(\"spotify:user:kent.finell:playlist:6wvPFkLGKOVl1v3qRJD6HX\", connection));\n\n    playlist = store.getPlaylist(SpotifyURI.toHex(\"6wvPFkLGKOVl1v3qRJD6HX\"));\n    manager.send(new LoadPlaylist(store, playlist));\n\n    assertEquals(\"despotify apriori\", playlist.getName());   \n    assertEquals(7l, playlist.getRevision().longValue());\n    assertEquals(3794544626l, playlist.getChecksum().longValue());\n    assertEquals(3794544626l, playlist.calculateChecksum());\n    assertEquals(\"kent.finell\", playlist.getAuthor());\n    assertFalse(playlist.isCollaborative());\n    assertEquals(\"d65f21be4a744a88ea67d8a83c7a2eb5\", playlist.getId());\n    assertEquals(5, playlist.getTracks().size());\n\n    assertEquals(\"93f98ea75b4748f797668485a3d01bd0\", playlist.getTracks().get(0).getId());\n    assertEquals(\"spotify:track:4vdV2Eua6RkUoUM51jdH56\", playlist.getTracks().get(0).getSpotifyURI());\n    assertEquals(\"http://open.spotify.com/track/4vdV2Eua6RkUoUM51jdH56\", playlist.getTracks().get(0).getHttpURL());\n    assertNull(playlist.getTracks().get(0).getTitle());\n    assertNull(playlist.getTracks().get(0).getCover());\n    assertNull(playlist.getTracks().get(0).getFiles());\n    assertNull(playlist.getTracks().get(0).getLength());\n    assertNull(playlist.getTracks().get(0).getPopularity());\n    assertNull(playlist.getTracks().get(0).getTrackNumber());\n    assertNull(playlist.getTracks().get(0).getYear());\n\n    assertEquals(\"cf2cd530980e450d855977ba0a80ec6e\", playlist.getTracks().get(1).getId());\n    assertEquals(\"spotify:track:6iVTOPCmpABvG9jDZ2JozY\", playlist.getTracks().get(1).getSpotifyURI());\n    assertEquals(\"http://open.spotify.com/track/6iVTOPCmpABvG9jDZ2JozY\", playlist.getTracks().get(1).getHttpURL());\n    assertNull(playlist.getTracks().get(1).getTitle());\n    assertNull(playlist.getTracks().get(1).getCover());\n    assertNull(playlist.getTracks().get(1).getFiles());\n    assertNull(playlist.getTracks().get(1).getLength());\n    assertNull(playlist.getTracks().get(1).getPopularity());\n    assertNull(playlist.getTracks().get(1).getTrackNumber());\n    assertNull(playlist.getTracks().get(1).getYear());\n\n    assertEquals(\"fc1f1b5860f04a739971fcad9c1cd634\", playlist.getTracks().get(2).getId());\n    assertEquals(\"spotify:track:7FKhuZtIPchBVNIhFnNL5W\", playlist.getTracks().get(2).getSpotifyURI());\n    assertEquals(\"http://open.spotify.com/track/7FKhuZtIPchBVNIhFnNL5W\", playlist.getTracks().get(2).getHttpURL());\n    assertNull(playlist.getTracks().get(2).getTitle());\n    assertNull(playlist.getTracks().get(2).getCover());\n    assertNull(playlist.getTracks().get(2).getFiles());\n    assertNull(playlist.getTracks().get(2).getLength());\n    assertNull(playlist.getTracks().get(2).getPopularity());\n    assertNull(playlist.getTracks().get(2).getTrackNumber());\n    assertNull(playlist.getTracks().get(2).getYear());\n\n    assertEquals(\"7093f50c9ecf428eb780348c076f9f7f\", playlist.getTracks().get(3).getId());\n    assertEquals(\"spotify:track:3qqKWUVfiLMrNPacFRzTzh\", playlist.getTracks().get(3).getSpotifyURI());\n    assertEquals(\"http://open.spotify.com/track/3qqKWUVfiLMrNPacFRzTzh\", playlist.getTracks().get(3).getHttpURL());\n    assertNull(playlist.getTracks().get(3).getTitle());\n    assertNull(playlist.getTracks().get(3).getCover());\n    assertNull(playlist.getTracks().get(3).getFiles());\n    assertNull(playlist.getTracks().get(3).getLength());\n    assertNull(playlist.getTracks().get(3).getPopularity());\n    assertNull(playlist.getTracks().get(3).getTrackNumber());\n    assertNull(playlist.getTracks().get(3).getYear());\n\n    assertEquals(\"48daf12f96f84793a526b579aa4d1f66\", playlist.getTracks().get(4).getId());\n    assertEquals(\"spotify:track:2dtvgPd3vsotKXtGk4dWlg\", playlist.getTracks().get(4).getSpotifyURI());\n    assertEquals(\"http://open.spotify.com/track/2dtvgPd3vsotKXtGk4dWlg\", playlist.getTracks().get(4).getHttpURL());\n    assertNull(playlist.getTracks().get(4).getTitle());\n    assertNull(playlist.getTracks().get(4).getCover());\n    assertNull(playlist.getTracks().get(4).getFiles());\n    assertNull(playlist.getTracks().get(4).getLength());\n    assertNull(playlist.getTracks().get(4).getPopularity());\n    assertNull(playlist.getTracks().get(4).getTrackNumber());\n    assertNull(playlist.getTracks().get(4).getYear());\n\n\n  }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "TestLoadPlaylist.test()", "testcase": true, "constructor": false, "invocations": ["getPlaylist", "toHex", "send", "assertEquals", "getName", "assertEquals", "longValue", "getRevision", "assertEquals", "longValue", "getChecksum", "assertEquals", "calculateChecksum", "assertEquals", "getAuthor", "assertFalse", "isCollaborative", "assertEquals", "getId", "assertEquals", "size", "getTracks", "assertEquals", "getId", "get", "getTracks", "assertEquals", "getSpotifyURI", "get", "getTracks", "assertEquals", "getHttpURL", "get", "getTracks", "assertNull", "getTitle", "get", "getTracks", "assertNull", "getCover", "get", "getTracks", "assertNull", "getFiles", "get", "getTracks", "assertNull", "getLength", "get", "getTracks", "assertNull", "getPopularity", "get", "getTracks", "assertNull", "getTrackNumber", "get", "getTracks", "assertNull", "getYear", "get", "getTracks", "assertEquals", "getId", "get", "getTracks", "assertEquals", "getSpotifyURI", "get", "getTracks", "assertEquals", "getHttpURL", "get", "getTracks", "assertNull", "getTitle", "get", "getTracks", "assertNull", "getCover", "get", "getTracks", "assertNull", "getFiles", "get", "getTracks", "assertNull", "getLength", "get", "getTracks", "assertNull", "getPopularity", "get", "getTracks", "assertNull", "getTrackNumber", "get", "getTracks", "assertNull", "getYear", "get", "getTracks", "assertEquals", "getId", "get", "getTracks", "assertEquals", "getSpotifyURI", "get", "getTracks", "assertEquals", "getHttpURL", "get", "getTracks", "assertNull", "getTitle", "get", "getTracks", "assertNull", "getCover", "get", "getTracks", "assertNull", "getFiles", "get", "getTracks", "assertNull", "getLength", "get", "getTracks", "assertNull", "getPopularity", "get", "getTracks", "assertNull", "getTrackNumber", "get", "getTracks", "assertNull", "getYear", "get", "getTracks", "assertEquals", "getId", "get", "getTracks", "assertEquals", "getSpotifyURI", "get", "getTracks", "assertEquals", "getHttpURL", "get", "getTracks", "assertNull", "getTitle", "get", "getTracks", "assertNull", "getCover", "get", "getTracks", "assertNull", "getFiles", "get", "getTracks", "assertNull", "getLength", "get", "getTracks", "assertNull", "getPopularity", "get", "getTracks", "assertNull", "getTrackNumber", "get", "getTracks", "assertNull", "getYear", "get", "getTracks", "assertEquals", "getId", "get", "getTracks", "assertEquals", "getSpotifyURI", "get", "getTracks", "assertEquals", "getHttpURL", "get", "getTracks", "assertNull", "getTitle", "get", "getTracks", "assertNull", "getCover", "get", "getTracks", "assertNull", "getFiles", "get", "getTracks", "assertNull", "getLength", "get", "getTracks", "assertNull", "getPopularity", "get", "getTracks", "assertNull", "getTrackNumber", "get", "getTracks", "assertNull", "getYear", "get", "getTracks"]}, "focal_class": {"identifier": "LoadPlaylist", "superclass": "extends Command<Boolean>", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(LoadPlaylist.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoadPlaylist.class)", "var_name": "log"}, {"original_string": "private Store store;", "modifier": "private", "type": "Store", "declarator": "store", "var_name": "store"}, {"original_string": "private Playlist playlist;", "modifier": "private", "type": "Playlist", "declarator": "playlist", "var_name": "playlist"}], "methods": [{"identifier": "LoadPlaylist", "parameters": "(Store store, Playlist playlist)", "modifiers": "public", "return": "", "signature": " LoadPlaylist(Store store, Playlist playlist)", "full_signature": "public  LoadPlaylist(Store store, Playlist playlist)", "class_method_signature": "LoadPlaylist.LoadPlaylist(Store store, Playlist playlist)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(Connection connection)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean send(Connection connection)", "full_signature": "@Override public Boolean send(Connection connection)", "class_method_signature": "LoadPlaylist.send(Connection connection)", "testcase": false, "constructor": false}], "file": "java/tags/0.4.1/src/main/java/se/despotify/client/protocol/command/media/playlist/LoadPlaylist.java"}, "focal_method": {"identifier": "send", "parameters": "(Connection connection)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n  public Boolean send(Connection connection) throws DespotifyException {\n    byte[] data;\n\n\n    /* Create channel callback */\n    ChannelCallback callback = new ChannelCallback();\n\n    /* Create channel and buffer. */\n    Channel channel = new Channel(\"Playlist-Channel\", Channel.Type.TYPE_PLAYLIST, callback);\n    ByteBuffer buffer = ByteBuffer.allocate(2 + 16 + 1 + 4 + 4 + 4 + 1);\n\n    /* Append channel id, playlist id and some bytes... */\n    buffer.putShort((short) channel.getId());\n    buffer.put(playlist.getByteUUID()); /// playlist UUID\n    buffer.put((byte) 0x02); // playlist UUID type\n\n    // todo if getTracks() == null..\n    buffer.putInt(-1); // playlist history. -1: current. 0: changes since version 0, 1: since version 1, etc.\n\n    buffer.putInt(0); // unknown\n    buffer.putInt(-1); // checksum?\n    buffer.put((byte) 0x01);\n    buffer.flip();\n    /* Register channel. */\n    Channel.register(channel);\n\n    /* Send packet. */\n    connection.getProtocol().sendPacket(PacketType.getPlaylist, buffer, \"get playlist\");\n\n    /* Get data and inflate it. */\n    data = callback.getData(\"get playlist response\");\n\n    if (data.length == 0) {\n      throw new DespotifyException(\"Received an empty response\");\n    }\n\n    /* Load XML. */\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?><playlist>\" +\n        new String(data, Charset.forName(\"UTF-8\")) +\n        \"</playlist>\";\n    XMLElement playlistElement = XML.load(xml);\n    if (log.isDebugEnabled()) {\n      log.debug(xml);\n    }\n    /* Create and return playlist. */\n    Playlist.fromXMLElement(playlistElement, store, playlist);\n\n    if (playlist.getTracks() != null && playlist.getChecksum() != playlist.calculateChecksum()) {\n      throw new ChecksumException(playlist.getChecksum(), playlist.calculateChecksum());\n    }\n\n    playlist.setLoaded(new Date());\n    return true;\n\n\n  }", "signature": "Boolean send(Connection connection)", "full_signature": "@Override public Boolean send(Connection connection)", "class_method_signature": "LoadPlaylist.send(Connection connection)", "testcase": false, "constructor": false, "invocations": ["allocate", "putShort", "getId", "put", "getByteUUID", "put", "putInt", "putInt", "putInt", "put", "flip", "register", "sendPacket", "getProtocol", "getData", "forName", "load", "isDebugEnabled", "debug", "fromXMLElement", "getTracks", "getChecksum", "calculateChecksum", "getChecksum", "calculateChecksum", "setLoaded"]}, "repository": {"repo_id": 279216, "url": "https://github.com/gusax/despotify", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 13, "size": 4311, "license": "licensed"}}