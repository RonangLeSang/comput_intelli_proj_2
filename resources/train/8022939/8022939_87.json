{"test_class": {"identifier": "PropertiesLocalizationLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LocalizationLoader loader = new PropertiesLocalizationLoader();", "modifier": "private final", "type": "LocalizationLoader", "declarator": "loader = new PropertiesLocalizationLoader()", "var_name": "loader"}], "file": "core/src/test/java/com/vityuk/ginger/loader/PropertiesLocalizationLoaderTest.java"}, "test_case": {"identifier": "testLoadListProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadListProperties() throws Exception {\n        String content = \"\" +\n                \"vegetables=potato,squash,carrot,beat\\n\" +\n                \"fruits                           apple,  banana\\t, pear, \\\\\\n\" +\n                \"                                  cantaloupe, \\twatermelon, \\\\\\r\\n\" +\n                \"                                  kiwi , mango\";\n\n        PropertyResolver propertyResolver = load(content);\n\n        assertThat(propertyResolver.getStringList(\"vegetables\")).isNotNull().hasSize(4).\n                containsExactly(\"potato\", \"squash\", \"carrot\", \"beat\");\n\n        assertThat(propertyResolver.getStringList(\"fruits\")).isNotNull().hasSize(7).\n                containsExactly(\"apple\", \"banana\", \"pear\", \"cantaloupe\", \"watermelon\", \"kiwi\", \"mango\");\n    }", "signature": "void testLoadListProperties()", "full_signature": "@Test public void testLoadListProperties()", "class_method_signature": "PropertiesLocalizationLoaderTest.testLoadListProperties()", "testcase": true, "constructor": false, "invocations": ["load", "containsExactly", "hasSize", "isNotNull", "assertThat", "getStringList", "containsExactly", "hasSize", "isNotNull", "assertThat", "getStringList"]}, "focal_class": {"identifier": "PropertiesLocalizationLoader", "superclass": "", "interfaces": "implements LocalizationLoader", "fields": [{"original_string": "private static final CharMatcher COMMENT_MATCHER = CharMatcher.anyOf(\"#!\");", "modifier": "private static final", "type": "CharMatcher", "declarator": "COMMENT_MATCHER = CharMatcher.anyOf(\"#!\")", "var_name": "COMMENT_MATCHER"}, {"original_string": "private static final CharMatcher LINE_SEPARATOR_MATCHER = CharMatcher.anyOf(\"\\n\\r\");", "modifier": "private static final", "type": "CharMatcher", "declarator": "LINE_SEPARATOR_MATCHER = CharMatcher.anyOf(\"\\n\\r\")", "var_name": "LINE_SEPARATOR_MATCHER"}, {"original_string": "private static final CharMatcher NOT_LINE_SEPARATOR_MATCHER = LINE_SEPARATOR_MATCHER.negate();", "modifier": "private static final", "type": "CharMatcher", "declarator": "NOT_LINE_SEPARATOR_MATCHER = LINE_SEPARATOR_MATCHER.negate()", "var_name": "NOT_LINE_SEPARATOR_MATCHER"}, {"original_string": "private static final CharMatcher WHITESPACE_MATCHER = CharMatcher.BREAKING_WHITESPACE.and(NOT_LINE_SEPARATOR_MATCHER);", "modifier": "private static final", "type": "CharMatcher", "declarator": "WHITESPACE_MATCHER = CharMatcher.BREAKING_WHITESPACE.and(NOT_LINE_SEPARATOR_MATCHER)", "var_name": "WHITESPACE_MATCHER"}, {"original_string": "private static final CharMatcher KEY_VALUE_SEPARATOR_MATCHER = CharMatcher.anyOf(\"=:\");", "modifier": "private static final", "type": "CharMatcher", "declarator": "KEY_VALUE_SEPARATOR_MATCHER = CharMatcher.anyOf(\"=:\")", "var_name": "KEY_VALUE_SEPARATOR_MATCHER"}, {"original_string": "private static final CharMatcher WHITESPACE_OR_SEPARATOR_MATCHER =  KEY_VALUE_SEPARATOR_MATCHER.or(CharMatcher.BREAKING_WHITESPACE);", "modifier": "private static final", "type": "CharMatcher", "declarator": "WHITESPACE_OR_SEPARATOR_MATCHER =  KEY_VALUE_SEPARATOR_MATCHER.or(CharMatcher.BREAKING_WHITESPACE)", "var_name": "WHITESPACE_OR_SEPARATOR_MATCHER"}, {"original_string": "private static final Pattern MAP_KEY_PATTERN = Pattern.compile(\"([^\\\\[\\\\]]+)\\\\[([^\\\\[\\\\]]+)\\\\]\");", "modifier": "private static final", "type": "Pattern", "declarator": "MAP_KEY_PATTERN = Pattern.compile(\"([^\\\\[\\\\]]+)\\\\[([^\\\\[\\\\]]+)\\\\]\")", "var_name": "MAP_KEY_PATTERN"}], "methods": [{"identifier": "load", "parameters": "(InputStream inputStream)", "modifiers": "@Override public", "return": "PropertyResolver", "signature": "PropertyResolver load(InputStream inputStream)", "full_signature": "@Override public PropertyResolver load(InputStream inputStream)", "class_method_signature": "PropertiesLocalizationLoader.load(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(MatchingReader reader)", "modifiers": "private", "return": "PropertyResolver", "signature": "PropertyResolver load(MatchingReader reader)", "full_signature": "private PropertyResolver load(MatchingReader reader)", "class_method_signature": "PropertiesLocalizationLoader.load(MatchingReader reader)", "testcase": false, "constructor": false}, {"identifier": "createPropertyResolver", "parameters": "(Map<String, Map<String, String>> mapProperties)", "modifiers": "protected", "return": "PropertyResolver", "signature": "PropertyResolver createPropertyResolver(Map<String, Map<String, String>> mapProperties)", "full_signature": "protected PropertyResolver createPropertyResolver(Map<String, Map<String, String>> mapProperties)", "class_method_signature": "PropertiesLocalizationLoader.createPropertyResolver(Map<String, Map<String, String>> mapProperties)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/vityuk/ginger/loader/PropertiesLocalizationLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(InputStream inputStream)", "modifiers": "@Override public", "return": "PropertyResolver", "body": "@Override\n    public PropertyResolver load(InputStream inputStream) throws IOException {\n        MatchingReader reader = new MatchingReader(new BufferedReader(new InputStreamReader(inputStream)));\n        return load(reader);\n    }", "signature": "PropertyResolver load(InputStream inputStream)", "full_signature": "@Override public PropertyResolver load(InputStream inputStream)", "class_method_signature": "PropertiesLocalizationLoader.load(InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["load"]}, "repository": {"repo_id": 8022939, "url": "https://github.com/avityuk/ginger", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 273, "license": "licensed"}}