{"test_class": {"identifier": "LuaAstScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "lua-squid/src/test/java/org/sonar/lua/LuaAstScannerTest.java"}, "test_case": {"identifier": "lines_of_code", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\t  public void lines_of_code() {\n\t    SourceFile file = LuaAstScanner.scanSingleFile(new File(\"src/test/resources/metrics/line_of_code.lua\"));\n\t    assertThat(file.getInt(LuaMetric.LINES_OF_CODE)).isEqualTo(15);\n\t  }", "signature": "void lines_of_code()", "full_signature": "@Test public void lines_of_code()", "class_method_signature": "LuaAstScannerTest.lines_of_code()", "testcase": true, "constructor": false, "invocations": ["scanSingleFile", "isEqualTo", "assertThat", "getInt"]}, "focal_class": {"identifier": "LuaAstScanner", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "LuaAstScanner", "parameters": "()", "modifiers": "private", "return": "", "signature": " LuaAstScanner()", "full_signature": "private  LuaAstScanner()", "class_method_signature": "LuaAstScanner.LuaAstScanner()", "testcase": false, "constructor": true}, {"identifier": "scanSingleFile", "parameters": "(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "modifiers": "public static", "return": "SourceFile", "signature": "SourceFile scanSingleFile(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "full_signature": "public static SourceFile scanSingleFile(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "class_method_signature": "LuaAstScanner.scanSingleFile(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(LuaConfiguration conf, List<SquidAstVisitor<LexerlessGrammar>> visitors)", "modifiers": "public static", "return": "AstScanner<LexerlessGrammar>", "signature": "AstScanner<LexerlessGrammar> create(LuaConfiguration conf, List<SquidAstVisitor<LexerlessGrammar>> visitors)", "full_signature": "public static AstScanner<LexerlessGrammar> create(LuaConfiguration conf, List<SquidAstVisitor<LexerlessGrammar>> visitors)", "class_method_signature": "LuaAstScanner.create(LuaConfiguration conf, List<SquidAstVisitor<LexerlessGrammar>> visitors)", "testcase": false, "constructor": false}], "file": "lua-squid/src/main/java/org/sonar/lua/LuaAstScanner.java"}, "focal_method": {"identifier": "scanSingleFile", "parameters": "(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "modifiers": "public static", "return": "SourceFile", "body": "public static SourceFile scanSingleFile(File file, SquidAstVisitor<LexerlessGrammar>... visitors) {\n    if (!file.isFile()) {\n      throw new IllegalArgumentException(\"File '\" + file + \"' not found.\");\n    }\n\n    AstScanner<LexerlessGrammar> scanner = create(new LuaConfiguration(Charsets.UTF_8), Arrays.asList(visitors));\n    scanner.scanFile(file);\n    Collection<SourceCode> sources = scanner.getIndex().search(new QueryByType(SourceFile.class));\n    if (sources.size() != 1) {\n      throw new IllegalStateException(\"Only one SourceFile was expected whereas \" + sources.size() + \" has been returned.\");\n    }\n    return (SourceFile) sources.iterator().next();\n  }", "signature": "SourceFile scanSingleFile(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "full_signature": "public static SourceFile scanSingleFile(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "class_method_signature": "LuaAstScanner.scanSingleFile(File file, SquidAstVisitor<LexerlessGrammar>... visitors)", "testcase": false, "constructor": false, "invocations": ["isFile", "create", "asList", "scanFile", "search", "getIndex", "size", "size", "next", "iterator"]}, "repository": {"repo_id": 8135809, "url": "https://github.com/SonarQubeCommunity/sonar-lua", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 10, "size": 593, "license": "licensed"}}