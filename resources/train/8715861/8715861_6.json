{"test_class": {"identifier": "PGTypeTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "driver/src/test/java/com/impossibl/postgres/system/tables/PGTypeTableTest.java"}, "test_case": {"identifier": "testGetSQLVersionInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetSQLVersionInvalid() {\n    thrown.expect(UnsupportedServerVersion.class);\n    assertEquals(INSTANCE.getSQL(Version.parse(\"8.0.0\")), SQL[1]);\n  }", "signature": "void testGetSQLVersionInvalid()", "full_signature": "@Test public void testGetSQLVersionInvalid()", "class_method_signature": "PGTypeTableTest.testGetSQLVersionInvalid()", "testcase": true, "constructor": false, "invocations": ["expect", "assertEquals", "getSQL", "parse"]}, "focal_class": {"identifier": "PGTypeTable", "superclass": "", "interfaces": "implements Table<PGTypeTable.Row>", "fields": [{"original_string": "private static final int OID = 0;", "modifier": "private static final", "type": "int", "declarator": "OID = 0", "var_name": "OID"}, {"original_string": "private static final int NAME = 1;", "modifier": "private static final", "type": "int", "declarator": "NAME = 1", "var_name": "NAME"}, {"original_string": "private static final int LENGTH = 2;", "modifier": "private static final", "type": "int", "declarator": "LENGTH = 2", "var_name": "LENGTH"}, {"original_string": "private static final int DISCRIMINATOR = 3;", "modifier": "private static final", "type": "int", "declarator": "DISCRIMINATOR = 3", "var_name": "DISCRIMINATOR"}, {"original_string": "private static final int CATEGORY = 4;", "modifier": "private static final", "type": "int", "declarator": "CATEGORY = 4", "var_name": "CATEGORY"}, {"original_string": "private static final int DELIMINATOR = 5;", "modifier": "private static final", "type": "int", "declarator": "DELIMINATOR = 5", "var_name": "DELIMINATOR"}, {"original_string": "private static final int RELATION_ID = 6;", "modifier": "private static final", "type": "int", "declarator": "RELATION_ID = 6", "var_name": "RELATION_ID"}, {"original_string": "private static final int ELEMENT_TYPE_ID = 7;", "modifier": "private static final", "type": "int", "declarator": "ELEMENT_TYPE_ID = 7", "var_name": "ELEMENT_TYPE_ID"}, {"original_string": "private static final int ARRAY_TYPE_ID = 8;", "modifier": "private static final", "type": "int", "declarator": "ARRAY_TYPE_ID = 8", "var_name": "ARRAY_TYPE_ID"}, {"original_string": "private static final int INPUT_ID = 9;", "modifier": "private static final", "type": "int", "declarator": "INPUT_ID = 9", "var_name": "INPUT_ID"}, {"original_string": "private static final int OUTPUT_ID = 10;", "modifier": "private static final", "type": "int", "declarator": "OUTPUT_ID = 10", "var_name": "OUTPUT_ID"}, {"original_string": "private static final int RECEIVE_ID = 11;", "modifier": "private static final", "type": "int", "declarator": "RECEIVE_ID = 11", "var_name": "RECEIVE_ID"}, {"original_string": "private static final int SEND_ID = 12;", "modifier": "private static final", "type": "int", "declarator": "SEND_ID = 12", "var_name": "SEND_ID"}, {"original_string": "private static final int MOD_IN_ID = 13;", "modifier": "private static final", "type": "int", "declarator": "MOD_IN_ID = 13", "var_name": "MOD_IN_ID"}, {"original_string": "private static final int MOD_OUT_ID = 14;", "modifier": "private static final", "type": "int", "declarator": "MOD_OUT_ID = 14", "var_name": "MOD_OUT_ID"}, {"original_string": "private static final int ALIGNMENT = 15;", "modifier": "private static final", "type": "int", "declarator": "ALIGNMENT = 15", "var_name": "ALIGNMENT"}, {"original_string": "private static final int NAMESPACE = 16;", "modifier": "private static final", "type": "int", "declarator": "NAMESPACE = 16", "var_name": "NAMESPACE"}, {"original_string": "private static final int DOMAIN_BASE_TYPE_ID = 17;", "modifier": "private static final", "type": "int", "declarator": "DOMAIN_BASE_TYPE_ID = 17", "var_name": "DOMAIN_BASE_TYPE_ID"}, {"original_string": "private static final int DOMAIN_TYPE_MOD = 18;", "modifier": "private static final", "type": "int", "declarator": "DOMAIN_TYPE_MOD = 18", "var_name": "DOMAIN_TYPE_MOD"}, {"original_string": "private static final int DOMAIN_NOT_NULL = 19;", "modifier": "private static final", "type": "int", "declarator": "DOMAIN_NOT_NULL = 19", "var_name": "DOMAIN_NOT_NULL"}, {"original_string": "private static final int DOMAIN_DEFAULT = 20;", "modifier": "private static final", "type": "int", "declarator": "DOMAIN_DEFAULT = 20", "var_name": "DOMAIN_DEFAULT"}, {"original_string": "private static final int RANGE_BASE_TYPE_ID = 21;", "modifier": "private static final", "type": "int", "declarator": "RANGE_BASE_TYPE_ID = 21", "var_name": "RANGE_BASE_TYPE_ID"}, {"original_string": "public static final PGTypeTable INSTANCE = new PGTypeTable();", "modifier": "public static final", "type": "PGTypeTable", "declarator": "INSTANCE = new PGTypeTable()", "var_name": "INSTANCE"}, {"original_string": "public static final Object[] SQL = {\n    Version.get(9, 2, 0),\n    \" SELECT\" +\n        \" t.oid, typname, typlen, typtype, typcategory, typdelim, typrelid, typelem, typarray,\" +\n        \" typinput::text, typoutput::text, typreceive::text, typsend::text, typmodin::text, typmodout::text,\" +\n        \" typalign, n.nspname, typbasetype, typtypmod, typnotnull, pg_catalog.pg_get_expr(typdefaultbin,0), rngsubtype\" +\n        \" FROM\" +\n        \"   pg_catalog.pg_type t\" +\n        \" LEFT JOIN pg_catalog.pg_namespace n ON (t.typnamespace = n.oid)\" +\n        \" LEFT JOIN pg_catalog.pg_range r ON (t.oid = r.rngtypid)\",\n    Version.get(9, 1, 0),\n    \" SELECT\" +\n        \" t.oid, typname, typlen, typtype, typcategory, typdelim, typrelid, typelem, typarray,\" +\n        \" typinput::text, typoutput::text, typreceive::text, typsend::text, typmodin::text, typmodout::text,\" +\n        \" typalign, n.nspname, typbasetype, typtypmod, typnotnull, pg_catalog.pg_get_expr(typdefaultbin,0), NULL\" +\n        \" FROM\" +\n        \"   pg_catalog.pg_type t\" +\n        \" LEFT JOIN pg_catalog.pg_namespace n ON (t.typnamespace = n.oid)\",\n  };", "modifier": "public static final", "type": "Object[]", "declarator": "SQL = {\n    Version.get(9, 2, 0),\n    \" SELECT\" +\n        \" t.oid, typname, typlen, typtype, typcategory, typdelim, typrelid, typelem, typarray,\" +\n        \" typinput::text, typoutput::text, typreceive::text, typsend::text, typmodin::text, typmodout::text,\" +\n        \" typalign, n.nspname, typbasetype, typtypmod, typnotnull, pg_catalog.pg_get_expr(typdefaultbin,0), rngsubtype\" +\n        \" FROM\" +\n        \"   pg_catalog.pg_type t\" +\n        \" LEFT JOIN pg_catalog.pg_namespace n ON (t.typnamespace = n.oid)\" +\n        \" LEFT JOIN pg_catalog.pg_range r ON (t.oid = r.rngtypid)\",\n    Version.get(9, 1, 0),\n    \" SELECT\" +\n        \" t.oid, typname, typlen, typtype, typcategory, typdelim, typrelid, typelem, typarray,\" +\n        \" typinput::text, typoutput::text, typreceive::text, typsend::text, typmodin::text, typmodout::text,\" +\n        \" typalign, n.nspname, typbasetype, typtypmod, typnotnull, pg_catalog.pg_get_expr(typdefaultbin,0), NULL\" +\n        \" FROM\" +\n        \"   pg_catalog.pg_type t\" +\n        \" LEFT JOIN pg_catalog.pg_namespace n ON (t.typnamespace = n.oid)\",\n  }", "var_name": "SQL"}], "methods": [{"identifier": "PGTypeTable", "parameters": "()", "modifiers": "private", "return": "", "signature": " PGTypeTable()", "full_signature": "private  PGTypeTable()", "class_method_signature": "PGTypeTable.PGTypeTable()", "testcase": false, "constructor": true}, {"identifier": "getSQL", "parameters": "(Version currentVersion)", "modifiers": "@Override public", "return": "String", "signature": "String getSQL(Version currentVersion)", "full_signature": "@Override public String getSQL(Version currentVersion)", "class_method_signature": "PGTypeTable.getSQL(Version currentVersion)", "testcase": false, "constructor": false}, {"identifier": "createRow", "parameters": "(Context context, ResultBatch resultBatch, int rowIdx)", "modifiers": "@Override public", "return": "Row", "signature": "Row createRow(Context context, ResultBatch resultBatch, int rowIdx)", "full_signature": "@Override public Row createRow(Context context, ResultBatch resultBatch, int rowIdx)", "class_method_signature": "PGTypeTable.createRow(Context context, ResultBatch resultBatch, int rowIdx)", "testcase": false, "constructor": false}], "file": "driver/src/main/java/com/impossibl/postgres/system/tables/PGTypeTable.java"}, "focal_method": {"identifier": "getSQL", "parameters": "(Version currentVersion)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String getSQL(Version currentVersion) {\n    return Tables.getSQL(SQL, currentVersion);\n  }", "signature": "String getSQL(Version currentVersion)", "full_signature": "@Override public String getSQL(Version currentVersion)", "class_method_signature": "PGTypeTable.getSQL(Version currentVersion)", "testcase": false, "constructor": false, "invocations": ["getSQL"]}, "repository": {"repo_id": 8715861, "url": "https://github.com/impossibl/pgjdbc-ng", "language": "Java", "is_fork": false, "fork_count": 88, "stargazer_count": 456, "size": 64587, "license": "licensed"}}