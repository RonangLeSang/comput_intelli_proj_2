{"test_class": {"identifier": "TestChebyshev", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestChebyshev.java"}, "test_case": {"identifier": "auto_test25", "parameters": "()", "modifiers": "@Test //jfquesada public", "return": "void", "body": "@Test\n\t//jfquesada\n\tpublic void auto_test25(){\n\t\tdouble[] v1 = new double[]{57.893535887405974, 929.2352024183152, 636.178976323308, 865.5819632583574, 807.0723744899535, 614.3529437012545, 159.64524835538464, 106.17435302216293, 510.53437363909546, 334.51574300683416};\n\t\tdouble[] v2 = new double[]{992.6258984685936, 353.31613668963115, 429.96435147751555, 32.12758237825919, 214.9974528392754, 5.7143219964932435, 629.3242906094608, 528.4725805749803, 229.55294947171123, 313.95774795225304};\n\t\tdouble res = Chebyshev.distance(v1, v2);\n\t\tdouble ref = 934.7323625811877;\n\t\tAsserts.assertDistance(ref);\n\t\tAsserts.assertEquals(res, ref);\n\t}", "signature": "void auto_test25()", "full_signature": "@Test //jfquesada public void auto_test25()", "class_method_signature": "TestChebyshev.auto_test25()", "testcase": true, "constructor": false, "invocations": ["distance", "assertDistance", "assertEquals"]}, "focal_class": {"identifier": "Chebyshev", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(double[] v1,double[] v2)", "modifiers": "public static", "return": "double", "signature": "double distance(double[] v1,double[] v2)", "full_signature": "public static double distance(double[] v1,double[] v2)", "class_method_signature": "Chebyshev.distance(double[] v1,double[] v2)", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/Chebyshev.java"}, "focal_method": {"identifier": "distance", "parameters": "(double[] v1,double[] v2)", "modifiers": "public static", "return": "double", "body": "public static double distance(double[] v1,double[] v2){\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tdouble[] res=new double[v1.length];\n\t\tfor(int i=0;i<v1.length;i++){\n\t\t\tres[i] = Math.abs(v1[i]-v2[i]);\n\t\t}\n\t\treturn CommonStats.max(res);\n\t}", "signature": "double distance(double[] v1,double[] v2)", "full_signature": "public static double distance(double[] v1,double[] v2)", "class_method_signature": "Chebyshev.distance(double[] v1,double[] v2)", "testcase": false, "constructor": false, "invocations": ["assertEqualLength", "abs", "max"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}