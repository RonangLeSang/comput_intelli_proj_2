{"test_class": {"identifier": "TestMahalanobis", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestMahalanobis.java"}, "test_case": {"identifier": "test02", "parameters": "()", "modifiers": "@Test // jfquesada public", "return": "void", "body": "@Test\n\t// jfquesada\n\tpublic void test02() {\n\t\tdouble[] v1 = new double[] {1, 12, 5};\n\t\tdouble[] v2 = new double[] {0, 14, 7};\n\t\tRealMatrix m1 = new Array2DRowRealMatrix(new double[][] { {10.70, -17.95, 1.55}, {-17.95, 44.20, 0.95}, {1.55, 0.95, 3.70} });\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tdouble res = Mahalanobis.distance(m1, v1, v2);\n\t\tAsserts.assertEquals(res, 1.323220219);\n\t}", "signature": "void test02()", "full_signature": "@Test // jfquesada public void test02()", "class_method_signature": "TestMahalanobis.test02()", "testcase": true, "constructor": false, "invocations": ["assertEqualLength", "distance", "assertEquals"]}, "focal_class": {"identifier": "Mahalanobis", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(RealMatrix m1, double v1[], double v2[])", "modifiers": "public static", "return": "double", "signature": "double distance(RealMatrix m1, double v1[], double v2[])", "full_signature": "public static double distance(RealMatrix m1, double v1[], double v2[])", "class_method_signature": "Mahalanobis.distance(RealMatrix m1, double v1[], double v2[])", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/Mahalanobis.java"}, "focal_method": {"identifier": "distance", "parameters": "(RealMatrix m1, double v1[], double v2[])", "modifiers": "public static", "return": "double", "body": "public static double distance(RealMatrix m1, double v1[], double v2[]) {\n\t\t\t\tdouble det = Math.pow((new LUDecompositionImpl(m1).getDeterminant()), 1/(v1.length));\n\t\t\t\tdouble[] tempSub = new double[v1.length];\n\t\t\t\tfor(int i=0; i < v1.length; i++){\n\t\t\t\t\ttempSub[i] = (v1[i]-v2[i]);\n\t\t\t\t}\n\t\t\t\tdouble[] temp = new double[v1.length];\n\t\t\t\tfor(int i=0; i < temp.length; i++){\n\t\t\t\t\ttemp[i] = tempSub[i]*det;\n\t\t\t\t}\n\t\t\t\tRealMatrix m2 = new Array2DRowRealMatrix(new double[][] { temp });\n\t\t\t\tRealMatrix m3 = m2.multiply(new LUDecompositionImpl(m1).getSolver().getInverse());\n\t\t\t\tRealMatrix m4 = m3.multiply((new Array2DRowRealMatrix(new double[][] { temp })).transpose());\n\t\t\t\treturn Math.sqrt(m4.getEntry(0, 0));\n\n\t\t}", "signature": "double distance(RealMatrix m1, double v1[], double v2[])", "full_signature": "public static double distance(RealMatrix m1, double v1[], double v2[])", "class_method_signature": "Mahalanobis.distance(RealMatrix m1, double v1[], double v2[])", "testcase": false, "constructor": false, "invocations": ["pow", "getDeterminant", "multiply", "getInverse", "getSolver", "multiply", "transpose", "sqrt", "getEntry"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}