{"test_class": {"identifier": "TestL1", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestL1.java"}, "test_case": {"identifier": "auto_test15", "parameters": "()", "modifiers": "@Test //jfquesada public", "return": "void", "body": "@Test\n\t//jfquesada\n\tpublic void auto_test15(){\n\t\tdouble[] v1 = new double[]{-800, 21, -565, 273, -694, -396, 533, 212, 298, 562};\n\t\tdouble[] v2 = new double[]{-562, 631, 125, 839, 94, -97, -765, -45, 320, -542};\n\t\tdouble res = L1.distance(v1, v2);\n\t\tdouble ref = 5872;\n\t\tAsserts.assertDistance(ref);\n\t\tAsserts.assertEquals(res, ref);\n\t}", "signature": "void auto_test15()", "full_signature": "@Test //jfquesada public void auto_test15()", "class_method_signature": "TestL1.auto_test15()", "testcase": true, "constructor": false, "invocations": ["distance", "assertDistance", "assertEquals"]}, "focal_class": {"identifier": "L1", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(double[] v1, double[] v2)", "modifiers": "public static", "return": "double", "signature": "double distance(double[] v1, double[] v2)", "full_signature": "public static double distance(double[] v1, double[] v2)", "class_method_signature": "L1.distance(double[] v1, double[] v2)", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/L1.java"}, "focal_method": {"identifier": "distance", "parameters": "(double[] v1, double[] v2)", "modifiers": "public static", "return": "double", "body": "public static double distance(double[] v1, double[] v2){\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tdouble res = 0;\n\t\tint i = 0;\n\t\twhile(i < v1.length){\n\t\t\tdouble t = CommonStats.abs(v1[i] - v2[i]);\n\t\t\tres += t;\n\t\t\ti++;\n\t\t}\n\t\tAsserts.assertDistance(res);\n\t\treturn res;\n\t}", "signature": "double distance(double[] v1, double[] v2)", "full_signature": "public static double distance(double[] v1, double[] v2)", "class_method_signature": "L1.distance(double[] v1, double[] v2)", "testcase": false, "constructor": false, "invocations": ["assertEqualLength", "abs", "assertDistance"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}