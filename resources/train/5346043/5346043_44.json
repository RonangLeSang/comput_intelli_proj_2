{"test_class": {"identifier": "TestL2", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestL2.java"}, "test_case": {"identifier": "auto_test33", "parameters": "()", "modifiers": "@Test //jfquesada public", "return": "void", "body": "@Test\n\t//jfquesada\n\tpublic void auto_test33(){\n\t\tdouble[] v1 = new double[]{-113.42634745537961, 971.2290531845756, -256.2441608975238, -745.0272839064612, -494.0167496441735, 546.6020127591293, 541.2781438654887, 666.7170839517179, -793.3768524252173, -26.307286454957833};\n\t\tdouble[] v2 = new double[]{-593.8819133368984, -696.6594967851414, 983.7427627519378, 356.9034009294506, -755.3511985154666, -917.1013669587106, -616.7604115752177, 576.050045073799, 517.802833864277, 639.827214042256};\n\t\tdouble res = L2.distance(v1, v2);\n\t\tdouble ref = 3389.311581898672;\n\t\tAsserts.assertDistance(ref);\n\t\tAsserts.assertEquals(res, ref);\n\t}", "signature": "void auto_test33()", "full_signature": "@Test //jfquesada public void auto_test33()", "class_method_signature": "TestL2.auto_test33()", "testcase": true, "constructor": false, "invocations": ["distance", "assertDistance", "assertEquals"]}, "focal_class": {"identifier": "L2", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(double[] v1, double[] v2)", "modifiers": "public static", "return": "double", "signature": "double distance(double[] v1, double[] v2)", "full_signature": "public static double distance(double[] v1, double[] v2)", "class_method_signature": "L2.distance(double[] v1, double[] v2)", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/L2.java"}, "focal_method": {"identifier": "distance", "parameters": "(double[] v1, double[] v2)", "modifiers": "public static", "return": "double", "body": "public static double distance(double[] v1, double[] v2){\n\t\tAsserts.validate(v1.length == v2.length, \"Lengths must match\");\n\t\tdouble res = 0;\n\t\tint i = 0;\n\t\twhile(i < v1.length){\n\t\t\tdouble t = v1[i] - v2[i];\n\t\t\tt = t * t;\n\t\t\tres += t;\n\t\t\ti++;\n\t\t}\n\t\tAsserts.assertDistance(res);\n\t\treturn Math.sqrt(res);\n\t}", "signature": "double distance(double[] v1, double[] v2)", "full_signature": "public static double distance(double[] v1, double[] v2)", "class_method_signature": "L2.distance(double[] v1, double[] v2)", "testcase": false, "constructor": false, "invocations": ["validate", "assertDistance", "sqrt"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}