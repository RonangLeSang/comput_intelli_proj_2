{"test_class": {"identifier": "TestBraunBlanquet", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/binary/TestBraunBlanquet.java"}, "test_case": {"identifier": "test3", "parameters": "()", "modifiers": "@Test //jdsalazar public", "return": "void", "body": "@Test\n\t//jdsalazar\n\tpublic void test3(){\n\t\tint[] v1 = new int[]{1,0,1,1,0};\n\t\tint[] v2 = new int[]{1,1,0,1,1};\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tdouble res = BraunBlanquet.distance(v1, v2);\n\t\tAsserts.assertEquals(res, 0.5);\n\t}", "signature": "void test3()", "full_signature": "@Test //jdsalazar public void test3()", "class_method_signature": "TestBraunBlanquet.test3()", "testcase": true, "constructor": false, "invocations": ["assertEqualLength", "distance", "assertEquals"]}, "focal_class": {"identifier": "BraunBlanquet", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(int[] v1, int[] v2)", "modifiers": "public static", "return": "double", "signature": "double distance(int[] v1, int[] v2)", "full_signature": "public static double distance(int[] v1, int[] v2)", "class_method_signature": "BraunBlanquet.distance(int[] v1, int[] v2)", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/binary/BraunBlanquet.java"}, "focal_method": {"identifier": "distance", "parameters": "(int[] v1, int[] v2)", "modifiers": "public static", "return": "double", "body": "public static double distance(int[] v1, int[] v2){\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tAsserts.assertIsBinary(v1);\n\t\tAsserts.assertIsBinary(v2);\n\t\tAsserts.assertHasAllZeros(v1);\n\t\tAsserts.assertHasAllZeros(v2);\n\t\tint[] matches = CommonStats.processTwoBinaryVectors(v1, v2);\n\t\tint[] binary1 = CommonStats.processSingleBinaryVector(v1);\n\t\tint[] binary2 = CommonStats.processSingleBinaryVector(v2);\n\t\treturn 1-((double)(matches[0])/(double)(CommonStats.max(binary1[0], binary2[0])));\n\t}", "signature": "double distance(int[] v1, int[] v2)", "full_signature": "public static double distance(int[] v1, int[] v2)", "class_method_signature": "BraunBlanquet.distance(int[] v1, int[] v2)", "testcase": false, "constructor": false, "invocations": ["assertEqualLength", "assertIsBinary", "assertIsBinary", "assertHasAllZeros", "assertHasAllZeros", "processTwoBinaryVectors", "processSingleBinaryVector", "processSingleBinaryVector", "max"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}