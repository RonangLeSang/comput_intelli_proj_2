{"test_class": {"identifier": "TestRoberts", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestRoberts.java"}, "test_case": {"identifier": "auto_test21", "parameters": "()", "modifiers": "@Test //jxwang+jfquesada public", "return": "void", "body": "@Test\n\t//jxwang+jfquesada\n\tpublic void auto_test21(){\n\t\tdouble[] v1 = new double[]{7.364858839218932, 1.681033056213912, 2.8205103995348124, 7.865764610173953, 7.543475655590937, 3.836304327223318, 0.3980625841027918, 9.95213480624082, 2.4765494337157157, 1.9170983244374507};\n\t\tdouble[] v2 = new double[]{8.623578326570145, 0.9236829039477923, 3.8147511690775127, 7.432668906179073, 2.4559386526899676, 0.8467132881508443, 4.718289570673527, 6.507787746430772, 5.627200321051045, 4.187219974430247};\n\t\tdouble res = Roberts.distance(v1, v2);\n\t\tdouble ref = 0.6186511550296465;\n\t\tAsserts.assertDistance(ref);\n\t\tAsserts.assertEquals(res, ref);\n\t}", "signature": "void auto_test21()", "full_signature": "@Test //jxwang+jfquesada public void auto_test21()", "class_method_signature": "TestRoberts.auto_test21()", "testcase": true, "constructor": false, "invocations": ["distance", "assertDistance", "assertEquals"]}, "focal_class": {"identifier": "Roberts", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(double[] v1,double[] v2)", "modifiers": "public static", "return": "double", "signature": "double distance(double[] v1,double[] v2)", "full_signature": "public static double distance(double[] v1,double[] v2)", "class_method_signature": "Roberts.distance(double[] v1,double[] v2)", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/Roberts.java"}, "focal_method": {"identifier": "distance", "parameters": "(double[] v1,double[] v2)", "modifiers": "public static", "return": "double", "body": "public static double distance(double[] v1,double[] v2){\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tAsserts.assertPositiveValues(v1);\n\t\tAsserts.assertPositiveValues(v2);\n\t\tdouble sumNum = 0;\n\t\tdouble sumDenom = 0;\n\t\tfor(int i=0;i<v1.length;i++){\n\t\t\tsumNum += (v1[i] + v2[i])*(CommonStats.min(v1[i], v2[i])/CommonStats.max(v1[i], v2[i]));\n\t\t\tsumDenom += (v1[i] + v2[i]);\n\t\t}\n\t\treturn sumNum/sumDenom;\n\t}", "signature": "double distance(double[] v1,double[] v2)", "full_signature": "public static double distance(double[] v1,double[] v2)", "class_method_signature": "Roberts.distance(double[] v1,double[] v2)", "testcase": false, "constructor": false, "invocations": ["assertEqualLength", "assertPositiveValues", "assertPositiveValues", "min", "max"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}