{"test_class": {"identifier": "TestPharmacological", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestPharmacological.java"}, "test_case": {"identifier": "auto_test29", "parameters": "()", "modifiers": "@Test //jfquesada public", "return": "void", "body": "@Test\n\t//jfquesada\n\tpublic void auto_test29(){\n\t\tdouble[] v1 = new double[]{5311.971957231986, 969838.4669147353, 832663.384287972, 48963.35240494554, 35242.24376649599, 892825.4090499423, 483556.0470240916, 53456.08024833648, 497542.41033004754, 225241.83311631696};\n\t\tdouble[] v2 = new double[]{116866.61617976813, 945169.4223279699, 783931.3461809703, 390076.4516430273, 514503.526205468, 391879.8293238419, 448661.23005451274, 225063.0823386256, 439645.4755184985, 128924.70358430353};\n\t\tdouble res = Pharmacological.distance(v1, v2);\n\t\tdouble ref = 809765.0678005908;\n\t\tAsserts.assertDistance(ref);\n\t\tAsserts.assertEquals(res, ref);\n\t}", "signature": "void auto_test29()", "full_signature": "@Test //jfquesada public void auto_test29()", "class_method_signature": "TestPharmacological.auto_test29()", "testcase": true, "constructor": false, "invocations": ["distance", "assertDistance", "assertEquals"]}, "focal_class": {"identifier": "Pharmacological", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(double v1[],double v2[])", "modifiers": "public static", "return": "double", "signature": "double distance(double v1[],double v2[])", "full_signature": "public static double distance(double v1[],double v2[])", "class_method_signature": "Pharmacological.distance(double v1[],double v2[])", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/Pharmacological.java"}, "focal_method": {"identifier": "distance", "parameters": "(double v1[],double v2[])", "modifiers": "public static", "return": "double", "body": "public static double distance(double v1[],double v2[]){\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tdouble res = 0;\n\t\tfor(int i=0;i<v1.length;i++){\n\t\t\tres += Math.pow(v1[i] - v2[i], 2);\n\t\t}\n\t\treturn Math.sqrt(res);\n\t}", "signature": "double distance(double v1[],double v2[])", "full_signature": "public static double distance(double v1[],double v2[])", "class_method_signature": "Pharmacological.distance(double v1[],double v2[])", "testcase": false, "constructor": false, "invocations": ["assertEqualLength", "pow", "sqrt"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}