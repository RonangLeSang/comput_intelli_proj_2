{"test_class": {"identifier": "TestEllenberg", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestEllenberg.java"}, "test_case": {"identifier": "test3", "parameters": "()", "modifiers": "@Test //jdsalazar public", "return": "void", "body": "@Test\n\t//jdsalazar\n\tpublic void test3(){\n\t\tdouble[] v1 = new double[]{248.124,321.574,0,0.001,0};\n\t\tdouble[] v2 = new double[]{0,78.658,417.0004,4.02,0};\n\t\tdouble res = Ellenberg.distance(v1, v2);\n\t\tAsserts.assertEquals(res, 0.233065771);\n\t}", "signature": "void test3()", "full_signature": "@Test //jdsalazar public void test3()", "class_method_signature": "TestEllenberg.test3()", "testcase": true, "constructor": false, "invocations": ["distance", "assertEquals"]}, "focal_class": {"identifier": "Ellenberg", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(double[] v1,double[] v2)", "modifiers": "public static", "return": "double", "signature": "double distance(double[] v1,double[] v2)", "full_signature": "public static double distance(double[] v1,double[] v2)", "class_method_signature": "Ellenberg.distance(double[] v1,double[] v2)", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/Ellenberg.java"}, "focal_method": {"identifier": "distance", "parameters": "(double[] v1,double[] v2)", "modifiers": "public static", "return": "double", "body": "public static double distance(double[] v1,double[] v2){\n\t\tAsserts.assertEqualLength(v1, v2);\n\t\tAsserts.assertHasAllZeros(v1);\n\t\tAsserts.assertHasAllZeros(v2);\n\t\tAsserts.assertPositiveValues(v1);\n\t\tAsserts.assertPositiveValues(v2);\n\t\tdouble sumNum = 0;\n\t\tdouble sumDenom = 0;\n\t\tfor(int i=0;i<v1.length;i++){\n\t\t\tsumNum += (v1[i] + v2[i])*CommonStats.zeroProduct(v1[i],v2[i],false);\n\t\t\tsumDenom += (v1[i] + v2[i])*(1+CommonStats.zeroProduct(v1[i],v2[i],true));\n\t\t}\n\t\treturn sumNum/sumDenom;\n\t}", "signature": "double distance(double[] v1,double[] v2)", "full_signature": "public static double distance(double[] v1,double[] v2)", "class_method_signature": "Ellenberg.distance(double[] v1,double[] v2)", "testcase": false, "constructor": false, "invocations": ["assertEqualLength", "assertHasAllZeros", "assertHasAllZeros", "assertPositiveValues", "assertPositiveValues", "zeroProduct", "zeroProduct"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}