{"test_class": {"identifier": "TestL2", "superclass": "", "interfaces": "", "fields": [], "file": "java/libsim/src/test/java/com/simmachines/libsim/enc/vector/TestL2.java"}, "test_case": {"identifier": "auto_test22", "parameters": "()", "modifiers": "@Test //jfquesada public", "return": "void", "body": "@Test\n\t//jfquesada\n\tpublic void auto_test22(){\n\t\tdouble[] v1 = new double[]{0.4140845087392875, 6.003583849213705, 1.4886049541572322, 0.02549892804812326, 3.5843383964078015, 0.8129944247179832, 2.643823301564595, 3.982695614020555, 2.405586147085713, 7.793963209461551};\n\t\tdouble[] v2 = new double[]{8.053307923421496, 4.974794131853422, 7.133604040977065, 6.553829410150888, 5.901039141950938, 8.493448444939638, 3.306575951927442, 5.356351656924932, 2.1694664322957102, 8.091971188878977};\n\t\tdouble res = L2.distance(v1, v2);\n\t\tdouble ref = 14.167867369937609;\n\t\tAsserts.assertDistance(ref);\n\t\tAsserts.assertEquals(res, ref);\n\t}", "signature": "void auto_test22()", "full_signature": "@Test //jfquesada public void auto_test22()", "class_method_signature": "TestL2.auto_test22()", "testcase": true, "constructor": false, "invocations": ["distance", "assertDistance", "assertEquals"]}, "focal_class": {"identifier": "L2", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "distance", "parameters": "(double[] v1, double[] v2)", "modifiers": "public static", "return": "double", "signature": "double distance(double[] v1, double[] v2)", "full_signature": "public static double distance(double[] v1, double[] v2)", "class_method_signature": "L2.distance(double[] v1, double[] v2)", "testcase": false, "constructor": false}], "file": "java/libsim/src/main/java/com/simmachines/libsim/enc/vector/L2.java"}, "focal_method": {"identifier": "distance", "parameters": "(double[] v1, double[] v2)", "modifiers": "public static", "return": "double", "body": "public static double distance(double[] v1, double[] v2){\n\t\tAsserts.validate(v1.length == v2.length, \"Lengths must match\");\n\t\tdouble res = 0;\n\t\tint i = 0;\n\t\twhile(i < v1.length){\n\t\t\tdouble t = v1[i] - v2[i];\n\t\t\tt = t * t;\n\t\t\tres += t;\n\t\t\ti++;\n\t\t}\n\t\tAsserts.assertDistance(res);\n\t\treturn Math.sqrt(res);\n\t}", "signature": "double distance(double[] v1, double[] v2)", "full_signature": "public static double distance(double[] v1, double[] v2)", "class_method_signature": "L2.distance(double[] v1, double[] v2)", "testcase": false, "constructor": false, "invocations": ["validate", "assertDistance", "sqrt"]}, "repository": {"repo_id": 5346043, "url": "https://github.com/amuller/libsim", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 15, "size": 1173, "license": "licensed"}}