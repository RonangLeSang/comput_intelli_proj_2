{"test_class": {"identifier": "FileHelperTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "ornidroid/src/test/java/fr/ornidroid/helper/FileHelperTest.java"}, "test_case": {"identifier": "testGetCountFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetCountFiles() throws IOException {\n\t\tfinal File destDir = buildOrnidroidHomeTest(TEST_DIRECTORY + \"/destDir\");\n\t\tint countFiles = FileHelper.getCountFiles(destDir);\n\n\t\tAssert.assertEquals(\"6 files expected\", 6, countFiles);\n\n\t}", "signature": "void testGetCountFiles()", "full_signature": "@Test public void testGetCountFiles()", "class_method_signature": "FileHelperTest.testGetCountFiles()", "testcase": true, "constructor": false, "invocations": ["buildOrnidroidHomeTest", "getCountFiles", "assertEquals"]}, "focal_class": {"identifier": "FileHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long ONE_KB = 1024;", "modifier": "public static final", "type": "long", "declarator": "ONE_KB = 1024", "var_name": "ONE_KB"}, {"original_string": "public static final long ONE_MB = ONE_KB * ONE_KB;", "modifier": "public static final", "type": "long", "declarator": "ONE_MB = ONE_KB * ONE_KB", "var_name": "ONE_MB"}, {"original_string": "private static final long FILE_COPY_BUFFER_SIZE = ONE_MB * 30;", "modifier": "private static final", "type": "long", "declarator": "FILE_COPY_BUFFER_SIZE = ONE_MB * 30", "var_name": "FILE_COPY_BUFFER_SIZE"}, {"original_string": "private static final String FILES_PROPERTY_KEY = \"files\";", "modifier": "private static final", "type": "String", "declarator": "FILES_PROPERTY_KEY = \"files\"", "var_name": "FILES_PROPERTY_KEY"}, {"original_string": "private static final String FILES_SEPARATOR_PROPERTY_VALUE = \",\";", "modifier": "private static final", "type": "String", "declarator": "FILES_SEPARATOR_PROPERTY_VALUE = \",\"", "var_name": "FILES_SEPARATOR_PROPERTY_VALUE"}], "methods": [{"identifier": "createEmptyFile", "parameters": "(final File file)", "modifiers": "public static", "return": "void", "signature": "void createEmptyFile(final File file)", "full_signature": "public static void createEmptyFile(final File file)", "class_method_signature": "FileHelper.createEmptyFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "folderSize", "parameters": "(File directory, boolean recursive)", "modifiers": "public static", "return": "int", "signature": "int folderSize(File directory, boolean recursive)", "full_signature": "public static int folderSize(File directory, boolean recursive)", "class_method_signature": "FileHelper.folderSize(File directory, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "doCopyFile", "parameters": "(final File srcFile, final File destFile)", "modifiers": "public static", "return": "void", "signature": "void doCopyFile(final File srcFile, final File destFile)", "full_signature": "public static void doCopyFile(final File srcFile, final File destFile)", "class_method_signature": "FileHelper.doCopyFile(final File srcFile, final File destFile)", "testcase": false, "constructor": false}, {"identifier": "forceDelete", "parameters": "(final File file)", "modifiers": "public static", "return": "void", "signature": "void forceDelete(final File file)", "full_signature": "public static void forceDelete(final File file)", "class_method_signature": "FileHelper.forceDelete(final File file)", "testcase": false, "constructor": false}, {"identifier": "forceMkdir", "parameters": "(final File directory)", "modifiers": "public static", "return": "void", "signature": "void forceMkdir(final File directory)", "full_signature": "public static void forceMkdir(final File directory)", "class_method_signature": "FileHelper.forceMkdir(final File directory)", "testcase": false, "constructor": false}, {"identifier": "moveDirectory", "parameters": "(final File srcDir, final File destDir)", "modifiers": "public static", "return": "void", "signature": "void moveDirectory(final File srcDir, final File destDir)", "full_signature": "public static void moveDirectory(final File srcDir, final File destDir)", "class_method_signature": "FileHelper.moveDirectory(final File srcDir, final File destDir)", "testcase": false, "constructor": false}, {"identifier": "parseContentFile", "parameters": "(final File contentFile)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseContentFile(final File contentFile)", "full_signature": "public static String[] parseContentFile(final File contentFile)", "class_method_signature": "FileHelper.parseContentFile(final File contentFile)", "testcase": false, "constructor": false}, {"identifier": "writeStringToFile", "parameters": "(final File file, final String data,\n\t\t\tfinal Charset encoding, final boolean append)", "modifiers": "public static", "return": "void", "signature": "void writeStringToFile(final File file, final String data,\n\t\t\tfinal Charset encoding, final boolean append)", "full_signature": "public static void writeStringToFile(final File file, final String data,\n\t\t\tfinal Charset encoding, final boolean append)", "class_method_signature": "FileHelper.writeStringToFile(final File file, final String data,\n\t\t\tfinal Charset encoding, final boolean append)", "testcase": false, "constructor": false}, {"identifier": "copyDirectory", "parameters": "(final File srcDir, final File destDir)", "modifiers": "protected static", "return": "void", "signature": "void copyDirectory(final File srcDir, final File destDir)", "full_signature": "protected static void copyDirectory(final File srcDir, final File destDir)", "class_method_signature": "FileHelper.copyDirectory(final File srcDir, final File destDir)", "testcase": false, "constructor": false}, {"identifier": "cleanDirectory", "parameters": "(final File directory)", "modifiers": "private static", "return": "void", "signature": "void cleanDirectory(final File directory)", "full_signature": "private static void cleanDirectory(final File directory)", "class_method_signature": "FileHelper.cleanDirectory(final File directory)", "testcase": false, "constructor": false}, {"identifier": "deleteDirectory", "parameters": "(final File directory)", "modifiers": "private static", "return": "void", "signature": "void deleteDirectory(final File directory)", "full_signature": "private static void deleteDirectory(final File directory)", "class_method_signature": "FileHelper.deleteDirectory(final File directory)", "testcase": false, "constructor": false}, {"identifier": "doCopyDirectory", "parameters": "(final File srcDir, final File destDir,\n\n\tfinal List<String> exclusionList)", "modifiers": "private static", "return": "void", "signature": "void doCopyDirectory(final File srcDir, final File destDir,\n\n\tfinal List<String> exclusionList)", "full_signature": "private static void doCopyDirectory(final File srcDir, final File destDir,\n\n\tfinal List<String> exclusionList)", "class_method_signature": "FileHelper.doCopyDirectory(final File srcDir, final File destDir,\n\n\tfinal List<String> exclusionList)", "testcase": false, "constructor": false}, {"identifier": "openOutputStream", "parameters": "(final File file,\n\t\t\tfinal boolean append)", "modifiers": "private static", "return": "FileOutputStream", "signature": "FileOutputStream openOutputStream(final File file,\n\t\t\tfinal boolean append)", "full_signature": "private static FileOutputStream openOutputStream(final File file,\n\t\t\tfinal boolean append)", "class_method_signature": "FileHelper.openOutputStream(final File file,\n\t\t\tfinal boolean append)", "testcase": false, "constructor": false}, {"identifier": "FileHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileHelper()", "full_signature": "private  FileHelper()", "class_method_signature": "FileHelper.FileHelper()", "testcase": false, "constructor": true}, {"identifier": "unzipFile", "parameters": "(String zipname, String destDir)", "modifiers": "public static", "return": "boolean", "signature": "boolean unzipFile(String zipname, String destDir)", "full_signature": "public static boolean unzipFile(String zipname, String destDir)", "class_method_signature": "FileHelper.unzipFile(String zipname, String destDir)", "testcase": false, "constructor": false}, {"identifier": "getFileSizeInMb", "parameters": "(File downloadedFile)", "modifiers": "public static", "return": "int", "signature": "int getFileSizeInMb(File downloadedFile)", "full_signature": "public static int getFileSizeInMb(File downloadedFile)", "class_method_signature": "FileHelper.getFileSizeInMb(File downloadedFile)", "testcase": false, "constructor": false}, {"identifier": "getCountFiles", "parameters": "(File fileToCheck)", "modifiers": "public static", "return": "int", "signature": "int getCountFiles(File fileToCheck)", "full_signature": "public static int getCountFiles(File fileToCheck)", "class_method_signature": "FileHelper.getCountFiles(File fileToCheck)", "testcase": false, "constructor": false}], "file": "ornidroid/src/main/java/fr/ornidroid/helper/FileHelper.java"}, "focal_method": {"identifier": "getCountFiles", "parameters": "(File fileToCheck)", "modifiers": "public static", "return": "int", "body": "public static int getCountFiles(File fileToCheck) {\n\t\tint count = 0;\n\t\tif (fileToCheck != null && fileToCheck.isDirectory()) {\n\t\t\tFile[] listOfFiles = fileToCheck.listFiles();\n\t\t\tif (listOfFiles != null) {\n\t\t\t\tcount = listOfFiles.length;\n\t\t\t\tfor (int i = 0; i < listOfFiles.length; i++) {\n\t\t\t\t\tcount += getCountFiles(listOfFiles[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}", "signature": "int getCountFiles(File fileToCheck)", "full_signature": "public static int getCountFiles(File fileToCheck)", "class_method_signature": "FileHelper.getCountFiles(File fileToCheck)", "testcase": false, "constructor": false, "invocations": ["isDirectory", "listFiles", "getCountFiles"]}, "repository": {"repo_id": 4195698, "url": "https://github.com/giletvin/ornidroid", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 1837495, "license": "licensed"}}