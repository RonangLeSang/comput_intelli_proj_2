{"test_class": {"identifier": "IOHelperTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "ornidroid/src/test/java/fr/ornidroid/helper/IOHelperTest.java"}, "test_case": {"identifier": "testCopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopy() throws FileNotFoundException {\n\t\tfinal String dbPath = \"./src/test/resources\" + File.separator\n\t\t\t\t+ BasicConstants.DB_NAME;\n\t\tfinal File dbFile = new File(dbPath);\n\n\t\tfinal File outFile = new File(AbstractTest.TEST_DIRECTORY\n\t\t\t\t+ File.separator + \"outFile.txt\");\n\t\tAssert.assertFalse(outFile.exists());\n\t\tfinal InputStream input = new FileInputStream(dbFile);\n\t\tfinal OutputStream output = new FileOutputStream(outFile);\n\t\ttry {\n\t\t\tIOHelper.copy(input, output);\n\t\t\tAssert.assertTrue(outFile.exists());\n\t\t} catch (final IOException e) {\n\t\t\tAssert.fail(e.getMessage());\n\t\t}\n\t}", "signature": "void testCopy()", "full_signature": "@Test public void testCopy()", "class_method_signature": "IOHelperTest.testCopy()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "exists", "copy", "assertTrue", "exists", "fail", "getMessage"]}, "focal_class": {"identifier": "IOHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_BUFFER_SIZE = 1024 * 4;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BUFFER_SIZE = 1024 * 4", "var_name": "DEFAULT_BUFFER_SIZE"}], "methods": [{"identifier": "closeQuietly", "parameters": "(final Closeable closeable)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(final Closeable closeable)", "full_signature": "public static void closeQuietly(final Closeable closeable)", "class_method_signature": "IOHelper.closeQuietly(final Closeable closeable)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(final InputStream input, final OutputStream output)", "modifiers": "public static", "return": "int", "signature": "int copy(final InputStream input, final OutputStream output)", "full_signature": "public static int copy(final InputStream input, final OutputStream output)", "class_method_signature": "IOHelper.copy(final InputStream input, final OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "copyLarge", "parameters": "(final InputStream input,\n\t\t\tfinal OutputStream output)", "modifiers": "public static", "return": "long", "signature": "long copyLarge(final InputStream input,\n\t\t\tfinal OutputStream output)", "full_signature": "public static long copyLarge(final InputStream input,\n\t\t\tfinal OutputStream output)", "class_method_signature": "IOHelper.copyLarge(final InputStream input,\n\t\t\tfinal OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "readLines", "parameters": "(final InputStream input)", "modifiers": "public static", "return": "List", "signature": "List readLines(final InputStream input)", "full_signature": "public static List readLines(final InputStream input)", "class_method_signature": "IOHelper.readLines(final InputStream input)", "testcase": false, "constructor": false}, {"identifier": "readLines", "parameters": "(final Reader input)", "modifiers": "public static", "return": "List", "signature": "List readLines(final Reader input)", "full_signature": "public static List readLines(final Reader input)", "class_method_signature": "IOHelper.readLines(final Reader input)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final String data, final OutputStream output,\n\t\t\tfinal Charset encoding)", "modifiers": "public static", "return": "void", "signature": "void write(final String data, final OutputStream output,\n\t\t\tfinal Charset encoding)", "full_signature": "public static void write(final String data, final OutputStream output,\n\t\t\tfinal Charset encoding)", "class_method_signature": "IOHelper.write(final String data, final OutputStream output,\n\t\t\tfinal Charset encoding)", "testcase": false, "constructor": false}], "file": "ornidroid/src/main/java/fr/ornidroid/helper/IOHelper.java"}, "focal_method": {"identifier": "copy", "parameters": "(final InputStream input, final OutputStream output)", "modifiers": "public static", "return": "int", "body": "public static int copy(final InputStream input, final OutputStream output)\n\t\t\tthrows IOException {\n\t\tfinal long count = copyLarge(input, output);\n\t\tif (count > Integer.MAX_VALUE) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn (int) count;\n\t}", "signature": "int copy(final InputStream input, final OutputStream output)", "full_signature": "public static int copy(final InputStream input, final OutputStream output)", "class_method_signature": "IOHelper.copy(final InputStream input, final OutputStream output)", "testcase": false, "constructor": false, "invocations": ["copyLarge"]}, "repository": {"repo_id": 4195698, "url": "https://github.com/giletvin/ornidroid", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 1837495, "license": "licensed"}}