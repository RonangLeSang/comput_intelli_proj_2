{"test_class": {"identifier": "DefaultSampleServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "@Mock\n  private SampleStore sampleStore;", "modifier": "@Mock\n  private", "type": "SampleStore", "declarator": "sampleStore", "var_name": "sampleStore"}, {"original_string": "@Mock\n  private AuthorizationManager authorizationManager;", "modifier": "@Mock\n  private", "type": "AuthorizationManager", "declarator": "authorizationManager", "var_name": "authorizationManager"}, {"original_string": "@Mock\n  private HibernateProjectDao projectDAO;", "modifier": "@Mock\n  private", "type": "HibernateProjectDao", "declarator": "projectDAO", "var_name": "projectDAO"}, {"original_string": "@Mock\n  private SampleClassService sampleClassService;", "modifier": "@Mock\n  private", "type": "SampleClassService", "declarator": "sampleClassService", "var_name": "sampleClassService"}, {"original_string": "@Mock\n  private SampleValidRelationshipService sampleValidRelationshipService;", "modifier": "@Mock\n  private", "type": "SampleValidRelationshipService", "declarator": "sampleValidRelationshipService", "var_name": "sampleValidRelationshipService"}, {"original_string": "@Mock\n  private SampleNumberPerProjectService sampleNumberPerProjectService;", "modifier": "@Mock\n  private", "type": "SampleNumberPerProjectService", "declarator": "sampleNumberPerProjectService", "var_name": "sampleNumberPerProjectService"}, {"original_string": "@Mock\n  private ProjectStore projectStore;", "modifier": "@Mock\n  private", "type": "ProjectStore", "declarator": "projectStore", "var_name": "projectStore"}, {"original_string": "@Mock\n  private TissueOriginDao tissueOriginDao;", "modifier": "@Mock\n  private", "type": "TissueOriginDao", "declarator": "tissueOriginDao", "var_name": "tissueOriginDao"}, {"original_string": "@Mock\n  private TissueTypeDao tissueTypeDao;", "modifier": "@Mock\n  private", "type": "TissueTypeDao", "declarator": "tissueTypeDao", "var_name": "tissueTypeDao"}, {"original_string": "@Mock\n  private SubprojectService subProjectService;", "modifier": "@Mock\n  private", "type": "SubprojectService", "declarator": "subProjectService", "var_name": "subProjectService"}, {"original_string": "@Mock\n  private SecurityStore securityStore;", "modifier": "@Mock\n  private", "type": "SecurityStore", "declarator": "securityStore", "var_name": "securityStore"}, {"original_string": "@Mock\n  private SamplePurposeDao samplePurposeDao;", "modifier": "@Mock\n  private", "type": "SamplePurposeDao", "declarator": "samplePurposeDao", "var_name": "samplePurposeDao"}, {"original_string": "@Mock\n  private SampleGroupDao sampleGroupDao;", "modifier": "@Mock\n  private", "type": "SampleGroupDao", "declarator": "sampleGroupDao", "var_name": "sampleGroupDao"}, {"original_string": "@Mock\n  private TissueMaterialDao tissueMaterialDao;", "modifier": "@Mock\n  private", "type": "TissueMaterialDao", "declarator": "tissueMaterialDao", "var_name": "tissueMaterialDao"}, {"original_string": "@Mock\n  private NamingSchemeHolder namingSchemeHolder;", "modifier": "@Mock\n  private", "type": "NamingSchemeHolder", "declarator": "namingSchemeHolder", "var_name": "namingSchemeHolder"}, {"original_string": "@Mock\n  private NamingScheme namingScheme;", "modifier": "@Mock\n  private", "type": "NamingScheme", "declarator": "namingScheme", "var_name": "namingScheme"}, {"original_string": "@Mock\n  private BoxService boxService;", "modifier": "@Mock\n  private", "type": "BoxService", "declarator": "boxService", "var_name": "boxService"}, {"original_string": "@Mock\n  private ScientificNameService scientificNameService;", "modifier": "@Mock\n  private", "type": "ScientificNameService", "declarator": "scientificNameService", "var_name": "scientificNameService"}, {"original_string": "@Mock\n  private DetailedQcStatusService detailedQcStatusService;", "modifier": "@Mock\n  private", "type": "DetailedQcStatusService", "declarator": "detailedQcStatusService", "var_name": "detailedQcStatusService"}, {"original_string": "@InjectMocks\n  private DefaultSampleService sut;", "modifier": "@InjectMocks\n  private", "type": "DefaultSampleService", "declarator": "sut", "var_name": "sut"}, {"original_string": "private Set<SampleValidRelationship> relationships;", "modifier": "private", "type": "Set<SampleValidRelationship>", "declarator": "relationships", "var_name": "relationships"}], "file": "miso-service/src/test/java/uk/ac/bbsrc/tgac/miso/service/impl/DefaultSampleServiceTest.java"}, "test_case": {"identifier": "testDeleteNote", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeleteNote() throws Exception {\n    Sample paramSample = new SampleImpl();\n    paramSample.setId(1L);\n    paramSample.setAlias(\"paramSample\");\n\n    Sample dbSample = new SampleImpl();\n    dbSample.setId(paramSample.getId());\n    dbSample.setAlias(\"persistedSample\");\n    Note note = new Note();\n    note.setId(3L);\n    User owner = new UserImpl();\n    owner.setId(5L);\n    note.setOwner(owner);\n    dbSample.addNote(note);\n    Mockito.when(sampleStore.get(paramSample.getId())).thenReturn(dbSample);\n\n    sut.deleteNote(paramSample, note.getId());\n\n    Mockito.verify(authorizationManager).throwIfNonAdminOrMatchingOwner(owner);\n    ArgumentCaptor<Sample> capture = ArgumentCaptor.forClass(Sample.class);\n    Mockito.verify(sampleStore).save(capture.capture());\n    Sample savedSample = capture.getValue();\n    assertTrue(savedSample.getNotes().isEmpty());\n  }", "signature": "void testDeleteNote()", "full_signature": "@Test public void testDeleteNote()", "class_method_signature": "DefaultSampleServiceTest.testDeleteNote()", "testcase": true, "constructor": false, "invocations": ["setId", "setAlias", "setId", "getId", "setAlias", "setId", "setId", "setOwner", "addNote", "thenReturn", "when", "get", "getId", "deleteNote", "getId", "throwIfNonAdminOrMatchingOwner", "verify", "forClass", "save", "verify", "capture", "getValue", "assertTrue", "isEmpty", "getNotes"]}, "focal_class": {"identifier": "DefaultSampleService", "superclass": "", "interfaces": "implements SampleService, PaginatedDataSource<Sample>", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultSampleService.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultSampleService.class)", "var_name": "log"}, {"original_string": "private static final String ERR_MISSING_PARENT_ID = \"Detailed sample is missing parent identifier\";", "modifier": "private static final", "type": "String", "declarator": "ERR_MISSING_PARENT_ID = \"Detailed sample is missing parent identifier\"", "var_name": "ERR_MISSING_PARENT_ID"}, {"original_string": "@Autowired\n  private SampleStore sampleStore;", "modifier": "@Autowired\n  private", "type": "SampleStore", "declarator": "sampleStore", "var_name": "sampleStore"}, {"original_string": "@Autowired\n  private AuthorizationManager authorizationManager;", "modifier": "@Autowired\n  private", "type": "AuthorizationManager", "declarator": "authorizationManager", "var_name": "authorizationManager"}, {"original_string": "@Autowired\n  private SampleClassService sampleClassService;", "modifier": "@Autowired\n  private", "type": "SampleClassService", "declarator": "sampleClassService", "var_name": "sampleClassService"}, {"original_string": "@Autowired\n  private SampleValidRelationshipService sampleValidRelationshipService;", "modifier": "@Autowired\n  private", "type": "SampleValidRelationshipService", "declarator": "sampleValidRelationshipService", "var_name": "sampleValidRelationshipService"}, {"original_string": "@Autowired\n  private ProjectStore projectStore;", "modifier": "@Autowired\n  private", "type": "ProjectStore", "declarator": "projectStore", "var_name": "projectStore"}, {"original_string": "@Autowired\n  private TissueOriginDao tissueOriginDao;", "modifier": "@Autowired\n  private", "type": "TissueOriginDao", "declarator": "tissueOriginDao", "var_name": "tissueOriginDao"}, {"original_string": "@Autowired\n  private TissueTypeDao tissueTypeDao;", "modifier": "@Autowired\n  private", "type": "TissueTypeDao", "declarator": "tissueTypeDao", "var_name": "tissueTypeDao"}, {"original_string": "@Autowired\n  private DetailedQcStatusService detailedQcStatusService;", "modifier": "@Autowired\n  private", "type": "DetailedQcStatusService", "declarator": "detailedQcStatusService", "var_name": "detailedQcStatusService"}, {"original_string": "@Autowired\n  private SamplePurposeDao samplePurposeDao;", "modifier": "@Autowired\n  private", "type": "SamplePurposeDao", "declarator": "samplePurposeDao", "var_name": "samplePurposeDao"}, {"original_string": "@Autowired\n  private TissueMaterialDao tissueMaterialDao;", "modifier": "@Autowired\n  private", "type": "TissueMaterialDao", "declarator": "tissueMaterialDao", "var_name": "tissueMaterialDao"}, {"original_string": "@Autowired\n  private TissuePieceTypeDao tissuePieceTypeDao;", "modifier": "@Autowired\n  private", "type": "TissuePieceTypeDao", "declarator": "tissuePieceTypeDao", "var_name": "tissuePieceTypeDao"}, {"original_string": "@Autowired\n  private DeletionStore deletionStore;", "modifier": "@Autowired\n  private", "type": "DeletionStore", "declarator": "deletionStore", "var_name": "deletionStore"}, {"original_string": "@Autowired\n  private LabService labService;", "modifier": "@Autowired\n  private", "type": "LabService", "declarator": "labService", "var_name": "labService"}, {"original_string": "@Autowired\n  private LibraryService libraryService;", "modifier": "@Autowired\n  private", "type": "LibraryService", "declarator": "libraryService", "var_name": "libraryService"}, {"original_string": "@Autowired\n  private StainService stainService;", "modifier": "@Autowired\n  private", "type": "StainService", "declarator": "stainService", "var_name": "stainService"}, {"original_string": "@Autowired\n  private BoxService boxService;", "modifier": "@Autowired\n  private", "type": "BoxService", "declarator": "boxService", "var_name": "boxService"}, {"original_string": "@Autowired\n  private WorksetService worksetService;", "modifier": "@Autowired\n  private", "type": "WorksetService", "declarator": "worksetService", "var_name": "worksetService"}, {"original_string": "@Autowired\n  private SequencingControlTypeService sequencingControlTypeService;", "modifier": "@Autowired\n  private", "type": "SequencingControlTypeService", "declarator": "sequencingControlTypeService", "var_name": "sequencingControlTypeService"}, {"original_string": "@Autowired\n  private ScientificNameService scientificNameService;", "modifier": "@Autowired\n  private", "type": "ScientificNameService", "declarator": "scientificNameService", "var_name": "scientificNameService"}, {"original_string": "@Autowired\n  private FileAttachmentService fileAttachmentService;", "modifier": "@Autowired\n  private", "type": "FileAttachmentService", "declarator": "fileAttachmentService", "var_name": "fileAttachmentService"}, {"original_string": "@Autowired\n  private TransferService transferService;", "modifier": "@Autowired\n  private", "type": "TransferService", "declarator": "transferService", "var_name": "transferService"}, {"original_string": "@Autowired\n  private SubprojectService subprojectService;", "modifier": "@Autowired\n  private", "type": "SubprojectService", "declarator": "subprojectService", "var_name": "subprojectService"}, {"original_string": "@Autowired\n  private SopService sopService;", "modifier": "@Autowired\n  private", "type": "SopService", "declarator": "sopService", "var_name": "sopService"}, {"original_string": "@Autowired\n  private TransactionTemplate transactionTemplate;", "modifier": "@Autowired\n  private", "type": "TransactionTemplate", "declarator": "transactionTemplate", "var_name": "transactionTemplate"}, {"original_string": "@Autowired\n  private NamingSchemeHolder namingSchemeHolder;", "modifier": "@Autowired\n  private", "type": "NamingSchemeHolder", "declarator": "namingSchemeHolder", "var_name": "namingSchemeHolder"}, {"original_string": "@Value(\"${miso.autoGenerateIdentificationBarcodes}\")\n  private Boolean autoGenerateIdBarcodes;", "modifier": "@Value(\"${miso.autoGenerateIdentificationBarcodes}\")\n  private", "type": "Boolean", "declarator": "autoGenerateIdBarcodes", "var_name": "autoGenerateIdBarcodes"}, {"original_string": "private Boolean uniqueExternalNameWithinProjectRequired = true;", "modifier": "private", "type": "Boolean", "declarator": "uniqueExternalNameWithinProjectRequired = true", "var_name": "uniqueExternalNameWithinProjectRequired"}], "methods": [{"identifier": "setSampleStore", "parameters": "(SampleStore sampleStore)", "modifiers": "public", "return": "void", "signature": "void setSampleStore(SampleStore sampleStore)", "full_signature": "public void setSampleStore(SampleStore sampleStore)", "class_method_signature": "DefaultSampleService.setSampleStore(SampleStore sampleStore)", "testcase": false, "constructor": false}, {"identifier": "setAuthorizationManager", "parameters": "(AuthorizationManager authorizationManager)", "modifiers": "public", "return": "void", "signature": "void setAuthorizationManager(AuthorizationManager authorizationManager)", "full_signature": "public void setAuthorizationManager(AuthorizationManager authorizationManager)", "class_method_signature": "DefaultSampleService.setAuthorizationManager(AuthorizationManager authorizationManager)", "testcase": false, "constructor": false}, {"identifier": "setSampleClassService", "parameters": "(SampleClassService sampleClassService)", "modifiers": "public", "return": "void", "signature": "void setSampleClassService(SampleClassService sampleClassService)", "full_signature": "public void setSampleClassService(SampleClassService sampleClassService)", "class_method_signature": "DefaultSampleService.setSampleClassService(SampleClassService sampleClassService)", "testcase": false, "constructor": false}, {"identifier": "setSampleValidRelationshipService", "parameters": "(SampleValidRelationshipService sampleValidRelationshipService)", "modifiers": "public", "return": "void", "signature": "void setSampleValidRelationshipService(SampleValidRelationshipService sampleValidRelationshipService)", "full_signature": "public void setSampleValidRelationshipService(SampleValidRelationshipService sampleValidRelationshipService)", "class_method_signature": "DefaultSampleService.setSampleValidRelationshipService(SampleValidRelationshipService sampleValidRelationshipService)", "testcase": false, "constructor": false}, {"identifier": "setProjectStore", "parameters": "(ProjectStore projectStore)", "modifiers": "public", "return": "void", "signature": "void setProjectStore(ProjectStore projectStore)", "full_signature": "public void setProjectStore(ProjectStore projectStore)", "class_method_signature": "DefaultSampleService.setProjectStore(ProjectStore projectStore)", "testcase": false, "constructor": false}, {"identifier": "setTissueOriginDao", "parameters": "(TissueOriginDao tissueOriginDao)", "modifiers": "public", "return": "void", "signature": "void setTissueOriginDao(TissueOriginDao tissueOriginDao)", "full_signature": "public void setTissueOriginDao(TissueOriginDao tissueOriginDao)", "class_method_signature": "DefaultSampleService.setTissueOriginDao(TissueOriginDao tissueOriginDao)", "testcase": false, "constructor": false}, {"identifier": "setTissueTypeDao", "parameters": "(TissueTypeDao tissueTypeDao)", "modifiers": "public", "return": "void", "signature": "void setTissueTypeDao(TissueTypeDao tissueTypeDao)", "full_signature": "public void setTissueTypeDao(TissueTypeDao tissueTypeDao)", "class_method_signature": "DefaultSampleService.setTissueTypeDao(TissueTypeDao tissueTypeDao)", "testcase": false, "constructor": false}, {"identifier": "setDetailedQcStatusService", "parameters": "(DetailedQcStatusService detailedQcStatusService)", "modifiers": "public", "return": "void", "signature": "void setDetailedQcStatusService(DetailedQcStatusService detailedQcStatusService)", "full_signature": "public void setDetailedQcStatusService(DetailedQcStatusService detailedQcStatusService)", "class_method_signature": "DefaultSampleService.setDetailedQcStatusService(DetailedQcStatusService detailedQcStatusService)", "testcase": false, "constructor": false}, {"identifier": "setSubprojectService", "parameters": "(SubprojectService subprojectService)", "modifiers": "public", "return": "void", "signature": "void setSubprojectService(SubprojectService subprojectService)", "full_signature": "public void setSubprojectService(SubprojectService subprojectService)", "class_method_signature": "DefaultSampleService.setSubprojectService(SubprojectService subprojectService)", "testcase": false, "constructor": false}, {"identifier": "setSamplePurposeDao", "parameters": "(SamplePurposeDao samplePurposeDao)", "modifiers": "public", "return": "void", "signature": "void setSamplePurposeDao(SamplePurposeDao samplePurposeDao)", "full_signature": "public void setSamplePurposeDao(SamplePurposeDao samplePurposeDao)", "class_method_signature": "DefaultSampleService.setSamplePurposeDao(SamplePurposeDao samplePurposeDao)", "testcase": false, "constructor": false}, {"identifier": "setTissueMaterialDao", "parameters": "(TissueMaterialDao tissueMaterialDao)", "modifiers": "public", "return": "void", "signature": "void setTissueMaterialDao(TissueMaterialDao tissueMaterialDao)", "full_signature": "public void setTissueMaterialDao(TissueMaterialDao tissueMaterialDao)", "class_method_signature": "DefaultSampleService.setTissueMaterialDao(TissueMaterialDao tissueMaterialDao)", "testcase": false, "constructor": false}, {"identifier": "setLabService", "parameters": "(LabService labService)", "modifiers": "public", "return": "void", "signature": "void setLabService(LabService labService)", "full_signature": "public void setLabService(LabService labService)", "class_method_signature": "DefaultSampleService.setLabService(LabService labService)", "testcase": false, "constructor": false}, {"identifier": "setBoxService", "parameters": "(BoxService boxService)", "modifiers": "public", "return": "void", "signature": "void setBoxService(BoxService boxService)", "full_signature": "public void setBoxService(BoxService boxService)", "class_method_signature": "DefaultSampleService.setBoxService(BoxService boxService)", "testcase": false, "constructor": false}, {"identifier": "setWorksetService", "parameters": "(WorksetService worksetService)", "modifiers": "public", "return": "void", "signature": "void setWorksetService(WorksetService worksetService)", "full_signature": "public void setWorksetService(WorksetService worksetService)", "class_method_signature": "DefaultSampleService.setWorksetService(WorksetService worksetService)", "testcase": false, "constructor": false}, {"identifier": "setFileAttachmentService", "parameters": "(FileAttachmentService fileAttachmentService)", "modifiers": "public", "return": "void", "signature": "void setFileAttachmentService(FileAttachmentService fileAttachmentService)", "full_signature": "public void setFileAttachmentService(FileAttachmentService fileAttachmentService)", "class_method_signature": "DefaultSampleService.setFileAttachmentService(FileAttachmentService fileAttachmentService)", "testcase": false, "constructor": false}, {"identifier": "setNamingSchemeHolder", "parameters": "(NamingSchemeHolder namingSchemeHolder)", "modifiers": "public", "return": "void", "signature": "void setNamingSchemeHolder(NamingSchemeHolder namingSchemeHolder)", "full_signature": "public void setNamingSchemeHolder(NamingSchemeHolder namingSchemeHolder)", "class_method_signature": "DefaultSampleService.setNamingSchemeHolder(NamingSchemeHolder namingSchemeHolder)", "testcase": false, "constructor": false}, {"identifier": "getAutoGenerateIdBarcodes", "parameters": "()", "modifiers": "@CoverageIgnore public", "return": "Boolean", "signature": "Boolean getAutoGenerateIdBarcodes()", "full_signature": "@CoverageIgnore public Boolean getAutoGenerateIdBarcodes()", "class_method_signature": "DefaultSampleService.getAutoGenerateIdBarcodes()", "testcase": false, "constructor": false}, {"identifier": "setAutoGenerateIdBarcodes", "parameters": "(Boolean autoGenerateIdBarcodes)", "modifiers": "@CoverageIgnore public", "return": "void", "signature": "void setAutoGenerateIdBarcodes(Boolean autoGenerateIdBarcodes)", "full_signature": "@CoverageIgnore public void setAutoGenerateIdBarcodes(Boolean autoGenerateIdBarcodes)", "class_method_signature": "DefaultSampleService.setAutoGenerateIdBarcodes(Boolean autoGenerateIdBarcodes)", "testcase": false, "constructor": false}, {"identifier": "isUniqueExternalNameWithinProjectRequired", "parameters": "()", "modifiers": "@CoverageIgnore public", "return": "Boolean", "signature": "Boolean isUniqueExternalNameWithinProjectRequired()", "full_signature": "@CoverageIgnore public Boolean isUniqueExternalNameWithinProjectRequired()", "class_method_signature": "DefaultSampleService.isUniqueExternalNameWithinProjectRequired()", "testcase": false, "constructor": false}, {"identifier": "setUniqueExternalNameWithinProjectRequired", "parameters": "(Boolean uniqueExternalNameWithinProjectRequired)", "modifiers": "@CoverageIgnore public", "return": "void", "signature": "void setUniqueExternalNameWithinProjectRequired(Boolean uniqueExternalNameWithinProjectRequired)", "full_signature": "@CoverageIgnore public void setUniqueExternalNameWithinProjectRequired(Boolean uniqueExternalNameWithinProjectRequired)", "class_method_signature": "DefaultSampleService.setUniqueExternalNameWithinProjectRequired(Boolean uniqueExternalNameWithinProjectRequired)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long sampleId)", "modifiers": "@Override public", "return": "Sample", "signature": "Sample get(long sampleId)", "full_signature": "@Override public Sample get(long sampleId)", "class_method_signature": "DefaultSampleService.get(long sampleId)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Sample sample)", "modifiers": "@Override public", "return": "long", "signature": "long create(Sample sample)", "full_signature": "@Override public long create(Sample sample)", "class_method_signature": "DefaultSampleService.create(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "makeDuplicateExternalNameError", "parameters": "(String externalName)", "modifiers": "private", "return": "ValidationException", "signature": "ValidationException makeDuplicateExternalNameError(String externalName)", "full_signature": "private ValidationException makeDuplicateExternalNameError(String externalName)", "class_method_signature": "DefaultSampleService.makeDuplicateExternalNameError(String externalName)", "testcase": false, "constructor": false}, {"identifier": "getNamingScheme", "parameters": "(Sample sample)", "modifiers": "private", "return": "NamingScheme", "signature": "NamingScheme getNamingScheme(Sample sample)", "full_signature": "private NamingScheme getNamingScheme(Sample sample)", "class_method_signature": "DefaultSampleService.getNamingScheme(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "updateParentSlides", "parameters": "(Sample child, Sample beforeChange, User changeUser)", "modifiers": "private", "return": "void", "signature": "void updateParentSlides(Sample child, Sample beforeChange, User changeUser)", "full_signature": "private void updateParentSlides(Sample child, Sample beforeChange, User changeUser)", "class_method_signature": "DefaultSampleService.updateParentSlides(Sample child, Sample beforeChange, User changeUser)", "testcase": false, "constructor": false}, {"identifier": "updateParentSlides", "parameters": "(SampleSlide parent, Integer value, User changeUser)", "modifiers": "private", "return": "void", "signature": "void updateParentSlides(SampleSlide parent, Integer value, User changeUser)", "full_signature": "private void updateParentSlides(SampleSlide parent, Integer value, User changeUser)", "class_method_signature": "DefaultSampleService.updateParentSlides(SampleSlide parent, Integer value, User changeUser)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Sample sample, boolean validateAliasUniqueness)", "modifiers": "private", "return": "Sample", "signature": "Sample save(Sample sample, boolean validateAliasUniqueness)", "full_signature": "private Sample save(Sample sample, boolean validateAliasUniqueness)", "class_method_signature": "DefaultSampleService.save(Sample sample, boolean validateAliasUniqueness)", "testcase": false, "constructor": false}, {"identifier": "validateAlias", "parameters": "(Sample sample, NamingScheme namingScheme)", "modifiers": "private", "return": "void", "signature": "void validateAlias(Sample sample, NamingScheme namingScheme)", "full_signature": "private void validateAlias(Sample sample, NamingScheme namingScheme)", "class_method_signature": "DefaultSampleService.validateAlias(Sample sample, NamingScheme namingScheme)", "testcase": false, "constructor": false}, {"identifier": "validateAliasUniqueness", "parameters": "(Sample sample, NamingScheme namingScheme)", "modifiers": "private", "return": "void", "signature": "void validateAliasUniqueness(Sample sample, NamingScheme namingScheme)", "full_signature": "private void validateAliasUniqueness(Sample sample, NamingScheme namingScheme)", "class_method_signature": "DefaultSampleService.validateAliasUniqueness(Sample sample, NamingScheme namingScheme)", "testcase": false, "constructor": false}, {"identifier": "addExternalNames", "parameters": "(DetailedSample sample, SampleIdentity identityCopy)", "modifiers": "private", "return": "void", "signature": "void addExternalNames(DetailedSample sample, SampleIdentity identityCopy)", "full_signature": "private void addExternalNames(DetailedSample sample, SampleIdentity identityCopy)", "class_method_signature": "DefaultSampleService.addExternalNames(DetailedSample sample, SampleIdentity identityCopy)", "testcase": false, "constructor": false}, {"identifier": "confirmExternalNameUniqueForProjectIfRequired", "parameters": "(String newExternalName, Sample sample)", "modifiers": "@Override public", "return": "void", "signature": "void confirmExternalNameUniqueForProjectIfRequired(String newExternalName, Sample sample)", "full_signature": "@Override public void confirmExternalNameUniqueForProjectIfRequired(String newExternalName, Sample sample)", "class_method_signature": "DefaultSampleService.confirmExternalNameUniqueForProjectIfRequired(String newExternalName, Sample sample)", "testcase": false, "constructor": false}, {"identifier": "findOrCreateParent", "parameters": "(DetailedSample sample)", "modifiers": "private", "return": "DetailedSample", "signature": "DetailedSample findOrCreateParent(DetailedSample sample)", "full_signature": "private DetailedSample findOrCreateParent(DetailedSample sample)", "class_method_signature": "DefaultSampleService.findOrCreateParent(DetailedSample sample)", "testcase": false, "constructor": false}, {"identifier": "createGhostParent", "parameters": "(DetailedSample parent, DetailedSample child)", "modifiers": "private", "return": "DetailedSample", "signature": "DetailedSample createGhostParent(DetailedSample parent, DetailedSample child)", "full_signature": "private DetailedSample createGhostParent(DetailedSample parent, DetailedSample child)", "class_method_signature": "DefaultSampleService.createGhostParent(DetailedSample parent, DetailedSample child)", "testcase": false, "constructor": false}, {"identifier": "setIdentity", "parameters": "(DetailedSample descendant)", "modifiers": "private", "return": "void", "signature": "void setIdentity(DetailedSample descendant)", "full_signature": "private void setIdentity(DetailedSample descendant)", "class_method_signature": "DefaultSampleService.setIdentity(DetailedSample descendant)", "testcase": false, "constructor": false}, {"identifier": "getIdentity", "parameters": "(DetailedSample sample)", "modifiers": "private", "return": "SampleIdentity", "signature": "SampleIdentity getIdentity(DetailedSample sample)", "full_signature": "private SampleIdentity getIdentity(DetailedSample sample)", "class_method_signature": "DefaultSampleService.getIdentity(DetailedSample sample)", "testcase": false, "constructor": false}, {"identifier": "findOrCreateIdentity", "parameters": "(DetailedSample descendant, SampleIdentity identity)", "modifiers": "private", "return": "SampleIdentity", "signature": "SampleIdentity findOrCreateIdentity(DetailedSample descendant, SampleIdentity identity)", "full_signature": "private SampleIdentity findOrCreateIdentity(DetailedSample descendant, SampleIdentity identity)", "class_method_signature": "DefaultSampleService.findOrCreateIdentity(DetailedSample descendant, SampleIdentity identity)", "testcase": false, "constructor": false}, {"identifier": "createParentIdentity", "parameters": "(DetailedSample sample, SampleIdentity identity)", "modifiers": "private", "return": "SampleIdentity", "signature": "SampleIdentity createParentIdentity(DetailedSample sample, SampleIdentity identity)", "full_signature": "private SampleIdentity createParentIdentity(DetailedSample sample, SampleIdentity identity)", "class_method_signature": "DefaultSampleService.createParentIdentity(DetailedSample sample, SampleIdentity identity)", "testcase": false, "constructor": false}, {"identifier": "loadChildEntities", "parameters": "(Sample sample)", "modifiers": "private", "return": "void", "signature": "void loadChildEntities(Sample sample)", "full_signature": "private void loadChildEntities(Sample sample)", "class_method_signature": "DefaultSampleService.loadChildEntities(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "validateHierarchy", "parameters": "(DetailedSample sample)", "modifiers": "private", "return": "void", "signature": "void validateHierarchy(DetailedSample sample)", "full_signature": "private void validateHierarchy(DetailedSample sample)", "class_method_signature": "DefaultSampleService.validateHierarchy(DetailedSample sample)", "testcase": false, "constructor": false}, {"identifier": "isValidRelationship", "parameters": "(Sample parent, Sample child)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidRelationship(Sample parent, Sample child)", "full_signature": "public boolean isValidRelationship(Sample parent, Sample child)", "class_method_signature": "DefaultSampleService.isValidRelationship(Sample parent, Sample child)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Sample sample)", "modifiers": "@Override public", "return": "long", "signature": "long update(Sample sample)", "full_signature": "@Override public long update(Sample sample)", "class_method_signature": "DefaultSampleService.update(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "maybeRemoveFromBox", "parameters": "(Sample sample, Sample managed)", "modifiers": "private", "return": "void", "signature": "void maybeRemoveFromBox(Sample sample, Sample managed)", "full_signature": "private void maybeRemoveFromBox(Sample sample, Sample managed)", "class_method_signature": "DefaultSampleService.maybeRemoveFromBox(Sample sample, Sample managed)", "testcase": false, "constructor": false}, {"identifier": "validateChange", "parameters": "(Sample sample, Sample beforeChange)", "modifiers": "private", "return": "void", "signature": "void validateChange(Sample sample, Sample beforeChange)", "full_signature": "private void validateChange(Sample sample, Sample beforeChange)", "class_method_signature": "DefaultSampleService.validateChange(Sample sample, Sample beforeChange)", "testcase": false, "constructor": false}, {"identifier": "validateSubproject", "parameters": "(Sample sample, Sample beforeChange, List<ValidationError> errors)", "modifiers": "private", "return": "void", "signature": "void validateSubproject(Sample sample, Sample beforeChange, List<ValidationError> errors)", "full_signature": "private void validateSubproject(Sample sample, Sample beforeChange, List<ValidationError> errors)", "class_method_signature": "DefaultSampleService.validateSubproject(Sample sample, Sample beforeChange, List<ValidationError> errors)", "testcase": false, "constructor": false}, {"identifier": "validateReceiptTransfer", "parameters": "(TransferSample transferSample, List<ValidationError> errors)", "modifiers": "private", "return": "void", "signature": "void validateReceiptTransfer(TransferSample transferSample, List<ValidationError> errors)", "full_signature": "private void validateReceiptTransfer(TransferSample transferSample, List<ValidationError> errors)", "class_method_signature": "DefaultSampleService.validateReceiptTransfer(TransferSample transferSample, List<ValidationError> errors)", "testcase": false, "constructor": false}, {"identifier": "validateReferenceSlide", "parameters": "(DetailedSample sample, List<ValidationError> errors)", "modifiers": "private", "return": "void", "signature": "void validateReferenceSlide(DetailedSample sample, List<ValidationError> errors)", "full_signature": "private void validateReferenceSlide(DetailedSample sample, List<ValidationError> errors)", "class_method_signature": "DefaultSampleService.validateReferenceSlide(DetailedSample sample, List<ValidationError> errors)", "testcase": false, "constructor": false}, {"identifier": "applyChanges", "parameters": "(Sample target, Sample source)", "modifiers": "private", "return": "void", "signature": "void applyChanges(Sample target, Sample source)", "full_signature": "private void applyChanges(Sample target, Sample source)", "class_method_signature": "DefaultSampleService.applyChanges(Sample target, Sample source)", "testcase": false, "constructor": false}, {"identifier": "applyIdentityChanges", "parameters": "(SampleIdentity target, SampleIdentity source)", "modifiers": "private", "return": "void", "signature": "void applyIdentityChanges(SampleIdentity target, SampleIdentity source)", "full_signature": "private void applyIdentityChanges(SampleIdentity target, SampleIdentity source)", "class_method_signature": "DefaultSampleService.applyIdentityChanges(SampleIdentity target, SampleIdentity source)", "testcase": false, "constructor": false}, {"identifier": "applyAliquotChanges", "parameters": "(SampleAliquot target, SampleAliquot source)", "modifiers": "private", "return": "void", "signature": "void applyAliquotChanges(SampleAliquot target, SampleAliquot source)", "full_signature": "private void applyAliquotChanges(SampleAliquot target, SampleAliquot source)", "class_method_signature": "DefaultSampleService.applyAliquotChanges(SampleAliquot target, SampleAliquot source)", "testcase": false, "constructor": false}, {"identifier": "applyStockChanges", "parameters": "(SampleStock target, SampleStock source)", "modifiers": "private", "return": "void", "signature": "void applyStockChanges(SampleStock target, SampleStock source)", "full_signature": "private void applyStockChanges(SampleStock target, SampleStock source)", "class_method_signature": "DefaultSampleService.applyStockChanges(SampleStock target, SampleStock source)", "testcase": false, "constructor": false}, {"identifier": "applyTissueChanges", "parameters": "(SampleTissue target, SampleTissue source)", "modifiers": "private", "return": "void", "signature": "void applyTissueChanges(SampleTissue target, SampleTissue source)", "full_signature": "private void applyTissueChanges(SampleTissue target, SampleTissue source)", "class_method_signature": "DefaultSampleService.applyTissueChanges(SampleTissue target, SampleTissue source)", "testcase": false, "constructor": false}, {"identifier": "applyTissueProcessingChanges", "parameters": "(SampleTissueProcessing target, SampleTissueProcessing source)", "modifiers": "private", "return": "void", "signature": "void applyTissueProcessingChanges(SampleTissueProcessing target, SampleTissueProcessing source)", "full_signature": "private void applyTissueProcessingChanges(SampleTissueProcessing target, SampleTissueProcessing source)", "class_method_signature": "DefaultSampleService.applyTissueProcessingChanges(SampleTissueProcessing target, SampleTissueProcessing source)", "testcase": false, "constructor": false}, {"identifier": "isExternalNameDuplicatedInProject", "parameters": "(Sample sample)", "modifiers": "private", "return": "boolean", "signature": "boolean isExternalNameDuplicatedInProject(Sample sample)", "full_signature": "private boolean isExternalNameDuplicatedInProject(Sample sample)", "class_method_signature": "DefaultSampleService.isExternalNameDuplicatedInProject(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Override public", "return": "List<Sample>", "signature": "List<Sample> list()", "full_signature": "@Override public List<Sample> list()", "class_method_signature": "DefaultSampleService.list()", "testcase": false, "constructor": false}, {"identifier": "countAll", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long countAll()", "full_signature": "@Override public Long countAll()", "class_method_signature": "DefaultSampleService.countAll()", "testcase": false, "constructor": false}, {"identifier": "listByProjectId", "parameters": "(long projectId)", "modifiers": "@Override public", "return": "Collection<Sample>", "signature": "Collection<Sample> listByProjectId(long projectId)", "full_signature": "@Override public Collection<Sample> listByProjectId(long projectId)", "class_method_signature": "DefaultSampleService.listByProjectId(long projectId)", "testcase": false, "constructor": false}, {"identifier": "listByIdList", "parameters": "(List<Long> idList)", "modifiers": "@Override public", "return": "List<Sample>", "signature": "List<Sample> listByIdList(List<Long> idList)", "full_signature": "@Override public List<Sample> listByIdList(List<Long> idList)", "class_method_signature": "DefaultSampleService.listByIdList(List<Long> idList)", "testcase": false, "constructor": false}, {"identifier": "getIdentitiesByExternalNameOrAliasAndProject", "parameters": "(String externalName, Long projectId, boolean exactMatch)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRED) public", "return": "Collection<SampleIdentity>", "signature": "Collection<SampleIdentity> getIdentitiesByExternalNameOrAliasAndProject(String externalName, Long projectId, boolean exactMatch)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRED) public Collection<SampleIdentity> getIdentitiesByExternalNameOrAliasAndProject(String externalName, Long projectId, boolean exactMatch)", "class_method_signature": "DefaultSampleService.getIdentitiesByExternalNameOrAliasAndProject(String externalName, Long projectId, boolean exactMatch)", "testcase": false, "constructor": false}, {"identifier": "getByAlias", "parameters": "(String alias)", "modifiers": "@Override public", "return": "List<Sample>", "signature": "List<Sample> getByAlias(String alias)", "full_signature": "@Override public List<Sample> getByAlias(String alias)", "class_method_signature": "DefaultSampleService.getByAlias(String alias)", "testcase": false, "constructor": false}, {"identifier": "getByBarcode", "parameters": "(String barcode)", "modifiers": "@Override public", "return": "Sample", "signature": "Sample getByBarcode(String barcode)", "full_signature": "@Override public Sample getByBarcode(String barcode)", "class_method_signature": "DefaultSampleService.getByBarcode(String barcode)", "testcase": false, "constructor": false}, {"identifier": "addNote", "parameters": "(Sample sample, Note note)", "modifiers": "@Override public", "return": "void", "signature": "void addNote(Sample sample, Note note)", "full_signature": "@Override public void addNote(Sample sample, Note note)", "class_method_signature": "DefaultSampleService.addNote(Sample sample, Note note)", "testcase": false, "constructor": false}, {"identifier": "deleteNote", "parameters": "(Sample sample, Long noteId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteNote(Sample sample, Long noteId)", "full_signature": "@Override public void deleteNote(Sample sample, Long noteId)", "class_method_signature": "DefaultSampleService.deleteNote(Sample sample, Long noteId)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizationManager", "parameters": "()", "modifiers": "@Override public", "return": "AuthorizationManager", "signature": "AuthorizationManager getAuthorizationManager()", "full_signature": "@Override public AuthorizationManager getAuthorizationManager()", "class_method_signature": "DefaultSampleService.getAuthorizationManager()", "testcase": false, "constructor": false}, {"identifier": "getDeletionStore", "parameters": "()", "modifiers": "@Override public", "return": "DeletionStore", "signature": "DeletionStore getDeletionStore()", "full_signature": "@Override public DeletionStore getDeletionStore()", "class_method_signature": "DefaultSampleService.getDeletionStore()", "testcase": false, "constructor": false}, {"identifier": "setDeletionStore", "parameters": "(DeletionStore deletionStore)", "modifiers": "public", "return": "void", "signature": "void setDeletionStore(DeletionStore deletionStore)", "full_signature": "public void setDeletionStore(DeletionStore deletionStore)", "class_method_signature": "DefaultSampleService.setDeletionStore(DeletionStore deletionStore)", "testcase": false, "constructor": false}, {"identifier": "authorizeDeletion", "parameters": "(Sample object)", "modifiers": "@Override public", "return": "void", "signature": "void authorizeDeletion(Sample object)", "full_signature": "@Override public void authorizeDeletion(Sample object)", "class_method_signature": "DefaultSampleService.authorizeDeletion(Sample object)", "testcase": false, "constructor": false}, {"identifier": "validateDeletion", "parameters": "(Sample object)", "modifiers": "@Override public", "return": "ValidationResult", "signature": "ValidationResult validateDeletion(Sample object)", "full_signature": "@Override public ValidationResult validateDeletion(Sample object)", "class_method_signature": "DefaultSampleService.validateDeletion(Sample object)", "testcase": false, "constructor": false}, {"identifier": "beforeDelete", "parameters": "(Sample object)", "modifiers": "@Override public", "return": "void", "signature": "void beforeDelete(Sample object)", "full_signature": "@Override public void beforeDelete(Sample object)", "class_method_signature": "DefaultSampleService.beforeDelete(Sample object)", "testcase": false, "constructor": false}, {"identifier": "afterDelete", "parameters": "(Sample object)", "modifiers": "@Override public", "return": "void", "signature": "void afterDelete(Sample object)", "full_signature": "@Override public void afterDelete(Sample object)", "class_method_signature": "DefaultSampleService.afterDelete(Sample object)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Sample sample)", "modifiers": "@Override public", "return": "Sample", "signature": "Sample save(Sample sample)", "full_signature": "@Override public Sample save(Sample sample)", "class_method_signature": "DefaultSampleService.save(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Consumer<String> errorHandler, PaginationFilter... filter)", "modifiers": "@Override public", "return": "long", "signature": "long count(Consumer<String> errorHandler, PaginationFilter... filter)", "full_signature": "@Override public long count(Consumer<String> errorHandler, PaginationFilter... filter)", "class_method_signature": "DefaultSampleService.count(Consumer<String> errorHandler, PaginationFilter... filter)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Consumer<String> errorHandler, int offset, int limit, boolean sortDir, String sortCol,\n      PaginationFilter... filter)", "modifiers": "@Override public", "return": "List<Sample>", "signature": "List<Sample> list(Consumer<String> errorHandler, int offset, int limit, boolean sortDir, String sortCol,\n      PaginationFilter... filter)", "full_signature": "@Override public List<Sample> list(Consumer<String> errorHandler, int offset, int limit, boolean sortDir, String sortCol,\n      PaginationFilter... filter)", "class_method_signature": "DefaultSampleService.list(Consumer<String> errorHandler, int offset, int limit, boolean sortDir, String sortCol,\n      PaginationFilter... filter)", "testcase": false, "constructor": false}, {"identifier": "getNextInProject", "parameters": "(Sample sample)", "modifiers": "@Override public", "return": "EntityReference", "signature": "EntityReference getNextInProject(Sample sample)", "full_signature": "@Override public EntityReference getNextInProject(Sample sample)", "class_method_signature": "DefaultSampleService.getNextInProject(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "getPreviousInProject", "parameters": "(Sample sample)", "modifiers": "@Override public", "return": "EntityReference", "signature": "EntityReference getPreviousInProject(Sample sample)", "full_signature": "@Override public EntityReference getPreviousInProject(Sample sample)", "class_method_signature": "DefaultSampleService.getPreviousInProject(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "getTransactionTemplate", "parameters": "()", "modifiers": "@Override public", "return": "TransactionTemplate", "signature": "TransactionTemplate getTransactionTemplate()", "full_signature": "@Override public TransactionTemplate getTransactionTemplate()", "class_method_signature": "DefaultSampleService.getTransactionTemplate()", "testcase": false, "constructor": false}], "file": "miso-service/src/main/java/uk/ac/bbsrc/tgac/miso/service/impl/DefaultSampleService.java"}, "focal_method": {"identifier": "deleteNote", "parameters": "(Sample sample, Long noteId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void deleteNote(Sample sample, Long noteId) throws IOException {\n    if (noteId == null) {\n      throw new IllegalArgumentException(\"Cannot delete an unsaved Note\");\n    }\n    Sample managed = sampleStore.get(sample.getId());\n    Note deleteNote = null;\n    for (Note note : managed.getNotes()) {\n      if (note.getId() == noteId.longValue()) {\n        deleteNote = note;\n        break;\n      }\n    }\n    if (deleteNote == null) {\n      throw new IOException(\"Note \" + noteId + \" not found for Sample \" + sample.getId());\n    }\n    authorizationManager.throwIfNonAdminOrMatchingOwner(deleteNote.getOwner());\n    managed.getNotes().remove(deleteNote);\n    sampleStore.save(managed);\n  }", "signature": "void deleteNote(Sample sample, Long noteId)", "full_signature": "@Override public void deleteNote(Sample sample, Long noteId)", "class_method_signature": "DefaultSampleService.deleteNote(Sample sample, Long noteId)", "testcase": false, "constructor": false, "invocations": ["get", "getId", "getNotes", "getId", "longValue", "getId", "throwIfNonAdminOrMatchingOwner", "getOwner", "remove", "getNotes", "save"]}, "repository": {"repo_id": 4726428, "url": "https://github.com/miso-lims/miso-lims", "stars": 106, "created": "6/20/2012 1:17:28 PM +00:00", "updates": "2020-01-27T22:24:11+00:00", "fork": "False", "license": "licensed"}}