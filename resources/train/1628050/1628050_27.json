{"test_class": {"identifier": "BranchFieldPackagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/fsdmsgx/src/test/java/org/jpos/fsdpackager/BranchFieldPackagerTest.java"}, "test_case": {"identifier": "packTest07", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void packTest07() throws ISOException{\n\t\t\n\t\tAFSDFieldPackager f1 = new FixedFieldPackager(\"F1\", 5, AsciiInterpreter.INSTANCE);\n\t\tAFSDFieldPackager f2 = new FixedFieldPackager(\"F2\", 2, AsciiInterpreter.INSTANCE);\n\t\t\n\t\tAFSDFieldPackager case01 = new FixedFieldPackager(\"F4\", 3, AsciiInterpreter.INSTANCE);\n\t\tAFSDFieldPackager case02 = new FixedFieldPackager(\"F5\", 4, AsciiInterpreter.INSTANCE);\n\t\t\n\t\tMap<String, AFSDFieldPackager> caseMap = new HashMap<String, AFSDFieldPackager>();\n\t\tcaseMap.put(\"01\", case01);\n\t\tcaseMap.put(\"02\", case02);\n\t\tAFSDFieldPackager f3 = new BranchFieldPackager(\"F3\", \"F2\", caseMap, null);\n\t\tAFSDFieldPackager f6 = new FixedFieldPackager(\"F6\", 1, LiteralInterpreter.INSTANCE);\n\t\t\n\t\tFSDMsgX msg = new FSDMsgX(\"Test\");\n\t\tmsg.add(\"F1\", f1);\n\t\tmsg.add(\"F2\", f2);\n\t\tmsg.add(\"F3\", f3);\n\t\t// F6 is not added to the message.\n\t\t\n\t\tmsg.set(\"F1\", \"ABCDE\");\n\t\tmsg.set(\"F2\", \"01\");\n\t\tmsg.set(\"F4\", \"333\");\n\t\tmsg.set(\"F5\", \"4444\");\n\t\tmsg.set(\"F6\", String.valueOf((char)0x02));\n\t\t// But F6 is set, should have no impact on the output.\n\t\t\n\t\tbyte[] outStream = msg.pack();\n\t\t\n\t\tassertArrayEquals(\"ABCDE01333\".getBytes(), outStream);\n\t\t//System.out.println(ISOUtil.hexdump(outStream));\n\t\t\n\t}", "signature": "void packTest07()", "full_signature": "@Test public void packTest07()", "class_method_signature": "BranchFieldPackagerTest.packTest07()", "testcase": true, "constructor": false, "invocations": ["put", "put", "add", "add", "add", "set", "set", "set", "set", "set", "valueOf", "pack", "assertArrayEquals", "getBytes"]}, "focal_class": {"identifier": "BranchFieldPackager", "superclass": "extends AFSDFieldPackager", "interfaces": "", "fields": [{"original_string": "private String switchField;", "modifier": "private", "type": "String", "declarator": "switchField", "var_name": "switchField"}, {"original_string": "private Map<String, AFSDFieldPackager> switchCases;", "modifier": "private", "type": "Map<String, AFSDFieldPackager>", "declarator": "switchCases", "var_name": "switchCases"}, {"original_string": "private AFSDFieldPackager defaultCase;", "modifier": "private", "type": "AFSDFieldPackager", "declarator": "defaultCase", "var_name": "defaultCase"}], "methods": [{"identifier": "BranchFieldPackager", "parameters": "(String name, String switchField, Map<String, AFSDFieldPackager> switchCases,\n\t\t\tAFSDFieldPackager defaultCase)", "modifiers": "public", "return": "", "signature": " BranchFieldPackager(String name, String switchField, Map<String, AFSDFieldPackager> switchCases,\n\t\t\tAFSDFieldPackager defaultCase)", "full_signature": "public  BranchFieldPackager(String name, String switchField, Map<String, AFSDFieldPackager> switchCases,\n\t\t\tAFSDFieldPackager defaultCase)", "class_method_signature": "BranchFieldPackager.BranchFieldPackager(String name, String switchField, Map<String, AFSDFieldPackager> switchCases,\n\t\t\tAFSDFieldPackager defaultCase)", "testcase": false, "constructor": true}, {"identifier": "unpack", "parameters": "(byte[] inStream, int offset, Map<String, String> fields)", "modifiers": "@Override public", "return": "int", "signature": "int unpack(byte[] inStream, int offset, Map<String, String> fields)", "full_signature": "@Override public int unpack(byte[] inStream, int offset, Map<String, String> fields)", "class_method_signature": "BranchFieldPackager.unpack(byte[] inStream, int offset, Map<String, String> fields)", "testcase": false, "constructor": false}, {"identifier": "pack", "parameters": "(Map<String, String> fields)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] pack(Map<String, String> fields)", "full_signature": "@Override public byte[] pack(Map<String, String> fields)", "class_method_signature": "BranchFieldPackager.pack(Map<String, String> fields)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getValue()", "full_signature": "@Override public String getValue()", "class_method_signature": "BranchFieldPackager.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(String value)", "full_signature": "@Override public void setValue(String value)", "class_method_signature": "BranchFieldPackager.setValue(String value)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(String prefix, Map<String, String> setfields)", "modifiers": "@Override public", "return": "String", "signature": "String dump(String prefix, Map<String, String> setfields)", "full_signature": "@Override public String dump(String prefix, Map<String, String> setfields)", "class_method_signature": "BranchFieldPackager.dump(String prefix, Map<String, String> setfields)", "testcase": false, "constructor": false}, {"identifier": "getParserTree", "parameters": "(String prefix)", "modifiers": "@Override public", "return": "String", "signature": "String getParserTree(String prefix)", "full_signature": "@Override public String getParserTree(String prefix)", "class_method_signature": "BranchFieldPackager.getParserTree(String prefix)", "testcase": false, "constructor": false}], "file": "modules/fsdmsgx/src/main/java/org/jpos/fsdpackager/BranchFieldPackager.java"}, "focal_method": {"identifier": "pack", "parameters": "(Map<String, String> fields)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n\tpublic byte[] pack(Map<String, String> fields) throws ISOException {\n\n\t\tString value = fields.get(switchField);\n\n\t\tif (value == null) {\n\t\t\tif (defaultCase != null) {\n\t\t\t\tdefaultCase.setValue(fields.get(defaultCase.getName()));\n\t\t\t\treturn defaultCase.pack(fields);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tAFSDFieldPackager selectedPackager = switchCases.get(value);\n\t\tif (selectedPackager == null) {\n\n\t\t\tif (defaultCase != null) {\n\t\t\t\tdefaultCase.setValue(fields.get(defaultCase.getName()));\n\t\t\t\treturn defaultCase.pack(fields);\n\t\t\t}\n\t\t\treturn null;\n\n\t\t}\n\t\tselectedPackager.setValue(fields.get(selectedPackager.getName()));\n\t\treturn selectedPackager.pack(fields);\n\n\t}", "signature": "byte[] pack(Map<String, String> fields)", "full_signature": "@Override public byte[] pack(Map<String, String> fields)", "class_method_signature": "BranchFieldPackager.pack(Map<String, String> fields)", "testcase": false, "constructor": false, "invocations": ["get", "setValue", "get", "getName", "pack", "get", "setValue", "get", "getName", "pack", "setValue", "get", "getName", "pack"]}, "repository": {"repo_id": 1628050, "url": "https://github.com/jpos/jPOS-EE", "stars": 69, "created": "4/17/2011 10:44:05 PM +00:00", "updates": "2020-01-27T16:59:44+00:00", "fork": "False", "license": "licensed"}}