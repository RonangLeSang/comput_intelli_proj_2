{"test_class": {"identifier": "TxnIdTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/txn/src/test/java/org/jpos/transaction/TxnIdTest.java"}, "test_case": {"identifier": "testBigId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBigId() {\n        try {\n            TxnId.parse(Long.MAX_VALUE);\n            fail (\"Should raise exception\");\n        } catch (IllegalArgumentException ignored) { }\n    }", "signature": "void testBigId()", "full_signature": "@Test public void testBigId()", "class_method_signature": "TxnIdTest.testBigId()", "testcase": true, "constructor": false, "invocations": ["parse", "fail"]}, "focal_class": {"identifier": "TxnId", "superclass": "", "interfaces": "", "fields": [{"original_string": "private long id;", "modifier": "private", "type": "long", "declarator": "id", "var_name": "id"}, {"original_string": "private static final long YMUL = 10000000000000000L;", "modifier": "private static final", "type": "long", "declarator": "YMUL = 10000000000000000L", "var_name": "YMUL"}, {"original_string": "private static final long DMUL = 10000000000000L;", "modifier": "private static final", "type": "long", "declarator": "DMUL = 10000000000000L", "var_name": "DMUL"}, {"original_string": "private static final long SMUL = 100000000L;", "modifier": "private static final", "type": "long", "declarator": "SMUL = 100000000L", "var_name": "SMUL"}, {"original_string": "private static final long NMUL = 100000L;", "modifier": "private static final", "type": "long", "declarator": "NMUL = 100000L", "var_name": "NMUL"}, {"original_string": "private static final long MAX_VALUE = Long.parseLong(\"zzzzzzzzzzzz\", 36);", "modifier": "private static final", "type": "long", "declarator": "MAX_VALUE = Long.parseLong(\"zzzzzzzzzzzz\", 36)", "var_name": "MAX_VALUE"}, {"original_string": "private static Pattern pattern = Pattern.compile(\"^([\\\\d]{3})-([\\\\d]{3})-([\\\\d]{5})-([\\\\d]{3})-([\\\\d]{5})$\");", "modifier": "private static", "type": "Pattern", "declarator": "pattern = Pattern.compile(\"^([\\\\d]{3})-([\\\\d]{3})-([\\\\d]{5})-([\\\\d]{3})-([\\\\d]{5})$\")", "var_name": "pattern"}], "methods": [{"identifier": "TxnId", "parameters": "()", "modifiers": "private", "return": "", "signature": " TxnId()", "full_signature": "private  TxnId()", "class_method_signature": "TxnId.TxnId()", "testcase": false, "constructor": true}, {"identifier": "TxnId", "parameters": "(long l)", "modifiers": "private", "return": "", "signature": " TxnId(long l)", "full_signature": "private  TxnId(long l)", "class_method_signature": "TxnId.TxnId(long l)", "testcase": false, "constructor": true}, {"identifier": "id", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long id()", "full_signature": "public long id()", "class_method_signature": "TxnId.id()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(int year, int dayOfYear, int secondOfDay, int node, long transactionId)", "modifiers": "private", "return": "TxnId", "signature": "TxnId init(int year, int dayOfYear, int secondOfDay, int node, long transactionId)", "full_signature": "private TxnId init(int year, int dayOfYear, int secondOfDay, int node, long transactionId)", "class_method_signature": "TxnId.init(int year, int dayOfYear, int secondOfDay, int node, long transactionId)", "testcase": false, "constructor": false}, {"identifier": "toFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File toFile()", "full_signature": "public File toFile()", "class_method_signature": "TxnId.toFile()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TxnId.toString()", "testcase": false, "constructor": false}, {"identifier": "toRrn", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toRrn()", "full_signature": "public String toRrn()", "class_method_signature": "TxnId.toRrn()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "TxnId.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TxnId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(DateTime dt, int node, long transactionId)", "modifiers": "public static", "return": "TxnId", "signature": "TxnId create(DateTime dt, int node, long transactionId)", "full_signature": "public static TxnId create(DateTime dt, int node, long transactionId)", "class_method_signature": "TxnId.create(DateTime dt, int node, long transactionId)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String idString)", "modifiers": "public static", "return": "TxnId", "signature": "TxnId parse(String idString)", "full_signature": "public static TxnId parse(String idString)", "class_method_signature": "TxnId.parse(String idString)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(long id)", "modifiers": "public static", "return": "TxnId", "signature": "TxnId parse(long id)", "full_signature": "public static TxnId parse(long id)", "class_method_signature": "TxnId.parse(long id)", "testcase": false, "constructor": false}, {"identifier": "fromRrn", "parameters": "(String rrn)", "modifiers": "public static", "return": "TxnId", "signature": "TxnId fromRrn(String rrn)", "full_signature": "public static TxnId fromRrn(String rrn)", "class_method_signature": "TxnId.fromRrn(String rrn)", "testcase": false, "constructor": false}], "file": "modules/txn/src/main/java/org/jpos/transaction/TxnId.java"}, "focal_method": {"identifier": "parse", "parameters": "(String idString)", "modifiers": "public static", "return": "TxnId", "body": "public static TxnId parse (String idString) {\n        Matcher matcher = pattern.matcher(idString);\n        if (!matcher.matches() && matcher.groupCount() != 5)\n            throw new IllegalArgumentException(\"Invalid idString '\" + idString + \"'\");\n        return new TxnId().init(\n          Integer.parseInt(matcher.group(1)),\n          Integer.parseInt(matcher.group(2)),\n          Integer.parseInt(matcher.group(3)),\n          Integer.parseInt(matcher.group(4)),\n          Integer.parseInt(matcher.group(5))\n        );\n    }", "signature": "TxnId parse(String idString)", "full_signature": "public static TxnId parse(String idString)", "class_method_signature": "TxnId.parse(String idString)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "groupCount", "init", "parseInt", "group", "parseInt", "group", "parseInt", "group", "parseInt", "group", "parseInt", "group"]}, "repository": {"repo_id": 1628050, "url": "https://github.com/jpos/jPOS-EE", "stars": 69, "created": "4/17/2011 10:44:05 PM +00:00", "updates": "2020-01-27T16:59:44+00:00", "fork": "False", "license": "licensed"}}