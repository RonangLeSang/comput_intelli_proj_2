{"test_class": {"identifier": "DiResolverUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PmConversation pmConversation;", "modifier": "private", "type": "PmConversation", "declarator": "pmConversation", "var_name": "pmConversation"}, {"original_string": "private MyPm myPm;", "modifier": "private", "type": "MyPm", "declarator": "myPm", "var_name": "myPm"}, {"original_string": "@Rule\n  public final ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private static final Field myFieldInitializedNullPropField = ClassUtil.findField(MyPm.class, \"myFieldInitializedNullProp\");", "modifier": "private static final", "type": "Field", "declarator": "myFieldInitializedNullPropField = ClassUtil.findField(MyPm.class, \"myFieldInitializedNullProp\")", "var_name": "myFieldInitializedNullPropField"}, {"original_string": "private static final Field myFieldInitializedPropField = ClassUtil.findField(MyPm.class, \"myFieldInitializedProp\");", "modifier": "private static final", "type": "Field", "declarator": "myFieldInitializedPropField = ClassUtil.findField(MyPm.class, \"myFieldInitializedProp\")", "var_name": "myFieldInitializedPropField"}, {"original_string": "private static final Field myAlienFakePropField = ClassUtil.findField(AnotherPm.class, \"myAlienFakeProp\");", "modifier": "private static final", "type": "Field", "declarator": "myAlienFakePropField = ClassUtil.findField(AnotherPm.class, \"myAlienFakeProp\")", "var_name": "myAlienFakePropField"}, {"original_string": "private static final Method mySetterInitializedNullPropSetter = getSetter(MyPm.class, \"mySetterInitializedNullProp\", String.class);", "modifier": "private static final", "type": "Method", "declarator": "mySetterInitializedNullPropSetter = getSetter(MyPm.class, \"mySetterInitializedNullProp\", String.class)", "var_name": "mySetterInitializedNullPropSetter"}, {"original_string": "private static final Method mySetterInitializedPropSetter = getSetter(MyPm.class, \"mySetterInitializedProp\", String.class);", "modifier": "private static final", "type": "Method", "declarator": "mySetterInitializedPropSetter = getSetter(MyPm.class, \"mySetterInitializedProp\", String.class)", "var_name": "mySetterInitializedPropSetter"}, {"original_string": "private static final Method mySetterInitializedFakeProp = getSetter(MyPm.class, \"mySetterInitializedFakeProp\", String.class);", "modifier": "private static final", "type": "Method", "declarator": "mySetterInitializedFakeProp = getSetter(MyPm.class, \"mySetterInitializedFakeProp\", String.class)", "var_name": "mySetterInitializedFakeProp"}, {"original_string": "private static final Method mySetterInitializedPropWithoutGetterSetter  = getSetter(MyPm.class, \"mySetterInitializedPropWithoutGetter\", boolean.class);", "modifier": "private static final", "type": "Method", "declarator": "mySetterInitializedPropWithoutGetterSetter  = getSetter(MyPm.class, \"mySetterInitializedPropWithoutGetter\", boolean.class)", "var_name": "mySetterInitializedPropWithoutGetterSetter"}, {"original_string": "private static final Method myAlienPropSetter = getSetter(AnotherPm.class, \"myAlienProp\", String.class);", "modifier": "private static final", "type": "Method", "declarator": "myAlienPropSetter = getSetter(AnotherPm.class, \"myAlienProp\", String.class)", "var_name": "myAlienPropSetter"}], "file": "pm4j-core/src/test/java/org/pm4j/core/pm/impl/inject/DiResolverUtilTest.java"}, "test_case": {"identifier": "setValueDirectThrowsExceptionIfFieldCantBeSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void setValueDirectThrowsExceptionIfFieldCantBeSet() {\n    expectedException.expect(PmRuntimeException.class);\n    expectedException.expectMessage(\"Can't initialize field 'myAlienFakeProp'\");\n    DiResolverUtil.setValue(myPm, myAlienFakePropField, false, \"[some value]\");\n  }", "signature": "void setValueDirectThrowsExceptionIfFieldCantBeSet()", "full_signature": "@Test public void setValueDirectThrowsExceptionIfFieldCantBeSet()", "class_method_signature": "DiResolverUtilTest.setValueDirectThrowsExceptionIfFieldCantBeSet()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "setValue"]}, "focal_class": {"identifier": "DiResolverUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DiResolver[] EMPTY_ARRAY = new DiResolver[] {};", "modifier": "private static final", "type": "DiResolver[]", "declarator": "EMPTY_ARRAY = new DiResolver[] {}", "var_name": "EMPTY_ARRAY"}], "methods": [{"identifier": "getDiResolvers", "parameters": "(Class<?> forClass)", "modifiers": "public static", "return": "DiResolver[]", "signature": "DiResolver[] getDiResolvers(Class<?> forClass)", "full_signature": "public static DiResolver[] getDiResolvers(Class<?> forClass)", "class_method_signature": "DiResolverUtil.getDiResolvers(Class<?> forClass)", "testcase": false, "constructor": false}, {"identifier": "ensureAccessibility", "parameters": "(Field f)", "modifiers": "static", "return": "void", "signature": "void ensureAccessibility(Field f)", "full_signature": "static void ensureAccessibility(Field f)", "class_method_signature": "DiResolverUtil.ensureAccessibility(Field f)", "testcase": false, "constructor": false}, {"identifier": "ensureAccessibility", "parameters": "(Method m)", "modifiers": "static", "return": "void", "signature": "void ensureAccessibility(Method m)", "full_signature": "static void ensureAccessibility(Method m)", "class_method_signature": "DiResolverUtil.ensureAccessibility(Method m)", "testcase": false, "constructor": false}, {"identifier": "validateFieldIsNull", "parameters": "(PmObject pm, Field f)", "modifiers": "static", "return": "void", "signature": "void validateFieldIsNull(PmObject pm, Field f)", "full_signature": "static void validateFieldIsNull(PmObject pm, Field f)", "class_method_signature": "DiResolverUtil.validateFieldIsNull(PmObject pm, Field f)", "testcase": false, "constructor": false}, {"identifier": "validateGetterReturnsNull", "parameters": "(PmObject pm, Method getter)", "modifiers": "static", "return": "void", "signature": "void validateGetterReturnsNull(PmObject pm, Method getter)", "full_signature": "static void validateGetterReturnsNull(PmObject pm, Method getter)", "class_method_signature": "DiResolverUtil.validateGetterReturnsNull(PmObject pm, Method getter)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(PmObject pm, Field field, boolean nullAllowed, Object value)", "modifiers": "static", "return": "void", "signature": "void setValue(PmObject pm, Field field, boolean nullAllowed, Object value)", "full_signature": "static void setValue(PmObject pm, Field field, boolean nullAllowed, Object value)", "class_method_signature": "DiResolverUtil.setValue(PmObject pm, Field field, boolean nullAllowed, Object value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(PmObject pm, Method method, boolean nullAllowed, Object value)", "modifiers": "static", "return": "void", "signature": "void setValue(PmObject pm, Method method, boolean nullAllowed, Object value)", "full_signature": "static void setValue(PmObject pm, Method method, boolean nullAllowed, Object value)", "class_method_signature": "DiResolverUtil.setValue(PmObject pm, Method method, boolean nullAllowed, Object value)", "testcase": false, "constructor": false}, {"identifier": "resolveValue", "parameters": "(PmObject pm, AccessibleObject target, PathResolver resolver)", "modifiers": "static", "return": "Object", "signature": "Object resolveValue(PmObject pm, AccessibleObject target, PathResolver resolver)", "full_signature": "static Object resolveValue(PmObject pm, AccessibleObject target, PathResolver resolver)", "class_method_signature": "DiResolverUtil.resolveValue(PmObject pm, AccessibleObject target, PathResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "validateValidValue", "parameters": "(PmObject pm, AccessibleObject target, boolean nullAllowed, Object value)", "modifiers": "static private", "return": "void", "signature": "void validateValidValue(PmObject pm, AccessibleObject target, boolean nullAllowed, Object value)", "full_signature": "static private void validateValidValue(PmObject pm, AccessibleObject target, boolean nullAllowed, Object value)", "class_method_signature": "DiResolverUtil.validateValidValue(PmObject pm, AccessibleObject target, boolean nullAllowed, Object value)", "testcase": false, "constructor": false}], "file": "pm4j-core/src/main/java/org/pm4j/core/pm/impl/inject/DiResolverUtil.java"}, "focal_method": {"identifier": "setValue", "parameters": "(PmObject pm, Field field, boolean nullAllowed, Object value)", "modifiers": "static", "return": "void", "body": "static void setValue(PmObject pm, Field field, boolean nullAllowed, Object value) {\n    validateValidValue(pm, field, nullAllowed, value);\n    try {\n      ensureAccessibility(field);\n      field.set(pm, value);\n    } catch (Exception ex) {\n      throw new PmRuntimeException(pm, \"Can't initialize field '\" + field.getName() + \"' in class '\"\n          + field.getDeclaringClass().getName() + \"'.\", ex);\n    }\n  }", "signature": "void setValue(PmObject pm, Field field, boolean nullAllowed, Object value)", "full_signature": "static void setValue(PmObject pm, Field field, boolean nullAllowed, Object value)", "class_method_signature": "DiResolverUtil.setValue(PmObject pm, Field field, boolean nullAllowed, Object value)", "testcase": false, "constructor": false, "invocations": ["validateValidValue", "ensureAccessibility", "set", "getName", "getName", "getDeclaringClass"]}, "repository": {"repo_id": 3130403, "url": "https://github.com/pm4j/org.pm4j", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 16886, "license": "licensed"}}