{"test_class": {"identifier": "ParseCtxtTest", "superclass": "", "interfaces": "", "fields": [], "file": "pm4j-common/src/test/java/org/pm4j/common/expr/parser/ParseCtxtTest.java"}, "test_case": {"identifier": "isSpaceCharRecognizedTabs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void isSpaceCharRecognizedTabs() {\n    assertTrue(\"tab not recognized as space\", ParseCtxt.isSpace('\\t'));\n  }", "signature": "void isSpaceCharRecognizedTabs()", "full_signature": "@Test public void isSpaceCharRecognizedTabs()", "class_method_signature": "ParseCtxtTest.isSpaceCharRecognizedTabs()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSpace"]}, "focal_class": {"identifier": "ParseCtxt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SyntaxVersion syntaxVersion;", "modifier": "private final", "type": "SyntaxVersion", "declarator": "syntaxVersion", "var_name": "syntaxVersion"}, {"original_string": "private String text;", "modifier": "private", "type": "String", "declarator": "text", "var_name": "text"}, {"original_string": "private int pos;", "modifier": "private", "type": "int", "declarator": "pos", "var_name": "pos"}], "methods": [{"identifier": "ParseCtxt", "parameters": "(String text)", "modifiers": "public", "return": "", "signature": " ParseCtxt(String text)", "full_signature": "public  ParseCtxt(String text)", "class_method_signature": "ParseCtxt.ParseCtxt(String text)", "testcase": false, "constructor": true}, {"identifier": "ParseCtxt", "parameters": "(String text, SyntaxVersion syntaxVersion)", "modifiers": "public", "return": "", "signature": " ParseCtxt(String text, SyntaxVersion syntaxVersion)", "full_signature": "public  ParseCtxt(String text, SyntaxVersion syntaxVersion)", "class_method_signature": "ParseCtxt.ParseCtxt(String text, SyntaxVersion syntaxVersion)", "testcase": false, "constructor": true}, {"identifier": "isDone", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isDone()", "full_signature": "public final boolean isDone()", "class_method_signature": "ParseCtxt.isDone()", "testcase": false, "constructor": false}, {"identifier": "isSpace", "parameters": "(char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSpace(char ch)", "full_signature": "public static boolean isSpace(char ch)", "class_method_signature": "ParseCtxt.isSpace(char ch)", "testcase": false, "constructor": false}, {"identifier": "skipBlanks", "parameters": "()", "modifiers": "public final", "return": "ParseCtxt", "signature": "ParseCtxt skipBlanks()", "full_signature": "public final ParseCtxt skipBlanks()", "class_method_signature": "ParseCtxt.skipBlanks()", "testcase": false, "constructor": false}, {"identifier": "isOnChar", "parameters": "(char ch)", "modifiers": "public final", "return": "boolean", "signature": "boolean isOnChar(char ch)", "full_signature": "public final boolean isOnChar(char ch)", "class_method_signature": "ParseCtxt.isOnChar(char ch)", "testcase": false, "constructor": false}, {"identifier": "currentChar", "parameters": "()", "modifiers": "public final", "return": "char", "signature": "char currentChar()", "full_signature": "public final char currentChar()", "class_method_signature": "ParseCtxt.currentChar()", "testcase": false, "constructor": false}, {"identifier": "readChar", "parameters": "(char ch)", "modifiers": "public final", "return": "void", "signature": "void readChar(char ch)", "full_signature": "public final void readChar(char ch)", "class_method_signature": "ParseCtxt.readChar(char ch)", "testcase": false, "constructor": false}, {"identifier": "testAndReadChar", "parameters": "(char ch)", "modifiers": "public final", "return": "boolean", "signature": "boolean testAndReadChar(char ch)", "full_signature": "public final boolean testAndReadChar(char ch)", "class_method_signature": "ParseCtxt.testAndReadChar(char ch)", "testcase": false, "constructor": false}, {"identifier": "readCharAndAdvance", "parameters": "()", "modifiers": "public final", "return": "char", "signature": "char readCharAndAdvance()", "full_signature": "public final char readCharAndAdvance()", "class_method_signature": "ParseCtxt.readCharAndAdvance()", "testcase": false, "constructor": false}, {"identifier": "readCharsAndAdvanceUntil", "parameters": "(char... charsToStopBefore)", "modifiers": "public", "return": "String", "signature": "String readCharsAndAdvanceUntil(char... charsToStopBefore)", "full_signature": "public String readCharsAndAdvanceUntil(char... charsToStopBefore)", "class_method_signature": "ParseCtxt.readCharsAndAdvanceUntil(char... charsToStopBefore)", "testcase": false, "constructor": false}, {"identifier": "charArrayToHumanReadableString", "parameters": "(char... chars)", "modifiers": "private static", "return": "String", "signature": "String charArrayToHumanReadableString(char... chars)", "full_signature": "private static String charArrayToHumanReadableString(char... chars)", "class_method_signature": "ParseCtxt.charArrayToHumanReadableString(char... chars)", "testcase": false, "constructor": false}, {"identifier": "skipBlanksAndReadNameString", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String skipBlanksAndReadNameString()", "full_signature": "public final String skipBlanksAndReadNameString()", "class_method_signature": "ParseCtxt.skipBlanksAndReadNameString()", "testcase": false, "constructor": false}, {"identifier": "readNameString", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String readNameString()", "full_signature": "public final String readNameString()", "class_method_signature": "ParseCtxt.readNameString()", "testcase": false, "constructor": false}, {"identifier": "isNameStartChar", "parameters": "(char ch)", "modifiers": "public", "return": "boolean", "signature": "boolean isNameStartChar(char ch)", "full_signature": "public boolean isNameStartChar(char ch)", "class_method_signature": "ParseCtxt.isNameStartChar(char ch)", "testcase": false, "constructor": false}, {"identifier": "isNameMiddleChar", "parameters": "(char ch)", "modifiers": "public", "return": "boolean", "signature": "boolean isNameMiddleChar(char ch)", "full_signature": "public boolean isNameMiddleChar(char ch)", "class_method_signature": "ParseCtxt.isNameMiddleChar(char ch)", "testcase": false, "constructor": false}, {"identifier": "readString", "parameters": "(String s)", "modifiers": "public", "return": "void", "signature": "void readString(String s)", "full_signature": "public void readString(String s)", "class_method_signature": "ParseCtxt.readString(String s)", "testcase": false, "constructor": false}, {"identifier": "readOptionalString", "parameters": "(String s)", "modifiers": "public", "return": "boolean", "signature": "boolean readOptionalString(String s)", "full_signature": "public boolean readOptionalString(String s)", "class_method_signature": "ParseCtxt.readOptionalString(String s)", "testcase": false, "constructor": false}, {"identifier": "readOptionalChar", "parameters": "(char ch)", "modifiers": "public", "return": "boolean", "signature": "boolean readOptionalChar(char ch)", "full_signature": "public boolean readOptionalChar(char ch)", "class_method_signature": "ParseCtxt.readOptionalChar(char ch)", "testcase": false, "constructor": false}, {"identifier": "readTill", "parameters": "(char ch)", "modifiers": "public final", "return": "String", "signature": "String readTill(char ch)", "full_signature": "public final String readTill(char ch)", "class_method_signature": "ParseCtxt.readTill(char ch)", "testcase": false, "constructor": false}, {"identifier": "getPos", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPos()", "full_signature": "public int getPos()", "class_method_signature": "ParseCtxt.getPos()", "testcase": false, "constructor": false}, {"identifier": "setPos", "parameters": "(int newPos)", "modifiers": "public", "return": "void", "signature": "void setPos(int newPos)", "full_signature": "public void setPos(int newPos)", "class_method_signature": "ParseCtxt.setPos(int newPos)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getText()", "full_signature": "public String getText()", "class_method_signature": "ParseCtxt.getText()", "testcase": false, "constructor": false}, {"identifier": "getSyntaxVersion", "parameters": "()", "modifiers": "public", "return": "SyntaxVersion", "signature": "SyntaxVersion getSyntaxVersion()", "full_signature": "public SyntaxVersion getSyntaxVersion()", "class_method_signature": "ParseCtxt.getSyntaxVersion()", "testcase": false, "constructor": false}], "file": "pm4j-common/src/main/java/org/pm4j/common/expr/parser/ParseCtxt.java"}, "focal_method": {"identifier": "isSpace", "parameters": "(char ch)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSpace(char ch) {\n    return Character.isSpaceChar(ch) || (ch == '\\t') || (ch == '\\n');\n  }", "signature": "boolean isSpace(char ch)", "full_signature": "public static boolean isSpace(char ch)", "class_method_signature": "ParseCtxt.isSpace(char ch)", "testcase": false, "constructor": false, "invocations": ["isSpaceChar"]}, "repository": {"repo_id": 3130403, "url": "https://github.com/pm4j/org.pm4j", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 16886, "license": "licensed"}}