{"test_class": {"identifier": "QueryServiceUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final IdQueryServiceFake<TestBean, Integer> idQueryService = new IdQueryServiceFake<TestBean, Integer>();", "modifier": "final", "type": "IdQueryServiceFake<TestBean, Integer>", "declarator": "idQueryService = new IdQueryServiceFake<TestBean, Integer>()", "var_name": "idQueryService"}, {"original_string": "final PageQueryServiceFake<TestBean, Integer> pageQueryService = new PageQueryServiceFake<TestBean, Integer>();", "modifier": "final", "type": "PageQueryServiceFake<TestBean, Integer>", "declarator": "pageQueryService = new PageQueryServiceFake<TestBean, Integer>()", "var_name": "pageQueryService"}], "file": "pm4j-common/src/test/java/org/pm4j/common/pageable/querybased/QueryServiceUtilTest.java"}, "test_case": {"identifier": "testFindAllItemsOnPageQueryService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFindAllItemsOnPageQueryService() {\n    assertEquals(\"[0, 1, 2, 3]\", QueryServiceUtil.findItems(pageQueryService, null, 100).toString());\n  }", "signature": "void testFindAllItemsOnPageQueryService()", "full_signature": "@Test public void testFindAllItemsOnPageQueryService()", "class_method_signature": "QueryServiceUtilTest.testFindAllItemsOnPageQueryService()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "findItems"]}, "focal_class": {"identifier": "QueryServiceUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "QueryServiceUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " QueryServiceUtil()", "full_signature": "private  QueryServiceUtil()", "class_method_signature": "QueryServiceUtil.QueryServiceUtil()", "testcase": false, "constructor": true}, {"identifier": "getItem", "parameters": "(QueryService<T, ?> s, QueryExpr itemExpr)", "modifiers": "public static", "return": "T", "signature": "T getItem(QueryService<T, ?> s, QueryExpr itemExpr)", "full_signature": "public static T getItem(QueryService<T, ?> s, QueryExpr itemExpr)", "class_method_signature": "QueryServiceUtil.getItem(QueryService<T, ?> s, QueryExpr itemExpr)", "testcase": false, "constructor": false}, {"identifier": "findItem", "parameters": "(QueryService<T, ?> s, QueryExpr itemExpr)", "modifiers": "public static", "return": "T", "signature": "T findItem(QueryService<T, ?> s, QueryExpr itemExpr)", "full_signature": "public static T findItem(QueryService<T, ?> s, QueryExpr itemExpr)", "class_method_signature": "QueryServiceUtil.findItem(QueryService<T, ?> s, QueryExpr itemExpr)", "testcase": false, "constructor": false}, {"identifier": "findItems", "parameters": "(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<T>", "signature": "List<T> findItems(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<T> findItems(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "class_method_signature": "QueryServiceUtil.findItems(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "testcase": false, "constructor": false}, {"identifier": "findEqItem", "parameters": "(QueryService<T, ?> s, QueryAttr qAttr, Object value)", "modifiers": "public static", "return": "T", "signature": "T findEqItem(QueryService<T, ?> s, QueryAttr qAttr, Object value)", "full_signature": "public static T findEqItem(QueryService<T, ?> s, QueryAttr qAttr, Object value)", "class_method_signature": "QueryServiceUtil.findEqItem(QueryService<T, ?> s, QueryAttr qAttr, Object value)", "testcase": false, "constructor": false}], "file": "pm4j-common/src/main/java/org/pm4j/common/pageable/querybased/QueryServiceUtil.java"}, "focal_method": {"identifier": "findItems", "parameters": "(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<T>", "body": "@SuppressWarnings(\"unchecked\")\n  public static <T> List<T> findItems(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems) {\n    QueryParams qp = new QueryParams();\n    qp.setQueryExpression(itemExpr);\n    if (s instanceof PageQueryService) {\n      List<T> items = ((PageQueryService<T, ?>) s).getItems(qp, 0, maxNumOfItems);\n      return items;\n    } else if (s instanceof IdQueryService) {\n      IdQueryService<T, Object> qs = (IdQueryService<T, Object>) s;\n      List<Object> ids = qs.findIds(qp, 0, maxNumOfItems);\n      List<T> items = qs.getItems(ids);\n      return items;\n    } else {\n      throw new RuntimeException(\"Unsupported service type found: \" + s);\n    }\n  }", "signature": "List<T> findItems(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<T> findItems(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "class_method_signature": "QueryServiceUtil.findItems(QueryService<T, ?> s, QueryExpr itemExpr, int maxNumOfItems)", "testcase": false, "constructor": false, "invocations": ["setQueryExpression", "getItems", "findIds", "getItems"]}, "repository": {"repo_id": 3130403, "url": "https://github.com/pm4j/org.pm4j", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 16886, "license": "licensed"}}