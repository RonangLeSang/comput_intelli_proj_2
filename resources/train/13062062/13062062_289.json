{"test_class": {"identifier": "InputPdfArgumentsControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ClearEventStudioRule eventStudioRule = new ClearEventStudioRule();", "modifier": "@Rule\n    public", "type": "ClearEventStudioRule", "declarator": "eventStudioRule = new ClearEventStudioRule()", "var_name": "eventStudioRule"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private Listener<InputPdfArgumentsLoadRequest> listener;", "modifier": "private", "type": "Listener<InputPdfArgumentsLoadRequest>", "declarator": "listener", "var_name": "listener"}], "file": "pdfsam-gui/src/test/java/org/pdfsam/InputPdfArgumentsControllerTest.java"}, "test_case": {"identifier": "onOtherArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onOtherArgs() {\n        new InputPdfArgumentsController().accept(Arrays.asList(\"-c\", \"--clean\", \"-clean\"));\n        verify(listener, never()).onEvent(any());\n    }", "signature": "void onOtherArgs()", "full_signature": "@Test public void onOtherArgs()", "class_method_signature": "InputPdfArgumentsControllerTest.onOtherArgs()", "testcase": true, "constructor": false, "invocations": ["accept", "asList", "onEvent", "verify", "never", "any"]}, "focal_class": {"identifier": "InputPdfArgumentsController", "superclass": "", "interfaces": "implements Consumer<List<String>>", "fields": [], "methods": [{"identifier": "accept", "parameters": "(List<String> pdfs)", "modifiers": "@Override public", "return": "void", "signature": "void accept(List<String> pdfs)", "full_signature": "@Override public void accept(List<String> pdfs)", "class_method_signature": "InputPdfArgumentsController.accept(List<String> pdfs)", "testcase": false, "constructor": false}], "file": "pdfsam-gui/src/main/java/org/pdfsam/InputPdfArgumentsController.java"}, "focal_method": {"identifier": "accept", "parameters": "(List<String> pdfs)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void accept(List<String> pdfs) {\n        if (nonNull(pdfs) && !pdfs.isEmpty()) {\n            InputPdfArgumentsLoadRequest event = new InputPdfArgumentsLoadRequest();\n\n            pdfs.stream().filter(s -> !s.startsWith(\"-\")).filter(FileType.PDF::matches).map(Paths::get)\n                    .filter(Files::isReadable).forEach(event.pdfs::add);\n\n            if (!event.pdfs.isEmpty()) {\n                eventStudio().broadcast(event);\n            }\n        }\n    }", "signature": "void accept(List<String> pdfs)", "full_signature": "@Override public void accept(List<String> pdfs)", "class_method_signature": "InputPdfArgumentsController.accept(List<String> pdfs)", "testcase": false, "constructor": false, "invocations": ["nonNull", "isEmpty", "forEach", "filter", "map", "filter", "filter", "stream", "startsWith", "isEmpty", "broadcast", "eventStudio"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}