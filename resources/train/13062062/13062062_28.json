{"test_class": {"identifier": "BulkRotateTaskTest", "superclass": "extends BaseTaskTest<BulkRotateParameters>", "interfaces": "", "fields": [{"original_string": "private BulkRotateParameters parameters;", "modifier": "private", "type": "BulkRotateParameters", "declarator": "parameters", "var_name": "parameters"}], "file": "pdfsam-service/src/test/java/org/pdfsam/task/BulkRotateTaskTest.java"}, "test_case": {"identifier": "testExecuteEncrypted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteEncrypted() throws IOException {\n        setUpParametersEncrypted();\n        testContext.directoryOutputTo(parameters);\n        execute(parameters);\n        testContext.assertTaskCompleted();\n        testContext.assertCreator().assertPages(4)\n                .forEachPdfOutput(d -> d.getPages().forEach(p -> assertEquals(180, p.getRotation())));\n    }", "signature": "void testExecuteEncrypted()", "full_signature": "@Test public void testExecuteEncrypted()", "class_method_signature": "BulkRotateTaskTest.testExecuteEncrypted()", "testcase": true, "constructor": false, "invocations": ["setUpParametersEncrypted", "directoryOutputTo", "execute", "assertTaskCompleted", "forEachPdfOutput", "assertPages", "assertCreator", "forEach", "getPages", "assertEquals", "getRotation"]}, "focal_class": {"identifier": "BulkRotateTask", "superclass": "extends BaseTask<BulkRotateParameters>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BulkRotateTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BulkRotateTask.class)", "var_name": "LOG"}, {"original_string": "private int totalSteps;", "modifier": "private", "type": "int", "declarator": "totalSteps", "var_name": "totalSteps"}, {"original_string": "private PDDocumentHandler documentHandler = null;", "modifier": "private", "type": "PDDocumentHandler", "declarator": "documentHandler = null", "var_name": "documentHandler"}, {"original_string": "private MultipleOutputWriter outputWriter;", "modifier": "private", "type": "MultipleOutputWriter", "declarator": "outputWriter", "var_name": "outputWriter"}, {"original_string": "private PdfSourceOpener<PDDocumentHandler> documentLoader;", "modifier": "private", "type": "PdfSourceOpener<PDDocumentHandler>", "declarator": "documentLoader", "var_name": "documentLoader"}], "methods": [{"identifier": "before", "parameters": "(BulkRotateParameters parameters, TaskExecutionContext executionContext)", "modifiers": "@Override public", "return": "void", "signature": "void before(BulkRotateParameters parameters, TaskExecutionContext executionContext)", "full_signature": "@Override public void before(BulkRotateParameters parameters, TaskExecutionContext executionContext)", "class_method_signature": "BulkRotateTask.before(BulkRotateParameters parameters, TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(BulkRotateParameters parameters)", "modifiers": "@Override public", "return": "void", "signature": "void execute(BulkRotateParameters parameters)", "full_signature": "@Override public void execute(BulkRotateParameters parameters)", "class_method_signature": "BulkRotateTask.execute(BulkRotateParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void after()", "full_signature": "@Override public void after()", "class_method_signature": "BulkRotateTask.after()", "testcase": false, "constructor": false}], "file": "pdfsam-service/src/main/java/org/pdfsam/task/BulkRotateTask.java"}, "focal_method": {"identifier": "execute", "parameters": "(BulkRotateParameters parameters)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(BulkRotateParameters parameters) throws TaskException {\n        int currentStep = 0;\n\n        for (PdfRotationInput input : parameters.getInputSet()) {\n            executionContext().assertTaskNotCancelled();\n            currentStep++;\n            LOG.debug(\"Opening {}\", input.source);\n            try {\n                documentHandler = input.source.open(documentLoader);\n                documentHandler.getPermissions().ensurePermission(PdfAccessPermission.ASSEMBLE);\n                documentHandler.setCreatorOnPDDocument();\n\n                File tmpFile = createTemporaryBuffer(parameters.getOutput());\n                LOG.debug(\"Created output on temporary buffer {}\", tmpFile);\n\n                PdfRotator rotator = new PdfRotator(documentHandler.getUnderlyingPDDocument());\n                for (Integer page : input.getPages(documentHandler.getNumberOfPages())) {\n                    executionContext().assertTaskNotCancelled();\n                    rotator.rotate(page, input.rotation);\n                }\n\n                documentHandler.setVersionOnPDDocument(parameters.getVersion());\n                documentHandler.setCompress(parameters.isCompress());\n                documentHandler.savePDDocument(tmpFile, parameters.getOutput().getEncryptionAtRestPolicy());\n\n                String outName = nameGenerator(parameters.getOutputPrefix())\n                        .generate(nameRequest().originalName(input.source.getName()).fileNumber(currentStep));\n                outputWriter.addOutput(file(tmpFile).name(outName));\n            } finally {\n                closeQuietly(documentHandler);\n            }\n\n            notifyEvent(executionContext().notifiableTaskMetadata()).stepsCompleted(currentStep).outOf(totalSteps);\n        }\n\n        parameters.getOutput().accept(outputWriter);\n        LOG.debug(\"Input documents rotated and written to {}\", parameters.getOutput());\n    }", "signature": "void execute(BulkRotateParameters parameters)", "full_signature": "@Override public void execute(BulkRotateParameters parameters)", "class_method_signature": "BulkRotateTask.execute(BulkRotateParameters parameters)", "testcase": false, "constructor": false, "invocations": ["getInputSet", "assertTaskNotCancelled", "executionContext", "debug", "open", "ensurePermission", "getPermissions", "setCreatorOnPDDocument", "createTemporaryBuffer", "getOutput", "debug", "getUnderlyingPDDocument", "getPages", "getNumberOfPages", "assertTaskNotCancelled", "executionContext", "rotate", "setVersionOnPDDocument", "getVersion", "setCompress", "isCompress", "savePDDocument", "getEncryptionAtRestPolicy", "getOutput", "generate", "nameGenerator", "getOutputPrefix", "fileNumber", "originalName", "nameRequest", "getName", "addOutput", "name", "file", "closeQuietly", "outOf", "stepsCompleted", "notifyEvent", "notifiableTaskMetadata", "executionContext", "accept", "getOutput", "debug", "getOutput"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}