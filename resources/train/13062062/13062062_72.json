{"test_class": {"identifier": "SAMBoxPdfLoadServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SAMBoxPdfLoadService victim = new SAMBoxPdfLoadService(\n            Arrays.asList(new PdfLoader[] { new DefaultSAMBoxLoader(), new BookmarksLevelSAMBoxLoader() }));", "modifier": "private", "type": "SAMBoxPdfLoadService", "declarator": "victim = new SAMBoxPdfLoadService(\n            Arrays.asList(new PdfLoader[] { new DefaultSAMBoxLoader(), new BookmarksLevelSAMBoxLoader() }))", "var_name": "victim"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Rule\n    public InitializeJavaFxThreadRule initJavaFxThread = new InitializeJavaFxThreadRule();", "modifier": "@Rule\n    public", "type": "InitializeJavaFxThreadRule", "declarator": "initJavaFxThread = new InitializeJavaFxThreadRule()", "var_name": "initJavaFxThread"}], "file": "pdfsam-service/src/test/java/org/pdfsam/pdf/SAMBoxPdfLoadServiceTest.java"}, "test_case": {"identifier": "invalidPdf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidPdf() throws IOException, InterruptedException, TimeoutException {\n        File testFile = folder.newFile(\"PDFsamTest.pdf\");\n        FileUtils.copyInputStreamToFile(getClass().getResourceAsStream(\"/im_empty.pdf\"), testFile);\n        PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(testFile);\n        List<PdfDocumentDescriptor> toLoad = Arrays.asList(new PdfDocumentDescriptor[] { descriptor });\n        assertEquals(PdfDescriptorLoadingStatus.INITIAL, descriptor.loadingStatus().getValue());\n        descriptor.moveStatusTo(PdfDescriptorLoadingStatus.REQUESTED);\n        victim.load(toLoad, RequiredPdfData.DEFAULT);\n        assertEquals(1, toLoad.size());\n        PdfDocumentDescriptor item = toLoad.get(0);\n        assertNotNull(item);\n        waitOrTimeout(() -> PdfDescriptorLoadingStatus.WITH_ERRORS == descriptor.loadingStatus().getValue(),\n                timeout(seconds(2)));\n    }", "signature": "void invalidPdf()", "full_signature": "@Test public void invalidPdf()", "class_method_signature": "SAMBoxPdfLoadServiceTest.invalidPdf()", "testcase": true, "constructor": false, "invocations": ["newFile", "copyInputStreamToFile", "getResourceAsStream", "getClass", "newDescriptorNoPassword", "asList", "assertEquals", "getValue", "loadingStatus", "moveStatusTo", "load", "assertEquals", "size", "get", "assertNotNull", "waitOrTimeout", "getValue", "loadingStatus", "timeout", "seconds"]}, "focal_class": {"identifier": "SAMBoxPdfLoadService", "superclass": "", "interfaces": "implements PdfLoadService", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SAMBoxPdfLoadService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SAMBoxPdfLoadService.class)", "var_name": "LOG"}, {"original_string": "private final Map<RequiredPdfData, BiConsumer<PDDocument, PdfDocumentDescriptor>> consumers = new HashMap<>();", "modifier": "private final", "type": "Map<RequiredPdfData, BiConsumer<PDDocument, PdfDocumentDescriptor>>", "declarator": "consumers = new HashMap<>()", "var_name": "consumers"}, {"original_string": "private static final BiConsumer<PDDocument, PdfDocumentDescriptor> STARTER = (r, descriptor) -> {\n        // NO OP\n    };", "modifier": "private static final", "type": "BiConsumer<PDDocument, PdfDocumentDescriptor>", "declarator": "STARTER = (r, descriptor) -> {\n        // NO OP\n    }", "var_name": "STARTER"}, {"original_string": "private static final BiConsumer<PDDocument, PdfDocumentDescriptor> FINISHER = (r, descriptor) -> {\n        if (descriptor.hasPassword()) {\n            fxMoveStatusTo(descriptor, LOADED_WITH_USER_PWD_DECRYPTION);\n        } else {\n            fxMoveStatusTo(descriptor, LOADED);\n        }\n    };", "modifier": "private static final", "type": "BiConsumer<PDDocument, PdfDocumentDescriptor>", "declarator": "FINISHER = (r, descriptor) -> {\n        if (descriptor.hasPassword()) {\n            fxMoveStatusTo(descriptor, LOADED_WITH_USER_PWD_DECRYPTION);\n        } else {\n            fxMoveStatusTo(descriptor, LOADED);\n        }\n    }", "var_name": "FINISHER"}], "methods": [{"identifier": "SAMBoxPdfLoadService", "parameters": "(List<PdfLoader<PDDocument>> loaders)", "modifiers": "public", "return": "", "signature": " SAMBoxPdfLoadService(List<PdfLoader<PDDocument>> loaders)", "full_signature": "public  SAMBoxPdfLoadService(List<PdfLoader<PDDocument>> loaders)", "class_method_signature": "SAMBoxPdfLoadService.SAMBoxPdfLoadService(List<PdfLoader<PDDocument>> loaders)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "modifiers": "@Override public", "return": "void", "signature": "void load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "full_signature": "@Override public void load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "class_method_signature": "SAMBoxPdfLoadService.load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "testcase": false, "constructor": false}, {"identifier": "fxMoveStatusTo", "parameters": "(PdfDocumentDescriptor descriptor, PdfDescriptorLoadingStatus status)", "modifiers": "private static", "return": "void", "signature": "void fxMoveStatusTo(PdfDocumentDescriptor descriptor, PdfDescriptorLoadingStatus status)", "full_signature": "private static void fxMoveStatusTo(PdfDocumentDescriptor descriptor, PdfDescriptorLoadingStatus status)", "class_method_signature": "SAMBoxPdfLoadService.fxMoveStatusTo(PdfDocumentDescriptor descriptor, PdfDescriptorLoadingStatus status)", "testcase": false, "constructor": false}], "file": "pdfsam-service/src/main/java/org/pdfsam/pdf/SAMBoxPdfLoadService.java"}, "focal_method": {"identifier": "load", "parameters": "(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires) {\n        LOG.debug(DefaultI18nContext.getInstance().i18n(\"Loading pdf documents\"));\n        BiConsumer<PDDocument, PdfDocumentDescriptor> consumer = Arrays.stream(requires).map(consumers::get)\n                .reduce(STARTER, (r, d) -> r.andThen(d)).andThen(FINISHER);\n\n        for (PdfDocumentDescriptor current : toLoad) {\n            if (current.hasReferences()) {\n                LOG.trace(\"Loading {}\", current.getFileName());\n                fxMoveStatusTo(current, LOADING);\n                try (PDDocument document = PDFParser.parse(\n                        new BufferedSeekableSource(new FileChannelSeekableSource(current.getFile())),\n                        current.getPassword())) {\n                    consumer.accept(document, current);\n                } catch (InvalidPasswordException twpe) {\n                    fxMoveStatusTo(current, ENCRYPTED);\n                    LOG.warn(\"User password required for '{}'\", current.getFileName(), twpe);\n                } catch (Exception e) {\n                    LOG.error(\"An error occured loading the document '{}'\", current.getFileName(), e);\n                    fxMoveStatusTo(current, WITH_ERRORS);\n                }\n                LOG.info(\"{} loaded\", current.getFileName());\n            } else {\n                LOG.trace(\"Skipping invalidated document {}\", current.getFileName());\n            }\n        }\n        LOG.debug(DefaultI18nContext.getInstance().i18n(\"Documents loaded\"));\n    }", "signature": "void load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "full_signature": "@Override public void load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "class_method_signature": "SAMBoxPdfLoadService.load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires)", "testcase": false, "constructor": false, "invocations": ["debug", "i18n", "getInstance", "andThen", "reduce", "map", "stream", "andThen", "hasReferences", "trace", "getFileName", "fxMoveStatusTo", "parse", "getFile", "getPassword", "accept", "fxMoveStatusTo", "warn", "getFileName", "error", "getFileName", "fxMoveStatusTo", "info", "getFileName", "trace", "getFileName", "debug", "i18n", "getInstance"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}