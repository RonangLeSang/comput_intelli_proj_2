{"test_class": {"identifier": "PrefixFieldTest", "superclass": "extends ApplicationTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ClearEventStudioRule clearEventStudio = new ClearEventStudioRule();", "modifier": "@Rule\n    public", "type": "ClearEventStudioRule", "declarator": "clearEventStudio = new ClearEventStudioRule()", "var_name": "clearEventStudio"}, {"original_string": "private PrefixField victim;", "modifier": "private", "type": "PrefixField", "declarator": "victim", "var_name": "victim"}, {"original_string": "private PrefixField secondVictim;", "modifier": "private", "type": "PrefixField", "declarator": "secondVictim", "var_name": "secondVictim"}], "file": "pdfsam-fx/src/test/java/org/pdfsam/ui/prefix/PrefixFieldTest.java"}, "test_case": {"identifier": "prefixMenuItemIsAdded", "parameters": "()", "modifiers": "@Test @Category(NoHeadless.class) public", "return": "void", "body": "@Test\n    @Category(NoHeadless.class)\n    public void prefixMenuItemIsAdded() {\n        victim.addMenuItemFor(Prefix.BOOKMARK);\n        rightClickOn(victim).clickOn(\"#addPrefixMenu\").clickOn(Prefix.BOOKMARK.getFriendlyName());\n        assertTrue(victim.getText().contains(Prefix.BOOKMARK.getFriendlyName()));\n    }", "signature": "void prefixMenuItemIsAdded()", "full_signature": "@Test @Category(NoHeadless.class) public void prefixMenuItemIsAdded()", "class_method_signature": "PrefixFieldTest.prefixMenuItemIsAdded()", "testcase": true, "constructor": false, "invocations": ["addMenuItemFor", "clickOn", "clickOn", "rightClickOn", "getFriendlyName", "assertTrue", "contains", "getText", "getFriendlyName"]}, "focal_class": {"identifier": "PrefixField", "superclass": "extends TextField", "interfaces": "implements ResettableView", "fields": [{"original_string": "private Menu menu;", "modifier": "private", "type": "Menu", "declarator": "menu", "var_name": "menu"}], "methods": [{"identifier": "PrefixField", "parameters": "(String placeholder)", "modifiers": "public", "return": "", "signature": " PrefixField(String placeholder)", "full_signature": "public  PrefixField(String placeholder)", "class_method_signature": "PrefixField.PrefixField(String placeholder)", "testcase": false, "constructor": true}, {"identifier": "addMenuItemFor", "parameters": "(Prefix... prefixes)", "modifiers": "public", "return": "void", "signature": "void addMenuItemFor(Prefix... prefixes)", "full_signature": "public void addMenuItemFor(Prefix... prefixes)", "class_method_signature": "PrefixField.addMenuItemFor(Prefix... prefixes)", "testcase": false, "constructor": false}, {"identifier": "addMenuItemFor", "parameters": "(String... prefixes)", "modifiers": "public", "return": "void", "signature": "void addMenuItemFor(String... prefixes)", "full_signature": "public void addMenuItemFor(String... prefixes)", "class_method_signature": "PrefixField.addMenuItemFor(String... prefixes)", "testcase": false, "constructor": false}, {"identifier": "resetView", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetView()", "full_signature": "@Override public void resetView()", "class_method_signature": "PrefixField.resetView()", "testcase": false, "constructor": false}], "file": "pdfsam-fx/src/main/java/org/pdfsam/ui/prefix/PrefixField.java"}, "focal_method": {"identifier": "addMenuItemFor", "parameters": "(Prefix... prefixes)", "modifiers": "public", "return": "void", "body": "public void addMenuItemFor(Prefix... prefixes) {\n        for (Prefix current : prefixes) {\n            this.menu.getItems().add(new PrefixMenuItem(current));\n        }\n    }", "signature": "void addMenuItemFor(Prefix... prefixes)", "full_signature": "public void addMenuItemFor(Prefix... prefixes)", "class_method_signature": "PrefixField.addMenuItemFor(Prefix... prefixes)", "testcase": false, "constructor": false, "invocations": ["add", "getItems"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}