{"test_class": {"identifier": "MultipleFilesDropControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ClearEventStudioRule cleanStudio = new ClearEventStudioRule();", "modifier": "@Rule\n    public", "type": "ClearEventStudioRule", "declarator": "cleanStudio = new ClearEventStudioRule()", "var_name": "cleanStudio"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private HitTestListener<PdfLoadRequestEvent> listener;", "modifier": "private", "type": "HitTestListener<PdfLoadRequestEvent>", "declarator": "listener", "var_name": "listener"}, {"original_string": "private HitTestListener<PdfFilesListLoadRequest> listListener;", "modifier": "private", "type": "HitTestListener<PdfFilesListLoadRequest>", "declarator": "listListener", "var_name": "listListener"}, {"original_string": "private static final String MODULE = \"module\";", "modifier": "private static final", "type": "String", "declarator": "MODULE = \"module\"", "var_name": "MODULE"}, {"original_string": "private MultipleFilesDropController victim;", "modifier": "private", "type": "MultipleFilesDropController", "declarator": "victim", "var_name": "victim"}, {"original_string": "private AddSubdirectoriesConfirmationDialog dialog;", "modifier": "private", "type": "AddSubdirectoriesConfirmationDialog", "declarator": "dialog", "var_name": "dialog"}], "file": "pdfsam-gui/src/test/java/org/pdfsam/ui/dnd/MultipleFilesDropControllerTest.java"}, "test_case": {"identifier": "oneCsv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void oneCsv() throws IOException {\n        victim.request(new MultipleFilesDroppedEvent(MODULE, Arrays.asList(folder.newFile(\"test.csv\"))));\n        assertTrue(listListener.isHit());\n    }", "signature": "void oneCsv()", "full_signature": "@Test public void oneCsv()", "class_method_signature": "MultipleFilesDropControllerTest.oneCsv()", "testcase": true, "constructor": false, "invocations": ["request", "asList", "newFile", "assertTrue", "isHit"]}, "focal_class": {"identifier": "MultipleFilesDropController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MultipleFilesDropController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MultipleFilesDropController.class)", "var_name": "LOG"}, {"original_string": "private Provider<AddSubdirectoriesConfirmationDialog> dialog;", "modifier": "private", "type": "Provider<AddSubdirectoriesConfirmationDialog>", "declarator": "dialog", "var_name": "dialog"}], "methods": [{"identifier": "MultipleFilesDropController", "parameters": "(Provider<AddSubdirectoriesConfirmationDialog> dialog)", "modifiers": "@Inject public", "return": "", "signature": " MultipleFilesDropController(Provider<AddSubdirectoriesConfirmationDialog> dialog)", "full_signature": "@Inject public  MultipleFilesDropController(Provider<AddSubdirectoriesConfirmationDialog> dialog)", "class_method_signature": "MultipleFilesDropController.MultipleFilesDropController(Provider<AddSubdirectoriesConfirmationDialog> dialog)", "testcase": false, "constructor": true}, {"identifier": "request", "parameters": "(MultipleFilesDroppedEvent event)", "modifiers": "@EventListener public", "return": "void", "signature": "void request(MultipleFilesDroppedEvent event)", "full_signature": "@EventListener public void request(MultipleFilesDroppedEvent event)", "class_method_signature": "MultipleFilesDropController.request(MultipleFilesDroppedEvent event)", "testcase": false, "constructor": false}, {"identifier": "getFiles", "parameters": "(List<File> files)", "modifiers": "private", "return": "Stream<File>", "signature": "Stream<File> getFiles(List<File> files)", "full_signature": "private Stream<File> getFiles(List<File> files)", "class_method_signature": "MultipleFilesDropController.getFiles(List<File> files)", "testcase": false, "constructor": false}], "file": "pdfsam-gui/src/main/java/org/pdfsam/ui/dnd/MultipleFilesDropController.java"}, "focal_method": {"identifier": "request", "parameters": "(MultipleFilesDroppedEvent event)", "modifiers": "@EventListener public", "return": "void", "body": "@EventListener\n    public void request(MultipleFilesDroppedEvent event) {\n        // not a PDF maybe a csv or txt containing the list\n        if (event.files.size() == 1 && !event.files.get(0).isDirectory()\n                && (FileType.TXT.matches(event.files.get(0).getName())\n                        || FileType.CSV.matches(event.files.get(0).getName()))) {\n            eventStudio().broadcast(new PdfFilesListLoadRequest(event.getOwnerModule(), event.files.get(0).toPath()));\n        } else {\n            final PdfLoadRequestEvent loadEvent = new PdfLoadRequestEvent(event.getOwnerModule());\n            getFiles(event.files).filter(f -> FileType.PDF.matches(f.getName()))\n                    .map(PdfDocumentDescriptor::newDescriptorNoPassword).forEach(loadEvent::add);\n            if (!loadEvent.getDocuments().isEmpty()) {\n                eventStudio().broadcast(loadEvent, event.getOwnerModule());\n            } else {\n                eventStudio().broadcast(new AddNotificationRequestEvent(NotificationType.WARN,\n                        DefaultI18nContext.getInstance()\n                                .i18n(\"Drag and drop PDF files or directories containing PDF files\"),\n                        DefaultI18nContext.getInstance().i18n(\"No PDF found\")));\n            }\n        }\n    }", "signature": "void request(MultipleFilesDroppedEvent event)", "full_signature": "@EventListener public void request(MultipleFilesDroppedEvent event)", "class_method_signature": "MultipleFilesDropController.request(MultipleFilesDroppedEvent event)", "testcase": false, "constructor": false, "invocations": ["size", "isDirectory", "get", "matches", "getName", "get", "matches", "getName", "get", "broadcast", "eventStudio", "getOwnerModule", "toPath", "get", "getOwnerModule", "forEach", "map", "filter", "getFiles", "matches", "getName", "isEmpty", "getDocuments", "broadcast", "eventStudio", "getOwnerModule", "broadcast", "eventStudio", "i18n", "getInstance", "i18n", "getInstance"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}