{"test_class": {"identifier": "DefaultPremiumModulesServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private DefaultPremiumModulesService victim;", "modifier": "private", "type": "DefaultPremiumModulesService", "declarator": "victim", "var_name": "victim"}, {"original_string": "private Pdfsam pdfsam;", "modifier": "private", "type": "Pdfsam", "declarator": "pdfsam", "var_name": "pdfsam"}], "file": "pdfsam-service/src/test/java/org/pdfsam/premium/DefaultPremiumModulesServiceTest.java"}, "test_case": {"identifier": "testGetLatestNews", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLatestNews() throws Exception {\n        File file = folder.newFile();\n        FileUtils.copyInputStreamToFile(getClass().getResourceAsStream(\"/test_premium_modules.json\"), file);\n        when(pdfsam.property(ConfigurableProperty.PREMIUM_MODULES_URL)).thenReturn(file.toURI().toString());\n        List<PremiumModule> modules = victim.getPremiumModules();\n        assertEquals(1, modules.size());\n        assertEquals(\"module-name\", modules.get(0).getName());\n        assertEquals(\"module-description\", modules.get(0).getDescription());\n        assertEquals(1, modules.get(0).getId());\n        assertEquals(PremiumProduct.VISUAL, modules.get(0).getProduct());\n        assertEquals(\"http://www.pdfsam.org/\", modules.get(0).getUrl());\n    }", "signature": "void testGetLatestNews()", "full_signature": "@Test public void testGetLatestNews()", "class_method_signature": "DefaultPremiumModulesServiceTest.testGetLatestNews()", "testcase": true, "constructor": false, "invocations": ["newFile", "copyInputStreamToFile", "getResourceAsStream", "getClass", "thenReturn", "when", "property", "toString", "toURI", "getPremiumModules", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getDescription", "get", "assertEquals", "getId", "get", "assertEquals", "getProduct", "get", "assertEquals", "getUrl", "get"]}, "focal_class": {"identifier": "DefaultPremiumModulesService", "superclass": "", "interfaces": "implements PremiumModulesService", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultPremiumModulesService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultPremiumModulesService.class)", "var_name": "LOG"}, {"original_string": "private Pdfsam pdfsam;", "modifier": "private", "type": "Pdfsam", "declarator": "pdfsam", "var_name": "pdfsam"}], "methods": [{"identifier": "DefaultPremiumModulesService", "parameters": "(Pdfsam pdfsam)", "modifiers": "@Inject", "return": "", "signature": " DefaultPremiumModulesService(Pdfsam pdfsam)", "full_signature": "@Inject  DefaultPremiumModulesService(Pdfsam pdfsam)", "class_method_signature": "DefaultPremiumModulesService.DefaultPremiumModulesService(Pdfsam pdfsam)", "testcase": false, "constructor": true}, {"identifier": "getPremiumModules", "parameters": "()", "modifiers": "@Override public", "return": "List<PremiumModule>", "signature": "List<PremiumModule> getPremiumModules()", "full_signature": "@Override public List<PremiumModule> getPremiumModules()", "class_method_signature": "DefaultPremiumModulesService.getPremiumModules()", "testcase": false, "constructor": false}], "file": "pdfsam-service/src/main/java/org/pdfsam/premium/DefaultPremiumModulesService.java"}, "focal_method": {"identifier": "getPremiumModules", "parameters": "()", "modifiers": "@Override public", "return": "List<PremiumModule>", "body": "@Override\n    public List<PremiumModule> getPremiumModules() {\n        try {\n            return JSON.std.with(Feature.READ_ONLY, true).listOfFrom(PremiumModule.class,\n                    urlToStream(new URL(pdfsam.property(ConfigurableProperty.PREMIUM_MODULES_URL))));\n        } catch (IOException e) {\n            LOG.warn(DefaultI18nContext.getInstance().i18n(\"Unable to retrieve premium features description\"), e);\n        }\n        return Collections.emptyList();\n    }", "signature": "List<PremiumModule> getPremiumModules()", "full_signature": "@Override public List<PremiumModule> getPremiumModules()", "class_method_signature": "DefaultPremiumModulesService.getPremiumModules()", "testcase": false, "constructor": false, "invocations": ["listOfFrom", "with", "urlToStream", "property", "warn", "i18n", "getInstance", "emptyList"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}