{"test_class": {"identifier": "RotateSelectionPaneTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MODULE = \"MODULE\";", "modifier": "private static final", "type": "String", "declarator": "MODULE = \"MODULE\"", "var_name": "MODULE"}, {"original_string": "@Rule\n    public ClearEventStudioRule clear = new ClearEventStudioRule(MODULE);", "modifier": "@Rule\n    public", "type": "ClearEventStudioRule", "declarator": "clear = new ClearEventStudioRule(MODULE)", "var_name": "clear"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Rule\n    public InitializeAndApplyJavaFxThreadRule javaFxThread = new InitializeAndApplyJavaFxThreadRule();", "modifier": "@Rule\n    public", "type": "InitializeAndApplyJavaFxThreadRule", "declarator": "javaFxThread = new InitializeAndApplyJavaFxThreadRule()", "var_name": "javaFxThread"}, {"original_string": "private RotateParametersBuilder builder;", "modifier": "private", "type": "RotateParametersBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private Consumer<String> onError;", "modifier": "private", "type": "Consumer<String>", "declarator": "onError", "var_name": "onError"}, {"original_string": "private RotateSelectionPane victim;", "modifier": "private", "type": "RotateSelectionPane", "declarator": "victim", "var_name": "victim"}], "file": "pdfsam-rotate/src/test/java/org/pdfsam/rotate/RotateSelectionPaneTest.java"}, "test_case": {"identifier": "emptyByZeroPagesSelected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptyByZeroPagesSelected() throws Exception {\n        populate();\n        victim.table().getItems().get(0).pageSelection.set(\"0\");\n        victim.apply(builder, onError);\n        verify(onError).accept(anyString());\n        verify(builder, never()).addInput(any(), any());\n    }", "signature": "void emptyByZeroPagesSelected()", "full_signature": "@Test public void emptyByZeroPagesSelected()", "class_method_signature": "RotateSelectionPaneTest.emptyByZeroPagesSelected()", "testcase": true, "constructor": false, "invocations": ["populate", "set", "get", "getItems", "table", "apply", "accept", "verify", "anyString", "addInput", "verify", "never", "any", "any"]}, "focal_class": {"identifier": "RotateSelectionPane", "superclass": "extends MultipleSelectionPane", "interfaces": "implements TaskParametersBuildStep<RotateParametersBuilder>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RotateSelectionPane.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RotateSelectionPane.class)", "var_name": "LOG"}], "methods": [{"identifier": "RotateSelectionPane", "parameters": "(String ownerModule)", "modifiers": "public", "return": "", "signature": " RotateSelectionPane(String ownerModule)", "full_signature": "public  RotateSelectionPane(String ownerModule)", "class_method_signature": "RotateSelectionPane.RotateSelectionPane(String ownerModule)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(RotateParametersBuilder builder, Consumer<String> onError)", "modifiers": "@Override public", "return": "void", "signature": "void apply(RotateParametersBuilder builder, Consumer<String> onError)", "full_signature": "@Override public void apply(RotateParametersBuilder builder, Consumer<String> onError)", "class_method_signature": "RotateSelectionPane.apply(RotateParametersBuilder builder, Consumer<String> onError)", "testcase": false, "constructor": false}], "file": "pdfsam-rotate/src/main/java/org/pdfsam/rotate/RotateSelectionPane.java"}, "focal_method": {"identifier": "apply", "parameters": "(RotateParametersBuilder builder, Consumer<String> onError)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void apply(RotateParametersBuilder builder, Consumer<String> onError) {\n        try {\n            table().getItems().stream().filter(s -> !Objects.equals(\"0\", trim(s.pageSelection.get())))\n                    .forEach(i -> builder.addInput(i.descriptor().toPdfFileSource(), i.toPageRangeSet()));\n            if (!builder.hasInput()) {\n                onError.accept(DefaultI18nContext.getInstance().i18n(\"No PDF document has been selected\"));\n            }\n        } catch (ConversionException e) {\n            LOG.error(e.getMessage());\n            onError.accept(e.getMessage());\n        }\n    }", "signature": "void apply(RotateParametersBuilder builder, Consumer<String> onError)", "full_signature": "@Override public void apply(RotateParametersBuilder builder, Consumer<String> onError)", "class_method_signature": "RotateSelectionPane.apply(RotateParametersBuilder builder, Consumer<String> onError)", "testcase": false, "constructor": false, "invocations": ["forEach", "filter", "stream", "getItems", "table", "equals", "trim", "get", "addInput", "toPdfFileSource", "descriptor", "toPageRangeSet", "hasInput", "accept", "i18n", "getInstance", "error", "getMessage", "accept", "getMessage"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}