{"test_class": {"identifier": "PdfDocumentDescriptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PdfDocumentDescriptor victim;", "modifier": "private", "type": "PdfDocumentDescriptor", "declarator": "victim", "var_name": "victim"}, {"original_string": "private PdfDocumentDescriptor victimNoPwd;", "modifier": "private", "type": "PdfDocumentDescriptor", "declarator": "victimNoPwd", "var_name": "victimNoPwd"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "file": "pdfsam-core/src/test/java/org/pdfsam/pdf/PdfDocumentDescriptorTest.java"}, "test_case": {"identifier": "getVersionString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getVersionString() {\n        victim.setVersion(PdfVersion.VERSION_1_5);\n        assertFalse(isBlank(victim.getVersionString()));\n    }", "signature": "void getVersionString()", "full_signature": "@Test public void getVersionString()", "class_method_signature": "PdfDocumentDescriptorTest.getVersionString()", "testcase": true, "constructor": false, "invocations": ["setVersion", "assertFalse", "isBlank", "getVersionString"]}, "focal_class": {"identifier": "PdfDocumentDescriptor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObservableAtomicReference<PdfDescriptorLoadingStatus> loadingStatus = new ObservableAtomicReference<>(\n            PdfDescriptorLoadingStatus.INITIAL);", "modifier": "private", "type": "ObservableAtomicReference<PdfDescriptorLoadingStatus>", "declarator": "loadingStatus = new ObservableAtomicReference<>(\n            PdfDescriptorLoadingStatus.INITIAL)", "var_name": "loadingStatus"}, {"original_string": "private AtomicInteger references = new AtomicInteger(1);", "modifier": "private", "type": "AtomicInteger", "declarator": "references = new AtomicInteger(1)", "var_name": "references"}, {"original_string": "private ObservableAtomicReference<Integer> pages = new ObservableAtomicReference<>(0);", "modifier": "private", "type": "ObservableAtomicReference<Integer>", "declarator": "pages = new ObservableAtomicReference<>(0)", "var_name": "pages"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private PdfVersion version;", "modifier": "private", "type": "PdfVersion", "declarator": "version", "var_name": "version"}, {"original_string": "private Map<String, String> metadata = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "metadata = new HashMap<>()", "var_name": "metadata"}, {"original_string": "private SortedSet<Integer> validBookmarksLevels = Collections.emptySortedSet();", "modifier": "private", "type": "SortedSet<Integer>", "declarator": "validBookmarksLevels = Collections.emptySortedSet()", "var_name": "validBookmarksLevels"}], "methods": [{"identifier": "PdfDocumentDescriptor", "parameters": "(File file, String password)", "modifiers": "private", "return": "", "signature": " PdfDocumentDescriptor(File file, String password)", "full_signature": "private  PdfDocumentDescriptor(File file, String password)", "class_method_signature": "PdfDocumentDescriptor.PdfDocumentDescriptor(File file, String password)", "testcase": false, "constructor": true}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "PdfDocumentDescriptor.getFileName()", "testcase": false, "constructor": false}, {"identifier": "toPdfFileSource", "parameters": "()", "modifiers": "public", "return": "PdfFileSource", "signature": "PdfFileSource toPdfFileSource()", "full_signature": "public PdfFileSource toPdfFileSource()", "class_method_signature": "PdfDocumentDescriptor.toPdfFileSource()", "testcase": false, "constructor": false}, {"identifier": "getInformation", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getInformation(String key)", "full_signature": "public String getInformation(String key)", "class_method_signature": "PdfDocumentDescriptor.getInformation(String key)", "testcase": false, "constructor": false}, {"identifier": "setInformationDictionary", "parameters": "(Map<String, String> info)", "modifiers": "public", "return": "void", "signature": "void setInformationDictionary(Map<String, String> info)", "full_signature": "public void setInformationDictionary(Map<String, String> info)", "class_method_signature": "PdfDocumentDescriptor.setInformationDictionary(Map<String, String> info)", "testcase": false, "constructor": false}, {"identifier": "putInformation", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void putInformation(String key, String value)", "full_signature": "public void putInformation(String key, String value)", "class_method_signature": "PdfDocumentDescriptor.putInformation(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "pages", "parameters": "(int newValue)", "modifiers": "public", "return": "void", "signature": "void pages(int newValue)", "full_signature": "public void pages(int newValue)", "class_method_signature": "PdfDocumentDescriptor.pages(int newValue)", "testcase": false, "constructor": false}, {"identifier": "loadingStatus", "parameters": "()", "modifiers": "public", "return": "ObservableAtomicReference<PdfDescriptorLoadingStatus>", "signature": "ObservableAtomicReference<PdfDescriptorLoadingStatus> loadingStatus()", "full_signature": "public ObservableAtomicReference<PdfDescriptorLoadingStatus> loadingStatus()", "class_method_signature": "PdfDocumentDescriptor.loadingStatus()", "testcase": false, "constructor": false}, {"identifier": "pages", "parameters": "()", "modifiers": "public", "return": "ObservableAtomicReference<Integer>", "signature": "ObservableAtomicReference<Integer> pages()", "full_signature": "public ObservableAtomicReference<Integer> pages()", "class_method_signature": "PdfDocumentDescriptor.pages()", "testcase": false, "constructor": false}, {"identifier": "moveStatusTo", "parameters": "(PdfDescriptorLoadingStatus destination)", "modifiers": "public", "return": "void", "signature": "void moveStatusTo(PdfDescriptorLoadingStatus destination)", "full_signature": "public void moveStatusTo(PdfDescriptorLoadingStatus destination)", "class_method_signature": "PdfDocumentDescriptor.moveStatusTo(PdfDescriptorLoadingStatus destination)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "PdfDocumentDescriptor.getPassword()", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setPassword(String password)", "full_signature": "public void setPassword(String password)", "class_method_signature": "PdfDocumentDescriptor.setPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "hasPassword", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasPassword()", "full_signature": "public boolean hasPassword()", "class_method_signature": "PdfDocumentDescriptor.hasPassword()", "testcase": false, "constructor": false}, {"identifier": "getVersionString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersionString()", "full_signature": "public String getVersionString()", "class_method_signature": "PdfDocumentDescriptor.getVersionString()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "PdfVersion", "signature": "PdfVersion getVersion()", "full_signature": "public PdfVersion getVersion()", "class_method_signature": "PdfDocumentDescriptor.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(PdfVersion version)", "modifiers": "public", "return": "void", "signature": "void setVersion(PdfVersion version)", "full_signature": "public void setVersion(PdfVersion version)", "class_method_signature": "PdfDocumentDescriptor.setVersion(PdfVersion version)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getFile()", "full_signature": "public File getFile()", "class_method_signature": "PdfDocumentDescriptor.getFile()", "testcase": false, "constructor": false}, {"identifier": "setValidBookmarksLevels", "parameters": "(Set<Integer> levels)", "modifiers": "public", "return": "void", "signature": "void setValidBookmarksLevels(Set<Integer> levels)", "full_signature": "public void setValidBookmarksLevels(Set<Integer> levels)", "class_method_signature": "PdfDocumentDescriptor.setValidBookmarksLevels(Set<Integer> levels)", "testcase": false, "constructor": false}, {"identifier": "getValidBookmarksLevels", "parameters": "()", "modifiers": "public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> getValidBookmarksLevels()", "full_signature": "public SortedSet<Integer> getValidBookmarksLevels()", "class_method_signature": "PdfDocumentDescriptor.getValidBookmarksLevels()", "testcase": false, "constructor": false}, {"identifier": "hasReferences", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasReferences()", "full_signature": "public boolean hasReferences()", "class_method_signature": "PdfDocumentDescriptor.hasReferences()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean release()", "full_signature": "public boolean release()", "class_method_signature": "PdfDocumentDescriptor.release()", "testcase": false, "constructor": false}, {"identifier": "releaseAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void releaseAll()", "full_signature": "public void releaseAll()", "class_method_signature": "PdfDocumentDescriptor.releaseAll()", "testcase": false, "constructor": false}, {"identifier": "retain", "parameters": "()", "modifiers": "public", "return": "PdfDocumentDescriptor", "signature": "PdfDocumentDescriptor retain()", "full_signature": "public PdfDocumentDescriptor retain()", "class_method_signature": "PdfDocumentDescriptor.retain()", "testcase": false, "constructor": false}, {"identifier": "newDescriptor", "parameters": "(File file, String password)", "modifiers": "public static", "return": "PdfDocumentDescriptor", "signature": "PdfDocumentDescriptor newDescriptor(File file, String password)", "full_signature": "public static PdfDocumentDescriptor newDescriptor(File file, String password)", "class_method_signature": "PdfDocumentDescriptor.newDescriptor(File file, String password)", "testcase": false, "constructor": false}, {"identifier": "newDescriptorNoPassword", "parameters": "(File file)", "modifiers": "public static", "return": "PdfDocumentDescriptor", "signature": "PdfDocumentDescriptor newDescriptorNoPassword(File file)", "full_signature": "public static PdfDocumentDescriptor newDescriptorNoPassword(File file)", "class_method_signature": "PdfDocumentDescriptor.newDescriptorNoPassword(File file)", "testcase": false, "constructor": false}], "file": "pdfsam-core/src/main/java/org/pdfsam/pdf/PdfDocumentDescriptor.java"}, "focal_method": {"identifier": "getVersionString", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getVersionString() {\n        return ofNullable(version).map(PdfVersion::getVersionString).orElse(\"\");\n    }", "signature": "String getVersionString()", "full_signature": "public String getVersionString()", "class_method_signature": "PdfDocumentDescriptor.getVersionString()", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "ofNullable"]}, "repository": {"repo_id": 13062062, "url": "https://github.com/torakiki/pdfsam", "language": "Java", "is_fork": false, "fork_count": 177, "stargazer_count": 1113, "size": 10221, "license": "licensed"}}