{"test_class": {"identifier": "TestSimpleReplicatedExoCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PortalContainer container;", "modifier": "private", "type": "PortalContainer", "declarator": "container", "var_name": "container"}, {"original_string": "private RPCServiceImpl service1, service2;", "modifier": "private", "type": "RPCServiceImpl", "declarator": "service1", "var_name": "service1"}, {"original_string": "private SimpleReplicatedExoCache<String, String> cache1, cache2;", "modifier": "private", "type": "SimpleReplicatedExoCache<String, String>", "declarator": "cache1", "var_name": "cache1"}], "file": "exo.kernel.component.cache/src/test/java/org/exoplatform/services/cache/concurrent/TestSimpleReplicatedExoCache.java"}, "test_case": {"identifier": "testClearCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testClearCache() throws Exception\n   {\n      Assert.assertEquals(0, cache1.getCacheSize());\n      Assert.assertEquals(0, cache2.getCacheSize());\n      cache1.put(\"a\", \"value\");\n      cache1.put(\"b\", \"value\");\n      cache1.put(\"c\", \"value\");\n      Assert.assertEquals(3, cache1.getCacheSize());\n      for (int i = 0; i < 5; i++)\n      {\n         if (cache2.getCacheSize() == 3)\n            break;\n         Thread.sleep(200);\n      }\n      Assert.assertEquals(3, cache2.getCacheSize());\n      cache1.clearCache();\n      Assert.assertEquals(0, cache1.getCacheSize());\n      Assert.assertNull(cache1.get(\"a\"));\n      Assert.assertNull(cache1.get(\"b\"));\n      Assert.assertNull(cache1.get(\"c\"));\n      for (int i = 0; i < 5; i++)\n      {\n         if (cache2.getCacheSize() == 0)\n            break;\n         Thread.sleep(200);\n      }\n      Assert.assertEquals(0, cache2.getCacheSize());\n      Assert.assertNull(cache2.get(\"a\"));\n      Assert.assertNull(cache2.get(\"b\"));\n      Assert.assertNull(cache2.get(\"c\"));\n   }", "signature": "void testClearCache()", "full_signature": "@Test public void testClearCache()", "class_method_signature": "TestSimpleReplicatedExoCache.testClearCache()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getCacheSize", "assertEquals", "getCacheSize", "put", "put", "put", "assertEquals", "getCacheSize", "getCacheSize", "sleep", "assertEquals", "getCacheSize", "clearCache", "assertEquals", "getCacheSize", "assertNull", "get", "assertNull", "get", "assertNull", "get", "getCacheSize", "sleep", "assertEquals", "getCacheSize", "assertNull", "get", "assertNull", "get", "assertNull", "get"]}, "focal_class": {"identifier": "SimpleReplicatedExoCache", "superclass": "extends ConcurrentFIFOExoCache<K, V>", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = ExoLogger.getLogger(\"exo.kernel.component.cache.SimpleReplicatedExoCache\");", "modifier": "private static final", "type": "Log", "declarator": "LOG = ExoLogger.getLogger(\"exo.kernel.component.cache.SimpleReplicatedExoCache\")", "var_name": "LOG"}, {"original_string": "private final RPCService rpcService;", "modifier": "private final", "type": "RPCService", "declarator": "rpcService", "var_name": "rpcService"}, {"original_string": "private RemoteCommand command;", "modifier": "private", "type": "RemoteCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final String ctxName;", "modifier": "private final", "type": "String", "declarator": "ctxName", "var_name": "ctxName"}], "methods": [{"identifier": "SimpleReplicatedExoCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleReplicatedExoCache()", "full_signature": "public  SimpleReplicatedExoCache()", "class_method_signature": "SimpleReplicatedExoCache.SimpleReplicatedExoCache()", "testcase": false, "constructor": true}, {"identifier": "SimpleReplicatedExoCache", "parameters": "(ExoContainerContext ctx, RPCService rpcService)", "modifiers": "", "return": "", "signature": " SimpleReplicatedExoCache(ExoContainerContext ctx, RPCService rpcService)", "full_signature": "  SimpleReplicatedExoCache(ExoContainerContext ctx, RPCService rpcService)", "class_method_signature": "SimpleReplicatedExoCache.SimpleReplicatedExoCache(ExoContainerContext ctx, RPCService rpcService)", "testcase": false, "constructor": true}, {"identifier": "setName", "parameters": "(String s)", "modifiers": "@Override public", "return": "void", "signature": "void setName(String s)", "full_signature": "@Override public void setName(String s)", "class_method_signature": "SimpleReplicatedExoCache.setName(String s)", "testcase": false, "constructor": false}, {"identifier": "removeOnly", "parameters": "(Serializable name)", "modifiers": "", "return": "void", "signature": "void removeOnly(Serializable name)", "full_signature": " void removeOnly(Serializable name)", "class_method_signature": "SimpleReplicatedExoCache.removeOnly(Serializable name)", "testcase": false, "constructor": false}, {"identifier": "clearCacheOnly", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clearCacheOnly()", "full_signature": " void clearCacheOnly()", "class_method_signature": "SimpleReplicatedExoCache.clearCacheOnly()", "testcase": false, "constructor": false}, {"identifier": "putIfNeeded", "parameters": "(K name, V obj)", "modifiers": "", "return": "void", "signature": "void putIfNeeded(K name, V obj)", "full_signature": " void putIfNeeded(K name, V obj)", "class_method_signature": "SimpleReplicatedExoCache.putIfNeeded(K name, V obj)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Serializable name)", "modifiers": "@Override public", "return": "V", "signature": "V remove(Serializable name)", "full_signature": "@Override public V remove(Serializable name)", "class_method_signature": "SimpleReplicatedExoCache.remove(Serializable name)", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearCache()", "full_signature": "@Override public void clearCache()", "class_method_signature": "SimpleReplicatedExoCache.clearCache()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K name, V obj)", "modifiers": "@Override public", "return": "void", "signature": "void put(K name, V obj)", "full_signature": "@Override public void put(K name, V obj)", "class_method_signature": "SimpleReplicatedExoCache.put(K name, V obj)", "testcase": false, "constructor": false}, {"identifier": "putMap", "parameters": "(Map<? extends K, ? extends V> objs)", "modifiers": "@Override public", "return": "void", "signature": "void putMap(Map<? extends K, ? extends V> objs)", "full_signature": "@Override public void putMap(Map<? extends K, ? extends V> objs)", "class_method_signature": "SimpleReplicatedExoCache.putMap(Map<? extends K, ? extends V> objs)", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "SimpleReplicatedExoCache.finalize()", "testcase": false, "constructor": false}], "file": "exo.kernel.component.cache/src/main/java/org/exoplatform/services/cache/concurrent/SimpleReplicatedExoCache.java"}, "focal_method": {"identifier": "clearCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n   public void clearCache()\n   {\n      super.clearCache();\n      try\n      {\n         rpcService.executeCommandOnAllNodes(command, false, id, \"c\");\n      }\n      catch (Exception e)\n      {\n         LOG.warn(\"Could not clear the cache on other cluster nodes\", e);\n      }\n   }", "signature": "void clearCache()", "full_signature": "@Override public void clearCache()", "class_method_signature": "SimpleReplicatedExoCache.clearCache()", "testcase": false, "constructor": false, "invocations": ["clearCache", "executeCommandOnAllNodes", "warn"]}, "repository": {"repo_id": 3934425, "url": "https://github.com/exoplatform/kernel", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 9, "size": 5312, "license": "licensed"}}