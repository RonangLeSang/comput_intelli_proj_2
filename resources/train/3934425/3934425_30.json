{"test_class": {"identifier": "TestArchive", "superclass": "", "interfaces": "", "fields": [], "file": "exo.kernel.container/src/test/java/org/exoplatform/container/ar/TestArchive.java"}, "test_case": {"identifier": "testConnect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testConnect() throws Exception\n   {\n      URL url = Archive.parse(\"/foo\");\n      URLConnection connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A FileNotFoundException was expected\");\n      }\n      catch (FileNotFoundException e)\n      {\n         // expected\n      }\n      URL urlArchives = getClass().getResource(\".\");\n      String root = new File(urlArchives.toURI()).getAbsolutePath();\n      url = Archive.parse(root);\n      connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A IOException was expected\");\n      }\n      catch (IOException e)\n      {\n         // expected\n      }\n      String path = root + \"/ar-with-dir-and-ar-with-config-file.zip\";\n      url = Archive.parse(path);\n      connection = url.openConnection();\n      connection.connect();\n\n      path = root + \"/foo.zip!/foo/config.xml\";\n      url = Archive.parse(path);\n      connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A FileNotFoundException was expected\");\n      }\n      catch (FileNotFoundException e)\n      {\n         // expected\n      }\n\n      path = root + \"/dir-with-dir-and-ar-with-config-file.zip!/foo/config.xml\";\n      url = Archive.parse(path);\n      connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A IOException was expected\");\n      }\n      catch (IOException e)\n      {\n         // expected\n      }\n\n      path = root + \"/ar-with-dir-and-ar-with-config-file.zip!/foo/foo.xml\";\n      url = Archive.parse(path);\n      connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A FileNotFoundException was expected\");\n      }\n      catch (FileNotFoundException e)\n      {\n         // expected\n      }\n\n      path = root + \"/ar-with-dir-and-ar-with-config-file.zip!/foo\";\n      url = Archive.parse(path);\n      connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A IOException was expected\");\n      }\n      catch (IOException e)\n      {\n         // expected\n      }\n\n      path = root + \"/ar-with-dir-and-ar-with-config-dir.zip!/foo.zip!/foo/config.xml\";\n      url = Archive.parse(path);\n      connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A FileNotFoundException was expected\");\n      }\n      catch (FileNotFoundException e)\n      {\n         // expected\n      }\n\n      path = root + \"/ar-with-dir-and-ar-with-config-dir.zip!/dir-with-ext.zip!/foo/config.xml\";\n      url = Archive.parse(path);\n      connection = url.openConnection();\n      try\n      {\n         connection.connect();\n         fail(\"A IOException was expected\");\n      }\n      catch (IOException e)\n      {\n         // expected\n      }\n   }", "signature": "void testConnect()", "full_signature": "@Test public void testConnect()", "class_method_signature": "TestArchive.testConnect()", "testcase": true, "constructor": false, "invocations": ["parse", "openConnection", "connect", "fail", "getResource", "getClass", "getAbsolutePath", "toURI", "parse", "openConnection", "connect", "fail", "parse", "openConnection", "connect", "parse", "openConnection", "connect", "fail", "parse", "openConnection", "connect", "fail", "parse", "openConnection", "connect", "fail", "parse", "openConnection", "connect", "fail", "parse", "openConnection", "connect", "fail", "parse", "openConnection", "connect", "fail"]}, "focal_class": {"identifier": "Archive", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = ExoLogger.getLogger(\"exo.kernel.container.Archive\");", "modifier": "private static final", "type": "Log", "declarator": "LOG = ExoLogger.getLogger(\"exo.kernel.container.Archive\")", "var_name": "LOG"}, {"original_string": "private static final ArchiveURLStreamHandler HANDLER = new ArchiveURLStreamHandler();", "modifier": "private static final", "type": "ArchiveURLStreamHandler", "declarator": "HANDLER = new ArchiveURLStreamHandler()", "var_name": "HANDLER"}, {"original_string": "public static final String PROTOCOL = \"ar\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL = \"ar\"", "var_name": "PROTOCOL"}, {"original_string": "public static final Archive WAR = new Archive(\"war\", false, true, null);", "modifier": "public static final", "type": "Archive", "declarator": "WAR = new Archive(\"war\", false, true, null)", "var_name": "WAR"}, {"original_string": "public static final Archive EAR = new Archive(\"ear\", false, true, Collections.singleton(WAR));", "modifier": "public static final", "type": "Archive", "declarator": "EAR = new Archive(\"ear\", false, true, Collections.singleton(WAR))", "var_name": "EAR"}, {"original_string": "private final String type;", "modifier": "private final", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private final boolean useDirWoExt;", "modifier": "private final", "type": "boolean", "declarator": "useDirWoExt", "var_name": "useDirWoExt"}, {"original_string": "private final boolean allowsDir;", "modifier": "private final", "type": "boolean", "declarator": "allowsDir", "var_name": "allowsDir"}, {"original_string": "private final Set<Archive> subArchives;", "modifier": "private final", "type": "Set<Archive>", "declarator": "subArchives", "var_name": "subArchives"}], "methods": [{"identifier": "Archive", "parameters": "(String type, boolean useDirWoExt, boolean allowsDir, Set<Archive> subArchives)", "modifiers": "public", "return": "", "signature": " Archive(String type, boolean useDirWoExt, boolean allowsDir, Set<Archive> subArchives)", "full_signature": "public  Archive(String type, boolean useDirWoExt, boolean allowsDir, Set<Archive> subArchives)", "class_method_signature": "Archive.Archive(String type, boolean useDirWoExt, boolean allowsDir, Set<Archive> subArchives)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getType()", "full_signature": "public String getType()", "class_method_signature": "Archive.getType()", "testcase": false, "constructor": false}, {"identifier": "isUseDirWoExt", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUseDirWoExt()", "full_signature": "public boolean isUseDirWoExt()", "class_method_signature": "Archive.isUseDirWoExt()", "testcase": false, "constructor": false}, {"identifier": "isAllowsDir", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowsDir()", "full_signature": "public boolean isAllowsDir()", "class_method_signature": "Archive.isAllowsDir()", "testcase": false, "constructor": false}, {"identifier": "getSubArchives", "parameters": "()", "modifiers": "public", "return": "Set<Archive>", "signature": "Set<Archive> getSubArchives()", "full_signature": "public Set<Archive> getSubArchives()", "class_method_signature": "Archive.getSubArchives()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Archive.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Archive.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Archive.toString()", "testcase": false, "constructor": false}, {"identifier": "getConfigurationURL", "parameters": "(List<String> appDeployDirectories,\n      Set<Archive> appDeployArchives, String configuration)", "modifiers": "public static", "return": "Collection<URL>", "signature": "Collection<URL> getConfigurationURL(List<String> appDeployDirectories,\n      Set<Archive> appDeployArchives, String configuration)", "full_signature": "public static Collection<URL> getConfigurationURL(List<String> appDeployDirectories,\n      Set<Archive> appDeployArchives, String configuration)", "class_method_signature": "Archive.getConfigurationURL(List<String> appDeployDirectories,\n      Set<Archive> appDeployArchives, String configuration)", "testcase": false, "constructor": false}, {"identifier": "getConfigurationURL", "parameters": "(File dir, final Set<Archive> appDeployArchives,\n      String configuration, final boolean enableRecursion)", "modifiers": "private static", "return": "Collection<URL>", "signature": "Collection<URL> getConfigurationURL(File dir, final Set<Archive> appDeployArchives,\n      String configuration, final boolean enableRecursion)", "full_signature": "private static Collection<URL> getConfigurationURL(File dir, final Set<Archive> appDeployArchives,\n      String configuration, final boolean enableRecursion)", "class_method_signature": "Archive.getConfigurationURL(File dir, final Set<Archive> appDeployArchives,\n      String configuration, final boolean enableRecursion)", "testcase": false, "constructor": false}, {"identifier": "createArchiveURL", "parameters": "(String url)", "modifiers": "public static", "return": "URL", "signature": "URL createArchiveURL(String url)", "full_signature": "public static URL createArchiveURL(String url)", "class_method_signature": "Archive.createArchiveURL(String url)", "testcase": false, "constructor": false}, {"identifier": "isArchiveURL", "parameters": "(String url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArchiveURL(String url)", "full_signature": "public static boolean isArchiveURL(String url)", "class_method_signature": "Archive.isArchiveURL(String url)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String path2Convert)", "modifiers": "static", "return": "URL", "signature": "URL parse(String path2Convert)", "full_signature": "static URL parse(String path2Convert)", "class_method_signature": "Archive.parse(String path2Convert)", "testcase": false, "constructor": false}], "file": "exo.kernel.container/src/main/java/org/exoplatform/container/ar/Archive.java"}, "focal_method": {"identifier": "parse", "parameters": "(String path2Convert)", "modifiers": "static", "return": "URL", "body": "static URL parse(String path2Convert) throws MalformedURLException\n   {\n      if (File.separatorChar != '/')\n         path2Convert = path2Convert.replace(File.separatorChar, '/');\n      if (!path2Convert.startsWith(\"/\"))\n         path2Convert = \"/\" + path2Convert;\n      return new URL(Archive.PROTOCOL, null, -1, path2Convert, Archive.HANDLER);\n   }", "signature": "URL parse(String path2Convert)", "full_signature": "static URL parse(String path2Convert)", "class_method_signature": "Archive.parse(String path2Convert)", "testcase": false, "constructor": false, "invocations": ["replace", "startsWith"]}, "repository": {"repo_id": 3934425, "url": "https://github.com/exoplatform/kernel", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 9, "size": 5312, "license": "licensed"}}