{"test_class": {"identifier": "ProcessedInputTest", "superclass": "", "interfaces": "", "fields": [], "file": "midao-jdbc-core/src/test/java/org/midao/jdbc/core/handlers/model/ProcessedInputTest.java"}, "test_case": {"identifier": "testGetSqlParameterValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSqlParameterValues() throws Exception {\n        List<Object> sqlParameterValues = new ArrayList<Object>();\n\n        sqlParameterValues.add(\"1\");\n        sqlParameterValues.add(\"2\");\n        sqlParameterValues.add(\"3\");\n\n        ProcessedInput processedInput = new ProcessedInput(\"\");\n        processedInput.setSqlParameterValues(sqlParameterValues);\n\n        // shouldn't be the same object\n        Assert.assertEquals(false, sqlParameterValues == processedInput.getSqlParameterValues());\n\n        org.junit.Assert.assertArrayEquals(sqlParameterValues.toArray(), processedInput.getSqlParameterValues().toArray());\n    }", "signature": "void testGetSqlParameterValues()", "full_signature": "@Test public void testGetSqlParameterValues()", "class_method_signature": "ProcessedInputTest.testGetSqlParameterValues()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "setSqlParameterValues", "assertEquals", "getSqlParameterValues", "assertArrayEquals", "toArray", "toArray", "getSqlParameterValues"]}, "focal_class": {"identifier": "ProcessedInput", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<String> emptyList = new ArrayList<String>();", "modifier": "private static", "type": "List<String>", "declarator": "emptyList = new ArrayList<String>()", "var_name": "emptyList"}, {"original_string": "private final String originalSql;", "modifier": "private final", "type": "String", "declarator": "originalSql", "var_name": "originalSql"}, {"original_string": "private String parsedSql;", "modifier": "private", "type": "String", "declarator": "parsedSql", "var_name": "parsedSql"}, {"original_string": "private List<String> sqlParameterNames;", "modifier": "private", "type": "List<String>", "declarator": "sqlParameterNames", "var_name": "sqlParameterNames"}, {"original_string": "private List<int[]> sqlParameterBoundaries;", "modifier": "private", "type": "List<int[]>", "declarator": "sqlParameterBoundaries", "var_name": "sqlParameterBoundaries"}, {"original_string": "private List<String> sqlParameterTypes;", "modifier": "private", "type": "List<String>", "declarator": "sqlParameterTypes", "var_name": "sqlParameterTypes"}, {"original_string": "private List<String> sqlParameterDirections;", "modifier": "private", "type": "List<String>", "declarator": "sqlParameterDirections", "var_name": "sqlParameterDirections"}, {"original_string": "private List<Object> sqlParameterValues;", "modifier": "private", "type": "List<Object>", "declarator": "sqlParameterValues", "var_name": "sqlParameterValues"}], "methods": [{"identifier": "ProcessedInput", "parameters": "(String originalSql)", "modifiers": "public", "return": "", "signature": " ProcessedInput(String originalSql)", "full_signature": "public  ProcessedInput(String originalSql)", "class_method_signature": "ProcessedInput.ProcessedInput(String originalSql)", "testcase": false, "constructor": true}, {"identifier": "ProcessedInput", "parameters": "(ProcessedInput processedInput)", "modifiers": "public", "return": "", "signature": " ProcessedInput(ProcessedInput processedInput)", "full_signature": "public  ProcessedInput(ProcessedInput processedInput)", "class_method_signature": "ProcessedInput.ProcessedInput(ProcessedInput processedInput)", "testcase": false, "constructor": true}, {"identifier": "ProcessedInput", "parameters": "(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues, List<String> sqlParameterTypes, List<String> sqlParameterDirections)", "modifiers": "public", "return": "", "signature": " ProcessedInput(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues, List<String> sqlParameterTypes, List<String> sqlParameterDirections)", "full_signature": "public  ProcessedInput(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues, List<String> sqlParameterTypes, List<String> sqlParameterDirections)", "class_method_signature": "ProcessedInput.ProcessedInput(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues, List<String> sqlParameterTypes, List<String> sqlParameterDirections)", "testcase": false, "constructor": true}, {"identifier": "ProcessedInput", "parameters": "(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues)", "modifiers": "public", "return": "", "signature": " ProcessedInput(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues)", "full_signature": "public  ProcessedInput(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues)", "class_method_signature": "ProcessedInput.ProcessedInput(String originalSql, String parsedSql, List<String> sqlParameterNames, List<int[]> sqlParameterBoundaries, List<Object> sqlParameterValues)", "testcase": false, "constructor": true}, {"identifier": "addParameter", "parameters": "(String parameterName, int parameterStart, int parameterEnd, String parameterType, String parameterDirection)", "modifiers": "public", "return": "void", "signature": "void addParameter(String parameterName, int parameterStart, int parameterEnd, String parameterType, String parameterDirection)", "full_signature": "public void addParameter(String parameterName, int parameterStart, int parameterEnd, String parameterType, String parameterDirection)", "class_method_signature": "ProcessedInput.addParameter(String parameterName, int parameterStart, int parameterEnd, String parameterType, String parameterDirection)", "testcase": false, "constructor": false}, {"identifier": "addParameter", "parameters": "(String parameterName, int parameterStart, int parameterEnd)", "modifiers": "public", "return": "void", "signature": "void addParameter(String parameterName, int parameterStart, int parameterEnd)", "full_signature": "public void addParameter(String parameterName, int parameterStart, int parameterEnd)", "class_method_signature": "ProcessedInput.addParameter(String parameterName, int parameterStart, int parameterEnd)", "testcase": false, "constructor": false}, {"identifier": "getOriginalSql", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOriginalSql()", "full_signature": "public String getOriginalSql()", "class_method_signature": "ProcessedInput.getOriginalSql()", "testcase": false, "constructor": false}, {"identifier": "getParsedSql", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getParsedSql()", "full_signature": "public String getParsedSql()", "class_method_signature": "ProcessedInput.getParsedSql()", "testcase": false, "constructor": false}, {"identifier": "getSqlParameterNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSqlParameterNames()", "full_signature": "public List<String> getSqlParameterNames()", "class_method_signature": "ProcessedInput.getSqlParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getSqlParameterBoundaries", "parameters": "()", "modifiers": "public", "return": "List<int[]>", "signature": "List<int[]> getSqlParameterBoundaries()", "full_signature": "public List<int[]> getSqlParameterBoundaries()", "class_method_signature": "ProcessedInput.getSqlParameterBoundaries()", "testcase": false, "constructor": false}, {"identifier": "getSqlParameterValues", "parameters": "()", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> getSqlParameterValues()", "full_signature": "public List<Object> getSqlParameterValues()", "class_method_signature": "ProcessedInput.getSqlParameterValues()", "testcase": false, "constructor": false}, {"identifier": "getSqlParameterTypes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSqlParameterTypes()", "full_signature": "public List<String> getSqlParameterTypes()", "class_method_signature": "ProcessedInput.getSqlParameterTypes()", "testcase": false, "constructor": false}, {"identifier": "getSqlParameterDirections", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSqlParameterDirections()", "full_signature": "public List<String> getSqlParameterDirections()", "class_method_signature": "ProcessedInput.getSqlParameterDirections()", "testcase": false, "constructor": false}, {"identifier": "setParsedSql", "parameters": "(String parsedSql)", "modifiers": "public", "return": "void", "signature": "void setParsedSql(String parsedSql)", "full_signature": "public void setParsedSql(String parsedSql)", "class_method_signature": "ProcessedInput.setParsedSql(String parsedSql)", "testcase": false, "constructor": false}, {"identifier": "setSqlParameterValues", "parameters": "(List<Object> sqlParameterValues)", "modifiers": "public", "return": "void", "signature": "void setSqlParameterValues(List<Object> sqlParameterValues)", "full_signature": "public void setSqlParameterValues(List<Object> sqlParameterValues)", "class_method_signature": "ProcessedInput.setSqlParameterValues(List<Object> sqlParameterValues)", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "(String parameterName)", "modifiers": "public", "return": "Integer", "signature": "Integer getPosition(String parameterName)", "full_signature": "public Integer getPosition(String parameterName)", "class_method_signature": "ProcessedInput.getPosition(String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getParameterName", "parameters": "(Integer position)", "modifiers": "public", "return": "String", "signature": "String getParameterName(Integer position)", "full_signature": "public String getParameterName(Integer position)", "class_method_signature": "ProcessedInput.getParameterName(Integer position)", "testcase": false, "constructor": false}, {"identifier": "getAmountOfParameters", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getAmountOfParameters()", "full_signature": "public Integer getAmountOfParameters()", "class_method_signature": "ProcessedInput.getAmountOfParameters()", "testcase": false, "constructor": false}, {"identifier": "isFilled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFilled()", "full_signature": "public boolean isFilled()", "class_method_signature": "ProcessedInput.isFilled()", "testcase": false, "constructor": false}, {"identifier": "fillParameterValues", "parameters": "(Map<String, Object> valuesMap)", "modifiers": "public", "return": "void", "signature": "void fillParameterValues(Map<String, Object> valuesMap)", "full_signature": "public void fillParameterValues(Map<String, Object> valuesMap)", "class_method_signature": "ProcessedInput.fillParameterValues(Map<String, Object> valuesMap)", "testcase": false, "constructor": false}], "file": "midao-jdbc-core/src/main/java/org/midao/jdbc/core/handlers/model/ProcessedInput.java"}, "focal_method": {"identifier": "getSqlParameterValues", "parameters": "()", "modifiers": "public", "return": "List<Object>", "body": "public List<Object> getSqlParameterValues() {\n        return sqlParameterValues;\n    }", "signature": "List<Object> getSqlParameterValues()", "full_signature": "public List<Object> getSqlParameterValues()", "class_method_signature": "ProcessedInput.getSqlParameterValues()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8967798, "url": "https://github.com/pryzach/midao", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 9516, "license": "licensed"}}