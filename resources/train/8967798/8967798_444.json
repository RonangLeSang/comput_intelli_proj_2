{"test_class": {"identifier": "QueryRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Connection conn;", "modifier": "@Mock", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "@Mock\n    Statement statement;", "modifier": "@Mock", "type": "Statement", "declarator": "statement", "var_name": "statement"}, {"original_string": "@Mock\n    PreparedStatement preparedStatement;", "modifier": "@Mock", "type": "PreparedStatement", "declarator": "preparedStatement", "var_name": "preparedStatement"}, {"original_string": "@Mock\n    CallableStatement callableStatement;", "modifier": "@Mock", "type": "CallableStatement", "declarator": "callableStatement", "var_name": "callableStatement"}, {"original_string": "@Mock\n    DataSource ds;", "modifier": "@Mock", "type": "DataSource", "declarator": "ds", "var_name": "ds"}, {"original_string": "@Mock\n    TypeHandler typeHandler;", "modifier": "@Mock", "type": "TypeHandler", "declarator": "typeHandler", "var_name": "typeHandler"}, {"original_string": "@Mock\n    StatementHandler statementHandler;", "modifier": "@Mock", "type": "StatementHandler", "declarator": "statementHandler", "var_name": "statementHandler"}, {"original_string": "@Mock\n    TransactionHandler transactionHandler;", "modifier": "@Mock", "type": "TransactionHandler", "declarator": "transactionHandler", "var_name": "transactionHandler"}, {"original_string": "@Mock\n    Overrider overrider;", "modifier": "@Mock", "type": "Overrider", "declarator": "overrider", "var_name": "overrider"}, {"original_string": "@Mock\n    MetadataHandler metadataHandler;", "modifier": "@Mock", "type": "MetadataHandler", "declarator": "metadataHandler", "var_name": "metadataHandler"}, {"original_string": "@Mock\n    ParameterMetaData parameterMetaData;", "modifier": "@Mock", "type": "ParameterMetaData", "declarator": "parameterMetaData", "var_name": "parameterMetaData"}, {"original_string": "@Mock\n    XmlInputOutputHandler xmlInputOutputHandler;", "modifier": "@Mock", "type": "XmlInputOutputHandler", "declarator": "xmlInputOutputHandler", "var_name": "xmlInputOutputHandler"}, {"original_string": "String sql = \"INSERT :some INTO world\";", "modifier": "", "type": "String", "declarator": "sql = \"INSERT :some INTO world\"", "var_name": "sql"}, {"original_string": "QueryParameters params = new QueryParameters().set(\"some\", \"luck\");", "modifier": "", "type": "QueryParameters", "declarator": "params = new QueryParameters().set(\"some\", \"luck\")", "var_name": "params"}, {"original_string": "QueryParameters processedInput = new QueryParameters(params);", "modifier": "", "type": "QueryParameters", "declarator": "processedInput = new QueryParameters(params)", "var_name": "processedInput"}, {"original_string": "MapOutputHandler outputHandler = new MapOutputHandler();", "modifier": "", "type": "MapOutputHandler", "declarator": "outputHandler = new MapOutputHandler()", "var_name": "outputHandler"}, {"original_string": "QueryInputHandler inputHandler = new QueryInputHandler(sql, params);", "modifier": "", "type": "QueryInputHandler", "declarator": "inputHandler = new QueryInputHandler(sql, params)", "var_name": "inputHandler"}, {"original_string": "QueryRunnerService queryRunner;", "modifier": "", "type": "QueryRunnerService", "declarator": "queryRunner", "var_name": "queryRunner"}], "file": "midao-jdbc-core/src/test/java/org/midao/jdbc/core/QueryRunnerTest.java"}, "test_case": {"identifier": "testUpdateLazyException", "parameters": "()", "modifiers": "@Test(expected = MjdbcRuntimeException.class) public", "return": "void", "body": "@Test(expected = MjdbcRuntimeException.class)\n    public void testUpdateLazyException() throws SQLException {\n        ((QueryRunner) queryRunner).setStatementHandler(new LazyStatementHandler(new Overrider()));\n\n        queryRunner.update(\"\", new MapLazyOutputHandler(), new Object[]{\"\"});\n    }", "signature": "void testUpdateLazyException()", "full_signature": "@Test(expected = MjdbcRuntimeException.class) public void testUpdateLazyException()", "class_method_signature": "QueryRunnerTest.testUpdateLazyException()", "testcase": true, "constructor": false, "invocations": ["setStatementHandler", "update"]}, "focal_class": {"identifier": "QueryRunner", "superclass": "extends AbstractQueryRunner", "interfaces": "", "fields": [{"original_string": "private static final MjdbcLogger log = MjdbcLogger.getLogger(QueryRunner.class);", "modifier": "private static final", "type": "MjdbcLogger", "declarator": "log = MjdbcLogger.getLogger(QueryRunner.class)", "var_name": "log"}], "methods": [{"identifier": "QueryRunner", "parameters": "(DataSource ds)", "modifiers": "public", "return": "", "signature": " QueryRunner(DataSource ds)", "full_signature": "public  QueryRunner(DataSource ds)", "class_method_signature": "QueryRunner.QueryRunner(DataSource ds)", "testcase": false, "constructor": true}, {"identifier": "QueryRunner", "parameters": "(Connection conn)", "modifiers": "public", "return": "", "signature": " QueryRunner(Connection conn)", "full_signature": "public  QueryRunner(Connection conn)", "class_method_signature": "QueryRunner.QueryRunner(Connection conn)", "testcase": false, "constructor": true}, {"identifier": "QueryRunner", "parameters": "(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz)", "modifiers": "public", "return": "", "signature": " QueryRunner(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz)", "full_signature": "public  QueryRunner(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz)", "class_method_signature": "QueryRunner.QueryRunner(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz)", "testcase": false, "constructor": true}, {"identifier": "QueryRunner", "parameters": "(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "modifiers": "public", "return": "", "signature": " QueryRunner(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "full_signature": "public  QueryRunner(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "class_method_signature": "QueryRunner.QueryRunner(DataSource ds, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "testcase": false, "constructor": true}, {"identifier": "QueryRunner", "parameters": "(Connection conn, Class<? extends TypeHandler> typeHandlerClazz)", "modifiers": "public", "return": "", "signature": " QueryRunner(Connection conn, Class<? extends TypeHandler> typeHandlerClazz)", "full_signature": "public  QueryRunner(Connection conn, Class<? extends TypeHandler> typeHandlerClazz)", "class_method_signature": "QueryRunner.QueryRunner(Connection conn, Class<? extends TypeHandler> typeHandlerClazz)", "testcase": false, "constructor": true}, {"identifier": "QueryRunner", "parameters": "(Connection conn, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "modifiers": "public", "return": "", "signature": " QueryRunner(Connection conn, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "full_signature": "public  QueryRunner(Connection conn, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "class_method_signature": "QueryRunner.QueryRunner(Connection conn, Class<? extends TypeHandler> typeHandlerClazz, Class<? extends StatementHandler> statementHandlerClazz)", "testcase": false, "constructor": true}, {"identifier": "batch", "parameters": "(String sql, Object[][] params)", "modifiers": "public", "return": "int[]", "signature": "int[] batch(String sql, Object[][] params)", "full_signature": "public int[] batch(String sql, Object[][] params)", "class_method_signature": "QueryRunner.batch(String sql, Object[][] params)", "testcase": false, "constructor": false}, {"identifier": "batch", "parameters": "(InputHandler[] inputHandlers)", "modifiers": "public", "return": "int[]", "signature": "int[] batch(InputHandler[] inputHandlers)", "full_signature": "public int[] batch(InputHandler[] inputHandlers)", "class_method_signature": "QueryRunner.batch(InputHandler[] inputHandlers)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String sql, OutputHandler<T> outputHandler, Object... params)", "modifiers": "public", "return": "T", "signature": "T query(String sql, OutputHandler<T> outputHandler, Object... params)", "full_signature": "public T query(String sql, OutputHandler<T> outputHandler, Object... params)", "class_method_signature": "QueryRunner.query(String sql, OutputHandler<T> outputHandler, Object... params)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(InputHandler inputHandler, OutputHandler<T> outputHandler)", "modifiers": "public", "return": "T", "signature": "T query(InputHandler inputHandler, OutputHandler<T> outputHandler)", "full_signature": "public T query(InputHandler inputHandler, OutputHandler<T> outputHandler)", "class_method_signature": "QueryRunner.query(InputHandler inputHandler, OutputHandler<T> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String sql, OutputHandler<T> outputHandler)", "modifiers": "public", "return": "T", "signature": "T query(String sql, OutputHandler<T> outputHandler)", "full_signature": "public T query(String sql, OutputHandler<T> outputHandler)", "class_method_signature": "QueryRunner.query(String sql, OutputHandler<T> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String sql)", "modifiers": "public", "return": "int", "signature": "int update(String sql)", "full_signature": "public int update(String sql)", "class_method_signature": "QueryRunner.update(String sql)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String sql, Object param)", "modifiers": "public", "return": "int", "signature": "int update(String sql, Object param)", "full_signature": "public int update(String sql, Object param)", "class_method_signature": "QueryRunner.update(String sql, Object param)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String sql, Object... params)", "modifiers": "public", "return": "int", "signature": "int update(String sql, Object... params)", "full_signature": "public int update(String sql, Object... params)", "class_method_signature": "QueryRunner.update(String sql, Object... params)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(InputHandler inputHandler)", "modifiers": "public", "return": "int", "signature": "int update(InputHandler inputHandler)", "full_signature": "public int update(InputHandler inputHandler)", "class_method_signature": "QueryRunner.update(InputHandler inputHandler)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(InputHandler inputHandler, OutputHandler<T> outputHandler)", "modifiers": "public", "return": "T", "signature": "T update(InputHandler inputHandler, OutputHandler<T> outputHandler)", "full_signature": "public T update(InputHandler inputHandler, OutputHandler<T> outputHandler)", "class_method_signature": "QueryRunner.update(InputHandler inputHandler, OutputHandler<T> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String sql, OutputHandler<T> outputHandler, Object... params)", "modifiers": "public", "return": "T", "signature": "T update(String sql, OutputHandler<T> outputHandler, Object... params)", "full_signature": "public T update(String sql, OutputHandler<T> outputHandler, Object... params)", "class_method_signature": "QueryRunner.update(String sql, OutputHandler<T> outputHandler, Object... params)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(AbstractXmlInputOutputHandler<T> inputHandler)", "modifiers": "public", "return": "T", "signature": "T execute(AbstractXmlInputOutputHandler<T> inputHandler)", "full_signature": "public T execute(AbstractXmlInputOutputHandler<T> inputHandler)", "class_method_signature": "QueryRunner.execute(AbstractXmlInputOutputHandler<T> inputHandler)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(AbstractQueryInputHandler inputHandler)", "modifiers": "public", "return": "QueryParameters", "signature": "QueryParameters call(AbstractQueryInputHandler inputHandler)", "full_signature": "public QueryParameters call(AbstractQueryInputHandler inputHandler)", "class_method_signature": "QueryRunner.call(AbstractQueryInputHandler inputHandler)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(AbstractNamedInputHandler<T> inputHandler, String catalog, String schema, boolean useCache)", "modifiers": "public", "return": "T", "signature": "T call(AbstractNamedInputHandler<T> inputHandler, String catalog, String schema, boolean useCache)", "full_signature": "public T call(AbstractNamedInputHandler<T> inputHandler, String catalog, String schema, boolean useCache)", "class_method_signature": "QueryRunner.call(AbstractNamedInputHandler<T> inputHandler, String catalog, String schema, boolean useCache)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(AbstractNamedInputHandler<T> inputHandler)", "modifiers": "public", "return": "T", "signature": "T call(AbstractNamedInputHandler<T> inputHandler)", "full_signature": "public T call(AbstractNamedInputHandler<T> inputHandler)", "class_method_signature": "QueryRunner.call(AbstractNamedInputHandler<T> inputHandler)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(InputHandler<T> inputHandler, OutputHandler<S> outputHandler, String catalog, String schema, boolean useCache)", "modifiers": "public", "return": "CallResults", "signature": "CallResults call(InputHandler<T> inputHandler, OutputHandler<S> outputHandler, String catalog, String schema, boolean useCache)", "full_signature": "public CallResults call(InputHandler<T> inputHandler, OutputHandler<S> outputHandler, String catalog, String schema, boolean useCache)", "class_method_signature": "QueryRunner.call(InputHandler<T> inputHandler, OutputHandler<S> outputHandler, String catalog, String schema, boolean useCache)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(InputHandler<T> inputHandler, OutputHandler<S> outputHandler)", "modifiers": "public", "return": "CallResults", "signature": "CallResults call(InputHandler<T> inputHandler, OutputHandler<S> outputHandler)", "full_signature": "public CallResults call(InputHandler<T> inputHandler, OutputHandler<S> outputHandler)", "class_method_signature": "QueryRunner.call(InputHandler<T> inputHandler, OutputHandler<S> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "callInner", "parameters": "(AbstractQueryInputHandler inputHandler, OutputHandler<T> outputHandler)", "modifiers": "private", "return": "QueryParameters", "signature": "QueryParameters callInner(AbstractQueryInputHandler inputHandler, OutputHandler<T> outputHandler)", "full_signature": "private QueryParameters callInner(AbstractQueryInputHandler inputHandler, OutputHandler<T> outputHandler)", "class_method_signature": "QueryRunner.callInner(AbstractQueryInputHandler inputHandler, OutputHandler<T> outputHandler)", "testcase": false, "constructor": false}], "file": "midao-jdbc-core/src/main/java/org/midao/jdbc/core/QueryRunner.java"}, "focal_method": {"identifier": "update", "parameters": "(String sql)", "modifiers": "public", "return": "int", "body": "public int update(String sql) throws SQLException {\n        AssertUtils.assertNotNull(sql, nullException());\n\n        Integer rows = (Integer) this.update(this.getStatementHandler(), sql, HandlersConstants.UPDATE_ROW_COUNT_HANDLER, HandlersConstants.EMPTY_QUERY_PARAMS);\n\n        return rows.intValue();\n    }", "signature": "int update(String sql)", "full_signature": "public int update(String sql)", "class_method_signature": "QueryRunner.update(String sql)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "nullException", "update", "getStatementHandler", "intValue"]}, "repository": {"repo_id": 8967798, "url": "https://github.com/pryzach/midao", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 9516, "license": "licensed"}}