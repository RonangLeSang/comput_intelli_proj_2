{"test_class": {"identifier": "MappingUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Connection conn;", "modifier": "@Mock", "type": "Connection", "declarator": "conn", "var_name": "conn"}], "file": "midao-jdbc-core/src/test/java/org/midao/jdbc/core/handlers/utils/MappingUtilsTest.java"}, "test_case": {"identifier": "testConvertResultSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertResultSet() throws Exception {\n        ResultSet rs = mock(ResultSet.class);\n        ResultSetMetaData rsmd = mock(ResultSetMetaData.class);\n\n        when(rsmd.getColumnCount()).thenReturn(1);\n        when(rsmd.getColumnLabel(1)).thenReturn(\"name\");\n        when(rs.getMetaData()).thenReturn(rsmd);\n\n        String name1 = \"Bruce Lee\";\n        String name2 = \"Jackie Chan\";\n        String name3 = \"Jet Lee\";\n\n        when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);\n        when(rs.getObject(1)).thenReturn(name1).thenReturn(name2).thenReturn(name3);\n\n        List<QueryParameters> paramsList = MappingUtils.convertResultSet(rs);\n\n        Assert.assertEquals(3, paramsList.size());\n        Assert.assertEquals(name1, paramsList.get(0).getValue(\"name\"));\n        Assert.assertEquals(name2, paramsList.get(1).getValue(\"name\"));\n        Assert.assertEquals(name3, paramsList.get(2).getValue(\"name\"));\n    }", "signature": "void testConvertResultSet()", "full_signature": "@Test public void testConvertResultSet()", "class_method_signature": "MappingUtilsTest.testConvertResultSet()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getColumnCount", "thenReturn", "when", "getColumnLabel", "thenReturn", "when", "getMetaData", "thenReturn", "thenReturn", "thenReturn", "thenReturn", "when", "next", "thenReturn", "thenReturn", "thenReturn", "when", "getObject", "convertResultSet", "assertEquals", "size", "assertEquals", "getValue", "get", "assertEquals", "getValue", "get", "assertEquals", "getValue", "get"]}, "focal_class": {"identifier": "MappingUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toMap", "parameters": "(Object inputParameter, PropertyDescriptor[] propertyDescriptors)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap(Object inputParameter, PropertyDescriptor[] propertyDescriptors)", "full_signature": "public static Map<String, Object> toMap(Object inputParameter, PropertyDescriptor[] propertyDescriptors)", "class_method_signature": "MappingUtils.toMap(Object inputParameter, PropertyDescriptor[] propertyDescriptors)", "testcase": false, "constructor": false}, {"identifier": "propertyDescriptors", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "PropertyDescriptor[]", "signature": "PropertyDescriptor[] propertyDescriptors(Class<?> clazz)", "full_signature": "public static PropertyDescriptor[] propertyDescriptors(Class<?> clazz)", "class_method_signature": "MappingUtils.propertyDescriptors(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "mapPropertyDescriptors", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Map<String, PropertyDescriptor>", "signature": "Map<String, PropertyDescriptor> mapPropertyDescriptors(Class<?> clazz)", "full_signature": "public static Map<String, PropertyDescriptor> mapPropertyDescriptors(Class<?> clazz)", "class_method_signature": "MappingUtils.mapPropertyDescriptors(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "callGetter", "parameters": "(Object target, PropertyDescriptor prop)", "modifiers": "public static", "return": "Object", "signature": "Object callGetter(Object target, PropertyDescriptor prop)", "full_signature": "public static Object callGetter(Object target, PropertyDescriptor prop)", "class_method_signature": "MappingUtils.callGetter(Object target, PropertyDescriptor prop)", "testcase": false, "constructor": false}, {"identifier": "callSetter", "parameters": "(Object target, PropertyDescriptor prop, Object value)", "modifiers": "public static", "return": "void", "signature": "void callSetter(Object target, PropertyDescriptor prop, Object value)", "full_signature": "public static void callSetter(Object target, PropertyDescriptor prop, Object value)", "class_method_signature": "MappingUtils.callSetter(Object target, PropertyDescriptor prop, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertResultSet", "parameters": "(ResultSet rs)", "modifiers": "public static", "return": "List<QueryParameters>", "signature": "List<QueryParameters> convertResultSet(ResultSet rs)", "full_signature": "public static List<QueryParameters> convertResultSet(ResultSet rs)", "class_method_signature": "MappingUtils.convertResultSet(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "public static T newInstance(Class<T> clazz)", "class_method_signature": "MappingUtils.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "invokeConnectionSetter", "parameters": "(Connection conn, String functionName, Object value)", "modifiers": "public static", "return": "void", "signature": "void invokeConnectionSetter(Connection conn, String functionName, Object value)", "full_signature": "public static void invokeConnectionSetter(Connection conn, String functionName, Object value)", "class_method_signature": "MappingUtils.invokeConnectionSetter(Connection conn, String functionName, Object value)", "testcase": false, "constructor": false}, {"identifier": "invokeFunction", "parameters": "(Object object, String functionName, Class[] parameters, Object[] values)", "modifiers": "public static", "return": "Object", "signature": "Object invokeFunction(Object object, String functionName, Class[] parameters, Object[] values)", "full_signature": "public static Object invokeFunction(Object object, String functionName, Class[] parameters, Object[] values)", "class_method_signature": "MappingUtils.invokeFunction(Object object, String functionName, Class[] parameters, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "invokeStaticFunction", "parameters": "(Class clazz, String functionName, Class[] parameters, Object[] values)", "modifiers": "public static", "return": "Object", "signature": "Object invokeStaticFunction(Class clazz, String functionName, Class[] parameters, Object[] values)", "full_signature": "public static Object invokeStaticFunction(Class clazz, String functionName, Class[] parameters, Object[] values)", "class_method_signature": "MappingUtils.invokeStaticFunction(Class clazz, String functionName, Class[] parameters, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "hasFunction", "parameters": "(Object object, String functionName, Class[] parameters)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasFunction(Object object, String functionName, Class[] parameters)", "full_signature": "public static boolean hasFunction(Object object, String functionName, Class[] parameters)", "class_method_signature": "MappingUtils.hasFunction(Object object, String functionName, Class[] parameters)", "testcase": false, "constructor": false}, {"identifier": "objectImplements", "parameters": "(Object object, String interfaceClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean objectImplements(Object object, String interfaceClass)", "full_signature": "public static boolean objectImplements(Object object, String interfaceClass)", "class_method_signature": "MappingUtils.objectImplements(Object object, String interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "objectExtends", "parameters": "(Object object, String superClassName)", "modifiers": "public static", "return": "boolean", "signature": "boolean objectExtends(Object object, String superClassName)", "full_signature": "public static boolean objectExtends(Object object, String superClassName)", "class_method_signature": "MappingUtils.objectExtends(Object object, String superClassName)", "testcase": false, "constructor": false}, {"identifier": "objectInstanceOf", "parameters": "(Object object, String className)", "modifiers": "public static", "return": "boolean", "signature": "boolean objectInstanceOf(Object object, String className)", "full_signature": "public static boolean objectInstanceOf(Object object, String className)", "class_method_signature": "MappingUtils.objectInstanceOf(Object object, String className)", "testcase": false, "constructor": false}, {"identifier": "objectAssignableTo", "parameters": "(Object object, String className)", "modifiers": "public static", "return": "boolean", "signature": "boolean objectAssignableTo(Object object, String className)", "full_signature": "public static boolean objectAssignableTo(Object object, String className)", "class_method_signature": "MappingUtils.objectAssignableTo(Object object, String className)", "testcase": false, "constructor": false}, {"identifier": "returnStaticField", "parameters": "(Class clazz, String fieldName)", "modifiers": "public static", "return": "Object", "signature": "Object returnStaticField(Class clazz, String fieldName)", "full_signature": "public static Object returnStaticField(Class clazz, String fieldName)", "class_method_signature": "MappingUtils.returnStaticField(Class clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "returnField", "parameters": "(Object object, String fieldName)", "modifiers": "public static", "return": "Object", "signature": "Object returnField(Object object, String fieldName)", "full_signature": "public static Object returnField(Object object, String fieldName)", "class_method_signature": "MappingUtils.returnField(Object object, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(Object value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitive(Object value)", "full_signature": "public static boolean isPrimitive(Object value)", "class_method_signature": "MappingUtils.isPrimitive(Object value)", "testcase": false, "constructor": false}, {"identifier": "isCustomBean", "parameters": "(Object value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCustomBean(Object value)", "full_signature": "public static boolean isCustomBean(Object value)", "class_method_signature": "MappingUtils.isCustomBean(Object value)", "testcase": false, "constructor": false}], "file": "midao-jdbc-core/src/main/java/org/midao/jdbc/core/handlers/utils/MappingUtils.java"}, "focal_method": {"identifier": "convertResultSet", "parameters": "(ResultSet rs)", "modifiers": "public static", "return": "List<QueryParameters>", "body": "public static List<QueryParameters> convertResultSet(ResultSet rs) throws SQLException {\n        List<QueryParameters> result = new ArrayList<QueryParameters>();\n        String columnName = null;\n\n        while (rs.next() == true) {\n            QueryParameters params = new QueryParameters();\n            ResultSetMetaData rsmd = rs.getMetaData();\n            int cols = rsmd.getColumnCount();\n\n            for (int i = 1; i <= cols; i++) {\n\n                columnName = rsmd.getColumnLabel(i);\n                if (null == columnName || 0 == columnName.length()) {\n                    columnName = rsmd.getColumnName(i);\n                }\n\n                params.set(columnName, rs.getObject(i));\n                params.updatePosition(columnName, i - 1);\n            }\n\n            result.add(params);\n        }\n\n        return result;\n    }", "signature": "List<QueryParameters> convertResultSet(ResultSet rs)", "full_signature": "public static List<QueryParameters> convertResultSet(ResultSet rs)", "class_method_signature": "MappingUtils.convertResultSet(ResultSet rs)", "testcase": false, "constructor": false, "invocations": ["next", "getMetaData", "getColumnCount", "getColumnLabel", "length", "getColumnName", "set", "getObject", "updatePosition", "add"]}, "repository": {"repo_id": 8967798, "url": "https://github.com/pryzach/midao", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 9516, "license": "licensed"}}