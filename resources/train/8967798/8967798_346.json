{"test_class": {"identifier": "AsyncQueryRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int sleepAmount = 50;", "modifier": "private static final", "type": "int", "declarator": "sleepAmount = 50", "var_name": "sleepAmount"}, {"original_string": "@Mock\n    QueryRunner runner;", "modifier": "@Mock", "type": "QueryRunner", "declarator": "runner", "var_name": "runner"}, {"original_string": "AsyncQueryRunner asyncRunner;", "modifier": "", "type": "AsyncQueryRunner", "declarator": "asyncRunner", "var_name": "asyncRunner"}], "file": "midao-jdbc-core/src/test/java/org/midao/jdbc/core/AsyncQueryRunnerTest.java"}, "test_case": {"identifier": "testCall3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCall3() throws Exception {\n        asyncRunner.call(new BeanInputHandler<String>(\"\", \"\"));\n\n        sleep();\n\n        verify(runner, times(1)).call(any(AbstractNamedInputHandler.class));\n    }", "signature": "void testCall3()", "full_signature": "@Test public void testCall3()", "class_method_signature": "AsyncQueryRunnerTest.testCall3()", "testcase": true, "constructor": false, "invocations": ["call", "sleep", "call", "verify", "times", "any"]}, "focal_class": {"identifier": "AsyncQueryRunner", "superclass": "", "interfaces": "implements AsyncQueryRunnerService", "fields": [{"original_string": "private final ExecutorService executorService;", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private final QueryRunnerService queryRunner;", "modifier": "private final", "type": "QueryRunnerService", "declarator": "queryRunner", "var_name": "queryRunner"}], "methods": [{"identifier": "AsyncQueryRunner", "parameters": "(QueryRunnerService runner, ExecutorService executorService)", "modifiers": "public", "return": "", "signature": " AsyncQueryRunner(QueryRunnerService runner, ExecutorService executorService)", "full_signature": "public  AsyncQueryRunner(QueryRunnerService runner, ExecutorService executorService)", "class_method_signature": "AsyncQueryRunner.AsyncQueryRunner(QueryRunnerService runner, ExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "batch", "parameters": "(final String sql, final Object[][] params)", "modifiers": "public", "return": "Future<int[]>", "signature": "Future<int[]> batch(final String sql, final Object[][] params)", "full_signature": "public Future<int[]> batch(final String sql, final Object[][] params)", "class_method_signature": "AsyncQueryRunner.batch(final String sql, final Object[][] params)", "testcase": false, "constructor": false}, {"identifier": "batch", "parameters": "(final InputHandler[] inputHandlers)", "modifiers": "public", "return": "Future<int[]>", "signature": "Future<int[]> batch(final InputHandler[] inputHandlers)", "full_signature": "public Future<int[]> batch(final InputHandler[] inputHandlers)", "class_method_signature": "AsyncQueryRunner.batch(final InputHandler[] inputHandlers)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> query(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "full_signature": "public Future<T> query(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "class_method_signature": "AsyncQueryRunner.query(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> query(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "full_signature": "public Future<T> query(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "class_method_signature": "AsyncQueryRunner.query(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final String sql, final OutputHandler<T> outputHandler)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> query(final String sql, final OutputHandler<T> outputHandler)", "full_signature": "public Future<T> query(final String sql, final OutputHandler<T> outputHandler)", "class_method_signature": "AsyncQueryRunner.query(final String sql, final OutputHandler<T> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final String sql)", "modifiers": "public", "return": "Future<Integer>", "signature": "Future<Integer> update(final String sql)", "full_signature": "public Future<Integer> update(final String sql)", "class_method_signature": "AsyncQueryRunner.update(final String sql)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final String sql, final Object param)", "modifiers": "public", "return": "Future<Integer>", "signature": "Future<Integer> update(final String sql, final Object param)", "full_signature": "public Future<Integer> update(final String sql, final Object param)", "class_method_signature": "AsyncQueryRunner.update(final String sql, final Object param)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final String sql, final Object... params)", "modifiers": "public", "return": "Future<Integer>", "signature": "Future<Integer> update(final String sql, final Object... params)", "full_signature": "public Future<Integer> update(final String sql, final Object... params)", "class_method_signature": "AsyncQueryRunner.update(final String sql, final Object... params)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final InputHandler inputHandler)", "modifiers": "public", "return": "Future<Integer>", "signature": "Future<Integer> update(final InputHandler inputHandler)", "full_signature": "public Future<Integer> update(final InputHandler inputHandler)", "class_method_signature": "AsyncQueryRunner.update(final InputHandler inputHandler)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> update(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "full_signature": "public Future<T> update(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "class_method_signature": "AsyncQueryRunner.update(final InputHandler inputHandler, final OutputHandler<T> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> update(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "full_signature": "public Future<T> update(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "class_method_signature": "AsyncQueryRunner.update(final String sql, final OutputHandler<T> outputHandler, final Object... params)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final AbstractQueryInputHandler inputHandler)", "modifiers": "public", "return": "Future<QueryParameters>", "signature": "Future<QueryParameters> call(final AbstractQueryInputHandler inputHandler)", "full_signature": "public Future<QueryParameters> call(final AbstractQueryInputHandler inputHandler)", "class_method_signature": "AsyncQueryRunner.call(final AbstractQueryInputHandler inputHandler)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final AbstractNamedInputHandler<T> inputHandler, final String catalog, final String schema, final boolean useCache)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> call(final AbstractNamedInputHandler<T> inputHandler, final String catalog, final String schema, final boolean useCache)", "full_signature": "public Future<T> call(final AbstractNamedInputHandler<T> inputHandler, final String catalog, final String schema, final boolean useCache)", "class_method_signature": "AsyncQueryRunner.call(final AbstractNamedInputHandler<T> inputHandler, final String catalog, final String schema, final boolean useCache)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final AbstractNamedInputHandler<T> inputHandler)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> call(final AbstractNamedInputHandler<T> inputHandler)", "full_signature": "public Future<T> call(final AbstractNamedInputHandler<T> inputHandler)", "class_method_signature": "AsyncQueryRunner.call(final AbstractNamedInputHandler<T> inputHandler)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler)", "modifiers": "public", "return": "Future<CallResults<T, S>>", "signature": "Future<CallResults<T, S>> call(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler)", "full_signature": "public Future<CallResults<T, S>> call(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler)", "class_method_signature": "AsyncQueryRunner.call(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler, final String catalog, final String schema, final boolean useCache)", "modifiers": "public", "return": "Future<CallResults<T, S>>", "signature": "Future<CallResults<T, S>> call(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler, final String catalog, final String schema, final boolean useCache)", "full_signature": "public Future<CallResults<T, S>> call(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler, final String catalog, final String schema, final boolean useCache)", "class_method_signature": "AsyncQueryRunner.call(final InputHandler<T> inputHandler, final OutputHandler<S> outputHandler, final String catalog, final String schema, final boolean useCache)", "testcase": false, "constructor": false}, {"identifier": "setTransactionManualMode", "parameters": "(boolean manualMode)", "modifiers": "public", "return": "void", "signature": "void setTransactionManualMode(boolean manualMode)", "full_signature": "public void setTransactionManualMode(boolean manualMode)", "class_method_signature": "AsyncQueryRunner.setTransactionManualMode(boolean manualMode)", "testcase": false, "constructor": false}, {"identifier": "isTransactionManualMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTransactionManualMode()", "full_signature": "public boolean isTransactionManualMode()", "class_method_signature": "AsyncQueryRunner.isTransactionManualMode()", "testcase": false, "constructor": false}, {"identifier": "setTransactionIsolationLevel", "parameters": "(Integer level)", "modifiers": "public", "return": "void", "signature": "void setTransactionIsolationLevel(Integer level)", "full_signature": "public void setTransactionIsolationLevel(Integer level)", "class_method_signature": "AsyncQueryRunner.setTransactionIsolationLevel(Integer level)", "testcase": false, "constructor": false}, {"identifier": "getTransactionIsolationLevel", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getTransactionIsolationLevel()", "full_signature": "public Integer getTransactionIsolationLevel()", "class_method_signature": "AsyncQueryRunner.getTransactionIsolationLevel()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void commit()", "full_signature": "public void commit()", "class_method_signature": "AsyncQueryRunner.commit()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rollback()", "full_signature": "public void rollback()", "class_method_signature": "AsyncQueryRunner.rollback()", "testcase": false, "constructor": false}, {"identifier": "setSavepoint", "parameters": "()", "modifiers": "public", "return": "Savepoint", "signature": "Savepoint setSavepoint()", "full_signature": "public Savepoint setSavepoint()", "class_method_signature": "AsyncQueryRunner.setSavepoint()", "testcase": false, "constructor": false}, {"identifier": "setSavepoint", "parameters": "(String name)", "modifiers": "public", "return": "Savepoint", "signature": "Savepoint setSavepoint(String name)", "full_signature": "public Savepoint setSavepoint(String name)", "class_method_signature": "AsyncQueryRunner.setSavepoint(String name)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(Savepoint savepoint)", "modifiers": "public", "return": "void", "signature": "void rollback(Savepoint savepoint)", "full_signature": "public void rollback(Savepoint savepoint)", "class_method_signature": "AsyncQueryRunner.rollback(Savepoint savepoint)", "testcase": false, "constructor": false}, {"identifier": "releaseSavepoint", "parameters": "(Savepoint savepoint)", "modifiers": "public", "return": "void", "signature": "void releaseSavepoint(Savepoint savepoint)", "full_signature": "public void releaseSavepoint(Savepoint savepoint)", "class_method_signature": "AsyncQueryRunner.releaseSavepoint(Savepoint savepoint)", "testcase": false, "constructor": false}, {"identifier": "overrideOnce", "parameters": "(String operation, Object value)", "modifiers": "public", "return": "AsyncQueryRunnerService", "signature": "AsyncQueryRunnerService overrideOnce(String operation, Object value)", "full_signature": "public AsyncQueryRunnerService overrideOnce(String operation, Object value)", "class_method_signature": "AsyncQueryRunner.overrideOnce(String operation, Object value)", "testcase": false, "constructor": false}, {"identifier": "override", "parameters": "(String operation, Object value)", "modifiers": "public", "return": "AsyncQueryRunnerService", "signature": "AsyncQueryRunnerService override(String operation, Object value)", "full_signature": "public AsyncQueryRunnerService override(String operation, Object value)", "class_method_signature": "AsyncQueryRunner.override(String operation, Object value)", "testcase": false, "constructor": false}, {"identifier": "removeOverride", "parameters": "(String operation)", "modifiers": "public", "return": "AsyncQueryRunnerService", "signature": "AsyncQueryRunnerService removeOverride(String operation)", "full_signature": "public AsyncQueryRunnerService removeOverride(String operation)", "class_method_signature": "AsyncQueryRunner.removeOverride(String operation)", "testcase": false, "constructor": false}], "file": "midao-jdbc-core/src/main/java/org/midao/jdbc/core/AsyncQueryRunner.java"}, "focal_method": {"identifier": "call", "parameters": "(final AbstractQueryInputHandler inputHandler)", "modifiers": "public", "return": "Future<QueryParameters>", "body": "public Future<QueryParameters> call(final AbstractQueryInputHandler inputHandler) throws SQLException {\n        return executorService.submit(new Callable<QueryParameters>() {\n\n            /**\n             * {@inheritDoc}\n             */\n            public QueryParameters call() throws Exception {\n                return queryRunner.call(inputHandler);\n            }\n\n        });\n    }", "signature": "Future<QueryParameters> call(final AbstractQueryInputHandler inputHandler)", "full_signature": "public Future<QueryParameters> call(final AbstractQueryInputHandler inputHandler)", "class_method_signature": "AsyncQueryRunner.call(final AbstractQueryInputHandler inputHandler)", "testcase": false, "constructor": false, "invocations": ["submit", "call"]}, "repository": {"repo_id": 8967798, "url": "https://github.com/pryzach/midao", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 9516, "license": "licensed"}}