{"test_class": {"identifier": "ColorTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/values/src/test/java/jetbrains/jetpad/values/ColorTest.java"}, "test_case": {"identifier": "noLastNumber", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void noLastNumber() {\n    Color.parseColor(\"rgb(255, 0, )\");\n  }", "signature": "void noLastNumber()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void noLastNumber()", "class_method_signature": "ColorTest.noLastNumber()", "testcase": true, "constructor": false, "invocations": ["parseColor"]}, "focal_class": {"identifier": "Color", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Color TRANSPARENT = new Color(0, 0, 0, 0);", "modifier": "public static final", "type": "Color", "declarator": "TRANSPARENT = new Color(0, 0, 0, 0)", "var_name": "TRANSPARENT"}, {"original_string": "public static final Color WHITE = new Color(255, 255, 255);", "modifier": "public static final", "type": "Color", "declarator": "WHITE = new Color(255, 255, 255)", "var_name": "WHITE"}, {"original_string": "public static final Color BLACK = new Color(0, 0, 0);", "modifier": "public static final", "type": "Color", "declarator": "BLACK = new Color(0, 0, 0)", "var_name": "BLACK"}, {"original_string": "public static final Color LIGHT_GRAY = new Color(192, 192, 192);", "modifier": "public static final", "type": "Color", "declarator": "LIGHT_GRAY = new Color(192, 192, 192)", "var_name": "LIGHT_GRAY"}, {"original_string": "public static final Color VERY_LIGHT_GRAY = new Color(210, 210, 210);", "modifier": "public static final", "type": "Color", "declarator": "VERY_LIGHT_GRAY = new Color(210, 210, 210)", "var_name": "VERY_LIGHT_GRAY"}, {"original_string": "public static final Color GRAY = new Color(128, 128, 128);", "modifier": "public static final", "type": "Color", "declarator": "GRAY = new Color(128, 128, 128)", "var_name": "GRAY"}, {"original_string": "public static final Color RED = new Color(255, 0, 0);", "modifier": "public static final", "type": "Color", "declarator": "RED = new Color(255, 0, 0)", "var_name": "RED"}, {"original_string": "public static final Color LIGHT_GREEN= new Color(210, 255, 210);", "modifier": "public static final", "type": "Color", "declarator": "LIGHT_GREEN= new Color(210, 255, 210)", "var_name": "LIGHT_GREEN"}, {"original_string": "public static final Color GREEN = new Color(0, 255, 0);", "modifier": "public static final", "type": "Color", "declarator": "GREEN = new Color(0, 255, 0)", "var_name": "GREEN"}, {"original_string": "public static final Color DARK_GREEN = new Color(0, 128, 0);", "modifier": "public static final", "type": "Color", "declarator": "DARK_GREEN = new Color(0, 128, 0)", "var_name": "DARK_GREEN"}, {"original_string": "public static final Color BLUE = new Color(0, 0, 255);", "modifier": "public static final", "type": "Color", "declarator": "BLUE = new Color(0, 0, 255)", "var_name": "BLUE"}, {"original_string": "public static final Color DARK_BLUE = new Color(0, 0, 128);", "modifier": "public static final", "type": "Color", "declarator": "DARK_BLUE = new Color(0, 0, 128)", "var_name": "DARK_BLUE"}, {"original_string": "public static final Color LIGHT_BLUE = new Color(210, 210, 255);", "modifier": "public static final", "type": "Color", "declarator": "LIGHT_BLUE = new Color(210, 210, 255)", "var_name": "LIGHT_BLUE"}, {"original_string": "public static final Color YELLOW = new Color(255, 255, 0);", "modifier": "public static final", "type": "Color", "declarator": "YELLOW = new Color(255, 255, 0)", "var_name": "YELLOW"}, {"original_string": "public static final Color LIGHT_YELLOW = new Color(255, 255, 128);", "modifier": "public static final", "type": "Color", "declarator": "LIGHT_YELLOW = new Color(255, 255, 128)", "var_name": "LIGHT_YELLOW"}, {"original_string": "public static final Color VERY_LIGHT_YELLOW = new Color(255, 255, 210);", "modifier": "public static final", "type": "Color", "declarator": "VERY_LIGHT_YELLOW = new Color(255, 255, 210)", "var_name": "VERY_LIGHT_YELLOW"}, {"original_string": "public static final Color MAGENTA = new Color(255, 0, 255);", "modifier": "public static final", "type": "Color", "declarator": "MAGENTA = new Color(255, 0, 255)", "var_name": "MAGENTA"}, {"original_string": "public static final Color LIGHT_MAGENTA = new Color(255, 210, 255);", "modifier": "public static final", "type": "Color", "declarator": "LIGHT_MAGENTA = new Color(255, 210, 255)", "var_name": "LIGHT_MAGENTA"}, {"original_string": "public static final Color DARK_MAGENTA = new Color(128, 0, 128);", "modifier": "public static final", "type": "Color", "declarator": "DARK_MAGENTA = new Color(128, 0, 128)", "var_name": "DARK_MAGENTA"}, {"original_string": "public static final Color CYAN = new Color(0, 255, 255);", "modifier": "public static final", "type": "Color", "declarator": "CYAN = new Color(0, 255, 255)", "var_name": "CYAN"}, {"original_string": "public static final Color LIGHT_CYAN = new Color(210, 255, 255);", "modifier": "public static final", "type": "Color", "declarator": "LIGHT_CYAN = new Color(210, 255, 255)", "var_name": "LIGHT_CYAN"}, {"original_string": "public static final Color ORANGE = new Color(255, 192, 0);", "modifier": "public static final", "type": "Color", "declarator": "ORANGE = new Color(255, 192, 0)", "var_name": "ORANGE"}, {"original_string": "public static final Color PINK = new Color(255, 175, 175);", "modifier": "public static final", "type": "Color", "declarator": "PINK = new Color(255, 175, 175)", "var_name": "PINK"}, {"original_string": "public static final Color LIGHT_PINK = new Color(255, 210, 210);", "modifier": "public static final", "type": "Color", "declarator": "LIGHT_PINK = new Color(255, 210, 210)", "var_name": "LIGHT_PINK"}, {"original_string": "private static final String RGB = \"rgb\";", "modifier": "private static final", "type": "String", "declarator": "RGB = \"rgb\"", "var_name": "RGB"}, {"original_string": "private static final String COLOR = \"color\";", "modifier": "private static final", "type": "String", "declarator": "COLOR = \"color\"", "var_name": "COLOR"}, {"original_string": "private static final String RGBA = \"rgba\";", "modifier": "private static final", "type": "String", "declarator": "RGBA = \"rgba\"", "var_name": "RGBA"}, {"original_string": "private int myRed;", "modifier": "private", "type": "int", "declarator": "myRed", "var_name": "myRed"}, {"original_string": "private int myGreen;", "modifier": "private", "type": "int", "declarator": "myGreen", "var_name": "myGreen"}, {"original_string": "private int myBlue;", "modifier": "private", "type": "int", "declarator": "myBlue", "var_name": "myBlue"}, {"original_string": "private int myAlpha;", "modifier": "private", "type": "int", "declarator": "myAlpha", "var_name": "myAlpha"}], "methods": [{"identifier": "parseColor", "parameters": "(String text)", "modifiers": "public static", "return": "Color", "signature": "Color parseColor(String text)", "full_signature": "public static Color parseColor(String text)", "class_method_signature": "Color.parseColor(String text)", "testcase": false, "constructor": false}, {"identifier": "findNext", "parameters": "(String s, String what, int from)", "modifiers": "private static", "return": "int", "signature": "int findNext(String s, String what, int from)", "full_signature": "private static int findNext(String s, String what, int from)", "class_method_signature": "Color.findNext(String s, String what, int from)", "testcase": false, "constructor": false}, {"identifier": "parseHex", "parameters": "(String hexColor)", "modifiers": "public static", "return": "Color", "signature": "Color parseHex(String hexColor)", "full_signature": "public static Color parseHex(String hexColor)", "class_method_signature": "Color.parseHex(String hexColor)", "testcase": false, "constructor": false}, {"identifier": "Color", "parameters": "(int r, int g, int b, int a)", "modifiers": "public", "return": "", "signature": " Color(int r, int g, int b, int a)", "full_signature": "public  Color(int r, int g, int b, int a)", "class_method_signature": "Color.Color(int r, int g, int b, int a)", "testcase": false, "constructor": true}, {"identifier": "Color", "parameters": "(int r, int g, int b)", "modifiers": "public", "return": "", "signature": " Color(int r, int g, int b)", "full_signature": "public  Color(int r, int g, int b)", "class_method_signature": "Color.Color(int r, int g, int b)", "testcase": false, "constructor": true}, {"identifier": "getRed", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRed()", "full_signature": "public int getRed()", "class_method_signature": "Color.getRed()", "testcase": false, "constructor": false}, {"identifier": "getGreen", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getGreen()", "full_signature": "public int getGreen()", "class_method_signature": "Color.getGreen()", "testcase": false, "constructor": false}, {"identifier": "getBlue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBlue()", "full_signature": "public int getBlue()", "class_method_signature": "Color.getBlue()", "testcase": false, "constructor": false}, {"identifier": "getAlpha", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAlpha()", "full_signature": "public int getAlpha()", "class_method_signature": "Color.getAlpha()", "testcase": false, "constructor": false}, {"identifier": "changeAlpha", "parameters": "(int newAlpha)", "modifiers": "public", "return": "Color", "signature": "Color changeAlpha(int newAlpha)", "full_signature": "public Color changeAlpha(int newAlpha)", "class_method_signature": "Color.changeAlpha(int newAlpha)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Color.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toCssColor", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toCssColor()", "full_signature": "public String toCssColor()", "class_method_signature": "Color.toCssColor()", "testcase": false, "constructor": false}, {"identifier": "toHexColor", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toHexColor()", "full_signature": "public String toHexColor()", "class_method_signature": "Color.toHexColor()", "testcase": false, "constructor": false}, {"identifier": "toColorPart", "parameters": "(int value)", "modifiers": "private static", "return": "String", "signature": "String toColorPart(int value)", "full_signature": "private static String toColorPart(int value)", "class_method_signature": "Color.toColorPart(int value)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Color.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Color.toString()", "testcase": false, "constructor": false}], "file": "util/values/src/main/java/jetbrains/jetpad/values/Color.java"}, "focal_method": {"identifier": "parseColor", "parameters": "(String text)", "modifiers": "public static", "return": "Color", "body": "public static Color parseColor(String text) {\n    int firstParen = findNext(text, \"(\", 0);\n    String prefix = text.substring(0, firstParen);\n\n    int firstComma = findNext(text, \",\", firstParen + 1);\n    int secondComma = findNext(text, \",\", firstComma + 1);\n\n    int thirdComma = -1;\n\n    if (prefix.equals(RGBA)) {\n      thirdComma = findNext(text, \",\", secondComma + 1);\n    } else if (prefix.equals(COLOR)) {\n      thirdComma = text.indexOf(\",\", secondComma + 1);\n    } else if (!prefix.equals(RGB)) {\n      throw new IllegalArgumentException();\n    }\n\n    int lastParen = findNext(text, \")\", thirdComma + 1);\n    int red = Integer.parseInt(text.substring(firstParen + 1, firstComma).trim());\n    int green = Integer.parseInt(text.substring(firstComma + 1, secondComma).trim());\n\n    int blue;\n    int alpha;\n    if (thirdComma == -1) {\n      blue = Integer.parseInt(text.substring(secondComma + 1, lastParen).trim());\n      alpha = 255;\n    } else {\n      blue = Integer.parseInt(text.substring(secondComma + 1, thirdComma).trim());\n      alpha = Integer.parseInt(text.substring(thirdComma + 1, lastParen).trim());\n    }\n\n    return new Color(red, green, blue, alpha);\n  }", "signature": "Color parseColor(String text)", "full_signature": "public static Color parseColor(String text)", "class_method_signature": "Color.parseColor(String text)", "testcase": false, "constructor": false, "invocations": ["findNext", "substring", "findNext", "findNext", "equals", "findNext", "equals", "indexOf", "equals", "findNext", "parseInt", "trim", "substring", "parseInt", "trim", "substring", "parseInt", "trim", "substring", "parseInt", "trim", "substring", "parseInt", "trim", "substring"]}, "repository": {"repo_id": 8701655, "url": "https://github.com/JetBrains/mapper", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 49, "size": 1987, "license": "licensed"}}