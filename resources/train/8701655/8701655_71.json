{"test_class": {"identifier": "ListItemPropertyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private ObservableList<Integer> list = createList(5);", "modifier": "private", "type": "ObservableList<Integer>", "declarator": "list = createList(5)", "var_name": "list"}, {"original_string": "private ListItemProperty<Integer> p1 = new ListItemProperty<>(list, 1);", "modifier": "private", "type": "ListItemProperty<Integer>", "declarator": "p1 = new ListItemProperty<>(list, 1)", "var_name": "p1"}, {"original_string": "private ListItemProperty<Integer> p2 = new ListItemProperty<>(list, 2);", "modifier": "private", "type": "ListItemProperty<Integer>", "declarator": "p2 = new ListItemProperty<>(list, 2)", "var_name": "p2"}, {"original_string": "private ListItemProperty<Integer> p3 = new ListItemProperty<>(list, 3);", "modifier": "private", "type": "ListItemProperty<Integer>", "declarator": "p3 = new ListItemProperty<>(list, 3)", "var_name": "p3"}, {"original_string": "private MatchingHandler<PropertyChangeEvent<Integer>> p1Handler = setTestHandler(p1);", "modifier": "private", "type": "MatchingHandler<PropertyChangeEvent<Integer>>", "declarator": "p1Handler = setTestHandler(p1)", "var_name": "p1Handler"}, {"original_string": "private MatchingHandler<PropertyChangeEvent<Integer>> p2Handler = setTestHandler(p2);", "modifier": "private", "type": "MatchingHandler<PropertyChangeEvent<Integer>>", "declarator": "p2Handler = setTestHandler(p2)", "var_name": "p2Handler"}, {"original_string": "private MatchingHandler<PropertyChangeEvent<Integer>> p3Handler = setTestHandler(p3);", "modifier": "private", "type": "MatchingHandler<PropertyChangeEvent<Integer>>", "declarator": "p3Handler = setTestHandler(p3)", "var_name": "p3Handler"}, {"original_string": "private MatchingHandler<PropertyChangeEvent<Integer>> p1indexHandler = setTestHandler(p1.getIndex());", "modifier": "private", "type": "MatchingHandler<PropertyChangeEvent<Integer>>", "declarator": "p1indexHandler = setTestHandler(p1.getIndex())", "var_name": "p1indexHandler"}, {"original_string": "private MatchingHandler<PropertyChangeEvent<Integer>> p2indexHandler = setTestHandler(p2.getIndex());", "modifier": "private", "type": "MatchingHandler<PropertyChangeEvent<Integer>>", "declarator": "p2indexHandler = setTestHandler(p2.getIndex())", "var_name": "p2indexHandler"}, {"original_string": "private MatchingHandler<PropertyChangeEvent<Integer>> p3indexHandler = setTestHandler(p3.getIndex());", "modifier": "private", "type": "MatchingHandler<PropertyChangeEvent<Integer>>", "declarator": "p3indexHandler = setTestHandler(p3.getIndex())", "var_name": "p3indexHandler"}], "file": "model/src/test/java/jetbrains/jetpad/model/property/ListItemPropertyTest.java"}, "test_case": {"identifier": "getsTheRightItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getsTheRightItem() {\n    ObservableList<Integer> list = createList(5);\n    ListItemProperty<Integer> p2 = new ListItemProperty<>(list, 2);\n    assertEquals(2, p2.get().intValue());\n\n    ListItemProperty<Integer> p4 = new ListItemProperty<>(list, 4);\n    assertEquals(4, p4.get().intValue());\n  }", "signature": "void getsTheRightItem()", "full_signature": "@Test public void getsTheRightItem()", "class_method_signature": "ListItemPropertyTest.getsTheRightItem()", "testcase": true, "constructor": false, "invocations": ["createList", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get"]}, "focal_class": {"identifier": "ListItemProperty", "superclass": "extends BaseReadableProperty<ValueT>", "interfaces": "implements Property<ValueT>, Disposable", "fields": [{"original_string": "private ObservableList<ValueT> myList;", "modifier": "private", "type": "ObservableList<ValueT>", "declarator": "myList", "var_name": "myList"}, {"original_string": "private Listeners<EventHandler<? super PropertyChangeEvent<ValueT>>> myHandlers = new Listeners<>();", "modifier": "private", "type": "Listeners<EventHandler<? super PropertyChangeEvent<ValueT>>>", "declarator": "myHandlers = new Listeners<>()", "var_name": "myHandlers"}, {"original_string": "private Registration myReg;", "modifier": "private", "type": "Registration", "declarator": "myReg", "var_name": "myReg"}, {"original_string": "private boolean myDisposed = false;", "modifier": "private", "type": "boolean", "declarator": "myDisposed = false", "var_name": "myDisposed"}, {"original_string": "private final Property<Integer> index = new ValueProperty<>();", "modifier": "private final", "type": "Property<Integer>", "declarator": "index = new ValueProperty<>()", "var_name": "index"}], "methods": [{"identifier": "ListItemProperty", "parameters": "(ObservableList<ValueT> list, int index)", "modifiers": "public", "return": "", "signature": " ListItemProperty(ObservableList<ValueT> list, int index)", "full_signature": "public  ListItemProperty(ObservableList<ValueT> list, int index)", "class_method_signature": "ListItemProperty.ListItemProperty(ObservableList<ValueT> list, int index)", "testcase": false, "constructor": true}, {"identifier": "addHandler", "parameters": "(EventHandler<? super PropertyChangeEvent<ValueT>> handler)", "modifiers": "@Override public", "return": "Registration", "signature": "Registration addHandler(EventHandler<? super PropertyChangeEvent<ValueT>> handler)", "full_signature": "@Override public Registration addHandler(EventHandler<? super PropertyChangeEvent<ValueT>> handler)", "class_method_signature": "ListItemProperty.addHandler(EventHandler<? super PropertyChangeEvent<ValueT>> handler)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "ValueT", "signature": "ValueT get()", "full_signature": "@Override public ValueT get()", "class_method_signature": "ListItemProperty.get()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(ValueT value)", "modifiers": "@Override public", "return": "void", "signature": "void set(ValueT value)", "full_signature": "@Override public void set(ValueT value)", "class_method_signature": "ListItemProperty.set(ValueT value)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "ListItemProperty.isValid()", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void invalidate()", "full_signature": "private void invalidate()", "class_method_signature": "ListItemProperty.invalidate()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ListItemProperty.dispose()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "public", "return": "ReadableProperty<Integer>", "signature": "ReadableProperty<Integer> getIndex()", "full_signature": "public ReadableProperty<Integer> getIndex()", "class_method_signature": "ListItemProperty.getIndex()", "testcase": false, "constructor": false}], "file": "model/src/main/java/jetbrains/jetpad/model/property/ListItemProperty.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "ValueT", "body": "@Override\n  public ValueT get() {\n    if (isValid()) {\n      return myList.get(getIndex().get());\n    } else {\n      return null;\n    }\n  }", "signature": "ValueT get()", "full_signature": "@Override public ValueT get()", "class_method_signature": "ListItemProperty.get()", "testcase": false, "constructor": false, "invocations": ["isValid", "get", "get", "getIndex"]}, "repository": {"repo_id": 8701655, "url": "https://github.com/JetBrains/mapper", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 49, "size": 1987, "license": "licensed"}}