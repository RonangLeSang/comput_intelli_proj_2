{"test_class": {"identifier": "StatisticsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final double[] values = {0.3, 0.8, 0.2, 0.6, 0.9, 0.4, 0.5, 0.1, 0.7};", "modifier": "final", "type": "double[]", "declarator": "values = {0.3, 0.8, 0.2, 0.6, 0.9, 0.4, 0.5, 0.1, 0.7}", "var_name": "values"}, {"original_string": "private RunningStatistics stats;", "modifier": "private", "type": "RunningStatistics", "declarator": "stats", "var_name": "stats"}], "file": "performance-tools/src/test/java/com/fillumina/performance/util/StatisticsTest.java"}, "test_case": {"identifier": "shouldGiveTheStandardDeiviation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGiveTheStandardDeiviation() {\n        assertEquals(standardDeviation(values), stats.standardDeviation(), 1E-8);\n    }", "signature": "void shouldGiveTheStandardDeiviation()", "full_signature": "@Test public void shouldGiveTheStandardDeiviation()", "class_method_signature": "StatisticsTest.shouldGiveTheStandardDeiviation()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "standardDeviation", "standardDeviation"]}, "focal_class": {"identifier": "Statistics", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final Statistics EMPTY = new Statistics();", "modifier": "public static final", "type": "Statistics", "declarator": "EMPTY = new Statistics()", "var_name": "EMPTY"}, {"original_string": "private long count;", "modifier": "private", "type": "long", "declarator": "count", "var_name": "count"}, {"original_string": "private double sum;", "modifier": "private", "type": "double", "declarator": "sum", "var_name": "sum"}, {"original_string": "private double max = Double.MIN_VALUE;", "modifier": "private", "type": "double", "declarator": "max = Double.MIN_VALUE", "var_name": "max"}, {"original_string": "private double min = Double.MAX_VALUE;", "modifier": "private", "type": "double", "declarator": "min = Double.MAX_VALUE", "var_name": "min"}, {"original_string": "private double M2, mean;", "modifier": "private", "type": "double", "declarator": "M2", "var_name": "M2"}], "methods": [{"identifier": "Statistics", "parameters": "()", "modifiers": "private", "return": "", "signature": " Statistics()", "full_signature": "private  Statistics()", "class_method_signature": "Statistics.Statistics()", "testcase": false, "constructor": true}, {"identifier": "Statistics", "parameters": "(final double... values)", "modifiers": "public", "return": "", "signature": " Statistics(final double... values)", "full_signature": "public  Statistics(final double... values)", "class_method_signature": "Statistics.Statistics(final double... values)", "testcase": false, "constructor": true}, {"identifier": "Statistics", "parameters": "(final Collection<? extends Number> collection)", "modifiers": "public", "return": "", "signature": " Statistics(final Collection<? extends Number> collection)", "full_signature": "public  Statistics(final Collection<? extends Number> collection)", "class_method_signature": "Statistics.Statistics(final Collection<? extends Number> collection)", "testcase": false, "constructor": true}, {"identifier": "Statistics", "parameters": "(final Statistics statistics)", "modifiers": "public", "return": "", "signature": " Statistics(final Statistics statistics)", "full_signature": "public  Statistics(final Statistics statistics)", "class_method_signature": "Statistics.Statistics(final Statistics statistics)", "testcase": false, "constructor": true}, {"identifier": "addAll", "parameters": "(final double... values)", "modifiers": "protected", "return": "void", "signature": "void addAll(final double... values)", "full_signature": "protected void addAll(final double... values)", "class_method_signature": "Statistics.addAll(final double... values)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final Collection<? extends Number> collection)", "modifiers": "protected", "return": "void", "signature": "void addAll(final Collection<? extends Number> collection)", "full_signature": "protected void addAll(final Collection<? extends Number> collection)", "class_method_signature": "Statistics.addAll(final Collection<? extends Number> collection)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final double value)", "modifiers": "protected", "return": "void", "signature": "void add(final double value)", "full_signature": "protected void add(final double value)", "class_method_signature": "Statistics.add(final double value)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double max()", "full_signature": "public double max()", "class_method_signature": "Statistics.max()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double min()", "full_signature": "public double min()", "class_method_signature": "Statistics.min()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long count()", "full_signature": "public long count()", "class_method_signature": "Statistics.count()", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double sum()", "full_signature": "public double sum()", "class_method_signature": "Statistics.sum()", "testcase": false, "constructor": false}, {"identifier": "average", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double average()", "full_signature": "public double average()", "class_method_signature": "Statistics.average()", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double variance()", "full_signature": "public double variance()", "class_method_signature": "Statistics.variance()", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double standardDeviation()", "full_signature": "public double standardDeviation()", "class_method_signature": "Statistics.standardDeviation()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void clear()", "full_signature": "protected void clear()", "class_method_signature": "Statistics.clear()", "testcase": false, "constructor": false}, {"identifier": "calculateVariance", "parameters": "(final double x)", "modifiers": "private", "return": "void", "signature": "void calculateVariance(final double x)", "full_signature": "private void calculateVariance(final double x)", "class_method_signature": "Statistics.calculateVariance(final double x)", "testcase": false, "constructor": false}, {"identifier": "assertDataPresent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void assertDataPresent()", "full_signature": "private void assertDataPresent()", "class_method_signature": "Statistics.assertDataPresent()", "testcase": false, "constructor": false}], "file": "performance-tools/src/main/java/com/fillumina/performance/util/Statistics.java"}, "focal_method": {"identifier": "standardDeviation", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double standardDeviation() {\n        assertDataPresent();\n        return Math.sqrt(variance());\n    }", "signature": "double standardDeviation()", "full_signature": "public double standardDeviation()", "class_method_signature": "Statistics.standardDeviation()", "testcase": false, "constructor": false, "invocations": ["assertDataPresent", "sqrt", "variance"]}, "repository": {"repo_id": 13349691, "url": "https://github.com/fillumina/PerformanceTools", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 1496, "license": "licensed"}}