{"test_class": {"identifier": "LocalDataSegmentPullerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n  public final", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private File tmpDir;", "modifier": "private", "type": "File", "declarator": "tmpDir", "var_name": "tmpDir"}, {"original_string": "private LocalDataSegmentPuller puller;", "modifier": "private", "type": "LocalDataSegmentPuller", "declarator": "puller", "var_name": "puller"}], "file": "server/src/test/java/org/apache/druid/segment/loading/LocalDataSegmentPullerTest.java"}, "test_case": {"identifier": "simpleGZTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void simpleGZTest() throws IOException, SegmentLoadingException\n  {\n    File zipFile = File.createTempFile(\"gztest\", \".gz\");\n    File unZipFile = new File(\n        tmpDir,\n        Files.getNameWithoutExtension(\n            zipFile.getAbsolutePath()\n        )\n    );\n    unZipFile.delete();\n    zipFile.delete();\n    try (OutputStream fOutStream = new FileOutputStream(zipFile)) {\n      try (OutputStream outputStream = new GZIPOutputStream(fOutStream)) {\n        outputStream.write(new byte[0]);\n        outputStream.flush();\n      }\n    }\n\n    Assert.assertTrue(zipFile.exists());\n    Assert.assertFalse(unZipFile.exists());\n    puller.getSegmentFiles(zipFile, tmpDir);\n    Assert.assertTrue(unZipFile.exists());\n  }", "signature": "void simpleGZTest()", "full_signature": "@Test public void simpleGZTest()", "class_method_signature": "LocalDataSegmentPullerTest.simpleGZTest()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "getNameWithoutExtension", "getAbsolutePath", "delete", "delete", "write", "flush", "assertTrue", "exists", "assertFalse", "exists", "getSegmentFiles", "assertTrue", "exists"]}, "focal_class": {"identifier": "LocalDataSegmentPuller", "superclass": "", "interfaces": "implements URIDataPuller", "fields": [{"original_string": "public static final int DEFAULT_RETRY_COUNT = 3;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_RETRY_COUNT = 3", "var_name": "DEFAULT_RETRY_COUNT"}, {"original_string": "private static final Logger log = new Logger(LocalDataSegmentPuller.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(LocalDataSegmentPuller.class)", "var_name": "log"}], "methods": [{"identifier": "buildFileObject", "parameters": "(final URI uri)", "modifiers": "public static", "return": "FileObject", "signature": "FileObject buildFileObject(final URI uri)", "full_signature": "public static FileObject buildFileObject(final URI uri)", "class_method_signature": "LocalDataSegmentPuller.buildFileObject(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "getSegmentFiles", "parameters": "(DataSegment segment, File dir)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void getSegmentFiles(DataSegment segment, File dir)", "full_signature": "@VisibleForTesting public void getSegmentFiles(DataSegment segment, File dir)", "class_method_signature": "LocalDataSegmentPuller.getSegmentFiles(DataSegment segment, File dir)", "testcase": false, "constructor": false}, {"identifier": "getSegmentFiles", "parameters": "(final File sourceFile, final File dir)", "modifiers": "public", "return": "FileUtils.FileCopyResult", "signature": "FileUtils.FileCopyResult getSegmentFiles(final File sourceFile, final File dir)", "full_signature": "public FileUtils.FileCopyResult getSegmentFiles(final File sourceFile, final File dir)", "class_method_signature": "LocalDataSegmentPuller.getSegmentFiles(final File sourceFile, final File dir)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(URI uri)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(URI uri)", "full_signature": "@Override public InputStream getInputStream(URI uri)", "class_method_signature": "LocalDataSegmentPuller.getInputStream(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(URI uri)", "modifiers": "@Override public", "return": "String", "signature": "String getVersion(URI uri)", "full_signature": "@Override public String getVersion(URI uri)", "class_method_signature": "LocalDataSegmentPuller.getVersion(URI uri)", "testcase": false, "constructor": false}, {"identifier": "shouldRetryPredicate", "parameters": "()", "modifiers": "@Override public", "return": "Predicate<Throwable>", "signature": "Predicate<Throwable> shouldRetryPredicate()", "full_signature": "@Override public Predicate<Throwable> shouldRetryPredicate()", "class_method_signature": "LocalDataSegmentPuller.shouldRetryPredicate()", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(DataSegment segment)", "modifiers": "private", "return": "File", "signature": "File getFile(DataSegment segment)", "full_signature": "private File getFile(DataSegment segment)", "class_method_signature": "LocalDataSegmentPuller.getFile(DataSegment segment)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/segment/loading/LocalDataSegmentPuller.java"}, "focal_method": {"identifier": "getSegmentFiles", "parameters": "(DataSegment segment, File dir)", "modifiers": "@VisibleForTesting public", "return": "void", "body": "@VisibleForTesting\n  public void getSegmentFiles(DataSegment segment, File dir) throws SegmentLoadingException\n  {\n    getSegmentFiles(getFile(segment), dir);\n  }", "signature": "void getSegmentFiles(DataSegment segment, File dir)", "full_signature": "@VisibleForTesting public void getSegmentFiles(DataSegment segment, File dir)", "class_method_signature": "LocalDataSegmentPuller.getSegmentFiles(DataSegment segment, File dir)", "testcase": false, "constructor": false, "invocations": ["getSegmentFiles", "getFile"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}