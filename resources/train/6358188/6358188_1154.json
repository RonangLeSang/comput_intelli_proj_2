{"test_class": {"identifier": "DoublesSketchToHistogramPostAggregatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchToHistogramPostAggregatorTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToString()\n  {\n    final PostAggregator postAgg = new DoublesSketchToHistogramPostAggregator(\n        \"post\",\n        new FieldAccessPostAggregator(\"field1\", \"sketch\"),\n        new double[]{0.25, 0.75},\n        null\n    );\n\n    Assert.assertEquals(\n        \"DoublesSketchToHistogramPostAggregator{name='post', field=FieldAccessPostAggregator{name='field1', fieldName='sketch'}, splitPoints=[0.25, 0.75], numBins=null}\",\n        postAgg.toString()\n    );\n  }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "DoublesSketchToHistogramPostAggregatorTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "DoublesSketchToHistogramPostAggregator", "superclass": "", "interfaces": "implements PostAggregator", "fields": [{"original_string": "static final int DEFAULT_NUM_BINS = 10;", "modifier": "static final", "type": "int", "declarator": "DEFAULT_NUM_BINS = 10", "var_name": "DEFAULT_NUM_BINS"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final PostAggregator field;", "modifier": "private final", "type": "PostAggregator", "declarator": "field", "var_name": "field"}, {"original_string": "private final double[] splitPoints;", "modifier": "private final", "type": "double[]", "declarator": "splitPoints", "var_name": "splitPoints"}, {"original_string": "private final Integer numBins;", "modifier": "private final", "type": "Integer", "declarator": "numBins", "var_name": "numBins"}], "methods": [{"identifier": "DoublesSketchToHistogramPostAggregator", "parameters": "(\n      @JsonProperty(\"name\") final String name,\n      @JsonProperty(\"field\") final PostAggregator field,\n      @JsonProperty(\"splitPoints\") @Nullable final double[] splitPoints,\n      @JsonProperty(\"numBins\") @Nullable final Integer numBins)", "modifiers": "@JsonCreator public", "return": "", "signature": " DoublesSketchToHistogramPostAggregator(\n      @JsonProperty(\"name\") final String name,\n      @JsonProperty(\"field\") final PostAggregator field,\n      @JsonProperty(\"splitPoints\") @Nullable final double[] splitPoints,\n      @JsonProperty(\"numBins\") @Nullable final Integer numBins)", "full_signature": "@JsonCreator public  DoublesSketchToHistogramPostAggregator(\n      @JsonProperty(\"name\") final String name,\n      @JsonProperty(\"field\") final PostAggregator field,\n      @JsonProperty(\"splitPoints\") @Nullable final double[] splitPoints,\n      @JsonProperty(\"numBins\") @Nullable final Integer numBins)", "class_method_signature": "DoublesSketchToHistogramPostAggregator.DoublesSketchToHistogramPostAggregator(\n      @JsonProperty(\"name\") final String name,\n      @JsonProperty(\"field\") final PostAggregator field,\n      @JsonProperty(\"splitPoints\") @Nullable final double[] splitPoints,\n      @JsonProperty(\"numBins\") @Nullable final Integer numBins)", "testcase": false, "constructor": true}, {"identifier": "compute", "parameters": "(final Map<String, Object> combinedAggregators)", "modifiers": "@Override public", "return": "Object", "signature": "Object compute(final Map<String, Object> combinedAggregators)", "full_signature": "@Override public Object compute(final Map<String, Object> combinedAggregators)", "class_method_signature": "DoublesSketchToHistogramPostAggregator.compute(final Map<String, Object> combinedAggregators)", "testcase": false, "constructor": false}, {"identifier": "equallySpacedPoints", "parameters": "(final int num, final double min, final double max)", "modifiers": "private static", "return": "double[]", "signature": "double[] equallySpacedPoints(final int num, final double min, final double max)", "full_signature": "private static double[] equallySpacedPoints(final int num, final double min, final double max)", "class_method_signature": "DoublesSketchToHistogramPostAggregator.equallySpacedPoints(final int num, final double min, final double max)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override @JsonProperty public", "return": "String", "signature": "String getName()", "full_signature": "@Override @JsonProperty public String getName()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getName()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "ValueType", "signature": "ValueType getType()", "full_signature": "@Override public ValueType getType()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getType()", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "()", "modifiers": "@JsonProperty public", "return": "PostAggregator", "signature": "PostAggregator getField()", "full_signature": "@JsonProperty public PostAggregator getField()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getField()", "testcase": false, "constructor": false}, {"identifier": "getSplitPoints", "parameters": "()", "modifiers": "@JsonProperty @JsonInclude(JsonInclude.Include.NON_NULL) public", "return": "double[]", "signature": "double[] getSplitPoints()", "full_signature": "@JsonProperty @JsonInclude(JsonInclude.Include.NON_NULL) public double[] getSplitPoints()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getSplitPoints()", "testcase": false, "constructor": false}, {"identifier": "getNumBins", "parameters": "()", "modifiers": "@JsonProperty @JsonInclude(JsonInclude.Include.NON_NULL) public", "return": "Integer", "signature": "Integer getNumBins()", "full_signature": "@JsonProperty @JsonInclude(JsonInclude.Include.NON_NULL) public Integer getNumBins()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getNumBins()", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<double[]>", "signature": "Comparator<double[]> getComparator()", "full_signature": "@Override public Comparator<double[]> getComparator()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getComparator()", "testcase": false, "constructor": false}, {"identifier": "getDependentFields", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getDependentFields()", "full_signature": "@Override public Set<String> getDependentFields()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getDependentFields()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "DoublesSketchToHistogramPostAggregator.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCacheKey()", "full_signature": "@Override public byte[] getCacheKey()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "decorate", "parameters": "(final Map<String, AggregatorFactory> map)", "modifiers": "@Override public", "return": "PostAggregator", "signature": "PostAggregator decorate(final Map<String, AggregatorFactory> map)", "full_signature": "@Override public PostAggregator decorate(final Map<String, AggregatorFactory> map)", "class_method_signature": "DoublesSketchToHistogramPostAggregator.decorate(final Map<String, AggregatorFactory> map)", "testcase": false, "constructor": false}], "file": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchToHistogramPostAggregator.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString()\n  {\n    return getClass().getSimpleName() + \"{\" +\n        \"name='\" + name + '\\'' +\n        \", field=\" + field +\n        \", splitPoints=\" + Arrays.toString(splitPoints) +\n        \", numBins=\" + numBins +\n        \"}\";\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DoublesSketchToHistogramPostAggregator.toString()", "testcase": false, "constructor": false, "invocations": ["getSimpleName", "getClass", "toString"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}