{"test_class": {"identifier": "LocalDataSegmentPusherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n  public final", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Rule\n  public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "LocalDataSegmentPusher localDataSegmentPusher;", "modifier": "", "type": "LocalDataSegmentPusher", "declarator": "localDataSegmentPusher", "var_name": "localDataSegmentPusher"}, {"original_string": "LocalDataSegmentPusherConfig config;", "modifier": "", "type": "LocalDataSegmentPusherConfig", "declarator": "config", "var_name": "config"}, {"original_string": "File dataSegmentFiles;", "modifier": "", "type": "File", "declarator": "dataSegmentFiles", "var_name": "dataSegmentFiles"}, {"original_string": "DataSegment dataSegment = new DataSegment(\n      \"ds\",\n      Intervals.utc(0, 1),\n      \"v1\",\n      null,\n      ImmutableList.of(\"dim1\"),\n      null,\n      NoneShardSpec.instance(),\n      null,\n      0\n  );", "modifier": "", "type": "DataSegment", "declarator": "dataSegment = new DataSegment(\n      \"ds\",\n      Intervals.utc(0, 1),\n      \"v1\",\n      null,\n      ImmutableList.of(\"dim1\"),\n      null,\n      NoneShardSpec.instance(),\n      null,\n      0\n  )", "var_name": "dataSegment"}, {"original_string": "DataSegment dataSegment2 = new DataSegment(\n      \"ds\",\n      Intervals.utc(0, 1),\n      \"v1\",\n      null,\n      ImmutableList.of(\"dim2\"),\n      null,\n      NoneShardSpec.instance(),\n      null,\n      0\n  );", "modifier": "", "type": "DataSegment", "declarator": "dataSegment2 = new DataSegment(\n      \"ds\",\n      Intervals.utc(0, 1),\n      \"v1\",\n      null,\n      ImmutableList.of(\"dim2\"),\n      null,\n      NoneShardSpec.instance(),\n      null,\n      0\n  )", "var_name": "dataSegment2"}], "file": "server/src/test/java/org/apache/druid/segment/loading/LocalDataSegmentPusherTest.java"}, "test_case": {"identifier": "testPushUseUniquePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPushUseUniquePath() throws IOException\n  {\n    DataSegment segment = localDataSegmentPusher.push(dataSegmentFiles, dataSegment, true);\n\n    String path = segment.getLoadSpec().get(\"path\").toString();\n    Pattern pattern = Pattern.compile(\n        \".*/ds/1970-01-01T00:00:00\\\\.000Z_1970-01-01T00:00:00\\\\.001Z/v1/0/[A-Za-z0-9-]{36}/index\\\\.zip\"\n    );\n    Assert.assertTrue(path, pattern.matcher(path).matches());\n    Assert.assertTrue(new File(path).exists());\n  }", "signature": "void testPushUseUniquePath()", "full_signature": "@Test public void testPushUseUniquePath()", "class_method_signature": "LocalDataSegmentPusherTest.testPushUseUniquePath()", "testcase": true, "constructor": false, "invocations": ["push", "toString", "get", "getLoadSpec", "compile", "assertTrue", "matches", "matcher", "assertTrue", "exists"]}, "focal_class": {"identifier": "LocalDataSegmentPusher", "superclass": "", "interfaces": "implements DataSegmentPusher", "fields": [{"original_string": "private static final Logger log = new Logger(LocalDataSegmentPusher.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(LocalDataSegmentPusher.class)", "var_name": "log"}, {"original_string": "private static final String INDEX_FILENAME = \"index.zip\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_FILENAME = \"index.zip\"", "var_name": "INDEX_FILENAME"}, {"original_string": "private final LocalDataSegmentPusherConfig config;", "modifier": "private final", "type": "LocalDataSegmentPusherConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "LocalDataSegmentPusher", "parameters": "(LocalDataSegmentPusherConfig config)", "modifiers": "@Inject public", "return": "", "signature": " LocalDataSegmentPusher(LocalDataSegmentPusherConfig config)", "full_signature": "@Inject public  LocalDataSegmentPusher(LocalDataSegmentPusherConfig config)", "class_method_signature": "LocalDataSegmentPusher.LocalDataSegmentPusher(LocalDataSegmentPusherConfig config)", "testcase": false, "constructor": true}, {"identifier": "getPathForHadoop", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPathForHadoop()", "full_signature": "@Override public String getPathForHadoop()", "class_method_signature": "LocalDataSegmentPusher.getPathForHadoop()", "testcase": false, "constructor": false}, {"identifier": "getPathForHadoop", "parameters": "(String dataSource)", "modifiers": "@Deprecated @Override public", "return": "String", "signature": "String getPathForHadoop(String dataSource)", "full_signature": "@Deprecated @Override public String getPathForHadoop(String dataSource)", "class_method_signature": "LocalDataSegmentPusher.getPathForHadoop(String dataSource)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "modifiers": "@Override public", "return": "DataSegment", "signature": "DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "full_signature": "@Override public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "class_method_signature": "LocalDataSegmentPusher.push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "testcase": false, "constructor": false}, {"identifier": "makeLoadSpec", "parameters": "(URI finalIndexZipFilePath)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> makeLoadSpec(URI finalIndexZipFilePath)", "full_signature": "@Override public Map<String, Object> makeLoadSpec(URI finalIndexZipFilePath)", "class_method_signature": "LocalDataSegmentPusher.makeLoadSpec(URI finalIndexZipFilePath)", "testcase": false, "constructor": false}, {"identifier": "makeIntermediateDir", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String makeIntermediateDir()", "full_signature": "private String makeIntermediateDir()", "class_method_signature": "LocalDataSegmentPusher.makeIntermediateDir()", "testcase": false, "constructor": false}, {"identifier": "compressSegment", "parameters": "(File dataSegmentFile, File dest)", "modifiers": "private", "return": "long", "signature": "long compressSegment(File dataSegmentFile, File dest)", "full_signature": "private long compressSegment(File dataSegmentFile, File dest)", "class_method_signature": "LocalDataSegmentPusher.compressSegment(File dataSegmentFile, File dest)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/segment/loading/LocalDataSegmentPusher.java"}, "focal_method": {"identifier": "push", "parameters": "(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "modifiers": "@Override public", "return": "DataSegment", "body": "@Override\n  public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)\n      throws IOException\n  {\n    final File baseStorageDir = config.getStorageDirectory();\n    final File outDir = new File(baseStorageDir, this.getStorageDir(segment, useUniquePath));\n\n    log.debug(\"Copying segment[%s] to local filesystem at location[%s]\", segment.getId(), outDir.toString());\n\n    if (dataSegmentFile.equals(outDir)) {\n      long size = 0;\n      for (File file : dataSegmentFile.listFiles()) {\n        size += file.length();\n      }\n\n      return segment.withLoadSpec(makeLoadSpec(outDir.toURI()))\n                    .withSize(size)\n                    .withBinaryVersion(SegmentUtils.getVersionFromDir(dataSegmentFile));\n    }\n\n    final File tmpOutDir = new File(baseStorageDir, makeIntermediateDir());\n    log.debug(\"Creating intermediate directory[%s] for segment[%s].\", tmpOutDir.toString(), segment.getId());\n    org.apache.commons.io.FileUtils.forceMkdir(tmpOutDir);\n\n    try {\n      final File tmpIndexFile = new File(tmpOutDir, INDEX_FILENAME);\n      final long size = compressSegment(dataSegmentFile, tmpIndexFile);\n\n      final DataSegment dataSegment = segment.withLoadSpec(makeLoadSpec(new File(outDir, INDEX_FILENAME).toURI()))\n                                       .withSize(size)\n                                       .withBinaryVersion(SegmentUtils.getVersionFromDir(dataSegmentFile));\n\n      org.apache.commons.io.FileUtils.forceMkdir(outDir);\n      final File indexFileTarget = new File(outDir, tmpIndexFile.getName());\n\n      if (!tmpIndexFile.renameTo(indexFileTarget)) {\n        throw new IOE(\"Failed to rename [%s] to [%s]\", tmpIndexFile, indexFileTarget);\n      }\n\n      return dataSegment;\n    }\n    finally {\n      FileUtils.deleteDirectory(tmpOutDir);\n    }\n  }", "signature": "DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "full_signature": "@Override public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "class_method_signature": "LocalDataSegmentPusher.push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)", "testcase": false, "constructor": false, "invocations": ["getStorageDirectory", "getStorageDir", "debug", "getId", "toString", "equals", "listFiles", "length", "withBinaryVersion", "withSize", "withLoadSpec", "makeLoadSpec", "toURI", "getVersionFromDir", "makeIntermediateDir", "debug", "toString", "getId", "forceMkdir", "compressSegment", "withBinaryVersion", "withSize", "withLoadSpec", "makeLoadSpec", "toURI", "getVersionFromDir", "forceMkdir", "getName", "renameTo", "deleteDirectory"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}