{"test_class": {"identifier": "DruidClusterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<DataSegment> SEGMENTS = ImmutableList.of(\n      new DataSegment(\n          \"test\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container1\", \"blobPath\", \"blobPath1\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      ),\n      new DataSegment(\n          \"test\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container2\", \"blobPath\", \"blobPath2\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      )\n  );", "modifier": "private static final", "type": "List<DataSegment>", "declarator": "SEGMENTS = ImmutableList.of(\n      new DataSegment(\n          \"test\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container1\", \"blobPath\", \"blobPath1\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      ),\n      new DataSegment(\n          \"test\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container2\", \"blobPath\", \"blobPath2\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      )\n  )", "var_name": "SEGMENTS"}, {"original_string": "private static final Map<String, ImmutableDruidDataSource> DATA_SOURCES = ImmutableMap.of(\n      \"src1\", new ImmutableDruidDataSource(\"src1\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(0))),\n      \"src2\", new ImmutableDruidDataSource(\"src2\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(0)))\n  );", "modifier": "private static final", "type": "Map<String, ImmutableDruidDataSource>", "declarator": "DATA_SOURCES = ImmutableMap.of(\n      \"src1\", new ImmutableDruidDataSource(\"src1\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(0))),\n      \"src2\", new ImmutableDruidDataSource(\"src2\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(0)))\n  )", "var_name": "DATA_SOURCES"}, {"original_string": "private static final ServerHolder NEW_REALTIME = new ServerHolder(\n      new ImmutableDruidServer(\n          new DruidServerMetadata(\"name1\", \"host2\", null, 100L, ServerType.REALTIME, \"tier1\", 0),\n          0L,\n          ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n          1\n      ),\n      new LoadQueuePeonTester()\n  );", "modifier": "private static final", "type": "ServerHolder", "declarator": "NEW_REALTIME = new ServerHolder(\n      new ImmutableDruidServer(\n          new DruidServerMetadata(\"name1\", \"host2\", null, 100L, ServerType.REALTIME, \"tier1\", 0),\n          0L,\n          ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n          1\n      ),\n      new LoadQueuePeonTester()\n  )", "var_name": "NEW_REALTIME"}, {"original_string": "private static final ServerHolder NEW_HISTORICAL = new ServerHolder(\n      new ImmutableDruidServer(\n          new DruidServerMetadata(\"name1\", \"host2\", null, 100L, ServerType.HISTORICAL, \"tier1\", 0),\n          0L,\n          ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n          1\n      ),\n      new LoadQueuePeonTester()\n  );", "modifier": "private static final", "type": "ServerHolder", "declarator": "NEW_HISTORICAL = new ServerHolder(\n      new ImmutableDruidServer(\n          new DruidServerMetadata(\"name1\", \"host2\", null, 100L, ServerType.HISTORICAL, \"tier1\", 0),\n          0L,\n          ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n          1\n      ),\n      new LoadQueuePeonTester()\n  )", "var_name": "NEW_HISTORICAL"}, {"original_string": "private DruidCluster cluster;", "modifier": "private", "type": "DruidCluster", "declarator": "cluster", "var_name": "cluster"}], "file": "server/src/test/java/org/apache/druid/server/coordinator/DruidClusterTest.java"}, "test_case": {"identifier": "testIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsEmpty()\n  {\n    final DruidCluster emptyCluster = new DruidCluster();\n    Assert.assertFalse(cluster.isEmpty());\n    Assert.assertTrue(emptyCluster.isEmpty());\n  }", "signature": "void testIsEmpty()", "full_signature": "@Test public void testIsEmpty()", "class_method_signature": "DruidClusterTest.testIsEmpty()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isEmpty", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "DruidCluster", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<ServerHolder> realtimes;", "modifier": "private final", "type": "Set<ServerHolder>", "declarator": "realtimes", "var_name": "realtimes"}, {"original_string": "private final Map<String, NavigableSet<ServerHolder>> historicals;", "modifier": "private final", "type": "Map<String, NavigableSet<ServerHolder>>", "declarator": "historicals", "var_name": "historicals"}, {"original_string": "private final Set<ServerHolder> brokers;", "modifier": "private final", "type": "Set<ServerHolder>", "declarator": "brokers", "var_name": "brokers"}], "methods": [{"identifier": "createDruidClusterFromBuilderInTest", "parameters": "(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "modifiers": "@VisibleForTesting static", "return": "DruidCluster", "signature": "DruidCluster createDruidClusterFromBuilderInTest(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "full_signature": "@VisibleForTesting static DruidCluster createDruidClusterFromBuilderInTest(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "class_method_signature": "DruidCluster.createDruidClusterFromBuilderInTest(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "testcase": false, "constructor": false}, {"identifier": "DruidCluster", "parameters": "()", "modifiers": "public", "return": "", "signature": " DruidCluster()", "full_signature": "public  DruidCluster()", "class_method_signature": "DruidCluster.DruidCluster()", "testcase": false, "constructor": true}, {"identifier": "DruidCluster", "parameters": "(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "modifiers": "private", "return": "", "signature": " DruidCluster(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "full_signature": "private  DruidCluster(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "class_method_signature": "DruidCluster.DruidCluster(\n      @Nullable Set<ServerHolder> realtimes,\n      Map<String, Iterable<ServerHolder>> historicals,\n      @Nullable Set<ServerHolder> brokers\n  )", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(ServerHolder serverHolder)", "modifiers": "public", "return": "void", "signature": "void add(ServerHolder serverHolder)", "full_signature": "public void add(ServerHolder serverHolder)", "class_method_signature": "DruidCluster.add(ServerHolder serverHolder)", "testcase": false, "constructor": false}, {"identifier": "addRealtime", "parameters": "(ServerHolder serverHolder)", "modifiers": "private", "return": "void", "signature": "void addRealtime(ServerHolder serverHolder)", "full_signature": "private void addRealtime(ServerHolder serverHolder)", "class_method_signature": "DruidCluster.addRealtime(ServerHolder serverHolder)", "testcase": false, "constructor": false}, {"identifier": "addHistorical", "parameters": "(ServerHolder serverHolder)", "modifiers": "private", "return": "void", "signature": "void addHistorical(ServerHolder serverHolder)", "full_signature": "private void addHistorical(ServerHolder serverHolder)", "class_method_signature": "DruidCluster.addHistorical(ServerHolder serverHolder)", "testcase": false, "constructor": false}, {"identifier": "addBroker", "parameters": "(ServerHolder serverHolder)", "modifiers": "private", "return": "void", "signature": "void addBroker(ServerHolder serverHolder)", "full_signature": "private void addBroker(ServerHolder serverHolder)", "class_method_signature": "DruidCluster.addBroker(ServerHolder serverHolder)", "testcase": false, "constructor": false}, {"identifier": "getRealtimes", "parameters": "()", "modifiers": "public", "return": "Set<ServerHolder>", "signature": "Set<ServerHolder> getRealtimes()", "full_signature": "public Set<ServerHolder> getRealtimes()", "class_method_signature": "DruidCluster.getRealtimes()", "testcase": false, "constructor": false}, {"identifier": "getHistoricals", "parameters": "()", "modifiers": "public", "return": "Map<String, NavigableSet<ServerHolder>>", "signature": "Map<String, NavigableSet<ServerHolder>> getHistoricals()", "full_signature": "public Map<String, NavigableSet<ServerHolder>> getHistoricals()", "class_method_signature": "DruidCluster.getHistoricals()", "testcase": false, "constructor": false}, {"identifier": "getBrokers", "parameters": "()", "modifiers": "public", "return": "Set<ServerHolder>", "signature": "Set<ServerHolder> getBrokers()", "full_signature": "public Set<ServerHolder> getBrokers()", "class_method_signature": "DruidCluster.getBrokers()", "testcase": false, "constructor": false}, {"identifier": "getTierNames", "parameters": "()", "modifiers": "public", "return": "Iterable<String>", "signature": "Iterable<String> getTierNames()", "full_signature": "public Iterable<String> getTierNames()", "class_method_signature": "DruidCluster.getTierNames()", "testcase": false, "constructor": false}, {"identifier": "getHistoricalsByTier", "parameters": "(String tier)", "modifiers": "public", "return": "NavigableSet<ServerHolder>", "signature": "NavigableSet<ServerHolder> getHistoricalsByTier(String tier)", "full_signature": "public NavigableSet<ServerHolder> getHistoricalsByTier(String tier)", "class_method_signature": "DruidCluster.getHistoricalsByTier(String tier)", "testcase": false, "constructor": false}, {"identifier": "getAllServers", "parameters": "()", "modifiers": "public", "return": "Collection<ServerHolder>", "signature": "Collection<ServerHolder> getAllServers()", "full_signature": "public Collection<ServerHolder> getAllServers()", "class_method_signature": "DruidCluster.getAllServers()", "testcase": false, "constructor": false}, {"identifier": "getSortedHistoricalsByTier", "parameters": "()", "modifiers": "public", "return": "Iterable<NavigableSet<ServerHolder>>", "signature": "Iterable<NavigableSet<ServerHolder>> getSortedHistoricalsByTier()", "full_signature": "public Iterable<NavigableSet<ServerHolder>> getSortedHistoricalsByTier()", "class_method_signature": "DruidCluster.getSortedHistoricalsByTier()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DruidCluster.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "hasHistoricals", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasHistoricals()", "full_signature": "public boolean hasHistoricals()", "class_method_signature": "DruidCluster.hasHistoricals()", "testcase": false, "constructor": false}, {"identifier": "hasRealtimes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasRealtimes()", "full_signature": "public boolean hasRealtimes()", "class_method_signature": "DruidCluster.hasRealtimes()", "testcase": false, "constructor": false}, {"identifier": "hasBrokers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasBrokers()", "full_signature": "public boolean hasBrokers()", "class_method_signature": "DruidCluster.hasBrokers()", "testcase": false, "constructor": false}, {"identifier": "hasTier", "parameters": "(String tier)", "modifiers": "public", "return": "boolean", "signature": "boolean hasTier(String tier)", "full_signature": "public boolean hasTier(String tier)", "class_method_signature": "DruidCluster.hasTier(String tier)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/coordinator/DruidCluster.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isEmpty()\n  {\n    return historicals.isEmpty() && realtimes.isEmpty() && brokers.isEmpty();\n  }", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DruidCluster.isEmpty()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "isEmpty"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}