{"test_class": {"identifier": "TimestampParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "core/src/test/java/org/apache/druid/java/util/common/parsers/TimestampParserTest.java"}, "test_case": {"identifier": "testTimeStampParserWithLongTimeZone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTimeStampParserWithLongTimeZone()\n  {\n\n    long millis1 = new DateTime(1994, 11, 9, 4, 0, DateTimeZone.forOffsetHours(-8)).getMillis();\n    long millis2 = new DateTime(1994, 11, 9, 4, 0, DateTimeZone.forOffsetHours(-6)).getMillis();\n\n    Function<String, DateTime> parser = TimestampParser.createTimestampParser(\"EEE MMM dd HH:mm:ss zZ z yyyy\");\n    Assert.assertEquals(millis1, parser.apply(\"Wed Nov 9 04:00:00 GMT-0800 PST 1994\").getMillis());\n    Assert.assertEquals(millis2, parser.apply(\"Wed Nov 9 04:00:00 GMT-0600 CST 1994\").getMillis());\n    Assert.assertEquals(millis1, parser.apply(\"Wed Nov 9 04:00:00 UTC-0800 PST 1994\").getMillis());\n    Assert.assertEquals(millis2, parser.apply(\"Wed Nov 9 04:00:00 UTC-0600 CST 1994\").getMillis());\n\n    parser = TimestampParser.createTimestampParser(\"EEE MMM dd HH:mm:ss zZ yyyy\");\n    Assert.assertEquals(millis1, parser.apply(\"Wed Nov 9 04:00:00 GMT-0800 1994\").getMillis());\n    Assert.assertEquals(millis2, parser.apply(\"Wed Nov 9 04:00:00 GMT-0600 1994\").getMillis());\n    Assert.assertEquals(millis1, parser.apply(\"Wed Nov 9 04:00:00 UTC-0800 1994\").getMillis());\n    Assert.assertEquals(millis2, parser.apply(\"Wed Nov 9 04:00:00 UTC-0600 1994\").getMillis());\n  }", "signature": "void testTimeStampParserWithLongTimeZone()", "full_signature": "@Test public void testTimeStampParserWithLongTimeZone()", "class_method_signature": "TimestampParserTest.testTimeStampParserWithLongTimeZone()", "testcase": true, "constructor": false, "invocations": ["getMillis", "forOffsetHours", "getMillis", "forOffsetHours", "createTimestampParser", "assertEquals", "getMillis", "apply", "assertEquals", "getMillis", "apply", "assertEquals", "getMillis", "apply", "assertEquals", "getMillis", "apply", "createTimestampParser", "assertEquals", "getMillis", "apply", "assertEquals", "getMillis", "apply", "assertEquals", "getMillis", "apply", "assertEquals", "getMillis", "apply"]}, "focal_class": {"identifier": "TimestampParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createTimestampParser", "parameters": "(\n      final String format\n  )", "modifiers": "public static", "return": "Function<String, DateTime>", "signature": "Function<String, DateTime> createTimestampParser(\n      final String format\n  )", "full_signature": "public static Function<String, DateTime> createTimestampParser(\n      final String format\n  )", "class_method_signature": "TimestampParser.createTimestampParser(\n      final String format\n  )", "testcase": false, "constructor": false}, {"identifier": "createNumericTimestampParser", "parameters": "(\n      final String format\n  )", "modifiers": "public static", "return": "Function<Number, DateTime>", "signature": "Function<Number, DateTime> createNumericTimestampParser(\n      final String format\n  )", "full_signature": "public static Function<Number, DateTime> createNumericTimestampParser(\n      final String format\n  )", "class_method_signature": "TimestampParser.createNumericTimestampParser(\n      final String format\n  )", "testcase": false, "constructor": false}, {"identifier": "createObjectTimestampParser", "parameters": "(\n      final String format\n  )", "modifiers": "public static", "return": "Function<Object, DateTime>", "signature": "Function<Object, DateTime> createObjectTimestampParser(\n      final String format\n  )", "full_signature": "public static Function<Object, DateTime> createObjectTimestampParser(\n      final String format\n  )", "class_method_signature": "TimestampParser.createObjectTimestampParser(\n      final String format\n  )", "testcase": false, "constructor": false}, {"identifier": "isNumericFormat", "parameters": "(String format)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNumericFormat(String format)", "full_signature": "private static boolean isNumericFormat(String format)", "class_method_signature": "TimestampParser.isNumericFormat(String format)", "testcase": false, "constructor": false}, {"identifier": "createAutoParser", "parameters": "()", "modifiers": "private static", "return": "DateTimeFormatter", "signature": "DateTimeFormatter createAutoParser()", "full_signature": "private static DateTimeFormatter createAutoParser()", "class_method_signature": "TimestampParser.createAutoParser()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/java/util/common/parsers/TimestampParser.java"}, "focal_method": {"identifier": "createTimestampParser", "parameters": "(\n      final String format\n  )", "modifiers": "public static", "return": "Function<String, DateTime>", "body": "public static Function<String, DateTime> createTimestampParser(\n      final String format\n  )\n  {\n    if (\"auto\".equalsIgnoreCase(format)) {\n      // Could be iso or millis\n      final DateTimes.UtcFormatter parser = DateTimes.wrapFormatter(createAutoParser());\n      return (String input) -> {\n        Preconditions.checkArgument(!Strings.isNullOrEmpty(input), \"null timestamp\");\n\n        for (int i = 0; i < input.length(); i++) {\n          if (input.charAt(i) < '0' || input.charAt(i) > '9') {\n            input = ParserUtils.stripQuotes(input);\n            int lastIndex = input.lastIndexOf(' ');\n            DateTimeZone timeZone = DateTimeZone.UTC;\n            if (lastIndex > 0) {\n              DateTimeZone timeZoneFromString = ParserUtils.getDateTimeZone(input.substring(lastIndex + 1));\n              if (timeZoneFromString != null) {\n                timeZone = timeZoneFromString;\n                input = input.substring(0, lastIndex);\n              }\n            }\n\n            return parser.parse(input).withZone(timeZone);\n          }\n        }\n\n        return DateTimes.utc(Long.parseLong(input));\n      };\n    } else if (\"iso\".equalsIgnoreCase(format)) {\n      return input -> {\n        Preconditions.checkArgument(!Strings.isNullOrEmpty(input), \"null timestamp\");\n        return DateTimes.of(ParserUtils.stripQuotes(input));\n      };\n    } else if (\"posix\".equalsIgnoreCase(format)\n               || \"millis\".equalsIgnoreCase(format)\n               || \"micro\".equalsIgnoreCase(format)\n               || \"nano\".equalsIgnoreCase(format)) {\n      final Function<Number, DateTime> numericFun = createNumericTimestampParser(format);\n      return input -> {\n        Preconditions.checkArgument(!Strings.isNullOrEmpty(input), \"null timestamp\");\n        return numericFun.apply(Long.parseLong(ParserUtils.stripQuotes(input)));\n      };\n    } else if (\"ruby\".equalsIgnoreCase(format)) {\n      final Function<Number, DateTime> numericFun = createNumericTimestampParser(format);\n      return input -> {\n        Preconditions.checkArgument(!Strings.isNullOrEmpty(input), \"null timestamp\");\n        return numericFun.apply(Double.parseDouble(ParserUtils.stripQuotes(input)));\n      };\n    } else {\n      try {\n        final DateTimes.UtcFormatter formatter = DateTimes.wrapFormatter(DateTimeFormat.forPattern(format));\n        return input -> {\n          Preconditions.checkArgument(!Strings.isNullOrEmpty(input), \"null timestamp\");\n          return formatter.parse(ParserUtils.stripQuotes(input));\n        };\n      }\n      catch (Exception e) {\n        throw new IAE(e, \"Unable to parse timestamps with format [%s]\", format);\n      }\n    }\n  }", "signature": "Function<String, DateTime> createTimestampParser(\n      final String format\n  )", "full_signature": "public static Function<String, DateTime> createTimestampParser(\n      final String format\n  )", "class_method_signature": "TimestampParser.createTimestampParser(\n      final String format\n  )", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "wrapFormatter", "createAutoParser", "checkArgument", "isNullOrEmpty", "length", "charAt", "charAt", "stripQuotes", "lastIndexOf", "getDateTimeZone", "substring", "substring", "withZone", "parse", "utc", "parseLong", "equalsIgnoreCase", "checkArgument", "isNullOrEmpty", "of", "stripQuotes", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "createNumericTimestampParser", "checkArgument", "isNullOrEmpty", "apply", "parseLong", "stripQuotes", "equalsIgnoreCase", "createNumericTimestampParser", "checkArgument", "isNullOrEmpty", "apply", "parseDouble", "stripQuotes", "wrapFormatter", "forPattern", "checkArgument", "isNullOrEmpty", "parse", "stripQuotes"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}