{"test_class": {"identifier": "VersionedIntervalTimelineTest", "superclass": "extends VersionedIntervalTimelineTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java"}, "test_case": {"identifier": "testIterateAllObjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIterateAllObjects()\n  {\n    add(\"2011-01-01/2011-01-10\", \"1\", 1);\n    add(\"2011-01-01/2011-01-10\", \"2\", 3);\n\n    Collection<OvershadowableInteger> overshadowableIntegers = timeline.iterateAllObjects();\n    Assert.assertEquals(2, overshadowableIntegers.size());\n    // Tests that the \"iteration\" size of the returned collection is 2 (the \"reported\" size from size() method may be\n    // deceptive).\n    Assert.assertEquals(2, Lists.newArrayList(overshadowableIntegers.iterator()).size());\n  }", "signature": "void testIterateAllObjects()", "full_signature": "@Test public void testIterateAllObjects()", "class_method_signature": "VersionedIntervalTimelineTest.testIterateAllObjects()", "testcase": true, "constructor": false, "invocations": ["add", "add", "iterateAllObjects", "assertEquals", "size", "assertEquals", "size", "newArrayList", "iterator"]}, "focal_class": {"identifier": "VersionedIntervalTimeline", "superclass": "", "interfaces": "implements TimelineLookup<VersionType, ObjectType>", "fields": [{"original_string": "private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock(true);", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock(true)", "var_name": "lock"}, {"original_string": "private final NavigableMap<Interval, TimelineEntry> completePartitionsTimeline = new TreeMap<>(\n      Comparators.intervalsByStartThenEnd()\n  );", "modifier": "private final", "type": "NavigableMap<Interval, TimelineEntry>", "declarator": "completePartitionsTimeline = new TreeMap<>(\n      Comparators.intervalsByStartThenEnd()\n  )", "var_name": "completePartitionsTimeline"}, {"original_string": "@VisibleForTesting\n  final NavigableMap<Interval, TimelineEntry> incompletePartitionsTimeline = new TreeMap<>(\n      Comparators.intervalsByStartThenEnd()\n  );", "modifier": "@VisibleForTesting\n  final", "type": "NavigableMap<Interval, TimelineEntry>", "declarator": "incompletePartitionsTimeline = new TreeMap<>(\n      Comparators.intervalsByStartThenEnd()\n  )", "var_name": "incompletePartitionsTimeline"}, {"original_string": "private final Map<Interval, TreeMap<VersionType, TimelineEntry>> allTimelineEntries = new HashMap<>();", "modifier": "private final", "type": "Map<Interval, TreeMap<VersionType, TimelineEntry>>", "declarator": "allTimelineEntries = new HashMap<>()", "var_name": "allTimelineEntries"}, {"original_string": "private final AtomicInteger numObjects = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "numObjects = new AtomicInteger()", "var_name": "numObjects"}, {"original_string": "private final Comparator<? super VersionType> versionComparator;", "modifier": "private final", "type": "Comparator<? super VersionType>", "declarator": "versionComparator", "var_name": "versionComparator"}], "methods": [{"identifier": "forSegments", "parameters": "(Iterable<DataSegment> segments)", "modifiers": "public static", "return": "VersionedIntervalTimeline<String, DataSegment>", "signature": "VersionedIntervalTimeline<String, DataSegment> forSegments(Iterable<DataSegment> segments)", "full_signature": "public static VersionedIntervalTimeline<String, DataSegment> forSegments(Iterable<DataSegment> segments)", "class_method_signature": "VersionedIntervalTimeline.forSegments(Iterable<DataSegment> segments)", "testcase": false, "constructor": false}, {"identifier": "forSegments", "parameters": "(Iterator<DataSegment> segments)", "modifiers": "public static", "return": "VersionedIntervalTimeline<String, DataSegment>", "signature": "VersionedIntervalTimeline<String, DataSegment> forSegments(Iterator<DataSegment> segments)", "full_signature": "public static VersionedIntervalTimeline<String, DataSegment> forSegments(Iterator<DataSegment> segments)", "class_method_signature": "VersionedIntervalTimeline.forSegments(Iterator<DataSegment> segments)", "testcase": false, "constructor": false}, {"identifier": "VersionedIntervalTimeline", "parameters": "(Comparator<? super VersionType> versionComparator)", "modifiers": "public", "return": "", "signature": " VersionedIntervalTimeline(Comparator<? super VersionType> versionComparator)", "full_signature": "public  VersionedIntervalTimeline(Comparator<? super VersionType> versionComparator)", "class_method_signature": "VersionedIntervalTimeline.VersionedIntervalTimeline(Comparator<? super VersionType> versionComparator)", "testcase": false, "constructor": true}, {"identifier": "addSegments", "parameters": "(\n      VersionedIntervalTimeline<String, DataSegment> timeline,\n      Iterator<DataSegment> segments\n  )", "modifiers": "public static", "return": "void", "signature": "void addSegments(\n      VersionedIntervalTimeline<String, DataSegment> timeline,\n      Iterator<DataSegment> segments\n  )", "full_signature": "public static void addSegments(\n      VersionedIntervalTimeline<String, DataSegment> timeline,\n      Iterator<DataSegment> segments\n  )", "class_method_signature": "VersionedIntervalTimeline.addSegments(\n      VersionedIntervalTimeline<String, DataSegment> timeline,\n      Iterator<DataSegment> segments\n  )", "testcase": false, "constructor": false}, {"identifier": "getAllTimelineEntries", "parameters": "()", "modifiers": "public", "return": "Map<Interval, TreeMap<VersionType, TimelineEntry>>", "signature": "Map<Interval, TreeMap<VersionType, TimelineEntry>> getAllTimelineEntries()", "full_signature": "public Map<Interval, TreeMap<VersionType, TimelineEntry>> getAllTimelineEntries()", "class_method_signature": "VersionedIntervalTimeline.getAllTimelineEntries()", "testcase": false, "constructor": false}, {"identifier": "iterateAllObjects", "parameters": "()", "modifiers": "public", "return": "Collection<ObjectType>", "signature": "Collection<ObjectType> iterateAllObjects()", "full_signature": "public Collection<ObjectType> iterateAllObjects()", "class_method_signature": "VersionedIntervalTimeline.iterateAllObjects()", "testcase": false, "constructor": false}, {"identifier": "getNumObjects", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumObjects()", "full_signature": "public int getNumObjects()", "class_method_signature": "VersionedIntervalTimeline.getNumObjects()", "testcase": false, "constructor": false}, {"identifier": "findNonOvershadowedObjectsInInterval", "parameters": "(Interval interval, Partitions completeness)", "modifiers": "public", "return": "Set<ObjectType>", "signature": "Set<ObjectType> findNonOvershadowedObjectsInInterval(Interval interval, Partitions completeness)", "full_signature": "public Set<ObjectType> findNonOvershadowedObjectsInInterval(Interval interval, Partitions completeness)", "class_method_signature": "VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval(Interval interval, Partitions completeness)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Interval interval, VersionType version, PartitionChunk<ObjectType> object)", "modifiers": "public", "return": "void", "signature": "void add(final Interval interval, VersionType version, PartitionChunk<ObjectType> object)", "full_signature": "public void add(final Interval interval, VersionType version, PartitionChunk<ObjectType> object)", "class_method_signature": "VersionedIntervalTimeline.add(final Interval interval, VersionType version, PartitionChunk<ObjectType> object)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(\n      final Iterator<PartitionChunk<ObjectType>> objects,\n      final Function<ObjectType, Interval> intervalFunction,\n      final Function<ObjectType, VersionType> versionFunction\n  )", "modifiers": "private", "return": "void", "signature": "void addAll(\n      final Iterator<PartitionChunk<ObjectType>> objects,\n      final Function<ObjectType, Interval> intervalFunction,\n      final Function<ObjectType, VersionType> versionFunction\n  )", "full_signature": "private void addAll(\n      final Iterator<PartitionChunk<ObjectType>> objects,\n      final Function<ObjectType, Interval> intervalFunction,\n      final Function<ObjectType, VersionType> versionFunction\n  )", "class_method_signature": "VersionedIntervalTimeline.addAll(\n      final Iterator<PartitionChunk<ObjectType>> objects,\n      final Function<ObjectType, Interval> intervalFunction,\n      final Function<ObjectType, VersionType> versionFunction\n  )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Interval interval, VersionType version, PartitionChunk<ObjectType> chunk)", "modifiers": "@Nullable public", "return": "PartitionChunk<ObjectType>", "signature": "PartitionChunk<ObjectType> remove(Interval interval, VersionType version, PartitionChunk<ObjectType> chunk)", "full_signature": "@Nullable public PartitionChunk<ObjectType> remove(Interval interval, VersionType version, PartitionChunk<ObjectType> chunk)", "class_method_signature": "VersionedIntervalTimeline.remove(Interval interval, VersionType version, PartitionChunk<ObjectType> chunk)", "testcase": false, "constructor": false}, {"identifier": "findEntry", "parameters": "(Interval interval, VersionType version)", "modifiers": "@Override @Nullable public", "return": "PartitionHolder<ObjectType>", "signature": "PartitionHolder<ObjectType> findEntry(Interval interval, VersionType version)", "full_signature": "@Override @Nullable public PartitionHolder<ObjectType> findEntry(Interval interval, VersionType version)", "class_method_signature": "VersionedIntervalTimeline.findEntry(Interval interval, VersionType version)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(Interval interval)", "modifiers": "@Override public", "return": "List<TimelineObjectHolder<VersionType, ObjectType>>", "signature": "List<TimelineObjectHolder<VersionType, ObjectType>> lookup(Interval interval)", "full_signature": "@Override public List<TimelineObjectHolder<VersionType, ObjectType>> lookup(Interval interval)", "class_method_signature": "VersionedIntervalTimeline.lookup(Interval interval)", "testcase": false, "constructor": false}, {"identifier": "lookupWithIncompletePartitions", "parameters": "(Interval interval)", "modifiers": "@Override public", "return": "List<TimelineObjectHolder<VersionType, ObjectType>>", "signature": "List<TimelineObjectHolder<VersionType, ObjectType>> lookupWithIncompletePartitions(Interval interval)", "full_signature": "@Override public List<TimelineObjectHolder<VersionType, ObjectType>> lookupWithIncompletePartitions(Interval interval)", "class_method_signature": "VersionedIntervalTimeline.lookupWithIncompletePartitions(Interval interval)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "VersionedIntervalTimeline.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "TimelineObjectHolder<VersionType, ObjectType>", "signature": "TimelineObjectHolder<VersionType, ObjectType> first()", "full_signature": "public TimelineObjectHolder<VersionType, ObjectType> first()", "class_method_signature": "VersionedIntervalTimeline.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "public", "return": "TimelineObjectHolder<VersionType, ObjectType>", "signature": "TimelineObjectHolder<VersionType, ObjectType> last()", "full_signature": "public TimelineObjectHolder<VersionType, ObjectType> last()", "class_method_signature": "VersionedIntervalTimeline.last()", "testcase": false, "constructor": false}, {"identifier": "timelineEntryToObjectHolder", "parameters": "(TimelineEntry entry)", "modifiers": "private", "return": "TimelineObjectHolder<VersionType, ObjectType>", "signature": "TimelineObjectHolder<VersionType, ObjectType> timelineEntryToObjectHolder(TimelineEntry entry)", "full_signature": "private TimelineObjectHolder<VersionType, ObjectType> timelineEntryToObjectHolder(TimelineEntry entry)", "class_method_signature": "VersionedIntervalTimeline.timelineEntryToObjectHolder(TimelineEntry entry)", "testcase": false, "constructor": false}, {"identifier": "findFullyOvershadowed", "parameters": "()", "modifiers": "public", "return": "Set<TimelineObjectHolder<VersionType, ObjectType>>", "signature": "Set<TimelineObjectHolder<VersionType, ObjectType>> findFullyOvershadowed()", "full_signature": "public Set<TimelineObjectHolder<VersionType, ObjectType>> findFullyOvershadowed()", "class_method_signature": "VersionedIntervalTimeline.findFullyOvershadowed()", "testcase": false, "constructor": false}, {"identifier": "computeOvershadowedPartitionsTimeline", "parameters": "()", "modifiers": "private", "return": "Map<Interval, Map<VersionType, TimelineEntry>>", "signature": "Map<Interval, Map<VersionType, TimelineEntry>> computeOvershadowedPartitionsTimeline()", "full_signature": "private Map<Interval, Map<VersionType, TimelineEntry>> computeOvershadowedPartitionsTimeline()", "class_method_signature": "VersionedIntervalTimeline.computeOvershadowedPartitionsTimeline()", "testcase": false, "constructor": false}, {"identifier": "isOvershadowed", "parameters": "(Interval interval, VersionType version, ObjectType object)", "modifiers": "public", "return": "boolean", "signature": "boolean isOvershadowed(Interval interval, VersionType version, ObjectType object)", "full_signature": "public boolean isOvershadowed(Interval interval, VersionType version, ObjectType object)", "class_method_signature": "VersionedIntervalTimeline.isOvershadowed(Interval interval, VersionType version, ObjectType object)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry\n  )", "modifiers": "@GuardedBy(\"lock\") private", "return": "void", "signature": "void add(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry\n  )", "full_signature": "@GuardedBy(\"lock\") private void add(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry\n  )", "class_method_signature": "VersionedIntervalTimeline.add(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry\n  )", "testcase": false, "constructor": false}, {"identifier": "addAtKey", "parameters": "(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval key,\n      TimelineEntry entry\n  )", "modifiers": "@GuardedBy(\"lock\") private", "return": "boolean", "signature": "boolean addAtKey(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval key,\n      TimelineEntry entry\n  )", "full_signature": "@GuardedBy(\"lock\") private boolean addAtKey(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval key,\n      TimelineEntry entry\n  )", "class_method_signature": "VersionedIntervalTimeline.addAtKey(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval key,\n      TimelineEntry entry\n  )", "testcase": false, "constructor": false}, {"identifier": "addIntervalToTimeline", "parameters": "(\n      Interval interval,\n      TimelineEntry entry,\n      NavigableMap<Interval, TimelineEntry> timeline\n  )", "modifiers": "@GuardedBy(\"lock\") private", "return": "void", "signature": "void addIntervalToTimeline(\n      Interval interval,\n      TimelineEntry entry,\n      NavigableMap<Interval, TimelineEntry> timeline\n  )", "full_signature": "@GuardedBy(\"lock\") private void addIntervalToTimeline(\n      Interval interval,\n      TimelineEntry entry,\n      NavigableMap<Interval, TimelineEntry> timeline\n  )", "class_method_signature": "VersionedIntervalTimeline.addIntervalToTimeline(\n      Interval interval,\n      TimelineEntry entry,\n      NavigableMap<Interval, TimelineEntry> timeline\n  )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry,\n      boolean incompleteOk\n  )", "modifiers": "@GuardedBy(\"lock\") private", "return": "void", "signature": "void remove(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry,\n      boolean incompleteOk\n  )", "full_signature": "@GuardedBy(\"lock\") private void remove(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry,\n      boolean incompleteOk\n  )", "class_method_signature": "VersionedIntervalTimeline.remove(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      TimelineEntry entry,\n      boolean incompleteOk\n  )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      boolean incompleteOk\n  )", "modifiers": "@GuardedBy(\"lock\") private", "return": "void", "signature": "void remove(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      boolean incompleteOk\n  )", "full_signature": "@GuardedBy(\"lock\") private void remove(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      boolean incompleteOk\n  )", "class_method_signature": "VersionedIntervalTimeline.remove(\n      NavigableMap<Interval, TimelineEntry> timeline,\n      Interval interval,\n      boolean incompleteOk\n  )", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(Interval interval, Partitions completeness)", "modifiers": "@GuardedBy(\"lock\") private", "return": "List<TimelineObjectHolder<VersionType, ObjectType>>", "signature": "List<TimelineObjectHolder<VersionType, ObjectType>> lookup(Interval interval, Partitions completeness)", "full_signature": "@GuardedBy(\"lock\") private List<TimelineObjectHolder<VersionType, ObjectType>> lookup(Interval interval, Partitions completeness)", "class_method_signature": "VersionedIntervalTimeline.lookup(Interval interval, Partitions completeness)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/timeline/VersionedIntervalTimeline.java"}, "focal_method": {"identifier": "iterateAllObjects", "parameters": "()", "modifiers": "public", "return": "Collection<ObjectType>", "body": "public Collection<ObjectType> iterateAllObjects()\n  {\n    return CollectionUtils.createLazyCollectionFromStream(\n        () -> allTimelineEntries\n            .values()\n            .stream()\n            .flatMap((TreeMap<VersionType, TimelineEntry> entryMap) -> entryMap.values().stream())\n            .flatMap((TimelineEntry entry) -> StreamSupport.stream(entry.getPartitionHolder().spliterator(), false))\n            .map(PartitionChunk::getObject),\n        numObjects.get()\n    );\n  }", "signature": "Collection<ObjectType> iterateAllObjects()", "full_signature": "public Collection<ObjectType> iterateAllObjects()", "class_method_signature": "VersionedIntervalTimeline.iterateAllObjects()", "testcase": false, "constructor": false, "invocations": ["createLazyCollectionFromStream", "map", "flatMap", "flatMap", "stream", "values", "stream", "values", "stream", "spliterator", "getPartitionHolder", "get"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}