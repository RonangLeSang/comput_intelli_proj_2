{"test_class": {"identifier": "AllocationMetricCollectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(AllocationMetricCollectorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(AllocationMetricCollectorTest.class)", "var_name": "log"}, {"original_string": "private final List<Thread> threads = new ArrayList<>();", "modifier": "private final", "type": "List<Thread>", "declarator": "threads = new ArrayList<>()", "var_name": "threads"}, {"original_string": "private final int objectHeader64BitSize = 16;", "modifier": "private final", "type": "int", "declarator": "objectHeader64BitSize = 16", "var_name": "objectHeader64BitSize"}], "file": "core/src/test/java/org/apache/druid/java/util/metrics/AllocationMetricCollectorTest.java"}, "test_case": {"identifier": "testDelta", "parameters": "()", "modifiers": "@SuppressWarnings(\"OptionalIsPresent\") @Test public", "return": "void", "body": "@SuppressWarnings(\"OptionalIsPresent\")\n  @Test\n  public void testDelta() throws InterruptedException\n  {\n    AllocationMetricCollector collector = AllocationMetricCollectors.getAllocationMetricCollector();\n    if (collector == null) {\n      return;\n    }\n\n    long delta = collector.calculateDelta();\n    Assert.assertNotNull(delta);\n    Assert.assertTrue(delta > 0);\n    log.info(\"First delta: %s\", delta);\n\n    int generatedSize2 = generateObjectsConcurrently(1000);\n    long delta2 = collector.calculateDelta();\n    Assert.assertTrue(delta2 > generatedSize2);\n    log.info(\"Second delta: %s\", delta2);\n\n    int generatedSize3 = generateObjectsConcurrently(100000);\n    long delta3 = collector.calculateDelta();\n    Assert.assertTrue(delta3 > generatedSize3);\n    log.info(\"Third delta: %s\", delta3);\n  }", "signature": "void testDelta()", "full_signature": "@SuppressWarnings(\"OptionalIsPresent\") @Test public void testDelta()", "class_method_signature": "AllocationMetricCollectorTest.testDelta()", "testcase": true, "constructor": false, "invocations": ["getAllocationMetricCollector", "calculateDelta", "assertNotNull", "assertTrue", "info", "generateObjectsConcurrently", "calculateDelta", "assertTrue", "info", "generateObjectsConcurrently", "calculateDelta", "assertTrue", "info"]}, "focal_class": {"identifier": "AllocationMetricCollector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(AllocationMetricCollector.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(AllocationMetricCollector.class)", "var_name": "log"}, {"original_string": "private static final int NO_DATA = -1;", "modifier": "private static final", "type": "int", "declarator": "NO_DATA = -1", "var_name": "NO_DATA"}, {"original_string": "private final Method getThreadAllocatedBytes;", "modifier": "private final", "type": "Method", "declarator": "getThreadAllocatedBytes", "var_name": "getThreadAllocatedBytes"}, {"original_string": "private final ThreadMXBean threadMXBean;", "modifier": "private final", "type": "ThreadMXBean", "declarator": "threadMXBean", "var_name": "threadMXBean"}, {"original_string": "private Long2LongMap previousResults;", "modifier": "private", "type": "Long2LongMap", "declarator": "previousResults", "var_name": "previousResults"}], "methods": [{"identifier": "AllocationMetricCollector", "parameters": "(Method method, ThreadMXBean threadMXBean)", "modifiers": "", "return": "", "signature": " AllocationMetricCollector(Method method, ThreadMXBean threadMXBean)", "full_signature": "  AllocationMetricCollector(Method method, ThreadMXBean threadMXBean)", "class_method_signature": "AllocationMetricCollector.AllocationMetricCollector(Method method, ThreadMXBean threadMXBean)", "testcase": false, "constructor": true}, {"identifier": "calculateDelta", "parameters": "()", "modifiers": "", "return": "long", "signature": "long calculateDelta()", "full_signature": " long calculateDelta()", "class_method_signature": "AllocationMetricCollector.calculateDelta()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/java/util/metrics/AllocationMetricCollector.java"}, "focal_method": {"identifier": "calculateDelta", "parameters": "()", "modifiers": "", "return": "long", "body": "long calculateDelta()\n  {\n    try {\n      long[] allThreadIds = threadMXBean.getAllThreadIds();\n      // the call time depends on number of threads, for 500 threads the estimated time is 4 ms\n      long[] bytes = (long[]) getThreadAllocatedBytes.invoke(threadMXBean, (Object) allThreadIds);\n      long sum = 0;\n      Long2LongMap newResults = new Long2LongOpenHashMap();\n      newResults.defaultReturnValue(NO_DATA);\n      for (int i = 0; i < allThreadIds.length; i++) {\n        long threadId = allThreadIds[i];\n        long previous = previousResults.get(threadId);\n        long current = bytes[i];\n        newResults.put(threadId, current);\n        // a) some threads can be terminated and their ids won't be present\n        // b) if new threads ids can collide with terminated threads ids then the current allocation can be lesser than\n        // before\n        if (previous == NO_DATA || previous > current) {\n          sum += current;\n        } else {\n          sum += current - previous;\n        }\n      }\n      previousResults = newResults;\n      return sum;\n    }\n    catch (ReflectiveOperationException e) {\n      log.error(e, \"Cannot calculate delta\"); // it doesn't make sense after initialization is complete\n    }\n    return 0;\n  }", "signature": "long calculateDelta()", "full_signature": " long calculateDelta()", "class_method_signature": "AllocationMetricCollector.calculateDelta()", "testcase": false, "constructor": false, "invocations": ["getAllThreadIds", "invoke", "defaultReturnValue", "get", "put", "error"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}