{"test_class": {"identifier": "VarianceObjectVectorAggregatorTest", "superclass": "extends InitializedNullHandlingTest", "interfaces": "", "fields": [{"original_string": "private static final int START_ROW = 1;", "modifier": "private static final", "type": "int", "declarator": "START_ROW = 1", "var_name": "START_ROW"}, {"original_string": "private static final int POSITION = 2;", "modifier": "private static final", "type": "int", "declarator": "POSITION = 2", "var_name": "POSITION"}, {"original_string": "private static final int UNINIT_POSITION = 512;", "modifier": "private static final", "type": "int", "declarator": "UNINIT_POSITION = 512", "var_name": "UNINIT_POSITION"}, {"original_string": "private static final double EPSILON = 1e-10;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 1e-10", "var_name": "EPSILON"}, {"original_string": "private static final VarianceAggregatorCollector[] VALUES = new VarianceAggregatorCollector[]{\n      new VarianceAggregatorCollector(1, 7.8, 0),\n      new VarianceAggregatorCollector(1, 11, 0),\n      new VarianceAggregatorCollector(1, 23.67, 0),\n      null,\n      new VarianceAggregatorCollector(2, 183, 1984.5)\n  };", "modifier": "private static final", "type": "VarianceAggregatorCollector[]", "declarator": "VALUES = new VarianceAggregatorCollector[]{\n      new VarianceAggregatorCollector(1, 7.8, 0),\n      new VarianceAggregatorCollector(1, 11, 0),\n      new VarianceAggregatorCollector(1, 23.67, 0),\n      null,\n      new VarianceAggregatorCollector(2, 183, 1984.5)\n  }", "var_name": "VALUES"}, {"original_string": "private static final boolean[] NULLS = new boolean[]{false, false, true, true, false};", "modifier": "private static final", "type": "boolean[]", "declarator": "NULLS = new boolean[]{false, false, true, true, false}", "var_name": "NULLS"}, {"original_string": "@Mock\n  private VectorObjectSelector selector;", "modifier": "@Mock\n  private", "type": "VectorObjectSelector", "declarator": "selector", "var_name": "selector"}, {"original_string": "private ByteBuffer buf;", "modifier": "private", "type": "ByteBuffer", "declarator": "buf", "var_name": "buf"}, {"original_string": "private VarianceObjectVectorAggregator target;", "modifier": "private", "type": "VarianceObjectVectorAggregator", "declarator": "target", "var_name": "target"}], "file": "extensions-core/stats/src/test/java/org/apache/druid/query/aggregation/variance/VarianceObjectVectorAggregatorTest.java"}, "test_case": {"identifier": "aggregateBatchWithoutRows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void aggregateBatchWithoutRows()\n  {\n    int[] positions = new int[]{0, 43, 70};\n    int positionOffset = 2;\n    clearBufferForPositions(positionOffset, positions);\n    target.aggregate(buf, 3, positions, null, positionOffset);\n    for (int i = 0; i < positions.length; i++) {\n      VarianceAggregatorCollector collector = VarianceBufferAggregator.getVarianceCollector(\n          buf,\n          positions[i] + positionOffset\n      );\n      Assert.assertEquals(VALUES[i], collector);\n    }\n  }", "signature": "void aggregateBatchWithoutRows()", "full_signature": "@Test public void aggregateBatchWithoutRows()", "class_method_signature": "VarianceObjectVectorAggregatorTest.aggregateBatchWithoutRows()", "testcase": true, "constructor": false, "invocations": ["clearBufferForPositions", "aggregate", "getVarianceCollector", "assertEquals"]}, "focal_class": {"identifier": "VarianceObjectVectorAggregator", "superclass": "", "interfaces": "implements VectorAggregator", "fields": [{"original_string": "private final VectorObjectSelector selector;", "modifier": "private final", "type": "VectorObjectSelector", "declarator": "selector", "var_name": "selector"}], "methods": [{"identifier": "VarianceObjectVectorAggregator", "parameters": "(VectorObjectSelector selector)", "modifiers": "public", "return": "", "signature": " VarianceObjectVectorAggregator(VectorObjectSelector selector)", "full_signature": "public  VarianceObjectVectorAggregator(VectorObjectSelector selector)", "class_method_signature": "VarianceObjectVectorAggregator.VarianceObjectVectorAggregator(VectorObjectSelector selector)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ByteBuffer buf, int position)", "modifiers": "@Override public", "return": "void", "signature": "void init(ByteBuffer buf, int position)", "full_signature": "@Override public void init(ByteBuffer buf, int position)", "class_method_signature": "VarianceObjectVectorAggregator.init(ByteBuffer buf, int position)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(ByteBuffer buf, int position, int startRow, int endRow)", "modifiers": "@Override public", "return": "void", "signature": "void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "full_signature": "@Override public void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "class_method_signature": "VarianceObjectVectorAggregator.aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "modifiers": "@Override public", "return": "void", "signature": "void aggregate(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "full_signature": "@Override public void aggregate(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "class_method_signature": "VarianceObjectVectorAggregator.aggregate(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ByteBuffer buf, int position)", "modifiers": "@Nullable @Override public", "return": "VarianceAggregatorCollector", "signature": "VarianceAggregatorCollector get(ByteBuffer buf, int position)", "full_signature": "@Nullable @Override public VarianceAggregatorCollector get(ByteBuffer buf, int position)", "class_method_signature": "VarianceObjectVectorAggregator.get(ByteBuffer buf, int position)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "VarianceObjectVectorAggregator.close()", "testcase": false, "constructor": false}], "file": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceObjectVectorAggregator.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(ByteBuffer buf, int position, int startRow, int endRow)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void aggregate(ByteBuffer buf, int position, int startRow, int endRow)\n  {\n    VarianceAggregatorCollector[] vector = (VarianceAggregatorCollector[]) selector.getObjectVector();\n    VarianceAggregatorCollector previous = VarianceBufferAggregator.getVarianceCollector(buf, position);\n    for (int i = startRow; i < endRow; i++) {\n      previous.fold(vector[i]);\n    }\n    VarianceBufferAggregator.writeNVariance(buf, position, previous.count, previous.sum, previous.nvariance);\n  }", "signature": "void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "full_signature": "@Override public void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "class_method_signature": "VarianceObjectVectorAggregator.aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "testcase": false, "constructor": false, "invocations": ["getObjectVector", "getVarianceCollector", "fold", "writeNVariance"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}