{"test_class": {"identifier": "DataSourcesResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CoordinatorServerView inventoryView;", "modifier": "private", "type": "CoordinatorServerView", "declarator": "inventoryView", "var_name": "inventoryView"}, {"original_string": "private DruidServer server;", "modifier": "private", "type": "DruidServer", "declarator": "server", "var_name": "server"}, {"original_string": "private List<DruidDataSource> listDataSources;", "modifier": "private", "type": "List<DruidDataSource>", "declarator": "listDataSources", "var_name": "listDataSources"}, {"original_string": "private List<DataSegment> dataSegmentList;", "modifier": "private", "type": "List<DataSegment>", "declarator": "dataSegmentList", "var_name": "dataSegmentList"}, {"original_string": "private HttpServletRequest request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private SegmentsMetadataManager segmentsMetadataManager;", "modifier": "private", "type": "SegmentsMetadataManager", "declarator": "segmentsMetadataManager", "var_name": "segmentsMetadataManager"}], "file": "server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java"}, "test_case": {"identifier": "testMarkSegmentsAsUnusedInvalidPayload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMarkSegmentsAsUnusedInvalidPayload()\n  {\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n\n    final DataSourcesResource.MarkDataSourceSegmentsPayload payload =\n        new DataSourcesResource.MarkDataSourceSegmentsPayload(null, null);\n\n    Response response = dataSourcesResource.markSegmentsAsUnused(\"datasource1\", payload);\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n  }", "signature": "void testMarkSegmentsAsUnusedInvalidPayload()", "full_signature": "@Test public void testMarkSegmentsAsUnusedInvalidPayload()", "class_method_signature": "DataSourcesResourceTest.testMarkSegmentsAsUnusedInvalidPayload()", "testcase": true, "constructor": false, "invocations": ["markSegmentsAsUnused", "assertEquals", "getStatus", "assertNotNull", "getEntity"]}, "focal_class": {"identifier": "DataSourcesResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(DataSourcesResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(DataSourcesResource.class)", "var_name": "log"}, {"original_string": "private static final long DEFAULT_LOADSTATUS_INTERVAL_OFFSET = 14 * 24 * 60 * 60 * 1000;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_LOADSTATUS_INTERVAL_OFFSET = 14 * 24 * 60 * 60 * 1000", "var_name": "DEFAULT_LOADSTATUS_INTERVAL_OFFSET"}, {"original_string": "private final CoordinatorServerView serverInventoryView;", "modifier": "private final", "type": "CoordinatorServerView", "declarator": "serverInventoryView", "var_name": "serverInventoryView"}, {"original_string": "private final SegmentsMetadataManager segmentsMetadataManager;", "modifier": "private final", "type": "SegmentsMetadataManager", "declarator": "segmentsMetadataManager", "var_name": "segmentsMetadataManager"}, {"original_string": "private final MetadataRuleManager metadataRuleManager;", "modifier": "private final", "type": "MetadataRuleManager", "declarator": "metadataRuleManager", "var_name": "metadataRuleManager"}, {"original_string": "private final IndexingServiceClient indexingServiceClient;", "modifier": "private final", "type": "IndexingServiceClient", "declarator": "indexingServiceClient", "var_name": "indexingServiceClient"}, {"original_string": "private final AuthorizerMapper authorizerMapper;", "modifier": "private final", "type": "AuthorizerMapper", "declarator": "authorizerMapper", "var_name": "authorizerMapper"}, {"original_string": "private final DruidCoordinator coordinator;", "modifier": "private final", "type": "DruidCoordinator", "declarator": "coordinator", "var_name": "coordinator"}], "methods": [{"identifier": "DataSourcesResource", "parameters": "(\n      CoordinatorServerView serverInventoryView,\n      SegmentsMetadataManager segmentsMetadataManager,\n      MetadataRuleManager metadataRuleManager,\n      @Nullable IndexingServiceClient indexingServiceClient,\n      AuthorizerMapper authorizerMapper,\n      DruidCoordinator coordinator\n  )", "modifiers": "@Inject public", "return": "", "signature": " DataSourcesResource(\n      CoordinatorServerView serverInventoryView,\n      SegmentsMetadataManager segmentsMetadataManager,\n      MetadataRuleManager metadataRuleManager,\n      @Nullable IndexingServiceClient indexingServiceClient,\n      AuthorizerMapper authorizerMapper,\n      DruidCoordinator coordinator\n  )", "full_signature": "@Inject public  DataSourcesResource(\n      CoordinatorServerView serverInventoryView,\n      SegmentsMetadataManager segmentsMetadataManager,\n      MetadataRuleManager metadataRuleManager,\n      @Nullable IndexingServiceClient indexingServiceClient,\n      AuthorizerMapper authorizerMapper,\n      DruidCoordinator coordinator\n  )", "class_method_signature": "DataSourcesResource.DataSourcesResource(\n      CoordinatorServerView serverInventoryView,\n      SegmentsMetadataManager segmentsMetadataManager,\n      MetadataRuleManager metadataRuleManager,\n      @Nullable IndexingServiceClient indexingServiceClient,\n      AuthorizerMapper authorizerMapper,\n      DruidCoordinator coordinator\n  )", "testcase": false, "constructor": true}, {"identifier": "getQueryableDataSources", "parameters": "(\n      @QueryParam(\"full\") @Nullable String full,\n      @QueryParam(\"simple\") @Nullable String simple,\n      @Context final HttpServletRequest req\n  )", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response getQueryableDataSources(\n      @QueryParam(\"full\") @Nullable String full,\n      @QueryParam(\"simple\") @Nullable String simple,\n      @Context final HttpServletRequest req\n  )", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) public Response getQueryableDataSources(\n      @QueryParam(\"full\") @Nullable String full,\n      @QueryParam(\"simple\") @Nullable String simple,\n      @Context final HttpServletRequest req\n  )", "class_method_signature": "DataSourcesResource.getQueryableDataSources(\n      @QueryParam(\"full\") @Nullable String full,\n      @QueryParam(\"simple\") @Nullable String simple,\n      @Context final HttpServletRequest req\n  )", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"full\") final String full\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getDataSource(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"full\") final String full\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getDataSource(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"full\") final String full\n  )", "class_method_signature": "DataSourcesResource.getDataSource(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"full\") final String full\n  )", "testcase": false, "constructor": false}, {"identifier": "markAsUsedAllNonOvershadowedSegments", "parameters": "(@PathParam(\"dataSourceName\") final String dataSourceName)", "modifiers": "@POST @Path(\"/{dataSourceName}\") @Consumes(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response markAsUsedAllNonOvershadowedSegments(@PathParam(\"dataSourceName\") final String dataSourceName)", "full_signature": "@POST @Path(\"/{dataSourceName}\") @Consumes(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response markAsUsedAllNonOvershadowedSegments(@PathParam(\"dataSourceName\") final String dataSourceName)", "class_method_signature": "DataSourcesResource.markAsUsedAllNonOvershadowedSegments(@PathParam(\"dataSourceName\") final String dataSourceName)", "testcase": false, "constructor": false}, {"identifier": "markAsUsedNonOvershadowedSegments", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      MarkDataSourceSegmentsPayload payload\n  )", "modifiers": "@POST @Path(\"/{dataSourceName}/markUsed\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response markAsUsedNonOvershadowedSegments(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      MarkDataSourceSegmentsPayload payload\n  )", "full_signature": "@POST @Path(\"/{dataSourceName}/markUsed\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response markAsUsedNonOvershadowedSegments(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      MarkDataSourceSegmentsPayload payload\n  )", "class_method_signature": "DataSourcesResource.markAsUsedNonOvershadowedSegments(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      MarkDataSourceSegmentsPayload payload\n  )", "testcase": false, "constructor": false}, {"identifier": "markSegmentsAsUnused", "parameters": "(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "modifiers": "@POST @Path(\"/{dataSourceName}/markUnused\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response markSegmentsAsUnused(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "full_signature": "@POST @Path(\"/{dataSourceName}/markUnused\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response markSegmentsAsUnused(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "class_method_signature": "DataSourcesResource.markSegmentsAsUnused(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "testcase": false, "constructor": false}, {"identifier": "doMarkSegmentsWithPayload", "parameters": "(\n      String method,\n      String dataSourceName,\n      MarkDataSourceSegmentsPayload payload,\n      MarkSegments markSegments\n  )", "modifiers": "private", "return": "Response", "signature": "Response doMarkSegmentsWithPayload(\n      String method,\n      String dataSourceName,\n      MarkDataSourceSegmentsPayload payload,\n      MarkSegments markSegments\n  )", "full_signature": "private Response doMarkSegmentsWithPayload(\n      String method,\n      String dataSourceName,\n      MarkDataSourceSegmentsPayload payload,\n      MarkSegments markSegments\n  )", "class_method_signature": "DataSourcesResource.doMarkSegmentsWithPayload(\n      String method,\n      String dataSourceName,\n      MarkDataSourceSegmentsPayload payload,\n      MarkSegments markSegments\n  )", "testcase": false, "constructor": false}, {"identifier": "logAndCreateDataSourceNotFoundResponse", "parameters": "(String dataSourceName)", "modifiers": "private static", "return": "Response", "signature": "Response logAndCreateDataSourceNotFoundResponse(String dataSourceName)", "full_signature": "private static Response logAndCreateDataSourceNotFoundResponse(String dataSourceName)", "class_method_signature": "DataSourcesResource.logAndCreateDataSourceNotFoundResponse(String dataSourceName)", "testcase": false, "constructor": false}, {"identifier": "doMarkSegments", "parameters": "(String method, String dataSourceName, MarkSegments markSegments)", "modifiers": "private static", "return": "Response", "signature": "Response doMarkSegments(String method, String dataSourceName, MarkSegments markSegments)", "full_signature": "private static Response doMarkSegments(String method, String dataSourceName, MarkSegments markSegments)", "class_method_signature": "DataSourcesResource.doMarkSegments(String method, String dataSourceName, MarkSegments markSegments)", "testcase": false, "constructor": false}, {"identifier": "markAsUnusedAllSegmentsOrKillUnusedSegmentsInInterval", "parameters": "(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"kill\") final String kill,\n      @QueryParam(\"interval\") final String interval\n  )", "modifiers": "@DELETE @Deprecated @Path(\"/{dataSourceName}\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response markAsUnusedAllSegmentsOrKillUnusedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"kill\") final String kill,\n      @QueryParam(\"interval\") final String interval\n  )", "full_signature": "@DELETE @Deprecated @Path(\"/{dataSourceName}\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) public Response markAsUnusedAllSegmentsOrKillUnusedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"kill\") final String kill,\n      @QueryParam(\"interval\") final String interval\n  )", "class_method_signature": "DataSourcesResource.markAsUnusedAllSegmentsOrKillUnusedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @QueryParam(\"kill\") final String kill,\n      @QueryParam(\"interval\") final String interval\n  )", "testcase": false, "constructor": false}, {"identifier": "killUnusedSegmentsInInterval", "parameters": "(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @PathParam(\"interval\") final String interval\n  )", "modifiers": "@DELETE @Path(\"/{dataSourceName}/intervals/{interval}\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response killUnusedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @PathParam(\"interval\") final String interval\n  )", "full_signature": "@DELETE @Path(\"/{dataSourceName}/intervals/{interval}\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) public Response killUnusedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @PathParam(\"interval\") final String interval\n  )", "class_method_signature": "DataSourcesResource.killUnusedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      @PathParam(\"interval\") final String interval\n  )", "testcase": false, "constructor": false}, {"identifier": "getIntervalsWithServedSegmentsOrAllServedSegmentsPerIntervals", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/intervals\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getIntervalsWithServedSegmentsOrAllServedSegmentsPerIntervals(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/intervals\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getIntervalsWithServedSegmentsOrAllServedSegmentsPerIntervals(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "class_method_signature": "DataSourcesResource.getIntervalsWithServedSegmentsOrAllServedSegmentsPerIntervals(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "testcase": false, "constructor": false}, {"identifier": "getServedSegmentsInInterval", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/intervals/{interval}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getServedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/intervals/{interval}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getServedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "class_method_signature": "DataSourcesResource.getServedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full\n  )", "testcase": false, "constructor": false}, {"identifier": "getDatasourceLoadstatus", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"forceMetadataRefresh\") final Boolean forceMetadataRefresh,\n      @QueryParam(\"interval\") @Nullable final String interval,\n      @QueryParam(\"simple\") @Nullable final String simple,\n      @QueryParam(\"full\") @Nullable final String full\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/loadstatus\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getDatasourceLoadstatus(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"forceMetadataRefresh\") final Boolean forceMetadataRefresh,\n      @QueryParam(\"interval\") @Nullable final String interval,\n      @QueryParam(\"simple\") @Nullable final String simple,\n      @QueryParam(\"full\") @Nullable final String full\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/loadstatus\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getDatasourceLoadstatus(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"forceMetadataRefresh\") final Boolean forceMetadataRefresh,\n      @QueryParam(\"interval\") @Nullable final String interval,\n      @QueryParam(\"simple\") @Nullable final String simple,\n      @QueryParam(\"full\") @Nullable final String full\n  )", "class_method_signature": "DataSourcesResource.getDatasourceLoadstatus(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"forceMetadataRefresh\") final Boolean forceMetadataRefresh,\n      @QueryParam(\"interval\") @Nullable final String interval,\n      @QueryParam(\"simple\") @Nullable final String simple,\n      @QueryParam(\"full\") @Nullable final String full\n  )", "testcase": false, "constructor": false}, {"identifier": "computeSegmentLoadStatistics", "parameters": "(Iterable<DataSegment> segments)", "modifiers": "private", "return": "SegmentsLoadStatistics", "signature": "SegmentsLoadStatistics computeSegmentLoadStatistics(Iterable<DataSegment> segments)", "full_signature": "private SegmentsLoadStatistics computeSegmentLoadStatistics(Iterable<DataSegment> segments)", "class_method_signature": "DataSourcesResource.computeSegmentLoadStatistics(Iterable<DataSegment> segments)", "testcase": false, "constructor": false}, {"identifier": "getServedSegmentsInInterval", "parameters": "(\n      String dataSourceName,\n      boolean full,\n      Predicate<Interval> intervalFilter\n  )", "modifiers": "private", "return": "Response", "signature": "Response getServedSegmentsInInterval(\n      String dataSourceName,\n      boolean full,\n      Predicate<Interval> intervalFilter\n  )", "full_signature": "private Response getServedSegmentsInInterval(\n      String dataSourceName,\n      boolean full,\n      Predicate<Interval> intervalFilter\n  )", "class_method_signature": "DataSourcesResource.getServedSegmentsInInterval(\n      String dataSourceName,\n      boolean full,\n      Predicate<Interval> intervalFilter\n  )", "testcase": false, "constructor": false}, {"identifier": "getAllServedSegments", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"full\") String full\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/segments\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getAllServedSegments(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"full\") String full\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/segments\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getAllServedSegments(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"full\") String full\n  )", "class_method_signature": "DataSourcesResource.getAllServedSegments(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"full\") String full\n  )", "testcase": false, "constructor": false}, {"identifier": "getServedSegment", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/segments/{segmentId}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getServedSegment(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/segments/{segmentId}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getServedSegment(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "class_method_signature": "DataSourcesResource.getServedSegment(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "testcase": false, "constructor": false}, {"identifier": "markSegmentAsUnused", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "modifiers": "@DELETE @Path(\"/{dataSourceName}/segments/{segmentId}\") @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response markSegmentAsUnused(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "full_signature": "@DELETE @Path(\"/{dataSourceName}/segments/{segmentId}\") @ResourceFilters(DatasourceResourceFilter.class) public Response markSegmentAsUnused(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "class_method_signature": "DataSourcesResource.markSegmentAsUnused(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "testcase": false, "constructor": false}, {"identifier": "markSegmentAsUsed", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "modifiers": "@POST @Path(\"/{dataSourceName}/segments/{segmentId}\") @Consumes(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response markSegmentAsUsed(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "full_signature": "@POST @Path(\"/{dataSourceName}/segments/{segmentId}\") @Consumes(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response markSegmentAsUsed(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "class_method_signature": "DataSourcesResource.markSegmentAsUsed(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"segmentId\") String segmentId\n  )", "testcase": false, "constructor": false}, {"identifier": "getTiersWhereSegmentsAreServed", "parameters": "(@PathParam(\"dataSourceName\") String dataSourceName)", "modifiers": "@GET @Path(\"/{dataSourceName}/tiers\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getTiersWhereSegmentsAreServed(@PathParam(\"dataSourceName\") String dataSourceName)", "full_signature": "@GET @Path(\"/{dataSourceName}/tiers\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getTiersWhereSegmentsAreServed(@PathParam(\"dataSourceName\") String dataSourceName)", "class_method_signature": "DataSourcesResource.getTiersWhereSegmentsAreServed(@PathParam(\"dataSourceName\") String dataSourceName)", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "(final String dataSourceName)", "modifiers": "@Nullable private", "return": "ImmutableDruidDataSource", "signature": "ImmutableDruidDataSource getDataSource(final String dataSourceName)", "full_signature": "@Nullable private ImmutableDruidDataSource getDataSource(final String dataSourceName)", "class_method_signature": "DataSourcesResource.getDataSource(final String dataSourceName)", "testcase": false, "constructor": false}, {"identifier": "getServersWhereSegmentIsServed", "parameters": "(SegmentId segmentId)", "modifiers": "@Nullable private", "return": "Pair<DataSegment, Set<String>>", "signature": "Pair<DataSegment, Set<String>> getServersWhereSegmentIsServed(SegmentId segmentId)", "full_signature": "@Nullable private Pair<DataSegment, Set<String>> getServersWhereSegmentIsServed(SegmentId segmentId)", "class_method_signature": "DataSourcesResource.getServersWhereSegmentIsServed(SegmentId segmentId)", "testcase": false, "constructor": false}, {"identifier": "makeSimpleDatasource", "parameters": "(ImmutableDruidDataSource input)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> makeSimpleDatasource(ImmutableDruidDataSource input)", "full_signature": "private Map<String, Object> makeSimpleDatasource(ImmutableDruidDataSource input)", "class_method_signature": "DataSourcesResource.makeSimpleDatasource(ImmutableDruidDataSource input)", "testcase": false, "constructor": false}, {"identifier": "getSimpleDatasource", "parameters": "(String dataSourceName)", "modifiers": "private", "return": "Map<String, Map<String, Object>>", "signature": "Map<String, Map<String, Object>> getSimpleDatasource(String dataSourceName)", "full_signature": "private Map<String, Map<String, Object>> getSimpleDatasource(String dataSourceName)", "class_method_signature": "DataSourcesResource.getSimpleDatasource(String dataSourceName)", "testcase": false, "constructor": false}, {"identifier": "getServedSegmentsInInterval", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"partial\") final boolean partial\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/intervals/{interval}/serverview\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response getServedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"partial\") final boolean partial\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/intervals/{interval}/serverview\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response getServedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"partial\") final boolean partial\n  )", "class_method_signature": "DataSourcesResource.getServedSegmentsInInterval(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"partial\") final boolean partial\n  )", "testcase": false, "constructor": false}, {"identifier": "prepareServedSegmentsInInterval", "parameters": "(\n      TimelineLookup<String, SegmentLoadInfo> dataSourceServingTimeline,\n      Interval interval\n  )", "modifiers": "private", "return": "Iterable<ImmutableSegmentLoadInfo>", "signature": "Iterable<ImmutableSegmentLoadInfo> prepareServedSegmentsInInterval(\n      TimelineLookup<String, SegmentLoadInfo> dataSourceServingTimeline,\n      Interval interval\n  )", "full_signature": "private Iterable<ImmutableSegmentLoadInfo> prepareServedSegmentsInInterval(\n      TimelineLookup<String, SegmentLoadInfo> dataSourceServingTimeline,\n      Interval interval\n  )", "class_method_signature": "DataSourcesResource.prepareServedSegmentsInInterval(\n      TimelineLookup<String, SegmentLoadInfo> dataSourceServingTimeline,\n      Interval interval\n  )", "testcase": false, "constructor": false}, {"identifier": "isHandOffComplete", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") final String interval,\n      @QueryParam(\"partitionNumber\") final int partitionNumber,\n      @QueryParam(\"version\") final String version\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/handoffComplete\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Response", "signature": "Response isHandOffComplete(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") final String interval,\n      @QueryParam(\"partitionNumber\") final int partitionNumber,\n      @QueryParam(\"version\") final String version\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/handoffComplete\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Response isHandOffComplete(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") final String interval,\n      @QueryParam(\"partitionNumber\") final int partitionNumber,\n      @QueryParam(\"version\") final String version\n  )", "class_method_signature": "DataSourcesResource.isHandOffComplete(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") final String interval,\n      @QueryParam(\"partitionNumber\") final int partitionNumber,\n      @QueryParam(\"version\") final String version\n  )", "testcase": false, "constructor": false}, {"identifier": "isSegmentLoaded", "parameters": "(Iterable<ImmutableSegmentLoadInfo> servedSegments, SegmentDescriptor descriptor)", "modifiers": "static", "return": "boolean", "signature": "boolean isSegmentLoaded(Iterable<ImmutableSegmentLoadInfo> servedSegments, SegmentDescriptor descriptor)", "full_signature": "static boolean isSegmentLoaded(Iterable<ImmutableSegmentLoadInfo> servedSegments, SegmentDescriptor descriptor)", "class_method_signature": "DataSourcesResource.isSegmentLoaded(Iterable<ImmutableSegmentLoadInfo> servedSegments, SegmentDescriptor descriptor)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/http/DataSourcesResource.java"}, "focal_method": {"identifier": "markSegmentsAsUnused", "parameters": "(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "modifiers": "@POST @Path(\"/{dataSourceName}/markUnused\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public", "return": "Response", "body": "@POST\n  @Path(\"/{dataSourceName}/markUnused\")\n  @ResourceFilters(DatasourceResourceFilter.class)\n  @Produces(MediaType.APPLICATION_JSON)\n  @Consumes(MediaType.APPLICATION_JSON)\n  public Response markSegmentsAsUnused(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )\n  {\n    MarkSegments markSegments = () -> {\n      final Interval interval = payload.getInterval();\n      if (interval != null) {\n        return segmentsMetadataManager.markAsUnusedSegmentsInInterval(dataSourceName, interval);\n      } else {\n        final Set<String> segmentIds = payload.getSegmentIds();\n        return segmentsMetadataManager.markSegmentsAsUnused(dataSourceName, segmentIds);\n      }\n    };\n    return doMarkSegmentsWithPayload(\"markSegmentsAsUnused\", dataSourceName, payload, markSegments);\n  }", "signature": "Response markSegmentsAsUnused(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "full_signature": "@POST @Path(\"/{dataSourceName}/markUnused\") @ResourceFilters(DatasourceResourceFilter.class) @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response markSegmentsAsUnused(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "class_method_signature": "DataSourcesResource.markSegmentsAsUnused(\n      @PathParam(\"dataSourceName\") final String dataSourceName,\n      final MarkDataSourceSegmentsPayload payload\n  )", "testcase": false, "constructor": false, "invocations": ["getInterval", "markAsUnusedSegmentsInInterval", "getSegmentIds", "markSegmentsAsUnused", "doMarkSegmentsWithPayload"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}