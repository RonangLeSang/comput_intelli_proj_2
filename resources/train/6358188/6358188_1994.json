{"test_class": {"identifier": "MaxSizeSplitHintSpecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "core/src/test/java/org/apache/druid/data/input/MaxSizeSplitHintSpecTest.java"}, "test_case": {"identifier": "testSplitSmallInputsWithMaxNumFilesEachSplitShouldHaveLessFilesAssigned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSplitSmallInputsWithMaxNumFilesEachSplitShouldHaveLessFilesAssigned()\n  {\n    final int eachInputSize = 3;\n    final MaxSizeSplitHintSpec splitHintSpec = new MaxSizeSplitHintSpec(new HumanReadableBytes(\"500M\"), 3);\n    final Function<Integer, InputFileAttribute> inputAttributeExtractor = InputFileAttribute::new;\n    final List<List<Integer>> splits = Lists.newArrayList(\n        splitHintSpec.split(IntStream.generate(() -> eachInputSize).limit(10).iterator(), inputAttributeExtractor)\n    );\n    Assert.assertEquals(4, splits.size());\n    Assert.assertEquals(3, splits.get(0).size());\n    Assert.assertEquals(3, splits.get(1).size());\n    Assert.assertEquals(3, splits.get(2).size());\n    Assert.assertEquals(1, splits.get(3).size());\n  }", "signature": "void testSplitSmallInputsWithMaxNumFilesEachSplitShouldHaveLessFilesAssigned()", "full_signature": "@Test public void testSplitSmallInputsWithMaxNumFilesEachSplitShouldHaveLessFilesAssigned()", "class_method_signature": "MaxSizeSplitHintSpecTest.testSplitSmallInputsWithMaxNumFilesEachSplitShouldHaveLessFilesAssigned()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "split", "iterator", "limit", "generate", "assertEquals", "size", "assertEquals", "size", "get", "assertEquals", "size", "get", "assertEquals", "size", "get", "assertEquals", "size", "get"]}, "focal_class": {"identifier": "MaxSizeSplitHintSpec", "superclass": "", "interfaces": "implements SplitHintSpec", "fields": [{"original_string": "public static final String TYPE = \"maxSize\";", "modifier": "public static final", "type": "String", "declarator": "TYPE = \"maxSize\"", "var_name": "TYPE"}, {"original_string": "@VisibleForTesting\n  static final HumanReadableBytes DEFAULT_MAX_SPLIT_SIZE = new HumanReadableBytes(\"1GiB\");", "modifier": "@VisibleForTesting\n  static final", "type": "HumanReadableBytes", "declarator": "DEFAULT_MAX_SPLIT_SIZE = new HumanReadableBytes(\"1GiB\")", "var_name": "DEFAULT_MAX_SPLIT_SIZE"}, {"original_string": "@VisibleForTesting\n  static final int DEFAULT_MAX_NUM_FILES = 1000;", "modifier": "@VisibleForTesting\n  static final", "type": "int", "declarator": "DEFAULT_MAX_NUM_FILES = 1000", "var_name": "DEFAULT_MAX_NUM_FILES"}, {"original_string": "private final HumanReadableBytes maxSplitSize;", "modifier": "private final", "type": "HumanReadableBytes", "declarator": "maxSplitSize", "var_name": "maxSplitSize"}, {"original_string": "private final int maxNumFiles;", "modifier": "private final", "type": "int", "declarator": "maxNumFiles", "var_name": "maxNumFiles"}], "methods": [{"identifier": "MaxSizeSplitHintSpec", "parameters": "(\n      @JsonProperty(\"maxSplitSize\") @Nullable HumanReadableBytes maxSplitSize,\n      @JsonProperty(\"maxNumFiles\") @Nullable Integer maxNumFiles\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " MaxSizeSplitHintSpec(\n      @JsonProperty(\"maxSplitSize\") @Nullable HumanReadableBytes maxSplitSize,\n      @JsonProperty(\"maxNumFiles\") @Nullable Integer maxNumFiles\n  )", "full_signature": "@JsonCreator public  MaxSizeSplitHintSpec(\n      @JsonProperty(\"maxSplitSize\") @Nullable HumanReadableBytes maxSplitSize,\n      @JsonProperty(\"maxNumFiles\") @Nullable Integer maxNumFiles\n  )", "class_method_signature": "MaxSizeSplitHintSpec.MaxSizeSplitHintSpec(\n      @JsonProperty(\"maxSplitSize\") @Nullable HumanReadableBytes maxSplitSize,\n      @JsonProperty(\"maxNumFiles\") @Nullable Integer maxNumFiles\n  )", "testcase": false, "constructor": true}, {"identifier": "MaxSizeSplitHintSpec", "parameters": "(long maxSplitSize, @Nullable Integer maxNumFiles)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " MaxSizeSplitHintSpec(long maxSplitSize, @Nullable Integer maxNumFiles)", "full_signature": "@VisibleForTesting public  MaxSizeSplitHintSpec(long maxSplitSize, @Nullable Integer maxNumFiles)", "class_method_signature": "MaxSizeSplitHintSpec.MaxSizeSplitHintSpec(long maxSplitSize, @Nullable Integer maxNumFiles)", "testcase": false, "constructor": true}, {"identifier": "getMaxSplitSize", "parameters": "()", "modifiers": "@JsonProperty public", "return": "HumanReadableBytes", "signature": "HumanReadableBytes getMaxSplitSize()", "full_signature": "@JsonProperty public HumanReadableBytes getMaxSplitSize()", "class_method_signature": "MaxSizeSplitHintSpec.getMaxSplitSize()", "testcase": false, "constructor": false}, {"identifier": "getMaxNumFiles", "parameters": "()", "modifiers": "@JsonProperty public", "return": "int", "signature": "int getMaxNumFiles()", "full_signature": "@JsonProperty public int getMaxNumFiles()", "class_method_signature": "MaxSizeSplitHintSpec.getMaxNumFiles()", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "modifiers": "@Override public", "return": "Iterator<List<T>>", "signature": "Iterator<List<T>> split(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "full_signature": "@Override public Iterator<List<T>> split(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "class_method_signature": "MaxSizeSplitHintSpec.split(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MaxSizeSplitHintSpec.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MaxSizeSplitHintSpec.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/data/input/MaxSizeSplitHintSpec.java"}, "focal_method": {"identifier": "split", "parameters": "(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "modifiers": "@Override public", "return": "Iterator<List<T>>", "body": "@Override\n  public <T> Iterator<List<T>> split(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)\n  {\n    final Iterator<T> nonEmptyFileOnlyIterator = Iterators.filter(\n        inputIterator,\n        input -> inputAttributeExtractor.apply(input).getSize() > 0\n    );\n    return new Iterator<List<T>>()\n    {\n      private final long maxSplitSizeBytes = maxSplitSize.getBytes();\n      private T peeking;\n\n      @Override\n      public boolean hasNext()\n      {\n        return peeking != null || nonEmptyFileOnlyIterator.hasNext();\n      }\n\n      @Override\n      public List<T> next()\n      {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        final List<T> current = new ArrayList<>();\n        long splitSize = 0;\n        while (splitSize < maxSplitSizeBytes && (peeking != null || nonEmptyFileOnlyIterator.hasNext())) {\n          if (peeking == null) {\n            peeking = nonEmptyFileOnlyIterator.next();\n          }\n          final long size = inputAttributeExtractor.apply(peeking).getSize();\n          if (current.isEmpty() // each split should have at least one file even if the file is larger than maxSplitSize\n              || (splitSize + size < maxSplitSizeBytes && current.size() < maxNumFiles)) {\n            current.add(peeking);\n            splitSize += size;\n            peeking = null;\n          } else {\n            break;\n          }\n        }\n        assert !current.isEmpty();\n        return current;\n      }\n    };\n  }", "signature": "Iterator<List<T>> split(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "full_signature": "@Override public Iterator<List<T>> split(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "class_method_signature": "MaxSizeSplitHintSpec.split(Iterator<T> inputIterator, Function<T, InputFileAttribute> inputAttributeExtractor)", "testcase": false, "constructor": false, "invocations": ["filter", "getSize", "apply", "getBytes", "hasNext", "hasNext", "hasNext", "next", "getSize", "apply", "isEmpty", "size", "add", "isEmpty"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}