{"test_class": {"identifier": "RowBasedIndexedTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int INDEX_COUNTRIES_COUNTRY_NUMBER = 0;", "modifier": "private static final", "type": "int", "declarator": "INDEX_COUNTRIES_COUNTRY_NUMBER = 0", "var_name": "INDEX_COUNTRIES_COUNTRY_NUMBER"}, {"original_string": "private static final int INDEX_COUNTRIES_COUNTRY_ISO_CODE = 1;", "modifier": "private static final", "type": "int", "declarator": "INDEX_COUNTRIES_COUNTRY_ISO_CODE = 1", "var_name": "INDEX_COUNTRIES_COUNTRY_ISO_CODE"}, {"original_string": "private static final int INDEX_COUNTRIES_COUNTRY_NAME = 2;", "modifier": "private static final", "type": "int", "declarator": "INDEX_COUNTRIES_COUNTRY_NAME = 2", "var_name": "INDEX_COUNTRIES_COUNTRY_NAME"}, {"original_string": "private static final int INDEX_REGIONS_REGION_ISO_CODE = 0;", "modifier": "private static final", "type": "int", "declarator": "INDEX_REGIONS_REGION_ISO_CODE = 0", "var_name": "INDEX_REGIONS_REGION_ISO_CODE"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "public RowBasedIndexedTable<Map<String, Object>> countriesTable;", "modifier": "public", "type": "RowBasedIndexedTable<Map<String, Object>>", "declarator": "countriesTable", "var_name": "countriesTable"}, {"original_string": "public RowBasedIndexedTable<Map<String, Object>> regionsTable;", "modifier": "public", "type": "RowBasedIndexedTable<Map<String, Object>>", "declarator": "regionsTable", "var_name": "regionsTable"}], "file": "processing/src/test/java/org/apache/druid/segment/join/table/RowBasedIndexedTableTest.java"}, "test_case": {"identifier": "test_numRows_countries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_numRows_countries()\n  {\n    Assert.assertEquals(18, countriesTable.numRows());\n  }", "signature": "void test_numRows_countries()", "full_signature": "@Test public void test_numRows_countries()", "class_method_signature": "RowBasedIndexedTableTest.test_numRows_countries()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "numRows"]}, "focal_class": {"identifier": "RowBasedIndexedTable", "superclass": "", "interfaces": "implements IndexedTable", "fields": [{"original_string": "private final List<RowType> table;", "modifier": "private final", "type": "List<RowType>", "declarator": "table", "var_name": "table"}, {"original_string": "private final List<Index> indexes;", "modifier": "private final", "type": "List<Index>", "declarator": "indexes", "var_name": "indexes"}, {"original_string": "private final RowSignature rowSignature;", "modifier": "private final", "type": "RowSignature", "declarator": "rowSignature", "var_name": "rowSignature"}, {"original_string": "private final List<Function<RowType, Object>> columnFunctions;", "modifier": "private final", "type": "List<Function<RowType, Object>>", "declarator": "columnFunctions", "var_name": "columnFunctions"}, {"original_string": "private final Set<String> keyColumns;", "modifier": "private final", "type": "Set<String>", "declarator": "keyColumns", "var_name": "keyColumns"}, {"original_string": "private final String version;", "modifier": "private final", "type": "String", "declarator": "version", "var_name": "version"}], "methods": [{"identifier": "RowBasedIndexedTable", "parameters": "(\n      final List<RowType> table,\n      final RowAdapter<RowType> rowAdapter,\n      final RowSignature rowSignature,\n      final Set<String> keyColumns,\n      final String version\n  )", "modifiers": "public", "return": "", "signature": " RowBasedIndexedTable(\n      final List<RowType> table,\n      final RowAdapter<RowType> rowAdapter,\n      final RowSignature rowSignature,\n      final Set<String> keyColumns,\n      final String version\n  )", "full_signature": "public  RowBasedIndexedTable(\n      final List<RowType> table,\n      final RowAdapter<RowType> rowAdapter,\n      final RowSignature rowSignature,\n      final Set<String> keyColumns,\n      final String version\n  )", "class_method_signature": "RowBasedIndexedTable.RowBasedIndexedTable(\n      final List<RowType> table,\n      final RowAdapter<RowType> rowAdapter,\n      final RowSignature rowSignature,\n      final Set<String> keyColumns,\n      final String version\n  )", "testcase": false, "constructor": true}, {"identifier": "version", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String version()", "full_signature": "@Override public String version()", "class_method_signature": "RowBasedIndexedTable.version()", "testcase": false, "constructor": false}, {"identifier": "keyColumns", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> keyColumns()", "full_signature": "@Override public Set<String> keyColumns()", "class_method_signature": "RowBasedIndexedTable.keyColumns()", "testcase": false, "constructor": false}, {"identifier": "rowSignature", "parameters": "()", "modifiers": "@Override public", "return": "RowSignature", "signature": "RowSignature rowSignature()", "full_signature": "@Override public RowSignature rowSignature()", "class_method_signature": "RowBasedIndexedTable.rowSignature()", "testcase": false, "constructor": false}, {"identifier": "columnIndex", "parameters": "(int column)", "modifiers": "@Override public", "return": "Index", "signature": "Index columnIndex(int column)", "full_signature": "@Override public Index columnIndex(int column)", "class_method_signature": "RowBasedIndexedTable.columnIndex(int column)", "testcase": false, "constructor": false}, {"identifier": "columnReader", "parameters": "(int column)", "modifiers": "@Override public", "return": "Reader", "signature": "Reader columnReader(int column)", "full_signature": "@Override public Reader columnReader(int column)", "class_method_signature": "RowBasedIndexedTable.columnReader(int column)", "testcase": false, "constructor": false}, {"identifier": "numRows", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int numRows()", "full_signature": "@Override public int numRows()", "class_method_signature": "RowBasedIndexedTable.numRows()", "testcase": false, "constructor": false}, {"identifier": "acquireReferences", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Closeable>", "signature": "Optional<Closeable> acquireReferences()", "full_signature": "@Override public Optional<Closeable> acquireReferences()", "class_method_signature": "RowBasedIndexedTable.acquireReferences()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RowBasedIndexedTable.close()", "testcase": false, "constructor": false}, {"identifier": "getKeyColumnIndex", "parameters": "(int column, List<Index> indexes)", "modifiers": "static", "return": "Index", "signature": "Index getKeyColumnIndex(int column, List<Index> indexes)", "full_signature": "static Index getKeyColumnIndex(int column, List<Index> indexes)", "class_method_signature": "RowBasedIndexedTable.getKeyColumnIndex(int column, List<Index> indexes)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/join/table/RowBasedIndexedTable.java"}, "focal_method": {"identifier": "numRows", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int numRows()\n  {\n    return table.size();\n  }", "signature": "int numRows()", "full_signature": "@Override public int numRows()", "class_method_signature": "RowBasedIndexedTable.numRows()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}