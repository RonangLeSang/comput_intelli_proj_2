{"test_class": {"identifier": "VarianceFloatVectorAggregatorTest", "superclass": "extends InitializedNullHandlingTest", "interfaces": "", "fields": [{"original_string": "private static final int START_ROW = 1;", "modifier": "private static final", "type": "int", "declarator": "START_ROW = 1", "var_name": "START_ROW"}, {"original_string": "private static final int POSITION = 2;", "modifier": "private static final", "type": "int", "declarator": "POSITION = 2", "var_name": "POSITION"}, {"original_string": "private static final int UNINIT_POSITION = 512;", "modifier": "private static final", "type": "int", "declarator": "UNINIT_POSITION = 512", "var_name": "UNINIT_POSITION"}, {"original_string": "private static final double EPSILON = 1e-8;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 1e-8", "var_name": "EPSILON"}, {"original_string": "private static final float[] VALUES = new float[]{7.8F, 11, 23.67F, 60, 123};", "modifier": "private static final", "type": "float[]", "declarator": "VALUES = new float[]{7.8F, 11, 23.67F, 60, 123}", "var_name": "VALUES"}, {"original_string": "private static final boolean[] NULLS = new boolean[]{false, false, true, true, false};", "modifier": "private static final", "type": "boolean[]", "declarator": "NULLS = new boolean[]{false, false, true, true, false}", "var_name": "NULLS"}, {"original_string": "@Mock\n  private VectorValueSelector selector;", "modifier": "@Mock\n  private", "type": "VectorValueSelector", "declarator": "selector", "var_name": "selector"}, {"original_string": "private ByteBuffer buf;", "modifier": "private", "type": "ByteBuffer", "declarator": "buf", "var_name": "buf"}, {"original_string": "private VarianceFloatVectorAggregator target;", "modifier": "private", "type": "VarianceFloatVectorAggregator", "declarator": "target", "var_name": "target"}], "file": "extensions-core/stats/src/test/java/org/apache/druid/query/aggregation/variance/VarianceFloatVectorAggregatorTest.java"}, "test_case": {"identifier": "aggregateWithNulls", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void aggregateWithNulls()\n  {\n    mockNullsVector();\n    target.aggregate(buf, POSITION, START_ROW, VALUES.length);\n    VarianceAggregatorCollector collector = VarianceBufferAggregator.getVarianceCollector(buf, POSITION);\n    Assert.assertEquals(\n        VALUES.length - START_ROW - (NullHandling.replaceWithDefault() ? 0 : 2),\n        collector.count\n    );\n    Assert.assertEquals(NullHandling.replaceWithDefault() ? 217.67000007 : 134, collector.sum, EPSILON);\n    Assert.assertEquals(NullHandling.replaceWithDefault() ? 7565.2116703 : 6272, collector.nvariance, EPSILON);\n  }", "signature": "void aggregateWithNulls()", "full_signature": "@Test public void aggregateWithNulls()", "class_method_signature": "VarianceFloatVectorAggregatorTest.aggregateWithNulls()", "testcase": true, "constructor": false, "invocations": ["mockNullsVector", "aggregate", "getVarianceCollector", "assertEquals", "replaceWithDefault", "assertEquals", "replaceWithDefault", "assertEquals", "replaceWithDefault"]}, "focal_class": {"identifier": "VarianceFloatVectorAggregator", "superclass": "", "interfaces": "implements VectorAggregator", "fields": [{"original_string": "private final VectorValueSelector selector;", "modifier": "private final", "type": "VectorValueSelector", "declarator": "selector", "var_name": "selector"}, {"original_string": "private final boolean replaceWithDefault = NullHandling.replaceWithDefault();", "modifier": "private final", "type": "boolean", "declarator": "replaceWithDefault = NullHandling.replaceWithDefault()", "var_name": "replaceWithDefault"}], "methods": [{"identifier": "VarianceFloatVectorAggregator", "parameters": "(VectorValueSelector selector)", "modifiers": "public", "return": "", "signature": " VarianceFloatVectorAggregator(VectorValueSelector selector)", "full_signature": "public  VarianceFloatVectorAggregator(VectorValueSelector selector)", "class_method_signature": "VarianceFloatVectorAggregator.VarianceFloatVectorAggregator(VectorValueSelector selector)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ByteBuffer buf, int position)", "modifiers": "@Override public", "return": "void", "signature": "void init(ByteBuffer buf, int position)", "full_signature": "@Override public void init(ByteBuffer buf, int position)", "class_method_signature": "VarianceFloatVectorAggregator.init(ByteBuffer buf, int position)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(ByteBuffer buf, int position, int startRow, int endRow)", "modifiers": "@Override public", "return": "void", "signature": "void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "full_signature": "@Override public void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "class_method_signature": "VarianceFloatVectorAggregator.aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "modifiers": "@Override public", "return": "void", "signature": "void aggregate(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "full_signature": "@Override public void aggregate(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "class_method_signature": "VarianceFloatVectorAggregator.aggregate(\n      ByteBuffer buf,\n      int numRows,\n      int[] positions,\n      @Nullable int[] rows,\n      int positionOffset\n  )", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ByteBuffer buf, int position)", "modifiers": "@Nullable @Override public", "return": "VarianceAggregatorCollector", "signature": "VarianceAggregatorCollector get(ByteBuffer buf, int position)", "full_signature": "@Nullable @Override public VarianceAggregatorCollector get(ByteBuffer buf, int position)", "class_method_signature": "VarianceFloatVectorAggregator.get(ByteBuffer buf, int position)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "VarianceFloatVectorAggregator.close()", "testcase": false, "constructor": false}], "file": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceFloatVectorAggregator.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(ByteBuffer buf, int position, int startRow, int endRow)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void aggregate(ByteBuffer buf, int position, int startRow, int endRow)\n  {\n    float[] vector = selector.getFloatVector();\n    long count = 0;\n    double sum = 0, nvariance = 0;\n    boolean[] nulls = replaceWithDefault ? null : selector.getNullVector();\n    for (int i = startRow; i < endRow; i++) {\n      if (nulls == null || !nulls[i]) {\n        count++;\n        sum += vector[i];\n      }\n    }\n    double mean = sum / count;\n    if (count > 1) {\n      for (int i = startRow; i < endRow; i++) {\n        if (nulls == null || !nulls[i]) {\n          nvariance += (vector[i] - mean) * (vector[i] - mean);\n        }\n      }\n    }\n\n    VarianceAggregatorCollector previous = new VarianceAggregatorCollector(\n        VarianceBufferAggregator.getCount(buf, position),\n        VarianceBufferAggregator.getSum(buf, position),\n        VarianceBufferAggregator.getVariance(buf, position)\n    );\n    previous.fold(new VarianceAggregatorCollector(count, sum, nvariance));\n    VarianceBufferAggregator.writeNVariance(buf, position, previous.count, previous.sum, previous.nvariance);\n  }", "signature": "void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "full_signature": "@Override public void aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "class_method_signature": "VarianceFloatVectorAggregator.aggregate(ByteBuffer buf, int position, int startRow, int endRow)", "testcase": false, "constructor": false, "invocations": ["getFloatVector", "getNullVector", "getCount", "getSum", "getVariance", "fold", "writeNVariance"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}