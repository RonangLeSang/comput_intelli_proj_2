{"test_class": {"identifier": "DimFilterUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Function<ShardSpec, ShardSpec> CONVERTER = new Function<ShardSpec, ShardSpec>()\n  {\n    @Nullable\n    @Override\n    public ShardSpec apply(@Nullable ShardSpec input)\n    {\n      return input;\n    }\n  };", "modifier": "private static final", "type": "Function<ShardSpec, ShardSpec>", "declarator": "CONVERTER = new Function<ShardSpec, ShardSpec>()\n  {\n    @Nullable\n    @Override\n    public ShardSpec apply(@Nullable ShardSpec input)\n    {\n      return input;\n    }\n  }", "var_name": "CONVERTER"}], "file": "processing/src/test/java/org/apache/druid/query/filter/DimFilterUtilsTest.java"}, "test_case": {"identifier": "testFilterShards", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFilterShards()\n  {\n    DimFilter filter1 = EasyMock.createMock(DimFilter.class);\n    EasyMock.expect(filter1.getDimensionRangeSet(\"dim1\"))\n            .andReturn(rangeSet(ImmutableList.of(Range.lessThan(\"abc\"))))\n            .anyTimes();\n    EasyMock.expect(filter1.getDimensionRangeSet(\"dim2\"))\n            .andReturn(null)\n            .anyTimes();\n\n    ShardSpec shard1 = shardSpec(\"dim1\", true);\n    ShardSpec shard2 = shardSpec(\"dim1\", false);\n    ShardSpec shard3 = shardSpec(\"dim1\", false);\n    ShardSpec shard4 = shardSpec(\"dim2\", false);\n    ShardSpec shard5 = shardSpec(\"dim2\", false);\n    ShardSpec shard6 = shardSpec(\"dim2\", false);\n    ShardSpec shard7 = shardSpec(\"dim2\", false);\n\n    List<ShardSpec> shards = ImmutableList.of(shard1, shard2, shard3, shard4, shard5, shard6, shard7);\n    EasyMock.replay(filter1, shard1, shard2, shard3, shard4, shard5, shard6, shard7);\n\n    Set<ShardSpec> expected1 = ImmutableSet.of(shard1, shard4, shard5, shard6, shard7);\n    assertFilterResult(filter1, shards, expected1);\n  }", "signature": "void testFilterShards()", "full_signature": "@Test public void testFilterShards()", "class_method_signature": "DimFilterUtilsTest.testFilterShards()", "testcase": true, "constructor": false, "invocations": ["createMock", "anyTimes", "andReturn", "expect", "getDimensionRangeSet", "rangeSet", "of", "lessThan", "anyTimes", "andReturn", "expect", "getDimensionRangeSet", "shardSpec", "shardSpec", "shardSpec", "shardSpec", "shardSpec", "shardSpec", "shardSpec", "of", "replay", "of", "assertFilterResult"]}, "focal_class": {"identifier": "DimFilterUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final byte SELECTOR_CACHE_ID = 0x0;", "modifier": "static final", "type": "byte", "declarator": "SELECTOR_CACHE_ID = 0x0", "var_name": "SELECTOR_CACHE_ID"}, {"original_string": "static final byte AND_CACHE_ID = 0x1;", "modifier": "static final", "type": "byte", "declarator": "AND_CACHE_ID = 0x1", "var_name": "AND_CACHE_ID"}, {"original_string": "static final byte OR_CACHE_ID = 0x2;", "modifier": "static final", "type": "byte", "declarator": "OR_CACHE_ID = 0x2", "var_name": "OR_CACHE_ID"}, {"original_string": "static final byte NOT_CACHE_ID = 0x3;", "modifier": "static final", "type": "byte", "declarator": "NOT_CACHE_ID = 0x3", "var_name": "NOT_CACHE_ID"}, {"original_string": "static final byte EXTRACTION_CACHE_ID = 0x4;", "modifier": "static final", "type": "byte", "declarator": "EXTRACTION_CACHE_ID = 0x4", "var_name": "EXTRACTION_CACHE_ID"}, {"original_string": "static final byte REGEX_CACHE_ID = 0x5;", "modifier": "static final", "type": "byte", "declarator": "REGEX_CACHE_ID = 0x5", "var_name": "REGEX_CACHE_ID"}, {"original_string": "static final byte SEARCH_QUERY_TYPE_ID = 0x6;", "modifier": "static final", "type": "byte", "declarator": "SEARCH_QUERY_TYPE_ID = 0x6", "var_name": "SEARCH_QUERY_TYPE_ID"}, {"original_string": "static final byte JAVASCRIPT_CACHE_ID = 0x7;", "modifier": "static final", "type": "byte", "declarator": "JAVASCRIPT_CACHE_ID = 0x7", "var_name": "JAVASCRIPT_CACHE_ID"}, {"original_string": "static final byte SPATIAL_CACHE_ID = 0x8;", "modifier": "static final", "type": "byte", "declarator": "SPATIAL_CACHE_ID = 0x8", "var_name": "SPATIAL_CACHE_ID"}, {"original_string": "static final byte IN_CACHE_ID = 0x9;", "modifier": "static final", "type": "byte", "declarator": "IN_CACHE_ID = 0x9", "var_name": "IN_CACHE_ID"}, {"original_string": "static final byte BOUND_CACHE_ID = 0xA;", "modifier": "static final", "type": "byte", "declarator": "BOUND_CACHE_ID = 0xA", "var_name": "BOUND_CACHE_ID"}, {"original_string": "static final byte INTERVAL_CACHE_ID = 0xB;", "modifier": "static final", "type": "byte", "declarator": "INTERVAL_CACHE_ID = 0xB", "var_name": "INTERVAL_CACHE_ID"}, {"original_string": "static final byte LIKE_CACHE_ID = 0xC;", "modifier": "static final", "type": "byte", "declarator": "LIKE_CACHE_ID = 0xC", "var_name": "LIKE_CACHE_ID"}, {"original_string": "static final byte COLUMN_COMPARISON_CACHE_ID = 0xD;", "modifier": "static final", "type": "byte", "declarator": "COLUMN_COMPARISON_CACHE_ID = 0xD", "var_name": "COLUMN_COMPARISON_CACHE_ID"}, {"original_string": "static final byte EXPRESSION_CACHE_ID = 0xE;", "modifier": "static final", "type": "byte", "declarator": "EXPRESSION_CACHE_ID = 0xE", "var_name": "EXPRESSION_CACHE_ID"}, {"original_string": "static final byte TRUE_CACHE_ID = 0xF;", "modifier": "static final", "type": "byte", "declarator": "TRUE_CACHE_ID = 0xF", "var_name": "TRUE_CACHE_ID"}, {"original_string": "static final byte FALSE_CACHE_ID = 0x11;", "modifier": "static final", "type": "byte", "declarator": "FALSE_CACHE_ID = 0x11", "var_name": "FALSE_CACHE_ID"}, {"original_string": "public static final byte BLOOM_DIM_FILTER_CACHE_ID = 0x10;", "modifier": "public static final", "type": "byte", "declarator": "BLOOM_DIM_FILTER_CACHE_ID = 0x10", "var_name": "BLOOM_DIM_FILTER_CACHE_ID"}, {"original_string": "public static final byte STRING_SEPARATOR = (byte) 0xFF;", "modifier": "public static final", "type": "byte", "declarator": "STRING_SEPARATOR = (byte) 0xFF", "var_name": "STRING_SEPARATOR"}], "methods": [{"identifier": "computeCacheKey", "parameters": "(byte cacheIdKey, List<DimFilter> filters)", "modifiers": "static", "return": "byte[]", "signature": "byte[] computeCacheKey(byte cacheIdKey, List<DimFilter> filters)", "full_signature": "static byte[] computeCacheKey(byte cacheIdKey, List<DimFilter> filters)", "class_method_signature": "DimFilterUtils.computeCacheKey(byte cacheIdKey, List<DimFilter> filters)", "testcase": false, "constructor": false}, {"identifier": "filterShards", "parameters": "(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> filterShards(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "full_signature": "public static Set<T> filterShards(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "class_method_signature": "DimFilterUtils.filterShards(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "testcase": false, "constructor": false}, {"identifier": "filterShards", "parameters": "(\n      final DimFilter dimFilter,\n      final Iterable<T> input,\n      final Function<T, ShardSpec> converter,\n      final Map<String, Optional<RangeSet<String>>> dimensionRangeCache\n  )", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> filterShards(\n      final DimFilter dimFilter,\n      final Iterable<T> input,\n      final Function<T, ShardSpec> converter,\n      final Map<String, Optional<RangeSet<String>>> dimensionRangeCache\n  )", "full_signature": "public static Set<T> filterShards(\n      final DimFilter dimFilter,\n      final Iterable<T> input,\n      final Function<T, ShardSpec> converter,\n      final Map<String, Optional<RangeSet<String>>> dimensionRangeCache\n  )", "class_method_signature": "DimFilterUtils.filterShards(\n      final DimFilter dimFilter,\n      final Iterable<T> input,\n      final Function<T, ShardSpec> converter,\n      final Map<String, Optional<RangeSet<String>>> dimensionRangeCache\n  )", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/filter/DimFilterUtils.java"}, "focal_method": {"identifier": "filterShards", "parameters": "(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "modifiers": "public static", "return": "Set<T>", "body": "public static <T> Set<T> filterShards(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)\n  {\n    return filterShards(dimFilter, input, converter, new HashMap<>());\n  }", "signature": "Set<T> filterShards(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "full_signature": "public static Set<T> filterShards(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "class_method_signature": "DimFilterUtils.filterShards(DimFilter dimFilter, Iterable<T> input, Function<T, ShardSpec> converter)", "testcase": false, "constructor": false, "invocations": ["filterShards"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}