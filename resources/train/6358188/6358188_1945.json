{"test_class": {"identifier": "ParametrizedUriEmitterConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/druid/java/util/emitter/core/ParametrizedUriEmitterConfigTest.java"}, "test_case": {"identifier": "testDefaults", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDefaults()\n  {\n    final Properties props = new Properties();\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final ParametrizedUriEmitterConfig paramConfig = objectMapper.convertValue(Emitters.makeCustomFactoryMap(props), ParametrizedUriEmitterConfig.class);\n    final HttpEmitterConfig config = paramConfig.buildHttpEmitterConfig(\"http://example.com/topic\");\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(500, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/topic\", config.getRecipientBaseUrl());\n    Assert.assertNull(config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n  }", "signature": "void testDefaults()", "full_signature": "@Test public void testDefaults()", "class_method_signature": "ParametrizedUriEmitterConfigTest.testDefaults()", "testcase": true, "constructor": false, "invocations": ["convertValue", "makeCustomFactoryMap", "buildHttpEmitterConfig", "assertEquals", "getFlushMillis", "assertEquals", "getFlushCount", "assertEquals", "getRecipientBaseUrl", "assertNull", "getBasicAuthentication", "assertEquals", "getBatchingStrategy", "getDefaultBatchSizeAndLimit", "maxMemory", "getRuntime", "assertEquals", "intValue", "getMaxBatchSize", "assertEquals", "intValue", "getBatchQueueSizeLimit", "assertEquals", "getFlushTimeOut"]}, "focal_class": {"identifier": "ParametrizedUriEmitterConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BaseHttpEmittingConfig DEFAULT_HTTP_EMITTING_CONFIG = new BaseHttpEmittingConfig();", "modifier": "private static final", "type": "BaseHttpEmittingConfig", "declarator": "DEFAULT_HTTP_EMITTING_CONFIG = new BaseHttpEmittingConfig()", "var_name": "DEFAULT_HTTP_EMITTING_CONFIG"}, {"original_string": "@NotNull\n  @JsonProperty\n  private String recipientBaseUrlPattern;", "modifier": "@NotNull\n  @JsonProperty\n  private", "type": "String", "declarator": "recipientBaseUrlPattern", "var_name": "recipientBaseUrlPattern"}, {"original_string": "@JsonProperty(\"httpEmitting\")\n  private BaseHttpEmittingConfig httpEmittingConfig = DEFAULT_HTTP_EMITTING_CONFIG;", "modifier": "@JsonProperty(\"httpEmitting\")\n  private", "type": "BaseHttpEmittingConfig", "declarator": "httpEmittingConfig = DEFAULT_HTTP_EMITTING_CONFIG", "var_name": "httpEmittingConfig"}], "methods": [{"identifier": "getRecipientBaseUrlPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRecipientBaseUrlPattern()", "full_signature": "public String getRecipientBaseUrlPattern()", "class_method_signature": "ParametrizedUriEmitterConfig.getRecipientBaseUrlPattern()", "testcase": false, "constructor": false}, {"identifier": "buildHttpEmitterConfig", "parameters": "(String baseUri)", "modifiers": "public", "return": "HttpEmitterConfig", "signature": "HttpEmitterConfig buildHttpEmitterConfig(String baseUri)", "full_signature": "public HttpEmitterConfig buildHttpEmitterConfig(String baseUri)", "class_method_signature": "ParametrizedUriEmitterConfig.buildHttpEmitterConfig(String baseUri)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ParametrizedUriEmitterConfig.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/java/util/emitter/core/ParametrizedUriEmitterConfig.java"}, "focal_method": {"identifier": "buildHttpEmitterConfig", "parameters": "(String baseUri)", "modifiers": "public", "return": "HttpEmitterConfig", "body": "public HttpEmitterConfig buildHttpEmitterConfig(String baseUri)\n  {\n    return new HttpEmitterConfig(httpEmittingConfig, baseUri);\n  }", "signature": "HttpEmitterConfig buildHttpEmitterConfig(String baseUri)", "full_signature": "public HttpEmitterConfig buildHttpEmitterConfig(String baseUri)", "class_method_signature": "ParametrizedUriEmitterConfig.buildHttpEmitterConfig(String baseUri)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}