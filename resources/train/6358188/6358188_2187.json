{"test_class": {"identifier": "SqlSegmentsMetadataManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final TestDerbyConnector.DerbyConnectorRule derbyConnectorRule = new TestDerbyConnector.DerbyConnectorRule();", "modifier": "@Rule\n  public final", "type": "TestDerbyConnector.DerbyConnectorRule", "declarator": "derbyConnectorRule = new TestDerbyConnector.DerbyConnectorRule()", "var_name": "derbyConnectorRule"}, {"original_string": "private SqlSegmentsMetadataManager sqlSegmentsMetadataManager;", "modifier": "private", "type": "SqlSegmentsMetadataManager", "declarator": "sqlSegmentsMetadataManager", "var_name": "sqlSegmentsMetadataManager"}, {"original_string": "private SQLMetadataSegmentPublisher publisher;", "modifier": "private", "type": "SQLMetadataSegmentPublisher", "declarator": "publisher", "var_name": "publisher"}, {"original_string": "private final ObjectMapper jsonMapper = TestHelper.makeJsonMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "jsonMapper = TestHelper.makeJsonMapper()", "var_name": "jsonMapper"}, {"original_string": "private final DataSegment segment1 = createSegment(\n      \"wikipedia\",\n      \"2012-03-15T00:00:00.000/2012-03-16T00:00:00.000\",\n      \"2012-03-16T00:36:30.848Z\",\n      \"index/y=2012/m=03/d=15/2012-03-16T00:36:30.848Z/0/index.zip\",\n      0\n  );", "modifier": "private final", "type": "DataSegment", "declarator": "segment1 = createSegment(\n      \"wikipedia\",\n      \"2012-03-15T00:00:00.000/2012-03-16T00:00:00.000\",\n      \"2012-03-16T00:36:30.848Z\",\n      \"index/y=2012/m=03/d=15/2012-03-16T00:36:30.848Z/0/index.zip\",\n      0\n  )", "var_name": "segment1"}, {"original_string": "private final DataSegment segment2 = createSegment(\n      \"wikipedia\",\n      \"2012-01-05T00:00:00.000/2012-01-06T00:00:00.000\",\n      \"2012-01-06T22:19:12.565Z\",\n      \"wikipedia/index/y=2012/m=01/d=05/2012-01-06T22:19:12.565Z/0/index.zip\",\n      0\n  );", "modifier": "private final", "type": "DataSegment", "declarator": "segment2 = createSegment(\n      \"wikipedia\",\n      \"2012-01-05T00:00:00.000/2012-01-06T00:00:00.000\",\n      \"2012-01-06T22:19:12.565Z\",\n      \"wikipedia/index/y=2012/m=01/d=05/2012-01-06T22:19:12.565Z/0/index.zip\",\n      0\n  )", "var_name": "segment2"}], "file": "server/src/test/java/org/apache/druid/metadata/SqlSegmentsMetadataManagerTest.java"}, "test_case": {"identifier": "testMarkSegmentAsUnused", "parameters": "()", "modifiers": "@Test(timeout = 60_000) public", "return": "void", "body": "@Test(timeout = 60_000)\n  public void testMarkSegmentAsUnused() throws IOException, InterruptedException\n  {\n    sqlSegmentsMetadataManager.startPollingDatabasePeriodically();\n    sqlSegmentsMetadataManager.poll();\n    Assert.assertTrue(sqlSegmentsMetadataManager.isPollingDatabasePeriodically());\n\n    final String newDataSource = \"wikipedia2\";\n    final DataSegment newSegment = createSegment(\n        newDataSource,\n        \"2017-10-15T00:00:00.000/2017-10-16T00:00:00.000\",\n        \"2017-10-15T20:19:12.565Z\",\n        \"wikipedia2/index/y=2017/m=10/d=15/2017-10-16T20:19:12.565Z/0/index.zip\",\n        0\n    );\n\n    publisher.publishSegment(newSegment);\n    awaitDataSourceAppeared(newDataSource);\n    Assert.assertNotNull(sqlSegmentsMetadataManager.getImmutableDataSourceWithUsedSegments(newDataSource));\n\n    Assert.assertTrue(sqlSegmentsMetadataManager.markSegmentAsUnused(newSegment.getId().toString()));\n    awaitDataSourceDisappeared(newDataSource);\n    Assert.assertNull(sqlSegmentsMetadataManager.getImmutableDataSourceWithUsedSegments(newDataSource));\n  }", "signature": "void testMarkSegmentAsUnused()", "full_signature": "@Test(timeout = 60_000) public void testMarkSegmentAsUnused()", "class_method_signature": "SqlSegmentsMetadataManagerTest.testMarkSegmentAsUnused()", "testcase": true, "constructor": false, "invocations": ["startPollingDatabasePeriodically", "poll", "assertTrue", "isPollingDatabasePeriodically", "createSegment", "publishSegment", "awaitDataSourceAppeared", "assertNotNull", "getImmutableDataSourceWithUsedSegments", "assertTrue", "markSegmentAsUnused", "toString", "getId", "awaitDataSourceDisappeared", "assertNull", "getImmutableDataSourceWithUsedSegments"]}, "focal_class": {"identifier": "SqlSegmentsMetadataManager", "superclass": "", "interfaces": "implements SegmentsMetadataManager", "fields": [{"original_string": "private static final EmittingLogger log = new EmittingLogger(SqlSegmentsMetadataManager.class);", "modifier": "private static final", "type": "EmittingLogger", "declarator": "log = new EmittingLogger(SqlSegmentsMetadataManager.class)", "var_name": "log"}, {"original_string": "private final ReentrantReadWriteLock startStopPollLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "startStopPollLock = new ReentrantReadWriteLock()", "var_name": "startStopPollLock"}, {"original_string": "private final Object pollLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "pollLock = new Object()", "var_name": "pollLock"}, {"original_string": "private final ObjectMapper jsonMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "jsonMapper", "var_name": "jsonMapper"}, {"original_string": "private final Duration periodicPollDelay;", "modifier": "private final", "type": "Duration", "declarator": "periodicPollDelay", "var_name": "periodicPollDelay"}, {"original_string": "private final Supplier<MetadataStorageTablesConfig> dbTables;", "modifier": "private final", "type": "Supplier<MetadataStorageTablesConfig>", "declarator": "dbTables", "var_name": "dbTables"}, {"original_string": "private final SQLMetadataConnector connector;", "modifier": "private final", "type": "SQLMetadataConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private volatile @MonotonicNonNull DataSourcesSnapshot dataSourcesSnapshot = null;", "modifier": "private volatile @MonotonicNonNull", "type": "DataSourcesSnapshot", "declarator": "dataSourcesSnapshot = null", "var_name": "dataSourcesSnapshot"}, {"original_string": "private volatile @Nullable DatabasePoll latestDatabasePoll = null;", "modifier": "private volatile @Nullable", "type": "DatabasePoll", "declarator": "latestDatabasePoll = null", "var_name": "latestDatabasePoll"}, {"original_string": "@GuardedBy(\"startStopPollLock\")\n  private @Nullable Future<?> periodicPollTaskFuture = null;", "modifier": "@GuardedBy(\"startStopPollLock\")\n  private @Nullable", "type": "Future<?>", "declarator": "periodicPollTaskFuture = null", "var_name": "periodicPollTaskFuture"}, {"original_string": "@GuardedBy(\"startStopPollLock\")\n  private long startPollingCount = 0;", "modifier": "@GuardedBy(\"startStopPollLock\")\n  private", "type": "long", "declarator": "startPollingCount = 0", "var_name": "startPollingCount"}, {"original_string": "@GuardedBy(\"startStopPollLock\")\n  private long currentStartPollingOrder = -1;", "modifier": "@GuardedBy(\"startStopPollLock\")\n  private", "type": "long", "declarator": "currentStartPollingOrder = -1", "var_name": "currentStartPollingOrder"}, {"original_string": "@GuardedBy(\"startStopPollLock\")\n  private @Nullable ScheduledExecutorService exec = null;", "modifier": "@GuardedBy(\"startStopPollLock\")\n  private @Nullable", "type": "ScheduledExecutorService", "declarator": "exec = null", "var_name": "exec"}], "methods": [{"identifier": "SqlSegmentsMetadataManager", "parameters": "(\n      ObjectMapper jsonMapper,\n      Supplier<SegmentsMetadataManagerConfig> config,\n      Supplier<MetadataStorageTablesConfig> dbTables,\n      SQLMetadataConnector connector\n  )", "modifiers": "@Inject public", "return": "", "signature": " SqlSegmentsMetadataManager(\n      ObjectMapper jsonMapper,\n      Supplier<SegmentsMetadataManagerConfig> config,\n      Supplier<MetadataStorageTablesConfig> dbTables,\n      SQLMetadataConnector connector\n  )", "full_signature": "@Inject public  SqlSegmentsMetadataManager(\n      ObjectMapper jsonMapper,\n      Supplier<SegmentsMetadataManagerConfig> config,\n      Supplier<MetadataStorageTablesConfig> dbTables,\n      SQLMetadataConnector connector\n  )", "class_method_signature": "SqlSegmentsMetadataManager.SqlSegmentsMetadataManager(\n      ObjectMapper jsonMapper,\n      Supplier<SegmentsMetadataManagerConfig> config,\n      Supplier<MetadataStorageTablesConfig> dbTables,\n      SQLMetadataConnector connector\n  )", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@LifecycleStart public", "return": "void", "signature": "void start()", "full_signature": "@LifecycleStart public void start()", "class_method_signature": "SqlSegmentsMetadataManager.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@LifecycleStop public", "return": "void", "signature": "void stop()", "full_signature": "@LifecycleStop public void stop()", "class_method_signature": "SqlSegmentsMetadataManager.stop()", "testcase": false, "constructor": false}, {"identifier": "startPollingDatabasePeriodically", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startPollingDatabasePeriodically()", "full_signature": "@Override public void startPollingDatabasePeriodically()", "class_method_signature": "SqlSegmentsMetadataManager.startPollingDatabasePeriodically()", "testcase": false, "constructor": false}, {"identifier": "createPollTaskForStartOrder", "parameters": "(long startOrder, PeriodicDatabasePoll periodicDatabasePoll)", "modifiers": "private", "return": "Runnable", "signature": "Runnable createPollTaskForStartOrder(long startOrder, PeriodicDatabasePoll periodicDatabasePoll)", "full_signature": "private Runnable createPollTaskForStartOrder(long startOrder, PeriodicDatabasePoll periodicDatabasePoll)", "class_method_signature": "SqlSegmentsMetadataManager.createPollTaskForStartOrder(long startOrder, PeriodicDatabasePoll periodicDatabasePoll)", "testcase": false, "constructor": false}, {"identifier": "isPollingDatabasePeriodically", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPollingDatabasePeriodically()", "full_signature": "@Override public boolean isPollingDatabasePeriodically()", "class_method_signature": "SqlSegmentsMetadataManager.isPollingDatabasePeriodically()", "testcase": false, "constructor": false}, {"identifier": "stopPollingDatabasePeriodically", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopPollingDatabasePeriodically()", "full_signature": "@Override public void stopPollingDatabasePeriodically()", "class_method_signature": "SqlSegmentsMetadataManager.stopPollingDatabasePeriodically()", "testcase": false, "constructor": false}, {"identifier": "useLatestIfWithinDelayOrPerformNewDatabasePoll", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void useLatestIfWithinDelayOrPerformNewDatabasePoll()", "full_signature": "private void useLatestIfWithinDelayOrPerformNewDatabasePoll()", "class_method_signature": "SqlSegmentsMetadataManager.useLatestIfWithinDelayOrPerformNewDatabasePoll()", "testcase": false, "constructor": false}, {"identifier": "useLatestSnapshotIfWithinDelay", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean useLatestSnapshotIfWithinDelay()", "full_signature": "@VisibleForTesting boolean useLatestSnapshotIfWithinDelay()", "class_method_signature": "SqlSegmentsMetadataManager.useLatestSnapshotIfWithinDelay()", "testcase": false, "constructor": false}, {"identifier": "forceOrWaitOngoingDatabasePoll", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void forceOrWaitOngoingDatabasePoll()", "full_signature": "@VisibleForTesting void forceOrWaitOngoingDatabasePoll()", "class_method_signature": "SqlSegmentsMetadataManager.forceOrWaitOngoingDatabasePoll()", "testcase": false, "constructor": false}, {"identifier": "doOnDemandPoll", "parameters": "(OnDemandDatabasePoll onDemandPoll)", "modifiers": "private", "return": "void", "signature": "void doOnDemandPoll(OnDemandDatabasePoll onDemandPoll)", "full_signature": "private void doOnDemandPoll(OnDemandDatabasePoll onDemandPoll)", "class_method_signature": "SqlSegmentsMetadataManager.doOnDemandPoll(OnDemandDatabasePoll onDemandPoll)", "testcase": false, "constructor": false}, {"identifier": "markSegmentAsUsed", "parameters": "(final String segmentId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean markSegmentAsUsed(final String segmentId)", "full_signature": "@Override public boolean markSegmentAsUsed(final String segmentId)", "class_method_signature": "SqlSegmentsMetadataManager.markSegmentAsUsed(final String segmentId)", "testcase": false, "constructor": false}, {"identifier": "markAsUsedAllNonOvershadowedSegmentsInDataSource", "parameters": "(final String dataSource)", "modifiers": "@Override public", "return": "int", "signature": "int markAsUsedAllNonOvershadowedSegmentsInDataSource(final String dataSource)", "full_signature": "@Override public int markAsUsedAllNonOvershadowedSegmentsInDataSource(final String dataSource)", "class_method_signature": "SqlSegmentsMetadataManager.markAsUsedAllNonOvershadowedSegmentsInDataSource(final String dataSource)", "testcase": false, "constructor": false}, {"identifier": "markAsUsedNonOvershadowedSegmentsInInterval", "parameters": "(final String dataSource, final Interval interval)", "modifiers": "@Override public", "return": "int", "signature": "int markAsUsedNonOvershadowedSegmentsInInterval(final String dataSource, final Interval interval)", "full_signature": "@Override public int markAsUsedNonOvershadowedSegmentsInInterval(final String dataSource, final Interval interval)", "class_method_signature": "SqlSegmentsMetadataManager.markAsUsedNonOvershadowedSegmentsInInterval(final String dataSource, final Interval interval)", "testcase": false, "constructor": false}, {"identifier": "doMarkAsUsedNonOvershadowedSegments", "parameters": "(String dataSourceName, @Nullable Interval interval)", "modifiers": "private", "return": "int", "signature": "int doMarkAsUsedNonOvershadowedSegments(String dataSourceName, @Nullable Interval interval)", "full_signature": "private int doMarkAsUsedNonOvershadowedSegments(String dataSourceName, @Nullable Interval interval)", "class_method_signature": "SqlSegmentsMetadataManager.doMarkAsUsedNonOvershadowedSegments(String dataSourceName, @Nullable Interval interval)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(Iterator<?> iterator)", "modifiers": "private static", "return": "void", "signature": "void consume(Iterator<?> iterator)", "full_signature": "private static void consume(Iterator<?> iterator)", "class_method_signature": "SqlSegmentsMetadataManager.consume(Iterator<?> iterator)", "testcase": false, "constructor": false}, {"identifier": "markNonOvershadowedSegmentsAsUsed", "parameters": "(\n      List<DataSegment> unusedSegments,\n      VersionedIntervalTimeline<String, DataSegment> timeline\n  )", "modifiers": "private", "return": "int", "signature": "int markNonOvershadowedSegmentsAsUsed(\n      List<DataSegment> unusedSegments,\n      VersionedIntervalTimeline<String, DataSegment> timeline\n  )", "full_signature": "private int markNonOvershadowedSegmentsAsUsed(\n      List<DataSegment> unusedSegments,\n      VersionedIntervalTimeline<String, DataSegment> timeline\n  )", "class_method_signature": "SqlSegmentsMetadataManager.markNonOvershadowedSegmentsAsUsed(\n      List<DataSegment> unusedSegments,\n      VersionedIntervalTimeline<String, DataSegment> timeline\n  )", "testcase": false, "constructor": false}, {"identifier": "markAsUsedNonOvershadowedSegments", "parameters": "(final String dataSource, final Set<String> segmentIds)", "modifiers": "@Override public", "return": "int", "signature": "int markAsUsedNonOvershadowedSegments(final String dataSource, final Set<String> segmentIds)", "full_signature": "@Override public int markAsUsedNonOvershadowedSegments(final String dataSource, final Set<String> segmentIds)", "class_method_signature": "SqlSegmentsMetadataManager.markAsUsedNonOvershadowedSegments(final String dataSource, final Set<String> segmentIds)", "testcase": false, "constructor": false}, {"identifier": "retrieveUnusedSegments", "parameters": "(\n      final String dataSource,\n      final Set<String> segmentIds,\n      final Handle handle\n  )", "modifiers": "private", "return": "List<DataSegment>", "signature": "List<DataSegment> retrieveUnusedSegments(\n      final String dataSource,\n      final Set<String> segmentIds,\n      final Handle handle\n  )", "full_signature": "private List<DataSegment> retrieveUnusedSegments(\n      final String dataSource,\n      final Set<String> segmentIds,\n      final Handle handle\n  )", "class_method_signature": "SqlSegmentsMetadataManager.retrieveUnusedSegments(\n      final String dataSource,\n      final Set<String> segmentIds,\n      final Handle handle\n  )", "testcase": false, "constructor": false}, {"identifier": "retrieveUsedSegmentsOverlappingIntervals", "parameters": "(\n      final String dataSource,\n      final Collection<Interval> intervals,\n      final Handle handle\n  )", "modifiers": "private", "return": "Iterator<DataSegment>", "signature": "Iterator<DataSegment> retrieveUsedSegmentsOverlappingIntervals(\n      final String dataSource,\n      final Collection<Interval> intervals,\n      final Handle handle\n  )", "full_signature": "private Iterator<DataSegment> retrieveUsedSegmentsOverlappingIntervals(\n      final String dataSource,\n      final Collection<Interval> intervals,\n      final Handle handle\n  )", "class_method_signature": "SqlSegmentsMetadataManager.retrieveUsedSegmentsOverlappingIntervals(\n      final String dataSource,\n      final Collection<Interval> intervals,\n      final Handle handle\n  )", "testcase": false, "constructor": false}, {"identifier": "markSegmentsAsUsed", "parameters": "(final List<String> segmentIds)", "modifiers": "private", "return": "int", "signature": "int markSegmentsAsUsed(final List<String> segmentIds)", "full_signature": "private int markSegmentsAsUsed(final List<String> segmentIds)", "class_method_signature": "SqlSegmentsMetadataManager.markSegmentsAsUsed(final List<String> segmentIds)", "testcase": false, "constructor": false}, {"identifier": "markAsUnusedAllSegmentsInDataSource", "parameters": "(final String dataSource)", "modifiers": "@Override public", "return": "int", "signature": "int markAsUnusedAllSegmentsInDataSource(final String dataSource)", "full_signature": "@Override public int markAsUnusedAllSegmentsInDataSource(final String dataSource)", "class_method_signature": "SqlSegmentsMetadataManager.markAsUnusedAllSegmentsInDataSource(final String dataSource)", "testcase": false, "constructor": false}, {"identifier": "markSegmentAsUnused", "parameters": "(final String segmentId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean markSegmentAsUnused(final String segmentId)", "full_signature": "@Override public boolean markSegmentAsUnused(final String segmentId)", "class_method_signature": "SqlSegmentsMetadataManager.markSegmentAsUnused(final String segmentId)", "testcase": false, "constructor": false}, {"identifier": "markSegmentsAsUnused", "parameters": "(String dataSourceName, Set<String> segmentIds)", "modifiers": "@Override public", "return": "int", "signature": "int markSegmentsAsUnused(String dataSourceName, Set<String> segmentIds)", "full_signature": "@Override public int markSegmentsAsUnused(String dataSourceName, Set<String> segmentIds)", "class_method_signature": "SqlSegmentsMetadataManager.markSegmentsAsUnused(String dataSourceName, Set<String> segmentIds)", "testcase": false, "constructor": false}, {"identifier": "markAsUnusedSegmentsInInterval", "parameters": "(String dataSourceName, Interval interval)", "modifiers": "@Override public", "return": "int", "signature": "int markAsUnusedSegmentsInInterval(String dataSourceName, Interval interval)", "full_signature": "@Override public int markAsUnusedSegmentsInInterval(String dataSourceName, Interval interval)", "class_method_signature": "SqlSegmentsMetadataManager.markAsUnusedSegmentsInInterval(String dataSourceName, Interval interval)", "testcase": false, "constructor": false}, {"identifier": "markSegmentAsUnusedInDatabase", "parameters": "(String segmentId)", "modifiers": "private", "return": "boolean", "signature": "boolean markSegmentAsUnusedInDatabase(String segmentId)", "full_signature": "private boolean markSegmentAsUnusedInDatabase(String segmentId)", "class_method_signature": "SqlSegmentsMetadataManager.markSegmentAsUnusedInDatabase(String segmentId)", "testcase": false, "constructor": false}, {"identifier": "computeNumChangedSegments", "parameters": "(List<String> segmentIds, int[] segmentChanges)", "modifiers": "private static", "return": "int", "signature": "int computeNumChangedSegments(List<String> segmentIds, int[] segmentChanges)", "full_signature": "private static int computeNumChangedSegments(List<String> segmentIds, int[] segmentChanges)", "class_method_signature": "SqlSegmentsMetadataManager.computeNumChangedSegments(List<String> segmentIds, int[] segmentChanges)", "testcase": false, "constructor": false}, {"identifier": "getImmutableDataSourceWithUsedSegments", "parameters": "(String dataSourceName)", "modifiers": "@Override public @Nullable", "return": "ImmutableDruidDataSource", "signature": "ImmutableDruidDataSource getImmutableDataSourceWithUsedSegments(String dataSourceName)", "full_signature": "@Override public @Nullable ImmutableDruidDataSource getImmutableDataSourceWithUsedSegments(String dataSourceName)", "class_method_signature": "SqlSegmentsMetadataManager.getImmutableDataSourceWithUsedSegments(String dataSourceName)", "testcase": false, "constructor": false}, {"identifier": "getImmutableDataSourcesWithAllUsedSegments", "parameters": "()", "modifiers": "@Override public", "return": "Collection<ImmutableDruidDataSource>", "signature": "Collection<ImmutableDruidDataSource> getImmutableDataSourcesWithAllUsedSegments()", "full_signature": "@Override public Collection<ImmutableDruidDataSource> getImmutableDataSourcesWithAllUsedSegments()", "class_method_signature": "SqlSegmentsMetadataManager.getImmutableDataSourcesWithAllUsedSegments()", "testcase": false, "constructor": false}, {"identifier": "getOvershadowedSegments", "parameters": "()", "modifiers": "@Override public", "return": "Set<SegmentId>", "signature": "Set<SegmentId> getOvershadowedSegments()", "full_signature": "@Override public Set<SegmentId> getOvershadowedSegments()", "class_method_signature": "SqlSegmentsMetadataManager.getOvershadowedSegments()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotOfDataSourcesWithAllUsedSegments", "parameters": "()", "modifiers": "@Override public", "return": "DataSourcesSnapshot", "signature": "DataSourcesSnapshot getSnapshotOfDataSourcesWithAllUsedSegments()", "full_signature": "@Override public DataSourcesSnapshot getSnapshotOfDataSourcesWithAllUsedSegments()", "class_method_signature": "SqlSegmentsMetadataManager.getSnapshotOfDataSourcesWithAllUsedSegments()", "testcase": false, "constructor": false}, {"identifier": "getDataSourcesSnapshot", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "DataSourcesSnapshot", "signature": "DataSourcesSnapshot getDataSourcesSnapshot()", "full_signature": "@VisibleForTesting DataSourcesSnapshot getDataSourcesSnapshot()", "class_method_signature": "SqlSegmentsMetadataManager.getDataSourcesSnapshot()", "testcase": false, "constructor": false}, {"identifier": "getLatestDatabasePoll", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "DatabasePoll", "signature": "DatabasePoll getLatestDatabasePoll()", "full_signature": "@VisibleForTesting DatabasePoll getLatestDatabasePoll()", "class_method_signature": "SqlSegmentsMetadataManager.getLatestDatabasePoll()", "testcase": false, "constructor": false}, {"identifier": "iterateAllUsedSegments", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<DataSegment>", "signature": "Iterable<DataSegment> iterateAllUsedSegments()", "full_signature": "@Override public Iterable<DataSegment> iterateAllUsedSegments()", "class_method_signature": "SqlSegmentsMetadataManager.iterateAllUsedSegments()", "testcase": false, "constructor": false}, {"identifier": "iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval", "parameters": "(String datasource,\n                                                                                                    Interval interval,\n                                                                                                    boolean requiresLatest)", "modifiers": "@Override public", "return": "Optional<Iterable<DataSegment>>", "signature": "Optional<Iterable<DataSegment>> iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(String datasource,\n                                                                                                    Interval interval,\n                                                                                                    boolean requiresLatest)", "full_signature": "@Override public Optional<Iterable<DataSegment>> iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(String datasource,\n                                                                                                    Interval interval,\n                                                                                                    boolean requiresLatest)", "class_method_signature": "SqlSegmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(String datasource,\n                                                                                                    Interval interval,\n                                                                                                    boolean requiresLatest)", "testcase": false, "constructor": false}, {"identifier": "retrieveAllDataSourceNames", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> retrieveAllDataSourceNames()", "full_signature": "@Override public Set<String> retrieveAllDataSourceNames()", "class_method_signature": "SqlSegmentsMetadataManager.retrieveAllDataSourceNames()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void poll()", "full_signature": "@Override public void poll()", "class_method_signature": "SqlSegmentsMetadataManager.poll()", "testcase": false, "constructor": false}, {"identifier": "doPoll", "parameters": "()", "modifiers": "@GuardedBy(\"pollLock\") private", "return": "void", "signature": "void doPoll()", "full_signature": "@GuardedBy(\"pollLock\") private void doPoll()", "class_method_signature": "SqlSegmentsMetadataManager.doPoll()", "testcase": false, "constructor": false}, {"identifier": "createDefaultDataSourceProperties", "parameters": "()", "modifiers": "private static", "return": "ImmutableMap<String, String>", "signature": "ImmutableMap<String, String> createDefaultDataSourceProperties()", "full_signature": "private static ImmutableMap<String, String> createDefaultDataSourceProperties()", "class_method_signature": "SqlSegmentsMetadataManager.createDefaultDataSourceProperties()", "testcase": false, "constructor": false}, {"identifier": "replaceWithExistingSegmentIfPresent", "parameters": "(DataSegment segment)", "modifiers": "private", "return": "DataSegment", "signature": "DataSegment replaceWithExistingSegmentIfPresent(DataSegment segment)", "full_signature": "private DataSegment replaceWithExistingSegmentIfPresent(DataSegment segment)", "class_method_signature": "SqlSegmentsMetadataManager.replaceWithExistingSegmentIfPresent(DataSegment segment)", "testcase": false, "constructor": false}, {"identifier": "getSegmentsTable", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getSegmentsTable()", "full_signature": "private String getSegmentsTable()", "class_method_signature": "SqlSegmentsMetadataManager.getSegmentsTable()", "testcase": false, "constructor": false}, {"identifier": "getUnusedSegmentIntervals", "parameters": "(final String dataSource, final DateTime maxEndTime, final int limit)", "modifiers": "@Override public", "return": "List<Interval>", "signature": "List<Interval> getUnusedSegmentIntervals(final String dataSource, final DateTime maxEndTime, final int limit)", "full_signature": "@Override public List<Interval> getUnusedSegmentIntervals(final String dataSource, final DateTime maxEndTime, final int limit)", "class_method_signature": "SqlSegmentsMetadataManager.getUnusedSegmentIntervals(final String dataSource, final DateTime maxEndTime, final int limit)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/metadata/SqlSegmentsMetadataManager.java"}, "focal_method": {"identifier": "markSegmentAsUnused", "parameters": "(final String segmentId)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean markSegmentAsUnused(final String segmentId)\n  {\n    try {\n      return markSegmentAsUnusedInDatabase(segmentId);\n    }\n    catch (RuntimeException e) {\n      log.error(e, \"Exception marking segment [%s] as unused\", segmentId);\n      throw e;\n    }\n  }", "signature": "boolean markSegmentAsUnused(final String segmentId)", "full_signature": "@Override public boolean markSegmentAsUnused(final String segmentId)", "class_method_signature": "SqlSegmentsMetadataManager.markSegmentAsUnused(final String segmentId)", "testcase": false, "constructor": false, "invocations": ["markSegmentAsUnusedInDatabase", "error"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}