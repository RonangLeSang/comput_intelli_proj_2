{"test_class": {"identifier": "TaskMonitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SPLIT_NUM = 10;", "modifier": "private static final", "type": "int", "declarator": "SPLIT_NUM = 10", "var_name": "SPLIT_NUM"}, {"original_string": "private final ExecutorService taskRunner = Execs.multiThreaded(5, \"task-monitor-test-%d\");", "modifier": "private final", "type": "ExecutorService", "declarator": "taskRunner = Execs.multiThreaded(5, \"task-monitor-test-%d\")", "var_name": "taskRunner"}, {"original_string": "private final ConcurrentMap<String, TaskState> tasks = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, TaskState>", "declarator": "tasks = new ConcurrentHashMap<>()", "var_name": "tasks"}, {"original_string": "private final TaskMonitor<TestTask> monitor = new TaskMonitor<>(new TestIndexingServiceClient(), 3, SPLIT_NUM);", "modifier": "private final", "type": "TaskMonitor<TestTask>", "declarator": "monitor = new TaskMonitor<>(new TestIndexingServiceClient(), 3, SPLIT_NUM)", "var_name": "monitor"}], "file": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitorTest.java"}, "test_case": {"identifier": "testRetry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRetry() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<TestTaskSpec> specs = IntStream\n        .range(0, 10)\n        .mapToObj(\n            i -> new TestTaskSpec(\n                \"specId\" + i,\n                \"groupId\",\n                \"supervisorId\",\n                null,\n                new IntegerInputSplit(i),\n                100L,\n                2,\n                false\n            )\n        )\n        .collect(Collectors.toList());\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs\n        .stream()\n        .map(monitor::submit)\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      // # of threads of taskRunner is 5, and each task is expected to be run 3 times (with 2 retries), so the expected\n      // max timeout is 6 sec. We additionally wait 4 more seconds here to make sure the test passes.\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getStatusCode());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n\n      final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId());\n      Assert.assertNotNull(taskHistory);\n\n      final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory();\n      Assert.assertNotNull(attemptHistory);\n      Assert.assertEquals(3, attemptHistory.size());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(0).getStatusCode());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(1).getStatusCode());\n    }\n  }", "signature": "void testRetry()", "full_signature": "@Test public void testRetry()", "class_method_signature": "TaskMonitorTest.testRetry()", "testcase": true, "constructor": false, "invocations": ["collect", "mapToObj", "range", "toList", "collect", "map", "stream", "toList", "size", "get", "get", "assertEquals", "getSupervisorTaskId", "getSpec", "assertEquals", "getId", "getSpec", "assertNotNull", "getLastStatus", "assertEquals", "getStatusCode", "getLastStatus", "assertEquals", "getLastState", "getCompleteSubTaskSpecHistory", "getId", "get", "assertNotNull", "getAttemptHistory", "assertNotNull", "assertEquals", "size", "assertEquals", "getStatusCode", "get", "assertEquals", "getStatusCode", "get"]}, "focal_class": {"identifier": "TaskMonitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(TaskMonitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(TaskMonitor.class)", "var_name": "log"}, {"original_string": "private final ScheduledExecutorService taskStatusChecker = Execs.scheduledSingleThreaded((\"task-monitor-%d\"));", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "taskStatusChecker = Execs.scheduledSingleThreaded((\"task-monitor-%d\"))", "var_name": "taskStatusChecker"}, {"original_string": "private final ConcurrentMap<String, MonitorEntry> runningTasks = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, MonitorEntry>", "declarator": "runningTasks = new ConcurrentHashMap<>()", "var_name": "runningTasks"}, {"original_string": "private final ConcurrentMap<String, TaskHistory<T>> taskHistories = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, TaskHistory<T>>", "declarator": "taskHistories = new ConcurrentHashMap<>()", "var_name": "taskHistories"}, {"original_string": "private final Object taskCountLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "taskCountLock = new Object()", "var_name": "taskCountLock"}, {"original_string": "private final Object startStopLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "startStopLock = new Object()", "var_name": "startStopLock"}, {"original_string": "private final IndexingServiceClient indexingServiceClient;", "modifier": "private final", "type": "IndexingServiceClient", "declarator": "indexingServiceClient", "var_name": "indexingServiceClient"}, {"original_string": "private final int maxRetry;", "modifier": "private final", "type": "int", "declarator": "maxRetry", "var_name": "maxRetry"}, {"original_string": "private final int estimatedNumSucceededTasks;", "modifier": "private final", "type": "int", "declarator": "estimatedNumSucceededTasks", "var_name": "estimatedNumSucceededTasks"}, {"original_string": "@GuardedBy(\"taskCountLock\")\n  private int numRunningTasks;", "modifier": "@GuardedBy(\"taskCountLock\")\n  private", "type": "int", "declarator": "numRunningTasks", "var_name": "numRunningTasks"}, {"original_string": "@GuardedBy(\"taskCountLock\")\n  private int numSucceededTasks;", "modifier": "@GuardedBy(\"taskCountLock\")\n  private", "type": "int", "declarator": "numSucceededTasks", "var_name": "numSucceededTasks"}, {"original_string": "@GuardedBy(\"taskCountLock\")\n  private int numFailedTasks;", "modifier": "@GuardedBy(\"taskCountLock\")\n  private", "type": "int", "declarator": "numFailedTasks", "var_name": "numFailedTasks"}, {"original_string": "private int numCanceledTasks;", "modifier": "private", "type": "int", "declarator": "numCanceledTasks", "var_name": "numCanceledTasks"}, {"original_string": "@GuardedBy(\"startStopLock\")\n  private boolean running = false;", "modifier": "@GuardedBy(\"startStopLock\")\n  private", "type": "boolean", "declarator": "running = false", "var_name": "running"}], "methods": [{"identifier": "TaskMonitor", "parameters": "(IndexingServiceClient indexingServiceClient, int maxRetry, int estimatedNumSucceededTasks)", "modifiers": "", "return": "", "signature": " TaskMonitor(IndexingServiceClient indexingServiceClient, int maxRetry, int estimatedNumSucceededTasks)", "full_signature": "  TaskMonitor(IndexingServiceClient indexingServiceClient, int maxRetry, int estimatedNumSucceededTasks)", "class_method_signature": "TaskMonitor.TaskMonitor(IndexingServiceClient indexingServiceClient, int maxRetry, int estimatedNumSucceededTasks)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "(long taskStatusCheckingPeriod)", "modifiers": "public", "return": "void", "signature": "void start(long taskStatusCheckingPeriod)", "full_signature": "public void start(long taskStatusCheckingPeriod)", "class_method_signature": "TaskMonitor.start(long taskStatusCheckingPeriod)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "TaskMonitor.stop()", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(SubTaskSpec<T> spec)", "modifiers": "public", "return": "ListenableFuture<SubTaskCompleteEvent<T>>", "signature": "ListenableFuture<SubTaskCompleteEvent<T>> submit(SubTaskSpec<T> spec)", "full_signature": "public ListenableFuture<SubTaskCompleteEvent<T>> submit(SubTaskSpec<T> spec)", "class_method_signature": "TaskMonitor.submit(SubTaskSpec<T> spec)", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "modifiers": "private", "return": "void", "signature": "void retry(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "full_signature": "private void retry(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "class_method_signature": "TaskMonitor.retry(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "testcase": false, "constructor": false}, {"identifier": "submitTask", "parameters": "(SubTaskSpec<T> spec, int numAttempts)", "modifiers": "private", "return": "T", "signature": "T submitTask(SubTaskSpec<T> spec, int numAttempts)", "full_signature": "private T submitTask(SubTaskSpec<T> spec, int numAttempts)", "class_method_signature": "TaskMonitor.submitTask(SubTaskSpec<T> spec, int numAttempts)", "testcase": false, "constructor": false}, {"identifier": "isUnknownTypeIdException", "parameters": "(Throwable e)", "modifiers": "private", "return": "boolean", "signature": "boolean isUnknownTypeIdException(Throwable e)", "full_signature": "private boolean isUnknownTypeIdException(Throwable e)", "class_method_signature": "TaskMonitor.isUnknownTypeIdException(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "incrementNumRunningTasks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void incrementNumRunningTasks()", "full_signature": "private void incrementNumRunningTasks()", "class_method_signature": "TaskMonitor.incrementNumRunningTasks()", "testcase": false, "constructor": false}, {"identifier": "incrementNumSucceededTasks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void incrementNumSucceededTasks()", "full_signature": "private void incrementNumSucceededTasks()", "class_method_signature": "TaskMonitor.incrementNumSucceededTasks()", "testcase": false, "constructor": false}, {"identifier": "incrementNumFailedTasks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void incrementNumFailedTasks()", "full_signature": "private void incrementNumFailedTasks()", "class_method_signature": "TaskMonitor.incrementNumFailedTasks()", "testcase": false, "constructor": false}, {"identifier": "getNumSucceededTasks", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumSucceededTasks()", "full_signature": " int getNumSucceededTasks()", "class_method_signature": "TaskMonitor.getNumSucceededTasks()", "testcase": false, "constructor": false}, {"identifier": "getNumRunningTasks", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumRunningTasks()", "full_signature": " int getNumRunningTasks()", "class_method_signature": "TaskMonitor.getNumRunningTasks()", "testcase": false, "constructor": false}, {"identifier": "getNumCanceledTasks", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int getNumCanceledTasks()", "full_signature": "@VisibleForTesting int getNumCanceledTasks()", "class_method_signature": "TaskMonitor.getNumCanceledTasks()", "testcase": false, "constructor": false}, {"identifier": "getProgress", "parameters": "()", "modifiers": "", "return": "ParallelIndexingPhaseProgress", "signature": "ParallelIndexingPhaseProgress getProgress()", "full_signature": " ParallelIndexingPhaseProgress getProgress()", "class_method_signature": "TaskMonitor.getProgress()", "testcase": false, "constructor": false}, {"identifier": "getRunningTaskIds", "parameters": "()", "modifiers": "", "return": "Set<String>", "signature": "Set<String> getRunningTaskIds()", "full_signature": " Set<String> getRunningTaskIds()", "class_method_signature": "TaskMonitor.getRunningTaskIds()", "testcase": false, "constructor": false}, {"identifier": "getRunningSubTaskSpecs", "parameters": "()", "modifiers": "", "return": "List<SubTaskSpec<T>>", "signature": "List<SubTaskSpec<T>> getRunningSubTaskSpecs()", "full_signature": " List<SubTaskSpec<T>> getRunningSubTaskSpecs()", "class_method_signature": "TaskMonitor.getRunningSubTaskSpecs()", "testcase": false, "constructor": false}, {"identifier": "getRunningTaskMonitorEntry", "parameters": "(String subTaskSpecId)", "modifiers": "@Nullable", "return": "MonitorEntry", "signature": "MonitorEntry getRunningTaskMonitorEntry(String subTaskSpecId)", "full_signature": "@Nullable MonitorEntry getRunningTaskMonitorEntry(String subTaskSpecId)", "class_method_signature": "TaskMonitor.getRunningTaskMonitorEntry(String subTaskSpecId)", "testcase": false, "constructor": false}, {"identifier": "getCompleteSubTaskSpecs", "parameters": "()", "modifiers": "", "return": "List<SubTaskSpec<T>>", "signature": "List<SubTaskSpec<T>> getCompleteSubTaskSpecs()", "full_signature": " List<SubTaskSpec<T>> getCompleteSubTaskSpecs()", "class_method_signature": "TaskMonitor.getCompleteSubTaskSpecs()", "testcase": false, "constructor": false}, {"identifier": "getCompleteSubTaskSpecHistory", "parameters": "(String subTaskSpecId)", "modifiers": "@Nullable", "return": "TaskHistory<T>", "signature": "TaskHistory<T> getCompleteSubTaskSpecHistory(String subTaskSpecId)", "full_signature": "@Nullable TaskHistory<T> getCompleteSubTaskSpecHistory(String subTaskSpecId)", "class_method_signature": "TaskMonitor.getCompleteSubTaskSpecHistory(String subTaskSpecId)", "testcase": false, "constructor": false}], "file": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitor.java"}, "focal_method": {"identifier": "retry", "parameters": "(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "modifiers": "private", "return": "void", "body": "private void retry(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)\n  {\n    synchronized (startStopLock) {\n      if (running) {\n        final SubTaskSpec<T> spec = monitorEntry.spec;\n        final T task = submitTask(spec, monitorEntry.taskHistory.size() + 1);\n        log.info(\"Submitted a new task[%s] for retrying spec[%s]\", task.getId(), spec.getId());\n        incrementNumRunningTasks();\n\n        runningTasks.put(\n            subTaskSpecId,\n            monitorEntry.withNewRunningTask(\n                task,\n                indexingServiceClient.getTaskStatus(task.getId()).getStatus(),\n                lastFailedTaskStatus\n            )\n        );\n      }\n    }\n  }", "signature": "void retry(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "full_signature": "private void retry(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "class_method_signature": "TaskMonitor.retry(String subTaskSpecId, MonitorEntry monitorEntry, TaskStatusPlus lastFailedTaskStatus)", "testcase": false, "constructor": false, "invocations": ["submitTask", "size", "info", "getId", "getId", "incrementNumRunningTasks", "put", "withNewRunningTask", "getStatus", "getTaskStatus", "getId"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}