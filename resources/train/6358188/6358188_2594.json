{"test_class": {"identifier": "ServerHolderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<DataSegment> SEGMENTS = ImmutableList.of(\n      new DataSegment(\n          \"src1\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container1\", \"blobPath\", \"blobPath1\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      ),\n      new DataSegment(\n          \"src2\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container2\", \"blobPath\", \"blobPath2\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      )\n  );", "modifier": "private static final", "type": "List<DataSegment>", "declarator": "SEGMENTS = ImmutableList.of(\n      new DataSegment(\n          \"src1\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container1\", \"blobPath\", \"blobPath1\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      ),\n      new DataSegment(\n          \"src2\",\n          Intervals.of(\"2015-04-12/2015-04-13\"),\n          \"1\",\n          ImmutableMap.of(\"containerName\", \"container2\", \"blobPath\", \"blobPath2\"),\n          null,\n          null,\n          NoneShardSpec.instance(),\n          0,\n          1\n      )\n  )", "var_name": "SEGMENTS"}, {"original_string": "private static final Map<String, ImmutableDruidDataSource> DATA_SOURCES = ImmutableMap.of(\n      \"src1\", new ImmutableDruidDataSource(\"src1\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(0))),\n      \"src2\", new ImmutableDruidDataSource(\"src2\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(1)))\n  );", "modifier": "private static final", "type": "Map<String, ImmutableDruidDataSource>", "declarator": "DATA_SOURCES = ImmutableMap.of(\n      \"src1\", new ImmutableDruidDataSource(\"src1\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(0))),\n      \"src2\", new ImmutableDruidDataSource(\"src2\", Collections.emptyMap(), Collections.singletonList(SEGMENTS.get(1)))\n  )", "var_name": "DATA_SOURCES"}], "file": "server/src/test/java/org/apache/druid/server/coordinator/ServerHolderTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals()\n  {\n    final ServerHolder h1 = new ServerHolder(\n        new ImmutableDruidServer(\n            new DruidServerMetadata(\"name1\", \"host1\", null, 100L, ServerType.HISTORICAL, \"tier1\", 0),\n            0L,\n            ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n            1\n        ),\n        new LoadQueuePeonTester()\n    );\n\n    final ServerHolder h2 = new ServerHolder(\n        new ImmutableDruidServer(\n            new DruidServerMetadata(\"name2\", \"host1\", null, 200L, ServerType.HISTORICAL, \"tier1\", 0),\n            100L,\n            ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n            1\n        ),\n        new LoadQueuePeonTester()\n    );\n\n    final ServerHolder h3 = new ServerHolder(\n        new ImmutableDruidServer(\n            new DruidServerMetadata(\"name1\", \"host2\", null, 200L, ServerType.HISTORICAL, \"tier1\", 0),\n            100L,\n            ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n            1\n        ),\n        new LoadQueuePeonTester()\n    );\n\n    final ServerHolder h4 = new ServerHolder(\n        new ImmutableDruidServer(\n            new DruidServerMetadata(\"name1\", \"host1\", null, 200L, ServerType.HISTORICAL, \"tier2\", 0),\n            100L,\n            ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n            1\n        ),\n        new LoadQueuePeonTester()\n    );\n\n    final ServerHolder h5 = new ServerHolder(\n        new ImmutableDruidServer(\n            new DruidServerMetadata(\"name1\", \"host1\", null, 100L, ServerType.REALTIME, \"tier1\", 0),\n            0L,\n            ImmutableMap.of(\"src1\", DATA_SOURCES.get(\"src1\")),\n            1\n        ),\n        new LoadQueuePeonTester()\n    );\n\n    Assert.assertEquals(h1, h2);\n    Assert.assertNotEquals(h1, h3);\n    Assert.assertNotEquals(h1, h4);\n    Assert.assertNotEquals(h1, h5);\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "ServerHolderTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["of", "get", "of", "get", "of", "get", "of", "get", "of", "get", "assertEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals"]}, "focal_class": {"identifier": "ServerHolder", "superclass": "", "interfaces": "implements Comparable<ServerHolder>", "fields": [{"original_string": "private static final Logger log = new Logger(ServerHolder.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(ServerHolder.class)", "var_name": "log"}, {"original_string": "private final ImmutableDruidServer server;", "modifier": "private final", "type": "ImmutableDruidServer", "declarator": "server", "var_name": "server"}, {"original_string": "private final LoadQueuePeon peon;", "modifier": "private final", "type": "LoadQueuePeon", "declarator": "peon", "var_name": "peon"}, {"original_string": "private final boolean isDecommissioning;", "modifier": "private final", "type": "boolean", "declarator": "isDecommissioning", "var_name": "isDecommissioning"}], "methods": [{"identifier": "ServerHolder", "parameters": "(ImmutableDruidServer server, LoadQueuePeon peon)", "modifiers": "public", "return": "", "signature": " ServerHolder(ImmutableDruidServer server, LoadQueuePeon peon)", "full_signature": "public  ServerHolder(ImmutableDruidServer server, LoadQueuePeon peon)", "class_method_signature": "ServerHolder.ServerHolder(ImmutableDruidServer server, LoadQueuePeon peon)", "testcase": false, "constructor": true}, {"identifier": "ServerHolder", "parameters": "(ImmutableDruidServer server, LoadQueuePeon peon, boolean isDecommissioning)", "modifiers": "public", "return": "", "signature": " ServerHolder(ImmutableDruidServer server, LoadQueuePeon peon, boolean isDecommissioning)", "full_signature": "public  ServerHolder(ImmutableDruidServer server, LoadQueuePeon peon, boolean isDecommissioning)", "class_method_signature": "ServerHolder.ServerHolder(ImmutableDruidServer server, LoadQueuePeon peon, boolean isDecommissioning)", "testcase": false, "constructor": true}, {"identifier": "getServer", "parameters": "()", "modifiers": "public", "return": "ImmutableDruidServer", "signature": "ImmutableDruidServer getServer()", "full_signature": "public ImmutableDruidServer getServer()", "class_method_signature": "ServerHolder.getServer()", "testcase": false, "constructor": false}, {"identifier": "getPeon", "parameters": "()", "modifiers": "public", "return": "LoadQueuePeon", "signature": "LoadQueuePeon getPeon()", "full_signature": "public LoadQueuePeon getPeon()", "class_method_signature": "ServerHolder.getPeon()", "testcase": false, "constructor": false}, {"identifier": "getMaxSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxSize()", "full_signature": "public long getMaxSize()", "class_method_signature": "ServerHolder.getMaxSize()", "testcase": false, "constructor": false}, {"identifier": "getCurrServerSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCurrServerSize()", "full_signature": "public long getCurrServerSize()", "class_method_signature": "ServerHolder.getCurrServerSize()", "testcase": false, "constructor": false}, {"identifier": "getLoadQueueSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLoadQueueSize()", "full_signature": "public long getLoadQueueSize()", "class_method_signature": "ServerHolder.getLoadQueueSize()", "testcase": false, "constructor": false}, {"identifier": "getSizeUsed", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSizeUsed()", "full_signature": "public long getSizeUsed()", "class_method_signature": "ServerHolder.getSizeUsed()", "testcase": false, "constructor": false}, {"identifier": "getPercentUsed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPercentUsed()", "full_signature": "public double getPercentUsed()", "class_method_signature": "ServerHolder.getPercentUsed()", "testcase": false, "constructor": false}, {"identifier": "isDecommissioning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDecommissioning()", "full_signature": "public boolean isDecommissioning()", "class_method_signature": "ServerHolder.isDecommissioning()", "testcase": false, "constructor": false}, {"identifier": "getAvailableSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getAvailableSize()", "full_signature": "public long getAvailableSize()", "class_method_signature": "ServerHolder.getAvailableSize()", "testcase": false, "constructor": false}, {"identifier": "isServingSegment", "parameters": "(DataSegment segment)", "modifiers": "public", "return": "boolean", "signature": "boolean isServingSegment(DataSegment segment)", "full_signature": "public boolean isServingSegment(DataSegment segment)", "class_method_signature": "ServerHolder.isServingSegment(DataSegment segment)", "testcase": false, "constructor": false}, {"identifier": "isLoadingSegment", "parameters": "(DataSegment segment)", "modifiers": "public", "return": "boolean", "signature": "boolean isLoadingSegment(DataSegment segment)", "full_signature": "public boolean isLoadingSegment(DataSegment segment)", "class_method_signature": "ServerHolder.isLoadingSegment(DataSegment segment)", "testcase": false, "constructor": false}, {"identifier": "isDroppingSegment", "parameters": "(DataSegment segment)", "modifiers": "public", "return": "boolean", "signature": "boolean isDroppingSegment(DataSegment segment)", "full_signature": "public boolean isDroppingSegment(DataSegment segment)", "class_method_signature": "ServerHolder.isDroppingSegment(DataSegment segment)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfSegmentsInQueue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfSegmentsInQueue()", "full_signature": "public int getNumberOfSegmentsInQueue()", "class_method_signature": "ServerHolder.getNumberOfSegmentsInQueue()", "testcase": false, "constructor": false}, {"identifier": "isServingSegment", "parameters": "(SegmentId segmentId)", "modifiers": "public", "return": "boolean", "signature": "boolean isServingSegment(SegmentId segmentId)", "full_signature": "public boolean isServingSegment(SegmentId segmentId)", "class_method_signature": "ServerHolder.isServingSegment(SegmentId segmentId)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(ServerHolder serverHolder)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(ServerHolder serverHolder)", "full_signature": "@Override public int compareTo(ServerHolder serverHolder)", "class_method_signature": "ServerHolder.compareTo(ServerHolder serverHolder)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ServerHolder.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ServerHolder.hashCode()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/coordinator/ServerHolder.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ServerHolder that = (ServerHolder) o;\n\n    if (!this.server.getHost().equals(that.server.getHost())) {\n      return false;\n    }\n\n    if (!this.server.getTier().equals(that.getServer().getTier())) {\n      return false;\n    }\n\n    return this.server.getType().equals(that.getServer().getType());\n  }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ServerHolder.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "getHost", "getHost", "equals", "getTier", "getTier", "getServer", "equals", "getType", "getType", "getServer"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}