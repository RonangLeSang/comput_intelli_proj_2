{"test_class": {"identifier": "GoogleDataSegmentKillerTest", "superclass": "extends EasyMockSupport", "interfaces": "", "fields": [{"original_string": "private static final String KEY_1 = \"key1\";", "modifier": "private static final", "type": "String", "declarator": "KEY_1 = \"key1\"", "var_name": "KEY_1"}, {"original_string": "private static final String KEY_2 = \"key2\";", "modifier": "private static final", "type": "String", "declarator": "KEY_2 = \"key2\"", "var_name": "KEY_2"}, {"original_string": "private static final String BUCKET = \"bucket\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET = \"bucket\"", "var_name": "BUCKET"}, {"original_string": "private static final String PREFIX = \"test/log\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"test/log\"", "var_name": "PREFIX"}, {"original_string": "private static final URI PREFIX_URI = URI.create(StringUtils.format(\"gs://%s/%s\", BUCKET, PREFIX));", "modifier": "private static final", "type": "URI", "declarator": "PREFIX_URI = URI.create(StringUtils.format(\"gs://%s/%s\", BUCKET, PREFIX))", "var_name": "PREFIX_URI"}, {"original_string": "private static final String INDEX_PATH = \"test/2015-04-12T00:00:00.000Z_2015-04-13T00:00:00.000Z/1/0/index.zip\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_PATH = \"test/2015-04-12T00:00:00.000Z_2015-04-13T00:00:00.000Z/1/0/index.zip\"", "var_name": "INDEX_PATH"}, {"original_string": "private static final String DESCRIPTOR_PATH = DataSegmentKiller.descriptorPath(INDEX_PATH);", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTOR_PATH = DataSegmentKiller.descriptorPath(INDEX_PATH)", "var_name": "DESCRIPTOR_PATH"}, {"original_string": "private static final long TIME_0 = 0L;", "modifier": "private static final", "type": "long", "declarator": "TIME_0 = 0L", "var_name": "TIME_0"}, {"original_string": "private static final long TIME_1 = 1L;", "modifier": "private static final", "type": "long", "declarator": "TIME_1 = 1L", "var_name": "TIME_1"}, {"original_string": "private static final int MAX_KEYS = 1;", "modifier": "private static final", "type": "int", "declarator": "MAX_KEYS = 1", "var_name": "MAX_KEYS"}, {"original_string": "private static final Exception RECOVERABLE_EXCEPTION = new HttpResponseException.Builder(429, \"recoverable\", new HttpHeaders()).build();", "modifier": "private static final", "type": "Exception", "declarator": "RECOVERABLE_EXCEPTION = new HttpResponseException.Builder(429, \"recoverable\", new HttpHeaders()).build()", "var_name": "RECOVERABLE_EXCEPTION"}, {"original_string": "private static final Exception NON_RECOVERABLE_EXCEPTION = new HttpResponseException.Builder(404, \"non recoverable\", new HttpHeaders()).build();", "modifier": "private static final", "type": "Exception", "declarator": "NON_RECOVERABLE_EXCEPTION = new HttpResponseException.Builder(404, \"non recoverable\", new HttpHeaders()).build()", "var_name": "NON_RECOVERABLE_EXCEPTION"}, {"original_string": "private static final DataSegment DATA_SEGMENT = new DataSegment(\n      \"test\",\n      Intervals.of(\"2015-04-12/2015-04-13\"),\n      \"1\",\n      ImmutableMap.of(\"bucket\", BUCKET, \"path\", INDEX_PATH),\n      null,\n      null,\n      NoneShardSpec.instance(),\n      0,\n      1\n  );", "modifier": "private static final", "type": "DataSegment", "declarator": "DATA_SEGMENT = new DataSegment(\n      \"test\",\n      Intervals.of(\"2015-04-12/2015-04-13\"),\n      \"1\",\n      ImmutableMap.of(\"bucket\", BUCKET, \"path\", INDEX_PATH),\n      null,\n      null,\n      NoneShardSpec.instance(),\n      0,\n      1\n  )", "var_name": "DATA_SEGMENT"}, {"original_string": "private GoogleStorage storage;", "modifier": "private", "type": "GoogleStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private GoogleAccountConfig accountConfig;", "modifier": "private", "type": "GoogleAccountConfig", "declarator": "accountConfig", "var_name": "accountConfig"}, {"original_string": "private GoogleInputDataConfig inputDataConfig;", "modifier": "private", "type": "GoogleInputDataConfig", "declarator": "inputDataConfig", "var_name": "inputDataConfig"}], "file": "extensions-core/google-extensions/src/test/java/org/apache/druid/storage/google/GoogleDataSegmentKillerTest.java"}, "test_case": {"identifier": "killRetryWithErrorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void killRetryWithErrorTest() throws SegmentLoadingException, IOException\n  {\n    final GoogleJsonResponseException exception = GoogleJsonResponseExceptionFactoryTesting.newMock(\n        JacksonFactory.getDefaultInstance(),\n        500,\n        \"test\"\n    );\n    storage.delete(EasyMock.eq(BUCKET), EasyMock.eq(INDEX_PATH));\n    EasyMock.expectLastCall().andThrow(exception).once().andVoid().once();\n    storage.delete(EasyMock.eq(BUCKET), EasyMock.eq(DESCRIPTOR_PATH));\n    EasyMock.expectLastCall().andThrow(exception).once().andVoid().once();\n\n    replayAll();\n\n    GoogleDataSegmentKiller killer = new GoogleDataSegmentKiller(storage, accountConfig, inputDataConfig);\n\n    killer.kill(DATA_SEGMENT);\n\n    verifyAll();\n  }", "signature": "void killRetryWithErrorTest()", "full_signature": "@Test public void killRetryWithErrorTest()", "class_method_signature": "GoogleDataSegmentKillerTest.killRetryWithErrorTest()", "testcase": true, "constructor": false, "invocations": ["newMock", "getDefaultInstance", "delete", "eq", "eq", "once", "andVoid", "once", "andThrow", "expectLastCall", "delete", "eq", "eq", "once", "andVoid", "once", "andThrow", "expectLastCall", "replayAll", "kill", "verifyAll"]}, "focal_class": {"identifier": "GoogleDataSegmentKiller", "superclass": "", "interfaces": "implements DataSegmentKiller", "fields": [{"original_string": "private static final Logger LOG = new Logger(GoogleDataSegmentKiller.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = new Logger(GoogleDataSegmentKiller.class)", "var_name": "LOG"}, {"original_string": "private final GoogleStorage storage;", "modifier": "private final", "type": "GoogleStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final GoogleAccountConfig accountConfig;", "modifier": "private final", "type": "GoogleAccountConfig", "declarator": "accountConfig", "var_name": "accountConfig"}, {"original_string": "private final GoogleInputDataConfig inputDataConfig;", "modifier": "private final", "type": "GoogleInputDataConfig", "declarator": "inputDataConfig", "var_name": "inputDataConfig"}], "methods": [{"identifier": "GoogleDataSegmentKiller", "parameters": "(\n      final GoogleStorage storage,\n      GoogleAccountConfig accountConfig,\n      GoogleInputDataConfig inputDataConfig\n  )", "modifiers": "@Inject public", "return": "", "signature": " GoogleDataSegmentKiller(\n      final GoogleStorage storage,\n      GoogleAccountConfig accountConfig,\n      GoogleInputDataConfig inputDataConfig\n  )", "full_signature": "@Inject public  GoogleDataSegmentKiller(\n      final GoogleStorage storage,\n      GoogleAccountConfig accountConfig,\n      GoogleInputDataConfig inputDataConfig\n  )", "class_method_signature": "GoogleDataSegmentKiller.GoogleDataSegmentKiller(\n      final GoogleStorage storage,\n      GoogleAccountConfig accountConfig,\n      GoogleInputDataConfig inputDataConfig\n  )", "testcase": false, "constructor": true}, {"identifier": "kill", "parameters": "(DataSegment segment)", "modifiers": "@Override public", "return": "void", "signature": "void kill(DataSegment segment)", "full_signature": "@Override public void kill(DataSegment segment)", "class_method_signature": "GoogleDataSegmentKiller.kill(DataSegment segment)", "testcase": false, "constructor": false}, {"identifier": "deleteIfPresent", "parameters": "(String bucket, String path)", "modifiers": "private", "return": "void", "signature": "void deleteIfPresent(String bucket, String path)", "full_signature": "private void deleteIfPresent(String bucket, String path)", "class_method_signature": "GoogleDataSegmentKiller.deleteIfPresent(String bucket, String path)", "testcase": false, "constructor": false}, {"identifier": "killAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void killAll()", "full_signature": "@Override public void killAll()", "class_method_signature": "GoogleDataSegmentKiller.killAll()", "testcase": false, "constructor": false}], "file": "extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/GoogleDataSegmentKiller.java"}, "focal_method": {"identifier": "kill", "parameters": "(DataSegment segment)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void kill(DataSegment segment) throws SegmentLoadingException\n  {\n    LOG.info(\"Killing segment [%s]\", segment.getId());\n\n    Map<String, Object> loadSpec = segment.getLoadSpec();\n    final String bucket = MapUtils.getString(loadSpec, \"bucket\");\n    final String indexPath = MapUtils.getString(loadSpec, \"path\");\n    final String descriptorPath = DataSegmentKiller.descriptorPath(indexPath);\n\n    try {\n      deleteIfPresent(bucket, indexPath);\n      // descriptor.json is a file to store segment metadata in deep storage. This file is deprecated and not stored\n      // anymore, but we still delete them if exists.\n      deleteIfPresent(bucket, descriptorPath);\n    }\n    catch (IOException e) {\n      throw new SegmentLoadingException(e, \"Couldn't kill segment[%s]: [%s]\", segment.getId(), e.getMessage());\n    }\n  }", "signature": "void kill(DataSegment segment)", "full_signature": "@Override public void kill(DataSegment segment)", "class_method_signature": "GoogleDataSegmentKiller.kill(DataSegment segment)", "testcase": false, "constructor": false, "invocations": ["info", "getId", "getLoadSpec", "getString", "getString", "descriptorPath", "deleteIfPresent", "deleteIfPresent", "getId", "getMessage"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}