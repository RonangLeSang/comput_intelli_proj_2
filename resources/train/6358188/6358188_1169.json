{"test_class": {"identifier": "DoublesSketchComplexMetricSerdeTest", "superclass": "", "interfaces": "", "fields": [], "file": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerdeTest.java"}, "test_case": {"identifier": "testExtractorOnLeadingDecimalNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExtractorOnLeadingDecimalNumber()\n  {\n    final DoublesSketchComplexMetricSerde serde = new DoublesSketchComplexMetricSerde();\n    final ComplexMetricExtractor extractor = serde.getExtractor();\n    final DoublesSketch sketch = (DoublesSketch) extractor.extractValue(\n        new MapBasedInputRow(0L, ImmutableList.of(), ImmutableMap.of(\"foo\", \".1\")),\n        \"foo\"\n    );\n    Assert.assertEquals(1, sketch.getRetainedItems());\n    Assert.assertEquals(0.1d, sketch.getMaxValue(), 0.01d);\n  }", "signature": "void testExtractorOnLeadingDecimalNumber()", "full_signature": "@Test public void testExtractorOnLeadingDecimalNumber()", "class_method_signature": "DoublesSketchComplexMetricSerdeTest.testExtractorOnLeadingDecimalNumber()", "testcase": true, "constructor": false, "invocations": ["getExtractor", "extractValue", "of", "of", "assertEquals", "getRetainedItems", "assertEquals", "getMaxValue"]}, "focal_class": {"identifier": "DoublesSketchComplexMetricSerde", "superclass": "extends ComplexMetricSerde", "interfaces": "", "fields": [{"original_string": "private static final DoublesSketchObjectStrategy STRATEGY = new DoublesSketchObjectStrategy();", "modifier": "private static final", "type": "DoublesSketchObjectStrategy", "declarator": "STRATEGY = new DoublesSketchObjectStrategy()", "var_name": "STRATEGY"}], "methods": [{"identifier": "getTypeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTypeName()", "full_signature": "@Override public String getTypeName()", "class_method_signature": "DoublesSketchComplexMetricSerde.getTypeName()", "testcase": false, "constructor": false}, {"identifier": "getObjectStrategy", "parameters": "()", "modifiers": "@Override public", "return": "ObjectStrategy<DoublesSketch>", "signature": "ObjectStrategy<DoublesSketch> getObjectStrategy()", "full_signature": "@Override public ObjectStrategy<DoublesSketch> getObjectStrategy()", "class_method_signature": "DoublesSketchComplexMetricSerde.getObjectStrategy()", "testcase": false, "constructor": false}, {"identifier": "getExtractor", "parameters": "()", "modifiers": "@Override public", "return": "ComplexMetricExtractor", "signature": "ComplexMetricExtractor getExtractor()", "full_signature": "@Override public ComplexMetricExtractor getExtractor()", "class_method_signature": "DoublesSketchComplexMetricSerde.getExtractor()", "testcase": false, "constructor": false}, {"identifier": "deserializeColumn", "parameters": "(final ByteBuffer buffer, final ColumnBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void deserializeColumn(final ByteBuffer buffer, final ColumnBuilder builder)", "full_signature": "@Override public void deserializeColumn(final ByteBuffer buffer, final ColumnBuilder builder)", "class_method_signature": "DoublesSketchComplexMetricSerde.deserializeColumn(final ByteBuffer buffer, final ColumnBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getSerializer", "parameters": "(SegmentWriteOutMedium segmentWriteOutMedium, String column)", "modifiers": "@Override public", "return": "GenericColumnSerializer", "signature": "GenericColumnSerializer getSerializer(SegmentWriteOutMedium segmentWriteOutMedium, String column)", "full_signature": "@Override public GenericColumnSerializer getSerializer(SegmentWriteOutMedium segmentWriteOutMedium, String column)", "class_method_signature": "DoublesSketchComplexMetricSerde.getSerializer(SegmentWriteOutMedium segmentWriteOutMedium, String column)", "testcase": false, "constructor": false}], "file": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java"}, "focal_method": {"identifier": "getExtractor", "parameters": "()", "modifiers": "@Override public", "return": "ComplexMetricExtractor", "body": "@Override\n  public ComplexMetricExtractor getExtractor()\n  {\n    return new ComplexMetricExtractor()\n    {\n      private static final int MIN_K = 2; // package one input value into the smallest sketch\n\n      @Override\n      public Class<?> extractedClass()\n      {\n        return DoublesSketch.class;\n      }\n\n      @Override\n      public Object extractValue(final InputRow inputRow, final String metricName)\n      {\n        final Object object = inputRow.getRaw(metricName);\n        if (object instanceof String) { // everything is a string during ingestion\n          String objectString = (String) object;\n          // Autodetection of the input format: empty string, number, or base64 encoded sketch\n          // A serialized DoublesSketch, as currently implemented, always has 0 in the first 6 bits.\n          // This corresponds to \"A\" in base64, so it is not a digit\n          final Double doubleValue;\n          if (objectString.isEmpty()) {\n            return DoublesSketchOperations.EMPTY_SKETCH;\n          } else if ((doubleValue = Doubles.tryParse(objectString)) != null) {\n            UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n            sketch.update(doubleValue);\n            return sketch;\n          }\n        } else if (object instanceof Number) { // this is for reindexing\n          UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n          sketch.update(((Number) object).doubleValue());\n          return sketch;\n        }\n\n        if (object == null || object instanceof DoublesSketch || object instanceof Memory) {\n          return object;\n        }\n        return DoublesSketchOperations.deserialize(object);\n      }\n    };\n  }", "signature": "ComplexMetricExtractor getExtractor()", "full_signature": "@Override public ComplexMetricExtractor getExtractor()", "class_method_signature": "DoublesSketchComplexMetricSerde.getExtractor()", "testcase": false, "constructor": false, "invocations": ["getRaw", "isEmpty", "tryParse", "build", "setK", "builder", "update", "build", "setK", "builder", "update", "doubleValue", "deserialize"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}