{"test_class": {"identifier": "IndexedTableJoinableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PREFIX = \"j.\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"j.\"", "var_name": "PREFIX"}, {"original_string": "private static final String KEY_COLUMN = \"str\";", "modifier": "private static final", "type": "String", "declarator": "KEY_COLUMN = \"str\"", "var_name": "KEY_COLUMN"}, {"original_string": "private static final String VALUE_COLUMN = \"long\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_COLUMN = \"long\"", "var_name": "VALUE_COLUMN"}, {"original_string": "private static final String UNKNOWN_COLUMN = \"unknown\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_COLUMN = \"unknown\"", "var_name": "UNKNOWN_COLUMN"}, {"original_string": "private static final String SEARCH_KEY_NULL_VALUE = \"baz\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_KEY_NULL_VALUE = \"baz\"", "var_name": "SEARCH_KEY_NULL_VALUE"}, {"original_string": "private static final String SEARCH_KEY_VALUE = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_KEY_VALUE = \"foo\"", "var_name": "SEARCH_KEY_VALUE"}, {"original_string": "private static final String SEARCH_VALUE_VALUE = \"1\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_VALUE_VALUE = \"1\"", "var_name": "SEARCH_VALUE_VALUE"}, {"original_string": "private static final String SEARCH_VALUE_UNKNOWN = \"10\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_VALUE_UNKNOWN = \"10\"", "var_name": "SEARCH_VALUE_UNKNOWN"}, {"original_string": "private static final long MAX_CORRELATION_SET_SIZE = 10_000L;", "modifier": "private static final", "type": "long", "declarator": "MAX_CORRELATION_SET_SIZE = 10_000L", "var_name": "MAX_CORRELATION_SET_SIZE"}, {"original_string": "private final ColumnSelectorFactory dummyColumnSelectorFactory = new ColumnSelectorFactory()\n  {\n    @Override\n    public DimensionSelector makeDimensionSelector(DimensionSpec dimensionSpec)\n    {\n      return new ConstantDimensionSelector(\"dummy\");\n    }\n\n    @Override\n    public ColumnValueSelector<?> makeColumnValueSelector(String columnName)\n    {\n      return null;\n    }\n\n    @Override\n    public ColumnCapabilities getColumnCapabilities(String columnName)\n    {\n      return null;\n    }\n  };", "modifier": "private final", "type": "ColumnSelectorFactory", "declarator": "dummyColumnSelectorFactory = new ColumnSelectorFactory()\n  {\n    @Override\n    public DimensionSelector makeDimensionSelector(DimensionSpec dimensionSpec)\n    {\n      return new ConstantDimensionSelector(\"dummy\");\n    }\n\n    @Override\n    public ColumnValueSelector<?> makeColumnValueSelector(String columnName)\n    {\n      return null;\n    }\n\n    @Override\n    public ColumnCapabilities getColumnCapabilities(String columnName)\n    {\n      return null;\n    }\n  }", "var_name": "dummyColumnSelectorFactory"}, {"original_string": "private final InlineDataSource inlineDataSource = InlineDataSource.fromIterable(\n      ImmutableList.of(\n          new Object[]{\"foo\", 1L},\n          new Object[]{\"bar\", 2L},\n          new Object[]{\"baz\", null}\n      ),\n      RowSignature.builder()\n                  .add(\"str\", ValueType.STRING)\n                  .add(\"long\", ValueType.LONG)\n                  .build()\n  );", "modifier": "private final", "type": "InlineDataSource", "declarator": "inlineDataSource = InlineDataSource.fromIterable(\n      ImmutableList.of(\n          new Object[]{\"foo\", 1L},\n          new Object[]{\"bar\", 2L},\n          new Object[]{\"baz\", null}\n      ),\n      RowSignature.builder()\n                  .add(\"str\", ValueType.STRING)\n                  .add(\"long\", ValueType.LONG)\n                  .build()\n  )", "var_name": "inlineDataSource"}, {"original_string": "private final RowBasedIndexedTable<Object[]> indexedTable = new RowBasedIndexedTable<>(\n      inlineDataSource.getRowsAsList(),\n      inlineDataSource.rowAdapter(),\n      inlineDataSource.getRowSignature(),\n      ImmutableSet.of(\"str\"),\n      DateTimes.nowUtc().toString()\n  );", "modifier": "private final", "type": "RowBasedIndexedTable<Object[]>", "declarator": "indexedTable = new RowBasedIndexedTable<>(\n      inlineDataSource.getRowsAsList(),\n      inlineDataSource.rowAdapter(),\n      inlineDataSource.getRowSignature(),\n      ImmutableSet.of(\"str\"),\n      DateTimes.nowUtc().toString()\n  )", "var_name": "indexedTable"}, {"original_string": "private IndexedTableJoinable target;", "modifier": "private", "type": "IndexedTableJoinable", "declarator": "target", "var_name": "target"}], "file": "processing/src/test/java/org/apache/druid/segment/join/table/IndexedTableJoinableTest.java"}, "test_case": {"identifier": "getCardinalityForStringColumn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getCardinalityForStringColumn()\n  {\n    Assert.assertEquals(indexedTable.numRows() + 1, target.getCardinality(\"str\"));\n  }", "signature": "void getCardinalityForStringColumn()", "full_signature": "@Test public void getCardinalityForStringColumn()", "class_method_signature": "IndexedTableJoinableTest.getCardinalityForStringColumn()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "numRows", "getCardinality"]}, "focal_class": {"identifier": "IndexedTableJoinable", "superclass": "", "interfaces": "implements Joinable", "fields": [{"original_string": "private final IndexedTable table;", "modifier": "private final", "type": "IndexedTable", "declarator": "table", "var_name": "table"}], "methods": [{"identifier": "IndexedTableJoinable", "parameters": "(final IndexedTable table)", "modifiers": "public", "return": "", "signature": " IndexedTableJoinable(final IndexedTable table)", "full_signature": "public  IndexedTableJoinable(final IndexedTable table)", "class_method_signature": "IndexedTableJoinable.IndexedTableJoinable(final IndexedTable table)", "testcase": false, "constructor": true}, {"identifier": "getAvailableColumns", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAvailableColumns()", "full_signature": "@Override public List<String> getAvailableColumns()", "class_method_signature": "IndexedTableJoinable.getAvailableColumns()", "testcase": false, "constructor": false}, {"identifier": "getCardinality", "parameters": "(String columnName)", "modifiers": "@Override public", "return": "int", "signature": "int getCardinality(String columnName)", "full_signature": "@Override public int getCardinality(String columnName)", "class_method_signature": "IndexedTableJoinable.getCardinality(String columnName)", "testcase": false, "constructor": false}, {"identifier": "getColumnCapabilities", "parameters": "(String columnName)", "modifiers": "@Override @Nullable public", "return": "ColumnCapabilities", "signature": "ColumnCapabilities getColumnCapabilities(String columnName)", "full_signature": "@Override @Nullable public ColumnCapabilities getColumnCapabilities(String columnName)", "class_method_signature": "IndexedTableJoinable.getColumnCapabilities(String columnName)", "testcase": false, "constructor": false}, {"identifier": "makeJoinMatcher", "parameters": "(\n      final ColumnSelectorFactory leftColumnSelectorFactory,\n      final JoinConditionAnalysis condition,\n      final boolean remainderNeeded,\n      boolean descending,\n      Closer closer\n  )", "modifiers": "@Override public", "return": "JoinMatcher", "signature": "JoinMatcher makeJoinMatcher(\n      final ColumnSelectorFactory leftColumnSelectorFactory,\n      final JoinConditionAnalysis condition,\n      final boolean remainderNeeded,\n      boolean descending,\n      Closer closer\n  )", "full_signature": "@Override public JoinMatcher makeJoinMatcher(\n      final ColumnSelectorFactory leftColumnSelectorFactory,\n      final JoinConditionAnalysis condition,\n      final boolean remainderNeeded,\n      boolean descending,\n      Closer closer\n  )", "class_method_signature": "IndexedTableJoinable.makeJoinMatcher(\n      final ColumnSelectorFactory leftColumnSelectorFactory,\n      final JoinConditionAnalysis condition,\n      final boolean remainderNeeded,\n      boolean descending,\n      Closer closer\n  )", "testcase": false, "constructor": false}, {"identifier": "getCorrelatedColumnValues", "parameters": "(\n      String searchColumnName,\n      String searchColumnValue,\n      String retrievalColumnName,\n      long maxCorrelationSetSize,\n      boolean allowNonKeyColumnSearch\n  )", "modifiers": "@Override public", "return": "Optional<Set<String>>", "signature": "Optional<Set<String>> getCorrelatedColumnValues(\n      String searchColumnName,\n      String searchColumnValue,\n      String retrievalColumnName,\n      long maxCorrelationSetSize,\n      boolean allowNonKeyColumnSearch\n  )", "full_signature": "@Override public Optional<Set<String>> getCorrelatedColumnValues(\n      String searchColumnName,\n      String searchColumnValue,\n      String retrievalColumnName,\n      long maxCorrelationSetSize,\n      boolean allowNonKeyColumnSearch\n  )", "class_method_signature": "IndexedTableJoinable.getCorrelatedColumnValues(\n      String searchColumnName,\n      String searchColumnValue,\n      String retrievalColumnName,\n      long maxCorrelationSetSize,\n      boolean allowNonKeyColumnSearch\n  )", "testcase": false, "constructor": false}, {"identifier": "acquireReferences", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Closeable>", "signature": "Optional<Closeable> acquireReferences()", "full_signature": "@Override public Optional<Closeable> acquireReferences()", "class_method_signature": "IndexedTableJoinable.acquireReferences()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTableJoinable.java"}, "focal_method": {"identifier": "getCardinality", "parameters": "(String columnName)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int getCardinality(String columnName)\n  {\n    if (table.rowSignature().contains(columnName)) {\n      return IndexedTableDimensionSelector.computeDimensionSelectorCardinality(table);\n    } else {\n      // NullDimensionSelector has cardinality = 1 (one null, nothing else).\n      return 1;\n    }\n  }", "signature": "int getCardinality(String columnName)", "full_signature": "@Override public int getCardinality(String columnName)", "class_method_signature": "IndexedTableJoinable.getCardinality(String columnName)", "testcase": false, "constructor": false, "invocations": ["contains", "rowSignature", "computeDimensionSelectorCardinality"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}