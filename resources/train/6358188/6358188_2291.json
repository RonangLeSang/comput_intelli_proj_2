{"test_class": {"identifier": "DataSchemaTest", "superclass": "extends InitializedNullHandlingTest", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private final ObjectMapper jsonMapper = TestHelper.makeJsonMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "jsonMapper = TestHelper.makeJsonMapper()", "var_name": "jsonMapper"}], "file": "server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java"}, "test_case": {"identifier": "testSerdeWithInvalidParserMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSerdeWithInvalidParserMap() throws Exception\n  {\n    String jsonStr = \"{\"\n                     + \"\\\"dataSource\\\":\\\"\" + StringEscapeUtils.escapeJson(IdUtilsTest.VALID_ID_CHARS) + \"\\\",\"\n                     + \"\\\"parser\\\":{\\\"type\\\":\\\"invalid\\\"},\"\n                     + \"\\\"metricsSpec\\\":[{\\\"type\\\":\\\"doubleSum\\\",\\\"name\\\":\\\"metric1\\\",\\\"fieldName\\\":\\\"col1\\\"}],\"\n                     + \"\\\"granularitySpec\\\":{\"\n                     + \"\\\"type\\\":\\\"arbitrary\\\",\"\n                     + \"\\\"queryGranularity\\\":{\\\"type\\\":\\\"duration\\\",\\\"duration\\\":86400000,\\\"origin\\\":\\\"1970-01-01T00:00:00.000Z\\\"},\"\n                     + \"\\\"intervals\\\":[\\\"2014-01-01T00:00:00.000Z/2015-01-01T00:00:00.000Z\\\"]}}\";\n\n\n    //no error on serde as parser is converted to InputRowParser lazily when really needed\n    DataSchema schema = jsonMapper.readValue(\n        jsonMapper.writeValueAsString(\n            jsonMapper.readValue(jsonStr, DataSchema.class)\n        ),\n        DataSchema.class\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectCause(CoreMatchers.instanceOf(JsonMappingException.class));\n    expectedException.expectMessage(\n        \"Cannot construct instance of `org.apache.druid.data.input.impl.StringInputRowParser`, problem: parseSpec\"\n    );\n\n    // Jackson creates a default type parser (StringInputRowParser) for an invalid type.\n    schema.getParser();\n  }", "signature": "void testSerdeWithInvalidParserMap()", "full_signature": "@Test public void testSerdeWithInvalidParserMap()", "class_method_signature": "DataSchemaTest.testSerdeWithInvalidParserMap()", "testcase": true, "constructor": false, "invocations": ["escapeJson", "readValue", "writeValueAsString", "readValue", "expect", "instanceOf", "expectCause", "instanceOf", "expectMessage", "getParser"]}, "focal_class": {"identifier": "DataSchema", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(DataSchema.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(DataSchema.class)", "var_name": "log"}, {"original_string": "private static final Pattern INVALIDCHARS = Pattern.compile(\"(?s).*[^\\\\S ].*\");", "modifier": "private static final", "type": "Pattern", "declarator": "INVALIDCHARS = Pattern.compile(\"(?s).*[^\\\\S ].*\")", "var_name": "INVALIDCHARS"}, {"original_string": "private final String dataSource;", "modifier": "private final", "type": "String", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private final AggregatorFactory[] aggregators;", "modifier": "private final", "type": "AggregatorFactory[]", "declarator": "aggregators", "var_name": "aggregators"}, {"original_string": "private final GranularitySpec granularitySpec;", "modifier": "private final", "type": "GranularitySpec", "declarator": "granularitySpec", "var_name": "granularitySpec"}, {"original_string": "private final TransformSpec transformSpec;", "modifier": "private final", "type": "TransformSpec", "declarator": "transformSpec", "var_name": "transformSpec"}, {"original_string": "private final Map<String, Object> parserMap;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "parserMap", "var_name": "parserMap"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private TimestampSpec timestampSpec;", "modifier": "private", "type": "TimestampSpec", "declarator": "timestampSpec", "var_name": "timestampSpec"}, {"original_string": "private DimensionsSpec dimensionsSpec;", "modifier": "private", "type": "DimensionsSpec", "declarator": "dimensionsSpec", "var_name": "dimensionsSpec"}, {"original_string": "private InputRowParser inputRowParser;", "modifier": "private", "type": "InputRowParser", "declarator": "inputRowParser", "var_name": "inputRowParser"}], "methods": [{"identifier": "DataSchema", "parameters": "(\n      @JsonProperty(\"dataSource\") String dataSource,\n      @JsonProperty(\"timestampSpec\") @Nullable TimestampSpec timestampSpec, // can be null in old task spec\n      @JsonProperty(\"dimensionsSpec\") @Nullable DimensionsSpec dimensionsSpec, // can be null in old task spec\n      @JsonProperty(\"metricsSpec\") AggregatorFactory[] aggregators,\n      @JsonProperty(\"granularitySpec\") GranularitySpec granularitySpec,\n      @JsonProperty(\"transformSpec\") TransformSpec transformSpec,\n      @Deprecated @JsonProperty(\"parser\") @Nullable Map<String, Object> parserMap,\n      @JacksonInject ObjectMapper objectMapper\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " DataSchema(\n      @JsonProperty(\"dataSource\") String dataSource,\n      @JsonProperty(\"timestampSpec\") @Nullable TimestampSpec timestampSpec, // can be null in old task spec\n      @JsonProperty(\"dimensionsSpec\") @Nullable DimensionsSpec dimensionsSpec, // can be null in old task spec\n      @JsonProperty(\"metricsSpec\") AggregatorFactory[] aggregators,\n      @JsonProperty(\"granularitySpec\") GranularitySpec granularitySpec,\n      @JsonProperty(\"transformSpec\") TransformSpec transformSpec,\n      @Deprecated @JsonProperty(\"parser\") @Nullable Map<String, Object> parserMap,\n      @JacksonInject ObjectMapper objectMapper\n  )", "full_signature": "@JsonCreator public  DataSchema(\n      @JsonProperty(\"dataSource\") String dataSource,\n      @JsonProperty(\"timestampSpec\") @Nullable TimestampSpec timestampSpec, // can be null in old task spec\n      @JsonProperty(\"dimensionsSpec\") @Nullable DimensionsSpec dimensionsSpec, // can be null in old task spec\n      @JsonProperty(\"metricsSpec\") AggregatorFactory[] aggregators,\n      @JsonProperty(\"granularitySpec\") GranularitySpec granularitySpec,\n      @JsonProperty(\"transformSpec\") TransformSpec transformSpec,\n      @Deprecated @JsonProperty(\"parser\") @Nullable Map<String, Object> parserMap,\n      @JacksonInject ObjectMapper objectMapper\n  )", "class_method_signature": "DataSchema.DataSchema(\n      @JsonProperty(\"dataSource\") String dataSource,\n      @JsonProperty(\"timestampSpec\") @Nullable TimestampSpec timestampSpec, // can be null in old task spec\n      @JsonProperty(\"dimensionsSpec\") @Nullable DimensionsSpec dimensionsSpec, // can be null in old task spec\n      @JsonProperty(\"metricsSpec\") AggregatorFactory[] aggregators,\n      @JsonProperty(\"granularitySpec\") GranularitySpec granularitySpec,\n      @JsonProperty(\"transformSpec\") TransformSpec transformSpec,\n      @Deprecated @JsonProperty(\"parser\") @Nullable Map<String, Object> parserMap,\n      @JacksonInject ObjectMapper objectMapper\n  )", "testcase": false, "constructor": true}, {"identifier": "DataSchema", "parameters": "(\n      String dataSource,\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec\n  )", "modifiers": "@VisibleForTesting public", "return": "", "signature": " DataSchema(\n      String dataSource,\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec\n  )", "full_signature": "@VisibleForTesting public  DataSchema(\n      String dataSource,\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec\n  )", "class_method_signature": "DataSchema.DataSchema(\n      String dataSource,\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec\n  )", "testcase": false, "constructor": true}, {"identifier": "DataSchema", "parameters": "(\n      String dataSource,\n      Map<String, Object> parserMap,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec,\n      ObjectMapper objectMapper\n  )", "modifiers": "@Deprecated public", "return": "", "signature": " DataSchema(\n      String dataSource,\n      Map<String, Object> parserMap,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec,\n      ObjectMapper objectMapper\n  )", "full_signature": "@Deprecated public  DataSchema(\n      String dataSource,\n      Map<String, Object> parserMap,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec,\n      ObjectMapper objectMapper\n  )", "class_method_signature": "DataSchema.DataSchema(\n      String dataSource,\n      Map<String, Object> parserMap,\n      AggregatorFactory[] aggregators,\n      GranularitySpec granularitySpec,\n      TransformSpec transformSpec,\n      ObjectMapper objectMapper\n  )", "testcase": false, "constructor": true}, {"identifier": "validateDatasourceName", "parameters": "(String dataSource)", "modifiers": "private static", "return": "void", "signature": "void validateDatasourceName(String dataSource)", "full_signature": "private static void validateDatasourceName(String dataSource)", "class_method_signature": "DataSchema.validateDatasourceName(String dataSource)", "testcase": false, "constructor": false}, {"identifier": "computeDimensionsSpec", "parameters": "(\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators\n  )", "modifiers": "private static", "return": "DimensionsSpec", "signature": "DimensionsSpec computeDimensionsSpec(\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators\n  )", "full_signature": "private static DimensionsSpec computeDimensionsSpec(\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators\n  )", "class_method_signature": "DataSchema.computeDimensionsSpec(\n      TimestampSpec timestampSpec,\n      DimensionsSpec dimensionsSpec,\n      AggregatorFactory[] aggregators\n  )", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getDataSource()", "full_signature": "@JsonProperty public String getDataSource()", "class_method_signature": "DataSchema.getDataSource()", "testcase": false, "constructor": false}, {"identifier": "getGivenTimestampSpec", "parameters": "()", "modifiers": "@Nullable @JsonProperty(\"timestampSpec\") private", "return": "TimestampSpec", "signature": "TimestampSpec getGivenTimestampSpec()", "full_signature": "@Nullable @JsonProperty(\"timestampSpec\") private TimestampSpec getGivenTimestampSpec()", "class_method_signature": "DataSchema.getGivenTimestampSpec()", "testcase": false, "constructor": false}, {"identifier": "getTimestampSpec", "parameters": "()", "modifiers": "public", "return": "TimestampSpec", "signature": "TimestampSpec getTimestampSpec()", "full_signature": "public TimestampSpec getTimestampSpec()", "class_method_signature": "DataSchema.getTimestampSpec()", "testcase": false, "constructor": false}, {"identifier": "getGivenDimensionsSpec", "parameters": "()", "modifiers": "@Nullable @JsonProperty(\"dimensionsSpec\") private", "return": "DimensionsSpec", "signature": "DimensionsSpec getGivenDimensionsSpec()", "full_signature": "@Nullable @JsonProperty(\"dimensionsSpec\") private DimensionsSpec getGivenDimensionsSpec()", "class_method_signature": "DataSchema.getGivenDimensionsSpec()", "testcase": false, "constructor": false}, {"identifier": "getDimensionsSpec", "parameters": "()", "modifiers": "public", "return": "DimensionsSpec", "signature": "DimensionsSpec getDimensionsSpec()", "full_signature": "public DimensionsSpec getDimensionsSpec()", "class_method_signature": "DataSchema.getDimensionsSpec()", "testcase": false, "constructor": false}, {"identifier": "getAggregators", "parameters": "()", "modifiers": "@JsonProperty(\"metricsSpec\") public", "return": "AggregatorFactory[]", "signature": "AggregatorFactory[] getAggregators()", "full_signature": "@JsonProperty(\"metricsSpec\") public AggregatorFactory[] getAggregators()", "class_method_signature": "DataSchema.getAggregators()", "testcase": false, "constructor": false}, {"identifier": "getGranularitySpec", "parameters": "()", "modifiers": "@JsonProperty public", "return": "GranularitySpec", "signature": "GranularitySpec getGranularitySpec()", "full_signature": "@JsonProperty public GranularitySpec getGranularitySpec()", "class_method_signature": "DataSchema.getGranularitySpec()", "testcase": false, "constructor": false}, {"identifier": "getTransformSpec", "parameters": "()", "modifiers": "@JsonProperty public", "return": "TransformSpec", "signature": "TransformSpec getTransformSpec()", "full_signature": "@JsonProperty public TransformSpec getTransformSpec()", "class_method_signature": "DataSchema.getTransformSpec()", "testcase": false, "constructor": false}, {"identifier": "getParserMap", "parameters": "()", "modifiers": "@Deprecated @JsonProperty(\"parser\") @Nullable @JsonInclude(Include.NON_NULL) public", "return": "Map<String, Object>", "signature": "Map<String, Object> getParserMap()", "full_signature": "@Deprecated @JsonProperty(\"parser\") @Nullable @JsonInclude(Include.NON_NULL) public Map<String, Object> getParserMap()", "class_method_signature": "DataSchema.getParserMap()", "testcase": false, "constructor": false}, {"identifier": "getParser", "parameters": "()", "modifiers": "@Nullable public", "return": "InputRowParser", "signature": "InputRowParser getParser()", "full_signature": "@Nullable public InputRowParser getParser()", "class_method_signature": "DataSchema.getParser()", "testcase": false, "constructor": false}, {"identifier": "withGranularitySpec", "parameters": "(GranularitySpec granularitySpec)", "modifiers": "public", "return": "DataSchema", "signature": "DataSchema withGranularitySpec(GranularitySpec granularitySpec)", "full_signature": "public DataSchema withGranularitySpec(GranularitySpec granularitySpec)", "class_method_signature": "DataSchema.withGranularitySpec(GranularitySpec granularitySpec)", "testcase": false, "constructor": false}, {"identifier": "withTransformSpec", "parameters": "(TransformSpec transformSpec)", "modifiers": "public", "return": "DataSchema", "signature": "DataSchema withTransformSpec(TransformSpec transformSpec)", "full_signature": "public DataSchema withTransformSpec(TransformSpec transformSpec)", "class_method_signature": "DataSchema.withTransformSpec(TransformSpec transformSpec)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataSchema.toString()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/segment/indexing/DataSchema.java"}, "focal_method": {"identifier": "getParser", "parameters": "()", "modifiers": "@Nullable public", "return": "InputRowParser", "body": "@Nullable\n  public InputRowParser getParser()\n  {\n    if (inputRowParser == null) {\n      if (parserMap == null) {\n        return null;\n      }\n      //noinspection unchecked\n      inputRowParser = transformSpec.decorate(objectMapper.convertValue(this.parserMap, InputRowParser.class));\n      ParseSpec parseSpec = inputRowParser.getParseSpec();\n      parseSpec = parseSpec.withDimensionsSpec(\n          computeDimensionsSpec(parseSpec.getTimestampSpec(), parseSpec.getDimensionsSpec(), aggregators)\n      );\n      if (timestampSpec != null) {\n        parseSpec = parseSpec.withTimestampSpec(timestampSpec);\n      }\n      if (dimensionsSpec != null) {\n        parseSpec = parseSpec.withDimensionsSpec(dimensionsSpec);\n      }\n      inputRowParser = inputRowParser.withParseSpec(parseSpec);\n    }\n    return inputRowParser;\n  }", "signature": "InputRowParser getParser()", "full_signature": "@Nullable public InputRowParser getParser()", "class_method_signature": "DataSchema.getParser()", "testcase": false, "constructor": false, "invocations": ["decorate", "convertValue", "getParseSpec", "withDimensionsSpec", "computeDimensionsSpec", "getTimestampSpec", "getDimensionsSpec", "withTimestampSpec", "withDimensionsSpec", "withParseSpec"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}