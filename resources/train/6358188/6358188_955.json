{"test_class": {"identifier": "MapJoinableFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private InlineDataSource inlineDataSource;", "modifier": "@Mock\n  private", "type": "InlineDataSource", "declarator": "inlineDataSource", "var_name": "inlineDataSource"}, {"original_string": "@Mock(MockType.NICE)\n  private JoinableFactory noopJoinableFactory;", "modifier": "@Mock(MockType.NICE)\n  private", "type": "JoinableFactory", "declarator": "noopJoinableFactory", "var_name": "noopJoinableFactory"}, {"original_string": "private NoopDataSource noopDataSource;", "modifier": "private", "type": "NoopDataSource", "declarator": "noopDataSource", "var_name": "noopDataSource"}, {"original_string": "@Mock\n  private JoinConditionAnalysis condition;", "modifier": "@Mock\n  private", "type": "JoinConditionAnalysis", "declarator": "condition", "var_name": "condition"}, {"original_string": "@Mock\n  private Joinable mockJoinable;", "modifier": "@Mock\n  private", "type": "Joinable", "declarator": "mockJoinable", "var_name": "mockJoinable"}, {"original_string": "private MapJoinableFactory target;", "modifier": "private", "type": "MapJoinableFactory", "declarator": "target", "var_name": "target"}], "file": "processing/src/test/java/org/apache/druid/segment/join/MapJoinableFactoryTest.java"}, "test_case": {"identifier": "testBuildDataSourceIsRegisteredShouldReturnJoinableFromFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBuildDataSourceIsRegisteredShouldReturnJoinableFromFactory()\n  {\n    EasyMock.expect(noopJoinableFactory.build(noopDataSource, condition)).andReturn(Optional.of(mockJoinable));\n    EasyMock.replay(noopJoinableFactory);\n    Optional<Joinable> joinable = target.build(noopDataSource, condition);\n    Assert.assertEquals(mockJoinable, joinable.get());\n  }", "signature": "void testBuildDataSourceIsRegisteredShouldReturnJoinableFromFactory()", "full_signature": "@Test public void testBuildDataSourceIsRegisteredShouldReturnJoinableFromFactory()", "class_method_signature": "MapJoinableFactoryTest.testBuildDataSourceIsRegisteredShouldReturnJoinableFromFactory()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "build", "of", "replay", "build", "assertEquals", "get"]}, "focal_class": {"identifier": "MapJoinableFactory", "superclass": "", "interfaces": "implements JoinableFactory", "fields": [{"original_string": "private final SetMultimap<Class<? extends DataSource>, JoinableFactory> joinableFactories;", "modifier": "private final", "type": "SetMultimap<Class<? extends DataSource>, JoinableFactory>", "declarator": "joinableFactories", "var_name": "joinableFactories"}], "methods": [{"identifier": "MapJoinableFactory", "parameters": "(\n      Set<JoinableFactory> factories,\n      Map<Class<? extends JoinableFactory>, Class<? extends DataSource>> factoryToDataSource\n  )", "modifiers": "@Inject public", "return": "", "signature": " MapJoinableFactory(\n      Set<JoinableFactory> factories,\n      Map<Class<? extends JoinableFactory>, Class<? extends DataSource>> factoryToDataSource\n  )", "full_signature": "@Inject public  MapJoinableFactory(\n      Set<JoinableFactory> factories,\n      Map<Class<? extends JoinableFactory>, Class<? extends DataSource>> factoryToDataSource\n  )", "class_method_signature": "MapJoinableFactory.MapJoinableFactory(\n      Set<JoinableFactory> factories,\n      Map<Class<? extends JoinableFactory>, Class<? extends DataSource>> factoryToDataSource\n  )", "testcase": false, "constructor": true}, {"identifier": "isDirectlyJoinable", "parameters": "(DataSource dataSource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDirectlyJoinable(DataSource dataSource)", "full_signature": "@Override public boolean isDirectlyJoinable(DataSource dataSource)", "class_method_signature": "MapJoinableFactory.isDirectlyJoinable(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(DataSource dataSource, JoinConditionAnalysis condition)", "modifiers": "@Override public", "return": "Optional<Joinable>", "signature": "Optional<Joinable> build(DataSource dataSource, JoinConditionAnalysis condition)", "full_signature": "@Override public Optional<Joinable> build(DataSource dataSource, JoinConditionAnalysis condition)", "class_method_signature": "MapJoinableFactory.build(DataSource dataSource, JoinConditionAnalysis condition)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/join/MapJoinableFactory.java"}, "focal_method": {"identifier": "build", "parameters": "(DataSource dataSource, JoinConditionAnalysis condition)", "modifiers": "@Override public", "return": "Optional<Joinable>", "body": "@Override\n  public Optional<Joinable> build(DataSource dataSource, JoinConditionAnalysis condition)\n  {\n    Set<JoinableFactory> factories = joinableFactories.get(dataSource.getClass());\n    Optional<Joinable> maybeJoinable = Optional.empty();\n    for (JoinableFactory factory : factories) {\n      Optional<Joinable> candidate = factory.build(dataSource, condition);\n      if (candidate.isPresent()) {\n        if (maybeJoinable.isPresent()) {\n          throw new ISE(\"Multiple joinable factories are valid for table[%s]\", dataSource);\n        }\n        maybeJoinable = candidate;\n      }\n    }\n    return maybeJoinable;\n  }", "signature": "Optional<Joinable> build(DataSource dataSource, JoinConditionAnalysis condition)", "full_signature": "@Override public Optional<Joinable> build(DataSource dataSource, JoinConditionAnalysis condition)", "class_method_signature": "MapJoinableFactory.build(DataSource dataSource, JoinConditionAnalysis condition)", "testcase": false, "constructor": false, "invocations": ["get", "getClass", "empty", "build", "isPresent", "isPresent"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}