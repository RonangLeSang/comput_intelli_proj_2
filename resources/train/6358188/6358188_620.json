{"test_class": {"identifier": "SearchBinaryFnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DateTime currTime = DateTimes.nowUtc();", "modifier": "private final", "type": "DateTime", "declarator": "currTime = DateTimes.nowUtc()", "var_name": "currTime"}], "file": "processing/src/test/java/org/apache/druid/query/search/SearchBinaryFnTest.java"}, "test_case": {"identifier": "testStrlenMerge2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStrlenMerge2()\n  {\n    SearchSortSpec searchSortSpec = new SearchSortSpec(StringComparators.STRLEN);\n    Comparator<SearchHit> c = searchSortSpec.getComparator();\n\n    Result<SearchResultValue> r1 = new Result<SearchResultValue>(\n        currTime,\n        new SearchResultValue(toHits(c, \"blah:short\", \"blah:thisislong\", \"blah2:thisislong\"))\n    );\n\n    Result<SearchResultValue> r2 = new Result<SearchResultValue>(\n        currTime,\n        new SearchResultValue(toHits(c, \"blah:short\", \"blah2:thisislong\"))\n    );\n\n    Result<SearchResultValue> expected = new Result<SearchResultValue>(\n        currTime,\n        new SearchResultValue(toHits(c, \"blah:short\", \"blah:thisislong\", \"blah2:thisislong\"))\n    );\n\n    Result<SearchResultValue> actual = new SearchBinaryFn(searchSortSpec, Granularities.ALL, Integer.MAX_VALUE).apply(r1, r2);\n    Assert.assertEquals(expected.getTimestamp(), actual.getTimestamp());\n    assertSearchMergeResult(expected.getValue(), actual.getValue());\n  }", "signature": "void testStrlenMerge2()", "full_signature": "@Test public void testStrlenMerge2()", "class_method_signature": "SearchBinaryFnTest.testStrlenMerge2()", "testcase": true, "constructor": false, "invocations": ["getComparator", "toHits", "toHits", "toHits", "apply", "assertEquals", "getTimestamp", "getTimestamp", "assertSearchMergeResult", "getValue", "getValue"]}, "focal_class": {"identifier": "SearchBinaryFn", "superclass": "", "interfaces": "implements BinaryOperator<Result<SearchResultValue>>", "fields": [{"original_string": "private final SearchSortSpec searchSortSpec;", "modifier": "private final", "type": "SearchSortSpec", "declarator": "searchSortSpec", "var_name": "searchSortSpec"}, {"original_string": "private final Granularity gran;", "modifier": "private final", "type": "Granularity", "declarator": "gran", "var_name": "gran"}, {"original_string": "private final int limit;", "modifier": "private final", "type": "int", "declarator": "limit", "var_name": "limit"}], "methods": [{"identifier": "SearchBinaryFn", "parameters": "(\n      SearchSortSpec searchSortSpec,\n      Granularity granularity,\n      int limit\n  )", "modifiers": "public", "return": "", "signature": " SearchBinaryFn(\n      SearchSortSpec searchSortSpec,\n      Granularity granularity,\n      int limit\n  )", "full_signature": "public  SearchBinaryFn(\n      SearchSortSpec searchSortSpec,\n      Granularity granularity,\n      int limit\n  )", "class_method_signature": "SearchBinaryFn.SearchBinaryFn(\n      SearchSortSpec searchSortSpec,\n      Granularity granularity,\n      int limit\n  )", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "modifiers": "@Override public", "return": "Result<SearchResultValue>", "signature": "Result<SearchResultValue> apply(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "full_signature": "@Override public Result<SearchResultValue> apply(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "class_method_signature": "SearchBinaryFn.apply(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/search/SearchBinaryFn.java"}, "focal_method": {"identifier": "apply", "parameters": "(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "modifiers": "@Override public", "return": "Result<SearchResultValue>", "body": "@Override\n  public Result<SearchResultValue> apply(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)\n  {\n    if (arg1 == null) {\n      return arg2;\n    }\n\n    if (arg2 == null) {\n      return arg1;\n    }\n\n    final int limit = gran instanceof AllGranularity ? this.limit : -1;\n\n    SearchResultValue arg1Vals = arg1.getValue();\n    SearchResultValue arg2Vals = arg2.getValue();\n\n    Iterable<SearchHit> merged = Iterables.mergeSorted(\n        Arrays.asList(arg1Vals, arg2Vals),\n        searchSortSpec.getComparator()\n    );\n\n    int maxSize = arg1Vals.getValue().size() + arg2Vals.getValue().size();\n    if (limit > 0) {\n      maxSize = Math.min(limit, maxSize);\n    }\n    List<SearchHit> results = Lists.newArrayListWithExpectedSize(maxSize);\n\n    SearchHit prev = null;\n    for (SearchHit searchHit : merged) {\n      if (prev == null) {\n        prev = searchHit;\n        continue;\n      }\n      if (prev.equals(searchHit)) {\n        if (prev.getCount() != null && searchHit.getCount() != null) {\n          prev = new SearchHit(\n              prev.getDimension(),\n              prev.getValue(),\n              prev.getCount() + searchHit.getCount()\n          );\n        } else {\n          prev = new SearchHit(\n                  prev.getDimension(),\n                  prev.getValue()\n          );\n        }\n      } else {\n        results.add(prev);\n        prev = searchHit;\n        if (limit > 0 && results.size() >= limit) {\n          break;\n        }\n      }\n    }\n\n    if (prev != null && (limit < 0 || results.size() < limit)) {\n      results.add(prev);\n    }\n\n    final DateTime timestamp = gran instanceof AllGranularity\n                               ? arg1.getTimestamp()\n                               : gran.bucketStart(arg1.getTimestamp());\n\n    return new Result<>(timestamp, new SearchResultValue(results));\n  }", "signature": "Result<SearchResultValue> apply(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "full_signature": "@Override public Result<SearchResultValue> apply(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "class_method_signature": "SearchBinaryFn.apply(Result<SearchResultValue> arg1, Result<SearchResultValue> arg2)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "mergeSorted", "asList", "getComparator", "size", "getValue", "size", "getValue", "min", "newArrayListWithExpectedSize", "equals", "getCount", "getCount", "getDimension", "getValue", "getCount", "getCount", "getDimension", "getValue", "add", "size", "size", "add", "getTimestamp", "bucketStart", "getTimestamp"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}