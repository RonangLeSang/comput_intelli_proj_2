{"test_class": {"identifier": "IndexerZkConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INDEXER_PROPERTY_STRING = \"test.druid.zk.paths.indexer\";", "modifier": "private static final", "type": "String", "declarator": "INDEXER_PROPERTY_STRING = \"test.druid.zk.paths.indexer\"", "var_name": "INDEXER_PROPERTY_STRING"}, {"original_string": "private static final String ZK_SERVICE_CONFIG_STRING = \"test.druid.zk.paths\";", "modifier": "private static final", "type": "String", "declarator": "ZK_SERVICE_CONFIG_STRING = \"test.druid.zk.paths\"", "var_name": "ZK_SERVICE_CONFIG_STRING"}, {"original_string": "private static final Collection<String> CLOBBERABLE_PROPERTIES = new HashSet<>();", "modifier": "private static final", "type": "Collection<String>", "declarator": "CLOBBERABLE_PROPERTIES = new HashSet<>()", "var_name": "CLOBBERABLE_PROPERTIES"}, {"original_string": "private static final Module SIMPLE_ZK_CONFIG_MODULE = new Module()\n  {\n    @Override\n    public void configure(Binder binder)\n    {\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n      // See IndexingServiceModuleHelper\n      JsonConfigProvider.bind(binder, INDEXER_PROPERTY_STRING, IndexerZkConfig.class);\n      JsonConfigProvider.bind(binder, ZK_SERVICE_CONFIG_STRING, ZkPathsConfig.class);\n    }\n  };", "modifier": "private static final", "type": "Module", "declarator": "SIMPLE_ZK_CONFIG_MODULE = new Module()\n  {\n    @Override\n    public void configure(Binder binder)\n    {\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n      // See IndexingServiceModuleHelper\n      JsonConfigProvider.bind(binder, INDEXER_PROPERTY_STRING, IndexerZkConfig.class);\n      JsonConfigProvider.bind(binder, ZK_SERVICE_CONFIG_STRING, ZkPathsConfig.class);\n    }\n  }", "var_name": "SIMPLE_ZK_CONFIG_MODULE"}, {"original_string": "private Properties propertyValues = new Properties();", "modifier": "private", "type": "Properties", "declarator": "propertyValues = new Properties()", "var_name": "propertyValues"}, {"original_string": "private int assertions = 0;", "modifier": "private", "type": "int", "declarator": "assertions = 0", "var_name": "assertions"}], "file": "indexing-service/src/test/java/org/apache/druid/server/initialization/IndexerZkConfigTest.java"}, "test_case": {"identifier": "testNullConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNullConfig()\n  {\n    propertyValues.clear();\n\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(SIMPLE_ZK_CONFIG_MODULE)\n    );\n    JsonConfigurator configurator = injector.getBinding(JsonConfigurator.class).getProvider().get();\n\n    JsonConfigProvider<ZkPathsConfig> zkPathsConfig = JsonConfigProvider.of(ZK_SERVICE_CONFIG_STRING, ZkPathsConfig.class);\n    zkPathsConfig.inject(propertyValues, configurator);\n\n    JsonConfigProvider<IndexerZkConfig> indexerZkConfig = JsonConfigProvider.of(\n        INDEXER_PROPERTY_STRING,\n        IndexerZkConfig.class\n    );\n    indexerZkConfig.inject(propertyValues, configurator);\n\n    Assert.assertEquals(\"/druid/indexer/tasks\", indexerZkConfig.get().get().getTasksPath());\n  }", "signature": "void testNullConfig()", "full_signature": "@Test public void testNullConfig()", "class_method_signature": "IndexerZkConfigTest.testNullConfig()", "testcase": true, "constructor": false, "invocations": ["clear", "makeInjectorWithModules", "makeStartupInjector", "of", "get", "getProvider", "getBinding", "of", "inject", "of", "inject", "assertEquals", "getTasksPath", "get", "get"]}, "focal_class": {"identifier": "IndexerZkConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "@JacksonInject\n  private final ZkPathsConfig zkPathsConfig;", "modifier": "@JacksonInject\n  private final", "type": "ZkPathsConfig", "declarator": "zkPathsConfig", "var_name": "zkPathsConfig"}, {"original_string": "@JsonProperty\n  private final String base;", "modifier": "@JsonProperty\n  private final", "type": "String", "declarator": "base", "var_name": "base"}, {"original_string": "@JsonProperty\n  private final String announcementsPath;", "modifier": "@JsonProperty\n  private final", "type": "String", "declarator": "announcementsPath", "var_name": "announcementsPath"}, {"original_string": "@JsonProperty\n  private final String tasksPath;", "modifier": "@JsonProperty\n  private final", "type": "String", "declarator": "tasksPath", "var_name": "tasksPath"}, {"original_string": "@JsonProperty\n  private final String statusPath;", "modifier": "@JsonProperty\n  private final", "type": "String", "declarator": "statusPath", "var_name": "statusPath"}], "methods": [{"identifier": "IndexerZkConfig", "parameters": "(\n      @JacksonInject ZkPathsConfig zkPathsConfig,\n      @JsonProperty(\"base\") String base,\n      @JsonProperty(\"announcementsPath\") String announcementsPath,\n      @JsonProperty(\"tasksPath\") String tasksPath,\n      @JsonProperty(\"statusPath\") String statusPath\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " IndexerZkConfig(\n      @JacksonInject ZkPathsConfig zkPathsConfig,\n      @JsonProperty(\"base\") String base,\n      @JsonProperty(\"announcementsPath\") String announcementsPath,\n      @JsonProperty(\"tasksPath\") String tasksPath,\n      @JsonProperty(\"statusPath\") String statusPath\n  )", "full_signature": "@JsonCreator public  IndexerZkConfig(\n      @JacksonInject ZkPathsConfig zkPathsConfig,\n      @JsonProperty(\"base\") String base,\n      @JsonProperty(\"announcementsPath\") String announcementsPath,\n      @JsonProperty(\"tasksPath\") String tasksPath,\n      @JsonProperty(\"statusPath\") String statusPath\n  )", "class_method_signature": "IndexerZkConfig.IndexerZkConfig(\n      @JacksonInject ZkPathsConfig zkPathsConfig,\n      @JsonProperty(\"base\") String base,\n      @JsonProperty(\"announcementsPath\") String announcementsPath,\n      @JsonProperty(\"tasksPath\") String tasksPath,\n      @JsonProperty(\"statusPath\") String statusPath\n  )", "testcase": false, "constructor": true}, {"identifier": "defaultIndexerPath", "parameters": "(final String subPath)", "modifiers": "private", "return": "String", "signature": "String defaultIndexerPath(final String subPath)", "full_signature": "private String defaultIndexerPath(final String subPath)", "class_method_signature": "IndexerZkConfig.defaultIndexerPath(final String subPath)", "testcase": false, "constructor": false}, {"identifier": "getBase", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBase()", "full_signature": "public String getBase()", "class_method_signature": "IndexerZkConfig.getBase()", "testcase": false, "constructor": false}, {"identifier": "getAnnouncementsPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAnnouncementsPath()", "full_signature": "public String getAnnouncementsPath()", "class_method_signature": "IndexerZkConfig.getAnnouncementsPath()", "testcase": false, "constructor": false}, {"identifier": "getTasksPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTasksPath()", "full_signature": "public String getTasksPath()", "class_method_signature": "IndexerZkConfig.getTasksPath()", "testcase": false, "constructor": false}, {"identifier": "getStatusPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStatusPath()", "full_signature": "public String getStatusPath()", "class_method_signature": "IndexerZkConfig.getStatusPath()", "testcase": false, "constructor": false}, {"identifier": "getZkPathsConfig", "parameters": "()", "modifiers": "public", "return": "ZkPathsConfig", "signature": "ZkPathsConfig getZkPathsConfig()", "full_signature": "public ZkPathsConfig getZkPathsConfig()", "class_method_signature": "IndexerZkConfig.getZkPathsConfig()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "IndexerZkConfig.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IndexerZkConfig.hashCode()", "testcase": false, "constructor": false}], "file": "indexing-service/src/main/java/org/apache/druid/server/initialization/IndexerZkConfig.java"}, "focal_method": {"identifier": "getTasksPath", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getTasksPath()\n  {\n    return tasksPath == null ? defaultIndexerPath(\"tasks\") : tasksPath;\n  }", "signature": "String getTasksPath()", "full_signature": "public String getTasksPath()", "class_method_signature": "IndexerZkConfig.getTasksPath()", "testcase": false, "constructor": false, "invocations": ["defaultIndexerPath"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}