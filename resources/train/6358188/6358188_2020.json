{"test_class": {"identifier": "JsonConfiguratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PROP_PREFIX = \"test.property.prefix.\";", "modifier": "private static final", "type": "String", "declarator": "PROP_PREFIX = \"test.property.prefix.\"", "var_name": "PROP_PREFIX"}, {"original_string": "private final ObjectMapper mapper = new TestObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new TestObjectMapper()", "var_name": "mapper"}, {"original_string": "private final Properties properties = new Properties();", "modifier": "private final", "type": "Properties", "declarator": "properties = new Properties()", "var_name": "properties"}, {"original_string": "final Validator validator = new Validator()\n  {\n    @Override\n    public <T> Set<ConstraintViolation<T>> validate(T object, Class<?>... groups)\n    {\n      return ImmutableSet.of();\n    }\n\n    @Override\n    public <T> Set<ConstraintViolation<T>> validateProperty(T object, String propertyName, Class<?>... groups)\n    {\n      return ImmutableSet.of();\n    }\n\n    @Override\n    public <T> Set<ConstraintViolation<T>> validateValue(\n        Class<T> beanType,\n        String propertyName,\n        Object value,\n        Class<?>... groups\n    )\n    {\n      return ImmutableSet.of();\n    }\n\n    @Override\n    public BeanDescriptor getConstraintsForClass(Class<?> clazz)\n    {\n      return null;\n    }\n\n    @Override\n    public <T> T unwrap(Class<T> type)\n    {\n      return null;\n    }\n\n    @Override\n    public ExecutableValidator forExecutables()\n    {\n      return null;\n    }\n  };", "modifier": "final", "type": "Validator", "declarator": "validator = new Validator()\n  {\n    @Override\n    public <T> Set<ConstraintViolation<T>> validate(T object, Class<?>... groups)\n    {\n      return ImmutableSet.of();\n    }\n\n    @Override\n    public <T> Set<ConstraintViolation<T>> validateProperty(T object, String propertyName, Class<?>... groups)\n    {\n      return ImmutableSet.of();\n    }\n\n    @Override\n    public <T> Set<ConstraintViolation<T>> validateValue(\n        Class<T> beanType,\n        String propertyName,\n        Object value,\n        Class<?>... groups\n    )\n    {\n      return ImmutableSet.of();\n    }\n\n    @Override\n    public BeanDescriptor getConstraintsForClass(Class<?> clazz)\n    {\n      return null;\n    }\n\n    @Override\n    public <T> T unwrap(Class<T> type)\n    {\n      return null;\n    }\n\n    @Override\n    public ExecutableValidator forExecutables()\n    {\n      return null;\n    }\n  }", "var_name": "validator"}], "file": "core/src/test/java/org/apache/druid/guice/JsonConfiguratorTest.java"}, "test_case": {"identifier": "testMissingConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMissingConfig()\n  {\n    final JsonConfigurator configurator = new JsonConfigurator(mapper, validator);\n    properties.setProperty(PROP_PREFIX + \"prop1List\", \"[\\\"prop2\\\"]\");\n    final MappableObject obj = configurator.configurate(properties, PROP_PREFIX, MappableObject.class);\n    Assert.assertNull(obj.prop1);\n    Assert.assertEquals(ImmutableList.of(\"prop2\"), obj.prop1List);\n  }", "signature": "void testMissingConfig()", "full_signature": "@Test public void testMissingConfig()", "class_method_signature": "JsonConfiguratorTest.testMissingConfig()", "testcase": true, "constructor": false, "invocations": ["setProperty", "configurate", "assertNull", "assertEquals", "of"]}, "focal_class": {"identifier": "JsonConfigurator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(JsonConfigurator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(JsonConfigurator.class)", "var_name": "log"}, {"original_string": "private final ObjectMapper jsonMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "jsonMapper", "var_name": "jsonMapper"}, {"original_string": "private final Validator validator;", "modifier": "private final", "type": "Validator", "declarator": "validator", "var_name": "validator"}], "methods": [{"identifier": "JsonConfigurator", "parameters": "(\n      ObjectMapper jsonMapper,\n      Validator validator\n  )", "modifiers": "@Inject public", "return": "", "signature": " JsonConfigurator(\n      ObjectMapper jsonMapper,\n      Validator validator\n  )", "full_signature": "@Inject public  JsonConfigurator(\n      ObjectMapper jsonMapper,\n      Validator validator\n  )", "class_method_signature": "JsonConfigurator.JsonConfigurator(\n      ObjectMapper jsonMapper,\n      Validator validator\n  )", "testcase": false, "constructor": true}, {"identifier": "configurate", "parameters": "(Properties props, String propertyPrefix, Class<T> clazz)", "modifiers": "public", "return": "T", "signature": "T configurate(Properties props, String propertyPrefix, Class<T> clazz)", "full_signature": "public T configurate(Properties props, String propertyPrefix, Class<T> clazz)", "class_method_signature": "JsonConfigurator.configurate(Properties props, String propertyPrefix, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "configurate", "parameters": "(\n      Properties props,\n      String propertyPrefix,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "modifiers": "public", "return": "T", "signature": "T configurate(\n      Properties props,\n      String propertyPrefix,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "full_signature": "public T configurate(\n      Properties props,\n      String propertyPrefix,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "class_method_signature": "JsonConfigurator.configurate(\n      Properties props,\n      String propertyPrefix,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "testcase": false, "constructor": false}, {"identifier": "hieraricalPutValue", "parameters": "(\n      String propertyPrefix,\n      String originalProperty,\n      String property,\n      Object value,\n      Map<String, Object> targetMap\n  )", "modifiers": "private static", "return": "void", "signature": "void hieraricalPutValue(\n      String propertyPrefix,\n      String originalProperty,\n      String property,\n      Object value,\n      Map<String, Object> targetMap\n  )", "full_signature": "private static void hieraricalPutValue(\n      String propertyPrefix,\n      String originalProperty,\n      String property,\n      Object value,\n      Map<String, Object> targetMap\n  )", "class_method_signature": "JsonConfigurator.hieraricalPutValue(\n      String propertyPrefix,\n      String originalProperty,\n      String property,\n      Object value,\n      Map<String, Object> targetMap\n  )", "testcase": false, "constructor": false}, {"identifier": "verifyClazzIsConfigurable", "parameters": "(\n      ObjectMapper mapper,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "modifiers": "@VisibleForTesting public static", "return": "void", "signature": "void verifyClazzIsConfigurable(\n      ObjectMapper mapper,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "full_signature": "@VisibleForTesting public static void verifyClazzIsConfigurable(\n      ObjectMapper mapper,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "class_method_signature": "JsonConfigurator.verifyClazzIsConfigurable(\n      ObjectMapper mapper,\n      Class<T> clazz,\n      @Nullable Class<? extends T> defaultClass\n  )", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/guice/JsonConfigurator.java"}, "focal_method": {"identifier": "configurate", "parameters": "(Properties props, String propertyPrefix, Class<T> clazz)", "modifiers": "public", "return": "T", "body": "public <T> T configurate(Properties props, String propertyPrefix, Class<T> clazz) throws ProvisionException\n  {\n    return configurate(props, propertyPrefix, clazz, null);\n  }", "signature": "T configurate(Properties props, String propertyPrefix, Class<T> clazz)", "full_signature": "public T configurate(Properties props, String propertyPrefix, Class<T> clazz)", "class_method_signature": "JsonConfigurator.configurate(Properties props, String propertyPrefix, Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["configurate"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}