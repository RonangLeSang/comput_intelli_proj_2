{"test_class": {"identifier": "LoadingLookupTest", "superclass": "extends InitializedNullHandlingTest", "interfaces": "", "fields": [{"original_string": "DataFetcher dataFetcher = EasyMock.createMock(DataFetcher.class);", "modifier": "", "type": "DataFetcher", "declarator": "dataFetcher = EasyMock.createMock(DataFetcher.class)", "var_name": "dataFetcher"}, {"original_string": "LoadingCache lookupCache = EasyMock.createStrictMock(LoadingCache.class);", "modifier": "", "type": "LoadingCache", "declarator": "lookupCache = EasyMock.createStrictMock(LoadingCache.class)", "var_name": "lookupCache"}, {"original_string": "LoadingCache reverseLookupCache = EasyMock.createStrictMock(LoadingCache.class);", "modifier": "", "type": "LoadingCache", "declarator": "reverseLookupCache = EasyMock.createStrictMock(LoadingCache.class)", "var_name": "reverseLookupCache"}, {"original_string": "LoadingLookup loadingLookup = new LoadingLookup(dataFetcher, lookupCache, reverseLookupCache);", "modifier": "", "type": "LoadingLookup", "declarator": "loadingLookup = new LoadingLookup(dataFetcher, lookupCache, reverseLookupCache)", "var_name": "loadingLookup"}], "file": "extensions-core/lookups-cached-single/src/test/java/org/apache/druid/server/lookup/LoadingLookupTest.java"}, "test_case": {"identifier": "testClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testClose()\n  {\n    lookupCache.close();\n    reverseLookupCache.close();\n    EasyMock.replay(lookupCache, reverseLookupCache);\n    loadingLookup.close();\n    EasyMock.verify(lookupCache, reverseLookupCache);\n  }", "signature": "void testClose()", "full_signature": "@Test public void testClose()", "class_method_signature": "LoadingLookupTest.testClose()", "testcase": true, "constructor": false, "invocations": ["close", "close", "replay", "close", "verify"]}, "focal_class": {"identifier": "LoadingLookup", "superclass": "extends LookupExtractor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = new Logger(LoadingLookup.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = new Logger(LoadingLookup.class)", "var_name": "LOGGER"}, {"original_string": "private final DataFetcher<String, String> dataFetcher;", "modifier": "private final", "type": "DataFetcher<String, String>", "declarator": "dataFetcher", "var_name": "dataFetcher"}, {"original_string": "private final LoadingCache<String, String> loadingCache;", "modifier": "private final", "type": "LoadingCache<String, String>", "declarator": "loadingCache", "var_name": "loadingCache"}, {"original_string": "private final LoadingCache<String, List<String>> reverseLoadingCache;", "modifier": "private final", "type": "LoadingCache<String, List<String>>", "declarator": "reverseLoadingCache", "var_name": "reverseLoadingCache"}, {"original_string": "private final AtomicBoolean isOpen;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isOpen", "var_name": "isOpen"}, {"original_string": "private final String id = Integer.toHexString(System.identityHashCode(this));", "modifier": "private final", "type": "String", "declarator": "id = Integer.toHexString(System.identityHashCode(this))", "var_name": "id"}], "methods": [{"identifier": "LoadingLookup", "parameters": "(\n      DataFetcher dataFetcher,\n      LoadingCache<String, String> loadingCache,\n      LoadingCache<String, List<String>> reverseLoadingCache\n  )", "modifiers": "public", "return": "", "signature": " LoadingLookup(\n      DataFetcher dataFetcher,\n      LoadingCache<String, String> loadingCache,\n      LoadingCache<String, List<String>> reverseLoadingCache\n  )", "full_signature": "public  LoadingLookup(\n      DataFetcher dataFetcher,\n      LoadingCache<String, String> loadingCache,\n      LoadingCache<String, List<String>> reverseLoadingCache\n  )", "class_method_signature": "LoadingLookup.LoadingLookup(\n      DataFetcher dataFetcher,\n      LoadingCache<String, String> loadingCache,\n      LoadingCache<String, List<String>> reverseLoadingCache\n  )", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(@Nullable final String key)", "modifiers": "@Override public", "return": "String", "signature": "String apply(@Nullable final String key)", "full_signature": "@Override public String apply(@Nullable final String key)", "class_method_signature": "LoadingLookup.apply(@Nullable final String key)", "testcase": false, "constructor": false}, {"identifier": "unapply", "parameters": "(@Nullable final String value)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> unapply(@Nullable final String value)", "full_signature": "@Override public List<String> unapply(@Nullable final String value)", "class_method_signature": "LoadingLookup.unapply(@Nullable final String value)", "testcase": false, "constructor": false}, {"identifier": "canIterate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canIterate()", "full_signature": "@Override public boolean canIterate()", "class_method_signature": "LoadingLookup.canIterate()", "testcase": false, "constructor": false}, {"identifier": "iterable", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Map.Entry<String, String>>", "signature": "Iterable<Map.Entry<String, String>> iterable()", "full_signature": "@Override public Iterable<Map.Entry<String, String>> iterable()", "class_method_signature": "LoadingLookup.iterable()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCacheKey()", "full_signature": "@Override public byte[] getCacheKey()", "class_method_signature": "LoadingLookup.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "LoadingLookup.close()", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "public boolean isOpen()", "class_method_signature": "LoadingLookup.isOpen()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LoadingLookup.toString()", "testcase": false, "constructor": false}], "file": "extensions-core/lookups-cached-single/src/main/java/org/apache/druid/server/lookup/LoadingLookup.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void close()\n  {\n    if (isOpen.getAndSet(false)) {\n      LOGGER.info(\"Closing loading cache [%s]\", id);\n      loadingCache.close();\n      reverseLoadingCache.close();\n    } else {\n      LOGGER.info(\"Closing already closed lookup\");\n    }\n  }", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "LoadingLookup.close()", "testcase": false, "constructor": false, "invocations": ["getAndSet", "info", "close", "close", "info"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}