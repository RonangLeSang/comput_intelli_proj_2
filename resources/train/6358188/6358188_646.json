{"test_class": {"identifier": "IPv4AddressExprUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> VALID_IPV4_ADDRESSES = Arrays.asList(\n      \"192.168.0.1\",\n      \"0.0.0.0\",\n      \"255.255.255.255\",\n      \"255.0.0.0\",\n      \"0.255.0.0\",\n      \"0.0.255.0\",\n      \"0.0.0.255\"\n  );", "modifier": "private static final", "type": "List<String>", "declarator": "VALID_IPV4_ADDRESSES = Arrays.asList(\n      \"192.168.0.1\",\n      \"0.0.0.0\",\n      \"255.255.255.255\",\n      \"255.0.0.0\",\n      \"0.255.0.0\",\n      \"0.0.255.0\",\n      \"0.0.0.255\"\n  )", "var_name": "VALID_IPV4_ADDRESSES"}, {"original_string": "private static final List<String> INVALID_IPV4_ADDRESSES = Arrays.asList(\n      \"druid.apache.org\",  // no octets are numbers\n      \"a.b.c.d\",  // no octets are numbers\n      \"abc.def.ghi.jkl\",  // no octets are numbers\n      \"1..3.4\",  // missing octet\n      \"1.2..4\",  // missing octet\n      \"1.2.3..\", // missing octet\n      \"1\",  // missing octets\n      \"1.2\",  // missing octets\n      \"1.2.3\",  // missing octet\n      \"1.2.3.4.5\",  // too many octets\n      \"256.0.0.0\",  // first octet too large\n      \"0.265.0.0\",  // second octet too large\n      \"0.0.266.0\",  // third octet too large\n      \"0.0.0.355\",  // fourth octet too large\n      \"a.2.3.4\",  // first octet not number\n      \"1.a.3.4\",  // second octet not number\n      \"1.2.c.4\",  // third octet not number\n      \"1.2.3.d\"  // fourth octet not number\n  );", "modifier": "private static final", "type": "List<String>", "declarator": "INVALID_IPV4_ADDRESSES = Arrays.asList(\n      \"druid.apache.org\",  // no octets are numbers\n      \"a.b.c.d\",  // no octets are numbers\n      \"abc.def.ghi.jkl\",  // no octets are numbers\n      \"1..3.4\",  // missing octet\n      \"1.2..4\",  // missing octet\n      \"1.2.3..\", // missing octet\n      \"1\",  // missing octets\n      \"1.2\",  // missing octets\n      \"1.2.3\",  // missing octet\n      \"1.2.3.4.5\",  // too many octets\n      \"256.0.0.0\",  // first octet too large\n      \"0.265.0.0\",  // second octet too large\n      \"0.0.266.0\",  // third octet too large\n      \"0.0.0.355\",  // fourth octet too large\n      \"a.2.3.4\",  // first octet not number\n      \"1.a.3.4\",  // second octet not number\n      \"1.2.c.4\",  // third octet not number\n      \"1.2.3.d\"  // fourth octet not number\n  )", "var_name": "INVALID_IPV4_ADDRESSES"}, {"original_string": "private static final String IPV6_MAPPED = \"::ffff:192.168.0.1\";", "modifier": "private static final", "type": "String", "declarator": "IPV6_MAPPED = \"::ffff:192.168.0.1\"", "var_name": "IPV6_MAPPED"}, {"original_string": "private static final String IPV6_COMPATIBLE = \"::192.168.0.1\";", "modifier": "private static final", "type": "String", "declarator": "IPV6_COMPATIBLE = \"::192.168.0.1\"", "var_name": "IPV6_COMPATIBLE"}], "file": "processing/src/test/java/org/apache/druid/query/expression/IPv4AddressExprUtilsTest.java"}, "test_case": {"identifier": "testIsValidAddressIPv4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsValidAddressIPv4()\n  {\n    for (String address : VALID_IPV4_ADDRESSES) {\n      Assert.assertTrue(getErrMsg(address), IPv4AddressExprUtils.isValidAddress(address));\n    }\n  }", "signature": "void testIsValidAddressIPv4()", "full_signature": "@Test public void testIsValidAddressIPv4()", "class_method_signature": "IPv4AddressExprUtilsTest.testIsValidAddressIPv4()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getErrMsg", "isValidAddress"]}, "focal_class": {"identifier": "IPv4AddressExprUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern IPV4_PATTERN = Pattern.compile(\n      \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n  );", "modifier": "private static final", "type": "Pattern", "declarator": "IPV4_PATTERN = Pattern.compile(\n      \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n  )", "var_name": "IPV4_PATTERN"}], "methods": [{"identifier": "overflowsUnsignedInt", "parameters": "(long value)", "modifiers": "static", "return": "boolean", "signature": "boolean overflowsUnsignedInt(long value)", "full_signature": "static boolean overflowsUnsignedInt(long value)", "class_method_signature": "IPv4AddressExprUtils.overflowsUnsignedInt(long value)", "testcase": false, "constructor": false}, {"identifier": "isValidAddress", "parameters": "(@Nullable String string)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidAddress(@Nullable String string)", "full_signature": "static boolean isValidAddress(@Nullable String string)", "class_method_signature": "IPv4AddressExprUtils.isValidAddress(@Nullable String string)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@Nullable String string)", "modifiers": "@Nullable static", "return": "Inet4Address", "signature": "Inet4Address parse(@Nullable String string)", "full_signature": "@Nullable static Inet4Address parse(@Nullable String string)", "class_method_signature": "IPv4AddressExprUtils.parse(@Nullable String string)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(int value)", "modifiers": "static", "return": "Inet4Address", "signature": "Inet4Address parse(int value)", "full_signature": "static Inet4Address parse(int value)", "class_method_signature": "IPv4AddressExprUtils.parse(int value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Inet4Address address)", "modifiers": "static", "return": "String", "signature": "String toString(Inet4Address address)", "full_signature": "static String toString(Inet4Address address)", "class_method_signature": "IPv4AddressExprUtils.toString(Inet4Address address)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(Inet4Address address)", "modifiers": "static", "return": "long", "signature": "long toLong(Inet4Address address)", "full_signature": "static long toLong(Inet4Address address)", "class_method_signature": "IPv4AddressExprUtils.toLong(Inet4Address address)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/expression/IPv4AddressExprUtils.java"}, "focal_method": {"identifier": "isValidAddress", "parameters": "(@Nullable String string)", "modifiers": "static", "return": "boolean", "body": "static boolean isValidAddress(@Nullable String string)\n  {\n    return string != null && IPV4_PATTERN.matcher(string).matches();\n  }", "signature": "boolean isValidAddress(@Nullable String string)", "full_signature": "static boolean isValidAddress(@Nullable String string)", "class_method_signature": "IPv4AddressExprUtils.isValidAddress(@Nullable String string)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}