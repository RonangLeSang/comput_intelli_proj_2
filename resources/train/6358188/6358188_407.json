{"test_class": {"identifier": "JavaScriptDimFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FN1 = \"function(x) { return x }\";", "modifier": "private static final", "type": "String", "declarator": "FN1 = \"function(x) { return x }\"", "var_name": "FN1"}, {"original_string": "private static final String FN2 = \"function(x) { return x + x }\";", "modifier": "private static final", "type": "String", "declarator": "FN2 = \"function(x) { return x + x }\"", "var_name": "FN2"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "processing/src/test/java/org/apache/druid/query/filter/JavaScriptDimFilterTest.java"}, "test_case": {"identifier": "testToFilterNotAllowed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToFilterNotAllowed()\n  {\n    JavaScriptDimFilter javaScriptDimFilter = new JavaScriptDimFilter(\"dim\", FN1, null, new JavaScriptConfig(false));\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"JavaScript is disabled\");\n    javaScriptDimFilter.toFilter();\n    Assert.assertTrue(false);\n  }", "signature": "void testToFilterNotAllowed()", "full_signature": "@Test public void testToFilterNotAllowed()", "class_method_signature": "JavaScriptDimFilterTest.testToFilterNotAllowed()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "toFilter", "assertTrue"]}, "focal_class": {"identifier": "JavaScriptDimFilter", "superclass": "extends AbstractOptimizableDimFilter", "interfaces": "implements DimFilter", "fields": [{"original_string": "private final String dimension;", "modifier": "private final", "type": "String", "declarator": "dimension", "var_name": "dimension"}, {"original_string": "private final String function;", "modifier": "private final", "type": "String", "declarator": "function", "var_name": "function"}, {"original_string": "@Nullable\n  private final ExtractionFn extractionFn;", "modifier": "@Nullable\n  private final", "type": "ExtractionFn", "declarator": "extractionFn", "var_name": "extractionFn"}, {"original_string": "@Nullable\n  private final FilterTuning filterTuning;", "modifier": "@Nullable\n  private final", "type": "FilterTuning", "declarator": "filterTuning", "var_name": "filterTuning"}, {"original_string": "private final JavaScriptConfig config;", "modifier": "private final", "type": "JavaScriptConfig", "declarator": "config", "var_name": "config"}, {"original_string": "@MonotonicNonNull\n  private volatile JavaScriptPredicateFactory predicateFactory;", "modifier": "@MonotonicNonNull\n  private volatile", "type": "JavaScriptPredicateFactory", "declarator": "predicateFactory", "var_name": "predicateFactory"}], "methods": [{"identifier": "JavaScriptDimFilter", "parameters": "(\n      @JsonProperty(\"dimension\") String dimension,\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"extractionFn\") @Nullable ExtractionFn extractionFn,\n      @JsonProperty(\"filterTuning\") @Nullable FilterTuning filterTuning,\n      @JacksonInject JavaScriptConfig config\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " JavaScriptDimFilter(\n      @JsonProperty(\"dimension\") String dimension,\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"extractionFn\") @Nullable ExtractionFn extractionFn,\n      @JsonProperty(\"filterTuning\") @Nullable FilterTuning filterTuning,\n      @JacksonInject JavaScriptConfig config\n  )", "full_signature": "@JsonCreator public  JavaScriptDimFilter(\n      @JsonProperty(\"dimension\") String dimension,\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"extractionFn\") @Nullable ExtractionFn extractionFn,\n      @JsonProperty(\"filterTuning\") @Nullable FilterTuning filterTuning,\n      @JacksonInject JavaScriptConfig config\n  )", "class_method_signature": "JavaScriptDimFilter.JavaScriptDimFilter(\n      @JsonProperty(\"dimension\") String dimension,\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"extractionFn\") @Nullable ExtractionFn extractionFn,\n      @JsonProperty(\"filterTuning\") @Nullable FilterTuning filterTuning,\n      @JacksonInject JavaScriptConfig config\n  )", "testcase": false, "constructor": true}, {"identifier": "JavaScriptDimFilter", "parameters": "(\n      String dimension,\n      String function,\n      @Nullable ExtractionFn extractionFn,\n      JavaScriptConfig config\n  )", "modifiers": "@VisibleForTesting public", "return": "", "signature": " JavaScriptDimFilter(\n      String dimension,\n      String function,\n      @Nullable ExtractionFn extractionFn,\n      JavaScriptConfig config\n  )", "full_signature": "@VisibleForTesting public  JavaScriptDimFilter(\n      String dimension,\n      String function,\n      @Nullable ExtractionFn extractionFn,\n      JavaScriptConfig config\n  )", "class_method_signature": "JavaScriptDimFilter.JavaScriptDimFilter(\n      String dimension,\n      String function,\n      @Nullable ExtractionFn extractionFn,\n      JavaScriptConfig config\n  )", "testcase": false, "constructor": true}, {"identifier": "getDimension", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getDimension()", "full_signature": "@JsonProperty public String getDimension()", "class_method_signature": "JavaScriptDimFilter.getDimension()", "testcase": false, "constructor": false}, {"identifier": "getFunction", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getFunction()", "full_signature": "@JsonProperty public String getFunction()", "class_method_signature": "JavaScriptDimFilter.getFunction()", "testcase": false, "constructor": false}, {"identifier": "getExtractionFn", "parameters": "()", "modifiers": "@Nullable @JsonProperty public", "return": "ExtractionFn", "signature": "ExtractionFn getExtractionFn()", "full_signature": "@Nullable @JsonProperty public ExtractionFn getExtractionFn()", "class_method_signature": "JavaScriptDimFilter.getExtractionFn()", "testcase": false, "constructor": false}, {"identifier": "getFilterTuning", "parameters": "()", "modifiers": "@Nullable @JsonInclude(JsonInclude.Include.NON_NULL) @JsonProperty public", "return": "FilterTuning", "signature": "FilterTuning getFilterTuning()", "full_signature": "@Nullable @JsonInclude(JsonInclude.Include.NON_NULL) @JsonProperty public FilterTuning getFilterTuning()", "class_method_signature": "JavaScriptDimFilter.getFilterTuning()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCacheKey()", "full_signature": "@Override public byte[] getCacheKey()", "class_method_signature": "JavaScriptDimFilter.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "optimize", "parameters": "()", "modifiers": "@Override public", "return": "DimFilter", "signature": "DimFilter optimize()", "full_signature": "@Override public DimFilter optimize()", "class_method_signature": "JavaScriptDimFilter.optimize()", "testcase": false, "constructor": false}, {"identifier": "toFilter", "parameters": "()", "modifiers": "@Override public", "return": "Filter", "signature": "Filter toFilter()", "full_signature": "@Override public Filter toFilter()", "class_method_signature": "JavaScriptDimFilter.toFilter()", "testcase": false, "constructor": false}, {"identifier": "getPredicateFactory", "parameters": "()", "modifiers": "@EnsuresNonNull(\"predicateFactory\") private", "return": "JavaScriptPredicateFactory", "signature": "JavaScriptPredicateFactory getPredicateFactory()", "full_signature": "@EnsuresNonNull(\"predicateFactory\") private JavaScriptPredicateFactory getPredicateFactory()", "class_method_signature": "JavaScriptDimFilter.getPredicateFactory()", "testcase": false, "constructor": false}, {"identifier": "getDimensionRangeSet", "parameters": "(String dimension)", "modifiers": "@Override public", "return": "RangeSet<String>", "signature": "RangeSet<String> getDimensionRangeSet(String dimension)", "full_signature": "@Override public RangeSet<String> getDimensionRangeSet(String dimension)", "class_method_signature": "JavaScriptDimFilter.getDimensionRangeSet(String dimension)", "testcase": false, "constructor": false}, {"identifier": "getRequiredColumns", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getRequiredColumns()", "full_signature": "@Override public Set<String> getRequiredColumns()", "class_method_signature": "JavaScriptDimFilter.getRequiredColumns()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "JavaScriptDimFilter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JavaScriptDimFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JavaScriptDimFilter.toString()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/filter/JavaScriptDimFilter.java"}, "focal_method": {"identifier": "toFilter", "parameters": "()", "modifiers": "@Override public", "return": "Filter", "body": "@Override\n  public Filter toFilter()\n  {\n    JavaScriptPredicateFactory predicateFactory = getPredicateFactory();\n    return new JavaScriptFilter(dimension, predicateFactory, filterTuning);\n  }", "signature": "Filter toFilter()", "full_signature": "@Override public Filter toFilter()", "class_method_signature": "JavaScriptDimFilter.toFilter()", "testcase": false, "constructor": false, "invocations": ["getPredicateFactory"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}