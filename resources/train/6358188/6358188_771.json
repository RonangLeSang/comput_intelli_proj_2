{"test_class": {"identifier": "IndexSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "processing/src/test/java/org/apache/druid/segment/IndexSpecTest.java"}, "test_case": {"identifier": "testAsMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAsMap()\n  {\n    final ObjectMapper objectMapper = new DefaultObjectMapper();\n    final IndexSpec spec = new IndexSpec();\n    final Map<String, Object> map = spec.asMap(objectMapper);\n    Assert.assertEquals(\n        spec.getBitmapSerdeFactory(),\n        objectMapper.convertValue(map.get(\"bitmap\"), BitmapSerdeFactory.class)\n    );\n    Assert.assertEquals(\n        spec.getDimensionCompression(),\n        objectMapper.convertValue(map.get(\"dimensionCompression\"), CompressionStrategy.class)\n    );\n    Assert.assertEquals(\n        spec.getMetricCompression(),\n        objectMapper.convertValue(map.get(\"metricCompression\"), CompressionStrategy.class)\n    );\n    Assert.assertEquals(\n        spec.getLongEncoding(),\n        objectMapper.convertValue(map.get(\"longEncoding\"), LongEncodingStrategy.class)\n    );\n  }", "signature": "void testAsMap()", "full_signature": "@Test public void testAsMap()", "class_method_signature": "IndexSpecTest.testAsMap()", "testcase": true, "constructor": false, "invocations": ["asMap", "assertEquals", "getBitmapSerdeFactory", "convertValue", "get", "assertEquals", "getDimensionCompression", "convertValue", "get", "assertEquals", "getMetricCompression", "convertValue", "get", "assertEquals", "getLongEncoding", "convertValue", "get"]}, "focal_class": {"identifier": "IndexSpec", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final CompressionStrategy DEFAULT_METRIC_COMPRESSION = CompressionStrategy.DEFAULT_COMPRESSION_STRATEGY;", "modifier": "public static final", "type": "CompressionStrategy", "declarator": "DEFAULT_METRIC_COMPRESSION = CompressionStrategy.DEFAULT_COMPRESSION_STRATEGY", "var_name": "DEFAULT_METRIC_COMPRESSION"}, {"original_string": "public static final CompressionStrategy DEFAULT_DIMENSION_COMPRESSION = CompressionStrategy.DEFAULT_COMPRESSION_STRATEGY;", "modifier": "public static final", "type": "CompressionStrategy", "declarator": "DEFAULT_DIMENSION_COMPRESSION = CompressionStrategy.DEFAULT_COMPRESSION_STRATEGY", "var_name": "DEFAULT_DIMENSION_COMPRESSION"}, {"original_string": "public static final CompressionFactory.LongEncodingStrategy DEFAULT_LONG_ENCODING = CompressionFactory.DEFAULT_LONG_ENCODING_STRATEGY;", "modifier": "public static final", "type": "CompressionFactory.LongEncodingStrategy", "declarator": "DEFAULT_LONG_ENCODING = CompressionFactory.DEFAULT_LONG_ENCODING_STRATEGY", "var_name": "DEFAULT_LONG_ENCODING"}, {"original_string": "private static final Set<CompressionStrategy> METRIC_COMPRESSION = Sets.newHashSet(\n      Arrays.asList(CompressionStrategy.values())\n  );", "modifier": "private static final", "type": "Set<CompressionStrategy>", "declarator": "METRIC_COMPRESSION = Sets.newHashSet(\n      Arrays.asList(CompressionStrategy.values())\n  )", "var_name": "METRIC_COMPRESSION"}, {"original_string": "private static final Set<CompressionStrategy> DIMENSION_COMPRESSION = Sets.newHashSet(\n      Arrays.asList(CompressionStrategy.noNoneValues())\n  );", "modifier": "private static final", "type": "Set<CompressionStrategy>", "declarator": "DIMENSION_COMPRESSION = Sets.newHashSet(\n      Arrays.asList(CompressionStrategy.noNoneValues())\n  )", "var_name": "DIMENSION_COMPRESSION"}, {"original_string": "private static final Set<CompressionFactory.LongEncodingStrategy> LONG_ENCODING_NAMES = Sets.newHashSet(\n      Arrays.asList(CompressionFactory.LongEncodingStrategy.values())\n  );", "modifier": "private static final", "type": "Set<CompressionFactory.LongEncodingStrategy>", "declarator": "LONG_ENCODING_NAMES = Sets.newHashSet(\n      Arrays.asList(CompressionFactory.LongEncodingStrategy.values())\n  )", "var_name": "LONG_ENCODING_NAMES"}, {"original_string": "private final BitmapSerdeFactory bitmapSerdeFactory;", "modifier": "private final", "type": "BitmapSerdeFactory", "declarator": "bitmapSerdeFactory", "var_name": "bitmapSerdeFactory"}, {"original_string": "private final CompressionStrategy dimensionCompression;", "modifier": "private final", "type": "CompressionStrategy", "declarator": "dimensionCompression", "var_name": "dimensionCompression"}, {"original_string": "private final CompressionStrategy metricCompression;", "modifier": "private final", "type": "CompressionStrategy", "declarator": "metricCompression", "var_name": "metricCompression"}, {"original_string": "private final CompressionFactory.LongEncodingStrategy longEncoding;", "modifier": "private final", "type": "CompressionFactory.LongEncodingStrategy", "declarator": "longEncoding", "var_name": "longEncoding"}, {"original_string": "@Nullable\n  private final SegmentizerFactory segmentLoader;", "modifier": "@Nullable\n  private final", "type": "SegmentizerFactory", "declarator": "segmentLoader", "var_name": "segmentLoader"}], "methods": [{"identifier": "IndexSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " IndexSpec()", "full_signature": "public  IndexSpec()", "class_method_signature": "IndexSpec.IndexSpec()", "testcase": false, "constructor": true}, {"identifier": "IndexSpec", "parameters": "(\n      @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @Nullable CompressionStrategy dimensionCompression,\n      @Nullable CompressionStrategy metricCompression,\n      @Nullable CompressionFactory.LongEncodingStrategy longEncoding\n  )", "modifiers": "@VisibleForTesting public", "return": "", "signature": " IndexSpec(\n      @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @Nullable CompressionStrategy dimensionCompression,\n      @Nullable CompressionStrategy metricCompression,\n      @Nullable CompressionFactory.LongEncodingStrategy longEncoding\n  )", "full_signature": "@VisibleForTesting public  IndexSpec(\n      @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @Nullable CompressionStrategy dimensionCompression,\n      @Nullable CompressionStrategy metricCompression,\n      @Nullable CompressionFactory.LongEncodingStrategy longEncoding\n  )", "class_method_signature": "IndexSpec.IndexSpec(\n      @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @Nullable CompressionStrategy dimensionCompression,\n      @Nullable CompressionStrategy metricCompression,\n      @Nullable CompressionFactory.LongEncodingStrategy longEncoding\n  )", "testcase": false, "constructor": true}, {"identifier": "IndexSpec", "parameters": "(\n      @JsonProperty(\"bitmap\") @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @JsonProperty(\"dimensionCompression\") @Nullable CompressionStrategy dimensionCompression,\n      @JsonProperty(\"metricCompression\") @Nullable CompressionStrategy metricCompression,\n      @JsonProperty(\"longEncoding\") @Nullable CompressionFactory.LongEncodingStrategy longEncoding,\n      @JsonProperty(\"segmentLoader\") @Nullable SegmentizerFactory segmentLoader\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " IndexSpec(\n      @JsonProperty(\"bitmap\") @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @JsonProperty(\"dimensionCompression\") @Nullable CompressionStrategy dimensionCompression,\n      @JsonProperty(\"metricCompression\") @Nullable CompressionStrategy metricCompression,\n      @JsonProperty(\"longEncoding\") @Nullable CompressionFactory.LongEncodingStrategy longEncoding,\n      @JsonProperty(\"segmentLoader\") @Nullable SegmentizerFactory segmentLoader\n  )", "full_signature": "@JsonCreator public  IndexSpec(\n      @JsonProperty(\"bitmap\") @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @JsonProperty(\"dimensionCompression\") @Nullable CompressionStrategy dimensionCompression,\n      @JsonProperty(\"metricCompression\") @Nullable CompressionStrategy metricCompression,\n      @JsonProperty(\"longEncoding\") @Nullable CompressionFactory.LongEncodingStrategy longEncoding,\n      @JsonProperty(\"segmentLoader\") @Nullable SegmentizerFactory segmentLoader\n  )", "class_method_signature": "IndexSpec.IndexSpec(\n      @JsonProperty(\"bitmap\") @Nullable BitmapSerdeFactory bitmapSerdeFactory,\n      @JsonProperty(\"dimensionCompression\") @Nullable CompressionStrategy dimensionCompression,\n      @JsonProperty(\"metricCompression\") @Nullable CompressionStrategy metricCompression,\n      @JsonProperty(\"longEncoding\") @Nullable CompressionFactory.LongEncodingStrategy longEncoding,\n      @JsonProperty(\"segmentLoader\") @Nullable SegmentizerFactory segmentLoader\n  )", "testcase": false, "constructor": true}, {"identifier": "getBitmapSerdeFactory", "parameters": "()", "modifiers": "@JsonProperty(\"bitmap\") public", "return": "BitmapSerdeFactory", "signature": "BitmapSerdeFactory getBitmapSerdeFactory()", "full_signature": "@JsonProperty(\"bitmap\") public BitmapSerdeFactory getBitmapSerdeFactory()", "class_method_signature": "IndexSpec.getBitmapSerdeFactory()", "testcase": false, "constructor": false}, {"identifier": "getDimensionCompression", "parameters": "()", "modifiers": "@JsonProperty public", "return": "CompressionStrategy", "signature": "CompressionStrategy getDimensionCompression()", "full_signature": "@JsonProperty public CompressionStrategy getDimensionCompression()", "class_method_signature": "IndexSpec.getDimensionCompression()", "testcase": false, "constructor": false}, {"identifier": "getMetricCompression", "parameters": "()", "modifiers": "@JsonProperty public", "return": "CompressionStrategy", "signature": "CompressionStrategy getMetricCompression()", "full_signature": "@JsonProperty public CompressionStrategy getMetricCompression()", "class_method_signature": "IndexSpec.getMetricCompression()", "testcase": false, "constructor": false}, {"identifier": "getLongEncoding", "parameters": "()", "modifiers": "@JsonProperty public", "return": "CompressionFactory.LongEncodingStrategy", "signature": "CompressionFactory.LongEncodingStrategy getLongEncoding()", "full_signature": "@JsonProperty public CompressionFactory.LongEncodingStrategy getLongEncoding()", "class_method_signature": "IndexSpec.getLongEncoding()", "testcase": false, "constructor": false}, {"identifier": "getSegmentLoader", "parameters": "()", "modifiers": "@JsonProperty @Nullable public", "return": "SegmentizerFactory", "signature": "SegmentizerFactory getSegmentLoader()", "full_signature": "@JsonProperty @Nullable public SegmentizerFactory getSegmentLoader()", "class_method_signature": "IndexSpec.getSegmentLoader()", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "(ObjectMapper objectMapper)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> asMap(ObjectMapper objectMapper)", "full_signature": "public Map<String, Object> asMap(ObjectMapper objectMapper)", "class_method_signature": "IndexSpec.asMap(ObjectMapper objectMapper)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "IndexSpec.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IndexSpec.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IndexSpec.toString()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/IndexSpec.java"}, "focal_method": {"identifier": "asMap", "parameters": "(ObjectMapper objectMapper)", "modifiers": "public", "return": "Map<String, Object>", "body": "public Map<String, Object> asMap(ObjectMapper objectMapper)\n  {\n    return objectMapper.convertValue(\n        this,\n        new TypeReference<Map<String, Object>>() {}\n    );\n  }", "signature": "Map<String, Object> asMap(ObjectMapper objectMapper)", "full_signature": "public Map<String, Object> asMap(ObjectMapper objectMapper)", "class_method_signature": "IndexSpec.asMap(ObjectMapper objectMapper)", "testcase": false, "constructor": false, "invocations": ["convertValue"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}