{"test_class": {"identifier": "OssTaskLogsTest", "superclass": "extends EasyMockSupport", "interfaces": "", "fields": [{"original_string": "private static final String KEY_1 = \"key1\";", "modifier": "private static final", "type": "String", "declarator": "KEY_1 = \"key1\"", "var_name": "KEY_1"}, {"original_string": "private static final String KEY_2 = \"key2\";", "modifier": "private static final", "type": "String", "declarator": "KEY_2 = \"key2\"", "var_name": "KEY_2"}, {"original_string": "private static final String TEST_BUCKET = \"test_bucket\";", "modifier": "private static final", "type": "String", "declarator": "TEST_BUCKET = \"test_bucket\"", "var_name": "TEST_BUCKET"}, {"original_string": "private static final String TEST_PREFIX = \"test_prefix\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PREFIX = \"test_prefix\"", "var_name": "TEST_PREFIX"}, {"original_string": "private static final URI PREFIX_URI = URI.create(StringUtils.format(\"oss://%s/%s\", TEST_BUCKET, TEST_PREFIX));", "modifier": "private static final", "type": "URI", "declarator": "PREFIX_URI = URI.create(StringUtils.format(\"oss://%s/%s\", TEST_BUCKET, TEST_PREFIX))", "var_name": "PREFIX_URI"}, {"original_string": "private static final long TIME_0 = 0L;", "modifier": "private static final", "type": "long", "declarator": "TIME_0 = 0L", "var_name": "TIME_0"}, {"original_string": "private static final long TIME_1 = 1L;", "modifier": "private static final", "type": "long", "declarator": "TIME_1 = 1L", "var_name": "TIME_1"}, {"original_string": "private static final long TIME_NOW = 2L;", "modifier": "private static final", "type": "long", "declarator": "TIME_NOW = 2L", "var_name": "TIME_NOW"}, {"original_string": "private static final long TIME_FUTURE = 3L;", "modifier": "private static final", "type": "long", "declarator": "TIME_FUTURE = 3L", "var_name": "TIME_FUTURE"}, {"original_string": "private static final int MAX_KEYS = 1;", "modifier": "private static final", "type": "int", "declarator": "MAX_KEYS = 1", "var_name": "MAX_KEYS"}, {"original_string": "private static final Exception RECOVERABLE_EXCEPTION = new ClientException(new IOException());", "modifier": "private static final", "type": "Exception", "declarator": "RECOVERABLE_EXCEPTION = new ClientException(new IOException())", "var_name": "RECOVERABLE_EXCEPTION"}, {"original_string": "private static final Exception NON_RECOVERABLE_EXCEPTION = new ClientException(new NullPointerException());", "modifier": "private static final", "type": "Exception", "declarator": "NON_RECOVERABLE_EXCEPTION = new ClientException(new NullPointerException())", "var_name": "NON_RECOVERABLE_EXCEPTION"}, {"original_string": "@Mock\n  private CurrentTimeMillisSupplier timeSupplier;", "modifier": "@Mock\n  private", "type": "CurrentTimeMillisSupplier", "declarator": "timeSupplier", "var_name": "timeSupplier"}, {"original_string": "@Mock\n  private OSS ossClient;", "modifier": "@Mock\n  private", "type": "OSS", "declarator": "ossClient", "var_name": "ossClient"}, {"original_string": "@Rule\n  public final TemporaryFolder tempFolder = new TemporaryFolder();", "modifier": "@Rule\n  public final", "type": "TemporaryFolder", "declarator": "tempFolder = new TemporaryFolder()", "var_name": "tempFolder"}], "file": "extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssTaskLogsTest.java"}, "test_case": {"identifier": "test_killAll_nonrecoverableExceptionWhenListingObjects_doesntDeleteAnyTaskLogs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_killAll_nonrecoverableExceptionWhenListingObjects_doesntDeleteAnyTaskLogs()\n  {\n    boolean ioExceptionThrown = false;\n    try {\n      OSSObjectSummary objectSummary1 = OssTestUtils.newOSSObjectSummary(TEST_BUCKET, KEY_1, TIME_0);\n      EasyMock.expect(timeSupplier.getAsLong()).andReturn(TIME_NOW);\n      OssTestUtils.expectListObjects(\n          ossClient,\n          PREFIX_URI,\n          ImmutableList.of(objectSummary1)\n      );\n\n      DeleteObjectsRequest deleteRequest1 = new DeleteObjectsRequest(TEST_BUCKET);\n      deleteRequest1.setKeys(Collections.singletonList(KEY_1));\n      OssTestUtils.mockClientDeleteObjects(\n          ossClient,\n          ImmutableList.of(),\n          ImmutableMap.of(deleteRequest1, NON_RECOVERABLE_EXCEPTION)\n      );\n\n      EasyMock.replay(ossClient, timeSupplier);\n\n      OssTaskLogsConfig config = new OssTaskLogsConfig();\n      config.setBucket(TEST_BUCKET);\n      config.setPrefix(TEST_PREFIX);\n      OssInputDataConfig inputDataConfig = new OssInputDataConfig();\n      inputDataConfig.setMaxListingLength(MAX_KEYS);\n      OssTaskLogs taskLogs = new OssTaskLogs(ossClient, config, inputDataConfig, timeSupplier);\n      taskLogs.killAll();\n    }\n    catch (IOException e) {\n      ioExceptionThrown = true;\n    }\n\n    Assert.assertTrue(ioExceptionThrown);\n\n    EasyMock.verify(ossClient, timeSupplier);\n  }", "signature": "void test_killAll_nonrecoverableExceptionWhenListingObjects_doesntDeleteAnyTaskLogs()", "full_signature": "@Test public void test_killAll_nonrecoverableExceptionWhenListingObjects_doesntDeleteAnyTaskLogs()", "class_method_signature": "OssTaskLogsTest.test_killAll_nonrecoverableExceptionWhenListingObjects_doesntDeleteAnyTaskLogs()", "testcase": true, "constructor": false, "invocations": ["newOSSObjectSummary", "andReturn", "expect", "getAsLong", "expectListObjects", "of", "setKeys", "singletonList", "mockClientDeleteObjects", "of", "of", "replay", "setBucket", "setPrefix", "setMaxListingLength", "killAll", "assertTrue", "verify"]}, "focal_class": {"identifier": "OssTaskLogs", "superclass": "", "interfaces": "implements TaskLogs", "fields": [{"original_string": "private static final Logger log = new Logger(OssTaskLogs.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(OssTaskLogs.class)", "var_name": "log"}, {"original_string": "private final OSS client;", "modifier": "private final", "type": "OSS", "declarator": "client", "var_name": "client"}, {"original_string": "private final OssTaskLogsConfig config;", "modifier": "private final", "type": "OssTaskLogsConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final OssInputDataConfig inputDataConfig;", "modifier": "private final", "type": "OssInputDataConfig", "declarator": "inputDataConfig", "var_name": "inputDataConfig"}, {"original_string": "private final CurrentTimeMillisSupplier timeSupplier;", "modifier": "private final", "type": "CurrentTimeMillisSupplier", "declarator": "timeSupplier", "var_name": "timeSupplier"}], "methods": [{"identifier": "OssTaskLogs", "parameters": "(\n      OSS service,\n      OssTaskLogsConfig config,\n      OssInputDataConfig inputDataConfig,\n      CurrentTimeMillisSupplier timeSupplier\n  )", "modifiers": "@Inject public", "return": "", "signature": " OssTaskLogs(\n      OSS service,\n      OssTaskLogsConfig config,\n      OssInputDataConfig inputDataConfig,\n      CurrentTimeMillisSupplier timeSupplier\n  )", "full_signature": "@Inject public  OssTaskLogs(\n      OSS service,\n      OssTaskLogsConfig config,\n      OssInputDataConfig inputDataConfig,\n      CurrentTimeMillisSupplier timeSupplier\n  )", "class_method_signature": "OssTaskLogs.OssTaskLogs(\n      OSS service,\n      OssTaskLogsConfig config,\n      OssInputDataConfig inputDataConfig,\n      CurrentTimeMillisSupplier timeSupplier\n  )", "testcase": false, "constructor": true}, {"identifier": "streamTaskLog", "parameters": "(final String taskid, final long offset)", "modifiers": "@Override public", "return": "Optional<ByteSource>", "signature": "Optional<ByteSource> streamTaskLog(final String taskid, final long offset)", "full_signature": "@Override public Optional<ByteSource> streamTaskLog(final String taskid, final long offset)", "class_method_signature": "OssTaskLogs.streamTaskLog(final String taskid, final long offset)", "testcase": false, "constructor": false}, {"identifier": "streamTaskReports", "parameters": "(String taskid)", "modifiers": "@Override public", "return": "Optional<ByteSource>", "signature": "Optional<ByteSource> streamTaskReports(String taskid)", "full_signature": "@Override public Optional<ByteSource> streamTaskReports(String taskid)", "class_method_signature": "OssTaskLogs.streamTaskReports(String taskid)", "testcase": false, "constructor": false}, {"identifier": "streamTaskFile", "parameters": "(final long offset, String taskKey)", "modifiers": "private", "return": "Optional<ByteSource>", "signature": "Optional<ByteSource> streamTaskFile(final long offset, String taskKey)", "full_signature": "private Optional<ByteSource> streamTaskFile(final long offset, String taskKey)", "class_method_signature": "OssTaskLogs.streamTaskFile(final long offset, String taskKey)", "testcase": false, "constructor": false}, {"identifier": "pushTaskLog", "parameters": "(final String taskid, final File logFile)", "modifiers": "@Override public", "return": "void", "signature": "void pushTaskLog(final String taskid, final File logFile)", "full_signature": "@Override public void pushTaskLog(final String taskid, final File logFile)", "class_method_signature": "OssTaskLogs.pushTaskLog(final String taskid, final File logFile)", "testcase": false, "constructor": false}, {"identifier": "pushTaskReports", "parameters": "(String taskid, File reportFile)", "modifiers": "@Override public", "return": "void", "signature": "void pushTaskReports(String taskid, File reportFile)", "full_signature": "@Override public void pushTaskReports(String taskid, File reportFile)", "class_method_signature": "OssTaskLogs.pushTaskReports(String taskid, File reportFile)", "testcase": false, "constructor": false}, {"identifier": "pushTaskFile", "parameters": "(final File logFile, String taskKey)", "modifiers": "private", "return": "void", "signature": "void pushTaskFile(final File logFile, String taskKey)", "full_signature": "private void pushTaskFile(final File logFile, String taskKey)", "class_method_signature": "OssTaskLogs.pushTaskFile(final File logFile, String taskKey)", "testcase": false, "constructor": false}, {"identifier": "getTaskLogKey", "parameters": "(String taskid, String filename)", "modifiers": "", "return": "String", "signature": "String getTaskLogKey(String taskid, String filename)", "full_signature": " String getTaskLogKey(String taskid, String filename)", "class_method_signature": "OssTaskLogs.getTaskLogKey(String taskid, String filename)", "testcase": false, "constructor": false}, {"identifier": "killAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void killAll()", "full_signature": "@Override public void killAll()", "class_method_signature": "OssTaskLogs.killAll()", "testcase": false, "constructor": false}, {"identifier": "killOlderThan", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "void", "signature": "void killOlderThan(long timestamp)", "full_signature": "@Override public void killOlderThan(long timestamp)", "class_method_signature": "OssTaskLogs.killOlderThan(long timestamp)", "testcase": false, "constructor": false}], "file": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssTaskLogs.java"}, "focal_method": {"identifier": "killAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void killAll() throws IOException\n  {\n    log.info(\n        \"Deleting all task logs from aliyun OSS location [bucket: '%s' prefix: '%s'].\",\n        config.getBucket(),\n        config.getPrefix()\n    );\n\n    long now = timeSupplier.getAsLong();\n    killOlderThan(now);\n  }", "signature": "void killAll()", "full_signature": "@Override public void killAll()", "class_method_signature": "OssTaskLogs.killAll()", "testcase": false, "constructor": false, "invocations": ["info", "getBucket", "getPrefix", "getAsLong", "killOlderThan"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}