{"test_class": {"identifier": "ForkingTaskRunnerConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new DefaultObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new DefaultObjectMapper()", "var_name": "MAPPER"}, {"original_string": "private static final Injector INJECTOR = Initialization.makeInjectorWithModules(\n      GuiceInjectors.makeStartupInjector(),\n      ImmutableList.<Module>of(\n          new Module()\n          {\n            @Override\n            public void configure(Binder binder)\n            {\n              binder.bind(Key.get(String.class, Names.named(\"serviceName\"))).toInstance(\"some service\");\n              binder.bind(Key.get(Integer.class, Names.named(\"servicePort\"))).toInstance(0);\n              binder.bind(Key.get(Integer.class, Names.named(\"tlsServicePort\"))).toInstance(-1);\n            }\n          }\n      )\n  );", "modifier": "private static final", "type": "Injector", "declarator": "INJECTOR = Initialization.makeInjectorWithModules(\n      GuiceInjectors.makeStartupInjector(),\n      ImmutableList.<Module>of(\n          new Module()\n          {\n            @Override\n            public void configure(Binder binder)\n            {\n              binder.bind(Key.get(String.class, Names.named(\"serviceName\"))).toInstance(\"some service\");\n              binder.bind(Key.get(Integer.class, Names.named(\"servicePort\"))).toInstance(0);\n              binder.bind(Key.get(Integer.class, Names.named(\"tlsServicePort\"))).toInstance(-1);\n            }\n          }\n      )\n  )", "var_name": "INJECTOR"}, {"original_string": "private static final JsonConfigurator CONFIGURATOR = INJECTOR.getBinding(JsonConfigurator.class).getProvider().get();", "modifier": "private static final", "type": "JsonConfigurator", "declarator": "CONFIGURATOR = INJECTOR.getBinding(JsonConfigurator.class).getProvider().get()", "var_name": "CONFIGURATOR"}], "file": "indexing-service/src/test/java/org/apache/druid/indexing/overlord/config/ForkingTaskRunnerConfigTest.java"}, "test_case": {"identifier": "testSimpleStringJavaOpts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSimpleStringJavaOpts()\n  {\n    final String javaOpts = \"some string\";\n    Assert.assertEquals(\n        javaOpts,\n        buildFromProperties(ForkingTaskRunnerConfig.JAVA_OPTS_PROPERTY, javaOpts).getJavaOpts()\n    );\n  }", "signature": "void testSimpleStringJavaOpts()", "full_signature": "@Test public void testSimpleStringJavaOpts()", "class_method_signature": "ForkingTaskRunnerConfigTest.testSimpleStringJavaOpts()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getJavaOpts", "buildFromProperties"]}, "focal_class": {"identifier": "ForkingTaskRunnerConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String JAVA_OPTS_PROPERTY = IndexingServiceModuleHelper.INDEXER_RUNNER_PROPERTY_PREFIX\n                                                  + \".javaOpts\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_OPTS_PROPERTY = IndexingServiceModuleHelper.INDEXER_RUNNER_PROPERTY_PREFIX\n                                                  + \".javaOpts\"", "var_name": "JAVA_OPTS_PROPERTY"}, {"original_string": "public static final String JAVA_OPTS_ARRAY_PROPERTY = IndexingServiceModuleHelper.INDEXER_RUNNER_PROPERTY_PREFIX\n                                                  + \".javaOptsArray\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_OPTS_ARRAY_PROPERTY = IndexingServiceModuleHelper.INDEXER_RUNNER_PROPERTY_PREFIX\n                                                  + \".javaOptsArray\"", "var_name": "JAVA_OPTS_ARRAY_PROPERTY"}, {"original_string": "@JsonProperty\n  @NotNull\n  private String javaCommand = \"java\";", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "String", "declarator": "javaCommand = \"java\"", "var_name": "javaCommand"}, {"original_string": "@JsonProperty\n  @NotNull\n  private String javaOpts = \"\";", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "String", "declarator": "javaOpts = \"\"", "var_name": "javaOpts"}, {"original_string": "@JsonProperty\n  @NotNull\n  private List<String> javaOptsArray = ImmutableList.of();", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "List<String>", "declarator": "javaOptsArray = ImmutableList.of()", "var_name": "javaOptsArray"}, {"original_string": "@JsonProperty\n  @NotNull\n  private String classpath = System.getProperty(\"java.class.path\");", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "String", "declarator": "classpath = System.getProperty(\"java.class.path\")", "var_name": "classpath"}, {"original_string": "@JsonProperty\n  @Min(1024)\n  @Max(65535)\n  private int startPort = 8100;", "modifier": "@JsonProperty\n  @Min(1024)\n  @Max(65535)\n  private", "type": "int", "declarator": "startPort = 8100", "var_name": "startPort"}, {"original_string": "@JsonProperty\n  @Min(1024)\n  @Max(65535)\n  private int endPort = 65535;", "modifier": "@JsonProperty\n  @Min(1024)\n  @Max(65535)\n  private", "type": "int", "declarator": "endPort = 65535", "var_name": "endPort"}, {"original_string": "@JsonProperty\n  @NotNull\n  private List<Integer> ports = ImmutableList.of();", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "List<Integer>", "declarator": "ports = ImmutableList.of()", "var_name": "ports"}, {"original_string": "@JsonProperty\n  @NotNull\n  List<String> allowedPrefixes = Lists.newArrayList(\n      \"com.metamx\",\n      \"druid\",\n      \"org.apache.druid\",\n      \"user.timezone\",\n      \"file.encoding\",\n      \"java.io.tmpdir\",\n      \"hadoop\"\n  );", "modifier": "@JsonProperty\n  @NotNull", "type": "List<String>", "declarator": "allowedPrefixes = Lists.newArrayList(\n      \"com.metamx\",\n      \"druid\",\n      \"org.apache.druid\",\n      \"user.timezone\",\n      \"file.encoding\",\n      \"java.io.tmpdir\",\n      \"hadoop\"\n  )", "var_name": "allowedPrefixes"}], "methods": [{"identifier": "getJavaCommand", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getJavaCommand()", "full_signature": "public String getJavaCommand()", "class_method_signature": "ForkingTaskRunnerConfig.getJavaCommand()", "testcase": false, "constructor": false}, {"identifier": "getJavaOpts", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getJavaOpts()", "full_signature": "public String getJavaOpts()", "class_method_signature": "ForkingTaskRunnerConfig.getJavaOpts()", "testcase": false, "constructor": false}, {"identifier": "getJavaOptsArray", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getJavaOptsArray()", "full_signature": "public List<String> getJavaOptsArray()", "class_method_signature": "ForkingTaskRunnerConfig.getJavaOptsArray()", "testcase": false, "constructor": false}, {"identifier": "getClasspath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClasspath()", "full_signature": "public String getClasspath()", "class_method_signature": "ForkingTaskRunnerConfig.getClasspath()", "testcase": false, "constructor": false}, {"identifier": "getStartPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStartPort()", "full_signature": "public int getStartPort()", "class_method_signature": "ForkingTaskRunnerConfig.getStartPort()", "testcase": false, "constructor": false}, {"identifier": "getEndPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEndPort()", "full_signature": "public int getEndPort()", "class_method_signature": "ForkingTaskRunnerConfig.getEndPort()", "testcase": false, "constructor": false}, {"identifier": "getPorts", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getPorts()", "full_signature": "public List<Integer> getPorts()", "class_method_signature": "ForkingTaskRunnerConfig.getPorts()", "testcase": false, "constructor": false}, {"identifier": "getAllowedPrefixes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllowedPrefixes()", "full_signature": "public List<String> getAllowedPrefixes()", "class_method_signature": "ForkingTaskRunnerConfig.getAllowedPrefixes()", "testcase": false, "constructor": false}], "file": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/config/ForkingTaskRunnerConfig.java"}, "focal_method": {"identifier": "getJavaOpts", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getJavaOpts()\n  {\n    return javaOpts;\n  }", "signature": "String getJavaOpts()", "full_signature": "public String getJavaOpts()", "class_method_signature": "ForkingTaskRunnerConfig.getJavaOpts()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}