{"test_class": {"identifier": "NumbersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "core/src/test/java/org/apache/druid/java/util/common/NumbersTest.java"}, "test_case": {"identifier": "testParseIntWithNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParseIntWithNull()\n  {\n    expectedException.expect(NullPointerException.class);\n    expectedException.expectMessage(\"Input is null\");\n    Numbers.parseInt(null);\n  }", "signature": "void testParseIntWithNull()", "full_signature": "@Test public void testParseIntWithNull()", "class_method_signature": "NumbersTest.testParseIntWithNull()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "parseInt"]}, "focal_class": {"identifier": "Numbers", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseLong", "parameters": "(Object val)", "modifiers": "public static", "return": "long", "signature": "long parseLong(Object val)", "full_signature": "public static long parseLong(Object val)", "class_method_signature": "Numbers.parseLong(Object val)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(Object val)", "modifiers": "public static", "return": "int", "signature": "int parseInt(Object val)", "full_signature": "public static int parseInt(Object val)", "class_method_signature": "Numbers.parseInt(Object val)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(Object val)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseBoolean(Object val)", "full_signature": "public static boolean parseBoolean(Object val)", "class_method_signature": "Numbers.parseBoolean(Object val)", "testcase": false, "constructor": false}, {"identifier": "tryParseDouble", "parameters": "(@Nullable Object val, double nullValue)", "modifiers": "public static", "return": "double", "signature": "double tryParseDouble(@Nullable Object val, double nullValue)", "full_signature": "public static double tryParseDouble(@Nullable Object val, double nullValue)", "class_method_signature": "Numbers.tryParseDouble(@Nullable Object val, double nullValue)", "testcase": false, "constructor": false}, {"identifier": "tryParseLong", "parameters": "(@Nullable Object val, long nullValue)", "modifiers": "public static", "return": "long", "signature": "long tryParseLong(@Nullable Object val, long nullValue)", "full_signature": "public static long tryParseLong(@Nullable Object val, long nullValue)", "class_method_signature": "Numbers.tryParseLong(@Nullable Object val, long nullValue)", "testcase": false, "constructor": false}, {"identifier": "tryParseFloat", "parameters": "(@Nullable Object val, float nullValue)", "modifiers": "public static", "return": "float", "signature": "float tryParseFloat(@Nullable Object val, float nullValue)", "full_signature": "public static float tryParseFloat(@Nullable Object val, float nullValue)", "class_method_signature": "Numbers.tryParseFloat(@Nullable Object val, float nullValue)", "testcase": false, "constructor": false}, {"identifier": "parseDoubleObject", "parameters": "(@Nullable String val)", "modifiers": "@Nullable public static", "return": "Double", "signature": "Double parseDoubleObject(@Nullable String val)", "full_signature": "@Nullable public static Double parseDoubleObject(@Nullable String val)", "class_method_signature": "Numbers.parseDoubleObject(@Nullable String val)", "testcase": false, "constructor": false}, {"identifier": "parseLongObject", "parameters": "(@Nullable String val)", "modifiers": "@Nullable public static", "return": "Long", "signature": "Long parseLongObject(@Nullable String val)", "full_signature": "@Nullable public static Long parseLongObject(@Nullable String val)", "class_method_signature": "Numbers.parseLongObject(@Nullable String val)", "testcase": false, "constructor": false}, {"identifier": "toIntExact", "parameters": "(long value, String error)", "modifiers": "public static", "return": "int", "signature": "int toIntExact(long value, String error)", "full_signature": "public static int toIntExact(long value, String error)", "class_method_signature": "Numbers.toIntExact(long value, String error)", "testcase": false, "constructor": false}, {"identifier": "Numbers", "parameters": "()", "modifiers": "private", "return": "", "signature": " Numbers()", "full_signature": "private  Numbers()", "class_method_signature": "Numbers.Numbers()", "testcase": false, "constructor": true}], "file": "core/src/main/java/org/apache/druid/java/util/common/Numbers.java"}, "focal_method": {"identifier": "parseInt", "parameters": "(Object val)", "modifiers": "public static", "return": "int", "body": "public static int parseInt(Object val)\n  {\n    if (val instanceof String) {\n      return Integer.parseInt((String) val);\n    } else if (val instanceof Number) {\n      return ((Number) val).intValue();\n    } else {\n      if (val == null) {\n        throw new NullPointerException(\"Input is null\");\n      } else {\n        throw new ISE(\"Unknown type [%s]\", val.getClass());\n      }\n    }\n  }", "signature": "int parseInt(Object val)", "full_signature": "public static int parseInt(Object val)", "class_method_signature": "Numbers.parseInt(Object val)", "testcase": false, "constructor": false, "invocations": ["parseInt", "intValue", "getClass"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}