{"test_class": {"identifier": "CacheUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TimeseriesQuery timeseriesQuery =\n      Druids.newTimeseriesQueryBuilder()\n            .dataSource(\"foo\")\n            .intervals(\"2000/3000\")\n            .granularity(Granularities.ALL)\n            .build();", "modifier": "private final", "type": "TimeseriesQuery", "declarator": "timeseriesQuery =\n      Druids.newTimeseriesQueryBuilder()\n            .dataSource(\"foo\")\n            .intervals(\"2000/3000\")\n            .granularity(Granularities.ALL)\n            .build()", "var_name": "timeseriesQuery"}], "file": "server/src/test/java/org/apache/druid/client/CacheUtilTest.java"}, "test_case": {"identifier": "test_isQueryCacheable_unCacheableOnDataServer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_isQueryCacheable_unCacheableOnDataServer()\n  {\n    Assert.assertFalse(\n        CacheUtil.isQueryCacheable(\n            timeseriesQuery,\n            new DummyCacheStrategy<>(true, false),\n            makeCacheConfig(ImmutableMap.of()),\n            CacheUtil.ServerType.DATA\n        )\n    );\n  }", "signature": "void test_isQueryCacheable_unCacheableOnDataServer()", "full_signature": "@Test public void test_isQueryCacheable_unCacheableOnDataServer()", "class_method_signature": "CacheUtilTest.test_isQueryCacheable_unCacheableOnDataServer()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isQueryCacheable", "makeCacheConfig", "of"]}, "focal_class": {"identifier": "CacheUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "computeResultLevelCacheKey", "parameters": "(String resultLevelCacheIdentifier)", "modifiers": "public static", "return": "Cache.NamedKey", "signature": "Cache.NamedKey computeResultLevelCacheKey(String resultLevelCacheIdentifier)", "full_signature": "public static Cache.NamedKey computeResultLevelCacheKey(String resultLevelCacheIdentifier)", "class_method_signature": "CacheUtil.computeResultLevelCacheKey(String resultLevelCacheIdentifier)", "testcase": false, "constructor": false}, {"identifier": "populateResultCache", "parameters": "(\n      Cache cache,\n      Cache.NamedKey key,\n      byte[] resultBytes\n  )", "modifiers": "public static", "return": "void", "signature": "void populateResultCache(\n      Cache cache,\n      Cache.NamedKey key,\n      byte[] resultBytes\n  )", "full_signature": "public static void populateResultCache(\n      Cache cache,\n      Cache.NamedKey key,\n      byte[] resultBytes\n  )", "class_method_signature": "CacheUtil.populateResultCache(\n      Cache cache,\n      Cache.NamedKey key,\n      byte[] resultBytes\n  )", "testcase": false, "constructor": false}, {"identifier": "computeSegmentCacheKey", "parameters": "(\n      String segmentId,\n      SegmentDescriptor descriptor,\n      byte[] queryCacheKey\n  )", "modifiers": "public static", "return": "Cache.NamedKey", "signature": "Cache.NamedKey computeSegmentCacheKey(\n      String segmentId,\n      SegmentDescriptor descriptor,\n      byte[] queryCacheKey\n  )", "full_signature": "public static Cache.NamedKey computeSegmentCacheKey(\n      String segmentId,\n      SegmentDescriptor descriptor,\n      byte[] queryCacheKey\n  )", "class_method_signature": "CacheUtil.computeSegmentCacheKey(\n      String segmentId,\n      SegmentDescriptor descriptor,\n      byte[] queryCacheKey\n  )", "testcase": false, "constructor": false}, {"identifier": "isUseSegmentCache", "parameters": "(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "modifiers": "public static", "return": "boolean", "signature": "boolean isUseSegmentCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "full_signature": "public static boolean isUseSegmentCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "class_method_signature": "CacheUtil.isUseSegmentCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "testcase": false, "constructor": false}, {"identifier": "isPopulateSegmentCache", "parameters": "(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "modifiers": "public static", "return": "boolean", "signature": "boolean isPopulateSegmentCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "full_signature": "public static boolean isPopulateSegmentCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "class_method_signature": "CacheUtil.isPopulateSegmentCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "testcase": false, "constructor": false}, {"identifier": "isUseResultCache", "parameters": "(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "modifiers": "public static", "return": "boolean", "signature": "boolean isUseResultCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "full_signature": "public static boolean isUseResultCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "class_method_signature": "CacheUtil.isUseResultCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "testcase": false, "constructor": false}, {"identifier": "isPopulateResultCache", "parameters": "(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "modifiers": "public static", "return": "boolean", "signature": "boolean isPopulateResultCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "full_signature": "public static boolean isPopulateResultCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "class_method_signature": "CacheUtil.isPopulateResultCache(\n      Query<T> query,\n      @Nullable CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      CacheConfig cacheConfig,\n      ServerType serverType\n  )", "testcase": false, "constructor": false}, {"identifier": "isQueryCacheable", "parameters": "(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "modifiers": "static", "return": "boolean", "signature": "boolean isQueryCacheable(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "full_signature": "static boolean isQueryCacheable(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "class_method_signature": "CacheUtil.isQueryCacheable(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/client/CacheUtil.java"}, "focal_method": {"identifier": "isQueryCacheable", "parameters": "(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "modifiers": "static", "return": "boolean", "body": "static <T> boolean isQueryCacheable(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )\n  {\n    return cacheStrategy != null\n           && cacheStrategy.isCacheable(query, serverType.willMergeRunners())\n           && cacheConfig.isQueryCacheable(query)\n           && query.getDataSource().isCacheable();\n  }", "signature": "boolean isQueryCacheable(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "full_signature": "static boolean isQueryCacheable(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "class_method_signature": "CacheUtil.isQueryCacheable(\n      final Query<T> query,\n      @Nullable final CacheStrategy<T, Object, Query<T>> cacheStrategy,\n      final CacheConfig cacheConfig,\n      final ServerType serverType\n  )", "testcase": false, "constructor": false, "invocations": ["isCacheable", "willMergeRunners", "isQueryCacheable", "isCacheable", "getDataSource"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}