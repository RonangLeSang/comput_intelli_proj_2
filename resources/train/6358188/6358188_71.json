{"test_class": {"identifier": "IndexTaskSamplerSpecTest", "superclass": "extends EasyMockSupport", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = TestHelper.makeJsonMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = TestHelper.makeJsonMapper()", "var_name": "MAPPER"}, {"original_string": "private final InputSourceSampler inputSourceSampler = createMock(InputSourceSampler.class);", "modifier": "private final", "type": "InputSourceSampler", "declarator": "inputSourceSampler = createMock(InputSourceSampler.class)", "var_name": "inputSourceSampler"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "indexing-service/src/test/java/org/apache/druid/indexing/overlord/sampler/IndexTaskSamplerSpecTest.java"}, "test_case": {"identifier": "testSerde", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSerde() throws IOException\n  {\n    String json = \"{\\n\"\n                  + \"  \\\"type\\\": \\\"index\\\",\\n\"\n                  + \"  \\\"samplerConfig\\\": {\\n\"\n                  + \"    \\\"numRows\\\": 123,\\n\"\n                  + \"    \\\"timeoutMs\\\": 2345\\n\"\n                  + \"  },\\n\"\n                  + \"  \\\"spec\\\": {\\n\"\n                  + \"    \\\"dataSchema\\\": {\\n\"\n                  + \"      \\\"dataSource\\\": \\\"sampler\\\",\\n\"\n                  + \"      \\\"dimensionsSpec\\\": {},\\n\"\n                  + \"      \\\"timestampSpec\\\": {\\n\"\n                  + \"        \\\"missingValue\\\": \\\"1970\\\"\\n\"\n                  + \"      }\\n\"\n                  + \"    },\\n\"\n                  + \"    \\\"ioConfig\\\": {\\n\"\n                  + \"      \\\"type\\\": \\\"index\\\",\\n\"\n                  + \"      \\\"inputSource\\\": {\\n\"\n                  + \"        \\\"type\\\": \\\"local\\\",\\n\"\n                  + \"        \\\"baseDir\\\": \\\"/tmp\\\",\\n\"\n                  + \"        \\\"filter\\\": \\\"wikiticker-2015-09-12-sampled.json\\\"\\n\"\n                  + \"      },\\n\"\n                  + \"      \\\"inputFormat\\\": {\\n\"\n                  + \"        \\\"type\\\": \\\"json\\\"\\n\"\n                  + \"      }\\n\"\n                  + \"    }\\n\"\n                  + \"  }\\n\"\n                  + \"}\";\n\n    Capture<InputSource> capturedInputSource = EasyMock.newCapture();\n    Capture<InputFormat> capturedInputFormat = EasyMock.newCapture();\n    Capture<DataSchema> capturedDataSchema = EasyMock.newCapture();\n    Capture<SamplerConfig> capturedSamplerConfig = EasyMock.newCapture();\n\n    IndexTaskSamplerSpec spec = MAPPER.readValue(json, IndexTaskSamplerSpec.class);\n\n    EasyMock.expect(inputSourceSampler.sample(\n        EasyMock.capture(capturedInputSource),\n        EasyMock.capture(capturedInputFormat),\n        EasyMock.capture(capturedDataSchema),\n        EasyMock.capture(capturedSamplerConfig)\n    )).andReturn(new SamplerResponse(0, 0, null));\n\n    replayAll();\n\n    spec.sample();\n    verifyAll();\n\n    InputSource inputSource = capturedInputSource.getValue();\n    Assert.assertEquals(new File(\"/tmp\"), ((LocalInputSource) inputSource).getBaseDir());\n    Assert.assertEquals(\"wikiticker-2015-09-12-sampled.json\", ((LocalInputSource) inputSource).getFilter());\n\n    DataSchema dataSchema = capturedDataSchema.getValue();\n    Assert.assertEquals(\"sampler\", dataSchema.getDataSource());\n    Assert.assertEquals(JsonInputFormat.class, capturedInputFormat.getValue().getClass());\n\n    SamplerConfig samplerConfig = capturedSamplerConfig.getValue();\n    Assert.assertEquals(123, samplerConfig.getNumRows());\n    Assert.assertEquals(2345, samplerConfig.getTimeoutMs());\n  }", "signature": "void testSerde()", "full_signature": "@Test public void testSerde()", "class_method_signature": "IndexTaskSamplerSpecTest.testSerde()", "testcase": true, "constructor": false, "invocations": ["newCapture", "newCapture", "newCapture", "newCapture", "readValue", "andReturn", "expect", "sample", "capture", "capture", "capture", "capture", "replayAll", "sample", "verifyAll", "getValue", "assertEquals", "getBaseDir", "assertEquals", "getFilter", "getValue", "assertEquals", "getDataSource", "assertEquals", "getClass", "getValue", "getValue", "assertEquals", "getNumRows", "assertEquals", "getTimeoutMs"]}, "focal_class": {"identifier": "IndexTaskSamplerSpec", "superclass": "", "interfaces": "implements SamplerSpec", "fields": [{"original_string": "@Nullable\n  private final DataSchema dataSchema;", "modifier": "@Nullable\n  private final", "type": "DataSchema", "declarator": "dataSchema", "var_name": "dataSchema"}, {"original_string": "private final InputSource inputSource;", "modifier": "private final", "type": "InputSource", "declarator": "inputSource", "var_name": "inputSource"}, {"original_string": "@Nullable\n  private final InputFormat inputFormat;", "modifier": "@Nullable\n  private final", "type": "InputFormat", "declarator": "inputFormat", "var_name": "inputFormat"}, {"original_string": "@Nullable\n  private final SamplerConfig samplerConfig;", "modifier": "@Nullable\n  private final", "type": "SamplerConfig", "declarator": "samplerConfig", "var_name": "samplerConfig"}, {"original_string": "private final InputSourceSampler inputSourceSampler;", "modifier": "private final", "type": "InputSourceSampler", "declarator": "inputSourceSampler", "var_name": "inputSourceSampler"}], "methods": [{"identifier": "IndexTaskSamplerSpec", "parameters": "(\n      @JsonProperty(\"spec\") final IndexTask.IndexIngestionSpec ingestionSpec,\n      @JsonProperty(\"samplerConfig\") @Nullable final SamplerConfig samplerConfig,\n      @JacksonInject InputSourceSampler inputSourceSampler\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " IndexTaskSamplerSpec(\n      @JsonProperty(\"spec\") final IndexTask.IndexIngestionSpec ingestionSpec,\n      @JsonProperty(\"samplerConfig\") @Nullable final SamplerConfig samplerConfig,\n      @JacksonInject InputSourceSampler inputSourceSampler\n  )", "full_signature": "@JsonCreator public  IndexTaskSamplerSpec(\n      @JsonProperty(\"spec\") final IndexTask.IndexIngestionSpec ingestionSpec,\n      @JsonProperty(\"samplerConfig\") @Nullable final SamplerConfig samplerConfig,\n      @JacksonInject InputSourceSampler inputSourceSampler\n  )", "class_method_signature": "IndexTaskSamplerSpec.IndexTaskSamplerSpec(\n      @JsonProperty(\"spec\") final IndexTask.IndexIngestionSpec ingestionSpec,\n      @JsonProperty(\"samplerConfig\") @Nullable final SamplerConfig samplerConfig,\n      @JacksonInject InputSourceSampler inputSourceSampler\n  )", "testcase": false, "constructor": true}, {"identifier": "sample", "parameters": "()", "modifiers": "@Override public", "return": "SamplerResponse", "signature": "SamplerResponse sample()", "full_signature": "@Override public SamplerResponse sample()", "class_method_signature": "IndexTaskSamplerSpec.sample()", "testcase": false, "constructor": false}], "file": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/IndexTaskSamplerSpec.java"}, "focal_method": {"identifier": "sample", "parameters": "()", "modifiers": "@Override public", "return": "SamplerResponse", "body": "@Override\n  public SamplerResponse sample()\n  {\n    return inputSourceSampler.sample(inputSource, inputFormat, dataSchema, samplerConfig);\n  }", "signature": "SamplerResponse sample()", "full_signature": "@Override public SamplerResponse sample()", "class_method_signature": "IndexTaskSamplerSpec.sample()", "testcase": false, "constructor": false, "invocations": ["sample"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}