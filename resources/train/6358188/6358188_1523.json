{"test_class": {"identifier": "AzureTaskLogsTest", "superclass": "extends EasyMockSupport", "interfaces": "", "fields": [{"original_string": "private static final String CONTAINER = \"test\";", "modifier": "private static final", "type": "String", "declarator": "CONTAINER = \"test\"", "var_name": "CONTAINER"}, {"original_string": "private static final String PREFIX = \"test/log\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"test/log\"", "var_name": "PREFIX"}, {"original_string": "private static final String TASK_ID = \"taskid\";", "modifier": "private static final", "type": "String", "declarator": "TASK_ID = \"taskid\"", "var_name": "TASK_ID"}, {"original_string": "private static final String TASK_ID_NOT_FOUND = \"taskidNotFound\";", "modifier": "private static final", "type": "String", "declarator": "TASK_ID_NOT_FOUND = \"taskidNotFound\"", "var_name": "TASK_ID_NOT_FOUND"}, {"original_string": "private static final int MAX_TRIES = 3;", "modifier": "private static final", "type": "int", "declarator": "MAX_TRIES = 3", "var_name": "MAX_TRIES"}, {"original_string": "private static final AzureTaskLogsConfig AZURE_TASK_LOGS_CONFIG = new AzureTaskLogsConfig(CONTAINER, PREFIX, MAX_TRIES);", "modifier": "private static final", "type": "AzureTaskLogsConfig", "declarator": "AZURE_TASK_LOGS_CONFIG = new AzureTaskLogsConfig(CONTAINER, PREFIX, MAX_TRIES)", "var_name": "AZURE_TASK_LOGS_CONFIG"}, {"original_string": "private static final int MAX_KEYS = 1;", "modifier": "private static final", "type": "int", "declarator": "MAX_KEYS = 1", "var_name": "MAX_KEYS"}, {"original_string": "private static final long TIME_0 = 0L;", "modifier": "private static final", "type": "long", "declarator": "TIME_0 = 0L", "var_name": "TIME_0"}, {"original_string": "private static final long TIME_1 = 1L;", "modifier": "private static final", "type": "long", "declarator": "TIME_1 = 1L", "var_name": "TIME_1"}, {"original_string": "private static final long TIME_NOW = 2L;", "modifier": "private static final", "type": "long", "declarator": "TIME_NOW = 2L", "var_name": "TIME_NOW"}, {"original_string": "private static final long TIME_FUTURE = 3L;", "modifier": "private static final", "type": "long", "declarator": "TIME_FUTURE = 3L", "var_name": "TIME_FUTURE"}, {"original_string": "private static final String KEY_1 = \"key1\";", "modifier": "private static final", "type": "String", "declarator": "KEY_1 = \"key1\"", "var_name": "KEY_1"}, {"original_string": "private static final String KEY_2 = \"key2\";", "modifier": "private static final", "type": "String", "declarator": "KEY_2 = \"key2\"", "var_name": "KEY_2"}, {"original_string": "private static final URI PREFIX_URI = URI.create(StringUtils.format(\"azure://%s/%s\", CONTAINER, PREFIX));", "modifier": "private static final", "type": "URI", "declarator": "PREFIX_URI = URI.create(StringUtils.format(\"azure://%s/%s\", CONTAINER, PREFIX))", "var_name": "PREFIX_URI"}, {"original_string": "private static final Exception RECOVERABLE_EXCEPTION = new StorageException(\"\", \"\", null);", "modifier": "private static final", "type": "Exception", "declarator": "RECOVERABLE_EXCEPTION = new StorageException(\"\", \"\", null)", "var_name": "RECOVERABLE_EXCEPTION"}, {"original_string": "private static final Exception NON_RECOVERABLE_EXCEPTION = new URISyntaxException(\"\", \"\");", "modifier": "private static final", "type": "Exception", "declarator": "NON_RECOVERABLE_EXCEPTION = new URISyntaxException(\"\", \"\")", "var_name": "NON_RECOVERABLE_EXCEPTION"}, {"original_string": "private AzureInputDataConfig inputDataConfig;", "modifier": "private", "type": "AzureInputDataConfig", "declarator": "inputDataConfig", "var_name": "inputDataConfig"}, {"original_string": "private AzureAccountConfig accountConfig;", "modifier": "private", "type": "AzureAccountConfig", "declarator": "accountConfig", "var_name": "accountConfig"}, {"original_string": "private AzureStorage azureStorage;", "modifier": "private", "type": "AzureStorage", "declarator": "azureStorage", "var_name": "azureStorage"}, {"original_string": "private AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;", "modifier": "private", "type": "AzureCloudBlobIterableFactory", "declarator": "azureCloudBlobIterableFactory", "var_name": "azureCloudBlobIterableFactory"}, {"original_string": "private CurrentTimeMillisSupplier timeSupplier;", "modifier": "private", "type": "CurrentTimeMillisSupplier", "declarator": "timeSupplier", "var_name": "timeSupplier"}, {"original_string": "private AzureTaskLogs azureTaskLogs;", "modifier": "private", "type": "AzureTaskLogs", "declarator": "azureTaskLogs", "var_name": "azureTaskLogs"}], "file": "extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureTaskLogsTest.java"}, "test_case": {"identifier": "testStreamTaskLogWithoutOffset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStreamTaskLogWithoutOffset() throws Exception\n  {\n    final String testLog = \"hello this is a log\";\n\n    final String blobPath = PREFIX + \"/\" + TASK_ID + \"/log\";\n    EasyMock.expect(azureStorage.getBlobExists(CONTAINER, blobPath)).andReturn(true);\n    EasyMock.expect(azureStorage.getBlobLength(CONTAINER, blobPath)).andReturn((long) testLog.length());\n    EasyMock.expect(azureStorage.getBlobInputStream(CONTAINER, blobPath)).andReturn(\n        new ByteArrayInputStream(testLog.getBytes(StandardCharsets.UTF_8)));\n\n\n    replayAll();\n\n    final Optional<ByteSource> byteSource = azureTaskLogs.streamTaskLog(TASK_ID, 0);\n\n    final StringWriter writer = new StringWriter();\n    IOUtils.copy(byteSource.get().openStream(), writer, \"UTF-8\");\n    Assert.assertEquals(writer.toString(), testLog);\n\n    verifyAll();\n  }", "signature": "void testStreamTaskLogWithoutOffset()", "full_signature": "@Test public void testStreamTaskLogWithoutOffset()", "class_method_signature": "AzureTaskLogsTest.testStreamTaskLogWithoutOffset()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getBlobExists", "andReturn", "expect", "getBlobLength", "length", "andReturn", "expect", "getBlobInputStream", "getBytes", "replayAll", "streamTaskLog", "copy", "openStream", "get", "assertEquals", "toString", "verifyAll"]}, "focal_class": {"identifier": "AzureTaskLogs", "superclass": "", "interfaces": "implements TaskLogs", "fields": [{"original_string": "private static final Logger log = new Logger(AzureTaskLogs.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(AzureTaskLogs.class)", "var_name": "log"}, {"original_string": "private final AzureTaskLogsConfig config;", "modifier": "private final", "type": "AzureTaskLogsConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final AzureInputDataConfig inputDataConfig;", "modifier": "private final", "type": "AzureInputDataConfig", "declarator": "inputDataConfig", "var_name": "inputDataConfig"}, {"original_string": "private final AzureAccountConfig accountConfig;", "modifier": "private final", "type": "AzureAccountConfig", "declarator": "accountConfig", "var_name": "accountConfig"}, {"original_string": "private final AzureStorage azureStorage;", "modifier": "private final", "type": "AzureStorage", "declarator": "azureStorage", "var_name": "azureStorage"}, {"original_string": "private final AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;", "modifier": "private final", "type": "AzureCloudBlobIterableFactory", "declarator": "azureCloudBlobIterableFactory", "var_name": "azureCloudBlobIterableFactory"}, {"original_string": "private final CurrentTimeMillisSupplier timeSupplier;", "modifier": "private final", "type": "CurrentTimeMillisSupplier", "declarator": "timeSupplier", "var_name": "timeSupplier"}], "methods": [{"identifier": "AzureTaskLogs", "parameters": "(\n      AzureTaskLogsConfig config,\n      AzureInputDataConfig inputDataConfig,\n      AzureAccountConfig accountConfig,\n      AzureStorage azureStorage,\n      AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n      CurrentTimeMillisSupplier timeSupplier)", "modifiers": "@Inject public", "return": "", "signature": " AzureTaskLogs(\n      AzureTaskLogsConfig config,\n      AzureInputDataConfig inputDataConfig,\n      AzureAccountConfig accountConfig,\n      AzureStorage azureStorage,\n      AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n      CurrentTimeMillisSupplier timeSupplier)", "full_signature": "@Inject public  AzureTaskLogs(\n      AzureTaskLogsConfig config,\n      AzureInputDataConfig inputDataConfig,\n      AzureAccountConfig accountConfig,\n      AzureStorage azureStorage,\n      AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n      CurrentTimeMillisSupplier timeSupplier)", "class_method_signature": "AzureTaskLogs.AzureTaskLogs(\n      AzureTaskLogsConfig config,\n      AzureInputDataConfig inputDataConfig,\n      AzureAccountConfig accountConfig,\n      AzureStorage azureStorage,\n      AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n      CurrentTimeMillisSupplier timeSupplier)", "testcase": false, "constructor": true}, {"identifier": "pushTaskLog", "parameters": "(final String taskid, final File logFile)", "modifiers": "@Override public", "return": "void", "signature": "void pushTaskLog(final String taskid, final File logFile)", "full_signature": "@Override public void pushTaskLog(final String taskid, final File logFile)", "class_method_signature": "AzureTaskLogs.pushTaskLog(final String taskid, final File logFile)", "testcase": false, "constructor": false}, {"identifier": "pushTaskReports", "parameters": "(String taskid, File reportFile)", "modifiers": "@Override public", "return": "void", "signature": "void pushTaskReports(String taskid, File reportFile)", "full_signature": "@Override public void pushTaskReports(String taskid, File reportFile)", "class_method_signature": "AzureTaskLogs.pushTaskReports(String taskid, File reportFile)", "testcase": false, "constructor": false}, {"identifier": "pushTaskFile", "parameters": "(final File logFile, String taskKey)", "modifiers": "private", "return": "void", "signature": "void pushTaskFile(final File logFile, String taskKey)", "full_signature": "private void pushTaskFile(final File logFile, String taskKey)", "class_method_signature": "AzureTaskLogs.pushTaskFile(final File logFile, String taskKey)", "testcase": false, "constructor": false}, {"identifier": "streamTaskLog", "parameters": "(final String taskid, final long offset)", "modifiers": "@Override public", "return": "Optional<ByteSource>", "signature": "Optional<ByteSource> streamTaskLog(final String taskid, final long offset)", "full_signature": "@Override public Optional<ByteSource> streamTaskLog(final String taskid, final long offset)", "class_method_signature": "AzureTaskLogs.streamTaskLog(final String taskid, final long offset)", "testcase": false, "constructor": false}, {"identifier": "streamTaskReports", "parameters": "(String taskid)", "modifiers": "@Override public", "return": "Optional<ByteSource>", "signature": "Optional<ByteSource> streamTaskReports(String taskid)", "full_signature": "@Override public Optional<ByteSource> streamTaskReports(String taskid)", "class_method_signature": "AzureTaskLogs.streamTaskReports(String taskid)", "testcase": false, "constructor": false}, {"identifier": "streamTaskFile", "parameters": "(final String taskid, final long offset, String taskKey)", "modifiers": "private", "return": "Optional<ByteSource>", "signature": "Optional<ByteSource> streamTaskFile(final String taskid, final long offset, String taskKey)", "full_signature": "private Optional<ByteSource> streamTaskFile(final String taskid, final long offset, String taskKey)", "class_method_signature": "AzureTaskLogs.streamTaskFile(final String taskid, final long offset, String taskKey)", "testcase": false, "constructor": false}, {"identifier": "getTaskLogKey", "parameters": "(String taskid)", "modifiers": "private", "return": "String", "signature": "String getTaskLogKey(String taskid)", "full_signature": "private String getTaskLogKey(String taskid)", "class_method_signature": "AzureTaskLogs.getTaskLogKey(String taskid)", "testcase": false, "constructor": false}, {"identifier": "getTaskReportsKey", "parameters": "(String taskid)", "modifiers": "private", "return": "String", "signature": "String getTaskReportsKey(String taskid)", "full_signature": "private String getTaskReportsKey(String taskid)", "class_method_signature": "AzureTaskLogs.getTaskReportsKey(String taskid)", "testcase": false, "constructor": false}, {"identifier": "killAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void killAll()", "full_signature": "@Override public void killAll()", "class_method_signature": "AzureTaskLogs.killAll()", "testcase": false, "constructor": false}, {"identifier": "killOlderThan", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "void", "signature": "void killOlderThan(long timestamp)", "full_signature": "@Override public void killOlderThan(long timestamp)", "class_method_signature": "AzureTaskLogs.killOlderThan(long timestamp)", "testcase": false, "constructor": false}], "file": "extensions-core/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureTaskLogs.java"}, "focal_method": {"identifier": "streamTaskLog", "parameters": "(final String taskid, final long offset)", "modifiers": "@Override public", "return": "Optional<ByteSource>", "body": "@Override\n  public Optional<ByteSource> streamTaskLog(final String taskid, final long offset) throws IOException\n  {\n    return streamTaskFile(taskid, offset, getTaskLogKey(taskid));\n  }", "signature": "Optional<ByteSource> streamTaskLog(final String taskid, final long offset)", "full_signature": "@Override public Optional<ByteSource> streamTaskLog(final String taskid, final long offset)", "class_method_signature": "AzureTaskLogs.streamTaskLog(final String taskid, final long offset)", "testcase": false, "constructor": false, "invocations": ["streamTaskFile", "getTaskLogKey"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}