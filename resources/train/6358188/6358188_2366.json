{"test_class": {"identifier": "ChangeRequestHistoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/apache/druid/server/coordination/ChangeRequestHistoryTest.java"}, "test_case": {"identifier": "testCancel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCancel()\n  {\n    final ChangeRequestHistory<DataSegmentChangeRequest> history = new ChangeRequestHistory();\n\n    ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = history.getRequestsSince(\n        ChangeRequestHistory.Counter.ZERO\n    );\n    Assert.assertEquals(1, history.waitingFutures.size());\n\n    final AtomicBoolean callbackExcecuted = new AtomicBoolean(false);\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot result)\n          {\n            callbackExcecuted.set(true);\n          }\n\n          @Override\n          public void onFailure(Throwable t)\n          {\n            callbackExcecuted.set(true);\n          }\n        }\n    );\n\n    future.cancel(true);\n    Assert.assertEquals(0, history.waitingFutures.size());\n    Assert.assertFalse(callbackExcecuted.get());\n  }", "signature": "void testCancel()", "full_signature": "@Test public void testCancel()", "class_method_signature": "ChangeRequestHistoryTest.testCancel()", "testcase": true, "constructor": false, "invocations": ["getRequestsSince", "assertEquals", "size", "addCallback", "set", "set", "cancel", "assertEquals", "size", "assertFalse", "get"]}, "focal_class": {"identifier": "ChangeRequestHistory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int MAX_SIZE = 1000;", "modifier": "private static", "type": "int", "declarator": "MAX_SIZE = 1000", "var_name": "MAX_SIZE"}, {"original_string": "private final int maxSize;", "modifier": "private final", "type": "int", "declarator": "maxSize", "var_name": "maxSize"}, {"original_string": "private final CircularBuffer<Holder<T>> changes;", "modifier": "private final", "type": "CircularBuffer<Holder<T>>", "declarator": "changes", "var_name": "changes"}, {"original_string": "@VisibleForTesting\n  final LinkedHashMap<CustomSettableFuture<T>, Counter> waitingFutures;", "modifier": "@VisibleForTesting\n  final", "type": "LinkedHashMap<CustomSettableFuture<T>, Counter>", "declarator": "waitingFutures", "var_name": "waitingFutures"}, {"original_string": "private final ExecutorService singleThreadedExecutor;", "modifier": "private final", "type": "ExecutorService", "declarator": "singleThreadedExecutor", "var_name": "singleThreadedExecutor"}, {"original_string": "private final Runnable resolveWaitingFuturesRunnable;", "modifier": "private final", "type": "Runnable", "declarator": "resolveWaitingFuturesRunnable", "var_name": "resolveWaitingFuturesRunnable"}], "methods": [{"identifier": "ChangeRequestHistory", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChangeRequestHistory()", "full_signature": "public  ChangeRequestHistory()", "class_method_signature": "ChangeRequestHistory.ChangeRequestHistory()", "testcase": false, "constructor": true}, {"identifier": "ChangeRequestHistory", "parameters": "(int maxSize)", "modifiers": "public", "return": "", "signature": " ChangeRequestHistory(int maxSize)", "full_signature": "public  ChangeRequestHistory(int maxSize)", "class_method_signature": "ChangeRequestHistory.ChangeRequestHistory(int maxSize)", "testcase": false, "constructor": true}, {"identifier": "addChangeRequests", "parameters": "(List<T> requests)", "modifiers": "public synchronized", "return": "void", "signature": "void addChangeRequests(List<T> requests)", "full_signature": "public synchronized void addChangeRequests(List<T> requests)", "class_method_signature": "ChangeRequestHistory.addChangeRequests(List<T> requests)", "testcase": false, "constructor": false}, {"identifier": "addChangeRequest", "parameters": "(T request)", "modifiers": "public synchronized", "return": "void", "signature": "void addChangeRequest(T request)", "full_signature": "public synchronized void addChangeRequest(T request)", "class_method_signature": "ChangeRequestHistory.addChangeRequest(T request)", "testcase": false, "constructor": false}, {"identifier": "getRequestsSince", "parameters": "(final Counter counter)", "modifiers": "public synchronized", "return": "ListenableFuture<ChangeRequestsSnapshot<T>>", "signature": "ListenableFuture<ChangeRequestsSnapshot<T>> getRequestsSince(final Counter counter)", "full_signature": "public synchronized ListenableFuture<ChangeRequestsSnapshot<T>> getRequestsSince(final Counter counter)", "class_method_signature": "ChangeRequestHistory.getRequestsSince(final Counter counter)", "testcase": false, "constructor": false}, {"identifier": "getRequestsSinceWithoutWait", "parameters": "(final Counter counter)", "modifiers": "private synchronized", "return": "ChangeRequestsSnapshot<T>", "signature": "ChangeRequestsSnapshot<T> getRequestsSinceWithoutWait(final Counter counter)", "full_signature": "private synchronized ChangeRequestsSnapshot<T> getRequestsSinceWithoutWait(final Counter counter)", "class_method_signature": "ChangeRequestHistory.getRequestsSinceWithoutWait(final Counter counter)", "testcase": false, "constructor": false}, {"identifier": "resolveWaitingFutures", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resolveWaitingFutures()", "full_signature": "private void resolveWaitingFutures()", "class_method_signature": "ChangeRequestHistory.resolveWaitingFutures()", "testcase": false, "constructor": false}, {"identifier": "getLastCounter", "parameters": "()", "modifiers": "public synchronized", "return": "Counter", "signature": "Counter getLastCounter()", "full_signature": "public synchronized Counter getLastCounter()", "class_method_signature": "ChangeRequestHistory.getLastCounter()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/coordination/ChangeRequestHistory.java"}, "focal_method": {"identifier": "getRequestsSince", "parameters": "(final Counter counter)", "modifiers": "public synchronized", "return": "ListenableFuture<ChangeRequestsSnapshot<T>>", "body": "public synchronized ListenableFuture<ChangeRequestsSnapshot<T>> getRequestsSince(final Counter counter)\n  {\n    final CustomSettableFuture<T> future = new CustomSettableFuture<>(waitingFutures);\n\n    if (counter.counter < 0) {\n      future.setException(new IAE(\"counter[%s] must be >= 0\", counter));\n      return future;\n    }\n\n    Counter lastCounter = getLastCounter();\n\n    if (counter.counter == lastCounter.counter) {\n      if (!counter.matches(lastCounter)) {\n        ChangeRequestsSnapshot<T> reset = ChangeRequestsSnapshot.fail(\n            StringUtils.format(\"counter[%s] failed to match with [%s]\", counter, lastCounter)\n        );\n        future.set(reset);\n      } else {\n        synchronized (waitingFutures) {\n          waitingFutures.put(future, counter);\n        }\n      }\n    } else {\n      try {\n        future.set(getRequestsSinceWithoutWait(counter));\n      }\n      catch (Exception ex) {\n        future.setException(ex);\n      }\n    }\n\n    return future;\n  }", "signature": "ListenableFuture<ChangeRequestsSnapshot<T>> getRequestsSince(final Counter counter)", "full_signature": "public synchronized ListenableFuture<ChangeRequestsSnapshot<T>> getRequestsSince(final Counter counter)", "class_method_signature": "ChangeRequestHistory.getRequestsSince(final Counter counter)", "testcase": false, "constructor": false, "invocations": ["setException", "getLastCounter", "matches", "fail", "format", "set", "put", "set", "getRequestsSinceWithoutWait", "setException"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}