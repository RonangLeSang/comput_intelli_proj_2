{"test_class": {"identifier": "JoinablesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JoinFilterRewriteConfig DEFAULT_JOIN_FILTER_REWRITE_CONFIG = new JoinFilterRewriteConfig(\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_PUSH_DOWN,\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE,\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_VALUE_COLUMN_FILTERS,\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n  );", "modifier": "private static final", "type": "JoinFilterRewriteConfig", "declarator": "DEFAULT_JOIN_FILTER_REWRITE_CONFIG = new JoinFilterRewriteConfig(\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_PUSH_DOWN,\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE,\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_VALUE_COLUMN_FILTERS,\n      QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n  )", "var_name": "DEFAULT_JOIN_FILTER_REWRITE_CONFIG"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "processing/src/test/java/org/apache/druid/segment/join/JoinablesTest.java"}, "test_case": {"identifier": "test_createSegmentMapFn_noClauses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_createSegmentMapFn_noClauses()\n  {\n    final Function<SegmentReference, SegmentReference> segmentMapFn = Joinables.createSegmentMapFn(\n        ImmutableList.of(),\n        NoopJoinableFactory.INSTANCE,\n        new AtomicLong(),\n        null\n    );\n\n    Assert.assertSame(Function.identity(), segmentMapFn);\n  }", "signature": "void test_createSegmentMapFn_noClauses()", "full_signature": "@Test public void test_createSegmentMapFn_noClauses()", "class_method_signature": "JoinablesTest.test_createSegmentMapFn_noClauses()", "testcase": true, "constructor": false, "invocations": ["createSegmentMapFn", "of", "assertSame", "identity"]}, "focal_class": {"identifier": "Joinables", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Comparator<String> DESCENDING_LENGTH_STRING_COMPARATOR = (s1, s2) ->\n      Integer.compare(s2.length(), s1.length());", "modifier": "private static final", "type": "Comparator<String>", "declarator": "DESCENDING_LENGTH_STRING_COMPARATOR = (s1, s2) ->\n      Integer.compare(s2.length(), s1.length())", "var_name": "DESCENDING_LENGTH_STRING_COMPARATOR"}], "methods": [{"identifier": "validatePrefix", "parameters": "(@Nullable final String prefix)", "modifiers": "public static", "return": "String", "signature": "String validatePrefix(@Nullable final String prefix)", "full_signature": "public static String validatePrefix(@Nullable final String prefix)", "class_method_signature": "Joinables.validatePrefix(@Nullable final String prefix)", "testcase": false, "constructor": false}, {"identifier": "isPrefixedBy", "parameters": "(final String columnName, final String prefix)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrefixedBy(final String columnName, final String prefix)", "full_signature": "public static boolean isPrefixedBy(final String columnName, final String prefix)", "class_method_signature": "Joinables.isPrefixedBy(final String columnName, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "createSegmentMapFn", "parameters": "(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "modifiers": "public static", "return": "Function<SegmentReference, SegmentReference>", "signature": "Function<SegmentReference, SegmentReference> createSegmentMapFn(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "full_signature": "public static Function<SegmentReference, SegmentReference> createSegmentMapFn(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "class_method_signature": "Joinables.createSegmentMapFn(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "testcase": false, "constructor": false}, {"identifier": "checkPrefixesForDuplicatesAndShadowing", "parameters": "(\n      final List<String> prefixes\n  )", "modifiers": "public static", "return": "void", "signature": "void checkPrefixesForDuplicatesAndShadowing(\n      final List<String> prefixes\n  )", "full_signature": "public static void checkPrefixesForDuplicatesAndShadowing(\n      final List<String> prefixes\n  )", "class_method_signature": "Joinables.checkPrefixesForDuplicatesAndShadowing(\n      final List<String> prefixes\n  )", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java"}, "focal_method": {"identifier": "createSegmentMapFn", "parameters": "(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "modifiers": "public static", "return": "Function<SegmentReference, SegmentReference>", "body": "public static Function<SegmentReference, SegmentReference> createSegmentMapFn(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )\n  {\n    // compute column correlations here and RHS correlated values\n    return JvmUtils.safeAccumulateThreadCpuTime(\n        cpuTimeAccumulator,\n        () -> {\n          if (clauses.isEmpty()) {\n            return Function.identity();\n          } else {\n            final JoinableClauses joinableClauses = JoinableClauses.createClauses(clauses, joinableFactory);\n            final JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n                new JoinFilterPreAnalysisKey(\n                    JoinFilterRewriteConfig.forQuery(query),\n                    joinableClauses.getJoinableClauses(),\n                    query.getVirtualColumns(),\n                    Filters.toFilter(query.getFilter())\n                )\n            );\n\n            return baseSegment ->\n                new HashJoinSegment(\n                    baseSegment,\n                    joinableClauses.getJoinableClauses(),\n                    joinFilterPreAnalysis\n                );\n          }\n        }\n    );\n  }", "signature": "Function<SegmentReference, SegmentReference> createSegmentMapFn(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "full_signature": "public static Function<SegmentReference, SegmentReference> createSegmentMapFn(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "class_method_signature": "Joinables.createSegmentMapFn(\n      final List<PreJoinableClause> clauses,\n      final JoinableFactory joinableFactory,\n      final AtomicLong cpuTimeAccumulator,\n      final Query<?> query\n  )", "testcase": false, "constructor": false, "invocations": ["safeAccumulateThreadCpuTime", "isEmpty", "identity", "createClauses", "computeJoinFilterPreAnalysis", "forQuery", "getJoinableClauses", "getVirtualColumns", "toFilter", "getFilter", "getJoinableClauses"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}