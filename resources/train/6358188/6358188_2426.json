{"test_class": {"identifier": "IntervalsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InventoryView inventoryView;", "modifier": "private", "type": "InventoryView", "declarator": "inventoryView", "var_name": "inventoryView"}, {"original_string": "private DruidServer server;", "modifier": "private", "type": "DruidServer", "declarator": "server", "var_name": "server"}, {"original_string": "private List<DataSegment> dataSegmentList;", "modifier": "private", "type": "List<DataSegment>", "declarator": "dataSegmentList", "var_name": "dataSegmentList"}, {"original_string": "private HttpServletRequest request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}], "file": "server/src/test/java/org/apache/druid/server/http/IntervalsResourceTest.java"}, "test_case": {"identifier": "testGetIntervals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetIntervals()\n  {\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).once();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).once();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).once();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().times(1);\n    EasyMock.replay(inventoryView, request);\n\n    List<Interval> expectedIntervals = new ArrayList<>();\n    expectedIntervals.add(Intervals.of(\"2010-01-01T00:00:00.000Z/2010-01-02T00:00:00.000Z\"));\n    expectedIntervals.add(Intervals.of(\"2010-01-22T00:00:00.000Z/2010-01-23T00:00:00.000Z\"));\n    IntervalsResource intervalsResource = new IntervalsResource(\n        inventoryView,\n        new AuthConfig(),\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n\n    Response response = intervalsResource.getIntervals(request);\n    TreeMap<Interval, Map<String, Map<String, Object>>> actualIntervals = (TreeMap) response.getEntity();\n    Assert.assertEquals(2, actualIntervals.size());\n    Assert.assertEquals(expectedIntervals.get(1), actualIntervals.firstKey());\n    Assert.assertEquals(10L, actualIntervals.get(expectedIntervals.get(1)).get(\"datasource1\").get(\"size\"));\n    Assert.assertEquals(1, actualIntervals.get(expectedIntervals.get(1)).get(\"datasource1\").get(\"count\"));\n    Assert.assertEquals(expectedIntervals.get(0), actualIntervals.lastKey());\n    Assert.assertEquals(20L, actualIntervals.get(expectedIntervals.get(0)).get(\"datasource1\").get(\"size\"));\n    Assert.assertEquals(1, actualIntervals.get(expectedIntervals.get(0)).get(\"datasource1\").get(\"count\"));\n    Assert.assertEquals(5L, actualIntervals.get(expectedIntervals.get(0)).get(\"datasource2\").get(\"size\"));\n    Assert.assertEquals(1, actualIntervals.get(expectedIntervals.get(0)).get(\"datasource2\").get(\"count\"));\n\n  }", "signature": "void testGetIntervals()", "full_signature": "@Test public void testGetIntervals()", "class_method_signature": "IntervalsResourceTest.testGetIntervals()", "testcase": true, "constructor": false, "invocations": ["atLeastOnce", "andReturn", "expect", "getInventory", "of", "once", "andReturn", "expect", "getAttribute", "once", "andReturn", "expect", "getAttribute", "once", "andReturn", "expect", "getAttribute", "setAttribute", "times", "expectLastCall", "replay", "add", "of", "add", "of", "getIntervals", "getEntity", "assertEquals", "size", "assertEquals", "get", "firstKey", "assertEquals", "get", "get", "get", "get", "assertEquals", "get", "get", "get", "get", "assertEquals", "get", "lastKey", "assertEquals", "get", "get", "get", "get", "assertEquals", "get", "get", "get", "get", "assertEquals", "get", "get", "get", "get", "assertEquals", "get", "get", "get", "get"]}, "focal_class": {"identifier": "IntervalsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final InventoryView serverInventoryView;", "modifier": "private final", "type": "InventoryView", "declarator": "serverInventoryView", "var_name": "serverInventoryView"}, {"original_string": "private final AuthConfig authConfig;", "modifier": "private final", "type": "AuthConfig", "declarator": "authConfig", "var_name": "authConfig"}, {"original_string": "private final AuthorizerMapper authorizerMapper;", "modifier": "private final", "type": "AuthorizerMapper", "declarator": "authorizerMapper", "var_name": "authorizerMapper"}], "methods": [{"identifier": "IntervalsResource", "parameters": "(\n      InventoryView serverInventoryView,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "modifiers": "@Inject public", "return": "", "signature": " IntervalsResource(\n      InventoryView serverInventoryView,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "full_signature": "@Inject public  IntervalsResource(\n      InventoryView serverInventoryView,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "class_method_signature": "IntervalsResource.IntervalsResource(\n      InventoryView serverInventoryView,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "testcase": false, "constructor": true}, {"identifier": "getIntervals", "parameters": "(@Context final HttpServletRequest req)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response getIntervals(@Context final HttpServletRequest req)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) public Response getIntervals(@Context final HttpServletRequest req)", "class_method_signature": "IntervalsResource.getIntervals(@Context final HttpServletRequest req)", "testcase": false, "constructor": false}, {"identifier": "getSpecificIntervals", "parameters": "(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )", "modifiers": "@GET @Path(\"/{interval}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )", "full_signature": "@GET @Path(\"/{interval}\") @Produces(MediaType.APPLICATION_JSON) public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )", "class_method_signature": "IntervalsResource.getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(\n      final Map<Interval, Map<String, Map<String, Object>>> retVal,\n      ImmutableDruidDataSource dataSource, DataSegment dataSegment\n  )", "modifiers": "private", "return": "void", "signature": "void setProperties(\n      final Map<Interval, Map<String, Map<String, Object>>> retVal,\n      ImmutableDruidDataSource dataSource, DataSegment dataSegment\n  )", "full_signature": "private void setProperties(\n      final Map<Interval, Map<String, Map<String, Object>>> retVal,\n      ImmutableDruidDataSource dataSource, DataSegment dataSegment\n  )", "class_method_signature": "IntervalsResource.setProperties(\n      final Map<Interval, Map<String, Map<String, Object>>> retVal,\n      ImmutableDruidDataSource dataSource, DataSegment dataSegment\n  )", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/http/IntervalsResource.java"}, "focal_method": {"identifier": "getIntervals", "parameters": "(@Context final HttpServletRequest req)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "body": "@GET\n  @Produces(MediaType.APPLICATION_JSON)\n  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.intervalsByStartThenEnd().reversed();\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        retVal.computeIfAbsent(dataSegment.getInterval(), i -> new HashMap<>());\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }", "signature": "Response getIntervals(@Context final HttpServletRequest req)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) public Response getIntervals(@Context final HttpServletRequest req)", "class_method_signature": "IntervalsResource.getIntervals(@Context final HttpServletRequest req)", "testcase": false, "constructor": false, "invocations": ["reversed", "intervalsByStartThenEnd", "getSecuredDataSources", "getSegments", "computeIfAbsent", "getInterval", "setProperties", "build", "ok"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}