{"test_class": {"identifier": "ArithmeticPostAggregatorTest", "superclass": "extends InitializedNullHandlingTest", "interfaces": "", "fields": [], "file": "processing/src/test/java/org/apache/druid/query/aggregation/post/ArithmeticPostAggregatorTest.java"}, "test_case": {"identifier": "testQuotient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testQuotient()\n  {\n    ArithmeticPostAggregator agg = new ArithmeticPostAggregator(\n        null,\n        \"quotient\",\n        ImmutableList.of(\n            new FieldAccessPostAggregator(\"numerator\", \"value\"),\n            new ConstantPostAggregator(\"zero\", 0)\n        ),\n        \"numericFirst\"\n    );\n\n\n    Assert.assertEquals(Double.NaN, agg.compute(ImmutableMap.of(\"value\", 0)));\n    Assert.assertEquals(Double.NaN, agg.compute(ImmutableMap.of(\"value\", Double.NaN)));\n    Assert.assertEquals(Double.POSITIVE_INFINITY, agg.compute(ImmutableMap.of(\"value\", 1)));\n    Assert.assertEquals(Double.NEGATIVE_INFINITY, agg.compute(ImmutableMap.of(\"value\", -1)));\n  }", "signature": "void testQuotient()", "full_signature": "@Test public void testQuotient()", "class_method_signature": "ArithmeticPostAggregatorTest.testQuotient()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "compute", "of", "assertEquals", "compute", "of", "assertEquals", "compute", "of", "assertEquals", "compute", "of"]}, "focal_class": {"identifier": "ArithmeticPostAggregator", "superclass": "", "interfaces": "implements PostAggregator", "fields": [{"original_string": "public static final Comparator DEFAULT_COMPARATOR = DoubleSumAggregator.COMPARATOR;", "modifier": "public static final", "type": "Comparator", "declarator": "DEFAULT_COMPARATOR = DoubleSumAggregator.COMPARATOR", "var_name": "DEFAULT_COMPARATOR"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final String fnName;", "modifier": "private final", "type": "String", "declarator": "fnName", "var_name": "fnName"}, {"original_string": "private final List<PostAggregator> fields;", "modifier": "private final", "type": "List<PostAggregator>", "declarator": "fields", "var_name": "fields"}, {"original_string": "private final Ops op;", "modifier": "private final", "type": "Ops", "declarator": "op", "var_name": "op"}, {"original_string": "private final Comparator comparator;", "modifier": "private final", "type": "Comparator", "declarator": "comparator", "var_name": "comparator"}, {"original_string": "private final String ordering;", "modifier": "private final", "type": "String", "declarator": "ordering", "var_name": "ordering"}], "methods": [{"identifier": "ArithmeticPostAggregator", "parameters": "(\n      String name,\n      String fnName,\n      List<PostAggregator> fields\n  )", "modifiers": "public", "return": "", "signature": " ArithmeticPostAggregator(\n      String name,\n      String fnName,\n      List<PostAggregator> fields\n  )", "full_signature": "public  ArithmeticPostAggregator(\n      String name,\n      String fnName,\n      List<PostAggregator> fields\n  )", "class_method_signature": "ArithmeticPostAggregator.ArithmeticPostAggregator(\n      String name,\n      String fnName,\n      List<PostAggregator> fields\n  )", "testcase": false, "constructor": true}, {"identifier": "ArithmeticPostAggregator", "parameters": "(\n      @JsonProperty(\"name\") String name,\n      @JsonProperty(\"fn\") String fnName,\n      @JsonProperty(\"fields\") List<PostAggregator> fields,\n      @JsonProperty(\"ordering\") @Nullable String ordering\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " ArithmeticPostAggregator(\n      @JsonProperty(\"name\") String name,\n      @JsonProperty(\"fn\") String fnName,\n      @JsonProperty(\"fields\") List<PostAggregator> fields,\n      @JsonProperty(\"ordering\") @Nullable String ordering\n  )", "full_signature": "@JsonCreator public  ArithmeticPostAggregator(\n      @JsonProperty(\"name\") String name,\n      @JsonProperty(\"fn\") String fnName,\n      @JsonProperty(\"fields\") List<PostAggregator> fields,\n      @JsonProperty(\"ordering\") @Nullable String ordering\n  )", "class_method_signature": "ArithmeticPostAggregator.ArithmeticPostAggregator(\n      @JsonProperty(\"name\") String name,\n      @JsonProperty(\"fn\") String fnName,\n      @JsonProperty(\"fields\") List<PostAggregator> fields,\n      @JsonProperty(\"ordering\") @Nullable String ordering\n  )", "testcase": false, "constructor": true}, {"identifier": "getDependentFields", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getDependentFields()", "full_signature": "@Override public Set<String> getDependentFields()", "class_method_signature": "ArithmeticPostAggregator.getDependentFields()", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator", "signature": "Comparator getComparator()", "full_signature": "@Override public Comparator getComparator()", "class_method_signature": "ArithmeticPostAggregator.getComparator()", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(Map<String, Object> values)", "modifiers": "@Override public", "return": "Object", "signature": "Object compute(Map<String, Object> values)", "full_signature": "@Override public Object compute(Map<String, Object> values)", "class_method_signature": "ArithmeticPostAggregator.compute(Map<String, Object> values)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override @JsonProperty public", "return": "String", "signature": "String getName()", "full_signature": "@Override @JsonProperty public String getName()", "class_method_signature": "ArithmeticPostAggregator.getName()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "ValueType", "signature": "ValueType getType()", "full_signature": "@Override public ValueType getType()", "class_method_signature": "ArithmeticPostAggregator.getType()", "testcase": false, "constructor": false}, {"identifier": "decorate", "parameters": "(Map<String, AggregatorFactory> aggregators)", "modifiers": "@Override public", "return": "ArithmeticPostAggregator", "signature": "ArithmeticPostAggregator decorate(Map<String, AggregatorFactory> aggregators)", "full_signature": "@Override public ArithmeticPostAggregator decorate(Map<String, AggregatorFactory> aggregators)", "class_method_signature": "ArithmeticPostAggregator.decorate(Map<String, AggregatorFactory> aggregators)", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCacheKey()", "full_signature": "@Override public byte[] getCacheKey()", "class_method_signature": "ArithmeticPostAggregator.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "getFnName", "parameters": "()", "modifiers": "@JsonProperty(\"fn\") public", "return": "String", "signature": "String getFnName()", "full_signature": "@JsonProperty(\"fn\") public String getFnName()", "class_method_signature": "ArithmeticPostAggregator.getFnName()", "testcase": false, "constructor": false}, {"identifier": "getOrdering", "parameters": "()", "modifiers": "@JsonProperty(\"ordering\") public", "return": "String", "signature": "String getOrdering()", "full_signature": "@JsonProperty(\"ordering\") public String getOrdering()", "class_method_signature": "ArithmeticPostAggregator.getOrdering()", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "@JsonProperty public", "return": "List<PostAggregator>", "signature": "List<PostAggregator> getFields()", "full_signature": "@JsonProperty public List<PostAggregator> getFields()", "class_method_signature": "ArithmeticPostAggregator.getFields()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ArithmeticPostAggregator.toString()", "testcase": false, "constructor": false}, {"identifier": "preserveFieldOrderInCacheKey", "parameters": "(Ops op)", "modifiers": "private static", "return": "boolean", "signature": "boolean preserveFieldOrderInCacheKey(Ops op)", "full_signature": "private static boolean preserveFieldOrderInCacheKey(Ops op)", "class_method_signature": "ArithmeticPostAggregator.preserveFieldOrderInCacheKey(Ops op)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ArithmeticPostAggregator.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ArithmeticPostAggregator.hashCode()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/aggregation/post/ArithmeticPostAggregator.java"}, "focal_method": {"identifier": "compute", "parameters": "(Map<String, Object> values)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object compute(Map<String, Object> values)\n  {\n    Iterator<PostAggregator> fieldsIter = fields.iterator();\n    Double retVal = NullHandling.defaultDoubleValue();\n    if (fieldsIter.hasNext()) {\n      Number nextVal = (Number) fieldsIter.next().compute(values);\n      if (nextVal == null) {\n        // As per SQL standard if any of the value is null, arithmetic operators will return null.\n        return null;\n      }\n      retVal = nextVal.doubleValue();\n      while (fieldsIter.hasNext()) {\n        nextVal = (Number) fieldsIter.next().compute(values);\n        if (nextVal == null) {\n          // As per SQL standard if any of the value is null, arithmetic operators will return null.\n          return null;\n        }\n        retVal = op.compute(retVal, (nextVal).doubleValue());\n      }\n    }\n    return retVal;\n  }", "signature": "Object compute(Map<String, Object> values)", "full_signature": "@Override public Object compute(Map<String, Object> values)", "class_method_signature": "ArithmeticPostAggregator.compute(Map<String, Object> values)", "testcase": false, "constructor": false, "invocations": ["iterator", "defaultDoubleValue", "hasNext", "compute", "next", "doubleValue", "hasNext", "compute", "next", "compute", "doubleValue"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}