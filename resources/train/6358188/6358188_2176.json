{"test_class": {"identifier": "LookupIntrospectionResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static LookupExtractorFactory mockLookupExtractorFactory = EasyMock.createMock(LookupExtractorFactory.class);", "modifier": "private static", "type": "LookupExtractorFactory", "declarator": "mockLookupExtractorFactory = EasyMock.createMock(LookupExtractorFactory.class)", "var_name": "mockLookupExtractorFactory"}, {"original_string": "private static LookupExtractorFactoryContainerProvider mockLookupExtractorFactoryContainerProvider =\n      EasyMock.createMock(LookupExtractorFactoryContainerProvider.class);", "modifier": "private static", "type": "LookupExtractorFactoryContainerProvider", "declarator": "mockLookupExtractorFactoryContainerProvider =\n      EasyMock.createMock(LookupExtractorFactoryContainerProvider.class)", "var_name": "mockLookupExtractorFactoryContainerProvider"}, {"original_string": "private static LookupIntrospectHandler mockLookupIntrospectHandler =\n      EasyMock.createMock(LookupIntrospectHandler.class);", "modifier": "private static", "type": "LookupIntrospectHandler", "declarator": "mockLookupIntrospectHandler =\n      EasyMock.createMock(LookupIntrospectHandler.class)", "var_name": "mockLookupIntrospectHandler"}, {"original_string": "private LookupIntrospectionResource lookupIntrospectionResource =\n      new LookupIntrospectionResource(mockLookupExtractorFactoryContainerProvider);", "modifier": "private", "type": "LookupIntrospectionResource", "declarator": "lookupIntrospectionResource =\n      new LookupIntrospectionResource(mockLookupExtractorFactoryContainerProvider)", "var_name": "lookupIntrospectionResource"}, {"original_string": "private URI baseUri;", "modifier": "private", "type": "URI", "declarator": "baseUri", "var_name": "baseUri"}, {"original_string": "private HttpServer server;", "modifier": "private", "type": "HttpServer", "declarator": "server", "var_name": "server"}], "file": "server/src/test/java/org/apache/druid/query/lookup/LookupIntrospectionResourceTest.java"}, "test_case": {"identifier": "testNotImplementedIntrospectLookup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNotImplementedIntrospectLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(null);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(\n        Response.status(Response.Status.NOT_FOUND).build().getStatus(),\n        ((Response) lookupIntrospectionResource.introspectLookup(\"lookupId\")).getStatus()\n    );\n  }", "signature": "void testNotImplementedIntrospectLookup()", "full_signature": "@Test public void testNotImplementedIntrospectLookup()", "class_method_signature": "LookupIntrospectionResourceTest.testNotImplementedIntrospectLookup()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getIntrospectHandler", "anyTimes", "andReturn", "expect", "get", "of", "replay", "assertEquals", "getStatus", "build", "status", "getStatus", "introspectLookup"]}, "focal_class": {"identifier": "LookupIntrospectionResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = new Logger(LookupIntrospectionResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = new Logger(LookupIntrospectionResource.class)", "var_name": "LOGGER"}, {"original_string": "private final LookupExtractorFactoryContainerProvider lookupExtractorFactoryContainerProvider;", "modifier": "private final", "type": "LookupExtractorFactoryContainerProvider", "declarator": "lookupExtractorFactoryContainerProvider", "var_name": "lookupExtractorFactoryContainerProvider"}], "methods": [{"identifier": "LookupIntrospectionResource", "parameters": "(\n      @Context LookupExtractorFactoryContainerProvider lookupExtractorFactoryContainerProvider\n  )", "modifiers": "@Inject public", "return": "", "signature": " LookupIntrospectionResource(\n      @Context LookupExtractorFactoryContainerProvider lookupExtractorFactoryContainerProvider\n  )", "full_signature": "@Inject public  LookupIntrospectionResource(\n      @Context LookupExtractorFactoryContainerProvider lookupExtractorFactoryContainerProvider\n  )", "class_method_signature": "LookupIntrospectionResource.LookupIntrospectionResource(\n      @Context LookupExtractorFactoryContainerProvider lookupExtractorFactoryContainerProvider\n  )", "testcase": false, "constructor": true}, {"identifier": "introspectLookup", "parameters": "(@PathParam(\"lookupId\") final String lookupId)", "modifiers": "@Path(\"/{lookupId}\") public", "return": "Object", "signature": "Object introspectLookup(@PathParam(\"lookupId\") final String lookupId)", "full_signature": "@Path(\"/{lookupId}\") public Object introspectLookup(@PathParam(\"lookupId\") final String lookupId)", "class_method_signature": "LookupIntrospectionResource.introspectLookup(@PathParam(\"lookupId\") final String lookupId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/query/lookup/LookupIntrospectionResource.java"}, "focal_method": {"identifier": "introspectLookup", "parameters": "(@PathParam(\"lookupId\") final String lookupId)", "modifiers": "@Path(\"/{lookupId}\") public", "return": "Object", "body": "@Path(\"/{lookupId}\")\n  public Object introspectLookup(@PathParam(\"lookupId\") final String lookupId)\n  {\n    final Optional<LookupExtractorFactoryContainer> maybeContainer =\n        lookupExtractorFactoryContainerProvider.get(lookupId);\n\n    if (!maybeContainer.isPresent()) {\n      LOGGER.error(\"trying to introspect non existing lookup [%s]\", lookupId);\n      return Response.status(Response.Status.NOT_FOUND).build();\n    }\n\n    final LookupExtractorFactoryContainer container = maybeContainer.get();\n    LookupIntrospectHandler introspectHandler = container.getLookupExtractorFactory().getIntrospectHandler();\n    if (introspectHandler != null) {\n      return introspectHandler;\n    } else {\n      LOGGER.warn(\n          \"Trying to introspect lookup [%s] of type [%s] but implementation doesn't provide resource\",\n          lookupId,\n          container.getLookupExtractorFactory().get().getClass()\n      );\n      return Response.status(Response.Status.NOT_FOUND).build();\n    }\n  }", "signature": "Object introspectLookup(@PathParam(\"lookupId\") final String lookupId)", "full_signature": "@Path(\"/{lookupId}\") public Object introspectLookup(@PathParam(\"lookupId\") final String lookupId)", "class_method_signature": "LookupIntrospectionResource.introspectLookup(@PathParam(\"lookupId\") final String lookupId)", "testcase": false, "constructor": false, "invocations": ["get", "isPresent", "error", "build", "status", "get", "getIntrospectHandler", "getLookupExtractorFactory", "warn", "getClass", "get", "getLookupExtractorFactory", "build", "status"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}