{"test_class": {"identifier": "NamespaceLookupExtractorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new DefaultObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new DefaultObjectMapper()", "var_name": "mapper"}, {"original_string": "@Rule\n  public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private final CacheScheduler scheduler = PowerMock.createStrictMock(CacheScheduler.class);", "modifier": "private final", "type": "CacheScheduler", "declarator": "scheduler = PowerMock.createStrictMock(CacheScheduler.class)", "var_name": "scheduler"}, {"original_string": "private final CacheScheduler.Entry entry = PowerMock.createStrictMock(CacheScheduler.Entry.class);", "modifier": "private final", "type": "CacheScheduler.Entry", "declarator": "entry = PowerMock.createStrictMock(CacheScheduler.Entry.class)", "var_name": "entry"}, {"original_string": "private final CacheScheduler.VersionedCache versionedCache =\n      PowerMock.createStrictMock(CacheScheduler.VersionedCache.class);", "modifier": "private final", "type": "CacheScheduler.VersionedCache", "declarator": "versionedCache =\n      PowerMock.createStrictMock(CacheScheduler.VersionedCache.class)", "var_name": "versionedCache"}], "file": "extensions-core/lookups-cached-global/src/test/java/org/apache/druid/query/lookup/NamespaceLookupExtractorFactoryTest.java"}, "test_case": {"identifier": "testStartReturnsImmediatelyAndFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStartReturnsImmediatelyAndFails() throws InterruptedException\n  {\n    final ExtractionNamespace extractionNamespace = new ExtractionNamespace()\n    {\n      @Override\n      public long getPollMs()\n      {\n        return 0;\n      }\n    };\n    EasyMock.expect(scheduler.scheduleAndWait(EasyMock.eq(extractionNamespace), EasyMock.eq(1L)))\n            .andReturn(null).once();\n    mockReplay();\n\n    final NamespaceLookupExtractorFactory namespaceLookupExtractorFactory = new NamespaceLookupExtractorFactory(\n        extractionNamespace,\n        1,\n        false,\n        scheduler\n    );\n    Assert.assertFalse(namespaceLookupExtractorFactory.start());\n    mockVerify();\n  }", "signature": "void testStartReturnsImmediatelyAndFails()", "full_signature": "@Test public void testStartReturnsImmediatelyAndFails()", "class_method_signature": "NamespaceLookupExtractorFactoryTest.testStartReturnsImmediatelyAndFails()", "testcase": true, "constructor": false, "invocations": ["once", "andReturn", "expect", "scheduleAndWait", "eq", "eq", "mockReplay", "assertFalse", "start", "mockVerify"]}, "focal_class": {"identifier": "NamespaceLookupExtractorFactory", "superclass": "", "interfaces": "implements LookupExtractorFactory", "fields": [{"original_string": "private static final Logger LOG = new Logger(NamespaceLookupExtractorFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = new Logger(NamespaceLookupExtractorFactory.class)", "var_name": "LOG"}, {"original_string": "private static final byte[] CLASS_CACHE_KEY;", "modifier": "private static final", "type": "byte[]", "declarator": "CLASS_CACHE_KEY", "var_name": "CLASS_CACHE_KEY"}, {"original_string": "CacheScheduler.Entry entry = null;", "modifier": "", "type": "CacheScheduler.Entry", "declarator": "entry = null", "var_name": "entry"}, {"original_string": "private final ReadWriteLock startStopSync = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "startStopSync = new ReentrantReadWriteLock()", "var_name": "startStopSync"}, {"original_string": "private final CacheScheduler cacheScheduler;", "modifier": "private final", "type": "CacheScheduler", "declarator": "cacheScheduler", "var_name": "cacheScheduler"}, {"original_string": "private final LookupIntrospectHandler lookupIntrospectHandler;", "modifier": "private final", "type": "LookupIntrospectHandler", "declarator": "lookupIntrospectHandler", "var_name": "lookupIntrospectHandler"}, {"original_string": "private final ExtractionNamespace extractionNamespace;", "modifier": "private final", "type": "ExtractionNamespace", "declarator": "extractionNamespace", "var_name": "extractionNamespace"}, {"original_string": "private final long firstCacheTimeout;", "modifier": "private final", "type": "long", "declarator": "firstCacheTimeout", "var_name": "firstCacheTimeout"}, {"original_string": "private final boolean injective;", "modifier": "private final", "type": "boolean", "declarator": "injective", "var_name": "injective"}, {"original_string": "private final String extractorID;", "modifier": "private final", "type": "String", "declarator": "extractorID", "var_name": "extractorID"}], "methods": [{"identifier": "NamespaceLookupExtractorFactory", "parameters": "(\n      @JsonProperty(\"extractionNamespace\") ExtractionNamespace extractionNamespace,\n      @JsonProperty(\"firstCacheTimeout\") long firstCacheTimeout,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject final CacheScheduler cacheScheduler\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " NamespaceLookupExtractorFactory(\n      @JsonProperty(\"extractionNamespace\") ExtractionNamespace extractionNamespace,\n      @JsonProperty(\"firstCacheTimeout\") long firstCacheTimeout,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject final CacheScheduler cacheScheduler\n  )", "full_signature": "@JsonCreator public  NamespaceLookupExtractorFactory(\n      @JsonProperty(\"extractionNamespace\") ExtractionNamespace extractionNamespace,\n      @JsonProperty(\"firstCacheTimeout\") long firstCacheTimeout,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject final CacheScheduler cacheScheduler\n  )", "class_method_signature": "NamespaceLookupExtractorFactory.NamespaceLookupExtractorFactory(\n      @JsonProperty(\"extractionNamespace\") ExtractionNamespace extractionNamespace,\n      @JsonProperty(\"firstCacheTimeout\") long firstCacheTimeout,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject final CacheScheduler cacheScheduler\n  )", "testcase": false, "constructor": true}, {"identifier": "NamespaceLookupExtractorFactory", "parameters": "(\n      ExtractionNamespace extractionNamespace,\n      CacheScheduler cacheScheduler\n  )", "modifiers": "@VisibleForTesting public", "return": "", "signature": " NamespaceLookupExtractorFactory(\n      ExtractionNamespace extractionNamespace,\n      CacheScheduler cacheScheduler\n  )", "full_signature": "@VisibleForTesting public  NamespaceLookupExtractorFactory(\n      ExtractionNamespace extractionNamespace,\n      CacheScheduler cacheScheduler\n  )", "class_method_signature": "NamespaceLookupExtractorFactory.NamespaceLookupExtractorFactory(\n      ExtractionNamespace extractionNamespace,\n      CacheScheduler cacheScheduler\n  )", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "NamespaceLookupExtractorFactory.start()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean close()", "full_signature": "@Override public boolean close()", "class_method_signature": "NamespaceLookupExtractorFactory.close()", "testcase": false, "constructor": false}, {"identifier": "replaces", "parameters": "(@Nullable LookupExtractorFactory other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean replaces(@Nullable LookupExtractorFactory other)", "full_signature": "@Override public boolean replaces(@Nullable LookupExtractorFactory other)", "class_method_signature": "NamespaceLookupExtractorFactory.replaces(@Nullable LookupExtractorFactory other)", "testcase": false, "constructor": false}, {"identifier": "getIntrospectHandler", "parameters": "()", "modifiers": "@Override public", "return": "LookupIntrospectHandler", "signature": "LookupIntrospectHandler getIntrospectHandler()", "full_signature": "@Override public LookupIntrospectHandler getIntrospectHandler()", "class_method_signature": "NamespaceLookupExtractorFactory.getIntrospectHandler()", "testcase": false, "constructor": false}, {"identifier": "getExtractionNamespace", "parameters": "()", "modifiers": "@JsonProperty public", "return": "ExtractionNamespace", "signature": "ExtractionNamespace getExtractionNamespace()", "full_signature": "@JsonProperty public ExtractionNamespace getExtractionNamespace()", "class_method_signature": "NamespaceLookupExtractorFactory.getExtractionNamespace()", "testcase": false, "constructor": false}, {"identifier": "getFirstCacheTimeout", "parameters": "()", "modifiers": "@JsonProperty public", "return": "long", "signature": "long getFirstCacheTimeout()", "full_signature": "@JsonProperty public long getFirstCacheTimeout()", "class_method_signature": "NamespaceLookupExtractorFactory.getFirstCacheTimeout()", "testcase": false, "constructor": false}, {"identifier": "isInjective", "parameters": "()", "modifiers": "@JsonProperty public", "return": "boolean", "signature": "boolean isInjective()", "full_signature": "@JsonProperty public boolean isInjective()", "class_method_signature": "NamespaceLookupExtractorFactory.isInjective()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "LookupExtractor", "signature": "LookupExtractor get()", "full_signature": "@Override public LookupExtractor get()", "class_method_signature": "NamespaceLookupExtractorFactory.get()", "testcase": false, "constructor": false}, {"identifier": "getCacheScheduler", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "CacheScheduler", "signature": "CacheScheduler getCacheScheduler()", "full_signature": "@VisibleForTesting CacheScheduler getCacheScheduler()", "class_method_signature": "NamespaceLookupExtractorFactory.getCacheScheduler()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NamespaceLookupExtractorFactory.toString()", "testcase": false, "constructor": false}], "file": "extensions-core/lookups-cached-global/src/main/java/org/apache/druid/query/lookup/NamespaceLookupExtractorFactory.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean start()\n  {\n    final Lock writeLock = startStopSync.writeLock();\n    try {\n      writeLock.lockInterruptibly();\n      try {\n        if (entry != null) {\n          LOG.warn(\"Already started! [%s]\", extractorID);\n          return true;\n        }\n        if (firstCacheTimeout > 0) {\n          entry = cacheScheduler.scheduleAndWait(extractionNamespace, firstCacheTimeout);\n          if (entry == null) {\n            LOG.error(\"Failed to schedule and wait for lookup [%s]\", extractorID);\n            return false;\n          }\n        } else {\n          entry = cacheScheduler.schedule(extractionNamespace);\n        }\n        LOG.debug(\"NamespaceLookupExtractorFactory[%s] started\", extractorID);\n        return true;\n      }\n      finally {\n        writeLock.unlock();\n      }\n    }\n    catch (InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n  }", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "NamespaceLookupExtractorFactory.start()", "testcase": false, "constructor": false, "invocations": ["writeLock", "lockInterruptibly", "warn", "scheduleAndWait", "error", "schedule", "debug", "unlock"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}