{"test_class": {"identifier": "PollingLookupTest", "superclass": "extends InitializedNullHandlingTest", "interfaces": "", "fields": [{"original_string": "private static final Map<String, String> FIRST_LOOKUP_MAP = ImmutableMap.of(\n      \"foo\", \"bar\",\n      \"bad\", \"bar\",\n      \"how about that\", \"foo\",\n      \"empty string\", \"\"\n  );", "modifier": "private static final", "type": "Map<String, String>", "declarator": "FIRST_LOOKUP_MAP = ImmutableMap.of(\n      \"foo\", \"bar\",\n      \"bad\", \"bar\",\n      \"how about that\", \"foo\",\n      \"empty string\", \"\"\n  )", "var_name": "FIRST_LOOKUP_MAP"}, {"original_string": "private static final Map<String, String> SECOND_LOOKUP_MAP = ImmutableMap.of(\n      \"new-foo\", \"new-bar\",\n      \"new-bad\", \"new-bar\"\n  );", "modifier": "private static final", "type": "Map<String, String>", "declarator": "SECOND_LOOKUP_MAP = ImmutableMap.of(\n      \"new-foo\", \"new-bar\",\n      \"new-bad\", \"new-bar\"\n  )", "var_name": "SECOND_LOOKUP_MAP"}, {"original_string": "private static final long POLL_PERIOD = 1000L;", "modifier": "private static final", "type": "long", "declarator": "POLL_PERIOD = 1000L", "var_name": "POLL_PERIOD"}, {"original_string": "private final PollingCacheFactory pollingCacheFactory;", "modifier": "private final", "type": "PollingCacheFactory", "declarator": "pollingCacheFactory", "var_name": "pollingCacheFactory"}, {"original_string": "private final DataFetcher dataFetcher = new MockDataFetcher();", "modifier": "private final", "type": "DataFetcher", "declarator": "dataFetcher = new MockDataFetcher()", "var_name": "dataFetcher"}, {"original_string": "private PollingLookup pollingLookup;", "modifier": "private", "type": "PollingLookup", "declarator": "pollingLookup", "var_name": "pollingLookup"}], "file": "extensions-core/lookups-cached-single/src/test/java/org/apache/druid/server/lookup/PollingLookupTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApply()\n  {\n    assertMapLookup(FIRST_LOOKUP_MAP, pollingLookup);\n  }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "PollingLookupTest.testApply()", "testcase": true, "constructor": false, "invocations": ["assertMapLookup"]}, "focal_class": {"identifier": "PollingLookup", "superclass": "extends LookupExtractor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = new Logger(PollingLookup.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = new Logger(PollingLookup.class)", "var_name": "LOGGER"}, {"original_string": "private final long pollPeriodMs;", "modifier": "private final", "type": "long", "declarator": "pollPeriodMs", "var_name": "pollPeriodMs"}, {"original_string": "private final DataFetcher dataFetcher;", "modifier": "private final", "type": "DataFetcher", "declarator": "dataFetcher", "var_name": "dataFetcher"}, {"original_string": "private final PollingCacheFactory cacheFactory;", "modifier": "private final", "type": "PollingCacheFactory", "declarator": "cacheFactory", "var_name": "cacheFactory"}, {"original_string": "private final AtomicReference<CacheRefKeeper> refOfCacheKeeper = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<CacheRefKeeper>", "declarator": "refOfCacheKeeper = new AtomicReference<>()", "var_name": "refOfCacheKeeper"}, {"original_string": "private final ListeningScheduledExecutorService scheduledExecutorService;", "modifier": "private final", "type": "ListeningScheduledExecutorService", "declarator": "scheduledExecutorService", "var_name": "scheduledExecutorService"}, {"original_string": "private final AtomicBoolean isOpen = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isOpen = new AtomicBoolean(false)", "var_name": "isOpen"}, {"original_string": "private final ListenableFuture<?> pollFuture;", "modifier": "private final", "type": "ListenableFuture<?>", "declarator": "pollFuture", "var_name": "pollFuture"}, {"original_string": "private final String id = Integer.toHexString(System.identityHashCode(this));", "modifier": "private final", "type": "String", "declarator": "id = Integer.toHexString(System.identityHashCode(this))", "var_name": "id"}], "methods": [{"identifier": "PollingLookup", "parameters": "(\n      long pollPeriodMs,\n      DataFetcher dataFetcher,\n      PollingCacheFactory cacheFactory\n  )", "modifiers": "public", "return": "", "signature": " PollingLookup(\n      long pollPeriodMs,\n      DataFetcher dataFetcher,\n      PollingCacheFactory cacheFactory\n  )", "full_signature": "public  PollingLookup(\n      long pollPeriodMs,\n      DataFetcher dataFetcher,\n      PollingCacheFactory cacheFactory\n  )", "class_method_signature": "PollingLookup.PollingLookup(\n      long pollPeriodMs,\n      DataFetcher dataFetcher,\n      PollingCacheFactory cacheFactory\n  )", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "PollingLookup.close()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(@Nullable String key)", "modifiers": "@Override @Nullable public", "return": "String", "signature": "String apply(@Nullable String key)", "full_signature": "@Override @Nullable public String apply(@Nullable String key)", "class_method_signature": "PollingLookup.apply(@Nullable String key)", "testcase": false, "constructor": false}, {"identifier": "unapply", "parameters": "(@Nullable final String value)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> unapply(@Nullable final String value)", "full_signature": "@Override public List<String> unapply(@Nullable final String value)", "class_method_signature": "PollingLookup.unapply(@Nullable final String value)", "testcase": false, "constructor": false}, {"identifier": "canIterate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canIterate()", "full_signature": "@Override public boolean canIterate()", "class_method_signature": "PollingLookup.canIterate()", "testcase": false, "constructor": false}, {"identifier": "iterable", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Map.Entry<String, String>>", "signature": "Iterable<Map.Entry<String, String>> iterable()", "full_signature": "@Override public Iterable<Map.Entry<String, String>> iterable()", "class_method_signature": "PollingLookup.iterable()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCacheKey()", "full_signature": "@Override public byte[] getCacheKey()", "class_method_signature": "PollingLookup.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "pollAndSwap", "parameters": "()", "modifiers": "private", "return": "Runnable", "signature": "Runnable pollAndSwap()", "full_signature": "private Runnable pollAndSwap()", "class_method_signature": "PollingLookup.pollAndSwap()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PollingLookup.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PollingLookup.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "public boolean isOpen()", "class_method_signature": "PollingLookup.isOpen()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PollingLookup.toString()", "testcase": false, "constructor": false}], "file": "extensions-core/lookups-cached-single/src/main/java/org/apache/druid/server/lookup/PollingLookup.java"}, "focal_method": {"identifier": "apply", "parameters": "(@Nullable String key)", "modifiers": "@Override @Nullable public", "return": "String", "body": "@Override\n  @Nullable\n  public String apply(@Nullable String key)\n  {\n    String keyEquivalent = NullHandling.nullToEmptyIfNeeded(key);\n    if (keyEquivalent == null) {\n      // valueEquivalent is null only for SQL Compatible Null Behavior\n      // otherwise null will be replaced with empty string in nullToEmptyIfNeeded above.\n      return null;\n    }\n    final CacheRefKeeper cacheRefKeeper = refOfCacheKeeper.get();\n    if (cacheRefKeeper == null) {\n      throw new ISE(\"Cache reference is null\");\n    }\n    final PollingCache cache = cacheRefKeeper.getAndIncrementRef();\n    try {\n      if (cache == null) {\n        // it must've been closed after swapping while I was getting it.  Try again.\n        return this.apply(keyEquivalent);\n      }\n      return NullHandling.emptyToNullIfNeeded((String) cache.get(keyEquivalent));\n    }\n    finally {\n      if (cacheRefKeeper != null && cache != null) {\n        cacheRefKeeper.doneWithIt();\n      }\n    }\n  }", "signature": "String apply(@Nullable String key)", "full_signature": "@Override @Nullable public String apply(@Nullable String key)", "class_method_signature": "PollingLookup.apply(@Nullable String key)", "testcase": false, "constructor": false, "invocations": ["nullToEmptyIfNeeded", "get", "getAndIncrementRef", "apply", "emptyToNullIfNeeded", "get", "doneWithIt"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}