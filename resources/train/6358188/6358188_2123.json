{"test_class": {"identifier": "IntegerPartitionChunkTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/druid/timeline/partition/IntegerPartitionChunkTest.java"}, "test_case": {"identifier": "testCompareTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCompareTo()\n  {\n    Assert.assertEquals(\n        0,\n        make(null, null, 0, 1).compareTo(make(null, null, 0, 1))\n    );\n    Assert.assertEquals(\n        0,\n        make(10, null, 0, 1).compareTo(make(10, null, 0, 2))\n    );\n    Assert.assertEquals(\n        0,\n        make(null, 10, 0, 1).compareTo(make(null, 10, 0, 2))\n    );\n    Assert.assertEquals(\n        0,\n        make(10, 11, 0, 1).compareTo(make(10, 11, 0, 2))\n    );\n    Assert.assertEquals(\n        -1,\n        make(null, 10, 0, 1).compareTo(make(10, null, 1, 2))\n    );\n    Assert.assertEquals(\n        -1,\n        make(11, 20, 0, 1).compareTo(make(20, 33, 1, 1))\n    );\n    Assert.assertEquals(\n        1,\n        make(20, 33, 1, 1).compareTo(make(11, 20, 0, 1))\n    );\n    Assert.assertEquals(\n        1,\n        make(10, null, 1, 1).compareTo(make(null, 10, 0, 1))\n    );\n  }", "signature": "void testCompareTo()", "full_signature": "@Test public void testCompareTo()", "class_method_signature": "IntegerPartitionChunkTest.testCompareTo()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareTo", "make", "make", "assertEquals", "compareTo", "make", "make", "assertEquals", "compareTo", "make", "make", "assertEquals", "compareTo", "make", "make", "assertEquals", "compareTo", "make", "make", "assertEquals", "compareTo", "make", "make", "assertEquals", "compareTo", "make", "make", "assertEquals", "compareTo", "make", "make"]}, "focal_class": {"identifier": "IntegerPartitionChunk", "superclass": "", "interfaces": "implements PartitionChunk<T>", "fields": [{"original_string": "private final Integer start;", "modifier": "private final", "type": "Integer", "declarator": "start", "var_name": "start"}, {"original_string": "private final Integer end;", "modifier": "private final", "type": "Integer", "declarator": "end", "var_name": "end"}, {"original_string": "private final int chunkNumber;", "modifier": "private final", "type": "int", "declarator": "chunkNumber", "var_name": "chunkNumber"}, {"original_string": "private final T object;", "modifier": "private final", "type": "T", "declarator": "object", "var_name": "object"}], "methods": [{"identifier": "make", "parameters": "(Integer start, Integer end, int chunkNumber, T obj)", "modifiers": "public static", "return": "IntegerPartitionChunk<T>", "signature": "IntegerPartitionChunk<T> make(Integer start, Integer end, int chunkNumber, T obj)", "full_signature": "public static IntegerPartitionChunk<T> make(Integer start, Integer end, int chunkNumber, T obj)", "class_method_signature": "IntegerPartitionChunk.make(Integer start, Integer end, int chunkNumber, T obj)", "testcase": false, "constructor": false}, {"identifier": "IntegerPartitionChunk", "parameters": "(\n      Integer start,\n      Integer end,\n      int chunkNumber,\n      T object\n  )", "modifiers": "public", "return": "", "signature": " IntegerPartitionChunk(\n      Integer start,\n      Integer end,\n      int chunkNumber,\n      T object\n  )", "full_signature": "public  IntegerPartitionChunk(\n      Integer start,\n      Integer end,\n      int chunkNumber,\n      T object\n  )", "class_method_signature": "IntegerPartitionChunk.IntegerPartitionChunk(\n      Integer start,\n      Integer end,\n      int chunkNumber,\n      T object\n  )", "testcase": false, "constructor": true}, {"identifier": "getObject", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T getObject()", "full_signature": "@Override public T getObject()", "class_method_signature": "IntegerPartitionChunk.getObject()", "testcase": false, "constructor": false}, {"identifier": "abuts", "parameters": "(PartitionChunk<T> chunk)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean abuts(PartitionChunk<T> chunk)", "full_signature": "@Override public boolean abuts(PartitionChunk<T> chunk)", "class_method_signature": "IntegerPartitionChunk.abuts(PartitionChunk<T> chunk)", "testcase": false, "constructor": false}, {"identifier": "isStart", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStart()", "full_signature": "@Override public boolean isStart()", "class_method_signature": "IntegerPartitionChunk.isStart()", "testcase": false, "constructor": false}, {"identifier": "isEnd", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnd()", "full_signature": "@Override public boolean isEnd()", "class_method_signature": "IntegerPartitionChunk.isEnd()", "testcase": false, "constructor": false}, {"identifier": "getChunkNumber", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getChunkNumber()", "full_signature": "@Override public int getChunkNumber()", "class_method_signature": "IntegerPartitionChunk.getChunkNumber()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(PartitionChunk<T> chunk)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(PartitionChunk<T> chunk)", "full_signature": "@Override public int compareTo(PartitionChunk<T> chunk)", "class_method_signature": "IntegerPartitionChunk.compareTo(PartitionChunk<T> chunk)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "IntegerPartitionChunk.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IntegerPartitionChunk.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IntegerPartitionChunk.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/timeline/partition/IntegerPartitionChunk.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(PartitionChunk<T> chunk)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compareTo(PartitionChunk<T> chunk)\n  {\n    if (chunk instanceof IntegerPartitionChunk) {\n      IntegerPartitionChunk<T> intChunk = (IntegerPartitionChunk<T>) chunk;\n      return Integer.compare(chunkNumber, intChunk.chunkNumber);\n    } else {\n      throw new IllegalArgumentException(\"Cannot compare against something that is not an IntegerPartitionChunk.\");\n    }\n  }", "signature": "int compareTo(PartitionChunk<T> chunk)", "full_signature": "@Override public int compareTo(PartitionChunk<T> chunk)", "class_method_signature": "IntegerPartitionChunk.compareTo(PartitionChunk<T> chunk)", "testcase": false, "constructor": false, "invocations": ["compare"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}