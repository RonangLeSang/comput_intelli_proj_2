{"test_class": {"identifier": "BytesBoundedLinkedQueueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int delayMS = 50;", "modifier": "private static", "type": "int", "declarator": "delayMS = 50", "var_name": "delayMS"}, {"original_string": "private ExecutorService exec = Executors.newCachedThreadPool();", "modifier": "private", "type": "ExecutorService", "declarator": "exec = Executors.newCachedThreadPool()", "var_name": "exec"}], "file": "server/src/test/java/org/apache/druid/client/cache/BytesBoundedLinkedQueueTest.java"}, "test_case": {"identifier": "testAddedObjectExceedsCapacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAddedObjectExceedsCapacity() throws Exception\n  {\n    BlockingQueue<TestObject> q = getQueue(4);\n    Assert.assertTrue(q.offer(new TestObject(3)));\n    Assert.assertFalse(q.offer(new TestObject(2)));\n    Assert.assertFalse(q.offer(new TestObject(2), delayMS, TimeUnit.MILLISECONDS));\n  }", "signature": "void testAddedObjectExceedsCapacity()", "full_signature": "@Test public void testAddedObjectExceedsCapacity()", "class_method_signature": "BytesBoundedLinkedQueueTest.testAddedObjectExceedsCapacity()", "testcase": true, "constructor": false, "invocations": ["getQueue", "assertTrue", "offer", "assertFalse", "offer", "assertFalse", "offer"]}, "focal_class": {"identifier": "BytesBoundedLinkedQueue", "superclass": "extends AbstractQueue<E>", "interfaces": "implements BlockingQueue<E>", "fields": [{"original_string": "private final Queue<E> delegate;", "modifier": "private final", "type": "Queue<E>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final AtomicLong currentSize = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "currentSize = new AtomicLong(0)", "var_name": "currentSize"}, {"original_string": "private final Lock putLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "putLock = new ReentrantLock()", "var_name": "putLock"}, {"original_string": "private final Condition notFull = putLock.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "notFull = putLock.newCondition()", "var_name": "notFull"}, {"original_string": "private final Lock takeLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "takeLock = new ReentrantLock()", "var_name": "takeLock"}, {"original_string": "private final Condition notEmpty = takeLock.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "notEmpty = takeLock.newCondition()", "var_name": "notEmpty"}, {"original_string": "private final AtomicInteger elementCount = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "elementCount = new AtomicInteger(0)", "var_name": "elementCount"}, {"original_string": "private long capacity;", "modifier": "private", "type": "long", "declarator": "capacity", "var_name": "capacity"}], "methods": [{"identifier": "BytesBoundedLinkedQueue", "parameters": "(long capacity)", "modifiers": "public", "return": "", "signature": " BytesBoundedLinkedQueue(long capacity)", "full_signature": "public  BytesBoundedLinkedQueue(long capacity)", "class_method_signature": "BytesBoundedLinkedQueue.BytesBoundedLinkedQueue(long capacity)", "testcase": false, "constructor": true}, {"identifier": "checkNotNull", "parameters": "(Object v)", "modifiers": "private static", "return": "void", "signature": "void checkNotNull(Object v)", "full_signature": "private static void checkNotNull(Object v)", "class_method_signature": "BytesBoundedLinkedQueue.checkNotNull(Object v)", "testcase": false, "constructor": false}, {"identifier": "checkSize", "parameters": "(E e)", "modifiers": "private", "return": "void", "signature": "void checkSize(E e)", "full_signature": "private void checkSize(E e)", "class_method_signature": "BytesBoundedLinkedQueue.checkSize(E e)", "testcase": false, "constructor": false}, {"identifier": "getBytesSize", "parameters": "(E e)", "modifiers": "public abstract", "return": "long", "signature": "long getBytesSize(E e)", "full_signature": "public abstract long getBytesSize(E e)", "class_method_signature": "BytesBoundedLinkedQueue.getBytesSize(E e)", "testcase": false, "constructor": false}, {"identifier": "elementAdded", "parameters": "(E e)", "modifiers": "public", "return": "void", "signature": "void elementAdded(E e)", "full_signature": "public void elementAdded(E e)", "class_method_signature": "BytesBoundedLinkedQueue.elementAdded(E e)", "testcase": false, "constructor": false}, {"identifier": "elementRemoved", "parameters": "(E e)", "modifiers": "public", "return": "void", "signature": "void elementRemoved(E e)", "full_signature": "public void elementRemoved(E e)", "class_method_signature": "BytesBoundedLinkedQueue.elementRemoved(E e)", "testcase": false, "constructor": false}, {"identifier": "fullyUnlock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fullyUnlock()", "full_signature": "private void fullyUnlock()", "class_method_signature": "BytesBoundedLinkedQueue.fullyUnlock()", "testcase": false, "constructor": false}, {"identifier": "fullyLock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fullyLock()", "full_signature": "private void fullyLock()", "class_method_signature": "BytesBoundedLinkedQueue.fullyLock()", "testcase": false, "constructor": false}, {"identifier": "signalNotEmpty", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void signalNotEmpty()", "full_signature": "private void signalNotEmpty()", "class_method_signature": "BytesBoundedLinkedQueue.signalNotEmpty()", "testcase": false, "constructor": false}, {"identifier": "signalNotFull", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void signalNotFull()", "full_signature": "private void signalNotFull()", "class_method_signature": "BytesBoundedLinkedQueue.signalNotFull()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BytesBoundedLinkedQueue.size()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(E e)", "modifiers": "@Override public", "return": "void", "signature": "void put(E e)", "full_signature": "@Override public void put(E e)", "class_method_signature": "BytesBoundedLinkedQueue.put(E e)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(E e, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(E e, long timeout, TimeUnit unit)", "full_signature": "@Override public boolean offer(E e, long timeout, TimeUnit unit)", "class_method_signature": "BytesBoundedLinkedQueue.offer(E e, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "take", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E take()", "full_signature": "@Override public E take()", "class_method_signature": "BytesBoundedLinkedQueue.take()", "testcase": false, "constructor": false}, {"identifier": "remainingCapacity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int remainingCapacity()", "full_signature": "@Override public int remainingCapacity()", "class_method_signature": "BytesBoundedLinkedQueue.remainingCapacity()", "testcase": false, "constructor": false}, {"identifier": "drainTo", "parameters": "(Collection<? super E> c)", "modifiers": "@Override public", "return": "int", "signature": "int drainTo(Collection<? super E> c)", "full_signature": "@Override public int drainTo(Collection<? super E> c)", "class_method_signature": "BytesBoundedLinkedQueue.drainTo(Collection<? super E> c)", "testcase": false, "constructor": false}, {"identifier": "drainTo", "parameters": "(Collection<? super E> c, int maxElements)", "modifiers": "@Override public", "return": "int", "signature": "int drainTo(Collection<? super E> c, int maxElements)", "full_signature": "@Override public int drainTo(Collection<? super E> c, int maxElements)", "class_method_signature": "BytesBoundedLinkedQueue.drainTo(Collection<? super E> c, int maxElements)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(E e)", "full_signature": "@Override public boolean offer(E e)", "class_method_signature": "BytesBoundedLinkedQueue.offer(E e)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E poll()", "full_signature": "@Override public E poll()", "class_method_signature": "BytesBoundedLinkedQueue.poll()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "E", "signature": "E poll(long timeout, TimeUnit unit)", "full_signature": "@Override public E poll(long timeout, TimeUnit unit)", "class_method_signature": "BytesBoundedLinkedQueue.poll(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E peek()", "full_signature": "@Override public E peek()", "class_method_signature": "BytesBoundedLinkedQueue.peek()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<E>", "signature": "Iterator<E> iterator()", "full_signature": "@Override public Iterator<E> iterator()", "class_method_signature": "BytesBoundedLinkedQueue.iterator()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/client/cache/BytesBoundedLinkedQueue.java"}, "focal_method": {"identifier": "offer", "parameters": "(E e, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException\n  {\n    checkNotNull(e);\n    checkSize(e);\n    long nanos = unit.toNanos(timeout);\n    putLock.lockInterruptibly();\n    try {\n      while (currentSize.get() + getBytesSize(e) > capacity) {\n        if (nanos <= 0) {\n          return false;\n        }\n        nanos = notFull.awaitNanos(nanos);\n      }\n      delegate.add(e);\n      elementAdded(e);\n    }\n    finally {\n      putLock.unlock();\n    }\n    signalNotEmpty();\n    return true;\n  }", "signature": "boolean offer(E e, long timeout, TimeUnit unit)", "full_signature": "@Override public boolean offer(E e, long timeout, TimeUnit unit)", "class_method_signature": "BytesBoundedLinkedQueue.offer(E e, long timeout, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkSize", "toNanos", "lockInterruptibly", "get", "getBytesSize", "awaitNanos", "add", "elementAdded", "unlock", "signalNotEmpty"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}