{"test_class": {"identifier": "NewestSegmentFirstPolicyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATA_SOURCE = \"dataSource\";", "modifier": "private static final", "type": "String", "declarator": "DATA_SOURCE = \"dataSource\"", "var_name": "DATA_SOURCE"}, {"original_string": "private static final long DEFAULT_SEGMENT_SIZE = 1000;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_SEGMENT_SIZE = 1000", "var_name": "DEFAULT_SEGMENT_SIZE"}, {"original_string": "private static final int DEFAULT_NUM_SEGMENTS_PER_SHARD = 4;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_NUM_SEGMENTS_PER_SHARD = 4", "var_name": "DEFAULT_NUM_SEGMENTS_PER_SHARD"}, {"original_string": "private final NewestSegmentFirstPolicy policy = new NewestSegmentFirstPolicy(new DefaultObjectMapper());", "modifier": "private final", "type": "NewestSegmentFirstPolicy", "declarator": "policy = new NewestSegmentFirstPolicy(new DefaultObjectMapper())", "var_name": "policy"}], "file": "server/src/test/java/org/apache/druid/server/coordinator/duty/NewestSegmentFirstPolicyTest.java"}, "test_case": {"identifier": "testLargeGapInData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLargeGapInData()\n  {\n    final Period segmentPeriod = new Period(\"PT1H\");\n    final CompactionSegmentIterator iterator = policy.reset(\n        ImmutableMap.of(DATA_SOURCE, createCompactionConfig(10000, new Period(\"PT1H1M\"))),\n        ImmutableMap.of(\n            DATA_SOURCE,\n            createTimeline(\n                new SegmentGenerateSpec(Intervals.of(\"2017-11-16T20:00:00/2017-11-17T04:00:00\"), segmentPeriod),\n                // larger gap than SegmentCompactionUtil.LOOKUP_PERIOD (1 day)\n                new SegmentGenerateSpec(Intervals.of(\"2017-11-14T00:00:00/2017-11-15T07:00:00\"), segmentPeriod)\n            )\n        ),\n        Collections.emptyMap()\n    );\n\n    assertCompactSegmentIntervals(\n        iterator,\n        segmentPeriod,\n        Intervals.of(\"2017-11-16T20:00:00/2017-11-16T21:00:00\"),\n        Intervals.of(\"2017-11-17T01:00:00/2017-11-17T02:00:00\"),\n        false\n    );\n\n    assertCompactSegmentIntervals(\n        iterator,\n        segmentPeriod,\n        Intervals.of(\"2017-11-14T00:00:00/2017-11-14T01:00:00\"),\n        Intervals.of(\"2017-11-15T06:00:00/2017-11-15T07:00:00\"),\n        true\n    );\n  }", "signature": "void testLargeGapInData()", "full_signature": "@Test public void testLargeGapInData()", "class_method_signature": "NewestSegmentFirstPolicyTest.testLargeGapInData()", "testcase": true, "constructor": false, "invocations": ["reset", "of", "createCompactionConfig", "of", "createTimeline", "of", "of", "emptyMap", "assertCompactSegmentIntervals", "of", "of", "assertCompactSegmentIntervals", "of", "of"]}, "focal_class": {"identifier": "NewestSegmentFirstPolicy", "superclass": "", "interfaces": "implements CompactionSegmentSearchPolicy", "fields": [{"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "methods": [{"identifier": "NewestSegmentFirstPolicy", "parameters": "(ObjectMapper objectMapper)", "modifiers": "public", "return": "", "signature": " NewestSegmentFirstPolicy(ObjectMapper objectMapper)", "full_signature": "public  NewestSegmentFirstPolicy(ObjectMapper objectMapper)", "class_method_signature": "NewestSegmentFirstPolicy.NewestSegmentFirstPolicy(ObjectMapper objectMapper)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "modifiers": "@Override public", "return": "CompactionSegmentIterator", "signature": "CompactionSegmentIterator reset(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "full_signature": "@Override public CompactionSegmentIterator reset(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "class_method_signature": "NewestSegmentFirstPolicy.reset(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/coordinator/duty/NewestSegmentFirstPolicy.java"}, "focal_method": {"identifier": "reset", "parameters": "(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "modifiers": "@Override public", "return": "CompactionSegmentIterator", "body": "@Override\n  public CompactionSegmentIterator reset(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )\n  {\n    return new NewestSegmentFirstIterator(objectMapper, compactionConfigs, dataSources, skipIntervals);\n  }", "signature": "CompactionSegmentIterator reset(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "full_signature": "@Override public CompactionSegmentIterator reset(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "class_method_signature": "NewestSegmentFirstPolicy.reset(\n      Map<String, DataSourceCompactionConfig> compactionConfigs,\n      Map<String, VersionedIntervalTimeline<String, DataSegment>> dataSources,\n      Map<String, List<Interval>> skipIntervals\n  )", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}