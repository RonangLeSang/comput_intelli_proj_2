{"test_class": {"identifier": "InlineDataSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private final AtomicLong iterationCounter = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "iterationCounter = new AtomicLong()", "var_name": "iterationCounter"}, {"original_string": "private final List<Object[]> rows = ImmutableList.of(\n      new Object[]{DateTimes.of(\"2000\").getMillis(), \"foo\", 0d, ImmutableMap.of(\"n\", \"0\"), ImmutableList.of(1.0, 2.0)},\n      new Object[]{DateTimes.of(\"2000\").getMillis(), \"bar\", 1d, ImmutableMap.of(\"n\", \"1\"), ImmutableList.of(2.0, 4.0)},\n      new Object[]{DateTimes.of(\"2000\").getMillis(), \"baz\", 2d, ImmutableMap.of(\"n\", \"2\"), ImmutableList.of(3.0, 6.0)}\n  );", "modifier": "private final", "type": "List<Object[]>", "declarator": "rows = ImmutableList.of(\n      new Object[]{DateTimes.of(\"2000\").getMillis(), \"foo\", 0d, ImmutableMap.of(\"n\", \"0\"), ImmutableList.of(1.0, 2.0)},\n      new Object[]{DateTimes.of(\"2000\").getMillis(), \"bar\", 1d, ImmutableMap.of(\"n\", \"1\"), ImmutableList.of(2.0, 4.0)},\n      new Object[]{DateTimes.of(\"2000\").getMillis(), \"baz\", 2d, ImmutableMap.of(\"n\", \"2\"), ImmutableList.of(3.0, 6.0)}\n  )", "var_name": "rows"}, {"original_string": "private final Iterable<Object[]> rowsIterable = () -> {\n    iterationCounter.incrementAndGet();\n    return rows.iterator();\n  };", "modifier": "private final", "type": "Iterable<Object[]>", "declarator": "rowsIterable = () -> {\n    iterationCounter.incrementAndGet();\n    return rows.iterator();\n  }", "var_name": "rowsIterable"}, {"original_string": "private final List<String> expectedColumnNames = ImmutableList.of(\n      ColumnHolder.TIME_COLUMN_NAME,\n      \"str\",\n      \"double\",\n      \"complex\",\n      \"double_array\"\n  );", "modifier": "private final", "type": "List<String>", "declarator": "expectedColumnNames = ImmutableList.of(\n      ColumnHolder.TIME_COLUMN_NAME,\n      \"str\",\n      \"double\",\n      \"complex\",\n      \"double_array\"\n  )", "var_name": "expectedColumnNames"}, {"original_string": "private final List<ValueType> expectedColumnTypes = ImmutableList.of(\n      ValueType.LONG,\n      ValueType.STRING,\n      ValueType.DOUBLE,\n      ValueType.COMPLEX,\n      ValueType.DOUBLE_ARRAY\n  );", "modifier": "private final", "type": "List<ValueType>", "declarator": "expectedColumnTypes = ImmutableList.of(\n      ValueType.LONG,\n      ValueType.STRING,\n      ValueType.DOUBLE,\n      ValueType.COMPLEX,\n      ValueType.DOUBLE_ARRAY\n  )", "var_name": "expectedColumnTypes"}, {"original_string": "private final RowSignature expectedRowSignature;", "modifier": "private final", "type": "RowSignature", "declarator": "expectedRowSignature", "var_name": "expectedRowSignature"}, {"original_string": "private final InlineDataSource listDataSource;", "modifier": "private final", "type": "InlineDataSource", "declarator": "listDataSource", "var_name": "listDataSource"}, {"original_string": "private final InlineDataSource iterableDataSource;", "modifier": "private final", "type": "InlineDataSource", "declarator": "iterableDataSource", "var_name": "iterableDataSource"}], "file": "processing/src/test/java/org/apache/druid/query/InlineDataSourceTest.java"}, "test_case": {"identifier": "test_isConcrete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_isConcrete()\n  {\n    Assert.assertTrue(listDataSource.isConcrete());\n  }", "signature": "void test_isConcrete()", "full_signature": "@Test public void test_isConcrete()", "class_method_signature": "InlineDataSourceTest.test_isConcrete()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isConcrete"]}, "focal_class": {"identifier": "InlineDataSource", "superclass": "", "interfaces": "implements DataSource", "fields": [{"original_string": "private final Iterable<Object[]> rows;", "modifier": "private final", "type": "Iterable<Object[]>", "declarator": "rows", "var_name": "rows"}, {"original_string": "private final RowSignature signature;", "modifier": "private final", "type": "RowSignature", "declarator": "signature", "var_name": "signature"}], "methods": [{"identifier": "InlineDataSource", "parameters": "(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "modifiers": "private", "return": "", "signature": " InlineDataSource(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "full_signature": "private  InlineDataSource(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "class_method_signature": "InlineDataSource.InlineDataSource(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "testcase": false, "constructor": true}, {"identifier": "fromJson", "parameters": "(\n      @JsonProperty(\"columnNames\") List<String> columnNames,\n      @JsonProperty(\"columnTypes\") List<ValueType> columnTypes,\n      @JsonProperty(\"rows\") List<Object[]> rows\n  )", "modifiers": "@JsonCreator private static", "return": "InlineDataSource", "signature": "InlineDataSource fromJson(\n      @JsonProperty(\"columnNames\") List<String> columnNames,\n      @JsonProperty(\"columnTypes\") List<ValueType> columnTypes,\n      @JsonProperty(\"rows\") List<Object[]> rows\n  )", "full_signature": "@JsonCreator private static InlineDataSource fromJson(\n      @JsonProperty(\"columnNames\") List<String> columnNames,\n      @JsonProperty(\"columnTypes\") List<ValueType> columnTypes,\n      @JsonProperty(\"rows\") List<Object[]> rows\n  )", "class_method_signature": "InlineDataSource.fromJson(\n      @JsonProperty(\"columnNames\") List<String> columnNames,\n      @JsonProperty(\"columnTypes\") List<ValueType> columnTypes,\n      @JsonProperty(\"rows\") List<Object[]> rows\n  )", "testcase": false, "constructor": false}, {"identifier": "fromIterable", "parameters": "(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "modifiers": "public static", "return": "InlineDataSource", "signature": "InlineDataSource fromIterable(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "full_signature": "public static InlineDataSource fromIterable(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "class_method_signature": "InlineDataSource.fromIterable(\n      final Iterable<Object[]> rows,\n      final RowSignature signature\n  )", "testcase": false, "constructor": false}, {"identifier": "getTableNames", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getTableNames()", "full_signature": "@Override public Set<String> getTableNames()", "class_method_signature": "InlineDataSource.getTableNames()", "testcase": false, "constructor": false}, {"identifier": "getColumnNames", "parameters": "()", "modifiers": "@JsonProperty public", "return": "List<String>", "signature": "List<String> getColumnNames()", "full_signature": "@JsonProperty public List<String> getColumnNames()", "class_method_signature": "InlineDataSource.getColumnNames()", "testcase": false, "constructor": false}, {"identifier": "getColumnTypes", "parameters": "()", "modifiers": "@Nullable @JsonProperty @JsonInclude(JsonInclude.Include.NON_NULL) public", "return": "List<ValueType>", "signature": "List<ValueType> getColumnTypes()", "full_signature": "@Nullable @JsonProperty @JsonInclude(JsonInclude.Include.NON_NULL) public List<ValueType> getColumnTypes()", "class_method_signature": "InlineDataSource.getColumnTypes()", "testcase": false, "constructor": false}, {"identifier": "getRowsAsList", "parameters": "()", "modifiers": "@JsonProperty(\"rows\") public", "return": "List<Object[]>", "signature": "List<Object[]> getRowsAsList()", "full_signature": "@JsonProperty(\"rows\") public List<Object[]> getRowsAsList()", "class_method_signature": "InlineDataSource.getRowsAsList()", "testcase": false, "constructor": false}, {"identifier": "getRows", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "Iterable<Object[]>", "signature": "Iterable<Object[]> getRows()", "full_signature": "@JsonIgnore public Iterable<Object[]> getRows()", "class_method_signature": "InlineDataSource.getRows()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "List<DataSource>", "signature": "List<DataSource> getChildren()", "full_signature": "@Override public List<DataSource> getChildren()", "class_method_signature": "InlineDataSource.getChildren()", "testcase": false, "constructor": false}, {"identifier": "withChildren", "parameters": "(List<DataSource> children)", "modifiers": "@Override public", "return": "DataSource", "signature": "DataSource withChildren(List<DataSource> children)", "full_signature": "@Override public DataSource withChildren(List<DataSource> children)", "class_method_signature": "InlineDataSource.withChildren(List<DataSource> children)", "testcase": false, "constructor": false}, {"identifier": "isCacheable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCacheable()", "full_signature": "@Override public boolean isCacheable()", "class_method_signature": "InlineDataSource.isCacheable()", "testcase": false, "constructor": false}, {"identifier": "isGlobal", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGlobal()", "full_signature": "@Override public boolean isGlobal()", "class_method_signature": "InlineDataSource.isGlobal()", "testcase": false, "constructor": false}, {"identifier": "isConcrete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConcrete()", "full_signature": "@Override public boolean isConcrete()", "class_method_signature": "InlineDataSource.isConcrete()", "testcase": false, "constructor": false}, {"identifier": "getRowSignature", "parameters": "()", "modifiers": "public", "return": "RowSignature", "signature": "RowSignature getRowSignature()", "full_signature": "public RowSignature getRowSignature()", "class_method_signature": "InlineDataSource.getRowSignature()", "testcase": false, "constructor": false}, {"identifier": "rowAdapter", "parameters": "()", "modifiers": "public", "return": "RowAdapter<Object[]>", "signature": "RowAdapter<Object[]> rowAdapter()", "full_signature": "public RowAdapter<Object[]> rowAdapter()", "class_method_signature": "InlineDataSource.rowAdapter()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "InlineDataSource.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "InlineDataSource.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "InlineDataSource.toString()", "testcase": false, "constructor": false}, {"identifier": "rowsEqual", "parameters": "(final Iterable<Object[]> rowsA, final Iterable<Object[]> rowsB)", "modifiers": "private static", "return": "boolean", "signature": "boolean rowsEqual(final Iterable<Object[]> rowsA, final Iterable<Object[]> rowsB)", "full_signature": "private static boolean rowsEqual(final Iterable<Object[]> rowsA, final Iterable<Object[]> rowsB)", "class_method_signature": "InlineDataSource.rowsEqual(final Iterable<Object[]> rowsA, final Iterable<Object[]> rowsB)", "testcase": false, "constructor": false}, {"identifier": "rowsHashCode", "parameters": "(final Iterable<Object[]> rows)", "modifiers": "private static", "return": "int", "signature": "int rowsHashCode(final Iterable<Object[]> rows)", "full_signature": "private static int rowsHashCode(final Iterable<Object[]> rows)", "class_method_signature": "InlineDataSource.rowsHashCode(final Iterable<Object[]> rows)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/InlineDataSource.java"}, "focal_method": {"identifier": "isConcrete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean isConcrete()\n  {\n    return true;\n  }", "signature": "boolean isConcrete()", "full_signature": "@Override public boolean isConcrete()", "class_method_signature": "InlineDataSource.isConcrete()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}