{"test_class": {"identifier": "InitializationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n  public final", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "server/src/test/java/org/apache/druid/initialization/InitializationTest.java"}, "test_case": {"identifier": "test06GetClassLoaderForExtension", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test06GetClassLoaderForExtension() throws IOException\n  {\n    final File some_extension_dir = temporaryFolder.newFolder();\n    final File a_jar = new File(some_extension_dir, \"a.jar\");\n    final File b_jar = new File(some_extension_dir, \"b.jar\");\n    final File c_jar = new File(some_extension_dir, \"c.jar\");\n    a_jar.createNewFile();\n    b_jar.createNewFile();\n    c_jar.createNewFile();\n    final URLClassLoader loader = Initialization.getClassLoaderForExtension(some_extension_dir, false);\n    final URL[] expectedURLs = new URL[]{a_jar.toURI().toURL(), b_jar.toURI().toURL(), c_jar.toURI().toURL()};\n    final URL[] actualURLs = loader.getURLs();\n    Arrays.sort(actualURLs, Comparator.comparing(URL::getPath));\n    Assert.assertArrayEquals(expectedURLs, actualURLs);\n  }", "signature": "void test06GetClassLoaderForExtension()", "full_signature": "@Test public void test06GetClassLoaderForExtension()", "class_method_signature": "InitializationTest.test06GetClassLoaderForExtension()", "testcase": true, "constructor": false, "invocations": ["newFolder", "createNewFile", "createNewFile", "createNewFile", "getClassLoaderForExtension", "toURL", "toURI", "toURL", "toURI", "toURL", "toURI", "getURLs", "sort", "comparing", "assertArrayEquals"]}, "focal_class": {"identifier": "Initialization", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(Initialization.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(Initialization.class)", "var_name": "log"}, {"original_string": "private static final ConcurrentHashMap<File, URLClassLoader> LOADERS_MAP = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentHashMap<File, URLClassLoader>", "declarator": "LOADERS_MAP = new ConcurrentHashMap<>()", "var_name": "LOADERS_MAP"}, {"original_string": "private static final ConcurrentHashMap<Class<?>, Collection<?>> EXTENSIONS_MAP = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentHashMap<Class<?>, Collection<?>>", "declarator": "EXTENSIONS_MAP = new ConcurrentHashMap<>()", "var_name": "EXTENSIONS_MAP"}], "methods": [{"identifier": "getLoadedImplementations", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> getLoadedImplementations(Class<T> clazz)", "full_signature": "public static Collection<T> getLoadedImplementations(Class<T> clazz)", "class_method_signature": "Initialization.getLoadedImplementations(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "clearLoadedImplementations", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void clearLoadedImplementations()", "full_signature": "@VisibleForTesting static void clearLoadedImplementations()", "class_method_signature": "Initialization.clearLoadedImplementations()", "testcase": false, "constructor": false}, {"identifier": "getLoadersMap", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "Map<File, URLClassLoader>", "signature": "Map<File, URLClassLoader> getLoadersMap()", "full_signature": "@VisibleForTesting static Map<File, URLClassLoader> getLoadersMap()", "class_method_signature": "Initialization.getLoadersMap()", "testcase": false, "constructor": false}, {"identifier": "getFromExtensions", "parameters": "(ExtensionsConfig config, Class<T> serviceClass)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> getFromExtensions(ExtensionsConfig config, Class<T> serviceClass)", "full_signature": "public static Collection<T> getFromExtensions(ExtensionsConfig config, Class<T> serviceClass)", "class_method_signature": "Initialization.getFromExtensions(ExtensionsConfig config, Class<T> serviceClass)", "testcase": false, "constructor": false}, {"identifier": "getExtensionFilesToLoad", "parameters": "(ExtensionsConfig config)", "modifiers": "public static", "return": "File[]", "signature": "File[] getExtensionFilesToLoad(ExtensionsConfig config)", "full_signature": "public static File[] getExtensionFilesToLoad(ExtensionsConfig config)", "class_method_signature": "Initialization.getExtensionFilesToLoad(ExtensionsConfig config)", "testcase": false, "constructor": false}, {"identifier": "getHadoopDependencyFilesToLoad", "parameters": "(\n      List<String> hadoopDependencyCoordinates,\n      ExtensionsConfig extensionsConfig\n  )", "modifiers": "public static", "return": "File[]", "signature": "File[] getHadoopDependencyFilesToLoad(\n      List<String> hadoopDependencyCoordinates,\n      ExtensionsConfig extensionsConfig\n  )", "full_signature": "public static File[] getHadoopDependencyFilesToLoad(\n      List<String> hadoopDependencyCoordinates,\n      ExtensionsConfig extensionsConfig\n  )", "class_method_signature": "Initialization.getHadoopDependencyFilesToLoad(\n      List<String> hadoopDependencyCoordinates,\n      ExtensionsConfig extensionsConfig\n  )", "testcase": false, "constructor": false}, {"identifier": "getClassLoaderForExtension", "parameters": "(File extension, boolean useExtensionClassloaderFirst)", "modifiers": "public static", "return": "URLClassLoader", "signature": "URLClassLoader getClassLoaderForExtension(File extension, boolean useExtensionClassloaderFirst)", "full_signature": "public static URLClassLoader getClassLoaderForExtension(File extension, boolean useExtensionClassloaderFirst)", "class_method_signature": "Initialization.getClassLoaderForExtension(File extension, boolean useExtensionClassloaderFirst)", "testcase": false, "constructor": false}, {"identifier": "makeClassLoaderForExtension", "parameters": "(\n      final File extension,\n      final boolean useExtensionClassloaderFirst\n  )", "modifiers": "private static", "return": "URLClassLoader", "signature": "URLClassLoader makeClassLoaderForExtension(\n      final File extension,\n      final boolean useExtensionClassloaderFirst\n  )", "full_signature": "private static URLClassLoader makeClassLoaderForExtension(\n      final File extension,\n      final boolean useExtensionClassloaderFirst\n  )", "class_method_signature": "Initialization.makeClassLoaderForExtension(\n      final File extension,\n      final boolean useExtensionClassloaderFirst\n  )", "testcase": false, "constructor": false}, {"identifier": "getURLsForClasspath", "parameters": "(String cp)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> getURLsForClasspath(String cp)", "full_signature": "public static List<URL> getURLsForClasspath(String cp)", "class_method_signature": "Initialization.getURLsForClasspath(String cp)", "testcase": false, "constructor": false}, {"identifier": "makeInjectorWithModules", "parameters": "(final Injector baseInjector, Iterable<? extends Module> modules)", "modifiers": "public static", "return": "Injector", "signature": "Injector makeInjectorWithModules(final Injector baseInjector, Iterable<? extends Module> modules)", "full_signature": "public static Injector makeInjectorWithModules(final Injector baseInjector, Iterable<? extends Module> modules)", "class_method_signature": "Initialization.makeInjectorWithModules(final Injector baseInjector, Iterable<? extends Module> modules)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/initialization/Initialization.java"}, "focal_method": {"identifier": "getClassLoaderForExtension", "parameters": "(File extension, boolean useExtensionClassloaderFirst)", "modifiers": "public static", "return": "URLClassLoader", "body": "public static URLClassLoader getClassLoaderForExtension(File extension, boolean useExtensionClassloaderFirst)\n  {\n    return LOADERS_MAP.computeIfAbsent(\n        extension,\n        theExtension -> makeClassLoaderForExtension(theExtension, useExtensionClassloaderFirst)\n    );\n  }", "signature": "URLClassLoader getClassLoaderForExtension(File extension, boolean useExtensionClassloaderFirst)", "full_signature": "public static URLClassLoader getClassLoaderForExtension(File extension, boolean useExtensionClassloaderFirst)", "class_method_signature": "Initialization.getClassLoaderForExtension(File extension, boolean useExtensionClassloaderFirst)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent", "makeClassLoaderForExtension"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}