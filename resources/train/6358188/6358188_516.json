{"test_class": {"identifier": "JavaScriptExtractionFnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private static final String[] TEST_STRINGS = {\n      \"Quito\",\n      \"Calgary\",\n      \"Tokyo\",\n      \"Stockholm\",\n      \"Vancouver\",\n      \"Pretoria\",\n      \"Wellington\",\n      \"Ontario\"\n  };", "modifier": "private static final", "type": "String[]", "declarator": "TEST_STRINGS = {\n      \"Quito\",\n      \"Calgary\",\n      \"Tokyo\",\n      \"Stockholm\",\n      \"Vancouver\",\n      \"Pretoria\",\n      \"Wellington\",\n      \"Ontario\"\n  }", "var_name": "TEST_STRINGS"}], "file": "processing/src/test/java/org/apache/druid/query/extraction/JavaScriptExtractionFnTest.java"}, "test_case": {"identifier": "testJavascriptSubstring", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testJavascriptSubstring()\n  {\n    String function = \"function(str) { return str.substring(0,3); }\";\n    ExtractionFn extractionFn = new JavaScriptExtractionFn(function, false, JavaScriptConfig.getEnabledInstance());\n\n    for (String str : TEST_STRINGS) {\n      String res = extractionFn.apply(str);\n      Assert.assertEquals(str.substring(0, 3), res);\n    }\n  }", "signature": "void testJavascriptSubstring()", "full_signature": "@Test public void testJavascriptSubstring()", "class_method_signature": "JavaScriptExtractionFnTest.testJavascriptSubstring()", "testcase": true, "constructor": false, "invocations": ["getEnabledInstance", "apply", "assertEquals", "substring"]}, "focal_class": {"identifier": "JavaScriptExtractionFn", "superclass": "", "interfaces": "implements ExtractionFn", "fields": [{"original_string": "private final String function;", "modifier": "private final", "type": "String", "declarator": "function", "var_name": "function"}, {"original_string": "private final boolean injective;", "modifier": "private final", "type": "boolean", "declarator": "injective", "var_name": "injective"}, {"original_string": "private final JavaScriptConfig config;", "modifier": "private final", "type": "JavaScriptConfig", "declarator": "config", "var_name": "config"}, {"original_string": "@MonotonicNonNull\n  private volatile Function<Object, String> fn;", "modifier": "@MonotonicNonNull\n  private volatile", "type": "Function<Object, String>", "declarator": "fn", "var_name": "fn"}], "methods": [{"identifier": "compile", "parameters": "(String function)", "modifiers": "private static", "return": "Function<Object, String>", "signature": "Function<Object, String> compile(String function)", "full_signature": "private static Function<Object, String> compile(String function)", "class_method_signature": "JavaScriptExtractionFn.compile(String function)", "testcase": false, "constructor": false}, {"identifier": "JavaScriptExtractionFn", "parameters": "(\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject JavaScriptConfig config\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " JavaScriptExtractionFn(\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject JavaScriptConfig config\n  )", "full_signature": "@JsonCreator public  JavaScriptExtractionFn(\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject JavaScriptConfig config\n  )", "class_method_signature": "JavaScriptExtractionFn.JavaScriptExtractionFn(\n      @JsonProperty(\"function\") String function,\n      @JsonProperty(\"injective\") boolean injective,\n      @JacksonInject JavaScriptConfig config\n  )", "testcase": false, "constructor": true}, {"identifier": "getFunction", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getFunction()", "full_signature": "@JsonProperty public String getFunction()", "class_method_signature": "JavaScriptExtractionFn.getFunction()", "testcase": false, "constructor": false}, {"identifier": "isInjective", "parameters": "()", "modifiers": "@JsonProperty public", "return": "boolean", "signature": "boolean isInjective()", "full_signature": "@JsonProperty public boolean isInjective()", "class_method_signature": "JavaScriptExtractionFn.isInjective()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCacheKey()", "full_signature": "@Override public byte[] getCacheKey()", "class_method_signature": "JavaScriptExtractionFn.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(@Nullable Object value)", "modifiers": "@Override @Nullable public", "return": "String", "signature": "String apply(@Nullable Object value)", "full_signature": "@Override @Nullable public String apply(@Nullable Object value)", "class_method_signature": "JavaScriptExtractionFn.apply(@Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "getCompiledScript", "parameters": "()", "modifiers": "@EnsuresNonNull(\"fn\") private", "return": "Function<Object, String>", "signature": "Function<Object, String> getCompiledScript()", "full_signature": "@EnsuresNonNull(\"fn\") private Function<Object, String> getCompiledScript()", "class_method_signature": "JavaScriptExtractionFn.getCompiledScript()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(@Nullable String value)", "modifiers": "@Override @Nullable public", "return": "String", "signature": "String apply(@Nullable String value)", "full_signature": "@Override @Nullable public String apply(@Nullable String value)", "class_method_signature": "JavaScriptExtractionFn.apply(@Nullable String value)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(long value)", "modifiers": "@Override public", "return": "String", "signature": "String apply(long value)", "full_signature": "@Override public String apply(long value)", "class_method_signature": "JavaScriptExtractionFn.apply(long value)", "testcase": false, "constructor": false}, {"identifier": "preservesOrdering", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preservesOrdering()", "full_signature": "@Override public boolean preservesOrdering()", "class_method_signature": "JavaScriptExtractionFn.preservesOrdering()", "testcase": false, "constructor": false}, {"identifier": "getExtractionType", "parameters": "()", "modifiers": "@Override public", "return": "ExtractionType", "signature": "ExtractionType getExtractionType()", "full_signature": "@Override public ExtractionType getExtractionType()", "class_method_signature": "JavaScriptExtractionFn.getExtractionType()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JavaScriptExtractionFn.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "JavaScriptExtractionFn.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JavaScriptExtractionFn.hashCode()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/extraction/JavaScriptExtractionFn.java"}, "focal_method": {"identifier": "apply", "parameters": "(@Nullable Object value)", "modifiers": "@Override @Nullable public", "return": "String", "body": "@Override\n  @Nullable\n  public String apply(@Nullable Object value)\n  {\n    Function<Object, String> fn = getCompiledScript();\n    return NullHandling.emptyToNullIfNeeded(fn.apply(value));\n  }", "signature": "String apply(@Nullable Object value)", "full_signature": "@Override @Nullable public String apply(@Nullable Object value)", "class_method_signature": "JavaScriptExtractionFn.apply(@Nullable Object value)", "testcase": false, "constructor": false, "invocations": ["getCompiledScript", "emptyToNullIfNeeded", "apply"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}