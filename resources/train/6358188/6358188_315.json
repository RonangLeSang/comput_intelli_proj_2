{"test_class": {"identifier": "TopNBinaryFnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final CountAggregatorFactory rowsCount = new CountAggregatorFactory(\"rows\");", "modifier": "final", "type": "CountAggregatorFactory", "declarator": "rowsCount = new CountAggregatorFactory(\"rows\")", "var_name": "rowsCount"}, {"original_string": "final LongSumAggregatorFactory indexLongSum = new LongSumAggregatorFactory(\"index\", \"index\");", "modifier": "final", "type": "LongSumAggregatorFactory", "declarator": "indexLongSum = new LongSumAggregatorFactory(\"index\", \"index\")", "var_name": "indexLongSum"}, {"original_string": "final ConstantPostAggregator constant = new ConstantPostAggregator(\"const\", 1L);", "modifier": "final", "type": "ConstantPostAggregator", "declarator": "constant = new ConstantPostAggregator(\"const\", 1L)", "var_name": "constant"}, {"original_string": "final FieldAccessPostAggregator rowsPostAgg = new FieldAccessPostAggregator(\"rows\", \"rows\");", "modifier": "final", "type": "FieldAccessPostAggregator", "declarator": "rowsPostAgg = new FieldAccessPostAggregator(\"rows\", \"rows\")", "var_name": "rowsPostAgg"}, {"original_string": "final FieldAccessPostAggregator indexPostAgg = new FieldAccessPostAggregator(\"index\", \"index\");", "modifier": "final", "type": "FieldAccessPostAggregator", "declarator": "indexPostAgg = new FieldAccessPostAggregator(\"index\", \"index\")", "var_name": "indexPostAgg"}, {"original_string": "final ArithmeticPostAggregator addrowsindexconstant = new ArithmeticPostAggregator(\n      \"addrowsindexconstant\",\n      \"+\",\n      Lists.newArrayList(constant, rowsPostAgg, indexPostAgg)\n  );", "modifier": "final", "type": "ArithmeticPostAggregator", "declarator": "addrowsindexconstant = new ArithmeticPostAggregator(\n      \"addrowsindexconstant\",\n      \"+\",\n      Lists.newArrayList(constant, rowsPostAgg, indexPostAgg)\n  )", "var_name": "addrowsindexconstant"}, {"original_string": "final List<AggregatorFactory> aggregatorFactories = Arrays.asList(\n      rowsCount,\n      indexLongSum\n  );", "modifier": "final", "type": "List<AggregatorFactory>", "declarator": "aggregatorFactories = Arrays.asList(\n      rowsCount,\n      indexLongSum\n  )", "var_name": "aggregatorFactories"}, {"original_string": "final List<PostAggregator> postAggregators = Collections.singletonList(\n      addrowsindexconstant\n  );", "modifier": "final", "type": "List<PostAggregator>", "declarator": "postAggregators = Collections.singletonList(\n      addrowsindexconstant\n  )", "var_name": "postAggregators"}, {"original_string": "private final DateTime currTime = DateTimes.nowUtc();", "modifier": "private final", "type": "DateTime", "declarator": "currTime = DateTimes.nowUtc()", "var_name": "currTime"}], "file": "processing/src/test/java/org/apache/druid/query/topn/TopNBinaryFnTest.java"}, "test_case": {"identifier": "testMergeShiftedTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMergeShiftedTimestamp()\n  {\n    Result<TopNResultValue> result1 = new Result<TopNResultValue>(\n        currTime,\n        new TopNResultValue(\n            ImmutableList.<Map<String, Object>>of(\n                ImmutableMap.of(\n                    \"rows\", 1L,\n                    \"index\", 2L,\n                    \"testdim\", \"1\"\n                ),\n                ImmutableMap.of(\n                    \"rows\", 2L,\n                    \"index\", 4L,\n                    \"testdim\", \"2\"\n                ),\n                ImmutableMap.of(\n                    \"rows\", 0L,\n                    \"index\", 2L,\n                    \"testdim\", \"3\"\n                )\n            )\n        )\n    );\n    Result<TopNResultValue> result2 = new Result<TopNResultValue>(\n        currTime.plusHours(2),\n        new TopNResultValue(\n            ImmutableList.<Map<String, Object>>of(\n                ImmutableMap.of(\n                    \"rows\", 2L,\n                    \"index\", 3L,\n                    \"testdim\", \"1\"\n                ),\n                ImmutableMap.of(\n                    \"rows\", 2L,\n                    \"index\", 0L,\n                    \"testdim\", \"2\"\n                ),\n                ImmutableMap.of(\n                    \"rows\", 0L,\n                    \"index\", 1L,\n                    \"testdim\", \"3\"\n                )\n            )\n        )\n    );\n\n    Result<TopNResultValue> expected = new Result<TopNResultValue>(\n        currTime,\n        new TopNResultValue(\n            ImmutableList.<Map<String, Object>>of(\n                ImmutableMap.of(\n                    \"testdim\", \"1\",\n                    \"rows\", 3L,\n                    \"index\", 5L\n                ),\n                ImmutableMap.of(\n                    \"testdim\", \"2\",\n                    \"rows\", 4L,\n                    \"index\", 4L\n                )\n            )\n        )\n    );\n\n    Result<TopNResultValue> actual = new TopNBinaryFn(\n        Granularities.ALL,\n        new DefaultDimensionSpec(\"testdim\", null),\n        new NumericTopNMetricSpec(\"index\"),\n        2,\n        aggregatorFactories,\n        postAggregators\n    ).apply(\n        result1,\n        result2\n    );\n    Assert.assertEquals(expected.getTimestamp(), actual.getTimestamp());\n    assertTopNMergeResult(expected.getValue(), actual.getValue());\n  }", "signature": "void testMergeShiftedTimestamp()", "full_signature": "@Test public void testMergeShiftedTimestamp()", "class_method_signature": "TopNBinaryFnTest.testMergeShiftedTimestamp()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "plusHours", "of", "of", "of", "of", "of", "of", "of", "apply", "assertEquals", "getTimestamp", "getTimestamp", "assertTopNMergeResult", "getValue", "getValue"]}, "focal_class": {"identifier": "TopNBinaryFn", "superclass": "", "interfaces": "implements BinaryOperator<Result<TopNResultValue>>", "fields": [{"original_string": "private final DimensionSpec dimSpec;", "modifier": "private final", "type": "DimensionSpec", "declarator": "dimSpec", "var_name": "dimSpec"}, {"original_string": "private final Granularity gran;", "modifier": "private final", "type": "Granularity", "declarator": "gran", "var_name": "gran"}, {"original_string": "private final String dimension;", "modifier": "private final", "type": "String", "declarator": "dimension", "var_name": "dimension"}, {"original_string": "private final TopNMetricSpec topNMetricSpec;", "modifier": "private final", "type": "TopNMetricSpec", "declarator": "topNMetricSpec", "var_name": "topNMetricSpec"}, {"original_string": "private final int threshold;", "modifier": "private final", "type": "int", "declarator": "threshold", "var_name": "threshold"}, {"original_string": "private final List<AggregatorFactory> aggregations;", "modifier": "private final", "type": "List<AggregatorFactory>", "declarator": "aggregations", "var_name": "aggregations"}, {"original_string": "private final List<PostAggregator> postAggregations;", "modifier": "private final", "type": "List<PostAggregator>", "declarator": "postAggregations", "var_name": "postAggregations"}, {"original_string": "private final Comparator comparator;", "modifier": "private final", "type": "Comparator", "declarator": "comparator", "var_name": "comparator"}], "methods": [{"identifier": "TopNBinaryFn", "parameters": "(\n      final Granularity granularity,\n      final DimensionSpec dimSpec,\n      final TopNMetricSpec topNMetricSpec,\n      final int threshold,\n      final List<AggregatorFactory> aggregatorSpecs,\n      final List<PostAggregator> postAggregatorSpecs\n  )", "modifiers": "public", "return": "", "signature": " TopNBinaryFn(\n      final Granularity granularity,\n      final DimensionSpec dimSpec,\n      final TopNMetricSpec topNMetricSpec,\n      final int threshold,\n      final List<AggregatorFactory> aggregatorSpecs,\n      final List<PostAggregator> postAggregatorSpecs\n  )", "full_signature": "public  TopNBinaryFn(\n      final Granularity granularity,\n      final DimensionSpec dimSpec,\n      final TopNMetricSpec topNMetricSpec,\n      final int threshold,\n      final List<AggregatorFactory> aggregatorSpecs,\n      final List<PostAggregator> postAggregatorSpecs\n  )", "class_method_signature": "TopNBinaryFn.TopNBinaryFn(\n      final Granularity granularity,\n      final DimensionSpec dimSpec,\n      final TopNMetricSpec topNMetricSpec,\n      final int threshold,\n      final List<AggregatorFactory> aggregatorSpecs,\n      final List<PostAggregator> postAggregatorSpecs\n  )", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "modifiers": "@Override public", "return": "Result<TopNResultValue>", "signature": "Result<TopNResultValue> apply(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "full_signature": "@Override public Result<TopNResultValue> apply(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "class_method_signature": "TopNBinaryFn.apply(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/topn/TopNBinaryFn.java"}, "focal_method": {"identifier": "apply", "parameters": "(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "modifiers": "@Override public", "return": "Result<TopNResultValue>", "body": "@Override\n  public Result<TopNResultValue> apply(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)\n  {\n    if (arg1 == null) {\n      return arg2;\n    }\n    if (arg2 == null) {\n      return arg1;\n    }\n\n    Map<Object, DimensionAndMetricValueExtractor> retVals = new LinkedHashMap<>();\n\n    TopNResultValue arg1Vals = arg1.getValue();\n    TopNResultValue arg2Vals = arg2.getValue();\n\n    for (DimensionAndMetricValueExtractor arg1Val : arg1Vals) {\n      retVals.put(arg1Val.getDimensionValue(dimension), arg1Val);\n    }\n    for (DimensionAndMetricValueExtractor arg2Val : arg2Vals) {\n      final Object dimensionValue = arg2Val.getDimensionValue(dimension);\n      DimensionAndMetricValueExtractor arg1Val = retVals.get(dimensionValue);\n\n      if (arg1Val != null) {\n        // size of map = aggregator + topNDim + postAgg (If sorting is done on post agg field)\n        Map<String, Object> retVal = CollectionUtils.newLinkedHashMapWithExpectedSize(aggregations.size() + 2);\n\n        retVal.put(dimension, dimensionValue);\n        for (AggregatorFactory factory : aggregations) {\n          final String metricName = factory.getName();\n          retVal.put(metricName, factory.combine(arg1Val.getMetric(metricName), arg2Val.getMetric(metricName)));\n        }\n\n        for (PostAggregator pf : postAggregations) {\n          retVal.put(pf.getName(), pf.compute(retVal));\n        }\n\n        retVals.put(dimensionValue, new DimensionAndMetricValueExtractor(retVal));\n      } else {\n        retVals.put(dimensionValue, arg2Val);\n      }\n    }\n\n    final DateTime timestamp;\n    if (gran instanceof AllGranularity) {\n      timestamp = arg1.getTimestamp();\n    } else {\n      timestamp = gran.bucketStart(arg1.getTimestamp());\n    }\n\n    TopNResultBuilder bob = topNMetricSpec.getResultBuilder(\n        timestamp,\n        dimSpec,\n        threshold,\n        comparator,\n        aggregations,\n        postAggregations\n    );\n    for (DimensionAndMetricValueExtractor extractor : retVals.values()) {\n      bob.addEntry(extractor);\n    }\n    return bob.build();\n  }", "signature": "Result<TopNResultValue> apply(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "full_signature": "@Override public Result<TopNResultValue> apply(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "class_method_signature": "TopNBinaryFn.apply(Result<TopNResultValue> arg1, Result<TopNResultValue> arg2)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "put", "getDimensionValue", "getDimensionValue", "get", "newLinkedHashMapWithExpectedSize", "size", "put", "getName", "put", "combine", "getMetric", "getMetric", "put", "getName", "compute", "put", "put", "getTimestamp", "bucketStart", "getTimestamp", "getResultBuilder", "values", "addEntry", "build"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}