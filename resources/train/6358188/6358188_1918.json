{"test_class": {"identifier": "FunctionalIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/druid/java/util/common/guava/FunctionalIteratorTest.java"}, "test_case": {"identifier": "testTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTransform()\n  {\n    Assert.assertEquals(\n        Lists.newArrayList(\n            FunctionalIterator.create(Arrays.asList(\"1\", \"2\", \"3\").iterator())\n                              .transform(\n                                  new Function<String, Integer>()\n                                  {\n                                    @Override\n                                    public Integer apply(String input)\n                                    {\n                                      return Integer.parseInt(input);\n                                    }\n                                  }\n                              )\n        ),\n        Arrays.asList(1, 2, 3)\n    );\n  }", "signature": "void testTransform()", "full_signature": "@Test public void testTransform()", "class_method_signature": "FunctionalIteratorTest.testTransform()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "newArrayList", "transform", "create", "iterator", "asList", "parseInt", "asList"]}, "focal_class": {"identifier": "FunctionalIterator", "superclass": "", "interfaces": "implements Iterator<T>", "fields": [{"original_string": "private final Iterator<T> delegate;", "modifier": "private final", "type": "Iterator<T>", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "create", "parameters": "(Iterator<T> delegate)", "modifiers": "public static", "return": "FunctionalIterator<T>", "signature": "FunctionalIterator<T> create(Iterator<T> delegate)", "full_signature": "public static FunctionalIterator<T> create(Iterator<T> delegate)", "class_method_signature": "FunctionalIterator.create(Iterator<T> delegate)", "testcase": false, "constructor": false}, {"identifier": "FunctionalIterator", "parameters": "(\n      Iterator<T> delegate\n  )", "modifiers": "public", "return": "", "signature": " FunctionalIterator(\n      Iterator<T> delegate\n  )", "full_signature": "public  FunctionalIterator(\n      Iterator<T> delegate\n  )", "class_method_signature": "FunctionalIterator.FunctionalIterator(\n      Iterator<T> delegate\n  )", "testcase": false, "constructor": true}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "FunctionalIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "FunctionalIterator.next()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "FunctionalIterator.remove()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Function<T, RetType> fn)", "modifiers": "public", "return": "FunctionalIterator<RetType>", "signature": "FunctionalIterator<RetType> transform(Function<T, RetType> fn)", "full_signature": "public FunctionalIterator<RetType> transform(Function<T, RetType> fn)", "class_method_signature": "FunctionalIterator.transform(Function<T, RetType> fn)", "testcase": false, "constructor": false}, {"identifier": "transformCat", "parameters": "(Function<T, Iterator<RetType>> fn)", "modifiers": "public", "return": "FunctionalIterator<RetType>", "signature": "FunctionalIterator<RetType> transformCat(Function<T, Iterator<RetType>> fn)", "full_signature": "public FunctionalIterator<RetType> transformCat(Function<T, Iterator<RetType>> fn)", "class_method_signature": "FunctionalIterator.transformCat(Function<T, Iterator<RetType>> fn)", "testcase": false, "constructor": false}, {"identifier": "keep", "parameters": "(Function<T, RetType> fn)", "modifiers": "public", "return": "FunctionalIterator<RetType>", "signature": "FunctionalIterator<RetType> keep(Function<T, RetType> fn)", "full_signature": "public FunctionalIterator<RetType> keep(Function<T, RetType> fn)", "class_method_signature": "FunctionalIterator.keep(Function<T, RetType> fn)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<T> pred)", "modifiers": "public", "return": "FunctionalIterator<T>", "signature": "FunctionalIterator<T> filter(Predicate<T> pred)", "full_signature": "public FunctionalIterator<T> filter(Predicate<T> pred)", "class_method_signature": "FunctionalIterator.filter(Predicate<T> pred)", "testcase": false, "constructor": false}, {"identifier": "drop", "parameters": "(int numToDrop)", "modifiers": "public", "return": "FunctionalIterator<T>", "signature": "FunctionalIterator<T> drop(int numToDrop)", "full_signature": "public FunctionalIterator<T> drop(int numToDrop)", "class_method_signature": "FunctionalIterator.drop(int numToDrop)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/druid/java/util/common/guava/FunctionalIterator.java"}, "focal_method": {"identifier": "transform", "parameters": "(Function<T, RetType> fn)", "modifiers": "public", "return": "FunctionalIterator<RetType>", "body": "public <RetType> FunctionalIterator<RetType> transform(Function<T, RetType> fn)\n  {\n    return new FunctionalIterator<>(Iterators.transform(delegate, fn));\n  }", "signature": "FunctionalIterator<RetType> transform(Function<T, RetType> fn)", "full_signature": "public FunctionalIterator<RetType> transform(Function<T, RetType> fn)", "class_method_signature": "FunctionalIterator.transform(Function<T, RetType> fn)", "testcase": false, "constructor": false, "invocations": ["transform"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}