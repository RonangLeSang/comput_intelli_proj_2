{"test_class": {"identifier": "StringGroupByColumnSelectorStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Int2ObjectMap<String> DICTIONARY = new Int2ObjectArrayMap<>(\n      new int[] {0, 1, 2},\n      new String[] {\"A\", \"F1\", \"D\"}\n  );", "modifier": "private static final", "type": "Int2ObjectMap<String>", "declarator": "DICTIONARY = new Int2ObjectArrayMap<>(\n      new int[] {0, 1, 2},\n      new String[] {\"A\", \"F1\", \"D\"}\n  )", "var_name": "DICTIONARY"}, {"original_string": "private final ByteBuffer lhsBuffer = ByteBuffer.allocate(4);", "modifier": "private final", "type": "ByteBuffer", "declarator": "lhsBuffer = ByteBuffer.allocate(4)", "var_name": "lhsBuffer"}, {"original_string": "private final ByteBuffer rhsBuffer = ByteBuffer.allocate(4);", "modifier": "private final", "type": "ByteBuffer", "declarator": "rhsBuffer = ByteBuffer.allocate(4)", "var_name": "rhsBuffer"}, {"original_string": "@Mock\n  private ColumnCapabilities capabilities;", "modifier": "@Mock\n  private", "type": "ColumnCapabilities", "declarator": "capabilities", "var_name": "capabilities"}, {"original_string": "private final IntFunction<String> dictionaryLookup = DICTIONARY::get;", "modifier": "private final", "type": "IntFunction<String>", "declarator": "dictionaryLookup = DICTIONARY::get", "var_name": "dictionaryLookup"}, {"original_string": "private StringGroupByColumnSelectorStrategy target;", "modifier": "private", "type": "StringGroupByColumnSelectorStrategy", "declarator": "target", "var_name": "target"}], "file": "processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/column/StringGroupByColumnSelectorStrategyTest.java"}, "test_case": {"identifier": "testBufferComparatorCannotCompareIntsAndNullStringComparatorShouldUseLexicographicComparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBufferComparatorCannotCompareIntsAndNullStringComparatorShouldUseLexicographicComparator()\n  {\n    Mockito.when(capabilities.areDictionaryValuesSorted()).thenReturn(ColumnCapabilities.Capable.FALSE);\n    // The comparator is not using the short circuit so it isn't comparing indexes.\n    Grouper.BufferComparator comparator = target.bufferComparator(0, null);\n    Assert.assertTrue(comparator.compare(lhsBuffer, rhsBuffer, 0, 0) > 0);\n    Assert.assertTrue(comparator.compare(rhsBuffer, lhsBuffer, 0, 0) < 0);\n  }", "signature": "void testBufferComparatorCannotCompareIntsAndNullStringComparatorShouldUseLexicographicComparator()", "full_signature": "@Test public void testBufferComparatorCannotCompareIntsAndNullStringComparatorShouldUseLexicographicComparator()", "class_method_signature": "StringGroupByColumnSelectorStrategyTest.testBufferComparatorCannotCompareIntsAndNullStringComparatorShouldUseLexicographicComparator()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "areDictionaryValuesSorted", "bufferComparator", "assertTrue", "compare", "assertTrue", "compare"]}, "focal_class": {"identifier": "StringGroupByColumnSelectorStrategy", "superclass": "", "interfaces": "implements GroupByColumnSelectorStrategy", "fields": [{"original_string": "@Nullable\n  private final ColumnCapabilities capabilities;", "modifier": "@Nullable\n  private final", "type": "ColumnCapabilities", "declarator": "capabilities", "var_name": "capabilities"}, {"original_string": "@Nullable\n  private final IntFunction<String> dictionaryLookup;", "modifier": "@Nullable\n  private final", "type": "IntFunction<String>", "declarator": "dictionaryLookup", "var_name": "dictionaryLookup"}], "methods": [{"identifier": "StringGroupByColumnSelectorStrategy", "parameters": "(IntFunction<String> dictionaryLookup, ColumnCapabilities capabilities)", "modifiers": "public", "return": "", "signature": " StringGroupByColumnSelectorStrategy(IntFunction<String> dictionaryLookup, ColumnCapabilities capabilities)", "full_signature": "public  StringGroupByColumnSelectorStrategy(IntFunction<String> dictionaryLookup, ColumnCapabilities capabilities)", "class_method_signature": "StringGroupByColumnSelectorStrategy.StringGroupByColumnSelectorStrategy(IntFunction<String> dictionaryLookup, ColumnCapabilities capabilities)", "testcase": false, "constructor": true}, {"identifier": "getGroupingKeySize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGroupingKeySize()", "full_signature": "@Override public int getGroupingKeySize()", "class_method_signature": "StringGroupByColumnSelectorStrategy.getGroupingKeySize()", "testcase": false, "constructor": false}, {"identifier": "processValueFromGroupingKey", "parameters": "(\n      GroupByColumnSelectorPlus selectorPlus,\n      ByteBuffer key,\n      ResultRow resultRow,\n      int keyBufferPosition\n  )", "modifiers": "@Override public", "return": "void", "signature": "void processValueFromGroupingKey(\n      GroupByColumnSelectorPlus selectorPlus,\n      ByteBuffer key,\n      ResultRow resultRow,\n      int keyBufferPosition\n  )", "full_signature": "@Override public void processValueFromGroupingKey(\n      GroupByColumnSelectorPlus selectorPlus,\n      ByteBuffer key,\n      ResultRow resultRow,\n      int keyBufferPosition\n  )", "class_method_signature": "StringGroupByColumnSelectorStrategy.processValueFromGroupingKey(\n      GroupByColumnSelectorPlus selectorPlus,\n      ByteBuffer key,\n      ResultRow resultRow,\n      int keyBufferPosition\n  )", "testcase": false, "constructor": false}, {"identifier": "initColumnValues", "parameters": "(ColumnValueSelector selector, int columnIndex, Object[] valuess)", "modifiers": "@Override public", "return": "void", "signature": "void initColumnValues(ColumnValueSelector selector, int columnIndex, Object[] valuess)", "full_signature": "@Override public void initColumnValues(ColumnValueSelector selector, int columnIndex, Object[] valuess)", "class_method_signature": "StringGroupByColumnSelectorStrategy.initColumnValues(ColumnValueSelector selector, int columnIndex, Object[] valuess)", "testcase": false, "constructor": false}, {"identifier": "getOnlyValue", "parameters": "(ColumnValueSelector selector)", "modifiers": "@Override public", "return": "Object", "signature": "Object getOnlyValue(ColumnValueSelector selector)", "full_signature": "@Override public Object getOnlyValue(ColumnValueSelector selector)", "class_method_signature": "StringGroupByColumnSelectorStrategy.getOnlyValue(ColumnValueSelector selector)", "testcase": false, "constructor": false}, {"identifier": "writeToKeyBuffer", "parameters": "(int keyBufferPosition, Object obj, ByteBuffer keyBuffer)", "modifiers": "@Override public", "return": "void", "signature": "void writeToKeyBuffer(int keyBufferPosition, Object obj, ByteBuffer keyBuffer)", "full_signature": "@Override public void writeToKeyBuffer(int keyBufferPosition, Object obj, ByteBuffer keyBuffer)", "class_method_signature": "StringGroupByColumnSelectorStrategy.writeToKeyBuffer(int keyBufferPosition, Object obj, ByteBuffer keyBuffer)", "testcase": false, "constructor": false}, {"identifier": "initGroupingKeyColumnValue", "parameters": "(\n      int keyBufferPosition,\n      int columnIndex,\n      Object rowObj,\n      ByteBuffer keyBuffer,\n      int[] stack\n  )", "modifiers": "@Override public", "return": "void", "signature": "void initGroupingKeyColumnValue(\n      int keyBufferPosition,\n      int columnIndex,\n      Object rowObj,\n      ByteBuffer keyBuffer,\n      int[] stack\n  )", "full_signature": "@Override public void initGroupingKeyColumnValue(\n      int keyBufferPosition,\n      int columnIndex,\n      Object rowObj,\n      ByteBuffer keyBuffer,\n      int[] stack\n  )", "class_method_signature": "StringGroupByColumnSelectorStrategy.initGroupingKeyColumnValue(\n      int keyBufferPosition,\n      int columnIndex,\n      Object rowObj,\n      ByteBuffer keyBuffer,\n      int[] stack\n  )", "testcase": false, "constructor": false}, {"identifier": "checkRowIndexAndAddValueToGroupingKey", "parameters": "(\n      int keyBufferPosition,\n      Object rowObj,\n      int rowValIdx,\n      ByteBuffer keyBuffer\n  )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkRowIndexAndAddValueToGroupingKey(\n      int keyBufferPosition,\n      Object rowObj,\n      int rowValIdx,\n      ByteBuffer keyBuffer\n  )", "full_signature": "@Override public boolean checkRowIndexAndAddValueToGroupingKey(\n      int keyBufferPosition,\n      Object rowObj,\n      int rowValIdx,\n      ByteBuffer keyBuffer\n  )", "class_method_signature": "StringGroupByColumnSelectorStrategy.checkRowIndexAndAddValueToGroupingKey(\n      int keyBufferPosition,\n      Object rowObj,\n      int rowValIdx,\n      ByteBuffer keyBuffer\n  )", "testcase": false, "constructor": false}, {"identifier": "initializeGroupingKeyV2Dimension", "parameters": "(\n      final IndexedInts values,\n      final int rowSize,\n      final ByteBuffer keyBuffer,\n      final int keyBufferPosition\n  )", "modifiers": "private", "return": "void", "signature": "void initializeGroupingKeyV2Dimension(\n      final IndexedInts values,\n      final int rowSize,\n      final ByteBuffer keyBuffer,\n      final int keyBufferPosition\n  )", "full_signature": "private void initializeGroupingKeyV2Dimension(\n      final IndexedInts values,\n      final int rowSize,\n      final ByteBuffer keyBuffer,\n      final int keyBufferPosition\n  )", "class_method_signature": "StringGroupByColumnSelectorStrategy.initializeGroupingKeyV2Dimension(\n      final IndexedInts values,\n      final int rowSize,\n      final ByteBuffer keyBuffer,\n      final int keyBufferPosition\n  )", "testcase": false, "constructor": false}, {"identifier": "bufferComparator", "parameters": "(int keyBufferPosition, @Nullable StringComparator stringComparator)", "modifiers": "@Override public", "return": "Grouper.BufferComparator", "signature": "Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)", "full_signature": "@Override public Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)", "class_method_signature": "StringGroupByColumnSelectorStrategy.bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/column/StringGroupByColumnSelectorStrategy.java"}, "focal_method": {"identifier": "bufferComparator", "parameters": "(int keyBufferPosition, @Nullable StringComparator stringComparator)", "modifiers": "@Override public", "return": "Grouper.BufferComparator", "body": "@Override\n  public Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)\n  {\n    final boolean canCompareInts =\n        capabilities != null &&\n        capabilities.hasBitmapIndexes() &&\n        capabilities.areDictionaryValuesSorted().and(capabilities.areDictionaryValuesUnique()).isTrue();\n    final StringComparator comparator = stringComparator == null ? StringComparators.LEXICOGRAPHIC : stringComparator;\n    if (canCompareInts && StringComparators.LEXICOGRAPHIC.equals(comparator)) {\n      return (lhsBuffer, rhsBuffer, lhsPosition, rhsPosition) -> Integer.compare(\n          lhsBuffer.getInt(lhsPosition + keyBufferPosition),\n          rhsBuffer.getInt(rhsPosition + keyBufferPosition)\n      );\n    } else {\n      Preconditions.checkState(dictionaryLookup != null, \"null dictionary lookup\");\n      return (lhsBuffer, rhsBuffer, lhsPosition, rhsPosition) -> {\n        String lhsStr = dictionaryLookup.apply(lhsBuffer.getInt(lhsPosition + keyBufferPosition));\n        String rhsStr = dictionaryLookup.apply(rhsBuffer.getInt(rhsPosition + keyBufferPosition));\n        return comparator.compare(lhsStr, rhsStr);\n      };\n    }\n  }", "signature": "Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)", "full_signature": "@Override public Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)", "class_method_signature": "StringGroupByColumnSelectorStrategy.bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)", "testcase": false, "constructor": false, "invocations": ["hasBitmapIndexes", "isTrue", "and", "areDictionaryValuesSorted", "areDictionaryValuesUnique", "equals", "compare", "getInt", "getInt", "checkState", "apply", "getInt", "apply", "getInt", "compare"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}