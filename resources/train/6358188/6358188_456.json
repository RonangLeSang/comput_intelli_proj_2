{"test_class": {"identifier": "BucketExtractionFnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.0000001;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.0000001", "var_name": "DELTA"}], "file": "processing/src/test/java/org/apache/druid/query/extraction/BucketExtractionFnTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApply()\n  {\n    BucketExtractionFn extractionFn1 = new BucketExtractionFn(100.0, 0.5);\n    Assert.assertEquals(\"1200.5\", extractionFn1.apply((Object) \"1234.99\"));\n    Assert.assertEquals(\"1200.5\", extractionFn1.apply(\"1234.99\"));\n    Assert.assertEquals(\"0.5\", extractionFn1.apply(\"1\"));\n    Assert.assertEquals(\"0.5\", extractionFn1.apply(\"100\"));\n    Assert.assertEquals(\"500.5\", extractionFn1.apply(501));\n    Assert.assertEquals(\"-399.5\", extractionFn1.apply(\"-325\"));\n    Assert.assertEquals(\"2400.5\", extractionFn1.apply(\"2.42e3\"));\n    Assert.assertEquals(\"-99.5\", extractionFn1.apply(\"1.2e-1\"));\n    Assert.assertEquals(null, extractionFn1.apply(\"should be null\"));\n    Assert.assertEquals(null, extractionFn1.apply(\"\"));\n\n    BucketExtractionFn extractionFn2 = new BucketExtractionFn(3.0, 2.0);\n    Assert.assertEquals(\"2\", extractionFn2.apply(\"2\"));\n    Assert.assertEquals(\"2\", extractionFn2.apply(\"3\"));\n    Assert.assertEquals(\"2\", extractionFn2.apply(\"4.22\"));\n    Assert.assertEquals(\"-10\", extractionFn2.apply(\"-8\"));\n    Assert.assertEquals(\"71\", extractionFn2.apply(\"7.1e1\"));\n  }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "BucketExtractionFnTest.testApply()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply"]}, "focal_class": {"identifier": "BucketExtractionFn", "superclass": "", "interfaces": "implements ExtractionFn", "fields": [{"original_string": "private final double size;", "modifier": "private final", "type": "double", "declarator": "size", "var_name": "size"}, {"original_string": "private final double offset;", "modifier": "private final", "type": "double", "declarator": "offset", "var_name": "offset"}], "methods": [{"identifier": "BucketExtractionFn", "parameters": "(\n      @JsonProperty(\"size\") @Nullable Double size,\n      @JsonProperty(\"offset\") @Nullable Double offset\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " BucketExtractionFn(\n      @JsonProperty(\"size\") @Nullable Double size,\n      @JsonProperty(\"offset\") @Nullable Double offset\n  )", "full_signature": "@JsonCreator public  BucketExtractionFn(\n      @JsonProperty(\"size\") @Nullable Double size,\n      @JsonProperty(\"offset\") @Nullable Double offset\n  )", "class_method_signature": "BucketExtractionFn.BucketExtractionFn(\n      @JsonProperty(\"size\") @Nullable Double size,\n      @JsonProperty(\"offset\") @Nullable Double offset\n  )", "testcase": false, "constructor": true}, {"identifier": "getSize", "parameters": "()", "modifiers": "@JsonProperty public", "return": "double", "signature": "double getSize()", "full_signature": "@JsonProperty public double getSize()", "class_method_signature": "BucketExtractionFn.getSize()", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "()", "modifiers": "@JsonProperty public", "return": "double", "signature": "double getOffset()", "full_signature": "@JsonProperty public double getOffset()", "class_method_signature": "BucketExtractionFn.getOffset()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(@Nullable Object value)", "modifiers": "@Override @Nullable public", "return": "String", "signature": "String apply(@Nullable Object value)", "full_signature": "@Override @Nullable public String apply(@Nullable Object value)", "class_method_signature": "BucketExtractionFn.apply(@Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(@Nullable String value)", "modifiers": "@Override @Nullable public", "return": "String", "signature": "String apply(@Nullable String value)", "full_signature": "@Override @Nullable public String apply(@Nullable String value)", "class_method_signature": "BucketExtractionFn.apply(@Nullable String value)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(long value)", "modifiers": "@Override public", "return": "String", "signature": "String apply(long value)", "full_signature": "@Override public String apply(long value)", "class_method_signature": "BucketExtractionFn.apply(long value)", "testcase": false, "constructor": false}, {"identifier": "bucket", "parameters": "(double value)", "modifiers": "private", "return": "String", "signature": "String bucket(double value)", "full_signature": "private String bucket(double value)", "class_method_signature": "BucketExtractionFn.bucket(double value)", "testcase": false, "constructor": false}, {"identifier": "preservesOrdering", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preservesOrdering()", "full_signature": "@Override public boolean preservesOrdering()", "class_method_signature": "BucketExtractionFn.preservesOrdering()", "testcase": false, "constructor": false}, {"identifier": "getExtractionType", "parameters": "()", "modifiers": "@Override public", "return": "ExtractionType", "signature": "ExtractionType getExtractionType()", "full_signature": "@Override public ExtractionType getExtractionType()", "class_method_signature": "BucketExtractionFn.getExtractionType()", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCacheKey()", "full_signature": "@Override public byte[] getCacheKey()", "class_method_signature": "BucketExtractionFn.getCacheKey()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "BucketExtractionFn.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BucketExtractionFn.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BucketExtractionFn.toString()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/query/extraction/BucketExtractionFn.java"}, "focal_method": {"identifier": "apply", "parameters": "(@Nullable Object value)", "modifiers": "@Override @Nullable public", "return": "String", "body": "@Override\n  @Nullable\n  public String apply(@Nullable Object value)\n  {\n    if (value == null) {\n      return null;\n    }\n\n    if (value instanceof Number) {\n      return bucket(((Number) value).doubleValue());\n    } else if (value instanceof String) {\n      return apply((String) value);\n    }\n    return null;\n  }", "signature": "String apply(@Nullable Object value)", "full_signature": "@Override @Nullable public String apply(@Nullable Object value)", "class_method_signature": "BucketExtractionFn.apply(@Nullable Object value)", "testcase": false, "constructor": false, "invocations": ["bucket", "doubleValue", "apply"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}