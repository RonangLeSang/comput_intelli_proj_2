{"test_class": {"identifier": "PeriodLoadRuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DataSegment.Builder BUILDER = DataSegment\n      .builder()\n      .dataSource(\"test\")\n      .version(DateTimes.nowUtc().toString())\n      .shardSpec(NoneShardSpec.instance())\n      .size(0);", "modifier": "private static final", "type": "DataSegment.Builder", "declarator": "BUILDER = DataSegment\n      .builder()\n      .dataSource(\"test\")\n      .version(DateTimes.nowUtc().toString())\n      .shardSpec(NoneShardSpec.instance())\n      .size(0)", "var_name": "BUILDER"}], "file": "server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodLoadRuleTest.java"}, "test_case": {"identifier": "testIncludeFuture", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIncludeFuture()\n  {\n    DateTime now = DateTimes.of(\"2012-12-31T01:00:00\");\n    PeriodLoadRule includeFutureRule = new PeriodLoadRule(\n        new Period(\"P2D\"),\n        true,\n        ImmutableMap.of(\"\", 0)\n    );\n    PeriodLoadRule notIncludeFutureRule = new PeriodLoadRule(\n        new Period(\"P2D\"),\n        false,\n        ImmutableMap.of(\"\", 0)\n    );\n\n    Assert.assertTrue(\n        includeFutureRule.appliesTo(\n            BUILDER.interval(new Interval(now.plusDays(1), now.plusDays(2))).build(),\n            now\n        )\n    );\n    Assert.assertFalse(\n        notIncludeFutureRule.appliesTo(\n            BUILDER.interval(new Interval(now.plusDays(1), now.plusDays(2))).build(),\n            now\n        )\n    );\n  }", "signature": "void testIncludeFuture()", "full_signature": "@Test public void testIncludeFuture()", "class_method_signature": "PeriodLoadRuleTest.testIncludeFuture()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "assertTrue", "appliesTo", "build", "interval", "plusDays", "plusDays", "assertFalse", "appliesTo", "build", "interval", "plusDays", "plusDays"]}, "focal_class": {"identifier": "PeriodLoadRule", "superclass": "extends LoadRule", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(PeriodLoadRule.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(PeriodLoadRule.class)", "var_name": "log"}, {"original_string": "static final boolean DEFAULT_INCLUDE_FUTURE = true;", "modifier": "static final", "type": "boolean", "declarator": "DEFAULT_INCLUDE_FUTURE = true", "var_name": "DEFAULT_INCLUDE_FUTURE"}, {"original_string": "private final Period period;", "modifier": "private final", "type": "Period", "declarator": "period", "var_name": "period"}, {"original_string": "private final boolean includeFuture;", "modifier": "private final", "type": "boolean", "declarator": "includeFuture", "var_name": "includeFuture"}, {"original_string": "private final Map<String, Integer> tieredReplicants;", "modifier": "private final", "type": "Map<String, Integer>", "declarator": "tieredReplicants", "var_name": "tieredReplicants"}], "methods": [{"identifier": "PeriodLoadRule", "parameters": "(\n      @JsonProperty(\"period\") Period period,\n      @JsonProperty(\"includeFuture\") Boolean includeFuture,\n      @JsonProperty(\"tieredReplicants\") Map<String, Integer> tieredReplicants\n  )", "modifiers": "@JsonCreator public", "return": "", "signature": " PeriodLoadRule(\n      @JsonProperty(\"period\") Period period,\n      @JsonProperty(\"includeFuture\") Boolean includeFuture,\n      @JsonProperty(\"tieredReplicants\") Map<String, Integer> tieredReplicants\n  )", "full_signature": "@JsonCreator public  PeriodLoadRule(\n      @JsonProperty(\"period\") Period period,\n      @JsonProperty(\"includeFuture\") Boolean includeFuture,\n      @JsonProperty(\"tieredReplicants\") Map<String, Integer> tieredReplicants\n  )", "class_method_signature": "PeriodLoadRule.PeriodLoadRule(\n      @JsonProperty(\"period\") Period period,\n      @JsonProperty(\"includeFuture\") Boolean includeFuture,\n      @JsonProperty(\"tieredReplicants\") Map<String, Integer> tieredReplicants\n  )", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override @JsonProperty public", "return": "String", "signature": "String getType()", "full_signature": "@Override @JsonProperty public String getType()", "class_method_signature": "PeriodLoadRule.getType()", "testcase": false, "constructor": false}, {"identifier": "getPeriod", "parameters": "()", "modifiers": "@JsonProperty public", "return": "Period", "signature": "Period getPeriod()", "full_signature": "@JsonProperty public Period getPeriod()", "class_method_signature": "PeriodLoadRule.getPeriod()", "testcase": false, "constructor": false}, {"identifier": "isIncludeFuture", "parameters": "()", "modifiers": "@JsonProperty public", "return": "boolean", "signature": "boolean isIncludeFuture()", "full_signature": "@JsonProperty public boolean isIncludeFuture()", "class_method_signature": "PeriodLoadRule.isIncludeFuture()", "testcase": false, "constructor": false}, {"identifier": "getTieredReplicants", "parameters": "()", "modifiers": "@Override @JsonProperty public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getTieredReplicants()", "full_signature": "@Override @JsonProperty public Map<String, Integer> getTieredReplicants()", "class_method_signature": "PeriodLoadRule.getTieredReplicants()", "testcase": false, "constructor": false}, {"identifier": "getNumReplicants", "parameters": "(String tier)", "modifiers": "@Override public", "return": "int", "signature": "int getNumReplicants(String tier)", "full_signature": "@Override public int getNumReplicants(String tier)", "class_method_signature": "PeriodLoadRule.getNumReplicants(String tier)", "testcase": false, "constructor": false}, {"identifier": "appliesTo", "parameters": "(DataSegment segment, DateTime referenceTimestamp)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appliesTo(DataSegment segment, DateTime referenceTimestamp)", "full_signature": "@Override public boolean appliesTo(DataSegment segment, DateTime referenceTimestamp)", "class_method_signature": "PeriodLoadRule.appliesTo(DataSegment segment, DateTime referenceTimestamp)", "testcase": false, "constructor": false}, {"identifier": "appliesTo", "parameters": "(Interval interval, DateTime referenceTimestamp)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appliesTo(Interval interval, DateTime referenceTimestamp)", "full_signature": "@Override public boolean appliesTo(Interval interval, DateTime referenceTimestamp)", "class_method_signature": "PeriodLoadRule.appliesTo(Interval interval, DateTime referenceTimestamp)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/coordinator/rules/PeriodLoadRule.java"}, "focal_method": {"identifier": "appliesTo", "parameters": "(DataSegment segment, DateTime referenceTimestamp)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean appliesTo(DataSegment segment, DateTime referenceTimestamp)\n  {\n    return appliesTo(segment.getInterval(), referenceTimestamp);\n  }", "signature": "boolean appliesTo(DataSegment segment, DateTime referenceTimestamp)", "full_signature": "@Override public boolean appliesTo(DataSegment segment, DateTime referenceTimestamp)", "class_method_signature": "PeriodLoadRule.appliesTo(DataSegment segment, DateTime referenceTimestamp)", "testcase": false, "constructor": false, "invocations": ["appliesTo", "getInterval"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}