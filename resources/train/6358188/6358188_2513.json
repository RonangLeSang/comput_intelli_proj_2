{"test_class": {"identifier": "ClientInfoResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KEY_DIMENSIONS = \"dimensions\";", "modifier": "private static final", "type": "String", "declarator": "KEY_DIMENSIONS = \"dimensions\"", "var_name": "KEY_DIMENSIONS"}, {"original_string": "private static final String KEY_METRICS = \"metrics\";", "modifier": "private static final", "type": "String", "declarator": "KEY_METRICS = \"metrics\"", "var_name": "KEY_METRICS"}, {"original_string": "private static final DateTime FIXED_TEST_TIME = new DateTime(2015, 9, 14, 0, 0, ISOChronology.getInstanceUTC());", "modifier": "private static final", "type": "DateTime", "declarator": "FIXED_TEST_TIME = new DateTime(2015, 9, 14, 0, 0, ISOChronology.getInstanceUTC())", "var_name": "FIXED_TEST_TIME"}, {"original_string": "private final String dataSource = \"test-data-source\";", "modifier": "private final", "type": "String", "declarator": "dataSource = \"test-data-source\"", "var_name": "dataSource"}, {"original_string": "private FilteredServerInventoryView serverInventoryView;", "modifier": "private", "type": "FilteredServerInventoryView", "declarator": "serverInventoryView", "var_name": "serverInventoryView"}, {"original_string": "private TimelineServerView timelineServerView;", "modifier": "private", "type": "TimelineServerView", "declarator": "timelineServerView", "var_name": "timelineServerView"}, {"original_string": "private ClientInfoResource resource;", "modifier": "private", "type": "ClientInfoResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/org/apache/druid/server/ClientInfoResourceTest.java"}, "test_case": {"identifier": "testGetDatasourceNonFullWithInterval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetDatasourceNonFullWithInterval()\n  {\n    Map<String, Object> actual = resource.getDatasource(dataSource, \"1975/2015\", null);\n    Map<String, Object> expected = ImmutableMap.of(\n        KEY_DIMENSIONS, ImmutableSet.of(\"d1\", \"d2\"),\n        KEY_METRICS, ImmutableSet.of(\"m1\", \"m2\")\n    );\n    EasyMock.verify(serverInventoryView);\n    Assert.assertEquals(expected, actual);\n  }", "signature": "void testGetDatasourceNonFullWithInterval()", "full_signature": "@Test public void testGetDatasourceNonFullWithInterval()", "class_method_signature": "ClientInfoResourceTest.testGetDatasourceNonFullWithInterval()", "testcase": true, "constructor": false, "invocations": ["getDatasource", "of", "of", "of", "verify", "assertEquals"]}, "focal_class": {"identifier": "ClientInfoResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = new Logger(ClientInfoResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = new Logger(ClientInfoResource.class)", "var_name": "log"}, {"original_string": "private static final String KEY_DIMENSIONS = \"dimensions\";", "modifier": "private static final", "type": "String", "declarator": "KEY_DIMENSIONS = \"dimensions\"", "var_name": "KEY_DIMENSIONS"}, {"original_string": "private static final String KEY_METRICS = \"metrics\";", "modifier": "private static final", "type": "String", "declarator": "KEY_METRICS = \"metrics\"", "var_name": "KEY_METRICS"}, {"original_string": "private FilteredServerInventoryView serverInventoryView;", "modifier": "private", "type": "FilteredServerInventoryView", "declarator": "serverInventoryView", "var_name": "serverInventoryView"}, {"original_string": "private TimelineServerView timelineServerView;", "modifier": "private", "type": "TimelineServerView", "declarator": "timelineServerView", "var_name": "timelineServerView"}, {"original_string": "private SegmentMetadataQueryConfig segmentMetadataQueryConfig;", "modifier": "private", "type": "SegmentMetadataQueryConfig", "declarator": "segmentMetadataQueryConfig", "var_name": "segmentMetadataQueryConfig"}, {"original_string": "private final AuthConfig authConfig;", "modifier": "private final", "type": "AuthConfig", "declarator": "authConfig", "var_name": "authConfig"}, {"original_string": "private final AuthorizerMapper authorizerMapper;", "modifier": "private final", "type": "AuthorizerMapper", "declarator": "authorizerMapper", "var_name": "authorizerMapper"}], "methods": [{"identifier": "ClientInfoResource", "parameters": "(\n      FilteredServerInventoryView serverInventoryView,\n      TimelineServerView timelineServerView,\n      SegmentMetadataQueryConfig segmentMetadataQueryConfig,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "modifiers": "@Inject public", "return": "", "signature": " ClientInfoResource(\n      FilteredServerInventoryView serverInventoryView,\n      TimelineServerView timelineServerView,\n      SegmentMetadataQueryConfig segmentMetadataQueryConfig,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "full_signature": "@Inject public  ClientInfoResource(\n      FilteredServerInventoryView serverInventoryView,\n      TimelineServerView timelineServerView,\n      SegmentMetadataQueryConfig segmentMetadataQueryConfig,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "class_method_signature": "ClientInfoResource.ClientInfoResource(\n      FilteredServerInventoryView serverInventoryView,\n      TimelineServerView timelineServerView,\n      SegmentMetadataQueryConfig segmentMetadataQueryConfig,\n      AuthConfig authConfig,\n      AuthorizerMapper authorizerMapper\n  )", "testcase": false, "constructor": true}, {"identifier": "getDataSources", "parameters": "(@Context final HttpServletRequest request)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) public", "return": "Iterable<String>", "signature": "Iterable<String> getDataSources(@Context final HttpServletRequest request)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) public Iterable<String> getDataSources(@Context final HttpServletRequest request)", "class_method_signature": "ClientInfoResource.getDataSources(@Context final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getAllDataSources", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAllDataSources()", "full_signature": "private Set<String> getAllDataSources()", "class_method_signature": "ClientInfoResource.getAllDataSources()", "testcase": false, "constructor": false}, {"identifier": "getDatasource", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Map<String, Object>", "signature": "Map<String, Object> getDatasource(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Map<String, Object> getDatasource(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "class_method_signature": "ClientInfoResource.getDatasource(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "testcase": false, "constructor": false}, {"identifier": "getDataSourceDimensions", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "modifiers": "@Deprecated @GET @Path(\"/{dataSourceName}/dimensions\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Iterable<String>", "signature": "Iterable<String> getDataSourceDimensions(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "full_signature": "@Deprecated @GET @Path(\"/{dataSourceName}/dimensions\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Iterable<String> getDataSourceDimensions(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "class_method_signature": "ClientInfoResource.getDataSourceDimensions(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "testcase": false, "constructor": false}, {"identifier": "getDataSourceMetrics", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "modifiers": "@Deprecated @GET @Path(\"/{dataSourceName}/metrics\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Iterable<String>", "signature": "Iterable<String> getDataSourceMetrics(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "full_signature": "@Deprecated @GET @Path(\"/{dataSourceName}/metrics\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Iterable<String> getDataSourceMetrics(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "class_method_signature": "ClientInfoResource.getDataSourceMetrics(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval\n  )", "testcase": false, "constructor": false}, {"identifier": "getAllSegmentsForDataSource", "parameters": "(String dataSourceName)", "modifiers": "private", "return": "Set<DataSegment>", "signature": "Set<DataSegment> getAllSegmentsForDataSource(String dataSourceName)", "full_signature": "private Set<DataSegment> getAllSegmentsForDataSource(String dataSourceName)", "class_method_signature": "ClientInfoResource.getAllSegmentsForDataSource(String dataSourceName)", "testcase": false, "constructor": false}, {"identifier": "getQueryTargets", "parameters": "(\n      @PathParam(\"dataSourceName\") String datasource,\n      @QueryParam(\"intervals\") String intervals,\n      @QueryParam(\"numCandidates\") @DefaultValue(\"-1\") int numCandidates,\n      @Context final HttpServletRequest req\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}/candidates\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Iterable<LocatedSegmentDescriptor>", "signature": "Iterable<LocatedSegmentDescriptor> getQueryTargets(\n      @PathParam(\"dataSourceName\") String datasource,\n      @QueryParam(\"intervals\") String intervals,\n      @QueryParam(\"numCandidates\") @DefaultValue(\"-1\") int numCandidates,\n      @Context final HttpServletRequest req\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}/candidates\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Iterable<LocatedSegmentDescriptor> getQueryTargets(\n      @PathParam(\"dataSourceName\") String datasource,\n      @QueryParam(\"intervals\") String intervals,\n      @QueryParam(\"numCandidates\") @DefaultValue(\"-1\") int numCandidates,\n      @Context final HttpServletRequest req\n  )", "class_method_signature": "ClientInfoResource.getQueryTargets(\n      @PathParam(\"dataSourceName\") String datasource,\n      @QueryParam(\"intervals\") String intervals,\n      @QueryParam(\"numCandidates\") @DefaultValue(\"-1\") int numCandidates,\n      @Context final HttpServletRequest req\n  )", "testcase": false, "constructor": false}, {"identifier": "getCurrentTime", "parameters": "()", "modifiers": "protected", "return": "DateTime", "signature": "DateTime getCurrentTime()", "full_signature": "protected DateTime getCurrentTime()", "class_method_signature": "ClientInfoResource.getCurrentTime()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/ClientInfoResource.java"}, "focal_method": {"identifier": "getDatasource", "parameters": "(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "modifiers": "@GET @Path(\"/{dataSourceName}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public", "return": "Map<String, Object>", "body": "@GET\n  @Path(\"/{dataSourceName}\")\n  @Produces(MediaType.APPLICATION_JSON)\n  @ResourceFilters(DatasourceResourceFilter.class)\n  public Map<String, Object> getDatasource(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )\n  {\n    if (full == null) {\n      return ImmutableMap.of(\n          KEY_DIMENSIONS, getDataSourceDimensions(dataSourceName, interval),\n          KEY_METRICS, getDataSourceMetrics(dataSourceName, interval)\n      );\n    }\n\n    Interval theInterval;\n    if (interval == null || interval.isEmpty()) {\n      DateTime now = getCurrentTime();\n      theInterval = new Interval(segmentMetadataQueryConfig.getDefaultHistory(), now);\n    } else {\n      theInterval = Intervals.of(interval);\n    }\n\n    final Optional<? extends TimelineLookup<String, ServerSelector>> maybeTimeline =\n        timelineServerView.getTimeline(DataSourceAnalysis.forDataSource(new TableDataSource(dataSourceName)));\n    final Optional<Iterable<TimelineObjectHolder<String, ServerSelector>>> maybeServersLookup =\n        maybeTimeline.map(timeline -> timeline.lookup(theInterval));\n    if (!maybeServersLookup.isPresent() || Iterables.isEmpty(maybeServersLookup.get())) {\n      return Collections.emptyMap();\n    }\n    Map<Interval, Object> servedIntervals = new TreeMap<>(\n        new Comparator<Interval>()\n        {\n          @Override\n          public int compare(Interval o1, Interval o2)\n          {\n            if (o1.equals(o2) || o1.overlaps(o2)) {\n              return 0;\n            } else {\n              return o1.isBefore(o2) ? -1 : 1;\n            }\n          }\n        }\n    );\n\n    for (TimelineObjectHolder<String, ServerSelector> holder : maybeServersLookup.get()) {\n      final Set<Object> dimensions = new HashSet<>();\n      final Set<Object> metrics = new HashSet<>();\n      final PartitionHolder<ServerSelector> partitionHolder = holder.getObject();\n      if (partitionHolder.isComplete()) {\n        for (ServerSelector server : partitionHolder.payloads()) {\n          final DataSegment segment = server.getSegment();\n          dimensions.addAll(segment.getDimensions());\n          metrics.addAll(segment.getMetrics());\n        }\n      }\n\n      servedIntervals.put(\n          holder.getInterval(),\n          ImmutableMap.of(KEY_DIMENSIONS, dimensions, KEY_METRICS, metrics)\n      );\n    }\n\n    //collapse intervals if they abut and have same set of columns\n    Map<String, Object> result = Maps.newLinkedHashMap();\n    Interval curr = null;\n    Map<String, Set<String>> cols = null;\n    for (Map.Entry<Interval, Object> e : servedIntervals.entrySet()) {\n      Interval ival = e.getKey();\n      if (curr != null && curr.abuts(ival) && cols.equals(e.getValue())) {\n        curr = curr.withEnd(ival.getEnd());\n      } else {\n        if (curr != null) {\n          result.put(curr.toString(), cols);\n        }\n        curr = ival;\n        cols = (Map<String, Set<String>>) e.getValue();\n      }\n    }\n    //add the last one in\n    if (curr != null) {\n      result.put(curr.toString(), cols);\n    }\n    return result;\n  }", "signature": "Map<String, Object> getDatasource(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "full_signature": "@GET @Path(\"/{dataSourceName}\") @Produces(MediaType.APPLICATION_JSON) @ResourceFilters(DatasourceResourceFilter.class) public Map<String, Object> getDatasource(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "class_method_signature": "ClientInfoResource.getDatasource(\n      @PathParam(\"dataSourceName\") String dataSourceName,\n      @QueryParam(\"interval\") String interval,\n      @QueryParam(\"full\") String full\n  )", "testcase": false, "constructor": false, "invocations": ["of", "getDataSourceDimensions", "getDataSourceMetrics", "isEmpty", "getCurrentTime", "getDefaultHistory", "of", "getTimeline", "forDataSource", "map", "lookup", "isPresent", "isEmpty", "get", "emptyMap", "equals", "overlaps", "isBefore", "get", "getObject", "isComplete", "payloads", "getSegment", "addAll", "getDimensions", "addAll", "getMetrics", "put", "getInterval", "of", "newLinkedHashMap", "entrySet", "getKey", "abuts", "equals", "getValue", "withEnd", "getEnd", "put", "toString", "getValue", "put", "toString"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}