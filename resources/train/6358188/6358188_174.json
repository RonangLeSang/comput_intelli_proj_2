{"test_class": {"identifier": "ParallelIndexPhaseRunnerTest", "superclass": "extends AbstractParallelIndexSupervisorTaskTest", "interfaces": "", "fields": [{"original_string": "private File inputDir;", "modifier": "private", "type": "File", "declarator": "inputDir", "var_name": "inputDir"}], "file": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexPhaseRunnerTest.java"}, "test_case": {"identifier": "testLargeEstimatedNumSplits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLargeEstimatedNumSplits() throws Exception\n  {\n    final NoopTask task = NoopTask.create();\n    final TaskActionClient actionClient = createActionClient(task);\n    final TaskToolbox toolbox = createTaskToolbox(task, actionClient);\n    final TestPhaseRunner runner = new TestPhaseRunner(\n        toolbox,\n        \"supervisorTaskId\",\n        \"groupId\",\n        AbstractParallelIndexSupervisorTaskTest.DEFAULT_TUNING_CONFIG_FOR_PARALLEL_INDEXING,\n        10,\n        12\n    );\n    Assert.assertEquals(TaskState.SUCCESS, runner.run());\n  }", "signature": "void testLargeEstimatedNumSplits()", "full_signature": "@Test public void testLargeEstimatedNumSplits()", "class_method_signature": "ParallelIndexPhaseRunnerTest.testLargeEstimatedNumSplits()", "testcase": true, "constructor": false, "invocations": ["create", "createActionClient", "createTaskToolbox", "assertEquals", "run"]}, "focal_class": {"identifier": "ParallelIndexPhaseRunner", "superclass": "", "interfaces": "implements ParallelIndexTaskRunner<SubTaskType, SubTaskReportType>", "fields": [{"original_string": "private static final Logger LOG = new Logger(ParallelIndexPhaseRunner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = new Logger(ParallelIndexPhaseRunner.class)", "var_name": "LOG"}, {"original_string": "private final TaskToolbox toolbox;", "modifier": "private final", "type": "TaskToolbox", "declarator": "toolbox", "var_name": "toolbox"}, {"original_string": "private final String taskId;", "modifier": "private final", "type": "String", "declarator": "taskId", "var_name": "taskId"}, {"original_string": "private final String groupId;", "modifier": "private final", "type": "String", "declarator": "groupId", "var_name": "groupId"}, {"original_string": "private final ParallelIndexTuningConfig tuningConfig;", "modifier": "private final", "type": "ParallelIndexTuningConfig", "declarator": "tuningConfig", "var_name": "tuningConfig"}, {"original_string": "private final Map<String, Object> context;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "context", "var_name": "context"}, {"original_string": "private final int maxNumConcurrentSubTasks;", "modifier": "private final", "type": "int", "declarator": "maxNumConcurrentSubTasks", "var_name": "maxNumConcurrentSubTasks"}, {"original_string": "private final BlockingQueue<SubTaskCompleteEvent<SubTaskType>> taskCompleteEvents = new LinkedBlockingDeque<>();", "modifier": "private final", "type": "BlockingQueue<SubTaskCompleteEvent<SubTaskType>>", "declarator": "taskCompleteEvents = new LinkedBlockingDeque<>()", "var_name": "taskCompleteEvents"}, {"original_string": "private final ConcurrentHashMap<String, SubTaskReportType> reportsMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<String, SubTaskReportType>", "declarator": "reportsMap = new ConcurrentHashMap<>()", "var_name": "reportsMap"}, {"original_string": "private volatile boolean subTaskScheduleAndMonitorStopped;", "modifier": "private volatile", "type": "boolean", "declarator": "subTaskScheduleAndMonitorStopped", "var_name": "subTaskScheduleAndMonitorStopped"}, {"original_string": "private volatile TaskMonitor<SubTaskType> taskMonitor;", "modifier": "private volatile", "type": "TaskMonitor<SubTaskType>", "declarator": "taskMonitor", "var_name": "taskMonitor"}, {"original_string": "private int nextSpecId = 0;", "modifier": "private", "type": "int", "declarator": "nextSpecId = 0", "var_name": "nextSpecId"}], "methods": [{"identifier": "ParallelIndexPhaseRunner", "parameters": "(\n      TaskToolbox toolbox,\n      String taskId,\n      String groupId,\n      ParallelIndexTuningConfig tuningConfig,\n      Map<String, Object> context\n  )", "modifiers": "", "return": "", "signature": " ParallelIndexPhaseRunner(\n      TaskToolbox toolbox,\n      String taskId,\n      String groupId,\n      ParallelIndexTuningConfig tuningConfig,\n      Map<String, Object> context\n  )", "full_signature": "  ParallelIndexPhaseRunner(\n      TaskToolbox toolbox,\n      String taskId,\n      String groupId,\n      ParallelIndexTuningConfig tuningConfig,\n      Map<String, Object> context\n  )", "class_method_signature": "ParallelIndexPhaseRunner.ParallelIndexPhaseRunner(\n      TaskToolbox toolbox,\n      String taskId,\n      String groupId,\n      ParallelIndexTuningConfig tuningConfig,\n      Map<String, Object> context\n  )", "testcase": false, "constructor": true}, {"identifier": "subTaskSpecIterator", "parameters": "()", "modifiers": "abstract", "return": "Iterator<SubTaskSpec<SubTaskType>>", "signature": "Iterator<SubTaskSpec<SubTaskType>> subTaskSpecIterator()", "full_signature": "abstract Iterator<SubTaskSpec<SubTaskType>> subTaskSpecIterator()", "class_method_signature": "ParallelIndexPhaseRunner.subTaskSpecIterator()", "testcase": false, "constructor": false}, {"identifier": "estimateTotalNumSubTasks", "parameters": "()", "modifiers": "abstract", "return": "int", "signature": "int estimateTotalNumSubTasks()", "full_signature": "abstract int estimateTotalNumSubTasks()", "class_method_signature": "ParallelIndexPhaseRunner.estimateTotalNumSubTasks()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "TaskState", "signature": "TaskState run()", "full_signature": "@Override public TaskState run()", "class_method_signature": "ParallelIndexPhaseRunner.run()", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "private boolean isRunning()", "class_method_signature": "ParallelIndexPhaseRunner.isRunning()", "testcase": false, "constructor": false}, {"identifier": "submitNewTask", "parameters": "(\n      TaskMonitor<SubTaskType> taskMonitor,\n      SubTaskSpec<SubTaskType> spec\n  )", "modifiers": "private", "return": "void", "signature": "void submitNewTask(\n      TaskMonitor<SubTaskType> taskMonitor,\n      SubTaskSpec<SubTaskType> spec\n  )", "full_signature": "private void submitNewTask(\n      TaskMonitor<SubTaskType> taskMonitor,\n      SubTaskSpec<SubTaskType> spec\n  )", "class_method_signature": "ParallelIndexPhaseRunner.submitNewTask(\n      TaskMonitor<SubTaskType> taskMonitor,\n      SubTaskSpec<SubTaskType> spec\n  )", "testcase": false, "constructor": false}, {"identifier": "stopGracefully", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopGracefully()", "full_signature": "@Override public void stopGracefully()", "class_method_signature": "ParallelIndexPhaseRunner.stopGracefully()", "testcase": false, "constructor": false}, {"identifier": "stopInternal", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopInternal()", "full_signature": "private void stopInternal()", "class_method_signature": "ParallelIndexPhaseRunner.stopInternal()", "testcase": false, "constructor": false}, {"identifier": "collectReport", "parameters": "(SubTaskReportType report)", "modifiers": "@Override public", "return": "void", "signature": "void collectReport(SubTaskReportType report)", "full_signature": "@Override public void collectReport(SubTaskReportType report)", "class_method_signature": "ParallelIndexPhaseRunner.collectReport(SubTaskReportType report)", "testcase": false, "constructor": false}, {"identifier": "getReports", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, SubTaskReportType>", "signature": "Map<String, SubTaskReportType> getReports()", "full_signature": "@Override public Map<String, SubTaskReportType> getReports()", "class_method_signature": "ParallelIndexPhaseRunner.getReports()", "testcase": false, "constructor": false}, {"identifier": "getProgress", "parameters": "()", "modifiers": "@Override public", "return": "ParallelIndexingPhaseProgress", "signature": "ParallelIndexingPhaseProgress getProgress()", "full_signature": "@Override public ParallelIndexingPhaseProgress getProgress()", "class_method_signature": "ParallelIndexPhaseRunner.getProgress()", "testcase": false, "constructor": false}, {"identifier": "getRunningTaskIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getRunningTaskIds()", "full_signature": "@Override public Set<String> getRunningTaskIds()", "class_method_signature": "ParallelIndexPhaseRunner.getRunningTaskIds()", "testcase": false, "constructor": false}, {"identifier": "getSubTaskSpecs", "parameters": "()", "modifiers": "@Override public", "return": "List<SubTaskSpec<SubTaskType>>", "signature": "List<SubTaskSpec<SubTaskType>> getSubTaskSpecs()", "full_signature": "@Override public List<SubTaskSpec<SubTaskType>> getSubTaskSpecs()", "class_method_signature": "ParallelIndexPhaseRunner.getSubTaskSpecs()", "testcase": false, "constructor": false}, {"identifier": "getRunningSubTaskSpecs", "parameters": "()", "modifiers": "@Override public", "return": "List<SubTaskSpec<SubTaskType>>", "signature": "List<SubTaskSpec<SubTaskType>> getRunningSubTaskSpecs()", "full_signature": "@Override public List<SubTaskSpec<SubTaskType>> getRunningSubTaskSpecs()", "class_method_signature": "ParallelIndexPhaseRunner.getRunningSubTaskSpecs()", "testcase": false, "constructor": false}, {"identifier": "getCompleteSubTaskSpecs", "parameters": "()", "modifiers": "@Override public", "return": "List<SubTaskSpec<SubTaskType>>", "signature": "List<SubTaskSpec<SubTaskType>> getCompleteSubTaskSpecs()", "full_signature": "@Override public List<SubTaskSpec<SubTaskType>> getCompleteSubTaskSpecs()", "class_method_signature": "ParallelIndexPhaseRunner.getCompleteSubTaskSpecs()", "testcase": false, "constructor": false}, {"identifier": "getSubTaskSpec", "parameters": "(String subTaskSpecId)", "modifiers": "@Nullable @Override public", "return": "SubTaskSpec<SubTaskType>", "signature": "SubTaskSpec<SubTaskType> getSubTaskSpec(String subTaskSpecId)", "full_signature": "@Nullable @Override public SubTaskSpec<SubTaskType> getSubTaskSpec(String subTaskSpecId)", "class_method_signature": "ParallelIndexPhaseRunner.getSubTaskSpec(String subTaskSpecId)", "testcase": false, "constructor": false}, {"identifier": "getSubTaskState", "parameters": "(String subTaskSpecId)", "modifiers": "@Nullable @Override public", "return": "SubTaskSpecStatus", "signature": "SubTaskSpecStatus getSubTaskState(String subTaskSpecId)", "full_signature": "@Nullable @Override public SubTaskSpecStatus getSubTaskState(String subTaskSpecId)", "class_method_signature": "ParallelIndexPhaseRunner.getSubTaskState(String subTaskSpecId)", "testcase": false, "constructor": false}, {"identifier": "getCompleteSubTaskSpecAttemptHistory", "parameters": "(String subTaskSpecId)", "modifiers": "@Nullable @Override public", "return": "TaskHistory<SubTaskType>", "signature": "TaskHistory<SubTaskType> getCompleteSubTaskSpecAttemptHistory(String subTaskSpecId)", "full_signature": "@Nullable @Override public TaskHistory<SubTaskType> getCompleteSubTaskSpecAttemptHistory(String subTaskSpecId)", "class_method_signature": "ParallelIndexPhaseRunner.getCompleteSubTaskSpecAttemptHistory(String subTaskSpecId)", "testcase": false, "constructor": false}, {"identifier": "getTaskId", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getTaskId()", "full_signature": " String getTaskId()", "class_method_signature": "ParallelIndexPhaseRunner.getTaskId()", "testcase": false, "constructor": false}, {"identifier": "getGroupId", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getGroupId()", "full_signature": " String getGroupId()", "class_method_signature": "ParallelIndexPhaseRunner.getGroupId()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "", "return": "Map<String, Object>", "signature": "Map<String, Object> getContext()", "full_signature": " Map<String, Object> getContext()", "class_method_signature": "ParallelIndexPhaseRunner.getContext()", "testcase": false, "constructor": false}, {"identifier": "getTuningConfig", "parameters": "()", "modifiers": "", "return": "ParallelIndexTuningConfig", "signature": "ParallelIndexTuningConfig getTuningConfig()", "full_signature": " ParallelIndexTuningConfig getTuningConfig()", "class_method_signature": "ParallelIndexPhaseRunner.getTuningConfig()", "testcase": false, "constructor": false}, {"identifier": "getToolbox", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "TaskToolbox", "signature": "TaskToolbox getToolbox()", "full_signature": "@VisibleForTesting TaskToolbox getToolbox()", "class_method_signature": "ParallelIndexPhaseRunner.getToolbox()", "testcase": false, "constructor": false}, {"identifier": "getTaskMonitor", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "TaskMonitor<SubTaskType>", "signature": "TaskMonitor<SubTaskType> getTaskMonitor()", "full_signature": "@VisibleForTesting @Nullable TaskMonitor<SubTaskType> getTaskMonitor()", "class_method_signature": "ParallelIndexPhaseRunner.getTaskMonitor()", "testcase": false, "constructor": false}, {"identifier": "getAndIncrementNextSpecId", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int getAndIncrementNextSpecId()", "full_signature": "@VisibleForTesting int getAndIncrementNextSpecId()", "class_method_signature": "ParallelIndexPhaseRunner.getAndIncrementNextSpecId()", "testcase": false, "constructor": false}], "file": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexPhaseRunner.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "TaskState", "body": "@Override\n  public TaskState run() throws Exception\n  {\n    final CountingSubTaskSpecIterator subTaskSpecIterator = new CountingSubTaskSpecIterator(subTaskSpecIterator());\n    if (!subTaskSpecIterator.hasNext()) {\n      LOG.warn(\"There's no input split to process\");\n      return TaskState.SUCCESS;\n    }\n\n    final long taskStatusCheckingPeriod = tuningConfig.getTaskStatusCheckPeriodMs();\n\n    taskMonitor = new TaskMonitor<>(\n        toolbox.getIndexingServiceClient(),\n        tuningConfig.getMaxRetry(),\n        estimateTotalNumSubTasks()\n    );\n    TaskState state = TaskState.RUNNING;\n\n    taskMonitor.start(taskStatusCheckingPeriod);\n\n    try {\n      LOG.info(\"Submitting initial tasks\");\n      // Submit initial tasks\n      while (isRunning() && subTaskSpecIterator.hasNext() && taskMonitor.getNumRunningTasks() < maxNumConcurrentSubTasks) {\n        submitNewTask(taskMonitor, subTaskSpecIterator.next());\n      }\n\n      LOG.info(\"Waiting for subTasks to be completed\");\n      while (isRunning()) {\n        final SubTaskCompleteEvent<SubTaskType> taskCompleteEvent = taskCompleteEvents.poll(\n            taskStatusCheckingPeriod,\n            TimeUnit.MILLISECONDS\n        );\n\n        if (taskCompleteEvent != null) {\n          final TaskState completeState = taskCompleteEvent.getLastState();\n          switch (completeState) {\n            case SUCCESS:\n              final TaskStatusPlus completeStatus = taskCompleteEvent.getLastStatus();\n              if (completeStatus == null) {\n                throw new ISE(\"Last status of complete task is missing!\");\n              }\n              // Pushed segments of complete tasks are supposed to be already reported.\n              if (!reportsMap.containsKey(completeStatus.getId())) {\n                throw new ISE(\"Missing reports from task[%s]!\", completeStatus.getId());\n              }\n\n              if (!subTaskSpecIterator.hasNext()) {\n                // We have no more subTasks to run\n                if (taskMonitor.getNumRunningTasks() == 0 && taskCompleteEvents.isEmpty()) {\n                  subTaskScheduleAndMonitorStopped = true;\n                  if (subTaskSpecIterator.count == taskMonitor.getNumSucceededTasks()) {\n                    // Succeeded\n                    state = TaskState.SUCCESS;\n                  } else {\n                    // Failed\n                    final ParallelIndexingPhaseProgress monitorStatus = taskMonitor.getProgress();\n                    throw new ISE(\n                        \"Expected [%d] tasks to succeed, but we got [%d] succeeded tasks and [%d] failed tasks\",\n                        subTaskSpecIterator.count,\n                        monitorStatus.getSucceeded(),\n                        monitorStatus.getFailed()\n                    );\n                  }\n                }\n              } else if (taskMonitor.getNumRunningTasks() < maxNumConcurrentSubTasks) {\n                // We have more subTasks to run\n                submitNewTask(taskMonitor, subTaskSpecIterator.next());\n              } else {\n                // We have more subTasks to run, but don't have enough available task slots\n                // do nothing\n              }\n              break;\n            case FAILED:\n              // TaskMonitor already tried everything it can do for failed tasks. We failed.\n              state = TaskState.FAILED;\n              subTaskScheduleAndMonitorStopped = true;\n              final TaskStatusPlus lastStatus = taskCompleteEvent.getLastStatus();\n              if (lastStatus != null) {\n                LOG.error(\"Failed because of the failed sub task[%s]\", lastStatus.getId());\n              } else {\n                final SubTaskSpec<?> spec = taskCompleteEvent.getSpec();\n                LOG.error(\"Failed to process spec[%s] with an unknown last status\", spec.getId());\n              }\n              break;\n            default:\n              throw new ISE(\"spec[%s] is in an invalid state[%s]\", taskCompleteEvent.getSpec().getId(), completeState);\n          }\n        }\n      }\n    }\n    finally {\n      stopInternal();\n      if (!state.isComplete()) {\n        state = TaskState.FAILED;\n      }\n    }\n\n    return state;\n  }", "signature": "TaskState run()", "full_signature": "@Override public TaskState run()", "class_method_signature": "ParallelIndexPhaseRunner.run()", "testcase": false, "constructor": false, "invocations": ["subTaskSpecIterator", "hasNext", "warn", "getTaskStatusCheckPeriodMs", "getIndexingServiceClient", "getMaxRetry", "estimateTotalNumSubTasks", "start", "info", "isRunning", "hasNext", "getNumRunningTasks", "submitNewTask", "next", "info", "isRunning", "poll", "getLastState", "getLastStatus", "containsKey", "getId", "getId", "hasNext", "getNumRunningTasks", "isEmpty", "getNumSucceededTasks", "getProgress", "getSucceeded", "getFailed", "getNumRunningTasks", "submitNewTask", "next", "getLastStatus", "error", "getId", "getSpec", "error", "getId", "getId", "getSpec", "stopInternal", "isComplete"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}