{"test_class": {"identifier": "DataGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "processing/src/test/java/org/apache/druid/segment/generator/DataGeneratorTest.java"}, "test_case": {"identifier": "testRealUniform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRealUniform()\n  {\n    List<GeneratorColumnSchema> schemas = new ArrayList<>();\n    RowValueTracker tracker = new RowValueTracker();\n\n    schemas.add(\n        GeneratorColumnSchema.makeContinuousUniform(\n            \"dimA\",\n            ValueType.STRING,\n            false,\n            1,\n            null,\n            10.0,\n            50.0\n        )\n    );\n\n    schemas.add(\n        GeneratorColumnSchema.makeContinuousUniform(\n            \"dimB\",\n            ValueType.FLOAT,\n            false,\n            1,\n            null,\n            210.0,\n            250.0\n        )\n    );\n\n    DataGenerator dataGenerator = new DataGenerator(schemas, 9999, 0, 0, 1000.0);\n    for (int i = 0; i < 100; i++) {\n      InputRow row = dataGenerator.nextRow();\n      //System.out.println(\"U-ROW: \" + row);\n\n      tracker.addRow(row);\n    }\n\n    tracker.printStuff();\n  }", "signature": "void testRealUniform()", "full_signature": "@Test public void testRealUniform()", "class_method_signature": "DataGeneratorTest.testRealUniform()", "testcase": true, "constructor": false, "invocations": ["add", "makeContinuousUniform", "add", "makeContinuousUniform", "nextRow", "addRow", "printStuff"]}, "focal_class": {"identifier": "DataGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<GeneratorColumnSchema> columnSchemas;", "modifier": "private final", "type": "List<GeneratorColumnSchema>", "declarator": "columnSchemas", "var_name": "columnSchemas"}, {"original_string": "private final long seed;", "modifier": "private final", "type": "long", "declarator": "seed", "var_name": "seed"}, {"original_string": "private List<ColumnValueGenerator> columnGenerators;", "modifier": "private", "type": "List<ColumnValueGenerator>", "declarator": "columnGenerators", "var_name": "columnGenerators"}, {"original_string": "private final long startTime;", "modifier": "private final", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private final long endTime;", "modifier": "private final", "type": "long", "declarator": "endTime", "var_name": "endTime"}, {"original_string": "private final int numConsecutiveTimestamps;", "modifier": "private final", "type": "int", "declarator": "numConsecutiveTimestamps", "var_name": "numConsecutiveTimestamps"}, {"original_string": "private final double timestampIncrement;", "modifier": "private final", "type": "double", "declarator": "timestampIncrement", "var_name": "timestampIncrement"}, {"original_string": "private double currentTime;", "modifier": "private", "type": "double", "declarator": "currentTime", "var_name": "currentTime"}, {"original_string": "private int timeCounter;", "modifier": "private", "type": "int", "declarator": "timeCounter", "var_name": "timeCounter"}, {"original_string": "private List<String> dimensionNames;", "modifier": "private", "type": "List<String>", "declarator": "dimensionNames", "var_name": "dimensionNames"}], "methods": [{"identifier": "DataGenerator", "parameters": "(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      long startTime,\n      int numConsecutiveTimestamps,\n      Double timestampIncrement\n  )", "modifiers": "public", "return": "", "signature": " DataGenerator(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      long startTime,\n      int numConsecutiveTimestamps,\n      Double timestampIncrement\n  )", "full_signature": "public  DataGenerator(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      long startTime,\n      int numConsecutiveTimestamps,\n      Double timestampIncrement\n  )", "class_method_signature": "DataGenerator.DataGenerator(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      long startTime,\n      int numConsecutiveTimestamps,\n      Double timestampIncrement\n  )", "testcase": false, "constructor": true}, {"identifier": "DataGenerator", "parameters": "(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      Interval interval,\n      int numRows\n  )", "modifiers": "public", "return": "", "signature": " DataGenerator(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      Interval interval,\n      int numRows\n  )", "full_signature": "public  DataGenerator(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      Interval interval,\n      int numRows\n  )", "class_method_signature": "DataGenerator.DataGenerator(\n      List<GeneratorColumnSchema> columnSchemas,\n      final long seed,\n      Interval interval,\n      int numRows\n  )", "testcase": false, "constructor": true}, {"identifier": "nextRow", "parameters": "()", "modifiers": "public", "return": "InputRow", "signature": "InputRow nextRow()", "full_signature": "public InputRow nextRow()", "class_method_signature": "DataGenerator.nextRow()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "DataGenerator.init()", "testcase": false, "constructor": false}, {"identifier": "nextTimestamp", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long nextTimestamp()", "full_signature": "private long nextTimestamp()", "class_method_signature": "DataGenerator.nextTimestamp()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/generator/DataGenerator.java"}, "focal_method": {"identifier": "nextRow", "parameters": "()", "modifiers": "public", "return": "InputRow", "body": "public InputRow nextRow()\n  {\n    Map<String, Object> event = new HashMap<>();\n    for (ColumnValueGenerator generator : columnGenerators) {\n      event.put(generator.getSchema().getName(), generator.generateRowValue());\n    }\n    MapBasedInputRow row = new MapBasedInputRow(nextTimestamp(), dimensionNames, event);\n    return row;\n  }", "signature": "InputRow nextRow()", "full_signature": "public InputRow nextRow()", "class_method_signature": "DataGenerator.nextRow()", "testcase": false, "constructor": false, "invocations": ["put", "getName", "getSchema", "generateRowValue", "nextTimestamp"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}