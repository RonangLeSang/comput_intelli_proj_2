{"test_class": {"identifier": "LookupCoordinatorManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private final ObjectMapper mapper = new DefaultObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new DefaultObjectMapper()", "var_name": "mapper"}, {"original_string": "private final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createStrictMock(DruidNodeDiscoveryProvider.class);", "modifier": "private final", "type": "DruidNodeDiscoveryProvider", "declarator": "druidNodeDiscoveryProvider = EasyMock.createStrictMock(DruidNodeDiscoveryProvider.class)", "var_name": "druidNodeDiscoveryProvider"}, {"original_string": "private final LookupNodeDiscovery lookupNodeDiscovery = EasyMock.createStrictMock(\n      LookupNodeDiscovery.class);", "modifier": "private final", "type": "LookupNodeDiscovery", "declarator": "lookupNodeDiscovery = EasyMock.createStrictMock(\n      LookupNodeDiscovery.class)", "var_name": "lookupNodeDiscovery"}, {"original_string": "private final HttpClient client = EasyMock.createStrictMock(HttpClient.class);", "modifier": "private final", "type": "HttpClient", "declarator": "client = EasyMock.createStrictMock(HttpClient.class)", "var_name": "client"}, {"original_string": "private final JacksonConfigManager configManager = EasyMock.createStrictMock(JacksonConfigManager.class);", "modifier": "private final", "type": "JacksonConfigManager", "declarator": "configManager = EasyMock.createStrictMock(JacksonConfigManager.class)", "var_name": "configManager"}, {"original_string": "private final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig = new LookupCoordinatorManagerConfig();", "modifier": "private final", "type": "LookupCoordinatorManagerConfig", "declarator": "lookupCoordinatorManagerConfig = new LookupCoordinatorManagerConfig()", "var_name": "lookupCoordinatorManagerConfig"}, {"original_string": "private static final String LOOKUP_TIER = \"lookup_tier\";", "modifier": "private static final", "type": "String", "declarator": "LOOKUP_TIER = \"lookup_tier\"", "var_name": "LOOKUP_TIER"}, {"original_string": "private static final String SINGLE_LOOKUP_NAME = \"lookupName\";", "modifier": "private static final", "type": "String", "declarator": "SINGLE_LOOKUP_NAME = \"lookupName\"", "var_name": "SINGLE_LOOKUP_NAME"}, {"original_string": "private static final LookupExtractorFactoryMapContainer SINGLE_LOOKUP_SPEC_V0 =\n      new LookupExtractorFactoryMapContainer(\n          \"v0\",\n          ImmutableMap.of(\"k0\", \"v0\")\n  );", "modifier": "private static final", "type": "LookupExtractorFactoryMapContainer", "declarator": "SINGLE_LOOKUP_SPEC_V0 =\n      new LookupExtractorFactoryMapContainer(\n          \"v0\",\n          ImmutableMap.of(\"k0\", \"v0\")\n  )", "var_name": "SINGLE_LOOKUP_SPEC_V0"}, {"original_string": "private static final LookupExtractorFactoryMapContainer SINGLE_LOOKUP_SPEC_V1 =\n      new LookupExtractorFactoryMapContainer(\n          \"v1\",\n          ImmutableMap.of(\"k1\", \"v1\")\n      );", "modifier": "private static final", "type": "LookupExtractorFactoryMapContainer", "declarator": "SINGLE_LOOKUP_SPEC_V1 =\n      new LookupExtractorFactoryMapContainer(\n          \"v1\",\n          ImmutableMap.of(\"k1\", \"v1\")\n      )", "var_name": "SINGLE_LOOKUP_SPEC_V1"}, {"original_string": "private static final Map<String, LookupExtractorFactoryMapContainer> SINGLE_LOOKUP_MAP_V0 = ImmutableMap.of(\n      SINGLE_LOOKUP_NAME,\n      SINGLE_LOOKUP_SPEC_V0\n  );", "modifier": "private static final", "type": "Map<String, LookupExtractorFactoryMapContainer>", "declarator": "SINGLE_LOOKUP_MAP_V0 = ImmutableMap.of(\n      SINGLE_LOOKUP_NAME,\n      SINGLE_LOOKUP_SPEC_V0\n  )", "var_name": "SINGLE_LOOKUP_MAP_V0"}, {"original_string": "private static final Map<String, LookupExtractorFactoryMapContainer> SINGLE_LOOKUP_MAP_V1 = ImmutableMap.of(\n      SINGLE_LOOKUP_NAME,\n      SINGLE_LOOKUP_SPEC_V1\n  );", "modifier": "private static final", "type": "Map<String, LookupExtractorFactoryMapContainer>", "declarator": "SINGLE_LOOKUP_MAP_V1 = ImmutableMap.of(\n      SINGLE_LOOKUP_NAME,\n      SINGLE_LOOKUP_SPEC_V1\n  )", "var_name": "SINGLE_LOOKUP_MAP_V1"}, {"original_string": "private static final Map<String, Map<String, LookupExtractorFactoryMapContainer>> TIERED_LOOKUP_MAP_V0 = ImmutableMap.of(\n      LOOKUP_TIER,\n      SINGLE_LOOKUP_MAP_V0\n  );", "modifier": "private static final", "type": "Map<String, Map<String, LookupExtractorFactoryMapContainer>>", "declarator": "TIERED_LOOKUP_MAP_V0 = ImmutableMap.of(\n      LOOKUP_TIER,\n      SINGLE_LOOKUP_MAP_V0\n  )", "var_name": "TIERED_LOOKUP_MAP_V0"}, {"original_string": "private static final Map<String, Map<String, LookupExtractorFactoryMapContainer>> TIERED_LOOKUP_MAP_V1 = ImmutableMap.of(\n      LOOKUP_TIER,\n      SINGLE_LOOKUP_MAP_V1\n  );", "modifier": "private static final", "type": "Map<String, Map<String, LookupExtractorFactoryMapContainer>>", "declarator": "TIERED_LOOKUP_MAP_V1 = ImmutableMap.of(\n      LOOKUP_TIER,\n      SINGLE_LOOKUP_MAP_V1\n  )", "var_name": "TIERED_LOOKUP_MAP_V1"}, {"original_string": "private static final Map<String, Map<String, LookupExtractorFactoryMapContainer>> EMPTY_TIERED_LOOKUP = ImmutableMap.of();", "modifier": "private static final", "type": "Map<String, Map<String, LookupExtractorFactoryMapContainer>>", "declarator": "EMPTY_TIERED_LOOKUP = ImmutableMap.of()", "var_name": "EMPTY_TIERED_LOOKUP"}, {"original_string": "private static final LookupsState<LookupExtractorFactoryMapContainer> LOOKUPS_STATE = new LookupsState<>(\n      SINGLE_LOOKUP_MAP_V0,\n      SINGLE_LOOKUP_MAP_V1,\n      Collections.emptySet()\n  );", "modifier": "private static final", "type": "LookupsState<LookupExtractorFactoryMapContainer>", "declarator": "LOOKUPS_STATE = new LookupsState<>(\n      SINGLE_LOOKUP_MAP_V0,\n      SINGLE_LOOKUP_MAP_V1,\n      Collections.emptySet()\n  )", "var_name": "LOOKUPS_STATE"}, {"original_string": "private static final AtomicLong EVENT_EMITS = new AtomicLong(0L);", "modifier": "private static final", "type": "AtomicLong", "declarator": "EVENT_EMITS = new AtomicLong(0L)", "var_name": "EVENT_EMITS"}, {"original_string": "private static ServiceEmitter SERVICE_EMITTER;", "modifier": "private static", "type": "ServiceEmitter", "declarator": "SERVICE_EMITTER", "var_name": "SERVICE_EMITTER"}], "file": "server/src/test/java/org/apache/druid/server/lookup/cache/LookupCoordinatorManagerTest.java"}, "test_case": {"identifier": "testGetToBeLoadedOnNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetToBeLoadedOnNode()\n  {\n    LookupCoordinatorManager manager = new LookupCoordinatorManager(\n        client,\n        druidNodeDiscoveryProvider,\n        mapper,\n        configManager,\n        lookupCoordinatorManagerConfig\n    );\n\n    LookupsState<LookupExtractorFactoryMapContainer> currNodeState = new LookupsState<>(\n        ImmutableMap.of(\"lookup0\", new LookupExtractorFactoryMapContainer(\"v1\", ImmutableMap.of(\"k0\", \"v0\")),\n                        \"lookup1\", new LookupExtractorFactoryMapContainer(\"v1\", ImmutableMap.of(\"k1\", \"v1\"))\n        ),\n        ImmutableMap.of(\"lookup2\", new LookupExtractorFactoryMapContainer(\"v1\", ImmutableMap.of(\"k2\", \"v2\")),\n                        \"lookup3\", new LookupExtractorFactoryMapContainer(\"v1\", ImmutableMap.of(\"k3\", \"v3\"))\n        ),\n        ImmutableSet.of(\"lookup2\", \"lookup4\")\n    );\n\n    Map<String, LookupExtractorFactoryMapContainer> stateToBe = ImmutableMap.of(\n        \"lookup0\", new LookupExtractorFactoryMapContainer(\"v1\", ImmutableMap.of(\"k0\", \"v0\")),\n        \"lookup1\", new LookupExtractorFactoryMapContainer(\"v2\", ImmutableMap.of(\"k1\", \"v1\")),\n        \"lookup2\", new LookupExtractorFactoryMapContainer(\"v1\", ImmutableMap.of(\"k2\", \"v2\"))\n    );\n\n    Assert.assertEquals(\n        ImmutableMap.of(\n            \"lookup1\", new LookupExtractorFactoryMapContainer(\"v2\", ImmutableMap.of(\"k1\", \"v1\")),\n            \"lookup2\", new LookupExtractorFactoryMapContainer(\"v1\", ImmutableMap.of(\"k2\", \"v2\"))\n        ),\n        manager.getToBeLoadedOnNode(currNodeState, stateToBe)\n    );\n  }", "signature": "void testGetToBeLoadedOnNode()", "full_signature": "@Test public void testGetToBeLoadedOnNode()", "class_method_signature": "LookupCoordinatorManagerTest.testGetToBeLoadedOnNode()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "assertEquals", "of", "of", "of", "getToBeLoadedOnNode"]}, "focal_class": {"identifier": "LookupCoordinatorManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String OLD_LOOKUP_CONFIG_KEY = \"lookups\";", "modifier": "public static final", "type": "String", "declarator": "OLD_LOOKUP_CONFIG_KEY = \"lookups\"", "var_name": "OLD_LOOKUP_CONFIG_KEY"}, {"original_string": "public static final String LOOKUP_CONFIG_KEY = \"lookupsConfig\";", "modifier": "public static final", "type": "String", "declarator": "LOOKUP_CONFIG_KEY = \"lookupsConfig\"", "var_name": "LOOKUP_CONFIG_KEY"}, {"original_string": "public static final String LOOKUP_LISTEN_ANNOUNCE_KEY = \"lookups\";", "modifier": "public static final", "type": "String", "declarator": "LOOKUP_LISTEN_ANNOUNCE_KEY = \"lookups\"", "var_name": "LOOKUP_LISTEN_ANNOUNCE_KEY"}, {"original_string": "private static final String LOOKUP_BASE_REQUEST_PATH = ListenerResource.BASE_PATH\n                                                         + \"/\"\n                                                         + LOOKUP_LISTEN_ANNOUNCE_KEY;", "modifier": "private static final", "type": "String", "declarator": "LOOKUP_BASE_REQUEST_PATH = ListenerResource.BASE_PATH\n                                                         + \"/\"\n                                                         + LOOKUP_LISTEN_ANNOUNCE_KEY", "var_name": "LOOKUP_BASE_REQUEST_PATH"}, {"original_string": "private static final String LOOKUP_UPDATE_REQUEST_PATH = LOOKUP_BASE_REQUEST_PATH + \"/\" + \"updates\";", "modifier": "private static final", "type": "String", "declarator": "LOOKUP_UPDATE_REQUEST_PATH = LOOKUP_BASE_REQUEST_PATH + \"/\" + \"updates\"", "var_name": "LOOKUP_UPDATE_REQUEST_PATH"}, {"original_string": "private static final TypeReference<LookupsState<LookupExtractorFactoryMapContainer>> LOOKUPS_STATE_TYPE_REFERENCE =\n      new TypeReference<LookupsState<LookupExtractorFactoryMapContainer>>()\n      {\n      };", "modifier": "private static final", "type": "TypeReference<LookupsState<LookupExtractorFactoryMapContainer>>", "declarator": "LOOKUPS_STATE_TYPE_REFERENCE =\n      new TypeReference<LookupsState<LookupExtractorFactoryMapContainer>>()\n      {\n      }", "var_name": "LOOKUPS_STATE_TYPE_REFERENCE"}, {"original_string": "private static final EmittingLogger LOG = new EmittingLogger(LookupCoordinatorManager.class);", "modifier": "private static final", "type": "EmittingLogger", "declarator": "LOG = new EmittingLogger(LookupCoordinatorManager.class)", "var_name": "LOG"}, {"original_string": "private final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider;", "modifier": "private final", "type": "DruidNodeDiscoveryProvider", "declarator": "druidNodeDiscoveryProvider", "var_name": "druidNodeDiscoveryProvider"}, {"original_string": "private LookupNodeDiscovery lookupNodeDiscovery;", "modifier": "private", "type": "LookupNodeDiscovery", "declarator": "lookupNodeDiscovery", "var_name": "lookupNodeDiscovery"}, {"original_string": "private final JacksonConfigManager configManager;", "modifier": "private final", "type": "JacksonConfigManager", "declarator": "configManager", "var_name": "configManager"}, {"original_string": "private final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig;", "modifier": "private final", "type": "LookupCoordinatorManagerConfig", "declarator": "lookupCoordinatorManagerConfig", "var_name": "lookupCoordinatorManagerConfig"}, {"original_string": "private final LookupsCommunicator lookupsCommunicator;", "modifier": "private final", "type": "LookupsCommunicator", "declarator": "lookupsCommunicator", "var_name": "lookupsCommunicator"}, {"original_string": "@VisibleForTesting\n  final AtomicReference<Map<HostAndPort, LookupsState<LookupExtractorFactoryMapContainer>>> knownOldState =\n      new AtomicReference<>(ImmutableMap.of());", "modifier": "@VisibleForTesting\n  final", "type": "AtomicReference<Map<HostAndPort, LookupsState<LookupExtractorFactoryMapContainer>>>", "declarator": "knownOldState =\n      new AtomicReference<>(ImmutableMap.of())", "var_name": "knownOldState"}, {"original_string": "private AtomicReference<Map<String, Map<String, LookupExtractorFactoryMapContainer>>> lookupMapConfigRef;", "modifier": "private", "type": "AtomicReference<Map<String, Map<String, LookupExtractorFactoryMapContainer>>>", "declarator": "lookupMapConfigRef", "var_name": "lookupMapConfigRef"}, {"original_string": "private final LifecycleLock lifecycleLock = new LifecycleLock();", "modifier": "private final", "type": "LifecycleLock", "declarator": "lifecycleLock = new LifecycleLock()", "var_name": "lifecycleLock"}, {"original_string": "private ListeningScheduledExecutorService executorService;", "modifier": "private", "type": "ListeningScheduledExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private ListenableScheduledFuture<?> backgroundManagerFuture;", "modifier": "private", "type": "ListenableScheduledFuture<?>", "declarator": "backgroundManagerFuture", "var_name": "backgroundManagerFuture"}, {"original_string": "private CountDownLatch backgroundManagerExitedLatch;", "modifier": "private", "type": "CountDownLatch", "declarator": "backgroundManagerExitedLatch", "var_name": "backgroundManagerExitedLatch"}], "methods": [{"identifier": "LookupCoordinatorManager", "parameters": "(\n      final @EscalatedGlobal HttpClient httpClient,\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final @Smile ObjectMapper smileMapper,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig\n  )", "modifiers": "@Inject public", "return": "", "signature": " LookupCoordinatorManager(\n      final @EscalatedGlobal HttpClient httpClient,\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final @Smile ObjectMapper smileMapper,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig\n  )", "full_signature": "@Inject public  LookupCoordinatorManager(\n      final @EscalatedGlobal HttpClient httpClient,\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final @Smile ObjectMapper smileMapper,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig\n  )", "class_method_signature": "LookupCoordinatorManager.LookupCoordinatorManager(\n      final @EscalatedGlobal HttpClient httpClient,\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final @Smile ObjectMapper smileMapper,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig\n  )", "testcase": false, "constructor": true}, {"identifier": "LookupCoordinatorManager", "parameters": "(\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig,\n      final LookupsCommunicator lookupsCommunicator,\n      final LookupNodeDiscovery lookupNodeDiscovery\n  )", "modifiers": "@VisibleForTesting", "return": "", "signature": " LookupCoordinatorManager(\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig,\n      final LookupsCommunicator lookupsCommunicator,\n      final LookupNodeDiscovery lookupNodeDiscovery\n  )", "full_signature": "@VisibleForTesting  LookupCoordinatorManager(\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig,\n      final LookupsCommunicator lookupsCommunicator,\n      final LookupNodeDiscovery lookupNodeDiscovery\n  )", "class_method_signature": "LookupCoordinatorManager.LookupCoordinatorManager(\n      final DruidNodeDiscoveryProvider druidNodeDiscoveryProvider,\n      final JacksonConfigManager configManager,\n      final LookupCoordinatorManagerConfig lookupCoordinatorManagerConfig,\n      final LookupsCommunicator lookupsCommunicator,\n      final LookupNodeDiscovery lookupNodeDiscovery\n  )", "testcase": false, "constructor": true}, {"identifier": "updateLookup", "parameters": "(\n      final String tier,\n      final String lookupName,\n      LookupExtractorFactoryMapContainer spec,\n      final AuditInfo auditInfo\n  )", "modifiers": "public", "return": "boolean", "signature": "boolean updateLookup(\n      final String tier,\n      final String lookupName,\n      LookupExtractorFactoryMapContainer spec,\n      final AuditInfo auditInfo\n  )", "full_signature": "public boolean updateLookup(\n      final String tier,\n      final String lookupName,\n      LookupExtractorFactoryMapContainer spec,\n      final AuditInfo auditInfo\n  )", "class_method_signature": "LookupCoordinatorManager.updateLookup(\n      final String tier,\n      final String lookupName,\n      LookupExtractorFactoryMapContainer spec,\n      final AuditInfo auditInfo\n  )", "testcase": false, "constructor": false}, {"identifier": "updateLookups", "parameters": "(final Map<String, Map<String, LookupExtractorFactoryMapContainer>> updateSpec, AuditInfo auditInfo)", "modifiers": "public", "return": "boolean", "signature": "boolean updateLookups(final Map<String, Map<String, LookupExtractorFactoryMapContainer>> updateSpec, AuditInfo auditInfo)", "full_signature": "public boolean updateLookups(final Map<String, Map<String, LookupExtractorFactoryMapContainer>> updateSpec, AuditInfo auditInfo)", "class_method_signature": "LookupCoordinatorManager.updateLookups(final Map<String, Map<String, LookupExtractorFactoryMapContainer>> updateSpec, AuditInfo auditInfo)", "testcase": false, "constructor": false}, {"identifier": "getKnownLookups", "parameters": "()", "modifiers": "public", "return": "Map<String, Map<String, LookupExtractorFactoryMapContainer>>", "signature": "Map<String, Map<String, LookupExtractorFactoryMapContainer>> getKnownLookups()", "full_signature": "public Map<String, Map<String, LookupExtractorFactoryMapContainer>> getKnownLookups()", "class_method_signature": "LookupCoordinatorManager.getKnownLookups()", "testcase": false, "constructor": false}, {"identifier": "deleteTier", "parameters": "(final String tier, AuditInfo auditInfo)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteTier(final String tier, AuditInfo auditInfo)", "full_signature": "public boolean deleteTier(final String tier, AuditInfo auditInfo)", "class_method_signature": "LookupCoordinatorManager.deleteTier(final String tier, AuditInfo auditInfo)", "testcase": false, "constructor": false}, {"identifier": "deleteLookup", "parameters": "(final String tier, final String lookup, AuditInfo auditInfo)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteLookup(final String tier, final String lookup, AuditInfo auditInfo)", "full_signature": "public boolean deleteLookup(final String tier, final String lookup, AuditInfo auditInfo)", "class_method_signature": "LookupCoordinatorManager.deleteLookup(final String tier, final String lookup, AuditInfo auditInfo)", "testcase": false, "constructor": false}, {"identifier": "discoverTiers", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> discoverTiers()", "full_signature": "public Set<String> discoverTiers()", "class_method_signature": "LookupCoordinatorManager.discoverTiers()", "testcase": false, "constructor": false}, {"identifier": "discoverNodesInTier", "parameters": "(String tier)", "modifiers": "public", "return": "Collection<HostAndPort>", "signature": "Collection<HostAndPort> discoverNodesInTier(String tier)", "full_signature": "public Collection<HostAndPort> discoverNodesInTier(String tier)", "class_method_signature": "LookupCoordinatorManager.discoverNodesInTier(String tier)", "testcase": false, "constructor": false}, {"identifier": "getLastKnownLookupsStateOnNodes", "parameters": "()", "modifiers": "public", "return": "Map<HostAndPort, LookupsState<LookupExtractorFactoryMapContainer>>", "signature": "Map<HostAndPort, LookupsState<LookupExtractorFactoryMapContainer>> getLastKnownLookupsStateOnNodes()", "full_signature": "public Map<HostAndPort, LookupsState<LookupExtractorFactoryMapContainer>> getLastKnownLookupsStateOnNodes()", "class_method_signature": "LookupCoordinatorManager.getLastKnownLookupsStateOnNodes()", "testcase": false, "constructor": false}, {"identifier": "getLookup", "parameters": "(final String tier, final String lookupName)", "modifiers": "@Nullable public", "return": "LookupExtractorFactoryMapContainer", "signature": "LookupExtractorFactoryMapContainer getLookup(final String tier, final String lookupName)", "full_signature": "@Nullable public LookupExtractorFactoryMapContainer getLookup(final String tier, final String lookupName)", "class_method_signature": "LookupCoordinatorManager.getLookup(final String tier, final String lookupName)", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "public boolean isStarted()", "class_method_signature": "LookupCoordinatorManager.isStarted()", "testcase": false, "constructor": false}, {"identifier": "awaitStarted", "parameters": "(long waitTimeMs)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean awaitStarted(long waitTimeMs)", "full_signature": "@VisibleForTesting boolean awaitStarted(long waitTimeMs)", "class_method_signature": "LookupCoordinatorManager.awaitStarted(long waitTimeMs)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "LookupCoordinatorManager.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "LookupCoordinatorManager.stop()", "testcase": false, "constructor": false}, {"identifier": "initializeLookupsConfigWatcher", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeLookupsConfigWatcher()", "full_signature": "private void initializeLookupsConfigWatcher()", "class_method_signature": "LookupCoordinatorManager.initializeLookupsConfigWatcher()", "testcase": false, "constructor": false}, {"identifier": "convertTierLookups", "parameters": "(\n      Map<String, Map<String, Object>> oldTierLookups\n  )", "modifiers": "private", "return": "Map<String, LookupExtractorFactoryMapContainer>", "signature": "Map<String, LookupExtractorFactoryMapContainer> convertTierLookups(\n      Map<String, Map<String, Object>> oldTierLookups\n  )", "full_signature": "private Map<String, LookupExtractorFactoryMapContainer> convertTierLookups(\n      Map<String, Map<String, Object>> oldTierLookups\n  )", "class_method_signature": "LookupCoordinatorManager.convertTierLookups(\n      Map<String, Map<String, Object>> oldTierLookups\n  )", "testcase": false, "constructor": false}, {"identifier": "lookupManagementLoop", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void lookupManagementLoop()", "full_signature": "@VisibleForTesting void lookupManagementLoop()", "class_method_signature": "LookupCoordinatorManager.lookupManagementLoop()", "testcase": false, "constructor": false}, {"identifier": "doLookupManagementOnNode", "parameters": "(\n      HostAndPortWithScheme node,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "modifiers": "private", "return": "LookupsState<LookupExtractorFactoryMapContainer>", "signature": "LookupsState<LookupExtractorFactoryMapContainer> doLookupManagementOnNode(\n      HostAndPortWithScheme node,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "full_signature": "private LookupsState<LookupExtractorFactoryMapContainer> doLookupManagementOnNode(\n      HostAndPortWithScheme node,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "class_method_signature": "LookupCoordinatorManager.doLookupManagementOnNode(\n      HostAndPortWithScheme node,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "testcase": false, "constructor": false}, {"identifier": "getToBeLoadedOnNode", "parameters": "(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "modifiers": "@VisibleForTesting", "return": "Map<String, LookupExtractorFactoryMapContainer>", "signature": "Map<String, LookupExtractorFactoryMapContainer> getToBeLoadedOnNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "full_signature": "@VisibleForTesting Map<String, LookupExtractorFactoryMapContainer> getToBeLoadedOnNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "class_method_signature": "LookupCoordinatorManager.getToBeLoadedOnNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "testcase": false, "constructor": false}, {"identifier": "getToBeDroppedFromNode", "parameters": "(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "modifiers": "@VisibleForTesting", "return": "Set<String>", "signature": "Set<String> getToBeDroppedFromNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "full_signature": "@VisibleForTesting Set<String> getToBeDroppedFromNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "class_method_signature": "LookupCoordinatorManager.getToBeDroppedFromNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "testcase": false, "constructor": false}, {"identifier": "getLookupsURL", "parameters": "(HostAndPortWithScheme druidNode)", "modifiers": "static", "return": "URL", "signature": "URL getLookupsURL(HostAndPortWithScheme druidNode)", "full_signature": "static URL getLookupsURL(HostAndPortWithScheme druidNode)", "class_method_signature": "LookupCoordinatorManager.getLookupsURL(HostAndPortWithScheme druidNode)", "testcase": false, "constructor": false}, {"identifier": "getLookupsUpdateURL", "parameters": "(HostAndPortWithScheme druidNode)", "modifiers": "static", "return": "URL", "signature": "URL getLookupsUpdateURL(HostAndPortWithScheme druidNode)", "full_signature": "static URL getLookupsUpdateURL(HostAndPortWithScheme druidNode)", "class_method_signature": "LookupCoordinatorManager.getLookupsUpdateURL(HostAndPortWithScheme druidNode)", "testcase": false, "constructor": false}, {"identifier": "httpStatusIsSuccess", "parameters": "(int statusCode)", "modifiers": "private static", "return": "boolean", "signature": "boolean httpStatusIsSuccess(int statusCode)", "full_signature": "private static boolean httpStatusIsSuccess(int statusCode)", "class_method_signature": "LookupCoordinatorManager.httpStatusIsSuccess(int statusCode)", "testcase": false, "constructor": false}, {"identifier": "backgroundManagerIsRunning", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean backgroundManagerIsRunning()", "full_signature": "@VisibleForTesting boolean backgroundManagerIsRunning()", "class_method_signature": "LookupCoordinatorManager.backgroundManagerIsRunning()", "testcase": false, "constructor": false}, {"identifier": "waitForBackgroundTermination", "parameters": "(long timeout)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean waitForBackgroundTermination(long timeout)", "full_signature": "@VisibleForTesting boolean waitForBackgroundTermination(long timeout)", "class_method_signature": "LookupCoordinatorManager.waitForBackgroundTermination(long timeout)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/druid/server/lookup/cache/LookupCoordinatorManager.java"}, "focal_method": {"identifier": "getToBeLoadedOnNode", "parameters": "(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "modifiers": "@VisibleForTesting", "return": "Map<String, LookupExtractorFactoryMapContainer>", "body": "@VisibleForTesting\n  Map<String, LookupExtractorFactoryMapContainer> getToBeLoadedOnNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )\n  {\n    Map<String, LookupExtractorFactoryMapContainer> toLoad = new HashMap<>();\n    for (Map.Entry<String, LookupExtractorFactoryMapContainer> e : nodeTierLookupsToBe.entrySet()) {\n      String name = e.getKey();\n      LookupExtractorFactoryMapContainer lookupToBe = e.getValue();\n\n      // get it from the current pending notices list on the node\n      LookupExtractorFactoryMapContainer current = currLookupsStateOnNode.getToLoad().get(name);\n\n      if (current == null) {\n        //ok, not on pending list, get from currently loaded lookups on node\n        current = currLookupsStateOnNode.getCurrent().get(name);\n      }\n\n      if (current == null || //lookup is neither pending nor already loaded on the node OR\n          currLookupsStateOnNode.getToDrop().contains(name) || //it is being dropped on the node OR\n          lookupToBe.replaces(current) //lookup is already know to node, but lookupToBe overrides that\n          ) {\n        toLoad.put(name, lookupToBe);\n      }\n    }\n    return toLoad;\n  }", "signature": "Map<String, LookupExtractorFactoryMapContainer> getToBeLoadedOnNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "full_signature": "@VisibleForTesting Map<String, LookupExtractorFactoryMapContainer> getToBeLoadedOnNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "class_method_signature": "LookupCoordinatorManager.getToBeLoadedOnNode(\n      LookupsState<LookupExtractorFactoryMapContainer> currLookupsStateOnNode,\n      Map<String, LookupExtractorFactoryMapContainer> nodeTierLookupsToBe\n  )", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "get", "getToLoad", "get", "getCurrent", "contains", "getToDrop", "replaces", "put"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}