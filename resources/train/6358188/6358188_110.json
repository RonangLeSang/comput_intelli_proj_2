{"test_class": {"identifier": "RemoteTaskRunnerConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new DefaultObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new DefaultObjectMapper()", "var_name": "MAPPER"}, {"original_string": "private static final Period DEFAULT_TIMEOUT = Period.ZERO;", "modifier": "private static final", "type": "Period", "declarator": "DEFAULT_TIMEOUT = Period.ZERO", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "private static final String DEFAULT_VERSION = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_VERSION = \"\"", "var_name": "DEFAULT_VERSION"}, {"original_string": "private static final long DEFAULT_MAX_ZNODE = 10 * 1024;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_MAX_ZNODE = 10 * 1024", "var_name": "DEFAULT_MAX_ZNODE"}, {"original_string": "private static final int DEFAULT_PENDING_TASKS_RUNNER_NUM_THREADS = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PENDING_TASKS_RUNNER_NUM_THREADS = 5", "var_name": "DEFAULT_PENDING_TASKS_RUNNER_NUM_THREADS"}, {"original_string": "private static final int DEFAULT_MAX_RETRIES_BEFORE_BLACKLIST = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_RETRIES_BEFORE_BLACKLIST = 5", "var_name": "DEFAULT_MAX_RETRIES_BEFORE_BLACKLIST"}, {"original_string": "private static final Period DEFAULT_TASK_BACKOFF = new Period(\"PT10M\");", "modifier": "private static final", "type": "Period", "declarator": "DEFAULT_TASK_BACKOFF = new Period(\"PT10M\")", "var_name": "DEFAULT_TASK_BACKOFF"}, {"original_string": "private static final Period DEFAULT_BLACKLIST_CLEANUP_PERIOD = new Period(\"PT5M\");", "modifier": "private static final", "type": "Period", "declarator": "DEFAULT_BLACKLIST_CLEANUP_PERIOD = new Period(\"PT5M\")", "var_name": "DEFAULT_BLACKLIST_CLEANUP_PERIOD"}], "file": "indexing-service/src/test/java/org/apache/druid/indexing/overlord/config/RemoteTaskRunnerConfigTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals() throws Exception\n  {\n    Assert.assertEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n            DEFAULT_TIMEOUT,\n            DEFAULT_TIMEOUT,\n            DEFAULT_VERSION,\n            DEFAULT_MAX_ZNODE,\n            DEFAULT_TIMEOUT,\n            DEFAULT_PENDING_TASKS_RUNNER_NUM_THREADS,\n            DEFAULT_MAX_RETRIES_BEFORE_BLACKLIST,\n            DEFAULT_TASK_BACKOFF,\n            DEFAULT_BLACKLIST_CLEANUP_PERIOD\n        )),\n        reflect(generateRemoteTaskRunnerConfig(\n            DEFAULT_TIMEOUT,\n            DEFAULT_TIMEOUT,\n            DEFAULT_VERSION,\n            DEFAULT_MAX_ZNODE,\n            DEFAULT_TIMEOUT,\n            DEFAULT_PENDING_TASKS_RUNNER_NUM_THREADS,\n            DEFAULT_MAX_RETRIES_BEFORE_BLACKLIST,\n            DEFAULT_TASK_BACKOFF,\n            DEFAULT_BLACKLIST_CLEANUP_PERIOD\n        ))\n    );\n    final Period timeout = Period.years(999);\n    final String version = \"someVersion\";\n    final long max = 20 * 1024;\n    final int pendingTasksRunnerNumThreads = 20;\n    final int maxRetriesBeforeBlacklist = 1;\n    final Period taskBlackListBackoffTime = new Period(\"PT1M\");\n    final Period taskBlackListCleanupPeriod = Period.years(10);\n    Assert.assertEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        )),\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        ))\n    );\n    Assert.assertNotEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        )),\n        reflect(generateRemoteTaskRunnerConfig(\n            DEFAULT_TIMEOUT,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        ))\n    );\n    Assert.assertNotEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        )),\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            DEFAULT_TIMEOUT,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        ))\n    );\n    Assert.assertNotEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        )),\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            DEFAULT_VERSION,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        ))\n    );\n\n    Assert.assertNotEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        )),\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            DEFAULT_MAX_ZNODE,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        ))\n    );\n\n\n    Assert.assertNotEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            timeout,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        )),\n        reflect(generateRemoteTaskRunnerConfig(\n            timeout,\n            timeout,\n            version,\n            max,\n            DEFAULT_TIMEOUT,\n            pendingTasksRunnerNumThreads,\n            maxRetriesBeforeBlacklist,\n            taskBlackListBackoffTime,\n            taskBlackListCleanupPeriod\n        ))\n    );\n\n    Assert.assertNotEquals(\n        reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    pendingTasksRunnerNumThreads,\n                    maxRetriesBeforeBlacklist,\n                    taskBlackListBackoffTime,\n                    taskBlackListCleanupPeriod\n                )),\n        reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    DEFAULT_PENDING_TASKS_RUNNER_NUM_THREADS,\n                    maxRetriesBeforeBlacklist,\n                    taskBlackListBackoffTime,\n                    taskBlackListCleanupPeriod\n                ))\n    );\n\n    Assert.assertNotEquals(\n            reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    pendingTasksRunnerNumThreads,\n                    maxRetriesBeforeBlacklist,\n                    taskBlackListBackoffTime,\n                    taskBlackListCleanupPeriod\n            )),\n            reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    pendingTasksRunnerNumThreads,\n                    DEFAULT_MAX_RETRIES_BEFORE_BLACKLIST,\n                    taskBlackListBackoffTime,\n                    taskBlackListCleanupPeriod\n            ))\n    );\n\n    Assert.assertNotEquals(\n            reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    pendingTasksRunnerNumThreads,\n                    maxRetriesBeforeBlacklist,\n                    taskBlackListBackoffTime,\n                    taskBlackListCleanupPeriod\n            )),\n            reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    pendingTasksRunnerNumThreads,\n                    maxRetriesBeforeBlacklist,\n                    DEFAULT_TASK_BACKOFF,\n                    taskBlackListCleanupPeriod\n            ))\n    );\n\n    Assert.assertNotEquals(\n            reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    pendingTasksRunnerNumThreads,\n                    maxRetriesBeforeBlacklist,\n                    taskBlackListBackoffTime,\n                    taskBlackListCleanupPeriod\n            )),\n            reflect(generateRemoteTaskRunnerConfig(\n                    timeout,\n                    timeout,\n                    version,\n                    max,\n                    timeout,\n                    pendingTasksRunnerNumThreads,\n                    maxRetriesBeforeBlacklist,\n                    taskBlackListBackoffTime,\n                    DEFAULT_BLACKLIST_CLEANUP_PERIOD\n            ))\n    );\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "RemoteTaskRunnerConfigTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "years", "years", "assertEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig", "assertNotEquals", "reflect", "generateRemoteTaskRunnerConfig", "reflect", "generateRemoteTaskRunnerConfig"]}, "focal_class": {"identifier": "RemoteTaskRunnerConfig", "superclass": "extends WorkerTaskRunnerConfig", "interfaces": "", "fields": [{"original_string": "@JsonProperty\n  @NotNull\n  private Period taskAssignmentTimeout = new Period(\"PT5M\");", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "Period", "declarator": "taskAssignmentTimeout = new Period(\"PT5M\")", "var_name": "taskAssignmentTimeout"}, {"original_string": "@JsonProperty\n  @NotNull\n  private Period taskCleanupTimeout = new Period(\"PT15M\");", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "Period", "declarator": "taskCleanupTimeout = new Period(\"PT15M\")", "var_name": "taskCleanupTimeout"}, {"original_string": "@JsonProperty\n  @HumanReadableBytesRange(min = 10 * 1024, max = Integer.MAX_VALUE)\n  private HumanReadableBytes maxZnodeBytes = HumanReadableBytes.valueOf(CuratorUtils.DEFAULT_MAX_ZNODE_BYTES);", "modifier": "@JsonProperty\n  @HumanReadableBytesRange(min = 10 * 1024, max = Integer.MAX_VALUE)\n  private", "type": "HumanReadableBytes", "declarator": "maxZnodeBytes = HumanReadableBytes.valueOf(CuratorUtils.DEFAULT_MAX_ZNODE_BYTES)", "var_name": "maxZnodeBytes"}, {"original_string": "@JsonProperty\n  private Period taskShutdownLinkTimeout = new Period(\"PT1M\");", "modifier": "@JsonProperty\n  private", "type": "Period", "declarator": "taskShutdownLinkTimeout = new Period(\"PT1M\")", "var_name": "taskShutdownLinkTimeout"}, {"original_string": "@JsonProperty\n  @Min(1)\n  private int pendingTasksRunnerNumThreads = 1;", "modifier": "@JsonProperty\n  @Min(1)\n  private", "type": "int", "declarator": "pendingTasksRunnerNumThreads = 1", "var_name": "pendingTasksRunnerNumThreads"}, {"original_string": "@JsonProperty\n  @Min(1)\n  private int maxRetriesBeforeBlacklist = 5;", "modifier": "@JsonProperty\n  @Min(1)\n  private", "type": "int", "declarator": "maxRetriesBeforeBlacklist = 5", "var_name": "maxRetriesBeforeBlacklist"}, {"original_string": "@JsonProperty\n  @NotNull\n  private Period workerBlackListBackoffTime = new Period(\"PT15M\");", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "Period", "declarator": "workerBlackListBackoffTime = new Period(\"PT15M\")", "var_name": "workerBlackListBackoffTime"}, {"original_string": "@JsonProperty\n  @NotNull\n  private Period workerBlackListCleanupPeriod = new Period(\"PT5M\");", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "Period", "declarator": "workerBlackListCleanupPeriod = new Period(\"PT5M\")", "var_name": "workerBlackListCleanupPeriod"}, {"original_string": "@JsonProperty\n  @Max(100)\n  @Min(0)\n  private int maxPercentageBlacklistWorkers = 20;", "modifier": "@JsonProperty\n  @Max(100)\n  @Min(0)\n  private", "type": "int", "declarator": "maxPercentageBlacklistWorkers = 20", "var_name": "maxPercentageBlacklistWorkers"}], "methods": [{"identifier": "getTaskAssignmentTimeout", "parameters": "()", "modifiers": "public", "return": "Period", "signature": "Period getTaskAssignmentTimeout()", "full_signature": "public Period getTaskAssignmentTimeout()", "class_method_signature": "RemoteTaskRunnerConfig.getTaskAssignmentTimeout()", "testcase": false, "constructor": false}, {"identifier": "getTaskCleanupTimeout", "parameters": "()", "modifiers": "public", "return": "Period", "signature": "Period getTaskCleanupTimeout()", "full_signature": "public Period getTaskCleanupTimeout()", "class_method_signature": "RemoteTaskRunnerConfig.getTaskCleanupTimeout()", "testcase": false, "constructor": false}, {"identifier": "getMaxZnodeBytes", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxZnodeBytes()", "full_signature": "public int getMaxZnodeBytes()", "class_method_signature": "RemoteTaskRunnerConfig.getMaxZnodeBytes()", "testcase": false, "constructor": false}, {"identifier": "getTaskShutdownLinkTimeout", "parameters": "()", "modifiers": "public", "return": "Period", "signature": "Period getTaskShutdownLinkTimeout()", "full_signature": "public Period getTaskShutdownLinkTimeout()", "class_method_signature": "RemoteTaskRunnerConfig.getTaskShutdownLinkTimeout()", "testcase": false, "constructor": false}, {"identifier": "getPendingTasksRunnerNumThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPendingTasksRunnerNumThreads()", "full_signature": "public int getPendingTasksRunnerNumThreads()", "class_method_signature": "RemoteTaskRunnerConfig.getPendingTasksRunnerNumThreads()", "testcase": false, "constructor": false}, {"identifier": "getMaxRetriesBeforeBlacklist", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxRetriesBeforeBlacklist()", "full_signature": "public int getMaxRetriesBeforeBlacklist()", "class_method_signature": "RemoteTaskRunnerConfig.getMaxRetriesBeforeBlacklist()", "testcase": false, "constructor": false}, {"identifier": "getWorkerBlackListBackoffTime", "parameters": "()", "modifiers": "public", "return": "Period", "signature": "Period getWorkerBlackListBackoffTime()", "full_signature": "public Period getWorkerBlackListBackoffTime()", "class_method_signature": "RemoteTaskRunnerConfig.getWorkerBlackListBackoffTime()", "testcase": false, "constructor": false}, {"identifier": "getWorkerBlackListCleanupPeriod", "parameters": "()", "modifiers": "public", "return": "Period", "signature": "Period getWorkerBlackListCleanupPeriod()", "full_signature": "public Period getWorkerBlackListCleanupPeriod()", "class_method_signature": "RemoteTaskRunnerConfig.getWorkerBlackListCleanupPeriod()", "testcase": false, "constructor": false}, {"identifier": "getMaxPercentageBlacklistWorkers", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxPercentageBlacklistWorkers()", "full_signature": "public int getMaxPercentageBlacklistWorkers()", "class_method_signature": "RemoteTaskRunnerConfig.getMaxPercentageBlacklistWorkers()", "testcase": false, "constructor": false}, {"identifier": "setMaxPercentageBlacklistWorkers", "parameters": "(int maxPercentageBlacklistWorkers)", "modifiers": "public", "return": "void", "signature": "void setMaxPercentageBlacklistWorkers(int maxPercentageBlacklistWorkers)", "full_signature": "public void setMaxPercentageBlacklistWorkers(int maxPercentageBlacklistWorkers)", "class_method_signature": "RemoteTaskRunnerConfig.setMaxPercentageBlacklistWorkers(int maxPercentageBlacklistWorkers)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RemoteTaskRunnerConfig.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RemoteTaskRunnerConfig.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RemoteTaskRunnerConfig.toString()", "testcase": false, "constructor": false}], "file": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/config/RemoteTaskRunnerConfig.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    RemoteTaskRunnerConfig that = (RemoteTaskRunnerConfig) o;\n\n    if (!maxZnodeBytes.equals(that.maxZnodeBytes)) {\n      return false;\n    }\n    if (pendingTasksRunnerNumThreads != that.pendingTasksRunnerNumThreads) {\n      return false;\n    }\n    if (!taskAssignmentTimeout.equals(that.taskAssignmentTimeout)) {\n      return false;\n    }\n    if (!taskCleanupTimeout.equals(that.taskCleanupTimeout)) {\n      return false;\n    }\n    if (!getMinWorkerVersion().equals(that.getMinWorkerVersion())) {\n      return false;\n    }\n    if (!taskShutdownLinkTimeout.equals(that.taskShutdownLinkTimeout)) {\n      return false;\n    }\n    if (maxRetriesBeforeBlacklist != that.maxRetriesBeforeBlacklist) {\n      return false;\n    }\n    if (!workerBlackListBackoffTime.equals(that.getWorkerBlackListBackoffTime())) {\n      return false;\n    }\n    if (maxPercentageBlacklistWorkers != that.maxPercentageBlacklistWorkers) {\n      return false;\n    }\n    return workerBlackListCleanupPeriod.equals(that.workerBlackListCleanupPeriod);\n\n  }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RemoteTaskRunnerConfig.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals", "equals", "equals", "getMinWorkerVersion", "getMinWorkerVersion", "equals", "equals", "getWorkerBlackListBackoffTime", "equals"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}