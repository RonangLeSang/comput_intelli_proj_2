{"test_class": {"identifier": "ExpressionSelectorsTest", "superclass": "extends InitializedNullHandlingTest", "interfaces": "", "fields": [], "file": "processing/src/test/java/org/apache/druid/segment/virtual/ExpressionSelectorsTest.java"}, "test_case": {"identifier": "test_coerceEvalToSelectorObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_coerceEvalToSelectorObject()\n  {\n    Assert.assertEquals(\n        ImmutableList.of(1L, 2L, 3L),\n        ExpressionSelectors.coerceEvalToSelectorObject(ExprEval.ofLongArray(new Long[]{1L, 2L, 3L}))\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(1.0, 2.0, 3.0),\n        ExpressionSelectors.coerceEvalToSelectorObject(ExprEval.ofDoubleArray(new Double[]{1.0, 2.0, 3.0}))\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(\"a\", \"b\", \"c\"),\n        ExpressionSelectors.coerceEvalToSelectorObject(ExprEval.ofStringArray(new String[]{\"a\", \"b\", \"c\"}))\n    );\n\n    List<String> withNulls = new ArrayList<>();\n    withNulls.add(\"a\");\n    withNulls.add(null);\n    withNulls.add(\"c\");\n    Assert.assertEquals(\n        withNulls,\n        ExpressionSelectors.coerceEvalToSelectorObject(ExprEval.ofStringArray(new String[]{\"a\", null, \"c\"}))\n    );\n  }", "signature": "void test_coerceEvalToSelectorObject()", "full_signature": "@Test public void test_coerceEvalToSelectorObject()", "class_method_signature": "ExpressionSelectorsTest.test_coerceEvalToSelectorObject()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "coerceEvalToSelectorObject", "ofLongArray", "assertEquals", "of", "coerceEvalToSelectorObject", "ofDoubleArray", "assertEquals", "of", "coerceEvalToSelectorObject", "ofStringArray", "add", "add", "add", "assertEquals", "coerceEvalToSelectorObject", "ofStringArray"]}, "focal_class": {"identifier": "ExpressionSelectors", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ExpressionSelectors", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExpressionSelectors()", "full_signature": "private  ExpressionSelectors()", "class_method_signature": "ExpressionSelectors.ExpressionSelectors()", "testcase": false, "constructor": true}, {"identifier": "makeColumnValueSelector", "parameters": "(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "modifiers": "public static", "return": "ColumnValueSelector", "signature": "ColumnValueSelector makeColumnValueSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "full_signature": "public static ColumnValueSelector makeColumnValueSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "class_method_signature": "ExpressionSelectors.makeColumnValueSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "testcase": false, "constructor": false}, {"identifier": "makeExprEvalSelector", "parameters": "(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "modifiers": "public static", "return": "ColumnValueSelector<ExprEval>", "signature": "ColumnValueSelector<ExprEval> makeExprEvalSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "full_signature": "public static ColumnValueSelector<ExprEval> makeExprEvalSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "class_method_signature": "ExpressionSelectors.makeExprEvalSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      Expr expression\n  )", "testcase": false, "constructor": false}, {"identifier": "makeExprEvalSelector", "parameters": "(\n      ColumnSelectorFactory columnSelectorFactory,\n      ExpressionPlan plan\n  )", "modifiers": "public static", "return": "ColumnValueSelector<ExprEval>", "signature": "ColumnValueSelector<ExprEval> makeExprEvalSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      ExpressionPlan plan\n  )", "full_signature": "public static ColumnValueSelector<ExprEval> makeExprEvalSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      ExpressionPlan plan\n  )", "class_method_signature": "ExpressionSelectors.makeExprEvalSelector(\n      ColumnSelectorFactory columnSelectorFactory,\n      ExpressionPlan plan\n  )", "testcase": false, "constructor": false}, {"identifier": "makeDimensionSelector", "parameters": "(\n      final ColumnSelectorFactory columnSelectorFactory,\n      final Expr expression,\n      @Nullable final ExtractionFn extractionFn\n  )", "modifiers": "public static", "return": "DimensionSelector", "signature": "DimensionSelector makeDimensionSelector(\n      final ColumnSelectorFactory columnSelectorFactory,\n      final Expr expression,\n      @Nullable final ExtractionFn extractionFn\n  )", "full_signature": "public static DimensionSelector makeDimensionSelector(\n      final ColumnSelectorFactory columnSelectorFactory,\n      final Expr expression,\n      @Nullable final ExtractionFn extractionFn\n  )", "class_method_signature": "ExpressionSelectors.makeDimensionSelector(\n      final ColumnSelectorFactory columnSelectorFactory,\n      final Expr expression,\n      @Nullable final ExtractionFn extractionFn\n  )", "testcase": false, "constructor": false}, {"identifier": "canMapOverDictionary", "parameters": "(\n      final Expr.BindingAnalysis bindingAnalysis,\n      final ColumnCapabilities.Capable hasMultipleValues\n  )", "modifiers": "public static", "return": "boolean", "signature": "boolean canMapOverDictionary(\n      final Expr.BindingAnalysis bindingAnalysis,\n      final ColumnCapabilities.Capable hasMultipleValues\n  )", "full_signature": "public static boolean canMapOverDictionary(\n      final Expr.BindingAnalysis bindingAnalysis,\n      final ColumnCapabilities.Capable hasMultipleValues\n  )", "class_method_signature": "ExpressionSelectors.canMapOverDictionary(\n      final Expr.BindingAnalysis bindingAnalysis,\n      final ColumnCapabilities.Capable hasMultipleValues\n  )", "testcase": false, "constructor": false}, {"identifier": "createBindings", "parameters": "(\n      Expr.BindingAnalysis bindingAnalysis,\n      ColumnSelectorFactory columnSelectorFactory\n  )", "modifiers": "private static", "return": "Expr.ObjectBinding", "signature": "Expr.ObjectBinding createBindings(\n      Expr.BindingAnalysis bindingAnalysis,\n      ColumnSelectorFactory columnSelectorFactory\n  )", "full_signature": "private static Expr.ObjectBinding createBindings(\n      Expr.BindingAnalysis bindingAnalysis,\n      ColumnSelectorFactory columnSelectorFactory\n  )", "class_method_signature": "ExpressionSelectors.createBindings(\n      Expr.BindingAnalysis bindingAnalysis,\n      ColumnSelectorFactory columnSelectorFactory\n  )", "testcase": false, "constructor": false}, {"identifier": "makeNullableNumericSupplier", "parameters": "(\n      ColumnValueSelector selector,\n      Supplier<T> supplier\n  )", "modifiers": "private static", "return": "Supplier<T>", "signature": "Supplier<T> makeNullableNumericSupplier(\n      ColumnValueSelector selector,\n      Supplier<T> supplier\n  )", "full_signature": "private static Supplier<T> makeNullableNumericSupplier(\n      ColumnValueSelector selector,\n      Supplier<T> supplier\n  )", "class_method_signature": "ExpressionSelectors.makeNullableNumericSupplier(\n      ColumnValueSelector selector,\n      Supplier<T> supplier\n  )", "testcase": false, "constructor": false}, {"identifier": "supplierFromDimensionSelector", "parameters": "(final DimensionSelector selector, boolean coerceArray)", "modifiers": "@VisibleForTesting static", "return": "Supplier<Object>", "signature": "Supplier<Object> supplierFromDimensionSelector(final DimensionSelector selector, boolean coerceArray)", "full_signature": "@VisibleForTesting static Supplier<Object> supplierFromDimensionSelector(final DimensionSelector selector, boolean coerceArray)", "class_method_signature": "ExpressionSelectors.supplierFromDimensionSelector(final DimensionSelector selector, boolean coerceArray)", "testcase": false, "constructor": false}, {"identifier": "supplierFromObjectSelector", "parameters": "(final BaseObjectColumnValueSelector<?> selector)", "modifiers": "@Nullable static", "return": "Supplier<Object>", "signature": "Supplier<Object> supplierFromObjectSelector(final BaseObjectColumnValueSelector<?> selector)", "full_signature": "@Nullable static Supplier<Object> supplierFromObjectSelector(final BaseObjectColumnValueSelector<?> selector)", "class_method_signature": "ExpressionSelectors.supplierFromObjectSelector(final BaseObjectColumnValueSelector<?> selector)", "testcase": false, "constructor": false}, {"identifier": "coerceListToArray", "parameters": "(@Nullable List<?> val)", "modifiers": "public static", "return": "Object", "signature": "Object coerceListToArray(@Nullable List<?> val)", "full_signature": "public static Object coerceListToArray(@Nullable List<?> val)", "class_method_signature": "ExpressionSelectors.coerceListToArray(@Nullable List<?> val)", "testcase": false, "constructor": false}, {"identifier": "convertType", "parameters": "(@Nullable Class existing, Class next)", "modifiers": "private static", "return": "Class", "signature": "Class convertType(@Nullable Class existing, Class next)", "full_signature": "private static Class convertType(@Nullable Class existing, Class next)", "class_method_signature": "ExpressionSelectors.convertType(@Nullable Class existing, Class next)", "testcase": false, "constructor": false}, {"identifier": "coerceEvalToSelectorObject", "parameters": "(ExprEval eval)", "modifiers": "@Nullable public static", "return": "Object", "signature": "Object coerceEvalToSelectorObject(ExprEval eval)", "full_signature": "@Nullable public static Object coerceEvalToSelectorObject(ExprEval eval)", "class_method_signature": "ExpressionSelectors.coerceEvalToSelectorObject(ExprEval eval)", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/virtual/ExpressionSelectors.java"}, "focal_method": {"identifier": "coerceEvalToSelectorObject", "parameters": "(ExprEval eval)", "modifiers": "@Nullable public static", "return": "Object", "body": "@Nullable\n  public static Object coerceEvalToSelectorObject(ExprEval eval)\n  {\n    switch (eval.type()) {\n      case STRING_ARRAY:\n        return Arrays.stream(eval.asStringArray()).collect(Collectors.toList());\n      case DOUBLE_ARRAY:\n        return Arrays.stream(eval.asDoubleArray()).collect(Collectors.toList());\n      case LONG_ARRAY:\n        return Arrays.stream(eval.asLongArray()).collect(Collectors.toList());\n      default:\n        return eval.value();\n    }\n  }", "signature": "Object coerceEvalToSelectorObject(ExprEval eval)", "full_signature": "@Nullable public static Object coerceEvalToSelectorObject(ExprEval eval)", "class_method_signature": "ExpressionSelectors.coerceEvalToSelectorObject(ExprEval eval)", "testcase": false, "constructor": false, "invocations": ["type", "collect", "stream", "asStringArray", "toList", "collect", "stream", "asDoubleArray", "toList", "collect", "stream", "asLongArray", "toList", "value"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}