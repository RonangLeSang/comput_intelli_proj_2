{"test_class": {"identifier": "NotFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "processing/src/test/java/org/apache/druid/segment/filter/NotFilterTest.java"}, "test_case": {"identifier": "testHashCodeCompareWithBaseFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHashCodeCompareWithBaseFilter()\n  {\n    final Filter baseFilter = FilterTestUtils.selector(\"col1\", \"1\");\n    final Filter notFilter = FilterTestUtils.not(baseFilter);\n    Assert.assertNotEquals(notFilter.hashCode(), baseFilter.hashCode());\n  }", "signature": "void testHashCodeCompareWithBaseFilter()", "full_signature": "@Test public void testHashCodeCompareWithBaseFilter()", "class_method_signature": "NotFilterTest.testHashCodeCompareWithBaseFilter()", "testcase": true, "constructor": false, "invocations": ["selector", "not", "assertNotEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "NotFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private final Filter baseFilter;", "modifier": "private final", "type": "Filter", "declarator": "baseFilter", "var_name": "baseFilter"}], "methods": [{"identifier": "NotFilter", "parameters": "(Filter baseFilter)", "modifiers": "public", "return": "", "signature": " NotFilter(Filter baseFilter)", "full_signature": "public  NotFilter(Filter baseFilter)", "class_method_signature": "NotFilter.NotFilter(Filter baseFilter)", "testcase": false, "constructor": true}, {"identifier": "getBitmapResult", "parameters": "(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)", "modifiers": "@Override public", "return": "T", "signature": "T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)", "full_signature": "@Override public T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)", "class_method_signature": "NotFilter.getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)", "testcase": false, "constructor": false}, {"identifier": "makeMatcher", "parameters": "(ColumnSelectorFactory factory)", "modifiers": "@Override public", "return": "ValueMatcher", "signature": "ValueMatcher makeMatcher(ColumnSelectorFactory factory)", "full_signature": "@Override public ValueMatcher makeMatcher(ColumnSelectorFactory factory)", "class_method_signature": "NotFilter.makeMatcher(ColumnSelectorFactory factory)", "testcase": false, "constructor": false}, {"identifier": "makeVectorMatcher", "parameters": "(final VectorColumnSelectorFactory factory)", "modifiers": "@Override public", "return": "VectorValueMatcher", "signature": "VectorValueMatcher makeVectorMatcher(final VectorColumnSelectorFactory factory)", "full_signature": "@Override public VectorValueMatcher makeVectorMatcher(final VectorColumnSelectorFactory factory)", "class_method_signature": "NotFilter.makeVectorMatcher(final VectorColumnSelectorFactory factory)", "testcase": false, "constructor": false}, {"identifier": "canVectorizeMatcher", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canVectorizeMatcher()", "full_signature": "@Override public boolean canVectorizeMatcher()", "class_method_signature": "NotFilter.canVectorizeMatcher()", "testcase": false, "constructor": false}, {"identifier": "getRequiredColumns", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getRequiredColumns()", "full_signature": "@Override public Set<String> getRequiredColumns()", "class_method_signature": "NotFilter.getRequiredColumns()", "testcase": false, "constructor": false}, {"identifier": "supportsRequiredColumnRewrite", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsRequiredColumnRewrite()", "full_signature": "@Override public boolean supportsRequiredColumnRewrite()", "class_method_signature": "NotFilter.supportsRequiredColumnRewrite()", "testcase": false, "constructor": false}, {"identifier": "rewriteRequiredColumns", "parameters": "(Map<String, String> columnRewrites)", "modifiers": "@Override public", "return": "Filter", "signature": "Filter rewriteRequiredColumns(Map<String, String> columnRewrites)", "full_signature": "@Override public Filter rewriteRequiredColumns(Map<String, String> columnRewrites)", "class_method_signature": "NotFilter.rewriteRequiredColumns(Map<String, String> columnRewrites)", "testcase": false, "constructor": false}, {"identifier": "supportsBitmapIndex", "parameters": "(BitmapIndexSelector selector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsBitmapIndex(BitmapIndexSelector selector)", "full_signature": "@Override public boolean supportsBitmapIndex(BitmapIndexSelector selector)", "class_method_signature": "NotFilter.supportsBitmapIndex(BitmapIndexSelector selector)", "testcase": false, "constructor": false}, {"identifier": "shouldUseBitmapIndex", "parameters": "(BitmapIndexSelector selector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldUseBitmapIndex(BitmapIndexSelector selector)", "full_signature": "@Override public boolean shouldUseBitmapIndex(BitmapIndexSelector selector)", "class_method_signature": "NotFilter.shouldUseBitmapIndex(BitmapIndexSelector selector)", "testcase": false, "constructor": false}, {"identifier": "supportsSelectivityEstimation", "parameters": "(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)", "full_signature": "@Override public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)", "class_method_signature": "NotFilter.supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)", "testcase": false, "constructor": false}, {"identifier": "estimateSelectivity", "parameters": "(BitmapIndexSelector indexSelector)", "modifiers": "@Override public", "return": "double", "signature": "double estimateSelectivity(BitmapIndexSelector indexSelector)", "full_signature": "@Override public double estimateSelectivity(BitmapIndexSelector indexSelector)", "class_method_signature": "NotFilter.estimateSelectivity(BitmapIndexSelector indexSelector)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NotFilter.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "NotFilter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NotFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getBaseFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getBaseFilter()", "full_signature": "public Filter getBaseFilter()", "class_method_signature": "NotFilter.getBaseFilter()", "testcase": false, "constructor": false}], "file": "processing/src/main/java/org/apache/druid/segment/filter/NotFilter.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int hashCode()\n  {\n    // to return a different hash from baseFilter\n    return Objects.hash(1, baseFilter);\n  }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NotFilter.hashCode()", "testcase": false, "constructor": false, "invocations": ["hash"]}, "repository": {"repo_id": 6358188, "url": "https://github.com/apache/druid", "stars": 9116, "created": "10/23/2012 7:08:07 PM +00:00", "updates": "2020-01-27T21:36:20+00:00", "fork": "False", "license": "licensed"}}