{"test_class": {"identifier": "ActorServiceImplTest", "superclass": "extends AbstractEntityCrudTest<Long, Actor>", "interfaces": "", "fields": [{"original_string": "ActorService actorService;", "modifier": "", "type": "ActorService", "declarator": "actorService", "var_name": "actorService"}, {"original_string": "ActorRelationService actorRelationService;", "modifier": "", "type": "ActorRelationService", "declarator": "actorRelationService", "var_name": "actorRelationService"}, {"original_string": "RoleService roleService;", "modifier": "", "type": "RoleService", "declarator": "roleService", "var_name": "roleService"}, {"original_string": "ResourceService moduleService;", "modifier": "", "type": "ResourceService", "declarator": "moduleService", "var_name": "moduleService"}], "file": "bc-identity/src/test/java/cn/bc/identity/service/ActorServiceImplTest.java"}, "test_case": {"identifier": "testFindDescendantUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFindDescendantUser() {\n    // \u5355\u4f4d1\n    Actor unit = this.createActor(Actor.TYPE_UNIT, \"unit1\");\n    this.actorService.save(unit);\n    Assert.assertNotNull(unit.getId());\n\n    // \u5355\u4f4d\u4e0b\u7684\u90e8\u95e81\n    Actor dep1 = this.createActor(Actor.TYPE_DEPARTMENT, \"dep-b\");\n    this.actorService.save(dep1);\n    Assert.assertNotNull(dep1.getId());\n    ActorRelation ar1 = createActorRelation(unit, dep1,\n      ActorRelation.TYPE_BELONG, \"02\");\n    actorRelationService.save(ar1);\n\n    // \u5355\u4f4d\u4e0b\u7684\u4eba\u5458\n    Actor user1 = this.createActor(Actor.TYPE_USER, \"user1\");\n    this.actorService.save(user1);\n    Assert.assertNotNull(user1.getId());\n    ActorRelation ar2 = createActorRelation(unit, user1,\n      ActorRelation.TYPE_BELONG, null);\n    actorRelationService.save(ar2);\n\n    // \u90e8\u95e81\u4e0b\u7684\u4eba\u5458\n    Actor user2 = this.createActor(Actor.TYPE_USER, \"user2\");\n    this.actorService.save(user2);\n    Assert.assertNotNull(user2.getId());\n    ActorRelation ar3 = createActorRelation(dep1, user2,\n      ActorRelation.TYPE_BELONG, null);\n    actorRelationService.save(ar3);\n\n    // \u53cd\u67e5\u90e8\u95e81\u4e0b\u7684\u4eba\u5458\n    List<Actor> users = this.actorService.findDescendantUser(dep1.getId());\n    Assert.assertNotNull(users);\n    Assert.assertEquals(1, users.size());\n    Assert.assertEquals(user2, users.get(0));\n\n    // \u53cd\u67e5\u5355\u4f4d\u4e0b\u7684\u4eba\u5458\n    users = this.actorService.findDescendantUser(unit.getId());\n    Assert.assertNotNull(users);\n    Assert.assertEquals(2, users.size());\n    Assert.assertEquals(user1, users.get(0));\n    Assert.assertEquals(user2, users.get(1));\n  }", "signature": "void testFindDescendantUser()", "full_signature": "@Test public void testFindDescendantUser()", "class_method_signature": "ActorServiceImplTest.testFindDescendantUser()", "testcase": true, "constructor": false, "invocations": ["createActor", "save", "assertNotNull", "getId", "createActor", "save", "assertNotNull", "getId", "createActorRelation", "save", "createActor", "save", "assertNotNull", "getId", "createActorRelation", "save", "createActor", "save", "assertNotNull", "getId", "createActorRelation", "save", "findDescendantUser", "getId", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "findDescendantUser", "getId", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ActorServiceImpl", "superclass": "extends DefaultCrudService<Actor>", "interfaces": "implements\n  ActorService", "fields": [{"original_string": "private ActorDao actorDao;", "modifier": "private", "type": "ActorDao", "declarator": "actorDao", "var_name": "actorDao"}], "methods": [{"identifier": "setActorDao", "parameters": "(ActorDao actorDao)", "modifiers": "public", "return": "void", "signature": "void setActorDao(ActorDao actorDao)", "full_signature": "public void setActorDao(ActorDao actorDao)", "class_method_signature": "ActorServiceImpl.setActorDao(ActorDao actorDao)", "testcase": false, "constructor": false}, {"identifier": "getActorDao", "parameters": "()", "modifiers": "public", "return": "ActorDao", "signature": "ActorDao getActorDao()", "full_signature": "public ActorDao getActorDao()", "class_method_signature": "ActorServiceImpl.getActorDao()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Serializable id)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Serializable id)", "full_signature": "@Override public void delete(Serializable id)", "class_method_signature": "ActorServiceImpl.delete(Serializable id)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Serializable[] ids)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Serializable[] ids)", "full_signature": "@Override public void delete(Serializable[] ids)", "class_method_signature": "ActorServiceImpl.delete(Serializable[] ids)", "testcase": false, "constructor": false}, {"identifier": "loadByCode", "parameters": "(String actorCode)", "modifiers": "public", "return": "Actor", "signature": "Actor loadByCode(String actorCode)", "full_signature": "public Actor loadByCode(String actorCode)", "class_method_signature": "ActorServiceImpl.loadByCode(String actorCode)", "testcase": false, "constructor": false}, {"identifier": "loadBelong", "parameters": "(Long followerId, Integer[] masterTypes)", "modifiers": "public", "return": "Actor", "signature": "Actor loadBelong(Long followerId, Integer[] masterTypes)", "full_signature": "public Actor loadBelong(Long followerId, Integer[] masterTypes)", "class_method_signature": "ActorServiceImpl.loadBelong(Long followerId, Integer[] masterTypes)", "testcase": false, "constructor": false}, {"identifier": "findBelong", "parameters": "(Long followerId, Integer[] masterTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findBelong(Long followerId, Integer[] masterTypes)", "full_signature": "public List<Actor> findBelong(Long followerId, Integer[] masterTypes)", "class_method_signature": "ActorServiceImpl.findBelong(Long followerId, Integer[] masterTypes)", "testcase": false, "constructor": false}, {"identifier": "findBelong", "parameters": "(Long[] followerIds, Integer[] masterTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findBelong(Long[] followerIds, Integer[] masterTypes)", "full_signature": "public List<Actor> findBelong(Long[] followerIds, Integer[] masterTypes)", "class_method_signature": "ActorServiceImpl.findBelong(Long[] followerIds, Integer[] masterTypes)", "testcase": false, "constructor": false}, {"identifier": "findMaster", "parameters": "(Long followerId, Integer[] relationTypes,\n                                Integer[] masterTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findMaster(Long followerId, Integer[] relationTypes,\n                                Integer[] masterTypes)", "full_signature": "public List<Actor> findMaster(Long followerId, Integer[] relationTypes,\n                                Integer[] masterTypes)", "class_method_signature": "ActorServiceImpl.findMaster(Long followerId, Integer[] relationTypes,\n                                Integer[] masterTypes)", "testcase": false, "constructor": false}, {"identifier": "findFollower", "parameters": "(Long masterId, Integer[] relationTypes,\n                                  Integer[] followerTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findFollower(Long masterId, Integer[] relationTypes,\n                                  Integer[] followerTypes)", "full_signature": "public List<Actor> findFollower(Long masterId, Integer[] relationTypes,\n                                  Integer[] followerTypes)", "class_method_signature": "ActorServiceImpl.findFollower(Long masterId, Integer[] relationTypes,\n                                  Integer[] followerTypes)", "testcase": false, "constructor": false}, {"identifier": "findFollowerWithName", "parameters": "(Long masterId, String followerName,\n                                          Integer[] relationTypes, Integer[] followerTypes,\n                                          Integer[] followerStatuses)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findFollowerWithName(Long masterId, String followerName,\n                                          Integer[] relationTypes, Integer[] followerTypes,\n                                          Integer[] followerStatuses)", "full_signature": "public List<Actor> findFollowerWithName(Long masterId, String followerName,\n                                          Integer[] relationTypes, Integer[] followerTypes,\n                                          Integer[] followerStatuses)", "class_method_signature": "ActorServiceImpl.findFollowerWithName(Long masterId, String followerName,\n                                          Integer[] relationTypes, Integer[] followerTypes,\n                                          Integer[] followerStatuses)", "testcase": false, "constructor": false}, {"identifier": "findFollwerWithIds", "parameters": "(Long[] masterIds,\n                                        Integer[] relationTypes, Integer[] followerTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findFollwerWithIds(Long[] masterIds,\n                                        Integer[] relationTypes, Integer[] followerTypes)", "full_signature": "public List<Actor> findFollwerWithIds(Long[] masterIds,\n                                        Integer[] relationTypes, Integer[] followerTypes)", "class_method_signature": "ActorServiceImpl.findFollwerWithIds(Long[] masterIds,\n                                        Integer[] relationTypes, Integer[] followerTypes)", "testcase": false, "constructor": false}, {"identifier": "findTopUnit", "parameters": "()", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findTopUnit()", "full_signature": "public List<Actor> findTopUnit()", "class_method_signature": "ActorServiceImpl.findTopUnit()", "testcase": false, "constructor": false}, {"identifier": "findAllUnit", "parameters": "(Integer... statues)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findAllUnit(Integer... statues)", "full_signature": "public List<Actor> findAllUnit(Integer... statues)", "class_method_signature": "ActorServiceImpl.findAllUnit(Integer... statues)", "testcase": false, "constructor": false}, {"identifier": "findLowerOrganization", "parameters": "(Long higherOrganizationId,\n                                           Integer... lowerOrganizationTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findLowerOrganization(Long higherOrganizationId,\n                                           Integer... lowerOrganizationTypes)", "full_signature": "public List<Actor> findLowerOrganization(Long higherOrganizationId,\n                                           Integer... lowerOrganizationTypes)", "class_method_signature": "ActorServiceImpl.findLowerOrganization(Long higherOrganizationId,\n                                           Integer... lowerOrganizationTypes)", "testcase": false, "constructor": false}, {"identifier": "findHigherOrganization", "parameters": "(Long lowerOrganizationId,\n                                            Integer... higherOrganizationTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findHigherOrganization(Long lowerOrganizationId,\n                                            Integer... higherOrganizationTypes)", "full_signature": "public List<Actor> findHigherOrganization(Long lowerOrganizationId,\n                                            Integer... higherOrganizationTypes)", "class_method_signature": "ActorServiceImpl.findHigherOrganization(Long lowerOrganizationId,\n                                            Integer... higherOrganizationTypes)", "testcase": false, "constructor": false}, {"identifier": "findUser", "parameters": "(Long organizationId)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findUser(Long organizationId)", "full_signature": "public List<Actor> findUser(Long organizationId)", "class_method_signature": "ActorServiceImpl.findUser(Long organizationId)", "testcase": false, "constructor": false}, {"identifier": "findAncestorOrganization", "parameters": "(Long lowerOrganizationId,\n                                              Integer... ancestorOrganizationTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findAncestorOrganization(Long lowerOrganizationId,\n                                              Integer... ancestorOrganizationTypes)", "full_signature": "public List<Actor> findAncestorOrganization(Long lowerOrganizationId,\n                                              Integer... ancestorOrganizationTypes)", "class_method_signature": "ActorServiceImpl.findAncestorOrganization(Long lowerOrganizationId,\n                                              Integer... ancestorOrganizationTypes)", "testcase": false, "constructor": false}, {"identifier": "findDescendantOrganization", "parameters": "(Long higherOrganizationId,\n                                                Integer... descendantOrganizationTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findDescendantOrganization(Long higherOrganizationId,\n                                                Integer... descendantOrganizationTypes)", "full_signature": "public List<Actor> findDescendantOrganization(Long higherOrganizationId,\n                                                Integer... descendantOrganizationTypes)", "class_method_signature": "ActorServiceImpl.findDescendantOrganization(Long higherOrganizationId,\n                                                Integer... descendantOrganizationTypes)", "testcase": false, "constructor": false}, {"identifier": "findDescendantUser", "parameters": "(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findDescendantUser(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "full_signature": "public List<Actor> findDescendantUser(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "class_method_signature": "ActorServiceImpl.findDescendantUser(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "testcase": false, "constructor": false}, {"identifier": "findCanUseModules", "parameters": "(Long actorId)", "modifiers": "public", "return": "List<Resource>", "signature": "List<Resource> findCanUseModules(Long actorId)", "full_signature": "public List<Resource> findCanUseModules(Long actorId)", "class_method_signature": "ActorServiceImpl.findCanUseModules(Long actorId)", "testcase": false, "constructor": false}, {"identifier": "save4belong", "parameters": "(Actor follower, Long belongId)", "modifiers": "public", "return": "Actor", "signature": "Actor save4belong(Actor follower, Long belongId)", "full_signature": "public Actor save4belong(Actor follower, Long belongId)", "class_method_signature": "ActorServiceImpl.save4belong(Actor follower, Long belongId)", "testcase": false, "constructor": false}, {"identifier": "save4belong", "parameters": "(Actor follower, Long[] belongIds)", "modifiers": "public", "return": "Actor", "signature": "Actor save4belong(Actor follower, Long[] belongIds)", "full_signature": "public Actor save4belong(Actor follower, Long[] belongIds)", "class_method_signature": "ActorServiceImpl.save4belong(Actor follower, Long[] belongIds)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Integer[] actorTypes, Integer[] actorStatues)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> find(Integer[] actorTypes, Integer[] actorStatues)", "full_signature": "public List<Actor> find(Integer[] actorTypes, Integer[] actorStatues)", "class_method_signature": "ActorServiceImpl.find(Integer[] actorTypes, Integer[] actorStatues)", "testcase": false, "constructor": false}, {"identifier": "findHistory", "parameters": "(Integer[] actorTypes,\n                                        Integer[] actorStatues)", "modifiers": "public", "return": "List<ActorHistory>", "signature": "List<ActorHistory> findHistory(Integer[] actorTypes,\n                                        Integer[] actorStatues)", "full_signature": "public List<ActorHistory> findHistory(Integer[] actorTypes,\n                                        Integer[] actorStatues)", "class_method_signature": "ActorServiceImpl.findHistory(Integer[] actorTypes,\n                                        Integer[] actorStatues)", "testcase": false, "constructor": false}, {"identifier": "find4option", "parameters": "(Integer[] actorTypes,\n                                               Integer[] actorStatues)", "modifiers": "public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> find4option(Integer[] actorTypes,\n                                               Integer[] actorStatues)", "full_signature": "public List<Map<String, String>> find4option(Integer[] actorTypes,\n                                               Integer[] actorStatues)", "class_method_signature": "ActorServiceImpl.find4option(Integer[] actorTypes,\n                                               Integer[] actorStatues)", "testcase": false, "constructor": false}, {"identifier": "findHistory4option", "parameters": "(Integer[] actorTypes,\n                                                      Integer[] actorStatues)", "modifiers": "public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findHistory4option(Integer[] actorTypes,\n                                                      Integer[] actorStatues)", "full_signature": "public List<Map<String, String>> findHistory4option(Integer[] actorTypes,\n                                                      Integer[] actorStatues)", "class_method_signature": "ActorServiceImpl.findHistory4option(Integer[] actorTypes,\n                                                      Integer[] actorStatues)", "testcase": false, "constructor": false}, {"identifier": "loadActorNameByCode", "parameters": "(String actorCode)", "modifiers": "public", "return": "String", "signature": "String loadActorNameByCode(String actorCode)", "full_signature": "public String loadActorNameByCode(String actorCode)", "class_method_signature": "ActorServiceImpl.loadActorNameByCode(String actorCode)", "testcase": false, "constructor": false}, {"identifier": "loadActorFullNameByCode", "parameters": "(String actorCode)", "modifiers": "public", "return": "String", "signature": "String loadActorFullNameByCode(String actorCode)", "full_signature": "public String loadActorFullNameByCode(String actorCode)", "class_method_signature": "ActorServiceImpl.loadActorFullNameByCode(String actorCode)", "testcase": false, "constructor": false}, {"identifier": "findByName", "parameters": "(String actorName, Integer[] actorTypes,\n                                Integer[] actorStatues)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findByName(String actorName, Integer[] actorTypes,\n                                Integer[] actorStatues)", "full_signature": "public List<Actor> findByName(String actorName, Integer[] actorTypes,\n                                Integer[] actorStatues)", "class_method_signature": "ActorServiceImpl.findByName(String actorName, Integer[] actorTypes,\n                                Integer[] actorStatues)", "testcase": false, "constructor": false}, {"identifier": "isUnique", "parameters": "(Long id, String code, int type)", "modifiers": "public", "return": "boolean", "signature": "boolean isUnique(Long id, String code, int type)", "full_signature": "public boolean isUnique(Long id, String code, int type)", "class_method_signature": "ActorServiceImpl.isUnique(Long id, String code, int type)", "testcase": false, "constructor": false}, {"identifier": "findMailAddressByGroup", "parameters": "(List<String> groupCodes)", "modifiers": "public", "return": "String[]", "signature": "String[] findMailAddressByGroup(List<String> groupCodes)", "full_signature": "public String[] findMailAddressByGroup(List<String> groupCodes)", "class_method_signature": "ActorServiceImpl.findMailAddressByGroup(List<String> groupCodes)", "testcase": false, "constructor": false}, {"identifier": "findMailAddressByUser", "parameters": "(String[] userCodes)", "modifiers": "public", "return": "String[]", "signature": "String[] findMailAddressByUser(String[] userCodes)", "full_signature": "public String[] findMailAddressByUser(String[] userCodes)", "class_method_signature": "ActorServiceImpl.findMailAddressByUser(String[] userCodes)", "testcase": false, "constructor": false}, {"identifier": "findUser", "parameters": "(Long organizationId, Integer[] status)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findUser(Long organizationId, Integer[] status)", "full_signature": "public List<Actor> findUser(Long organizationId, Integer[] status)", "class_method_signature": "ActorServiceImpl.findUser(Long organizationId, Integer[] status)", "testcase": false, "constructor": false}, {"identifier": "findDescendantUser", "parameters": "(Long organizationId,\n                                        Integer[] status, Integer... descendantOrganizationTypes)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> findDescendantUser(Long organizationId,\n                                        Integer[] status, Integer... descendantOrganizationTypes)", "full_signature": "public List<Actor> findDescendantUser(Long organizationId,\n                                        Integer[] status, Integer... descendantOrganizationTypes)", "class_method_signature": "ActorServiceImpl.findDescendantUser(Long organizationId,\n                                        Integer[] status, Integer... descendantOrganizationTypes)", "testcase": false, "constructor": false}, {"identifier": "findFollowerCode", "parameters": "(String masterCode, Integer[] relationTypes\n    , Integer[] followerTypes, Integer[] followerStatuses)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> findFollowerCode(String masterCode, Integer[] relationTypes\n    , Integer[] followerTypes, Integer[] followerStatuses)", "full_signature": "@Override public List<String> findFollowerCode(String masterCode, Integer[] relationTypes\n    , Integer[] followerTypes, Integer[] followerStatuses)", "class_method_signature": "ActorServiceImpl.findFollowerCode(String masterCode, Integer[] relationTypes\n    , Integer[] followerTypes, Integer[] followerStatuses)", "testcase": false, "constructor": false}], "file": "bc-identity/src/main/java/cn/bc/identity/service/ActorServiceImpl.java"}, "focal_method": {"identifier": "findDescendantUser", "parameters": "(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "modifiers": "public", "return": "List<Actor>", "body": "public List<Actor> findDescendantUser(Long organizationId,\n                                        Integer... descendantOrganizationTypes) {\n    return this.actorDao.findDescendantUser(organizationId,\n      descendantOrganizationTypes);\n  }", "signature": "List<Actor> findDescendantUser(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "full_signature": "public List<Actor> findDescendantUser(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "class_method_signature": "ActorServiceImpl.findDescendantUser(Long organizationId,\n                                        Integer... descendantOrganizationTypes)", "testcase": false, "constructor": false, "invocations": ["findDescendantUser"]}, "repository": {"repo_id": 1870998, "url": "https://github.com/bcsoft/bc-framework", "stars": 26, "created": "6/9/2011 2:10:06 PM +00:00", "updates": "2019-05-30T14:11:53+00:00", "fork": "False", "license": "licensed"}}