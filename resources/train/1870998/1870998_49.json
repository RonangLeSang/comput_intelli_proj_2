{"test_class": {"identifier": "JsonUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "bc-core/src/test/java/cn/bc/core/util/JsonUtilsTest.java"}, "test_case": {"identifier": "toMap_Nested_Array_Simple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void toMap_Nested_Array_Simple() {\n    String str = \"{\\\"str\\\":\\\"str\\\",\\\"int\\\":1,\\\"bool\\\":true,\\\"array\\\":[\\\"a1\\\",1,true]}\";\n    Map<String, Object> map = JsonUtils.toMap(str);\n\n    Assert.assertEquals(\"str\", map.get(\"str\"));\n    Assert.assertEquals(String.class, map.get(\"str\").getClass());\n    Assert.assertEquals(new Integer(1), map.get(\"int\"));\n    Assert.assertEquals(Integer.class, map.get(\"int\").getClass());\n    Assert.assertEquals(new Boolean(true), map.get(\"bool\"));\n    Assert.assertEquals(Boolean.class, map.get(\"bool\").getClass());\n\n    Assert.assertEquals(Object[].class, map.get(\"array\").getClass());\n    Object[] array = (Object[]) map.get(\"array\");\n    Assert.assertEquals(String.class, array[0].getClass());\n    Assert.assertEquals(\"a1\", array[0]);\n    Assert.assertEquals(Integer.class, array[1].getClass());\n    Assert.assertEquals(1, array[1]);\n    Assert.assertEquals(Boolean.class, array[2].getClass());\n    Assert.assertEquals(new Boolean(true), array[2]);\n  }", "signature": "void toMap_Nested_Array_Simple()", "full_signature": "@Test public void toMap_Nested_Array_Simple()", "class_method_signature": "JsonUtilsTest.toMap_Nested_Array_Simple()", "testcase": true, "constructor": false, "invocations": ["toMap", "assertEquals", "get", "assertEquals", "getClass", "get", "assertEquals", "get", "assertEquals", "getClass", "get", "assertEquals", "get", "assertEquals", "getClass", "get", "assertEquals", "getClass", "get", "get", "assertEquals", "getClass", "assertEquals", "assertEquals", "getClass", "assertEquals", "assertEquals", "getClass", "assertEquals"]}, "focal_class": {"identifier": "JsonUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static Log logger = LogFactory.getLog(JsonUtils.class);", "modifier": "protected static", "type": "Log", "declarator": "logger = LogFactory.getLog(JsonUtils.class)", "var_name": "logger"}], "methods": [{"identifier": "JsonUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonUtils()", "full_signature": "private  JsonUtils()", "class_method_signature": "JsonUtils.JsonUtils()", "testcase": false, "constructor": true}, {"identifier": "stripComment", "parameters": "(String source)", "modifiers": "public static", "return": "String", "signature": "String stripComment(String source)", "full_signature": "public static String stripComment(String source)", "class_method_signature": "JsonUtils.stripComment(String source)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Object source)", "modifiers": "public static", "return": "String", "signature": "String toJson(Object source)", "full_signature": "public static String toJson(Object source)", "class_method_signature": "JsonUtils.toJson(Object source)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(String json)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap(String json)", "full_signature": "public static Map<String, Object> toMap(String json)", "class_method_signature": "JsonUtils.toMap(String json)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(String json)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] toArray(String json)", "full_signature": "public static Object[] toArray(String json)", "class_method_signature": "JsonUtils.toArray(String json)", "testcase": false, "constructor": false}, {"identifier": "toCollection", "parameters": "(String json)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> toCollection(String json)", "full_signature": "public static Collection<T> toCollection(String json)", "class_method_signature": "JsonUtils.toCollection(String json)", "testcase": false, "constructor": false}, {"identifier": "getGson", "parameters": "()", "modifiers": "private static", "return": "Gson", "signature": "Gson getGson()", "full_signature": "private static Gson getGson()", "class_method_signature": "JsonUtils.getGson()", "testcase": false, "constructor": false}], "file": "bc-core/src/main/java/cn/bc/core/util/JsonUtils.java"}, "focal_method": {"identifier": "toMap", "parameters": "(String json)", "modifiers": "public static", "return": "Map<String, Object>", "body": "public static Map<String, Object> toMap(String json) {\n    return getGson().fromJson(json,\n      new TypeToken<HashMap<String, Object>>() {\n      }.getType());\n  }", "signature": "Map<String, Object> toMap(String json)", "full_signature": "public static Map<String, Object> toMap(String json)", "class_method_signature": "JsonUtils.toMap(String json)", "testcase": false, "constructor": false, "invocations": ["fromJson", "getGson", "getType"]}, "repository": {"repo_id": 1870998, "url": "https://github.com/bcsoft/bc-framework", "stars": 26, "created": "6/9/2011 2:10:06 PM +00:00", "updates": "2019-05-30T14:11:53+00:00", "fork": "False", "license": "licensed"}}