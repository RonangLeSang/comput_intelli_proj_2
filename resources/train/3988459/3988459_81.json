{"test_class": {"identifier": "BinaryRepresentationTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/httpobjects/representation/BinaryRepresentationTest.java"}, "test_case": {"identifier": "wrapsOutputExceptionsWithAHelpfulMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void wrapsOutputExceptionsWithAHelpfulMessage() {\n        // given\n        final EOFException connectionException = new EOFException();\n        BinaryRepresentation r = new BinaryRepresentation(\"foo/bar\", new ByteArrayInputStream(DSL.getBytes(\"foobar\", StandardCharset.UTF_8)));\n        OutputStream out = new OutputStream() {\n            @Override\n            public void write(int b) throws IOException {\n                throw connectionException;\n            }\n        };\n        \n        // when\n        Throwable err = null;\n        try {\n            r.write(out);\n        } catch (Exception e) {\n            err = e;\n        }\n        \n        // then\n        assertNotNull(err);\n        assertEquals(\"Error writing representation.  This is probably because the connection to the remote host was closed.\", err.getMessage());\n        assertTrue(err.getCause() == connectionException);\n        err.printStackTrace();\n    }", "signature": "void wrapsOutputExceptionsWithAHelpfulMessage()", "full_signature": "@Test public void wrapsOutputExceptionsWithAHelpfulMessage()", "class_method_signature": "BinaryRepresentationTest.wrapsOutputExceptionsWithAHelpfulMessage()", "testcase": true, "constructor": false, "invocations": ["getBytes", "write", "assertNotNull", "assertEquals", "getMessage", "assertTrue", "getCause", "printStackTrace"]}, "focal_class": {"identifier": "BinaryRepresentation", "superclass": "", "interfaces": "implements Representation", "fields": [{"original_string": "private final String contentType;", "modifier": "private final", "type": "String", "declarator": "contentType", "var_name": "contentType"}, {"original_string": "private final InputStream data;", "modifier": "private final", "type": "InputStream", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "BinaryRepresentation", "parameters": "(String contentType, InputStream data)", "modifiers": "public", "return": "", "signature": " BinaryRepresentation(String contentType, InputStream data)", "full_signature": "public  BinaryRepresentation(String contentType, InputStream data)", "class_method_signature": "BinaryRepresentation.BinaryRepresentation(String contentType, InputStream data)", "testcase": false, "constructor": true}, {"identifier": "contentType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String contentType()", "full_signature": "@Override public String contentType()", "class_method_signature": "BinaryRepresentation.contentType()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream out)", "full_signature": "@Override public void write(OutputStream out)", "class_method_signature": "BinaryRepresentation.write(OutputStream out)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/httpobjects/representation/BinaryRepresentation.java"}, "focal_method": {"identifier": "write", "parameters": "(OutputStream out)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void write(OutputStream out) {\n\t\ttry {\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tfor(int x=data.read(buffer);x!=-1;x=data.read(buffer)){\n\t\t\t\ttry{\n\t\t\t\t    out.write(buffer, 0, x);\n\t\t\t\t}catch(Exception err){\n\t\t\t\t    throw new RuntimeException(\"Error writing representation.  This is probably because the connection to the remote host was closed.\", err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdata.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}", "signature": "void write(OutputStream out)", "full_signature": "@Override public void write(OutputStream out)", "class_method_signature": "BinaryRepresentation.write(OutputStream out)", "testcase": false, "constructor": false, "invocations": ["read", "read", "write", "close"]}, "repository": {"repo_id": 3988459, "url": "https://github.com/cjdev/httpobjects", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 794, "license": "licensed"}}