{"test_class": {"identifier": "BulkMappingRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(BulkMappingRunnerTest.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BulkMappingRunnerTest.class)", "var_name": "LOG"}, {"original_string": "private static final String CODE_TEMPLATE = \"groovy.xml.DOMBuilder.newInstance().parseText('<foo><bar>%s</bar></foo>')\";", "modifier": "private static final", "type": "String", "declarator": "CODE_TEMPLATE = \"groovy.xml.DOMBuilder.newInstance().parseText('<foo><bar>%s</bar></foo>')\"", "var_name": "CODE_TEMPLATE"}, {"original_string": "public static final String NON_RANDOM_CODE = String.format(CODE_TEMPLATE, \"bar\");", "modifier": "public static final", "type": "String", "declarator": "NON_RANDOM_CODE = String.format(CODE_TEMPLATE, \"bar\")", "var_name": "NON_RANDOM_CODE"}, {"original_string": "@Mock\n    private RecMapping recMapping;", "modifier": "@Mock\n    private", "type": "RecMapping", "declarator": "recMapping", "var_name": "recMapping"}, {"original_string": "@Mock\n    private RecDefTree recDefTree;", "modifier": "@Mock\n    private", "type": "RecDefTree", "declarator": "recDefTree", "var_name": "recDefTree"}, {"original_string": "@Mock\n    private RecDef recDef;", "modifier": "@Mock\n    private", "type": "RecDef", "declarator": "recDef", "var_name": "recDef"}, {"original_string": "private MetadataRecord metadataRecord;", "modifier": "private", "type": "MetadataRecord", "declarator": "metadataRecord", "var_name": "metadataRecord"}], "file": "sip-core/src/test/java/eu/delving/groovy/BulkMappingRunnerTest.java"}, "test_case": {"identifier": "runMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void runMapping() throws Exception {\n        nInvocations(1, false);\n    }", "signature": "void runMapping()", "full_signature": "@Test public void runMapping()", "class_method_signature": "BulkMappingRunnerTest.runMapping()", "testcase": true, "constructor": false, "invocations": ["nInvocations"]}, "focal_class": {"identifier": "BulkMappingRunner", "superclass": "extends AbstractMappingRunner", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BulkMappingRunner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BulkMappingRunner.class)", "var_name": "LOG"}, {"original_string": "private CompiledScript compiledScript;", "modifier": "private", "type": "CompiledScript", "declarator": "compiledScript", "var_name": "compiledScript"}], "methods": [{"identifier": "BulkMappingRunner", "parameters": "(final RecMapping recMapping, final String generatedCode)", "modifiers": "public", "return": "", "signature": " BulkMappingRunner(final RecMapping recMapping, final String generatedCode)", "full_signature": "public  BulkMappingRunner(final RecMapping recMapping, final String generatedCode)", "class_method_signature": "BulkMappingRunner.BulkMappingRunner(final RecMapping recMapping, final String generatedCode)", "testcase": false, "constructor": true}, {"identifier": "runMapping", "parameters": "(final MetadataRecord metadataRecord)", "modifiers": "@Override public", "return": "Node", "signature": "Node runMapping(final MetadataRecord metadataRecord)", "full_signature": "@Override public Node runMapping(final MetadataRecord metadataRecord)", "class_method_signature": "BulkMappingRunner.runMapping(final MetadataRecord metadataRecord)", "testcase": false, "constructor": false}], "file": "sip-core/src/main/java/eu/delving/groovy/BulkMappingRunner.java"}, "focal_method": {"identifier": "runMapping", "parameters": "(final MetadataRecord metadataRecord)", "modifiers": "@Override public", "return": "Node", "body": "@Override\n    public Node runMapping(final MetadataRecord metadataRecord) throws MappingException {\n        LOG.trace(\"Running mapping for record {}\", metadataRecord);\n        SimpleBindings bindings = Utils.bindingsFor(recMapping.getFacts(),\n            recMapping.getRecDefTree().getRecDef(), metadataRecord.getRootNode(),\n            recMapping.getRecDefTree().getRecDef().valueOptLookup);\n        try {\n            Node result = (Node) compiledScript.eval(bindings);\n            return Utils.stripEmptyElements(result);\n        } catch (ScriptException e) {\n            throw new RuntimeException(e);\n        }\n\n    }", "signature": "Node runMapping(final MetadataRecord metadataRecord)", "full_signature": "@Override public Node runMapping(final MetadataRecord metadataRecord)", "class_method_signature": "BulkMappingRunner.runMapping(final MetadataRecord metadataRecord)", "testcase": false, "constructor": false, "invocations": ["trace", "bindingsFor", "getFacts", "getRecDef", "getRecDefTree", "getRootNode", "getRecDef", "getRecDefTree", "eval", "stripEmptyElements"]}, "repository": {"repo_id": 2061716, "url": "https://github.com/delving/sip-creator", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 17489, "license": "licensed"}}