{"test_class": {"identifier": "OAuthSamplerTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugins/oauth/src/test/java/com/atlantbh/jmeter/plugins/oauth/OAuthSamplerTest.java"}, "test_case": {"identifier": "testGetUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUrl() throws Exception {\n        System.out.println(\"getUrl\");\n        OAuthSampler instance = new OAuthSampler();\n        instance.setHostBaseUrl(\"http://localhost/\");\n        URL expResult = new URL(\"http://localhost/\");\n        URL result = instance.getUrl();\n    }", "signature": "void testGetUrl()", "full_signature": "@Test public void testGetUrl()", "class_method_signature": "OAuthSamplerTest.testGetUrl()", "testcase": true, "constructor": false, "invocations": ["println", "setHostBaseUrl", "getUrl"]}, "focal_class": {"identifier": "OAuthSampler", "superclass": "extends HTTPSampler2", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -5877623539165274730L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5877623539165274730L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "public static final String CONSUMER_KEY = \"OAuthSampler.consumer_key\";", "modifier": "public static final", "type": "String", "declarator": "CONSUMER_KEY = \"OAuthSampler.consumer_key\"", "var_name": "CONSUMER_KEY"}, {"original_string": "public static final String CONSUMER_SECRET = \"OAuthSampler.consumer_secret\";", "modifier": "public static final", "type": "String", "declarator": "CONSUMER_SECRET = \"OAuthSampler.consumer_secret\"", "var_name": "CONSUMER_SECRET"}, {"original_string": "public static final String REQUEST_BODY = \"OAuthSampler.request_body\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_BODY = \"OAuthSampler.request_body\"", "var_name": "REQUEST_BODY"}, {"original_string": "public static final String PORT_NUMBER = \"OAuthSampler.port_number\";", "modifier": "public static final", "type": "String", "declarator": "PORT_NUMBER = \"OAuthSampler.port_number\"", "var_name": "PORT_NUMBER"}, {"original_string": "public static final String RESOURCE = \"OAuthSampler.resource\";", "modifier": "public static final", "type": "String", "declarator": "RESOURCE = \"OAuthSampler.resource\"", "var_name": "RESOURCE"}, {"original_string": "public static final String BASE_HOST = \"OAuthSampler.base_host\";", "modifier": "public static final", "type": "String", "declarator": "BASE_HOST = \"OAuthSampler.base_host\"", "var_name": "BASE_HOST"}, {"original_string": "public static final String REQUEST_HEADERS = \"OAuthSampler.request_headers\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_HEADERS = \"OAuthSampler.request_headers\"", "var_name": "REQUEST_HEADERS"}], "methods": [{"identifier": "OAuthSampler", "parameters": "()", "modifiers": "public", "return": "", "signature": " OAuthSampler()", "full_signature": "public  OAuthSampler()", "class_method_signature": "OAuthSampler.OAuthSampler()", "testcase": false, "constructor": true}, {"identifier": "setConsumerKey", "parameters": "(String consumerKey)", "modifiers": "public", "return": "void", "signature": "void setConsumerKey(String consumerKey)", "full_signature": "public void setConsumerKey(String consumerKey)", "class_method_signature": "OAuthSampler.setConsumerKey(String consumerKey)", "testcase": false, "constructor": false}, {"identifier": "setConsumerSecret", "parameters": "(String consumerSecret)", "modifiers": "public", "return": "void", "signature": "void setConsumerSecret(String consumerSecret)", "full_signature": "public void setConsumerSecret(String consumerSecret)", "class_method_signature": "OAuthSampler.setConsumerSecret(String consumerSecret)", "testcase": false, "constructor": false}, {"identifier": "getConsumerKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getConsumerKey()", "full_signature": "public String getConsumerKey()", "class_method_signature": "OAuthSampler.getConsumerKey()", "testcase": false, "constructor": false}, {"identifier": "getConsumerSecret", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getConsumerSecret()", "full_signature": "public String getConsumerSecret()", "class_method_signature": "OAuthSampler.getConsumerSecret()", "testcase": false, "constructor": false}, {"identifier": "setRequestBody", "parameters": "(String data)", "modifiers": "public", "return": "void", "signature": "void setRequestBody(String data)", "full_signature": "public void setRequestBody(String data)", "class_method_signature": "OAuthSampler.setRequestBody(String data)", "testcase": false, "constructor": false}, {"identifier": "setRequestHeaders", "parameters": "(String headers)", "modifiers": "public", "return": "void", "signature": "void setRequestHeaders(String headers)", "full_signature": "public void setRequestHeaders(String headers)", "class_method_signature": "OAuthSampler.setRequestHeaders(String headers)", "testcase": false, "constructor": false}, {"identifier": "getRequestBody", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestBody()", "full_signature": "public String getRequestBody()", "class_method_signature": "OAuthSampler.getRequestBody()", "testcase": false, "constructor": false}, {"identifier": "getRequestHeaders", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestHeaders()", "full_signature": "public String getRequestHeaders()", "class_method_signature": "OAuthSampler.getRequestHeaders()", "testcase": false, "constructor": false}, {"identifier": "setResource", "parameters": "(String data)", "modifiers": "public", "return": "void", "signature": "void setResource(String data)", "full_signature": "public void setResource(String data)", "class_method_signature": "OAuthSampler.setResource(String data)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResource()", "full_signature": "public String getResource()", "class_method_signature": "OAuthSampler.getResource()", "testcase": false, "constructor": false}, {"identifier": "setPortNumber", "parameters": "(String data)", "modifiers": "public", "return": "void", "signature": "void setPortNumber(String data)", "full_signature": "public void setPortNumber(String data)", "class_method_signature": "OAuthSampler.setPortNumber(String data)", "testcase": false, "constructor": false}, {"identifier": "getPortNumber", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPortNumber()", "full_signature": "public String getPortNumber()", "class_method_signature": "OAuthSampler.getPortNumber()", "testcase": false, "constructor": false}, {"identifier": "setHostBaseUrl", "parameters": "(final String data)", "modifiers": "public", "return": "void", "signature": "void setHostBaseUrl(final String data)", "full_signature": "public void setHostBaseUrl(final String data)", "class_method_signature": "OAuthSampler.setHostBaseUrl(final String data)", "testcase": false, "constructor": false}, {"identifier": "getHostBaseUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHostBaseUrl()", "full_signature": "public String getHostBaseUrl()", "class_method_signature": "OAuthSampler.getHostBaseUrl()", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getUrl()", "full_signature": "public URL getUrl()", "class_method_signature": "OAuthSampler.getUrl()", "testcase": false, "constructor": false}, {"identifier": "toValidUrl", "parameters": "(String u)", "modifiers": "private", "return": "String", "signature": "String toValidUrl(String u)", "full_signature": "private String toValidUrl(String u)", "class_method_signature": "OAuthSampler.toValidUrl(String u)", "testcase": false, "constructor": false}, {"identifier": "toURL", "parameters": "(String u)", "modifiers": "private", "return": "URL", "signature": "URL toURL(String u)", "full_signature": "private URL toURL(String u)", "class_method_signature": "OAuthSampler.toURL(String u)", "testcase": false, "constructor": false}, {"identifier": "overrideHeaders", "parameters": "(HttpMethodBase httpMethod, String url,\n                                 String method)", "modifiers": "private", "return": "void", "signature": "void overrideHeaders(HttpMethodBase httpMethod, String url,\n                                 String method)", "full_signature": "private void overrideHeaders(HttpMethodBase httpMethod, String url,\n                                 String method)", "class_method_signature": "OAuthSampler.overrideHeaders(HttpMethodBase httpMethod, String url,\n                                 String method)", "testcase": false, "constructor": false}, {"identifier": "setupConnection", "parameters": "(URL u, HttpMethodBase httpMethod)", "modifiers": "protected", "return": "HttpClient", "signature": "HttpClient setupConnection(URL u, HttpMethodBase httpMethod)", "full_signature": "protected HttpClient setupConnection(URL u, HttpMethodBase httpMethod)", "class_method_signature": "OAuthSampler.setupConnection(URL u, HttpMethodBase httpMethod)", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "(URL url, String method,\n                                      boolean areFollowingRedirect, int frameDepth)", "modifiers": "protected", "return": "HTTPSampleResult", "signature": "HTTPSampleResult sample(URL url, String method,\n                                      boolean areFollowingRedirect, int frameDepth)", "full_signature": "protected HTTPSampleResult sample(URL url, String method,\n                                      boolean areFollowingRedirect, int frameDepth)", "class_method_signature": "OAuthSampler.sample(URL url, String method,\n                                      boolean areFollowingRedirect, int frameDepth)", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "()", "modifiers": "@Override public", "return": "SampleResult", "signature": "SampleResult sample()", "full_signature": "@Override public SampleResult sample()", "class_method_signature": "OAuthSampler.sample()", "testcase": false, "constructor": false}, {"identifier": "setDefaultRequestHeaders", "parameters": "(HttpMethodBase httpMethod)", "modifiers": "private", "return": "void", "signature": "void setDefaultRequestHeaders(HttpMethodBase httpMethod)", "full_signature": "private void setDefaultRequestHeaders(HttpMethodBase httpMethod)", "class_method_signature": "OAuthSampler.setDefaultRequestHeaders(HttpMethodBase httpMethod)", "testcase": false, "constructor": false}, {"identifier": "createHttpMethod", "parameters": "(String method, String urlStr)", "modifiers": "private", "return": "HttpMethodBase", "signature": "HttpMethodBase createHttpMethod(String method, String urlStr)", "full_signature": "private HttpMethodBase createHttpMethod(String method, String urlStr)", "class_method_signature": "OAuthSampler.createHttpMethod(String method, String urlStr)", "testcase": false, "constructor": false}], "file": "plugins/oauth/src/main/java/com/atlantbh/jmeter/plugins/oauth/OAuthSampler.java"}, "focal_method": {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "URL", "body": "public URL getUrl() throws MalformedURLException {\n        String validHost = toValidUrl(getHostBaseUrl());\n        URL u = null;\n        if (validHost != null && getResource() != null) {\n            String fullUrl = validHost\n                    + (getPortNumber() == null || getPortNumber().length() == 0 ? \"\"\n                    : \":\" + getPortNumber()) + \"/\" + getResource();\n            u = toURL(fullUrl);\n        }\n\n        return u;\n    }", "signature": "URL getUrl()", "full_signature": "public URL getUrl()", "class_method_signature": "OAuthSampler.getUrl()", "testcase": false, "constructor": false, "invocations": ["toValidUrl", "getHostBaseUrl", "getResource", "getPortNumber", "length", "getPortNumber", "getPortNumber", "getResource", "toURL"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}