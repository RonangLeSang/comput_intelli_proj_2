{"test_class": {"identifier": "NewAgentConnectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DatagramChannelEmul channel;", "modifier": "private", "type": "DatagramChannelEmul", "declarator": "channel", "var_name": "channel"}, {"original_string": "private Transport transport;", "modifier": "private", "type": "Transport", "declarator": "transport", "var_name": "transport"}, {"original_string": "private kg.apc.jmeter.perfmon.NewAgentConnector instance;", "modifier": "private", "type": "kg.apc.jmeter.perfmon.NewAgentConnector", "declarator": "instance", "var_name": "instance"}], "file": "plugins/perfmon/src/test/java/kg/apc/jmeter/perfmon/NewAgentConnectorTest.java"}, "test_case": {"identifier": "testGenerateSamples_many", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateSamples_many() throws Exception {\n        System.out.println(\"generateSamples\");\n        PerfMonSampleGenerator collector = new Gen();\n        channel.setBytesToRead(ByteBuffer.wrap(\"0.123  3424\\n\".getBytes()));\n        instance.generateSamples(collector);\n    }", "signature": "void testGenerateSamples_many()", "full_signature": "@Test public void testGenerateSamples_many()", "class_method_signature": "NewAgentConnectorTest.testGenerateSamples_many()", "testcase": true, "constructor": false, "invocations": ["println", "setBytesToRead", "wrap", "getBytes", "generateSamples"]}, "focal_class": {"identifier": "NewAgentConnector", "superclass": "", "interfaces": "implements PerfMonAgentConnector", "fields": [{"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "protected Transport transport;", "modifier": "protected", "type": "Transport", "declarator": "transport", "var_name": "transport"}, {"original_string": "private Map<String, String> metrics = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "metrics = new HashMap<>()", "var_name": "metrics"}, {"original_string": "private String[] metricLabels;", "modifier": "private", "type": "String[]", "declarator": "metricLabels", "var_name": "metricLabels"}], "methods": [{"identifier": "setTransport", "parameters": "(Transport atransport)", "modifiers": "public", "return": "void", "signature": "void setTransport(Transport atransport)", "full_signature": "public void setTransport(Transport atransport)", "class_method_signature": "NewAgentConnector.setTransport(Transport atransport)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void connect()", "full_signature": "public void connect()", "class_method_signature": "NewAgentConnector.connect()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disconnect()", "full_signature": "public void disconnect()", "class_method_signature": "NewAgentConnector.disconnect()", "testcase": false, "constructor": false}, {"identifier": "generateSamples", "parameters": "(PerfMonSampleGenerator collector)", "modifiers": "public", "return": "void", "signature": "void generateSamples(PerfMonSampleGenerator collector)", "full_signature": "public void generateSamples(PerfMonSampleGenerator collector)", "class_method_signature": "NewAgentConnector.generateSamples(PerfMonSampleGenerator collector)", "testcase": false, "constructor": false}, {"identifier": "addMetric", "parameters": "(String metric, String params, String label)", "modifiers": "public", "return": "void", "signature": "void addMetric(String metric, String params, String label)", "full_signature": "public void addMetric(String metric, String params, String label)", "class_method_signature": "NewAgentConnector.addMetric(String metric, String params, String label)", "testcase": false, "constructor": false}], "file": "plugins/perfmon/src/main/java/kg/apc/jmeter/perfmon/NewAgentConnector.java"}, "focal_method": {"identifier": "generateSamples", "parameters": "(PerfMonSampleGenerator collector)", "modifiers": "public", "return": "void", "body": "public void generateSamples(PerfMonSampleGenerator collector) throws IOException {\n        String[] data = transport.readMetrics();\n        for (int n = 0; n < data.length; n++) {\n            if (!data[n].isEmpty()) {\n                try {\n                    collector.generateSample(Double.parseDouble(data[n]), metricLabels[n]);\n                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n                    collector.generateErrorSample(metricLabels[n], e.toString());\n                }\n            }\n        }\n    }", "signature": "void generateSamples(PerfMonSampleGenerator collector)", "full_signature": "public void generateSamples(PerfMonSampleGenerator collector)", "class_method_signature": "NewAgentConnector.generateSamples(PerfMonSampleGenerator collector)", "testcase": false, "constructor": false, "invocations": ["readMetrics", "isEmpty", "generateSample", "parseDouble", "generateErrorSample", "toString"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}