{"test_class": {"identifier": "Base64DecodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugins/functions/src/test/java/kg/apc/jmeter/functions/Base64DecodeTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        JMeterContext context = JMeterContextService.getContext();\n        context.setVariables(new JMeterVariables());\n\n        Collection<CompoundVariable> parameters = new ArrayList<>();\n        parameters.add(new CompoundVariable(\"dGVzdCBzdHJpbmc=\"));\n        parameters.add(new CompoundVariable(\"b64dec_res\"));\n        Base64Decode instance = new Base64Decode();\n        instance.setParameters(parameters);\n\n        String res = instance.execute(null, null);\n        Assert.assertEquals(\"test string\", res);\n        Assert.assertNotNull(context.getVariables().get(\"b64dec_res\"));\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "Base64DecodeTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["getContext", "setVariables", "add", "add", "setParameters", "execute", "assertEquals", "assertNotNull", "get", "getVariables"]}, "focal_class": {"identifier": "Base64Decode", "superclass": "extends AbstractFunction", "interfaces": "", "fields": [{"original_string": "private static final List<String> desc = new LinkedList<String>();", "modifier": "private static final", "type": "List<String>", "declarator": "desc = new LinkedList<String>()", "var_name": "desc"}, {"original_string": "private static final String KEY = \"__base64Decode\";", "modifier": "private static final", "type": "String", "declarator": "KEY = \"__base64Decode\"", "var_name": "KEY"}, {"original_string": "private static final int MIN_PARAMETER_COUNT = 1;", "modifier": "private static final", "type": "int", "declarator": "MIN_PARAMETER_COUNT = 1", "var_name": "MIN_PARAMETER_COUNT"}, {"original_string": "private static final int MAX_PARAMETER_COUNT = 2;", "modifier": "private static final", "type": "int", "declarator": "MAX_PARAMETER_COUNT = 2", "var_name": "MAX_PARAMETER_COUNT"}, {"original_string": "private CompoundVariable[] values;", "modifier": "private", "type": "CompoundVariable[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "execute", "parameters": "(SampleResult previousResult, Sampler currentSampler)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String execute(SampleResult previousResult, Sampler currentSampler)", "full_signature": "@Override public synchronized String execute(SampleResult previousResult, Sampler currentSampler)", "class_method_signature": "Base64Decode.execute(SampleResult previousResult, Sampler currentSampler)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Collection<CompoundVariable> parameters)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setParameters(Collection<CompoundVariable> parameters)", "full_signature": "@Override public synchronized void setParameters(Collection<CompoundVariable> parameters)", "class_method_signature": "Base64Decode.setParameters(Collection<CompoundVariable> parameters)", "testcase": false, "constructor": false}, {"identifier": "getReferenceKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getReferenceKey()", "full_signature": "@Override public String getReferenceKey()", "class_method_signature": "Base64Decode.getReferenceKey()", "testcase": false, "constructor": false}, {"identifier": "getArgumentDesc", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getArgumentDesc()", "full_signature": "@Override public List<String> getArgumentDesc()", "class_method_signature": "Base64Decode.getArgumentDesc()", "testcase": false, "constructor": false}], "file": "plugins/functions/src/main/java/kg/apc/jmeter/functions/Base64Decode.java"}, "focal_method": {"identifier": "execute", "parameters": "(SampleResult previousResult, Sampler currentSampler)", "modifiers": "@Override public synchronized", "return": "String", "body": "@Override\n    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)\n            throws InvalidVariableException {\n        String sourceString = values[0].execute();\n\n        String decodedValue = new String(Base64.decodeBase64(sourceString));\n        if (values.length > 1) {\n            String variableName = values[1].execute();\n            if (variableName.length() > 0) {// Allow for empty name\n                final JMeterVariables variables = getVariables();\n                if (variables != null) {\n                    variables.put(variableName, decodedValue);\n                }\n            }\n        }\n        return decodedValue;\n    }", "signature": "String execute(SampleResult previousResult, Sampler currentSampler)", "full_signature": "@Override public synchronized String execute(SampleResult previousResult, Sampler currentSampler)", "class_method_signature": "Base64Decode.execute(SampleResult previousResult, Sampler currentSampler)", "testcase": false, "constructor": false, "invocations": ["execute", "decodeBase64", "execute", "length", "getVariables", "put"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}