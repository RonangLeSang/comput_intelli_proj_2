{"test_class": {"identifier": "JMeterPluginsUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "infra/common/src/test/java/kg/apc/jmeter/JMeterPluginsUtilsTest.java"}, "test_case": {"identifier": "testPrefixLabel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrefixLabel() {\n        System.out.println(\"prefixLabel\");\n        String string = \"TEST\";\n        String result = JMeterPluginsUtils.prefixLabel(string);\n        assertTrue(result.contains(string));\n    }", "signature": "void testPrefixLabel()", "full_signature": "@Test public void testPrefixLabel()", "class_method_signature": "JMeterPluginsUtilsTest.testPrefixLabel()", "testcase": true, "constructor": false, "invocations": ["println", "prefixLabel", "assertTrue", "contains"]}, "focal_class": {"identifier": "JMeterPluginsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "private static final String PLUGINS_PREFIX = \"jp@gc - \";", "modifier": "private static final", "type": "String", "declarator": "PLUGINS_PREFIX = \"jp@gc - \"", "var_name": "PLUGINS_PREFIX"}, {"original_string": "private static boolean prefixPlugins = true;", "modifier": "private static", "type": "boolean", "declarator": "prefixPlugins = true", "var_name": "prefixPlugins"}, {"original_string": "public static final String WIKI_BASE = \"http://jmeter-plugins.org/wiki/\";", "modifier": "public static final", "type": "String", "declarator": "WIKI_BASE = \"http://jmeter-plugins.org/wiki/\"", "var_name": "WIKI_BASE"}, {"original_string": "private static String version = null;", "modifier": "private static", "type": "String", "declarator": "version = null", "var_name": "version"}, {"original_string": "public static final String ENCODING = JMeterUtils.getPropDefault(\"sampleresult.default.encoding\", SampleResult.DEFAULT_HTTP_ENCODING);", "modifier": "public static final", "type": "String", "declarator": "ENCODING = JMeterUtils.getPropDefault(\"sampleresult.default.encoding\", SampleResult.DEFAULT_HTTP_ENCODING)", "var_name": "ENCODING"}, {"original_string": "public static final Charset CHARSET = Charset.forName(ENCODING);", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET = Charset.forName(ENCODING)", "var_name": "CHARSET"}], "methods": [{"identifier": "prefixLabel", "parameters": "(String label)", "modifiers": "public static", "return": "String", "signature": "String prefixLabel(String label)", "full_signature": "public static String prefixLabel(String label)", "class_method_signature": "JMeterPluginsUtils.prefixLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "getStackTrace", "parameters": "(Exception ex)", "modifiers": "public static", "return": "String", "signature": "String getStackTrace(Exception ex)", "full_signature": "public static String getStackTrace(Exception ex)", "class_method_signature": "JMeterPluginsUtils.getStackTrace(Exception ex)", "testcase": false, "constructor": false}, {"identifier": "tableModelRowsToCollectionProperty", "parameters": "(PowerTableModel model, String propname)", "modifiers": "public static", "return": "CollectionProperty", "signature": "CollectionProperty tableModelRowsToCollectionProperty(PowerTableModel model, String propname)", "full_signature": "public static CollectionProperty tableModelRowsToCollectionProperty(PowerTableModel model, String propname)", "class_method_signature": "JMeterPluginsUtils.tableModelRowsToCollectionProperty(PowerTableModel model, String propname)", "testcase": false, "constructor": false}, {"identifier": "tableModelRowsToCollectionPropertyEval", "parameters": "(PowerTableModel model, String propname)", "modifiers": "public static", "return": "CollectionProperty", "signature": "CollectionProperty tableModelRowsToCollectionPropertyEval(PowerTableModel model, String propname)", "full_signature": "public static CollectionProperty tableModelRowsToCollectionPropertyEval(PowerTableModel model, String propname)", "class_method_signature": "JMeterPluginsUtils.tableModelRowsToCollectionPropertyEval(PowerTableModel model, String propname)", "testcase": false, "constructor": false}, {"identifier": "collectionPropertyToTableModelRows", "parameters": "(CollectionProperty prop, PowerTableModel model)", "modifiers": "public static", "return": "void", "signature": "void collectionPropertyToTableModelRows(CollectionProperty prop, PowerTableModel model)", "full_signature": "public static void collectionPropertyToTableModelRows(CollectionProperty prop, PowerTableModel model)", "class_method_signature": "JMeterPluginsUtils.collectionPropertyToTableModelRows(CollectionProperty prop, PowerTableModel model)", "testcase": false, "constructor": false}, {"identifier": "collectionPropertyToTableModelRows", "parameters": "(CollectionProperty prop, PowerTableModel model, Class[] columnClasses)", "modifiers": "public static", "return": "void", "signature": "void collectionPropertyToTableModelRows(CollectionProperty prop, PowerTableModel model, Class[] columnClasses)", "full_signature": "public static void collectionPropertyToTableModelRows(CollectionProperty prop, PowerTableModel model, Class[] columnClasses)", "class_method_signature": "JMeterPluginsUtils.collectionPropertyToTableModelRows(CollectionProperty prop, PowerTableModel model, Class[] columnClasses)", "testcase": false, "constructor": false}, {"identifier": "getArrayListForArray", "parameters": "(Object[] rowData)", "modifiers": "private static", "return": "List<Object>", "signature": "List<Object> getArrayListForArray(Object[] rowData)", "full_signature": "private static List<Object> getArrayListForArray(Object[] rowData)", "class_method_signature": "JMeterPluginsUtils.getArrayListForArray(Object[] rowData)", "testcase": false, "constructor": false}, {"identifier": "getArrayListForArrayEval", "parameters": "(Object[] rowData)", "modifiers": "private static", "return": "List<Object>", "signature": "List<Object> getArrayListForArrayEval(Object[] rowData)", "full_signature": "private static List<Object> getArrayListForArrayEval(Object[] rowData)", "class_method_signature": "JMeterPluginsUtils.getArrayListForArrayEval(Object[] rowData)", "testcase": false, "constructor": false}, {"identifier": "replaceRNT", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String replaceRNT(String str)", "full_signature": "public static String replaceRNT(String str)", "class_method_signature": "JMeterPluginsUtils.replaceRNT(String str)", "testcase": false, "constructor": false}, {"identifier": "getWikiLinkText", "parameters": "(String wikiPage)", "modifiers": "public static", "return": "String", "signature": "String getWikiLinkText(String wikiPage)", "full_signature": "public static String getWikiLinkText(String wikiPage)", "class_method_signature": "JMeterPluginsUtils.getWikiLinkText(String wikiPage)", "testcase": false, "constructor": false}, {"identifier": "convertToClass", "parameters": "(StringProperty value, Class aClass)", "modifiers": "private static", "return": "Object", "signature": "Object convertToClass(StringProperty value, Class aClass)", "full_signature": "private static Object convertToClass(StringProperty value, Class aClass)", "class_method_signature": "JMeterPluginsUtils.convertToClass(StringProperty value, Class aClass)", "testcase": false, "constructor": false}, {"identifier": "buildHelpPageUrl", "parameters": "(String helpPage)", "modifiers": "public static", "return": "String", "signature": "String buildHelpPageUrl(String helpPage)", "full_signature": "public static String buildHelpPageUrl(String helpPage)", "class_method_signature": "JMeterPluginsUtils.buildHelpPageUrl(String helpPage)", "testcase": false, "constructor": false}, {"identifier": "addHelpLinkToPanel", "parameters": "(Container panel, String helpPage)", "modifiers": "public static", "return": "Component", "signature": "Component addHelpLinkToPanel(Container panel, String helpPage)", "full_signature": "public static Component addHelpLinkToPanel(Container panel, String helpPage)", "class_method_signature": "JMeterPluginsUtils.addHelpLinkToPanel(Container panel, String helpPage)", "testcase": false, "constructor": false}, {"identifier": "findComponentWithBorder", "parameters": "(JComponent panel, Class<?> aClass)", "modifiers": "private static", "return": "Container", "signature": "Container findComponentWithBorder(JComponent panel, Class<?> aClass)", "full_signature": "private static Container findComponentWithBorder(JComponent panel, Class<?> aClass)", "class_method_signature": "JMeterPluginsUtils.findComponentWithBorder(JComponent panel, Class<?> aClass)", "testcase": false, "constructor": false}, {"identifier": "doBestCSVSetup", "parameters": "(SampleSaveConfiguration conf)", "modifiers": "public static", "return": "void", "signature": "void doBestCSVSetup(SampleSaveConfiguration conf)", "full_signature": "public static void doBestCSVSetup(SampleSaveConfiguration conf)", "class_method_signature": "JMeterPluginsUtils.doBestCSVSetup(SampleSaveConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "openInBrowser", "parameters": "(String string)", "modifiers": "public static", "return": "void", "signature": "void openInBrowser(String string)", "full_signature": "public static void openInBrowser(String string)", "class_method_signature": "JMeterPluginsUtils.openInBrowser(String string)", "testcase": false, "constructor": false}, {"identifier": "getFloatFromString", "parameters": "(String stringValue, float defaultValue)", "modifiers": "public static", "return": "float", "signature": "float getFloatFromString(String stringValue, float defaultValue)", "full_signature": "public static float getFloatFromString(String stringValue, float defaultValue)", "class_method_signature": "JMeterPluginsUtils.getFloatFromString(String stringValue, float defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getSecondsForShortString", "parameters": "(String string)", "modifiers": "public static", "return": "int", "signature": "int getSecondsForShortString(String string)", "full_signature": "public static int getSecondsForShortString(String string)", "class_method_signature": "JMeterPluginsUtils.getSecondsForShortString(String string)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getVersion()", "full_signature": "public static String getVersion()", "class_method_signature": "JMeterPluginsUtils.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getEnvDefault", "parameters": "(String propName, String defaultVal)", "modifiers": "public static", "return": "String", "signature": "String getEnvDefault(String propName, String defaultVal)", "full_signature": "public static String getEnvDefault(String propName, String defaultVal)", "class_method_signature": "JMeterPluginsUtils.getEnvDefault(String propName, String defaultVal)", "testcase": false, "constructor": false}, {"identifier": "prepareJMeterEnv", "parameters": "(String homeDir)", "modifiers": "public static", "return": "void", "signature": "void prepareJMeterEnv(String homeDir)", "full_signature": "public static void prepareJMeterEnv(String homeDir)", "class_method_signature": "JMeterPluginsUtils.prepareJMeterEnv(String homeDir)", "testcase": false, "constructor": false}, {"identifier": "initializeProperties", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void initializeProperties()", "full_signature": "private static void initializeProperties()", "class_method_signature": "JMeterPluginsUtils.initializeProperties()", "testcase": false, "constructor": false}, {"identifier": "isJMeterHome", "parameters": "(String homeDir)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJMeterHome(String homeDir)", "full_signature": "private static boolean isJMeterHome(String homeDir)", "class_method_signature": "JMeterPluginsUtils.isJMeterHome(String homeDir)", "testcase": false, "constructor": false}, {"identifier": "getJMeterHomeFromCP", "parameters": "(String classpathSTR)", "modifiers": "public static", "return": "String", "signature": "String getJMeterHomeFromCP(String classpathSTR)", "full_signature": "public static String getJMeterHomeFromCP(String classpathSTR)", "class_method_signature": "JMeterPluginsUtils.getJMeterHomeFromCP(String classpathSTR)", "testcase": false, "constructor": false}, {"identifier": "getShortHostname", "parameters": "(String host)", "modifiers": "public static", "return": "String", "signature": "String getShortHostname(String host)", "full_signature": "public static String getShortHostname(String host)", "class_method_signature": "JMeterPluginsUtils.getShortHostname(String host)", "testcase": false, "constructor": false}], "file": "infra/common/src/main/java/kg/apc/jmeter/JMeterPluginsUtils.java"}, "focal_method": {"identifier": "prefixLabel", "parameters": "(String label)", "modifiers": "public static", "return": "String", "body": "public static String prefixLabel(String label) {\n        return prefixPlugins ? PLUGINS_PREFIX + label : label;\n    }", "signature": "String prefixLabel(String label)", "full_signature": "public static String prefixLabel(String label)", "class_method_signature": "JMeterPluginsUtils.prefixLabel(String label)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}