{"test_class": {"identifier": "RawRequestSourcePreProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String basedir;", "modifier": "private", "type": "String", "declarator": "basedir", "var_name": "basedir"}], "file": "plugins/httpraw/src/test/java/kg/apc/jmeter/modifiers/RawRequestSourcePreProcessorTest.java"}, "test_case": {"identifier": "testSetVarName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetVarName() {\n        System.out.println(\"setVarName\");\n        String name = \"\";\n        RawRequestSourcePreProcessor instance = new RawRequestSourcePreProcessor();\n        instance.setVarName(name);\n    }", "signature": "void testSetVarName()", "full_signature": "@Test public void testSetVarName()", "class_method_signature": "RawRequestSourcePreProcessorTest.testSetVarName()", "testcase": true, "constructor": false, "invocations": ["println", "setVarName"]}, "focal_class": {"identifier": "RawRequestSourcePreProcessor", "superclass": "extends AbstractTestElement", "interfaces": "implements PreProcessor, NoThreadClone, TestStateListener", "fields": [{"original_string": "public static final String regexp = \"\\\\s\";", "modifier": "public static final", "type": "String", "declarator": "regexp = \"\\\\s\"", "var_name": "regexp"}, {"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "public static final String VARIABLE_NAME = \"variable_name\";", "modifier": "public static final", "type": "String", "declarator": "VARIABLE_NAME = \"variable_name\"", "var_name": "VARIABLE_NAME"}, {"original_string": "public static final String FILENAME = \"filename\";", "modifier": "public static final", "type": "String", "declarator": "FILENAME = \"filename\"", "var_name": "FILENAME"}, {"original_string": "public static final String REWIND = \"rewind\";", "modifier": "public static final", "type": "String", "declarator": "REWIND = \"rewind\"", "var_name": "REWIND"}, {"original_string": "public static final String ENCODE_HEX = \"isHex\";", "modifier": "public static final", "type": "String", "declarator": "ENCODE_HEX = \"isHex\"", "var_name": "ENCODE_HEX"}, {"original_string": "private FileChannel file;", "modifier": "private", "type": "FileChannel", "declarator": "file", "var_name": "file"}, {"original_string": "private ByteBuffer metaBuf = null;", "modifier": "private", "type": "ByteBuffer", "declarator": "metaBuf = null", "var_name": "metaBuf"}, {"original_string": "private ByteBuffer oneByte = null;", "modifier": "private", "type": "ByteBuffer", "declarator": "oneByte = null", "var_name": "oneByte"}, {"original_string": "public static final Charset binaryCharset = Charset.forName(\"UTF8\");", "modifier": "public static final", "type": "Charset", "declarator": "binaryCharset = Charset.forName(\"UTF8\")", "var_name": "binaryCharset"}], "methods": [{"identifier": "RawRequestSourcePreProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " RawRequestSourcePreProcessor()", "full_signature": "public  RawRequestSourcePreProcessor()", "class_method_signature": "RawRequestSourcePreProcessor.RawRequestSourcePreProcessor()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void process()", "full_signature": "@Override public synchronized void process()", "class_method_signature": "RawRequestSourcePreProcessor.process()", "testcase": false, "constructor": false}, {"identifier": "readNextChunk", "parameters": "(int capacity)", "modifiers": "private synchronized", "return": "String", "signature": "String readNextChunk(int capacity)", "full_signature": "private synchronized String readNextChunk(int capacity)", "class_method_signature": "RawRequestSourcePreProcessor.readNextChunk(int capacity)", "testcase": false, "constructor": false}, {"identifier": "getNextChunkSize", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getNextChunkSize()", "full_signature": "private int getNextChunkSize()", "class_method_signature": "RawRequestSourcePreProcessor.getNextChunkSize()", "testcase": false, "constructor": false}, {"identifier": "getOneByte", "parameters": "()", "modifiers": "private", "return": "byte", "signature": "byte getOneByte()", "full_signature": "private byte getOneByte()", "class_method_signature": "RawRequestSourcePreProcessor.getOneByte()", "testcase": false, "constructor": false}, {"identifier": "getVarName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVarName()", "full_signature": "public String getVarName()", "class_method_signature": "RawRequestSourcePreProcessor.getVarName()", "testcase": false, "constructor": false}, {"identifier": "setVarName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setVarName(String name)", "full_signature": "public void setVarName(String name)", "class_method_signature": "RawRequestSourcePreProcessor.setVarName(String name)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "RawRequestSourcePreProcessor.getFileName()", "testcase": false, "constructor": false}, {"identifier": "setFileName", "parameters": "(String filename)", "modifiers": "public", "return": "void", "signature": "void setFileName(String filename)", "full_signature": "public void setFileName(String filename)", "class_method_signature": "RawRequestSourcePreProcessor.setFileName(String filename)", "testcase": false, "constructor": false}, {"identifier": "setRewindOnEOF", "parameters": "(boolean isRew)", "modifiers": "public", "return": "void", "signature": "void setRewindOnEOF(boolean isRew)", "full_signature": "public void setRewindOnEOF(boolean isRew)", "class_method_signature": "RawRequestSourcePreProcessor.setRewindOnEOF(boolean isRew)", "testcase": false, "constructor": false}, {"identifier": "getRewindOnEOF", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getRewindOnEOF()", "full_signature": "public boolean getRewindOnEOF()", "class_method_signature": "RawRequestSourcePreProcessor.getRewindOnEOF()", "testcase": false, "constructor": false}, {"identifier": "isHexEncode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHexEncode()", "full_signature": "public boolean isHexEncode()", "class_method_signature": "RawRequestSourcePreProcessor.isHexEncode()", "testcase": false, "constructor": false}, {"identifier": "setEncodeHex", "parameters": "(boolean b)", "modifiers": "public", "return": "void", "signature": "void setEncodeHex(boolean b)", "full_signature": "public void setEncodeHex(boolean b)", "class_method_signature": "RawRequestSourcePreProcessor.setEncodeHex(boolean b)", "testcase": false, "constructor": false}, {"identifier": "testStarted", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void testStarted()", "full_signature": "@Override public void testStarted()", "class_method_signature": "RawRequestSourcePreProcessor.testStarted()", "testcase": false, "constructor": false}, {"identifier": "testStarted", "parameters": "(String host)", "modifiers": "@Override public", "return": "void", "signature": "void testStarted(String host)", "full_signature": "@Override public void testStarted(String host)", "class_method_signature": "RawRequestSourcePreProcessor.testStarted(String host)", "testcase": false, "constructor": false}, {"identifier": "testEnded", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void testEnded()", "full_signature": "@Override public void testEnded()", "class_method_signature": "RawRequestSourcePreProcessor.testEnded()", "testcase": false, "constructor": false}, {"identifier": "testEnded", "parameters": "(String host)", "modifiers": "@Override public", "return": "void", "signature": "void testEnded(String host)", "full_signature": "@Override public void testEnded(String host)", "class_method_signature": "RawRequestSourcePreProcessor.testEnded(String host)", "testcase": false, "constructor": false}], "file": "plugins/httpraw/src/main/java/kg/apc/jmeter/modifiers/RawRequestSourcePreProcessor.java"}, "focal_method": {"identifier": "setVarName", "parameters": "(String name)", "modifiers": "public", "return": "void", "body": "public void setVarName(String name) {\n        setProperty(VARIABLE_NAME, name);\n    }", "signature": "void setVarName(String name)", "full_signature": "public void setVarName(String name)", "class_method_signature": "RawRequestSourcePreProcessor.setVarName(String name)", "testcase": false, "constructor": false, "invocations": ["setProperty"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}