{"test_class": {"identifier": "JMXMonCollectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugins/jmxmon/src/test/java/kg/apc/jmeter/jmxmon/JMXMonCollectorTest.java"}, "test_case": {"identifier": "testSampleOccurred", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSampleOccurred() {\n        System.out.println(\"sampleOccurred\");\n        SampleEvent event = null;\n        JMXMonCollector instance = new JMXMonCollector();\n        instance.sampleOccurred(event);\n        // TODO review the generated test code and remove the default call to fail.\n\n    }", "signature": "void testSampleOccurred()", "full_signature": "@Test public void testSampleOccurred()", "class_method_signature": "JMXMonCollectorTest.testSampleOccurred()", "testcase": true, "constructor": false, "invocations": ["println", "sampleOccurred"]}, "focal_class": {"identifier": "JMXMonCollector", "superclass": "extends CorrectedResultCollector", "interfaces": "implements Runnable, JMXMonSampleGenerator", "fields": [{"original_string": "private static final long serialVersionUID = 1437356057522465756L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1437356057522465756L", "var_name": "serialVersionUID"}, {"original_string": "private static final boolean autoGenerateFiles;", "modifier": "private static final", "type": "boolean", "declarator": "autoGenerateFiles", "var_name": "autoGenerateFiles"}, {"original_string": "private static final String JMXMON = \"JmxMon\";", "modifier": "private static final", "type": "String", "declarator": "JMXMON = \"JmxMon\"", "var_name": "JMXMON"}, {"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "public static final String DATA_PROPERTY = \"samplers\";", "modifier": "public static final", "type": "String", "declarator": "DATA_PROPERTY = \"samplers\"", "var_name": "DATA_PROPERTY"}, {"original_string": "private static final JMXMonConnectionPool pool = new JMXMonConnectionPool();", "modifier": "private static final", "type": "JMXMonConnectionPool", "declarator": "pool = new JMXMonConnectionPool()", "var_name": "pool"}, {"original_string": "private int interval;", "modifier": "private", "type": "int", "declarator": "interval", "var_name": "interval"}, {"original_string": "private Thread workerThread = null;", "modifier": "private", "type": "Thread", "declarator": "workerThread = null", "var_name": "workerThread"}, {"original_string": "protected List<JMXMonSampler> jmxMonSamplers = new ArrayList<JMXMonSampler>();", "modifier": "protected", "type": "List<JMXMonSampler>", "declarator": "jmxMonSamplers = new ArrayList<JMXMonSampler>()", "var_name": "jmxMonSamplers"}, {"original_string": "private String autoFileBaseName = null;", "modifier": "private", "type": "String", "declarator": "autoFileBaseName = null", "var_name": "autoFileBaseName"}, {"original_string": "private static int counter = 0;", "modifier": "private static", "type": "int", "declarator": "counter = 0", "var_name": "counter"}, {"original_string": "private String workerHost = null;", "modifier": "private", "type": "String", "declarator": "workerHost = null", "var_name": "workerHost"}, {"original_string": "private JMeterContext ctx;", "modifier": "private", "type": "JMeterContext", "declarator": "ctx", "var_name": "ctx"}], "methods": [{"identifier": "getAutoFileName", "parameters": "()", "modifiers": "private synchronized", "return": "String", "signature": "String getAutoFileName()", "full_signature": "private synchronized String getAutoFileName()", "class_method_signature": "JMXMonCollector.getAutoFileName()", "testcase": false, "constructor": false}, {"identifier": "JMXMonCollector", "parameters": "()", "modifiers": "public", "return": "", "signature": " JMXMonCollector()", "full_signature": "public  JMXMonCollector()", "class_method_signature": "JMXMonCollector.JMXMonCollector()", "testcase": false, "constructor": true}, {"identifier": "setData", "parameters": "(CollectionProperty rows)", "modifiers": "public", "return": "void", "signature": "void setData(CollectionProperty rows)", "full_signature": "public void setData(CollectionProperty rows)", "class_method_signature": "JMXMonCollector.setData(CollectionProperty rows)", "testcase": false, "constructor": false}, {"identifier": "getSamplerSettings", "parameters": "()", "modifiers": "public", "return": "JMeterProperty", "signature": "JMeterProperty getSamplerSettings()", "full_signature": "public JMeterProperty getSamplerSettings()", "class_method_signature": "JMXMonCollector.getSamplerSettings()", "testcase": false, "constructor": false}, {"identifier": "syncContext", "parameters": "(boolean isInit)", "modifiers": "private", "return": "void", "signature": "void syncContext(boolean isInit)", "full_signature": "private void syncContext(boolean isInit)", "class_method_signature": "JMXMonCollector.syncContext(boolean isInit)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void run()", "full_signature": "@Override public synchronized void run()", "class_method_signature": "JMXMonCollector.run()", "testcase": false, "constructor": false}, {"identifier": "isWorkingHost", "parameters": "(String host)", "modifiers": "private synchronized", "return": "boolean", "signature": "boolean isWorkingHost(String host)", "full_signature": "private synchronized boolean isWorkingHost(String host)", "class_method_signature": "JMXMonCollector.isWorkingHost(String host)", "testcase": false, "constructor": false}, {"identifier": "testStarted", "parameters": "(String host)", "modifiers": "@Override public", "return": "void", "signature": "void testStarted(String host)", "full_signature": "@Override public void testStarted(String host)", "class_method_signature": "JMXMonCollector.testStarted(String host)", "testcase": false, "constructor": false}, {"identifier": "setupSaving", "parameters": "(String fileName)", "modifiers": "private", "return": "void", "signature": "void setupSaving(String fileName)", "full_signature": "private void setupSaving(String fileName)", "class_method_signature": "JMXMonCollector.setupSaving(String fileName)", "testcase": false, "constructor": false}, {"identifier": "testEnded", "parameters": "(String host)", "modifiers": "@Override public", "return": "void", "signature": "void testEnded(String host)", "full_signature": "@Override public void testEnded(String host)", "class_method_signature": "JMXMonCollector.testEnded(String host)", "testcase": false, "constructor": false}, {"identifier": "initiateConnectors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initiateConnectors()", "full_signature": "private void initiateConnectors()", "class_method_signature": "JMXMonCollector.initiateConnectors()", "testcase": false, "constructor": false}, {"identifier": "initiateConnector", "parameters": "(Hashtable attributes, JMeterProperty jmxUrl, String name, \n    \t\tboolean delta, String objectName, String attribute, String key, boolean canRetry)", "modifiers": "protected", "return": "void", "signature": "void initiateConnector(Hashtable attributes, JMeterProperty jmxUrl, String name, \n    \t\tboolean delta, String objectName, String attribute, String key, boolean canRetry)", "full_signature": "protected void initiateConnector(Hashtable attributes, JMeterProperty jmxUrl, String name, \n    \t\tboolean delta, String objectName, String attribute, String key, boolean canRetry)", "class_method_signature": "JMXMonCollector.initiateConnector(Hashtable attributes, JMeterProperty jmxUrl, String name, \n    \t\tboolean delta, String objectName, String attribute, String key, boolean canRetry)", "testcase": false, "constructor": false}, {"identifier": "shutdownConnectors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void shutdownConnectors()", "full_signature": "private void shutdownConnectors()", "class_method_signature": "JMXMonCollector.shutdownConnectors()", "testcase": false, "constructor": false}, {"identifier": "processConnectors", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void processConnectors()", "full_signature": "protected void processConnectors()", "class_method_signature": "JMXMonCollector.processConnectors()", "testcase": false, "constructor": false}, {"identifier": "sampleOccurred", "parameters": "(SampleEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void sampleOccurred(SampleEvent event)", "full_signature": "@Override public void sampleOccurred(SampleEvent event)", "class_method_signature": "JMXMonCollector.sampleOccurred(SampleEvent event)", "testcase": false, "constructor": false}, {"identifier": "jmxMonSampleOccurred", "parameters": "(SampleEvent event)", "modifiers": "protected", "return": "void", "signature": "void jmxMonSampleOccurred(SampleEvent event)", "full_signature": "protected void jmxMonSampleOccurred(SampleEvent event)", "class_method_signature": "JMXMonCollector.jmxMonSampleOccurred(SampleEvent event)", "testcase": false, "constructor": false}, {"identifier": "generateSample", "parameters": "(double value, String label)", "modifiers": "@Override public", "return": "void", "signature": "void generateSample(double value, String label)", "full_signature": "@Override public void generateSample(double value, String label)", "class_method_signature": "JMXMonCollector.generateSample(double value, String label)", "testcase": false, "constructor": false}, {"identifier": "getThreadContext", "parameters": "()", "modifiers": "@Override public", "return": "JMeterContext", "signature": "JMeterContext getThreadContext()", "full_signature": "@Override public JMeterContext getThreadContext()", "class_method_signature": "JMXMonCollector.getThreadContext()", "testcase": false, "constructor": false}], "file": "plugins/jmxmon/src/main/java/kg/apc/jmeter/jmxmon/JMXMonCollector.java"}, "focal_method": {"identifier": "sampleOccurred", "parameters": "(SampleEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void sampleOccurred(SampleEvent event) {\n        // just dropping regular test samples\n    \t\n    \t// update JMeterContext for share with samplers thread in order to provide\n    \t// updated variables\n    \tthis.ctx = JMeterContextService.getContext();\n    }", "signature": "void sampleOccurred(SampleEvent event)", "full_signature": "@Override public void sampleOccurred(SampleEvent event)", "class_method_signature": "JMXMonCollector.sampleOccurred(SampleEvent event)", "testcase": false, "constructor": false, "invocations": ["getContext"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}