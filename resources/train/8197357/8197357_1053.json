{"test_class": {"identifier": "AbstractSimpleThreadGroupTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugins/casutg/src/test/java/kg/apc/jmeter/threads/AbstractSimpleThreadGroupTest.java"}, "test_case": {"identifier": "testStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStart() {\n        System.out.println(\"start\");\n        int groupCount = 0;\n        ListenerNotifier notifier = null;\n        ListedHashTree threadGroupTree = null;\n        StandardJMeterEngine engine = null;\n        AbstractSimpleThreadGroup instance = new AbstractSimpleThreadGroupImpl();\n        instance.start(groupCount, notifier, threadGroupTree, engine);\n    }", "signature": "void testStart()", "full_signature": "@Test public void testStart()", "class_method_signature": "AbstractSimpleThreadGroupTest.testStart()", "testcase": true, "constructor": false, "invocations": ["println", "start"]}, "focal_class": {"identifier": "AbstractSimpleThreadGroup", "superclass": "extends AbstractThreadGroup", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "private static final long WAIT_TO_DIE = JMeterUtils.getPropDefault(\"jmeterengine.threadstop.wait\", 5 * 1000);", "modifier": "private static final", "type": "long", "declarator": "WAIT_TO_DIE = JMeterUtils.getPropDefault(\"jmeterengine.threadstop.wait\", 5 * 1000)", "var_name": "WAIT_TO_DIE"}, {"original_string": "public static final String THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME = \"__jm.D_TG\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME = \"__jm.D_TG\"", "var_name": "THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME"}, {"original_string": "protected final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<>();", "modifier": "protected final", "type": "Map<JMeterThread, Thread>", "declarator": "allThreads = new ConcurrentHashMap<>()", "var_name": "allThreads"}, {"original_string": "private volatile boolean running = false;", "modifier": "private volatile", "type": "boolean", "declarator": "running = false", "var_name": "running"}, {"original_string": "private long tgStartTime = -1;", "modifier": "private", "type": "long", "declarator": "tgStartTime = -1", "var_name": "tgStartTime"}, {"original_string": "private static final long TOLERANCE = 1000;", "modifier": "private static final", "type": "long", "declarator": "TOLERANCE = 1000", "var_name": "TOLERANCE"}], "methods": [{"identifier": "AbstractSimpleThreadGroup", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractSimpleThreadGroup()", "full_signature": "public  AbstractSimpleThreadGroup()", "class_method_signature": "AbstractSimpleThreadGroup.AbstractSimpleThreadGroup()", "testcase": false, "constructor": true}, {"identifier": "scheduleThread", "parameters": "(JMeterThread thread, long now)", "modifiers": "protected abstract", "return": "void", "signature": "void scheduleThread(JMeterThread thread, long now)", "full_signature": "protected abstract void scheduleThread(JMeterThread thread, long now)", "class_method_signature": "AbstractSimpleThreadGroup.scheduleThread(JMeterThread thread, long now)", "testcase": false, "constructor": false}, {"identifier": "scheduleThread", "parameters": "(JMeterThread thread)", "modifiers": "public", "return": "void", "signature": "void scheduleThread(JMeterThread thread)", "full_signature": "public void scheduleThread(JMeterThread thread)", "class_method_signature": "AbstractSimpleThreadGroup.scheduleThread(JMeterThread thread)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "modifiers": "@Override public", "return": "void", "signature": "void start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "full_signature": "@Override public void start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "class_method_signature": "AbstractSimpleThreadGroup.start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "testcase": false, "constructor": false}, {"identifier": "registerStartedThread", "parameters": "(JMeterThread jMeterThread, Thread newThread)", "modifiers": "private", "return": "void", "signature": "void registerStartedThread(JMeterThread jMeterThread, Thread newThread)", "full_signature": "private void registerStartedThread(JMeterThread jMeterThread, Thread newThread)", "class_method_signature": "AbstractSimpleThreadGroup.registerStartedThread(JMeterThread jMeterThread, Thread newThread)", "testcase": false, "constructor": false}, {"identifier": "makeThread", "parameters": "(int groupNum,\n                                    ListenerNotifier notifier, ListedHashTree threadGroupTree,\n                                    StandardJMeterEngine engine, int threadNum,\n                                    JMeterContext context)", "modifiers": "private", "return": "JMeterThread", "signature": "JMeterThread makeThread(int groupNum,\n                                    ListenerNotifier notifier, ListedHashTree threadGroupTree,\n                                    StandardJMeterEngine engine, int threadNum,\n                                    JMeterContext context)", "full_signature": "private JMeterThread makeThread(int groupNum,\n                                    ListenerNotifier notifier, ListedHashTree threadGroupTree,\n                                    StandardJMeterEngine engine, int threadNum,\n                                    JMeterContext context)", "class_method_signature": "AbstractSimpleThreadGroup.makeThread(int groupNum,\n                                    ListenerNotifier notifier, ListedHashTree threadGroupTree,\n                                    StandardJMeterEngine engine, int threadNum,\n                                    JMeterContext context)", "testcase": false, "constructor": false}, {"identifier": "stopThread", "parameters": "(String threadName, boolean now)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stopThread(String threadName, boolean now)", "full_signature": "@Override public boolean stopThread(String threadName, boolean now)", "class_method_signature": "AbstractSimpleThreadGroup.stopThread(String threadName, boolean now)", "testcase": false, "constructor": false}, {"identifier": "threadFinished", "parameters": "(JMeterThread thread)", "modifiers": "@Override public", "return": "void", "signature": "void threadFinished(JMeterThread thread)", "full_signature": "@Override public void threadFinished(JMeterThread thread)", "class_method_signature": "AbstractSimpleThreadGroup.threadFinished(JMeterThread thread)", "testcase": false, "constructor": false}, {"identifier": "tellThreadsToStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void tellThreadsToStop()", "full_signature": "@Override public void tellThreadsToStop()", "class_method_signature": "AbstractSimpleThreadGroup.tellThreadsToStop()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "AbstractSimpleThreadGroup.stop()", "testcase": false, "constructor": false}, {"identifier": "numberOfActiveThreads", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int numberOfActiveThreads()", "full_signature": "@Override public int numberOfActiveThreads()", "class_method_signature": "AbstractSimpleThreadGroup.numberOfActiveThreads()", "testcase": false, "constructor": false}, {"identifier": "verifyThreadsStopped", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean verifyThreadsStopped()", "full_signature": "@Override public boolean verifyThreadsStopped()", "class_method_signature": "AbstractSimpleThreadGroup.verifyThreadsStopped()", "testcase": false, "constructor": false}, {"identifier": "verifyThreadStopped", "parameters": "(Thread thread)", "modifiers": "private", "return": "boolean", "signature": "boolean verifyThreadStopped(Thread thread)", "full_signature": "private boolean verifyThreadStopped(Thread thread)", "class_method_signature": "AbstractSimpleThreadGroup.verifyThreadStopped(Thread thread)", "testcase": false, "constructor": false}, {"identifier": "waitThreadsStopped", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void waitThreadsStopped()", "full_signature": "@Override public void waitThreadsStopped()", "class_method_signature": "AbstractSimpleThreadGroup.waitThreadsStopped()", "testcase": false, "constructor": false}, {"identifier": "waitThreadStopped", "parameters": "(Thread thread)", "modifiers": "private", "return": "void", "signature": "void waitThreadStopped(Thread thread)", "full_signature": "private void waitThreadStopped(Thread thread)", "class_method_signature": "AbstractSimpleThreadGroup.waitThreadStopped(Thread thread)", "testcase": false, "constructor": false}, {"identifier": "cloneTree", "parameters": "(ListedHashTree tree)", "modifiers": "private", "return": "ListedHashTree", "signature": "ListedHashTree cloneTree(ListedHashTree tree)", "full_signature": "private ListedHashTree cloneTree(ListedHashTree tree)", "class_method_signature": "AbstractSimpleThreadGroup.cloneTree(ListedHashTree tree)", "testcase": false, "constructor": false}], "file": "plugins/casutg/src/main/java/kg/apc/jmeter/threads/AbstractSimpleThreadGroup.java"}, "focal_method": {"identifier": "start", "parameters": "(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine) {\n        running = true;\n\n        int numThreads = getNumThreads();\n\n        log.info(\"Starting thread group number \" + groupNum + \" threads \" + numThreads);\n\n        long now = System.currentTimeMillis(); // needs to be same time for all threads in the group\n        final JMeterContext context = JMeterContextService.getContext();\n        for (int i = 0; running && i < numThreads; i++) {\n            JMeterThread jmThread = makeThread(groupNum, notifier, threadGroupTree, engine, i, context);\n            scheduleThread(jmThread, now); // set start and end time\n            Thread newThread = new Thread(jmThread, jmThread.getThreadName());\n            registerStartedThread(jmThread, newThread);\n            newThread.start();\n        }\n\n        log.info(\"Started thread group number \" + groupNum);\n    }", "signature": "void start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "full_signature": "@Override public void start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "class_method_signature": "AbstractSimpleThreadGroup.start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)", "testcase": false, "constructor": false, "invocations": ["getNumThreads", "info", "currentTimeMillis", "getContext", "makeThread", "scheduleThread", "getThreadName", "registerStartedThread", "start", "info"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}