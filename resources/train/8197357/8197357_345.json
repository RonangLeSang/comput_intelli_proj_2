{"test_class": {"identifier": "AbstractGraphRowTest", "superclass": "", "interfaces": "", "fields": [], "file": "infra/common/src/test/java/kg/apc/charting/AbstractGraphRowTest.java"}, "test_case": {"identifier": "testGetMaxX", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMaxX() {\n        System.out.println(\"getMaxX\");\n        AbstractGraphRow instance = new AbstractGraphRowImpl();\n        long expResult = Long.MIN_VALUE;\n        long result = instance.getMaxX();\n        Assert.assertEquals(expResult, result);\n    }", "signature": "void testGetMaxX()", "full_signature": "@Test public void testGetMaxX()", "class_method_signature": "AbstractGraphRowTest.testGetMaxX()", "testcase": true, "constructor": false, "invocations": ["println", "getMaxX", "assertEquals"]}, "focal_class": {"identifier": "AbstractGraphRow", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MARKER_SIZE_NONE = 0;", "modifier": "public static final", "type": "int", "declarator": "MARKER_SIZE_NONE = 0", "var_name": "MARKER_SIZE_NONE"}, {"original_string": "public static final int MARKER_SIZE_SMALL = 2;", "modifier": "public static final", "type": "int", "declarator": "MARKER_SIZE_SMALL = 2", "var_name": "MARKER_SIZE_SMALL"}, {"original_string": "public static final int MARKER_SIZE_BIG = 4;", "modifier": "public static final", "type": "int", "declarator": "MARKER_SIZE_BIG = 4", "var_name": "MARKER_SIZE_BIG"}, {"original_string": "public static final float LINE_THICKNESS_BIG = 3.0f;", "modifier": "public static final", "type": "float", "declarator": "LINE_THICKNESS_BIG = 3.0f", "var_name": "LINE_THICKNESS_BIG"}, {"original_string": "public static final int ROW_AVERAGES = 0;", "modifier": "public static final", "type": "int", "declarator": "ROW_AVERAGES = 0", "var_name": "ROW_AVERAGES"}, {"original_string": "public static final int ROW_EXACT_VALUES = 1;", "modifier": "public static final", "type": "int", "declarator": "ROW_EXACT_VALUES = 1", "var_name": "ROW_EXACT_VALUES"}, {"original_string": "public static final int ROW_OVERALL_AVERAGES = 2;", "modifier": "public static final", "type": "int", "declarator": "ROW_OVERALL_AVERAGES = 2", "var_name": "ROW_OVERALL_AVERAGES"}, {"original_string": "public static final int ROW_PERCENTILES = 3;", "modifier": "public static final", "type": "int", "declarator": "ROW_PERCENTILES = 3", "var_name": "ROW_PERCENTILES"}, {"original_string": "public static final int ROW_SUM_VALUES = 4;", "modifier": "public static final", "type": "int", "declarator": "ROW_SUM_VALUES = 4", "var_name": "ROW_SUM_VALUES"}, {"original_string": "public static final int ROW_ROLLING_SUM_VALUES = 5;", "modifier": "public static final", "type": "int", "declarator": "ROW_ROLLING_SUM_VALUES = 5", "var_name": "ROW_ROLLING_SUM_VALUES"}, {"original_string": "public static final int ROW_SIMPLE = 6;", "modifier": "public static final", "type": "int", "declarator": "ROW_SIMPLE = 6", "var_name": "ROW_SIMPLE"}, {"original_string": "protected boolean drawLine = false;", "modifier": "protected", "type": "boolean", "declarator": "drawLine = false", "var_name": "drawLine"}, {"original_string": "private boolean drawValueLabel = false;", "modifier": "private", "type": "boolean", "declarator": "drawValueLabel = false", "var_name": "drawValueLabel"}, {"original_string": "private boolean showInLegend = true;", "modifier": "private", "type": "boolean", "declarator": "showInLegend = true", "var_name": "showInLegend"}, {"original_string": "private boolean drawThickLines = false;", "modifier": "private", "type": "boolean", "declarator": "drawThickLines = false", "var_name": "drawThickLines"}, {"original_string": "protected int markerSize = MARKER_SIZE_NONE;", "modifier": "protected", "type": "int", "declarator": "markerSize = MARKER_SIZE_NONE", "var_name": "markerSize"}, {"original_string": "protected Color color = Color.BLACK;", "modifier": "protected", "type": "Color", "declarator": "color = Color.BLACK", "var_name": "color"}, {"original_string": "protected Rectangle legendColorBox = null;", "modifier": "protected", "type": "Rectangle", "declarator": "legendColorBox = null", "var_name": "legendColorBox"}, {"original_string": "protected String label = \"\";", "modifier": "protected", "type": "String", "declarator": "label = \"\"", "var_name": "label"}, {"original_string": "protected long maxX = Long.MIN_VALUE;", "modifier": "protected", "type": "long", "declarator": "maxX = Long.MIN_VALUE", "var_name": "maxX"}, {"original_string": "protected long minX = Long.MAX_VALUE;", "modifier": "protected", "type": "long", "declarator": "minX = Long.MAX_VALUE", "var_name": "minX"}, {"original_string": "private boolean drawOnChart = true;", "modifier": "private", "type": "boolean", "declarator": "drawOnChart = true", "var_name": "drawOnChart"}, {"original_string": "private boolean drawBar = false;", "modifier": "private", "type": "boolean", "declarator": "drawBar = false", "var_name": "drawBar"}, {"original_string": "private boolean drawSpline = false;", "modifier": "private", "type": "boolean", "declarator": "drawSpline = false", "var_name": "drawSpline"}, {"original_string": "private int granulation = 0;", "modifier": "private", "type": "int", "declarator": "granulation = 0", "var_name": "granulation"}, {"original_string": "private long firstTime = Long.MIN_VALUE;", "modifier": "private", "type": "long", "declarator": "firstTime = Long.MIN_VALUE", "var_name": "firstTime"}], "methods": [{"identifier": "setDrawThickLines", "parameters": "(boolean isThickLine)", "modifiers": "public", "return": "void", "signature": "void setDrawThickLines(boolean isThickLine)", "full_signature": "public void setDrawThickLines(boolean isThickLine)", "class_method_signature": "AbstractGraphRow.setDrawThickLines(boolean isThickLine)", "testcase": false, "constructor": false}, {"identifier": "isDrawThickLines", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDrawThickLines()", "full_signature": "public boolean isDrawThickLines()", "class_method_signature": "AbstractGraphRow.isDrawThickLines()", "testcase": false, "constructor": false}, {"identifier": "setDrawLine", "parameters": "(boolean b)", "modifiers": "public", "return": "void", "signature": "void setDrawLine(boolean b)", "full_signature": "public void setDrawLine(boolean b)", "class_method_signature": "AbstractGraphRow.setDrawLine(boolean b)", "testcase": false, "constructor": false}, {"identifier": "setMarkerSize", "parameters": "(int aMarkerSize)", "modifiers": "public", "return": "void", "signature": "void setMarkerSize(int aMarkerSize)", "full_signature": "public void setMarkerSize(int aMarkerSize)", "class_method_signature": "AbstractGraphRow.setMarkerSize(int aMarkerSize)", "testcase": false, "constructor": false}, {"identifier": "isDrawLine", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDrawLine()", "full_signature": "public boolean isDrawLine()", "class_method_signature": "AbstractGraphRow.isDrawLine()", "testcase": false, "constructor": false}, {"identifier": "getMarkerSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMarkerSize()", "full_signature": "public int getMarkerSize()", "class_method_signature": "AbstractGraphRow.getMarkerSize()", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getColor()", "full_signature": "public Color getColor()", "class_method_signature": "AbstractGraphRow.getColor()", "testcase": false, "constructor": false}, {"identifier": "setColor", "parameters": "(Color nextColor)", "modifiers": "public", "return": "void", "signature": "void setColor(Color nextColor)", "full_signature": "public void setColor(Color nextColor)", "class_method_signature": "AbstractGraphRow.setColor(Color nextColor)", "testcase": false, "constructor": false}, {"identifier": "getLabel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLabel()", "full_signature": "public String getLabel()", "class_method_signature": "AbstractGraphRow.getLabel()", "testcase": false, "constructor": false}, {"identifier": "setLabel", "parameters": "(String label)", "modifiers": "public", "return": "void", "signature": "void setLabel(String label)", "full_signature": "public void setLabel(String label)", "class_method_signature": "AbstractGraphRow.setLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "getMaxX", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxX()", "full_signature": "public long getMaxX()", "class_method_signature": "AbstractGraphRow.getMaxX()", "testcase": false, "constructor": false}, {"identifier": "getMinMaxY", "parameters": "(int maxPoints)", "modifiers": "public", "return": "double[]", "signature": "double[] getMinMaxY(int maxPoints)", "full_signature": "public double[] getMinMaxY(int maxPoints)", "class_method_signature": "AbstractGraphRow.getMinMaxY(int maxPoints)", "testcase": false, "constructor": false}, {"identifier": "getMinX", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMinX()", "full_signature": "public long getMinX()", "class_method_signature": "AbstractGraphRow.getMinX()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(long xVal, double yVal)", "modifiers": "public", "return": "void", "signature": "void add(long xVal, double yVal)", "full_signature": "public void add(long xVal, double yVal)", "class_method_signature": "AbstractGraphRow.add(long xVal, double yVal)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public abstract", "return": "Iterator<Entry<Long, AbstractGraphPanelChartElement>>", "signature": "Iterator<Entry<Long, AbstractGraphPanelChartElement>> iterator()", "full_signature": "public abstract Iterator<Entry<Long, AbstractGraphPanelChartElement>> iterator()", "class_method_signature": "AbstractGraphRow.iterator()", "testcase": false, "constructor": false}, {"identifier": "isDrawValueLabel", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDrawValueLabel()", "full_signature": "public boolean isDrawValueLabel()", "class_method_signature": "AbstractGraphRow.isDrawValueLabel()", "testcase": false, "constructor": false}, {"identifier": "setDrawValueLabel", "parameters": "(boolean drawValueLabel)", "modifiers": "public", "return": "void", "signature": "void setDrawValueLabel(boolean drawValueLabel)", "full_signature": "public void setDrawValueLabel(boolean drawValueLabel)", "class_method_signature": "AbstractGraphRow.setDrawValueLabel(boolean drawValueLabel)", "testcase": false, "constructor": false}, {"identifier": "isShowInLegend", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShowInLegend()", "full_signature": "public boolean isShowInLegend()", "class_method_signature": "AbstractGraphRow.isShowInLegend()", "testcase": false, "constructor": false}, {"identifier": "setShowInLegend", "parameters": "(boolean showInLegend)", "modifiers": "public", "return": "void", "signature": "void setShowInLegend(boolean showInLegend)", "full_signature": "public void setShowInLegend(boolean showInLegend)", "class_method_signature": "AbstractGraphRow.setShowInLegend(boolean showInLegend)", "testcase": false, "constructor": false}, {"identifier": "isDrawOnChart", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDrawOnChart()", "full_signature": "public boolean isDrawOnChart()", "class_method_signature": "AbstractGraphRow.isDrawOnChart()", "testcase": false, "constructor": false}, {"identifier": "setDrawOnChart", "parameters": "(boolean drawOnChart)", "modifiers": "public", "return": "void", "signature": "void setDrawOnChart(boolean drawOnChart)", "full_signature": "public void setDrawOnChart(boolean drawOnChart)", "class_method_signature": "AbstractGraphRow.setDrawOnChart(boolean drawOnChart)", "testcase": false, "constructor": false}, {"identifier": "setDrawBar", "parameters": "(boolean b)", "modifiers": "public", "return": "void", "signature": "void setDrawBar(boolean b)", "full_signature": "public void setDrawBar(boolean b)", "class_method_signature": "AbstractGraphRow.setDrawBar(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isDrawBar", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDrawBar()", "full_signature": "public boolean isDrawBar()", "class_method_signature": "AbstractGraphRow.isDrawBar()", "testcase": false, "constructor": false}, {"identifier": "isDrawSpline", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDrawSpline()", "full_signature": "public boolean isDrawSpline()", "class_method_signature": "AbstractGraphRow.isDrawSpline()", "testcase": false, "constructor": false}, {"identifier": "setDrawSpline", "parameters": "(boolean drawSpline)", "modifiers": "public", "return": "void", "signature": "void setDrawSpline(boolean drawSpline)", "full_signature": "public void setDrawSpline(boolean drawSpline)", "class_method_signature": "AbstractGraphRow.setDrawSpline(boolean drawSpline)", "testcase": false, "constructor": false}, {"identifier": "getGranulationValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getGranulationValue()", "full_signature": "public int getGranulationValue()", "class_method_signature": "AbstractGraphRow.getGranulationValue()", "testcase": false, "constructor": false}, {"identifier": "setGranulationValue", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void setGranulationValue(int value)", "full_signature": "public void setGranulationValue(int value)", "class_method_signature": "AbstractGraphRow.setGranulationValue(int value)", "testcase": false, "constructor": false}, {"identifier": "setExcludeOutOfRangeValues", "parameters": "(boolean excludeOutOfRangeValues)", "modifiers": "public", "return": "void", "signature": "void setExcludeOutOfRangeValues(boolean excludeOutOfRangeValues)", "full_signature": "public void setExcludeOutOfRangeValues(boolean excludeOutOfRangeValues)", "class_method_signature": "AbstractGraphRow.setExcludeOutOfRangeValues(boolean excludeOutOfRangeValues)", "testcase": false, "constructor": false}, {"identifier": "getElement", "parameters": "(long value)", "modifiers": "public abstract", "return": "AbstractGraphPanelChartElement", "signature": "AbstractGraphPanelChartElement getElement(long value)", "full_signature": "public abstract AbstractGraphPanelChartElement getElement(long value)", "class_method_signature": "AbstractGraphRow.getElement(long value)", "testcase": false, "constructor": false}, {"identifier": "getLowerElement", "parameters": "(long value)", "modifiers": "public", "return": "AbstractGraphPanelChartElement", "signature": "AbstractGraphPanelChartElement getLowerElement(long value)", "full_signature": "public AbstractGraphPanelChartElement getLowerElement(long value)", "class_method_signature": "AbstractGraphRow.getLowerElement(long value)", "testcase": false, "constructor": false}, {"identifier": "getHigherKey", "parameters": "(long value)", "modifiers": "public", "return": "Long", "signature": "Long getHigherKey(long value)", "full_signature": "public Long getHigherKey(long value)", "class_method_signature": "AbstractGraphRow.getHigherKey(long value)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int size()", "full_signature": "public abstract int size()", "class_method_signature": "AbstractGraphRow.size()", "testcase": false, "constructor": false}, {"identifier": "instantiateNewRow", "parameters": "(int rowType)", "modifiers": "public static", "return": "AbstractGraphRow", "signature": "AbstractGraphRow instantiateNewRow(int rowType)", "full_signature": "public static AbstractGraphRow instantiateNewRow(int rowType)", "class_method_signature": "AbstractGraphRow.instantiateNewRow(int rowType)", "testcase": false, "constructor": false}, {"identifier": "getFirstTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFirstTime()", "full_signature": "public long getFirstTime()", "class_method_signature": "AbstractGraphRow.getFirstTime()", "testcase": false, "constructor": false}, {"identifier": "setLegendColorBox", "parameters": "(Rectangle val)", "modifiers": "public", "return": "void", "signature": "void setLegendColorBox(Rectangle val)", "full_signature": "public void setLegendColorBox(Rectangle val)", "class_method_signature": "AbstractGraphRow.setLegendColorBox(Rectangle val)", "testcase": false, "constructor": false}, {"identifier": "getLegendColorBox", "parameters": "()", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getLegendColorBox()", "full_signature": "public Rectangle getLegendColorBox()", "class_method_signature": "AbstractGraphRow.getLegendColorBox()", "testcase": false, "constructor": false}], "file": "infra/common/src/main/java/kg/apc/charting/AbstractGraphRow.java"}, "focal_method": {"identifier": "getMaxX", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getMaxX() {\n        return maxX;\n    }", "signature": "long getMaxX()", "full_signature": "public long getMaxX()", "class_method_signature": "AbstractGraphRow.getMaxX()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}