{"test_class": {"identifier": "DbMonCollectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugins/dbmon/src/test/java/kg/apc/jmeter/dbmon/DbMonCollectorTest.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRun() {\n        System.out.println(\"run\");\n        DbMonCollector instance = new DbMonCollector();\n        // instance.run(); avoiding infinite loop\n    }", "signature": "void testRun()", "full_signature": "@Test public void testRun()", "class_method_signature": "DbMonCollectorTest.testRun()", "testcase": true, "constructor": false, "invocations": ["println"]}, "focal_class": {"identifier": "DbMonCollector", "superclass": "extends CorrectedResultCollector", "interfaces": "implements Runnable, DbMonSampleGenerator", "fields": [{"original_string": "private static final long serialVersionUID = 2521388319652516775L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2521388319652516775L", "var_name": "serialVersionUID"}, {"original_string": "private static boolean autoGenerateFiles = false;", "modifier": "private static", "type": "boolean", "declarator": "autoGenerateFiles = false", "var_name": "autoGenerateFiles"}, {"original_string": "private static final String DBMON = \"DbMon\";", "modifier": "private static final", "type": "String", "declarator": "DBMON = \"DbMon\"", "var_name": "DBMON"}, {"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "public static final String DATA_PROPERTY = \"samplers\";", "modifier": "public static final", "type": "String", "declarator": "DATA_PROPERTY = \"samplers\"", "var_name": "DATA_PROPERTY"}, {"original_string": "private int interval;", "modifier": "private", "type": "int", "declarator": "interval", "var_name": "interval"}, {"original_string": "private Thread workerThread = null;", "modifier": "private", "type": "Thread", "declarator": "workerThread = null", "var_name": "workerThread"}, {"original_string": "private List<DbMonSampler> dbMonSamplers = new ArrayList<DbMonSampler>();", "modifier": "private", "type": "List<DbMonSampler>", "declarator": "dbMonSamplers = new ArrayList<DbMonSampler>()", "var_name": "dbMonSamplers"}, {"original_string": "private static String autoFileBaseName = null;", "modifier": "private static", "type": "String", "declarator": "autoFileBaseName = null", "var_name": "autoFileBaseName"}, {"original_string": "private static int counter = 0;", "modifier": "private static", "type": "int", "declarator": "counter = 0", "var_name": "counter"}, {"original_string": "private static String workerHost = null;", "modifier": "private static", "type": "String", "declarator": "workerHost = null", "var_name": "workerHost"}], "methods": [{"identifier": "getAutoFileName", "parameters": "()", "modifiers": "private static synchronized", "return": "String", "signature": "String getAutoFileName()", "full_signature": "private static synchronized String getAutoFileName()", "class_method_signature": "DbMonCollector.getAutoFileName()", "testcase": false, "constructor": false}, {"identifier": "DbMonCollector", "parameters": "()", "modifiers": "public", "return": "", "signature": " DbMonCollector()", "full_signature": "public  DbMonCollector()", "class_method_signature": "DbMonCollector.DbMonCollector()", "testcase": false, "constructor": true}, {"identifier": "setData", "parameters": "(CollectionProperty rows)", "modifiers": "public", "return": "void", "signature": "void setData(CollectionProperty rows)", "full_signature": "public void setData(CollectionProperty rows)", "class_method_signature": "DbMonCollector.setData(CollectionProperty rows)", "testcase": false, "constructor": false}, {"identifier": "getSamplerSettings", "parameters": "()", "modifiers": "public", "return": "JMeterProperty", "signature": "JMeterProperty getSamplerSettings()", "full_signature": "public JMeterProperty getSamplerSettings()", "class_method_signature": "DbMonCollector.getSamplerSettings()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void run()", "full_signature": "@Override public synchronized void run()", "class_method_signature": "DbMonCollector.run()", "testcase": false, "constructor": false}, {"identifier": "isWorkingHost", "parameters": "(String host)", "modifiers": "private synchronized static", "return": "boolean", "signature": "boolean isWorkingHost(String host)", "full_signature": "private synchronized static boolean isWorkingHost(String host)", "class_method_signature": "DbMonCollector.isWorkingHost(String host)", "testcase": false, "constructor": false}, {"identifier": "testStarted", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void testStarted()", "full_signature": "public void testStarted()", "class_method_signature": "DbMonCollector.testStarted()", "testcase": false, "constructor": false}, {"identifier": "testStarted", "parameters": "(String host)", "modifiers": "@Override public", "return": "void", "signature": "void testStarted(String host)", "full_signature": "@Override public void testStarted(String host)", "class_method_signature": "DbMonCollector.testStarted(String host)", "testcase": false, "constructor": false}, {"identifier": "initCollector", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initCollector()", "full_signature": "private void initCollector()", "class_method_signature": "DbMonCollector.initCollector()", "testcase": false, "constructor": false}, {"identifier": "setupSaving", "parameters": "(String fileName)", "modifiers": "private", "return": "void", "signature": "void setupSaving(String fileName)", "full_signature": "private void setupSaving(String fileName)", "class_method_signature": "DbMonCollector.setupSaving(String fileName)", "testcase": false, "constructor": false}, {"identifier": "testEnded", "parameters": "(String host)", "modifiers": "@Override public", "return": "void", "signature": "void testEnded(String host)", "full_signature": "@Override public void testEnded(String host)", "class_method_signature": "DbMonCollector.testEnded(String host)", "testcase": false, "constructor": false}, {"identifier": "initiateConnectors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initiateConnectors()", "full_signature": "private void initiateConnectors()", "class_method_signature": "DbMonCollector.initiateConnectors()", "testcase": false, "constructor": false}, {"identifier": "initiateConnector", "parameters": "(String connectionPoolName, String name, boolean delta, String sql)", "modifiers": "private", "return": "void", "signature": "void initiateConnector(String connectionPoolName, String name, boolean delta, String sql)", "full_signature": "private void initiateConnector(String connectionPoolName, String name, boolean delta, String sql)", "class_method_signature": "DbMonCollector.initiateConnector(String connectionPoolName, String name, boolean delta, String sql)", "testcase": false, "constructor": false}, {"identifier": "findConnectionSamePoolName", "parameters": "(String connectionPoolName)", "modifiers": "private", "return": "Connection", "signature": "Connection findConnectionSamePoolName(String connectionPoolName)", "full_signature": "private Connection findConnectionSamePoolName(String connectionPoolName)", "class_method_signature": "DbMonCollector.findConnectionSamePoolName(String connectionPoolName)", "testcase": false, "constructor": false}, {"identifier": "shutdownConnectors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void shutdownConnectors()", "full_signature": "private void shutdownConnectors()", "class_method_signature": "DbMonCollector.shutdownConnectors()", "testcase": false, "constructor": false}, {"identifier": "processConnectors", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void processConnectors()", "full_signature": "protected void processConnectors()", "class_method_signature": "DbMonCollector.processConnectors()", "testcase": false, "constructor": false}, {"identifier": "sampleOccurred", "parameters": "(SampleEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void sampleOccurred(SampleEvent event)", "full_signature": "@Override public void sampleOccurred(SampleEvent event)", "class_method_signature": "DbMonCollector.sampleOccurred(SampleEvent event)", "testcase": false, "constructor": false}, {"identifier": "dbMonSampleOccurred", "parameters": "(SampleEvent event)", "modifiers": "protected", "return": "void", "signature": "void dbMonSampleOccurred(SampleEvent event)", "full_signature": "protected void dbMonSampleOccurred(SampleEvent event)", "class_method_signature": "DbMonCollector.dbMonSampleOccurred(SampleEvent event)", "testcase": false, "constructor": false}, {"identifier": "generateSample", "parameters": "(double value, String label)", "modifiers": "@Override public", "return": "void", "signature": "void generateSample(double value, String label)", "full_signature": "@Override public void generateSample(double value, String label)", "class_method_signature": "DbMonCollector.generateSample(double value, String label)", "testcase": false, "constructor": false}], "file": "plugins/dbmon/src/main/java/kg/apc/jmeter/dbmon/DbMonCollector.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void run() {\n        try {\n            while (true) {\n                processConnectors();\n                this.wait(interval);\n            }\n        } catch (InterruptedException ex) {\n            log.debug(\"Monitoring thread was interrupted\", ex);\n        }\n    }", "signature": "void run()", "full_signature": "@Override public synchronized void run()", "class_method_signature": "DbMonCollector.run()", "testcase": false, "constructor": false, "invocations": ["processConnectors", "wait", "debug"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}