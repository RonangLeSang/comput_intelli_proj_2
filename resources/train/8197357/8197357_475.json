{"test_class": {"identifier": "AbstractIPSamplerTest", "superclass": "", "interfaces": "", "fields": [], "file": "infra/common-io/src/test/java/kg/apc/jmeter/samplers/AbstractIPSamplerTest.java"}, "test_case": {"identifier": "testGetRecvBuf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testGetRecvBuf() {\n      System.out.println(\"getRecvBuf\");\n      AbstractIPSampler instance = new AbstractIPSamplerImpl();\n      ByteBuffer result = instance.getRecvBuf();\n      assertNotNull(result);\n   }", "signature": "void testGetRecvBuf()", "full_signature": "@Test public void testGetRecvBuf()", "class_method_signature": "AbstractIPSamplerTest.testGetRecvBuf()", "testcase": true, "constructor": false, "invocations": ["println", "getRecvBuf", "assertNotNull"]}, "focal_class": {"identifier": "AbstractIPSampler", "superclass": "extends AbstractSampler", "interfaces": "implements Serializable, Cloneable, Interruptible", "fields": [{"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "public static final String RECV_BUFFER_LEN_PROPERTY = \"kg.apc.jmeter.samplers.ReceiveBufferSize\";", "modifier": "public static final", "type": "String", "declarator": "RECV_BUFFER_LEN_PROPERTY = \"kg.apc.jmeter.samplers.ReceiveBufferSize\"", "var_name": "RECV_BUFFER_LEN_PROPERTY"}, {"original_string": "public static final String RESULT_DATA_LIMIT = \"kg.apc.jmeter.samplers.ResultDataLimit\";", "modifier": "public static final", "type": "String", "declarator": "RESULT_DATA_LIMIT = \"kg.apc.jmeter.samplers.ResultDataLimit\"", "var_name": "RESULT_DATA_LIMIT"}, {"original_string": "public static final String HOSTNAME = \"hostname\";", "modifier": "public static final", "type": "String", "declarator": "HOSTNAME = \"hostname\"", "var_name": "HOSTNAME"}, {"original_string": "public static final String PORT = \"port\";", "modifier": "public static final", "type": "String", "declarator": "PORT = \"port\"", "var_name": "PORT"}, {"original_string": "public static final String TIMEOUT = \"timeout\";", "modifier": "public static final", "type": "String", "declarator": "TIMEOUT = \"timeout\"", "var_name": "TIMEOUT"}, {"original_string": "public static final String DATA = \"data\";", "modifier": "public static final", "type": "String", "declarator": "DATA = \"data\"", "var_name": "DATA"}, {"original_string": "public static final String CRLF = \"\\r\\n\";", "modifier": "public static final", "type": "String", "declarator": "CRLF = \"\\r\\n\"", "var_name": "CRLF"}, {"original_string": "public static final String EMPTY = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "public static final String RC200 = \"200\";", "modifier": "public static final", "type": "String", "declarator": "RC200 = \"200\"", "var_name": "RC200"}, {"original_string": "public static final String RC500 = \"500\";", "modifier": "public static final", "type": "String", "declarator": "RC500 = \"500\"", "var_name": "RC500"}, {"original_string": "protected final static int recvBufSize = JMeterUtils.getPropDefault(RECV_BUFFER_LEN_PROPERTY, 1024 * 4);", "modifier": "protected final static", "type": "int", "declarator": "recvBufSize = JMeterUtils.getPropDefault(RECV_BUFFER_LEN_PROPERTY, 1024 * 4)", "var_name": "recvBufSize"}, {"original_string": "private transient ByteBuffer recvBuf;", "modifier": "private transient", "type": "ByteBuffer", "declarator": "recvBuf", "var_name": "recvBuf"}, {"original_string": "protected final int recvDataLimit;", "modifier": "protected final", "type": "int", "declarator": "recvDataLimit", "var_name": "recvDataLimit"}], "methods": [{"identifier": "AbstractIPSampler", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractIPSampler()", "full_signature": "public  AbstractIPSampler()", "class_method_signature": "AbstractIPSampler.AbstractIPSampler()", "testcase": false, "constructor": true}, {"identifier": "getRecvBuf", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer getRecvBuf()", "full_signature": "public ByteBuffer getRecvBuf()", "class_method_signature": "AbstractIPSampler.getRecvBuf()", "testcase": false, "constructor": false}, {"identifier": "getHostName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getHostName()", "full_signature": "public final String getHostName()", "class_method_signature": "AbstractIPSampler.getHostName()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPort()", "full_signature": "public String getPort()", "class_method_signature": "AbstractIPSampler.getPort()", "testcase": false, "constructor": false}, {"identifier": "getRequestData", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestData()", "full_signature": "public String getRequestData()", "class_method_signature": "AbstractIPSampler.getRequestData()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTimeout()", "full_signature": "public String getTimeout()", "class_method_signature": "AbstractIPSampler.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "setHostName", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void setHostName(String text)", "full_signature": "public void setHostName(String text)", "class_method_signature": "AbstractIPSampler.setHostName(String text)", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void setPort(String text)", "full_signature": "public void setPort(String text)", "class_method_signature": "AbstractIPSampler.setPort(String text)", "testcase": false, "constructor": false}, {"identifier": "setRequestData", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void setRequestData(String text)", "full_signature": "public void setRequestData(String text)", "class_method_signature": "AbstractIPSampler.setRequestData(String text)", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void setTimeout(String text)", "full_signature": "public void setTimeout(String text)", "class_method_signature": "AbstractIPSampler.setTimeout(String text)", "testcase": false, "constructor": false}, {"identifier": "getPortAsInt", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getPortAsInt()", "full_signature": "protected int getPortAsInt()", "class_method_signature": "AbstractIPSampler.getPortAsInt()", "testcase": false, "constructor": false}, {"identifier": "getTimeoutAsInt", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getTimeoutAsInt()", "full_signature": "protected int getTimeoutAsInt()", "class_method_signature": "AbstractIPSampler.getTimeoutAsInt()", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "(Entry entry)", "modifiers": "@Override public", "return": "SampleResult", "signature": "SampleResult sample(Entry entry)", "full_signature": "@Override public SampleResult sample(Entry entry)", "class_method_signature": "AbstractIPSampler.sample(Entry entry)", "testcase": false, "constructor": false}, {"identifier": "getChannel", "parameters": "()", "modifiers": "abstract protected", "return": "AbstractSelectableChannel", "signature": "AbstractSelectableChannel getChannel()", "full_signature": "abstract protected AbstractSelectableChannel getChannel()", "class_method_signature": "AbstractIPSampler.getChannel()", "testcase": false, "constructor": false}, {"identifier": "processIO", "parameters": "(SampleResult res)", "modifiers": "abstract protected", "return": "byte[]", "signature": "byte[] processIO(SampleResult res)", "full_signature": "abstract protected byte[] processIO(SampleResult res)", "class_method_signature": "AbstractIPSampler.processIO(SampleResult res)", "testcase": false, "constructor": false}], "file": "infra/common-io/src/main/java/kg/apc/jmeter/samplers/AbstractIPSampler.java"}, "focal_method": {"identifier": "getRecvBuf", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "body": "public ByteBuffer getRecvBuf() {\n        if (recvBuf == null) {\n            recvBuf = ByteBuffer.allocateDirect(recvBufSize);\n        }\n        return recvBuf;\n    }", "signature": "ByteBuffer getRecvBuf()", "full_signature": "public ByteBuffer getRecvBuf()", "class_method_signature": "AbstractIPSampler.getRecvBuf()", "testcase": false, "constructor": false, "invocations": ["allocateDirect"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}