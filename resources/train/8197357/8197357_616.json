{"test_class": {"identifier": "JSONPathExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String json = \"{ \\\"store\\\": {\\n\" +\n            \"    \\\"book\\\": [ \\n\" +\n            \"      { \\\"category\\\": \\\"reference\\\",\\n\" +\n            \"        \\\"author\\\": \\\"Nigel Rees\\\",\\n\" +\n            \"        \\\"title\\\": \\\"Sayings of the Century\\\",\\n\" +\n            \"        \\\"price\\\": 8.95\\n\" +\n            \"      },\\n\" +\n            \"      { \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"        \\\"author\\\": \\\"Evelyn Waugh\\\",\\n\" +\n            \"        \\\"title\\\": \\\"Sword of Honour\\\",\\n\" +\n            \"        \\\"price\\\": 12.99\\n\" +\n            \"      },\\n\" +\n            \"      { \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"        \\\"author\\\": \\\"Herman Melville\\\",\\n\" +\n            \"        \\\"title\\\": \\\"Moby Dick\\\",\\n\" +\n            \"        \\\"isbn\\\": \\\"0-553-21311-3\\\",\\n\" +\n            \"        \\\"price\\\": 8.99\\n\" +\n            \"      },\\n\" +\n            \"      { \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"        \\\"author\\\": \\\"J. R. R. Tolkien\\\",\\n\" +\n            \"        \\\"title\\\": \\\"The Lord of the Rings\\\",\\n\" +\n            \"        \\\"isbn\\\": \\\"0-395-19395-8\\\",\\n\" +\n            \"        \\\"price\\\": 22.99\\n\" +\n            \"      }\\n\" +\n            \"    ],\\n\" +\n            \"    \\\"bicycle\\\": {\\n\" +\n            \"      \\\"color\\\": \\\"red\\\",\\n\" +\n            \"      \\\"price\\\": 19.95\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "json = \"{ \\\"store\\\": {\\n\" +\n            \"    \\\"book\\\": [ \\n\" +\n            \"      { \\\"category\\\": \\\"reference\\\",\\n\" +\n            \"        \\\"author\\\": \\\"Nigel Rees\\\",\\n\" +\n            \"        \\\"title\\\": \\\"Sayings of the Century\\\",\\n\" +\n            \"        \\\"price\\\": 8.95\\n\" +\n            \"      },\\n\" +\n            \"      { \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"        \\\"author\\\": \\\"Evelyn Waugh\\\",\\n\" +\n            \"        \\\"title\\\": \\\"Sword of Honour\\\",\\n\" +\n            \"        \\\"price\\\": 12.99\\n\" +\n            \"      },\\n\" +\n            \"      { \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"        \\\"author\\\": \\\"Herman Melville\\\",\\n\" +\n            \"        \\\"title\\\": \\\"Moby Dick\\\",\\n\" +\n            \"        \\\"isbn\\\": \\\"0-553-21311-3\\\",\\n\" +\n            \"        \\\"price\\\": 8.99\\n\" +\n            \"      },\\n\" +\n            \"      { \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"        \\\"author\\\": \\\"J. R. R. Tolkien\\\",\\n\" +\n            \"        \\\"title\\\": \\\"The Lord of the Rings\\\",\\n\" +\n            \"        \\\"isbn\\\": \\\"0-395-19395-8\\\",\\n\" +\n            \"        \\\"price\\\": 22.99\\n\" +\n            \"      }\\n\" +\n            \"    ],\\n\" +\n            \"    \\\"bicycle\\\": {\\n\" +\n            \"      \\\"color\\\": \\\"red\\\",\\n\" +\n            \"      \\\"price\\\": 19.95\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"}\"", "var_name": "json"}, {"original_string": "private static final String json2 = \"{\\n\" +\n            \"  \\\"status\\\": \\\"success\\\",\\n\" +\n            \"  \\\"data\\\": {\\n\" +\n            \"    \\\"groups\\\": [\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"e02991f4-a95d-43dd-8eb0-fbc44349e238\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Uber\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"71bc2d86-b023-44ca-b358-52531bd57ab3\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Hooey\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"378e9b20-99bb-4d1f-bf2c-6a4a6c69a8ed\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Zaz\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"296453c7-379b-4694-8cc2-5ca44afcb0a4\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Zompek\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"46834f01-6b5f-4b35-bd34-e96aa9cbe315\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Asguard\\\"\\n\" +\n            \"      }\\n\" +\n            \"    ]\\n\" +\n            \"  }\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "json2 = \"{\\n\" +\n            \"  \\\"status\\\": \\\"success\\\",\\n\" +\n            \"  \\\"data\\\": {\\n\" +\n            \"    \\\"groups\\\": [\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"e02991f4-a95d-43dd-8eb0-fbc44349e238\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Uber\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"71bc2d86-b023-44ca-b358-52531bd57ab3\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Hooey\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"378e9b20-99bb-4d1f-bf2c-6a4a6c69a8ed\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Zaz\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"296453c7-379b-4694-8cc2-5ca44afcb0a4\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Zompek\\\"\\n\" +\n            \"      },\\n\" +\n            \"      {\\n\" +\n            \"        \\\"id\\\": \\\"46834f01-6b5f-4b35-bd34-e96aa9cbe315\\\",\\n\" +\n            \"        \\\"name\\\": \\\"Asguard\\\"\\n\" +\n            \"      }\\n\" +\n            \"    ]\\n\" +\n            \"  }\\n\" +\n            \"}\"", "var_name": "json2"}, {"original_string": "private static final String json3 = \"{\\n\" +\n            \" \\\"data\\\":[\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":0}},\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":1}},\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":2}},\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":0}},\\n\" +\n            \" ]\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "json3 = \"{\\n\" +\n            \" \\\"data\\\":[\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":0}},\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":1}},\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":2}},\\n\" +\n            \"   {\\\"attr\\\":{\\\"value\\\":0}},\\n\" +\n            \" ]\\n\" +\n            \"}\"", "var_name": "json3"}], "file": "plugins/json/src/test/java/com/atlantbh/jmeter/plugins/jsonutils/jsonpathextractor/JSONPathExtractorTest.java"}, "test_case": {"identifier": "testProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcess() {\n        System.out.println(\"process\");\n        JMeterContext context = JMeterContextService.getContext();\n        SampleResult res = new SampleResult();\n        res.setResponseData(json.getBytes());\n        context.setPreviousResult(res);\n\n        JSONPathExtractor instance = new JSONPathExtractor();\n        instance.setDefaultValue(\"DEFAULT\");\n        instance.setVar(\"test\");\n        instance.setJsonPath(\"$.store.book[*].author\");\n        instance.process();\n        JMeterVariables vars = context.getVariables();\n        assertEquals(\"[\\\"Nigel Rees\\\",\\\"Evelyn Waugh\\\",\\\"Herman Melville\\\",\\\"J. R. R. Tolkien\\\"]\", vars.get(\"test\"));\n    }", "signature": "void testProcess()", "full_signature": "@Test public void testProcess()", "class_method_signature": "JSONPathExtractorTest.testProcess()", "testcase": true, "constructor": false, "invocations": ["println", "getContext", "setResponseData", "getBytes", "setPreviousResult", "setDefaultValue", "setVar", "setJsonPath", "process", "getVariables", "assertEquals", "get"]}, "focal_class": {"identifier": "JSONPathExtractor", "superclass": "extends AbstractTestElement", "interfaces": "implements PostProcessor", "fields": [{"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final String INPUT_JSON = \"JSON\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_JSON = \"JSON\"", "var_name": "INPUT_JSON"}, {"original_string": "public static final String INPUT_YAML = \"YAML\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_YAML = \"YAML\"", "var_name": "INPUT_YAML"}, {"original_string": "public static final String INPUT_FORMAT = \"INPUT_FORMAT\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_FORMAT = \"INPUT_FORMAT\"", "var_name": "INPUT_FORMAT"}, {"original_string": "public static final String JSONPATH = \"JSONPATH\";", "modifier": "public static final", "type": "String", "declarator": "JSONPATH = \"JSONPATH\"", "var_name": "JSONPATH"}, {"original_string": "public static final String VAR = \"VAR\";", "modifier": "public static final", "type": "String", "declarator": "VAR = \"VAR\"", "var_name": "VAR"}, {"original_string": "public static final String DEFAULT = \"DEFAULT\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT = \"DEFAULT\"", "var_name": "DEFAULT"}, {"original_string": "public static final String SUBJECT = \"SUBJECT\";", "modifier": "public static final", "type": "String", "declarator": "SUBJECT = \"SUBJECT\"", "var_name": "SUBJECT"}, {"original_string": "public static final String SRC_VARNAME = \"VARIABLE\";", "modifier": "public static final", "type": "String", "declarator": "SRC_VARNAME = \"VARIABLE\"", "var_name": "SRC_VARNAME"}, {"original_string": "public static final String SUBJECT_BODY = \"BODY\";", "modifier": "public static final", "type": "String", "declarator": "SUBJECT_BODY = \"BODY\"", "var_name": "SUBJECT_BODY"}, {"original_string": "public static final String SUBJECT_VARIABLE = \"VAR\";", "modifier": "public static final", "type": "String", "declarator": "SUBJECT_VARIABLE = \"VAR\"", "var_name": "SUBJECT_VARIABLE"}, {"original_string": "public static final DecimalFormat decimalFormatter = new DecimalFormat(\"#.#\");", "modifier": "public static final", "type": "DecimalFormat", "declarator": "decimalFormatter = new DecimalFormat(\"#.#\")", "var_name": "decimalFormatter"}], "methods": [{"identifier": "JSONPathExtractor", "parameters": "()", "modifiers": "public", "return": "", "signature": " JSONPathExtractor()", "full_signature": "public  JSONPathExtractor()", "class_method_signature": "JSONPathExtractor.JSONPathExtractor()", "testcase": false, "constructor": true}, {"identifier": "setInputFormat", "parameters": "(String inputFormat)", "modifiers": "public", "return": "void", "signature": "void setInputFormat(String inputFormat)", "full_signature": "public void setInputFormat(String inputFormat)", "class_method_signature": "JSONPathExtractor.setInputFormat(String inputFormat)", "testcase": false, "constructor": false}, {"identifier": "getInputFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInputFormat()", "full_signature": "public String getInputFormat()", "class_method_signature": "JSONPathExtractor.getInputFormat()", "testcase": false, "constructor": false}, {"identifier": "getJsonPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getJsonPath()", "full_signature": "public String getJsonPath()", "class_method_signature": "JSONPathExtractor.getJsonPath()", "testcase": false, "constructor": false}, {"identifier": "setJsonPath", "parameters": "(String jsonPath)", "modifiers": "public", "return": "void", "signature": "void setJsonPath(String jsonPath)", "full_signature": "public void setJsonPath(String jsonPath)", "class_method_signature": "JSONPathExtractor.setJsonPath(String jsonPath)", "testcase": false, "constructor": false}, {"identifier": "getVar", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVar()", "full_signature": "public String getVar()", "class_method_signature": "JSONPathExtractor.getVar()", "testcase": false, "constructor": false}, {"identifier": "setVar", "parameters": "(String var)", "modifiers": "public", "return": "void", "signature": "void setVar(String var)", "full_signature": "public void setVar(String var)", "class_method_signature": "JSONPathExtractor.setVar(String var)", "testcase": false, "constructor": false}, {"identifier": "setDefaultValue", "parameters": "(String defaultValue)", "modifiers": "public", "return": "void", "signature": "void setDefaultValue(String defaultValue)", "full_signature": "public void setDefaultValue(String defaultValue)", "class_method_signature": "JSONPathExtractor.setDefaultValue(String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultValue()", "full_signature": "public String getDefaultValue()", "class_method_signature": "JSONPathExtractor.getDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "setSrcVariableName", "parameters": "(String defaultValue)", "modifiers": "public", "return": "void", "signature": "void setSrcVariableName(String defaultValue)", "full_signature": "public void setSrcVariableName(String defaultValue)", "class_method_signature": "JSONPathExtractor.setSrcVariableName(String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getSrcVariableName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSrcVariableName()", "full_signature": "public String getSrcVariableName()", "class_method_signature": "JSONPathExtractor.getSrcVariableName()", "testcase": false, "constructor": false}, {"identifier": "setSubject", "parameters": "(String defaultValue)", "modifiers": "public", "return": "void", "signature": "void setSubject(String defaultValue)", "full_signature": "public void setSubject(String defaultValue)", "class_method_signature": "JSONPathExtractor.setSubject(String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSubject()", "full_signature": "public String getSubject()", "class_method_signature": "JSONPathExtractor.getSubject()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void process()", "full_signature": "@Override public void process()", "class_method_signature": "JSONPathExtractor.process()", "testcase": false, "constructor": false}, {"identifier": "objectToString", "parameters": "(Object subj)", "modifiers": "public static", "return": "String", "signature": "String objectToString(Object subj)", "full_signature": "public static String objectToString(Object subj)", "class_method_signature": "JSONPathExtractor.objectToString(Object subj)", "testcase": false, "constructor": false}], "file": "plugins/json/src/main/java/com/atlantbh/jmeter/plugins/jsonutils/jsonpathextractor/JSONPathExtractor.java"}, "focal_method": {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process() {\n        JMeterContext context = getThreadContext();\n        JMeterVariables vars = context.getVariables();\n        SampleResult previousResult = context.getPreviousResult();\n        String responseData;\n        if (getSubject().equals(SUBJECT_VARIABLE)) {\n            responseData = vars.get(getSrcVariableName());\n        } else {\n            responseData = previousResult.getResponseDataAsString();\n        }\n\n\n        try {\n            if (INPUT_YAML.equals(getInputFormat())) {\n                responseData = YAMLToJSONConverter.convert(responseData);\n            }\n            Object jsonPathResult = JsonPath.read(responseData, getJsonPath());\n            if (jsonPathResult instanceof JSONArray) {\n                Object[] arr = ((JSONArray) jsonPathResult).toArray();\n\n                if (arr.length == 0) {\n                    throw new PathNotFoundException(\"Extracted array is empty\");\n                }\n\n                vars.put(this.getVar(), objectToString(jsonPathResult));\n                vars.put(this.getVar() + \"_matchNr\", objectToString(arr.length));\n\n                int k = 1;\n                while (vars.get(this.getVar() + \"_\" + k) != null) {\n                    vars.remove(this.getVar() + \"_\" + k);\n                    k++;\n                }\n\n                for (int n = 0; n < arr.length; n++) {\n                    vars.put(this.getVar() + \"_\" + (n + 1), objectToString(arr[n]));\n                }\n            } else {\n                vars.put(this.getVar(), objectToString(jsonPathResult));\n            }\n        } catch (Exception e) {\n            log.debug(\"Extract failed\", e);\n            vars.put(this.getVar(), getDefaultValue());\n            vars.put(this.getVar() + \"_matchNr\", \"0\");\n            int k = 1;\n            while (vars.get(this.getVar() + \"_\" + k) != null) {\n                vars.remove(this.getVar() + \"_\" + k);\n                k++;\n            }\n        }\n    }", "signature": "void process()", "full_signature": "@Override public void process()", "class_method_signature": "JSONPathExtractor.process()", "testcase": false, "constructor": false, "invocations": ["getThreadContext", "getVariables", "getPreviousResult", "equals", "getSubject", "get", "getSrcVariableName", "getResponseDataAsString", "equals", "getInputFormat", "convert", "read", "getJsonPath", "toArray", "put", "getVar", "objectToString", "put", "getVar", "objectToString", "get", "getVar", "remove", "getVar", "put", "getVar", "objectToString", "put", "getVar", "objectToString", "debug", "put", "getVar", "getDefaultValue", "put", "getVar", "get", "getVar", "remove", "getVar"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}