{"test_class": {"identifier": "ReporterToolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String basedir;", "modifier": "private final", "type": "String", "declarator": "basedir", "var_name": "basedir"}], "file": "tools/cmd/src/test/java/kg/apc/cmdtools/ReporterToolTest.java"}, "test_case": {"identifier": "testProcessParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessParams() {\n        System.out.println(\"processParams\");\n        ListIterator args = PluginsCMD.argsArrayToListIterator(\"--help\".split(\" \"));\n        ReporterTool instance = new ReporterTool();\n        try {\n            instance.processParams(args);\n            fail();\n        } catch (UnsupportedOperationException ignored) {\n        }\n    }", "signature": "void testProcessParams()", "full_signature": "@Test public void testProcessParams()", "class_method_signature": "ReporterToolTest.testProcessParams()", "testcase": true, "constructor": false, "invocations": ["println", "argsArrayToListIterator", "split", "processParams", "fail"]}, "focal_class": {"identifier": "ReporterTool", "superclass": "extends AbstractCMDTool", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}], "methods": [{"identifier": "showHelp", "parameters": "(PrintStream os)", "modifiers": "@Override protected", "return": "void", "signature": "void showHelp(PrintStream os)", "full_signature": "@Override protected void showHelp(PrintStream os)", "class_method_signature": "ReporterTool.showHelp(PrintStream os)", "testcase": false, "constructor": false}, {"identifier": "processParams", "parameters": "(ListIterator args)", "modifiers": "@Override protected", "return": "int", "signature": "int processParams(ListIterator args)", "full_signature": "@Override protected int processParams(ListIterator args)", "class_method_signature": "ReporterTool.processParams(ListIterator args)", "testcase": false, "constructor": false}], "file": "tools/cmd/src/main/java/kg/apc/cmdtools/ReporterTool.java"}, "focal_method": {"identifier": "processParams", "parameters": "(ListIterator args)", "modifiers": "@Override protected", "return": "int", "body": "@Override\n    protected int processParams(ListIterator args) throws UnsupportedOperationException, IllegalArgumentException {\n        LoggingManager.setPriority(Priority.INFO);\n        // first process params without worker created\n        while (args.hasNext()) {\n            String nextArg = (String) args.next();\n            if (nextArg.equals(\"--loglevel\")) {\n                args.remove();\n                String loglevelStr = (String) args.next();\n                args.remove();\n                LoggingManager.setPriority(loglevelStr);\n            }\n        }\n\n        // rewind it\n        while (args.hasPrevious()) {\n            args.previous();\n        }\n\n        PluginsCMDWorker worker = new PluginsCMDWorker();\n\n        while (args.hasNext()) {\n            String nextArg = (String) args.next();\n            log.debug(\"Arg: \" + nextArg);\n            if (nextArg.equalsIgnoreCase(\"--generate-png\")) {\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing PNG file name\");\n                }\n\n                worker.addExportMode(PluginsCMDWorker.EXPORT_PNG);\n                worker.setOutputPNGFile((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--generate-csv\")) {\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing CSV file name\");\n                }\n\n                worker.addExportMode(PluginsCMDWorker.EXPORT_CSV);\n                worker.setOutputCSVFile((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--input-jtl\")) {\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing input JTL file name\");\n                }\n\n                worker.setInputFile((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--plugin-type\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing plugin type\");\n                }\n\n                worker.setPluginType((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--width\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing width specification\");\n                }\n\n                worker.setGraphWidth(Integer.parseInt((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--height\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing height specification\");\n                }\n\n                worker.setGraphHeight(Integer.parseInt((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--aggregate-rows\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing aggregate flag\");\n                }\n\n                worker.setAggregate(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--paint-zeroing\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing zeroing flag\");\n                }\n\n                worker.setZeroing(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--relative-times\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing rel time flag\");\n                }\n\n                worker.setRelativeTimes(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--paint-gradient\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing gradient flag\");\n                }\n\n                worker.setGradient(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--paint-markers\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing markers flag\");\n                }\n\n                worker.setMarkers(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--prevent-outliers\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing outliers flag\");\n                }\n\n                worker.setPreventOutliers(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--limit-rows\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing limit rows specification\");\n                }\n\n                worker.setRowsLimit(Integer.parseInt((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--force-y\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing limit Y specification\");\n                }\n\n                worker.setForceY(Integer.parseInt((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--hide-low-counts\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing low counts specification\");\n                }\n\n                worker.setHideLowCounts(Integer.parseInt((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--line-weight\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing line thickness specification\");\n                }\n\n                worker.setLineWeight(Float.parseFloat((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--granulation\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing granulation specification\");\n                }\n\n                worker.setGranulation(Integer.parseInt((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--include-labels\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing granulation specification\");\n                }\n\n                worker.setIncludeLabels((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--exclude-labels\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing granulation specification\");\n                }\n\n                worker.setExcludeLabels((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--auto-scale\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing auto-zoom flag value\");\n                }\n\n                worker.setAutoScaleRows(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--success-filter\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing success filter flag\");\n                }\n\n                worker.setSuccessFilter(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--include-label-regex\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing include label regex flag\");\n                }\n\n                worker.setIncludeSamplesWithRegex(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--exclude-label-regex\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing exclude label regex flag\");\n                }\n\n                worker.setExcludeSamplesWithRegex(getLogicValue((String) args.next()));\n            } else if (nextArg.equalsIgnoreCase(\"--start-offset\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing start offset flag\");\n                }\n\n                worker.setStartOffset((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--end-offset\")) {\n\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing end offset flag\");\n                }\n\n                worker.setEndOffset((String) args.next());\n            } else if (nextArg.equalsIgnoreCase(\"--yAxisLabel\")) {\n                if (!args.hasNext()) {\n                    throw new IllegalArgumentException(\"Missing Y-Axis label string\");\n                }\n                worker.setYAxisLabel((String) args.next());\n            } else {\n                worker.processUnknownOption(nextArg, args);\n            }\n        }\n\n        return worker.doJob();\n    }", "signature": "int processParams(ListIterator args)", "full_signature": "@Override protected int processParams(ListIterator args)", "class_method_signature": "ReporterTool.processParams(ListIterator args)", "testcase": false, "constructor": false, "invocations": ["setPriority", "hasNext", "next", "equals", "remove", "next", "remove", "setPriority", "hasPrevious", "previous", "hasNext", "next", "debug", "equalsIgnoreCase", "hasNext", "addExportMode", "setOutputPNGFile", "next", "equalsIgnoreCase", "hasNext", "addExportMode", "setOutputCSVFile", "next", "equalsIgnoreCase", "hasNext", "setInputFile", "next", "equalsIgnoreCase", "hasNext", "setPluginType", "next", "equalsIgnoreCase", "hasNext", "setGraphWidth", "parseInt", "next", "equalsIgnoreCase", "hasNext", "setGraphHeight", "parseInt", "next", "equalsIgnoreCase", "hasNext", "setAggregate", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setZeroing", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setRelativeTimes", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setGradient", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setMarkers", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setPreventOutliers", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setRowsLimit", "parseInt", "next", "equalsIgnoreCase", "hasNext", "setForceY", "parseInt", "next", "equalsIgnoreCase", "hasNext", "setHideLowCounts", "parseInt", "next", "equalsIgnoreCase", "hasNext", "setLineWeight", "parseFloat", "next", "equalsIgnoreCase", "hasNext", "setGranulation", "parseInt", "next", "equalsIgnoreCase", "hasNext", "setIncludeLabels", "next", "equalsIgnoreCase", "hasNext", "setExcludeLabels", "next", "equalsIgnoreCase", "hasNext", "setAutoScaleRows", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setSuccessFilter", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setIncludeSamplesWithRegex", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setExcludeSamplesWithRegex", "getLogicValue", "next", "equalsIgnoreCase", "hasNext", "setStartOffset", "next", "equalsIgnoreCase", "hasNext", "setEndOffset", "next", "equalsIgnoreCase", "hasNext", "setYAxisLabel", "next", "processUnknownOption", "doJob"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}