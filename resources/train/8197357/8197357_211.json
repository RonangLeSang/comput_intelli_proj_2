{"test_class": {"identifier": "AbstractOverTimeVisualizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "infra/common/src/test/java/kg/apc/jmeter/graphs/AbstractOverTimeVisualizerTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        System.out.println(\"add\");\n        SampleResult sample = new SampleResult();\n        AbstractOverTimeVisualizer instance = new AbstractOverTimeVisualizerImpl();\n        instance.add(sample);\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "AbstractOverTimeVisualizerTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["println", "add"]}, "focal_class": {"identifier": "AbstractOverTimeVisualizer", "superclass": "extends AbstractGraphPanelVisualizer", "interfaces": "", "fields": [{"original_string": "protected long relativeStartTime = 0;", "modifier": "protected", "type": "long", "declarator": "relativeStartTime = 0", "var_name": "relativeStartTime"}, {"original_string": "private boolean isJtlLoad = false;", "modifier": "private", "type": "boolean", "declarator": "isJtlLoad = false", "var_name": "isJtlLoad"}], "methods": [{"identifier": "AbstractOverTimeVisualizer", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractOverTimeVisualizer()", "full_signature": "public  AbstractOverTimeVisualizer()", "class_method_signature": "AbstractOverTimeVisualizer.AbstractOverTimeVisualizer()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(SampleResult sample)", "modifiers": "@Override public", "return": "void", "signature": "void add(SampleResult sample)", "full_signature": "@Override public void add(SampleResult sample)", "class_method_signature": "AbstractOverTimeVisualizer.add(SampleResult sample)", "testcase": false, "constructor": false}, {"identifier": "handleRelativeStartTime", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handleRelativeStartTime()", "full_signature": "protected void handleRelativeStartTime()", "class_method_signature": "AbstractOverTimeVisualizer.handleRelativeStartTime()", "testcase": false, "constructor": false}, {"identifier": "clearData", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearData()", "full_signature": "@Override public void clearData()", "class_method_signature": "AbstractOverTimeVisualizer.clearData()", "testcase": false, "constructor": false}, {"identifier": "normalizeTime", "parameters": "(long time)", "modifiers": "protected", "return": "long", "signature": "long normalizeTime(long time)", "full_signature": "protected long normalizeTime(long time)", "class_method_signature": "AbstractOverTimeVisualizer.normalizeTime(long time)", "testcase": false, "constructor": false}], "file": "infra/common/src/main/java/kg/apc/jmeter/graphs/AbstractOverTimeVisualizer.java"}, "focal_method": {"identifier": "add", "parameters": "(SampleResult sample)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void add(SampleResult sample) {\n        if (relativeStartTime == 0) {\n            // \n            if(!isIgnoreCurrentTestStartTime()){\n                relativeStartTime = JMeterContextService.getTestStartTime(); \n            }\n            isJtlLoad = false;\n            if (relativeStartTime == 0) {\n                relativeStartTime = sample.getStartTime();\n                isJtlLoad = true;\n            }\n            relativeStartTime = relativeStartTime - relativeStartTime%getGranulation();\n            handleRelativeStartTime();\n        }\n        if(isJtlLoad) {\n            if(relativeStartTime > sample.getStartTime()) {\n                relativeStartTime = sample.getStartTime() - sample.getStartTime()%getGranulation();\n                handleRelativeStartTime();\n            }\n        }\n    }", "signature": "void add(SampleResult sample)", "full_signature": "@Override public void add(SampleResult sample)", "class_method_signature": "AbstractOverTimeVisualizer.add(SampleResult sample)", "testcase": false, "constructor": false, "invocations": ["isIgnoreCurrentTestStartTime", "getTestStartTime", "getStartTime", "getGranulation", "handleRelativeStartTime", "getStartTime", "getStartTime", "getStartTime", "getGranulation", "handleRelativeStartTime"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}