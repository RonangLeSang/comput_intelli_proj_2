{"test_class": {"identifier": "AbstractGraphPanelVisualizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "infra/common/src/test/java/kg/apc/jmeter/graphs/AbstractGraphPanelVisualizerTest.java"}, "test_case": {"identifier": "testMinMax_none", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMinMax_none() {\n        CorrectedResultCollector instance = new CorrectedResultCollector();\n        instance.testStarted();\n        DebugVisualizer vis = new DebugVisualizer();\n        vis.configure(instance);\n        instance.setListener(vis);\n        SampleResult res = SampleResult.createTestSample(21000, 30000);\n        res.setSampleLabel(\"test\");\n        instance.sampleOccurred(new SampleEvent(res, \"tg\"));\n        assertEquals(\"test\", vis.lastLabel);\n    }", "signature": "void testMinMax_none()", "full_signature": "@Test public void testMinMax_none()", "class_method_signature": "AbstractGraphPanelVisualizerTest.testMinMax_none()", "testcase": true, "constructor": false, "invocations": ["testStarted", "configure", "setListener", "createTestSample", "setSampleLabel", "sampleOccurred", "assertEquals"]}, "focal_class": {"identifier": "AbstractGraphPanelVisualizer", "superclass": "extends AbstractVisualizer", "interfaces": "implements Clearable,\n        ImageVisualizer,\n        SettingsInterface", "fields": [{"original_string": "private static final Logger log = LoggingManager.getLoggerForClass();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggingManager.getLoggerForClass()", "var_name": "log"}, {"original_string": "protected ConcurrentSkipListMap<String, AbstractGraphRow> model;", "modifier": "protected", "type": "ConcurrentSkipListMap<String, AbstractGraphRow>", "declarator": "model", "var_name": "model"}, {"original_string": "protected ConcurrentSkipListMap<String, AbstractGraphRow> modelAggregate;", "modifier": "protected", "type": "ConcurrentSkipListMap<String, AbstractGraphRow>", "declarator": "modelAggregate", "var_name": "modelAggregate"}, {"original_string": "protected long lastRepaint = 0;", "modifier": "protected", "type": "long", "declarator": "lastRepaint = 0", "var_name": "lastRepaint"}, {"original_string": "private int interval = 500;", "modifier": "private", "type": "int", "declarator": "interval = 500", "var_name": "interval"}, {"original_string": "protected boolean isAggregate = false;", "modifier": "protected", "type": "boolean", "declarator": "isAggregate = false", "var_name": "isAggregate"}, {"original_string": "protected GraphPanel graphPanel;", "modifier": "protected", "type": "GraphPanel", "declarator": "graphPanel", "var_name": "graphPanel"}, {"original_string": "protected ColorsDispatcher colors;", "modifier": "protected", "type": "ColorsDispatcher", "declarator": "colors", "var_name": "colors"}, {"original_string": "private static final long REPAINT_INTERVAL = 500;", "modifier": "private static final", "type": "long", "declarator": "REPAINT_INTERVAL = 500", "var_name": "REPAINT_INTERVAL"}, {"original_string": "public static final String INTERVAL_PROPERTY = \"interval_grouping\";", "modifier": "public static final", "type": "String", "declarator": "INTERVAL_PROPERTY = \"interval_grouping\"", "var_name": "INTERVAL_PROPERTY"}, {"original_string": "public static final String GRAPH_AGGREGATED = \"graph_aggregated\";", "modifier": "public static final", "type": "String", "declarator": "GRAPH_AGGREGATED = \"graph_aggregated\"", "var_name": "GRAPH_AGGREGATED"}, {"original_string": "private JSettingsPanel settingsPanel = null;", "modifier": "private", "type": "JSettingsPanel", "declarator": "settingsPanel = null", "var_name": "settingsPanel"}, {"original_string": "private List<String> includes = new ArrayList<>(0);", "modifier": "private", "type": "List<String>", "declarator": "includes = new ArrayList<>(0)", "var_name": "includes"}, {"original_string": "private List<String> excludes = new ArrayList<>(0);", "modifier": "private", "type": "List<String>", "declarator": "excludes = new ArrayList<>(0)", "var_name": "excludes"}, {"original_string": "private String incRegex;", "modifier": "private", "type": "String", "declarator": "incRegex", "var_name": "incRegex"}, {"original_string": "private String excRegex;", "modifier": "private", "type": "String", "declarator": "excRegex", "var_name": "excRegex"}, {"original_string": "private boolean includeRegexChkboxState;", "modifier": "private", "type": "boolean", "declarator": "includeRegexChkboxState", "var_name": "includeRegexChkboxState"}, {"original_string": "private boolean excludeRegexChkboxState;", "modifier": "private", "type": "boolean", "declarator": "excludeRegexChkboxState", "var_name": "excludeRegexChkboxState"}, {"original_string": "protected long startTimeRef = 0;", "modifier": "protected", "type": "long", "declarator": "startTimeRef = 0", "var_name": "startTimeRef"}, {"original_string": "protected long startTimeInf;", "modifier": "protected", "type": "long", "declarator": "startTimeInf", "var_name": "startTimeInf"}, {"original_string": "protected long startTimeSup;", "modifier": "protected", "type": "long", "declarator": "startTimeSup", "var_name": "startTimeSup"}, {"original_string": "private long startOffset;", "modifier": "private", "type": "long", "declarator": "startOffset", "var_name": "startOffset"}, {"original_string": "private long endOffset;", "modifier": "private", "type": "long", "declarator": "endOffset", "var_name": "endOffset"}, {"original_string": "private JPanel container;", "modifier": "private", "type": "JPanel", "declarator": "container", "var_name": "container"}, {"original_string": "private boolean filePanelVisible = true;", "modifier": "private", "type": "boolean", "declarator": "filePanelVisible = true", "var_name": "filePanelVisible"}, {"original_string": "private boolean maximized = false;", "modifier": "private", "type": "boolean", "declarator": "maximized = false", "var_name": "maximized"}, {"original_string": "private JButton maximizeButton;", "modifier": "private", "type": "JButton", "declarator": "maximizeButton", "var_name": "maximizeButton"}, {"original_string": "private boolean ignoreCurrentTestStartTime;", "modifier": "private", "type": "boolean", "declarator": "ignoreCurrentTestStartTime", "var_name": "ignoreCurrentTestStartTime"}, {"original_string": "private LabelToColorMapping labelToColorMapping = null;", "modifier": "private", "type": "LabelToColorMapping", "declarator": "labelToColorMapping = null", "var_name": "labelToColorMapping"}], "methods": [{"identifier": "reloadLabelToColorMapping", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reloadLabelToColorMapping()", "full_signature": "private void reloadLabelToColorMapping()", "class_method_signature": "AbstractGraphPanelVisualizer.reloadLabelToColorMapping()", "testcase": false, "constructor": false}, {"identifier": "AbstractGraphPanelVisualizer", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractGraphPanelVisualizer()", "full_signature": "public  AbstractGraphPanelVisualizer()", "class_method_signature": "AbstractGraphPanelVisualizer.AbstractGraphPanelVisualizer()", "testcase": false, "constructor": true}, {"identifier": "createSettingsPanel", "parameters": "()", "modifiers": "protected abstract", "return": "JSettingsPanel", "signature": "JSettingsPanel createSettingsPanel()", "full_signature": "protected abstract JSettingsPanel createSettingsPanel()", "class_method_signature": "AbstractGraphPanelVisualizer.createSettingsPanel()", "testcase": false, "constructor": false}, {"identifier": "getStaticLabel", "parameters": "()", "modifiers": "@Override public abstract", "return": "String", "signature": "String getStaticLabel()", "full_signature": "@Override public abstract String getStaticLabel()", "class_method_signature": "AbstractGraphPanelVisualizer.getStaticLabel()", "testcase": false, "constructor": false}, {"identifier": "initGui", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initGui()", "full_signature": "private void initGui()", "class_method_signature": "AbstractGraphPanelVisualizer.initGui()", "testcase": false, "constructor": false}, {"identifier": "createTitleLabel", "parameters": "()", "modifiers": "@Override protected", "return": "Component", "signature": "Component createTitleLabel()", "full_signature": "@Override protected Component createTitleLabel()", "class_method_signature": "AbstractGraphPanelVisualizer.createTitleLabel()", "testcase": false, "constructor": false}, {"identifier": "enableMaximize", "parameters": "(boolean enable)", "modifiers": "protected", "return": "void", "signature": "void enableMaximize(boolean enable)", "full_signature": "protected void enableMaximize(boolean enable)", "class_method_signature": "AbstractGraphPanelVisualizer.enableMaximize(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "hideFilePanel", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void hideFilePanel()", "full_signature": "protected void hideFilePanel()", "class_method_signature": "AbstractGraphPanelVisualizer.hideFilePanel()", "testcase": false, "constructor": false}, {"identifier": "toogleMaximize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void toogleMaximize()", "full_signature": "private void toogleMaximize()", "class_method_signature": "AbstractGraphPanelVisualizer.toogleMaximize()", "testcase": false, "constructor": false}, {"identifier": "getGraphPanelContainer", "parameters": "()", "modifiers": "protected", "return": "JPanel", "signature": "JPanel getGraphPanelContainer()", "full_signature": "protected JPanel getGraphPanelContainer()", "class_method_signature": "AbstractGraphPanelVisualizer.getGraphPanelContainer()", "testcase": false, "constructor": false}, {"identifier": "createGraphPanel", "parameters": "()", "modifiers": "protected", "return": "GraphPanel", "signature": "GraphPanel createGraphPanel()", "full_signature": "protected GraphPanel createGraphPanel()", "class_method_signature": "AbstractGraphPanelVisualizer.createGraphPanel()", "testcase": false, "constructor": false}, {"identifier": "setExtraChartSettings", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setExtraChartSettings()", "full_signature": "protected void setExtraChartSettings()", "class_method_signature": "AbstractGraphPanelVisualizer.setExtraChartSettings()", "testcase": false, "constructor": false}, {"identifier": "updateGui", "parameters": "(Sample sample)", "modifiers": "public", "return": "void", "signature": "void updateGui(Sample sample)", "full_signature": "public void updateGui(Sample sample)", "class_method_signature": "AbstractGraphPanelVisualizer.updateGui(Sample sample)", "testcase": false, "constructor": false}, {"identifier": "updateGui", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateGui()", "full_signature": "public void updateGui()", "class_method_signature": "AbstractGraphPanelVisualizer.updateGui()", "testcase": false, "constructor": false}, {"identifier": "clearData", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearData()", "full_signature": "@Override public void clearData()", "class_method_signature": "AbstractGraphPanelVisualizer.clearData()", "testcase": false, "constructor": false}, {"identifier": "getImage", "parameters": "()", "modifiers": "@Override public", "return": "Image", "signature": "Image getImage()", "full_signature": "@Override public Image getImage()", "class_method_signature": "AbstractGraphPanelVisualizer.getImage()", "testcase": false, "constructor": false}, {"identifier": "getGranulation", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGranulation()", "full_signature": "@Override public int getGranulation()", "class_method_signature": "AbstractGraphPanelVisualizer.getGranulation()", "testcase": false, "constructor": false}, {"identifier": "setGranulation", "parameters": "(int granulation)", "modifiers": "@Override public", "return": "void", "signature": "void setGranulation(int granulation)", "full_signature": "@Override public void setGranulation(int granulation)", "class_method_signature": "AbstractGraphPanelVisualizer.setGranulation(int granulation)", "testcase": false, "constructor": false}, {"identifier": "stateChanged", "parameters": "(ChangeEvent e)", "modifiers": "@Override public", "return": "void", "signature": "void stateChanged(ChangeEvent e)", "full_signature": "@Override public void stateChanged(ChangeEvent e)", "class_method_signature": "AbstractGraphPanelVisualizer.stateChanged(ChangeEvent e)", "testcase": false, "constructor": false}, {"identifier": "createTestElement", "parameters": "()", "modifiers": "@Override public", "return": "TestElement", "signature": "TestElement createTestElement()", "full_signature": "@Override public TestElement createTestElement()", "class_method_signature": "AbstractGraphPanelVisualizer.createTestElement()", "testcase": false, "constructor": false}, {"identifier": "modifyTestElement", "parameters": "(TestElement c)", "modifiers": "@Override public", "return": "void", "signature": "void modifyTestElement(TestElement c)", "full_signature": "@Override public void modifyTestElement(TestElement c)", "class_method_signature": "AbstractGraphPanelVisualizer.modifyTestElement(TestElement c)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(TestElement el)", "modifiers": "@Override public", "return": "void", "signature": "void configure(TestElement el)", "full_signature": "@Override public void configure(TestElement el)", "class_method_signature": "AbstractGraphPanelVisualizer.configure(TestElement el)", "testcase": false, "constructor": false}, {"identifier": "getGraphPanelChart", "parameters": "()", "modifiers": "@Override public", "return": "GraphPanelChart", "signature": "GraphPanelChart getGraphPanelChart()", "full_signature": "@Override public GraphPanelChart getGraphPanelChart()", "class_method_signature": "AbstractGraphPanelVisualizer.getGraphPanelChart()", "testcase": false, "constructor": false}, {"identifier": "switchModel", "parameters": "(boolean aggregate)", "modifiers": "@Override public", "return": "void", "signature": "void switchModel(boolean aggregate)", "full_signature": "@Override public void switchModel(boolean aggregate)", "class_method_signature": "AbstractGraphPanelVisualizer.switchModel(boolean aggregate)", "testcase": false, "constructor": false}, {"identifier": "addRowToCompositeModels", "parameters": "(String rowName, AbstractGraphRow row)", "modifiers": "private", "return": "void", "signature": "void addRowToCompositeModels(String rowName, AbstractGraphRow row)", "full_signature": "private void addRowToCompositeModels(String rowName, AbstractGraphRow row)", "class_method_signature": "AbstractGraphPanelVisualizer.addRowToCompositeModels(String rowName, AbstractGraphRow row)", "testcase": false, "constructor": false}, {"identifier": "clearRowsFromCompositeModels", "parameters": "(String vizualizerName)", "modifiers": "private", "return": "void", "signature": "void clearRowsFromCompositeModels(String vizualizerName)", "full_signature": "private void clearRowsFromCompositeModels(String vizualizerName)", "class_method_signature": "AbstractGraphPanelVisualizer.clearRowsFromCompositeModels(String vizualizerName)", "testcase": false, "constructor": false}, {"identifier": "getNewRow", "parameters": "(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            Color color,\n            boolean canCompose)", "modifiers": "protected synchronized", "return": "AbstractGraphRow", "signature": "AbstractGraphRow getNewRow(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            Color color,\n            boolean canCompose)", "full_signature": "protected synchronized AbstractGraphRow getNewRow(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            Color color,\n            boolean canCompose)", "class_method_signature": "AbstractGraphPanelVisualizer.getNewRow(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            Color color,\n            boolean canCompose)", "testcase": false, "constructor": false}, {"identifier": "getNewRow", "parameters": "(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            boolean canCompose)", "modifiers": "protected synchronized", "return": "AbstractGraphRow", "signature": "AbstractGraphRow getNewRow(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            boolean canCompose)", "full_signature": "protected synchronized AbstractGraphRow getNewRow(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            boolean canCompose)", "class_method_signature": "AbstractGraphPanelVisualizer.getNewRow(\n            ConcurrentSkipListMap<String, AbstractGraphRow> model,\n            int rowType,\n            String label,\n            int markerSize,\n            boolean isBarRow,\n            boolean displayLabel,\n            boolean thickLines,\n            boolean showInLegend,\n            boolean canCompose)", "testcase": false, "constructor": false}, {"identifier": "isFromTransactionControler", "parameters": "(SampleResult res)", "modifiers": "protected", "return": "boolean", "signature": "boolean isFromTransactionControler(SampleResult res)", "full_signature": "protected boolean isFromTransactionControler(SampleResult res)", "class_method_signature": "AbstractGraphPanelVisualizer.isFromTransactionControler(SampleResult res)", "testcase": false, "constructor": false}, {"identifier": "getSettingsPanel", "parameters": "()", "modifiers": "public", "return": "JSettingsPanel", "signature": "JSettingsPanel getSettingsPanel()", "full_signature": "public JSettingsPanel getSettingsPanel()", "class_method_signature": "AbstractGraphPanelVisualizer.getSettingsPanel()", "testcase": false, "constructor": false}, {"identifier": "setOptionsFromProperties", "parameters": "(GraphPanelChart graph)", "modifiers": "private", "return": "void", "signature": "void setOptionsFromProperties(GraphPanelChart graph)", "full_signature": "private void setOptionsFromProperties(GraphPanelChart graph)", "class_method_signature": "AbstractGraphPanelVisualizer.setOptionsFromProperties(GraphPanelChart graph)", "testcase": false, "constructor": false}, {"identifier": "isSampleIncluded", "parameters": "(SampleResult res)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSampleIncluded(SampleResult res)", "full_signature": "protected boolean isSampleIncluded(SampleResult res)", "class_method_signature": "AbstractGraphPanelVisualizer.isSampleIncluded(SampleResult res)", "testcase": false, "constructor": false}, {"identifier": "isSampleIncluded", "parameters": "(String sampleLabel)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSampleIncluded(String sampleLabel)", "full_signature": "protected boolean isSampleIncluded(String sampleLabel)", "class_method_signature": "AbstractGraphPanelVisualizer.isSampleIncluded(String sampleLabel)", "testcase": false, "constructor": false}, {"identifier": "setUpFiltering", "parameters": "(CorrectedResultCollector rc)", "modifiers": "public", "return": "void", "signature": "void setUpFiltering(CorrectedResultCollector rc)", "full_signature": "public void setUpFiltering(CorrectedResultCollector rc)", "class_method_signature": "AbstractGraphPanelVisualizer.setUpFiltering(CorrectedResultCollector rc)", "testcase": false, "constructor": false}, {"identifier": "setIgnoreCurrentTestStartTime", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setIgnoreCurrentTestStartTime()", "full_signature": "public void setIgnoreCurrentTestStartTime()", "class_method_signature": "AbstractGraphPanelVisualizer.setIgnoreCurrentTestStartTime()", "testcase": false, "constructor": false}, {"identifier": "isIgnoreCurrentTestStartTime", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreCurrentTestStartTime()", "full_signature": "public boolean isIgnoreCurrentTestStartTime()", "class_method_signature": "AbstractGraphPanelVisualizer.isIgnoreCurrentTestStartTime()", "testcase": false, "constructor": false}, {"identifier": "clearGui", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearGui()", "full_signature": "@Override public void clearGui()", "class_method_signature": "AbstractGraphPanelVisualizer.clearGui()", "testcase": false, "constructor": false}, {"identifier": "addMouseClickColorChangeListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addMouseClickColorChangeListener()", "full_signature": "private void addMouseClickColorChangeListener()", "class_method_signature": "AbstractGraphPanelVisualizer.addMouseClickColorChangeListener()", "testcase": false, "constructor": false}], "file": "infra/common/src/main/java/kg/apc/jmeter/graphs/AbstractGraphPanelVisualizer.java"}, "focal_method": {"identifier": "configure", "parameters": "(TestElement el)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void configure(TestElement el) {\n        super.configure(el);\n        int intervalProp = el.getPropertyAsInt(INTERVAL_PROPERTY);\n        boolean aggregatedProp = el.getPropertyAsBoolean(GRAPH_AGGREGATED, false);\n        if (intervalProp > 0) {\n            setGranulation(intervalProp);\n        }\n        graphPanel.getRowSelectorPanel().setIncludeSampleLabels(el.getPropertyAsString(CorrectedResultCollector.INCLUDE_SAMPLE_LABELS));\n        graphPanel.getRowSelectorPanel().setExcludeSampleLabels(el.getPropertyAsString(CorrectedResultCollector.EXCLUDE_SAMPLE_LABELS));\n\n        if (!CorrectedResultCollector.EMPTY_FIELD.equals(el\n                .getPropertyAsString(CorrectedResultCollector.START_OFFSET))) {\n            graphPanel\n                    .getRowSelectorPanel()\n                    .setStartOffset(\n                            (el.getPropertyAsLong(CorrectedResultCollector.START_OFFSET)));\n        }\n        if (!CorrectedResultCollector.EMPTY_FIELD.equals(el\n                .getPropertyAsString(CorrectedResultCollector.END_OFFSET))) {\n            graphPanel\n                    .getRowSelectorPanel()\n                    .setEndOffset(\n                            (el.getPropertyAsLong(CorrectedResultCollector.END_OFFSET)));\n        }\n\n        graphPanel\n                .getRowSelectorPanel()\n                .setSelectedRegExpInc(\n                        el.getPropertyAsBoolean(CorrectedResultCollector.INCLUDE_REGEX_CHECKBOX_STATE));\n        graphPanel\n                .getRowSelectorPanel()\n                .setSelectedRegExpExc(\n                        el.getPropertyAsBoolean(CorrectedResultCollector.EXCLUDE_REGEX_CHECKBOX_STATE));\n\n        if (el instanceof CorrectedResultCollector) {\n            setUpFiltering((CorrectedResultCollector) el);\n        }\n\n        switchModel(aggregatedProp);\n    }", "signature": "void configure(TestElement el)", "full_signature": "@Override public void configure(TestElement el)", "class_method_signature": "AbstractGraphPanelVisualizer.configure(TestElement el)", "testcase": false, "constructor": false, "invocations": ["configure", "getPropertyAsInt", "getPropertyAsBoolean", "setGranulation", "setIncludeSampleLabels", "getRowSelectorPanel", "getPropertyAsString", "setExcludeSampleLabels", "getRowSelectorPanel", "getPropertyAsString", "equals", "getPropertyAsString", "setStartOffset", "getRowSelectorPanel", "getPropertyAsLong", "equals", "getPropertyAsString", "setEndOffset", "getRowSelectorPanel", "getPropertyAsLong", "setSelectedRegExpInc", "getRowSelectorPanel", "getPropertyAsBoolean", "setSelectedRegExpExc", "getRowSelectorPanel", "getPropertyAsBoolean", "setUpFiltering", "switchModel"]}, "repository": {"repo_id": 8197357, "url": "https://github.com/undera/jmeter-plugins", "stars": 388, "created": "2/14/2013 10:17:40 AM +00:00", "updates": "2020-01-26T06:36:21+00:00", "fork": "False", "license": "licensed"}}