{"test_class": {"identifier": "ArgumentReadHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ArgumentReadHandler argumentReadHandler;", "modifier": "private", "type": "ArgumentReadHandler", "declarator": "argumentReadHandler", "var_name": "argumentReadHandler"}, {"original_string": "private Attributes testAttributes;", "modifier": "private", "type": "Attributes", "declarator": "testAttributes", "var_name": "testAttributes"}], "file": "engine/extensions-kettle/src/test/java/org/pentaho/reporting/engine/classic/extensions/datasources/kettle/parser/ArgumentReadHandlerTest.java"}, "test_case": {"identifier": "startParsing_exception_on_missed_formula", "parameters": "()", "modifiers": "@Test( expected = SAXException.class ) public", "return": "void", "body": "@Test( expected = SAXException.class )\n  public void startParsing_exception_on_missed_formula() throws SAXException {\n    argumentReadHandler.startParsing( testAttributes );\n  }", "signature": "void startParsing_exception_on_missed_formula()", "full_signature": "@Test( expected = SAXException.class ) public void startParsing_exception_on_missed_formula()", "class_method_signature": "ArgumentReadHandlerTest.startParsing_exception_on_missed_formula()", "testcase": true, "constructor": false, "invocations": ["startParsing"]}, "focal_class": {"identifier": "ArgumentReadHandler", "superclass": "extends AbstractXmlReadHandler", "interfaces": "", "fields": [{"original_string": "private String formula;", "modifier": "private", "type": "String", "declarator": "formula", "var_name": "formula"}], "methods": [{"identifier": "ArgumentReadHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArgumentReadHandler()", "full_signature": "public  ArgumentReadHandler()", "class_method_signature": "ArgumentReadHandler.ArgumentReadHandler()", "testcase": false, "constructor": true}, {"identifier": "startParsing", "parameters": "( final Attributes attrs )", "modifiers": "protected", "return": "void", "signature": "void startParsing( final Attributes attrs )", "full_signature": "protected void startParsing( final Attributes attrs )", "class_method_signature": "ArgumentReadHandler.startParsing( final Attributes attrs )", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getObject()", "full_signature": "public Object getObject()", "class_method_signature": "ArgumentReadHandler.getObject()", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "()", "modifiers": "public", "return": "FormulaArgument", "signature": "FormulaArgument getFormula()", "full_signature": "public FormulaArgument getFormula()", "class_method_signature": "ArgumentReadHandler.getFormula()", "testcase": false, "constructor": false}], "file": "engine/extensions-kettle/src/main/java/org/pentaho/reporting/engine/classic/extensions/datasources/kettle/parser/ArgumentReadHandler.java"}, "focal_method": {"identifier": "startParsing", "parameters": "( final Attributes attrs )", "modifiers": "protected", "return": "void", "body": "protected void startParsing( final Attributes attrs ) throws SAXException {\n    this.formula = attrs.getValue( getUri(), \"formula\" );\n    if ( formula == null ) {\n      String dataRowName = attrs.getValue( getUri(), \"datarow-name\" );\n      if ( dataRowName == null ) {\n        throw new ParseException( \"Required attribute 'datarow-name' is not defined\" );\n      }\n\n      this.formula = '=' + FormulaUtil.quoteReference( dataRowName );\n    }\n  }", "signature": "void startParsing( final Attributes attrs )", "full_signature": "protected void startParsing( final Attributes attrs )", "class_method_signature": "ArgumentReadHandler.startParsing( final Attributes attrs )", "testcase": false, "constructor": false, "invocations": ["getValue", "getUri", "getValue", "getUri", "quoteReference"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}