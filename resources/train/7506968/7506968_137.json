{"test_class": {"identifier": "CategoricalChartExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CategoricalChartExpression expression;", "modifier": "private", "type": "CategoricalChartExpression", "declarator": "expression", "var_name": "expression"}], "file": "engine/legacy-charts/src/test/java/org/pentaho/plugin/jfreereport/reportcharts/CategoricalChartExpressionTest.java"}, "test_case": {"identifier": "configureRangeAxis_NegativeValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void configureRangeAxis_NegativeValues() {\n    final double lower = -20;\n    final double upper = -10;\n    NumberAxis axis = new NumberAxis();\n    axis.setRange( lower, upper );\n\n    expression.configureRangeAxis( createCategoryPlotWith( axis ), createFont() );\n\n    Assert.assertTrue( axis.getLowerBound() < lower );\n    Assert.assertTrue( axis.getUpperBound() > upper );\n    Assert.assertTrue( axis.getUpperBound() < 0 );\n  }", "signature": "void configureRangeAxis_NegativeValues()", "full_signature": "@Test public void configureRangeAxis_NegativeValues()", "class_method_signature": "CategoricalChartExpressionTest.configureRangeAxis_NegativeValues()", "testcase": true, "constructor": false, "invocations": ["setRange", "configureRangeAxis", "createCategoryPlotWith", "createFont", "assertTrue", "getLowerBound", "assertTrue", "getUpperBound", "assertTrue", "getUpperBound"]}, "focal_class": {"identifier": "CategoricalChartExpression", "superclass": "extends AbstractChartExpression", "interfaces": "implements LegacyUpdateHandler", "fields": [{"original_string": "private static final long serialVersionUID = -402500824047401239L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -402500824047401239L", "var_name": "serialVersionUID"}, {"original_string": "private static final double DEFAULT_SCALE_FACTOR = 1.0;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_SCALE_FACTOR = 1.0", "var_name": "DEFAULT_SCALE_FACTOR"}, {"original_string": "private String valueAxisLabel;", "modifier": "private", "type": "String", "declarator": "valueAxisLabel", "var_name": "valueAxisLabel"}, {"original_string": "private String categoryAxisLabel;", "modifier": "private", "type": "String", "declarator": "categoryAxisLabel", "var_name": "categoryAxisLabel"}, {"original_string": "private boolean horizontal;", "modifier": "private", "type": "boolean", "declarator": "horizontal", "var_name": "horizontal"}, {"original_string": "private boolean showGridlines;", "modifier": "private", "type": "boolean", "declarator": "showGridlines", "var_name": "showGridlines"}, {"original_string": "private Double labelRotation;", "modifier": "private", "type": "Double", "declarator": "labelRotation", "var_name": "labelRotation"}, {"original_string": "private Float maxCategoryLabelWidthRatio;", "modifier": "private", "type": "Float", "declarator": "maxCategoryLabelWidthRatio", "var_name": "maxCategoryLabelWidthRatio"}, {"original_string": "private Font categoryTitleFont;", "modifier": "private", "type": "Font", "declarator": "categoryTitleFont", "var_name": "categoryTitleFont"}, {"original_string": "private Font categoryTickFont;", "modifier": "private", "type": "Font", "declarator": "categoryTickFont", "var_name": "categoryTickFont"}, {"original_string": "private String categoricalLabelFormat;", "modifier": "private", "type": "String", "declarator": "categoricalLabelFormat", "var_name": "categoricalLabelFormat"}, {"original_string": "private String categoricalLabelDecimalFormat;", "modifier": "private", "type": "String", "declarator": "categoricalLabelDecimalFormat", "var_name": "categoricalLabelDecimalFormat"}, {"original_string": "private String categoricalLabelDateFormat;", "modifier": "private", "type": "String", "declarator": "categoricalLabelDateFormat", "var_name": "categoricalLabelDateFormat"}, {"original_string": "private Double categoricalItemLabelRotation;", "modifier": "private", "type": "Double", "declarator": "categoricalItemLabelRotation", "var_name": "categoricalItemLabelRotation"}, {"original_string": "private boolean humanReadableLogarithmicFormat;", "modifier": "private", "type": "boolean", "declarator": "humanReadableLogarithmicFormat", "var_name": "humanReadableLogarithmicFormat"}, {"original_string": "private boolean logarithmicAxis;", "modifier": "private", "type": "boolean", "declarator": "logarithmicAxis", "var_name": "logarithmicAxis"}, {"original_string": "private String categoricalAxisMessageFormat;", "modifier": "private", "type": "String", "declarator": "categoricalAxisMessageFormat", "var_name": "categoricalAxisMessageFormat"}, {"original_string": "private Font rangeTitleFont;", "modifier": "private", "type": "Font", "declarator": "rangeTitleFont", "var_name": "rangeTitleFont"}, {"original_string": "private Font rangeTickFont;", "modifier": "private", "type": "Font", "declarator": "rangeTickFont", "var_name": "rangeTickFont"}, {"original_string": "private double rangeMinimum;", "modifier": "private", "type": "double", "declarator": "rangeMinimum", "var_name": "rangeMinimum"}, {"original_string": "private double rangeMaximum;", "modifier": "private", "type": "double", "declarator": "rangeMaximum", "var_name": "rangeMaximum"}, {"original_string": "private boolean rangeIncludesZero;", "modifier": "private", "type": "boolean", "declarator": "rangeIncludesZero", "var_name": "rangeIncludesZero"}, {"original_string": "private boolean rangeStickyZero;", "modifier": "private", "type": "boolean", "declarator": "rangeStickyZero", "var_name": "rangeStickyZero"}, {"original_string": "private NumberFormat rangeTickFormat;", "modifier": "private", "type": "NumberFormat", "declarator": "rangeTickFormat", "var_name": "rangeTickFormat"}, {"original_string": "private String rangeTickFormatString;", "modifier": "private", "type": "String", "declarator": "rangeTickFormatString", "var_name": "rangeTickFormatString"}, {"original_string": "private Class rangeTimePeriod;", "modifier": "private", "type": "Class", "declarator": "rangeTimePeriod", "var_name": "rangeTimePeriod"}, {"original_string": "private double rangePeriodCount;", "modifier": "private", "type": "double", "declarator": "rangePeriodCount", "var_name": "rangePeriodCount"}, {"original_string": "private boolean autoRange;", "modifier": "private", "type": "boolean", "declarator": "autoRange", "var_name": "autoRange"}, {"original_string": "private double scaleFactor;", "modifier": "private", "type": "double", "declarator": "scaleFactor", "var_name": "scaleFactor"}, {"original_string": "private Double lowerMargin;", "modifier": "private", "type": "Double", "declarator": "lowerMargin", "var_name": "lowerMargin"}, {"original_string": "private Double upperMargin;", "modifier": "private", "type": "Double", "declarator": "upperMargin", "var_name": "upperMargin"}, {"original_string": "private Double categoryMargin;", "modifier": "private", "type": "Double", "declarator": "categoryMargin", "var_name": "categoryMargin"}], "methods": [{"identifier": "CategoricalChartExpression", "parameters": "()", "modifiers": "protected", "return": "", "signature": " CategoricalChartExpression()", "full_signature": "protected  CategoricalChartExpression()", "class_method_signature": "CategoricalChartExpression.CategoricalChartExpression()", "testcase": false, "constructor": true}, {"identifier": "getCategoryTitleFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getCategoryTitleFont()", "full_signature": "public Font getCategoryTitleFont()", "class_method_signature": "CategoricalChartExpression.getCategoryTitleFont()", "testcase": false, "constructor": false}, {"identifier": "setCategoryTitleFont", "parameters": "( final Font categoryTitleFont )", "modifiers": "public", "return": "void", "signature": "void setCategoryTitleFont( final Font categoryTitleFont )", "full_signature": "public void setCategoryTitleFont( final Font categoryTitleFont )", "class_method_signature": "CategoricalChartExpression.setCategoryTitleFont( final Font categoryTitleFont )", "testcase": false, "constructor": false}, {"identifier": "getCategoryTickFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getCategoryTickFont()", "full_signature": "public Font getCategoryTickFont()", "class_method_signature": "CategoricalChartExpression.getCategoryTickFont()", "testcase": false, "constructor": false}, {"identifier": "setCategoryTickFont", "parameters": "( final Font categoryTickFont )", "modifiers": "public", "return": "void", "signature": "void setCategoryTickFont( final Font categoryTickFont )", "full_signature": "public void setCategoryTickFont( final Font categoryTickFont )", "class_method_signature": "CategoricalChartExpression.setCategoryTickFont( final Font categoryTickFont )", "testcase": false, "constructor": false}, {"identifier": "getRangeTickFormatString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRangeTickFormatString()", "full_signature": "public String getRangeTickFormatString()", "class_method_signature": "CategoricalChartExpression.getRangeTickFormatString()", "testcase": false, "constructor": false}, {"identifier": "setRangeTickFormatString", "parameters": "( final String rangeTickFormatString )", "modifiers": "public", "return": "void", "signature": "void setRangeTickFormatString( final String rangeTickFormatString )", "full_signature": "public void setRangeTickFormatString( final String rangeTickFormatString )", "class_method_signature": "CategoricalChartExpression.setRangeTickFormatString( final String rangeTickFormatString )", "testcase": false, "constructor": false}, {"identifier": "getCategoricalAxisMessageFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCategoricalAxisMessageFormat()", "full_signature": "public String getCategoricalAxisMessageFormat()", "class_method_signature": "CategoricalChartExpression.getCategoricalAxisMessageFormat()", "testcase": false, "constructor": false}, {"identifier": "setCategoricalAxisMessageFormat", "parameters": "( final String categoricalAxisMessageFormat )", "modifiers": "public", "return": "void", "signature": "void setCategoricalAxisMessageFormat( final String categoricalAxisMessageFormat )", "full_signature": "public void setCategoricalAxisMessageFormat( final String categoricalAxisMessageFormat )", "class_method_signature": "CategoricalChartExpression.setCategoricalAxisMessageFormat( final String categoricalAxisMessageFormat )", "testcase": false, "constructor": false}, {"identifier": "getRangeTickFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getRangeTickFont()", "full_signature": "public Font getRangeTickFont()", "class_method_signature": "CategoricalChartExpression.getRangeTickFont()", "testcase": false, "constructor": false}, {"identifier": "setRangeTickFont", "parameters": "( final Font rangeTickFont )", "modifiers": "public", "return": "void", "signature": "void setRangeTickFont( final Font rangeTickFont )", "full_signature": "public void setRangeTickFont( final Font rangeTickFont )", "class_method_signature": "CategoricalChartExpression.setRangeTickFont( final Font rangeTickFont )", "testcase": false, "constructor": false}, {"identifier": "getRangeMinimum", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRangeMinimum()", "full_signature": "public double getRangeMinimum()", "class_method_signature": "CategoricalChartExpression.getRangeMinimum()", "testcase": false, "constructor": false}, {"identifier": "setRangeMinimum", "parameters": "( final double rangeMinimum )", "modifiers": "public", "return": "void", "signature": "void setRangeMinimum( final double rangeMinimum )", "full_signature": "public void setRangeMinimum( final double rangeMinimum )", "class_method_signature": "CategoricalChartExpression.setRangeMinimum( final double rangeMinimum )", "testcase": false, "constructor": false}, {"identifier": "getRangeMaximum", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRangeMaximum()", "full_signature": "public double getRangeMaximum()", "class_method_signature": "CategoricalChartExpression.getRangeMaximum()", "testcase": false, "constructor": false}, {"identifier": "setRangeMaximum", "parameters": "( final double rangeMaximum )", "modifiers": "public", "return": "void", "signature": "void setRangeMaximum( final double rangeMaximum )", "full_signature": "public void setRangeMaximum( final double rangeMaximum )", "class_method_signature": "CategoricalChartExpression.setRangeMaximum( final double rangeMaximum )", "testcase": false, "constructor": false}, {"identifier": "getRangeTitleFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getRangeTitleFont()", "full_signature": "public Font getRangeTitleFont()", "class_method_signature": "CategoricalChartExpression.getRangeTitleFont()", "testcase": false, "constructor": false}, {"identifier": "setRangeTitleFont", "parameters": "( final Font rangeTitleFont )", "modifiers": "public", "return": "void", "signature": "void setRangeTitleFont( final Font rangeTitleFont )", "full_signature": "public void setRangeTitleFont( final Font rangeTitleFont )", "class_method_signature": "CategoricalChartExpression.setRangeTitleFont( final Font rangeTitleFont )", "testcase": false, "constructor": false}, {"identifier": "getRangeTickFormat", "parameters": "()", "modifiers": "public", "return": "NumberFormat", "signature": "NumberFormat getRangeTickFormat()", "full_signature": "public NumberFormat getRangeTickFormat()", "class_method_signature": "CategoricalChartExpression.getRangeTickFormat()", "testcase": false, "constructor": false}, {"identifier": "setRangeTickFormat", "parameters": "( final NumberFormat rangeTickFormat )", "modifiers": "public", "return": "void", "signature": "void setRangeTickFormat( final NumberFormat rangeTickFormat )", "full_signature": "public void setRangeTickFormat( final NumberFormat rangeTickFormat )", "class_method_signature": "CategoricalChartExpression.setRangeTickFormat( final NumberFormat rangeTickFormat )", "testcase": false, "constructor": false}, {"identifier": "isRangeIncludesZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRangeIncludesZero()", "full_signature": "public boolean isRangeIncludesZero()", "class_method_signature": "CategoricalChartExpression.isRangeIncludesZero()", "testcase": false, "constructor": false}, {"identifier": "setRangeIncludesZero", "parameters": "( final boolean rangeIncludesZero )", "modifiers": "public", "return": "void", "signature": "void setRangeIncludesZero( final boolean rangeIncludesZero )", "full_signature": "public void setRangeIncludesZero( final boolean rangeIncludesZero )", "class_method_signature": "CategoricalChartExpression.setRangeIncludesZero( final boolean rangeIncludesZero )", "testcase": false, "constructor": false}, {"identifier": "isRangeStickyZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRangeStickyZero()", "full_signature": "public boolean isRangeStickyZero()", "class_method_signature": "CategoricalChartExpression.isRangeStickyZero()", "testcase": false, "constructor": false}, {"identifier": "setRangeStickyZero", "parameters": "( final boolean rangeStickyZero )", "modifiers": "public", "return": "void", "signature": "void setRangeStickyZero( final boolean rangeStickyZero )", "full_signature": "public void setRangeStickyZero( final boolean rangeStickyZero )", "class_method_signature": "CategoricalChartExpression.setRangeStickyZero( final boolean rangeStickyZero )", "testcase": false, "constructor": false}, {"identifier": "isLogarithmicAxis", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogarithmicAxis()", "full_signature": "public boolean isLogarithmicAxis()", "class_method_signature": "CategoricalChartExpression.isLogarithmicAxis()", "testcase": false, "constructor": false}, {"identifier": "setLogarithmicAxis", "parameters": "( final boolean logarithmicAxis )", "modifiers": "public", "return": "void", "signature": "void setLogarithmicAxis( final boolean logarithmicAxis )", "full_signature": "public void setLogarithmicAxis( final boolean logarithmicAxis )", "class_method_signature": "CategoricalChartExpression.setLogarithmicAxis( final boolean logarithmicAxis )", "testcase": false, "constructor": false}, {"identifier": "isHumanReadableLogarithmicFormat", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHumanReadableLogarithmicFormat()", "full_signature": "public boolean isHumanReadableLogarithmicFormat()", "class_method_signature": "CategoricalChartExpression.isHumanReadableLogarithmicFormat()", "testcase": false, "constructor": false}, {"identifier": "setHumanReadableLogarithmicFormat", "parameters": "( final boolean humanReadableLogarithmicFormat )", "modifiers": "public", "return": "void", "signature": "void setHumanReadableLogarithmicFormat( final boolean humanReadableLogarithmicFormat )", "full_signature": "public void setHumanReadableLogarithmicFormat( final boolean humanReadableLogarithmicFormat )", "class_method_signature": "CategoricalChartExpression.setHumanReadableLogarithmicFormat( final boolean humanReadableLogarithmicFormat )", "testcase": false, "constructor": false}, {"identifier": "getLowerMargin", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getLowerMargin()", "full_signature": "public Double getLowerMargin()", "class_method_signature": "CategoricalChartExpression.getLowerMargin()", "testcase": false, "constructor": false}, {"identifier": "setLowerMargin", "parameters": "( final Double lowerMargin )", "modifiers": "public", "return": "void", "signature": "void setLowerMargin( final Double lowerMargin )", "full_signature": "public void setLowerMargin( final Double lowerMargin )", "class_method_signature": "CategoricalChartExpression.setLowerMargin( final Double lowerMargin )", "testcase": false, "constructor": false}, {"identifier": "getUpperMargin", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getUpperMargin()", "full_signature": "public Double getUpperMargin()", "class_method_signature": "CategoricalChartExpression.getUpperMargin()", "testcase": false, "constructor": false}, {"identifier": "setUpperMargin", "parameters": "( final Double upperMargin )", "modifiers": "public", "return": "void", "signature": "void setUpperMargin( final Double upperMargin )", "full_signature": "public void setUpperMargin( final Double upperMargin )", "class_method_signature": "CategoricalChartExpression.setUpperMargin( final Double upperMargin )", "testcase": false, "constructor": false}, {"identifier": "getCategoryMargin", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getCategoryMargin()", "full_signature": "public Double getCategoryMargin()", "class_method_signature": "CategoricalChartExpression.getCategoryMargin()", "testcase": false, "constructor": false}, {"identifier": "setCategoryMargin", "parameters": "( final Double categoryMargin )", "modifiers": "public", "return": "void", "signature": "void setCategoryMargin( final Double categoryMargin )", "full_signature": "public void setCategoryMargin( final Double categoryMargin )", "class_method_signature": "CategoricalChartExpression.setCategoryMargin( final Double categoryMargin )", "testcase": false, "constructor": false}, {"identifier": "getLabelRotationDeg", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getLabelRotationDeg()", "full_signature": "public Double getLabelRotationDeg()", "class_method_signature": "CategoricalChartExpression.getLabelRotationDeg()", "testcase": false, "constructor": false}, {"identifier": "setLabelRotationDeg", "parameters": "( final Double value )", "modifiers": "public", "return": "void", "signature": "void setLabelRotationDeg( final Double value )", "full_signature": "public void setLabelRotationDeg( final Double value )", "class_method_signature": "CategoricalChartExpression.setLabelRotationDeg( final Double value )", "testcase": false, "constructor": false}, {"identifier": "getLabelRotation", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getLabelRotation()", "full_signature": "public Double getLabelRotation()", "class_method_signature": "CategoricalChartExpression.getLabelRotation()", "testcase": false, "constructor": false}, {"identifier": "setLabelRotation", "parameters": "( final Double value )", "modifiers": "public", "return": "void", "signature": "void setLabelRotation( final Double value )", "full_signature": "public void setLabelRotation( final Double value )", "class_method_signature": "CategoricalChartExpression.setLabelRotation( final Double value )", "testcase": false, "constructor": false}, {"identifier": "getCategoricalItemLabelRotationDeg", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getCategoricalItemLabelRotationDeg()", "full_signature": "public Double getCategoricalItemLabelRotationDeg()", "class_method_signature": "CategoricalChartExpression.getCategoricalItemLabelRotationDeg()", "testcase": false, "constructor": false}, {"identifier": "setCategoricalItemLabelRotationDeg", "parameters": "( final Double value )", "modifiers": "public", "return": "void", "signature": "void setCategoricalItemLabelRotationDeg( final Double value )", "full_signature": "public void setCategoricalItemLabelRotationDeg( final Double value )", "class_method_signature": "CategoricalChartExpression.setCategoricalItemLabelRotationDeg( final Double value )", "testcase": false, "constructor": false}, {"identifier": "getCategoricalItemLabelRotation", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getCategoricalItemLabelRotation()", "full_signature": "public Double getCategoricalItemLabelRotation()", "class_method_signature": "CategoricalChartExpression.getCategoricalItemLabelRotation()", "testcase": false, "constructor": false}, {"identifier": "setCategoricalItemLabelRotation", "parameters": "( final Double value )", "modifiers": "public", "return": "void", "signature": "void setCategoricalItemLabelRotation( final Double value )", "full_signature": "public void setCategoricalItemLabelRotation( final Double value )", "class_method_signature": "CategoricalChartExpression.setCategoricalItemLabelRotation( final Double value )", "testcase": false, "constructor": false}, {"identifier": "setMaxCategoryLabelWidthRatio", "parameters": "( final Float value )", "modifiers": "public", "return": "void", "signature": "void setMaxCategoryLabelWidthRatio( final Float value )", "full_signature": "public void setMaxCategoryLabelWidthRatio( final Float value )", "class_method_signature": "CategoricalChartExpression.setMaxCategoryLabelWidthRatio( final Float value )", "testcase": false, "constructor": false}, {"identifier": "getMaxCategoryLabelWidthRatio", "parameters": "()", "modifiers": "public", "return": "Float", "signature": "Float getMaxCategoryLabelWidthRatio()", "full_signature": "public Float getMaxCategoryLabelWidthRatio()", "class_method_signature": "CategoricalChartExpression.getMaxCategoryLabelWidthRatio()", "testcase": false, "constructor": false}, {"identifier": "isShowGridlines", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShowGridlines()", "full_signature": "public boolean isShowGridlines()", "class_method_signature": "CategoricalChartExpression.isShowGridlines()", "testcase": false, "constructor": false}, {"identifier": "setShowGridlines", "parameters": "( final boolean value )", "modifiers": "public", "return": "void", "signature": "void setShowGridlines( final boolean value )", "full_signature": "public void setShowGridlines( final boolean value )", "class_method_signature": "CategoricalChartExpression.setShowGridlines( final boolean value )", "testcase": false, "constructor": false}, {"identifier": "isHorizontal", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHorizontal()", "full_signature": "public boolean isHorizontal()", "class_method_signature": "CategoricalChartExpression.isHorizontal()", "testcase": false, "constructor": false}, {"identifier": "setHorizontal", "parameters": "( final boolean value )", "modifiers": "public", "return": "void", "signature": "void setHorizontal( final boolean value )", "full_signature": "public void setHorizontal( final boolean value )", "class_method_signature": "CategoricalChartExpression.setHorizontal( final boolean value )", "testcase": false, "constructor": false}, {"identifier": "getValueAxisLabel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValueAxisLabel()", "full_signature": "public String getValueAxisLabel()", "class_method_signature": "CategoricalChartExpression.getValueAxisLabel()", "testcase": false, "constructor": false}, {"identifier": "setValueAxisLabel", "parameters": "( final String valueAxisLabel )", "modifiers": "public", "return": "void", "signature": "void setValueAxisLabel( final String valueAxisLabel )", "full_signature": "public void setValueAxisLabel( final String valueAxisLabel )", "class_method_signature": "CategoricalChartExpression.setValueAxisLabel( final String valueAxisLabel )", "testcase": false, "constructor": false}, {"identifier": "getCategoryAxisLabel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCategoryAxisLabel()", "full_signature": "public String getCategoryAxisLabel()", "class_method_signature": "CategoricalChartExpression.getCategoryAxisLabel()", "testcase": false, "constructor": false}, {"identifier": "setCategoryAxisLabel", "parameters": "( final String categoryAxisLabel )", "modifiers": "public", "return": "void", "signature": "void setCategoryAxisLabel( final String categoryAxisLabel )", "full_signature": "public void setCategoryAxisLabel( final String categoryAxisLabel )", "class_method_signature": "CategoricalChartExpression.setCategoryAxisLabel( final String categoryAxisLabel )", "testcase": false, "constructor": false}, {"identifier": "setCategoricalLabelFormat", "parameters": "( final String value )", "modifiers": "public", "return": "void", "signature": "void setCategoricalLabelFormat( final String value )", "full_signature": "public void setCategoricalLabelFormat( final String value )", "class_method_signature": "CategoricalChartExpression.setCategoricalLabelFormat( final String value )", "testcase": false, "constructor": false}, {"identifier": "getCategoricalLabelFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCategoricalLabelFormat()", "full_signature": "public String getCategoricalLabelFormat()", "class_method_signature": "CategoricalChartExpression.getCategoricalLabelFormat()", "testcase": false, "constructor": false}, {"identifier": "setCategoricalLabelDecimalFormat", "parameters": "( final String value )", "modifiers": "public", "return": "void", "signature": "void setCategoricalLabelDecimalFormat( final String value )", "full_signature": "public void setCategoricalLabelDecimalFormat( final String value )", "class_method_signature": "CategoricalChartExpression.setCategoricalLabelDecimalFormat( final String value )", "testcase": false, "constructor": false}, {"identifier": "getCategoricalLabelDecimalFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCategoricalLabelDecimalFormat()", "full_signature": "public String getCategoricalLabelDecimalFormat()", "class_method_signature": "CategoricalChartExpression.getCategoricalLabelDecimalFormat()", "testcase": false, "constructor": false}, {"identifier": "setCategoricalLabelDateFormat", "parameters": "( final String value )", "modifiers": "public", "return": "void", "signature": "void setCategoricalLabelDateFormat( final String value )", "full_signature": "public void setCategoricalLabelDateFormat( final String value )", "class_method_signature": "CategoricalChartExpression.setCategoricalLabelDateFormat( final String value )", "testcase": false, "constructor": false}, {"identifier": "getCategoricalLabelDateFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCategoricalLabelDateFormat()", "full_signature": "public String getCategoricalLabelDateFormat()", "class_method_signature": "CategoricalChartExpression.getCategoricalLabelDateFormat()", "testcase": false, "constructor": false}, {"identifier": "isAutoRange", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAutoRange()", "full_signature": "public boolean isAutoRange()", "class_method_signature": "CategoricalChartExpression.isAutoRange()", "testcase": false, "constructor": false}, {"identifier": "setAutoRange", "parameters": "( final boolean autoRange )", "modifiers": "public", "return": "void", "signature": "void setAutoRange( final boolean autoRange )", "full_signature": "public void setAutoRange( final boolean autoRange )", "class_method_signature": "CategoricalChartExpression.setAutoRange( final boolean autoRange )", "testcase": false, "constructor": false}, {"identifier": "getScaleFactor", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getScaleFactor()", "full_signature": "public double getScaleFactor()", "class_method_signature": "CategoricalChartExpression.getScaleFactor()", "testcase": false, "constructor": false}, {"identifier": "setScaleFactor", "parameters": "( final double scaleFactor )", "modifiers": "public", "return": "void", "signature": "void setScaleFactor( final double scaleFactor )", "full_signature": "public void setScaleFactor( final double scaleFactor )", "class_method_signature": "CategoricalChartExpression.setScaleFactor( final double scaleFactor )", "testcase": false, "constructor": false}, {"identifier": "computeChart", "parameters": "( final Dataset dataset )", "modifiers": "protected", "return": "JFreeChart", "signature": "JFreeChart computeChart( final Dataset dataset )", "full_signature": "protected JFreeChart computeChart( final Dataset dataset )", "class_method_signature": "CategoricalChartExpression.computeChart( final Dataset dataset )", "testcase": false, "constructor": false}, {"identifier": "computeCategoryChart", "parameters": "( final CategoryDataset dataset )", "modifiers": "protected", "return": "JFreeChart", "signature": "JFreeChart computeCategoryChart( final CategoryDataset dataset )", "full_signature": "protected JFreeChart computeCategoryChart( final CategoryDataset dataset )", "class_method_signature": "CategoricalChartExpression.computeCategoryChart( final CategoryDataset dataset )", "testcase": false, "constructor": false}, {"identifier": "getChart", "parameters": "( final CategoryDataset categoryDataset )", "modifiers": "public", "return": "JFreeChart", "signature": "JFreeChart getChart( final CategoryDataset categoryDataset )", "full_signature": "public JFreeChart getChart( final CategoryDataset categoryDataset )", "class_method_signature": "CategoricalChartExpression.getChart( final CategoryDataset categoryDataset )", "testcase": false, "constructor": false}, {"identifier": "computePlotOrientation", "parameters": "()", "modifiers": "protected", "return": "PlotOrientation", "signature": "PlotOrientation computePlotOrientation()", "full_signature": "protected PlotOrientation computePlotOrientation()", "class_method_signature": "CategoricalChartExpression.computePlotOrientation()", "testcase": false, "constructor": false}, {"identifier": "configureChart", "parameters": "( final JFreeChart chart )", "modifiers": "protected", "return": "void", "signature": "void configureChart( final JFreeChart chart )", "full_signature": "protected void configureChart( final JFreeChart chart )", "class_method_signature": "CategoricalChartExpression.configureChart( final JFreeChart chart )", "testcase": false, "constructor": false}, {"identifier": "configureRangeAxis", "parameters": "( final CategoryPlot cpl, final Font labelFont )", "modifiers": "protected", "return": "void", "signature": "void configureRangeAxis( final CategoryPlot cpl, final Font labelFont )", "full_signature": "protected void configureRangeAxis( final CategoryPlot cpl, final Font labelFont )", "class_method_signature": "CategoricalChartExpression.configureRangeAxis( final CategoryPlot cpl, final Font labelFont )", "testcase": false, "constructor": false}, {"identifier": "configureLogarithmicAxis", "parameters": "( final CategoryPlot plot )", "modifiers": "protected", "return": "void", "signature": "void configureLogarithmicAxis( final CategoryPlot plot )", "full_signature": "protected void configureLogarithmicAxis( final CategoryPlot plot )", "class_method_signature": "CategoricalChartExpression.configureLogarithmicAxis( final CategoryPlot plot )", "testcase": false, "constructor": false}, {"identifier": "getRangeTimePeriod", "parameters": "()", "modifiers": "public", "return": "Class", "signature": "Class getRangeTimePeriod()", "full_signature": "public Class getRangeTimePeriod()", "class_method_signature": "CategoricalChartExpression.getRangeTimePeriod()", "testcase": false, "constructor": false}, {"identifier": "setRangeTimePeriod", "parameters": "( final Class rangeTimePeriod )", "modifiers": "public", "return": "void", "signature": "void setRangeTimePeriod( final Class rangeTimePeriod )", "full_signature": "public void setRangeTimePeriod( final Class rangeTimePeriod )", "class_method_signature": "CategoricalChartExpression.setRangeTimePeriod( final Class rangeTimePeriod )", "testcase": false, "constructor": false}, {"identifier": "getRangePeriodCount", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRangePeriodCount()", "full_signature": "public double getRangePeriodCount()", "class_method_signature": "CategoricalChartExpression.getRangePeriodCount()", "testcase": false, "constructor": false}, {"identifier": "setRangePeriodCount", "parameters": "( final double rangePeriodCount )", "modifiers": "public", "return": "void", "signature": "void setRangePeriodCount( final double rangePeriodCount )", "full_signature": "public void setRangePeriodCount( final double rangePeriodCount )", "class_method_signature": "CategoricalChartExpression.setRangePeriodCount( final double rangePeriodCount )", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression getInstance()", "full_signature": "public Expression getInstance()", "class_method_signature": "CategoricalChartExpression.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getDateUnitAsInt", "parameters": "( final Class domainTimePeriod )", "modifiers": "protected", "return": "int", "signature": "int getDateUnitAsInt( final Class domainTimePeriod )", "full_signature": "protected int getDateUnitAsInt( final Class domainTimePeriod )", "class_method_signature": "CategoricalChartExpression.getDateUnitAsInt( final Class domainTimePeriod )", "testcase": false, "constructor": false}, {"identifier": "reconfigureForCompatibility", "parameters": "( final int versionTag )", "modifiers": "public", "return": "void", "signature": "void reconfigureForCompatibility( final int versionTag )", "full_signature": "public void reconfigureForCompatibility( final int versionTag )", "class_method_signature": "CategoricalChartExpression.reconfigureForCompatibility( final int versionTag )", "testcase": false, "constructor": false}, {"identifier": "createUpRotationCategoryLabelPosition", "parameters": "( PlaneDirection axisPosition, double labelAngle )", "modifiers": "protected", "return": "CategoryLabelPosition", "signature": "CategoryLabelPosition createUpRotationCategoryLabelPosition( PlaneDirection axisPosition, double labelAngle )", "full_signature": "protected CategoryLabelPosition createUpRotationCategoryLabelPosition( PlaneDirection axisPosition, double labelAngle )", "class_method_signature": "CategoricalChartExpression.createUpRotationCategoryLabelPosition( PlaneDirection axisPosition, double labelAngle )", "testcase": false, "constructor": false}, {"identifier": "getTextAnchorDirectionOfAngle", "parameters": "( double angle )", "modifiers": "protected", "return": "PlaneDirection", "signature": "PlaneDirection getTextAnchorDirectionOfAngle( double angle )", "full_signature": "protected PlaneDirection getTextAnchorDirectionOfAngle( double angle )", "class_method_signature": "CategoricalChartExpression.getTextAnchorDirectionOfAngle( double angle )", "testcase": false, "constructor": false}], "file": "engine/legacy-charts/src/main/java/org/pentaho/plugin/jfreereport/reportcharts/CategoricalChartExpression.java"}, "focal_method": {"identifier": "configureRangeAxis", "parameters": "( final CategoryPlot cpl, final Font labelFont )", "modifiers": "protected", "return": "void", "body": "protected void configureRangeAxis( final CategoryPlot cpl, final Font labelFont ) {\n    final ValueAxis rangeAxis = cpl.getRangeAxis();\n    if ( rangeAxis instanceof NumberAxis ) {\n      final NumberAxis numberAxis = (NumberAxis) rangeAxis;\n      numberAxis.setAutoRangeIncludesZero( isRangeIncludesZero() );\n      numberAxis.setAutoRangeStickyZero( isRangeStickyZero() );\n\n      if ( getRangePeriodCount() > 0 ) {\n        if ( getRangeTickFormat() != null ) {\n          numberAxis.setTickUnit( new NumberTickUnit( getRangePeriodCount(), getRangeTickFormat() ) );\n        } else if ( getRangeTickFormatString() != null ) {\n          final FastDecimalFormat formatter = new FastDecimalFormat(\n              getRangeTickFormatString(), getResourceBundleFactory().getLocale() );\n          numberAxis.setTickUnit( new FastNumberTickUnit( getRangePeriodCount(), formatter ) );\n        } else {\n          numberAxis.setTickUnit( new FastNumberTickUnit( getRangePeriodCount() ) );\n        }\n      } else {\n        if ( getRangeTickFormat() != null ) {\n          numberAxis.setNumberFormatOverride( getRangeTickFormat() );\n        } else if ( getRangeTickFormatString() != null ) {\n          final DecimalFormat formatter = new DecimalFormat(\n              getRangeTickFormatString(), new DecimalFormatSymbols( getResourceBundleFactory().getLocale() ) );\n          numberAxis.setNumberFormatOverride( formatter );\n          standardTickUnitsApplyFormat( numberAxis, formatter );\n        }\n      }\n    } else if ( rangeAxis instanceof DateAxis ) {\n      final DateAxis numberAxis = (DateAxis) rangeAxis;\n\n      if ( getRangePeriodCount() > 0 && getRangeTimePeriod() != null ) {\n        if ( getRangeTickFormatString() != null ) {\n          final SimpleDateFormat formatter = new SimpleDateFormat(\n              getRangeTickFormatString(), new DateFormatSymbols( getResourceBundleFactory().getLocale() ) );\n          numberAxis.setTickUnit(\n              new DateTickUnit( getDateUnitAsInt( getRangeTimePeriod() ), (int) getRangePeriodCount(), formatter ) );\n        } else {\n          numberAxis.setTickUnit(\n              new DateTickUnit( getDateUnitAsInt( getRangeTimePeriod() ), (int) getRangePeriodCount() ) );\n        }\n      } else if ( getRangeTickFormatString() != null ) {\n        final SimpleDateFormat formatter = new SimpleDateFormat(\n            getRangeTickFormatString(), new DateFormatSymbols( getResourceBundleFactory().getLocale() ) );\n        numberAxis.setDateFormatOverride( formatter );\n      }\n\n    }\n\n    if ( rangeAxis != null ) {\n      rangeAxis.setLabelFont( labelFont );\n      rangeAxis.setTickLabelFont( labelFont );\n\n      if ( getRangeTitleFont() != null ) {\n        rangeAxis.setLabelFont( getRangeTitleFont() );\n      }\n      if ( getRangeTickFont() != null ) {\n        rangeAxis.setTickLabelFont( getRangeTickFont() );\n      }\n      final int level = getRuntime().getProcessingContext().getCompatibilityLevel();\n      if ( ClassicEngineBoot.isEnforceCompatibilityFor( level, 3, 8 ) ) {\n        if ( getRangeMinimum() != 0 ) {\n          rangeAxis.setLowerBound( getRangeMinimum() );\n        }\n        if ( getRangeMaximum() != 1 ) {\n          rangeAxis.setUpperBound( getRangeMaximum() );\n        }\n        if ( getRangeMinimum() == 0 && getRangeMaximum() == 0 ) {\n          rangeAxis.setAutoRange( true );\n        }\n      } else {\n        if ( isAutoRange() ) {\n          rangeAxis.setAutoRange( isAutoRange() );\n        } else {\n          double factor = getScaleFactor();\n          if ( factor > DEFAULT_SCALE_FACTOR ) {\n            // PRD-5340 hack\n            // this method is invoked after all series were populated\n            // hence the axis already has the graph's max and min values;\n            double lower = rangeAxis.getLowerBound();\n            if ( lower < 0 ) {\n              lower *= factor;\n            } else if ( lower > 0 ) {\n              lower /= factor;\n            }\n\n            double upper = rangeAxis.getUpperBound();\n            if ( upper > 0 ) {\n              upper *= factor;\n            } else if ( upper < 0 ) {\n              upper /= factor;\n            }\n            rangeAxis.setRange( lower, upper );\n          } else {\n            // the 'scaleFactor' property is left intact or has an incorrect value\n            rangeAxis.setUpperBound( getRangeMaximum() );\n            rangeAxis.setLowerBound( getRangeMinimum() );\n          }\n        }\n      }\n    }\n  }", "signature": "void configureRangeAxis( final CategoryPlot cpl, final Font labelFont )", "full_signature": "protected void configureRangeAxis( final CategoryPlot cpl, final Font labelFont )", "class_method_signature": "CategoricalChartExpression.configureRangeAxis( final CategoryPlot cpl, final Font labelFont )", "testcase": false, "constructor": false, "invocations": ["getRangeAxis", "setAutoRangeIncludesZero", "isRangeIncludesZero", "setAutoRangeStickyZero", "isRangeStickyZero", "getRangePeriodCount", "getRangeTickFormat", "setTickUnit", "getRangePeriodCount", "getRangeTickFormat", "getRangeTickFormatString", "getRangeTickFormatString", "getLocale", "getResourceBundleFactory", "setTickUnit", "getRangePeriodCount", "setTickUnit", "getRangePeriodCount", "getRangeTickFormat", "setNumberFormatOverride", "getRangeTickFormat", "getRangeTickFormatString", "getRangeTickFormatString", "getLocale", "getResourceBundleFactory", "setNumberFormatOverride", "standardTickUnitsApplyFormat", "getRangePeriodCount", "getRangeTimePeriod", "getRangeTickFormatString", "getRangeTickFormatString", "getLocale", "getResourceBundleFactory", "setTickUnit", "getDateUnitAsInt", "getRangeTimePeriod", "getRangePeriodCount", "setTickUnit", "getDateUnitAsInt", "getRangeTimePeriod", "getRangePeriodCount", "getRangeTickFormatString", "getRangeTickFormatString", "getLocale", "getResourceBundleFactory", "setDateFormatOverride", "setLabelFont", "setTickLabelFont", "getRangeTitleFont", "setLabelFont", "getRangeTitleFont", "getRangeTickFont", "setTickLabelFont", "getRangeTickFont", "getCompatibilityLevel", "getProcessingContext", "getRuntime", "isEnforceCompatibilityFor", "getRangeMinimum", "setLowerBound", "getRangeMinimum", "getRangeMaximum", "setUpperBound", "getRangeMaximum", "getRangeMinimum", "getRangeMaximum", "setAutoRange", "isAutoRange", "setAutoRange", "isAutoRange", "getScaleFactor", "getLowerBound", "getUpperBound", "setRange", "setUpperBound", "getRangeMaximum", "setLowerBound", "getRangeMinimum"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}