{"test_class": {"identifier": "PageHeaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "engine/core/src/test/java/org/pentaho/reporting/engine/classic/core/PageHeaderTest.java"}, "test_case": {"identifier": "testSetSticky", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetSticky() {\n    PageHeader header = new PageHeader();\n    header.setSticky( true );\n    boolean result = header.getStyle().getBooleanStyleProperty( BandStyleKeys.STICKY );\n    assertThat( result, is( equalTo( true ) ) );\n  }", "signature": "void testSetSticky()", "full_signature": "@Test public void testSetSticky()", "class_method_signature": "PageHeaderTest.testSetSticky()", "testcase": true, "constructor": false, "invocations": ["setSticky", "getBooleanStyleProperty", "getStyle", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "PageHeader", "superclass": "extends Band", "interfaces": "implements RootLevelBand", "fields": [{"original_string": "private static final SubReport[] EMPTY_SUB_REPORTS = new SubReport[0];", "modifier": "private static final", "type": "SubReport[]", "declarator": "EMPTY_SUB_REPORTS = new SubReport[0]", "var_name": "EMPTY_SUB_REPORTS"}], "methods": [{"identifier": "PageHeader", "parameters": "()", "modifiers": "public", "return": "", "signature": " PageHeader()", "full_signature": "public  PageHeader()", "class_method_signature": "PageHeader.PageHeader()", "testcase": false, "constructor": true}, {"identifier": "PageHeader", "parameters": "( final boolean onFirstPage, final boolean onLastPage )", "modifiers": "public", "return": "", "signature": " PageHeader( final boolean onFirstPage, final boolean onLastPage )", "full_signature": "public  PageHeader( final boolean onFirstPage, final boolean onLastPage )", "class_method_signature": "PageHeader.PageHeader( final boolean onFirstPage, final boolean onLastPage )", "testcase": false, "constructor": true}, {"identifier": "isDisplayOnFirstPage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDisplayOnFirstPage()", "full_signature": "public boolean isDisplayOnFirstPage()", "class_method_signature": "PageHeader.isDisplayOnFirstPage()", "testcase": false, "constructor": false}, {"identifier": "setDisplayOnFirstPage", "parameters": "( final boolean b )", "modifiers": "public", "return": "void", "signature": "void setDisplayOnFirstPage( final boolean b )", "full_signature": "public void setDisplayOnFirstPage( final boolean b )", "class_method_signature": "PageHeader.setDisplayOnFirstPage( final boolean b )", "testcase": false, "constructor": false}, {"identifier": "isDisplayOnLastPage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDisplayOnLastPage()", "full_signature": "public boolean isDisplayOnLastPage()", "class_method_signature": "PageHeader.isDisplayOnLastPage()", "testcase": false, "constructor": false}, {"identifier": "setDisplayOnLastPage", "parameters": "( final boolean b )", "modifiers": "public", "return": "void", "signature": "void setDisplayOnLastPage( final boolean b )", "full_signature": "public void setDisplayOnLastPage( final boolean b )", "class_method_signature": "PageHeader.setDisplayOnLastPage( final boolean b )", "testcase": false, "constructor": false}, {"identifier": "getSubReportCount", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getSubReportCount()", "full_signature": "public final int getSubReportCount()", "class_method_signature": "PageHeader.getSubReportCount()", "testcase": false, "constructor": false}, {"identifier": "getSubReport", "parameters": "( final int index )", "modifiers": "public final", "return": "SubReport", "signature": "SubReport getSubReport( final int index )", "full_signature": "public final SubReport getSubReport( final int index )", "class_method_signature": "PageHeader.getSubReport( final int index )", "testcase": false, "constructor": false}, {"identifier": "isSticky", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSticky()", "full_signature": "public boolean isSticky()", "class_method_signature": "PageHeader.isSticky()", "testcase": false, "constructor": false}, {"identifier": "setSticky", "parameters": "( final boolean b )", "modifiers": "public", "return": "void", "signature": "void setSticky( final boolean b )", "full_signature": "public void setSticky( final boolean b )", "class_method_signature": "PageHeader.setSticky( final boolean b )", "testcase": false, "constructor": false}, {"identifier": "getSubReports", "parameters": "()", "modifiers": "public", "return": "SubReport[]", "signature": "SubReport[] getSubReports()", "full_signature": "public SubReport[] getSubReports()", "class_method_signature": "PageHeader.getSubReports()", "testcase": false, "constructor": false}, {"identifier": "getDefaultStyleSheet", "parameters": "()", "modifiers": "public", "return": "ElementStyleSheet", "signature": "ElementStyleSheet getDefaultStyleSheet()", "full_signature": "public ElementStyleSheet getDefaultStyleSheet()", "class_method_signature": "PageHeader.getDefaultStyleSheet()", "testcase": false, "constructor": false}], "file": "engine/core/src/main/java/org/pentaho/reporting/engine/classic/core/PageHeader.java"}, "focal_method": {"identifier": "setSticky", "parameters": "( final boolean b )", "modifiers": "public", "return": "void", "body": "public void setSticky( final boolean b ) {\n    getStyle().setBooleanStyleProperty( BandStyleKeys.STICKY, b );\n    notifyNodePropertiesChanged();\n  }", "signature": "void setSticky( final boolean b )", "full_signature": "public void setSticky( final boolean b )", "class_method_signature": "PageHeader.setSticky( final boolean b )", "testcase": false, "constructor": false, "invocations": ["setBooleanStyleProperty", "getStyle", "notifyNodePropertiesChanged"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}