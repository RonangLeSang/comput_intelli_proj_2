{"test_class": {"identifier": "PieSparklineElementFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PieSparklineElementFactory elemFactory;", "modifier": "private", "type": "PieSparklineElementFactory", "declarator": "elemFactory", "var_name": "elemFactory"}], "file": "engine/extensions/src/test/java/org/pentaho/reporting/engine/classic/extensions/modules/sparklines/elementfactory/PieSparklineElementFactoryTest.java"}, "test_case": {"identifier": "testCreateElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateElement() {\n    Element elem = elemFactory.createElement();\n    assertThat( elem, is( notNullValue() ) );\n    assertThat( elem.getName(), is( equalTo( StringUtils.EMPTY ) ) );\n    assertThat( elem.getElementType(), is( instanceOf( PieSparklineType.class ) ) );\n    assertThat( elem.getAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE ), is( nullValue() ) );\n    assertThat( elem.getAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.FIELD ), is( nullValue() ) );\n    assertThat( elem.getAttributeExpression( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE ),\n        is( nullValue() ) );\n    assertThat( elem.getAttribute( NAMESPACE, SparklineAttributeNames.START_ANGLE ), is( nullValue() ) );\n    assertThat( elem.getAttribute( NAMESPACE, SparklineAttributeNames.LOW_SLICE ), is( nullValue() ) );\n    assertThat( elem.getAttribute( NAMESPACE, SparklineAttributeNames.MEDIUM_SLICE ), is( nullValue() ) );\n    assertThat( elem.getAttribute( NAMESPACE, SparklineAttributeNames.HIGH_SLICE ), is( nullValue() ) );\n    assertThat( elem.getAttribute( NAMESPACE, SparklineAttributeNames.COUNTER_CLOCKWISE ), is( nullValue() ) );\n\n    elemFactory.setName( \"elem_name\" );\n    elemFactory.setContent( \"elem_content\" );\n    elemFactory.setFieldname( \"field_name\" );\n    elemFactory.setFormula( \"test_formula\" );\n    elemFactory.setStartAngle( 100 );\n    elemFactory.setLowSlice( 5.5 );\n    elemFactory.setMediumSlice( 10.5 );\n    elemFactory.setHighSlice( 20.5 );\n    elemFactory.setCounterClockwise( true );\n\n    elem = elemFactory.createElement();\n    assertThat( elem, is( notNullValue() ) );\n    assertThat( elem.getName(), is( equalTo( elemFactory.getName() ) ) );\n    assertThat( elem.getElementType(), is( instanceOf( PieSparklineType.class ) ) );\n    assertThat( elem.getAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE ), is( equalTo( elemFactory\n        .getContent() ) ) );\n    assertThat( (String) elem.getAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.FIELD ),\n        is( equalTo( elemFactory.getFieldname() ) ) );\n    assertThat( (Integer) elem.getAttribute( NAMESPACE, SparklineAttributeNames.START_ANGLE ), is( equalTo( elemFactory\n        .getStartAngle() ) ) );\n    assertThat( (Double) elem.getAttribute( NAMESPACE, SparklineAttributeNames.LOW_SLICE ), is( equalTo( elemFactory\n        .getLowSlice() ) ) );\n    assertThat( (Double) elem.getAttribute( NAMESPACE, SparklineAttributeNames.MEDIUM_SLICE ), is( equalTo( elemFactory\n        .getMediumSlice() ) ) );\n    assertThat( (Double) elem.getAttribute( NAMESPACE, SparklineAttributeNames.HIGH_SLICE ), is( equalTo( elemFactory\n        .getHighSlice() ) ) );\n    assertThat( (Boolean) elem.getAttribute( NAMESPACE, SparklineAttributeNames.COUNTER_CLOCKWISE ),\n        is( equalTo( elemFactory.getCounterClockwise() ) ) );\n    Object expressionObj = elem.getAttributeExpression( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE );\n    assertThat( expressionObj, is( notNullValue() ) );\n    assertThat( expressionObj, is( instanceOf( FormulaExpression.class ) ) );\n    assertThat( ( (FormulaExpression) expressionObj ).getFormula(), is( equalTo( elemFactory.getFormula() ) ) );\n  }", "signature": "void testCreateElement()", "full_signature": "@Test public void testCreateElement()", "class_method_signature": "PieSparklineElementFactoryTest.testCreateElement()", "testcase": true, "constructor": false, "invocations": ["createElement", "assertThat", "is", "notNullValue", "assertThat", "getName", "is", "equalTo", "assertThat", "getElementType", "is", "instanceOf", "assertThat", "getAttribute", "is", "nullValue", "assertThat", "getAttribute", "is", "nullValue", "assertThat", "getAttributeExpression", "is", "nullValue", "assertThat", "getAttribute", "is", "nullValue", "assertThat", "getAttribute", "is", "nullValue", "assertThat", "getAttribute", "is", "nullValue", "assertThat", "getAttribute", "is", "nullValue", "assertThat", "getAttribute", "is", "nullValue", "setName", "setContent", "setFieldname", "setFormula", "setStartAngle", "setLowSlice", "setMediumSlice", "setHighSlice", "setCounterClockwise", "createElement", "assertThat", "is", "notNullValue", "assertThat", "getName", "is", "equalTo", "getName", "assertThat", "getElementType", "is", "instanceOf", "assertThat", "getAttribute", "is", "equalTo", "getContent", "assertThat", "getAttribute", "is", "equalTo", "getFieldname", "assertThat", "getAttribute", "is", "equalTo", "getStartAngle", "assertThat", "getAttribute", "is", "equalTo", "getLowSlice", "assertThat", "getAttribute", "is", "equalTo", "getMediumSlice", "assertThat", "getAttribute", "is", "equalTo", "getHighSlice", "assertThat", "getAttribute", "is", "equalTo", "getCounterClockwise", "getAttributeExpression", "assertThat", "is", "notNullValue", "assertThat", "is", "instanceOf", "assertThat", "getFormula", "is", "equalTo", "getFormula"]}, "focal_class": {"identifier": "PieSparklineElementFactory", "superclass": "extends AbstractContentElementFactory", "interfaces": "", "fields": [{"original_string": "private Object content;", "modifier": "private", "type": "Object", "declarator": "content", "var_name": "content"}, {"original_string": "private String fieldname;", "modifier": "private", "type": "String", "declarator": "fieldname", "var_name": "fieldname"}, {"original_string": "private String formula;", "modifier": "private", "type": "String", "declarator": "formula", "var_name": "formula"}, {"original_string": "private Object nullValue;", "modifier": "private", "type": "Object", "declarator": "nullValue", "var_name": "nullValue"}, {"original_string": "private Color highColor;", "modifier": "private", "type": "Color", "declarator": "highColor", "var_name": "highColor"}, {"original_string": "private Color lowColor;", "modifier": "private", "type": "Color", "declarator": "lowColor", "var_name": "lowColor"}, {"original_string": "private Color mediumColor;", "modifier": "private", "type": "Color", "declarator": "mediumColor", "var_name": "mediumColor"}, {"original_string": "private Double highSlice;", "modifier": "private", "type": "Double", "declarator": "highSlice", "var_name": "highSlice"}, {"original_string": "private Double mediumSlice;", "modifier": "private", "type": "Double", "declarator": "mediumSlice", "var_name": "mediumSlice"}, {"original_string": "private Double lowSlice;", "modifier": "private", "type": "Double", "declarator": "lowSlice", "var_name": "lowSlice"}, {"original_string": "private Integer startAngle;", "modifier": "private", "type": "Integer", "declarator": "startAngle", "var_name": "startAngle"}, {"original_string": "private Boolean counterClockwise;", "modifier": "private", "type": "Boolean", "declarator": "counterClockwise", "var_name": "counterClockwise"}], "methods": [{"identifier": "PieSparklineElementFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " PieSparklineElementFactory()", "full_signature": "public  PieSparklineElementFactory()", "class_method_signature": "PieSparklineElementFactory.PieSparklineElementFactory()", "testcase": false, "constructor": true}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getContent()", "full_signature": "public Object getContent()", "class_method_signature": "PieSparklineElementFactory.getContent()", "testcase": false, "constructor": false}, {"identifier": "setContent", "parameters": "( final Object content )", "modifiers": "public", "return": "void", "signature": "void setContent( final Object content )", "full_signature": "public void setContent( final Object content )", "class_method_signature": "PieSparklineElementFactory.setContent( final Object content )", "testcase": false, "constructor": false}, {"identifier": "getNullValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getNullValue()", "full_signature": "public Object getNullValue()", "class_method_signature": "PieSparklineElementFactory.getNullValue()", "testcase": false, "constructor": false}, {"identifier": "setNullValue", "parameters": "( final Object nullValue )", "modifiers": "public", "return": "void", "signature": "void setNullValue( final Object nullValue )", "full_signature": "public void setNullValue( final Object nullValue )", "class_method_signature": "PieSparklineElementFactory.setNullValue( final Object nullValue )", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFormula()", "full_signature": "public String getFormula()", "class_method_signature": "PieSparklineElementFactory.getFormula()", "testcase": false, "constructor": false}, {"identifier": "setFormula", "parameters": "( final String formula )", "modifiers": "public", "return": "void", "signature": "void setFormula( final String formula )", "full_signature": "public void setFormula( final String formula )", "class_method_signature": "PieSparklineElementFactory.setFormula( final String formula )", "testcase": false, "constructor": false}, {"identifier": "getHighColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getHighColor()", "full_signature": "public Color getHighColor()", "class_method_signature": "PieSparklineElementFactory.getHighColor()", "testcase": false, "constructor": false}, {"identifier": "setHighColor", "parameters": "( final Color highColor )", "modifiers": "public", "return": "void", "signature": "void setHighColor( final Color highColor )", "full_signature": "public void setHighColor( final Color highColor )", "class_method_signature": "PieSparklineElementFactory.setHighColor( final Color highColor )", "testcase": false, "constructor": false}, {"identifier": "getLowColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getLowColor()", "full_signature": "public Color getLowColor()", "class_method_signature": "PieSparklineElementFactory.getLowColor()", "testcase": false, "constructor": false}, {"identifier": "setLowColor", "parameters": "( final Color lowColor )", "modifiers": "public", "return": "void", "signature": "void setLowColor( final Color lowColor )", "full_signature": "public void setLowColor( final Color lowColor )", "class_method_signature": "PieSparklineElementFactory.setLowColor( final Color lowColor )", "testcase": false, "constructor": false}, {"identifier": "getMediumColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getMediumColor()", "full_signature": "public Color getMediumColor()", "class_method_signature": "PieSparklineElementFactory.getMediumColor()", "testcase": false, "constructor": false}, {"identifier": "setMediumColor", "parameters": "( Color mediumColor )", "modifiers": "public", "return": "void", "signature": "void setMediumColor( Color mediumColor )", "full_signature": "public void setMediumColor( Color mediumColor )", "class_method_signature": "PieSparklineElementFactory.setMediumColor( Color mediumColor )", "testcase": false, "constructor": false}, {"identifier": "getStartAngle", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getStartAngle()", "full_signature": "public Integer getStartAngle()", "class_method_signature": "PieSparklineElementFactory.getStartAngle()", "testcase": false, "constructor": false}, {"identifier": "setStartAngle", "parameters": "( final Integer startAngle )", "modifiers": "public", "return": "void", "signature": "void setStartAngle( final Integer startAngle )", "full_signature": "public void setStartAngle( final Integer startAngle )", "class_method_signature": "PieSparklineElementFactory.setStartAngle( final Integer startAngle )", "testcase": false, "constructor": false}, {"identifier": "getHighSlice", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getHighSlice()", "full_signature": "public Double getHighSlice()", "class_method_signature": "PieSparklineElementFactory.getHighSlice()", "testcase": false, "constructor": false}, {"identifier": "setHighSlice", "parameters": "( Double highSlice )", "modifiers": "public", "return": "void", "signature": "void setHighSlice( Double highSlice )", "full_signature": "public void setHighSlice( Double highSlice )", "class_method_signature": "PieSparklineElementFactory.setHighSlice( Double highSlice )", "testcase": false, "constructor": false}, {"identifier": "getMediumSlice", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getMediumSlice()", "full_signature": "public Double getMediumSlice()", "class_method_signature": "PieSparklineElementFactory.getMediumSlice()", "testcase": false, "constructor": false}, {"identifier": "setMediumSlice", "parameters": "( Double mediumSlice )", "modifiers": "public", "return": "void", "signature": "void setMediumSlice( Double mediumSlice )", "full_signature": "public void setMediumSlice( Double mediumSlice )", "class_method_signature": "PieSparklineElementFactory.setMediumSlice( Double mediumSlice )", "testcase": false, "constructor": false}, {"identifier": "getLowSlice", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getLowSlice()", "full_signature": "public Double getLowSlice()", "class_method_signature": "PieSparklineElementFactory.getLowSlice()", "testcase": false, "constructor": false}, {"identifier": "setLowSlice", "parameters": "( Double lowSlice )", "modifiers": "public", "return": "void", "signature": "void setLowSlice( Double lowSlice )", "full_signature": "public void setLowSlice( Double lowSlice )", "class_method_signature": "PieSparklineElementFactory.setLowSlice( Double lowSlice )", "testcase": false, "constructor": false}, {"identifier": "getCounterClockwise", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean getCounterClockwise()", "full_signature": "public Boolean getCounterClockwise()", "class_method_signature": "PieSparklineElementFactory.getCounterClockwise()", "testcase": false, "constructor": false}, {"identifier": "setCounterClockwise", "parameters": "( Boolean counterClockwise )", "modifiers": "public", "return": "void", "signature": "void setCounterClockwise( Boolean counterClockwise )", "full_signature": "public void setCounterClockwise( Boolean counterClockwise )", "class_method_signature": "PieSparklineElementFactory.setCounterClockwise( Boolean counterClockwise )", "testcase": false, "constructor": false}, {"identifier": "getFieldname", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldname()", "full_signature": "public String getFieldname()", "class_method_signature": "PieSparklineElementFactory.getFieldname()", "testcase": false, "constructor": false}, {"identifier": "setFieldname", "parameters": "( final String fieldname )", "modifiers": "public", "return": "void", "signature": "void setFieldname( final String fieldname )", "full_signature": "public void setFieldname( final String fieldname )", "class_method_signature": "PieSparklineElementFactory.setFieldname( final String fieldname )", "testcase": false, "constructor": false}, {"identifier": "applyStyle", "parameters": "( final ElementStyleSheet style )", "modifiers": "protected", "return": "void", "signature": "void applyStyle( final ElementStyleSheet style )", "full_signature": "protected void applyStyle( final ElementStyleSheet style )", "class_method_signature": "PieSparklineElementFactory.applyStyle( final ElementStyleSheet style )", "testcase": false, "constructor": false}, {"identifier": "createElement", "parameters": "()", "modifiers": "public", "return": "Element", "signature": "Element createElement()", "full_signature": "public Element createElement()", "class_method_signature": "PieSparklineElementFactory.createElement()", "testcase": false, "constructor": false}], "file": "engine/extensions/src/main/java/org/pentaho/reporting/engine/classic/extensions/modules/sparklines/elementfactory/PieSparklineElementFactory.java"}, "focal_method": {"identifier": "createElement", "parameters": "()", "modifiers": "public", "return": "Element", "body": "public Element createElement() {\n    final Element element = new Element();\n    applyElementName( element );\n    applyStyle( element.getStyle() );\n\n    element.setElementType( new PieSparklineType() );\n    if ( getContent() != null ) {\n      element.setAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE, getContent() );\n    }\n    if ( getFieldname() != null ) {\n      element.setAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.FIELD, getFieldname() );\n    }\n    if ( getFormula() != null ) {\n      final FormulaExpression formulaExpression = new FormulaExpression();\n      formulaExpression.setFormula( getFormula() );\n      element.setAttributeExpression( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE, formulaExpression );\n    }\n    if ( startAngle != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.START_ANGLE, startAngle );\n    }\n    if ( lowSlice != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.LOW_SLICE, lowSlice );\n    }\n    if ( mediumSlice != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.MEDIUM_SLICE, mediumSlice );\n    }\n    if ( highSlice != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.HIGH_SLICE, highSlice );\n    }\n    if ( counterClockwise != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.COUNTER_CLOCKWISE,\n          counterClockwise );\n    }\n\n    return element;\n  }", "signature": "Element createElement()", "full_signature": "public Element createElement()", "class_method_signature": "PieSparklineElementFactory.createElement()", "testcase": false, "constructor": false, "invocations": ["applyElementName", "applyStyle", "getStyle", "setElementType", "getContent", "setAttribute", "getContent", "getFieldname", "setAttribute", "getFieldname", "getFormula", "setFormula", "getFormula", "setAttributeExpression", "setAttribute", "setAttribute", "setAttribute", "setAttribute", "setAttribute"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}