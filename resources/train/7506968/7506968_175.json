{"test_class": {"identifier": "SimpleSQLReportDataFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String QUERY = \"test_query\";", "modifier": "private static final", "type": "String", "declarator": "QUERY = \"test_query\"", "var_name": "QUERY"}, {"original_string": "private SimpleSQLReportDataFactory factory;", "modifier": "private", "type": "SimpleSQLReportDataFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}], "file": "engine/core/src/test/java/org/pentaho/reporting/engine/classic/core/modules/misc/datafactory/sql/SimpleSQLReportDataFactoryTest.java"}, "test_case": {"identifier": "testGetQueryNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetQueryNames() {\n    assertThat( factory.getQueryNames(), is( emptyArray() ) );\n  }", "signature": "void testGetQueryNames()", "full_signature": "@Test public void testGetQueryNames()", "class_method_signature": "SimpleSQLReportDataFactoryTest.testGetQueryNames()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getQueryNames", "is", "emptyArray"]}, "focal_class": {"identifier": "SimpleSQLReportDataFactory", "superclass": "extends AbstractDataFactory", "interfaces": "", "fields": [{"original_string": "private transient Connection connection;", "modifier": "private transient", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private ConnectionProvider connectionProvider;", "modifier": "private", "type": "ConnectionProvider", "declarator": "connectionProvider", "var_name": "connectionProvider"}, {"original_string": "private static final Log logger = LogFactory.getLog( SimpleSQLReportDataFactory.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( SimpleSQLReportDataFactory.class )", "var_name": "logger"}, {"original_string": "private boolean columnNameMapping;", "modifier": "private", "type": "boolean", "declarator": "columnNameMapping", "var_name": "columnNameMapping"}, {"original_string": "private static final String COLUMN_NAME_MAPPING_KEY =\n      \"org.pentaho.reporting.engine.classic.core.modules.misc.datafactory.sql.ColumnNameMapping\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_NAME_MAPPING_KEY =\n      \"org.pentaho.reporting.engine.classic.core.modules.misc.datafactory.sql.ColumnNameMapping\"", "var_name": "COLUMN_NAME_MAPPING_KEY"}, {"original_string": "private static final String[] EMPTY_NAMES = new String[0];", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_NAMES = new String[0]", "var_name": "EMPTY_NAMES"}, {"original_string": "private transient Statement currentRunningStatement;", "modifier": "private transient", "type": "Statement", "declarator": "currentRunningStatement", "var_name": "currentRunningStatement"}, {"original_string": "private String userField;", "modifier": "private", "type": "String", "declarator": "userField", "var_name": "userField"}, {"original_string": "private String passwordField;", "modifier": "private", "type": "String", "declarator": "passwordField", "var_name": "passwordField"}, {"original_string": "public static Configuration globalConfig;", "modifier": "public static", "type": "Configuration", "declarator": "globalConfig", "var_name": "globalConfig"}], "methods": [{"identifier": "SimpleSQLReportDataFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleSQLReportDataFactory()", "full_signature": "public  SimpleSQLReportDataFactory()", "class_method_signature": "SimpleSQLReportDataFactory.SimpleSQLReportDataFactory()", "testcase": false, "constructor": true}, {"identifier": "SimpleSQLReportDataFactory", "parameters": "( final Connection connection )", "modifiers": "public", "return": "", "signature": " SimpleSQLReportDataFactory( final Connection connection )", "full_signature": "public  SimpleSQLReportDataFactory( final Connection connection )", "class_method_signature": "SimpleSQLReportDataFactory.SimpleSQLReportDataFactory( final Connection connection )", "testcase": false, "constructor": true}, {"identifier": "SimpleSQLReportDataFactory", "parameters": "( final ConnectionProvider connectionProvider )", "modifiers": "public", "return": "", "signature": " SimpleSQLReportDataFactory( final ConnectionProvider connectionProvider )", "full_signature": "public  SimpleSQLReportDataFactory( final ConnectionProvider connectionProvider )", "class_method_signature": "SimpleSQLReportDataFactory.SimpleSQLReportDataFactory( final ConnectionProvider connectionProvider )", "testcase": false, "constructor": true}, {"identifier": "getUserField", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserField()", "full_signature": "public String getUserField()", "class_method_signature": "SimpleSQLReportDataFactory.getUserField()", "testcase": false, "constructor": false}, {"identifier": "setUserField", "parameters": "( final String userField )", "modifiers": "public", "return": "void", "signature": "void setUserField( final String userField )", "full_signature": "public void setUserField( final String userField )", "class_method_signature": "SimpleSQLReportDataFactory.setUserField( final String userField )", "testcase": false, "constructor": false}, {"identifier": "getPasswordField", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPasswordField()", "full_signature": "public String getPasswordField()", "class_method_signature": "SimpleSQLReportDataFactory.getPasswordField()", "testcase": false, "constructor": false}, {"identifier": "setPasswordField", "parameters": "( final String passwordField )", "modifiers": "public", "return": "void", "signature": "void setPasswordField( final String passwordField )", "full_signature": "public void setPasswordField( final String passwordField )", "class_method_signature": "SimpleSQLReportDataFactory.setPasswordField( final String passwordField )", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "( final DataRow dataRow )", "modifiers": "protected synchronized", "return": "Connection", "signature": "Connection getConnection( final DataRow dataRow )", "full_signature": "protected synchronized Connection getConnection( final DataRow dataRow )", "class_method_signature": "SimpleSQLReportDataFactory.getConnection( final DataRow dataRow )", "testcase": false, "constructor": false}, {"identifier": "getBestResultSetType", "parameters": "( final DataRow dataRow )", "modifiers": "public", "return": "int", "signature": "int getBestResultSetType( final DataRow dataRow )", "full_signature": "public int getBestResultSetType( final DataRow dataRow )", "class_method_signature": "SimpleSQLReportDataFactory.getBestResultSetType( final DataRow dataRow )", "testcase": false, "constructor": false}, {"identifier": "queryData", "parameters": "( final String query, final DataRow parameters )", "modifiers": "public synchronized", "return": "TableModel", "signature": "TableModel queryData( final String query, final DataRow parameters )", "full_signature": "public synchronized TableModel queryData( final String query, final DataRow parameters )", "class_method_signature": "SimpleSQLReportDataFactory.queryData( final String query, final DataRow parameters )", "testcase": false, "constructor": false}, {"identifier": "createParametrizationProviderFactory", "parameters": "()", "modifiers": "private", "return": "ParametrizationProviderFactory", "signature": "ParametrizationProviderFactory createParametrizationProviderFactory()", "full_signature": "private ParametrizationProviderFactory createParametrizationProviderFactory()", "class_method_signature": "SimpleSQLReportDataFactory.createParametrizationProviderFactory()", "testcase": false, "constructor": false}, {"identifier": "getReferencedFields", "parameters": "( final String query, final DataRow parameters )", "modifiers": "public", "return": "String[]", "signature": "String[] getReferencedFields( final String query, final DataRow parameters )", "full_signature": "public String[] getReferencedFields( final String query, final DataRow parameters )", "class_method_signature": "SimpleSQLReportDataFactory.getReferencedFields( final String query, final DataRow parameters )", "testcase": false, "constructor": false}, {"identifier": "translateQuery", "parameters": "( final String query )", "modifiers": "protected", "return": "String", "signature": "String translateQuery( final String query )", "full_signature": "protected String translateQuery( final String query )", "class_method_signature": "SimpleSQLReportDataFactory.translateQuery( final String query )", "testcase": false, "constructor": false}, {"identifier": "computedQuery", "parameters": "( final String queryName, final DataRow parameters )", "modifiers": "protected", "return": "String", "signature": "String computedQuery( final String queryName, final DataRow parameters )", "full_signature": "protected String computedQuery( final String queryName, final DataRow parameters )", "class_method_signature": "SimpleSQLReportDataFactory.computedQuery( final String queryName, final DataRow parameters )", "testcase": false, "constructor": false}, {"identifier": "isExpandArrayParameterNeeded", "parameters": "( final String query )", "modifiers": "public static", "return": "boolean", "signature": "boolean isExpandArrayParameterNeeded( final String query )", "full_signature": "public static boolean isExpandArrayParameterNeeded( final String query )", "class_method_signature": "SimpleSQLReportDataFactory.isExpandArrayParameterNeeded( final String query )", "testcase": false, "constructor": false}, {"identifier": "parametrizeAndQuery", "parameters": "( final DataRow parameters, final String translatedQuery,\n      final String[] preparedParameterNames )", "modifiers": "protected", "return": "TableModel", "signature": "TableModel parametrizeAndQuery( final DataRow parameters, final String translatedQuery,\n      final String[] preparedParameterNames )", "full_signature": "protected TableModel parametrizeAndQuery( final DataRow parameters, final String translatedQuery,\n      final String[] preparedParameterNames )", "class_method_signature": "SimpleSQLReportDataFactory.parametrizeAndQuery( final DataRow parameters, final String translatedQuery,\n      final String[] preparedParameterNames )", "testcase": false, "constructor": false}, {"identifier": "performQuery", "parameters": "( Statement statement, final String translatedQuery, final String[] preparedParameterNames )", "modifiers": "public", "return": "ResultSet", "signature": "ResultSet performQuery( Statement statement, final String translatedQuery, final String[] preparedParameterNames )", "full_signature": "public ResultSet performQuery( Statement statement, final String translatedQuery, final String[] preparedParameterNames )", "class_method_signature": "SimpleSQLReportDataFactory.performQuery( Statement statement, final String translatedQuery, final String[] preparedParameterNames )", "testcase": false, "constructor": false}, {"identifier": "parametrize", "parameters": "( final DataRow parameters, final String[] params, final PreparedStatement pstmt,\n      final boolean expandArrays, final int parameterOffset )", "modifiers": "private", "return": "void", "signature": "void parametrize( final DataRow parameters, final String[] params, final PreparedStatement pstmt,\n      final boolean expandArrays, final int parameterOffset )", "full_signature": "private void parametrize( final DataRow parameters, final String[] params, final PreparedStatement pstmt,\n      final boolean expandArrays, final int parameterOffset )", "class_method_signature": "SimpleSQLReportDataFactory.parametrize( final DataRow parameters, final String[] params, final PreparedStatement pstmt,\n      final boolean expandArrays, final int parameterOffset )", "testcase": false, "constructor": false}, {"identifier": "isExpandArrays", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isExpandArrays()", "full_signature": "protected boolean isExpandArrays()", "class_method_signature": "SimpleSQLReportDataFactory.isExpandArrays()", "testcase": false, "constructor": false}, {"identifier": "cancelRunningQuery", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancelRunningQuery()", "full_signature": "public void cancelRunningQuery()", "class_method_signature": "SimpleSQLReportDataFactory.cancelRunningQuery()", "testcase": false, "constructor": false}, {"identifier": "isCallableStatement", "parameters": "( final String query )", "modifiers": "private static", "return": "boolean", "signature": "boolean isCallableStatement( final String query )", "full_signature": "private static boolean isCallableStatement( final String query )", "class_method_signature": "SimpleSQLReportDataFactory.isCallableStatement( final String query )", "testcase": false, "constructor": false}, {"identifier": "isCallableStatementQuery", "parameters": "( final String query )", "modifiers": "private static", "return": "boolean", "signature": "boolean isCallableStatementQuery( final String query )", "full_signature": "private static boolean isCallableStatementQuery( final String query )", "class_method_signature": "SimpleSQLReportDataFactory.isCallableStatementQuery( final String query )", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "SimpleSQLReportDataFactory.close()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "SimpleSQLReportDataFactory", "signature": "SimpleSQLReportDataFactory clone()", "full_signature": "public SimpleSQLReportDataFactory clone()", "class_method_signature": "SimpleSQLReportDataFactory.clone()", "testcase": false, "constructor": false}, {"identifier": "setConnectionProvider", "parameters": "( final ConnectionProvider connectionProvider )", "modifiers": "public", "return": "void", "signature": "void setConnectionProvider( final ConnectionProvider connectionProvider )", "full_signature": "public void setConnectionProvider( final ConnectionProvider connectionProvider )", "class_method_signature": "SimpleSQLReportDataFactory.setConnectionProvider( final ConnectionProvider connectionProvider )", "testcase": false, "constructor": false}, {"identifier": "getConnectionProvider", "parameters": "()", "modifiers": "public", "return": "ConnectionProvider", "signature": "ConnectionProvider getConnectionProvider()", "full_signature": "public ConnectionProvider getConnectionProvider()", "class_method_signature": "SimpleSQLReportDataFactory.getConnectionProvider()", "testcase": false, "constructor": false}, {"identifier": "isQueryExecutable", "parameters": "( final String query, final DataRow parameters )", "modifiers": "public", "return": "boolean", "signature": "boolean isQueryExecutable( final String query, final DataRow parameters )", "full_signature": "public boolean isQueryExecutable( final String query, final DataRow parameters )", "class_method_signature": "SimpleSQLReportDataFactory.isQueryExecutable( final String query, final DataRow parameters )", "testcase": false, "constructor": false}, {"identifier": "getQueryNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getQueryNames()", "full_signature": "public String[] getQueryNames()", "class_method_signature": "SimpleSQLReportDataFactory.getQueryNames()", "testcase": false, "constructor": false}, {"identifier": "getQueryHash", "parameters": "( final String queryName, final DataRow parameter )", "modifiers": "public", "return": "ArrayList<Object>", "signature": "ArrayList<Object> getQueryHash( final String queryName, final DataRow parameter )", "full_signature": "public ArrayList<Object> getQueryHash( final String queryName, final DataRow parameter )", "class_method_signature": "SimpleSQLReportDataFactory.getQueryHash( final String queryName, final DataRow parameter )", "testcase": false, "constructor": false}], "file": "engine/core/src/main/java/org/pentaho/reporting/engine/classic/core/modules/misc/datafactory/sql/SimpleSQLReportDataFactory.java"}, "focal_method": {"identifier": "getQueryNames", "parameters": "()", "modifiers": "public", "return": "String[]", "body": "public String[] getQueryNames() {\n    return EMPTY_NAMES;\n  }", "signature": "String[] getQueryNames()", "full_signature": "public String[] getQueryNames()", "class_method_signature": "SimpleSQLReportDataFactory.getQueryNames()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}