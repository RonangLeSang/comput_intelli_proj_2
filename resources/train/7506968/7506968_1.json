{"test_class": {"identifier": "ParameterDialogTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReportDesignerContext context;", "modifier": "private", "type": "ReportDesignerContext", "declarator": "context", "var_name": "context"}, {"original_string": "private ParameterDefinitionEntry parameter;", "modifier": "private", "type": "ParameterDefinitionEntry", "declarator": "parameter", "var_name": "parameter"}, {"original_string": "private ParameterType type;", "modifier": "private", "type": "ParameterType", "declarator": "type", "var_name": "type"}, {"original_string": "private ParameterDialog dialog;", "modifier": "private", "type": "ParameterDialog", "declarator": "dialog", "var_name": "dialog"}, {"original_string": "private ParameterContext parameterContext;", "modifier": "private", "type": "ParameterContext", "declarator": "parameterContext", "var_name": "parameterContext"}], "file": "designer/report-designer/src/test/java/org/pentaho/reporting/designer/core/editor/parameters/ParameterDialogTest.java"}, "test_case": {"identifier": "testCreateDialogJustLabel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateDialogJustLabel() {\n    when( parameter.getParameterAttribute( anyString(), eq(\n      ParameterAttributeNames.Core.LABEL\n    ), any() ) ).thenReturn( \"val\" );\n    when( parameter.getParameterAttribute( anyString(), eq(\n      ParameterAttributeNames.Core.LABEL_FORMULA\n    ), any() ) ).thenReturn( null );\n\n    dialog.updateFromParameter( parameter );\n\n    verify( dialog.labelTextField, times( 1 ) ).setText( eq( \"val\" ) );\n    verify( dialog.labelFormula, times( 1 ) ).setFormula( null );\n  }", "signature": "void testCreateDialogJustLabel()", "full_signature": "@Test public void testCreateDialogJustLabel()", "class_method_signature": "ParameterDialogTest.testCreateDialogJustLabel()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getParameterAttribute", "anyString", "eq", "any", "thenReturn", "when", "getParameterAttribute", "anyString", "eq", "any", "updateFromParameter", "setText", "verify", "times", "eq", "setFormula", "verify", "times"]}, "focal_class": {"identifier": "ParameterDialog", "superclass": "extends CommonDialog", "interfaces": "implements FormulaEditorDataModel", "fields": [{"original_string": "private static final ValidationMessage.Severity[] ALL_SEVERITIES = new ValidationMessage.Severity[] {\n    ValidationMessage.Severity.WARN, ValidationMessage.Severity.ERROR };", "modifier": "private static final", "type": "ValidationMessage.Severity[]", "declarator": "ALL_SEVERITIES = new ValidationMessage.Severity[] {\n    ValidationMessage.Severity.WARN, ValidationMessage.Severity.ERROR }", "var_name": "ALL_SEVERITIES"}, {"original_string": "private static final Class[] DEFAULT_CLASSES = { String.class,\n    Boolean.class,\n    Number.class,\n    Date.class,\n    java.sql.Date.class,\n    Time.class,\n    Timestamp.class,\n    Double.class,\n    Float.class,\n    Integer.class,\n    Long.class,\n    Short.class,\n    Byte.class,\n    BigInteger.class,\n    BigDecimal.class,\n    TableModel.class,\n    Object.class\n  };", "modifier": "private static final", "type": "Class[]", "declarator": "DEFAULT_CLASSES = { String.class,\n    Boolean.class,\n    Number.class,\n    Date.class,\n    java.sql.Date.class,\n    Time.class,\n    Timestamp.class,\n    Double.class,\n    Float.class,\n    Integer.class,\n    Long.class,\n    Short.class,\n    Byte.class,\n    BigInteger.class,\n    BigDecimal.class,\n    TableModel.class,\n    Object.class\n  }", "var_name": "DEFAULT_CLASSES"}, {"original_string": "private ReportDesignerContext reportDesignerContext;", "modifier": "private", "type": "ReportDesignerContext", "declarator": "reportDesignerContext", "var_name": "reportDesignerContext"}, {"original_string": "private ProvisionDataSourcePanel provisionDataSourcePanel;", "modifier": "private", "type": "ProvisionDataSourcePanel", "declarator": "provisionDataSourcePanel", "var_name": "provisionDataSourcePanel"}, {"original_string": "private JTextField nameTextField;", "modifier": "private", "type": "JTextField", "declarator": "nameTextField", "var_name": "nameTextField"}, {"original_string": "@VisibleForTesting\n  JTextField labelTextField;", "modifier": "@VisibleForTesting", "type": "JTextField", "declarator": "labelTextField", "var_name": "labelTextField"}, {"original_string": "private DefaultValueEditorPanel defaultValueTextField;", "modifier": "private", "type": "DefaultValueEditorPanel", "declarator": "defaultValueTextField", "var_name": "defaultValueTextField"}, {"original_string": "@VisibleForTesting\n  JTextField dataFormatField;", "modifier": "@VisibleForTesting", "type": "JTextField", "declarator": "dataFormatField", "var_name": "dataFormatField"}, {"original_string": "private DataFactoryTreeModel availableDataSourcesModel;", "modifier": "private", "type": "DataFactoryTreeModel", "declarator": "availableDataSourcesModel", "var_name": "availableDataSourcesModel"}, {"original_string": "private JComboBox idComboBox;", "modifier": "private", "type": "JComboBox", "declarator": "idComboBox", "var_name": "idComboBox"}, {"original_string": "private JComboBox displayValueComboBox;", "modifier": "private", "type": "JComboBox", "declarator": "displayValueComboBox", "var_name": "displayValueComboBox"}, {"original_string": "private JComboBox valueTypeComboBox;", "modifier": "private", "type": "JComboBox", "declarator": "valueTypeComboBox", "var_name": "valueTypeComboBox"}, {"original_string": "private JCheckBox mandatoryCheckBox;", "modifier": "private", "type": "JCheckBox", "declarator": "mandatoryCheckBox", "var_name": "mandatoryCheckBox"}, {"original_string": "@VisibleForTesting\n  JCheckBox hiddenCheckBox;", "modifier": "@VisibleForTesting", "type": "JCheckBox", "declarator": "hiddenCheckBox", "var_name": "hiddenCheckBox"}, {"original_string": "private JCheckBox strictValuesCheckBox;", "modifier": "private", "type": "JCheckBox", "declarator": "strictValuesCheckBox", "var_name": "strictValuesCheckBox"}, {"original_string": "private JCheckBox autofillSelectionCheckBox;", "modifier": "private", "type": "JCheckBox", "declarator": "autofillSelectionCheckBox", "var_name": "autofillSelectionCheckBox"}, {"original_string": "private JCheckBox reevaluateOnInvalidStrictParamCheckBox;", "modifier": "private", "type": "JCheckBox", "declarator": "reevaluateOnInvalidStrictParamCheckBox", "var_name": "reevaluateOnInvalidStrictParamCheckBox"}, {"original_string": "private JLabel displayFormulaLabel;", "modifier": "private", "type": "JLabel", "declarator": "displayFormulaLabel", "var_name": "displayFormulaLabel"}, {"original_string": "private FormulaEditorPanel postProcessingFormulaField;", "modifier": "private", "type": "FormulaEditorPanel", "declarator": "postProcessingFormulaField", "var_name": "postProcessingFormulaField"}, {"original_string": "private FormulaEditorPanel displayFormulaField;", "modifier": "private", "type": "FormulaEditorPanel", "declarator": "displayFormulaField", "var_name": "displayFormulaField"}, {"original_string": "private FormulaEditorPanel defaultValueFormulaField;", "modifier": "private", "type": "FormulaEditorPanel", "declarator": "defaultValueFormulaField", "var_name": "defaultValueFormulaField"}, {"original_string": "@VisibleForTesting\n  FormulaEditorPanel labelFormula;", "modifier": "@VisibleForTesting", "type": "FormulaEditorPanel", "declarator": "labelFormula", "var_name": "labelFormula"}, {"original_string": "@VisibleForTesting\n  FormulaEditorPanel dataFormatFormula;", "modifier": "@VisibleForTesting", "type": "FormulaEditorPanel", "declarator": "dataFormatFormula", "var_name": "dataFormatFormula"}, {"original_string": "@VisibleForTesting\n  FormulaEditorPanel hiddenFormula;", "modifier": "@VisibleForTesting", "type": "FormulaEditorPanel", "declarator": "hiddenFormula", "var_name": "hiddenFormula"}, {"original_string": "private JSpinner visibleItemsTextField;", "modifier": "private", "type": "JSpinner", "declarator": "visibleItemsTextField", "var_name": "visibleItemsTextField"}, {"original_string": "private JLabel visibleItemsLabel;", "modifier": "private", "type": "JLabel", "declarator": "visibleItemsLabel", "var_name": "visibleItemsLabel"}, {"original_string": "private ComboBoxModel parameterTypeModel;", "modifier": "private", "type": "ComboBoxModel", "declarator": "parameterTypeModel", "var_name": "parameterTypeModel"}, {"original_string": "private JTree availableDataSources;", "modifier": "private", "type": "JTree", "declarator": "availableDataSources", "var_name": "availableDataSources"}, {"original_string": "private StaticTextComboBoxModel queryComboBoxModel;", "modifier": "private", "type": "StaticTextComboBoxModel", "declarator": "queryComboBoxModel", "var_name": "queryComboBoxModel"}, {"original_string": "private ParameterContext parameterContext;", "modifier": "private", "type": "ParameterContext", "declarator": "parameterContext", "var_name": "parameterContext"}, {"original_string": "private JLabel displayValueLabel;", "modifier": "private", "type": "JLabel", "declarator": "displayValueLabel", "var_name": "displayValueLabel"}, {"original_string": "private JComboBox timeZoneBox;", "modifier": "private", "type": "JComboBox", "declarator": "timeZoneBox", "var_name": "timeZoneBox"}, {"original_string": "private KeyedComboBoxModel<String, String> timeZoneModel;", "modifier": "private", "type": "KeyedComboBoxModel<String, String>", "declarator": "timeZoneModel", "var_name": "timeZoneModel"}, {"original_string": "private JLabel timeZoneLabel;", "modifier": "private", "type": "JLabel", "declarator": "timeZoneLabel", "var_name": "timeZoneLabel"}, {"original_string": "private String parameter;", "modifier": "private", "type": "String", "declarator": "parameter", "var_name": "parameter"}], "methods": [{"identifier": "ParameterDialog", "parameters": "( final ReportDesignerContext context )", "modifiers": "public", "return": "", "signature": " ParameterDialog( final ReportDesignerContext context )", "full_signature": "public  ParameterDialog( final ReportDesignerContext context )", "class_method_signature": "ParameterDialog.ParameterDialog( final ReportDesignerContext context )", "testcase": false, "constructor": true}, {"identifier": "ParameterDialog", "parameters": "( final Dialog aParent, final ReportDesignerContext context )", "modifiers": "public", "return": "", "signature": " ParameterDialog( final Dialog aParent, final ReportDesignerContext context )", "full_signature": "public  ParameterDialog( final Dialog aParent, final ReportDesignerContext context )", "class_method_signature": "ParameterDialog.ParameterDialog( final Dialog aParent, final ReportDesignerContext context )", "testcase": false, "constructor": true}, {"identifier": "ParameterDialog", "parameters": "( final Frame aParent, final ReportDesignerContext context )", "modifiers": "public", "return": "", "signature": " ParameterDialog( final Frame aParent, final ReportDesignerContext context )", "full_signature": "public  ParameterDialog( final Frame aParent, final ReportDesignerContext context )", "class_method_signature": "ParameterDialog.ParameterDialog( final Frame aParent, final ReportDesignerContext context )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void init()", "full_signature": "@Override protected void init()", "class_method_signature": "ParameterDialog.init()", "testcase": false, "constructor": false}, {"identifier": "getDialogId", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getDialogId()", "full_signature": "protected String getDialogId()", "class_method_signature": "ParameterDialog.getDialogId()", "testcase": false, "constructor": false}, {"identifier": "getSelectedTimeZone", "parameters": "()", "modifiers": "@SuppressWarnings( \"HardCodedStringLiteral\" ) private", "return": "TimeZone", "signature": "TimeZone getSelectedTimeZone()", "full_signature": "@SuppressWarnings( \"HardCodedStringLiteral\" ) private TimeZone getSelectedTimeZone()", "class_method_signature": "ParameterDialog.getSelectedTimeZone()", "testcase": false, "constructor": false}, {"identifier": "createContentPane", "parameters": "()", "modifiers": "protected", "return": "Component", "signature": "Component createContentPane()", "full_signature": "protected Component createContentPane()", "class_method_signature": "ParameterDialog.createContentPane()", "testcase": false, "constructor": false}, {"identifier": "createDetailsPanel", "parameters": "()", "modifiers": "private", "return": "JPanel", "signature": "JPanel createDetailsPanel()", "full_signature": "private JPanel createDetailsPanel()", "class_method_signature": "ParameterDialog.createDetailsPanel()", "testcase": false, "constructor": false}, {"identifier": "createPromptPanel", "parameters": "()", "modifiers": "private", "return": "Box", "signature": "Box createPromptPanel()", "full_signature": "private Box createPromptPanel()", "class_method_signature": "ParameterDialog.createPromptPanel()", "testcase": false, "constructor": false}, {"identifier": "updateFromParameter", "parameters": "( final ParameterDefinitionEntry p )", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void updateFromParameter( final ParameterDefinitionEntry p )", "full_signature": "@VisibleForTesting void updateFromParameter( final ParameterDefinitionEntry p )", "class_method_signature": "ParameterDialog.updateFromParameter( final ParameterDefinitionEntry p )", "testcase": false, "constructor": false}, {"identifier": "getSelectedQuery", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getSelectedQuery()", "full_signature": "private String getSelectedQuery()", "class_method_signature": "ParameterDialog.getSelectedQuery()", "testcase": false, "constructor": false}, {"identifier": "setSelectedQuery", "parameters": "( final String query )", "modifiers": "private", "return": "void", "signature": "void setSelectedQuery( final String query )", "full_signature": "private void setSelectedQuery( final String query )", "class_method_signature": "ParameterDialog.setSelectedQuery( final String query )", "testcase": false, "constructor": false}, {"identifier": "createParameterResult", "parameters": "()", "modifiers": "private", "return": "ParameterDefinitionEntry", "signature": "ParameterDefinitionEntry createParameterResult()", "full_signature": "private ParameterDefinitionEntry createParameterResult()", "class_method_signature": "ParameterDialog.createParameterResult()", "testcase": false, "constructor": false}, {"identifier": "createQuerylessParameter", "parameters": "( final String name,\n                                                             final String label,\n                                                             final Object rawDefaultValue,\n                                                             final String dataFormat,\n                                                             final boolean mandatory,\n                                                             final ParameterType type )", "modifiers": "@VisibleForTesting", "return": "ParameterDefinitionEntry", "signature": "ParameterDefinitionEntry createQuerylessParameter( final String name,\n                                                             final String label,\n                                                             final Object rawDefaultValue,\n                                                             final String dataFormat,\n                                                             final boolean mandatory,\n                                                             final ParameterType type )", "full_signature": "@VisibleForTesting ParameterDefinitionEntry createQuerylessParameter( final String name,\n                                                             final String label,\n                                                             final Object rawDefaultValue,\n                                                             final String dataFormat,\n                                                             final boolean mandatory,\n                                                             final ParameterType type )", "class_method_signature": "ParameterDialog.createQuerylessParameter( final String name,\n                                                             final String label,\n                                                             final Object rawDefaultValue,\n                                                             final String dataFormat,\n                                                             final boolean mandatory,\n                                                             final ParameterType type )", "testcase": false, "constructor": false}, {"identifier": "getSelectedParameterType", "parameters": "()", "modifiers": "private", "return": "ParameterType", "signature": "ParameterType getSelectedParameterType()", "full_signature": "private ParameterType getSelectedParameterType()", "class_method_signature": "ParameterDialog.getSelectedParameterType()", "testcase": false, "constructor": false}, {"identifier": "findDataFactoryForQuery", "parameters": "( final String query )", "modifiers": "private", "return": "DataFactory", "signature": "DataFactory findDataFactoryForQuery( final String query )", "full_signature": "private DataFactory findDataFactoryForQuery( final String query )", "class_method_signature": "ParameterDialog.findDataFactoryForQuery( final String query )", "testcase": false, "constructor": false}, {"identifier": "performEditParameter", "parameters": "( final ReportDesignerContext context,\n                                                   final MasterReport masterReport,\n                                                   final ParameterDefinitionEntry parameterDefinitionEntry )", "modifiers": "public", "return": "ParameterEditResult", "signature": "ParameterEditResult performEditParameter( final ReportDesignerContext context,\n                                                   final MasterReport masterReport,\n                                                   final ParameterDefinitionEntry parameterDefinitionEntry )", "full_signature": "public ParameterEditResult performEditParameter( final ReportDesignerContext context,\n                                                   final MasterReport masterReport,\n                                                   final ParameterDefinitionEntry parameterDefinitionEntry )", "class_method_signature": "ParameterDialog.performEditParameter( final ReportDesignerContext context,\n                                                   final MasterReport masterReport,\n                                                   final ParameterDefinitionEntry parameterDefinitionEntry )", "testcase": false, "constructor": false}, {"identifier": "getDataFields", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getDataFields()", "full_signature": "public String[] getDataFields()", "class_method_signature": "ParameterDialog.getDataFields()", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getParameter()", "full_signature": "public String getParameter()", "class_method_signature": "ParameterDialog.getParameter()", "testcase": false, "constructor": false}, {"identifier": "validateInputs", "parameters": "( boolean onConfirm )", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean validateInputs( boolean onConfirm )", "full_signature": "@Override protected boolean validateInputs( boolean onConfirm )", "class_method_signature": "ParameterDialog.validateInputs( boolean onConfirm )", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "( ValidationResult validationResult )", "modifiers": "private", "return": "ValidationResult", "signature": "ValidationResult validate( ValidationResult validationResult )", "full_signature": "private ValidationResult validate( ValidationResult validationResult )", "class_method_signature": "ParameterDialog.validate( ValidationResult validationResult )", "testcase": false, "constructor": false}], "file": "designer/report-designer/src/main/java/org/pentaho/reporting/designer/core/editor/parameters/ParameterDialog.java"}, "focal_method": {"identifier": "updateFromParameter", "parameters": "( final ParameterDefinitionEntry p )", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n  void updateFromParameter( final ParameterDefinitionEntry p ) {\n    if ( p == null ) {\n      dataFormatField.setText( null );\n      labelTextField.setText( null );\n      nameTextField.setText( null );\n      defaultValueTextField.setValue( null, String.class );\n      visibleItemsTextField.setValue( 0 );\n      parameterTypeModel.setSelectedItem( null );\n      availableDataSources.clearSelection();\n      displayValueComboBox.setSelectedItem( null );\n      valueTypeComboBox.setSelectedItem( String.class );\n      mandatoryCheckBox.setSelected( false );\n      hiddenCheckBox.setSelected( false );\n      postProcessingFormulaField.setFormula( null );\n      displayFormulaField.setFormula( null );\n      strictValuesCheckBox.setSelected( true );\n      timeZoneBox.setSelectedItem( null );\n      autofillSelectionCheckBox.setSelected( false );\n      reevaluateOnInvalidStrictParamCheckBox.setSelected( false );\n      setSelectedQuery( null );\n      return;\n    }\n\n\n    final boolean multiSelection;\n    if ( p instanceof DefaultListParameter ) {\n      final DefaultListParameter parameter = (DefaultListParameter) p;\n      final String queryName = parameter.getQueryName();\n      final DataFactory factoryForQuery = findDataFactoryForQuery( queryName );\n      if ( factoryForQuery != null ) {\n        final int idx = availableDataSourcesModel.indexOf( factoryForQuery );\n        availableDataSources.setSelectionPath( new TreePath( new Object[] {\n          availableDataSourcesModel.getRoot(), availableDataSourcesModel.get( idx ), queryName } ) );\n      } else {\n        setSelectedQuery( queryName );\n      }\n\n      autofillSelectionCheckBox.setSelected( \"true\".equals(\n        parameter.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n          ParameterAttributeNames.Core.AUTOFILL_SELECTION, parameterContext ) ) );\n      reevaluateOnInvalidStrictParamCheckBox.setSelected( \"true\".equals(\n        parameter.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n          ParameterAttributeNames.Core.RE_EVALUATE_ON_FAILED_VALUES, parameterContext ) ) );\n      strictValuesCheckBox.setSelected( parameter.isStrictValueCheck() );\n      displayValueComboBox.setSelectedItem( parameter.getTextColumn() );\n      idComboBox.setSelectedItem( parameter.getKeyColumn() );\n      final int visibleItems =\n        ParserUtil.parseInt( parameter.getParameterAttribute(\n          ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.VISIBLE_ITEMS ), 0 );\n      visibleItemsTextField.setValue( visibleItems );\n    } else {\n      autofillSelectionCheckBox.setSelected( false );\n      reevaluateOnInvalidStrictParamCheckBox.setSelected( false );\n      strictValuesCheckBox.setSelected( true );\n    }\n\n    if ( p instanceof ListParameter ) {\n      multiSelection = ( (ListParameter) p ).isAllowMultiSelection();\n    } else {\n      multiSelection = false;\n    }\n\n    final Class theType = p.getValueType();\n\n    valueTypeComboBox.setSelectedItem( multiSelection ? theType.getComponentType() : theType );\n    nameTextField.setText( p.getName() );\n\n    // do not show formula in label text.\n    // if label will be empty but label formula is not,\n    // we will set formula text to label.\n    final String labelText = p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.LABEL,\n      parameterContext );\n    final String labelFormulaText = p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n      ParameterAttributeNames.Core.LABEL_FORMULA, parameterContext );\n    labelTextField.setText( Objects.equals( labelText, labelFormulaText ) ? \"\" : labelText );\n    labelFormula.setFormula( labelFormulaText );\n\n    // same approach for data format text.\n    final String dataFormatText = p.getParameterAttribute(\n      ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.DATA_FORMAT, parameterContext );\n    final String dataFormatFormulaText = p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n      ParameterAttributeNames.Core.DATA_FORMAT_FORMULA, parameterContext );\n    dataFormatField.setText( Objects.equals( dataFormatText, dataFormatFormulaText ) ? \"\" : dataFormatText );\n    dataFormatFormula.setFormula( dataFormatFormulaText );\n\n    mandatoryCheckBox.setSelected( p.isMandatory() );\n    postProcessingFormulaField.setFormula( p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n      ParameterAttributeNames.Core.POST_PROCESSOR_FORMULA,\n      parameterContext ) );\n    displayFormulaField.setFormula( p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n      ParameterAttributeNames.Core.DISPLAY_VALUE_FORMULA,\n      parameterContext ) );\n\n    final String hiddenValue =\n      p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.HIDDEN,\n        parameterContext );\n    if ( hiddenValue != null ) {\n      hiddenCheckBox.setSelected( hiddenValue.equals( \"true\" ) );\n    }\n    hiddenFormula.setFormula(  p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n      ParameterAttributeNames.Core.HIDDEN_FORMULA, parameterContext ) );\n\n    if ( p instanceof AbstractParameter ) {\n      final AbstractParameter parameter = (AbstractParameter) p;\n      defaultValueTextField.setValue( parameter.getDefaultValue(), parameter.getValueType() );\n    } else {\n      defaultValueTextField.setValue( null, p.getValueType() );\n    }\n\n    defaultValueFormulaField.setFormula( p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n      ParameterAttributeNames.Core.DEFAULT_VALUE_FORMULA, parameterContext ) );\n    timeZoneModel.setSelectedKey( p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE,\n      ParameterAttributeNames.Core.TIMEZONE, parameterContext ) );\n\n    final String type =\n      p.getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE,\n        parameterContext );\n    if ( type != null ) {\n      final int size = parameterTypeModel.getSize();\n      for ( int i = 0; i < size; i++ ) {\n        final ParameterType typeEntry = (ParameterType) parameterTypeModel.getElementAt( i );\n        if ( typeEntry == null ) {\n          continue;\n        }\n        if ( ( typeEntry.isMultiSelection() == multiSelection ) && ( type.equals( typeEntry.getInternalName() ) ) ) {\n          parameterTypeModel.setSelectedItem( typeEntry );\n          break;\n        }\n      }\n    } else {\n      parameterTypeModel.setSelectedItem( null );\n    }\n  }", "signature": "void updateFromParameter( final ParameterDefinitionEntry p )", "full_signature": "@VisibleForTesting void updateFromParameter( final ParameterDefinitionEntry p )", "class_method_signature": "ParameterDialog.updateFromParameter( final ParameterDefinitionEntry p )", "testcase": false, "constructor": false, "invocations": ["setText", "setText", "setText", "setValue", "setValue", "setSelectedItem", "clearSelection", "setSelectedItem", "setSelectedItem", "setSelected", "setSelected", "setFormula", "setFormula", "setSelected", "setSelectedItem", "setSelected", "setSelected", "setSelectedQuery", "getQueryName", "findDataFactoryForQuery", "indexOf", "setSelectionPath", "getRoot", "get", "setSelectedQuery", "setSelected", "equals", "getParameterAttribute", "setSelected", "equals", "getParameterAttribute", "setSelected", "isStrictValueCheck", "setSelectedItem", "getTextColumn", "setSelectedItem", "getKeyColumn", "parseInt", "getParameterAttribute", "setValue", "setSelected", "setSelected", "setSelected", "isAllowMultiSelection", "getValueType", "setSelectedItem", "getComponentType", "setText", "getName", "getParameterAttribute", "getParameterAttribute", "setText", "equals", "setFormula", "getParameterAttribute", "getParameterAttribute", "setText", "equals", "setFormula", "setSelected", "isMandatory", "setFormula", "getParameterAttribute", "setFormula", "getParameterAttribute", "getParameterAttribute", "setSelected", "equals", "setFormula", "getParameterAttribute", "setValue", "getDefaultValue", "getValueType", "setValue", "getValueType", "setFormula", "getParameterAttribute", "setSelectedKey", "getParameterAttribute", "getParameterAttribute", "getSize", "getElementAt", "isMultiSelection", "equals", "getInternalName", "setSelectedItem", "setSelectedItem"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}