{"test_class": {"identifier": "RepositoryTreeModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FileObject repositoryRoot, childFile1, childFile2, childFile3, childFile4;", "modifier": "", "type": "FileObject", "declarator": "repositoryRoot", "var_name": "repositoryRoot"}, {"original_string": "FileName childFileName1, childFileName2, childFileName3;", "modifier": "", "type": "FileName", "declarator": "childFileName1", "var_name": "childFileName1"}], "file": "designer/report-designer-extension-pentaho/src/test/java/org/pentaho/reporting/designer/extensions/pentaho/repository/model/RepositoryTreeModelTest.java"}, "test_case": {"identifier": "testGetChild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetChild() {\n    RepositoryTreeModel treeModel = new RepositoryTreeModel();\n    assertNotNull( treeModel );\n    assertNull( treeModel.getFileSystemRoot() );\n    FileObject[] childFiles = new FileObject[] { childFile1, childFile2, childFile3 };\n    try {\n      doReturn( childFiles ).when( repositoryRoot ).getChildren();\n    } catch ( FileSystemException e ) {\n      e.printStackTrace();\n    }\n    treeModel.setFileSystemRoot( repositoryRoot );\n    Object value = treeModel.getChild( repositoryRoot, 1 );\n    assertEquals( childFile2, value );\n\n    treeModel.setShowFoldersOnly( true );\n    try {\n      doReturn( FileType.FILE ).when( childFile1 ).getType();\n      doReturn( FileType.FILE ).when( childFile2 ).getType();\n      doReturn( FileType.FILE ).when( childFile3 ).getType();\n    } catch ( FileSystemException e ) {\n      e.printStackTrace();\n    }\n    value = treeModel.getChild( repositoryRoot, 0 );\n    assertEquals( childFile1, value );\n\n    treeModel.setShowHiddenFiles( false );\n    try {\n      doReturn( FileType.FOLDER ).when( childFile1 ).getType();\n      doReturn( FileType.FOLDER ).when( childFile2 ).getType();\n      doReturn( FileType.FOLDER ).when( childFile3 ).getType();\n      doReturn( true ).when( childFile1 ).isHidden();\n      doReturn( true ).when( childFile2 ).isHidden();\n      doReturn( true ).when( childFile3 ).isHidden();\n    } catch ( FileSystemException e ) {\n      e.printStackTrace();\n    }\n    value = treeModel.getChild( repositoryRoot, 2 );\n    assertEquals( childFile3, value );\n\n  }", "signature": "void testGetChild()", "full_signature": "@Test public void testGetChild()", "class_method_signature": "RepositoryTreeModelTest.testGetChild()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertNull", "getFileSystemRoot", "getChildren", "when", "doReturn", "printStackTrace", "setFileSystemRoot", "getChild", "assertEquals", "setShowFoldersOnly", "getType", "when", "doReturn", "getType", "when", "doReturn", "getType", "when", "doReturn", "printStackTrace", "getChild", "assertEquals", "setShowHiddenFiles", "getType", "when", "doReturn", "getType", "when", "doReturn", "getType", "when", "doReturn", "isHidden", "when", "doReturn", "isHidden", "when", "doReturn", "isHidden", "when", "doReturn", "printStackTrace", "getChild", "assertEquals"]}, "focal_class": {"identifier": "RepositoryTreeModel", "superclass": "", "interfaces": "implements TreeModel", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog( RepositoryTreeModel.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( RepositoryTreeModel.class )", "var_name": "logger"}, {"original_string": "private String[] filters;", "modifier": "private", "type": "String[]", "declarator": "filters", "var_name": "filters"}, {"original_string": "private EventListenerList listenerList;", "modifier": "private", "type": "EventListenerList", "declarator": "listenerList", "var_name": "listenerList"}, {"original_string": "private boolean showFoldersOnly;", "modifier": "private", "type": "boolean", "declarator": "showFoldersOnly", "var_name": "showFoldersOnly"}, {"original_string": "private boolean showHiddenFiles;", "modifier": "private", "type": "boolean", "declarator": "showHiddenFiles", "var_name": "showHiddenFiles"}, {"original_string": "private RepositoryTreeRoot root;", "modifier": "private", "type": "RepositoryTreeRoot", "declarator": "root", "var_name": "root"}, {"original_string": "private static final String[] EMPTY_FILTER = new String[0];", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_FILTER = new String[0]", "var_name": "EMPTY_FILTER"}], "methods": [{"identifier": "RepositoryTreeModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " RepositoryTreeModel()", "full_signature": "public  RepositoryTreeModel()", "class_method_signature": "RepositoryTreeModel.RepositoryTreeModel()", "testcase": false, "constructor": true}, {"identifier": "RepositoryTreeModel", "parameters": "( final FileObject repositoryRoot, final String[] filters, final boolean showFoldersOnly )", "modifiers": "public", "return": "", "signature": " RepositoryTreeModel( final FileObject repositoryRoot, final String[] filters, final boolean showFoldersOnly )", "full_signature": "public  RepositoryTreeModel( final FileObject repositoryRoot, final String[] filters, final boolean showFoldersOnly )", "class_method_signature": "RepositoryTreeModel.RepositoryTreeModel( final FileObject repositoryRoot, final String[] filters, final boolean showFoldersOnly )", "testcase": false, "constructor": true}, {"identifier": "setShowFoldersOnly", "parameters": "( final boolean showFoldersOnly )", "modifiers": "public", "return": "void", "signature": "void setShowFoldersOnly( final boolean showFoldersOnly )", "full_signature": "public void setShowFoldersOnly( final boolean showFoldersOnly )", "class_method_signature": "RepositoryTreeModel.setShowFoldersOnly( final boolean showFoldersOnly )", "testcase": false, "constructor": false}, {"identifier": "isShowFoldersOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShowFoldersOnly()", "full_signature": "public boolean isShowFoldersOnly()", "class_method_signature": "RepositoryTreeModel.isShowFoldersOnly()", "testcase": false, "constructor": false}, {"identifier": "isShowHiddenFiles", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShowHiddenFiles()", "full_signature": "public boolean isShowHiddenFiles()", "class_method_signature": "RepositoryTreeModel.isShowHiddenFiles()", "testcase": false, "constructor": false}, {"identifier": "setShowHiddenFiles", "parameters": "( final boolean showHiddenFiles )", "modifiers": "public", "return": "void", "signature": "void setShowHiddenFiles( final boolean showHiddenFiles )", "full_signature": "public void setShowHiddenFiles( final boolean showHiddenFiles )", "class_method_signature": "RepositoryTreeModel.setShowHiddenFiles( final boolean showHiddenFiles )", "testcase": false, "constructor": false}, {"identifier": "getFilters", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getFilters()", "full_signature": "public String[] getFilters()", "class_method_signature": "RepositoryTreeModel.getFilters()", "testcase": false, "constructor": false}, {"identifier": "setFilters", "parameters": "( final String[] filters )", "modifiers": "public", "return": "void", "signature": "void setFilters( final String[] filters )", "full_signature": "public void setFilters( final String[] filters )", "class_method_signature": "RepositoryTreeModel.setFilters( final String[] filters )", "testcase": false, "constructor": false}, {"identifier": "getFileSystemRoot", "parameters": "()", "modifiers": "public", "return": "FileObject", "signature": "FileObject getFileSystemRoot()", "full_signature": "public FileObject getFileSystemRoot()", "class_method_signature": "RepositoryTreeModel.getFileSystemRoot()", "testcase": false, "constructor": false}, {"identifier": "setFileSystemRoot", "parameters": "( final FileObject root )", "modifiers": "public", "return": "void", "signature": "void setFileSystemRoot( final FileObject root )", "full_signature": "public void setFileSystemRoot( final FileObject root )", "class_method_signature": "RepositoryTreeModel.setFileSystemRoot( final FileObject root )", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getRoot()", "full_signature": "public Object getRoot()", "class_method_signature": "RepositoryTreeModel.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "( Object parent, final int index )", "modifiers": "public", "return": "Object", "signature": "Object getChild( Object parent, final int index )", "full_signature": "public Object getChild( Object parent, final int index )", "class_method_signature": "RepositoryTreeModel.getChild( Object parent, final int index )", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "( Object parent )", "modifiers": "public", "return": "int", "signature": "int getChildCount( Object parent )", "full_signature": "public int getChildCount( Object parent )", "class_method_signature": "RepositoryTreeModel.getChildCount( Object parent )", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "( final Object node )", "modifiers": "public", "return": "boolean", "signature": "boolean isLeaf( final Object node )", "full_signature": "public boolean isLeaf( final Object node )", "class_method_signature": "RepositoryTreeModel.isLeaf( final Object node )", "testcase": false, "constructor": false}, {"identifier": "valueForPathChanged", "parameters": "( final TreePath path, final Object newValue )", "modifiers": "public", "return": "void", "signature": "void valueForPathChanged( final TreePath path, final Object newValue )", "full_signature": "public void valueForPathChanged( final TreePath path, final Object newValue )", "class_method_signature": "RepositoryTreeModel.valueForPathChanged( final TreePath path, final Object newValue )", "testcase": false, "constructor": false}, {"identifier": "getIndexOfChild", "parameters": "( Object parent, final Object childNode )", "modifiers": "public", "return": "int", "signature": "int getIndexOfChild( Object parent, final Object childNode )", "full_signature": "public int getIndexOfChild( Object parent, final Object childNode )", "class_method_signature": "RepositoryTreeModel.getIndexOfChild( Object parent, final Object childNode )", "testcase": false, "constructor": false}, {"identifier": "addTreeModelListener", "parameters": "( final TreeModelListener l )", "modifiers": "public", "return": "void", "signature": "void addTreeModelListener( final TreeModelListener l )", "full_signature": "public void addTreeModelListener( final TreeModelListener l )", "class_method_signature": "RepositoryTreeModel.addTreeModelListener( final TreeModelListener l )", "testcase": false, "constructor": false}, {"identifier": "removeTreeModelListener", "parameters": "( final TreeModelListener l )", "modifiers": "public", "return": "void", "signature": "void removeTreeModelListener( final TreeModelListener l )", "full_signature": "public void removeTreeModelListener( final TreeModelListener l )", "class_method_signature": "RepositoryTreeModel.removeTreeModelListener( final TreeModelListener l )", "testcase": false, "constructor": false}, {"identifier": "fireTreeDataChanged", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void fireTreeDataChanged()", "full_signature": "public void fireTreeDataChanged()", "class_method_signature": "RepositoryTreeModel.fireTreeDataChanged()", "testcase": false, "constructor": false}, {"identifier": "getTreePathForSelection", "parameters": "( FileObject selectedFolder, final String selection )", "modifiers": "public", "return": "TreePath", "signature": "TreePath getTreePathForSelection( FileObject selectedFolder, final String selection )", "full_signature": "public TreePath getTreePathForSelection( FileObject selectedFolder, final String selection )", "class_method_signature": "RepositoryTreeModel.getTreePathForSelection( FileObject selectedFolder, final String selection )", "testcase": false, "constructor": false}, {"identifier": "findNodeByName", "parameters": "( final FileObject node, final String name )", "modifiers": "public static", "return": "FileObject", "signature": "FileObject findNodeByName( final FileObject node, final String name )", "full_signature": "public static FileObject findNodeByName( final FileObject node, final String name )", "class_method_signature": "RepositoryTreeModel.findNodeByName( final FileObject node, final String name )", "testcase": false, "constructor": false}], "file": "designer/report-designer-extension-pentaho/src/main/java/org/pentaho/reporting/designer/extensions/pentaho/repository/model/RepositoryTreeModel.java"}, "focal_method": {"identifier": "getChild", "parameters": "( Object parent, final int index )", "modifiers": "public", "return": "Object", "body": "public Object getChild( Object parent, final int index ) {\n    if ( parent instanceof RepositoryTreeRoot ) {\n      final RepositoryTreeRoot root1 = (RepositoryTreeRoot) parent;\n      parent = root1.getRoot();\n      if ( parent == null ) {\n        return null;\n      }\n    }\n\n    try {\n      final FileObject parElement = (FileObject) parent;\n      final FileObject[] children = parElement.getChildren();\n      int count = 0;\n      for ( int i = 0; i < children.length; i++ ) {\n        final FileObject child = children[i];\n        if ( isShowFoldersOnly() && child.getType() != FileType.FOLDER ) {\n          continue;\n        }\n        if ( isShowHiddenFiles() == false && child.isHidden() ) {\n          continue;\n        }\n        if ( child.getType() != FileType.FOLDER\n            && PublishUtil.acceptFilter( filters, child.getName().getBaseName() ) == false ) {\n          continue;\n        }\n\n        if ( count == index ) {\n          return child;\n        }\n\n        count += 1;\n      }\n      return children[index];\n    } catch ( FileSystemException fse ) {\n      logger.debug( \"Failed\", fse );\n      return null;\n    }\n  }", "signature": "Object getChild( Object parent, final int index )", "full_signature": "public Object getChild( Object parent, final int index )", "class_method_signature": "RepositoryTreeModel.getChild( Object parent, final int index )", "testcase": false, "constructor": false, "invocations": ["getRoot", "getChildren", "isShowFoldersOnly", "getType", "isShowHiddenFiles", "isHidden", "getType", "acceptFilter", "getBaseName", "getName", "debug"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}