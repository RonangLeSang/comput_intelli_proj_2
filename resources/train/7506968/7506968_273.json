{"test_class": {"identifier": "AreaReadHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String URI = \"test_uri\";", "modifier": "private static final", "type": "String", "declarator": "URI = \"test_uri\"", "var_name": "URI"}, {"original_string": "private AreaReadHandler handler;", "modifier": "private", "type": "AreaReadHandler", "declarator": "handler", "var_name": "handler"}], "file": "engine/core/src/test/java/org/pentaho/reporting/engine/classic/core/imagemap/parser/AreaReadHandlerTest.java"}, "test_case": {"identifier": "testCircleParsingException", "parameters": "()", "modifiers": "@Test( expected = ParseException.class ) public", "return": "void", "body": "@Test( expected = ParseException.class )\n  public void testCircleParsingException() throws Exception {\n\n    Attributes attrs = mock( Attributes.class );\n\n    doReturn( \"circle\" ).when( attrs ).getValue( URI, \"shape\" );\n    doReturn( \"5,30\" ).when( attrs ).getValue( URI, \"coords\" );\n\n    handler.startParsing( attrs );\n  }", "signature": "void testCircleParsingException()", "full_signature": "@Test( expected = ParseException.class ) public void testCircleParsingException()", "class_method_signature": "AreaReadHandlerTest.testCircleParsingException()", "testcase": true, "constructor": false, "invocations": ["mock", "getValue", "when", "doReturn", "getValue", "when", "doReturn", "startParsing"]}, "focal_class": {"identifier": "AreaReadHandler", "superclass": "extends AbstractXmlReadHandler", "interfaces": "", "fields": [{"original_string": "private AbstractImageMapEntry mapEntry;", "modifier": "private", "type": "AbstractImageMapEntry", "declarator": "mapEntry", "var_name": "mapEntry"}, {"original_string": "private static final float[] EMPTY_FLOATS = new float[0];", "modifier": "private static final", "type": "float[]", "declarator": "EMPTY_FLOATS = new float[0]", "var_name": "EMPTY_FLOATS"}], "methods": [{"identifier": "AreaReadHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " AreaReadHandler()", "full_signature": "public  AreaReadHandler()", "class_method_signature": "AreaReadHandler.AreaReadHandler()", "testcase": false, "constructor": true}, {"identifier": "startParsing", "parameters": "( final Attributes attrs )", "modifiers": "protected", "return": "void", "signature": "void startParsing( final Attributes attrs )", "full_signature": "protected void startParsing( final Attributes attrs )", "class_method_signature": "AreaReadHandler.startParsing( final Attributes attrs )", "testcase": false, "constructor": false}, {"identifier": "createMapEntry", "parameters": "( final String type, final float[] coordinates )", "modifiers": "private", "return": "AbstractImageMapEntry", "signature": "AbstractImageMapEntry createMapEntry( final String type, final float[] coordinates )", "full_signature": "private AbstractImageMapEntry createMapEntry( final String type, final float[] coordinates )", "class_method_signature": "AreaReadHandler.createMapEntry( final String type, final float[] coordinates )", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getObject()", "full_signature": "public Object getObject()", "class_method_signature": "AreaReadHandler.getObject()", "testcase": false, "constructor": false}, {"identifier": "parseFloatArray", "parameters": "( final String s )", "modifiers": "private", "return": "float[]", "signature": "float[] parseFloatArray( final String s )", "full_signature": "private float[] parseFloatArray( final String s )", "class_method_signature": "AreaReadHandler.parseFloatArray( final String s )", "testcase": false, "constructor": false}], "file": "engine/core/src/main/java/org/pentaho/reporting/engine/classic/core/imagemap/parser/AreaReadHandler.java"}, "focal_method": {"identifier": "startParsing", "parameters": "( final Attributes attrs )", "modifiers": "protected", "return": "void", "body": "protected void startParsing( final Attributes attrs ) throws SAXException {\n    super.startParsing( attrs );\n    final String shape = attrs.getValue( getUri(), \"shape\" );\n    final String coordinates = attrs.getValue( getUri(), \"coords\" );\n    final float[] coords = parseFloatArray( coordinates );\n    mapEntry = createMapEntry( shape, coords );\n\n    final int length = attrs.getLength();\n    for ( int i = 0; i < length; i++ ) {\n      if ( \"xmlns\".equals( attrs.getQName( i ) ) || attrs.getQName( i ).startsWith( \"xmlns:\" ) ) {\n        // workaround for buggy parsers\n        continue;\n      }\n      final String name = attrs.getLocalName( i );\n      if ( name.indexOf( ':' ) > -1 ) {\n        // attribute with ':' are not valid and indicate a namespace definition or so\n        continue;\n      }\n      final String namespace = attrs.getURI( i );\n      final String attributeValue = attrs.getValue( i );\n\n      if ( isSameNamespace( namespace ) ) {\n        if ( \"shape\".equals( name ) ) {\n          continue;\n        }\n        if ( \"coords\".equals( name ) ) {\n          continue;\n        }\n      }\n      mapEntry.setAttribute( namespace, name, attributeValue );\n    }\n  }", "signature": "void startParsing( final Attributes attrs )", "full_signature": "protected void startParsing( final Attributes attrs )", "class_method_signature": "AreaReadHandler.startParsing( final Attributes attrs )", "testcase": false, "constructor": false, "invocations": ["startParsing", "getValue", "getUri", "getValue", "getUri", "parseFloatArray", "createMapEntry", "getLength", "equals", "getQName", "startsWith", "getQName", "getLocalName", "indexOf", "getURI", "getValue", "isSameNamespace", "equals", "equals", "setAttribute"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}