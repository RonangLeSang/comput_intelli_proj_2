{"test_class": {"identifier": "ListParameterComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PARAM_NAME = \"param_name\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_NAME = \"param_name\"", "var_name": "PARAM_NAME"}, {"original_string": "private ListParameterComponent comp;", "modifier": "private", "type": "ListParameterComponent", "declarator": "comp", "var_name": "comp"}, {"original_string": "private ParameterUpdateContext updateContext;", "modifier": "private", "type": "ParameterUpdateContext", "declarator": "updateContext", "var_name": "updateContext"}, {"original_string": "private ListParameter listParameter;", "modifier": "private", "type": "ListParameter", "declarator": "listParameter", "var_name": "listParameter"}, {"original_string": "private ParameterContext parameterContext;", "modifier": "private", "type": "ParameterContext", "declarator": "parameterContext", "var_name": "parameterContext"}], "file": "engine/core/src/test/java/org/pentaho/reporting/engine/classic/core/modules/gui/base/parameters/ListParameterComponentTest.java"}, "test_case": {"identifier": "testInitializeMultiple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInitializeMultiple() throws Exception {\n    ParameterValues paramValues = mock( ParameterValues.class );\n    Calendar cal = Calendar.getInstance();\n    cal.set( 2015, 5, 10 );\n    Set<Object> keys = new HashSet<Object>();\n    keys.add( \"key_0\" );\n    keys.add( new BigDecimal( 1.0 ) );\n    keys.add( cal.getTime() );\n    keys.add( \"key_3\" );\n    doReturn( keys ).when( updateContext ).getParameterValue( PARAM_NAME );\n    doReturn( paramValues ).when( listParameter ).getValues( parameterContext );\n    doReturn( 3 ).when( paramValues ).getRowCount();\n    doReturn( \"key_0\" ).when( paramValues ).getKeyValue( 0 );\n    doReturn( new BigDecimal( 1.1 ) ).when( paramValues ).getKeyValue( 1 );\n    cal.add( Calendar.DAY_OF_MONTH, 2 );\n    doReturn( cal.getTime() ).when( paramValues ).getKeyValue( 2 );\n    doReturn( \"val_0\" ).when( paramValues ).getTextValue( 0 );\n    doReturn( \"val_1\" ).when( paramValues ).getTextValue( 1 );\n    doReturn( \"val_2\" ).when( paramValues ).getTextValue( 2 );\n\n    testCreateMultipleListComponent();\n    comp.initialize();\n\n    JList list = findView( comp );\n    assertThat( list, is( notNullValue() ) );\n    assertThat( list.getModel(), is( instanceOf( KeyedComboBoxModel.class ) ) );\n    assertThat( list.getSelectedValuesList().size(), is( equalTo( 1 ) ) );\n    assertThat( (String) list.getSelectedValue(), is( equalTo( \"val_0\" ) ) );\n\n    ListSelectionEvent evt = mock( ListSelectionEvent.class );\n    doReturn( true ).when( evt ).getValueIsAdjusting();\n    ListSelectionListener listener = list.getListSelectionListeners()[0];\n    listener.valueChanged( evt );\n    verify( updateContext, never() ).setParameterValue( anyString(), anyObject() );\n\n    doReturn( false ).when( evt ).getValueIsAdjusting();\n\n    listener.valueChanged( evt );\n    verify( updateContext ).setParameterValue( PARAM_NAME, new String[] { \"key_0\" } );\n  }", "signature": "void testInitializeMultiple()", "full_signature": "@Test public void testInitializeMultiple()", "class_method_signature": "ListParameterComponentTest.testInitializeMultiple()", "testcase": true, "constructor": false, "invocations": ["mock", "getInstance", "set", "add", "add", "add", "getTime", "add", "getParameterValue", "when", "doReturn", "getValues", "when", "doReturn", "getRowCount", "when", "doReturn", "getKeyValue", "when", "doReturn", "getKeyValue", "when", "doReturn", "add", "getKeyValue", "when", "doReturn", "getTime", "getTextValue", "when", "doReturn", "getTextValue", "when", "doReturn", "getTextValue", "when", "doReturn", "testCreateMultipleListComponent", "initialize", "findView", "assertThat", "is", "notNullValue", "assertThat", "getModel", "is", "instanceOf", "assertThat", "size", "getSelectedValuesList", "is", "equalTo", "assertThat", "getSelectedValue", "is", "equalTo", "mock", "getValueIsAdjusting", "when", "doReturn", "getListSelectionListeners", "valueChanged", "setParameterValue", "verify", "never", "anyString", "anyObject", "getValueIsAdjusting", "when", "doReturn", "valueChanged", "setParameterValue", "verify"]}, "focal_class": {"identifier": "ListParameterComponent", "superclass": "extends MinimalScrollPane", "interfaces": "implements ParameterComponent", "fields": [{"original_string": "private ListParameter listParameter;", "modifier": "private", "type": "ListParameter", "declarator": "listParameter", "var_name": "listParameter"}, {"original_string": "private ParameterContext parameterContext;", "modifier": "private", "type": "ParameterContext", "declarator": "parameterContext", "var_name": "parameterContext"}, {"original_string": "private ParameterUpdateContext updateContext;", "modifier": "private", "type": "ParameterUpdateContext", "declarator": "updateContext", "var_name": "updateContext"}, {"original_string": "private JList list;", "modifier": "private", "type": "JList", "declarator": "list", "var_name": "list"}, {"original_string": "private boolean adjustingToUserInput;", "modifier": "private", "type": "boolean", "declarator": "adjustingToUserInput", "var_name": "adjustingToUserInput"}, {"original_string": "private boolean adjustingToExternalInput;", "modifier": "private", "type": "boolean", "declarator": "adjustingToExternalInput", "var_name": "adjustingToExternalInput"}, {"original_string": "private ArrayList<Integer> selectionCache;", "modifier": "private", "type": "ArrayList<Integer>", "declarator": "selectionCache", "var_name": "selectionCache"}, {"original_string": "private ListUpdateHandler changeListener;", "modifier": "private", "type": "ListUpdateHandler", "declarator": "changeListener", "var_name": "changeListener"}], "methods": [{"identifier": "ListParameterComponent", "parameters": "( final ListParameter listParameter, final ParameterUpdateContext updateContext,\n      final ParameterContext parameterContext )", "modifiers": "public", "return": "", "signature": " ListParameterComponent( final ListParameter listParameter, final ParameterUpdateContext updateContext,\n      final ParameterContext parameterContext )", "full_signature": "public  ListParameterComponent( final ListParameter listParameter, final ParameterUpdateContext updateContext,\n      final ParameterContext parameterContext )", "class_method_signature": "ListParameterComponent.ListParameterComponent( final ListParameter listParameter, final ParameterUpdateContext updateContext,\n      final ParameterContext parameterContext )", "testcase": false, "constructor": true}, {"identifier": "getUIComponent", "parameters": "()", "modifiers": "public", "return": "JComponent", "signature": "JComponent getUIComponent()", "full_signature": "public JComponent getUIComponent()", "class_method_signature": "ListParameterComponent.getUIComponent()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialize()", "full_signature": "public void initialize()", "class_method_signature": "ListParameterComponent.initialize()", "testcase": false, "constructor": false}, {"identifier": "isSafeMatch", "parameters": "( final Object key, final Collection values )", "modifiers": "private", "return": "boolean", "signature": "boolean isSafeMatch( final Object key, final Collection values )", "full_signature": "private boolean isSafeMatch( final Object key, final Collection values )", "class_method_signature": "ListParameterComponent.isSafeMatch( final Object key, final Collection values )", "testcase": false, "constructor": false}, {"identifier": "getList", "parameters": "()", "modifiers": "protected", "return": "JList", "signature": "JList getList()", "full_signature": "protected JList getList()", "class_method_signature": "ListParameterComponent.getList()", "testcase": false, "constructor": false}, {"identifier": "getNormalizedSet", "parameters": "( final Object o )", "modifiers": "private", "return": "HashSet", "signature": "HashSet getNormalizedSet( final Object o )", "full_signature": "private HashSet getNormalizedSet( final Object o )", "class_method_signature": "ListParameterComponent.getNormalizedSet( final Object o )", "testcase": false, "constructor": false}], "file": "engine/core/src/main/java/org/pentaho/reporting/engine/classic/core/modules/gui/base/parameters/ListParameterComponent.java"}, "focal_method": {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void initialize() throws ReportDataFactoryException {\n    adjustingToExternalInput = true;\n    try {\n      final KeyedComboBoxModel keyedComboBoxModel =\n          DefaultParameterComponentFactory.createModel( listParameter, parameterContext );\n      list.setModel( keyedComboBoxModel );\n\n      final ListSelectionModel selectionModel = list.getSelectionModel();\n      final Object value = updateContext.getParameterValue( listParameter.getName() );\n      final HashSet keylist = getNormalizedSet( value );\n      selectionModel.setValueIsAdjusting( true );\n      list.clearSelection();\n\n      final int size = keyedComboBoxModel.getSize();\n      for ( int i = 0; i < size; i++ ) {\n        final Object key = keyedComboBoxModel.getKeyAt( i );\n        if ( isSafeMatch( key, keylist ) ) {\n          selectionModel.addSelectionInterval( i, i );\n        }\n      }\n      selectionModel.setValueIsAdjusting( false );\n    } finally {\n      adjustingToExternalInput = false;\n    }\n  }", "signature": "void initialize()", "full_signature": "public void initialize()", "class_method_signature": "ListParameterComponent.initialize()", "testcase": false, "constructor": false, "invocations": ["createModel", "setModel", "getSelectionModel", "getParameterValue", "getName", "getNormalizedSet", "setValueIsAdjusting", "clearSelection", "getSize", "getKeyAt", "isSafeMatch", "addSelectionInterval", "setValueIsAdjusting"]}, "repository": {"repo_id": 7506968, "url": "https://github.com/pentaho/pentaho-reporting", "stars": 189, "created": "1/8/2013 6:41:44 PM +00:00", "updates": "2020-01-20T06:07:55+00:00", "fork": "False", "license": "licensed"}}