{"test_class": {"identifier": "ProjectControllerTest", "superclass": "extends AbstractDocumentrTest", "interfaces": "", "fields": [{"original_string": "private static final String PROJECT = \"project\";", "modifier": "private static final", "type": "String", "declarator": "PROJECT = \"project\"", "var_name": "PROJECT"}, {"original_string": "private static final User USER = new User(\"currentUser\", \"pw\", \"admin@example.com\", false);", "modifier": "private static final", "type": "User", "declarator": "USER = new User(\"currentUser\", \"pw\", \"admin@example.com\", false)", "var_name": "USER"}, {"original_string": "@Mock\n\tprivate GlobalRepositoryManager repoManager;", "modifier": "@Mock\n\tprivate", "type": "GlobalRepositoryManager", "declarator": "repoManager", "var_name": "repoManager"}, {"original_string": "@Mock\n\tprivate UserStore userStore;", "modifier": "@Mock\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}, {"original_string": "@Mock\n\tprivate Authentication authentication;", "modifier": "@Mock\n\tprivate", "type": "Authentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "@Mock\n\tprivate Model model;", "modifier": "@Mock\n\tprivate", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "@InjectMocks\n\tprivate ProjectController projectController;", "modifier": "@InjectMocks\n\tprivate", "type": "ProjectController", "declarator": "projectController", "var_name": "projectController"}], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/web/project/ProjectControllerTest.java"}, "test_case": {"identifier": "getProject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getProject() {\n\t\tString view = projectController.getProject(PROJECT, model);\n\t\tassertEquals(\"/project/view\", view); //$NON-NLS-1$\n\n\t\tverify(model).addAttribute(\"name\", PROJECT); //$NON-NLS-1$\n\t}", "signature": "void getProject()", "full_signature": "@Test public void getProject()", "class_method_signature": "ProjectControllerTest.getProject()", "testcase": true, "constructor": false, "invocations": ["getProject", "assertEquals", "addAttribute", "verify"]}, "focal_class": {"identifier": "ProjectController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IGlobalRepositoryManager globalRepositoryManager;", "modifier": "@Autowired\n\tprivate", "type": "IGlobalRepositoryManager", "declarator": "globalRepositoryManager", "var_name": "globalRepositoryManager"}, {"original_string": "@Autowired\n\tprivate UserStore userStore;", "modifier": "@Autowired\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}], "methods": [{"identifier": "getProject", "parameters": "(@PathVariable String name, Model model)", "modifiers": "@RequestMapping(value=\"/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, VIEW)\") public", "return": "String", "signature": "String getProject(@PathVariable String name, Model model)", "full_signature": "@RequestMapping(value=\"/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, VIEW)\") public String getProject(@PathVariable String name, Model model)", "class_method_signature": "ProjectController.getProject(@PathVariable String name, Model model)", "testcase": false, "constructor": false}, {"identifier": "createProject", "parameters": "(Model model)", "modifiers": "@RequestMapping(value=\"/create\", method=RequestMethod.GET) @PreAuthorize(\"hasApplicationPermission(EDIT_PROJECT)\") public", "return": "String", "signature": "String createProject(Model model)", "full_signature": "@RequestMapping(value=\"/create\", method=RequestMethod.GET) @PreAuthorize(\"hasApplicationPermission(EDIT_PROJECT)\") public String createProject(Model model)", "class_method_signature": "ProjectController.createProject(Model model)", "testcase": false, "constructor": false}, {"identifier": "editProject", "parameters": "(@PathVariable String name, Model model)", "modifiers": "@RequestMapping(value=\"/edit/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, EDIT_PROJECT)\") public", "return": "String", "signature": "String editProject(@PathVariable String name, Model model)", "full_signature": "@RequestMapping(value=\"/edit/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, EDIT_PROJECT)\") public String editProject(@PathVariable String name, Model model)", "class_method_signature": "ProjectController.editProject(@PathVariable String name, Model model)", "testcase": false, "constructor": false}, {"identifier": "saveProject", "parameters": "(@ModelAttribute @Valid ProjectForm form, BindingResult bindingResult,\n\t\t\tAuthentication authentication)", "modifiers": "@RequestMapping(value=\"/save\", method=RequestMethod.POST) @PreAuthorize(\"projectExists(#form.name) ? \" + \"hasProjectPermission(#form.name, EDIT_PROJECT) : \" + \"hasApplicationPermission(EDIT_PROJECT)\") public", "return": "String", "signature": "String saveProject(@ModelAttribute @Valid ProjectForm form, BindingResult bindingResult,\n\t\t\tAuthentication authentication)", "full_signature": "@RequestMapping(value=\"/save\", method=RequestMethod.POST) @PreAuthorize(\"projectExists(#form.name) ? \" + \"hasProjectPermission(#form.name, EDIT_PROJECT) : \" + \"hasApplicationPermission(EDIT_PROJECT)\") public String saveProject(@ModelAttribute @Valid ProjectForm form, BindingResult bindingResult,\n\t\t\tAuthentication authentication)", "class_method_signature": "ProjectController.saveProject(@ModelAttribute @Valid ProjectForm form, BindingResult bindingResult,\n\t\t\tAuthentication authentication)", "testcase": false, "constructor": false}, {"identifier": "importSampleContents", "parameters": "(@PathVariable String name)", "modifiers": "@RequestMapping(value=\"/importSample/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/json\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, ADMIN)\") @ResponseBody public", "return": "Map<String, Object>", "signature": "Map<String, Object> importSampleContents(@PathVariable String name)", "full_signature": "@RequestMapping(value=\"/importSample/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/json\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, ADMIN)\") @ResponseBody public Map<String, Object> importSampleContents(@PathVariable String name)", "class_method_signature": "ProjectController.importSampleContents(@PathVariable String name)", "testcase": false, "constructor": false}, {"identifier": "deleteProject", "parameters": "(@PathVariable String name, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/delete/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasApplicationPermission(EDIT_PROJECT)\") public", "return": "String", "signature": "String deleteProject(@PathVariable String name, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/delete/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasApplicationPermission(EDIT_PROJECT)\") public String deleteProject(@PathVariable String name, Authentication authentication)", "class_method_signature": "ProjectController.deleteProject(@PathVariable String name, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "createProjectForm", "parameters": "(@RequestParam(required=false) String name,\n\t\t\t@RequestParam(required=false) String originalName)", "modifiers": "@ModelAttribute public", "return": "ProjectForm", "signature": "ProjectForm createProjectForm(@RequestParam(required=false) String name,\n\t\t\t@RequestParam(required=false) String originalName)", "full_signature": "@ModelAttribute public ProjectForm createProjectForm(@RequestParam(required=false) String name,\n\t\t\t@RequestParam(required=false) String originalName)", "class_method_signature": "ProjectController.createProjectForm(@RequestParam(required=false) String name,\n\t\t\t@RequestParam(required=false) String originalName)", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/web/project/ProjectController.java"}, "focal_method": {"identifier": "getProject", "parameters": "(@PathVariable String name, Model model)", "modifiers": "@RequestMapping(value=\"/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, VIEW)\") public", "return": "String", "body": "@RequestMapping(value=\"/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET)\n\t@PreAuthorize(\"hasProjectPermission(#name, VIEW)\")\n\tpublic String getProject(@PathVariable String name, Model model) {\n\t\tmodel.addAttribute(\"name\", name); //$NON-NLS-1$\n\t\tmodel.addAttribute(\"originalName\", name); //$NON-NLS-1$\n\t\treturn \"/project/view\"; //$NON-NLS-1$\n\t}", "signature": "String getProject(@PathVariable String name, Model model)", "full_signature": "@RequestMapping(value=\"/{name:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasProjectPermission(#name, VIEW)\") public String getProject(@PathVariable String name, Model model)", "class_method_signature": "ProjectController.getProject(@PathVariable String name, Model model)", "testcase": false, "constructor": false, "invocations": ["addAttribute", "addAttribute"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}