{"test_class": {"identifier": "AbstractMarkdownMacroRunnableTest", "superclass": "extends AbstractDocumentrTest", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate IMacroContext context;", "modifier": "@Mock\n\tprivate", "type": "IMacroContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n\tprivate HtmlSerializerContext htmlSerializerContext;", "modifier": "@Mock\n\tprivate", "type": "HtmlSerializerContext", "declarator": "htmlSerializerContext", "var_name": "htmlSerializerContext"}], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/markdown/macro/impl/AbstractMarkdownMacroRunnableTest.java"}, "test_case": {"identifier": "getHtml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getHtml() {\n\t\twhen(htmlSerializerContext.markdownToHtml(\"markdown\")).thenReturn(\"html\"); //$NON-NLS-1$ //$NON-NLS-2$\n\n\t\tAbstractMarkdownMacroRunnable runnable = new AbstractMarkdownMacroRunnable() {\n\t\t\t@Override\n\t\t\tString getMarkdown(IMacroContext macroContext) {\n\t\t\t\treturn \"markdown\"; //$NON-NLS-1$\n\t\t\t}\n\t\t};\n\n\t\tassertEquals(\"html\", runnable.getHtml(context)); //$NON-NLS-1$\n\t}", "signature": "void getHtml()", "full_signature": "@Test public void getHtml()", "class_method_signature": "AbstractMarkdownMacroRunnableTest.getHtml()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "markdownToHtml", "assertEquals", "getHtml"]}, "focal_class": {"identifier": "AbstractMarkdownMacroRunnable", "superclass": "", "interfaces": "implements IMacroRunnable", "fields": [], "methods": [{"identifier": "getHtml", "parameters": "(IMacroContext macroContext)", "modifiers": "@Override public final", "return": "String", "signature": "String getHtml(IMacroContext macroContext)", "full_signature": "@Override public final String getHtml(IMacroContext macroContext)", "class_method_signature": "AbstractMarkdownMacroRunnable.getHtml(IMacroContext macroContext)", "testcase": false, "constructor": false}, {"identifier": "getMarkdown", "parameters": "(IMacroContext macroContext)", "modifiers": "abstract", "return": "String", "signature": "String getMarkdown(IMacroContext macroContext)", "full_signature": "abstract String getMarkdown(IMacroContext macroContext)", "class_method_signature": "AbstractMarkdownMacroRunnable.getMarkdown(IMacroContext macroContext)", "testcase": false, "constructor": false}, {"identifier": "cleanupHtml", "parameters": "(String html)", "modifiers": "@Override public final", "return": "String", "signature": "String cleanupHtml(String html)", "full_signature": "@Override public final String cleanupHtml(String html)", "class_method_signature": "AbstractMarkdownMacroRunnable.cleanupHtml(String html)", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/markdown/macro/impl/AbstractMarkdownMacroRunnable.java"}, "focal_method": {"identifier": "getHtml", "parameters": "(IMacroContext macroContext)", "modifiers": "@Override public final", "return": "String", "body": "@Override\n\tpublic final String getHtml(IMacroContext macroContext) {\n\t\tString markdown = getMarkdown(macroContext);\n\t\tif (StringUtils.isNotBlank(markdown)) {\n\t\t\tHtmlSerializerContext context = macroContext.getHtmlSerializerContext();\n\t\t\treturn context.markdownToHtml(markdown);\n\t\t}\n\t\treturn null;\n\t}", "signature": "String getHtml(IMacroContext macroContext)", "full_signature": "@Override public final String getHtml(IMacroContext macroContext)", "class_method_signature": "AbstractMarkdownMacroRunnable.getHtml(IMacroContext macroContext)", "testcase": false, "constructor": false, "invocations": ["getMarkdown", "isNotBlank", "getHtmlSerializerContext", "markdownToHtml"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}