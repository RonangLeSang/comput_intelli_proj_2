{"test_class": {"identifier": "SubscriptionStoreTest", "superclass": "extends AbstractDocumentrTest", "interfaces": "", "fields": [{"original_string": "private static final String PROJECT = \"project\";", "modifier": "private static final", "type": "String", "declarator": "PROJECT = \"project\"", "var_name": "PROJECT"}, {"original_string": "private static final String BRANCH = \"branch\";", "modifier": "private static final", "type": "String", "declarator": "BRANCH = \"branch\"", "var_name": "BRANCH"}, {"original_string": "private static final String PAGE = \"page\";", "modifier": "private static final", "type": "String", "declarator": "PAGE = \"page\"", "var_name": "PAGE"}, {"original_string": "private static final String USER = \"user\";", "modifier": "private static final", "type": "String", "declarator": "USER = \"user\"", "var_name": "USER"}, {"original_string": "private static final String USER_2 = \"user2\";", "modifier": "private static final", "type": "String", "declarator": "USER_2 = \"user2\"", "var_name": "USER_2"}, {"original_string": "private static final String EMAIL = \"email\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL = \"email\"", "var_name": "EMAIL"}, {"original_string": "private static final String EMAIL_2 = \"email2\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL_2 = \"email2\"", "var_name": "EMAIL_2"}, {"original_string": "@Rule\n\tpublic TemporaryFolder tempDir = new TemporaryFolder();", "modifier": "@Rule\n\tpublic", "type": "TemporaryFolder", "declarator": "tempDir = new TemporaryFolder()", "var_name": "tempDir"}, {"original_string": "@Mock\n\tprivate UserStore userStore;", "modifier": "@Mock\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}, {"original_string": "@Mock\n\tprivate EventBus eventBus;", "modifier": "@Mock\n\tprivate", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}, {"original_string": "@Mock\n\tprivate User user;", "modifier": "@Mock\n\tprivate", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n\tprivate User user2;", "modifier": "@Mock\n\tprivate", "type": "User", "declarator": "user2", "var_name": "user2"}, {"original_string": "@Mock\n\tprivate Settings settings;", "modifier": "@Mock\n\tprivate", "type": "Settings", "declarator": "settings", "var_name": "settings"}, {"original_string": "@Mock\n\t@SuppressWarnings(\"unused\")\n\tprivate LockManager lockManager;", "modifier": "@Mock\n\t@SuppressWarnings(\"unused\")\n\tprivate", "type": "LockManager", "declarator": "lockManager", "var_name": "lockManager"}, {"original_string": "@InjectMocks\n\tprivate SubscriptionStore subscriptionStore;", "modifier": "@InjectMocks\n\tprivate", "type": "SubscriptionStore", "declarator": "subscriptionStore", "var_name": "subscriptionStore"}, {"original_string": "@InjectMocks\n\tprivate ProjectRepositoryManagerFactory repoManagerFactory;", "modifier": "@InjectMocks\n\tprivate", "type": "ProjectRepositoryManagerFactory", "declarator": "repoManagerFactory", "var_name": "repoManagerFactory"}, {"original_string": "private GlobalRepositoryManager globalRepoManager;", "modifier": "private", "type": "GlobalRepositoryManager", "declarator": "globalRepoManager", "var_name": "globalRepoManager"}], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/subscription/SubscriptionStoreTest.java"}, "test_case": {"identifier": "renameProjectBranch", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n\t@Ignore\n\tpublic void renameProjectBranch() {\n\t\t// TODO: implement test\n\t}", "signature": "void renameProjectBranch()", "full_signature": "@Test @Ignore public void renameProjectBranch()", "class_method_signature": "SubscriptionStoreTest.renameProjectBranch()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "SubscriptionStore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String REPOSITORY_NAME = \"_subscriptions\";", "modifier": "private static final", "type": "String", "declarator": "REPOSITORY_NAME = \"_subscriptions\"", "var_name": "REPOSITORY_NAME"}, {"original_string": "private static final String SUBSCRIPTIONS_SUFFIX = \".subscriptions\";", "modifier": "private static final", "type": "String", "declarator": "SUBSCRIPTIONS_SUFFIX = \".subscriptions\"", "var_name": "SUBSCRIPTIONS_SUFFIX"}, {"original_string": "@Autowired\n\tprivate IGlobalRepositoryManager globalRepositoryManager;", "modifier": "@Autowired\n\tprivate", "type": "IGlobalRepositoryManager", "declarator": "globalRepositoryManager", "var_name": "globalRepositoryManager"}, {"original_string": "@Autowired\n\tprivate UserStore userStore;", "modifier": "@Autowired\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}], "methods": [{"identifier": "subscribe", "parameters": "(String projectName, String branchName, String path, User user)", "modifiers": "public", "return": "void", "signature": "void subscribe(String projectName, String branchName, String path, User user)", "full_signature": "public void subscribe(String projectName, String branchName, String path, User user)", "class_method_signature": "SubscriptionStore.subscribe(String projectName, String branchName, String path, User user)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(String projectName, String branchName, String path, User user)", "modifiers": "public", "return": "void", "signature": "void unsubscribe(String projectName, String branchName, String path, User user)", "full_signature": "public void unsubscribe(String projectName, String branchName, String path, User user)", "class_method_signature": "SubscriptionStore.unsubscribe(String projectName, String branchName, String path, User user)", "testcase": false, "constructor": false}, {"identifier": "getSubscriptions", "parameters": "(User user, ILockedRepository repo)", "modifiers": "private", "return": "Set<Page>", "signature": "Set<Page> getSubscriptions(User user, ILockedRepository repo)", "full_signature": "private Set<Page> getSubscriptions(User user, ILockedRepository repo)", "class_method_signature": "SubscriptionStore.getSubscriptions(User user, ILockedRepository repo)", "testcase": false, "constructor": false}, {"identifier": "saveSubscriptions", "parameters": "(User user, Set<Page> pages, ILockedRepository repo, boolean commit)", "modifiers": "private", "return": "void", "signature": "void saveSubscriptions(User user, Set<Page> pages, ILockedRepository repo, boolean commit)", "full_signature": "private void saveSubscriptions(User user, Set<Page> pages, ILockedRepository repo, boolean commit)", "class_method_signature": "SubscriptionStore.saveSubscriptions(User user, Set<Page> pages, ILockedRepository repo, boolean commit)", "testcase": false, "constructor": false}, {"identifier": "isSubscribed", "parameters": "(String projectName, String branchName, String path, User user)", "modifiers": "public", "return": "boolean", "signature": "boolean isSubscribed(String projectName, String branchName, String path, User user)", "full_signature": "public boolean isSubscribed(String projectName, String branchName, String path, User user)", "class_method_signature": "SubscriptionStore.isSubscribed(String projectName, String branchName, String path, User user)", "testcase": false, "constructor": false}, {"identifier": "isSubscribed", "parameters": "(String projectName, String branchName, String path, User user, ILockedRepository repo)", "modifiers": "private", "return": "boolean", "signature": "boolean isSubscribed(String projectName, String branchName, String path, User user, ILockedRepository repo)", "full_signature": "private boolean isSubscribed(String projectName, String branchName, String path, User user, ILockedRepository repo)", "class_method_signature": "SubscriptionStore.isSubscribed(String projectName, String branchName, String path, User user, ILockedRepository repo)", "testcase": false, "constructor": false}, {"identifier": "getSubscriberEmails", "parameters": "(String projectName, String branchName, String path)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSubscriberEmails(String projectName, String branchName, String path)", "full_signature": "public Set<String> getSubscriberEmails(String projectName, String branchName, String path)", "class_method_signature": "SubscriptionStore.getSubscriberEmails(String projectName, String branchName, String path)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateRepository", "parameters": "(User user)", "modifiers": "private", "return": "ILockedRepository", "signature": "ILockedRepository getOrCreateRepository(User user)", "full_signature": "private ILockedRepository getOrCreateRepository(User user)", "class_method_signature": "SubscriptionStore.getOrCreateRepository(User user)", "testcase": false, "constructor": false}, {"identifier": "renameProject", "parameters": "(ProjectRenamedEvent event)", "modifiers": "@Subscribe public", "return": "void", "signature": "void renameProject(ProjectRenamedEvent event)", "full_signature": "@Subscribe public void renameProject(ProjectRenamedEvent event)", "class_method_signature": "SubscriptionStore.renameProject(ProjectRenamedEvent event)", "testcase": false, "constructor": false}, {"identifier": "transformAllSubscriptions", "parameters": "(Function<Page, Page> function, String commitMessage, User currentUser)", "modifiers": "private", "return": "void", "signature": "void transformAllSubscriptions(Function<Page, Page> function, String commitMessage, User currentUser)", "full_signature": "private void transformAllSubscriptions(Function<Page, Page> function, String commitMessage, User currentUser)", "class_method_signature": "SubscriptionStore.transformAllSubscriptions(Function<Page, Page> function, String commitMessage, User currentUser)", "testcase": false, "constructor": false}, {"identifier": "deleteProject", "parameters": "(ProjectDeletedEvent event)", "modifiers": "@Subscribe public", "return": "void", "signature": "void deleteProject(ProjectDeletedEvent event)", "full_signature": "@Subscribe public void deleteProject(ProjectDeletedEvent event)", "class_method_signature": "SubscriptionStore.deleteProject(ProjectDeletedEvent event)", "testcase": false, "constructor": false}, {"identifier": "deleteFromAllSubscriptions", "parameters": "(Predicate<Page> predicate, String commitMessage, User currentUser)", "modifiers": "private", "return": "void", "signature": "void deleteFromAllSubscriptions(Predicate<Page> predicate, String commitMessage, User currentUser)", "full_signature": "private void deleteFromAllSubscriptions(Predicate<Page> predicate, String commitMessage, User currentUser)", "class_method_signature": "SubscriptionStore.deleteFromAllSubscriptions(Predicate<Page> predicate, String commitMessage, User currentUser)", "testcase": false, "constructor": false}, {"identifier": "deleteProjectBranch", "parameters": "(ProjectBranchDeletedEvent event)", "modifiers": "@Subscribe public", "return": "void", "signature": "void deleteProjectBranch(ProjectBranchDeletedEvent event)", "full_signature": "@Subscribe public void deleteProjectBranch(ProjectBranchDeletedEvent event)", "class_method_signature": "SubscriptionStore.deleteProjectBranch(ProjectBranchDeletedEvent event)", "testcase": false, "constructor": false}, {"identifier": "renameProjectBranch", "parameters": "(ProjectBranchRenamedEvent event)", "modifiers": "@Subscribe public", "return": "void", "signature": "void renameProjectBranch(ProjectBranchRenamedEvent event)", "full_signature": "@Subscribe public void renameProjectBranch(ProjectBranchRenamedEvent event)", "class_method_signature": "SubscriptionStore.renameProjectBranch(ProjectBranchRenamedEvent event)", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/subscription/SubscriptionStore.java"}, "focal_method": {"identifier": "renameProjectBranch", "parameters": "(ProjectBranchRenamedEvent event)", "modifiers": "@Subscribe public", "return": "void", "body": "@Subscribe\n\tpublic void renameProjectBranch(ProjectBranchRenamedEvent event) {\n\t\tfinal String projectName = event.getProjectName();\n\t\tfinal String branchName = event.getBranchName();\n\t\tfinal String newBranchName = event.getNewBranchName();\n\t\tFunction<Page, Page> function = new Function<Page, Page>() {\n\t\t\t@Override\n\t\t\tpublic Page apply(Page page) {\n\t\t\t\treturn page.getProjectName().equals(projectName) && page.getBranchName().equals(branchName) ?\n\t\t\t\t\t\tnew Page(projectName, newBranchName, page.getPath()) :\n\t\t\t\t\t\tpage;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\ttransformAllSubscriptions(function,\n\t\t\t\t\t\"rename branch \" + projectName + \"/\" + branchName + \" to \" + projectName + \"/\" + newBranchName, //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\t\tevent.getCurrentUser());\n\t\t} catch (IOException e) {\n\t\t\tlog.error(StringUtils.EMPTY, e);\n\t\t} catch (GitAPIException e) {\n\t\t\tlog.error(StringUtils.EMPTY, e);\n\t\t}\n\t}", "signature": "void renameProjectBranch(ProjectBranchRenamedEvent event)", "full_signature": "@Subscribe public void renameProjectBranch(ProjectBranchRenamedEvent event)", "class_method_signature": "SubscriptionStore.renameProjectBranch(ProjectBranchRenamedEvent event)", "testcase": false, "constructor": false, "invocations": ["getProjectName", "getBranchName", "getNewBranchName", "equals", "getProjectName", "equals", "getBranchName", "getPath", "transformAllSubscriptions", "getCurrentUser", "error", "error"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}