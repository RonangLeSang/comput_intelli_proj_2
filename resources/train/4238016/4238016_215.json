{"test_class": {"identifier": "AttachmentControllerTest", "superclass": "extends AbstractDocumentrTest", "interfaces": "", "fields": [{"original_string": "private static final String PROJECT = \"project\";", "modifier": "private static final", "type": "String", "declarator": "PROJECT = \"project\"", "var_name": "PROJECT"}, {"original_string": "private static final String BRANCH = \"branch\";", "modifier": "private static final", "type": "String", "declarator": "BRANCH = \"branch\"", "var_name": "BRANCH"}, {"original_string": "private static final String PAGE_PATH_URL = DocumentrConstants.HOME_PAGE_NAME + \",foo\";", "modifier": "private static final", "type": "String", "declarator": "PAGE_PATH_URL = DocumentrConstants.HOME_PAGE_NAME + \",foo\"", "var_name": "PAGE_PATH_URL"}, {"original_string": "private static final String PAGE_PATH = DocumentrConstants.HOME_PAGE_NAME + \"/foo\";", "modifier": "private static final", "type": "String", "declarator": "PAGE_PATH = DocumentrConstants.HOME_PAGE_NAME + \"/foo\"", "var_name": "PAGE_PATH"}, {"original_string": "private static final User USER = new User(\"currentUser\", \"pw\", \"admin@example.com\", false);", "modifier": "private static final", "type": "User", "declarator": "USER = new User(\"currentUser\", \"pw\", \"admin@example.com\", false)", "var_name": "USER"}, {"original_string": "@Mock\n\tprivate IPageStore pageStore;", "modifier": "@Mock\n\tprivate", "type": "IPageStore", "declarator": "pageStore", "var_name": "pageStore"}, {"original_string": "@Mock\n\tprivate Authentication authentication;", "modifier": "@Mock\n\tprivate", "type": "Authentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "@Mock\n\tprivate ServletContext servletContext;", "modifier": "@Mock\n\tprivate", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "@Mock\n\tprivate UserStore userStore;", "modifier": "@Mock\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}, {"original_string": "@Mock\n\tprivate Model model;", "modifier": "@Mock\n\tprivate", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "@Mock\n\tprivate HttpServletRequest request;", "modifier": "@Mock\n\tprivate", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n\tprivate HttpSession session;", "modifier": "@Mock\n\tprivate", "type": "HttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n\tprivate MultipartFile multipartFile;", "modifier": "@Mock\n\tprivate", "type": "MultipartFile", "declarator": "multipartFile", "var_name": "multipartFile"}, {"original_string": "@InjectMocks\n\tprivate AttachmentController attachmentController;", "modifier": "@InjectMocks\n\tprivate", "type": "AttachmentController", "declarator": "attachmentController", "var_name": "attachmentController"}], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/web/attachment/AttachmentControllerTest.java"}, "test_case": {"identifier": "getAttachmentMustReturn404IfNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getAttachmentMustReturn404IfNotFound() throws IOException {\n\t\twhen(request.getDateHeader(anyString())).thenReturn(-1L);\n\n\t\twhen(pageStore.getAttachmentMetadata(PROJECT, BRANCH, PAGE_PATH, \"test.png\")) //$NON-NLS-1$\n\t\t\t.thenThrow(new PageNotFoundException(PROJECT, BRANCH, PAGE_PATH + \"/test.png\")); //$NON-NLS-1$\n\n\t\tResponseEntity<byte[]> result = attachmentController.getAttachment(\n\t\t\t\tPROJECT, BRANCH, PAGE_PATH_URL, \"test.png\", false, request); //$NON-NLS-1$\n\t\tassertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());\n\t}", "signature": "void getAttachmentMustReturn404IfNotFound()", "full_signature": "@Test public void getAttachmentMustReturn404IfNotFound()", "class_method_signature": "AttachmentControllerTest.getAttachmentMustReturn404IfNotFound()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDateHeader", "anyString", "thenThrow", "when", "getAttachmentMetadata", "getAttachment", "assertEquals", "getStatusCode"]}, "focal_class": {"identifier": "AttachmentController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IPageStore pageStore;", "modifier": "@Autowired\n\tprivate", "type": "IPageStore", "declarator": "pageStore", "var_name": "pageStore"}, {"original_string": "@Autowired\n\tprivate ServletContext servletContext;", "modifier": "@Autowired\n\tprivate", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "@Autowired\n\tprivate UserStore userStore;", "modifier": "@Autowired\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}], "methods": [{"identifier": "getAttachments", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "modifiers": "@RequestMapping(value=\"/list/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"isAuthenticated() and hasPagePermission(#projectName, #branchName, #pagePath, VIEW)\") public", "return": "String", "signature": "String getAttachments(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "full_signature": "@RequestMapping(value=\"/list/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"isAuthenticated() and hasPagePermission(#projectName, #branchName, #pagePath, VIEW)\") public String getAttachments(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "class_method_signature": "AttachmentController.getAttachments(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "testcase": false, "constructor": false}, {"identifier": "getAttachment", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "modifiers": "@RequestMapping(value=\"/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{name:.*}\", method={ RequestMethod.GET, RequestMethod.HEAD }) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, VIEW)\") public", "return": "ResponseEntity<byte[]>", "signature": "ResponseEntity<byte[]> getAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "full_signature": "@RequestMapping(value=\"/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{name:.*}\", method={ RequestMethod.GET, RequestMethod.HEAD }) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, VIEW)\") public ResponseEntity<byte[]> getAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "class_method_signature": "AttachmentController.getAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "createAttachment", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "modifiers": "@RequestMapping(value=\"/create/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") public", "return": "String", "signature": "String createAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "full_signature": "@RequestMapping(value=\"/create/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") public String createAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "class_method_signature": "AttachmentController.createAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, Model model)", "testcase": false, "constructor": false}, {"identifier": "saveAttachment", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/save/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") public", "return": "String", "signature": "String saveAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/save/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") public String saveAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "class_method_signature": "AttachmentController.saveAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "saveAttachmentViaJson", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/saveViaJson/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") @ResponseBody public", "return": "Map<String, Object>", "signature": "Map<String, Object> saveAttachmentViaJson(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/saveViaJson/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") @ResponseBody public Map<String, Object> saveAttachmentViaJson(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "class_method_signature": "AttachmentController.saveAttachmentViaJson(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @RequestParam MultipartFile file, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "saveAttachmentInternal", "parameters": "(String projectName, String branchName, String pagePath,\n\t\t\tMultipartFile file, Authentication authentication)", "modifiers": "private", "return": "void", "signature": "void saveAttachmentInternal(String projectName, String branchName, String pagePath,\n\t\t\tMultipartFile file, Authentication authentication)", "full_signature": "private void saveAttachmentInternal(String projectName, String branchName, String pagePath,\n\t\t\tMultipartFile file, Authentication authentication)", "class_method_signature": "AttachmentController.saveAttachmentInternal(String projectName, String branchName, String pagePath,\n\t\t\tMultipartFile file, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "deleteAttachment", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/delete/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{name:.*}\", method=RequestMethod.GET) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") public", "return": "String", "signature": "String deleteAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/delete/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{name:.*}\", method=RequestMethod.GET) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, EDIT_PAGE)\") public String deleteAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, Authentication authentication)", "class_method_signature": "AttachmentController.deleteAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, Authentication authentication)", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/web/attachment/AttachmentController.java"}, "focal_method": {"identifier": "getAttachment", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "modifiers": "@RequestMapping(value=\"/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{name:.*}\", method={ RequestMethod.GET, RequestMethod.HEAD }) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, VIEW)\") public", "return": "ResponseEntity<byte[]>", "body": "@RequestMapping(value=\"/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" +\n\t\t\t\"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" +\n\t\t\t\"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" +\n\t\t\t\"{name:.*}\", method={ RequestMethod.GET, RequestMethod.HEAD })\n\t@PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, VIEW)\")\n\tpublic ResponseEntity<byte[]> getAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request) throws IOException {\n\n\t\ttry {\n\t\t\tpagePath = Util.toRealPagePath(pagePath);\n\t\t\tPageMetadata metadata = pageStore.getAttachmentMetadata(projectName, branchName, pagePath, name);\n\t\t\tHttpHeaders headers = new HttpHeaders();\n\n\t\t\tlong lastEdited = metadata.getLastEdited().getTime();\n\t\t\tlong authenticationCreated = AuthenticationUtil.getAuthenticationCreationTime(request.getSession());\n\t\t\tlong lastModified = Math.max(lastEdited, authenticationCreated);\n\t\t\tif (!download) {\n\t\t\t\tlong projectEditTime = PageUtil.getProjectEditTime(projectName);\n\t\t\t\tif (projectEditTime >= 0) {\n\t\t\t\t\tlastModified = Math.max(lastModified, projectEditTime);\n\t\t\t\t}\n\n\t\t\t\tlong modifiedSince = request.getDateHeader(\"If-Modified-Since\"); //$NON-NLS-1$\n\t\t\t\tif ((modifiedSince >= 0) && (lastModified <= modifiedSince)) {\n\t\t\t\t\treturn new ResponseEntity<byte[]>(headers, HttpStatus.NOT_MODIFIED);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\theaders.setLastModified(lastModified);\n\t\t\theaders.setExpires(0);\n\t\t\theaders.setCacheControl(\"must-revalidate, private\"); //$NON-NLS-1$\n\t\t\tif (download) {\n\t\t\t\theaders.set(\"Content-Disposition\", //$NON-NLS-1$\n\t\t\t\t\t\t\"attachment; filename=\\\"\" + name.replace('\"', '_') + \"\\\"\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\n\t\t\tPage attachment = pageStore.getAttachment(projectName, branchName, pagePath, name);\n\t\t\theaders.setContentType(MediaType.parseMediaType(attachment.getContentType()));\n\t\t\treturn new ResponseEntity<byte[]>(attachment.getData().getData(), headers, HttpStatus.OK);\n\t\t} catch (PageNotFoundException e) {\n\t\t\treturn new ResponseEntity<byte[]>(HttpStatus.NOT_FOUND);\n\t\t}\n\t}", "signature": "ResponseEntity<byte[]> getAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "full_signature": "@RequestMapping(value=\"/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{pagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{name:.*}\", method={ RequestMethod.GET, RequestMethod.HEAD }) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #pagePath, VIEW)\") public ResponseEntity<byte[]> getAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "class_method_signature": "AttachmentController.getAttachment(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String pagePath, @PathVariable String name, @RequestParam(required=false) boolean download,\n\t\t\tHttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["toRealPagePath", "getAttachmentMetadata", "getTime", "getLastEdited", "getAuthenticationCreationTime", "getSession", "max", "getProjectEditTime", "max", "getDateHeader", "setLastModified", "setExpires", "setCacheControl", "set", "replace", "getAttachment", "setContentType", "parseMediaType", "getContentType", "getData", "getData"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}