{"test_class": {"identifier": "AccessControllerTest", "superclass": "extends AbstractDocumentrTest", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate AuthenticationException authenticationException;", "modifier": "@Mock\n\tprivate", "type": "AuthenticationException", "declarator": "authenticationException", "var_name": "authenticationException"}, {"original_string": "@Mock\n\tprivate AccessDeniedException accessDeniedException;", "modifier": "@Mock\n\tprivate", "type": "AccessDeniedException", "declarator": "accessDeniedException", "var_name": "accessDeniedException"}, {"original_string": "@Mock\n\tprivate HttpServletRequest request;", "modifier": "@Mock\n\tprivate", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n\tprivate Model model;", "modifier": "@Mock\n\tprivate", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "@Mock\n\tprivate HttpSession session;", "modifier": "@Mock\n\tprivate", "type": "HttpSession", "declarator": "session", "var_name": "session"}], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/web/access/AccessControllerTest.java"}, "test_case": {"identifier": "loginForbidden", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void loginForbidden() {\n\t\twhen(accessDeniedException.getMessage()).thenReturn(\"message\"); //$NON-NLS-1$\n\t\twhen(request.getAttribute(WebAttributes.ACCESS_DENIED_403)).thenReturn(accessDeniedException);\n\n\t\tString view = new AccessController().loginForbidden(request, model);\n\t\tassertEquals(\"/login\", view); //$NON-NLS-1$\n\n\t\tverify(model).addAttribute(\"errorMessage\", \"message\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t}", "signature": "void loginForbidden()", "full_signature": "@Test public void loginForbidden()", "class_method_signature": "AccessControllerTest.loginForbidden()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getMessage", "thenReturn", "when", "getAttribute", "loginForbidden", "assertEquals", "addAttribute", "verify"]}, "focal_class": {"identifier": "AccessController", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "login", "parameters": "()", "modifiers": "@RequestMapping(value=\"/login\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public", "return": "String", "signature": "String login()", "full_signature": "@RequestMapping(value=\"/login\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public String login()", "class_method_signature": "AccessController.login()", "testcase": false, "constructor": false}, {"identifier": "loginError", "parameters": "(HttpSession session, Model model)", "modifiers": "@RequestMapping(value=\"/login/error\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public", "return": "String", "signature": "String loginError(HttpSession session, Model model)", "full_signature": "@RequestMapping(value=\"/login/error\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public String loginError(HttpSession session, Model model)", "class_method_signature": "AccessController.loginError(HttpSession session, Model model)", "testcase": false, "constructor": false}, {"identifier": "loginForbidden", "parameters": "(HttpServletRequest request, Model model)", "modifiers": "@RequestMapping(value=\"/login/forbidden\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public", "return": "String", "signature": "String loginForbidden(HttpServletRequest request, Model model)", "full_signature": "@RequestMapping(value=\"/login/forbidden\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public String loginForbidden(HttpServletRequest request, Model model)", "class_method_signature": "AccessController.loginForbidden(HttpServletRequest request, Model model)", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "(Exception exception)", "modifiers": "private", "return": "String", "signature": "String getMessage(Exception exception)", "full_signature": "private String getMessage(Exception exception)", "class_method_signature": "AccessController.getMessage(Exception exception)", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/web/access/AccessController.java"}, "focal_method": {"identifier": "loginForbidden", "parameters": "(HttpServletRequest request, Model model)", "modifiers": "@RequestMapping(value=\"/login/forbidden\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public", "return": "String", "body": "@RequestMapping(value=\"/login/forbidden\", method=RequestMethod.GET)\n\t@PreAuthorize(\"permitAll\")\n\tpublic String loginForbidden(HttpServletRequest request, Model model) {\n\t\tAccessDeniedException exception =\n\t\t\t\t(AccessDeniedException) request.getAttribute(WebAttributes.ACCESS_DENIED_403);\n\t\tString msg = getMessage(exception);\n\t\tif (StringUtils.isNotBlank(msg)) {\n\t\t\tmodel.addAttribute(\"errorMessage\", msg); //$NON-NLS-1$\n\t\t}\n\t\treturn \"/login\"; //$NON-NLS-1$\n\t}", "signature": "String loginForbidden(HttpServletRequest request, Model model)", "full_signature": "@RequestMapping(value=\"/login/forbidden\", method=RequestMethod.GET) @PreAuthorize(\"permitAll\") public String loginForbidden(HttpServletRequest request, Model model)", "class_method_signature": "AccessController.loginForbidden(HttpServletRequest request, Model model)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "getMessage", "isNotBlank", "addAttribute"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}