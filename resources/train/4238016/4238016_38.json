{"test_class": {"identifier": "DocumentrPermissionEvaluatorTest", "superclass": "extends AbstractDocumentrTest", "interfaces": "", "fields": [{"original_string": "private static final String USER = \"user\";", "modifier": "private static final", "type": "String", "declarator": "USER = \"user\"", "var_name": "USER"}, {"original_string": "@Mock\n\tprivate IPageStore pageStore;", "modifier": "@Mock\n\tprivate", "type": "IPageStore", "declarator": "pageStore", "var_name": "pageStore"}, {"original_string": "@Mock\n\tprivate UserStore userStore;", "modifier": "@Mock\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}, {"original_string": "@Mock\n\tprivate UserDetails userDetails;", "modifier": "@Mock\n\tprivate", "type": "UserDetails", "declarator": "userDetails", "var_name": "userDetails"}, {"original_string": "@InjectMocks\n\tprivate DocumentrPermissionEvaluator permissionEvaluator;", "modifier": "@InjectMocks\n\tprivate", "type": "DocumentrPermissionEvaluator", "declarator": "permissionEvaluator", "var_name": "permissionEvaluator"}, {"original_string": "private LoginNameUserDetailsService userDetailsService;", "modifier": "private", "type": "LoginNameUserDetailsService", "declarator": "userDetailsService", "var_name": "userDetailsService"}], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/access/DocumentrPermissionEvaluatorTest.java"}, "test_case": {"identifier": "hasBranchPermission", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void hasBranchPermission() {\n\t\tAuthentication authentication = mockAuthentication(new PermissionGrantedAuthority(\n\t\t\t\tnew GrantedAuthorityTarget(\"project/branch\", Type.BRANCH), Permission.EDIT_PAGE)); //$NON-NLS-1$\n\t\tassertTrue(permissionEvaluator.hasBranchPermission(\n\t\t\t\tauthentication, \"project\", \"branch\", Permission.EDIT_PAGE)); //$NON-NLS-1$ //$NON-NLS-2$\n\t}", "signature": "void hasBranchPermission()", "full_signature": "@Test public void hasBranchPermission()", "class_method_signature": "DocumentrPermissionEvaluatorTest.hasBranchPermission()", "testcase": true, "constructor": false, "invocations": ["mockAuthentication", "assertTrue", "hasBranchPermission"]}, "focal_class": {"identifier": "DocumentrPermissionEvaluator", "superclass": "", "interfaces": "implements PermissionEvaluator", "fields": [{"original_string": "@Autowired\n\tprivate IPageStore pageStore;", "modifier": "@Autowired\n\tprivate", "type": "IPageStore", "declarator": "pageStore", "var_name": "pageStore"}, {"original_string": "@Autowired\n\tprivate UserStore userStore;", "modifier": "@Autowired\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}, {"original_string": "@Autowired\n\tprivate IGlobalRepositoryManager repoManager;", "modifier": "@Autowired\n\tprivate", "type": "IGlobalRepositoryManager", "declarator": "repoManager", "var_name": "repoManager"}, {"original_string": "@Autowired\n\tprivate LoginNameUserDetailsService userDetailsService;", "modifier": "@Autowired\n\tprivate", "type": "LoginNameUserDetailsService", "declarator": "userDetailsService", "var_name": "userDetailsService"}], "methods": [{"identifier": "hasPermission", "parameters": "(Authentication authentication, Object targetDomainObject, Object permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission)", "full_signature": "@Override public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasPermission(Authentication authentication, Object targetDomainObject, Object permission)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(Authentication authentication, Serializable targetId, String targetType,\n\t\t\tObject permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermission(Authentication authentication, Serializable targetId, String targetType,\n\t\t\tObject permission)", "full_signature": "@Override public boolean hasPermission(Authentication authentication, Serializable targetId, String targetType,\n\t\t\tObject permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasPermission(Authentication authentication, Serializable targetId, String targetType,\n\t\t\tObject permission)", "testcase": false, "constructor": false}, {"identifier": "hasApplicationPermission", "parameters": "(Authentication authentication, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasApplicationPermission(Authentication authentication, Permission permission)", "full_signature": "public boolean hasApplicationPermission(Authentication authentication, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasApplicationPermission(Authentication authentication, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasApplicationPermission", "parameters": "(Collection<? extends GrantedAuthority> authorities,\n\t\t\tPermission permission)", "modifiers": "private", "return": "boolean", "signature": "boolean hasApplicationPermission(Collection<? extends GrantedAuthority> authorities,\n\t\t\tPermission permission)", "full_signature": "private boolean hasApplicationPermission(Collection<? extends GrantedAuthority> authorities,\n\t\t\tPermission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasApplicationPermission(Collection<? extends GrantedAuthority> authorities,\n\t\t\tPermission permission)", "testcase": false, "constructor": false}, {"identifier": "hasProjectPermission", "parameters": "(Authentication authentication, String projectName, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasProjectPermission(Authentication authentication, String projectName, Permission permission)", "full_signature": "public boolean hasProjectPermission(Authentication authentication, String projectName, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasProjectPermission(Authentication authentication, String projectName, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasAnyProjectPermission", "parameters": "(Authentication authentication, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasAnyProjectPermission(Authentication authentication, Permission permission)", "full_signature": "public boolean hasAnyProjectPermission(Authentication authentication, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasAnyProjectPermission(Authentication authentication, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasBranchPermission", "parameters": "(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasBranchPermission(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "full_signature": "public boolean hasBranchPermission(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasBranchPermission(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "testcase": false, "constructor": false}, {"identifier": "hasAnyBranchPermission", "parameters": "(Authentication authentication, String projectName, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasAnyBranchPermission(Authentication authentication, String projectName, Permission permission)", "full_signature": "public boolean hasAnyBranchPermission(Authentication authentication, String projectName, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasAnyBranchPermission(Authentication authentication, String projectName, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasPagePermission", "parameters": "(Authentication authentication, String projectName, String branchName,\n\t\t\tString path, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasPagePermission(Authentication authentication, String projectName, String branchName,\n\t\t\tString path, Permission permission)", "full_signature": "public boolean hasPagePermission(Authentication authentication, String projectName, String branchName,\n\t\t\tString path, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasPagePermission(Authentication authentication, String projectName, String branchName,\n\t\t\tString path, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasPagePermissionInOtherBranches", "parameters": "(Authentication authentication, String projectName,\n\t\t\tString branchName, String path, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasPagePermissionInOtherBranches(Authentication authentication, String projectName,\n\t\t\tString branchName, String path, Permission permission)", "full_signature": "public boolean hasPagePermissionInOtherBranches(Authentication authentication, String projectName,\n\t\t\tString branchName, String path, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasPagePermissionInOtherBranches(Authentication authentication, String projectName,\n\t\t\tString branchName, String path, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "getBranchesForPermission", "parameters": "(Authentication authentication, Permission permission)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getBranchesForPermission(Authentication authentication, Permission permission)", "full_signature": "public Set<String> getBranchesForPermission(Authentication authentication, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.getBranchesForPermission(Authentication authentication, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "isAdmin", "parameters": "(String loginName)", "modifiers": "public", "return": "boolean", "signature": "boolean isAdmin(String loginName)", "full_signature": "public boolean isAdmin(String loginName)", "class_method_signature": "DocumentrPermissionEvaluator.isAdmin(String loginName)", "testcase": false, "constructor": false}, {"identifier": "isLastAdminRole", "parameters": "(String roleName)", "modifiers": "public", "return": "boolean", "signature": "boolean isLastAdminRole(String roleName)", "full_signature": "public boolean isLastAdminRole(String roleName)", "class_method_signature": "DocumentrPermissionEvaluator.isLastAdminRole(String roleName)", "testcase": false, "constructor": false}, {"identifier": "hasRoleOnBranch", "parameters": "(Authentication authentication, String projectName, String branchName,\n\t\t\tString roleName)", "modifiers": "private", "return": "boolean", "signature": "boolean hasRoleOnBranch(Authentication authentication, String projectName, String branchName,\n\t\t\tString roleName)", "full_signature": "private boolean hasRoleOnBranch(Authentication authentication, String projectName, String branchName,\n\t\t\tString roleName)", "class_method_signature": "DocumentrPermissionEvaluator.hasRoleOnBranch(Authentication authentication, String projectName, String branchName,\n\t\t\tString roleName)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(PermissionGrantedAuthority authority, Permission permission)", "modifiers": "private", "return": "boolean", "signature": "boolean hasPermission(PermissionGrantedAuthority authority, Permission permission)", "full_signature": "private boolean hasPermission(PermissionGrantedAuthority authority, Permission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasPermission(PermissionGrantedAuthority authority, Permission permission)", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/access/DocumentrPermissionEvaluator.java"}, "focal_method": {"identifier": "hasBranchPermission", "parameters": "(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "modifiers": "public", "return": "boolean", "body": "public boolean hasBranchPermission(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission) {\n\n\t\tString targetId = projectName + \"/\" + branchName; //$NON-NLS-1$\n\t\tfor (GrantedAuthority authority : authentication.getAuthorities()) {\n\t\t\tif (authority instanceof PermissionGrantedAuthority) {\n\t\t\t\tPermissionGrantedAuthority pga = (PermissionGrantedAuthority) authority;\n\t\t\t\tGrantedAuthorityTarget target = pga.getTarget();\n\t\t\t\tType type = target.getType();\n\t\t\t\tString id = target.getTargetId();\n\t\t\t\tif ((type == Type.BRANCH) &&\n\t\t\t\t\tid.equals(targetId) &&\n\t\t\t\t\thasPermission(pga, permission)) {\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn hasProjectPermission(authentication, projectName, permission);\n\t}", "signature": "boolean hasBranchPermission(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "full_signature": "public boolean hasBranchPermission(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "class_method_signature": "DocumentrPermissionEvaluator.hasBranchPermission(Authentication authentication, String projectName, String branchName,\n\t\t\tPermission permission)", "testcase": false, "constructor": false, "invocations": ["getAuthorities", "getTarget", "getType", "getTargetId", "equals", "hasPermission", "hasProjectPermission"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}