{"test_class": {"identifier": "PageControllerTest", "superclass": "extends AbstractDocumentrTest", "interfaces": "", "fields": [{"original_string": "private static final String PROJECT = \"project\";", "modifier": "private static final", "type": "String", "declarator": "PROJECT = \"project\"", "var_name": "PROJECT"}, {"original_string": "private static final String BRANCH = \"branch\";", "modifier": "private static final", "type": "String", "declarator": "BRANCH = \"branch\"", "var_name": "BRANCH"}, {"original_string": "private static final String PAGE_PATH = DocumentrConstants.HOME_PAGE_NAME + \"/page\";", "modifier": "private static final", "type": "String", "declarator": "PAGE_PATH = DocumentrConstants.HOME_PAGE_NAME + \"/page\"", "var_name": "PAGE_PATH"}, {"original_string": "private static final String PAGE_PATH_URL = DocumentrConstants.HOME_PAGE_NAME + \",page\";", "modifier": "private static final", "type": "String", "declarator": "PAGE_PATH_URL = DocumentrConstants.HOME_PAGE_NAME + \",page\"", "var_name": "PAGE_PATH_URL"}, {"original_string": "private static final String PAGE_NAME = \"page\";", "modifier": "private static final", "type": "String", "declarator": "PAGE_NAME = \"page\"", "var_name": "PAGE_NAME"}, {"original_string": "private static final String PARENT_PAGE = DocumentrConstants.HOME_PAGE_NAME;", "modifier": "private static final", "type": "String", "declarator": "PARENT_PAGE = DocumentrConstants.HOME_PAGE_NAME", "var_name": "PARENT_PAGE"}, {"original_string": "private static final String CONTEXT = \"/context\";", "modifier": "private static final", "type": "String", "declarator": "CONTEXT = \"/context\"", "var_name": "CONTEXT"}, {"original_string": "private static final User USER = new User(\"currentUser\", \"pw\", \"admin@example.com\", false);", "modifier": "private static final", "type": "User", "declarator": "USER = new User(\"currentUser\", \"pw\", \"admin@example.com\", false)", "var_name": "USER"}, {"original_string": "private static final Locale LOCALE = Locale.ENGLISH;", "modifier": "private static final", "type": "Locale", "declarator": "LOCALE = Locale.ENGLISH", "var_name": "LOCALE"}, {"original_string": "@Mock\n\tprivate IPageStore pageStore;", "modifier": "@Mock\n\tprivate", "type": "IPageStore", "declarator": "pageStore", "var_name": "pageStore"}, {"original_string": "@Mock\n\tprivate ICherryPicker cherryPicker;", "modifier": "@Mock\n\tprivate", "type": "ICherryPicker", "declarator": "cherryPicker", "var_name": "cherryPicker"}, {"original_string": "@Mock\n\tprivate IGlobalRepositoryManager repoManager;", "modifier": "@Mock\n\tprivate", "type": "IGlobalRepositoryManager", "declarator": "repoManager", "var_name": "repoManager"}, {"original_string": "@Mock\n\tprivate UserStore userStore;", "modifier": "@Mock\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}, {"original_string": "@Mock\n\tprivate IPageRenderer pageRenderer;", "modifier": "@Mock\n\tprivate", "type": "IPageRenderer", "declarator": "pageRenderer", "var_name": "pageRenderer"}, {"original_string": "@Mock\n\tprivate MarkdownProcessor markdownProcessor;", "modifier": "@Mock\n\tprivate", "type": "MarkdownProcessor", "declarator": "markdownProcessor", "var_name": "markdownProcessor"}, {"original_string": "@Mock\n\tprivate Authentication authenticatedAuthentication;", "modifier": "@Mock\n\tprivate", "type": "Authentication", "declarator": "authenticatedAuthentication", "var_name": "authenticatedAuthentication"}, {"original_string": "@Mock\n\tprivate Authentication anonymousAuthentication;", "modifier": "@Mock\n\tprivate", "type": "Authentication", "declarator": "anonymousAuthentication", "var_name": "anonymousAuthentication"}, {"original_string": "@Mock\n\tprivate HttpSession session;", "modifier": "@Mock\n\tprivate", "type": "HttpSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n\tprivate HttpServletRequest request;", "modifier": "@Mock\n\tprivate", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n\tprivate HttpServletResponse response;", "modifier": "@Mock\n\tprivate", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n\tprivate Model model;", "modifier": "@Mock\n\tprivate", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "@Mock\n\tprivate DocumentrPermissionEvaluator permissionEvaluator;", "modifier": "@Mock\n\tprivate", "type": "DocumentrPermissionEvaluator", "declarator": "permissionEvaluator", "var_name": "permissionEvaluator"}, {"original_string": "@Mock\n\tprivate PageMetadata pageMetadata;", "modifier": "@Mock\n\tprivate", "type": "PageMetadata", "declarator": "pageMetadata", "var_name": "pageMetadata"}, {"original_string": "@Mock\n\tprivate WebRequest webRequest;", "modifier": "@Mock\n\tprivate", "type": "WebRequest", "declarator": "webRequest", "var_name": "webRequest"}, {"original_string": "@InjectMocks\n\tprivate PageController pageController;", "modifier": "@InjectMocks\n\tprivate", "type": "PageController", "declarator": "pageController", "var_name": "pageController"}], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/web/page/PageControllerTest.java"}, "test_case": {"identifier": "savePageButNonexistentBranch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void savePageButNonexistentBranch() throws IOException {\n\t\twhen(repoManager.listProjectBranches(PROJECT)).thenReturn(Collections.singletonList(BRANCH));\n\t\tPageForm pageForm = new PageForm(PROJECT, \"nonexistent\", PAGE_PATH, PARENT_PAGE, \"title\", \"text\", null, null, //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\tArrayUtils.EMPTY_STRING_ARRAY, DocumentrConstants.PAGE_ORDER_INDEX_UNORDERED);\n\t\tBindingResult bindingResult = new BeanPropertyBindingResult(pageForm, \"pageForm\"); //$NON-NLS-1$\n\n\t\tString view = pageController.savePage(pageForm, bindingResult, model, authenticatedAuthentication);\n\t\tassertEquals(\"/project/branch/page/edit\", view); //$NON-NLS-1$\n\t\tassertTrue(bindingResult.hasErrors());\n\t\tassertTrue(bindingResult.hasFieldErrors(\"branchName\")); //$NON-NLS-1$\n\t}", "signature": "void savePageButNonexistentBranch()", "full_signature": "@Test public void savePageButNonexistentBranch()", "class_method_signature": "PageControllerTest.savePageButNonexistentBranch()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "listProjectBranches", "singletonList", "savePage", "assertEquals", "assertTrue", "hasErrors", "assertTrue", "hasFieldErrors"]}, "focal_class": {"identifier": "PageController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IPageStore pageStore;", "modifier": "@Autowired\n\tprivate", "type": "IPageStore", "declarator": "pageStore", "var_name": "pageStore"}, {"original_string": "@Autowired\n\tprivate ICherryPicker cherryPicker;", "modifier": "@Autowired\n\tprivate", "type": "ICherryPicker", "declarator": "cherryPicker", "var_name": "cherryPicker"}, {"original_string": "@Autowired\n\tprivate IGlobalRepositoryManager globalRepositoryManager;", "modifier": "@Autowired\n\tprivate", "type": "IGlobalRepositoryManager", "declarator": "globalRepositoryManager", "var_name": "globalRepositoryManager"}, {"original_string": "@Autowired\n\tprivate MarkdownProcessor markdownProcessor;", "modifier": "@Autowired\n\tprivate", "type": "MarkdownProcessor", "declarator": "markdownProcessor", "var_name": "markdownProcessor"}, {"original_string": "@Autowired\n\tprivate UserStore userStore;", "modifier": "@Autowired\n\tprivate", "type": "UserStore", "declarator": "userStore", "var_name": "userStore"}, {"original_string": "@Autowired\n\tprivate IPageRenderer pageRenderer;", "modifier": "@Autowired\n\tprivate", "type": "IPageRenderer", "declarator": "pageRenderer", "var_name": "pageRenderer"}, {"original_string": "@Autowired\n\tprivate DocumentrPermissionEvaluator permissionEvaluator;", "modifier": "@Autowired\n\tprivate", "type": "DocumentrPermissionEvaluator", "declarator": "permissionEvaluator", "var_name": "permissionEvaluator"}], "methods": [{"identifier": "getPage", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpServletRequest request, HttpServletResponse response)", "modifiers": "@RequestMapping(value=\"/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method={ RequestMethod.GET, RequestMethod.HEAD }) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public", "return": "String", "signature": "String getPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpServletRequest request, HttpServletResponse response)", "full_signature": "@RequestMapping(value=\"/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method={ RequestMethod.GET, RequestMethod.HEAD }) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public String getPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "PageController.getPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "createPage", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, Model model)", "modifiers": "@RequestMapping(value=\"/create/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{parentPagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public", "return": "String", "signature": "String createPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, Model model)", "full_signature": "@RequestMapping(value=\"/create/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{parentPagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public String createPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, Model model)", "class_method_signature": "PageController.createPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, Model model)", "testcase": false, "constructor": false}, {"identifier": "editPage", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpSession session)", "modifiers": "@RequestMapping(value=\"/edit/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, EDIT_PAGE)\") public", "return": "String", "signature": "String editPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpSession session)", "full_signature": "@RequestMapping(value=\"/edit/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, EDIT_PAGE)\") public String editPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpSession session)", "class_method_signature": "PageController.editPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model, HttpSession session)", "testcase": false, "constructor": false}, {"identifier": "savePage", "parameters": "(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/save/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#form.projectName, #form.branchName, EDIT_PAGE)\") public", "return": "String", "signature": "String savePage(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/save/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#form.projectName, #form.branchName, EDIT_PAGE)\") public String savePage(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "class_method_signature": "PageController.savePage(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "createPageForm", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam(required=false) String path, @RequestParam(required=false) String parentPagePath,\n\t\t\t@RequestParam(required=false) String title, @RequestParam(required=false) String text,\n\t\t\t@RequestParam(required=false) String viewRestrictionRole,\n\t\t\t@RequestParam(required=false) String commit,\n\t\t\t@RequestParam(required=false) String[] tags,\n\t\t\t@RequestParam(required=false) Integer orderIndex)", "modifiers": "@ModelAttribute public", "return": "PageForm", "signature": "PageForm createPageForm(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam(required=false) String path, @RequestParam(required=false) String parentPagePath,\n\t\t\t@RequestParam(required=false) String title, @RequestParam(required=false) String text,\n\t\t\t@RequestParam(required=false) String viewRestrictionRole,\n\t\t\t@RequestParam(required=false) String commit,\n\t\t\t@RequestParam(required=false) String[] tags,\n\t\t\t@RequestParam(required=false) Integer orderIndex)", "full_signature": "@ModelAttribute public PageForm createPageForm(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam(required=false) String path, @RequestParam(required=false) String parentPagePath,\n\t\t\t@RequestParam(required=false) String title, @RequestParam(required=false) String text,\n\t\t\t@RequestParam(required=false) String viewRestrictionRole,\n\t\t\t@RequestParam(required=false) String commit,\n\t\t\t@RequestParam(required=false) String[] tags,\n\t\t\t@RequestParam(required=false) Integer orderIndex)", "class_method_signature": "PageController.createPageForm(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam(required=false) String path, @RequestParam(required=false) String parentPagePath,\n\t\t\t@RequestParam(required=false) String title, @RequestParam(required=false) String text,\n\t\t\t@RequestParam(required=false) String viewRestrictionRole,\n\t\t\t@RequestParam(required=false) String commit,\n\t\t\t@RequestParam(required=false) String[] tags,\n\t\t\t@RequestParam(required=false) Integer orderIndex)", "testcase": false, "constructor": false}, {"identifier": "generateName", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, @RequestParam String title)", "modifiers": "@RequestMapping(value=\"/generateName/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{parentPagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST, produces=\"application/json\") @ResponseBody @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, VIEW)\") public", "return": "Map<String, Object>", "signature": "Map<String, Object> generateName(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, @RequestParam String title)", "full_signature": "@RequestMapping(value=\"/generateName/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{parentPagePath:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST, produces=\"application/json\") @ResponseBody @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, VIEW)\") public Map<String, Object> generateName(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, @RequestParam String title)", "class_method_signature": "PageController.generateName(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String parentPagePath, @RequestParam String title)", "testcase": false, "constructor": false}, {"identifier": "markdownToHtml", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam String markdown, @RequestParam(required=false) String pagePath, Authentication authentication,\n\t\t\tLocale locale, HttpServletRequest request)", "modifiers": "@RequestMapping(value=\"/markdownToHtml/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/json\", method=RequestMethod.POST, produces=\"application/json\") @ResponseBody @PreAuthorize(\"isAuthenticated()\") public", "return": "Map<String, String>", "signature": "Map<String, String> markdownToHtml(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam String markdown, @RequestParam(required=false) String pagePath, Authentication authentication,\n\t\t\tLocale locale, HttpServletRequest request)", "full_signature": "@RequestMapping(value=\"/markdownToHtml/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/json\", method=RequestMethod.POST, produces=\"application/json\") @ResponseBody @PreAuthorize(\"isAuthenticated()\") public Map<String, String> markdownToHtml(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam String markdown, @RequestParam(required=false) String pagePath, Authentication authentication,\n\t\t\tLocale locale, HttpServletRequest request)", "class_method_signature": "PageController.markdownToHtml(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@RequestParam String markdown, @RequestParam(required=false) String pagePath, Authentication authentication,\n\t\t\tLocale locale, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "copyToBranch", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String targetBranchName, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/copyToBranch/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW) and \" + \"hasBranchPermission(#projectName, #targetBranchName, EDIT_PAGE)\") public", "return": "String", "signature": "String copyToBranch(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String targetBranchName, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/copyToBranch/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW) and \" + \"hasBranchPermission(#projectName, #targetBranchName, EDIT_PAGE)\") public String copyToBranch(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String targetBranchName, Authentication authentication)", "class_method_signature": "PageController.copyToBranch(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String targetBranchName, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "deletePage", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/delete/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public", "return": "String", "signature": "String deletePage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/delete/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public String deletePage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "class_method_signature": "PageController.deletePage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "relocatePage", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String newParentPagePath, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/relocate/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public", "return": "String", "signature": "String relocatePage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String newParentPagePath, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/relocate/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public String relocatePage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String newParentPagePath, Authentication authentication)", "class_method_signature": "PageController.relocatePage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String newParentPagePath, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "getPageMarkdown", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam Set<String> versions)", "modifiers": "@RequestMapping(value=\"/markdown/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public", "return": "Map<String, String>", "signature": "Map<String, String> getPageMarkdown(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam Set<String> versions)", "full_signature": "@RequestMapping(value=\"/markdown/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public Map<String, String> getPageMarkdown(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam Set<String> versions)", "class_method_signature": "PageController.getPageMarkdown(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam Set<String> versions)", "testcase": false, "constructor": false}, {"identifier": "getPageMarkdownInRange", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\t@PathVariable String commit)", "modifiers": "@RequestMapping(value=\"/markdownInRange/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{rangeStart:[0-9]+},{rangeEnd:[0-9]+}/{commit:[0-9a-fA-F]+}/json\", method=RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public", "return": "Map<String, String>", "signature": "Map<String, String> getPageMarkdownInRange(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\t@PathVariable String commit)", "full_signature": "@RequestMapping(value=\"/markdownInRange/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{rangeStart:[0-9]+},{rangeEnd:[0-9]+}/{commit:[0-9a-fA-F]+}/json\", method=RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public Map<String, String> getPageMarkdownInRange(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\t@PathVariable String commit)", "class_method_signature": "PageController.getPageMarkdownInRange(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\t@PathVariable String commit)", "testcase": false, "constructor": false}, {"identifier": "getPageChanges", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model)", "modifiers": "@RequestMapping(value=\"/changes/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"isAuthenticated() and hasPagePermission(#projectName, #branchName, #path, VIEW)\") public", "return": "String", "signature": "String getPageChanges(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model)", "full_signature": "@RequestMapping(value=\"/changes/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.GET) @PreAuthorize(\"isAuthenticated() and hasPagePermission(#projectName, #branchName, #path, VIEW)\") public String getPageChanges(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model)", "class_method_signature": "PageController.getPageChanges(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Model model)", "testcase": false, "constructor": false}, {"identifier": "savePageRange", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String markdown, @RequestParam String range,\n\t\t\t@RequestParam String commit, Authentication authentication, Locale locale, HttpServletRequest request)", "modifiers": "@RequestMapping(value=\"/saveRange/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, EDIT_PAGE)\") public", "return": "Map<String, Object>", "signature": "Map<String, Object> savePageRange(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String markdown, @RequestParam String range,\n\t\t\t@RequestParam String commit, Authentication authentication, Locale locale, HttpServletRequest request)", "full_signature": "@RequestMapping(value=\"/saveRange/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, EDIT_PAGE)\") public Map<String, Object> savePageRange(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String markdown, @RequestParam String range,\n\t\t\t@RequestParam String commit, Authentication authentication, Locale locale, HttpServletRequest request)", "class_method_signature": "PageController.savePageRange(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String markdown, @RequestParam String range,\n\t\t\t@RequestParam String commit, Authentication authentication, Locale locale, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "restoreVersion", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/restoreVersion/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, EDIT_PAGE)\") public", "return": "Map<String, Object>", "signature": "Map<String, Object> restoreVersion(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/restoreVersion/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @ResponseBody @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, EDIT_PAGE)\") public Map<String, Object> restoreVersion(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version, Authentication authentication)", "class_method_signature": "PageController.restoreVersion(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "cherryPick", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version1, @RequestParam String version2,\n\t\t\t@RequestParam(\"branch\") Set<String> targetBranches, @RequestParam boolean dryRun,\n\t\t\tWebRequest request, Model model, Authentication authentication, Locale locale)", "modifiers": "@RequestMapping(value=\"/cherryPick/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public", "return": "String", "signature": "String cherryPick(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version1, @RequestParam String version2,\n\t\t\t@RequestParam(\"branch\") Set<String> targetBranches, @RequestParam boolean dryRun,\n\t\t\tWebRequest request, Model model, Authentication authentication, Locale locale)", "full_signature": "@RequestMapping(value=\"/cherryPick/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasPagePermission(#projectName, #branchName, #path, VIEW)\") public String cherryPick(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version1, @RequestParam String version2,\n\t\t\t@RequestParam(\"branch\") Set<String> targetBranches, @RequestParam boolean dryRun,\n\t\t\tWebRequest request, Model model, Authentication authentication, Locale locale)", "class_method_signature": "PageController.cherryPick(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam String version1, @RequestParam String version2,\n\t\t\t@RequestParam(\"branch\") Set<String> targetBranches, @RequestParam boolean dryRun,\n\t\t\tWebRequest request, Model model, Authentication authentication, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "splitPage", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\tModel model)", "modifiers": "@RequestMapping(value=\"/split/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{rangeStart:[0-9]+},{rangeEnd:[0-9]+}\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public", "return": "String", "signature": "String splitPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\tModel model)", "full_signature": "@RequestMapping(value=\"/split/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/\" + \"{rangeStart:[0-9]+},{rangeEnd:[0-9]+}\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") public String splitPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\tModel model)", "class_method_signature": "PageController.splitPage(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @PathVariable int rangeStart, @PathVariable int rangeEnd,\n\t\t\tModel model)", "testcase": false, "constructor": false}, {"identifier": "saveChildrenOrder", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam(value=\"childrenOrder[]\", required=false) List<String> childrenOrder,\n\t\t\tAuthentication authentication)", "modifiers": "@RequestMapping(value=\"/saveChildrenOrder/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") @ResponseBody public", "return": "Map<String, Object>", "signature": "Map<String, Object> saveChildrenOrder(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam(value=\"childrenOrder[]\", required=false) List<String> childrenOrder,\n\t\t\tAuthentication authentication)", "full_signature": "@RequestMapping(value=\"/saveChildrenOrder/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") @ResponseBody public Map<String, Object> saveChildrenOrder(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam(value=\"childrenOrder[]\", required=false) List<String> childrenOrder,\n\t\t\tAuthentication authentication)", "class_method_signature": "PageController.saveChildrenOrder(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, @RequestParam(value=\"childrenOrder[]\", required=false) List<String> childrenOrder,\n\t\t\tAuthentication authentication)", "testcase": false, "constructor": false}, {"identifier": "resetChildrenOrder", "parameters": "(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/resetChildrenOrder/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") @ResponseBody public", "return": "Map<String, Object>", "signature": "Map<String, Object> resetChildrenOrder(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/resetChildrenOrder/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}/\" + \"{path:\" + DocumentrConstants.PAGE_PATH_URL_PATTERN + \"}/json\", method=RequestMethod.GET) @PreAuthorize(\"hasBranchPermission(#projectName, #branchName, EDIT_PAGE)\") @ResponseBody public Map<String, Object> resetChildrenOrder(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "class_method_signature": "PageController.resetChildrenOrder(@PathVariable String projectName, @PathVariable String branchName,\n\t\t\t@PathVariable String path, Authentication authentication)", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/web/page/PageController.java"}, "focal_method": {"identifier": "savePage", "parameters": "(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "modifiers": "@RequestMapping(value=\"/save/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#form.projectName, #form.branchName, EDIT_PAGE)\") public", "return": "String", "body": "@RequestMapping(value=\"/save/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" +\n\t\t\t\"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}\", method=RequestMethod.POST)\n\t@PreAuthorize(\"hasBranchPermission(#form.projectName, #form.branchName, EDIT_PAGE)\")\n\tpublic String savePage(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication) throws IOException {\n\n\t\tString projectName = form.getProjectName();\n\t\tString branchName = form.getBranchName();\n\t\tUser user = userStore.getUser(authentication.getName());\n\n\t\tif (!globalRepositoryManager.listProjectBranches(projectName).contains(branchName)) {\n\t\t\tbindingResult.rejectValue(\"branchName\", \"page.branch.nonexistent\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t}\n\n\t\tif (bindingResult.hasErrors()) {\n\t\t\treturn \"/project/branch/page/edit\"; //$NON-NLS-1$\n\t\t}\n\n\t\tString parentPagePath = form.getParentPagePath();\n\t\tif (StringUtils.isBlank(parentPagePath)) {\n\t\t\tparentPagePath = null;\n\t\t}\n\t\tparentPagePath = Util.toRealPagePath(parentPagePath);\n\t\tPage page = Page.fromText(form.getTitle(), form.getText());\n\t\tString path = form.getPath();\n\t\tif (StringUtils.isBlank(path)) {\n\t\t\tpath = parentPagePath + \"/\" + Util.simplifyForUrl(form.getTitle()); //$NON-NLS-1$\n\t\t}\n\t\tpage.setTags(Sets.newHashSet(form.getTags()));\n\t\tpage.setViewRestrictionRole(StringUtils.isNotBlank(form.getViewRestrictionRole()) ?\n\t\t\t\tform.getViewRestrictionRole() : null);\n\t\tpage.setOrderIndex(form.getOrderIndex());\n\n\t\tPage oldPage = null;\n\t\ttry {\n\t\t\toldPage = pageStore.getPage(projectName, branchName, path, true);\n\t\t} catch (PageNotFoundException e) {\n\t\t\t// okay\n\t\t}\n\t\tif ((oldPage == null) || !page.equals(oldPage)) {\n\t\t\tMergeConflict conflict = pageStore.savePage(projectName, branchName, path,\n\t\t\t\t\tpage, Strings.emptyToNull(form.getCommit()), user);\n\t\t\tif (conflict != null) {\n\t\t\t\tform.setText(conflict.getText());\n\t\t\t\tform.setCommit(conflict.getNewBaseCommit());\n\t\t\t\tmodel.addAttribute(\"mergeConflict\", Boolean.TRUE); //$NON-NLS-1$\n\t\t\t\treturn \"/project/branch/page/edit\"; //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\n\t\tInteger start = form.getParentPageSplitRangeStart();\n\t\tInteger end = form.getParentPageSplitRangeEnd();\n\t\tif (StringUtils.isNotBlank(parentPagePath) && (start != null) && (end != null) &&\n\t\t\tpermissionEvaluator.hasBranchPermission(authentication, projectName, branchName, Permission.EDIT_PAGE)) {\n\n\t\t\tlog.info(\"splitting off {}-{} of {}/{}/{}\", //$NON-NLS-1$\n\t\t\t\t\tstart, end, projectName, branchName, parentPagePath);\n\n\t\t\tPage parentPage = pageStore.getPage(projectName, branchName, parentPagePath, true);\n\t\t\tString text = ((PageTextData) parentPage.getData()).getText();\n\t\t\tend = Math.min(end, text.length());\n\t\t\ttext = text.substring(0, start) + text.substring(end);\n\t\t\tparentPage.setData(new PageTextData(text));\n\t\t\tpageStore.savePage(projectName, branchName, parentPagePath, parentPage, null, user);\n\t\t}\n\n\t\treturn \"redirect:/page/\" + projectName + \"/\" + branchName + \"/\" + //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\tUtil.toUrlPagePath(path);\n\t}", "signature": "String savePage(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "full_signature": "@RequestMapping(value=\"/save/{projectName:\" + DocumentrConstants.PROJECT_NAME_PATTERN + \"}/\" + \"{branchName:\" + DocumentrConstants.BRANCH_NAME_PATTERN + \"}\", method=RequestMethod.POST) @PreAuthorize(\"hasBranchPermission(#form.projectName, #form.branchName, EDIT_PAGE)\") public String savePage(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "class_method_signature": "PageController.savePage(@ModelAttribute @Valid PageForm form, BindingResult bindingResult,\n\t\t\tModel model, Authentication authentication)", "testcase": false, "constructor": false, "invocations": ["getProjectName", "getBranchName", "getUser", "getName", "contains", "listProjectBranches", "rejectValue", "hasErrors", "getParentPagePath", "isBlank", "toRealPagePath", "fromText", "getTitle", "getText", "getPath", "isBlank", "simplifyForUrl", "getTitle", "setTags", "newHashSet", "getTags", "setViewRestrictionRole", "isNotBlank", "getViewRestrictionRole", "getViewRestrictionRole", "setOrderIndex", "getOrderIndex", "getPage", "equals", "savePage", "emptyToNull", "getCommit", "setText", "getText", "setCommit", "getNewBaseCommit", "addAttribute", "getParentPageSplitRangeStart", "getParentPageSplitRangeEnd", "isNotBlank", "hasBranchPermission", "info", "getPage", "getText", "getData", "min", "length", "substring", "substring", "setData", "savePage", "toUrlPagePath"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}