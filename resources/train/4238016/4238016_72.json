{"test_class": {"identifier": "LockKeyTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.blizzy.documentr/src/test/java/de/blizzy/documentr/repository/LockKeyTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEquals() {\n\t\tLockKey equal1 = new LockKey(\"p1\", \"b\", true); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tLockKey equal2 = new LockKey(\"p1\", \"b\", true); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tLockKey equal3 = new LockKey(\"p1\", \"b\", true); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tLockKey different1 = new LockKey(\"p2\", \"b\", true); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tLockKey different2 = new LockKey(\"p1\", \"b2\", true); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tLockKey different3 = new LockKey(\"p1\", \"b\", false); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEqualsContract(equal1, equal2, equal3, different1);\n\t\tassertEqualsContract(equal1, equal2, equal3, different2);\n\t\tassertEqualsContract(equal1, equal2, equal3, different3);\n\t}", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "LockKeyTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEqualsContract", "assertEqualsContract", "assertEqualsContract"]}, "focal_class": {"identifier": "LockKey", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String projectName;", "modifier": "private", "type": "String", "declarator": "projectName", "var_name": "projectName"}, {"original_string": "private String branchName;", "modifier": "private", "type": "String", "declarator": "branchName", "var_name": "branchName"}, {"original_string": "private boolean central;", "modifier": "private", "type": "boolean", "declarator": "central", "var_name": "central"}], "methods": [{"identifier": "LockKey", "parameters": "(String projectName, String branchName, boolean central)", "modifiers": "", "return": "", "signature": " LockKey(String projectName, String branchName, boolean central)", "full_signature": "  LockKey(String projectName, String branchName, boolean central)", "class_method_signature": "LockKey.LockKey(String projectName, String branchName, boolean central)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "LockKey.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LockKey.hashCode()", "testcase": false, "constructor": false}], "file": "de.blizzy.documentr/src/main/java/de/blizzy/documentr/repository/LockKey.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o == this) {\n\t\t\treturn true;\n\t\t} else if ((o != null) && o.getClass().equals(getClass())) {\n\t\t\tLockKey other = (LockKey) o;\n\t\t\treturn new EqualsBuilder()\n\t\t\t\t.append(projectName, other.projectName)\n\t\t\t\t.append(branchName, other.branchName)\n\t\t\t\t.append(central, other.central)\n\t\t\t\t.isEquals();\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "LockKey.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["equals", "getClass", "getClass", "isEquals", "append", "append", "append"]}, "repository": {"repo_id": 4238016, "url": "https://github.com/blizzy78/documentr", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 20324, "license": "licensed"}}