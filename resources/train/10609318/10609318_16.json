{"test_class": {"identifier": "BasicEncryptionTransformFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n            .getLogger(BasicEncryptionTransformFactoryTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n            .getLogger(BasicEncryptionTransformFactoryTest.class)", "var_name": "logger"}, {"original_string": "private Properties keyprops;", "modifier": "private", "type": "Properties", "declarator": "keyprops", "var_name": "keyprops"}, {"original_string": "private KeyPair masterKey;", "modifier": "private", "type": "KeyPair", "declarator": "masterKey", "var_name": "masterKey"}, {"original_string": "private KeyPair oldKey;", "modifier": "private", "type": "KeyPair", "declarator": "oldKey", "var_name": "oldKey"}, {"original_string": "protected Provider provider;", "modifier": "protected", "type": "Provider", "declarator": "provider", "var_name": "provider"}], "file": "vipr-object-transformations/src/test/java/com/emc/vipr/transform/encryption/BasicEncryptionTransformFactoryTest.java"}, "test_case": {"identifier": "testRejectNonRsaMasterKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRejectNonRsaMasterKey() throws Exception {\n        KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance(\"DSA\");\n        keyGenerator.initialize(512, new SecureRandom());\n        KeyPair myKeyPair = keyGenerator.generateKeyPair();\n\n        BasicEncryptionTransformFactory factory = new BasicEncryptionTransformFactory();\n        factory.setCryptoProvider(provider);\n\n        try {\n            factory.setMasterEncryptionKey(myKeyPair);\n        } catch (Exception e) {\n            // Good!\n            logger.info(\"DSA key was properly rejected by factory: \" + e);\n            return;\n        }\n        fail(\"DSA keys should not be allowed.\");\n    }", "signature": "void testRejectNonRsaMasterKey()", "full_signature": "@Test public void testRejectNonRsaMasterKey()", "class_method_signature": "BasicEncryptionTransformFactoryTest.testRejectNonRsaMasterKey()", "testcase": true, "constructor": false, "invocations": ["getInstance", "initialize", "generateKeyPair", "setCryptoProvider", "setMasterEncryptionKey", "info", "fail"]}, "focal_class": {"identifier": "BasicEncryptionTransformFactory", "superclass": "extends\n        EncryptionTransformFactory<BasicEncryptionOutputTransform, BasicEncryptionInputTransform>", "interfaces": "", "fields": [{"original_string": "Logger logger = LoggerFactory\n            .getLogger(BasicEncryptionTransformFactory.class);", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory\n            .getLogger(BasicEncryptionTransformFactory.class)", "var_name": "logger"}, {"original_string": "public KeyPair masterEncryptionKey;", "modifier": "public", "type": "KeyPair", "declarator": "masterEncryptionKey", "var_name": "masterEncryptionKey"}, {"original_string": "private String masterEncryptionKeyFingerprint;", "modifier": "private", "type": "String", "declarator": "masterEncryptionKeyFingerprint", "var_name": "masterEncryptionKeyFingerprint"}, {"original_string": "private Map<String, KeyPair> masterDecryptionKeys;", "modifier": "private", "type": "Map<String, KeyPair>", "declarator": "masterDecryptionKeys", "var_name": "masterDecryptionKeys"}], "methods": [{"identifier": "BasicEncryptionTransformFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicEncryptionTransformFactory()", "full_signature": "public  BasicEncryptionTransformFactory()", "class_method_signature": "BasicEncryptionTransformFactory.BasicEncryptionTransformFactory()", "testcase": false, "constructor": true}, {"identifier": "BasicEncryptionTransformFactory", "parameters": "(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys)", "modifiers": "public", "return": "", "signature": " BasicEncryptionTransformFactory(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys)", "full_signature": "public  BasicEncryptionTransformFactory(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys)", "class_method_signature": "BasicEncryptionTransformFactory.BasicEncryptionTransformFactory(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys)", "testcase": false, "constructor": true}, {"identifier": "BasicEncryptionTransformFactory", "parameters": "(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys, Provider provider)", "modifiers": "public", "return": "", "signature": " BasicEncryptionTransformFactory(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys, Provider provider)", "full_signature": "public  BasicEncryptionTransformFactory(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys, Provider provider)", "class_method_signature": "BasicEncryptionTransformFactory.BasicEncryptionTransformFactory(KeyPair masterEncryptionKey, \n            Set<KeyPair> masterDecryptionKeys, Provider provider)", "testcase": false, "constructor": true}, {"identifier": "setMasterEncryptionKey", "parameters": "(KeyPair pair)", "modifiers": "public", "return": "void", "signature": "void setMasterEncryptionKey(KeyPair pair)", "full_signature": "public void setMasterEncryptionKey(KeyPair pair)", "class_method_signature": "BasicEncryptionTransformFactory.setMasterEncryptionKey(KeyPair pair)", "testcase": false, "constructor": false}, {"identifier": "addMasterDecryptionKey", "parameters": "(KeyPair pair)", "modifiers": "public", "return": "void", "signature": "void addMasterDecryptionKey(KeyPair pair)", "full_signature": "public void addMasterDecryptionKey(KeyPair pair)", "class_method_signature": "BasicEncryptionTransformFactory.addMasterDecryptionKey(KeyPair pair)", "testcase": false, "constructor": false}, {"identifier": "rekey", "parameters": "(Map<String, String> metadata)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> rekey(Map<String, String> metadata)", "full_signature": "@Override public Map<String, String> rekey(Map<String, String> metadata)", "class_method_signature": "BasicEncryptionTransformFactory.rekey(Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "getOutputTransform", "parameters": "(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "modifiers": "@Override public", "return": "BasicEncryptionOutputTransform", "signature": "BasicEncryptionOutputTransform getOutputTransform(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "full_signature": "@Override public BasicEncryptionOutputTransform getOutputTransform(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "class_method_signature": "BasicEncryptionTransformFactory.getOutputTransform(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "testcase": false, "constructor": false}, {"identifier": "getOutputTransform", "parameters": "(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "modifiers": "@Override public", "return": "BasicEncryptionOutputTransform", "signature": "BasicEncryptionOutputTransform getOutputTransform(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "full_signature": "@Override public BasicEncryptionOutputTransform getOutputTransform(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "class_method_signature": "BasicEncryptionTransformFactory.getOutputTransform(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "testcase": false, "constructor": false}, {"identifier": "getInputTransform", "parameters": "(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "modifiers": "@Override public", "return": "BasicEncryptionInputTransform", "signature": "BasicEncryptionInputTransform getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "full_signature": "@Override public BasicEncryptionInputTransform getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "class_method_signature": "BasicEncryptionTransformFactory.getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "checkKeyLength", "parameters": "(KeyPair pair)", "modifiers": "private", "return": "void", "signature": "void checkKeyLength(KeyPair pair)", "full_signature": "private void checkKeyLength(KeyPair pair)", "class_method_signature": "BasicEncryptionTransformFactory.checkKeyLength(KeyPair pair)", "testcase": false, "constructor": false}], "file": "vipr-object-transformations/src/main/java/com/emc/vipr/transform/encryption/BasicEncryptionTransformFactory.java"}, "focal_method": {"identifier": "setMasterEncryptionKey", "parameters": "(KeyPair pair)", "modifiers": "public", "return": "void", "body": "public void setMasterEncryptionKey(KeyPair pair) {\n        if (!(pair.getPublic() instanceof RSAPublicKey)) {\n            throw new IllegalArgumentException(\n                    \"Only RSA KeyPairs are allowed, not \"\n                            + pair.getPublic().getAlgorithm());\n        }\n        checkKeyLength(pair);\n        this.masterEncryptionKey = pair;\n        try {\n            this.masterEncryptionKeyFingerprint = KeyUtils\n                    .getRsaPublicKeyFingerprint((RSAPublicKey) pair.getPublic(), provider);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"Error adding master key\", e);\n        }\n        addMasterDecryptionKey(pair);\n    }", "signature": "void setMasterEncryptionKey(KeyPair pair)", "full_signature": "public void setMasterEncryptionKey(KeyPair pair)", "class_method_signature": "BasicEncryptionTransformFactory.setMasterEncryptionKey(KeyPair pair)", "testcase": false, "constructor": false, "invocations": ["getPublic", "getAlgorithm", "getPublic", "checkKeyLength", "getRsaPublicKeyFingerprint", "getPublic", "addMasterDecryptionKey"]}, "repository": {"repo_id": 10609318, "url": "https://github.com/emcvipr/dataservices-sdk-java", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 18723, "license": "licensed"}}