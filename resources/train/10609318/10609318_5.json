{"test_class": {"identifier": "KeyStoreEncryptionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\n            KeyStoreEncryptionFactoryTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\n            KeyStoreEncryptionFactoryTest.class)", "var_name": "logger"}, {"original_string": "private KeyStore keystore;", "modifier": "private", "type": "KeyStore", "declarator": "keystore", "var_name": "keystore"}, {"original_string": "private String keystorePassword = \"viprviprvipr\";", "modifier": "private", "type": "String", "declarator": "keystorePassword = \"viprviprvipr\"", "var_name": "keystorePassword"}, {"original_string": "private String keyAlias = \"masterkey\";", "modifier": "private", "type": "String", "declarator": "keyAlias = \"masterkey\"", "var_name": "keyAlias"}, {"original_string": "private String keystoreFile = \"keystore.jks\";", "modifier": "private", "type": "String", "declarator": "keystoreFile = \"keystore.jks\"", "var_name": "keystoreFile"}, {"original_string": "protected Provider provider;", "modifier": "protected", "type": "Provider", "declarator": "provider", "var_name": "provider"}], "file": "vipr-object-transformations/src/test/java/com/emc/vipr/transform/encryption/KeyStoreEncryptionFactoryTest.java"}, "test_case": {"identifier": "testGetInputTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInputTransform() throws Exception {\n        Map<String, String> objectMetadata = new HashMap<String, String>();\n        objectMetadata.put(\"x-emc-enc-object-key\", \"iyuQuDL9qsfZk2XqnRihfw8ejr+OcrsflXvYD1I5o/Bw+wZPkY4Fm6py8ng25K/iw6kO0zbqq5v5Ywkng0pgrUdHLyR6Aq/dD0vKTK46E6sHZKknlM7NSixR8qaieBwwc2QnhOzyFPIVWSgwo9TqhlPRlOjftRLwU6Nt056BGt5Lhrqn3DeQpTrZW8LDjcpTC1UZtVXe3v9pXB4JEz8M4iFjnFprHykmixlR35RWOw4tIVEbsbcXZwt9RhVsDHj8qnkH66S88y4IOuuU4JJeFMywFXLdDs+MlUrYrA/MvfZNs34WKLYcFICKuLoHoGZ/gReJPbKy64lhSM8gTtYf/Q==\");\n        objectMetadata.put(\"x-emc-enc-key-id\", \"e3a69d422e6d9008e3cdfcbea674ccd9ab4758c3\");\n        objectMetadata.put(\"x-emc-enc-unencrypted-size\", \"2516125\");\n        objectMetadata.put(\"x-emc-enc-unencrypted-sha1\", \"027e997e6b1dfc97b93eb28dc9a6804096d85873\");\n        objectMetadata.put(\"x-emc-enc-metadata-signature\", \"F5IG2SC20oFpjLCc+5aETIy25tjUSodNlpmkae/1g91gkCYtP6NG6aLMQLHwyu789LmSegPQ/flUwcqdDE8nCI9Y2SuVbQIE5wvyB7RXRNqDIBKOan4xiOS/G5BwzzPFs6uL3I0b5Ya/VrJYhnDiRMAC+6L5kDbEVesHkx77qqCxku/SSMzCJ2K7kX/MYKfJdNQgXsFMAZs1PEcJpW8viQVTEYR8YR7bx37y4/lIHBotmC7HtB0RWAIGDFcHrnASyqpyHCYnwYjiPqItWaZy7WxRVM+qkH7IMtJT2XCuuI6VFmNzu57LN8p5ROBKO4l0hTgfgHMOUbpmQwuanb6p9Q==\");\n        objectMetadata.put(\"x-emc-iv\", \"OCoTA8kO0A+ZKkoZKa7VIQ==\");\n        objectMetadata.put(\"name1\", \"value1\");\n        objectMetadata.put(\"name2\", \"value2\");\n\n        InputStream encryptedObject = this.getClass().getClassLoader()\n                .getResourceAsStream(\"encrypted.txt.keystore.aes128\");\n\n        KeyStoreEncryptionFactory factory = new KeyStoreEncryptionFactory(keystore, \n                keyAlias, keystorePassword.toCharArray(), provider);\n\n        // Load the transform.\n        InputTransform inTransform = factory.getInputTransform(\"ENC:AES/CBC/PKCS5Padding\", encryptedObject, objectMetadata);\n        InputStream inStream = inTransform.getDecodedInputStream();\n        \n        byte[] buffer = new byte[4096];\n        int c = 0;\n        \n        // Decrypt into a buffer\n        ByteArrayOutputStream decryptedData = new ByteArrayOutputStream();\n        while ((c = inStream.read(buffer)) != -1) {\n            decryptedData.write(buffer, 0, c);\n        }\n\n        // Get original data to check.\n        InputStream originalStream = this.getClass().getClassLoader()\n                .getResourceAsStream(\"uncompressed.txt\");\n        ByteArrayOutputStream classByteStream = new ByteArrayOutputStream();\n        while ((c = originalStream.read(buffer)) != -1) {\n            classByteStream.write(buffer, 0, c);\n        }\n        byte[] originalData = classByteStream.toByteArray();\n        originalStream.close();\n        \n        assertArrayEquals(\"Decrypted data incorrect\", originalData, decryptedData.toByteArray());\n    }", "signature": "void testGetInputTransform()", "full_signature": "@Test public void testGetInputTransform()", "class_method_signature": "KeyStoreEncryptionFactoryTest.testGetInputTransform()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "getResourceAsStream", "getClassLoader", "getClass", "toCharArray", "getInputTransform", "getDecodedInputStream", "read", "write", "getResourceAsStream", "getClassLoader", "getClass", "read", "write", "toByteArray", "close", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "KeyStoreEncryptionFactory", "superclass": "extends\n        EncryptionTransformFactory<BasicEncryptionOutputTransform, BasicEncryptionInputTransform>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KeyStoreEncryptionFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KeyStoreEncryptionFactory.class)", "var_name": "logger"}, {"original_string": "private KeyStore keyStore;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "private String masterEncryptionKeyAlias;", "modifier": "private", "type": "String", "declarator": "masterEncryptionKeyAlias", "var_name": "masterEncryptionKeyAlias"}, {"original_string": "private String masterEncryptionKeyFingerprint;", "modifier": "private", "type": "String", "declarator": "masterEncryptionKeyFingerprint", "var_name": "masterEncryptionKeyFingerprint"}, {"original_string": "private char[] masterKeyPassword;", "modifier": "private", "type": "char[]", "declarator": "masterKeyPassword", "var_name": "masterKeyPassword"}, {"original_string": "private Map<String, String> idToAliasMap;", "modifier": "private", "type": "Map<String, String>", "declarator": "idToAliasMap", "var_name": "idToAliasMap"}], "methods": [{"identifier": "KeyStoreEncryptionFactory", "parameters": "(KeyStore keyStore,\n            String masterEncryptionKeyAlias, \n            char[] keyStorePassword)", "modifiers": "public", "return": "", "signature": " KeyStoreEncryptionFactory(KeyStore keyStore,\n            String masterEncryptionKeyAlias, \n            char[] keyStorePassword)", "full_signature": "public  KeyStoreEncryptionFactory(KeyStore keyStore,\n            String masterEncryptionKeyAlias, \n            char[] keyStorePassword)", "class_method_signature": "KeyStoreEncryptionFactory.KeyStoreEncryptionFactory(KeyStore keyStore,\n            String masterEncryptionKeyAlias, \n            char[] keyStorePassword)", "testcase": false, "constructor": true}, {"identifier": "KeyStoreEncryptionFactory", "parameters": "(KeyStore keyStore,\n            String masterEncryptionKeyAlias, char[] masterKeyPassword, Provider provider)", "modifiers": "public", "return": "", "signature": " KeyStoreEncryptionFactory(KeyStore keyStore,\n            String masterEncryptionKeyAlias, char[] masterKeyPassword, Provider provider)", "full_signature": "public  KeyStoreEncryptionFactory(KeyStore keyStore,\n            String masterEncryptionKeyAlias, char[] masterKeyPassword, Provider provider)", "class_method_signature": "KeyStoreEncryptionFactory.KeyStoreEncryptionFactory(KeyStore keyStore,\n            String masterEncryptionKeyAlias, char[] masterKeyPassword, Provider provider)", "testcase": false, "constructor": true}, {"identifier": "getFingerprint", "parameters": "(String alias)", "modifiers": "private", "return": "String", "signature": "String getFingerprint(String alias)", "full_signature": "private String getFingerprint(String alias)", "class_method_signature": "KeyStoreEncryptionFactory.getFingerprint(String alias)", "testcase": false, "constructor": false}, {"identifier": "rekey", "parameters": "(Map<String, String> metadata)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> rekey(Map<String, String> metadata)", "full_signature": "@Override public Map<String, String> rekey(Map<String, String> metadata)", "class_method_signature": "KeyStoreEncryptionFactory.rekey(Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "getKeyPair", "parameters": "(String alias)", "modifiers": "private", "return": "KeyPair", "signature": "KeyPair getKeyPair(String alias)", "full_signature": "private KeyPair getKeyPair(String alias)", "class_method_signature": "KeyStoreEncryptionFactory.getKeyPair(String alias)", "testcase": false, "constructor": false}, {"identifier": "getOutputTransform", "parameters": "(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "modifiers": "@Override public", "return": "BasicEncryptionOutputTransform", "signature": "BasicEncryptionOutputTransform getOutputTransform(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "full_signature": "@Override public BasicEncryptionOutputTransform getOutputTransform(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "class_method_signature": "KeyStoreEncryptionFactory.getOutputTransform(\n            OutputStream streamToEncodeTo, Map<String, String> metadataToEncode)", "testcase": false, "constructor": false}, {"identifier": "getOutputTransform", "parameters": "(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "modifiers": "@Override public", "return": "BasicEncryptionOutputTransform", "signature": "BasicEncryptionOutputTransform getOutputTransform(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "full_signature": "@Override public BasicEncryptionOutputTransform getOutputTransform(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "class_method_signature": "KeyStoreEncryptionFactory.getOutputTransform(\n            InputStream streamToEncode, Map<String, String> metadataToEncode)", "testcase": false, "constructor": false}, {"identifier": "getInputTransform", "parameters": "(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "modifiers": "@Override public", "return": "BasicEncryptionInputTransform", "signature": "BasicEncryptionInputTransform getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "full_signature": "@Override public BasicEncryptionInputTransform getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "class_method_signature": "KeyStoreEncryptionFactory.getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "getMasterEncryptionKeyAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMasterEncryptionKeyAlias()", "full_signature": "public String getMasterEncryptionKeyAlias()", "class_method_signature": "KeyStoreEncryptionFactory.getMasterEncryptionKeyAlias()", "testcase": false, "constructor": false}, {"identifier": "setMasterEncryptionKeyAlias", "parameters": "(String alias)", "modifiers": "public", "return": "void", "signature": "void setMasterEncryptionKeyAlias(String alias)", "full_signature": "public void setMasterEncryptionKeyAlias(String alias)", "class_method_signature": "KeyStoreEncryptionFactory.setMasterEncryptionKeyAlias(String alias)", "testcase": false, "constructor": false}], "file": "vipr-object-transformations/src/main/java/com/emc/vipr/transform/encryption/KeyStoreEncryptionFactory.java"}, "focal_method": {"identifier": "getInputTransform", "parameters": "(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "modifiers": "@Override public", "return": "BasicEncryptionInputTransform", "body": "@Override\n    public BasicEncryptionInputTransform getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata) throws IOException, TransformException {\n        String[] transformTuple = splitTransformConfig(transformConfig);\n        if (transformTuple.length != 2) {\n            throw new TransformException(\"Invalid transform configuration: \"\n                    + transformConfig);\n        }\n\n        if (!TransformConstants.ENCRYPTION_CLASS.equals(transformTuple[0])) {\n            throw new TransformException(\"Unsupported transform class: \"\n                    + transformTuple[0]);\n        }\n\n        // Find master key\n        String masterKeyId = metadata\n                .get(TransformConstants.META_ENCRYPTION_KEY_ID);\n        if (masterKeyId == null) {\n            throw new TransformException(\n                    \"Could not decrypt object. No master key ID set on object.\");\n        }\n        String masterKeyAlias = idToAliasMap.get(masterKeyId);\n        if(masterKeyAlias == null) {\n            throw new TransformException(\"Could not find master key for ID \" + masterKeyId);\n        }\n        \n        KeyPair asymmetricKey = getKeyPair(masterKeyAlias);\n        \n        return new BasicEncryptionInputTransform(transformTuple[1], streamToDecode, \n                metadata, asymmetricKey, provider);\n    }", "signature": "BasicEncryptionInputTransform getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "full_signature": "@Override public BasicEncryptionInputTransform getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "class_method_signature": "KeyStoreEncryptionFactory.getInputTransform(\n            String transformConfig, InputStream streamToDecode,\n            Map<String, String> metadata)", "testcase": false, "constructor": false, "invocations": ["splitTransformConfig", "equals", "get", "get", "getKeyPair"]}, "repository": {"repo_id": 10609318, "url": "https://github.com/emcvipr/dataservices-sdk-java", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 18723, "license": "licensed"}}