{"test_class": {"identifier": "MemoryProductStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProductStore productStore;", "modifier": "private", "type": "ProductStore", "declarator": "productStore", "var_name": "productStore"}], "file": "shop/catalog/internal/src/test/java/org/mayocat/shop/catalog/store/memory/MemoryProductStoreTest.java"}, "test_case": {"identifier": "testFindForCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindForCollection() throws InvalidEntityException, EntityAlreadyExistsException\n    {\n        Collection collection1 = new Collection();\n        collection1.setId(UUID.randomUUID());\n\n        Collection collection2 = new Collection();\n        collection2.setId(UUID.randomUUID());\n\n        Product product1 = new Product();\n        product1.setCollections(Arrays.asList(collection1));\n\n        Product product2 = new Product();\n        product2.setCollections(Arrays.asList(collection2));\n\n        Product product3 = new Product();\n        product3.setCollections(new ArrayList<Collection>());\n\n        Product product4 = new Product();\n        product4.setCollections(Arrays.asList(collection1, collection2));\n\n        product1 = productStore.create(product1);\n        product2 = productStore.create(product2);\n        product3 = productStore.create(product3);\n        product4 = productStore.create(product4);\n\n        List<Product> forCollection = productStore.findAllForCollection(collection1);\n        Assert.assertEquals(2, forCollection.size());\n        Assert.assertEquals(product1, forCollection.get(0));\n        Assert.assertEquals(product4, forCollection.get(1));\n    }", "signature": "void testFindForCollection()", "full_signature": "@Test public void testFindForCollection()", "class_method_signature": "MemoryProductStoreTest.testFindForCollection()", "testcase": true, "constructor": false, "invocations": ["setId", "randomUUID", "setId", "randomUUID", "setCollections", "asList", "setCollections", "asList", "setCollections", "setCollections", "asList", "create", "create", "create", "create", "findAllForCollection", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "MemoryProductStore", "superclass": "extends AbstractPositionedEntityMemoryStore<Product, DefaultPositionedEntity<Product>>", "interfaces": "implements ProductStore", "fields": [{"original_string": "private static final Predicate<Product> ON_SHELF = new Predicate<Product>()\n    {\n        public boolean apply(@Nullable Product input)\n        {\n            return input.getOnShelf() != null && input.getOnShelf();\n        }\n    };", "modifier": "private static final", "type": "Predicate<Product>", "declarator": "ON_SHELF = new Predicate<Product>()\n    {\n        public boolean apply(@Nullable Product input)\n        {\n            return input.getOnShelf() != null && input.getOnShelf();\n        }\n    }", "var_name": "ON_SHELF"}, {"original_string": "private static final Predicate<Product> NOT_A_VARIANT = new Predicate<Product>()\n    {\n        public boolean apply(@Nullable Product input)\n        {\n            return input.getParentId() == null || input.isVirtual();\n        }\n    };", "modifier": "private static final", "type": "Predicate<Product>", "declarator": "NOT_A_VARIANT = new Predicate<Product>()\n    {\n        public boolean apply(@Nullable Product input)\n        {\n            return input.getParentId() == null || input.isVirtual();\n        }\n    }", "var_name": "NOT_A_VARIANT"}], "methods": [{"identifier": "withTitleLike", "parameters": "(final String title)", "modifiers": "private static final", "return": "Predicate<Product>", "signature": "Predicate<Product> withTitleLike(final String title)", "full_signature": "private static final Predicate<Product> withTitleLike(final String title)", "class_method_signature": "MemoryProductStore.withTitleLike(final String title)", "testcase": false, "constructor": false}, {"identifier": "moveProduct", "parameters": "(String productToMove, String productToMoveRelativeTo,\n            RelativePosition relativePosition)", "modifiers": "public", "return": "void", "signature": "void moveProduct(String productToMove, String productToMoveRelativeTo,\n            RelativePosition relativePosition)", "full_signature": "public void moveProduct(String productToMove, String productToMoveRelativeTo,\n            RelativePosition relativePosition)", "class_method_signature": "MemoryProductStore.moveProduct(String productToMove, String productToMoveRelativeTo,\n            RelativePosition relativePosition)", "testcase": false, "constructor": false}, {"identifier": "updatePosition", "parameters": "(Integer position, Product product)", "modifiers": "public", "return": "void", "signature": "void updatePosition(Integer position, Product product)", "full_signature": "public void updatePosition(Integer position, Product product)", "class_method_signature": "MemoryProductStore.updatePosition(Integer position, Product product)", "testcase": false, "constructor": false}, {"identifier": "findOrphanProducts", "parameters": "()", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findOrphanProducts()", "full_signature": "public List<Product> findOrphanProducts()", "class_method_signature": "MemoryProductStore.findOrphanProducts()", "testcase": false, "constructor": false}, {"identifier": "countAllForCollection", "parameters": "(Collection collection)", "modifiers": "public", "return": "Integer", "signature": "Integer countAllForCollection(Collection collection)", "full_signature": "public Integer countAllForCollection(Collection collection)", "class_method_signature": "MemoryProductStore.countAllForCollection(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "findForCollection", "parameters": "(Collection collection, Integer number, Integer offset)", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findForCollection(Collection collection, Integer number, Integer offset)", "full_signature": "public List<Product> findForCollection(Collection collection, Integer number, Integer offset)", "class_method_signature": "MemoryProductStore.findForCollection(Collection collection, Integer number, Integer offset)", "testcase": false, "constructor": false}, {"identifier": "findOnShelfForCollection", "parameters": "(final Collection collection, Integer number, Integer offset)", "modifiers": "@Override public", "return": "List<Product>", "signature": "List<Product> findOnShelfForCollection(final Collection collection, Integer number, Integer offset)", "full_signature": "@Override public List<Product> findOnShelfForCollection(final Collection collection, Integer number, Integer offset)", "class_method_signature": "MemoryProductStore.findOnShelfForCollection(final Collection collection, Integer number, Integer offset)", "testcase": false, "constructor": false}, {"identifier": "findAllForCollection", "parameters": "(final Collection collection)", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findAllForCollection(final Collection collection)", "full_signature": "public List<Product> findAllForCollection(final Collection collection)", "class_method_signature": "MemoryProductStore.findAllForCollection(final Collection collection)", "testcase": false, "constructor": false}, {"identifier": "findAllOnShelf", "parameters": "(Integer number, Integer offset)", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findAllOnShelf(Integer number, Integer offset)", "full_signature": "public List<Product> findAllOnShelf(Integer number, Integer offset)", "class_method_signature": "MemoryProductStore.findAllOnShelf(Integer number, Integer offset)", "testcase": false, "constructor": false}, {"identifier": "countAllOnShelf", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer countAllOnShelf()", "full_signature": "public Integer countAllOnShelf()", "class_method_signature": "MemoryProductStore.countAllOnShelf()", "testcase": false, "constructor": false}, {"identifier": "findAllNotVariants", "parameters": "(Integer number, Integer offset)", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findAllNotVariants(Integer number, Integer offset)", "full_signature": "public List<Product> findAllNotVariants(Integer number, Integer offset)", "class_method_signature": "MemoryProductStore.findAllNotVariants(Integer number, Integer offset)", "testcase": false, "constructor": false}, {"identifier": "countAllNotVariants", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer countAllNotVariants()", "full_signature": "public Integer countAllNotVariants()", "class_method_signature": "MemoryProductStore.countAllNotVariants()", "testcase": false, "constructor": false}, {"identifier": "findAllWithTitleLike", "parameters": "(String title, Integer number, Integer offset)", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findAllWithTitleLike(String title, Integer number, Integer offset)", "full_signature": "public List<Product> findAllWithTitleLike(String title, Integer number, Integer offset)", "class_method_signature": "MemoryProductStore.findAllWithTitleLike(String title, Integer number, Integer offset)", "testcase": false, "constructor": false}, {"identifier": "countAllWithTitleLike", "parameters": "(String title)", "modifiers": "public", "return": "Integer", "signature": "Integer countAllWithTitleLike(String title)", "full_signature": "public Integer countAllWithTitleLike(String title)", "class_method_signature": "MemoryProductStore.countAllWithTitleLike(String title)", "testcase": false, "constructor": false}, {"identifier": "updateStock", "parameters": "(UUID productId, Integer stockOffset)", "modifiers": "public", "return": "void", "signature": "void updateStock(UUID productId, Integer stockOffset)", "full_signature": "public void updateStock(UUID productId, Integer stockOffset)", "class_method_signature": "MemoryProductStore.updateStock(UUID productId, Integer stockOffset)", "testcase": false, "constructor": false}, {"identifier": "findFeatures", "parameters": "(Product product)", "modifiers": "public", "return": "List<Feature>", "signature": "List<Feature> findFeatures(Product product)", "full_signature": "public List<Feature> findFeatures(Product product)", "class_method_signature": "MemoryProductStore.findFeatures(Product product)", "testcase": false, "constructor": false}, {"identifier": "findFeatures", "parameters": "(Product product, String feature)", "modifiers": "public", "return": "List<Feature>", "signature": "List<Feature> findFeatures(Product product, String feature)", "full_signature": "public List<Feature> findFeatures(Product product, String feature)", "class_method_signature": "MemoryProductStore.findFeatures(Product product, String feature)", "testcase": false, "constructor": false}, {"identifier": "findFeature", "parameters": "(Product product, String feature, String featureSlug)", "modifiers": "public", "return": "Feature", "signature": "Feature findFeature(Product product, String feature, String featureSlug)", "full_signature": "public Feature findFeature(Product product, String feature, String featureSlug)", "class_method_signature": "MemoryProductStore.findFeature(Product product, String feature, String featureSlug)", "testcase": false, "constructor": false}, {"identifier": "findVariants", "parameters": "(Product product)", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findVariants(Product product)", "full_signature": "public List<Product> findVariants(Product product)", "class_method_signature": "MemoryProductStore.findVariants(Product product)", "testcase": false, "constructor": false}, {"identifier": "findVariant", "parameters": "(Product product, String variantSlug)", "modifiers": "public", "return": "Product", "signature": "Product findVariant(Product product, String variantSlug)", "full_signature": "public Product findVariant(Product product, String variantSlug)", "class_method_signature": "MemoryProductStore.findVariant(Product product, String variantSlug)", "testcase": false, "constructor": false}, {"identifier": "createFeature", "parameters": "(Feature feature)", "modifiers": "public", "return": "Feature", "signature": "Feature createFeature(Feature feature)", "full_signature": "public Feature createFeature(Feature feature)", "class_method_signature": "MemoryProductStore.createFeature(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "findAllForCollection", "parameters": "(EntityAndParent<Collection> collection)", "modifiers": "public", "return": "List<Product>", "signature": "List<Product> findAllForCollection(EntityAndParent<Collection> collection)", "full_signature": "public List<Product> findAllForCollection(EntityAndParent<Collection> collection)", "class_method_signature": "MemoryProductStore.findAllForCollection(EntityAndParent<Collection> collection)", "testcase": false, "constructor": false}, {"identifier": "createForEntity", "parameters": "(Product entity, Integer position)", "modifiers": "protected", "return": "DefaultPositionedEntity<Product>", "signature": "DefaultPositionedEntity<Product> createForEntity(Product entity, Integer position)", "full_signature": "protected DefaultPositionedEntity<Product> createForEntity(Product entity, Integer position)", "class_method_signature": "MemoryProductStore.createForEntity(Product entity, Integer position)", "testcase": false, "constructor": false}], "file": "shop/catalog/internal/src/main/java/org/mayocat/shop/catalog/store/memory/MemoryProductStore.java"}, "focal_method": {"identifier": "findForCollection", "parameters": "(Collection collection, Integer number, Integer offset)", "modifiers": "public", "return": "List<Product>", "body": "public List<Product> findForCollection(Collection collection, Integer number, Integer offset)\n    {\n        if (number == 0) {\n            return FluentIterable.from(findAllForCollection(collection)).skip(offset).toList();\n        }\n        return FluentIterable.from(findAllForCollection(collection)).skip(offset).limit(number).toList();\n    }", "signature": "List<Product> findForCollection(Collection collection, Integer number, Integer offset)", "full_signature": "public List<Product> findForCollection(Collection collection, Integer number, Integer offset)", "class_method_signature": "MemoryProductStore.findForCollection(Collection collection, Integer number, Integer offset)", "testcase": false, "constructor": false, "invocations": ["toList", "skip", "from", "findAllForCollection", "toList", "limit", "skip", "from", "findAllForCollection"]}, "repository": {"repo_id": 3113319, "url": "https://github.com/jvelo/mayocat-shop", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 171, "size": 22758, "license": "licensed"}}