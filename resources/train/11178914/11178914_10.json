{"test_class": {"identifier": "AnnotatedSqlStatementTest", "superclass": "extends AbstractLSqlTest", "interfaces": "", "fields": [], "file": "lsql-core/src/test/java/com/w11k/lsql/statement/AnnotatedSqlStatementTest.java"}, "test_case": {"identifier": "outConverterConfiguration", "parameters": "()", "modifiers": "@Test() public", "return": "void", "body": "@Test()\n    public void outConverterConfiguration() {\n        addConfigHook(testConfig -> {\n            testConfig.getDialect().getConverterRegistry().addTypeAlias(\"ai\", new AtomicIntegerConverter());\n        });\n        setup();\n\n        String sql = \"-- column age: ai\\nselect age from person where id = 1;\";\n\n        AnnotatedSqlStatement as = new AnnotatedSqlStatement(\n                this.lSql, \"source\", \"stmtName\", \"\", sql);\n\n        Converter converter = as.getOutConverters().get(\"age\");\n        assertNotNull(converter);\n\n        PlainQuery query = new AnnotatedSqlStatementToQuery<PlainQuery>(as, emptyMap()) {\n            protected PlainQuery createQueryInstance(LSql lSql, PreparedStatement ps, Map<String, Converter> outConverters) {\n                return new PlainQuery(lSql, ps, outConverters);\n            }\n        }.query();\n\n        List<Row> rows = query.toList();\n        assertEquals(rows.size(), 1);\n        Row row = rows.get(0);\n        Object age = row.get(\"age\");\n        assertEquals(age.getClass(), AtomicInteger.class);\n    }", "signature": "void outConverterConfiguration()", "full_signature": "@Test() public void outConverterConfiguration()", "class_method_signature": "AnnotatedSqlStatementTest.outConverterConfiguration()", "testcase": true, "constructor": false, "invocations": ["addConfigHook", "addTypeAlias", "getConverterRegistry", "getDialect", "setup", "get", "getOutConverters", "assertNotNull", "query", "emptyMap", "toList", "assertEquals", "size", "get", "get", "assertEquals", "getClass"]}, "focal_class": {"identifier": "AnnotatedSqlStatement", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern QUERY_ARG_START = Pattern.compile(\n            \"/\\\\*\\\\s*(?!\\\\*/)(\\\\S*)\\\\s*:?\\\\s*(\\\\S*)\\\\s*=\\\\s*\\\\*/\");", "modifier": "private static final", "type": "Pattern", "declarator": "QUERY_ARG_START = Pattern.compile(\n            \"/\\\\*\\\\s*(?!\\\\*/)(\\\\S*)\\\\s*:?\\\\s*(\\\\S*)\\\\s*=\\\\s*\\\\*/\")", "var_name": "QUERY_ARG_START"}, {"original_string": "private static final String QUERY_ARG_END = \"/**/\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_ARG_END = \"/**/\"", "var_name": "QUERY_ARG_END"}, {"original_string": "private static final Pattern COLUMN_CONFIGURATION = Pattern.compile(\n            \"\\\\s*--\\\\s*column\\\\s+(.*):(.*)\"\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "COLUMN_CONFIGURATION = Pattern.compile(\n            \"\\\\s*--\\\\s*column\\\\s+(.*):(.*)\"\n    )", "var_name": "COLUMN_CONFIGURATION"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final LSql lSql;", "modifier": "private final", "type": "LSql", "declarator": "lSql", "var_name": "lSql"}, {"original_string": "private final String statementSourceName;", "modifier": "private final", "type": "String", "declarator": "statementSourceName", "var_name": "statementSourceName"}, {"original_string": "private final String statementName;", "modifier": "private final", "type": "String", "declarator": "statementName", "var_name": "statementName"}, {"original_string": "private final String typeAnnotation;", "modifier": "private final", "type": "String", "declarator": "typeAnnotation", "var_name": "typeAnnotation"}, {"original_string": "private final String sqlString;", "modifier": "private final", "type": "String", "declarator": "sqlString", "var_name": "sqlString"}, {"original_string": "private final Map<String, List<Parameter>> parameters;", "modifier": "private final", "type": "Map<String, List<Parameter>>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private final Map<String, Converter> outConverters;", "modifier": "private final", "type": "Map<String, Converter>", "declarator": "outConverters", "var_name": "outConverters"}], "methods": [{"identifier": "AnnotatedSqlStatement", "parameters": "(LSql lSql, String statementSourceName, String statementName, String typeAnnotation, String sqlString)", "modifiers": "public", "return": "", "signature": " AnnotatedSqlStatement(LSql lSql, String statementSourceName, String statementName, String typeAnnotation, String sqlString)", "full_signature": "public  AnnotatedSqlStatement(LSql lSql, String statementSourceName, String statementName, String typeAnnotation, String sqlString)", "class_method_signature": "AnnotatedSqlStatement.AnnotatedSqlStatement(LSql lSql, String statementSourceName, String statementName, String typeAnnotation, String sqlString)", "testcase": false, "constructor": true}, {"identifier": "getlSql", "parameters": "()", "modifiers": "public", "return": "com.w11k.lsql.LSql", "signature": "com.w11k.lsql.LSql getlSql()", "full_signature": "public com.w11k.lsql.LSql getlSql()", "class_method_signature": "AnnotatedSqlStatement.getlSql()", "testcase": false, "constructor": false}, {"identifier": "getStatementSourceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStatementSourceName()", "full_signature": "public String getStatementSourceName()", "class_method_signature": "AnnotatedSqlStatement.getStatementSourceName()", "testcase": false, "constructor": false}, {"identifier": "getStatementName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStatementName()", "full_signature": "public String getStatementName()", "class_method_signature": "AnnotatedSqlStatement.getStatementName()", "testcase": false, "constructor": false}, {"identifier": "getTypeAnnotation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTypeAnnotation()", "full_signature": "public String getTypeAnnotation()", "class_method_signature": "AnnotatedSqlStatement.getTypeAnnotation()", "testcase": false, "constructor": false}, {"identifier": "getSqlString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSqlString()", "full_signature": "public String getSqlString()", "class_method_signature": "AnnotatedSqlStatement.getSqlString()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "ImmutableMap<String, List<Parameter>>", "signature": "ImmutableMap<String, List<Parameter>> getParameters()", "full_signature": "public ImmutableMap<String, List<Parameter>> getParameters()", "class_method_signature": "AnnotatedSqlStatement.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getOutConverters", "parameters": "()", "modifiers": "public", "return": "Map<String, Converter>", "signature": "Map<String, Converter> getOutConverters()", "full_signature": "public Map<String, Converter> getOutConverters()", "class_method_signature": "AnnotatedSqlStatement.getOutConverters()", "testcase": false, "constructor": false}, {"identifier": "parseParameters", "parameters": "()", "modifiers": "private", "return": "Map<String, List<Parameter>>", "signature": "Map<String, List<Parameter>> parseParameters()", "full_signature": "private Map<String, List<Parameter>> parseParameters()", "class_method_signature": "AnnotatedSqlStatement.parseParameters()", "testcase": false, "constructor": false}, {"identifier": "extractParameterName", "parameters": "(String sqlString, int start)", "modifiers": "private", "return": "String", "signature": "String extractParameterName(String sqlString, int start)", "full_signature": "private String extractParameterName(String sqlString, int start)", "class_method_signature": "AnnotatedSqlStatement.extractParameterName(String sqlString, int start)", "testcase": false, "constructor": false}, {"identifier": "parseOutConverters", "parameters": "()", "modifiers": "private", "return": "Map<String, Converter>", "signature": "Map<String, Converter> parseOutConverters()", "full_signature": "private Map<String, Converter> parseOutConverters()", "class_method_signature": "AnnotatedSqlStatement.parseOutConverters()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Map<String, Object> queryParameters)", "modifiers": "private", "return": "void", "signature": "void log(Map<String, Object> queryParameters)", "full_signature": "private void log(Map<String, Object> queryParameters)", "class_method_signature": "AnnotatedSqlStatement.log(Map<String, Object> queryParameters)", "testcase": false, "constructor": false}, {"identifier": "processRawConversions", "parameters": "(String sql, List<ParameterInPreparedStatement> parameterInPreparedStatements)", "modifiers": "private", "return": "String", "signature": "String processRawConversions(String sql, List<ParameterInPreparedStatement> parameterInPreparedStatements)", "full_signature": "private String processRawConversions(String sql, List<ParameterInPreparedStatement> parameterInPreparedStatements)", "class_method_signature": "AnnotatedSqlStatement.processRawConversions(String sql, List<ParameterInPreparedStatement> parameterInPreparedStatements)", "testcase": false, "constructor": false}, {"identifier": "createPreparedStatement", "parameters": "(Map<String, Object> queryParameters,\n                                                     Map<String, Converter> parameterConverters)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement createPreparedStatement(Map<String, Object> queryParameters,\n                                                     Map<String, Converter> parameterConverters)", "full_signature": "public PreparedStatement createPreparedStatement(Map<String, Object> queryParameters,\n                                                     Map<String, Converter> parameterConverters)", "class_method_signature": "AnnotatedSqlStatement.createPreparedStatement(Map<String, Object> queryParameters,\n                                                     Map<String, Converter> parameterConverters)", "testcase": false, "constructor": false}, {"identifier": "getDescriptiveStatementName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getDescriptiveStatementName()", "full_signature": "private String getDescriptiveStatementName()", "class_method_signature": "AnnotatedSqlStatement.getDescriptiveStatementName()", "testcase": false, "constructor": false}], "file": "lsql-core/src/main/java/com/w11k/lsql/statement/AnnotatedSqlStatement.java"}, "focal_method": {"identifier": "getOutConverters", "parameters": "()", "modifiers": "public", "return": "Map<String, Converter>", "body": "public Map<String, Converter> getOutConverters() {\n        return outConverters;\n    }", "signature": "Map<String, Converter> getOutConverters()", "full_signature": "public Map<String, Converter> getOutConverters()", "class_method_signature": "AnnotatedSqlStatement.getOutConverters()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 11178914, "url": "https://github.com/w11k/lsql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2016, "license": "licensed"}}