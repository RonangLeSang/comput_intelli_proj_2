{"test_class": {"identifier": "LengthValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "stella-core/src/test/java/br/com/caelum/stella/validation/LengthValidatorTest.java"}, "test_case": {"identifier": "shouldAssertValidCorrectLengthStrings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAssertValidCorrectLengthStrings() {\n        LengthValidator validator = new LengthValidator(2);\n        validator.assertValid(\"23\");\n    }", "signature": "void shouldAssertValidCorrectLengthStrings()", "full_signature": "@Test public void shouldAssertValidCorrectLengthStrings()", "class_method_signature": "LengthValidatorTest.shouldAssertValidCorrectLengthStrings()", "testcase": true, "constructor": false, "invocations": ["assertValid"]}, "focal_class": {"identifier": "LengthValidator", "superclass": "", "interfaces": "implements Validator<Object>", "fields": [{"original_string": "private final int validLength;", "modifier": "private final", "type": "int", "declarator": "validLength", "var_name": "validLength"}, {"original_string": "private final BaseValidator base;", "modifier": "private final", "type": "BaseValidator", "declarator": "base", "var_name": "base"}], "methods": [{"identifier": "LengthValidator", "parameters": "(int validLength)", "modifiers": "public", "return": "", "signature": " LengthValidator(int validLength)", "full_signature": "public  LengthValidator(int validLength)", "class_method_signature": "LengthValidator.LengthValidator(int validLength)", "testcase": false, "constructor": true}, {"identifier": "LengthValidator", "parameters": "(MessageProducer messageProducer, int validLength)", "modifiers": "public", "return": "", "signature": " LengthValidator(MessageProducer messageProducer, int validLength)", "full_signature": "public  LengthValidator(MessageProducer messageProducer, int validLength)", "class_method_signature": "LengthValidator.LengthValidator(MessageProducer messageProducer, int validLength)", "testcase": false, "constructor": true}, {"identifier": "assertValid", "parameters": "(Object object)", "modifiers": "public", "return": "void", "signature": "void assertValid(Object object)", "full_signature": "public void assertValid(Object object)", "class_method_signature": "LengthValidator.assertValid(Object object)", "testcase": false, "constructor": false}, {"identifier": "getInvalidValuesFor", "parameters": "(Object object)", "modifiers": "private", "return": "List<InvalidValue>", "signature": "List<InvalidValue> getInvalidValuesFor(Object object)", "full_signature": "private List<InvalidValue> getInvalidValuesFor(Object object)", "class_method_signature": "LengthValidator.getInvalidValuesFor(Object object)", "testcase": false, "constructor": false}, {"identifier": "invalidMessagesFor", "parameters": "(Object object)", "modifiers": "public", "return": "List<ValidationMessage>", "signature": "List<ValidationMessage> invalidMessagesFor(Object object)", "full_signature": "public List<ValidationMessage> invalidMessagesFor(Object object)", "class_method_signature": "LengthValidator.invalidMessagesFor(Object object)", "testcase": false, "constructor": false}, {"identifier": "isEligible", "parameters": "(Object object)", "modifiers": "public", "return": "boolean", "signature": "boolean isEligible(Object object)", "full_signature": "public boolean isEligible(Object object)", "class_method_signature": "LengthValidator.isEligible(Object object)", "testcase": false, "constructor": false}, {"identifier": "generateRandomValid", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object generateRandomValid()", "full_signature": "@Override public Object generateRandomValid()", "class_method_signature": "LengthValidator.generateRandomValid()", "testcase": false, "constructor": false}], "file": "stella-core/src/main/java/br/com/caelum/stella/validation/LengthValidator.java"}, "focal_method": {"identifier": "assertValid", "parameters": "(Object object)", "modifiers": "public", "return": "void", "body": "public void assertValid(Object object) {\n        base.assertValid(getInvalidValuesFor(object));\n    }", "signature": "void assertValid(Object object)", "full_signature": "public void assertValid(Object object)", "class_method_signature": "LengthValidator.assertValid(Object object)", "testcase": false, "constructor": false, "invocations": ["assertValid", "getInvalidValuesFor"]}, "repository": {"repo_id": 209853, "url": "https://github.com/caelum/caelum-stella", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 554, "size": 15227, "license": "licensed"}}