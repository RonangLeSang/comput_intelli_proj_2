{"test_class": {"identifier": "CPFValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INVALID_FORMAT = \"INVALID FORMAT\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_FORMAT = \"INVALID FORMAT\"", "var_name": "INVALID_FORMAT"}, {"original_string": "private static final String REPEATED_DIGITS = \"REPEATED DIGITS\";", "modifier": "private static final", "type": "String", "declarator": "REPEATED_DIGITS = \"REPEATED DIGITS\"", "var_name": "REPEATED_DIGITS"}, {"original_string": "private static final String INVALID_CHECK_DIGITS = \"INVALID CHECK DIGITS\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_CHECK_DIGITS = \"INVALID CHECK DIGITS\"", "var_name": "INVALID_CHECK_DIGITS"}, {"original_string": "private static final String INVALID_DIGITS = \"INVALID DIGITS\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_DIGITS = \"INVALID DIGITS\"", "var_name": "INVALID_DIGITS"}, {"original_string": "private final String validString = \"248.438.034-80\";", "modifier": "private final", "type": "String", "declarator": "validString = \"248.438.034-80\"", "var_name": "validString"}, {"original_string": "private final String validStringNotFormatted = \"24843803480\";", "modifier": "private final", "type": "String", "declarator": "validStringNotFormatted = \"24843803480\"", "var_name": "validStringNotFormatted"}, {"original_string": "private final String firstCheckDigitWrongNotFormatted = \"24843803470\";", "modifier": "private final", "type": "String", "declarator": "firstCheckDigitWrongNotFormatted = \"24843803470\"", "var_name": "firstCheckDigitWrongNotFormatted"}, {"original_string": "private CPFValidator validator;", "modifier": "private", "type": "CPFValidator", "declarator": "validator", "var_name": "validator"}], "file": "stella-core/src/test/java/br/com/caelum/stella/validation/CPFValidatorTest.java"}, "test_case": {"identifier": "shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong() {\n        // VALID CPF = 099.075.865-60\n        try {\n            String value = \"09907586561\";\n            validator.assertValid(value);\n            fail();\n        } catch (InvalidStateException e) {\n            assertTrue(e.getInvalidMessages().size() == 1);\n            assertMessage(e, INVALID_CHECK_DIGITS);\n        }\n    }", "signature": "void shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong()", "full_signature": "@Test public void shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong()", "class_method_signature": "CPFValidatorTest.shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong()", "testcase": true, "constructor": false, "invocations": ["assertValid", "fail", "assertTrue", "size", "getInvalidMessages", "assertMessage"]}, "focal_class": {"identifier": "CPFValidator", "superclass": "", "interfaces": "implements Validator<String>", "fields": [{"original_string": "public static final Pattern FORMATED = Pattern.compile(\"(\\\\d{3})[.](\\\\d{3})[.](\\\\d{3})-(\\\\d{2})\");", "modifier": "public static final", "type": "Pattern", "declarator": "FORMATED = Pattern.compile(\"(\\\\d{3})[.](\\\\d{3})[.](\\\\d{3})-(\\\\d{2})\")", "var_name": "FORMATED"}, {"original_string": "public static final Pattern UNFORMATED = Pattern.compile(\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{2})\");", "modifier": "public static final", "type": "Pattern", "declarator": "UNFORMATED = Pattern.compile(\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{2})\")", "var_name": "UNFORMATED"}, {"original_string": "private final boolean isFormatted;", "modifier": "private final", "type": "boolean", "declarator": "isFormatted", "var_name": "isFormatted"}, {"original_string": "private final boolean isIgnoringRepeatedDigits;", "modifier": "private final", "type": "boolean", "declarator": "isIgnoringRepeatedDigits", "var_name": "isIgnoringRepeatedDigits"}, {"original_string": "private final MessageProducer messageProducer;", "modifier": "private final", "type": "MessageProducer", "declarator": "messageProducer", "var_name": "messageProducer"}], "methods": [{"identifier": "CPFValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " CPFValidator()", "full_signature": "public  CPFValidator()", "class_method_signature": "CPFValidator.CPFValidator()", "testcase": false, "constructor": true}, {"identifier": "CPFValidator", "parameters": "(boolean isFormatted)", "modifiers": "public", "return": "", "signature": " CPFValidator(boolean isFormatted)", "full_signature": "public  CPFValidator(boolean isFormatted)", "class_method_signature": "CPFValidator.CPFValidator(boolean isFormatted)", "testcase": false, "constructor": true}, {"identifier": "CPFValidator", "parameters": "(boolean isFormatted, boolean isIgnoringRepeatedDigits)", "modifiers": "public", "return": "", "signature": " CPFValidator(boolean isFormatted, boolean isIgnoringRepeatedDigits)", "full_signature": "public  CPFValidator(boolean isFormatted, boolean isIgnoringRepeatedDigits)", "class_method_signature": "CPFValidator.CPFValidator(boolean isFormatted, boolean isIgnoringRepeatedDigits)", "testcase": false, "constructor": true}, {"identifier": "CPFValidator", "parameters": "(MessageProducer messageProducer, boolean isFormatted)", "modifiers": "public", "return": "", "signature": " CPFValidator(MessageProducer messageProducer, boolean isFormatted)", "full_signature": "public  CPFValidator(MessageProducer messageProducer, boolean isFormatted)", "class_method_signature": "CPFValidator.CPFValidator(MessageProducer messageProducer, boolean isFormatted)", "testcase": false, "constructor": true}, {"identifier": "CPFValidator", "parameters": "(MessageProducer messageProducer, boolean isFormatted, boolean isIgnoringRepeatedDigits)", "modifiers": "public", "return": "", "signature": " CPFValidator(MessageProducer messageProducer, boolean isFormatted, boolean isIgnoringRepeatedDigits)", "full_signature": "public  CPFValidator(MessageProducer messageProducer, boolean isFormatted, boolean isIgnoringRepeatedDigits)", "class_method_signature": "CPFValidator.CPFValidator(MessageProducer messageProducer, boolean isFormatted, boolean isIgnoringRepeatedDigits)", "testcase": false, "constructor": true}, {"identifier": "getInvalidValues", "parameters": "(String cpf)", "modifiers": "private", "return": "List<ValidationMessage>", "signature": "List<ValidationMessage> getInvalidValues(String cpf)", "full_signature": "private List<ValidationMessage> getInvalidValues(String cpf)", "class_method_signature": "CPFValidator.getInvalidValues(String cpf)", "testcase": false, "constructor": false}, {"identifier": "calculaDigitos", "parameters": "(String cpfSemDigito)", "modifiers": "private", "return": "String", "signature": "String calculaDigitos(String cpfSemDigito)", "full_signature": "private String calculaDigitos(String cpfSemDigito)", "class_method_signature": "CPFValidator.calculaDigitos(String cpfSemDigito)", "testcase": false, "constructor": false}, {"identifier": "hasAllRepeatedDigits", "parameters": "(String cpf)", "modifiers": "private", "return": "boolean", "signature": "boolean hasAllRepeatedDigits(String cpf)", "full_signature": "private boolean hasAllRepeatedDigits(String cpf)", "class_method_signature": "CPFValidator.hasAllRepeatedDigits(String cpf)", "testcase": false, "constructor": false}, {"identifier": "isEligible", "parameters": "(String value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEligible(String value)", "full_signature": "@Override public boolean isEligible(String value)", "class_method_signature": "CPFValidator.isEligible(String value)", "testcase": false, "constructor": false}, {"identifier": "assertValid", "parameters": "(String cpf)", "modifiers": "@Override public", "return": "void", "signature": "void assertValid(String cpf)", "full_signature": "@Override public void assertValid(String cpf)", "class_method_signature": "CPFValidator.assertValid(String cpf)", "testcase": false, "constructor": false}, {"identifier": "invalidMessagesFor", "parameters": "(String cpf)", "modifiers": "@Override public", "return": "List<ValidationMessage>", "signature": "List<ValidationMessage> invalidMessagesFor(String cpf)", "full_signature": "@Override public List<ValidationMessage> invalidMessagesFor(String cpf)", "class_method_signature": "CPFValidator.invalidMessagesFor(String cpf)", "testcase": false, "constructor": false}, {"identifier": "generateRandomValid", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String generateRandomValid()", "full_signature": "@Override public String generateRandomValid()", "class_method_signature": "CPFValidator.generateRandomValid()", "testcase": false, "constructor": false}], "file": "stella-core/src/main/java/br/com/caelum/stella/validation/CPFValidator.java"}, "focal_method": {"identifier": "assertValid", "parameters": "(String cpf)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void assertValid(String cpf) {\n        List<ValidationMessage> errors = getInvalidValues(cpf);\n        if (!errors.isEmpty()) {\n            throw new InvalidStateException(errors);\n        }\n    }", "signature": "void assertValid(String cpf)", "full_signature": "@Override public void assertValid(String cpf)", "class_method_signature": "CPFValidator.assertValid(String cpf)", "testcase": false, "constructor": false, "invocations": ["getInvalidValues", "isEmpty"]}, "repository": {"repo_id": 209853, "url": "https://github.com/caelum/caelum-stella", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 554, "size": 15227, "license": "licensed"}}