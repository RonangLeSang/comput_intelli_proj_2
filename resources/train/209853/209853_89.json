{"test_class": {"identifier": "AcceptAnyValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "stella-core/src/test/java/br/com/caelum/stella/validation/AcceptAnyValidatorTest.java"}, "test_case": {"identifier": "testInvalidMessagesForCpf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidMessagesForCpf() {\n        Validator<String> validator = new AcceptAnyValidator(Documento.CPF);\n        String cpf = \"336.397.038-20\";\n        Assert.assertTrue(validator.invalidMessagesFor(cpf).isEmpty());\n    }", "signature": "void testInvalidMessagesForCpf()", "full_signature": "@Test public void testInvalidMessagesForCpf()", "class_method_signature": "AcceptAnyValidatorTest.testInvalidMessagesForCpf()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "invalidMessagesFor"]}, "focal_class": {"identifier": "AcceptAnyValidator", "superclass": "", "interfaces": "implements Validator<String>", "fields": [{"original_string": "private List<Validator<String>> validators = new ArrayList<Validator<String>>();", "modifier": "private", "type": "List<Validator<String>>", "declarator": "validators = new ArrayList<Validator<String>>()", "var_name": "validators"}], "methods": [{"identifier": "AcceptAnyValidator", "parameters": "(Documento... documentos)", "modifiers": "public", "return": "", "signature": " AcceptAnyValidator(Documento... documentos)", "full_signature": "public  AcceptAnyValidator(Documento... documentos)", "class_method_signature": "AcceptAnyValidator.AcceptAnyValidator(Documento... documentos)", "testcase": false, "constructor": true}, {"identifier": "AcceptAnyValidator", "parameters": "(boolean isFormatted, Documento... documentos)", "modifiers": "public", "return": "", "signature": " AcceptAnyValidator(boolean isFormatted, Documento... documentos)", "full_signature": "public  AcceptAnyValidator(boolean isFormatted, Documento... documentos)", "class_method_signature": "AcceptAnyValidator.AcceptAnyValidator(boolean isFormatted, Documento... documentos)", "testcase": false, "constructor": true}, {"identifier": "AcceptAnyValidator", "parameters": "(MessageProducer messageProducer, boolean isFormatted, Documento... documentos)", "modifiers": "public", "return": "", "signature": " AcceptAnyValidator(MessageProducer messageProducer, boolean isFormatted, Documento... documentos)", "full_signature": "public  AcceptAnyValidator(MessageProducer messageProducer, boolean isFormatted, Documento... documentos)", "class_method_signature": "AcceptAnyValidator.AcceptAnyValidator(MessageProducer messageProducer, boolean isFormatted, Documento... documentos)", "testcase": false, "constructor": true}, {"identifier": "assertValid", "parameters": "(String value)", "modifiers": "public", "return": "void", "signature": "void assertValid(String value)", "full_signature": "public void assertValid(String value)", "class_method_signature": "AcceptAnyValidator.assertValid(String value)", "testcase": false, "constructor": false}, {"identifier": "invalidMessagesFor", "parameters": "(String value)", "modifiers": "public", "return": "List<ValidationMessage>", "signature": "List<ValidationMessage> invalidMessagesFor(String value)", "full_signature": "public List<ValidationMessage> invalidMessagesFor(String value)", "class_method_signature": "AcceptAnyValidator.invalidMessagesFor(String value)", "testcase": false, "constructor": false}, {"identifier": "isEligible", "parameters": "(String object)", "modifiers": "public", "return": "boolean", "signature": "boolean isEligible(String object)", "full_signature": "public boolean isEligible(String object)", "class_method_signature": "AcceptAnyValidator.isEligible(String object)", "testcase": false, "constructor": false}, {"identifier": "generateRandomValid", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String generateRandomValid()", "full_signature": "@Override public String generateRandomValid()", "class_method_signature": "AcceptAnyValidator.generateRandomValid()", "testcase": false, "constructor": false}], "file": "stella-core/src/main/java/br/com/caelum/stella/validation/AcceptAnyValidator.java"}, "focal_method": {"identifier": "invalidMessagesFor", "parameters": "(String value)", "modifiers": "public", "return": "List<ValidationMessage>", "body": "public List<ValidationMessage> invalidMessagesFor(String value) {\n        List<ValidationMessage> result = new ArrayList<ValidationMessage>();\n        for (Validator<String> validator : validators) {\n            List<ValidationMessage> messages = validator.invalidMessagesFor(value);\n            if (messages.isEmpty()) {\n                result.clear();\n                break;\n            } else {\n                result.addAll(messages);\n            }\n        }\n        return result;\n    }", "signature": "List<ValidationMessage> invalidMessagesFor(String value)", "full_signature": "public List<ValidationMessage> invalidMessagesFor(String value)", "class_method_signature": "AcceptAnyValidator.invalidMessagesFor(String value)", "testcase": false, "constructor": false, "invocations": ["invalidMessagesFor", "isEmpty", "clear", "addAll"]}, "repository": {"repo_id": 209853, "url": "https://github.com/caelum/caelum-stella", "language": "Java", "is_fork": false, "fork_count": 323, "stargazer_count": 554, "size": 15227, "license": "licensed"}}