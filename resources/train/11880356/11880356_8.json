{"test_class": {"identifier": "DbfRowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String COLUMN_1 = \"column 1\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_1 = \"column 1\"", "var_name": "COLUMN_1"}, {"original_string": "private static final String COLUMN_2 = \"column 2\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_2 = \"column 2\"", "var_name": "COLUMN_2"}, {"original_string": "private static final String UNKNOWN_COLUMN = \"unknown column\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_COLUMN = \"unknown column\"", "var_name": "UNKNOWN_COLUMN"}, {"original_string": "private DbfHeader header = mock(DbfHeader.class);", "modifier": "private", "type": "DbfHeader", "declarator": "header = mock(DbfHeader.class)", "var_name": "header"}], "file": "dbf-reader/src/test/java/org/jamel/dbf/structure/DbfRowTest.java"}, "test_case": {"identifier": "getFloat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFloat() {\n        float value = 10.004f;\n        DbfRow dbfRow = createRow(null, value);\n\n        assertEquals(0, dbfRow.getFloat(COLUMN_1), 0.5);\n        assertEquals(value, dbfRow.getFloat(COLUMN_2), 0.5);\n    }", "signature": "void getFloat()", "full_signature": "@Test public void getFloat()", "class_method_signature": "DbfRowTest.getFloat()", "testcase": true, "constructor": false, "invocations": ["createRow", "assertEquals", "getFloat", "assertEquals", "getFloat"]}, "focal_class": {"identifier": "DbfRow", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Long ZERO = 0L;", "modifier": "private static final", "type": "Long", "declarator": "ZERO = 0L", "var_name": "ZERO"}, {"original_string": "private final DbfHeader header;", "modifier": "private final", "type": "DbfHeader", "declarator": "header", "var_name": "header"}, {"original_string": "private final Charset defaultCharset;", "modifier": "private final", "type": "Charset", "declarator": "defaultCharset", "var_name": "defaultCharset"}, {"original_string": "private final Object[] row;", "modifier": "private final", "type": "Object[]", "declarator": "row", "var_name": "row"}], "methods": [{"identifier": "DbfRow", "parameters": "(DbfHeader header, Charset defaultCharset, Object[] row)", "modifiers": "public", "return": "", "signature": " DbfRow(DbfHeader header, Charset defaultCharset, Object[] row)", "full_signature": "public  DbfRow(DbfHeader header, Charset defaultCharset, Object[] row)", "class_method_signature": "DbfRow.DbfRow(DbfHeader header, Charset defaultCharset, Object[] row)", "testcase": false, "constructor": true}, {"identifier": "getBigDecimal", "parameters": "(String fieldName)", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getBigDecimal(String fieldName)", "full_signature": "public BigDecimal getBigDecimal(String fieldName)", "class_method_signature": "DbfRow.getBigDecimal(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(String fieldName)", "modifiers": "public", "return": "Date", "signature": "Date getDate(String fieldName)", "full_signature": "public Date getDate(String fieldName)", "class_method_signature": "DbfRow.getDate(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String fieldName)", "modifiers": "public", "return": "String", "signature": "String getString(String fieldName)", "full_signature": "public String getString(String fieldName)", "class_method_signature": "DbfRow.getString(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String fieldName, Charset charset)", "modifiers": "public", "return": "String", "signature": "String getString(String fieldName, Charset charset)", "full_signature": "public String getString(String fieldName, Charset charset)", "class_method_signature": "DbfRow.getString(String fieldName, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "(String fieldName)", "modifiers": "public", "return": "boolean", "signature": "boolean getBoolean(String fieldName)", "full_signature": "public boolean getBoolean(String fieldName)", "class_method_signature": "DbfRow.getBoolean(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(String fieldName)", "modifiers": "public", "return": "int", "signature": "int getInt(String fieldName)", "full_signature": "public int getInt(String fieldName)", "class_method_signature": "DbfRow.getInt(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(String fieldName)", "modifiers": "public", "return": "short", "signature": "short getShort(String fieldName)", "full_signature": "public short getShort(String fieldName)", "class_method_signature": "DbfRow.getShort(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getByte", "parameters": "(String fieldName)", "modifiers": "public", "return": "byte", "signature": "byte getByte(String fieldName)", "full_signature": "public byte getByte(String fieldName)", "class_method_signature": "DbfRow.getByte(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(String fieldName)", "modifiers": "public", "return": "long", "signature": "long getLong(String fieldName)", "full_signature": "public long getLong(String fieldName)", "class_method_signature": "DbfRow.getLong(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFloat", "parameters": "(String fieldName)", "modifiers": "public", "return": "float", "signature": "float getFloat(String fieldName)", "full_signature": "public float getFloat(String fieldName)", "class_method_signature": "DbfRow.getFloat(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(String fieldName)", "modifiers": "public", "return": "double", "signature": "double getDouble(String fieldName)", "full_signature": "public double getDouble(String fieldName)", "class_method_signature": "DbfRow.getDouble(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "(String fieldName)", "modifiers": "public", "return": "Object", "signature": "Object getObject(String fieldName)", "full_signature": "public Object getObject(String fieldName)", "class_method_signature": "DbfRow.getObject(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getNumber", "parameters": "(String fieldName)", "modifiers": "private", "return": "Number", "signature": "Number getNumber(String fieldName)", "full_signature": "private Number getNumber(String fieldName)", "class_method_signature": "DbfRow.getNumber(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String fieldName)", "modifiers": "private", "return": "Object", "signature": "Object get(String fieldName)", "full_signature": "private Object get(String fieldName)", "class_method_signature": "DbfRow.get(String fieldName)", "testcase": false, "constructor": false}], "file": "dbf-reader/src/main/java/org/jamel/dbf/structure/DbfRow.java"}, "focal_method": {"identifier": "getFloat", "parameters": "(String fieldName)", "modifiers": "public", "return": "float", "body": "public float getFloat(String fieldName) throws DbfException {\n        return getNumber(fieldName).floatValue();\n    }", "signature": "float getFloat(String fieldName)", "full_signature": "public float getFloat(String fieldName)", "class_method_signature": "DbfRow.getFloat(String fieldName)", "testcase": false, "constructor": false, "invocations": ["floatValue", "getNumber"]}, "repository": {"repo_id": 11880356, "url": "https://github.com/jamel/dbf", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 60, "size": 152, "license": "licensed"}}