{"test_class": {"identifier": "OperatorFormatterTest", "superclass": "", "interfaces": "", "fields": [], "file": "impl/src/test/java/org/pentaho/commons/metadata/mqleditor/editor/service/util/OperatorFormatterTest.java"}, "test_case": {"identifier": "formatIn_two_quotes_with_whitespace_2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void formatIn_two_quotes_with_whitespace_2() {\n    final OperatorFormatter f = new OperatorFormatter();\n    final String objectName = \"[CAT.COL]\"; //$NON-NLS-1$\n    String formatted = f.formatCondition( Operator.IN, objectName, \"2|  \\\"value\\\"  \", false ); //$NON-NLS-1$\n    Assert.assertEquals( \"IN([CAT.COL];\\\"2\\\";\\\"value\\\")\", formatted ); //$NON-NLS-1$\n  }", "signature": "void formatIn_two_quotes_with_whitespace_2()", "full_signature": "@Test public void formatIn_two_quotes_with_whitespace_2()", "class_method_signature": "OperatorFormatterTest.formatIn_two_quotes_with_whitespace_2()", "testcase": true, "constructor": false, "invocations": ["formatCondition", "assertEquals"]}, "focal_class": {"identifier": "OperatorFormatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PIPE_EVAL = \"[|]{0,1}\";", "modifier": "private static final", "type": "String", "declarator": "PIPE_EVAL = \"[|]{0,1}\"", "var_name": "PIPE_EVAL"}, {"original_string": "private static final String IN_EVAL = \"([^|]+)\" + PIPE_EVAL;", "modifier": "private static final", "type": "String", "declarator": "IN_EVAL = \"([^|]+)\" + PIPE_EVAL", "var_name": "IN_EVAL"}, {"original_string": "private static final String IN_EVAL_QUOTES = \"\\\\s*\\\"([^\\\"]*)\\\"\\\\s*\" + PIPE_EVAL;", "modifier": "private static final", "type": "String", "declarator": "IN_EVAL_QUOTES = \"\\\\s*\\\"([^\\\"]*)\\\"\\\\s*\" + PIPE_EVAL", "var_name": "IN_EVAL_QUOTES"}, {"original_string": "private static final Pattern IN_EVAL_PAT = Pattern.compile( IN_EVAL_QUOTES + \"|\" + IN_EVAL );", "modifier": "private static final", "type": "Pattern", "declarator": "IN_EVAL_PAT = Pattern.compile( IN_EVAL_QUOTES + \"|\" + IN_EVAL )", "var_name": "IN_EVAL_PAT"}], "methods": [{"identifier": "formatCondition", "parameters": "( Operator op, String objectName, String value, boolean parameterized )", "modifiers": "public", "return": "String", "signature": "String formatCondition( Operator op, String objectName, String value, boolean parameterized )", "full_signature": "public String formatCondition( Operator op, String objectName, String value, boolean parameterized )", "class_method_signature": "OperatorFormatter.formatCondition( Operator op, String objectName, String value, boolean parameterized )", "testcase": false, "constructor": false}], "file": "impl/src/main/java/org/pentaho/commons/metadata/mqleditor/editor/service/util/OperatorFormatter.java"}, "focal_method": {"identifier": "formatCondition", "parameters": "( Operator op, String objectName, String value, boolean parameterized )", "modifiers": "public", "return": "String", "body": "public String formatCondition( Operator op, String objectName, String value, boolean parameterized ) {\n    if ( parameterized ) {\n      value = \"[param:\" + value.replaceAll( \"[\\\\{\\\\}]\", \"\" ) + \"]\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n    } else if ( op == Operator.IN ) {\n      Matcher m = IN_EVAL_PAT.matcher( value );\n      StringBuilder sb = new StringBuilder();\n      while ( m.find() ) {\n        if ( sb.length() > 0 ) {\n          sb.append( \";\" ); //$NON-NLS-1$\n        }\n        sb.append( \"\\\"\" ); //$NON-NLS-1$\n        sb.append( m.group( 1 ) != null ? m.group( 1 ) : m.group( 2 ) );\n        sb.append( \"\\\"\" ); //$NON-NLS-1$\n      }\n      if ( sb.length() > 0 ) {\n        value = sb.toString();\n      }\n    } else if ( op.getOperatorType() == 0 || op.getOperatorType() == 2 ) {\n      value = \"\\\"\" + value + \"\\\"\"; //$NON-NLS-1$ //$NON-NLS-2$ \n    }\n    String retVal = \"\"; //$NON-NLS-1$\n\n    switch ( op ) {\n      case EXACTLY_MATCHES:\n      case EQUAL:\n        retVal += \"EQUALS(\" + objectName + \";\" + value + \")\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        break;\n      case CONTAINS:\n        retVal += \"CONTAINS(\" + objectName + \";\" + value + \")\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        break;\n      case DOES_NOT_CONTAIN:\n        retVal += \"NOT(CONTAINS(\" + objectName + \";\" + value + \"))\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        break;\n      case BEGINS_WITH:\n        retVal += \"BEGINSWITH(\" + objectName + \";\" + value + \")\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        break;\n      case ENDS_WITH:\n        retVal += \"ENDSWITH(\" + objectName + \";\" + value + \")\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        break;\n      case IS_NULL:\n        retVal += \"ISNA(\" + objectName + \")\"; //$NON-NLS-1$ //$NON-NLS-2$\n        break;\n      case IS_NOT_NULL:\n        retVal += \"NOT(ISNA(\" + objectName + \"))\"; //$NON-NLS-1$ //$NON-NLS-2$\n        break;\n      case IN:\n        retVal += \"IN(\" + objectName + \";\" + value + \")\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        break;\n      default:\n        retVal = objectName + \" \" + op.toString(); //$NON-NLS-1$\n        if ( op.getRequiresValue() ) {\n          retVal += value;\n        }\n        break;\n    }\n    return retVal;\n\n  }", "signature": "String formatCondition( Operator op, String objectName, String value, boolean parameterized )", "full_signature": "public String formatCondition( Operator op, String objectName, String value, boolean parameterized )", "class_method_signature": "OperatorFormatter.formatCondition( Operator op, String objectName, String value, boolean parameterized )", "testcase": false, "constructor": false, "invocations": ["replaceAll", "matcher", "find", "length", "append", "append", "append", "group", "group", "group", "append", "length", "toString", "getOperatorType", "getOperatorType", "toString", "getRequiresValue"]}, "repository": {"repo_id": 13073335, "url": "https://github.com/pentaho/mql-editor", "language": "Java", "is_fork": false, "fork_count": 46, "stargazer_count": 10, "size": 73217, "license": "licensed"}}