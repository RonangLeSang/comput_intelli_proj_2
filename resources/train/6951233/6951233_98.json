{"test_class": {"identifier": "ConversionUtilTest", "superclass": "extends BaseModuleWebContextSensitiveTest", "interfaces": "", "fields": [], "file": "omod-common/src/test/java/org/openmrs/module/webservices/rest/web/ConversionUtilTest.java"}, "test_case": {"identifier": "convert_shouldReturnFalseOnIncorrectDateFromString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void convert_shouldReturnFalseOnIncorrectDateFromString() throws Exception {\n\t\tDate expected = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\").parse(\"2011-05-01T00:00:00.000+0530\");\n\t\tString[] dateFormats = { \"2011-05-01T00:00:00.000+0200\", \"2012-05-01T00:00:00.000\" };\n\t\tfor (int i = 0; i < dateFormats.length; i++) {\n\t\t\tDate result = (Date) ConversionUtil.convert(dateFormats[i], Date.class);\n\t\t\tAssert.assertTrue(result != expected);\n\t\t}\n\t}", "signature": "void convert_shouldReturnFalseOnIncorrectDateFromString()", "full_signature": "@Test public void convert_shouldReturnFalseOnIncorrectDateFromString()", "class_method_signature": "ConversionUtilTest.convert_shouldReturnFalseOnIncorrectDateFromString()", "testcase": true, "constructor": false, "invocations": ["parse", "convert", "assertTrue"]}, "focal_class": {"identifier": "ConversionUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Log log = LogFactory.getLog(ConversionUtil.class);", "modifier": "static final", "type": "Log", "declarator": "log = LogFactory.getLog(ConversionUtil.class)", "var_name": "log"}, {"original_string": "public static final String DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";", "modifier": "public static final", "type": "String", "declarator": "DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", "var_name": "DATE_FORMAT"}, {"original_string": "private static Map<String, Type> typeVariableMap = new ConcurrentHashMap<String, Type>();", "modifier": "private static", "type": "Map<String, Type>", "declarator": "typeVariableMap = new ConcurrentHashMap<String, Type>()", "var_name": "typeVariableMap"}, {"original_string": "private static ConcurrentMap<Class<?>, Converter> converterCache;", "modifier": "private static", "type": "ConcurrentMap<Class<?>, Converter>", "declarator": "converterCache", "var_name": "converterCache"}, {"original_string": "private static Converter nullConverter;", "modifier": "private static", "type": "Converter", "declarator": "nullConverter", "var_name": "nullConverter"}], "methods": [{"identifier": "clearCache", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearCache()", "full_signature": "public static void clearCache()", "class_method_signature": "ConversionUtil.clearCache()", "testcase": false, "constructor": false}, {"identifier": "getConverter", "parameters": "(Class<T> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Converter<T>", "signature": "Converter<T> getConverter(Class<T> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Converter<T> getConverter(Class<T> clazz)", "class_method_signature": "ConversionUtil.getConverter(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object object, Type toType, Object instance)", "modifiers": "public static", "return": "Object", "signature": "Object convert(Object object, Type toType, Object instance)", "full_signature": "public static Object convert(Object object, Type toType, Object instance)", "class_method_signature": "ConversionUtil.convert(Object object, Type toType, Object instance)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object object, Type toType)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static", "return": "Object", "signature": "Object convert(Object object, Type toType)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static Object convert(Object object, Type toType)", "class_method_signature": "ConversionUtil.convert(Object object, Type toType)", "testcase": false, "constructor": false}, {"identifier": "convertMap", "parameters": "(Map<String, ?> map, Class<?> toClass)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static", "return": "Object", "signature": "Object convertMap(Map<String, ?> map, Class<?> toClass)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static Object convertMap(Map<String, ?> map, Class<?> toClass)", "class_method_signature": "ConversionUtil.convertMap(Map<String, ?> map, Class<?> toClass)", "testcase": false, "constructor": false}, {"identifier": "getPropertyWithRepresentation", "parameters": "(Object bean, String propertyName, Representation rep)", "modifiers": "public static", "return": "Object", "signature": "Object getPropertyWithRepresentation(Object bean, String propertyName, Representation rep)", "full_signature": "public static Object getPropertyWithRepresentation(Object bean, String propertyName, Representation rep)", "class_method_signature": "ConversionUtil.getPropertyWithRepresentation(Object bean, String propertyName, Representation rep)", "testcase": false, "constructor": false}, {"identifier": "convertToRepresentation", "parameters": "(S o, Representation rep)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object convertToRepresentation(S o, Representation rep)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object convertToRepresentation(S o, Representation rep)", "class_method_signature": "ConversionUtil.convertToRepresentation(S o, Representation rep)", "testcase": false, "constructor": false}, {"identifier": "convertToRepresentation", "parameters": "(S o, Representation rep, Class<?> convertAs)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object convertToRepresentation(S o, Representation rep, Class<?> convertAs)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object convertToRepresentation(S o, Representation rep, Class<?> convertAs)", "class_method_signature": "ConversionUtil.convertToRepresentation(S o, Representation rep, Class<?> convertAs)", "testcase": false, "constructor": false}, {"identifier": "convertToRepresentation", "parameters": "(S o, Representation rep, Converter specificConverter)", "modifiers": "public static", "return": "Object", "signature": "Object convertToRepresentation(S o, Representation rep, Converter specificConverter)", "full_signature": "public static Object convertToRepresentation(S o, Representation rep, Converter specificConverter)", "class_method_signature": "ConversionUtil.convertToRepresentation(S o, Representation rep, Converter specificConverter)", "testcase": false, "constructor": false}, {"identifier": "getTypeVariableClass", "parameters": "(Class<?> instanceClass, TypeVariable<?> typeVariable)", "modifiers": "public static", "return": "Type", "signature": "Type getTypeVariableClass(Class<?> instanceClass, TypeVariable<?> typeVariable)", "full_signature": "public static Type getTypeVariableClass(Class<?> instanceClass, TypeVariable<?> typeVariable)", "class_method_signature": "ConversionUtil.getTypeVariableClass(Class<?> instanceClass, TypeVariable<?> typeVariable)", "testcase": false, "constructor": false}, {"identifier": "getAuditInfo", "parameters": "(Object delegate)", "modifiers": "public static", "return": "SimpleObject", "signature": "SimpleObject getAuditInfo(Object delegate)", "full_signature": "public static SimpleObject getAuditInfo(Object delegate)", "class_method_signature": "ConversionUtil.getAuditInfo(Object delegate)", "testcase": false, "constructor": false}], "file": "omod-common/src/main/java/org/openmrs/module/webservices/rest/web/ConversionUtil.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object object, Type toType, Object instance)", "modifiers": "public static", "return": "Object", "body": "public static Object convert(Object object, Type toType, Object instance) throws ConversionException {\n\t\tif (instance != null && toType instanceof TypeVariable<?>) {\n\t\t\tTypeVariable<?> temp = ((TypeVariable<?>) toType);\n\t\t\ttoType = getTypeVariableClass(instance.getClass(), temp);\n\t\t}\n\t\t\n\t\treturn convert(object, toType);\n\t}", "signature": "Object convert(Object object, Type toType, Object instance)", "full_signature": "public static Object convert(Object object, Type toType, Object instance)", "class_method_signature": "ConversionUtil.convert(Object object, Type toType, Object instance)", "testcase": false, "constructor": false, "invocations": ["getTypeVariableClass", "getClass", "convert"]}, "repository": {"repo_id": 6951233, "url": "https://github.com/openmrs/openmrs-module-webservices.rest", "language": "Java", "is_fork": false, "fork_count": 383, "stargazer_count": 46, "size": 7213, "license": "licensed"}}