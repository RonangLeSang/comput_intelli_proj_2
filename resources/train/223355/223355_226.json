{"test_class": {"identifier": "TestContentTypeResolver", "superclass": "", "interfaces": "", "fields": [], "file": "wro4j-core/src/test/java/ro/isdc/wro/http/support/TestContentTypeResolver.java"}, "test_case": {"identifier": "shouldResolveFontExtensionTtf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldResolveFontExtensionTtf() {\n    assertEquals(\"application/octet-stream\", ContentTypeResolver.get(\"font.ttf\"));\n  }", "signature": "void shouldResolveFontExtensionTtf()", "full_signature": "@Test public void shouldResolveFontExtensionTtf()", "class_method_signature": "TestContentTypeResolver.shouldResolveFontExtensionTtf()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get"]}, "focal_class": {"identifier": "ContentTypeResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_CONTENT_TYPE = \"application/octet-stream\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONTENT_TYPE = \"application/octet-stream\"", "var_name": "DEFAULT_CONTENT_TYPE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ContentTypeResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ContentTypeResolver.class)", "var_name": "LOG"}, {"original_string": "private final static Map<String, String> defaultContentTypeMap = new HashMap<String, String>();", "modifier": "private final static", "type": "Map<String, String>", "declarator": "defaultContentTypeMap = new HashMap<String, String>()", "var_name": "defaultContentTypeMap"}, {"original_string": "private final static Set<String> requiresCharset = new HashSet<String>();", "modifier": "private final static", "type": "Set<String>", "declarator": "requiresCharset = new HashSet<String>()", "var_name": "requiresCharset"}], "methods": [{"identifier": "get", "parameters": "(final String fileName)", "modifiers": "public static", "return": "String", "signature": "String get(final String fileName)", "full_signature": "public static String get(final String fileName)", "class_method_signature": "ContentTypeResolver.get(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String fileName, final String encoding)", "modifiers": "public static", "return": "String", "signature": "String get(final String fileName, final String encoding)", "full_signature": "public static String get(final String fileName, final String encoding)", "class_method_signature": "ContentTypeResolver.get(final String fileName, final String encoding)", "testcase": false, "constructor": false}], "file": "wro4j-core/src/main/java/ro/isdc/wro/http/support/ContentTypeResolver.java"}, "focal_method": {"identifier": "get", "parameters": "(final String fileName)", "modifiers": "public static", "return": "String", "body": "public static String get(final String fileName) {\n    final String extension = FilenameUtils.getExtension(fileName).toLowerCase();\n    if (defaultContentTypeMap.containsKey(extension)) {\n      return defaultContentTypeMap.get(extension);\n    }\n    try {\n      final Class<?> fileTypeMapClass = ClassLoader.getSystemClassLoader().loadClass(\"javax.activation.FileTypeMap\");\n      LOG.debug(\"using {} to resolve contentType\", fileTypeMapClass.getName());\n      final Object fileTypeMap = fileTypeMapClass.getMethod(\"getDefaultFileTypeMap\").invoke(fileTypeMapClass);\n      return (String) fileTypeMapClass.getMethod(\"getContentType\", String.class).invoke(fileTypeMap, fileName);\n    } catch (final Exception e) {\n      LOG.debug(\"FileTypeMap is not available (probably jdk5 is used). Exception {}, with message: {}\", e.getClass(),\n          e.getMessage());\n      LOG.debug(\"Will use default content type: {} for fileName: {}\", DEFAULT_CONTENT_TYPE, fileName);\n    }\n    return DEFAULT_CONTENT_TYPE;\n  }", "signature": "String get(final String fileName)", "full_signature": "public static String get(final String fileName)", "class_method_signature": "ContentTypeResolver.get(final String fileName)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "getExtension", "containsKey", "get", "loadClass", "getSystemClassLoader", "debug", "getName", "invoke", "getMethod", "invoke", "getMethod", "debug", "getClass", "getMessage", "debug"]}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}