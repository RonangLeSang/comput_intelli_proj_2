{"test_class": {"identifier": "TestWroUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Locale defaultLocale;", "modifier": "private", "type": "Locale", "declarator": "defaultLocale", "var_name": "defaultLocale"}], "file": "wro4j-core/src/test/java/ro/isdc/wro/util/TestWroUtil.java"}, "test_case": {"identifier": "shouldComputeFullPathForServletContextResource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldComputeFullPathForServletContextResource() {\n    assertEquals(\"/a/b/\", WroUtil.getFullPath(\"/a/b/c\"));\n  }", "signature": "void shouldComputeFullPathForServletContextResource()", "full_signature": "@Test public void shouldComputeFullPathForServletContextResource()", "class_method_signature": "TestWroUtil.shouldComputeFullPathForServletContextResource()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getFullPath"]}, "focal_class": {"identifier": "WroUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEPARATOR_WINDOWS = \"\\\\\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR_WINDOWS = \"\\\\\"", "var_name": "SEPARATOR_WINDOWS"}, {"original_string": "public static final Pattern EMTPY_LINE_PATTERN = Pattern.compile(loadRegexpWithKey(\"emptyLine\"), Pattern.MULTILINE);", "modifier": "public static final", "type": "Pattern", "declarator": "EMTPY_LINE_PATTERN = Pattern.compile(loadRegexpWithKey(\"emptyLine\"), Pattern.MULTILINE)", "var_name": "EMTPY_LINE_PATTERN"}, {"original_string": "private static final FastDateFormat DATE_FORMAT = FastDateFormat.getInstance(\"E, dd MMM yyyy HH:mm:ss z\",\n      TimeZone.getTimeZone(\"GMT\"), Locale.US);", "modifier": "private static final", "type": "FastDateFormat", "declarator": "DATE_FORMAT = FastDateFormat.getInstance(\"E, dd MMM yyyy HH:mm:ss z\",\n      TimeZone.getTimeZone(\"GMT\"), Locale.US)", "var_name": "DATE_FORMAT"}, {"original_string": "private static final Pattern PATTERN_ACCEPT_ENCODING = Pattern.compile(loadRegexpWithKey(\"requestHeader.acceptEncoding\"));", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_ACCEPT_ENCODING = Pattern.compile(loadRegexpWithKey(\"requestHeader.acceptEncoding\"))", "var_name": "PATTERN_ACCEPT_ENCODING"}, {"original_string": "private static final Pattern PATTERN_GZIP = Pattern.compile(loadRegexpWithKey(\"requestHeader.gzip\"));", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_GZIP = Pattern.compile(loadRegexpWithKey(\"requestHeader.gzip\"))", "var_name": "PATTERN_GZIP"}, {"original_string": "private static final AtomicInteger threadFactoryNumber = new AtomicInteger(1);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "threadFactoryNumber = new AtomicInteger(1)", "var_name": "threadFactoryNumber"}, {"original_string": "public static final InputStream EMPTY_STREAM = new ByteArrayInputStream(\"\".getBytes());", "modifier": "public static final", "type": "InputStream", "declarator": "EMPTY_STREAM = new ByteArrayInputStream(\"\".getBytes())", "var_name": "EMPTY_STREAM"}], "methods": [{"identifier": "createDaemonThreadFactory", "parameters": "(final String name)", "modifiers": "public static", "return": "ThreadFactory", "signature": "ThreadFactory createDaemonThreadFactory(final String name)", "full_signature": "public static ThreadFactory createDaemonThreadFactory(final String name)", "class_method_signature": "WroUtil.createDaemonThreadFactory(final String name)", "testcase": false, "constructor": false}, {"identifier": "toDateAsString", "parameters": "(final long milliseconds)", "modifiers": "public static", "return": "String", "signature": "String toDateAsString(final long milliseconds)", "full_signature": "public static String toDateAsString(final long milliseconds)", "class_method_signature": "WroUtil.toDateAsString(final long milliseconds)", "testcase": false, "constructor": false}, {"identifier": "getPathInfoFromLocation", "parameters": "(final HttpServletRequest request, final String location)", "modifiers": "public static", "return": "String", "signature": "String getPathInfoFromLocation(final HttpServletRequest request, final String location)", "full_signature": "public static String getPathInfoFromLocation(final HttpServletRequest request, final String location)", "class_method_signature": "WroUtil.getPathInfoFromLocation(final HttpServletRequest request, final String location)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCase", "parameters": "(final String str, final String prefix)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCase(final String str, final String prefix)", "full_signature": "public static boolean startsWithIgnoreCase(final String str, final String prefix)", "class_method_signature": "WroUtil.startsWithIgnoreCase(final String str, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "toPackageAsFolder", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String toPackageAsFolder(final Class<?> clazz)", "full_signature": "public static String toPackageAsFolder(final Class<?> clazz)", "class_method_signature": "WroUtil.toPackageAsFolder(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(final String str, final String prefix, final boolean ignoreCase)", "modifiers": "private static", "return": "boolean", "signature": "boolean startsWith(final String str, final String prefix, final boolean ignoreCase)", "full_signature": "private static boolean startsWith(final String str, final String prefix, final boolean ignoreCase)", "class_method_signature": "WroUtil.startsWith(final String str, final String prefix, final boolean ignoreCase)", "testcase": false, "constructor": false}, {"identifier": "getServletPathFromLocation", "parameters": "(final HttpServletRequest request, final String location)", "modifiers": "public static", "return": "String", "signature": "String getServletPathFromLocation(final HttpServletRequest request, final String location)", "full_signature": "public static String getServletPathFromLocation(final HttpServletRequest request, final String location)", "class_method_signature": "WroUtil.getServletPathFromLocation(final HttpServletRequest request, final String location)", "testcase": false, "constructor": false}, {"identifier": "isGzipSupported", "parameters": "(final HttpServletRequest request)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "boolean", "signature": "boolean isGzipSupported(final HttpServletRequest request)", "full_signature": "@SuppressWarnings(\"unchecked\") public static boolean isGzipSupported(final HttpServletRequest request)", "class_method_signature": "WroUtil.isGzipSupported(final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "toJSMultiLineString", "parameters": "(final String data)", "modifiers": "public static", "return": "String", "signature": "String toJSMultiLineString(final String data)", "full_signature": "public static String toJSMultiLineString(final String data)", "class_method_signature": "WroUtil.toJSMultiLineString(final String data)", "testcase": false, "constructor": false}, {"identifier": "matchesUrl", "parameters": "(final HttpServletRequest request, final String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesUrl(final HttpServletRequest request, final String path)", "full_signature": "public static boolean matchesUrl(final HttpServletRequest request, final String path)", "class_method_signature": "WroUtil.matchesUrl(final HttpServletRequest request, final String path)", "testcase": false, "constructor": false}, {"identifier": "newResourceProcessor", "parameters": "(final Resource resource,\n      final ResourcePreProcessor preProcessor)", "modifiers": "public static", "return": "ResourcePostProcessor", "signature": "ResourcePostProcessor newResourceProcessor(final Resource resource,\n      final ResourcePreProcessor preProcessor)", "full_signature": "public static ResourcePostProcessor newResourceProcessor(final Resource resource,\n      final ResourcePreProcessor preProcessor)", "class_method_signature": "WroUtil.newResourceProcessor(final Resource resource,\n      final ResourcePreProcessor preProcessor)", "testcase": false, "constructor": false}, {"identifier": "factoryFor", "parameters": "(final WroModel model)", "modifiers": "public static", "return": "WroModelFactory", "signature": "WroModelFactory factoryFor(final WroModel model)", "full_signature": "public static WroModelFactory factoryFor(final WroModel model)", "class_method_signature": "WroUtil.factoryFor(final WroModel model)", "testcase": false, "constructor": false}, {"identifier": "simpleObjectFactory", "parameters": "(final T object)", "modifiers": "public static", "return": "ObjectFactory<T>", "signature": "ObjectFactory<T> simpleObjectFactory(final T object)", "full_signature": "public static ObjectFactory<T> simpleObjectFactory(final T object)", "class_method_signature": "WroUtil.simpleObjectFactory(final T object)", "testcase": false, "constructor": false}, {"identifier": "loadRegexpWithKey", "parameters": "(final String key)", "modifiers": "public static", "return": "String", "signature": "String loadRegexpWithKey(final String key)", "full_signature": "public static String loadRegexpWithKey(final String key)", "class_method_signature": "WroUtil.loadRegexpWithKey(final String key)", "testcase": false, "constructor": false}, {"identifier": "getImplementationVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getImplementationVersion()", "full_signature": "public static String getImplementationVersion()", "class_method_signature": "WroUtil.getImplementationVersion()", "testcase": false, "constructor": false}, {"identifier": "safeCopy", "parameters": "(final Reader reader, final Writer writer)", "modifiers": "public static", "return": "void", "signature": "void safeCopy(final Reader reader, final Writer writer)", "full_signature": "public static void safeCopy(final Reader reader, final Writer writer)", "class_method_signature": "WroUtil.safeCopy(final Reader reader, final Writer writer)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File createTempFile()", "full_signature": "public static File createTempFile()", "class_method_signature": "WroUtil.createTempFile()", "testcase": false, "constructor": false}, {"identifier": "createTempDirectory", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File createTempDirectory()", "full_signature": "public static File createTempDirectory()", "class_method_signature": "WroUtil.createTempDirectory()", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(final String extension)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(final String extension)", "full_signature": "public static File createTempFile(final String extension)", "class_method_signature": "WroUtil.createTempFile(final String extension)", "testcase": false, "constructor": false}, {"identifier": "cleanImageUrl", "parameters": "(final String imageUrl)", "modifiers": "public static final", "return": "String", "signature": "String cleanImageUrl(final String imageUrl)", "full_signature": "public static final String cleanImageUrl(final String imageUrl)", "class_method_signature": "WroUtil.cleanImageUrl(final String imageUrl)", "testcase": false, "constructor": false}, {"identifier": "removeQueryString", "parameters": "(final String path)", "modifiers": "public static final", "return": "String", "signature": "String removeQueryString(final String path)", "full_signature": "public static final String removeQueryString(final String path)", "class_method_signature": "WroUtil.removeQueryString(final String path)", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "()", "modifiers": "public static final", "return": "File", "signature": "File getWorkingDirectory()", "full_signature": "public static final File getWorkingDirectory()", "class_method_signature": "WroUtil.getWorkingDirectory()", "testcase": false, "constructor": false}, {"identifier": "getFullPath", "parameters": "(final String path)", "modifiers": "public static final", "return": "String", "signature": "String getFullPath(final String path)", "full_signature": "public static final String getFullPath(final String path)", "class_method_signature": "WroUtil.getFullPath(final String path)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(final String path)", "modifiers": "public static final", "return": "String", "signature": "String normalize(final String path)", "full_signature": "public static final String normalize(final String path)", "class_method_signature": "WroUtil.normalize(final String path)", "testcase": false, "constructor": false}, {"identifier": "replaceWithServletContextSeparatorIfNedded", "parameters": "(String normalized)", "modifiers": "private static", "return": "String", "signature": "String replaceWithServletContextSeparatorIfNedded(String normalized)", "full_signature": "private static String replaceWithServletContextSeparatorIfNedded(String normalized)", "class_method_signature": "WroUtil.replaceWithServletContextSeparatorIfNedded(String normalized)", "testcase": false, "constructor": false}], "file": "wro4j-core/src/main/java/ro/isdc/wro/util/WroUtil.java"}, "focal_method": {"identifier": "getFullPath", "parameters": "(final String path)", "modifiers": "public static final", "return": "String", "body": "public static final String getFullPath(final String path) {\n    final String fullPath = FilenameUtils.getFullPath(path);\n    return replaceWithServletContextSeparatorIfNedded(fullPath);\n  }", "signature": "String getFullPath(final String path)", "full_signature": "public static final String getFullPath(final String path)", "class_method_signature": "WroUtil.getFullPath(final String path)", "testcase": false, "constructor": false, "invocations": ["getFullPath", "replaceWithServletContextSeparatorIfNedded"]}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}