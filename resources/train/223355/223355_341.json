{"test_class": {"identifier": "TestDispatcherStreamLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private HttpServletRequest mockRequest;", "modifier": "@Mock\n  private", "type": "HttpServletRequest", "declarator": "mockRequest", "var_name": "mockRequest"}, {"original_string": "@Mock\n  private RequestDispatcher mockDispatcher;", "modifier": "@Mock\n  private", "type": "RequestDispatcher", "declarator": "mockDispatcher", "var_name": "mockDispatcher"}, {"original_string": "@Mock\n  private HttpServletResponse mockResponse;", "modifier": "@Mock\n  private", "type": "HttpServletResponse", "declarator": "mockResponse", "var_name": "mockResponse"}, {"original_string": "@Mock\n  private UriLocator mockUriLocator;", "modifier": "@Mock\n  private", "type": "UriLocator", "declarator": "mockUriLocator", "var_name": "mockUriLocator"}, {"original_string": "private DispatcherStreamLocator victim;", "modifier": "private", "type": "DispatcherStreamLocator", "declarator": "victim", "var_name": "victim"}], "file": "wro4j-core/src/test/java/ro/isdc/wro/model/resource/locator/support/TestDispatcherStreamLocator.java"}, "test_case": {"identifier": "cannotLocateNullLocation", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n  public void cannotLocateNullLocation()\n      throws Exception {\n    victim.getInputStream(mockRequest, mockResponse, null);\n  }", "signature": "void cannotLocateNullLocation()", "full_signature": "@Test(expected = IOException.class) public void cannotLocateNullLocation()", "class_method_signature": "TestDispatcherStreamLocator.cannotLocateNullLocation()", "testcase": true, "constructor": false, "invocations": ["getInputStream"]}, "focal_class": {"identifier": "DispatcherStreamLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DispatcherStreamLocator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DispatcherStreamLocator.class)", "var_name": "LOG"}, {"original_string": "public static final String ATTRIBUTE_INCLUDED_BY_DISPATCHER = DispatcherStreamLocator.class.getName()\n      + \".included_with_dispatcher\";", "modifier": "public static final", "type": "String", "declarator": "ATTRIBUTE_INCLUDED_BY_DISPATCHER = DispatcherStreamLocator.class.getName()\n      + \".included_with_dispatcher\"", "var_name": "ATTRIBUTE_INCLUDED_BY_DISPATCHER"}, {"original_string": "private int timeout = WroConfiguration.DEFAULT_CONNECTION_TIMEOUT;", "modifier": "private", "type": "int", "declarator": "timeout = WroConfiguration.DEFAULT_CONNECTION_TIMEOUT", "var_name": "timeout"}], "methods": [{"identifier": "getInputStream", "parameters": "(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getInputStream(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "full_signature": "public InputStream getInputStream(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "class_method_signature": "DispatcherStreamLocator.getInputStream(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "testcase": false, "constructor": false}, {"identifier": "locateExternal", "parameters": "(final HttpServletRequest request, final String location)", "modifiers": "public", "return": "InputStream", "signature": "InputStream locateExternal(final HttpServletRequest request, final String location)", "full_signature": "public InputStream locateExternal(final HttpServletRequest request, final String location)", "class_method_signature": "DispatcherStreamLocator.locateExternal(final HttpServletRequest request, final String location)", "testcase": false, "constructor": false}, {"identifier": "createExternalResourceLocator", "parameters": "()", "modifiers": "", "return": "UriLocator", "signature": "UriLocator createExternalResourceLocator()", "full_signature": " UriLocator createExternalResourceLocator()", "class_method_signature": "DispatcherStreamLocator.createExternalResourceLocator()", "testcase": false, "constructor": false}, {"identifier": "getWrappedServletRequest", "parameters": "(final HttpServletRequest request, final String location)", "modifiers": "private", "return": "ServletRequest", "signature": "ServletRequest getWrappedServletRequest(final HttpServletRequest request, final String location)", "full_signature": "private ServletRequest getWrappedServletRequest(final HttpServletRequest request, final String location)", "class_method_signature": "DispatcherStreamLocator.getWrappedServletRequest(final HttpServletRequest request, final String location)", "testcase": false, "constructor": false}, {"identifier": "isIncludedRequest", "parameters": "(final HttpServletRequest request)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIncludedRequest(final HttpServletRequest request)", "full_signature": "public static boolean isIncludedRequest(final HttpServletRequest request)", "class_method_signature": "DispatcherStreamLocator.isIncludedRequest(final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(final int timeout)", "modifiers": "public", "return": "void", "signature": "void setTimeout(final int timeout)", "full_signature": "public void setTimeout(final int timeout)", "class_method_signature": "DispatcherStreamLocator.setTimeout(final int timeout)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimeout()", "full_signature": "public int getTimeout()", "class_method_signature": "DispatcherStreamLocator.getTimeout()", "testcase": false, "constructor": false}], "file": "wro4j-core/src/main/java/ro/isdc/wro/model/resource/locator/support/DispatcherStreamLocator.java"}, "focal_method": {"identifier": "getInputStream", "parameters": "(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "modifiers": "public", "return": "InputStream", "body": "public InputStream getInputStream(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)\n      throws IOException {\n    if (request == null || response == null || location == null) {\n      throw new IOException(\"Cannot get stream for location: \" + location\n          + \" because either request, response or location is not available\");\n    }\n\n    // where to write the bytes of the stream\n    final ByteArrayOutputStream os = new ByteArrayOutputStream();\n    boolean warnOnEmptyStream = false;\n    try {\n      final RequestDispatcher dispatcher = request.getRequestDispatcher(location);\n      if (dispatcher != null) {\n        // Wrap request\n        final ServletRequest servletRequest = getWrappedServletRequest(request, location);\n        // Wrap response\n        final ServletResponse servletResponse = new RedirectedStreamServletResponseWrapper(os, response);\n        LOG.debug(\"dispatching request to location: {}\", location);\n        // use dispatcher\n        dispatcher.include(servletRequest, servletResponse);\n        warnOnEmptyStream = true;\n        // force flushing - the content will be written to BytArrayOutputStream.\n        // Otherwise exactly 32K of data will be written.\n        servletResponse.getWriter().flush();\n        os.close();\n      }\n    } catch (final Exception e) {\n      LOG.debug(\"Could not dispatch request for location {}\", location);\n      // Not only servletException can be thrown, also dispatch.include can throw NPE when the scheduler runs outside\n      // of the request cycle, thus connection is unavailable. This is caused mostly when invalid resources are\n      // included.\n      return locateExternal(request, location);\n    }\n    try {\n      // fallback to external resource locator if the dispatcher is empty\n      if (os.size() == 0) {\n        return locateExternal(request, location);\n      }\n    } finally {\n      if (warnOnEmptyStream && os.size() == 0) {\n        LOG.debug(\"Wrong or empty resource with location: {}\", location);\n      }\n    }\n    return new ByteArrayInputStream(os.toByteArray());\n  }", "signature": "InputStream getInputStream(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "full_signature": "public InputStream getInputStream(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "class_method_signature": "DispatcherStreamLocator.getInputStream(final HttpServletRequest request, final HttpServletResponse response,\n      final String location)", "testcase": false, "constructor": false, "invocations": ["getRequestDispatcher", "getWrappedServletRequest", "debug", "include", "flush", "getWriter", "close", "debug", "locateExternal", "size", "locateExternal", "size", "debug", "toByteArray"]}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}