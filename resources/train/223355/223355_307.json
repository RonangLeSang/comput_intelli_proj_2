{"test_class": {"identifier": "TestServletContextUriLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private HttpServletRequest mockRequest;", "modifier": "@Mock\n  private", "type": "HttpServletRequest", "declarator": "mockRequest", "var_name": "mockRequest"}, {"original_string": "@Mock\n  private HttpServletResponse mockResponse;", "modifier": "@Mock\n  private", "type": "HttpServletResponse", "declarator": "mockResponse", "var_name": "mockResponse"}, {"original_string": "@Mock\n  private FilterConfig mockFilterConfig;", "modifier": "@Mock\n  private", "type": "FilterConfig", "declarator": "mockFilterConfig", "var_name": "mockFilterConfig"}, {"original_string": "@Mock\n  private ServletContext mockServletContext;", "modifier": "@Mock\n  private", "type": "ServletContext", "declarator": "mockServletContext", "var_name": "mockServletContext"}, {"original_string": "private ServletContextUriLocator victim;", "modifier": "private", "type": "ServletContextUriLocator", "declarator": "victim", "var_name": "victim"}], "file": "wro4j-core/src/test/java/ro/isdc/wro/model/resource/locator/TestServletContextUriLocator.java"}, "test_case": {"identifier": "testWildcard3Resources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWildcard3Resources()\n      throws IOException {\n    victim.locate(createUri(\"/css/*.???\"));\n  }", "signature": "void testWildcard3Resources()", "full_signature": "@Test public void testWildcard3Resources()", "class_method_signature": "TestServletContextUriLocator.testWildcard3Resources()", "testcase": true, "constructor": false, "invocations": ["locate", "createUri"]}, "focal_class": {"identifier": "ServletContextUriLocator", "superclass": "extends WildcardUriLocatorSupport", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ServletContextUriLocator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ServletContextUriLocator.class)", "var_name": "LOG"}, {"original_string": "public static final String ALIAS = \"servletContext\";", "modifier": "public static final", "type": "String", "declarator": "ALIAS = \"servletContext\"", "var_name": "ALIAS"}, {"original_string": "public static final String ALIAS_DISPATCHER_FIRST = \"servletContext.DISPATCHER_FIRST\";", "modifier": "public static final", "type": "String", "declarator": "ALIAS_DISPATCHER_FIRST = \"servletContext.DISPATCHER_FIRST\"", "var_name": "ALIAS_DISPATCHER_FIRST"}, {"original_string": "public static final String ALIAS_SERVLET_CONTEXT_FIRST = \"servletContext.SERVLET_CONTEXT_FIRST\";", "modifier": "public static final", "type": "String", "declarator": "ALIAS_SERVLET_CONTEXT_FIRST = \"servletContext.SERVLET_CONTEXT_FIRST\"", "var_name": "ALIAS_SERVLET_CONTEXT_FIRST"}, {"original_string": "public static final String ALIAS_SERVLET_CONTEXT_ONLY = \"servletContext.SERVLET_CONTEXT_ONLY\";", "modifier": "public static final", "type": "String", "declarator": "ALIAS_SERVLET_CONTEXT_ONLY = \"servletContext.SERVLET_CONTEXT_ONLY\"", "var_name": "ALIAS_SERVLET_CONTEXT_ONLY"}, {"original_string": "public static final String PREFIX = \"/\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX = \"/\"", "var_name": "PREFIX"}, {"original_string": "private static final String PROTECTED_PREFIX = \"/WEB-INF/\";", "modifier": "private static final", "type": "String", "declarator": "PROTECTED_PREFIX = \"/WEB-INF/\"", "var_name": "PROTECTED_PREFIX"}, {"original_string": "private LocatorStrategy locatorStrategy = LocatorStrategy.DISPATCHER_FIRST;", "modifier": "private", "type": "LocatorStrategy", "declarator": "locatorStrategy = LocatorStrategy.DISPATCHER_FIRST", "var_name": "locatorStrategy"}, {"original_string": "@Inject\n  private DispatcherStreamLocator dispatcherLocator;", "modifier": "@Inject\n  private", "type": "DispatcherStreamLocator", "declarator": "dispatcherLocator", "var_name": "dispatcherLocator"}], "methods": [{"identifier": "setLocatorStrategy", "parameters": "(final LocatorStrategy locatorStrategy)", "modifiers": "public", "return": "ServletContextUriLocator", "signature": "ServletContextUriLocator setLocatorStrategy(final LocatorStrategy locatorStrategy)", "full_signature": "public ServletContextUriLocator setLocatorStrategy(final LocatorStrategy locatorStrategy)", "class_method_signature": "ServletContextUriLocator.setLocatorStrategy(final LocatorStrategy locatorStrategy)", "testcase": false, "constructor": false}, {"identifier": "newDispatcherStreamLocator", "parameters": "()", "modifiers": "private", "return": "DispatcherStreamLocator", "signature": "DispatcherStreamLocator newDispatcherStreamLocator()", "full_signature": "private DispatcherStreamLocator newDispatcherStreamLocator()", "class_method_signature": "ServletContextUriLocator.newDispatcherStreamLocator()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(final String uri)", "modifiers": "public", "return": "boolean", "signature": "boolean accept(final String uri)", "full_signature": "public boolean accept(final String uri)", "class_method_signature": "ServletContextUriLocator.accept(final String uri)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(final String uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(final String uri)", "full_signature": "public static boolean isValid(final String uri)", "class_method_signature": "ServletContextUriLocator.isValid(final String uri)", "testcase": false, "constructor": false}, {"identifier": "isProtectedResource", "parameters": "(final String uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProtectedResource(final String uri)", "full_signature": "public static boolean isProtectedResource(final String uri)", "class_method_signature": "ServletContextUriLocator.isProtectedResource(final String uri)", "testcase": false, "constructor": false}, {"identifier": "locate", "parameters": "(final String uri)", "modifiers": "public", "return": "InputStream", "signature": "InputStream locate(final String uri)", "full_signature": "public InputStream locate(final String uri)", "class_method_signature": "ServletContextUriLocator.locate(final String uri)", "testcase": false, "constructor": false}, {"identifier": "servletContextFirstStreamLocator", "parameters": "(final String uri)", "modifiers": "private", "return": "InputStream", "signature": "InputStream servletContextFirstStreamLocator(final String uri)", "full_signature": "private InputStream servletContextFirstStreamLocator(final String uri)", "class_method_signature": "ServletContextUriLocator.servletContextFirstStreamLocator(final String uri)", "testcase": false, "constructor": false}, {"identifier": "dispatcherFirstStreamLocator", "parameters": "(final String uri)", "modifiers": "private", "return": "InputStream", "signature": "InputStream dispatcherFirstStreamLocator(final String uri)", "full_signature": "private InputStream dispatcherFirstStreamLocator(final String uri)", "class_method_signature": "ServletContextUriLocator.dispatcherFirstStreamLocator(final String uri)", "testcase": false, "constructor": false}, {"identifier": "locateWithDispatcher", "parameters": "(final String uri)", "modifiers": "", "return": "InputStream", "signature": "InputStream locateWithDispatcher(final String uri)", "full_signature": " InputStream locateWithDispatcher(final String uri)", "class_method_signature": "ServletContextUriLocator.locateWithDispatcher(final String uri)", "testcase": false, "constructor": false}, {"identifier": "servletContextBasedStreamLocator", "parameters": "(final String uri)", "modifiers": "private", "return": "InputStream", "signature": "InputStream servletContextBasedStreamLocator(final String uri)", "full_signature": "private InputStream servletContextBasedStreamLocator(final String uri)", "class_method_signature": "ServletContextUriLocator.servletContextBasedStreamLocator(final String uri)", "testcase": false, "constructor": false}, {"identifier": "validateInputStreamIsNotNull", "parameters": "(final InputStream inputStream, final String uri)", "modifiers": "private", "return": "void", "signature": "void validateInputStreamIsNotNull(final InputStream inputStream, final String uri)", "full_signature": "private void validateInputStreamIsNotNull(final InputStream inputStream, final String uri)", "class_method_signature": "ServletContextUriLocator.validateInputStreamIsNotNull(final InputStream inputStream, final String uri)", "testcase": false, "constructor": false}, {"identifier": "getLocatorStrategy", "parameters": "()", "modifiers": "public", "return": "LocatorStrategy", "signature": "LocatorStrategy getLocatorStrategy()", "full_signature": "public LocatorStrategy getLocatorStrategy()", "class_method_signature": "ServletContextUriLocator.getLocatorStrategy()", "testcase": false, "constructor": false}], "file": "wro4j-core/src/main/java/ro/isdc/wro/model/resource/locator/ServletContextUriLocator.java"}, "focal_method": {"identifier": "locate", "parameters": "(final String uri)", "modifiers": "public", "return": "InputStream", "body": "public InputStream locate(final String uri)\n      throws IOException {\n    notNull(uri, \"URI cannot be NULL!\");\n    LOG.debug(\"locate resource: {}\", uri);\n\n    try {\n      if (getWildcardStreamLocator().hasWildcard(uri)) {\n        final ServletContext servletContext = Context.get().getServletContext();\n        final String fullPath = FilenameUtils.getFullPath(uri);\n        final String realPath = servletContext.getRealPath(fullPath);\n        if (realPath == null) {\n          final String message = \"[FAIL] determine realPath for resource: \" + uri;\n          LOG.debug(message);\n          throw new IOException(message);\n        }\n        return getWildcardStreamLocator().locateStream(uri, new File(URLDecoder.decode(realPath, \"UTF-8\")));\n      }\n    } catch (final IOException e) {\n      /**\n       * This is a special case when no more attempts are required, since the required computation was achieved\n       * successfully. This solves the following <a\n       * href=\"http://code.google.com/p/wro4j/issues/detail?id=321\">issue</a>.\n       * <p/>\n       * The problem was that in some situations, when the dispatcherStreamLocator was used to locate resources\n       * containing wildcard, the following message was printed to the console:\n       * <code>SEVERE: Servlet.service() for servlet default threw exception\n       * java.io.FileNotFoundException.</code>\n       */\n      if (e instanceof NoMoreAttemptsIOException) {\n        throw e;\n      }\n      LOG.debug(\"[FAIL] localize the stream containing wildcard. Original error message: '{}'\", e.getMessage()\n          + \"\\\".\\n Trying to locate the stream without the wildcard.\");\n    }\n\n    InputStream inputStream = null;\n    try {\n      switch (locatorStrategy) {\n        case DISPATCHER_FIRST:\n          inputStream = dispatcherFirstStreamLocator(uri);\n          break;\n        case SERVLET_CONTEXT_FIRST:\n          inputStream = servletContextFirstStreamLocator(uri);\n          break;\n        case SERVLET_CONTEXT_ONLY:\n          inputStream = servletContextBasedStreamLocator(uri);\n          break;\n      }\n      validateInputStreamIsNotNull(inputStream, uri);\n      return inputStream;\n    } catch (final IOException e) {\n      LOG.debug(\"Wrong or empty resource with location: {}\", uri);\n      throw e;\n    }\n  }", "signature": "InputStream locate(final String uri)", "full_signature": "public InputStream locate(final String uri)", "class_method_signature": "ServletContextUriLocator.locate(final String uri)", "testcase": false, "constructor": false, "invocations": ["notNull", "debug", "hasWildcard", "getWildcardStreamLocator", "getServletContext", "get", "getFullPath", "getRealPath", "debug", "locateStream", "getWildcardStreamLocator", "decode", "debug", "getMessage", "dispatcherFirstStreamLocator", "servletContextFirstStreamLocator", "servletContextBasedStreamLocator", "validateInputStreamIsNotNull", "debug"]}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}