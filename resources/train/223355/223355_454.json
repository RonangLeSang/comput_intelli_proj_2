{"test_class": {"identifier": "TestPropertyWroConfigurationFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestPropertyWroConfigurationFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestPropertyWroConfigurationFactory.class)", "var_name": "LOG"}, {"original_string": "private PropertyWroConfigurationFactory factory;", "modifier": "private", "type": "PropertyWroConfigurationFactory", "declarator": "factory", "var_name": "factory"}], "file": "wro4j-core/src/test/java/ro/isdc/wro/config/factory/TestPropertyWroConfigurationFactory.java"}, "test_case": {"identifier": "invalidBooleanFallbacksToFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void invalidBooleanFallbacksToFalse() {\n    final Properties props = new Properties();\n    props.setProperty(ConfigConstants.cacheGzippedContent.name(), \"INVALID_BOOLEAN\");\n\n    factory = new PropertyWroConfigurationFactory(props);\n    final WroConfiguration config = factory.create();\n\n    assertEquals(false, config.isCacheGzippedContent());\n  }", "signature": "void invalidBooleanFallbacksToFalse()", "full_signature": "@Test public void invalidBooleanFallbacksToFalse()", "class_method_signature": "TestPropertyWroConfigurationFactory.invalidBooleanFallbacksToFalse()", "testcase": true, "constructor": false, "invocations": ["setProperty", "name", "create", "assertEquals", "isCacheGzippedContent"]}, "focal_class": {"identifier": "PropertyWroConfigurationFactory", "superclass": "", "interfaces": "implements ObjectFactory<WroConfiguration>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PropertyWroConfigurationFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PropertyWroConfigurationFactory.class)", "var_name": "LOG"}, {"original_string": "private final Properties properties;", "modifier": "private final", "type": "Properties", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "PropertyWroConfigurationFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " PropertyWroConfigurationFactory()", "full_signature": "public  PropertyWroConfigurationFactory()", "class_method_signature": "PropertyWroConfigurationFactory.PropertyWroConfigurationFactory()", "testcase": false, "constructor": true}, {"identifier": "PropertyWroConfigurationFactory", "parameters": "(final Properties props)", "modifiers": "public", "return": "", "signature": " PropertyWroConfigurationFactory(final Properties props)", "full_signature": "public  PropertyWroConfigurationFactory(final Properties props)", "class_method_signature": "PropertyWroConfigurationFactory.PropertyWroConfigurationFactory(final Properties props)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "WroConfiguration", "signature": "WroConfiguration create()", "full_signature": "public WroConfiguration create()", "class_method_signature": "PropertyWroConfigurationFactory.create()", "testcase": false, "constructor": false}, {"identifier": "valueAsLong", "parameters": "(final Object object, final long defaultValue)", "modifiers": "private", "return": "long", "signature": "long valueAsLong(final Object object, final long defaultValue)", "full_signature": "private long valueAsLong(final Object object, final long defaultValue)", "class_method_signature": "PropertyWroConfigurationFactory.valueAsLong(final Object object, final long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "valueAsBoolean", "parameters": "(final Object object, final boolean defaultValue)", "modifiers": "private", "return": "boolean", "signature": "boolean valueAsBoolean(final Object object, final boolean defaultValue)", "full_signature": "private boolean valueAsBoolean(final Object object, final boolean defaultValue)", "class_method_signature": "PropertyWroConfigurationFactory.valueAsBoolean(final Object object, final boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "valueAsString", "parameters": "(final Object object)", "modifiers": "private", "return": "String", "signature": "String valueAsString(final Object object)", "full_signature": "private String valueAsString(final Object object)", "class_method_signature": "PropertyWroConfigurationFactory.valueAsString(final Object object)", "testcase": false, "constructor": false}, {"identifier": "valueAsString", "parameters": "(final Object object, final String defaultValue)", "modifiers": "private", "return": "String", "signature": "String valueAsString(final Object object, final String defaultValue)", "full_signature": "private String valueAsString(final Object object, final String defaultValue)", "class_method_signature": "PropertyWroConfigurationFactory.valueAsString(final Object object, final String defaultValue)", "testcase": false, "constructor": false}], "file": "wro4j-core/src/main/java/ro/isdc/wro/config/factory/PropertyWroConfigurationFactory.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "WroConfiguration", "body": "public WroConfiguration create() {\n    final WroConfiguration config = new WroConfiguration();\n    config.setDebug(valueAsBoolean(properties.get(ConfigConstants.debug.name()), true));\n    config.setGzipEnabled(valueAsBoolean(properties.get(ConfigConstants.gzipResources.name()), true));\n    config.setJmxEnabled(valueAsBoolean(properties.get(ConfigConstants.jmxEnabled.name()), true));\n    config.setCacheUpdatePeriod(valueAsLong(properties.get(ConfigConstants.cacheUpdatePeriod.name()), 0));\n    config.setModelUpdatePeriod(valueAsLong(properties.get(ConfigConstants.modelUpdatePeriod.name()), 0));\n    config.setResourceWatcherUpdatePeriod(valueAsLong(\n        properties.get(ConfigConstants.resourceWatcherUpdatePeriod.name()), 0));\n    config.setResourceWatcherAsync(valueAsBoolean(properties.get(ConfigConstants.resourceWatcherAsync.name()), false));\n    config.setMinimizeEnabled(valueAsBoolean(properties.get(ConfigConstants.minimizeEnabled.name()), true));\n    config.setIgnoreMissingResources(valueAsBoolean(properties.get(ConfigConstants.ignoreMissingResources.name()), true));\n    config.setIgnoreEmptyGroup(valueAsBoolean(properties.get(ConfigConstants.ignoreEmptyGroup.name()), true));\n    config.setIgnoreFailingProcessor(valueAsBoolean(properties.get(ConfigConstants.ignoreFailingProcessor.name()), false));\n    config.setEncoding(valueAsString(properties.get(ConfigConstants.encoding.name()), WroConfiguration.DEFAULT_ENCODING));\n    config.setWroManagerClassName(valueAsString(properties.get(ConfigConstants.managerFactoryClassName.name())));\n    config.setMbeanName(valueAsString(properties.get(ConfigConstants.mbeanName.name())));\n    config.setHeader(valueAsString(properties.get(ConfigConstants.header.name())));\n    config.setCacheGzippedContent(valueAsBoolean(properties.get(ConfigConstants.cacheGzippedContent.name()), false));\n    config.setParallelPreprocessing(valueAsBoolean(properties.get(ConfigConstants.parallelPreprocessing.name()), false));\n    config.setConnectionTimeout((int) valueAsLong(properties.get(ConfigConstants.connectionTimeout.name()),\n        WroConfiguration.DEFAULT_CONNECTION_TIMEOUT));\n    LOG.debug(\"WroConfiguration created: {}\", config);\n    return config;\n  }", "signature": "WroConfiguration create()", "full_signature": "public WroConfiguration create()", "class_method_signature": "PropertyWroConfigurationFactory.create()", "testcase": false, "constructor": false, "invocations": ["setDebug", "valueAsBoolean", "get", "name", "setGzipEnabled", "valueAsBoolean", "get", "name", "setJmxEnabled", "valueAsBoolean", "get", "name", "setCacheUpdatePeriod", "valueAsLong", "get", "name", "setModelUpdatePeriod", "valueAsLong", "get", "name", "setResourceWatcherUpdatePeriod", "valueAsLong", "get", "name", "setResourceWatcherAsync", "valueAsBoolean", "get", "name", "setMinimizeEnabled", "valueAsBoolean", "get", "name", "setIgnoreMissingResources", "valueAsBoolean", "get", "name", "setIgnoreEmptyGroup", "valueAsBoolean", "get", "name", "setIgnoreFailingProcessor", "valueAsBoolean", "get", "name", "setEncoding", "valueAsString", "get", "name", "setWroManagerClassName", "valueAsString", "get", "name", "setMbeanName", "valueAsString", "get", "name", "setHeader", "valueAsString", "get", "name", "setCacheGzippedContent", "valueAsBoolean", "get", "name", "setParallelPreprocessing", "valueAsBoolean", "get", "name", "setConnectionTimeout", "valueAsLong", "get", "name", "debug"]}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}