{"test_class": {"identifier": "TestWro4jMojo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestWro4jMojo.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestWro4jMojo.class)", "var_name": "LOG"}, {"original_string": "@Mock\n  private BuildContext mockBuildContext;", "modifier": "@Mock\n  private", "type": "BuildContext", "declarator": "mockBuildContext", "var_name": "mockBuildContext"}, {"original_string": "@Mock\n  private HashStrategy mockHashStrategy;", "modifier": "@Mock\n  private", "type": "HashStrategy", "declarator": "mockHashStrategy", "var_name": "mockHashStrategy"}, {"original_string": "private UriLocatorFactory mockLocatorFactory;", "modifier": "private", "type": "UriLocatorFactory", "declarator": "mockLocatorFactory", "var_name": "mockLocatorFactory"}, {"original_string": "@Mock\n  private UriLocator mockLocator;", "modifier": "@Mock\n  private", "type": "UriLocator", "declarator": "mockLocator", "var_name": "mockLocator"}, {"original_string": "private File cssDestinationFolder;", "modifier": "private", "type": "File", "declarator": "cssDestinationFolder", "var_name": "cssDestinationFolder"}, {"original_string": "private File jsDestinationFolder;", "modifier": "private", "type": "File", "declarator": "jsDestinationFolder", "var_name": "jsDestinationFolder"}, {"original_string": "private File destinationFolder;", "modifier": "private", "type": "File", "declarator": "destinationFolder", "var_name": "destinationFolder"}, {"original_string": "private File extraConfigFile;", "modifier": "private", "type": "File", "declarator": "extraConfigFile", "var_name": "extraConfigFile"}, {"original_string": "private Wro4jMojo victim;", "modifier": "private", "type": "Wro4jMojo", "declarator": "victim", "var_name": "victim"}], "file": "wro4j-maven-plugin/src/test/java/ro/isdc/wro/maven/plugin/TestWro4jMojo.java"}, "test_case": {"identifier": "shouldProcessTargetGroupsWhenDestinationFolderDoesNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldProcessTargetGroupsWhenDestinationFolderDoesNotExist()\n      throws Exception {\n    victim = new Wro4jMojo() {\n      @Override\n      protected WroManagerFactory getManagerFactory() {\n        return new WroManagerFactoryDecorator(super.getManagerFactory()) {\n          @Override\n          protected void onBeforeBuild(final Builder builder) {\n            builder.setHashStrategy(mockHashStrategy);\n          }\n        };\n      }\n    };\n    final String constantHash = \"hash\";\n    when(mockHashStrategy.getHash(Mockito.any(InputStream.class))).thenReturn(constantHash);\n    setUpMojo(victim);\n    victim.setIgnoreMissingResources(true);\n\n    final int totalGroups = 10;\n\n    assertEquals(totalGroups, victim.getTargetGroupsAsList().size());\n\n    when(mockBuildContext.isIncremental()).thenReturn(true);\n    when(mockBuildContext.getValue(Mockito.anyString())).thenReturn(constantHash);\n\n    assertEquals(0, victim.getTargetGroupsAsList().size());\n\n    // delete target folder\n    destinationFolder.delete();\n\n    assertEquals(totalGroups, victim.getTargetGroupsAsList().size());\n\n    victim.doExecute();\n  }", "signature": "void shouldProcessTargetGroupsWhenDestinationFolderDoesNotExist()", "full_signature": "@Test public void shouldProcessTargetGroupsWhenDestinationFolderDoesNotExist()", "class_method_signature": "TestWro4jMojo.shouldProcessTargetGroupsWhenDestinationFolderDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["getManagerFactory", "setHashStrategy", "thenReturn", "when", "getHash", "any", "setUpMojo", "setIgnoreMissingResources", "assertEquals", "size", "getTargetGroupsAsList", "thenReturn", "when", "isIncremental", "thenReturn", "when", "getValue", "anyString", "assertEquals", "size", "getTargetGroupsAsList", "delete", "assertEquals", "size", "getTargetGroupsAsList", "doExecute"]}, "focal_class": {"identifier": "Wro4jMojo", "superclass": "extends AbstractWro4jMojo", "interfaces": "", "fields": [{"original_string": "private File destinationFolder;", "modifier": "private", "type": "File", "declarator": "destinationFolder", "var_name": "destinationFolder"}, {"original_string": "private File cssDestinationFolder;", "modifier": "private", "type": "File", "declarator": "cssDestinationFolder", "var_name": "cssDestinationFolder"}, {"original_string": "private File jsDestinationFolder;", "modifier": "private", "type": "File", "declarator": "jsDestinationFolder", "var_name": "jsDestinationFolder"}, {"original_string": "private File buildDirectory;", "modifier": "private", "type": "File", "declarator": "buildDirectory", "var_name": "buildDirectory"}, {"original_string": "private File buildFinalName;", "modifier": "private", "type": "File", "declarator": "buildFinalName", "var_name": "buildFinalName"}, {"original_string": "private File groupNameMappingFile;", "modifier": "private", "type": "File", "declarator": "groupNameMappingFile", "var_name": "groupNameMappingFile"}, {"original_string": "private String contextPath;", "modifier": "private", "type": "String", "declarator": "contextPath", "var_name": "contextPath"}, {"original_string": "private final Properties groupNames = new Properties();", "modifier": "private final", "type": "Properties", "declarator": "groupNames = new Properties()", "var_name": "groupNames"}], "methods": [{"identifier": "validate", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void validate()", "full_signature": "@Override protected void validate()", "class_method_signature": "Wro4jMojo.validate()", "testcase": false, "constructor": false}, {"identifier": "onBeforeExecute", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onBeforeExecute()", "full_signature": "@Override protected void onBeforeExecute()", "class_method_signature": "Wro4jMojo.onBeforeExecute()", "testcase": false, "constructor": false}, {"identifier": "doExecute", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doExecute()", "full_signature": "@Override protected void doExecute()", "class_method_signature": "Wro4jMojo.doExecute()", "testcase": false, "constructor": false}, {"identifier": "isIncrementalCheckRequired", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isIncrementalCheckRequired()", "full_signature": "@Override protected boolean isIncrementalCheckRequired()", "class_method_signature": "Wro4jMojo.isIncrementalCheckRequired()", "testcase": false, "constructor": false}, {"identifier": "writeGroupNameMap", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeGroupNameMap()", "full_signature": "private void writeGroupNameMap()", "class_method_signature": "Wro4jMojo.writeGroupNameMap()", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(final String group, final InputStream input)", "modifiers": "private", "return": "String", "signature": "String rename(final String group, final InputStream input)", "full_signature": "private String rename(final String group, final InputStream input)", "class_method_signature": "Wro4jMojo.rename(final String group, final InputStream input)", "testcase": false, "constructor": false}, {"identifier": "computeDestinationFolder", "parameters": "(final ResourceType resourceType)", "modifiers": "private", "return": "File", "signature": "File computeDestinationFolder(final ResourceType resourceType)", "full_signature": "private File computeDestinationFolder(final ResourceType resourceType)", "class_method_signature": "Wro4jMojo.computeDestinationFolder(final ResourceType resourceType)", "testcase": false, "constructor": false}, {"identifier": "processGroup", "parameters": "(final String group, final File parentFoder)", "modifiers": "private", "return": "void", "signature": "void processGroup(final String group, final File parentFoder)", "full_signature": "private void processGroup(final String group, final File parentFoder)", "class_method_signature": "Wro4jMojo.processGroup(final String group, final File parentFoder)", "testcase": false, "constructor": false}, {"identifier": "normalizeContextPath", "parameters": "(final String contextPath)", "modifiers": "private", "return": "String", "signature": "String normalizeContextPath(final String contextPath)", "full_signature": "private String normalizeContextPath(final String contextPath)", "class_method_signature": "Wro4jMojo.normalizeContextPath(final String contextPath)", "testcase": false, "constructor": false}, {"identifier": "getAggregatedPathResolver", "parameters": "()", "modifiers": "private", "return": "AggregatedFolderPathResolver", "signature": "AggregatedFolderPathResolver getAggregatedPathResolver()", "full_signature": "private AggregatedFolderPathResolver getAggregatedPathResolver()", "class_method_signature": "Wro4jMojo.getAggregatedPathResolver()", "testcase": false, "constructor": false}, {"identifier": "setDestinationFolder", "parameters": "(final File destinationFolder)", "modifiers": "", "return": "void", "signature": "void setDestinationFolder(final File destinationFolder)", "full_signature": " void setDestinationFolder(final File destinationFolder)", "class_method_signature": "Wro4jMojo.setDestinationFolder(final File destinationFolder)", "testcase": false, "constructor": false}, {"identifier": "setCssDestinationFolder", "parameters": "(final File cssDestinationFolder)", "modifiers": "", "return": "void", "signature": "void setCssDestinationFolder(final File cssDestinationFolder)", "full_signature": " void setCssDestinationFolder(final File cssDestinationFolder)", "class_method_signature": "Wro4jMojo.setCssDestinationFolder(final File cssDestinationFolder)", "testcase": false, "constructor": false}, {"identifier": "setJsDestinationFolder", "parameters": "(final File jsDestinationFolder)", "modifiers": "", "return": "void", "signature": "void setJsDestinationFolder(final File jsDestinationFolder)", "full_signature": " void setJsDestinationFolder(final File jsDestinationFolder)", "class_method_signature": "Wro4jMojo.setJsDestinationFolder(final File jsDestinationFolder)", "testcase": false, "constructor": false}, {"identifier": "setBuildDirectory", "parameters": "(final File buildDirectory)", "modifiers": "", "return": "void", "signature": "void setBuildDirectory(final File buildDirectory)", "full_signature": " void setBuildDirectory(final File buildDirectory)", "class_method_signature": "Wro4jMojo.setBuildDirectory(final File buildDirectory)", "testcase": false, "constructor": false}, {"identifier": "setBuildFinalName", "parameters": "(final File buildFinalName)", "modifiers": "public", "return": "void", "signature": "void setBuildFinalName(final File buildFinalName)", "full_signature": "public void setBuildFinalName(final File buildFinalName)", "class_method_signature": "Wro4jMojo.setBuildFinalName(final File buildFinalName)", "testcase": false, "constructor": false}, {"identifier": "setGroupNameMappingFile", "parameters": "(final File groupNameMappingFile)", "modifiers": "", "return": "void", "signature": "void setGroupNameMappingFile(final File groupNameMappingFile)", "full_signature": " void setGroupNameMappingFile(final File groupNameMappingFile)", "class_method_signature": "Wro4jMojo.setGroupNameMappingFile(final File groupNameMappingFile)", "testcase": false, "constructor": false}, {"identifier": "setContextPath", "parameters": "(final String contextPath)", "modifiers": "", "return": "void", "signature": "void setContextPath(final String contextPath)", "full_signature": " void setContextPath(final String contextPath)", "class_method_signature": "Wro4jMojo.setContextPath(final String contextPath)", "testcase": false, "constructor": false}], "file": "wro4j-maven-plugin/src/main/java/ro/isdc/wro/maven/plugin/Wro4jMojo.java"}, "focal_method": {"identifier": "doExecute", "parameters": "()", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void doExecute()\n      throws Exception {\n    if (contextPath != null) {\n      getLog().info(\"contextPath: \" + contextPath);\n    }\n    getLog().info(\"destinationFolder: \" + destinationFolder);\n    if (jsDestinationFolder != null) {\n      getLog().info(\"jsDestinationFolder: \" + jsDestinationFolder);\n    }\n    if (cssDestinationFolder != null) {\n      getLog().info(\"cssDestinationFolder: \" + cssDestinationFolder);\n    }\n    if (groupNameMappingFile != null) {\n      getLog().info(\"groupNameMappingFile: \" + groupNameMappingFile);\n    }\n    final Collection<String> groupsAsList = getTargetGroupsAsList();\n    final StopWatch watch = new StopWatch();\n    watch.start(\"processGroups: \" + groupsAsList);\n\n    final Collection<Callable<Void>> callables = new ArrayList<Callable<Void>>();\n\n    for (final String group : groupsAsList) {\n      for (final ResourceType resourceType : ResourceType.values()) {\n        final File destinationFolder = computeDestinationFolder(resourceType);\n        final String groupWithExtension = group + \".\" + resourceType.name().toLowerCase();\n\n        if (isParallelProcessing()) {\n          callables.add(Context.decorate(new Callable<Void>() {\n            public Void call()\n                throws Exception {\n              processGroup(groupWithExtension, destinationFolder);\n              return null;\n            }\n          }));\n        } else {\n          processGroup(groupWithExtension, destinationFolder);\n        }\n      }\n    }\n    if (isParallelProcessing()) {\n      getTaskExecutor().submit(callables);\n    }\n    watch.stop();\n    getLog().debug(watch.prettyPrint());\n    writeGroupNameMap();\n  }", "signature": "void doExecute()", "full_signature": "@Override protected void doExecute()", "class_method_signature": "Wro4jMojo.doExecute()", "testcase": false, "constructor": false, "invocations": ["info", "getLog", "info", "getLog", "info", "getLog", "info", "getLog", "info", "getLog", "getTargetGroupsAsList", "start", "values", "computeDestinationFolder", "toLowerCase", "name", "isParallelProcessing", "add", "decorate", "processGroup", "processGroup", "isParallelProcessing", "submit", "getTaskExecutor", "stop", "debug", "getLog", "prettyPrint", "writeGroupNameMap"]}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}