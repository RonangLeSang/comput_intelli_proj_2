{"test_class": {"identifier": "TestDefaultWildcardStreamLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WildcardStreamLocator locator;", "modifier": "private", "type": "WildcardStreamLocator", "declarator": "locator", "var_name": "locator"}], "file": "wro4j-core/src/test/java/ro/isdc/wro/model/resource/locator/wildcard/TestDefaultWildcardStreamLocator.java"}, "test_case": {"identifier": "testWildcardPresent4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWildcardPresent4() {\n    assertFalse(locator.hasWildcard(\"http://yui.yahooapis.com/combo?2.7.0/build/reset-fonts-grids/reset-fonts-grids.css&2.7.0/build/base/base-min.css&2.7.0/build/assets/skins/sam/skin.css\"));\n  }", "signature": "void testWildcardPresent4()", "full_signature": "@Test public void testWildcardPresent4()", "class_method_signature": "TestDefaultWildcardStreamLocator.testWildcardPresent4()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "hasWildcard"]}, "focal_class": {"identifier": "DefaultWildcardStreamLocator", "superclass": "", "interfaces": "implements WildcardStreamLocator, WildcardExpanderHandlerAware", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultWildcardStreamLocator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultWildcardStreamLocator.class)", "var_name": "LOG"}, {"original_string": "public static final String RECURSIVE_WILDCARD = \"**\";", "modifier": "public static final", "type": "String", "declarator": "RECURSIVE_WILDCARD = \"**\"", "var_name": "RECURSIVE_WILDCARD"}, {"original_string": "private static final String WILDCARD_REGEX = \"^(?:(?!http))(.)*[\\\\*\\\\?]+(.)*\";", "modifier": "private static final", "type": "String", "declarator": "WILDCARD_REGEX = \"^(?:(?!http))(.)*[\\\\*\\\\?]+(.)*\"", "var_name": "WILDCARD_REGEX"}, {"original_string": "private static final String REGEX_QUERY_PATH = \"\\\\?.*\";", "modifier": "private static final", "type": "String", "declarator": "REGEX_QUERY_PATH = \"\\\\?.*\"", "var_name": "REGEX_QUERY_PATH"}, {"original_string": "private static final Comparator<File> ALPHABETIC_FILE_COMPARATOR = new Comparator<File>() {\n    public int compare(final File o1, final File o2) {\n      return o1.getPath().compareTo(o2.getPath());\n    }\n  };", "modifier": "private static final", "type": "Comparator<File>", "declarator": "ALPHABETIC_FILE_COMPARATOR = new Comparator<File>() {\n    public int compare(final File o1, final File o2) {\n      return o1.getPath().compareTo(o2.getPath());\n    }\n  }", "var_name": "ALPHABETIC_FILE_COMPARATOR"}, {"original_string": "private Function<Collection<File>, Void> wildcardExpanderHandler;", "modifier": "private", "type": "Function<Collection<File>, Void>", "declarator": "wildcardExpanderHandler", "var_name": "wildcardExpanderHandler"}], "methods": [{"identifier": "stripQueryPath", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String stripQueryPath(final String path)", "full_signature": "public static String stripQueryPath(final String path)", "class_method_signature": "DefaultWildcardStreamLocator.stripQueryPath(final String path)", "testcase": false, "constructor": false}, {"identifier": "hasWildcard", "parameters": "(final String uri)", "modifiers": "public", "return": "boolean", "signature": "boolean hasWildcard(final String uri)", "full_signature": "public boolean hasWildcard(final String uri)", "class_method_signature": "DefaultWildcardStreamLocator.hasWildcard(final String uri)", "testcase": false, "constructor": false}, {"identifier": "locateStream", "parameters": "(final String uri, final File folder)", "modifiers": "public", "return": "InputStream", "signature": "InputStream locateStream(final String uri, final File folder)", "full_signature": "public InputStream locateStream(final String uri, final File folder)", "class_method_signature": "DefaultWildcardStreamLocator.locateStream(final String uri, final File folder)", "testcase": false, "constructor": false}, {"identifier": "createWildcardCollectorFileFilter", "parameters": "(final WildcardContext wildcardContext, final Collection<File> allFiles)", "modifiers": "@SuppressWarnings(\"serial\") private", "return": "IOFileFilter", "signature": "IOFileFilter createWildcardCollectorFileFilter(final WildcardContext wildcardContext, final Collection<File> allFiles)", "full_signature": "@SuppressWarnings(\"serial\") private IOFileFilter createWildcardCollectorFileFilter(final WildcardContext wildcardContext, final Collection<File> allFiles)", "class_method_signature": "DefaultWildcardStreamLocator.createWildcardCollectorFileFilter(final WildcardContext wildcardContext, final Collection<File> allFiles)", "testcase": false, "constructor": false}, {"identifier": "findMatchedFiles", "parameters": "(final WildcardContext wildcardContext)", "modifiers": "private", "return": "Collection<File>", "signature": "Collection<File> findMatchedFiles(final WildcardContext wildcardContext)", "full_signature": "private Collection<File> findMatchedFiles(final WildcardContext wildcardContext)", "class_method_signature": "DefaultWildcardStreamLocator.findMatchedFiles(final WildcardContext wildcardContext)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final WildcardContext wildcardContext)", "modifiers": "private", "return": "void", "signature": "void validate(final WildcardContext wildcardContext)", "full_signature": "private void validate(final WildcardContext wildcardContext)", "class_method_signature": "DefaultWildcardStreamLocator.validate(final WildcardContext wildcardContext)", "testcase": false, "constructor": false}, {"identifier": "triggerWildcardExpander", "parameters": "(final Collection<File> allFiles, final WildcardContext wildcardContext)", "modifiers": "", "return": "void", "signature": "void triggerWildcardExpander(final Collection<File> allFiles, final WildcardContext wildcardContext)", "full_signature": " void triggerWildcardExpander(final Collection<File> allFiles, final WildcardContext wildcardContext)", "class_method_signature": "DefaultWildcardStreamLocator.triggerWildcardExpander(final Collection<File> allFiles, final WildcardContext wildcardContext)", "testcase": false, "constructor": false}, {"identifier": "getFolderFilter", "parameters": "(final String wildcard)", "modifiers": "private", "return": "IOFileFilter", "signature": "IOFileFilter getFolderFilter(final String wildcard)", "full_signature": "private IOFileFilter getFolderFilter(final String wildcard)", "class_method_signature": "DefaultWildcardStreamLocator.getFolderFilter(final String wildcard)", "testcase": false, "constructor": false}, {"identifier": "setWildcardExpanderHandler", "parameters": "(final Function<Collection<File>, Void> handler)", "modifiers": "public", "return": "void", "signature": "void setWildcardExpanderHandler(final Function<Collection<File>, Void> handler)", "full_signature": "public void setWildcardExpanderHandler(final Function<Collection<File>, Void> handler)", "class_method_signature": "DefaultWildcardStreamLocator.setWildcardExpanderHandler(final Function<Collection<File>, Void> handler)", "testcase": false, "constructor": false}], "file": "wro4j-core/src/main/java/ro/isdc/wro/model/resource/locator/wildcard/DefaultWildcardStreamLocator.java"}, "focal_method": {"identifier": "hasWildcard", "parameters": "(final String uri)", "modifiers": "public", "return": "boolean", "body": "public boolean hasWildcard(final String uri) {\n    return uri.matches(WILDCARD_REGEX);\n  }", "signature": "boolean hasWildcard(final String uri)", "full_signature": "public boolean hasWildcard(final String uri)", "class_method_signature": "DefaultWildcardStreamLocator.hasWildcard(final String uri)", "testcase": false, "constructor": false, "invocations": ["matches"]}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}