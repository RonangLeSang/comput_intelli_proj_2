{"test_class": {"identifier": "TestPathPatternProcessorDecorator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PathPatternProcessorDecorator victim;", "modifier": "private", "type": "PathPatternProcessorDecorator", "declarator": "victim", "var_name": "victim"}, {"original_string": "@Mock\n  private Reader mockReader;", "modifier": "@Mock\n  private", "type": "Reader", "declarator": "mockReader", "var_name": "mockReader"}, {"original_string": "@Mock\n  private Writer mockWriter;", "modifier": "@Mock\n  private", "type": "Writer", "declarator": "mockWriter", "var_name": "mockWriter"}, {"original_string": "@Mock\n  private ResourcePreProcessor mockProcessor;", "modifier": "@Mock\n  private", "type": "ResourcePreProcessor", "declarator": "mockProcessor", "var_name": "mockProcessor"}], "file": "wro4j-extensions/src/test/java/ro/isdc/wro/extensions/processor/TestPathPatternProcessorDecorator.java"}, "test_case": {"identifier": "cannotIncludeNullProcessor", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n  public void cannotIncludeNullProcessor() {\n    PathPatternProcessorDecorator.include(null, \"\");\n  }", "signature": "void cannotIncludeNullProcessor()", "full_signature": "@Test(expected = NullPointerException.class) public void cannotIncludeNullProcessor()", "class_method_signature": "TestPathPatternProcessorDecorator.cannotIncludeNullProcessor()", "testcase": true, "constructor": false, "invocations": ["include"]}, "focal_class": {"identifier": "PathPatternProcessorDecorator", "superclass": "extends ProcessorDecorator", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PathPatternProcessorDecorator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PathPatternProcessorDecorator.class)", "var_name": "LOG"}, {"original_string": "private final String[] patterns;", "modifier": "private final", "type": "String[]", "declarator": "patterns", "var_name": "patterns"}, {"original_string": "private final AntPathMatcher matcher;", "modifier": "private final", "type": "AntPathMatcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "private final boolean includes;", "modifier": "private final", "type": "boolean", "declarator": "includes", "var_name": "includes"}], "methods": [{"identifier": "PathPatternProcessorDecorator", "parameters": "(final Object processor, final boolean includes, final String... patterns)", "modifiers": "private", "return": "", "signature": " PathPatternProcessorDecorator(final Object processor, final boolean includes, final String... patterns)", "full_signature": "private  PathPatternProcessorDecorator(final Object processor, final boolean includes, final String... patterns)", "class_method_signature": "PathPatternProcessorDecorator.PathPatternProcessorDecorator(final Object processor, final boolean includes, final String... patterns)", "testcase": false, "constructor": true}, {"identifier": "include", "parameters": "(final Object processor, final String... patterns)", "modifiers": "public static", "return": "PathPatternProcessorDecorator", "signature": "PathPatternProcessorDecorator include(final Object processor, final String... patterns)", "full_signature": "public static PathPatternProcessorDecorator include(final Object processor, final String... patterns)", "class_method_signature": "PathPatternProcessorDecorator.include(final Object processor, final String... patterns)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(final Object processor, final String... patterns)", "modifiers": "public static", "return": "PathPatternProcessorDecorator", "signature": "PathPatternProcessorDecorator exclude(final Object processor, final String... patterns)", "full_signature": "public static PathPatternProcessorDecorator exclude(final Object processor, final String... patterns)", "class_method_signature": "PathPatternProcessorDecorator.exclude(final Object processor, final String... patterns)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final Resource resource, final Reader reader,\n      final Writer writer)", "modifiers": "@Override public", "return": "void", "signature": "void process(final Resource resource, final Reader reader,\n      final Writer writer)", "full_signature": "@Override public void process(final Resource resource, final Reader reader,\n      final Writer writer)", "class_method_signature": "PathPatternProcessorDecorator.process(final Resource resource, final Reader reader,\n      final Writer writer)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PathPatternProcessorDecorator.toString()", "testcase": false, "constructor": false}], "file": "wro4j-extensions/src/main/java/ro/isdc/wro/extensions/processor/PathPatternProcessorDecorator.java"}, "focal_method": {"identifier": "include", "parameters": "(final Object processor, final String... patterns)", "modifiers": "public static", "return": "PathPatternProcessorDecorator", "body": "public static PathPatternProcessorDecorator include(final Object processor, final String... patterns) {\n    return new PathPatternProcessorDecorator(processor, true, patterns);\n  }", "signature": "PathPatternProcessorDecorator include(final Object processor, final String... patterns)", "full_signature": "public static PathPatternProcessorDecorator include(final Object processor, final String... patterns)", "class_method_signature": "PathPatternProcessorDecorator.include(final Object processor, final String... patterns)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 223355, "url": "https://github.com/alexo/wro4j", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 447, "size": 112331, "license": "licensed"}}