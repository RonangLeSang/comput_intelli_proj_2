{"test_class": {"identifier": "TestGitBranch", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private File repoDirectory;", "modifier": "private", "type": "File", "declarator": "repoDirectory", "var_name": "repoDirectory"}, {"original_string": "private GitCommit commit;", "modifier": "private", "type": "GitCommit", "declarator": "commit", "var_name": "commit"}, {"original_string": "private GitAdd add;", "modifier": "private", "type": "GitAdd", "declarator": "add", "var_name": "add"}, {"original_string": "private GitBranch branch;", "modifier": "private", "type": "GitBranch", "declarator": "branch", "var_name": "branch"}, {"original_string": "private Ref branchA = Ref.createBranchRef(\"branchA\");", "modifier": "private", "type": "Ref", "declarator": "branchA = Ref.createBranchRef(\"branchA\")", "var_name": "branchA"}, {"original_string": "private Ref branchB = Ref.createBranchRef(\"branchB\");", "modifier": "private", "type": "Ref", "declarator": "branchB = Ref.createBranchRef(\"branchB\")", "var_name": "branchB"}, {"original_string": "private GitBranchOptions options;", "modifier": "private", "type": "GitBranchOptions", "declarator": "options", "var_name": "options"}], "file": "src/edu/nyu/cs/javagit/api/commands/TestGitBranch.java"}, "test_case": {"identifier": "testCreateBranch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateBranch() throws IOException, JavaGitException {\n    branch.createBranch(repoDirectory, branchA);\n    branch.createBranch(repoDirectory, branchB);\n  }", "signature": "void testCreateBranch()", "full_signature": "@Test public void testCreateBranch()", "class_method_signature": "TestGitBranch.testCreateBranch()", "testcase": true, "constructor": false, "invocations": ["createBranch", "createBranch"]}, "focal_class": {"identifier": "GitBranch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "branch", "parameters": "(File repositoryPath)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse branch(File repositoryPath)", "full_signature": "public GitBranchResponse branch(File repositoryPath)", "class_method_signature": "GitBranch.branch(File repositoryPath)", "testcase": false, "constructor": false}, {"identifier": "branch", "parameters": "(File repositoryPath, GitBranchOptions options)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse branch(File repositoryPath, GitBranchOptions options)", "full_signature": "public GitBranchResponse branch(File repositoryPath, GitBranchOptions options)", "class_method_signature": "GitBranch.branch(File repositoryPath, GitBranchOptions options)", "testcase": false, "constructor": false}, {"identifier": "deleteBranch", "parameters": "(File repositoryPath, boolean forceDelete, boolean remote, \n      Ref branchName)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse deleteBranch(File repositoryPath, boolean forceDelete, boolean remote, \n      Ref branchName)", "full_signature": "public GitBranchResponse deleteBranch(File repositoryPath, boolean forceDelete, boolean remote, \n      Ref branchName)", "class_method_signature": "GitBranch.deleteBranch(File repositoryPath, boolean forceDelete, boolean remote, \n      Ref branchName)", "testcase": false, "constructor": false}, {"identifier": "deleteBranch", "parameters": "(File repositoryPath, boolean forceDelete, boolean remote, \n      List<Ref> branchList)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse deleteBranch(File repositoryPath, boolean forceDelete, boolean remote, \n      List<Ref> branchList)", "full_signature": "public GitBranchResponse deleteBranch(File repositoryPath, boolean forceDelete, boolean remote, \n      List<Ref> branchList)", "class_method_signature": "GitBranch.deleteBranch(File repositoryPath, boolean forceDelete, boolean remote, \n      List<Ref> branchList)", "testcase": false, "constructor": false}, {"identifier": "renameBranch", "parameters": "(File repositoryPath, boolean forceRename, Ref newName)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse renameBranch(File repositoryPath, boolean forceRename, Ref newName)", "full_signature": "public GitBranchResponse renameBranch(File repositoryPath, boolean forceRename, Ref newName)", "class_method_signature": "GitBranch.renameBranch(File repositoryPath, boolean forceRename, Ref newName)", "testcase": false, "constructor": false}, {"identifier": "renameBranch", "parameters": "(File repositoryPath, boolean forceRename, Ref oldName, \n      Ref newName)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse renameBranch(File repositoryPath, boolean forceRename, Ref oldName, \n      Ref newName)", "full_signature": "public GitBranchResponse renameBranch(File repositoryPath, boolean forceRename, Ref oldName, \n      Ref newName)", "class_method_signature": "GitBranch.renameBranch(File repositoryPath, boolean forceRename, Ref oldName, \n      Ref newName)", "testcase": false, "constructor": false}, {"identifier": "createBranch", "parameters": "(File repositoryPath, Ref branchName)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse createBranch(File repositoryPath, Ref branchName)", "full_signature": "public GitBranchResponse createBranch(File repositoryPath, Ref branchName)", "class_method_signature": "GitBranch.createBranch(File repositoryPath, Ref branchName)", "testcase": false, "constructor": false}, {"identifier": "createBranch", "parameters": "(File repositoryPath, GitBranchOptions options, \n      Ref branchName)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse createBranch(File repositoryPath, GitBranchOptions options, \n      Ref branchName)", "full_signature": "public GitBranchResponse createBranch(File repositoryPath, GitBranchOptions options, \n      Ref branchName)", "class_method_signature": "GitBranch.createBranch(File repositoryPath, GitBranchOptions options, \n      Ref branchName)", "testcase": false, "constructor": false}, {"identifier": "createBranch", "parameters": "(File repositoryPath, Ref branchName, Ref startPoint)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse createBranch(File repositoryPath, Ref branchName, Ref startPoint)", "full_signature": "public GitBranchResponse createBranch(File repositoryPath, Ref branchName, Ref startPoint)", "class_method_signature": "GitBranch.createBranch(File repositoryPath, Ref branchName, Ref startPoint)", "testcase": false, "constructor": false}, {"identifier": "createBranch", "parameters": "(File repositoryPath, GitBranchOptions options, \n      Ref branchName, Ref startPoint)", "modifiers": "public", "return": "GitBranchResponse", "signature": "GitBranchResponse createBranch(File repositoryPath, GitBranchOptions options, \n      Ref branchName, Ref startPoint)", "full_signature": "public GitBranchResponse createBranch(File repositoryPath, GitBranchOptions options, \n      Ref branchName, Ref startPoint)", "class_method_signature": "GitBranch.createBranch(File repositoryPath, GitBranchOptions options, \n      Ref branchName, Ref startPoint)", "testcase": false, "constructor": false}], "file": "src/edu/nyu/cs/javagit/api/commands/GitBranch.java"}, "focal_method": {"identifier": "createBranch", "parameters": "(File repositoryPath, Ref branchName)", "modifiers": "public", "return": "GitBranchResponse", "body": "public GitBranchResponse createBranch(File repositoryPath, Ref branchName) throws IOException, \n      JavaGitException {\n    CheckUtilities.checkNullArgument(repositoryPath, \"repository path\");\n    CheckUtilities.checkNullArgument(branchName, \"branch name\");\n    CheckUtilities.validateArgumentRefType(branchName, Ref.RefType.BRANCH, \"branch name\");\n\n    IClient client = ClientManager.getInstance().getPreferredClient();\n    IGitBranch gitBranch = client.getGitBranchInstance();\n    return gitBranch.createBranch(repositoryPath, branchName);\n  }", "signature": "GitBranchResponse createBranch(File repositoryPath, Ref branchName)", "full_signature": "public GitBranchResponse createBranch(File repositoryPath, Ref branchName)", "class_method_signature": "GitBranch.createBranch(File repositoryPath, Ref branchName)", "testcase": false, "constructor": false, "invocations": ["checkNullArgument", "checkNullArgument", "validateArgumentRefType", "getPreferredClient", "getInstance", "getGitBranchInstance", "createBranch"]}, "repository": {"repo_id": 5208272, "url": "https://github.com/cwi-swat/rascal-msr", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 5374, "license": "licensed"}}