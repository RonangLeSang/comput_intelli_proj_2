{"test_class": {"identifier": "AscReaderDriverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}], "file": "h2gis-extension/src/test/java/org/noise_planet/noisemodelling/ext/asc/AscReaderDriverTest.java"}, "test_case": {"identifier": "testReadPrecip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadPrecip() throws IOException, SQLException {\n        AscReaderDriver reader = new AscReaderDriver();\n        try(InputStream inputStream = AscReaderDriverTest.class.getResourceAsStream(\"precip30min.asc\")) {\n            reader.read(connection, inputStream, new EmptyProgressVisitor(), \"PRECIP30MIN\", 4326);\n        }\n\n        // Check database content\n\n        // Check first read cell\n        Statement st = connection.createStatement();\n        try(ResultSet rs = st.executeQuery(\"SELECT * FROM PRECIP30MIN WHERE ST_INTERSECTS(THE_GEOM, ST_MAKEPOINT(-179.74,-80.18))\")) {\n            assertTrue(rs.next());\n            assertEquals(234, rs.getInt(\"Z\"));\n        }\n\n        // Check last read cell\n        st = connection.createStatement();\n        try(ResultSet rs = st.executeQuery(\"SELECT * FROM PRECIP30MIN WHERE ST_INTERSECTS(THE_GEOM, ST_MAKEPOINT(-172.604,-89.867))\")) {\n            assertTrue(rs.next());\n            assertEquals(114, rs.getInt(\"Z\"));\n        }\n\n        // Check nodata cell\n        st = connection.createStatement();\n        try(ResultSet rs = st.executeQuery(\"SELECT * FROM PRECIP30MIN WHERE ST_INTERSECTS(THE_GEOM, ST_MAKEPOINT(-177.438, -84.077))\")) {\n            assertTrue(rs.next());\n            assertNull(rs.getObject(\"Z\"));\n        }\n    }", "signature": "void testReadPrecip()", "full_signature": "@Test public void testReadPrecip()", "class_method_signature": "AscReaderDriverTest.testReadPrecip()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "read", "createStatement", "executeQuery", "assertTrue", "next", "assertEquals", "getInt", "createStatement", "executeQuery", "assertTrue", "next", "assertEquals", "getInt", "createStatement", "executeQuery", "assertTrue", "next", "assertNull", "getObject"]}, "focal_class": {"identifier": "AscReaderDriver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BATCH_MAX_SIZE = 100;", "modifier": "private static final", "type": "int", "declarator": "BATCH_MAX_SIZE = 100", "var_name": "BATCH_MAX_SIZE"}, {"original_string": "private static final int BUFFER_SIZE = 16384;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 16384", "var_name": "BUFFER_SIZE"}, {"original_string": "private boolean as3DPoint = false;", "modifier": "private", "type": "boolean", "declarator": "as3DPoint = false", "var_name": "as3DPoint"}, {"original_string": "private Envelope extractEnvelope = null;", "modifier": "private", "type": "Envelope", "declarator": "extractEnvelope = null", "var_name": "extractEnvelope"}, {"original_string": "private int downScale = 1;", "modifier": "private", "type": "int", "declarator": "downScale = 1", "var_name": "downScale"}], "methods": [{"identifier": "isAs3DPoint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAs3DPoint()", "full_signature": "public boolean isAs3DPoint()", "class_method_signature": "AscReaderDriver.isAs3DPoint()", "testcase": false, "constructor": false}, {"identifier": "setAs3DPoint", "parameters": "(boolean as3DPoint)", "modifiers": "public", "return": "void", "signature": "void setAs3DPoint(boolean as3DPoint)", "full_signature": "public void setAs3DPoint(boolean as3DPoint)", "class_method_signature": "AscReaderDriver.setAs3DPoint(boolean as3DPoint)", "testcase": false, "constructor": false}, {"identifier": "getExtractEnvelope", "parameters": "()", "modifiers": "public", "return": "Envelope", "signature": "Envelope getExtractEnvelope()", "full_signature": "public Envelope getExtractEnvelope()", "class_method_signature": "AscReaderDriver.getExtractEnvelope()", "testcase": false, "constructor": false}, {"identifier": "setExtractEnvelope", "parameters": "(Envelope extractEnvelope)", "modifiers": "public", "return": "void", "signature": "void setExtractEnvelope(Envelope extractEnvelope)", "full_signature": "public void setExtractEnvelope(Envelope extractEnvelope)", "class_method_signature": "AscReaderDriver.setExtractEnvelope(Envelope extractEnvelope)", "testcase": false, "constructor": false}, {"identifier": "getDownScale", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDownScale()", "full_signature": "public int getDownScale()", "class_method_signature": "AscReaderDriver.getDownScale()", "testcase": false, "constructor": false}, {"identifier": "setDownScale", "parameters": "(int downScale)", "modifiers": "public", "return": "void", "signature": "void setDownScale(int downScale)", "full_signature": "public void setDownScale(int downScale)", "class_method_signature": "AscReaderDriver.setDownScale(int downScale)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "modifiers": "public", "return": "void", "signature": "void read(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "full_signature": "public void read(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "class_method_signature": "AscReaderDriver.read(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "testcase": false, "constructor": false}], "file": "h2gis-extension/src/main/java/org/noise_planet/noisemodelling/ext/asc/AscReaderDriver.java"}, "focal_method": {"identifier": "read", "parameters": "(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "modifiers": "public", "return": "void", "body": "public void read(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid) throws SQLException, IOException {\n        BufferedInputStream bof = new BufferedInputStream(inputStream, BUFFER_SIZE);\n        String lastWord = \"\";\n        try {\n            Scanner scanner = new Scanner(bof);\n            // Read HEADER\n            // NCOLS\n            lastWord = scanner.next();\n            if (!lastWord.equalsIgnoreCase(\"NCOLS\")) {\n                throw new IOException(\"Unexpected word \" + lastWord);\n            }\n            // XXX\n            lastWord = scanner.next();\n            int ncols = Integer.parseInt(lastWord);\n            if (ncols <= 0) {\n                throw new IOException(\"NCOLS <= 0\");\n            }\n            // NROWS\n            lastWord = scanner.next();\n            if (!lastWord.equalsIgnoreCase(\"NROWS\")) {\n                throw new IOException(\"Unexpected word \" + lastWord);\n            }\n            // XXX\n            lastWord = scanner.next();\n            int nrows = Integer.parseInt(lastWord);\n            if (nrows <= 0) {\n                throw new IOException(\"NROWS <= 0\");\n            }\n            // XLLCENTER or XLLCORNER\n            lastWord = scanner.next();\n            if (!(lastWord.equalsIgnoreCase(\"XLLCENTER\") || lastWord.equalsIgnoreCase(\"XLLCORNER\"))) {\n                throw new IOException(\"Unexpected word \" + lastWord);\n            }\n            boolean isXCenter = lastWord.equalsIgnoreCase(\"XLLCENTER\");\n            // XXX\n            lastWord = scanner.next();\n            double xValue = Double.parseDouble(lastWord);\n\n            // YLLCENTER or YLLCORNER\n            lastWord = scanner.next();\n            if (!(lastWord.equalsIgnoreCase(\"YLLCENTER\") || lastWord.equalsIgnoreCase(\"YLLCORNER\"))) {\n                throw new IOException(\"Unexpected word \" + lastWord);\n            }\n            boolean isYCenter = lastWord.equalsIgnoreCase(\"YLLCENTER\");\n            // XXX\n            lastWord = scanner.next();\n            double yValue = Double.parseDouble(lastWord);\n\n            // CELLSIZE\n            lastWord = scanner.next();\n            if (!lastWord.equalsIgnoreCase(\"CELLSIZE\")) {\n                throw new IOException(\"Unexpected word \" + lastWord);\n            }\n            // XXX\n            lastWord = scanner.next();\n            double cellSize = Double.parseDouble(lastWord);\n            // Compute offsets\n            if (isXCenter) {\n                xValue = xValue - cellSize / 2;\n            }\n            if (isYCenter) {\n                yValue = yValue + cellSize * nrows - cellSize / 2;\n            } else {\n                yValue = yValue + cellSize * nrows;\n            }\n            // Optional NODATA_VALUE\n            lastWord = scanner.next();\n            boolean readFirst = false;\n            int noData = -9999;\n            if (lastWord.equalsIgnoreCase(\"NODATA_VALUE\")) {\n                readFirst = true;\n                // XXX\n                lastWord = scanner.next();\n                noData = Integer.parseInt(lastWord);\n            }\n\n            Statement st = connection.createStatement();\n            PreparedStatement preparedStatement;\n            if(as3DPoint) {\n                st.execute(\"CREATE TABLE \" + tableReference + \"(PK SERIAL NOT NULL, THE_GEOM GEOMETRY, \" + \" CONSTRAINT ASC_PK PRIMARY KEY (PK))\");\n                preparedStatement = connection.prepareStatement(\"INSERT INTO \" + tableReference +\n                        \"(the_geom) VALUES (?)\");\n            } else {\n                st.execute(\"CREATE TABLE \" + tableReference + \"(PK SERIAL NOT NULL, THE_GEOM GEOMETRY,Z int, \" + \" CONSTRAINT ASC_PK PRIMARY KEY (PK))\");\n                preparedStatement = connection.prepareStatement(\"INSERT INTO \" + tableReference +\n                        \"(the_geom, Z) VALUES (?, ?)\");\n            }\n            // Read data\n            GeometryFactory factory = new GeometryFactory();\n            int batchSize = 0;\n            int firstRow = 0;\n            int firstCol = 0;\n            int lastRow = nrows;\n            int lastCol = ncols;\n            // Compute envelope\n            if(extractEnvelope != null) {\n                firstCol = (int)Math.floor((extractEnvelope.getMinX() - xValue) / cellSize);\n                lastCol = (int)Math.ceil((extractEnvelope.getMaxX() - xValue) / cellSize);\n                firstRow = nrows - (int)Math.ceil((extractEnvelope.getMaxY() - (yValue - cellSize * nrows)) / cellSize);\n                lastRow = nrows - (int)Math.ceil((extractEnvelope.getMinY() - (yValue - cellSize * nrows)) / cellSize);\n            }\n            ProgressVisitor cellProgress = new EmptyProgressVisitor();\n            if (progress != null) {\n                cellProgress = progress.subProcess(lastRow);\n            }\n            for (int i = 0; i < nrows; i++) {\n                for (int j = 0; j < ncols; j++) {\n                    if (readFirst) {\n                        lastWord = scanner.next();\n                    } else {\n                        readFirst = true;\n                    }\n                    if((downScale == 1 || (i % downScale == 0 && j % downScale == 0)) && (extractEnvelope == null || (i >= firstRow && i <= lastRow && j >= firstCol && j <= lastCol))) {\n                        int data = Integer.parseInt(lastWord);\n                        double x = xValue + j * cellSize;\n                        double y = yValue - i * cellSize;\n                        if (as3DPoint) {\n                            if (data != noData) {\n                                Point cell = factory.createPoint(new Coordinate(new Coordinate(x + cellSize / 2, y - cellSize / 2, data)));\n                                cell.setSRID(srid);\n                                preparedStatement.setObject(1, cell);\n                                preparedStatement.addBatch();\n                                batchSize++;\n                            }\n                        } else {\n                            Polygon cell = factory.createPolygon(new Coordinate[]{new Coordinate(x, y), new Coordinate(x, y - cellSize * downScale), new Coordinate(x + cellSize * downScale, y - cellSize * downScale), new Coordinate(x + cellSize * downScale, y), new Coordinate(x, y)});\n                            cell.setSRID(srid);\n                            preparedStatement.setObject(1, cell);\n                            if (data != noData) {\n                                preparedStatement.setObject(2, data);\n                            } else {\n                                preparedStatement.setNull(2, Types.INTEGER);\n                            }\n                            preparedStatement.addBatch();\n                            batchSize++;\n                        }\n                        if (batchSize >= BATCH_MAX_SIZE) {\n                            preparedStatement.executeBatch();\n                            preparedStatement.clearBatch();\n                            batchSize = 0;\n                        }\n                    }\n                }\n                cellProgress.endStep();\n                if(i > lastRow) {\n                    break;\n                }\n            }\n            if (batchSize > 0) {\n                preparedStatement.executeBatch();\n            }\n        } catch (NoSuchElementException | NumberFormatException ex) {\n            throw new SQLException(\"Unexpected word \" + lastWord, ex);\n        }\n    }", "signature": "void read(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "full_signature": "public void read(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "class_method_signature": "AscReaderDriver.read(Connection connection, InputStream inputStream, ProgressVisitor progress, String tableReference,\n                     int srid)", "testcase": false, "constructor": false, "invocations": ["next", "equalsIgnoreCase", "next", "parseInt", "next", "equalsIgnoreCase", "next", "parseInt", "next", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "next", "parseDouble", "next", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "next", "parseDouble", "next", "equalsIgnoreCase", "next", "parseDouble", "next", "equalsIgnoreCase", "next", "parseInt", "createStatement", "execute", "prepareStatement", "execute", "prepareStatement", "floor", "getMinX", "ceil", "getMaxX", "ceil", "getMaxY", "ceil", "getMinY", "subProcess", "next", "parseInt", "createPoint", "setSRID", "setObject", "addBatch", "createPolygon", "setSRID", "setObject", "setObject", "setNull", "addBatch", "executeBatch", "clearBatch", "endStep", "executeBatch"]}, "repository": {"repo_id": 5002457, "url": "https://github.com/Ifsttar/NoiseModelling", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 38, "size": 38887, "license": "licensed"}}