{"test_class": {"identifier": "ShrinkingLargeProgressMonitorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dori/dicom-uploader/uploader-core/src/test/java/org/mitre/eyesfirst/ui/ShrinkingLargeProgressMonitorTest.java"}, "test_case": {"identifier": "testStartTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStartTask() {\n\t\tShrinkingLargeProgressMonitor pm = new ShrinkingLargeProgressMonitor(new NullProgressMonitor());\n\t\tpm.startTask(0x7FFFFFFFL, \"\");\n\t\tassertEquals(\"Shift\", pm.shift, 0);\n\t\tpm.startTask(0x80000000L, \"\");\n\t\tassertEquals(\"Shift\", pm.shift, 1);\n\t\tpm.startTask(0x100000000L, \"\");\n\t\tassertEquals(\"Shift\", pm.shift, 2);\n\t\tpm.startTask(0x200000000L, \"\");\n\t\tassertEquals(\"Shift\", pm.shift, 3);\n\t}", "signature": "void testStartTask()", "full_signature": "@Test public void testStartTask()", "class_method_signature": "ShrinkingLargeProgressMonitorTest.testStartTask()", "testcase": true, "constructor": false, "invocations": ["startTask", "assertEquals", "startTask", "assertEquals", "startTask", "assertEquals", "startTask", "assertEquals"]}, "focal_class": {"identifier": "ShrinkingLargeProgressMonitor", "superclass": "", "interfaces": "implements LargeProgressMonitor", "fields": [{"original_string": "private final ProgressMonitor wrapped;", "modifier": "private final", "type": "ProgressMonitor", "declarator": "wrapped", "var_name": "wrapped"}, {"original_string": "private long totalWorked = 0;", "modifier": "private", "type": "long", "declarator": "totalWorked = 0", "var_name": "totalWorked"}, {"original_string": "private int intTotalWorked = 0;", "modifier": "private", "type": "int", "declarator": "intTotalWorked = 0", "var_name": "intTotalWorked"}, {"original_string": "int shift = 0;", "modifier": "", "type": "int", "declarator": "shift = 0", "var_name": "shift"}], "methods": [{"identifier": "ShrinkingLargeProgressMonitor", "parameters": "(ProgressMonitor wrapped)", "modifiers": "public", "return": "", "signature": " ShrinkingLargeProgressMonitor(ProgressMonitor wrapped)", "full_signature": "public  ShrinkingLargeProgressMonitor(ProgressMonitor wrapped)", "class_method_signature": "ShrinkingLargeProgressMonitor.ShrinkingLargeProgressMonitor(ProgressMonitor wrapped)", "testcase": false, "constructor": true}, {"identifier": "subTask", "parameters": "(String message)", "modifiers": "@Override public", "return": "void", "signature": "void subTask(String message)", "full_signature": "@Override public void subTask(String message)", "class_method_signature": "ShrinkingLargeProgressMonitor.subTask(String message)", "testcase": false, "constructor": false}, {"identifier": "startTask", "parameters": "(long totalUnits, String task)", "modifiers": "@Override public", "return": "void", "signature": "void startTask(long totalUnits, String task)", "full_signature": "@Override public void startTask(long totalUnits, String task)", "class_method_signature": "ShrinkingLargeProgressMonitor.startTask(long totalUnits, String task)", "testcase": false, "constructor": false}, {"identifier": "worked", "parameters": "(long workUnits)", "modifiers": "@Override public", "return": "void", "signature": "void worked(long workUnits)", "full_signature": "@Override public void worked(long workUnits)", "class_method_signature": "ShrinkingLargeProgressMonitor.worked(long workUnits)", "testcase": false, "constructor": false}], "file": "dori/dicom-uploader/uploader-core/src/main/java/org/mitre/eyesfirst/ui/ShrinkingLargeProgressMonitor.java"}, "focal_method": {"identifier": "startTask", "parameters": "(long totalUnits, String task)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void startTask(long totalUnits, String task) {\n\t\tif (totalUnits < 0)\n\t\t\tthrow new IllegalArgumentException(\"Total works units must be positive.\");\n\t\t// Calculate the shift. This is inversely related to the number of\n\t\t// leading zeros: if we start off with 33 leading zeros, we need no shift,\n\t\t// because the value is an int. If we have 32, we need to shift one bit\n\t\t// over to fit it into an int. And so on.\n\t\tshift = 33 - Long.numberOfLeadingZeros(totalUnits);\n\t\t// If it already fits in an int, we use 0.\n\t\tif (shift < 0)\n\t\t\tshift = 0;\n\t\t// Reset total worked.\n\t\ttotalWorked = 0;\n\t\tintTotalWorked = 0;\n\t\twrapped.startTask((int)(totalUnits >> shift), task);\n\t}", "signature": "void startTask(long totalUnits, String task)", "full_signature": "@Override public void startTask(long totalUnits, String task)", "class_method_signature": "ShrinkingLargeProgressMonitor.startTask(long totalUnits, String task)", "testcase": false, "constructor": false, "invocations": ["numberOfLeadingZeros", "startTask"]}, "repository": {"repo_id": 4327427, "url": "https://github.com/EyesFirst/eyesfirst", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 35304, "license": "licensed"}}