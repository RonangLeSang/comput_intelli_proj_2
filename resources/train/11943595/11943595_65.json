{"test_class": {"identifier": "MutableSchemaTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/metamodel/schema/MutableSchemaTest.java"}, "test_case": {"identifier": "testDeserializeOldFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserializeOldFormat() throws Exception {\n        final File file = new File(\"src/test/resources/metamodel-4.6.0-mutableschema-etc.ser\");\n        assertTrue(file.exists());\n\n        try (final FileInputStream in = new FileInputStream(file)) {\n            final LegacyDeserializationObjectInputStream ois = new LegacyDeserializationObjectInputStream(in);\n            final Object obj = ois.readObject();\n            assertTrue(obj instanceof MutableSchema);\n            ois.close();\n\n            final MutableSchema sch = (MutableSchema) obj;\n            assertEquals(\"schema\", sch.getName());\n\n            assertEquals(2, sch.getTableCount());\n\n            final Table table1 = sch.getTable(0);\n            assertTrue(table1 instanceof MutableTable);\n            assertEquals(\"t1\", table1.getName());\n            assertEquals(Arrays.asList(\"t1_c1\", \"t1_c2\"), table1.getColumnNames());\n            assertEquals(1, table1.getRelationshipCount());\n\n            final Table table2 = sch.getTable(1);\n            assertTrue(table2 instanceof MutableTable);\n            assertEquals(\"t2\", table2.getName());\n            assertEquals(Arrays.asList(\"t2_c1\"), table2.getColumnNames());\n            assertEquals(1, table2.getRelationshipCount());\n\n            final Relationship rel1 = table1.getRelationships().iterator().next();\n            final Relationship rel2 = table2.getRelationships().iterator().next();\n            assertSame(rel1, rel2);\n            assertTrue(rel1 instanceof MutableRelationship);\n        }\n    }", "signature": "void testDeserializeOldFormat()", "full_signature": "@Test public void testDeserializeOldFormat()", "class_method_signature": "MutableSchemaTest.testDeserializeOldFormat()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "readObject", "assertTrue", "close", "assertEquals", "getName", "assertEquals", "getTableCount", "getTable", "assertTrue", "assertEquals", "getName", "assertEquals", "asList", "getColumnNames", "assertEquals", "getRelationshipCount", "getTable", "assertTrue", "assertEquals", "getName", "assertEquals", "asList", "getColumnNames", "assertEquals", "getRelationshipCount", "next", "iterator", "getRelationships", "next", "iterator", "getRelationships", "assertSame", "assertTrue"]}, "focal_class": {"identifier": "MutableSchema", "superclass": "extends AbstractSchema", "interfaces": "implements Serializable,\n\t\tSchema", "fields": [{"original_string": "private static final long serialVersionUID = 4465197783868238863L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4465197783868238863L", "var_name": "serialVersionUID"}, {"original_string": "private String _name;", "modifier": "private", "type": "String", "declarator": "_name", "var_name": "_name"}, {"original_string": "private final List<Table> _tables;", "modifier": "private final", "type": "List<Table>", "declarator": "_tables", "var_name": "_tables"}], "methods": [{"identifier": "MutableSchema", "parameters": "()", "modifiers": "public", "return": "", "signature": " MutableSchema()", "full_signature": "public  MutableSchema()", "class_method_signature": "MutableSchema.MutableSchema()", "testcase": false, "constructor": true}, {"identifier": "MutableSchema", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " MutableSchema(String name)", "full_signature": "public  MutableSchema(String name)", "class_method_signature": "MutableSchema.MutableSchema(String name)", "testcase": false, "constructor": true}, {"identifier": "MutableSchema", "parameters": "(String name, Table... tables)", "modifiers": "public", "return": "", "signature": " MutableSchema(String name, Table... tables)", "full_signature": "public  MutableSchema(String name, Table... tables)", "class_method_signature": "MutableSchema.MutableSchema(String name, Table... tables)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "MutableSchema.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "MutableSchema", "signature": "MutableSchema setName(String name)", "full_signature": "public MutableSchema setName(String name)", "class_method_signature": "MutableSchema.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getTables", "parameters": "()", "modifiers": "@Override public", "return": "List<Table>", "signature": "List<Table> getTables()", "full_signature": "@Override public List<Table> getTables()", "class_method_signature": "MutableSchema.getTables()", "testcase": false, "constructor": false}, {"identifier": "setTables", "parameters": "(Collection<? extends Table> tables)", "modifiers": "public", "return": "MutableSchema", "signature": "MutableSchema setTables(Collection<? extends Table> tables)", "full_signature": "public MutableSchema setTables(Collection<? extends Table> tables)", "class_method_signature": "MutableSchema.setTables(Collection<? extends Table> tables)", "testcase": false, "constructor": false}, {"identifier": "setTables", "parameters": "(Table... tables)", "modifiers": "public", "return": "MutableSchema", "signature": "MutableSchema setTables(Table... tables)", "full_signature": "public MutableSchema setTables(Table... tables)", "class_method_signature": "MutableSchema.setTables(Table... tables)", "testcase": false, "constructor": false}, {"identifier": "clearTables", "parameters": "()", "modifiers": "public", "return": "MutableSchema", "signature": "MutableSchema clearTables()", "full_signature": "public MutableSchema clearTables()", "class_method_signature": "MutableSchema.clearTables()", "testcase": false, "constructor": false}, {"identifier": "addTable", "parameters": "(Table table)", "modifiers": "public", "return": "MutableSchema", "signature": "MutableSchema addTable(Table table)", "full_signature": "public MutableSchema addTable(Table table)", "class_method_signature": "MutableSchema.addTable(Table table)", "testcase": false, "constructor": false}, {"identifier": "removeTable", "parameters": "(Table table)", "modifiers": "public", "return": "MutableSchema", "signature": "MutableSchema removeTable(Table table)", "full_signature": "public MutableSchema removeTable(Table table)", "class_method_signature": "MutableSchema.removeTable(Table table)", "testcase": false, "constructor": false}, {"identifier": "getQuote", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getQuote()", "full_signature": "@Override public String getQuote()", "class_method_signature": "MutableSchema.getQuote()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/metamodel/schema/MutableSchema.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getName() {\n\t\treturn _name;\n\t}", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "MutableSchema.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 11943595, "url": "https://github.com/apache/metamodel", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 129, "size": 7017, "license": "licensed"}}