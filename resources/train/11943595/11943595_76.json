{"test_class": {"identifier": "Neo4jRequestWrapperTest", "superclass": "extends Neo4jTestCase", "interfaces": "", "fields": [], "file": "neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jRequestWrapperTest.java"}, "test_case": {"identifier": "testCreateCypherQueryWithAuthentication", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateCypherQueryWithAuthentication() {\n        if (!isConfigured()) {\n            System.err.println(getInvalidConfigurationMessage());\n            return;\n        }\n\n        CloseableHttpClient mockHttpClient = new CloseableHttpClient() {\n\n            @Override\n            public void close() throws IOException {\n                // Do nothing\n            }\n\n            @Override\n            public HttpParams getParams() {\n                // Do nothing\n                return null;\n            }\n\n            @Override\n            public ClientConnectionManager getConnectionManager() {\n                // Do nothing\n                return null;\n            }\n\n            @Override\n            protected CloseableHttpResponse doExecute(HttpHost target, HttpRequest request, HttpContext context)\n                    throws IOException, ClientProtocolException {\n                assertTrue(request instanceof HttpPost);\n                HttpPost httpPost = (HttpPost) request;\n\n                Header[] headers = httpPost.getHeaders(\"Authorization\");\n                assertNotNull(headers);\n                assertEquals(1, headers.length);\n                String base64Encoded = headers[0].getValue();\n                base64Encoded = base64Encoded.replace(\"Basic \", \"\");\n                String decoded = new String(BaseEncoding.base64().decode(base64Encoded), StandardCharsets.UTF_8);\n                assertEquals(\"testUsername:testPassword\", decoded);\n\n                assertEquals(\"{\\\"statements\\\":[{\\\"statement\\\":\\\"MATCH (n) RETURN n;\\\"}]}\",\n                        EntityUtils.toString(httpPost.getEntity()));\n\n                CloseableHttpResponse mockResponse = new MockClosableHttpResponse(HttpVersion.HTTP_1_1, 200, \"OK\");\n                return mockResponse;\n            }\n        };\n\n        Neo4jRequestWrapper wrapper = new Neo4jRequestWrapper(mockHttpClient, new HttpHost(getHostname(), getPort()),\n                \"testUsername\", \"testPassword\", getServiceRoot());\n        wrapper.executeCypherQuery(\"MATCH (n) RETURN n;\");\n        // Assertions are in the HttpClient\n    }", "signature": "void testCreateCypherQueryWithAuthentication()", "full_signature": "@Test public void testCreateCypherQueryWithAuthentication()", "class_method_signature": "Neo4jRequestWrapperTest.testCreateCypherQueryWithAuthentication()", "testcase": true, "constructor": false, "invocations": ["isConfigured", "println", "getInvalidConfigurationMessage", "assertTrue", "getHeaders", "assertNotNull", "assertEquals", "getValue", "replace", "decode", "base64", "assertEquals", "assertEquals", "toString", "getEntity", "getHostname", "getPort", "getServiceRoot", "executeCypherQuery"]}, "focal_class": {"identifier": "Neo4jRequestWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Neo4jRequestWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Neo4jRequestWrapper.class)", "var_name": "logger"}, {"original_string": "private final CloseableHttpClient _httpClient;", "modifier": "private final", "type": "CloseableHttpClient", "declarator": "_httpClient", "var_name": "_httpClient"}, {"original_string": "private final HttpHost _httpHost;", "modifier": "private final", "type": "HttpHost", "declarator": "_httpHost", "var_name": "_httpHost"}, {"original_string": "private final HttpPost _cypherQueryHttpPost;", "modifier": "private final", "type": "HttpPost", "declarator": "_cypherQueryHttpPost", "var_name": "_cypherQueryHttpPost"}, {"original_string": "private final String _username;", "modifier": "private final", "type": "String", "declarator": "_username", "var_name": "_username"}, {"original_string": "private final String _password;", "modifier": "private final", "type": "String", "declarator": "_password", "var_name": "_password"}], "methods": [{"identifier": "Neo4jRequestWrapper", "parameters": "(final CloseableHttpClient httpClient, final HttpHost httpHost, final String username,\n            final String password, final String serviceRoot)", "modifiers": "public", "return": "", "signature": " Neo4jRequestWrapper(final CloseableHttpClient httpClient, final HttpHost httpHost, final String username,\n            final String password, final String serviceRoot)", "full_signature": "public  Neo4jRequestWrapper(final CloseableHttpClient httpClient, final HttpHost httpHost, final String username,\n            final String password, final String serviceRoot)", "class_method_signature": "Neo4jRequestWrapper.Neo4jRequestWrapper(final CloseableHttpClient httpClient, final HttpHost httpHost, final String username,\n            final String password, final String serviceRoot)", "testcase": false, "constructor": true}, {"identifier": "Neo4jRequestWrapper", "parameters": "(final CloseableHttpClient httpClient, final HttpHost httpHost,\n            final String serviceRoot)", "modifiers": "public", "return": "", "signature": " Neo4jRequestWrapper(final CloseableHttpClient httpClient, final HttpHost httpHost,\n            final String serviceRoot)", "full_signature": "public  Neo4jRequestWrapper(final CloseableHttpClient httpClient, final HttpHost httpHost,\n            final String serviceRoot)", "class_method_signature": "Neo4jRequestWrapper.Neo4jRequestWrapper(final CloseableHttpClient httpClient, final HttpHost httpHost,\n            final String serviceRoot)", "testcase": false, "constructor": true}, {"identifier": "executeRestRequest", "parameters": "(final HttpRequestBase httpRequest)", "modifiers": "public", "return": "String", "signature": "String executeRestRequest(final HttpRequestBase httpRequest)", "full_signature": "public String executeRestRequest(final HttpRequestBase httpRequest)", "class_method_signature": "Neo4jRequestWrapper.executeRestRequest(final HttpRequestBase httpRequest)", "testcase": false, "constructor": false}, {"identifier": "executeRestRequest", "parameters": "(final HttpRequestBase httpRequest, final String username, final String password)", "modifiers": "public", "return": "String", "signature": "String executeRestRequest(final HttpRequestBase httpRequest, final String username, final String password)", "full_signature": "public String executeRestRequest(final HttpRequestBase httpRequest, final String username, final String password)", "class_method_signature": "Neo4jRequestWrapper.executeRestRequest(final HttpRequestBase httpRequest, final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "executeCypherQuery", "parameters": "(final String cypherQuery)", "modifiers": "public", "return": "String", "signature": "String executeCypherQuery(final String cypherQuery)", "full_signature": "public String executeCypherQuery(final String cypherQuery)", "class_method_signature": "Neo4jRequestWrapper.executeCypherQuery(final String cypherQuery)", "testcase": false, "constructor": false}, {"identifier": "executeCypherQueries", "parameters": "(final List<String> cypherQueries)", "modifiers": "public", "return": "String", "signature": "String executeCypherQueries(final List<String> cypherQueries)", "full_signature": "public String executeCypherQueries(final List<String> cypherQueries)", "class_method_signature": "Neo4jRequestWrapper.executeCypherQueries(final List<String> cypherQueries)", "testcase": false, "constructor": false}, {"identifier": "executeRequest", "parameters": "(final JSONObject cypherQueryRequest, final JSONArray statementsArray)", "modifiers": "private", "return": "String", "signature": "String executeRequest(final JSONObject cypherQueryRequest, final JSONArray statementsArray)", "full_signature": "private String executeRequest(final JSONObject cypherQueryRequest, final JSONArray statementsArray)", "class_method_signature": "Neo4jRequestWrapper.executeRequest(final JSONObject cypherQueryRequest, final JSONArray statementsArray)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/org/apache/metamodel/neo4j/Neo4jRequestWrapper.java"}, "focal_method": {"identifier": "executeCypherQuery", "parameters": "(final String cypherQuery)", "modifiers": "public", "return": "String", "body": "public String executeCypherQuery(final String cypherQuery) {\n        final JSONObject cypherQueryRequest = new JSONObject();\n        final HashMap<String, String> statement = new HashMap<>();\n        statement.put(\"statement\", cypherQuery);\n\n        final JSONArray statementsArray = new JSONArray();\n        statementsArray.put(statement);\n\n        return executeRequest(cypherQueryRequest, statementsArray);\n    }", "signature": "String executeCypherQuery(final String cypherQuery)", "full_signature": "public String executeCypherQuery(final String cypherQuery)", "class_method_signature": "Neo4jRequestWrapper.executeCypherQuery(final String cypherQuery)", "testcase": false, "constructor": false, "invocations": ["put", "put", "executeRequest"]}, "repository": {"repo_id": 11943595, "url": "https://github.com/apache/metamodel", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 129, "size": 7017, "license": "licensed"}}