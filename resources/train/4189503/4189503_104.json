{"test_class": {"identifier": "InfantNeverTakenProphylaxisCalculationTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommonMetadata commonMetadata;", "modifier": "@Autowired\n\tprivate", "type": "CommonMetadata", "declarator": "commonMetadata", "var_name": "commonMetadata"}, {"original_string": "@Autowired\n\tprivate MchMetadata mchMetadata;", "modifier": "@Autowired\n\tprivate", "type": "MchMetadata", "declarator": "mchMetadata", "var_name": "mchMetadata"}], "file": "api/src/test/java/org/openmrs/module/kenyaemr/calculation/library/mchcs/InfantNeverTakenProphylaxisCalculationTest.java"}, "test_case": {"identifier": "evaluate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void evaluate() throws Exception {\n\t\t//get mchcs program\n\t\tProgram mchcsProgram = MetadataUtils.existing(Program.class, MchMetadata._Program.MCHCS);\n\n\t\t// Enroll patients #6, #7 and 8  in the mchcs Program\n\t\tTestUtils.enrollInProgram(TestUtils.getPatient(6), mchcsProgram, new Date());\n\t\tTestUtils.enrollInProgram(TestUtils.getPatient(7), mchcsProgram, new Date());\n\t\tTestUtils.enrollInProgram(TestUtils.getPatient(8), mchcsProgram, new Date());\n\n\t\t///get the HIV status of the infant and the if wheather they have been on any prophylaxis\n\t\tConcept infantHivStatus = Dictionary.getConcept(Dictionary.CHILDS_CURRENT_HIV_STATUS);\n\t\tConcept nvp = Dictionary.getConcept(Dictionary.NEVIRAPINE);\n\t\tConcept nvpazt3tc = Dictionary.getConcept(Dictionary.LAMIVUDINE_NEVIRAPINE_ZIDOVUDINE);\n\t\tConcept medOrders = Dictionary.getConcept(Dictionary.MEDICATION_ORDERS);\n\n\t\t//make patient #6 HEI and  taken any nvp\n\t\tTestUtils.saveObs(TestUtils.getPatient(6),infantHivStatus,Dictionary.getConcept(Dictionary.EXPOSURE_TO_HIV), new Date());\n\t\tTestUtils.saveObs(TestUtils.getPatient(6), medOrders, nvp, TestUtils.date(2013, 1, 1));\n\n\t\t//make patient #7 HEI and  taken any nvpazt3tc\n\t\tTestUtils.saveObs(TestUtils.getPatient(7),infantHivStatus,Dictionary.getConcept(Dictionary.EXPOSURE_TO_HIV), new Date());\n\t\tTestUtils.saveObs(TestUtils.getPatient(7), medOrders, nvpazt3tc, TestUtils.date(2013, 1, 1));\n\n\t\t//make patient #7 HEI and  taken any nothing\n\t\tTestUtils.saveObs(TestUtils.getPatient(8),infantHivStatus,Dictionary.getConcept(Dictionary.EXPOSURE_TO_HIV), new Date());\n\n\t\tContext.flushSession();\n\n\t\tList<Integer> cohort = Arrays.asList(6, 7, 8);\n\t\tCalculationResultMap resultMap = new InfantNeverTakenProphylaxisCalculation().evaluate(cohort, null, Context.getService(PatientCalculationService.class).createCalculationContext());\n\t\tAssert.assertFalse((Boolean) resultMap.get(6).getValue()); // is taking NVP\n\t\tAssert.assertFalse((Boolean) resultMap.get(7).getValue()); // is not NVP+AZT+3TC\n\t\tAssert.assertTrue((Boolean) resultMap.get(8).getValue()); // in HEI but not on any prophylaxis\n\n\t}", "signature": "void evaluate()", "full_signature": "@Test public void evaluate()", "class_method_signature": "InfantNeverTakenProphylaxisCalculationTest.evaluate()", "testcase": true, "constructor": false, "invocations": ["existing", "enrollInProgram", "getPatient", "enrollInProgram", "getPatient", "enrollInProgram", "getPatient", "getConcept", "getConcept", "getConcept", "getConcept", "saveObs", "getPatient", "getConcept", "saveObs", "getPatient", "date", "saveObs", "getPatient", "getConcept", "saveObs", "getPatient", "date", "saveObs", "getPatient", "getConcept", "flushSession", "asList", "evaluate", "createCalculationContext", "getService", "assertFalse", "getValue", "get", "assertFalse", "getValue", "get", "assertTrue", "getValue", "get"]}, "focal_class": {"identifier": "InfantNeverTakenProphylaxisCalculation", "superclass": "extends AbstractPatientCalculation", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "class_method_signature": "InfantNeverTakenProphylaxisCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/kenyaemr/calculation/library/mchcs/InfantNeverTakenProphylaxisCalculation.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "body": "@Override\n\tpublic CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context) {\n\n\t\tProgram mchcsProgram = MetadataUtils.existing(Program.class, MchMetadata._Program.MCHCS);\n\n\t\t// Get all patients who are alive and in MCH-CS program\n\t\tSet<Integer> alive = Filters.alive(cohort, context);\n\t\tSet<Integer> inMchcsProgram = Filters.inProgram(mchcsProgram, alive, context);\n\n\t\t//get wheather the child is HIV Exposed\n\t\tCalculationResultMap lastChildHivStatus = Calculations.lastObs(Dictionary.getConcept(Dictionary.CHILDS_CURRENT_HIV_STATUS), inMchcsProgram, context);\n\t\tCalculationResultMap medOrdersObss = Calculations.allObs(Dictionary.getConcept(Dictionary.MEDICATION_ORDERS), cohort, context);\n\n\t\t// Get concepts for  medication prophylaxis\n\t\tConcept nvp = Dictionary.getConcept(Dictionary.NEVIRAPINE);\n\t\tConcept nvpazt3tc = Dictionary.getConcept(Dictionary.LAMIVUDINE_NEVIRAPINE_ZIDOVUDINE);\n\t\tConcept hivExposed = Dictionary.getConcept(Dictionary.EXPOSURE_TO_HIV);\n\n\t\tCalculationResultMap ret = new CalculationResultMap();\n\n\t\tfor (Integer ptId : cohort) {\n\t\t\tboolean notOnPcp = false;\n\n\t\t\t//checking wheather the infant is in mchcs program, alive and HEI\n\t\t\tObs hivStatusObs = EmrCalculationUtils.obsResultForPatient(lastChildHivStatus, ptId);\n\t\t\tif (inMchcsProgram.contains(ptId) && lastChildHivStatus != null && hivStatusObs !=null && (hivStatusObs.getValueCoded().equals(hivExposed))) {\n\t\t\t\tnotOnPcp = true;\n\t\t\t\tListResult patientMedOrders = (ListResult) medOrdersObss.get(ptId);\n\t\t\t\tif (patientMedOrders != null) {\n\t\t\t\t\t// Look through list of medication order obs for any  CTX\n\t\t\t\t\tList<Obs> medOrderObsList = CalculationUtils.extractResultValues(patientMedOrders);\n\t\t\t\t\tfor (Obs medOrderObs : medOrderObsList) {\n\t\t\t\t\t\tif (medOrderObs.getValueCoded().equals(nvp) || medOrderObs.getValueCoded().equals(nvpazt3tc)) {\n\t\t\t\t\t\t\tnotOnPcp = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tret.put(ptId, new BooleanResult(notOnPcp, this, context));\n\t\t}\n\n\treturn ret;\n\t}", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "class_method_signature": "InfantNeverTakenProphylaxisCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "testcase": false, "constructor": false, "invocations": ["existing", "alive", "inProgram", "lastObs", "getConcept", "allObs", "getConcept", "getConcept", "getConcept", "getConcept", "obsResultForPatient", "contains", "equals", "getValueCoded", "get", "extractResultValues", "equals", "getValueCoded", "equals", "getValueCoded", "put"]}, "repository": {"repo_id": 4189503, "url": "https://github.com/I-TECH/openmrs-module-kenyaemr", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 18, "size": 25410, "license": "licensed"}}