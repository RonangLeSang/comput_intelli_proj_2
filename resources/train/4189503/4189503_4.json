{"test_class": {"identifier": "PatientUtilsFragmentControllerTest", "superclass": "extends BaseModuleWebContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommonMetadata commonMetadata;", "modifier": "@Autowired\n\tprivate", "type": "CommonMetadata", "declarator": "commonMetadata", "var_name": "commonMetadata"}, {"original_string": "@Autowired\n\tprivate HivMetadata hivMetadata;", "modifier": "@Autowired\n\tprivate", "type": "HivMetadata", "declarator": "hivMetadata", "var_name": "hivMetadata"}, {"original_string": "@Autowired\n\tprivate TbMetadata tbMetadata;", "modifier": "@Autowired\n\tprivate", "type": "TbMetadata", "declarator": "tbMetadata", "var_name": "tbMetadata"}, {"original_string": "@Autowired\n\tprivate MchMetadata mchMetadata;", "modifier": "@Autowired\n\tprivate", "type": "MchMetadata", "declarator": "mchMetadata", "var_name": "mchMetadata"}, {"original_string": "@Autowired\n\tprivate CalculationManager calculationManager;", "modifier": "@Autowired\n\tprivate", "type": "CalculationManager", "declarator": "calculationManager", "var_name": "calculationManager"}, {"original_string": "@Autowired\n\tprivate TestUiUtils ui;", "modifier": "@Autowired\n\tprivate", "type": "TestUiUtils", "declarator": "ui", "var_name": "ui"}, {"original_string": "private PatientUtilsFragmentController controller;", "modifier": "private", "type": "PatientUtilsFragmentController", "declarator": "controller", "var_name": "controller"}], "file": "omod/src/test/java/org/openmrs/module/kenyaemr/fragment/controller/patient/PatientUtilsFragmentControllerTest.java"}, "test_case": {"identifier": "getFlags_shouldReturnAllFlags", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getFlags_shouldReturnAllFlags() {\n\t\tList<SimpleObject> flags = controller.getFlags(7, calculationManager);\n\n\t\t// Check that every flag object has a message and that it doesn't start with \"ERROR...\"\n\t \tfor (SimpleObject flag : flags) {\n\t\t\tTestUtils.printJson(flag);\n\n\t\t\tAssert.assertThat(flag, hasKey(\"message\"));\n\t\t\tAssert.assertThat((String) flag.get(\"message\"), not(startsWith(\"ERROR\")));\n\t\t}\n\t}", "signature": "void getFlags_shouldReturnAllFlags()", "full_signature": "@Test public void getFlags_shouldReturnAllFlags()", "class_method_signature": "PatientUtilsFragmentControllerTest.getFlags_shouldReturnAllFlags()", "testcase": true, "constructor": false, "invocations": ["getFlags", "printJson", "assertThat", "hasKey", "assertThat", "get", "not", "startsWith"]}, "focal_class": {"identifier": "PatientUtilsFragmentController", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Log log = LogFactory.getLog(PatientUtilsFragmentController.class);", "modifier": "protected static final", "type": "Log", "declarator": "log = LogFactory.getLog(PatientUtilsFragmentController.class)", "var_name": "log"}], "methods": [{"identifier": "getFlags", "parameters": "(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "modifiers": "@SharedAction public", "return": "List<SimpleObject>", "signature": "List<SimpleObject> getFlags(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "full_signature": "@SharedAction public List<SimpleObject> getFlags(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "class_method_signature": "PatientUtilsFragmentController.getFlags(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "testcase": false, "constructor": false}, {"identifier": "getScheduled", "parameters": "(@RequestParam(\"date\") Date date, UiUtils ui)", "modifiers": "@SharedAction public", "return": "List<SimpleObject>", "signature": "List<SimpleObject> getScheduled(@RequestParam(\"date\") Date date, UiUtils ui)", "full_signature": "@SharedAction public List<SimpleObject> getScheduled(@RequestParam(\"date\") Date date, UiUtils ui)", "class_method_signature": "PatientUtilsFragmentController.getScheduled(@RequestParam(\"date\") Date date, UiUtils ui)", "testcase": false, "constructor": false}, {"identifier": "getSeenPatients", "parameters": "(@RequestParam(\"date\") Date date, UiUtils ui)", "modifiers": "@SharedAction public", "return": "List<SimpleObject>", "signature": "List<SimpleObject> getSeenPatients(@RequestParam(\"date\") Date date, UiUtils ui)", "full_signature": "@SharedAction public List<SimpleObject> getSeenPatients(@RequestParam(\"date\") Date date, UiUtils ui)", "class_method_signature": "PatientUtilsFragmentController.getSeenPatients(@RequestParam(\"date\") Date date, UiUtils ui)", "testcase": false, "constructor": false}, {"identifier": "recentlyViewed", "parameters": "(UiUtils ui, Session session)", "modifiers": "@AppAction(EmrConstants.APP_CHART) public", "return": "SimpleObject[]", "signature": "SimpleObject[] recentlyViewed(UiUtils ui, Session session)", "full_signature": "@AppAction(EmrConstants.APP_CHART) public SimpleObject[] recentlyViewed(UiUtils ui, Session session)", "class_method_signature": "PatientUtilsFragmentController.recentlyViewed(UiUtils ui, Session session)", "testcase": false, "constructor": false}, {"identifier": "age", "parameters": "(@RequestParam(\"patientId\") Patient patient, @RequestParam(\"now\") Date now)", "modifiers": "public", "return": "SimpleObject", "signature": "SimpleObject age(@RequestParam(\"patientId\") Patient patient, @RequestParam(\"now\") Date now)", "full_signature": "public SimpleObject age(@RequestParam(\"patientId\") Patient patient, @RequestParam(\"now\") Date now)", "class_method_signature": "PatientUtilsFragmentController.age(@RequestParam(\"patientId\") Patient patient, @RequestParam(\"now\") Date now)", "testcase": false, "constructor": false}, {"identifier": "getMothers", "parameters": "(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "modifiers": "public", "return": "SimpleObject[]", "signature": "SimpleObject[] getMothers(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "full_signature": "public SimpleObject[] getMothers(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "class_method_signature": "PatientUtilsFragmentController.getMothers(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "testcase": false, "constructor": false}, {"identifier": "getFathers", "parameters": "(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "modifiers": "public", "return": "SimpleObject[]", "signature": "SimpleObject[] getFathers(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "full_signature": "public SimpleObject[] getFathers(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "class_method_signature": "PatientUtilsFragmentController.getFathers(@RequestParam(\"patientId\") Patient patient,UiUtils ui)", "testcase": false, "constructor": false}, {"identifier": "patientExist", "parameters": "(@RequestParam(\"patientId\") String patientId,UiUtils ui)", "modifiers": "public", "return": "String", "signature": "String patientExist(@RequestParam(\"patientId\") String patientId,UiUtils ui)", "full_signature": "public String patientExist(@RequestParam(\"patientId\") String patientId,UiUtils ui)", "class_method_signature": "PatientUtilsFragmentController.patientExist(@RequestParam(\"patientId\") String patientId,UiUtils ui)", "testcase": false, "constructor": false}], "file": "omod/src/main/java/org/openmrs/module/kenyaemr/fragment/controller/patient/PatientUtilsFragmentController.java"}, "focal_method": {"identifier": "getFlags", "parameters": "(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "modifiers": "@SharedAction public", "return": "List<SimpleObject>", "body": "@SharedAction\n\tpublic List<SimpleObject> getFlags(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager) {\n\n\t\tList<SimpleObject> flags = new ArrayList<SimpleObject>();\n\n\t\t// Gather all flag calculations that evaluate to true\n\t\tfor (PatientFlagCalculation calc : calculationManager.getFlagCalculations()) {\n\t\t\ttry {\n\t\t\t\tCalculationResult result = Context.getService(PatientCalculationService.class).evaluate(patientId, calc);\n\t\t\t\tif (result != null && (Boolean) result.getValue()) {\n\t\t\t\t\tflags.add(SimpleObject.create(\"message\", calc.getFlagMessage()));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tlog.error(\"Error evaluating \" + calc.getClass(), ex);\n\t\t\t\treturn Collections.singletonList(SimpleObject.create(\"message\", \"ERROR EVALUATING '\" +  calc.getFlagMessage() + \"'\"));\n\t\t\t}\n\t\t}\n\t\treturn flags;\n\t}", "signature": "List<SimpleObject> getFlags(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "full_signature": "@SharedAction public List<SimpleObject> getFlags(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "class_method_signature": "PatientUtilsFragmentController.getFlags(@RequestParam(\"patientId\") Integer patientId, @SpringBean CalculationManager calculationManager)", "testcase": false, "constructor": false, "invocations": ["getFlagCalculations", "evaluate", "getService", "getValue", "add", "create", "getFlagMessage", "error", "getClass", "singletonList", "create", "getFlagMessage"]}, "repository": {"repo_id": 4189503, "url": "https://github.com/I-TECH/openmrs-module-kenyaemr", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 18, "size": 25410, "license": "licensed"}}