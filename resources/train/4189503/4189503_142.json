{"test_class": {"identifier": "EligibleForArtTriggerCalculationTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [], "file": "api/src/test/java/org/openmrs/module/kenyaemr/calculation/library/hiv/art/EligibleForArtTriggerCalculationTest.java"}, "test_case": {"identifier": "evaluate_shouldCalculateEligibilityTrigger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void evaluate_shouldCalculateEligibilityTrigger() throws Exception {\n\t\tConcept diagnosisDate = Dictionary.getConcept(Dictionary.DATE_OF_HIV_DIAGNOSIS);\n\t\tConcept cd4 = Dictionary.getConcept(Dictionary.CD4_COUNT);\n\t\tConcept whoStage = Dictionary.getConcept(Dictionary.CURRENT_WHO_STAGE);\n\n\t\t// Confirm patient #6 HIV+ when they're 1 year old and give them very low CD4 soon after\n\t\tTestUtils.saveObs(TestUtils.getPatient(6), diagnosisDate, TestUtils.date(2008, 05, 27), TestUtils.date(2010, 1, 1));\n\t\tTestUtils.saveObs(TestUtils.getPatient(6), cd4, 300.0, TestUtils.date(2009, 1, 1));\n\n\t\t// Give patient #7 low CD4 when they're 3 years old and very low CD4 after\n\t\tTestUtils.saveObs(TestUtils.getPatient(7), cd4, 900.0, TestUtils.date(1979, 8, 25));\n\t\tTestUtils.saveObs(TestUtils.getPatient(7), cd4, 300.0, TestUtils.date(2009, 1, 1));\n\n\t\t// Give patient #8 WHO stage of 3\n\t\tTestUtils.saveObs(TestUtils.getPatient(8), whoStage, Dictionary.getConcept(Dictionary.WHO_STAGE_3_PEDS), TestUtils.date(2009, 1, 1));\n\t\t\n\t\tList<Integer> cohort = Arrays.asList(6, 7, 8, 999);\n\n\t\tCalculationResultMap resultMap = new EligibleForArtTriggerCalculation().evaluate(cohort, null, Context.getService(PatientCalculationService.class).createCalculationContext());\n\n\t\tObs patient6Trigger = (Obs) resultMap.get(6).getValue(); // Eligible through HIV confirmation\n\t\tAssert.assertEquals(diagnosisDate, patient6Trigger.getConcept());\n\t\tAssert.assertEquals(TestUtils.date(2008, 05, 27), patient6Trigger.getValueDate());\n\n\t\tObs patient7Trigger = (Obs) resultMap.get(7).getValue(); // Eligible through CD4 count\n\t\tAssert.assertEquals(cd4, patient7Trigger.getConcept());\n\t\tAssert.assertEquals(TestUtils.date(1979, 8, 25), patient7Trigger.getObsDatetime());\n\n\t\tObs patient8Trigger = (Obs) resultMap.get(8).getValue(); // Eligible through WHO stage\n\t\tAssert.assertEquals(whoStage, patient8Trigger.getConcept());\n\t\tAssert.assertEquals(TestUtils.date(2009, 1, 1), patient8Trigger.getObsDatetime());\n\n\t\tAssert.assertNull(resultMap.get(999)); // Was never eligible for ART\n\t}", "signature": "void evaluate_shouldCalculateEligibilityTrigger()", "full_signature": "@Test public void evaluate_shouldCalculateEligibilityTrigger()", "class_method_signature": "EligibleForArtTriggerCalculationTest.evaluate_shouldCalculateEligibilityTrigger()", "testcase": true, "constructor": false, "invocations": ["getConcept", "getConcept", "getConcept", "saveObs", "getPatient", "date", "date", "saveObs", "getPatient", "date", "saveObs", "getPatient", "date", "saveObs", "getPatient", "date", "saveObs", "getPatient", "getConcept", "date", "asList", "evaluate", "createCalculationContext", "getService", "getValue", "get", "assertEquals", "getConcept", "assertEquals", "date", "getValueDate", "getValue", "get", "assertEquals", "getConcept", "assertEquals", "date", "getObsDatetime", "getValue", "get", "assertEquals", "getConcept", "assertEquals", "date", "getObsDatetime", "assertNull", "get"]}, "focal_class": {"identifier": "EligibleForArtTriggerCalculation", "superclass": "extends AbstractPatientCalculation", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "class_method_signature": "EligibleForArtTriggerCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "testcase": false, "constructor": false}, {"identifier": "extractTriggers", "parameters": "(List<Obs> obss)", "modifiers": "private", "return": "List<Obs>", "signature": "List<Obs> extractTriggers(List<Obs> obss)", "full_signature": "private List<Obs> extractTriggers(List<Obs> obss)", "class_method_signature": "EligibleForArtTriggerCalculation.extractTriggers(List<Obs> obss)", "testcase": false, "constructor": false}, {"identifier": "findEarliestTrigger", "parameters": "(List<Obs> triggers)", "modifiers": "private", "return": "Obs", "signature": "Obs findEarliestTrigger(List<Obs> triggers)", "full_signature": "private Obs findEarliestTrigger(List<Obs> triggers)", "class_method_signature": "EligibleForArtTriggerCalculation.findEarliestTrigger(List<Obs> triggers)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/kenyaemr/calculation/library/hiv/art/EligibleForArtTriggerCalculation.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "body": "@Override\n\tpublic CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context) {\n\n\t\t// Gather all relevant obs that can be trigger events\n\t\tCalculationResultMap confirmedPositives = Calculations.allObs(Dictionary.getConcept(Dictionary.DATE_OF_HIV_DIAGNOSIS), cohort, context);\n\t\tCalculationResultMap whoStages = Calculations.allObs(Dictionary.getConcept(Dictionary.CURRENT_WHO_STAGE), cohort, context);\n\t\tCalculationResultMap cdCounts = Calculations.allObs(Dictionary.getConcept(Dictionary.CD4_COUNT), cohort, context);\n\t\tCalculationResultMap cdPercents = Calculations.allObs(Dictionary.getConcept(Dictionary.CD4_PERCENT), cohort, context);\n\n\t\tCalculationResultMap ret = new CalculationResultMap();\n\t\tfor (Integer ptId : cohort) {\n\t\t\t// Extract relevant obs for this patient\n\t\t\tList<Obs> confirmedPosObss = CalculationUtils.extractResultValues((ListResult) confirmedPositives.get(ptId));\n\t\t\tList<Obs> whoStageObss = CalculationUtils.extractResultValues((ListResult) whoStages.get(ptId));\n\t\t\tList<Obs> cdCountObss = CalculationUtils.extractResultValues((ListResult) cdCounts.get(ptId));\n\t\t\tList<Obs> cdPercentObss = CalculationUtils.extractResultValues((ListResult) cdPercents.get(ptId));\n\n\t\t\t// Combine into one list\n\t\t\tList<Obs> allObss = new ArrayList<Obs>();\n\t\t\tallObss.addAll(confirmedPosObss);\n\t\t\tallObss.addAll(whoStageObss);\n\t\t\tallObss.addAll(cdCountObss);\n\t\t\tallObss.addAll(cdPercentObss);\n\n\t\t\t// Filter to only those which are triggers\n\t\t\tList<Obs> allTriggerObss = extractTriggers(allObss);\n\n\t\t\t// Find the earliest trigger obs\n\t\t\tObs eligibilityTriggerObs = findEarliestTrigger(allTriggerObss);\n\n\t\t\tret.put(ptId, eligibilityTriggerObs != null ? new ObsResult(eligibilityTriggerObs, this) : null);\n\t\t}\n\t\treturn ret;\n\t}", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "class_method_signature": "EligibleForArtTriggerCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues,\n\t                                     PatientCalculationContext context)", "testcase": false, "constructor": false, "invocations": ["allObs", "getConcept", "allObs", "getConcept", "allObs", "getConcept", "allObs", "getConcept", "extractResultValues", "get", "extractResultValues", "get", "extractResultValues", "get", "extractResultValues", "get", "addAll", "addAll", "addAll", "addAll", "extractTriggers", "findEarliestTrigger", "put"]}, "repository": {"repo_id": 4189503, "url": "https://github.com/I-TECH/openmrs-module-kenyaemr", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 18, "size": 25410, "license": "licensed"}}