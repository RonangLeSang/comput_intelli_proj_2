{"test_class": {"identifier": "PregnantWithANCVisitsCalculationTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MchMetadata mchMetadata;", "modifier": "@Autowired\n    private", "type": "MchMetadata", "declarator": "mchMetadata", "var_name": "mchMetadata"}], "file": "api/src/test/java/org/openmrs/module/kenyaemr/calculation/library/mchms/PregnantWithANCVisitsCalculationTest.java"}, "test_case": {"identifier": "evaluate_shouldCalculateWomenWithANCVisits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluate_shouldCalculateWomenWithANCVisits() throws Exception {\n        Concept pregnancyStatus = Dictionary.getConcept(Dictionary.PREGNANCY_STATUS);\n        Concept yes = Dictionary.getConcept(Dictionary.YES);\n        Concept no = Dictionary.getConcept(Dictionary.NO);\n        Form ancForm = MetadataUtils.existing(Form.class, MchMetadata._Form.MCHMS_ANTENATAL_VISIT);\n        EncounterType ancEncounterType = MetadataUtils.existing(EncounterType.class, MchMetadata._EncounterType.MCHMS_CONSULTATION);\n        Program program = MetadataUtils.existing(Program.class, MchMetadata._Program.MCHMS);\n\n        // For the purposes of this test, everyone is a woman\n        {\n            Patient patient = TestUtils.getPatient(7);\n            TestUtils.enrollInProgram(patient, program, TestUtils.date(2014, 1, 1));\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 1, 20));\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 1, 20));\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 2, 20));\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 3, 20));\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 4, 20));\n        }\n\n        {\n            Patient patient = TestUtils.getPatient(8);\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 1, 20));\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 1, 20));\n            TestUtils.saveEncounter(patient, ancEncounterType, ancForm, TestUtils.date(2014, 2, 20));\n            TestUtils.saveObs(patient, pregnancyStatus, yes, TestUtils.date(2014, 9, 10));\n            TestUtils.saveObs(patient, pregnancyStatus, yes, TestUtils.date(2014, 8, 10));\n            TestUtils.saveObs(patient, pregnancyStatus, yes, TestUtils.date(2014, 7, 10));\n        }\n\n        List<Integer> ptIds = Arrays.asList(7, 8, 999);\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"visits\", 4);\n\n        CalculationResultMap resultMap = new PregnantWithANCVisitsCalculation().evaluate(ptIds, params, Context.getService(PatientCalculationService.class).createCalculationContext());\n\n        Assert.assertTrue((Boolean) resultMap.get(7).getValue());\n        Assert.assertFalse((Boolean) resultMap.get(8).getValue());\n        Assert.assertFalse((Boolean) resultMap.get(999).getValue()); // has no recorded status\n    }", "signature": "void evaluate_shouldCalculateWomenWithANCVisits()", "full_signature": "@Test public void evaluate_shouldCalculateWomenWithANCVisits()", "class_method_signature": "PregnantWithANCVisitsCalculationTest.evaluate_shouldCalculateWomenWithANCVisits()", "testcase": true, "constructor": false, "invocations": ["getConcept", "getConcept", "getConcept", "existing", "existing", "existing", "getPatient", "enrollInProgram", "date", "saveEncounter", "date", "saveEncounter", "date", "saveEncounter", "date", "saveEncounter", "date", "saveEncounter", "date", "getPatient", "saveEncounter", "date", "saveEncounter", "date", "saveEncounter", "date", "saveObs", "date", "saveObs", "date", "saveObs", "date", "asList", "put", "evaluate", "createCalculationContext", "getService", "assertTrue", "getValue", "get", "assertFalse", "getValue", "get", "assertFalse", "getValue", "get"]}, "focal_class": {"identifier": "PregnantWithANCVisitsCalculation", "superclass": "extends AbstractPatientCalculation", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "class_method_signature": "PregnantWithANCVisitsCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/kenyaemr/calculation/library/mchms/PregnantWithANCVisitsCalculation.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "body": "@Override\n    public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context) {\n\n        Set<Integer> female = Filters.female(cohort, context);\n\n        Form ancForm = MetadataUtils.existing(Form.class,MchMetadata._Form.MCHMS_ANTENATAL_VISIT);\n        CalculationResultMap allEncountersForMCHConsultation = Calculations.allEncounters(MetadataUtils.existing(EncounterType.class, MchMetadata._EncounterType.MCHMS_CONSULTATION), female, context);\n        Integer minVisits = (Integer) parameterValues.get(\"visits\");\n\n        Program mchmsProgram = MetadataUtils.existing(Program.class, MchMetadata._Program.MCHMS);\n        Set<Integer> patientActiveOnMchms = Filters.inProgram(mchmsProgram, female, context);\n\n        Set<Integer> pregnantCohort = CalculationUtils.patientsThatPass(calculate(new IsPregnantCalculation(),female,context));\n        CalculationResultMap ret = new CalculationResultMap();\n        for (Integer ptId : cohort) {\n\n            boolean result = false;\n            if (pregnantCohort.contains(ptId) || patientActiveOnMchms.contains(ptId)){\n                ListResult mchcsEncountersResult = (ListResult) allEncountersForMCHConsultation.get(ptId);\n                List<Encounter> encounters = CalculationUtils.extractResultValues(mchcsEncountersResult);\n\n                int counter = 0;\n\n                for(Encounter e: encounters){\n                    if(ancForm.getUuid().equals(e.getForm().getUuid())){\n                        counter++;\n                        if(counter >= minVisits){\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n\n            }\n\n            ret.put(ptId, new BooleanResult(result, this));\n        }\n        return ret;\n    }", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "class_method_signature": "PregnantWithANCVisitsCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "testcase": false, "constructor": false, "invocations": ["female", "existing", "allEncounters", "existing", "get", "existing", "inProgram", "patientsThatPass", "calculate", "contains", "contains", "get", "extractResultValues", "equals", "getUuid", "getUuid", "getForm", "put"]}, "repository": {"repo_id": 4189503, "url": "https://github.com/I-TECH/openmrs-module-kenyaemr", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 18, "size": 25410, "license": "licensed"}}