{"test_class": {"identifier": "InfantMotherGuardianRelationsCalculationTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tCommonMetadata commonMetadata;", "modifier": "@Autowired", "type": "CommonMetadata", "declarator": "commonMetadata", "var_name": "commonMetadata"}, {"original_string": "private RelationshipType mother_relation;", "modifier": "private", "type": "RelationshipType", "declarator": "mother_relation", "var_name": "mother_relation"}, {"original_string": "private RelationshipType guardian_relation;", "modifier": "private", "type": "RelationshipType", "declarator": "guardian_relation", "var_name": "guardian_relation"}], "file": "api/src/test/java/org/openmrs/module/kenyaemr/calculation/library/mchcs/InfantMotherGuardianRelationsCalculationTest.java"}, "test_case": {"identifier": "evaluate_shouldCalculateVisitsWithinAPeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void evaluate_shouldCalculateVisitsWithinAPeriod() throws Exception {\n\n\t\t{\n\t\t\tPatient infant = TestUtils.getPatient(2);\n\t\t\tPatient mother = TestUtils.getPatient(7);\n\t\t\tPatient guardian = TestUtils.getPatient(8);\n\t\t\tTestUtils.saveRelationship(mother, mother_relation, infant);\n\t\t\tTestUtils.saveRelationship(guardian, guardian_relation, infant);\n\t\t}\n\n\t\t{\n\t\t\tPatient infant = TestUtils.getPatient(6);\n\t\t\tPatient mother = TestUtils.getPatient(7);\n\t\t\tTestUtils.saveRelationship(mother, mother_relation, infant);\n\n\t\t}\n\n\t\tList<Integer> ptIds = Arrays.asList(2, 6, 999);\n\t\tMap<String, Object> params = new HashMap<String, Object>();\n\t\tCalculationResultMap resultMap = new InfantMotherGuardianRelationsCalculation().evaluate(ptIds, params, Context.getService(PatientCalculationService.class).createCalculationContext());\n\n\t\tSet<Integer> patient2 = (Set<Integer>)resultMap.get(2).getValue();\n\t\tSet<Integer> patient6 = (Set<Integer>)resultMap.get(6).getValue();\n\t\tSet<Integer> patient999 = (Set<Integer>)resultMap.get(999).getValue();\n\n\t\tAssert.assertThat(patient2.size(), is(2));\n\t\tAssert.assertThat(patient6.size(), is(1));\n\t\tAssert.assertThat(patient999.size(), is(0));\n\t}", "signature": "void evaluate_shouldCalculateVisitsWithinAPeriod()", "full_signature": "@Test public void evaluate_shouldCalculateVisitsWithinAPeriod()", "class_method_signature": "InfantMotherGuardianRelationsCalculationTest.evaluate_shouldCalculateVisitsWithinAPeriod()", "testcase": true, "constructor": false, "invocations": ["getPatient", "getPatient", "getPatient", "saveRelationship", "saveRelationship", "getPatient", "getPatient", "saveRelationship", "asList", "evaluate", "createCalculationContext", "getService", "getValue", "get", "getValue", "get", "getValue", "get", "assertThat", "size", "is", "assertThat", "size", "is", "assertThat", "size", "is"]}, "focal_class": {"identifier": "InfantMotherGuardianRelationsCalculation", "superclass": "extends AbstractPatientCalculation", "interfaces": "", "fields": [{"original_string": "public static String PARENT_RELATIONSHIP = \"Parent\";", "modifier": "public static", "type": "String", "declarator": "PARENT_RELATIONSHIP = \"Parent\"", "var_name": "PARENT_RELATIONSHIP"}], "methods": [{"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "class_method_signature": "InfantMotherGuardianRelationsCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/kenyaemr/calculation/library/mchcs/InfantMotherGuardianRelationsCalculation.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "modifiers": "@Override public", "return": "CalculationResultMap", "body": "@Override\n\tpublic CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context) {\n\n\t\tPersonService service = Context.getPersonService();\n\t\tRelationshipType guardian_rel = service.getRelationshipTypeByUuid(CommonMetadata._RelationshipType.GUARDIAN_DEPENDANT);\n\t\tCalculationResultMap resultMap = new CalculationResultMap();\n\n\t\tfor (Integer ptId : cohort) {\n\t\t\tPerson person = service.getPerson(ptId);\n\t\t\tSet<Integer> ids = new HashSet<Integer>();\n\t\t\t//fetch all relationships for the patient\n\t\t\tList<Relationship> parentRelationship = service.getRelationships(null, person, null);\n\t\t\tif (parentRelationship != null){\n\t\t\t\tfor (Relationship r : parentRelationship) {\n\n\t\t\t\t\tif (r.getRelationshipType().getaIsToB().equals(PARENT_RELATIONSHIP)) {\n\t\t\t\t\t\t//look for mother's id\n\t\t\t\t\t\tInteger parent_id = r.getPersonA().getId();\n\t\t\t\t\t\tPerson parent = service.getPerson(parent_id);\n\n\t\t\t\t\t\tif (parent.getGender().equals(\"F\")) {\n\t\t\t\t\t\t\tids.add(r.getPersonA().getId());\n\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (r.getRelationshipType().equals(guardian_rel)) {\n\t\t\t\t\t\tids.add(r.getPersonA().getId());\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\tresultMap.put(ptId, new SimpleResult(ids, this));\n\n\t\t}\n\t\treturn resultMap;\n\n\t}", "signature": "CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "full_signature": "@Override public CalculationResultMap evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "class_method_signature": "InfantMotherGuardianRelationsCalculation.evaluate(Collection<Integer> cohort, Map<String, Object> parameterValues, PatientCalculationContext context)", "testcase": false, "constructor": false, "invocations": ["getPersonService", "getRelationshipTypeByUuid", "getPerson", "getRelationships", "equals", "getaIsToB", "getRelationshipType", "getId", "getPersonA", "getPerson", "equals", "getGender", "add", "getId", "getPersonA", "equals", "getRelationshipType", "add", "getId", "getPersonA", "put"]}, "repository": {"repo_id": 4189503, "url": "https://github.com/I-TECH/openmrs-module-kenyaemr", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 18, "size": 25410, "license": "licensed"}}