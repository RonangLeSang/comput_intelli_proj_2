{"test_class": {"identifier": "VicinityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(VicinityTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(VicinityTest.class)", "var_name": "LOGGER"}, {"original_string": "private static final double ERROR_DELTA = 0.1;", "modifier": "private static final", "type": "double", "declarator": "ERROR_DELTA = 0.1", "var_name": "ERROR_DELTA"}, {"original_string": "private final String circleAroundNorthPole = \"\"\n            + \"{\"\n            + \"  \\\"type\\\": \\\"Point\\\", \"\n            + \"  \\\"coordinates\\\": [-89.99,89.999] \"\n            + \"}\";", "modifier": "private final", "type": "String", "declarator": "circleAroundNorthPole = \"\"\n            + \"{\"\n            + \"  \\\"type\\\": \\\"Point\\\", \"\n            + \"  \\\"coordinates\\\": [-89.99,89.999] \"\n            + \"}\"", "var_name": "circleAroundNorthPole"}, {"original_string": "private final String circleAroundSouthPole = \"\"\n            + \"{\"\n            + \"  \\\"type\\\": \\\"Point\\\",\"\n            + \"  \\\"coordinates\\\": [-89.99,-89.999]\"\n            + \"}\";", "modifier": "private final", "type": "String", "declarator": "circleAroundSouthPole = \"\"\n            + \"{\"\n            + \"  \\\"type\\\": \\\"Point\\\",\"\n            + \"  \\\"coordinates\\\": [-89.99,-89.999]\"\n            + \"}\"", "var_name": "circleAroundSouthPole"}, {"original_string": "private final String circleCenterAtGreenwhichAndEquator = \"\"\n            + \"{\"\n            + \"   \\\"type\\\": \\\"Point\\\",\"\n            + \"   \\\"coordinates\\\": [ 0,0 ]\"\n            + \"}\";", "modifier": "private final", "type": "String", "declarator": "circleCenterAtGreenwhichAndEquator = \"\"\n            + \"{\"\n            + \"   \\\"type\\\": \\\"Point\\\",\"\n            + \"   \\\"coordinates\\\": [ 0,0 ]\"\n            + \"}\"", "var_name": "circleCenterAtGreenwhichAndEquator"}], "file": "spi/src/test/java/org/n52/io/request/VicinityTest.java"}, "test_case": {"identifier": "shouldHaveCommonLatitudeCircleWhenCenterIsNorthPole", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void\n            shouldHaveCommonLatitudeCircleWhenCenterIsNorthPole() throws GeoJSONException, IOException {\n        Vicinity vicinity = createVicinity(circleAroundNorthPole, 500);\n        BoundingBox bounds = vicinity.calculateBounds();\n        double llLatitudeOfSmallCircle = bounds.getLowerLeft().getY();\n        double urLatitudeOfSmallCircle = bounds.getUpperRight().getY();\n        assertThat(llLatitudeOfSmallCircle, closeTo(urLatitudeOfSmallCircle, ERROR_DELTA));\n    }", "signature": "void shouldHaveCommonLatitudeCircleWhenCenterIsNorthPole()", "full_signature": "@Test public void shouldHaveCommonLatitudeCircleWhenCenterIsNorthPole()", "class_method_signature": "VicinityTest.shouldHaveCommonLatitudeCircleWhenCenterIsNorthPole()", "testcase": true, "constructor": false, "invocations": ["createVicinity", "calculateBounds", "getY", "getLowerLeft", "getY", "getUpperRight", "assertThat", "closeTo"]}, "focal_class": {"identifier": "Vicinity", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String crs = CRSUtils.DEFAULT_CRS;", "modifier": "private", "type": "String", "declarator": "crs = CRSUtils.DEFAULT_CRS", "var_name": "crs"}, {"original_string": "private Point center;", "modifier": "private", "type": "Point", "declarator": "center", "var_name": "center"}, {"original_string": "private double radius;", "modifier": "private", "type": "double", "declarator": "radius", "var_name": "radius"}], "methods": [{"identifier": "Vicinity", "parameters": "()", "modifiers": "", "return": "", "signature": " Vicinity()", "full_signature": "  Vicinity()", "class_method_signature": "Vicinity.Vicinity()", "testcase": false, "constructor": true}, {"identifier": "Vicinity", "parameters": "(Point center, Number radius)", "modifiers": "public", "return": "", "signature": " Vicinity(Point center, Number radius)", "full_signature": "public  Vicinity(Point center, Number radius)", "class_method_signature": "Vicinity.Vicinity(Point center, Number radius)", "testcase": false, "constructor": true}, {"identifier": "calculateBounds", "parameters": "()", "modifiers": "public", "return": "BoundingBox", "signature": "BoundingBox calculateBounds()", "full_signature": "public BoundingBox calculateBounds()", "class_method_signature": "Vicinity.calculateBounds()", "testcase": false, "constructor": false}, {"identifier": "calculateBounds", "parameters": "(CRSUtils crsUtils)", "modifiers": "public", "return": "BoundingBox", "signature": "BoundingBox calculateBounds(CRSUtils crsUtils)", "full_signature": "public BoundingBox calculateBounds(CRSUtils crsUtils)", "class_method_signature": "Vicinity.calculateBounds(CRSUtils crsUtils)", "testcase": false, "constructor": false}, {"identifier": "setCrs", "parameters": "(String crs)", "modifiers": "public", "return": "void", "signature": "void setCrs(String crs)", "full_signature": "public void setCrs(String crs)", "class_method_signature": "Vicinity.setCrs(String crs)", "testcase": false, "constructor": false}, {"identifier": "getCrs", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCrs()", "full_signature": "public String getCrs()", "class_method_signature": "Vicinity.getCrs()", "testcase": false, "constructor": false}, {"identifier": "setRadius", "parameters": "(Number radius)", "modifiers": "public", "return": "void", "signature": "void setRadius(Number radius)", "full_signature": "public void setRadius(Number radius)", "class_method_signature": "Vicinity.setRadius(Number radius)", "testcase": false, "constructor": false}, {"identifier": "getRadius", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRadius()", "full_signature": "public double getRadius()", "class_method_signature": "Vicinity.getRadius()", "testcase": false, "constructor": false}, {"identifier": "setCenter", "parameters": "(Point center)", "modifiers": "public", "return": "void", "signature": "void setCenter(Point center)", "full_signature": "public void setCenter(Point center)", "class_method_signature": "Vicinity.setCenter(Point center)", "testcase": false, "constructor": false}, {"identifier": "getCenter", "parameters": "()", "modifiers": "public", "return": "Point", "signature": "Point getCenter()", "full_signature": "public Point getCenter()", "class_method_signature": "Vicinity.getCenter()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Vicinity.toString()", "testcase": false, "constructor": false}], "file": "spi/src/main/java/org/n52/io/request/Vicinity.java"}, "focal_method": {"identifier": "calculateBounds", "parameters": "()", "modifiers": "public", "return": "BoundingBox", "body": "public BoundingBox calculateBounds() {\n        return calculateBounds(CRSUtils.createEpsgStrictAxisOrder());\n    }", "signature": "BoundingBox calculateBounds()", "full_signature": "public BoundingBox calculateBounds()", "class_method_signature": "Vicinity.calculateBounds()", "testcase": false, "constructor": false, "invocations": ["calculateBounds", "createEpsgStrictAxisOrder"]}, "repository": {"repo_id": 12555873, "url": "https://github.com/52North/series-rest-api", "stars": 18, "created": "9/3/2013 5:36:08 AM +00:00", "updates": "2020-01-21T07:38:26+00:00", "fork": "False", "license": "licensed"}}