{"test_class": {"identifier": "ConnAckDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IoBuffer m_buff;", "modifier": "", "type": "IoBuffer", "declarator": "m_buff", "var_name": "m_buff"}, {"original_string": "ConnAckDecoder m_msgdec;", "modifier": "", "type": "ConnAckDecoder", "declarator": "m_msgdec", "var_name": "m_msgdec"}, {"original_string": "MockProtocolDecoderOutput<ConnAckMessage> m_mockProtoDecoder;", "modifier": "", "type": "MockProtocolDecoderOutput<ConnAckMessage>", "declarator": "m_mockProtoDecoder", "var_name": "m_mockProtoDecoder"}], "file": "parser/src/test/java/org/dna/mqtt/moquette/proto/ConnAckDecoderTest.java"}, "test_case": {"identifier": "testHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHeader() throws Exception {\n        m_buff = IoBuffer.allocate(14);\n        initHeader(m_buff);\n        m_buff.flip();\n        \n        //Exercise\n        MessageDecoderResult res = m_msgdec.decode(null, m_buff, m_mockProtoDecoder);\n        \n        assertNotNull(m_mockProtoDecoder.getMessage());\n        assertEquals(MessageDecoder.OK, res);\n        assertEquals(ConnAckMessage.CONNECTION_ACCEPTED, m_mockProtoDecoder.getMessage().getReturnCode());\n        assertEquals(AbstractMessage.CONNACK, m_mockProtoDecoder.getMessage().getMessageType());\n    }", "signature": "void testHeader()", "full_signature": "@Test public void testHeader()", "class_method_signature": "ConnAckDecoderTest.testHeader()", "testcase": true, "constructor": false, "invocations": ["allocate", "initHeader", "flip", "decode", "assertNotNull", "getMessage", "assertEquals", "assertEquals", "getReturnCode", "getMessage", "assertEquals", "getMessageType", "getMessage"]}, "focal_class": {"identifier": "ConnAckDecoder", "superclass": "extends MqttDecoder", "interfaces": "", "fields": [], "methods": [{"identifier": "decodable", "parameters": "(IoSession session, IoBuffer in)", "modifiers": "public", "return": "MessageDecoderResult", "signature": "MessageDecoderResult decodable(IoSession session, IoBuffer in)", "full_signature": "public MessageDecoderResult decodable(IoSession session, IoBuffer in)", "class_method_signature": "ConnAckDecoder.decodable(IoSession session, IoBuffer in)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "modifiers": "public", "return": "MessageDecoderResult", "signature": "MessageDecoderResult decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "full_signature": "public MessageDecoderResult decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "class_method_signature": "ConnAckDecoder.decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "testcase": false, "constructor": false}], "file": "parser/src/main/java/org/dna/mqtt/moquette/proto/ConnAckDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "modifiers": "public", "return": "MessageDecoderResult", "body": "public MessageDecoderResult decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws Exception {\n        //Common decoding part\n        ConnAckMessage message = new ConnAckMessage();\n        if (decodeCommonHeader(message, in) == NEED_DATA) {\n            return NEED_DATA;\n        }\n        //skip reserved byte\n        in.skip(1);\n        \n        //read  return code\n        message.setReturnCode(in.get());\n        out.write(message);\n        return OK;\n    }", "signature": "MessageDecoderResult decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "full_signature": "public MessageDecoderResult decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "class_method_signature": "ConnAckDecoder.decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)", "testcase": false, "constructor": false, "invocations": ["decodeCommonHeader", "skip", "setReturnCode", "get", "write"]}, "repository": {"repo_id": 13703429, "url": "https://github.com/milliondreams/moquette-mqtt", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 19, "size": 1536, "license": "Apache License 2.0"}}