{"test_class": {"identifier": "PublishDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ByteBuf m_buff;", "modifier": "", "type": "ByteBuf", "declarator": "m_buff", "var_name": "m_buff"}, {"original_string": "PublishDecoder m_msgdec;", "modifier": "", "type": "PublishDecoder", "declarator": "m_msgdec", "var_name": "m_msgdec"}, {"original_string": "List<Object> m_results;", "modifier": "", "type": "List<Object>", "declarator": "m_results", "var_name": "m_results"}], "file": "netty_parser/src/test/java/org/dna/mqtt/moquette/parser/netty/PublishDecoderTest.java"}, "test_case": {"identifier": "testHeaderWithMessageID_Payload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHeaderWithMessageID_Payload() throws Exception {\n        m_buff = Unpooled.buffer(14);\n        int messageID = 123;\n        byte[] payload = new byte[]{0x0A, 0x0B, 0x0C};\n        initHeaderWithMessageID_Payload(m_buff, messageID, payload);\n\n        //Exercise\n        m_msgdec.decode(null, m_buff, m_results);\n\n        assertFalse(m_results.isEmpty());\n        PublishMessage message = (PublishMessage)m_results.get(0); \n        assertNotNull(message);\n        assertEquals(\"Fake Topic\", message.getTopicName());\n        assertEquals(messageID, (int) message.getMessageID());\n        TestUtils.verifyEquals(payload, message.getPayload());\n    }", "signature": "void testHeaderWithMessageID_Payload()", "full_signature": "@Test public void testHeaderWithMessageID_Payload()", "class_method_signature": "PublishDecoderTest.testHeaderWithMessageID_Payload()", "testcase": true, "constructor": false, "invocations": ["buffer", "initHeaderWithMessageID_Payload", "decode", "assertFalse", "isEmpty", "get", "assertNotNull", "assertEquals", "getTopicName", "assertEquals", "getMessageID", "verifyEquals", "getPayload"]}, "focal_class": {"identifier": "PublishDecoder", "superclass": "extends DemuxDecoder", "interfaces": "", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(PublishDecoder.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PublishDecoder.class)", "var_name": "LOG"}], "methods": [{"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "modifiers": "@Override", "return": "void", "signature": "void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "full_signature": "@Override void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "class_method_signature": "PublishDecoder.decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "testcase": false, "constructor": false}], "file": "netty_parser/src/main/java/org/dna/mqtt/moquette/parser/netty/PublishDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "modifiers": "@Override", "return": "void", "body": "@Override\n    void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        LOG.info(\"decode invoked with buffer \" + in);\n        in.resetReaderIndex();\n        int startPos = in.readerIndex();\n\n        //Common decoding part\n        PublishMessage message = new PublishMessage();\n        if (!decodeCommonHeader(message, in)) {\n            LOG.info(\"decode ask for more data after \" + in);\n            in.resetReaderIndex();\n            return;\n        }\n        int remainingLength = message.getRemainingLength();\n        \n        //Topic name\n        String topic = Utils.decodeString(in);\n        if (topic == null) {\n            in.resetReaderIndex();\n            return;\n        }\n        message.setTopicName(topic);\n        \n        if (message.getQos() == AbstractMessage.QOSType.LEAST_ONE || \n                message.getQos() == AbstractMessage.QOSType.EXACTLY_ONCE) {\n            message.setMessageID(in.readUnsignedShort());\n        }\n        int stopPos = in.readerIndex();\n        \n        //read the payload\n        int payloadSize = remainingLength - (stopPos - startPos - 2) + (Utils.numBytesToEncode(remainingLength) - 1);\n        if (in.readableBytes() < payloadSize) {\n            in.resetReaderIndex();\n            return;\n        }\n        byte[] b = new byte[payloadSize];\n        in.readBytes(b);\n        message.setPayload(b);\n        \n        out.add(message);\n    }", "signature": "void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "full_signature": "@Override void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "class_method_signature": "PublishDecoder.decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "testcase": false, "constructor": false, "invocations": ["info", "resetReaderIndex", "readerIndex", "decodeCommonHeader", "info", "resetReaderIndex", "getRemainingLength", "decodeString", "resetReaderIndex", "setTopicName", "getQos", "getQos", "setMessageID", "readUnsignedShort", "readerIndex", "numBytesToEncode", "readableBytes", "resetReaderIndex", "readBytes", "setPayload", "add"]}, "repository": {"repo_id": 13703429, "url": "https://github.com/milliondreams/moquette-mqtt", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 19, "size": 1536, "license": "Apache License 2.0"}}