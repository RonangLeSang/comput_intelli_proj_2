{"test_class": {"identifier": "IllegalNotEqualExceptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/quality-check/src/test/java/net/sf/qualitycheck/exception/IllegalNotEqualExceptionTest.java"}, "test_case": {"identifier": "testGetIllegalArgument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetIllegalArgument() {\n\t\tfinal IllegalArgumentHolder<Object> iah = new IllegalNotEqualException(2);\n\t\tAssert.assertEquals(Integer.valueOf(2), iah.getIllegalArgument());\n\t}", "signature": "void testGetIllegalArgument()", "full_signature": "@Test public void testGetIllegalArgument()", "class_method_signature": "IllegalNotEqualExceptionTest.testGetIllegalArgument()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "valueOf", "getIllegalArgument"]}, "focal_class": {"identifier": "IllegalNotEqualException", "superclass": "extends RuntimeException", "interfaces": "implements IllegalArgumentHolder<Object>", "fields": [{"original_string": "private static final long serialVersionUID = 49779498587504287L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 49779498587504287L", "var_name": "serialVersionUID"}, {"original_string": "protected static final String DEFAULT_MESSAGE = \"Argument must be equal to a defined value.\";", "modifier": "protected static final", "type": "String", "declarator": "DEFAULT_MESSAGE = \"Argument must be equal to a defined value.\"", "var_name": "DEFAULT_MESSAGE"}, {"original_string": "private final Object illegalArgumentValue;", "modifier": "private final", "type": "Object", "declarator": "illegalArgumentValue", "var_name": "illegalArgumentValue"}], "methods": [{"identifier": "IllegalNotEqualException", "parameters": "(@Nullable final Object illegalArgumentValue)", "modifiers": "public", "return": "", "signature": " IllegalNotEqualException(@Nullable final Object illegalArgumentValue)", "full_signature": "public  IllegalNotEqualException(@Nullable final Object illegalArgumentValue)", "class_method_signature": "IllegalNotEqualException.IllegalNotEqualException(@Nullable final Object illegalArgumentValue)", "testcase": false, "constructor": true}, {"identifier": "IllegalNotEqualException", "parameters": "(@Nullable final Object illegalArgumentValue, @Nullable final Throwable cause)", "modifiers": "public", "return": "", "signature": " IllegalNotEqualException(@Nullable final Object illegalArgumentValue, @Nullable final Throwable cause)", "full_signature": "public  IllegalNotEqualException(@Nullable final Object illegalArgumentValue, @Nullable final Throwable cause)", "class_method_signature": "IllegalNotEqualException.IllegalNotEqualException(@Nullable final Object illegalArgumentValue, @Nullable final Throwable cause)", "testcase": false, "constructor": true}, {"identifier": "IllegalNotEqualException", "parameters": "(@Nonnull final String message, @Nullable final Object illegalArgumentValue)", "modifiers": "public", "return": "", "signature": " IllegalNotEqualException(@Nonnull final String message, @Nullable final Object illegalArgumentValue)", "full_signature": "public  IllegalNotEqualException(@Nonnull final String message, @Nullable final Object illegalArgumentValue)", "class_method_signature": "IllegalNotEqualException.IllegalNotEqualException(@Nonnull final String message, @Nullable final Object illegalArgumentValue)", "testcase": false, "constructor": true}, {"identifier": "IllegalNotEqualException", "parameters": "(@Nonnull final String message, @Nullable final Object illegalArgumentValue,\n\t\t\t@Nullable final Throwable cause)", "modifiers": "public", "return": "", "signature": " IllegalNotEqualException(@Nonnull final String message, @Nullable final Object illegalArgumentValue,\n\t\t\t@Nullable final Throwable cause)", "full_signature": "public  IllegalNotEqualException(@Nonnull final String message, @Nullable final Object illegalArgumentValue,\n\t\t\t@Nullable final Throwable cause)", "class_method_signature": "IllegalNotEqualException.IllegalNotEqualException(@Nonnull final String message, @Nullable final Object illegalArgumentValue,\n\t\t\t@Nullable final Throwable cause)", "testcase": false, "constructor": true}, {"identifier": "getIllegalArgument", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getIllegalArgument()", "full_signature": "@Override public Object getIllegalArgument()", "class_method_signature": "IllegalNotEqualException.getIllegalArgument()", "testcase": false, "constructor": false}], "file": "modules/quality-check/src/main/java/net/sf/qualitycheck/exception/IllegalNotEqualException.java"}, "focal_method": {"identifier": "getIllegalArgument", "parameters": "()", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object getIllegalArgument() {\n\t\treturn illegalArgumentValue;\n\t}", "signature": "Object getIllegalArgument()", "full_signature": "@Override public Object getIllegalArgument()", "class_method_signature": "IllegalNotEqualException.getIllegalArgument()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5590873, "url": "https://github.com/arouel/quality-check", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 1671, "license": "licensed"}}