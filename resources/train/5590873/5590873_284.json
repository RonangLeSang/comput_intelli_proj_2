{"test_class": {"identifier": "NumberInRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/quality-check/src/test/java/net/sf/qualitycheck/NumberInRangeTest.java"}, "test_case": {"identifier": "testIsInRange_Double_Decimal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsInRange_Double_Decimal() {\n\t\tAssert.assertEquals(true, \n\t\t\t\tNumberInRange.isInRange(Double.valueOf(4d), new BigDecimal(Double.MIN_VALUE), new BigDecimal(Double.MAX_VALUE)));\n\t\t\n\t}", "signature": "void testIsInRange_Double_Decimal()", "full_signature": "@Test public void testIsInRange_Double_Decimal()", "class_method_signature": "NumberInRangeTest.testIsInRange_Double_Decimal()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isInRange", "valueOf"]}, "focal_class": {"identifier": "NumberInRange", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final BigInteger BYTE_MIN = BigInteger.valueOf((long) Byte.MIN_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "BYTE_MIN = BigInteger.valueOf((long) Byte.MIN_VALUE)", "var_name": "BYTE_MIN"}, {"original_string": "public static final BigInteger BYTE_MAX = BigInteger.valueOf((long) Byte.MAX_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "BYTE_MAX = BigInteger.valueOf((long) Byte.MAX_VALUE)", "var_name": "BYTE_MAX"}, {"original_string": "public static final BigInteger SHORT_MIN = BigInteger.valueOf((long) Short.MIN_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "SHORT_MIN = BigInteger.valueOf((long) Short.MIN_VALUE)", "var_name": "SHORT_MIN"}, {"original_string": "public static final BigInteger SHORT_MAX = BigInteger.valueOf((long) Short.MAX_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "SHORT_MAX = BigInteger.valueOf((long) Short.MAX_VALUE)", "var_name": "SHORT_MAX"}, {"original_string": "public static final BigInteger INTEGER_MIN = BigInteger.valueOf((long) Integer.MIN_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "INTEGER_MIN = BigInteger.valueOf((long) Integer.MIN_VALUE)", "var_name": "INTEGER_MIN"}, {"original_string": "public static final BigInteger INTEGER_MAX = BigInteger.valueOf((long) Integer.MAX_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "INTEGER_MAX = BigInteger.valueOf((long) Integer.MAX_VALUE)", "var_name": "INTEGER_MAX"}, {"original_string": "public static final BigInteger LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE)", "var_name": "LONG_MIN"}, {"original_string": "public static final BigInteger LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);", "modifier": "public static final", "type": "BigInteger", "declarator": "LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE)", "var_name": "LONG_MAX"}, {"original_string": "public static final BigDecimal FLOAT_MAX = new BigDecimal(Float.MAX_VALUE);", "modifier": "public static final", "type": "BigDecimal", "declarator": "FLOAT_MAX = new BigDecimal(Float.MAX_VALUE)", "var_name": "FLOAT_MAX"}, {"original_string": "public static final BigDecimal FLOAT_MIN = new BigDecimal(-Float.MAX_VALUE);", "modifier": "public static final", "type": "BigDecimal", "declarator": "FLOAT_MIN = new BigDecimal(-Float.MAX_VALUE)", "var_name": "FLOAT_MIN"}, {"original_string": "public static final BigDecimal DOUBLE_MAX = new BigDecimal(Double.MAX_VALUE);", "modifier": "public static final", "type": "BigDecimal", "declarator": "DOUBLE_MAX = new BigDecimal(Double.MAX_VALUE)", "var_name": "DOUBLE_MAX"}, {"original_string": "public static final BigDecimal DOUBLE_MIN = new BigDecimal(-Double.MAX_VALUE);", "modifier": "public static final", "type": "BigDecimal", "declarator": "DOUBLE_MIN = new BigDecimal(-Double.MAX_VALUE)", "var_name": "DOUBLE_MIN"}], "methods": [{"identifier": "checkByte", "parameters": "(@Nonnull final Number number)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "byte", "signature": "byte checkByte(@Nonnull final Number number)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static byte checkByte(@Nonnull final Number number)", "class_method_signature": "NumberInRange.checkByte(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "checkDouble", "parameters": "(@Nonnull final Number number)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "double", "signature": "double checkDouble(@Nonnull final Number number)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static double checkDouble(@Nonnull final Number number)", "class_method_signature": "NumberInRange.checkDouble(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "checkFloat", "parameters": "(@Nonnull final Number number)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "float", "signature": "float checkFloat(@Nonnull final Number number)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static float checkFloat(@Nonnull final Number number)", "class_method_signature": "NumberInRange.checkFloat(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "checkInteger", "parameters": "(@Nonnull final Number number)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "int", "signature": "int checkInteger(@Nonnull final Number number)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static int checkInteger(@Nonnull final Number number)", "class_method_signature": "NumberInRange.checkInteger(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "checkLong", "parameters": "(@Nonnull final Number number)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "int", "signature": "int checkLong(@Nonnull final Number number)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static int checkLong(@Nonnull final Number number)", "class_method_signature": "NumberInRange.checkLong(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "checkShort", "parameters": "(@Nonnull final Number number)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "short", "signature": "short checkShort(@Nonnull final Number number)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static short checkShort(@Nonnull final Number number)", "class_method_signature": "NumberInRange.checkShort(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "isInByteRange", "parameters": "(@Nonnull final Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInByteRange(@Nonnull final Number number)", "full_signature": "public static boolean isInByteRange(@Nonnull final Number number)", "class_method_signature": "NumberInRange.isInByteRange(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "isInDoubleRange", "parameters": "(@Nonnull final Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInDoubleRange(@Nonnull final Number number)", "full_signature": "public static boolean isInDoubleRange(@Nonnull final Number number)", "class_method_signature": "NumberInRange.isInDoubleRange(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "isInFloatRange", "parameters": "(@Nonnull final Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInFloatRange(@Nonnull final Number number)", "full_signature": "public static boolean isInFloatRange(@Nonnull final Number number)", "class_method_signature": "NumberInRange.isInFloatRange(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "isInIntegerRange", "parameters": "(@Nonnull final Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInIntegerRange(@Nonnull final Number number)", "full_signature": "public static boolean isInIntegerRange(@Nonnull final Number number)", "class_method_signature": "NumberInRange.isInIntegerRange(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "isInLongRange", "parameters": "(@Nonnull final Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInLongRange(@Nonnull final Number number)", "full_signature": "public static boolean isInLongRange(@Nonnull final Number number)", "class_method_signature": "NumberInRange.isInLongRange(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "isInRange", "parameters": "(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "boolean", "signature": "boolean isInRange(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static boolean isInRange(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "class_method_signature": "NumberInRange.isInRange(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "testcase": false, "constructor": false}, {"identifier": "isInRange", "parameters": "(@Nonnull final Number number, @Nonnull final BigInteger min, @Nonnull final BigInteger max)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "boolean", "signature": "boolean isInRange(@Nonnull final Number number, @Nonnull final BigInteger min, @Nonnull final BigInteger max)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static boolean isInRange(@Nonnull final Number number, @Nonnull final BigInteger min, @Nonnull final BigInteger max)", "class_method_signature": "NumberInRange.isInRange(@Nonnull final Number number, @Nonnull final BigInteger min, @Nonnull final BigInteger max)", "testcase": false, "constructor": false}, {"identifier": "isInShortRange", "parameters": "(@Nonnull final Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInShortRange(@Nonnull final Number number)", "full_signature": "public static boolean isInShortRange(@Nonnull final Number number)", "class_method_signature": "NumberInRange.isInShortRange(@Nonnull final Number number)", "testcase": false, "constructor": false}, {"identifier": "NumberInRange", "parameters": "()", "modifiers": "private", "return": "", "signature": " NumberInRange()", "full_signature": "private  NumberInRange()", "class_method_signature": "NumberInRange.NumberInRange()", "testcase": false, "constructor": true}], "file": "modules/quality-check/src/main/java/net/sf/qualitycheck/NumberInRange.java"}, "focal_method": {"identifier": "isInRange", "parameters": "(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "boolean", "body": "@ArgumentsChecked\n\t@Throws(IllegalNullArgumentException.class)\n\tpublic static boolean isInRange(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max) {\n\t\tCheck.notNull(number, \"number\");\n\t\tCheck.notNull(min, \"min\");\n\t\tCheck.notNull(max, \"max\");\n\n\t\tBigDecimal bigDecimal = null;\n\t\tif (number instanceof Byte || number instanceof Short || number instanceof Integer || number instanceof Long) {\n\t\t\tbigDecimal = new BigDecimal(number.longValue());\n\t\t} else if (number instanceof Float || number instanceof Double) {\n\t\t\tbigDecimal = new BigDecimal(number.doubleValue());\n\t\t} else if (number instanceof BigInteger) {\n\t\t\tbigDecimal = new BigDecimal((BigInteger) number);\n\t\t} else if (number instanceof BigDecimal) {\n\t\t\tbigDecimal = (BigDecimal) number;\n\t\t} else {\n\t\t\tthrow new IllegalNumberArgumentException(\"Return value is no known subclass of 'java.lang.Number': \"\n\t\t\t\t\t+ number.getClass().getName());\n\t\t}\n\t\treturn max.compareTo(bigDecimal) >= 0 && min.compareTo(bigDecimal) <= 0;\n\t}", "signature": "boolean isInRange(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static boolean isInRange(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "class_method_signature": "NumberInRange.isInRange(@Nonnull final Number number, @Nonnull final BigDecimal min, @Nonnull final BigDecimal max)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "notNull", "longValue", "doubleValue", "getName", "getClass", "compareTo", "compareTo"]}, "repository": {"repo_id": 5590873, "url": "https://github.com/arouel/quality-check", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 1671, "license": "licensed"}}