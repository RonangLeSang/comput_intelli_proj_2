{"test_class": {"identifier": "ConditionalCheckTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EnumSet<Letter> set = EnumSet.of(Letter.A, Letter.D);", "modifier": "private final", "type": "EnumSet<Letter>", "declarator": "set = EnumSet.of(Letter.A, Letter.D)", "var_name": "set"}], "file": "modules/quality-check/src/test/java/net/sf/qualitycheck/ConditionalCheckTest.java"}, "test_case": {"identifier": "testNotEquals_Negative_object", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNotEquals_Negative_object() {\n\t\tConditionalCheck.notEquals(false, NotEqual.UNEQUAL, NotEqual.UNEQUAL);\n\t}", "signature": "void testNotEquals_Negative_object()", "full_signature": "@Test public void testNotEquals_Negative_object()", "class_method_signature": "ConditionalCheckTest.testNotEquals_Negative_object()", "testcase": true, "constructor": false, "invocations": ["notEquals"]}, "focal_class": {"identifier": "ConditionalCheck", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "contains", "parameters": "(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotContainedArgumentException.class }) public static", "return": "void", "signature": "void contains(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotContainedArgumentException.class }) public static void contains(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle)", "class_method_signature": "ConditionalCheck.contains(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle,\n\t\t\t@Nonnull final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotContainedArgumentException.class }) public static", "return": "void", "signature": "void contains(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle,\n\t\t\t@Nonnull final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotContainedArgumentException.class }) public static void contains(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle,\n\t\t\t@Nonnull final String name)", "class_method_signature": "ConditionalCheck.contains(final boolean condition, @Nonnull final Collection<T> haystack, @Nonnull final T needle,\n\t\t\t@Nonnull final String name)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final boolean expected, final boolean check)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final boolean expected, final boolean check)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final boolean expected, final boolean check)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final boolean expected, final boolean check)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final byte expected, final byte check)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final byte expected, final byte check)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final byte expected, final byte check)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final byte expected, final byte check)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final char expected, final char check)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final char expected, final char check)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final char expected, final char check)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final char expected, final char check)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final char expected, final char check, @Nonnull final String message)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final char expected, final char check, @Nonnull final String message)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final char expected, final char check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final char expected, final char check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final int expected, final int check)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final int expected, final int check)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final int expected, final int check)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final int expected, final int check)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final int expected, final int check, @Nonnull final String message)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final int expected, final int check, @Nonnull final String message)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final int expected, final int check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final int expected, final int check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final long expected, final long check)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final long expected, final long check)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final long expected, final long check)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final long expected, final long check)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final long expected, final long check, @Nonnull final String message)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final long expected, final long check, @Nonnull final String message)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final long expected, final long check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final long expected, final long check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final short expected, final short check)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final short expected, final short check)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final short expected, final short check)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final short expected, final short check)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, final short expected, final short check, @Nonnull final String message)", "modifiers": "@Throws(IllegalNotEqualException.class) public static", "return": "void", "signature": "void equals(final boolean condition, final short expected, final short check, @Nonnull final String message)", "full_signature": "@Throws(IllegalNotEqualException.class) public static void equals(final boolean condition, final short expected, final short check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, final short expected, final short check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotEqualException.class }) public static", "return": "T", "signature": "T equals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotEqualException.class }) public static T equals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final boolean condition, @Nonnull final T expect, @Nonnull final T check, final String msg)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotEqualException.class }) public static", "return": "void", "signature": "void equals(final boolean condition, @Nonnull final T expect, @Nonnull final T check, final String msg)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotEqualException.class }) public static void equals(final boolean condition, @Nonnull final T expect, @Nonnull final T check, final String msg)", "class_method_signature": "ConditionalCheck.equals(final boolean condition, @Nonnull final T expect, @Nonnull final T check, final String msg)", "testcase": false, "constructor": false}, {"identifier": "greaterOrEqualThan", "parameters": "(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterOrEqualThanException.class }) public static", "return": "void", "signature": "void greaterOrEqualThan(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterOrEqualThanException.class }) public static void greaterOrEqualThan(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check)", "class_method_signature": "ConditionalCheck.greaterOrEqualThan(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check)", "testcase": false, "constructor": false}, {"identifier": "greaterOrEqualThan", "parameters": "(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check, @Nonnull final String message)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterOrEqualThanException.class }) public static", "return": "void", "signature": "void greaterOrEqualThan(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check, @Nonnull final String message)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterOrEqualThanException.class }) public static void greaterOrEqualThan(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.greaterOrEqualThan(final boolean condition, @Nonnull final T expected,\n\t\t\t@Nonnull final T check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterThanException.class }) public static", "return": "void", "signature": "void greaterThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterThanException.class }) public static void greaterThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "class_method_signature": "ConditionalCheck.greaterThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterThanException.class }) public static", "return": "void", "signature": "void greaterThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotGreaterThanException.class }) public static void greaterThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "class_method_signature": "ConditionalCheck.greaterThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(final boolean condition, @Nonnull final Class<?> clazz,\n\t\t\t@Nonnull final Class<? extends Annotation> annotation)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalMissingAnnotationException.class }) public static", "return": "void", "signature": "void hasAnnotation(final boolean condition, @Nonnull final Class<?> clazz,\n\t\t\t@Nonnull final Class<? extends Annotation> annotation)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalMissingAnnotationException.class }) public static void hasAnnotation(final boolean condition, @Nonnull final Class<?> clazz,\n\t\t\t@Nonnull final Class<? extends Annotation> annotation)", "class_method_signature": "ConditionalCheck.hasAnnotation(final boolean condition, @Nonnull final Class<?> clazz,\n\t\t\t@Nonnull final Class<? extends Annotation> annotation)", "testcase": false, "constructor": false}, {"identifier": "instanceOf", "parameters": "(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalInstanceOfArgumentException.class }) @SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T instanceOf(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalInstanceOfArgumentException.class }) @SuppressWarnings(\"unchecked\") public static T instanceOf(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj)", "class_method_signature": "ConditionalCheck.instanceOf(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj)", "testcase": false, "constructor": false}, {"identifier": "instanceOf", "parameters": "(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj,\n\t\t\t@Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalInstanceOfArgumentException.class }) @SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T instanceOf(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj,\n\t\t\t@Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalInstanceOfArgumentException.class }) @SuppressWarnings(\"unchecked\") public static T instanceOf(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj,\n\t\t\t@Nullable final String name)", "class_method_signature": "ConditionalCheck.instanceOf(final boolean condition, @Nonnull final Class<?> type, @Nonnull final Object obj,\n\t\t\t@Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(final boolean condition, @Nullable final Object reference)", "modifiers": "@Throws(IllegalNotNullArgumentException.class) public static", "return": "void", "signature": "void isNull(final boolean condition, @Nullable final Object reference)", "full_signature": "@Throws(IllegalNotNullArgumentException.class) public static void isNull(final boolean condition, @Nullable final Object reference)", "class_method_signature": "ConditionalCheck.isNull(final boolean condition, @Nullable final Object reference)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(final boolean condition, @Nullable final Object reference, @Nullable final String name)", "modifiers": "@Throws(IllegalNotNullArgumentException.class) public static", "return": "void", "signature": "void isNull(final boolean condition, @Nullable final Object reference, @Nullable final String name)", "full_signature": "@Throws(IllegalNotNullArgumentException.class) public static void isNull(final boolean condition, @Nullable final Object reference, @Nullable final String name)", "class_method_signature": "ConditionalCheck.isNull(final boolean condition, @Nullable final Object reference, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(final boolean condition, @Nonnull final String value)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static", "return": "void", "signature": "void isNumber(final boolean condition, @Nonnull final String value)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static void isNumber(final boolean condition, @Nonnull final String value)", "class_method_signature": "ConditionalCheck.isNumber(final boolean condition, @Nonnull final String value)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(final boolean condition, @Nonnull final String value, @Nonnull final Class<T> type)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static", "return": "void", "signature": "void isNumber(final boolean condition, @Nonnull final String value, @Nonnull final Class<T> type)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static void isNumber(final boolean condition, @Nonnull final String value, @Nonnull final Class<T> type)", "class_method_signature": "ConditionalCheck.isNumber(final boolean condition, @Nonnull final String value, @Nonnull final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(final boolean condition, @Nonnull final String value, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static", "return": "void", "signature": "void isNumber(final boolean condition, @Nonnull final String value, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static void isNumber(final boolean condition, @Nonnull final String value, @Nullable final String name)", "class_method_signature": "ConditionalCheck.isNumber(final boolean condition, @Nonnull final String value, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(final boolean condition, @Nonnull final String value, @Nullable final String name,\n\t\t\t@Nonnull final Class<T> type)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static", "return": "void", "signature": "void isNumber(final boolean condition, @Nonnull final String value, @Nullable final String name,\n\t\t\t@Nonnull final Class<T> type)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static void isNumber(final boolean condition, @Nonnull final String value, @Nullable final String name,\n\t\t\t@Nonnull final Class<T> type)", "class_method_signature": "ConditionalCheck.isNumber(final boolean condition, @Nonnull final String value, @Nullable final String name,\n\t\t\t@Nonnull final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(final boolean condition, @Nonnull final T value)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static", "return": "void", "signature": "void isNumeric(final boolean condition, @Nonnull final T value)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumberArgumentException.class }) public static void isNumeric(final boolean condition, @Nonnull final T value)", "class_method_signature": "ConditionalCheck.isNumeric(final boolean condition, @Nonnull final T value)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(final boolean condition, @Nonnull final T value, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumericArgumentException.class }) public static", "return": "void", "signature": "void isNumeric(final boolean condition, @Nonnull final T value, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNumericArgumentException.class }) public static void isNumeric(final boolean condition, @Nonnull final T value, @Nullable final String name)", "class_method_signature": "ConditionalCheck.isNumeric(final boolean condition, @Nonnull final T value, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "lesserThan", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotLesserThanException.class }) public static", "return": "void", "signature": "void lesserThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotLesserThanException.class }) public static void lesserThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "class_method_signature": "ConditionalCheck.lesserThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "testcase": false, "constructor": false}, {"identifier": "lesserThan", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotLesserThanException.class }) public static", "return": "void", "signature": "void lesserThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNotLesserThanException.class }) public static void lesserThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "class_method_signature": "ConditionalCheck.lesserThan(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "testcase": false, "constructor": false}, {"identifier": "matchesPattern", "parameters": "(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars)", "modifiers": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static", "return": "void", "signature": "void matchesPattern(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars)", "full_signature": "@ArgumentsChecked @Throws(IllegalNullArgumentException.class) public static void matchesPattern(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars)", "class_method_signature": "ConditionalCheck.matchesPattern(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars)", "testcase": false, "constructor": false}, {"identifier": "matchesPattern", "parameters": "(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalPatternArgumentException.class }) public static", "return": "void", "signature": "void matchesPattern(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalPatternArgumentException.class }) public static void matchesPattern(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars, @Nullable final String name)", "class_method_signature": "ConditionalCheck.matchesPattern(final boolean condition, @Nonnull final Pattern pattern,\n\t\t\t@Nonnull final T chars, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(final boolean condition, @Nonnull final T iterable)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static", "return": "void", "signature": "void noNullElements(final boolean condition, @Nonnull final T iterable)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static void noNullElements(final boolean condition, @Nonnull final T iterable)", "class_method_signature": "ConditionalCheck.noNullElements(final boolean condition, @Nonnull final T iterable)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(final boolean condition, @Nonnull final T iterable, final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static", "return": "void", "signature": "void noNullElements(final boolean condition, @Nonnull final T iterable, final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static void noNullElements(final boolean condition, @Nonnull final T iterable, final String name)", "class_method_signature": "ConditionalCheck.noNullElements(final boolean condition, @Nonnull final T iterable, final String name)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(final boolean condition, @Nonnull final T[] array)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static", "return": "void", "signature": "void noNullElements(final boolean condition, @Nonnull final T[] array)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static void noNullElements(final boolean condition, @Nonnull final T[] array)", "class_method_signature": "ConditionalCheck.noNullElements(final boolean condition, @Nonnull final T[] array)", "testcase": false, "constructor": false}, {"identifier": "noNullElements", "parameters": "(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static", "return": "void", "signature": "void noNullElements(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalNullElementsException.class }) public static void noNullElements(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "class_method_signature": "ConditionalCheck.noNullElements(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, final boolean expression)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, final boolean expression)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, final boolean expression)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, final boolean expression)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, final boolean expression, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, final boolean expression, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, final boolean expression, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, final boolean expression, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T chars)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T chars)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T chars)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T chars)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T collection)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T collection)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T collection)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T collection)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T map)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T map)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T map)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T map)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T reference, final boolean expression,\n\t\t\t@Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T reference, final boolean expression,\n\t\t\t@Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T reference, final boolean expression,\n\t\t\t@Nullable final String name)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T reference, final boolean expression,\n\t\t\t@Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T chars, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T chars, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T chars, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T chars, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T map, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T map, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T map, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T map, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T collection, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T collection, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T collection, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T collection, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T[] array)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T[] array)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T[] array)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T[] array)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static", "return": "void", "signature": "void notEmpty(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEmptyArgumentException.class }) public static void notEmpty(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notEmpty(final boolean condition, @Nonnull final T[] array, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final boolean expected, final boolean check)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final boolean expected, final boolean check)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final boolean expected, final boolean check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final boolean expected, final boolean check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final boolean expected, final boolean check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final byte expected, final byte check)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final byte expected, final byte check)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final byte expected, final byte check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final byte expected, final byte check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final byte expected, final byte check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final char expected, final char check)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final char expected, final char check)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final char expected, final char check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final char expected, final char check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final char expected, final char check, @Nonnull final String message)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final char expected, final char check, @Nonnull final String message)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final char expected, final char check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final char expected, final char check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final int expected, final int check)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final int expected, final int check)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final int expected, final int check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final int expected, final int check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final int expected, final int check, @Nonnull final String message)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final int expected, final int check, @Nonnull final String message)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final int expected, final int check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final int expected, final int check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final long expected, final long check)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final long expected, final long check)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final long expected, final long check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final long expected, final long check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final long expected, final long check, @Nonnull final String message)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final long expected, final long check, @Nonnull final String message)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final long expected, final long check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final long expected, final long check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final short expected, final short check)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final short expected, final short check)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final short expected, final short check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final short expected, final short check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, final short expected, final short check, @Nonnull final String message)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "signature": "void notEquals(final boolean condition, final short expected, final short check, @Nonnull final String message)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final short expected, final short check, @Nonnull final String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final short expected, final short check, @Nonnull final String message)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static", "return": "void", "signature": "void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static", "return": "void", "signature": "void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static", "return": "void", "signature": "void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "testcase": false, "constructor": false}, {"identifier": "notEquals", "parameters": "(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static", "return": "void", "signature": "void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, IllegalEqualException.class }) public static void notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, @Nonnull final T expected, @Nonnull final T check,\n\t\t\tfinal String message)", "testcase": false, "constructor": false}, {"identifier": "notNaN", "parameters": "(final boolean condition, final double value)", "modifiers": "@Throws(IllegalNaNArgumentException.class) public static", "return": "void", "signature": "void notNaN(final boolean condition, final double value)", "full_signature": "@Throws(IllegalNaNArgumentException.class) public static void notNaN(final boolean condition, final double value)", "class_method_signature": "ConditionalCheck.notNaN(final boolean condition, final double value)", "testcase": false, "constructor": false}, {"identifier": "notNaN", "parameters": "(final boolean condition, final double value, @Nullable final String name)", "modifiers": "@Throws(IllegalNaNArgumentException.class) public static", "return": "void", "signature": "void notNaN(final boolean condition, final double value, @Nullable final String name)", "full_signature": "@Throws(IllegalNaNArgumentException.class) public static void notNaN(final boolean condition, final double value, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notNaN(final boolean condition, final double value, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notNaN", "parameters": "(final boolean condition, final float value)", "modifiers": "@Throws(IllegalNaNArgumentException.class) public static", "return": "void", "signature": "void notNaN(final boolean condition, final float value)", "full_signature": "@Throws(IllegalNaNArgumentException.class) public static void notNaN(final boolean condition, final float value)", "class_method_signature": "ConditionalCheck.notNaN(final boolean condition, final float value)", "testcase": false, "constructor": false}, {"identifier": "notNaN", "parameters": "(final boolean condition, final float value, @Nullable final String name)", "modifiers": "@Throws(IllegalNaNArgumentException.class) public static", "return": "void", "signature": "void notNaN(final boolean condition, final float value, @Nullable final String name)", "full_signature": "@Throws(IllegalNaNArgumentException.class) public static void notNaN(final boolean condition, final float value, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notNaN(final boolean condition, final float value, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notNegative", "parameters": "(final boolean condition, final int value)", "modifiers": "@Throws(IllegalNegativeArgumentException.class) public static", "return": "void", "signature": "void notNegative(final boolean condition, final int value)", "full_signature": "@Throws(IllegalNegativeArgumentException.class) public static void notNegative(final boolean condition, final int value)", "class_method_signature": "ConditionalCheck.notNegative(final boolean condition, final int value)", "testcase": false, "constructor": false}, {"identifier": "notNegative", "parameters": "(final boolean condition, final int value, @Nullable final String name)", "modifiers": "@Throws(IllegalNegativeArgumentException.class) public static", "return": "void", "signature": "void notNegative(final boolean condition, final int value, @Nullable final String name)", "full_signature": "@Throws(IllegalNegativeArgumentException.class) public static void notNegative(final boolean condition, final int value, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notNegative(final boolean condition, final int value, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(final boolean condition, @Nonnull final T reference)", "modifiers": "@Throws(IllegalNullArgumentException.class) public static", "return": "void", "signature": "void notNull(final boolean condition, @Nonnull final T reference)", "full_signature": "@Throws(IllegalNullArgumentException.class) public static void notNull(final boolean condition, @Nonnull final T reference)", "class_method_signature": "ConditionalCheck.notNull(final boolean condition, @Nonnull final T reference)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(final boolean condition, @Nonnull final T reference, @Nullable final String name)", "modifiers": "@Throws(IllegalNullArgumentException.class) public static", "return": "void", "signature": "void notNull(final boolean condition, @Nonnull final T reference, @Nullable final String name)", "full_signature": "@Throws(IllegalNullArgumentException.class) public static void notNull(final boolean condition, @Nonnull final T reference, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notNull(final boolean condition, @Nonnull final T reference, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "notPositive", "parameters": "(final boolean condition, final int value)", "modifiers": "@Throws(IllegalPositiveArgumentException.class) public static", "return": "void", "signature": "void notPositive(final boolean condition, final int value)", "full_signature": "@Throws(IllegalPositiveArgumentException.class) public static void notPositive(final boolean condition, final int value)", "class_method_signature": "ConditionalCheck.notPositive(final boolean condition, final int value)", "testcase": false, "constructor": false}, {"identifier": "notPositive", "parameters": "(final boolean condition, final int value, @Nullable final String name)", "modifiers": "@Throws(IllegalPositiveArgumentException.class) public static", "return": "void", "signature": "void notPositive(final boolean condition, final int value, @Nullable final String name)", "full_signature": "@Throws(IllegalPositiveArgumentException.class) public static void notPositive(final boolean condition, final int value, @Nullable final String name)", "class_method_signature": "ConditionalCheck.notPositive(final boolean condition, final int value, @Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "positionIndex", "parameters": "(final boolean condition, final int index, final int size)", "modifiers": "@Throws(IllegalPositionIndexException.class) public static", "return": "void", "signature": "void positionIndex(final boolean condition, final int index, final int size)", "full_signature": "@Throws(IllegalPositionIndexException.class) public static void positionIndex(final boolean condition, final int index, final int size)", "class_method_signature": "ConditionalCheck.positionIndex(final boolean condition, final int index, final int size)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(final boolean condition, @Nonnegative final int start, @Nonnegative final int end, @Nonnegative final int size)", "modifiers": "@Throws(IllegalRangeException.class) public static", "return": "void", "signature": "void range(final boolean condition, @Nonnegative final int start, @Nonnegative final int end, @Nonnegative final int size)", "full_signature": "@Throws(IllegalRangeException.class) public static void range(final boolean condition, @Nonnegative final int start, @Nonnegative final int end, @Nonnegative final int size)", "class_method_signature": "ConditionalCheck.range(final boolean condition, @Nonnegative final int start, @Nonnegative final int end, @Nonnegative final int size)", "testcase": false, "constructor": false}, {"identifier": "stateIsTrue", "parameters": "(final boolean condition, final boolean expression)", "modifiers": "@Throws(IllegalStateOfArgumentException.class) public static", "return": "void", "signature": "void stateIsTrue(final boolean condition, final boolean expression)", "full_signature": "@Throws(IllegalStateOfArgumentException.class) public static void stateIsTrue(final boolean condition, final boolean expression)", "class_method_signature": "ConditionalCheck.stateIsTrue(final boolean condition, final boolean expression)", "testcase": false, "constructor": false}, {"identifier": "stateIsTrue", "parameters": "(final boolean condition, final boolean expression, final Class<? extends RuntimeException> clazz)", "modifiers": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, RuntimeInstantiationException.class }) public static", "return": "void", "signature": "void stateIsTrue(final boolean condition, final boolean expression, final Class<? extends RuntimeException> clazz)", "full_signature": "@ArgumentsChecked @Throws({ IllegalNullArgumentException.class, RuntimeInstantiationException.class }) public static void stateIsTrue(final boolean condition, final boolean expression, final Class<? extends RuntimeException> clazz)", "class_method_signature": "ConditionalCheck.stateIsTrue(final boolean condition, final boolean expression, final Class<? extends RuntimeException> clazz)", "testcase": false, "constructor": false}, {"identifier": "stateIsTrue", "parameters": "(final boolean condition, final boolean expression, @Nonnull final String description)", "modifiers": "@Throws(IllegalStateOfArgumentException.class) public static", "return": "void", "signature": "void stateIsTrue(final boolean condition, final boolean expression, @Nonnull final String description)", "full_signature": "@Throws(IllegalStateOfArgumentException.class) public static void stateIsTrue(final boolean condition, final boolean expression, @Nonnull final String description)", "class_method_signature": "ConditionalCheck.stateIsTrue(final boolean condition, final boolean expression, @Nonnull final String description)", "testcase": false, "constructor": false}, {"identifier": "stateIsTrue", "parameters": "(final boolean condition, final boolean expression, @Nonnull final String descriptionTemplate,\n\t\t\tfinal Object... descriptionTemplateArgs)", "modifiers": "@Throws(IllegalStateOfArgumentException.class) public static", "return": "void", "signature": "void stateIsTrue(final boolean condition, final boolean expression, @Nonnull final String descriptionTemplate,\n\t\t\tfinal Object... descriptionTemplateArgs)", "full_signature": "@Throws(IllegalStateOfArgumentException.class) public static void stateIsTrue(final boolean condition, final boolean expression, @Nonnull final String descriptionTemplate,\n\t\t\tfinal Object... descriptionTemplateArgs)", "class_method_signature": "ConditionalCheck.stateIsTrue(final boolean condition, final boolean expression, @Nonnull final String descriptionTemplate,\n\t\t\tfinal Object... descriptionTemplateArgs)", "testcase": false, "constructor": false}, {"identifier": "ConditionalCheck", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConditionalCheck()", "full_signature": "private  ConditionalCheck()", "class_method_signature": "ConditionalCheck.ConditionalCheck()", "testcase": false, "constructor": true}], "file": "modules/quality-check/src/main/java/net/sf/qualitycheck/ConditionalCheck.java"}, "focal_method": {"identifier": "notEquals", "parameters": "(final boolean condition, final boolean expected, final boolean check)", "modifiers": "@Throws(IllegalEqualException.class) public static", "return": "void", "body": "@Throws(IllegalEqualException.class)\n\tpublic static void notEquals(final boolean condition, final boolean expected, final boolean check) {\n\t\tif (condition) {\n\t\t\tCheck.notEquals(expected, check);\n\t\t}\n\t}", "signature": "void notEquals(final boolean condition, final boolean expected, final boolean check)", "full_signature": "@Throws(IllegalEqualException.class) public static void notEquals(final boolean condition, final boolean expected, final boolean check)", "class_method_signature": "ConditionalCheck.notEquals(final boolean condition, final boolean expected, final boolean check)", "testcase": false, "constructor": false, "invocations": ["notEquals"]}, "repository": {"repo_id": 5590873, "url": "https://github.com/arouel/quality-check", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 1671, "license": "licensed"}}