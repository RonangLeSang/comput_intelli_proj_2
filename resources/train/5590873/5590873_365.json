{"test_class": {"identifier": "TypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/quality-immutable-object/src/test/java/net/sf/qualitycheck/immutableobject/domain/TypeTest.java"}, "test_case": {"identifier": "isJavaLangType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isJavaLangType() {\n\t\tassertTrue(new Type(\"java.lang.Boolean\").isJavaLangType());\n\t\tassertTrue(Type.of(Boolean.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Byte\").isJavaLangType());\n\t\tassertTrue(Type.of(Byte.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Character\").isJavaLangType());\n\t\tassertTrue(Type.of(Character.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Double\").isJavaLangType());\n\t\tassertTrue(Type.of(Double.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Float\").isJavaLangType());\n\t\tassertTrue(Type.of(Float.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Integer\").isJavaLangType());\n\t\tassertTrue(Type.of(Integer.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Long\").isJavaLangType());\n\t\tassertTrue(Type.of(Long.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Short\").isJavaLangType());\n\t\tassertTrue(Type.of(Short.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.Number\").isJavaLangType());\n\t\tassertTrue(Type.of(Number.class).isJavaLangType());\n\t\tassertTrue(new Type(\"java.lang.String\").isJavaLangType());\n\t\tassertTrue(Type.of(String.class).isJavaLangType());\n\n\t\tassertFalse(new Type(\"Boolean\").isJavaLangType());\n\t\tassertFalse(new Type(\"Byte\").isJavaLangType());\n\t\tassertFalse(new Type(\"Character\").isJavaLangType());\n\t\tassertFalse(new Type(\"Double\").isJavaLangType());\n\t\tassertFalse(new Type(\"Float\").isJavaLangType());\n\t\tassertFalse(new Type(\"Integer\").isJavaLangType());\n\t\tassertFalse(new Type(\"Long\").isJavaLangType());\n\t\tassertFalse(new Type(\"Short\").isJavaLangType());\n\t}", "signature": "void isJavaLangType()", "full_signature": "@Test public void isJavaLangType()", "class_method_signature": "TypeTest.isJavaLangType()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertTrue", "isJavaLangType", "assertTrue", "isJavaLangType", "of", "assertFalse", "isJavaLangType", "assertFalse", "isJavaLangType", "assertFalse", "isJavaLangType", "assertFalse", "isJavaLangType", "assertFalse", "isJavaLangType", "assertFalse", "isJavaLangType", "assertFalse", "isJavaLangType", "assertFalse", "isJavaLangType"]}, "focal_class": {"identifier": "Type", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Type BOOLEAN = new Type(Package.UNDEFINED, Primitive.BOOLEAN.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "BOOLEAN = new Type(Package.UNDEFINED, Primitive.BOOLEAN.getName(), GenericDeclaration.UNDEFINED)", "var_name": "BOOLEAN"}, {"original_string": "public static final Type BOOLEAN_BOXED = new Type(Package.JAVA_LANG, Boolean.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "BOOLEAN_BOXED = new Type(Package.JAVA_LANG, Boolean.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "BOOLEAN_BOXED"}, {"original_string": "public static final Type BYTE = new Type(Package.UNDEFINED, Primitive.BYTE.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "BYTE = new Type(Package.UNDEFINED, Primitive.BYTE.getName(), GenericDeclaration.UNDEFINED)", "var_name": "BYTE"}, {"original_string": "public static final Type BYTE_BOXED = new Type(Package.JAVA_LANG, Byte.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "BYTE_BOXED = new Type(Package.JAVA_LANG, Byte.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "BYTE_BOXED"}, {"original_string": "public static final Type CHAR = new Type(Package.UNDEFINED, Primitive.CHAR.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "CHAR = new Type(Package.UNDEFINED, Primitive.CHAR.getName(), GenericDeclaration.UNDEFINED)", "var_name": "CHAR"}, {"original_string": "public static final Type CHARACTER_BOXED = new Type(Package.JAVA_LANG, Character.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "CHARACTER_BOXED = new Type(Package.JAVA_LANG, Character.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "CHARACTER_BOXED"}, {"original_string": "public static final Type DOUBLE = new Type(Package.UNDEFINED, Primitive.DOUBLE.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "DOUBLE = new Type(Package.UNDEFINED, Primitive.DOUBLE.getName(), GenericDeclaration.UNDEFINED)", "var_name": "DOUBLE"}, {"original_string": "public static final Type DOUBLE_BOXED = new Type(Package.JAVA_LANG, Double.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "DOUBLE_BOXED = new Type(Package.JAVA_LANG, Double.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "DOUBLE_BOXED"}, {"original_string": "public static final Type FLOAT = new Type(Package.UNDEFINED, Primitive.FLOAT.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "FLOAT = new Type(Package.UNDEFINED, Primitive.FLOAT.getName(), GenericDeclaration.UNDEFINED)", "var_name": "FLOAT"}, {"original_string": "public static final Type FLOAT_BOXED = new Type(Package.JAVA_LANG, Float.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "FLOAT_BOXED = new Type(Package.JAVA_LANG, Float.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "FLOAT_BOXED"}, {"original_string": "public static final Type INT = new Type(Package.UNDEFINED, Primitive.INT.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "INT = new Type(Package.UNDEFINED, Primitive.INT.getName(), GenericDeclaration.UNDEFINED)", "var_name": "INT"}, {"original_string": "public static final Type INTEGER_BOXED = new Type(Package.JAVA_LANG, Integer.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "INTEGER_BOXED = new Type(Package.JAVA_LANG, Integer.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "INTEGER_BOXED"}, {"original_string": "public static final Type LONG = new Type(Package.UNDEFINED, Primitive.LONG.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "LONG = new Type(Package.UNDEFINED, Primitive.LONG.getName(), GenericDeclaration.UNDEFINED)", "var_name": "LONG"}, {"original_string": "public static final Type LONG_BOXED = new Type(Package.JAVA_LANG, Long.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "LONG_BOXED = new Type(Package.JAVA_LANG, Long.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "LONG_BOXED"}, {"original_string": "public static final Type NUMBER = new Type(Package.JAVA_LANG, Number.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "NUMBER = new Type(Package.JAVA_LANG, Number.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "NUMBER"}, {"original_string": "private static final Pattern PATTERN = Pattern.compile(\"^(((\\\\d|\\\\w)+\\\\.)*)((\\\\d|\\\\w)+)(\\\\$((\\\\d|\\\\w)+))?(<([\\\\w\\\\?].*)>)?$\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(\"^(((\\\\d|\\\\w)+\\\\.)*)((\\\\d|\\\\w)+)(\\\\$((\\\\d|\\\\w)+))?(<([\\\\w\\\\?].*)>)?$\")", "var_name": "PATTERN"}, {"original_string": "public static final Type SHORT = new Type(Package.UNDEFINED, Primitive.SHORT.getName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "SHORT = new Type(Package.UNDEFINED, Primitive.SHORT.getName(), GenericDeclaration.UNDEFINED)", "var_name": "SHORT"}, {"original_string": "public static final Type SHORT_BOXED = new Type(Package.JAVA_LANG, Short.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "SHORT_BOXED = new Type(Package.JAVA_LANG, Short.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "SHORT_BOXED"}, {"original_string": "public static final Type STRING = new Type(Package.JAVA_LANG, String.class.getSimpleName(), GenericDeclaration.UNDEFINED);", "modifier": "public static final", "type": "Type", "declarator": "STRING = new Type(Package.JAVA_LANG, String.class.getSimpleName(), GenericDeclaration.UNDEFINED)", "var_name": "STRING"}, {"original_string": "public static final List<Type> JAVA_LANG_VALUE_TYPES = ImmutableList.of(BOOLEAN_BOXED, BYTE_BOXED, CHARACTER_BOXED, DOUBLE_BOXED,\n\t\t\tFLOAT_BOXED, INTEGER_BOXED, LONG_BOXED, NUMBER, SHORT_BOXED, STRING);", "modifier": "public static final", "type": "List<Type>", "declarator": "JAVA_LANG_VALUE_TYPES = ImmutableList.of(BOOLEAN_BOXED, BYTE_BOXED, CHARACTER_BOXED, DOUBLE_BOXED,\n\t\t\tFLOAT_BOXED, INTEGER_BOXED, LONG_BOXED, NUMBER, SHORT_BOXED, STRING)", "var_name": "JAVA_LANG_VALUE_TYPES"}, {"original_string": "@Nullable\n\tprivate final transient boolean collectionVariant;", "modifier": "@Nullable\n\tprivate final transient", "type": "boolean", "declarator": "collectionVariant", "var_name": "collectionVariant"}, {"original_string": "@Nonnull\n\tprivate final GenericDeclaration genericDeclaration;", "modifier": "@Nonnull\n\tprivate final", "type": "GenericDeclaration", "declarator": "genericDeclaration", "var_name": "genericDeclaration"}, {"original_string": "@Nonnull\n\tprivate final String name;", "modifier": "@Nonnull\n\tprivate final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@Nonnull\n\tprivate final Package packageDeclaration;", "modifier": "@Nonnull\n\tprivate final", "type": "Package", "declarator": "packageDeclaration", "var_name": "packageDeclaration"}], "methods": [{"identifier": "createGenericDeclaration", "parameters": "(@Nonnull final String declaration)", "modifiers": "@Nonnull private static", "return": "GenericDeclaration", "signature": "GenericDeclaration createGenericDeclaration(@Nonnull final String declaration)", "full_signature": "@Nonnull private static GenericDeclaration createGenericDeclaration(@Nonnull final String declaration)", "class_method_signature": "Type.createGenericDeclaration(@Nonnull final String declaration)", "testcase": false, "constructor": false}, {"identifier": "createPackage", "parameters": "(@Nonnull final String packageName)", "modifiers": "@Nonnull private static", "return": "Package", "signature": "Package createPackage(@Nonnull final String packageName)", "full_signature": "@Nonnull private static Package createPackage(@Nonnull final String packageName)", "class_method_signature": "Type.createPackage(@Nonnull final String packageName)", "testcase": false, "constructor": false}, {"identifier": "evaluateJavaLangType", "parameters": "(@Nonnull final String name)", "modifiers": "@Nullable public static", "return": "Type", "signature": "Type evaluateJavaLangType(@Nonnull final String name)", "full_signature": "@Nullable public static Type evaluateJavaLangType(@Nonnull final String name)", "class_method_signature": "Type.evaluateJavaLangType(@Nonnull final String name)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(@Nonnull final Class<?> clazz)", "modifiers": "@Nonnull public static", "return": "Type", "signature": "Type of(@Nonnull final Class<?> clazz)", "full_signature": "@Nonnull public static Type of(@Nonnull final Class<?> clazz)", "class_method_signature": "Type.of(@Nonnull final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "Type", "parameters": "(@Nonnull final Package pkg, @Nonnull final String name, @Nonnull final GenericDeclaration genericDeclaration)", "modifiers": "public", "return": "", "signature": " Type(@Nonnull final Package pkg, @Nonnull final String name, @Nonnull final GenericDeclaration genericDeclaration)", "full_signature": "public  Type(@Nonnull final Package pkg, @Nonnull final String name, @Nonnull final GenericDeclaration genericDeclaration)", "class_method_signature": "Type.Type(@Nonnull final Package pkg, @Nonnull final String name, @Nonnull final GenericDeclaration genericDeclaration)", "testcase": false, "constructor": true}, {"identifier": "Type", "parameters": "(@Nonnull final String qualifiedName)", "modifiers": "public", "return": "", "signature": " Type(@Nonnull final String qualifiedName)", "full_signature": "public  Type(@Nonnull final String qualifiedName)", "class_method_signature": "Type.Type(@Nonnull final String qualifiedName)", "testcase": false, "constructor": true}, {"identifier": "Type", "parameters": "(@Nonnull final String packageName, @Nonnull final String typeName, @Nonnull final String genericDeclaration)", "modifiers": "public", "return": "", "signature": " Type(@Nonnull final String packageName, @Nonnull final String typeName, @Nonnull final String genericDeclaration)", "full_signature": "public  Type(@Nonnull final String packageName, @Nonnull final String typeName, @Nonnull final String genericDeclaration)", "class_method_signature": "Type.Type(@Nonnull final String packageName, @Nonnull final String typeName, @Nonnull final String genericDeclaration)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "Type.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "getGenericDeclaration", "parameters": "()", "modifiers": "@Nonnull public", "return": "GenericDeclaration", "signature": "GenericDeclaration getGenericDeclaration()", "full_signature": "@Nonnull public GenericDeclaration getGenericDeclaration()", "class_method_signature": "Type.getGenericDeclaration()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Nonnull public", "return": "String", "signature": "String getName()", "full_signature": "@Nonnull public String getName()", "class_method_signature": "Type.getName()", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "()", "modifiers": "@Nonnull public", "return": "Package", "signature": "Package getPackage()", "full_signature": "@Nonnull public Package getPackage()", "class_method_signature": "Type.getPackage()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Type.hashCode()", "testcase": false, "constructor": false}, {"identifier": "isBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoolean()", "full_signature": "public boolean isBoolean()", "class_method_signature": "Type.isBoolean()", "testcase": false, "constructor": false}, {"identifier": "isBoxedBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedBoolean()", "full_signature": "public boolean isBoxedBoolean()", "class_method_signature": "Type.isBoxedBoolean()", "testcase": false, "constructor": false}, {"identifier": "isBoxedByte", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedByte()", "full_signature": "public boolean isBoxedByte()", "class_method_signature": "Type.isBoxedByte()", "testcase": false, "constructor": false}, {"identifier": "isBoxedCharacter", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedCharacter()", "full_signature": "public boolean isBoxedCharacter()", "class_method_signature": "Type.isBoxedCharacter()", "testcase": false, "constructor": false}, {"identifier": "isBoxedDouble", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedDouble()", "full_signature": "public boolean isBoxedDouble()", "class_method_signature": "Type.isBoxedDouble()", "testcase": false, "constructor": false}, {"identifier": "isBoxedFloat", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedFloat()", "full_signature": "public boolean isBoxedFloat()", "class_method_signature": "Type.isBoxedFloat()", "testcase": false, "constructor": false}, {"identifier": "isBoxedInteger", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedInteger()", "full_signature": "public boolean isBoxedInteger()", "class_method_signature": "Type.isBoxedInteger()", "testcase": false, "constructor": false}, {"identifier": "isBoxedLong", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedLong()", "full_signature": "public boolean isBoxedLong()", "class_method_signature": "Type.isBoxedLong()", "testcase": false, "constructor": false}, {"identifier": "isBoxedShort", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedShort()", "full_signature": "public boolean isBoxedShort()", "class_method_signature": "Type.isBoxedShort()", "testcase": false, "constructor": false}, {"identifier": "isBoxedType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoxedType()", "full_signature": "public boolean isBoxedType()", "class_method_signature": "Type.isBoxedType()", "testcase": false, "constructor": false}, {"identifier": "isByte", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isByte()", "full_signature": "public boolean isByte()", "class_method_signature": "Type.isByte()", "testcase": false, "constructor": false}, {"identifier": "isChar", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isChar()", "full_signature": "public boolean isChar()", "class_method_signature": "Type.isChar()", "testcase": false, "constructor": false}, {"identifier": "isCollectionVariant", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCollectionVariant()", "full_signature": "public boolean isCollectionVariant()", "class_method_signature": "Type.isCollectionVariant()", "testcase": false, "constructor": false}, {"identifier": "isDouble", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDouble()", "full_signature": "public boolean isDouble()", "class_method_signature": "Type.isDouble()", "testcase": false, "constructor": false}, {"identifier": "isFloat", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFloat()", "full_signature": "public boolean isFloat()", "class_method_signature": "Type.isFloat()", "testcase": false, "constructor": false}, {"identifier": "isInt", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInt()", "full_signature": "public boolean isInt()", "class_method_signature": "Type.isInt()", "testcase": false, "constructor": false}, {"identifier": "isJavaLangType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isJavaLangType()", "full_signature": "public boolean isJavaLangType()", "class_method_signature": "Type.isJavaLangType()", "testcase": false, "constructor": false}, {"identifier": "isLong", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLong()", "full_signature": "public boolean isLong()", "class_method_signature": "Type.isLong()", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNumber()", "full_signature": "public boolean isNumber()", "class_method_signature": "Type.isNumber()", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPrimitive()", "full_signature": "public boolean isPrimitive()", "class_method_signature": "Type.isPrimitive()", "testcase": false, "constructor": false}, {"identifier": "isShort", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShort()", "full_signature": "public boolean isShort()", "class_method_signature": "Type.isShort()", "testcase": false, "constructor": false}, {"identifier": "isString", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isString()", "full_signature": "public boolean isString()", "class_method_signature": "Type.isString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Type.toString()", "testcase": false, "constructor": false}], "file": "modules/quality-immutable-object/src/main/java/net/sf/qualitycheck/immutableobject/domain/Type.java"}, "focal_method": {"identifier": "isJavaLangType", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isJavaLangType() {\n\t\treturn isBoxedType() || isNumber() || isString();\n\t}", "signature": "boolean isJavaLangType()", "full_signature": "public boolean isJavaLangType()", "class_method_signature": "Type.isJavaLangType()", "testcase": false, "constructor": false, "invocations": ["isBoxedType", "isNumber", "isString"]}, "repository": {"repo_id": 5590873, "url": "https://github.com/arouel/quality-check", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 1671, "license": "licensed"}}