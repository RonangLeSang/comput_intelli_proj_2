{"test_class": {"identifier": "WebConfigurerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WebConfigurer webConfigurer;", "modifier": "private", "type": "WebConfigurer", "declarator": "webConfigurer", "var_name": "webConfigurer"}, {"original_string": "private MockServletContext servletContext;", "modifier": "private", "type": "MockServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private MockEnvironment env;", "modifier": "private", "type": "MockEnvironment", "declarator": "env", "var_name": "env"}, {"original_string": "private JHipsterProperties props;", "modifier": "private", "type": "JHipsterProperties", "declarator": "props", "var_name": "props"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "file": "jhipster/jhipster-uaa/quotes/src/test/java/com/baeldung/jhipster/quotes/config/WebConfigurerTest.java"}, "test_case": {"identifier": "testUndertowHttp2Enabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUndertowHttp2Enabled() {\n        props.getHttp().setVersion(JHipsterProperties.Http.Version.V_2_0);\n        UndertowServletWebServerFactory container = new UndertowServletWebServerFactory();\n        webConfigurer.customize(container);\n        Builder builder = Undertow.builder();\n        container.getBuilderCustomizers().forEach(c -> c.customize(builder));\n        OptionMap.Builder serverOptions = (OptionMap.Builder) ReflectionTestUtils.getField(builder, \"serverOptions\");\n        assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isTrue();\n    }", "signature": "void testUndertowHttp2Enabled()", "full_signature": "@Test public void testUndertowHttp2Enabled()", "class_method_signature": "WebConfigurerTest.testUndertowHttp2Enabled()", "testcase": true, "constructor": false, "invocations": ["setVersion", "getHttp", "customize", "builder", "forEach", "getBuilderCustomizers", "customize", "getField", "isTrue", "assertThat", "get", "getMap"]}, "focal_class": {"identifier": "WebConfigurer", "superclass": "", "interfaces": "implements ServletContextInitializer, WebServerFactoryCustomizer<WebServerFactory>", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(WebConfigurer.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WebConfigurer.class)", "var_name": "log"}, {"original_string": "private final Environment env;", "modifier": "private final", "type": "Environment", "declarator": "env", "var_name": "env"}, {"original_string": "private final JHipsterProperties jHipsterProperties;", "modifier": "private final", "type": "JHipsterProperties", "declarator": "jHipsterProperties", "var_name": "jHipsterProperties"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "methods": [{"identifier": "WebConfigurer", "parameters": "(Environment env, JHipsterProperties jHipsterProperties)", "modifiers": "public", "return": "", "signature": " WebConfigurer(Environment env, JHipsterProperties jHipsterProperties)", "full_signature": "public  WebConfigurer(Environment env, JHipsterProperties jHipsterProperties)", "class_method_signature": "WebConfigurer.WebConfigurer(Environment env, JHipsterProperties jHipsterProperties)", "testcase": false, "constructor": true}, {"identifier": "onStartup", "parameters": "(ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "signature": "void onStartup(ServletContext servletContext)", "full_signature": "@Override public void onStartup(ServletContext servletContext)", "class_method_signature": "WebConfigurer.onStartup(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "customize", "parameters": "(WebServerFactory server)", "modifiers": "@Override public", "return": "void", "signature": "void customize(WebServerFactory server)", "full_signature": "@Override public void customize(WebServerFactory server)", "class_method_signature": "WebConfigurer.customize(WebServerFactory server)", "testcase": false, "constructor": false}, {"identifier": "setMimeMappings", "parameters": "(WebServerFactory server)", "modifiers": "private", "return": "void", "signature": "void setMimeMappings(WebServerFactory server)", "full_signature": "private void setMimeMappings(WebServerFactory server)", "class_method_signature": "WebConfigurer.setMimeMappings(WebServerFactory server)", "testcase": false, "constructor": false}, {"identifier": "initMetrics", "parameters": "(ServletContext servletContext, EnumSet<DispatcherType> disps)", "modifiers": "private", "return": "void", "signature": "void initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "full_signature": "private void initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "class_method_signature": "WebConfigurer.initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "testcase": false, "constructor": false}, {"identifier": "corsFilter", "parameters": "()", "modifiers": "@Bean public", "return": "CorsFilter", "signature": "CorsFilter corsFilter()", "full_signature": "@Bean public CorsFilter corsFilter()", "class_method_signature": "WebConfigurer.corsFilter()", "testcase": false, "constructor": false}, {"identifier": "initH2Console", "parameters": "(ServletContext servletContext)", "modifiers": "private", "return": "void", "signature": "void initH2Console(ServletContext servletContext)", "full_signature": "private void initH2Console(ServletContext servletContext)", "class_method_signature": "WebConfigurer.initH2Console(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "setMetricRegistry", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "@Autowired(required = false) public", "return": "void", "signature": "void setMetricRegistry(MetricRegistry metricRegistry)", "full_signature": "@Autowired(required = false) public void setMetricRegistry(MetricRegistry metricRegistry)", "class_method_signature": "WebConfigurer.setMetricRegistry(MetricRegistry metricRegistry)", "testcase": false, "constructor": false}], "file": "jhipster/jhipster-uaa/quotes/src/main/java/com/baeldung/jhipster/quotes/config/WebConfigurer.java"}, "focal_method": {"identifier": "customize", "parameters": "(WebServerFactory server)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void customize(WebServerFactory server) {\n        setMimeMappings(server);\n\n        /*\n         * Enable HTTP/2 for Undertow - https://twitter.com/ankinson/status/829256167700492288\n         * HTTP/2 requires HTTPS, so HTTP requests will fallback to HTTP/1.1.\n         * See the JHipsterProperties class and your application-*.yml configuration files\n         * for more information.\n         */\n        if (jHipsterProperties.getHttp().getVersion().equals(JHipsterProperties.Http.Version.V_2_0) &&\n            server instanceof UndertowServletWebServerFactory) {\n\n            ((UndertowServletWebServerFactory) server)\n                .addBuilderCustomizers(builder ->\n                    builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));\n        }\n    }", "signature": "void customize(WebServerFactory server)", "full_signature": "@Override public void customize(WebServerFactory server)", "class_method_signature": "WebConfigurer.customize(WebServerFactory server)", "testcase": false, "constructor": false, "invocations": ["setMimeMappings", "equals", "getVersion", "getHttp", "addBuilderCustomizers", "setServerOption"]}, "repository": {"repo_id": 9754983, "url": "https://github.com/eugenp/tutorials", "stars": 19184, "created": "4/29/2013 6:26:36 PM +00:00", "updates": "2020-01-27T21:38:05+00:00", "fork": "False", "license": "licensed"}}