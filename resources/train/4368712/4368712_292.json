{"test_class": {"identifier": "LoggingInterceptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-common/src/test/java/org/glassfish/jersey/logging/LoggingInterceptorTest.java"}, "test_case": {"identifier": "testVerbosityHeadersPrintBinaryEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerbosityHeadersPrintBinaryEntity() {\n        assertFalse(LoggingInterceptor.printEntity(HEADERS_ONLY, APPLICATION_OCTET_STREAM_TYPE));\n    }", "signature": "void testVerbosityHeadersPrintBinaryEntity()", "full_signature": "@Test public void testVerbosityHeadersPrintBinaryEntity()", "class_method_signature": "LoggingInterceptorTest.testVerbosityHeadersPrintBinaryEntity()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "printEntity"]}, "focal_class": {"identifier": "LoggingInterceptor", "superclass": "", "interfaces": "implements WriterInterceptor", "fields": [{"original_string": "static final String REQUEST_PREFIX = \"> \";", "modifier": "static final", "type": "String", "declarator": "REQUEST_PREFIX = \"> \"", "var_name": "REQUEST_PREFIX"}, {"original_string": "static final String RESPONSE_PREFIX = \"< \";", "modifier": "static final", "type": "String", "declarator": "RESPONSE_PREFIX = \"< \"", "var_name": "RESPONSE_PREFIX"}, {"original_string": "static final String ENTITY_LOGGER_PROPERTY = LoggingFeature.class.getName() + \".entityLogger\";", "modifier": "static final", "type": "String", "declarator": "ENTITY_LOGGER_PROPERTY = LoggingFeature.class.getName() + \".entityLogger\"", "var_name": "ENTITY_LOGGER_PROPERTY"}, {"original_string": "static final String LOGGING_ID_PROPERTY = LoggingFeature.class.getName() + \".id\";", "modifier": "static final", "type": "String", "declarator": "LOGGING_ID_PROPERTY = LoggingFeature.class.getName() + \".id\"", "var_name": "LOGGING_ID_PROPERTY"}, {"original_string": "private static final String NOTIFICATION_PREFIX = \"* \";", "modifier": "private static final", "type": "String", "declarator": "NOTIFICATION_PREFIX = \"* \"", "var_name": "NOTIFICATION_PREFIX"}, {"original_string": "private static final MediaType TEXT_MEDIA_TYPE = new MediaType(\"text\", \"*\");", "modifier": "private static final", "type": "MediaType", "declarator": "TEXT_MEDIA_TYPE = new MediaType(\"text\", \"*\")", "var_name": "TEXT_MEDIA_TYPE"}, {"original_string": "private static final Set<MediaType> READABLE_APP_MEDIA_TYPES = new HashSet<MediaType>() {{\n        add(TEXT_MEDIA_TYPE);\n        add(MediaType.APPLICATION_ATOM_XML_TYPE);\n        add(MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n        add(MediaType.APPLICATION_JSON_TYPE);\n        add(MediaType.APPLICATION_SVG_XML_TYPE);\n        add(MediaType.APPLICATION_XHTML_XML_TYPE);\n        add(MediaType.APPLICATION_XML_TYPE);\n    }};", "modifier": "private static final", "type": "Set<MediaType>", "declarator": "READABLE_APP_MEDIA_TYPES = new HashSet<MediaType>() {{\n        add(TEXT_MEDIA_TYPE);\n        add(MediaType.APPLICATION_ATOM_XML_TYPE);\n        add(MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n        add(MediaType.APPLICATION_JSON_TYPE);\n        add(MediaType.APPLICATION_SVG_XML_TYPE);\n        add(MediaType.APPLICATION_XHTML_XML_TYPE);\n        add(MediaType.APPLICATION_XML_TYPE);\n    }}", "var_name": "READABLE_APP_MEDIA_TYPES"}, {"original_string": "private static final Comparator<Map.Entry<String, List<String>>> COMPARATOR =\n            new Comparator<Map.Entry<String, List<String>>>() {\n\n                @Override\n                public int compare(final Map.Entry<String, List<String>> o1, final Map.Entry<String, List<String>> o2) {\n                    return o1.getKey().compareToIgnoreCase(o2.getKey());\n                }\n            };", "modifier": "private static final", "type": "Comparator<Map.Entry<String, List<String>>>", "declarator": "COMPARATOR =\n            new Comparator<Map.Entry<String, List<String>>>() {\n\n                @Override\n                public int compare(final Map.Entry<String, List<String>> o1, final Map.Entry<String, List<String>> o2) {\n                    return o1.getKey().compareToIgnoreCase(o2.getKey());\n                }\n            }", "var_name": "COMPARATOR"}, {"original_string": "@SuppressWarnings(\"NonConstantLogger\")\n    final Logger logger;", "modifier": "@SuppressWarnings(\"NonConstantLogger\")\n    final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "final Level level;", "modifier": "final", "type": "Level", "declarator": "level", "var_name": "level"}, {"original_string": "final AtomicLong _id = new AtomicLong(0);", "modifier": "final", "type": "AtomicLong", "declarator": "_id = new AtomicLong(0)", "var_name": "_id"}, {"original_string": "final Verbosity verbosity;", "modifier": "final", "type": "Verbosity", "declarator": "verbosity", "var_name": "verbosity"}, {"original_string": "final int maxEntitySize;", "modifier": "final", "type": "int", "declarator": "maxEntitySize", "var_name": "maxEntitySize"}], "methods": [{"identifier": "LoggingInterceptor", "parameters": "(final Logger logger, final Level level, final Verbosity verbosity, final int maxEntitySize)", "modifiers": "", "return": "", "signature": " LoggingInterceptor(final Logger logger, final Level level, final Verbosity verbosity, final int maxEntitySize)", "full_signature": "  LoggingInterceptor(final Logger logger, final Level level, final Verbosity verbosity, final int maxEntitySize)", "class_method_signature": "LoggingInterceptor.LoggingInterceptor(final Logger logger, final Level level, final Verbosity verbosity, final int maxEntitySize)", "testcase": false, "constructor": true}, {"identifier": "log", "parameters": "(final StringBuilder b)", "modifiers": "", "return": "void", "signature": "void log(final StringBuilder b)", "full_signature": " void log(final StringBuilder b)", "class_method_signature": "LoggingInterceptor.log(final StringBuilder b)", "testcase": false, "constructor": false}, {"identifier": "prefixId", "parameters": "(final StringBuilder b, final long id)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder prefixId(final StringBuilder b, final long id)", "full_signature": "private StringBuilder prefixId(final StringBuilder b, final long id)", "class_method_signature": "LoggingInterceptor.prefixId(final StringBuilder b, final long id)", "testcase": false, "constructor": false}, {"identifier": "printRequestLine", "parameters": "(final StringBuilder b, final String note, final long id, final String method, final URI uri)", "modifiers": "", "return": "void", "signature": "void printRequestLine(final StringBuilder b, final String note, final long id, final String method, final URI uri)", "full_signature": " void printRequestLine(final StringBuilder b, final String note, final long id, final String method, final URI uri)", "class_method_signature": "LoggingInterceptor.printRequestLine(final StringBuilder b, final String note, final long id, final String method, final URI uri)", "testcase": false, "constructor": false}, {"identifier": "printResponseLine", "parameters": "(final StringBuilder b, final String note, final long id, final int status)", "modifiers": "", "return": "void", "signature": "void printResponseLine(final StringBuilder b, final String note, final long id, final int status)", "full_signature": " void printResponseLine(final StringBuilder b, final String note, final long id, final int status)", "class_method_signature": "LoggingInterceptor.printResponseLine(final StringBuilder b, final String note, final long id, final int status)", "testcase": false, "constructor": false}, {"identifier": "printPrefixedHeaders", "parameters": "(final StringBuilder b,\n                              final long id,\n                              final String prefix,\n                              final MultivaluedMap<String, String> headers)", "modifiers": "", "return": "void", "signature": "void printPrefixedHeaders(final StringBuilder b,\n                              final long id,\n                              final String prefix,\n                              final MultivaluedMap<String, String> headers)", "full_signature": " void printPrefixedHeaders(final StringBuilder b,\n                              final long id,\n                              final String prefix,\n                              final MultivaluedMap<String, String> headers)", "class_method_signature": "LoggingInterceptor.printPrefixedHeaders(final StringBuilder b,\n                              final long id,\n                              final String prefix,\n                              final MultivaluedMap<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "getSortedHeaders", "parameters": "(final Set<Map.Entry<String, List<String>>> headers)", "modifiers": "", "return": "Set<Map.Entry<String, List<String>>>", "signature": "Set<Map.Entry<String, List<String>>> getSortedHeaders(final Set<Map.Entry<String, List<String>>> headers)", "full_signature": " Set<Map.Entry<String, List<String>>> getSortedHeaders(final Set<Map.Entry<String, List<String>>> headers)", "class_method_signature": "LoggingInterceptor.getSortedHeaders(final Set<Map.Entry<String, List<String>>> headers)", "testcase": false, "constructor": false}, {"identifier": "logInboundEntity", "parameters": "(final StringBuilder b, InputStream stream, final Charset charset)", "modifiers": "", "return": "InputStream", "signature": "InputStream logInboundEntity(final StringBuilder b, InputStream stream, final Charset charset)", "full_signature": " InputStream logInboundEntity(final StringBuilder b, InputStream stream, final Charset charset)", "class_method_signature": "LoggingInterceptor.logInboundEntity(final StringBuilder b, InputStream stream, final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "aroundWriteTo", "parameters": "(final WriterInterceptorContext writerInterceptorContext)", "modifiers": "@Override public", "return": "void", "signature": "void aroundWriteTo(final WriterInterceptorContext writerInterceptorContext)", "full_signature": "@Override public void aroundWriteTo(final WriterInterceptorContext writerInterceptorContext)", "class_method_signature": "LoggingInterceptor.aroundWriteTo(final WriterInterceptorContext writerInterceptorContext)", "testcase": false, "constructor": false}, {"identifier": "isReadable", "parameters": "(MediaType mediaType)", "modifiers": "static", "return": "boolean", "signature": "boolean isReadable(MediaType mediaType)", "full_signature": "static boolean isReadable(MediaType mediaType)", "class_method_signature": "LoggingInterceptor.isReadable(MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "printEntity", "parameters": "(Verbosity verbosity, MediaType mediaType)", "modifiers": "static", "return": "boolean", "signature": "boolean printEntity(Verbosity verbosity, MediaType mediaType)", "full_signature": "static boolean printEntity(Verbosity verbosity, MediaType mediaType)", "class_method_signature": "LoggingInterceptor.printEntity(Verbosity verbosity, MediaType mediaType)", "testcase": false, "constructor": false}], "file": "core-common/src/main/java/org/glassfish/jersey/logging/LoggingInterceptor.java"}, "focal_method": {"identifier": "printEntity", "parameters": "(Verbosity verbosity, MediaType mediaType)", "modifiers": "static", "return": "boolean", "body": "static boolean printEntity(Verbosity verbosity, MediaType mediaType) {\n        return verbosity == Verbosity.PAYLOAD_ANY || (verbosity == Verbosity.PAYLOAD_TEXT && isReadable(mediaType));\n    }", "signature": "boolean printEntity(Verbosity verbosity, MediaType mediaType)", "full_signature": "static boolean printEntity(Verbosity verbosity, MediaType mediaType)", "class_method_signature": "LoggingInterceptor.printEntity(Verbosity verbosity, MediaType mediaType)", "testcase": false, "constructor": false, "invocations": ["isReadable"]}, "repository": {"repo_id": 4368712, "url": "https://github.com/jersey/jersey", "language": "Java", "is_fork": false, "fork_count": 2540, "stargazer_count": 2919, "size": 38964, "license": "licensed"}}