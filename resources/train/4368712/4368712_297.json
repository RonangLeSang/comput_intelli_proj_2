{"test_class": {"identifier": "ReflectionHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-common/src/test/java/org/glassfish/jersey/internal/util/ReflectionHelperTest.java"}, "test_case": {"identifier": "securityManagerSetContextClassLoaderInDoPrivileged", "parameters": "()", "modifiers": "@Test(expected = AccessControlException.class) public", "return": "void", "body": "@Test(expected = AccessControlException.class)\n    public void securityManagerSetContextClassLoaderInDoPrivileged() throws Exception {\n        final ClassLoader loader = ReflectionHelper.class.getClassLoader();\n\n        AccessController.doPrivileged(ReflectionHelper.setContextClassLoaderPA(loader));\n        fail(\"It should not be possible to set context class loader even from privileged block via Jersey ReflectionHelper \"\n                + \"utility\");\n    }", "signature": "void securityManagerSetContextClassLoaderInDoPrivileged()", "full_signature": "@Test(expected = AccessControlException.class) public void securityManagerSetContextClassLoaderInDoPrivileged()", "class_method_signature": "ReflectionHelperTest.securityManagerSetContextClassLoaderInDoPrivileged()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "doPrivileged", "setContextClassLoaderPA", "fail"]}, "focal_class": {"identifier": "ReflectionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ReflectionHelper.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ReflectionHelper.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final PrivilegedAction<?> NoOpPrivilegedACTION = new PrivilegedAction<Object>() {\n        @Override\n        public Object run() {\n            return null;\n        }\n    };", "modifier": "private static final", "type": "PrivilegedAction<?>", "declarator": "NoOpPrivilegedACTION = new PrivilegedAction<Object>() {\n        @Override\n        public Object run() {\n            return null;\n        }\n    }", "var_name": "NoOpPrivilegedACTION"}, {"original_string": "private static final TypeVisitor<Class> eraser = new TypeVisitor<Class>() {\n        @Override\n        protected Class onClass(final Class clazz) {\n            return clazz;\n        }\n\n        @Override\n        protected Class onParameterizedType(final ParameterizedType type) {\n            return visit(type.getRawType());\n        }\n\n        @Override\n        protected Class onGenericArray(final GenericArrayType type) {\n            return Array.newInstance(visit(type.getGenericComponentType()), 0).getClass();\n        }\n\n        @Override\n        protected Class onVariable(final TypeVariable type) {\n            return visit(type.getBounds()[0]);\n        }\n\n        @Override\n        protected Class onWildcard(final WildcardType type) {\n            return visit(type.getUpperBounds()[0]);\n        }\n\n        @Override\n        protected RuntimeException createError(final Type type) {\n            return new IllegalArgumentException(LocalizationMessages.TYPE_TO_CLASS_CONVERSION_NOT_SUPPORTED(type));\n        }\n    };", "modifier": "private static final", "type": "TypeVisitor<Class>", "declarator": "eraser = new TypeVisitor<Class>() {\n        @Override\n        protected Class onClass(final Class clazz) {\n            return clazz;\n        }\n\n        @Override\n        protected Class onParameterizedType(final ParameterizedType type) {\n            return visit(type.getRawType());\n        }\n\n        @Override\n        protected Class onGenericArray(final GenericArrayType type) {\n            return Array.newInstance(visit(type.getGenericComponentType()), 0).getClass();\n        }\n\n        @Override\n        protected Class onVariable(final TypeVariable type) {\n            return visit(type.getBounds()[0]);\n        }\n\n        @Override\n        protected Class onWildcard(final WildcardType type) {\n            return visit(type.getUpperBounds()[0]);\n        }\n\n        @Override\n        protected RuntimeException createError(final Type type) {\n            return new IllegalArgumentException(LocalizationMessages.TYPE_TO_CLASS_CONVERSION_NOT_SUPPORTED(type));\n        }\n    }", "var_name": "eraser"}, {"original_string": "private static final Class<?> bundleReferenceClass = AccessController.doPrivileged(\n            classForNamePA(\"org.osgi.framework.BundleReference\", null));", "modifier": "private static final", "type": "Class<?>", "declarator": "bundleReferenceClass = AccessController.doPrivileged(\n            classForNamePA(\"org.osgi.framework.BundleReference\", null))", "var_name": "bundleReferenceClass"}], "methods": [{"identifier": "ReflectionHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionHelper()", "full_signature": "private  ReflectionHelper()", "class_method_signature": "ReflectionHelper.ReflectionHelper()", "testcase": false, "constructor": true}, {"identifier": "getDeclaringClass", "parameters": "(final AccessibleObject ao)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getDeclaringClass(final AccessibleObject ao)", "full_signature": "public static Class<?> getDeclaringClass(final AccessibleObject ao)", "class_method_signature": "ReflectionHelper.getDeclaringClass(final AccessibleObject ao)", "testcase": false, "constructor": false}, {"identifier": "objectToString", "parameters": "(final Object o)", "modifiers": "public static", "return": "String", "signature": "String objectToString(final Object o)", "full_signature": "public static String objectToString(final Object o)", "class_method_signature": "ReflectionHelper.objectToString(final Object o)", "testcase": false, "constructor": false}, {"identifier": "methodInstanceToString", "parameters": "(final Object o, final Method m)", "modifiers": "public static", "return": "String", "signature": "String methodInstanceToString(final Object o, final Method m)", "full_signature": "public static String methodInstanceToString(final Object o, final Method m)", "class_method_signature": "ReflectionHelper.methodInstanceToString(final Object o, final Method m)", "testcase": false, "constructor": false}, {"identifier": "getTypeName", "parameters": "(final Class<?> type)", "modifiers": "private static", "return": "String", "signature": "String getTypeName(final Class<?> type)", "full_signature": "private static String getTypeName(final Class<?> type)", "class_method_signature": "ReflectionHelper.getTypeName(final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "classForNamePA", "parameters": "(final String name)", "modifiers": "public static", "return": "PrivilegedAction<Class<T>>", "signature": "PrivilegedAction<Class<T>> classForNamePA(final String name)", "full_signature": "public static PrivilegedAction<Class<T>> classForNamePA(final String name)", "class_method_signature": "ReflectionHelper.classForNamePA(final String name)", "testcase": false, "constructor": false}, {"identifier": "classForNamePA", "parameters": "(final String name, final ClassLoader cl)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "PrivilegedAction<Class<T>>", "signature": "PrivilegedAction<Class<T>> classForNamePA(final String name, final ClassLoader cl)", "full_signature": "@SuppressWarnings(\"unchecked\") public static PrivilegedAction<Class<T>> classForNamePA(final String name, final ClassLoader cl)", "class_method_signature": "ReflectionHelper.classForNamePA(final String name, final ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getClassLoaderPA", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "PrivilegedAction<ClassLoader>", "signature": "PrivilegedAction<ClassLoader> getClassLoaderPA(final Class<?> clazz)", "full_signature": "public static PrivilegedAction<ClassLoader> getClassLoaderPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getClassLoaderPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredFieldsPA", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "PrivilegedAction<Field[]>", "signature": "PrivilegedAction<Field[]> getDeclaredFieldsPA(final Class<?> clazz)", "full_signature": "public static PrivilegedAction<Field[]> getDeclaredFieldsPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getDeclaredFieldsPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsPA", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "PrivilegedAction<Field[]>", "signature": "PrivilegedAction<Field[]> getAllFieldsPA(final Class<?> clazz)", "full_signature": "public static PrivilegedAction<Field[]> getAllFieldsPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getAllFieldsPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredMethodsPA", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "PrivilegedAction<Collection<? extends Method>>", "signature": "PrivilegedAction<Collection<? extends Method>> getDeclaredMethodsPA(final Class<?> clazz)", "full_signature": "public static PrivilegedAction<Collection<? extends Method>> getDeclaredMethodsPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getDeclaredMethodsPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "classForNameWithExceptionPEA", "parameters": "(final String name)", "modifiers": "public static", "return": "PrivilegedExceptionAction<Class<T>>", "signature": "PrivilegedExceptionAction<Class<T>> classForNameWithExceptionPEA(final String name)", "full_signature": "public static PrivilegedExceptionAction<Class<T>> classForNameWithExceptionPEA(final String name)", "class_method_signature": "ReflectionHelper.classForNameWithExceptionPEA(final String name)", "testcase": false, "constructor": false}, {"identifier": "classForNameWithExceptionPEA", "parameters": "(final String name, final ClassLoader cl)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "PrivilegedExceptionAction<Class<T>>", "signature": "PrivilegedExceptionAction<Class<T>> classForNameWithExceptionPEA(final String name, final ClassLoader cl)", "full_signature": "@SuppressWarnings(\"unchecked\") public static PrivilegedExceptionAction<Class<T>> classForNameWithExceptionPEA(final String name, final ClassLoader cl)", "class_method_signature": "ReflectionHelper.classForNameWithExceptionPEA(final String name, final ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getContextClassLoaderPA", "parameters": "()", "modifiers": "public static", "return": "PrivilegedAction<ClassLoader>", "signature": "PrivilegedAction<ClassLoader> getContextClassLoaderPA()", "full_signature": "public static PrivilegedAction<ClassLoader> getContextClassLoaderPA()", "class_method_signature": "ReflectionHelper.getContextClassLoaderPA()", "testcase": false, "constructor": false}, {"identifier": "getContextClassLoader", "parameters": "()", "modifiers": "private static", "return": "ClassLoader", "signature": "ClassLoader getContextClassLoader()", "full_signature": "private static ClassLoader getContextClassLoader()", "class_method_signature": "ReflectionHelper.getContextClassLoader()", "testcase": false, "constructor": false}, {"identifier": "setContextClassLoaderPA", "parameters": "(final ClassLoader classLoader)", "modifiers": "public static", "return": "PrivilegedAction", "signature": "PrivilegedAction setContextClassLoaderPA(final ClassLoader classLoader)", "full_signature": "public static PrivilegedAction setContextClassLoaderPA(final ClassLoader classLoader)", "class_method_signature": "ReflectionHelper.setContextClassLoaderPA(final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "setAccessibleMethodPA", "parameters": "(final Method m)", "modifiers": "public static", "return": "PrivilegedAction", "signature": "PrivilegedAction setAccessibleMethodPA(final Method m)", "full_signature": "public static PrivilegedAction setAccessibleMethodPA(final Method m)", "class_method_signature": "ReflectionHelper.setAccessibleMethodPA(final Method m)", "testcase": false, "constructor": false}, {"identifier": "getGenericTypeArgumentClasses", "parameters": "(final Type type)", "modifiers": "public static", "return": "List<Class<?>>", "signature": "List<Class<?>> getGenericTypeArgumentClasses(final Type type)", "full_signature": "public static List<Class<?>> getGenericTypeArgumentClasses(final Type type)", "class_method_signature": "ReflectionHelper.getGenericTypeArgumentClasses(final Type type)", "testcase": false, "constructor": false}, {"identifier": "getTypeArgumentAndClass", "parameters": "(final Type type)", "modifiers": "public static", "return": "List<ClassTypePair>", "signature": "List<ClassTypePair> getTypeArgumentAndClass(final Type type)", "full_signature": "public static List<ClassTypePair> getTypeArgumentAndClass(final Type type)", "class_method_signature": "ReflectionHelper.getTypeArgumentAndClass(final Type type)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(final Type type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitive(final Type type)", "full_signature": "public static boolean isPrimitive(final Type type)", "class_method_signature": "ReflectionHelper.isPrimitive(final Type type)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(final Type type)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getTypeArguments(final Type type)", "full_signature": "public static Type[] getTypeArguments(final Type type)", "class_method_signature": "ReflectionHelper.getTypeArguments(final Type type)", "testcase": false, "constructor": false}, {"identifier": "getTypeArgument", "parameters": "(final Type type, final int index)", "modifiers": "public static", "return": "Type", "signature": "Type getTypeArgument(final Type type, final int index)", "full_signature": "public static Type getTypeArgument(final Type type, final int index)", "class_method_signature": "ReflectionHelper.getTypeArgument(final Type type, final int index)", "testcase": false, "constructor": false}, {"identifier": "fix", "parameters": "(final Type t)", "modifiers": "private static", "return": "Type", "signature": "Type fix(final Type t)", "full_signature": "private static Type fix(final Type t)", "class_method_signature": "ReflectionHelper.fix(final Type t)", "testcase": false, "constructor": false}, {"identifier": "erasure", "parameters": "(final Type type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Class<T>", "signature": "Class<T> erasure(final Type type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Class<T> erasure(final Type type)", "class_method_signature": "ReflectionHelper.erasure(final Type type)", "testcase": false, "constructor": false}, {"identifier": "isSubClassOf", "parameters": "(final Type subType, final Type superType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubClassOf(final Type subType, final Type superType)", "full_signature": "public static boolean isSubClassOf(final Type subType, final Type superType)", "class_method_signature": "ReflectionHelper.isSubClassOf(final Type subType, final Type superType)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(final Type type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArray(final Type type)", "full_signature": "public static boolean isArray(final Type type)", "class_method_signature": "ReflectionHelper.isArray(final Type type)", "testcase": false, "constructor": false}, {"identifier": "isArrayOfType", "parameters": "(final Type type, final Class<?> componentType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArrayOfType(final Type type, final Class<?> componentType)", "full_signature": "public static boolean isArrayOfType(final Type type, final Class<?> componentType)", "class_method_signature": "ReflectionHelper.isArrayOfType(final Type type, final Class<?> componentType)", "testcase": false, "constructor": false}, {"identifier": "getArrayComponentType", "parameters": "(final Type type)", "modifiers": "public static", "return": "Type", "signature": "Type getArrayComponentType(final Type type)", "full_signature": "public static Type getArrayComponentType(final Type type)", "class_method_signature": "ReflectionHelper.getArrayComponentType(final Type type)", "testcase": false, "constructor": false}, {"identifier": "getArrayForComponentType", "parameters": "(final Class<?> c)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getArrayForComponentType(final Class<?> c)", "full_signature": "public static Class<?> getArrayForComponentType(final Class<?> c)", "class_method_signature": "ReflectionHelper.getArrayForComponentType(final Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "getValueOfStringMethodPA", "parameters": "(final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "PrivilegedAction<Method>", "signature": "PrivilegedAction<Method> getValueOfStringMethodPA(final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static PrivilegedAction<Method> getValueOfStringMethodPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getValueOfStringMethodPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getFromStringStringMethodPA", "parameters": "(final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "PrivilegedAction<Method>", "signature": "PrivilegedAction<Method> getFromStringStringMethodPA(final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static PrivilegedAction<Method> getFromStringStringMethodPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getFromStringStringMethodPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getStringToObjectMethodPA", "parameters": "(final Class<?> clazz, final String methodName)", "modifiers": "private static", "return": "PrivilegedAction<Method>", "signature": "PrivilegedAction<Method> getStringToObjectMethodPA(final Class<?> clazz, final String methodName)", "full_signature": "private static PrivilegedAction<Method> getStringToObjectMethodPA(final Class<?> clazz, final String methodName)", "class_method_signature": "ReflectionHelper.getStringToObjectMethodPA(final Class<?> clazz, final String methodName)", "testcase": false, "constructor": false}, {"identifier": "getStringConstructorPA", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "PrivilegedAction<Constructor>", "signature": "PrivilegedAction<Constructor> getStringConstructorPA(final Class<?> clazz)", "full_signature": "public static PrivilegedAction<Constructor> getStringConstructorPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getStringConstructorPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredConstructorsPA", "parameters": "(final Class<?> clazz)", "modifiers": "public static", "return": "PrivilegedAction<Constructor<?>[]>", "signature": "PrivilegedAction<Constructor<?>[]> getDeclaredConstructorsPA(final Class<?> clazz)", "full_signature": "public static PrivilegedAction<Constructor<?>[]> getDeclaredConstructorsPA(final Class<?> clazz)", "class_method_signature": "ReflectionHelper.getDeclaredConstructorsPA(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredConstructorPA", "parameters": "(final Class<?> clazz, final Class<?>... params)", "modifiers": "public static", "return": "PrivilegedAction<Constructor<?>>", "signature": "PrivilegedAction<Constructor<?>> getDeclaredConstructorPA(final Class<?> clazz, final Class<?>... params)", "full_signature": "public static PrivilegedAction<Constructor<?>> getDeclaredConstructorPA(final Class<?> clazz, final Class<?>... params)", "class_method_signature": "ReflectionHelper.getDeclaredConstructorPA(final Class<?> clazz, final Class<?>... params)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationTypes", "parameters": "(final AnnotatedElement annotatedElement,\n                                                                             final Class<? extends Annotation> metaAnnotation)", "modifiers": "public static", "return": "Collection<Class<? extends Annotation>>", "signature": "Collection<Class<? extends Annotation>> getAnnotationTypes(final AnnotatedElement annotatedElement,\n                                                                             final Class<? extends Annotation> metaAnnotation)", "full_signature": "public static Collection<Class<? extends Annotation>> getAnnotationTypes(final AnnotatedElement annotatedElement,\n                                                                             final Class<? extends Annotation> metaAnnotation)", "class_method_signature": "ReflectionHelper.getAnnotationTypes(final AnnotatedElement annotatedElement,\n                                                                             final Class<? extends Annotation> metaAnnotation)", "testcase": false, "constructor": false}, {"identifier": "isGetter", "parameters": "(final Method method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGetter(final Method method)", "full_signature": "public static boolean isGetter(final Method method)", "class_method_signature": "ReflectionHelper.isGetter(final Method method)", "testcase": false, "constructor": false}, {"identifier": "genericTypeFor", "parameters": "(final Object instance)", "modifiers": "public static", "return": "GenericType", "signature": "GenericType genericTypeFor(final Object instance)", "full_signature": "public static GenericType genericTypeFor(final Object instance)", "class_method_signature": "ReflectionHelper.genericTypeFor(final Object instance)", "testcase": false, "constructor": false}, {"identifier": "isSetter", "parameters": "(final Method method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSetter(final Method method)", "full_signature": "public static boolean isSetter(final Method method)", "class_method_signature": "ReflectionHelper.isSetter(final Method method)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(final Method method)", "modifiers": "public static", "return": "String", "signature": "String getPropertyName(final Method method)", "full_signature": "public static String getPropertyName(final Method method)", "class_method_signature": "ReflectionHelper.getPropertyName(final Method method)", "testcase": false, "constructor": false}, {"identifier": "theMostSpecificTypeOf", "parameters": "(final Set<Type> contractTypes)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> theMostSpecificTypeOf(final Set<Type> contractTypes)", "full_signature": "public static Class<?> theMostSpecificTypeOf(final Set<Type> contractTypes)", "class_method_signature": "ReflectionHelper.theMostSpecificTypeOf(final Set<Type> contractTypes)", "testcase": false, "constructor": false}, {"identifier": "getParameterizedClassArguments", "parameters": "(final DeclaringClassInterfacePair p)", "modifiers": "public static", "return": "Class[]", "signature": "Class[] getParameterizedClassArguments(final DeclaringClassInterfacePair p)", "full_signature": "public static Class[] getParameterizedClassArguments(final DeclaringClassInterfacePair p)", "class_method_signature": "ReflectionHelper.getParameterizedClassArguments(final DeclaringClassInterfacePair p)", "testcase": false, "constructor": false}, {"identifier": "getParameterizedTypeArguments", "parameters": "(final DeclaringClassInterfacePair p)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getParameterizedTypeArguments(final DeclaringClassInterfacePair p)", "full_signature": "public static Type[] getParameterizedTypeArguments(final DeclaringClassInterfacePair p)", "class_method_signature": "ReflectionHelper.getParameterizedTypeArguments(final DeclaringClassInterfacePair p)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(final Class<?> concrete, final Class<?> iface)", "modifiers": "public static", "return": "DeclaringClassInterfacePair", "signature": "DeclaringClassInterfacePair getClass(final Class<?> concrete, final Class<?> iface)", "full_signature": "public static DeclaringClassInterfacePair getClass(final Class<?> concrete, final Class<?> iface)", "class_method_signature": "ReflectionHelper.getClass(final Class<?> concrete, final Class<?> iface)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(final Class<?> concrete, final Class<?> iface, Class<?> c)", "modifiers": "private static", "return": "DeclaringClassInterfacePair", "signature": "DeclaringClassInterfacePair getClass(final Class<?> concrete, final Class<?> iface, Class<?> c)", "full_signature": "private static DeclaringClassInterfacePair getClass(final Class<?> concrete, final Class<?> iface, Class<?> c)", "class_method_signature": "ReflectionHelper.getClass(final Class<?> concrete, final Class<?> iface, Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type[] ts)", "modifiers": "private static", "return": "DeclaringClassInterfacePair", "signature": "DeclaringClassInterfacePair getType(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type[] ts)", "full_signature": "private static DeclaringClassInterfacePair getType(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type[] ts)", "class_method_signature": "ReflectionHelper.getType(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type[] ts)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type t)", "modifiers": "private static", "return": "DeclaringClassInterfacePair", "signature": "DeclaringClassInterfacePair getType(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type t)", "full_signature": "private static DeclaringClassInterfacePair getType(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type t)", "class_method_signature": "ReflectionHelper.getType(final Class<?> concrete,\n                                                       final Class<?> iface,\n                                                       final Class<?> c,\n                                                       final Type t)", "testcase": false, "constructor": false}, {"identifier": "resolveGenericType", "parameters": "(final Class concreteClass, final Class declaringClass,\n                                                   final Class rawResolvedType, final Type genericResolvedType)", "modifiers": "public static", "return": "ClassTypePair", "signature": "ClassTypePair resolveGenericType(final Class concreteClass, final Class declaringClass,\n                                                   final Class rawResolvedType, final Type genericResolvedType)", "full_signature": "public static ClassTypePair resolveGenericType(final Class concreteClass, final Class declaringClass,\n                                                   final Class rawResolvedType, final Type genericResolvedType)", "class_method_signature": "ReflectionHelper.resolveGenericType(final Class concreteClass, final Class declaringClass,\n                                                   final Class rawResolvedType, final Type genericResolvedType)", "testcase": false, "constructor": false}, {"identifier": "resolveTypeVariable", "parameters": "(final Class<?> c, final Class<?> dc, final TypeVariable tv)", "modifiers": "public static", "return": "ClassTypePair", "signature": "ClassTypePair resolveTypeVariable(final Class<?> c, final Class<?> dc, final TypeVariable tv)", "full_signature": "public static ClassTypePair resolveTypeVariable(final Class<?> c, final Class<?> dc, final TypeVariable tv)", "class_method_signature": "ReflectionHelper.resolveTypeVariable(final Class<?> c, final Class<?> dc, final TypeVariable tv)", "testcase": false, "constructor": false}, {"identifier": "resolveTypeVariable", "parameters": "(final Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "modifiers": "private static", "return": "ClassTypePair", "signature": "ClassTypePair resolveTypeVariable(final Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "full_signature": "private static ClassTypePair resolveTypeVariable(final Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "class_method_signature": "ReflectionHelper.resolveTypeVariable(final Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "testcase": false, "constructor": false}, {"identifier": "resolveTypeVariable", "parameters": "(ParameterizedType pt, Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "modifiers": "private static", "return": "ClassTypePair", "signature": "ClassTypePair resolveTypeVariable(ParameterizedType pt, Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "full_signature": "private static ClassTypePair resolveTypeVariable(ParameterizedType pt, Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "class_method_signature": "ReflectionHelper.resolveTypeVariable(ParameterizedType pt, Class<?> c, final Class<?> dc, final TypeVariable tv,\n                                                     final Map<TypeVariable, Type> map)", "testcase": false, "constructor": false}, {"identifier": "findMethodOnClassPA", "parameters": "(final Class<?> c, final Method m)", "modifiers": "public static", "return": "PrivilegedAction<Method>", "signature": "PrivilegedAction<Method> findMethodOnClassPA(final Class<?> c, final Method m)", "full_signature": "public static PrivilegedAction<Method> findMethodOnClassPA(final Class<?> c, final Method m)", "class_method_signature": "ReflectionHelper.findMethodOnClassPA(final Class<?> c, final Method m)", "testcase": false, "constructor": false}, {"identifier": "getMethodsPA", "parameters": "(final Class<?> c)", "modifiers": "public static", "return": "PrivilegedAction<Method[]>", "signature": "PrivilegedAction<Method[]> getMethodsPA(final Class<?> c)", "full_signature": "public static PrivilegedAction<Method[]> getMethodsPA(final Class<?> c)", "class_method_signature": "ReflectionHelper.getMethodsPA(final Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "_getMethods", "parameters": "(final Class<?> clazz)", "modifiers": "private static", "return": "Method[]", "signature": "Method[] _getMethods(final Class<?> clazz)", "full_signature": "private static Method[] _getMethods(final Class<?> clazz)", "class_method_signature": "ReflectionHelper._getMethods(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "findOverridingMethodOnClass", "parameters": "(final Class<?> clazz, final Method method)", "modifiers": "public static", "return": "Method", "signature": "Method findOverridingMethodOnClass(final Class<?> clazz, final Method method)", "full_signature": "public static Method findOverridingMethodOnClass(final Class<?> clazz, final Method method)", "class_method_signature": "ReflectionHelper.findOverridingMethodOnClass(final Class<?> clazz, final Method method)", "testcase": false, "constructor": false}, {"identifier": "compareParameterTypes", "parameters": "(final Type[] ts, final Type[] _ts)", "modifiers": "private static", "return": "boolean", "signature": "boolean compareParameterTypes(final Type[] ts, final Type[] _ts)", "full_signature": "private static boolean compareParameterTypes(final Type[] ts, final Type[] _ts)", "class_method_signature": "ReflectionHelper.compareParameterTypes(final Type[] ts, final Type[] _ts)", "testcase": false, "constructor": false}, {"identifier": "compareParameterTypes", "parameters": "(final Type ts, final Type _ts)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "boolean", "signature": "boolean compareParameterTypes(final Type ts, final Type _ts)", "full_signature": "@SuppressWarnings(\"unchecked\") private static boolean compareParameterTypes(final Type ts, final Type _ts)", "class_method_signature": "ReflectionHelper.compareParameterTypes(final Type ts, final Type _ts)", "testcase": false, "constructor": false}, {"identifier": "checkTypeBounds", "parameters": "(final Class type, final Type[] bounds)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "boolean", "signature": "boolean checkTypeBounds(final Class type, final Type[] bounds)", "full_signature": "@SuppressWarnings(\"unchecked\") private static boolean checkTypeBounds(final Class type, final Type[] bounds)", "class_method_signature": "ReflectionHelper.checkTypeBounds(final Class type, final Type[] bounds)", "testcase": false, "constructor": false}, {"identifier": "getOsgiRegistryInstance", "parameters": "()", "modifiers": "public static", "return": "OsgiRegistry", "signature": "OsgiRegistry getOsgiRegistryInstance()", "full_signature": "public static OsgiRegistry getOsgiRegistryInstance()", "class_method_signature": "ReflectionHelper.getOsgiRegistryInstance()", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(final ClassLoader loader, final Class<?> originClass, final String name)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream(final ClassLoader loader, final Class<?> originClass, final String name)", "full_signature": "public static InputStream getResourceAsStream(final ClassLoader loader, final Class<?> originClass, final String name)", "class_method_signature": "ReflectionHelper.getResourceAsStream(final ClassLoader loader, final Class<?> originClass, final String name)", "testcase": false, "constructor": false}, {"identifier": "getRawClass", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getRawClass(Type type)", "full_signature": "public static Class<?> getRawClass(Type type)", "class_method_signature": "ReflectionHelper.getRawClass(Type type)", "testcase": false, "constructor": false}], "file": "core-common/src/main/java/org/glassfish/jersey/internal/util/ReflectionHelper.java"}, "focal_method": {"identifier": "setContextClassLoaderPA", "parameters": "(final ClassLoader classLoader)", "modifiers": "public static", "return": "PrivilegedAction", "body": "public static PrivilegedAction setContextClassLoaderPA(final ClassLoader classLoader) {\n        return new PrivilegedAction() {\n            @Override\n            public Object run() {\n                Thread.currentThread().setContextClassLoader(classLoader);\n                return null;\n            }\n        };\n    }", "signature": "PrivilegedAction setContextClassLoaderPA(final ClassLoader classLoader)", "full_signature": "public static PrivilegedAction setContextClassLoaderPA(final ClassLoader classLoader)", "class_method_signature": "ReflectionHelper.setContextClassLoaderPA(final ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["setContextClassLoader", "currentThread"]}, "repository": {"repo_id": 4368712, "url": "https://github.com/jersey/jersey", "language": "Java", "is_fork": false, "fork_count": 2540, "stargazer_count": 2919, "size": 38964, "license": "licensed"}}