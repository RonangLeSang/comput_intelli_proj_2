{"test_class": {"identifier": "Base64Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String[] decoded = new String[] {\n            \"any carnal pleasure.\",\n            \"any carnal pleasure\",\n            \"any carnal pleasur\",\n            \"any carnal pleasu\",\n            \"any carnal pleas\"\n    };", "modifier": "private static", "type": "String[]", "declarator": "decoded = new String[] {\n            \"any carnal pleasure.\",\n            \"any carnal pleasure\",\n            \"any carnal pleasur\",\n            \"any carnal pleasu\",\n            \"any carnal pleas\"\n    }", "var_name": "decoded"}, {"original_string": "private static String[] encoded = new String[] {\n            \"YW55IGNhcm5hbCBwbGVhc3VyZS4=\",\n            \"YW55IGNhcm5hbCBwbGVhc3VyZQ==\",\n            \"YW55IGNhcm5hbCBwbGVhc3Vy\",\n            \"YW55IGNhcm5hbCBwbGVhc3U=\",\n            \"YW55IGNhcm5hbCBwbGVhcw==\"\n    };", "modifier": "private static", "type": "String[]", "declarator": "encoded = new String[] {\n            \"YW55IGNhcm5hbCBwbGVhc3VyZS4=\",\n            \"YW55IGNhcm5hbCBwbGVhc3VyZQ==\",\n            \"YW55IGNhcm5hbCBwbGVhc3Vy\",\n            \"YW55IGNhcm5hbCBwbGVhc3U=\",\n            \"YW55IGNhcm5hbCBwbGVhcw==\"\n    }", "var_name": "encoded"}], "file": "core-common/src/test/java/org/glassfish/jersey/internal/util/Base64Test.java"}, "test_case": {"identifier": "testEncodeByteArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeByteArray() {\n        byte[] data = new byte[256];\n        for (int i = 0; i < 256; ++i) {\n            data[i] = (byte) (255 - i);\n        }\n        try {\n            new String(Base64.encode(data));\n            fail();\n        } catch (Exception e) {\n            // ok\n        }\n    }", "signature": "void testEncodeByteArray()", "full_signature": "@Test public void testEncodeByteArray()", "class_method_signature": "Base64Test.testEncodeByteArray()", "testcase": true, "constructor": false, "invocations": ["encode", "fail"]}, "focal_class": {"identifier": "Base64", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] CHAR_SET;", "modifier": "private static final", "type": "byte[]", "declarator": "CHAR_SET", "var_name": "CHAR_SET"}, {"original_string": "private static final byte[] BASE64INDEXES = {\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63,\n            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64,\n            64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64,\n            64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "BASE64INDEXES = {\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63,\n            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64,\n            64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64,\n            64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64\n    }", "var_name": "BASE64INDEXES"}], "methods": [{"identifier": "encode", "parameters": "(final byte[] buffer)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encode(final byte[] buffer)", "full_signature": "public static byte[] encode(final byte[] buffer)", "class_method_signature": "Base64.encode(final byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final byte[] buffer)", "modifiers": "@SuppressWarnings(\"fallthrough\") public static", "return": "byte[]", "signature": "byte[] decode(final byte[] buffer)", "full_signature": "@SuppressWarnings(\"fallthrough\") public static byte[] decode(final byte[] buffer)", "class_method_signature": "Base64.decode(final byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "encodeAsString", "parameters": "(final byte[] buffer)", "modifiers": "public static", "return": "String", "signature": "String encodeAsString(final byte[] buffer)", "full_signature": "public static String encodeAsString(final byte[] buffer)", "class_method_signature": "Base64.encodeAsString(final byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "encodeAsString", "parameters": "(final String text)", "modifiers": "public static", "return": "String", "signature": "String encodeAsString(final String text)", "full_signature": "public static String encodeAsString(final String text)", "class_method_signature": "Base64.encodeAsString(final String text)", "testcase": false, "constructor": false}, {"identifier": "decodeAsString", "parameters": "(final byte[] buffer)", "modifiers": "public static", "return": "String", "signature": "String decodeAsString(final byte[] buffer)", "full_signature": "public static String decodeAsString(final byte[] buffer)", "class_method_signature": "Base64.decodeAsString(final byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "decodeAsString", "parameters": "(final String text)", "modifiers": "public static", "return": "String", "signature": "String decodeAsString(final String text)", "full_signature": "public static String decodeAsString(final String text)", "class_method_signature": "Base64.decodeAsString(final String text)", "testcase": false, "constructor": false}], "file": "core-common/src/main/java/org/glassfish/jersey/internal/util/Base64.java"}, "focal_method": {"identifier": "encode", "parameters": "(final byte[] buffer)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] encode(final byte[] buffer) {\n        final int ccount = buffer.length / 3;\n        final int rest = buffer.length % 3;\n        final byte[] result = new byte[(ccount + (rest > 0 ? 1 : 0)) * 4];\n\n        for (int i = 0; i < ccount; i++) {\n            result[i * 4] = CHAR_SET[(buffer[i * 3] >> 2) & 0xff];\n            result[i * 4 + 1] = CHAR_SET[(((buffer[i * 3] & 0x03) << 4) | (buffer[i * 3 + 1] >> 4)) & 0xff];\n            result[i * 4 + 2] = CHAR_SET[(((buffer[i * 3 + 1] & 0x0f) << 2) | (buffer[i * 3 + 2] >> 6)) & 0xff];\n            result[i * 4 + 3] = CHAR_SET[buffer[i * 3 + 2] & 0x3f];\n        }\n\n        int temp = 0;\n\n        if (rest > 0) {\n            if (rest == 2) {\n                result[ccount * 4 + 2] = CHAR_SET[((buffer[ccount * 3 + 1] & 0x0f) << 2) & 0xff];\n                temp = buffer[ccount * 3 + 1] >> 4;\n            } else {\n                result[ccount * 4 + 2] = CHAR_SET[CHAR_SET.length - 1];\n            }\n            result[ccount * 4 + 3] = CHAR_SET[CHAR_SET.length - 1];\n            result[ccount * 4 + 1] = CHAR_SET[(((buffer[ccount * 3] & 0x03) << 4) | temp) & 0xff];\n            result[ccount * 4] = CHAR_SET[(buffer[ccount * 3] >> 2) & 0xff];\n        }\n\n        return result;\n    }", "signature": "byte[] encode(final byte[] buffer)", "full_signature": "public static byte[] encode(final byte[] buffer)", "class_method_signature": "Base64.encode(final byte[] buffer)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4368712, "url": "https://github.com/jersey/jersey", "language": "Java", "is_fork": false, "fork_count": 2540, "stargazer_count": 2919, "size": 38964, "license": "licensed"}}