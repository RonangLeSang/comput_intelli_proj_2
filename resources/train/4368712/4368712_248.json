{"test_class": {"identifier": "UriTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> count = Arrays.asList(\"one\", \"two\", \"three\");", "modifier": "private static final", "type": "List<String>", "declarator": "count = Arrays.asList(\"one\", \"two\", \"three\")", "var_name": "count"}, {"original_string": "private static final List<String> dom = Arrays.asList(\"example\", \"com\");", "modifier": "private static final", "type": "List<String>", "declarator": "dom = Arrays.asList(\"example\", \"com\")", "var_name": "dom"}, {"original_string": "private static final String dub = \"me/too\";", "modifier": "private static final", "type": "String", "declarator": "dub = \"me/too\"", "var_name": "dub"}, {"original_string": "private static final String hello = \"Hello World!\";", "modifier": "private static final", "type": "String", "declarator": "hello = \"Hello World!\"", "var_name": "hello"}, {"original_string": "private static final String half = \"50%\";", "modifier": "private static final", "type": "String", "declarator": "half = \"50%\"", "var_name": "half"}, {"original_string": "private static final String var = \"value\";", "modifier": "private static final", "type": "String", "declarator": "var = \"value\"", "var_name": "var"}, {"original_string": "private static final String who = \"fred\";", "modifier": "private static final", "type": "String", "declarator": "who = \"fred\"", "var_name": "who"}, {"original_string": "private static final String base = \"http://example.com/home/\";", "modifier": "private static final", "type": "String", "declarator": "base = \"http://example.com/home/\"", "var_name": "base"}, {"original_string": "private static final String path = \"/foo/bar\";", "modifier": "private static final", "type": "String", "declarator": "path = \"/foo/bar\"", "var_name": "path"}, {"original_string": "private static final List<String> list = Arrays.asList(\"red\", \"green\", \"blue\");", "modifier": "private static final", "type": "List<String>", "declarator": "list = Arrays.asList(\"red\", \"green\", \"blue\")", "var_name": "list"}, {"original_string": "private static final Map<String, String> keys = new HashMap<String, String>() {{\n        put(\"semi\", \";\");\n        put(\"dot\", \".\");\n        put(\"comma\", \",\");\n    }};", "modifier": "private static final", "type": "Map<String, String>", "declarator": "keys = new HashMap<String, String>() {{\n        put(\"semi\", \";\");\n        put(\"dot\", \".\");\n        put(\"comma\", \",\");\n    }}", "var_name": "keys"}, {"original_string": "private static final String v = \"6\";", "modifier": "private static final", "type": "String", "declarator": "v = \"6\"", "var_name": "v"}, {"original_string": "private static final String x = \"1024\";", "modifier": "private static final", "type": "String", "declarator": "x = \"1024\"", "var_name": "x"}, {"original_string": "private static final String y = \"768\";", "modifier": "private static final", "type": "String", "declarator": "y = \"768\"", "var_name": "y"}, {"original_string": "private static final String empty = \"\";", "modifier": "private static final", "type": "String", "declarator": "empty = \"\"", "var_name": "empty"}, {"original_string": "private static final Map<String, String> emptyKeys = Collections.emptyMap();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "emptyKeys = Collections.emptyMap()", "var_name": "emptyKeys"}], "file": "core-common/src/test/java/org/glassfish/jersey/uri/UriTemplateTest.java"}, "test_case": {"identifier": "testOrderDuplicitParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOrderDuplicitParams() {\n        final List<UriTemplate> l = new ArrayList<UriTemplate>();\n\n        l.add(new UriTemplate(\"/{a}\"));\n        l.add(new UriTemplate(\"/{a}/{a}\"));\n\n        Collections.sort(l, UriTemplate.COMPARATOR);\n\n        assertEquals(new UriTemplate(\"/{a}/{a}\").getTemplate(),\n                l.get(0).getTemplate());\n        assertEquals(new UriTemplate(\"/{a}\").getTemplate(),\n                l.get(1).getTemplate());\n    }", "signature": "void testOrderDuplicitParams()", "full_signature": "@Test public void testOrderDuplicitParams()", "class_method_signature": "UriTemplateTest.testOrderDuplicitParams()", "testcase": true, "constructor": false, "invocations": ["add", "add", "sort", "assertEquals", "getTemplate", "getTemplate", "get", "assertEquals", "getTemplate", "getTemplate", "get"]}, "focal_class": {"identifier": "UriTemplate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] EMPTY_VALUES = new String[0];", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_VALUES = new String[0]", "var_name": "EMPTY_VALUES"}, {"original_string": "public static final Comparator<UriTemplate> COMPARATOR = new Comparator<UriTemplate>() {\n\n        @Override\n        public int compare(UriTemplate o1, UriTemplate o2) {\n            if (o1 == null && o2 == null) {\n                return 0;\n            }\n            if (o1 == null) {\n                return 1;\n            }\n            if (o2 == null) {\n                return -1;\n            }\n\n            if (o1 == EMPTY && o2 == EMPTY) {\n                return 0;\n            }\n            if (o1 == EMPTY) {\n                return 1;\n            }\n            if (o2 == EMPTY) {\n                return -1;\n            }\n\n            // Compare the number of explicit characters\n            // Note that it is important that o2 is compared against o1\n            // so that a regular expression with say 10 explicit characters\n            // is less than a regular expression with say 5 explicit characters.\n            int i = o2.getNumberOfExplicitCharacters() - o1.getNumberOfExplicitCharacters();\n            if (i != 0) {\n                return i;\n            }\n\n            // If the number of explicit characters is equal\n            // compare the number of template variables\n            // Note that it is important that o2 is compared against o1\n            // so that a regular expression with say 10 template variables\n            // is less than a regular expression with say 5 template variables.\n            i = o2.getNumberOfTemplateVariables() - o1.getNumberOfTemplateVariables();\n            if (i != 0) {\n                return i;\n            }\n\n            // If the number of template variables is equal\n            // compare the number of explicit regexes\n            i = o2.getNumberOfExplicitRegexes() - o1.getNumberOfExplicitRegexes();\n            if (i != 0) {\n                return i;\n            }\n\n            // If the number of explicit characters and template variables\n            // are equal then comapre the regexes\n            // The order does not matter as long as templates with different\n            // explicit characters are distinguishable\n            return o2.pattern.getRegex().compareTo(o1.pattern.getRegex());\n        }\n    };", "modifier": "public static final", "type": "Comparator<UriTemplate>", "declarator": "COMPARATOR = new Comparator<UriTemplate>() {\n\n        @Override\n        public int compare(UriTemplate o1, UriTemplate o2) {\n            if (o1 == null && o2 == null) {\n                return 0;\n            }\n            if (o1 == null) {\n                return 1;\n            }\n            if (o2 == null) {\n                return -1;\n            }\n\n            if (o1 == EMPTY && o2 == EMPTY) {\n                return 0;\n            }\n            if (o1 == EMPTY) {\n                return 1;\n            }\n            if (o2 == EMPTY) {\n                return -1;\n            }\n\n            // Compare the number of explicit characters\n            // Note that it is important that o2 is compared against o1\n            // so that a regular expression with say 10 explicit characters\n            // is less than a regular expression with say 5 explicit characters.\n            int i = o2.getNumberOfExplicitCharacters() - o1.getNumberOfExplicitCharacters();\n            if (i != 0) {\n                return i;\n            }\n\n            // If the number of explicit characters is equal\n            // compare the number of template variables\n            // Note that it is important that o2 is compared against o1\n            // so that a regular expression with say 10 template variables\n            // is less than a regular expression with say 5 template variables.\n            i = o2.getNumberOfTemplateVariables() - o1.getNumberOfTemplateVariables();\n            if (i != 0) {\n                return i;\n            }\n\n            // If the number of template variables is equal\n            // compare the number of explicit regexes\n            i = o2.getNumberOfExplicitRegexes() - o1.getNumberOfExplicitRegexes();\n            if (i != 0) {\n                return i;\n            }\n\n            // If the number of explicit characters and template variables\n            // are equal then comapre the regexes\n            // The order does not matter as long as templates with different\n            // explicit characters are distinguishable\n            return o2.pattern.getRegex().compareTo(o1.pattern.getRegex());\n        }\n    }", "var_name": "COMPARATOR"}, {"original_string": "private static final Pattern TEMPLATE_NAMES_PATTERN = Pattern.compile(\"\\\\{([\\\\w\\\\?;][-\\\\w\\\\.,]*)\\\\}\");", "modifier": "private static final", "type": "Pattern", "declarator": "TEMPLATE_NAMES_PATTERN = Pattern.compile(\"\\\\{([\\\\w\\\\?;][-\\\\w\\\\.,]*)\\\\}\")", "var_name": "TEMPLATE_NAMES_PATTERN"}, {"original_string": "public static final UriTemplate EMPTY = new UriTemplate();", "modifier": "public static final", "type": "UriTemplate", "declarator": "EMPTY = new UriTemplate()", "var_name": "EMPTY"}, {"original_string": "private final String template;", "modifier": "private final", "type": "String", "declarator": "template", "var_name": "template"}, {"original_string": "private final String normalizedTemplate;", "modifier": "private final", "type": "String", "declarator": "normalizedTemplate", "var_name": "normalizedTemplate"}, {"original_string": "private final PatternWithGroups pattern;", "modifier": "private final", "type": "PatternWithGroups", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private final boolean endsWithSlash;", "modifier": "private final", "type": "boolean", "declarator": "endsWithSlash", "var_name": "endsWithSlash"}, {"original_string": "private final List<String> templateVariables;", "modifier": "private final", "type": "List<String>", "declarator": "templateVariables", "var_name": "templateVariables"}, {"original_string": "private final int numOfExplicitRegexes;", "modifier": "private final", "type": "int", "declarator": "numOfExplicitRegexes", "var_name": "numOfExplicitRegexes"}, {"original_string": "private final int numOfRegexGroups;", "modifier": "private final", "type": "int", "declarator": "numOfRegexGroups", "var_name": "numOfRegexGroups"}, {"original_string": "private final int numOfCharacters;", "modifier": "private final", "type": "int", "declarator": "numOfCharacters", "var_name": "numOfCharacters"}], "methods": [{"identifier": "UriTemplate", "parameters": "()", "modifiers": "private", "return": "", "signature": " UriTemplate()", "full_signature": "private  UriTemplate()", "class_method_signature": "UriTemplate.UriTemplate()", "testcase": false, "constructor": true}, {"identifier": "UriTemplate", "parameters": "(String template)", "modifiers": "@SuppressWarnings(\"DuplicateThrows\") public", "return": "", "signature": " UriTemplate(String template)", "full_signature": "@SuppressWarnings(\"DuplicateThrows\") public  UriTemplate(String template)", "class_method_signature": "UriTemplate.UriTemplate(String template)", "testcase": false, "constructor": true}, {"identifier": "UriTemplate", "parameters": "(UriTemplateParser templateParser)", "modifiers": "@SuppressWarnings(\"DuplicateThrows\") protected", "return": "", "signature": " UriTemplate(UriTemplateParser templateParser)", "full_signature": "@SuppressWarnings(\"DuplicateThrows\") protected  UriTemplate(UriTemplateParser templateParser)", "class_method_signature": "UriTemplate.UriTemplate(UriTemplateParser templateParser)", "testcase": false, "constructor": true}, {"identifier": "initUriPattern", "parameters": "(UriTemplateParser templateParser)", "modifiers": "private static", "return": "PatternWithGroups", "signature": "PatternWithGroups initUriPattern(UriTemplateParser templateParser)", "full_signature": "private static PatternWithGroups initUriPattern(UriTemplateParser templateParser)", "class_method_signature": "UriTemplate.initUriPattern(UriTemplateParser templateParser)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI baseUri, String refUri)", "modifiers": "public static", "return": "URI", "signature": "URI resolve(final URI baseUri, String refUri)", "full_signature": "public static URI resolve(final URI baseUri, String refUri)", "class_method_signature": "UriTemplate.resolve(final URI baseUri, String refUri)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI baseUri, URI refUri)", "modifiers": "public static", "return": "URI", "signature": "URI resolve(final URI baseUri, URI refUri)", "full_signature": "public static URI resolve(final URI baseUri, URI refUri)", "class_method_signature": "UriTemplate.resolve(final URI baseUri, URI refUri)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(final String uri)", "modifiers": "public static", "return": "URI", "signature": "URI normalize(final String uri)", "full_signature": "public static URI normalize(final String uri)", "class_method_signature": "UriTemplate.normalize(final String uri)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(final URI uri)", "modifiers": "public static", "return": "URI", "signature": "URI normalize(final URI uri)", "full_signature": "public static URI normalize(final URI uri)", "class_method_signature": "UriTemplate.normalize(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "relativize", "parameters": "(URI baseUri, URI refUri)", "modifiers": "public static", "return": "URI", "signature": "URI relativize(URI baseUri, URI refUri)", "full_signature": "public static URI relativize(URI baseUri, URI refUri)", "class_method_signature": "UriTemplate.relativize(URI baseUri, URI refUri)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getTemplate()", "full_signature": "public final String getTemplate()", "class_method_signature": "UriTemplate.getTemplate()", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public final", "return": "PatternWithGroups", "signature": "PatternWithGroups getPattern()", "full_signature": "public final PatternWithGroups getPattern()", "class_method_signature": "UriTemplate.getPattern()", "testcase": false, "constructor": false}, {"identifier": "endsWithSlash", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public final", "return": "boolean", "signature": "boolean endsWithSlash()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public final boolean endsWithSlash()", "class_method_signature": "UriTemplate.endsWithSlash()", "testcase": false, "constructor": false}, {"identifier": "getTemplateVariables", "parameters": "()", "modifiers": "public final", "return": "List<String>", "signature": "List<String> getTemplateVariables()", "full_signature": "public final List<String> getTemplateVariables()", "class_method_signature": "UriTemplate.getTemplateVariables()", "testcase": false, "constructor": false}, {"identifier": "isTemplateVariablePresent", "parameters": "(String name)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public final", "return": "boolean", "signature": "boolean isTemplateVariablePresent(String name)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public final boolean isTemplateVariablePresent(String name)", "class_method_signature": "UriTemplate.isTemplateVariablePresent(String name)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfExplicitRegexes", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getNumberOfExplicitRegexes()", "full_signature": "public final int getNumberOfExplicitRegexes()", "class_method_signature": "UriTemplate.getNumberOfExplicitRegexes()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfRegexGroups", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getNumberOfRegexGroups()", "full_signature": "public final int getNumberOfRegexGroups()", "class_method_signature": "UriTemplate.getNumberOfRegexGroups()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfExplicitCharacters", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getNumberOfExplicitCharacters()", "full_signature": "public final int getNumberOfExplicitCharacters()", "class_method_signature": "UriTemplate.getNumberOfExplicitCharacters()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfTemplateVariables", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getNumberOfTemplateVariables()", "full_signature": "public final int getNumberOfTemplateVariables()", "class_method_signature": "UriTemplate.getNumberOfTemplateVariables()", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(CharSequence uri, Map<String, String> templateVariableToValue)", "modifiers": "public final", "return": "boolean", "signature": "boolean match(CharSequence uri, Map<String, String> templateVariableToValue)", "full_signature": "public final boolean match(CharSequence uri, Map<String, String> templateVariableToValue)", "class_method_signature": "UriTemplate.match(CharSequence uri, Map<String, String> templateVariableToValue)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(CharSequence uri, List<String> groupValues)", "modifiers": "public final", "return": "boolean", "signature": "boolean match(CharSequence uri, List<String> groupValues)", "full_signature": "public final boolean match(CharSequence uri, List<String> groupValues)", "class_method_signature": "UriTemplate.match(CharSequence uri, List<String> groupValues)", "testcase": false, "constructor": false}, {"identifier": "createURI", "parameters": "(final Map<String, String> values)", "modifiers": "public final", "return": "String", "signature": "String createURI(final Map<String, String> values)", "full_signature": "public final String createURI(final Map<String, String> values)", "class_method_signature": "UriTemplate.createURI(final Map<String, String> values)", "testcase": false, "constructor": false}, {"identifier": "createURI", "parameters": "(String... values)", "modifiers": "public final", "return": "String", "signature": "String createURI(String... values)", "full_signature": "public final String createURI(String... values)", "class_method_signature": "UriTemplate.createURI(String... values)", "testcase": false, "constructor": false}, {"identifier": "createURI", "parameters": "(final String[] values, final int offset, final int length)", "modifiers": "public final", "return": "String", "signature": "String createURI(final String[] values, final int offset, final int length)", "full_signature": "public final String createURI(final String[] values, final int offset, final int length)", "class_method_signature": "UriTemplate.createURI(final String[] values, final int offset, final int length)", "testcase": false, "constructor": false}, {"identifier": "resolveTemplate", "parameters": "(\n            String normalizedTemplate,\n            StringBuilder builder,\n            TemplateValueStrategy valueStrategy)", "modifiers": "private static", "return": "void", "signature": "void resolveTemplate(\n            String normalizedTemplate,\n            StringBuilder builder,\n            TemplateValueStrategy valueStrategy)", "full_signature": "private static void resolveTemplate(\n            String normalizedTemplate,\n            StringBuilder builder,\n            TemplateValueStrategy valueStrategy)", "class_method_signature": "UriTemplate.resolveTemplate(\n            String normalizedTemplate,\n            StringBuilder builder,\n            TemplateValueStrategy valueStrategy)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "UriTemplate.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "UriTemplate.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public final boolean equals(Object o)", "class_method_signature": "UriTemplate.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "createURI", "parameters": "(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "modifiers": "public static", "return": "String", "signature": "String createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "full_signature": "public static String createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "class_method_signature": "UriTemplate.createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "testcase": false, "constructor": false}, {"identifier": "createURIWithStringValues", "parameters": "(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "modifiers": "public static", "return": "String", "signature": "String createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "full_signature": "public static String createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "class_method_signature": "UriTemplate.createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ?> values, final boolean encode, final boolean encodeSlashInPath)", "testcase": false, "constructor": false}, {"identifier": "createURI", "parameters": "(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Object[] values, final boolean encode, final boolean encodeSlashInPath)", "modifiers": "public static", "return": "String", "signature": "String createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Object[] values, final boolean encode, final boolean encodeSlashInPath)", "full_signature": "public static String createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Object[] values, final boolean encode, final boolean encodeSlashInPath)", "class_method_signature": "UriTemplate.createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Object[] values, final boolean encode, final boolean encodeSlashInPath)", "testcase": false, "constructor": false}, {"identifier": "createURIWithStringValues", "parameters": "(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final String[] values, final boolean encode, final boolean encodeSlashInPath)", "modifiers": "public static", "return": "String", "signature": "String createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final String[] values, final boolean encode, final boolean encodeSlashInPath)", "full_signature": "public static String createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final String[] values, final boolean encode, final boolean encodeSlashInPath)", "class_method_signature": "UriTemplate.createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final String[] values, final boolean encode, final boolean encodeSlashInPath)", "testcase": false, "constructor": false}, {"identifier": "createURIWithStringValues", "parameters": "(\n            final String scheme, final String authority, final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment, final String[] values, final boolean encode,\n            final boolean encodeSlashInPath, final Map<String, ?> mapValues)", "modifiers": "private static", "return": "String", "signature": "String createURIWithStringValues(\n            final String scheme, final String authority, final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment, final String[] values, final boolean encode,\n            final boolean encodeSlashInPath, final Map<String, ?> mapValues)", "full_signature": "private static String createURIWithStringValues(\n            final String scheme, final String authority, final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment, final String[] values, final boolean encode,\n            final boolean encodeSlashInPath, final Map<String, ?> mapValues)", "class_method_signature": "UriTemplate.createURIWithStringValues(\n            final String scheme, final String authority, final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment, final String[] values, final boolean encode,\n            final boolean encodeSlashInPath, final Map<String, ?> mapValues)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(String string)", "modifiers": "private static", "return": "boolean", "signature": "boolean notEmpty(String string)", "full_signature": "private static boolean notEmpty(String string)", "class_method_signature": "UriTemplate.notEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "createUriComponent", "parameters": "(final UriComponent.Type componentType,\n                                          String template,\n                                          final String[] values,\n                                          final int valueOffset,\n                                          final boolean encode,\n                                          final Map<String, ?> _mapValues,\n                                          final StringBuilder b)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "int", "signature": "int createUriComponent(final UriComponent.Type componentType,\n                                          String template,\n                                          final String[] values,\n                                          final int valueOffset,\n                                          final boolean encode,\n                                          final Map<String, ?> _mapValues,\n                                          final StringBuilder b)", "full_signature": "@SuppressWarnings(\"unchecked\") private static int createUriComponent(final UriComponent.Type componentType,\n                                          String template,\n                                          final String[] values,\n                                          final int valueOffset,\n                                          final boolean encode,\n                                          final Map<String, ?> _mapValues,\n                                          final StringBuilder b)", "class_method_signature": "UriTemplate.createUriComponent(final UriComponent.Type componentType,\n                                          String template,\n                                          final String[] values,\n                                          final int valueOffset,\n                                          final boolean encode,\n                                          final Map<String, ?> _mapValues,\n                                          final StringBuilder b)", "testcase": false, "constructor": false}, {"identifier": "resolveTemplateValues", "parameters": "(final UriComponent.Type type,\n                                               String template,\n                                               final boolean encode,\n                                               final Map<String, ?> _mapValues)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "String", "signature": "String resolveTemplateValues(final UriComponent.Type type,\n                                               String template,\n                                               final boolean encode,\n                                               final Map<String, ?> _mapValues)", "full_signature": "@SuppressWarnings(\"unchecked\") public static String resolveTemplateValues(final UriComponent.Type type,\n                                               String template,\n                                               final boolean encode,\n                                               final Map<String, ?> _mapValues)", "class_method_signature": "UriTemplate.resolveTemplateValues(final UriComponent.Type type,\n                                               String template,\n                                               final boolean encode,\n                                               final Map<String, ?> _mapValues)", "testcase": false, "constructor": false}], "file": "core-common/src/main/java/org/glassfish/jersey/uri/UriTemplate.java"}, "focal_method": {"identifier": "getTemplate", "parameters": "()", "modifiers": "public final", "return": "String", "body": "public final String getTemplate() {\n        return template;\n    }", "signature": "String getTemplate()", "full_signature": "public final String getTemplate()", "class_method_signature": "UriTemplate.getTemplate()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4368712, "url": "https://github.com/jersey/jersey", "language": "Java", "is_fork": false, "fork_count": 2540, "stargazer_count": 2919, "size": 38964, "license": "licensed"}}