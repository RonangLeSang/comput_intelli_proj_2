{"test_class": {"identifier": "FeedEntriesAtomBodyWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Date DATE = new Date();", "modifier": "private static final", "type": "Date", "declarator": "DATE = new Date()", "var_name": "DATE"}, {"original_string": "private static final String[] TITLES = {\"title1\", \"title2\"};", "modifier": "private static final", "type": "String[]", "declarator": "TITLES = {\"title1\", \"title2\"}", "var_name": "TITLES"}, {"original_string": "private static final String[] LINKS = {\"link1\", \"link2\"};", "modifier": "private static final", "type": "String[]", "declarator": "LINKS = {\"link1\", \"link2\"}", "var_name": "LINKS"}, {"original_string": "private static final String[] DESCS = {\"description1\", \"description2\"};", "modifier": "private static final", "type": "String[]", "declarator": "DESCS = {\"description1\", \"description2\"}", "var_name": "DESCS"}, {"original_string": "@Rule\n    public EasyMockRule mocks = new EasyMockRule(this);", "modifier": "@Rule\n    public", "type": "EasyMockRule", "declarator": "mocks = new EasyMockRule(this)", "var_name": "mocks"}, {"original_string": "@TestSubject\n    private FeedEntriesAtomBodyWriter testedClass = new FeedEntriesAtomBodyWriter();", "modifier": "@TestSubject\n    private", "type": "FeedEntriesAtomBodyWriter", "declarator": "testedClass = new FeedEntriesAtomBodyWriter()", "var_name": "testedClass"}], "file": "examples/feed-combiner-java8-webapp/src/test/java/org/glassfish/jersey/examples/feedcombiner/provider/FeedEntriesAtomBodyWriterTest.java"}, "test_case": {"identifier": "testWriteTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteTo() throws Exception {\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        testedClass.writeTo(feedEntries(), null, null, null, null, null, outputStream);\n\n        SyndFeedInput input = new SyndFeedInput();\n        InputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n        SyndFeed feed = input.build(new InputSource(inputStream));\n\n        feed.setFeedType(\"atom_1.0\");\n        feed.setTitle(\"Combined Feed\");\n        feed.setDescription(\"Combined Feed created by a feed-combiner application\");\n\n        assertEquals(\"atom_1.0\", feed.getFeedType());\n        assertEquals(\"Combined Feed\", feed.getTitle());\n        assertEquals(\"Combined Feed created by a feed-combiner application\", feed.getDescription());\n\n        @SuppressWarnings(\"unchecked\")\n        List<SyndEntry> entries = feed.getEntries();\n        assertEquals(2, entries.size());\n        for (SyndEntry entry : entries) {\n            if (TITLES[0].equals(entry.getTitle())) {\n                assertEquals(entry.getLink(), LINKS[0]);\n                assertEquals(entry.getTitle(), TITLES[0]);\n                assertEquals(entry.getDescription().getValue(), DESCS[0]);\n                assertEquals(entry.getPublishedDate().toString(), DATE.toString());\n            } else {\n                assertEquals(entry.getLink(), LINKS[1]);\n                assertEquals(entry.getTitle(), TITLES[1]);\n                assertEquals(entry.getDescription().getValue(), DESCS[1]);\n                assertEquals(entry.getPublishedDate().toString(), DATE.toString());\n            }\n        }\n    }", "signature": "void testWriteTo()", "full_signature": "@Test public void testWriteTo()", "class_method_signature": "FeedEntriesAtomBodyWriterTest.testWriteTo()", "testcase": true, "constructor": false, "invocations": ["writeTo", "feedEntries", "toByteArray", "build", "setFeedType", "setTitle", "setDescription", "assertEquals", "getFeedType", "assertEquals", "getTitle", "assertEquals", "getDescription", "getEntries", "assertEquals", "size", "equals", "getTitle", "assertEquals", "getLink", "assertEquals", "getTitle", "assertEquals", "getValue", "getDescription", "assertEquals", "toString", "getPublishedDate", "toString", "assertEquals", "getLink", "assertEquals", "getTitle", "assertEquals", "getValue", "getDescription", "assertEquals", "toString", "getPublishedDate", "toString"]}, "focal_class": {"identifier": "FeedEntriesAtomBodyWriter", "superclass": "", "interfaces": "implements MessageBodyWriter<List<FeedEntry>>", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(FeedEntriesAtomBodyWriter.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FeedEntriesAtomBodyWriter.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "FeedEntriesAtomBodyWriter.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "full_signature": "@Override public void writeTo(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "class_method_signature": "FeedEntriesAtomBodyWriter.writeTo(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(List<FeedEntry> feeds, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(List<FeedEntry> feeds, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(List<FeedEntry> feeds, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "FeedEntriesAtomBodyWriter.getSize(List<FeedEntry> feeds, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeSyndFeed", "parameters": "(OutputStream entityStream, SyndFeed feed)", "modifiers": "private", "return": "void", "signature": "void writeSyndFeed(OutputStream entityStream, SyndFeed feed)", "full_signature": "private void writeSyndFeed(OutputStream entityStream, SyndFeed feed)", "class_method_signature": "FeedEntriesAtomBodyWriter.writeSyndFeed(OutputStream entityStream, SyndFeed feed)", "testcase": false, "constructor": false}], "file": "examples/feed-combiner-java8-webapp/src/main/java/org/glassfish/jersey/examples/feedcombiner/provider/FeedEntriesAtomBodyWriter.java"}, "focal_method": {"identifier": "writeTo", "parameters": "(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeTo(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)\n            throws IOException, WebApplicationException {\n\n        List<SyndEntry> syndEntries = entries.parallelStream().map(entry -> {\n            SyndContent description = new SyndContentImpl();\n            description.setType(MediaType.TEXT_PLAIN);\n            description.setValue(entry.getDescription());\n\n            SyndEntry syndEntry = new SyndEntryImpl();\n            syndEntry.setTitle(entry.getTitle());\n            syndEntry.setLink(entry.getLink());\n            syndEntry.setPublishedDate(entry.getPublishDate());\n            syndEntry.setDescription(description);\n            return syndEntry;\n        }).collect(Collectors.toList());\n\n        SyndFeed feed = new SyndFeedImpl();\n        feed.setFeedType(\"atom_1.0\");\n        feed.setTitle(\"Combined Feed\");\n        feed.setDescription(\"Combined Feed created by a feed-combiner application\");\n        feed.setPublishedDate(new Date());\n        feed.setEntries(syndEntries);\n\n        writeSyndFeed(entityStream, feed);\n    }", "signature": "void writeTo(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "full_signature": "@Override public void writeTo(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "class_method_signature": "FeedEntriesAtomBodyWriter.writeTo(List<FeedEntry> entries, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "parallelStream", "setType", "setValue", "getDescription", "setTitle", "getTitle", "setLink", "getLink", "setPublishedDate", "getPublishDate", "setDescription", "toList", "setFeedType", "setTitle", "setDescription", "setPublishedDate", "setEntries", "writeSyndFeed"]}, "repository": {"repo_id": 4368712, "url": "https://github.com/jersey/jersey", "language": "Java", "is_fork": false, "fork_count": 2540, "stargazer_count": 2919, "size": 38964, "license": "licensed"}}