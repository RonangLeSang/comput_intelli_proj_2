{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [], "file": "examples/server-async-standalone/client/src/test/java/org/glassfish/jersey/examples/server/async/MainTest.java"}, "test_case": {"identifier": "testAsyncWrongUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsyncWrongUri() throws Exception {\n        assertEquals(-1, Main.runClient(new String[]{\"req=1\", \"mode=async\", \"uri=http://foo.bar\"}));\n    }", "signature": "void testAsyncWrongUri()", "full_signature": "@Test public void testAsyncWrongUri()", "class_method_signature": "MainTest.testAsyncWrongUri()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "runClient"]}, "focal_class": {"identifier": "Main", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "Main.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "runClient", "parameters": "(final String[] args)", "modifiers": "static", "return": "int", "signature": "int runClient(final String[] args)", "full_signature": "static int runClient(final String[] args)", "class_method_signature": "Main.runClient(final String[] args)", "testcase": false, "constructor": false}], "file": "examples/server-async-standalone/client/src/main/java/org/glassfish/jersey/examples/server/async/Main.java"}, "focal_method": {"identifier": "runClient", "parameters": "(final String[] args)", "modifiers": "static", "return": "int", "body": "static int runClient(final String[] args) {\n        // Parsing command-line arguments\n        final Config config = Config.parse(args);\n        System.out.println(String.format(\"\\nStarting to execute %d requests:\\n\", config.requests));\n        // Creating JAX-RS client\n        final Client client = ClientBuilder.newClient();\n        // Targeting echo resource at URI \"<baseUri>/long-running/(sync|async)/{echo}\"\n        final WebTarget echoResource = client.target(config.baseUri).path(\"long-running/{mode}/{echo}\")\n                .resolveTemplate(\"mode\", (config.sync) ? \"sync\" : \"async\");\n\n        final CountDownLatch latch = new CountDownLatch(config.requests);\n        final Queue<String> errors = new ConcurrentLinkedQueue<String>();\n        final AtomicInteger requestCounter = new AtomicInteger(0);\n\n        final long tic = System.currentTimeMillis();\n        for (int i = 0; i < config.requests; i++) {\n            final int reqId = i;\n            echoResource.resolveTemplate(\"echo\", reqId).request().async().get(new InvocationCallback<String>() {\n                private final AtomicInteger retries = new AtomicInteger(0);\n\n                @Override\n                public void completed(String response) {\n                    final String requestId = Integer.toString(reqId);\n                    if (requestId.equals(response)) {\n                        System.out.print(\"*\");\n                        requestCounter.incrementAndGet();\n                    } else {\n                        System.out.print(\"!\");\n                        errors.offer(String.format(\"Echo response '%s' not equal to request '%s'\", response, requestId));\n                    }\n                    latch.countDown();\n                }\n\n                @Override\n                public void failed(Throwable error) {\n                    if (error.getCause() instanceof IOException && retries.getAndIncrement() < 3) {\n                        // resend\n                        echoResource.resolveTemplate(\"echo\", reqId).request().async().get(this);\n                    } else {\n                        System.out.print(\"!\");\n                        errors.offer(String.format(\"Request '%d' has failed: %s\", reqId, error.toString()));\n                        latch.countDown();\n                    }\n                }\n            });\n        }\n\n        try {\n            if (!latch.await(60, TimeUnit.SECONDS)) {\n                errors.offer(\"Waiting for requests to complete has timed out.\");\n            }\n        } catch (InterruptedException e) {\n            errors.offer(\"Waiting for requests to complete has been interrupted.\");\n        }\n        final long toc = System.currentTimeMillis();\n\n        System.out.println(String.format(\"\\n\\nExecution finished in %d ms.\\nSuccess rate: %6.2f %%\",\n                toc - tic,\n                ((double) requestCounter.get() / config.requests) * 100));\n        if (errors.size() > 0) {\n            System.out.println(\"Following errors occurred during the request execution\");\n            for (String error : errors) {\n                System.out.println(\"\\t\" + error);\n            }\n        }\n\n        client.close();\n\n        return errors.size() > 0 ? -1 : 0;\n    }", "signature": "int runClient(final String[] args)", "full_signature": "static int runClient(final String[] args)", "class_method_signature": "Main.runClient(final String[] args)", "testcase": false, "constructor": false, "invocations": ["parse", "println", "format", "newClient", "resolveTemplate", "path", "target", "currentTimeMillis", "get", "async", "request", "resolveTemplate", "toString", "equals", "print", "incrementAndGet", "print", "offer", "format", "countDown", "getCause", "getAndIncrement", "get", "async", "request", "resolveTemplate", "print", "offer", "format", "toString", "countDown", "await", "offer", "offer", "currentTimeMillis", "println", "format", "get", "size", "println", "println", "close", "size"]}, "repository": {"repo_id": 4368712, "url": "https://github.com/jersey/jersey", "language": "Java", "is_fork": false, "fork_count": 2540, "stargazer_count": 2919, "size": 38964, "license": "licensed"}}