{"test_class": {"identifier": "CombinedMediaTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-server/src/test/java/org/glassfish/jersey/server/internal/routing/CombinedMediaTypeTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n        checkCombination(\"text/html;q=1\", \"text/html;qs=1\", \"text\", \"html\", 1000, 1000, 0);\n        checkCombination(\"text/*;q=0.5\", \"text/html;qs=0.8\", \"text\", \"html\", 500, 800, 1);\n        checkCombination(\"*/*;q=0.2\", \"text/*;qs=0.8\", \"text\", \"*\", 200, 800, 1);\n        checkCombination(\"text/html;q=0.2\", \"*/*;qs=0.8\", \"text\", \"html\", 200, 800, 2);\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "CombinedMediaTypeTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["checkCombination", "checkCombination", "checkCombination", "checkCombination"]}, "focal_class": {"identifier": "CombinedMediaType", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final CombinedMediaType NO_MATCH = new CombinedMediaType(null, 0, 0, 0);", "modifier": "static final", "type": "CombinedMediaType", "declarator": "NO_MATCH = new CombinedMediaType(null, 0, 0, 0)", "var_name": "NO_MATCH"}, {"original_string": "final MediaType combinedType;", "modifier": "final", "type": "MediaType", "declarator": "combinedType", "var_name": "combinedType"}, {"original_string": "final int q;", "modifier": "final", "type": "int", "declarator": "q", "var_name": "q"}, {"original_string": "final int qs;", "modifier": "final", "type": "int", "declarator": "qs", "var_name": "qs"}, {"original_string": "final int d;", "modifier": "final", "type": "int", "declarator": "d", "var_name": "d"}, {"original_string": "static final Comparator<CombinedMediaType> COMPARATOR = new Comparator<CombinedMediaType>() {\n\n        @Override\n        public int compare(CombinedMediaType c1, CombinedMediaType c2) {\n            // more concrete is better\n            int delta = MediaTypes.PARTIAL_ORDER_COMPARATOR.compare(c1.combinedType, c2.combinedType);\n            if (delta != 0) {\n                return delta;\n            }\n\n            // higher is better\n            delta = Quality.QUALITY_VALUE_COMPARATOR.compare(c1.q, c2.q);\n            if (delta != 0) {\n                return delta;\n            }\n\n            // higher is better\n            delta = Quality.QUALITY_VALUE_COMPARATOR.compare(c1.qs, c2.qs);\n            if (delta != 0) {\n                return delta;\n            }\n\n            // lower is better\n            return Integer.compare(c1.d, c2.d);\n        }\n    };", "modifier": "static final", "type": "Comparator<CombinedMediaType>", "declarator": "COMPARATOR = new Comparator<CombinedMediaType>() {\n\n        @Override\n        public int compare(CombinedMediaType c1, CombinedMediaType c2) {\n            // more concrete is better\n            int delta = MediaTypes.PARTIAL_ORDER_COMPARATOR.compare(c1.combinedType, c2.combinedType);\n            if (delta != 0) {\n                return delta;\n            }\n\n            // higher is better\n            delta = Quality.QUALITY_VALUE_COMPARATOR.compare(c1.q, c2.q);\n            if (delta != 0) {\n                return delta;\n            }\n\n            // higher is better\n            delta = Quality.QUALITY_VALUE_COMPARATOR.compare(c1.qs, c2.qs);\n            if (delta != 0) {\n                return delta;\n            }\n\n            // lower is better\n            return Integer.compare(c1.d, c2.d);\n        }\n    }", "var_name": "COMPARATOR"}], "methods": [{"identifier": "matchedWildcards", "parameters": "(MediaType clientMt, EffectiveMediaType serverMt)", "modifiers": "private static", "return": "int", "signature": "int matchedWildcards(MediaType clientMt, EffectiveMediaType serverMt)", "full_signature": "private static int matchedWildcards(MediaType clientMt, EffectiveMediaType serverMt)", "class_method_signature": "CombinedMediaType.matchedWildcards(MediaType clientMt, EffectiveMediaType serverMt)", "testcase": false, "constructor": false}, {"identifier": "b2i", "parameters": "(boolean b)", "modifiers": "private static", "return": "int", "signature": "int b2i(boolean b)", "full_signature": "private static int b2i(boolean b)", "class_method_signature": "CombinedMediaType.b2i(boolean b)", "testcase": false, "constructor": false}, {"identifier": "CombinedMediaType", "parameters": "(final MediaType combinedType, final int q, final int qs, final int d)", "modifiers": "private", "return": "", "signature": " CombinedMediaType(final MediaType combinedType, final int q, final int qs, final int d)", "full_signature": "private  CombinedMediaType(final MediaType combinedType, final int q, final int qs, final int d)", "class_method_signature": "CombinedMediaType.CombinedMediaType(final MediaType combinedType, final int q, final int qs, final int d)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(MediaType clientType, EffectiveMediaType serverType)", "modifiers": "static", "return": "CombinedMediaType", "signature": "CombinedMediaType create(MediaType clientType, EffectiveMediaType serverType)", "full_signature": "static CombinedMediaType create(MediaType clientType, EffectiveMediaType serverType)", "class_method_signature": "CombinedMediaType.create(MediaType clientType, EffectiveMediaType serverType)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CombinedMediaType.toString()", "testcase": false, "constructor": false}], "file": "core-server/src/main/java/org/glassfish/jersey/server/internal/routing/CombinedMediaType.java"}, "focal_method": {"identifier": "create", "parameters": "(MediaType clientType, EffectiveMediaType serverType)", "modifiers": "static", "return": "CombinedMediaType", "body": "static CombinedMediaType create(MediaType clientType, EffectiveMediaType serverType) {\n        if (!clientType.isCompatible(serverType.getMediaType())) {\n            return NO_MATCH;\n        }\n\n        final MediaType strippedClientType = MediaTypes.stripQualityParams(clientType);\n        final MediaType strippedServerType = MediaTypes.stripQualityParams(serverType.getMediaType());\n\n        return new CombinedMediaType(\n                MediaTypes.mostSpecific(strippedClientType, strippedServerType),\n                MediaTypes.getQuality(clientType),\n                QualitySourceMediaType.getQualitySource(serverType.getMediaType()),\n                matchedWildcards(clientType, serverType));\n    }", "signature": "CombinedMediaType create(MediaType clientType, EffectiveMediaType serverType)", "full_signature": "static CombinedMediaType create(MediaType clientType, EffectiveMediaType serverType)", "class_method_signature": "CombinedMediaType.create(MediaType clientType, EffectiveMediaType serverType)", "testcase": false, "constructor": false, "invocations": ["isCompatible", "getMediaType", "stripQualityParams", "stripQualityParams", "getMediaType", "mostSpecific", "getQuality", "getQualitySource", "getMediaType", "matchedWildcards"]}, "repository": {"repo_id": 4368712, "url": "https://github.com/jersey/jersey", "language": "Java", "is_fork": false, "fork_count": 2540, "stargazer_count": 2919, "size": 38964, "license": "licensed"}}