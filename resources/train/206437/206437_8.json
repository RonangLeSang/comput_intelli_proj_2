{"test_class": {"identifier": "ConfigWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SchemaManager schemaManager;", "modifier": "private static", "type": "SchemaManager", "declarator": "schemaManager", "var_name": "schemaManager"}, {"original_string": "private static DnFactory dnFactory;", "modifier": "private static", "type": "DnFactory", "declarator": "dnFactory", "var_name": "dnFactory"}, {"original_string": "private static File workDir = new File( System.getProperty( \"java.io.tmpdir\" ) + \"/server-work\" );", "modifier": "private static", "type": "File", "declarator": "workDir = new File( System.getProperty( \"java.io.tmpdir\" ) + \"/server-work\" )", "var_name": "workDir"}], "file": "server-config/src/test/java/org/apache/directory/server/config/ConfigWriterTest.java"}, "test_case": {"identifier": "testConfigWriter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigWriter() throws Exception\n    {\n        // Extracting of the config file\n        File configDir = new File( workDir, \"configWriter\" ); // could be any directory, cause the config is now in a single file\n        String configFile = LdifConfigExtractor.extractSingleFileConfig( configDir, \"config.ldif\", true );\n\n        // Creating of the config partition\n        SingleFileLdifPartition configPartition = new SingleFileLdifPartition( schemaManager, dnFactory );\n        configPartition.setId( \"config\" );\n        configPartition.setPartitionPath( new File( configFile ).toURI() );\n        configPartition.setSuffixDn( new Dn( schemaManager, \"ou=config\" ) );\n        configPartition.setSchemaManager( schemaManager );\n        configPartition.initialize();\n\n        // Reading the config partition\n        ConfigPartitionReader cpReader = new ConfigPartitionReader( configPartition );\n        ConfigBean configBean = cpReader.readConfig();\n        assertNotNull( configBean );\n\n        // Creating the config writer\n        ConfigWriter configWriter = new ConfigWriter( schemaManager, configBean );\n\n        // Reading the original config file\n        LdifReader ldifReader = new LdifReader( configFile );\n        List<LdifEntry> originalConfigEntries = new ArrayList<LdifEntry>();\n\n        while ( ldifReader.hasNext() )\n        {\n            originalConfigEntries.add( ldifReader.next() );\n        }\n\n        ldifReader.close();\n\n        // Getting the list of entries of generated config\n        List<LdifEntry> generatedConfigEntries = configWriter.getConvertedLdifEntries();\n\n        // Comparing the number of entries\n        assertEquals( originalConfigEntries.size(), generatedConfigEntries.size() );\n\n        // Comparing each entry in both lists (which have been sorted before)\n        Comparator<LdifEntry> dnComparator = new Comparator<LdifEntry>()\n        {\n            public int compare( LdifEntry o1, LdifEntry o2 )\n            {\n                return o1.getDn().toString().compareToIgnoreCase( o2.getDn().toString() );\n            }\n        };\n        Collections.sort( originalConfigEntries, dnComparator );\n        Collections.sort( generatedConfigEntries, dnComparator );\n        for ( int i = 0; i < originalConfigEntries.size(); i++ )\n        {\n            Entry originalConfigEntry = originalConfigEntries.get( i ).getEntry();\n            Entry generatedConfigEntry = generatedConfigEntries.get( i ).getEntry();\n\n            // Comparing DNs\n            assertTrue( originalConfigEntry.getDn().equals( generatedConfigEntry.getDn() ) );\n        }\n\n        // Destroying the config partition\n        configPartition.destroy( configPartition.beginReadTransaction() );\n    }", "signature": "void testConfigWriter()", "full_signature": "@Test public void testConfigWriter()", "class_method_signature": "ConfigWriterTest.testConfigWriter()", "testcase": true, "constructor": false, "invocations": ["extractSingleFileConfig", "setId", "setPartitionPath", "toURI", "setSuffixDn", "setSchemaManager", "initialize", "readConfig", "assertNotNull", "hasNext", "add", "next", "close", "getConvertedLdifEntries", "assertEquals", "size", "size", "compareToIgnoreCase", "toString", "getDn", "toString", "getDn", "sort", "sort", "size", "getEntry", "get", "getEntry", "get", "assertTrue", "equals", "getDn", "getDn", "destroy", "beginReadTransaction"]}, "focal_class": {"identifier": "ConfigWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SchemaManager schemaManager;", "modifier": "private", "type": "SchemaManager", "declarator": "schemaManager", "var_name": "schemaManager"}, {"original_string": "private ConfigBean configBean;", "modifier": "private", "type": "ConfigBean", "declarator": "configBean", "var_name": "configBean"}, {"original_string": "private List<LdifEntry> entries;", "modifier": "private", "type": "List<LdifEntry>", "declarator": "entries", "var_name": "entries"}], "methods": [{"identifier": "ConfigWriter", "parameters": "( SchemaManager schemaManager, ConfigBean configBean )", "modifiers": "public", "return": "", "signature": " ConfigWriter( SchemaManager schemaManager, ConfigBean configBean )", "full_signature": "public  ConfigWriter( SchemaManager schemaManager, ConfigBean configBean )", "class_method_signature": "ConfigWriter.ConfigWriter( SchemaManager schemaManager, ConfigBean configBean )", "testcase": false, "constructor": true}, {"identifier": "convertConfigurationBeanToLdifEntries", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void convertConfigurationBeanToLdifEntries()", "full_signature": "private void convertConfigurationBeanToLdifEntries()", "class_method_signature": "ConfigWriter.convertConfigurationBeanToLdifEntries()", "testcase": false, "constructor": false}, {"identifier": "writeToPath", "parameters": "( String path )", "modifiers": "public", "return": "void", "signature": "void writeToPath( String path )", "full_signature": "public void writeToPath( String path )", "class_method_signature": "ConfigWriter.writeToPath( String path )", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "( File file )", "modifiers": "public", "return": "void", "signature": "void writeToFile( File file )", "full_signature": "public void writeToFile( File file )", "class_method_signature": "ConfigWriter.writeToFile( File file )", "testcase": false, "constructor": false}, {"identifier": "writeToString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String writeToString()", "full_signature": "public String writeToString()", "class_method_signature": "ConfigWriter.writeToString()", "testcase": false, "constructor": false}, {"identifier": "getConvertedLdifEntries", "parameters": "()", "modifiers": "public", "return": "List<LdifEntry>", "signature": "List<LdifEntry> getConvertedLdifEntries()", "full_signature": "public List<LdifEntry> getConvertedLdifEntries()", "class_method_signature": "ConfigWriter.getConvertedLdifEntries()", "testcase": false, "constructor": false}, {"identifier": "addObjectClassAttribute", "parameters": "( SchemaManager schemaManager, LdifEntry entry, String objectClass )", "modifiers": "private", "return": "void", "signature": "void addObjectClassAttribute( SchemaManager schemaManager, LdifEntry entry, String objectClass )", "full_signature": "private void addObjectClassAttribute( SchemaManager schemaManager, LdifEntry entry, String objectClass )", "class_method_signature": "ConfigWriter.addObjectClassAttribute( SchemaManager schemaManager, LdifEntry entry, String objectClass )", "testcase": false, "constructor": false}, {"identifier": "computeObjectClassAttributeValues", "parameters": "( SchemaManager schemaManager,\n        Set<String> objectClassAttributeValues,\n        ObjectClass objectClass )", "modifiers": "private", "return": "void", "signature": "void computeObjectClassAttributeValues( SchemaManager schemaManager,\n        Set<String> objectClassAttributeValues,\n        ObjectClass objectClass )", "full_signature": "private void computeObjectClassAttributeValues( SchemaManager schemaManager,\n        Set<String> objectClassAttributeValues,\n        ObjectClass objectClass )", "class_method_signature": "ConfigWriter.computeObjectClassAttributeValues( SchemaManager schemaManager,\n        Set<String> objectClassAttributeValues,\n        ObjectClass objectClass )", "testcase": false, "constructor": false}, {"identifier": "addBean", "parameters": "( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries )", "modifiers": "private", "return": "void", "signature": "void addBean( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries )", "full_signature": "private void addBean( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries )", "class_method_signature": "ConfigWriter.addBean( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries )", "testcase": false, "constructor": false}, {"identifier": "addBean", "parameters": "( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries,\n        LdifEntry parentEntry, String attributeTypeForParentEntry )", "modifiers": "private", "return": "void", "signature": "void addBean( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries,\n        LdifEntry parentEntry, String attributeTypeForParentEntry )", "full_signature": "private void addBean( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries,\n        LdifEntry parentEntry, String attributeTypeForParentEntry )", "class_method_signature": "ConfigWriter.addBean( Dn rootDn, SchemaManager schemaManager, AdsBaseBean bean, List<LdifEntry> entries,\n        LdifEntry parentEntry, String attributeTypeForParentEntry )", "testcase": false, "constructor": false}, {"identifier": "getObjectClassNameForBean", "parameters": "( Class<?> c )", "modifiers": "private", "return": "String", "signature": "String getObjectClassNameForBean( Class<?> c )", "full_signature": "private String getObjectClassNameForBean( Class<?> c )", "class_method_signature": "ConfigWriter.getObjectClassNameForBean( Class<?> c )", "testcase": false, "constructor": false}, {"identifier": "getClassNameWithoutPackageName", "parameters": "( Class<?> c )", "modifiers": "private", "return": "String", "signature": "String getClassNameWithoutPackageName( Class<?> c )", "full_signature": "private String getClassNameWithoutPackageName( Class<?> c )", "class_method_signature": "ConfigWriter.getClassNameWithoutPackageName( Class<?> c )", "testcase": false, "constructor": false}, {"identifier": "isMultiple", "parameters": "( Class<?> clazz )", "modifiers": "private", "return": "boolean", "signature": "boolean isMultiple( Class<?> clazz )", "full_signature": "private boolean isMultiple( Class<?> clazz )", "class_method_signature": "ConfigWriter.isMultiple( Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "getDn", "parameters": "( Dn baseDn, AdsBaseBean bean )", "modifiers": "private", "return": "Dn", "signature": "Dn getDn( Dn baseDn, AdsBaseBean bean )", "full_signature": "private Dn getDn( Dn baseDn, AdsBaseBean bean )", "class_method_signature": "ConfigWriter.getDn( Dn baseDn, AdsBaseBean bean )", "testcase": false, "constructor": false}, {"identifier": "addAttributeTypeValues", "parameters": "( String attributeType, Object o, LdifEntry entry )", "modifiers": "private", "return": "void", "signature": "void addAttributeTypeValues( String attributeType, Object o, LdifEntry entry )", "full_signature": "private void addAttributeTypeValues( String attributeType, Object o, LdifEntry entry )", "class_method_signature": "ConfigWriter.addAttributeTypeValues( String attributeType, Object o, LdifEntry entry )", "testcase": false, "constructor": false}, {"identifier": "addAttributeTypeValue", "parameters": "( String attributeType, Object value, LdifEntry entry )", "modifiers": "private", "return": "void", "signature": "void addAttributeTypeValue( String attributeType, Object value, LdifEntry entry )", "full_signature": "private void addAttributeTypeValue( String attributeType, Object value, LdifEntry entry )", "class_method_signature": "ConfigWriter.addAttributeTypeValue( String attributeType, Object value, LdifEntry entry )", "testcase": false, "constructor": false}], "file": "server-config/src/main/java/org/apache/directory/server/config/ConfigWriter.java"}, "focal_method": {"identifier": "ConfigWriter", "parameters": "( SchemaManager schemaManager, ConfigBean configBean )", "modifiers": "public", "return": "", "body": "public ConfigWriter( SchemaManager schemaManager, ConfigBean configBean )\n    {\n        this.schemaManager = schemaManager;\n        this.configBean = configBean;\n    }", "signature": " ConfigWriter( SchemaManager schemaManager, ConfigBean configBean )", "full_signature": "public  ConfigWriter( SchemaManager schemaManager, ConfigBean configBean )", "class_method_signature": "ConfigWriter.ConfigWriter( SchemaManager schemaManager, ConfigBean configBean )", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 206437, "url": "https://github.com/apache/directory-server", "language": "Java", "is_fork": false, "fork_count": 58, "stargazer_count": 74, "size": 70769, "license": "licensed"}}