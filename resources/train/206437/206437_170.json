{"test_class": {"identifier": "ArrayTreeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Integer MINUS_ONE = Integer.valueOf( -1 );", "modifier": "private static final", "type": "Integer", "declarator": "MINUS_ONE = Integer.valueOf( -1 )", "var_name": "MINUS_ONE"}, {"original_string": "private static final Integer ZERO = Integer.valueOf( 0 );", "modifier": "private static final", "type": "Integer", "declarator": "ZERO = Integer.valueOf( 0 )", "var_name": "ZERO"}, {"original_string": "private static final Integer ONE = Integer.valueOf( 1 );", "modifier": "private static final", "type": "Integer", "declarator": "ONE = Integer.valueOf( 1 )", "var_name": "ONE"}, {"original_string": "private static final Integer TWO = Integer.valueOf( 2 );", "modifier": "private static final", "type": "Integer", "declarator": "TWO = Integer.valueOf( 2 )", "var_name": "TWO"}, {"original_string": "private static final Integer THREE = Integer.valueOf( 3 );", "modifier": "private static final", "type": "Integer", "declarator": "THREE = Integer.valueOf( 3 )", "var_name": "THREE"}, {"original_string": "private static final Integer FOUR = Integer.valueOf( 4 );", "modifier": "private static final", "type": "Integer", "declarator": "FOUR = Integer.valueOf( 4 )", "var_name": "FOUR"}, {"original_string": "private static final Integer FIVE = Integer.valueOf( 5 );", "modifier": "private static final", "type": "Integer", "declarator": "FIVE = Integer.valueOf( 5 )", "var_name": "FIVE"}, {"original_string": "private static final Integer SIX = Integer.valueOf( 6 );", "modifier": "private static final", "type": "Integer", "declarator": "SIX = Integer.valueOf( 6 )", "var_name": "SIX"}, {"original_string": "private static final Integer SEVEN = Integer.valueOf( 7 );", "modifier": "private static final", "type": "Integer", "declarator": "SEVEN = Integer.valueOf( 7 )", "var_name": "SEVEN"}, {"original_string": "private static final Integer EIGHT = Integer.valueOf( 8 );", "modifier": "private static final", "type": "Integer", "declarator": "EIGHT = Integer.valueOf( 8 )", "var_name": "EIGHT"}, {"original_string": "private static final Integer NINE = Integer.valueOf( 9 );", "modifier": "private static final", "type": "Integer", "declarator": "NINE = Integer.valueOf( 9 )", "var_name": "NINE"}, {"original_string": "private static final Integer TEN = Integer.valueOf( 10 );", "modifier": "private static final", "type": "Integer", "declarator": "TEN = Integer.valueOf( 10 )", "var_name": "TEN"}, {"original_string": "private static final Integer ELEVEN = Integer.valueOf( 11 );", "modifier": "private static final", "type": "Integer", "declarator": "ELEVEN = Integer.valueOf( 11 )", "var_name": "ELEVEN"}, {"original_string": "private static final Integer TWELVE = Integer.valueOf( 12 );", "modifier": "private static final", "type": "Integer", "declarator": "TWELVE = Integer.valueOf( 12 )", "var_name": "TWELVE"}, {"original_string": "private static final Integer THIRTY_ONE = Integer.valueOf( 31 );", "modifier": "private static final", "type": "Integer", "declarator": "THIRTY_ONE = Integer.valueOf( 31 )", "var_name": "THIRTY_ONE"}, {"original_string": "private static final Integer THIRTY_TWO = Integer.valueOf( 32 );", "modifier": "private static final", "type": "Integer", "declarator": "THIRTY_TWO = Integer.valueOf( 32 )", "var_name": "THIRTY_TWO"}, {"original_string": "private static final Integer THIRTY_SEVEN = Integer.valueOf( 37 );", "modifier": "private static final", "type": "Integer", "declarator": "THIRTY_SEVEN = Integer.valueOf( 37 )", "var_name": "THIRTY_SEVEN"}, {"original_string": "private static final Integer SEVENTY = Integer.valueOf( 70 );", "modifier": "private static final", "type": "Integer", "declarator": "SEVENTY = Integer.valueOf( 70 )", "var_name": "SEVENTY"}, {"original_string": "private static final Integer SEVENTY_NINE = Integer.valueOf( 79 );", "modifier": "private static final", "type": "Integer", "declarator": "SEVENTY_NINE = Integer.valueOf( 79 )", "var_name": "SEVENTY_NINE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger( ArrayTreeTest.class );", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger( ArrayTreeTest.class )", "var_name": "LOG"}], "file": "core-avl/src/test/java/org/apache/directory/server/core/avltree/ArrayTreeTest.java"}, "test_case": {"identifier": "testGetAfterPositionEmptyTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAfterPositionEmptyTree()\n    {\n        ArrayTree<Integer> tree = createTree();\n        assertEquals( -1, tree.getAfterPosition( ZERO ) );\n    }", "signature": "void testGetAfterPositionEmptyTree()", "full_signature": "@Test public void testGetAfterPositionEmptyTree()", "class_method_signature": "ArrayTreeTest.testGetAfterPositionEmptyTree()", "testcase": true, "constructor": false, "invocations": ["createTree", "assertEquals", "getAfterPosition"]}, "focal_class": {"identifier": "ArrayTree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Comparator<K> comparator;", "modifier": "private", "type": "Comparator<K>", "declarator": "comparator", "var_name": "comparator"}, {"original_string": "private K[] array;", "modifier": "private", "type": "K[]", "declarator": "array", "var_name": "array"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private static final int INCREMENT = 16;", "modifier": "private static final", "type": "int", "declarator": "INCREMENT = 16", "var_name": "INCREMENT"}], "methods": [{"identifier": "ArrayTree", "parameters": "( Comparator<K> comparator )", "modifiers": "public", "return": "", "signature": " ArrayTree( Comparator<K> comparator )", "full_signature": "public  ArrayTree( Comparator<K> comparator )", "class_method_signature": "ArrayTree.ArrayTree( Comparator<K> comparator )", "testcase": false, "constructor": true}, {"identifier": "ArrayTree", "parameters": "( Comparator<K> comparator, K[] array )", "modifiers": "public", "return": "", "signature": " ArrayTree( Comparator<K> comparator, K[] array )", "full_signature": "public  ArrayTree( Comparator<K> comparator, K[] array )", "class_method_signature": "ArrayTree.ArrayTree( Comparator<K> comparator, K[] array )", "testcase": false, "constructor": true}, {"identifier": "getComparator", "parameters": "()", "modifiers": "public", "return": "Comparator<K>", "signature": "Comparator<K> getComparator()", "full_signature": "public Comparator<K> getComparator()", "class_method_signature": "ArrayTree.getComparator()", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( K key )", "modifiers": "public", "return": "K", "signature": "K insert( K key )", "full_signature": "public K insert( K key )", "class_method_signature": "ArrayTree.insert( K key )", "testcase": false, "constructor": false}, {"identifier": "reduceArray", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reduceArray()", "full_signature": "private void reduceArray()", "class_method_signature": "ArrayTree.reduceArray()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "( K key )", "modifiers": "public", "return": "K", "signature": "K remove( K key )", "full_signature": "public K remove( K key )", "class_method_signature": "ArrayTree.remove( K key )", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "ArrayTree.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ArrayTree.size()", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "public", "return": "List<K>", "signature": "List<K> getKeys()", "full_signature": "public List<K> getKeys()", "class_method_signature": "ArrayTree.getKeys()", "testcase": false, "constructor": false}, {"identifier": "printTree", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void printTree()", "full_signature": "public void printTree()", "class_method_signature": "ArrayTree.printTree()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "( int position )", "modifiers": "public", "return": "K", "signature": "K get( int position )", "full_signature": "public K get( int position )", "class_method_signature": "ArrayTree.get( int position )", "testcase": false, "constructor": false}, {"identifier": "getFirst", "parameters": "()", "modifiers": "public", "return": "K", "signature": "K getFirst()", "full_signature": "public K getFirst()", "class_method_signature": "ArrayTree.getFirst()", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "()", "modifiers": "public", "return": "K", "signature": "K getLast()", "full_signature": "public K getLast()", "class_method_signature": "ArrayTree.getLast()", "testcase": false, "constructor": false}, {"identifier": "findGreater", "parameters": "( K key )", "modifiers": "public", "return": "K", "signature": "K findGreater( K key )", "full_signature": "public K findGreater( K key )", "class_method_signature": "ArrayTree.findGreater( K key )", "testcase": false, "constructor": false}, {"identifier": "findGreaterOrEqual", "parameters": "( K key )", "modifiers": "public", "return": "K", "signature": "K findGreaterOrEqual( K key )", "full_signature": "public K findGreaterOrEqual( K key )", "class_method_signature": "ArrayTree.findGreaterOrEqual( K key )", "testcase": false, "constructor": false}, {"identifier": "findLess", "parameters": "( K key )", "modifiers": "public", "return": "K", "signature": "K findLess( K key )", "full_signature": "public K findLess( K key )", "class_method_signature": "ArrayTree.findLess( K key )", "testcase": false, "constructor": false}, {"identifier": "findLessOrEqual", "parameters": "( K key )", "modifiers": "public", "return": "K", "signature": "K findLessOrEqual( K key )", "full_signature": "public K findLessOrEqual( K key )", "class_method_signature": "ArrayTree.findLessOrEqual( K key )", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "( K key )", "modifiers": "public", "return": "K", "signature": "K find( K key )", "full_signature": "public K find( K key )", "class_method_signature": "ArrayTree.find( K key )", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "( K key )", "modifiers": "public", "return": "int", "signature": "int getPosition( K key )", "full_signature": "public int getPosition( K key )", "class_method_signature": "ArrayTree.getPosition( K key )", "testcase": false, "constructor": false}, {"identifier": "getAfterPosition", "parameters": "( K key )", "modifiers": "public", "return": "int", "signature": "int getAfterPosition( K key )", "full_signature": "public int getAfterPosition( K key )", "class_method_signature": "ArrayTree.getAfterPosition( K key )", "testcase": false, "constructor": false}, {"identifier": "getBeforePosition", "parameters": "( K key )", "modifiers": "public", "return": "int", "signature": "int getBeforePosition( K key )", "full_signature": "public int getBeforePosition( K key )", "class_method_signature": "ArrayTree.getBeforePosition( K key )", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "( K key )", "modifiers": "public", "return": "boolean", "signature": "boolean contains( K key )", "full_signature": "public boolean contains( K key )", "class_method_signature": "ArrayTree.contains( K key )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ArrayTree.toString()", "testcase": false, "constructor": false}], "file": "core-avl/src/main/java/org/apache/directory/server/core/avltree/ArrayTree.java"}, "focal_method": {"identifier": "getAfterPosition", "parameters": "( K key )", "modifiers": "public", "return": "int", "body": "public int getAfterPosition( K key )\n    {\n        if ( key == null )\n        {\n            return -1;\n        }\n\n        switch ( size )\n        {\n            case 0:\n                return -1;\n\n            case 1:\n                if ( comparator.compare( array[0], key ) > 0 )\n                {\n                    return 0;\n                }\n                else\n                {\n                    return -1;\n                }\n\n            case 2:\n                if ( comparator.compare( array[0], key ) > 0 )\n                {\n                    return 0;\n                }\n\n                if ( comparator.compare( array[1], key ) > 0 )\n                {\n                    return 1;\n                }\n                else\n                {\n                    return -1;\n                }\n\n            default:\n                // Split the array in two parts, the left part an the right part\n                int current = size >> 1;\n                int start = 0;\n                int end = size - 1;\n\n                while ( end - start + 1 > 2 )\n                {\n                    int res = comparator.compare( array[current], key );\n\n                    if ( res == 0 )\n                    {\n                        if ( current != size - 1 )\n                        {\n                            return current + 1;\n                        }\n                        else\n                        {\n                            return -1;\n                        }\n                    }\n                    else if ( res < 0 )\n                    {\n                        start = current;\n                        current = ( current + end + 1 ) >> 1;\n                    }\n                    else\n                    {\n                        end = current;\n                        current = ( current + start + 1 ) >> 1;\n                    }\n                }\n\n                switch ( end - start + 1 )\n                {\n                    case 1:\n                        if ( comparator.compare( array[start], key ) > 0 )\n                        {\n                            return start;\n                        }\n                        else\n                        {\n                            return -1;\n                        }\n\n                    case 2:\n                        if ( comparator.compare( array[start], key ) > 0 )\n                        {\n                            return start;\n                        }\n\n                        if ( comparator.compare( array[end], key ) > 0 )\n                        {\n                            return end;\n                        }\n                        else\n                        {\n                            return -1;\n                        }\n\n                    default:\n                        return -1;\n                }\n        }\n    }", "signature": "int getAfterPosition( K key )", "full_signature": "public int getAfterPosition( K key )", "class_method_signature": "ArrayTree.getAfterPosition( K key )", "testcase": false, "constructor": false, "invocations": ["compare", "compare", "compare", "compare", "compare", "compare", "compare"]}, "repository": {"repo_id": 206437, "url": "https://github.com/apache/directory-server", "language": "Java", "is_fork": false, "fork_count": 58, "stargazer_count": 74, "size": 70769, "license": "licensed"}}