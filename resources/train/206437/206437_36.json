{"test_class": {"identifier": "SingletonIndexCursorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IndexEntry<String, String> indexEntry;", "modifier": "private", "type": "IndexEntry<String, String>", "declarator": "indexEntry", "var_name": "indexEntry"}, {"original_string": "private SingletonIndexCursor<String> indexCursor;", "modifier": "private", "type": "SingletonIndexCursor<String>", "declarator": "indexCursor", "var_name": "indexCursor"}], "file": "xdbm-partition/src/test/java/org/apache/directory/server/xdbm/SingletonIndexCursorTest.java"}, "test_case": {"identifier": "testNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNext() throws Exception\n    {\n        // not explicitly positioned, implicit before first \n        assertTrue( indexCursor.next() );\n        assertFalse( indexCursor.next() );\n\n        // position before first\n        indexCursor.beforeFirst();\n        assertTrue( indexCursor.next() );\n        assertFalse( indexCursor.next() );\n\n        // position first\n        indexCursor.first();\n        assertFalse( indexCursor.next() );\n\n        // position last\n        indexCursor.last();\n        assertFalse( indexCursor.next() );\n\n        // position after first\n        indexCursor.afterLast();\n        assertFalse( indexCursor.next() );\n    }", "signature": "void testNext()", "full_signature": "@Test public void testNext()", "class_method_signature": "SingletonIndexCursorTest.testNext()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "next", "assertFalse", "next", "beforeFirst", "assertTrue", "next", "assertFalse", "next", "first", "assertFalse", "next", "last", "assertFalse", "next", "afterLast", "assertFalse", "next"]}, "focal_class": {"identifier": "SingletonIndexCursor", "superclass": "extends AbstractIndexCursor<V>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG_CURSOR = LoggerFactory.getLogger( Loggers.CURSOR_LOG.getName() );", "modifier": "private static final", "type": "Logger", "declarator": "LOG_CURSOR = LoggerFactory.getLogger( Loggers.CURSOR_LOG.getName() )", "var_name": "LOG_CURSOR"}, {"original_string": "private static final boolean IS_DEBUG = LOG_CURSOR.isDebugEnabled();", "modifier": "private static final", "type": "boolean", "declarator": "IS_DEBUG = LOG_CURSOR.isDebugEnabled()", "var_name": "IS_DEBUG"}, {"original_string": "private boolean beforeFirst = true;", "modifier": "private", "type": "boolean", "declarator": "beforeFirst = true", "var_name": "beforeFirst"}, {"original_string": "private boolean afterLast;", "modifier": "private", "type": "boolean", "declarator": "afterLast", "var_name": "afterLast"}, {"original_string": "private boolean onSingleton;", "modifier": "private", "type": "boolean", "declarator": "onSingleton", "var_name": "onSingleton"}, {"original_string": "private final IndexEntry<V, String> singleton;", "modifier": "private final", "type": "IndexEntry<V, String>", "declarator": "singleton", "var_name": "singleton"}], "methods": [{"identifier": "SingletonIndexCursor", "parameters": "( PartitionTxn partitionTxn, IndexEntry<V, String> singleton )", "modifiers": "public", "return": "", "signature": " SingletonIndexCursor( PartitionTxn partitionTxn, IndexEntry<V, String> singleton )", "full_signature": "public  SingletonIndexCursor( PartitionTxn partitionTxn, IndexEntry<V, String> singleton )", "class_method_signature": "SingletonIndexCursor.SingletonIndexCursor( PartitionTxn partitionTxn, IndexEntry<V, String> singleton )", "testcase": false, "constructor": true}, {"identifier": "getUnsupportedMessage", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getUnsupportedMessage()", "full_signature": "protected String getUnsupportedMessage()", "class_method_signature": "SingletonIndexCursor.getUnsupportedMessage()", "testcase": false, "constructor": false}, {"identifier": "available", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean available()", "full_signature": "@Override public boolean available()", "class_method_signature": "SingletonIndexCursor.available()", "testcase": false, "constructor": false}, {"identifier": "beforeFirst", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void beforeFirst()", "full_signature": "@Override public void beforeFirst()", "class_method_signature": "SingletonIndexCursor.beforeFirst()", "testcase": false, "constructor": false}, {"identifier": "afterLast", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterLast()", "full_signature": "@Override public void afterLast()", "class_method_signature": "SingletonIndexCursor.afterLast()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean first()", "full_signature": "@Override public boolean first()", "class_method_signature": "SingletonIndexCursor.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean last()", "full_signature": "@Override public boolean last()", "class_method_signature": "SingletonIndexCursor.last()", "testcase": false, "constructor": false}, {"identifier": "isFirst", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFirst()", "full_signature": "@Override public boolean isFirst()", "class_method_signature": "SingletonIndexCursor.isFirst()", "testcase": false, "constructor": false}, {"identifier": "isLast", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLast()", "full_signature": "@Override public boolean isLast()", "class_method_signature": "SingletonIndexCursor.isLast()", "testcase": false, "constructor": false}, {"identifier": "isAfterLast", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAfterLast()", "full_signature": "@Override public boolean isAfterLast()", "class_method_signature": "SingletonIndexCursor.isAfterLast()", "testcase": false, "constructor": false}, {"identifier": "isBeforeFirst", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBeforeFirst()", "full_signature": "@Override public boolean isBeforeFirst()", "class_method_signature": "SingletonIndexCursor.isBeforeFirst()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean previous()", "full_signature": "@Override public boolean previous()", "class_method_signature": "SingletonIndexCursor.previous()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean next()", "full_signature": "@Override public boolean next()", "class_method_signature": "SingletonIndexCursor.next()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "IndexEntry<V, String>", "signature": "IndexEntry<V, String> get()", "full_signature": "public IndexEntry<V, String> get()", "class_method_signature": "SingletonIndexCursor.get()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SingletonIndexCursor.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "( Exception cause )", "modifiers": "@Override public", "return": "void", "signature": "void close( Exception cause )", "full_signature": "@Override public void close( Exception cause )", "class_method_signature": "SingletonIndexCursor.close( Exception cause )", "testcase": false, "constructor": false}], "file": "xdbm-partition/src/main/java/org/apache/directory/server/xdbm/SingletonIndexCursor.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean next() throws LdapException, CursorException\n    {\n        checkNotClosed();\n        \n        if ( beforeFirst )\n        {\n            beforeFirst = false;\n            onSingleton = true;\n            afterLast = false;\n            return true;\n        }\n\n        if ( afterLast )\n        {\n            return false;\n        }\n\n        // must be on the singleton\n        beforeFirst = false;\n        onSingleton = false;\n        afterLast = true;\n        return false;\n    }", "signature": "boolean next()", "full_signature": "@Override public boolean next()", "class_method_signature": "SingletonIndexCursor.next()", "testcase": false, "constructor": false, "invocations": ["checkNotClosed"]}, "repository": {"repo_id": 206437, "url": "https://github.com/apache/directory-server", "language": "Java", "is_fork": false, "fork_count": 58, "stargazer_count": 74, "size": 70769, "license": "licensed"}}