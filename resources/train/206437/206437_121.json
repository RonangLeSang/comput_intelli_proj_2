{"test_class": {"identifier": "MostSpecificUserClassFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> EMPTY_NAME_SET = Collections.unmodifiableSet( new HashSet<String>() );", "modifier": "private static final", "type": "Set<String>", "declarator": "EMPTY_NAME_SET = Collections.unmodifiableSet( new HashSet<String>() )", "var_name": "EMPTY_NAME_SET"}, {"original_string": "private static final Set<MicroOperation> EMPTY_MICRO_OPERATION_SET = Collections\n        .unmodifiableSet( new HashSet<MicroOperation>() );", "modifier": "private static final", "type": "Set<MicroOperation>", "declarator": "EMPTY_MICRO_OPERATION_SET = Collections\n        .unmodifiableSet( new HashSet<MicroOperation>() )", "var_name": "EMPTY_MICRO_OPERATION_SET"}, {"original_string": "private static final Collection<UserClass> EMPTY_USER_CLASS_COLLECTION = Collections\n        .unmodifiableCollection( new ArrayList<UserClass>() );", "modifier": "private static final", "type": "Collection<UserClass>", "declarator": "EMPTY_USER_CLASS_COLLECTION = Collections\n        .unmodifiableCollection( new ArrayList<UserClass>() )", "var_name": "EMPTY_USER_CLASS_COLLECTION"}, {"original_string": "private static final Set<SubtreeSpecification> EMPTY_SUBTREE_SPECIFICATION_COLLECTION = Collections\n        .unmodifiableSet( new HashSet<SubtreeSpecification>() );", "modifier": "private static final", "type": "Set<SubtreeSpecification>", "declarator": "EMPTY_SUBTREE_SPECIFICATION_COLLECTION = Collections\n        .unmodifiableSet( new HashSet<SubtreeSpecification>() )", "var_name": "EMPTY_SUBTREE_SPECIFICATION_COLLECTION"}, {"original_string": "private static final Collection<ProtectedItem> EMPTY_PROTECTED_ITEM_COLLECTION = Collections\n        .unmodifiableCollection( new ArrayList<ProtectedItem>() );", "modifier": "private static final", "type": "Collection<ProtectedItem>", "declarator": "EMPTY_PROTECTED_ITEM_COLLECTION = Collections\n        .unmodifiableCollection( new ArrayList<ProtectedItem>() )", "var_name": "EMPTY_PROTECTED_ITEM_COLLECTION"}, {"original_string": "private static final Collection<ACITuple> EMPTY_ACI_TUPLE_COLLECTION = Collections\n        .unmodifiableCollection( new ArrayList<ACITuple>() );", "modifier": "private static final", "type": "Collection<ACITuple>", "declarator": "EMPTY_ACI_TUPLE_COLLECTION = Collections\n        .unmodifiableCollection( new ArrayList<ACITuple>() )", "var_name": "EMPTY_ACI_TUPLE_COLLECTION"}, {"original_string": "private static final List<ACITuple> TUPLES_A = new ArrayList<ACITuple>();", "modifier": "private static final", "type": "List<ACITuple>", "declarator": "TUPLES_A = new ArrayList<ACITuple>()", "var_name": "TUPLES_A"}, {"original_string": "private static final List<ACITuple> TUPLES_B = new ArrayList<ACITuple>();", "modifier": "private static final", "type": "List<ACITuple>", "declarator": "TUPLES_B = new ArrayList<ACITuple>()", "var_name": "TUPLES_B"}, {"original_string": "private static final List<ACITuple> TUPLES_C = new ArrayList<ACITuple>();", "modifier": "private static final", "type": "List<ACITuple>", "declarator": "TUPLES_C = new ArrayList<ACITuple>()", "var_name": "TUPLES_C"}, {"original_string": "private static final List<ACITuple> TUPLES_D = new ArrayList<ACITuple>();", "modifier": "private static final", "type": "List<ACITuple>", "declarator": "TUPLES_D = new ArrayList<ACITuple>()", "var_name": "TUPLES_D"}, {"original_string": "private static final List<ACITuple> TUPLES_E = new ArrayList<ACITuple>();", "modifier": "private static final", "type": "List<ACITuple>", "declarator": "TUPLES_E = new ArrayList<ACITuple>()", "var_name": "TUPLES_E"}], "file": "interceptors/authz/src/test/java/org/apache/directory/server/core/authz/support/MostSpecificUserClassFilterTest.java"}, "test_case": {"identifier": "testZeroOrOneTuple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testZeroOrOneTuple() throws Exception\n    {\n        MostSpecificUserClassFilter filter = new MostSpecificUserClassFilter();\n\n        AciContext aciContext = new AciContext( null, null );\n        aciContext.setAciTuples( EMPTY_ACI_TUPLE_COLLECTION );\n\n        assertEquals( 0, filter.filter( aciContext, OperationScope.ATTRIBUTE_TYPE_AND_VALUE, null ).size() );\n\n        Collection<ACITuple> tuples = new ArrayList<ACITuple>();\n        tuples.add( new ACITuple( EMPTY_USER_CLASS_COLLECTION, AuthenticationLevel.NONE,\n            EMPTY_PROTECTED_ITEM_COLLECTION, EMPTY_MICRO_OPERATION_SET, false, 0 ) );\n\n        aciContext = new AciContext( null, null );\n        aciContext.setAciTuples( tuples );\n\n        assertEquals( 1, filter.filter( aciContext, OperationScope.ATTRIBUTE_TYPE_AND_VALUE, null ).size() );\n    }", "signature": "void testZeroOrOneTuple()", "full_signature": "@Test public void testZeroOrOneTuple()", "class_method_signature": "MostSpecificUserClassFilterTest.testZeroOrOneTuple()", "testcase": true, "constructor": false, "invocations": ["setAciTuples", "assertEquals", "size", "filter", "add", "setAciTuples", "assertEquals", "size", "filter"]}, "focal_class": {"identifier": "MostSpecificUserClassFilter", "superclass": "", "interfaces": "implements ACITupleFilter", "fields": [], "methods": [{"identifier": "filter", "parameters": "( AciContext aciContext, OperationScope scope, Entry userEntry )", "modifiers": "@Override public", "return": "Collection<ACITuple>", "signature": "Collection<ACITuple> filter( AciContext aciContext, OperationScope scope, Entry userEntry )", "full_signature": "@Override public Collection<ACITuple> filter( AciContext aciContext, OperationScope scope, Entry userEntry )", "class_method_signature": "MostSpecificUserClassFilter.filter( AciContext aciContext, OperationScope scope, Entry userEntry )", "testcase": false, "constructor": false}], "file": "interceptors/authz/src/main/java/org/apache/directory/server/core/authz/support/MostSpecificUserClassFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "( AciContext aciContext, OperationScope scope, Entry userEntry )", "modifiers": "@Override public", "return": "Collection<ACITuple>", "body": "@Override\n    public Collection<ACITuple> filter( AciContext aciContext, OperationScope scope, Entry userEntry )\n        throws LdapException\n    {\n        if ( aciContext.getAciTuples().size() <= 1 )\n        {\n            return aciContext.getAciTuples();\n        }\n\n        Collection<ACITuple> filteredTuples = new ArrayList<>();\n\n        // If there are any tuples matching the requestor with UserClasses\n        // element name or thisEntry, discard all other tuples.\n        for ( ACITuple tuple : aciContext.getAciTuples() )\n        {\n            for ( UserClass userClass : tuple.getUserClasses() )\n            {\n                if ( userClass instanceof UserClass.Name || userClass instanceof UserClass.ThisEntry )\n                {\n                    filteredTuples.add( tuple );\n                    break;\n                }\n            }\n        }\n\n        if ( !filteredTuples.isEmpty() )\n        {\n            return filteredTuples;\n        }\n\n        // Otherwise if there are any tuples matching UserGroup,\n        // discard all other tuples.\n        for ( ACITuple tuple : aciContext.getAciTuples() )\n        {\n            for ( UserClass userClass : tuple.getUserClasses() )\n            {\n                if ( userClass instanceof UserClass.UserGroup )\n                {\n                    filteredTuples.add( tuple );\n                    break;\n                }\n            }\n        }\n\n        if ( !filteredTuples.isEmpty() )\n        {\n            return filteredTuples;\n        }\n\n        // Otherwise if there are any tuples matching subtree,\n        // discard all other tuples.\n        for ( ACITuple tuple : aciContext.getAciTuples() )\n        {\n            for ( UserClass userClass : tuple.getUserClasses() )\n            {\n                if ( userClass instanceof UserClass.Subtree )\n                {\n                    filteredTuples.add( tuple );\n                    break;\n                }\n            }\n        }\n\n        if ( !filteredTuples.isEmpty() )\n        {\n            return filteredTuples;\n        }\n\n        return aciContext.getAciTuples();\n    }", "signature": "Collection<ACITuple> filter( AciContext aciContext, OperationScope scope, Entry userEntry )", "full_signature": "@Override public Collection<ACITuple> filter( AciContext aciContext, OperationScope scope, Entry userEntry )", "class_method_signature": "MostSpecificUserClassFilter.filter( AciContext aciContext, OperationScope scope, Entry userEntry )", "testcase": false, "constructor": false, "invocations": ["size", "getAciTuples", "getAciTuples", "getAciTuples", "getUserClasses", "add", "isEmpty", "getAciTuples", "getUserClasses", "add", "isEmpty", "getAciTuples", "getUserClasses", "add", "isEmpty", "getAciTuples"]}, "repository": {"repo_id": 206437, "url": "https://github.com/apache/directory-server", "language": "Java", "is_fork": false, "fork_count": 58, "stargazer_count": 74, "size": 70769, "license": "licensed"}}