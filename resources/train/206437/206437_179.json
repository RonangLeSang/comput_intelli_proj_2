{"test_class": {"identifier": "CheckPasswordPolicyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int passwordLength = 6;", "modifier": "private static final", "type": "int", "declarator": "passwordLength = 6", "var_name": "passwordLength"}, {"original_string": "private static final int categoryCount = 3;", "modifier": "private static final", "type": "int", "declarator": "categoryCount = 3", "var_name": "categoryCount"}, {"original_string": "private static final int tokenSize = 3;", "modifier": "private static final", "type": "int", "declarator": "tokenSize = 3", "var_name": "tokenSize"}, {"original_string": "private static final CheckPasswordPolicy policy = new CheckPasswordPolicy();", "modifier": "private static final", "type": "CheckPasswordPolicy", "declarator": "policy = new CheckPasswordPolicy()", "var_name": "policy"}], "file": "protocol-changepw/src/test/java/org/apache/directory/server/changepw/service/CheckPasswordPolicyTest.java"}, "test_case": {"identifier": "testPrincipalAsUsername", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrincipalAsUsername()\n    {\n        String username = new KerberosPrincipal( \"erodriguez@EXAMPLE.COM\" ).getName();\n        String password1 = \"d1r3ct0rY\";\n        String password2 = \"ERodriguez@d1r3ct0rY\";\n        String password3 = \"Example@d1r3ct0rY\";\n\n        assertTrue( policy.isValidUsernameSubstring( username, password1, tokenSize ) );\n\n        assertFalse( policy.isValidUsernameSubstring( username, password2, tokenSize ) );\n        assertFalse( policy.isValidUsernameSubstring( username, password3, tokenSize ) );\n    }", "signature": "void testPrincipalAsUsername()", "full_signature": "@Test public void testPrincipalAsUsername()", "class_method_signature": "CheckPasswordPolicyTest.testPrincipalAsUsername()", "testcase": true, "constructor": false, "invocations": ["getName", "assertTrue", "isValidUsernameSubstring", "assertFalse", "isValidUsernameSubstring", "assertFalse", "isValidUsernameSubstring"]}, "focal_class": {"identifier": "CheckPasswordPolicy", "superclass": "", "interfaces": "implements IoHandlerCommand", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger( CheckPasswordPolicy.class );", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger( CheckPasswordPolicy.class )", "var_name": "log"}, {"original_string": "private String contextKey = \"context\";", "modifier": "private", "type": "String", "declarator": "contextKey = \"context\"", "var_name": "contextKey"}], "methods": [{"identifier": "execute", "parameters": "( NextCommand next, IoSession session, Object message )", "modifiers": "public", "return": "void", "signature": "void execute( NextCommand next, IoSession session, Object message )", "full_signature": "public void execute( NextCommand next, IoSession session, Object message )", "class_method_signature": "CheckPasswordPolicy.execute( NextCommand next, IoSession session, Object message )", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "( String username, String password, int passwordLength, int categoryCount, int tokenSize )", "modifiers": "", "return": "boolean", "signature": "boolean isValid( String username, String password, int passwordLength, int categoryCount, int tokenSize )", "full_signature": " boolean isValid( String username, String password, int passwordLength, int categoryCount, int tokenSize )", "class_method_signature": "CheckPasswordPolicy.isValid( String username, String password, int passwordLength, int categoryCount, int tokenSize )", "testcase": false, "constructor": false}, {"identifier": "isValidPasswordLength", "parameters": "( String password, int passwordLength )", "modifiers": "", "return": "boolean", "signature": "boolean isValidPasswordLength( String password, int passwordLength )", "full_signature": " boolean isValidPasswordLength( String password, int passwordLength )", "class_method_signature": "CheckPasswordPolicy.isValidPasswordLength( String password, int passwordLength )", "testcase": false, "constructor": false}, {"identifier": "isValidCategoryCount", "parameters": "( String password, int categoryCount )", "modifiers": "", "return": "boolean", "signature": "boolean isValidCategoryCount( String password, int categoryCount )", "full_signature": " boolean isValidCategoryCount( String password, int categoryCount )", "class_method_signature": "CheckPasswordPolicy.isValidCategoryCount( String password, int categoryCount )", "testcase": false, "constructor": false}, {"identifier": "isValidUsernameSubstring", "parameters": "( String username, String password, int tokenSize )", "modifiers": "", "return": "boolean", "signature": "boolean isValidUsernameSubstring( String username, String password, int tokenSize )", "full_signature": " boolean isValidUsernameSubstring( String username, String password, int tokenSize )", "class_method_signature": "CheckPasswordPolicy.isValidUsernameSubstring( String username, String password, int tokenSize )", "testcase": false, "constructor": false}, {"identifier": "buildErrorMessage", "parameters": "( String username, String password, int passwordLength, int categoryCount,\n        int tokenSize )", "modifiers": "private", "return": "String", "signature": "String buildErrorMessage( String username, String password, int passwordLength, int categoryCount,\n        int tokenSize )", "full_signature": "private String buildErrorMessage( String username, String password, int passwordLength, int categoryCount,\n        int tokenSize )", "class_method_signature": "CheckPasswordPolicy.buildErrorMessage( String username, String password, int passwordLength, int categoryCount,\n        int tokenSize )", "testcase": false, "constructor": false}, {"identifier": "getContextKey", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getContextKey()", "full_signature": "protected String getContextKey()", "class_method_signature": "CheckPasswordPolicy.getContextKey()", "testcase": false, "constructor": false}], "file": "protocol-changepw/src/main/java/org/apache/directory/server/changepw/service/CheckPasswordPolicy.java"}, "focal_method": {"identifier": "isValidUsernameSubstring", "parameters": "( String username, String password, int tokenSize )", "modifiers": "", "return": "boolean", "body": "boolean isValidUsernameSubstring( String username, String password, int tokenSize )\n    {\n        String[] tokens = username.split( \"[^a-zA-Z]\" );\n\n        for ( int ii = 0; ii < tokens.length; ii++ )\n        {\n            if ( tokens[ii].length() >= tokenSize && password.matches( \"(?i).*\" + tokens[ii] + \".*\" ) )\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }", "signature": "boolean isValidUsernameSubstring( String username, String password, int tokenSize )", "full_signature": " boolean isValidUsernameSubstring( String username, String password, int tokenSize )", "class_method_signature": "CheckPasswordPolicy.isValidUsernameSubstring( String username, String password, int tokenSize )", "testcase": false, "constructor": false, "invocations": ["split", "length", "matches"]}, "repository": {"repo_id": 206437, "url": "https://github.com/apache/directory-server", "language": "Java", "is_fork": false, "fork_count": 58, "stargazer_count": 74, "size": 70769, "license": "licensed"}}