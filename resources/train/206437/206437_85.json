{"test_class": {"identifier": "LdapJndiPropertiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-jndi/src/test/java/org/apache/directory/server/core/jndi/LdapJndiPropertiesTest.java"}, "test_case": {"identifier": "testAuthWithNoCredsEnv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthWithNoCredsEnv() throws Exception\n    {\n        Hashtable<String, Object> env = new Hashtable<String, Object>();\n        env.put( Context.SECURITY_PRINCIPAL, \"\" );\n        env.put( Context.SECURITY_AUTHENTICATION, \"simple\" );\n        try\n        {\n            LdapJndiProperties.getLdapJndiProperties( env );\n            fail( \"should never get here\" );\n        }\n        catch ( ConfigurationException e )\n        {\n        }\n    }", "signature": "void testAuthWithNoCredsEnv()", "full_signature": "@Test public void testAuthWithNoCredsEnv()", "class_method_signature": "LdapJndiPropertiesTest.testAuthWithNoCredsEnv()", "testcase": true, "constructor": false, "invocations": ["put", "put", "getLdapJndiProperties", "fail"]}, "focal_class": {"identifier": "LdapJndiProperties", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SASL_AUTHID = \"java.naming.security.sasl.authorizationId\";", "modifier": "private static final", "type": "String", "declarator": "SASL_AUTHID = \"java.naming.security.sasl.authorizationId\"", "var_name": "SASL_AUTHID"}, {"original_string": "private Dn providerDn;", "modifier": "private", "type": "Dn", "declarator": "providerDn", "var_name": "providerDn"}, {"original_string": "private Dn bindDn;", "modifier": "private", "type": "Dn", "declarator": "bindDn", "var_name": "bindDn"}, {"original_string": "private String saslAuthId;", "modifier": "private", "type": "String", "declarator": "saslAuthId", "var_name": "saslAuthId"}, {"original_string": "private AuthenticationLevel level;", "modifier": "private", "type": "AuthenticationLevel", "declarator": "level", "var_name": "level"}, {"original_string": "private String saslMechanism;", "modifier": "private", "type": "String", "declarator": "saslMechanism", "var_name": "saslMechanism"}, {"original_string": "private byte[] credentials;", "modifier": "private", "type": "byte[]", "declarator": "credentials", "var_name": "credentials"}], "methods": [{"identifier": "getAuthenticationLevel", "parameters": "( Hashtable env )", "modifiers": "public static", "return": "AuthenticationLevel", "signature": "AuthenticationLevel getAuthenticationLevel( Hashtable env )", "full_signature": "public static AuthenticationLevel getAuthenticationLevel( Hashtable env )", "class_method_signature": "LdapJndiProperties.getAuthenticationLevel( Hashtable env )", "testcase": false, "constructor": false}, {"identifier": "getLdapJndiProperties", "parameters": "( Hashtable env )", "modifiers": "public static", "return": "LdapJndiProperties", "signature": "LdapJndiProperties getLdapJndiProperties( Hashtable env )", "full_signature": "public static LdapJndiProperties getLdapJndiProperties( Hashtable env )", "class_method_signature": "LdapJndiProperties.getLdapJndiProperties( Hashtable env )", "testcase": false, "constructor": false}, {"identifier": "getBindDn", "parameters": "()", "modifiers": "public", "return": "Dn", "signature": "Dn getBindDn()", "full_signature": "public Dn getBindDn()", "class_method_signature": "LdapJndiProperties.getBindDn()", "testcase": false, "constructor": false}, {"identifier": "getProviderDn", "parameters": "()", "modifiers": "public", "return": "Dn", "signature": "Dn getProviderDn()", "full_signature": "public Dn getProviderDn()", "class_method_signature": "LdapJndiProperties.getProviderDn()", "testcase": false, "constructor": false}, {"identifier": "getSaslAuthId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSaslAuthId()", "full_signature": "public String getSaslAuthId()", "class_method_signature": "LdapJndiProperties.getSaslAuthId()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticationLevel", "parameters": "()", "modifiers": "public", "return": "AuthenticationLevel", "signature": "AuthenticationLevel getAuthenticationLevel()", "full_signature": "public AuthenticationLevel getAuthenticationLevel()", "class_method_signature": "LdapJndiProperties.getAuthenticationLevel()", "testcase": false, "constructor": false}, {"identifier": "getSaslMechanism", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSaslMechanism()", "full_signature": "public String getSaslMechanism()", "class_method_signature": "LdapJndiProperties.getSaslMechanism()", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getCredentials()", "full_signature": "public byte[] getCredentials()", "class_method_signature": "LdapJndiProperties.getCredentials()", "testcase": false, "constructor": false}], "file": "core-jndi/src/main/java/org/apache/directory/server/core/jndi/LdapJndiProperties.java"}, "focal_method": {"identifier": "getLdapJndiProperties", "parameters": "( Hashtable env )", "modifiers": "public static", "return": "LdapJndiProperties", "body": "public static LdapJndiProperties getLdapJndiProperties( Hashtable env ) throws NamingException\n    {\n        if ( env == null )\n        {\n            throw new ConfigurationException( \"environment cannot be null\" );\n        }\n\n        LdapJndiProperties props = new LdapJndiProperties();\n        Object principal = env.get( Context.SECURITY_PRINCIPAL );\n        Object credobj = env.get( Context.SECURITY_CREDENTIALS );\n        Object authentication = env.get( Context.SECURITY_AUTHENTICATION );\n\n        // -------------------------------------------------------------------\n        // check for the provider URL property \n        // -------------------------------------------------------------------\n\n        if ( !env.containsKey( Context.PROVIDER_URL ) )\n        {\n            String msg = I18n.err( I18n.ERR_484, Context.PROVIDER_URL );\n            throw new ConfigurationException( msg );\n        }\n\n        String url = ( String ) env.get( Context.PROVIDER_URL );\n\n        if ( url == null )\n        {\n            String msg = I18n.err( I18n.ERR_485, Context.PROVIDER_URL );\n            throw new ConfigurationException( msg );\n        }\n\n        if ( url.trim().equals( \"\" ) )\n        {\n            props.providerDn = Dn.ROOT_DSE;\n        }\n        else\n        {\n            try\n            {\n                props.providerDn = new Dn( url );\n            }\n            catch ( LdapInvalidDnException lide )\n            {\n                String msg = I18n.err( I18n.ERR_733, url );\n                throw new ConfigurationException( msg );\n            }\n        }\n\n        // -------------------------------------------------------------------\n        // Figure out and set the authentication level and mechanisms\n        // -------------------------------------------------------------------\n\n        if ( authentication == null )\n        {\n            // if the property is not set but Context.SECURITY_CREDENTIALS is then SIMPLE\n            if ( credobj == null )\n            {\n                props.level = AuthenticationLevel.NONE;\n            }\n            else\n            {\n                props.level = AuthenticationLevel.SIMPLE;\n            }\n        }\n        else if ( !( authentication instanceof String ) )\n        {\n            throw new ConfigurationException( I18n.err( I18n.ERR_483, authentication.getClass(),\n                Context.SECURITY_AUTHENTICATION ) );\n        }\n        else\n        {\n            if ( AuthenticationLevel.NONE.toString().equals( authentication ) )\n            {\n                props.level = AuthenticationLevel.NONE;\n            }\n            else if ( AuthenticationLevel.SIMPLE.toString().equals( authentication ) )\n            {\n                props.level = AuthenticationLevel.SIMPLE;\n            }\n            else\n            {\n                props.level = AuthenticationLevel.STRONG;\n                props.saslMechanism = ( String ) authentication;\n            }\n        }\n\n        // -------------------------------------------------------------------\n        // Figure out and set the security principal bindDn and saslAuthId\n        // -------------------------------------------------------------------\n\n        if ( principal == null && props.level == AuthenticationLevel.SIMPLE )\n        {\n            throw new ConfigurationException( I18n.err( I18n.ERR_487, Context.SECURITY_PRINCIPAL ) );\n        }\n        else if ( principal == null && props.level == AuthenticationLevel.NONE )\n        {\n            props.bindDn = Dn.EMPTY_DN;\n        }\n        else if ( !( principal instanceof String ) )\n        {\n            throw new ConfigurationException( I18n.err( I18n.ERR_483, principal.getClass(), Context.SECURITY_PRINCIPAL ) );\n        }\n        else if ( ( ( String ) principal ).trim().equals( \"\" ) )\n        {\n            props.bindDn = Dn.EMPTY_DN;\n        }\n        else\n        {\n            try\n            {\n                props.providerDn = new Dn( ( String ) principal );\n            }\n            catch ( LdapInvalidDnException lide )\n            {\n                String msg = I18n.err( I18n.ERR_733, principal );\n                throw new ConfigurationException( msg );\n            }\n\n        }\n\n        if ( env.get( SASL_AUTHID ) != null && props.level == AuthenticationLevel.STRONG )\n        {\n            Object obj = env.get( SASL_AUTHID );\n            if ( obj instanceof String )\n            {\n                props.saslAuthId = ( String ) obj;\n            }\n            else\n            {\n                throw new ConfigurationException( I18n.err( I18n.ERR_483, obj.getClass(), SASL_AUTHID ) );\n            }\n            props.saslAuthId = ( String ) principal;\n        }\n\n        // -------------------------------------------------------------------\n        // Figure out the credentials\n        // -------------------------------------------------------------------\n\n        if ( props.level == AuthenticationLevel.SIMPLE && credobj == null )\n        {\n            throw new ConfigurationException( I18n.err( I18n.ERR_489 ) );\n        }\n        else if ( credobj != null )\n        {\n            if ( credobj instanceof String )\n            {\n                props.credentials = Strings.getBytesUtf8( ( String ) credobj );\n            }\n            else if ( credobj instanceof byte[] )\n            {\n                props.credentials = ( byte[] ) credobj;\n            }\n            else\n            {\n                throw new ConfigurationException( I18n.err( I18n.ERR_483, credobj.getClass(),\n                    Context.SECURITY_CREDENTIALS ) );\n            }\n        }\n\n        return props;\n    }", "signature": "LdapJndiProperties getLdapJndiProperties( Hashtable env )", "full_signature": "public static LdapJndiProperties getLdapJndiProperties( Hashtable env )", "class_method_signature": "LdapJndiProperties.getLdapJndiProperties( Hashtable env )", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "containsKey", "err", "get", "err", "equals", "trim", "err", "err", "getClass", "equals", "toString", "equals", "toString", "err", "err", "getClass", "equals", "trim", "err", "get", "get", "err", "getClass", "err", "getBytesUtf8", "err", "getClass"]}, "repository": {"repo_id": 206437, "url": "https://github.com/apache/directory-server", "language": "Java", "is_fork": false, "fork_count": 58, "stargazer_count": 74, "size": 70769, "license": "licensed"}}