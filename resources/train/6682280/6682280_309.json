{"test_class": {"identifier": "TestCassandraKijiResult", "superclass": "extends CassandraKijiClientTest", "interfaces": "", "fields": [{"original_string": "private static final String PRIMITIVE_FAMILY = \"primitive\";", "modifier": "private static final", "type": "String", "declarator": "PRIMITIVE_FAMILY = \"primitive\"", "var_name": "PRIMITIVE_FAMILY"}, {"original_string": "private static final String STRING_MAP_FAMILY = \"string_map\";", "modifier": "private static final", "type": "String", "declarator": "STRING_MAP_FAMILY = \"string_map\"", "var_name": "STRING_MAP_FAMILY"}, {"original_string": "private static final KijiColumnName PRIMITIVE_STRING =\n      KijiColumnName.create(PRIMITIVE_FAMILY, \"string_column\");", "modifier": "private static final", "type": "KijiColumnName", "declarator": "PRIMITIVE_STRING =\n      KijiColumnName.create(PRIMITIVE_FAMILY, \"string_column\")", "var_name": "PRIMITIVE_STRING"}, {"original_string": "private static final KijiColumnName PRIMITIVE_DOUBLE =\n      KijiColumnName.create(PRIMITIVE_FAMILY, \"double_column\");", "modifier": "private static final", "type": "KijiColumnName", "declarator": "PRIMITIVE_DOUBLE =\n      KijiColumnName.create(PRIMITIVE_FAMILY, \"double_column\")", "var_name": "PRIMITIVE_DOUBLE"}, {"original_string": "private static final KijiColumnName PRIMITIVE_LONG =\n      KijiColumnName.create(PRIMITIVE_FAMILY, \"long_column\");", "modifier": "private static final", "type": "KijiColumnName", "declarator": "PRIMITIVE_LONG =\n      KijiColumnName.create(PRIMITIVE_FAMILY, \"long_column\")", "var_name": "PRIMITIVE_LONG"}, {"original_string": "private static final KijiColumnName STRING_MAP_1 =\n      KijiColumnName.create(STRING_MAP_FAMILY, \"smap_1\");", "modifier": "private static final", "type": "KijiColumnName", "declarator": "STRING_MAP_1 =\n      KijiColumnName.create(STRING_MAP_FAMILY, \"smap_1\")", "var_name": "STRING_MAP_1"}, {"original_string": "private static final KijiColumnName STRING_MAP_2 =\n      KijiColumnName.create(STRING_MAP_FAMILY, \"smap_2\");", "modifier": "private static final", "type": "KijiColumnName", "declarator": "STRING_MAP_2 =\n      KijiColumnName.create(STRING_MAP_FAMILY, \"smap_2\")", "var_name": "STRING_MAP_2"}, {"original_string": "private static final Integer ROW = 1;", "modifier": "private static final", "type": "Integer", "declarator": "ROW = 1", "var_name": "ROW"}, {"original_string": "private static final NavigableMap<KijiColumnName, NavigableMap<Long, ?>>\n      ROW_DATA = ImmutableSortedMap.<KijiColumnName, NavigableMap<Long, ?>>naturalOrder()\n      .put(PRIMITIVE_STRING, ImmutableSortedMap.<Long, Utf8>reverseOrder()\n              .put(10L, new Utf8(\"ten\"))\n              .put(5L, new Utf8(\"five\"))\n              .put(4L, new Utf8(\"four\"))\n              .put(3L, new Utf8(\"three\"))\n              .put(2L, new Utf8(\"two\"))\n              .put(1L, new Utf8(\"one\"))\n              .build())\n      .put(PRIMITIVE_DOUBLE, ImmutableSortedMap.<Long, Double>reverseOrder()\n              .put(10L, 10.0)\n              .put(5L, 5.0)\n              .put(4L, 4.0)\n              .put(3L, 3.0)\n              .put(2L, 2.0)\n              .put(1L, 1.0)\n              .build())\n      .put(KijiColumnName.create(PRIMITIVE_FAMILY, \"long_column\"),\n          ImmutableSortedMap.<Long, Double>reverseOrder()\n              .build())\n      .put(STRING_MAP_1, ImmutableSortedMap.<Long, Utf8>reverseOrder()\n              .put(10L, new Utf8(\"sm1-ten\"))\n              .put(5L, new Utf8(\"sm1-five\"))\n              .put(4L, new Utf8(\"sm1-four\"))\n              .put(3L, new Utf8(\"sm1-three\"))\n              .put(2L, new Utf8(\"sm1-two\"))\n              .put(1L, new Utf8(\"sm1-one\"))\n              .build())\n      .put(STRING_MAP_2, ImmutableSortedMap.<Long, Utf8>reverseOrder()\n              .put(10L, new Utf8(\"sm2-ten\"))\n              .put(5L, new Utf8(\"sm2-five\"))\n              .put(4L, new Utf8(\"sm2-four\"))\n              .put(3L, new Utf8(\"sm2-three\"))\n              .put(2L, new Utf8(\"sm2-two\"))\n              .put(1L, new Utf8(\"sm2-one\"))\n              .build())\n      .build();", "modifier": "private static final", "type": "NavigableMap<KijiColumnName, NavigableMap<Long, ?>>", "declarator": "ROW_DATA = ImmutableSortedMap.<KijiColumnName, NavigableMap<Long, ?>>naturalOrder()\n      .put(PRIMITIVE_STRING, ImmutableSortedMap.<Long, Utf8>reverseOrder()\n              .put(10L, new Utf8(\"ten\"))\n              .put(5L, new Utf8(\"five\"))\n              .put(4L, new Utf8(\"four\"))\n              .put(3L, new Utf8(\"three\"))\n              .put(2L, new Utf8(\"two\"))\n              .put(1L, new Utf8(\"one\"))\n              .build())\n      .put(PRIMITIVE_DOUBLE, ImmutableSortedMap.<Long, Double>reverseOrder()\n              .put(10L, 10.0)\n              .put(5L, 5.0)\n              .put(4L, 4.0)\n              .put(3L, 3.0)\n              .put(2L, 2.0)\n              .put(1L, 1.0)\n              .build())\n      .put(KijiColumnName.create(PRIMITIVE_FAMILY, \"long_column\"),\n          ImmutableSortedMap.<Long, Double>reverseOrder()\n              .build())\n      .put(STRING_MAP_1, ImmutableSortedMap.<Long, Utf8>reverseOrder()\n              .put(10L, new Utf8(\"sm1-ten\"))\n              .put(5L, new Utf8(\"sm1-five\"))\n              .put(4L, new Utf8(\"sm1-four\"))\n              .put(3L, new Utf8(\"sm1-three\"))\n              .put(2L, new Utf8(\"sm1-two\"))\n              .put(1L, new Utf8(\"sm1-one\"))\n              .build())\n      .put(STRING_MAP_2, ImmutableSortedMap.<Long, Utf8>reverseOrder()\n              .put(10L, new Utf8(\"sm2-ten\"))\n              .put(5L, new Utf8(\"sm2-five\"))\n              .put(4L, new Utf8(\"sm2-four\"))\n              .put(3L, new Utf8(\"sm2-three\"))\n              .put(2L, new Utf8(\"sm2-two\"))\n              .put(1L, new Utf8(\"sm2-one\"))\n              .build())\n      .build()", "var_name": "ROW_DATA"}, {"original_string": "private CassandraKijiTable mTable;", "modifier": "private", "type": "CassandraKijiTable", "declarator": "mTable", "var_name": "mTable"}, {"original_string": "private CassandraKijiTableReader mReader;", "modifier": "private", "type": "CassandraKijiTableReader", "declarator": "mReader", "var_name": "mReader"}], "file": "kiji-schema-cassandra/src/test/java/org/kiji/schema/impl/cassandra/TestCassandraKijiResult.java"}, "test_case": {"identifier": "testGetFamilyColumn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetFamilyColumn() throws Exception {\n    final Map<String, ? extends List<KijiColumnName>> families =\n        ImmutableMap.of(\n            PRIMITIVE_FAMILY, ImmutableList.of(PRIMITIVE_DOUBLE, PRIMITIVE_STRING),\n            STRING_MAP_FAMILY, ImmutableList.of(STRING_MAP_1, STRING_MAP_2));\n\n    for (Entry<String, ? extends List<KijiColumnName>> family : families.entrySet()) {\n      for (int pageSize : ImmutableList.of(0, 1, 2, 10)) {\n\n        final KijiColumnName familyColumn = KijiColumnName.create(family.getKey(), null);\n        final KijiColumnName column1 = family.getValue().get(0);\n        final KijiColumnName column2 = family.getValue().get(1);\n\n        { // Single version | no timerange\n          final KijiDataRequest request = KijiDataRequest\n              .builder()\n              .addColumns(ColumnsDef.create().withPageSize(pageSize).add(familyColumn))\n              .build();\n\n          final Iterable<? extends Entry<Long, ?>> column1Entries =\n              Iterables.limit(ROW_DATA.get(column1).entrySet(), 1);\n          final Iterable<? extends Entry<Long, ?>> column2Entries =\n              Iterables.limit(ROW_DATA.get(column2).entrySet(), 1);\n\n          testViewGet(request, Iterables.concat(column1Entries, column2Entries));\n        }\n\n        { // Single version | timerange\n          final KijiDataRequest request = KijiDataRequest\n              .builder()\n              .addColumns(ColumnsDef.create().withPageSize(pageSize).add(familyColumn))\n              .withTimeRange(4, 6)\n              .build();\n\n          final Iterable<? extends Entry<Long, ?>> column1Entries =\n              Iterables.limit(ROW_DATA.get(column1).subMap(6L, false, 4L, true).entrySet(), 1);\n          final Iterable<? extends Entry<Long, ?>> column2Entries =\n              Iterables.limit(ROW_DATA.get(column2).subMap(6L, false, 4L, true).entrySet(), 1);\n\n          testViewGet(request, Iterables.concat(column1Entries, column2Entries));\n        }\n\n        { // Multiple versions | no timerange\n          final KijiDataRequest request = KijiDataRequest\n              .builder()\n              .addColumns(\n                  ColumnsDef\n                      .create()\n                      .withPageSize(pageSize)\n                      .withMaxVersions(100)\n                      .add(familyColumn))\n              .build();\n\n          final Iterable<? extends Entry<Long, ?>> column1Entries =\n              ROW_DATA.get(column1).entrySet();\n          final Iterable<? extends Entry<Long, ?>> column2Entries =\n              ROW_DATA.get(column2).entrySet();\n\n          testViewGet(request, Iterables.concat(column1Entries, column2Entries));\n        }\n\n        { // Multiple versions | timerange\n          final KijiDataRequest request = KijiDataRequest\n              .builder()\n              .addColumns(\n                  ColumnsDef\n                      .create()\n                      .withPageSize(pageSize)\n                      .withMaxVersions(100)\n                      .add(familyColumn))\n              .withTimeRange(4, 6)\n              .build();\n\n          final Iterable<? extends Entry<Long, ?>> column1Entries =\n              ROW_DATA.get(column1).subMap(6L, false, 4L, true).entrySet();\n          final Iterable<? extends Entry<Long, ?>> column2Entries =\n              ROW_DATA.get(column2).subMap(6L, false, 4L, true).entrySet();\n\n          testViewGet(request, Iterables.concat(column1Entries, column2Entries));\n        }\n      }\n    }\n  }", "signature": "void testGetFamilyColumn()", "full_signature": "@Test public void testGetFamilyColumn()", "class_method_signature": "TestCassandraKijiResult.testGetFamilyColumn()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "entrySet", "of", "create", "getKey", "get", "getValue", "get", "getValue", "build", "addColumns", "builder", "add", "withPageSize", "create", "limit", "entrySet", "get", "limit", "entrySet", "get", "testViewGet", "concat", "build", "withTimeRange", "addColumns", "builder", "add", "withPageSize", "create", "limit", "entrySet", "subMap", "get", "limit", "entrySet", "subMap", "get", "testViewGet", "concat", "build", "addColumns", "builder", "add", "withMaxVersions", "withPageSize", "create", "entrySet", "get", "entrySet", "get", "testViewGet", "concat", "build", "withTimeRange", "addColumns", "builder", "add", "withMaxVersions", "withPageSize", "create", "entrySet", "subMap", "get", "entrySet", "subMap", "get", "testViewGet", "concat"]}, "focal_class": {"identifier": "CassandraKijiResult", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CassandraKijiResult.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CassandraKijiResult.class)", "var_name": "LOG"}], "methods": [{"identifier": "create", "parameters": "(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "modifiers": "public static", "return": "KijiResult<T>", "signature": "KijiResult<T> create(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "full_signature": "public static KijiResult<T> create(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "class_method_signature": "CassandraKijiResult.create(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "testcase": false, "constructor": false}, {"identifier": "createMaterialized", "parameters": "(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "modifiers": "public static", "return": "MaterializedKijiResult<T>", "signature": "MaterializedKijiResult<T> createMaterialized(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "full_signature": "public static MaterializedKijiResult<T> createMaterialized(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "class_method_signature": "CassandraKijiResult.createMaterialized(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final Column columnRequest,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "modifiers": "public static", "return": "ListenableFuture<Iterator<KijiCell<T>>>", "signature": "ListenableFuture<Iterator<KijiCell<T>>> getColumn(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final Column columnRequest,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "full_signature": "public static ListenableFuture<Iterator<KijiCell<T>>> getColumn(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final Column columnRequest,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "class_method_signature": "CassandraKijiResult.getColumn(\n      final KijiURI tableURI,\n      final EntityId entityId,\n      final Column columnRequest,\n      final KijiDataRequest dataRequest,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator translator,\n      final CellDecoderProvider decoderProvider,\n      final CassandraAdmin admin\n  )", "testcase": false, "constructor": false}, {"identifier": "unwrapFuture", "parameters": "(final ListenableFuture<T> future)", "modifiers": "public static", "return": "T", "signature": "T unwrapFuture(final ListenableFuture<T> future)", "full_signature": "public static T unwrapFuture(final ListenableFuture<T> future)", "class_method_signature": "CassandraKijiResult.unwrapFuture(final ListenableFuture<T> future)", "testcase": false, "constructor": false}, {"identifier": "CassandraKijiResult", "parameters": "()", "modifiers": "private", "return": "", "signature": " CassandraKijiResult()", "full_signature": "private  CassandraKijiResult()", "class_method_signature": "CassandraKijiResult.CassandraKijiResult()", "testcase": false, "constructor": true}], "file": "kiji-schema-cassandra/src/main/java/org/kiji/schema/impl/cassandra/CassandraKijiResult.java"}, "focal_method": {"identifier": "create", "parameters": "(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "modifiers": "public static", "return": "KijiResult<T>", "body": "public static <T> KijiResult<T> create(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  ) throws IOException {\n    final KijiDataRequestBuilder unpagedRequestBuilder = KijiDataRequest.builder();\n    final KijiDataRequestBuilder pagedRequestBuilder = KijiDataRequest.builder();\n    unpagedRequestBuilder.withTimeRange(\n        dataRequest.getMinTimestamp(),\n        dataRequest.getMaxTimestamp());\n    pagedRequestBuilder.withTimeRange(dataRequest.getMinTimestamp(), dataRequest.getMaxTimestamp());\n\n    for (final Column columnRequest : dataRequest.getColumns()) {\n      if (columnRequest.getFilter() != null) {\n        throw new UnsupportedOperationException(\n            String.format(\"Cassandra Kiji does not support filters on column requests: %s.\",\n                columnRequest));\n      }\n      if (columnRequest.isPagingEnabled()) {\n        pagedRequestBuilder.newColumnsDef(columnRequest);\n      } else {\n        unpagedRequestBuilder.newColumnsDef(columnRequest);\n      }\n    }\n\n    final CellDecoderProvider requestDecoderProvider =\n        decoderProvider.getDecoderProviderForRequest(dataRequest);\n\n    final KijiDataRequest unpagedRequest = unpagedRequestBuilder.build();\n    final KijiDataRequest pagedRequest = pagedRequestBuilder.build();\n\n    if (unpagedRequest.isEmpty() && pagedRequest.isEmpty()) {\n      return new EmptyKijiResult<T>(entityId, dataRequest);\n    }\n\n    final MaterializedKijiResult<T> materializedKijiResult;\n    if (!unpagedRequest.isEmpty()) {\n      materializedKijiResult =\n          createMaterialized(\n              table.getURI(),\n              entityId,\n              unpagedRequest,\n              layout,\n              columnTranslator,\n              requestDecoderProvider,\n              table.getAdmin());\n    } else {\n      materializedKijiResult = null;\n    }\n\n    final CassandraPagedKijiResult<T> pagedKijiResult;\n    if (!pagedRequest.isEmpty()) {\n      pagedKijiResult =\n          new CassandraPagedKijiResult<T>(\n              entityId,\n              pagedRequest,\n              table,\n              layout,\n              columnTranslator,\n              requestDecoderProvider);\n    } else {\n      pagedKijiResult = null;\n    }\n\n    if (unpagedRequest.isEmpty()) {\n      return pagedKijiResult;\n    } else if (pagedRequest.isEmpty()) {\n      return materializedKijiResult;\n    } else {\n      return DefaultKijiResult.create(dataRequest, materializedKijiResult, pagedKijiResult);\n    }\n  }", "signature": "KijiResult<T> create(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "full_signature": "public static KijiResult<T> create(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "class_method_signature": "CassandraKijiResult.create(\n      final EntityId entityId,\n      final KijiDataRequest dataRequest,\n      final CassandraKijiTable table,\n      final KijiTableLayout layout,\n      final CassandraColumnNameTranslator columnTranslator,\n      final CellDecoderProvider decoderProvider\n  )", "testcase": false, "constructor": false, "invocations": ["builder", "builder", "withTimeRange", "getMinTimestamp", "getMaxTimestamp", "withTimeRange", "getMinTimestamp", "getMaxTimestamp", "getColumns", "getFilter", "format", "isPagingEnabled", "newColumnsDef", "newColumnsDef", "getDecoderProviderForRequest", "build", "build", "isEmpty", "isEmpty", "isEmpty", "createMaterialized", "getURI", "getAdmin", "isEmpty", "isEmpty", "isEmpty", "create"]}, "repository": {"repo_id": 6682280, "url": "https://github.com/kijiproject/kiji-schema", "language": "Java", "is_fork": false, "fork_count": 44, "stargazer_count": 55, "size": 11689, "license": "licensed"}}