{"test_class": {"identifier": "RSAUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger logger = LogManager.getLogger(RSAUtilTest.class.getName());", "modifier": "static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(RSAUtilTest.class.getName())", "var_name": "logger"}, {"original_string": "static RSAPublicKey pubKey;", "modifier": "static", "type": "RSAPublicKey", "declarator": "pubKey", "var_name": "pubKey"}, {"original_string": "static RSAPrivateKey priKey;", "modifier": "static", "type": "RSAPrivateKey", "declarator": "priKey", "var_name": "priKey"}], "file": "sdk-server/src/test/java/com/li3huo/sdk/tools/RSAUtilTest.java"}, "test_case": {"identifier": "loadKeyFromProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void loadKeyFromProperties() {\n\t\tString privateKey = App.getProperty(\"500006.channel.lenovo.appsecret\", \"\");\n\t\tlogger.debug(\"loadKeyFromProperties() privateKey = \" + privateKey);\n\t\tPrivateKey priKey = null;\n\t\ttry {\n\t\t\tpriKey = RSAUtil.parsePrivateKey(privateKey);\n\t\t} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tAssert.assertNotNull(priKey);\n\t}", "signature": "void loadKeyFromProperties()", "full_signature": "@Test public void loadKeyFromProperties()", "class_method_signature": "RSAUtilTest.loadKeyFromProperties()", "testcase": true, "constructor": false, "invocations": ["getProperty", "debug", "parsePrivateKey", "printStackTrace", "assertNotNull"]}, "focal_class": {"identifier": "RSAUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger logger = LogManager.getLogger(RSAUtil.class.getName());", "modifier": "static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(RSAUtil.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "generateKeyPair", "parameters": "(String keyFilePath)", "modifiers": "public static", "return": "void", "signature": "void generateKeyPair(String keyFilePath)", "full_signature": "public static void generateKeyPair(String keyFilePath)", "class_method_signature": "RSAUtil.generateKeyPair(String keyFilePath)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(String keyFilePath)", "modifiers": "public static", "return": "RSAPrivateKey", "signature": "RSAPrivateKey loadPrivateKey(String keyFilePath)", "full_signature": "public static RSAPrivateKey loadPrivateKey(String keyFilePath)", "class_method_signature": "RSAUtil.loadPrivateKey(String keyFilePath)", "testcase": false, "constructor": false}, {"identifier": "parsePrivateKey", "parameters": "(String keyStr)", "modifiers": "public static", "return": "RSAPrivateKey", "signature": "RSAPrivateKey parsePrivateKey(String keyStr)", "full_signature": "public static RSAPrivateKey parsePrivateKey(String keyStr)", "class_method_signature": "RSAUtil.parsePrivateKey(String keyStr)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKey", "parameters": "(String keyFilePath)", "modifiers": "public static", "return": "RSAPublicKey", "signature": "RSAPublicKey loadPublicKey(String keyFilePath)", "full_signature": "public static RSAPublicKey loadPublicKey(String keyFilePath)", "class_method_signature": "RSAUtil.loadPublicKey(String keyFilePath)", "testcase": false, "constructor": false}, {"identifier": "parsePublicKey", "parameters": "(String keyStr)", "modifiers": "public static", "return": "RSAPublicKey", "signature": "RSAPublicKey parsePublicKey(String keyStr)", "full_signature": "public static RSAPublicKey parsePublicKey(String keyStr)", "class_method_signature": "RSAUtil.parsePublicKey(String keyStr)", "testcase": false, "constructor": false}, {"identifier": "enc", "parameters": "(String txt, Key key)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] enc(String txt, Key key)", "full_signature": "public static byte[] enc(String txt, Key key)", "class_method_signature": "RSAUtil.enc(String txt, Key key)", "testcase": false, "constructor": false}, {"identifier": "enc2str", "parameters": "(String txt, Key key)", "modifiers": "public static", "return": "String", "signature": "String enc2str(String txt, Key key)", "full_signature": "public static String enc2str(String txt, Key key)", "class_method_signature": "RSAUtil.enc2str(String txt, Key key)", "testcase": false, "constructor": false}, {"identifier": "dec", "parameters": "(byte[] data, Key key)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] dec(byte[] data, Key key)", "full_signature": "public static byte[] dec(byte[] data, Key key)", "class_method_signature": "RSAUtil.dec(byte[] data, Key key)", "testcase": false, "constructor": false}, {"identifier": "bytesToHexString", "parameters": "(byte[] bytesArray)", "modifiers": "public static", "return": "StringBuilder", "signature": "StringBuilder bytesToHexString(byte[] bytesArray)", "full_signature": "public static StringBuilder bytesToHexString(byte[] bytesArray)", "class_method_signature": "RSAUtil.bytesToHexString(byte[] bytesArray)", "testcase": false, "constructor": false}, {"identifier": "HmacSHA1Encrypt", "parameters": "(byte[] encryptData, String encryptKey)", "modifiers": "public static", "return": "String", "signature": "String HmacSHA1Encrypt(byte[] encryptData, String encryptKey)", "full_signature": "public static String HmacSHA1Encrypt(byte[] encryptData, String encryptKey)", "class_method_signature": "RSAUtil.HmacSHA1Encrypt(byte[] encryptData, String encryptKey)", "testcase": false, "constructor": false}, {"identifier": "signWithSHA1WithRSA", "parameters": "(String content, String privateKey, String input_charset)", "modifiers": "public static", "return": "String", "signature": "String signWithSHA1WithRSA(String content, String privateKey, String input_charset)", "full_signature": "public static String signWithSHA1WithRSA(String content, String privateKey, String input_charset)", "class_method_signature": "RSAUtil.signWithSHA1WithRSA(String content, String privateKey, String input_charset)", "testcase": false, "constructor": false}, {"identifier": "signWithHmacSHA1", "parameters": "(String content, String privateKey)", "modifiers": "public static", "return": "String", "signature": "String signWithHmacSHA1(String content, String privateKey)", "full_signature": "public static String signWithHmacSHA1(String content, String privateKey)", "class_method_signature": "RSAUtil.signWithHmacSHA1(String content, String privateKey)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] content, PrivateKey priKey, String dsa)", "modifiers": "public static", "return": "String", "signature": "String sign(byte[] content, PrivateKey priKey, String dsa)", "full_signature": "public static String sign(byte[] content, PrivateKey priKey, String dsa)", "class_method_signature": "RSAUtil.sign(byte[] content, PrivateKey priKey, String dsa)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, String sign, PublicKey pubKey, String dsa)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, String sign, PublicKey pubKey, String dsa)", "full_signature": "public static boolean verify(byte[] data, String sign, PublicKey pubKey, String dsa)", "class_method_signature": "RSAUtil.verify(byte[] data, String sign, PublicKey pubKey, String dsa)", "testcase": false, "constructor": false}], "file": "sdk-server/src/main/java/com/li3huo/sdk/tools/RSAUtil.java"}, "focal_method": {"identifier": "parsePrivateKey", "parameters": "(String keyStr)", "modifiers": "public static", "return": "RSAPrivateKey", "body": "public static RSAPrivateKey parsePrivateKey(String keyStr)\n\t\t\tthrows NoSuchAlgorithmException, InvalidKeySpecException {\n\n\t\tlogger.debug(\"parsePrivateKey() key:\\n\" + keyStr);\n\t\tKeyFactory kf = KeyFactory.getInstance(\"RSA\");\n\n\t\tPKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.decodeBase64(keyStr));\n\t\tRSAPrivateKey key = (RSAPrivateKey) kf.generatePrivate(keySpec);\n\n\t\treturn key;\n\t}", "signature": "RSAPrivateKey parsePrivateKey(String keyStr)", "full_signature": "public static RSAPrivateKey parsePrivateKey(String keyStr)", "class_method_signature": "RSAUtil.parsePrivateKey(String keyStr)", "testcase": false, "constructor": false, "invocations": ["debug", "getInstance", "decodeBase64", "generatePrivate"]}, "repository": {"repo_id": 7436396, "url": "https://github.com/twotwo/framework-java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 12, "size": 285, "license": "licensed"}}