{"test_class": {"identifier": "BundleTest", "superclass": "extends AbstractDSpaceObjectTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(BundleTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(BundleTest.class)", "var_name": "log"}, {"original_string": "private Bundle b;", "modifier": "private", "type": "Bundle", "declarator": "b", "var_name": "b"}], "file": "dspace-api/src/test/java/org/dspace/content/BundleTest.java"}, "test_case": {"identifier": "testInheritCollectionDefaultPolicies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInheritCollectionDefaultPolicies() throws AuthorizeException, SQLException\n    {\n        Collection c = Collection.create(context);\n\n        //TODO: we would need a method to get policies from collection, probably better!\n        List<ResourcePolicy> newpolicies = AuthorizeManager.getPoliciesActionFilter(context, c,\n                Constants.DEFAULT_BITSTREAM_READ);\n        Iterator<ResourcePolicy> it = newpolicies.iterator();\n        while (it.hasNext())\n        {\n            ResourcePolicy rp = (ResourcePolicy) it.next();\n            rp.setAction(Constants.READ);\n        }\n\n        b.inheritCollectionDefaultPolicies(c);\n\n        List<ResourcePolicy> bspolicies = b.getBundlePolicies();\n        assertTrue(\"testInheritCollectionDefaultPolicies 0\", newpolicies.size() == bspolicies.size());\n\n        boolean equals = true;\n        for(int i=0; i < newpolicies.size() && equals; i++)\n        {\n            if(!newpolicies.contains(bspolicies.get(i)))\n            {\n                equals = false;\n            }\n        }\n        assertTrue(\"testInheritCollectionDefaultPolicies 1\", equals);\n\n        bspolicies = b.getBitstreamPolicies();\n        boolean exists = true;\n        for(int i=0; bspolicies.size() > 0 && i < newpolicies.size() && exists; i++)\n        {\n            if(!bspolicies.contains(newpolicies.get(i)))\n            {\n                exists = false;\n            }\n        }\n        assertTrue(\"testInheritCollectionDefaultPolicies 2\", exists);\n        \n    }", "signature": "void testInheritCollectionDefaultPolicies()", "full_signature": "@Test public void testInheritCollectionDefaultPolicies()", "class_method_signature": "BundleTest.testInheritCollectionDefaultPolicies()", "testcase": true, "constructor": false, "invocations": ["create", "getPoliciesActionFilter", "iterator", "hasNext", "next", "setAction", "inheritCollectionDefaultPolicies", "getBundlePolicies", "assertTrue", "size", "size", "size", "contains", "get", "assertTrue", "getBitstreamPolicies", "size", "size", "contains", "get", "assertTrue"]}, "focal_class": {"identifier": "Bundle", "superclass": "extends DSpaceObject", "interfaces": "", "fields": [{"original_string": "private static Logger log = Logger.getLogger(Bundle.class);", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(Bundle.class)", "var_name": "log"}, {"original_string": "private Context ourContext;", "modifier": "private", "type": "Context", "declarator": "ourContext", "var_name": "ourContext"}, {"original_string": "private TableRow bundleRow;", "modifier": "private", "type": "TableRow", "declarator": "bundleRow", "var_name": "bundleRow"}, {"original_string": "private List<Bitstream> bitstreams;", "modifier": "private", "type": "List<Bitstream>", "declarator": "bitstreams", "var_name": "bitstreams"}, {"original_string": "private boolean modified;", "modifier": "private", "type": "boolean", "declarator": "modified", "var_name": "modified"}, {"original_string": "private boolean modifiedMetadata;", "modifier": "private", "type": "boolean", "declarator": "modifiedMetadata", "var_name": "modifiedMetadata"}], "methods": [{"identifier": "Bundle", "parameters": "(Context context, TableRow row)", "modifiers": "", "return": "", "signature": " Bundle(Context context, TableRow row)", "full_signature": "  Bundle(Context context, TableRow row)", "class_method_signature": "Bundle.Bundle(Context context, TableRow row)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(Context context, int id)", "modifiers": "public static", "return": "Bundle", "signature": "Bundle find(Context context, int id)", "full_signature": "public static Bundle find(Context context, int id)", "class_method_signature": "Bundle.find(Context context, int id)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Context context)", "modifiers": "static", "return": "Bundle", "signature": "Bundle create(Context context)", "full_signature": "static Bundle create(Context context)", "class_method_signature": "Bundle.create(Context context)", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getID()", "full_signature": "public int getID()", "class_method_signature": "Bundle.getID()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Bundle.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "Bundle.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryBitstreamID", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPrimaryBitstreamID()", "full_signature": "public int getPrimaryBitstreamID()", "class_method_signature": "Bundle.getPrimaryBitstreamID()", "testcase": false, "constructor": false}, {"identifier": "setPrimaryBitstreamID", "parameters": "(int bitstreamID)", "modifiers": "public", "return": "void", "signature": "void setPrimaryBitstreamID(int bitstreamID)", "full_signature": "public void setPrimaryBitstreamID(int bitstreamID)", "class_method_signature": "Bundle.setPrimaryBitstreamID(int bitstreamID)", "testcase": false, "constructor": false}, {"identifier": "unsetPrimaryBitstreamID", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsetPrimaryBitstreamID()", "full_signature": "public void unsetPrimaryBitstreamID()", "class_method_signature": "Bundle.unsetPrimaryBitstreamID()", "testcase": false, "constructor": false}, {"identifier": "getHandle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHandle()", "full_signature": "public String getHandle()", "class_method_signature": "Bundle.getHandle()", "testcase": false, "constructor": false}, {"identifier": "getBitstreamByName", "parameters": "(String name)", "modifiers": "public", "return": "Bitstream", "signature": "Bitstream getBitstreamByName(String name)", "full_signature": "public Bitstream getBitstreamByName(String name)", "class_method_signature": "Bundle.getBitstreamByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getBitstreams", "parameters": "()", "modifiers": "public", "return": "Bitstream[]", "signature": "Bitstream[] getBitstreams()", "full_signature": "public Bitstream[] getBitstreams()", "class_method_signature": "Bundle.getBitstreams()", "testcase": false, "constructor": false}, {"identifier": "getItems", "parameters": "()", "modifiers": "public", "return": "Item[]", "signature": "Item[] getItems()", "full_signature": "public Item[] getItems()", "class_method_signature": "Bundle.getItems()", "testcase": false, "constructor": false}, {"identifier": "createBitstream", "parameters": "(InputStream is)", "modifiers": "public", "return": "Bitstream", "signature": "Bitstream createBitstream(InputStream is)", "full_signature": "public Bitstream createBitstream(InputStream is)", "class_method_signature": "Bundle.createBitstream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "registerBitstream", "parameters": "(int assetstore, String bitstreamPath)", "modifiers": "public", "return": "Bitstream", "signature": "Bitstream registerBitstream(int assetstore, String bitstreamPath)", "full_signature": "public Bitstream registerBitstream(int assetstore, String bitstreamPath)", "class_method_signature": "Bundle.registerBitstream(int assetstore, String bitstreamPath)", "testcase": false, "constructor": false}, {"identifier": "addBitstream", "parameters": "(Bitstream b)", "modifiers": "public", "return": "void", "signature": "void addBitstream(Bitstream b)", "full_signature": "public void addBitstream(Bitstream b)", "class_method_signature": "Bundle.addBitstream(Bitstream b)", "testcase": false, "constructor": false}, {"identifier": "setOrder", "parameters": "(int bitstreamIds[])", "modifiers": "public", "return": "void", "signature": "void setOrder(int bitstreamIds[])", "full_signature": "public void setOrder(int bitstreamIds[])", "class_method_signature": "Bundle.setOrder(int bitstreamIds[])", "testcase": false, "constructor": false}, {"identifier": "removeBitstream", "parameters": "(Bitstream b)", "modifiers": "public", "return": "void", "signature": "void removeBitstream(Bitstream b)", "full_signature": "public void removeBitstream(Bitstream b)", "class_method_signature": "Bundle.removeBitstream(Bitstream b)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void update()", "full_signature": "public void update()", "class_method_signature": "Bundle.update()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "", "return": "void", "signature": "void delete()", "full_signature": " void delete()", "class_method_signature": "Bundle.delete()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getType()", "full_signature": "public int getType()", "class_method_signature": "Bundle.getType()", "testcase": false, "constructor": false}, {"identifier": "inheritCollectionDefaultPolicies", "parameters": "(Collection c)", "modifiers": "public", "return": "void", "signature": "void inheritCollectionDefaultPolicies(Collection c)", "full_signature": "public void inheritCollectionDefaultPolicies(Collection c)", "class_method_signature": "Bundle.inheritCollectionDefaultPolicies(Collection c)", "testcase": false, "constructor": false}, {"identifier": "replaceAllBitstreamPolicies", "parameters": "(List<ResourcePolicy> newpolicies)", "modifiers": "public", "return": "void", "signature": "void replaceAllBitstreamPolicies(List<ResourcePolicy> newpolicies)", "full_signature": "public void replaceAllBitstreamPolicies(List<ResourcePolicy> newpolicies)", "class_method_signature": "Bundle.replaceAllBitstreamPolicies(List<ResourcePolicy> newpolicies)", "testcase": false, "constructor": false}, {"identifier": "getBundlePolicies", "parameters": "()", "modifiers": "public", "return": "List<ResourcePolicy>", "signature": "List<ResourcePolicy> getBundlePolicies()", "full_signature": "public List<ResourcePolicy> getBundlePolicies()", "class_method_signature": "Bundle.getBundlePolicies()", "testcase": false, "constructor": false}, {"identifier": "getBitstreamPolicies", "parameters": "()", "modifiers": "public", "return": "List<ResourcePolicy>", "signature": "List<ResourcePolicy> getBitstreamPolicies()", "full_signature": "public List<ResourcePolicy> getBitstreamPolicies()", "class_method_signature": "Bundle.getBitstreamPolicies()", "testcase": false, "constructor": false}, {"identifier": "getAdminObject", "parameters": "(int action)", "modifiers": "public", "return": "DSpaceObject", "signature": "DSpaceObject getAdminObject(int action)", "full_signature": "public DSpaceObject getAdminObject(int action)", "class_method_signature": "Bundle.getAdminObject(int action)", "testcase": false, "constructor": false}, {"identifier": "getParentObject", "parameters": "()", "modifiers": "public", "return": "DSpaceObject", "signature": "DSpaceObject getParentObject()", "full_signature": "public DSpaceObject getParentObject()", "class_method_signature": "Bundle.getParentObject()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/Bundle.java"}, "focal_method": {"identifier": "inheritCollectionDefaultPolicies", "parameters": "(Collection c)", "modifiers": "public", "return": "void", "body": "public void inheritCollectionDefaultPolicies(Collection c)\n            throws java.sql.SQLException, AuthorizeException\n    {\n        List<ResourcePolicy> policies = AuthorizeManager.getPoliciesActionFilter(ourContext, c,\n                Constants.DEFAULT_BITSTREAM_READ);\n\n        // change the action to just READ\n        // just don't call update on the resourcepolicies!!!\n        Iterator<ResourcePolicy> i = policies.iterator();\n\n        if (!i.hasNext())\n        {\n            throw new java.sql.SQLException(\"Collection \" + c.getID()\n                    + \" has no default bitstream READ policies\");\n        }\n\n        while (i.hasNext())\n        {\n            ResourcePolicy rp = (ResourcePolicy) i.next();\n            rp.setAction(Constants.READ);\n        }\n\n        replaceAllBitstreamPolicies(policies);\n    }", "signature": "void inheritCollectionDefaultPolicies(Collection c)", "full_signature": "public void inheritCollectionDefaultPolicies(Collection c)", "class_method_signature": "Bundle.inheritCollectionDefaultPolicies(Collection c)", "testcase": false, "constructor": false, "invocations": ["getPoliciesActionFilter", "iterator", "hasNext", "getID", "hasNext", "next", "setAction", "replaceAllBitstreamPolicies"]}, "repository": {"repo_id": 1469749, "url": "https://github.com/DSpace/DSpace-SVN-Deprecated", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 10, "size": 81375, "license": "licensed"}}