{"test_class": {"identifier": "MocoMountTest", "superclass": "extends AbstractMocoHttpTest", "interfaces": "", "fields": [{"original_string": "private static final String MOUNT_DIR = \"src/test/resources/test\";", "modifier": "private static final", "type": "String", "declarator": "MOUNT_DIR = \"src/test/resources/test\"", "var_name": "MOUNT_DIR"}], "file": "moco-core/src/test/java/com/github/dreamhead/moco/MocoMountTest.java"}, "test_case": {"identifier": "should_return_bad_request_for_nonexistence_file", "parameters": "()", "modifiers": "@Test(expected = HttpResponseException.class) public", "return": "void", "body": "@Test(expected = HttpResponseException.class)\n    public void should_return_bad_request_for_nonexistence_file() throws Exception {\n        server.mount(MOUNT_DIR, to(\"/dir\"));\n\n        running(server, new Runnable() {\n            @Override\n            public void run() throws IOException {\n                helper.get(remoteUrl(\"/dir/unknown.response\"));\n            }\n        });\n    }", "signature": "void should_return_bad_request_for_nonexistence_file()", "full_signature": "@Test(expected = HttpResponseException.class) public void should_return_bad_request_for_nonexistence_file()", "class_method_signature": "MocoMountTest.should_return_bad_request_for_nonexistence_file()", "testcase": true, "constructor": false, "invocations": ["mount", "to", "running", "get", "remoteUrl"]}, "focal_class": {"identifier": "MocoMount", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "to", "parameters": "(final String target)", "modifiers": "public static", "return": "MountTo", "signature": "MountTo to(final String target)", "full_signature": "public static MountTo to(final String target)", "class_method_signature": "MocoMount.to(final String target)", "testcase": false, "constructor": false}, {"identifier": "include", "parameters": "(final String glob)", "modifiers": "public static", "return": "MountPredicate", "signature": "MountPredicate include(final String glob)", "full_signature": "public static MountPredicate include(final String glob)", "class_method_signature": "MocoMount.include(final String glob)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(final String glob)", "modifiers": "public static", "return": "MountPredicate", "signature": "MountPredicate exclude(final String glob)", "full_signature": "public static MountPredicate exclude(final String glob)", "class_method_signature": "MocoMount.exclude(final String glob)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(final MountPredicate predicate)", "modifiers": "private static", "return": "MountPredicate", "signature": "MountPredicate not(final MountPredicate predicate)", "full_signature": "private static MountPredicate not(final MountPredicate predicate)", "class_method_signature": "MocoMount.not(final MountPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "MocoMount", "parameters": "()", "modifiers": "private", "return": "", "signature": " MocoMount()", "full_signature": "private  MocoMount()", "class_method_signature": "MocoMount.MocoMount()", "testcase": false, "constructor": true}], "file": "moco-core/src/main/java/com/github/dreamhead/moco/MocoMount.java"}, "focal_method": {"identifier": "to", "parameters": "(final String target)", "modifiers": "public static", "return": "MountTo", "body": "public static MountTo to(final String target) {\n        return new MountTo(checkNotNullOrEmpty(target, \"Target should not be null\"));\n    }", "signature": "MountTo to(final String target)", "full_signature": "public static MountTo to(final String target)", "class_method_signature": "MocoMount.to(final String target)", "testcase": false, "constructor": false, "invocations": ["checkNotNullOrEmpty"]}, "repository": {"repo_id": 6275822, "url": "https://github.com/dreamhead/moco", "language": "Java", "is_fork": false, "fork_count": 839, "stargazer_count": 3213, "size": 4874, "license": "licensed"}}