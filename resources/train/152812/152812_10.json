{"test_class": {"identifier": "LRUCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/de/javakaffee/web/msm/LRUCacheTest.java"}, "test_case": {"identifier": "testGetKeysSortedByValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetKeysSortedByValue() {\n        final LRUCache<String,Integer> cut = new LRUCache<String, Integer>( 3 );\n        final String f = \"foo\";\n        final String br = \"bar\";\n\n        cut.put(f, 1);\n        cut.put(br, 2);\n\n        final Comparator<Integer> c = new Comparator<Integer>() {\n\n            @Override\n            public int compare( final Integer o1, final Integer o2 ) {\n                return o1.compareTo( o2 );\n            }\n\n        };\n\n        Assert.assertTrue( Arrays.equals( new String[]{ f, br }, cut.getKeysSortedByValue( c ).toArray() ),\n                \"invalid order of items, the keys are not order by their values\" );\n\n        cut.put(f, 3);\n        Assert.assertTrue( Arrays.equals( new String[]{ br, f }, cut.getKeysSortedByValue( c ).toArray() ),\n                \"invalid order of items, the keys are not order by their values\" );\n    }", "signature": "void testGetKeysSortedByValue()", "full_signature": "@Test public void testGetKeysSortedByValue()", "class_method_signature": "LRUCacheTest.testGetKeysSortedByValue()", "testcase": true, "constructor": false, "invocations": ["put", "put", "compareTo", "assertTrue", "equals", "toArray", "getKeysSortedByValue", "put", "assertTrue", "equals", "toArray", "getKeysSortedByValue"]}, "focal_class": {"identifier": "LRUCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int _size;", "modifier": "private final", "type": "int", "declarator": "_size", "var_name": "_size"}, {"original_string": "private final long _ttl;", "modifier": "private final", "type": "long", "declarator": "_ttl", "var_name": "_ttl"}, {"original_string": "private final LinkedHashMap<K, ManagedItem<V>> _map;", "modifier": "private final", "type": "LinkedHashMap<K, ManagedItem<V>>", "declarator": "_map", "var_name": "_map"}], "methods": [{"identifier": "LRUCache", "parameters": "( final int size )", "modifiers": "public", "return": "", "signature": " LRUCache( final int size )", "full_signature": "public  LRUCache( final int size )", "class_method_signature": "LRUCache.LRUCache( final int size )", "testcase": false, "constructor": true}, {"identifier": "LRUCache", "parameters": "( final int size, final long ttlInMillis )", "modifiers": "public", "return": "", "signature": " LRUCache( final int size, final long ttlInMillis )", "full_signature": "public  LRUCache( final int size, final long ttlInMillis )", "class_method_signature": "LRUCache.LRUCache( final int size, final long ttlInMillis )", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "LRUCache.clear()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "( final K key, final V value )", "modifiers": "public", "return": "V", "signature": "V put( final K key, final V value )", "full_signature": "public V put( final K key, final V value )", "class_method_signature": "LRUCache.put( final K key, final V value )", "testcase": false, "constructor": false}, {"identifier": "putIfDifferent", "parameters": "( final K key, final V value )", "modifiers": "public", "return": "V", "signature": "V putIfDifferent( final K key, final V value )", "full_signature": "public V putIfDifferent( final K key, final V value )", "class_method_signature": "LRUCache.putIfDifferent( final K key, final V value )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "( final K key )", "modifiers": "public", "return": "V", "signature": "V remove( final K key )", "full_signature": "public V remove( final K key )", "class_method_signature": "LRUCache.remove( final K key )", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "( final K key )", "modifiers": "public", "return": "V", "signature": "V get( final K key )", "full_signature": "public V get( final K key )", "class_method_signature": "LRUCache.get( final K key )", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "( final K key )", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey( final K key )", "full_signature": "public boolean containsKey( final K key )", "class_method_signature": "LRUCache.containsKey( final K key )", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "public", "return": "List<K>", "signature": "List<K> getKeys()", "full_signature": "public List<K> getKeys()", "class_method_signature": "LRUCache.getKeys()", "testcase": false, "constructor": false}, {"identifier": "getKeysSortedByValue", "parameters": "( final Comparator<V> comparator )", "modifiers": "public", "return": "List<K>", "signature": "List<K> getKeysSortedByValue( final Comparator<V> comparator )", "full_signature": "public List<K> getKeysSortedByValue( final Comparator<V> comparator )", "class_method_signature": "LRUCache.getKeysSortedByValue( final Comparator<V> comparator )", "testcase": false, "constructor": false}], "file": "core/src/main/java/de/javakaffee/web/msm/LRUCache.java"}, "focal_method": {"identifier": "getKeysSortedByValue", "parameters": "( final Comparator<V> comparator )", "modifiers": "public", "return": "List<K>", "body": "public List<K> getKeysSortedByValue( final Comparator<V> comparator ) {\n        synchronized ( _map ) {\n            @SuppressWarnings( \"unchecked\" )\n            final\n            Entry<K, ManagedItem<V>>[] a = _map.entrySet().toArray( new Map.Entry[_map.size()] );\n            final Comparator<Entry<K, ManagedItem<V>>> c = new Comparator<Entry<K, ManagedItem<V>>>() {\n\n                @Override\n                public int compare( final Entry<K, ManagedItem<V>> o1, final Entry<K, ManagedItem<V>> o2 ) {\n                    return comparator.compare( o1.getValue()._value, o2.getValue()._value );\n                }\n\n            };\n            Arrays.sort(a, c);\n            return new LRUCache.ArrayList<K, V>( a );\n        }\n    }", "signature": "List<K> getKeysSortedByValue( final Comparator<V> comparator )", "full_signature": "public List<K> getKeysSortedByValue( final Comparator<V> comparator )", "class_method_signature": "LRUCache.getKeysSortedByValue( final Comparator<V> comparator )", "testcase": false, "constructor": false, "invocations": ["toArray", "entrySet", "size", "compare", "getValue", "getValue", "sort"]}, "repository": {"repo_id": 152812, "url": "https://github.com/magro/memcached-session-manager", "language": "Java", "is_fork": false, "fork_count": 352, "stargazer_count": 743, "size": 5794, "license": "licensed"}}