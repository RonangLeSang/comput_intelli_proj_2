{"test_class": {"identifier": "MergerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private Provider<SubMergeable> subMergeableProvider;", "modifier": "@Inject\n    private", "type": "Provider<SubMergeable>", "declarator": "subMergeableProvider", "var_name": "subMergeableProvider"}, {"original_string": "@Inject\n    private Provider<MergeableRoot> mergeableRootProvider;", "modifier": "@Inject\n    private", "type": "Provider<MergeableRoot>", "declarator": "mergeableRootProvider", "var_name": "mergeableRootProvider"}, {"original_string": "@Inject\n    private Merger merger;", "modifier": "@Inject\n    private", "type": "Merger", "declarator": "merger", "var_name": "merger"}], "file": "transfuse/src/test/java/org/androidtransfuse/processor/MergerTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() throws MergerException {\n        List<SubMergeable> subMergeablesOne = new ArrayList<SubMergeable>();\n        List<SubMergeable> subMergeablesTwo = new ArrayList<SubMergeable>();\n\n        subMergeablesOne.add(buildSubMergeable(\"1\", \"five\", \"six\", true));\n        subMergeablesTwo.add(buildSubMergeable(\"1\", \"seven\", \"eight\", true));\n\n        MergeableRoot one = buildMergeableRoot(\"2\", \"one\", \"two\", 5, subMergeablesOne, true);\n        MergeableRoot two = buildMergeableRoot(\"2\", \"three\", \"four\", 6, subMergeablesTwo, true);\n\n        MergeableRoot merged = merger.merge(MergeableRoot.class, one, two);\n\n        assertEquals(\"one\", merged.getDontMerge());\n        assertEquals(\"four\", merged.getStringValue());\n        assertEquals(6, merged.getIntValue());\n        assertEquals(1, merged.getSubMergeables().size());\n        SubMergeable subMergeable = merged.getSubMergeables().iterator().next();\n        assertEquals(\"seven\", subMergeable.getValue());\n        assertEquals(\"six\", subMergeable.getDontMergeValue());\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "MergerTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["add", "buildSubMergeable", "add", "buildSubMergeable", "buildMergeableRoot", "buildMergeableRoot", "merge", "assertEquals", "getDontMerge", "assertEquals", "getStringValue", "assertEquals", "getIntValue", "assertEquals", "size", "getSubMergeables", "next", "iterator", "getSubMergeables", "assertEquals", "getValue", "assertEquals", "getDontMergeValue"]}, "focal_class": {"identifier": "Merger", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "merge", "parameters": "(Class<? extends T> targetClass, T target, T source)", "modifiers": "public", "return": "T", "signature": "T merge(Class<? extends T> targetClass, T target, T source)", "full_signature": "public T merge(Class<? extends T> targetClass, T target, T source)", "class_method_signature": "Merger.merge(Class<? extends T> targetClass, T target, T source)", "testcase": false, "constructor": false}, {"identifier": "mergeMergeable", "parameters": "(Class<? extends T> targetClass, T target, T source)", "modifiers": "private", "return": "T", "signature": "T mergeMergeable(Class<? extends T> targetClass, T target, T source)", "full_signature": "private T mergeMergeable(Class<? extends T> targetClass, T target, T source)", "class_method_signature": "Merger.mergeMergeable(Class<? extends T> targetClass, T target, T source)", "testcase": false, "constructor": false}, {"identifier": "findAnnotation", "parameters": "(Class<T> annotationClass, Method... methods)", "modifiers": "private", "return": "T", "signature": "T findAnnotation(Class<T> annotationClass, Method... methods)", "full_signature": "private T findAnnotation(Class<T> annotationClass, Method... methods)", "class_method_signature": "Merger.findAnnotation(Class<T> annotationClass, Method... methods)", "testcase": false, "constructor": false}, {"identifier": "mergeProperties", "parameters": "(Merge mergeAnnotation, String propertyName, T target, T source)", "modifiers": "private", "return": "Object", "signature": "Object mergeProperties(Merge mergeAnnotation, String propertyName, T target, T source)", "full_signature": "private Object mergeProperties(Merge mergeAnnotation, String propertyName, T target, T source)", "class_method_signature": "Merger.mergeProperties(Merge mergeAnnotation, String propertyName, T target, T source)", "testcase": false, "constructor": false}, {"identifier": "updateTag", "parameters": "(T target, String tag, boolean remove)", "modifiers": "private", "return": "void", "signature": "void updateTag(T target, String tag, boolean remove)", "full_signature": "private void updateTag(T target, String tag, boolean remove)", "class_method_signature": "Merger.updateTag(T target, String tag, boolean remove)", "testcase": false, "constructor": false}, {"identifier": "mergeList", "parameters": "(MergeCollection mergeCollectionAnnotation, String propertyName, T target, T source)", "modifiers": "private", "return": "List", "signature": "List mergeList(MergeCollection mergeCollectionAnnotation, String propertyName, T target, T source)", "full_signature": "private List mergeList(MergeCollection mergeCollectionAnnotation, String propertyName, T target, T source)", "class_method_signature": "Merger.mergeList(MergeCollection mergeCollectionAnnotation, String propertyName, T target, T source)", "testcase": false, "constructor": false}, {"identifier": "makeCollection", "parameters": "(List targetList, Class<? extends List> listType, T target, String propertyName)", "modifiers": "private", "return": "List", "signature": "List makeCollection(List targetList, Class<? extends List> listType, T target, String propertyName)", "full_signature": "private List makeCollection(List targetList, Class<? extends List> listType, T target, String propertyName)", "class_method_signature": "Merger.makeCollection(List targetList, Class<? extends List> listType, T target, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "updateFromSource", "parameters": "(List targetList, List sourceList, Class<? extends Mergeable> type)", "modifiers": "private", "return": "List<Mergeable>", "signature": "List<Mergeable> updateFromSource(List targetList, List sourceList, Class<? extends Mergeable> type)", "full_signature": "private List<Mergeable> updateFromSource(List targetList, List sourceList, Class<? extends Mergeable> type)", "class_method_signature": "Merger.updateFromSource(List targetList, List sourceList, Class<? extends Mergeable> type)", "testcase": false, "constructor": false}, {"identifier": "buildIdentifierMap", "parameters": "(List input)", "modifiers": "private", "return": "Map<Object, Mergeable>", "signature": "Map<Object, Mergeable> buildIdentifierMap(List input)", "full_signature": "private Map<Object, Mergeable> buildIdentifierMap(List input)", "class_method_signature": "Merger.buildIdentifierMap(List input)", "testcase": false, "constructor": false}], "file": "transfuse/src/main/java/org/androidtransfuse/processor/Merger.java"}, "focal_method": {"identifier": "merge", "parameters": "(Class<? extends T> targetClass, T target, T source)", "modifiers": "public", "return": "T", "body": "public <T> T merge(Class<? extends T> targetClass, T target, T source) throws MergerException {\n\n        if (target == null) {\n            return source;\n        } else if (source == null) {\n            return target;\n        }\n\n        if (!Mergeable.class.isAssignableFrom(targetClass)) {\n            return target;\n        }\n\n        return (T) mergeMergeable((Class<? extends Mergeable>) targetClass, (Mergeable) target, (Mergeable) source);\n    }", "signature": "T merge(Class<? extends T> targetClass, T target, T source)", "full_signature": "public T merge(Class<? extends T> targetClass, T target, T source)", "class_method_signature": "Merger.merge(Class<? extends T> targetClass, T target, T source)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "mergeMergeable"]}, "repository": {"repo_id": 2416378, "url": "https://github.com/johncarl81/transfuse", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 228, "size": 13621, "license": "licensed"}}