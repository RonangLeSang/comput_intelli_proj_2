{"test_class": {"identifier": "CsvCoverageOutputterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CoverageDocument doc;", "modifier": "private", "type": "CoverageDocument", "declarator": "doc", "var_name": "doc"}, {"original_string": "private File outputDirectory;", "modifier": "private", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}, {"original_string": "private CsvCoverageOutputter outputter = new CsvCoverageOutputter();", "modifier": "private", "type": "CsvCoverageOutputter", "declarator": "outputter = new CsvCoverageOutputter()", "var_name": "outputter"}], "file": "net.bpelunit.framework.coverage/src/test/java/net/bpelunit/framework/coverage/output/csv/CsvCoverageOutputterTest.java"}, "test_case": {"identifier": "testOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOutput() throws IOException {\n\t\tinitializeOutputDirectory(\"testOutput\");\n\t\t\n\t\tDummyCoverage coverage = DummyCoverage.createDummyCoverage(\"testOutput\");\n\t\tdoc.getCoverageInformationForProcesses().add(coverage);\n\t\toutputter.exportCoverageInformation(doc);\n\t\t\n\t\tFile[] files = outputDirectory.listFiles();\n\t\tassertEquals(2, files.length);\n\t\tassertEquals(\"testOutput.Metric1.csv\", files[0].getName());\n\t\tassertEquals(\"testOutput.Metric2.csv\", files[1].getName());\n\t\t\n\t\tString actualContents = new String(FileUtil.readFile(files[0]));\n\t\tString expectedContents = new String(FileUtil.readFile(new File(\"src/test/resources/csvoutputter/testOutput.Metric1.csv\")));\n\t\tassertEquals(expectedContents, actualContents);\n\t\t\n\t\tactualContents = new String(FileUtil.readFile(files[1]));\n\t\texpectedContents = new String(FileUtil.readFile(new File(\"src/test/resources/csvoutputter/testOutput.Metric2.csv\")));\n\t\tassertEquals(expectedContents, actualContents);\n\t}", "signature": "void testOutput()", "full_signature": "@Test public void testOutput()", "class_method_signature": "CsvCoverageOutputterTest.testOutput()", "testcase": true, "constructor": false, "invocations": ["initializeOutputDirectory", "createDummyCoverage", "add", "getCoverageInformationForProcesses", "exportCoverageInformation", "listFiles", "assertEquals", "assertEquals", "getName", "assertEquals", "getName", "readFile", "readFile", "assertEquals", "readFile", "readFile", "assertEquals"]}, "focal_class": {"identifier": "CsvCoverageOutputter", "superclass": "extends AbstractCoverageOutputter", "interfaces": "", "fields": [{"original_string": "private String separator = \",\";", "modifier": "private", "type": "String", "declarator": "separator = \",\"", "var_name": "separator"}], "methods": [{"identifier": "exportCoverageInformation", "parameters": "(IBPELCoverage c)", "modifiers": "@Override protected", "return": "void", "signature": "void exportCoverageInformation(IBPELCoverage c)", "full_signature": "@Override protected void exportCoverageInformation(IBPELCoverage c)", "class_method_signature": "CsvCoverageOutputter.exportCoverageInformation(IBPELCoverage c)", "testcase": false, "constructor": false}, {"identifier": "setSeperator", "parameters": "(String newSeperator)", "modifiers": "@CoverageOutputOption(description=\"The separator used to delimit values\") public", "return": "void", "signature": "void setSeperator(String newSeperator)", "full_signature": "@CoverageOutputOption(description=\"The separator used to delimit values\") public void setSeperator(String newSeperator)", "class_method_signature": "CsvCoverageOutputter.setSeperator(String newSeperator)", "testcase": false, "constructor": false}], "file": "net.bpelunit.framework.coverage/src/main/java/net/bpelunit/framework/coverage/output/csv/CsvCoverageOutputter.java"}, "focal_method": {"identifier": "exportCoverageInformation", "parameters": "(IBPELCoverage c)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n\tprotected void exportCoverageInformation(IBPELCoverage c)\n\t\t\tthrows IOException {\n\n\t\tfor (IMetricCoverage metricCoverage : c.getMetricCoverages()) {\n\t\t\tString fileName = c.getProcessName().getLocalPart() + \".\" + metricCoverage.getMetricId() + \".csv\";\n\t\t\tFile csvFile = new File(getOutputDirectory(), fileName);\n\n\t\t\tWriter writer = new FileWriter(csvFile);\n\n\t\t\ttry {\n\t\t\t\twriter.write(String.format(\"Element%sMin%sMax%sTotal%sAvg%sCoverage\\n\", separator, separator, separator, separator, separator));\n\n\t\t\t\tfor (ICoverageResult result : metricCoverage\n\t\t\t\t\t\t.getCoverageResult()) {\n\t\t\t\t\twriter.write(String.format(\"%s%s%s%s%s%s%s%s%s%s%s\\n\", \n\t\t\t\t\t\t\tresult.getBPELElementReference(),\n\t\t\t\t\t\t\tseparator,\n\t\t\t\t\t\t\tresult.min(),\n\t\t\t\t\t\t\tseparator,\n\t\t\t\t\t\t\tresult.max(),\n\t\t\t\t\t\t\tseparator,\n\t\t\t\t\t\t\tresult.getExecutionCount(),\n\t\t\t\t\t\t\tseparator,\n\t\t\t\t\t\t\tresult.avg(),\n\t\t\t\t\t\t\tseparator,\n\t\t\t\t\t\t\tresult.coverage()\n\t\t\t\t\t\t));\n\t\t\t\t}\n\n\t\t\t} finally {\n\t\t\t\tIOUtils.closeQuietly(writer);\n\t\t\t}\n\t\t}\n\t}", "signature": "void exportCoverageInformation(IBPELCoverage c)", "full_signature": "@Override protected void exportCoverageInformation(IBPELCoverage c)", "class_method_signature": "CsvCoverageOutputter.exportCoverageInformation(IBPELCoverage c)", "testcase": false, "constructor": false, "invocations": ["getMetricCoverages", "getLocalPart", "getProcessName", "getMetricId", "getOutputDirectory", "write", "format", "getCoverageResult", "write", "format", "getBPELElementReference", "min", "max", "getExecutionCount", "avg", "coverage", "closeQuietly"]}, "repository": {"repo_id": 551254, "url": "https://github.com/bpelunit/bpelunit", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 13, "size": 59318, "license": "licensed"}}