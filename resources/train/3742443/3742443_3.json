{"test_class": {"identifier": "GqTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Group<Gq> group;", "modifier": "private", "type": "Group<Gq>", "declarator": "group", "var_name": "group"}], "file": "core/src/test/java/org/mammon/math/GqTest.java"}, "test_case": {"identifier": "shouldBeAbleToReturnTheGeneratorOfTheGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldBeAbleToReturnTheGeneratorOfTheGroup() {\n\t\tGroup.Element<Gq> generator = group.getGenerator();\n\n\t\tassertEquals(group, generator.getGroup());\n\t}", "signature": "void shouldBeAbleToReturnTheGeneratorOfTheGroup()", "full_signature": "@Test public void shouldBeAbleToReturnTheGeneratorOfTheGroup()", "class_method_signature": "GqTest.shouldBeAbleToReturnTheGeneratorOfTheGroup()", "testcase": true, "constructor": false, "invocations": ["getGenerator", "assertEquals", "getGroup"]}, "focal_class": {"identifier": "Gq", "superclass": "", "interfaces": "implements Identifiable, Group<Gq>", "fields": [{"original_string": "private final BigInteger q;", "modifier": "private final", "type": "BigInteger", "declarator": "q", "var_name": "q"}, {"original_string": "private final BigInteger p;", "modifier": "private final", "type": "BigInteger", "declarator": "p", "var_name": "p"}, {"original_string": "private final Group.Element<Gq> generator;", "modifier": "private final", "type": "Group.Element<Gq>", "declarator": "generator", "var_name": "generator"}], "methods": [{"identifier": "Gq", "parameters": "(GqSetup setup)", "modifiers": "public", "return": "", "signature": " Gq(GqSetup setup)", "full_signature": "public  Gq(GqSetup setup)", "class_method_signature": "Gq.Gq(GqSetup setup)", "testcase": false, "constructor": true}, {"identifier": "getIdentityElement", "parameters": "()", "modifiers": "@Override public", "return": "Group.Element<Gq>", "signature": "Group.Element<Gq> getIdentityElement()", "full_signature": "@Override public Group.Element<Gq> getIdentityElement()", "class_method_signature": "Gq.getIdentityElement()", "testcase": false, "constructor": false}, {"identifier": "element", "parameters": "(BigInteger element)", "modifiers": "private", "return": "Group.Element<Gq>", "signature": "Group.Element<Gq> element(BigInteger element)", "full_signature": "private Group.Element<Gq> element(BigInteger element)", "class_method_signature": "Gq.element(BigInteger element)", "testcase": false, "constructor": false}, {"identifier": "getGenerator", "parameters": "()", "modifiers": "@Override public", "return": "Group.Element<Gq>", "signature": "Group.Element<Gq> getGenerator()", "full_signature": "@Override public Group.Element<Gq> getGenerator()", "class_method_signature": "Gq.getGenerator()", "testcase": false, "constructor": false}, {"identifier": "getIdentity", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIdentity()", "full_signature": "@Override public String getIdentity()", "class_method_signature": "Gq.getIdentity()", "testcase": false, "constructor": false}, {"identifier": "getRandomElement", "parameters": "()", "modifiers": "@Override public", "return": "Group.Element<Gq>", "signature": "Group.Element<Gq> getRandomElement()", "full_signature": "@Override public Group.Element<Gq> getRandomElement()", "class_method_signature": "Gq.getRandomElement()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/mammon/math/Gq.java"}, "focal_method": {"identifier": "getGenerator", "parameters": "()", "modifiers": "@Override public", "return": "Group.Element<Gq>", "body": "@Override\n\tpublic Group.Element<Gq> getGenerator() {\n\t\treturn generator;\n\t}", "signature": "Group.Element<Gq> getGenerator()", "full_signature": "@Override public Group.Element<Gq> getGenerator()", "class_method_signature": "Gq.getGenerator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3742443, "url": "https://github.com/phedny/Mammon", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 1438, "license": "BSD 3-Clause \"New\" or \"Revised\" License"}}