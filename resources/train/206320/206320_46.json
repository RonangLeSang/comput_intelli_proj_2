{"test_class": {"identifier": "AccuRevCommandLineTest", "superclass": "extends ScmTestCase", "interfaces": "", "fields": [], "file": "maven-scm-providers/maven-scm-provider-accurev/src/test/java/org/apache/maven/scm/provider/accurev/cli/AccuRevCommandLineTest.java"}, "test_case": {"identifier": "testPopExternal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPopExternal()\n        throws Exception\n    {\n\n        AccuRevCommandLineTester accuRevCL = new AccuRevCommandLineTester( \"aHost\", 5051 );\n        accuRevCL.setExecutable( \"accurev.exe\" );\n        File testfile = new File( \"/my/export\" );\n        File projectDir = new File( \"/./project/dir\" );\n        accuRevCL.popExternal( testfile, \"stream\", \"12\", Collections.singleton( projectDir ) );\n\n        Commandline lastCL = accuRevCL.getCommandline();\n        assertThat( lastCL.getLiteralExecutable(), is( \"accurev.exe\" ) );\n        assertThat( lastCL.getArguments(), is( new String[] { \"pop\", \"-H\", \"aHost:5051\", \"-v\", \"stream\", \"-L\",\n            testfile.getAbsolutePath(), \"-t\", \"12\", \"-R\", projectDir.getPath() } ) );\n\n    }", "signature": "void testPopExternal()", "full_signature": "@Test public void testPopExternal()", "class_method_signature": "AccuRevCommandLineTest.testPopExternal()", "testcase": true, "constructor": false, "invocations": ["setExecutable", "popExternal", "singleton", "getCommandline", "assertThat", "getLiteralExecutable", "is", "assertThat", "getArguments", "is", "getAbsolutePath", "getPath"]}, "focal_class": {"identifier": "AccuRevCommandLine", "superclass": "", "interfaces": "implements AccuRev", "fields": [{"original_string": "private static final String[] EMPTY_STRING_ARRAY = new String[] {};", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[] {}", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "private static final File CURRENT_DIR = new File( \".\" );", "modifier": "private static final", "type": "File", "declarator": "CURRENT_DIR = new File( \".\" )", "var_name": "CURRENT_DIR"}, {"original_string": "private ScmLogger logger;", "modifier": "private", "type": "ScmLogger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private Commandline cl = new Commandline();", "modifier": "private", "type": "Commandline", "declarator": "cl = new Commandline()", "var_name": "cl"}, {"original_string": "private StringBuilder commandLines = new StringBuilder();", "modifier": "private", "type": "StringBuilder", "declarator": "commandLines = new StringBuilder()", "var_name": "commandLines"}, {"original_string": "private StringBuilder errorOutput = new StringBuilder();", "modifier": "private", "type": "StringBuilder", "declarator": "errorOutput = new StringBuilder()", "var_name": "errorOutput"}, {"original_string": "private StreamConsumer systemErr;", "modifier": "private", "type": "StreamConsumer", "declarator": "systemErr", "var_name": "systemErr"}, {"original_string": "private String[] hostArgs = EMPTY_STRING_ARRAY;", "modifier": "private", "type": "String[]", "declarator": "hostArgs = EMPTY_STRING_ARRAY", "var_name": "hostArgs"}, {"original_string": "private String[] authArgs = EMPTY_STRING_ARRAY;", "modifier": "private", "type": "String[]", "declarator": "authArgs = EMPTY_STRING_ARRAY", "var_name": "authArgs"}, {"original_string": "private String executable = \"accurev\";", "modifier": "private", "type": "String", "declarator": "executable = \"accurev\"", "var_name": "executable"}, {"original_string": "private long executableModTime;", "modifier": "private", "type": "long", "declarator": "executableModTime", "var_name": "executableModTime"}, {"original_string": "private String clientVersion;", "modifier": "private", "type": "String", "declarator": "clientVersion", "var_name": "clientVersion"}], "methods": [{"identifier": "AccuRevCommandLine", "parameters": "()", "modifiers": "public", "return": "", "signature": " AccuRevCommandLine()", "full_signature": "public  AccuRevCommandLine()", "class_method_signature": "AccuRevCommandLine.AccuRevCommandLine()", "testcase": false, "constructor": true}, {"identifier": "AccuRevCommandLine", "parameters": "( String host, int port )", "modifiers": "public", "return": "", "signature": " AccuRevCommandLine( String host, int port )", "full_signature": "public  AccuRevCommandLine( String host, int port )", "class_method_signature": "AccuRevCommandLine.AccuRevCommandLine( String host, int port )", "testcase": false, "constructor": true}, {"identifier": "setServer", "parameters": "( String host, int port )", "modifiers": "public", "return": "void", "signature": "void setServer( String host, int port )", "full_signature": "public void setServer( String host, int port )", "class_method_signature": "AccuRevCommandLine.setServer( String host, int port )", "testcase": false, "constructor": false}, {"identifier": "setExecutable", "parameters": "( String accuRevExe )", "modifiers": "public", "return": "void", "signature": "void setExecutable( String accuRevExe )", "full_signature": "public void setExecutable( String accuRevExe )", "class_method_signature": "AccuRevCommandLine.setExecutable( String accuRevExe )", "testcase": false, "constructor": false}, {"identifier": "executeCommandLine", "parameters": "( File basedir, String[] args, Iterable<File> elements, Pattern matchPattern,\n                                        List<File> matchedFiles )", "modifiers": "private", "return": "boolean", "signature": "boolean executeCommandLine( File basedir, String[] args, Iterable<File> elements, Pattern matchPattern,\n                                        List<File> matchedFiles )", "full_signature": "private boolean executeCommandLine( File basedir, String[] args, Iterable<File> elements, Pattern matchPattern,\n                                        List<File> matchedFiles )", "class_method_signature": "AccuRevCommandLine.executeCommandLine( File basedir, String[] args, Iterable<File> elements, Pattern matchPattern,\n                                        List<File> matchedFiles )", "testcase": false, "constructor": false}, {"identifier": "executeCommandLine", "parameters": "( File basedir, String[] args, Iterable<File> elements,\n                                        StreamConsumer stdoutConsumer )", "modifiers": "private", "return": "boolean", "signature": "boolean executeCommandLine( File basedir, String[] args, Iterable<File> elements,\n                                        StreamConsumer stdoutConsumer )", "full_signature": "private boolean executeCommandLine( File basedir, String[] args, Iterable<File> elements,\n                                        StreamConsumer stdoutConsumer )", "class_method_signature": "AccuRevCommandLine.executeCommandLine( File basedir, String[] args, Iterable<File> elements,\n                                        StreamConsumer stdoutConsumer )", "testcase": false, "constructor": false}, {"identifier": "setCommandLineArgs", "parameters": "( String[] args )", "modifiers": "private", "return": "void", "signature": "void setCommandLineArgs( String[] args )", "full_signature": "private void setCommandLineArgs( String[] args )", "class_method_signature": "AccuRevCommandLine.setCommandLineArgs( String[] args )", "testcase": false, "constructor": false}, {"identifier": "executeCommandLine", "parameters": "( String[] args )", "modifiers": "private", "return": "boolean", "signature": "boolean executeCommandLine( String[] args )", "full_signature": "private boolean executeCommandLine( String[] args )", "class_method_signature": "AccuRevCommandLine.executeCommandLine( String[] args )", "testcase": false, "constructor": false}, {"identifier": "executeCommandLine", "parameters": "( String[] args, InputStream stdin, StreamConsumer stdout )", "modifiers": "private", "return": "int", "signature": "int executeCommandLine( String[] args, InputStream stdin, StreamConsumer stdout )", "full_signature": "private int executeCommandLine( String[] args, InputStream stdin, StreamConsumer stdout )", "class_method_signature": "AccuRevCommandLine.executeCommandLine( String[] args, InputStream stdin, StreamConsumer stdout )", "testcase": false, "constructor": false}, {"identifier": "executeCommandLine", "parameters": "( InputStream stdin, StreamConsumer stdout )", "modifiers": "private", "return": "int", "signature": "int executeCommandLine( InputStream stdin, StreamConsumer stdout )", "full_signature": "private int executeCommandLine( InputStream stdin, StreamConsumer stdout )", "class_method_signature": "AccuRevCommandLine.executeCommandLine( InputStream stdin, StreamConsumer stdout )", "testcase": false, "constructor": false}, {"identifier": "executeCommandLine", "parameters": "( Commandline cl, InputStream stdin, CommandOutputConsumer stdout,\n                                      StreamConsumer stderr )", "modifiers": "protected", "return": "int", "signature": "int executeCommandLine( Commandline cl, InputStream stdin, CommandOutputConsumer stdout,\n                                      StreamConsumer stderr )", "full_signature": "protected int executeCommandLine( Commandline cl, InputStream stdin, CommandOutputConsumer stdout,\n                                      StreamConsumer stderr )", "class_method_signature": "AccuRevCommandLine.executeCommandLine( Commandline cl, InputStream stdin, CommandOutputConsumer stdout,\n                                      StreamConsumer stderr )", "testcase": false, "constructor": false}, {"identifier": "getCommandline", "parameters": "()", "modifiers": "protected", "return": "Commandline", "signature": "Commandline getCommandline()", "full_signature": "protected Commandline getCommandline()", "class_method_signature": "AccuRevCommandLine.getCommandline()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "AccuRevCommandLine.reset()", "testcase": false, "constructor": false}, {"identifier": "mkws", "parameters": "( String basisStream, String workspaceName, File basedir )", "modifiers": "public", "return": "boolean", "signature": "boolean mkws( String basisStream, String workspaceName, File basedir )", "full_signature": "public boolean mkws( String basisStream, String workspaceName, File basedir )", "class_method_signature": "AccuRevCommandLine.mkws( String basisStream, String workspaceName, File basedir )", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "( File baseDir, String transactionId )", "modifiers": "public", "return": "List<File>", "signature": "List<File> update( File baseDir, String transactionId )", "full_signature": "public List<File> update( File baseDir, String transactionId )", "class_method_signature": "AccuRevCommandLine.update( File baseDir, String transactionId )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( File basedir, List<File> elements, String message )", "modifiers": "public", "return": "List<File>", "signature": "List<File> add( File basedir, List<File> elements, String message )", "full_signature": "public List<File> add( File basedir, List<File> elements, String message )", "class_method_signature": "AccuRevCommandLine.add( File basedir, List<File> elements, String message )", "testcase": false, "constructor": false}, {"identifier": "defunct", "parameters": "( File basedir, List<File> files, String message )", "modifiers": "public", "return": "List<File>", "signature": "List<File> defunct( File basedir, List<File> files, String message )", "full_signature": "public List<File> defunct( File basedir, List<File> files, String message )", "class_method_signature": "AccuRevCommandLine.defunct( File basedir, List<File> files, String message )", "testcase": false, "constructor": false}, {"identifier": "promote", "parameters": "( File basedir, List<File> files, String message )", "modifiers": "public", "return": "List<File>", "signature": "List<File> promote( File basedir, List<File> files, String message )", "full_signature": "public List<File> promote( File basedir, List<File> files, String message )", "class_method_signature": "AccuRevCommandLine.promote( File basedir, List<File> files, String message )", "testcase": false, "constructor": false}, {"identifier": "getCommandLines", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCommandLines()", "full_signature": "public String getCommandLines()", "class_method_signature": "AccuRevCommandLine.getCommandLines()", "testcase": false, "constructor": false}, {"identifier": "getErrorOutput", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getErrorOutput()", "full_signature": "public String getErrorOutput()", "class_method_signature": "AccuRevCommandLine.getErrorOutput()", "testcase": false, "constructor": false}, {"identifier": "setLogger", "parameters": "( ScmLogger logger )", "modifiers": "public", "return": "void", "signature": "void setLogger( ScmLogger logger )", "full_signature": "public void setLogger( ScmLogger logger )", "class_method_signature": "AccuRevCommandLine.setLogger( ScmLogger logger )", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "public", "return": "ScmLogger", "signature": "ScmLogger getLogger()", "full_signature": "public ScmLogger getLogger()", "class_method_signature": "AccuRevCommandLine.getLogger()", "testcase": false, "constructor": false}, {"identifier": "mkdepot", "parameters": "( String depotName )", "modifiers": "public", "return": "boolean", "signature": "boolean mkdepot( String depotName )", "full_signature": "public boolean mkdepot( String depotName )", "class_method_signature": "AccuRevCommandLine.mkdepot( String depotName )", "testcase": false, "constructor": false}, {"identifier": "mkstream", "parameters": "( String backingStream, String newStreamName )", "modifiers": "public", "return": "boolean", "signature": "boolean mkstream( String backingStream, String newStreamName )", "full_signature": "public boolean mkstream( String backingStream, String newStreamName )", "class_method_signature": "AccuRevCommandLine.mkstream( String backingStream, String newStreamName )", "testcase": false, "constructor": false}, {"identifier": "promoteStream", "parameters": "( String subStream, String commitMessage, List<File> promotedFiles )", "modifiers": "public", "return": "boolean", "signature": "boolean promoteStream( String subStream, String commitMessage, List<File> promotedFiles )", "full_signature": "public boolean promoteStream( String subStream, String commitMessage, List<File> promotedFiles )", "class_method_signature": "AccuRevCommandLine.promoteStream( String subStream, String commitMessage, List<File> promotedFiles )", "testcase": false, "constructor": false}, {"identifier": "promoteAll", "parameters": "( File baseDir, String commitMessage )", "modifiers": "public", "return": "List<File>", "signature": "List<File> promoteAll( File baseDir, String commitMessage )", "full_signature": "public List<File> promoteAll( File baseDir, String commitMessage )", "class_method_signature": "AccuRevCommandLine.promoteAll( File baseDir, String commitMessage )", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "( File basedir )", "modifiers": "public", "return": "AccuRevInfo", "signature": "AccuRevInfo info( File basedir )", "full_signature": "public AccuRevInfo info( File basedir )", "class_method_signature": "AccuRevCommandLine.info( File basedir )", "testcase": false, "constructor": false}, {"identifier": "setWorkingDirectory", "parameters": "( File basedir )", "modifiers": "private", "return": "void", "signature": "void setWorkingDirectory( File basedir )", "full_signature": "private void setWorkingDirectory( File basedir )", "class_method_signature": "AccuRevCommandLine.setWorkingDirectory( File basedir )", "testcase": false, "constructor": false}, {"identifier": "reactivate", "parameters": "( String workSpaceName )", "modifiers": "public", "return": "boolean", "signature": "boolean reactivate( String workSpaceName )", "full_signature": "public boolean reactivate( String workSpaceName )", "class_method_signature": "AccuRevCommandLine.reactivate( String workSpaceName )", "testcase": false, "constructor": false}, {"identifier": "rmws", "parameters": "( String workSpaceName )", "modifiers": "public", "return": "boolean", "signature": "boolean rmws( String workSpaceName )", "full_signature": "public boolean rmws( String workSpaceName )", "class_method_signature": "AccuRevCommandLine.rmws( String workSpaceName )", "testcase": false, "constructor": false}, {"identifier": "stat", "parameters": "( File element )", "modifiers": "public", "return": "String", "signature": "String stat( File element )", "full_signature": "public String stat( File element )", "class_method_signature": "AccuRevCommandLine.stat( File element )", "testcase": false, "constructor": false}, {"identifier": "chws", "parameters": "( File basedir, String workSpaceName, String newBasisStream )", "modifiers": "public", "return": "boolean", "signature": "boolean chws( File basedir, String workSpaceName, String newBasisStream )", "full_signature": "public boolean chws( File basedir, String workSpaceName, String newBasisStream )", "class_method_signature": "AccuRevCommandLine.chws( File basedir, String workSpaceName, String newBasisStream )", "testcase": false, "constructor": false}, {"identifier": "mksnap", "parameters": "( String snapShotName, String basisStream )", "modifiers": "public", "return": "boolean", "signature": "boolean mksnap( String snapShotName, String basisStream )", "full_signature": "public boolean mksnap( String snapShotName, String basisStream )", "class_method_signature": "AccuRevCommandLine.mksnap( String snapShotName, String basisStream )", "testcase": false, "constructor": false}, {"identifier": "statTag", "parameters": "( String streamName )", "modifiers": "public", "return": "List<File>", "signature": "List<File> statTag( String streamName )", "full_signature": "public List<File> statTag( String streamName )", "class_method_signature": "AccuRevCommandLine.statTag( String streamName )", "testcase": false, "constructor": false}, {"identifier": "stat", "parameters": "( File basedir, Collection<File> elements, AccuRevStat statType )", "modifiers": "public", "return": "List<File>", "signature": "List<File> stat( File basedir, Collection<File> elements, AccuRevStat statType )", "full_signature": "public List<File> stat( File basedir, Collection<File> elements, AccuRevStat statType )", "class_method_signature": "AccuRevCommandLine.stat( File basedir, Collection<File> elements, AccuRevStat statType )", "testcase": false, "constructor": false}, {"identifier": "pop", "parameters": "( File basedir, Collection<File> elements )", "modifiers": "public", "return": "List<File>", "signature": "List<File> pop( File basedir, Collection<File> elements )", "full_signature": "public List<File> pop( File basedir, Collection<File> elements )", "class_method_signature": "AccuRevCommandLine.pop( File basedir, Collection<File> elements )", "testcase": false, "constructor": false}, {"identifier": "popExternal", "parameters": "( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "modifiers": "public", "return": "List<File>", "signature": "List<File> popExternal( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "full_signature": "public List<File> popExternal( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "class_method_signature": "AccuRevCommandLine.popExternal( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "testcase": false, "constructor": false}, {"identifier": "statBackingStream", "parameters": "( File basedir, Collection<File> elements )", "modifiers": "public", "return": "CategorisedElements", "signature": "CategorisedElements statBackingStream( File basedir, Collection<File> elements )", "full_signature": "public CategorisedElements statBackingStream( File basedir, Collection<File> elements )", "class_method_signature": "AccuRevCommandLine.statBackingStream( File basedir, Collection<File> elements )", "testcase": false, "constructor": false}, {"identifier": "history", "parameters": "( String baseStream, String fromTimeSpec, String toTimeSpec, int count,\n                                      boolean depotHistory, boolean transactionsOnly )", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> history( String baseStream, String fromTimeSpec, String toTimeSpec, int count,\n                                      boolean depotHistory, boolean transactionsOnly )", "full_signature": "public List<Transaction> history( String baseStream, String fromTimeSpec, String toTimeSpec, int count,\n                                      boolean depotHistory, boolean transactionsOnly )", "class_method_signature": "AccuRevCommandLine.history( String baseStream, String fromTimeSpec, String toTimeSpec, int count,\n                                      boolean depotHistory, boolean transactionsOnly )", "testcase": false, "constructor": false}, {"identifier": "diff", "parameters": "( String baseStream, String fromTimeSpec, String toTimeSpec )", "modifiers": "public", "return": "List<FileDifference>", "signature": "List<FileDifference> diff( String baseStream, String fromTimeSpec, String toTimeSpec )", "full_signature": "public List<FileDifference> diff( String baseStream, String fromTimeSpec, String toTimeSpec )", "class_method_signature": "AccuRevCommandLine.diff( String baseStream, String fromTimeSpec, String toTimeSpec )", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "( String user, String password )", "modifiers": "public", "return": "boolean", "signature": "boolean login( String user, String password )", "full_signature": "public boolean login( String user, String password )", "class_method_signature": "AccuRevCommandLine.login( String user, String password )", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean logout()", "full_signature": "public boolean logout()", "class_method_signature": "AccuRevCommandLine.logout()", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "( File basedir, File file )", "modifiers": "public", "return": "List<BlameLine>", "signature": "List<BlameLine> annotate( File basedir, File file )", "full_signature": "public List<BlameLine> annotate( File basedir, File file )", "class_method_signature": "AccuRevCommandLine.annotate( File basedir, File file )", "testcase": false, "constructor": false}, {"identifier": "showRefTrees", "parameters": "()", "modifiers": "public", "return": "Map<String, WorkSpace>", "signature": "Map<String, WorkSpace> showRefTrees()", "full_signature": "public Map<String, WorkSpace> showRefTrees()", "class_method_signature": "AccuRevCommandLine.showRefTrees()", "testcase": false, "constructor": false}, {"identifier": "showWorkSpaces", "parameters": "()", "modifiers": "public", "return": "Map<String, WorkSpace>", "signature": "Map<String, WorkSpace> showWorkSpaces()", "full_signature": "public Map<String, WorkSpace> showWorkSpaces()", "class_method_signature": "AccuRevCommandLine.showWorkSpaces()", "testcase": false, "constructor": false}, {"identifier": "showStream", "parameters": "( String stream )", "modifiers": "public", "return": "Stream", "signature": "Stream showStream( String stream )", "full_signature": "public Stream showStream( String stream )", "class_method_signature": "AccuRevCommandLine.showStream( String stream )", "testcase": false, "constructor": false}, {"identifier": "getExecutable", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExecutable()", "full_signature": "public String getExecutable()", "class_method_signature": "AccuRevCommandLine.getExecutable()", "testcase": false, "constructor": false}, {"identifier": "getClientVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClientVersion()", "full_signature": "public String getClientVersion()", "class_method_signature": "AccuRevCommandLine.getClientVersion()", "testcase": false, "constructor": false}, {"identifier": "syncReplica", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean syncReplica()", "full_signature": "public boolean syncReplica()", "class_method_signature": "AccuRevCommandLine.syncReplica()", "testcase": false, "constructor": false}], "file": "maven-scm-providers/maven-scm-provider-accurev/src/main/java/org/apache/maven/scm/provider/accurev/cli/AccuRevCommandLine.java"}, "focal_method": {"identifier": "popExternal", "parameters": "( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "modifiers": "public", "return": "List<File>", "body": "public List<File> popExternal( File basedir, String versionSpec, String tranSpec, Collection<File> elements )\n        throws AccuRevException\n    {\n\n        if ( elements == null || elements.isEmpty() )\n        {\n            elements = Collections.singletonList( new File( \"/./\" ) );\n        }\n\n        if ( StringUtils.isBlank( tranSpec ) )\n        {\n            tranSpec = \"now\";\n        }\n\n        String[] popArgs;\n        if ( AccuRevVersion.isNow( tranSpec ) )\n        {\n            popArgs = new String[] { \"pop\", \"-v\", versionSpec, \"-L\", basedir.getAbsolutePath(), \"-R\" };\n        }\n        else\n        // this will BARF for pre 4.9.0, but clients are expected to check AccuRevCapability before calling.\n        {\n            popArgs = new String[] { \"pop\", \"-v\", versionSpec, \"-L\", basedir.getAbsolutePath(), \"-t\", tranSpec, \"-R\" };\n        }\n\n        List<File> poppedFiles = new ArrayList<File>();\n        boolean ret = executeCommandLine( basedir, popArgs, elements, FileConsumer.POPULATE_PATTERN, poppedFiles );\n        return ret ? poppedFiles : null;\n    }", "signature": "List<File> popExternal( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "full_signature": "public List<File> popExternal( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "class_method_signature": "AccuRevCommandLine.popExternal( File basedir, String versionSpec, String tranSpec, Collection<File> elements )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "singletonList", "isBlank", "isNow", "getAbsolutePath", "getAbsolutePath", "executeCommandLine"]}, "repository": {"repo_id": 206320, "url": "https://github.com/apache/maven-scm", "language": "Java", "is_fork": false, "fork_count": 147, "stargazer_count": 68, "size": 11957, "license": "licensed"}}