{"test_class": {"identifier": "AccurevScmProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "maven-scm-providers/maven-scm-provider-accurev/src/test/java/org/apache/maven/scm/provider/accurev/AccurevScmProviderTest.java"}, "test_case": {"identifier": "testMakeProviderScmRepository", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMakeProviderScmRepository()\n        throws Exception\n    {\n\n        // [:stream][:/project/dir]\n        assertAccurevRepo( \"\", null, null );\n        assertAccurevRepo( \"aStream:/project/dir\", \"aStream\", \"project/dir\" );\n        assertAccurevRepo( \"/project/dir\", null, \"project/dir\" );\n        assertAccurevRepo( \"my_QA_Stream\", \"my_QA_Stream\", null );\n\n    }", "signature": "void testMakeProviderScmRepository()", "full_signature": "@Test public void testMakeProviderScmRepository()", "class_method_signature": "AccurevScmProviderTest.testMakeProviderScmRepository()", "testcase": true, "constructor": false, "invocations": ["assertAccurevRepo", "assertAccurevRepo", "assertAccurevRepo", "assertAccurevRepo"]}, "focal_class": {"identifier": "AccuRevScmProvider", "superclass": "extends AbstractScmProvider", "interfaces": "", "fields": [{"original_string": "public static final String ACCUREV_EXECUTABLE_PROPERTY = \"accurevExe\";", "modifier": "public static final", "type": "String", "declarator": "ACCUREV_EXECUTABLE_PROPERTY = \"accurevExe\"", "var_name": "ACCUREV_EXECUTABLE_PROPERTY"}, {"original_string": "public static final String TAG_FORMAT_PROPERTY = \"tagFormat\";", "modifier": "public static final", "type": "String", "declarator": "TAG_FORMAT_PROPERTY = \"tagFormat\"", "var_name": "TAG_FORMAT_PROPERTY"}, {"original_string": "public static final String SYSTEM_PROPERTY_PREFIX = \"maven.scm.accurev.\";", "modifier": "public static final", "type": "String", "declarator": "SYSTEM_PROPERTY_PREFIX = \"maven.scm.accurev.\"", "var_name": "SYSTEM_PROPERTY_PREFIX"}], "methods": [{"identifier": "getScmType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScmType()", "full_signature": "public String getScmType()", "class_method_signature": "AccuRevScmProvider.getScmType()", "testcase": false, "constructor": false}, {"identifier": "makeProviderScmRepository", "parameters": "( String scmSpecificUrl, char delimiter )", "modifiers": "public", "return": "ScmProviderRepository", "signature": "ScmProviderRepository makeProviderScmRepository( String scmSpecificUrl, char delimiter )", "full_signature": "public ScmProviderRepository makeProviderScmRepository( String scmSpecificUrl, char delimiter )", "class_method_signature": "AccuRevScmProvider.makeProviderScmRepository( String scmSpecificUrl, char delimiter )", "testcase": false, "constructor": false}, {"identifier": "fillSystemProperties", "parameters": "( Map<String, String> properties )", "modifiers": "private", "return": "void", "signature": "void fillSystemProperties( Map<String, String> properties )", "full_signature": "private void fillSystemProperties( Map<String, String> properties )", "class_method_signature": "AccuRevScmProvider.fillSystemProperties( Map<String, String> properties )", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "modifiers": "@Override protected", "return": "LoginScmResult", "signature": "LoginScmResult login( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "full_signature": "@Override protected LoginScmResult login( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.login( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet,\n                                          CommandParameters parameters )", "modifiers": "@Override protected", "return": "CheckOutScmResult", "signature": "CheckOutScmResult checkout( ScmProviderRepository repository, ScmFileSet fileSet,\n                                          CommandParameters parameters )", "full_signature": "@Override protected CheckOutScmResult checkout( ScmProviderRepository repository, ScmFileSet fileSet,\n                                          CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.checkout( ScmProviderRepository repository, ScmFileSet fileSet,\n                                          CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "checkin", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet,\n                                        CommandParameters parameters )", "modifiers": "@Override protected", "return": "CheckInScmResult", "signature": "CheckInScmResult checkin( ScmProviderRepository repository, ScmFileSet fileSet,\n                                        CommandParameters parameters )", "full_signature": "@Override protected CheckInScmResult checkin( ScmProviderRepository repository, ScmFileSet fileSet,\n                                        CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.checkin( ScmProviderRepository repository, ScmFileSet fileSet,\n                                        CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "makeProviderScmRepository", "parameters": "( File path )", "modifiers": "@Override public", "return": "ScmProviderRepository", "signature": "ScmProviderRepository makeProviderScmRepository( File path )", "full_signature": "@Override public ScmProviderRepository makeProviderScmRepository( File path )", "class_method_signature": "AccuRevScmProvider.makeProviderScmRepository( File path )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "modifiers": "@Override public", "return": "AddScmResult", "signature": "AddScmResult add( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "full_signature": "@Override public AddScmResult add( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.add( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "modifiers": "@Override protected", "return": "TagScmResult", "signature": "TagScmResult tag( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "full_signature": "@Override protected TagScmResult tag( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.tag( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "modifiers": "@Override protected", "return": "StatusScmResult", "signature": "StatusScmResult status( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "full_signature": "@Override protected StatusScmResult status( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.status( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "modifiers": "@Override protected", "return": "UpdateScmResult", "signature": "UpdateScmResult update( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "full_signature": "@Override protected UpdateScmResult update( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.update( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "modifiers": "@Override protected", "return": "ExportScmResult", "signature": "ExportScmResult export( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "full_signature": "@Override protected ExportScmResult export( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.export( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "changelog", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet,\n                                            CommandParameters parameters )", "modifiers": "@Override protected", "return": "ChangeLogScmResult", "signature": "ChangeLogScmResult changelog( ScmProviderRepository repository, ScmFileSet fileSet,\n                                            CommandParameters parameters )", "full_signature": "@Override protected ChangeLogScmResult changelog( ScmProviderRepository repository, ScmFileSet fileSet,\n                                            CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.changelog( ScmProviderRepository repository, ScmFileSet fileSet,\n                                            CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "modifiers": "@Override protected", "return": "RemoveScmResult", "signature": "RemoveScmResult remove( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "full_signature": "@Override protected RemoveScmResult remove( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.remove( ScmProviderRepository repository, ScmFileSet fileSet,\n                                      CommandParameters parameters )", "testcase": false, "constructor": false}, {"identifier": "blame", "parameters": "( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "modifiers": "@Override protected", "return": "BlameScmResult", "signature": "BlameScmResult blame( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "full_signature": "@Override protected BlameScmResult blame( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "class_method_signature": "AccuRevScmProvider.blame( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )", "testcase": false, "constructor": false}], "file": "maven-scm-providers/maven-scm-provider-accurev/src/main/java/org/apache/maven/scm/provider/accurev/AccuRevScmProvider.java"}, "focal_method": {"identifier": "makeProviderScmRepository", "parameters": "( String scmSpecificUrl, char delimiter )", "modifiers": "public", "return": "ScmProviderRepository", "body": "public ScmProviderRepository makeProviderScmRepository( String scmSpecificUrl, char delimiter )\n        throws ScmRepositoryException\n    {\n\n        List<String> validationMessages = new ArrayList<String>();\n\n        String[] tokens = StringUtils.split( scmSpecificUrl, Character.toString( delimiter ) );\n\n        // [[user][/pass]@host[:port]][:stream][:\\project\\dir]\n\n        String basisStream = null;\n        String projectPath = null;\n        int port = AccuRev.DEFAULT_PORT;\n        String host = null;\n        String user = null;\n        String password = null;\n        Map<String, String> properties = new HashMap<String, String>();\n        properties.put( TAG_FORMAT_PROPERTY, AccuRevScmProviderRepository.DEFAULT_TAG_FORMAT );\n        properties.put( ACCUREV_EXECUTABLE_PROPERTY, AccuRev.DEFAULT_ACCUREV_EXECUTABLE );\n\n        fillSystemProperties( properties );\n\n        int i = 0;\n        while ( i < tokens.length )\n        {\n            int at = tokens[i].indexOf( '@' );\n            // prefer \"/\", better not have a \"/\" or a \"\\\\\" in your password.\n            int slash = tokens[i].indexOf( '/' );\n            slash = slash < 0 ? tokens[i].indexOf( '\\\\' ) : slash;\n\n            int qMark = tokens[i].indexOf( '?' );\n\n            if ( qMark == 0 )\n            {\n                QuotedPropertyParser.parse( tokens[i].substring( 1 ), properties );\n            }\n            else if ( slash == 0 )\n            {\n                // this is the project path\n                projectPath = tokens[i].substring( 1 );\n                break;\n            }\n            else if ( ( slash > 0 || ( at >= 0 ) ) && host == null && user == null )\n            {\n                // user/pass@host\n                int len = tokens[i].length();\n                if ( at >= 0 && len > at )\n                {\n                    // everything after the \"@\"\n                    host = tokens[i].substring( at + 1 );\n                }\n\n                if ( slash > 0 )\n                {\n                    // user up to /\n                    user = tokens[i].substring( 0, slash );\n                    // pass between / and @\n                    password = tokens[i].substring( slash + 1, at < 0 ? len : at );\n                }\n                else\n                {\n                    // no /, user from beginning to @\n                    user = tokens[i].substring( 0, at < 0 ? len : at );\n                }\n\n            }\n            else if ( host != null && tokens[i].matches( \"^[0-9]+$\" ) )\n            {\n                // only valid entry with all digits is the port specification.\n                port = Integer.parseInt( tokens[i] );\n            }\n            else\n            {\n                basisStream = tokens[i];\n            }\n\n            i++;\n        }\n\n        if ( i < tokens.length )\n        {\n            validationMessages.add( \"Unknown tokens in URL \" + scmSpecificUrl );\n        }\n\n        AccuRevScmProviderRepository repo = new AccuRevScmProviderRepository();\n        repo.setLogger( getLogger() );\n        if ( !StringUtils.isEmpty( user ) )\n        {\n            repo.setUser( user );\n        }\n        if ( !StringUtils.isEmpty( password ) )\n        {\n            repo.setPassword( password );\n        }\n        if ( !StringUtils.isEmpty( basisStream ) )\n        {\n            repo.setStreamName( basisStream );\n        }\n        if ( !StringUtils.isEmpty( projectPath ) )\n        {\n            repo.setProjectPath( projectPath );\n        }\n        if ( !StringUtils.isEmpty( host ) )\n        {\n            repo.setHost( host );\n        }\n        repo.setPort( port );\n        repo.setTagFormat( properties.get( TAG_FORMAT_PROPERTY ) );\n\n        AccuRevCommandLine accuRev = new AccuRevCommandLine( host, port );\n        accuRev.setLogger( getLogger() );\n        accuRev.setExecutable( properties.get( ACCUREV_EXECUTABLE_PROPERTY ) );\n        repo.setAccuRev( accuRev );\n\n        return repo;\n\n    }", "signature": "ScmProviderRepository makeProviderScmRepository( String scmSpecificUrl, char delimiter )", "full_signature": "public ScmProviderRepository makeProviderScmRepository( String scmSpecificUrl, char delimiter )", "class_method_signature": "AccuRevScmProvider.makeProviderScmRepository( String scmSpecificUrl, char delimiter )", "testcase": false, "constructor": false, "invocations": ["split", "toString", "put", "put", "fillSystemProperties", "indexOf", "indexOf", "indexOf", "indexOf", "parse", "substring", "substring", "length", "substring", "substring", "substring", "substring", "matches", "parseInt", "add", "setLogger", "getLogger", "isEmpty", "setUser", "isEmpty", "setPassword", "isEmpty", "setStreamName", "isEmpty", "setProjectPath", "isEmpty", "setHost", "setPort", "setTagFormat", "get", "setLogger", "getLogger", "setExecutable", "get", "setAccuRev"]}, "repository": {"repo_id": 206320, "url": "https://github.com/apache/maven-scm", "language": "Java", "is_fork": false, "fork_count": 147, "stargazer_count": 68, "size": 11957, "license": "licensed"}}