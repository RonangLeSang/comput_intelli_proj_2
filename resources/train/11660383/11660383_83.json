{"test_class": {"identifier": "JenkinsClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n   private ClientHttpRequestFactory httpRequestFactory;", "modifier": "@Mock\n   private", "type": "ClientHttpRequestFactory", "declarator": "httpRequestFactory", "var_name": "httpRequestFactory"}, {"original_string": "@Mock\n   private ClientHttpRequest httpRequest;", "modifier": "@Mock\n   private", "type": "ClientHttpRequest", "declarator": "httpRequest", "var_name": "httpRequest"}, {"original_string": "@Mock\n   private ClientHttpResponse httpResponse;", "modifier": "@Mock\n   private", "type": "ClientHttpResponse", "declarator": "httpResponse", "var_name": "httpResponse"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n   @Mock\n   private HttpMessageConverter converter;", "modifier": "@SuppressWarnings(\"rawtypes\")\n   @Mock\n   private", "type": "HttpMessageConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Mock\n   private ResponseErrorHandler errorHandler;", "modifier": "@Mock\n   private", "type": "ResponseErrorHandler", "declarator": "errorHandler", "var_name": "errorHandler"}, {"original_string": "private JenkinsClient client;", "modifier": "private", "type": "JenkinsClient", "declarator": "client", "var_name": "client"}], "file": "core/src/test/java/com/github/danielpacak/jenkins/ci/core/client/JenkinsClientTest.java"}, "test_case": {"identifier": "execute_WhenThrowsIOException_ThrowsException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void execute_WhenThrowsIOException_ThrowsException() throws Exception {\n      given(httpRequestFactory.createRequest(new URI(\"http://example.com\"), GET)).willReturn(httpRequest);\n      willThrow(new IOException(\"Unplugged network cable\")).given(httpRequest).execute();\n\n      try {\n         client.execute(new URI(\"http://example.com\"), GET, null, null);\n         fail();\n      } catch (ResourceAccessException expected) {\n         assertEquals(\"I/O error on GET request for \\\"http://example.com\\\": Unplugged network cable\",\n               expected.getMessage());\n      }\n   }", "signature": "void execute_WhenThrowsIOException_ThrowsException()", "full_signature": "@Test public void execute_WhenThrowsIOException_ThrowsException()", "class_method_signature": "JenkinsClientTest.execute_WhenThrowsIOException_ThrowsException()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createRequest", "execute", "given", "willThrow", "execute", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "JenkinsClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_URL_SCHEME = \"http\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_URL_SCHEME = \"http\"", "var_name": "DEFAULT_URL_SCHEME"}, {"original_string": "public static final String DEFAULT_URL_HOST = \"localhost\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_URL_HOST = \"localhost\"", "var_name": "DEFAULT_URL_HOST"}, {"original_string": "public static final int DEFAULT_URL_PORT = 8080;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_URL_PORT = 8080", "var_name": "DEFAULT_URL_PORT"}, {"original_string": "public static final String SEGMENT_JOB = \"/job\";", "modifier": "public static final", "type": "String", "declarator": "SEGMENT_JOB = \"/job\"", "var_name": "SEGMENT_JOB"}, {"original_string": "public static final String SEGMENT_CREATE_ITEM = \"/createItem\";", "modifier": "public static final", "type": "String", "declarator": "SEGMENT_CREATE_ITEM = \"/createItem\"", "var_name": "SEGMENT_CREATE_ITEM"}, {"original_string": "public static final String SEGMENT_DO_DELETE = \"/doDelete\";", "modifier": "public static final", "type": "String", "declarator": "SEGMENT_DO_DELETE = \"/doDelete\"", "var_name": "SEGMENT_DO_DELETE"}, {"original_string": "public static final String SEGMENT_API_XML = \"/api/xml\";", "modifier": "public static final", "type": "String", "declarator": "SEGMENT_API_XML = \"/api/xml\"", "var_name": "SEGMENT_API_XML"}, {"original_string": "public static final String SEGMENT_CONFIG_XML = \"/config.xml\";", "modifier": "public static final", "type": "String", "declarator": "SEGMENT_CONFIG_XML = \"/config.xml\"", "var_name": "SEGMENT_CONFIG_XML"}, {"original_string": "public static final String SEGMENT_SCRIPT_TEXT = \"/scriptText\";", "modifier": "public static final", "type": "String", "declarator": "SEGMENT_SCRIPT_TEXT = \"/scriptText\"", "var_name": "SEGMENT_SCRIPT_TEXT"}, {"original_string": "public static final String DEFAULT_USER_AGENT = \"JenkinsJavaAPI\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_USER_AGENT = \"JenkinsJavaAPI\"", "var_name": "DEFAULT_USER_AGENT"}, {"original_string": "private ClientHttpRequestFactory clientHttpRequestFactory;", "modifier": "private", "type": "ClientHttpRequestFactory", "declarator": "clientHttpRequestFactory", "var_name": "clientHttpRequestFactory"}, {"original_string": "private ResponseErrorHandler responseErrorHandler;", "modifier": "private", "type": "ResponseErrorHandler", "declarator": "responseErrorHandler", "var_name": "responseErrorHandler"}, {"original_string": "private List<HttpMessageConverter<?>> messageConverters;", "modifier": "private", "type": "List<HttpMessageConverter<?>>", "declarator": "messageConverters", "var_name": "messageConverters"}, {"original_string": "private String baseUri;", "modifier": "private", "type": "String", "declarator": "baseUri", "var_name": "baseUri"}], "methods": [{"identifier": "JenkinsClient", "parameters": "()", "modifiers": "public", "return": "", "signature": " JenkinsClient()", "full_signature": "public  JenkinsClient()", "class_method_signature": "JenkinsClient.JenkinsClient()", "testcase": false, "constructor": true}, {"identifier": "JenkinsClient", "parameters": "(String host, Integer port)", "modifiers": "public", "return": "", "signature": " JenkinsClient(String host, Integer port)", "full_signature": "public  JenkinsClient(String host, Integer port)", "class_method_signature": "JenkinsClient.JenkinsClient(String host, Integer port)", "testcase": false, "constructor": true}, {"identifier": "JenkinsClient", "parameters": "(String scheme, String host, Integer port, String prefix)", "modifiers": "public", "return": "", "signature": " JenkinsClient(String scheme, String host, Integer port, String prefix)", "full_signature": "public  JenkinsClient(String scheme, String host, Integer port, String prefix)", "class_method_signature": "JenkinsClient.JenkinsClient(String scheme, String host, Integer port, String prefix)", "testcase": false, "constructor": true}, {"identifier": "getForObject", "parameters": "(String uri, Class<T> responseType)", "modifiers": "public", "return": "T", "signature": "T getForObject(String uri, Class<T> responseType)", "full_signature": "public T getForObject(String uri, Class<T> responseType)", "class_method_signature": "JenkinsClient.getForObject(String uri, Class<T> responseType)", "testcase": false, "constructor": false}, {"identifier": "postForLocation", "parameters": "(String uri, Object request)", "modifiers": "public", "return": "URI", "signature": "URI postForLocation(String uri, Object request)", "full_signature": "public URI postForLocation(String uri, Object request)", "class_method_signature": "JenkinsClient.postForLocation(String uri, Object request)", "testcase": false, "constructor": false}, {"identifier": "postForObject", "parameters": "(String uri, Object request, Class<T> responseType)", "modifiers": "public", "return": "T", "signature": "T postForObject(String uri, Object request, Class<T> responseType)", "full_signature": "public T postForObject(String uri, Object request, Class<T> responseType)", "class_method_signature": "JenkinsClient.postForObject(String uri, Object request, Class<T> responseType)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "modifiers": "protected", "return": "T", "signature": "T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "full_signature": "protected T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "class_method_signature": "JenkinsClient.execute(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(String user, String password)", "modifiers": "public", "return": "JenkinsClient", "signature": "JenkinsClient setCredentials(String user, String password)", "full_signature": "public JenkinsClient setCredentials(String user, String password)", "class_method_signature": "JenkinsClient.setCredentials(String user, String password)", "testcase": false, "constructor": false}, {"identifier": "setUserAgent", "parameters": "(String identifier)", "modifiers": "public", "return": "JenkinsClient", "signature": "JenkinsClient setUserAgent(String identifier)", "full_signature": "public JenkinsClient setUserAgent(String identifier)", "class_method_signature": "JenkinsClient.setUserAgent(String identifier)", "testcase": false, "constructor": false}, {"identifier": "getClientHttpRequestFactory", "parameters": "()", "modifiers": "public", "return": "ClientHttpRequestFactory", "signature": "ClientHttpRequestFactory getClientHttpRequestFactory()", "full_signature": "public ClientHttpRequestFactory getClientHttpRequestFactory()", "class_method_signature": "JenkinsClient.getClientHttpRequestFactory()", "testcase": false, "constructor": false}, {"identifier": "setClientHttpRequestFactory", "parameters": "(ClientHttpRequestFactory clientHttpRequestFactory)", "modifiers": "public", "return": "void", "signature": "void setClientHttpRequestFactory(ClientHttpRequestFactory clientHttpRequestFactory)", "full_signature": "public void setClientHttpRequestFactory(ClientHttpRequestFactory clientHttpRequestFactory)", "class_method_signature": "JenkinsClient.setClientHttpRequestFactory(ClientHttpRequestFactory clientHttpRequestFactory)", "testcase": false, "constructor": false}, {"identifier": "getResponseErrorHandler", "parameters": "()", "modifiers": "public", "return": "ResponseErrorHandler", "signature": "ResponseErrorHandler getResponseErrorHandler()", "full_signature": "public ResponseErrorHandler getResponseErrorHandler()", "class_method_signature": "JenkinsClient.getResponseErrorHandler()", "testcase": false, "constructor": false}, {"identifier": "setResponseErrorHandler", "parameters": "(ResponseErrorHandler responseErrorHandler)", "modifiers": "public", "return": "JenkinsClient", "signature": "JenkinsClient setResponseErrorHandler(ResponseErrorHandler responseErrorHandler)", "full_signature": "public JenkinsClient setResponseErrorHandler(ResponseErrorHandler responseErrorHandler)", "class_method_signature": "JenkinsClient.setResponseErrorHandler(ResponseErrorHandler responseErrorHandler)", "testcase": false, "constructor": false}, {"identifier": "getMessageConverters", "parameters": "()", "modifiers": "public", "return": "List<HttpMessageConverter<?>>", "signature": "List<HttpMessageConverter<?>> getMessageConverters()", "full_signature": "public List<HttpMessageConverter<?>> getMessageConverters()", "class_method_signature": "JenkinsClient.getMessageConverters()", "testcase": false, "constructor": false}, {"identifier": "setMessageConverters", "parameters": "(List<HttpMessageConverter<?>> messageConverters)", "modifiers": "public", "return": "void", "signature": "void setMessageConverters(List<HttpMessageConverter<?>> messageConverters)", "full_signature": "public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters)", "class_method_signature": "JenkinsClient.setMessageConverters(List<HttpMessageConverter<?>> messageConverters)", "testcase": false, "constructor": false}, {"identifier": "newURI", "parameters": "(String uri)", "modifiers": "private", "return": "URI", "signature": "URI newURI(String uri)", "full_signature": "private URI newURI(String uri)", "class_method_signature": "JenkinsClient.newURI(String uri)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/danielpacak/jenkins/ci/core/client/JenkinsClient.java"}, "focal_method": {"identifier": "execute", "parameters": "(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "modifiers": "protected", "return": "T", "body": "protected <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor) throws JenkinsClientException {\n      ClientHttpResponse response = null;\n      try {\n         ClientHttpRequest request = clientHttpRequestFactory.createRequest(url, method);\n         if (requestCallback != null) {\n            requestCallback.doWithRequest(request);\n         }\n\n         response = request.execute();\n\n         if (getResponseErrorHandler().hasError(response)) {\n            getResponseErrorHandler().handleError(response);\n         }\n         if (responseExtractor != null) {\n            return responseExtractor.extract(response);\n         } else {\n            return null;\n         }\n      } catch (IOException e) {\n         throw new ResourceAccessException(\"I/O error on \" + method.name() + \" request for \\\"\" + url + \"\\\": \"\n               + e.getMessage(), e);\n      } finally {\n         if (response != null) {\n            response.close();\n         }\n      }\n   }", "signature": "T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "full_signature": "protected T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "class_method_signature": "JenkinsClient.execute(URI url, HttpMethod method, RequestCallback requestCallback,\n         ResponseExtractor<T> responseExtractor)", "testcase": false, "constructor": false, "invocations": ["createRequest", "doWithRequest", "execute", "hasError", "getResponseErrorHandler", "handleError", "getResponseErrorHandler", "extract", "name", "getMessage", "close"]}, "repository": {"repo_id": 11660383, "url": "https://github.com/danielpacak/com.github.danielpacak.jenkins.ci", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 608, "license": "licensed"}}