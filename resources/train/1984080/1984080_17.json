{"test_class": {"identifier": "RoadSegmentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double delta = 0.00001;", "modifier": "private final", "type": "double", "declarator": "delta = 0.00001", "var_name": "delta"}, {"original_string": "private static final double MAX_SAFE_BRAKING_CAR = 5.0;", "modifier": "private static final", "type": "double", "declarator": "MAX_SAFE_BRAKING_CAR = 5.0", "var_name": "MAX_SAFE_BRAKING_CAR"}, {"original_string": "private static final double GAP_MIN_FRONT_CAR = 4.0;", "modifier": "private static final", "type": "double", "declarator": "GAP_MIN_FRONT_CAR = 4.0", "var_name": "GAP_MIN_FRONT_CAR"}, {"original_string": "private static final double BIAS_INSIDE_LANE_CAR = 0.1;", "modifier": "private static final", "type": "double", "declarator": "BIAS_INSIDE_LANE_CAR = 0.1", "var_name": "BIAS_INSIDE_LANE_CAR"}, {"original_string": "private static final double POLITENESS_CAR = 0.2;", "modifier": "private static final", "type": "double", "declarator": "POLITENESS_CAR = 0.2", "var_name": "POLITENESS_CAR"}, {"original_string": "static final double THRESHOLD_CAR = 0.3;", "modifier": "static final", "type": "double", "declarator": "THRESHOLD_CAR = 0.3", "var_name": "THRESHOLD_CAR"}], "file": "core/src/test/java/org/movsim/simulator/roadnetwork/RoadSegmentTest.java"}, "test_case": {"identifier": "testMakeLaneChanges", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testMakeLaneChanges() {\n        RoadSegment.resetNextId();\n        Vehicle.resetNextId();\n\n        final int laneCount = 2;\n        final RoadSegment r0 = new RoadSegment(1000.0, laneCount);\n\n        // set up an obstacle directly in front of a vehicle, so the vehicle will change lanes\n        // Obstacle(pos, lane, length, width, color) {\n        final Vehicle obstacle = newObstacle(600.0, Lanes.LANE1);\n        r0.addVehicle(obstacle);\n        final Vehicle v0 = newVehicle(593.0, 5.0, Lanes.LANE1);\n        final LaneChangeModel lcm = newLaneChangeModel(v0);\n        v0.setLaneChangeModel(lcm);\n        r0.addVehicle(v0);\n        final double dt = 0.25;\n        final double simulationTime = 0.0;\n        final long iterationCount = 0;\n        r0.makeLaneChanges(dt, simulationTime, iterationCount);\n        assertEquals(Lanes.LANE1, obstacle.lane());\n        assertEquals(Lanes.LANE2, v0.lane());\n        assertEquals(1, r0.laneSegment(Lanes.LANE1).vehicleCount());\n        assertEquals(1, r0.laneSegment(Lanes.LANE2).vehicleCount());\n    }", "signature": "void testMakeLaneChanges()", "full_signature": "@Test public final void testMakeLaneChanges()", "class_method_signature": "RoadSegmentTest.testMakeLaneChanges()", "testcase": true, "constructor": false, "invocations": ["resetNextId", "resetNextId", "newObstacle", "addVehicle", "newVehicle", "newLaneChangeModel", "setLaneChangeModel", "addVehicle", "makeLaneChanges", "assertEquals", "lane", "assertEquals", "lane", "assertEquals", "vehicleCount", "laneSegment", "assertEquals", "vehicleCount", "laneSegment"]}, "focal_class": {"identifier": "RoadSegment", "superclass": "extends DefaultWeightedEdge", "interfaces": "implements Iterable<Vehicle>", "fields": [{"original_string": "private static final long serialVersionUID = -2991922063982378462L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2991922063982378462L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RoadSegment.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RoadSegment.class)", "var_name": "LOG"}, {"original_string": "static final int ID_NOT_SET = -1;", "modifier": "static final", "type": "int", "declarator": "ID_NOT_SET = -1", "var_name": "ID_NOT_SET"}, {"original_string": "static final int INITIAL_ID = 1;", "modifier": "static final", "type": "int", "declarator": "INITIAL_ID = 1", "var_name": "INITIAL_ID"}, {"original_string": "private static final double MIN_SPEED_TT = 1;", "modifier": "private static final", "type": "double", "declarator": "MIN_SPEED_TT = 1", "var_name": "MIN_SPEED_TT"}, {"original_string": "private static int nextId = INITIAL_ID;", "modifier": "private static", "type": "int", "declarator": "nextId = INITIAL_ID", "var_name": "nextId"}, {"original_string": "private RoadSegmentDirection directionType = RoadSegmentDirection.FORWARD;", "modifier": "private", "type": "RoadSegmentDirection", "declarator": "directionType = RoadSegmentDirection.FORWARD", "var_name": "directionType"}, {"original_string": "private final int id;", "modifier": "private final", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private String userId;", "modifier": "private", "type": "String", "declarator": "userId", "var_name": "userId"}, {"original_string": "private String roadName;", "modifier": "private", "type": "String", "declarator": "roadName", "var_name": "roadName"}, {"original_string": "private final double roadLength;", "modifier": "private final", "type": "double", "declarator": "roadLength", "var_name": "roadLength"}, {"original_string": "private final int laneCount;", "modifier": "private final", "type": "int", "declarator": "laneCount", "var_name": "laneCount"}, {"original_string": "private final LaneSegment laneSegments[];", "modifier": "private final", "type": "LaneSegment", "declarator": "laneSegments[]", "var_name": "laneSegments"}, {"original_string": "private int sizeSourceRoadSegments = -1;", "modifier": "private", "type": "int", "declarator": "sizeSourceRoadSegments = -1", "var_name": "sizeSourceRoadSegments"}, {"original_string": "private int sizeSinkRoadSegments = -1;", "modifier": "private", "type": "int", "declarator": "sizeSinkRoadSegments = -1", "var_name": "sizeSinkRoadSegments"}, {"original_string": "private final RoadObjects roadObjects;", "modifier": "private final", "type": "RoadObjects", "declarator": "roadObjects", "var_name": "roadObjects"}, {"original_string": "private final SignalPoints signalPoints = new SignalPoints();", "modifier": "private final", "type": "SignalPoints", "declarator": "signalPoints = new SignalPoints()", "var_name": "signalPoints"}, {"original_string": "private final LaneSegment overtakingSegment;", "modifier": "private final", "type": "LaneSegment", "declarator": "overtakingSegment", "var_name": "overtakingSegment"}, {"original_string": "private boolean overtakingSegmentInitialized = false;", "modifier": "private", "type": "boolean", "declarator": "overtakingSegmentInitialized = false", "var_name": "overtakingSegmentInitialized"}, {"original_string": "private AbstractTrafficSource trafficSource;", "modifier": "private", "type": "AbstractTrafficSource", "declarator": "trafficSource", "var_name": "trafficSource"}, {"original_string": "private TrafficSink sink;", "modifier": "private", "type": "TrafficSink", "declarator": "sink", "var_name": "sink"}, {"original_string": "private RoadMapping roadMapping;", "modifier": "private", "type": "RoadMapping", "declarator": "roadMapping", "var_name": "roadMapping"}, {"original_string": "private RoadSegment peerRoadSegment;", "modifier": "private", "type": "RoadSegment", "declarator": "peerRoadSegment", "var_name": "peerRoadSegment"}, {"original_string": "private Node origin = new NodeImpl(\"origin\");", "modifier": "private", "type": "Node", "declarator": "origin = new NodeImpl(\"origin\")", "var_name": "origin"}, {"original_string": "private Node destination = new NodeImpl(\"destination\");", "modifier": "private", "type": "Node", "declarator": "destination = new NodeImpl(\"destination\")", "var_name": "destination"}, {"original_string": "private TrafficCompositionGenerator trafficComposition;", "modifier": "private", "type": "TrafficCompositionGenerator", "declarator": "trafficComposition", "var_name": "trafficComposition"}, {"original_string": "private SimpleRamp simpleRamp;", "modifier": "private", "type": "SimpleRamp", "declarator": "simpleRamp", "var_name": "simpleRamp"}, {"original_string": "private double meanFreeFlowSpeed = -1;", "modifier": "private", "type": "double", "declarator": "meanFreeFlowSpeed = -1", "var_name": "meanFreeFlowSpeed"}, {"original_string": "private double freeFlowSpeed = RoadTypeSpeeds.INSTANCE.getDefaultFreeFlowSpeed();", "modifier": "private", "type": "double", "declarator": "freeFlowSpeed = RoadTypeSpeeds.INSTANCE.getDefaultFreeFlowSpeed()", "var_name": "freeFlowSpeed"}, {"original_string": "private boolean updateSignalPointsBeforeOutflowCalled;", "modifier": "private", "type": "boolean", "declarator": "updateSignalPointsBeforeOutflowCalled", "var_name": "updateSignalPointsBeforeOutflowCalled"}], "methods": [{"identifier": "resetNextId", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void resetNextId()", "full_signature": "public static void resetNextId()", "class_method_signature": "RoadSegment.resetNextId()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int count()", "full_signature": "public static int count()", "class_method_signature": "RoadSegment.count()", "testcase": false, "constructor": false}, {"identifier": "RoadSegment", "parameters": "(double roadLength, int laneCount)", "modifiers": "public", "return": "", "signature": " RoadSegment(double roadLength, int laneCount)", "full_signature": "public  RoadSegment(double roadLength, int laneCount)", "class_method_signature": "RoadSegment.RoadSegment(double roadLength, int laneCount)", "testcase": false, "constructor": true}, {"identifier": "RoadSegment", "parameters": "(double roadLength, int laneCount, RoadMapping roadMapping,\n            RoadSegmentDirection roadSegmentDirection)", "modifiers": "public", "return": "", "signature": " RoadSegment(double roadLength, int laneCount, RoadMapping roadMapping,\n            RoadSegmentDirection roadSegmentDirection)", "full_signature": "public  RoadSegment(double roadLength, int laneCount, RoadMapping roadMapping,\n            RoadSegmentDirection roadSegmentDirection)", "class_method_signature": "RoadSegment.RoadSegment(double roadLength, int laneCount, RoadMapping roadMapping,\n            RoadSegmentDirection roadSegmentDirection)", "testcase": false, "constructor": true}, {"identifier": "addDefaultSink", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void addDefaultSink()", "full_signature": "public final void addDefaultSink()", "class_method_signature": "RoadSegment.addDefaultSink()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int id()", "full_signature": "public final int id()", "class_method_signature": "RoadSegment.id()", "testcase": false, "constructor": false}, {"identifier": "setUserId", "parameters": "(String userId)", "modifiers": "public final", "return": "void", "signature": "void setUserId(String userId)", "full_signature": "public final void setUserId(String userId)", "class_method_signature": "RoadSegment.setUserId(String userId)", "testcase": false, "constructor": false}, {"identifier": "userId", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String userId()", "full_signature": "public final String userId()", "class_method_signature": "RoadSegment.userId()", "testcase": false, "constructor": false}, {"identifier": "directionType", "parameters": "()", "modifiers": "public final", "return": "RoadSegmentDirection", "signature": "RoadSegmentDirection directionType()", "full_signature": "public final RoadSegmentDirection directionType()", "class_method_signature": "RoadSegment.directionType()", "testcase": false, "constructor": false}, {"identifier": "roadMapping", "parameters": "()", "modifiers": "public final", "return": "RoadMapping", "signature": "RoadMapping roadMapping()", "full_signature": "public final RoadMapping roadMapping()", "class_method_signature": "RoadSegment.roadMapping()", "testcase": false, "constructor": false}, {"identifier": "setRoadMapping", "parameters": "(RoadMapping roadMapping)", "modifiers": "public final", "return": "void", "signature": "void setRoadMapping(RoadMapping roadMapping)", "full_signature": "public final void setRoadMapping(RoadMapping roadMapping)", "class_method_signature": "RoadSegment.setRoadMapping(RoadMapping roadMapping)", "testcase": false, "constructor": false}, {"identifier": "trafficSource", "parameters": "()", "modifiers": "public final", "return": "AbstractTrafficSource", "signature": "AbstractTrafficSource trafficSource()", "full_signature": "public final AbstractTrafficSource trafficSource()", "class_method_signature": "RoadSegment.trafficSource()", "testcase": false, "constructor": false}, {"identifier": "setTrafficSource", "parameters": "(AbstractTrafficSource trafficSource)", "modifiers": "public final", "return": "void", "signature": "void setTrafficSource(AbstractTrafficSource trafficSource)", "full_signature": "public final void setTrafficSource(AbstractTrafficSource trafficSource)", "class_method_signature": "RoadSegment.setTrafficSource(AbstractTrafficSource trafficSource)", "testcase": false, "constructor": false}, {"identifier": "sink", "parameters": "()", "modifiers": "public final", "return": "TrafficSink", "signature": "TrafficSink sink()", "full_signature": "public final TrafficSink sink()", "class_method_signature": "RoadSegment.sink()", "testcase": false, "constructor": false}, {"identifier": "hasSink", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean hasSink()", "full_signature": "public final boolean hasSink()", "class_method_signature": "RoadSegment.hasSink()", "testcase": false, "constructor": false}, {"identifier": "roadLength", "parameters": "()", "modifiers": "public final", "return": "double", "signature": "double roadLength()", "full_signature": "public final double roadLength()", "class_method_signature": "RoadSegment.roadLength()", "testcase": false, "constructor": false}, {"identifier": "laneCount", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int laneCount()", "full_signature": "public final int laneCount()", "class_method_signature": "RoadSegment.laneCount()", "testcase": false, "constructor": false}, {"identifier": "setLaneType", "parameters": "(int lane, Lanes.Type laneType)", "modifiers": "public", "return": "void", "signature": "void setLaneType(int lane, Lanes.Type laneType)", "full_signature": "public void setLaneType(int lane, Lanes.Type laneType)", "class_method_signature": "RoadSegment.setLaneType(int lane, Lanes.Type laneType)", "testcase": false, "constructor": false}, {"identifier": "laneType", "parameters": "(int lane)", "modifiers": "public", "return": "Lanes.Type", "signature": "Lanes.Type laneType(int lane)", "full_signature": "public Lanes.Type laneType(int lane)", "class_method_signature": "RoadSegment.laneType(int lane)", "testcase": false, "constructor": false}, {"identifier": "trafficLaneMin", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int trafficLaneMin()", "full_signature": "public int trafficLaneMin()", "class_method_signature": "RoadSegment.trafficLaneMin()", "testcase": false, "constructor": false}, {"identifier": "trafficLaneMax", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int trafficLaneMax()", "full_signature": "public int trafficLaneMax()", "class_method_signature": "RoadSegment.trafficLaneMax()", "testcase": false, "constructor": false}, {"identifier": "laneSegment", "parameters": "(int lane)", "modifiers": "public final", "return": "LaneSegment", "signature": "LaneSegment laneSegment(int lane)", "full_signature": "public final LaneSegment laneSegment(int lane)", "class_method_signature": "RoadSegment.laneSegment(int lane)", "testcase": false, "constructor": false}, {"identifier": "setSourceLaneSegmentForLane", "parameters": "(LaneSegment sourceLaneSegment, int lane)", "modifiers": "final", "return": "void", "signature": "void setSourceLaneSegmentForLane(LaneSegment sourceLaneSegment, int lane)", "full_signature": "final void setSourceLaneSegmentForLane(LaneSegment sourceLaneSegment, int lane)", "class_method_signature": "RoadSegment.setSourceLaneSegmentForLane(LaneSegment sourceLaneSegment, int lane)", "testcase": false, "constructor": false}, {"identifier": "sourceLaneSegment", "parameters": "(int lane)", "modifiers": "public final", "return": "LaneSegment", "signature": "LaneSegment sourceLaneSegment(int lane)", "full_signature": "public final LaneSegment sourceLaneSegment(int lane)", "class_method_signature": "RoadSegment.sourceLaneSegment(int lane)", "testcase": false, "constructor": false}, {"identifier": "sourceRoadSegment", "parameters": "(int lane)", "modifiers": "public final", "return": "RoadSegment", "signature": "RoadSegment sourceRoadSegment(int lane)", "full_signature": "public final RoadSegment sourceRoadSegment(int lane)", "class_method_signature": "RoadSegment.sourceRoadSegment(int lane)", "testcase": false, "constructor": false}, {"identifier": "sourceLane", "parameters": "(int lane)", "modifiers": "public final", "return": "int", "signature": "int sourceLane(int lane)", "full_signature": "public final int sourceLane(int lane)", "class_method_signature": "RoadSegment.sourceLane(int lane)", "testcase": false, "constructor": false}, {"identifier": "setSinkLaneSegmentForLane", "parameters": "(LaneSegment sinkLaneSegment, int lane)", "modifiers": "final", "return": "void", "signature": "void setSinkLaneSegmentForLane(LaneSegment sinkLaneSegment, int lane)", "full_signature": "final void setSinkLaneSegmentForLane(LaneSegment sinkLaneSegment, int lane)", "class_method_signature": "RoadSegment.setSinkLaneSegmentForLane(LaneSegment sinkLaneSegment, int lane)", "testcase": false, "constructor": false}, {"identifier": "sinkLaneSegment", "parameters": "(int lane)", "modifiers": "final", "return": "LaneSegment", "signature": "LaneSegment sinkLaneSegment(int lane)", "full_signature": "final LaneSegment sinkLaneSegment(int lane)", "class_method_signature": "RoadSegment.sinkLaneSegment(int lane)", "testcase": false, "constructor": false}, {"identifier": "sinkRoadSegment", "parameters": "(int lane)", "modifiers": "public final", "return": "RoadSegment", "signature": "RoadSegment sinkRoadSegment(int lane)", "full_signature": "public final RoadSegment sinkRoadSegment(int lane)", "class_method_signature": "RoadSegment.sinkRoadSegment(int lane)", "testcase": false, "constructor": false}, {"identifier": "sinkRoadSegmentPerId", "parameters": "(int exitRoadSegmentId)", "modifiers": "@CheckForNull public", "return": "RoadSegment", "signature": "RoadSegment sinkRoadSegmentPerId(int exitRoadSegmentId)", "full_signature": "@CheckForNull public RoadSegment sinkRoadSegmentPerId(int exitRoadSegmentId)", "class_method_signature": "RoadSegment.sinkRoadSegmentPerId(int exitRoadSegmentId)", "testcase": false, "constructor": false}, {"identifier": "sinkLane", "parameters": "(int lane)", "modifiers": "final", "return": "int", "signature": "int sinkLane(int lane)", "full_signature": "final int sinkLane(int lane)", "class_method_signature": "RoadSegment.sinkLane(int lane)", "testcase": false, "constructor": false}, {"identifier": "hasUpstreamConnection", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean hasUpstreamConnection()", "full_signature": "public final boolean hasUpstreamConnection()", "class_method_signature": "RoadSegment.hasUpstreamConnection()", "testcase": false, "constructor": false}, {"identifier": "hasDownstreamConnection", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean hasDownstreamConnection()", "full_signature": "public final boolean hasDownstreamConnection()", "class_method_signature": "RoadSegment.hasDownstreamConnection()", "testcase": false, "constructor": false}, {"identifier": "getSizeSinkRoadSegments", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getSizeSinkRoadSegments()", "full_signature": "public final int getSizeSinkRoadSegments()", "class_method_signature": "RoadSegment.getSizeSinkRoadSegments()", "testcase": false, "constructor": false}, {"identifier": "getSizeSourceRoadSegments", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getSizeSourceRoadSegments()", "full_signature": "public final int getSizeSourceRoadSegments()", "class_method_signature": "RoadSegment.getSizeSourceRoadSegments()", "testcase": false, "constructor": false}, {"identifier": "exitsOnto", "parameters": "(int exitRoadSegmentId)", "modifiers": "public", "return": "boolean", "signature": "boolean exitsOnto(int exitRoadSegmentId)", "full_signature": "public boolean exitsOnto(int exitRoadSegmentId)", "class_method_signature": "RoadSegment.exitsOnto(int exitRoadSegmentId)", "testcase": false, "constructor": false}, {"identifier": "clearVehicles", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearVehicles()", "full_signature": "public void clearVehicles()", "class_method_signature": "RoadSegment.clearVehicles()", "testcase": false, "constructor": false}, {"identifier": "getVehicleCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVehicleCount()", "full_signature": "public int getVehicleCount()", "class_method_signature": "RoadSegment.getVehicleCount()", "testcase": false, "constructor": false}, {"identifier": "getStoppedVehicleCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStoppedVehicleCount()", "full_signature": "public int getStoppedVehicleCount()", "class_method_signature": "RoadSegment.getStoppedVehicleCount()", "testcase": false, "constructor": false}, {"identifier": "getObstacleCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getObstacleCount()", "full_signature": "public int getObstacleCount()", "class_method_signature": "RoadSegment.getObstacleCount()", "testcase": false, "constructor": false}, {"identifier": "getVehicleCount", "parameters": "(int lane)", "modifiers": "public", "return": "int", "signature": "int getVehicleCount(int lane)", "full_signature": "public int getVehicleCount(int lane)", "class_method_signature": "RoadSegment.getVehicleCount(int lane)", "testcase": false, "constructor": false}, {"identifier": "totalVehicleTravelTime", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double totalVehicleTravelTime()", "full_signature": "protected double totalVehicleTravelTime()", "class_method_signature": "RoadSegment.totalVehicleTravelTime()", "testcase": false, "constructor": false}, {"identifier": "totalVehicleTravelDistance", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double totalVehicleTravelDistance()", "full_signature": "protected double totalVehicleTravelDistance()", "class_method_signature": "RoadSegment.totalVehicleTravelDistance()", "testcase": false, "constructor": false}, {"identifier": "totalVehicleFuelUsedLiters", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double totalVehicleFuelUsedLiters()", "full_signature": "protected double totalVehicleFuelUsedLiters()", "class_method_signature": "RoadSegment.totalVehicleFuelUsedLiters()", "testcase": false, "constructor": false}, {"identifier": "instantaneousConsumptionLitersPerSecond", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double instantaneousConsumptionLitersPerSecond()", "full_signature": "protected double instantaneousConsumptionLitersPerSecond()", "class_method_signature": "RoadSegment.instantaneousConsumptionLitersPerSecond()", "testcase": false, "constructor": false}, {"identifier": "meanSpeedOfVehicles", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double meanSpeedOfVehicles()", "full_signature": "public double meanSpeedOfVehicles()", "class_method_signature": "RoadSegment.meanSpeedOfVehicles()", "testcase": false, "constructor": false}, {"identifier": "getHarmonicMeanFreeflowSpeed", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double getHarmonicMeanFreeflowSpeed()", "full_signature": "private double getHarmonicMeanFreeflowSpeed()", "class_method_signature": "RoadSegment.getHarmonicMeanFreeflowSpeed()", "testcase": false, "constructor": false}, {"identifier": "instantaneousTravelTimeFromMeanSpeed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double instantaneousTravelTimeFromMeanSpeed()", "full_signature": "public double instantaneousTravelTimeFromMeanSpeed()", "class_method_signature": "RoadSegment.instantaneousTravelTimeFromMeanSpeed()", "testcase": false, "constructor": false}, {"identifier": "instantaneousTravelTimeOnGrid", "parameters": "(double gridLength)", "modifiers": "public", "return": "double", "signature": "double instantaneousTravelTimeOnGrid(double gridLength)", "full_signature": "public double instantaneousTravelTimeOnGrid(double gridLength)", "class_method_signature": "RoadSegment.instantaneousTravelTimeOnGrid(double gridLength)", "testcase": false, "constructor": false}, {"identifier": "travelTimeInRange", "parameters": "(double begin, double end, double maxRoadSpeed,\n            LinkedList<Vehicle> vehicles)", "modifiers": "private static", "return": "double", "signature": "double travelTimeInRange(double begin, double end, double maxRoadSpeed,\n            LinkedList<Vehicle> vehicles)", "full_signature": "private static double travelTimeInRange(double begin, double end, double maxRoadSpeed,\n            LinkedList<Vehicle> vehicles)", "class_method_signature": "RoadSegment.travelTimeInRange(double begin, double end, double maxRoadSpeed,\n            LinkedList<Vehicle> vehicles)", "testcase": false, "constructor": false}, {"identifier": "obstacleCount", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int obstacleCount()", "full_signature": "protected int obstacleCount()", "class_method_signature": "RoadSegment.obstacleCount()", "testcase": false, "constructor": false}, {"identifier": "getVehicle", "parameters": "(int lane, int index)", "modifiers": "public", "return": "Vehicle", "signature": "Vehicle getVehicle(int lane, int index)", "full_signature": "public Vehicle getVehicle(int lane, int index)", "class_method_signature": "RoadSegment.getVehicle(int lane, int index)", "testcase": false, "constructor": false}, {"identifier": "removeFrontVehicleOnLane", "parameters": "(int lane)", "modifiers": "public", "return": "void", "signature": "void removeFrontVehicleOnLane(int lane)", "full_signature": "public void removeFrontVehicleOnLane(int lane)", "class_method_signature": "RoadSegment.removeFrontVehicleOnLane(int lane)", "testcase": false, "constructor": false}, {"identifier": "removeVehiclesPastEnd", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int removeVehiclesPastEnd()", "full_signature": "public int removeVehiclesPastEnd()", "class_method_signature": "RoadSegment.removeVehiclesPastEnd()", "testcase": false, "constructor": false}, {"identifier": "getVehiclesPastEnd", "parameters": "()", "modifiers": "public", "return": "Iterable<Vehicle>", "signature": "Iterable<Vehicle> getVehiclesPastEnd()", "full_signature": "public Iterable<Vehicle> getVehiclesPastEnd()", "class_method_signature": "RoadSegment.getVehiclesPastEnd()", "testcase": false, "constructor": false}, {"identifier": "addObstacle", "parameters": "(Vehicle obstacle)", "modifiers": "public", "return": "void", "signature": "void addObstacle(Vehicle obstacle)", "full_signature": "public void addObstacle(Vehicle obstacle)", "class_method_signature": "RoadSegment.addObstacle(Vehicle obstacle)", "testcase": false, "constructor": false}, {"identifier": "addVehicle", "parameters": "(Vehicle vehicle)", "modifiers": "public", "return": "void", "signature": "void addVehicle(Vehicle vehicle)", "full_signature": "public void addVehicle(Vehicle vehicle)", "class_method_signature": "RoadSegment.addVehicle(Vehicle vehicle)", "testcase": false, "constructor": false}, {"identifier": "appendVehicle", "parameters": "(Vehicle vehicle)", "modifiers": "public", "return": "void", "signature": "void appendVehicle(Vehicle vehicle)", "full_signature": "public void appendVehicle(Vehicle vehicle)", "class_method_signature": "RoadSegment.appendVehicle(Vehicle vehicle)", "testcase": false, "constructor": false}, {"identifier": "updateRoadConditions", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "signature": "void updateRoadConditions(double dt, double simulationTime, long iterationCount)", "full_signature": "public void updateRoadConditions(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.updateRoadConditions(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false}, {"identifier": "updateSignalPointsBeforeOutflow", "parameters": "(double simulationTime)", "modifiers": "protected", "return": "void", "signature": "void updateSignalPointsBeforeOutflow(double simulationTime)", "full_signature": "protected void updateSignalPointsBeforeOutflow(double simulationTime)", "class_method_signature": "RoadSegment.updateSignalPointsBeforeOutflow(double simulationTime)", "testcase": false, "constructor": false}, {"identifier": "updateSignalPointsAfterOutflowAndInflow", "parameters": "(double simulationTime)", "modifiers": "public", "return": "void", "signature": "void updateSignalPointsAfterOutflowAndInflow(double simulationTime)", "full_signature": "public void updateSignalPointsAfterOutflowAndInflow(double simulationTime)", "class_method_signature": "RoadSegment.updateSignalPointsAfterOutflowAndInflow(double simulationTime)", "testcase": false, "constructor": false}, {"identifier": "vehiclesWithinRange", "parameters": "(double begin, double end)", "modifiers": "public", "return": "Iterator<Vehicle>", "signature": "Iterator<Vehicle> vehiclesWithinRange(double begin, double end)", "full_signature": "public Iterator<Vehicle> vehiclesWithinRange(double begin, double end)", "class_method_signature": "RoadSegment.vehiclesWithinRange(double begin, double end)", "testcase": false, "constructor": false}, {"identifier": "filteredVehicles", "parameters": "(Predicate<Vehicle> predicate)", "modifiers": "public", "return": "Iterator<Vehicle>", "signature": "Iterator<Vehicle> filteredVehicles(Predicate<Vehicle> predicate)", "full_signature": "public Iterator<Vehicle> filteredVehicles(Predicate<Vehicle> predicate)", "class_method_signature": "RoadSegment.filteredVehicles(Predicate<Vehicle> predicate)", "testcase": false, "constructor": false}, {"identifier": "makeLaneChanges", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "signature": "void makeLaneChanges(double dt, double simulationTime, long iterationCount)", "full_signature": "public void makeLaneChanges(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.makeLaneChanges(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false}, {"identifier": "makeDynamicRoutingDecisions", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "signature": "void makeDynamicRoutingDecisions(double dt, double simulationTime, long iterationCount)", "full_signature": "public void makeDynamicRoutingDecisions(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.makeDynamicRoutingDecisions(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false}, {"identifier": "initOvertakingLane", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initOvertakingLane()", "full_signature": "private void initOvertakingLane()", "class_method_signature": "RoadSegment.initOvertakingLane()", "testcase": false, "constructor": false}, {"identifier": "checkFinishingOvertaking", "parameters": "(double dt)", "modifiers": "private", "return": "void", "signature": "void checkFinishingOvertaking(double dt)", "full_signature": "private void checkFinishingOvertaking(double dt)", "class_method_signature": "RoadSegment.checkFinishingOvertaking(double dt)", "testcase": false, "constructor": false}, {"identifier": "updateVehicleAccelerations", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "signature": "void updateVehicleAccelerations(double dt, double simulationTime, long iterationCount)", "full_signature": "public void updateVehicleAccelerations(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.updateVehicleAccelerations(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false}, {"identifier": "getLeftLane", "parameters": "(LaneSegment laneSegment)", "modifiers": "private", "return": "LaneSegment", "signature": "LaneSegment getLeftLane(LaneSegment laneSegment)", "full_signature": "private LaneSegment getLeftLane(LaneSegment laneSegment)", "class_method_signature": "RoadSegment.getLeftLane(LaneSegment laneSegment)", "testcase": false, "constructor": false}, {"identifier": "updateVehiclePositionsAndSpeeds", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "signature": "void updateVehiclePositionsAndSpeeds(double dt, double simulationTime, long iterationCount)", "full_signature": "public void updateVehiclePositionsAndSpeeds(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.updateVehiclePositionsAndSpeeds(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false}, {"identifier": "outFlow", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "signature": "void outFlow(double dt, double simulationTime, long iterationCount)", "full_signature": "public void outFlow(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.outFlow(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false}, {"identifier": "inFlow", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "signature": "void inFlow(double dt, double simulationTime, long iterationCount)", "full_signature": "public void inFlow(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.inFlow(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false}, {"identifier": "rearVehicleOnLane", "parameters": "(int lane)", "modifiers": "public", "return": "Vehicle", "signature": "Vehicle rearVehicleOnLane(int lane)", "full_signature": "public Vehicle rearVehicleOnLane(int lane)", "class_method_signature": "RoadSegment.rearVehicleOnLane(int lane)", "testcase": false, "constructor": false}, {"identifier": "rearVehicle", "parameters": "(int lane, double vehiclePos)", "modifiers": "public", "return": "Vehicle", "signature": "Vehicle rearVehicle(int lane, double vehiclePos)", "full_signature": "public Vehicle rearVehicle(int lane, double vehiclePos)", "class_method_signature": "RoadSegment.rearVehicle(int lane, double vehiclePos)", "testcase": false, "constructor": false}, {"identifier": "frontVehicleOnLane", "parameters": "(int lane)", "modifiers": "public", "return": "Vehicle", "signature": "Vehicle frontVehicleOnLane(int lane)", "full_signature": "public Vehicle frontVehicleOnLane(int lane)", "class_method_signature": "RoadSegment.frontVehicleOnLane(int lane)", "testcase": false, "constructor": false}, {"identifier": "frontVehicleOnLane", "parameters": "(Vehicle vehicle)", "modifiers": "public", "return": "Vehicle", "signature": "Vehicle frontVehicleOnLane(Vehicle vehicle)", "full_signature": "public Vehicle frontVehicleOnLane(Vehicle vehicle)", "class_method_signature": "RoadSegment.frontVehicleOnLane(Vehicle vehicle)", "testcase": false, "constructor": false}, {"identifier": "frontVehicle", "parameters": "(int lane, double vehiclePos)", "modifiers": "public", "return": "Vehicle", "signature": "Vehicle frontVehicle(int lane, double vehiclePos)", "full_signature": "public Vehicle frontVehicle(int lane, double vehiclePos)", "class_method_signature": "RoadSegment.frontVehicle(int lane, double vehiclePos)", "testcase": false, "constructor": false}, {"identifier": "eachLaneIsSorted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean eachLaneIsSorted()", "full_signature": "public boolean eachLaneIsSorted()", "class_method_signature": "RoadSegment.eachLaneIsSorted()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public final", "return": "Iterator<Vehicle>", "signature": "Iterator<Vehicle> iterator()", "full_signature": "@Override public final Iterator<Vehicle> iterator()", "class_method_signature": "RoadSegment.iterator()", "testcase": false, "constructor": false}, {"identifier": "overtakingVehicles", "parameters": "()", "modifiers": "public final", "return": "Iterator<Vehicle>", "signature": "Iterator<Vehicle> overtakingVehicles()", "full_signature": "public final Iterator<Vehicle> overtakingVehicles()", "class_method_signature": "RoadSegment.overtakingVehicles()", "testcase": false, "constructor": false}, {"identifier": "iteratorAllVehicles", "parameters": "()", "modifiers": "final", "return": "Iterator<Vehicle>", "signature": "Iterator<Vehicle> iteratorAllVehicles()", "full_signature": "final Iterator<Vehicle> iteratorAllVehicles()", "class_method_signature": "RoadSegment.iteratorAllVehicles()", "testcase": false, "constructor": false}, {"identifier": "checkForInconsistencies", "parameters": "(double time, long iterationCount, boolean isWithCrashExit)", "modifiers": "public", "return": "void", "signature": "void checkForInconsistencies(double time, long iterationCount, boolean isWithCrashExit)", "full_signature": "public void checkForInconsistencies(double time, long iterationCount, boolean isWithCrashExit)", "class_method_signature": "RoadSegment.checkForInconsistencies(double time, long iterationCount, boolean isWithCrashExit)", "testcase": false, "constructor": false}, {"identifier": "laneSegmentIterator", "parameters": "()", "modifiers": "public final", "return": "Iterator<LaneSegment>", "signature": "Iterator<LaneSegment> laneSegmentIterator()", "full_signature": "public final Iterator<LaneSegment> laneSegmentIterator()", "class_method_signature": "RoadSegment.laneSegmentIterator()", "testcase": false, "constructor": false}, {"identifier": "laneSegments", "parameters": "()", "modifiers": "public", "return": "Iterable<LaneSegment>", "signature": "Iterable<LaneSegment> laneSegments()", "full_signature": "public Iterable<LaneSegment> laneSegments()", "class_method_signature": "RoadSegment.laneSegments()", "testcase": false, "constructor": false}, {"identifier": "trafficLights", "parameters": "()", "modifiers": "public", "return": "Iterable<TrafficLight>", "signature": "Iterable<TrafficLight> trafficLights()", "full_signature": "public Iterable<TrafficLight> trafficLights()", "class_method_signature": "RoadSegment.trafficLights()", "testcase": false, "constructor": false}, {"identifier": "speedLimits", "parameters": "()", "modifiers": "public", "return": "Iterable<SpeedLimit>", "signature": "Iterable<SpeedLimit> speedLimits()", "full_signature": "public Iterable<SpeedLimit> speedLimits()", "class_method_signature": "RoadSegment.speedLimits()", "testcase": false, "constructor": false}, {"identifier": "variableMessageSignDiversions", "parameters": "()", "modifiers": "public", "return": "Iterable<VariableMessageSignDiversion>", "signature": "Iterable<VariableMessageSignDiversion> variableMessageSignDiversions()", "full_signature": "public Iterable<VariableMessageSignDiversion> variableMessageSignDiversions()", "class_method_signature": "RoadSegment.variableMessageSignDiversions()", "testcase": false, "constructor": false}, {"identifier": "gradientProfiles", "parameters": "()", "modifiers": "public", "return": "Iterable<GradientProfile>", "signature": "Iterable<GradientProfile> gradientProfiles()", "full_signature": "public Iterable<GradientProfile> gradientProfiles()", "class_method_signature": "RoadSegment.gradientProfiles()", "testcase": false, "constructor": false}, {"identifier": "flowConservingBottlenecks", "parameters": "()", "modifiers": "public", "return": "Iterable<FlowConservingBottleneck>", "signature": "Iterable<FlowConservingBottleneck> flowConservingBottlenecks()", "full_signature": "public Iterable<FlowConservingBottleneck> flowConservingBottlenecks()", "class_method_signature": "RoadSegment.flowConservingBottlenecks()", "testcase": false, "constructor": false}, {"identifier": "assertInvariant", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean assertInvariant()", "full_signature": "public boolean assertInvariant()", "class_method_signature": "RoadSegment.assertInvariant()", "testcase": false, "constructor": false}, {"identifier": "setSimpleRamp", "parameters": "(SimpleRamp simpleRamp)", "modifiers": "public", "return": "void", "signature": "void setSimpleRamp(SimpleRamp simpleRamp)", "full_signature": "public void setSimpleRamp(SimpleRamp simpleRamp)", "class_method_signature": "RoadSegment.setSimpleRamp(SimpleRamp simpleRamp)", "testcase": false, "constructor": false}, {"identifier": "setUserRoadname", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setUserRoadname(String name)", "full_signature": "public void setUserRoadname(String name)", "class_method_signature": "RoadSegment.setUserRoadname(String name)", "testcase": false, "constructor": false}, {"identifier": "roadObjects", "parameters": "()", "modifiers": "public", "return": "RoadObjects", "signature": "RoadObjects roadObjects()", "full_signature": "public RoadObjects roadObjects()", "class_method_signature": "RoadSegment.roadObjects()", "testcase": false, "constructor": false}, {"identifier": "signalPoints", "parameters": "()", "modifiers": "public", "return": "SignalPoints", "signature": "SignalPoints signalPoints()", "full_signature": "public SignalPoints signalPoints()", "class_method_signature": "RoadSegment.signalPoints()", "testcase": false, "constructor": false}, {"identifier": "getOriginNode", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node getOriginNode()", "full_signature": "public Node getOriginNode()", "class_method_signature": "RoadSegment.getOriginNode()", "testcase": false, "constructor": false}, {"identifier": "getDestinationNode", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node getDestinationNode()", "full_signature": "public Node getDestinationNode()", "class_method_signature": "RoadSegment.getDestinationNode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RoadSegment.toString()", "testcase": false, "constructor": false}, {"identifier": "getPeerRoadSegment", "parameters": "()", "modifiers": "public", "return": "RoadSegment", "signature": "RoadSegment getPeerRoadSegment()", "full_signature": "public RoadSegment getPeerRoadSegment()", "class_method_signature": "RoadSegment.getPeerRoadSegment()", "testcase": false, "constructor": false}, {"identifier": "hasPeer", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean hasPeer()", "full_signature": "public final boolean hasPeer()", "class_method_signature": "RoadSegment.hasPeer()", "testcase": false, "constructor": false}, {"identifier": "setPeerRoadSegment", "parameters": "(RoadSegment peerRoadSegment)", "modifiers": "public", "return": "void", "signature": "void setPeerRoadSegment(RoadSegment peerRoadSegment)", "full_signature": "public void setPeerRoadSegment(RoadSegment peerRoadSegment)", "class_method_signature": "RoadSegment.setPeerRoadSegment(RoadSegment peerRoadSegment)", "testcase": false, "constructor": false}, {"identifier": "setTrafficComposition", "parameters": "(TrafficCompositionGenerator composition)", "modifiers": "public", "return": "void", "signature": "void setTrafficComposition(TrafficCompositionGenerator composition)", "full_signature": "public void setTrafficComposition(TrafficCompositionGenerator composition)", "class_method_signature": "RoadSegment.setTrafficComposition(TrafficCompositionGenerator composition)", "testcase": false, "constructor": false}, {"identifier": "getTrafficComposition", "parameters": "()", "modifiers": "public", "return": "TrafficCompositionGenerator", "signature": "TrafficCompositionGenerator getTrafficComposition()", "full_signature": "public TrafficCompositionGenerator getTrafficComposition()", "class_method_signature": "RoadSegment.getTrafficComposition()", "testcase": false, "constructor": false}, {"identifier": "hasTrafficComposition", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasTrafficComposition()", "full_signature": "public boolean hasTrafficComposition()", "class_method_signature": "RoadSegment.hasTrafficComposition()", "testcase": false, "constructor": false}, {"identifier": "getFreeFlowSpeed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getFreeFlowSpeed()", "full_signature": "public double getFreeFlowSpeed()", "class_method_signature": "RoadSegment.getFreeFlowSpeed()", "testcase": false, "constructor": false}, {"identifier": "setFreeFlowSpeed", "parameters": "(double freeFlowSpeed)", "modifiers": "public", "return": "void", "signature": "void setFreeFlowSpeed(double freeFlowSpeed)", "full_signature": "public void setFreeFlowSpeed(double freeFlowSpeed)", "class_method_signature": "RoadSegment.setFreeFlowSpeed(double freeFlowSpeed)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/movsim/simulator/roadnetwork/RoadSegment.java"}, "focal_method": {"identifier": "makeLaneChanges", "parameters": "(double dt, double simulationTime, long iterationCount)", "modifiers": "public", "return": "void", "body": "public void makeLaneChanges(double dt, double simulationTime, long iterationCount) {\n\n        if (!hasPeer() && laneCount < 2) {\n            // need at least 2 lanes or a peerRoad for lane changing\n            return;\n        }\n\n        if (!overtakingSegmentInitialized) {\n            initOvertakingLane(); // lazy init.\n        }\n\n        // TODO assure priority for lane changes from slow to fast lanes\n        for (final LaneSegment laneSegment : laneSegments) {\n            assert laneSegment.assertInvariant();\n            for (Iterator<Vehicle> vehIterator = laneSegment.iterator(); vehIterator.hasNext(); ) {\n                Vehicle vehicle = vehIterator.next();\n                assert vehicle.roadSegmentId() == id;\n                if (vehicle.inProcessOfLaneChange()) {\n                    // !!! assure update in each simulation timestep\n                    vehicle.updateLaneChangeDelay(dt);\n                } else if (vehicle.considerLaneChange(dt, this)) {\n                    final int targetLane = vehicle.getTargetLane();\n                    assert targetLane != Lanes.NONE;\n                    assert laneSegment(targetLane).type() != Lanes.Type.ENTRANCE;\n                    vehIterator.remove();\n                    vehicle.setLane(targetLane);\n                    laneSegment(targetLane).addVehicle(vehicle);\n                } else if (vehicle.considerOvertakingViaPeer(dt, this)) {\n                    LOG.debug(\"### perform overtaking: vehicle={}\", vehicle);\n                    int targetLane = vehicle.getTargetLane();\n                    assert targetLane == Lanes.OVERTAKING;\n                    vehIterator.remove();\n                    vehicle.setLane(targetLane);\n                    overtakingSegment.addVehicle(vehicle);\n                }\n            }\n        }\n        checkFinishingOvertaking(dt);\n    }", "signature": "void makeLaneChanges(double dt, double simulationTime, long iterationCount)", "full_signature": "public void makeLaneChanges(double dt, double simulationTime, long iterationCount)", "class_method_signature": "RoadSegment.makeLaneChanges(double dt, double simulationTime, long iterationCount)", "testcase": false, "constructor": false, "invocations": ["hasPeer", "initOvertakingLane", "assertInvariant", "iterator", "hasNext", "next", "roadSegmentId", "inProcessOfLaneChange", "updateLaneChangeDelay", "considerLaneChange", "getTargetLane", "type", "laneSegment", "remove", "setLane", "addVehicle", "laneSegment", "considerOvertakingViaPeer", "debug", "getTargetLane", "remove", "setLane", "addVehicle", "checkFinishingOvertaking"]}, "repository": {"repo_id": 1984080, "url": "https://github.com/movsim/movsim", "language": "Java", "is_fork": false, "fork_count": 79, "stargazer_count": 229, "size": 14864, "license": "licensed"}}