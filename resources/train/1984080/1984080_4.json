{"test_class": {"identifier": "LinkTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/movsim/simulator/roadnetwork/LinkTest.java"}, "test_case": {"identifier": "testAddLanePair", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testAddLanePair() {\n        final int laneCount = 1;\n        final double roadLength = 1000.0;\n        final RoadMapping m = RoadMappingConcrete.create(laneCount, roadLength);\n        final RoadSegment r1 = new RoadSegment(roadLength, laneCount, m, RoadSegmentDirection.FORWARD);\n        final RoadSegment r2 = new RoadSegment(roadLength, laneCount, m, RoadSegmentDirection.FORWARD);\n\n        Link.addLanePair(Lanes.LANE1, r1, Lanes.LANE1, r2);\n\n        assertEquals(r2, r1.sinkRoadSegment(Lanes.LANE1));\n        assertEquals(Lanes.LANE1, r1.sinkLane(Lanes.LANE1));\n        assertEquals(r1, r2.sourceRoadSegment(Lanes.LANE1));\n        assertEquals(Lanes.LANE1, r2.sourceLane(Lanes.LANE1));\n    }", "signature": "void testAddLanePair()", "full_signature": "@Test public final void testAddLanePair()", "class_method_signature": "LinkTest.testAddLanePair()", "testcase": true, "constructor": false, "invocations": ["create", "addLanePair", "assertEquals", "sinkRoadSegment", "assertEquals", "sinkLane", "assertEquals", "sourceRoadSegment", "assertEquals", "sourceLane"]}, "focal_class": {"identifier": "Link", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Link", "parameters": "()", "modifiers": "private", "return": "", "signature": " Link()", "full_signature": "private  Link()", "class_method_signature": "Link.Link()", "testcase": false, "constructor": true}, {"identifier": "addLanePair", "parameters": "(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "modifiers": "public static", "return": "void", "signature": "void addLanePair(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "full_signature": "public static void addLanePair(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "class_method_signature": "Link.addLanePair(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "testcase": false, "constructor": false}, {"identifier": "addJoin", "parameters": "(RoadSegment sourceRoad, RoadSegment sinkRoad)", "modifiers": "public static", "return": "RoadSegment", "signature": "RoadSegment addJoin(RoadSegment sourceRoad, RoadSegment sinkRoad)", "full_signature": "public static RoadSegment addJoin(RoadSegment sourceRoad, RoadSegment sinkRoad)", "class_method_signature": "Link.addJoin(RoadSegment sourceRoad, RoadSegment sinkRoad)", "testcase": false, "constructor": false}, {"identifier": "addMerge", "parameters": "(RoadSegment fromRoad1, RoadSegment fromRoad2, RoadSegment toRoad)", "modifiers": "public static", "return": "void", "signature": "void addMerge(RoadSegment fromRoad1, RoadSegment fromRoad2, RoadSegment toRoad)", "full_signature": "public static void addMerge(RoadSegment fromRoad1, RoadSegment fromRoad2, RoadSegment toRoad)", "class_method_signature": "Link.addMerge(RoadSegment fromRoad1, RoadSegment fromRoad2, RoadSegment toRoad)", "testcase": false, "constructor": false}, {"identifier": "addFork", "parameters": "(RoadSegment fromRoad, RoadSegment toRoad1, RoadSegment toRoad2)", "modifiers": "public static", "return": "void", "signature": "void addFork(RoadSegment fromRoad, RoadSegment toRoad1, RoadSegment toRoad2)", "full_signature": "public static void addFork(RoadSegment fromRoad, RoadSegment toRoad1, RoadSegment toRoad2)", "class_method_signature": "Link.addFork(RoadSegment fromRoad, RoadSegment toRoad1, RoadSegment toRoad2)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/movsim/simulator/roadnetwork/Link.java"}, "focal_method": {"identifier": "addLanePair", "parameters": "(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "modifiers": "public static", "return": "void", "body": "public static void addLanePair(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment) {\n        // check if lanes are already connected: ambiguous xodr!\n        if (toRoadSegment.sourceLaneSegment(toLane) != null\n                && toRoadSegment.sourceLaneSegment(toLane).roadSegment() != fromRoadsegment) {\n            throw new IllegalArgumentException(\"Ambiguous network input! Cannot connect source roadSegment=\"\n                    + fromRoadsegment + \"\\nto lane=\" + toLane + \" of sink roadSegment=\" + toRoadSegment\n                    + \".\\n Sink already is=\" + toRoadSegment.sourceLaneSegment(toLane).roadSegment());\n        }\n        toRoadSegment.setSourceLaneSegmentForLane(fromRoadsegment.laneSegment(fromLane), toLane);\n\n        if (fromRoadsegment.sinkLaneSegment(fromLane) != null\n                && fromRoadsegment.sinkLaneSegment(fromLane).roadSegment() != toRoadSegment) {\n            throw new IllegalArgumentException(\"Ambiguous network input! Cannot connect sink roadSegment=\"\n                    + toRoadSegment + \"\\nfrom lane=\" + fromLane + \" of source roadSegment=\" + toRoadSegment\n                    + \".\\n Source already is=\" + fromRoadsegment.sinkLaneSegment(fromLane).roadSegment());\n        }\n        fromRoadsegment.setSinkLaneSegmentForLane(toRoadSegment.laneSegment(toLane), fromLane);\n    }", "signature": "void addLanePair(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "full_signature": "public static void addLanePair(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "class_method_signature": "Link.addLanePair(int fromLane, RoadSegment fromRoadsegment, int toLane, RoadSegment toRoadSegment)", "testcase": false, "constructor": false, "invocations": ["sourceLaneSegment", "roadSegment", "sourceLaneSegment", "roadSegment", "sourceLaneSegment", "setSourceLaneSegmentForLane", "laneSegment", "sinkLaneSegment", "roadSegment", "sinkLaneSegment", "roadSegment", "sinkLaneSegment", "setSinkLaneSegmentForLane", "laneSegment"]}, "repository": {"repo_id": 1984080, "url": "https://github.com/movsim/movsim", "language": "Java", "is_fork": false, "fork_count": 79, "stargazer_count": 229, "size": 14864, "license": "licensed"}}