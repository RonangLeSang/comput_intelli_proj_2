{"test_class": {"identifier": "ConverterRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConverterRegistry<String> instance = null;", "modifier": "private", "type": "ConverterRegistry<String>", "declarator": "instance = null", "var_name": "instance"}], "file": "lilith-data/converter/src/test/java/de/huxhorn/lilith/data/converter/ConverterRegistryTest.java"}, "test_case": {"identifier": "checkEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void checkEmpty()\n\t{\n\t\tassertNull(instance.resolveConverter(\"foo\"));\n\t}", "signature": "void checkEmpty()", "full_signature": "@Test public void checkEmpty()", "class_method_signature": "ConverterRegistryTest.checkEmpty()", "testcase": true, "constructor": false, "invocations": ["assertNull", "resolveConverter"]}, "focal_class": {"identifier": "ConverterRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Class<?>, Converter<T>> converterMap = new HashMap<>();", "modifier": "private final", "type": "Map<Class<?>, Converter<T>>", "declarator": "converterMap = new HashMap<>()", "var_name": "converterMap"}], "methods": [{"identifier": "addConverter", "parameters": "(Converter<T> converter)", "modifiers": "public", "return": "void", "signature": "void addConverter(Converter<T> converter)", "full_signature": "public void addConverter(Converter<T> converter)", "class_method_signature": "ConverterRegistry.addConverter(Converter<T> converter)", "testcase": false, "constructor": false}, {"identifier": "resolveConverter", "parameters": "(Object object)", "modifiers": "public", "return": "Converter<T>", "signature": "Converter<T> resolveConverter(Object object)", "full_signature": "public Converter<T> resolveConverter(Object object)", "class_method_signature": "ConverterRegistry.resolveConverter(Object object)", "testcase": false, "constructor": false}], "file": "lilith-data/converter/src/main/java/de/huxhorn/lilith/data/converter/ConverterRegistry.java"}, "focal_method": {"identifier": "resolveConverter", "parameters": "(Object object)", "modifiers": "public", "return": "Converter<T>", "body": "public Converter<T> resolveConverter(Object object)\n\t{\n\t\tif(object == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\tClass<?> clazz;\n\t\tif(object instanceof Class)\n\t\t{\n\t\t\tclazz = (Class<?>) object;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclazz = object.getClass();\n\t\t}\n\t\tsynchronized(converterMap)\n\t\t{\n\t\t\tConverter<T> converter = converterMap.get(clazz);\n\t\t\tif(converter != null)\n\t\t\t{\n\t\t\t\treturn converter;\n\t\t\t}\n\t\t\t// check inheritance\n\t\t\tfor(Map.Entry<Class<?>, Converter<T>> current : converterMap.entrySet())\n\t\t\t{\n\t\t\t\tClass<?> key = current.getKey();\n\t\t\t\tif(key.isAssignableFrom(clazz))\n\t\t\t\t{\n\t\t\t\t\treturn current.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}", "signature": "Converter<T> resolveConverter(Object object)", "full_signature": "public Converter<T> resolveConverter(Object object)", "class_method_signature": "ConverterRegistry.resolveConverter(Object object)", "testcase": false, "constructor": false, "invocations": ["getClass", "get", "entrySet", "getKey", "isAssignableFrom", "getValue"]}, "repository": {"repo_id": 358370, "url": "https://github.com/huxi/lilith", "stars": 103, "created": "11/2/2009 6:59:22 PM +00:00", "updates": "2020-01-26T20:23:03+00:00", "fork": "False", "license": "licensed"}}