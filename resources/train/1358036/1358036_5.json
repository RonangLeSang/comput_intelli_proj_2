{"test_class": {"identifier": "TestGraphNode", "superclass": "", "interfaces": "", "fields": [], "file": "api.utils/src/test/java/org/apache/clerezza/utils/TestGraphNode.java"}, "test_case": {"identifier": "addNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addNode() {\n        Graph g = new SimpleGraph();\n        BlankNode bNode1 = new BlankNode() {\n        };\n        BlankNode bNode2 = new BlankNode() {\n        };\n        IRI property1 = new IRI(\"http://example.org/property1\");\n        GraphNode n = new GraphNode(bNode1, g);\n        n.addProperty(property1, bNode2);\n        Assert.assertEquals(1, g.size());\n    }", "signature": "void addNode()", "full_signature": "@Test public void addNode()", "class_method_signature": "TestGraphNode.addNode()", "testcase": true, "constructor": false, "invocations": ["addProperty", "assertEquals", "size"]}, "focal_class": {"identifier": "GraphNode", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RDFTerm resource;", "modifier": "private final", "type": "RDFTerm", "declarator": "resource", "var_name": "resource"}, {"original_string": "private final Graph graph;", "modifier": "private final", "type": "Graph", "declarator": "graph", "var_name": "graph"}], "methods": [{"identifier": "GraphNode", "parameters": "(RDFTerm resource, Graph graph)", "modifiers": "public", "return": "", "signature": " GraphNode(RDFTerm resource, Graph graph)", "full_signature": "public  GraphNode(RDFTerm resource, Graph graph)", "class_method_signature": "GraphNode.GraphNode(RDFTerm resource, Graph graph)", "testcase": false, "constructor": true}, {"identifier": "getGraph", "parameters": "()", "modifiers": "public", "return": "Graph", "signature": "Graph getGraph()", "full_signature": "public Graph getGraph()", "class_method_signature": "GraphNode.getGraph()", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "()", "modifiers": "public", "return": "RDFTerm", "signature": "RDFTerm getNode()", "full_signature": "public RDFTerm getNode()", "class_method_signature": "GraphNode.getNode()", "testcase": false, "constructor": false}, {"identifier": "deleteNodeContext", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteNodeContext()", "full_signature": "public void deleteNodeContext()", "class_method_signature": "GraphNode.deleteNodeContext()", "testcase": false, "constructor": false}, {"identifier": "getNodeContext", "parameters": "()", "modifiers": "public", "return": "ImmutableGraph", "signature": "ImmutableGraph getNodeContext()", "full_signature": "public ImmutableGraph getNodeContext()", "class_method_signature": "GraphNode.getNodeContext()", "testcase": false, "constructor": false}, {"identifier": "getContextOf", "parameters": "(IRI node, final Set<RDFTerm> dontExpand)", "modifiers": "private", "return": "Graph", "signature": "Graph getContextOf(IRI node, final Set<RDFTerm> dontExpand)", "full_signature": "private Graph getContextOf(IRI node, final Set<RDFTerm> dontExpand)", "class_method_signature": "GraphNode.getContextOf(IRI node, final Set<RDFTerm> dontExpand)", "testcase": false, "constructor": false}, {"identifier": "getContextOf", "parameters": "(RDFTerm node, final Set<RDFTerm> dontExpand)", "modifiers": "private", "return": "Graph", "signature": "Graph getContextOf(RDFTerm node, final Set<RDFTerm> dontExpand)", "full_signature": "private Graph getContextOf(RDFTerm node, final Set<RDFTerm> dontExpand)", "class_method_signature": "GraphNode.getContextOf(RDFTerm node, final Set<RDFTerm> dontExpand)", "testcase": false, "constructor": false}, {"identifier": "getContextOf", "parameters": "(RDFTerm node, final Set<RDFTerm> dontExpand, Acceptor acceptor)", "modifiers": "private", "return": "Graph", "signature": "Graph getContextOf(RDFTerm node, final Set<RDFTerm> dontExpand, Acceptor acceptor)", "full_signature": "private Graph getContextOf(RDFTerm node, final Set<RDFTerm> dontExpand, Acceptor acceptor)", "class_method_signature": "GraphNode.getContextOf(RDFTerm node, final Set<RDFTerm> dontExpand, Acceptor acceptor)", "testcase": false, "constructor": false}, {"identifier": "getTypeSelectedObjects", "parameters": "(IRI property, final Class<T> type)", "modifiers": "private", "return": "Iterator<T>", "signature": "Iterator<T> getTypeSelectedObjects(IRI property, final Class<T> type)", "full_signature": "private Iterator<T> getTypeSelectedObjects(IRI property, final Class<T> type)", "class_method_signature": "GraphNode.getTypeSelectedObjects(IRI property, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getLiterals", "parameters": "(IRI property)", "modifiers": "public", "return": "Iterator<Literal>", "signature": "Iterator<Literal> getLiterals(IRI property)", "full_signature": "public Iterator<Literal> getLiterals(IRI property)", "class_method_signature": "GraphNode.getLiterals(IRI property)", "testcase": false, "constructor": false}, {"identifier": "countObjects", "parameters": "(IRI property)", "modifiers": "public", "return": "int", "signature": "int countObjects(IRI property)", "full_signature": "public int countObjects(IRI property)", "class_method_signature": "GraphNode.countObjects(IRI property)", "testcase": false, "constructor": false}, {"identifier": "countTriples", "parameters": "(final Iterator<Triple> triples)", "modifiers": "private", "return": "int", "signature": "int countTriples(final Iterator<Triple> triples)", "full_signature": "private int countTriples(final Iterator<Triple> triples)", "class_method_signature": "GraphNode.countTriples(final Iterator<Triple> triples)", "testcase": false, "constructor": false}, {"identifier": "getObjects", "parameters": "(IRI property)", "modifiers": "public", "return": "Iterator<RDFTerm>", "signature": "Iterator<RDFTerm> getObjects(IRI property)", "full_signature": "public Iterator<RDFTerm> getObjects(IRI property)", "class_method_signature": "GraphNode.getObjects(IRI property)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(IRI property, RDFTerm object)", "modifiers": "public", "return": "boolean", "signature": "boolean hasProperty(IRI property, RDFTerm object)", "full_signature": "public boolean hasProperty(IRI property, RDFTerm object)", "class_method_signature": "GraphNode.hasProperty(IRI property, RDFTerm object)", "testcase": false, "constructor": false}, {"identifier": "countSubjects", "parameters": "(IRI property)", "modifiers": "public", "return": "int", "signature": "int countSubjects(IRI property)", "full_signature": "public int countSubjects(IRI property)", "class_method_signature": "GraphNode.countSubjects(IRI property)", "testcase": false, "constructor": false}, {"identifier": "getSubjects", "parameters": "(IRI property)", "modifiers": "public", "return": "Iterator<BlankNodeOrIRI>", "signature": "Iterator<BlankNodeOrIRI> getSubjects(IRI property)", "full_signature": "public Iterator<BlankNodeOrIRI> getSubjects(IRI property)", "class_method_signature": "GraphNode.getSubjects(IRI property)", "testcase": false, "constructor": false}, {"identifier": "getIRIObjects", "parameters": "(IRI property)", "modifiers": "public", "return": "Iterator<IRI>", "signature": "Iterator<IRI> getIRIObjects(IRI property)", "full_signature": "public Iterator<IRI> getIRIObjects(IRI property)", "class_method_signature": "GraphNode.getIRIObjects(IRI property)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "Iterator<IRI>", "signature": "Iterator<IRI> getProperties()", "full_signature": "public Iterator<IRI> getProperties()", "class_method_signature": "GraphNode.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getInverseProperties", "parameters": "()", "modifiers": "public", "return": "Iterator<IRI>", "signature": "Iterator<IRI> getInverseProperties()", "full_signature": "public Iterator<IRI> getInverseProperties()", "class_method_signature": "GraphNode.getInverseProperties()", "testcase": false, "constructor": false}, {"identifier": "getUniquePredicates", "parameters": "(final Iterator<Triple> triples)", "modifiers": "private", "return": "Iterator<IRI>", "signature": "Iterator<IRI> getUniquePredicates(final Iterator<Triple> triples)", "full_signature": "private Iterator<IRI> getUniquePredicates(final Iterator<Triple> triples)", "class_method_signature": "GraphNode.getUniquePredicates(final Iterator<Triple> triples)", "testcase": false, "constructor": false}, {"identifier": "addProperty", "parameters": "(IRI predicate, RDFTerm object)", "modifiers": "public", "return": "void", "signature": "void addProperty(IRI predicate, RDFTerm object)", "full_signature": "public void addProperty(IRI predicate, RDFTerm object)", "class_method_signature": "GraphNode.addProperty(IRI predicate, RDFTerm object)", "testcase": false, "constructor": false}, {"identifier": "addPropertyValue", "parameters": "(IRI property, Object value)", "modifiers": "public", "return": "void", "signature": "void addPropertyValue(IRI property, Object value)", "full_signature": "public void addPropertyValue(IRI property, Object value)", "class_method_signature": "GraphNode.addPropertyValue(IRI property, Object value)", "testcase": false, "constructor": false}, {"identifier": "addInverseProperty", "parameters": "(IRI predicate, RDFTerm subject)", "modifiers": "public", "return": "void", "signature": "void addInverseProperty(IRI predicate, RDFTerm subject)", "full_signature": "public void addInverseProperty(IRI predicate, RDFTerm subject)", "class_method_signature": "GraphNode.addInverseProperty(IRI predicate, RDFTerm subject)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "()", "modifiers": "public", "return": "List<RDFTerm>", "signature": "List<RDFTerm> asList()", "full_signature": "public List<RDFTerm> asList()", "class_method_signature": "GraphNode.asList()", "testcase": false, "constructor": false}, {"identifier": "deleteProperties", "parameters": "(IRI predicate)", "modifiers": "public", "return": "void", "signature": "void deleteProperties(IRI predicate)", "full_signature": "public void deleteProperties(IRI predicate)", "class_method_signature": "GraphNode.deleteProperties(IRI predicate)", "testcase": false, "constructor": false}, {"identifier": "deleteProperty", "parameters": "(IRI predicate, RDFTerm object)", "modifiers": "public", "return": "void", "signature": "void deleteProperty(IRI predicate, RDFTerm object)", "full_signature": "public void deleteProperty(IRI predicate, RDFTerm object)", "class_method_signature": "GraphNode.deleteProperty(IRI predicate, RDFTerm object)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GraphNode.toString()", "testcase": false, "constructor": false}, {"identifier": "replaceWith", "parameters": "(BlankNodeOrIRI replacement)", "modifiers": "public", "return": "GraphNode", "signature": "GraphNode replaceWith(BlankNodeOrIRI replacement)", "full_signature": "public GraphNode replaceWith(BlankNodeOrIRI replacement)", "class_method_signature": "GraphNode.replaceWith(BlankNodeOrIRI replacement)", "testcase": false, "constructor": false}, {"identifier": "replaceWith", "parameters": "(BlankNodeOrIRI replacement, boolean checkPredicates)", "modifiers": "public", "return": "GraphNode", "signature": "GraphNode replaceWith(BlankNodeOrIRI replacement, boolean checkPredicates)", "full_signature": "public GraphNode replaceWith(BlankNodeOrIRI replacement, boolean checkPredicates)", "class_method_signature": "GraphNode.replaceWith(BlankNodeOrIRI replacement, boolean checkPredicates)", "testcase": false, "constructor": false}, {"identifier": "getObjectNodes", "parameters": "(IRI property)", "modifiers": "public", "return": "Iterator<GraphNode>", "signature": "Iterator<GraphNode> getObjectNodes(IRI property)", "full_signature": "public Iterator<GraphNode> getObjectNodes(IRI property)", "class_method_signature": "GraphNode.getObjectNodes(IRI property)", "testcase": false, "constructor": false}, {"identifier": "getSubjectNodes", "parameters": "(IRI property)", "modifiers": "public", "return": "Iterator<GraphNode>", "signature": "Iterator<GraphNode> getSubjectNodes(IRI property)", "full_signature": "public Iterator<GraphNode> getSubjectNodes(IRI property)", "class_method_signature": "GraphNode.getSubjectNodes(IRI property)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "GraphNode.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GraphNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "readLock", "parameters": "()", "modifiers": "public", "return": "Lock", "signature": "Lock readLock()", "full_signature": "public Lock readLock()", "class_method_signature": "GraphNode.readLock()", "testcase": false, "constructor": false}, {"identifier": "writeLock", "parameters": "()", "modifiers": "public", "return": "Lock", "signature": "Lock writeLock()", "full_signature": "public Lock writeLock()", "class_method_signature": "GraphNode.writeLock()", "testcase": false, "constructor": false}], "file": "api.utils/src/main/java/org/apache/clerezza/utils/GraphNode.java"}, "focal_method": {"identifier": "addProperty", "parameters": "(IRI predicate, RDFTerm object)", "modifiers": "public", "return": "void", "body": "public void addProperty(IRI predicate, RDFTerm object) {\n        if (resource instanceof BlankNodeOrIRI) {\n            graph.add(new TripleImpl((BlankNodeOrIRI) resource, predicate, object));\n        } else {\n            throw new RuntimeException(\"Literals cannot be the subject of a statement\");\n        }\n    }", "signature": "void addProperty(IRI predicate, RDFTerm object)", "full_signature": "public void addProperty(IRI predicate, RDFTerm object)", "class_method_signature": "GraphNode.addProperty(IRI predicate, RDFTerm object)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 1358036, "url": "https://github.com/apache/clerezza", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 35, "size": 28569, "license": "licensed"}}