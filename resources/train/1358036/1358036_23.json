{"test_class": {"identifier": "GraphMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static IRI u1 = new IRI(\"http://example.org/u1\");", "modifier": "final static", "type": "IRI", "declarator": "u1 = new IRI(\"http://example.org/u1\")", "var_name": "u1"}], "file": "api-implementation/src/test/java/org/apache/clerezza/implementation/graphmatching/GraphMatcherTest.java"}, "test_case": {"identifier": "test13", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test13() {\n        BlankNodeOrIRI start1 = new BlankNode();\n        Graph tc1 = Utils4Testing.generateLine(4, start1);\n        tc1.addAll(Utils4Testing.generateLine(5, start1));\n        BlankNodeOrIRI start2 = new BlankNode();\n        Graph tc2 = Utils4Testing.generateLine(3, start2);\n        tc2.addAll(Utils4Testing.generateLine(3, start2));\n        Assert.assertEquals(9, tc1.size());\n        final Map<BlankNode, BlankNode> mapping = GraphMatcher.getValidMapping(tc1, tc2);\n        Assert.assertNull(mapping);\n    }", "signature": "void test13()", "full_signature": "@Test public void test13()", "class_method_signature": "GraphMatcherTest.test13()", "testcase": true, "constructor": false, "invocations": ["generateLine", "addAll", "generateLine", "generateLine", "addAll", "generateLine", "assertEquals", "size", "getValidMapping", "assertNull"]}, "focal_class": {"identifier": "GraphMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger log = Logger.getLogger(GraphMatcher.class.getName());", "modifier": "private final static", "type": "Logger", "declarator": "log = Logger.getLogger(GraphMatcher.class.getName())", "var_name": "log"}], "methods": [{"identifier": "getValidMapping", "parameters": "(Graph og1, Graph og2)", "modifiers": "public static", "return": "Map<BlankNode, BlankNode>", "signature": "Map<BlankNode, BlankNode> getValidMapping(Graph og1, Graph og2)", "full_signature": "public static Map<BlankNode, BlankNode> getValidMapping(Graph og1, Graph og2)", "class_method_signature": "GraphMatcher.getValidMapping(Graph og1, Graph og2)", "testcase": false, "constructor": false}, {"identifier": "trialAndErrorMatching", "parameters": "(Graph g1, Graph g2,\n                                                                   Map<Set<BlankNode>, Set<BlankNode>> matchingGroups)", "modifiers": "private static", "return": "Map<BlankNode, BlankNode>", "signature": "Map<BlankNode, BlankNode> trialAndErrorMatching(Graph g1, Graph g2,\n                                                                   Map<Set<BlankNode>, Set<BlankNode>> matchingGroups)", "full_signature": "private static Map<BlankNode, BlankNode> trialAndErrorMatching(Graph g1, Graph g2,\n                                                                   Map<Set<BlankNode>, Set<BlankNode>> matchingGroups)", "class_method_signature": "GraphMatcher.trialAndErrorMatching(Graph g1, Graph g2,\n                                                                   Map<Set<BlankNode>, Set<BlankNode>> matchingGroups)", "testcase": false, "constructor": false}, {"identifier": "checkMapping", "parameters": "(Graph g1, Graph g2, Map<BlankNode, BlankNode> map)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkMapping(Graph g1, Graph g2, Map<BlankNode, BlankNode> map)", "full_signature": "private static boolean checkMapping(Graph g1, Graph g2, Map<BlankNode, BlankNode> map)", "class_method_signature": "GraphMatcher.checkMapping(Graph g1, Graph g2, Map<BlankNode, BlankNode> map)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Triple triple, Map<BlankNode, BlankNode> map)", "modifiers": "private static", "return": "Triple", "signature": "Triple map(Triple triple, Map<BlankNode, BlankNode> map)", "full_signature": "private static Triple map(Triple triple, Map<BlankNode, BlankNode> map)", "class_method_signature": "GraphMatcher.map(Triple triple, Map<BlankNode, BlankNode> map)", "testcase": false, "constructor": false}], "file": "api-implementation/src/main/java/org/apache/clerezza/implementation/graphmatching/GraphMatcher.java"}, "focal_method": {"identifier": "getValidMapping", "parameters": "(Graph og1, Graph og2)", "modifiers": "public static", "return": "Map<BlankNode, BlankNode>", "body": "public static Map<BlankNode, BlankNode> getValidMapping(Graph og1, Graph og2) {\n        Graph g1 = new SimpleGraph(og1);\n        Graph g2 = new SimpleGraph(og2);\n        if (!Utils.removeGrounded(g1, g2)) {\n            return null;\n        }\n        final HashMatching hashMatching;\n        try {\n            hashMatching = new HashMatching(g1, g2);\n        } catch (GraphNotIsomorphicException ex) {\n            return null;\n        }\n        Map<BlankNode, BlankNode> matchings = hashMatching.getMatchings();\n        if (g1.size() > 0) {\n            //start trial an error matching\n            //TODO (CLEREZZA-81) at least in the situation where one matching\n            //group is big (approx > 5) we should switch back to hash-based matching\n            //after a first guessed matching, rather than try all permutations\n            Map<BlankNode, BlankNode> remainingMappings = trialAndErrorMatching(g1, g2, hashMatching.getMatchingGroups());\n            if (remainingMappings == null) {\n                return null;\n            } else {\n                matchings.putAll(remainingMappings);\n            }\n        }\n        return matchings;\n    }", "signature": "Map<BlankNode, BlankNode> getValidMapping(Graph og1, Graph og2)", "full_signature": "public static Map<BlankNode, BlankNode> getValidMapping(Graph og1, Graph og2)", "class_method_signature": "GraphMatcher.getValidMapping(Graph og1, Graph og2)", "testcase": false, "constructor": false, "invocations": ["removeGrounded", "getMatchings", "size", "trialAndErrorMatching", "getMatchingGroups", "putAll"]}, "repository": {"repo_id": 1358036, "url": "https://github.com/apache/clerezza", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 35, "size": 28569, "license": "licensed"}}