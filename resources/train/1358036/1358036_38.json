{"test_class": {"identifier": "SparqlPreParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static IRI STORED_NAME_GRAPH = new IRI(\"http://example.org/named.graph\");", "modifier": "private final static", "type": "IRI", "declarator": "STORED_NAME_GRAPH = new IRI(\"http://example.org/named.graph\")", "var_name": "STORED_NAME_GRAPH"}, {"original_string": "private TestGraphStore graphStore = new TestGraphStore(STORED_NAME_GRAPH);", "modifier": "private", "type": "TestGraphStore", "declarator": "graphStore = new TestGraphStore(STORED_NAME_GRAPH)", "var_name": "graphStore"}, {"original_string": "private final static IRI DEFAULT_GRAPH = new IRI(\"http://example.org/default.graph\");", "modifier": "private final static", "type": "IRI", "declarator": "DEFAULT_GRAPH = new IRI(\"http://example.org/default.graph\")", "var_name": "DEFAULT_GRAPH"}, {"original_string": "private final static IRI TEST_GRAPH = new IRI(\"http://example.org/test.graph\");", "modifier": "private final static", "type": "IRI", "declarator": "TEST_GRAPH = new IRI(\"http://example.org/test.graph\")", "var_name": "TEST_GRAPH"}], "file": "sparql/src/test/java/org/apache/clerezza/sparql/SparqlPreParserTest.java"}, "test_case": {"identifier": "testDroppingNamedGraph", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDroppingNamedGraph() throws ParseException {\n\n        String queryStr = \"DROP SILENT NAMED\";\n\n        SparqlPreParser parser;\n        parser = new SparqlPreParser(this.graphStore);\n        Set<IRI> referredGraphs = parser.getReferredGraphs(queryStr, DEFAULT_GRAPH);\n        Assert.assertTrue(referredGraphs.contains(STORED_NAME_GRAPH));\n    }", "signature": "void testDroppingNamedGraph()", "full_signature": "@Test public void testDroppingNamedGraph()", "class_method_signature": "SparqlPreParserTest.testDroppingNamedGraph()", "testcase": true, "constructor": false, "invocations": ["getReferredGraphs", "assertTrue", "contains"]}, "focal_class": {"identifier": "SparqlPreParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "GraphStore graphStore;", "modifier": "", "type": "GraphStore", "declarator": "graphStore", "var_name": "graphStore"}], "methods": [{"identifier": "SparqlPreParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " SparqlPreParser()", "full_signature": "public  SparqlPreParser()", "class_method_signature": "SparqlPreParser.SparqlPreParser()", "testcase": false, "constructor": true}, {"identifier": "SparqlPreParser", "parameters": "(GraphStore graphStore)", "modifiers": "public", "return": "", "signature": " SparqlPreParser(GraphStore graphStore)", "full_signature": "public  SparqlPreParser(GraphStore graphStore)", "class_method_signature": "SparqlPreParser.SparqlPreParser(GraphStore graphStore)", "testcase": false, "constructor": true}, {"identifier": "getReferredGraphs", "parameters": "(String queryString, IRI defaultGraph)", "modifiers": "public", "return": "Set<IRI>", "signature": "Set<IRI> getReferredGraphs(String queryString, IRI defaultGraph)", "full_signature": "public Set<IRI> getReferredGraphs(String queryString, IRI defaultGraph)", "class_method_signature": "SparqlPreParser.getReferredGraphs(String queryString, IRI defaultGraph)", "testcase": false, "constructor": false}, {"identifier": "referringVariableNamedGraph", "parameters": "(Query query)", "modifiers": "private", "return": "boolean", "signature": "boolean referringVariableNamedGraph(Query query)", "full_signature": "private boolean referringVariableNamedGraph(Query query)", "class_method_signature": "SparqlPreParser.referringVariableNamedGraph(Query query)", "testcase": false, "constructor": false}, {"identifier": "referringVariableNamedGraph", "parameters": "(Set<GraphPattern> graphPatterns)", "modifiers": "private", "return": "boolean", "signature": "boolean referringVariableNamedGraph(Set<GraphPattern> graphPatterns)", "full_signature": "private boolean referringVariableNamedGraph(Set<GraphPattern> graphPatterns)", "class_method_signature": "SparqlPreParser.referringVariableNamedGraph(Set<GraphPattern> graphPatterns)", "testcase": false, "constructor": false}, {"identifier": "referringVariableNamedGraph", "parameters": "(GraphPattern graphPattern)", "modifiers": "private", "return": "boolean", "signature": "boolean referringVariableNamedGraph(GraphPattern graphPattern)", "full_signature": "private boolean referringVariableNamedGraph(GraphPattern graphPattern)", "class_method_signature": "SparqlPreParser.referringVariableNamedGraph(GraphPattern graphPattern)", "testcase": false, "constructor": false}], "file": "sparql/src/main/java/org/apache/clerezza/sparql/SparqlPreParser.java"}, "focal_method": {"identifier": "getReferredGraphs", "parameters": "(String queryString, IRI defaultGraph)", "modifiers": "public", "return": "Set<IRI>", "body": "public Set<IRI> getReferredGraphs(String queryString, IRI defaultGraph) throws ParseException {\n        Set<IRI> referredGraphs;\n        JavaCCGeneratedSparqlPreParser parser = new JavaCCGeneratedSparqlPreParser(new StringReader(queryString));\n        SparqlUnit sparqlUnit;\n        sparqlUnit = parser.parse();\n        boolean referringVariableNamedGraph = false;\n        if (sparqlUnit.isQuery()) {\n            Query q = sparqlUnit.getQuery();\n            DataSet dataSet = q.getDataSet();\n            if (dataSet != null) {\n                referredGraphs = dataSet.getDefaultGraphs();\n                referredGraphs.addAll(dataSet.getNamedGraphs());\n            } else {\n                referredGraphs = new HashSet<IRI>();\n            }\n            GroupGraphPattern queryPattern = q.getQueryPattern();\n            if (queryPattern != null) {\n                Set<GraphPattern> graphPatterns = queryPattern.getGraphPatterns();\n                for (GraphPattern graphPattern : graphPatterns) {\n                }\n            }\n//            referringVariableNamedGraph = q.referringVariableNamedGraph();\n            referringVariableNamedGraph = referringVariableNamedGraph(q);\n        } else {\n            Update u = sparqlUnit.getUpdate();\n            referredGraphs = u.getReferredGraphs(defaultGraph, graphStore);\n        }\n        if (referredGraphs.isEmpty()) {\n            if (referringVariableNamedGraph) {\n                return null;\n            }\n            referredGraphs.add(defaultGraph);\n        }\n        return referredGraphs;\n    }", "signature": "Set<IRI> getReferredGraphs(String queryString, IRI defaultGraph)", "full_signature": "public Set<IRI> getReferredGraphs(String queryString, IRI defaultGraph)", "class_method_signature": "SparqlPreParser.getReferredGraphs(String queryString, IRI defaultGraph)", "testcase": false, "constructor": false, "invocations": ["parse", "isQuery", "getQuery", "getDataSet", "getDefaultGraphs", "addAll", "getNamedGraphs", "getQueryPattern", "getGraphPatterns", "referringVariableNamedGraph", "getUpdate", "getReferredGraphs", "isEmpty", "add"]}, "repository": {"repo_id": 1358036, "url": "https://github.com/apache/clerezza", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 35, "size": 28569, "license": "licensed"}}