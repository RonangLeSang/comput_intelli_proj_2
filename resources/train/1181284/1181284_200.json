{"test_class": {"identifier": "SinglePluginLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-old/src/test/java/org/maera/plugin/loaders/SinglePluginLoaderTest.java"}, "test_case": {"identifier": "testUnknownPluginModule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnknownPluginModule() throws PluginParseException {\n        final SinglePluginLoader loader = new SinglePluginLoader(\"test-bad-plugin.xml\");\n        final Collection<Plugin> plugins = loader.loadAllPlugins(new DefaultModuleDescriptorFactory(new DefaultHostContainer()));\n        final List<Plugin> pluginsList = new ArrayList<Plugin>(plugins);\n\n        assertEquals(1, pluginsList.size());\n\n        final Plugin plugin = plugins.iterator().next();\n        final List<ModuleDescriptor<?>> moduleList = new ArrayList<ModuleDescriptor<?>>(plugin.getModuleDescriptors());\n\n        // The module that had the problem should be an\n        // UnrecognisedModuleDescriptor\n        assertEquals(UnrecognisedModuleDescriptor.class, moduleList.get(0).getClass());\n    }", "signature": "void testUnknownPluginModule()", "full_signature": "@Test public void testUnknownPluginModule()", "class_method_signature": "SinglePluginLoaderTest.testUnknownPluginModule()", "testcase": true, "constructor": false, "invocations": ["loadAllPlugins", "assertEquals", "size", "next", "iterator", "getModuleDescriptors", "assertEquals", "getClass", "get"]}, "focal_class": {"identifier": "SinglePluginLoader", "superclass": "", "interfaces": "implements PluginLoader", "fields": [{"original_string": "protected Collection<Plugin> plugins;", "modifier": "protected", "type": "Collection<Plugin>", "declarator": "plugins", "var_name": "plugins"}, {"original_string": "private final String resource;", "modifier": "private final", "type": "String", "declarator": "resource", "var_name": "resource"}, {"original_string": "private final URL url;", "modifier": "private final", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private final DescriptorParserFactory descriptorParserFactory = new XmlDescriptorParserFactory();", "modifier": "private final", "type": "DescriptorParserFactory", "declarator": "descriptorParserFactory = new XmlDescriptorParserFactory()", "var_name": "descriptorParserFactory"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(SinglePluginLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SinglePluginLoader.class)", "var_name": "log"}, {"original_string": "private final AtomicReference<InputStream> inputStreamRef;", "modifier": "private final", "type": "AtomicReference<InputStream>", "declarator": "inputStreamRef", "var_name": "inputStreamRef"}], "methods": [{"identifier": "SinglePluginLoader", "parameters": "(final String resource)", "modifiers": "public", "return": "", "signature": " SinglePluginLoader(final String resource)", "full_signature": "public  SinglePluginLoader(final String resource)", "class_method_signature": "SinglePluginLoader.SinglePluginLoader(final String resource)", "testcase": false, "constructor": true}, {"identifier": "SinglePluginLoader", "parameters": "(final URL url)", "modifiers": "public", "return": "", "signature": " SinglePluginLoader(final URL url)", "full_signature": "public  SinglePluginLoader(final URL url)", "class_method_signature": "SinglePluginLoader.SinglePluginLoader(final URL url)", "testcase": false, "constructor": true}, {"identifier": "SinglePluginLoader", "parameters": "(final InputStream is)", "modifiers": "public", "return": "", "signature": " SinglePluginLoader(final InputStream is)", "full_signature": "public  SinglePluginLoader(final InputStream is)", "class_method_signature": "SinglePluginLoader.SinglePluginLoader(final InputStream is)", "testcase": false, "constructor": true}, {"identifier": "loadAllPlugins", "parameters": "(final ModuleDescriptorFactory moduleDescriptorFactory)", "modifiers": "public", "return": "Collection<Plugin>", "signature": "Collection<Plugin> loadAllPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "full_signature": "public Collection<Plugin> loadAllPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "class_method_signature": "SinglePluginLoader.loadAllPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "testcase": false, "constructor": false}, {"identifier": "supportsRemoval", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean supportsRemoval()", "full_signature": "public boolean supportsRemoval()", "class_method_signature": "SinglePluginLoader.supportsRemoval()", "testcase": false, "constructor": false}, {"identifier": "supportsAddition", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean supportsAddition()", "full_signature": "public boolean supportsAddition()", "class_method_signature": "SinglePluginLoader.supportsAddition()", "testcase": false, "constructor": false}, {"identifier": "addFoundPlugins", "parameters": "(final ModuleDescriptorFactory moduleDescriptorFactory)", "modifiers": "public", "return": "Collection<Plugin>", "signature": "Collection<Plugin> addFoundPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "full_signature": "public Collection<Plugin> addFoundPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "class_method_signature": "SinglePluginLoader.addFoundPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "testcase": false, "constructor": false}, {"identifier": "removePlugin", "parameters": "(final Plugin plugin)", "modifiers": "public", "return": "void", "signature": "void removePlugin(final Plugin plugin)", "full_signature": "public void removePlugin(final Plugin plugin)", "class_method_signature": "SinglePluginLoader.removePlugin(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "(final ModuleDescriptorFactory moduleDescriptorFactory)", "modifiers": "protected", "return": "Plugin", "signature": "Plugin loadPlugin(final ModuleDescriptorFactory moduleDescriptorFactory)", "full_signature": "protected Plugin loadPlugin(final ModuleDescriptorFactory moduleDescriptorFactory)", "class_method_signature": "SinglePluginLoader.loadPlugin(final ModuleDescriptorFactory moduleDescriptorFactory)", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getIdentifier()", "full_signature": "private String getIdentifier()", "class_method_signature": "SinglePluginLoader.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getNewPlugin", "parameters": "()", "modifiers": "protected", "return": "StaticPlugin", "signature": "StaticPlugin getNewPlugin()", "full_signature": "protected StaticPlugin getNewPlugin()", "class_method_signature": "SinglePluginLoader.getNewPlugin()", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "protected", "return": "InputStream", "signature": "InputStream getSource()", "full_signature": "protected InputStream getSource()", "class_method_signature": "SinglePluginLoader.getSource()", "testcase": false, "constructor": false}], "file": "core-old/src/main/java/org/maera/plugin/loaders/SinglePluginLoader.java"}, "focal_method": {"identifier": "loadAllPlugins", "parameters": "(final ModuleDescriptorFactory moduleDescriptorFactory)", "modifiers": "public", "return": "Collection<Plugin>", "body": "public Collection<Plugin> loadAllPlugins(final ModuleDescriptorFactory moduleDescriptorFactory) {\n        if (plugins == null) {\n            Plugin plugin;\n            try {\n                plugin = loadPlugin(moduleDescriptorFactory);\n            }\n            catch (RuntimeException ex) {\n                String id = getIdentifier();\n                log.error(\"Error loading plugin or descriptor: \" + id, ex);\n                plugin = new UnloadablePlugin(id + \": \" + ex);\n                plugin.setKey(id);\n            }\n            plugins = Collections.singleton(plugin);\n        }\n        return plugins;\n    }", "signature": "Collection<Plugin> loadAllPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "full_signature": "public Collection<Plugin> loadAllPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "class_method_signature": "SinglePluginLoader.loadAllPlugins(final ModuleDescriptorFactory moduleDescriptorFactory)", "testcase": false, "constructor": false, "invocations": ["loadPlugin", "getIdentifier", "error", "setKey", "singleton"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}