{"test_class": {"identifier": "AlternativeDirectoryResourceLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File base;", "modifier": "private", "type": "File", "declarator": "base", "var_name": "base"}, {"original_string": "private File kid;", "modifier": "private", "type": "File", "declarator": "kid", "var_name": "kid"}], "file": "core-old/src/test/java/org/maera/plugin/util/resource/AlternativeDirectoryResourceLoaderTest.java"}, "test_case": {"identifier": "testGetResource", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void testGetResource() throws MalformedURLException {\n        try {\n            System.setProperty(AlternativeDirectoryResourceLoader.PLUGIN_RESOURCE_DIRECTORIES, base.getAbsolutePath());\n            AlternativeResourceLoader loader = new AlternativeDirectoryResourceLoader();\n            assertEquals(new File(base, \"classes\").toURI().toURL(), loader.getResource(\"classes\"));\n            assertNull(loader.getResource(\"asdfasdfasf\"));\n        }\n        finally {\n            System.getProperties().remove(AlternativeDirectoryResourceLoader.PLUGIN_RESOURCE_DIRECTORIES);\n        }\n    }", "signature": "void testGetResource()", "full_signature": "@Ignore @Test public void testGetResource()", "class_method_signature": "AlternativeDirectoryResourceLoaderTest.testGetResource()", "testcase": true, "constructor": false, "invocations": ["setProperty", "getAbsolutePath", "assertEquals", "toURL", "toURI", "getResource", "assertNull", "getResource", "remove", "getProperties"]}, "focal_class": {"identifier": "AlternativeDirectoryResourceLoader", "superclass": "", "interfaces": "implements AlternativeResourceLoader", "fields": [{"original_string": "private final List<File> resourceDirectories;", "modifier": "private final", "type": "List<File>", "declarator": "resourceDirectories", "var_name": "resourceDirectories"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(AlternativeDirectoryResourceLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AlternativeDirectoryResourceLoader.class)", "var_name": "log"}, {"original_string": "public static final String PLUGIN_RESOURCE_DIRECTORIES = \"plugin.resource.directories\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_RESOURCE_DIRECTORIES = \"plugin.resource.directories\"", "var_name": "PLUGIN_RESOURCE_DIRECTORIES"}], "methods": [{"identifier": "AlternativeDirectoryResourceLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " AlternativeDirectoryResourceLoader()", "full_signature": "public  AlternativeDirectoryResourceLoader()", "class_method_signature": "AlternativeDirectoryResourceLoader.AlternativeDirectoryResourceLoader()", "testcase": false, "constructor": true}, {"identifier": "getResource", "parameters": "(String path)", "modifiers": "public", "return": "URL", "signature": "URL getResource(String path)", "full_signature": "public URL getResource(String path)", "class_method_signature": "AlternativeDirectoryResourceLoader.getResource(String path)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String name)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getResourceAsStream(String name)", "full_signature": "public InputStream getResourceAsStream(String name)", "class_method_signature": "AlternativeDirectoryResourceLoader.getResourceAsStream(String name)", "testcase": false, "constructor": false}, {"identifier": "getResourceDirectories", "parameters": "()", "modifiers": "public", "return": "List<File>", "signature": "List<File> getResourceDirectories()", "full_signature": "public List<File> getResourceDirectories()", "class_method_signature": "AlternativeDirectoryResourceLoader.getResourceDirectories()", "testcase": false, "constructor": false}], "file": "core-old/src/main/java/org/maera/plugin/util/resource/AlternativeDirectoryResourceLoader.java"}, "focal_method": {"identifier": "getResource", "parameters": "(String path)", "modifiers": "public", "return": "URL", "body": "public URL getResource(String path) {\n        for (File dir : resourceDirectories) {\n            File file = new File(dir, path);\n            if (file.exists()) {\n                try {\n                    return file.toURI().toURL();\n                }\n                catch (MalformedURLException e) {\n                    log.error(\"Malformed URL: \" + file.toString(), e);\n                }\n            } else {\n                log.debug(\"File \" + file + \" not found, ignoring\");\n            }\n        }\n        return null;\n    }", "signature": "URL getResource(String path)", "full_signature": "public URL getResource(String path)", "class_method_signature": "AlternativeDirectoryResourceLoader.getResource(String path)", "testcase": false, "constructor": false, "invocations": ["exists", "toURL", "toURI", "error", "toString", "debug"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}