{"test_class": {"identifier": "PluginsClassLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PLUGIN_KEY = \"aPluginKey\";", "modifier": "private static final", "type": "String", "declarator": "PLUGIN_KEY = \"aPluginKey\"", "var_name": "PLUGIN_KEY"}, {"original_string": "private static final String TEST_CLASS = \"java.lang.String\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CLASS = \"java.lang.String\"", "var_name": "TEST_CLASS"}, {"original_string": "private static final String TEST_RESOURCE = \"log4j.properties\";", "modifier": "private static final", "type": "String", "declarator": "TEST_RESOURCE = \"log4j.properties\"", "var_name": "TEST_RESOURCE"}, {"original_string": "private Mock mockPlugin;", "modifier": "private", "type": "Mock", "declarator": "mockPlugin", "var_name": "mockPlugin"}, {"original_string": "private Mock mockPluginAccessor;", "modifier": "private", "type": "Mock", "declarator": "mockPluginAccessor", "var_name": "mockPluginAccessor"}, {"original_string": "private PluginsClassLoader pluginsClassLoader;", "modifier": "private", "type": "PluginsClassLoader", "declarator": "pluginsClassLoader", "var_name": "pluginsClassLoader"}], "file": "core-old/src/test/java/org/maera/plugin/classloader/PluginsClassLoaderTest.java"}, "test_case": {"identifier": "testGetPluginForClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPluginForClass() throws Exception {\n        final MockPluginAccessor mockPluginAccessor = new MockPluginAccessor();\n        PluginsClassLoader pluginsClassLoader = new PluginsClassLoader(mockPluginAccessor);\n        // Set up plugin A\n        MockClassLoader mockClassLoaderA = new MockClassLoader();\n        mockClassLoaderA.register(\"com.acme.Ant\", String.class);\n        mockClassLoaderA.register(\"com.acme.Clash\", String.class);\n        MockPlugin pluginA = new MockPlugin(\"A\", mockClassLoaderA);\n        mockPluginAccessor.addPlugin(pluginA);\n        // Set up plugin B\n        MockClassLoader mockClassLoaderB = new MockClassLoader();\n        mockClassLoaderB.register(\"com.acme.Bat\", String.class);\n        mockClassLoaderB.register(\"com.acme.Clash\", String.class);\n        MockPlugin pluginB = new MockPlugin(\"B\", mockClassLoaderB);\n        mockPluginAccessor.addPlugin(pluginB);\n\n        // With both plugins disabled, we should get Clash from no-one\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"com.acme.Ant\"));\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"com.acme.Bat\"));\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"com.acme.Clash\"));\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"java.lang.String\"));\n\n        // Enable PluginB and it should give us Bat and Clash from pluginB\n        pluginB.enable();\n        pluginsClassLoader.notifyPluginOrModuleEnabled();\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"com.acme.Ant\"));\n        assertEquals(pluginB, pluginsClassLoader.getPluginForClass(\"com.acme.Bat\"));\n        assertEquals(pluginB, pluginsClassLoader.getPluginForClass(\"com.acme.Clash\"));\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"java.lang.String\"));\n\n        // Enable PluginA and it should give us Clash from pluginB (because it is cached).\n        pluginA.enable();\n        pluginsClassLoader.notifyPluginOrModuleEnabled();\n        assertEquals(pluginA, pluginsClassLoader.getPluginForClass(\"com.acme.Ant\"));\n        assertEquals(pluginB, pluginsClassLoader.getPluginForClass(\"com.acme.Bat\"));\n        assertEquals(pluginB, pluginsClassLoader.getPluginForClass(\"com.acme.Clash\"));\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"java.lang.String\"));\n\n        // flush the cache and we get Clash from plugin A instead (because it is earlier in the list).\n        pluginsClassLoader.notifyUninstallPlugin(pluginB);\n        assertEquals(pluginA, pluginsClassLoader.getPluginForClass(\"com.acme.Ant\"));\n        assertEquals(pluginB, pluginsClassLoader.getPluginForClass(\"com.acme.Bat\"));\n        assertEquals(pluginA, pluginsClassLoader.getPluginForClass(\"com.acme.Clash\"));\n        assertEquals(null, pluginsClassLoader.getPluginForClass(\"java.lang.String\"));\n    }", "signature": "void testGetPluginForClass()", "full_signature": "@Test public void testGetPluginForClass()", "class_method_signature": "PluginsClassLoaderTest.testGetPluginForClass()", "testcase": true, "constructor": false, "invocations": ["register", "register", "addPlugin", "register", "register", "addPlugin", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "enable", "notifyPluginOrModuleEnabled", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "enable", "notifyPluginOrModuleEnabled", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "notifyUninstallPlugin", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass", "assertEquals", "getPluginForClass"]}, "focal_class": {"identifier": "PluginsClassLoader", "superclass": "extends AbstractClassLoader", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PluginsClassLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PluginsClassLoader.class)", "var_name": "log"}, {"original_string": "private final PluginAccessor pluginAccessor;", "modifier": "private final", "type": "PluginAccessor", "declarator": "pluginAccessor", "var_name": "pluginAccessor"}, {"original_string": "private final Map<String, Plugin> pluginResourceIndex = new HashMap<String, Plugin>();", "modifier": "private final", "type": "Map<String, Plugin>", "declarator": "pluginResourceIndex = new HashMap<String, Plugin>()", "var_name": "pluginResourceIndex"}, {"original_string": "private final Map<String, Plugin> pluginClassIndex = new HashMap<String, Plugin>();", "modifier": "private final", "type": "Map<String, Plugin>", "declarator": "pluginClassIndex = new HashMap<String, Plugin>()", "var_name": "pluginClassIndex"}, {"original_string": "private final Set<String> missedPluginResource = new HashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "missedPluginResource = new HashSet<String>()", "var_name": "missedPluginResource"}, {"original_string": "private final Set<String> missedPluginClass = new HashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "missedPluginClass = new HashSet<String>()", "var_name": "missedPluginClass"}, {"original_string": "private ClassLoader parentClassLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "parentClassLoader", "var_name": "parentClassLoader"}], "methods": [{"identifier": "PluginsClassLoader", "parameters": "(final PluginAccessor pluginAccessor)", "modifiers": "public", "return": "", "signature": " PluginsClassLoader(final PluginAccessor pluginAccessor)", "full_signature": "public  PluginsClassLoader(final PluginAccessor pluginAccessor)", "class_method_signature": "PluginsClassLoader.PluginsClassLoader(final PluginAccessor pluginAccessor)", "testcase": false, "constructor": true}, {"identifier": "PluginsClassLoader", "parameters": "(final ClassLoader parent, final PluginAccessor pluginAccessor)", "modifiers": "public", "return": "", "signature": " PluginsClassLoader(final ClassLoader parent, final PluginAccessor pluginAccessor)", "full_signature": "public  PluginsClassLoader(final ClassLoader parent, final PluginAccessor pluginAccessor)", "class_method_signature": "PluginsClassLoader.PluginsClassLoader(final ClassLoader parent, final PluginAccessor pluginAccessor)", "testcase": false, "constructor": true}, {"identifier": "PluginsClassLoader", "parameters": "(final ClassLoader parent, final PluginAccessor pluginAccessor, PluginEventManager pluginEventManager)", "modifiers": "public", "return": "", "signature": " PluginsClassLoader(final ClassLoader parent, final PluginAccessor pluginAccessor, PluginEventManager pluginEventManager)", "full_signature": "public  PluginsClassLoader(final ClassLoader parent, final PluginAccessor pluginAccessor, PluginEventManager pluginEventManager)", "class_method_signature": "PluginsClassLoader.PluginsClassLoader(final ClassLoader parent, final PluginAccessor pluginAccessor, PluginEventManager pluginEventManager)", "testcase": false, "constructor": true}, {"identifier": "findResource", "parameters": "(final String name)", "modifiers": "@Override protected", "return": "URL", "signature": "URL findResource(final String name)", "full_signature": "@Override protected URL findResource(final String name)", "class_method_signature": "PluginsClassLoader.findResource(final String name)", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(final String className)", "modifiers": "@Override protected", "return": "Class<?>", "signature": "Class<?> findClass(final String className)", "full_signature": "@Override protected Class<?> findClass(final String className)", "class_method_signature": "PluginsClassLoader.findClass(final String className)", "testcase": false, "constructor": false}, {"identifier": "loadClassFromPlugins", "parameters": "(final String className)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> loadClassFromPlugins(final String className)", "full_signature": "private Class<?> loadClassFromPlugins(final String className)", "class_method_signature": "PluginsClassLoader.loadClassFromPlugins(final String className)", "testcase": false, "constructor": false}, {"identifier": "getResourceFromPlugins", "parameters": "(final String name)", "modifiers": "private", "return": "URL", "signature": "URL getResourceFromPlugins(final String name)", "full_signature": "private URL getResourceFromPlugins(final String name)", "class_method_signature": "PluginsClassLoader.getResourceFromPlugins(final String name)", "testcase": false, "constructor": false}, {"identifier": "isPluginEnabled", "parameters": "(final Plugin plugin)", "modifiers": "private", "return": "boolean", "signature": "boolean isPluginEnabled(final Plugin plugin)", "full_signature": "private boolean isPluginEnabled(final Plugin plugin)", "class_method_signature": "PluginsClassLoader.isPluginEnabled(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "notifyUninstallPlugin", "parameters": "(final Plugin plugin)", "modifiers": "public synchronized", "return": "void", "signature": "void notifyUninstallPlugin(final Plugin plugin)", "full_signature": "public synchronized void notifyUninstallPlugin(final Plugin plugin)", "class_method_signature": "PluginsClassLoader.notifyUninstallPlugin(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "getPluginForClass", "parameters": "(String className)", "modifiers": "public", "return": "Plugin", "signature": "Plugin getPluginForClass(String className)", "full_signature": "public Plugin getPluginForClass(String className)", "class_method_signature": "PluginsClassLoader.getPluginForClass(String className)", "testcase": false, "constructor": false}, {"identifier": "isSystemClass", "parameters": "(final String className)", "modifiers": "private", "return": "boolean", "signature": "boolean isSystemClass(final String className)", "full_signature": "private boolean isSystemClass(final String className)", "class_method_signature": "PluginsClassLoader.isSystemClass(final String className)", "testcase": false, "constructor": false}, {"identifier": "onPluginEnabled", "parameters": "(PluginEnabledEvent event)", "modifiers": "@PluginEventListener public", "return": "void", "signature": "void onPluginEnabled(PluginEnabledEvent event)", "full_signature": "@PluginEventListener public void onPluginEnabled(PluginEnabledEvent event)", "class_method_signature": "PluginsClassLoader.onPluginEnabled(PluginEnabledEvent event)", "testcase": false, "constructor": false}, {"identifier": "onPluginModuleEnabled", "parameters": "(PluginModuleEnabledEvent event)", "modifiers": "@PluginEventListener public", "return": "void", "signature": "void onPluginModuleEnabled(PluginModuleEnabledEvent event)", "full_signature": "@PluginEventListener public void onPluginModuleEnabled(PluginModuleEnabledEvent event)", "class_method_signature": "PluginsClassLoader.onPluginModuleEnabled(PluginModuleEnabledEvent event)", "testcase": false, "constructor": false}, {"identifier": "notifyPluginOrModuleEnabled", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void notifyPluginOrModuleEnabled()", "full_signature": "public synchronized void notifyPluginOrModuleEnabled()", "class_method_signature": "PluginsClassLoader.notifyPluginOrModuleEnabled()", "testcase": false, "constructor": false}, {"identifier": "flushMissesCaches", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void flushMissesCaches()", "full_signature": "private void flushMissesCaches()", "class_method_signature": "PluginsClassLoader.flushMissesCaches()", "testcase": false, "constructor": false}], "file": "core-old/src/main/java/org/maera/plugin/classloader/PluginsClassLoader.java"}, "focal_method": {"identifier": "getPluginForClass", "parameters": "(String className)", "modifiers": "public", "return": "Plugin", "body": "public Plugin getPluginForClass(String className) {\n        Plugin indexedPlugin;\n        synchronized (this) {\n            indexedPlugin = pluginClassIndex.get(className);\n        }\n\n        if (isPluginEnabled(indexedPlugin)) {\n            return indexedPlugin;\n        }\n        // Don't let a plugin claim a class that is a system class.\n        if (isSystemClass(className)) {\n            return null;\n        }\n        // Plugin not indexed, or disabled\n        // Try to load the class - this will cache the plugin it came from.\n        Class clazz = loadClassFromPlugins(className);\n        if (clazz == null) {\n            // Class could not be loaded - so return null.\n            return null;\n        }\n        synchronized (this) {\n            // if we get here, then loadClassFromPlugins() has returned a non-null class, and the side effect is that\n            // the plugin for the class name is cached in pluginClassIndex.\n            indexedPlugin = pluginClassIndex.get(className);\n        }\n        return indexedPlugin;\n    }", "signature": "Plugin getPluginForClass(String className)", "full_signature": "public Plugin getPluginForClass(String className)", "class_method_signature": "PluginsClassLoader.getPluginForClass(String className)", "testcase": false, "constructor": false, "invocations": ["get", "isPluginEnabled", "isSystemClass", "loadClassFromPlugins", "get"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}