{"test_class": {"identifier": "ModuleDescriptorOfClassPredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ModuleDescriptorPredicate<Object> moduleDescriptorPredicate;", "modifier": "private", "type": "ModuleDescriptorPredicate<Object>", "declarator": "moduleDescriptorPredicate", "var_name": "moduleDescriptorPredicate"}], "file": "core-old/src/test/java/org/maera/plugin/predicate/ModuleDescriptorOfClassPredicateTest.java"}, "test_case": {"identifier": "testDoesNotMatchModuleWithModuleDescriptorClassNotMatchingClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoesNotMatchModuleWithModuleDescriptorClassNotMatchingClass() {\n        assertFalse(moduleDescriptorPredicate.matches(new MockUnusedModuleDescriptor()));\n    }", "signature": "void testDoesNotMatchModuleWithModuleDescriptorClassNotMatchingClass()", "full_signature": "@Test public void testDoesNotMatchModuleWithModuleDescriptorClassNotMatchingClass()", "class_method_signature": "ModuleDescriptorOfClassPredicateTest.testDoesNotMatchModuleWithModuleDescriptorClassNotMatchingClass()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "matches"]}, "focal_class": {"identifier": "ModuleDescriptorOfClassPredicate", "superclass": "", "interfaces": "implements ModuleDescriptorPredicate<T>", "fields": [{"original_string": "private final Collection<Class<? extends ModuleDescriptor<? extends T>>> moduleDescriptorClasses;", "modifier": "private final", "type": "Collection<Class<? extends ModuleDescriptor<? extends T>>>", "declarator": "moduleDescriptorClasses", "var_name": "moduleDescriptorClasses"}], "methods": [{"identifier": "ModuleDescriptorOfClassPredicate", "parameters": "(final Class<? extends ModuleDescriptor<? extends T>> moduleDescriptorClass)", "modifiers": "public", "return": "", "signature": " ModuleDescriptorOfClassPredicate(final Class<? extends ModuleDescriptor<? extends T>> moduleDescriptorClass)", "full_signature": "public  ModuleDescriptorOfClassPredicate(final Class<? extends ModuleDescriptor<? extends T>> moduleDescriptorClass)", "class_method_signature": "ModuleDescriptorOfClassPredicate.ModuleDescriptorOfClassPredicate(final Class<? extends ModuleDescriptor<? extends T>> moduleDescriptorClass)", "testcase": false, "constructor": true}, {"identifier": "ModuleDescriptorOfClassPredicate", "parameters": "(final Class<? extends ModuleDescriptor<? extends T>>[] moduleDescriptorClasses)", "modifiers": "public", "return": "", "signature": " ModuleDescriptorOfClassPredicate(final Class<? extends ModuleDescriptor<? extends T>>[] moduleDescriptorClasses)", "full_signature": "public  ModuleDescriptorOfClassPredicate(final Class<? extends ModuleDescriptor<? extends T>>[] moduleDescriptorClasses)", "class_method_signature": "ModuleDescriptorOfClassPredicate.ModuleDescriptorOfClassPredicate(final Class<? extends ModuleDescriptor<? extends T>>[] moduleDescriptorClasses)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final ModuleDescriptor<? extends T> moduleDescriptor)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final ModuleDescriptor<? extends T> moduleDescriptor)", "full_signature": "public boolean matches(final ModuleDescriptor<? extends T> moduleDescriptor)", "class_method_signature": "ModuleDescriptorOfClassPredicate.matches(final ModuleDescriptor<? extends T> moduleDescriptor)", "testcase": false, "constructor": false}], "file": "core-old/src/main/java/org/maera/plugin/predicate/ModuleDescriptorOfClassPredicate.java"}, "focal_method": {"identifier": "matches", "parameters": "(final ModuleDescriptor<? extends T> moduleDescriptor)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(final ModuleDescriptor<? extends T> moduleDescriptor) {\n        return (moduleDescriptor != null) && CollectionUtils.exists(moduleDescriptorClasses, new Predicate() {\n            public boolean evaluate(final Object object) {\n                return (object != null) && ((Class<?>) object).isInstance(moduleDescriptor);\n            }\n        });\n    }", "signature": "boolean matches(final ModuleDescriptor<? extends T> moduleDescriptor)", "full_signature": "public boolean matches(final ModuleDescriptor<? extends T> moduleDescriptor)", "class_method_signature": "ModuleDescriptorOfClassPredicate.matches(final ModuleDescriptor<? extends T> moduleDescriptor)", "testcase": false, "constructor": false, "invocations": ["exists", "isInstance"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}