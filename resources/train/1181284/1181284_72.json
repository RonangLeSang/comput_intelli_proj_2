{"test_class": {"identifier": "PluginResourceDownloadTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BATCH_RESOURCE = \"/download/batch/js/org.maera.plugin:bar-resources.js\";", "modifier": "private static final", "type": "String", "declarator": "BATCH_RESOURCE = \"/download/batch/js/org.maera.plugin:bar-resources.js\"", "var_name": "BATCH_RESOURCE"}, {"original_string": "private static final String JS_CONTENT_TYPE = \"text/javascript\";", "modifier": "private static final", "type": "String", "declarator": "JS_CONTENT_TYPE = \"text/javascript\"", "var_name": "JS_CONTENT_TYPE"}, {"original_string": "private static final String SINGLE_RESOURCE = \"/download/resources/org.maera.plugin:foo-resources/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "SINGLE_RESOURCE = \"/download/resources/org.maera.plugin:foo-resources/foo.js\"", "var_name": "SINGLE_RESOURCE"}, {"original_string": "private Mock mockContentTypeResolver;", "modifier": "private", "type": "Mock", "declarator": "mockContentTypeResolver", "var_name": "mockContentTypeResolver"}, {"original_string": "private Mock mockPluginResourceLocator;", "modifier": "private", "type": "Mock", "declarator": "mockPluginResourceLocator", "var_name": "mockPluginResourceLocator"}, {"original_string": "private PluginResourceDownload pluginResourceDownload;", "modifier": "private", "type": "PluginResourceDownload", "declarator": "pluginResourceDownload", "var_name": "pluginResourceDownload"}], "file": "webresource/src/test/java/org/maera/plugin/servlet/PluginResourceDownloadTest.java"}, "test_case": {"identifier": "testServeFileContentTypeUsesContentTypeResolverWhenResourceContentTypeIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServeFileContentTypeUsesContentTypeResolverWhenResourceContentTypeIsNull() throws DownloadException {\n        Mock mockRequest = new Mock(HttpServletRequest.class);\n        mockRequest.matchAndReturn(\"getRequestURI\", SINGLE_RESOURCE);\n        mockRequest.expectAndReturn(\"getParameterMap\", Collections.EMPTY_MAP);\n\n        Mock mockResponse = new Mock(HttpServletResponse.class);\n        mockResponse.expect(\"setContentType\", C.args(C.eq(JS_CONTENT_TYPE)));\n\n        Mock mockDownloadableResource = new Mock(DownloadableResource.class);\n        mockDownloadableResource.expectAndReturn(\"isResourceModified\",\n                C.args(C.eq(mockRequest.proxy()), C.eq(mockResponse.proxy())),\n                false);\n        mockDownloadableResource.expectAndReturn(\"getContentType\", null);\n        mockDownloadableResource.expect(\"serveResource\", C.args(C.eq(mockRequest.proxy()), C.eq(mockResponse.proxy())));\n        mockPluginResourceLocator.expectAndReturn(\"getDownloadableResource\",\n                C.ANY_ARGS,\n                mockDownloadableResource.proxy());\n\n        mockContentTypeResolver.expectAndReturn(\"getContentType\", C.args(C.eq(SINGLE_RESOURCE)), JS_CONTENT_TYPE);\n\n        pluginResourceDownload.serveFile((HttpServletRequest) mockRequest.proxy(),\n                (HttpServletResponse) mockResponse.proxy());\n\n        mockResponse.verify();\n    }", "signature": "void testServeFileContentTypeUsesContentTypeResolverWhenResourceContentTypeIsNull()", "full_signature": "@Test public void testServeFileContentTypeUsesContentTypeResolverWhenResourceContentTypeIsNull()", "class_method_signature": "PluginResourceDownloadTest.testServeFileContentTypeUsesContentTypeResolverWhenResourceContentTypeIsNull()", "testcase": true, "constructor": false, "invocations": ["matchAndReturn", "expectAndReturn", "expect", "args", "eq", "expectAndReturn", "args", "eq", "proxy", "eq", "proxy", "expectAndReturn", "expect", "args", "eq", "proxy", "eq", "proxy", "expectAndReturn", "proxy", "expectAndReturn", "args", "eq", "serveFile", "proxy", "proxy", "verify"]}, "focal_class": {"identifier": "PluginResourceDownload", "superclass": "", "interfaces": "implements DownloadStrategy", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PluginResourceDownload.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PluginResourceDownload.class)", "var_name": "log"}, {"original_string": "private String characterEncoding = \"UTF-8\";", "modifier": "private", "type": "String", "declarator": "characterEncoding = \"UTF-8\"", "var_name": "characterEncoding"}, {"original_string": "private PluginResourceLocator pluginResourceLocator;", "modifier": "private", "type": "PluginResourceLocator", "declarator": "pluginResourceLocator", "var_name": "pluginResourceLocator"}, {"original_string": "private ContentTypeResolver contentTypeResolver;", "modifier": "private", "type": "ContentTypeResolver", "declarator": "contentTypeResolver", "var_name": "contentTypeResolver"}], "methods": [{"identifier": "PluginResourceDownload", "parameters": "()", "modifiers": "public", "return": "", "signature": " PluginResourceDownload()", "full_signature": "public  PluginResourceDownload()", "class_method_signature": "PluginResourceDownload.PluginResourceDownload()", "testcase": false, "constructor": true}, {"identifier": "PluginResourceDownload", "parameters": "(PluginResourceLocator pluginResourceLocator, ContentTypeResolver contentTypeResolver, String characterEncoding)", "modifiers": "public", "return": "", "signature": " PluginResourceDownload(PluginResourceLocator pluginResourceLocator, ContentTypeResolver contentTypeResolver, String characterEncoding)", "full_signature": "public  PluginResourceDownload(PluginResourceLocator pluginResourceLocator, ContentTypeResolver contentTypeResolver, String characterEncoding)", "class_method_signature": "PluginResourceDownload.PluginResourceDownload(PluginResourceLocator pluginResourceLocator, ContentTypeResolver contentTypeResolver, String characterEncoding)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(String urlPath)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String urlPath)", "full_signature": "public boolean matches(String urlPath)", "class_method_signature": "PluginResourceDownload.matches(String urlPath)", "testcase": false, "constructor": false}, {"identifier": "serveFile", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "void", "signature": "void serveFile(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public void serveFile(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "PluginResourceDownload.serveFile(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "setCharacterEncoding", "parameters": "(String characterEncoding)", "modifiers": "public", "return": "void", "signature": "void setCharacterEncoding(String characterEncoding)", "full_signature": "public void setCharacterEncoding(String characterEncoding)", "class_method_signature": "PluginResourceDownload.setCharacterEncoding(String characterEncoding)", "testcase": false, "constructor": false}, {"identifier": "setContentTypeResolver", "parameters": "(ContentTypeResolver contentTypeResolver)", "modifiers": "public", "return": "void", "signature": "void setContentTypeResolver(ContentTypeResolver contentTypeResolver)", "full_signature": "public void setContentTypeResolver(ContentTypeResolver contentTypeResolver)", "class_method_signature": "PluginResourceDownload.setContentTypeResolver(ContentTypeResolver contentTypeResolver)", "testcase": false, "constructor": false}, {"identifier": "setPluginResourceLocator", "parameters": "(PluginResourceLocator pluginResourceLocator)", "modifiers": "public", "return": "void", "signature": "void setPluginResourceLocator(PluginResourceLocator pluginResourceLocator)", "full_signature": "public void setPluginResourceLocator(PluginResourceLocator pluginResourceLocator)", "class_method_signature": "PluginResourceDownload.setPluginResourceLocator(PluginResourceLocator pluginResourceLocator)", "testcase": false, "constructor": false}, {"identifier": "getContentType", "parameters": "(String requestUri, DownloadableResource downloadableResource)", "modifiers": "private", "return": "String", "signature": "String getContentType(String requestUri, DownloadableResource downloadableResource)", "full_signature": "private String getContentType(String requestUri, DownloadableResource downloadableResource)", "class_method_signature": "PluginResourceDownload.getContentType(String requestUri, DownloadableResource downloadableResource)", "testcase": false, "constructor": false}, {"identifier": "getQueryParameters", "parameters": "(HttpServletRequest request)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getQueryParameters(HttpServletRequest request)", "full_signature": "private Map<String, String> getQueryParameters(HttpServletRequest request)", "class_method_signature": "PluginResourceDownload.getQueryParameters(HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "webresource/src/main/java/org/maera/plugin/servlet/PluginResourceDownload.java"}, "focal_method": {"identifier": "serveFile", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "void", "body": "public void serveFile(HttpServletRequest request, HttpServletResponse response) throws DownloadException {\n        try {\n            String requestUri = URLDecoder.decode(request.getRequestURI(), characterEncoding);\n            DownloadableResource downloadableResource = pluginResourceLocator.getDownloadableResource(requestUri, getQueryParameters(request));\n\n            if (downloadableResource == null) {\n                log.info(\"Could not locate resource: \" + request.getRequestURI());\n                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n                return;\n            }\n\n            if (downloadableResource.isResourceModified(request, response)) {\n                log.info(\"Plugin Resource has been modified since plugin was loaded. Skipping: \" + requestUri);\n                return;\n            }\n\n            String contentType = getContentType(requestUri, downloadableResource);\n            if (contentType != null) {\n                response.setContentType(contentType);\n            }\n            downloadableResource.serveResource(request, response);\n        }\n        catch (IOException e) {\n            throw new DownloadException(e);\n        }\n    }", "signature": "void serveFile(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public void serveFile(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "PluginResourceDownload.serveFile(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["decode", "getRequestURI", "getDownloadableResource", "getQueryParameters", "info", "getRequestURI", "sendError", "isResourceModified", "info", "getContentType", "setContentType", "serveResource"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}