{"test_class": {"identifier": "ExportsBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExportsBuilder builder;", "modifier": "private", "type": "ExportsBuilder", "declarator": "builder", "var_name": "builder"}], "file": "osgi/loader/src/test/java/org/maera/plugin/osgi/container/felix/ExportsBuilderTest.java"}, "test_case": {"identifier": "testGenerateExports", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateExports() throws MalformedURLException {\n        ServletContext ctx = mock(ServletContext.class);\n        when(ctx.getMajorVersion()).thenReturn(5);\n        when(ctx.getMinorVersion()).thenReturn(3);\n        when(ctx.getResource(\"/WEB-INF/lib\")).thenReturn(getClass().getClassLoader().getResource(\"scanbase/WEB-INF/lib\"));\n        when(ctx.getResource(\"/WEB-INF/classes\")).thenReturn(getClass().getClassLoader().getResource(\"scanbase/WEB-INF/classes\"));\n        DefaultPackageScannerConfiguration config = new DefaultPackageScannerConfiguration(\"1.0\");\n        config.setServletContext(ctx);\n        config.setPackageIncludes(Arrays.asList(\"javax.*\", \"org.*\"));\n\n        Collection<ExportPackage> exports = builder.generateExports(config);\n        assertNotNull(exports);\n        assertTrue(exports.contains(new ExportPackage(\"org.apache.log4j\", \"1.2.15\", new File(\"/whatever/log4j-1.2.15.jar\"))));\n\n        // Test falling through to servlet context scanning\n        config.setJarIncludes(Arrays.asList(\"testlog*\", \"mock*\"));\n        config.setJarExcludes(Arrays.asList(\"log4j*\"));\n        exports = builder.generateExports(config);\n        assertNotNull(exports);\n        assertTrue(exports.contains(new ExportPackage(\"org.apache.log4j\", \"1.2.15\", new File(\"/whatever/log4j-1.2.15.jar\"))));\n\n        // Test failure when even servlet context scanning fails\n        config.setJarIncludes(Arrays.asList(\"testlog4j23*\"));\n        config.setJarExcludes(Collections.<String>emptyList());\n        try {\n            builder.generateExports(config);\n            fail(\"Should have thrown an exception\");\n        }\n        catch (IllegalStateException ignored) {\n\n        }\n\n        // Test failure when no servlet context\n        config.setJarIncludes(Arrays.asList(\"testlog4j23*\"));\n        config.setJarExcludes(Collections.<String>emptyList());\n        config.setServletContext(null);\n        try {\n            builder.generateExports(config);\n            fail(\"Should have thrown an exception\");\n        }\n        catch (IllegalStateException ignored) {\n\n        }\n    }", "signature": "void testGenerateExports()", "full_signature": "@Test public void testGenerateExports()", "class_method_signature": "ExportsBuilderTest.testGenerateExports()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getMajorVersion", "thenReturn", "when", "getMinorVersion", "thenReturn", "when", "getResource", "getResource", "getClassLoader", "getClass", "thenReturn", "when", "getResource", "getResource", "getClassLoader", "getClass", "setServletContext", "setPackageIncludes", "asList", "generateExports", "assertNotNull", "assertTrue", "contains", "setJarIncludes", "asList", "setJarExcludes", "asList", "generateExports", "assertNotNull", "assertTrue", "contains", "setJarIncludes", "asList", "setJarExcludes", "emptyList", "generateExports", "fail", "setJarIncludes", "asList", "setJarExcludes", "emptyList", "setServletContext", "generateExports", "fail"]}, "focal_class": {"identifier": "ExportsBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String JDK_PACKAGES_PATH = \"jdk-packages.txt\";", "modifier": "static final", "type": "String", "declarator": "JDK_PACKAGES_PATH = \"jdk-packages.txt\"", "var_name": "JDK_PACKAGES_PATH"}, {"original_string": "static final String JDK6_PACKAGES_PATH = \"jdk6-packages.txt\";", "modifier": "static final", "type": "String", "declarator": "JDK6_PACKAGES_PATH = \"jdk6-packages.txt\"", "var_name": "JDK6_PACKAGES_PATH"}, {"original_string": "private static Logger log = LoggerFactory.getLogger(ExportsBuilder.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExportsBuilder.class)", "var_name": "log"}, {"original_string": "private static String exportStringCache;", "modifier": "private static", "type": "String", "declarator": "exportStringCache", "var_name": "exportStringCache"}], "methods": [{"identifier": "getExports", "parameters": "(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "modifiers": "public", "return": "String", "signature": "String getExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "full_signature": "public String getExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "class_method_signature": "ExportsBuilder.getExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "testcase": false, "constructor": false}, {"identifier": "determineExports", "parameters": "(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig, File cacheDir)", "modifiers": "@SuppressWarnings({\"UnusedDeclaration\"}) public", "return": "String", "signature": "String determineExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig, File cacheDir)", "full_signature": "@SuppressWarnings({\"UnusedDeclaration\"}) public String determineExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig, File cacheDir)", "class_method_signature": "ExportsBuilder.determineExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig, File cacheDir)", "testcase": false, "constructor": false}, {"identifier": "determineExports", "parameters": "(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "modifiers": "", "return": "String", "signature": "String determineExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "full_signature": " String determineExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "class_method_signature": "ExportsBuilder.determineExports(List<HostComponentRegistration> regs, PackageScannerConfiguration packageScannerConfig)", "testcase": false, "constructor": false}, {"identifier": "constructAutoExports", "parameters": "(StringBuilder sb, Collection<ExportPackage> packageExports)", "modifiers": "", "return": "void", "signature": "void constructAutoExports(StringBuilder sb, Collection<ExportPackage> packageExports)", "full_signature": " void constructAutoExports(StringBuilder sb, Collection<ExportPackage> packageExports)", "class_method_signature": "ExportsBuilder.constructAutoExports(StringBuilder sb, Collection<ExportPackage> packageExports)", "testcase": false, "constructor": false}, {"identifier": "generateExports", "parameters": "(PackageScannerConfiguration packageScannerConfig)", "modifiers": "", "return": "Collection<ExportPackage>", "signature": "Collection<ExportPackage> generateExports(PackageScannerConfiguration packageScannerConfig)", "full_signature": " Collection<ExportPackage> generateExports(PackageScannerConfiguration packageScannerConfig)", "class_method_signature": "ExportsBuilder.generateExports(PackageScannerConfiguration packageScannerConfig)", "testcase": false, "constructor": false}, {"identifier": "isPackageScanSuccessful", "parameters": "(Collection<ExportPackage> exports)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPackageScanSuccessful(Collection<ExportPackage> exports)", "full_signature": "private static boolean isPackageScanSuccessful(Collection<ExportPackage> exports)", "class_method_signature": "ExportsBuilder.isPackageScanSuccessful(Collection<ExportPackage> exports)", "testcase": false, "constructor": false}, {"identifier": "constructJdkExports", "parameters": "(StringBuilder sb, String packageListPath)", "modifiers": "", "return": "void", "signature": "void constructJdkExports(StringBuilder sb, String packageListPath)", "full_signature": " void constructJdkExports(StringBuilder sb, String packageListPath)", "class_method_signature": "ExportsBuilder.constructJdkExports(StringBuilder sb, String packageListPath)", "testcase": false, "constructor": false}], "file": "osgi/loader/src/main/java/org/maera/plugin/osgi/container/felix/ExportsBuilder.java"}, "focal_method": {"identifier": "generateExports", "parameters": "(PackageScannerConfiguration packageScannerConfig)", "modifiers": "", "return": "Collection<ExportPackage>", "body": "Collection<ExportPackage> generateExports(PackageScannerConfiguration packageScannerConfig) {\n        String[] arrType = new String[0];\n\n        Map<String, String> pkgVersions = new HashMap<String, String>(packageScannerConfig.getPackageVersions());\n        if (packageScannerConfig.getServletContext() != null) {\n            String ver = packageScannerConfig.getServletContext().getMajorVersion() + \".\" + packageScannerConfig.getServletContext().getMinorVersion();\n            pkgVersions.put(\"javax.servlet*\", ver);\n        }\n\n        PackageScanner scanner = new PackageScanner()\n                .select(\n                        jars(\n                                include(packageScannerConfig.getJarIncludes().toArray(arrType)),\n                                exclude(packageScannerConfig.getJarExcludes().toArray(arrType))),\n                        packages(\n                                include(packageScannerConfig.getPackageIncludes().toArray(arrType)),\n                                exclude(packageScannerConfig.getPackageExcludes().toArray(arrType)))\n                )\n                .withMappings(pkgVersions);\n\n        if (log.isDebugEnabled()) {\n            scanner.enableDebug();\n        }\n\n        Collection<ExportPackage> exports = scanner.scan();\n        log.info(\"Package scan completed. Found \" + exports.size() + \" packages to export.\");\n\n        if (!isPackageScanSuccessful(exports) && packageScannerConfig.getServletContext() != null) {\n            log.warn(\"Unable to find expected packages via classloader scanning.  Trying ServletContext scanning...\");\n            ServletContext ctx = packageScannerConfig.getServletContext();\n            try {\n                exports = scanner.scan(ctx.getResource(\"/WEB-INF/lib\"), ctx.getResource(\"/WEB-INF/classes\"));\n            }\n            catch (MalformedURLException e) {\n                log.warn(\"Unable to scan webapp for packages\", e);\n            }\n        }\n\n        if (!isPackageScanSuccessful(exports)) {\n            throw new IllegalStateException(\"Unable to find required packages via classloader or servlet context\"\n                    + \" scanning, most likely due to an application server bug.\");\n        }\n        return exports;\n    }", "signature": "Collection<ExportPackage> generateExports(PackageScannerConfiguration packageScannerConfig)", "full_signature": " Collection<ExportPackage> generateExports(PackageScannerConfiguration packageScannerConfig)", "class_method_signature": "ExportsBuilder.generateExports(PackageScannerConfiguration packageScannerConfig)", "testcase": false, "constructor": false, "invocations": ["getPackageVersions", "getServletContext", "getMajorVersion", "getServletContext", "getMinorVersion", "getServletContext", "put", "withMappings", "select", "jars", "include", "toArray", "getJarIncludes", "exclude", "toArray", "getJarExcludes", "packages", "include", "toArray", "getPackageIncludes", "exclude", "toArray", "getPackageExcludes", "isDebugEnabled", "enableDebug", "scan", "info", "size", "isPackageScanSuccessful", "getServletContext", "warn", "getServletContext", "scan", "getResource", "getResource", "warn", "isPackageScanSuccessful"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}