{"test_class": {"identifier": "XmlDescriptorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DUMMY_PLUGIN_FILE = \"pooh-test-plugin.jar\";", "modifier": "private static final", "type": "String", "declarator": "DUMMY_PLUGIN_FILE = \"pooh-test-plugin.jar\"", "var_name": "DUMMY_PLUGIN_FILE"}, {"original_string": "private static final String MISSING_INFO_TEST_FILE = \"test-missing-plugin-info.xml\";", "modifier": "private static final", "type": "String", "declarator": "MISSING_INFO_TEST_FILE = \"test-missing-plugin-info.xml\"", "var_name": "MISSING_INFO_TEST_FILE"}], "file": "core-old/src/test/java/org/maera/plugin/parsers/XmlDescriptorParserTest.java"}, "test_case": {"identifier": "testPluginsResourcesAvailableToModuleDescriptors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPluginsResourcesAvailableToModuleDescriptors() {\n        XmlDescriptorParser parser = parse(null,\n                \"<maera-plugin key='foo'>\",\n                \"  <resource type='velocity' name='edit'>Show an input box here.</resource>\",\n                \"  <animal key='bear' />\",\n                \"</maera-plugin>\");\n        // mock up some supporting objects\n        PluginClassLoader classLoader = new PluginClassLoader(new File(getTestFile(\"ap-plugins\") + \"/\" + DUMMY_PLUGIN_FILE));\n        Mock mockFactory = new Mock(ModuleDescriptorFactory.class);\n        MockAnimalModuleDescriptor descriptor = new MockAnimalModuleDescriptor(\"velocity\", \"edit\");\n        mockFactory.expectAndReturn(\"getModuleDescriptor\", C.args(C.eq(\"animal\")), descriptor);\n\n        // create a Plugin for testing\n        Plugin testPlugin = new DefaultDynamicPlugin((PluginArtifact) new Mock(PluginArtifact.class).proxy(), classLoader);\n        parser.configurePlugin((ModuleDescriptorFactory) mockFactory.proxy(), testPlugin);\n        assertNotNull(testPlugin.getModuleDescriptor(\"bear\"));\n\n        mockFactory.verify();\n    }", "signature": "void testPluginsResourcesAvailableToModuleDescriptors()", "full_signature": "@Test public void testPluginsResourcesAvailableToModuleDescriptors()", "class_method_signature": "XmlDescriptorParserTest.testPluginsResourcesAvailableToModuleDescriptors()", "testcase": true, "constructor": false, "invocations": ["parse", "getTestFile", "expectAndReturn", "args", "eq", "proxy", "configurePlugin", "proxy", "assertNotNull", "getModuleDescriptor", "verify"]}, "focal_class": {"identifier": "XmlDescriptorParser", "superclass": "", "interfaces": "implements DescriptorParser", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(XmlDescriptorParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(XmlDescriptorParser.class)", "var_name": "log"}, {"original_string": "private final Document document;", "modifier": "private final", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "private final Set<String> applicationKeys;", "modifier": "private final", "type": "Set<String>", "declarator": "applicationKeys", "var_name": "applicationKeys"}], "methods": [{"identifier": "XmlDescriptorParser", "parameters": "(final Document source, final String... applicationKeys)", "modifiers": "public", "return": "", "signature": " XmlDescriptorParser(final Document source, final String... applicationKeys)", "full_signature": "public  XmlDescriptorParser(final Document source, final String... applicationKeys)", "class_method_signature": "XmlDescriptorParser.XmlDescriptorParser(final Document source, final String... applicationKeys)", "testcase": false, "constructor": true}, {"identifier": "XmlDescriptorParser", "parameters": "(final InputStream source, final String... applicationKeys)", "modifiers": "public", "return": "", "signature": " XmlDescriptorParser(final InputStream source, final String... applicationKeys)", "full_signature": "public  XmlDescriptorParser(final InputStream source, final String... applicationKeys)", "class_method_signature": "XmlDescriptorParser.XmlDescriptorParser(final InputStream source, final String... applicationKeys)", "testcase": false, "constructor": true}, {"identifier": "createDocument", "parameters": "(final InputStream source)", "modifiers": "protected", "return": "Document", "signature": "Document createDocument(final InputStream source)", "full_signature": "protected Document createDocument(final InputStream source)", "class_method_signature": "XmlDescriptorParser.createDocument(final InputStream source)", "testcase": false, "constructor": false}, {"identifier": "getDocument", "parameters": "()", "modifiers": "protected", "return": "Document", "signature": "Document getDocument()", "full_signature": "protected Document getDocument()", "class_method_signature": "XmlDescriptorParser.getDocument()", "testcase": false, "constructor": false}, {"identifier": "configurePlugin", "parameters": "(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "modifiers": "public", "return": "Plugin", "signature": "Plugin configurePlugin(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "full_signature": "public Plugin configurePlugin(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "class_method_signature": "XmlDescriptorParser.configurePlugin(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "getPluginElement", "parameters": "()", "modifiers": "private", "return": "Element", "signature": "Element getPluginElement()", "full_signature": "private Element getPluginElement()", "class_method_signature": "XmlDescriptorParser.getPluginElement()", "testcase": false, "constructor": false}, {"identifier": "createModuleDescriptor", "parameters": "(final Plugin plugin, final Element element, final ModuleDescriptorFactory moduleDescriptorFactory)", "modifiers": "protected", "return": "ModuleDescriptor<?>", "signature": "ModuleDescriptor<?> createModuleDescriptor(final Plugin plugin, final Element element, final ModuleDescriptorFactory moduleDescriptorFactory)", "full_signature": "protected ModuleDescriptor<?> createModuleDescriptor(final Plugin plugin, final Element element, final ModuleDescriptorFactory moduleDescriptorFactory)", "class_method_signature": "XmlDescriptorParser.createModuleDescriptor(final Plugin plugin, final Element element, final ModuleDescriptorFactory moduleDescriptorFactory)", "testcase": false, "constructor": false}, {"identifier": "createPluginInformation", "parameters": "(final Element element)", "modifiers": "protected", "return": "PluginInformation", "signature": "PluginInformation createPluginInformation(final Element element)", "full_signature": "protected PluginInformation createPluginInformation(final Element element)", "class_method_signature": "XmlDescriptorParser.createPluginInformation(final Element element)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKey()", "full_signature": "public String getKey()", "class_method_signature": "XmlDescriptorParser.getKey()", "testcase": false, "constructor": false}, {"identifier": "getPluginsVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPluginsVersion()", "full_signature": "public int getPluginsVersion()", "class_method_signature": "XmlDescriptorParser.getPluginsVersion()", "testcase": false, "constructor": false}, {"identifier": "getPluginInformation", "parameters": "()", "modifiers": "public", "return": "PluginInformation", "signature": "PluginInformation getPluginInformation()", "full_signature": "public PluginInformation getPluginInformation()", "class_method_signature": "XmlDescriptorParser.getPluginInformation()", "testcase": false, "constructor": false}, {"identifier": "isSystemPlugin", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSystemPlugin()", "full_signature": "public boolean isSystemPlugin()", "class_method_signature": "XmlDescriptorParser.isSystemPlugin()", "testcase": false, "constructor": false}], "file": "core-old/src/main/java/org/maera/plugin/parsers/XmlDescriptorParser.java"}, "focal_method": {"identifier": "configurePlugin", "parameters": "(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "modifiers": "public", "return": "Plugin", "body": "public Plugin configurePlugin(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin) throws PluginParseException {\n        final Element pluginElement = getPluginElement();\n        plugin.setName(pluginElement.attributeValue(\"name\"));\n        plugin.setKey(getKey());\n        plugin.setPluginsVersion(getPluginsVersion());\n        plugin.setSystemPlugin(isSystemPlugin());\n\n        if (pluginElement.attributeValue(\"i18n-name-key\") != null) {\n            plugin.setI18nNameKey(pluginElement.attributeValue(\"i18n-name-key\"));\n        }\n\n        if (plugin.getKey().indexOf(\":\") > 0) {\n            throw new PluginParseException(\"Plugin keys cannot contain ':'. Key is '\" + plugin.getKey() + \"'\");\n        }\n\n        if (\"disabled\".equalsIgnoreCase(pluginElement.attributeValue(\"state\"))) {\n            plugin.setEnabledByDefault(false);\n        }\n\n        plugin.setResources(Resources.fromXml(pluginElement));\n\n        for (final Iterator i = pluginElement.elementIterator(); i.hasNext();) {\n            final Element element = (Element) i.next();\n\n            if (\"plugin-info\".equalsIgnoreCase(element.getName())) {\n                plugin.setPluginInformation(createPluginInformation(element));\n            } else if (!\"resource\".equalsIgnoreCase(element.getName())) {\n                final ModuleDescriptor<?> moduleDescriptor = createModuleDescriptor(plugin, element, moduleDescriptorFactory);\n\n                // If we're not loading the module descriptor, null is returned, so we skip it\n                if (moduleDescriptor == null) {\n                    continue;\n                }\n\n                if (plugin.getModuleDescriptor(moduleDescriptor.getKey()) != null) {\n                    throw new PluginParseException(\"Found duplicate key '\" + moduleDescriptor.getKey() + \"' within plugin '\" + plugin.getKey() + \"'\");\n                }\n\n                plugin.addModuleDescriptor(moduleDescriptor);\n\n                // If we have any unloadable modules, also create an unloadable plugin, which will make it clear that there was a problem\n                if (moduleDescriptor instanceof UnloadableModuleDescriptor) {\n                    log.error(\"There were errors loading the plugin '\" + plugin.getName() + \"'. The plugin has been disabled.\");\n                    return UnloadablePluginFactory.createUnloadablePlugin(plugin);\n                }\n            }\n        }\n\n        return plugin;\n    }", "signature": "Plugin configurePlugin(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "full_signature": "public Plugin configurePlugin(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "class_method_signature": "XmlDescriptorParser.configurePlugin(final ModuleDescriptorFactory moduleDescriptorFactory, final Plugin plugin)", "testcase": false, "constructor": false, "invocations": ["getPluginElement", "setName", "attributeValue", "setKey", "getKey", "setPluginsVersion", "getPluginsVersion", "setSystemPlugin", "isSystemPlugin", "attributeValue", "setI18nNameKey", "attributeValue", "indexOf", "getKey", "getKey", "equalsIgnoreCase", "attributeValue", "setEnabledByDefault", "setResources", "fromXml", "elementIterator", "hasNext", "next", "equalsIgnoreCase", "getName", "setPluginInformation", "createPluginInformation", "equalsIgnoreCase", "getName", "createModuleDescriptor", "getModuleDescriptor", "getKey", "getKey", "getKey", "addModuleDescriptor", "error", "getName", "createUnloadablePlugin"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}