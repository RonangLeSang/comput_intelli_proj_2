{"test_class": {"identifier": "ResourcesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESOURCE_DOC = \"<foo>\" + \"<resource type=\\\"velocity\\\" name=\\\"view\\\">the content</resource>\" + \"<resource type=\\\"velocity\\\" name=\\\"edit\\\" />\"\n            + \"<resource type=\\\"image\\\" name=\\\"view\\\" />\" + \"</foo>\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_DOC = \"<foo>\" + \"<resource type=\\\"velocity\\\" name=\\\"view\\\">the content</resource>\" + \"<resource type=\\\"velocity\\\" name=\\\"edit\\\" />\"\n            + \"<resource type=\\\"image\\\" name=\\\"view\\\" />\" + \"</foo>\"", "var_name": "RESOURCE_DOC"}], "file": "core-old/src/test/java/org/maera/plugin/ResourcesTest.java"}, "test_case": {"identifier": "testGetResourceDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetResourceDescriptor() throws DocumentException, PluginParseException {\n        final Resources resources = makeTestResources();\n\n        assertNull(resources.getResourceLocation(\"image\", \"edit\"));\n        assertNull(resources.getResourceLocation(\"fish\", \"view\"));\n        assertNull(resources.getResourceLocation(null, \"view\"));\n        assertNull(resources.getResourceLocation(\"image\", null));\n\n        assertLocationMatches(resources.getResourceLocation(\"image\", \"view\"), \"image\", \"view\");\n\n    }", "signature": "void testGetResourceDescriptor()", "full_signature": "@Test public void testGetResourceDescriptor()", "class_method_signature": "ResourcesTest.testGetResourceDescriptor()", "testcase": true, "constructor": false, "invocations": ["makeTestResources", "assertNull", "getResourceLocation", "assertNull", "getResourceLocation", "assertNull", "getResourceLocation", "assertNull", "getResourceLocation", "assertLocationMatches", "getResourceLocation"]}, "focal_class": {"identifier": "Resources", "superclass": "", "interfaces": "implements Resourced", "fields": [{"original_string": "public static final Resources EMPTY_RESOURCES = new Resources(Collections.<ResourceDescriptor>emptyList());", "modifier": "public static final", "type": "Resources", "declarator": "EMPTY_RESOURCES = new Resources(Collections.<ResourceDescriptor>emptyList())", "var_name": "EMPTY_RESOURCES"}, {"original_string": "private final List<ResourceDescriptor> resourceDescriptors;", "modifier": "private final", "type": "List<ResourceDescriptor>", "declarator": "resourceDescriptors", "var_name": "resourceDescriptors"}], "methods": [{"identifier": "fromXml", "parameters": "(final Element element)", "modifiers": "public static", "return": "Resources", "signature": "Resources fromXml(final Element element)", "full_signature": "public static Resources fromXml(final Element element)", "class_method_signature": "Resources.fromXml(final Element element)", "testcase": false, "constructor": false}, {"identifier": "Resources", "parameters": "(final Iterable<ResourceDescriptor> resourceDescriptors)", "modifiers": "public", "return": "", "signature": " Resources(final Iterable<ResourceDescriptor> resourceDescriptors)", "full_signature": "public  Resources(final Iterable<ResourceDescriptor> resourceDescriptors)", "class_method_signature": "Resources.Resources(final Iterable<ResourceDescriptor> resourceDescriptors)", "testcase": false, "constructor": true}, {"identifier": "getResourceDescriptors", "parameters": "()", "modifiers": "public", "return": "List<ResourceDescriptor>", "signature": "List<ResourceDescriptor> getResourceDescriptors()", "full_signature": "public List<ResourceDescriptor> getResourceDescriptors()", "class_method_signature": "Resources.getResourceDescriptors()", "testcase": false, "constructor": false}, {"identifier": "getResourceDescriptors", "parameters": "(final String type)", "modifiers": "@Deprecated public", "return": "List<ResourceDescriptor>", "signature": "List<ResourceDescriptor> getResourceDescriptors(final String type)", "full_signature": "@Deprecated public List<ResourceDescriptor> getResourceDescriptors(final String type)", "class_method_signature": "Resources.getResourceDescriptors(final String type)", "testcase": false, "constructor": false}, {"identifier": "getResourceLocation", "parameters": "(final String type, final String name)", "modifiers": "public", "return": "ResourceLocation", "signature": "ResourceLocation getResourceLocation(final String type, final String name)", "full_signature": "public ResourceLocation getResourceLocation(final String type, final String name)", "class_method_signature": "Resources.getResourceLocation(final String type, final String name)", "testcase": false, "constructor": false}, {"identifier": "getResourceDescriptor", "parameters": "(final String type, final String name)", "modifiers": "public", "return": "ResourceDescriptor", "signature": "ResourceDescriptor getResourceDescriptor(final String type, final String name)", "full_signature": "public ResourceDescriptor getResourceDescriptor(final String type, final String name)", "class_method_signature": "Resources.getResourceDescriptor(final String type, final String name)", "testcase": false, "constructor": false}], "file": "core-old/src/main/java/org/maera/plugin/Resources.java"}, "focal_method": {"identifier": "getResourceDescriptor", "parameters": "(final String type, final String name)", "modifiers": "public", "return": "ResourceDescriptor", "body": "public ResourceDescriptor getResourceDescriptor(final String type, final String name) {\n        for (final ResourceDescriptor resourceDescriptor : resourceDescriptors) {\n            if (resourceDescriptor.getType().equalsIgnoreCase(type) && resourceDescriptor.getName().equalsIgnoreCase(name)) {\n                return resourceDescriptor;\n            }\n        }\n        return null;\n    }", "signature": "ResourceDescriptor getResourceDescriptor(final String type, final String name)", "full_signature": "public ResourceDescriptor getResourceDescriptor(final String type, final String name)", "class_method_signature": "Resources.getResourceDescriptor(final String type, final String name)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "getType", "equalsIgnoreCase", "getName"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}