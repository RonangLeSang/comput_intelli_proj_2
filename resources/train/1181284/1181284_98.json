{"test_class": {"identifier": "DefaultPluginManagerTest", "superclass": "extends AbstractClassLoaderTest", "interfaces": "", "fields": [{"original_string": "private DirectoryPluginLoader directoryPluginLoader;", "modifier": "private", "type": "DirectoryPluginLoader", "declarator": "directoryPluginLoader", "var_name": "directoryPluginLoader"}, {"original_string": "private DefaultPluginManager manager;", "modifier": "private", "type": "DefaultPluginManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private DefaultModuleDescriptorFactory moduleDescriptorFactory;", "modifier": "private", "type": "DefaultModuleDescriptorFactory", "declarator": "moduleDescriptorFactory", "var_name": "moduleDescriptorFactory"}, {"original_string": "private PluginEventManager pluginEventManager;", "modifier": "private", "type": "PluginEventManager", "declarator": "pluginEventManager", "var_name": "pluginEventManager"}, {"original_string": "private List<PluginLoader> pluginLoaders;", "modifier": "private", "type": "List<PluginLoader>", "declarator": "pluginLoaders", "var_name": "pluginLoaders"}, {"original_string": "private PluginPersistentStateStore pluginStateStore;", "modifier": "private", "type": "PluginPersistentStateStore", "declarator": "pluginStateStore", "var_name": "pluginStateStore"}], "file": "core-old/src/test/java/org/maera/plugin/manager/DefaultPluginManagerTest.java"}, "test_case": {"identifier": "testLoadNewerDuplicatePlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadNewerDuplicatePlugin() throws PluginParseException {\n        moduleDescriptorFactory.addModuleDescriptor(\"mineral\", MockMineralModuleDescriptor.class);\n        moduleDescriptorFactory.addModuleDescriptor(\"animal\", MockAnimalModuleDescriptor.class);\n        pluginLoaders.add(new SinglePluginLoader(\"test-maera-plugin.xml\"));\n        pluginLoaders.add(new SinglePluginLoader(\"test-maera-plugin-newer.xml\"));\n        try {\n            manager.init();\n            fail(\"Should have died with duplicate key exception.\");\n        }\n        catch (final PluginParseException e) {\n            assertEquals(\"Duplicate plugin found (installed version is the same or older) and could not be unloaded: 'test.maera.plugin'\",\n                    e.getMessage());\n        }\n    }", "signature": "void testLoadNewerDuplicatePlugin()", "full_signature": "@Test public void testLoadNewerDuplicatePlugin()", "class_method_signature": "DefaultPluginManagerTest.testLoadNewerDuplicatePlugin()", "testcase": true, "constructor": false, "invocations": ["addModuleDescriptor", "addModuleDescriptor", "add", "add", "init", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "DefaultPluginManager", "superclass": "", "interfaces": "implements PluginController, PluginAccessor, PluginSystemLifecycle", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultPluginManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultPluginManager.class)", "var_name": "log"}, {"original_string": "private final List<PluginLoader> pluginLoaders;", "modifier": "private final", "type": "List<PluginLoader>", "declarator": "pluginLoaders", "var_name": "pluginLoaders"}, {"original_string": "private final PluginPersistentStateStore store;", "modifier": "private final", "type": "PluginPersistentStateStore", "declarator": "store", "var_name": "store"}, {"original_string": "private final ModuleDescriptorFactory moduleDescriptorFactory;", "modifier": "private final", "type": "ModuleDescriptorFactory", "declarator": "moduleDescriptorFactory", "var_name": "moduleDescriptorFactory"}, {"original_string": "private final PluginEventManager pluginEventManager;", "modifier": "private final", "type": "PluginEventManager", "declarator": "pluginEventManager", "var_name": "pluginEventManager"}, {"original_string": "private final Map<String, Plugin> plugins = CopyOnWriteMap.<String, Plugin>builder().stableViews().newHashMap();", "modifier": "private final", "type": "Map<String, Plugin>", "declarator": "plugins = CopyOnWriteMap.<String, Plugin>builder().stableViews().newHashMap()", "var_name": "plugins"}, {"original_string": "private final PluginsClassLoader classLoader;", "modifier": "private final", "type": "PluginsClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private final PluginEnabler pluginEnabler = new PluginEnabler(this, this);", "modifier": "private final", "type": "PluginEnabler", "declarator": "pluginEnabler = new PluginEnabler(this, this)", "var_name": "pluginEnabler"}, {"original_string": "private final StateTracker tracker = new StateTracker();", "modifier": "private final", "type": "StateTracker", "declarator": "tracker = new StateTracker()", "var_name": "tracker"}, {"original_string": "private RevertablePluginInstaller pluginInstaller = new NoOpRevertablePluginInstaller(new UnsupportedPluginInstaller());", "modifier": "private", "type": "RevertablePluginInstaller", "declarator": "pluginInstaller = new NoOpRevertablePluginInstaller(new UnsupportedPluginInstaller())", "var_name": "pluginInstaller"}, {"original_string": "private final Map<Plugin, PluginLoader> pluginToPluginLoader = new HashMap<Plugin, PluginLoader>();", "modifier": "private final", "type": "Map<Plugin, PluginLoader>", "declarator": "pluginToPluginLoader = new HashMap<Plugin, PluginLoader>()", "var_name": "pluginToPluginLoader"}], "methods": [{"identifier": "DefaultPluginManager", "parameters": "(final PluginPersistentStateStore store, final List<PluginLoader> pluginLoaders, final ModuleDescriptorFactory moduleDescriptorFactory,\n                                final PluginEventManager pluginEventManager)", "modifiers": "public", "return": "", "signature": " DefaultPluginManager(final PluginPersistentStateStore store, final List<PluginLoader> pluginLoaders, final ModuleDescriptorFactory moduleDescriptorFactory,\n                                final PluginEventManager pluginEventManager)", "full_signature": "public  DefaultPluginManager(final PluginPersistentStateStore store, final List<PluginLoader> pluginLoaders, final ModuleDescriptorFactory moduleDescriptorFactory,\n                                final PluginEventManager pluginEventManager)", "class_method_signature": "DefaultPluginManager.DefaultPluginManager(final PluginPersistentStateStore store, final List<PluginLoader> pluginLoaders, final ModuleDescriptorFactory moduleDescriptorFactory,\n                                final PluginEventManager pluginEventManager)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "DefaultPluginManager.init()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "DefaultPluginManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "warmRestart", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void warmRestart()", "full_signature": "public final void warmRestart()", "class_method_signature": "DefaultPluginManager.warmRestart()", "testcase": false, "constructor": false}, {"identifier": "onPluginModuleAvailable", "parameters": "(PluginModuleAvailableEvent event)", "modifiers": "@PluginEventListener public", "return": "void", "signature": "void onPluginModuleAvailable(PluginModuleAvailableEvent event)", "full_signature": "@PluginEventListener public void onPluginModuleAvailable(PluginModuleAvailableEvent event)", "class_method_signature": "DefaultPluginManager.onPluginModuleAvailable(PluginModuleAvailableEvent event)", "testcase": false, "constructor": false}, {"identifier": "onPluginModuleUnavailable", "parameters": "(PluginModuleUnavailableEvent event)", "modifiers": "@PluginEventListener public", "return": "void", "signature": "void onPluginModuleUnavailable(PluginModuleUnavailableEvent event)", "full_signature": "@PluginEventListener public void onPluginModuleUnavailable(PluginModuleUnavailableEvent event)", "class_method_signature": "DefaultPluginManager.onPluginModuleUnavailable(PluginModuleUnavailableEvent event)", "testcase": false, "constructor": false}, {"identifier": "onPluginContainerUnavailable", "parameters": "(PluginContainerUnavailableEvent event)", "modifiers": "@PluginEventListener public", "return": "void", "signature": "void onPluginContainerUnavailable(PluginContainerUnavailableEvent event)", "full_signature": "@PluginEventListener public void onPluginContainerUnavailable(PluginContainerUnavailableEvent event)", "class_method_signature": "DefaultPluginManager.onPluginContainerUnavailable(PluginContainerUnavailableEvent event)", "testcase": false, "constructor": false}, {"identifier": "onPluginRefresh", "parameters": "(final PluginRefreshedEvent event)", "modifiers": "@PluginEventListener public", "return": "void", "signature": "void onPluginRefresh(final PluginRefreshedEvent event)", "full_signature": "@PluginEventListener public void onPluginRefresh(final PluginRefreshedEvent event)", "class_method_signature": "DefaultPluginManager.onPluginRefresh(final PluginRefreshedEvent event)", "testcase": false, "constructor": false}, {"identifier": "setPluginInstaller", "parameters": "(final PluginInstaller pluginInstaller)", "modifiers": "public", "return": "void", "signature": "void setPluginInstaller(final PluginInstaller pluginInstaller)", "full_signature": "public void setPluginInstaller(final PluginInstaller pluginInstaller)", "class_method_signature": "DefaultPluginManager.setPluginInstaller(final PluginInstaller pluginInstaller)", "testcase": false, "constructor": false}, {"identifier": "getStore", "parameters": "()", "modifiers": "protected final", "return": "PluginPersistentStateStore", "signature": "PluginPersistentStateStore getStore()", "full_signature": "protected final PluginPersistentStateStore getStore()", "class_method_signature": "DefaultPluginManager.getStore()", "testcase": false, "constructor": false}, {"identifier": "installPlugin", "parameters": "(final PluginArtifact pluginArtifact)", "modifiers": "public", "return": "String", "signature": "String installPlugin(final PluginArtifact pluginArtifact)", "full_signature": "public String installPlugin(final PluginArtifact pluginArtifact)", "class_method_signature": "DefaultPluginManager.installPlugin(final PluginArtifact pluginArtifact)", "testcase": false, "constructor": false}, {"identifier": "installPlugins", "parameters": "(final PluginArtifact... pluginArtifacts)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> installPlugins(final PluginArtifact... pluginArtifacts)", "full_signature": "public Set<String> installPlugins(final PluginArtifact... pluginArtifacts)", "class_method_signature": "DefaultPluginManager.installPlugins(final PluginArtifact... pluginArtifacts)", "testcase": false, "constructor": false}, {"identifier": "validatePlugin", "parameters": "(final PluginArtifact pluginArtifact)", "modifiers": "", "return": "String", "signature": "String validatePlugin(final PluginArtifact pluginArtifact)", "full_signature": " String validatePlugin(final PluginArtifact pluginArtifact)", "class_method_signature": "DefaultPluginManager.validatePlugin(final PluginArtifact pluginArtifact)", "testcase": false, "constructor": false}, {"identifier": "scanForNewPlugins", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int scanForNewPlugins()", "full_signature": "public int scanForNewPlugins()", "class_method_signature": "DefaultPluginManager.scanForNewPlugins()", "testcase": false, "constructor": false}, {"identifier": "markPluginInstallThatRequiresRestart", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void markPluginInstallThatRequiresRestart(Plugin plugin)", "full_signature": "private void markPluginInstallThatRequiresRestart(Plugin plugin)", "class_method_signature": "DefaultPluginManager.markPluginInstallThatRequiresRestart(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "markPluginUpgradeThatRequiresRestart", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void markPluginUpgradeThatRequiresRestart(Plugin plugin)", "full_signature": "private void markPluginUpgradeThatRequiresRestart(Plugin plugin)", "class_method_signature": "DefaultPluginManager.markPluginUpgradeThatRequiresRestart(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "markPluginUninstallThatRequiresRestart", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void markPluginUninstallThatRequiresRestart(Plugin plugin)", "full_signature": "private void markPluginUninstallThatRequiresRestart(Plugin plugin)", "class_method_signature": "DefaultPluginManager.markPluginUninstallThatRequiresRestart(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "uninstall", "parameters": "(final Plugin plugin)", "modifiers": "public", "return": "void", "signature": "void uninstall(final Plugin plugin)", "full_signature": "public void uninstall(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.uninstall(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "uninstallNoEvent", "parameters": "(Plugin plugin)", "modifiers": "protected", "return": "void", "signature": "void uninstallNoEvent(Plugin plugin)", "full_signature": "protected void uninstallNoEvent(Plugin plugin)", "class_method_signature": "DefaultPluginManager.uninstallNoEvent(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "revertRestartRequiredChange", "parameters": "(final String pluginKey)", "modifiers": "public", "return": "void", "signature": "void revertRestartRequiredChange(final String pluginKey)", "full_signature": "public void revertRestartRequiredChange(final String pluginKey)", "class_method_signature": "DefaultPluginManager.revertRestartRequiredChange(final String pluginKey)", "testcase": false, "constructor": false}, {"identifier": "removeStateFromStore", "parameters": "(final PluginPersistentStateStore stateStore, final Plugin plugin)", "modifiers": "protected", "return": "void", "signature": "void removeStateFromStore(final PluginPersistentStateStore stateStore, final Plugin plugin)", "full_signature": "protected void removeStateFromStore(final PluginPersistentStateStore stateStore, final Plugin plugin)", "class_method_signature": "DefaultPluginManager.removeStateFromStore(final PluginPersistentStateStore stateStore, final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "unloadPlugin", "parameters": "(final Plugin plugin)", "modifiers": "protected", "return": "void", "signature": "void unloadPlugin(final Plugin plugin)", "full_signature": "protected void unloadPlugin(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.unloadPlugin(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "ensurePluginAndLoaderSupportsUninstall", "parameters": "(final Plugin plugin)", "modifiers": "private", "return": "PluginLoader", "signature": "PluginLoader ensurePluginAndLoaderSupportsUninstall(final Plugin plugin)", "full_signature": "private PluginLoader ensurePluginAndLoaderSupportsUninstall(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.ensurePluginAndLoaderSupportsUninstall(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "removePluginFromLoader", "parameters": "(final Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void removePluginFromLoader(final Plugin plugin)", "full_signature": "private void removePluginFromLoader(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.removePluginFromLoader(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "notifyUninstallPlugin", "parameters": "(final Plugin plugin)", "modifiers": "protected", "return": "void", "signature": "void notifyUninstallPlugin(final Plugin plugin)", "full_signature": "protected void notifyUninstallPlugin(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.notifyUninstallPlugin(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "protected", "return": "PluginPersistentState", "signature": "PluginPersistentState getState()", "full_signature": "protected PluginPersistentState getState()", "class_method_signature": "DefaultPluginManager.getState()", "testcase": false, "constructor": false}, {"identifier": "addPlugin", "parameters": "(final PluginLoader loader, final Plugin plugin)", "modifiers": "@Deprecated protected", "return": "void", "signature": "void addPlugin(final PluginLoader loader, final Plugin plugin)", "full_signature": "@Deprecated protected void addPlugin(final PluginLoader loader, final Plugin plugin)", "class_method_signature": "DefaultPluginManager.addPlugin(final PluginLoader loader, final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "addPlugins", "parameters": "(final PluginLoader loader, final Collection<Plugin> pluginsToInstall)", "modifiers": "protected", "return": "void", "signature": "void addPlugins(final PluginLoader loader, final Collection<Plugin> pluginsToInstall)", "full_signature": "protected void addPlugins(final PluginLoader loader, final Collection<Plugin> pluginsToInstall)", "class_method_signature": "DefaultPluginManager.addPlugins(final PluginLoader loader, final Collection<Plugin> pluginsToInstall)", "testcase": false, "constructor": false}, {"identifier": "disableDependentPlugins", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "Set<Plugin>", "signature": "Set<Plugin> disableDependentPlugins(Plugin plugin)", "full_signature": "private Set<Plugin> disableDependentPlugins(Plugin plugin)", "class_method_signature": "DefaultPluginManager.disableDependentPlugins(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "updatePlugin", "parameters": "(final Plugin oldPlugin, final Plugin newPlugin)", "modifiers": "protected", "return": "void", "signature": "void updatePlugin(final Plugin oldPlugin, final Plugin newPlugin)", "full_signature": "protected void updatePlugin(final Plugin oldPlugin, final Plugin newPlugin)", "class_method_signature": "DefaultPluginManager.updatePlugin(final Plugin oldPlugin, final Plugin newPlugin)", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "()", "modifiers": "public", "return": "Collection<Plugin>", "signature": "Collection<Plugin> getPlugins()", "full_signature": "public Collection<Plugin> getPlugins()", "class_method_signature": "DefaultPluginManager.getPlugins()", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "(final PluginPredicate pluginPredicate)", "modifiers": "public", "return": "Collection<Plugin>", "signature": "Collection<Plugin> getPlugins(final PluginPredicate pluginPredicate)", "full_signature": "public Collection<Plugin> getPlugins(final PluginPredicate pluginPredicate)", "class_method_signature": "DefaultPluginManager.getPlugins(final PluginPredicate pluginPredicate)", "testcase": false, "constructor": false}, {"identifier": "getEnabledPlugins", "parameters": "()", "modifiers": "public", "return": "Collection<Plugin>", "signature": "Collection<Plugin> getEnabledPlugins()", "full_signature": "public Collection<Plugin> getEnabledPlugins()", "class_method_signature": "DefaultPluginManager.getEnabledPlugins()", "testcase": false, "constructor": false}, {"identifier": "getModules", "parameters": "(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "modifiers": "public", "return": "Collection<M>", "signature": "Collection<M> getModules(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "full_signature": "public Collection<M> getModules(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "class_method_signature": "DefaultPluginManager.getModules(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "testcase": false, "constructor": false}, {"identifier": "getModuleDescriptors", "parameters": "(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "modifiers": "public", "return": "Collection<ModuleDescriptor<M>>", "signature": "Collection<ModuleDescriptor<M>> getModuleDescriptors(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "full_signature": "public Collection<ModuleDescriptor<M>> getModuleDescriptors(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "class_method_signature": "DefaultPluginManager.getModuleDescriptors(final ModuleDescriptorPredicate<M> moduleDescriptorPredicate)", "testcase": false, "constructor": false}, {"identifier": "getModuleDescriptors", "parameters": "(final Collection<Plugin> plugins, final ModuleDescriptorPredicate<M> predicate)", "modifiers": "private", "return": "Iterable<ModuleDescriptor<M>>", "signature": "Iterable<ModuleDescriptor<M>> getModuleDescriptors(final Collection<Plugin> plugins, final ModuleDescriptorPredicate<M> predicate)", "full_signature": "private Iterable<ModuleDescriptor<M>> getModuleDescriptors(final Collection<Plugin> plugins, final ModuleDescriptorPredicate<M> predicate)", "class_method_signature": "DefaultPluginManager.getModuleDescriptors(final Collection<Plugin> plugins, final ModuleDescriptorPredicate<M> predicate)", "testcase": false, "constructor": false}, {"identifier": "getModules", "parameters": "(final Iterable<ModuleDescriptor<M>> moduleDescriptors)", "modifiers": "private", "return": "List<M>", "signature": "List<M> getModules(final Iterable<ModuleDescriptor<M>> moduleDescriptors)", "full_signature": "private List<M> getModules(final Iterable<ModuleDescriptor<M>> moduleDescriptors)", "class_method_signature": "DefaultPluginManager.getModules(final Iterable<ModuleDescriptor<M>> moduleDescriptors)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(final String key)", "modifiers": "public", "return": "Plugin", "signature": "Plugin getPlugin(final String key)", "full_signature": "public Plugin getPlugin(final String key)", "class_method_signature": "DefaultPluginManager.getPlugin(final String key)", "testcase": false, "constructor": false}, {"identifier": "getEnabledPlugin", "parameters": "(final String pluginKey)", "modifiers": "public", "return": "Plugin", "signature": "Plugin getEnabledPlugin(final String pluginKey)", "full_signature": "public Plugin getEnabledPlugin(final String pluginKey)", "class_method_signature": "DefaultPluginManager.getEnabledPlugin(final String pluginKey)", "testcase": false, "constructor": false}, {"identifier": "getPluginModule", "parameters": "(final String completeKey)", "modifiers": "public", "return": "ModuleDescriptor<?>", "signature": "ModuleDescriptor<?> getPluginModule(final String completeKey)", "full_signature": "public ModuleDescriptor<?> getPluginModule(final String completeKey)", "class_method_signature": "DefaultPluginManager.getPluginModule(final String completeKey)", "testcase": false, "constructor": false}, {"identifier": "getPluginModule", "parameters": "(final ModuleCompleteKey key)", "modifiers": "private", "return": "ModuleDescriptor<?>", "signature": "ModuleDescriptor<?> getPluginModule(final ModuleCompleteKey key)", "full_signature": "private ModuleDescriptor<?> getPluginModule(final ModuleCompleteKey key)", "class_method_signature": "DefaultPluginManager.getPluginModule(final ModuleCompleteKey key)", "testcase": false, "constructor": false}, {"identifier": "getEnabledPluginModule", "parameters": "(final String completeKey)", "modifiers": "public", "return": "ModuleDescriptor<?>", "signature": "ModuleDescriptor<?> getEnabledPluginModule(final String completeKey)", "full_signature": "public ModuleDescriptor<?> getEnabledPluginModule(final String completeKey)", "class_method_signature": "DefaultPluginManager.getEnabledPluginModule(final String completeKey)", "testcase": false, "constructor": false}, {"identifier": "getEnabledModulesByClass", "parameters": "(final Class<M> moduleClass)", "modifiers": "public", "return": "List<M>", "signature": "List<M> getEnabledModulesByClass(final Class<M> moduleClass)", "full_signature": "public List<M> getEnabledModulesByClass(final Class<M> moduleClass)", "class_method_signature": "DefaultPluginManager.getEnabledModulesByClass(final Class<M> moduleClass)", "testcase": false, "constructor": false}, {"identifier": "getEnabledModulesByClassAndDescriptor", "parameters": "(final Class<ModuleDescriptor<M>>[] descriptorClasses, final Class<M> moduleClass)", "modifiers": "@Deprecated public", "return": "List<M>", "signature": "List<M> getEnabledModulesByClassAndDescriptor(final Class<ModuleDescriptor<M>>[] descriptorClasses, final Class<M> moduleClass)", "full_signature": "@Deprecated public List<M> getEnabledModulesByClassAndDescriptor(final Class<ModuleDescriptor<M>>[] descriptorClasses, final Class<M> moduleClass)", "class_method_signature": "DefaultPluginManager.getEnabledModulesByClassAndDescriptor(final Class<ModuleDescriptor<M>>[] descriptorClasses, final Class<M> moduleClass)", "testcase": false, "constructor": false}, {"identifier": "getEnabledModulesByClassAndDescriptor", "parameters": "(final Class<ModuleDescriptor<M>> descriptorClass, final Class<M> moduleClass)", "modifiers": "@Deprecated public", "return": "List<M>", "signature": "List<M> getEnabledModulesByClassAndDescriptor(final Class<ModuleDescriptor<M>> descriptorClass, final Class<M> moduleClass)", "full_signature": "@Deprecated public List<M> getEnabledModulesByClassAndDescriptor(final Class<ModuleDescriptor<M>> descriptorClass, final Class<M> moduleClass)", "class_method_signature": "DefaultPluginManager.getEnabledModulesByClassAndDescriptor(final Class<ModuleDescriptor<M>> descriptorClass, final Class<M> moduleClass)", "testcase": false, "constructor": false}, {"identifier": "getEnabledModuleDescriptorsByModuleClass", "parameters": "(final Class<M> moduleClass)", "modifiers": "private", "return": "Collection<ModuleDescriptor<M>>", "signature": "Collection<ModuleDescriptor<M>> getEnabledModuleDescriptorsByModuleClass(final Class<M> moduleClass)", "full_signature": "private Collection<ModuleDescriptor<M>> getEnabledModuleDescriptorsByModuleClass(final Class<M> moduleClass)", "class_method_signature": "DefaultPluginManager.getEnabledModuleDescriptorsByModuleClass(final Class<M> moduleClass)", "testcase": false, "constructor": false}, {"identifier": "getEnabledModuleDescriptorsByClass", "parameters": "(final Class<D> descriptorClazz)", "modifiers": "public", "return": "List<D>", "signature": "List<D> getEnabledModuleDescriptorsByClass(final Class<D> descriptorClazz)", "full_signature": "public List<D> getEnabledModuleDescriptorsByClass(final Class<D> descriptorClazz)", "class_method_signature": "DefaultPluginManager.getEnabledModuleDescriptorsByClass(final Class<D> descriptorClazz)", "testcase": false, "constructor": false}, {"identifier": "getEnabledModuleDescriptorsByClass", "parameters": "(final Class<D> descriptorClazz, final boolean verbose)", "modifiers": "public", "return": "List<D>", "signature": "List<D> getEnabledModuleDescriptorsByClass(final Class<D> descriptorClazz, final boolean verbose)", "full_signature": "public List<D> getEnabledModuleDescriptorsByClass(final Class<D> descriptorClazz, final boolean verbose)", "class_method_signature": "DefaultPluginManager.getEnabledModuleDescriptorsByClass(final Class<D> descriptorClazz, final boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "getEnabledModuleDescriptorsByType", "parameters": "(final String type)", "modifiers": "@Deprecated public", "return": "List<ModuleDescriptor<M>>", "signature": "List<ModuleDescriptor<M>> getEnabledModuleDescriptorsByType(final String type)", "full_signature": "@Deprecated public List<ModuleDescriptor<M>> getEnabledModuleDescriptorsByType(final String type)", "class_method_signature": "DefaultPluginManager.getEnabledModuleDescriptorsByType(final String type)", "testcase": false, "constructor": false}, {"identifier": "filterDescriptors", "parameters": "(final Iterable<ModuleDescriptor<M>> descriptors, final ModuleDescriptorPredicate<M> predicate)", "modifiers": "private static", "return": "Iterable<ModuleDescriptor<M>>", "signature": "Iterable<ModuleDescriptor<M>> filterDescriptors(final Iterable<ModuleDescriptor<M>> descriptors, final ModuleDescriptorPredicate<M> predicate)", "full_signature": "private static Iterable<ModuleDescriptor<M>> filterDescriptors(final Iterable<ModuleDescriptor<M>> descriptors, final ModuleDescriptorPredicate<M> predicate)", "class_method_signature": "DefaultPluginManager.filterDescriptors(final Iterable<ModuleDescriptor<M>> descriptors, final ModuleDescriptorPredicate<M> predicate)", "testcase": false, "constructor": false}, {"identifier": "enablePlugins", "parameters": "(final String... keys)", "modifiers": "public", "return": "void", "signature": "void enablePlugins(final String... keys)", "full_signature": "public void enablePlugins(final String... keys)", "class_method_signature": "DefaultPluginManager.enablePlugins(final String... keys)", "testcase": false, "constructor": false}, {"identifier": "enablePlugin", "parameters": "(final String key)", "modifiers": "@Deprecated public", "return": "void", "signature": "void enablePlugin(final String key)", "full_signature": "@Deprecated public void enablePlugin(final String key)", "class_method_signature": "DefaultPluginManager.enablePlugin(final String key)", "testcase": false, "constructor": false}, {"identifier": "enablePluginState", "parameters": "(final Plugin plugin, final PluginPersistentStateStore stateStore)", "modifiers": "protected", "return": "void", "signature": "void enablePluginState(final Plugin plugin, final PluginPersistentStateStore stateStore)", "full_signature": "protected void enablePluginState(final Plugin plugin, final PluginPersistentStateStore stateStore)", "class_method_signature": "DefaultPluginManager.enablePluginState(final Plugin plugin, final PluginPersistentStateStore stateStore)", "testcase": false, "constructor": false}, {"identifier": "notifyPluginEnabled", "parameters": "(final Plugin plugin)", "modifiers": "protected", "return": "void", "signature": "void notifyPluginEnabled(final Plugin plugin)", "full_signature": "protected void notifyPluginEnabled(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.notifyPluginEnabled(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "enableConfiguredPluginModules", "parameters": "(final Plugin plugin)", "modifiers": "private", "return": "boolean", "signature": "boolean enableConfiguredPluginModules(final Plugin plugin)", "full_signature": "private boolean enableConfiguredPluginModules(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.enableConfiguredPluginModules(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "enableConfiguredPluginModule", "parameters": "(Plugin plugin, ModuleDescriptor<?> descriptor, Set<ModuleDescriptor<?>> enabledDescriptors)", "modifiers": "private", "return": "boolean", "signature": "boolean enableConfiguredPluginModule(Plugin plugin, ModuleDescriptor<?> descriptor, Set<ModuleDescriptor<?>> enabledDescriptors)", "full_signature": "private boolean enableConfiguredPluginModule(Plugin plugin, ModuleDescriptor<?> descriptor, Set<ModuleDescriptor<?>> enabledDescriptors)", "class_method_signature": "DefaultPluginManager.enableConfiguredPluginModule(Plugin plugin, ModuleDescriptor<?> descriptor, Set<ModuleDescriptor<?>> enabledDescriptors)", "testcase": false, "constructor": false}, {"identifier": "disablePlugin", "parameters": "(final String key)", "modifiers": "public", "return": "void", "signature": "void disablePlugin(final String key)", "full_signature": "public void disablePlugin(final String key)", "class_method_signature": "DefaultPluginManager.disablePlugin(final String key)", "testcase": false, "constructor": false}, {"identifier": "disablePluginWithoutPersisting", "parameters": "(final String key)", "modifiers": "public", "return": "void", "signature": "void disablePluginWithoutPersisting(final String key)", "full_signature": "public void disablePluginWithoutPersisting(final String key)", "class_method_signature": "DefaultPluginManager.disablePluginWithoutPersisting(final String key)", "testcase": false, "constructor": false}, {"identifier": "disablePluginInternal", "parameters": "(final String key, final boolean persistDisabledState)", "modifiers": "protected", "return": "void", "signature": "void disablePluginInternal(final String key, final boolean persistDisabledState)", "full_signature": "protected void disablePluginInternal(final String key, final boolean persistDisabledState)", "class_method_signature": "DefaultPluginManager.disablePluginInternal(final String key, final boolean persistDisabledState)", "testcase": false, "constructor": false}, {"identifier": "disablePluginState", "parameters": "(final Plugin plugin, final PluginPersistentStateStore stateStore)", "modifiers": "protected", "return": "void", "signature": "void disablePluginState(final Plugin plugin, final PluginPersistentStateStore stateStore)", "full_signature": "protected void disablePluginState(final Plugin plugin, final PluginPersistentStateStore stateStore)", "class_method_signature": "DefaultPluginManager.disablePluginState(final Plugin plugin, final PluginPersistentStateStore stateStore)", "testcase": false, "constructor": false}, {"identifier": "notifyPluginDisabled", "parameters": "(final Plugin plugin)", "modifiers": "protected", "return": "void", "signature": "void notifyPluginDisabled(final Plugin plugin)", "full_signature": "protected void notifyPluginDisabled(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.notifyPluginDisabled(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "disablePluginModules", "parameters": "(final Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void disablePluginModules(final Plugin plugin)", "full_signature": "private void disablePluginModules(final Plugin plugin)", "class_method_signature": "DefaultPluginManager.disablePluginModules(final Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "disablePluginModule", "parameters": "(final String completeKey)", "modifiers": "public", "return": "void", "signature": "void disablePluginModule(final String completeKey)", "full_signature": "public void disablePluginModule(final String completeKey)", "class_method_signature": "DefaultPluginManager.disablePluginModule(final String completeKey)", "testcase": false, "constructor": false}, {"identifier": "disablePluginModuleState", "parameters": "(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "modifiers": "protected", "return": "void", "signature": "void disablePluginModuleState(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "full_signature": "protected void disablePluginModuleState(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "class_method_signature": "DefaultPluginManager.disablePluginModuleState(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "testcase": false, "constructor": false}, {"identifier": "notifyModuleDisabled", "parameters": "(final ModuleDescriptor<?> module)", "modifiers": "protected", "return": "void", "signature": "void notifyModuleDisabled(final ModuleDescriptor<?> module)", "full_signature": "protected void notifyModuleDisabled(final ModuleDescriptor<?> module)", "class_method_signature": "DefaultPluginManager.notifyModuleDisabled(final ModuleDescriptor<?> module)", "testcase": false, "constructor": false}, {"identifier": "publishModuleDisabledEvents", "parameters": "(final ModuleDescriptor<?> module)", "modifiers": "private", "return": "void", "signature": "void publishModuleDisabledEvents(final ModuleDescriptor<?> module)", "full_signature": "private void publishModuleDisabledEvents(final ModuleDescriptor<?> module)", "class_method_signature": "DefaultPluginManager.publishModuleDisabledEvents(final ModuleDescriptor<?> module)", "testcase": false, "constructor": false}, {"identifier": "enablePluginModule", "parameters": "(final String completeKey)", "modifiers": "public", "return": "void", "signature": "void enablePluginModule(final String completeKey)", "full_signature": "public void enablePluginModule(final String completeKey)", "class_method_signature": "DefaultPluginManager.enablePluginModule(final String completeKey)", "testcase": false, "constructor": false}, {"identifier": "enablePluginModuleState", "parameters": "(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "modifiers": "protected", "return": "void", "signature": "void enablePluginModuleState(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "full_signature": "protected void enablePluginModuleState(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "class_method_signature": "DefaultPluginManager.enablePluginModuleState(final ModuleDescriptor<?> module, final PluginPersistentStateStore stateStore)", "testcase": false, "constructor": false}, {"identifier": "notifyModuleEnabled", "parameters": "(final ModuleDescriptor<?> module)", "modifiers": "protected", "return": "void", "signature": "void notifyModuleEnabled(final ModuleDescriptor<?> module)", "full_signature": "protected void notifyModuleEnabled(final ModuleDescriptor<?> module)", "class_method_signature": "DefaultPluginManager.notifyModuleEnabled(final ModuleDescriptor<?> module)", "testcase": false, "constructor": false}, {"identifier": "isPluginModuleEnabled", "parameters": "(final String completeKey)", "modifiers": "public", "return": "boolean", "signature": "boolean isPluginModuleEnabled(final String completeKey)", "full_signature": "public boolean isPluginModuleEnabled(final String completeKey)", "class_method_signature": "DefaultPluginManager.isPluginModuleEnabled(final String completeKey)", "testcase": false, "constructor": false}, {"identifier": "isPluginModuleEnabled", "parameters": "(final ModuleCompleteKey key)", "modifiers": "private", "return": "boolean", "signature": "boolean isPluginModuleEnabled(final ModuleCompleteKey key)", "full_signature": "private boolean isPluginModuleEnabled(final ModuleCompleteKey key)", "class_method_signature": "DefaultPluginManager.isPluginModuleEnabled(final ModuleCompleteKey key)", "testcase": false, "constructor": false}, {"identifier": "isPluginEnabled", "parameters": "(final String key)", "modifiers": "public", "return": "boolean", "signature": "boolean isPluginEnabled(final String key)", "full_signature": "public boolean isPluginEnabled(final String key)", "class_method_signature": "DefaultPluginManager.isPluginEnabled(final String key)", "testcase": false, "constructor": false}, {"identifier": "getDynamicResourceAsStream", "parameters": "(final String name)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getDynamicResourceAsStream(final String name)", "full_signature": "public InputStream getDynamicResourceAsStream(final String name)", "class_method_signature": "DefaultPluginManager.getDynamicResourceAsStream(final String name)", "testcase": false, "constructor": false}, {"identifier": "getDynamicPluginClass", "parameters": "(final String className)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getDynamicPluginClass(final String className)", "full_signature": "public Class<?> getDynamicPluginClass(final String className)", "class_method_signature": "DefaultPluginManager.getDynamicPluginClass(final String className)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "()", "modifiers": "public", "return": "PluginsClassLoader", "signature": "PluginsClassLoader getClassLoader()", "full_signature": "public PluginsClassLoader getClassLoader()", "class_method_signature": "DefaultPluginManager.getClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getPluginResourceAsStream", "parameters": "(final String pluginKey, final String resourcePath)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getPluginResourceAsStream(final String pluginKey, final String resourcePath)", "full_signature": "public InputStream getPluginResourceAsStream(final String pluginKey, final String resourcePath)", "class_method_signature": "DefaultPluginManager.getPluginResourceAsStream(final String pluginKey, final String resourcePath)", "testcase": false, "constructor": false}, {"identifier": "replacePluginWithUnloadablePlugin", "parameters": "(final Plugin plugin, final ModuleDescriptor<?> descriptor, final Throwable throwable)", "modifiers": "private", "return": "UnloadablePlugin", "signature": "UnloadablePlugin replacePluginWithUnloadablePlugin(final Plugin plugin, final ModuleDescriptor<?> descriptor, final Throwable throwable)", "full_signature": "private UnloadablePlugin replacePluginWithUnloadablePlugin(final Plugin plugin, final ModuleDescriptor<?> descriptor, final Throwable throwable)", "class_method_signature": "DefaultPluginManager.replacePluginWithUnloadablePlugin(final Plugin plugin, final ModuleDescriptor<?> descriptor, final Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "isSystemPlugin", "parameters": "(final String key)", "modifiers": "public", "return": "boolean", "signature": "boolean isSystemPlugin(final String key)", "full_signature": "public boolean isSystemPlugin(final String key)", "class_method_signature": "DefaultPluginManager.isSystemPlugin(final String key)", "testcase": false, "constructor": false}, {"identifier": "getPluginRestartState", "parameters": "(final String key)", "modifiers": "public", "return": "PluginRestartState", "signature": "PluginRestartState getPluginRestartState(final String key)", "full_signature": "public PluginRestartState getPluginRestartState(final String key)", "class_method_signature": "DefaultPluginManager.getPluginRestartState(final String key)", "testcase": false, "constructor": false}, {"identifier": "getBuilder", "parameters": "()", "modifiers": "private", "return": "Builder", "signature": "Builder getBuilder()", "full_signature": "private Builder getBuilder()", "class_method_signature": "DefaultPluginManager.getBuilder()", "testcase": false, "constructor": false}, {"identifier": "setDescriptorParserFactory", "parameters": "(final DescriptorParserFactory descriptorParserFactory)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setDescriptorParserFactory(final DescriptorParserFactory descriptorParserFactory)", "full_signature": "@Deprecated public void setDescriptorParserFactory(final DescriptorParserFactory descriptorParserFactory)", "class_method_signature": "DefaultPluginManager.setDescriptorParserFactory(final DescriptorParserFactory descriptorParserFactory)", "testcase": false, "constructor": false}], "file": "core-old/src/main/java/org/maera/plugin/manager/DefaultPluginManager.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void init() throws PluginParseException, NotificationException {\n        tracker.setState(StateTracker.State.STARTING);\n        final StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        log.info(\"Initialising the plugin system\");\n        pluginEventManager.broadcast(new PluginFrameworkStartingEvent(this, this));\n        pluginInstaller.clearBackups();\n        for (final PluginLoader loader : pluginLoaders) {\n            if (loader == null) {\n                continue;\n            }\n\n            final Iterable<Plugin> possiblePluginsToLoad = loader.loadAllPlugins(moduleDescriptorFactory);\n            final Collection<Plugin> pluginsToLoad = new ArrayList<Plugin>();\n            for (final Plugin plugin : possiblePluginsToLoad) {\n                if (getState().getPluginRestartState(plugin.getKey()) == PluginRestartState.REMOVE) {\n                    log.info(\"Plugin \" + plugin.getKey() + \" was marked to be removed on restart.  Removing now.\");\n                    loader.removePlugin(plugin);\n\n                    // PLUG-13: Plugins should not save state across uninstalls.\n                    removeStateFromStore(getStore(), plugin);\n                } else {\n                    pluginsToLoad.add(plugin);\n                }\n            }\n            addPlugins(loader, pluginsToLoad);\n        }\n\n        getStore().save(getBuilder().clearPluginRestartState().toState());\n\n        pluginEventManager.broadcast(new PluginFrameworkStartedEvent(this, this));\n        stopWatch.stop();\n        log.info(\"Plugin system started in \" + stopWatch);\n        tracker.setState(StateTracker.State.STARTED);\n    }", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "DefaultPluginManager.init()", "testcase": false, "constructor": false, "invocations": ["setState", "start", "info", "broadcast", "clearBackups", "loadAllPlugins", "getPluginRestartState", "getState", "getKey", "info", "getKey", "removePlugin", "removeStateFromStore", "getStore", "add", "addPlugins", "save", "getStore", "toState", "clearPluginRestartState", "getBuilder", "broadcast", "stop", "info", "setState"]}, "repository": {"repo_id": 1181284, "url": "https://github.com/katasource/maera", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 966, "license": "licensed"}}