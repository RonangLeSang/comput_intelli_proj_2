{"test_class": {"identifier": "ExcelExportUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "ZKDLComponents/src/test/java/cz/datalite/helpers/excel/export/ExcelExportUtilsTest.java"}, "test_case": {"identifier": "testConvertStringIndexToInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConvertStringIndexToInt() {\n\t\tassertEquals(0, ExcelExportUtils.convertStringIndexToInt(\"A\"));\n\t\tassertEquals(1, ExcelExportUtils.convertStringIndexToInt(\"B\"));\n\t\tassertEquals(25, ExcelExportUtils.convertStringIndexToInt(\"Z\"));\n\t\tassertEquals(26, ExcelExportUtils.convertStringIndexToInt(\"AA\"));\n\t\tassertEquals(27, ExcelExportUtils.convertStringIndexToInt(\"AB\"));\n\t\tassertEquals(157, ExcelExportUtils.convertStringIndexToInt(\"FB\"));\n\t}", "signature": "void testConvertStringIndexToInt()", "full_signature": "@Test public void testConvertStringIndexToInt()", "class_method_signature": "ExcelExportUtilsTest.testConvertStringIndexToInt()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convertStringIndexToInt", "assertEquals", "convertStringIndexToInt", "assertEquals", "convertStringIndexToInt", "assertEquals", "convertStringIndexToInt", "assertEquals", "convertStringIndexToInt", "assertEquals", "convertStringIndexToInt"]}, "focal_class": {"identifier": "ExcelExportUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOGGER = LoggerFactory.getLogger(ExcelExportUtils.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExcelExportUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "ExcelExportUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExcelExportUtils()", "full_signature": "private  ExcelExportUtils()", "class_method_signature": "ExcelExportUtils.ExcelExportUtils()", "testcase": false, "constructor": true}, {"identifier": "convertStringIndexToIntRecurs", "parameters": "( final String strIndex )", "modifiers": "private static", "return": "int", "signature": "int convertStringIndexToIntRecurs( final String strIndex )", "full_signature": "private static int convertStringIndexToIntRecurs( final String strIndex )", "class_method_signature": "ExcelExportUtils.convertStringIndexToIntRecurs( final String strIndex )", "testcase": false, "constructor": false}, {"identifier": "convertStringIndexToInt", "parameters": "( final String strIndex )", "modifiers": "public static", "return": "int", "signature": "int convertStringIndexToInt( final String strIndex )", "full_signature": "public static int convertStringIndexToInt( final String strIndex )", "class_method_signature": "ExcelExportUtils.convertStringIndexToInt( final String strIndex )", "testcase": false, "constructor": false}, {"identifier": "convertIntIndexToString", "parameters": "( final int index )", "modifiers": "public static", "return": "String", "signature": "String convertIntIndexToString( final int index )", "full_signature": "public static String convertIntIndexToString( final int index )", "class_method_signature": "ExcelExportUtils.convertIntIndexToString( final int index )", "testcase": false, "constructor": false}, {"identifier": "setTextCell", "parameters": "( WritableSheet ws, String cell, String text )", "modifiers": "public static", "return": "void", "signature": "void setTextCell( WritableSheet ws, String cell, String text )", "full_signature": "public static void setTextCell( WritableSheet ws, String cell, String text )", "class_method_signature": "ExcelExportUtils.setTextCell( WritableSheet ws, String cell, String text )", "testcase": false, "constructor": false}, {"identifier": "setNumberCell", "parameters": "( WritableSheet ws, String cell, Long cislo )", "modifiers": "public static", "return": "void", "signature": "void setNumberCell( WritableSheet ws, String cell, Long cislo )", "full_signature": "public static void setNumberCell( WritableSheet ws, String cell, Long cislo )", "class_method_signature": "ExcelExportUtils.setNumberCell( WritableSheet ws, String cell, Long cislo )", "testcase": false, "constructor": false}, {"identifier": "setDateCell", "parameters": "( WritableSheet ws, String cell, Date date )", "modifiers": "public static", "return": "void", "signature": "void setDateCell( WritableSheet ws, String cell, Date date )", "full_signature": "public static void setDateCell( WritableSheet ws, String cell, Date date )", "class_method_signature": "ExcelExportUtils.setDateCell( WritableSheet ws, String cell, Date date )", "testcase": false, "constructor": false}, {"identifier": "getColumnFromCell", "parameters": "( String cell )", "modifiers": "public static", "return": "int", "signature": "int getColumnFromCell( String cell )", "full_signature": "public static int getColumnFromCell( String cell )", "class_method_signature": "ExcelExportUtils.getColumnFromCell( String cell )", "testcase": false, "constructor": false}, {"identifier": "getRowFromCell", "parameters": "( String cell )", "modifiers": "public static", "return": "int", "signature": "int getRowFromCell( String cell )", "full_signature": "public static int getRowFromCell( String cell )", "class_method_signature": "ExcelExportUtils.getRowFromCell( String cell )", "testcase": false, "constructor": false}, {"identifier": "autofitColumnWidth", "parameters": "( final int column, final WritableSheet sheet )", "modifiers": "public static", "return": "void", "signature": "void autofitColumnWidth( final int column, final WritableSheet sheet )", "full_signature": "public static void autofitColumnWidth( final int column, final WritableSheet sheet )", "class_method_signature": "ExcelExportUtils.autofitColumnWidth( final int column, final WritableSheet sheet )", "testcase": false, "constructor": false}, {"identifier": "getWidthCoeficient", "parameters": "( final jxl.Cell cell )", "modifiers": "public static", "return": "double", "signature": "double getWidthCoeficient( final jxl.Cell cell )", "full_signature": "public static double getWidthCoeficient( final jxl.Cell cell )", "class_method_signature": "ExcelExportUtils.getWidthCoeficient( final jxl.Cell cell )", "testcase": false, "constructor": false}, {"identifier": "setWidth", "parameters": "( final int width, final int column, final WritableSheet sheet )", "modifiers": "public static", "return": "void", "signature": "void setWidth( final int width, final int column, final WritableSheet sheet )", "full_signature": "public static void setWidth( final int width, final int column, final WritableSheet sheet )", "class_method_signature": "ExcelExportUtils.setWidth( final int width, final int column, final WritableSheet sheet )", "testcase": false, "constructor": false}, {"identifier": "createWorkbook", "parameters": "( final OutputStream os )", "modifiers": "public static", "return": "WritableWorkbook", "signature": "WritableWorkbook createWorkbook( final OutputStream os )", "full_signature": "public static WritableWorkbook createWorkbook( final OutputStream os )", "class_method_signature": "ExcelExportUtils.createWorkbook( final OutputStream os )", "testcase": false, "constructor": false}, {"identifier": "createStream", "parameters": "()", "modifiers": "public static", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream createStream()", "full_signature": "public static ByteArrayOutputStream createStream()", "class_method_signature": "ExcelExportUtils.createStream()", "testcase": false, "constructor": false}, {"identifier": "insertSheet", "parameters": "( final WritableWorkbook workbook, final String sheetName )", "modifiers": "public static", "return": "WritableSheet", "signature": "WritableSheet insertSheet( final WritableWorkbook workbook, final String sheetName )", "full_signature": "public static WritableSheet insertSheet( final WritableWorkbook workbook, final String sheetName )", "class_method_signature": "ExcelExportUtils.insertSheet( final WritableWorkbook workbook, final String sheetName )", "testcase": false, "constructor": false}, {"identifier": "insertSheet", "parameters": "( final WritableWorkbook workbook, final String sheetName, final int index )", "modifiers": "public static", "return": "WritableSheet", "signature": "WritableSheet insertSheet( final WritableWorkbook workbook, final String sheetName, final int index )", "full_signature": "public static WritableSheet insertSheet( final WritableWorkbook workbook, final String sheetName, final int index )", "class_method_signature": "ExcelExportUtils.insertSheet( final WritableWorkbook workbook, final String sheetName, final int index )", "testcase": false, "constructor": false}, {"identifier": "getAMediaOutput", "parameters": "( final WritableWorkbook workbook, final ByteArrayOutputStream os, final String exportName )", "modifiers": "public static", "return": "AMedia", "signature": "AMedia getAMediaOutput( final WritableWorkbook workbook, final ByteArrayOutputStream os, final String exportName )", "full_signature": "public static AMedia getAMediaOutput( final WritableWorkbook workbook, final ByteArrayOutputStream os, final String exportName )", "class_method_signature": "ExcelExportUtils.getAMediaOutput( final WritableWorkbook workbook, final ByteArrayOutputStream os, final String exportName )", "testcase": false, "constructor": false}, {"identifier": "createCell", "parameters": "( final Cell cell, final CellFormats formats )", "modifiers": "public static", "return": "WritableCell", "signature": "WritableCell createCell( final Cell cell, final CellFormats formats )", "full_signature": "public static WritableCell createCell( final Cell cell, final CellFormats formats )", "class_method_signature": "ExcelExportUtils.createCell( final Cell cell, final CellFormats formats )", "testcase": false, "constructor": false}, {"identifier": "exportSimple", "parameters": "( final String reportName, final String sheetName, final DataSource dataSource )", "modifiers": "public static", "return": "AMedia", "signature": "AMedia exportSimple( final String reportName, final String sheetName, final DataSource dataSource )", "full_signature": "public static AMedia exportSimple( final String reportName, final String sheetName, final DataSource dataSource )", "class_method_signature": "ExcelExportUtils.exportSimple( final String reportName, final String sheetName, final DataSource dataSource )", "testcase": false, "constructor": false}, {"identifier": "exportSimple", "parameters": "(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "modifiers": "public static", "return": "AMedia", "signature": "AMedia exportSimple(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "full_signature": "public static AMedia exportSimple(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "class_method_signature": "ExcelExportUtils.exportSimple(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "testcase": false, "constructor": false}, {"identifier": "exportWithResult", "parameters": "(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "modifiers": "public static", "return": "ExportResult", "signature": "ExportResult exportWithResult(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "full_signature": "public static ExportResult exportWithResult(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "class_method_signature": "ExcelExportUtils.exportWithResult(String fileName, String sheetName, List<Map<String, Object>> model, int rows, DLListboxExtController masterController)", "testcase": false, "constructor": false}, {"identifier": "prepareSource", "parameters": "(final List<Map<String, Object>> model, final int rows, final DLListboxExtController masterController, final Integer[] exportedRows )", "modifiers": "private static", "return": "DataSource", "signature": "DataSource prepareSource(final List<Map<String, Object>> model, final int rows, final DLListboxExtController masterController, final Integer[] exportedRows )", "full_signature": "private static DataSource prepareSource(final List<Map<String, Object>> model, final int rows, final DLListboxExtController masterController, final Integer[] exportedRows )", "class_method_signature": "ExcelExportUtils.prepareSource(final List<Map<String, Object>> model, final int rows, final DLListboxExtController masterController, final Integer[] exportedRows )", "testcase": false, "constructor": false}, {"identifier": "prepareCells", "parameters": "(final List<Map<String, Object>> model, int rows, DLListboxExtController masterController, Integer[] exportedRows )", "modifiers": "private static", "return": "List<Cell>", "signature": "List<Cell> prepareCells(final List<Map<String, Object>> model, int rows, DLListboxExtController masterController, Integer[] exportedRows )", "full_signature": "private static List<Cell> prepareCells(final List<Map<String, Object>> model, int rows, DLListboxExtController masterController, Integer[] exportedRows )", "class_method_signature": "ExcelExportUtils.prepareCells(final List<Map<String, Object>> model, int rows, DLListboxExtController masterController, Integer[] exportedRows )", "testcase": false, "constructor": false}], "file": "ZKDLComponents/src/main/java/cz/datalite/helpers/excel/export/ExcelExportUtils.java"}, "focal_method": {"identifier": "convertStringIndexToInt", "parameters": "( final String strIndex )", "modifiers": "public static", "return": "int", "body": "public static int convertStringIndexToInt( final String strIndex ) {\n        return convertStringIndexToIntRecurs( strIndex ) - 1;\n    }", "signature": "int convertStringIndexToInt( final String strIndex )", "full_signature": "public static int convertStringIndexToInt( final String strIndex )", "class_method_signature": "ExcelExportUtils.convertStringIndexToInt( final String strIndex )", "testcase": false, "constructor": false, "invocations": ["convertStringIndexToIntRecurs"]}, "repository": {"repo_id": 5109749, "url": "https://github.com/DataLite/zk-dl", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 3464, "license": "licensed"}}