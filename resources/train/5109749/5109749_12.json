{"test_class": {"identifier": "TypeConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "DLHelpers/src/test/java/cz/datalite/helpers/TypeConverterTest.java"}, "test_case": {"identifier": "testTryToConvertToNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTryToConvertToNull() throws Exception {\n\t\tassertNull(TypeConverter.tryToConvertTo(null, Object.class));\n\t\tassertNull(TypeConverter.tryToConvertTo(\"\", Object.class));\n\t}", "signature": "void testTryToConvertToNull()", "full_signature": "@Test public void testTryToConvertToNull()", "class_method_signature": "TypeConverterTest.testTryToConvertToNull()", "testcase": true, "constructor": false, "invocations": ["assertNull", "tryToConvertTo", "assertNull", "tryToConvertTo"]}, "focal_class": {"identifier": "TypeConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String dateFormat = \"dd.MM.yyyy\";", "modifier": "public static", "type": "String", "declarator": "dateFormat = \"dd.MM.yyyy\"", "var_name": "dateFormat"}], "methods": [{"identifier": "TypeConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeConverter()", "full_signature": "private  TypeConverter()", "class_method_signature": "TypeConverter.TypeConverter()", "testcase": false, "constructor": true}, {"identifier": "tryToConvertTo", "parameters": "( final String value, final Class<T> type )", "modifiers": "public static", "return": "Object", "signature": "Object tryToConvertTo( final String value, final Class<T> type )", "full_signature": "public static Object tryToConvertTo( final String value, final Class<T> type )", "class_method_signature": "TypeConverter.tryToConvertTo( final String value, final Class<T> type )", "testcase": false, "constructor": false}, {"identifier": "tryToConvertToSilent", "parameters": "( final String value, final Class<T> type )", "modifiers": "public static", "return": "Object", "signature": "Object tryToConvertToSilent( final String value, final Class<T> type )", "full_signature": "public static Object tryToConvertToSilent( final String value, final Class<T> type )", "class_method_signature": "TypeConverter.tryToConvertToSilent( final String value, final Class<T> type )", "testcase": false, "constructor": false}, {"identifier": "convertTo", "parameters": "( final String value, final Class<T> type )", "modifiers": "public static", "return": "T", "signature": "T convertTo( final String value, final Class<T> type )", "full_signature": "public static T convertTo( final String value, final Class<T> type )", "class_method_signature": "TypeConverter.convertTo( final String value, final Class<T> type )", "testcase": false, "constructor": false}, {"identifier": "convertToSilent", "parameters": "( final String value, final Class<T> type )", "modifiers": "public static", "return": "T", "signature": "T convertToSilent( final String value, final Class<T> type )", "full_signature": "public static T convertToSilent( final String value, final Class<T> type )", "class_method_signature": "TypeConverter.convertToSilent( final String value, final Class<T> type )", "testcase": false, "constructor": false}], "file": "DLHelpers/src/main/java/cz/datalite/helpers/TypeConverter.java"}, "focal_method": {"identifier": "tryToConvertTo", "parameters": "( final String value, final Class<T> type )", "modifiers": "public static", "return": "Object", "body": "public static <T> Object tryToConvertTo( final String value, final Class<T> type ) throws ParseException, NumberFormatException {\n        if ( value == null || \"\".equals(value) ) {\n            return null;\n        }\n        if ( java.util.Date.class.isAssignableFrom( type ) ) {\n            return (java.util.Date)( new java.text.SimpleDateFormat( dateFormat, java.util.Locale.getDefault() ).parse( value ) );\n        } else if ( String.class.isAssignableFrom( type ) ) {\n            return type.cast( value );\n        } else if ( Integer.class.isAssignableFrom( type ) || Integer.TYPE.equals( type )) {\n            return   Integer.valueOf( value );\n        } else if ( Double.class.isAssignableFrom( type ) || Double.TYPE.equals( type ) ) {\n            return  Double.valueOf( value );\n        } else if ( Long.class.isAssignableFrom( type ) || Long.TYPE.equals( type ) ) {\n            return   Long.valueOf( value );\n        } else if ( Boolean.class.isAssignableFrom( type ) || Boolean.TYPE.equals( type ) ) {\n            return   (BooleanHelper.isTrue(value) ? Boolean.TRUE : (Boolean.valueOf( value )));\n        } else if ( Byte.class.isAssignableFrom( type ) || Byte.TYPE.equals( type ) ) {\n            return   Byte.valueOf(value);\n        } else if ( type.isEnum() ) {\n            for ( T enumValue : type.getEnumConstants() ) {\n                if ( enumValue.toString().equals( value ) ) {\n                    return enumValue;\n                }\n            }\n            return null;\n        } else {\n            return value;\n        }\n    }", "signature": "Object tryToConvertTo( final String value, final Class<T> type )", "full_signature": "public static Object tryToConvertTo( final String value, final Class<T> type )", "class_method_signature": "TypeConverter.tryToConvertTo( final String value, final Class<T> type )", "testcase": false, "constructor": false, "invocations": ["equals", "isAssignableFrom", "parse", "getDefault", "isAssignableFrom", "cast", "isAssignableFrom", "equals", "valueOf", "isAssignableFrom", "equals", "valueOf", "isAssignableFrom", "equals", "valueOf", "isAssignableFrom", "equals", "isTrue", "valueOf", "isAssignableFrom", "equals", "valueOf", "isEnum", "getEnumConstants", "equals", "toString"]}, "repository": {"repo_id": 5109749, "url": "https://github.com/DataLite/zk-dl", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 3464, "license": "licensed"}}