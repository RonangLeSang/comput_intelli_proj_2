{"test_class": {"identifier": "DateTimeUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTime testDateTimeFull = new DateTime(2010, 12, 30, 13, 59, 59, 999);", "modifier": "private static final", "type": "DateTime", "declarator": "testDateTimeFull = new DateTime(2010, 12, 30, 13, 59, 59, 999)", "var_name": "testDateTimeFull"}, {"original_string": "private static final DateTime testDateTime = new DateTime(2010, 12, 30, 13, 59, 59, 0);", "modifier": "private static final", "type": "DateTime", "declarator": "testDateTime = new DateTime(2010, 12, 30, 13, 59, 59, 0)", "var_name": "testDateTime"}, {"original_string": "private static final DateTime testDate = new DateTime(2010, 12, 30, 0, 0, 0, 0);", "modifier": "private static final", "type": "DateTime", "declarator": "testDate = new DateTime(2010, 12, 30, 0, 0, 0, 0)", "var_name": "testDate"}, {"original_string": "private static final String patternFull = \"dd.MM.yyyy HH:mm:ss.SSS\";", "modifier": "private static final", "type": "String", "declarator": "patternFull = \"dd.MM.yyyy HH:mm:ss.SSS\"", "var_name": "patternFull"}], "file": "DLHelpers/src/test/java/cz/datalite/time/DateTimeUtilTest.java"}, "test_case": {"identifier": "testFormatDateDateString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFormatDateDateString() {\n\t\tassertNull(DateTimeUtil.formatDate(null, DateTimeUtil.PATTERN_CZ_DATE));\n\t\tassertNull(DateTimeUtil.formatDate(new Date(), null));\n\t\tassertNull(DateTimeUtil.formatDate(new Date(), \"\"));\n\t\tassertNull(DateTimeUtil.formatDate(new Date(), \"    \\t   \\n   \"));\n\n\t\ttry {\n\t\t\tDateTimeUtil.formatDate(new Date(), \"sasdfasdfg\");\n\t\t\tfail();\n\t\t} catch (IllegalArgumentException expected) {\n\t\t\t// ok\n\t\t}\n\n\t\tassertEquals(\"30.12.2010 13:59:59\", DateTimeUtil.formatDate(testDateTimeFull.toDate(), DateTimeUtil.PATTERN_CZ_DATETIME));\n\t\tassertEquals(\"30.12.2010 13:59:59\", DateTimeUtil.formatDate(testDateTime.toDate(), DateTimeUtil.PATTERN_CZ_DATETIME));\n\t\tassertEquals(\"30.12.2010 00:00:00\", DateTimeUtil.formatDate(testDate.toDate(), DateTimeUtil.PATTERN_CZ_DATETIME));\n\n\t\tassertEquals(\"30.12.2010 13:59:59.999\", DateTimeUtil.formatDate(testDateTimeFull.toDate(), patternFull));\n\t\tassertEquals(\"30.12.2010 13:59:59.000\", DateTimeUtil.formatDate(testDateTime.toDate(), patternFull));\n\t\tassertEquals(\"30.12.2010 00:00:00.000\", DateTimeUtil.formatDate(testDate.toDate(), patternFull));\n\n\t\tassertEquals(\"30.12.2010\", DateTimeUtil.formatDate(testDateTimeFull.toDate(), DateTimeUtil.PATTERN_CZ_DATE));\n\t\tassertEquals(\"30.12.2010\", DateTimeUtil.formatDate(testDateTime.toDate(), DateTimeUtil.PATTERN_CZ_DATE));\n\t\tassertEquals(\"30.12.2010\", DateTimeUtil.formatDate(testDate.toDate(), DateTimeUtil.PATTERN_CZ_DATE));\n\t}", "signature": "void testFormatDateDateString()", "full_signature": "@Test public void testFormatDateDateString()", "class_method_signature": "DateTimeUtilTest.testFormatDateDateString()", "testcase": true, "constructor": false, "invocations": ["assertNull", "formatDate", "assertNull", "formatDate", "assertNull", "formatDate", "assertNull", "formatDate", "formatDate", "fail", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate", "assertEquals", "formatDate", "toDate"]}, "focal_class": {"identifier": "DateTimeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATTERN_CZ_DATE = \"dd.MM.yyyy\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN_CZ_DATE = \"dd.MM.yyyy\"", "var_name": "PATTERN_CZ_DATE"}, {"original_string": "public static final String PATTERN_CZ_DATETIME = \"dd.MM.yyyy HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN_CZ_DATETIME = \"dd.MM.yyyy HH:mm:ss\"", "var_name": "PATTERN_CZ_DATETIME"}, {"original_string": "public static final String PATTERN_CZ_TIME = \"HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN_CZ_TIME = \"HH:mm:ss\"", "var_name": "PATTERN_CZ_TIME"}, {"original_string": "public static final String PATTERN_LOG = \"yyyyMMddHHmmss\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN_LOG = \"yyyyMMddHHmmss\"", "var_name": "PATTERN_LOG"}], "methods": [{"identifier": "DateTimeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateTimeUtil()", "full_signature": "private  DateTimeUtil()", "class_method_signature": "DateTimeUtil.DateTimeUtil()", "testcase": false, "constructor": true}, {"identifier": "formatDuration", "parameters": "(final long duration, final boolean longFormat, final boolean trimZeros)", "modifiers": "public static", "return": "String", "signature": "String formatDuration(final long duration, final boolean longFormat, final boolean trimZeros)", "full_signature": "public static String formatDuration(final long duration, final boolean longFormat, final boolean trimZeros)", "class_method_signature": "DateTimeUtil.formatDuration(final long duration, final boolean longFormat, final boolean trimZeros)", "testcase": false, "constructor": false}, {"identifier": "now", "parameters": "()", "modifiers": "public static", "return": "Date", "signature": "Date now()", "full_signature": "public static Date now()", "class_method_signature": "DateTimeUtil.now()", "testcase": false, "constructor": false}, {"identifier": "nowZeroSec", "parameters": "()", "modifiers": "public static", "return": "Date", "signature": "Date nowZeroSec()", "full_signature": "public static Date nowZeroSec()", "class_method_signature": "DateTimeUtil.nowZeroSec()", "testcase": false, "constructor": false}, {"identifier": "nowCalendar", "parameters": "()", "modifiers": "public static", "return": "Calendar", "signature": "Calendar nowCalendar()", "full_signature": "public static Calendar nowCalendar()", "class_method_signature": "DateTimeUtil.nowCalendar()", "testcase": false, "constructor": false}, {"identifier": "today", "parameters": "()", "modifiers": "public static", "return": "Date", "signature": "Date today()", "full_signature": "public static Date today()", "class_method_signature": "DateTimeUtil.today()", "testcase": false, "constructor": false}, {"identifier": "todayCalendar", "parameters": "()", "modifiers": "public static", "return": "Calendar", "signature": "Calendar todayCalendar()", "full_signature": "public static Calendar todayCalendar()", "class_method_signature": "DateTimeUtil.todayCalendar()", "testcase": false, "constructor": false}, {"identifier": "yesterday", "parameters": "()", "modifiers": "public static", "return": "Date", "signature": "Date yesterday()", "full_signature": "public static Date yesterday()", "class_method_signature": "DateTimeUtil.yesterday()", "testcase": false, "constructor": false}, {"identifier": "yesterdayCalendar", "parameters": "()", "modifiers": "public static", "return": "Calendar", "signature": "Calendar yesterdayCalendar()", "full_signature": "public static Calendar yesterdayCalendar()", "class_method_signature": "DateTimeUtil.yesterdayCalendar()", "testcase": false, "constructor": false}, {"identifier": "addTime", "parameters": "(final Date date, final int period, final int amount)", "modifiers": "public static", "return": "Date", "signature": "Date addTime(final Date date, final int period, final int amount)", "full_signature": "public static Date addTime(final Date date, final int period, final int amount)", "class_method_signature": "DateTimeUtil.addTime(final Date date, final int period, final int amount)", "testcase": false, "constructor": false}, {"identifier": "addTimeCalendar", "parameters": "(final Calendar calendar, final int period, final int amount)", "modifiers": "public static", "return": "Calendar", "signature": "Calendar addTimeCalendar(final Calendar calendar, final int period, final int amount)", "full_signature": "public static Calendar addTimeCalendar(final Calendar calendar, final int period, final int amount)", "class_method_signature": "DateTimeUtil.addTimeCalendar(final Calendar calendar, final int period, final int amount)", "testcase": false, "constructor": false}, {"identifier": "date2calendar", "parameters": "(final Date date)", "modifiers": "public static", "return": "Calendar", "signature": "Calendar date2calendar(final Date date)", "full_signature": "public static Calendar date2calendar(final Date date)", "class_method_signature": "DateTimeUtil.date2calendar(final Date date)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(final String date, final boolean withTime)", "modifiers": "public static", "return": "Calendar", "signature": "Calendar parseDate(final String date, final boolean withTime)", "full_signature": "public static Calendar parseDate(final String date, final boolean withTime)", "class_method_signature": "DateTimeUtil.parseDate(final String date, final boolean withTime)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(final String date, final String pattern)", "modifiers": "public static", "return": "Calendar", "signature": "Calendar parseDate(final String date, final String pattern)", "full_signature": "public static Calendar parseDate(final String date, final String pattern)", "class_method_signature": "DateTimeUtil.parseDate(final String date, final String pattern)", "testcase": false, "constructor": false}, {"identifier": "parseISODateTime", "parameters": "(final String dateTime)", "modifiers": "public static", "return": "Calendar", "signature": "Calendar parseISODateTime(final String dateTime)", "full_signature": "public static Calendar parseISODateTime(final String dateTime)", "class_method_signature": "DateTimeUtil.parseISODateTime(final String dateTime)", "testcase": false, "constructor": false}, {"identifier": "parseDefaultISODateTime", "parameters": "(final String dateTime)", "modifiers": "public static", "return": "Calendar", "signature": "Calendar parseDefaultISODateTime(final String dateTime)", "full_signature": "public static Calendar parseDefaultISODateTime(final String dateTime)", "class_method_signature": "DateTimeUtil.parseDefaultISODateTime(final String dateTime)", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "(final Date date, final boolean withTime)", "modifiers": "public static", "return": "String", "signature": "String formatDate(final Date date, final boolean withTime)", "full_signature": "public static String formatDate(final Date date, final boolean withTime)", "class_method_signature": "DateTimeUtil.formatDate(final Date date, final boolean withTime)", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "(final Date date, final String pattern)", "modifiers": "public static", "return": "String", "signature": "String formatDate(final Date date, final String pattern)", "full_signature": "public static String formatDate(final Date date, final String pattern)", "class_method_signature": "DateTimeUtil.formatDate(final Date date, final String pattern)", "testcase": false, "constructor": false}, {"identifier": "formatDateByLocale", "parameters": "(final Date date, Locale locale, int style)", "modifiers": "public static", "return": "String", "signature": "String formatDateByLocale(final Date date, Locale locale, int style)", "full_signature": "public static String formatDateByLocale(final Date date, Locale locale, int style)", "class_method_signature": "DateTimeUtil.formatDateByLocale(final Date date, Locale locale, int style)", "testcase": false, "constructor": false}, {"identifier": "formatDateTimeByLocale", "parameters": "(final Date date, Locale locale, int style)", "modifiers": "public static", "return": "String", "signature": "String formatDateTimeByLocale(final Date date, Locale locale, int style)", "full_signature": "public static String formatDateTimeByLocale(final Date date, Locale locale, int style)", "class_method_signature": "DateTimeUtil.formatDateTimeByLocale(final Date date, Locale locale, int style)", "testcase": false, "constructor": false}, {"identifier": "extractYear", "parameters": "(final Date date)", "modifiers": "public static", "return": "int", "signature": "int extractYear(final Date date)", "full_signature": "public static int extractYear(final Date date)", "class_method_signature": "DateTimeUtil.extractYear(final Date date)", "testcase": false, "constructor": false}, {"identifier": "getFirstDayOfWeek", "parameters": "(Locale locale)", "modifiers": "public static", "return": "int", "signature": "int getFirstDayOfWeek(Locale locale)", "full_signature": "public static int getFirstDayOfWeek(Locale locale)", "class_method_signature": "DateTimeUtil.getFirstDayOfWeek(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "inPast", "parameters": "(Date time)", "modifiers": "public static", "return": "boolean", "signature": "boolean inPast(Date time)", "full_signature": "public static boolean inPast(Date time)", "class_method_signature": "DateTimeUtil.inPast(Date time)", "testcase": false, "constructor": false}, {"identifier": "getMidnight", "parameters": "(Date time)", "modifiers": "public static", "return": "Date", "signature": "Date getMidnight(Date time)", "full_signature": "public static Date getMidnight(Date time)", "class_method_signature": "DateTimeUtil.getMidnight(Date time)", "testcase": false, "constructor": false}], "file": "DLHelpers/src/main/java/cz/datalite/time/DateTimeUtil.java"}, "focal_method": {"identifier": "formatDate", "parameters": "(final Date date, final boolean withTime)", "modifiers": "public static", "return": "String", "body": "public static String formatDate(final Date date, final boolean withTime) {\n\t\treturn formatDate(date, withTime ? PATTERN_CZ_DATETIME : PATTERN_CZ_DATE);\n\t}", "signature": "String formatDate(final Date date, final boolean withTime)", "full_signature": "public static String formatDate(final Date date, final boolean withTime)", "class_method_signature": "DateTimeUtil.formatDate(final Date date, final boolean withTime)", "testcase": false, "constructor": false, "invocations": ["formatDate"]}, "repository": {"repo_id": 5109749, "url": "https://github.com/DataLite/zk-dl", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 3464, "license": "licensed"}}