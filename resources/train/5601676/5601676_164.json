{"test_class": {"identifier": "WebSocketTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WebSocket webSocket;", "modifier": "private", "type": "WebSocket", "declarator": "webSocket", "var_name": "webSocket"}, {"original_string": "private UIContext uiContext;", "modifier": "private", "type": "UIContext", "declarator": "uiContext", "var_name": "uiContext"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private final List<Pair<ServerToClientModel, Object>> encodedValues = new ArrayList<>();", "modifier": "private final", "type": "List<Pair<ServerToClientModel, Object>>", "declarator": "encodedValues = new ArrayList<>()", "var_name": "encodedValues"}], "file": "ponysdk/src/test/java/com/ponysdk/core/server/websocket/WebSocketTest.java"}, "test_case": {"identifier": "testInstruction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInstruction() {\n        final JsonProvider provider = JsonProvider.provider();\n        final JsonObjectBuilder job = provider.createObjectBuilder();\n        final JsonArrayBuilder jab = provider.createArrayBuilder();\n        final JsonObjectBuilder job1 = provider.createObjectBuilder();\n        job1.add(ClientToServerModel.OBJECT_ID.toStringValue(), false);\n        jab.add(job1.build());\n        job.add(ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue(), jab);\n        webSocket.onWebSocketText(job.build().toString());\n    }", "signature": "void testInstruction()", "full_signature": "@Test public void testInstruction()", "class_method_signature": "WebSocketTest.testInstruction()", "testcase": true, "constructor": false, "invocations": ["provider", "createObjectBuilder", "createArrayBuilder", "createObjectBuilder", "add", "toStringValue", "add", "build", "add", "toStringValue", "onWebSocketText", "toString", "build"]}, "focal_class": {"identifier": "WebSocket", "superclass": "", "interfaces": "implements WebSocketListener, WebsocketEncoder", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(WebSocket.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WebSocket.class)", "var_name": "log"}, {"original_string": "private ServletUpgradeRequest request;", "modifier": "private", "type": "ServletUpgradeRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private WebsocketMonitor monitor;", "modifier": "private", "type": "WebsocketMonitor", "declarator": "monitor", "var_name": "monitor"}, {"original_string": "private WebSocketPusher websocketPusher;", "modifier": "private", "type": "WebSocketPusher", "declarator": "websocketPusher", "var_name": "websocketPusher"}, {"original_string": "private ApplicationManager applicationManager;", "modifier": "private", "type": "ApplicationManager", "declarator": "applicationManager", "var_name": "applicationManager"}, {"original_string": "private TxnContext context;", "modifier": "private", "type": "TxnContext", "declarator": "context", "var_name": "context"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private UIContext uiContext;", "modifier": "private", "type": "UIContext", "declarator": "uiContext", "var_name": "uiContext"}, {"original_string": "private Listener listener;", "modifier": "private", "type": "Listener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private long lastSentPing;", "modifier": "private", "type": "long", "declarator": "lastSentPing", "var_name": "lastSentPing"}], "methods": [{"identifier": "WebSocket", "parameters": "()", "modifiers": "public", "return": "", "signature": " WebSocket()", "full_signature": "public  WebSocket()", "class_method_signature": "WebSocket.WebSocket()", "testcase": false, "constructor": true}, {"identifier": "onWebSocketConnect", "parameters": "(final Session session)", "modifiers": "@Override public", "return": "void", "signature": "void onWebSocketConnect(final Session session)", "full_signature": "@Override public void onWebSocketConnect(final Session session)", "class_method_signature": "WebSocket.onWebSocketConnect(final Session session)", "testcase": false, "constructor": false}, {"identifier": "onWebSocketError", "parameters": "(final Throwable throwable)", "modifiers": "@Override public", "return": "void", "signature": "void onWebSocketError(final Throwable throwable)", "full_signature": "@Override public void onWebSocketError(final Throwable throwable)", "class_method_signature": "WebSocket.onWebSocketError(final Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "onWebSocketClose", "parameters": "(final int statusCode, final String reason)", "modifiers": "@Override public", "return": "void", "signature": "void onWebSocketClose(final int statusCode, final String reason)", "full_signature": "@Override public void onWebSocketClose(final int statusCode, final String reason)", "class_method_signature": "WebSocket.onWebSocketClose(final int statusCode, final String reason)", "testcase": false, "constructor": false}, {"identifier": "onWebSocketText", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void onWebSocketText(final String message)", "full_signature": "@Override public void onWebSocketText(final String message)", "class_method_signature": "WebSocket.onWebSocketText(final String message)", "testcase": false, "constructor": false}, {"identifier": "processRoundtripLatency", "parameters": "(final JsonObject jsonObject)", "modifiers": "private", "return": "void", "signature": "void processRoundtripLatency(final JsonObject jsonObject)", "full_signature": "private void processRoundtripLatency(final JsonObject jsonObject)", "class_method_signature": "WebSocket.processRoundtripLatency(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "processInstructions", "parameters": "(final JsonObject jsonObject)", "modifiers": "private", "return": "void", "signature": "void processInstructions(final JsonObject jsonObject)", "full_signature": "private void processInstructions(final JsonObject jsonObject)", "class_method_signature": "WebSocket.processInstructions(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "processTerminalLog", "parameters": "(final JsonObject json, final ClientToServerModel level)", "modifiers": "private", "return": "void", "signature": "void processTerminalLog(final JsonObject json, final ClientToServerModel level)", "full_signature": "private void processTerminalLog(final JsonObject json, final ClientToServerModel level)", "class_method_signature": "WebSocket.processTerminalLog(final JsonObject json, final ClientToServerModel level)", "testcase": false, "constructor": false}, {"identifier": "onWebSocketBinary", "parameters": "(final byte[] payload, final int offset, final int len)", "modifiers": "@Override public", "return": "void", "signature": "void onWebSocketBinary(final byte[] payload, final int offset, final int len)", "full_signature": "@Override public void onWebSocketBinary(final byte[] payload, final int offset, final int len)", "class_method_signature": "WebSocket.onWebSocketBinary(final byte[] payload, final int offset, final int len)", "testcase": false, "constructor": false}, {"identifier": "sendRoundTrip", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendRoundTrip()", "full_signature": "public void sendRoundTrip()", "class_method_signature": "WebSocket.sendRoundTrip()", "testcase": false, "constructor": false}, {"identifier": "sendHeartbeat", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sendHeartbeat()", "full_signature": "private void sendHeartbeat()", "class_method_signature": "WebSocket.sendHeartbeat()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "WebSocket.flush()", "testcase": false, "constructor": false}, {"identifier": "flush0", "parameters": "()", "modifiers": "", "return": "void", "signature": "void flush0()", "full_signature": " void flush0()", "class_method_signature": "WebSocket.flush0()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "WebSocket.close()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disconnect()", "full_signature": "public void disconnect()", "class_method_signature": "WebSocket.disconnect()", "testcase": false, "constructor": false}, {"identifier": "isAlive", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isAlive()", "full_signature": "private boolean isAlive()", "class_method_signature": "WebSocket.isAlive()", "testcase": false, "constructor": false}, {"identifier": "isSessionOpen", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSessionOpen()", "full_signature": "private boolean isSessionOpen()", "class_method_signature": "WebSocket.isSessionOpen()", "testcase": false, "constructor": false}, {"identifier": "beginObject", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void beginObject()", "full_signature": "@Override public void beginObject()", "class_method_signature": "WebSocket.beginObject()", "testcase": false, "constructor": false}, {"identifier": "endObject", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endObject()", "full_signature": "@Override public void endObject()", "class_method_signature": "WebSocket.endObject()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(final ServerToClientModel model, final Object value)", "modifiers": "@Override public", "return": "void", "signature": "void encode(final ServerToClientModel model, final Object value)", "full_signature": "@Override public void encode(final ServerToClientModel model, final Object value)", "class_method_signature": "WebSocket.encode(final ServerToClientModel model, final Object value)", "testcase": false, "constructor": false}, {"identifier": "getRequest", "parameters": "()", "modifiers": "public", "return": "ServletUpgradeRequest", "signature": "ServletUpgradeRequest getRequest()", "full_signature": "public ServletUpgradeRequest getRequest()", "class_method_signature": "WebSocket.getRequest()", "testcase": false, "constructor": false}, {"identifier": "setRequest", "parameters": "(final ServletUpgradeRequest request)", "modifiers": "public", "return": "void", "signature": "void setRequest(final ServletUpgradeRequest request)", "full_signature": "public void setRequest(final ServletUpgradeRequest request)", "class_method_signature": "WebSocket.setRequest(final ServletUpgradeRequest request)", "testcase": false, "constructor": false}, {"identifier": "setApplicationManager", "parameters": "(final ApplicationManager applicationManager)", "modifiers": "public", "return": "void", "signature": "void setApplicationManager(final ApplicationManager applicationManager)", "full_signature": "public void setApplicationManager(final ApplicationManager applicationManager)", "class_method_signature": "WebSocket.setApplicationManager(final ApplicationManager applicationManager)", "testcase": false, "constructor": false}, {"identifier": "setMonitor", "parameters": "(final WebsocketMonitor monitor)", "modifiers": "public", "return": "void", "signature": "void setMonitor(final WebsocketMonitor monitor)", "full_signature": "public void setMonitor(final WebsocketMonitor monitor)", "class_method_signature": "WebSocket.setMonitor(final WebsocketMonitor monitor)", "testcase": false, "constructor": false}, {"identifier": "setContext", "parameters": "(final TxnContext context)", "modifiers": "public", "return": "void", "signature": "void setContext(final TxnContext context)", "full_signature": "public void setContext(final TxnContext context)", "class_method_signature": "WebSocket.setContext(final TxnContext context)", "testcase": false, "constructor": false}, {"identifier": "setListener", "parameters": "(final Listener listener)", "modifiers": "public", "return": "void", "signature": "void setListener(final Listener listener)", "full_signature": "public void setListener(final Listener listener)", "class_method_signature": "WebSocket.setListener(final Listener listener)", "testcase": false, "constructor": false}], "file": "ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocket.java"}, "focal_method": {"identifier": "onWebSocketText", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onWebSocketText(final String message) {\n        if (this.listener != null) listener.onIncomingText(message);\n        if (isAlive()) {\n            try {\n                uiContext.onMessageReceived();\n                if (monitor != null) monitor.onMessageReceived(WebSocket.this, message);\n\n                final JsonObject jsonObject;\n                try (final JsonReader reader = uiContext.getJsonProvider().createReader(new StringReader(message))) {\n                    jsonObject = reader.readObject();\n                }\n\n                if (jsonObject.containsKey(ClientToServerModel.HEARTBEAT_REQUEST.toStringValue())) {\n                    sendHeartbeat();\n                } else if (jsonObject.containsKey(ClientToServerModel.TERMINAL_LATENCY.toStringValue())) {\n                    processRoundtripLatency(jsonObject);\n                } else if (jsonObject.containsKey(ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue())) {\n                    processInstructions(jsonObject);\n                } else if (jsonObject.containsKey(ClientToServerModel.ERROR_MSG.toStringValue())) {\n                    processTerminalLog(jsonObject, ClientToServerModel.ERROR_MSG);\n                } else if (jsonObject.containsKey(ClientToServerModel.WARN_MSG.toStringValue())) {\n                    processTerminalLog(jsonObject, ClientToServerModel.WARN_MSG);\n                } else if (jsonObject.containsKey(ClientToServerModel.INFO_MSG.toStringValue())) {\n                    processTerminalLog(jsonObject, ClientToServerModel.INFO_MSG);\n                } else {\n                    log.error(\"Unknown message from terminal #{} : {}\", uiContext.getID(), message);\n                }\n\n                if (monitor != null) monitor.onMessageProcessed(this, message);\n            } catch (final Throwable e) {\n                log.error(\"Cannot process message from terminal  #\" + uiContext.getID() + \" : \" + message, e);\n            } finally {\n                if (monitor != null) monitor.onMessageUnprocessed(this, message);\n            }\n        } else {\n            log.info(\"UI Context #{} is destroyed, message dropped from terminal : {}\", uiContext != null ? uiContext.getID() : -1,\n                    message);\n        }\n    }", "signature": "void onWebSocketText(final String message)", "full_signature": "@Override public void onWebSocketText(final String message)", "class_method_signature": "WebSocket.onWebSocketText(final String message)", "testcase": false, "constructor": false, "invocations": ["onIncomingText", "isAlive", "onMessageReceived", "onMessageReceived", "createReader", "getJsonProvider", "readObject", "containsKey", "toStringValue", "sendHeartbeat", "containsKey", "toStringValue", "processRoundtripLatency", "containsKey", "toStringValue", "processInstructions", "containsKey", "toStringValue", "processTerminalLog", "containsKey", "toStringValue", "processTerminalLog", "containsKey", "toStringValue", "processTerminalLog", "error", "getID", "onMessageProcessed", "error", "getID", "onMessageUnprocessed", "info", "getID"]}, "repository": {"repo_id": 5601676, "url": "https://github.com/Nciaravola/PonySDK", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 15, "size": 13815, "license": "licensed"}}