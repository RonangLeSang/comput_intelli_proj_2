{"test_class": {"identifier": "UIFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UIFactory uiFactory = new UIFactory();", "modifier": "private final", "type": "UIFactory", "declarator": "uiFactory = new UIFactory()", "var_name": "uiFactory"}], "file": "ponysdk/src/test/java/com/ponysdk/core/terminal/UIFactoryTest.java"}, "test_case": {"identifier": "testNewPTLayoutPanel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewPTLayoutPanel() {\n        final PTObject widget = uiFactory.newUIObject(WidgetType.LAYOUT_PANEL);\n        assertTrue(widget instanceof PTLayoutPanel);\n    }", "signature": "void testNewPTLayoutPanel()", "full_signature": "@Test public void testNewPTLayoutPanel()", "class_method_signature": "UIFactoryTest.testNewPTLayoutPanel()", "testcase": true, "constructor": false, "invocations": ["newUIObject", "assertTrue"]}, "focal_class": {"identifier": "UIFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(UIFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(UIFactory.class.getName())", "var_name": "log"}], "methods": [{"identifier": "newUIObject", "parameters": "(final WidgetType widgetType)", "modifiers": "", "return": "PTObject", "signature": "PTObject newUIObject(final WidgetType widgetType)", "full_signature": " PTObject newUIObject(final WidgetType widgetType)", "class_method_signature": "UIFactory.newUIObject(final WidgetType widgetType)", "testcase": false, "constructor": false}], "file": "ponysdk/src/main/java/com/ponysdk/core/terminal/UIFactory.java"}, "focal_method": {"identifier": "newUIObject", "parameters": "(final WidgetType widgetType)", "modifiers": "", "return": "PTObject", "body": "PTObject newUIObject(final WidgetType widgetType) {\n        if (WidgetType.FLOW_PANEL == widgetType) return new PTFlowPanel();\n        else if (WidgetType.SIMPLE_PANEL == widgetType) return new PTSimplePanel<>();\n        else if (WidgetType.LABEL == widgetType) return new PTLabel<>();\n        else if (WidgetType.BUTTON == widgetType) return new PTButton();\n        else if (WidgetType.CHECKBOX == widgetType) return new PTCheckBox<>();\n        else if (WidgetType.DATEBOX == widgetType) return new PTDateBox();\n        else if (WidgetType.DATEPICKER == widgetType) return new PTDatePicker();\n        else if (WidgetType.ADDON_COMPOSITE == widgetType) return new PTAddOnComposite();\n        else if (WidgetType.ADDON == widgetType) return new PTAddOn();\n        else if (WidgetType.ELEMENT == widgetType) return new PTElement();\n        else if (WidgetType.HTML == widgetType) return new PTHTML();\n        else if (WidgetType.IMAGE == widgetType) return new PTImage();\n        else if (WidgetType.LISTBOX == widgetType) return new PTListBox();\n        else if (WidgetType.DIALOG_BOX == widgetType) return new PTDialogBox();\n        else if (WidgetType.PASSWORD_TEXTBOX == widgetType) return new PTPasswordTextBox();\n        else if (WidgetType.TEXTBOX == widgetType) return new PTTextBox();\n        else if (WidgetType.TEXT_AREA == widgetType) return new PTTextArea();\n        else if (WidgetType.ANCHOR == widgetType) return new PTAnchor();\n        else if (WidgetType.FILE_UPLOAD == widgetType) return new PTFileUpload();\n        else if (WidgetType.FOCUS_PANEL == widgetType) return new PTFocusPanel();\n        else if (WidgetType.ABSOLUTE_PANEL == widgetType) return new PTAbsolutePanel();\n        else if (WidgetType.FLEX_TABLE == widgetType) return new PTFlexTable();\n        else if (WidgetType.GRID == widgetType) return new PTGrid();\n        else if (WidgetType.DECORATED_POPUP_PANEL == widgetType) return new PTDecoratedPopupPanel<>();\n        else if (WidgetType.DECORATOR_PANEL == widgetType) return new PTDecoratorPanel();\n        else if (WidgetType.DISCLOSURE_PANEL == widgetType) return new PTDisclosurePanel();\n        else if (WidgetType.DOCK_LAYOUT_PANEL == widgetType) return new PTDockLayoutPanel<>();\n        else if (WidgetType.HEADER_PANEL == widgetType) return new PTHeaderPanel();\n        else if (WidgetType.WINDOW == widgetType) return new PTWindow();\n        else if (WidgetType.ROOT_PANEL == widgetType) return new PTRootPanel();\n        else if (WidgetType.MENU_BAR == widgetType) return new PTMenuBar();\n        else if (WidgetType.MENU_ITEM == widgetType) return new PTMenuItem();\n        else if (WidgetType.MENU_ITEM_SEPARATOR == widgetType) return new PTMenuItemSeparator();\n        else if (WidgetType.POPUP_PANEL == widgetType) return new PTPopupPanel<>();\n        else if (WidgetType.PUSH_BUTTON == widgetType) return new PTPushButton();\n        else if (WidgetType.RADIO_BUTTON == widgetType) return new PTRadioButton();\n        else if (WidgetType.SCROLL_PANEL == widgetType) return new PTScrollPanel();\n        else if (WidgetType.TAB_PANEL == widgetType) return new PTTabPanel();\n        else if (WidgetType.SCRIPT == widgetType) return new PTScript();\n        else if (WidgetType.TREE == widgetType) return new PTTree();\n        else if (WidgetType.TREE_ITEM == widgetType) return new PTTreeItem();\n        else if (WidgetType.BROWSER == widgetType) return new PTBrowser();\n        else if (WidgetType.FRAME == widgetType) return new PTFrame();\n        else if (WidgetType.HORIZONTAL_PANEL == widgetType) return new PTHorizontalPanel();\n        else if (WidgetType.VERTICAL_PANEL == widgetType) return new PTVerticalPanel();\n        else if (WidgetType.ROOT_LAYOUT_PANEL == widgetType) return new PTRootLayoutPanel();\n        else if (WidgetType.LAYOUT_PANEL == widgetType) return new PTLayoutPanel();\n        else if (WidgetType.SIMPLE_LAYOUT_PANEL == widgetType) return new PTSimpleLayoutPanel();\n        else if (WidgetType.SPLIT_LAYOUT_PANEL == widgetType) return new PTSplitLayoutPanel();\n        else if (WidgetType.STACKLAYOUT_PANEL == widgetType) return new PTStackLayoutPanel();\n        else if (WidgetType.TAB_LAYOUT_PANEL == widgetType) return new PTTabLayoutPanel();\n        else if (WidgetType.RICH_TEXT_TOOLBAR == widgetType) return new PTRichTextToolbar();\n        else if (WidgetType.RICH_TEXT_AREA == widgetType) return new PTRichTextArea();\n        else if (WidgetType.SUGGESTBOX == widgetType) return new PTSuggestBox();\n        else if (WidgetType.FUNCTIONAL_LABEL == widgetType) return new PTFunctionalLabel();\n        else if (WidgetType.FUNCTION == widgetType) return new PTFunction();\n        else if (WidgetType.MULTIWORD_SUGGEST_ORACLE == widgetType) return new PTMultiWordSuggestOracle();\n        else log.severe(\"UIFactory: Client implementation not found, type : \" + widgetType);\n\n        return null;\n    }", "signature": "PTObject newUIObject(final WidgetType widgetType)", "full_signature": " PTObject newUIObject(final WidgetType widgetType)", "class_method_signature": "UIFactory.newUIObject(final WidgetType widgetType)", "testcase": false, "constructor": false, "invocations": ["severe"]}, "repository": {"repo_id": 5601676, "url": "https://github.com/Nciaravola/PonySDK", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 15, "size": 13815, "license": "licensed"}}