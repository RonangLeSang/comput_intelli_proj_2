{"test_class": {"identifier": "JacksonJsonHomeParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "jsonhome-core/src/test/java/de/otto/jsonhome/parser/JacksonJsonHomeParserTest.java"}, "test_case": {"identifier": "shouldParseDirectLink", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseDirectLink() throws Exception {\n        // given\n        final String jsonHomeDocument = \"{\\n\" +\n                \"  \\\"resources\\\" : {\" +\n                \"\\\"http://example.org/jsonhome-example/rel/storefront\\\" : {\\n\" +\n                \"      \\\"href\\\" : \\\"http://example.org/jsonhome-example/storefront\\\",\\n\" +\n                \"      \\\"hints\\\" : {\\n\" +\n                \"        \\\"allow\\\" : [\\n\" +\n                \"          \\\"GET\\\"\\n,\" +\n                \"          \\\"HEAD\\\"\\n\" +\n                \"        ],\\n\" +\n                \"        \\\"docs\\\" : \\\"http://de.wikipedia.org/wiki/Homepage\\\",\\n\" +\n                \"        \\\"precondition-req\\\" : [\\\"etag\\\"],\\n\" +\n                \"        \\\"status\\\" : \\\"deprecated\\\",\\n\" +\n                \"        \\\"docs\\\" : \\\"http://de.wikipedia.org/wiki/Homepage\\\",\\n\" +\n                \"        \\\"representations\\\" : [\\n\" +\n                \"          \\\"text/html\\\",\\n\" +\n                \"          \\\"text/plain\\\"\\n\" +\n                \"        ]\\n\" +\n                \"      }\\n\" +\n                \"    }}}\";\n        // when\n        final JsonHome jsonHome = new JacksonJsonHomeParser()\n                .parse(new ByteArrayInputStream(jsonHomeDocument.getBytes()));\n        // then\n        assertEquals(jsonHome, jsonHome(\n                directLink(\n                        create(\"http://example.org/jsonhome-example/rel/storefront\"),\n                        create(\"http://example.org/jsonhome-example/storefront\"),\n                        hintsBuilder()\n                                .allowing(EnumSet.of(GET, HEAD))\n                                .representedAs(asList(\"text/html\", \"text/plain\"))\n                                .with(docLink(URI.create(\"http://de.wikipedia.org/wiki/Homepage\")))\n                                .requiring(ETAG)\n                                .withStatus(Status.DEPRECATED)\n                                .build()\n                )\n        ));\n    }", "signature": "void shouldParseDirectLink()", "full_signature": "@Test public void shouldParseDirectLink()", "class_method_signature": "JacksonJsonHomeParserTest.shouldParseDirectLink()", "testcase": true, "constructor": false, "invocations": ["parse", "getBytes", "assertEquals", "jsonHome", "directLink", "create", "create", "build", "withStatus", "requiring", "with", "representedAs", "allowing", "hintsBuilder", "of", "asList", "docLink", "create"]}, "focal_class": {"identifier": "JacksonJsonHomeParser", "superclass": "", "interfaces": "implements JsonHomeParser", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JacksonJsonHomeParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JacksonJsonHomeParser.class)", "var_name": "LOG"}, {"original_string": "public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "modifier": "public static final", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = new ObjectMapper()", "var_name": "OBJECT_MAPPER"}], "methods": [{"identifier": "parse", "parameters": "(final InputStream stream)", "modifiers": "@Override public", "return": "JsonHome", "signature": "JsonHome parse(final InputStream stream)", "full_signature": "@Override public JsonHome parse(final InputStream stream)", "class_method_signature": "JacksonJsonHomeParser.parse(final InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "resourceLinkFrom", "parameters": "(final URI relationTypeUri, final JsonNode resourceLinkNode)", "modifiers": "private", "return": "ResourceLink", "signature": "ResourceLink resourceLinkFrom(final URI relationTypeUri, final JsonNode resourceLinkNode)", "full_signature": "private ResourceLink resourceLinkFrom(final URI relationTypeUri, final JsonNode resourceLinkNode)", "class_method_signature": "JacksonJsonHomeParser.resourceLinkFrom(final URI relationTypeUri, final JsonNode resourceLinkNode)", "testcase": false, "constructor": false}, {"identifier": "hrefVarsFrom", "parameters": "(final JsonNode jsonNode)", "modifiers": "private", "return": "List<HrefVar>", "signature": "List<HrefVar> hrefVarsFrom(final JsonNode jsonNode)", "full_signature": "private List<HrefVar> hrefVarsFrom(final JsonNode jsonNode)", "class_method_signature": "JacksonJsonHomeParser.hrefVarsFrom(final JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "hintsFrom", "parameters": "(final JsonNode hints)", "modifiers": "private", "return": "Hints", "signature": "Hints hintsFrom(final JsonNode hints)", "full_signature": "private Hints hintsFrom(final JsonNode hints)", "class_method_signature": "JacksonJsonHomeParser.hintsFrom(final JsonNode hints)", "testcase": false, "constructor": false}], "file": "jsonhome-core/src/main/java/de/otto/jsonhome/parser/JacksonJsonHomeParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final InputStream stream)", "modifiers": "@Override public", "return": "JsonHome", "body": "@Override\n    public JsonHome parse(final InputStream stream) {\n        try {\n            final JsonNode jsonNode = OBJECT_MAPPER.readTree(stream);\n            if (jsonNode != null && jsonNode.has(\"resources\")) {\n                final JsonHomeBuilder builder = jsonHomeBuilder();\n                final JsonNode resourcesNode = jsonNode.get(\"resources\");\n                final Iterator<String> fieldNames = resourcesNode.getFieldNames();\n                while (fieldNames.hasNext()) {\n                    final String fieldName = fieldNames.next();\n                    final JsonNode resourceNode = resourcesNode.get(fieldName);\n                    builder.addResource(resourceLinkFrom(URI.create(fieldName), resourceNode));\n                }\n                return builder.build();\n            }\n        } catch (final JsonProcessingException e) {\n            LOG.error(\"Unable to parse json-home document: {}\", e.getMessage());\n            throw new IllegalArgumentException(\"Error parsing json-home document: \" + e.getMessage(), e);\n        } catch (final IOException e) {\n            LOG.error(\"Unable to get json-home from stream: {}\", e.getMessage());\n            // TODO: define more specific exceptions\n            throw new IllegalStateException(\"Unable to get json-home document from stream: \" + e.getMessage(), e);\n        }\n        throw new IllegalArgumentException(\"Unable to parse json-home document: no resources defined.\");\n    }", "signature": "JsonHome parse(final InputStream stream)", "full_signature": "@Override public JsonHome parse(final InputStream stream)", "class_method_signature": "JacksonJsonHomeParser.parse(final InputStream stream)", "testcase": false, "constructor": false, "invocations": ["readTree", "has", "jsonHomeBuilder", "get", "getFieldNames", "hasNext", "next", "get", "addResource", "resourceLinkFrom", "create", "build", "error", "getMessage", "getMessage", "error", "getMessage", "getMessage"]}, "repository": {"repo_id": 6010090, "url": "https://github.com/otto-de/jsonhome", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 37, "size": 1643, "license": "licensed"}}