{"test_class": {"identifier": "HintsConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "jsonhome-core/src/test/java/de/otto/jsonhome/converter/HintsConverterTest.java"}, "test_case": {"identifier": "testAdditionalDescriptionForApplicationJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdditionalDescriptionForApplicationJson() {\n        // given\n        final Hints hints = hintsBuilder()\n                .with(documentation(asList(\"foo\", \"bar\"), \"<h1>Hello</h1>\", create(\"http://example.org/docs\")))\n                .build();\n        // when\n        final Map<String, ?> jsonMap = toRepresentation(hints, APPLICATION_JSON);\n        // then\n        assertEquals(jsonMap.get(\"docs\"), \"http://example.org/docs\");\n        assertEquals(jsonMap.get(\"description\"), asList(\"foo\", \"bar\"));\n        assertEquals(jsonMap.get(\"detailedDescription\"), \"<h1>Hello</h1>\");\n    }", "signature": "void testAdditionalDescriptionForApplicationJson()", "full_signature": "@Test public void testAdditionalDescriptionForApplicationJson()", "class_method_signature": "HintsConverterTest.testAdditionalDescriptionForApplicationJson()", "testcase": true, "constructor": false, "invocations": ["build", "with", "hintsBuilder", "documentation", "asList", "create", "toRepresentation", "assertEquals", "get", "assertEquals", "get", "asList", "assertEquals", "get"]}, "focal_class": {"identifier": "HintsConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HintsConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " HintsConverter()", "full_signature": "private  HintsConverter()", "class_method_signature": "HintsConverter.HintsConverter()", "testcase": false, "constructor": true}, {"identifier": "toJsonHomeRepresentation", "parameters": "(final Hints hints)", "modifiers": "public static", "return": "Map<String, ?>", "signature": "Map<String, ?> toJsonHomeRepresentation(final Hints hints)", "full_signature": "public static Map<String, ?> toJsonHomeRepresentation(final Hints hints)", "class_method_signature": "HintsConverter.toJsonHomeRepresentation(final Hints hints)", "testcase": false, "constructor": false}, {"identifier": "toRepresentation", "parameters": "(final Hints hints, final JsonHomeMediaType mediaType)", "modifiers": "public static", "return": "Map<String, ?>", "signature": "Map<String, ?> toRepresentation(final Hints hints, final JsonHomeMediaType mediaType)", "full_signature": "public static Map<String, ?> toRepresentation(final Hints hints, final JsonHomeMediaType mediaType)", "class_method_signature": "HintsConverter.toRepresentation(final Hints hints, final JsonHomeMediaType mediaType)", "testcase": false, "constructor": false}], "file": "jsonhome-core/src/main/java/de/otto/jsonhome/converter/HintsConverter.java"}, "focal_method": {"identifier": "toRepresentation", "parameters": "(final Hints hints, final JsonHomeMediaType mediaType)", "modifiers": "public static", "return": "Map<String, ?>", "body": "public static Map<String, ?> toRepresentation(final Hints hints, final JsonHomeMediaType mediaType) {\n        final Map<String, Object> jsonHints = new LinkedHashMap<>();\n        jsonHints.put(\"allow\", hints.getAllows());\n        jsonHints.put(\"representations\", hints.getRepresentations());\n        if (!hints.getAcceptPut().isEmpty()) {\n            jsonHints.put(\"accept-put\", hints.getAcceptPut());\n        }\n        if (!hints.getAcceptPost().isEmpty()) {\n            jsonHints.put(\"accept-post\", hints.getAcceptPost());\n        }\n        if (!hints.getAcceptPatch().isEmpty()) {\n            jsonHints.put(\"accept-patch\", hints.getAcceptPatch());\n        }\n        if (!hints.getAcceptRanges().isEmpty()) {\n            jsonHints.put(\"accept-ranges\", hints.getAcceptRanges());\n        }\n        if (!hints.getPreferences().isEmpty()) {\n            jsonHints.put(\"prefer\", hints.getPreferences());\n        }\n        if (!hints.getPreconditionReq().isEmpty()) {\n            jsonHints.put(\"precondition-req\", hints.getPreconditionReq().stream().map(Objects::toString).collect(toList()));\n        }\n        if (!hints.getAuthReq().isEmpty()) {\n            final List<Map<String,?>> authReq = new ArrayList<>();\n            for (final Authentication authentication : hints.getAuthReq()) {\n                final Map<String, Object> authMap = new HashMap<>();\n                authMap.put(\"scheme\", authentication.getScheme());\n                if (!authentication.getRealms().isEmpty()) {\n                    authMap.put(\"realms\", authentication.getRealms());\n                }\n                authReq.add(authMap);\n            }\n            jsonHints.put(\"auth-req\", authReq);\n        }\n        if (!hints.getStatus().equals(Status.OK)) {\n            jsonHints.put(\"status\", hints.getStatus().name().toLowerCase());\n        }\n        if (hints.getDocs().hasLink()) {\n            jsonHints.put(\"docs\", hints.getDocs().getLink().toString());\n        }\n        if (mediaType.equals(JsonHomeMediaType.APPLICATION_JSON)) {\n            if (hints.getDocs().hasDescription()) {\n                jsonHints.put(\"description\", hints.getDocs().getDescription());\n            }\n            if (hints.getDocs().hasDetailedDescription()) {\n                jsonHints.put(\"detailedDescription\", hints.getDocs().getDetailedDescription());\n            }\n        }\n        return jsonHints;\n    }", "signature": "Map<String, ?> toRepresentation(final Hints hints, final JsonHomeMediaType mediaType)", "full_signature": "public static Map<String, ?> toRepresentation(final Hints hints, final JsonHomeMediaType mediaType)", "class_method_signature": "HintsConverter.toRepresentation(final Hints hints, final JsonHomeMediaType mediaType)", "testcase": false, "constructor": false, "invocations": ["put", "getAllows", "put", "getRepresentations", "isEmpty", "getAcceptPut", "put", "getAcceptPut", "isEmpty", "getAcceptPost", "put", "getAcceptPost", "isEmpty", "getAcceptPatch", "put", "getAcceptPatch", "isEmpty", "getAcceptRanges", "put", "getAcceptRanges", "isEmpty", "getPreferences", "put", "getPreferences", "isEmpty", "getPreconditionReq", "put", "collect", "map", "stream", "getPreconditionReq", "toList", "isEmpty", "getAuthReq", "getAuthReq", "put", "getScheme", "isEmpty", "getRealms", "put", "getRealms", "add", "put", "equals", "getStatus", "put", "toLowerCase", "name", "getStatus", "hasLink", "getDocs", "put", "toString", "getLink", "getDocs", "equals", "hasDescription", "getDocs", "put", "getDescription", "getDocs", "hasDetailedDescription", "getDocs", "put", "getDetailedDescription", "getDocs"]}, "repository": {"repo_id": 6010090, "url": "https://github.com/otto-de/jsonhome", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 37, "size": 1643, "license": "licensed"}}