{"test_class": {"identifier": "ClassSchemaBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassSchemaBuilder classSchemaBuilder = new ClassSchemaBuilder();", "modifier": "private", "type": "ClassSchemaBuilder", "declarator": "classSchemaBuilder = new ClassSchemaBuilder()", "var_name": "classSchemaBuilder"}], "file": "blixtser-core/src/test/java/com/mojang/blixtser/core/ClassSchemaBuilderTest.java"}, "test_case": {"identifier": "mergable_fields_and_super_class", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergable_fields_and_super_class() {\n        ClassSchemaBuilder.ClassInfo classInfo = classSchemaBuilder.createClassInfo(ClassWithMergeableFields2.class);\n        Assert.assertEquals(1, classInfo.fieldInfos.length);\n    }", "signature": "void mergable_fields_and_super_class()", "full_signature": "@Test public void mergable_fields_and_super_class()", "class_method_signature": "ClassSchemaBuilderTest.mergable_fields_and_super_class()", "testcase": true, "constructor": false, "invocations": ["createClassInfo", "assertEquals"]}, "focal_class": {"identifier": "ClassSchemaBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Map<Integer, ClassInfo> classInfoCache = new HashMap<>();", "modifier": "static final", "type": "Map<Integer, ClassInfo>", "declarator": "classInfoCache = new HashMap<>()", "var_name": "classInfoCache"}, {"original_string": "static ClassInfo stringClassInfo;", "modifier": "static", "type": "ClassInfo", "declarator": "stringClassInfo", "var_name": "stringClassInfo"}, {"original_string": "static ClassInfo stringBufferInfo;", "modifier": "static", "type": "ClassInfo", "declarator": "stringBufferInfo", "var_name": "stringBufferInfo"}, {"original_string": "static ClassInfo stringBuilderInfo;", "modifier": "static", "type": "ClassInfo", "declarator": "stringBuilderInfo", "var_name": "stringBuilderInfo"}, {"original_string": "static ClassInfo bigIntegerClassInfo;", "modifier": "static", "type": "ClassInfo", "declarator": "bigIntegerClassInfo", "var_name": "bigIntegerClassInfo"}, {"original_string": "static ClassInfo dateClassInfo;", "modifier": "static", "type": "ClassInfo", "declarator": "dateClassInfo", "var_name": "dateClassInfo"}], "methods": [{"identifier": "ClassSchemaBuilder", "parameters": "()", "modifiers": "", "return": "", "signature": " ClassSchemaBuilder()", "full_signature": "  ClassSchemaBuilder()", "class_method_signature": "ClassSchemaBuilder.ClassSchemaBuilder()", "testcase": false, "constructor": true}, {"identifier": "registerClass", "parameters": "(Class<?> c, Set<String> ignoreFields)", "modifiers": "", "return": "void", "signature": "void registerClass(Class<?> c, Set<String> ignoreFields)", "full_signature": " void registerClass(Class<?> c, Set<String> ignoreFields)", "class_method_signature": "ClassSchemaBuilder.registerClass(Class<?> c, Set<String> ignoreFields)", "testcase": false, "constructor": false}, {"identifier": "createClassInfo", "parameters": "(Class<?> c)", "modifiers": "", "return": "ClassInfo", "signature": "ClassInfo createClassInfo(Class<?> c)", "full_signature": " ClassInfo createClassInfo(Class<?> c)", "class_method_signature": "ClassSchemaBuilder.createClassInfo(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "registerClass", "parameters": "(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "modifiers": "", "return": "void", "signature": "void registerClass(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "full_signature": " void registerClass(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "class_method_signature": "ClassSchemaBuilder.registerClass(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "testcase": false, "constructor": false}, {"identifier": "createClassInfo", "parameters": "(Class<?> c, Set<String> fieldNamesToIgnore, boolean withTransient)", "modifiers": "", "return": "ClassInfo", "signature": "ClassInfo createClassInfo(Class<?> c, Set<String> fieldNamesToIgnore, boolean withTransient)", "full_signature": " ClassInfo createClassInfo(Class<?> c, Set<String> fieldNamesToIgnore, boolean withTransient)", "class_method_signature": "ClassSchemaBuilder.createClassInfo(Class<?> c, Set<String> fieldNamesToIgnore, boolean withTransient)", "testcase": false, "constructor": false}, {"identifier": "valiadateClass", "parameters": "(Class<?> c)", "modifiers": "private", "return": "void", "signature": "void valiadateClass(Class<?> c)", "full_signature": "private void valiadateClass(Class<?> c)", "class_method_signature": "ClassSchemaBuilder.valiadateClass(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "mapFieldsToFieldInfo", "parameters": "(List<Field> fields)", "modifiers": "private", "return": "List<FieldInfo>", "signature": "List<FieldInfo> mapFieldsToFieldInfo(List<Field> fields)", "full_signature": "private List<FieldInfo> mapFieldsToFieldInfo(List<Field> fields)", "class_method_signature": "ClassSchemaBuilder.mapFieldsToFieldInfo(List<Field> fields)", "testcase": false, "constructor": false}, {"identifier": "createFieldInfo", "parameters": "(Field field)", "modifiers": "private", "return": "FieldInfo", "signature": "FieldInfo createFieldInfo(Field field)", "full_signature": "private FieldInfo createFieldInfo(Field field)", "class_method_signature": "ClassSchemaBuilder.createFieldInfo(Field field)", "testcase": false, "constructor": false}, {"identifier": "createNonVolatileField", "parameters": "(Field field)", "modifiers": "private", "return": "FieldInfo", "signature": "FieldInfo createNonVolatileField(Field field)", "full_signature": "private FieldInfo createNonVolatileField(Field field)", "class_method_signature": "ClassSchemaBuilder.createNonVolatileField(Field field)", "testcase": false, "constructor": false}, {"identifier": "createVolatileField", "parameters": "(Field field)", "modifiers": "private", "return": "FieldInfo", "signature": "FieldInfo createVolatileField(Field field)", "full_signature": "private FieldInfo createVolatileField(Field field)", "class_method_signature": "ClassSchemaBuilder.createVolatileField(Field field)", "testcase": false, "constructor": false}, {"identifier": "sortFieldOnOffset", "parameters": "(FieldInfo[] infos)", "modifiers": "private", "return": "void", "signature": "void sortFieldOnOffset(FieldInfo[] infos)", "full_signature": "private void sortFieldOnOffset(FieldInfo[] infos)", "class_method_signature": "ClassSchemaBuilder.sortFieldOnOffset(FieldInfo[] infos)", "testcase": false, "constructor": false}, {"identifier": "getFieldsFor", "parameters": "(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "modifiers": "private", "return": "List<Field>", "signature": "List<Field> getFieldsFor(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "full_signature": "private List<Field> getFieldsFor(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "class_method_signature": "ClassSchemaBuilder.getFieldsFor(Class<?> c, Set<String> ignoreFields, boolean withTransient)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsRecursiveFor", "parameters": "(Class<?> c)", "modifiers": "private", "return": "List<Field>", "signature": "List<Field> getAllFieldsRecursiveFor(Class<?> c)", "full_signature": "private List<Field> getAllFieldsRecursiveFor(Class<?> c)", "class_method_signature": "ClassSchemaBuilder.getAllFieldsRecursiveFor(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "mergeNonVolatilePrimitiveFields", "parameters": "(FieldInfo[] fields)", "modifiers": "private", "return": "FieldInfo[]", "signature": "FieldInfo[] mergeNonVolatilePrimitiveFields(FieldInfo[] fields)", "full_signature": "private FieldInfo[] mergeNonVolatilePrimitiveFields(FieldInfo[] fields)", "class_method_signature": "ClassSchemaBuilder.mergeNonVolatilePrimitiveFields(FieldInfo[] fields)", "testcase": false, "constructor": false}, {"identifier": "isNonVolatilePrimitive", "parameters": "(FieldInfo fieldInfo)", "modifiers": "private", "return": "boolean", "signature": "boolean isNonVolatilePrimitive(FieldInfo fieldInfo)", "full_signature": "private boolean isNonVolatilePrimitive(FieldInfo fieldInfo)", "class_method_signature": "ClassSchemaBuilder.isNonVolatilePrimitive(FieldInfo fieldInfo)", "testcase": false, "constructor": false}], "file": "blixtser-core/src/main/java/com/mojang/blixtser/core/ClassSchemaBuilder.java"}, "focal_method": {"identifier": "createClassInfo", "parameters": "(Class<?> c)", "modifiers": "", "return": "ClassInfo", "body": "ClassInfo createClassInfo(Class<?> c) {\n        return createClassInfo(c, Collections.<String>emptySet(), false);\n    }", "signature": "ClassInfo createClassInfo(Class<?> c)", "full_signature": " ClassInfo createClassInfo(Class<?> c)", "class_method_signature": "ClassSchemaBuilder.createClassInfo(Class<?> c)", "testcase": false, "constructor": false, "invocations": ["createClassInfo", "emptySet"]}, "repository": {"repo_id": 14104548, "url": "https://github.com/Mojang/blixtser", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 61, "size": 428, "license": "licensed"}}