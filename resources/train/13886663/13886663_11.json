{"test_class": {"identifier": "BasicReportGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BasicReportGeneratorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BasicReportGeneratorTest.class)", "var_name": "LOGGER"}, {"original_string": "private static FileEntry testEntry = null;", "modifier": "private static", "type": "FileEntry", "declarator": "testEntry = null", "var_name": "testEntry"}], "file": "carcv-webapp/src/test/java/org/carcv/web/reports/BasicReportGeneratorTest.java"}, "test_case": {"identifier": "testBuildPDFReport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildPDFReport() throws JRException {\n        URL testDir = getClass().getResource(\"/\");\n\n        File test_results_dir = new File(testDir.getPath() + \"/test_results/\");\n        if (!test_results_dir.exists() || !test_results_dir.isDirectory()) {\n            assertTrue(test_results_dir.mkdir());\n        }\n        LOGGER.info(\"OutDir: {}\", test_results_dir.getPath());\n\n        String filename = testDir.getPath() + \"/test_results/report\" + System.currentTimeMillis() + \".pdf\";\n\n        assertNotNull(testEntry.getCarImages().get(0).getFilepath());\n        assertTrue(Files.exists(testEntry.getCarImages().get(0).getFilepath()));\n        assertTrue(Files.isRegularFile(testEntry.getCarImages().get(0).getFilepath()));\n\n        TimeZone tz = TimeZone.getTimeZone(\"CET\");\n\n        BasicReportGenerator brg =\n                new BasicReportGenerator(testEntry, \"/reports/speed_report.jasper\", \"Myjava\", \"TestReport\",\n                        \"https://carcv-oskopek.rhcloud.com\", tz);\n\n        brg.exportFile(filename);\n    }", "signature": "void testBuildPDFReport()", "full_signature": "@Test public void testBuildPDFReport()", "class_method_signature": "BasicReportGeneratorTest.testBuildPDFReport()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "getPath", "exists", "isDirectory", "assertTrue", "mkdir", "info", "getPath", "getPath", "currentTimeMillis", "assertNotNull", "getFilepath", "get", "getCarImages", "assertTrue", "exists", "getFilepath", "get", "getCarImages", "assertTrue", "isRegularFile", "getFilepath", "get", "getCarImages", "getTimeZone", "exportFile"]}, "focal_class": {"identifier": "BasicReportGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JasperPrint filledReportPrint;", "modifier": "private", "type": "JasperPrint", "declarator": "filledReportPrint", "var_name": "filledReportPrint"}], "methods": [{"identifier": "BasicReportGenerator", "parameters": "(FileEntry e, String templateFilename, String reportBuilderLocation, String reportName,\n            String hostURL, TimeZone tz)", "modifiers": "public", "return": "", "signature": " BasicReportGenerator(FileEntry e, String templateFilename, String reportBuilderLocation, String reportName,\n            String hostURL, TimeZone tz)", "full_signature": "public  BasicReportGenerator(FileEntry e, String templateFilename, String reportBuilderLocation, String reportName,\n            String hostURL, TimeZone tz)", "class_method_signature": "BasicReportGenerator.BasicReportGenerator(FileEntry e, String templateFilename, String reportBuilderLocation, String reportName,\n            String hostURL, TimeZone tz)", "testcase": false, "constructor": true}, {"identifier": "exportFile", "parameters": "(String filename)", "modifiers": "public", "return": "void", "signature": "void exportFile(String filename)", "full_signature": "public void exportFile(String filename)", "class_method_signature": "BasicReportGenerator.exportFile(String filename)", "testcase": false, "constructor": false}, {"identifier": "exportStream", "parameters": "(String filename, OutputStream out)", "modifiers": "public", "return": "void", "signature": "void exportStream(String filename, OutputStream out)", "full_signature": "public void exportStream(String filename, OutputStream out)", "class_method_signature": "BasicReportGenerator.exportStream(String filename, OutputStream out)", "testcase": false, "constructor": false}], "file": "carcv-webapp/src/main/java/org/carcv/web/reports/BasicReportGenerator.java"}, "focal_method": {"identifier": "exportFile", "parameters": "(String filename)", "modifiers": "public", "return": "void", "body": "public void exportFile(String filename) throws JRException {\n        JRExporter exporter = new JRPdfExporter();\n\n        exporter.setParameter(JRExporterParameter.JASPER_PRINT, filledReportPrint);\n        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename);\n        exporter.setParameter(JRExporterParameter.CHARACTER_ENCODING, \"UTF-8\");\n\n        exporter.exportReport();\n    }", "signature": "void exportFile(String filename)", "full_signature": "public void exportFile(String filename)", "class_method_signature": "BasicReportGenerator.exportFile(String filename)", "testcase": false, "constructor": false, "invocations": ["setParameter", "setParameter", "setParameter", "exportReport"]}, "repository": {"repo_id": 13886663, "url": "https://github.com/oskopek/carcv", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 8, "size": 9700, "license": "licensed"}}