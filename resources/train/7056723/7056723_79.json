{"test_class": {"identifier": "AspectJWeaverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AspectJWeaver weaverAdapter;", "modifier": "private", "type": "AspectJWeaver", "declarator": "weaverAdapter", "var_name": "weaverAdapter"}, {"original_string": "private DynamicRuntimeWeavingAdaptor ajMocked;", "modifier": "private", "type": "DynamicRuntimeWeavingAdaptor", "declarator": "ajMocked", "var_name": "ajMocked"}], "file": "mock4aj-core/src/test/java/info/rubico/mock4aj/weavers/aspectj/AspectJWeaverTest.java"}, "test_case": {"identifier": "givenNonAspectClassWhenRegisterThenShouldThrowNotAnAspect", "parameters": "()", "modifiers": "@Test(expected = NotAnAspect.class) public", "return": "void", "body": "@Test(expected = NotAnAspect.class)\n    public void givenNonAspectClassWhenRegisterThenShouldThrowNotAnAspect() {\n        Class<?> nonAspectClass = Date.class;\n        givenAjWillThrowRuntimeExceptionOn(nonAspectClass);\n        givenAjWillReturnIsAspect(nonAspectClass, false);\n\n        weaverAdapter.registerAspect(nonAspectClass);\n    }", "signature": "void givenNonAspectClassWhenRegisterThenShouldThrowNotAnAspect()", "full_signature": "@Test(expected = NotAnAspect.class) public void givenNonAspectClassWhenRegisterThenShouldThrowNotAnAspect()", "class_method_signature": "AspectJWeaverTest.givenNonAspectClassWhenRegisterThenShouldThrowNotAnAspect()", "testcase": true, "constructor": false, "invocations": ["givenAjWillThrowRuntimeExceptionOn", "givenAjWillReturnIsAspect", "registerAspect"]}, "focal_class": {"identifier": "AspectJWeaver", "superclass": "", "interfaces": "implements Weaver", "fields": [{"original_string": "private final DynamicRuntimeWeavingAdaptor ajWeaver;", "modifier": "private final", "type": "DynamicRuntimeWeavingAdaptor", "declarator": "ajWeaver", "var_name": "ajWeaver"}, {"original_string": "private final Set<String> registeredAspects = new TreeSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "registeredAspects = new TreeSet<String>()", "var_name": "registeredAspects"}], "methods": [{"identifier": "AspectJWeaver", "parameters": "()", "modifiers": "public", "return": "", "signature": " AspectJWeaver()", "full_signature": "public  AspectJWeaver()", "class_method_signature": "AspectJWeaver.AspectJWeaver()", "testcase": false, "constructor": true}, {"identifier": "AspectJWeaver", "parameters": "(DynamicRuntimeWeavingAdaptor ajWeaver)", "modifiers": "public", "return": "", "signature": " AspectJWeaver(DynamicRuntimeWeavingAdaptor ajWeaver)", "full_signature": "public  AspectJWeaver(DynamicRuntimeWeavingAdaptor ajWeaver)", "class_method_signature": "AspectJWeaver.AspectJWeaver(DynamicRuntimeWeavingAdaptor ajWeaver)", "testcase": false, "constructor": true}, {"identifier": "registerAspect", "parameters": "(Class<?> aspect)", "modifiers": "public synchronized", "return": "void", "signature": "void registerAspect(Class<?> aspect)", "full_signature": "public synchronized void registerAspect(Class<?> aspect)", "class_method_signature": "AspectJWeaver.registerAspect(Class<?> aspect)", "testcase": false, "constructor": false}, {"identifier": "checkAspectIsConcrete", "parameters": "(Class<?> aspect)", "modifiers": "protected", "return": "void", "signature": "void checkAspectIsConcrete(Class<?> aspect)", "full_signature": "protected void checkAspectIsConcrete(Class<?> aspect)", "class_method_signature": "AspectJWeaver.checkAspectIsConcrete(Class<?> aspect)", "testcase": false, "constructor": false}, {"identifier": "registerToAspectJ", "parameters": "(Class<?> aspect)", "modifiers": "protected", "return": "void", "signature": "void registerToAspectJ(Class<?> aspect)", "full_signature": "protected void registerToAspectJ(Class<?> aspect)", "class_method_signature": "AspectJWeaver.registerToAspectJ(Class<?> aspect)", "testcase": false, "constructor": false}, {"identifier": "handleUnknownRegistrationError", "parameters": "(Class<?> clazz, Exception cause)", "modifiers": "protected", "return": "Mock4AjException", "signature": "Mock4AjException handleUnknownRegistrationError(Class<?> clazz, Exception cause)", "full_signature": "protected Mock4AjException handleUnknownRegistrationError(Class<?> clazz, Exception cause)", "class_method_signature": "AspectJWeaver.handleUnknownRegistrationError(Class<?> clazz, Exception cause)", "testcase": false, "constructor": false}, {"identifier": "unregisterAspect", "parameters": "(Class<?> aspect)", "modifiers": "public synchronized", "return": "void", "signature": "void unregisterAspect(Class<?> aspect)", "full_signature": "public synchronized void unregisterAspect(Class<?> aspect)", "class_method_signature": "AspectJWeaver.unregisterAspect(Class<?> aspect)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void reset()", "full_signature": "public synchronized void reset()", "class_method_signature": "AspectJWeaver.reset()", "testcase": false, "constructor": false}, {"identifier": "weaveClassBytes", "parameters": "(String className, byte[] bytes)", "modifiers": "public synchronized", "return": "byte[]", "signature": "byte[] weaveClassBytes(String className, byte[] bytes)", "full_signature": "public synchronized byte[] weaveClassBytes(String className, byte[] bytes)", "class_method_signature": "AspectJWeaver.weaveClassBytes(String className, byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "handleWeavingException", "parameters": "(String className, Exception cause)", "modifiers": "protected", "return": "WeavingError", "signature": "WeavingError handleWeavingException(String className, Exception cause)", "full_signature": "protected WeavingError handleWeavingException(String className, Exception cause)", "class_method_signature": "AspectJWeaver.handleWeavingException(String className, Exception cause)", "testcase": false, "constructor": false}], "file": "mock4aj-core/src/main/java/info/rubico/mock4aj/weavers/aspectj/AspectJWeaver.java"}, "focal_method": {"identifier": "registerAspect", "parameters": "(Class<?> aspect)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void registerAspect(Class<?> aspect) {\n        if (!registeredAspects.contains(aspect.getName())) {\n            checkAspectIsConcrete(aspect);\n            registerToAspectJ(aspect);\n            registeredAspects.add(aspect.getName());\n        }\n    }", "signature": "void registerAspect(Class<?> aspect)", "full_signature": "public synchronized void registerAspect(Class<?> aspect)", "class_method_signature": "AspectJWeaver.registerAspect(Class<?> aspect)", "testcase": false, "constructor": false, "invocations": ["contains", "getName", "checkAspectIsConcrete", "registerToAspectJ", "add", "getName"]}, "repository": {"repo_id": 7056723, "url": "https://github.com/mock4aj/mock4aj", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 476, "license": "licensed"}}