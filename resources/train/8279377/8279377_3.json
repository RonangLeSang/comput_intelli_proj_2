{"test_class": {"identifier": "DvUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "cds/cds-core/src/test/java/se/cambio/cds/util/DvUtilTest.java"}, "test_case": {"identifier": "shouldCalculateDurationAgainstDateTimeWithDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCalculateDurationAgainstDateTimeWithDouble() {\n        Double aDouble = DVUtil.calculateDurationAgainstDvTemporal(\"365.0,d\", new DvDateTime(\"2016-01-01T12:00:00\"), \"-\");\n        assertThat(aDouble, equalTo(3.1536E10));\n    }", "signature": "void shouldCalculateDurationAgainstDateTimeWithDouble()", "full_signature": "@Test public void shouldCalculateDurationAgainstDateTimeWithDouble()", "class_method_signature": "DvUtilTest.shouldCalculateDurationAgainstDateTimeWithDouble()", "testcase": true, "constructor": false, "invocations": ["calculateDurationAgainstDvTemporal", "assertThat", "equalTo"]}, "focal_class": {"identifier": "DVUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(DVUtil.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DVUtil.class)", "var_name": "logger"}], "methods": [{"identifier": "createDV", "parameters": "(\n            ElementInstance elementInstance, String rmName, String attributeName, Object value)", "modifiers": "public static", "return": "DataValue", "signature": "DataValue createDV(\n            ElementInstance elementInstance, String rmName, String attributeName, Object value)", "full_signature": "public static DataValue createDV(\n            ElementInstance elementInstance, String rmName, String attributeName, Object value)", "class_method_signature": "DVUtil.createDV(\n            ElementInstance elementInstance, String rmName, String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "equalDVs", "parameters": "(DataValue dv1, DataValue dv2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalDVs(DataValue dv1, DataValue dv2)", "full_signature": "public static boolean equalDVs(DataValue dv1, DataValue dv2)", "class_method_signature": "DVUtil.equalDVs(DataValue dv1, DataValue dv2)", "testcase": false, "constructor": false}, {"identifier": "equalDV", "parameters": "(boolean inPredicate, ElementInstance ei, DataValue dv2, boolean negated)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalDV(boolean inPredicate, ElementInstance ei, DataValue dv2, boolean negated)", "full_signature": "public static boolean equalDV(boolean inPredicate, ElementInstance ei, DataValue dv2, boolean negated)", "class_method_signature": "DVUtil.equalDV(boolean inPredicate, ElementInstance ei, DataValue dv2, boolean negated)", "testcase": false, "constructor": false}, {"identifier": "nullValueEquals", "parameters": "(DvCodedText nullFlavour, Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean nullValueEquals(DvCodedText nullFlavour, Object obj)", "full_signature": "public static boolean nullValueEquals(DvCodedText nullFlavour, Object obj)", "class_method_signature": "DVUtil.nullValueEquals(DvCodedText nullFlavour, Object obj)", "testcase": false, "constructor": false}, {"identifier": "isSubClassOf", "parameters": "(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            DataValue... dataValues)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean isSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            DataValue... dataValues)", "full_signature": "@Deprecated public static boolean isSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            DataValue... dataValues)", "class_method_signature": "DVUtil.isSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            DataValue... dataValues)", "testcase": false, "constructor": false}, {"identifier": "isSubClassOf", "parameters": "(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            String bindReference, DataValue... dataValues)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            String bindReference, DataValue... dataValues)", "full_signature": "public static boolean isSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            String bindReference, DataValue... dataValues)", "class_method_signature": "DVUtil.isSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            String bindReference, DataValue... dataValues)", "testcase": false, "constructor": false}, {"identifier": "isSubClassOf", "parameters": "(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubClassOf(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "full_signature": "public static boolean isSubClassOf(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "class_method_signature": "DVUtil.isSubClassOf(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "testcase": false, "constructor": false}, {"identifier": "isSubClassOfCached", "parameters": "(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            boolean negation, String bindReference, DataValue... dataValues)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubClassOfCached(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            boolean negation, String bindReference, DataValue... dataValues)", "full_signature": "public static boolean isSubClassOfCached(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            boolean negation, String bindReference, DataValue... dataValues)", "class_method_signature": "DVUtil.isSubClassOfCached(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap,\n            boolean negation, String bindReference, DataValue... dataValues)", "testcase": false, "constructor": false}, {"identifier": "getDataValuesKey", "parameters": "(DataValue[] dataValues, boolean negation)", "modifiers": "private static", "return": "String", "signature": "String getDataValuesKey(DataValue[] dataValues, boolean negation)", "full_signature": "private static String getDataValuesKey(DataValue[] dataValues, boolean negation)", "class_method_signature": "DVUtil.getDataValuesKey(DataValue[] dataValues, boolean negation)", "testcase": false, "constructor": false}, {"identifier": "appendCodedTextKey", "parameters": "(StringBuilder sb, DvCodedText codedText)", "modifiers": "private static", "return": "void", "signature": "void appendCodedTextKey(StringBuilder sb, DvCodedText codedText)", "full_signature": "private static void appendCodedTextKey(StringBuilder sb, DvCodedText codedText)", "class_method_signature": "DVUtil.appendCodedTextKey(StringBuilder sb, DvCodedText codedText)", "testcase": false, "constructor": false}, {"identifier": "getCodePhrase", "parameters": "(DataValue dv)", "modifiers": "private static", "return": "CodePhrase", "signature": "CodePhrase getCodePhrase(DataValue dv)", "full_signature": "private static CodePhrase getCodePhrase(DataValue dv)", "class_method_signature": "DVUtil.getCodePhrase(DataValue dv)", "testcase": false, "constructor": false}, {"identifier": "isNotSubClassOf", "parameters": "(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, DataValue... dataValues)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean isNotSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, DataValue... dataValues)", "full_signature": "@Deprecated public static boolean isNotSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, DataValue... dataValues)", "class_method_signature": "DVUtil.isNotSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, DataValue... dataValues)", "testcase": false, "constructor": false}, {"identifier": "isNotSubClassOf", "parameters": "(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, String bindReference, DataValue... dataValues)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, String bindReference, DataValue... dataValues)", "full_signature": "public static boolean isNotSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, String bindReference, DataValue... dataValues)", "class_method_signature": "DVUtil.isNotSubClassOf(\n            boolean inPredicate, ElementInstance ei, Map<ElementInstance, Map<String, Boolean>> bindingsMap, String bindReference, DataValue... dataValues)", "testcase": false, "constructor": false}, {"identifier": "isNotSubClassOf", "parameters": "(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotSubClassOf(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "full_signature": "public static boolean isNotSubClassOf(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "class_method_signature": "DVUtil.isNotSubClassOf(boolean inPredicate, ElementInstance ei, DataValue... dataValues)", "testcase": false, "constructor": false}, {"identifier": "compareDVs", "parameters": "(DataValue dv1, DataValue dv2)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) public static", "return": "int", "signature": "int compareDVs(DataValue dv1, DataValue dv2)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) public static int compareDVs(DataValue dv1, DataValue dv2)", "class_method_signature": "DVUtil.compareDVs(DataValue dv1, DataValue dv2)", "testcase": false, "constructor": false}, {"identifier": "compatibleComparison", "parameters": "(DataValue dv1, DataValue dv2)", "modifiers": "public static", "return": "boolean", "signature": "boolean compatibleComparison(DataValue dv1, DataValue dv2)", "full_signature": "public static boolean compatibleComparison(DataValue dv1, DataValue dv2)", "class_method_signature": "DVUtil.compatibleComparison(DataValue dv1, DataValue dv2)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double unroundedDouble, int precision)", "modifiers": "public static", "return": "double", "signature": "double round(double unroundedDouble, int precision)", "full_signature": "public static double round(double unroundedDouble, int precision)", "class_method_signature": "DVUtil.round(double unroundedDouble, int precision)", "testcase": false, "constructor": false}, {"identifier": "convertToExpression", "parameters": "(DataValue dv)", "modifiers": "public static", "return": "ConstantExpression", "signature": "ConstantExpression convertToExpression(DataValue dv)", "full_signature": "public static ConstantExpression convertToExpression(DataValue dv)", "class_method_signature": "DVUtil.convertToExpression(DataValue dv)", "testcase": false, "constructor": false}, {"identifier": "checkMaxMin", "parameters": "(DataValue originalDv, DataValue checkDv, String opSymbol, ArchetypeReference originalAr, ArchetypeReference checkAr)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkMaxMin(DataValue originalDv, DataValue checkDv, String opSymbol, ArchetypeReference originalAr, ArchetypeReference checkAr)", "full_signature": "public static boolean checkMaxMin(DataValue originalDv, DataValue checkDv, String opSymbol, ArchetypeReference originalAr, ArchetypeReference checkAr)", "class_method_signature": "DVUtil.checkMaxMin(DataValue originalDv, DataValue checkDv, String opSymbol, ArchetypeReference originalAr, ArchetypeReference checkAr)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(DataValue originalDv, DataValue checkDv)", "modifiers": "private static", "return": "int", "signature": "int compare(DataValue originalDv, DataValue checkDv)", "full_signature": "private static int compare(DataValue originalDv, DataValue checkDv)", "class_method_signature": "DVUtil.compare(DataValue originalDv, DataValue checkDv)", "testcase": false, "constructor": false}, {"identifier": "comparingGeneratedArWithRealAr", "parameters": "(ArchetypeReference originalAr, ArchetypeReference checkAr)", "modifiers": "private static", "return": "boolean", "signature": "boolean comparingGeneratedArWithRealAr(ArchetypeReference originalAr, ArchetypeReference checkAr)", "full_signature": "private static boolean comparingGeneratedArWithRealAr(ArchetypeReference originalAr, ArchetypeReference checkAr)", "class_method_signature": "DVUtil.comparingGeneratedArWithRealAr(ArchetypeReference originalAr, ArchetypeReference checkAr)", "testcase": false, "constructor": false}, {"identifier": "comparingRealArWithGeneratedAr", "parameters": "(ArchetypeReference originalAr, ArchetypeReference checkAr)", "modifiers": "private static", "return": "boolean", "signature": "boolean comparingRealArWithGeneratedAr(ArchetypeReference originalAr, ArchetypeReference checkAr)", "full_signature": "private static boolean comparingRealArWithGeneratedAr(ArchetypeReference originalAr, ArchetypeReference checkAr)", "class_method_signature": "DVUtil.comparingRealArWithGeneratedAr(ArchetypeReference originalAr, ArchetypeReference checkAr)", "testcase": false, "constructor": false}, {"identifier": "getDateTimeStrWithoutMillisAndTimezone", "parameters": "(String dateTimeDVStr)", "modifiers": "private static", "return": "String", "signature": "String getDateTimeStrWithoutMillisAndTimezone(String dateTimeDVStr)", "full_signature": "private static String getDateTimeStrWithoutMillisAndTimezone(String dateTimeDVStr)", "class_method_signature": "DVUtil.getDateTimeStrWithoutMillisAndTimezone(String dateTimeDVStr)", "testcase": false, "constructor": false}, {"identifier": "areDomainsCompatible", "parameters": "(String domain1, String domain2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areDomainsCompatible(String domain1, String domain2)", "full_signature": "private static boolean areDomainsCompatible(String domain1, String domain2)", "class_method_signature": "DVUtil.areDomainsCompatible(String domain1, String domain2)", "testcase": false, "constructor": false}, {"identifier": "calculateDuration", "parameters": "(String value, Object operationValue, String symbol)", "modifiers": "public static", "return": "Double", "signature": "Double calculateDuration(String value, Object operationValue, String symbol)", "full_signature": "public static Double calculateDuration(String value, Object operationValue, String symbol)", "class_method_signature": "DVUtil.calculateDuration(String value, Object operationValue, String symbol)", "testcase": false, "constructor": false}, {"identifier": "calculateDuration", "parameters": "(String value, String symbol)", "modifiers": "public static", "return": "Double", "signature": "Double calculateDuration(String value, String symbol)", "full_signature": "public static Double calculateDuration(String value, String symbol)", "class_method_signature": "DVUtil.calculateDuration(String value, String symbol)", "testcase": false, "constructor": false}, {"identifier": "calculateDurationAgainstNumber", "parameters": "(String value)", "modifiers": "private static", "return": "Double", "signature": "Double calculateDurationAgainstNumber(String value)", "full_signature": "private static Double calculateDurationAgainstNumber(String value)", "class_method_signature": "DVUtil.calculateDurationAgainstNumber(String value)", "testcase": false, "constructor": false}, {"identifier": "calculateDurationAgainstQuantity", "parameters": "(String value, DvQuantity quantity, String symbol)", "modifiers": "private static", "return": "Double", "signature": "Double calculateDurationAgainstQuantity(String value, DvQuantity quantity, String symbol)", "full_signature": "private static Double calculateDurationAgainstQuantity(String value, DvQuantity quantity, String symbol)", "class_method_signature": "DVUtil.calculateDurationAgainstQuantity(String value, DvQuantity quantity, String symbol)", "testcase": false, "constructor": false}, {"identifier": "getAmountInMillisFromQuantityString", "parameters": "(String value)", "modifiers": "static", "return": "double", "signature": "double getAmountInMillisFromQuantityString(String value)", "full_signature": "static double getAmountInMillisFromQuantityString(String value)", "class_method_signature": "DVUtil.getAmountInMillisFromQuantityString(String value)", "testcase": false, "constructor": false}, {"identifier": "calculateDurationAgainstStringDateTime", "parameters": "(String value, Object dateTimeString, String symbol)", "modifiers": "private static", "return": "Double", "signature": "Double calculateDurationAgainstStringDateTime(String value, Object dateTimeString, String symbol)", "full_signature": "private static Double calculateDurationAgainstStringDateTime(String value, Object dateTimeString, String symbol)", "class_method_signature": "DVUtil.calculateDurationAgainstStringDateTime(String value, Object dateTimeString, String symbol)", "testcase": false, "constructor": false}, {"identifier": "calculateDurationAgainstDvTemporal", "parameters": "(String value, DvTemporal operationTemporal, String symbol)", "modifiers": "static", "return": "Double", "signature": "Double calculateDurationAgainstDvTemporal(String value, DvTemporal operationTemporal, String symbol)", "full_signature": "static Double calculateDurationAgainstDvTemporal(String value, DvTemporal operationTemporal, String symbol)", "class_method_signature": "DVUtil.calculateDurationAgainstDvTemporal(String value, DvTemporal operationTemporal, String symbol)", "testcase": false, "constructor": false}, {"identifier": "calculateDurationAgainstDateTime", "parameters": "(String value, DateTime operationDateTime, String symbol)", "modifiers": "static", "return": "Double", "signature": "Double calculateDurationAgainstDateTime(String value, DateTime operationDateTime, String symbol)", "full_signature": "static Double calculateDurationAgainstDateTime(String value, DateTime operationDateTime, String symbol)", "class_method_signature": "DVUtil.calculateDurationAgainstDateTime(String value, DateTime operationDateTime, String symbol)", "testcase": false, "constructor": false}, {"identifier": "getDateTime", "parameters": "(DvTemporal operationDataValue, String value)", "modifiers": "static", "return": "DateTime", "signature": "DateTime getDateTime(DvTemporal operationDataValue, String value)", "full_signature": "static DateTime getDateTime(DvTemporal operationDataValue, String value)", "class_method_signature": "DVUtil.getDateTime(DvTemporal operationDataValue, String value)", "testcase": false, "constructor": false}, {"identifier": "ucumToMilliseconds", "parameters": "(DvQuantity quantity)", "modifiers": "public static", "return": "Long", "signature": "Long ucumToMilliseconds(DvQuantity quantity)", "full_signature": "public static Long ucumToMilliseconds(DvQuantity quantity)", "class_method_signature": "DVUtil.ucumToMilliseconds(DvQuantity quantity)", "testcase": false, "constructor": false}, {"identifier": "getMillisMultiplierFromUcum", "parameters": "(String units)", "modifiers": "private static", "return": "Double", "signature": "Double getMillisMultiplierFromUcum(String units)", "full_signature": "private static Double getMillisMultiplierFromUcum(String units)", "class_method_signature": "DVUtil.getMillisMultiplierFromUcum(String units)", "testcase": false, "constructor": false}, {"identifier": "ucumToCalendar", "parameters": "(String ucumUnits)", "modifiers": "private static", "return": "int", "signature": "int ucumToCalendar(String ucumUnits)", "full_signature": "private static int ucumToCalendar(String ucumUnits)", "class_method_signature": "DVUtil.ucumToCalendar(String ucumUnits)", "testcase": false, "constructor": false}, {"identifier": "getTerminologyService", "parameters": "()", "modifiers": "private static", "return": "TerminologyService", "signature": "TerminologyService getTerminologyService()", "full_signature": "private static TerminologyService getTerminologyService()", "class_method_signature": "DVUtil.getTerminologyService()", "testcase": false, "constructor": false}], "file": "cds/cds-core/src/main/java/se/cambio/cds/util/DVUtil.java"}, "focal_method": {"identifier": "calculateDurationAgainstDvTemporal", "parameters": "(String value, DvTemporal operationTemporal, String symbol)", "modifiers": "static", "return": "Double", "body": "static Double calculateDurationAgainstDvTemporal(String value, DvTemporal operationTemporal, String symbol) {\n        DateTime dateTime = getDateTime(operationTemporal, value);\n        return calculateDurationAgainstDateTime(value, dateTime, symbol);\n    }", "signature": "Double calculateDurationAgainstDvTemporal(String value, DvTemporal operationTemporal, String symbol)", "full_signature": "static Double calculateDurationAgainstDvTemporal(String value, DvTemporal operationTemporal, String symbol)", "class_method_signature": "DVUtil.calculateDurationAgainstDvTemporal(String value, DvTemporal operationTemporal, String symbol)", "testcase": false, "constructor": false, "invocations": ["getDateTime", "calculateDurationAgainstDateTime"]}, "repository": {"repo_id": 8279377, "url": "https://github.com/openEHR/gdl-tools", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 18, "size": 64884, "license": "licensed"}}