{"test_class": {"identifier": "BundleRequestServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger _log = LoggerFactory.getLogger(BundleRequestServiceImplTest.class);", "modifier": "private static", "type": "Logger", "declarator": "_log = LoggerFactory.getLogger(BundleRequestServiceImplTest.class)", "var_name": "_log"}, {"original_string": "private BundleRequestServiceImpl service;", "modifier": "private", "type": "BundleRequestServiceImpl", "declarator": "service", "var_name": "service"}], "file": "onebusaway-nyc-admin-webapp/src/test/java/org/onebusaway/nyc/admin/service/impl/BundleRequestServiceImplTest.java"}, "test_case": {"identifier": "testValidate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValidate() throws Exception {\n    BundleRequest req = new BundleRequest();\n    String key= \"2012Jan\";\n    //String key = \"m34\"; // use for faster testing\n    req.setBundleDirectory(key);\n    req.setBundleBuildName(\"test_0\");\n    _log.debug(\"calling validate for dir=\" + req.getBundleDirectory() + \" name=\" + req.getBundleBuildName());\n    BundleResponse res = service.validate(req);\n    assertFalse(res.isComplete());\n    \n    int count = 0;\n    while (count < 300 && !res.isComplete() && res.getException() == null) {\n      //_log.info(\"sleeping[\" + count + \"]...\");\n      Thread.sleep(10 * 1000);\n      count++;\n      // NOTE: this is optional to demonstrate retrieval service\n      _log.debug(\"calling lookup(local) for id=\" + res.getId());\n      res = service.lookupValidationRequest(res.getId());\n      assertNotNull(res);\n    }\n\n    if (res.getException() != null) {\n      _log.error(\"Failed with exception=\" + res.getException());\n    }\n    assertNull(res.getException());\n    assertTrue(res.isComplete());\n    assertNotNull(res.getValidationFiles());\n    assertEquals(2, res.getValidationFiles().size());\n  }", "signature": "void testValidate()", "full_signature": "@Test public void testValidate()", "class_method_signature": "BundleRequestServiceImplTest.testValidate()", "testcase": true, "constructor": false, "invocations": ["setBundleDirectory", "setBundleBuildName", "debug", "getBundleDirectory", "getBundleBuildName", "validate", "assertFalse", "isComplete", "isComplete", "getException", "sleep", "debug", "getId", "lookupValidationRequest", "getId", "assertNotNull", "getException", "error", "getException", "assertNull", "getException", "assertTrue", "isComplete", "assertNotNull", "getValidationFiles", "assertEquals", "size", "getValidationFiles"]}, "focal_class": {"identifier": "BundleRequestServiceImpl", "superclass": "", "interfaces": "implements BundleRequestService, ServletContextAware", "fields": [{"original_string": "private static final int WAIT_SECONDS = 120;", "modifier": "private static final", "type": "int", "declarator": "WAIT_SECONDS = 120", "var_name": "WAIT_SECONDS"}, {"original_string": "protected static Logger _log = LoggerFactory.getLogger(BundleRequestServiceImpl.class);", "modifier": "protected static", "type": "Logger", "declarator": "_log = LoggerFactory.getLogger(BundleRequestServiceImpl.class)", "var_name": "_log"}, {"original_string": "private ExecutorService _executorService = null;", "modifier": "private", "type": "ExecutorService", "declarator": "_executorService = null", "var_name": "_executorService"}, {"original_string": "private ConfigurationService configurationService;", "modifier": "private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "private BundleServerService _bundleServer;", "modifier": "private", "type": "BundleServerService", "declarator": "_bundleServer", "var_name": "_bundleServer"}, {"original_string": "private EmailService _emailService;", "modifier": "private", "type": "EmailService", "declarator": "_emailService", "var_name": "_emailService"}, {"original_string": "private Integer jobCounter = 0;", "modifier": "private", "type": "Integer", "declarator": "jobCounter = 0", "var_name": "jobCounter"}, {"original_string": "private String serverURL;", "modifier": "private", "type": "String", "declarator": "serverURL", "var_name": "serverURL"}, {"original_string": "private String _instanceId;", "modifier": "private", "type": "String", "declarator": "_instanceId", "var_name": "_instanceId"}, {"original_string": "private Map<String, BundleResponse> _validationMap = new HashMap<String, BundleResponse>();", "modifier": "private", "type": "Map<String, BundleResponse>", "declarator": "_validationMap = new HashMap<String, BundleResponse>()", "var_name": "_validationMap"}, {"original_string": "private Map<String, BundleBuildResponse> _buildMap = new HashMap<String, BundleBuildResponse>();", "modifier": "private", "type": "Map<String, BundleBuildResponse>", "declarator": "_buildMap = new HashMap<String, BundleBuildResponse>()", "var_name": "_buildMap"}], "methods": [{"identifier": "setEmailService", "parameters": "(EmailService service)", "modifiers": "@Autowired public", "return": "void", "signature": "void setEmailService(EmailService service)", "full_signature": "@Autowired public void setEmailService(EmailService service)", "class_method_signature": "BundleRequestServiceImpl.setEmailService(EmailService service)", "testcase": false, "constructor": false}, {"identifier": "setBundleServerService", "parameters": "(BundleServerService service)", "modifiers": "@Autowired public", "return": "void", "signature": "void setBundleServerService(BundleServerService service)", "full_signature": "@Autowired public void setBundleServerService(BundleServerService service)", "class_method_signature": "BundleRequestServiceImpl.setBundleServerService(BundleServerService service)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void setup()", "full_signature": "@PostConstruct public void setup()", "class_method_signature": "BundleRequestServiceImpl.setup()", "testcase": false, "constructor": false}, {"identifier": "setInstanceId", "parameters": "(String instanceId)", "modifiers": "public", "return": "void", "signature": "void setInstanceId(String instanceId)", "full_signature": "public void setInstanceId(String instanceId)", "class_method_signature": "BundleRequestServiceImpl.setInstanceId(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "getInstanceId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInstanceId()", "full_signature": "public String getInstanceId()", "class_method_signature": "BundleRequestServiceImpl.getInstanceId()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(BundleRequest bundleRequest)", "modifiers": "@Override /** * Make an asynchronous request to validate bundle(s). The BundleResponse object is * updated upon completion (successful or otherwise) of the validation process. */ public", "return": "BundleResponse", "signature": "BundleResponse validate(BundleRequest bundleRequest)", "full_signature": "@Override /** * Make an asynchronous request to validate bundle(s). The BundleResponse object is * updated upon completion (successful or otherwise) of the validation process. */ public BundleResponse validate(BundleRequest bundleRequest)", "class_method_signature": "BundleRequestServiceImpl.validate(BundleRequest bundleRequest)", "testcase": false, "constructor": false}, {"identifier": "lookupValidationRequest", "parameters": "(String id)", "modifiers": "@Override /** * Retrieve a BundleResponse object for the given id. */ public", "return": "BundleResponse", "signature": "BundleResponse lookupValidationRequest(String id)", "full_signature": "@Override /** * Retrieve a BundleResponse object for the given id. */ public BundleResponse lookupValidationRequest(String id)", "class_method_signature": "BundleRequestServiceImpl.lookupValidationRequest(String id)", "testcase": false, "constructor": false}, {"identifier": "lookupBuildRequest", "parameters": "(String id)", "modifiers": "@Override /** * Retrieve a BundleBuildResponse object for the given id. */ public", "return": "BundleBuildResponse", "signature": "BundleBuildResponse lookupBuildRequest(String id)", "full_signature": "@Override /** * Retrieve a BundleBuildResponse object for the given id. */ public BundleBuildResponse lookupBuildRequest(String id)", "class_method_signature": "BundleRequestServiceImpl.lookupBuildRequest(String id)", "testcase": false, "constructor": false}, {"identifier": "sendEmail", "parameters": "(BundleBuildRequest request, BundleBuildResponse response)", "modifiers": "public", "return": "void", "signature": "void sendEmail(BundleBuildRequest request, BundleBuildResponse response)", "full_signature": "public void sendEmail(BundleBuildRequest request, BundleBuildResponse response)", "class_method_signature": "BundleRequestServiceImpl.sendEmail(BundleBuildRequest request, BundleBuildResponse response)", "testcase": false, "constructor": false}, {"identifier": "buildBundleResultURL", "parameters": "(String id)", "modifiers": "@Override public", "return": "BundleBuildResponse", "signature": "BundleBuildResponse buildBundleResultURL(String id)", "full_signature": "@Override public BundleBuildResponse buildBundleResultURL(String id)", "class_method_signature": "BundleRequestServiceImpl.buildBundleResultURL(String id)", "testcase": false, "constructor": false}, {"identifier": "getResultLink", "parameters": "(String bundleName, String responseId, String bundleStartDate,\n\t\t  String bundleEndDate)", "modifiers": "private", "return": "String", "signature": "String getResultLink(String bundleName, String responseId, String bundleStartDate,\n\t\t  String bundleEndDate)", "full_signature": "private String getResultLink(String bundleName, String responseId, String bundleStartDate,\n\t\t  String bundleEndDate)", "class_method_signature": "BundleRequestServiceImpl.getResultLink(String bundleName, String responseId, String bundleStartDate,\n\t\t  String bundleEndDate)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override /** * cleanup resources. */ public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override /** * cleanup resources. */ public void cleanup()", "class_method_signature": "BundleRequestServiceImpl.cleanup()", "testcase": false, "constructor": false}, {"identifier": "getNextId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getNextId()", "full_signature": "private String getNextId()", "class_method_signature": "BundleRequestServiceImpl.getNextId()", "testcase": false, "constructor": false}, {"identifier": "inc", "parameters": "()", "modifiers": "private", "return": "Integer", "signature": "Integer inc()", "full_signature": "private Integer inc()", "class_method_signature": "BundleRequestServiceImpl.inc()", "testcase": false, "constructor": false}, {"identifier": "setServletContext", "parameters": "(ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "signature": "void setServletContext(ServletContext servletContext)", "full_signature": "@Override public void setServletContext(ServletContext servletContext)", "class_method_signature": "BundleRequestServiceImpl.setServletContext(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "getServerURL", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServerURL()", "full_signature": "public String getServerURL()", "class_method_signature": "BundleRequestServiceImpl.getServerURL()", "testcase": false, "constructor": false}, {"identifier": "setServerURL", "parameters": "(String url)", "modifiers": "public", "return": "void", "signature": "void setServerURL(String url)", "full_signature": "public void setServerURL(String url)", "class_method_signature": "BundleRequestServiceImpl.setServerURL(String url)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(BundleBuildRequest bundleRequest)", "modifiers": "@Override public", "return": "BundleBuildResponse", "signature": "BundleBuildResponse build(BundleBuildRequest bundleRequest)", "full_signature": "@Override public BundleBuildResponse build(BundleBuildRequest bundleRequest)", "class_method_signature": "BundleRequestServiceImpl.build(BundleBuildRequest bundleRequest)", "testcase": false, "constructor": false}, {"identifier": "makeRequest", "parameters": "(String instanceId, String apiCall, Object payload, Class<T> returnType)", "modifiers": "protected", "return": "T", "signature": "T makeRequest(String instanceId, String apiCall, Object payload, Class<T> returnType)", "full_signature": "protected T makeRequest(String instanceId, String apiCall, Object payload, Class<T> returnType)", "class_method_signature": "BundleRequestServiceImpl.makeRequest(String instanceId, String apiCall, Object payload, Class<T> returnType)", "testcase": false, "constructor": false}, {"identifier": "setConfigurationService", "parameters": "(ConfigurationService configurationService)", "modifiers": "@Autowired public", "return": "void", "signature": "void setConfigurationService(ConfigurationService configurationService)", "full_signature": "@Autowired public void setConfigurationService(ConfigurationService configurationService)", "class_method_signature": "BundleRequestServiceImpl.setConfigurationService(ConfigurationService configurationService)", "testcase": false, "constructor": false}], "file": "onebusaway-nyc-admin-webapp/src/main/java/org/onebusaway/nyc/admin/service/impl/BundleRequestServiceImpl.java"}, "focal_method": {"identifier": "validate", "parameters": "(BundleRequest bundleRequest)", "modifiers": "@Override /** * Make an asynchronous request to validate bundle(s). The BundleResponse object is * updated upon completion (successful or otherwise) of the validation process. */ public", "return": "BundleResponse", "body": "@Override\n  /**\n   * Make an asynchronous request to validate bundle(s).  The BundleResponse object is\n   * updated upon completion (successful or otherwise) of the validation process.\n   */\n  public BundleResponse validate(BundleRequest bundleRequest) {\n    String id = getNextId();\n    bundleRequest.setId(id);\n    BundleResponse bundleResponse = new BundleResponse(id);\n    bundleResponse.addStatusMessage(\"queueing...\");\n    _log.debug(\"validate id=\" + bundleResponse.getId());\n    _validationMap.put(bundleResponse.getId(), bundleResponse);\n    _executorService.execute(new ValidateThread(bundleRequest, bundleResponse));\n    return bundleResponse;\n  }", "signature": "BundleResponse validate(BundleRequest bundleRequest)", "full_signature": "@Override /** * Make an asynchronous request to validate bundle(s). The BundleResponse object is * updated upon completion (successful or otherwise) of the validation process. */ public BundleResponse validate(BundleRequest bundleRequest)", "class_method_signature": "BundleRequestServiceImpl.validate(BundleRequest bundleRequest)", "testcase": false, "constructor": false, "invocations": ["getNextId", "setId", "addStatusMessage", "debug", "getId", "put", "getId", "execute"]}, "repository": {"repo_id": 2259237, "url": "https://github.com/camsys/onebusaway-nyc", "stars": 38, "created": "8/24/2011 2:52:13 AM +00:00", "updates": "2019-12-21T00:37:49+00:00", "fork": "False", "license": "licensed"}}