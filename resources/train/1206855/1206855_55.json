{"test_class": {"identifier": "QuickGridViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "quickview-parent/quickview/src/test/java/org/wicketstuff/QuickGridViewTest.java"}, "test_case": {"identifier": "addRowAtStart_1", "parameters": "()", "modifiers": "@Test(groups = {\"wicketTests\"}) public", "return": "void", "body": "@Test(groups = {\"wicketTests\"})\n    public void addRowAtStart_1() {\n        IDataProvider provider = Mockito.mock(IDataProvider.class);\n        final Synchronizer synchronizer = Mockito.mock(Synchronizer.class);\n        final IRepeaterUtil util = Mockito.mock(IRepeaterUtil.class);\n        final String script = \"insert after\";\n        QuickGridView.RowItem row = new QuickGridView.RowItem(\"10\",9,null);\n        Component start = Mockito.mock(Component.class);\n        Component end = Mockito.mock(Component.class);\n        QuickGridView<Integer> grid = new QuickGridView<Integer>(\"grid\",\n                provider, start, end) {\n            @Override\n            protected void populate(CellItem<Integer> item) {\n            }\n\n            @Override\n            protected void populateEmptyItem(CellItem<Integer> item) {\n            }\n        };\n        final MarkupContainer parent = Mockito.mock(MarkupContainer.class);\n        QuickGridView spy = Mockito.spy(grid);\n        Mockito.doReturn(util).when(spy).getRepeaterUtil();\n        Mockito.doReturn(parent).when(spy)._getParent();\n        Mockito.doReturn(synchronizer).when(spy).getSynchronizer();\n        Mockito.when(util.prepend(row, parent, start, end)).thenReturn(script);\n        Mockito.when(synchronizer.isRequestHandlerAjaxRequestTarget()).thenReturn(true);\n        spy.addRowAtStart(row);\n        Mockito.doReturn(util).when(spy).getRepeaterUtil();\n        Mockito.verify(spy).simpleAdd(row);\n        Mockito.verify(synchronizer).prependScript(script);\n        Mockito.verify(synchronizer).add(row);\n        Mockito.verify(synchronizer, Mockito.never()).submit();\n        Assert.assertTrue(spy.getAddAtStartStore().contains(row.getId()));\n\n    }", "signature": "void addRowAtStart_1()", "full_signature": "@Test(groups = {\"wicketTests\"}) public void addRowAtStart_1()", "class_method_signature": "QuickGridViewTest.addRowAtStart_1()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "spy", "getRepeaterUtil", "when", "doReturn", "_getParent", "when", "doReturn", "getSynchronizer", "when", "doReturn", "thenReturn", "when", "prepend", "thenReturn", "when", "isRequestHandlerAjaxRequestTarget", "addRowAtStart", "getRepeaterUtil", "when", "doReturn", "simpleAdd", "verify", "prependScript", "verify", "add", "verify", "submit", "verify", "never", "assertTrue", "contains", "getAddAtStartStore", "getId"]}, "focal_class": {"identifier": "QuickGridView", "superclass": "extends QuickViewBase<T>", "interfaces": "", "fields": [{"original_string": "public static final String COLUMNS_REPEATER_ID = \"cols\";", "modifier": "public static final", "type": "String", "declarator": "COLUMNS_REPEATER_ID = \"cols\"", "var_name": "COLUMNS_REPEATER_ID"}, {"original_string": "private int columns = 1;", "modifier": "private", "type": "int", "declarator": "columns = 1", "var_name": "columns"}, {"original_string": "private int rows = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "rows = Integer.MAX_VALUE", "var_name": "rows"}], "methods": [{"identifier": "QuickGridView", "parameters": "(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy)", "modifiers": "public", "return": "", "signature": " QuickGridView(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy)", "full_signature": "public  QuickGridView(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy)", "class_method_signature": "QuickGridView.QuickGridView(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy)", "testcase": false, "constructor": true}, {"identifier": "QuickGridView", "parameters": "(String id, IDataProvider<T> dataProvider)", "modifiers": "public", "return": "", "signature": " QuickGridView(String id, IDataProvider<T> dataProvider)", "full_signature": "public  QuickGridView(String id, IDataProvider<T> dataProvider)", "class_method_signature": "QuickGridView.QuickGridView(String id, IDataProvider<T> dataProvider)", "testcase": false, "constructor": true}, {"identifier": "QuickGridView", "parameters": "(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy, Component start, Component end)", "modifiers": "public", "return": "", "signature": " QuickGridView(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy, Component start, Component end)", "full_signature": "public  QuickGridView(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy, Component start, Component end)", "class_method_signature": "QuickGridView.QuickGridView(String id, IDataProvider<T> dataProvider, IQuickReuseStrategy reuseStrategy, Component start, Component end)", "testcase": false, "constructor": true}, {"identifier": "QuickGridView", "parameters": "(String id, IDataProvider<T> dataProvider, Component start, Component end)", "modifiers": "public", "return": "", "signature": " QuickGridView(String id, IDataProvider<T> dataProvider, Component start, Component end)", "full_signature": "public  QuickGridView(String id, IDataProvider<T> dataProvider, Component start, Component end)", "class_method_signature": "QuickGridView.QuickGridView(String id, IDataProvider<T> dataProvider, Component start, Component end)", "testcase": false, "constructor": true}, {"identifier": "getColumns", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumns()", "full_signature": "public int getColumns()", "class_method_signature": "QuickGridView.getColumns()", "testcase": false, "constructor": false}, {"identifier": "setColumns", "parameters": "(int cols)", "modifiers": "public", "return": "QuickGridView<T>", "signature": "QuickGridView<T> setColumns(int cols)", "full_signature": "public QuickGridView<T> setColumns(int cols)", "class_method_signature": "QuickGridView.setColumns(int cols)", "testcase": false, "constructor": false}, {"identifier": "updateItemsPerPage", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateItemsPerPage()", "full_signature": "protected void updateItemsPerPage()", "class_method_signature": "QuickGridView.updateItemsPerPage()", "testcase": false, "constructor": false}, {"identifier": "getRows", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRows()", "full_signature": "public int getRows()", "class_method_signature": "QuickGridView.getRows()", "testcase": false, "constructor": false}, {"identifier": "setRows", "parameters": "(int rows)", "modifiers": "public", "return": "QuickGridView<T>", "signature": "QuickGridView<T> setRows(int rows)", "full_signature": "public QuickGridView<T> setRows(int rows)", "class_method_signature": "QuickGridView.setRows(int rows)", "testcase": false, "constructor": false}, {"identifier": "factory", "parameters": "()", "modifiers": "@Override public", "return": "IItemFactory<T>", "signature": "IItemFactory<T> factory()", "full_signature": "@Override public IItemFactory<T> factory()", "class_method_signature": "QuickGridView.factory()", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(Item<T> item)", "modifiers": "protected final", "return": "void", "signature": "void populate(Item<T> item)", "full_signature": "protected final void populate(Item<T> item)", "class_method_signature": "QuickGridView.populate(Item<T> item)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(CellItem<T> item)", "modifiers": "protected abstract", "return": "void", "signature": "void populate(CellItem<T> item)", "full_signature": "protected abstract void populate(CellItem<T> item)", "class_method_signature": "QuickGridView.populate(CellItem<T> item)", "testcase": false, "constructor": false}, {"identifier": "populateEmptyItem", "parameters": "(CellItem<T> item)", "modifiers": "abstract protected", "return": "void", "signature": "void populateEmptyItem(CellItem<T> item)", "full_signature": "abstract protected void populateEmptyItem(CellItem<T> item)", "class_method_signature": "QuickGridView.populateEmptyItem(CellItem<T> item)", "testcase": false, "constructor": false}, {"identifier": "addRowAtStart", "parameters": "(RowItem<T> rowItem)", "modifiers": "public", "return": "QuickGridView<T>", "signature": "QuickGridView<T> addRowAtStart(RowItem<T> rowItem)", "full_signature": "public QuickGridView<T> addRowAtStart(RowItem<T> rowItem)", "class_method_signature": "QuickGridView.addRowAtStart(RowItem<T> rowItem)", "testcase": false, "constructor": false}, {"identifier": "addRow", "parameters": "(RowItem<T> rowItem)", "modifiers": "public", "return": "QuickGridView<T>", "signature": "QuickGridView<T> addRow(RowItem<T> rowItem)", "full_signature": "public QuickGridView<T> addRow(RowItem<T> rowItem)", "class_method_signature": "QuickGridView.addRow(RowItem<T> rowItem)", "testcase": false, "constructor": false}, {"identifier": "addRows", "parameters": "(Iterator<? extends T> iterator)", "modifiers": "public", "return": "QuickGridView<T>", "signature": "QuickGridView<T> addRows(Iterator<? extends T> iterator)", "full_signature": "public QuickGridView<T> addRows(Iterator<? extends T> iterator)", "class_method_signature": "QuickGridView.addRows(Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "addRowsAtStart", "parameters": "(Iterator<? extends T> iterator)", "modifiers": "public", "return": "QuickGridView<T>", "signature": "QuickGridView<T> addRowsAtStart(Iterator<? extends T> iterator)", "full_signature": "public QuickGridView<T> addRowsAtStart(Iterator<? extends T> iterator)", "class_method_signature": "QuickGridView.addRowsAtStart(Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "removeRow", "parameters": "(RowItem<T> rowItem)", "modifiers": "public", "return": "void", "signature": "void removeRow(RowItem<T> rowItem)", "full_signature": "public void removeRow(RowItem<T> rowItem)", "class_method_signature": "QuickGridView.removeRow(RowItem<T> rowItem)", "testcase": false, "constructor": false}, {"identifier": "simpleAddRow", "parameters": "(Component... components)", "modifiers": "public", "return": "MarkupContainer", "signature": "MarkupContainer simpleAddRow(Component... components)", "full_signature": "public MarkupContainer simpleAddRow(Component... components)", "class_method_signature": "QuickGridView.simpleAddRow(Component... components)", "testcase": false, "constructor": false}, {"identifier": "simpleRemoveRow", "parameters": "(Component c)", "modifiers": "public", "return": "MarkupContainer", "signature": "MarkupContainer simpleRemoveRow(Component c)", "full_signature": "public MarkupContainer simpleRemoveRow(Component c)", "class_method_signature": "QuickGridView.simpleRemoveRow(Component c)", "testcase": false, "constructor": false}, {"identifier": "simpleRemoveAllRows", "parameters": "()", "modifiers": "public", "return": "MarkupContainer", "signature": "MarkupContainer simpleRemoveAllRows()", "full_signature": "public MarkupContainer simpleRemoveAllRows()", "class_method_signature": "QuickGridView.simpleRemoveAllRows()", "testcase": false, "constructor": false}, {"identifier": "buildItems", "parameters": "(final int index, Iterator<? extends T> iterator)", "modifiers": "@Override protected", "return": "Iterator<Item<T>>", "signature": "Iterator<Item<T>> buildItems(final int index, Iterator<? extends T> iterator)", "full_signature": "@Override protected Iterator<Item<T>> buildItems(final int index, Iterator<? extends T> iterator)", "class_method_signature": "QuickGridView.buildItems(final int index, Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "buildRows", "parameters": "(Iterator<? extends T> iterator)", "modifiers": "public", "return": "Iterator<RowItem<T>>", "signature": "Iterator<RowItem<T>> buildRows(Iterator<? extends T> iterator)", "full_signature": "public Iterator<RowItem<T>> buildRows(Iterator<? extends T> iterator)", "class_method_signature": "QuickGridView.buildRows(Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "createChildren", "parameters": "(Iterator<Item<T>> itemIterator)", "modifiers": "@Override public", "return": "void", "signature": "void createChildren(Iterator<Item<T>> itemIterator)", "full_signature": "@Override public void createChildren(Iterator<Item<T>> itemIterator)", "class_method_signature": "QuickGridView.createChildren(Iterator<Item<T>> itemIterator)", "testcase": false, "constructor": false}, {"identifier": "buildRows", "parameters": "(final int rowIndex, Iterator<CellItem<T>> iterator)", "modifiers": "protected", "return": "Iterator<RowItem<T>>", "signature": "Iterator<RowItem<T>> buildRows(final int rowIndex, Iterator<CellItem<T>> iterator)", "full_signature": "protected Iterator<RowItem<T>> buildRows(final int rowIndex, Iterator<CellItem<T>> iterator)", "class_method_signature": "QuickGridView.buildRows(final int rowIndex, Iterator<CellItem<T>> iterator)", "testcase": false, "constructor": false}, {"identifier": "buildCells", "parameters": "(final int index, Iterator<? extends T> iterator)", "modifiers": "protected", "return": "Iterator<CellItem<T>>", "signature": "Iterator<CellItem<T>> buildCells(final int index, Iterator<? extends T> iterator)", "full_signature": "protected Iterator<CellItem<T>> buildCells(final int index, Iterator<? extends T> iterator)", "class_method_signature": "QuickGridView.buildCells(final int index, Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "addItemsForPage", "parameters": "(long page)", "modifiers": "@Override public", "return": "List<Item<T>>", "signature": "List<Item<T>> addItemsForPage(long page)", "full_signature": "@Override public List<Item<T>> addItemsForPage(long page)", "class_method_signature": "QuickGridView.addItemsForPage(long page)", "testcase": false, "constructor": false}, {"identifier": "gridSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int gridSize()", "full_signature": "public int gridSize()", "class_method_signature": "QuickGridView.gridSize()", "testcase": false, "constructor": false}, {"identifier": "newRowItem", "parameters": "(String id, int index)", "modifiers": "protected", "return": "RowItem<T>", "signature": "RowItem<T> newRowItem(String id, int index)", "full_signature": "protected RowItem<T> newRowItem(String id, int index)", "class_method_signature": "QuickGridView.newRowItem(String id, int index)", "testcase": false, "constructor": false}, {"identifier": "buildCellItem", "parameters": "(String id, int index, T object)", "modifiers": "public", "return": "CellItem<T>", "signature": "CellItem<T> buildCellItem(String id, int index, T object)", "full_signature": "public CellItem<T> buildCellItem(String id, int index, T object)", "class_method_signature": "QuickGridView.buildCellItem(String id, int index, T object)", "testcase": false, "constructor": false}, {"identifier": "buildCellItem", "parameters": "(String id, int index, IModel<T> model)", "modifiers": "protected", "return": "CellItem<T>", "signature": "CellItem<T> buildCellItem(String id, int index, IModel<T> model)", "full_signature": "protected CellItem<T> buildCellItem(String id, int index, IModel<T> model)", "class_method_signature": "QuickGridView.buildCellItem(String id, int index, IModel<T> model)", "testcase": false, "constructor": false}, {"identifier": "buildEmptyCellItem", "parameters": "(int index)", "modifiers": "public", "return": "CellItem<T>", "signature": "CellItem<T> buildEmptyCellItem(int index)", "full_signature": "public CellItem<T> buildEmptyCellItem(int index)", "class_method_signature": "QuickGridView.buildEmptyCellItem(int index)", "testcase": false, "constructor": false}, {"identifier": "buildEmptyCellItem", "parameters": "(String id, int index)", "modifiers": "public", "return": "CellItem<T>", "signature": "CellItem<T> buildEmptyCellItem(String id, int index)", "full_signature": "public CellItem<T> buildEmptyCellItem(String id, int index)", "class_method_signature": "QuickGridView.buildEmptyCellItem(String id, int index)", "testcase": false, "constructor": false}, {"identifier": "buildRowItem", "parameters": "(String id, int index)", "modifiers": "public", "return": "RowItem", "signature": "RowItem buildRowItem(String id, int index)", "full_signature": "public RowItem buildRowItem(String id, int index)", "class_method_signature": "QuickGridView.buildRowItem(String id, int index)", "testcase": false, "constructor": false}, {"identifier": "buildRowItem", "parameters": "()", "modifiers": "public", "return": "RowItem", "signature": "RowItem buildRowItem()", "full_signature": "public RowItem buildRowItem()", "class_method_signature": "QuickGridView.buildRowItem()", "testcase": false, "constructor": false}, {"identifier": "rows", "parameters": "()", "modifiers": "public", "return": "Iterator<RowItem<T>>", "signature": "Iterator<RowItem<T>> rows()", "full_signature": "public Iterator<RowItem<T>> rows()", "class_method_signature": "QuickGridView.rows()", "testcase": false, "constructor": false}, {"identifier": "cells", "parameters": "()", "modifiers": "public", "return": "Iterator<CellItem<T>>", "signature": "Iterator<CellItem<T>> cells()", "full_signature": "public Iterator<CellItem<T>> cells()", "class_method_signature": "QuickGridView.cells()", "testcase": false, "constructor": false}, {"identifier": "newCellItem", "parameters": "(String id, int index, IModel<T> model)", "modifiers": "protected", "return": "CellItem<T>", "signature": "CellItem<T> newCellItem(String id, int index, IModel<T> model)", "full_signature": "protected CellItem<T> newCellItem(String id, int index, IModel<T> model)", "class_method_signature": "QuickGridView.newCellItem(String id, int index, IModel<T> model)", "testcase": false, "constructor": false}, {"identifier": "buildCellItem", "parameters": "(int index, IModel<T> model)", "modifiers": "public", "return": "CellItem<T>", "signature": "CellItem<T> buildCellItem(int index, IModel<T> model)", "full_signature": "public CellItem<T> buildCellItem(int index, IModel<T> model)", "class_method_signature": "QuickGridView.buildCellItem(int index, IModel<T> model)", "testcase": false, "constructor": false}, {"identifier": "newEmptyCellItem", "parameters": "(String id, int index)", "modifiers": "public", "return": "CellItem<T>", "signature": "CellItem<T> newEmptyCellItem(String id, int index)", "full_signature": "public CellItem<T> newEmptyCellItem(String id, int index)", "class_method_signature": "QuickGridView.newEmptyCellItem(String id, int index)", "testcase": false, "constructor": false}], "file": "quickview-parent/quickview/src/main/java/org/wicketstuff/QuickGridView.java"}, "focal_method": {"identifier": "addRowAtStart", "parameters": "(RowItem<T> rowItem)", "modifiers": "public", "return": "QuickGridView<T>", "body": "public QuickGridView<T> addRowAtStart(RowItem<T> rowItem) {\n        Args.notNull(rowItem, \"rowItem can't be null\");\n        initializeAddAtStartStoreIfRequired();\n        getAddAtStartStore().add(rowItem);\n        simpleAddRow(rowItem);\n        Synchronizer synchronizer = getSynchronizer();\n        if (synchronizer == null) {\n            return this;\n        }\n        String call = getRepeaterUtil().prepend(rowItem, _getParent(), getStart(), getEnd());\n        synchronizer.prependScript(call);\n        synchronizer.add(rowItem);\n        //\n        //requestHandler not AjaxRequestTarget\n        //\n        if (!synchronizer.isRequestHandlerAjaxRequestTarget()) {\n            synchronizer.submit();\n        }\n        return this;\n    }", "signature": "QuickGridView<T> addRowAtStart(RowItem<T> rowItem)", "full_signature": "public QuickGridView<T> addRowAtStart(RowItem<T> rowItem)", "class_method_signature": "QuickGridView.addRowAtStart(RowItem<T> rowItem)", "testcase": false, "constructor": false, "invocations": ["notNull", "initializeAddAtStartStoreIfRequired", "add", "getAddAtStartStore", "simpleAddRow", "getSynchronizer", "prepend", "getRepeaterUtil", "_getParent", "getStart", "getEnd", "prependScript", "add", "isRequestHandlerAjaxRequestTarget", "submit"]}, "repository": {"repo_id": 1206855, "url": "https://github.com/wicketstuff/core", "language": "Java", "is_fork": false, "fork_count": 309, "stargazer_count": 324, "size": 64476, "license": "licensed"}}