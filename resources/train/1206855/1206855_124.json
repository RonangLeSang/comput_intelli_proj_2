{"test_class": {"identifier": "AnnotationsShiroAuthorizationStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Action RENDER = new Action(Action.RENDER);", "modifier": "private static final", "type": "Action", "declarator": "RENDER = new Action(Action.RENDER)", "var_name": "RENDER"}, {"original_string": "private static final Action ENABLE = new Action(Action.ENABLE);", "modifier": "private static final", "type": "Action", "declarator": "ENABLE = new Action(Action.ENABLE)", "var_name": "ENABLE"}, {"original_string": "private ThreadState threadSubject;", "modifier": "private", "type": "ThreadState", "declarator": "threadSubject", "var_name": "threadSubject"}, {"original_string": "private Subject subject;", "modifier": "private", "type": "Subject", "declarator": "subject", "var_name": "subject"}, {"original_string": "private Boolean isLoggedIn;", "modifier": "private", "type": "Boolean", "declarator": "isLoggedIn", "var_name": "isLoggedIn"}, {"original_string": "private Boolean isAuthenticated;", "modifier": "private", "type": "Boolean", "declarator": "isAuthenticated", "var_name": "isAuthenticated"}, {"original_string": "private String persmission;", "modifier": "private", "type": "String", "declarator": "persmission", "var_name": "persmission"}, {"original_string": "private String role;", "modifier": "private", "type": "String", "declarator": "role", "var_name": "role"}, {"original_string": "private AnnotationsShiroAuthorizationStrategy underTest;", "modifier": "private", "type": "AnnotationsShiroAuthorizationStrategy", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private static WicketTester tester;", "modifier": "private static", "type": "WicketTester", "declarator": "tester", "var_name": "tester"}], "file": "shiro-security/wicket-shiro/src/test/java/org/wicketstuff/shiro/annotation/AnnotationsShiroAuthorizationStrategyTest.java"}, "test_case": {"identifier": "checkEnableForRoleNotPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkEnableForRoleNotPresent() {\n        role = \"USER\";\n        assertFalse(underTest.isActionAuthorized(new EnableWhen.SubjectHasRole(), ENABLE));\n    }", "signature": "void checkEnableForRoleNotPresent()", "full_signature": "@Test public void checkEnableForRoleNotPresent()", "class_method_signature": "AnnotationsShiroAuthorizationStrategyTest.checkEnableForRoleNotPresent()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isActionAuthorized"]}, "focal_class": {"identifier": "AnnotationsShiroAuthorizationStrategy", "superclass": "", "interfaces": "implements IAuthorizationStrategy", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AnnotationsShiroAuthorizationStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AnnotationsShiroAuthorizationStrategy.class)", "var_name": "LOG"}], "methods": [{"identifier": "checkInvalidInstantiation", "parameters": "(final Annotation[] annotations,\n\t\tfinal ShiroAction action)", "modifiers": "protected", "return": "ShiroSecurityConstraint", "signature": "ShiroSecurityConstraint checkInvalidInstantiation(final Annotation[] annotations,\n\t\tfinal ShiroAction action)", "full_signature": "protected ShiroSecurityConstraint checkInvalidInstantiation(final Annotation[] annotations,\n\t\tfinal ShiroAction action)", "class_method_signature": "AnnotationsShiroAuthorizationStrategy.checkInvalidInstantiation(final Annotation[] annotations,\n\t\tfinal ShiroAction action)", "testcase": false, "constructor": false}, {"identifier": "checkInvalidInstantiation", "parameters": "(\n\t\tfinal Class<T> componentClass)", "modifiers": "public", "return": "ShiroSecurityConstraint", "signature": "ShiroSecurityConstraint checkInvalidInstantiation(\n\t\tfinal Class<T> componentClass)", "full_signature": "public ShiroSecurityConstraint checkInvalidInstantiation(\n\t\tfinal Class<T> componentClass)", "class_method_signature": "AnnotationsShiroAuthorizationStrategy.checkInvalidInstantiation(\n\t\tfinal Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "isActionAuthorized", "parameters": "(final Component component, final Action action)", "modifiers": "public", "return": "boolean", "signature": "boolean isActionAuthorized(final Component component, final Action action)", "full_signature": "public boolean isActionAuthorized(final Component component, final Action action)", "class_method_signature": "AnnotationsShiroAuthorizationStrategy.isActionAuthorized(final Component component, final Action action)", "testcase": false, "constructor": false}, {"identifier": "isResourceAuthorized", "parameters": "(IResource resource, PageParameters parameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isResourceAuthorized(IResource resource, PageParameters parameters)", "full_signature": "@Override public boolean isResourceAuthorized(IResource resource, PageParameters parameters)", "class_method_signature": "AnnotationsShiroAuthorizationStrategy.isResourceAuthorized(IResource resource, PageParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "isInstantiationAuthorized", "parameters": "(\n\t\tfinal Class<T> componentClass)", "modifiers": "public", "return": "boolean", "signature": "boolean isInstantiationAuthorized(\n\t\tfinal Class<T> componentClass)", "full_signature": "public boolean isInstantiationAuthorized(\n\t\tfinal Class<T> componentClass)", "class_method_signature": "AnnotationsShiroAuthorizationStrategy.isInstantiationAuthorized(\n\t\tfinal Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "findShiroSecurityConstraintAnnotations", "parameters": "(Annotation[] componentClassAnnotations)", "modifiers": "private", "return": "ShiroSecurityConstraint[]", "signature": "ShiroSecurityConstraint[] findShiroSecurityConstraintAnnotations(Annotation[] componentClassAnnotations)", "full_signature": "private ShiroSecurityConstraint[] findShiroSecurityConstraintAnnotations(Annotation[] componentClassAnnotations)", "class_method_signature": "AnnotationsShiroAuthorizationStrategy.findShiroSecurityConstraintAnnotations(Annotation[] componentClassAnnotations)", "testcase": false, "constructor": false}], "file": "shiro-security/wicket-shiro/src/main/java/org/wicketstuff/shiro/annotation/AnnotationsShiroAuthorizationStrategy.java"}, "focal_method": {"identifier": "isActionAuthorized", "parameters": "(final Component component, final Action action)", "modifiers": "public", "return": "boolean", "body": "public boolean isActionAuthorized(final Component component, final Action action)\n\t{\n\n\t\tfinal ShiroAction _action = action.getName().equals(Action.RENDER) ? ShiroAction.RENDER\n\t\t\t: ShiroAction.ENABLE;\n\n\t\tfinal Class<? extends Component> clazz = component.getClass();\n\t\tAnnotation[] componentClassAnnotations = clazz.getAnnotations();\n\t\tShiroSecurityConstraint fail = checkInvalidInstantiation(\n\t\t\t\tfindShiroSecurityConstraintAnnotations(componentClassAnnotations), _action );\n\t\tif (fail == null)\n\t\t{\n\t\t\t//TODO: Allow ShiroSecurityConstraint annotations on packages OR remove this check as the annotation is\n\t\t\t// currently only allowed on types\n\t\t\tAnnotation[] packageAnnotations = clazz.getPackage().getAnnotations();\n\t\t\tfail = checkInvalidInstantiation(findShiroSecurityConstraintAnnotations(packageAnnotations), _action);\n\t\t}\n\t\treturn fail == null;\n\t}", "signature": "boolean isActionAuthorized(final Component component, final Action action)", "full_signature": "public boolean isActionAuthorized(final Component component, final Action action)", "class_method_signature": "AnnotationsShiroAuthorizationStrategy.isActionAuthorized(final Component component, final Action action)", "testcase": false, "constructor": false, "invocations": ["equals", "getName", "getClass", "getAnnotations", "checkInvalidInstantiation", "findShiroSecurityConstraintAnnotations", "getAnnotations", "getPackage", "checkInvalidInstantiation", "findShiroSecurityConstraintAnnotations"]}, "repository": {"repo_id": 1206855, "url": "https://github.com/wicketstuff/core", "language": "Java", "is_fork": false, "fork_count": 309, "stargazer_count": 324, "size": 64476, "license": "licensed"}}