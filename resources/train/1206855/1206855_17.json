{"test_class": {"identifier": "SimilarNodeTreeTransformatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "serializer-common/src/test/java/org/wicketstuff/pageserializer/common/analyze/report/SimilarNodeTreeTransformatorTest.java"}, "test_case": {"identifier": "secondNodeHasMoreChilds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void secondNodeHasMoreChilds() throws IOException {\n\t\tIReportOutput reportOutput=new LoggerReportOutput();\n\n\t\tISerializedObjectTree source = Trees.fromResource(getClass(), \"nodeChildSize\");\n\t\tassertEquals(\"asSample\", source.label());\n\t\tnew TreeSizeReport(reportOutput).process(source);\n\t\tISerializedObjectTree result = SimilarNodeTreeTransformator.transformTree(source);\n\t\tnew TreeSizeReport(reportOutput).process(result);\n\t\tISerializedObjectTree match = Trees.fromResource(getClass(), \"nodeChildSize-match\");\n\t\tnew TreeSizeReport(reportOutput).process(match);\n\n\t\tTrees.assertEqualsTree(match, result);\n\t}", "signature": "void secondNodeHasMoreChilds()", "full_signature": "@Test public void secondNodeHasMoreChilds()", "class_method_signature": "SimilarNodeTreeTransformatorTest.secondNodeHasMoreChilds()", "testcase": true, "constructor": false, "invocations": ["fromResource", "getClass", "assertEquals", "label", "process", "transformTree", "process", "fromResource", "getClass", "process", "assertEqualsTree"]}, "focal_class": {"identifier": "SimilarNodeTreeTransformator", "superclass": "extends AbstractTreeTransformingProcessor", "interfaces": "", "fields": [{"original_string": "private final static Logger LOG = LoggerFactory.getLogger(SimilarNodeTreeTransformator.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimilarNodeTreeTransformator.class)", "var_name": "LOG"}], "methods": [{"identifier": "SimilarNodeTreeTransformator", "parameters": "(ISerializedObjectTreeProcessor parent)", "modifiers": "public", "return": "", "signature": " SimilarNodeTreeTransformator(ISerializedObjectTreeProcessor parent)", "full_signature": "public  SimilarNodeTreeTransformator(ISerializedObjectTreeProcessor parent)", "class_method_signature": "SimilarNodeTreeTransformator.SimilarNodeTreeTransformator(ISerializedObjectTreeProcessor parent)", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(ISerializedObjectTree tree)", "modifiers": "@Override protected", "return": "ISerializedObjectTree", "signature": "ISerializedObjectTree transform(ISerializedObjectTree tree)", "full_signature": "@Override protected ISerializedObjectTree transform(ISerializedObjectTree tree)", "class_method_signature": "SimilarNodeTreeTransformator.transform(ISerializedObjectTree tree)", "testcase": false, "constructor": false}, {"identifier": "transformTree", "parameters": "(ISerializedObjectTree tree)", "modifiers": "public static", "return": "ISerializedObjectTree", "signature": "ISerializedObjectTree transformTree(ISerializedObjectTree tree)", "full_signature": "public static ISerializedObjectTree transformTree(ISerializedObjectTree tree)", "class_method_signature": "SimilarNodeTreeTransformator.transformTree(ISerializedObjectTree tree)", "testcase": false, "constructor": false}, {"identifier": "sameEntries", "parameters": "(List<? extends T> a, List<? extends T> b)", "modifiers": "static", "return": "boolean", "signature": "boolean sameEntries(List<? extends T> a, List<? extends T> b)", "full_signature": "static boolean sameEntries(List<? extends T> a, List<? extends T> b)", "class_method_signature": "SimilarNodeTreeTransformator.sameEntries(List<? extends T> a, List<? extends T> b)", "testcase": false, "constructor": false}], "file": "serializer-common/src/main/java/org/wicketstuff/pageserializer/common/analyze/report/SimilarNodeTreeTransformator.java"}, "focal_method": {"identifier": "transformTree", "parameters": "(ISerializedObjectTree tree)", "modifiers": "public static", "return": "ISerializedObjectTree", "body": "public static ISerializedObjectTree transformTree(ISerializedObjectTree tree)\n\t{\n\t\tISerializedObjectTree ret = tree;\n\t\tif (!tree.children().isEmpty())\n\t\t{\n\t\t\tList<ISerializedObjectTree> transformed = new ArrayList<ISerializedObjectTree>();\n\t\t\tfor (ISerializedObjectTree t : tree.children())\n\t\t\t{\n\t\t\t\ttransformed.add(transformTree(t));\n\t\t\t}\n\n\t\t\tTreeTypeMap typeMap = new TreeTypeMap(transformed);\n\n\t\t\tif (typeMap.hasLessEntries(transformed.size()))\n\t\t\t{\n//\t\t\t\tLOG.error(\"Compress {}\",tree.type());\n\t\t\t\t\n\t\t\t\tList<ISerializedObjectTree> result = typeMap.compressedResult();\n\t\t\t\tret = new ImmutableTree(ret.id(), ret.type(), ret.label(), ret.size(), result);\n//\t\t\t\tnew TreeSizeReport().process(tree);\n//\t\t\t\tnew TreeSizeReport().process(ret);\n\t\t\t} else {\n\t\t\t\tif (!sameEntries(tree.children(), transformed)) {\n\t\t\t\t\tret = new ImmutableTree(ret.id(), ret.type(), ret.label(), ret.size(), transformed);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}", "signature": "ISerializedObjectTree transformTree(ISerializedObjectTree tree)", "full_signature": "public static ISerializedObjectTree transformTree(ISerializedObjectTree tree)", "class_method_signature": "SimilarNodeTreeTransformator.transformTree(ISerializedObjectTree tree)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "children", "children", "add", "transformTree", "hasLessEntries", "size", "compressedResult", "id", "type", "label", "size", "sameEntries", "children", "id", "type", "label", "size"]}, "repository": {"repo_id": 1206855, "url": "https://github.com/wicketstuff/core", "language": "Java", "is_fork": false, "fork_count": 309, "stargazer_count": 324, "size": 64476, "license": "licensed"}}