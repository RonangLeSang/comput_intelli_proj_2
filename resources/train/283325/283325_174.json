{"test_class": {"identifier": "StatusListenerConfigHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Context context = new ContextBase();", "modifier": "", "type": "Context", "declarator": "context = new ContextBase()", "var_name": "context"}, {"original_string": "StatusManager sm = context.getStatusManager();", "modifier": "", "type": "StatusManager", "declarator": "sm = context.getStatusManager()", "var_name": "sm"}], "file": "logback-core/src/test/java/ch/qos/logback/core/util/StatusListenerConfigHelperTest.java"}, "test_case": {"identifier": "addOnConsoleListenerInstanceShouldNotStartSecondListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addOnConsoleListenerInstanceShouldNotStartSecondListener() {\n        OnConsoleStatusListener ocl0 = new OnConsoleStatusListener();\n        OnConsoleStatusListener ocl1 = new OnConsoleStatusListener();\n\n        StatusListenerConfigHelper.addOnConsoleListenerInstance(context, ocl0);\n        {\n            List<StatusListener> listeners = sm.getCopyOfStatusListenerList();\n            assertEquals(1, listeners.size());\n            assertTrue(ocl0.isStarted());\n        }\n\n        // second listener should not have been started\n        StatusListenerConfigHelper.addOnConsoleListenerInstance(context, ocl1);\n        {\n            List<StatusListener> listeners = sm.getCopyOfStatusListenerList();\n            assertEquals(1, listeners.size());\n            assertFalse(ocl1.isStarted());\n        }\n    }", "signature": "void addOnConsoleListenerInstanceShouldNotStartSecondListener()", "full_signature": "@Test public void addOnConsoleListenerInstanceShouldNotStartSecondListener()", "class_method_signature": "StatusListenerConfigHelperTest.addOnConsoleListenerInstanceShouldNotStartSecondListener()", "testcase": true, "constructor": false, "invocations": ["addOnConsoleListenerInstance", "getCopyOfStatusListenerList", "assertEquals", "size", "assertTrue", "isStarted", "addOnConsoleListenerInstance", "getCopyOfStatusListenerList", "assertEquals", "size", "assertFalse", "isStarted"]}, "focal_class": {"identifier": "StatusListenerConfigHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "installIfAsked", "parameters": "(Context context)", "modifiers": "public static", "return": "void", "signature": "void installIfAsked(Context context)", "full_signature": "public static void installIfAsked(Context context)", "class_method_signature": "StatusListenerConfigHelper.installIfAsked(Context context)", "testcase": false, "constructor": false}, {"identifier": "addStatusListener", "parameters": "(Context context, String listenerClassName)", "modifiers": "private static", "return": "void", "signature": "void addStatusListener(Context context, String listenerClassName)", "full_signature": "private static void addStatusListener(Context context, String listenerClassName)", "class_method_signature": "StatusListenerConfigHelper.addStatusListener(Context context, String listenerClassName)", "testcase": false, "constructor": false}, {"identifier": "initAndAddListener", "parameters": "(Context context, StatusListener listener)", "modifiers": "private static", "return": "void", "signature": "void initAndAddListener(Context context, StatusListener listener)", "full_signature": "private static void initAndAddListener(Context context, StatusListener listener)", "class_method_signature": "StatusListenerConfigHelper.initAndAddListener(Context context, StatusListener listener)", "testcase": false, "constructor": false}, {"identifier": "createListenerPerClassName", "parameters": "(Context context, String listenerClass)", "modifiers": "private static", "return": "StatusListener", "signature": "StatusListener createListenerPerClassName(Context context, String listenerClass)", "full_signature": "private static StatusListener createListenerPerClassName(Context context, String listenerClass)", "class_method_signature": "StatusListenerConfigHelper.createListenerPerClassName(Context context, String listenerClass)", "testcase": false, "constructor": false}, {"identifier": "addOnConsoleListenerInstance", "parameters": "(Context context, OnConsoleStatusListener onConsoleStatusListener)", "modifiers": "static public", "return": "void", "signature": "void addOnConsoleListenerInstance(Context context, OnConsoleStatusListener onConsoleStatusListener)", "full_signature": "static public void addOnConsoleListenerInstance(Context context, OnConsoleStatusListener onConsoleStatusListener)", "class_method_signature": "StatusListenerConfigHelper.addOnConsoleListenerInstance(Context context, OnConsoleStatusListener onConsoleStatusListener)", "testcase": false, "constructor": false}], "file": "logback-core/src/main/java/ch/qos/logback/core/util/StatusListenerConfigHelper.java"}, "focal_method": {"identifier": "addOnConsoleListenerInstance", "parameters": "(Context context, OnConsoleStatusListener onConsoleStatusListener)", "modifiers": "static public", "return": "void", "body": "static public void addOnConsoleListenerInstance(Context context, OnConsoleStatusListener onConsoleStatusListener) {\n        onConsoleStatusListener.setContext(context);\n        boolean effectivelyAdded = context.getStatusManager().add(onConsoleStatusListener);\n        if (effectivelyAdded) {\n            onConsoleStatusListener.start();\n        }\n    }", "signature": "void addOnConsoleListenerInstance(Context context, OnConsoleStatusListener onConsoleStatusListener)", "full_signature": "static public void addOnConsoleListenerInstance(Context context, OnConsoleStatusListener onConsoleStatusListener)", "class_method_signature": "StatusListenerConfigHelper.addOnConsoleListenerInstance(Context context, OnConsoleStatusListener onConsoleStatusListener)", "testcase": false, "constructor": false, "invocations": ["setContext", "add", "getStatusManager", "start"]}, "repository": {"repo_id": 283325, "url": "https://github.com/qos-ch/logback", "stars": 1795, "created": "8/20/2009 6:48:24 PM +00:00", "updates": "2020-01-24T21:40:54+00:00", "fork": "False", "license": "licensed"}}