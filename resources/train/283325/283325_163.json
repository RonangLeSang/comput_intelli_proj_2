{"test_class": {"identifier": "TokenizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Token> witnessList = new ArrayList<Token>();", "modifier": "", "type": "List<Token>", "declarator": "witnessList = new ArrayList<Token>()", "var_name": "witnessList"}], "file": "logback-core/src/test/java/ch/qos/logback/core/subst/TokenizerTest.java"}, "test_case": {"identifier": "defaultSeparatorOutsideVariable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void defaultSeparatorOutsideVariable() throws ScanException {\n\n        String input = \"{a:-b}\";\n        Tokenizer tokenizer = new Tokenizer(input);\n        List<Token> tokenList = tokenizer.tokenize();\n        witnessList.add(Token.CURLY_LEFT_TOKEN);\n        witnessList.add(new Token(Token.Type.LITERAL, \"a\"));\n        witnessList.add(Token.DEFAULT_SEP_TOKEN);\n        witnessList.add(new Token(Token.Type.LITERAL, \"b\"));\n        witnessList.add(Token.CURLY_RIGHT_TOKEN);\n        assertEquals(witnessList, tokenList);\n    }", "signature": "void defaultSeparatorOutsideVariable()", "full_signature": "@Test public void defaultSeparatorOutsideVariable()", "class_method_signature": "TokenizerTest.defaultSeparatorOutsideVariable()", "testcase": true, "constructor": false, "invocations": ["tokenize", "add", "add", "add", "add", "add", "assertEquals"]}, "focal_class": {"identifier": "Tokenizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String pattern;", "modifier": "final", "type": "String", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "final int patternLength;", "modifier": "final", "type": "int", "declarator": "patternLength", "var_name": "patternLength"}, {"original_string": "TokenizerState state = TokenizerState.LITERAL_STATE;", "modifier": "", "type": "TokenizerState", "declarator": "state = TokenizerState.LITERAL_STATE", "var_name": "state"}, {"original_string": "int pointer = 0;", "modifier": "", "type": "int", "declarator": "pointer = 0", "var_name": "pointer"}], "methods": [{"identifier": "Tokenizer", "parameters": "(String pattern)", "modifiers": "public", "return": "", "signature": " Tokenizer(String pattern)", "full_signature": "public  Tokenizer(String pattern)", "class_method_signature": "Tokenizer.Tokenizer(String pattern)", "testcase": false, "constructor": true}, {"identifier": "tokenize", "parameters": "()", "modifiers": "", "return": "List<Token>", "signature": "List<Token> tokenize()", "full_signature": " List<Token> tokenize()", "class_method_signature": "Tokenizer.tokenize()", "testcase": false, "constructor": false}, {"identifier": "handleDefaultValueState", "parameters": "(char c, List<Token> tokenList, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void handleDefaultValueState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "full_signature": "private void handleDefaultValueState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "class_method_signature": "Tokenizer.handleDefaultValueState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "handleStartState", "parameters": "(char c, List<Token> tokenList, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void handleStartState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "full_signature": "private void handleStartState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "class_method_signature": "Tokenizer.handleStartState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "handleLiteralState", "parameters": "(char c, List<Token> tokenList, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void handleLiteralState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "full_signature": "private void handleLiteralState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "class_method_signature": "Tokenizer.handleLiteralState(char c, List<Token> tokenList, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "addLiteralToken", "parameters": "(List<Token> tokenList, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void addLiteralToken(List<Token> tokenList, StringBuilder stringBuilder)", "full_signature": "private void addLiteralToken(List<Token> tokenList, StringBuilder stringBuilder)", "class_method_signature": "Tokenizer.addLiteralToken(List<Token> tokenList, StringBuilder stringBuilder)", "testcase": false, "constructor": false}], "file": "logback-core/src/main/java/ch/qos/logback/core/subst/Tokenizer.java"}, "focal_method": {"identifier": "tokenize", "parameters": "()", "modifiers": "", "return": "List<Token>", "body": "List<Token> tokenize() throws ScanException {\n        List<Token> tokenList = new ArrayList<Token>();\n        StringBuilder buf = new StringBuilder();\n\n        while (pointer < patternLength) {\n            char c = pattern.charAt(pointer);\n            pointer++;\n\n            switch (state) {\n            case LITERAL_STATE:\n                handleLiteralState(c, tokenList, buf);\n                break;\n            case START_STATE:\n                handleStartState(c, tokenList, buf);\n                break;\n            case DEFAULT_VAL_STATE:\n                handleDefaultValueState(c, tokenList, buf);\n            default:\n            }\n        }\n        // EOS\n        switch (state) {\n        case LITERAL_STATE:\n            addLiteralToken(tokenList, buf);\n            break;\n        case DEFAULT_VAL_STATE:\n            // trailing colon. see also LOGBACK-1140\n            buf.append(CoreConstants.COLON_CHAR);\n            addLiteralToken(tokenList, buf);\n            break;\n        case START_STATE:\n            // trailing $. see also LOGBACK-1149\n            buf.append(CoreConstants.DOLLAR);\n            addLiteralToken(tokenList, buf);\n            break;\n        }\n        return tokenList;\n    }", "signature": "List<Token> tokenize()", "full_signature": " List<Token> tokenize()", "class_method_signature": "Tokenizer.tokenize()", "testcase": false, "constructor": false, "invocations": ["charAt", "handleLiteralState", "handleStartState", "handleDefaultValueState", "addLiteralToken", "append", "addLiteralToken", "append", "addLiteralToken"]}, "repository": {"repo_id": 283325, "url": "https://github.com/qos-ch/logback", "stars": 1795, "created": "8/20/2009 6:48:24 PM +00:00", "updates": "2020-01-24T21:40:54+00:00", "fork": "False", "license": "licensed"}}