{"test_class": {"identifier": "RollingCalendarTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String dailyPattern = \"yyyy-MM-dd\";", "modifier": "", "type": "String", "declarator": "dailyPattern = \"yyyy-MM-dd\"", "var_name": "dailyPattern"}, {"original_string": "final long WED_2016_03_23_T_230705_CET = 1458770825333L;", "modifier": "final", "type": "long", "declarator": "WED_2016_03_23_T_230705_CET = 1458770825333L", "var_name": "WED_2016_03_23_T_230705_CET"}], "file": "logback-core/src/test/java/ch/qos/logback/core/rolling/helper/RollingCalendarTest.java"}, "test_case": {"identifier": "testPeriodicity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPeriodicity() {\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-MM-dd_HH_mm_ss\");\n            assertEquals(PeriodicityType.TOP_OF_SECOND, rc.getPeriodicityType());\n        }\n\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-MM-dd_HH_mm\");\n            assertEquals(PeriodicityType.TOP_OF_MINUTE, rc.getPeriodicityType());\n        }\n\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-MM-dd_HH\");\n            assertEquals(PeriodicityType.TOP_OF_HOUR, rc.getPeriodicityType());\n        }\n\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-MM-dd_hh\");\n            assertEquals(PeriodicityType.TOP_OF_HOUR, rc.getPeriodicityType());\n        }\n\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-MM-dd\");\n            assertEquals(PeriodicityType.TOP_OF_DAY, rc.getPeriodicityType());\n        }\n\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-MM\");\n            assertEquals(PeriodicityType.TOP_OF_MONTH, rc.getPeriodicityType());\n        }\n\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-ww\");\n            assertEquals(PeriodicityType.TOP_OF_WEEK, rc.getPeriodicityType());\n        }\n\n        {\n            RollingCalendar rc = new RollingCalendar(\"yyyy-WW\");\n            assertEquals(PeriodicityType.TOP_OF_WEEK, rc.getPeriodicityType());\n        }\n    }", "signature": "void testPeriodicity()", "full_signature": "@Test public void testPeriodicity()", "class_method_signature": "RollingCalendarTest.testPeriodicity()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPeriodicityType", "assertEquals", "getPeriodicityType", "assertEquals", "getPeriodicityType", "assertEquals", "getPeriodicityType", "assertEquals", "getPeriodicityType", "assertEquals", "getPeriodicityType", "assertEquals", "getPeriodicityType", "assertEquals", "getPeriodicityType"]}, "focal_class": {"identifier": "RollingCalendar", "superclass": "extends GregorianCalendar", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -5937537740925066161L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5937537740925066161L", "var_name": "serialVersionUID"}, {"original_string": "static final TimeZone GMT_TIMEZONE = TimeZone.getTimeZone(\"GMT\");", "modifier": "static final", "type": "TimeZone", "declarator": "GMT_TIMEZONE = TimeZone.getTimeZone(\"GMT\")", "var_name": "GMT_TIMEZONE"}, {"original_string": "PeriodicityType periodicityType = PeriodicityType.ERRONEOUS;", "modifier": "", "type": "PeriodicityType", "declarator": "periodicityType = PeriodicityType.ERRONEOUS", "var_name": "periodicityType"}, {"original_string": "String datePattern;", "modifier": "", "type": "String", "declarator": "datePattern", "var_name": "datePattern"}], "methods": [{"identifier": "RollingCalendar", "parameters": "(String datePattern)", "modifiers": "public", "return": "", "signature": " RollingCalendar(String datePattern)", "full_signature": "public  RollingCalendar(String datePattern)", "class_method_signature": "RollingCalendar.RollingCalendar(String datePattern)", "testcase": false, "constructor": true}, {"identifier": "RollingCalendar", "parameters": "(String datePattern, TimeZone tz, Locale locale)", "modifiers": "public", "return": "", "signature": " RollingCalendar(String datePattern, TimeZone tz, Locale locale)", "full_signature": "public  RollingCalendar(String datePattern, TimeZone tz, Locale locale)", "class_method_signature": "RollingCalendar.RollingCalendar(String datePattern, TimeZone tz, Locale locale)", "testcase": false, "constructor": true}, {"identifier": "getPeriodicityType", "parameters": "()", "modifiers": "public", "return": "PeriodicityType", "signature": "PeriodicityType getPeriodicityType()", "full_signature": "public PeriodicityType getPeriodicityType()", "class_method_signature": "RollingCalendar.getPeriodicityType()", "testcase": false, "constructor": false}, {"identifier": "computePeriodicityType", "parameters": "()", "modifiers": "public", "return": "PeriodicityType", "signature": "PeriodicityType computePeriodicityType()", "full_signature": "public PeriodicityType computePeriodicityType()", "class_method_signature": "RollingCalendar.computePeriodicityType()", "testcase": false, "constructor": false}, {"identifier": "isCollisionFree", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCollisionFree()", "full_signature": "public boolean isCollisionFree()", "class_method_signature": "RollingCalendar.isCollisionFree()", "testcase": false, "constructor": false}, {"identifier": "collision", "parameters": "(long delta)", "modifiers": "private", "return": "boolean", "signature": "boolean collision(long delta)", "full_signature": "private boolean collision(long delta)", "class_method_signature": "RollingCalendar.collision(long delta)", "testcase": false, "constructor": false}, {"identifier": "printPeriodicity", "parameters": "(ContextAwareBase cab)", "modifiers": "public", "return": "void", "signature": "void printPeriodicity(ContextAwareBase cab)", "full_signature": "public void printPeriodicity(ContextAwareBase cab)", "class_method_signature": "RollingCalendar.printPeriodicity(ContextAwareBase cab)", "testcase": false, "constructor": false}, {"identifier": "periodBarriersCrossed", "parameters": "(long start, long end)", "modifiers": "public", "return": "long", "signature": "long periodBarriersCrossed(long start, long end)", "full_signature": "public long periodBarriersCrossed(long start, long end)", "class_method_signature": "RollingCalendar.periodBarriersCrossed(long start, long end)", "testcase": false, "constructor": false}, {"identifier": "diffInMonths", "parameters": "(long startTime, long endTime)", "modifiers": "public static", "return": "int", "signature": "int diffInMonths(long startTime, long endTime)", "full_signature": "public static int diffInMonths(long startTime, long endTime)", "class_method_signature": "RollingCalendar.diffInMonths(long startTime, long endTime)", "testcase": false, "constructor": false}, {"identifier": "innerGetEndOfThisPeriod", "parameters": "(Calendar cal, PeriodicityType periodicityType, Date now)", "modifiers": "static private", "return": "Date", "signature": "Date innerGetEndOfThisPeriod(Calendar cal, PeriodicityType periodicityType, Date now)", "full_signature": "static private Date innerGetEndOfThisPeriod(Calendar cal, PeriodicityType periodicityType, Date now)", "class_method_signature": "RollingCalendar.innerGetEndOfThisPeriod(Calendar cal, PeriodicityType periodicityType, Date now)", "testcase": false, "constructor": false}, {"identifier": "innerGetEndOfNextNthPeriod", "parameters": "(Calendar cal, PeriodicityType periodicityType, Date now, int numPeriods)", "modifiers": "static private", "return": "Date", "signature": "Date innerGetEndOfNextNthPeriod(Calendar cal, PeriodicityType periodicityType, Date now, int numPeriods)", "full_signature": "static private Date innerGetEndOfNextNthPeriod(Calendar cal, PeriodicityType periodicityType, Date now, int numPeriods)", "class_method_signature": "RollingCalendar.innerGetEndOfNextNthPeriod(Calendar cal, PeriodicityType periodicityType, Date now, int numPeriods)", "testcase": false, "constructor": false}, {"identifier": "getEndOfNextNthPeriod", "parameters": "(Date now, int periods)", "modifiers": "public", "return": "Date", "signature": "Date getEndOfNextNthPeriod(Date now, int periods)", "full_signature": "public Date getEndOfNextNthPeriod(Date now, int periods)", "class_method_signature": "RollingCalendar.getEndOfNextNthPeriod(Date now, int periods)", "testcase": false, "constructor": false}, {"identifier": "getNextTriggeringDate", "parameters": "(Date now)", "modifiers": "public", "return": "Date", "signature": "Date getNextTriggeringDate(Date now)", "full_signature": "public Date getNextTriggeringDate(Date now)", "class_method_signature": "RollingCalendar.getNextTriggeringDate(Date now)", "testcase": false, "constructor": false}, {"identifier": "getStartOfCurrentPeriodWithGMTOffsetCorrection", "parameters": "(long now, TimeZone timezone)", "modifiers": "public", "return": "long", "signature": "long getStartOfCurrentPeriodWithGMTOffsetCorrection(long now, TimeZone timezone)", "full_signature": "public long getStartOfCurrentPeriodWithGMTOffsetCorrection(long now, TimeZone timezone)", "class_method_signature": "RollingCalendar.getStartOfCurrentPeriodWithGMTOffsetCorrection(long now, TimeZone timezone)", "testcase": false, "constructor": false}], "file": "logback-core/src/main/java/ch/qos/logback/core/rolling/helper/RollingCalendar.java"}, "focal_method": {"identifier": "getPeriodicityType", "parameters": "()", "modifiers": "public", "return": "PeriodicityType", "body": "public PeriodicityType getPeriodicityType() {\n        return periodicityType;\n    }", "signature": "PeriodicityType getPeriodicityType()", "full_signature": "public PeriodicityType getPeriodicityType()", "class_method_signature": "RollingCalendar.getPeriodicityType()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 283325, "url": "https://github.com/qos-ch/logback", "stars": 1795, "created": "8/20/2009 6:48:24 PM +00:00", "updates": "2020-01-24T21:40:54+00:00", "fork": "False", "license": "licensed"}}