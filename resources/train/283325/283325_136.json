{"test_class": {"identifier": "ParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "logback-core/src/test/java/ch/qos/logback/core/subst/ParserTest.java"}, "test_case": {"identifier": "literalWithAccolade1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void literalWithAccolade1() throws ScanException {\n        Tokenizer tokenizer = new Tokenizer(\"%x{a}\");\n        Parser parser = new Parser(tokenizer.tokenize());\n        Node node = parser.parse();\n        Node witness = new Node(Node.Type.LITERAL, \"%x\");\n        Node t = witness.next = new Node(Node.Type.LITERAL, \"{\");\n        t.next = new Node(Node.Type.LITERAL, \"a\");\n        t = t.next;\n        t.next = new Node(Node.Type.LITERAL, \"}\");\n        assertEquals(witness, node);\n    }", "signature": "void literalWithAccolade1()", "full_signature": "@Test public void literalWithAccolade1()", "class_method_signature": "ParserTest.literalWithAccolade1()", "testcase": true, "constructor": false, "invocations": ["tokenize", "parse", "assertEquals"]}, "focal_class": {"identifier": "Parser", "superclass": "", "interfaces": "", "fields": [{"original_string": "final List<Token> tokenList;", "modifier": "final", "type": "List<Token>", "declarator": "tokenList", "var_name": "tokenList"}, {"original_string": "int pointer = 0;", "modifier": "", "type": "int", "declarator": "pointer = 0", "var_name": "pointer"}], "methods": [{"identifier": "Parser", "parameters": "(List<Token> tokenList)", "modifiers": "public", "return": "", "signature": " Parser(List<Token> tokenList)", "full_signature": "public  Parser(List<Token> tokenList)", "class_method_signature": "Parser.Parser(List<Token> tokenList)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node parse()", "full_signature": "public Node parse()", "class_method_signature": "Parser.parse()", "testcase": false, "constructor": false}, {"identifier": "E", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node E()", "full_signature": "private Node E()", "class_method_signature": "Parser.E()", "testcase": false, "constructor": false}, {"identifier": "Eopt", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node Eopt()", "full_signature": "private Node Eopt()", "class_method_signature": "Parser.Eopt()", "testcase": false, "constructor": false}, {"identifier": "T", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node T()", "full_signature": "private Node T()", "class_method_signature": "Parser.T()", "testcase": false, "constructor": false}, {"identifier": "makeNewLiteralNode", "parameters": "(String s)", "modifiers": "private", "return": "Node", "signature": "Node makeNewLiteralNode(String s)", "full_signature": "private Node makeNewLiteralNode(String s)", "class_method_signature": "Parser.makeNewLiteralNode(String s)", "testcase": false, "constructor": false}, {"identifier": "V", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node V()", "full_signature": "private Node V()", "class_method_signature": "Parser.V()", "testcase": false, "constructor": false}, {"identifier": "C", "parameters": "()", "modifiers": "private", "return": "Node", "signature": "Node C()", "full_signature": "private Node C()", "class_method_signature": "Parser.C()", "testcase": false, "constructor": false}, {"identifier": "isDefaultToken", "parameters": "(Token t)", "modifiers": "private", "return": "boolean", "signature": "boolean isDefaultToken(Token t)", "full_signature": "private boolean isDefaultToken(Token t)", "class_method_signature": "Parser.isDefaultToken(Token t)", "testcase": false, "constructor": false}, {"identifier": "advanceTokenPointer", "parameters": "()", "modifiers": "", "return": "void", "signature": "void advanceTokenPointer()", "full_signature": " void advanceTokenPointer()", "class_method_signature": "Parser.advanceTokenPointer()", "testcase": false, "constructor": false}, {"identifier": "expectNotNull", "parameters": "(Token t, String expected)", "modifiers": "", "return": "void", "signature": "void expectNotNull(Token t, String expected)", "full_signature": " void expectNotNull(Token t, String expected)", "class_method_signature": "Parser.expectNotNull(Token t, String expected)", "testcase": false, "constructor": false}, {"identifier": "expectCurlyRight", "parameters": "(Token t)", "modifiers": "", "return": "void", "signature": "void expectCurlyRight(Token t)", "full_signature": " void expectCurlyRight(Token t)", "class_method_signature": "Parser.expectCurlyRight(Token t)", "testcase": false, "constructor": false}, {"identifier": "peekAtCurentToken", "parameters": "()", "modifiers": "", "return": "Token", "signature": "Token peekAtCurentToken()", "full_signature": " Token peekAtCurentToken()", "class_method_signature": "Parser.peekAtCurentToken()", "testcase": false, "constructor": false}], "file": "logback-core/src/main/java/ch/qos/logback/core/subst/Parser.java"}, "focal_method": {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "Node", "body": "public Node parse() throws ScanException {\n        if (tokenList == null || tokenList.isEmpty())\n            return null;\n        return E();\n    }", "signature": "Node parse()", "full_signature": "public Node parse()", "class_method_signature": "Parser.parse()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "E"]}, "repository": {"repo_id": 283325, "url": "https://github.com/qos-ch/logback", "stars": 1795, "created": "8/20/2009 6:48:24 PM +00:00", "updates": "2020-01-24T21:40:54+00:00", "fork": "False", "license": "licensed"}}