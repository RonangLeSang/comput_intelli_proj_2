{"test_class": {"identifier": "LoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LoggerContext lc = new LoggerContext();", "modifier": "", "type": "LoggerContext", "declarator": "lc = new LoggerContext()", "var_name": "lc"}, {"original_string": "Logger root = lc.getLogger(Logger.ROOT_LOGGER_NAME);", "modifier": "", "type": "Logger", "declarator": "root = lc.getLogger(Logger.ROOT_LOGGER_NAME)", "var_name": "root"}, {"original_string": "Logger loggerTest = lc.getLogger(LoggerTest.class);", "modifier": "", "type": "Logger", "declarator": "loggerTest = lc.getLogger(LoggerTest.class)", "var_name": "loggerTest"}, {"original_string": "ListAppender<ILoggingEvent> listAppender = new ListAppender<ILoggingEvent>();", "modifier": "", "type": "ListAppender<ILoggingEvent>", "declarator": "listAppender = new ListAppender<ILoggingEvent>()", "var_name": "listAppender"}], "file": "logback-classic/src/test/java/ch/qos/logback/classic/LoggerTest.java"}, "test_case": {"identifier": "setRootLevelToNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setRootLevelToNull() {\n        try {\n            root.setLevel(null);\n            fail(\"The level of the root logger should not be settable to null\");\n        } catch (IllegalArgumentException e) {\n        }\n    }", "signature": "void setRootLevelToNull()", "full_signature": "@Test public void setRootLevelToNull()", "class_method_signature": "LoggerTest.setRootLevelToNull()", "testcase": true, "constructor": false, "invocations": ["setLevel", "fail"]}, "focal_class": {"identifier": "Logger", "superclass": "", "interfaces": "implements org.slf4j.Logger, LocationAwareLogger, AppenderAttachable<ILoggingEvent>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 5454405123156820674L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5454405123156820674L", "var_name": "serialVersionUID"}, {"original_string": "public static final String FQCN = ch.qos.logback.classic.Logger.class.getName();", "modifier": "public static final", "type": "String", "declarator": "FQCN = ch.qos.logback.classic.Logger.class.getName()", "var_name": "FQCN"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "transient private Level level;", "modifier": "transient private", "type": "Level", "declarator": "level", "var_name": "level"}, {"original_string": "transient private int effectiveLevelInt;", "modifier": "transient private", "type": "int", "declarator": "effectiveLevelInt", "var_name": "effectiveLevelInt"}, {"original_string": "transient private Logger parent;", "modifier": "transient private", "type": "Logger", "declarator": "parent", "var_name": "parent"}, {"original_string": "transient private List<Logger> childrenList;", "modifier": "transient private", "type": "List<Logger>", "declarator": "childrenList", "var_name": "childrenList"}, {"original_string": "transient private AppenderAttachableImpl<ILoggingEvent> aai;", "modifier": "transient private", "type": "AppenderAttachableImpl<ILoggingEvent>", "declarator": "aai", "var_name": "aai"}, {"original_string": "transient private boolean additive = true;", "modifier": "transient private", "type": "boolean", "declarator": "additive = true", "var_name": "additive"}, {"original_string": "final transient LoggerContext loggerContext;", "modifier": "final transient", "type": "LoggerContext", "declarator": "loggerContext", "var_name": "loggerContext"}], "methods": [{"identifier": "Logger", "parameters": "(String name, Logger parent, LoggerContext loggerContext)", "modifiers": "", "return": "", "signature": " Logger(String name, Logger parent, LoggerContext loggerContext)", "full_signature": "  Logger(String name, Logger parent, LoggerContext loggerContext)", "class_method_signature": "Logger.Logger(String name, Logger parent, LoggerContext loggerContext)", "testcase": false, "constructor": true}, {"identifier": "getEffectiveLevel", "parameters": "()", "modifiers": "public", "return": "Level", "signature": "Level getEffectiveLevel()", "full_signature": "public Level getEffectiveLevel()", "class_method_signature": "Logger.getEffectiveLevel()", "testcase": false, "constructor": false}, {"identifier": "getEffectiveLevelInt", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getEffectiveLevelInt()", "full_signature": " int getEffectiveLevelInt()", "class_method_signature": "Logger.getEffectiveLevelInt()", "testcase": false, "constructor": false}, {"identifier": "getLevel", "parameters": "()", "modifiers": "public", "return": "Level", "signature": "Level getLevel()", "full_signature": "public Level getLevel()", "class_method_signature": "Logger.getLevel()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Logger.getName()", "testcase": false, "constructor": false}, {"identifier": "isRootLogger", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRootLogger()", "full_signature": "private boolean isRootLogger()", "class_method_signature": "Logger.isRootLogger()", "testcase": false, "constructor": false}, {"identifier": "getChildByName", "parameters": "(final String childName)", "modifiers": "", "return": "Logger", "signature": "Logger getChildByName(final String childName)", "full_signature": " Logger getChildByName(final String childName)", "class_method_signature": "Logger.getChildByName(final String childName)", "testcase": false, "constructor": false}, {"identifier": "setLevel", "parameters": "(Level newLevel)", "modifiers": "public synchronized", "return": "void", "signature": "void setLevel(Level newLevel)", "full_signature": "public synchronized void setLevel(Level newLevel)", "class_method_signature": "Logger.setLevel(Level newLevel)", "testcase": false, "constructor": false}, {"identifier": "handleParentLevelChange", "parameters": "(int newParentLevelInt)", "modifiers": "private synchronized", "return": "void", "signature": "void handleParentLevelChange(int newParentLevelInt)", "full_signature": "private synchronized void handleParentLevelChange(int newParentLevelInt)", "class_method_signature": "Logger.handleParentLevelChange(int newParentLevelInt)", "testcase": false, "constructor": false}, {"identifier": "detachAndStopAllAppenders", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void detachAndStopAllAppenders()", "full_signature": "public void detachAndStopAllAppenders()", "class_method_signature": "Logger.detachAndStopAllAppenders()", "testcase": false, "constructor": false}, {"identifier": "detachAppender", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean detachAppender(String name)", "full_signature": "public boolean detachAppender(String name)", "class_method_signature": "Logger.detachAppender(String name)", "testcase": false, "constructor": false}, {"identifier": "addAppender", "parameters": "(Appender<ILoggingEvent> newAppender)", "modifiers": "public synchronized", "return": "void", "signature": "void addAppender(Appender<ILoggingEvent> newAppender)", "full_signature": "public synchronized void addAppender(Appender<ILoggingEvent> newAppender)", "class_method_signature": "Logger.addAppender(Appender<ILoggingEvent> newAppender)", "testcase": false, "constructor": false}, {"identifier": "isAttached", "parameters": "(Appender<ILoggingEvent> appender)", "modifiers": "public", "return": "boolean", "signature": "boolean isAttached(Appender<ILoggingEvent> appender)", "full_signature": "public boolean isAttached(Appender<ILoggingEvent> appender)", "class_method_signature": "Logger.isAttached(Appender<ILoggingEvent> appender)", "testcase": false, "constructor": false}, {"identifier": "iteratorForAppenders", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Iterator<Appender<ILoggingEvent>>", "signature": "Iterator<Appender<ILoggingEvent>> iteratorForAppenders()", "full_signature": "@SuppressWarnings(\"unchecked\") public Iterator<Appender<ILoggingEvent>> iteratorForAppenders()", "class_method_signature": "Logger.iteratorForAppenders()", "testcase": false, "constructor": false}, {"identifier": "getAppender", "parameters": "(String name)", "modifiers": "public", "return": "Appender<ILoggingEvent>", "signature": "Appender<ILoggingEvent> getAppender(String name)", "full_signature": "public Appender<ILoggingEvent> getAppender(String name)", "class_method_signature": "Logger.getAppender(String name)", "testcase": false, "constructor": false}, {"identifier": "callAppenders", "parameters": "(ILoggingEvent event)", "modifiers": "public", "return": "void", "signature": "void callAppenders(ILoggingEvent event)", "full_signature": "public void callAppenders(ILoggingEvent event)", "class_method_signature": "Logger.callAppenders(ILoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "appendLoopOnAppenders", "parameters": "(ILoggingEvent event)", "modifiers": "private", "return": "int", "signature": "int appendLoopOnAppenders(ILoggingEvent event)", "full_signature": "private int appendLoopOnAppenders(ILoggingEvent event)", "class_method_signature": "Logger.appendLoopOnAppenders(ILoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "detachAppender", "parameters": "(Appender<ILoggingEvent> appender)", "modifiers": "public", "return": "boolean", "signature": "boolean detachAppender(Appender<ILoggingEvent> appender)", "full_signature": "public boolean detachAppender(Appender<ILoggingEvent> appender)", "class_method_signature": "Logger.detachAppender(Appender<ILoggingEvent> appender)", "testcase": false, "constructor": false}, {"identifier": "createChildByLastNamePart", "parameters": "(final String lastPart)", "modifiers": "", "return": "Logger", "signature": "Logger createChildByLastNamePart(final String lastPart)", "full_signature": " Logger createChildByLastNamePart(final String lastPart)", "class_method_signature": "Logger.createChildByLastNamePart(final String lastPart)", "testcase": false, "constructor": false}, {"identifier": "localLevelReset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void localLevelReset()", "full_signature": "private void localLevelReset()", "class_method_signature": "Logger.localLevelReset()", "testcase": false, "constructor": false}, {"identifier": "recursiveReset", "parameters": "()", "modifiers": "", "return": "void", "signature": "void recursiveReset()", "full_signature": " void recursiveReset()", "class_method_signature": "Logger.recursiveReset()", "testcase": false, "constructor": false}, {"identifier": "createChildByName", "parameters": "(final String childName)", "modifiers": "", "return": "Logger", "signature": "Logger createChildByName(final String childName)", "full_signature": " Logger createChildByName(final String childName)", "class_method_signature": "Logger.createChildByName(final String childName)", "testcase": false, "constructor": false}, {"identifier": "filterAndLog_0_Or3Plus", "parameters": "(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "modifiers": "private", "return": "void", "signature": "void filterAndLog_0_Or3Plus(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "full_signature": "private void filterAndLog_0_Or3Plus(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "class_method_signature": "Logger.filterAndLog_0_Or3Plus(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "testcase": false, "constructor": false}, {"identifier": "filterAndLog_1", "parameters": "(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param, final Throwable t)", "modifiers": "private", "return": "void", "signature": "void filterAndLog_1(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param, final Throwable t)", "full_signature": "private void filterAndLog_1(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param, final Throwable t)", "class_method_signature": "Logger.filterAndLog_1(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param, final Throwable t)", "testcase": false, "constructor": false}, {"identifier": "filterAndLog_2", "parameters": "(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param1, final Object param2,\n                    final Throwable t)", "modifiers": "private", "return": "void", "signature": "void filterAndLog_2(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param1, final Object param2,\n                    final Throwable t)", "full_signature": "private void filterAndLog_2(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param1, final Object param2,\n                    final Throwable t)", "class_method_signature": "Logger.filterAndLog_2(final String localFQCN, final Marker marker, final Level level, final String msg, final Object param1, final Object param2,\n                    final Throwable t)", "testcase": false, "constructor": false}, {"identifier": "buildLoggingEventAndAppend", "parameters": "(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "modifiers": "private", "return": "void", "signature": "void buildLoggingEventAndAppend(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "full_signature": "private void buildLoggingEventAndAppend(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "class_method_signature": "Logger.buildLoggingEventAndAppend(final String localFQCN, final Marker marker, final Level level, final String msg, final Object[] params,\n                    final Throwable t)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void trace(String msg)", "full_signature": "public void trace(String msg)", "class_method_signature": "Logger.trace(String msg)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void trace(String format, Object arg)", "full_signature": "public void trace(String format, Object arg)", "class_method_signature": "Logger.trace(String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void trace(String format, Object arg1, Object arg2)", "full_signature": "public void trace(String format, Object arg1, Object arg2)", "class_method_signature": "Logger.trace(String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void trace(String format, Object... argArray)", "full_signature": "public void trace(String format, Object... argArray)", "class_method_signature": "Logger.trace(String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void trace(String msg, Throwable t)", "full_signature": "public void trace(String msg, Throwable t)", "class_method_signature": "Logger.trace(String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(Marker marker, String msg)", "modifiers": "public", "return": "void", "signature": "void trace(Marker marker, String msg)", "full_signature": "public void trace(Marker marker, String msg)", "class_method_signature": "Logger.trace(Marker marker, String msg)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(Marker marker, String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void trace(Marker marker, String format, Object arg)", "full_signature": "public void trace(Marker marker, String format, Object arg)", "class_method_signature": "Logger.trace(Marker marker, String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(Marker marker, String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void trace(Marker marker, String format, Object arg1, Object arg2)", "full_signature": "public void trace(Marker marker, String format, Object arg1, Object arg2)", "class_method_signature": "Logger.trace(Marker marker, String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(Marker marker, String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void trace(Marker marker, String format, Object... argArray)", "full_signature": "public void trace(Marker marker, String format, Object... argArray)", "class_method_signature": "Logger.trace(Marker marker, String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(Marker marker, String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void trace(Marker marker, String msg, Throwable t)", "full_signature": "public void trace(Marker marker, String msg, Throwable t)", "class_method_signature": "Logger.trace(Marker marker, String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "isDebugEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDebugEnabled()", "full_signature": "public boolean isDebugEnabled()", "class_method_signature": "Logger.isDebugEnabled()", "testcase": false, "constructor": false}, {"identifier": "isDebugEnabled", "parameters": "(Marker marker)", "modifiers": "public", "return": "boolean", "signature": "boolean isDebugEnabled(Marker marker)", "full_signature": "public boolean isDebugEnabled(Marker marker)", "class_method_signature": "Logger.isDebugEnabled(Marker marker)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void debug(String msg)", "full_signature": "public void debug(String msg)", "class_method_signature": "Logger.debug(String msg)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void debug(String format, Object arg)", "full_signature": "public void debug(String format, Object arg)", "class_method_signature": "Logger.debug(String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void debug(String format, Object arg1, Object arg2)", "full_signature": "public void debug(String format, Object arg1, Object arg2)", "class_method_signature": "Logger.debug(String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void debug(String format, Object... argArray)", "full_signature": "public void debug(String format, Object... argArray)", "class_method_signature": "Logger.debug(String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void debug(String msg, Throwable t)", "full_signature": "public void debug(String msg, Throwable t)", "class_method_signature": "Logger.debug(String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Marker marker, String msg)", "modifiers": "public", "return": "void", "signature": "void debug(Marker marker, String msg)", "full_signature": "public void debug(Marker marker, String msg)", "class_method_signature": "Logger.debug(Marker marker, String msg)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Marker marker, String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void debug(Marker marker, String format, Object arg)", "full_signature": "public void debug(Marker marker, String format, Object arg)", "class_method_signature": "Logger.debug(Marker marker, String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Marker marker, String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void debug(Marker marker, String format, Object arg1, Object arg2)", "full_signature": "public void debug(Marker marker, String format, Object arg1, Object arg2)", "class_method_signature": "Logger.debug(Marker marker, String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Marker marker, String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void debug(Marker marker, String format, Object... argArray)", "full_signature": "public void debug(Marker marker, String format, Object... argArray)", "class_method_signature": "Logger.debug(Marker marker, String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Marker marker, String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void debug(Marker marker, String msg, Throwable t)", "full_signature": "public void debug(Marker marker, String msg, Throwable t)", "class_method_signature": "Logger.debug(Marker marker, String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void error(String msg)", "full_signature": "public void error(String msg)", "class_method_signature": "Logger.error(String msg)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void error(String format, Object arg)", "full_signature": "public void error(String format, Object arg)", "class_method_signature": "Logger.error(String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void error(String format, Object arg1, Object arg2)", "full_signature": "public void error(String format, Object arg1, Object arg2)", "class_method_signature": "Logger.error(String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void error(String format, Object... argArray)", "full_signature": "public void error(String format, Object... argArray)", "class_method_signature": "Logger.error(String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void error(String msg, Throwable t)", "full_signature": "public void error(String msg, Throwable t)", "class_method_signature": "Logger.error(String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Marker marker, String msg)", "modifiers": "public", "return": "void", "signature": "void error(Marker marker, String msg)", "full_signature": "public void error(Marker marker, String msg)", "class_method_signature": "Logger.error(Marker marker, String msg)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Marker marker, String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void error(Marker marker, String format, Object arg)", "full_signature": "public void error(Marker marker, String format, Object arg)", "class_method_signature": "Logger.error(Marker marker, String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Marker marker, String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void error(Marker marker, String format, Object arg1, Object arg2)", "full_signature": "public void error(Marker marker, String format, Object arg1, Object arg2)", "class_method_signature": "Logger.error(Marker marker, String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Marker marker, String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void error(Marker marker, String format, Object... argArray)", "full_signature": "public void error(Marker marker, String format, Object... argArray)", "class_method_signature": "Logger.error(Marker marker, String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Marker marker, String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void error(Marker marker, String msg, Throwable t)", "full_signature": "public void error(Marker marker, String msg, Throwable t)", "class_method_signature": "Logger.error(Marker marker, String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "isInfoEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInfoEnabled()", "full_signature": "public boolean isInfoEnabled()", "class_method_signature": "Logger.isInfoEnabled()", "testcase": false, "constructor": false}, {"identifier": "isInfoEnabled", "parameters": "(Marker marker)", "modifiers": "public", "return": "boolean", "signature": "boolean isInfoEnabled(Marker marker)", "full_signature": "public boolean isInfoEnabled(Marker marker)", "class_method_signature": "Logger.isInfoEnabled(Marker marker)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void info(String msg)", "full_signature": "public void info(String msg)", "class_method_signature": "Logger.info(String msg)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void info(String format, Object arg)", "full_signature": "public void info(String format, Object arg)", "class_method_signature": "Logger.info(String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void info(String format, Object arg1, Object arg2)", "full_signature": "public void info(String format, Object arg1, Object arg2)", "class_method_signature": "Logger.info(String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void info(String format, Object... argArray)", "full_signature": "public void info(String format, Object... argArray)", "class_method_signature": "Logger.info(String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void info(String msg, Throwable t)", "full_signature": "public void info(String msg, Throwable t)", "class_method_signature": "Logger.info(String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(Marker marker, String msg)", "modifiers": "public", "return": "void", "signature": "void info(Marker marker, String msg)", "full_signature": "public void info(Marker marker, String msg)", "class_method_signature": "Logger.info(Marker marker, String msg)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(Marker marker, String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void info(Marker marker, String format, Object arg)", "full_signature": "public void info(Marker marker, String format, Object arg)", "class_method_signature": "Logger.info(Marker marker, String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(Marker marker, String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void info(Marker marker, String format, Object arg1, Object arg2)", "full_signature": "public void info(Marker marker, String format, Object arg1, Object arg2)", "class_method_signature": "Logger.info(Marker marker, String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(Marker marker, String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void info(Marker marker, String format, Object... argArray)", "full_signature": "public void info(Marker marker, String format, Object... argArray)", "class_method_signature": "Logger.info(Marker marker, String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(Marker marker, String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void info(Marker marker, String msg, Throwable t)", "full_signature": "public void info(Marker marker, String msg, Throwable t)", "class_method_signature": "Logger.info(Marker marker, String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "isTraceEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTraceEnabled()", "full_signature": "public boolean isTraceEnabled()", "class_method_signature": "Logger.isTraceEnabled()", "testcase": false, "constructor": false}, {"identifier": "isTraceEnabled", "parameters": "(Marker marker)", "modifiers": "public", "return": "boolean", "signature": "boolean isTraceEnabled(Marker marker)", "full_signature": "public boolean isTraceEnabled(Marker marker)", "class_method_signature": "Logger.isTraceEnabled(Marker marker)", "testcase": false, "constructor": false}, {"identifier": "isErrorEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isErrorEnabled()", "full_signature": "public boolean isErrorEnabled()", "class_method_signature": "Logger.isErrorEnabled()", "testcase": false, "constructor": false}, {"identifier": "isErrorEnabled", "parameters": "(Marker marker)", "modifiers": "public", "return": "boolean", "signature": "boolean isErrorEnabled(Marker marker)", "full_signature": "public boolean isErrorEnabled(Marker marker)", "class_method_signature": "Logger.isErrorEnabled(Marker marker)", "testcase": false, "constructor": false}, {"identifier": "isWarnEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWarnEnabled()", "full_signature": "public boolean isWarnEnabled()", "class_method_signature": "Logger.isWarnEnabled()", "testcase": false, "constructor": false}, {"identifier": "isWarnEnabled", "parameters": "(Marker marker)", "modifiers": "public", "return": "boolean", "signature": "boolean isWarnEnabled(Marker marker)", "full_signature": "public boolean isWarnEnabled(Marker marker)", "class_method_signature": "Logger.isWarnEnabled(Marker marker)", "testcase": false, "constructor": false}, {"identifier": "isEnabledFor", "parameters": "(Marker marker, Level level)", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabledFor(Marker marker, Level level)", "full_signature": "public boolean isEnabledFor(Marker marker, Level level)", "class_method_signature": "Logger.isEnabledFor(Marker marker, Level level)", "testcase": false, "constructor": false}, {"identifier": "isEnabledFor", "parameters": "(Level level)", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabledFor(Level level)", "full_signature": "public boolean isEnabledFor(Level level)", "class_method_signature": "Logger.isEnabledFor(Level level)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void warn(String msg)", "full_signature": "public void warn(String msg)", "class_method_signature": "Logger.warn(String msg)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void warn(String msg, Throwable t)", "full_signature": "public void warn(String msg, Throwable t)", "class_method_signature": "Logger.warn(String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void warn(String format, Object arg)", "full_signature": "public void warn(String format, Object arg)", "class_method_signature": "Logger.warn(String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void warn(String format, Object arg1, Object arg2)", "full_signature": "public void warn(String format, Object arg1, Object arg2)", "class_method_signature": "Logger.warn(String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void warn(String format, Object... argArray)", "full_signature": "public void warn(String format, Object... argArray)", "class_method_signature": "Logger.warn(String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Marker marker, String msg)", "modifiers": "public", "return": "void", "signature": "void warn(Marker marker, String msg)", "full_signature": "public void warn(Marker marker, String msg)", "class_method_signature": "Logger.warn(Marker marker, String msg)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Marker marker, String format, Object arg)", "modifiers": "public", "return": "void", "signature": "void warn(Marker marker, String format, Object arg)", "full_signature": "public void warn(Marker marker, String format, Object arg)", "class_method_signature": "Logger.warn(Marker marker, String format, Object arg)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Marker marker, String format, Object... argArray)", "modifiers": "public", "return": "void", "signature": "void warn(Marker marker, String format, Object... argArray)", "full_signature": "public void warn(Marker marker, String format, Object... argArray)", "class_method_signature": "Logger.warn(Marker marker, String format, Object... argArray)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Marker marker, String format, Object arg1, Object arg2)", "modifiers": "public", "return": "void", "signature": "void warn(Marker marker, String format, Object arg1, Object arg2)", "full_signature": "public void warn(Marker marker, String format, Object arg1, Object arg2)", "class_method_signature": "Logger.warn(Marker marker, String format, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Marker marker, String msg, Throwable t)", "modifiers": "public", "return": "void", "signature": "void warn(Marker marker, String msg, Throwable t)", "full_signature": "public void warn(Marker marker, String msg, Throwable t)", "class_method_signature": "Logger.warn(Marker marker, String msg, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "isAdditive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAdditive()", "full_signature": "public boolean isAdditive()", "class_method_signature": "Logger.isAdditive()", "testcase": false, "constructor": false}, {"identifier": "setAdditive", "parameters": "(boolean additive)", "modifiers": "public", "return": "void", "signature": "void setAdditive(boolean additive)", "full_signature": "public void setAdditive(boolean additive)", "class_method_signature": "Logger.setAdditive(boolean additive)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Logger.toString()", "testcase": false, "constructor": false}, {"identifier": "callTurboFilters", "parameters": "(Marker marker, Level level)", "modifiers": "private", "return": "FilterReply", "signature": "FilterReply callTurboFilters(Marker marker, Level level)", "full_signature": "private FilterReply callTurboFilters(Marker marker, Level level)", "class_method_signature": "Logger.callTurboFilters(Marker marker, Level level)", "testcase": false, "constructor": false}, {"identifier": "getLoggerContext", "parameters": "()", "modifiers": "public", "return": "LoggerContext", "signature": "LoggerContext getLoggerContext()", "full_signature": "public LoggerContext getLoggerContext()", "class_method_signature": "Logger.getLoggerContext()", "testcase": false, "constructor": false}, {"identifier": "makeLoggingEventBuilder", "parameters": "(org.slf4j.event.Level level)", "modifiers": "@Override public", "return": "LoggingEventBuilder", "signature": "LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level level)", "full_signature": "@Override public LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level level)", "class_method_signature": "Logger.makeLoggingEventBuilder(org.slf4j.event.Level level)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable t)", "modifiers": "public", "return": "void", "signature": "void log(Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable t)", "full_signature": "public void log(Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable t)", "class_method_signature": "Logger.log(Marker marker, String fqcn, int levelInt, String message, Object[] argArray, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(org.slf4j.event.LoggingEvent slf4jEvent)", "modifiers": "public", "return": "void", "signature": "void log(org.slf4j.event.LoggingEvent slf4jEvent)", "full_signature": "public void log(org.slf4j.event.LoggingEvent slf4jEvent)", "class_method_signature": "Logger.log(org.slf4j.event.LoggingEvent slf4jEvent)", "testcase": false, "constructor": false}, {"identifier": "readResolve", "parameters": "()", "modifiers": "protected", "return": "Object", "signature": "Object readResolve()", "full_signature": "protected Object readResolve()", "class_method_signature": "Logger.readResolve()", "testcase": false, "constructor": false}], "file": "logback-classic/src/main/java/ch/qos/logback/classic/Logger.java"}, "focal_method": {"identifier": "setLevel", "parameters": "(Level newLevel)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void setLevel(Level newLevel) {\n        if (level == newLevel) {\n            // nothing to do;\n            return;\n        }\n        if (newLevel == null && isRootLogger()) {\n            throw new IllegalArgumentException(\"The level of the root logger cannot be set to null\");\n        }\n\n        level = newLevel;\n        if (newLevel == null) {\n            effectiveLevelInt = parent.effectiveLevelInt;\n            newLevel = parent.getEffectiveLevel();\n        } else {\n            effectiveLevelInt = newLevel.levelInt;\n        }\n\n        if (childrenList != null) {\n            int len = childrenList.size();\n            for (int i = 0; i < len; i++) {\n                Logger child = (Logger) childrenList.get(i);\n                // tell child to handle parent levelInt change\n                child.handleParentLevelChange(effectiveLevelInt);\n            }\n        }\n        // inform listeners\n        loggerContext.fireOnLevelChange(this, newLevel);\n    }", "signature": "void setLevel(Level newLevel)", "full_signature": "public synchronized void setLevel(Level newLevel)", "class_method_signature": "Logger.setLevel(Level newLevel)", "testcase": false, "constructor": false, "invocations": ["isRootLogger", "getEffectiveLevel", "size", "get", "handleParentLevelChange", "fireOnLevelChange"]}, "repository": {"repo_id": 283325, "url": "https://github.com/qos-ch/logback", "stars": 1795, "created": "8/20/2009 6:48:24 PM +00:00", "updates": "2020-01-24T21:40:54+00:00", "fork": "False", "license": "licensed"}}