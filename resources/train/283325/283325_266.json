{"test_class": {"identifier": "TokenStreamTest", "superclass": "", "interfaces": "", "fields": [], "file": "logback-core/src/test/java/ch/qos/logback/core/pattern/parser/TokenStreamTest.java"}, "test_case": {"identifier": "compositedKeyword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compositedKeyword() throws ScanException {\n        {\n            List<Token> tl = new TokenStream(\"%d(A)\", new AlmostAsIsEscapeUtil()).tokenize();\n            List<Token> witness = new ArrayList<Token>();\n            witness.add(Token.PERCENT_TOKEN);\n            witness.add(new Token(Token.COMPOSITE_KEYWORD, \"d\"));\n            witness.add(new Token(Token.LITERAL, \"A\"));\n            witness.add(Token.RIGHT_PARENTHESIS_TOKEN);\n            assertEquals(witness, tl);\n        }\n        {\n            List<Token> tl = new TokenStream(\"a %subst(%b C)\", new AlmostAsIsEscapeUtil()).tokenize();\n            List<Token> witness = new ArrayList<Token>();\n            witness.add(new Token(Token.LITERAL, \"a \"));\n            witness.add(Token.PERCENT_TOKEN);\n            witness.add(new Token(Token.COMPOSITE_KEYWORD, \"subst\"));\n            witness.add(Token.PERCENT_TOKEN);\n            witness.add(new Token(Token.SIMPLE_KEYWORD, \"b\"));\n            witness.add(new Token(Token.LITERAL, \" C\"));\n            witness.add(Token.RIGHT_PARENTHESIS_TOKEN);\n            assertEquals(witness, tl);\n        }\n    }", "signature": "void compositedKeyword()", "full_signature": "@Test public void compositedKeyword()", "class_method_signature": "TokenStreamTest.compositedKeyword()", "testcase": true, "constructor": false, "invocations": ["tokenize", "add", "add", "add", "add", "assertEquals", "tokenize", "add", "add", "add", "add", "add", "add", "add", "assertEquals"]}, "focal_class": {"identifier": "TokenStream", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String pattern;", "modifier": "final", "type": "String", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "final int patternLength;", "modifier": "final", "type": "int", "declarator": "patternLength", "var_name": "patternLength"}, {"original_string": "final IEscapeUtil escapeUtil;", "modifier": "final", "type": "IEscapeUtil", "declarator": "escapeUtil", "var_name": "escapeUtil"}, {"original_string": "final IEscapeUtil optionEscapeUtil = new RestrictedEscapeUtil();", "modifier": "final", "type": "IEscapeUtil", "declarator": "optionEscapeUtil = new RestrictedEscapeUtil()", "var_name": "optionEscapeUtil"}, {"original_string": "TokenizerState state = TokenizerState.LITERAL_STATE;", "modifier": "", "type": "TokenizerState", "declarator": "state = TokenizerState.LITERAL_STATE", "var_name": "state"}, {"original_string": "int pointer = 0;", "modifier": "", "type": "int", "declarator": "pointer = 0", "var_name": "pointer"}], "methods": [{"identifier": "TokenStream", "parameters": "(String pattern)", "modifiers": "", "return": "", "signature": " TokenStream(String pattern)", "full_signature": "  TokenStream(String pattern)", "class_method_signature": "TokenStream.TokenStream(String pattern)", "testcase": false, "constructor": true}, {"identifier": "TokenStream", "parameters": "(String pattern, IEscapeUtil escapeUtil)", "modifiers": "", "return": "", "signature": " TokenStream(String pattern, IEscapeUtil escapeUtil)", "full_signature": "  TokenStream(String pattern, IEscapeUtil escapeUtil)", "class_method_signature": "TokenStream.TokenStream(String pattern, IEscapeUtil escapeUtil)", "testcase": false, "constructor": true}, {"identifier": "tokenize", "parameters": "()", "modifiers": "", "return": "List<Token>", "signature": "List<Token> tokenize()", "full_signature": " List<Token> tokenize()", "class_method_signature": "TokenStream.tokenize()", "testcase": false, "constructor": false}, {"identifier": "handleRightParenthesisState", "parameters": "(char c, List<Token> tokenList, StringBuffer buf)", "modifiers": "private", "return": "void", "signature": "void handleRightParenthesisState(char c, List<Token> tokenList, StringBuffer buf)", "full_signature": "private void handleRightParenthesisState(char c, List<Token> tokenList, StringBuffer buf)", "class_method_signature": "TokenStream.handleRightParenthesisState(char c, List<Token> tokenList, StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "processOption", "parameters": "(char c, List<Token> tokenList, StringBuffer buf)", "modifiers": "private", "return": "void", "signature": "void processOption(char c, List<Token> tokenList, StringBuffer buf)", "full_signature": "private void processOption(char c, List<Token> tokenList, StringBuffer buf)", "class_method_signature": "TokenStream.processOption(char c, List<Token> tokenList, StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "handleFormatModifierState", "parameters": "(char c, List<Token> tokenList, StringBuffer buf)", "modifiers": "private", "return": "void", "signature": "void handleFormatModifierState(char c, List<Token> tokenList, StringBuffer buf)", "full_signature": "private void handleFormatModifierState(char c, List<Token> tokenList, StringBuffer buf)", "class_method_signature": "TokenStream.handleFormatModifierState(char c, List<Token> tokenList, StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "handleLiteralState", "parameters": "(char c, List<Token> tokenList, StringBuffer buf)", "modifiers": "private", "return": "void", "signature": "void handleLiteralState(char c, List<Token> tokenList, StringBuffer buf)", "full_signature": "private void handleLiteralState(char c, List<Token> tokenList, StringBuffer buf)", "class_method_signature": "TokenStream.handleLiteralState(char c, List<Token> tokenList, StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "handleKeywordState", "parameters": "(char c, List<Token> tokenList, StringBuffer buf)", "modifiers": "private", "return": "void", "signature": "void handleKeywordState(char c, List<Token> tokenList, StringBuffer buf)", "full_signature": "private void handleKeywordState(char c, List<Token> tokenList, StringBuffer buf)", "class_method_signature": "TokenStream.handleKeywordState(char c, List<Token> tokenList, StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(String escapeChars, StringBuffer buf)", "modifiers": "", "return": "void", "signature": "void escape(String escapeChars, StringBuffer buf)", "full_signature": " void escape(String escapeChars, StringBuffer buf)", "class_method_signature": "TokenStream.escape(String escapeChars, StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "optionEscape", "parameters": "(String escapeChars, StringBuffer buf)", "modifiers": "", "return": "void", "signature": "void optionEscape(String escapeChars, StringBuffer buf)", "full_signature": " void optionEscape(String escapeChars, StringBuffer buf)", "class_method_signature": "TokenStream.optionEscape(String escapeChars, StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "addValuedToken", "parameters": "(int type, StringBuffer buf, List<Token> tokenList)", "modifiers": "private", "return": "void", "signature": "void addValuedToken(int type, StringBuffer buf, List<Token> tokenList)", "full_signature": "private void addValuedToken(int type, StringBuffer buf, List<Token> tokenList)", "class_method_signature": "TokenStream.addValuedToken(int type, StringBuffer buf, List<Token> tokenList)", "testcase": false, "constructor": false}], "file": "logback-core/src/main/java/ch/qos/logback/core/pattern/parser/TokenStream.java"}, "focal_method": {"identifier": "tokenize", "parameters": "()", "modifiers": "", "return": "List<Token>", "body": "List<Token> tokenize() throws ScanException {\n        List<Token> tokenList = new ArrayList<Token>();\n        StringBuffer buf = new StringBuffer();\n\n        while (pointer < patternLength) {\n            char c = pattern.charAt(pointer);\n            pointer++;\n\n            switch (state) {\n            case LITERAL_STATE:\n                handleLiteralState(c, tokenList, buf);\n                break;\n            case FORMAT_MODIFIER_STATE:\n                handleFormatModifierState(c, tokenList, buf);\n                break;\n            case OPTION_STATE:\n                processOption(c, tokenList, buf);\n                break;\n            case KEYWORD_STATE:\n                handleKeywordState(c, tokenList, buf);\n                break;\n            case RIGHT_PARENTHESIS_STATE:\n                handleRightParenthesisState(c, tokenList, buf);\n                break;\n\n            default:\n            }\n        }\n\n        // EOS\n        switch (state) {\n        case LITERAL_STATE:\n            addValuedToken(Token.LITERAL, buf, tokenList);\n            break;\n        case KEYWORD_STATE:\n            tokenList.add(new Token(Token.SIMPLE_KEYWORD, buf.toString()));\n            break;\n        case RIGHT_PARENTHESIS_STATE:\n            tokenList.add(Token.RIGHT_PARENTHESIS_TOKEN);\n            break;\n\n        case FORMAT_MODIFIER_STATE:\n        case OPTION_STATE:\n            throw new ScanException(\"Unexpected end of pattern string\");\n        }\n\n        return tokenList;\n    }", "signature": "List<Token> tokenize()", "full_signature": " List<Token> tokenize()", "class_method_signature": "TokenStream.tokenize()", "testcase": false, "constructor": false, "invocations": ["charAt", "handleLiteralState", "handleFormatModifierState", "processOption", "handleKeywordState", "handleRightParenthesisState", "addValuedToken", "add", "toString", "add"]}, "repository": {"repo_id": 283325, "url": "https://github.com/qos-ch/logback", "stars": 1795, "created": "8/20/2009 6:48:24 PM +00:00", "updates": "2020-01-24T21:40:54+00:00", "fork": "False", "license": "licensed"}}