{"test_class": {"identifier": "ComponentValidatorReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameterized.Parameter\n    public Resource resource;", "modifier": "@Parameterized.Parameter\n    public", "type": "Resource", "declarator": "resource", "var_name": "resource"}], "file": "rdfunit-model/src/test/java/org/aksw/rdfunit/model/readers/shacl/ComponentValidatorReaderTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRead() {\n        ComponentValidatorReader.create(ComponentValidatorType.ASK_VALIDATOR).read(resource);\n    }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "ComponentValidatorReaderTest.testRead()", "testcase": true, "constructor": false, "invocations": ["read", "create"]}, "focal_class": {"identifier": "ComponentValidatorReader", "superclass": "", "interfaces": "implements ElementReader<ComponentValidator>", "fields": [{"original_string": "private final ComponentValidatorType type;", "modifier": "private final", "type": "ComponentValidatorType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "ComponentValidatorReader", "parameters": "(ComponentValidatorType type)", "modifiers": "private", "return": "", "signature": " ComponentValidatorReader(ComponentValidatorType type)", "full_signature": "private  ComponentValidatorReader(ComponentValidatorType type)", "class_method_signature": "ComponentValidatorReader.ComponentValidatorReader(ComponentValidatorType type)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(ComponentValidatorType type)", "modifiers": "public static", "return": "ComponentValidatorReader", "signature": "ComponentValidatorReader create(ComponentValidatorType type)", "full_signature": "public static ComponentValidatorReader create(ComponentValidatorType type)", "class_method_signature": "ComponentValidatorReader.create(ComponentValidatorType type)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Resource resource)", "modifiers": "@Override public", "return": "ComponentValidator", "signature": "ComponentValidator read(Resource resource)", "full_signature": "@Override public ComponentValidator read(Resource resource)", "class_method_signature": "ComponentValidatorReader.read(Resource resource)", "testcase": false, "constructor": false}], "file": "rdfunit-model/src/main/java/org/aksw/rdfunit/model/readers/shacl/ComponentValidatorReader.java"}, "focal_method": {"identifier": "read", "parameters": "(Resource resource)", "modifiers": "@Override public", "return": "ComponentValidator", "body": "@Override\n    public ComponentValidator read(Resource resource) {\n        checkNotNull(resource);\n\n        ComponentValidatorImpl.ComponentValidatorImplBuilder validatorBuilder = ComponentValidatorImpl.builder();\n\n        validatorBuilder.element(resource);\n        validatorBuilder.type(type);\n\n        // get message\n        for (Statement smt : resource.listProperties(SHACL.message).toList()) {\n            validatorBuilder.message(smt.getObject().asLiteral());\n        }\n\n        // get prefixes\n        for (Statement smt : resource.listProperties(SHACL.prefixes).toList()) {\n            RDFNode obj = smt.getObject();\n            if (obj.isResource()) {\n                validatorBuilder.prefixDeclarations(BatchPrefixDeclarationReader.create().getPrefixDeclarations(obj.asResource()));\n            }\n        }\n\n        //default ask query\n        for (Statement smt : resource.listProperties(SHACL.ask).toList()) {\n            checkArgument(type.equals(ComponentValidatorType.ASK_VALIDATOR), \"SPARQL SELECT-Based Validator contains ASK query: %s\", smt.getObject().asLiteral().getLexicalForm());\n            validatorBuilder.sparqlQuery(smt.getObject().asLiteral().getLexicalForm());\n        }\n\n        //default sparql query\n        for (Statement smt : resource.listProperties(SHACL.select).toList()) {\n            checkArgument(!type.equals(ComponentValidatorType.ASK_VALIDATOR), \"SPARQL ASK-Based Validator contains SELECT query %s\", smt.getObject().asLiteral().getLexicalForm());\n            validatorBuilder.sparqlQuery(smt.getObject().asLiteral().getLexicalForm());\n        }\n\n        // get filter\n        for (Statement smt : resource.listProperties(RDFUNIT_SHACL_EXT.filter).toList()) {\n            validatorBuilder.filter(smt.getObject().asLiteral().getLexicalForm());\n        }\n\n        return validatorBuilder.build();\n    }", "signature": "ComponentValidator read(Resource resource)", "full_signature": "@Override public ComponentValidator read(Resource resource)", "class_method_signature": "ComponentValidatorReader.read(Resource resource)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "builder", "element", "type", "toList", "listProperties", "message", "asLiteral", "getObject", "toList", "listProperties", "getObject", "isResource", "prefixDeclarations", "getPrefixDeclarations", "create", "asResource", "toList", "listProperties", "checkArgument", "equals", "getLexicalForm", "asLiteral", "getObject", "sparqlQuery", "getLexicalForm", "asLiteral", "getObject", "toList", "listProperties", "checkArgument", "equals", "getLexicalForm", "asLiteral", "getObject", "sparqlQuery", "getLexicalForm", "asLiteral", "getObject", "toList", "listProperties", "filter", "getLexicalForm", "asLiteral", "getObject", "build"]}, "repository": {"repo_id": 9165045, "url": "https://github.com/AKSW/RDFUnit", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 111, "size": 8756, "license": "licensed"}}