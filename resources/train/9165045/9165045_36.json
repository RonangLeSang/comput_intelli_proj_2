{"test_class": {"identifier": "MetricMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "rdfunit-w3c-dqv/src/test/java/org/aksw/rdfunit/dqv/MetricMapperTest.java"}, "test_case": {"identifier": "testCreateDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateDefault() {\n        MetricMapper metricMapper = MetricMapper.createDefault();\n\n        int DEFAULT_MAP_SIZE = 16;\n        assertThat(metricMapper.getMetricMap().size())\n                .isEqualTo(DEFAULT_MAP_SIZE);\n    }", "signature": "void testCreateDefault()", "full_signature": "@Test public void testCreateDefault()", "class_method_signature": "MetricMapperTest.testCreateDefault()", "testcase": true, "constructor": false, "invocations": ["createDefault", "isEqualTo", "assertThat", "size", "getMetricMap"]}, "focal_class": {"identifier": "MetricMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ImmutableMap<String, String> metricMap;", "modifier": "private final", "type": "ImmutableMap<String, String>", "declarator": "metricMap", "var_name": "metricMap"}], "methods": [{"identifier": "MetricMapper", "parameters": "(ImmutableMap<String, String> metricMap)", "modifiers": "private", "return": "", "signature": " MetricMapper(ImmutableMap<String, String> metricMap)", "full_signature": "private  MetricMapper(ImmutableMap<String, String> metricMap)", "class_method_signature": "MetricMapper.MetricMapper(ImmutableMap<String, String> metricMap)", "testcase": false, "constructor": true}, {"identifier": "getMetricMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getMetricMap()", "full_signature": "public Map<String, String> getMetricMap()", "class_method_signature": "MetricMapper.getMetricMap()", "testcase": false, "constructor": false}, {"identifier": "createDefault", "parameters": "()", "modifiers": "public static", "return": "MetricMapper", "signature": "MetricMapper createDefault()", "full_signature": "public static MetricMapper createDefault()", "class_method_signature": "MetricMapper.createDefault()", "testcase": false, "constructor": false}], "file": "rdfunit-w3c-dqv/src/main/java/org/aksw/rdfunit/dqv/MetricMapper.java"}, "focal_method": {"identifier": "createDefault", "parameters": "()", "modifiers": "public static", "return": "MetricMapper", "body": "public static MetricMapper createDefault() {\n\n        Model model;\n        try {\n            model = RdfReaderFactory.createResourceReader(\"/org/aksw/rdfunit/dqv/metricMappings.ttl\").read();\n        } catch (RdfReaderException e) {\n            throw new IllegalArgumentException(\"Cannot read default metric mappings\", e);\n        }\n\n        ImmutableMap.Builder<String, String> builder = new ImmutableMap.Builder<>();\n        model.listStatements().toList().stream()\n                .filter(smt -> smt.getPredicate().equals(RDFUNITv.metric))\n                .filter(smt -> smt.getObject().isResource())\n                .forEach(smt -> builder.put(smt.getSubject().getURI(), smt.getObject().asResource().getURI()));\n\n        return new MetricMapper(builder.build());\n    }", "signature": "MetricMapper createDefault()", "full_signature": "public static MetricMapper createDefault()", "class_method_signature": "MetricMapper.createDefault()", "testcase": false, "constructor": false, "invocations": ["read", "createResourceReader", "forEach", "filter", "filter", "stream", "toList", "listStatements", "equals", "getPredicate", "isResource", "getObject", "put", "getURI", "getSubject", "getURI", "asResource", "getObject", "build"]}, "repository": {"repo_id": 9165045, "url": "https://github.com/AKSW/RDFUnit", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 111, "size": 8756, "license": "licensed"}}