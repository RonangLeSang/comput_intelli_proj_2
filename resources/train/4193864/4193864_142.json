{"test_class": {"identifier": "XMLPersistenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String schemaFile = \"src/main/resources/importExportSchema/importExport.xsd\";", "modifier": "private final", "type": "String", "declarator": "schemaFile = \"src/main/resources/importExportSchema/importExport.xsd\"", "var_name": "schemaFile"}], "file": "ImportExportProvider/src/test/java/gov/nasa/jsc/mct/importExport/utilities/XMLPersistenceTest.java"}, "test_case": {"identifier": "exportDoesntValidate", "parameters": "()", "modifiers": "@Test (enabled=true, expectedExceptions=ValidationException.class) public", "return": "void", "body": "@Test  (enabled=true, expectedExceptions=ValidationException.class)\n    public void exportDoesntValidate() throws IOException, ValidationException{ \n        XMLPersistence.marshal(illegalComp(), \n        \t\t               new File(\"testExportDoesntValidate.xml\"));\n    }", "signature": "void exportDoesntValidate()", "full_signature": "@Test (enabled=true, expectedExceptions=ValidationException.class) public void exportDoesntValidate()", "class_method_signature": "XMLPersistenceTest.exportDoesntValidate()", "testcase": true, "constructor": false, "invocations": ["marshal", "illegalComp"]}, "focal_class": {"identifier": "XMLPersistence", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String schemaLocation = \"http://gov.nasa.arc.mct importExport.xsd\";", "modifier": "private static final", "type": "String", "declarator": "schemaLocation = \"http://gov.nasa.arc.mct importExport.xsd\"", "var_name": "schemaLocation"}, {"original_string": "private static final Logger LOGGER = LoggerFactory\n\t\t\t                            .getLogger(XMLPersistence.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n\t\t\t                            .getLogger(XMLPersistence.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "XMLPersistence", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLPersistence()", "full_signature": "private  XMLPersistence()", "class_method_signature": "XMLPersistence.XMLPersistence()", "testcase": false, "constructor": true}, {"identifier": "marshal", "parameters": "(ComponentListType primaryObject, File file)", "modifiers": "public static", "return": "void", "signature": "void marshal(ComponentListType primaryObject, File file)", "full_signature": "public static void marshal(ComponentListType primaryObject, File file)", "class_method_signature": "XMLPersistence.marshal(ComponentListType primaryObject, File file)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(T toBeMarshalled)", "modifiers": "public static", "return": "String", "signature": "String marshal(T toBeMarshalled)", "full_signature": "public static String marshal(T toBeMarshalled)", "class_method_signature": "XMLPersistence.marshal(T toBeMarshalled)", "testcase": false, "constructor": false}, {"identifier": "createNewMarshaller", "parameters": "(ComponentListType primaryObject)", "modifiers": "private static", "return": "Marshaller", "signature": "Marshaller createNewMarshaller(ComponentListType primaryObject)", "full_signature": "private static Marshaller createNewMarshaller(ComponentListType primaryObject)", "class_method_signature": "XMLPersistence.createNewMarshaller(ComponentListType primaryObject)", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(File xmlFile)", "modifiers": "public static", "return": "ComponentListType", "signature": "ComponentListType unmarshal(File xmlFile)", "full_signature": "public static ComponentListType unmarshal(File xmlFile)", "class_method_signature": "XMLPersistence.unmarshal(File xmlFile)", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(String props)", "modifiers": "public static", "return": "ExtendedProperties", "signature": "ExtendedProperties unmarshal(String props)", "full_signature": "public static ExtendedProperties unmarshal(String props)", "class_method_signature": "XMLPersistence.unmarshal(String props)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "private static", "return": "Schema", "signature": "Schema getSchema()", "full_signature": "private static Schema getSchema()", "class_method_signature": "XMLPersistence.getSchema()", "testcase": false, "constructor": false}, {"identifier": "getSchemaSource", "parameters": "()", "modifiers": "private static", "return": "StreamSource", "signature": "StreamSource getSchemaSource()", "full_signature": "private static StreamSource getSchemaSource()", "class_method_signature": "XMLPersistence.getSchemaSource()", "testcase": false, "constructor": false}, {"identifier": "handleError", "parameters": "(String errStr,\n\t\t\t                ValidationEventCollector validationEventCollector, File file)", "modifiers": "private static", "return": "void", "signature": "void handleError(String errStr,\n\t\t\t                ValidationEventCollector validationEventCollector, File file)", "full_signature": "private static void handleError(String errStr,\n\t\t\t                ValidationEventCollector validationEventCollector, File file)", "class_method_signature": "XMLPersistence.handleError(String errStr,\n\t\t\t                ValidationEventCollector validationEventCollector, File file)", "testcase": false, "constructor": false}], "file": "ImportExportProvider/src/main/java/gov/nasa/jsc/mct/importExport/utilities/XMLPersistence.java"}, "focal_method": {"identifier": "marshal", "parameters": "(ComponentListType primaryObject, File file)", "modifiers": "public static", "return": "void", "body": "public static void marshal(ComponentListType primaryObject, File file) \n\t\t\t           throws IOException, ValidationException{\n\t\tString errStr = null;\n\t\t\n\t\tif (primaryObject == null || primaryObject.getComponent() == null ||\n\t\t\t\tprimaryObject.getComponent().size() == 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Convert the ComponentListType into a JAXBElement.\n\t\tObjectFactory objFactory = new ObjectFactory();\n\t\tJAXBElement<ComponentListType> element = objFactory.createComponents(primaryObject);\n\t\tValidationEventCollector validationEventCollector = \n                                             new ValidationEventCollector();\n\n\t\tFileOutputStream fileOut = null;\n\n\t\t// open file\n\t\tif (file == null || file.equals(\"\")) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"XMLPersistence: File name is null or empty string\");\n\t\t}\n\n\t\ttry {\n\t\t\tfileOut = new FileOutputStream(file);\n\t\t\t\n\t\t\t// create marshaller\n\t\t\tMarshaller marshaller = createNewMarshaller(primaryObject);\n\t\t\t\n\t\t\t// Get schema and set marshaller for validation\n\t\t\tSchema schema = getSchema();\n            marshaller.setSchema(schema);\n\t\t\tmarshaller.setEventHandler(validationEventCollector);\n\t\t\t\n\t\t\t// Marshal\n\t\t\tmarshaller.marshal(element, fileOut);\n\t\t\tfileOut.close();\n\t\t\t\n\t\t} catch (JAXBException e) {\n\t\t\terrStr = String.format(\"JAXBException on file:%s due to: %s\",\n\t\t\t\t\tfile, e.getMessage());\n\t\t} catch (FileNotFoundException e) {\n\t\t\terrStr = String.format(\"Unable to find schema for xml file: %s Cause: %s. \" +\n\t\t\t\t\t\"Ensure Schema Path is set.\", file, e.getMessage());\n\t\t} catch (IOException e) {\n\t\t\terrStr = String.format(\"IOException on file:%s due to: %s\",\n\t\t\t\t\tfile, e.getMessage());\n\t\t} catch (SAXException e) {\n\t\t\terrStr = String.format(\"SAXException on file:%s due to: %s\",\n\t\t\t\t\tfile, e.getMessage());\n\t\t} finally {\n\t\t\thandleError(errStr, validationEventCollector, file);\n\t\t}\n\t}", "signature": "void marshal(ComponentListType primaryObject, File file)", "full_signature": "public static void marshal(ComponentListType primaryObject, File file)", "class_method_signature": "XMLPersistence.marshal(ComponentListType primaryObject, File file)", "testcase": false, "constructor": false, "invocations": ["getComponent", "size", "getComponent", "createComponents", "equals", "createNewMarshaller", "getSchema", "setSchema", "setEventHandler", "marshal", "close", "format", "getMessage", "format", "getMessage", "format", "getMessage", "format", "getMessage", "handleError"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}