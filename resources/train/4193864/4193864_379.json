{"test_class": {"identifier": "TestPanAndZoomManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate PlotAbstraction plotAbstraction;", "modifier": "@Mock\n\tprivate", "type": "PlotAbstraction", "declarator": "plotAbstraction", "var_name": "plotAbstraction"}, {"original_string": "private PlotterPlot plotTimeOnX;", "modifier": "private", "type": "PlotterPlot", "declarator": "plotTimeOnX", "var_name": "plotTimeOnX"}, {"original_string": "private PlotterPlot plotTimeOnY;", "modifier": "private", "type": "PlotterPlot", "declarator": "plotTimeOnY", "var_name": "plotTimeOnY"}, {"original_string": "PanAndZoomManager panAndZoomManagerTimeOnX;", "modifier": "", "type": "PanAndZoomManager", "declarator": "panAndZoomManagerTimeOnX", "var_name": "panAndZoomManagerTimeOnX"}, {"original_string": "PanAndZoomManager panAndZoomManagerTimeOnY;", "modifier": "", "type": "PanAndZoomManager", "declarator": "panAndZoomManagerTimeOnY", "var_name": "panAndZoomManagerTimeOnY"}, {"original_string": "private long now = System.currentTimeMillis();", "modifier": "private", "type": "long", "declarator": "now = System.currentTimeMillis()", "var_name": "now"}], "file": "fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestPanAndZoomManager.java"}, "test_case": {"identifier": "TestPanningActionsTimeOnY", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void TestPanningActionsTimeOnY() {\n\t\tXYAxis xAxis = plotTimeOnY.getPlotView().getXAxis();\n\t\tXYAxis yAxis = plotTimeOnY.getPlotView().getYAxis();\n\n\t\tdouble xStart = xAxis.getStart();\n\t\tdouble xStop = xAxis.getEnd();\n\t\t\n\t\tdouble yStart = yAxis.getStart();\n\t\tdouble yStop = yAxis.getEnd();\n\t\t\n\t\t\n\t\tpanAndZoomManagerTimeOnY.panAction(PanDirection.PAN_HIGHER_X_AXIS);\n\t\t\n\t\tdouble newXStart = xAxis.getStart();\n\t\tdouble newXStop = xAxis.getEnd();\n\t\tdouble newYStart = yAxis.getStart();\n\t\tdouble newYStop = yAxis.getEnd();\n\t\t\n\t\tAssert.assertTrue(newXStart > xStart);\n\t\tAssert.assertTrue(newXStop > xStop);\n\t\tAssert.assertEquals(newYStart, yStart);\n\t\tAssert.assertEquals(newYStop, yStop);\n\t\t\n\t\tpanAndZoomManagerTimeOnY.panAction(PanDirection.PAN_LOWER_X_AXIS);\n\t\t\n\t\tnewXStart = xAxis.getStart();\n\t\tnewXStop = xAxis.getEnd();\n\t\tnewYStart = yAxis.getStart();\n\t\tnewYStop = yAxis.getEnd();\n\t\t\n\t\tAssert.assertEquals(newXStart, xStart);\n\t\tAssert.assertEquals(newXStop, xStop);\t\n\t\tAssert.assertEquals(newYStart, yStart);\n\t\tAssert.assertEquals(newYStop, yStop);\n\t\t\n\t\tpanAndZoomManagerTimeOnY.panAction(PanDirection.PAN_LOWER_X_AXIS);\n\t\t\n\t\tnewXStart = xAxis.getStart();\n\t\tnewXStop = xAxis.getEnd();\n\t\tnewYStart = yAxis.getStart();\n\t\tnewYStop = yAxis.getEnd();\n\t\t\n\t\tAssert.assertTrue(newXStart < xStart);\n\t\tAssert.assertTrue(newXStop < xStop);\n\t\tAssert.assertEquals(newYStart, yStart);\n\t\tAssert.assertEquals(newYStop, yStop);\n\t\t\n\t\tpanAndZoomManagerTimeOnY.panAction(PanDirection.PAN_HIGHER_X_AXIS);\n\t\tnewXStart = xAxis.getStart();\n\t\tnewXStop = xAxis.getEnd();\n\t\tnewYStart = yAxis.getStart();\n\t\tnewYStop = yAxis.getEnd();\n\t\t\n\t\tAssert.assertEquals(newYStart, yStart);\n\t\tAssert.assertEquals(newYStop, yStop);\n\t\tAssert.assertEquals(newXStart, xStart);\n\t\tAssert.assertEquals(newXStop, xStop);\n\t\t\n\t\tpanAndZoomManagerTimeOnY.panAction(PanDirection.PAN_HIGHER_Y_AXIS);\n\t\n\t\tnewXStart = xAxis.getStart();\n\t\tnewXStop = xAxis.getEnd();\n\t\tnewYStart = yAxis.getStart();\n\t\tnewYStop = yAxis.getEnd();\n\t\t\n\t\tAssert.assertTrue(newYStart > yStart);\n\t\tAssert.assertTrue(newYStop > yStop);\n\t\tAssert.assertEquals(newXStart, xStart);\n\t\tAssert.assertEquals(newXStop, xStop);\n\t\t\n\t\tpanAndZoomManagerTimeOnY.panAction(PanDirection.PAN_LOWER_Y_AXIS);\t\n\t\tnewXStart = xAxis.getStart();\n\t\tnewXStop = xAxis.getEnd();\n\t\tnewYStart = yAxis.getStart();\n\t\tnewYStop = yAxis.getEnd();\n\t\t\n\t\tAssert.assertEquals(newYStart, yStart);\n\t\tAssert.assertEquals(newYStop, yStop);\n\t\tAssert.assertEquals(newXStart, xStart);\n\t\tAssert.assertEquals(newXStop, xStop);\n\t\t\n\t\tpanAndZoomManagerTimeOnY.panAction(PanDirection.PAN_LOWER_Y_AXIS);\t\n\t\tnewXStart = xAxis.getStart();\n\t\tnewXStop = xAxis.getEnd();\n\t\tnewYStart = yAxis.getStart();\n\t\tnewYStop = yAxis.getEnd();\n\t\t\n\t\tAssert.assertTrue(newYStart < yStart);\n\t\tAssert.assertTrue(newYStop < yStop);\n\t\tAssert.assertEquals(newXStart, xStart);\n\t\tAssert.assertEquals(newXStop, xStop);\n\t}", "signature": "void TestPanningActionsTimeOnY()", "full_signature": "@Test public void TestPanningActionsTimeOnY()", "class_method_signature": "TestPanAndZoomManager.TestPanningActionsTimeOnY()", "testcase": true, "constructor": false, "invocations": ["getXAxis", "getPlotView", "getYAxis", "getPlotView", "getStart", "getEnd", "getStart", "getEnd", "panAction", "getStart", "getEnd", "getStart", "getEnd", "assertTrue", "assertTrue", "assertEquals", "assertEquals", "panAction", "getStart", "getEnd", "getStart", "getEnd", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "panAction", "getStart", "getEnd", "getStart", "getEnd", "assertTrue", "assertTrue", "assertEquals", "assertEquals", "panAction", "getStart", "getEnd", "getStart", "getEnd", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "panAction", "getStart", "getEnd", "getStart", "getEnd", "assertTrue", "assertTrue", "assertEquals", "assertEquals", "panAction", "getStart", "getEnd", "getStart", "getEnd", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "panAction", "getStart", "getEnd", "getStart", "getEnd", "assertTrue", "assertTrue", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "PanAndZoomManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(PanAndZoomManager.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PanAndZoomManager.class)", "var_name": "logger"}, {"original_string": "private PlotterPlot plot;", "modifier": "private", "type": "PlotterPlot", "declarator": "plot", "var_name": "plot"}, {"original_string": "private boolean inZoomMode;", "modifier": "private", "type": "boolean", "declarator": "inZoomMode", "var_name": "inZoomMode"}, {"original_string": "private boolean inPanMode;", "modifier": "private", "type": "boolean", "declarator": "inPanMode", "var_name": "inPanMode"}], "methods": [{"identifier": "PanAndZoomManager", "parameters": "(PlotterPlot quinnCurtisPlot)", "modifiers": "public", "return": "", "signature": " PanAndZoomManager(PlotterPlot quinnCurtisPlot)", "full_signature": "public  PanAndZoomManager(PlotterPlot quinnCurtisPlot)", "class_method_signature": "PanAndZoomManager.PanAndZoomManager(PlotterPlot quinnCurtisPlot)", "testcase": false, "constructor": true}, {"identifier": "enteredPanMode", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enteredPanMode()", "full_signature": "public void enteredPanMode()", "class_method_signature": "PanAndZoomManager.enteredPanMode()", "testcase": false, "constructor": false}, {"identifier": "exitedPanMode", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void exitedPanMode()", "full_signature": "public void exitedPanMode()", "class_method_signature": "PanAndZoomManager.exitedPanMode()", "testcase": false, "constructor": false}, {"identifier": "enteredZoomMode", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enteredZoomMode()", "full_signature": "public void enteredZoomMode()", "class_method_signature": "PanAndZoomManager.enteredZoomMode()", "testcase": false, "constructor": false}, {"identifier": "exitedZoomMode", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void exitedZoomMode()", "full_signature": "public void exitedZoomMode()", "class_method_signature": "PanAndZoomManager.exitedZoomMode()", "testcase": false, "constructor": false}, {"identifier": "isInZoomMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInZoomMode()", "full_signature": "public boolean isInZoomMode()", "class_method_signature": "PanAndZoomManager.isInZoomMode()", "testcase": false, "constructor": false}, {"identifier": "isInPanMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInPanMode()", "full_signature": "public boolean isInPanMode()", "class_method_signature": "PanAndZoomManager.isInPanMode()", "testcase": false, "constructor": false}, {"identifier": "panAction", "parameters": "(PanDirection panningAction)", "modifiers": "public", "return": "void", "signature": "void panAction(PanDirection panningAction)", "full_signature": "public void panAction(PanDirection panningAction)", "class_method_signature": "PanAndZoomManager.panAction(PanDirection panningAction)", "testcase": false, "constructor": false}, {"identifier": "pinTime", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void pinTime()", "full_signature": "private void pinTime()", "class_method_signature": "PanAndZoomManager.pinTime()", "testcase": false, "constructor": false}, {"identifier": "pinNonTime", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void pinNonTime()", "full_signature": "private void pinNonTime()", "class_method_signature": "PanAndZoomManager.pinNonTime()", "testcase": false, "constructor": false}, {"identifier": "markTimeZoomed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void markTimeZoomed()", "full_signature": "private void markTimeZoomed()", "class_method_signature": "PanAndZoomManager.markTimeZoomed()", "testcase": false, "constructor": false}, {"identifier": "markNonTimeZoomed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void markNonTimeZoomed()", "full_signature": "private void markNonTimeZoomed()", "class_method_signature": "PanAndZoomManager.markNonTimeZoomed()", "testcase": false, "constructor": false}, {"identifier": "zoomAction", "parameters": "(ZoomDirection zoomAction)", "modifiers": "public", "return": "void", "signature": "void zoomAction(ZoomDirection zoomAction)", "full_signature": "public void zoomAction(ZoomDirection zoomAction)", "class_method_signature": "PanAndZoomManager.zoomAction(ZoomDirection zoomAction)", "testcase": false, "constructor": false}], "file": "fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PanAndZoomManager.java"}, "focal_method": {"identifier": "panAction", "parameters": "(PanDirection panningAction)", "modifiers": "public", "return": "void", "body": "public void panAction(PanDirection panningAction) {\n\t\tXYAxis xAxis = plot.getPlotView().getXAxis();\n\t\tXYAxis yAxis = plot.getPlotView().getYAxis();\n\t\tif (plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {\n\t\t\tdouble nonTimeScalePanAmount = yAxis.getEnd() - yAxis.getStart();\n\t\t\tdouble timeScalePanAmount = xAxis.getEnd() - xAxis.getStart();\n\t\t\t\n\t\t\ttimeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_PERCENTAGE;\n\t\t\tnonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_PERCENTAGE;\n\n\t\t\tif (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {\n\t\t\t\tyAxis.shift(nonTimeScalePanAmount);\n\t\t\t\tpinNonTime();\n\t\t\t} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {\n\t\t\t\tyAxis.shift(-nonTimeScalePanAmount);\n\t\t\t\tpinNonTime();\n\t\t\t} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {\n\t\t\t\txAxis.shift(-timeScalePanAmount);\n\t\t\t\tpinTime();\n\t\t\t\tplot.notifyObserversTimeChange();\n\t\t\t} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {\n\t\t\t\txAxis.shift(timeScalePanAmount);\n\t\t\t\tpinTime();\n\t\t\t\tplot.notifyObserversTimeChange();\n\t\t\t}\t\t\n\t\t} else {\n\t\t\t\n\t\t\tdouble nonTimeScalePanAmount = xAxis.getEnd() - xAxis.getStart();\n\t\t\tdouble timeScalePanAmount = yAxis.getEnd() - yAxis.getStart();\n\t\t\t\n\t\t\ttimeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_PERCENTAGE;\n\t\t\tnonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_PERCENTAGE;\n\t\t\t\n\t\t\tif (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {\n\t\t\t\tyAxis.shift(timeScalePanAmount);\n\t\t\t\tpinTime();\n\t\t\t\tplot.notifyObserversTimeChange();\n\t\t\t} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {\n\t\t\t\tyAxis.shift(-timeScalePanAmount);\n\t\t\t\tpinTime();\n\t\t\t\tplot.notifyObserversTimeChange();\n\t\t\t} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {\n\t\t\t\txAxis.shift(-nonTimeScalePanAmount);\n\t\t\t\tpinNonTime();\n\t\t\t} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {\n\t\t\t\txAxis.shift(nonTimeScalePanAmount);\n\t\t\t\tpinNonTime();\n\t\t\t}\t\n\t\t}\n\t\tplot.getPlotAbstraction().updateResetButtons();\n\t\tplot.refreshDisplay();\n\t\t//Always request data refresh\n\t\tplot.clearAllDataFromPlot();\n\t\tplot.getLimitManager().setModeUntranslated(false);\n\t\tplot.getPlotAbstraction().requestPlotData(plot.getCurrentTimeAxisMin(), plot.getCurrentTimeAxisMax());\n\n\t}", "signature": "void panAction(PanDirection panningAction)", "full_signature": "public void panAction(PanDirection panningAction)", "class_method_signature": "PanAndZoomManager.panAction(PanDirection panningAction)", "testcase": false, "constructor": false, "invocations": ["getXAxis", "getPlotView", "getYAxis", "getPlotView", "getAxisOrientationSetting", "getEnd", "getStart", "getEnd", "getStart", "shift", "pinNonTime", "shift", "pinNonTime", "shift", "pinTime", "notifyObserversTimeChange", "shift", "pinTime", "notifyObserversTimeChange", "getEnd", "getStart", "getEnd", "getStart", "shift", "pinTime", "notifyObserversTimeChange", "shift", "pinTime", "notifyObserversTimeChange", "shift", "pinNonTime", "shift", "pinNonTime", "updateResetButtons", "getPlotAbstraction", "refreshDisplay", "clearAllDataFromPlot", "setModeUntranslated", "getLimitManager", "requestPlotData", "getPlotAbstraction", "getCurrentTimeAxisMin", "getCurrentTimeAxisMax"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}