{"test_class": {"identifier": "CODataBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataBuffer codataBuffer;", "modifier": "private", "type": "DataBuffer", "declarator": "codataBuffer", "var_name": "codataBuffer"}, {"original_string": "private String testFeedID1 = \"TestPui1\";", "modifier": "private", "type": "String", "declarator": "testFeedID1 = \"TestPui1\"", "var_name": "testFeedID1"}, {"original_string": "private String testFeedID2 = \"TestPui2\";", "modifier": "private", "type": "String", "declarator": "testFeedID2 = \"TestPui2\"", "var_name": "testFeedID2"}, {"original_string": "private File bufferLocation;", "modifier": "private", "type": "File", "declarator": "bufferLocation", "var_name": "bufferLocation"}], "file": "timeSequenceFeedAggregator/src/test/java/gov/nasa/arc/mct/buffer/internal/CODataBufferTest.java"}, "test_case": {"identifier": "putDataTimeRangeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void putDataTimeRangeTest() throws Exception {\n        long time = System.currentTimeMillis();\n\n        Map<String, String> value = new HashMap<String, String>();\n        value.put(\"value\", \"1.3\");\n        value.put(\"status\", \"ok\");\n        Map<Long, Map<String, String>> feedData1 = new HashMap<Long, Map<String, String>>();\n        feedData1.put(time, value);\n\n        Map<String, String> value2 = new HashMap<String, String>();\n        value2.put(\"value\", \"1.4\");\n        value2.put(\"status\", \"ok\");\n        Map<Long, Map<String, String>> feedData2 = new HashMap<Long, Map<String, String>>();\n        feedData2.put(time + 100, value2);\n\n        Map<String, Map<Long, Map<String, String>>> data = new HashMap<String, Map<Long, Map<String, String>>>();\n        data.put(testFeedID1, feedData1);\n        data.put(testFeedID2, feedData2);\n        codataBuffer.putData(data, TimeUnit.MILLISECONDS, null);\n\n        long nanotime = TimeUnit.NANOSECONDS.convert(time, TimeUnit.MILLISECONDS);\n        long nanotime2 = TimeUnit.NANOSECONDS.convert(time + 100, TimeUnit.MILLISECONDS);\n        Assert.assertEquals(codataBuffer.metaDataBuffer.getStartTimestamp(0, testFeedID1), nanotime);\n        Assert.assertEquals(codataBuffer.metaDataBuffer.getEndTimestamp(0, testFeedID1), nanotime);\n        Assert.assertEquals(codataBuffer.metaDataBuffer.getStartTimestamp(0, testFeedID2), nanotime2);\n        Assert.assertEquals(codataBuffer.metaDataBuffer.getEndTimestamp(0, testFeedID2), nanotime2);\n    }", "signature": "void putDataTimeRangeTest()", "full_signature": "@Test public void putDataTimeRangeTest()", "class_method_signature": "CODataBufferTest.putDataTimeRangeTest()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "put", "put", "put", "put", "put", "put", "put", "put", "putData", "convert", "convert", "assertEquals", "getStartTimestamp", "assertEquals", "getEndTimestamp", "assertEquals", "getStartTimestamp", "assertEquals", "getEndTimestamp"]}, "focal_class": {"identifier": "CODataBuffer", "superclass": "extends DataBuffer", "interfaces": "implements DataArchive, DataProvider", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CODataBuffer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CODataBuffer.class)", "var_name": "LOGGER"}, {"original_string": "private static final Logger PERF_READ_LOGGER = LoggerFactory\n    .getLogger(\"gov.nasa.arc.mct.performance.read.codbuffer\");", "modifier": "private static final", "type": "Logger", "declarator": "PERF_READ_LOGGER = LoggerFactory\n    .getLogger(\"gov.nasa.arc.mct.performance.read.codbuffer\")", "var_name": "PERF_READ_LOGGER"}, {"original_string": "private static final Logger PERF_WRITE_LOGGER = LoggerFactory\n    .getLogger(\"gov.nasa.arc.mct.performance.write.codbuffer\");", "modifier": "private static final", "type": "Logger", "declarator": "PERF_WRITE_LOGGER = LoggerFactory\n    .getLogger(\"gov.nasa.arc.mct.performance.write.codbuffer\")", "var_name": "PERF_WRITE_LOGGER"}, {"original_string": "private static final Logger PERF_LOGGER = LoggerFactory\n                    .getLogger(\"gov.nasa.arc.mct.performance.codbuffer\");", "modifier": "private static final", "type": "Logger", "declarator": "PERF_LOGGER = LoggerFactory\n                    .getLogger(\"gov.nasa.arc.mct.performance.codbuffer\")", "var_name": "PERF_LOGGER"}], "methods": [{"identifier": "CODataBuffer", "parameters": "(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "modifiers": "", "return": "", "signature": " CODataBuffer(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "full_signature": "  CODataBuffer(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "class_method_signature": "CODataBuffer.CODataBuffer(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "testcase": false, "constructor": true}, {"identifier": "setupPartitionBuffers", "parameters": "(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "modifiers": "@Override protected", "return": "void", "signature": "void setupPartitionBuffers(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "full_signature": "@Override protected void setupPartitionBuffers(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "class_method_signature": "CODataBuffer.setupPartitionBuffers(DataBufferEnv env, DataBufferHelper partitionBufferFactory)", "testcase": false, "constructor": false}, {"identifier": "mapFeedsToPartitions", "parameters": "(Set<String> feedIDs, long startTime, long endTime, TimeUnit timeUnit)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Map<String, FeedRequestContext>[]", "signature": "Map<String, FeedRequestContext>[] mapFeedsToPartitions(Set<String> feedIDs, long startTime, long endTime, TimeUnit timeUnit)", "full_signature": "@SuppressWarnings(\"unchecked\") private Map<String, FeedRequestContext>[] mapFeedsToPartitions(Set<String> feedIDs, long startTime, long endTime, TimeUnit timeUnit)", "class_method_signature": "CODataBuffer.mapFeedsToPartitions(Set<String> feedIDs, long startTime, long endTime, TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(Set<String> feedIDs, long startTime, long endTime,\n            TimeUnit timeUnit)", "modifiers": "@Override public", "return": "Map<String, SortedMap<Long, Map<String, String>>>", "signature": "Map<String, SortedMap<Long, Map<String, String>>> getData(Set<String> feedIDs, long startTime, long endTime,\n            TimeUnit timeUnit)", "full_signature": "@Override public Map<String, SortedMap<Long, Map<String, String>>> getData(Set<String> feedIDs, long startTime, long endTime,\n            TimeUnit timeUnit)", "class_method_signature": "CODataBuffer.getData(Set<String> feedIDs, long startTime, long endTime,\n            TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(Set<String> feedIDs, TimeUnit timeUnit, long startTime,\n            long endTime)", "modifiers": "@Override public", "return": "Map<String, List<Map<String, String>>>", "signature": "Map<String, List<Map<String, String>>> getData(Set<String> feedIDs, TimeUnit timeUnit, long startTime,\n            long endTime)", "full_signature": "@Override public Map<String, List<Map<String, String>>> getData(Set<String> feedIDs, TimeUnit timeUnit, long startTime,\n            long endTime)", "class_method_signature": "CODataBuffer.getData(Set<String> feedIDs, TimeUnit timeUnit, long startTime,\n            long endTime)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(PartitionDataBuffer partitionDataBuffer, Map<String, FeedRequestContext> feedRequestContexts, TimeUnit timeUnit,\n                    long startTime, long endTime)", "modifiers": "private", "return": "Map<String, SortedMap<Long, Map<String, String>>>", "signature": "Map<String, SortedMap<Long, Map<String, String>>> getData(PartitionDataBuffer partitionDataBuffer, Map<String, FeedRequestContext> feedRequestContexts, TimeUnit timeUnit,\n                    long startTime, long endTime)", "full_signature": "private Map<String, SortedMap<Long, Map<String, String>>> getData(PartitionDataBuffer partitionDataBuffer, Map<String, FeedRequestContext> feedRequestContexts, TimeUnit timeUnit,\n                    long startTime, long endTime)", "class_method_signature": "CODataBuffer.getData(PartitionDataBuffer partitionDataBuffer, Map<String, FeedRequestContext> feedRequestContexts, TimeUnit timeUnit,\n                    long startTime, long endTime)", "testcase": false, "constructor": false}, {"identifier": "putData", "parameters": "(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "modifiers": "@Override public", "return": "void", "signature": "void putData(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "full_signature": "@Override public void putData(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "class_method_signature": "CODataBuffer.putData(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "testcase": false, "constructor": false}, {"identifier": "putData", "parameters": "(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit, MetaDataBuffer metadata, int metadataIndex)", "modifiers": "private", "return": "void", "signature": "void putData(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit, MetaDataBuffer metadata, int metadataIndex)", "full_signature": "private void putData(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit, MetaDataBuffer metadata, int metadataIndex)", "class_method_signature": "CODataBuffer.putData(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit, MetaDataBuffer metadata, int metadataIndex)", "testcase": false, "constructor": false}, {"identifier": "putData", "parameters": "(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit)", "modifiers": "private", "return": "Map<String, PartitionTimestamps>", "signature": "Map<String, PartitionTimestamps> putData(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit)", "full_signature": "private Map<String, PartitionTimestamps> putData(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit)", "class_method_signature": "CODataBuffer.putData(PartitionDataBuffer partitionBuffer, Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "putData", "parameters": "(Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit,\n                    Runnable callback)", "modifiers": "@Override public", "return": "void", "signature": "void putData(Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit,\n                    Runnable callback)", "full_signature": "@Override public void putData(Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit,\n                    Runnable callback)", "class_method_signature": "CODataBuffer.putData(Map<String, Map<Long, Map<String, String>>> value, TimeUnit timeUnit,\n                    Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "putData", "parameters": "(String feedID, TimeUnit timeUnit, long time, Map<String, String> value)", "modifiers": "@Override public", "return": "void", "signature": "void putData(String feedID, TimeUnit timeUnit, long time, Map<String, String> value)", "full_signature": "@Override public void putData(String feedID, TimeUnit timeUnit, long time, Map<String, String> value)", "class_method_signature": "CODataBuffer.putData(String feedID, TimeUnit timeUnit, long time, Map<String, String> value)", "testcase": false, "constructor": false}], "file": "timeSequenceFeedAggregator/src/main/java/gov/nasa/arc/mct/buffer/internal/CODataBuffer.java"}, "focal_method": {"identifier": "putData", "parameters": "(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void putData(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries) throws BufferFullException {\n        synchronized (movePartitionLock) {\n            if (reset) return;\n        }\n        \n        final ElapsedTimer timer = new ElapsedTimer();\n        timer.startInterval();\n\n        Map<String, Map<Long, Map<String, String>>> feedDataToPut = new HashMap<String, Map<Long,Map<String,String>>>();\n        feedDataToPut.put(feedID, entries);\n        \n        int i = this.currentParition.getBufferEnv().getCurrentBufferPartition();\n        int startPartition = i;\n        do {\n            PartitionDataBuffer partitionBuffer = this.partitionDataBuffers[i].get();\n            if (partitionBuffer == null || !partitionBuffer.isActive()) {\n                break;\n            }\n            \n            LOGGER.debug(\"Putting in partition {}\", i);\n\n            Map<String, PartitionTimestamps> timeStamps = putData(partitionBuffer, feedDataToPut, timeUnit);\n            if (timeStamps != null) {\n                metaDataBuffer.updatePartitionMetaData(partitionBuffer.getBufferEnv().getCurrentBufferPartition(), timeStamps);\n            }\n            i = (i + 1) % this.currentParition.getBufferEnv().getNumOfBufferPartitions();\n        } while (i != startPartition);\n\n        timer.stopInterval();\n        PERF_LOGGER.debug(\"Time to save data for feed {}: {}\", feedID, timer.getIntervalInMillis());\n\n    }", "signature": "void putData(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "full_signature": "@Override public void putData(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "class_method_signature": "CODataBuffer.putData(String feedID, TimeUnit timeUnit, Map<Long, Map<String, String>> entries)", "testcase": false, "constructor": false, "invocations": ["startInterval", "put", "getCurrentBufferPartition", "getBufferEnv", "get", "isActive", "debug", "putData", "updatePartitionMetaData", "getCurrentBufferPartition", "getBufferEnv", "getNumOfBufferPartitions", "getBufferEnv", "stopInterval", "debug", "getIntervalInMillis"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}