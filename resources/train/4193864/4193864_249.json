{"test_class": {"identifier": "AbbreviationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private ComponentContext context;", "modifier": "@Mock private", "type": "ComponentContext", "declarator": "context", "var_name": "context"}, {"original_string": "AbbreviationServiceImpl abbrev;", "modifier": "", "type": "AbbreviationServiceImpl", "declarator": "abbrev", "var_name": "abbrev"}, {"original_string": "Dictionary<String, String> properties;", "modifier": "", "type": "Dictionary<String, String>", "declarator": "properties", "var_name": "properties"}], "file": "tableViews/src/test/java/gov/nasa/arc/mct/abbreviation/impl/AbbreviationServiceImplTest.java"}, "test_case": {"identifier": "testFindFile", "parameters": "(String path, String fileProperty)", "modifiers": "@Test(dataProvider=\"findFileTests\") public", "return": "void", "body": "@Test(dataProvider=\"findFileTests\")\n\tpublic void testFindFile(String path, String fileProperty) throws IOException {\n\t\tInputStream in;\n\t\tProperties p;\n\t\t\n\t\tp = new Properties();\n\t\tin = abbrev.findFile(path);\n\t\tassertNotNull(in);\n\t\tp.load(in);\n\t\tassertEquals(p.getProperty(\"file\"), fileProperty);\n\t}", "signature": "void testFindFile(String path, String fileProperty)", "full_signature": "@Test(dataProvider=\"findFileTests\") public void testFindFile(String path, String fileProperty)", "class_method_signature": "AbbreviationServiceImplTest.testFindFile(String path, String fileProperty)", "testcase": true, "constructor": false, "invocations": ["findFile", "assertNotNull", "load", "assertEquals", "getProperty"]}, "focal_class": {"identifier": "AbbreviationServiceImpl", "superclass": "", "interfaces": "implements AbbreviationService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AbbreviationServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AbbreviationServiceImpl.class)", "var_name": "logger"}, {"original_string": "private static final String ABBREVIATIONS_FILE_PROPERTY = \"abbreviations-file\";", "modifier": "private static final", "type": "String", "declarator": "ABBREVIATIONS_FILE_PROPERTY = \"abbreviations-file\"", "var_name": "ABBREVIATIONS_FILE_PROPERTY"}, {"original_string": "private AbbreviationsManager manager;", "modifier": "private", "type": "AbbreviationsManager", "declarator": "manager", "var_name": "manager"}], "methods": [{"identifier": "activate", "parameters": "(ComponentContext context)", "modifiers": "public", "return": "void", "signature": "void activate(ComponentContext context)", "full_signature": "public void activate(ComponentContext context)", "class_method_signature": "AbbreviationServiceImpl.activate(ComponentContext context)", "testcase": false, "constructor": false}, {"identifier": "findFile", "parameters": "(String path)", "modifiers": "", "return": "InputStream", "signature": "InputStream findFile(String path)", "full_signature": " InputStream findFile(String path)", "class_method_signature": "AbbreviationServiceImpl.findFile(String path)", "testcase": false, "constructor": false}, {"identifier": "getAbbreviations", "parameters": "(String s)", "modifiers": "@Override public", "return": "Abbreviations", "signature": "Abbreviations getAbbreviations(String s)", "full_signature": "@Override public Abbreviations getAbbreviations(String s)", "class_method_signature": "AbbreviationServiceImpl.getAbbreviations(String s)", "testcase": false, "constructor": false}], "file": "tableViews/src/main/java/gov/nasa/arc/mct/abbreviation/impl/AbbreviationServiceImpl.java"}, "focal_method": {"identifier": "findFile", "parameters": "(String path)", "modifiers": "", "return": "InputStream", "body": "InputStream findFile(String path) {\n\t\t// 1. Try to find using the file path, which may be absolute or\n\t\t// relative to the current directory.\n\t\tFile f = new File(path);\n\t\tif (f.isFile() && f.canRead()) {\n\t\t\ttry {\n\t\t\t\treturn new FileInputStream(f);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// ignore, for now\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 2. Try to find a resource in the bundle. This return value may be null,\n\t\t// if no resource is found matching the path.\n\t\treturn getClass().getResourceAsStream(path);\n\t}", "signature": "InputStream findFile(String path)", "full_signature": " InputStream findFile(String path)", "class_method_signature": "AbbreviationServiceImpl.findFile(String path)", "testcase": false, "constructor": false, "invocations": ["isFile", "canRead", "getResourceAsStream", "getClass"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}