{"test_class": {"identifier": "TestMCTMutableTreeNode", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock View mockViewManif;", "modifier": "@Mock", "type": "View", "declarator": "mockViewManif", "var_name": "mockViewManif"}, {"original_string": "@Mock View mockViewManif2;", "modifier": "@Mock", "type": "View", "declarator": "mockViewManif2", "var_name": "mockViewManif2"}, {"original_string": "@Mock ComponentFilterable mockComponent;", "modifier": "@Mock", "type": "ComponentFilterable", "declarator": "mockComponent", "var_name": "mockComponent"}, {"original_string": "@Mock ComponentFilterable mockComponent2;", "modifier": "@Mock", "type": "ComponentFilterable", "declarator": "mockComponent2", "var_name": "mockComponent2"}, {"original_string": "private JTree myJTree;", "modifier": "private", "type": "JTree", "declarator": "myJTree", "var_name": "myJTree"}, {"original_string": "private MCTMutableTreeNode myTreeNode;", "modifier": "private", "type": "MCTMutableTreeNode", "declarator": "myTreeNode", "var_name": "myTreeNode"}], "file": "mctcore/src/test/java/gov/nasa/arc/mct/gui/TestMCTMutableTreeNode.java"}, "test_case": {"identifier": "testGetTreePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTreePath() {\n        assertNotNull(myTreeNode.getTreePath());\n    }", "signature": "void testGetTreePath()", "full_signature": "@Test public void testGetTreePath()", "class_method_signature": "TestMCTMutableTreeNode.testGetTreePath()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getTreePath"]}, "focal_class": {"identifier": "MCTMutableTreeNode", "superclass": "extends DefaultMutableTreeNode", "interfaces": "", "fields": [{"original_string": "public static final String PARENT_CLIENT_PROPERTY_NAME = \"parent\";", "modifier": "public static final", "type": "String", "declarator": "PARENT_CLIENT_PROPERTY_NAME = \"parent\"", "var_name": "PARENT_CLIENT_PROPERTY_NAME"}, {"original_string": "private JTree parentTree;", "modifier": "private", "type": "JTree", "declarator": "parentTree", "var_name": "parentTree"}, {"original_string": "private boolean isProxy = false;", "modifier": "private", "type": "boolean", "declarator": "isProxy = false", "var_name": "isProxy"}, {"original_string": "private boolean isVisible = true;", "modifier": "private", "type": "boolean", "declarator": "isVisible = true", "var_name": "isVisible"}], "methods": [{"identifier": "MCTMutableTreeNode", "parameters": "()", "modifiers": "public", "return": "", "signature": " MCTMutableTreeNode()", "full_signature": "public  MCTMutableTreeNode()", "class_method_signature": "MCTMutableTreeNode.MCTMutableTreeNode()", "testcase": false, "constructor": true}, {"identifier": "MCTMutableTreeNode", "parameters": "(JComponent userObject)", "modifiers": "public", "return": "", "signature": " MCTMutableTreeNode(JComponent userObject)", "full_signature": "public  MCTMutableTreeNode(JComponent userObject)", "class_method_signature": "MCTMutableTreeNode.MCTMutableTreeNode(JComponent userObject)", "testcase": false, "constructor": true}, {"identifier": "MCTMutableTreeNode", "parameters": "(JComponent userObject, JTree parentTree)", "modifiers": "public", "return": "", "signature": " MCTMutableTreeNode(JComponent userObject, JTree parentTree)", "full_signature": "public  MCTMutableTreeNode(JComponent userObject, JTree parentTree)", "class_method_signature": "MCTMutableTreeNode.MCTMutableTreeNode(JComponent userObject, JTree parentTree)", "testcase": false, "constructor": true}, {"identifier": "MCTMutableTreeNode", "parameters": "(JComponent userObject, boolean allowsChildren)", "modifiers": "public", "return": "", "signature": " MCTMutableTreeNode(JComponent userObject, boolean allowsChildren)", "full_signature": "public  MCTMutableTreeNode(JComponent userObject, boolean allowsChildren)", "class_method_signature": "MCTMutableTreeNode.MCTMutableTreeNode(JComponent userObject, boolean allowsChildren)", "testcase": false, "constructor": true}, {"identifier": "MCTMutableTreeNode", "parameters": "(JComponent userObject, JTree parentTree, boolean allowsChildren)", "modifiers": "public", "return": "", "signature": " MCTMutableTreeNode(JComponent userObject, JTree parentTree, boolean allowsChildren)", "full_signature": "public  MCTMutableTreeNode(JComponent userObject, JTree parentTree, boolean allowsChildren)", "class_method_signature": "MCTMutableTreeNode.MCTMutableTreeNode(JComponent userObject, JTree parentTree, boolean allowsChildren)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(MutableTreeNode newChild)", "modifiers": "@Override public", "return": "void", "signature": "void add(MutableTreeNode newChild)", "full_signature": "@Override public void add(MutableTreeNode newChild)", "class_method_signature": "MCTMutableTreeNode.add(MutableTreeNode newChild)", "testcase": false, "constructor": false}, {"identifier": "setProxy", "parameters": "(boolean isProxy)", "modifiers": "public", "return": "void", "signature": "void setProxy(boolean isProxy)", "full_signature": "public void setProxy(boolean isProxy)", "class_method_signature": "MCTMutableTreeNode.setProxy(boolean isProxy)", "testcase": false, "constructor": false}, {"identifier": "isProxy", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isProxy()", "full_signature": "public boolean isProxy()", "class_method_signature": "MCTMutableTreeNode.isProxy()", "testcase": false, "constructor": false}, {"identifier": "isVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isVisible()", "full_signature": "public boolean isVisible()", "class_method_signature": "MCTMutableTreeNode.isVisible()", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(int index)", "modifiers": "@Override public", "return": "TreeNode", "signature": "TreeNode getChildAt(int index)", "full_signature": "@Override public TreeNode getChildAt(int index)", "class_method_signature": "MCTMutableTreeNode.getChildAt(int index)", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getChildCount()", "full_signature": "@Override public int getChildCount()", "class_method_signature": "MCTMutableTreeNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "removeAllChildren", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllChildren()", "full_signature": "@Override public void removeAllChildren()", "class_method_signature": "MCTMutableTreeNode.removeAllChildren()", "testcase": false, "constructor": false}, {"identifier": "removeAllChildren", "parameters": "(PropertyChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void removeAllChildren(PropertyChangeListener listener)", "full_signature": "public void removeAllChildren(PropertyChangeListener listener)", "class_method_signature": "MCTMutableTreeNode.removeAllChildren(PropertyChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "getParentTree", "parameters": "()", "modifiers": "public", "return": "JTree", "signature": "JTree getParentTree()", "full_signature": "public JTree getParentTree()", "class_method_signature": "MCTMutableTreeNode.getParentTree()", "testcase": false, "constructor": false}, {"identifier": "setParentTree", "parameters": "(JTree parentTree)", "modifiers": "public", "return": "void", "signature": "void setParentTree(JTree parentTree)", "full_signature": "public void setParentTree(JTree parentTree)", "class_method_signature": "MCTMutableTreeNode.setParentTree(JTree parentTree)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(int childIndex, MCTMutableTreeNode childNode)", "modifiers": "private", "return": "void", "signature": "void addChild(int childIndex, MCTMutableTreeNode childNode)", "full_signature": "private void addChild(int childIndex, MCTMutableTreeNode childNode)", "class_method_signature": "MCTMutableTreeNode.addChild(int childIndex, MCTMutableTreeNode childNode)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(int index, MCTMutableTreeNode newNode, PropertyChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void addChild(int index, MCTMutableTreeNode newNode, PropertyChangeListener listener)", "full_signature": "public void addChild(int index, MCTMutableTreeNode newNode, PropertyChangeListener listener)", "class_method_signature": "MCTMutableTreeNode.addChild(int index, MCTMutableTreeNode newNode, PropertyChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(MCTMutableTreeNode childNode)", "modifiers": "public", "return": "void", "signature": "void refresh(MCTMutableTreeNode childNode)", "full_signature": "public void refresh(MCTMutableTreeNode childNode)", "class_method_signature": "MCTMutableTreeNode.refresh(MCTMutableTreeNode childNode)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(MCTMutableTreeNode node)", "modifiers": "private", "return": "TreePath", "signature": "TreePath getPath(MCTMutableTreeNode node)", "full_signature": "private TreePath getPath(MCTMutableTreeNode node)", "class_method_signature": "MCTMutableTreeNode.getPath(MCTMutableTreeNode node)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refresh()", "full_signature": "public void refresh()", "class_method_signature": "MCTMutableTreeNode.refresh()", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(MCTMutableTreeNode childNode, PropertyChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void removeChild(MCTMutableTreeNode childNode, PropertyChangeListener listener)", "full_signature": "public void removeChild(MCTMutableTreeNode childNode, PropertyChangeListener listener)", "class_method_signature": "MCTMutableTreeNode.removeChild(MCTMutableTreeNode childNode, PropertyChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "getTreePath", "parameters": "()", "modifiers": "public", "return": "TreePath", "signature": "TreePath getTreePath()", "full_signature": "public TreePath getTreePath()", "class_method_signature": "MCTMutableTreeNode.getTreePath()", "testcase": false, "constructor": false}], "file": "mctcore/src/main/java/gov/nasa/arc/mct/gui/MCTMutableTreeNode.java"}, "focal_method": {"identifier": "getTreePath", "parameters": "()", "modifiers": "public", "return": "TreePath", "body": "public TreePath getTreePath() {\n        return new TreePath(getPath());\n    }", "signature": "TreePath getTreePath()", "full_signature": "public TreePath getTreePath()", "class_method_signature": "MCTMutableTreeNode.getTreePath()", "testcase": false, "constructor": false, "invocations": ["getPath"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}