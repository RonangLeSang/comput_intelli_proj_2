{"test_class": {"identifier": "CanvasFormattingControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Panel> selectedPanels = new ArrayList<Panel>();", "modifier": "private", "type": "List<Panel>", "declarator": "selectedPanels = new ArrayList<Panel>()", "var_name": "selectedPanels"}, {"original_string": "@Mock\n    private AbstractComponent mockComponent;", "modifier": "@Mock\n    private", "type": "AbstractComponent", "declarator": "mockComponent", "var_name": "mockComponent"}, {"original_string": "@Mock\n    private PanelFocusSelectionProvider panelFocusSelectionProvider;", "modifier": "@Mock\n    private", "type": "PanelFocusSelectionProvider", "declarator": "panelFocusSelectionProvider", "var_name": "panelFocusSelectionProvider"}, {"original_string": "@Mock private ViewInfo mockIconInfo;", "modifier": "@Mock private", "type": "ViewInfo", "declarator": "mockIconInfo", "var_name": "mockIconInfo"}, {"original_string": "@Mock private ViewInfo mockTitleInfo;", "modifier": "@Mock private", "type": "ViewInfo", "declarator": "mockTitleInfo", "var_name": "mockTitleInfo"}, {"original_string": "@Mock private View mockIconView;", "modifier": "@Mock private", "type": "View", "declarator": "mockIconView", "var_name": "mockIconView"}, {"original_string": "@Mock private View mockTitleView;", "modifier": "@Mock private", "type": "View", "declarator": "mockTitleView", "var_name": "mockTitleView"}, {"original_string": "private ViewInfo canvasViewInfo;", "modifier": "private", "type": "ViewInfo", "declarator": "canvasViewInfo", "var_name": "canvasViewInfo"}], "file": "canvas/src/test/java/gov/nasa/arc/mct/canvas/view/CanvasFormattingControllerTest.java"}, "test_case": {"identifier": "notifyTitleBarStatusTest", "parameters": "()", "modifiers": "@SuppressWarnings(\"serial\") @Test public", "return": "void", "body": "@SuppressWarnings(\"serial\")\n    @Test\n    public void notifyTitleBarStatusTest() {\n        final ExtendedProperties viewProps = new ExtendedProperties();\n        CanvasManifestation canvas1 = new CanvasManifestation(mockComponent,canvasViewInfo) {\n            public ExtendedProperties getViewProperties() {\n                return viewProps;\n            };\n        };\n\n        TestPanel panel = new TestPanel(addManifestInfo(canvas1), panelFocusSelectionProvider);\n        panel.setBounds(100, 200, 100, 100);\n        selectedPanels.add(panel);\n        CanvasManifestation canvas2 = new CanvasManifestation(mockComponent,canvasViewInfo) {\n            public ExtendedProperties getViewProperties() {\n                return viewProps;\n            };\n        };\n\n        panel = new TestPanel(addManifestInfo(canvas2),\n                        panelFocusSelectionProvider);\n        panel.setBounds(100, 100, 50, 100);\n        selectedPanels.add(panel);\n\n        CanvasFormattingController.notifyTitleBarStatus(true, selectedPanels);\n\n        for (Panel p : selectedPanels) {\n            panel = (TestPanel) p;\n            \n            Assert.assertTrue(panel.hasTitle());\n            \n            MCTViewManifestationInfo info = CanvasManifestation.getManifestationInfo(panel.getWrappedManifestation());\n            Assert.assertTrue(info.hasTitlePanel());\n        }\n        \n        CanvasFormattingController.notifyTitleBarStatus(false, selectedPanels);\n\n        for (Panel p : selectedPanels) {\n            panel = (TestPanel) p;\n            \n            Assert.assertFalse(panel.hasTitle());\n            \n            MCTViewManifestationInfo info = CanvasManifestation.getManifestationInfo(panel.getWrappedManifestation());\n            Assert.assertFalse(info.hasTitlePanel());\n        }\n    }", "signature": "void notifyTitleBarStatusTest()", "full_signature": "@SuppressWarnings(\"serial\") @Test public void notifyTitleBarStatusTest()", "class_method_signature": "CanvasFormattingControllerTest.notifyTitleBarStatusTest()", "testcase": true, "constructor": false, "invocations": ["addManifestInfo", "setBounds", "add", "addManifestInfo", "setBounds", "add", "notifyTitleBarStatus", "assertTrue", "hasTitle", "getManifestationInfo", "getWrappedManifestation", "assertTrue", "hasTitlePanel", "notifyTitleBarStatus", "assertFalse", "hasTitle", "getManifestationInfo", "getWrappedManifestation", "assertFalse", "hasTitlePanel"]}, "focal_class": {"identifier": "CanvasFormattingController", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CanvasFormattingController", "parameters": "()", "modifiers": "private", "return": "", "signature": " CanvasFormattingController()", "full_signature": "private  CanvasFormattingController()", "class_method_signature": "CanvasFormattingController.CanvasFormattingController()", "testcase": false, "constructor": true}, {"identifier": "notifyXPropertyChange", "parameters": "(int newXValue, Panel selectedPanel)", "modifiers": "public static", "return": "void", "signature": "void notifyXPropertyChange(int newXValue, Panel selectedPanel)", "full_signature": "public static void notifyXPropertyChange(int newXValue, Panel selectedPanel)", "class_method_signature": "CanvasFormattingController.notifyXPropertyChange(int newXValue, Panel selectedPanel)", "testcase": false, "constructor": false}, {"identifier": "notifyYPropertyChange", "parameters": "(int newYValue, Panel selectedPanel)", "modifiers": "public static", "return": "void", "signature": "void notifyYPropertyChange(int newYValue, Panel selectedPanel)", "full_signature": "public static void notifyYPropertyChange(int newYValue, Panel selectedPanel)", "class_method_signature": "CanvasFormattingController.notifyYPropertyChange(int newYValue, Panel selectedPanel)", "testcase": false, "constructor": false}, {"identifier": "notifyWidthPropertyChange", "parameters": "(int newWdith, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyWidthPropertyChange(int newWdith, List<Panel> selectedPanels)", "full_signature": "public static void notifyWidthPropertyChange(int newWdith, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyWidthPropertyChange(int newWdith, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyHeightPropertyChange", "parameters": "(int newHeight, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyHeightPropertyChange(int newHeight, List<Panel> selectedPanels)", "full_signature": "public static void notifyHeightPropertyChange(int newHeight, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyHeightPropertyChange(int newHeight, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyAlignLeftSelected", "parameters": "(List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyAlignLeftSelected(List<Panel> selectedPanels)", "full_signature": "public static void notifyAlignLeftSelected(List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyAlignLeftSelected(List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyAlignCenterHSelected", "parameters": "(List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyAlignCenterHSelected(List<Panel> selectedPanels)", "full_signature": "public static void notifyAlignCenterHSelected(List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyAlignCenterHSelected(List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyAlignRightSelected", "parameters": "(List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyAlignRightSelected(List<Panel> selectedPanels)", "full_signature": "public static void notifyAlignRightSelected(List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyAlignRightSelected(List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyAlignTopSelected", "parameters": "(List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyAlignTopSelected(List<Panel> selectedPanels)", "full_signature": "public static void notifyAlignTopSelected(List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyAlignTopSelected(List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyAlignBottomSelected", "parameters": "(List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyAlignBottomSelected(List<Panel> selectedPanels)", "full_signature": "public static void notifyAlignBottomSelected(List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyAlignBottomSelected(List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyAlignVCenterSelected", "parameters": "(List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyAlignVCenterSelected(List<Panel> selectedPanels)", "full_signature": "public static void notifyAlignVCenterSelected(List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyAlignVCenterSelected(List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyWestBorderStatus", "parameters": "(boolean status, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyWestBorderStatus(boolean status, List<Panel> selectedPanels)", "full_signature": "public static void notifyWestBorderStatus(boolean status, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyWestBorderStatus(boolean status, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyEastBorderStatus", "parameters": "(boolean status, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyEastBorderStatus(boolean status, List<Panel> selectedPanels)", "full_signature": "public static void notifyEastBorderStatus(boolean status, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyEastBorderStatus(boolean status, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyNorthBorderStatus", "parameters": "(boolean status, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyNorthBorderStatus(boolean status, List<Panel> selectedPanels)", "full_signature": "public static void notifyNorthBorderStatus(boolean status, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyNorthBorderStatus(boolean status, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifySouthBorderStatus", "parameters": "(boolean status, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifySouthBorderStatus(boolean status, List<Panel> selectedPanels)", "full_signature": "public static void notifySouthBorderStatus(boolean status, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifySouthBorderStatus(boolean status, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyAllBorderStatus", "parameters": "(boolean status, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyAllBorderStatus(boolean status, List<Panel> selectedPanels)", "full_signature": "public static void notifyAllBorderStatus(boolean status, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyAllBorderStatus(boolean status, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyBorderColorSelected", "parameters": "(Color selectedColor, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyBorderColorSelected(Color selectedColor, List<Panel> selectedPanels)", "full_signature": "public static void notifyBorderColorSelected(Color selectedColor, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyBorderColorSelected(Color selectedColor, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyBorderFormattingStyle", "parameters": "(int style, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyBorderFormattingStyle(int style, List<Panel> selectedPanels)", "full_signature": "public static void notifyBorderFormattingStyle(int style, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyBorderFormattingStyle(int style, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyTitleBarStatus", "parameters": "(boolean status, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyTitleBarStatus(boolean status, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarStatus(boolean status, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarStatus(boolean status, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyTitleBarFontSelected", "parameters": "(String fontFamilyName, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyTitleBarFontSelected(String fontFamilyName, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarFontSelected(String fontFamilyName, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarFontSelected(String fontFamilyName, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyTitleBarFontSizeSelected", "parameters": "(Integer fontSize, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyTitleBarFontSizeSelected(Integer fontSize, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarFontSizeSelected(Integer fontSize, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarFontSizeSelected(Integer fontSize, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyTitleBarFontStyleSelected", "parameters": "(Integer fontStyle, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyTitleBarFontStyleSelected(Integer fontStyle, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarFontStyleSelected(Integer fontStyle, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarFontStyleSelected(Integer fontStyle, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyTitleBarFontUnderlineSelected", "parameters": "(Integer fontStyle, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyTitleBarFontUnderlineSelected(Integer fontStyle, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarFontUnderlineSelected(Integer fontStyle, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarFontUnderlineSelected(Integer fontStyle, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyTitleBarFontForegroundColorSelected", "parameters": "(Integer fontForegroundColor, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyTitleBarFontForegroundColorSelected(Integer fontForegroundColor, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarFontForegroundColorSelected(Integer fontForegroundColor, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarFontForegroundColorSelected(Integer fontForegroundColor, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyTitleBarFontBackgroundColorSelected", "parameters": "(Integer fontBackgroundColor, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "signature": "void notifyTitleBarFontBackgroundColorSelected(Integer fontBackgroundColor, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarFontBackgroundColorSelected(Integer fontBackgroundColor, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarFontBackgroundColorSelected(Integer fontBackgroundColor, List<Panel> selectedPanels)", "testcase": false, "constructor": false}, {"identifier": "notifyNewTitle", "parameters": "(String newTitle, List<Panel> selectedPanels)", "modifiers": "static", "return": "void", "signature": "void notifyNewTitle(String newTitle, List<Panel> selectedPanels)", "full_signature": "static void notifyNewTitle(String newTitle, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyNewTitle(String newTitle, List<Panel> selectedPanels)", "testcase": false, "constructor": false}], "file": "canvas/src/main/java/gov/nasa/arc/mct/canvas/view/CanvasFormattingController.java"}, "focal_method": {"identifier": "notifyTitleBarStatus", "parameters": "(boolean status, List<Panel> selectedPanels)", "modifiers": "public static", "return": "void", "body": "public static void notifyTitleBarStatus(boolean status, List<Panel> selectedPanels) {\n        for (Panel panel : selectedPanels) {\n            panel.hideTitle(status);\n        }\n    }", "signature": "void notifyTitleBarStatus(boolean status, List<Panel> selectedPanels)", "full_signature": "public static void notifyTitleBarStatus(boolean status, List<Panel> selectedPanels)", "class_method_signature": "CanvasFormattingController.notifyTitleBarStatus(boolean status, List<Panel> selectedPanels)", "testcase": false, "constructor": false, "invocations": ["hideTitle"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}