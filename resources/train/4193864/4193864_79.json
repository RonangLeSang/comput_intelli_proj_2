{"test_class": {"identifier": "TestInspector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_COMPONENT_ID = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_COMPONENT_ID = \"test\"", "var_name": "TEST_COMPONENT_ID"}, {"original_string": "@Mock private AbstractComponent mockComponent;", "modifier": "@Mock private", "type": "AbstractComponent", "declarator": "mockComponent", "var_name": "mockComponent"}, {"original_string": "@Mock private ViewInfo mockViewInfo;", "modifier": "@Mock private", "type": "ViewInfo", "declarator": "mockViewInfo", "var_name": "mockViewInfo"}, {"original_string": "@Mock private ViewInfo mockInspectorInfo;", "modifier": "@Mock private", "type": "ViewInfo", "declarator": "mockInspectorInfo", "var_name": "mockInspectorInfo"}, {"original_string": "@Mock private SelectionContainer mockSelection;", "modifier": "@Mock private", "type": "SelectionContainer", "declarator": "mockSelection", "var_name": "mockSelection"}, {"original_string": "@Mock private AncestorEvent mockAncestorEvent;", "modifier": "@Mock private", "type": "AncestorEvent", "declarator": "mockAncestorEvent", "var_name": "mockAncestorEvent"}, {"original_string": "@Mock private PropertyChangeEvent mockPropertyEvent;", "modifier": "@Mock private", "type": "PropertyChangeEvent", "declarator": "mockPropertyEvent", "var_name": "mockPropertyEvent"}, {"original_string": "@Mock private Platform mockPlatform;", "modifier": "@Mock private", "type": "Platform", "declarator": "mockPlatform", "var_name": "mockPlatform"}, {"original_string": "@Mock private PersistenceProvider mockPersistence;", "modifier": "@Mock private", "type": "PersistenceProvider", "declarator": "mockPersistence", "var_name": "mockPersistence"}, {"original_string": "@Mock private PolicyManager mockPolicyManager;", "modifier": "@Mock private", "type": "PolicyManager", "declarator": "mockPolicyManager", "var_name": "mockPolicyManager"}, {"original_string": "@Mock private WindowManager mockWindowManager;", "modifier": "@Mock private", "type": "WindowManager", "declarator": "mockWindowManager", "var_name": "mockWindowManager"}, {"original_string": "private PropertyChangeListener inspectorPropertyChangeListener;", "modifier": "private", "type": "PropertyChangeListener", "declarator": "inspectorPropertyChangeListener", "var_name": "inspectorPropertyChangeListener"}, {"original_string": "private View view;", "modifier": "private", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "private Inspector inspector;", "modifier": "private", "type": "Inspector", "declarator": "inspector", "var_name": "inspector"}, {"original_string": "private Platform originalPlatform;", "modifier": "private", "type": "Platform", "declarator": "originalPlatform", "var_name": "originalPlatform"}], "file": "platform/src/test/java/gov/nasa/arc/mct/gui/housing/TestInspector.java"}, "test_case": {"identifier": "testSetHousedViewManifestation", "parameters": "(boolean stale, boolean dirty, final boolean save, boolean expectPrompt, boolean expectChange, boolean expectSave)", "modifiers": "@Test (dataProvider=\"generateSetCases\") public", "return": "void", "body": "@Test (dataProvider=\"generateSetCases\")\n    public void testSetHousedViewManifestation(boolean stale, boolean dirty, final boolean save, boolean expectPrompt, boolean expectChange, boolean expectSave) {\n        // Select something in the inspector\n        inspectorPropertyChangeListener.propertyChange(mockPropertyEvent);\n        \n        // Create a new view to switch to\n        ViewInfo newViewInfo = Mockito.mock(ViewInfo.class);       \n        @SuppressWarnings(\"serial\")\n        View     newView = new View(mockComponent, newViewInfo) {};\n               \n        Mockito.when(mockComponent.isStale()).thenReturn(stale);\n        Mockito.when(mockComponent.isDirty()).thenReturn(dirty);\n        Mockito.when(newViewInfo.createView(mockComponent)).thenReturn(newView);\n        Mockito.when(newViewInfo.getType()).thenReturn(\"new\");\n        Mockito.when(mockWindowManager.showInputDialog(Mockito.anyString(), Mockito.anyString(), Mockito.<Object[]>any(), Mockito.any(), Mockito.<Map<String,Object>>any())).thenAnswer(new Answer<Object>() {\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                Object[] options = (Object[]) invocation.getArguments()[2];\n                return save ? options[0] : options[1]; // options[0] presumed to mean \"OK\"\n            }\n        });\n        \n        // Try to change housed view\n        inspector.setHousedViewManifestation(newViewInfo);\n        \n        // Verify that dialog was popped up, iff it was expected\n        Mockito.verify(mockWindowManager, Mockito.times(expectPrompt ? 1 : 0))\n            .showInputDialog(Mockito.anyString(), Mockito.anyString(), Mockito.<Object[]>any(), Mockito.any(), Mockito.<Map<String,Object>>any());\n        \n        // Verify that view has or hasn't changed, based on expectations\n        Assert.assertEquals(inspector.getHousedViewManifestation(), expectChange ? newView : view);\n        \n        // Verify that component was saved, if that was expected\n        Mockito.verify(mockPersistence, Mockito.times(expectSave ? 1 : 0)).persist(Mockito.<Collection<AbstractComponent>>argThat(new ArgumentMatcher<Collection<AbstractComponent>>() {\n            @Override\n            public boolean matches(Object argument) {                \n                return argument instanceof Collection && ((Collection)argument).contains(mockComponent);\n            }\n        }));\n    }", "signature": "void testSetHousedViewManifestation(boolean stale, boolean dirty, final boolean save, boolean expectPrompt, boolean expectChange, boolean expectSave)", "full_signature": "@Test (dataProvider=\"generateSetCases\") public void testSetHousedViewManifestation(boolean stale, boolean dirty, final boolean save, boolean expectPrompt, boolean expectChange, boolean expectSave)", "class_method_signature": "TestInspector.testSetHousedViewManifestation(boolean stale, boolean dirty, final boolean save, boolean expectPrompt, boolean expectChange, boolean expectSave)", "testcase": true, "constructor": false, "invocations": ["propertyChange", "mock", "thenReturn", "when", "isStale", "thenReturn", "when", "isDirty", "thenReturn", "when", "createView", "thenReturn", "when", "getType", "thenAnswer", "when", "showInputDialog", "anyString", "anyString", "any", "any", "any", "getArguments", "setHousedViewManifestation", "showInputDialog", "verify", "times", "anyString", "anyString", "any", "any", "any", "assertEquals", "getHousedViewManifestation", "persist", "verify", "times", "argThat", "contains"]}, "focal_class": {"identifier": "Inspector", "superclass": "extends View", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_INSPECTOR_VIEW_PROP_KEY = \"DefaultInspector\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_INSPECTOR_VIEW_PROP_KEY = \"DefaultInspector\"", "var_name": "DEFAULT_INSPECTOR_VIEW_PROP_KEY"}, {"original_string": "private static final Color BACKGROUND_COLOR = LafColor.WINDOW_BORDER.darker();", "modifier": "private static final", "type": "Color", "declarator": "BACKGROUND_COLOR = LafColor.WINDOW_BORDER.darker()", "var_name": "BACKGROUND_COLOR"}, {"original_string": "private static final Color FOREGROUND_COLOR = LafColor.WINDOW.brighter();", "modifier": "private static final", "type": "Color", "declarator": "FOREGROUND_COLOR = LafColor.WINDOW.brighter()", "var_name": "FOREGROUND_COLOR"}, {"original_string": "private static final ResourceBundle BUNDLE = \n            ResourceBundle.getBundle(\n                    Inspector.class.getName().substring(0, \n                            Inspector.class.getName().lastIndexOf(\".\"))+\".Bundle\");", "modifier": "private static final", "type": "ResourceBundle", "declarator": "BUNDLE = \n            ResourceBundle.getBundle(\n                    Inspector.class.getName().substring(0, \n                            Inspector.class.getName().lastIndexOf(\".\"))+\".Bundle\")", "var_name": "BUNDLE"}, {"original_string": "private static final String INFO_VIEW_TYPE = \"gov.nasa.arc.mct.defaults.view.InfoView\";", "modifier": "private static final", "type": "String", "declarator": "INFO_VIEW_TYPE = \"gov.nasa.arc.mct.defaults.view.InfoView\"", "var_name": "INFO_VIEW_TYPE"}, {"original_string": "private static String preferredViewType = INFO_VIEW_TYPE;", "modifier": "private static", "type": "String", "declarator": "preferredViewType = INFO_VIEW_TYPE", "var_name": "preferredViewType"}, {"original_string": "private final PropertyChangeListener selectionChangeListener = new PropertyChangeListener() {\n        @Override\n        public void propertyChange(PropertyChangeEvent evt) {\n            if (view != null && !view.getManifestedComponent().isStale() && view.getManifestedComponent().isDirty()) {\n                commitOrAbortPendingChanges();\n            }\n            @SuppressWarnings(\"unchecked\")\n            Collection<View> selectedViews =  (Collection<View>) evt.getNewValue();\n            if (selectedViews.isEmpty() || selectedViews.size() > 1) {\n                selectedManifestationChanged(null, null);\n            } else {\n                // Retrieve component from database.\n                AbstractComponent ac = PlatformAccess.getPlatform().getPersistenceProvider().getComponent(selectedViews.iterator().next().getManifestedComponent().getComponentId());\n                // Selection changed is fired when a tree node is removed. \n                if (ac != null) {\n                    Set<ViewInfo> viewInfos = ac.getViewInfos(ViewType.OBJECT);\n                    ViewInfo preferredViewInfo = null, infoViewInfo = null;\n                    for (ViewInfo vi : viewInfos) {\n                        if (preferredViewType.equals(vi.getType()))\n                            preferredViewInfo = vi;\n                        if (INFO_VIEW_TYPE.equals(vi.getType()))\n                            infoViewInfo = vi;\n                    }\n                    if (preferredViewInfo == null && infoViewInfo == null)\n                        selectedManifestationChanged(viewInfos.iterator().next(), ac);\n                    else\n                        selectedManifestationChanged(preferredViewInfo != null ? preferredViewInfo : infoViewInfo, ac);\n                }\n            }\n        }\n    };", "modifier": "private final", "type": "PropertyChangeListener", "declarator": "selectionChangeListener = new PropertyChangeListener() {\n        @Override\n        public void propertyChange(PropertyChangeEvent evt) {\n            if (view != null && !view.getManifestedComponent().isStale() && view.getManifestedComponent().isDirty()) {\n                commitOrAbortPendingChanges();\n            }\n            @SuppressWarnings(\"unchecked\")\n            Collection<View> selectedViews =  (Collection<View>) evt.getNewValue();\n            if (selectedViews.isEmpty() || selectedViews.size() > 1) {\n                selectedManifestationChanged(null, null);\n            } else {\n                // Retrieve component from database.\n                AbstractComponent ac = PlatformAccess.getPlatform().getPersistenceProvider().getComponent(selectedViews.iterator().next().getManifestedComponent().getComponentId());\n                // Selection changed is fired when a tree node is removed. \n                if (ac != null) {\n                    Set<ViewInfo> viewInfos = ac.getViewInfos(ViewType.OBJECT);\n                    ViewInfo preferredViewInfo = null, infoViewInfo = null;\n                    for (ViewInfo vi : viewInfos) {\n                        if (preferredViewType.equals(vi.getType()))\n                            preferredViewInfo = vi;\n                        if (INFO_VIEW_TYPE.equals(vi.getType()))\n                            infoViewInfo = vi;\n                    }\n                    if (preferredViewInfo == null && infoViewInfo == null)\n                        selectedManifestationChanged(viewInfos.iterator().next(), ac);\n                    else\n                        selectedManifestationChanged(preferredViewInfo != null ? preferredViewInfo : infoViewInfo, ac);\n                }\n            }\n        }\n    }", "var_name": "selectionChangeListener"}, {"original_string": "private final PropertyChangeListener objectStaleListener = new PropertyChangeListener() {\n        \n        @Override\n        public void propertyChange(PropertyChangeEvent evt) {\n            STALE_LABEL.setVisible((Boolean)evt.getNewValue());            \n        }\n    };", "modifier": "private final", "type": "PropertyChangeListener", "declarator": "objectStaleListener = new PropertyChangeListener() {\n        \n        @Override\n        public void propertyChange(PropertyChangeEvent evt) {\n            STALE_LABEL.setVisible((Boolean)evt.getNewValue());            \n        }\n    }", "var_name": "objectStaleListener"}, {"original_string": "private final JLabel STALE_LABEL = new JLabel(BUNDLE.getString(\"view.modified.status.bar.text\"));", "modifier": "private final", "type": "JLabel", "declarator": "STALE_LABEL = new JLabel(BUNDLE.getString(\"view.modified.status.bar.text\"))", "var_name": "STALE_LABEL"}, {"original_string": "private JLabel viewTitle = new JLabel();", "modifier": "private", "type": "JLabel", "declarator": "viewTitle = new JLabel()", "var_name": "viewTitle"}, {"original_string": "private JLabel space = new JLabel(\" \");", "modifier": "private", "type": "JLabel", "declarator": "space = new JLabel(\" \")", "var_name": "space"}, {"original_string": "private JPanel emptyPanel = new JPanel();", "modifier": "private", "type": "JPanel", "declarator": "emptyPanel = new JPanel()", "var_name": "emptyPanel"}, {"original_string": "private JComponent content;", "modifier": "private", "type": "JComponent", "declarator": "content", "var_name": "content"}, {"original_string": "private View view;", "modifier": "private", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "private JComponent viewControls;", "modifier": "private", "type": "JComponent", "declarator": "viewControls", "var_name": "viewControls"}, {"original_string": "private JPanel titlebar = new JPanel();", "modifier": "private", "type": "JPanel", "declarator": "titlebar = new JPanel()", "var_name": "titlebar"}, {"original_string": "private JPanel statusbar = new JPanel();", "modifier": "private", "type": "JPanel", "declarator": "statusbar = new JPanel()", "var_name": "statusbar"}, {"original_string": "private GridBagConstraints c = new GridBagConstraints();", "modifier": "private", "type": "GridBagConstraints", "declarator": "c = new GridBagConstraints()", "var_name": "c"}, {"original_string": "private JToggleButton controlAreaToggle = new SettingsButton();", "modifier": "private", "type": "JToggleButton", "declarator": "controlAreaToggle = new SettingsButton()", "var_name": "controlAreaToggle"}, {"original_string": "private ContextAwareButton refreshButton = new ContextAwareButton(new RefreshAction());", "modifier": "private", "type": "ContextAwareButton", "declarator": "refreshButton = new ContextAwareButton(new RefreshAction())", "var_name": "refreshButton"}, {"original_string": "private ActionContext context = new ActionContextImpl() {\n        @Override\n        public View getWindowManifestation() {\n            return Inspector.this;\n        }\n    };", "modifier": "private", "type": "ActionContext", "declarator": "context = new ActionContextImpl() {\n        @Override\n        public View getWindowManifestation() {\n            return Inspector.this;\n        }\n    }", "var_name": "context"}, {"original_string": "private boolean isLocked = false;", "modifier": "private", "type": "boolean", "declarator": "isLocked = false", "var_name": "isLocked"}], "methods": [{"identifier": "Inspector", "parameters": "(AbstractComponent ac, ViewInfo vi)", "modifiers": "public", "return": "", "signature": " Inspector(AbstractComponent ac, ViewInfo vi)", "full_signature": "public  Inspector(AbstractComponent ac, ViewInfo vi)", "class_method_signature": "Inspector.Inspector(AbstractComponent ac, ViewInfo vi)", "testcase": false, "constructor": true}, {"identifier": "getCurrentlyShowingComponent", "parameters": "()", "modifiers": "public", "return": "AbstractComponent", "signature": "AbstractComponent getCurrentlyShowingComponent()", "full_signature": "public AbstractComponent getCurrentlyShowingComponent()", "class_method_signature": "Inspector.getCurrentlyShowingComponent()", "testcase": false, "constructor": false}, {"identifier": "commitOrAbortPendingChanges", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean commitOrAbortPendingChanges()", "full_signature": "private boolean commitOrAbortPendingChanges()", "class_method_signature": "Inspector.commitOrAbortPendingChanges()", "testcase": false, "constructor": false}, {"identifier": "refreshCurrentlyShowingView", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refreshCurrentlyShowingView()", "full_signature": "public void refreshCurrentlyShowingView()", "class_method_signature": "Inspector.refreshCurrentlyShowingView()", "testcase": false, "constructor": false}, {"identifier": "refreshInspector", "parameters": "(ViewInfo viewInfo)", "modifiers": "private", "return": "void", "signature": "void refreshInspector(ViewInfo viewInfo)", "full_signature": "private void refreshInspector(ViewInfo viewInfo)", "class_method_signature": "Inspector.refreshInspector(ViewInfo viewInfo)", "testcase": false, "constructor": false}, {"identifier": "populateStatusBar", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateStatusBar()", "full_signature": "private void populateStatusBar()", "class_method_signature": "Inspector.populateStatusBar()", "testcase": false, "constructor": false}, {"identifier": "getHousedViewManifestation", "parameters": "()", "modifiers": "@Override public", "return": "View", "signature": "View getHousedViewManifestation()", "full_signature": "@Override public View getHousedViewManifestation()", "class_method_signature": "Inspector.getHousedViewManifestation()", "testcase": false, "constructor": false}, {"identifier": "selectedManifestationChanged", "parameters": "(ViewInfo viewInfo, AbstractComponent ac)", "modifiers": "private", "return": "void", "signature": "void selectedManifestationChanged(ViewInfo viewInfo, AbstractComponent ac)", "full_signature": "private void selectedManifestationChanged(ViewInfo viewInfo, AbstractComponent ac)", "class_method_signature": "Inspector.selectedManifestationChanged(ViewInfo viewInfo, AbstractComponent ac)", "testcase": false, "constructor": false}, {"identifier": "registerSelectionChange", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerSelectionChange()", "full_signature": "private void registerSelectionChange()", "class_method_signature": "Inspector.registerSelectionChange()", "testcase": false, "constructor": false}, {"identifier": "showOrHideController", "parameters": "(boolean toShow)", "modifiers": "private", "return": "void", "signature": "void showOrHideController(boolean toShow)", "full_signature": "private void showOrHideController(boolean toShow)", "class_method_signature": "Inspector.showOrHideController(boolean toShow)", "testcase": false, "constructor": false}, {"identifier": "getViewControls", "parameters": "()", "modifiers": "protected", "return": "JComponent", "signature": "JComponent getViewControls()", "full_signature": "protected JComponent getViewControls()", "class_method_signature": "Inspector.getViewControls()", "testcase": false, "constructor": false}, {"identifier": "enterLockedState", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void enterLockedState()", "full_signature": "@Override public void enterLockedState()", "class_method_signature": "Inspector.enterLockedState()", "testcase": false, "constructor": false}, {"identifier": "exitLockedState", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void exitLockedState()", "full_signature": "@Override public void exitLockedState()", "class_method_signature": "Inspector.exitLockedState()", "testcase": false, "constructor": false}, {"identifier": "setHousedViewManifestation", "parameters": "(ViewInfo viewInfo)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setHousedViewManifestation(ViewInfo viewInfo)", "full_signature": "@Override public boolean setHousedViewManifestation(ViewInfo viewInfo)", "class_method_signature": "Inspector.setHousedViewManifestation(ViewInfo viewInfo)", "testcase": false, "constructor": false}], "file": "platform/src/main/java/gov/nasa/arc/mct/gui/housing/Inspector.java"}, "focal_method": {"identifier": "setHousedViewManifestation", "parameters": "(ViewInfo viewInfo)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean setHousedViewManifestation(ViewInfo viewInfo) {\n        AbstractComponent ac = view.getManifestedComponent();\n        if (!ac.isStale() && ac.isDirty()) {\n            if (!commitOrAbortPendingChanges()) {\n                return false;\n            }\n        }\n        refreshInspector(viewInfo);\n        preferredViewType = viewInfo.getType();\n        return true;\n    }", "signature": "boolean setHousedViewManifestation(ViewInfo viewInfo)", "full_signature": "@Override public boolean setHousedViewManifestation(ViewInfo viewInfo)", "class_method_signature": "Inspector.setHousedViewManifestation(ViewInfo viewInfo)", "testcase": false, "constructor": false, "invocations": ["getManifestedComponent", "isStale", "isDirty", "commitOrAbortPendingChanges", "refreshInspector", "getType"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}