{"test_class": {"identifier": "TestPlotDataManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock \n\tprivate PlotAbstraction plotView;", "modifier": "@Mock \n\tprivate", "type": "PlotAbstraction", "declarator": "plotView", "var_name": "plotView"}, {"original_string": "private GregorianCalendar currentMCTTime;", "modifier": "private", "type": "GregorianCalendar", "declarator": "currentMCTTime", "var_name": "currentMCTTime"}, {"original_string": "@Mock\n\tprivate PlotViewManifestation plotUser;", "modifier": "@Mock\n\tprivate", "type": "PlotViewManifestation", "declarator": "plotUser", "var_name": "plotUser"}], "file": "fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestPlotDataManager.java"}, "test_case": {"identifier": "testSetupCompressionRatioNoCompression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetupCompressionRatioNoCompression() {\n\t\tGregorianCalendar minTime = new GregorianCalendar();\n\t\tGregorianCalendar maxTime = new GregorianCalendar();\n\t\tminTime.setTimeInMillis(0);\n\t\tmaxTime.setTimeInMillis(minTime.getTimeInMillis());\n\t\tmaxTime.add(Calendar.HOUR, 1);\n\t\t\n\t\tPlotSettings settings = new PlotSettings();\n\t\tsettings.setMinTime(minTime.getTimeInMillis());\n\t\tsettings.setMaxTime(maxTime.getTimeInMillis());\n\t\tsettings.setTimeAxisSubsequentSetting(TimeAxisSubsequentBoundsSetting.JUMP);\n\t\t\n\t\tPlotAbstraction testPlot = new PlotView.Builder(PlotterPlot.class)\n\t\t.plotSettings(settings)\n\t\t.isCompressionEnabled(false)\n\t\t.build();\t\n\t\t\n\t\tPlotterPlot plotPackage  = (PlotterPlot) testPlot.returnPlottingPackage();\n\t\t\n\t\t((PlotDataManager)plotPackage.getPlotDataManager()).setupCompressionRatio();\n\t}", "signature": "void testSetupCompressionRatioNoCompression()", "full_signature": "@Test public void testSetupCompressionRatioNoCompression()", "class_method_signature": "TestPlotDataManager.testSetupCompressionRatioNoCompression()", "testcase": true, "constructor": false, "invocations": ["setTimeInMillis", "setTimeInMillis", "getTimeInMillis", "add", "setMinTime", "getTimeInMillis", "setMaxTime", "getTimeInMillis", "setTimeAxisSubsequentSetting", "build", "isCompressionEnabled", "plotSettings", "returnPlottingPackage", "setupCompressionRatio", "getPlotDataManager"]}, "focal_class": {"identifier": "PlotDataManager", "superclass": "", "interfaces": "implements AbstractPlotDataManager", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(PlotDataManager.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PlotDataManager.class)", "var_name": "logger"}, {"original_string": "final static boolean DATA_SET_ENABLE_UPDATE_STATE = true;", "modifier": "final static", "type": "boolean", "declarator": "DATA_SET_ENABLE_UPDATE_STATE = true", "var_name": "DATA_SET_ENABLE_UPDATE_STATE"}, {"original_string": "final static boolean DATA_SET_BUFFER_TRUNCATE_STATE = true;", "modifier": "final static", "type": "boolean", "declarator": "DATA_SET_BUFFER_TRUNCATE_STATE = true", "var_name": "DATA_SET_BUFFER_TRUNCATE_STATE"}, {"original_string": "final static int MIN_SAMPLES_FOR_AUTOSCALE = 0;", "modifier": "final static", "type": "int", "declarator": "MIN_SAMPLES_FOR_AUTOSCALE = 0", "var_name": "MIN_SAMPLES_FOR_AUTOSCALE"}, {"original_string": "private Map<String, PlotDataSeries> dataSeries;", "modifier": "private", "type": "Map<String, PlotDataSeries>", "declarator": "dataSeries", "var_name": "dataSeries"}, {"original_string": "private PlotterPlot plot;", "modifier": "private", "type": "PlotterPlot", "declarator": "plot", "var_name": "plot"}, {"original_string": "private PlotNonTimeMinMaxValueManager minMaxValueManager;", "modifier": "private", "type": "PlotNonTimeMinMaxValueManager", "declarator": "minMaxValueManager", "var_name": "minMaxValueManager"}, {"original_string": "private Timer resizeTimmer;", "modifier": "private", "type": "Timer", "declarator": "resizeTimmer", "var_name": "resizeTimmer"}, {"original_string": "private int previousTimeAxisDimensionSize = -1;", "modifier": "private", "type": "int", "declarator": "previousTimeAxisDimensionSize = -1", "var_name": "previousTimeAxisDimensionSize"}, {"original_string": "private boolean bufferRequestWaiting = false;", "modifier": "private", "type": "boolean", "declarator": "bufferRequestWaiting = false", "var_name": "bufferRequestWaiting"}, {"original_string": "private boolean scrunchBufferTruncationOccured = false;", "modifier": "private", "type": "boolean", "declarator": "scrunchBufferTruncationOccured = false", "var_name": "scrunchBufferTruncationOccured"}, {"original_string": "private GregorianCalendar plotDataBufferStartTime;", "modifier": "private", "type": "GregorianCalendar", "declarator": "plotDataBufferStartTime", "var_name": "plotDataBufferStartTime"}, {"original_string": "private GregorianCalendar plotDataBufferEndTime;", "modifier": "private", "type": "GregorianCalendar", "declarator": "plotDataBufferEndTime", "var_name": "plotDataBufferEndTime"}], "methods": [{"identifier": "PlotDataManager", "parameters": "(PlotterPlot thePlot)", "modifiers": "public", "return": "", "signature": " PlotDataManager(PlotterPlot thePlot)", "full_signature": "public  PlotDataManager(PlotterPlot thePlot)", "class_method_signature": "PlotDataManager.PlotDataManager(PlotterPlot thePlot)", "testcase": false, "constructor": true}, {"identifier": "setupResizeTimmer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupResizeTimmer()", "full_signature": "private void setupResizeTimmer()", "class_method_signature": "PlotDataManager.setupResizeTimmer()", "testcase": false, "constructor": false}, {"identifier": "addDataSet", "parameters": "(String dataSetName, Color plottingColor)", "modifiers": "@Override public", "return": "void", "signature": "void addDataSet(String dataSetName, Color plottingColor)", "full_signature": "@Override public void addDataSet(String dataSetName, Color plottingColor)", "class_method_signature": "PlotDataManager.addDataSet(String dataSetName, Color plottingColor)", "testcase": false, "constructor": false}, {"identifier": "addDataSet", "parameters": "(String dataSetName, Color plottingColor, String displayName)", "modifiers": "", "return": "void", "signature": "void addDataSet(String dataSetName, Color plottingColor, String displayName)", "full_signature": " void addDataSet(String dataSetName, Color plottingColor, String displayName)", "class_method_signature": "PlotDataManager.addDataSet(String dataSetName, Color plottingColor, String displayName)", "testcase": false, "constructor": false}, {"identifier": "isKnownDataSet", "parameters": "(String setName)", "modifiers": "", "return": "boolean", "signature": "boolean isKnownDataSet(String setName)", "full_signature": " boolean isKnownDataSet(String setName)", "class_method_signature": "PlotDataManager.isKnownDataSet(String setName)", "testcase": false, "constructor": false}, {"identifier": "getDataSetSize", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getDataSetSize()", "full_signature": " int getDataSetSize()", "class_method_signature": "PlotDataManager.getDataSetSize()", "testcase": false, "constructor": false}, {"identifier": "addData", "parameters": "(String feed, SortedMap<Long, Double> points)", "modifiers": "@Override public", "return": "void", "signature": "void addData(String feed, SortedMap<Long, Double> points)", "full_signature": "@Override public void addData(String feed, SortedMap<Long, Double> points)", "class_method_signature": "PlotDataManager.addData(String feed, SortedMap<Long, Double> points)", "testcase": false, "constructor": false}, {"identifier": "updateLegend", "parameters": "(String dataSetName, FeedProvider.RenderingInfo info)", "modifiers": "", "return": "void", "signature": "void updateLegend(String dataSetName, FeedProvider.RenderingInfo info)", "full_signature": " void updateLegend(String dataSetName, FeedProvider.RenderingInfo info)", "class_method_signature": "PlotDataManager.updateLegend(String dataSetName, FeedProvider.RenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "getNonTimeMaxDataValueCurrentlyDisplayed", "parameters": "()", "modifiers": "", "return": "double", "signature": "double getNonTimeMaxDataValueCurrentlyDisplayed()", "full_signature": " double getNonTimeMaxDataValueCurrentlyDisplayed()", "class_method_signature": "PlotDataManager.getNonTimeMaxDataValueCurrentlyDisplayed()", "testcase": false, "constructor": false}, {"identifier": "getNonTimeMinDataValueCurrentlyDisplayed", "parameters": "()", "modifiers": "", "return": "double", "signature": "double getNonTimeMinDataValueCurrentlyDisplayed()", "full_signature": " double getNonTimeMinDataValueCurrentlyDisplayed()", "class_method_signature": "PlotDataManager.getNonTimeMinDataValueCurrentlyDisplayed()", "testcase": false, "constructor": false}, {"identifier": "scrunchProtect", "parameters": "(long time)", "modifiers": "", "return": "boolean", "signature": "boolean scrunchProtect(long time)", "full_signature": " boolean scrunchProtect(long time)", "class_method_signature": "PlotDataManager.scrunchProtect(long time)", "testcase": false, "constructor": false}, {"identifier": "resizeAndReloadPlotBuffer", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resizeAndReloadPlotBuffer()", "full_signature": "public void resizeAndReloadPlotBuffer()", "class_method_signature": "PlotDataManager.resizeAndReloadPlotBuffer()", "testcase": false, "constructor": false}, {"identifier": "setupCompressionRatio", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setupCompressionRatio()", "full_signature": " void setupCompressionRatio()", "class_method_signature": "PlotDataManager.setupCompressionRatio()", "testcase": false, "constructor": false}, {"identifier": "setupBufferSizeAndCompressionRatio", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setupBufferSizeAndCompressionRatio()", "full_signature": " void setupBufferSizeAndCompressionRatio()", "class_method_signature": "PlotDataManager.setupBufferSizeAndCompressionRatio()", "testcase": false, "constructor": false}, {"identifier": "resetPlotDataSeries", "parameters": "()", "modifiers": "", "return": "void", "signature": "void resetPlotDataSeries()", "full_signature": " void resetPlotDataSeries()", "class_method_signature": "PlotDataManager.resetPlotDataSeries()", "testcase": false, "constructor": false}, {"identifier": "resetPlotDataVariablesAndRequestDataRefreshAtNewResolution", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetPlotDataVariablesAndRequestDataRefreshAtNewResolution()", "full_signature": "private void resetPlotDataVariablesAndRequestDataRefreshAtNewResolution()", "class_method_signature": "PlotDataManager.resetPlotDataVariablesAndRequestDataRefreshAtNewResolution()", "testcase": false, "constructor": false}, {"identifier": "setupPlotBufferMinAndMaxTimes", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setupPlotBufferMinAndMaxTimes()", "full_signature": " void setupPlotBufferMinAndMaxTimes()", "class_method_signature": "PlotDataManager.setupPlotBufferMinAndMaxTimes()", "testcase": false, "constructor": false}, {"identifier": "requestDataFromMCTBuffer", "parameters": "(GregorianCalendar startTime, GregorianCalendar endTime)", "modifiers": "private", "return": "void", "signature": "void requestDataFromMCTBuffer(GregorianCalendar startTime, GregorianCalendar endTime)", "full_signature": "private void requestDataFromMCTBuffer(GregorianCalendar startTime, GregorianCalendar endTime)", "class_method_signature": "PlotDataManager.requestDataFromMCTBuffer(GregorianCalendar startTime, GregorianCalendar endTime)", "testcase": false, "constructor": false}, {"identifier": "informUpdateFromLiveDataStreamStarted", "parameters": "()", "modifiers": "", "return": "void", "signature": "void informUpdateFromLiveDataStreamStarted()", "full_signature": " void informUpdateFromLiveDataStreamStarted()", "class_method_signature": "PlotDataManager.informUpdateFromLiveDataStreamStarted()", "testcase": false, "constructor": false}, {"identifier": "informUpdateFromLiveDataStreamCompleted", "parameters": "()", "modifiers": "", "return": "void", "signature": "void informUpdateFromLiveDataStreamCompleted()", "full_signature": " void informUpdateFromLiveDataStreamCompleted()", "class_method_signature": "PlotDataManager.informUpdateFromLiveDataStreamCompleted()", "testcase": false, "constructor": false}, {"identifier": "informUpdateCacheDataStreamStarted", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void informUpdateCacheDataStreamStarted()", "full_signature": "@Override public void informUpdateCacheDataStreamStarted()", "class_method_signature": "PlotDataManager.informUpdateCacheDataStreamStarted()", "testcase": false, "constructor": false}, {"identifier": "informUpdateCacheDataStreamCompleted", "parameters": "()", "modifiers": "", "return": "void", "signature": "void informUpdateCacheDataStreamCompleted()", "full_signature": " void informUpdateCacheDataStreamCompleted()", "class_method_signature": "PlotDataManager.informUpdateCacheDataStreamCompleted()", "testcase": false, "constructor": false}, {"identifier": "informBufferTrunctionEventOccured", "parameters": "()", "modifiers": "", "return": "void", "signature": "void informBufferTrunctionEventOccured()", "full_signature": " void informBufferTrunctionEventOccured()", "class_method_signature": "PlotDataManager.informBufferTrunctionEventOccured()", "testcase": false, "constructor": false}, {"identifier": "informResizeEvent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void informResizeEvent()", "full_signature": "public void informResizeEvent()", "class_method_signature": "PlotDataManager.informResizeEvent()", "testcase": false, "constructor": false}, {"identifier": "getTimeAxisWidthInPixes", "parameters": "()", "modifiers": "", "return": "double", "signature": "double getTimeAxisWidthInPixes()", "full_signature": " double getTimeAxisWidthInPixes()", "class_method_signature": "PlotDataManager.getTimeAxisWidthInPixes()", "testcase": false, "constructor": false}, {"identifier": "isBufferRequestWaiting", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isBufferRequestWaiting()", "full_signature": " boolean isBufferRequestWaiting()", "class_method_signature": "PlotDataManager.isBufferRequestWaiting()", "testcase": false, "constructor": false}, {"identifier": "hasScrunchTruncationOccured", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasScrunchTruncationOccured()", "full_signature": " boolean hasScrunchTruncationOccured()", "class_method_signature": "PlotDataManager.hasScrunchTruncationOccured()", "testcase": false, "constructor": false}, {"identifier": "getNamedDataSeries", "parameters": "(String name)", "modifiers": "@Override public", "return": "PlotDataSeries", "signature": "PlotDataSeries getNamedDataSeries(String name)", "full_signature": "@Override public PlotDataSeries getNamedDataSeries(String name)", "class_method_signature": "PlotDataManager.getNamedDataSeries(String name)", "testcase": false, "constructor": false}, {"identifier": "setDataSeries", "parameters": "(Map<String, PlotDataSeries> dataSeries)", "modifiers": "public", "return": "void", "signature": "void setDataSeries(Map<String, PlotDataSeries> dataSeries)", "full_signature": "public void setDataSeries(Map<String, PlotDataSeries> dataSeries)", "class_method_signature": "PlotDataManager.setDataSeries(Map<String, PlotDataSeries> dataSeries)", "testcase": false, "constructor": false}, {"identifier": "getDataSeries", "parameters": "()", "modifiers": "public", "return": "Map<String, PlotDataSeries>", "signature": "Map<String, PlotDataSeries> getDataSeries()", "full_signature": "public Map<String, PlotDataSeries> getDataSeries()", "class_method_signature": "PlotDataManager.getDataSeries()", "testcase": false, "constructor": false}, {"identifier": "setPlot", "parameters": "(PlotterPlot plot)", "modifiers": "public", "return": "void", "signature": "void setPlot(PlotterPlot plot)", "full_signature": "public void setPlot(PlotterPlot plot)", "class_method_signature": "PlotDataManager.setPlot(PlotterPlot plot)", "testcase": false, "constructor": false}, {"identifier": "getPlot", "parameters": "()", "modifiers": "public", "return": "AbstractPlottingPackage", "signature": "AbstractPlottingPackage getPlot()", "full_signature": "public AbstractPlottingPackage getPlot()", "class_method_signature": "PlotDataManager.getPlot()", "testcase": false, "constructor": false}], "file": "fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotDataManager.java"}, "focal_method": {"identifier": "setupCompressionRatio", "parameters": "()", "modifiers": "", "return": "void", "body": "void setupCompressionRatio() {\n\t\tAbstractAxis axis = plot.getTimeAxis();\n\t\tdouble start = axis.getStart();\n\t\tdouble end = axis.getEnd();\n\t\tassert start != end;\n\t\tXYPlotContents contents = plot.getPlotView().getContents();\n\t\t// the height or width could be zero if the plot is showing in an area which is closed. One scenario is the inspector area where the slider is\n\t\t// closed\n\t\tdouble width = Math.max(0,plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME ? contents.getWidth() : contents.getHeight());\n\t\tdouble compressionScale = width == 0 ? Double.MAX_VALUE : Math.abs(end - start) / width;\n\t\tif(plot.getTimeAxisSubsequentSetting() == TimeAxisSubsequentBoundsSetting.SCRUNCH) {\n\t\t\tfor(PlotDataSeries s : dataSeries.values()) {\n\t\t\t\tCompressingXYDataset d = s.getData();\n\t\t\t\tdouble scale = d.getCompressionScale();\n\t\t\t\t// Compress by integral factors to minimize artifacts from multiple compression runs\n\t\t\t\tif(scale == 0) {\n\t\t\t\t\tscale = compressionScale;\n\t\t\t\t} else {\n\t\t\t\t\twhile(scale < compressionScale / 2) {\n\t\t\t\t\t\tscale *= 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(scale > d.getCompressionScale()) {\n\t\t\t\t\td.setCompressionOffset(start);\n\t\t\t\t\td.setCompressionScale(scale);\n\t\t\t\t\td.recompress();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor(PlotDataSeries s : dataSeries.values()) {\n\t\t\t\tCompressingXYDataset d = s.getData();\n\t\t\t\td.setCompressionOffset(start);\n\t\t\t\td.setCompressionScale(compressionScale);\n\t\t\t}\n\t\t}\n\t}", "signature": "void setupCompressionRatio()", "full_signature": " void setupCompressionRatio()", "class_method_signature": "PlotDataManager.setupCompressionRatio()", "testcase": false, "constructor": false, "invocations": ["getTimeAxis", "getStart", "getEnd", "getContents", "getPlotView", "max", "getAxisOrientationSetting", "getWidth", "getHeight", "abs", "getTimeAxisSubsequentSetting", "values", "getData", "getCompressionScale", "getCompressionScale", "setCompressionOffset", "setCompressionScale", "recompress", "values", "getData", "setCompressionOffset", "setCompressionScale"]}, "repository": {"repo_id": 4193864, "url": "https://github.com/nasa/mct", "language": "Java", "is_fork": false, "fork_count": 272, "stargazer_count": 804, "size": 8823, "license": "licensed"}}