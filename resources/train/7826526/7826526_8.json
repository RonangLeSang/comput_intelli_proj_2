{"test_class": {"identifier": "ParseWikiUrlTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ParseWikiUrl parseWikiUrl = new ParseWikiUrl(true);", "modifier": "private", "type": "ParseWikiUrl", "declarator": "parseWikiUrl = new ParseWikiUrl(true)", "var_name": "parseWikiUrl"}, {"original_string": "private TupleFactory tupleFactory = TupleFactory.getInstance();", "modifier": "private", "type": "TupleFactory", "declarator": "tupleFactory = TupleFactory.getInstance()", "var_name": "tupleFactory"}, {"original_string": "private Tuple defaultOutput = tupleFactory.newTuple(3);", "modifier": "private", "type": "Tuple", "declarator": "defaultOutput = tupleFactory.newTuple(3)", "var_name": "defaultOutput"}], "file": "kraken-pig/src/test/java/org/wikimedia/analytics/kraken/pig/ParseWikiUrlTest.java"}, "test_case": {"identifier": "testExec6", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExec6() throws ExecException {\n\t\tTuple input = tupleFactory.newTuple(1);\n\t\tinput.set(0, \"http://www.wikipedia.org/\");\n\t\tTuple output = parseWikiUrl.exec(input);\t\n\t\tassertNotNull(output);\n\t\tString outputLang = (String) output.get(0);\n\t\tBoolean outputMobile = (Boolean) output.get(1);\n\t\tString outputDomain = (String) output.get(2);\n\t\tassertEquals(outputLang, \"N/A\");\n\t\tassertFalse(outputMobile);\n\t\tassertEquals(outputDomain,  \"wikipedia.org\");\n\t}", "signature": "void testExec6()", "full_signature": "@Test public void testExec6()", "class_method_signature": "ParseWikiUrlTest.testExec6()", "testcase": true, "constructor": false, "invocations": ["newTuple", "set", "exec", "assertNotNull", "get", "get", "get", "assertEquals", "assertFalse", "assertEquals"]}, "focal_class": {"identifier": "ParseWikiUrl", "superclass": "extends EvalFunc<Tuple>", "interfaces": "", "fields": [{"original_string": "private static Set<String> languages;", "modifier": "private static", "type": "Set<String>", "declarator": "languages", "var_name": "languages"}, {"original_string": "private static Tuple defaultOutput;", "modifier": "private static", "type": "Tuple", "declarator": "defaultOutput", "var_name": "defaultOutput"}, {"original_string": "private static boolean useBoolean;", "modifier": "private static", "type": "boolean", "declarator": "useBoolean", "var_name": "useBoolean"}], "methods": [{"identifier": "ParseWikiUrl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ParseWikiUrl()", "full_signature": "public  ParseWikiUrl()", "class_method_signature": "ParseWikiUrl.ParseWikiUrl()", "testcase": false, "constructor": true}, {"identifier": "ParseWikiUrl", "parameters": "(boolean useBoolean)", "modifiers": "public", "return": "", "signature": " ParseWikiUrl(boolean useBoolean)", "full_signature": "public  ParseWikiUrl(boolean useBoolean)", "class_method_signature": "ParseWikiUrl.ParseWikiUrl(boolean useBoolean)", "testcase": false, "constructor": true}, {"identifier": "ParseWikiUrl", "parameters": "(String languageFile)", "modifiers": "public", "return": "", "signature": " ParseWikiUrl(String languageFile)", "full_signature": "public  ParseWikiUrl(String languageFile)", "class_method_signature": "ParseWikiUrl.ParseWikiUrl(String languageFile)", "testcase": false, "constructor": true}, {"identifier": "ParseWikiUrl", "parameters": "(String languageFile, boolean useBoolean)", "modifiers": "public", "return": "", "signature": " ParseWikiUrl(String languageFile, boolean useBoolean)", "full_signature": "public  ParseWikiUrl(String languageFile, boolean useBoolean)", "class_method_signature": "ParseWikiUrl.ParseWikiUrl(String languageFile, boolean useBoolean)", "testcase": false, "constructor": true}, {"identifier": "exec", "parameters": "(Tuple input)", "modifiers": "public final", "return": "Tuple", "signature": "Tuple exec(Tuple input)", "full_signature": "public final Tuple exec(Tuple input)", "class_method_signature": "ParseWikiUrl.exec(Tuple input)", "testcase": false, "constructor": false}, {"identifier": "outputSchema", "parameters": "(final Schema input)", "modifiers": "public final", "return": "Schema", "signature": "Schema outputSchema(final Schema input)", "full_signature": "public final Schema outputSchema(final Schema input)", "class_method_signature": "ParseWikiUrl.outputSchema(final Schema input)", "testcase": false, "constructor": false}], "file": "kraken-pig/src/main/java/org/wikimedia/analytics/kraken/pig/ParseWikiUrl.java"}, "focal_method": {"identifier": "exec", "parameters": "(Tuple input)", "modifiers": "public final", "return": "Tuple", "body": "public final Tuple exec(Tuple input) throws ExecException {\n        String language = \"N/A\";\n        Boolean isMobile = null;\n        String domain = \"N/A\";\n\n        if(input == null) {\n            warn(\"null input\", PigWarning.UDF_WARNING_1);\n            return defaultOutput;\n        }\n\n        if (defaultOutput == null) {\n            defaultOutput = TupleFactory.getInstance().newTuple(3);\n            defaultOutput.set(0, language);\n            defaultOutput.set(1, null);\n            defaultOutput.set(2, domain);\n        }\n\n        //gets the urlString from the first argument, return if\n        String urlString;\n\n        try {\n            urlString = (String)input.get(0);\n        } catch (Exception e) {\n            warn(\"argument is invalid\", PigWarning.UDF_WARNING_1);\n            return defaultOutput;\n        }\n\n        if (urlString == null) {\n            warn(\"null input\", PigWarning.UDF_WARNING_1);\n            return defaultOutput;\n        }\n\n\n        //use url class for parsing\n        URL url;\n        try {\n            url = new URL(urlString);\n        } catch (MalformedURLException e) {\n            warn(\"malformed URL: \" + urlString, PigWarning.UDF_WARNING_1);\n            return defaultOutput;\n        }\n\n        //gets the host\n        String host = url.getHost();\n        String[] subdomains = host.split(\"\\\\.\");\n\n\n        //if subdomains has less than two elements then can't find domain so return\n        if (subdomains.length < 2) {\n            warn(\"host name: \" + host + \" has less than two subdomains\", PigWarning.UDF_WARNING_1);\n            return defaultOutput;\n        }\n\n        //add language codes from languageFile to a hash set\n        if (languages == null) {\n            languages = new HashSet<String>();\n            languages.add(\"en\");\n            languages.add(\"de\");\n            languages.add(\"fr\");\n            languages.add(\"nl\");\n            languages.add(\"it\");\n            languages.add(\"es\");\n            languages.add(\"pl\");\n            languages.add(\"ru\");\n            languages.add(\"ja\");\n            languages.add(\"pt\");\n            languages.add(\"zh\");\n            languages.add(\"sv\");\n            languages.add(\"vi\");\n            languages.add(\"uk\");\n            languages.add(\"ca\");\n            languages.add(\"no\");\n            languages.add(\"fi\");\n            languages.add(\"cs\");\n            languages.add(\"fa\");\n            languages.add(\"hu\");\n            languages.add(\"ro\");\n            languages.add(\"ko\");\n            languages.add(\"ar\");\n            languages.add(\"tr\");\n            languages.add(\"id\");\n            languages.add(\"sk\");\n            languages.add(\"eo\");\n            languages.add(\"da\");\n            languages.add(\"sr\");\n            languages.add(\"kk\");\n            languages.add(\"lt\");\n            languages.add(\"eu\");\n            languages.add(\"ms\");\n            languages.add(\"he\");\n            languages.add(\"bg\");\n            languages.add(\"sl\");\n            languages.add(\"vo\");\n            languages.add(\"hr\");\n            languages.add(\"war\");\n            languages.add(\"hi\");\n            languages.add(\"et\");\n            languages.add(\"gl\");\n            languages.add(\"az\");\n            languages.add(\"nn\");\n            languages.add(\"simple\");\n            languages.add(\"la\");\n            languages.add(\"el\");\n            languages.add(\"th\");\n            languages.add(\"sh\");\n            languages.add(\"oc\");\n            languages.add(\"new\");\n            languages.add(\"mk\");\n            languages.add(\"roa-rup\");\n            languages.add(\"ka\");\n            languages.add(\"tl\");\n            languages.add(\"pms\");\n            languages.add(\"ht\");\n            languages.add(\"be\");\n            languages.add(\"te\");\n            languages.add(\"ta\");\n            languages.add(\"be-x-old\");\n            languages.add(\"uz\");\n            languages.add(\"lv\");\n            languages.add(\"br\");\n            languages.add(\"ceb\");\n            languages.add(\"sq\");\n            languages.add(\"jv\");\n            languages.add(\"mg\");\n            languages.add(\"mr\");\n            languages.add(\"cy\");\n            languages.add(\"lb\");\n            languages.add(\"is\");\n            languages.add(\"bs\");\n            languages.add(\"hy\");\n            languages.add(\"my\");\n            languages.add(\"yo\");\n            languages.add(\"an\");\n            languages.add(\"lmo\");\n            languages.add(\"ml\");\n            languages.add(\"pnb\");\n            languages.add(\"fy\");\n            languages.add(\"bpy\");\n            languages.add(\"af\");\n            languages.add(\"bn\");\n            languages.add(\"sw\");\n            languages.add(\"io\");\n            languages.add(\"ne\");\n            languages.add(\"gu\");\n            languages.add(\"zh-yue\");\n            languages.add(\"nds\");\n            languages.add(\"ur\");\n            languages.add(\"ba\");\n            languages.add(\"scn\");\n            languages.add(\"ku\");\n            languages.add(\"ast\");\n            languages.add(\"qu\");\n            languages.add(\"su\");\n            languages.add(\"diq\");\n            languages.add(\"tt\");\n            languages.add(\"ga\");\n            languages.add(\"ky\");\n            languages.add(\"cv\");\n            languages.add(\"ia\");\n            languages.add(\"nap\");\n            languages.add(\"bat-smg\");\n            languages.add(\"map-bms\");\n            languages.add(\"als\");\n            languages.add(\"wa\");\n            languages.add(\"kn\");\n            languages.add(\"am\");\n            languages.add(\"gd\");\n            languages.add(\"ckb\");\n            languages.add(\"sco\");\n            languages.add(\"bug\");\n            languages.add(\"tg\");\n            languages.add(\"mzn\");\n            languages.add(\"zh-min-nan\");\n            languages.add(\"yi\");\n            languages.add(\"vec\");\n            languages.add(\"arz\");\n            languages.add(\"hif\");\n            languages.add(\"roa-tara\");\n            languages.add(\"nah\");\n            languages.add(\"os\");\n            languages.add(\"sah\");\n            languages.add(\"mn\");\n            languages.add(\"sa\");\n            languages.add(\"pam\");\n            languages.add(\"hsb\");\n            languages.add(\"li\");\n            languages.add(\"mi\");\n            languages.add(\"si\");\n            languages.add(\"se\");\n            languages.add(\"co\");\n            languages.add(\"gan\");\n            languages.add(\"glk\");\n            languages.add(\"bar\");\n            languages.add(\"fo\");\n            languages.add(\"ilo\");\n            languages.add(\"bo\");\n            languages.add(\"bcl\");\n            languages.add(\"mrj\");\n            languages.add(\"fiu-vro\");\n            languages.add(\"nds-nl\");\n            languages.add(\"ps\");\n            languages.add(\"tk\");\n            languages.add(\"vls\");\n            languages.add(\"gv\");\n            languages.add(\"rue\");\n            languages.add(\"pa\");\n            languages.add(\"dv\");\n            languages.add(\"xmf\");\n            languages.add(\"pag\");\n            languages.add(\"nrm\");\n            languages.add(\"kv\");\n            languages.add(\"zea\");\n            languages.add(\"koi\");\n            languages.add(\"km\");\n            languages.add(\"rm\");\n            languages.add(\"csb\");\n            languages.add(\"lad\");\n            languages.add(\"udm\");\n            languages.add(\"or\");\n            languages.add(\"mhr\");\n            languages.add(\"mt\");\n            languages.add(\"fur\");\n            languages.add(\"lij\");\n            languages.add(\"wuu\");\n            languages.add(\"ug\");\n            languages.add(\"pi\");\n            languages.add(\"sc\");\n            languages.add(\"zh-classical\");\n            languages.add(\"frr\");\n            languages.add(\"bh\");\n            languages.add(\"nov\");\n            languages.add(\"ksh\");\n            languages.add(\"ang\");\n            languages.add(\"so\");\n            languages.add(\"stq\");\n            languages.add(\"kw\");\n            languages.add(\"nv\");\n            languages.add(\"hak\");\n            languages.add(\"ay\");\n            languages.add(\"frp\");\n            languages.add(\"vep\");\n            languages.add(\"ext\");\n            languages.add(\"pcd\");\n            languages.add(\"szl\");\n            languages.add(\"gag\");\n            languages.add(\"gn\");\n            languages.add(\"ie\");\n            languages.add(\"ln\");\n            languages.add(\"haw\");\n            languages.add(\"xal\");\n            languages.add(\"eml\");\n            languages.add(\"pfl\");\n            languages.add(\"pdc\");\n            languages.add(\"rw\");\n            languages.add(\"krc\");\n            languages.add(\"crh\");\n            languages.add(\"ace\");\n            languages.add(\"to\");\n            languages.add(\"as\");\n            languages.add(\"ce\");\n            languages.add(\"kl\");\n            languages.add(\"arc\");\n            languages.add(\"dsb\");\n            languages.add(\"myv\");\n            languages.add(\"bjn\");\n            languages.add(\"pap\");\n            languages.add(\"sn\");\n            languages.add(\"tpi\");\n            languages.add(\"lbe\");\n            languages.add(\"mdf\");\n            languages.add(\"wo\");\n            languages.add(\"kab\");\n            languages.add(\"jbo\");\n            languages.add(\"av\");\n            languages.add(\"lez\");\n            languages.add(\"srn\");\n            languages.add(\"cbk-zam\");\n            languages.add(\"ty\");\n            languages.add(\"bxr\");\n            languages.add(\"lo\");\n            languages.add(\"kbd\");\n            languages.add(\"ab\");\n            languages.add(\"tet\");\n            languages.add(\"mwl\");\n            languages.add(\"ltg\");\n            languages.add(\"na\");\n            languages.add(\"ig\");\n            languages.add(\"kg\");\n            languages.add(\"nso\");\n            languages.add(\"za\");\n            languages.add(\"kaa\");\n            languages.add(\"zu\");\n            languages.add(\"rmy\");\n            languages.add(\"chy\");\n            languages.add(\"cu\");\n            languages.add(\"tn\");\n            languages.add(\"chr\");\n            languages.add(\"got\");\n            languages.add(\"cdo\");\n            languages.add(\"sm\");\n            languages.add(\"bi\");\n            languages.add(\"mo\");\n            languages.add(\"bm\");\n            languages.add(\"iu\");\n            languages.add(\"pih\");\n            languages.add(\"ss\");\n            languages.add(\"sd\");\n            languages.add(\"pnt\");\n            languages.add(\"ee\");\n            languages.add(\"om\");\n            languages.add(\"ha\");\n            languages.add(\"ki\");\n            languages.add(\"ti\");\n            languages.add(\"ts\");\n            languages.add(\"ks\");\n            languages.add(\"sg\");\n            languages.add(\"ve\");\n            languages.add(\"rn\");\n            languages.add(\"cr\");\n            languages.add(\"ak\");\n            languages.add(\"lg\");\n            languages.add(\"tum\");\n            languages.add(\"dz\");\n            languages.add(\"ny\");\n            languages.add(\"ik\");\n            languages.add(\"ff\");\n            languages.add(\"ch\");\n            languages.add(\"st\");\n            languages.add(\"fj\");\n            languages.add(\"tw\");\n            languages.add(\"xh\");\n            languages.add(\"ng\");\n            languages.add(\"ii\");\n            languages.add(\"cho\");\n            languages.add(\"mh\");\n            languages.add(\"aa\");\n            languages.add(\"kj\");\n            languages.add(\"ho\");\n            languages.add(\"mus\");\n            languages.add(\"kr\");\n            languages.add(\"hz\");\n        }\n\n        //takes the first subdomain and check if it is a language code\n        String firstSubDomain = subdomains[0];\n        if (languages.contains(firstSubDomain)) {\n            language = firstSubDomain;\n        }\n\n        //sets the domain as the second to the last subdomain concatenated with the last\n        domain = subdomains[subdomains.length - 2] + \".\" + subdomains[subdomains.length - 1];\n\n        //default isMobile to false since the domain is fine\n        isMobile = false;\n\n        //iterate through each subdomain from the 2nd subdomain to the 3rd to the last subdomain\n        //to look for 'm'\n        for (int i = 1; i < subdomains.length - 2 ; i++) {;\n            //if this subdomain is 'm' set isMobile flag to true\n            if (subdomains[i].equals(\"m\")) {\n                isMobile = true;\n                break;\n            }\n        }\n\n        //create the tuple for output\n        Tuple output = TupleFactory.getInstance().newTuple(3);\n        output.set(0, language);\n        output.set(1, useBoolean ? isMobile : isMobile.toString());\n        output.set(2, domain);\n        return output;\n    }", "signature": "Tuple exec(Tuple input)", "full_signature": "public final Tuple exec(Tuple input)", "class_method_signature": "ParseWikiUrl.exec(Tuple input)", "testcase": false, "constructor": false, "invocations": ["warn", "newTuple", "getInstance", "set", "set", "set", "get", "warn", "warn", "warn", "getHost", "split", "warn", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "contains", "equals", "newTuple", "getInstance", "set", "set", "toString", "set"]}, "repository": {"repo_id": 7826526, "url": "https://github.com/wikimedia/kraken", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 19, "size": 7151, "license": "licensed"}}