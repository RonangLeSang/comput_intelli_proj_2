{"test_class": {"identifier": "FileNodeTest", "superclass": "extends BaseNodeTest", "interfaces": "", "fields": [{"original_string": "private static final String ITEM_PATH = \"/project/folder/file_name\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_PATH = \"/project/folder/file_name\"", "var_name": "ITEM_PATH"}, {"original_string": "private static final String ITEM_NAME = \"file_name\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_NAME = \"file_name\"", "var_name": "ITEM_NAME"}, {"original_string": "@Mock\n    private ItemReference     itemReference;", "modifier": "@Mock\n    private", "type": "ItemReference", "declarator": "itemReference", "var_name": "itemReference"}, {"original_string": "@Mock\n    private ProjectDescriptor projectDescriptor;", "modifier": "@Mock\n    private", "type": "ProjectDescriptor", "declarator": "projectDescriptor", "var_name": "projectDescriptor"}, {"original_string": "@Mock\n    private ProjectNode       projectNode;", "modifier": "@Mock\n    private", "type": "ProjectNode", "declarator": "projectNode", "var_name": "projectNode"}, {"original_string": "private FileNode          fileNode;", "modifier": "private", "type": "FileNode", "declarator": "fileNode", "var_name": "fileNode"}], "file": "codenvy-ide-api/src/test/java/org/eclipse/che/ide/api/project/tree/generic/FileNodeTest.java"}, "test_case": {"identifier": "testGettingContentWhenGetContentIsFailed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGettingContentWhenGetContentIsFailed() throws Exception {\n        doAnswer(new Answer() {\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                Object[] arguments = invocation.getArguments();\n                AsyncRequestCallback<String> callback = (AsyncRequestCallback<String>)arguments[1];\n                GwtReflectionUtils.callOnFailure(callback, mock(Throwable.class));\n                return callback;\n            }\n        }).when(projectServiceClient).getFileContent(anyString(), (AsyncRequestCallback<String>)anyObject());\n        AsyncCallback<String> callback = mock(AsyncCallback.class);\n\n        fileNode.getContent(callback);\n\n        verify(projectServiceClient).getFileContent(eq(ITEM_PATH), Matchers.<AsyncRequestCallback<String>>anyObject());\n        verify(callback).onFailure(Matchers.<Throwable>anyObject());\n    }", "signature": "void testGettingContentWhenGetContentIsFailed()", "full_signature": "@Test public void testGettingContentWhenGetContentIsFailed()", "class_method_signature": "FileNodeTest.testGettingContentWhenGetContentIsFailed()", "testcase": true, "constructor": false, "invocations": ["getFileContent", "when", "doAnswer", "getArguments", "callOnFailure", "mock", "anyString", "anyObject", "mock", "getContent", "getFileContent", "verify", "eq", "anyObject", "onFailure", "verify", "anyObject"]}, "focal_class": {"identifier": "FileNode", "superclass": "extends ItemNode", "interfaces": "implements VirtualFile", "fields": [], "methods": [{"identifier": "FileNode", "parameters": "(@Assisted TreeNode<?> parent,\n                    @Assisted ItemReference data,\n                    @Assisted TreeStructure treeStructure,\n                    EventBus eventBus,\n                    ProjectServiceClient projectServiceClient,\n                    DtoUnmarshallerFactory dtoUnmarshallerFactory)", "modifiers": "@Inject public", "return": "", "signature": " FileNode(@Assisted TreeNode<?> parent,\n                    @Assisted ItemReference data,\n                    @Assisted TreeStructure treeStructure,\n                    EventBus eventBus,\n                    ProjectServiceClient projectServiceClient,\n                    DtoUnmarshallerFactory dtoUnmarshallerFactory)", "full_signature": "@Inject public  FileNode(@Assisted TreeNode<?> parent,\n                    @Assisted ItemReference data,\n                    @Assisted TreeStructure treeStructure,\n                    EventBus eventBus,\n                    ProjectServiceClient projectServiceClient,\n                    DtoUnmarshallerFactory dtoUnmarshallerFactory)", "class_method_signature": "FileNode.FileNode(@Assisted TreeNode<?> parent,\n                    @Assisted ItemReference data,\n                    @Assisted TreeStructure treeStructure,\n                    EventBus eventBus,\n                    ProjectServiceClient projectServiceClient,\n                    DtoUnmarshallerFactory dtoUnmarshallerFactory)", "testcase": false, "constructor": true}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "@Override public boolean isLeaf()", "class_method_signature": "FileNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "processNodeAction", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void processNodeAction()", "full_signature": "@Override public void processNodeAction()", "class_method_signature": "FileNode.processNodeAction()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final DeleteCallback callback)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final DeleteCallback callback)", "full_signature": "@Override public void delete(final DeleteCallback callback)", "class_method_signature": "FileNode.delete(final DeleteCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getMediaType", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getMediaType()", "full_signature": "@Nullable @Override public String getMediaType()", "class_method_signature": "FileNode.getMediaType()", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly()", "full_signature": "@Override public boolean isReadOnly()", "class_method_signature": "FileNode.isReadOnly()", "testcase": false, "constructor": false}, {"identifier": "getContentUrl", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getContentUrl()", "full_signature": "@Override public String getContentUrl()", "class_method_signature": "FileNode.getContentUrl()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(final AsyncCallback<String> callback)", "modifiers": "public", "return": "void", "signature": "void getContent(final AsyncCallback<String> callback)", "full_signature": "public void getContent(final AsyncCallback<String> callback)", "class_method_signature": "FileNode.getContent(final AsyncCallback<String> callback)", "testcase": false, "constructor": false}, {"identifier": "updateContent", "parameters": "(String content, final AsyncCallback<Void> callback)", "modifiers": "public", "return": "void", "signature": "void updateContent(String content, final AsyncCallback<Void> callback)", "full_signature": "public void updateContent(String content, final AsyncCallback<Void> callback)", "class_method_signature": "FileNode.updateContent(String content, final AsyncCallback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "FileNode.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FileNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "canContainsFolder", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canContainsFolder()", "full_signature": "@Override public boolean canContainsFolder()", "class_method_signature": "FileNode.canContainsFolder()", "testcase": false, "constructor": false}], "file": "codenvy-ide-api/src/main/java/org/eclipse/che/ide/api/project/tree/generic/FileNode.java"}, "focal_method": {"identifier": "getContent", "parameters": "(final AsyncCallback<String> callback)", "modifiers": "public", "return": "void", "body": "public void getContent(final AsyncCallback<String> callback) {\n        projectServiceClient.getFileContent(getPath(), new AsyncRequestCallback<String>(new StringUnmarshaller()) {\n            @Override\n            protected void onSuccess(String result) {\n                callback.onSuccess(result);\n            }\n\n            @Override\n            protected void onFailure(Throwable exception) {\n                callback.onFailure(exception);\n            }\n        });\n    }", "signature": "void getContent(final AsyncCallback<String> callback)", "full_signature": "public void getContent(final AsyncCallback<String> callback)", "class_method_signature": "FileNode.getContent(final AsyncCallback<String> callback)", "testcase": false, "constructor": false, "invocations": ["getFileContent", "getPath", "onSuccess", "onFailure"]}, "repository": {"repo_id": 7891529, "url": "https://github.com/codenvy-legacy/ide", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 30, "size": 215508, "license": "licensed"}}