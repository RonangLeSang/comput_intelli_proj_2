{"test_class": {"identifier": "FolderNodeTest", "superclass": "extends BaseNodeTest", "interfaces": "", "fields": [{"original_string": "private static final String ITEM_PATH = \"/project/folder/folder_name\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_PATH = \"/project/folder/folder_name\"", "var_name": "ITEM_PATH"}, {"original_string": "private static final String ITEM_NAME = \"folder_name\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_NAME = \"folder_name\"", "var_name": "ITEM_NAME"}, {"original_string": "@Captor\n    private ArgumentCaptor<AsyncRequestCallback<Array<ItemReference>>> asyncRequestCallbackCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<AsyncRequestCallback<Array<ItemReference>>>", "declarator": "asyncRequestCallbackCaptor", "var_name": "asyncRequestCallbackCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<Array<ItemReference>>                       arrayCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Array<ItemReference>>", "declarator": "arrayCaptor", "var_name": "arrayCaptor"}, {"original_string": "@Mock\n    private ItemReference                                              itemReference;", "modifier": "@Mock\n    private", "type": "ItemReference", "declarator": "itemReference", "var_name": "itemReference"}, {"original_string": "@Mock\n    private ProjectDescriptor                                          projectDescriptor;", "modifier": "@Mock\n    private", "type": "ProjectDescriptor", "declarator": "projectDescriptor", "var_name": "projectDescriptor"}, {"original_string": "@Mock\n    private ProjectNode                                                projectNode;", "modifier": "@Mock\n    private", "type": "ProjectNode", "declarator": "projectNode", "var_name": "projectNode"}, {"original_string": "@InjectMocks\n    private FolderNode                                                 folderNode;", "modifier": "@InjectMocks\n    private", "type": "FolderNode", "declarator": "folderNode", "var_name": "folderNode"}], "file": "codenvy-ide-api/src/test/java/org/eclipse/che/ide/api/project/tree/generic/FolderNodeTest.java"}, "test_case": {"identifier": "shouldCreateChildFolderNodeForProjectItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateChildFolderNodeForProjectItem() {\n        ItemReference folderItem = mock(ItemReference.class);\n        when(folderItem.getType()).thenReturn(\"project\");\n\n        folderNode.createChildNode(folderItem);\n\n        verify(treeStructure).newFolderNode(eq(folderNode), eq(folderItem));\n    }", "signature": "void shouldCreateChildFolderNodeForProjectItem()", "full_signature": "@Test public void shouldCreateChildFolderNodeForProjectItem()", "class_method_signature": "FolderNodeTest.shouldCreateChildFolderNodeForProjectItem()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getType", "createChildNode", "newFolderNode", "verify", "eq", "eq"]}, "focal_class": {"identifier": "FolderNode", "superclass": "extends ItemNode", "interfaces": "", "fields": [], "methods": [{"identifier": "FolderNode", "parameters": "(@Assisted TreeNode<?> parent,\n                      @Assisted ItemReference data,\n                      @Assisted GenericTreeStructure treeStructure,\n                      EventBus eventBus,\n                      ProjectServiceClient projectServiceClient,\n                      DtoUnmarshallerFactory dtoUnmarshallerFactory)", "modifiers": "@Inject public", "return": "", "signature": " FolderNode(@Assisted TreeNode<?> parent,\n                      @Assisted ItemReference data,\n                      @Assisted GenericTreeStructure treeStructure,\n                      EventBus eventBus,\n                      ProjectServiceClient projectServiceClient,\n                      DtoUnmarshallerFactory dtoUnmarshallerFactory)", "full_signature": "@Inject public  FolderNode(@Assisted TreeNode<?> parent,\n                      @Assisted ItemReference data,\n                      @Assisted GenericTreeStructure treeStructure,\n                      EventBus eventBus,\n                      ProjectServiceClient projectServiceClient,\n                      DtoUnmarshallerFactory dtoUnmarshallerFactory)", "class_method_signature": "FolderNode.FolderNode(@Assisted TreeNode<?> parent,\n                      @Assisted ItemReference data,\n                      @Assisted GenericTreeStructure treeStructure,\n                      EventBus eventBus,\n                      ProjectServiceClient projectServiceClient,\n                      DtoUnmarshallerFactory dtoUnmarshallerFactory)", "testcase": false, "constructor": true}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "@Override public boolean isLeaf()", "class_method_signature": "FolderNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "refreshChildren", "parameters": "(final AsyncCallback<TreeNode<?>> callback)", "modifiers": "@Override public", "return": "void", "signature": "void refreshChildren(final AsyncCallback<TreeNode<?>> callback)", "full_signature": "@Override public void refreshChildren(final AsyncCallback<TreeNode<?>> callback)", "class_method_signature": "FolderNode.refreshChildren(final AsyncCallback<TreeNode<?>> callback)", "testcase": false, "constructor": false}, {"identifier": "getChildNodesForItems", "parameters": "(Array<ItemReference> childItems)", "modifiers": "private", "return": "Array<TreeNode<?>>", "signature": "Array<TreeNode<?>> getChildNodesForItems(Array<ItemReference> childItems)", "full_signature": "private Array<TreeNode<?>> getChildNodesForItems(Array<ItemReference> childItems)", "class_method_signature": "FolderNode.getChildNodesForItems(Array<ItemReference> childItems)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(String path, final AsyncCallback<Array<ItemReference>> callback)", "modifiers": "protected", "return": "void", "signature": "void getChildren(String path, final AsyncCallback<Array<ItemReference>> callback)", "full_signature": "protected void getChildren(String path, final AsyncCallback<Array<ItemReference>> callback)", "class_method_signature": "FolderNode.getChildren(String path, final AsyncCallback<Array<ItemReference>> callback)", "testcase": false, "constructor": false}, {"identifier": "createChildNode", "parameters": "(ItemReference item)", "modifiers": "@Nullable protected", "return": "AbstractTreeNode<?>", "signature": "AbstractTreeNode<?> createChildNode(ItemReference item)", "full_signature": "@Nullable protected AbstractTreeNode<?> createChildNode(ItemReference item)", "class_method_signature": "FolderNode.createChildNode(ItemReference item)", "testcase": false, "constructor": false}, {"identifier": "getTreeStructure", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "GenericTreeStructure", "signature": "GenericTreeStructure getTreeStructure()", "full_signature": "@Nonnull @Override public GenericTreeStructure getTreeStructure()", "class_method_signature": "FolderNode.getTreeStructure()", "testcase": false, "constructor": false}, {"identifier": "canContainsFolder", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canContainsFolder()", "full_signature": "@Override public boolean canContainsFolder()", "class_method_signature": "FolderNode.canContainsFolder()", "testcase": false, "constructor": false}], "file": "codenvy-ide-api/src/main/java/org/eclipse/che/ide/api/project/tree/generic/FolderNode.java"}, "focal_method": {"identifier": "createChildNode", "parameters": "(ItemReference item)", "modifiers": "@Nullable protected", "return": "AbstractTreeNode<?>", "body": "@Nullable\n    protected AbstractTreeNode<?> createChildNode(ItemReference item) {\n        if (\"file\".equals(item.getType())) {\n            return getTreeStructure().newFileNode(this, item);\n        } else if (\"folder\".equals(item.getType()) || \"project\".equals(item.getType())) {\n            return getTreeStructure().newFolderNode(this, item);\n        }\n        return null;\n    }", "signature": "AbstractTreeNode<?> createChildNode(ItemReference item)", "full_signature": "@Nullable protected AbstractTreeNode<?> createChildNode(ItemReference item)", "class_method_signature": "FolderNode.createChildNode(ItemReference item)", "testcase": false, "constructor": false, "invocations": ["equals", "getType", "newFileNode", "getTreeStructure", "equals", "getType", "equals", "getType", "newFolderNode", "getTreeStructure"]}, "repository": {"repo_id": 7891529, "url": "https://github.com/codenvy-legacy/ide", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 30, "size": 215508, "license": "licensed"}}