{"test_class": {"identifier": "TransactionalRepositoryDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TransactionalRepositoryDecorator<Entity> transactionalRepo;", "modifier": "private", "type": "TransactionalRepositoryDecorator<Entity>", "declarator": "transactionalRepo", "var_name": "transactionalRepo"}, {"original_string": "private Repository<Entity> delegateRepository;", "modifier": "private", "type": "Repository<Entity>", "declarator": "delegateRepository", "var_name": "delegateRepository"}, {"original_string": "private PlatformTransactionManager transactionManager;", "modifier": "private", "type": "PlatformTransactionManager", "declarator": "transactionManager", "var_name": "transactionManager"}], "file": "molgenis-data/src/test/java/org/molgenis/data/transaction/TransactionalRepositoryDecoratorTest.java"}, "test_case": {"identifier": "deleteAll", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void deleteAll() {\n    transactionalRepo.deleteAll();\n    verify(transactionManager).getTransaction(any(TransactionDefinition.class));\n    verify(delegateRepository).deleteAll();\n  }", "signature": "void deleteAll()", "full_signature": "@Test void deleteAll()", "class_method_signature": "TransactionalRepositoryDecoratorTest.deleteAll()", "testcase": true, "constructor": false, "invocations": ["deleteAll", "getTransaction", "verify", "any", "deleteAll", "verify"]}, "focal_class": {"identifier": "TransactionalRepositoryDecorator", "superclass": "extends AbstractRepositoryDecorator<E>", "interfaces": "", "fields": [{"original_string": "private final PlatformTransactionManager transactionManager;", "modifier": "private final", "type": "PlatformTransactionManager", "declarator": "transactionManager", "var_name": "transactionManager"}], "methods": [{"identifier": "TransactionalRepositoryDecorator", "parameters": "(\n      Repository<E> delegateRepository, PlatformTransactionManager transactionManager)", "modifiers": "public", "return": "", "signature": " TransactionalRepositoryDecorator(\n      Repository<E> delegateRepository, PlatformTransactionManager transactionManager)", "full_signature": "public  TransactionalRepositoryDecorator(\n      Repository<E> delegateRepository, PlatformTransactionManager transactionManager)", "class_method_signature": "TransactionalRepositoryDecorator.TransactionalRepositoryDecorator(\n      Repository<E> delegateRepository, PlatformTransactionManager transactionManager)", "testcase": false, "constructor": true}, {"identifier": "forEachBatched", "parameters": "(Consumer<List<E>> consumer, int batchSize)", "modifiers": "@Override public", "return": "void", "signature": "void forEachBatched(Consumer<List<E>> consumer, int batchSize)", "full_signature": "@Override public void forEachBatched(Consumer<List<E>> consumer, int batchSize)", "class_method_signature": "TransactionalRepositoryDecorator.forEachBatched(Consumer<List<E>> consumer, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "forEachBatched", "parameters": "(Fetch fetch, Consumer<List<E>> consumer, int batchSize)", "modifiers": "@Override public", "return": "void", "signature": "void forEachBatched(Fetch fetch, Consumer<List<E>> consumer, int batchSize)", "full_signature": "@Override public void forEachBatched(Fetch fetch, Consumer<List<E>> consumer, int batchSize)", "class_method_signature": "TransactionalRepositoryDecorator.forEachBatched(Fetch fetch, Consumer<List<E>> consumer, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "@SuppressWarnings(\"ConstantConditions\") @Override public", "return": "long", "signature": "long count()", "full_signature": "@SuppressWarnings(\"ConstantConditions\") @Override public long count()", "class_method_signature": "TransactionalRepositoryDecorator.count()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Query<E> q)", "modifiers": "@SuppressWarnings(\"ConstantConditions\") @Override public", "return": "long", "signature": "long count(Query<E> q)", "full_signature": "@SuppressWarnings(\"ConstantConditions\") @Override public long count(Query<E> q)", "class_method_signature": "TransactionalRepositoryDecorator.count(Query<E> q)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Query<E> q)", "modifiers": "@Override public", "return": "Stream<E>", "signature": "Stream<E> findAll(Query<E> q)", "full_signature": "@Override public Stream<E> findAll(Query<E> q)", "class_method_signature": "TransactionalRepositoryDecorator.findAll(Query<E> q)", "testcase": false, "constructor": false}, {"identifier": "findOne", "parameters": "(Query<E> q)", "modifiers": "@Override public", "return": "E", "signature": "E findOne(Query<E> q)", "full_signature": "@Override public E findOne(Query<E> q)", "class_method_signature": "TransactionalRepositoryDecorator.findOne(Query<E> q)", "testcase": false, "constructor": false}, {"identifier": "findOneById", "parameters": "(Object id)", "modifiers": "@Override public", "return": "E", "signature": "E findOneById(Object id)", "full_signature": "@Override public E findOneById(Object id)", "class_method_signature": "TransactionalRepositoryDecorator.findOneById(Object id)", "testcase": false, "constructor": false}, {"identifier": "findOneById", "parameters": "(Object id, Fetch fetch)", "modifiers": "@Override public", "return": "E", "signature": "E findOneById(Object id, Fetch fetch)", "full_signature": "@Override public E findOneById(Object id, Fetch fetch)", "class_method_signature": "TransactionalRepositoryDecorator.findOneById(Object id, Fetch fetch)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Stream<Object> ids)", "modifiers": "@Override public", "return": "Stream<E>", "signature": "Stream<E> findAll(Stream<Object> ids)", "full_signature": "@Override public Stream<E> findAll(Stream<Object> ids)", "class_method_signature": "TransactionalRepositoryDecorator.findAll(Stream<Object> ids)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Stream<Object> ids, Fetch fetch)", "modifiers": "@Override public", "return": "Stream<E>", "signature": "Stream<E> findAll(Stream<Object> ids, Fetch fetch)", "full_signature": "@Override public Stream<E> findAll(Stream<Object> ids, Fetch fetch)", "class_method_signature": "TransactionalRepositoryDecorator.findAll(Stream<Object> ids, Fetch fetch)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(AggregateQuery aggregateQuery)", "modifiers": "@Override public", "return": "AggregateResult", "signature": "AggregateResult aggregate(AggregateQuery aggregateQuery)", "full_signature": "@Override public AggregateResult aggregate(AggregateQuery aggregateQuery)", "class_method_signature": "TransactionalRepositoryDecorator.aggregate(AggregateQuery aggregateQuery)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(E entity)", "modifiers": "@Override public", "return": "void", "signature": "void update(E entity)", "full_signature": "@Override public void update(E entity)", "class_method_signature": "TransactionalRepositoryDecorator.update(E entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Stream<E> entities)", "modifiers": "@Override public", "return": "void", "signature": "void update(Stream<E> entities)", "full_signature": "@Override public void update(Stream<E> entities)", "class_method_signature": "TransactionalRepositoryDecorator.update(Stream<E> entities)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(E entity)", "modifiers": "@Override public", "return": "void", "signature": "void delete(E entity)", "full_signature": "@Override public void delete(E entity)", "class_method_signature": "TransactionalRepositoryDecorator.delete(E entity)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Stream<E> entities)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Stream<E> entities)", "full_signature": "@Override public void delete(Stream<E> entities)", "class_method_signature": "TransactionalRepositoryDecorator.delete(Stream<E> entities)", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(Object id)", "modifiers": "@Override public", "return": "void", "signature": "void deleteById(Object id)", "full_signature": "@Override public void deleteById(Object id)", "class_method_signature": "TransactionalRepositoryDecorator.deleteById(Object id)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(Stream<Object> ids)", "modifiers": "@Override public", "return": "void", "signature": "void deleteAll(Stream<Object> ids)", "full_signature": "@Override public void deleteAll(Stream<Object> ids)", "class_method_signature": "TransactionalRepositoryDecorator.deleteAll(Stream<Object> ids)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void deleteAll()", "full_signature": "@Override public void deleteAll()", "class_method_signature": "TransactionalRepositoryDecorator.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E entity)", "modifiers": "@Override public", "return": "void", "signature": "void add(E entity)", "full_signature": "@Override public void add(E entity)", "class_method_signature": "TransactionalRepositoryDecorator.add(E entity)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Stream<E> entities)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer add(Stream<E> entities)", "full_signature": "@Override public Integer add(Stream<E> entities)", "class_method_signature": "TransactionalRepositoryDecorator.add(Stream<E> entities)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@SuppressWarnings({\"ConstantConditions\", \"NullableProblems\"}) @Override public", "return": "Iterator<E>", "signature": "Iterator<E> iterator()", "full_signature": "@SuppressWarnings({\"ConstantConditions\", \"NullableProblems\"}) @Override public Iterator<E> iterator()", "class_method_signature": "TransactionalRepositoryDecorator.iterator()", "testcase": false, "constructor": false}, {"identifier": "createWriteTransactionTemplate", "parameters": "()", "modifiers": "private", "return": "TransactionTemplate", "signature": "TransactionTemplate createWriteTransactionTemplate()", "full_signature": "private TransactionTemplate createWriteTransactionTemplate()", "class_method_signature": "TransactionalRepositoryDecorator.createWriteTransactionTemplate()", "testcase": false, "constructor": false}, {"identifier": "createReadonlyTransactionTemplate", "parameters": "()", "modifiers": "private", "return": "TransactionTemplate", "signature": "TransactionTemplate createReadonlyTransactionTemplate()", "full_signature": "private TransactionTemplate createReadonlyTransactionTemplate()", "class_method_signature": "TransactionalRepositoryDecorator.createReadonlyTransactionTemplate()", "testcase": false, "constructor": false}], "file": "molgenis-data/src/main/java/org/molgenis/data/transaction/TransactionalRepositoryDecorator.java"}, "focal_method": {"identifier": "deleteAll", "parameters": "(Stream<Object> ids)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void deleteAll(Stream<Object> ids) {\n    if (TransactionSynchronizationManager.isSynchronizationActive()) {\n      delegate().deleteAll(ids);\n    } else {\n      createWriteTransactionTemplate()\n          .execute(\n              status -> {\n                delegate().deleteAll(ids);\n                return null;\n              });\n    }\n  }", "signature": "void deleteAll(Stream<Object> ids)", "full_signature": "@Override public void deleteAll(Stream<Object> ids)", "class_method_signature": "TransactionalRepositoryDecorator.deleteAll(Stream<Object> ids)", "testcase": false, "constructor": false, "invocations": ["isSynchronizationActive", "deleteAll", "delegate", "execute", "createWriteTransactionTemplate", "deleteAll", "delegate"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}