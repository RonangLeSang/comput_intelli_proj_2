{"test_class": {"identifier": "L2CacheTest", "superclass": "extends AbstractMolgenisSpringTest", "interfaces": "", "fields": [{"original_string": "private L2Cache l2Cache;", "modifier": "private", "type": "L2Cache", "declarator": "l2Cache", "var_name": "l2Cache"}, {"original_string": "@Autowired private EntityHydration entityHydration;", "modifier": "@Autowired private", "type": "EntityHydration", "declarator": "entityHydration", "var_name": "entityHydration"}, {"original_string": "@Autowired private EntityTestHarness entityTestHarness;", "modifier": "@Autowired private", "type": "EntityTestHarness", "declarator": "entityTestHarness", "var_name": "entityTestHarness"}, {"original_string": "@Autowired private EntityManager entityManager;", "modifier": "@Autowired private", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}, {"original_string": "@Mock private TransactionManager transactionManager;", "modifier": "@Mock private", "type": "TransactionManager", "declarator": "transactionManager", "var_name": "transactionManager"}, {"original_string": "@Mock private Repository<Entity> repository;", "modifier": "@Mock private", "type": "Repository<Entity>", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Mock private TransactionInformation transactionInformation;", "modifier": "@Mock private", "type": "TransactionInformation", "declarator": "transactionInformation", "var_name": "transactionInformation"}, {"original_string": "@Captor private ArgumentCaptor<Stream<Object>> idStreamCaptor;", "modifier": "@Captor private", "type": "ArgumentCaptor<Stream<Object>>", "declarator": "idStreamCaptor", "var_name": "idStreamCaptor"}, {"original_string": "private final MeterRegistry meterRegistry = new SimpleMeterRegistry();", "modifier": "private final", "type": "MeterRegistry", "declarator": "meterRegistry = new SimpleMeterRegistry()", "var_name": "meterRegistry"}, {"original_string": "private List<Entity> testEntities;", "modifier": "private", "type": "List<Entity>", "declarator": "testEntities", "var_name": "testEntities"}, {"original_string": "private EntityType emd;", "modifier": "private", "type": "EntityType", "declarator": "emd", "var_name": "emd"}], "file": "molgenis-data-cache/src/test/java/org/molgenis/data/cache/l2/L2CacheTest.java"}, "test_case": {"identifier": "testGetFetchStringIdCachesLoadedData", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testGetFetchStringIdCachesLoadedData() {\n    Fetch fetch = new Fetch().field(EntityTestHarness.ATTR_ID);\n    when(entityManager.createFetch(emd, fetch))\n        .thenAnswer(\n            invocation ->\n                new EntityWithComputedAttributes(\n                    new PartialEntity(new DynamicEntity(emd), fetch, entityManager)));\n\n    Entity entity2 = testEntities.get(2);\n    when(repository.findOneById(\"2\")).thenReturn(entity2);\n\n    Entity result = l2Cache.get(repository, \"2\", fetch);\n    assertEquals(\"2\", result.getIdValue());\n\n    result = l2Cache.get(repository, \"2\", fetch);\n    assertEquals(\"2\", result.getIdValue());\n\n    verify(repository, times(1)).findOneById(\"2\");\n  }", "signature": "void testGetFetchStringIdCachesLoadedData()", "full_signature": "@Test void testGetFetchStringIdCachesLoadedData()", "class_method_signature": "L2CacheTest.testGetFetchStringIdCachesLoadedData()", "testcase": true, "constructor": false, "invocations": ["field", "thenAnswer", "when", "createFetch", "get", "thenReturn", "when", "findOneById", "get", "assertEquals", "getIdValue", "get", "assertEquals", "getIdValue", "findOneById", "verify", "times"]}, "focal_class": {"identifier": "L2Cache", "superclass": "", "interfaces": "implements TransactionListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(L2Cache.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(L2Cache.class)", "var_name": "LOG"}, {"original_string": "private static final int MAX_CACHE_SIZE_PER_ENTITY = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_CACHE_SIZE_PER_ENTITY = 1000", "var_name": "MAX_CACHE_SIZE_PER_ENTITY"}, {"original_string": "private final ConcurrentMap<String, LoadingCache<Object, Optional<Map<String, Object>>>> caches;", "modifier": "private final", "type": "ConcurrentMap<String, LoadingCache<Object, Optional<Map<String, Object>>>>", "declarator": "caches", "var_name": "caches"}, {"original_string": "private final EntityHydration entityHydration;", "modifier": "private final", "type": "EntityHydration", "declarator": "entityHydration", "var_name": "entityHydration"}, {"original_string": "private final TransactionInformation transactionInformation;", "modifier": "private final", "type": "TransactionInformation", "declarator": "transactionInformation", "var_name": "transactionInformation"}, {"original_string": "private final MeterRegistry meterRegistry;", "modifier": "private final", "type": "MeterRegistry", "declarator": "meterRegistry", "var_name": "meterRegistry"}], "methods": [{"identifier": "L2Cache", "parameters": "(\n      TransactionManager transactionManager,\n      EntityHydration entityHydration,\n      TransactionInformation transactionInformation,\n      MeterRegistry meterRegistry)", "modifiers": "public", "return": "", "signature": " L2Cache(\n      TransactionManager transactionManager,\n      EntityHydration entityHydration,\n      TransactionInformation transactionInformation,\n      MeterRegistry meterRegistry)", "full_signature": "public  L2Cache(\n      TransactionManager transactionManager,\n      EntityHydration entityHydration,\n      TransactionInformation transactionInformation,\n      MeterRegistry meterRegistry)", "class_method_signature": "L2Cache.L2Cache(\n      TransactionManager transactionManager,\n      EntityHydration entityHydration,\n      TransactionInformation transactionInformation,\n      MeterRegistry meterRegistry)", "testcase": false, "constructor": true}, {"identifier": "afterCommitTransaction", "parameters": "(String transactionId)", "modifiers": "@Override public", "return": "void", "signature": "void afterCommitTransaction(String transactionId)", "full_signature": "@Override public void afterCommitTransaction(String transactionId)", "class_method_signature": "L2Cache.afterCommitTransaction(String transactionId)", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "(EntityKey entityKey)", "modifiers": "private", "return": "void", "signature": "void evict(EntityKey entityKey)", "full_signature": "private void evict(EntityKey entityKey)", "class_method_signature": "L2Cache.evict(EntityKey entityKey)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Repository<Entity> repository, Object id)", "modifiers": "public", "return": "Entity", "signature": "Entity get(Repository<Entity> repository, Object id)", "full_signature": "public Entity get(Repository<Entity> repository, Object id)", "class_method_signature": "L2Cache.get(Repository<Entity> repository, Object id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Repository<Entity> repository, Object id, Fetch fetch)", "modifiers": "public", "return": "Entity", "signature": "Entity get(Repository<Entity> repository, Object id, Fetch fetch)", "full_signature": "public Entity get(Repository<Entity> repository, Object id, Fetch fetch)", "class_method_signature": "L2Cache.get(Repository<Entity> repository, Object id, Fetch fetch)", "testcase": false, "constructor": false}, {"identifier": "getBatch", "parameters": "(Repository<Entity> repository, Iterable<Object> ids)", "modifiers": "public", "return": "List<Entity>", "signature": "List<Entity> getBatch(Repository<Entity> repository, Iterable<Object> ids)", "full_signature": "public List<Entity> getBatch(Repository<Entity> repository, Iterable<Object> ids)", "class_method_signature": "L2Cache.getBatch(Repository<Entity> repository, Iterable<Object> ids)", "testcase": false, "constructor": false}, {"identifier": "getBatch", "parameters": "(Repository<Entity> repository, Iterable<Object> ids, Fetch fetch)", "modifiers": "public", "return": "List<Entity>", "signature": "List<Entity> getBatch(Repository<Entity> repository, Iterable<Object> ids, Fetch fetch)", "full_signature": "public List<Entity> getBatch(Repository<Entity> repository, Iterable<Object> ids, Fetch fetch)", "class_method_signature": "L2Cache.getBatch(Repository<Entity> repository, Iterable<Object> ids, Fetch fetch)", "testcase": false, "constructor": false}, {"identifier": "translateExecutionException", "parameters": "(ExecutionException exception)", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException translateExecutionException(ExecutionException exception)", "full_signature": "private RuntimeException translateExecutionException(ExecutionException exception)", "class_method_signature": "L2Cache.translateExecutionException(ExecutionException exception)", "testcase": false, "constructor": false}, {"identifier": "logStatistics", "parameters": "()", "modifiers": "@Scheduled(fixedRate = 60000) public", "return": "void", "signature": "void logStatistics()", "full_signature": "@Scheduled(fixedRate = 60000) public void logStatistics()", "class_method_signature": "L2Cache.logStatistics()", "testcase": false, "constructor": false}, {"identifier": "getEntityCache", "parameters": "(\n      Repository<Entity> repository)", "modifiers": "@SuppressWarnings(\"java:S2201\") // ignore return values private", "return": "LoadingCache<Object, Optional<Map<String, Object>>>", "signature": "LoadingCache<Object, Optional<Map<String, Object>>> getEntityCache(\n      Repository<Entity> repository)", "full_signature": "@SuppressWarnings(\"java:S2201\") // ignore return values private LoadingCache<Object, Optional<Map<String, Object>>> getEntityCache(\n      Repository<Entity> repository)", "class_method_signature": "L2Cache.getEntityCache(\n      Repository<Entity> repository)", "testcase": false, "constructor": false}, {"identifier": "createEntityCache", "parameters": "(\n      Repository<Entity> repository)", "modifiers": "private", "return": "LoadingCache<Object, Optional<Map<String, Object>>>", "signature": "LoadingCache<Object, Optional<Map<String, Object>>> createEntityCache(\n      Repository<Entity> repository)", "full_signature": "private LoadingCache<Object, Optional<Map<String, Object>>> createEntityCache(\n      Repository<Entity> repository)", "class_method_signature": "L2Cache.createEntityCache(\n      Repository<Entity> repository)", "testcase": false, "constructor": false}, {"identifier": "createCacheLoader", "parameters": "(\n      final Repository<Entity> repository)", "modifiers": "private", "return": "CacheLoader<Object, Optional<Map<String, Object>>>", "signature": "CacheLoader<Object, Optional<Map<String, Object>>> createCacheLoader(\n      final Repository<Entity> repository)", "full_signature": "private CacheLoader<Object, Optional<Map<String, Object>>> createCacheLoader(\n      final Repository<Entity> repository)", "class_method_signature": "L2Cache.createCacheLoader(\n      final Repository<Entity> repository)", "testcase": false, "constructor": false}], "file": "molgenis-data-cache/src/main/java/org/molgenis/data/cache/l2/L2Cache.java"}, "focal_method": {"identifier": "get", "parameters": "(Repository<Entity> repository, Object id)", "modifiers": "public", "return": "Entity", "body": "public Entity get(Repository<Entity> repository, Object id) {\n    LoadingCache<Object, Optional<Map<String, Object>>> cache = getEntityCache(repository);\n    EntityType entityType = repository.getEntityType();\n    return cache.getUnchecked(id).map(e -> entityHydration.hydrate(e, entityType)).orElse(null);\n  }", "signature": "Entity get(Repository<Entity> repository, Object id)", "full_signature": "public Entity get(Repository<Entity> repository, Object id)", "class_method_signature": "L2Cache.get(Repository<Entity> repository, Object id)", "testcase": false, "constructor": false, "invocations": ["getEntityCache", "getEntityType", "orElse", "map", "getUnchecked", "hydrate"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}