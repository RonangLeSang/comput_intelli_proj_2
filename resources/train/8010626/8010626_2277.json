{"test_class": {"identifier": "EmxDataProviderTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock private EmxImportJob emxImportJob;", "modifier": "@Mock private", "type": "EmxImportJob", "declarator": "emxImportJob", "var_name": "emxImportJob"}, {"original_string": "@Mock private EntityManager entityManager;", "modifier": "@Mock private", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}, {"original_string": "private EmxDataProvider emxDataProvider;", "modifier": "private", "type": "EmxDataProvider", "declarator": "emxDataProvider", "var_name": "emxDataProvider"}], "file": "molgenis-data-import/src/test/java/org/molgenis/data/importer/emx/EmxDataProviderTest.java"}, "test_case": {"identifier": "testHasEntitiesTrue", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testHasEntitiesTrue() {\n    String entityTypeId = \"EntityTypeId\";\n    EntityType entityType = when(mock(EntityType.class).getId()).thenReturn(entityTypeId).getMock();\n\n    RepositoryCollection repositoryCollection = mock(RepositoryCollection.class);\n    when(repositoryCollection.hasRepository(entityType)).thenReturn(true);\n    when(emxImportJob.getSource()).thenReturn(repositoryCollection);\n\n    assertTrue(emxDataProvider.hasEntities(entityType));\n  }", "signature": "void testHasEntitiesTrue()", "full_signature": "@Test void testHasEntitiesTrue()", "class_method_signature": "EmxDataProviderTest.testHasEntitiesTrue()", "testcase": true, "constructor": false, "invocations": ["getMock", "thenReturn", "when", "getId", "mock", "mock", "thenReturn", "when", "hasRepository", "thenReturn", "when", "getSource", "assertTrue", "hasEntities"]}, "focal_class": {"identifier": "EmxDataProvider", "superclass": "", "interfaces": "implements DataProvider", "fields": [{"original_string": "private final EmxImportJob job;", "modifier": "private final", "type": "EmxImportJob", "declarator": "job", "var_name": "job"}, {"original_string": "private final EntityManager entityManager;", "modifier": "private final", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}], "methods": [{"identifier": "EmxDataProvider", "parameters": "(EmxImportJob job, EntityManager entityManager)", "modifiers": "", "return": "", "signature": " EmxDataProvider(EmxImportJob job, EntityManager entityManager)", "full_signature": "  EmxDataProvider(EmxImportJob job, EntityManager entityManager)", "class_method_signature": "EmxDataProvider.EmxDataProvider(EmxImportJob job, EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "getEntityTypes", "parameters": "()", "modifiers": "@Override public", "return": "Stream<EntityType>", "signature": "Stream<EntityType> getEntityTypes()", "full_signature": "@Override public Stream<EntityType> getEntityTypes()", "class_method_signature": "EmxDataProvider.getEntityTypes()", "testcase": false, "constructor": false}, {"identifier": "hasEntities", "parameters": "(EntityType entityType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasEntities(EntityType entityType)", "full_signature": "@Override public boolean hasEntities(EntityType entityType)", "class_method_signature": "EmxDataProvider.hasEntities(EntityType entityType)", "testcase": false, "constructor": false}, {"identifier": "getEntities", "parameters": "(EntityType entityType)", "modifiers": "@Override public", "return": "Stream<Entity>", "signature": "Stream<Entity> getEntities(EntityType entityType)", "full_signature": "@Override public Stream<Entity> getEntities(EntityType entityType)", "class_method_signature": "EmxDataProvider.getEntities(EntityType entityType)", "testcase": false, "constructor": false}, {"identifier": "toEntity", "parameters": "(EntityType entityType, Entity emxEntity)", "modifiers": "private", "return": "Entity", "signature": "Entity toEntity(EntityType entityType, Entity emxEntity)", "full_signature": "private Entity toEntity(EntityType entityType, Entity emxEntity)", "class_method_signature": "EmxDataProvider.toEntity(EntityType entityType, Entity emxEntity)", "testcase": false, "constructor": false}, {"identifier": "toRefEntities", "parameters": "(Attribute attr, Object emxValue)", "modifiers": "private", "return": "List<Entity>", "signature": "List<Entity> toRefEntities(Attribute attr, Object emxValue)", "full_signature": "private List<Entity> toRefEntities(Attribute attr, Object emxValue)", "class_method_signature": "EmxDataProvider.toRefEntities(Attribute attr, Object emxValue)", "testcase": false, "constructor": false}, {"identifier": "toRefEntity", "parameters": "(Attribute attr, Object emxValue)", "modifiers": "private", "return": "Entity", "signature": "Entity toRefEntity(Attribute attr, Object emxValue)", "full_signature": "private Entity toRefEntity(Attribute attr, Object emxValue)", "class_method_signature": "EmxDataProvider.toRefEntity(Attribute attr, Object emxValue)", "testcase": false, "constructor": false}], "file": "molgenis-data-import/src/main/java/org/molgenis/data/importer/emx/EmxDataProvider.java"}, "focal_method": {"identifier": "hasEntities", "parameters": "(EntityType entityType)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean hasEntities(EntityType entityType) {\n    if (job.getSource().hasRepository(entityType)) {\n      return true;\n    } else {\n      Optional<String> packageId = job.getPackageId();\n      return packageId.isPresent()\n          && entityType.getId().startsWith(packageId.get() + PACKAGE_SEPARATOR)\n          && job.getSource()\n              .hasRepository(\n                  entityType\n                      .getId()\n                      .substring(packageId.get().length() + PACKAGE_SEPARATOR.length()));\n    }\n  }", "signature": "boolean hasEntities(EntityType entityType)", "full_signature": "@Override public boolean hasEntities(EntityType entityType)", "class_method_signature": "EmxDataProvider.hasEntities(EntityType entityType)", "testcase": false, "constructor": false, "invocations": ["hasRepository", "getSource", "getPackageId", "isPresent", "startsWith", "getId", "get", "hasRepository", "getSource", "substring", "getId", "length", "get", "length"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}