{"test_class": {"identifier": "EntityReferenceResolverDecoratorTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock private Repository<Entity> delegateRepository;", "modifier": "@Mock private", "type": "Repository<Entity>", "declarator": "delegateRepository", "var_name": "delegateRepository"}, {"original_string": "@Mock private EntityType entityType;", "modifier": "@Mock private", "type": "EntityType", "declarator": "entityType", "var_name": "entityType"}, {"original_string": "@Mock private EntityManager entityManager;", "modifier": "@Mock private", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}, {"original_string": "private EntityReferenceResolverDecorator entityReferenceResolverDecorator;", "modifier": "private", "type": "EntityReferenceResolverDecorator", "declarator": "entityReferenceResolverDecorator", "var_name": "entityReferenceResolverDecorator"}, {"original_string": "@Mock private Consumer<List<Entity>> consumer;", "modifier": "@Mock private", "type": "Consumer<List<Entity>>", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "@Captor private ArgumentCaptor<Consumer<List<Entity>>> consumerArgumentCaptor;", "modifier": "@Captor private", "type": "ArgumentCaptor<Consumer<List<Entity>>>", "declarator": "consumerArgumentCaptor", "var_name": "consumerArgumentCaptor"}, {"original_string": "@Captor private ArgumentCaptor<Stream<Entity>> streamArgumentCaptor;", "modifier": "@Captor private", "type": "ArgumentCaptor<Stream<Entity>>", "declarator": "streamArgumentCaptor", "var_name": "streamArgumentCaptor"}], "file": "molgenis-data/src/test/java/org/molgenis/data/EntityReferenceResolverDecoratorTest.java"}, "test_case": {"identifier": "findOneObjectFetchNull", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void findOneObjectFetchNull() {\n    Object id = 1;\n    entityReferenceResolverDecorator.findOneById(id, null);\n    verify(delegateRepository, times(1)).findOneById(id, null);\n    verifyZeroInteractions(entityManager);\n  }", "signature": "void findOneObjectFetchNull()", "full_signature": "@Test void findOneObjectFetchNull()", "class_method_signature": "EntityReferenceResolverDecoratorTest.findOneObjectFetchNull()", "testcase": true, "constructor": false, "invocations": ["findOneById", "findOneById", "verify", "times", "verifyZeroInteractions"]}, "focal_class": {"identifier": "EntityReferenceResolverDecorator", "superclass": "extends AbstractRepositoryDecorator<Entity>", "interfaces": "", "fields": [{"original_string": "private final EntityManager entityManager;", "modifier": "private final", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}], "methods": [{"identifier": "EntityReferenceResolverDecorator", "parameters": "(\n      Repository<Entity> delegateRepository, EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " EntityReferenceResolverDecorator(\n      Repository<Entity> delegateRepository, EntityManager entityManager)", "full_signature": "public  EntityReferenceResolverDecorator(\n      Repository<Entity> delegateRepository, EntityManager entityManager)", "class_method_signature": "EntityReferenceResolverDecorator.EntityReferenceResolverDecorator(\n      Repository<Entity> delegateRepository, EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "findAll", "parameters": "(Query<Entity> q)", "modifiers": "@Override public", "return": "Stream<Entity>", "signature": "Stream<Entity> findAll(Query<Entity> q)", "full_signature": "@Override public Stream<Entity> findAll(Query<Entity> q)", "class_method_signature": "EntityReferenceResolverDecorator.findAll(Query<Entity> q)", "testcase": false, "constructor": false}, {"identifier": "findOne", "parameters": "(Query<Entity> q)", "modifiers": "@Override public", "return": "Entity", "signature": "Entity findOne(Query<Entity> q)", "full_signature": "@Override public Entity findOne(Query<Entity> q)", "class_method_signature": "EntityReferenceResolverDecorator.findOne(Query<Entity> q)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Entity>", "signature": "Iterator<Entity> iterator()", "full_signature": "@Override public Iterator<Entity> iterator()", "class_method_signature": "EntityReferenceResolverDecorator.iterator()", "testcase": false, "constructor": false}, {"identifier": "forEachBatched", "parameters": "(Fetch fetch, Consumer<List<Entity>> consumer, int batchSize)", "modifiers": "@Override public", "return": "void", "signature": "void forEachBatched(Fetch fetch, Consumer<List<Entity>> consumer, int batchSize)", "full_signature": "@Override public void forEachBatched(Fetch fetch, Consumer<List<Entity>> consumer, int batchSize)", "class_method_signature": "EntityReferenceResolverDecorator.forEachBatched(Fetch fetch, Consumer<List<Entity>> consumer, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "findOneById", "parameters": "(Object id)", "modifiers": "@Override public", "return": "Entity", "signature": "Entity findOneById(Object id)", "full_signature": "@Override public Entity findOneById(Object id)", "class_method_signature": "EntityReferenceResolverDecorator.findOneById(Object id)", "testcase": false, "constructor": false}, {"identifier": "findOneById", "parameters": "(Object id, Fetch fetch)", "modifiers": "@Override public", "return": "Entity", "signature": "Entity findOneById(Object id, Fetch fetch)", "full_signature": "@Override public Entity findOneById(Object id, Fetch fetch)", "class_method_signature": "EntityReferenceResolverDecorator.findOneById(Object id, Fetch fetch)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Stream<Object> ids)", "modifiers": "@Override public", "return": "Stream<Entity>", "signature": "Stream<Entity> findAll(Stream<Object> ids)", "full_signature": "@Override public Stream<Entity> findAll(Stream<Object> ids)", "class_method_signature": "EntityReferenceResolverDecorator.findAll(Stream<Object> ids)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Stream<Object> ids, Fetch fetch)", "modifiers": "@Override public", "return": "Stream<Entity>", "signature": "Stream<Entity> findAll(Stream<Object> ids, Fetch fetch)", "full_signature": "@Override public Stream<Entity> findAll(Stream<Object> ids, Fetch fetch)", "class_method_signature": "EntityReferenceResolverDecorator.findAll(Stream<Object> ids, Fetch fetch)", "testcase": false, "constructor": false}, {"identifier": "resolveEntityReferences", "parameters": "(Entity entity)", "modifiers": "private", "return": "Entity", "signature": "Entity resolveEntityReferences(Entity entity)", "full_signature": "private Entity resolveEntityReferences(Entity entity)", "class_method_signature": "EntityReferenceResolverDecorator.resolveEntityReferences(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "resolveEntityReferences", "parameters": "(Entity entity, Fetch fetch)", "modifiers": "private", "return": "Entity", "signature": "Entity resolveEntityReferences(Entity entity, Fetch fetch)", "full_signature": "private Entity resolveEntityReferences(Entity entity, Fetch fetch)", "class_method_signature": "EntityReferenceResolverDecorator.resolveEntityReferences(Entity entity, Fetch fetch)", "testcase": false, "constructor": false}, {"identifier": "resolveEntityReferences", "parameters": "(Stream<Entity> entities)", "modifiers": "private", "return": "Stream<Entity>", "signature": "Stream<Entity> resolveEntityReferences(Stream<Entity> entities)", "full_signature": "private Stream<Entity> resolveEntityReferences(Stream<Entity> entities)", "class_method_signature": "EntityReferenceResolverDecorator.resolveEntityReferences(Stream<Entity> entities)", "testcase": false, "constructor": false}, {"identifier": "resolveEntityReferences", "parameters": "(Stream<Entity> entities, Fetch fetch)", "modifiers": "private", "return": "Stream<Entity>", "signature": "Stream<Entity> resolveEntityReferences(Stream<Entity> entities, Fetch fetch)", "full_signature": "private Stream<Entity> resolveEntityReferences(Stream<Entity> entities, Fetch fetch)", "class_method_signature": "EntityReferenceResolverDecorator.resolveEntityReferences(Stream<Entity> entities, Fetch fetch)", "testcase": false, "constructor": false}], "file": "molgenis-data/src/main/java/org/molgenis/data/EntityReferenceResolverDecorator.java"}, "focal_method": {"identifier": "findOneById", "parameters": "(Object id)", "modifiers": "@Override public", "return": "Entity", "body": "@Override\n  public Entity findOneById(Object id) {\n    Entity entity = delegate().findOneById(id);\n    return entity != null ? resolveEntityReferences(entity) : null;\n  }", "signature": "Entity findOneById(Object id)", "full_signature": "@Override public Entity findOneById(Object id)", "class_method_signature": "EntityReferenceResolverDecorator.findOneById(Object id)", "testcase": false, "constructor": false, "invocations": ["findOneById", "delegate", "resolveEntityReferences"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}