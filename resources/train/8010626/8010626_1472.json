{"test_class": {"identifier": "IdentitiesApiControllerTest", "superclass": "extends AbstractMockitoSpringContextTests", "interfaces": "", "fields": [{"original_string": "private final GroupValueFactory groupValueFactory = new GroupValueFactory();", "modifier": "private final", "type": "GroupValueFactory", "declarator": "groupValueFactory = new GroupValueFactory()", "var_name": "groupValueFactory"}, {"original_string": "@Mock private GroupService groupService;", "modifier": "@Mock private", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}, {"original_string": "@Mock private RoleMembershipService roleMembershipService;", "modifier": "@Mock private", "type": "RoleMembershipService", "declarator": "roleMembershipService", "var_name": "roleMembershipService"}, {"original_string": "@Mock private RoleService roleService;", "modifier": "@Mock private", "type": "RoleService", "declarator": "roleService", "var_name": "roleService"}, {"original_string": "@Mock private UserService userService;", "modifier": "@Mock private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Mock private UserPermissionEvaluator userPermissionEvaluator;", "modifier": "@Mock private", "type": "UserPermissionEvaluator", "declarator": "userPermissionEvaluator", "var_name": "userPermissionEvaluator"}, {"original_string": "@Mock private RoleMembershipMetadata roleMembershipMetadata;", "modifier": "@Mock private", "type": "RoleMembershipMetadata", "declarator": "roleMembershipMetadata", "var_name": "roleMembershipMetadata"}, {"original_string": "@Mock private RoleMetadata roleMetadata;", "modifier": "@Mock private", "type": "RoleMetadata", "declarator": "roleMetadata", "var_name": "roleMetadata"}, {"original_string": "@Mock private GroupMetadata groupMetadata;", "modifier": "@Mock private", "type": "GroupMetadata", "declarator": "groupMetadata", "var_name": "groupMetadata"}, {"original_string": "@Mock private UserMetadata userMetadata;", "modifier": "@Mock private", "type": "UserMetadata", "declarator": "userMetadata", "var_name": "userMetadata"}, {"original_string": "@Mock private Attribute attribute;", "modifier": "@Mock private", "type": "Attribute", "declarator": "attribute", "var_name": "attribute"}, {"original_string": "@Mock private User user;", "modifier": "@Mock private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock private Group group;", "modifier": "@Mock private", "type": "Group", "declarator": "group", "var_name": "group"}, {"original_string": "@Mock private Role viewer;", "modifier": "@Mock private", "type": "Role", "declarator": "viewer", "var_name": "viewer"}, {"original_string": "@Mock private Role editor;", "modifier": "@Mock private", "type": "Role", "declarator": "editor", "var_name": "editor"}, {"original_string": "@Mock private Role manager;", "modifier": "@Mock private", "type": "Role", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Mock private Role anonymous;", "modifier": "@Mock private", "type": "Role", "declarator": "anonymous", "var_name": "anonymous"}, {"original_string": "@Mock private LocaleResolver localeResolver;", "modifier": "@Mock private", "type": "LocaleResolver", "declarator": "localeResolver", "var_name": "localeResolver"}, {"original_string": "@Mock private RoleMembership memberShip;", "modifier": "@Mock private", "type": "RoleMembership", "declarator": "memberShip", "var_name": "memberShip"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Autowired private GsonHttpMessageConverter gsonHttpMessageConverter;", "modifier": "@Autowired private", "type": "GsonHttpMessageConverter", "declarator": "gsonHttpMessageConverter", "var_name": "gsonHttpMessageConverter"}, {"original_string": "@Autowired private Gson gson;", "modifier": "@Autowired private", "type": "Gson", "declarator": "gson", "var_name": "gson"}], "file": "molgenis-api-identities/src/test/java/org/molgenis/api/identities/IdentitiesApiControllerTest.java"}, "test_case": {"identifier": "testGetGroupRoles", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testGetGroupRoles() throws Exception {\n    when(userPermissionEvaluator.hasPermission(new GroupIdentity(\"devs\"), VIEW)).thenReturn(true);\n\n    when(editor.getLabel()).thenReturn(\"role-label\");\n    when(editor.getName()).thenReturn(\"role-name\");\n    Iterable<Role> groupRoles = singletonList(editor);\n    when(group.getRoles()).thenReturn(groupRoles);\n    when(groupService.getGroup(\"devs\")).thenReturn(group);\n\n    mockMvc\n        .perform(get(GROUP_END_POINT + \"/devs/role/\"))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)))\n        .andExpect(jsonPath(\"$[0].roleName\", is(\"role-name\")))\n        .andExpect(jsonPath(\"$[0].roleLabel\", is(\"role-label\")));\n  }", "signature": "void testGetGroupRoles()", "full_signature": "@Test void testGetGroupRoles()", "class_method_signature": "IdentitiesApiControllerTest.testGetGroupRoles()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "hasPermission", "thenReturn", "when", "getLabel", "thenReturn", "when", "getName", "singletonList", "thenReturn", "when", "getRoles", "thenReturn", "when", "getGroup", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "get", "isOk", "status", "jsonPath", "hasSize", "jsonPath", "is", "jsonPath", "is"]}, "focal_class": {"identifier": "IdentitiesApiController", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String USER = \"/user\";", "modifier": "public static final", "type": "String", "declarator": "USER = \"/user\"", "var_name": "USER"}, {"original_string": "@SuppressWarnings(\"java:S1075\") // URIs should not be hardcoded\n  private static final String SECURITY_API_PATH = ApiNamespace.API_PATH + \"/identities\";", "modifier": "@SuppressWarnings(\"java:S1075\") // URIs should not be hardcoded\n  private static final", "type": "String", "declarator": "SECURITY_API_PATH = ApiNamespace.API_PATH + \"/identities\"", "var_name": "SECURITY_API_PATH"}, {"original_string": "static final String GROUP_END_POINT = SECURITY_API_PATH + \"/group\";", "modifier": "static final", "type": "String", "declarator": "GROUP_END_POINT = SECURITY_API_PATH + \"/group\"", "var_name": "GROUP_END_POINT"}, {"original_string": "private static final String GROUP_MEMBER_END_POINT = GROUP_END_POINT + \"/{groupName}/member\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_MEMBER_END_POINT = GROUP_END_POINT + \"/{groupName}/member\"", "var_name": "GROUP_MEMBER_END_POINT"}, {"original_string": "private static final String ROLE_EXTEND_END_POINT = GROUP_END_POINT + \"/{groupName}/role\";", "modifier": "private static final", "type": "String", "declarator": "ROLE_EXTEND_END_POINT = GROUP_END_POINT + \"/{groupName}/role\"", "var_name": "ROLE_EXTEND_END_POINT"}, {"original_string": "private static final String GROUP_PERMISSION_END_POINT =\n      GROUP_END_POINT + \"/{groupName}/permission\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_PERMISSION_END_POINT =\n      GROUP_END_POINT + \"/{groupName}/permission\"", "var_name": "GROUP_PERMISSION_END_POINT"}, {"original_string": "static final String TEMP_USER_END_POINT = SECURITY_API_PATH + USER;", "modifier": "static final", "type": "String", "declarator": "TEMP_USER_END_POINT = SECURITY_API_PATH + USER", "var_name": "TEMP_USER_END_POINT"}, {"original_string": "private final GroupValueFactory groupValueFactory;", "modifier": "private final", "type": "GroupValueFactory", "declarator": "groupValueFactory", "var_name": "groupValueFactory"}, {"original_string": "private final GroupService groupService;", "modifier": "private final", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}, {"original_string": "private final RoleMembershipService roleMembershipService;", "modifier": "private final", "type": "RoleMembershipService", "declarator": "roleMembershipService", "var_name": "roleMembershipService"}, {"original_string": "private final RoleService roleService;", "modifier": "private final", "type": "RoleService", "declarator": "roleService", "var_name": "roleService"}, {"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final UserPermissionEvaluator userPermissionEvaluator;", "modifier": "private final", "type": "UserPermissionEvaluator", "declarator": "userPermissionEvaluator", "var_name": "userPermissionEvaluator"}], "methods": [{"identifier": "IdentitiesApiController", "parameters": "(\n      GroupValueFactory groupValueFactory,\n      GroupService groupService,\n      RoleMembershipService roleMembershipService,\n      RoleService roleService,\n      UserService userService,\n      UserPermissionEvaluator userPermissionEvaluator)", "modifiers": "", "return": "", "signature": " IdentitiesApiController(\n      GroupValueFactory groupValueFactory,\n      GroupService groupService,\n      RoleMembershipService roleMembershipService,\n      RoleService roleService,\n      UserService userService,\n      UserPermissionEvaluator userPermissionEvaluator)", "full_signature": "  IdentitiesApiController(\n      GroupValueFactory groupValueFactory,\n      GroupService groupService,\n      RoleMembershipService roleMembershipService,\n      RoleService roleService,\n      UserService userService,\n      UserPermissionEvaluator userPermissionEvaluator)", "class_method_signature": "IdentitiesApiController.IdentitiesApiController(\n      GroupValueFactory groupValueFactory,\n      GroupService groupService,\n      RoleMembershipService roleMembershipService,\n      RoleService roleService,\n      UserService userService,\n      UserPermissionEvaluator userPermissionEvaluator)", "testcase": false, "constructor": true}, {"identifier": "createGroup", "parameters": "(@RequestBody GroupCommand group)", "modifiers": "@PostMapping(GROUP_END_POINT) @ApiOperation(value = \"Create a new group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 201, message = \"New group created\", response = ResponseEntity.class), @ApiResponse(code = 400, message = \"Group name not available\", response = ResponseEntity.class) }) public", "return": "ResponseEntity", "signature": "ResponseEntity createGroup(@RequestBody GroupCommand group)", "full_signature": "@PostMapping(GROUP_END_POINT) @ApiOperation(value = \"Create a new group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 201, message = \"New group created\", response = ResponseEntity.class), @ApiResponse(code = 400, message = \"Group name not available\", response = ResponseEntity.class) }) public ResponseEntity createGroup(@RequestBody GroupCommand group)", "class_method_signature": "IdentitiesApiController.createGroup(@RequestBody GroupCommand group)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(@PathVariable(value = \"groupName\") String groupName)", "modifiers": "@DeleteMapping(GROUP_END_POINT + \"/{groupName}\") @ApiOperation(value = \"Delete a group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 204, message = \"Group deleted\", response = ResponseEntity.class), }) public", "return": "ResponseEntity", "signature": "ResponseEntity deleteGroup(@PathVariable(value = \"groupName\") String groupName)", "full_signature": "@DeleteMapping(GROUP_END_POINT + \"/{groupName}\") @ApiOperation(value = \"Delete a group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 204, message = \"Group deleted\", response = ResponseEntity.class), }) public ResponseEntity deleteGroup(@PathVariable(value = \"groupName\") String groupName)", "class_method_signature": "IdentitiesApiController.deleteGroup(@PathVariable(value = \"groupName\") String groupName)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "()", "modifiers": "@GetMapping(GROUP_END_POINT) @ApiOperation(value = \"Get list with groups\", response = ResponseEntity.class) @ApiResponses({ @ApiResponse( code = 200, message = \"List of groupResponse object available to user\", response = List.class) }) @ResponseBody public", "return": "List<GroupResponse>", "signature": "List<GroupResponse> getGroups()", "full_signature": "@GetMapping(GROUP_END_POINT) @ApiOperation(value = \"Get list with groups\", response = ResponseEntity.class) @ApiResponses({ @ApiResponse( code = 200, message = \"List of groupResponse object available to user\", response = List.class) }) @ResponseBody public List<GroupResponse> getGroups()", "class_method_signature": "IdentitiesApiController.getGroups()", "testcase": false, "constructor": false}, {"identifier": "getMembers", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName)", "modifiers": "@GetMapping(GROUP_MEMBER_END_POINT) @ApiOperation(value = \"Get group members\", response = Collection.class) @ResponseBody public", "return": "Collection<GroupMemberResponse>", "signature": "Collection<GroupMemberResponse> getMembers(\n      @PathVariable(value = \"groupName\") String groupName)", "full_signature": "@GetMapping(GROUP_MEMBER_END_POINT) @ApiOperation(value = \"Get group members\", response = Collection.class) @ResponseBody public Collection<GroupMemberResponse> getMembers(\n      @PathVariable(value = \"groupName\") String groupName)", "class_method_signature": "IdentitiesApiController.getMembers(\n      @PathVariable(value = \"groupName\") String groupName)", "testcase": false, "constructor": false}, {"identifier": "addMember", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName,\n      @RequestBody AddGroupMemberCommand addMemberCommand)", "modifiers": "@PostMapping(GROUP_MEMBER_END_POINT) @ApiOperation(value = \"Add member to group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 201, message = \"Member added to group\", response = ResponseEntity.class) }) public", "return": "ResponseEntity", "signature": "ResponseEntity addMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @RequestBody AddGroupMemberCommand addMemberCommand)", "full_signature": "@PostMapping(GROUP_MEMBER_END_POINT) @ApiOperation(value = \"Add member to group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 201, message = \"Member added to group\", response = ResponseEntity.class) }) public ResponseEntity addMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @RequestBody AddGroupMemberCommand addMemberCommand)", "class_method_signature": "IdentitiesApiController.addMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @RequestBody AddGroupMemberCommand addMemberCommand)", "testcase": false, "constructor": false}, {"identifier": "removeMember", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName)", "modifiers": "@DeleteMapping(GROUP_MEMBER_END_POINT + \"/{memberName}\") @ApiOperation(value = \"Remove member from group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 204, message = \"Member removed from group\", response = ResponseEntity.class) }) public", "return": "ResponseEntity", "signature": "ResponseEntity removeMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName)", "full_signature": "@DeleteMapping(GROUP_MEMBER_END_POINT + \"/{memberName}\") @ApiOperation(value = \"Remove member from group\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse(code = 204, message = \"Member removed from group\", response = ResponseEntity.class) }) public ResponseEntity removeMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName)", "class_method_signature": "IdentitiesApiController.removeMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName)", "testcase": false, "constructor": false}, {"identifier": "updateMember", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName,\n      @RequestBody UpdateGroupMemberCommand groupMember)", "modifiers": "@PutMapping(GROUP_MEMBER_END_POINT + \"/{memberName}\") @ApiOperation(value = \"Change membership role\", response = ResponseEntity.class) @Transactional @ResponseStatus(HttpStatus.OK) @ApiResponses({ @ApiResponse(code = 200, message = \"Updated membership role\", response = ResponseEntity.class) }) public", "return": "void", "signature": "void updateMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName,\n      @RequestBody UpdateGroupMemberCommand groupMember)", "full_signature": "@PutMapping(GROUP_MEMBER_END_POINT + \"/{memberName}\") @ApiOperation(value = \"Change membership role\", response = ResponseEntity.class) @Transactional @ResponseStatus(HttpStatus.OK) @ApiResponses({ @ApiResponse(code = 200, message = \"Updated membership role\", response = ResponseEntity.class) }) public void updateMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName,\n      @RequestBody UpdateGroupMemberCommand groupMember)", "class_method_signature": "IdentitiesApiController.updateMember(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"memberName\") String memberName,\n      @RequestBody UpdateGroupMemberCommand groupMember)", "testcase": false, "constructor": false}, {"identifier": "updateExtends", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String roleName,\n      @RequestBody UpdateIncludeCommand updateExtendsCommand)", "modifiers": "@PutMapping(ROLE_EXTEND_END_POINT + \"/{roleName}\") @ApiOperation(value = \"Change group role extension\", response = ResponseEntity.class) @Transactional @ResponseStatus(HttpStatus.NO_CONTENT) @ApiResponses({ @ApiResponse(code = 204, message = \"Updated membership role\", response = ResponseEntity.class) }) public", "return": "void", "signature": "void updateExtends(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String roleName,\n      @RequestBody UpdateIncludeCommand updateExtendsCommand)", "full_signature": "@PutMapping(ROLE_EXTEND_END_POINT + \"/{roleName}\") @ApiOperation(value = \"Change group role extension\", response = ResponseEntity.class) @Transactional @ResponseStatus(HttpStatus.NO_CONTENT) @ApiResponses({ @ApiResponse(code = 204, message = \"Updated membership role\", response = ResponseEntity.class) }) public void updateExtends(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String roleName,\n      @RequestBody UpdateIncludeCommand updateExtendsCommand)", "class_method_signature": "IdentitiesApiController.updateExtends(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String roleName,\n      @RequestBody UpdateIncludeCommand updateExtendsCommand)", "testcase": false, "constructor": false}, {"identifier": "removeExtends", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String includingRoleName)", "modifiers": "@DeleteMapping(ROLE_EXTEND_END_POINT + \"/{roleName}\") @ApiOperation( value = \"Remove extension from a grouprole from a role\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse( code = 204, message = \"Group role extension removed from role\", response = ResponseEntity.class) }) public", "return": "ResponseEntity", "signature": "ResponseEntity removeExtends(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String includingRoleName)", "full_signature": "@DeleteMapping(ROLE_EXTEND_END_POINT + \"/{roleName}\") @ApiOperation( value = \"Remove extension from a grouprole from a role\", response = ResponseEntity.class) @Transactional @ApiResponses({ @ApiResponse( code = 204, message = \"Group role extension removed from role\", response = ResponseEntity.class) }) public ResponseEntity removeExtends(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String includingRoleName)", "class_method_signature": "IdentitiesApiController.removeExtends(\n      @PathVariable(value = \"groupName\") String groupName,\n      @PathVariable(value = \"roleName\") String includingRoleName)", "testcase": false, "constructor": false}, {"identifier": "getGroupRoles", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName)", "modifiers": "@GetMapping(GROUP_END_POINT + \"/{groupName}/role\") @ApiOperation(value = \"Get group roles\", response = Collection.class) @ResponseBody public", "return": "Collection<RoleResponse>", "signature": "Collection<RoleResponse> getGroupRoles(\n      @PathVariable(value = \"groupName\") String groupName)", "full_signature": "@GetMapping(GROUP_END_POINT + \"/{groupName}/role\") @ApiOperation(value = \"Get group roles\", response = Collection.class) @ResponseBody public Collection<RoleResponse> getGroupRoles(\n      @PathVariable(value = \"groupName\") String groupName)", "class_method_signature": "IdentitiesApiController.getGroupRoles(\n      @PathVariable(value = \"groupName\") String groupName)", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "()", "modifiers": "@GetMapping(TEMP_USER_END_POINT) @ApiOperation(value = \"Get all users\", response = Collection.class) @ResponseBody @PreAuthorize(\"hasAnyRole('SU', 'MANAGER')\") public", "return": "Collection<UserResponse>", "signature": "Collection<UserResponse> getUsers()", "full_signature": "@GetMapping(TEMP_USER_END_POINT) @ApiOperation(value = \"Get all users\", response = Collection.class) @ResponseBody @PreAuthorize(\"hasAnyRole('SU', 'MANAGER')\") public Collection<UserResponse> getUsers()", "class_method_signature": "IdentitiesApiController.getUsers()", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName)", "modifiers": "@GetMapping(GROUP_PERMISSION_END_POINT) @ApiOperation(value = \"Get group permissions\", response = Collection.class) @ApiResponses({ @ApiResponse( code = 200, message = \"List of permissions for current user on group\", response = Collection.class) }) @ResponseBody public", "return": "Collection<Permission>", "signature": "Collection<Permission> getPermissions(\n      @PathVariable(value = \"groupName\") String groupName)", "full_signature": "@GetMapping(GROUP_PERMISSION_END_POINT) @ApiOperation(value = \"Get group permissions\", response = Collection.class) @ApiResponses({ @ApiResponse( code = 200, message = \"List of permissions for current user on group\", response = Collection.class) }) @ResponseBody public Collection<Permission> getPermissions(\n      @PathVariable(value = \"groupName\") String groupName)", "class_method_signature": "IdentitiesApiController.getPermissions(\n      @PathVariable(value = \"groupName\") String groupName)", "testcase": false, "constructor": false}, {"identifier": "checkGroupPermission", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName, GroupPermission permission)", "modifiers": "private", "return": "void", "signature": "void checkGroupPermission(\n      @PathVariable(value = \"groupName\") String groupName, GroupPermission permission)", "full_signature": "private void checkGroupPermission(\n      @PathVariable(value = \"groupName\") String groupName, GroupPermission permission)", "class_method_signature": "IdentitiesApiController.checkGroupPermission(\n      @PathVariable(value = \"groupName\") String groupName, GroupPermission permission)", "testcase": false, "constructor": false}], "file": "molgenis-api-identities/src/main/java/org/molgenis/api/identities/IdentitiesApiController.java"}, "focal_method": {"identifier": "getGroupRoles", "parameters": "(\n      @PathVariable(value = \"groupName\") String groupName)", "modifiers": "@GetMapping(GROUP_END_POINT + \"/{groupName}/role\") @ApiOperation(value = \"Get group roles\", response = Collection.class) @ResponseBody public", "return": "Collection<RoleResponse>", "body": "@GetMapping(GROUP_END_POINT + \"/{groupName}/role\")\n  @ApiOperation(value = \"Get group roles\", response = Collection.class)\n  @ResponseBody\n  public Collection<RoleResponse> getGroupRoles(\n      @PathVariable(value = \"groupName\") String groupName) {\n    checkGroupPermission(groupName, GroupPermission.VIEW);\n    Iterable<Role> roles = groupService.getGroup(groupName).getRoles();\n    Collection<Role> roleCollection = new ArrayList<>();\n    roles.forEach(roleCollection::add);\n\n    return roleCollection.stream().map(RoleResponse::fromEntity).collect(Collectors.toList());\n  }", "signature": "Collection<RoleResponse> getGroupRoles(\n      @PathVariable(value = \"groupName\") String groupName)", "full_signature": "@GetMapping(GROUP_END_POINT + \"/{groupName}/role\") @ApiOperation(value = \"Get group roles\", response = Collection.class) @ResponseBody public Collection<RoleResponse> getGroupRoles(\n      @PathVariable(value = \"groupName\") String groupName)", "class_method_signature": "IdentitiesApiController.getGroupRoles(\n      @PathVariable(value = \"groupName\") String groupName)", "testcase": false, "constructor": false, "invocations": ["checkGroupPermission", "getRoles", "getGroup", "forEach", "collect", "map", "stream", "toList"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}