{"test_class": {"identifier": "RelationTransformerTest", "superclass": "", "interfaces": "", "fields": [], "file": "molgenis-navigator/src/test/java/org/molgenis/navigator/copy/service/RelationTransformerTest.java"}, "test_case": {"identifier": "testTransformRefEntity", "parameters": "()", "modifiers": "@SuppressWarnings(\"ConstantConditions\") @Test", "return": "void", "body": "@SuppressWarnings(\"ConstantConditions\")\n  @Test\n  void testTransformRefEntity() {\n    EntityType entityType = mock(EntityType.class);\n    Attribute refAttr1 = mock(Attribute.class, RETURNS_DEEP_STUBS);\n    Attribute refAttr2 = mock(Attribute.class, RETURNS_DEEP_STUBS);\n    Attribute normalAttr = mock(Attribute.class);\n    when(refAttr1.getIdentifier()).thenReturn(\"refAttr1\");\n    when(refAttr1.getDataType()).thenReturn(MREF);\n    when(refAttr1.hasRefEntity()).thenReturn(true);\n    when(refAttr1.getRefEntity().getId()).thenReturn(\"ref1\");\n    when(refAttr2.getIdentifier()).thenReturn(\"refAttr2\");\n    when(refAttr2.getDataType()).thenReturn(XREF);\n    when(refAttr2.hasRefEntity()).thenReturn(true);\n    when(refAttr2.getRefEntity().getId()).thenReturn(\"ref2\");\n    when(normalAttr.getIdentifier()).thenReturn(\"normalAttr\");\n    when(normalAttr.getDataType()).thenReturn(STRING);\n    EntityType newRef1 = mock(EntityType.class);\n    EntityType newRef3 = mock(EntityType.class);\n    when(entityType.getAtomicAttributes()).thenReturn(asList(refAttr1, refAttr2, normalAttr));\n    Map<String, EntityType> newEntityTypes = ImmutableMap.of(\"ref1\", newRef1, \"ref3\", newRef3);\n\n    RelationTransformer.transformRefEntities(entityType, newEntityTypes);\n\n    verify(refAttr1).setRefEntity(newRef1);\n    verify(refAttr2, never()).setRefEntity(any(EntityType.class));\n    verify(normalAttr, never()).setRefEntity(any(EntityType.class));\n  }", "signature": "void testTransformRefEntity()", "full_signature": "@SuppressWarnings(\"ConstantConditions\") @Test void testTransformRefEntity()", "class_method_signature": "RelationTransformerTest.testTransformRefEntity()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "getIdentifier", "thenReturn", "when", "getDataType", "thenReturn", "when", "hasRefEntity", "thenReturn", "when", "getId", "getRefEntity", "thenReturn", "when", "getIdentifier", "thenReturn", "when", "getDataType", "thenReturn", "when", "hasRefEntity", "thenReturn", "when", "getId", "getRefEntity", "thenReturn", "when", "getIdentifier", "thenReturn", "when", "getDataType", "mock", "mock", "thenReturn", "when", "getAtomicAttributes", "asList", "of", "transformRefEntities", "setRefEntity", "verify", "setRefEntity", "verify", "never", "any", "setRefEntity", "verify", "never", "any"]}, "focal_class": {"identifier": "RelationTransformer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RelationTransformer", "parameters": "()", "modifiers": "private", "return": "", "signature": " RelationTransformer()", "full_signature": "private  RelationTransformer()", "class_method_signature": "RelationTransformer.RelationTransformer()", "testcase": false, "constructor": true}, {"identifier": "transformPackage", "parameters": "(EntityType entityType, Map<String, Package> newPackages)", "modifiers": "static", "return": "void", "signature": "void transformPackage(EntityType entityType, Map<String, Package> newPackages)", "full_signature": "static void transformPackage(EntityType entityType, Map<String, Package> newPackages)", "class_method_signature": "RelationTransformer.transformPackage(EntityType entityType, Map<String, Package> newPackages)", "testcase": false, "constructor": false}, {"identifier": "transformExtends", "parameters": "(EntityType entityType, Map<String, EntityType> newEntityTypes)", "modifiers": "static", "return": "void", "signature": "void transformExtends(EntityType entityType, Map<String, EntityType> newEntityTypes)", "full_signature": "static void transformExtends(EntityType entityType, Map<String, EntityType> newEntityTypes)", "class_method_signature": "RelationTransformer.transformExtends(EntityType entityType, Map<String, EntityType> newEntityTypes)", "testcase": false, "constructor": false}, {"identifier": "transformRefEntities", "parameters": "(EntityType entityType, Map<String, EntityType> newEntityTypes)", "modifiers": "static", "return": "void", "signature": "void transformRefEntities(EntityType entityType, Map<String, EntityType> newEntityTypes)", "full_signature": "static void transformRefEntities(EntityType entityType, Map<String, EntityType> newEntityTypes)", "class_method_signature": "RelationTransformer.transformRefEntities(EntityType entityType, Map<String, EntityType> newEntityTypes)", "testcase": false, "constructor": false}, {"identifier": "transformRefEntity", "parameters": "(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "modifiers": "private static", "return": "void", "signature": "void transformRefEntity(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "full_signature": "private static void transformRefEntity(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "class_method_signature": "RelationTransformer.transformRefEntity(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "testcase": false, "constructor": false}, {"identifier": "transformMappedBys", "parameters": "(EntityType entityType, Map<String, Attribute> newAttributes)", "modifiers": "static", "return": "void", "signature": "void transformMappedBys(EntityType entityType, Map<String, Attribute> newAttributes)", "full_signature": "static void transformMappedBys(EntityType entityType, Map<String, Attribute> newAttributes)", "class_method_signature": "RelationTransformer.transformMappedBys(EntityType entityType, Map<String, Attribute> newAttributes)", "testcase": false, "constructor": false}, {"identifier": "transformMappedBy", "parameters": "(Attribute attribute, Map<String, Attribute> newAttributes)", "modifiers": "@SuppressWarnings(\"java:S2259\") private static", "return": "void", "signature": "void transformMappedBy(Attribute attribute, Map<String, Attribute> newAttributes)", "full_signature": "@SuppressWarnings(\"java:S2259\") private static void transformMappedBy(Attribute attribute, Map<String, Attribute> newAttributes)", "class_method_signature": "RelationTransformer.transformMappedBy(Attribute attribute, Map<String, Attribute> newAttributes)", "testcase": false, "constructor": false}], "file": "molgenis-navigator/src/main/java/org/molgenis/navigator/copy/service/RelationTransformer.java"}, "focal_method": {"identifier": "transformRefEntity", "parameters": "(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "modifiers": "private static", "return": "void", "body": "private static void transformRefEntity(\n      Attribute attribute, Map<String, EntityType> newEntityTypes) {\n    if (attribute.hasRefEntity()) {\n      String refId = attribute.getRefEntity().getId();\n      if (newEntityTypes.containsKey(refId)) {\n        attribute.setRefEntity(newEntityTypes.get(refId));\n      }\n    }\n  }", "signature": "void transformRefEntity(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "full_signature": "private static void transformRefEntity(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "class_method_signature": "RelationTransformer.transformRefEntity(\n      Attribute attribute, Map<String, EntityType> newEntityTypes)", "testcase": false, "constructor": false, "invocations": ["hasRefEntity", "getId", "getRefEntity", "containsKey", "setRefEntity", "get"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}