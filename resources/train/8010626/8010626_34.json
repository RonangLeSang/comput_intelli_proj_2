{"test_class": {"identifier": "ExceptionHandlerFacadeImplTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock private ExceptionResponseGeneratorRegistry exceptionResponseGeneratorRegistry;", "modifier": "@Mock private", "type": "ExceptionResponseGeneratorRegistry", "declarator": "exceptionResponseGeneratorRegistry", "var_name": "exceptionResponseGeneratorRegistry"}, {"original_string": "private ExceptionHandlerFacadeImpl exceptionHandlerFacadeImpl;", "modifier": "private", "type": "ExceptionHandlerFacadeImpl", "declarator": "exceptionHandlerFacadeImpl", "var_name": "exceptionHandlerFacadeImpl"}], "file": "molgenis-web/src/test/java/org/molgenis/web/exception/ExceptionHandlerFacadeImplTest.java"}, "test_case": {"identifier": "testLogAndHandleExceptionHandlerMethodProblem", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Test\n  void testLogAndHandleExceptionHandlerMethodProblem() {\n    Exception e = mock(Exception.class);\n    HttpStatus httpStatus = HttpStatus.BAD_REQUEST;\n    HandlerMethod handlerMethod = mock(HandlerMethod.class);\n    when(handlerMethod.getBeanType()).thenReturn((Class) ApiController.class);\n\n    ExceptionResponseGenerator responseGenerator = mock(ExceptionResponseGenerator.class);\n    when(exceptionResponseGeneratorRegistry.getExceptionResponseGenerator(PROBLEM))\n        .thenReturn(responseGenerator);\n\n    exceptionHandlerFacadeImpl.logAndHandleException(e, httpStatus, handlerMethod);\n    verify(responseGenerator).createExceptionResponse(e, httpStatus, false);\n  }", "signature": "void testLogAndHandleExceptionHandlerMethodProblem()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test void testLogAndHandleExceptionHandlerMethodProblem()", "class_method_signature": "ExceptionHandlerFacadeImplTest.testLogAndHandleExceptionHandlerMethodProblem()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getBeanType", "mock", "thenReturn", "when", "getExceptionResponseGenerator", "logAndHandleException", "createExceptionResponse", "verify"]}, "focal_class": {"identifier": "ExceptionHandlerFacadeImpl", "superclass": "", "interfaces": "implements ExceptionHandlerFacade", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ExceptionHandlerFacadeImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ExceptionHandlerFacadeImpl.class)", "var_name": "LOG"}, {"original_string": "private final RequestMatcher asyncRequestMatcher;", "modifier": "private final", "type": "RequestMatcher", "declarator": "asyncRequestMatcher", "var_name": "asyncRequestMatcher"}, {"original_string": "private final ExceptionResponseGeneratorRegistry responseGeneratorRegistry;", "modifier": "private final", "type": "ExceptionResponseGeneratorRegistry", "declarator": "responseGeneratorRegistry", "var_name": "responseGeneratorRegistry"}, {"original_string": "@Value(\"${environment:@null}\")\n  private String environment;", "modifier": "@Value(\"${environment:@null}\")\n  private", "type": "String", "declarator": "environment", "var_name": "environment"}], "methods": [{"identifier": "ExceptionHandlerFacadeImpl", "parameters": "(ExceptionResponseGeneratorRegistry responseGeneratorRegistry)", "modifiers": "", "return": "", "signature": " ExceptionHandlerFacadeImpl(ExceptionResponseGeneratorRegistry responseGeneratorRegistry)", "full_signature": "  ExceptionHandlerFacadeImpl(ExceptionResponseGeneratorRegistry responseGeneratorRegistry)", "class_method_signature": "ExceptionHandlerFacadeImpl.ExceptionHandlerFacadeImpl(ExceptionResponseGeneratorRegistry responseGeneratorRegistry)", "testcase": false, "constructor": true}, {"identifier": "logAndHandleException", "parameters": "(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "modifiers": "@Override public", "return": "Object", "signature": "Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "full_signature": "@Override public Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "class_method_signature": "ExceptionHandlerFacadeImpl.logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "testcase": false, "constructor": false}, {"identifier": "logAndHandleException", "parameters": "(\n      Exception exception, HttpStatus httpStatus, HttpServletRequest request)", "modifiers": "@Override public", "return": "Object", "signature": "Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HttpServletRequest request)", "full_signature": "@Override public Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HttpServletRequest request)", "class_method_signature": "ExceptionHandlerFacadeImpl.logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "logAndHandleException", "parameters": "(\n      Exception exception, HttpStatus httpStatus, ExceptionResponseType responseType)", "modifiers": "private", "return": "Object", "signature": "Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, ExceptionResponseType responseType)", "full_signature": "private Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, ExceptionResponseType responseType)", "class_method_signature": "ExceptionHandlerFacadeImpl.logAndHandleException(\n      Exception exception, HttpStatus httpStatus, ExceptionResponseType responseType)", "testcase": false, "constructor": false}, {"identifier": "logException", "parameters": "(Exception exception, HttpStatus httpStatus)", "modifiers": "private", "return": "void", "signature": "void logException(Exception exception, HttpStatus httpStatus)", "full_signature": "private void logException(Exception exception, HttpStatus httpStatus)", "class_method_signature": "ExceptionHandlerFacadeImpl.logException(Exception exception, HttpStatus httpStatus)", "testcase": false, "constructor": false}, {"identifier": "isDevEnvironment", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isDevEnvironment()", "full_signature": "private boolean isDevEnvironment()", "class_method_signature": "ExceptionHandlerFacadeImpl.isDevEnvironment()", "testcase": false, "constructor": false}, {"identifier": "getExceptionResponseType", "parameters": "(HandlerMethod handlerMethod)", "modifiers": "private", "return": "ExceptionResponseType", "signature": "ExceptionResponseType getExceptionResponseType(HandlerMethod handlerMethod)", "full_signature": "private ExceptionResponseType getExceptionResponseType(HandlerMethod handlerMethod)", "class_method_signature": "ExceptionHandlerFacadeImpl.getExceptionResponseType(HandlerMethod handlerMethod)", "testcase": false, "constructor": false}, {"identifier": "getExceptionResponseType", "parameters": "(HttpServletRequest request)", "modifiers": "private", "return": "ExceptionResponseType", "signature": "ExceptionResponseType getExceptionResponseType(HttpServletRequest request)", "full_signature": "private ExceptionResponseType getExceptionResponseType(HttpServletRequest request)", "class_method_signature": "ExceptionHandlerFacadeImpl.getExceptionResponseType(HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "molgenis-web/src/main/java/org/molgenis/web/exception/ExceptionHandlerFacadeImpl.java"}, "focal_method": {"identifier": "logAndHandleException", "parameters": "(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod) {\n    ExceptionResponseType responseType = getExceptionResponseType(handlerMethod);\n    return logAndHandleException(exception, httpStatus, responseType);\n  }", "signature": "Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "full_signature": "@Override public Object logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "class_method_signature": "ExceptionHandlerFacadeImpl.logAndHandleException(\n      Exception exception, HttpStatus httpStatus, HandlerMethod handlerMethod)", "testcase": false, "constructor": false, "invocations": ["getExceptionResponseType", "logAndHandleException"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}