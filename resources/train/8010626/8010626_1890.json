{"test_class": {"identifier": "BaseQueryClauseGeneratorTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock DocumentIdGenerator documentIdGenerator;", "modifier": "@Mock", "type": "DocumentIdGenerator", "declarator": "documentIdGenerator", "var_name": "documentIdGenerator"}, {"original_string": "private BaseQueryClauseGenerator queryGenerator;", "modifier": "private", "type": "BaseQueryClauseGenerator", "declarator": "queryGenerator", "var_name": "queryGenerator"}], "file": "molgenis-data-elasticsearch/src/test/java/org/molgenis/data/elasticsearch/generator/BaseQueryClauseGeneratorTest.java"}, "test_case": {"identifier": "testUseNotAnalyzedFieldXrefTrue", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testUseNotAnalyzedFieldXrefTrue() {\n    Attribute attribute = when(mock(Attribute.class).getDataType()).thenReturn(XREF).getMock();\n    EntityType refEntityType = mock(EntityType.class);\n    Attribute refIdAttribute =\n        when(mock(Attribute.class).getDataType()).thenReturn(STRING).getMock();\n    when(refEntityType.getIdAttribute()).thenReturn(refIdAttribute);\n    when(attribute.getRefEntity()).thenReturn(refEntityType);\n    assertTrue(queryGenerator.useNotAnalyzedField(attribute));\n  }", "signature": "void testUseNotAnalyzedFieldXrefTrue()", "full_signature": "@Test void testUseNotAnalyzedFieldXrefTrue()", "class_method_signature": "BaseQueryClauseGeneratorTest.testUseNotAnalyzedFieldXrefTrue()", "testcase": true, "constructor": false, "invocations": ["getMock", "thenReturn", "when", "getDataType", "mock", "mock", "getMock", "thenReturn", "when", "getDataType", "mock", "thenReturn", "when", "getIdAttribute", "thenReturn", "when", "getRefEntity", "assertTrue", "useNotAnalyzedField"]}, "focal_class": {"identifier": "BaseQueryClauseGenerator", "superclass": "", "interfaces": "implements QueryClauseGenerator", "fields": [{"original_string": "private final Operator operator;", "modifier": "private final", "type": "Operator", "declarator": "operator", "var_name": "operator"}, {"original_string": "static final String ATTRIBUTE_SEPARATOR = \".\";", "modifier": "static final", "type": "String", "declarator": "ATTRIBUTE_SEPARATOR = \".\"", "var_name": "ATTRIBUTE_SEPARATOR"}, {"original_string": "static final String CANNOT_FILTER_DEEP_REFERENCE_MSG =\n      \"Can not filter on references deeper than %d.\";", "modifier": "static final", "type": "String", "declarator": "CANNOT_FILTER_DEEP_REFERENCE_MSG =\n      \"Can not filter on references deeper than %d.\"", "var_name": "CANNOT_FILTER_DEEP_REFERENCE_MSG"}, {"original_string": "static final String QUERY_VALUE_CANNOT_BE_NULL_MSG = \"Query value cannot be null\";", "modifier": "static final", "type": "String", "declarator": "QUERY_VALUE_CANNOT_BE_NULL_MSG = \"Query value cannot be null\"", "var_name": "QUERY_VALUE_CANNOT_BE_NULL_MSG"}, {"original_string": "private DocumentIdGenerator documentIdGenerator;", "modifier": "private", "type": "DocumentIdGenerator", "declarator": "documentIdGenerator", "var_name": "documentIdGenerator"}], "methods": [{"identifier": "BaseQueryClauseGenerator", "parameters": "(DocumentIdGenerator documentIdGenerator, Operator operator)", "modifiers": "", "return": "", "signature": " BaseQueryClauseGenerator(DocumentIdGenerator documentIdGenerator, Operator operator)", "full_signature": "  BaseQueryClauseGenerator(DocumentIdGenerator documentIdGenerator, Operator operator)", "class_method_signature": "BaseQueryClauseGenerator.BaseQueryClauseGenerator(DocumentIdGenerator documentIdGenerator, Operator operator)", "testcase": false, "constructor": true}, {"identifier": "getOperator", "parameters": "()", "modifiers": "@Override public", "return": "Operator", "signature": "Operator getOperator()", "full_signature": "@Override public Operator getOperator()", "class_method_signature": "BaseQueryClauseGenerator.getOperator()", "testcase": false, "constructor": false}, {"identifier": "createQueryClause", "parameters": "(QueryRule queryRule, EntityType entityType)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder createQueryClause(QueryRule queryRule, EntityType entityType)", "full_signature": "@Override public QueryBuilder createQueryClause(QueryRule queryRule, EntityType entityType)", "class_method_signature": "BaseQueryClauseGenerator.createQueryClause(QueryRule queryRule, EntityType entityType)", "testcase": false, "constructor": false}, {"identifier": "mapQueryRule", "parameters": "(QueryRule queryRule, EntityType entityType)", "modifiers": "abstract", "return": "QueryBuilder", "signature": "QueryBuilder mapQueryRule(QueryRule queryRule, EntityType entityType)", "full_signature": "abstract QueryBuilder mapQueryRule(QueryRule queryRule, EntityType entityType)", "class_method_signature": "BaseQueryClauseGenerator.mapQueryRule(QueryRule queryRule, EntityType entityType)", "testcase": false, "constructor": false}, {"identifier": "getQueryFieldName", "parameters": "(List<Attribute> attributePath)", "modifiers": "", "return": "String", "signature": "String getQueryFieldName(List<Attribute> attributePath)", "full_signature": " String getQueryFieldName(List<Attribute> attributePath)", "class_method_signature": "BaseQueryClauseGenerator.getQueryFieldName(List<Attribute> attributePath)", "testcase": false, "constructor": false}, {"identifier": "getQueryFieldName", "parameters": "(Attribute attribute)", "modifiers": "", "return": "String", "signature": "String getQueryFieldName(Attribute attribute)", "full_signature": " String getQueryFieldName(Attribute attribute)", "class_method_signature": "BaseQueryClauseGenerator.getQueryFieldName(Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "useNotAnalyzedField", "parameters": "(Attribute attr)", "modifiers": "", "return": "boolean", "signature": "boolean useNotAnalyzedField(Attribute attr)", "full_signature": " boolean useNotAnalyzedField(Attribute attr)", "class_method_signature": "BaseQueryClauseGenerator.useNotAnalyzedField(Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "getQueryValues", "parameters": "(Attribute attr, Object queryRuleValue)", "modifiers": "@SuppressWarnings(\"UnstableApiUsage\")", "return": "List<Object>", "signature": "List<Object> getQueryValues(Attribute attr, Object queryRuleValue)", "full_signature": "@SuppressWarnings(\"UnstableApiUsage\") List<Object> getQueryValues(Attribute attr, Object queryRuleValue)", "class_method_signature": "BaseQueryClauseGenerator.getQueryValues(Attribute attr, Object queryRuleValue)", "testcase": false, "constructor": false}, {"identifier": "getQueryValue", "parameters": "(Attribute attribute, Object queryRuleValue)", "modifiers": "", "return": "Object", "signature": "Object getQueryValue(Attribute attribute, Object queryRuleValue)", "full_signature": " Object getQueryValue(Attribute attribute, Object queryRuleValue)", "class_method_signature": "BaseQueryClauseGenerator.getQueryValue(Attribute attribute, Object queryRuleValue)", "testcase": false, "constructor": false}, {"identifier": "nestedQueryBuilder", "parameters": "(\n      EntityType entityType, List<Attribute> attributePath, QueryBuilder queryBuilder)", "modifiers": "", "return": "QueryBuilder", "signature": "QueryBuilder nestedQueryBuilder(\n      EntityType entityType, List<Attribute> attributePath, QueryBuilder queryBuilder)", "full_signature": " QueryBuilder nestedQueryBuilder(\n      EntityType entityType, List<Attribute> attributePath, QueryBuilder queryBuilder)", "class_method_signature": "BaseQueryClauseGenerator.nestedQueryBuilder(\n      EntityType entityType, List<Attribute> attributePath, QueryBuilder queryBuilder)", "testcase": false, "constructor": false}, {"identifier": "validateIndexingDepth", "parameters": "(EntityType entityType, List<Attribute> attributePath)", "modifiers": "private", "return": "void", "signature": "void validateIndexingDepth(EntityType entityType, List<Attribute> attributePath)", "full_signature": "private void validateIndexingDepth(EntityType entityType, List<Attribute> attributePath)", "class_method_signature": "BaseQueryClauseGenerator.validateIndexingDepth(EntityType entityType, List<Attribute> attributePath)", "testcase": false, "constructor": false}, {"identifier": "validateNumericalQueryField", "parameters": "(Attribute attr)", "modifiers": "", "return": "void", "signature": "void validateNumericalQueryField(Attribute attr)", "full_signature": " void validateNumericalQueryField(Attribute attr)", "class_method_signature": "BaseQueryClauseGenerator.validateNumericalQueryField(Attribute attr)", "testcase": false, "constructor": false}], "file": "molgenis-data-elasticsearch/src/main/java/org/molgenis/data/elasticsearch/generator/BaseQueryClauseGenerator.java"}, "focal_method": {"identifier": "useNotAnalyzedField", "parameters": "(Attribute attr)", "modifiers": "", "return": "boolean", "body": "boolean useNotAnalyzedField(Attribute attr) {\n    AttributeType attrType = attr.getDataType();\n    switch (attrType) {\n      case BOOL:\n      case DATE:\n      case DATE_TIME:\n      case DECIMAL:\n      case INT:\n      case LONG:\n        return false;\n      case EMAIL:\n      case ENUM:\n      case HTML:\n      case HYPERLINK:\n      case SCRIPT:\n      case STRING:\n      case TEXT:\n        return true;\n      case CATEGORICAL:\n      case CATEGORICAL_MREF:\n      case XREF:\n      case MREF:\n      case FILE:\n      case ONE_TO_MANY:\n        return useNotAnalyzedField(attr.getRefEntity().getIdAttribute());\n      case COMPOUND:\n        throw new MolgenisQueryException(new IllegalAttributeTypeException(attrType));\n      default:\n        throw new UnexpectedEnumException(attrType);\n    }\n  }", "signature": "boolean useNotAnalyzedField(Attribute attr)", "full_signature": " boolean useNotAnalyzedField(Attribute attr)", "class_method_signature": "BaseQueryClauseGenerator.useNotAnalyzedField(Attribute attr)", "testcase": false, "constructor": false, "invocations": ["getDataType", "useNotAnalyzedField", "getIdAttribute", "getRefEntity"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}