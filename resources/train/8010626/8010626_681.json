{"test_class": {"identifier": "PermissionManagerControllerTest", "superclass": "extends AbstractMolgenisSpringTest", "interfaces": "", "fields": [{"original_string": "@Autowired private Config config;", "modifier": "@Autowired private", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private User user1, user2;", "modifier": "private", "type": "User", "declarator": "user1", "var_name": "user1"}, {"original_string": "private PrincipalSid userSid;", "modifier": "private", "type": "PrincipalSid", "declarator": "userSid", "var_name": "userSid"}, {"original_string": "private Role role1, role2;", "modifier": "private", "type": "Role", "declarator": "role1", "var_name": "role1"}, {"original_string": "private GrantedAuthoritySid roleSid;", "modifier": "private", "type": "GrantedAuthoritySid", "declarator": "roleSid", "var_name": "roleSid"}, {"original_string": "private Plugin plugin1, plugin2;", "modifier": "private", "type": "Plugin", "declarator": "plugin1", "var_name": "plugin1"}, {"original_string": "private EntityType entityType1, entityType2, entityType3;", "modifier": "private", "type": "EntityType", "declarator": "entityType1", "var_name": "entityType1"}, {"original_string": "private Package package1, package2, package3;", "modifier": "private", "type": "Package", "declarator": "package1", "var_name": "package1"}, {"original_string": "private PluginIdentity pluginIdentity1;", "modifier": "private", "type": "PluginIdentity", "declarator": "pluginIdentity1", "var_name": "pluginIdentity1"}, {"original_string": "private PluginIdentity pluginIdentity2;", "modifier": "private", "type": "PluginIdentity", "declarator": "pluginIdentity2", "var_name": "pluginIdentity2"}, {"original_string": "private EntityTypeIdentity entityIdentity1;", "modifier": "private", "type": "EntityTypeIdentity", "declarator": "entityIdentity1", "var_name": "entityIdentity1"}, {"original_string": "private EntityTypeIdentity entityIdentity2;", "modifier": "private", "type": "EntityTypeIdentity", "declarator": "entityIdentity2", "var_name": "entityIdentity2"}, {"original_string": "private EntityTypeIdentity entityIdentity3;", "modifier": "private", "type": "EntityTypeIdentity", "declarator": "entityIdentity3", "var_name": "entityIdentity3"}, {"original_string": "private PackageIdentity packageIdentity1;", "modifier": "private", "type": "PackageIdentity", "declarator": "packageIdentity1", "var_name": "packageIdentity1"}, {"original_string": "private PackageIdentity packageIdentity2;", "modifier": "private", "type": "PackageIdentity", "declarator": "packageIdentity2", "var_name": "packageIdentity2"}, {"original_string": "private PackageIdentity packageIdentity3;", "modifier": "private", "type": "PackageIdentity", "declarator": "packageIdentity3", "var_name": "packageIdentity3"}, {"original_string": "@Mock private Permission permissionWritemeta;", "modifier": "@Mock private", "type": "Permission", "declarator": "permissionWritemeta", "var_name": "permissionWritemeta"}, {"original_string": "@Mock private Permission permissionWrite;", "modifier": "@Mock private", "type": "Permission", "declarator": "permissionWrite", "var_name": "permissionWrite"}, {"original_string": "@Mock private Permission permissionRead;", "modifier": "@Mock private", "type": "Permission", "declarator": "permissionRead", "var_name": "permissionRead"}, {"original_string": "@Mock private Permission permissionCount;", "modifier": "@Mock private", "type": "Permission", "declarator": "permissionCount", "var_name": "permissionCount"}, {"original_string": "@Autowired private PermissionManagerController permissionManagerController;", "modifier": "@Autowired private", "type": "PermissionManagerController", "declarator": "permissionManagerController", "var_name": "permissionManagerController"}, {"original_string": "@Autowired private GsonHttpMessageConverter gsonHttpMessageConverter;", "modifier": "@Autowired private", "type": "GsonHttpMessageConverter", "declarator": "gsonHttpMessageConverter", "var_name": "gsonHttpMessageConverter"}, {"original_string": "@Autowired private DataService dataService;", "modifier": "@Autowired private", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "@Autowired private MutableAclService mutableAclService;", "modifier": "@Autowired private", "type": "MutableAclService", "declarator": "mutableAclService", "var_name": "mutableAclService"}, {"original_string": "@Autowired private SystemEntityTypeRegistry systemEntityTypeRegistry;", "modifier": "@Autowired private", "type": "SystemEntityTypeRegistry", "declarator": "systemEntityTypeRegistry", "var_name": "systemEntityTypeRegistry"}, {"original_string": "@Autowired private MutableAclClassService mutableAclClassService;", "modifier": "@Autowired private", "type": "MutableAclClassService", "declarator": "mutableAclClassService", "var_name": "mutableAclClassService"}, {"original_string": "@Autowired private PermissionRegistry permissionRegistry;", "modifier": "@Autowired private", "type": "PermissionRegistry", "declarator": "permissionRegistry", "var_name": "permissionRegistry"}], "file": "molgenis-core-ui/src/test/java/org/molgenis/core/ui/admin/permission/PermissionManagerControllerTest.java"}, "test_case": {"identifier": "PermissionManagerController", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void PermissionManagerController() {\n    assertThrows(\n        NullPointerException.class,\n        () -> new PermissionManagerController(null, null, null, null, null));\n  }", "signature": "void PermissionManagerController()", "full_signature": "@Test void PermissionManagerController()", "class_method_signature": "PermissionManagerControllerTest.PermissionManagerController()", "testcase": true, "constructor": false, "invocations": ["assertThrows"]}, "focal_class": {"identifier": "PermissionManagerController", "superclass": "extends PluginController", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PermissionManagerController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PermissionManagerController.class)", "var_name": "LOG"}, {"original_string": "public static final String URI = PluginController.PLUGIN_URI_PREFIX + \"permissionmanager\";", "modifier": "public static final", "type": "String", "declarator": "URI = PluginController.PLUGIN_URI_PREFIX + \"permissionmanager\"", "var_name": "URI"}, {"original_string": "public static final String RADIO = \"radio-\";", "modifier": "public static final", "type": "String", "declarator": "RADIO = \"radio-\"", "var_name": "RADIO"}, {"original_string": "private final DataService dataService;", "modifier": "private final", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private final MutableAclService mutableAclService;", "modifier": "private final", "type": "MutableAclService", "declarator": "mutableAclService", "var_name": "mutableAclService"}, {"original_string": "private final MutableAclClassService mutableAclClassService;", "modifier": "private final", "type": "MutableAclClassService", "declarator": "mutableAclClassService", "var_name": "mutableAclClassService"}, {"original_string": "private final SystemEntityTypeRegistry systemEntityTypeRegistry;", "modifier": "private final", "type": "SystemEntityTypeRegistry", "declarator": "systemEntityTypeRegistry", "var_name": "systemEntityTypeRegistry"}, {"original_string": "private final PermissionRegistry permissionRegistry;", "modifier": "private final", "type": "PermissionRegistry", "declarator": "permissionRegistry", "var_name": "permissionRegistry"}], "methods": [{"identifier": "PermissionManagerController", "parameters": "(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "modifiers": "public", "return": "", "signature": " PermissionManagerController(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "full_signature": "public  PermissionManagerController(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "class_method_signature": "PermissionManagerController.PermissionManagerController(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Model model)", "modifiers": "@GetMapping public", "return": "String", "signature": "String init(Model model)", "full_signature": "@GetMapping public String init(Model model)", "class_method_signature": "PermissionManagerController.init(Model model)", "testcase": false, "constructor": false}, {"identifier": "getEntityTypeDtos", "parameters": "()", "modifiers": "private", "return": "List<EntityTypeRlsResponse>", "signature": "List<EntityTypeRlsResponse> getEntityTypeDtos()", "full_signature": "private List<EntityTypeRlsResponse> getEntityTypeDtos()", "class_method_signature": "PermissionManagerController.getEntityTypeDtos()", "testcase": false, "constructor": false}, {"identifier": "getRoleEntityClassPermissions", "parameters": "(@PathVariable String rolename)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/entityclass/role/{rolename}\") @ResponseBody public", "return": "Permissions", "signature": "Permissions getRoleEntityClassPermissions(@PathVariable String rolename)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/entityclass/role/{rolename}\") @ResponseBody public Permissions getRoleEntityClassPermissions(@PathVariable String rolename)", "class_method_signature": "PermissionManagerController.getRoleEntityClassPermissions(@PathVariable String rolename)", "testcase": false, "constructor": false}, {"identifier": "getUserPluginPermissions", "parameters": "(@PathVariable String username)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/plugin/user/{username}\") @ResponseBody public", "return": "Permissions", "signature": "Permissions getUserPluginPermissions(@PathVariable String username)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/plugin/user/{username}\") @ResponseBody public Permissions getUserPluginPermissions(@PathVariable String username)", "class_method_signature": "PermissionManagerController.getUserPluginPermissions(@PathVariable String username)", "testcase": false, "constructor": false}, {"identifier": "getUserPackagePermissions", "parameters": "(@PathVariable String username)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/package/user/{username}\") @ResponseBody public", "return": "Permissions", "signature": "Permissions getUserPackagePermissions(@PathVariable String username)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/package/user/{username}\") @ResponseBody public Permissions getUserPackagePermissions(@PathVariable String username)", "class_method_signature": "PermissionManagerController.getUserPackagePermissions(@PathVariable String username)", "testcase": false, "constructor": false}, {"identifier": "getRolePackagePermissions", "parameters": "(@PathVariable String rolename)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/package/role/{rolename}\") @ResponseBody public", "return": "Permissions", "signature": "Permissions getRolePackagePermissions(@PathVariable String rolename)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/package/role/{rolename}\") @ResponseBody public Permissions getRolePackagePermissions(@PathVariable String rolename)", "class_method_signature": "PermissionManagerController.getRolePackagePermissions(@PathVariable String rolename)", "testcase": false, "constructor": false}, {"identifier": "getUserEntityClassPermissions", "parameters": "(@PathVariable String username)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/entityclass/user/{username}\") @ResponseBody public", "return": "Permissions", "signature": "Permissions getUserEntityClassPermissions(@PathVariable String username)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/entityclass/user/{username}\") @ResponseBody public Permissions getUserEntityClassPermissions(@PathVariable String username)", "class_method_signature": "PermissionManagerController.getUserEntityClassPermissions(@PathVariable String username)", "testcase": false, "constructor": false}, {"identifier": "updateRolePluginPermissions", "parameters": "(@RequestParam String rolename, WebRequest webRequest)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/plugin/role\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateRolePluginPermissions(@RequestParam String rolename, WebRequest webRequest)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/plugin/role\") @ResponseStatus(HttpStatus.OK) public void updateRolePluginPermissions(@RequestParam String rolename, WebRequest webRequest)", "class_method_signature": "PermissionManagerController.updateRolePluginPermissions(@RequestParam String rolename, WebRequest webRequest)", "testcase": false, "constructor": false}, {"identifier": "updateRoleEntityClassPermissions", "parameters": "(\n      @RequestParam String rolename, WebRequest webRequest)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/entityclass/role\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateRoleEntityClassPermissions(\n      @RequestParam String rolename, WebRequest webRequest)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/entityclass/role\") @ResponseStatus(HttpStatus.OK) public void updateRoleEntityClassPermissions(\n      @RequestParam String rolename, WebRequest webRequest)", "class_method_signature": "PermissionManagerController.updateRoleEntityClassPermissions(\n      @RequestParam String rolename, WebRequest webRequest)", "testcase": false, "constructor": false}, {"identifier": "updateRolePackagePermissions", "parameters": "(@RequestParam String rolename, WebRequest webRequest)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/package/role\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateRolePackagePermissions(@RequestParam String rolename, WebRequest webRequest)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/package/role\") @ResponseStatus(HttpStatus.OK) public void updateRolePackagePermissions(@RequestParam String rolename, WebRequest webRequest)", "class_method_signature": "PermissionManagerController.updateRolePackagePermissions(@RequestParam String rolename, WebRequest webRequest)", "testcase": false, "constructor": false}, {"identifier": "updateUserPackagePermissions", "parameters": "(@RequestParam String username, WebRequest webRequest)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/package/user\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateUserPackagePermissions(@RequestParam String username, WebRequest webRequest)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/package/user\") @ResponseStatus(HttpStatus.OK) public void updateUserPackagePermissions(@RequestParam String username, WebRequest webRequest)", "class_method_signature": "PermissionManagerController.updateUserPackagePermissions(@RequestParam String username, WebRequest webRequest)", "testcase": false, "constructor": false}, {"identifier": "updateUserPluginPermissions", "parameters": "(@RequestParam String username, WebRequest webRequest)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/plugin/user\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateUserPluginPermissions(@RequestParam String username, WebRequest webRequest)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/plugin/user\") @ResponseStatus(HttpStatus.OK) public void updateUserPluginPermissions(@RequestParam String username, WebRequest webRequest)", "class_method_signature": "PermissionManagerController.updateUserPluginPermissions(@RequestParam String username, WebRequest webRequest)", "testcase": false, "constructor": false}, {"identifier": "removeSidPluginPermission", "parameters": "(Plugin plugin, Sid sid)", "modifiers": "private", "return": "void", "signature": "void removeSidPluginPermission(Plugin plugin, Sid sid)", "full_signature": "private void removeSidPluginPermission(Plugin plugin, Sid sid)", "class_method_signature": "PermissionManagerController.removeSidPluginPermission(Plugin plugin, Sid sid)", "testcase": false, "constructor": false}, {"identifier": "createSidPluginPermission", "parameters": "(Plugin plugin, Sid sid, PermissionSet pluginPermission)", "modifiers": "private", "return": "void", "signature": "void createSidPluginPermission(Plugin plugin, Sid sid, PermissionSet pluginPermission)", "full_signature": "private void createSidPluginPermission(Plugin plugin, Sid sid, PermissionSet pluginPermission)", "class_method_signature": "PermissionManagerController.createSidPluginPermission(Plugin plugin, Sid sid, PermissionSet pluginPermission)", "testcase": false, "constructor": false}, {"identifier": "getRolePluginPermissions", "parameters": "(@PathVariable String rolename)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/plugin/role/{rolename}\") @ResponseBody public", "return": "Permissions", "signature": "Permissions getRolePluginPermissions(@PathVariable String rolename)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional(readOnly = true) @GetMapping(\"/plugin/role/{rolename}\") @ResponseBody public Permissions getRolePluginPermissions(@PathVariable String rolename)", "class_method_signature": "PermissionManagerController.getRolePluginPermissions(@PathVariable String rolename)", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "()", "modifiers": "", "return": "List<Plugin>", "signature": "List<Plugin> getPlugins()", "full_signature": " List<Plugin> getPlugins()", "class_method_signature": "PermissionManagerController.getPlugins()", "testcase": false, "constructor": false}, {"identifier": "updateUserEntityClassPermissions", "parameters": "(\n      @RequestParam String username, WebRequest webRequest)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/entityclass/user\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateUserEntityClassPermissions(\n      @RequestParam String username, WebRequest webRequest)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/entityclass/user\") @ResponseStatus(HttpStatus.OK) public void updateUserEntityClassPermissions(\n      @RequestParam String username, WebRequest webRequest)", "class_method_signature": "PermissionManagerController.updateUserEntityClassPermissions(\n      @RequestParam String username, WebRequest webRequest)", "testcase": false, "constructor": false}, {"identifier": "updateEntityClassRls", "parameters": "(@Valid @RequestBody EntityTypeRlsRequest entityTypeRlsRequest)", "modifiers": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/entityclass/rls\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateEntityClassRls(@Valid @RequestBody EntityTypeRlsRequest entityTypeRlsRequest)", "full_signature": "@PreAuthorize(\"hasAnyRole('ROLE_SU')\") @Transactional @PostMapping(\"/update/entityclass/rls\") @ResponseStatus(HttpStatus.OK) public void updateEntityClassRls(@Valid @RequestBody EntityTypeRlsRequest entityTypeRlsRequest)", "class_method_signature": "PermissionManagerController.updateEntityClassRls(@Valid @RequestBody EntityTypeRlsRequest entityTypeRlsRequest)", "testcase": false, "constructor": false}, {"identifier": "getPermissionSets", "parameters": "()", "modifiers": "@ApiOperation( value = \"Get all permission sets\", response = PermissionSetResponse.class, responseContainer = \"List\") @GetMapping(\"/permissionSets\") @ResponseBody public", "return": "List<PermissionSetResponse>", "signature": "List<PermissionSetResponse> getPermissionSets()", "full_signature": "@ApiOperation( value = \"Get all permission sets\", response = PermissionSetResponse.class, responseContainer = \"List\") @GetMapping(\"/permissionSets\") @ResponseBody public List<PermissionSetResponse> getPermissionSets()", "class_method_signature": "PermissionManagerController.getPermissionSets()", "testcase": false, "constructor": false}, {"identifier": "paramValueToPermissionSet", "parameters": "(String paramValue)", "modifiers": "private static", "return": "PermissionSet", "signature": "PermissionSet paramValueToPermissionSet(String paramValue)", "full_signature": "private static PermissionSet paramValueToPermissionSet(String paramValue)", "class_method_signature": "PermissionManagerController.paramValueToPermissionSet(String paramValue)", "testcase": false, "constructor": false}, {"identifier": "updatePluginPermissions", "parameters": "(WebRequest webRequest, Sid sid)", "modifiers": "private", "return": "void", "signature": "void updatePluginPermissions(WebRequest webRequest, Sid sid)", "full_signature": "private void updatePluginPermissions(WebRequest webRequest, Sid sid)", "class_method_signature": "PermissionManagerController.updatePluginPermissions(WebRequest webRequest, Sid sid)", "testcase": false, "constructor": false}, {"identifier": "updatePackagePermissions", "parameters": "(WebRequest webRequest, Sid sid)", "modifiers": "private", "return": "void", "signature": "void updatePackagePermissions(WebRequest webRequest, Sid sid)", "full_signature": "private void updatePackagePermissions(WebRequest webRequest, Sid sid)", "class_method_signature": "PermissionManagerController.updatePackagePermissions(WebRequest webRequest, Sid sid)", "testcase": false, "constructor": false}, {"identifier": "getPackagePermissions", "parameters": "(Sid sid)", "modifiers": "private", "return": "Permissions", "signature": "Permissions getPackagePermissions(Sid sid)", "full_signature": "private Permissions getPackagePermissions(Sid sid)", "class_method_signature": "PermissionManagerController.getPackagePermissions(Sid sid)", "testcase": false, "constructor": false}, {"identifier": "getPluginPermissions", "parameters": "(Sid sid)", "modifiers": "private", "return": "Permissions", "signature": "Permissions getPluginPermissions(Sid sid)", "full_signature": "private Permissions getPluginPermissions(Sid sid)", "class_method_signature": "PermissionManagerController.getPluginPermissions(Sid sid)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(Sid sid, List<ObjectIdentity> objectIdentities)", "modifiers": "private", "return": "Permissions", "signature": "Permissions getPermissions(Sid sid, List<ObjectIdentity> objectIdentities)", "full_signature": "private Permissions getPermissions(Sid sid, List<ObjectIdentity> objectIdentities)", "class_method_signature": "PermissionManagerController.getPermissions(Sid sid, List<ObjectIdentity> objectIdentities)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(Map<ObjectIdentity, Acl> acls, Sid sid)", "modifiers": "private", "return": "Multimap<String, String>", "signature": "Multimap<String, String> getPermissions(Map<ObjectIdentity, Acl> acls, Sid sid)", "full_signature": "private Multimap<String, String> getPermissions(Map<ObjectIdentity, Acl> acls, Sid sid)", "class_method_signature": "PermissionManagerController.getPermissions(Map<ObjectIdentity, Acl> acls, Sid sid)", "testcase": false, "constructor": false}, {"identifier": "getPermissionString", "parameters": "(AccessControlEntry ace)", "modifiers": "private", "return": "String", "signature": "String getPermissionString(AccessControlEntry ace)", "full_signature": "private String getPermissionString(AccessControlEntry ace)", "class_method_signature": "PermissionManagerController.getPermissionString(AccessControlEntry ace)", "testcase": false, "constructor": false}, {"identifier": "removeSidEntityTypePermission", "parameters": "(EntityType entityType, Sid sid)", "modifiers": "private", "return": "void", "signature": "void removeSidEntityTypePermission(EntityType entityType, Sid sid)", "full_signature": "private void removeSidEntityTypePermission(EntityType entityType, Sid sid)", "class_method_signature": "PermissionManagerController.removeSidEntityTypePermission(EntityType entityType, Sid sid)", "testcase": false, "constructor": false}, {"identifier": "createSidEntityTypePermission", "parameters": "(\n      EntityType entityType, Sid sid, PermissionSet permissionSet)", "modifiers": "private", "return": "void", "signature": "void createSidEntityTypePermission(\n      EntityType entityType, Sid sid, PermissionSet permissionSet)", "full_signature": "private void createSidEntityTypePermission(\n      EntityType entityType, Sid sid, PermissionSet permissionSet)", "class_method_signature": "PermissionManagerController.createSidEntityTypePermission(\n      EntityType entityType, Sid sid, PermissionSet permissionSet)", "testcase": false, "constructor": false}, {"identifier": "createSidPackagePermission", "parameters": "(Package pack, Sid sid, PermissionSet permissionSet)", "modifiers": "private", "return": "void", "signature": "void createSidPackagePermission(Package pack, Sid sid, PermissionSet permissionSet)", "full_signature": "private void createSidPackagePermission(Package pack, Sid sid, PermissionSet permissionSet)", "class_method_signature": "PermissionManagerController.createSidPackagePermission(Package pack, Sid sid, PermissionSet permissionSet)", "testcase": false, "constructor": false}, {"identifier": "removeSidPackagePermission", "parameters": "(Package pack, Sid sid)", "modifiers": "private", "return": "void", "signature": "void removeSidPackagePermission(Package pack, Sid sid)", "full_signature": "private void removeSidPackagePermission(Package pack, Sid sid)", "class_method_signature": "PermissionManagerController.removeSidPackagePermission(Package pack, Sid sid)", "testcase": false, "constructor": false}, {"identifier": "removePermissionForSid", "parameters": "(Sid sid, ObjectIdentity objectIdentity)", "modifiers": "private", "return": "void", "signature": "void removePermissionForSid(Sid sid, ObjectIdentity objectIdentity)", "full_signature": "private void removePermissionForSid(Sid sid, ObjectIdentity objectIdentity)", "class_method_signature": "PermissionManagerController.removePermissionForSid(Sid sid, ObjectIdentity objectIdentity)", "testcase": false, "constructor": false}, {"identifier": "updateEntityTypePermissions", "parameters": "(WebRequest webRequest, Sid sid)", "modifiers": "private", "return": "void", "signature": "void updateEntityTypePermissions(WebRequest webRequest, Sid sid)", "full_signature": "private void updateEntityTypePermissions(WebRequest webRequest, Sid sid)", "class_method_signature": "PermissionManagerController.updateEntityTypePermissions(WebRequest webRequest, Sid sid)", "testcase": false, "constructor": false}, {"identifier": "getEntityTypePermissions", "parameters": "(Sid sid)", "modifiers": "private", "return": "Permissions", "signature": "Permissions getEntityTypePermissions(Sid sid)", "full_signature": "private Permissions getEntityTypePermissions(Sid sid)", "class_method_signature": "PermissionManagerController.getEntityTypePermissions(Sid sid)", "testcase": false, "constructor": false}, {"identifier": "createSidPermission", "parameters": "(\n      Sid sid,\n      ObjectIdentity objectIdentity,\n      org.springframework.security.acls.model.Permission permission)", "modifiers": "private", "return": "void", "signature": "void createSidPermission(\n      Sid sid,\n      ObjectIdentity objectIdentity,\n      org.springframework.security.acls.model.Permission permission)", "full_signature": "private void createSidPermission(\n      Sid sid,\n      ObjectIdentity objectIdentity,\n      org.springframework.security.acls.model.Permission permission)", "class_method_signature": "PermissionManagerController.createSidPermission(\n      Sid sid,\n      ObjectIdentity objectIdentity,\n      org.springframework.security.acls.model.Permission permission)", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "()", "modifiers": "", "return": "List<User>", "signature": "List<User> getUsers()", "full_signature": " List<User> getUsers()", "class_method_signature": "PermissionManagerController.getUsers()", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "()", "modifiers": "", "return": "List<Role>", "signature": "List<Role> getRoles()", "full_signature": " List<Role> getRoles()", "class_method_signature": "PermissionManagerController.getRoles()", "testcase": false, "constructor": false}, {"identifier": "getPackages", "parameters": "()", "modifiers": "", "return": "List<Package>", "signature": "List<Package> getPackages()", "full_signature": " List<Package> getPackages()", "class_method_signature": "PermissionManagerController.getPackages()", "testcase": false, "constructor": false}, {"identifier": "deleteAceIfExists", "parameters": "(Sid sid, MutableAcl acl)", "modifiers": "private", "return": "boolean", "signature": "boolean deleteAceIfExists(Sid sid, MutableAcl acl)", "full_signature": "private boolean deleteAceIfExists(Sid sid, MutableAcl acl)", "class_method_signature": "PermissionManagerController.deleteAceIfExists(Sid sid, MutableAcl acl)", "testcase": false, "constructor": false}, {"identifier": "getEntityTypes", "parameters": "()", "modifiers": "private", "return": "Stream<EntityType>", "signature": "Stream<EntityType> getEntityTypes()", "full_signature": "private Stream<EntityType> getEntityTypes()", "class_method_signature": "PermissionManagerController.getEntityTypes()", "testcase": false, "constructor": false}, {"identifier": "handleRuntimeException", "parameters": "(RuntimeException e)", "modifiers": "@ExceptionHandler(RuntimeException.class) @ResponseBody @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public", "return": "Map<String, String>", "signature": "Map<String, String> handleRuntimeException(RuntimeException e)", "full_signature": "@ExceptionHandler(RuntimeException.class) @ResponseBody @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public Map<String, String> handleRuntimeException(RuntimeException e)", "class_method_signature": "PermissionManagerController.handleRuntimeException(RuntimeException e)", "testcase": false, "constructor": false}], "file": "molgenis-core-ui/src/main/java/org/molgenis/core/ui/admin/permission/PermissionManagerController.java"}, "focal_method": {"identifier": "PermissionManagerController", "parameters": "(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "modifiers": "public", "return": "", "body": "public PermissionManagerController(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry) {\n    super(URI);\n    this.dataService = requireNonNull(dataService);\n    this.mutableAclService = requireNonNull(mutableAclService);\n    this.mutableAclClassService = requireNonNull(mutableAclClassService);\n    this.systemEntityTypeRegistry = requireNonNull(systemEntityTypeRegistry);\n    this.permissionRegistry = requireNonNull(permissionRegistry);\n  }", "signature": " PermissionManagerController(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "full_signature": "public  PermissionManagerController(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "class_method_signature": "PermissionManagerController.PermissionManagerController(\n      DataService dataService,\n      MutableAclService mutableAclService,\n      MutableAclClassService mutableAclClassService,\n      SystemEntityTypeRegistry systemEntityTypeRegistry,\n      PermissionRegistry permissionRegistry)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}