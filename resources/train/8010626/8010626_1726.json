{"test_class": {"identifier": "AttributeValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AttributeValidator attributeValidator;", "modifier": "private", "type": "AttributeValidator", "declarator": "attributeValidator", "var_name": "attributeValidator"}, {"original_string": "private DataService dataService;", "modifier": "private", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private EntityManager entityManager;", "modifier": "private", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}], "file": "molgenis-data-validation/src/test/java/org/molgenis/data/validation/meta/AttributeValidatorTest.java"}, "test_case": {"identifier": "testDefaultValueInt1", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testDefaultValueInt1() {\n    Attribute attr = mock(Attribute.class);\n    when(attr.getDefaultValue()).thenReturn(\"test\");\n    when(attr.getDataType()).thenReturn(AttributeType.INT);\n    Exception exception =\n        assertThrows(\n            MolgenisValidationException.class,\n            () -> attributeValidator.validateDefaultValue(attr, true));\n    assertThat(exception.getMessage())\n        .containsPattern(\"Invalid default value \\\\[test\\\\] for data type \\\\[INT\\\\]\");\n  }", "signature": "void testDefaultValueInt1()", "full_signature": "@Test void testDefaultValueInt1()", "class_method_signature": "AttributeValidatorTest.testDefaultValueInt1()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getDefaultValue", "thenReturn", "when", "getDataType", "assertThrows", "validateDefaultValue", "containsPattern", "assertThat", "getMessage"]}, "focal_class": {"identifier": "AttributeValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DataService dataService;", "modifier": "private final", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private final EntityManager entityManager;", "modifier": "private final", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}, {"original_string": "private final EmailValidator emailValidator;", "modifier": "private final", "type": "EmailValidator", "declarator": "emailValidator", "var_name": "emailValidator"}, {"original_string": "private static EnumMap<AttributeType, EnumSet<AttributeType>> DATA_TYPE_ALLOWED_TRANSITIONS;", "modifier": "private static", "type": "EnumMap<AttributeType, EnumSet<AttributeType>>", "declarator": "DATA_TYPE_ALLOWED_TRANSITIONS", "var_name": "DATA_TYPE_ALLOWED_TRANSITIONS"}], "methods": [{"identifier": "AttributeValidator", "parameters": "(DataService dataService, EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " AttributeValidator(DataService dataService, EntityManager entityManager)", "full_signature": "public  AttributeValidator(DataService dataService, EntityManager entityManager)", "class_method_signature": "AttributeValidator.AttributeValidator(DataService dataService, EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(Attribute attr, ValidationMode validationMode)", "modifiers": "public", "return": "void", "signature": "void validate(Attribute attr, ValidationMode validationMode)", "full_signature": "public void validate(Attribute attr, ValidationMode validationMode)", "class_method_signature": "AttributeValidator.validate(Attribute attr, ValidationMode validationMode)", "testcase": false, "constructor": false}, {"identifier": "validateExpression", "parameters": "(Attribute attr)", "modifiers": "private", "return": "void", "signature": "void validateExpression(Attribute attr)", "full_signature": "private void validateExpression(Attribute attr)", "class_method_signature": "AttributeValidator.validateExpression(Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "isValidatable", "parameters": "(Attribute attr)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidatable(Attribute attr)", "full_signature": "private static boolean isValidatable(Attribute attr)", "class_method_signature": "AttributeValidator.isValidatable(Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "validateParent", "parameters": "(Attribute attr)", "modifiers": "private static", "return": "void", "signature": "void validateParent(Attribute attr)", "full_signature": "private static void validateParent(Attribute attr)", "class_method_signature": "AttributeValidator.validateParent(Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "validateChildren", "parameters": "(Attribute attr)", "modifiers": "private static", "return": "void", "signature": "void validateChildren(Attribute attr)", "full_signature": "private static void validateChildren(Attribute attr)", "class_method_signature": "AttributeValidator.validateChildren(Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "validateAdd", "parameters": "(Attribute newAttr)", "modifiers": "private static", "return": "void", "signature": "void validateAdd(Attribute newAttr)", "full_signature": "private static void validateAdd(Attribute newAttr)", "class_method_signature": "AttributeValidator.validateAdd(Attribute newAttr)", "testcase": false, "constructor": false}, {"identifier": "validateUpdate", "parameters": "(Attribute newAttr, Attribute currentAttr)", "modifiers": "private static", "return": "void", "signature": "void validateUpdate(Attribute newAttr, Attribute currentAttr)", "full_signature": "private static void validateUpdate(Attribute newAttr, Attribute currentAttr)", "class_method_signature": "AttributeValidator.validateUpdate(Attribute newAttr, Attribute currentAttr)", "testcase": false, "constructor": false}, {"identifier": "validateDefaultValue", "parameters": "(Attribute attr, boolean validateEntityReferences)", "modifiers": "", "return": "void", "signature": "void validateDefaultValue(Attribute attr, boolean validateEntityReferences)", "full_signature": " void validateDefaultValue(Attribute attr, boolean validateEntityReferences)", "class_method_signature": "AttributeValidator.validateDefaultValue(Attribute attr, boolean validateEntityReferences)", "testcase": false, "constructor": false}, {"identifier": "checkEmail", "parameters": "(String value)", "modifiers": "private", "return": "void", "signature": "void checkEmail(String value)", "full_signature": "private void checkEmail(String value)", "class_method_signature": "AttributeValidator.checkEmail(String value)", "testcase": false, "constructor": false}, {"identifier": "checkEnum", "parameters": "(Attribute attr, String value)", "modifiers": "private static", "return": "void", "signature": "void checkEnum(Attribute attr, String value)", "full_signature": "private static void checkEnum(Attribute attr, String value)", "class_method_signature": "AttributeValidator.checkEnum(Attribute attr, String value)", "testcase": false, "constructor": false}, {"identifier": "checkHyperlink", "parameters": "(String value)", "modifiers": "private static", "return": "void", "signature": "void checkHyperlink(String value)", "full_signature": "private static void checkHyperlink(String value)", "class_method_signature": "AttributeValidator.checkHyperlink(String value)", "testcase": false, "constructor": false}, {"identifier": "validateName", "parameters": "(Attribute attr)", "modifiers": "private static", "return": "void", "signature": "void validateName(Attribute attr)", "full_signature": "private static void validateName(Attribute attr)", "class_method_signature": "AttributeValidator.validateName(Attribute attr)", "testcase": false, "constructor": false}, {"identifier": "validateMappedBy", "parameters": "(Attribute attr, Attribute mappedByAttr)", "modifiers": "private static", "return": "void", "signature": "void validateMappedBy(Attribute attr, Attribute mappedByAttr)", "full_signature": "private static void validateMappedBy(Attribute attr, Attribute mappedByAttr)", "class_method_signature": "AttributeValidator.validateMappedBy(Attribute attr, Attribute mappedByAttr)", "testcase": false, "constructor": false}, {"identifier": "validateOrderBy", "parameters": "(Attribute attr, Sort orderBy)", "modifiers": "private static", "return": "void", "signature": "void validateOrderBy(Attribute attr, Sort orderBy)", "full_signature": "private static void validateOrderBy(Attribute attr, Sort orderBy)", "class_method_signature": "AttributeValidator.validateOrderBy(Attribute attr, Sort orderBy)", "testcase": false, "constructor": false}, {"identifier": "validateUpdateDataType", "parameters": "(\n      AttributeType currentDataType, AttributeType newDataType)", "modifiers": "private static", "return": "void", "signature": "void validateUpdateDataType(\n      AttributeType currentDataType, AttributeType newDataType)", "full_signature": "private static void validateUpdateDataType(\n      AttributeType currentDataType, AttributeType newDataType)", "class_method_signature": "AttributeValidator.validateUpdateDataType(\n      AttributeType currentDataType, AttributeType newDataType)", "testcase": false, "constructor": false}, {"identifier": "validateUpdateIdAttribute", "parameters": "(Attribute newAttr, Attribute currentAttr)", "modifiers": "private static", "return": "void", "signature": "void validateUpdateIdAttribute(Attribute newAttr, Attribute currentAttr)", "full_signature": "private static void validateUpdateIdAttribute(Attribute newAttr, Attribute currentAttr)", "class_method_signature": "AttributeValidator.validateUpdateIdAttribute(Attribute newAttr, Attribute currentAttr)", "testcase": false, "constructor": false}], "file": "molgenis-data-validation/src/main/java/org/molgenis/data/validation/meta/AttributeValidator.java"}, "focal_method": {"identifier": "validateDefaultValue", "parameters": "(Attribute attr, boolean validateEntityReferences)", "modifiers": "", "return": "void", "body": "void validateDefaultValue(Attribute attr, boolean validateEntityReferences) {\n    String value = attr.getDefaultValue();\n    if (value != null) {\n      if (attr.isUnique()) {\n        throw new MolgenisDataException(\n            \"Unique attribute \" + attr.getName() + \" cannot have default value\");\n      }\n\n      if (attr.getExpression() != null) {\n        throw new MolgenisDataException(\n            \"Computed attribute \" + attr.getName() + \" cannot have default value\");\n      }\n\n      AttributeType fieldType = attr.getDataType();\n      if (fieldType.getMaxLength() != null && value.length() > fieldType.getMaxLength()) {\n        throw new MolgenisDataException(\n            \"Default value for attribute [\"\n                + attr.getName()\n                + \"] exceeds the maximum length for datatype \"\n                + attr.getDataType().name());\n      }\n\n      if (fieldType == AttributeType.EMAIL) {\n        checkEmail(value);\n      }\n\n      if (fieldType == AttributeType.HYPERLINK) {\n        checkHyperlink(value);\n      }\n\n      if (fieldType == AttributeType.ENUM) {\n        checkEnum(attr, value);\n      }\n\n      // Get typed value to check if the value is of the right type.\n      Object typedValue;\n      try {\n        typedValue = EntityUtils.getTypedValue(value, attr, entityManager);\n      } catch (NumberFormatException e) {\n        throw new MolgenisValidationException(\n            new ConstraintViolation(\n                format(\n                    \"Invalid default value [%s] for data type [%s]\", value, attr.getDataType())));\n      }\n\n      if (validateEntityReferences) {\n        if (isSingleReferenceType(attr)) {\n          Entity refEntity = (Entity) typedValue;\n          EntityType refEntityType = attr.getRefEntity();\n          if (dataService\n                  .getMeta()\n                  .getRepository(refEntityType)\n                  .orElseThrow(() -> new UnknownRepositoryException(refEntityType.getId()))\n                  .query()\n                  .eq(refEntityType.getIdAttribute().getName(), refEntity.getIdValue())\n                  .count()\n              == 0) {\n            throw new MolgenisValidationException(\n                new ConstraintViolation(\n                    format(\"Default value [%s] refers to an unknown entity\", value)));\n          }\n        } else if (isMultipleReferenceType(attr)) {\n          @SuppressWarnings(\"unchecked\")\n          Iterable<Entity> refEntitiesValue = (Iterable<Entity>) typedValue;\n          EntityType refEntityType = attr.getRefEntity();\n          if (dataService\n                  .query(refEntityType.getId())\n                  .in(\n                      refEntityType.getIdAttribute().getName(),\n                      stream(refEntitiesValue).map(Entity::getIdValue).collect(toList()))\n                  .count()\n              < Iterables.size(refEntitiesValue)) {\n            throw new MolgenisValidationException(\n                new ConstraintViolation(\n                    format(\"Default value [%s] refers to one or more unknown entities\", value)));\n          }\n        }\n      }\n    }\n  }", "signature": "void validateDefaultValue(Attribute attr, boolean validateEntityReferences)", "full_signature": " void validateDefaultValue(Attribute attr, boolean validateEntityReferences)", "class_method_signature": "AttributeValidator.validateDefaultValue(Attribute attr, boolean validateEntityReferences)", "testcase": false, "constructor": false, "invocations": ["getDefaultValue", "isUnique", "getName", "getExpression", "getName", "getDataType", "getMaxLength", "length", "getMaxLength", "getName", "name", "getDataType", "checkEmail", "checkHyperlink", "checkEnum", "getTypedValue", "format", "getDataType", "isSingleReferenceType", "getRefEntity", "count", "eq", "query", "orElseThrow", "getRepository", "getMeta", "getId", "getName", "getIdAttribute", "getIdValue", "format", "isMultipleReferenceType", "getRefEntity", "count", "in", "query", "getId", "getName", "getIdAttribute", "collect", "map", "stream", "toList", "size", "format"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}