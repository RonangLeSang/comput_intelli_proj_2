{"test_class": {"identifier": "XlsxWriterTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock private Workbook workbook;", "modifier": "@Mock private", "type": "Workbook", "declarator": "workbook", "var_name": "workbook"}, {"original_string": "@Mock private Sheet sheet;", "modifier": "@Mock private", "type": "Sheet", "declarator": "sheet", "var_name": "sheet"}, {"original_string": "private XlsxWriter xlsxWriter;", "modifier": "private", "type": "XlsxWriter", "declarator": "xlsxWriter", "var_name": "xlsxWriter"}], "file": "molgenis-data-excel/src/test/java/org/molgenis/data/excel/xlsx/XlsxWriterTest.java"}, "test_case": {"identifier": "testHasSheetFalse", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testHasSheetFalse() {\n    when(workbook.getSheet(\"test\")).thenReturn(null);\n    assertFalse(xlsxWriter.hasSheet(\"test\"));\n  }", "signature": "void testHasSheetFalse()", "full_signature": "@Test void testHasSheetFalse()", "class_method_signature": "XlsxWriterTest.testHasSheetFalse()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSheet", "assertFalse", "hasSheet"]}, "focal_class": {"identifier": "XlsxWriter", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final int MAXIMUM_SHEET_LENGTH = 31;", "modifier": "private static final", "type": "int", "declarator": "MAXIMUM_SHEET_LENGTH = 31", "var_name": "MAXIMUM_SHEET_LENGTH"}, {"original_string": "private final Path target;", "modifier": "private final", "type": "Path", "declarator": "target", "var_name": "target"}, {"original_string": "private final Workbook workbook;", "modifier": "private final", "type": "Workbook", "declarator": "workbook", "var_name": "workbook"}], "methods": [{"identifier": "XlsxWriter", "parameters": "(Path target, Workbook workbook)", "modifiers": "", "return": "", "signature": " XlsxWriter(Path target, Workbook workbook)", "full_signature": "  XlsxWriter(Path target, Workbook workbook)", "class_method_signature": "XlsxWriter.XlsxWriter(Path target, Workbook workbook)", "testcase": false, "constructor": true}, {"identifier": "hasSheet", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSheet(String name)", "full_signature": "public boolean hasSheet(String name)", "class_method_signature": "XlsxWriter.hasSheet(String name)", "testcase": false, "constructor": false}, {"identifier": "createSheet", "parameters": "(String name, List<Object> headers)", "modifiers": "public", "return": "void", "signature": "void createSheet(String name, List<Object> headers)", "full_signature": "public void createSheet(String name, List<Object> headers)", "class_method_signature": "XlsxWriter.createSheet(String name, List<Object> headers)", "testcase": false, "constructor": false}, {"identifier": "writeRows", "parameters": "(Stream<List<Object>> rows, String sheetName)", "modifiers": "public", "return": "void", "signature": "void writeRows(Stream<List<Object>> rows, String sheetName)", "full_signature": "public void writeRows(Stream<List<Object>> rows, String sheetName)", "class_method_signature": "XlsxWriter.writeRows(Stream<List<Object>> rows, String sheetName)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "XlsxWriter.close()", "testcase": false, "constructor": false}, {"identifier": "writeRow", "parameters": "(List<Object> values, Sheet sheet, int rowNr)", "modifiers": "private", "return": "void", "signature": "void writeRow(List<Object> values, Sheet sheet, int rowNr)", "full_signature": "private void writeRow(List<Object> values, Sheet sheet, int rowNr)", "class_method_signature": "XlsxWriter.writeRow(List<Object> values, Sheet sheet, int rowNr)", "testcase": false, "constructor": false}, {"identifier": "setCellValue", "parameters": "(Cell cell, Object value)", "modifiers": "@SuppressWarnings(\"java:S2259\")", "return": "void", "signature": "void setCellValue(Cell cell, Object value)", "full_signature": "@SuppressWarnings(\"java:S2259\") void setCellValue(Cell cell, Object value)", "class_method_signature": "XlsxWriter.setCellValue(Cell cell, Object value)", "testcase": false, "constructor": false}], "file": "molgenis-data-excel/src/main/java/org/molgenis/data/excel/xlsx/XlsxWriter.java"}, "focal_method": {"identifier": "hasSheet", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "body": "public boolean hasSheet(String name) {\n    try {\n      return workbook.getSheet(name) != null;\n    } catch (RuntimeException e) {\n      throw new XlsxWriterException(e);\n    }\n  }", "signature": "boolean hasSheet(String name)", "full_signature": "public boolean hasSheet(String name)", "class_method_signature": "XlsxWriter.hasSheet(String name)", "testcase": false, "constructor": false, "invocations": ["getSheet"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}