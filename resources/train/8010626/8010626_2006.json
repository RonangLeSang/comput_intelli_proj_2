{"test_class": {"identifier": "NegotiatorControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NegotiatorController negotiatorController;", "modifier": "private", "type": "NegotiatorController", "declarator": "negotiatorController", "var_name": "negotiatorController"}, {"original_string": "@Mock private RestTemplate restTemplate;", "modifier": "@Mock private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Mock private UserPermissionEvaluator permissionService;", "modifier": "@Mock private", "type": "UserPermissionEvaluator", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Mock private DataService dataService;", "modifier": "@Mock private", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "@Mock private QueryRsqlConverter rsqlQueryConverter;", "modifier": "@Mock private", "type": "QueryRsqlConverter", "declarator": "rsqlQueryConverter", "var_name": "rsqlQueryConverter"}, {"original_string": "@Mock private Repository<Entity> repo;", "modifier": "@Mock private", "type": "Repository<Entity>", "declarator": "repo", "var_name": "repo"}, {"original_string": "@Mock private Repository<Entity> biobankRepo;", "modifier": "@Mock private", "type": "Repository<Entity>", "declarator": "biobankRepo", "var_name": "biobankRepo"}, {"original_string": "@Mock private NegotiatorEntityConfig negotiatorEntityConfig;", "modifier": "@Mock private", "type": "NegotiatorEntityConfig", "declarator": "negotiatorEntityConfig", "var_name": "negotiatorEntityConfig"}, {"original_string": "@Mock private NegotiatorConfig negotiatorConfig;", "modifier": "@Mock private", "type": "NegotiatorConfig", "declarator": "negotiatorConfig", "var_name": "negotiatorConfig"}, {"original_string": "@Mock private QueryRsql queryRsql;", "modifier": "@Mock private", "type": "QueryRsql", "declarator": "queryRsql", "var_name": "queryRsql"}, {"original_string": "@Mock private QueryRsql biobankRsql;", "modifier": "@Mock private", "type": "QueryRsql", "declarator": "biobankRsql", "var_name": "biobankRsql"}, {"original_string": "@Mock private Attribute collectionAttr;", "modifier": "@Mock private", "type": "Attribute", "declarator": "collectionAttr", "var_name": "collectionAttr"}, {"original_string": "@Mock private Attribute biobackAttr;", "modifier": "@Mock private", "type": "Attribute", "declarator": "biobackAttr", "var_name": "biobackAttr"}, {"original_string": "@Mock private Query<Entity> molgenisQuery;", "modifier": "@Mock private", "type": "Query<Entity>", "declarator": "molgenisQuery", "var_name": "molgenisQuery"}, {"original_string": "@Mock private Query<Entity> biobankQuery;", "modifier": "@Mock private", "type": "Query<Entity>", "declarator": "biobankQuery", "var_name": "biobankQuery"}, {"original_string": "@Mock private JsMagmaScriptEvaluator jsMagmaScriptEvaluator;", "modifier": "@Mock private", "type": "JsMagmaScriptEvaluator", "declarator": "jsMagmaScriptEvaluator", "var_name": "jsMagmaScriptEvaluator"}, {"original_string": "@Mock private Entity biobank;", "modifier": "@Mock private", "type": "Entity", "declarator": "biobank", "var_name": "biobank"}, {"original_string": "@Mock private Entity biobank2;", "modifier": "@Mock private", "type": "Entity", "declarator": "biobank2", "var_name": "biobank2"}, {"original_string": "@Mock private Entity collection1;", "modifier": "@Mock private", "type": "Entity", "declarator": "collection1", "var_name": "collection1"}, {"original_string": "@Mock private Entity collection2;", "modifier": "@Mock private", "type": "Entity", "declarator": "collection2", "var_name": "collection2"}, {"original_string": "@Captor private ArgumentCaptor<HttpEntity<NegotiatorQuery>> queryCaptor;", "modifier": "@Captor private", "type": "ArgumentCaptor<HttpEntity<NegotiatorQuery>>", "declarator": "queryCaptor", "var_name": "queryCaptor"}], "file": "molgenis-dataexplorer/src/test/java/org/molgenis/dataexplorer/negotiator/NegotiatorControllerTest.java"}, "test_case": {"identifier": "testExportToNegotiatorMissingNegotiatorURL", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testExportToNegotiatorMissingNegotiatorURL() {\n    NegotiatorRequest request =\n        NegotiatorRequest.create(\n            \"http://molgenis.org\",\n            \"molgenis_id_1\",\n            \"*=q=MOLGENIS\",\n            \"a nice molgenis query\",\n            \"Sjfg03Msmdp92Md82103FNskas9H735F\");\n\n    when(negotiatorConfig.getUsername()).thenReturn(\"username\");\n    when(negotiatorConfig.getPassword()).thenReturn(\"password\");\n\n    when(restTemplate.postForLocation(eq(\"http://directory.com\"), queryCaptor.capture()))\n        .thenReturn(URI.create(\"http://directory.com/request/1280\"));\n\n    Exception exception =\n        assertThrows(\n            IllegalStateException.class, () -> negotiatorController.exportToNegotiator(request));\n    assertThat(exception.getMessage()).containsPattern(\"Negotiator config URL can't be null\");\n  }", "signature": "void testExportToNegotiatorMissingNegotiatorURL()", "full_signature": "@Test void testExportToNegotiatorMissingNegotiatorURL()", "class_method_signature": "NegotiatorControllerTest.testExportToNegotiatorMissingNegotiatorURL()", "testcase": true, "constructor": false, "invocations": ["create", "thenReturn", "when", "getUsername", "thenReturn", "when", "getPassword", "thenReturn", "when", "postForLocation", "eq", "capture", "create", "assertThrows", "exportToNegotiator", "containsPattern", "assertThat", "getMessage"]}, "focal_class": {"identifier": "NegotiatorController", "superclass": "extends PluginController", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NegotiatorController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NegotiatorController.class)", "var_name": "LOG"}, {"original_string": "public static final String ID = \"directory\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"directory\"", "var_name": "ID"}, {"original_string": "static final String URI = PluginController.PLUGIN_URI_PREFIX + ID;", "modifier": "static final", "type": "String", "declarator": "URI = PluginController.PLUGIN_URI_PREFIX + ID", "var_name": "URI"}, {"original_string": "private final RestTemplate restTemplate;", "modifier": "private final", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private final UserPermissionEvaluator permissions;", "modifier": "private final", "type": "UserPermissionEvaluator", "declarator": "permissions", "var_name": "permissions"}, {"original_string": "private final DataService dataService;", "modifier": "private final", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private final QueryRsqlConverter rsqlQueryConverter;", "modifier": "private final", "type": "QueryRsqlConverter", "declarator": "rsqlQueryConverter", "var_name": "rsqlQueryConverter"}, {"original_string": "private final JsMagmaScriptEvaluator jsMagmaScriptEvaluator;", "modifier": "private final", "type": "JsMagmaScriptEvaluator", "declarator": "jsMagmaScriptEvaluator", "var_name": "jsMagmaScriptEvaluator"}, {"original_string": "private final MessageSource messageSource;", "modifier": "private final", "type": "MessageSource", "declarator": "messageSource", "var_name": "messageSource"}], "methods": [{"identifier": "NegotiatorController", "parameters": "(\n      RestTemplate restTemplate,\n      UserPermissionEvaluator permissions,\n      DataService dataService,\n      QueryRsqlConverter rsqlQueryConverter,\n      JsMagmaScriptEvaluator jsMagmaScriptEvaluator,\n      MessageSource messageSource)", "modifiers": "public", "return": "", "signature": " NegotiatorController(\n      RestTemplate restTemplate,\n      UserPermissionEvaluator permissions,\n      DataService dataService,\n      QueryRsqlConverter rsqlQueryConverter,\n      JsMagmaScriptEvaluator jsMagmaScriptEvaluator,\n      MessageSource messageSource)", "full_signature": "public  NegotiatorController(\n      RestTemplate restTemplate,\n      UserPermissionEvaluator permissions,\n      DataService dataService,\n      QueryRsqlConverter rsqlQueryConverter,\n      JsMagmaScriptEvaluator jsMagmaScriptEvaluator,\n      MessageSource messageSource)", "class_method_signature": "NegotiatorController.NegotiatorController(\n      RestTemplate restTemplate,\n      UserPermissionEvaluator permissions,\n      DataService dataService,\n      QueryRsqlConverter rsqlQueryConverter,\n      JsMagmaScriptEvaluator jsMagmaScriptEvaluator,\n      MessageSource messageSource)", "testcase": false, "constructor": true}, {"identifier": "showDirectoryButton", "parameters": "(String entityTypeId)", "modifiers": "@RunAsSystem public", "return": "boolean", "signature": "boolean showDirectoryButton(String entityTypeId)", "full_signature": "@RunAsSystem public boolean showDirectoryButton(String entityTypeId)", "class_method_signature": "NegotiatorController.showDirectoryButton(String entityTypeId)", "testcase": false, "constructor": false}, {"identifier": "validateNegotiatorExport", "parameters": "(@RequestBody NegotiatorRequest request)", "modifiers": "@PostMapping(\"/validate\") @ResponseBody public", "return": "ExportValidationResponse", "signature": "ExportValidationResponse validateNegotiatorExport(@RequestBody NegotiatorRequest request)", "full_signature": "@PostMapping(\"/validate\") @ResponseBody public ExportValidationResponse validateNegotiatorExport(@RequestBody NegotiatorRequest request)", "class_method_signature": "NegotiatorController.validateNegotiatorExport(@RequestBody NegotiatorRequest request)", "testcase": false, "constructor": false}, {"identifier": "exportToNegotiator", "parameters": "(@RequestBody NegotiatorRequest request)", "modifiers": "@PostMapping(\"/export\") @ResponseBody public", "return": "String", "signature": "String exportToNegotiator(@RequestBody NegotiatorRequest request)", "full_signature": "@PostMapping(\"/export\") @ResponseBody public String exportToNegotiator(@RequestBody NegotiatorRequest request)", "class_method_signature": "NegotiatorController.exportToNegotiator(@RequestBody NegotiatorRequest request)", "testcase": false, "constructor": false}, {"identifier": "getEntityCollection", "parameters": "(NegotiatorEntityConfig entityConfig, Entity entity)", "modifiers": "private", "return": "Collection", "signature": "Collection getEntityCollection(NegotiatorEntityConfig entityConfig, Entity entity)", "full_signature": "private Collection getEntityCollection(NegotiatorEntityConfig entityConfig, Entity entity)", "class_method_signature": "NegotiatorController.getEntityCollection(NegotiatorEntityConfig entityConfig, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Attribute attribute, Entity entity)", "modifiers": "private", "return": "String", "signature": "String getStringValue(Attribute attribute, Entity entity)", "full_signature": "private String getStringValue(Attribute attribute, Entity entity)", "class_method_signature": "NegotiatorController.getStringValue(Attribute attribute, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "postQueryToNegotiator", "parameters": "(\n      NegotiatorConfig config, HttpEntity<NegotiatorQuery> queryHttpEntity)", "modifiers": "private", "return": "String", "signature": "String postQueryToNegotiator(\n      NegotiatorConfig config, HttpEntity<NegotiatorQuery> queryHttpEntity)", "full_signature": "private String postQueryToNegotiator(\n      NegotiatorConfig config, HttpEntity<NegotiatorQuery> queryHttpEntity)", "class_method_signature": "NegotiatorController.postQueryToNegotiator(\n      NegotiatorConfig config, HttpEntity<NegotiatorQuery> queryHttpEntity)", "testcase": false, "constructor": false}, {"identifier": "getBiobankEntities", "parameters": "(NegotiatorRequest request)", "modifiers": "private", "return": "List<Entity>", "signature": "List<Entity> getBiobankEntities(NegotiatorRequest request)", "full_signature": "private List<Entity> getBiobankEntities(NegotiatorRequest request)", "class_method_signature": "NegotiatorController.getBiobankEntities(NegotiatorRequest request)", "testcase": false, "constructor": false}, {"identifier": "getCollectionEntities", "parameters": "(NegotiatorRequest request)", "modifiers": "private", "return": "List<Entity>", "signature": "List<Entity> getCollectionEntities(NegotiatorRequest request)", "full_signature": "private List<Entity> getCollectionEntities(NegotiatorRequest request)", "class_method_signature": "NegotiatorController.getCollectionEntities(NegotiatorRequest request)", "testcase": false, "constructor": false}, {"identifier": "getDisabledCollections", "parameters": "(\n      List<Entity> entities, NegotiatorEntityConfig config)", "modifiers": "private", "return": "List<Entity>", "signature": "List<Entity> getDisabledCollections(\n      List<Entity> entities, NegotiatorEntityConfig config)", "full_signature": "private List<Entity> getDisabledCollections(\n      List<Entity> entities, NegotiatorEntityConfig config)", "class_method_signature": "NegotiatorController.getDisabledCollections(\n      List<Entity> entities, NegotiatorEntityConfig config)", "testcase": false, "constructor": false}, {"identifier": "evaluateExpressionOnEntity", "parameters": "(String expression, Entity entity)", "modifiers": "@SuppressWarnings(\"java:S1125\") // boolean literal isn't redundant here private", "return": "boolean", "signature": "boolean evaluateExpressionOnEntity(String expression, Entity entity)", "full_signature": "@SuppressWarnings(\"java:S1125\") // boolean literal isn't redundant here private boolean evaluateExpressionOnEntity(String expression, Entity entity)", "class_method_signature": "NegotiatorController.evaluateExpressionOnEntity(String expression, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getNegotiatorQueryHttpEntity", "parameters": "(\n      NegotiatorRequest request, NegotiatorConfig config, List<Collection> collections)", "modifiers": "private", "return": "HttpEntity<NegotiatorQuery>", "signature": "HttpEntity<NegotiatorQuery> getNegotiatorQueryHttpEntity(\n      NegotiatorRequest request, NegotiatorConfig config, List<Collection> collections)", "full_signature": "private HttpEntity<NegotiatorQuery> getNegotiatorQueryHttpEntity(\n      NegotiatorRequest request, NegotiatorConfig config, List<Collection> collections)", "class_method_signature": "NegotiatorController.getNegotiatorQueryHttpEntity(\n      NegotiatorRequest request, NegotiatorConfig config, List<Collection> collections)", "testcase": false, "constructor": false}, {"identifier": "getNegotiatorEntityConfig", "parameters": "(String entityId)", "modifiers": "private", "return": "Optional<NegotiatorEntityConfig>", "signature": "Optional<NegotiatorEntityConfig> getNegotiatorEntityConfig(String entityId)", "full_signature": "private Optional<NegotiatorEntityConfig> getNegotiatorEntityConfig(String entityId)", "class_method_signature": "NegotiatorController.getNegotiatorEntityConfig(String entityId)", "testcase": false, "constructor": false}, {"identifier": "generateBase64Authentication", "parameters": "(String username, String password)", "modifiers": "private static", "return": "String", "signature": "String generateBase64Authentication(String username, String password)", "full_signature": "private static String generateBase64Authentication(String username, String password)", "class_method_signature": "NegotiatorController.generateBase64Authentication(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "handleRuntimeException", "parameters": "(RuntimeException e)", "modifiers": "@ExceptionHandler(RuntimeException.class) @ResponseBody @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public", "return": "ErrorMessageResponse", "signature": "ErrorMessageResponse handleRuntimeException(RuntimeException e)", "full_signature": "@ExceptionHandler(RuntimeException.class) @ResponseBody @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public ErrorMessageResponse handleRuntimeException(RuntimeException e)", "class_method_signature": "NegotiatorController.handleRuntimeException(RuntimeException e)", "testcase": false, "constructor": false}], "file": "molgenis-dataexplorer/src/main/java/org/molgenis/dataexplorer/negotiator/NegotiatorController.java"}, "focal_method": {"identifier": "exportToNegotiator", "parameters": "(@RequestBody NegotiatorRequest request)", "modifiers": "@PostMapping(\"/export\") @ResponseBody public", "return": "String", "body": "@PostMapping(\"/export\")\n  @ResponseBody\n  public String exportToNegotiator(@RequestBody NegotiatorRequest request) {\n    LOG.info(\"Sending Negotiator request\");\n\n    NegotiatorEntityConfig entityConfig =\n        getNegotiatorEntityConfig(request.getEntityId())\n            .orElseThrow(\n                () ->\n                    new IllegalArgumentException(\"Negotiator entity config entity id is illegal\"));\n\n    NegotiatorConfig config = entityConfig.getNegotiatorConfig();\n    String expression = config.getString(ENABLED_EXPRESSION);\n\n    List<Collection> collectionEntities =\n        getCollectionEntities(request).stream()\n            .filter(entity -> expression == null || evaluateExpressionOnEntity(expression, entity))\n            .map(entity -> getEntityCollection(entityConfig, entity))\n            .collect(toList());\n\n    // Filter biobanks if needed\n    if (request.getBiobankRsql() != null) {\n      requireNonNull(request.getBiobankId(), \"Must provide biobankId if biobankRsql is provided\");\n      List<Object> biobankIds =\n          getBiobankEntities(request).stream()\n              .map(Entity::getIdValue)\n              .map(Object::toString)\n              .collect(toList());\n      collectionEntities =\n          collectionEntities.stream()\n              .filter(it -> biobankIds.contains(it.getBiobankId()))\n              .collect(toList());\n    } else {\n      requireNonNull(\n          request.getRsql(), \"Must provide at least one filter, either rsql or biobankRsql\");\n    }\n\n    HttpEntity<NegotiatorQuery> queryHttpEntity =\n        getNegotiatorQueryHttpEntity(request, config, collectionEntities);\n\n    return postQueryToNegotiator(config, queryHttpEntity);\n  }", "signature": "String exportToNegotiator(@RequestBody NegotiatorRequest request)", "full_signature": "@PostMapping(\"/export\") @ResponseBody public String exportToNegotiator(@RequestBody NegotiatorRequest request)", "class_method_signature": "NegotiatorController.exportToNegotiator(@RequestBody NegotiatorRequest request)", "testcase": false, "constructor": false, "invocations": ["info", "orElseThrow", "getNegotiatorEntityConfig", "getEntityId", "getNegotiatorConfig", "getString", "collect", "map", "filter", "stream", "getCollectionEntities", "evaluateExpressionOnEntity", "getEntityCollection", "toList", "getBiobankRsql", "requireNonNull", "getBiobankId", "collect", "map", "map", "stream", "getBiobankEntities", "toList", "collect", "filter", "stream", "contains", "getBiobankId", "toList", "requireNonNull", "getRsql", "getNegotiatorQueryHttpEntity", "postQueryToNegotiator"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}