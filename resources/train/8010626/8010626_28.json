{"test_class": {"identifier": "ProblemExceptionResponseGeneratorTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock private ContextMessageSource contextMessageSource;", "modifier": "@Mock private", "type": "ContextMessageSource", "declarator": "contextMessageSource", "var_name": "contextMessageSource"}, {"original_string": "private ProblemExceptionResponseGenerator problemExceptionResponseGenerator;", "modifier": "private", "type": "ProblemExceptionResponseGenerator", "declarator": "problemExceptionResponseGenerator", "var_name": "problemExceptionResponseGenerator"}], "file": "molgenis-web/src/test/java/org/molgenis/web/exception/ProblemExceptionResponseGeneratorTest.java"}, "test_case": {"identifier": "testCreateExceptionResponseErrorCoded", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testCreateExceptionResponseErrorCoded() {\n    CodedRuntimeException exception = mock(CodedRuntimeException.class);\n    when(exception.getErrorCode()).thenReturn(\"A1\");\n    when(exception.getLocalizedMessage()).thenReturn(\"message always exposed\");\n    HttpStatus httpStatus = HttpStatus.BAD_REQUEST;\n\n    Problem problem =\n        Problem.builder()\n            .setType(URI.create(\"http://localhost/problem\"))\n            .setTitle(\"Bad Request\")\n            .setStatus(400)\n            .setDetail(\"message always exposed\")\n            .setErrorCode(\"A1\")\n            .build();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.setContentType(MediaType.APPLICATION_PROBLEM_JSON);\n    ResponseEntity<Problem> responseEntity = new ResponseEntity<>(problem, httpHeaders, httpStatus);\n    assertEquals(\n        responseEntity,\n        problemExceptionResponseGenerator.createExceptionResponse(exception, httpStatus, false));\n  }", "signature": "void testCreateExceptionResponseErrorCoded()", "full_signature": "@Test void testCreateExceptionResponseErrorCoded()", "class_method_signature": "ProblemExceptionResponseGeneratorTest.testCreateExceptionResponseErrorCoded()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getErrorCode", "thenReturn", "when", "getLocalizedMessage", "build", "setErrorCode", "setDetail", "setStatus", "setTitle", "setType", "builder", "create", "setContentType", "assertEquals", "createExceptionResponse"]}, "focal_class": {"identifier": "ProblemExceptionResponseGenerator", "superclass": "", "interfaces": "implements ExceptionResponseGenerator<ResponseEntity<Problem>>", "fields": [{"original_string": "private final ContextMessageSource contextMessageSource;", "modifier": "private final", "type": "ContextMessageSource", "declarator": "contextMessageSource", "var_name": "contextMessageSource"}], "methods": [{"identifier": "ProblemExceptionResponseGenerator", "parameters": "(ContextMessageSource contextMessageSource)", "modifiers": "", "return": "", "signature": " ProblemExceptionResponseGenerator(ContextMessageSource contextMessageSource)", "full_signature": "  ProblemExceptionResponseGenerator(ContextMessageSource contextMessageSource)", "class_method_signature": "ProblemExceptionResponseGenerator.ProblemExceptionResponseGenerator(ContextMessageSource contextMessageSource)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "ExceptionResponseType", "signature": "ExceptionResponseType getType()", "full_signature": "@Override public ExceptionResponseType getType()", "class_method_signature": "ProblemExceptionResponseGenerator.getType()", "testcase": false, "constructor": false}, {"identifier": "createExceptionResponse", "parameters": "(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "modifiers": "@Override public", "return": "ResponseEntity<Problem>", "signature": "ResponseEntity<Problem> createExceptionResponse(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "full_signature": "@Override public ResponseEntity<Problem> createExceptionResponse(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "class_method_signature": "ProblemExceptionResponseGenerator.createExceptionResponse(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "testcase": false, "constructor": false}, {"identifier": "createProblemErrors", "parameters": "(Errors errors)", "modifiers": "private", "return": "List<Problem.Error>", "signature": "List<Problem.Error> createProblemErrors(Errors errors)", "full_signature": "private List<Problem.Error> createProblemErrors(Errors errors)", "class_method_signature": "ProblemExceptionResponseGenerator.createProblemErrors(Errors errors)", "testcase": false, "constructor": false}, {"identifier": "createProblemError", "parameters": "(FieldError fieldError)", "modifiers": "private", "return": "Problem.Error", "signature": "Problem.Error createProblemError(FieldError fieldError)", "full_signature": "private Problem.Error createProblemError(FieldError fieldError)", "class_method_signature": "ProblemExceptionResponseGenerator.createProblemError(FieldError fieldError)", "testcase": false, "constructor": false}, {"identifier": "createProblemError", "parameters": "(ObjectError objectError)", "modifiers": "private", "return": "Problem.Error", "signature": "Problem.Error createProblemError(ObjectError objectError)", "full_signature": "private Problem.Error createProblemError(ObjectError objectError)", "class_method_signature": "ProblemExceptionResponseGenerator.createProblemError(ObjectError objectError)", "testcase": false, "constructor": false}, {"identifier": "buildProblemError", "parameters": "(ObjectError objectError, Error.Builder builder)", "modifiers": "private", "return": "void", "signature": "void buildProblemError(ObjectError objectError, Error.Builder builder)", "full_signature": "private void buildProblemError(ObjectError objectError, Error.Builder builder)", "class_method_signature": "ProblemExceptionResponseGenerator.buildProblemError(ObjectError objectError, Error.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "buildProblemErrorThrowable", "parameters": "(ObjectError objectError, Error.Builder builder)", "modifiers": "private", "return": "void", "signature": "void buildProblemErrorThrowable(ObjectError objectError, Error.Builder builder)", "full_signature": "private void buildProblemErrorThrowable(ObjectError objectError, Error.Builder builder)", "class_method_signature": "ProblemExceptionResponseGenerator.buildProblemErrorThrowable(ObjectError objectError, Error.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "buildProblemErrorConstraintViolation", "parameters": "(\n      ObjectError objectError, Error.Builder builder)", "modifiers": "private", "return": "void", "signature": "void buildProblemErrorConstraintViolation(\n      ObjectError objectError, Error.Builder builder)", "full_signature": "private void buildProblemErrorConstraintViolation(\n      ObjectError objectError, Error.Builder builder)", "class_method_signature": "ProblemExceptionResponseGenerator.buildProblemErrorConstraintViolation(\n      ObjectError objectError, Error.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "getProblemType", "parameters": "(Throwable throwable)", "modifiers": "private static", "return": "URI", "signature": "URI getProblemType(Throwable throwable)", "full_signature": "private static URI getProblemType(Throwable throwable)", "class_method_signature": "ProblemExceptionResponseGenerator.getProblemType(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getStackTrace", "parameters": "(Exception exception)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getStackTrace(Exception exception)", "full_signature": "private static List<String> getStackTrace(Exception exception)", "class_method_signature": "ProblemExceptionResponseGenerator.getStackTrace(Exception exception)", "testcase": false, "constructor": false}], "file": "molgenis-web/src/main/java/org/molgenis/web/exception/ProblemExceptionResponseGenerator.java"}, "focal_method": {"identifier": "createExceptionResponse", "parameters": "(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "modifiers": "@Override public", "return": "ResponseEntity<Problem>", "body": "@Override\n  public ResponseEntity<Problem> createExceptionResponse(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment) {\n\n    Builder builder =\n        Problem.builder()\n            .setType(getProblemType(exception))\n            .setStatus(httpStatus.value())\n            .setTitle(httpStatus.getReasonPhrase());\n\n    ExceptionUtils.getErrorCode(exception)\n        .ifPresent(\n            errorCode ->\n                builder.setErrorCode(errorCode).setDetail(exception.getLocalizedMessage()));\n\n    ExceptionUtils.getErrors(exception)\n        .ifPresent(errors -> builder.setErrors(createProblemErrors(errors)));\n\n    if (isDevEnvironment) {\n      // only expose exception messages for exceptions without error code in dev environment\n      builder.setDetail(exception.getLocalizedMessage()).setStackTrace(getStackTrace(exception));\n    }\n\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.setContentType(MediaType.APPLICATION_PROBLEM_JSON);\n    return new ResponseEntity<>(builder.build(), httpHeaders, httpStatus);\n  }", "signature": "ResponseEntity<Problem> createExceptionResponse(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "full_signature": "@Override public ResponseEntity<Problem> createExceptionResponse(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "class_method_signature": "ProblemExceptionResponseGenerator.createExceptionResponse(\n      Exception exception, HttpStatus httpStatus, boolean isDevEnvironment)", "testcase": false, "constructor": false, "invocations": ["setTitle", "setStatus", "setType", "builder", "getProblemType", "value", "getReasonPhrase", "ifPresent", "getErrorCode", "setDetail", "setErrorCode", "getLocalizedMessage", "ifPresent", "getErrors", "setErrors", "createProblemErrors", "setStackTrace", "setDetail", "getLocalizedMessage", "getStackTrace", "setContentType", "build"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}