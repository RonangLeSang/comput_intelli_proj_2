{"test_class": {"identifier": "FilesControllerTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock private FilesService filesApiService;", "modifier": "@Mock private", "type": "FilesService", "declarator": "filesApiService", "var_name": "filesApiService"}, {"original_string": "@Mock private UserPermissionEvaluator userPermissionEvaluator;", "modifier": "@Mock private", "type": "UserPermissionEvaluator", "declarator": "userPermissionEvaluator", "var_name": "userPermissionEvaluator"}, {"original_string": "private FilesController filesApiController;", "modifier": "private", "type": "FilesController", "declarator": "filesApiController", "var_name": "filesApiController"}], "file": "molgenis-api-files/src/test/java/org/molgenis/api/files/v1/FilesControllerTest.java"}, "test_case": {"identifier": "testReadFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testReadFile() {\n    when(userPermissionEvaluator.hasPermission(new EntityTypeIdentity(FILE_META), READ_DATA))\n        .thenReturn(true);\n\n    FileMeta fileMeta = mock(FileMeta.class);\n    String fileId = \"MyId\";\n    String filename = \"MyFilename\";\n    String contentType = \"MyContentType\";\n    Long size = 123L;\n    when(fileMeta.getId()).thenReturn(fileId);\n    when(fileMeta.getFilename()).thenReturn(filename);\n    when(fileMeta.getContentType()).thenReturn(contentType);\n    when(fileMeta.getSize()).thenReturn(size);\n\n    when(filesApiService.getFileMeta(fileId)).thenReturn(fileMeta);\n    FileResponse fileResponse = filesApiController.readFile(fileId);\n    FileResponse expectedFileResponse =\n        FileResponse.builder()\n            .setId(fileId)\n            .setFilename(filename)\n            .setContentType(contentType)\n            .setSize(size)\n            .build();\n    assertEquals(expectedFileResponse, fileResponse);\n  }", "signature": "void testReadFile()", "full_signature": "@Test void testReadFile()", "class_method_signature": "FilesControllerTest.testReadFile()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "hasPermission", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getFilename", "thenReturn", "when", "getContentType", "thenReturn", "when", "getSize", "thenReturn", "when", "getFileMeta", "readFile", "build", "setSize", "setContentType", "setFilename", "setId", "builder", "assertEquals"]}, "focal_class": {"identifier": "FilesController", "superclass": "extends ApiController", "interfaces": "", "fields": [{"original_string": "private final FilesService filesService;", "modifier": "private final", "type": "FilesService", "declarator": "filesService", "var_name": "filesService"}, {"original_string": "private final UserPermissionEvaluator userPermissionEvaluator;", "modifier": "private final", "type": "UserPermissionEvaluator", "declarator": "userPermissionEvaluator", "var_name": "userPermissionEvaluator"}], "methods": [{"identifier": "FilesController", "parameters": "(FilesService filesService, UserPermissionEvaluator userPermissionEvaluator)", "modifiers": "", "return": "", "signature": " FilesController(FilesService filesService, UserPermissionEvaluator userPermissionEvaluator)", "full_signature": "  FilesController(FilesService filesService, UserPermissionEvaluator userPermissionEvaluator)", "class_method_signature": "FilesController.FilesController(FilesService filesService, UserPermissionEvaluator userPermissionEvaluator)", "testcase": false, "constructor": true}, {"identifier": "createFile", "parameters": "(\n      HttpServletRequest httpServletRequest)", "modifiers": "@ApiOperation(\"Upload file (see documentation)\") @PostMapping @ResponseStatus(CREATED) public", "return": "CompletableFuture<ResponseEntity<FileResponse>>", "signature": "CompletableFuture<ResponseEntity<FileResponse>> createFile(\n      HttpServletRequest httpServletRequest)", "full_signature": "@ApiOperation(\"Upload file (see documentation)\") @PostMapping @ResponseStatus(CREATED) public CompletableFuture<ResponseEntity<FileResponse>> createFile(\n      HttpServletRequest httpServletRequest)", "class_method_signature": "FilesController.createFile(\n      HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "createFileFromForm", "parameters": "(\n      HttpServletRequest httpServletRequest)", "modifiers": "@PostMapping(consumes = {\"application/x-www-form-urlencoded\", \"multipart/form-data\"}) @ResponseStatus(BAD_REQUEST) public", "return": "CompletableFuture<ResponseEntity<FileResponse>>", "signature": "CompletableFuture<ResponseEntity<FileResponse>> createFileFromForm(\n      HttpServletRequest httpServletRequest)", "full_signature": "@PostMapping(consumes = {\"application/x-www-form-urlencoded\", \"multipart/form-data\"}) @ResponseStatus(BAD_REQUEST) public CompletableFuture<ResponseEntity<FileResponse>> createFileFromForm(\n      HttpServletRequest httpServletRequest)", "class_method_signature": "FilesController.createFileFromForm(\n      HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(@PathVariable(\"fileId\") String fileId)", "modifiers": "@ApiOperation(\"Retrieve file metadata (see documentation)\") @GetMapping(value = \"/{fileId}\") public", "return": "FileResponse", "signature": "FileResponse readFile(@PathVariable(\"fileId\") String fileId)", "full_signature": "@ApiOperation(\"Retrieve file metadata (see documentation)\") @GetMapping(value = \"/{fileId}\") public FileResponse readFile(@PathVariable(\"fileId\") String fileId)", "class_method_signature": "FilesController.readFile(@PathVariable(\"fileId\") String fileId)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(@PathVariable(\"fileId\") String fileId)", "modifiers": "@ApiOperation(\"Download file (see documentation)\") @GetMapping(value = \"/{fileId}\", params = \"alt=media\") public", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> downloadFile(@PathVariable(\"fileId\") String fileId)", "full_signature": "@ApiOperation(\"Download file (see documentation)\") @GetMapping(value = \"/{fileId}\", params = \"alt=media\") public ResponseEntity<StreamingResponseBody> downloadFile(@PathVariable(\"fileId\") String fileId)", "class_method_signature": "FilesController.downloadFile(@PathVariable(\"fileId\") String fileId)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(@PathVariable(\"fileId\") String fileId)", "modifiers": "@ApiOperation(\"Delete file (see documentation)\") @DeleteMapping(value = \"/{fileId}\") @ResponseStatus(NO_CONTENT) public", "return": "void", "signature": "void deleteFile(@PathVariable(\"fileId\") String fileId)", "full_signature": "@ApiOperation(\"Delete file (see documentation)\") @DeleteMapping(value = \"/{fileId}\") @ResponseStatus(NO_CONTENT) public void deleteFile(@PathVariable(\"fileId\") String fileId)", "class_method_signature": "FilesController.deleteFile(@PathVariable(\"fileId\") String fileId)", "testcase": false, "constructor": false}, {"identifier": "toFileResponseEntity", "parameters": "(\n      FileMeta fileMeta, HttpServletRequest httpServletRequest)", "modifiers": "private", "return": "ResponseEntity<FileResponse>", "signature": "ResponseEntity<FileResponse> toFileResponseEntity(\n      FileMeta fileMeta, HttpServletRequest httpServletRequest)", "full_signature": "private ResponseEntity<FileResponse> toFileResponseEntity(\n      FileMeta fileMeta, HttpServletRequest httpServletRequest)", "class_method_signature": "FilesController.toFileResponseEntity(\n      FileMeta fileMeta, HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "toFileResponse", "parameters": "(FileMeta fileMeta)", "modifiers": "private", "return": "FileResponse", "signature": "FileResponse toFileResponse(FileMeta fileMeta)", "full_signature": "private FileResponse toFileResponse(FileMeta fileMeta)", "class_method_signature": "FilesController.toFileResponse(FileMeta fileMeta)", "testcase": false, "constructor": false}, {"identifier": "validateCreatePermission", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateCreatePermission()", "full_signature": "private void validateCreatePermission()", "class_method_signature": "FilesController.validateCreatePermission()", "testcase": false, "constructor": false}, {"identifier": "validateReadPermission", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateReadPermission()", "full_signature": "private void validateReadPermission()", "class_method_signature": "FilesController.validateReadPermission()", "testcase": false, "constructor": false}, {"identifier": "validateDeletePermission", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateDeletePermission()", "full_signature": "private void validateDeletePermission()", "class_method_signature": "FilesController.validateDeletePermission()", "testcase": false, "constructor": false}, {"identifier": "validatePermission", "parameters": "(EntityTypePermission entityTypePermission)", "modifiers": "private", "return": "void", "signature": "void validatePermission(EntityTypePermission entityTypePermission)", "full_signature": "private void validatePermission(EntityTypePermission entityTypePermission)", "class_method_signature": "FilesController.validatePermission(EntityTypePermission entityTypePermission)", "testcase": false, "constructor": false}], "file": "molgenis-api-files/src/main/java/org/molgenis/api/files/v1/FilesController.java"}, "focal_method": {"identifier": "readFile", "parameters": "(@PathVariable(\"fileId\") String fileId)", "modifiers": "@ApiOperation(\"Retrieve file metadata (see documentation)\") @GetMapping(value = \"/{fileId}\") public", "return": "FileResponse", "body": "@ApiOperation(\"Retrieve file metadata (see documentation)\")\n  @GetMapping(value = \"/{fileId}\")\n  public FileResponse readFile(@PathVariable(\"fileId\") String fileId) {\n    validateReadPermission();\n\n    FileMeta fileMeta = filesService.getFileMeta(fileId);\n    return toFileResponse(fileMeta);\n  }", "signature": "FileResponse readFile(@PathVariable(\"fileId\") String fileId)", "full_signature": "@ApiOperation(\"Retrieve file metadata (see documentation)\") @GetMapping(value = \"/{fileId}\") public FileResponse readFile(@PathVariable(\"fileId\") String fileId)", "class_method_signature": "FilesController.readFile(@PathVariable(\"fileId\") String fileId)", "testcase": false, "constructor": false, "invocations": ["validateReadPermission", "getFileMeta", "toFileResponse"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}