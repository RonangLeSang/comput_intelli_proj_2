{"test_class": {"identifier": "SemanticSearchServiceHelperTest", "superclass": "extends AbstractMolgenisSpringTest", "interfaces": "", "fields": [{"original_string": "@Autowired private AttributeFactory attrMetaFactory;", "modifier": "@Autowired private", "type": "AttributeFactory", "declarator": "attrMetaFactory", "var_name": "attrMetaFactory"}, {"original_string": "@Autowired private EntityTypeFactory entityTypeFactory;", "modifier": "@Autowired private", "type": "EntityTypeFactory", "declarator": "entityTypeFactory", "var_name": "entityTypeFactory"}, {"original_string": "@Autowired private OntologyService ontologyService;", "modifier": "@Autowired private", "type": "OntologyService", "declarator": "ontologyService", "var_name": "ontologyService"}, {"original_string": "@Autowired private SemanticSearchServiceHelper semanticSearchServiceHelper;", "modifier": "@Autowired private", "type": "SemanticSearchServiceHelper", "declarator": "semanticSearchServiceHelper", "var_name": "semanticSearchServiceHelper"}, {"original_string": "@Autowired private DataService dataService;", "modifier": "@Autowired private", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}], "file": "molgenis-semantic-search/src/test/java/org/molgenis/semanticsearch/service/impl/SemanticSearchServiceHelperTest.java"}, "test_case": {"identifier": "testCreateDisMaxQueryRule", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testCreateDisMaxQueryRule() {\n    List<String> createdTargetAttributeQueries =\n        asList(\n            \"Height\",\n            \"Standing height in cm\",\n            \"body_length\",\n            \"Sitting height\",\n            \"sitting_length\",\n            \"Height\",\n            \"sature\");\n    QueryRule actualRule =\n        semanticSearchServiceHelper.createDisMaxQueryRuleForTerms(createdTargetAttributeQueries);\n    String expectedQueryRuleToString =\n        \"DIS_MAX ('label' FUZZY_MATCH 'Height', 'description' FUZZY_MATCH 'Height', 'label' FUZZY_MATCH 'Standing height in cm', 'description' FUZZY_MATCH 'Standing height in cm', 'label' FUZZY_MATCH 'body_length', 'description' FUZZY_MATCH 'body_length', 'label' FUZZY_MATCH 'Sitting height', 'description' FUZZY_MATCH 'Sitting height', 'label' FUZZY_MATCH 'sitting_length', 'description' FUZZY_MATCH 'sitting_length', 'label' FUZZY_MATCH 'Height', 'description' FUZZY_MATCH 'Height', 'label' FUZZY_MATCH 'sature', 'description' FUZZY_MATCH 'sature')\";\n    assertEquals(DIS_MAX, actualRule.getOperator());\n    assertEquals(expectedQueryRuleToString, actualRule.toString());\n\n    List<String> createdTargetAttributeQueries2 = singletonList(\"(Height) [stand^~]\");\n    QueryRule actualRule2 =\n        semanticSearchServiceHelper.createDisMaxQueryRuleForTerms(createdTargetAttributeQueries2);\n    String expectedQueryRuleToString2 =\n        \"DIS_MAX ('label' FUZZY_MATCH '\\\\(Height\\\\) \\\\[stand^\\\\~\\\\]', 'description' FUZZY_MATCH '\\\\(Height\\\\) \\\\[stand^\\\\~\\\\]')\";\n    assertEquals(DIS_MAX, actualRule2.getOperator());\n    assertEquals(expectedQueryRuleToString2, actualRule2.toString());\n  }", "signature": "void testCreateDisMaxQueryRule()", "full_signature": "@Test void testCreateDisMaxQueryRule()", "class_method_signature": "SemanticSearchServiceHelperTest.testCreateDisMaxQueryRule()", "testcase": true, "constructor": false, "invocations": ["asList", "createDisMaxQueryRuleForTerms", "assertEquals", "getOperator", "assertEquals", "toString", "singletonList", "createDisMaxQueryRuleForTerms", "assertEquals", "getOperator", "assertEquals", "toString"]}, "focal_class": {"identifier": "SemanticSearchServiceHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TermFrequencyService termFrequencyService;", "modifier": "private final", "type": "TermFrequencyService", "declarator": "termFrequencyService", "var_name": "termFrequencyService"}, {"original_string": "private final DataService dataService;", "modifier": "private final", "type": "DataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private final OntologyService ontologyService;", "modifier": "private final", "type": "OntologyService", "declarator": "ontologyService", "var_name": "ontologyService"}, {"original_string": "public static final int MAX_NUM_TAGS = 3;", "modifier": "public static final", "type": "int", "declarator": "MAX_NUM_TAGS = 3", "var_name": "MAX_NUM_TAGS"}, {"original_string": "private static final char SPACE_CHAR = ' ';", "modifier": "private static final", "type": "char", "declarator": "SPACE_CHAR = ' '", "var_name": "SPACE_CHAR"}, {"original_string": "private static final String COMMA_CHAR = \",\";", "modifier": "private static final", "type": "String", "declarator": "COMMA_CHAR = \",\"", "var_name": "COMMA_CHAR"}, {"original_string": "private static final String CARET_CHARACTER = \"^\";", "modifier": "private static final", "type": "String", "declarator": "CARET_CHARACTER = \"^\"", "var_name": "CARET_CHARACTER"}, {"original_string": "private static final String ESCAPED_CARET_CHARACTER = \"\\\\^\";", "modifier": "private static final", "type": "String", "declarator": "ESCAPED_CARET_CHARACTER = \"\\\\^\"", "var_name": "ESCAPED_CARET_CHARACTER"}, {"original_string": "private static final String ILLEGAL_CHARS_REGEX = \"[^\\\\p{L}'a-zA-Z0-9\\\\.~]+\";", "modifier": "private static final", "type": "String", "declarator": "ILLEGAL_CHARS_REGEX = \"[^\\\\p{L}'a-zA-Z0-9\\\\.~]+\"", "var_name": "ILLEGAL_CHARS_REGEX"}], "methods": [{"identifier": "SemanticSearchServiceHelper", "parameters": "(\n      DataService dataService,\n      OntologyService ontologyService,\n      TermFrequencyService termFrequencyService)", "modifiers": "public", "return": "", "signature": " SemanticSearchServiceHelper(\n      DataService dataService,\n      OntologyService ontologyService,\n      TermFrequencyService termFrequencyService)", "full_signature": "public  SemanticSearchServiceHelper(\n      DataService dataService,\n      OntologyService ontologyService,\n      TermFrequencyService termFrequencyService)", "class_method_signature": "SemanticSearchServiceHelper.SemanticSearchServiceHelper(\n      DataService dataService,\n      OntologyService ontologyService,\n      TermFrequencyService termFrequencyService)", "testcase": false, "constructor": true}, {"identifier": "createDisMaxQueryRuleForAttribute", "parameters": "(\n      Set<String> searchTerms, Collection<OntologyTerm> ontologyTerms)", "modifiers": "public", "return": "QueryRule", "signature": "QueryRule createDisMaxQueryRuleForAttribute(\n      Set<String> searchTerms, Collection<OntologyTerm> ontologyTerms)", "full_signature": "public QueryRule createDisMaxQueryRuleForAttribute(\n      Set<String> searchTerms, Collection<OntologyTerm> ontologyTerms)", "class_method_signature": "SemanticSearchServiceHelper.createDisMaxQueryRuleForAttribute(\n      Set<String> searchTerms, Collection<OntologyTerm> ontologyTerms)", "testcase": false, "constructor": false}, {"identifier": "createDisMaxQueryRuleForTerms", "parameters": "(List<String> queryTerms)", "modifiers": "public", "return": "QueryRule", "signature": "QueryRule createDisMaxQueryRuleForTerms(List<String> queryTerms)", "full_signature": "public QueryRule createDisMaxQueryRuleForTerms(List<String> queryTerms)", "class_method_signature": "SemanticSearchServiceHelper.createDisMaxQueryRuleForTerms(List<String> queryTerms)", "testcase": false, "constructor": false}, {"identifier": "createBoostedDisMaxQueryRuleForTerms", "parameters": "(\n      List<String> queryTerms, Double boostValue)", "modifiers": "public", "return": "QueryRule", "signature": "QueryRule createBoostedDisMaxQueryRuleForTerms(\n      List<String> queryTerms, Double boostValue)", "full_signature": "public QueryRule createBoostedDisMaxQueryRuleForTerms(\n      List<String> queryTerms, Double boostValue)", "class_method_signature": "SemanticSearchServiceHelper.createBoostedDisMaxQueryRuleForTerms(\n      List<String> queryTerms, Double boostValue)", "testcase": false, "constructor": false}, {"identifier": "createShouldQueryRule", "parameters": "(String multiOntologyTermIri)", "modifiers": "public", "return": "QueryRule", "signature": "QueryRule createShouldQueryRule(String multiOntologyTermIri)", "full_signature": "public QueryRule createShouldQueryRule(String multiOntologyTermIri)", "class_method_signature": "SemanticSearchServiceHelper.createShouldQueryRule(String multiOntologyTermIri)", "testcase": false, "constructor": false}, {"identifier": "parseOntologyTermQueries", "parameters": "(OntologyTerm ontologyTerm)", "modifiers": "public", "return": "List<String>", "signature": "List<String> parseOntologyTermQueries(OntologyTerm ontologyTerm)", "full_signature": "public List<String> parseOntologyTermQueries(OntologyTerm ontologyTerm)", "class_method_signature": "SemanticSearchServiceHelper.parseOntologyTermQueries(OntologyTerm ontologyTerm)", "testcase": false, "constructor": false}, {"identifier": "getOtLabelAndSynonyms", "parameters": "(OntologyTerm ontologyTerm)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getOtLabelAndSynonyms(OntologyTerm ontologyTerm)", "full_signature": "public Set<String> getOtLabelAndSynonyms(OntologyTerm ontologyTerm)", "class_method_signature": "SemanticSearchServiceHelper.getOtLabelAndSynonyms(OntologyTerm ontologyTerm)", "testcase": false, "constructor": false}, {"identifier": "collectExpandedQueryMap", "parameters": "(\n      Set<String> queryTerms, Collection<OntologyTerm> ontologyTerms)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> collectExpandedQueryMap(\n      Set<String> queryTerms, Collection<OntologyTerm> ontologyTerms)", "full_signature": "public Map<String, String> collectExpandedQueryMap(\n      Set<String> queryTerms, Collection<OntologyTerm> ontologyTerms)", "class_method_signature": "SemanticSearchServiceHelper.collectExpandedQueryMap(\n      Set<String> queryTerms, Collection<OntologyTerm> ontologyTerms)", "testcase": false, "constructor": false}, {"identifier": "collectOntologyTermQueryMap", "parameters": "(\n      Map<String, String> expanedQueryMap, OntologyTerm ontologyTerm)", "modifiers": "public", "return": "void", "signature": "void collectOntologyTermQueryMap(\n      Map<String, String> expanedQueryMap, OntologyTerm ontologyTerm)", "full_signature": "public void collectOntologyTermQueryMap(\n      Map<String, String> expanedQueryMap, OntologyTerm ontologyTerm)", "class_method_signature": "SemanticSearchServiceHelper.collectOntologyTermQueryMap(\n      Map<String, String> expanedQueryMap, OntologyTerm ontologyTerm)", "testcase": false, "constructor": false}, {"identifier": "getAttributeIdentifiers", "parameters": "(EntityType sourceEntityType)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAttributeIdentifiers(EntityType sourceEntityType)", "full_signature": "public List<String> getAttributeIdentifiers(EntityType sourceEntityType)", "class_method_signature": "SemanticSearchServiceHelper.getAttributeIdentifiers(EntityType sourceEntityType)", "testcase": false, "constructor": false}, {"identifier": "recursivelyCollectAttributeIdentifiers", "parameters": "(\n      Iterable<Entity> attributeEntities, List<String> attributeIdentifiers)", "modifiers": "private", "return": "void", "signature": "void recursivelyCollectAttributeIdentifiers(\n      Iterable<Entity> attributeEntities, List<String> attributeIdentifiers)", "full_signature": "private void recursivelyCollectAttributeIdentifiers(\n      Iterable<Entity> attributeEntities, List<String> attributeIdentifiers)", "class_method_signature": "SemanticSearchServiceHelper.recursivelyCollectAttributeIdentifiers(\n      Iterable<Entity> attributeEntities, List<String> attributeIdentifiers)", "testcase": false, "constructor": false}, {"identifier": "findTags", "parameters": "(String description, List<String> ontologyIds)", "modifiers": "public", "return": "List<OntologyTerm>", "signature": "List<OntologyTerm> findTags(String description, List<String> ontologyIds)", "full_signature": "public List<OntologyTerm> findTags(String description, List<String> ontologyIds)", "class_method_signature": "SemanticSearchServiceHelper.findTags(String description, List<String> ontologyIds)", "testcase": false, "constructor": false}, {"identifier": "processQueryString", "parameters": "(String queryString)", "modifiers": "public", "return": "String", "signature": "String processQueryString(String queryString)", "full_signature": "public String processQueryString(String queryString)", "class_method_signature": "SemanticSearchServiceHelper.processQueryString(String queryString)", "testcase": false, "constructor": false}, {"identifier": "parseBoostQueryString", "parameters": "(String queryString, double boost)", "modifiers": "public", "return": "String", "signature": "String parseBoostQueryString(String queryString, double boost)", "full_signature": "public String parseBoostQueryString(String queryString, double boost)", "class_method_signature": "SemanticSearchServiceHelper.parseBoostQueryString(String queryString, double boost)", "testcase": false, "constructor": false}, {"identifier": "escapeCharsExcludingCaretChar", "parameters": "(String string)", "modifiers": "public", "return": "String", "signature": "String escapeCharsExcludingCaretChar(String string)", "full_signature": "public String escapeCharsExcludingCaretChar(String string)", "class_method_signature": "SemanticSearchServiceHelper.escapeCharsExcludingCaretChar(String string)", "testcase": false, "constructor": false}, {"identifier": "removeStopWords", "parameters": "(String description)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> removeStopWords(String description)", "full_signature": "public Set<String> removeStopWords(String description)", "class_method_signature": "SemanticSearchServiceHelper.removeStopWords(String description)", "testcase": false, "constructor": false}, {"identifier": "getBestInverseDocumentFrequency", "parameters": "(List<String> terms)", "modifiers": "private", "return": "Double", "signature": "Double getBestInverseDocumentFrequency(List<String> terms)", "full_signature": "private Double getBestInverseDocumentFrequency(List<String> terms)", "class_method_signature": "SemanticSearchServiceHelper.getBestInverseDocumentFrequency(List<String> terms)", "testcase": false, "constructor": false}], "file": "molgenis-semantic-search/src/main/java/org/molgenis/semanticsearch/service/impl/SemanticSearchServiceHelper.java"}, "focal_method": {"identifier": "createDisMaxQueryRuleForTerms", "parameters": "(List<String> queryTerms)", "modifiers": "public", "return": "QueryRule", "body": "public QueryRule createDisMaxQueryRuleForTerms(List<String> queryTerms) {\n    List<QueryRule> rules = new ArrayList<>();\n    queryTerms.stream()\n        .filter(StringUtils::isNotEmpty)\n        .map(this::escapeCharsExcludingCaretChar)\n        .forEach(\n            query -> {\n              rules.add(new QueryRule(AttributeMetadata.LABEL, Operator.FUZZY_MATCH, query));\n              rules.add(new QueryRule(AttributeMetadata.DESCRIPTION, Operator.FUZZY_MATCH, query));\n            });\n    QueryRule finalDisMaxQuery = new QueryRule(rules);\n    finalDisMaxQuery.setOperator(Operator.DIS_MAX);\n    return finalDisMaxQuery;\n  }", "signature": "QueryRule createDisMaxQueryRuleForTerms(List<String> queryTerms)", "full_signature": "public QueryRule createDisMaxQueryRuleForTerms(List<String> queryTerms)", "class_method_signature": "SemanticSearchServiceHelper.createDisMaxQueryRuleForTerms(List<String> queryTerms)", "testcase": false, "constructor": false, "invocations": ["forEach", "map", "filter", "stream", "add", "add", "setOperator"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}