{"test_class": {"identifier": "MolgenisAccessDecisionVoterTest", "superclass": "extends AbstractMockitoTest", "interfaces": "", "fields": [{"original_string": "@Mock MenuReaderService menuReaderService;", "modifier": "@Mock", "type": "MenuReaderService", "declarator": "menuReaderService", "var_name": "menuReaderService"}, {"original_string": "@Mock UserPermissionEvaluator userPermissionEvaluator;", "modifier": "@Mock", "type": "UserPermissionEvaluator", "declarator": "userPermissionEvaluator", "var_name": "userPermissionEvaluator"}, {"original_string": "@Mock Menu menu;", "modifier": "@Mock", "type": "Menu", "declarator": "menu", "var_name": "menu"}, {"original_string": "private MolgenisAccessDecisionVoter voter;", "modifier": "private", "type": "MolgenisAccessDecisionVoter", "declarator": "voter", "var_name": "voter"}], "file": "molgenis-core-ui/src/test/java/org/molgenis/core/ui/security/MolgenisAccessDecisionVoterTest.java"}, "test_case": {"identifier": "vote_menuDenied", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void vote_menuDenied() {\n    FilterInvocation filterInvocation =\n        when(mock(FilterInvocation.class).getRequestUrl()).thenReturn(\"/menu/menudenied\").getMock();\n    assertEquals(ACCESS_DENIED, voter.vote(null, filterInvocation, null));\n  }", "signature": "void vote_menuDenied()", "full_signature": "@Test void vote_menuDenied()", "class_method_signature": "MolgenisAccessDecisionVoterTest.vote_menuDenied()", "testcase": true, "constructor": false, "invocations": ["getMock", "thenReturn", "when", "getRequestUrl", "mock", "assertEquals", "vote"]}, "focal_class": {"identifier": "MolgenisAccessDecisionVoter", "superclass": "", "interfaces": "implements AccessDecisionVoter<FilterInvocation>", "fields": [{"original_string": "private static final Pattern PATTERN_MENUID = Pattern.compile(\"/menu/([^/]+).*\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_MENUID = Pattern.compile(\"/menu/([^/]+).*\")", "var_name": "PATTERN_MENUID"}, {"original_string": "private static final Pattern PATTERN_PLUGINID =\n      Pattern.compile(\"(?:/plugin|/menu/[^/]+)/([^/^?]+).*\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_PLUGINID =\n      Pattern.compile(\"(?:/plugin|/menu/[^/]+)/([^/^?]+).*\")", "var_name": "PATTERN_PLUGINID"}, {"original_string": "private UserPermissionEvaluator userPermissionEvaluator;", "modifier": "private", "type": "UserPermissionEvaluator", "declarator": "userPermissionEvaluator", "var_name": "userPermissionEvaluator"}, {"original_string": "private MenuReaderService menuReaderService;", "modifier": "private", "type": "MenuReaderService", "declarator": "menuReaderService", "var_name": "menuReaderService"}], "methods": [{"identifier": "supports", "parameters": "(ConfigAttribute attribute)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(ConfigAttribute attribute)", "full_signature": "@Override public boolean supports(ConfigAttribute attribute)", "class_method_signature": "MolgenisAccessDecisionVoter.supports(ConfigAttribute attribute)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(Class<?> clazz)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Class<?> clazz)", "full_signature": "@Override public boolean supports(Class<?> clazz)", "class_method_signature": "MolgenisAccessDecisionVoter.supports(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "vote", "parameters": "(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "modifiers": "@Override public", "return": "int", "signature": "int vote(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "full_signature": "@Override public int vote(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "class_method_signature": "MolgenisAccessDecisionVoter.vote(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "testcase": false, "constructor": false}, {"identifier": "setUserPermissionEvaluator", "parameters": "(UserPermissionEvaluator userPermissionEvaluator)", "modifiers": "@Autowired", "return": "void", "signature": "void setUserPermissionEvaluator(UserPermissionEvaluator userPermissionEvaluator)", "full_signature": "@Autowired void setUserPermissionEvaluator(UserPermissionEvaluator userPermissionEvaluator)", "class_method_signature": "MolgenisAccessDecisionVoter.setUserPermissionEvaluator(UserPermissionEvaluator userPermissionEvaluator)", "testcase": false, "constructor": false}, {"identifier": "setMenuReaderService", "parameters": "(MenuReaderService menuReaderService)", "modifiers": "@Autowired", "return": "void", "signature": "void setMenuReaderService(MenuReaderService menuReaderService)", "full_signature": "@Autowired void setMenuReaderService(MenuReaderService menuReaderService)", "class_method_signature": "MolgenisAccessDecisionVoter.setMenuReaderService(MenuReaderService menuReaderService)", "testcase": false, "constructor": false}], "file": "molgenis-core-ui/src/main/java/org/molgenis/core/ui/security/MolgenisAccessDecisionVoter.java"}, "focal_method": {"identifier": "vote", "parameters": "(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int vote(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes) {\n    String requestUrl = filterInvocation.getRequestUrl();\n\n    Matcher pluginMatcher = PATTERN_PLUGINID.matcher(requestUrl);\n    if (pluginMatcher.matches()) {\n      String pluginId = pluginMatcher.group(1);\n      return userPermissionEvaluator.hasPermission(new PluginIdentity(pluginId), VIEW_PLUGIN)\n          ? ACCESS_GRANTED\n          : ACCESS_DENIED;\n    }\n\n    Matcher menuMatcher = PATTERN_MENUID.matcher(requestUrl);\n    if (menuMatcher.matches()) {\n      String menuId = menuMatcher.group(1);\n      boolean found = menuReaderService.getMenu().flatMap(it -> it.getPath(menuId)).isPresent();\n      return found ? ACCESS_GRANTED : ACCESS_DENIED;\n    }\n\n    return ACCESS_DENIED;\n  }", "signature": "int vote(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "full_signature": "@Override public int vote(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "class_method_signature": "MolgenisAccessDecisionVoter.vote(\n      Authentication authentication,\n      FilterInvocation filterInvocation,\n      Collection<ConfigAttribute> attributes)", "testcase": false, "constructor": false, "invocations": ["getRequestUrl", "matcher", "matches", "group", "hasPermission", "matcher", "matches", "group", "isPresent", "flatMap", "getMenu", "getPath"]}, "repository": {"repo_id": 8010626, "url": "https://github.com/molgenis/molgenis", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 82, "size": 168771, "license": "licensed"}}