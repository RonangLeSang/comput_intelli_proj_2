{"test_class": {"identifier": "DateConverterTest", "superclass": "extends AbstractDozerTest", "interfaces": "", "fields": [{"original_string": "private DateConverter converter;", "modifier": "private", "type": "DateConverter", "declarator": "converter", "var_name": "converter"}], "file": "core/src/test/java/com/github/dozermapper/core/converters/DateConverterTest.java"}, "test_case": {"identifier": "testConvert_Format", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert_Format() {\n        GregorianCalendar calendar = new GregorianCalendar(2001, 1, 1);\n\n        Object result = converter.convert(String.class, calendar);\n\n        String stringCalendar = (String)result;\n\n        assertEquals(stringCalendar, \"01.02.2001\");\n    }", "signature": "void testConvert_Format()", "full_signature": "@Test public void testConvert_Format()", "class_method_signature": "DateConverterTest.testConvert_Format()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals"]}, "focal_class": {"identifier": "DateConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private DateFormat dateFormat;", "modifier": "private", "type": "DateFormat", "declarator": "dateFormat", "var_name": "dateFormat"}], "methods": [{"identifier": "DateConverter", "parameters": "(DateFormat dateFormat)", "modifiers": "public", "return": "", "signature": " DateConverter(DateFormat dateFormat)", "full_signature": "public  DateConverter(DateFormat dateFormat)", "class_method_signature": "DateConverter.DateConverter(DateFormat dateFormat)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Class destClass, Object srcObj)", "modifiers": "public", "return": "Object", "signature": "Object convert(Class destClass, Object srcObj)", "full_signature": "public Object convert(Class destClass, Object srcObj)", "class_method_signature": "DateConverter.convert(Class destClass, Object srcObj)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/dozermapper/core/converters/DateConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Class destClass, Object srcObj)", "modifiers": "public", "return": "Object", "body": "public Object convert(Class destClass, Object srcObj) {\n        final Class srcFieldClass = srcObj.getClass();\n\n        long time;\n        int nanos = 0;\n        if (Calendar.class.isAssignableFrom(srcFieldClass)) {\n            Calendar inVal = (Calendar)srcObj;\n            time = inVal.getTime().getTime();\n        } else if (Timestamp.class.isAssignableFrom(srcFieldClass)) {\n            Timestamp timestamp = (Timestamp)srcObj;\n            time = timestamp.getTime();\n            nanos = timestamp.getNanos();\n        } else if (java.util.Date.class.isAssignableFrom(srcFieldClass)) {\n            time = ((java.util.Date)srcObj).getTime();\n        } else if (XMLGregorianCalendar.class.isAssignableFrom(srcFieldClass)) {\n            time = ((XMLGregorianCalendar)srcObj).toGregorianCalendar().getTimeInMillis();\n        } else if (dateFormat != null && String.class.isAssignableFrom(srcObj.getClass())) {\n            try {\n                if (\"\".equals(srcObj)) {\n                    return null;\n                }\n                time = dateFormat.parse((String)srcObj).getTime();\n            } catch (ParseException e) {\n                throw new ConversionException(\"Unable to parse source object using specified date format\", e);\n            }\n            // Default conversion\n        } else {\n            try {\n                time = Long.parseLong(srcObj.toString());\n            } catch (NumberFormatException e) {\n                throw new ConversionException(\"Unable to determine time in millis of source object\", e);\n            }\n        }\n\n        try {\n            if (Calendar.class.isAssignableFrom(destClass)) {\n                Constructor constructor = destClass.getConstructor();\n                Calendar result = (Calendar)constructor.newInstance();\n                result.setTimeInMillis(time);\n                return result;\n            }\n\n            if (dateFormat != null && String.class.isAssignableFrom(destClass)) {\n                return dateFormat.format(new java.util.Date(time));\n            }\n\n            Constructor constructor = destClass.getConstructor(Long.TYPE);\n            Object result = constructor.newInstance(time);\n            if (nanos != 0 && (Timestamp.class.isAssignableFrom(destClass))) {\n                ((Timestamp)result).setNanos(nanos);\n            }\n            return result;\n        } catch (Exception e) {\n            throw new ConversionException(e);\n        }\n    }", "signature": "Object convert(Class destClass, Object srcObj)", "full_signature": "public Object convert(Class destClass, Object srcObj)", "class_method_signature": "DateConverter.convert(Class destClass, Object srcObj)", "testcase": false, "constructor": false, "invocations": ["getClass", "isAssignableFrom", "getTime", "getTime", "isAssignableFrom", "getTime", "getNanos", "isAssignableFrom", "getTime", "isAssignableFrom", "getTimeInMillis", "toGregorianCalendar", "isAssignableFrom", "getClass", "equals", "getTime", "parse", "parseLong", "toString", "isAssignableFrom", "getConstructor", "newInstance", "setTimeInMillis", "isAssignableFrom", "format", "getConstructor", "newInstance", "isAssignableFrom", "setNanos"]}, "repository": {"repo_id": 3250434, "url": "https://github.com/DozerMapper/dozer", "stars": 1630, "created": "1/23/2012 9:11:58 PM +00:00", "updates": "2020-01-23T13:20:05+00:00", "fork": "False", "license": "licensed"}}