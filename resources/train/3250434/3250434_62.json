{"test_class": {"identifier": "LocalDateTimeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LocalDateTimeConverter localTimeConverter = new LocalDateTimeConverter(DateTimeFormatter.ISO_LOCAL_TIME);", "modifier": "private", "type": "LocalDateTimeConverter", "declarator": "localTimeConverter = new LocalDateTimeConverter(DateTimeFormatter.ISO_LOCAL_TIME)", "var_name": "localTimeConverter"}, {"original_string": "private LocalDateTimeConverter localDateTimeConverter = new LocalDateTimeConverter(DateTimeFormatter.ISO_LOCAL_DATE_TIME);", "modifier": "private", "type": "LocalDateTimeConverter", "declarator": "localDateTimeConverter = new LocalDateTimeConverter(DateTimeFormatter.ISO_LOCAL_DATE_TIME)", "var_name": "localDateTimeConverter"}, {"original_string": "private LocalDateTimeConverter localDateConverter = new LocalDateTimeConverter(DateTimeFormatter.ISO_LOCAL_DATE);", "modifier": "private", "type": "LocalDateTimeConverter", "declarator": "localDateConverter = new LocalDateTimeConverter(DateTimeFormatter.ISO_LOCAL_DATE)", "var_name": "localDateConverter"}], "file": "core/src/test/java/com/github/dozermapper/core/converters/LocalDateTimeConverterTest.java"}, "test_case": {"identifier": "canConvertFromStringToLocalDateTimeViaDateTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canConvertFromStringToLocalDateTimeViaDateTime() {\n        String sourceObject = \"2017-11-02T10:20:30\";\n        LocalDateTime expectedResult = LocalDateTime.parse(\"2017-11-02T10:20:30\");\n\n        LocalDateTime result = (LocalDateTime)localDateTimeConverter.convert(LocalDateTime.class, sourceObject);\n\n        assertTrue(String.format(\"%s is not equal to %s\", result, expectedResult), expectedResult.isEqual(result));\n    }", "signature": "void canConvertFromStringToLocalDateTimeViaDateTime()", "full_signature": "@Test public void canConvertFromStringToLocalDateTimeViaDateTime()", "class_method_signature": "LocalDateTimeConverterTest.canConvertFromStringToLocalDateTimeViaDateTime()", "testcase": true, "constructor": false, "invocations": ["parse", "convert", "assertTrue", "format", "isEqual"]}, "focal_class": {"identifier": "LocalDateTimeConverter", "superclass": "extends AbstractJava8DateTimeConverter", "interfaces": "", "fields": [], "methods": [{"identifier": "LocalDateTimeConverter", "parameters": "(DateTimeFormatter formatter)", "modifiers": "public", "return": "", "signature": " LocalDateTimeConverter(DateTimeFormatter formatter)", "full_signature": "public  LocalDateTimeConverter(DateTimeFormatter formatter)", "class_method_signature": "LocalDateTimeConverter.LocalDateTimeConverter(DateTimeFormatter formatter)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Class destClass, Object srcObject)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(Class destClass, Object srcObject)", "full_signature": "@Override public Object convert(Class destClass, Object srcObject)", "class_method_signature": "LocalDateTimeConverter.convert(Class destClass, Object srcObject)", "testcase": false, "constructor": false}, {"identifier": "convertToLocalDateTime", "parameters": "(Object srcObject)", "modifiers": "private", "return": "LocalDateTime", "signature": "LocalDateTime convertToLocalDateTime(Object srcObject)", "full_signature": "private LocalDateTime convertToLocalDateTime(Object srcObject)", "class_method_signature": "LocalDateTimeConverter.convertToLocalDateTime(Object srcObject)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/dozermapper/core/converters/LocalDateTimeConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Class destClass, Object srcObject)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convert(Class destClass, Object srcObject) {\n        LocalDateTime localDateTime = convertToLocalDateTime(srcObject);\n        if (localDateTime != null) {\n            if (LocalTime.class.isAssignableFrom(destClass)) {\n                return localDateTime.toLocalTime();\n            } else if (LocalDate.class.isAssignableFrom(destClass)) {\n                return localDateTime.toLocalDate();\n            }\n            return localDateTime;\n        }\n        return super.convert(destClass, srcObject);\n    }", "signature": "Object convert(Class destClass, Object srcObject)", "full_signature": "@Override public Object convert(Class destClass, Object srcObject)", "class_method_signature": "LocalDateTimeConverter.convert(Class destClass, Object srcObject)", "testcase": false, "constructor": false, "invocations": ["convertToLocalDateTime", "isAssignableFrom", "toLocalTime", "isAssignableFrom", "toLocalDate", "convert"]}, "repository": {"repo_id": 3250434, "url": "https://github.com/DozerMapper/dozer", "stars": 1630, "created": "1/23/2012 9:11:58 PM +00:00", "updates": "2020-01-23T13:20:05+00:00", "fork": "False", "license": "licensed"}}