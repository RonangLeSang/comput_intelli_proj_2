{"test_class": {"identifier": "ELExpressionFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/github/dozermapper/core/el/ELExpressionFactoryTest.java"}, "test_case": {"identifier": "canNewInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canNewInstance() {\n        assertNotNull(ELExpressionFactory.newInstance());\n    }", "signature": "void canNewInstance()", "full_signature": "@Test public void canNewInstance()", "class_method_signature": "ELExpressionFactoryTest.canNewInstance()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "newInstance"]}, "focal_class": {"identifier": "ELExpressionFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ELExpressionFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ELExpressionFactory.class)", "var_name": "LOG"}, {"original_string": "private static Boolean isJavaxEL;", "modifier": "private static", "type": "Boolean", "declarator": "isJavaxEL", "var_name": "isJavaxEL"}], "methods": [{"identifier": "ELExpressionFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " ELExpressionFactory()", "full_signature": "private  ELExpressionFactory()", "class_method_signature": "ELExpressionFactory.ELExpressionFactory()", "testcase": false, "constructor": true}, {"identifier": "isSupported", "parameters": "()", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isSupported()", "full_signature": "public static Boolean isSupported()", "class_method_signature": "ELExpressionFactory.isSupported()", "testcase": false, "constructor": false}, {"identifier": "isSupported", "parameters": "(ClassLoader classLoader)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isSupported(ClassLoader classLoader)", "full_signature": "public static Boolean isSupported(ClassLoader classLoader)", "class_method_signature": "ELExpressionFactory.isSupported(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(ClassLoader classLoader)", "modifiers": "public static", "return": "ExpressionFactory", "signature": "ExpressionFactory newInstance(ClassLoader classLoader)", "full_signature": "public static ExpressionFactory newInstance(ClassLoader classLoader)", "class_method_signature": "ELExpressionFactory.newInstance(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "resolveClassForName", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void resolveClassForName()", "full_signature": "private static void resolveClassForName()", "class_method_signature": "ELExpressionFactory.resolveClassForName()", "testcase": false, "constructor": false}, {"identifier": "resolveViaClassLoaderOrTCCL", "parameters": "(ClassLoader classLoader)", "modifiers": "private static", "return": "ExpressionFactory", "signature": "ExpressionFactory resolveViaClassLoaderOrTCCL(ClassLoader classLoader)", "full_signature": "private static ExpressionFactory resolveViaClassLoaderOrTCCL(ClassLoader classLoader)", "class_method_signature": "ELExpressionFactory.resolveViaClassLoaderOrTCCL(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "ExpressionFactory", "signature": "ExpressionFactory newInstance()", "full_signature": "public static ExpressionFactory newInstance()", "class_method_signature": "ELExpressionFactory.newInstance()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/dozermapper/core/el/ELExpressionFactory.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(ClassLoader classLoader)", "modifiers": "public static", "return": "ExpressionFactory", "body": "public static ExpressionFactory newInstance(ClassLoader classLoader) throws IllegalStateException {\n        resolveClassForName();\n\n        return resolveViaClassLoaderOrTCCL(classLoader);\n    }", "signature": "ExpressionFactory newInstance(ClassLoader classLoader)", "full_signature": "public static ExpressionFactory newInstance(ClassLoader classLoader)", "class_method_signature": "ELExpressionFactory.newInstance(ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["resolveClassForName", "resolveViaClassLoaderOrTCCL"]}, "repository": {"repo_id": 3250434, "url": "https://github.com/DozerMapper/dozer", "stars": 1630, "created": "1/23/2012 9:11:58 PM +00:00", "updates": "2020-01-23T13:20:05+00:00", "fork": "False", "license": "licensed"}}