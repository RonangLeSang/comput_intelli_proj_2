{"test_class": {"identifier": "ReflectionUtilsTest", "superclass": "extends AbstractDozerTest", "interfaces": "", "fields": [{"original_string": "private BeanContainer beanContainer = new BeanContainer();", "modifier": "private", "type": "BeanContainer", "declarator": "beanContainer = new BeanContainer()", "var_name": "beanContainer"}], "file": "core/src/test/java/com/github/dozermapper/core/util/ReflectionUtilsTest.java"}, "test_case": {"identifier": "shouldThrowNoSuchMethodFound_Missing", "parameters": "()", "modifiers": "@Test(expected = NoSuchMethodException.class) public", "return": "void", "body": "@Test(expected = NoSuchMethodException.class)\n    public void shouldThrowNoSuchMethodFound_Missing() throws Exception {\n        ReflectionUtils.findAMethod(TestClass.class, \"noSuchMethod()\", beanContainer);\n        fail();\n    }", "signature": "void shouldThrowNoSuchMethodFound_Missing()", "full_signature": "@Test(expected = NoSuchMethodException.class) public void shouldThrowNoSuchMethodFound_Missing()", "class_method_signature": "ReflectionUtilsTest.shouldThrowNoSuchMethodFound_Missing()", "testcase": true, "constructor": false, "invocations": ["findAMethod", "fail"]}, "focal_class": {"identifier": "ReflectionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String IAE_MESSAGE = \"argument type mismatch\";", "modifier": "private static final", "type": "String", "declarator": "IAE_MESSAGE = \"argument type mismatch\"", "var_name": "IAE_MESSAGE"}], "methods": [{"identifier": "ReflectionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionUtils()", "full_signature": "private  ReflectionUtils()", "class_method_signature": "ReflectionUtils.ReflectionUtils()", "testcase": false, "constructor": true}, {"identifier": "findPropertyDescriptor", "parameters": "(Class<?> objectClass, String fieldName,\n                                                            HintContainer deepIndexHintContainer)", "modifiers": "public static", "return": "PropertyDescriptor", "signature": "PropertyDescriptor findPropertyDescriptor(Class<?> objectClass, String fieldName,\n                                                            HintContainer deepIndexHintContainer)", "full_signature": "public static PropertyDescriptor findPropertyDescriptor(Class<?> objectClass, String fieldName,\n                                                            HintContainer deepIndexHintContainer)", "class_method_signature": "ReflectionUtils.findPropertyDescriptor(Class<?> objectClass, String fieldName,\n                                                            HintContainer deepIndexHintContainer)", "testcase": false, "constructor": false}, {"identifier": "fixGenericDescriptor", "parameters": "(Class<?> clazz, PropertyDescriptor descriptor)", "modifiers": "private static", "return": "PropertyDescriptor", "signature": "PropertyDescriptor fixGenericDescriptor(Class<?> clazz, PropertyDescriptor descriptor)", "full_signature": "private static PropertyDescriptor fixGenericDescriptor(Class<?> clazz, PropertyDescriptor descriptor)", "class_method_signature": "ReflectionUtils.fixGenericDescriptor(Class<?> clazz, PropertyDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "findPreferablyNonSyntheticMethod", "parameters": "(String methodName, Class<?> clazz)", "modifiers": "private static", "return": "Method", "signature": "Method findPreferablyNonSyntheticMethod(String methodName, Class<?> clazz)", "full_signature": "private static Method findPreferablyNonSyntheticMethod(String methodName, Class<?> clazz)", "class_method_signature": "ReflectionUtils.findPreferablyNonSyntheticMethod(String methodName, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getDeepFieldHierarchy", "parameters": "(Class<?> parentClass, String field,\n                                                               HintContainer deepIndexHintContainer)", "modifiers": "public static", "return": "DeepHierarchyElement[]", "signature": "DeepHierarchyElement[] getDeepFieldHierarchy(Class<?> parentClass, String field,\n                                                               HintContainer deepIndexHintContainer)", "full_signature": "public static DeepHierarchyElement[] getDeepFieldHierarchy(Class<?> parentClass, String field,\n                                                               HintContainer deepIndexHintContainer)", "class_method_signature": "ReflectionUtils.getDeepFieldHierarchy(Class<?> parentClass, String field,\n                                                               HintContainer deepIndexHintContainer)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Object obj, String methodName)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Object obj, String methodName)", "full_signature": "public static Method getMethod(Object obj, String methodName)", "class_method_signature": "ReflectionUtils.getMethod(Object obj, String methodName)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> clazz, String methodName)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Class<?> clazz, String methodName)", "full_signature": "public static Method getMethod(Class<?> clazz, String methodName)", "class_method_signature": "ReflectionUtils.getMethod(Class<?> clazz, String methodName)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(Class<?> clazz, String methodName)", "modifiers": "private static", "return": "Method", "signature": "Method findMethod(Class<?> clazz, String methodName)", "full_signature": "private static Method findMethod(Class<?> clazz, String methodName)", "class_method_signature": "ReflectionUtils.findMethod(Class<?> clazz, String methodName)", "testcase": false, "constructor": false}, {"identifier": "findAMethod", "parameters": "(Class<?> clazz, String methodName, BeanContainer beanContainer)", "modifiers": "public static", "return": "Method", "signature": "Method findAMethod(Class<?> clazz, String methodName, BeanContainer beanContainer)", "full_signature": "public static Method findAMethod(Class<?> clazz, String methodName, BeanContainer beanContainer)", "class_method_signature": "ReflectionUtils.findAMethod(Class<?> clazz, String methodName, BeanContainer beanContainer)", "testcase": false, "constructor": false}, {"identifier": "findMethodWithParam", "parameters": "(Class<?> parentDestClass, String methodName, String params, BeanContainer beanContainer)", "modifiers": "private static", "return": "Method", "signature": "Method findMethodWithParam(Class<?> parentDestClass, String methodName, String params, BeanContainer beanContainer)", "full_signature": "private static Method findMethodWithParam(Class<?> parentDestClass, String methodName, String params, BeanContainer beanContainer)", "class_method_signature": "ReflectionUtils.findMethodWithParam(Class<?> parentDestClass, String methodName, String params, BeanContainer beanContainer)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptors", "parameters": "(Class<?> objectClass)", "modifiers": "public static", "return": "PropertyDescriptor[]", "signature": "PropertyDescriptor[] getPropertyDescriptors(Class<?> objectClass)", "full_signature": "public static PropertyDescriptor[] getPropertyDescriptors(Class<?> objectClass)", "class_method_signature": "ReflectionUtils.getPropertyDescriptors(Class<?> objectClass)", "testcase": false, "constructor": false}, {"identifier": "getInterfacePropertyDescriptors", "parameters": "(Class<?> interfaceClass)", "modifiers": "static", "return": "PropertyDescriptor[]", "signature": "PropertyDescriptor[] getInterfacePropertyDescriptors(Class<?> interfaceClass)", "full_signature": "static PropertyDescriptor[] getInterfacePropertyDescriptors(Class<?> interfaceClass)", "class_method_signature": "ReflectionUtils.getInterfacePropertyDescriptors(Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "findPropDescriptorByName", "parameters": "(List<PropertyDescriptor> propDescriptors, String name)", "modifiers": "private static", "return": "PropertyDescriptor", "signature": "PropertyDescriptor findPropDescriptorByName(List<PropertyDescriptor> propDescriptors, String name)", "full_signature": "private static PropertyDescriptor findPropDescriptorByName(List<PropertyDescriptor> propDescriptors, String name)", "class_method_signature": "ReflectionUtils.findPropDescriptorByName(List<PropertyDescriptor> propDescriptors, String name)", "testcase": false, "constructor": false}, {"identifier": "getFieldFromBean", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field getFieldFromBean(Class<?> clazz, String fieldName)", "full_signature": "public static Field getFieldFromBean(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtils.getFieldFromBean(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFieldFromBean", "parameters": "(Class<?> clazz, String fieldName, final Class<?> originalClass)", "modifiers": "private static", "return": "Field", "signature": "Field getFieldFromBean(Class<?> clazz, String fieldName, final Class<?> originalClass)", "full_signature": "private static Field getFieldFromBean(Class<?> clazz, String fieldName, final Class<?> originalClass)", "class_method_signature": "ReflectionUtils.getFieldFromBean(Class<?> clazz, String fieldName, final Class<?> originalClass)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Method method, Object obj, Object[] args)", "modifiers": "public static", "return": "Object", "signature": "Object invoke(Method method, Object obj, Object[] args)", "full_signature": "public static Object invoke(Method method, Object obj, Object[] args)", "class_method_signature": "ReflectionUtils.invoke(Method method, Object obj, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "prepareExceptionMessage", "parameters": "(Method method, Object[] args)", "modifiers": "private static", "return": "String", "signature": "String prepareExceptionMessage(Method method, Object[] args)", "full_signature": "private static String prepareExceptionMessage(Method method, Object[] args)", "class_method_signature": "ReflectionUtils.prepareExceptionMessage(Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> clazz, String name, Class<?>[] parameterTypes)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Class<?> clazz, String name, Class<?>[] parameterTypes)", "full_signature": "public static Method getMethod(Class<?> clazz, String name, Class<?>[] parameterTypes)", "class_method_signature": "ReflectionUtils.getMethod(Class<?> clazz, String name, Class<?>[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "public static T newInstance(Class<T> clazz)", "class_method_signature": "ReflectionUtils.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "determineGenericsType", "parameters": "(Class<?> parentClazz, PropertyDescriptor propDescriptor)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> determineGenericsType(Class<?> parentClazz, PropertyDescriptor propDescriptor)", "full_signature": "public static Class<?> determineGenericsType(Class<?> parentClazz, PropertyDescriptor propDescriptor)", "class_method_signature": "ReflectionUtils.determineGenericsType(Class<?> parentClazz, PropertyDescriptor propDescriptor)", "testcase": false, "constructor": false}, {"identifier": "determineGenericsType", "parameters": "(Class<?> clazz, Method method, boolean isReadMethod)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> determineGenericsType(Class<?> clazz, Method method, boolean isReadMethod)", "full_signature": "public static Class<?> determineGenericsType(Class<?> clazz, Method method, boolean isReadMethod)", "class_method_signature": "ReflectionUtils.determineGenericsType(Class<?> clazz, Method method, boolean isReadMethod)", "testcase": false, "constructor": false}, {"identifier": "determineGenericsType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> determineGenericsType(Type type)", "full_signature": "public static Class<?> determineGenericsType(Type type)", "class_method_signature": "ReflectionUtils.determineGenericsType(Type type)", "testcase": false, "constructor": false}, {"identifier": "getNonStandardSetter", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "Method", "signature": "Method getNonStandardSetter(Class<?> clazz, String fieldName)", "full_signature": "public static Method getNonStandardSetter(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectionUtils.getNonStandardSetter(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isNonVoidSetter", "parameters": "(Method method, String setterMethodName)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNonVoidSetter(Method method, String setterMethodName)", "full_signature": "private static boolean isNonVoidSetter(Method method, String setterMethodName)", "class_method_signature": "ReflectionUtils.isNonVoidSetter(Method method, String setterMethodName)", "testcase": false, "constructor": false}, {"identifier": "isAutoboxingSetter", "parameters": "(Method method, String setterMethodName, Field field)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAutoboxingSetter(Method method, String setterMethodName, Field field)", "full_signature": "private static boolean isAutoboxingSetter(Method method, String setterMethodName, Field field)", "class_method_signature": "ReflectionUtils.isAutoboxingSetter(Method method, String setterMethodName, Field field)", "testcase": false, "constructor": false}, {"identifier": "canBeAutoboxed", "parameters": "(Class<?> classA, Class<?> classB)", "modifiers": "private static", "return": "boolean", "signature": "boolean canBeAutoboxed(Class<?> classA, Class<?> classB)", "full_signature": "private static boolean canBeAutoboxed(Class<?> classA, Class<?> classB)", "class_method_signature": "ReflectionUtils.canBeAutoboxed(Class<?> classA, Class<?> classB)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/dozermapper/core/util/ReflectionUtils.java"}, "focal_method": {"identifier": "findAMethod", "parameters": "(Class<?> clazz, String methodName, BeanContainer beanContainer)", "modifiers": "public static", "return": "Method", "body": "public static Method findAMethod(Class<?> clazz, String methodName, BeanContainer beanContainer) throws NoSuchMethodException {\n        StringTokenizer tokenizer = new StringTokenizer(methodName, \"(\");\n        String m = tokenizer.nextToken();\n        Method result;\n        // If tokenizer has more elements, it mean that parameters may have been specified\n        if (tokenizer.hasMoreElements()) {\n            StringTokenizer tokens = new StringTokenizer(tokenizer.nextToken(), \")\");\n            String params = tokens.hasMoreTokens() ? tokens.nextToken() : null;\n            result = findMethodWithParam(clazz, m, params, beanContainer);\n        } else {\n            result = findMethod(clazz, methodName);\n        }\n        if (result == null) {\n            throw new NoSuchMethodException(clazz.getName() + \".\" + methodName);\n        }\n        return result;\n    }", "signature": "Method findAMethod(Class<?> clazz, String methodName, BeanContainer beanContainer)", "full_signature": "public static Method findAMethod(Class<?> clazz, String methodName, BeanContainer beanContainer)", "class_method_signature": "ReflectionUtils.findAMethod(Class<?> clazz, String methodName, BeanContainer beanContainer)", "testcase": false, "constructor": false, "invocations": ["nextToken", "hasMoreElements", "nextToken", "hasMoreTokens", "nextToken", "findMethodWithParam", "findMethod", "getName"]}, "repository": {"repo_id": 3250434, "url": "https://github.com/DozerMapper/dozer", "stars": 1630, "created": "1/23/2012 9:11:58 PM +00:00", "updates": "2020-01-23T13:20:05+00:00", "fork": "False", "license": "licensed"}}