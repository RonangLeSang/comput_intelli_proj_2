{"test_class": {"identifier": "AbstractLTSminLTLTest", "superclass": "extends AbstractLTSminTest<A, L>", "interfaces": "", "fields": [], "file": "modelchecking/ltsmin/src/test/java/net/automatalib/modelcheckers/ltsmin/ltl/AbstractLTSminLTLTest.java"}, "test_case": {"identifier": "testComputeUnfolds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComputeUnfolds() {\n        Assert.assertEquals(getModelChecker().computeUnfolds(1), 3);\n        getModelChecker().setMultiplier(2.0);\n        Assert.assertEquals(getModelChecker().computeUnfolds(2), 4);\n    }", "signature": "void testComputeUnfolds()", "full_signature": "@Test public void testComputeUnfolds()", "class_method_signature": "AbstractLTSminLTLTest.testComputeUnfolds()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeUnfolds", "getModelChecker", "setMultiplier", "getModelChecker", "assertEquals", "computeUnfolds", "getModelChecker"]}, "focal_class": {"identifier": "AbstractLTSminLTL", "superclass": "extends AbstractLTSmin<I, A, L>", "interfaces": "implements ModelCheckerLasso<I, A, String, L>", "fields": [{"original_string": "public static final LTSminVersion REQUIRED_VERSION = LTSminVersion.of(3, 0, 0);", "modifier": "public static final", "type": "LTSminVersion", "declarator": "REQUIRED_VERSION = LTSminVersion.of(3, 0, 0)", "var_name": "REQUIRED_VERSION"}, {"original_string": "private final AbstractUnfoldingModelChecker<I, A, String, L> unfolder;", "modifier": "private final", "type": "AbstractUnfoldingModelChecker<I, A, String, L>", "declarator": "unfolder", "var_name": "unfolder"}], "methods": [{"identifier": "AbstractLTSminLTL", "parameters": "(boolean keepFiles, Function<String, I> string2Input,\n                                int minimumUnfolds, double multiplier)", "modifiers": "protected", "return": "", "signature": " AbstractLTSminLTL(boolean keepFiles, Function<String, I> string2Input,\n                                int minimumUnfolds, double multiplier)", "full_signature": "protected  AbstractLTSminLTL(boolean keepFiles, Function<String, I> string2Input,\n                                int minimumUnfolds, double multiplier)", "class_method_signature": "AbstractLTSminLTL.AbstractLTSminLTL(boolean keepFiles, Function<String, I> string2Input,\n                                int minimumUnfolds, double multiplier)", "testcase": false, "constructor": true}, {"identifier": "getMinimumRequiredVersion", "parameters": "()", "modifiers": "@Override protected", "return": "LTSminVersion", "signature": "LTSminVersion getMinimumRequiredVersion()", "full_signature": "@Override protected LTSminVersion getMinimumRequiredVersion()", "class_method_signature": "AbstractLTSminLTL.getMinimumRequiredVersion()", "testcase": false, "constructor": false}, {"identifier": "getExtraCommandLineOptions", "parameters": "()", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getExtraCommandLineOptions()", "full_signature": "@Override protected List<String> getExtraCommandLineOptions()", "class_method_signature": "AbstractLTSminLTL.getExtraCommandLineOptions()", "testcase": false, "constructor": false}, {"identifier": "getMultiplier", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getMultiplier()", "full_signature": "@Override public double getMultiplier()", "class_method_signature": "AbstractLTSminLTL.getMultiplier()", "testcase": false, "constructor": false}, {"identifier": "setMultiplier", "parameters": "(double multiplier)", "modifiers": "@Override public", "return": "void", "signature": "void setMultiplier(double multiplier)", "full_signature": "@Override public void setMultiplier(double multiplier)", "class_method_signature": "AbstractLTSminLTL.setMultiplier(double multiplier)", "testcase": false, "constructor": false}, {"identifier": "getMinimumUnfolds", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMinimumUnfolds()", "full_signature": "@Override public int getMinimumUnfolds()", "class_method_signature": "AbstractLTSminLTL.getMinimumUnfolds()", "testcase": false, "constructor": false}, {"identifier": "setMinimumUnfolds", "parameters": "(int minimumUnfolds)", "modifiers": "@Override public", "return": "void", "signature": "void setMinimumUnfolds(int minimumUnfolds)", "full_signature": "@Override public void setMinimumUnfolds(int minimumUnfolds)", "class_method_signature": "AbstractLTSminLTL.setMinimumUnfolds(int minimumUnfolds)", "testcase": false, "constructor": false}], "file": "modelchecking/ltsmin/src/main/java/net/automatalib/modelcheckers/ltsmin/ltl/AbstractLTSminLTL.java"}, "focal_method": {"identifier": "setMultiplier", "parameters": "(double multiplier)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setMultiplier(double multiplier) {\n        unfolder.setMultiplier(multiplier);\n    }", "signature": "void setMultiplier(double multiplier)", "full_signature": "@Override public void setMultiplier(double multiplier)", "class_method_signature": "AbstractLTSminLTL.setMultiplier(double multiplier)", "testcase": false, "constructor": false, "invocations": ["setMultiplier"]}, "repository": {"repo_id": 8791847, "url": "https://github.com/LearnLib/automatalib", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 54, "size": 31221, "license": "licensed"}}