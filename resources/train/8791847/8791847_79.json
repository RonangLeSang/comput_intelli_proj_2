{"test_class": {"identifier": "AbstractIncrementalDFABuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Alphabet<Character> TEST_ALPHABET = Alphabets.characters('a', 'c');", "modifier": "private static final", "type": "Alphabet<Character>", "declarator": "TEST_ALPHABET = Alphabets.characters('a', 'c')", "var_name": "TEST_ALPHABET"}, {"original_string": "private static final Word<Character> W_1 = Word.fromString(\"abc\");", "modifier": "private static final", "type": "Word<Character>", "declarator": "W_1 = Word.fromString(\"abc\")", "var_name": "W_1"}, {"original_string": "private static final Word<Character> W_2 = Word.fromString(\"ac\");", "modifier": "private static final", "type": "Word<Character>", "declarator": "W_2 = Word.fromString(\"ac\")", "var_name": "W_2"}, {"original_string": "private static final Word<Character> W_3 = Word.fromString(\"acb\");", "modifier": "private static final", "type": "Word<Character>", "declarator": "W_3 = Word.fromString(\"acb\")", "var_name": "W_3"}, {"original_string": "private static final Word<Character> W_4 = Word.epsilon();", "modifier": "private static final", "type": "Word<Character>", "declarator": "W_4 = Word.epsilon()", "var_name": "W_4"}, {"original_string": "private IncrementalDFABuilder<Character> incDfa;", "modifier": "private", "type": "IncrementalDFABuilder<Character>", "declarator": "incDfa", "var_name": "incDfa"}], "file": "incremental/src/test/java/net/automatalib/incremental/dfa/AbstractIncrementalDFABuilderTest.java"}, "test_case": {"identifier": "testConflict", "parameters": "()", "modifiers": "@Test(expectedExceptions = ConflictException.class, dependsOnMethods = \"testLookup\") public", "return": "void", "body": "@Test(expectedExceptions = ConflictException.class, dependsOnMethods = \"testLookup\")\n    public void testConflict() {\n        incDfa.insert(W_1, false);\n    }", "signature": "void testConflict()", "full_signature": "@Test(expectedExceptions = ConflictException.class, dependsOnMethods = \"testLookup\") public void testConflict()", "class_method_signature": "AbstractIncrementalDFABuilderTest.testConflict()", "testcase": true, "constructor": false, "invocations": ["insert"]}, "focal_class": {"identifier": "AbstractIncrementalDFABuilder", "superclass": "", "interfaces": "implements IncrementalDFABuilder<I>, InputAlphabetHolder<I>, Serializable", "fields": [{"original_string": "protected final Alphabet<I> inputAlphabet;", "modifier": "protected final", "type": "Alphabet<I>", "declarator": "inputAlphabet", "var_name": "inputAlphabet"}, {"original_string": "protected int alphabetSize;", "modifier": "protected", "type": "int", "declarator": "alphabetSize", "var_name": "alphabetSize"}], "methods": [{"identifier": "AbstractIncrementalDFABuilder", "parameters": "(Alphabet<I> inputAlphabet)", "modifiers": "public", "return": "", "signature": " AbstractIncrementalDFABuilder(Alphabet<I> inputAlphabet)", "full_signature": "public  AbstractIncrementalDFABuilder(Alphabet<I> inputAlphabet)", "class_method_signature": "AbstractIncrementalDFABuilder.AbstractIncrementalDFABuilder(Alphabet<I> inputAlphabet)", "testcase": false, "constructor": true}, {"identifier": "getInputAlphabet", "parameters": "()", "modifiers": "@Override public", "return": "Alphabet<I>", "signature": "Alphabet<I> getInputAlphabet()", "full_signature": "@Override public Alphabet<I> getInputAlphabet()", "class_method_signature": "AbstractIncrementalDFABuilder.getInputAlphabet()", "testcase": false, "constructor": false}, {"identifier": "hasDefinitiveInformation", "parameters": "(Word<? extends I> word)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasDefinitiveInformation(Word<? extends I> word)", "full_signature": "@Override public boolean hasDefinitiveInformation(Word<? extends I> word)", "class_method_signature": "AbstractIncrementalDFABuilder.hasDefinitiveInformation(Word<? extends I> word)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Word<? extends I> word)", "modifiers": "@Override public", "return": "void", "signature": "void insert(Word<? extends I> word)", "full_signature": "@Override public void insert(Word<? extends I> word)", "class_method_signature": "AbstractIncrementalDFABuilder.insert(Word<? extends I> word)", "testcase": false, "constructor": false}], "file": "incremental/src/main/java/net/automatalib/incremental/dfa/AbstractIncrementalDFABuilder.java"}, "focal_method": {"identifier": "insert", "parameters": "(Word<? extends I> word)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void insert(Word<? extends I> word) {\n        insert(word, true);\n    }", "signature": "void insert(Word<? extends I> word)", "full_signature": "@Override public void insert(Word<? extends I> word)", "class_method_signature": "AbstractIncrementalDFABuilder.insert(Word<? extends I> word)", "testcase": false, "constructor": false, "invocations": ["insert"]}, "repository": {"repo_id": 8791847, "url": "https://github.com/LearnLib/automatalib", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 54, "size": 31221, "license": "licensed"}}