{"test_class": {"identifier": "CharacterizingSetsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Random RANDOM = new Random(0);", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new Random(0)", "var_name": "RANDOM"}, {"original_string": "private static final int AUTOMATON_SIZE = 20;", "modifier": "private static final", "type": "int", "declarator": "AUTOMATON_SIZE = 20", "var_name": "AUTOMATON_SIZE"}, {"original_string": "private static final Alphabet<Integer> INPUT_ALPHABET = Alphabets.integers(0, 5);", "modifier": "private static final", "type": "Alphabet<Integer>", "declarator": "INPUT_ALPHABET = Alphabets.integers(0, 5)", "var_name": "INPUT_ALPHABET"}, {"original_string": "private static final Alphabet<Character> OUTPUT_ALPHABET = Alphabets.characters('a', 'f');", "modifier": "private static final", "type": "Alphabet<Character>", "declarator": "OUTPUT_ALPHABET = Alphabets.characters('a', 'f')", "var_name": "OUTPUT_ALPHABET"}, {"original_string": "private static final CompactDFA<Integer> DFA = RandomAutomata.randomDFA(RANDOM, AUTOMATON_SIZE, INPUT_ALPHABET);", "modifier": "private static final", "type": "CompactDFA<Integer>", "declarator": "DFA = RandomAutomata.randomDFA(RANDOM, AUTOMATON_SIZE, INPUT_ALPHABET)", "var_name": "DFA"}, {"original_string": "private static final CompactMealy<Integer, Character> MEALY =\n            RandomAutomata.randomMealy(RANDOM, AUTOMATON_SIZE, INPUT_ALPHABET, OUTPUT_ALPHABET);", "modifier": "private static final", "type": "CompactMealy<Integer, Character>", "declarator": "MEALY =\n            RandomAutomata.randomMealy(RANDOM, AUTOMATON_SIZE, INPUT_ALPHABET, OUTPUT_ALPHABET)", "var_name": "MEALY"}], "file": "util/src/test/java/net/automatalib/util/automata/equivalence/CharacterizingSetsTest.java"}, "test_case": {"identifier": "characterizingMealySingleTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void characterizingMealySingleTest() {\n        final Integer state = MEALY.getState(AUTOMATON_SIZE / 2);\n        final List<Word<Integer>> characterizingSet = new ArrayList<>();\n        CharacterizingSets.findCharacterizingSet(MEALY, INPUT_ALPHABET, state, characterizingSet);\n\n        checkCharacterizingSet(MEALY, state, characterizingSet);\n    }", "signature": "void characterizingMealySingleTest()", "full_signature": "@Test public void characterizingMealySingleTest()", "class_method_signature": "CharacterizingSetsTest.characterizingMealySingleTest()", "testcase": true, "constructor": false, "invocations": ["getState", "findCharacterizingSet", "checkCharacterizingSet"]}, "focal_class": {"identifier": "CharacterizingSets", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CharacterizingSets", "parameters": "()", "modifiers": "private", "return": "", "signature": " CharacterizingSets()", "full_signature": "private  CharacterizingSets()", "class_method_signature": "CharacterizingSets.CharacterizingSets()", "testcase": false, "constructor": true}, {"identifier": "findCharacterizingSet", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "modifiers": "public static", "return": "void", "signature": "void findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "full_signature": "public static void findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "class_method_signature": "CharacterizingSets.findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "testcase": false, "constructor": false}, {"identifier": "findCharacterizingSet", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       S state,\n                                                       Collection<? super Word<I>> result)", "modifiers": "public static", "return": "void", "signature": "void findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       S state,\n                                                       Collection<? super Word<I>> result)", "full_signature": "public static void findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       S state,\n                                                       Collection<? super Word<I>> result)", "class_method_signature": "CharacterizingSets.findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       S state,\n                                                       Collection<? super Word<I>> result)", "testcase": false, "constructor": false}, {"identifier": "characterizingSetIterator", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                        Collection<? extends I> inputs)", "modifiers": "public static", "return": "Iterator<Word<I>>", "signature": "Iterator<Word<I>> characterizingSetIterator(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                        Collection<? extends I> inputs)", "full_signature": "public static Iterator<Word<I>> characterizingSetIterator(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                        Collection<? extends I> inputs)", "class_method_signature": "CharacterizingSets.characterizingSetIterator(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                        Collection<? extends I> inputs)", "testcase": false, "constructor": false}, {"identifier": "buildTrace", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               S state,\n                                                               Word<I> suffix)", "modifiers": "private static", "return": "List<@Nullable Object>", "signature": "List<@Nullable Object> buildTrace(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               S state,\n                                                               Word<I> suffix)", "full_signature": "private static List<@Nullable Object> buildTrace(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               S state,\n                                                               Word<I> suffix)", "class_method_signature": "CharacterizingSets.buildTrace(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               S state,\n                                                               Word<I> suffix)", "testcase": false, "constructor": false}, {"identifier": "checkTrace", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                S state,\n                                                Word<I> suffix,\n                                                List<Object> trace)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkTrace(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                S state,\n                                                Word<I> suffix,\n                                                List<Object> trace)", "full_signature": "private static boolean checkTrace(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                S state,\n                                                Word<I> suffix,\n                                                List<Object> trace)", "class_method_signature": "CharacterizingSets.checkTrace(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                S state,\n                                                Word<I> suffix,\n                                                List<Object> trace)", "testcase": false, "constructor": false}, {"identifier": "findIncrementalCharacterizingSet", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                     Collection<? extends I> inputs,\n                                                                     Collection<? extends Word<I>> oldSuffixes,\n                                                                     Collection<? super Word<I>> newSuffixes)", "modifiers": "public static", "return": "boolean", "signature": "boolean findIncrementalCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                     Collection<? extends I> inputs,\n                                                                     Collection<? extends Word<I>> oldSuffixes,\n                                                                     Collection<? super Word<I>> newSuffixes)", "full_signature": "public static boolean findIncrementalCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                     Collection<? extends I> inputs,\n                                                                     Collection<? extends Word<I>> oldSuffixes,\n                                                                     Collection<? super Word<I>> newSuffixes)", "class_method_signature": "CharacterizingSets.findIncrementalCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                     Collection<? extends I> inputs,\n                                                                     Collection<? extends Word<I>> oldSuffixes,\n                                                                     Collection<? super Word<I>> newSuffixes)", "testcase": false, "constructor": false}, {"identifier": "incrementalCharacterizingSetIterator", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                                   Collection<? extends I> inputs,\n                                                                                   Collection<? extends Word<I>> oldSuffixes)", "modifiers": "public static", "return": "Iterator<Word<I>>", "signature": "Iterator<Word<I>> incrementalCharacterizingSetIterator(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                                   Collection<? extends I> inputs,\n                                                                                   Collection<? extends Word<I>> oldSuffixes)", "full_signature": "public static Iterator<Word<I>> incrementalCharacterizingSetIterator(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                                   Collection<? extends I> inputs,\n                                                                                   Collection<? extends Word<I>> oldSuffixes)", "class_method_signature": "CharacterizingSets.incrementalCharacterizingSetIterator(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                                                   Collection<? extends I> inputs,\n                                                                                   Collection<? extends Word<I>> oldSuffixes)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(Collection<T> collection)", "modifiers": "private static", "return": "List<T>", "signature": "List<T> toList(Collection<T> collection)", "full_signature": "private static List<T> toList(Collection<T> collection)", "class_method_signature": "CharacterizingSets.toList(Collection<T> collection)", "testcase": false, "constructor": false}, {"identifier": "buildInitialBlocks", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> oldSuffixes)", "modifiers": "private static", "return": "Queue<List<S>>", "signature": "Queue<List<S>> buildInitialBlocks(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> oldSuffixes)", "full_signature": "private static Queue<List<S>> buildInitialBlocks(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> oldSuffixes)", "class_method_signature": "CharacterizingSets.buildInitialBlocks(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> oldSuffixes)", "testcase": false, "constructor": false}, {"identifier": "buildSignature", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> suffixes,\n                                                               S state)", "modifiers": "private static", "return": "List<List<Object>>", "signature": "List<List<Object>> buildSignature(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> suffixes,\n                                                               S state)", "full_signature": "private static List<List<Object>> buildSignature(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> suffixes,\n                                                               S state)", "class_method_signature": "CharacterizingSets.buildSignature(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<? extends Word<I>> suffixes,\n                                                               S state)", "testcase": false, "constructor": false}, {"identifier": "epsilonRefine", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                   Queue<List<S>> blockQueue)", "modifiers": "private static", "return": "boolean", "signature": "boolean epsilonRefine(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                   Queue<List<S>> blockQueue)", "full_signature": "private static boolean epsilonRefine(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                   Queue<List<S>> blockQueue)", "class_method_signature": "CharacterizingSets.epsilonRefine(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                   Queue<List<S>> blockQueue)", "testcase": false, "constructor": false}, {"identifier": "refine", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                      Collection<? extends I> inputs,\n                                                      Queue<List<S>> blockQueue)", "modifiers": "private static", "return": "Word<I>", "signature": "Word<I> refine(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                      Collection<? extends I> inputs,\n                                                      Queue<List<S>> blockQueue)", "full_signature": "private static Word<I> refine(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                      Collection<? extends I> inputs,\n                                                      Queue<List<S>> blockQueue)", "class_method_signature": "CharacterizingSets.refine(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                      Collection<? extends I> inputs,\n                                                      Queue<List<S>> blockQueue)", "testcase": false, "constructor": false}, {"identifier": "clusterByProperty", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<S> states)", "modifiers": "private static", "return": "Map<?, List<S>>", "signature": "Map<?, List<S>> clusterByProperty(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<S> states)", "full_signature": "private static Map<?, List<S>> clusterByProperty(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<S> states)", "class_method_signature": "CharacterizingSets.clusterByProperty(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                               List<S> states)", "testcase": false, "constructor": false}, {"identifier": "cluster", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                          Word<I> suffix,\n                                          Iterator<S> stateIt,\n                                          Map<List<@Nullable Object>, List<S>> bucketMap)", "modifiers": "private static", "return": "void", "signature": "void cluster(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                          Word<I> suffix,\n                                          Iterator<S> stateIt,\n                                          Map<List<@Nullable Object>, List<S>> bucketMap)", "full_signature": "private static void cluster(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                          Word<I> suffix,\n                                          Iterator<S> stateIt,\n                                          Map<List<@Nullable Object>, List<S>> bucketMap)", "class_method_signature": "CharacterizingSets.cluster(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                          Word<I> suffix,\n                                          Iterator<S> stateIt,\n                                          Map<List<@Nullable Object>, List<S>> bucketMap)", "testcase": false, "constructor": false}], "file": "util/src/main/java/net/automatalib/util/automata/equivalence/CharacterizingSets.java"}, "focal_method": {"identifier": "findCharacterizingSet", "parameters": "(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "modifiers": "public static", "return": "void", "body": "public static <S, I, T> void findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result) {\n        findIncrementalCharacterizingSet(automaton, inputs, Collections.emptyList(), result);\n    }", "signature": "void findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "full_signature": "public static void findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "class_method_signature": "CharacterizingSets.findCharacterizingSet(UniversalDeterministicAutomaton<S, I, T, ?, ?> automaton,\n                                                       Collection<? extends I> inputs,\n                                                       Collection<? super Word<I>> result)", "testcase": false, "constructor": false, "invocations": ["findIncrementalCharacterizingSet", "emptyList"]}, "repository": {"repo_id": 8791847, "url": "https://github.com/LearnLib/automatalib", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 54, "size": 31221, "license": "licensed"}}