{"test_class": {"identifier": "FormCommandActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ApplicationContext applicationContext;", "modifier": "", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "Transaction mockTrans;", "modifier": "", "type": "Transaction", "declarator": "mockTrans", "var_name": "mockTrans"}, {"original_string": "FormCommandAction instance;", "modifier": "", "type": "FormCommandAction", "declarator": "instance", "var_name": "instance"}, {"original_string": "FormProcessor mockProcessor;", "modifier": "", "type": "FormProcessor", "declarator": "mockProcessor", "var_name": "mockProcessor"}, {"original_string": "IncomingMessageDAO mockMsgDao;", "modifier": "", "type": "IncomingMessageDAO", "declarator": "mockMsgDao", "var_name": "mockMsgDao"}, {"original_string": "IncomingMessageParser mockParser;", "modifier": "", "type": "IncomingMessageParser", "declarator": "mockParser", "var_name": "mockParser"}, {"original_string": "IncomingMessageFormDAO mockFormDao;", "modifier": "", "type": "IncomingMessageFormDAO", "declarator": "mockFormDao", "var_name": "mockFormDao"}, {"original_string": "IncomingMessageSessionDAO mockSessDao;", "modifier": "", "type": "IncomingMessageSessionDAO", "declarator": "mockSessDao", "var_name": "mockSessDao"}, {"original_string": "IncomingMessageResponseDAO mockRespDao;", "modifier": "", "type": "IncomingMessageResponseDAO", "declarator": "mockRespDao", "var_name": "mockRespDao"}, {"original_string": "IncomingMessageFormValidator mockValidator;", "modifier": "", "type": "IncomingMessageFormValidator", "declarator": "mockValidator", "var_name": "mockValidator"}, {"original_string": "IncomingMessageFormDefinitionDAO mockFormDefDao;", "modifier": "", "type": "IncomingMessageFormDefinitionDAO", "declarator": "mockFormDefDao", "var_name": "mockFormDefDao"}], "file": "motech-mobile-imp/src/test/java/org/motechproject/mobile/imp/util/FormCommandActionTest.java"}, "test_case": {"identifier": "testInitializeSession", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitializeSession() {\n        System.out.println(\"initializeSession\");\n        IncomingMessage message = new IncomingMessageImpl();\n        String requesterPhone = \"000000000000\";\n\n\n        mockSessDao = createMock(IncomingMessageSessionDAO.class);\n\n        expect(\n                applicationContext.getBean(\"incomingMessageSession\", IncomingMessageSession.class)\n                ).andReturn(new IncomingMessageSessionImpl());\n        expect(\n                mockParser.getFormCode((String) anyObject())\n                ).andReturn(\"GENERAL\");\n        expect(\n                applicationContext.getBean(\"incomingMessageSessionDAO\", IncomingMessageSessionDAO.class)\n                ).andReturn(mockSessDao);\n    \n        expectLastCall();\n\n        expect(\n                mockSessDao.save((IncomingMessageSession) anyObject())\n                ).andReturn(null);\n\n        expectLastCall();\n\n        replay(applicationContext,mockParser,mockSessDao);\n        IncomingMessageSession result = instance.initializeSession(message, requesterPhone);\n        verify(applicationContext,mockParser,mockSessDao);\n\n        assertNotNull(result);\n    }", "signature": "void testInitializeSession()", "full_signature": "@Test public void testInitializeSession()", "class_method_signature": "FormCommandActionTest.testInitializeSession()", "testcase": true, "constructor": false, "invocations": ["println", "createMock", "andReturn", "expect", "getBean", "andReturn", "expect", "getFormCode", "anyObject", "andReturn", "expect", "getBean", "expectLastCall", "andReturn", "expect", "save", "anyObject", "expectLastCall", "replay", "initializeSession", "verify", "assertNotNull"]}, "focal_class": {"identifier": "FormCommandAction", "superclass": "", "interfaces": "implements CommandAction, ApplicationContextAware", "fields": [{"original_string": "private FormProcessor formProcessor;", "modifier": "private", "type": "FormProcessor", "declarator": "formProcessor", "var_name": "formProcessor"}, {"original_string": "private IncomingMessageParser parser;", "modifier": "private", "type": "IncomingMessageParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private IncomingMessageFormValidator formValidator;", "modifier": "private", "type": "IncomingMessageFormValidator", "declarator": "formValidator", "var_name": "formValidator"}, {"original_string": "private String senderFieldName;", "modifier": "private", "type": "String", "declarator": "senderFieldName", "var_name": "senderFieldName"}, {"original_string": "private static Logger logger = Logger.getLogger(FormCommandAction.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(FormCommandAction.class)", "var_name": "logger"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "methods": [{"identifier": "execute", "parameters": "(IncomingMessage message, String requesterPhone)", "modifiers": "public", "return": "IncomingMessageResponse", "signature": "IncomingMessageResponse execute(IncomingMessage message, String requesterPhone)", "full_signature": "public IncomingMessageResponse execute(IncomingMessage message, String requesterPhone)", "class_method_signature": "FormCommandAction.execute(IncomingMessage message, String requesterPhone)", "testcase": false, "constructor": false}, {"identifier": "initializeSession", "parameters": "(IncomingMessage message, String requesterPhone)", "modifiers": "public", "return": "IncomingMessageSession", "signature": "IncomingMessageSession initializeSession(IncomingMessage message, String requesterPhone)", "full_signature": "public IncomingMessageSession initializeSession(IncomingMessage message, String requesterPhone)", "class_method_signature": "FormCommandAction.initializeSession(IncomingMessage message, String requesterPhone)", "testcase": false, "constructor": false}, {"identifier": "initializeForm", "parameters": "(IncomingMessage message, String formCode)", "modifiers": "public", "return": "IncomingMessageForm", "signature": "IncomingMessageForm initializeForm(IncomingMessage message, String formCode)", "full_signature": "public IncomingMessageForm initializeForm(IncomingMessage message, String formCode)", "class_method_signature": "FormCommandAction.initializeForm(IncomingMessage message, String formCode)", "testcase": false, "constructor": false}, {"identifier": "prepareResponse", "parameters": "(IncomingMessage message, String wsResponse)", "modifiers": "public", "return": "IncomingMessageResponse", "signature": "IncomingMessageResponse prepareResponse(IncomingMessage message, String wsResponse)", "full_signature": "public IncomingMessageResponse prepareResponse(IncomingMessage message, String wsResponse)", "class_method_signature": "FormCommandAction.prepareResponse(IncomingMessage message, String wsResponse)", "testcase": false, "constructor": false}, {"identifier": "getParser", "parameters": "()", "modifiers": "public", "return": "IncomingMessageParser", "signature": "IncomingMessageParser getParser()", "full_signature": "public IncomingMessageParser getParser()", "class_method_signature": "FormCommandAction.getParser()", "testcase": false, "constructor": false}, {"identifier": "setParser", "parameters": "(IncomingMessageParser parser)", "modifiers": "public", "return": "void", "signature": "void setParser(IncomingMessageParser parser)", "full_signature": "public void setParser(IncomingMessageParser parser)", "class_method_signature": "FormCommandAction.setParser(IncomingMessageParser parser)", "testcase": false, "constructor": false}, {"identifier": "getFormValidator", "parameters": "()", "modifiers": "public", "return": "IncomingMessageFormValidator", "signature": "IncomingMessageFormValidator getFormValidator()", "full_signature": "public IncomingMessageFormValidator getFormValidator()", "class_method_signature": "FormCommandAction.getFormValidator()", "testcase": false, "constructor": false}, {"identifier": "setFormValidator", "parameters": "(IncomingMessageFormValidator formValidator)", "modifiers": "public", "return": "void", "signature": "void setFormValidator(IncomingMessageFormValidator formValidator)", "full_signature": "public void setFormValidator(IncomingMessageFormValidator formValidator)", "class_method_signature": "FormCommandAction.setFormValidator(IncomingMessageFormValidator formValidator)", "testcase": false, "constructor": false}, {"identifier": "setFormProcessor", "parameters": "(FormProcessor formProcessor)", "modifiers": "public", "return": "void", "signature": "void setFormProcessor(FormProcessor formProcessor)", "full_signature": "public void setFormProcessor(FormProcessor formProcessor)", "class_method_signature": "FormCommandAction.setFormProcessor(FormProcessor formProcessor)", "testcase": false, "constructor": false}, {"identifier": "getSenderFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSenderFieldName()", "full_signature": "public String getSenderFieldName()", "class_method_signature": "FormCommandAction.getSenderFieldName()", "testcase": false, "constructor": false}, {"identifier": "setSenderFieldName", "parameters": "(String senderFieldName)", "modifiers": "public", "return": "void", "signature": "void setSenderFieldName(String senderFieldName)", "full_signature": "public void setSenderFieldName(String senderFieldName)", "class_method_signature": "FormCommandAction.setSenderFieldName(String senderFieldName)", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "FormCommandAction.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}], "file": "motech-mobile-imp/src/main/java/org/motechproject/mobile/imp/util/FormCommandAction.java"}, "focal_method": {"identifier": "initializeSession", "parameters": "(IncomingMessage message, String requesterPhone)", "modifiers": "public", "return": "IncomingMessageSession", "body": "public IncomingMessageSession initializeSession(IncomingMessage message, String requesterPhone) {\n        String formCode = parser.getFormCode(message.getContent());\n\n        IncomingMessageSession imSession = (IncomingMessageSession) applicationContext.getBean(\"incomingMessageSession\", IncomingMessageSession.class);\n        imSession.setFormCode(formCode);\n        imSession.setRequesterPhone(requesterPhone);\n        imSession.setMessageSessionStatus(IncMessageSessionStatus.STARTED);\n        imSession.setDateStarted(new Date());\n        imSession.setLastActivity(new Date());\n        imSession.addIncomingMessage(message);\n\n        IncomingMessageSessionDAO sessionDao = (IncomingMessageSessionDAO) applicationContext.getBean(\"incomingMessageSessionDAO\", IncomingMessageSessionDAO.class);\n     \n\n        try {\n   \n            sessionDao.save(imSession);\n\n        } catch (Exception ex) {\n            logger.error(\"Error initializing incoming message session\", ex);\n      \n        }\n\n        return imSession;\n    }", "signature": "IncomingMessageSession initializeSession(IncomingMessage message, String requesterPhone)", "full_signature": "public IncomingMessageSession initializeSession(IncomingMessage message, String requesterPhone)", "class_method_signature": "FormCommandAction.initializeSession(IncomingMessage message, String requesterPhone)", "testcase": false, "constructor": false, "invocations": ["getFormCode", "getContent", "getBean", "setFormCode", "setRequesterPhone", "setMessageSessionStatus", "setDateStarted", "setLastActivity", "addIncomingMessage", "getBean", "save", "error"]}, "repository": {"repo_id": 1076094, "url": "https://github.com/motech/MOTECH-Mobile", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 4295, "license": "licensed"}}