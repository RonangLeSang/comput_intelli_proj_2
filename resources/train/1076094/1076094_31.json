{"test_class": {"identifier": "FormProcessorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    FormProcessorImpl instance;", "modifier": "@Autowired", "type": "FormProcessorImpl", "declarator": "instance", "var_name": "instance"}, {"original_string": "private OMIManager mockOMI;", "modifier": "private", "type": "OMIManager", "declarator": "mockOMI", "var_name": "mockOMI"}, {"original_string": "private CoreManager mockCore;", "modifier": "private", "type": "CoreManager", "declarator": "mockCore", "var_name": "mockCore"}, {"original_string": "private RegistrarService mockWebService;", "modifier": "private", "type": "RegistrarService", "declarator": "mockWebService", "var_name": "mockWebService"}, {"original_string": "private IncomingMessageFormImpl form;", "modifier": "private", "type": "IncomingMessageFormImpl", "declarator": "form", "var_name": "form"}], "file": "motech-mobile-imp/src/test/java/org/motechproject/mobile/imp/util/FormProcessorImplTest.java"}, "test_case": {"identifier": "shouldProcessMotherOPD", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldProcessMotherOPD() throws ValidationException {\n        form.setMessageFormStatus(IncMessageFormStatus.VALID);\n        form.getIncomingMsgFormDefinition().setFormCode(\"MOTHEROPD-JF\");\n\n        mockWebService.recordMotherVisit((Integer) anyObject(), (Integer) anyObject(), (Date) anyObject(), (String) anyObject(), (Integer) anyObject(), (Boolean) anyObject(), (Integer) anyObject(), (Integer) anyObject(), (Boolean) anyObject(), (Boolean) anyObject(), (Boolean) anyObject(), (Boolean) anyObject(), (Boolean) anyObject(), (Boolean) anyObject(), (String) anyObject());\n        expectLastCall();\n\n        replay(mockWebService);\n        instance.processForm(form);\n        assertEquals(form.getMessageFormStatus(), IncMessageFormStatus.SERVER_VALID);\n        verify(mockWebService);\n\n        reset(mockWebService);\n    }", "signature": "void shouldProcessMotherOPD()", "full_signature": "@Test public void shouldProcessMotherOPD()", "class_method_signature": "FormProcessorImplTest.shouldProcessMotherOPD()", "testcase": true, "constructor": false, "invocations": ["setMessageFormStatus", "setFormCode", "getIncomingMsgFormDefinition", "recordMotherVisit", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "anyObject", "expectLastCall", "replay", "processForm", "assertEquals", "getMessageFormStatus", "verify", "reset"]}, "focal_class": {"identifier": "FormProcessorImpl", "superclass": "", "interfaces": "implements FormProcessor", "fields": [{"original_string": "private String defaultDateFormat;", "modifier": "private", "type": "String", "declarator": "defaultDateFormat", "var_name": "defaultDateFormat"}, {"original_string": "private RegistrarService regWS;", "modifier": "private", "type": "RegistrarService", "declarator": "regWS", "var_name": "regWS"}, {"original_string": "private OMIManager omiManager;", "modifier": "private", "type": "OMIManager", "declarator": "omiManager", "var_name": "omiManager"}, {"original_string": "private CoreManager coreManager;", "modifier": "private", "type": "CoreManager", "declarator": "coreManager", "var_name": "coreManager"}, {"original_string": "private Map<Integer, String> serverErrors;", "modifier": "private", "type": "Map<Integer, String>", "declarator": "serverErrors", "var_name": "serverErrors"}, {"original_string": "private Map<String, MethodSignature> serviceMethods;", "modifier": "private", "type": "Map<String, MethodSignature>", "declarator": "serviceMethods", "var_name": "serviceMethods"}, {"original_string": "private static Logger logger = Logger.getLogger(FormProcessorImpl.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(FormProcessorImpl.class)", "var_name": "logger"}], "methods": [{"identifier": "processForm", "parameters": "(IncomingMessageForm form)", "modifiers": "public", "return": "String", "signature": "String processForm(IncomingMessageForm form)", "full_signature": "public String processForm(IncomingMessageForm form)", "class_method_signature": "FormProcessorImpl.processForm(IncomingMessageForm form)", "testcase": false, "constructor": false}, {"identifier": "executeCallback", "parameters": "(MethodSignature methodSignature, Object param)", "modifiers": "private", "return": "String", "signature": "String executeCallback(MethodSignature methodSignature, Object param)", "full_signature": "private String executeCallback(MethodSignature methodSignature, Object param)", "class_method_signature": "FormProcessorImpl.executeCallback(MethodSignature methodSignature, Object param)", "testcase": false, "constructor": false}, {"identifier": "parseValidationErrors", "parameters": "(IncomingMessageForm form, ValidationException ex)", "modifiers": "public", "return": "void", "signature": "void parseValidationErrors(IncomingMessageForm form, ValidationException ex)", "full_signature": "public void parseValidationErrors(IncomingMessageForm form, ValidationException ex)", "class_method_signature": "FormProcessorImpl.parseValidationErrors(IncomingMessageForm form, ValidationException ex)", "testcase": false, "constructor": false}, {"identifier": "setDefaultDateFormat", "parameters": "(String defaultDateFormat)", "modifiers": "public", "return": "void", "signature": "void setDefaultDateFormat(String defaultDateFormat)", "full_signature": "public void setDefaultDateFormat(String defaultDateFormat)", "class_method_signature": "FormProcessorImpl.setDefaultDateFormat(String defaultDateFormat)", "testcase": false, "constructor": false}, {"identifier": "setRegWS", "parameters": "(RegistrarService regWS)", "modifiers": "public", "return": "void", "signature": "void setRegWS(RegistrarService regWS)", "full_signature": "public void setRegWS(RegistrarService regWS)", "class_method_signature": "FormProcessorImpl.setRegWS(RegistrarService regWS)", "testcase": false, "constructor": false}, {"identifier": "setOmiManager", "parameters": "(OMIManager omiManager)", "modifiers": "public", "return": "void", "signature": "void setOmiManager(OMIManager omiManager)", "full_signature": "public void setOmiManager(OMIManager omiManager)", "class_method_signature": "FormProcessorImpl.setOmiManager(OMIManager omiManager)", "testcase": false, "constructor": false}, {"identifier": "setCoreManager", "parameters": "(CoreManager coreManager)", "modifiers": "public", "return": "void", "signature": "void setCoreManager(CoreManager coreManager)", "full_signature": "public void setCoreManager(CoreManager coreManager)", "class_method_signature": "FormProcessorImpl.setCoreManager(CoreManager coreManager)", "testcase": false, "constructor": false}, {"identifier": "setServerErrors", "parameters": "(Map<Integer, String> serverErrors)", "modifiers": "public", "return": "void", "signature": "void setServerErrors(Map<Integer, String> serverErrors)", "full_signature": "public void setServerErrors(Map<Integer, String> serverErrors)", "class_method_signature": "FormProcessorImpl.setServerErrors(Map<Integer, String> serverErrors)", "testcase": false, "constructor": false}, {"identifier": "getServiceMethods", "parameters": "()", "modifiers": "public", "return": "Map<String, MethodSignature>", "signature": "Map<String, MethodSignature> getServiceMethods()", "full_signature": "public Map<String, MethodSignature> getServiceMethods()", "class_method_signature": "FormProcessorImpl.getServiceMethods()", "testcase": false, "constructor": false}, {"identifier": "setServiceMethods", "parameters": "(Map<String, MethodSignature> serviceMethods)", "modifiers": "public", "return": "void", "signature": "void setServiceMethods(Map<String, MethodSignature> serviceMethods)", "full_signature": "public void setServiceMethods(Map<String, MethodSignature> serviceMethods)", "class_method_signature": "FormProcessorImpl.setServiceMethods(Map<String, MethodSignature> serviceMethods)", "testcase": false, "constructor": false}], "file": "motech-mobile-imp/src/main/java/org/motechproject/mobile/imp/util/FormProcessorImpl.java"}, "focal_method": {"identifier": "processForm", "parameters": "(IncomingMessageForm form)", "modifiers": "public", "return": "String", "body": "public String processForm(IncomingMessageForm form) {\n        Object result = null;\n        MethodSignature methodSignature;\n\n        if(form.getMessageFormStatus() != IncMessageFormStatus.VALID)\n            return \"Invalid form\";\n\n        SimpleDateFormat dFormat = new SimpleDateFormat(defaultDateFormat);\n        dFormat.setLenient(true);\n\n        if (getServiceMethods().containsKey(form.getIncomingMsgFormDefinition().getFormCode().toUpperCase())) {\n            methodSignature = getServiceMethods().get(form.getIncomingMsgFormDefinition().getFormCode().toUpperCase());\n        } else {\n            //Server can not process this type of form. Return current form status\n            return form.getMessageFormStatus().toString();\n        }\n\n        /** \n         * Using reflection to determine and execute the appropriate serve call for the form.\n         * Get the name of the method and initialize arrays to hold the types and values of the arguments\n         */\n        String methodName = methodSignature.getMethodName();\n        Class[] paramTypes = new Class[methodSignature.getMethodParams().size()];\n        Object[] paramObjs = new Object[methodSignature.getMethodParams().size()];\n\n        int idx = 0;\n\n        try {\n            for (Entry<String, Class> e : methodSignature.getMethodParams().entrySet()) {\n                /** Entry key is name of argument, value is class type */\n                logger.debug(\"Param: \"+e.getKey()+\" Class:\"+e.getValue());\n                paramTypes[idx] = e.getValue();\n\n                if (form.getIncomingMsgFormParameters().containsKey(e.getKey().toLowerCase())) {//Form field was passed\n                    if(form.getIncomingMsgFormParameters().get(e.getKey().toLowerCase()).getValue().isEmpty()){//Field empty, pass null\n                        paramObjs[idx] = null;\n                    } else if (e.getValue().equals(Date.class)) {//Argument is a date, parse date string\n                        paramObjs[idx] = dFormat.parse(form.getIncomingMsgFormParameters().get(e.getKey().toLowerCase()).getValue());\n                    } else if (e.getValue().isEnum()) {//Argument is an enumeration, convert to appropriate Enum type\n                        paramObjs[idx] = Enum.valueOf(e.getValue(), form.getIncomingMsgFormParameters().get(e.getKey().toLowerCase()).getValue());\n                    } else if (e.getValue().equals(String.class)) {\n                        paramObjs[idx] = form.getIncomingMsgFormParameters().get(e.getKey().toLowerCase()).getValue();\n                    } else if (e.getValue().isArray()) {//Argument is an array. Process further\n                        String[] a = form.getIncomingMsgFormParameters().get(e.getKey().toLowerCase()).getValue().split(\" \");\n                        //Get array element type\n                        Class baseType = e.getValue().getComponentType();\n                        Object arrayObj = Array.newInstance(baseType, a.length);\n                        for (int i = 0; i < a.length; i++) {\n                            /**\n                             * Assumes the base type of any array passed will contain a constructor\n                             * which accepts a single string parameter (expecting primitives or custom types)\n                             */\n                            Constructor constr = baseType.getConstructor(String.class);\n                            Object val = constr.newInstance(a[i]);\n                            Array.set(arrayObj, i, val);\n                        }\n\n                        paramObjs[idx] = arrayObj;\n                    } else {\n                        /**\n                         * For types other than String, Array, Enum and Date, A constructor\n                         * which accepts a single string parameter is expected. This is default\n                         * for primitive types. Custom types MUST be defined with a matching constructor.\n                         */\n                        Constructor constr = e.getValue().getConstructor(String.class);\n                        paramObjs[idx] = constr.newInstance(form.getIncomingMsgFormParameters().get(e.getKey().toLowerCase()).getValue());\n                    }\n                } else {//Form field was not supplied. Pass null for argument value.\n                    paramObjs[idx] = null;\n                }\n                idx++;\n            }\n            //Initialize method\n            Method method = regWS.getClass().getDeclaredMethod(methodName, paramTypes);\n            result = method.invoke(regWS, paramObjs);\n            form.setMessageFormStatus(IncMessageFormStatus.SERVER_VALID);\n        } catch (NoSuchMethodException ex) {//Method does not exist\n            form.setMessageFormStatus(IncMessageFormStatus.SERVER_INVALID);\n            logger.fatal(\"Could not find web service method \" + methodName, ex);\n        } catch (SecurityException ex) {//Method cannot be accessed (insufficient permissions)\n            form.setMessageFormStatus(IncMessageFormStatus.SERVER_INVALID);\n            logger.fatal(\"Could not access method \" + methodName + \" due to SecurityException\", ex);\n        } catch (IllegalAccessException ex) {//Method cannot be accessed (private or protected)\n            form.setMessageFormStatus(IncMessageFormStatus.SERVER_INVALID);\n            logger.fatal(\"Could not invoke method \" + methodName + \" due to IllegalAccessException\", ex);\n        } catch (InvocationTargetException ex) {//Method threw exception\n        \tform.setMessageFormStatus(IncMessageFormStatus.SERVER_INVALID);\n            if (ex.getCause().getClass().equals(ValidationException.class)) {\n                parseValidationErrors(form, (ValidationException) ex.getCause());\n            } else {\n                logger.fatal(\"Could not invoke method \" + methodName + \" due to InvocationTargetException\", ex);\n            }\n        } catch (Exception ex) {//Other exception\n            logger.error(\"Form could not be processed on server\", ex);\n            form.setMessageFormStatus(IncMessageFormStatus.SERVER_INVALID);\n            return \"An error occurred on the server\";\n        }\n\n        if (methodSignature.getCallback() == null) {//Method result requires no further processing. return\n            return (result == null) ? null : String.valueOf(result);\n        }\n        //Process method result\n        return executeCallback(methodSignature.getCallback(), result);\n    }", "signature": "String processForm(IncomingMessageForm form)", "full_signature": "public String processForm(IncomingMessageForm form)", "class_method_signature": "FormProcessorImpl.processForm(IncomingMessageForm form)", "testcase": false, "constructor": false, "invocations": ["getMessageFormStatus", "setLenient", "containsKey", "getServiceMethods", "toUpperCase", "getFormCode", "getIncomingMsgFormDefinition", "get", "getServiceMethods", "toUpperCase", "getFormCode", "getIncomingMsgFormDefinition", "toString", "getMessageFormStatus", "getMethodName", "size", "getMethodParams", "size", "getMethodParams", "entrySet", "getMethodParams", "debug", "getKey", "getValue", "getValue", "containsKey", "getIncomingMsgFormParameters", "toLowerCase", "getKey", "isEmpty", "getValue", "get", "getIncomingMsgFormParameters", "toLowerCase", "getKey", "equals", "getValue", "parse", "getValue", "get", "getIncomingMsgFormParameters", "toLowerCase", "getKey", "isEnum", "getValue", "valueOf", "getValue", "getValue", "get", "getIncomingMsgFormParameters", "toLowerCase", "getKey", "equals", "getValue", "getValue", "get", "getIncomingMsgFormParameters", "toLowerCase", "getKey", "isArray", "getValue", "split", "getValue", "get", "getIncomingMsgFormParameters", "toLowerCase", "getKey", "getComponentType", "getValue", "newInstance", "getConstructor", "newInstance", "set", "getConstructor", "getValue", "newInstance", "getValue", "get", "getIncomingMsgFormParameters", "toLowerCase", "getKey", "getDeclaredMethod", "getClass", "invoke", "setMessageFormStatus", "setMessageFormStatus", "fatal", "setMessageFormStatus", "fatal", "setMessageFormStatus", "fatal", "setMessageFormStatus", "equals", "getClass", "getCause", "parseValidationErrors", "getCause", "fatal", "error", "setMessageFormStatus", "getCallback", "valueOf", "executeCallback", "getCallback"]}, "repository": {"repo_id": 1076094, "url": "https://github.com/motech/MOTECH-Mobile", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 4295, "license": "licensed"}}