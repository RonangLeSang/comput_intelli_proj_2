{"test_class": {"identifier": "SANManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public JUnitRuleMockery context = new JUnitRuleMockery();", "modifier": "@Rule\n  public", "type": "JUnitRuleMockery", "declarator": "context = new JUnitRuleMockery()", "var_name": "context"}], "file": "clc/modules/block-storage/src/test/java/com/eucalyptus/blockstorage/san/common/SANManagerTest.java"}, "test_case": {"identifier": "cloneVolume_CloneDbRecExistsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void cloneVolume_CloneDbRecExistsTest() throws Exception {\n    final String volId = \"testparentvol\";\n    final String rezPrefix = \"fooprefix\";\n    final String rezSuffix = \"foosuffix\";\n    final SANVolumeInfo existing = new SANVolumeInfo(volId).withSanVolumeId(rezPrefix + volId + rezSuffix);\n    existing.setIqn(\"foo-parent-iqn\");\n    existing.setSize(new Integer(5));\n    existing.setSnapshotOf(\"foo-vol\");\n    final SANVolumeInfo existingClone = new SANVolumeInfo(\"testvol\").withSanVolumeId(rezPrefix + \"testvol\" + rezSuffix);\n    existingClone.setIqn(\"foo-iqn\");\n    existingClone.setSize(new Integer(5));\n\n    SANInfo sanInfo = new SANInfo(StorageProperties.NAME, \"foohost\", \"foouser\", \"foopassword\");\n    sanInfo.setResourcePrefix(rezPrefix);\n    sanInfo.setResourceSuffix(rezSuffix);\n\n    try (TransactionResource tran = Entities.transactionFor(SANInfo.class)) {\n      Entities.persist(existing);\n      Entities.persist(existingClone);\n      Entities.persist(sanInfo);\n      tran.commit();\n    }\n\n    final SANProvider sanProvider = context.mock(SANProvider.class);\n    context.checking(new Expectations() {\n      {\n        oneOf(sanProvider).snapshotExists(existingClone.getSanVolumeId(), existingClone.getIqn());\n        will(returnValue(Boolean.FALSE));\n        oneOf(sanProvider).cloneVolume(rezPrefix + \"testvol\" + rezSuffix, existing.getSanVolumeId(), existing.getIqn());\n        will(returnValue(\"foo-iqn\"));\n      }\n    });\n\n    SANManager test = new SANManager(sanProvider);\n    test.cloneVolume(\"testvol\", existing.getVolumeId());\n\n    try (TransactionResource tran = Entities.transactionFor(SANVolumeInfo.class)) {\n      List<SANVolumeInfo> results = Entities.query(new SANVolumeInfo());\n      assertTrue(\"expected two SANVolumeInfo to exist\", results != null && results.size() == 2);\n    }\n  }", "signature": "void cloneVolume_CloneDbRecExistsTest()", "full_signature": "@Test public void cloneVolume_CloneDbRecExistsTest()", "class_method_signature": "SANManagerTest.cloneVolume_CloneDbRecExistsTest()", "testcase": true, "constructor": false, "invocations": ["withSanVolumeId", "setIqn", "setSize", "setSnapshotOf", "withSanVolumeId", "setIqn", "setSize", "setResourcePrefix", "setResourceSuffix", "transactionFor", "persist", "persist", "persist", "commit", "mock", "checking", "snapshotExists", "oneOf", "getSanVolumeId", "getIqn", "will", "returnValue", "cloneVolume", "oneOf", "getSanVolumeId", "getIqn", "will", "returnValue", "cloneVolume", "getVolumeId", "transactionFor", "query", "assertTrue", "size"]}, "focal_class": {"identifier": "SANManager", "superclass": "", "interfaces": "implements LogicalStorageManager", "fields": [{"original_string": "private SANProvider connectionManager;", "modifier": "private", "type": "SANProvider", "declarator": "connectionManager", "var_name": "connectionManager"}, {"original_string": "private static SANManager singleton;", "modifier": "private static", "type": "SANManager", "declarator": "singleton", "var_name": "singleton"}, {"original_string": "private static Logger LOG = Logger.getLogger(SANManager.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = Logger.getLogger(SANManager.class)", "var_name": "LOG"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "LogicalStorageManager", "signature": "LogicalStorageManager getInstance()", "full_signature": "public static LogicalStorageManager getInstance()", "class_method_signature": "SANManager.getInstance()", "testcase": false, "constructor": false}, {"identifier": "SANManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " SANManager()", "full_signature": "public  SANManager()", "class_method_signature": "SANManager.SANManager()", "testcase": false, "constructor": true}, {"identifier": "SANManager", "parameters": "(SANProvider connectionManager)", "modifiers": "", "return": "", "signature": " SANManager(SANProvider connectionManager)", "full_signature": "  SANManager(SANProvider connectionManager)", "class_method_signature": "SANManager.SANManager(SANProvider connectionManager)", "testcase": false, "constructor": true}, {"identifier": "addSnapshot", "parameters": "(String snapshotId)", "modifiers": "public", "return": "void", "signature": "void addSnapshot(String snapshotId)", "full_signature": "public void addSnapshot(String snapshotId)", "class_method_signature": "SANManager.addSnapshot(String snapshotId)", "testcase": false, "constructor": false}, {"identifier": "checkPreconditions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkPreconditions()", "full_signature": "public void checkPreconditions()", "class_method_signature": "SANManager.checkPreconditions()", "testcase": false, "constructor": false}, {"identifier": "cleanSnapshot", "parameters": "(String snapshotId, String snapshotPointId)", "modifiers": "@Override public", "return": "void", "signature": "void cleanSnapshot(String snapshotId, String snapshotPointId)", "full_signature": "@Override public void cleanSnapshot(String snapshotId, String snapshotPointId)", "class_method_signature": "SANManager.cleanSnapshot(String snapshotId, String snapshotPointId)", "testcase": false, "constructor": false}, {"identifier": "cleanVolume", "parameters": "(String volumeId)", "modifiers": "public", "return": "void", "signature": "void cleanVolume(String volumeId)", "full_signature": "public void cleanVolume(String volumeId)", "class_method_signature": "SANManager.cleanVolume(String volumeId)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void configure()", "full_signature": "public void configure()", "class_method_signature": "SANManager.configure()", "testcase": false, "constructor": false}, {"identifier": "createSnapshot", "parameters": "(String volumeId, String snapshotId, String snapshotPointId, Boolean shouldTransferSnapshots)", "modifiers": "public", "return": "StorageResource", "signature": "StorageResource createSnapshot(String volumeId, String snapshotId, String snapshotPointId, Boolean shouldTransferSnapshots)", "full_signature": "public StorageResource createSnapshot(String volumeId, String snapshotId, String snapshotPointId, Boolean shouldTransferSnapshots)", "class_method_signature": "SANManager.createSnapshot(String volumeId, String snapshotId, String snapshotPointId, Boolean shouldTransferSnapshots)", "testcase": false, "constructor": false}, {"identifier": "createSnapshot", "parameters": "(String volumeId, String snapshotId, String snapshotPointId)", "modifiers": "public", "return": "void", "signature": "void createSnapshot(String volumeId, String snapshotId, String snapshotPointId)", "full_signature": "public void createSnapshot(String volumeId, String snapshotId, String snapshotPointId)", "class_method_signature": "SANManager.createSnapshot(String volumeId, String snapshotId, String snapshotPointId)", "testcase": false, "constructor": false}, {"identifier": "createVolume", "parameters": "(String volumeId, int size)", "modifiers": "public", "return": "void", "signature": "void createVolume(String volumeId, int size)", "full_signature": "public void createVolume(String volumeId, int size)", "class_method_signature": "SANManager.createVolume(String volumeId, int size)", "testcase": false, "constructor": false}, {"identifier": "resourceIdOnSan", "parameters": "(String resourceId)", "modifiers": "private", "return": "String", "signature": "String resourceIdOnSan(String resourceId)", "full_signature": "private String resourceIdOnSan(String resourceId)", "class_method_signature": "SANManager.resourceIdOnSan(String resourceId)", "testcase": false, "constructor": false}, {"identifier": "createVolume", "parameters": "(String volumeId, String snapshotId, int size)", "modifiers": "public", "return": "int", "signature": "int createVolume(String volumeId, String snapshotId, int size)", "full_signature": "public int createVolume(String volumeId, String snapshotId, int size)", "class_method_signature": "SANManager.createVolume(String volumeId, String snapshotId, int size)", "testcase": false, "constructor": false}, {"identifier": "cloneVolume", "parameters": "(String volumeId, String parentVolumeId)", "modifiers": "public", "return": "void", "signature": "void cloneVolume(String volumeId, String parentVolumeId)", "full_signature": "public void cloneVolume(String volumeId, String parentVolumeId)", "class_method_signature": "SANManager.cloneVolume(String volumeId, String parentVolumeId)", "testcase": false, "constructor": false}, {"identifier": "deleteSnapshot", "parameters": "(String snapshotId, String snapshotPointId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteSnapshot(String snapshotId, String snapshotPointId)", "full_signature": "@Override public void deleteSnapshot(String snapshotId, String snapshotPointId)", "class_method_signature": "SANManager.deleteSnapshot(String snapshotId, String snapshotPointId)", "testcase": false, "constructor": false}, {"identifier": "deleteVolume", "parameters": "(String volumeId)", "modifiers": "public", "return": "void", "signature": "void deleteVolume(String volumeId)", "full_signature": "public void deleteVolume(String volumeId)", "class_method_signature": "SANManager.deleteVolume(String volumeId)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotSize", "parameters": "(String snapshotId)", "modifiers": "public", "return": "int", "signature": "int getSnapshotSize(String snapshotId)", "full_signature": "public int getSnapshotSize(String snapshotId)", "class_method_signature": "SANManager.getSnapshotSize(String snapshotId)", "testcase": false, "constructor": false}, {"identifier": "getVolumeConnectionString", "parameters": "(String volumeId)", "modifiers": "public", "return": "String", "signature": "String getVolumeConnectionString(String volumeId)", "full_signature": "public String getVolumeConnectionString(String volumeId)", "class_method_signature": "SANManager.getVolumeConnectionString(String volumeId)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialize()", "full_signature": "public void initialize()", "class_method_signature": "SANManager.initialize()", "testcase": false, "constructor": false}, {"identifier": "loadSnapshots", "parameters": "(List<String> snapshotSet, List<String> snapshotFileNames)", "modifiers": "public", "return": "void", "signature": "void loadSnapshots(List<String> snapshotSet, List<String> snapshotFileNames)", "full_signature": "public void loadSnapshots(List<String> snapshotSet, List<String> snapshotFileNames)", "class_method_signature": "SANManager.loadSnapshots(List<String> snapshotSet, List<String> snapshotFileNames)", "testcase": false, "constructor": false}, {"identifier": "prepareForTransfer", "parameters": "(String snapshotId)", "modifiers": "public", "return": "List<String>", "signature": "List<String> prepareForTransfer(String snapshotId)", "full_signature": "public List<String> prepareForTransfer(String snapshotId)", "class_method_signature": "SANManager.prepareForTransfer(String snapshotId)", "testcase": false, "constructor": false}, {"identifier": "reload", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reload()", "full_signature": "public void reload()", "class_method_signature": "SANManager.reload()", "testcase": false, "constructor": false}, {"identifier": "startupChecks", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startupChecks()", "full_signature": "public void startupChecks()", "class_method_signature": "SANManager.startupChecks()", "testcase": false, "constructor": false}, {"identifier": "finishVolume", "parameters": "(String snapshotId)", "modifiers": "public", "return": "void", "signature": "void finishVolume(String snapshotId)", "full_signature": "public void finishVolume(String snapshotId)", "class_method_signature": "SANManager.finishVolume(String snapshotId)", "testcase": false, "constructor": false}, {"identifier": "prepSnapshotForDownload", "parameters": "(final String snapshotId, int sizeExpected, long actualSizeInMB)", "modifiers": "public", "return": "StorageResourceWithCallback", "signature": "StorageResourceWithCallback prepSnapshotForDownload(final String snapshotId, int sizeExpected, long actualSizeInMB)", "full_signature": "public StorageResourceWithCallback prepSnapshotForDownload(final String snapshotId, int sizeExpected, long actualSizeInMB)", "class_method_signature": "SANManager.prepSnapshotForDownload(final String snapshotId, int sizeExpected, long actualSizeInMB)", "testcase": false, "constructor": false}, {"identifier": "getStorageProps", "parameters": "()", "modifiers": "public", "return": "ArrayList<ComponentProperty>", "signature": "ArrayList<ComponentProperty> getStorageProps()", "full_signature": "public ArrayList<ComponentProperty> getStorageProps()", "class_method_signature": "SANManager.getStorageProps()", "testcase": false, "constructor": false}, {"identifier": "setStorageProps", "parameters": "(ArrayList<ComponentProperty> storageProps)", "modifiers": "public", "return": "void", "signature": "void setStorageProps(ArrayList<ComponentProperty> storageProps)", "full_signature": "public void setStorageProps(ArrayList<ComponentProperty> storageProps)", "class_method_signature": "SANManager.setStorageProps(ArrayList<ComponentProperty> storageProps)", "testcase": false, "constructor": false}, {"identifier": "getStorageRootDirectory", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStorageRootDirectory()", "full_signature": "public String getStorageRootDirectory()", "class_method_signature": "SANManager.getStorageRootDirectory()", "testcase": false, "constructor": false}, {"identifier": "getVolumePath", "parameters": "(String volumeId)", "modifiers": "public", "return": "String", "signature": "String getVolumePath(String volumeId)", "full_signature": "public String getVolumePath(String volumeId)", "class_method_signature": "SANManager.getVolumePath(String volumeId)", "testcase": false, "constructor": false}, {"identifier": "importVolume", "parameters": "(String volumeId, String volumePath, int size)", "modifiers": "public", "return": "void", "signature": "void importVolume(String volumeId, String volumePath, int size)", "full_signature": "public void importVolume(String volumeId, String volumePath, int size)", "class_method_signature": "SANManager.importVolume(String volumeId, String volumePath, int size)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotPath", "parameters": "(String snapshotId)", "modifiers": "public", "return": "String", "signature": "String getSnapshotPath(String snapshotId)", "full_signature": "public String getSnapshotPath(String snapshotId)", "class_method_signature": "SANManager.getSnapshotPath(String snapshotId)", "testcase": false, "constructor": false}, {"identifier": "importSnapshot", "parameters": "(String snapshotId, String volumeId, String snapPath, int size)", "modifiers": "public", "return": "void", "signature": "void importSnapshot(String snapshotId, String volumeId, String snapPath, int size)", "full_signature": "public void importSnapshot(String snapshotId, String volumeId, String snapPath, int size)", "class_method_signature": "SANManager.importSnapshot(String snapshotId, String volumeId, String snapPath, int size)", "testcase": false, "constructor": false}, {"identifier": "exportVolume", "parameters": "(String volumeId, String nodeIqn)", "modifiers": "public", "return": "String", "signature": "String exportVolume(String volumeId, String nodeIqn)", "full_signature": "public String exportVolume(String volumeId, String nodeIqn)", "class_method_signature": "SANManager.exportVolume(String volumeId, String nodeIqn)", "testcase": false, "constructor": false}, {"identifier": "unexportVolumeFromAll", "parameters": "(String volumeId)", "modifiers": "public", "return": "void", "signature": "void unexportVolumeFromAll(String volumeId)", "full_signature": "public void unexportVolumeFromAll(String volumeId)", "class_method_signature": "SANManager.unexportVolumeFromAll(String volumeId)", "testcase": false, "constructor": false}, {"identifier": "unexportVolume", "parameters": "(String volumeId, String nodeIqn)", "modifiers": "public", "return": "void", "signature": "void unexportVolume(String volumeId, String nodeIqn)", "full_signature": "public void unexportVolume(String volumeId, String nodeIqn)", "class_method_signature": "SANManager.unexportVolume(String volumeId, String nodeIqn)", "testcase": false, "constructor": false}, {"identifier": "checkReady", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkReady()", "full_signature": "public void checkReady()", "class_method_signature": "SANManager.checkReady()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "SANManager.stop()", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disable()", "full_signature": "public void disable()", "class_method_signature": "SANManager.disable()", "testcase": false, "constructor": false}, {"identifier": "enable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enable()", "full_signature": "public void enable()", "class_method_signature": "SANManager.enable()", "testcase": false, "constructor": false}, {"identifier": "getFromBackend", "parameters": "(String snapshotId, int size)", "modifiers": "public", "return": "boolean", "signature": "boolean getFromBackend(String snapshotId, int size)", "full_signature": "public boolean getFromBackend(String snapshotId, int size)", "class_method_signature": "SANManager.getFromBackend(String snapshotId, int size)", "testcase": false, "constructor": false}, {"identifier": "checkVolume", "parameters": "(String volumeId)", "modifiers": "public", "return": "void", "signature": "void checkVolume(String volumeId)", "full_signature": "public void checkVolume(String volumeId)", "class_method_signature": "SANManager.checkVolume(String volumeId)", "testcase": false, "constructor": false}, {"identifier": "getCheckers", "parameters": "()", "modifiers": "public", "return": "List<CheckerTask>", "signature": "List<CheckerTask> getCheckers()", "full_signature": "public List<CheckerTask> getCheckers()", "class_method_signature": "SANManager.getCheckers()", "testcase": false, "constructor": false}, {"identifier": "createSnapshotPoint", "parameters": "(String parentVolumeId, String volumeId)", "modifiers": "public", "return": "String", "signature": "String createSnapshotPoint(String parentVolumeId, String volumeId)", "full_signature": "public String createSnapshotPoint(String parentVolumeId, String volumeId)", "class_method_signature": "SANManager.createSnapshotPoint(String parentVolumeId, String volumeId)", "testcase": false, "constructor": false}, {"identifier": "deleteSnapshotPoint", "parameters": "(String parentVolumeId, String volumeId, String snapshotPointId)", "modifiers": "public", "return": "void", "signature": "void deleteSnapshotPoint(String parentVolumeId, String volumeId, String snapshotPointId)", "full_signature": "public void deleteSnapshotPoint(String parentVolumeId, String volumeId, String snapshotPointId)", "class_method_signature": "SANManager.deleteSnapshotPoint(String parentVolumeId, String volumeId, String snapshotPointId)", "testcase": false, "constructor": false}, {"identifier": "supportsIncrementalSnapshots", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsIncrementalSnapshots()", "full_signature": "@Override public boolean supportsIncrementalSnapshots()", "class_method_signature": "SANManager.supportsIncrementalSnapshots()", "testcase": false, "constructor": false}, {"identifier": "prepIncrementalSnapshotForUpload", "parameters": "(String volumeId, String snapshotId, String snapPointId, String prevSnapshotId,\n      String prevSnapPointId)", "modifiers": "@Override public", "return": "StorageResourceWithCallback", "signature": "StorageResourceWithCallback prepIncrementalSnapshotForUpload(String volumeId, String snapshotId, String snapPointId, String prevSnapshotId,\n      String prevSnapPointId)", "full_signature": "@Override public StorageResourceWithCallback prepIncrementalSnapshotForUpload(String volumeId, String snapshotId, String snapPointId, String prevSnapshotId,\n      String prevSnapPointId)", "class_method_signature": "SANManager.prepIncrementalSnapshotForUpload(String volumeId, String snapshotId, String snapPointId, String prevSnapshotId,\n      String prevSnapPointId)", "testcase": false, "constructor": false}, {"identifier": "prepSnapshotForUpload", "parameters": "(String volumeId, String snapshotId, String snapPointId)", "modifiers": "@Override public", "return": "StorageResource", "signature": "StorageResource prepSnapshotForUpload(String volumeId, String snapshotId, String snapPointId)", "full_signature": "@Override public StorageResource prepSnapshotForUpload(String volumeId, String snapshotId, String snapPointId)", "class_method_signature": "SANManager.prepSnapshotForUpload(String volumeId, String snapshotId, String snapPointId)", "testcase": false, "constructor": false}, {"identifier": "prepSnapshotBaseForRestore", "parameters": "(final String snapshotId, final int size, final String snapshotPointId)", "modifiers": "@Override public", "return": "StorageResourceWithCallback", "signature": "StorageResourceWithCallback prepSnapshotBaseForRestore(final String snapshotId, final int size, final String snapshotPointId)", "full_signature": "@Override public StorageResourceWithCallback prepSnapshotBaseForRestore(final String snapshotId, final int size, final String snapshotPointId)", "class_method_signature": "SANManager.prepSnapshotBaseForRestore(final String snapshotId, final int size, final String snapshotPointId)", "testcase": false, "constructor": false}, {"identifier": "restoreSnapshotDelta", "parameters": "(String currentSnapId, String prevSnapId, String baseId, StorageResource sr)", "modifiers": "@Override public", "return": "void", "signature": "void restoreSnapshotDelta(String currentSnapId, String prevSnapId, String baseId, StorageResource sr)", "full_signature": "@Override public void restoreSnapshotDelta(String currentSnapId, String prevSnapId, String baseId, StorageResource sr)", "class_method_signature": "SANManager.restoreSnapshotDelta(String currentSnapId, String prevSnapId, String baseId, StorageResource sr)", "testcase": false, "constructor": false}, {"identifier": "completeSnapshotRestorationFromDeltas", "parameters": "(String snapshotId)", "modifiers": "@Override public", "return": "void", "signature": "void completeSnapshotRestorationFromDeltas(String snapshotId)", "full_signature": "@Override public void completeSnapshotRestorationFromDeltas(String snapshotId)", "class_method_signature": "SANManager.completeSnapshotRestorationFromDeltas(String snapshotId)", "testcase": false, "constructor": false}, {"identifier": "executeCallback", "parameters": "(Function<F, T> callback, F input)", "modifiers": "@Override public", "return": "T", "signature": "T executeCallback(Function<F, T> callback, F input)", "full_signature": "@Override public T executeCallback(Function<F, T> callback, F input)", "class_method_signature": "SANManager.executeCallback(Function<F, T> callback, F input)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(String resourceId)", "modifiers": "private", "return": "SANVolumeInfo", "signature": "SANVolumeInfo lookup(String resourceId)", "full_signature": "private SANVolumeInfo lookup(String resourceId)", "class_method_signature": "SANManager.lookup(String resourceId)", "testcase": false, "constructor": false}], "file": "clc/modules/block-storage/src/main/java/com/eucalyptus/blockstorage/san/common/SANManager.java"}, "focal_method": {"identifier": "cloneVolume", "parameters": "(String volumeId, String parentVolumeId)", "modifiers": "public", "return": "void", "body": "public void cloneVolume(String volumeId, String parentVolumeId) throws EucalyptusCloudException {\n    String sanVolumeId = resourceIdOnSan(volumeId);\n    SANVolumeInfo volInfo = new SANVolumeInfo(volumeId);\n\n    // Look up source volume in the database and get the backend volume ID\n    SANVolumeInfo parentVolumeInfo = lookup(parentVolumeId);\n    String sanParentVolumeId = parentVolumeInfo.getSanVolumeId();\n    int size = parentVolumeInfo.getSize();\n\n    // Check to make sure that cloned volume does not already exist on the backend\n    try (TransactionResource tran = Entities.transactionFor(SANVolumeInfo.class)) {\n      SANVolumeInfo existingVol = Entities.uniqueResult(volInfo);\n      LOG.info(\"Checking for \" + existingVol.getSanVolumeId() + \" on backend\");\n      if (connectionManager.snapshotExists(existingVol.getSanVolumeId(), existingVol.getIqn())) {\n        throw new VolumeAlreadyExistsException(\"Existing resource found on backend for \" + existingVol.getSanVolumeId());\n      } else {\n        LOG.debug(\"Found database record but resource does not exist on backend. Deleting database record for \" + volumeId);\n        Entities.delete(existingVol);\n        tran.commit();\n      }\n    } catch (NoSuchElementException ex) {\n      // intentional no-op\n    } catch (VolumeAlreadyExistsException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new EucalyptusCloudException(ex);\n    }\n\n    try {\n      Transactions.save(volInfo.withSanVolumeId(sanVolumeId).withSize(size));\n    } catch (Exception ex) {\n      LOG.warn(\"Failed to persist database record for \" + volumeId, ex);\n      throw new EucalyptusCloudException(\"Failed to persist database record for \" + volumeId, ex);\n    }\n\n    LOG.info(\"Cloning \" + sanVolumeId + \" from \" + sanParentVolumeId + \" on backend\");\n    String iqn = connectionManager.cloneVolume(sanVolumeId, sanParentVolumeId, parentVolumeInfo.getIqn());\n    if (iqn != null) {\n      try (TransactionResource tran = Entities.transactionFor(SANVolumeInfo.class)) {\n        SANVolumeInfo existingVol = Entities.uniqueResult(volInfo);\n        existingVol.setIqn(iqn);\n        Entities.merge(existingVol);\n        tran.commit();\n      } catch (Exception ex) {\n        LOG.warn(\"Failed to update database record with IQN post creation for \" + volumeId);\n        throw new EucalyptusCloudException(\"Failed to update database record with IQN post creation for \" + volumeId, ex);\n      }\n    } else {\n      LOG.warn(\"Invalid IQN from backend for \" + sanVolumeId);\n      throw new EucalyptusCloudException(\"Failed to create \" + volumeId + \" due to invalid IQN from backend for \" + sanVolumeId);\n    }\n  }", "signature": "void cloneVolume(String volumeId, String parentVolumeId)", "full_signature": "public void cloneVolume(String volumeId, String parentVolumeId)", "class_method_signature": "SANManager.cloneVolume(String volumeId, String parentVolumeId)", "testcase": false, "constructor": false, "invocations": ["resourceIdOnSan", "lookup", "getSanVolumeId", "getSize", "transactionFor", "uniqueResult", "info", "getSanVolumeId", "snapshotExists", "getSanVolumeId", "getIqn", "getSanVolumeId", "debug", "delete", "commit", "save", "withSize", "withSanVolumeId", "warn", "info", "cloneVolume", "getIqn", "transactionFor", "uniqueResult", "setIqn", "merge", "commit", "warn", "warn"]}, "repository": {"repo_id": 1795594, "url": "https://github.com/eucalyptus/eucalyptus", "language": "Java", "is_fork": false, "fork_count": 250, "stargazer_count": 758, "size": 115651, "license": "licensed"}}