{"test_class": {"identifier": "S3V4AuthenticationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String V4_HEADER = \"AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20130524/us-east-1/s3/aws4_request, \" +\n      \"SignedHeaders=host;range;x-amz-date, Signature=fe5f80f77d5fa3beca038a248ff027d0445342fe2855ddc963176630326f1024\";", "modifier": "static", "type": "String", "declarator": "V4_HEADER = \"AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20130524/us-east-1/s3/aws4_request, \" +\n      \"SignedHeaders=host;range;x-amz-date, Signature=fe5f80f77d5fa3beca038a248ff027d0445342fe2855ddc963176630326f1024\"", "var_name": "V4_HEADER"}, {"original_string": "static String CANONICAL_HEADERS = \"date:Fri, 24 May 2013 00:00:00 GMT\\n\" + \"host:examplebucket.s3.amazonaws.com\\n\" +\n      \"x-amz-content-sha256:44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\\n\" + \"x-amz-date:20130524T000000Z\\n\" +\n      \"x-amz-storage-class:REDUCED_REDUNDANCY\\n\";", "modifier": "static", "type": "String", "declarator": "CANONICAL_HEADERS = \"date:Fri, 24 May 2013 00:00:00 GMT\\n\" + \"host:examplebucket.s3.amazonaws.com\\n\" +\n      \"x-amz-content-sha256:44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\\n\" + \"x-amz-date:20130524T000000Z\\n\" +\n      \"x-amz-storage-class:REDUCED_REDUNDANCY\\n\"", "var_name": "CANONICAL_HEADERS"}, {"original_string": "static String CANONICAL_QUERY_STRING = \"X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20130524%2Fus-east-1\"\n      + \"%2Fs3%2Faws4_request&X-Amz-Date=20130524T000000Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host\";", "modifier": "static", "type": "String", "declarator": "CANONICAL_QUERY_STRING = \"X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20130524%2Fus-east-1\"\n      + \"%2Fs3%2Faws4_request&X-Amz-Date=20130524T000000Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host\"", "var_name": "CANONICAL_QUERY_STRING"}, {"original_string": "static String CANONICAL_PRESIGNED_REQUEST = \"PUT\\n\" + \"/test.txt\\n\" +\n      \"X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20130524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date\" +\n      \"=20130524T000000Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host\\n\" + \"host:examplebucket.s3.amazonaws.com\\n\" + \"\\n\" + \"host\\n\" +\n      \"UNSIGNED-PAYLOAD\";", "modifier": "static", "type": "String", "declarator": "CANONICAL_PRESIGNED_REQUEST = \"PUT\\n\" + \"/test.txt\\n\" +\n      \"X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20130524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date\" +\n      \"=20130524T000000Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host\\n\" + \"host:examplebucket.s3.amazonaws.com\\n\" + \"\\n\" + \"host\\n\" +\n      \"UNSIGNED-PAYLOAD\"", "var_name": "CANONICAL_PRESIGNED_REQUEST"}, {"original_string": "static String CANONICAL_HEADERS_REQUEST = \"PUT\\n\" + \"/test$file.text\\n\" + \"\\n\" + \"date:Fri, 24 May 2013 00:00:00 GMT\\n\" +\n      \"host:examplebucket.s3.amazonaws.com\\n\" + \"x-amz-content-sha256:44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\\n\"\n      + \"x-amz-date:20130524T000000Z\\n\" + \"x-amz-storage-class:REDUCED_REDUNDANCY\\n\\n\" + \"date;host;x-amz-content-sha256;x-amz-date;\" +\n      \"x-amz-storage-class\\n\" + \"44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\";", "modifier": "static", "type": "String", "declarator": "CANONICAL_HEADERS_REQUEST = \"PUT\\n\" + \"/test$file.text\\n\" + \"\\n\" + \"date:Fri, 24 May 2013 00:00:00 GMT\\n\" +\n      \"host:examplebucket.s3.amazonaws.com\\n\" + \"x-amz-content-sha256:44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\\n\"\n      + \"x-amz-date:20130524T000000Z\\n\" + \"x-amz-storage-class:REDUCED_REDUNDANCY\\n\\n\" + \"date;host;x-amz-content-sha256;x-amz-date;\" +\n      \"x-amz-storage-class\\n\" + \"44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\"", "var_name": "CANONICAL_HEADERS_REQUEST"}, {"original_string": "static String SIGNED_HEADERS = \"date;host;x-amz-content-sha256;x-amz-date;x-amz-storage-class\";", "modifier": "static", "type": "String", "declarator": "SIGNED_HEADERS = \"date;host;x-amz-content-sha256;x-amz-date;x-amz-storage-class\"", "var_name": "SIGNED_HEADERS"}, {"original_string": "MappingHttpRequest headersRequest;", "modifier": "", "type": "MappingHttpRequest", "declarator": "headersRequest", "var_name": "headersRequest"}, {"original_string": "MappingHttpRequest paramsRequest;", "modifier": "", "type": "MappingHttpRequest", "declarator": "paramsRequest", "var_name": "paramsRequest"}], "file": "clc/modules/object-storage/src/test/java/com/eucalyptus/objectstorage/pipeline/auth/S3V4AuthenticationTest.java"}, "test_case": {"identifier": "testBuildAndVerifyPayloadHash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBuildAndVerifyPayloadHash() throws Throwable {\n    // Unsigned\n    MappingHttpRequest request = new MappingHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.PUT, \"/test$file.text\");\n    request.addHeader(\"x-amz-content-sha256\", \"UNSIGNED-PAYLOAD\");\n    String result = S3V4Authentication.getUnverifiedPayloadHash(request);\n    assertEquals(\"UNSIGNED-PAYLOAD\", result);\n\n    // Signed\n    request = new MappingHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.PUT, \"/test$file.text\");\n    request.addHeader(\"x-amz-content-sha256\", \"44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\");\n    request.setContent(ChannelBuffers.copiedBuffer(\"Welcome to Amazon S3.\", Charset.defaultCharset()));\n    result = S3V4Authentication.getUnverifiedPayloadHash(request);\n    assertEquals(\"44ce7dd67c959e0d3524ffac1771dfbba87d2b6b4b4e99e42034a8b803f8b072\", result);\n\n    // Chunked\n    request = new MappingHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.PUT, \"/test$file.text\");\n    request.addHeader(\"x-amz-content-sha256\", \"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\");\n    result = S3V4Authentication.getUnverifiedPayloadHash(request);\n    assertEquals(\"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\", result);\n  }", "signature": "void testBuildAndVerifyPayloadHash()", "full_signature": "@Test public void testBuildAndVerifyPayloadHash()", "class_method_signature": "S3V4AuthenticationTest.testBuildAndVerifyPayloadHash()", "testcase": true, "constructor": false, "invocations": ["addHeader", "getUnverifiedPayloadHash", "assertEquals", "addHeader", "setContent", "copiedBuffer", "defaultCharset", "getUnverifiedPayloadHash", "assertEquals", "addHeader", "getUnverifiedPayloadHash", "assertEquals"]}, "focal_class": {"identifier": "S3V4Authentication", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(S3V4Authentication.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(S3V4Authentication.class)", "var_name": "LOG"}, {"original_string": "private static final Splitter CSV_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();", "modifier": "private static final", "type": "Splitter", "declarator": "CSV_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings()", "var_name": "CSV_SPLITTER"}, {"original_string": "private static final Splitter NVP_SPLITTER = Splitter.on('=').limit(2).trimResults().omitEmptyStrings();", "modifier": "private static final", "type": "Splitter", "declarator": "NVP_SPLITTER = Splitter.on('=').limit(2).trimResults().omitEmptyStrings()", "var_name": "NVP_SPLITTER"}, {"original_string": "private static final String AWS_V4_TERMINATOR = \"aws4_request\";", "modifier": "private static final", "type": "String", "declarator": "AWS_V4_TERMINATOR = \"aws4_request\"", "var_name": "AWS_V4_TERMINATOR"}, {"original_string": "public static final String AWS_V4_AUTH_TYPE = \"AWS4-HMAC-SHA256\";", "modifier": "public static final", "type": "String", "declarator": "AWS_V4_AUTH_TYPE = \"AWS4-HMAC-SHA256\"", "var_name": "AWS_V4_AUTH_TYPE"}, {"original_string": "public static final String AWS_CONTENT_SHA_HEADER = \"x-amz-content-sha256\";", "modifier": "public static final", "type": "String", "declarator": "AWS_CONTENT_SHA_HEADER = \"x-amz-content-sha256\"", "var_name": "AWS_CONTENT_SHA_HEADER"}, {"original_string": "public static final String AWS_EXPIRES_PARAM = \"x-amz-expires\";", "modifier": "public static final", "type": "String", "declarator": "AWS_EXPIRES_PARAM = \"x-amz-expires\"", "var_name": "AWS_EXPIRES_PARAM"}, {"original_string": "public static final String AWS_DECODED_CONTENT_LEN = \"x-amz-decoded-content-length\";", "modifier": "public static final", "type": "String", "declarator": "AWS_DECODED_CONTENT_LEN = \"x-amz-decoded-content-length\"", "var_name": "AWS_DECODED_CONTENT_LEN"}, {"original_string": "public static final String STREAMING_PAYLOAD = \"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\";", "modifier": "public static final", "type": "String", "declarator": "STREAMING_PAYLOAD = \"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\"", "var_name": "STREAMING_PAYLOAD"}, {"original_string": "private static final String STREAMING_PAYLOAD_CHUNK_PREFIX = \"AWS4-HMAC-SHA256-PAYLOAD\";", "modifier": "private static final", "type": "String", "declarator": "STREAMING_PAYLOAD_CHUNK_PREFIX = \"AWS4-HMAC-SHA256-PAYLOAD\"", "var_name": "STREAMING_PAYLOAD_CHUNK_PREFIX"}, {"original_string": "public static final String UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";", "modifier": "public static final", "type": "String", "declarator": "UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\"", "var_name": "UNSIGNED_PAYLOAD"}], "methods": [{"identifier": "S3V4Authentication", "parameters": "()", "modifiers": "private", "return": "", "signature": " S3V4Authentication()", "full_signature": "private  S3V4Authentication()", "class_method_signature": "S3V4Authentication.S3V4Authentication()", "testcase": false, "constructor": true}, {"identifier": "login", "parameters": "(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature, String\n      securityToken, String payloadHash)", "modifiers": "static", "return": "void", "signature": "void login(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature, String\n      securityToken, String payloadHash)", "full_signature": "static void login(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature, String\n      securityToken, String payloadHash)", "class_method_signature": "S3V4Authentication.login(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature, String\n      securityToken, String payloadHash)", "testcase": false, "constructor": false}, {"identifier": "loginChunk", "parameters": "(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature,\n                         String securityToken, String previousSignature, ByteBuffer payload)", "modifiers": "static", "return": "void", "signature": "void loginChunk(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature,\n                         String securityToken, String previousSignature, ByteBuffer payload)", "full_signature": "static void loginChunk(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature,\n                         String securityToken, String previousSignature, ByteBuffer payload)", "class_method_signature": "S3V4Authentication.loginChunk(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders, String signature,\n                         String securityToken, String previousSignature, ByteBuffer payload)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(MappingHttpRequest request, String accessKeyId, ObjectStorageWrappedCredentials creds)", "modifiers": "static", "return": "void", "signature": "void login(MappingHttpRequest request, String accessKeyId, ObjectStorageWrappedCredentials creds)", "full_signature": "static void login(MappingHttpRequest request, String accessKeyId, ObjectStorageWrappedCredentials creds)", "class_method_signature": "S3V4Authentication.login(MappingHttpRequest request, String accessKeyId, ObjectStorageWrappedCredentials creds)", "testcase": false, "constructor": false}, {"identifier": "buildStringToSign", "parameters": "(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders,\n                                          String payloadHash)", "modifiers": "private static", "return": "String", "signature": "String buildStringToSign(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders,\n                                          String payloadHash)", "full_signature": "private static String buildStringToSign(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders,\n                                          String payloadHash)", "class_method_signature": "S3V4Authentication.buildStringToSign(MappingHttpRequest request, Date date, SignatureCredential credential, String signedHeaders,\n                                          String payloadHash)", "testcase": false, "constructor": false}, {"identifier": "buildStringToSign", "parameters": "(Date date, SignatureCredential credential, CharSequence canonicalRequest)", "modifiers": "private static", "return": "String", "signature": "String buildStringToSign(Date date, SignatureCredential credential, CharSequence canonicalRequest)", "full_signature": "private static String buildStringToSign(Date date, SignatureCredential credential, CharSequence canonicalRequest)", "class_method_signature": "S3V4Authentication.buildStringToSign(Date date, SignatureCredential credential, CharSequence canonicalRequest)", "testcase": false, "constructor": false}, {"identifier": "buildChunkStringToSign", "parameters": "(Date date, SignatureCredential credential, String previousSignature, ByteBuffer payload)", "modifiers": "private static", "return": "String", "signature": "String buildChunkStringToSign(Date date, SignatureCredential credential, String previousSignature, ByteBuffer payload)", "full_signature": "private static String buildChunkStringToSign(Date date, SignatureCredential credential, String previousSignature, ByteBuffer payload)", "class_method_signature": "S3V4Authentication.buildChunkStringToSign(Date date, SignatureCredential credential, String previousSignature, ByteBuffer payload)", "testcase": false, "constructor": false}, {"identifier": "buildCanonicalRequest", "parameters": "(MappingHttpRequest request, String signedHeaders, String payloadHash)", "modifiers": "static", "return": "StringBuilder", "signature": "StringBuilder buildCanonicalRequest(MappingHttpRequest request, String signedHeaders, String payloadHash)", "full_signature": "static StringBuilder buildCanonicalRequest(MappingHttpRequest request, String signedHeaders, String payloadHash)", "class_method_signature": "S3V4Authentication.buildCanonicalRequest(MappingHttpRequest request, String signedHeaders, String payloadHash)", "testcase": false, "constructor": false}, {"identifier": "buildCanonicalResourcePath", "parameters": "(String path)", "modifiers": "static", "return": "String", "signature": "String buildCanonicalResourcePath(String path)", "full_signature": "static String buildCanonicalResourcePath(String path)", "class_method_signature": "S3V4Authentication.buildCanonicalResourcePath(String path)", "testcase": false, "constructor": false}, {"identifier": "buildCanonicalQueryString", "parameters": "(Map<String,String> parameters, StringBuilder sb)", "modifiers": "static", "return": "void", "signature": "void buildCanonicalQueryString(Map<String,String> parameters, StringBuilder sb)", "full_signature": "static void buildCanonicalQueryString(Map<String,String> parameters, StringBuilder sb)", "class_method_signature": "S3V4Authentication.buildCanonicalQueryString(Map<String,String> parameters, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "buildCanonicalHeaders", "parameters": "(MappingHttpRequest request, String signedHeaders, StringBuilder sb)", "modifiers": "static", "return": "void", "signature": "void buildCanonicalHeaders(MappingHttpRequest request, String signedHeaders, StringBuilder sb)", "full_signature": "static void buildCanonicalHeaders(MappingHttpRequest request, String signedHeaders, StringBuilder sb)", "class_method_signature": "S3V4Authentication.buildCanonicalHeaders(MappingHttpRequest request, String signedHeaders, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "getUnverifiedPayloadHash", "parameters": "( final MappingHttpRequest request)", "modifiers": "static", "return": "String", "signature": "String getUnverifiedPayloadHash( final MappingHttpRequest request)", "full_signature": "static String getUnverifiedPayloadHash( final MappingHttpRequest request)", "class_method_signature": "S3V4Authentication.getUnverifiedPayloadHash( final MappingHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "getDateFromParams", "parameters": "(Map<String, String> parameters)", "modifiers": "static", "return": "String", "signature": "String getDateFromParams(Map<String, String> parameters)", "full_signature": "static String getDateFromParams(Map<String, String> parameters)", "class_method_signature": "S3V4Authentication.getDateFromParams(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateExpiresFromParams", "parameters": "(Map<String, String> parameters, Date date)", "modifiers": "static", "return": "void", "signature": "void validateExpiresFromParams(Map<String, String> parameters, Date date)", "full_signature": "static void validateExpiresFromParams(Map<String, String> parameters, Date date)", "class_method_signature": "S3V4Authentication.validateExpiresFromParams(Map<String, String> parameters, Date date)", "testcase": false, "constructor": false}, {"identifier": "getAndVerifyDecodedContentLength", "parameters": "(MappingHttpRequest request, String contentSha)", "modifiers": "static", "return": "Long", "signature": "Long getAndVerifyDecodedContentLength(MappingHttpRequest request, String contentSha)", "full_signature": "static Long getAndVerifyDecodedContentLength(MappingHttpRequest request, String contentSha)", "class_method_signature": "S3V4Authentication.getAndVerifyDecodedContentLength(MappingHttpRequest request, String contentSha)", "testcase": false, "constructor": false}, {"identifier": "getAndVerifyCredential", "parameters": "(Date date, String credentialStr)", "modifiers": "static", "return": "SignatureCredential", "signature": "SignatureCredential getAndVerifyCredential(Date date, String credentialStr)", "full_signature": "static SignatureCredential getAndVerifyCredential(Date date, String credentialStr)", "class_method_signature": "S3V4Authentication.getAndVerifyCredential(Date date, String credentialStr)", "testcase": false, "constructor": false}, {"identifier": "getV4AuthComponents", "parameters": "(String authHeader)", "modifiers": "static", "return": "Map<V4AuthComponent, String>", "signature": "Map<V4AuthComponent, String> getV4AuthComponents(String authHeader)", "full_signature": "static Map<V4AuthComponent, String> getV4AuthComponents(String authHeader)", "class_method_signature": "S3V4Authentication.getV4AuthComponents(String authHeader)", "testcase": false, "constructor": false}], "file": "clc/modules/object-storage/src/main/java/com/eucalyptus/objectstorage/pipeline/auth/S3V4Authentication.java"}, "focal_method": {"identifier": "getUnverifiedPayloadHash", "parameters": "( final MappingHttpRequest request)", "modifiers": "static", "return": "String", "body": "static String getUnverifiedPayloadHash( final MappingHttpRequest request) throws AccessDeniedException {\n    final String contentShaHeader = request.getHeader(S3V4Authentication.AWS_CONTENT_SHA_HEADER);\n    if ( !Strings.isNullOrEmpty(contentShaHeader) ) {\n      if ( !STREAMING_PAYLOAD.equals(contentShaHeader) && !UNSIGNED_PAYLOAD.equals(contentShaHeader) ) {\n        final byte[] binSha256 = BaseEncoding.base16( ).lowerCase( ).decode( contentShaHeader );\n        if ( binSha256.length != 32 ) {\n          throw new AccessDeniedException(null, \"x-amz-content-sha256 header is invalid.\");\n        }\n      }\n    } else {\n      throw new AccessDeniedException( null, \"x-amz-content-sha256 header is missing.\" );\n    }\n    return contentShaHeader;\n  }", "signature": "String getUnverifiedPayloadHash( final MappingHttpRequest request)", "full_signature": "static String getUnverifiedPayloadHash( final MappingHttpRequest request)", "class_method_signature": "S3V4Authentication.getUnverifiedPayloadHash( final MappingHttpRequest request)", "testcase": false, "constructor": false, "invocations": ["getHeader", "isNullOrEmpty", "equals", "equals", "decode", "lowerCase", "base16"]}, "repository": {"repo_id": 1795594, "url": "https://github.com/eucalyptus/eucalyptus", "language": "Java", "is_fork": false, "fork_count": 250, "stargazer_count": 758, "size": 115651, "license": "licensed"}}