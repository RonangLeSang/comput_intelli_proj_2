{"test_class": {"identifier": "ISCSIManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public JUnitRuleMockery context = new JUnitRuleMockery();", "modifier": "@Rule\n  public", "type": "JUnitRuleMockery", "declarator": "context = new JUnitRuleMockery()", "var_name": "context"}], "file": "clc/modules/block-storage/src/test/java/com/eucalyptus/blockstorage/ISCSIManagerTest.java"}, "test_case": {"identifier": "configure_YesDbUserAndYesTGTUserTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void configure_YesDbUserAndYesTGTUserTest() throws Exception {\n\n    final Long timeout = DirectStorageInfo.getStorageInfo().getTimeoutInMillis();\n    final TGTService tgtService = context.mock(TGTService.class);\n    final BlockStorageUtilSvc blockStorageUtilSvc = context.mock(BlockStorageUtilSvc.class);\n    context.checking(new Expectations() {\n      {\n        oneOf(tgtService).userExists(\"eucalyptus\", timeout);\n        will(returnValue(Boolean.TRUE));\n      }\n    });\n\n    try (TransactionResource tran = Entities.transactionFor(CHAPUserInfo.class)) {\n      Entities.persist(new CHAPUserInfo(\"eucalyptus\", \"foo\"));\n      tran.commit();\n    }\n\n    ISCSIManager iscsiManager = new ISCSIManager(tgtService, blockStorageUtilSvc);\n    iscsiManager.configure();\n\n    List<ISCSIMetaInfo> remaining;\n    try (TransactionResource tran = Entities.transactionFor(ISCSIMetaInfo.class)) {\n      remaining = Entities.query(new ISCSIMetaInfo());\n      tran.commit();\n    }\n\n    // make sure the meta info was created\n    assertTrue(\"expected to have a result set querying the eucalyptus_storage persistence context\", remaining != null);\n    ISCSIMetaInfo retrieved = remaining.get(0);\n    assertTrue(\"expected store prefix to be \" + StorageProperties.STORE_PREFIX + \" but it was \" + retrieved.getStorePrefix(),\n        StorageProperties.STORE_PREFIX.equals(retrieved.getStorePrefix()));\n    assertTrue(\"expected store number to be 0 but it was \" + retrieved.getStoreNumber().intValue(), retrieved.getStoreNumber().intValue() == 0);\n    assertTrue(\"expected store user to be eucalyptus, but it was \" + retrieved.getStoreUser(), \"eucalyptus\".equals(retrieved.getStoreUser()));\n    assertTrue(\"expected tid to be 1, but it was \" + retrieved.getTid().intValue(), 1 == retrieved.getTid().intValue());\n\n    // make sure chap user was created\n    CHAPUserInfo example = new CHAPUserInfo(\"eucalyptus\");\n    example.setScName(StorageProperties.NAME);\n    try (TransactionResource tran = Entities.transactionFor(CHAPUserInfo.class)) {\n      example = Entities.uniqueResult(example);\n      tran.commit();\n    } catch (Exception ex) {\n      fail(\"exception caught while looking for CHAPUserInfo record - \" + ex.getMessage());\n      ex.printStackTrace();\n    }\n    assertTrue(\"expected chap user info to be non-null\", example != null);\n    assertTrue(\"expected eucalyptus chap user info to be created\", \"eucalyptus\".equals(example.getUser()));\n  }", "signature": "void configure_YesDbUserAndYesTGTUserTest()", "full_signature": "@Test public void configure_YesDbUserAndYesTGTUserTest()", "class_method_signature": "ISCSIManagerTest.configure_YesDbUserAndYesTGTUserTest()", "testcase": true, "constructor": false, "invocations": ["getTimeoutInMillis", "getStorageInfo", "mock", "mock", "checking", "userExists", "oneOf", "will", "returnValue", "transactionFor", "persist", "commit", "configure", "transactionFor", "query", "commit", "assertTrue", "get", "assertTrue", "getStorePrefix", "equals", "getStorePrefix", "assertTrue", "intValue", "getStoreNumber", "intValue", "getStoreNumber", "assertTrue", "getStoreUser", "equals", "getStoreUser", "assertTrue", "intValue", "getTid", "intValue", "getTid", "setScName", "transactionFor", "uniqueResult", "commit", "fail", "getMessage", "printStackTrace", "assertTrue", "assertTrue", "equals", "getUser"]}, "focal_class": {"identifier": "ISCSIManager", "superclass": "", "interfaces": "implements StorageExportManager", "fields": [{"original_string": "private static Logger LOG = Logger.getLogger(ISCSIManager.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = Logger.getLogger(ISCSIManager.class)", "var_name": "LOG"}, {"original_string": "protected TGTService tgtService;", "modifier": "protected", "type": "TGTService", "declarator": "tgtService", "var_name": "tgtService"}, {"original_string": "protected BlockStorageUtilSvc blockStorageUtilSvc;", "modifier": "protected", "type": "BlockStorageUtilSvc", "declarator": "blockStorageUtilSvc", "var_name": "blockStorageUtilSvc"}], "methods": [{"identifier": "ISCSIManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " ISCSIManager()", "full_signature": "public  ISCSIManager()", "class_method_signature": "ISCSIManager.ISCSIManager()", "testcase": false, "constructor": true}, {"identifier": "ISCSIManager", "parameters": "(TGTService tgtService, BlockStorageUtilSvc blockStorageUtilSvc)", "modifiers": "public", "return": "", "signature": " ISCSIManager(TGTService tgtService, BlockStorageUtilSvc blockStorageUtilSvc)", "full_signature": "public  ISCSIManager(TGTService tgtService, BlockStorageUtilSvc blockStorageUtilSvc)", "class_method_signature": "ISCSIManager.ISCSIManager(TGTService tgtService, BlockStorageUtilSvc blockStorageUtilSvc)", "testcase": false, "constructor": true}, {"identifier": "checkPreconditions", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void checkPreconditions()", "full_signature": "@Override public void checkPreconditions()", "class_method_signature": "ISCSIManager.checkPreconditions()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void check()", "full_signature": "@Override public void check()", "class_method_signature": "ISCSIManager.check()", "testcase": false, "constructor": false}, {"identifier": "addUser", "parameters": "(String username, String password)", "modifiers": "public", "return": "void", "signature": "void addUser(String username, String password)", "full_signature": "public void addUser(String username, String password)", "class_method_signature": "ISCSIManager.addUser(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(String username)", "modifiers": "public", "return": "void", "signature": "void deleteUser(String username)", "full_signature": "public void deleteUser(String username)", "class_method_signature": "ISCSIManager.deleteUser(String username)", "testcase": false, "constructor": false}, {"identifier": "exportTarget", "parameters": "(String volumeId, int tid, String name, int lun, String path, String user)", "modifiers": "public", "return": "void", "signature": "void exportTarget(String volumeId, int tid, String name, int lun, String path, String user)", "full_signature": "public void exportTarget(String volumeId, int tid, String name, int lun, String path, String user)", "class_method_signature": "ISCSIManager.exportTarget(String volumeId, int tid, String name, int lun, String path, String user)", "testcase": false, "constructor": false}, {"identifier": "unexportTarget", "parameters": "(String volumeId, int tid, int lun, String path)", "modifiers": "public", "return": "void", "signature": "void unexportTarget(String volumeId, int tid, int lun, String path)", "full_signature": "public void unexportTarget(String volumeId, int tid, int lun, String path)", "class_method_signature": "ISCSIManager.unexportTarget(String volumeId, int tid, int lun, String path)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "ISCSIManager.configure()", "testcase": false, "constructor": false}, {"identifier": "checkAndAddUser", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkAndAddUser()", "full_signature": "private void checkAndAddUser()", "class_method_signature": "ISCSIManager.checkAndAddUser()", "testcase": false, "constructor": false}, {"identifier": "allocateTarget", "parameters": "(LVMVolumeInfo volumeInfo)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void allocateTarget(LVMVolumeInfo volumeInfo)", "full_signature": "@Override public synchronized void allocateTarget(LVMVolumeInfo volumeInfo)", "class_method_signature": "ISCSIManager.allocateTarget(LVMVolumeInfo volumeInfo)", "testcase": false, "constructor": false}, {"identifier": "checkUser", "parameters": "(String username)", "modifiers": "private", "return": "boolean", "signature": "boolean checkUser(String username)", "full_signature": "private boolean checkUser(String username)", "class_method_signature": "ISCSIManager.checkUser(String username)", "testcase": false, "constructor": false}, {"identifier": "getEncryptedPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncryptedPassword()", "full_signature": "public String getEncryptedPassword()", "class_method_signature": "ISCSIManager.getEncryptedPassword()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(LVMVolumeInfo volumeInfo)", "modifiers": "public", "return": "void", "signature": "void cleanup(LVMVolumeInfo volumeInfo)", "full_signature": "public void cleanup(LVMVolumeInfo volumeInfo)", "class_method_signature": "ISCSIManager.cleanup(LVMVolumeInfo volumeInfo)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "ISCSIManager.stop()", "testcase": false, "constructor": false}, {"identifier": "isExported", "parameters": "(LVMVolumeInfo volumeInfo)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isExported(LVMVolumeInfo volumeInfo)", "full_signature": "@Override public boolean isExported(LVMVolumeInfo volumeInfo)", "class_method_signature": "ISCSIManager.isExported(LVMVolumeInfo volumeInfo)", "testcase": false, "constructor": false}], "file": "clc/modules/block-storage/src/main/java/com/eucalyptus/blockstorage/ISCSIManager.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void configure() {\n    ISCSIMetaInfo metaInfo = new ISCSIMetaInfo(StorageProperties.NAME);\n    try (TransactionResource tran = Entities.transactionFor(ISCSIMetaInfo.class)) {\n      List<ISCSIMetaInfo> metaInfoList = Entities.query(metaInfo);\n      if (metaInfoList.size() <= 0) {\n        Entities.persist(metaInfo.init());\n        tran.commit();\n      }\n    } catch (Exception e) {\n      LOG.error(e);\n    }\n    checkAndAddUser();\n  }", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "ISCSIManager.configure()", "testcase": false, "constructor": false, "invocations": ["transactionFor", "query", "size", "persist", "init", "commit", "error", "checkAndAddUser"]}, "repository": {"repo_id": 1795594, "url": "https://github.com/eucalyptus/eucalyptus", "language": "Java", "is_fork": false, "fork_count": 250, "stargazer_count": 758, "size": 115651, "license": "licensed"}}