{"test_class": {"identifier": "UpdaterTest", "superclass": "extends LocalVcsTestCase", "interfaces": "", "fields": [{"original_string": "LocalVcs vcs = new InMemoryLocalVcs();", "modifier": "", "type": "LocalVcs", "declarator": "vcs = new InMemoryLocalVcs()", "var_name": "vcs"}, {"original_string": "TestIdeaGateway gw = new TestIdeaGateway();", "modifier": "", "type": "TestIdeaGateway", "declarator": "gw = new TestIdeaGateway()", "var_name": "gw"}, {"original_string": "TestFileFilter filter = (TestFileFilter)gw.getFileFilter();", "modifier": "", "type": "TestFileFilter", "declarator": "filter = (TestFileFilter)gw.getFileFilter()", "var_name": "filter"}], "file": "platform/lvcs-impl/testSrc/com/intellij/history/integration/UpdaterTest.java"}, "test_case": {"identifier": "testSelectingOnlyUniqueRoots", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSelectingOnlyUniqueRoots() {\n    VirtualFile root = new TestVirtualFile(\"root\");\n    Updater u = new Updater(vcs, gw);\n    VirtualFile[] result = u.selectParentlessRootsAndSort(list(root, root));\n    assertArrayEquals(array(root), result);\n  }", "signature": "void testSelectingOnlyUniqueRoots()", "full_signature": "@Test public void testSelectingOnlyUniqueRoots()", "class_method_signature": "UpdaterTest.testSelectingOnlyUniqueRoots()", "testcase": true, "constructor": false, "invocations": ["selectParentlessRootsAndSort", "list", "assertArrayEquals", "array"]}, "focal_class": {"identifier": "Updater", "superclass": "", "interfaces": "implements CacheUpdater", "fields": [{"original_string": "private final LocalVcs myVcs;", "modifier": "private final", "type": "LocalVcs", "declarator": "myVcs", "var_name": "myVcs"}, {"original_string": "private final IdeaGateway myGateway;", "modifier": "private final", "type": "IdeaGateway", "declarator": "myGateway", "var_name": "myGateway"}, {"original_string": "private final VirtualFile[] myVfsRoots;", "modifier": "private final", "type": "VirtualFile[]", "declarator": "myVfsRoots", "var_name": "myVfsRoots"}, {"original_string": "private final CacheUpdaterProcessor myProcessor;", "modifier": "private final", "type": "CacheUpdaterProcessor", "declarator": "myProcessor", "var_name": "myProcessor"}], "methods": [{"identifier": "Updater", "parameters": "(LocalVcs vcs, IdeaGateway gw)", "modifiers": "public", "return": "", "signature": " Updater(LocalVcs vcs, IdeaGateway gw)", "full_signature": "public  Updater(LocalVcs vcs, IdeaGateway gw)", "class_method_signature": "Updater.Updater(LocalVcs vcs, IdeaGateway gw)", "testcase": false, "constructor": true}, {"identifier": "selectParentlessRootsAndSort", "parameters": "(List<VirtualFile> roots)", "modifiers": "protected", "return": "VirtualFile[]", "signature": "VirtualFile[] selectParentlessRootsAndSort(List<VirtualFile> roots)", "full_signature": "protected VirtualFile[] selectParentlessRootsAndSort(List<VirtualFile> roots)", "class_method_signature": "Updater.selectParentlessRootsAndSort(List<VirtualFile> roots)", "testcase": false, "constructor": false}, {"identifier": "sortRoots", "parameters": "(List<VirtualFile> roots)", "modifiers": "private static", "return": "void", "signature": "void sortRoots(List<VirtualFile> roots)", "full_signature": "private static void sortRoots(List<VirtualFile> roots)", "class_method_signature": "Updater.sortRoots(List<VirtualFile> roots)", "testcase": false, "constructor": false}, {"identifier": "parentIsNotUnderContentRoot", "parameters": "(VirtualFile r)", "modifiers": "private", "return": "boolean", "signature": "boolean parentIsNotUnderContentRoot(VirtualFile r)", "full_signature": "private boolean parentIsNotUnderContentRoot(VirtualFile r)", "class_method_signature": "Updater.parentIsNotUnderContentRoot(VirtualFile r)", "testcase": false, "constructor": false}, {"identifier": "queryNeededFiles", "parameters": "()", "modifiers": "public", "return": "VirtualFile[]", "signature": "VirtualFile[] queryNeededFiles()", "full_signature": "public VirtualFile[] queryNeededFiles()", "class_method_signature": "Updater.queryNeededFiles()", "testcase": false, "constructor": false}, {"identifier": "processFile", "parameters": "(FileContent c)", "modifiers": "public", "return": "void", "signature": "void processFile(FileContent c)", "full_signature": "public void processFile(FileContent c)", "class_method_signature": "Updater.processFile(FileContent c)", "testcase": false, "constructor": false}, {"identifier": "updatingDone", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updatingDone()", "full_signature": "public void updatingDone()", "class_method_signature": "Updater.updatingDone()", "testcase": false, "constructor": false}, {"identifier": "canceled", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void canceled()", "full_signature": "public void canceled()", "class_method_signature": "Updater.canceled()", "testcase": false, "constructor": false}, {"identifier": "deleteObsoleteRoots", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteObsoleteRoots()", "full_signature": "private void deleteObsoleteRoots()", "class_method_signature": "Updater.deleteObsoleteRoots()", "testcase": false, "constructor": false}, {"identifier": "hasVfsRoot", "parameters": "(Entry e)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVfsRoot(Entry e)", "full_signature": "private boolean hasVfsRoot(Entry e)", "class_method_signature": "Updater.hasVfsRoot(Entry e)", "testcase": false, "constructor": false}, {"identifier": "createAndUpdateRoots", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createAndUpdateRoots()", "full_signature": "private void createAndUpdateRoots()", "class_method_signature": "Updater.createAndUpdateRoots()", "testcase": false, "constructor": false}, {"identifier": "hasVcsRoot", "parameters": "(VirtualFile f)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVcsRoot(VirtualFile f)", "full_signature": "private boolean hasVcsRoot(VirtualFile f)", "class_method_signature": "Updater.hasVcsRoot(VirtualFile f)", "testcase": false, "constructor": false}, {"identifier": "updateRecursively", "parameters": "(Entry entry, VirtualFile dir)", "modifiers": "private", "return": "void", "signature": "void updateRecursively(Entry entry, VirtualFile dir)", "full_signature": "private void updateRecursively(Entry entry, VirtualFile dir)", "class_method_signature": "Updater.updateRecursively(Entry entry, VirtualFile dir)", "testcase": false, "constructor": false}, {"identifier": "sameKind", "parameters": "(Entry e, VirtualFile f)", "modifiers": "private static", "return": "boolean", "signature": "boolean sameKind(Entry e, VirtualFile f)", "full_signature": "private static boolean sameKind(Entry e, VirtualFile f)", "class_method_signature": "Updater.sameKind(Entry e, VirtualFile f)", "testcase": false, "constructor": false}, {"identifier": "deleteObsoleteFiles", "parameters": "(Entry entry, VirtualFile dir)", "modifiers": "private", "return": "void", "signature": "void deleteObsoleteFiles(Entry entry, VirtualFile dir)", "full_signature": "private void deleteObsoleteFiles(Entry entry, VirtualFile dir)", "class_method_signature": "Updater.deleteObsoleteFiles(Entry entry, VirtualFile dir)", "testcase": false, "constructor": false}, {"identifier": "createRecursively", "parameters": "(VirtualFile fileOrDir)", "modifiers": "private", "return": "void", "signature": "void createRecursively(VirtualFile fileOrDir)", "full_signature": "private void createRecursively(VirtualFile fileOrDir)", "class_method_signature": "Updater.createRecursively(VirtualFile fileOrDir)", "testcase": false, "constructor": false}, {"identifier": "notAllowed", "parameters": "(VirtualFile f)", "modifiers": "private", "return": "boolean", "signature": "boolean notAllowed(VirtualFile f)", "full_signature": "private boolean notAllowed(VirtualFile f)", "class_method_signature": "Updater.notAllowed(VirtualFile f)", "testcase": false, "constructor": false}, {"identifier": "checkDoesNotExist", "parameters": "(VirtualFile f)", "modifiers": "private", "return": "boolean", "signature": "boolean checkDoesNotExist(VirtualFile f)", "full_signature": "private boolean checkDoesNotExist(VirtualFile f)", "class_method_signature": "Updater.checkDoesNotExist(VirtualFile f)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(StringBuilder b, String title, VirtualFile[] roots)", "modifiers": "private static", "return": "void", "signature": "void log(StringBuilder b, String title, VirtualFile[] roots)", "full_signature": "private static void log(StringBuilder b, String title, VirtualFile[] roots)", "class_method_signature": "Updater.log(StringBuilder b, String title, VirtualFile[] roots)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(StringBuilder b, String title, List<Entry> roots)", "modifiers": "private static", "return": "void", "signature": "void log(StringBuilder b, String title, List<Entry> roots)", "full_signature": "private static void log(StringBuilder b, String title, List<Entry> roots)", "class_method_signature": "Updater.log(StringBuilder b, String title, List<Entry> roots)", "testcase": false, "constructor": false}], "file": "platform/lvcs-impl/src/com/intellij/history/integration/Updater.java"}, "focal_method": {"identifier": "selectParentlessRootsAndSort", "parameters": "(List<VirtualFile> roots)", "modifiers": "protected", "return": "VirtualFile[]", "body": "protected VirtualFile[] selectParentlessRootsAndSort(List<VirtualFile> roots) {\n    List<VirtualFile> result = new ArrayList<VirtualFile>();\n    for (VirtualFile r : roots) {\n      if (parentIsNotUnderContentRoot(r)) result.add(r);\n    }\n    ContainerUtil.removeDuplicates(result);\n    sortRoots(result);\n    return result.toArray(new VirtualFile[result.size()]);\n  }", "signature": "VirtualFile[] selectParentlessRootsAndSort(List<VirtualFile> roots)", "full_signature": "protected VirtualFile[] selectParentlessRootsAndSort(List<VirtualFile> roots)", "class_method_signature": "Updater.selectParentlessRootsAndSort(List<VirtualFile> roots)", "testcase": false, "constructor": false, "invocations": ["parentIsNotUnderContentRoot", "add", "removeDuplicates", "sortRoots", "toArray", "size"]}, "repository": {"repo_id": 338815, "url": "https://github.com/jexp/idea2", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 627071, "license": "licensed"}}