{"test_class": {"identifier": "DirectoryEntryTest", "superclass": "extends LocalVcsTestCase", "interfaces": "", "fields": [], "file": "platform/lvcs-impl/testSrc/com/intellij/history/core/tree/DirectoryEntryTest.java"}, "test_case": {"identifier": "testRenamingChildToNonExistentNameDoesNotThrowException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRenamingChildToNonExistentNameDoesNotThrowException() {\n    Entry dir = new DirectoryEntry(0, \"dir\");\n    Entry child = new FileEntry(1, \"child\", null, -1, false);\n    dir.addChild(child);\n\n    child.changeName(\"new name\");\n\n    assertEquals(\"new name\", child.getName());\n  }", "signature": "void testRenamingChildToNonExistentNameDoesNotThrowException()", "full_signature": "@Test public void testRenamingChildToNonExistentNameDoesNotThrowException()", "class_method_signature": "DirectoryEntryTest.testRenamingChildToNonExistentNameDoesNotThrowException()", "testcase": true, "constructor": false, "invocations": ["addChild", "changeName", "assertEquals", "getName"]}, "focal_class": {"identifier": "DirectoryEntry", "superclass": "extends Entry", "interfaces": "", "fields": [{"original_string": "private final List<Entry> myChildren;", "modifier": "private final", "type": "List<Entry>", "declarator": "myChildren", "var_name": "myChildren"}], "methods": [{"identifier": "DirectoryEntry", "parameters": "(int id, String name)", "modifiers": "public", "return": "", "signature": " DirectoryEntry(int id, String name)", "full_signature": "public  DirectoryEntry(int id, String name)", "class_method_signature": "DirectoryEntry.DirectoryEntry(int id, String name)", "testcase": false, "constructor": true}, {"identifier": "DirectoryEntry", "parameters": "(Stream s)", "modifiers": "public", "return": "", "signature": " DirectoryEntry(Stream s)", "full_signature": "public  DirectoryEntry(Stream s)", "class_method_signature": "DirectoryEntry.DirectoryEntry(Stream s)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(Stream s)", "modifiers": "@Override public", "return": "void", "signature": "void write(Stream s)", "full_signature": "@Override public void write(Stream s)", "class_method_signature": "DirectoryEntry.write(Stream s)", "testcase": false, "constructor": false}, {"identifier": "getPathAppendedWith", "parameters": "(String name)", "modifiers": "protected", "return": "String", "signature": "String getPathAppendedWith(String name)", "full_signature": "protected String getPathAppendedWith(String name)", "class_method_signature": "DirectoryEntry.getPathAppendedWith(String name)", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDirectory()", "full_signature": "@Override public boolean isDirectory()", "class_method_signature": "DirectoryEntry.isDirectory()", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(Entry child)", "modifiers": "@Override public", "return": "void", "signature": "void addChild(Entry child)", "full_signature": "@Override public void addChild(Entry child)", "class_method_signature": "DirectoryEntry.addChild(Entry child)", "testcase": false, "constructor": false}, {"identifier": "unsafeAddChild", "parameters": "(Entry child)", "modifiers": "private", "return": "void", "signature": "void unsafeAddChild(Entry child)", "full_signature": "private void unsafeAddChild(Entry child)", "class_method_signature": "DirectoryEntry.unsafeAddChild(Entry child)", "testcase": false, "constructor": false}, {"identifier": "checkDoesNotExist", "parameters": "(Entry e, String name)", "modifiers": "protected", "return": "void", "signature": "void checkDoesNotExist(Entry e, String name)", "full_signature": "protected void checkDoesNotExist(Entry e, String name)", "class_method_signature": "DirectoryEntry.checkDoesNotExist(Entry e, String name)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(Entry child)", "modifiers": "@Override public", "return": "void", "signature": "void removeChild(Entry child)", "full_signature": "@Override public void removeChild(Entry child)", "class_method_signature": "DirectoryEntry.removeChild(Entry child)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "List<Entry>", "signature": "List<Entry> getChildren()", "full_signature": "@Override public List<Entry> getChildren()", "class_method_signature": "DirectoryEntry.getChildren()", "testcase": false, "constructor": false}, {"identifier": "hasUnavailableContent", "parameters": "(List<Entry> entriesWithUnavailableContent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasUnavailableContent(List<Entry> entriesWithUnavailableContent)", "full_signature": "@Override public boolean hasUnavailableContent(List<Entry> entriesWithUnavailableContent)", "class_method_signature": "DirectoryEntry.hasUnavailableContent(List<Entry> entriesWithUnavailableContent)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "DirectoryEntry", "signature": "DirectoryEntry copy()", "full_signature": "@Override public DirectoryEntry copy()", "class_method_signature": "DirectoryEntry.copy()", "testcase": false, "constructor": false}, {"identifier": "copyEntry", "parameters": "()", "modifiers": "protected", "return": "DirectoryEntry", "signature": "DirectoryEntry copyEntry()", "full_signature": "protected DirectoryEntry copyEntry()", "class_method_signature": "DirectoryEntry.copyEntry()", "testcase": false, "constructor": false}, {"identifier": "collectDifferencesWith", "parameters": "(Entry right, List<Difference> result)", "modifiers": "@Override public", "return": "void", "signature": "void collectDifferencesWith(Entry right, List<Difference> result)", "full_signature": "@Override public void collectDifferencesWith(Entry right, List<Difference> result)", "class_method_signature": "DirectoryEntry.collectDifferencesWith(Entry right, List<Difference> result)", "testcase": false, "constructor": false}, {"identifier": "addCreatedChildrenDifferences", "parameters": "(DirectoryEntry e, List<Difference> result)", "modifiers": "private", "return": "void", "signature": "void addCreatedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "full_signature": "private void addCreatedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "class_method_signature": "DirectoryEntry.addCreatedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "testcase": false, "constructor": false}, {"identifier": "addDeletedChildrenDifferences", "parameters": "(DirectoryEntry e, List<Difference> result)", "modifiers": "private", "return": "void", "signature": "void addDeletedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "full_signature": "private void addDeletedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "class_method_signature": "DirectoryEntry.addDeletedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "testcase": false, "constructor": false}, {"identifier": "addModifiedChildrenDifferences", "parameters": "(DirectoryEntry e, List<Difference> result)", "modifiers": "private", "return": "void", "signature": "void addModifiedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "full_signature": "private void addModifiedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "class_method_signature": "DirectoryEntry.addModifiedChildrenDifferences(DirectoryEntry e, List<Difference> result)", "testcase": false, "constructor": false}, {"identifier": "findDirectChild", "parameters": "(int id)", "modifiers": "", "return": "Entry", "signature": "Entry findDirectChild(int id)", "full_signature": " Entry findDirectChild(int id)", "class_method_signature": "DirectoryEntry.findDirectChild(int id)", "testcase": false, "constructor": false}, {"identifier": "collectCreatedDifferences", "parameters": "(List<Difference> result)", "modifiers": "@Override protected", "return": "void", "signature": "void collectCreatedDifferences(List<Difference> result)", "full_signature": "@Override protected void collectCreatedDifferences(List<Difference> result)", "class_method_signature": "DirectoryEntry.collectCreatedDifferences(List<Difference> result)", "testcase": false, "constructor": false}, {"identifier": "collectDeletedDifferences", "parameters": "(List<Difference> result)", "modifiers": "@Override protected", "return": "void", "signature": "void collectDeletedDifferences(List<Difference> result)", "full_signature": "@Override protected void collectDeletedDifferences(List<Difference> result)", "class_method_signature": "DirectoryEntry.collectDeletedDifferences(List<Difference> result)", "testcase": false, "constructor": false}], "file": "platform/lvcs-impl/src/com/intellij/history/core/tree/DirectoryEntry.java"}, "focal_method": {"identifier": "addChild", "parameters": "(Entry child)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void addChild(Entry child) {\n    checkDoesNotExist(child, child.getName());\n    unsafeAddChild(child);\n  }", "signature": "void addChild(Entry child)", "full_signature": "@Override public void addChild(Entry child)", "class_method_signature": "DirectoryEntry.addChild(Entry child)", "testcase": false, "constructor": false, "invocations": ["checkDoesNotExist", "getName", "unsafeAddChild"]}, "repository": {"repo_id": 338815, "url": "https://github.com/jexp/idea2", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 627071, "license": "licensed"}}