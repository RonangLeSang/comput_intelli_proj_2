{"test_class": {"identifier": "SelectionCalculatorTest", "superclass": "extends LocalVcsTestCase", "interfaces": "", "fields": [{"original_string": "TestIdeaGateway gw = new TestIdeaGateway();", "modifier": "", "type": "TestIdeaGateway", "declarator": "gw = new TestIdeaGateway()", "var_name": "gw"}, {"original_string": "LocalVcs vcs = new InMemoryLocalVcs();", "modifier": "", "type": "LocalVcs", "declarator": "vcs = new InMemoryLocalVcs()", "var_name": "vcs"}], "file": "platform/lvcs-impl/testSrc/com/intellij/history/integration/ui/models/SelectionCalculatorTest.java"}, "test_case": {"identifier": "testCanNotCalculateIfThereWasUnavailableContent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCanNotCalculateIfThereWasUnavailableContent() {\n    List<Revision> rr = createRevisions(cf(\"one\"), bigContentFactory(), cf(\"two\"));\n\n    SelectionCalculator c = new SelectionCalculator(gw, rr, 0, 0);\n\n    assertTrue(c.canCalculateFor(rr.get(0), new NullProgress()));\n    assertFalse(c.canCalculateFor(rr.get(1), new NullProgress()));\n    assertFalse(c.canCalculateFor(rr.get(2), new NullProgress()));\n  }", "signature": "void testCanNotCalculateIfThereWasUnavailableContent()", "full_signature": "@Test public void testCanNotCalculateIfThereWasUnavailableContent()", "class_method_signature": "SelectionCalculatorTest.testCanNotCalculateIfThereWasUnavailableContent()", "testcase": true, "constructor": false, "invocations": ["createRevisions", "cf", "bigContentFactory", "cf", "assertTrue", "canCalculateFor", "get", "assertFalse", "canCalculateFor", "get", "assertFalse", "canCalculateFor", "get"]}, "focal_class": {"identifier": "SelectionCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IdeaGateway myGateway;", "modifier": "private final", "type": "IdeaGateway", "declarator": "myGateway", "var_name": "myGateway"}, {"original_string": "private final List<Revision> myRevisions;", "modifier": "private final", "type": "List<Revision>", "declarator": "myRevisions", "var_name": "myRevisions"}, {"original_string": "private final int myFromLine;", "modifier": "private final", "type": "int", "declarator": "myFromLine", "var_name": "myFromLine"}, {"original_string": "private final int myToLine;", "modifier": "private final", "type": "int", "declarator": "myToLine", "var_name": "myToLine"}, {"original_string": "private final Map<Integer, Block> myCache = new HashMap<Integer, Block>();", "modifier": "private final", "type": "Map<Integer, Block>", "declarator": "myCache = new HashMap<Integer, Block>()", "var_name": "myCache"}], "methods": [{"identifier": "SelectionCalculator", "parameters": "(IdeaGateway gw, List<Revision> rr, int fromLine, int toLine)", "modifiers": "public", "return": "", "signature": " SelectionCalculator(IdeaGateway gw, List<Revision> rr, int fromLine, int toLine)", "full_signature": "public  SelectionCalculator(IdeaGateway gw, List<Revision> rr, int fromLine, int toLine)", "class_method_signature": "SelectionCalculator.SelectionCalculator(IdeaGateway gw, List<Revision> rr, int fromLine, int toLine)", "testcase": false, "constructor": true}, {"identifier": "canCalculateFor", "parameters": "(Revision r, Progress p)", "modifiers": "public", "return": "boolean", "signature": "boolean canCalculateFor(Revision r, Progress p)", "full_signature": "public boolean canCalculateFor(Revision r, Progress p)", "class_method_signature": "SelectionCalculator.canCalculateFor(Revision r, Progress p)", "testcase": false, "constructor": false}, {"identifier": "getSelectionFor", "parameters": "(Revision r, Progress p)", "modifiers": "public", "return": "Block", "signature": "Block getSelectionFor(Revision r, Progress p)", "full_signature": "public Block getSelectionFor(Revision r, Progress p)", "class_method_signature": "SelectionCalculator.getSelectionFor(Revision r, Progress p)", "testcase": false, "constructor": false}, {"identifier": "doGetSelectionFor", "parameters": "(Revision r, Progress p)", "modifiers": "private", "return": "Block", "signature": "Block doGetSelectionFor(Revision r, Progress p)", "full_signature": "private Block doGetSelectionFor(Revision r, Progress p)", "class_method_signature": "SelectionCalculator.doGetSelectionFor(Revision r, Progress p)", "testcase": false, "constructor": false}, {"identifier": "getSelectionFor", "parameters": "(int revisionIndex, int totalRevisions, Progress p)", "modifiers": "private", "return": "Block", "signature": "Block getSelectionFor(int revisionIndex, int totalRevisions, Progress p)", "full_signature": "private Block getSelectionFor(int revisionIndex, int totalRevisions, Progress p)", "class_method_signature": "SelectionCalculator.getSelectionFor(int revisionIndex, int totalRevisions, Progress p)", "testcase": false, "constructor": false}, {"identifier": "getRevisionContent", "parameters": "(Revision r)", "modifiers": "private", "return": "String", "signature": "String getRevisionContent(Revision r)", "full_signature": "private String getRevisionContent(Revision r)", "class_method_signature": "SelectionCalculator.getRevisionContent(Revision r)", "testcase": false, "constructor": false}], "file": "platform/lvcs-impl/src/com/intellij/history/integration/ui/models/SelectionCalculator.java"}, "focal_method": {"identifier": "canCalculateFor", "parameters": "(Revision r, Progress p)", "modifiers": "public", "return": "boolean", "body": "public boolean canCalculateFor(Revision r, Progress p) {\n    try {\n      doGetSelectionFor(r, p);\n    }\n    catch (ContentIsUnavailableException e) {\n      return false;\n    }\n    return true;\n  }", "signature": "boolean canCalculateFor(Revision r, Progress p)", "full_signature": "public boolean canCalculateFor(Revision r, Progress p)", "class_method_signature": "SelectionCalculator.canCalculateFor(Revision r, Progress p)", "testcase": false, "constructor": false, "invocations": ["doGetSelectionFor"]}, "repository": {"repo_id": 338815, "url": "https://github.com/jexp/idea2", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 627071, "license": "licensed"}}