{"test_class": {"identifier": "PNCDetailControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private AllEligibleCouples allEligibleCouples;", "modifier": "@Mock\n    private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}, {"original_string": "@Mock\n    private AllBeneficiaries allBeneficiaries;", "modifier": "@Mock\n    private", "type": "AllBeneficiaries", "declarator": "allBeneficiaries", "var_name": "allBeneficiaries"}, {"original_string": "@Mock\n    private AllTimelineEvents allTimelineEvents;", "modifier": "@Mock\n    private", "type": "AllTimelineEvents", "declarator": "allTimelineEvents", "var_name": "allTimelineEvents"}, {"original_string": "private String caseId = \"1234-5678-1234\";", "modifier": "private", "type": "String", "declarator": "caseId = \"1234-5678-1234\"", "var_name": "caseId"}, {"original_string": "private PNCDetailController controller;", "modifier": "private", "type": "PNCDetailController", "declarator": "controller", "var_name": "controller"}], "file": "dristhi-app/src/test/java/org/ei/drishti/view/controller/PNCDetailControllerTest.java"}, "test_case": {"identifier": "shouldGetPNCDetailsAsJSON", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetPNCDetailsAsJSON() throws Exception {\n        TimelineEvent pregnancyEvent = TimelineEvent.forStartOfPregnancy(caseId, \"2011-10-21\", \"2011-10-21\");\n        TimelineEvent ancEvent = TimelineEvent.forANCCareProvided(caseId, \"2\", \"2011-12-22\", new HashMap<String, String>());\n        TimelineEvent eventVeryCloseToCurrentDate = TimelineEvent.forANCCareProvided(caseId, \"2\", \"2012-07-29\", new HashMap<String, String>());\n\n        HashMap<String, String> details = new HashMap<String, String>();\n        details.put(\"ashaName\", \"Shiwani\");\n        details.put(\"isHighRisk\", \"yes\");\n        details.put(\"highRiskReason\", \"Anaemia\");\n\n        when(allBeneficiaries.findMotherWithOpenStatus(caseId)).thenReturn(new Mother(caseId, \"EC CASE 1\", \"TC 1\", \"2012-07-28\").withDetails(details));\n        HashMap<String, String> ecDetails = new HashMap<String, String>();\n        ecDetails.put(\"caste\", \"c_others\");\n        ecDetails.put(\"economicStatus\", \"apl\");\n        when(allEligibleCouples.findByCaseID(\"EC CASE 1\")).thenReturn(new EligibleCouple(\"EC CASE 1\", \"Woman 1\", \"Husband 1\", \"EC Number 1\", \"Village 1\", \"Subcenter 1\", ecDetails).withPhotoPath(\"photo path\"));\n        when(allTimelineEvents.forCase(caseId)).thenReturn(asList(pregnancyEvent, ancEvent, eventVeryCloseToCurrentDate));\n\n        PNCDetail expectedDetail = new PNCDetail(caseId, \"TC 1\",\n                new CoupleDetails(\"Woman 1\", \"Husband 1\", \"EC Number 1\", false).withCaste(\"c_others\").withEconomicStatus(\"apl\").withPhotoPath(\"photo path\"),\n                new LocationDetails(\"Village 1\", \"Subcenter 1\"),\n                new PregnancyOutcomeDetails(\"2012-07-28\", 4))\n                .addTimelineEvents(asList(eventFor(eventVeryCloseToCurrentDate, \"29-07-2012\"), eventFor(ancEvent, \"22-12-2011\"), eventFor(pregnancyEvent, \"21-10-2011\")))\n                .addExtraDetails(details);\n\n        String actualJson = controller.get();\n\n        PNCDetail actualDetail = new Gson().fromJson(actualJson, PNCDetail.class);\n        assertEquals(expectedDetail, actualDetail);\n    }", "signature": "void shouldGetPNCDetailsAsJSON()", "full_signature": "@Test public void shouldGetPNCDetailsAsJSON()", "class_method_signature": "PNCDetailControllerTest.shouldGetPNCDetailsAsJSON()", "testcase": true, "constructor": false, "invocations": ["forStartOfPregnancy", "forANCCareProvided", "forANCCareProvided", "put", "put", "put", "thenReturn", "when", "findMotherWithOpenStatus", "withDetails", "put", "put", "thenReturn", "when", "findByCaseID", "withPhotoPath", "thenReturn", "when", "forCase", "asList", "addExtraDetails", "addTimelineEvents", "withPhotoPath", "withEconomicStatus", "withCaste", "asList", "eventFor", "eventFor", "eventFor", "get", "fromJson", "assertEquals"]}, "focal_class": {"identifier": "PNCDetailController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final String caseId;", "modifier": "private final", "type": "String", "declarator": "caseId", "var_name": "caseId"}, {"original_string": "private final AllEligibleCouples allEligibleCouples;", "modifier": "private final", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}, {"original_string": "private final AllBeneficiaries allBeneficiaries;", "modifier": "private final", "type": "AllBeneficiaries", "declarator": "allBeneficiaries", "var_name": "allBeneficiaries"}, {"original_string": "private final AllTimelineEvents allTimelineEvents;", "modifier": "private final", "type": "AllTimelineEvents", "declarator": "allTimelineEvents", "var_name": "allTimelineEvents"}], "methods": [{"identifier": "PNCDetailController", "parameters": "(Context context, String caseId, AllEligibleCouples allEligibleCouples, AllBeneficiaries allBeneficiaries, AllTimelineEvents allTimelineEvents)", "modifiers": "public", "return": "", "signature": " PNCDetailController(Context context, String caseId, AllEligibleCouples allEligibleCouples, AllBeneficiaries allBeneficiaries, AllTimelineEvents allTimelineEvents)", "full_signature": "public  PNCDetailController(Context context, String caseId, AllEligibleCouples allEligibleCouples, AllBeneficiaries allBeneficiaries, AllTimelineEvents allTimelineEvents)", "class_method_signature": "PNCDetailController.PNCDetailController(Context context, String caseId, AllEligibleCouples allEligibleCouples, AllBeneficiaries allBeneficiaries, AllTimelineEvents allTimelineEvents)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String get()", "full_signature": "public String get()", "class_method_signature": "PNCDetailController.get()", "testcase": false, "constructor": false}, {"identifier": "takePhoto", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void takePhoto()", "full_signature": "public void takePhoto()", "class_method_signature": "PNCDetailController.takePhoto()", "testcase": false, "constructor": false}, {"identifier": "getEvents", "parameters": "()", "modifiers": "private", "return": "List<TimelineEvent>", "signature": "List<TimelineEvent> getEvents()", "full_signature": "private List<TimelineEvent> getEvents()", "class_method_signature": "PNCDetailController.getEvents()", "testcase": false, "constructor": false}], "file": "dristhi-app/src/main/java/org/ei/drishti/view/controller/PNCDetailController.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String get() {\n        Mother mother = allBeneficiaries.findMotherWithOpenStatus(caseId);\n        EligibleCouple couple = allEligibleCouples.findByCaseID(mother.ecCaseId());\n\n        LocalDate deliveryDate = LocalDate.parse(mother.referenceDate());\n        Days postPartumDuration = Days.daysBetween(deliveryDate, DateUtil.today());\n\n        PNCDetail detail = new PNCDetail(caseId, mother.thayiCardNumber(),\n                new CoupleDetails(couple.wifeName(), couple.husbandName(), couple.ecNumber(), couple.isOutOfArea())\n                        .withCaste(couple.getDetail(\"caste\"))\n                        .withEconomicStatus(couple.getDetail(\"economicStatus\"))\n                        .withPhotoPath(couple.photoPath()),\n                new LocationDetails(couple.village(), couple.subCenter()),\n                new PregnancyOutcomeDetails(deliveryDate.toString(), postPartumDuration.getDays()))\n                .addTimelineEvents(getEvents())\n                .addExtraDetails(mother.details());\n\n        return new Gson().toJson(detail);\n    }", "signature": "String get()", "full_signature": "public String get()", "class_method_signature": "PNCDetailController.get()", "testcase": false, "constructor": false, "invocations": ["findMotherWithOpenStatus", "findByCaseID", "ecCaseId", "parse", "referenceDate", "daysBetween", "today", "addExtraDetails", "addTimelineEvents", "thayiCardNumber", "withPhotoPath", "withEconomicStatus", "withCaste", "wifeName", "husbandName", "ecNumber", "isOutOfArea", "getDetail", "getDetail", "photoPath", "village", "subCenter", "toString", "getDays", "getEvents", "details", "toJson"]}, "repository": {"repo_id": 5104280, "url": "https://github.com/SEL-Columbia/dristhi-app", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 11, "size": 79156, "license": "licensed"}}