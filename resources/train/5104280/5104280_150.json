{"test_class": {"identifier": "AllBeneficiariesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private MotherRepository motherRepository;", "modifier": "@Mock\n    private", "type": "MotherRepository", "declarator": "motherRepository", "var_name": "motherRepository"}, {"original_string": "@Mock\n    private ChildRepository childRepository;", "modifier": "@Mock\n    private", "type": "ChildRepository", "declarator": "childRepository", "var_name": "childRepository"}, {"original_string": "@Mock\n    private AlertRepository alertRepository;", "modifier": "@Mock\n    private", "type": "AlertRepository", "declarator": "alertRepository", "var_name": "alertRepository"}, {"original_string": "@Mock\n    private TimelineEventRepository timelineEventRepository;", "modifier": "@Mock\n    private", "type": "TimelineEventRepository", "declarator": "timelineEventRepository", "var_name": "timelineEventRepository"}, {"original_string": "@Mock\n    private Child child;", "modifier": "@Mock\n    private", "type": "Child", "declarator": "child", "var_name": "child"}, {"original_string": "@Mock\n    private Mother mother;", "modifier": "@Mock\n    private", "type": "Mother", "declarator": "mother", "var_name": "mother"}, {"original_string": "private AllBeneficiaries allBeneficiaries;", "modifier": "private", "type": "AllBeneficiaries", "declarator": "allBeneficiaries", "var_name": "allBeneficiaries"}], "file": "dristhi-app/src/test/java/org/ei/drishti/repository/AllBeneficiariesTest.java"}, "test_case": {"identifier": "shouldDelegateToMotherRepositoryWhenUpdateMotherIsCalled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDelegateToMotherRepositoryWhenUpdateMotherIsCalled() throws Exception {\n        allBeneficiaries.updateMother(mother);\n\n        verify(motherRepository).update(mother);\n    }", "signature": "void shouldDelegateToMotherRepositoryWhenUpdateMotherIsCalled()", "full_signature": "@Test public void shouldDelegateToMotherRepositoryWhenUpdateMotherIsCalled()", "class_method_signature": "AllBeneficiariesTest.shouldDelegateToMotherRepositoryWhenUpdateMotherIsCalled()", "testcase": true, "constructor": false, "invocations": ["updateMother", "update", "verify"]}, "focal_class": {"identifier": "AllBeneficiaries", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ChildRepository childRepository;", "modifier": "private", "type": "ChildRepository", "declarator": "childRepository", "var_name": "childRepository"}, {"original_string": "private MotherRepository motherRepository;", "modifier": "private", "type": "MotherRepository", "declarator": "motherRepository", "var_name": "motherRepository"}, {"original_string": "private final AlertRepository alertRepository;", "modifier": "private final", "type": "AlertRepository", "declarator": "alertRepository", "var_name": "alertRepository"}, {"original_string": "private final TimelineEventRepository timelineEventRepository;", "modifier": "private final", "type": "TimelineEventRepository", "declarator": "timelineEventRepository", "var_name": "timelineEventRepository"}], "methods": [{"identifier": "AllBeneficiaries", "parameters": "(MotherRepository motherRepository, ChildRepository childRepository,\n                            AlertRepository alertRepository, TimelineEventRepository timelineEventRepository)", "modifiers": "public", "return": "", "signature": " AllBeneficiaries(MotherRepository motherRepository, ChildRepository childRepository,\n                            AlertRepository alertRepository, TimelineEventRepository timelineEventRepository)", "full_signature": "public  AllBeneficiaries(MotherRepository motherRepository, ChildRepository childRepository,\n                            AlertRepository alertRepository, TimelineEventRepository timelineEventRepository)", "class_method_signature": "AllBeneficiaries.AllBeneficiaries(MotherRepository motherRepository, ChildRepository childRepository,\n                            AlertRepository alertRepository, TimelineEventRepository timelineEventRepository)", "testcase": false, "constructor": true}, {"identifier": "findMotherWithOpenStatus", "parameters": "(String caseId)", "modifiers": "public", "return": "Mother", "signature": "Mother findMotherWithOpenStatus(String caseId)", "full_signature": "public Mother findMotherWithOpenStatus(String caseId)", "class_method_signature": "AllBeneficiaries.findMotherWithOpenStatus(String caseId)", "testcase": false, "constructor": false}, {"identifier": "findMother", "parameters": "(String caseId)", "modifiers": "public", "return": "Mother", "signature": "Mother findMother(String caseId)", "full_signature": "public Mother findMother(String caseId)", "class_method_signature": "AllBeneficiaries.findMother(String caseId)", "testcase": false, "constructor": false}, {"identifier": "findChild", "parameters": "(String caseId)", "modifiers": "public", "return": "Child", "signature": "Child findChild(String caseId)", "full_signature": "public Child findChild(String caseId)", "class_method_signature": "AllBeneficiaries.findChild(String caseId)", "testcase": false, "constructor": false}, {"identifier": "ancCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long ancCount()", "full_signature": "public long ancCount()", "class_method_signature": "AllBeneficiaries.ancCount()", "testcase": false, "constructor": false}, {"identifier": "pncCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long pncCount()", "full_signature": "public long pncCount()", "class_method_signature": "AllBeneficiaries.pncCount()", "testcase": false, "constructor": false}, {"identifier": "childCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long childCount()", "full_signature": "public long childCount()", "class_method_signature": "AllBeneficiaries.childCount()", "testcase": false, "constructor": false}, {"identifier": "allANCsWithEC", "parameters": "()", "modifiers": "public", "return": "List<Pair<Mother, EligibleCouple>>", "signature": "List<Pair<Mother, EligibleCouple>> allANCsWithEC()", "full_signature": "public List<Pair<Mother, EligibleCouple>> allANCsWithEC()", "class_method_signature": "AllBeneficiaries.allANCsWithEC()", "testcase": false, "constructor": false}, {"identifier": "allPNCsWithEC", "parameters": "()", "modifiers": "public", "return": "List<Pair<Mother, EligibleCouple>>", "signature": "List<Pair<Mother, EligibleCouple>> allPNCsWithEC()", "full_signature": "public List<Pair<Mother, EligibleCouple>> allPNCsWithEC()", "class_method_signature": "AllBeneficiaries.allPNCsWithEC()", "testcase": false, "constructor": false}, {"identifier": "findMotherByECCaseId", "parameters": "(String ecCaseId)", "modifiers": "public", "return": "Mother", "signature": "Mother findMotherByECCaseId(String ecCaseId)", "full_signature": "public Mother findMotherByECCaseId(String ecCaseId)", "class_method_signature": "AllBeneficiaries.findMotherByECCaseId(String ecCaseId)", "testcase": false, "constructor": false}, {"identifier": "findAllChildrenByMotherId", "parameters": "(String entityId)", "modifiers": "public", "return": "List<Child>", "signature": "List<Child> findAllChildrenByMotherId(String entityId)", "full_signature": "public List<Child> findAllChildrenByMotherId(String entityId)", "class_method_signature": "AllBeneficiaries.findAllChildrenByMotherId(String entityId)", "testcase": false, "constructor": false}, {"identifier": "findAllChildrenByCaseIDs", "parameters": "(List<String> caseIds)", "modifiers": "public", "return": "List<Child>", "signature": "List<Child> findAllChildrenByCaseIDs(List<String> caseIds)", "full_signature": "public List<Child> findAllChildrenByCaseIDs(List<String> caseIds)", "class_method_signature": "AllBeneficiaries.findAllChildrenByCaseIDs(List<String> caseIds)", "testcase": false, "constructor": false}, {"identifier": "findAllMothersByCaseIDs", "parameters": "(List<String> caseIds)", "modifiers": "public", "return": "List<Mother>", "signature": "List<Mother> findAllMothersByCaseIDs(List<String> caseIds)", "full_signature": "public List<Mother> findAllMothersByCaseIDs(List<String> caseIds)", "class_method_signature": "AllBeneficiaries.findAllMothersByCaseIDs(List<String> caseIds)", "testcase": false, "constructor": false}, {"identifier": "switchMotherToPNC", "parameters": "(String entityId)", "modifiers": "public", "return": "void", "signature": "void switchMotherToPNC(String entityId)", "full_signature": "public void switchMotherToPNC(String entityId)", "class_method_signature": "AllBeneficiaries.switchMotherToPNC(String entityId)", "testcase": false, "constructor": false}, {"identifier": "closeMother", "parameters": "(String entityId)", "modifiers": "public", "return": "void", "signature": "void closeMother(String entityId)", "full_signature": "public void closeMother(String entityId)", "class_method_signature": "AllBeneficiaries.closeMother(String entityId)", "testcase": false, "constructor": false}, {"identifier": "closeChild", "parameters": "(String entityId)", "modifiers": "public", "return": "void", "signature": "void closeChild(String entityId)", "full_signature": "public void closeChild(String entityId)", "class_method_signature": "AllBeneficiaries.closeChild(String entityId)", "testcase": false, "constructor": false}, {"identifier": "closeAllMothersForEC", "parameters": "(String ecId)", "modifiers": "public", "return": "void", "signature": "void closeAllMothersForEC(String ecId)", "full_signature": "public void closeAllMothersForEC(String ecId)", "class_method_signature": "AllBeneficiaries.closeAllMothersForEC(String ecId)", "testcase": false, "constructor": false}, {"identifier": "allChildrenWithMotherAndEC", "parameters": "()", "modifiers": "public", "return": "List<Child>", "signature": "List<Child> allChildrenWithMotherAndEC()", "full_signature": "public List<Child> allChildrenWithMotherAndEC()", "class_method_signature": "AllBeneficiaries.allChildrenWithMotherAndEC()", "testcase": false, "constructor": false}, {"identifier": "findAllChildrenByECId", "parameters": "(String ecId)", "modifiers": "public", "return": "List<Child>", "signature": "List<Child> findAllChildrenByECId(String ecId)", "full_signature": "public List<Child> findAllChildrenByECId(String ecId)", "class_method_signature": "AllBeneficiaries.findAllChildrenByECId(String ecId)", "testcase": false, "constructor": false}, {"identifier": "findMotherWithOpenStatusByECId", "parameters": "(String ecId)", "modifiers": "public", "return": "Mother", "signature": "Mother findMotherWithOpenStatusByECId(String ecId)", "full_signature": "public Mother findMotherWithOpenStatusByECId(String ecId)", "class_method_signature": "AllBeneficiaries.findMotherWithOpenStatusByECId(String ecId)", "testcase": false, "constructor": false}, {"identifier": "isPregnant", "parameters": "(String ecId)", "modifiers": "public", "return": "boolean", "signature": "boolean isPregnant(String ecId)", "full_signature": "public boolean isPregnant(String ecId)", "class_method_signature": "AllBeneficiaries.isPregnant(String ecId)", "testcase": false, "constructor": false}, {"identifier": "updateChild", "parameters": "(Child child)", "modifiers": "public", "return": "void", "signature": "void updateChild(Child child)", "full_signature": "public void updateChild(Child child)", "class_method_signature": "AllBeneficiaries.updateChild(Child child)", "testcase": false, "constructor": false}, {"identifier": "updateMother", "parameters": "(Mother mother)", "modifiers": "public", "return": "void", "signature": "void updateMother(Mother mother)", "full_signature": "public void updateMother(Mother mother)", "class_method_signature": "AllBeneficiaries.updateMother(Mother mother)", "testcase": false, "constructor": false}], "file": "dristhi-app/src/main/java/org/ei/drishti/repository/AllBeneficiaries.java"}, "focal_method": {"identifier": "updateMother", "parameters": "(Mother mother)", "modifiers": "public", "return": "void", "body": "public void updateMother(Mother mother) {\n        motherRepository.update(mother);\n    }", "signature": "void updateMother(Mother mother)", "full_signature": "public void updateMother(Mother mother)", "class_method_signature": "AllBeneficiaries.updateMother(Mother mother)", "testcase": false, "constructor": false, "invocations": ["update"]}, "repository": {"repo_id": 5104280, "url": "https://github.com/SEL-Columbia/dristhi-app", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 11, "size": 79156, "license": "licensed"}}