{"test_class": {"identifier": "CacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private CacheableData<String> cacheableData;", "modifier": "@Mock\n    private", "type": "CacheableData<String>", "declarator": "cacheableData", "var_name": "cacheableData"}], "file": "dristhi-app/src/test/java/org/ei/drishti/util/CacheTest.java"}, "test_case": {"identifier": "shouldGetAndCacheValueOnlyWhenItDoesNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetAndCacheValueOnlyWhenItDoesNotExist() throws Exception {\n        Cache<String> cache = new Cache<String>();\n        when(cacheableData.fetch()).thenReturn(\"value\");\n\n        assertEquals(\"value\", cache.get(\"key\", cacheableData));\n\n        verify(cacheableData).fetch();\n\n        assertEquals(\"value\", cache.get(\"key\", cacheableData));\n\n        verify(cacheableData, times(1)).fetch();\n    }", "signature": "void shouldGetAndCacheValueOnlyWhenItDoesNotExist()", "full_signature": "@Test public void shouldGetAndCacheValueOnlyWhenItDoesNotExist()", "class_method_signature": "CacheTest.shouldGetAndCacheValueOnlyWhenItDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "fetch", "assertEquals", "get", "fetch", "verify", "assertEquals", "get", "fetch", "verify", "times"]}, "focal_class": {"identifier": "Cache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, T> value = new HashMap<String, T>();", "modifier": "private", "type": "Map<String, T>", "declarator": "value = new HashMap<String, T>()", "var_name": "value"}, {"original_string": "private final Listener<String> formSubmittedListener;", "modifier": "private final", "type": "Listener<String>", "declarator": "formSubmittedListener", "var_name": "formSubmittedListener"}, {"original_string": "private final Listener<FetchStatus> actionsFetchedListener;", "modifier": "private final", "type": "Listener<FetchStatus>", "declarator": "actionsFetchedListener", "var_name": "actionsFetchedListener"}, {"original_string": "private final Listener<CapturedPhotoInformation> photoCapturedListener;", "modifier": "private final", "type": "Listener<CapturedPhotoInformation>", "declarator": "photoCapturedListener", "var_name": "photoCapturedListener"}, {"original_string": "private final Listener<String> actionHandledListener;", "modifier": "private final", "type": "Listener<String>", "declarator": "actionHandledListener", "var_name": "actionHandledListener"}], "methods": [{"identifier": "Cache", "parameters": "()", "modifiers": "public", "return": "", "signature": " Cache()", "full_signature": "public  Cache()", "class_method_signature": "Cache.Cache()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String key, CacheableData<T> cacheableData)", "modifiers": "public", "return": "T", "signature": "T get(String key, CacheableData<T> cacheableData)", "full_signature": "public T get(String key, CacheableData<T> cacheableData)", "class_method_signature": "Cache.get(String key, CacheableData<T> cacheableData)", "testcase": false, "constructor": false}], "file": "dristhi-app/src/main/java/org/ei/drishti/util/Cache.java"}, "focal_method": {"identifier": "get", "parameters": "(String key, CacheableData<T> cacheableData)", "modifiers": "public", "return": "T", "body": "public T get(String key, CacheableData<T> cacheableData) {\n        if (value.get(key) != null) {\n            return value.get(key);\n        }\n        T fetchedData = cacheableData.fetch();\n        value.put(key, fetchedData);\n        return fetchedData;\n    }", "signature": "T get(String key, CacheableData<T> cacheableData)", "full_signature": "public T get(String key, CacheableData<T> cacheableData)", "class_method_signature": "Cache.get(String key, CacheableData<T> cacheableData)", "testcase": false, "constructor": false, "invocations": ["get", "get", "fetch", "put"]}, "repository": {"repo_id": 5104280, "url": "https://github.com/SEL-Columbia/dristhi-app", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 11, "size": 79156, "license": "licensed"}}