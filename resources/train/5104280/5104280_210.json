{"test_class": {"identifier": "SmartRegisterClientsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    AllEligibleCoupleServiceMode allEligibleCoupleServiceMode;", "modifier": "@Mock", "type": "AllEligibleCoupleServiceMode", "declarator": "allEligibleCoupleServiceMode", "var_name": "allEligibleCoupleServiceMode"}, {"original_string": "@Mock\n    FPAllMethodsServiceMode fpAllMethodsServiceMode;", "modifier": "@Mock", "type": "FPAllMethodsServiceMode", "declarator": "fpAllMethodsServiceMode", "var_name": "fpAllMethodsServiceMode"}, {"original_string": "@Mock\n    Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private android.content.Context applicationContext;", "modifier": "@Mock\n    private", "type": "android.content.Context", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private Context currentContext;", "modifier": "private", "type": "Context", "declarator": "currentContext", "var_name": "currentContext"}], "file": "dristhi-app/src/test/java/org/ei/drishti/view/contract/SmartRegisterClientsTest.java"}, "test_case": {"identifier": "ShouldReturn2ResultsFor_Half_Bherya_VillageFilterOption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ShouldReturn2ResultsFor_Half_Bherya_VillageFilterOption() {\n        SmartRegisterClients originalClients = getSmartRegisterClientsWithProperDetails();\n        SmartRegisterClients filteredClients = originalClients.applyFilter(\n                new VillageFilter(\"Half bherya\"),\n                allEligibleCoupleServiceMode,\n                new ECSearchOption(\"\"),\n                new NameSort());\n        assertEquals(2, filteredClients.size());\n        assertEquals(\"Akshara\", filteredClients.get(0).name());\n        assertEquals(\"Anitha\", filteredClients.get(1).name());\n    }", "signature": "void ShouldReturn2ResultsFor_Half_Bherya_VillageFilterOption()", "full_signature": "@Test public void ShouldReturn2ResultsFor_Half_Bherya_VillageFilterOption()", "class_method_signature": "SmartRegisterClientsTest.ShouldReturn2ResultsFor_Half_Bherya_VillageFilterOption()", "testcase": true, "constructor": false, "invocations": ["getSmartRegisterClientsWithProperDetails", "applyFilter", "assertEquals", "size", "assertEquals", "name", "get", "assertEquals", "name", "get"]}, "focal_class": {"identifier": "SmartRegisterClients", "superclass": "extends ArrayList<SmartRegisterClient>", "interfaces": "", "fields": [], "methods": [{"identifier": "applyFilter", "parameters": "(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "modifiers": "public", "return": "SmartRegisterClients", "signature": "SmartRegisterClients applyFilter(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "full_signature": "public SmartRegisterClients applyFilter(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "class_method_signature": "SmartRegisterClients.applyFilter(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "testcase": false, "constructor": false}, {"identifier": "applyFilterWithFP", "parameters": "(final ServiceModeOption serviceModeOption, SortOption sortOption, final FilterOption... filterOptions)", "modifiers": "public", "return": "SmartRegisterClients", "signature": "SmartRegisterClients applyFilterWithFP(final ServiceModeOption serviceModeOption, SortOption sortOption, final FilterOption... filterOptions)", "full_signature": "public SmartRegisterClients applyFilterWithFP(final ServiceModeOption serviceModeOption, SortOption sortOption, final FilterOption... filterOptions)", "class_method_signature": "SmartRegisterClients.applyFilterWithFP(final ServiceModeOption serviceModeOption, SortOption sortOption, final FilterOption... filterOptions)", "testcase": false, "constructor": false}], "file": "dristhi-app/src/main/java/org/ei/drishti/view/contract/SmartRegisterClients.java"}, "focal_method": {"identifier": "applyFilter", "parameters": "(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "modifiers": "public", "return": "SmartRegisterClients", "body": "public SmartRegisterClients applyFilter(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption) {\n        SmartRegisterClients results = new SmartRegisterClients();\n        Iterables.addAll(results, Iterables.filter(this, new Predicate<SmartRegisterClient>() {\n            @Override\n            public boolean apply(SmartRegisterClient client) {\n                return villageFilter.filter(client) && searchFilter.filter(client);\n            }\n        }));\n\n        serviceModeOption.apply();\n        return sortOption.sort(results);\n    }", "signature": "SmartRegisterClients applyFilter(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "full_signature": "public SmartRegisterClients applyFilter(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "class_method_signature": "SmartRegisterClients.applyFilter(final FilterOption villageFilter, final ServiceModeOption serviceModeOption,\n                                            final FilterOption searchFilter, SortOption sortOption)", "testcase": false, "constructor": false, "invocations": ["addAll", "filter", "filter", "filter", "apply", "sort"]}, "repository": {"repo_id": 5104280, "url": "https://github.com/SEL-Columbia/dristhi-app", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 11, "size": 79156, "license": "licensed"}}