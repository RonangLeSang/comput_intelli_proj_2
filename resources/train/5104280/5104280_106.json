{"test_class": {"identifier": "ChildServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AllTimelineEvents allTimelineEvents;", "modifier": "@Mock\n    private", "type": "AllTimelineEvents", "declarator": "allTimelineEvents", "var_name": "allTimelineEvents"}, {"original_string": "@Mock\n    private ChildRepository childRepository;", "modifier": "@Mock\n    private", "type": "ChildRepository", "declarator": "childRepository", "var_name": "childRepository"}, {"original_string": "@Mock\n    private MotherRepository motherRepository;", "modifier": "@Mock\n    private", "type": "MotherRepository", "declarator": "motherRepository", "var_name": "motherRepository"}, {"original_string": "@Mock\n    private ServiceProvidedService serviceProvidedService;", "modifier": "@Mock\n    private", "type": "ServiceProvidedService", "declarator": "serviceProvidedService", "var_name": "serviceProvidedService"}, {"original_string": "@Mock\n    private AllAlerts allAlerts;", "modifier": "@Mock\n    private", "type": "AllAlerts", "declarator": "allAlerts", "var_name": "allAlerts"}, {"original_string": "@Mock\n    private AllBeneficiaries allBeneficiaries;", "modifier": "@Mock\n    private", "type": "AllBeneficiaries", "declarator": "allBeneficiaries", "var_name": "allBeneficiaries"}, {"original_string": "@Mock\n    private Child child;", "modifier": "@Mock\n    private", "type": "Child", "declarator": "child", "var_name": "child"}, {"original_string": "private ChildService service;", "modifier": "private", "type": "ChildService", "declarator": "service", "var_name": "service"}], "file": "dristhi-app/src/test/java/org/ei/drishti/service/ChildServiceTest.java"}, "test_case": {"identifier": "shouldUpdateIllnessForUpdateIllnessAction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdateIllnessForUpdateIllnessAction() throws Exception {\n        FormSubmission submission = mock(FormSubmission.class);\n\n        when(submission.entityId()).thenReturn(\"child id 1\");\n        when(submission.getFieldValue(\"submissionDate\")).thenReturn(\"2012-01-02\");\n        when(submission.getFieldValue(\"sickVisitDate\")).thenReturn(\"2012-01-01\");\n        when(submission.getFieldValue(\"childSigns\")).thenReturn(\"child signs\");\n        when(submission.getFieldValue(\"childSignsOther\")).thenReturn(\"child signs other\");\n        when(submission.getFieldValue(\"reportChildDisease\")).thenReturn(\"report child disease\");\n        when(submission.getFieldValue(\"reportChildDiseaseOther\")).thenReturn(\"report child disease other\");\n        when(submission.getFieldValue(\"reportChildDiseaseDate\")).thenReturn(null);\n        when(submission.getFieldValue(\"reportChildDiseasePlace\")).thenReturn(\"report child disease place\");\n        when(submission.getFieldValue(\"childReferral\")).thenReturn(\"child referral\");\n\n        service.updateIllnessStatus(submission);\n\n        Map<String, String> map = EasyMap.create(\"sickVisitDate\", \"2012-01-01\")\n                .put(\"childSignsOther\", \"child signs other\")\n                .put(\"childSigns\", \"child signs\")\n                .put(\"reportChildDisease\", \"report child disease\")\n                .put(\"reportChildDiseaseOther\", \"report child disease other\")\n                .put(\"reportChildDiseaseDate\", null)\n                .put(\"reportChildDiseasePlace\", \"report child disease place\")\n                .put(\"childReferral\", \"child referral\").map();\n\n        verify(serviceProvidedService).add(forChildIllnessVisit(\"child id 1\", \"2012-01-01\", map));\n    }", "signature": "void shouldUpdateIllnessForUpdateIllnessAction()", "full_signature": "@Test public void shouldUpdateIllnessForUpdateIllnessAction()", "class_method_signature": "ChildServiceTest.shouldUpdateIllnessForUpdateIllnessAction()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "entityId", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "thenReturn", "when", "getFieldValue", "updateIllnessStatus", "map", "put", "put", "put", "put", "put", "put", "put", "create", "add", "verify", "forChildIllnessVisit"]}, "focal_class": {"identifier": "ChildService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AllBeneficiaries allBeneficiaries;", "modifier": "private", "type": "AllBeneficiaries", "declarator": "allBeneficiaries", "var_name": "allBeneficiaries"}, {"original_string": "private ChildRepository childRepository;", "modifier": "private", "type": "ChildRepository", "declarator": "childRepository", "var_name": "childRepository"}, {"original_string": "private MotherRepository motherRepository;", "modifier": "private", "type": "MotherRepository", "declarator": "motherRepository", "var_name": "motherRepository"}, {"original_string": "private AllTimelineEvents allTimelines;", "modifier": "private", "type": "AllTimelineEvents", "declarator": "allTimelines", "var_name": "allTimelines"}, {"original_string": "private ServiceProvidedService serviceProvidedService;", "modifier": "private", "type": "ServiceProvidedService", "declarator": "serviceProvidedService", "var_name": "serviceProvidedService"}, {"original_string": "private AllAlerts allAlerts;", "modifier": "private", "type": "AllAlerts", "declarator": "allAlerts", "var_name": "allAlerts"}], "methods": [{"identifier": "ChildService", "parameters": "(AllBeneficiaries allBeneficiaries, MotherRepository motherRepository, ChildRepository childRepository,\n                        AllTimelineEvents allTimelineEvents, ServiceProvidedService serviceProvidedService, AllAlerts allAlerts)", "modifiers": "public", "return": "", "signature": " ChildService(AllBeneficiaries allBeneficiaries, MotherRepository motherRepository, ChildRepository childRepository,\n                        AllTimelineEvents allTimelineEvents, ServiceProvidedService serviceProvidedService, AllAlerts allAlerts)", "full_signature": "public  ChildService(AllBeneficiaries allBeneficiaries, MotherRepository motherRepository, ChildRepository childRepository,\n                        AllTimelineEvents allTimelineEvents, ServiceProvidedService serviceProvidedService, AllAlerts allAlerts)", "class_method_signature": "ChildService.ChildService(AllBeneficiaries allBeneficiaries, MotherRepository motherRepository, ChildRepository childRepository,\n                        AllTimelineEvents allTimelineEvents, ServiceProvidedService serviceProvidedService, AllAlerts allAlerts)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void register(FormSubmission submission)", "full_signature": "public void register(FormSubmission submission)", "class_method_signature": "ChildService.register(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "isDeliveryOutcomeStillBirth", "parameters": "(FormSubmission submission)", "modifiers": "private", "return": "boolean", "signature": "boolean isDeliveryOutcomeStillBirth(FormSubmission submission)", "full_signature": "private boolean isDeliveryOutcomeStillBirth(FormSubmission submission)", "class_method_signature": "ChildService.isDeliveryOutcomeStillBirth(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "registerForEC", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void registerForEC(FormSubmission submission)", "full_signature": "public void registerForEC(FormSubmission submission)", "class_method_signature": "ChildService.registerForEC(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "closeMother", "parameters": "(String id)", "modifiers": "private", "return": "void", "signature": "void closeMother(String id)", "full_signature": "private void closeMother(String id)", "class_method_signature": "ChildService.closeMother(String id)", "testcase": false, "constructor": false}, {"identifier": "shouldCloseMother", "parameters": "(String shouldCloseMother)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldCloseMother(String shouldCloseMother)", "full_signature": "private boolean shouldCloseMother(String shouldCloseMother)", "class_method_signature": "ChildService.shouldCloseMother(String shouldCloseMother)", "testcase": false, "constructor": false}, {"identifier": "createImmunizationDateFieldMap", "parameters": "()", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> createImmunizationDateFieldMap()", "full_signature": "private Map<String, String> createImmunizationDateFieldMap()", "class_method_signature": "ChildService.createImmunizationDateFieldMap()", "testcase": false, "constructor": false}, {"identifier": "pncRegistrationOA", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void pncRegistrationOA(FormSubmission submission)", "full_signature": "public void pncRegistrationOA(FormSubmission submission)", "class_method_signature": "ChildService.pncRegistrationOA(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "handleStillBirth", "parameters": "(FormSubmission submission, SubForm subForm)", "modifiers": "private", "return": "boolean", "signature": "boolean handleStillBirth(FormSubmission submission, SubForm subForm)", "full_signature": "private boolean handleStillBirth(FormSubmission submission, SubForm subForm)", "class_method_signature": "ChildService.handleStillBirth(FormSubmission submission, SubForm subForm)", "testcase": false, "constructor": false}, {"identifier": "updateImmunizations", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void updateImmunizations(FormSubmission submission)", "full_signature": "public void updateImmunizations(FormSubmission submission)", "class_method_signature": "ChildService.updateImmunizations(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "splitFieldValueBySpace", "parameters": "(FormSubmission submission, String fieldName)", "modifiers": "private", "return": "ArrayList<String>", "signature": "ArrayList<String> splitFieldValueBySpace(FormSubmission submission, String fieldName)", "full_signature": "private ArrayList<String> splitFieldValueBySpace(FormSubmission submission, String fieldName)", "class_method_signature": "ChildService.splitFieldValueBySpace(FormSubmission submission, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "pncVisitHappened", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void pncVisitHappened(FormSubmission submission)", "full_signature": "public void pncVisitHappened(FormSubmission submission)", "class_method_signature": "ChildService.pncVisitHappened(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void close(FormSubmission submission)", "full_signature": "public void close(FormSubmission submission)", "class_method_signature": "ChildService.close(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "updatePhotoPath", "parameters": "(String entityId, String imagePath)", "modifiers": "public", "return": "void", "signature": "void updatePhotoPath(String entityId, String imagePath)", "full_signature": "public void updatePhotoPath(String entityId, String imagePath)", "class_method_signature": "ChildService.updatePhotoPath(String entityId, String imagePath)", "testcase": false, "constructor": false}, {"identifier": "updateIllnessStatus", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void updateIllnessStatus(FormSubmission submission)", "full_signature": "public void updateIllnessStatus(FormSubmission submission)", "class_method_signature": "ChildService.updateIllnessStatus(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "createChildIllnessMap", "parameters": "(FormSubmission submission)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> createChildIllnessMap(FormSubmission submission)", "full_signature": "private Map<String, String> createChildIllnessMap(FormSubmission submission)", "class_method_signature": "ChildService.createChildIllnessMap(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "updateVitaminAProvided", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void updateVitaminAProvided(FormSubmission submission)", "full_signature": "public void updateVitaminAProvided(FormSubmission submission)", "class_method_signature": "ChildService.updateVitaminAProvided(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "registerForOA", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void registerForOA(FormSubmission submission)", "full_signature": "public void registerForOA(FormSubmission submission)", "class_method_signature": "ChildService.registerForOA(FormSubmission submission)", "testcase": false, "constructor": false}], "file": "dristhi-app/src/main/java/org/ei/drishti/service/ChildService.java"}, "focal_method": {"identifier": "updateIllnessStatus", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "body": "public void updateIllnessStatus(FormSubmission submission) {\n        String sickVisitDate = submission.getFieldValue(SICK_VISIT_DATE);\n        String date = sickVisitDate != null ?\n                sickVisitDate : submission.getFieldValue(REPORT_CHILD_DISEASE_DATE);\n        serviceProvidedService.add(\n                ServiceProvided.forChildIllnessVisit(submission.entityId(),\n                        date,\n                        createChildIllnessMap(submission))\n        );\n    }", "signature": "void updateIllnessStatus(FormSubmission submission)", "full_signature": "public void updateIllnessStatus(FormSubmission submission)", "class_method_signature": "ChildService.updateIllnessStatus(FormSubmission submission)", "testcase": false, "constructor": false, "invocations": ["getFieldValue", "getFieldValue", "add", "forChildIllnessVisit", "entityId", "createChildIllnessMap"]}, "repository": {"repo_id": 5104280, "url": "https://github.com/SEL-Columbia/dristhi-app", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 11, "size": 79156, "license": "licensed"}}