{"test_class": {"identifier": "BackupImapStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/zegoggles/smssync/mail/BackupImapStoreTest.java"}, "test_case": {"identifier": "testShouldCreateCorrectTrustFactoryForTrustedTLSUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testShouldCreateCorrectTrustFactoryForTrustedTLSUrl() throws Exception {\n        String uri = \"imap+tls+://xoauth:foooo@imap.gmail.com\";\n        BackupImapStore store = new BackupImapStore(RuntimeEnvironment.application, uri, false);\n        assertThat(store.getTrustedSocketFactory()).isInstanceOf(DefaultTrustedSocketFactory.class);\n    }", "signature": "void testShouldCreateCorrectTrustFactoryForTrustedTLSUrl()", "full_signature": "@Test public void testShouldCreateCorrectTrustFactoryForTrustedTLSUrl()", "class_method_signature": "BackupImapStoreTest.testShouldCreateCorrectTrustFactoryForTrustedTLSUrl()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThat", "getTrustedSocketFactory"]}, "focal_class": {"identifier": "BackupImapStore", "superclass": "extends ImapStore", "interfaces": "", "fields": [{"original_string": "private final Map<DataType, BackupFolder> openFolders = new HashMap<DataType, BackupFolder>();", "modifier": "private final", "type": "Map<DataType, BackupFolder>", "declarator": "openFolders = new HashMap<DataType, BackupFolder>()", "var_name": "openFolders"}], "methods": [{"identifier": "BackupImapStore", "parameters": "(final Context context, final String uri,\n                           boolean trustAllCertificates)", "modifiers": "public", "return": "", "signature": " BackupImapStore(final Context context, final String uri,\n                           boolean trustAllCertificates)", "full_signature": "public  BackupImapStore(final Context context, final String uri,\n                           boolean trustAllCertificates)", "class_method_signature": "BackupImapStore.BackupImapStore(final Context context, final String uri,\n                           boolean trustAllCertificates)", "testcase": false, "constructor": true}, {"identifier": "getFolder", "parameters": "(DataType type, DataTypePreferences preferences)", "modifiers": "public", "return": "BackupFolder", "signature": "BackupFolder getFolder(DataType type, DataTypePreferences preferences)", "full_signature": "public BackupFolder getFolder(DataType type, DataTypePreferences preferences)", "class_method_signature": "BackupImapStore.getFolder(DataType type, DataTypePreferences preferences)", "testcase": false, "constructor": false}, {"identifier": "closeFolders", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeFolders()", "full_signature": "public void closeFolders()", "class_method_signature": "BackupImapStore.closeFolders()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BackupImapStore.toString()", "testcase": false, "constructor": false}, {"identifier": "getStoreUriForLogging", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStoreUriForLogging()", "full_signature": "public String getStoreUriForLogging()", "class_method_signature": "BackupImapStore.getStoreUriForLogging()", "testcase": false, "constructor": false}, {"identifier": "getTrustedSocketFactory", "parameters": "()", "modifiers": "", "return": "TrustedSocketFactory", "signature": "TrustedSocketFactory getTrustedSocketFactory()", "full_signature": " TrustedSocketFactory getTrustedSocketFactory()", "class_method_signature": "BackupImapStore.getTrustedSocketFactory()", "testcase": false, "constructor": false}, {"identifier": "createAndOpenFolder", "parameters": "(DataType type, @NonNull String label)", "modifiers": "private @NonNull", "return": "BackupFolder", "signature": "BackupFolder createAndOpenFolder(DataType type, @NonNull String label)", "full_signature": "private @NonNull BackupFolder createAndOpenFolder(DataType type, @NonNull String label)", "class_method_signature": "BackupImapStore.createAndOpenFolder(DataType type, @NonNull String label)", "testcase": false, "constructor": false}, {"identifier": "getStoreUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStoreUri()", "full_signature": "public String getStoreUri()", "class_method_signature": "BackupImapStore.getStoreUri()", "testcase": false, "constructor": false}, {"identifier": "isValidImapFolder", "parameters": "(String imapFolder)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidImapFolder(String imapFolder)", "full_signature": "public static boolean isValidImapFolder(String imapFolder)", "class_method_signature": "BackupImapStore.isValidImapFolder(String imapFolder)", "testcase": false, "constructor": false}, {"identifier": "isValidUri", "parameters": "(String uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidUri(String uri)", "full_signature": "public static boolean isValidUri(String uri)", "class_method_signature": "BackupImapStore.isValidUri(String uri)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/zegoggles/smssync/mail/BackupImapStore.java"}, "focal_method": {"identifier": "getTrustedSocketFactory", "parameters": "()", "modifiers": "", "return": "TrustedSocketFactory", "body": "TrustedSocketFactory getTrustedSocketFactory() {\n        return mTrustedSocketFactory;\n    }", "signature": "TrustedSocketFactory getTrustedSocketFactory()", "full_signature": " TrustedSocketFactory getTrustedSocketFactory()", "class_method_signature": "BackupImapStore.getTrustedSocketFactory()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 459348, "url": "https://github.com/jberkel/sms-backup-plus", "language": "Java", "is_fork": false, "fork_count": 481, "stargazer_count": 1507, "size": 16365, "license": "licensed"}}