{"test_class": {"identifier": "TestGlobPredicate", "superclass": "", "interfaces": "", "fields": [], "file": "airship-coordinator/src/test/java/io/airlift/airship/coordinator/TestGlobPredicate.java"}, "test_case": {"identifier": "testGlobPredicate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGlobPredicate()\n    {\n        GlobPredicate globPredicate = new GlobPredicate(\"*\");\n        assertTrue(globPredicate.apply(\"text\"));\n        assertTrue(globPredicate.apply(\"\"));\n        assertFalse(globPredicate.apply(null));\n\n        globPredicate = new GlobPredicate(\"a*b*\");\n        assertTrue(globPredicate.apply(\"aXbX\"));\n        assertFalse(globPredicate.apply(null));\n        assertFalse(globPredicate.apply(\"x\"));\n        assertFalse(globPredicate.apply(\"xab\"));\n\n        globPredicate = new GlobPredicate(\"*.txt\");\n        assertTrue(globPredicate.apply(\"readme.txt\"));\n        assertTrue(globPredicate.apply(\".txt\"));\n        assertTrue(globPredicate.apply(\" .txt\"));\n        assertFalse(globPredicate.apply(null));\n        assertFalse(globPredicate.apply(\"txt\"));\n        assertFalse(globPredicate.apply(\"readme.txts\"));\n\n        globPredicate = new GlobPredicate(\"[abc].txt\");\n        assertTrue(globPredicate.apply(\"a.txt\"));\n        assertTrue(globPredicate.apply(\"b.txt\"));\n        assertTrue(globPredicate.apply(\"c.txt\"));\n        assertFalse(globPredicate.apply(null));\n        assertFalse(globPredicate.apply(\"x.txt\"));\n        assertFalse(globPredicate.apply(\"a.tt\"));\n        assertFalse(globPredicate.apply(\"aa.txt\"));\n        assertFalse(globPredicate.apply(\" .txt\"));\n\n        globPredicate = new GlobPredicate(\"*.{txt,html}\");\n        assertTrue(globPredicate.apply(\"readme.txt\"));\n        assertTrue(globPredicate.apply(\"readme.html\"));\n        assertTrue(globPredicate.apply(\".txt\"));\n        assertTrue(globPredicate.apply(\".html\"));\n        assertTrue(globPredicate.apply(\" .txt\"));\n        assertTrue(globPredicate.apply(\" .html\"));\n        assertFalse(globPredicate.apply(null));\n        assertFalse(globPredicate.apply(\"txt\"));\n        assertFalse(globPredicate.apply(\"html\"));\n        assertFalse(globPredicate.apply(\"*.{txt,html}\"));\n        assertFalse(globPredicate.apply(\"readme.txthtml\"));\n    }", "signature": "void testGlobPredicate()", "full_signature": "@Test public void testGlobPredicate()", "class_method_signature": "TestGlobPredicate.testGlobPredicate()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "apply", "assertTrue", "apply", "assertFalse", "apply", "assertTrue", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply"]}, "focal_class": {"identifier": "GlobPredicate", "superclass": "extends RegexPredicate", "interfaces": "", "fields": [{"original_string": "private final String glob;", "modifier": "private final", "type": "String", "declarator": "glob", "var_name": "glob"}], "methods": [{"identifier": "GlobPredicate", "parameters": "(String glob)", "modifiers": "public", "return": "", "signature": " GlobPredicate(String glob)", "full_signature": "public  GlobPredicate(String glob)", "class_method_signature": "GlobPredicate.GlobPredicate(String glob)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GlobPredicate.toString()", "testcase": false, "constructor": false}, {"identifier": "globToPattern", "parameters": "(String glob)", "modifiers": "public static", "return": "Pattern", "signature": "Pattern globToPattern(String glob)", "full_signature": "public static Pattern globToPattern(String glob)", "class_method_signature": "GlobPredicate.globToPattern(String glob)", "testcase": false, "constructor": false}], "file": "airship-coordinator/src/main/java/io/airlift/airship/coordinator/GlobPredicate.java"}, "focal_method": {"identifier": "GlobPredicate", "parameters": "(String glob)", "modifiers": "public", "return": "", "body": "public GlobPredicate(String glob)\n    {\n        super(globToPattern(glob));\n        this.glob = glob;\n    }", "signature": " GlobPredicate(String glob)", "full_signature": "public  GlobPredicate(String glob)", "class_method_signature": "GlobPredicate.GlobPredicate(String glob)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 5175291, "url": "https://github.com/airlift/airship", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 31, "size": 4899, "license": "licensed"}}