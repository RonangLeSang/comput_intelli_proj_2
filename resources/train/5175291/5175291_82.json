{"test_class": {"identifier": "TestStrings", "superclass": "", "interfaces": "", "fields": [], "file": "airship-shared/src/test/java/io/airlift/airship/shared/TestStrings.java"}, "test_case": {"identifier": "testShortestUniquePrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShortestUniquePrefix()\n    {\n        assertEquals(shortestUniquePrefix(of(\"aa\", \"aaa\")), 3);\n        assertEquals(shortestUniquePrefix(of(\"a\")), 1);\n        assertEquals(shortestUniquePrefix(of(\"aaaaa\")), 1);\n        assertEquals(shortestUniquePrefix(of(\"a\", \"b\", \"c\")), 1);\n        assertEquals(shortestUniquePrefix(of(\"axxxxx\", \"b\", \"c\")), 1);\n        assertEquals(shortestUniquePrefix(of(\"ax\", \"bx\", \"cx\")), 1);\n        assertEquals(shortestUniquePrefix(of(\"ax\", \"ay\", \"cx\")), 2);\n        assertEquals(shortestUniquePrefix(of(\"axxx\", \"ayyyy\", \"cxxxx\")), 2);\n        assertEquals(shortestUniquePrefix(of(\"aaaax\", \"aaaay\")), 5);\n        assertEquals(shortestUniquePrefix(of(\"aaaaxx\", \"aaaayx\", \"ccc\")), 5);\n\n        assertEquals(shortestUniquePrefix(of(\"a1\", \"b2\", \"b3\", \"b4\", \"b5\")), 2);\n    }", "signature": "void testShortestUniquePrefix()", "full_signature": "@Test public void testShortestUniquePrefix()", "class_method_signature": "TestStrings.testShortestUniquePrefix()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of", "assertEquals", "shortestUniquePrefix", "of"]}, "focal_class": {"identifier": "Strings", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "commonPrefixSegments", "parameters": "(char separator, Collection<String> strings)", "modifiers": "public static", "return": "int", "signature": "int commonPrefixSegments(char separator, Collection<String> strings)", "full_signature": "public static int commonPrefixSegments(char separator, Collection<String> strings)", "class_method_signature": "Strings.commonPrefixSegments(char separator, Collection<String> strings)", "testcase": false, "constructor": false}, {"identifier": "commonPrefixSegments", "parameters": "(char separator, Collection<String> strings, int minSize)", "modifiers": "public static", "return": "int", "signature": "int commonPrefixSegments(char separator, Collection<String> strings, int minSize)", "full_signature": "public static int commonPrefixSegments(char separator, Collection<String> strings, int minSize)", "class_method_signature": "Strings.commonPrefixSegments(char separator, Collection<String> strings, int minSize)", "testcase": false, "constructor": false}, {"identifier": "isPartEqual", "parameters": "(int partNumber, List<List<String>> stringsParts)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPartEqual(int partNumber, List<List<String>> stringsParts)", "full_signature": "private static boolean isPartEqual(int partNumber, List<List<String>> stringsParts)", "class_method_signature": "Strings.isPartEqual(int partNumber, List<List<String>> stringsParts)", "testcase": false, "constructor": false}, {"identifier": "trimLeadingSegments", "parameters": "(String string, char separator, int segmentCount)", "modifiers": "public static", "return": "String", "signature": "String trimLeadingSegments(String string, char separator, int segmentCount)", "full_signature": "public static String trimLeadingSegments(String string, char separator, int segmentCount)", "class_method_signature": "Strings.trimLeadingSegments(String string, char separator, int segmentCount)", "testcase": false, "constructor": false}, {"identifier": "shortestUniquePrefix", "parameters": "(Collection<String> strings)", "modifiers": "public static", "return": "int", "signature": "int shortestUniquePrefix(Collection<String> strings)", "full_signature": "public static int shortestUniquePrefix(Collection<String> strings)", "class_method_signature": "Strings.shortestUniquePrefix(Collection<String> strings)", "testcase": false, "constructor": false}, {"identifier": "shortestUniquePrefix", "parameters": "(Collection<String> strings, int minSize)", "modifiers": "public static", "return": "int", "signature": "int shortestUniquePrefix(Collection<String> strings, int minSize)", "full_signature": "public static int shortestUniquePrefix(Collection<String> strings, int minSize)", "class_method_signature": "Strings.shortestUniquePrefix(Collection<String> strings, int minSize)", "testcase": false, "constructor": false}, {"identifier": "shortestUniquePrefixStartingAt", "parameters": "(List<String> strings, int charPosition)", "modifiers": "private static", "return": "int", "signature": "int shortestUniquePrefixStartingAt(List<String> strings, int charPosition)", "full_signature": "private static int shortestUniquePrefixStartingAt(List<String> strings, int charPosition)", "class_method_signature": "Strings.shortestUniquePrefixStartingAt(List<String> strings, int charPosition)", "testcase": false, "constructor": false}, {"identifier": "safeTruncate", "parameters": "(String string, int length)", "modifiers": "public static", "return": "String", "signature": "String safeTruncate(String string, int length)", "full_signature": "public static String safeTruncate(String string, int length)", "class_method_signature": "Strings.safeTruncate(String string, int length)", "testcase": false, "constructor": false}, {"identifier": "lengthGetter", "parameters": "()", "modifiers": "private static", "return": "Function<String, Integer>", "signature": "Function<String, Integer> lengthGetter()", "full_signature": "private static Function<String, Integer> lengthGetter()", "class_method_signature": "Strings.lengthGetter()", "testcase": false, "constructor": false}], "file": "airship-shared/src/main/java/io/airlift/airship/shared/Strings.java"}, "focal_method": {"identifier": "shortestUniquePrefix", "parameters": "(Collection<String> strings)", "modifiers": "public static", "return": "int", "body": "public static int shortestUniquePrefix(Collection<String> strings)\n    {\n        return shortestUniquePrefix(strings, 1);\n    }", "signature": "int shortestUniquePrefix(Collection<String> strings)", "full_signature": "public static int shortestUniquePrefix(Collection<String> strings)", "class_method_signature": "Strings.shortestUniquePrefix(Collection<String> strings)", "testcase": false, "constructor": false, "invocations": ["shortestUniquePrefix"]}, "repository": {"repo_id": 5175291, "url": "https://github.com/airlift/airship", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 31, "size": 4899, "license": "licensed"}}