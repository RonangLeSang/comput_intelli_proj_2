{"test_class": {"identifier": "WebSSOProfileConsumerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ApplicationContext context;", "modifier": "", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "WebSSOProfileConsumerImpl profile;", "modifier": "", "type": "WebSSOProfileConsumerImpl", "declarator": "profile", "var_name": "profile"}, {"original_string": "SAMLMessageStorage storage;", "modifier": "", "type": "SAMLMessageStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "SAMLMessageContext messageContext;", "modifier": "", "type": "SAMLMessageContext", "declarator": "messageContext", "var_name": "messageContext"}, {"original_string": "MetadataManager manager;", "modifier": "", "type": "MetadataManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "XMLObjectBuilderFactory builderFactory;", "modifier": "", "type": "XMLObjectBuilderFactory", "declarator": "builderFactory", "var_name": "builderFactory"}, {"original_string": "WebSSOProfileTestHelper helper;", "modifier": "", "type": "WebSSOProfileTestHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "KeyManager resolver;", "modifier": "", "type": "KeyManager", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "SAMLProcessor processor;", "modifier": "", "type": "SAMLProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "SAMLContextProvider contextProvider;", "modifier": "", "type": "SAMLContextProvider", "declarator": "contextProvider", "var_name": "contextProvider"}], "file": "core/src/test/java/org/springframework/security/saml/websso/WebSSOProfileConsumerImplTest.java"}, "test_case": {"identifier": "testMissingResponse", "parameters": "()", "modifiers": "@Test(expected = SAMLException.class) public", "return": "void", "body": "@Test(expected = SAMLException.class)\n    public void testMissingResponse() throws Exception {\n        messageContext.setInboundSAMLMessage(null);\n        profile.processAuthenticationResponse(messageContext);\n    }", "signature": "void testMissingResponse()", "full_signature": "@Test(expected = SAMLException.class) public void testMissingResponse()", "class_method_signature": "WebSSOProfileConsumerImplTest.testMissingResponse()", "testcase": true, "constructor": false, "invocations": ["setInboundSAMLMessage", "processAuthenticationResponse"]}, "focal_class": {"identifier": "WebSSOProfileConsumerImpl", "superclass": "extends AbstractProfileBase", "interfaces": "implements WebSSOProfileConsumer", "fields": [{"original_string": "private long maxAuthenticationAge = 7200;", "modifier": "private", "type": "long", "declarator": "maxAuthenticationAge = 7200", "var_name": "maxAuthenticationAge"}, {"original_string": "private boolean includeAllAttributes = false;", "modifier": "private", "type": "boolean", "declarator": "includeAllAttributes = false", "var_name": "includeAllAttributes"}, {"original_string": "private boolean releaseDOM = true;", "modifier": "private", "type": "boolean", "declarator": "releaseDOM = true", "var_name": "releaseDOM"}], "methods": [{"identifier": "WebSSOProfileConsumerImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " WebSSOProfileConsumerImpl()", "full_signature": "public  WebSSOProfileConsumerImpl()", "class_method_signature": "WebSSOProfileConsumerImpl.WebSSOProfileConsumerImpl()", "testcase": false, "constructor": true}, {"identifier": "WebSSOProfileConsumerImpl", "parameters": "(SAMLProcessor processor, MetadataManager manager)", "modifiers": "public", "return": "", "signature": " WebSSOProfileConsumerImpl(SAMLProcessor processor, MetadataManager manager)", "full_signature": "public  WebSSOProfileConsumerImpl(SAMLProcessor processor, MetadataManager manager)", "class_method_signature": "WebSSOProfileConsumerImpl.WebSSOProfileConsumerImpl(SAMLProcessor processor, MetadataManager manager)", "testcase": false, "constructor": true}, {"identifier": "getProfileIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getProfileIdentifier()", "full_signature": "@Override public String getProfileIdentifier()", "class_method_signature": "WebSSOProfileConsumerImpl.getProfileIdentifier()", "testcase": false, "constructor": false}, {"identifier": "processAuthenticationResponse", "parameters": "(SAMLMessageContext context)", "modifiers": "public", "return": "SAMLCredential", "signature": "SAMLCredential processAuthenticationResponse(SAMLMessageContext context)", "full_signature": "public SAMLCredential processAuthenticationResponse(SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.processAuthenticationResponse(SAMLMessageContext context)", "testcase": false, "constructor": false}, {"identifier": "processAdditionalData", "parameters": "(SAMLMessageContext context)", "modifiers": "protected", "return": "Serializable", "signature": "Serializable processAdditionalData(SAMLMessageContext context)", "full_signature": "protected Serializable processAdditionalData(SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.processAdditionalData(SAMLMessageContext context)", "testcase": false, "constructor": false}, {"identifier": "verifyAssertion", "parameters": "(Assertion assertion, AuthnRequest request, SAMLMessageContext context)", "modifiers": "protected", "return": "void", "signature": "void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context)", "full_signature": "protected void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context)", "testcase": false, "constructor": false}, {"identifier": "verifySubject", "parameters": "(Subject subject, AuthnRequest request, SAMLMessageContext context)", "modifiers": "protected", "return": "void", "signature": "void verifySubject(Subject subject, AuthnRequest request, SAMLMessageContext context)", "full_signature": "protected void verifySubject(Subject subject, AuthnRequest request, SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.verifySubject(Subject subject, AuthnRequest request, SAMLMessageContext context)", "testcase": false, "constructor": false}, {"identifier": "verifyAssertionSignature", "parameters": "(Signature signature, SAMLMessageContext context)", "modifiers": "protected", "return": "void", "signature": "void verifyAssertionSignature(Signature signature, SAMLMessageContext context)", "full_signature": "protected void verifyAssertionSignature(Signature signature, SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.verifyAssertionSignature(Signature signature, SAMLMessageContext context)", "testcase": false, "constructor": false}, {"identifier": "verifyAssertionConditions", "parameters": "(Conditions conditions, SAMLMessageContext context, boolean audienceRequired)", "modifiers": "protected", "return": "void", "signature": "void verifyAssertionConditions(Conditions conditions, SAMLMessageContext context, boolean audienceRequired)", "full_signature": "protected void verifyAssertionConditions(Conditions conditions, SAMLMessageContext context, boolean audienceRequired)", "class_method_signature": "WebSSOProfileConsumerImpl.verifyAssertionConditions(Conditions conditions, SAMLMessageContext context, boolean audienceRequired)", "testcase": false, "constructor": false}, {"identifier": "verifyAudience", "parameters": "(SAMLMessageContext context, List<AudienceRestriction> audienceRestrictions)", "modifiers": "protected", "return": "void", "signature": "void verifyAudience(SAMLMessageContext context, List<AudienceRestriction> audienceRestrictions)", "full_signature": "protected void verifyAudience(SAMLMessageContext context, List<AudienceRestriction> audienceRestrictions)", "class_method_signature": "WebSSOProfileConsumerImpl.verifyAudience(SAMLMessageContext context, List<AudienceRestriction> audienceRestrictions)", "testcase": false, "constructor": false}, {"identifier": "verifyConditions", "parameters": "(SAMLMessageContext context, List<Condition> conditions)", "modifiers": "protected", "return": "void", "signature": "void verifyConditions(SAMLMessageContext context, List<Condition> conditions)", "full_signature": "protected void verifyConditions(SAMLMessageContext context, List<Condition> conditions)", "class_method_signature": "WebSSOProfileConsumerImpl.verifyConditions(SAMLMessageContext context, List<Condition> conditions)", "testcase": false, "constructor": false}, {"identifier": "verifyAuthenticationStatement", "parameters": "(AuthnStatement auth, RequestedAuthnContext requestedAuthnContext, SAMLMessageContext context)", "modifiers": "protected", "return": "void", "signature": "void verifyAuthenticationStatement(AuthnStatement auth, RequestedAuthnContext requestedAuthnContext, SAMLMessageContext context)", "full_signature": "protected void verifyAuthenticationStatement(AuthnStatement auth, RequestedAuthnContext requestedAuthnContext, SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.verifyAuthenticationStatement(AuthnStatement auth, RequestedAuthnContext requestedAuthnContext, SAMLMessageContext context)", "testcase": false, "constructor": false}, {"identifier": "verifyAuthnContext", "parameters": "(RequestedAuthnContext requestedAuthnContext, AuthnContext receivedContext, SAMLMessageContext context)", "modifiers": "protected", "return": "void", "signature": "void verifyAuthnContext(RequestedAuthnContext requestedAuthnContext, AuthnContext receivedContext, SAMLMessageContext context)", "full_signature": "protected void verifyAuthnContext(RequestedAuthnContext requestedAuthnContext, AuthnContext receivedContext, SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.verifyAuthnContext(RequestedAuthnContext requestedAuthnContext, AuthnContext receivedContext, SAMLMessageContext context)", "testcase": false, "constructor": false}, {"identifier": "getMaxAuthenticationAge", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxAuthenticationAge()", "full_signature": "public long getMaxAuthenticationAge()", "class_method_signature": "WebSSOProfileConsumerImpl.getMaxAuthenticationAge()", "testcase": false, "constructor": false}, {"identifier": "setMaxAuthenticationAge", "parameters": "(long maxAuthenticationAge)", "modifiers": "public", "return": "void", "signature": "void setMaxAuthenticationAge(long maxAuthenticationAge)", "full_signature": "public void setMaxAuthenticationAge(long maxAuthenticationAge)", "class_method_signature": "WebSSOProfileConsumerImpl.setMaxAuthenticationAge(long maxAuthenticationAge)", "testcase": false, "constructor": false}, {"identifier": "isIncludeAllAttributes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeAllAttributes()", "full_signature": "public boolean isIncludeAllAttributes()", "class_method_signature": "WebSSOProfileConsumerImpl.isIncludeAllAttributes()", "testcase": false, "constructor": false}, {"identifier": "setIncludeAllAttributes", "parameters": "(boolean includeAllAttributes)", "modifiers": "public", "return": "void", "signature": "void setIncludeAllAttributes(boolean includeAllAttributes)", "full_signature": "public void setIncludeAllAttributes(boolean includeAllAttributes)", "class_method_signature": "WebSSOProfileConsumerImpl.setIncludeAllAttributes(boolean includeAllAttributes)", "testcase": false, "constructor": false}, {"identifier": "isReleaseDOM", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReleaseDOM()", "full_signature": "public boolean isReleaseDOM()", "class_method_signature": "WebSSOProfileConsumerImpl.isReleaseDOM()", "testcase": false, "constructor": false}, {"identifier": "setReleaseDOM", "parameters": "(boolean releaseDOM)", "modifiers": "public", "return": "void", "signature": "void setReleaseDOM(boolean releaseDOM)", "full_signature": "public void setReleaseDOM(boolean releaseDOM)", "class_method_signature": "WebSSOProfileConsumerImpl.setReleaseDOM(boolean releaseDOM)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/security/saml/websso/WebSSOProfileConsumerImpl.java"}, "focal_method": {"identifier": "processAuthenticationResponse", "parameters": "(SAMLMessageContext context)", "modifiers": "public", "return": "SAMLCredential", "body": "public SAMLCredential processAuthenticationResponse(SAMLMessageContext context) throws SAMLException, org.opensaml.xml.security.SecurityException, ValidationException, DecryptionException {\n\n        AuthnRequest request = null;\n        SAMLObject message = context.getInboundSAMLMessage();\n\n        // Verify type\n        if (!(message instanceof Response)) {\n            throw new SAMLException(\"Message is not of a Response object type\");\n        }\n        Response response = (Response) message;\n\n        // Verify status\n\t\tStatusCode statusCode = response.getStatus().getStatusCode();\n\t\tif (!StatusCode.SUCCESS_URI.equals(statusCode.getValue())) {\n            StatusMessage statusMessage = response.getStatus().getStatusMessage();\n            String statusMessageText = null;\n            if (statusMessage != null) {\n                statusMessageText = statusMessage.getMessage();\n            }\n\t\t\t// The final status code will be the most internal one\n\t\t\tString finalStatusCode = statusCode.getValue();\n\t\t\twhile (statusCode.getStatusCode() != null){\n\t\t\t\tfinalStatusCode = statusCode.getStatusCode().getValue();\n\t\t\t\tstatusCode = statusCode.getStatusCode();\n\t\t\t}\n\t\t\tthrow new SAMLStatusException(\n\t\t\t\tfinalStatusCode,\n\t\t\t\t\"Response has invalid status code \" + finalStatusCode + \", status message is \" + statusMessageText\n\t\t\t);\n        }\n\n        // Verify signature of the response if present, unless already verified in binding\n        if (response.getSignature() != null && !context.isInboundSAMLMessageAuthenticated()) {\n            log.debug(\"Verifying Response signature\");\n            verifySignature(response.getSignature(), context.getPeerEntityId(), context.getLocalTrustEngine());\n            context.setInboundSAMLMessageAuthenticated(true);\n        }\n\n        // Verify issue time\n        DateTime time = response.getIssueInstant();\n        if (!isDateTimeSkewValid(getResponseSkew(), time)) {\n            throw new SAMLException(\"Response issue time is either too old or with date in the future, skew \" + getResponseSkew() + \", time \" + time);\n        }\n\n        // Reject unsolicited messages when disabled\n        if (!context.getPeerExtendedMetadata().isSupportUnsolicitedResponse() && response.getInResponseTo() == null) {\n            throw new SAMLException(\"Reception of Unsolicited Response messages (without InResponseToField) is disabled\");\n        }\n\n        // Verify response to field if present, set request if correct\n        SAMLMessageStorage messageStorage = context.getMessageStorage();\n        if (messageStorage != null && response.getInResponseTo() != null) {\n            XMLObject xmlObject = messageStorage.retrieveMessage(response.getInResponseTo());\n            if (xmlObject == null) {\n                throw new SAMLException(\"InResponseToField of the Response doesn't correspond to sent message \" + response.getInResponseTo());\n            } else if (xmlObject instanceof AuthnRequest) {\n                request = (AuthnRequest) xmlObject;\n            } else {\n                throw new SAMLException(\"Sent request was of different type than the expected AuthnRequest \" + response.getInResponseTo());\n            }\n        }\n\n        // Verify that message was received at the expected endpoint\n        verifyEndpoint(context.getLocalEntityEndpoint(), response.getDestination());\n\n        // Verify endpoint requested in the original request\n        if (request != null) {\n            AssertionConsumerService assertionConsumerService = (AssertionConsumerService) context.getLocalEntityEndpoint();\n            if (request.getAssertionConsumerServiceIndex() != null) {\n                if (!request.getAssertionConsumerServiceIndex().equals(assertionConsumerService.getIndex())) {\n                    log.info(\"Response was received at a different endpoint index than was requested\");\n                }\n            } else {\n                String requestedResponseURL = request.getAssertionConsumerServiceURL();\n                String requestedBinding = request.getProtocolBinding();\n                if (requestedResponseURL != null) {\n                    String responseLocation;\n                    if (assertionConsumerService.getResponseLocation() != null) {\n                        responseLocation = assertionConsumerService.getResponseLocation();\n                    } else {\n                        responseLocation = assertionConsumerService.getLocation();\n                    }\n                    if (!requestedResponseURL.equals(responseLocation)) {\n                        log.info(\"Response was received at a different endpoint URL {} than was requested {}\", responseLocation, requestedResponseURL);\n                    }\n                }\n                if (requestedBinding != null) {\n                    if (!requestedBinding.equals(context.getInboundSAMLBinding())) {\n                        log.info(\"Response was received using a different binding {} than was requested {}\", context.getInboundSAMLBinding(), requestedBinding);\n                    }\n                }\n            }\n        }\n\n        // Verify issuer\n        if (response.getIssuer() != null) {\n            log.debug(\"Verifying issuer of the Response\");\n            Issuer issuer = response.getIssuer();\n            verifyIssuer(issuer, context);\n        }\n\n        Assertion subjectAssertion = null;\n        List<Attribute> attributes = new ArrayList<Attribute>();\n        List<Assertion> assertionList = response.getAssertions();\n\n        // Decrypt assertions\n        if (response.getEncryptedAssertions().size() > 0) {\n            assertionList = new ArrayList<Assertion>(response.getAssertions().size() + response.getEncryptedAssertions().size());\n            assertionList.addAll(response.getAssertions());\n            List<EncryptedAssertion> encryptedAssertionList = response.getEncryptedAssertions();\n            for (EncryptedAssertion ea : encryptedAssertionList) {\n                try {\n                    Assert.notNull(context.getLocalDecrypter(), \"Can't decrypt Assertion, no decrypter is set in the context\");\n                    log.debug(\"Decrypting assertion\");\n                    Assertion decryptedAssertion = context.getLocalDecrypter().decrypt(ea);\n                    assertionList.add(decryptedAssertion);\n                } catch (DecryptionException e) {\n                    log.debug(\"Decryption of received assertion failed, assertion will be skipped\", e);\n                }\n            }\n        }\n\n        Exception lastError = null;\n\n        // Find the assertion to be used for session creation and verify\n        for (Assertion assertion : assertionList) {\n            if (assertion.getAuthnStatements().size() > 0) {\n                try {\n                    // Verify that the assertion is valid\n                    verifyAssertion(assertion, request, context);\n                    subjectAssertion = assertion;\n                    log.debug(\"Validation of authentication statement in assertion {} was successful\", assertion.getID());\n                    break;\n                } catch (Exception e) {\n                    log.debug(\"Validation of authentication statement in assertion failed, skipping\", e);\n                    lastError = e;\n                }\n            } else {\n                log.debug(\"Assertion {} did not contain any authentication statements, skipping\", assertion.getID());\n            }\n        }\n\n        // Make sure that at least one assertion contains authentication statement and subject with bearer confirmation\n        if (subjectAssertion == null) {\n            throw new SAMLException(\"Response doesn't have any valid assertion which would pass subject validation\", lastError);\n        }\n\n        // Process attributes from assertions\n        for (Assertion assertion : assertionList) {\n            if (assertion == subjectAssertion || isIncludeAllAttributes()) {\n                for (AttributeStatement attStatement : assertion.getAttributeStatements()) {\n                    for (Attribute att : attStatement.getAttributes()) {\n                        log.debug(\"Including attribute {} from assertion {}\", att.getName(), assertion.getID());\n                        attributes.add(att);\n                    }\n                    for (EncryptedAttribute att : attStatement.getEncryptedAttributes()) {\n                        Assert.notNull(context.getLocalDecrypter(), \"Can't decrypt Attribute, no decrypter is set in the context\");\n                        Attribute decryptedAttribute = context.getLocalDecrypter().decrypt(att);\n                        log.debug(\"Including decrypted attribute {} from assertion {}\", decryptedAttribute.getName(), assertion.getID());\n                        attributes.add(decryptedAttribute);\n                    }\n                }\n            }\n        }\n\n        NameID nameId = (NameID) context.getSubjectNameIdentifier();\n        if (nameId == null) {\n            throw new SAMLException(\"NameID element must be present as part of the Subject in the Response message, please enable it in the IDP configuration\");\n        }\n\n        // Populate custom data, if any\n        Serializable additionalData = processAdditionalData(context);\n\n        // Release extra DOM data which might get otherwise stored in session\n        if (isReleaseDOM()) {\n            subjectAssertion.releaseDOM();\n            subjectAssertion.releaseChildrenDOM(true);\n        }\n\n        // Create the credential\n        return new SAMLCredential(nameId, subjectAssertion, context.getPeerEntityMetadata().getEntityID(), context.getRelayState(), attributes, context.getLocalEntityId(), additionalData);\n\n    }", "signature": "SAMLCredential processAuthenticationResponse(SAMLMessageContext context)", "full_signature": "public SAMLCredential processAuthenticationResponse(SAMLMessageContext context)", "class_method_signature": "WebSSOProfileConsumerImpl.processAuthenticationResponse(SAMLMessageContext context)", "testcase": false, "constructor": false, "invocations": ["getInboundSAMLMessage", "getStatusCode", "getStatus", "equals", "getValue", "getStatusMessage", "getStatus", "getMessage", "getValue", "getStatusCode", "getValue", "getStatusCode", "getStatusCode", "getSignature", "isInboundSAMLMessageAuthenticated", "debug", "verifySignature", "getSignature", "getPeerEntityId", "getLocalTrustEngine", "setInboundSAMLMessageAuthenticated", "getIssueInstant", "isDateTimeSkewValid", "getResponseSkew", "getResponseSkew", "isSupportUnsolicitedResponse", "getPeerExtendedMetadata", "getInResponseTo", "getMessageStorage", "getInResponseTo", "retrieveMessage", "getInResponseTo", "getInResponseTo", "getInResponseTo", "verifyEndpoint", "getLocalEntityEndpoint", "getDestination", "getLocalEntityEndpoint", "getAssertionConsumerServiceIndex", "equals", "getAssertionConsumerServiceIndex", "getIndex", "info", "getAssertionConsumerServiceURL", "getProtocolBinding", "getResponseLocation", "getResponseLocation", "getLocation", "equals", "info", "equals", "getInboundSAMLBinding", "info", "getInboundSAMLBinding", "getIssuer", "debug", "getIssuer", "verifyIssuer", "getAssertions", "size", "getEncryptedAssertions", "size", "getAssertions", "size", "getEncryptedAssertions", "addAll", "getAssertions", "getEncryptedAssertions", "notNull", "getLocalDecrypter", "debug", "decrypt", "getLocalDecrypter", "add", "debug", "size", "getAuthnStatements", "verifyAssertion", "debug", "getID", "debug", "debug", "getID", "isIncludeAllAttributes", "getAttributeStatements", "getAttributes", "debug", "getName", "getID", "add", "getEncryptedAttributes", "notNull", "getLocalDecrypter", "decrypt", "getLocalDecrypter", "debug", "getName", "getID", "add", "getSubjectNameIdentifier", "processAdditionalData", "isReleaseDOM", "releaseDOM", "releaseChildrenDOM", "getEntityID", "getPeerEntityMetadata", "getRelayState", "getLocalEntityId"]}, "repository": {"repo_id": 3149449, "url": "https://github.com/spring-projects/spring-security-saml", "language": "Java", "is_fork": false, "fork_count": 451, "stargazer_count": 366, "size": 7211, "license": "licensed"}}