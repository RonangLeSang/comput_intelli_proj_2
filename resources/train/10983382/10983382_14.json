{"test_class": {"identifier": "CircularArraySequenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Sequence<String> seq;", "modifier": "private", "type": "Sequence<String>", "declarator": "seq", "var_name": "seq"}], "file": "2nd Year/CS 1332/1332Workspace/HW2/src/CircularArraySequenceTest.java"}, "test_case": {"identifier": "testTail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTail() {\n\t       Sequence<String> seq2 = seq.tail();\n\t       assertTrue(\"empty sequence tail should empty seq\", seq2.isEmpty());\n\t       seq.append(\"a\");\n\t       seq.append(\"b\");\n\t       seq.append(\"c\");\n\t       seq.append(\"d\");\n\t       seq.append(\"e\");\n\t       Sequence<String> seq1 = seq.tail();\n\t       assertEquals(\"Length of tail sequence incorrect\", 4 , seq1.length());\n\t       assertEquals(\"Head of tail sequence incorrect\", \"b\", seq1.peekHead());\n\t       assertEquals(\"Last element of tail sequence incorrect\", \"e\", seq1.peekLast());\n\t       assertEquals(\"Length of original sequence changed when taking tail\", 5, seq.length());\n\t       assertEquals(\"Original sequence head changed when taking tail\", \"a\", seq.peekHead());\n\t       assertEquals(\"Original sequence last changed when taking tail\", \"e\", seq.peekLast());\n\t}", "signature": "void testTail()", "full_signature": "@Test public void testTail()", "class_method_signature": "CircularArraySequenceTest.testTail()", "testcase": true, "constructor": false, "invocations": ["tail", "assertTrue", "isEmpty", "append", "append", "append", "append", "append", "tail", "assertEquals", "length", "assertEquals", "peekHead", "assertEquals", "peekLast", "assertEquals", "length", "assertEquals", "peekHead", "assertEquals", "peekLast"]}, "focal_class": {"identifier": "CircularArraySequence", "superclass": "", "interfaces": "implements Sequence", "fields": [{"original_string": "protected T[] backingArray;", "modifier": "protected", "type": "T[]", "declarator": "backingArray", "var_name": "backingArray"}, {"original_string": "protected int front;", "modifier": "protected", "type": "int", "declarator": "front", "var_name": "front"}, {"original_string": "protected int rear;", "modifier": "protected", "type": "int", "declarator": "rear", "var_name": "rear"}, {"original_string": "protected int fillCount;", "modifier": "protected", "type": "int", "declarator": "fillCount", "var_name": "fillCount"}], "methods": [{"identifier": "CircularArraySequence", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " CircularArraySequence(int size)", "full_signature": "public  CircularArraySequence(int size)", "class_method_signature": "CircularArraySequence.CircularArraySequence(int size)", "testcase": false, "constructor": true}, {"identifier": "CircularArraySequence", "parameters": "(CircularArraySequence<T> seq)", "modifiers": "public", "return": "", "signature": " CircularArraySequence(CircularArraySequence<T> seq)", "full_signature": "public  CircularArraySequence(CircularArraySequence<T> seq)", "class_method_signature": "CircularArraySequence.CircularArraySequence(CircularArraySequence<T> seq)", "testcase": false, "constructor": true}, {"identifier": "head", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object head()", "full_signature": "@Override public Object head()", "class_method_signature": "CircularArraySequence.head()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object last()", "full_signature": "@Override public Object last()", "class_method_signature": "CircularArraySequence.last()", "testcase": false, "constructor": false}, {"identifier": "front", "parameters": "()", "modifiers": "@Override public", "return": "Sequence", "signature": "Sequence front()", "full_signature": "@Override public Sequence front()", "class_method_signature": "CircularArraySequence.front()", "testcase": false, "constructor": false}, {"identifier": "tail", "parameters": "()", "modifiers": "@Override public", "return": "Sequence", "signature": "Sequence tail()", "full_signature": "@Override public Sequence tail()", "class_method_signature": "CircularArraySequence.tail()", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(Sequence seq)", "modifiers": "@Override public", "return": "Sequence<T>", "signature": "Sequence<T> concat(Sequence seq)", "full_signature": "@Override public Sequence<T> concat(Sequence seq)", "class_method_signature": "CircularArraySequence.concat(Sequence seq)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Sequence subseq)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Sequence subseq)", "full_signature": "@Override public boolean contains(Sequence subseq)", "class_method_signature": "CircularArraySequence.contains(Sequence subseq)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object element)", "full_signature": "@Override public boolean contains(Object element)", "class_method_signature": "CircularArraySequence.contains(Object element)", "testcase": false, "constructor": false}, {"identifier": "fullCheck", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean fullCheck()", "full_signature": "private boolean fullCheck()", "class_method_signature": "CircularArraySequence.fullCheck()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Object element)", "modifiers": "@Override public", "return": "void", "signature": "void append(Object element)", "full_signature": "@Override public void append(Object element)", "class_method_signature": "CircularArraySequence.append(Object element)", "testcase": false, "constructor": false}, {"identifier": "prepend", "parameters": "(Object element)", "modifiers": "@Override public", "return": "void", "signature": "void prepend(Object element)", "full_signature": "@Override public void prepend(Object element)", "class_method_signature": "CircularArraySequence.prepend(Object element)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "CircularArraySequence.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "peekHead", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object peekHead()", "full_signature": "@Override public Object peekHead()", "class_method_signature": "CircularArraySequence.peekHead()", "testcase": false, "constructor": false}, {"identifier": "peekLast", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object peekLast()", "full_signature": "@Override public Object peekLast()", "class_method_signature": "CircularArraySequence.peekLast()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Sequence seq)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Sequence seq)", "full_signature": "@Override public boolean equals(Sequence seq)", "class_method_signature": "CircularArraySequence.equals(Sequence seq)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "CircularArraySequence.length()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "CircularArraySequence.iterator()", "testcase": false, "constructor": false}, {"identifier": "regrow", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void regrow()", "full_signature": "private void regrow()", "class_method_signature": "CircularArraySequence.regrow()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "CircularArraySequence.toString()", "testcase": false, "constructor": false}], "file": "2nd Year/CS 1332/1332Workspace/HW2/src/CircularArraySequence.java"}, "focal_method": {"identifier": "tail", "parameters": "()", "modifiers": "@Override public", "return": "Sequence", "body": "@Override\n\tpublic Sequence tail() {\n\t\tCircularArraySequence<T> tempSequence = new CircularArraySequence<T>(this);\n\t\tif (backingArray[front]!=null){\n\t\t\ttempSequence.backingArray[front] = null;\n\t\t\ttempSequence.fillCount-=1;\n\t\t\tif (front == backingArray.length-1){\n\t\t\t\ttempSequence.front = 0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttempSequence.front+=1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\treturn tempSequence;\n\t}", "signature": "Sequence tail()", "full_signature": "@Override public Sequence tail()", "class_method_signature": "CircularArraySequence.tail()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10983382, "url": "https://github.com/nuppan/Georgia-Tech", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 7, "size": 318347, "license": "licensed"}}