{"test_class": {"identifier": "ReportFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ReportFormatter form = new ReportFormatter();", "modifier": "private final", "type": "ReportFormatter", "declarator": "form = new ReportFormatter()", "var_name": "form"}], "file": "jslint4java/src/test/java/com/googlecode/jslint4java/formatter/ReportFormatterTest.java"}, "test_case": {"identifier": "testOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOutput() throws Exception {\n        // Normally, JSLint produces non-xml reports (though they are HTML). But as we control the\n        // input we can get away with using xmlunit to make the check for us. We still have to\n        // accommodate the extra div that we insert.\n        JSLintResult result = mockResult(\"foo.js\");\n        String expected = \"<div class='file'>\" + \"<h1 id='foo.js'>foo.js</h1>\"\n                + \"<div>undefined cat: schrodinger</div>\" + \"</div>\";\n        XMLUnit.compareXML(expected, form.format(result));\n    }", "signature": "void testOutput()", "full_signature": "@Test public void testOutput()", "class_method_signature": "ReportFormatterTest.testOutput()", "testcase": true, "constructor": false, "invocations": ["mockResult", "compareXML", "format"]}, "focal_class": {"identifier": "ReportFormatter", "superclass": "extends XmlFormatter", "interfaces": "implements JSLintResultFormatter", "fields": [], "methods": [{"identifier": "footer", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String footer()", "full_signature": "@Override public String footer()", "class_method_signature": "ReportFormatter.footer()", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(JSLintResult result)", "modifiers": "public", "return": "String", "signature": "String format(JSLintResult result)", "full_signature": "public String format(JSLintResult result)", "class_method_signature": "ReportFormatter.format(JSLintResult result)", "testcase": false, "constructor": false}, {"identifier": "header", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String header()", "full_signature": "@Override public String header()", "class_method_signature": "ReportFormatter.header()", "testcase": false, "constructor": false}, {"identifier": "root", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String root()", "full_signature": "@Override protected String root()", "class_method_signature": "ReportFormatter.root()", "testcase": false, "constructor": false}], "file": "jslint4java/src/main/java/com/googlecode/jslint4java/formatter/ReportFormatter.java"}, "focal_method": {"identifier": "format", "parameters": "(JSLintResult result)", "modifiers": "public", "return": "String", "body": "public String format(JSLintResult result) {\n        String name = result.getName();\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"<div class='file'>\");\n        sb.append(\"<h1\");\n        sb.append(attr(\"id\", name));\n        sb.append(\">\");\n        sb.append(escape(name));\n        sb.append(\"</h1>\");\n        sb.append(result.getReport());\n        sb.append(\"</div>\"); // try to fix somewhat crappy JSLint markup.\n        sb.append(\"</div>\"); // close the file div.\n        return sb.toString();\n    }", "signature": "String format(JSLintResult result)", "full_signature": "public String format(JSLintResult result)", "class_method_signature": "ReportFormatter.format(JSLintResult result)", "testcase": false, "constructor": false, "invocations": ["getName", "append", "append", "append", "attr", "append", "append", "escape", "append", "append", "getReport", "append", "append", "toString"]}, "repository": {"repo_id": 88960, "url": "https://github.com/happygiraffe/jslint4java", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 81, "size": 2811, "license": "Other"}}