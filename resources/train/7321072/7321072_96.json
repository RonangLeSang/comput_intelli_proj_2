{"test_class": {"identifier": "ImmutableRootGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ImmutableRootGenerator generator;", "modifier": "", "type": "ImmutableRootGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "PhoneticAttribute LLV = PhoneticAttribute.LastLetterVowel;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LLV = PhoneticAttribute.LastLetterVowel", "var_name": "LLV"}, {"original_string": "PhoneticAttribute LLC = PhoneticAttribute.LastLetterConsonant;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LLC = PhoneticAttribute.LastLetterConsonant", "var_name": "LLC"}, {"original_string": "PhoneticAttribute LVR = PhoneticAttribute.LastVowelRounded;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LVR = PhoneticAttribute.LastVowelRounded", "var_name": "LVR"}, {"original_string": "PhoneticAttribute LVU = PhoneticAttribute.LastVowelUnrounded;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LVU = PhoneticAttribute.LastVowelUnrounded", "var_name": "LVU"}, {"original_string": "PhoneticAttribute LVF = PhoneticAttribute.LastVowelFrontal;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LVF = PhoneticAttribute.LastVowelFrontal", "var_name": "LVF"}, {"original_string": "PhoneticAttribute LVB = PhoneticAttribute.LastVowelBack;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LVB = PhoneticAttribute.LastVowelBack", "var_name": "LVB"}, {"original_string": "PhoneticAttribute LLVless = PhoneticAttribute.LastLetterVoiceless;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LLVless = PhoneticAttribute.LastLetterVoiceless", "var_name": "LLVless"}, {"original_string": "PhoneticAttribute LLVlessStop = PhoneticAttribute.LastLetterVoicelessStop;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LLVlessStop = PhoneticAttribute.LastLetterVoicelessStop", "var_name": "LLVlessStop"}, {"original_string": "PhoneticAttribute LLNotVless = PhoneticAttribute.LastLetterNotVoiceless;", "modifier": "", "type": "PhoneticAttribute", "declarator": "LLNotVless = PhoneticAttribute.LastLetterNotVoiceless", "var_name": "LLNotVless"}, {"original_string": "PhoneticAttribute FLC = PhoneticAttribute.FirstLetterConsonant;", "modifier": "", "type": "PhoneticAttribute", "declarator": "FLC = PhoneticAttribute.FirstLetterConsonant", "var_name": "FLC"}, {"original_string": "PhoneticAttribute FLV = PhoneticAttribute.FirstLetterVowel;", "modifier": "", "type": "PhoneticAttribute", "declarator": "FLV = PhoneticAttribute.FirstLetterVowel", "var_name": "FLV"}], "file": "core/src/test/java/org/trnltk/morphology/lexicon/ImmutableRootGeneratorTest.java"}, "test_case": {"identifier": "shouldGenerateRootsForWordsEndingWithArabicAyn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGenerateRootsForWordsEndingWithArabicAyn() {\n        {\n            final Lexeme lexeme = new ImmutableLexeme(\"cami\", \"cami\", PrimaryPos.Noun, null, ImmutableSet.of(LexemeAttribute.EndsWithAyn));\n            final HashSet<ImmutableRoot> generatedRoots = generator.generate(lexeme);\n            assertThat(generatedRoots, hasSize(2));\n            assertThat(generatedRoots, hasItem(new ImmutableRoot(\"cami\", lexeme, ImmutableSet.of(FLC, LVF, LLC, LLNotVless, LVU), ImmutableSet.of(PhoneticExpectation.VowelStart))));\n            assertThat(generatedRoots, hasItem(new ImmutableRoot(\"cami\", lexeme, ImmutableSet.of(FLC, LVF, LLV, LLNotVless, LVU), null)));\n        }\n        {\n            // other phonetic events cannot occur when word ends with Ayn, but support it anyway for consistency\n            // imaginary word 'abcde' which supports direct vovel concetanation, and\n            final Lexeme lexeme = new ImmutableLexeme(\"abcde\", \"abcde\", PrimaryPos.Noun, null, ImmutableSet.of(LexemeAttribute.EndsWithAyn, LexemeAttribute.InverseHarmony));\n            final HashSet<ImmutableRoot> generatedRoots = generator.generate(lexeme);\n            assertThat(generatedRoots, hasSize(2));\n            assertThat(generatedRoots, hasItem(new ImmutableRoot(\"abcde\", lexeme, ImmutableSet.of(FLV, LVF, LLC, LLNotVless, LVU), ImmutableSet.of(PhoneticExpectation.VowelStart))));\n            assertThat(generatedRoots, hasItem(new ImmutableRoot(\"abcde\", lexeme, ImmutableSet.of(FLV, LVF, LLV, LLNotVless, LVU), null)));\n        }\n    }", "signature": "void shouldGenerateRootsForWordsEndingWithArabicAyn()", "full_signature": "@Test public void shouldGenerateRootsForWordsEndingWithArabicAyn()", "class_method_signature": "ImmutableRootGeneratorTest.shouldGenerateRootsForWordsEndingWithArabicAyn()", "testcase": true, "constructor": false, "invocations": ["of", "generate", "assertThat", "hasSize", "assertThat", "hasItem", "of", "of", "assertThat", "hasItem", "of", "of", "generate", "assertThat", "hasSize", "assertThat", "hasItem", "of", "of", "assertThat", "hasItem", "of"]}, "focal_class": {"identifier": "ImmutableRootGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ImmutableSet<LexemeAttribute> MODIFIERS_TO_WATCH = Sets.immutableEnumSet(LexemeAttribute.Doubling,\n            LexemeAttribute.LastVowelDrop,\n            LexemeAttribute.ProgressiveVowelDrop,\n            LexemeAttribute.InverseHarmony,\n            LexemeAttribute.Voicing,\n            LexemeAttribute.VoicingOpt,\n            LexemeAttribute.Special,\n            LexemeAttribute.EndsWithAyn);", "modifier": "private static final", "type": "ImmutableSet<LexemeAttribute>", "declarator": "MODIFIERS_TO_WATCH = Sets.immutableEnumSet(LexemeAttribute.Doubling,\n            LexemeAttribute.LastVowelDrop,\n            LexemeAttribute.ProgressiveVowelDrop,\n            LexemeAttribute.InverseHarmony,\n            LexemeAttribute.Voicing,\n            LexemeAttribute.VoicingOpt,\n            LexemeAttribute.Special,\n            LexemeAttribute.EndsWithAyn)", "var_name": "MODIFIERS_TO_WATCH"}, {"original_string": "private static final ImmutableMap<Pair<String, PrimaryPos>, String> rootChanges = new ImmutableMap.Builder<Pair<String, PrimaryPos>, String>()\n            .put(Pair.of(\"ben\", PrimaryPos.Pronoun), \"ban\")\n            .put(Pair.of(\"sen\", PrimaryPos.Pronoun), \"san\")\n            .put(Pair.of(\"demek\", PrimaryPos.Verb), \"di\")\n            .put(Pair.of(\"yemek\", PrimaryPos.Verb), \"yi\")\n            .put(Pair.of(\"hepsi\", PrimaryPos.Pronoun), \"hep\")\n            .put(Pair.of(\"ora\", PrimaryPos.Pronoun), \"or\")\n            .put(Pair.of(\"bura\", PrimaryPos.Pronoun), \"bur\")\n            .put(Pair.of(\"\u015fura\", PrimaryPos.Pronoun), \"\u015fur\")\n            .put(Pair.of(\"nere\", PrimaryPos.Pronoun), \"ner\")\n            .put(Pair.of(\"i\u00e7eri\", (PrimaryPos) null), \"i\u00e7er\") // applicable to all forms of the word\n            .put(Pair.of(\"d\u0131\u015far\u0131\", (PrimaryPos) null), \"d\u0131\u015far\") // applicable to all forms of the word\n            .put(Pair.of(\"birbiri\", PrimaryPos.Pronoun), \"birbir\")\n            .build();", "modifier": "private static final", "type": "ImmutableMap<Pair<String, PrimaryPos>, String>", "declarator": "rootChanges = new ImmutableMap.Builder<Pair<String, PrimaryPos>, String>()\n            .put(Pair.of(\"ben\", PrimaryPos.Pronoun), \"ban\")\n            .put(Pair.of(\"sen\", PrimaryPos.Pronoun), \"san\")\n            .put(Pair.of(\"demek\", PrimaryPos.Verb), \"di\")\n            .put(Pair.of(\"yemek\", PrimaryPos.Verb), \"yi\")\n            .put(Pair.of(\"hepsi\", PrimaryPos.Pronoun), \"hep\")\n            .put(Pair.of(\"ora\", PrimaryPos.Pronoun), \"or\")\n            .put(Pair.of(\"bura\", PrimaryPos.Pronoun), \"bur\")\n            .put(Pair.of(\"\u015fura\", PrimaryPos.Pronoun), \"\u015fur\")\n            .put(Pair.of(\"nere\", PrimaryPos.Pronoun), \"ner\")\n            .put(Pair.of(\"i\u00e7eri\", (PrimaryPos) null), \"i\u00e7er\") // applicable to all forms of the word\n            .put(Pair.of(\"d\u0131\u015far\u0131\", (PrimaryPos) null), \"d\u0131\u015far\") // applicable to all forms of the word\n            .put(Pair.of(\"birbiri\", PrimaryPos.Pronoun), \"birbir\")\n            .build()", "var_name": "rootChanges"}, {"original_string": "private PhoneticsAnalyzer phoneticsAnalyzer = new PhoneticsAnalyzer();", "modifier": "private", "type": "PhoneticsAnalyzer", "declarator": "phoneticsAnalyzer = new PhoneticsAnalyzer()", "var_name": "phoneticsAnalyzer"}], "methods": [{"identifier": "generateAll", "parameters": "(final Set<Lexeme> lexemes)", "modifiers": "public", "return": "Collection<ImmutableRoot>", "signature": "Collection<ImmutableRoot> generateAll(final Set<Lexeme> lexemes)", "full_signature": "public Collection<ImmutableRoot> generateAll(final Set<Lexeme> lexemes)", "class_method_signature": "ImmutableRootGenerator.generateAll(final Set<Lexeme> lexemes)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(final Lexeme lexeme)", "modifiers": "public", "return": "HashSet<ImmutableRoot>", "signature": "HashSet<ImmutableRoot> generate(final Lexeme lexeme)", "full_signature": "public HashSet<ImmutableRoot> generate(final Lexeme lexeme)", "class_method_signature": "ImmutableRootGenerator.generate(final Lexeme lexeme)", "testcase": false, "constructor": false}, {"identifier": "generateModifiedRootNodes", "parameters": "(final Lexeme lexeme)", "modifiers": "private", "return": "HashSet<ImmutableRoot>", "signature": "HashSet<ImmutableRoot> generateModifiedRootNodes(final Lexeme lexeme)", "full_signature": "private HashSet<ImmutableRoot> generateModifiedRootNodes(final Lexeme lexeme)", "class_method_signature": "ImmutableRootGenerator.generateModifiedRootNodes(final Lexeme lexeme)", "testcase": false, "constructor": false}, {"identifier": "handleSpecialRoots", "parameters": "(final Lexeme originalLexeme)", "modifiers": "private", "return": "HashSet<ImmutableRoot>", "signature": "HashSet<ImmutableRoot> handleSpecialRoots(final Lexeme originalLexeme)", "full_signature": "private HashSet<ImmutableRoot> handleSpecialRoots(final Lexeme originalLexeme)", "class_method_signature": "ImmutableRootGenerator.handleSpecialRoots(final Lexeme originalLexeme)", "testcase": false, "constructor": false}, {"identifier": "hasVowel", "parameters": "(String str)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVowel(String str)", "full_signature": "private boolean hasVowel(String str)", "class_method_signature": "ImmutableRootGenerator.hasVowel(String str)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/trnltk/morphology/lexicon/ImmutableRootGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(final Lexeme lexeme)", "modifiers": "public", "return": "HashSet<ImmutableRoot>", "body": "public HashSet<ImmutableRoot> generate(final Lexeme lexeme) {\n        if (CollectionUtils.containsAny(lexeme.getAttributes(), MODIFIERS_TO_WATCH)) {\n            return this.generateModifiedRootNodes(lexeme);\n        } else {\n            Set<PhoneticAttribute> phoneticAttributes = phoneticsAnalyzer.calculatePhoneticAttributes(lexeme.getLemmaRoot(), lexeme.getAttributes());\n            final ImmutableRoot root = new ImmutableRoot(lexeme.getLemmaRoot(), lexeme, Sets.immutableEnumSet(phoneticAttributes), null);\n            return Sets.newHashSet(root);\n        }\n    }", "signature": "HashSet<ImmutableRoot> generate(final Lexeme lexeme)", "full_signature": "public HashSet<ImmutableRoot> generate(final Lexeme lexeme)", "class_method_signature": "ImmutableRootGenerator.generate(final Lexeme lexeme)", "testcase": false, "constructor": false, "invocations": ["containsAny", "getAttributes", "generateModifiedRootNodes", "calculatePhoneticAttributes", "getLemmaRoot", "getAttributes", "getLemmaRoot", "immutableEnumSet", "newHashSet"]}, "repository": {"repo_id": 7321072, "url": "https://github.com/aliok/trnltk-java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 39, "size": 3428, "license": "licensed"}}