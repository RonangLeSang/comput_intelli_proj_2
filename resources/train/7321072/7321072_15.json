{"test_class": {"identifier": "PuncRootFinderTest", "superclass": "extends BaseRootFinderTest<ImmutableRoot>", "interfaces": "", "fields": [], "file": "core/src/test/java/org/trnltk/morphology/contextless/rootfinder/PuncRootFinderTest.java"}, "test_case": {"identifier": "shouldThrowExceptionWhenPartialInputHasSameLengthWithWholeSurfaceButNotSameWithIt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldThrowExceptionWhenPartialInputHasSameLengthWithWholeSurfaceButNotSameWithIt() {\n        try {\n            findRootsForPartialInput(\" x\", \" a\");\n            fail();\n        } catch (Exception e) {\n        }\n\n        try {\n            findRootsForPartialInput(\" .\", \" ,\");\n            fail();\n        } catch (Exception e) {\n        }\n\n        try {\n            findRootsForPartialInput(\"..!\", \"...\");\n            fail();\n        } catch (Exception e) {\n        }\n\n        try {\n            findRootsForPartialInput(\"!,.\", \"!,!\");\n            fail();\n        } catch (Exception e) {\n        }\n\n        try {\n            findRootsForPartialInput(\"'`\", \"''\");\n            fail();\n        } catch (Exception e) {\n        }\n    }", "signature": "void shouldThrowExceptionWhenPartialInputHasSameLengthWithWholeSurfaceButNotSameWithIt()", "full_signature": "@Test public void shouldThrowExceptionWhenPartialInputHasSameLengthWithWholeSurfaceButNotSameWithIt()", "class_method_signature": "PuncRootFinderTest.shouldThrowExceptionWhenPartialInputHasSameLengthWithWholeSurfaceButNotSameWithIt()", "testcase": true, "constructor": false, "invocations": ["findRootsForPartialInput", "fail", "findRootsForPartialInput", "fail", "findRootsForPartialInput", "fail", "findRootsForPartialInput", "fail", "findRootsForPartialInput", "fail"]}, "focal_class": {"identifier": "PuncRootFinder", "superclass": "", "interfaces": "implements RootFinder", "fields": [{"original_string": "private static final Pattern ALL_PUNC_PATTERN = Pattern.compile(\"^(\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}|\\\\p{Sm}|\\\\p{So})+$\");", "modifier": "private static final", "type": "Pattern", "declarator": "ALL_PUNC_PATTERN = Pattern.compile(\"^(\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}|\\\\p{Sm}|\\\\p{So})+$\")", "var_name": "ALL_PUNC_PATTERN"}], "methods": [{"identifier": "handles", "parameters": "(TurkishSequence partialInput, TurkishSequence input)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handles(TurkishSequence partialInput, TurkishSequence input)", "full_signature": "@Override public boolean handles(TurkishSequence partialInput, TurkishSequence input)", "class_method_signature": "PuncRootFinder.handles(TurkishSequence partialInput, TurkishSequence input)", "testcase": false, "constructor": false}, {"identifier": "findRootsForPartialInput", "parameters": "(TurkishSequence partialInput, TurkishSequence input)", "modifiers": "@Override public", "return": "List<ImmutableRoot>", "signature": "List<ImmutableRoot> findRootsForPartialInput(TurkishSequence partialInput, TurkishSequence input)", "full_signature": "@Override public List<ImmutableRoot> findRootsForPartialInput(TurkishSequence partialInput, TurkishSequence input)", "class_method_signature": "PuncRootFinder.findRootsForPartialInput(TurkishSequence partialInput, TurkishSequence input)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/trnltk/morphology/contextless/rootfinder/PuncRootFinder.java"}, "focal_method": {"identifier": "findRootsForPartialInput", "parameters": "(TurkishSequence partialInput, TurkishSequence input)", "modifiers": "@Override public", "return": "List<ImmutableRoot>", "body": "@Override\n    public List<ImmutableRoot> findRootsForPartialInput(TurkishSequence partialInput, TurkishSequence input) {\n        final ImmutableLexeme lexeme = new ImmutableLexeme(partialInput.getUnderlyingString(), input.getUnderlyingString(), PrimaryPos.Punctuation, null, null);\n        return Arrays.asList(new ImmutableRoot(partialInput, lexeme, null, null));\n    }", "signature": "List<ImmutableRoot> findRootsForPartialInput(TurkishSequence partialInput, TurkishSequence input)", "full_signature": "@Override public List<ImmutableRoot> findRootsForPartialInput(TurkishSequence partialInput, TurkishSequence input)", "class_method_signature": "PuncRootFinder.findRootsForPartialInput(TurkishSequence partialInput, TurkishSequence input)", "testcase": false, "constructor": false, "invocations": ["getUnderlyingString", "getUnderlyingString", "asList"]}, "repository": {"repo_id": 7321072, "url": "https://github.com/aliok/trnltk-java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 39, "size": 3428, "license": "licensed"}}