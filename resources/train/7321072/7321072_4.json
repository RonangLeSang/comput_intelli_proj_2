{"test_class": {"identifier": "DiffUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/trnltk/util/DiffUtilTest.java"}, "test_case": {"identifier": "testDiff", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiff() {\n        String text1 = \"I am the vXXery model  of a carttoon inidual\";\n        String text2 = \"I a m the very Zodel of a caraatoon individu  al\";\n        final String[] diffLines = DiffUtil.diffLines(text1, text2, true);\n        assertThat(diffLines, equalTo(new String[]{\n                \"I am the vXXery model of a cart toon in   idual\",\n                \"          --    ^             ^^       +++     \",\n                \"                Z             aa       div     \"\n        }));\n    }", "signature": "void testDiff()", "full_signature": "@Test public void testDiff()", "class_method_signature": "DiffUtilTest.testDiff()", "testcase": true, "constructor": false, "invocations": ["diffLines", "assertThat", "equalTo"]}, "focal_class": {"identifier": "DiffUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "diffLines", "parameters": "(final String line1, final String line2, final boolean ignoreWhiteSpace)", "modifiers": "public static", "return": "String[]", "signature": "String[] diffLines(final String line1, final String line2, final boolean ignoreWhiteSpace)", "full_signature": "public static String[] diffLines(final String line1, final String line2, final boolean ignoreWhiteSpace)", "class_method_signature": "DiffUtil.diffLines(final String line1, final String line2, final boolean ignoreWhiteSpace)", "testcase": false, "constructor": false}, {"identifier": "diffToFormattedLines", "parameters": "(final List<diff_match_patch.Diff> diffs, boolean ignoreWhiteSpace)", "modifiers": "private static", "return": "String[]", "signature": "String[] diffToFormattedLines(final List<diff_match_patch.Diff> diffs, boolean ignoreWhiteSpace)", "full_signature": "private static String[] diffToFormattedLines(final List<diff_match_patch.Diff> diffs, boolean ignoreWhiteSpace)", "class_method_signature": "DiffUtil.diffToFormattedLines(final List<diff_match_patch.Diff> diffs, boolean ignoreWhiteSpace)", "testcase": false, "constructor": false}, {"identifier": "getPreviousNotEqualNotBlankDiff", "parameters": "(List<diff_match_patch.Diff> diffs, int i)", "modifiers": "private static", "return": "diff_match_patch.Diff", "signature": "diff_match_patch.Diff getPreviousNotEqualNotBlankDiff(List<diff_match_patch.Diff> diffs, int i)", "full_signature": "private static diff_match_patch.Diff getPreviousNotEqualNotBlankDiff(List<diff_match_patch.Diff> diffs, int i)", "class_method_signature": "DiffUtil.getPreviousNotEqualNotBlankDiff(List<diff_match_patch.Diff> diffs, int i)", "testcase": false, "constructor": false}, {"identifier": "getNextNotEqualNotBlankDiff", "parameters": "(List<diff_match_patch.Diff> diffs, int i)", "modifiers": "private static", "return": "diff_match_patch.Diff", "signature": "diff_match_patch.Diff getNextNotEqualNotBlankDiff(List<diff_match_patch.Diff> diffs, int i)", "full_signature": "private static diff_match_patch.Diff getNextNotEqualNotBlankDiff(List<diff_match_patch.Diff> diffs, int i)", "class_method_signature": "DiffUtil.getNextNotEqualNotBlankDiff(List<diff_match_patch.Diff> diffs, int i)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/trnltk/util/DiffUtil.java"}, "focal_method": {"identifier": "diffLines", "parameters": "(final String line1, final String line2, final boolean ignoreWhiteSpace)", "modifiers": "public static", "return": "String[]", "body": "public static String[] diffLines(final String line1, final String line2, final boolean ignoreWhiteSpace) {\n        final diff_match_patch dmp = new diff_match_patch();\n\n        final LinkedList<diff_match_patch.Diff> diffs = dmp.diff_main(line1, line2);\n\n        if (CollectionUtils.isEmpty(diffs)) {\n            return null;\n        } else {\n            if (ignoreWhiteSpace) {\n                final LinkedList<diff_match_patch.Diff> filteredDiffs = Lists.newLinkedList(Iterables.filter(diffs, new Predicate<diff_match_patch.Diff>() {\n                    @Override\n                    public boolean apply(diff_match_patch.Diff input) {\n                        if (input.operation.equals(diff_match_patch.Operation.EQUAL))\n                            return false;\n                        else if (StringUtils.isBlank(input.text))\n                            return false;\n\n                        return true;\n                    }\n                }));\n\n                if (filteredDiffs.isEmpty())\n                    return null;\n            }\n\n            dmp.diff_cleanupSemantic(diffs);\n\n            final String[] diffLines = diffToFormattedLines(diffs, ignoreWhiteSpace);\n            if (ignoreWhiteSpace) {\n                if (StringUtils.isBlank(diffLines[1]) && StringUtils.isBlank(diffLines[2]))\n                    return null;\n            }\n\n            return diffLines;\n        }\n    }", "signature": "String[] diffLines(final String line1, final String line2, final boolean ignoreWhiteSpace)", "full_signature": "public static String[] diffLines(final String line1, final String line2, final boolean ignoreWhiteSpace)", "class_method_signature": "DiffUtil.diffLines(final String line1, final String line2, final boolean ignoreWhiteSpace)", "testcase": false, "constructor": false, "invocations": ["diff_main", "isEmpty", "newLinkedList", "filter", "equals", "isBlank", "isEmpty", "diff_cleanupSemantic", "diffToFormattedLines", "isBlank", "isBlank"]}, "repository": {"repo_id": 7321072, "url": "https://github.com/aliok/trnltk-java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 39, "size": 3428, "license": "licensed"}}