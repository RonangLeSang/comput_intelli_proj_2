{"test_class": {"identifier": "ParseResultDiffToolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ParseResultDiffTool diffTool = new ParseResultDiffTool();", "modifier": "", "type": "ParseResultDiffTool", "declarator": "diffTool = new ParseResultDiffTool()", "var_name": "diffTool"}, {"original_string": "ParseResultReader parseResultReader = new ParseResultReader();", "modifier": "", "type": "ParseResultReader", "declarator": "parseResultReader = new ParseResultReader()", "var_name": "parseResultReader"}, {"original_string": "ParseResult ev_in__P2sg = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','P2sg','Nom']}],'LemmaRoot':'ev','RootPos':'Noun','Root':'ev'}\");", "modifier": "", "type": "ParseResult", "declarator": "ev_in__P2sg = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','P2sg','Nom']}],'LemmaRoot':'ev','RootPos':'Noun','Root':'ev'}\")", "var_name": "ev_in__P2sg"}, {"original_string": "ParseResult ev_in__Pnon = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','Pnon','Gen']}],'LemmaRoot':'ev','RootPos':'Noun','Root':'ev'}\");", "modifier": "", "type": "ParseResult", "declarator": "ev_in__Pnon = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','Pnon','Gen']}],'LemmaRoot':'ev','RootPos':'Noun','Root':'ev'}\")", "var_name": "ev_in__Pnon"}, {"original_string": "ParseResult evin__Nom = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','Pnon','Nom']}],'LemmaRoot':'evin','RootPos':'Noun','Root':'evin'}\");", "modifier": "", "type": "ParseResult", "declarator": "evin__Nom = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','Pnon','Nom']}],'LemmaRoot':'evin','RootPos':'Noun','Root':'evin'}\")", "var_name": "evin__Nom"}, {"original_string": "ParseResult ev_in__P2sg_Verb = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','P2sg','Nom']},{'POS':'Verb','Suffixes':['Zero','Pres','A3sg']}],'LemmaRoot':'ev','RootPos':'Noun','Root':'ev'}\");", "modifier": "", "type": "ParseResult", "declarator": "ev_in__P2sg_Verb = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','P2sg','Nom']},{'POS':'Verb','Suffixes':['Zero','Pres','A3sg']}],'LemmaRoot':'ev','RootPos':'Noun','Root':'ev'}\")", "var_name": "ev_in__P2sg_Verb"}, {"original_string": "ParseResult evin__Nom_Prop = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','Pnon','Nom']}],'LemmaRoot':'Evin','RootPos':'Noun','Root':'Evin','RootSpos':'Prop'}\");", "modifier": "", "type": "ParseResult", "declarator": "evin__Nom_Prop = createParseResultObject(\"{'Parts':[{'POS':'Noun','Suffixes':['A3sg','Pnon','Nom']}],'LemmaRoot':'Evin','RootPos':'Noun','Root':'Evin','RootSpos':'Prop'}\")", "var_name": "evin__Nom_Prop"}, {"original_string": "ParseResult fake_1 = createParseResultObject(\"{'Parts':[{'POS':'Verb','Suffixes':['Pos']},{'POS':'Adj','Suffixes':['PastPart','P3sg']}],'LemmaRoot':'xxx','RootPos':'Verb','Root':'xxx'}\");", "modifier": "", "type": "ParseResult", "declarator": "fake_1 = createParseResultObject(\"{'Parts':[{'POS':'Verb','Suffixes':['Pos']},{'POS':'Adj','Suffixes':['PastPart','P3sg']}],'LemmaRoot':'xxx','RootPos':'Verb','Root':'xxx'}\")", "var_name": "fake_1"}, {"original_string": "ParseResult fake_2 = createParseResultObject(\"{'Parts':[{'POS':'Verb','Suffixes':['Pos']},{'POS':'Sth','Suffixes':['Fake']},{'POS':'Adj','Suffixes':['PastPart','P3sg']}],'LemmaRoot':'xxx','RootPos':'Verb','Root':'xxx'}\");", "modifier": "", "type": "ParseResult", "declarator": "fake_2 = createParseResultObject(\"{'Parts':[{'POS':'Verb','Suffixes':['Pos']},{'POS':'Sth','Suffixes':['Fake']},{'POS':'Adj','Suffixes':['PastPart','P3sg']}],'LemmaRoot':'xxx','RootPos':'Verb','Root':'xxx'}\")", "var_name": "fake_2"}], "file": "core/src/test/java/org/trnltk/experiment/morphology/ambiguity/ParseResultDiffToolTest.java"}, "test_case": {"identifier": "shouldNotFindDifferenceOnSameItems", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotFindDifferenceOnSameItems() {\n        final List<ParseResult> parseResults = getDeclaredParseResults();\n        for (int i = 0; i < parseResults.size(); i++) {\n            final ParseResult parseResult = parseResults.get(i);\n            final ParseResultDifference difference = this.diffTool.findDifference(parseResult, parseResult);\n            assertThat(difference.hasNoPartDifference(), equalTo(true));\n            assertThat(difference.hasNoPartDifference(), equalTo(true));\n        }\n    }", "signature": "void shouldNotFindDifferenceOnSameItems()", "full_signature": "@Test public void shouldNotFindDifferenceOnSameItems()", "class_method_signature": "ParseResultDiffToolTest.shouldNotFindDifferenceOnSameItems()", "testcase": true, "constructor": false, "invocations": ["getDeclaredParseResults", "size", "get", "findDifference", "assertThat", "hasNoPartDifference", "equalTo", "assertThat", "hasNoPartDifference", "equalTo"]}, "focal_class": {"identifier": "ParseResultDiffTool", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findDifference", "parameters": "(ParseResult _parseResultA, ParseResult _parseResultB)", "modifiers": "public", "return": "ParseResultDifference", "signature": "ParseResultDifference findDifference(ParseResult _parseResultA, ParseResult _parseResultB)", "full_signature": "public ParseResultDifference findDifference(ParseResult _parseResultA, ParseResult _parseResultB)", "class_method_signature": "ParseResultDiffTool.findDifference(ParseResult _parseResultA, ParseResult _parseResultB)", "testcase": false, "constructor": false}, {"identifier": "buildRootDifference", "parameters": "(ParseResult firstParseResult, ParseResult secondParseResult)", "modifiers": "private", "return": "RootDifference", "signature": "RootDifference buildRootDifference(ParseResult firstParseResult, ParseResult secondParseResult)", "full_signature": "private RootDifference buildRootDifference(ParseResult firstParseResult, ParseResult secondParseResult)", "class_method_signature": "ParseResultDiffTool.buildRootDifference(ParseResult firstParseResult, ParseResult secondParseResult)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/trnltk/experiment/morphology/ambiguity/ParseResultDiffTool.java"}, "focal_method": {"identifier": "findDifference", "parameters": "(ParseResult _parseResultA, ParseResult _parseResultB)", "modifiers": "public", "return": "ParseResultDifference", "body": "public ParseResultDifference findDifference(ParseResult _parseResultA, ParseResult _parseResultB) {\n        final ParseResult firstParseResult;\n        final ParseResult secondParseResult;\n\n        if (Comparators.parseResultOrdering.compare(_parseResultA.getStr(), _parseResultB.getStr()) <= 0) {\n            firstParseResult = _parseResultA;\n            secondParseResult = _parseResultB;\n        } else {\n            firstParseResult = _parseResultB;\n            secondParseResult = _parseResultA;\n        }\n\n        final RootDifference rootDifference = buildRootDifference(firstParseResult, secondParseResult);\n\n        final DataDiffUtil<ParseResultPart> diffUtil = new DataDiffUtil<ParseResultPart>();\n\n        final List<ParseResultPart> firstParseResultParts = CollectionUtils.isEmpty(firstParseResult.getParts()) ? Collections.<ParseResultPart>emptyList() : firstParseResult.getParts();\n        final List<ParseResultPart> secondParseResultParts = CollectionUtils.isEmpty(secondParseResult.getParts()) ? Collections.<ParseResultPart>emptyList() : secondParseResult.getParts();\n\n        final LinkedList<DataDiffUtil.Diff<ParseResultPart>> diffs = diffUtil.diff_main(firstParseResultParts, secondParseResultParts);\n        diffUtil.diff_cleanupSemantic(diffs);\n\n        final ParseResultDifference parseResultDifference = new ParseResultDifference(rootDifference);\n\n        final int diffsLength = diffs.size();\n        int i = 0;\n        while (i < diffsLength) {\n            final DataDiffUtil.Diff<ParseResultPart> currentDiff = diffs.get(i);\n\n            final DataDiffUtil.Diff<ParseResultPart> nextDiff = i + 1 >= diffsLength ? null : diffs.get(i + 1);\n\n            //note: delete always comes before insert\n            switch (currentDiff.operation) {\n                case EQUAL: {\n                    i++;\n                    break;\n                }\n                case INSERT: {\n                    final Pair<List<ParseResultPart>, List<ParseResultPart>> pair = Pair.of(null, currentDiff.text);\n                    final ParseResultPartDifference partDifference = new ParseResultPartDifference(pair);\n                    parseResultDifference.addParseResultPartDifference(partDifference);\n                    i++;\n                    break;\n                }\n                case DELETE: {\n                    //\n                    List<ParseResultPart> secondPart;\n                    if (nextDiff != null && nextDiff.operation.equals(DataDiffUtil.Operation.INSERT))\n                        secondPart = nextDiff.text;\n                    else\n                        secondPart = null;\n\n                    final Pair<List<ParseResultPart>, List<ParseResultPart>> pair = Pair.of(currentDiff.text, secondPart);\n                    final ParseResultPartDifference partDifference = new ParseResultPartDifference(pair);\n                    parseResultDifference.addParseResultPartDifference(partDifference);\n                    i = i + 2;\n                    break;\n                }\n            }\n        }\n\n        return parseResultDifference;\n    }", "signature": "ParseResultDifference findDifference(ParseResult _parseResultA, ParseResult _parseResultB)", "full_signature": "public ParseResultDifference findDifference(ParseResult _parseResultA, ParseResult _parseResultB)", "class_method_signature": "ParseResultDiffTool.findDifference(ParseResult _parseResultA, ParseResult _parseResultB)", "testcase": false, "constructor": false, "invocations": ["compare", "getStr", "getStr", "buildRootDifference", "isEmpty", "getParts", "emptyList", "getParts", "isEmpty", "getParts", "emptyList", "getParts", "diff_main", "diff_cleanupSemantic", "size", "get", "get", "of", "addParseResultPartDifference", "equals", "of", "addParseResultPartDifference"]}, "repository": {"repo_id": 7321072, "url": "https://github.com/aliok/trnltk-java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 39, "size": 3428, "license": "licensed"}}