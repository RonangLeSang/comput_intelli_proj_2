{"test_class": {"identifier": "SuffixFormSequenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/trnltk/model/suffix/SuffixFormSequenceTest.java"}, "test_case": {"identifier": "shouldCreateSimpleRules", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateSimpleRules() {\n        {\n            final SuffixFormSequence sequence = new SuffixFormSequence(\"n\");\n            assertThat(sequence.getRules(), hasSize(1));\n            assertThat(sequence.getRules().get(0).getRuleType(), equalTo(SuffixFormSequence.SuffixFormSequenceRuleType.INSERT_NONVOWEL_LETTER));\n            assertThat(sequence.getRules().get(0).getCharToAdd().getCharValue(), equalTo('n'));\n        }\n        {\n            final SuffixFormSequence sequence = new SuffixFormSequence(\"a\");\n            assertThat(sequence.getRules(), hasSize(1));\n            assertThat(sequence.getRules().get(0).getRuleType(), equalTo(SuffixFormSequence.SuffixFormSequenceRuleType.INSERT_VOWEL_WITHOUT_HARMONY));\n            assertThat(sequence.getRules().get(0).getCharToAdd().getCharValue(), equalTo('a'));\n        }\n        {\n            final SuffixFormSequence sequence = new SuffixFormSequence(\"and\");\n            assertThat(sequence.getRules(), hasSize(3));\n            assertThat(sequence.getRules().get(0).getRuleType(), equalTo(SuffixFormSequence.SuffixFormSequenceRuleType.INSERT_VOWEL_WITHOUT_HARMONY));\n            assertThat(sequence.getRules().get(0).getCharToAdd().getCharValue(), equalTo('a'));\n            assertThat(sequence.getRules().get(1).getRuleType(), equalTo(SuffixFormSequence.SuffixFormSequenceRuleType.INSERT_NONVOWEL_LETTER));\n            assertThat(sequence.getRules().get(1).getCharToAdd().getCharValue(), equalTo('n'));\n            assertThat(sequence.getRules().get(2).getRuleType(), equalTo(SuffixFormSequence.SuffixFormSequenceRuleType.INSERT_NONVOWEL_LETTER));\n            assertThat(sequence.getRules().get(2).getCharToAdd().getCharValue(), equalTo('d'));\n        }\n    }", "signature": "void shouldCreateSimpleRules()", "full_signature": "@Test public void shouldCreateSimpleRules()", "class_method_signature": "SuffixFormSequenceTest.shouldCreateSimpleRules()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getRules", "hasSize", "assertThat", "getRuleType", "get", "getRules", "equalTo", "assertThat", "getCharValue", "getCharToAdd", "get", "getRules", "equalTo", "assertThat", "getRules", "hasSize", "assertThat", "getRuleType", "get", "getRules", "equalTo", "assertThat", "getCharValue", "getCharToAdd", "get", "getRules", "equalTo", "assertThat", "getRules", "hasSize", "assertThat", "getRuleType", "get", "getRules", "equalTo", "assertThat", "getCharValue", "getCharToAdd", "get", "getRules", "equalTo", "assertThat", "getRuleType", "get", "getRules", "equalTo", "assertThat", "getCharValue", "getCharToAdd", "get", "getRules", "equalTo", "assertThat", "getRuleType", "get", "getRules", "equalTo", "assertThat", "getCharValue", "getCharToAdd", "get", "getRules", "equalTo"]}, "focal_class": {"identifier": "SuffixFormSequence", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char EXCLAMATION = '!';", "modifier": "private static final", "type": "char", "declarator": "EXCLAMATION = '!'", "var_name": "EXCLAMATION"}, {"original_string": "private static final Character PLUS = '+';", "modifier": "private static final", "type": "Character", "declarator": "PLUS = '+'", "var_name": "PLUS"}, {"original_string": "private final String suffixFormStr;", "modifier": "private final", "type": "String", "declarator": "suffixFormStr", "var_name": "suffixFormStr"}, {"original_string": "private final ImmutableList<SuffixFormSequenceRule> rules;", "modifier": "private final", "type": "ImmutableList<SuffixFormSequenceRule>", "declarator": "rules", "var_name": "rules"}, {"original_string": "private final boolean firstLetterVowel;", "modifier": "private final", "type": "boolean", "declarator": "firstLetterVowel", "var_name": "firstLetterVowel"}], "methods": [{"identifier": "SuffixFormSequence", "parameters": "(String suffixFormStr)", "modifiers": "public", "return": "", "signature": " SuffixFormSequence(String suffixFormStr)", "full_signature": "public  SuffixFormSequence(String suffixFormStr)", "class_method_signature": "SuffixFormSequence.SuffixFormSequence(String suffixFormStr)", "testcase": false, "constructor": true}, {"identifier": "getRules", "parameters": "()", "modifiers": "public", "return": "ImmutableList<SuffixFormSequenceRule>", "signature": "ImmutableList<SuffixFormSequenceRule> getRules()", "full_signature": "public ImmutableList<SuffixFormSequenceRule> getRules()", "class_method_signature": "SuffixFormSequence.getRules()", "testcase": false, "constructor": false}, {"identifier": "getSuffixFormStr", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSuffixFormStr()", "full_signature": "public String getSuffixFormStr()", "class_method_signature": "SuffixFormSequence.getSuffixFormStr()", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "boolean", "signature": "boolean isBlank()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public boolean isBlank()", "class_method_signature": "SuffixFormSequence.isBlank()", "testcase": false, "constructor": false}, {"identifier": "isNotBlank", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNotBlank()", "full_signature": "public boolean isNotBlank()", "class_method_signature": "SuffixFormSequence.isNotBlank()", "testcase": false, "constructor": false}, {"identifier": "isFirstLetterVowel", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFirstLetterVowel()", "full_signature": "public boolean isFirstLetterVowel()", "class_method_signature": "SuffixFormSequence.isFirstLetterVowel()", "testcase": false, "constructor": false}, {"identifier": "findIsFirstLetterVowel", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean findIsFirstLetterVowel()", "full_signature": "private boolean findIsFirstLetterVowel()", "class_method_signature": "SuffixFormSequence.findIsFirstLetterVowel()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SuffixFormSequence.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SuffixFormSequence.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SuffixFormSequence.toString()", "testcase": false, "constructor": false}, {"identifier": "lastLetterCanBeVoiced", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean lastLetterCanBeVoiced()", "full_signature": "public boolean lastLetterCanBeVoiced()", "class_method_signature": "SuffixFormSequence.lastLetterCanBeVoiced()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/trnltk/model/suffix/SuffixFormSequence.java"}, "focal_method": {"identifier": "getRules", "parameters": "()", "modifiers": "public", "return": "ImmutableList<SuffixFormSequenceRule>", "body": "public ImmutableList<SuffixFormSequenceRule> getRules() {\n        return rules;\n    }", "signature": "ImmutableList<SuffixFormSequenceRule> getRules()", "full_signature": "public ImmutableList<SuffixFormSequenceRule> getRules()", "class_method_signature": "SuffixFormSequence.getRules()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7321072, "url": "https://github.com/aliok/trnltk-java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 39, "size": 3428, "license": "licensed"}}