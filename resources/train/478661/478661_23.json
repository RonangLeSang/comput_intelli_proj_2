{"test_class": {"identifier": "CSVParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CSVParser csvParser;", "modifier": "", "type": "CSVParser", "declarator": "csvParser", "var_name": "csvParser"}, {"original_string": "private static final String ESCAPE_TEST_STRING = \"\\\\\\\\1\\\\2\\\\\\\"3\\\\\";", "modifier": "private static final", "type": "String", "declarator": "ESCAPE_TEST_STRING = \"\\\\\\\\1\\\\2\\\\\\\"3\\\\\"", "var_name": "ESCAPE_TEST_STRING"}], "file": "commons/src/test/java/au/com/bytecode/opencsv/CSVParserTest.java"}, "test_case": {"identifier": "parseQuotedStringWithCommas", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseQuotedStringWithCommas() throws IOException {\n        String[] nextLine = csvParser.parseLine(\"a,\\\"b,b,b\\\",c\");\n        assertEquals(\"a\", nextLine[0]);\n        assertEquals(\"b,b,b\", nextLine[1]);\n        assertEquals(\"c\", nextLine[2]);\n        assertEquals(3, nextLine.length);\n    }", "signature": "void parseQuotedStringWithCommas()", "full_signature": "@Test public void parseQuotedStringWithCommas()", "class_method_signature": "CSVParserTest.parseQuotedStringWithCommas()", "testcase": true, "constructor": false, "invocations": ["parseLine", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CSVParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "final char separator;", "modifier": "final", "type": "char", "declarator": "separator", "var_name": "separator"}, {"original_string": "final char quotechar;", "modifier": "final", "type": "char", "declarator": "quotechar", "var_name": "quotechar"}, {"original_string": "final char escape;", "modifier": "final", "type": "char", "declarator": "escape", "var_name": "escape"}, {"original_string": "final boolean strictQuotes;", "modifier": "final", "type": "boolean", "declarator": "strictQuotes", "var_name": "strictQuotes"}, {"original_string": "private String pending;", "modifier": "private", "type": "String", "declarator": "pending", "var_name": "pending"}, {"original_string": "private boolean inField = false;", "modifier": "private", "type": "boolean", "declarator": "inField = false", "var_name": "inField"}, {"original_string": "final boolean ignoreLeadingWhiteSpace;", "modifier": "final", "type": "boolean", "declarator": "ignoreLeadingWhiteSpace", "var_name": "ignoreLeadingWhiteSpace"}, {"original_string": "final boolean ignoreQuotations;", "modifier": "final", "type": "boolean", "declarator": "ignoreQuotations", "var_name": "ignoreQuotations"}, {"original_string": "public static final char DEFAULT_SEPARATOR = ',';", "modifier": "public static final", "type": "char", "declarator": "DEFAULT_SEPARATOR = ','", "var_name": "DEFAULT_SEPARATOR"}, {"original_string": "public static final int INITIAL_READ_SIZE = 128;", "modifier": "public static final", "type": "int", "declarator": "INITIAL_READ_SIZE = 128", "var_name": "INITIAL_READ_SIZE"}, {"original_string": "public static final char DEFAULT_QUOTE_CHARACTER = '\"';", "modifier": "public static final", "type": "char", "declarator": "DEFAULT_QUOTE_CHARACTER = '\"'", "var_name": "DEFAULT_QUOTE_CHARACTER"}, {"original_string": "public static final char DEFAULT_ESCAPE_CHARACTER = '\\\\';", "modifier": "public static final", "type": "char", "declarator": "DEFAULT_ESCAPE_CHARACTER = '\\\\'", "var_name": "DEFAULT_ESCAPE_CHARACTER"}, {"original_string": "public static final boolean DEFAULT_STRICT_QUOTES = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_STRICT_QUOTES = false", "var_name": "DEFAULT_STRICT_QUOTES"}, {"original_string": "public static final boolean DEFAULT_IGNORE_LEADING_WHITESPACE = true;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_IGNORE_LEADING_WHITESPACE = true", "var_name": "DEFAULT_IGNORE_LEADING_WHITESPACE"}, {"original_string": "public static final boolean DEFAULT_IGNORE_QUOTATIONS = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_IGNORE_QUOTATIONS = false", "var_name": "DEFAULT_IGNORE_QUOTATIONS"}, {"original_string": "static final char NULL_CHARACTER = '\\0';", "modifier": "static final", "type": "char", "declarator": "NULL_CHARACTER = '\\0'", "var_name": "NULL_CHARACTER"}], "methods": [{"identifier": "CSVParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " CSVParser()", "full_signature": "public  CSVParser()", "class_method_signature": "CSVParser.CSVParser()", "testcase": false, "constructor": true}, {"identifier": "CSVParser", "parameters": "(char separator)", "modifiers": "public", "return": "", "signature": " CSVParser(char separator)", "full_signature": "public  CSVParser(char separator)", "class_method_signature": "CSVParser.CSVParser(char separator)", "testcase": false, "constructor": true}, {"identifier": "CSVParser", "parameters": "(char separator, char quotechar)", "modifiers": "public", "return": "", "signature": " CSVParser(char separator, char quotechar)", "full_signature": "public  CSVParser(char separator, char quotechar)", "class_method_signature": "CSVParser.CSVParser(char separator, char quotechar)", "testcase": false, "constructor": true}, {"identifier": "CSVParser", "parameters": "(char separator, char quotechar, char escape)", "modifiers": "public", "return": "", "signature": " CSVParser(char separator, char quotechar, char escape)", "full_signature": "public  CSVParser(char separator, char quotechar, char escape)", "class_method_signature": "CSVParser.CSVParser(char separator, char quotechar, char escape)", "testcase": false, "constructor": true}, {"identifier": "CSVParser", "parameters": "(char separator, char quotechar, char escape, boolean strictQuotes)", "modifiers": "public", "return": "", "signature": " CSVParser(char separator, char quotechar, char escape, boolean strictQuotes)", "full_signature": "public  CSVParser(char separator, char quotechar, char escape, boolean strictQuotes)", "class_method_signature": "CSVParser.CSVParser(char separator, char quotechar, char escape, boolean strictQuotes)", "testcase": false, "constructor": true}, {"identifier": "CSVParser", "parameters": "(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace)", "modifiers": "public", "return": "", "signature": " CSVParser(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace)", "full_signature": "public  CSVParser(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace)", "class_method_signature": "CSVParser.CSVParser(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace)", "testcase": false, "constructor": true}, {"identifier": "CSVParser", "parameters": "(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace,\n                     boolean ignoreQuotations)", "modifiers": "public", "return": "", "signature": " CSVParser(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace,\n                     boolean ignoreQuotations)", "full_signature": "public  CSVParser(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace,\n                     boolean ignoreQuotations)", "class_method_signature": "CSVParser.CSVParser(char separator, char quotechar, char escape, boolean strictQuotes, boolean ignoreLeadingWhiteSpace,\n                     boolean ignoreQuotations)", "testcase": false, "constructor": true}, {"identifier": "anyCharactersAreTheSame", "parameters": "(char separator, char quotechar, char escape)", "modifiers": "private", "return": "boolean", "signature": "boolean anyCharactersAreTheSame(char separator, char quotechar, char escape)", "full_signature": "private boolean anyCharactersAreTheSame(char separator, char quotechar, char escape)", "class_method_signature": "CSVParser.anyCharactersAreTheSame(char separator, char quotechar, char escape)", "testcase": false, "constructor": false}, {"identifier": "isSameCharacter", "parameters": "(char c1, char c2)", "modifiers": "private", "return": "boolean", "signature": "boolean isSameCharacter(char c1, char c2)", "full_signature": "private boolean isSameCharacter(char c1, char c2)", "class_method_signature": "CSVParser.isSameCharacter(char c1, char c2)", "testcase": false, "constructor": false}, {"identifier": "isPending", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPending()", "full_signature": "public boolean isPending()", "class_method_signature": "CSVParser.isPending()", "testcase": false, "constructor": false}, {"identifier": "parseLineMulti", "parameters": "(String nextLine)", "modifiers": "public", "return": "String[]", "signature": "String[] parseLineMulti(String nextLine)", "full_signature": "public String[] parseLineMulti(String nextLine)", "class_method_signature": "CSVParser.parseLineMulti(String nextLine)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String nextLine)", "modifiers": "public", "return": "String[]", "signature": "String[] parseLine(String nextLine)", "full_signature": "public String[] parseLine(String nextLine)", "class_method_signature": "CSVParser.parseLine(String nextLine)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String nextLine, boolean multi)", "modifiers": "private", "return": "String[]", "signature": "String[] parseLine(String nextLine, boolean multi)", "full_signature": "private String[] parseLine(String nextLine, boolean multi)", "class_method_signature": "CSVParser.parseLine(String nextLine, boolean multi)", "testcase": false, "constructor": false}, {"identifier": "isNextCharacterEscapedQuote", "parameters": "(String nextLine, boolean inQuotes, int i)", "modifiers": "private", "return": "boolean", "signature": "boolean isNextCharacterEscapedQuote(String nextLine, boolean inQuotes, int i)", "full_signature": "private boolean isNextCharacterEscapedQuote(String nextLine, boolean inQuotes, int i)", "class_method_signature": "CSVParser.isNextCharacterEscapedQuote(String nextLine, boolean inQuotes, int i)", "testcase": false, "constructor": false}, {"identifier": "isNextCharacterEscapable", "parameters": "(String nextLine, boolean inQuotes, int i)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNextCharacterEscapable(String nextLine, boolean inQuotes, int i)", "full_signature": "protected boolean isNextCharacterEscapable(String nextLine, boolean inQuotes, int i)", "class_method_signature": "CSVParser.isNextCharacterEscapable(String nextLine, boolean inQuotes, int i)", "testcase": false, "constructor": false}, {"identifier": "isAllWhiteSpace", "parameters": "(CharSequence sb)", "modifiers": "protected", "return": "boolean", "signature": "boolean isAllWhiteSpace(CharSequence sb)", "full_signature": "protected boolean isAllWhiteSpace(CharSequence sb)", "class_method_signature": "CSVParser.isAllWhiteSpace(CharSequence sb)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/au/com/bytecode/opencsv/CSVParser.java"}, "focal_method": {"identifier": "parseLine", "parameters": "(String nextLine)", "modifiers": "public", "return": "String[]", "body": "public String[] parseLine(String nextLine) throws IOException {\n        return parseLine(nextLine, false);\n    }", "signature": "String[] parseLine(String nextLine)", "full_signature": "public String[] parseLine(String nextLine)", "class_method_signature": "CSVParser.parseLine(String nextLine)", "testcase": false, "constructor": false, "invocations": ["parseLine"]}, "repository": {"repo_id": 478661, "url": "https://github.com/deepsky/SQL-Code-Assistant-", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 25, "size": 205981, "license": "licensed"}}