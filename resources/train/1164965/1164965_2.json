{"test_class": {"identifier": "URLPatternParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/ocpsoft/pretty/faces/url/URLPatternParserTest.java"}, "test_case": {"identifier": "testGetNamedValuedParameterList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testGetNamedValuedParameterList()\n   {\n      URLPatternParser namedValuedParamParser = new URLPatternParser(\"/foo/#{named:bean.value}/\");\n      List<PathParameter> params = namedValuedParamParser.parse(new URL(\"/foo/love/\"));\n      assertEquals(1, params.size());\n\n      PathParameter p = params.get(0);\n      assertEquals(0, p.getPosition());\n      assertEquals(\"love\", p.getValue());\n      assertEquals(\"named\", p.getName());\n      assertEquals(\"#{bean.value}\", p.getExpression().getELExpression());\n   }", "signature": "void testGetNamedValuedParameterList()", "full_signature": "@Test public void testGetNamedValuedParameterList()", "class_method_signature": "URLPatternParserTest.testGetNamedValuedParameterList()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "size", "get", "assertEquals", "getPosition", "assertEquals", "getValue", "assertEquals", "getName", "assertEquals", "getELExpression", "getExpression"]}, "focal_class": {"identifier": "URLPatternParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern EL_REGEX_PATTERN = Pattern.compile(Expressions.EL_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "EL_REGEX_PATTERN = Pattern.compile(Expressions.EL_REGEX)", "var_name": "EL_REGEX_PATTERN"}, {"original_string": "private final String originalPattern;", "modifier": "private final", "type": "String", "declarator": "originalPattern", "var_name": "originalPattern"}, {"original_string": "private boolean elPattern;", "modifier": "private", "type": "boolean", "declarator": "elPattern", "var_name": "elPattern"}, {"original_string": "private URL urlPattern = null;", "modifier": "private", "type": "URL", "declarator": "urlPattern = null", "var_name": "urlPattern"}, {"original_string": "private Pattern urlElPattern;", "modifier": "private", "type": "Pattern", "declarator": "urlElPattern", "var_name": "urlElPattern"}, {"original_string": "private List<Segment> pathSegments = new ArrayList<Segment>();", "modifier": "private", "type": "List<Segment>", "declarator": "pathSegments = new ArrayList<Segment>()", "var_name": "pathSegments"}, {"original_string": "private List<PathParameter> pathParameters = new ArrayList<PathParameter>();", "modifier": "private", "type": "List<PathParameter>", "declarator": "pathParameters = new ArrayList<PathParameter>()", "var_name": "pathParameters"}], "methods": [{"identifier": "URLPatternParser", "parameters": "(final String pattern)", "modifiers": "public", "return": "", "signature": " URLPatternParser(final String pattern)", "full_signature": "public  URLPatternParser(final String pattern)", "class_method_signature": "URLPatternParser.URLPatternParser(final String pattern)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final URL target)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final URL target)", "full_signature": "public boolean matches(final URL target)", "class_method_signature": "URLPatternParser.matches(final URL target)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final String target)", "modifiers": "@Deprecated public", "return": "boolean", "signature": "boolean matches(final String target)", "full_signature": "@Deprecated public boolean matches(final String target)", "class_method_signature": "URLPatternParser.matches(final String target)", "testcase": false, "constructor": false}, {"identifier": "getPathParameters", "parameters": "()", "modifiers": "public", "return": "List<PathParameter>", "signature": "List<PathParameter> getPathParameters()", "full_signature": "public List<PathParameter> getPathParameters()", "class_method_signature": "URLPatternParser.getPathParameters()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final URL url)", "modifiers": "public", "return": "List<PathParameter>", "signature": "List<PathParameter> parse(final URL url)", "full_signature": "public List<PathParameter> parse(final URL url)", "class_method_signature": "URLPatternParser.parse(final URL url)", "testcase": false, "constructor": false}, {"identifier": "getMappedURL", "parameters": "(final Object... params)", "modifiers": "public", "return": "URL", "signature": "URL getMappedURL(final Object... params)", "full_signature": "public URL getMappedURL(final Object... params)", "class_method_signature": "URLPatternParser.getMappedURL(final Object... params)", "testcase": false, "constructor": false}, {"identifier": "getParameterCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getParameterCount()", "full_signature": "public int getParameterCount()", "class_method_signature": "URLPatternParser.getParameterCount()", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getPattern()", "full_signature": "public Object getPattern()", "class_method_signature": "URLPatternParser.getPattern()", "testcase": false, "constructor": false}, {"identifier": "isElPattern", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isElPattern()", "full_signature": "public boolean isElPattern()", "class_method_signature": "URLPatternParser.isElPattern()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/ocpsoft/pretty/faces/url/URLPatternParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final URL url)", "modifiers": "public", "return": "List<PathParameter>", "body": "public List<PathParameter> parse(final URL url)\n   {\n      List<PathParameter> result = new ArrayList<PathParameter>();\n\n      String inboundUrl = url.toURL();\n      if (this.matches(url))\n      {\n         Iterator<Segment> iter = pathSegments.iterator();\n         while (iter.hasNext())\n         {\n            Segment segment = iter.next();\n\n            String regex = \"\";\n            if (url.hasLeadingSlash() && !\"/\".equals(url.toURL()))\n            {\n               regex += \"/\";\n            }\n\n            regex += segment.getRegex();\n            if (iter.hasNext() || url.hasTrailingSlash())\n            {\n               regex += \"/\";\n            }\n\n            Matcher segmentMatcher = Pattern.compile(regex).matcher(inboundUrl);\n            if (segmentMatcher.find())\n            {\n               for (int j = 0; j < segment.numParameters(); j++)\n               {\n                  String value = segmentMatcher.group(j + 1);\n                  PathParameter param = segment.getParameter(j).copy();\n                  param.setValue(value);\n                  result.add(param);\n               }\n\n               int regionEnd = segmentMatcher.end();\n\n               inboundUrl = inboundUrl.substring(regionEnd - 1);\n            }\n            else\n            {\n               throw new PrettyException(\"Error parsing url: <\" + url\n                           + \">, a parameter did not match compiled segment in pattern: \" + originalPattern);\n            }\n         }\n      }\n      else\n      {\n         throw new IllegalArgumentException(\"The given URL: \" + url + \", cannot be parsed by the pattern: \"\n                  + originalPattern);\n      }\n      return result;\n   }", "signature": "List<PathParameter> parse(final URL url)", "full_signature": "public List<PathParameter> parse(final URL url)", "class_method_signature": "URLPatternParser.parse(final URL url)", "testcase": false, "constructor": false, "invocations": ["toURL", "matches", "iterator", "hasNext", "next", "hasLeadingSlash", "equals", "toURL", "getRegex", "hasNext", "hasTrailingSlash", "matcher", "compile", "find", "numParameters", "group", "copy", "getParameter", "setValue", "add", "end", "substring"]}, "repository": {"repo_id": 1164965, "url": "https://github.com/ocpsoft/prettyfaces", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 53, "size": 2126, "license": "licensed"}}