{"test_class": {"identifier": "IntelHexTest", "superclass": "", "interfaces": "", "fields": [], "file": "usbtools/src/test/java/io/trygvis/usb/tools/IntelHexTest.java"}, "test_case": {"identifier": "testParseLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseLine() throws Exception {\n        IntelHexPacket hexPacket = IntelHex.parseLine(1, \":040000000201BB320C\");\n        assertNotNull(hexPacket);\n        assertEquals(2, hexPacket.lineNo);\n        assertEquals(DATA, hexPacket.recordType);\n        assertEquals(0x0000, hexPacket.address);\n        assertEquals(4, hexPacket.data.length);\n        assertEquals(0x02, hexPacket.data[0]);\n        assertEquals(0x01, hexPacket.data[1]);\n        assertEquals(0xbb, unsignedInt(hexPacket.data[2]));\n        assertEquals(0x32, hexPacket.data[3]);\n    }", "signature": "void testParseLine()", "full_signature": "@Test public void testParseLine()", "class_method_signature": "IntelHexTest.testParseLine()", "testcase": true, "constructor": false, "invocations": ["parseLine", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "unsignedInt", "assertEquals"]}, "focal_class": {"identifier": "IntelHex", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "openIntelHexFile", "parameters": "(final File file)", "modifiers": "public static", "return": "List<IntelHexPacket>", "signature": "List<IntelHexPacket> openIntelHexFile(final File file)", "full_signature": "public static List<IntelHexPacket> openIntelHexFile(final File file)", "class_method_signature": "IntelHex.openIntelHexFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "openIntelHexFile", "parameters": "(final InputStream is)", "modifiers": "public static", "return": "List<IntelHexPacket>", "signature": "List<IntelHexPacket> openIntelHexFile(final InputStream is)", "full_signature": "public static List<IntelHexPacket> openIntelHexFile(final InputStream is)", "class_method_signature": "IntelHex.openIntelHexFile(final InputStream is)", "testcase": false, "constructor": false}, {"identifier": "createLine", "parameters": "(RecordType recordType, int address, byte[] data)", "modifiers": "public static", "return": "String", "signature": "String createLine(RecordType recordType, int address, byte[] data)", "full_signature": "public static String createLine(RecordType recordType, int address, byte[] data)", "class_method_signature": "IntelHex.createLine(RecordType recordType, int address, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(int lineNo, String line)", "modifiers": "public static", "return": "IntelHexPacket", "signature": "IntelHexPacket parseLine(int lineNo, String line)", "full_signature": "public static IntelHexPacket parseLine(int lineNo, String line)", "class_method_signature": "IntelHex.parseLine(int lineNo, String line)", "testcase": false, "constructor": false}], "file": "usbtools/src/main/java/io/trygvis/usb/tools/IntelHex.java"}, "focal_method": {"identifier": "parseLine", "parameters": "(int lineNo, String line)", "modifiers": "public static", "return": "IntelHexPacket", "body": "public static IntelHexPacket parseLine(int lineNo, String line) throws IOException {\n        if (line.length() < 9) {\n            throw new IOException(\"line \" + lineNo + \": the line must contain at least 9 characters.\");\n        }\n        lineNo++;\n\n        char startCode = line.charAt(0);\n        int count = parseInt(line.substring(1, 3), 16);\n        int address = parseInt(line.substring(3, 7), 16);\n        int r = parseInt(line.substring(7, 9), 16);\n\n        if (startCode != ':') {\n            throw new IOException(\"line \" + lineNo + \": The first character must be ':'.\");\n        }\n\n        RecordType recordType = lookup(r);\n\n        if (recordType == DATA) {\n            int expectedLineLength = 9 + count * 2 + 2;\n            if (line.length() != expectedLineLength) {\n                throw new IOException(\"line \" + lineNo + \": Expected line to be \" + expectedLineLength + \" characters, was \" + line.length() + \".\");\n            }\n\n            byte data[] = new byte[count];\n\n            int x = 9;\n            for (int i = 0; i < count; i++) {\n                data[i] = (byte) parseInt(line.substring(x, x + 2), 16);\n                x += 2;\n            }\n\n            return new IntelHexPacket(lineNo, recordType, address, data);\n        }\n        else if(recordType == END_OF_FILE) {\n            return new IntelHexPacket(lineNo, recordType, address, new byte[0]);\n        }\n\n        throw new IOException(\"line \" + lineNo + \": Unknown record type: 0x\" + Long.toHexString(r) + \".\");\n    }", "signature": "IntelHexPacket parseLine(int lineNo, String line)", "full_signature": "public static IntelHexPacket parseLine(int lineNo, String line)", "class_method_signature": "IntelHex.parseLine(int lineNo, String line)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "parseInt", "substring", "parseInt", "substring", "parseInt", "substring", "lookup", "length", "length", "parseInt", "substring", "toHexString"]}, "repository": {"repo_id": 747707, "url": "https://github.com/trygvis/javax-usb-libusb1", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 43, "size": 475, "license": "licensed"}}