{"test_class": {"identifier": "ProcessorDependencyGraphFactoryTest", "superclass": "extends AbstractMapfishSpringTest", "interfaces": "", "fields": [{"original_string": "private static final String EXECUTION_TRACKER = \"executionOrder\";", "modifier": "private static final", "type": "String", "declarator": "EXECUTION_TRACKER = \"executionOrder\"", "var_name": "EXECUTION_TRACKER"}, {"original_string": "private static TestProcessor RootNoOutput = new RootNoOutputClass(\"RootNoOutput\", Void.class);", "modifier": "private static", "type": "TestProcessor", "declarator": "RootNoOutput = new RootNoOutputClass(\"RootNoOutput\", Void.class)", "var_name": "RootNoOutput"}, {"original_string": "private static TestProcessor RootMapOut = new RootMapOutClass(\"RootMapOut\", MapOutput.class);", "modifier": "private static", "type": "TestProcessor", "declarator": "RootMapOut = new RootMapOutClass(\"RootMapOut\", MapOutput.class)", "var_name": "RootMapOut"}, {"original_string": "private static TestProcessor RootDebugMapOut1 =\n            new RootDebugMapOutClass(\"RootDebugMapOut1\", DebugMapOutput.class);", "modifier": "private static", "type": "TestProcessor", "declarator": "RootDebugMapOut1 =\n            new RootDebugMapOutClass(\"RootDebugMapOut1\", DebugMapOutput.class)", "var_name": "RootDebugMapOut1"}, {"original_string": "private static TestProcessor RootDebugMapOut2 =\n            new RootDebugMapOutClass(\"RootDebugMapOut2\", DebugMapOutput.class);", "modifier": "private static", "type": "TestProcessor", "declarator": "RootDebugMapOut2 =\n            new RootDebugMapOutClass(\"RootDebugMapOut2\", DebugMapOutput.class)", "var_name": "RootDebugMapOut2"}, {"original_string": "private static TestProcessor RootTableAndWidthOut =\n            new TestProcessor<TrackerContainer, TableAndWidth>(\"RootTableAndWidthOut\",\n                                                               TableAndWidth.class) {\n\n                @Override\n                protected TableAndWidth getExtras() {\n                    return new TableAndWidth();\n                }\n            };", "modifier": "private static", "type": "TestProcessor", "declarator": "RootTableAndWidthOut =\n            new TestProcessor<TrackerContainer, TableAndWidth>(\"RootTableAndWidthOut\",\n                                                               TableAndWidth.class) {\n\n                @Override\n                protected TableAndWidth getExtras() {\n                    return new TableAndWidth();\n                }\n            }", "var_name": "RootTableAndWidthOut"}, {"original_string": "private static TestProcessor NeedsMapAndWidthOutputsMap =\n            new TestProcessor<MapAndWidth, MapOutput>(\"NeedsMapAndWidthOutputsMap\",\n                                                      MapOutput.class) {\n                @Override\n                public MapAndWidth createInputParameter() {\n                    return new MapAndWidth();\n                }\n\n                @Override\n                protected MapOutput getExtras() {\n                    return new MapOutput();\n                }\n            };", "modifier": "private static", "type": "TestProcessor", "declarator": "NeedsMapAndWidthOutputsMap =\n            new TestProcessor<MapAndWidth, MapOutput>(\"NeedsMapAndWidthOutputsMap\",\n                                                      MapOutput.class) {\n                @Override\n                public MapAndWidth createInputParameter() {\n                    return new MapAndWidth();\n                }\n\n                @Override\n                protected MapOutput getExtras() {\n                    return new MapOutput();\n                }\n            }", "var_name": "NeedsMapAndWidthOutputsMap"}, {"original_string": "private static TestProcessor NeedsMap = new NeedsMapClass(\"NeedsMap\", Void.class);", "modifier": "private static", "type": "TestProcessor", "declarator": "NeedsMap = new NeedsMapClass(\"NeedsMap\", Void.class)", "var_name": "NeedsMap"}, {"original_string": "private static TestProcessor NeedsMapList = new NeedsMapListClass(\"NeedsMapList\", Void.class);", "modifier": "private static", "type": "TestProcessor", "declarator": "NeedsMapList = new NeedsMapListClass(\"NeedsMapList\", Void.class)", "var_name": "NeedsMapList"}, {"original_string": "private static TestProcessor StyleNeedsMap = new StyleNeedsMapClass(\"StyleNeedsMap\", Void.class);", "modifier": "private static", "type": "TestProcessor", "declarator": "StyleNeedsMap = new StyleNeedsMapClass(\"StyleNeedsMap\", Void.class)", "var_name": "StyleNeedsMap"}, {"original_string": "private static TestProcessor<OverviewMapInput, Void> NeedsOverviewMapAndMap =\n            new NeedsOverviewMapAndMapClass(\"NeedsOverviewMapAndMap\", Void.class);", "modifier": "private static", "type": "TestProcessor<OverviewMapInput, Void>", "declarator": "NeedsOverviewMapAndMap =\n            new NeedsOverviewMapAndMapClass(\"NeedsOverviewMapAndMap\", Void.class)", "var_name": "NeedsOverviewMapAndMap"}, {"original_string": "private static TestProcessor<TableInput, Void> NeedsTable =\n            new TestProcessor<TableInput, Void>(\"NeedsTable\", Void.class) {\n                @Override\n                protected Void getExtras() {\n                    return null;\n                }\n\n                @Override\n                public TableInput createInputParameter() {\n                    return new TableInput();\n                }\n            };", "modifier": "private static", "type": "TestProcessor<TableInput, Void>", "declarator": "NeedsTable =\n            new TestProcessor<TableInput, Void>(\"NeedsTable\", Void.class) {\n                @Override\n                protected Void getExtras() {\n                    return null;\n                }\n\n                @Override\n                public TableInput createInputParameter() {\n                    return new TableInput();\n                }\n            }", "var_name": "NeedsTable"}, {"original_string": "private static Processor RootOutputExecutionTracker =\n            new AbstractProcessor<Void, TrackerContainer>(TrackerContainer.class) {\n                @Override\n                public Void createInputParameter() {\n                    return null;\n                }\n\n                @Override\n                public TrackerContainer execute(Void values, final ExecutionContext context) {\n                    assertNull(values);\n                    final TrackerContainer trackerContainer = new TrackerContainer();\n                    trackerContainer.executionOrder = new TestOrderExecution();\n                    return trackerContainer;\n                }\n\n                @Override\n                protected void extraValidation(\n                        List<Throwable> validationErrors, final Configuration configuration) {\n                    // no checks\n                }\n\n                @Override\n                public String toString() {\n                    return \"RootOutputExecutionTracker\";\n                }\n            };", "modifier": "private static", "type": "Processor", "declarator": "RootOutputExecutionTracker =\n            new AbstractProcessor<Void, TrackerContainer>(TrackerContainer.class) {\n                @Override\n                public Void createInputParameter() {\n                    return null;\n                }\n\n                @Override\n                public TrackerContainer execute(Void values, final ExecutionContext context) {\n                    assertNull(values);\n                    final TrackerContainer trackerContainer = new TrackerContainer();\n                    trackerContainer.executionOrder = new TestOrderExecution();\n                    return trackerContainer;\n                }\n\n                @Override\n                protected void extraValidation(\n                        List<Throwable> validationErrors, final Configuration configuration) {\n                    // no checks\n                }\n\n                @Override\n                public String toString() {\n                    return \"RootOutputExecutionTracker\";\n                }\n            }", "var_name": "RootOutputExecutionTracker"}, {"original_string": "private static TestProcessor NeedsMapProducesMap =\n            new TestProcessor<MapInput, MapOutput>(\"NeedsMapProducesMap\",\n                                                   MapOutput.class) {\n                @Override\n                public MapInput createInputParameter() {\n                    return new MapInput();\n                }\n\n                @Override\n                protected MapOutput getExtras() {\n                    return new MapOutput();\n                }\n            };", "modifier": "private static", "type": "TestProcessor", "declarator": "NeedsMapProducesMap =\n            new TestProcessor<MapInput, MapOutput>(\"NeedsMapProducesMap\",\n                                                   MapOutput.class) {\n                @Override\n                public MapInput createInputParameter() {\n                    return new MapInput();\n                }\n\n                @Override\n                protected MapOutput getExtras() {\n                    return new MapOutput();\n                }\n            }", "var_name": "NeedsMapProducesMap"}, {"original_string": "private static TestProcessor NeedsTableProducesTable =\n            new TestProcessor<TableInput, TableOutput>(\"NeedsTableProducesTable\",\n                                                       TableOutput.class) {\n\n                @Override\n                protected TableOutput getExtras() {\n                    return new TableOutput();\n                }\n\n                @Override\n                public TableInput createInputParameter() {\n                    return new TableInput();\n                }\n            };", "modifier": "private static", "type": "TestProcessor", "declarator": "NeedsTableProducesTable =\n            new TestProcessor<TableInput, TableOutput>(\"NeedsTableProducesTable\",\n                                                       TableOutput.class) {\n\n                @Override\n                protected TableOutput getExtras() {\n                    return new TableOutput();\n                }\n\n                @Override\n                public TableInput createInputParameter() {\n                    return new TableInput();\n                }\n            }", "var_name": "NeedsTableProducesTable"}, {"original_string": "@Autowired\n    private ProcessorDependencyGraphFactory processorDependencyGraphFactory;", "modifier": "@Autowired\n    private", "type": "ProcessorDependencyGraphFactory", "declarator": "processorDependencyGraphFactory", "var_name": "processorDependencyGraphFactory"}, {"original_string": "private ForkJoinPool forkJoinPool;", "modifier": "private", "type": "ForkJoinPool", "declarator": "forkJoinPool", "var_name": "forkJoinPool"}], "file": "core/src/test/java/org/mapfish/print/processor/ProcessorDependencyGraphFactoryTest.java"}, "test_case": {"identifier": "testSimpleBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimpleBuild() {\n        final List<TestProcessor> processors = Arrays.asList(RootNoOutput, RootMapOut,\n                                                             RootTableAndWidthOut, NeedsTable,\n                                                             NeedsMap);\n        ProcessorDependencyGraph graph = this.processorDependencyGraphFactory.build(processors,\n                                                                                    Collections.emptyMap());\n        assertContainsProcessors(graph.getRoots(), RootMapOut, RootNoOutput, RootTableAndWidthOut);\n        final TestOrderExecution execution = new TestOrderExecution();\n        Values values = new Values();\n        values.put(EXECUTION_TRACKER, execution);\n        forkJoinPool.invoke(graph.createTask(values));\n\n        assertEquals(execution.testOrderExecution.toString(), 5, execution.testOrderExecution.size());\n        assertHasOrdering(execution, RootMapOut, NeedsMap);\n        assertHasOrdering(execution, RootTableAndWidthOut, NeedsTable);\n    }", "signature": "void testSimpleBuild()", "full_signature": "@Test public void testSimpleBuild()", "class_method_signature": "ProcessorDependencyGraphFactoryTest.testSimpleBuild()", "testcase": true, "constructor": false, "invocations": ["asList", "build", "emptyMap", "assertContainsProcessors", "getRoots", "put", "invoke", "createTask", "assertEquals", "toString", "size", "assertHasOrdering", "assertHasOrdering"]}, "focal_class": {"identifier": "ProcessorDependencyGraphFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MetricRegistry metricRegistry;", "modifier": "@Autowired\n    private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "methods": [{"identifier": "getInputs", "parameters": "(final Processor<?, ?> processor)", "modifiers": "private static", "return": "Set<InputValue>", "signature": "Set<InputValue> getInputs(final Processor<?, ?> processor)", "full_signature": "private static Set<InputValue> getInputs(final Processor<?, ?> processor)", "class_method_signature": "ProcessorDependencyGraphFactory.getInputs(final Processor<?, ?> processor)", "testcase": false, "constructor": false}, {"identifier": "getOutputValues", "parameters": "(final Processor<?, ?> processor)", "modifiers": "private static", "return": "Collection<OutputValue>", "signature": "Collection<OutputValue> getOutputValues(final Processor<?, ?> processor)", "full_signature": "private static Collection<OutputValue> getOutputValues(final Processor<?, ?> processor)", "class_method_signature": "ProcessorDependencyGraphFactory.getOutputValues(final Processor<?, ?> processor)", "testcase": false, "constructor": false}, {"identifier": "fillProcessorAttributes", "parameters": "(\n            final List<Processor> processors,\n            final Map<String, Attribute> initialAttributes)", "modifiers": "public static", "return": "void", "signature": "void fillProcessorAttributes(\n            final List<Processor> processors,\n            final Map<String, Attribute> initialAttributes)", "full_signature": "public static void fillProcessorAttributes(\n            final List<Processor> processors,\n            final Map<String, Attribute> initialAttributes)", "class_method_signature": "ProcessorDependencyGraphFactory.fillProcessorAttributes(\n            final List<Processor> processors,\n            final Map<String, Attribute> initialAttributes)", "testcase": false, "constructor": false}, {"identifier": "verifyAllMappingsMatchParameter", "parameters": "(\n            final Set<String> mappings, final Class<?> paramType,\n            final String errorMessagePrefix)", "modifiers": "private static", "return": "void", "signature": "void verifyAllMappingsMatchParameter(\n            final Set<String> mappings, final Class<?> paramType,\n            final String errorMessagePrefix)", "full_signature": "private static void verifyAllMappingsMatchParameter(\n            final Set<String> mappings, final Class<?> paramType,\n            final String errorMessagePrefix)", "class_method_signature": "ProcessorDependencyGraphFactory.verifyAllMappingsMatchParameter(\n            final Set<String> mappings, final Class<?> paramType,\n            final String errorMessagePrefix)", "testcase": false, "constructor": false}, {"identifier": "listOptions", "parameters": "(final Set<String> attributeNames)", "modifiers": "private static", "return": "String", "signature": "String listOptions(final Set<String> attributeNames)", "full_signature": "private static String listOptions(final Set<String> attributeNames)", "class_method_signature": "ProcessorDependencyGraphFactory.listOptions(final Set<String> attributeNames)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "ProcessorDependencyGraph", "signature": "ProcessorDependencyGraph build(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "full_signature": "@SuppressWarnings(\"unchecked\") public ProcessorDependencyGraph build(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "class_method_signature": "ProcessorDependencyGraphFactory.build(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/mapfish/print/processor/ProcessorDependencyGraphFactory.java"}, "focal_method": {"identifier": "build", "parameters": "(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "ProcessorDependencyGraph", "body": "@SuppressWarnings(\"unchecked\")\n    public ProcessorDependencyGraph build(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes) {\n        ProcessorDependencyGraph graph = new ProcessorDependencyGraph();\n\n        final Map<String, ProcessorGraphNode<Object, Object>> provideByProcessor =\n                new HashMap<>();\n        final Map<String, Class<?>> outputTypes = new HashMap<>(attributes);\n\n        // Add internal values\n        outputTypes.put(Values.VALUES_KEY, Values.class);\n        outputTypes.put(Values.TASK_DIRECTORY_KEY, File.class);\n        outputTypes.put(Values.CLIENT_HTTP_REQUEST_FACTORY_KEY, MfClientHttpRequestFactoryProvider.class);\n        outputTypes.put(Values.TEMPLATE_KEY, Template.class);\n        outputTypes.put(Values.PDF_CONFIG_KEY, PDFConfig.class);\n        outputTypes.put(Values.SUBREPORT_DIR_KEY, String.class);\n        outputTypes.put(Values.OUTPUT_FORMAT_KEY, String.class);\n        outputTypes.put(Values.JOB_ID_KEY, String.class);\n        outputTypes.put(MapPrinterServlet.JSON_REQUEST_HEADERS, HttpRequestHeadersAttribute.Value.class);\n        outputTypes.put(Values.LOCALE_KEY, Locale.class);\n\n        for (Processor processor: processors) {\n            final ProcessorGraphNode<Object, Object> node =\n                    new ProcessorGraphNode<Object, Object>(processor, this.metricRegistry);\n\n            final Set<InputValue> inputs = getInputs(node.getProcessor());\n            boolean isRoot = true;\n            // check input/output value dependencies\n            for (InputValue input: inputs) {\n                if (input.name.equals(Values.VALUES_KEY)) {\n                    if (processor instanceof CustomDependencies) {\n                        for (String name: ((CustomDependencies) processor).getDependencies()) {\n                            final Class<?> outputType = outputTypes.get(name);\n                            if (outputType == null) {\n                                throw new IllegalArgumentException(String.format(\n                                        \"The Processor '%s' has no value for the dynamic input '%s'.\",\n                                        processor, name));\n                            }\n                            final ProcessorGraphNode<Object, Object> processorSolution =\n                                    provideByProcessor.get(name);\n                            if (processorSolution != null) {\n                                processorSolution.addDependency(node);\n                                isRoot = false;\n                            }\n                        }\n                    } else {\n                        for (ProcessorGraphNode<Object, Object> processorSolution:\n                                provideByProcessor.values()) {\n                            processorSolution.addDependency(node);\n                            isRoot = false;\n                        }\n                    }\n                } else {\n                    final Class<?> outputType = outputTypes.get(input.name);\n                    if (outputType != null) {\n                        final Class<?> inputType = input.type;\n                        final ProcessorGraphNode<Object, Object> processorSolution =\n                                provideByProcessor.get(input.name);\n                        if (inputType.isAssignableFrom(outputType)) {\n                            if (processorSolution != null) {\n                                processorSolution.addDependency(node);\n                                isRoot = false;\n                            }\n                        } else {\n                            if (processorSolution != null) {\n                                throw new IllegalArgumentException(String.format(\n                                        \"Type conflict: Processor '%s' provides an output with name '%s' \" +\n                                                \"and of type '%s', while processor '%s' expects an input \" +\n                                                \"of that name with type '%s'! Please rename one of the \" +\n                                                \"attributes in the mappings of the processors.\",\n                                        processorSolution.getName(), input.name, outputType, node.getName(),\n                                        inputType));\n                            } else {\n                                throw new IllegalArgumentException(String.format(\n                                        \"Type conflict: the attribute '%s' of type '%s', while processor \" +\n                                                \"'%s' expects an input of that name with type '%s'!\",\n                                        input.name, outputType, node.getName(), inputType));\n                            }\n                        }\n                    } else {\n                        if (input.field.getAnnotation(HasDefaultValue.class) == null) {\n                            throw new IllegalArgumentException(String.format(\n                                    \"The Processor '%s' has no value for the input '%s'.\",\n                                    processor, input.name));\n                        }\n                    }\n                }\n            }\n            if (isRoot) {\n                graph.addRoot(node);\n            }\n\n            for (OutputValue value: getOutputValues(node.getProcessor())) {\n                String outputName = value.name;\n                if (outputTypes.containsKey(outputName)) {\n                    // there is already an output with the same name\n                    if (value.canBeRenamed) {\n                        // if this is just a debug output, we can simply rename it\n                        outputName = outputName + \"_\" + UUID.randomUUID().toString();\n                    } else {\n                        ProcessorGraphNode<Object, Object> provider = provideByProcessor.get(outputName);\n                        if (provider == null) {\n                            throw new IllegalArgumentException(String.format(\n                                    \"Processors '%s' provide the output '%s' who is already declared as \" +\n                                            \"an attribute.  You have to rename one of the outputs and the \" +\n                                            \"corresponding input so that there is no ambiguity with \" +\n                                            \"regards to the input a processor consumes.\",\n                                    processor, outputName));\n                        } else {\n                            throw new IllegalArgumentException(String.format(\n                                    \"Multiple processors provide the same output mapping: '%s' and \" +\n                                            \"'%s' both provide: '%s'.  You have to rename one of the \" +\n                                            \"outputs and the corresponding input so that there is no \" +\n                                            \"ambiguity with regards to the input a processor consumes.\",\n                                    processor, provider, outputName));\n                        }\n                    }\n                }\n\n                provideByProcessor.put(outputName, node);\n                outputTypes.put(outputName, value.type);\n            }\n\n            // check input/output value dependencies\n            for (InputValue input: inputs) {\n                if (input.field.getAnnotation(InputOutputValue.class) != null) {\n                    provideByProcessor.put(input.name, node);\n                }\n            }\n        }\n\n        final Collection<? extends Processor> missingProcessors = CollectionUtils.subtract(\n                processors, graph.getAllProcessors());\n        final StringBuilder missingProcessorsName = new StringBuilder();\n        for (Processor p: missingProcessors) {\n            missingProcessorsName.append(\"\\n- \");\n            missingProcessorsName.append(p.toString());\n        }\n        Assert.isTrue(\n                missingProcessors.isEmpty(),\n                \"The processor graph:\\n\" + graph + \"\\ndoes not contain all the processors, missing:\" +\n                        missingProcessorsName);\n\n        return graph;\n    }", "signature": "ProcessorDependencyGraph build(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "full_signature": "@SuppressWarnings(\"unchecked\") public ProcessorDependencyGraph build(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "class_method_signature": "ProcessorDependencyGraphFactory.build(\n            final List<? extends Processor> processors,\n            final Map<String, Class<?>> attributes)", "testcase": false, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "getInputs", "getProcessor", "equals", "getDependencies", "get", "format", "get", "addDependency", "values", "addDependency", "get", "get", "isAssignableFrom", "addDependency", "format", "getName", "getName", "format", "getName", "getAnnotation", "format", "addRoot", "getOutputValues", "getProcessor", "containsKey", "toString", "randomUUID", "get", "format", "format", "put", "put", "getAnnotation", "put", "subtract", "getAllProcessors", "append", "append", "toString", "isTrue", "isEmpty"]}, "repository": {"repo_id": 2737689, "url": "https://github.com/mapfish/mapfish-print", "stars": 140, "created": "11/8/2011 10:24:04 PM +00:00", "updates": "2020-01-27T02:28:30+00:00", "fork": "False", "license": "licensed"}}