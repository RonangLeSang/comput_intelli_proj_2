{"test_class": {"identifier": "RoleAccessAssertionTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/mapfish/print/config/access/RoleAccessAssertionTest.java"}, "test_case": {"identifier": "testValidate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidate() {\n        List<Throwable> errors = new ArrayList<>();\n        final RoleAccessAssertion assertion = new RoleAccessAssertion();\n        assertion.validate(errors, null);\n        assertEquals(1, errors.size());\n        errors.clear();\n        assertion.setRequiredRoles(Collections.singleton(\"ROLE_USER\"));\n        assertion.validate(errors, null);\n        assertEquals(0, errors.size());\n    }", "signature": "void testValidate()", "full_signature": "@Test public void testValidate()", "class_method_signature": "RoleAccessAssertionTest.testValidate()", "testcase": true, "constructor": false, "invocations": ["validate", "assertEquals", "size", "clear", "setRequiredRoles", "singleton", "validate", "assertEquals", "size"]}, "focal_class": {"identifier": "RoleAccessAssertion", "superclass": "", "interfaces": "implements AccessAssertion", "fields": [{"original_string": "private static final String JSON_ROLES = \"roles\";", "modifier": "private static final", "type": "String", "declarator": "JSON_ROLES = \"roles\"", "var_name": "JSON_ROLES"}, {"original_string": "private Set<String> requiredRoles;", "modifier": "private", "type": "Set<String>", "declarator": "requiredRoles", "var_name": "requiredRoles"}], "methods": [{"identifier": "setRequiredRoles", "parameters": "(final Collection<String> assertionRequiredRoles)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "AccessAssertion", "signature": "AccessAssertion setRequiredRoles(final Collection<String> assertionRequiredRoles)", "full_signature": "@SuppressWarnings(\"unchecked\") public AccessAssertion setRequiredRoles(final Collection<String> assertionRequiredRoles)", "class_method_signature": "RoleAccessAssertion.setRequiredRoles(final Collection<String> assertionRequiredRoles)", "testcase": false, "constructor": false}, {"identifier": "assertAccess", "parameters": "(final String resourceDescription, final Object protectedResource)", "modifiers": "@Override public", "return": "void", "signature": "void assertAccess(final String resourceDescription, final Object protectedResource)", "full_signature": "@Override public void assertAccess(final String resourceDescription, final Object protectedResource)", "class_method_signature": "RoleAccessAssertion.assertAccess(final String resourceDescription, final Object protectedResource)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "()", "modifiers": "@Override public", "return": "JSONObject", "signature": "JSONObject marshal()", "full_signature": "@Override public JSONObject marshal()", "class_method_signature": "RoleAccessAssertion.marshal()", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(final JSONObject encodedAssertion)", "modifiers": "@Override public", "return": "void", "signature": "void unmarshal(final JSONObject encodedAssertion)", "full_signature": "@Override public void unmarshal(final JSONObject encodedAssertion)", "class_method_signature": "RoleAccessAssertion.unmarshal(final JSONObject encodedAssertion)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final List<Throwable> validationErrors, final Configuration configuration)", "modifiers": "@Override public", "return": "void", "signature": "void validate(final List<Throwable> validationErrors, final Configuration configuration)", "full_signature": "@Override public void validate(final List<Throwable> validationErrors, final Configuration configuration)", "class_method_signature": "RoleAccessAssertion.validate(final List<Throwable> validationErrors, final Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "RoleAccessAssertion.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RoleAccessAssertion.hashCode()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "AccessAssertion", "signature": "AccessAssertion copy()", "full_signature": "@Override public AccessAssertion copy()", "class_method_signature": "RoleAccessAssertion.copy()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/mapfish/print/config/access/RoleAccessAssertion.java"}, "focal_method": {"identifier": "validate", "parameters": "(final List<Throwable> validationErrors, final Configuration configuration)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(final List<Throwable> validationErrors, final Configuration configuration) {\n        if (this.requiredRoles == null) {\n            validationErrors.add(new ConfigurationException(\"requiredRoles must be defined\"));\n        }\n    }", "signature": "void validate(final List<Throwable> validationErrors, final Configuration configuration)", "full_signature": "@Override public void validate(final List<Throwable> validationErrors, final Configuration configuration)", "class_method_signature": "RoleAccessAssertion.validate(final List<Throwable> validationErrors, final Configuration configuration)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 2737689, "url": "https://github.com/mapfish/mapfish-print", "stars": 140, "created": "11/8/2011 10:24:04 PM +00:00", "updates": "2020-01-27T02:28:30+00:00", "fork": "False", "license": "licensed"}}