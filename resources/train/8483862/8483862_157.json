{"test_class": {"identifier": "HistogramTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RECORD_ID = \"1\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_ID = \"1\"", "var_name": "RECORD_ID"}, {"original_string": "private static final String[] ENTITIES = { \"Entity 1\", \"Entity 2\" };", "modifier": "private static final", "type": "String[]", "declarator": "ENTITIES = { \"Entity 1\", \"Entity 2\" }", "var_name": "ENTITIES"}, {"original_string": "private static final String[] LITERALS = { \"Literal 1\", \"Literal 2\" };", "modifier": "private static final", "type": "String[]", "declarator": "LITERALS = { \"Literal 1\", \"Literal 2\" }", "var_name": "LITERALS"}, {"original_string": "private static final String[] VALUES = { \"Value A\", \"Value B\" };", "modifier": "private static final", "type": "String[]", "declarator": "VALUES = { \"Value A\", \"Value B\" }", "var_name": "VALUES"}], "file": "metafacture-statistics/src/test/java/org/metafacture/statistics/HistogramTest.java"}, "test_case": {"identifier": "testResetStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResetStream() {\n        final Histogram histogram = new Histogram();\n        histogram.setCountEntities(true);\n\n        assertTrue(histogram.isCountEntities());\n        assertFalse(histogram.isCountLiterals());\n        assertNull(histogram.getCountField());\n\n        histogram.startRecord(RECORD_ID);\n        histogram.startEntity(ENTITIES[0]);\n        histogram.endEntity();\n        histogram.endRecord();\n\n        final Map<String, Integer> expected = new HashMap<String, Integer>();\n        expected.put(ENTITIES[0], Integer.valueOf(1));\n\n        assertEquals(expected, histogram.getHistogram());\n\n        histogram.resetStream();\n\n        expected.clear();\n\n        assertEquals(expected, histogram.getHistogram());\n    }", "signature": "void testResetStream()", "full_signature": "@Test public void testResetStream()", "class_method_signature": "HistogramTest.testResetStream()", "testcase": true, "constructor": false, "invocations": ["setCountEntities", "assertTrue", "isCountEntities", "assertFalse", "isCountLiterals", "assertNull", "getCountField", "startRecord", "startEntity", "endEntity", "endRecord", "put", "valueOf", "assertEquals", "getHistogram", "resetStream", "clear", "assertEquals", "getHistogram"]}, "focal_class": {"identifier": "Histogram", "superclass": "extends DefaultStreamReceiver", "interfaces": "", "fields": [{"original_string": "private final Map<String, Integer> histogram = new HashMap<String, Integer>();", "modifier": "private final", "type": "Map<String, Integer>", "declarator": "histogram = new HashMap<String, Integer>()", "var_name": "histogram"}, {"original_string": "private boolean countEntities;", "modifier": "private", "type": "boolean", "declarator": "countEntities", "var_name": "countEntities"}, {"original_string": "private boolean countLiterals;", "modifier": "private", "type": "boolean", "declarator": "countLiterals", "var_name": "countLiterals"}, {"original_string": "private String countField;", "modifier": "private", "type": "String", "declarator": "countField", "var_name": "countField"}], "methods": [{"identifier": "Histogram", "parameters": "()", "modifiers": "public", "return": "", "signature": " Histogram()", "full_signature": "public  Histogram()", "class_method_signature": "Histogram.Histogram()", "testcase": false, "constructor": true}, {"identifier": "Histogram", "parameters": "(final String countField)", "modifiers": "public", "return": "", "signature": " Histogram(final String countField)", "full_signature": "public  Histogram(final String countField)", "class_method_signature": "Histogram.Histogram(final String countField)", "testcase": false, "constructor": true}, {"identifier": "getHistogram", "parameters": "()", "modifiers": "public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getHistogram()", "full_signature": "public Map<String, Integer> getHistogram()", "class_method_signature": "Histogram.getHistogram()", "testcase": false, "constructor": false}, {"identifier": "isCountEntities", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCountEntities()", "full_signature": "public boolean isCountEntities()", "class_method_signature": "Histogram.isCountEntities()", "testcase": false, "constructor": false}, {"identifier": "setCountEntities", "parameters": "(final boolean countEntities)", "modifiers": "public", "return": "void", "signature": "void setCountEntities(final boolean countEntities)", "full_signature": "public void setCountEntities(final boolean countEntities)", "class_method_signature": "Histogram.setCountEntities(final boolean countEntities)", "testcase": false, "constructor": false}, {"identifier": "isCountLiterals", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCountLiterals()", "full_signature": "public boolean isCountLiterals()", "class_method_signature": "Histogram.isCountLiterals()", "testcase": false, "constructor": false}, {"identifier": "setCountLiterals", "parameters": "(final boolean countLiterals)", "modifiers": "public", "return": "void", "signature": "void setCountLiterals(final boolean countLiterals)", "full_signature": "public void setCountLiterals(final boolean countLiterals)", "class_method_signature": "Histogram.setCountLiterals(final boolean countLiterals)", "testcase": false, "constructor": false}, {"identifier": "getCountField", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCountField()", "full_signature": "public String getCountField()", "class_method_signature": "Histogram.getCountField()", "testcase": false, "constructor": false}, {"identifier": "setCountField", "parameters": "(final String countField)", "modifiers": "public", "return": "void", "signature": "void setCountField(final String countField)", "full_signature": "public void setCountField(final String countField)", "class_method_signature": "Histogram.setCountField(final String countField)", "testcase": false, "constructor": false}, {"identifier": "startEntity", "parameters": "(final String name)", "modifiers": "@Override public", "return": "void", "signature": "void startEntity(final String name)", "full_signature": "@Override public void startEntity(final String name)", "class_method_signature": "Histogram.startEntity(final String name)", "testcase": false, "constructor": false}, {"identifier": "literal", "parameters": "(final String name, final String value)", "modifiers": "@Override public", "return": "void", "signature": "void literal(final String name, final String value)", "full_signature": "@Override public void literal(final String name, final String value)", "class_method_signature": "Histogram.literal(final String name, final String value)", "testcase": false, "constructor": false}, {"identifier": "resetStream", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetStream()", "full_signature": "@Override public void resetStream()", "class_method_signature": "Histogram.resetStream()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(final String value)", "modifiers": "private", "return": "void", "signature": "void count(final String value)", "full_signature": "private void count(final String value)", "class_method_signature": "Histogram.count(final String value)", "testcase": false, "constructor": false}], "file": "metafacture-statistics/src/main/java/org/metafacture/statistics/Histogram.java"}, "focal_method": {"identifier": "resetStream", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void resetStream() {\n        histogram.clear();\n    }", "signature": "void resetStream()", "full_signature": "@Override public void resetStream()", "class_method_signature": "Histogram.resetStream()", "testcase": false, "constructor": false, "invocations": ["clear"]}, "repository": {"repo_id": 8483862, "url": "https://github.com/metafacture/metafacture-core", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 54, "size": 3669, "license": "licensed"}}