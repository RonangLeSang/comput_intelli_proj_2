{"test_class": {"identifier": "AseqDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LEADER_LITERAL = \"LDR\";", "modifier": "private static final", "type": "String", "declarator": "LEADER_LITERAL = \"LDR\"", "var_name": "LEADER_LITERAL"}, {"original_string": "private static final String RECORD_ID = \"001304760\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_ID = \"001304760\"", "var_name": "RECORD_ID"}, {"original_string": "private static final String FIELD_LDR = \" LDR   L 00235nM2.01000024------h\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_LDR = \" LDR   L 00235nM2.01000024------h\"", "var_name": "FIELD_LDR"}, {"original_string": "private static final String FIELD_001_a_TEST = \" 001   L $$atest\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_001_a_TEST = \" 001   L $$atest\"", "var_name": "FIELD_001_a_TEST"}, {"original_string": "private static final String FIELD_200_TEST = \"001304760 200   L $$kAckermann-Gemeinde$$9(DE-588)39042-2\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_200_TEST = \"001304760 200   L $$kAckermann-Gemeinde$$9(DE-588)39042-2\"", "var_name": "FIELD_200_TEST"}, {"original_string": "private static final String FIELD_MARKER = \"\\n\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_MARKER = \"\\n\"", "var_name": "FIELD_MARKER"}, {"original_string": "private AseqDecoder aseqDecoder;", "modifier": "private", "type": "AseqDecoder", "declarator": "aseqDecoder", "var_name": "aseqDecoder"}, {"original_string": "@Mock\n    private StreamReceiver receiver;", "modifier": "@Mock\n    private", "type": "StreamReceiver", "declarator": "receiver", "var_name": "receiver"}], "file": "metafacture-biblio/src/test/java/org/metafacture/biblio/AseqDecoderTest.java"}, "test_case": {"identifier": "testShouldParseRecordWithTwoFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldParseRecordWithTwoFields() {\n        this.aseqDecoder.process(RECORD_ID + FIELD_LDR + FIELD_MARKER\n                + RECORD_ID + FIELD_001_a_TEST + FIELD_MARKER + FIELD_200_TEST);\n        final InOrder ordered = inOrder(this.receiver);\n        ordered.verify(this.receiver).startRecord(RECORD_ID);\n        verifyLdrTest(ordered);\n        verify001_a_Test(ordered);\n        verify200(ordered);\n        ordered.verify(this.receiver).endRecord();\n    }", "signature": "void testShouldParseRecordWithTwoFields()", "full_signature": "@Test public void testShouldParseRecordWithTwoFields()", "class_method_signature": "AseqDecoderTest.testShouldParseRecordWithTwoFields()", "testcase": true, "constructor": false, "invocations": ["process", "inOrder", "startRecord", "verify", "verifyLdrTest", "verify001_a_Test", "verify200", "endRecord", "verify"]}, "focal_class": {"identifier": "AseqDecoder", "superclass": "extends DefaultObjectPipe<String, StreamReceiver>", "interfaces": "", "fields": [{"original_string": "private static final String FIELD_DELIMITER = \"\\n\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_DELIMITER = \"\\n\"", "var_name": "FIELD_DELIMITER"}], "methods": [{"identifier": "process", "parameters": "(final String record)", "modifiers": "@Override public", "return": "void", "signature": "void process(final String record)", "full_signature": "@Override public void process(final String record)", "class_method_signature": "AseqDecoder.process(final String record)", "testcase": false, "constructor": false}], "file": "metafacture-biblio/src/main/java/org/metafacture/biblio/AseqDecoder.java"}, "focal_method": {"identifier": "process", "parameters": "(final String record)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process(final String record) {\n        assert !isClosed();\n        final String trimedRecord = record.trim();\n        if (trimedRecord.isEmpty()) {\n            return;\n        }\n        final String[] lines = trimedRecord.split(FIELD_DELIMITER);\n        for (int i = 0; i < lines.length; i++) {\n            final String field = lines[i];\n            if (i == 0) {\n                getReceiver().startRecord(field.substring(0, 9));\n            }\n            final String category = field.substring(10, 15).trim();\n            final String fieldContent = field.substring(18).trim();\n            if (!fieldContent.startsWith(\"$$\")) {\n                getReceiver().literal(category, fieldContent);\n            } else {\n                getReceiver().startEntity(category);\n                final String[] subfields = fieldContent.split(\"\\\\$\\\\$\");\n                for (final String subfield : subfields) {\n                    if (!subfield.isEmpty()) {\n                        getReceiver().literal(subfield.substring(0, 1), subfield.substring(1));\n                    }\n                }\n                getReceiver().endEntity();\n            }\n        }\n        getReceiver().endRecord();\n    }", "signature": "void process(final String record)", "full_signature": "@Override public void process(final String record)", "class_method_signature": "AseqDecoder.process(final String record)", "testcase": false, "constructor": false, "invocations": ["isClosed", "trim", "isEmpty", "split", "startRecord", "getReceiver", "substring", "trim", "substring", "trim", "substring", "startsWith", "literal", "getReceiver", "startEntity", "getReceiver", "split", "isEmpty", "literal", "getReceiver", "substring", "substring", "endEntity", "getReceiver", "endRecord", "getReceiver"]}, "repository": {"repo_id": 8483862, "url": "https://github.com/metafacture/metafacture-core", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 54, "size": 3669, "license": "licensed"}}