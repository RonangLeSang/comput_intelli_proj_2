{"test_class": {"identifier": "NonBreakPointsLoaderImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "flying-saucer-fop/src/test/java/org/xhtmlrenderer/fop/nbsp/NonBreakPointsLoaderImplTest.java"}, "test_case": {"identifier": "loadExactMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void loadExactMatch() throws Exception {\n\t\tList<String> lines = new NonBreakPointsLoaderImpl().loadNBSP(\"de\");\n\t\tassertEquals(1, lines.size());\n\t\tassertEquals(\"deRule\u0161\u010d\u0159\u017e\u00fd\u00e1\", lines.get(0)); // tests also UTF-8 chars\n\t}", "signature": "void loadExactMatch()", "full_signature": "@Test public void loadExactMatch()", "class_method_signature": "NonBreakPointsLoaderImplTest.loadExactMatch()", "testcase": true, "constructor": false, "invocations": ["loadNBSP", "assertEquals", "size", "assertEquals", "); "]}, "focal_class": {"identifier": "NonBreakPointsLoaderImpl", "superclass": "", "interfaces": "implements NonBreakPointsLoader", "fields": [], "methods": [{"identifier": "loadNBSP", "parameters": "(String lang)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> loadNBSP(String lang)", "full_signature": "@Override public List<String> loadNBSP(String lang)", "class_method_signature": "NonBreakPointsLoaderImpl.loadNBSP(String lang)", "testcase": false, "constructor": false}, {"identifier": "loadForKey", "parameters": "(String lang)", "modifiers": "private", "return": "List<String>", "signature": "List<String> loadForKey(String lang)", "full_signature": "private List<String> loadForKey(String lang)", "class_method_signature": "NonBreakPointsLoaderImpl.loadForKey(String lang)", "testcase": false, "constructor": false}], "file": "flying-saucer-fop/src/main/java/org/xhtmlrenderer/fop/nbsp/NonBreakPointsLoaderImpl.java"}, "focal_method": {"identifier": "loadNBSP", "parameters": "(String lang)", "modifiers": "@Override public", "return": "List<String>", "body": "@Override\n\tpublic List<String> loadNBSP(String lang) {\n\t\tif (lang == null || lang.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"Lang must be filled to search for file!\");\n\t\t}\n\t\tList<String> result = loadForKey(lang);\n\t\tif (result == null) {\n\t\t\tint index = lang.indexOf('_');\n\t\t\tif (index < 0) return null; // cannot split key\n\t\t\tresult = loadForKey(lang.substring(0, index));\n\t\t}\n\t\treturn result;\n\t}", "signature": "List<String> loadNBSP(String lang)", "full_signature": "@Override public List<String> loadNBSP(String lang)", "class_method_signature": "NonBreakPointsLoaderImpl.loadNBSP(String lang)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "loadForKey", "indexOf", "loadForKey", "substring"]}, "repository": {"repo_id": 618681, "url": "https://github.com/flyingsaucerproject/flyingsaucer", "language": "Java", "is_fork": false, "fork_count": 481, "stargazer_count": 1495, "size": 61642, "license": "licensed"}}