{"test_class": {"identifier": "ParameterStringMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "mockserver-core/src/test/java/org/mockserver/matchers/ParameterStringMatcherTest.java"}, "test_case": {"identifier": "shouldNotMatchEmptyTestWhenNotApplied", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotMatchEmptyTestWhenNotApplied() {\n        assertFalse(NotMatcher.notMatcher(new ParameterStringMatcher(new MockServerLogger(), new Parameters(), true)).matches(null, \"\"));\n    }", "signature": "void shouldNotMatchEmptyTestWhenNotApplied()", "full_signature": "@Test public void shouldNotMatchEmptyTestWhenNotApplied()", "class_method_signature": "ParameterStringMatcherTest.shouldNotMatchEmptyTestWhenNotApplied()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "matches", "notMatcher"]}, "focal_class": {"identifier": "ParameterStringMatcher", "superclass": "extends BodyMatcher<String>", "interfaces": "", "fields": [{"original_string": "private static final String[] EXCLUDED_FIELDS = {\"mockServerLogger\"};", "modifier": "private static final", "type": "String[]", "declarator": "EXCLUDED_FIELDS = {\"mockServerLogger\"}", "var_name": "EXCLUDED_FIELDS"}, {"original_string": "private final MultiValueMapMatcher matcher;", "modifier": "private final", "type": "MultiValueMapMatcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "private final ExpandedParameterDecoder formParameterParser;", "modifier": "private final", "type": "ExpandedParameterDecoder", "declarator": "formParameterParser", "var_name": "formParameterParser"}, {"original_string": "private final Parameters matcherParameters;", "modifier": "private final", "type": "Parameters", "declarator": "matcherParameters", "var_name": "matcherParameters"}, {"original_string": "private final ExpandedParameterDecoder expandedParameterDecoder;", "modifier": "private final", "type": "ExpandedParameterDecoder", "declarator": "expandedParameterDecoder", "var_name": "expandedParameterDecoder"}], "methods": [{"identifier": "ParameterStringMatcher", "parameters": "(MockServerLogger mockServerLogger, Parameters matcherParameters, boolean controlPlaneMatcher)", "modifiers": "", "return": "", "signature": " ParameterStringMatcher(MockServerLogger mockServerLogger, Parameters matcherParameters, boolean controlPlaneMatcher)", "full_signature": "  ParameterStringMatcher(MockServerLogger mockServerLogger, Parameters matcherParameters, boolean controlPlaneMatcher)", "class_method_signature": "ParameterStringMatcher.ParameterStringMatcher(MockServerLogger mockServerLogger, Parameters matcherParameters, boolean controlPlaneMatcher)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final MatchDifference context, String matched)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final MatchDifference context, String matched)", "full_signature": "public boolean matches(final MatchDifference context, String matched)", "class_method_signature": "ParameterStringMatcher.matches(final MatchDifference context, String matched)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlank()", "full_signature": "public boolean isBlank()", "class_method_signature": "ParameterStringMatcher.isBlank()", "testcase": false, "constructor": false}, {"identifier": "fieldsExcludedFromEqualsAndHashCode", "parameters": "()", "modifiers": "@Override @JsonIgnore protected", "return": "String[]", "signature": "String[] fieldsExcludedFromEqualsAndHashCode()", "full_signature": "@Override @JsonIgnore protected String[] fieldsExcludedFromEqualsAndHashCode()", "class_method_signature": "ParameterStringMatcher.fieldsExcludedFromEqualsAndHashCode()", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/matchers/ParameterStringMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(final MatchDifference context, String matched)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(final MatchDifference context, String matched) {\n        boolean result = false;\n\n        Parameters matchedParameters = formParameterParser.retrieveFormParameters(matched, matched != null && matched.contains(\"?\"));\n        expandedParameterDecoder.splitParameters(matcherParameters, matchedParameters);\n        if (matcher.matches(context, matchedParameters)) {\n            result = true;\n        }\n\n        return not != result;\n    }", "signature": "boolean matches(final MatchDifference context, String matched)", "full_signature": "public boolean matches(final MatchDifference context, String matched)", "class_method_signature": "ParameterStringMatcher.matches(final MatchDifference context, String matched)", "testcase": false, "constructor": false, "invocations": ["retrieveFormParameters", "contains", "splitParameters", "matches"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}