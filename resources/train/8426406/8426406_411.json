{"test_class": {"identifier": "HttpResponseSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpResponse fullHttpResponse =\n        new HttpResponse()\n            .withStatusCode(123)\n            .withReasonPhrase(\"randomPhrase\")\n            .withBody(exact(\"somebody\"))\n            .withHeaders(header(\"headerName\", \"headerValue\"))\n            .withCookies(cookie(\"cookieName\", \"cookieValue\"))\n            .withDelay(new Delay(TimeUnit.MICROSECONDS, 3));", "modifier": "private final", "type": "HttpResponse", "declarator": "fullHttpResponse =\n        new HttpResponse()\n            .withStatusCode(123)\n            .withReasonPhrase(\"randomPhrase\")\n            .withBody(exact(\"somebody\"))\n            .withHeaders(header(\"headerName\", \"headerValue\"))\n            .withCookies(cookie(\"cookieName\", \"cookieValue\"))\n            .withDelay(new Delay(TimeUnit.MICROSECONDS, 3))", "var_name": "fullHttpResponse"}, {"original_string": "private final HttpResponseDTO fullHttpResponseDTO =\n        new HttpResponseDTO()\n            .setStatusCode(123)\n            .setReasonPhrase(\"randomPhrase\")\n            .setBody(BodyWithContentTypeDTO.createWithContentTypeDTO(exact(\"somebody\")))\n            .setHeaders(new Headers().withEntries(\n                header(\"headerName\", \"headerValue\")\n            ))\n            .setCookies(new Cookies().withEntries(\n                cookie(\"cookieName\", \"cookieValue\")\n            ))\n            .setDelay(new DelayDTO(new Delay(TimeUnit.MICROSECONDS, 3)));", "modifier": "private final", "type": "HttpResponseDTO", "declarator": "fullHttpResponseDTO =\n        new HttpResponseDTO()\n            .setStatusCode(123)\n            .setReasonPhrase(\"randomPhrase\")\n            .setBody(BodyWithContentTypeDTO.createWithContentTypeDTO(exact(\"somebody\")))\n            .setHeaders(new Headers().withEntries(\n                header(\"headerName\", \"headerValue\")\n            ))\n            .setCookies(new Cookies().withEntries(\n                cookie(\"cookieName\", \"cookieValue\")\n            ))\n            .setDelay(new DelayDTO(new Delay(TimeUnit.MICROSECONDS, 3)))", "var_name": "fullHttpResponseDTO"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Mock\n    private ObjectMapper objectMapper;", "modifier": "@Mock\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Mock\n    private ObjectWriter objectWriter;", "modifier": "@Mock\n    private", "type": "ObjectWriter", "declarator": "objectWriter", "var_name": "objectWriter"}, {"original_string": "@Mock\n    private JsonSchemaHttpResponseValidator httpResponseValidator;", "modifier": "@Mock\n    private", "type": "JsonSchemaHttpResponseValidator", "declarator": "httpResponseValidator", "var_name": "httpResponseValidator"}, {"original_string": "@InjectMocks\n    private HttpResponseSerializer httpResponseSerializer;", "modifier": "@InjectMocks\n    private", "type": "HttpResponseSerializer", "declarator": "httpResponseSerializer", "var_name": "httpResponseSerializer"}], "file": "mockserver-core/src/test/java/org/mockserver/serialization/HttpResponseSerializerTest.java"}, "test_case": {"identifier": "serialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void serialize() throws IOException {\n        // when\n        httpResponseSerializer.serialize(fullHttpResponse);\n\n        // then\n        verify(objectWriter).writeValueAsString(fullHttpResponseDTO);\n    }", "signature": "void serialize()", "full_signature": "@Test public void serialize()", "class_method_signature": "HttpResponseSerializerTest.serialize()", "testcase": true, "constructor": false, "invocations": ["serialize", "writeValueAsString", "verify"]}, "focal_class": {"identifier": "HttpResponseSerializer", "superclass": "", "interfaces": "implements Serializer<HttpResponse>", "fields": [{"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);", "modifier": "private", "type": "ObjectWriter", "declarator": "objectWriter = ObjectMapperFactory.createObjectMapper(true)", "var_name": "objectWriter"}, {"original_string": "private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper = ObjectMapperFactory.createObjectMapper()", "var_name": "objectMapper"}, {"original_string": "private JsonArraySerializer jsonArraySerializer = new JsonArraySerializer();", "modifier": "private", "type": "JsonArraySerializer", "declarator": "jsonArraySerializer = new JsonArraySerializer()", "var_name": "jsonArraySerializer"}, {"original_string": "private JsonSchemaHttpResponseValidator httpResponseValidator;", "modifier": "private", "type": "JsonSchemaHttpResponseValidator", "declarator": "httpResponseValidator", "var_name": "httpResponseValidator"}], "methods": [{"identifier": "HttpResponseSerializer", "parameters": "(MockServerLogger mockServerLogger)", "modifiers": "public", "return": "", "signature": " HttpResponseSerializer(MockServerLogger mockServerLogger)", "full_signature": "public  HttpResponseSerializer(MockServerLogger mockServerLogger)", "class_method_signature": "HttpResponseSerializer.HttpResponseSerializer(MockServerLogger mockServerLogger)", "testcase": false, "constructor": true}, {"identifier": "getValidator", "parameters": "()", "modifiers": "private", "return": "JsonSchemaHttpResponseValidator", "signature": "JsonSchemaHttpResponseValidator getValidator()", "full_signature": "private JsonSchemaHttpResponseValidator getValidator()", "class_method_signature": "HttpResponseSerializer.getValidator()", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(HttpResponse httpResponse)", "modifiers": "public", "return": "String", "signature": "String serialize(HttpResponse httpResponse)", "full_signature": "public String serialize(HttpResponse httpResponse)", "class_method_signature": "HttpResponseSerializer.serialize(HttpResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(List<HttpResponse> httpResponses)", "modifiers": "public", "return": "String", "signature": "String serialize(List<HttpResponse> httpResponses)", "full_signature": "public String serialize(List<HttpResponse> httpResponses)", "class_method_signature": "HttpResponseSerializer.serialize(List<HttpResponse> httpResponses)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(HttpResponse... httpResponses)", "modifiers": "public", "return": "String", "signature": "String serialize(HttpResponse... httpResponses)", "full_signature": "public String serialize(HttpResponse... httpResponses)", "class_method_signature": "HttpResponseSerializer.serialize(HttpResponse... httpResponses)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String jsonHttpResponse)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse deserialize(String jsonHttpResponse)", "full_signature": "public HttpResponse deserialize(String jsonHttpResponse)", "class_method_signature": "HttpResponseSerializer.deserialize(String jsonHttpResponse)", "testcase": false, "constructor": false}, {"identifier": "supportsType", "parameters": "()", "modifiers": "@Override public", "return": "Class<HttpResponse>", "signature": "Class<HttpResponse> supportsType()", "full_signature": "@Override public Class<HttpResponse> supportsType()", "class_method_signature": "HttpResponseSerializer.supportsType()", "testcase": false, "constructor": false}, {"identifier": "deserializeArray", "parameters": "(String jsonHttpResponses)", "modifiers": "public", "return": "HttpResponse[]", "signature": "HttpResponse[] deserializeArray(String jsonHttpResponses)", "full_signature": "public HttpResponse[] deserializeArray(String jsonHttpResponses)", "class_method_signature": "HttpResponseSerializer.deserializeArray(String jsonHttpResponses)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/serialization/HttpResponseSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(HttpResponse httpResponse)", "modifiers": "public", "return": "String", "body": "public String serialize(HttpResponse httpResponse) {\n        try {\n            return objectWriter.writeValueAsString(new HttpResponseDTO(httpResponse));\n        } catch (Exception e) {\n            mockServerLogger.logEvent(\n                new LogEntry()\n                    .setLogLevel(Level.ERROR)\n                    .setMessageFormat(\"exception while serializing httpResponse to JSON with value \" + httpResponse)\n                    .setThrowable(e)\n            );\n            throw new RuntimeException(\"Exception while serializing httpResponse to JSON with value \" + httpResponse, e);\n        }\n    }", "signature": "String serialize(HttpResponse httpResponse)", "full_signature": "public String serialize(HttpResponse httpResponse)", "class_method_signature": "HttpResponseSerializer.serialize(HttpResponse httpResponse)", "testcase": false, "constructor": false, "invocations": ["writeValueAsString", "logEvent", "setThrowable", "setMessageFormat", "setLogLevel"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}