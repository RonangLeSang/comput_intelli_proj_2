{"test_class": {"identifier": "HttpRequestsPropertiesMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockServerLogger mockServerLogger = new MockServerLogger(HttpRequestsPropertiesMatcherTest.class);", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger = new MockServerLogger(HttpRequestsPropertiesMatcherTest.class)", "var_name": "mockServerLogger"}], "file": "mockserver-core/src/test/java/org/mockserver/matchers/HttpRequestsPropertiesMatcherTest.java"}, "test_case": {"identifier": "shouldMatchByCookieCommonForPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMatchByCookieCommonForPath() {\n        // given\n        HttpRequestsPropertiesMatcher httpRequestsPropertiesMatcher = new HttpRequestsPropertiesMatcher(mockServerLogger);\n\n        // when\n        httpRequestsPropertiesMatcher.update(new Expectation(\n            new OpenAPIDefinition()\n                .withSpecUrlOrPayload(\"---\" + NEW_LINE +\n                    \"openapi: 3.0.0\" + NEW_LINE +\n                    \"paths:\" + NEW_LINE +\n                    \"  \\\"/somePath\\\":\" + NEW_LINE +\n                    \"    parameters:\" + NEW_LINE +\n                    \"      - in: cookie\" + NEW_LINE +\n                    \"        name: someParam\" + NEW_LINE +\n                    \"        required: true\" + NEW_LINE +\n                    \"        schema:\" + NEW_LINE +\n                    \"          type: integer\" + NEW_LINE +\n                    \"          minimum: 1\" + NEW_LINE +\n                    \"    get:\" + NEW_LINE +\n                    \"      operationId: someOperation\" + NEW_LINE)\n        ));\n\n        // then\n        assertTrue(httpRequestsPropertiesMatcher.matches(\n            request()\n                .withCookie(\"someParam\", \"1\")\n        ));\n        assertFalse(httpRequestsPropertiesMatcher.matches(\n            request()\n                .withCookie(\"someParam\", \"0\")\n        ));\n        assertFalse(httpRequestsPropertiesMatcher.matches(\n            request()\n                .withCookie(\"someOtherParam\", \"1\")\n        ));\n    }", "signature": "void shouldMatchByCookieCommonForPath()", "full_signature": "@Test public void shouldMatchByCookieCommonForPath()", "class_method_signature": "HttpRequestsPropertiesMatcherTest.shouldMatchByCookieCommonForPath()", "testcase": true, "constructor": false, "invocations": ["update", "withSpecUrlOrPayload", "assertTrue", "matches", "withCookie", "request", "assertFalse", "matches", "withCookie", "request", "assertFalse", "matches", "withCookie", "request"]}, "focal_class": {"identifier": "HttpRequestsPropertiesMatcher", "superclass": "extends AbstractHttpRequestMatcher", "interfaces": "", "fields": [{"original_string": "private static final ObjectWriter TO_STRING_OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(true);", "modifier": "private static final", "type": "ObjectWriter", "declarator": "TO_STRING_OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(true)", "var_name": "TO_STRING_OBJECT_WRITER"}, {"original_string": "private int hashCode;", "modifier": "private", "type": "int", "declarator": "hashCode", "var_name": "hashCode"}, {"original_string": "private OpenAPIDefinition openAPIDefinition;", "modifier": "private", "type": "OpenAPIDefinition", "declarator": "openAPIDefinition", "var_name": "openAPIDefinition"}, {"original_string": "private List<HttpRequestPropertiesMatcher> httpRequestPropertiesMatchers;", "modifier": "private", "type": "List<HttpRequestPropertiesMatcher>", "declarator": "httpRequestPropertiesMatchers", "var_name": "httpRequestPropertiesMatchers"}, {"original_string": "private List<HttpRequest> httpRequests;", "modifier": "private", "type": "List<HttpRequest>", "declarator": "httpRequests", "var_name": "httpRequests"}, {"original_string": "private static final ObjectWriter OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(new JsonNodeExampleSerializer()).writerWithDefaultPrettyPrinter();", "modifier": "private static final", "type": "ObjectWriter", "declarator": "OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(new JsonNodeExampleSerializer()).writerWithDefaultPrettyPrinter()", "var_name": "OBJECT_WRITER"}], "methods": [{"identifier": "HttpRequestsPropertiesMatcher", "parameters": "(MockServerLogger mockServerLogger)", "modifiers": "protected", "return": "", "signature": " HttpRequestsPropertiesMatcher(MockServerLogger mockServerLogger)", "full_signature": "protected  HttpRequestsPropertiesMatcher(MockServerLogger mockServerLogger)", "class_method_signature": "HttpRequestsPropertiesMatcher.HttpRequestsPropertiesMatcher(MockServerLogger mockServerLogger)", "testcase": false, "constructor": true}, {"identifier": "getHttpRequestPropertiesMatchers", "parameters": "()", "modifiers": "public", "return": "List<HttpRequestPropertiesMatcher>", "signature": "List<HttpRequestPropertiesMatcher> getHttpRequestPropertiesMatchers()", "full_signature": "public List<HttpRequestPropertiesMatcher> getHttpRequestPropertiesMatchers()", "class_method_signature": "HttpRequestsPropertiesMatcher.getHttpRequestPropertiesMatchers()", "testcase": false, "constructor": false}, {"identifier": "getHttpRequests", "parameters": "()", "modifiers": "@Override public", "return": "List<HttpRequest>", "signature": "List<HttpRequest> getHttpRequests()", "full_signature": "@Override public List<HttpRequest> getHttpRequests()", "class_method_signature": "HttpRequestsPropertiesMatcher.getHttpRequests()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(RequestDefinition requestDefinition)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(RequestDefinition requestDefinition)", "full_signature": "@Override public boolean apply(RequestDefinition requestDefinition)", "class_method_signature": "HttpRequestsPropertiesMatcher.apply(RequestDefinition requestDefinition)", "testcase": false, "constructor": false}, {"identifier": "createHttpRequest", "parameters": "(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair)", "modifiers": "private", "return": "HttpRequest", "signature": "HttpRequest createHttpRequest(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair)", "full_signature": "private HttpRequest createHttpRequest(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair)", "class_method_signature": "HttpRequestsPropertiesMatcher.createHttpRequest(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair)", "testcase": false, "constructor": false}, {"identifier": "parameterStyle", "parameters": "(Boolean explode, Parameter.StyleEnum style)", "modifiers": "private", "return": "ParameterStyle", "signature": "ParameterStyle parameterStyle(Boolean explode, Parameter.StyleEnum style)", "full_signature": "private ParameterStyle parameterStyle(Boolean explode, Parameter.StyleEnum style)", "class_method_signature": "HttpRequestsPropertiesMatcher.parameterStyle(Boolean explode, Parameter.StyleEnum style)", "testcase": false, "constructor": false}, {"identifier": "parameterStyle", "parameters": "(Boolean explode, Encoding.StyleEnum style)", "modifiers": "private", "return": "ParameterStyle", "signature": "ParameterStyle parameterStyle(Boolean explode, Encoding.StyleEnum style)", "full_signature": "private ParameterStyle parameterStyle(Boolean explode, Encoding.StyleEnum style)", "class_method_signature": "HttpRequestsPropertiesMatcher.parameterStyle(Boolean explode, Encoding.StyleEnum style)", "testcase": false, "constructor": false}, {"identifier": "buildSecurityValues", "parameters": "(OpenAPI openAPI, Map<String, Set<String>> headerRequirements, Map<String, Set<String>> queryStringParameterRequirements, Map<String, Set<String>> cookieRequirements, List<SecurityRequirement> security)", "modifiers": "private", "return": "void", "signature": "void buildSecurityValues(OpenAPI openAPI, Map<String, Set<String>> headerRequirements, Map<String, Set<String>> queryStringParameterRequirements, Map<String, Set<String>> cookieRequirements, List<SecurityRequirement> security)", "full_signature": "private void buildSecurityValues(OpenAPI openAPI, Map<String, Set<String>> headerRequirements, Map<String, Set<String>> queryStringParameterRequirements, Map<String, Set<String>> cookieRequirements, List<SecurityRequirement> security)", "class_method_signature": "HttpRequestsPropertiesMatcher.buildSecurityValues(OpenAPI openAPI, Map<String, Set<String>> headerRequirements, Map<String, Set<String>> queryStringParameterRequirements, Map<String, Set<String>> cookieRequirements, List<SecurityRequirement> security)", "testcase": false, "constructor": false}, {"identifier": "handleRequestBody", "parameters": "(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair, Boolean required)", "modifiers": "private", "return": "BiConsumer<String, MediaType>", "signature": "BiConsumer<String, MediaType> handleRequestBody(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair, Boolean required)", "full_signature": "private BiConsumer<String, MediaType> handleRequestBody(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair, Boolean required)", "class_method_signature": "HttpRequestsPropertiesMatcher.handleRequestBody(OpenAPIDefinition openAPIDefinition, OpenAPI openAPI, String path, Pair<String, Operation> methodOperationPair, Boolean required)", "testcase": false, "constructor": false}, {"identifier": "addRequestMatcher", "parameters": "(OpenAPIDefinition openAPIDefinition, Pair<String, Operation> methodOperationPair, HttpRequest httpRequest, String contentType)", "modifiers": "private", "return": "void", "signature": "void addRequestMatcher(OpenAPIDefinition openAPIDefinition, Pair<String, Operation> methodOperationPair, HttpRequest httpRequest, String contentType)", "full_signature": "private void addRequestMatcher(OpenAPIDefinition openAPIDefinition, Pair<String, Operation> methodOperationPair, HttpRequest httpRequest, String contentType)", "class_method_signature": "HttpRequestsPropertiesMatcher.addRequestMatcher(OpenAPIDefinition openAPIDefinition, Pair<String, Operation> methodOperationPair, HttpRequest httpRequest, String contentType)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(MatchDifference matchDifference, RequestDefinition requestDefinition)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(MatchDifference matchDifference, RequestDefinition requestDefinition)", "full_signature": "@Override public boolean matches(MatchDifference matchDifference, RequestDefinition requestDefinition)", "class_method_signature": "HttpRequestsPropertiesMatcher.matches(MatchDifference matchDifference, RequestDefinition requestDefinition)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpRequestsPropertiesMatcher.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HttpRequestsPropertiesMatcher.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HttpRequestsPropertiesMatcher.hashCode()", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestsPropertiesMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(MatchDifference matchDifference, RequestDefinition requestDefinition)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean matches(MatchDifference matchDifference, RequestDefinition requestDefinition) {\n        boolean result = false;\n        if (httpRequestPropertiesMatchers != null && !httpRequestPropertiesMatchers.isEmpty()) {\n            for (HttpRequestPropertiesMatcher httpRequestPropertiesMatcher : httpRequestPropertiesMatchers) {\n                if (matchDifference == null) {\n                    if (MockServerLogger.isEnabled(Level.TRACE) && requestDefinition instanceof HttpRequest) {\n                        matchDifference = new MatchDifference(requestDefinition);\n                    }\n                    result = httpRequestPropertiesMatcher.matches(matchDifference, requestDefinition);\n                } else {\n                    MatchDifference singleMatchDifference = new MatchDifference(matchDifference.getHttpRequest());\n                    result = httpRequestPropertiesMatcher.matches(singleMatchDifference, requestDefinition);\n                    matchDifference.addDifferences(singleMatchDifference.getAllDifferences());\n                }\n                if (result) {\n                    break;\n                }\n            }\n        } else {\n            result = true;\n        }\n        return result;\n    }", "signature": "boolean matches(MatchDifference matchDifference, RequestDefinition requestDefinition)", "full_signature": "@Override public boolean matches(MatchDifference matchDifference, RequestDefinition requestDefinition)", "class_method_signature": "HttpRequestsPropertiesMatcher.matches(MatchDifference matchDifference, RequestDefinition requestDefinition)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEnabled", "matches", "getHttpRequest", "matches", "addDifferences", "getAllDifferences"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}