{"test_class": {"identifier": "SubSetMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static RegexStringMatcher regexStringMatcher = new RegexStringMatcher(new MockServerLogger(), false);", "modifier": "static", "type": "RegexStringMatcher", "declarator": "regexStringMatcher = new RegexStringMatcher(new MockServerLogger(), false)", "var_name": "regexStringMatcher"}], "file": "mockserver-core/src/test/java/org/mockserver/collections/SubSetMatcherTest.java"}, "test_case": {"identifier": "shouldContainSubsetForSubsetWithPresentOptional", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldContainSubsetForSubsetWithPresentOptional() {\n        assertTrue(containsSubset(regexStringMatcher,\n            Arrays.asList(\n                new ImmutableEntry(regexStringMatcher, \"one\", \"one\"),\n                new ImmutableEntry(regexStringMatcher, \"two\", \"two\"),\n                new ImmutableEntry(regexStringMatcher, \"?four\", \"four\")\n            ),\n            new ArrayList<>(Arrays.asList(\n                new ImmutableEntry(regexStringMatcher, \"one\", \"one\"),\n                new ImmutableEntry(regexStringMatcher, \"two\", \"two\"),\n                new ImmutableEntry(regexStringMatcher, \"three\", \"three\"),\n                new ImmutableEntry(regexStringMatcher, \"four\", \"four\")\n            )))\n        );\n    }", "signature": "void shouldContainSubsetForSubsetWithPresentOptional()", "full_signature": "@Test public void shouldContainSubsetForSubsetWithPresentOptional()", "class_method_signature": "SubSetMatcherTest.shouldContainSubsetForSubsetWithPresentOptional()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "containsSubset", "asList", "asList"]}, "focal_class": {"identifier": "SubSetMatcher", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "containsSubset", "parameters": "(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "modifiers": "static", "return": "boolean", "signature": "boolean containsSubset(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "full_signature": "static boolean containsSubset(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "class_method_signature": "SubSetMatcher.containsSubset(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "testcase": false, "constructor": false}, {"identifier": "matchesIndexes", "parameters": "(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "modifiers": "private static", "return": "Set<Integer>", "signature": "Set<Integer> matchesIndexes(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "full_signature": "private static Set<Integer> matchesIndexes(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "class_method_signature": "SubSetMatcher.matchesIndexes(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsKey(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "full_signature": "private static boolean containsKey(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "class_method_signature": "SubSetMatcher.containsKey(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "testcase": false, "constructor": false}, {"identifier": "nottedAndPresent", "parameters": "(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "modifiers": "private static", "return": "boolean", "signature": "boolean nottedAndPresent(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "full_signature": "private static boolean nottedAndPresent(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "class_method_signature": "SubSetMatcher.nottedAndPresent(RegexStringMatcher regexStringMatcher, ImmutableEntry matcherItem, List<ImmutableEntry> matchedList)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/collections/SubSetMatcher.java"}, "focal_method": {"identifier": "containsSubset", "parameters": "(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "modifiers": "static", "return": "boolean", "body": "static boolean containsSubset(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset) {\n        boolean result = true;\n        Set<Integer> matchingIndexes = new HashSet<>();\n        for (ImmutableEntry subsetItem : subset) {\n            Set<Integer> subsetItemMatchingIndexes = matchesIndexes(regexStringMatcher, subsetItem, superset);\n            boolean optionalAndNotPresent = subsetItem.isOptional() && !containsKey(regexStringMatcher, subsetItem, superset);\n            boolean nottedAndPresent = nottedAndPresent(regexStringMatcher, subsetItem, superset);\n            if ((!optionalAndNotPresent && subsetItemMatchingIndexes.isEmpty()) || nottedAndPresent) {\n                result = false;\n                break;\n            }\n            matchingIndexes.addAll(subsetItemMatchingIndexes);\n        }\n\n        if (result) {\n            long subsetNonOptionalSize = subset.stream().filter(ImmutableEntry::isNotOptional).count();\n            // this prevents multiple items in the subset from being matched by a single item in the superset\n            result = matchingIndexes.size() >= subsetNonOptionalSize;\n        }\n        return result;\n    }", "signature": "boolean containsSubset(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "full_signature": "static boolean containsSubset(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "class_method_signature": "SubSetMatcher.containsSubset(RegexStringMatcher regexStringMatcher, List<ImmutableEntry> subset, List<ImmutableEntry> superset)", "testcase": false, "constructor": false, "invocations": ["matchesIndexes", "isOptional", "containsKey", "nottedAndPresent", "isEmpty", "addAll", "count", "filter", "stream", "size"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}