{"test_class": {"identifier": "ExactStringMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "mockserver-core/src/test/java/org/mockserver/matchers/ExactStringMatcherTest.java"}, "test_case": {"identifier": "shouldMatchNullMatcher", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMatchNullMatcher() {\n        assertTrue(new ExactStringMatcher(new MockServerLogger(), string(null)).matches(null, \"some_value\"));\n        assertTrue(new ExactStringMatcher(new MockServerLogger(), string(null)).matches(null, \"some_value\"));\n        assertTrue(new ExactStringMatcher(new MockServerLogger(), NottableString.not(null)).matches(null, NottableString.not(\"some_value\")));\n        assertTrue(notMatcher(new ExactStringMatcher(new MockServerLogger(), string(null))).matches(null, NottableString.not(\"some_value\")));\n        assertTrue(notMatcher(new ExactStringMatcher(new MockServerLogger(), string(null))).matches(null, NottableString.not(\"some_value\")));\n        assertTrue(notMatcher(new ExactStringMatcher(new MockServerLogger(), NottableString.not(null))).matches(null, \"some_value\"));\n\n        assertFalse(new ExactStringMatcher(new MockServerLogger(), string(null)).matches(null, NottableString.not(\"some_value\")));\n        assertFalse(new ExactStringMatcher(new MockServerLogger(), string(null)).matches(null, NottableString.not(\"some_value\")));\n        assertFalse(notMatcher(new ExactStringMatcher(new MockServerLogger(), string(null))).matches(null, \"some_value\"));\n        assertFalse(notMatcher(new ExactStringMatcher(new MockServerLogger(), string(null))).matches(null, \"some_value\"));\n        assertFalse(new ExactStringMatcher(new MockServerLogger(), NottableString.not(null)).matches(null, \"some_value\"));\n        assertFalse(notMatcher(new ExactStringMatcher(new MockServerLogger(), NottableString.not(null))).matches(null, NottableString.not(\"some_value\")));\n    }", "signature": "void shouldMatchNullMatcher()", "full_signature": "@Test public void shouldMatchNullMatcher()", "class_method_signature": "ExactStringMatcherTest.shouldMatchNullMatcher()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matches", "string", "assertTrue", "matches", "string", "assertTrue", "matches", "not", "not", "assertTrue", "matches", "notMatcher", "string", "not", "assertTrue", "matches", "notMatcher", "string", "not", "assertTrue", "matches", "notMatcher", "not", "assertFalse", "matches", "string", "not", "assertFalse", "matches", "string", "not", "assertFalse", "matches", "notMatcher", "string", "assertFalse", "matches", "notMatcher", "string", "assertFalse", "matches", "not", "assertFalse", "matches", "notMatcher", "not", "not"]}, "focal_class": {"identifier": "ExactStringMatcher", "superclass": "extends BodyMatcher<NottableString>", "interfaces": "", "fields": [{"original_string": "private static final String[] excludedFields = {\"mockServerLogger\"};", "modifier": "private static final", "type": "String[]", "declarator": "excludedFields = {\"mockServerLogger\"}", "var_name": "excludedFields"}, {"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private final NottableString matcher;", "modifier": "private final", "type": "NottableString", "declarator": "matcher", "var_name": "matcher"}], "methods": [{"identifier": "ExactStringMatcher", "parameters": "(MockServerLogger mockServerLogger, NottableString matcher)", "modifiers": "", "return": "", "signature": " ExactStringMatcher(MockServerLogger mockServerLogger, NottableString matcher)", "full_signature": "  ExactStringMatcher(MockServerLogger mockServerLogger, NottableString matcher)", "class_method_signature": "ExactStringMatcher.ExactStringMatcher(MockServerLogger mockServerLogger, NottableString matcher)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(String matcher, String matched, boolean ignoreCase)", "modifiers": "public static", "return": "boolean", "signature": "boolean matches(String matcher, String matched, boolean ignoreCase)", "full_signature": "public static boolean matches(String matcher, String matched, boolean ignoreCase)", "class_method_signature": "ExactStringMatcher.matches(String matcher, String matched, boolean ignoreCase)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final MatchDifference context, String matched)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final MatchDifference context, String matched)", "full_signature": "public boolean matches(final MatchDifference context, String matched)", "class_method_signature": "ExactStringMatcher.matches(final MatchDifference context, String matched)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final MatchDifference context, NottableString matched)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final MatchDifference context, NottableString matched)", "full_signature": "public boolean matches(final MatchDifference context, NottableString matched)", "class_method_signature": "ExactStringMatcher.matches(final MatchDifference context, NottableString matched)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlank()", "full_signature": "public boolean isBlank()", "class_method_signature": "ExactStringMatcher.isBlank()", "testcase": false, "constructor": false}, {"identifier": "fieldsExcludedFromEqualsAndHashCode", "parameters": "()", "modifiers": "@Override @JsonIgnore public", "return": "String[]", "signature": "String[] fieldsExcludedFromEqualsAndHashCode()", "full_signature": "@Override @JsonIgnore public String[] fieldsExcludedFromEqualsAndHashCode()", "class_method_signature": "ExactStringMatcher.fieldsExcludedFromEqualsAndHashCode()", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/matchers/ExactStringMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(String matcher, String matched, boolean ignoreCase)", "modifiers": "public static", "return": "boolean", "body": "public static boolean matches(String matcher, String matched, boolean ignoreCase) {\n\n        if (StringUtils.isBlank(matcher)) {\n            return true;\n        } else if (matched != null) {\n            if (matched.equals(matcher)) {\n                return true;\n            }\n            // case insensitive comparison is mainly to improve matching in web containers like Tomcat that convert header names to lower case\n            if (ignoreCase) {\n                return matched.equalsIgnoreCase(matcher);\n            }\n        }\n\n        return false;\n    }", "signature": "boolean matches(String matcher, String matched, boolean ignoreCase)", "full_signature": "public static boolean matches(String matcher, String matched, boolean ignoreCase)", "class_method_signature": "ExactStringMatcher.matches(String matcher, String matched, boolean ignoreCase)", "testcase": false, "constructor": false, "invocations": ["isBlank", "equals", "equalsIgnoreCase"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}