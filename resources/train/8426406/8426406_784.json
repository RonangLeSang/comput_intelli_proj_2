{"test_class": {"identifier": "JsonSchemaValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String JSON_SCHEMA = \"{\" + NEW_LINE +\n        \"    \\\"type\\\": \\\"object\\\",\" + NEW_LINE +\n        \"    \\\"properties\\\": {\" + NEW_LINE +\n        \"        \\\"enumField\\\": {\" + NEW_LINE +\n        \"            \\\"enum\\\": [ \\\"one\\\", \\\"two\\\" ]\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"arrayField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"array\\\",\" + NEW_LINE +\n        \"            \\\"minItems\\\": 1,\" + NEW_LINE +\n        \"            \\\"items\\\": {\" + NEW_LINE +\n        \"                \\\"type\\\": \\\"string\\\"\" + NEW_LINE +\n        \"            },\" + NEW_LINE +\n        \"            \\\"uniqueItems\\\": true\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"stringField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"string\\\",\" + NEW_LINE +\n        \"            \\\"minLength\\\": 5,\" + NEW_LINE +\n        \"            \\\"maxLength\\\": 6\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"booleanField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"boolean\\\"\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"objectField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"object\\\",\" + NEW_LINE +\n        \"            \\\"properties\\\": {\" + NEW_LINE +\n        \"                \\\"stringField\\\": {\" + NEW_LINE +\n        \"                    \\\"type\\\": \\\"string\\\",\" + NEW_LINE +\n        \"                    \\\"minLength\\\": 1,\" + NEW_LINE +\n        \"                    \\\"maxLength\\\": 3\" + NEW_LINE +\n        \"                }\" + NEW_LINE +\n        \"            },\" + NEW_LINE +\n        \"            \\\"required\\\": [ \\\"stringField\\\" ]\" + NEW_LINE +\n        \"        }\" + NEW_LINE +\n        \"    },\" + NEW_LINE +\n        \"    \\\"additionalProperties\\\" : false,\" + NEW_LINE +\n        \"    \\\"required\\\": [ \\\"enumField\\\", \\\"arrayField\\\" ]\" + NEW_LINE +\n        \"}\";", "modifier": "public static final", "type": "String", "declarator": "JSON_SCHEMA = \"{\" + NEW_LINE +\n        \"    \\\"type\\\": \\\"object\\\",\" + NEW_LINE +\n        \"    \\\"properties\\\": {\" + NEW_LINE +\n        \"        \\\"enumField\\\": {\" + NEW_LINE +\n        \"            \\\"enum\\\": [ \\\"one\\\", \\\"two\\\" ]\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"arrayField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"array\\\",\" + NEW_LINE +\n        \"            \\\"minItems\\\": 1,\" + NEW_LINE +\n        \"            \\\"items\\\": {\" + NEW_LINE +\n        \"                \\\"type\\\": \\\"string\\\"\" + NEW_LINE +\n        \"            },\" + NEW_LINE +\n        \"            \\\"uniqueItems\\\": true\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"stringField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"string\\\",\" + NEW_LINE +\n        \"            \\\"minLength\\\": 5,\" + NEW_LINE +\n        \"            \\\"maxLength\\\": 6\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"booleanField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"boolean\\\"\" + NEW_LINE +\n        \"        },\" + NEW_LINE +\n        \"        \\\"objectField\\\": {\" + NEW_LINE +\n        \"            \\\"type\\\": \\\"object\\\",\" + NEW_LINE +\n        \"            \\\"properties\\\": {\" + NEW_LINE +\n        \"                \\\"stringField\\\": {\" + NEW_LINE +\n        \"                    \\\"type\\\": \\\"string\\\",\" + NEW_LINE +\n        \"                    \\\"minLength\\\": 1,\" + NEW_LINE +\n        \"                    \\\"maxLength\\\": 3\" + NEW_LINE +\n        \"                }\" + NEW_LINE +\n        \"            },\" + NEW_LINE +\n        \"            \\\"required\\\": [ \\\"stringField\\\" ]\" + NEW_LINE +\n        \"        }\" + NEW_LINE +\n        \"    },\" + NEW_LINE +\n        \"    \\\"additionalProperties\\\" : false,\" + NEW_LINE +\n        \"    \\\"required\\\": [ \\\"enumField\\\", \\\"arrayField\\\" ]\" + NEW_LINE +\n        \"}\"", "var_name": "JSON_SCHEMA"}, {"original_string": "@Rule\n    public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private final MockServerLogger mockServerLogger = new MockServerLogger();", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger = new MockServerLogger()", "var_name": "mockServerLogger"}], "file": "mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaValidatorTest.java"}, "test_case": {"identifier": "shouldHandleJsonTooLongString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHandleJsonTooLongString() {\n        assertThat(new JsonSchemaValidator(mockServerLogger, JSON_SCHEMA).isValid(\"{arrayField: [ \\\\\\\"one\\\\\\\" ], enumField: \\\\\\\"one\\\\\\\", stringField: \\\\\\\"1234567\\\\\\\"}\"),\n            is(\"JsonParseException - Unexpected character ('\\\\' (code 92)): expected a valid value (JSON String, Number (or 'NaN'/'INF'/'+INF'), Array, Object or token 'null', 'true' or 'false')\" + NEW_LINE +\n                \" at [Source: (String)\\\"{arrayField: [ \\\\\\\"one\\\\\\\" ], enumField: \\\\\\\"one\\\\\\\", stringField: \\\\\\\"1234567\\\\\\\"}\\\"; line: 1, column: 17]\"));\n    }", "signature": "void shouldHandleJsonTooLongString()", "full_signature": "@Test public void shouldHandleJsonTooLongString()", "class_method_signature": "JsonSchemaValidatorTest.shouldHandleJsonTooLongString()", "testcase": true, "constructor": false, "invocations": ["assertThat", "isValid", "is"]}, "focal_class": {"identifier": "JsonSchemaValidator", "superclass": "extends ObjectWithReflectiveEqualsHashCodeToString", "interfaces": "implements Validator<String>", "fields": [{"original_string": "public static final String OPEN_API_SPECIFICATION_URL = \"See: https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi/5.11.x for OpenAPI Specification\";", "modifier": "public static final", "type": "String", "declarator": "OPEN_API_SPECIFICATION_URL = \"See: https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi/5.11.x for OpenAPI Specification\"", "var_name": "OPEN_API_SPECIFICATION_URL"}, {"original_string": "private static final Map<String, String> schemaCache = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "schemaCache = new ConcurrentHashMap<>()", "var_name": "schemaCache"}, {"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private final String schema;", "modifier": "private final", "type": "String", "declarator": "schema", "var_name": "schema"}, {"original_string": "private final JsonNode schemaJsonNode;", "modifier": "private final", "type": "JsonNode", "declarator": "schemaJsonNode", "var_name": "schemaJsonNode"}, {"original_string": "private final String mainSchemeFile;", "modifier": "private final", "type": "String", "declarator": "mainSchemeFile", "var_name": "mainSchemeFile"}, {"original_string": "private final JsonValidator validator = JsonSchemaFactory.byDefault().getValidator();", "modifier": "private final", "type": "JsonValidator", "declarator": "validator = JsonSchemaFactory.byDefault().getValidator()", "var_name": "validator"}, {"original_string": "private final static ObjectMapper OBJECT_MAPPER = ObjectMapperFactory.createObjectMapper();", "modifier": "private final static", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = ObjectMapperFactory.createObjectMapper()", "var_name": "OBJECT_MAPPER"}], "methods": [{"identifier": "JsonSchemaValidator", "parameters": "(MockServerLogger mockServerLogger, String schema)", "modifiers": "public", "return": "", "signature": " JsonSchemaValidator(MockServerLogger mockServerLogger, String schema)", "full_signature": "public  JsonSchemaValidator(MockServerLogger mockServerLogger, String schema)", "class_method_signature": "JsonSchemaValidator.JsonSchemaValidator(MockServerLogger mockServerLogger, String schema)", "testcase": false, "constructor": true}, {"identifier": "JsonSchemaValidator", "parameters": "(MockServerLogger mockServerLogger, String routePath, String mainSchemeFile, String... referenceFiles)", "modifiers": "public", "return": "", "signature": " JsonSchemaValidator(MockServerLogger mockServerLogger, String routePath, String mainSchemeFile, String... referenceFiles)", "full_signature": "public  JsonSchemaValidator(MockServerLogger mockServerLogger, String routePath, String mainSchemeFile, String... referenceFiles)", "class_method_signature": "JsonSchemaValidator.JsonSchemaValidator(MockServerLogger mockServerLogger, String routePath, String mainSchemeFile, String... referenceFiles)", "testcase": false, "constructor": true}, {"identifier": "getSchemaJsonNode", "parameters": "()", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode getSchemaJsonNode()", "full_signature": "private JsonNode getSchemaJsonNode()", "class_method_signature": "JsonSchemaValidator.getSchemaJsonNode()", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchema()", "full_signature": "public String getSchema()", "class_method_signature": "JsonSchemaValidator.getSchema()", "testcase": false, "constructor": false}, {"identifier": "addReferencesIntoSchema", "parameters": "(String routePath, String mainSchemeFile, String... referenceFiles)", "modifiers": "private", "return": "String", "signature": "String addReferencesIntoSchema(String routePath, String mainSchemeFile, String... referenceFiles)", "full_signature": "private String addReferencesIntoSchema(String routePath, String mainSchemeFile, String... referenceFiles)", "class_method_signature": "JsonSchemaValidator.addReferencesIntoSchema(String routePath, String mainSchemeFile, String... referenceFiles)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(String json)", "modifiers": "@Override public", "return": "String", "signature": "String isValid(String json)", "full_signature": "@Override public String isValid(String json)", "class_method_signature": "JsonSchemaValidator.isValid(String json)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(String json, boolean addOpenAPISpecificationMessage)", "modifiers": "public", "return": "String", "signature": "String isValid(String json, boolean addOpenAPISpecificationMessage)", "full_signature": "public String isValid(String json, boolean addOpenAPISpecificationMessage)", "class_method_signature": "JsonSchemaValidator.isValid(String json, boolean addOpenAPISpecificationMessage)", "testcase": false, "constructor": false}, {"identifier": "formatProcessingReport", "parameters": "(ProcessingReport processingMessages, boolean addOpenAPISpecificationMessage)", "modifiers": "private", "return": "String", "signature": "String formatProcessingReport(ProcessingReport processingMessages, boolean addOpenAPISpecificationMessage)", "full_signature": "private String formatProcessingReport(ProcessingReport processingMessages, boolean addOpenAPISpecificationMessage)", "class_method_signature": "JsonSchemaValidator.formatProcessingReport(ProcessingReport processingMessages, boolean addOpenAPISpecificationMessage)", "testcase": false, "constructor": false}, {"identifier": "isErrorForField", "parameters": "(JsonNode reports, String fieldPointer, String fieldName)", "modifiers": "private", "return": "boolean", "signature": "boolean isErrorForField(JsonNode reports, String fieldPointer, String fieldName)", "full_signature": "private boolean isErrorForField(JsonNode reports, String fieldPointer, String fieldName)", "class_method_signature": "JsonSchemaValidator.isErrorForField(JsonNode reports, String fieldPointer, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "deepFieldName", "parameters": "(JsonNode reports, String fieldPointer, String fieldName)", "modifiers": "private", "return": "String", "signature": "String deepFieldName(JsonNode reports, String fieldPointer, String fieldName)", "full_signature": "private String deepFieldName(JsonNode reports, String fieldPointer, String fieldName)", "class_method_signature": "JsonSchemaValidator.deepFieldName(JsonNode reports, String fieldPointer, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "removeDefinitionPrefix", "parameters": "(String text)", "modifiers": "private", "return": "String", "signature": "String removeDefinitionPrefix(String text)", "full_signature": "private String removeDefinitionPrefix(String text)", "class_method_signature": "JsonSchemaValidator.removeDefinitionPrefix(String text)", "testcase": false, "constructor": false}, {"identifier": "pointerValue", "parameters": "(JsonNode jsonNode)", "modifiers": "private", "return": "String", "signature": "String pointerValue(JsonNode jsonNode)", "full_signature": "private String pointerValue(JsonNode jsonNode)", "class_method_signature": "JsonSchemaValidator.pointerValue(JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(Iterator<T> iterator)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> stream(Iterator<T> iterator)", "full_signature": "public static Stream<T> stream(Iterator<T> iterator)", "class_method_signature": "JsonSchemaValidator.stream(Iterator<T> iterator)", "testcase": false, "constructor": false}, {"identifier": "extractMessage", "parameters": "(JsonNode reports)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> extractMessage(JsonNode reports)", "full_signature": "public Set<String> extractMessage(JsonNode reports)", "class_method_signature": "JsonSchemaValidator.extractMessage(JsonNode reports)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(String json)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String isValid(String json) {\n        return isValid(json, true);\n    }", "signature": "String isValid(String json)", "full_signature": "@Override public String isValid(String json)", "class_method_signature": "JsonSchemaValidator.isValid(String json)", "testcase": false, "constructor": false, "invocations": ["isValid"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}