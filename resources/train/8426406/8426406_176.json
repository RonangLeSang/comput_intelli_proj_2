{"test_class": {"identifier": "BodyServletDecoderEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockServerLogger mockServerLogger = new MockServerLogger();", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger = new MockServerLogger()", "var_name": "mockServerLogger"}], "file": "mockserver-core/src/test/java/org/mockserver/codec/BodyServletDecoderEncoderTest.java"}, "test_case": {"identifier": "shouldReadServletRequestToJsonBodyWithJsonContentType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReadServletRequestToJsonBodyWithJsonContentType() throws IOException {\n        // given\n        HttpServletRequest servletRequest = mock(HttpServletRequest.class);\n        when(servletRequest.getHeader(CONTENT_TYPE.toString())).thenReturn(MediaType.APPLICATION_JSON_UTF_8.toString());\n        when(servletRequest.getInputStream()).thenReturn(\n            new DelegatingServletInputStream(IOUtils.toInputStream(\"\u015far\u0259s\", UTF_8))\n        );\n\n        // when\n        BodyWithContentType result = new BodyServletDecoderEncoder(mockServerLogger).servletRequestToBody(servletRequest);\n\n        // then\n        assertThat(result, is(json(\"\u015far\u0259s\", MediaType.APPLICATION_JSON_UTF_8)));\n    }", "signature": "void shouldReadServletRequestToJsonBodyWithJsonContentType()", "full_signature": "@Test public void shouldReadServletRequestToJsonBodyWithJsonContentType()", "class_method_signature": "BodyServletDecoderEncoderTest.shouldReadServletRequestToJsonBodyWithJsonContentType()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getHeader", "toString", "toString", "thenReturn", "when", "getInputStream", "toInputStream", "servletRequestToBody", "assertThat", "is", "json"]}, "focal_class": {"identifier": "BodyServletDecoderEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private final IOStreamUtils ioStreamUtils;", "modifier": "private final", "type": "IOStreamUtils", "declarator": "ioStreamUtils", "var_name": "ioStreamUtils"}, {"original_string": "private final BodyDecoderEncoder bodyDecoderEncoder = new BodyDecoderEncoder();", "modifier": "private final", "type": "BodyDecoderEncoder", "declarator": "bodyDecoderEncoder = new BodyDecoderEncoder()", "var_name": "bodyDecoderEncoder"}], "methods": [{"identifier": "BodyServletDecoderEncoder", "parameters": "(MockServerLogger mockServerLogger)", "modifiers": "public", "return": "", "signature": " BodyServletDecoderEncoder(MockServerLogger mockServerLogger)", "full_signature": "public  BodyServletDecoderEncoder(MockServerLogger mockServerLogger)", "class_method_signature": "BodyServletDecoderEncoder.BodyServletDecoderEncoder(MockServerLogger mockServerLogger)", "testcase": false, "constructor": true}, {"identifier": "bodyToServletResponse", "parameters": "(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "modifiers": "public", "return": "void", "signature": "void bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "full_signature": "public void bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "class_method_signature": "BodyServletDecoderEncoder.bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "testcase": false, "constructor": false}, {"identifier": "servletRequestToBody", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "public", "return": "BodyWithContentType", "signature": "BodyWithContentType servletRequestToBody(HttpServletRequest servletRequest)", "full_signature": "public BodyWithContentType servletRequestToBody(HttpServletRequest servletRequest)", "class_method_signature": "BodyServletDecoderEncoder.servletRequestToBody(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/codec/BodyServletDecoderEncoder.java"}, "focal_method": {"identifier": "servletRequestToBody", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "public", "return": "BodyWithContentType", "body": "public BodyWithContentType servletRequestToBody(HttpServletRequest servletRequest) {\n        if (servletRequest != null) {\n            String contentTypeHeader = servletRequest.getHeader(CONTENT_TYPE.toString());\n            try {\n                byte[] bodyBytes = ByteStreams.toByteArray(servletRequest.getInputStream());\n                return bodyDecoderEncoder.bytesToBody(bodyBytes, contentTypeHeader);\n            } catch (Throwable throwable) {\n                mockServerLogger.logEvent(\n                    new LogEntry()\n                        .setLogLevel(Level.ERROR)\n                        .setMessageFormat(\"exception while reading HttpServletRequest input stream\")\n                        .setThrowable(throwable)\n                );\n                throw new RuntimeException(\"IOException while reading HttpServletRequest input stream\", throwable);\n            }\n        }\n        return null;\n    }", "signature": "BodyWithContentType servletRequestToBody(HttpServletRequest servletRequest)", "full_signature": "public BodyWithContentType servletRequestToBody(HttpServletRequest servletRequest)", "class_method_signature": "BodyServletDecoderEncoder.servletRequestToBody(HttpServletRequest servletRequest)", "testcase": false, "constructor": false, "invocations": ["getHeader", "toString", "toByteArray", "getInputStream", "bytesToBody", "logEvent", "setThrowable", "setMessageFormat", "setLogLevel"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}