{"test_class": {"identifier": "JsonStringMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "mockserver-core/src/test/java/org/mockserver/matchers/JsonStringMatcherTest.java"}, "test_case": {"identifier": "shouldNotMatchNullTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotMatchNullTest() {\n        assertFalse(new JsonStringMatcher(new MockServerLogger(), \"some_value\", MatchType.ONLY_MATCHING_FIELDS).matches(null, null));\n    }", "signature": "void shouldNotMatchNullTest()", "full_signature": "@Test public void shouldNotMatchNullTest()", "class_method_signature": "JsonStringMatcherTest.shouldNotMatchNullTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "matches"]}, "focal_class": {"identifier": "JsonStringMatcher", "superclass": "extends BodyMatcher<String>", "interfaces": "", "fields": [{"original_string": "private static final String[] EXCLUDED_FIELDS = {\"mockServerLogger\"};", "modifier": "private static final", "type": "String[]", "declarator": "EXCLUDED_FIELDS = {\"mockServerLogger\"}", "var_name": "EXCLUDED_FIELDS"}, {"original_string": "private static final ObjectWriter PRETTY_PRINTER = ObjectMapperFactory.createObjectMapper(true);", "modifier": "private static final", "type": "ObjectWriter", "declarator": "PRETTY_PRINTER = ObjectMapperFactory.createObjectMapper(true)", "var_name": "PRETTY_PRINTER"}, {"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private final String matcher;", "modifier": "private final", "type": "String", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "private JsonNode matcherJsonNode;", "modifier": "private", "type": "JsonNode", "declarator": "matcherJsonNode", "var_name": "matcherJsonNode"}, {"original_string": "private final MatchType matchType;", "modifier": "private final", "type": "MatchType", "declarator": "matchType", "var_name": "matchType"}], "methods": [{"identifier": "JsonStringMatcher", "parameters": "(MockServerLogger mockServerLogger, String matcher, MatchType matchType)", "modifiers": "", "return": "", "signature": " JsonStringMatcher(MockServerLogger mockServerLogger, String matcher, MatchType matchType)", "full_signature": "  JsonStringMatcher(MockServerLogger mockServerLogger, String matcher, MatchType matchType)", "class_method_signature": "JsonStringMatcher.JsonStringMatcher(MockServerLogger mockServerLogger, String matcher, MatchType matchType)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final MatchDifference context, String matched)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final MatchDifference context, String matched)", "full_signature": "public boolean matches(final MatchDifference context, String matched)", "class_method_signature": "JsonStringMatcher.matches(final MatchDifference context, String matched)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlank()", "full_signature": "public boolean isBlank()", "class_method_signature": "JsonStringMatcher.isBlank()", "testcase": false, "constructor": false}, {"identifier": "fieldsExcludedFromEqualsAndHashCode", "parameters": "()", "modifiers": "@Override @JsonIgnore protected", "return": "String[]", "signature": "String[] fieldsExcludedFromEqualsAndHashCode()", "full_signature": "@Override @JsonIgnore protected String[] fieldsExcludedFromEqualsAndHashCode()", "class_method_signature": "JsonStringMatcher.fieldsExcludedFromEqualsAndHashCode()", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/matchers/JsonStringMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(final MatchDifference context, String matched)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(final MatchDifference context, String matched) {\n        boolean result = false;\n\n        try {\n            if (StringUtils.isBlank(matcher)) {\n                result = true;\n            } else {\n                Options options = Options.empty();\n                switch (matchType) {\n                    case STRICT:\n                        break;\n                    case ONLY_MATCHING_FIELDS:\n                        options = options.with(\n                            IGNORING_ARRAY_ORDER,\n                            IGNORING_EXTRA_ARRAY_ITEMS,\n                            IGNORING_EXTRA_FIELDS\n                        );\n                        break;\n                }\n                final Difference diffListener = new Difference();\n                Configuration diffConfig = Configuration.empty().withDifferenceListener(diffListener).withOptions(options);\n\n                try {\n                    if (matcherJsonNode == null) {\n                        matcherJsonNode = ObjectMapperFactory.createObjectMapper().readTree(matcher);\n                    }\n                    result = Diff\n                        .create(\n                            matcherJsonNode,\n                            ObjectMapperFactory.createObjectMapper().readTree(matched),\n                            \"\",\n                            \"\",\n                            diffConfig\n                        )\n                        .similar();\n                } catch (Throwable throwable) {\n                    if (context != null) {\n                        context.addDifference(mockServerLogger, throwable, \"exception while perform json match failed expected:{}found:{}\", this.matcher, matched);\n                    }\n                }\n\n                if (!result) {\n                    if (context != null) {\n                        if (diffListener.differences.isEmpty()) {\n                            context.addDifference(mockServerLogger, \"json match failed expected:{}found:{}\", this.matcher, matched);\n                        } else {\n                            context.addDifference(mockServerLogger, \"json match failed expected:{}found:{}failed because:{}\", this.matcher, matched, Joiner.on(\",\" + NEW_LINE).join(diffListener.differences));\n                        }\n                    }\n                }\n            }\n        } catch (Throwable throwable) {\n            if (context != null) {\n                context.addDifference(mockServerLogger, throwable, \"json match failed expected:{}found:{}failed because:{}\", this.matcher, matched, throwable.getMessage());\n            }\n        }\n\n        return not != result;\n    }", "signature": "boolean matches(final MatchDifference context, String matched)", "full_signature": "public boolean matches(final MatchDifference context, String matched)", "class_method_signature": "JsonStringMatcher.matches(final MatchDifference context, String matched)", "testcase": false, "constructor": false, "invocations": ["isBlank", "empty", "with", "withOptions", "withDifferenceListener", "empty", "readTree", "createObjectMapper", "similar", "create", "readTree", "createObjectMapper", "addDifference", "isEmpty", "addDifference", "addDifference", "join", "on", "addDifference", "getMessage"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}