{"test_class": {"identifier": "MockServerServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpRequestSerializer httpRequestSerializer = new HttpRequestSerializer(new MockServerLogger());", "modifier": "private final", "type": "HttpRequestSerializer", "declarator": "httpRequestSerializer = new HttpRequestSerializer(new MockServerLogger())", "var_name": "httpRequestSerializer"}, {"original_string": "private final ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());", "modifier": "private final", "type": "ExpectationSerializer", "declarator": "expectationSerializer = new ExpectationSerializer(new MockServerLogger())", "var_name": "expectationSerializer"}, {"original_string": "private final PortBindingSerializer portBindingSerializer = new PortBindingSerializer(new MockServerLogger());", "modifier": "private final", "type": "PortBindingSerializer", "declarator": "portBindingSerializer = new PortBindingSerializer(new MockServerLogger())", "var_name": "portBindingSerializer"}, {"original_string": "private HttpState httpStateHandler;", "modifier": "private", "type": "HttpState", "declarator": "httpStateHandler", "var_name": "httpStateHandler"}, {"original_string": "private HttpActionHandler mockActionHandler;", "modifier": "private", "type": "HttpActionHandler", "declarator": "mockActionHandler", "var_name": "mockActionHandler"}, {"original_string": "@InjectMocks\n    private MockServerServlet mockServerServlet;", "modifier": "@InjectMocks\n    private", "type": "MockServerServlet", "declarator": "mockServerServlet", "var_name": "mockServerServlet"}, {"original_string": "private MockHttpServletResponse response;", "modifier": "private", "type": "MockHttpServletResponse", "declarator": "response", "var_name": "response"}], "file": "mockserver-war/src/test/java/org/mockserver/mockservlet/MockServerServletTest.java"}, "test_case": {"identifier": "shouldUseActionHandlerToHandleNonAPIRequestsOnNonDefaultPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUseActionHandlerToHandleNonAPIRequestsOnNonDefaultPort() {\n        // given\n        MockHttpServletRequest request = buildHttpServletRequest(\n            \"GET\",\n            \"request_one\",\n            \"\"\n        );\n        request.setLocalAddr(\"local_address\");\n        request.setLocalPort(666);\n\n        // when\n        mockServerServlet.service(request, response);\n\n        // then\n        verify(mockActionHandler).processAction(\n            eq(\n                request(\"request_one\")\n                    .withMethod(\"GET\")\n                    .withHeader(\"Content-Type\", APPLICATION_JSON_UTF_8.toString())\n                    .withKeepAlive(true)\n                    .withSecure(false)\n            ),\n            any(ServletResponseWriter.class),\n            isNull(),\n            eq(ImmutableSet.of(\n                \"local_address:666\",\n                \"localhost:666\",\n                \"127.0.0.1:666\"\n            )),\n            eq(false),\n            eq(true));\n    }", "signature": "void shouldUseActionHandlerToHandleNonAPIRequestsOnNonDefaultPort()", "full_signature": "@Test public void shouldUseActionHandlerToHandleNonAPIRequestsOnNonDefaultPort()", "class_method_signature": "MockServerServletTest.shouldUseActionHandlerToHandleNonAPIRequestsOnNonDefaultPort()", "testcase": true, "constructor": false, "invocations": ["buildHttpServletRequest", "setLocalAddr", "setLocalPort", "service", "processAction", "verify", "eq", "withSecure", "withKeepAlive", "withHeader", "withMethod", "request", "toString", "any", "isNull", "eq", "of", "eq", "eq"]}, "focal_class": {"identifier": "MockServerServlet", "superclass": "extends HttpServlet", "interfaces": "implements ServletContextListener", "fields": [{"original_string": "private MockServerLogger mockServerLogger;", "modifier": "private", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private HttpState httpStateHandler;", "modifier": "private", "type": "HttpState", "declarator": "httpStateHandler", "var_name": "httpStateHandler"}, {"original_string": "private Scheduler scheduler;", "modifier": "private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private PortBindingSerializer portBindingSerializer;", "modifier": "private", "type": "PortBindingSerializer", "declarator": "portBindingSerializer", "var_name": "portBindingSerializer"}, {"original_string": "private HttpServletRequestToMockServerHttpRequestDecoder httpServletRequestToMockServerRequestDecoder;", "modifier": "private", "type": "HttpServletRequestToMockServerHttpRequestDecoder", "declarator": "httpServletRequestToMockServerRequestDecoder", "var_name": "httpServletRequestToMockServerRequestDecoder"}, {"original_string": "private HttpActionHandler actionHandler;", "modifier": "private", "type": "HttpActionHandler", "declarator": "actionHandler", "var_name": "actionHandler"}, {"original_string": "private EventLoopGroup workerGroup = new NioEventLoopGroup(ConfigurationProperties.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + \"-eventLoop\"));", "modifier": "private", "type": "EventLoopGroup", "declarator": "workerGroup = new NioEventLoopGroup(ConfigurationProperties.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + \"-eventLoop\"))", "var_name": "workerGroup"}], "methods": [{"identifier": "MockServerServlet", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "", "signature": " MockServerServlet()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public  MockServerServlet()", "class_method_signature": "MockServerServlet.MockServerServlet()", "testcase": false, "constructor": true}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MockServerServlet.destroy()", "testcase": false, "constructor": false}, {"identifier": "contextInitialized", "parameters": "(ServletContextEvent sce)", "modifiers": "@Override public", "return": "void", "signature": "void contextInitialized(ServletContextEvent sce)", "full_signature": "@Override public void contextInitialized(ServletContextEvent sce)", "class_method_signature": "MockServerServlet.contextInitialized(ServletContextEvent sce)", "testcase": false, "constructor": false}, {"identifier": "contextDestroyed", "parameters": "(ServletContextEvent sce)", "modifiers": "@Override public", "return": "void", "signature": "void contextDestroyed(ServletContextEvent sce)", "full_signature": "@Override public void contextDestroyed(ServletContextEvent sce)", "class_method_signature": "MockServerServlet.contextDestroyed(ServletContextEvent sce)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void shutdown()", "full_signature": "private void shutdown()", "class_method_signature": "MockServerServlet.shutdown()", "testcase": false, "constructor": false}, {"identifier": "service", "parameters": "(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "modifiers": "@Override public", "return": "void", "signature": "void service(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "full_signature": "@Override public void service(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "class_method_signature": "MockServerServlet.service(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "testcase": false, "constructor": false}], "file": "mockserver-war/src/main/java/org/mockserver/mockservlet/MockServerServlet.java"}, "focal_method": {"identifier": "service", "parameters": "(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void service(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n\n        ResponseWriter responseWriter = new ServletResponseWriter(new MockServerLogger(), httpServletResponse);\n        HttpRequest request = null;\n        try {\n\n            request = httpServletRequestToMockServerRequestDecoder.mapHttpServletRequestToMockServerRequest(httpServletRequest);\n            final String hostHeader = request.getFirstHeader(HOST.toString());\n            if (isNotBlank(hostHeader)) {\n                scheduler.submit(() -> addSubjectAlternativeName(hostHeader));\n            }\n\n            if (!httpStateHandler.handle(request, responseWriter, true)) {\n\n                if (request.getPath().getValue().equals(\"/_mockserver_callback_websocket\")) {\n\n                    responseWriter.writeResponse(request, NOT_IMPLEMENTED, \"ExpectationResponseCallback, ExpectationForwardCallback or ExpectationForwardAndResponseCallback is not supported by MockServer deployed as a WAR\", \"text/plain\");\n\n                } else if (request.matches(\"PUT\", PATH_PREFIX + \"/status\", \"/status\") ||\n                    isNotBlank(ConfigurationProperties.livenessHttpGetPath()) && request.matches(\"GET\", ConfigurationProperties.livenessHttpGetPath())) {\n\n                    responseWriter.writeResponse(request, OK, portBindingSerializer.serialize(portBinding(httpServletRequest.getLocalPort())), \"application/json\");\n\n                } else if (request.matches(\"PUT\", PATH_PREFIX + \"/bind\", \"/bind\")) {\n\n                    responseWriter.writeResponse(request, NOT_IMPLEMENTED);\n\n                } else if (request.matches(\"PUT\", PATH_PREFIX + \"/stop\", \"/stop\")) {\n\n                    responseWriter.writeResponse(request, NOT_IMPLEMENTED);\n\n                } else {\n\n                    String portExtension = \"\";\n                    if (!(httpServletRequest.getLocalPort() == 443 && httpServletRequest.isSecure() || httpServletRequest.getLocalPort() == 80)) {\n                        portExtension = \":\" + httpServletRequest.getLocalPort();\n                    }\n                    actionHandler.processAction(request, responseWriter, null, ImmutableSet.of(\n                        httpServletRequest.getLocalAddr() + portExtension,\n                        \"localhost\" + portExtension,\n                        \"127.0.0.1\" + portExtension\n                    ), false, true);\n\n                }\n            }\n        } catch (IllegalArgumentException iae) {\n            mockServerLogger.logEvent(\n                new LogEntry()\n                    .setLogLevel(Level.ERROR)\n                    .setHttpRequest(request)\n                    .setMessageFormat(\"exception processing request:{}error:{}\")\n                    .setArguments(request, iae.getMessage())\n            );\n            // send request without API CORS headers\n            responseWriter.writeResponse(request, BAD_REQUEST, iae.getMessage(), MediaType.create(\"text\", \"plain\").toString());\n        } catch (Exception e) {\n            mockServerLogger.logEvent(\n                new LogEntry()\n                    .setLogLevel(Level.ERROR)\n                    .setHttpRequest(request)\n                    .setMessageFormat(\"exception processing \" + request)\n                    .setThrowable(e)\n            );\n            responseWriter.writeResponse(request, response().withStatusCode(BAD_REQUEST.code()).withBody(e.getMessage()), true);\n        }\n    }", "signature": "void service(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "full_signature": "@Override public void service(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "class_method_signature": "MockServerServlet.service(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)", "testcase": false, "constructor": false, "invocations": ["mapHttpServletRequestToMockServerRequest", "getFirstHeader", "toString", "isNotBlank", "submit", "addSubjectAlternativeName", "handle", "equals", "getValue", "getPath", "writeResponse", "matches", "isNotBlank", "livenessHttpGetPath", "matches", "livenessHttpGetPath", "writeResponse", "serialize", "portBinding", "getLocalPort", "matches", "writeResponse", "matches", "writeResponse", "getLocalPort", "isSecure", "getLocalPort", "getLocalPort", "processAction", "of", "getLocalAddr", "logEvent", "setArguments", "setMessageFormat", "setHttpRequest", "setLogLevel", "getMessage", "writeResponse", "getMessage", "toString", "create", "logEvent", "setThrowable", "setMessageFormat", "setHttpRequest", "setLogLevel", "writeResponse", "withBody", "withStatusCode", "response", "code", "getMessage"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}