{"test_class": {"identifier": "BodyServletDecoderEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockServerLogger mockServerLogger = new MockServerLogger();", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger = new MockServerLogger()", "var_name": "mockServerLogger"}], "file": "mockserver-core/src/test/java/org/mockserver/codec/BodyServletDecoderEncoderTest.java"}, "test_case": {"identifier": "shouldSerialiseBodyToServletResponseWithJsonContentType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSerialiseBodyToServletResponseWithJsonContentType() throws IOException {\n        // given\n        Body body = new StringBody(\"\u015far\u0259s\");\n        HttpServletResponse servletResponse = mock(HttpServletResponse.class);\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        when(servletResponse.getOutputStream()).thenReturn(\n            new DelegatingServletOutputStream(outputStream)\n        );\n\n        // when\n        new BodyServletDecoderEncoder(mockServerLogger).bodyToServletResponse(servletResponse, body, MediaType.APPLICATION_JSON_UTF_8.toString());\n\n        // then\n        assertThat(outputStream.toByteArray(), is(\"\u015far\u0259s\".getBytes(UTF_8)));\n    }", "signature": "void shouldSerialiseBodyToServletResponseWithJsonContentType()", "full_signature": "@Test public void shouldSerialiseBodyToServletResponseWithJsonContentType()", "class_method_signature": "BodyServletDecoderEncoderTest.shouldSerialiseBodyToServletResponseWithJsonContentType()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getOutputStream", "bodyToServletResponse", "toString", "assertThat", "toByteArray", "is", "tBytes(U"]}, "focal_class": {"identifier": "BodyServletDecoderEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private final IOStreamUtils ioStreamUtils;", "modifier": "private final", "type": "IOStreamUtils", "declarator": "ioStreamUtils", "var_name": "ioStreamUtils"}, {"original_string": "private final BodyDecoderEncoder bodyDecoderEncoder = new BodyDecoderEncoder();", "modifier": "private final", "type": "BodyDecoderEncoder", "declarator": "bodyDecoderEncoder = new BodyDecoderEncoder()", "var_name": "bodyDecoderEncoder"}], "methods": [{"identifier": "BodyServletDecoderEncoder", "parameters": "(MockServerLogger mockServerLogger)", "modifiers": "public", "return": "", "signature": " BodyServletDecoderEncoder(MockServerLogger mockServerLogger)", "full_signature": "public  BodyServletDecoderEncoder(MockServerLogger mockServerLogger)", "class_method_signature": "BodyServletDecoderEncoder.BodyServletDecoderEncoder(MockServerLogger mockServerLogger)", "testcase": false, "constructor": true}, {"identifier": "bodyToServletResponse", "parameters": "(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "modifiers": "public", "return": "void", "signature": "void bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "full_signature": "public void bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "class_method_signature": "BodyServletDecoderEncoder.bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "testcase": false, "constructor": false}, {"identifier": "servletRequestToBody", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "public", "return": "BodyWithContentType", "signature": "BodyWithContentType servletRequestToBody(HttpServletRequest servletRequest)", "full_signature": "public BodyWithContentType servletRequestToBody(HttpServletRequest servletRequest)", "class_method_signature": "BodyServletDecoderEncoder.servletRequestToBody(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/codec/BodyServletDecoderEncoder.java"}, "focal_method": {"identifier": "bodyToServletResponse", "parameters": "(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "modifiers": "public", "return": "void", "body": "public void bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader) {\n        byte[] bytes = bodyDecoderEncoder.bodyToBytes(body, contentTypeHeader);\n        if (bytes != null) {\n            ioStreamUtils.writeToOutputStream(bytes, httpServletResponse);\n        }\n    }", "signature": "void bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "full_signature": "public void bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "class_method_signature": "BodyServletDecoderEncoder.bodyToServletResponse(HttpServletResponse httpServletResponse, Body body, String contentTypeHeader)", "testcase": false, "constructor": false, "invocations": ["bodyToBytes", "writeToOutputStream"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}