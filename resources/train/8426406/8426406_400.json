{"test_class": {"identifier": "VerificationSequenceSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpRequest requestOne =\n        request()\n            .withMethod(\"GET\")\n            .withPath(\"some_path_one\")\n            .withBody(new StringBody(\"some_body_one\"))\n            .withHeaders(new Header(\"header_name_two\", \"header_value_two\"));", "modifier": "private final", "type": "HttpRequest", "declarator": "requestOne =\n        request()\n            .withMethod(\"GET\")\n            .withPath(\"some_path_one\")\n            .withBody(new StringBody(\"some_body_one\"))\n            .withHeaders(new Header(\"header_name_two\", \"header_value_two\"))", "var_name": "requestOne"}, {"original_string": "private final HttpRequest requestTwo =\n        request()\n            .withMethod(\"GET\")\n            .withPath(\"some_path_two\")\n            .withBody(new StringBody(\"some_body_two\"))\n            .withHeaders(new Header(\"header_name_one\", \"header_value_one\"));", "modifier": "private final", "type": "HttpRequest", "declarator": "requestTwo =\n        request()\n            .withMethod(\"GET\")\n            .withPath(\"some_path_two\")\n            .withBody(new StringBody(\"some_body_two\"))\n            .withHeaders(new Header(\"header_name_one\", \"header_value_one\"))", "var_name": "requestTwo"}, {"original_string": "private final VerificationSequence fullVerificationSequence = new VerificationSequence().withRequests(requestOne);", "modifier": "private final", "type": "VerificationSequence", "declarator": "fullVerificationSequence = new VerificationSequence().withRequests(requestOne)", "var_name": "fullVerificationSequence"}, {"original_string": "private final VerificationSequenceDTO fullVerificationSequenceDTO = new VerificationSequenceDTO(fullVerificationSequence);", "modifier": "private final", "type": "VerificationSequenceDTO", "declarator": "fullVerificationSequenceDTO = new VerificationSequenceDTO(fullVerificationSequence)", "var_name": "fullVerificationSequenceDTO"}, {"original_string": "@Mock\n    private ObjectMapper objectMapper;", "modifier": "@Mock\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Mock\n    private ObjectWriter objectWriter;", "modifier": "@Mock\n    private", "type": "ObjectWriter", "declarator": "objectWriter", "var_name": "objectWriter"}, {"original_string": "@Mock\n    private JsonSchemaVerificationSequenceValidator verificationSequenceValidator;", "modifier": "@Mock\n    private", "type": "JsonSchemaVerificationSequenceValidator", "declarator": "verificationSequenceValidator", "var_name": "verificationSequenceValidator"}, {"original_string": "@InjectMocks\n    private VerificationSequenceSerializer verificationSequenceSerializer;", "modifier": "@InjectMocks\n    private", "type": "VerificationSequenceSerializer", "declarator": "verificationSequenceSerializer", "var_name": "verificationSequenceSerializer"}, {"original_string": "@Rule\n    public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "mockserver-core/src/test/java/org/mockserver/serialization/VerificationSequenceSerializerTest.java"}, "test_case": {"identifier": "deserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deserialize() throws IOException {\n        // given\n        when(verificationSequenceValidator.isValid(eq(\"requestBytes\"))).thenReturn(\"\");\n        when(objectMapper.readValue(eq(\"requestBytes\"), same(VerificationSequenceDTO.class))).thenReturn(fullVerificationSequenceDTO);\n\n        // when\n        VerificationSequence verification = verificationSequenceSerializer.deserialize(\"requestBytes\");\n\n        // then\n        assertEquals(fullVerificationSequence, verification);\n    }", "signature": "void deserialize()", "full_signature": "@Test public void deserialize()", "class_method_signature": "VerificationSequenceSerializerTest.deserialize()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isValid", "eq", "thenReturn", "when", "readValue", "eq", "same", "deserialize", "assertEquals"]}, "focal_class": {"identifier": "VerificationSequenceSerializer", "superclass": "", "interfaces": "implements Serializer<VerificationSequence>", "fields": [{"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);", "modifier": "private", "type": "ObjectWriter", "declarator": "objectWriter = ObjectMapperFactory.createObjectMapper(true)", "var_name": "objectWriter"}, {"original_string": "private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper = ObjectMapperFactory.createObjectMapper()", "var_name": "objectMapper"}, {"original_string": "private JsonSchemaVerificationSequenceValidator verificationSequenceValidator;", "modifier": "private", "type": "JsonSchemaVerificationSequenceValidator", "declarator": "verificationSequenceValidator", "var_name": "verificationSequenceValidator"}], "methods": [{"identifier": "VerificationSequenceSerializer", "parameters": "(MockServerLogger mockServerLogger)", "modifiers": "public", "return": "", "signature": " VerificationSequenceSerializer(MockServerLogger mockServerLogger)", "full_signature": "public  VerificationSequenceSerializer(MockServerLogger mockServerLogger)", "class_method_signature": "VerificationSequenceSerializer.VerificationSequenceSerializer(MockServerLogger mockServerLogger)", "testcase": false, "constructor": true}, {"identifier": "getValidator", "parameters": "()", "modifiers": "private", "return": "JsonSchemaVerificationSequenceValidator", "signature": "JsonSchemaVerificationSequenceValidator getValidator()", "full_signature": "private JsonSchemaVerificationSequenceValidator getValidator()", "class_method_signature": "VerificationSequenceSerializer.getValidator()", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(VerificationSequence verificationSequence)", "modifiers": "public", "return": "String", "signature": "String serialize(VerificationSequence verificationSequence)", "full_signature": "public String serialize(VerificationSequence verificationSequence)", "class_method_signature": "VerificationSequenceSerializer.serialize(VerificationSequence verificationSequence)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String jsonVerificationSequence)", "modifiers": "public", "return": "VerificationSequence", "signature": "VerificationSequence deserialize(String jsonVerificationSequence)", "full_signature": "public VerificationSequence deserialize(String jsonVerificationSequence)", "class_method_signature": "VerificationSequenceSerializer.deserialize(String jsonVerificationSequence)", "testcase": false, "constructor": false}, {"identifier": "supportsType", "parameters": "()", "modifiers": "@Override public", "return": "Class<VerificationSequence>", "signature": "Class<VerificationSequence> supportsType()", "full_signature": "@Override public Class<VerificationSequence> supportsType()", "class_method_signature": "VerificationSequenceSerializer.supportsType()", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/serialization/VerificationSequenceSerializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(String jsonVerificationSequence)", "modifiers": "public", "return": "VerificationSequence", "body": "public VerificationSequence deserialize(String jsonVerificationSequence) {\n        if (isBlank(jsonVerificationSequence)) {\n            throw new IllegalArgumentException(\n                \"1 error:\" + NEW_LINE +\n                    \" - a verification sequence is required but value was \\\"\" + jsonVerificationSequence + \"\\\"\" + NEW_LINE +\n                    NEW_LINE +\n                    OPEN_API_SPECIFICATION_URL\n            );\n        } else {\n            String validationErrors = getValidator().isValid(jsonVerificationSequence);\n            if (validationErrors.isEmpty()) {\n                VerificationSequence verificationSequence = null;\n                try {\n                    VerificationSequenceDTO verificationDTO = objectMapper.readValue(jsonVerificationSequence, VerificationSequenceDTO.class);\n                    if (verificationDTO != null) {\n                        verificationSequence = verificationDTO.buildObject();\n                    }\n                } catch (Throwable throwable) {\n                    mockServerLogger.logEvent(\n                        new LogEntry()\n                            .setLogLevel(Level.ERROR)\n                            .setMessageFormat(\"exception while parsing{}for VerificationSequence \" + throwable.getMessage())\n                            .setArguments(jsonVerificationSequence)\n                            .setThrowable(throwable)\n                    );\n                    throw new IllegalArgumentException(\"exception while parsing [\" + jsonVerificationSequence + \"] for VerificationSequence\", throwable);\n                }\n                return verificationSequence;\n            } else {\n                throw new IllegalArgumentException(StringUtils.removeEndIgnoreCase(formatLogMessage(\"incorrect verification sequence json format for:{}schema validation errors:{}\", jsonVerificationSequence, validationErrors), \"\\n\"));\n            }\n        }\n    }", "signature": "VerificationSequence deserialize(String jsonVerificationSequence)", "full_signature": "public VerificationSequence deserialize(String jsonVerificationSequence)", "class_method_signature": "VerificationSequenceSerializer.deserialize(String jsonVerificationSequence)", "testcase": false, "constructor": false, "invocations": ["isBlank", "isValid", "getValidator", "isEmpty", "readValue", "buildObject", "logEvent", "setThrowable", "setArguments", "setMessageFormat", "setLogLevel", "getMessage", "removeEndIgnoreCase", "formatLogMessage"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}