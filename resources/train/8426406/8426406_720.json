{"test_class": {"identifier": "XPathMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "mockserver-core/src/test/java/org/mockserver/matchers/XPathMatcherTest.java"}, "test_case": {"identifier": "shouldMatchNotMatchingXPathWithNot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMatchNotMatchingXPathWithNot() {\n        String matched = \"\" +\n                \"<element>\" +\n                \"   <key>some_key</key>\" +\n                \"   <value>some_value</value>\" +\n                \"</element>\";\n        assertTrue(notMatcher(new XPathMatcher(new MockServerLogger(),\"/element[key = 'some_key' and value = 'some_other_value']\")).matches(null, matched));\n        assertTrue(notMatcher(new XPathMatcher(new MockServerLogger(),\"/element[key = 'some_other_key']\")).matches(null, matched));\n        assertTrue(notMatcher(new XPathMatcher(new MockServerLogger(),\"/element/not_key\")).matches(null, matched));\n        assertTrue(notMatcher(new XPathMatcher(new MockServerLogger(),\"/element[key and not_value]\")).matches(null, matched));\n    }", "signature": "void shouldMatchNotMatchingXPathWithNot()", "full_signature": "@Test public void shouldMatchNotMatchingXPathWithNot()", "class_method_signature": "XPathMatcherTest.shouldMatchNotMatchingXPathWithNot()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matches", "notMatcher", "assertTrue", "matches", "notMatcher", "assertTrue", "matches", "notMatcher", "assertTrue", "matches", "notMatcher"]}, "focal_class": {"identifier": "XPathMatcher", "superclass": "extends BodyMatcher<String>", "interfaces": "", "fields": [{"original_string": "private static final String[] EXCLUDED_FIELDS = {\"mockServerLogger\", \"stringToXmlDocumentParser\", \"xpathExpression\"};", "modifier": "private static final", "type": "String[]", "declarator": "EXCLUDED_FIELDS = {\"mockServerLogger\", \"stringToXmlDocumentParser\", \"xpathExpression\"}", "var_name": "EXCLUDED_FIELDS"}, {"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private final String matcher;", "modifier": "private final", "type": "String", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "private final StringToXmlDocumentParser stringToXmlDocumentParser = new StringToXmlDocumentParser();", "modifier": "private final", "type": "StringToXmlDocumentParser", "declarator": "stringToXmlDocumentParser = new StringToXmlDocumentParser()", "var_name": "stringToXmlDocumentParser"}, {"original_string": "private XPathExpression xpathExpression = null;", "modifier": "private", "type": "XPathExpression", "declarator": "xpathExpression = null", "var_name": "xpathExpression"}], "methods": [{"identifier": "XPathMatcher", "parameters": "(MockServerLogger mockServerLogger, String matcher)", "modifiers": "", "return": "", "signature": " XPathMatcher(MockServerLogger mockServerLogger, String matcher)", "full_signature": "  XPathMatcher(MockServerLogger mockServerLogger, String matcher)", "class_method_signature": "XPathMatcher.XPathMatcher(MockServerLogger mockServerLogger, String matcher)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final MatchDifference context, final String matched)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(final MatchDifference context, final String matched)", "full_signature": "public boolean matches(final MatchDifference context, final String matched)", "class_method_signature": "XPathMatcher.matches(final MatchDifference context, final String matched)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlank()", "full_signature": "public boolean isBlank()", "class_method_signature": "XPathMatcher.isBlank()", "testcase": false, "constructor": false}, {"identifier": "fieldsExcludedFromEqualsAndHashCode", "parameters": "()", "modifiers": "@Override @JsonIgnore protected", "return": "String[]", "signature": "String[] fieldsExcludedFromEqualsAndHashCode()", "full_signature": "@Override @JsonIgnore protected String[] fieldsExcludedFromEqualsAndHashCode()", "class_method_signature": "XPathMatcher.fieldsExcludedFromEqualsAndHashCode()", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/matchers/XPathMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(final MatchDifference context, final String matched)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(final MatchDifference context, final String matched) {\n        boolean result = false;\n        boolean alreadyLoggedMatchFailure = false;\n\n        if (xpathExpression == null) {\n            if (context != null) {\n                context.addDifference(mockServerLogger, \"xpath match failed expected:{}found:{}failed because:{}\", \"null\", matched, \"xpath matcher was null\");\n                alreadyLoggedMatchFailure = true;\n            }\n        } else if (matcher.equals(matched)) {\n            result = true;\n        } else if (matched != null) {\n            try {\n                result = (Boolean) xpathExpression.evaluate(stringToXmlDocumentParser.buildDocument(matched, (matchedInException, throwable, level) -> {\n                    if (context != null) {\n                        context.addDifference(mockServerLogger, throwable, \"xpath match failed expected:{}found:{}failed because \" + prettyPrint(level) + \":{}\", matcher, matched, throwable.getMessage());\n                    }\n                }), XPathConstants.BOOLEAN);\n            } catch (Throwable throwable) {\n                if (context != null) {\n                    context.addDifference(mockServerLogger, throwable, \"xpath match failed expected:{}found:{}failed because:{}\", matcher, matched, throwable.getMessage());\n                    alreadyLoggedMatchFailure = true;\n                }\n            }\n        }\n\n        if (!result && !alreadyLoggedMatchFailure && context != null) {\n            context.addDifference(mockServerLogger, \"xpath match failed expected:{}found:{}failed because:{}\", matcher, matched, \"xpath did not evaluate to truthy\");\n        }\n\n        return not != result;\n    }", "signature": "boolean matches(final MatchDifference context, final String matched)", "full_signature": "public boolean matches(final MatchDifference context, final String matched)", "class_method_signature": "XPathMatcher.matches(final MatchDifference context, final String matched)", "testcase": false, "constructor": false, "invocations": ["addDifference", "equals", "evaluate", "buildDocument", "addDifference", "prettyPrint", "getMessage", "addDifference", "getMessage", "addDifference"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}