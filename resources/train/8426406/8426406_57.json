{"test_class": {"identifier": "ConfigurationPropertiesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private String propertiesBeforeTest;", "modifier": "private", "type": "String", "declarator": "propertiesBeforeTest", "var_name": "propertiesBeforeTest"}], "file": "mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java"}, "test_case": {"identifier": "shouldSetAndReadWebSocketClientEventLoopThreadCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSetAndReadWebSocketClientEventLoopThreadCount() {\n        // given\n        System.clearProperty(\"mockserver.webSocketClientEventLoopThreadCount\");\n\n        // when\n        assertEquals(5, webSocketClientEventLoopThreadCount());\n        webSocketClientEventLoopThreadCount(2);\n\n        // then\n        assertEquals(\"2\", System.getProperty(\"mockserver.webSocketClientEventLoopThreadCount\"));\n        assertEquals(2, webSocketClientEventLoopThreadCount());\n    }", "signature": "void shouldSetAndReadWebSocketClientEventLoopThreadCount()", "full_signature": "@Test public void shouldSetAndReadWebSocketClientEventLoopThreadCount()", "class_method_signature": "ConfigurationPropertiesTest.shouldSetAndReadWebSocketClientEventLoopThreadCount()", "testcase": true, "constructor": false, "invocations": ["clearProperty", "assertEquals", "webSocketClientEventLoopThreadCount", "webSocketClientEventLoopThreadCount", "assertEquals", "getProperty", "assertEquals", "webSocketClientEventLoopThreadCount"]}, "focal_class": {"identifier": "ConfigurationProperties", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(ConfigurationProperties.class);", "modifier": "private static final", "type": "MockServerLogger", "declarator": "MOCK_SERVER_LOGGER = new MockServerLogger(ConfigurationProperties.class)", "var_name": "MOCK_SERVER_LOGGER"}, {"original_string": "private static final String DEFAULT_LOG_LEVEL = \"INFO\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LOG_LEVEL = \"INFO\"", "var_name": "DEFAULT_LOG_LEVEL"}, {"original_string": "private static final long DEFAULT_MAX_TIMEOUT = 20;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_MAX_TIMEOUT = 20", "var_name": "DEFAULT_MAX_TIMEOUT"}, {"original_string": "private static final int DEFAULT_CONNECT_TIMEOUT = 20000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CONNECT_TIMEOUT = 20000", "var_name": "DEFAULT_CONNECT_TIMEOUT"}, {"original_string": "private static final String DEFAULT_MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS = \"false\"", "var_name": "DEFAULT_MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS"}, {"original_string": "private static final int DEFAULT_MAX_FUTURE_TIMEOUT = 60;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_FUTURE_TIMEOUT = 60", "var_name": "DEFAULT_MAX_FUTURE_TIMEOUT"}, {"original_string": "private static final String DEFAULT_OUTPUT_MEMORY_USAGE_CSV = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_OUTPUT_MEMORY_USAGE_CSV = \"false\"", "var_name": "DEFAULT_OUTPUT_MEMORY_USAGE_CSV"}, {"original_string": "private static final int DEFAULT_MAX_WEB_SOCKET_EXPECTATIONS = 1500;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_WEB_SOCKET_EXPECTATIONS = 1500", "var_name": "DEFAULT_MAX_WEB_SOCKET_EXPECTATIONS"}, {"original_string": "private static final int DEFAULT_MAX_INITIAL_LINE_LENGTH = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_INITIAL_LINE_LENGTH = Integer.MAX_VALUE", "var_name": "DEFAULT_MAX_INITIAL_LINE_LENGTH"}, {"original_string": "private static final int DEFAULT_MAX_HEADER_SIZE = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_HEADER_SIZE = Integer.MAX_VALUE", "var_name": "DEFAULT_MAX_HEADER_SIZE"}, {"original_string": "private static final int DEFAULT_MAX_CHUNK_SIZE = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_CHUNK_SIZE = Integer.MAX_VALUE", "var_name": "DEFAULT_MAX_CHUNK_SIZE"}, {"original_string": "private static final String DEFAULT_ENABLE_CORS_FOR_API = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ENABLE_CORS_FOR_API = \"false\"", "var_name": "DEFAULT_ENABLE_CORS_FOR_API"}, {"original_string": "private static final String DEFAULT_ENABLE_CORS_FOR_ALL_RESPONSES = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ENABLE_CORS_FOR_ALL_RESPONSES = \"false\"", "var_name": "DEFAULT_ENABLE_CORS_FOR_ALL_RESPONSES"}, {"original_string": "private static final String DEFAULT_PREVENT_CERTIFICATE_DYNAMIC_UPDATE = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PREVENT_CERTIFICATE_DYNAMIC_UPDATE = \"false\"", "var_name": "DEFAULT_PREVENT_CERTIFICATE_DYNAMIC_UPDATE"}, {"original_string": "private static final int DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = 5", "var_name": "DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT"}, {"original_string": "private static final int DEFAULT_ACTION_HANDLER_THREAD_COUNT = Math.max(5, Runtime.getRuntime().availableProcessors());", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_ACTION_HANDLER_THREAD_COUNT = Math.max(5, Runtime.getRuntime().availableProcessors())", "var_name": "DEFAULT_ACTION_HANDLER_THREAD_COUNT"}, {"original_string": "private static final int DEFAULT_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT = 5", "var_name": "DEFAULT_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT"}, {"original_string": "private static final String DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = \"org/mockserver/socket/PKCS8CertificateAuthorityPrivateKey.pem\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = \"org/mockserver/socket/PKCS8CertificateAuthorityPrivateKey.pem\"", "var_name": "DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY"}, {"original_string": "private static final String DEFAULT_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = \"org/mockserver/socket/CertificateAuthorityCertificate.pem\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = \"org/mockserver/socket/CertificateAuthorityCertificate.pem\"", "var_name": "DEFAULT_CERTIFICATE_AUTHORITY_X509_CERTIFICATE"}, {"original_string": "private static final String DEFAULT_MOCKSERVER_DYNAMICALLY_CREATE_CERTIFICATE_AUTHORITY_CERTIFICATE = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_MOCKSERVER_DYNAMICALLY_CREATE_CERTIFICATE_AUTHORITY_CERTIFICATE = \"false\"", "var_name": "DEFAULT_MOCKSERVER_DYNAMICALLY_CREATE_CERTIFICATE_AUTHORITY_CERTIFICATE"}, {"original_string": "private static final String DEFAULT_TLS_MUTUAL_AUTHENTICATION_REQUIRED = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TLS_MUTUAL_AUTHENTICATION_REQUIRED = \"false\"", "var_name": "DEFAULT_TLS_MUTUAL_AUTHENTICATION_REQUIRED"}, {"original_string": "private static final String DEFAULT_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN = \"\"", "var_name": "DEFAULT_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN"}, {"original_string": "private static final String DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE = \"ANY\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE = \"ANY\"", "var_name": "DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE"}, {"original_string": "private static final String DEFAULT_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES = \"\"", "var_name": "DEFAULT_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES"}, {"original_string": "private static final String DEFAULT_FORWARD_PROXY_TLS_PRIVATE_KEY = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FORWARD_PROXY_TLS_PRIVATE_KEY = \"\"", "var_name": "DEFAULT_FORWARD_PROXY_TLS_PRIVATE_KEY"}, {"original_string": "private static final String DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN = \"\"", "var_name": "DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN"}, {"original_string": "private static final String DEFAULT_CORS_ALLOW_HEADERS = \"Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CORS_ALLOW_HEADERS = \"Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization\"", "var_name": "DEFAULT_CORS_ALLOW_HEADERS"}, {"original_string": "private static final String DEFAULT_CORS_ALLOW_METHODS = \"CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH, TRACE\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CORS_ALLOW_METHODS = \"CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH, TRACE\"", "var_name": "DEFAULT_CORS_ALLOW_METHODS"}, {"original_string": "private static final String DEFAULT_CORS_ALLOW_CREDENTIALS = \"true\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CORS_ALLOW_CREDENTIALS = \"true\"", "var_name": "DEFAULT_CORS_ALLOW_CREDENTIALS"}, {"original_string": "private static final int DEFAULT_CORS_MAX_AGE_IN_SECONDS = 300;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CORS_MAX_AGE_IN_SECONDS = 300", "var_name": "DEFAULT_CORS_MAX_AGE_IN_SECONDS"}, {"original_string": "private static final String DEFAULT_LIVENESS_HTTP_GET_PATH = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LIVENESS_HTTP_GET_PATH = \"\"", "var_name": "DEFAULT_LIVENESS_HTTP_GET_PATH"}, {"original_string": "private static final String MOCKSERVER_PROPERTY_FILE = \"mockserver.propertyFile\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_PROPERTY_FILE = \"mockserver.propertyFile\"", "var_name": "MOCKSERVER_PROPERTY_FILE"}, {"original_string": "private static final String MOCKSERVER_ENABLE_CORS_FOR_API = \"mockserver.enableCORSForAPI\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_ENABLE_CORS_FOR_API = \"mockserver.enableCORSForAPI\"", "var_name": "MOCKSERVER_ENABLE_CORS_FOR_API"}, {"original_string": "private static final String MOCKSERVER_ENABLE_CORS_FOR_ALL_RESPONSES = \"mockserver.enableCORSForAllResponses\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_ENABLE_CORS_FOR_ALL_RESPONSES = \"mockserver.enableCORSForAllResponses\"", "var_name": "MOCKSERVER_ENABLE_CORS_FOR_ALL_RESPONSES"}, {"original_string": "private static final String MOCKSERVER_MAX_EXPECTATIONS = \"mockserver.maxExpectations\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_EXPECTATIONS = \"mockserver.maxExpectations\"", "var_name": "MOCKSERVER_MAX_EXPECTATIONS"}, {"original_string": "private static final String MOCKSERVER_MAX_LOG_ENTRIES = \"mockserver.maxLogEntries\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_LOG_ENTRIES = \"mockserver.maxLogEntries\"", "var_name": "MOCKSERVER_MAX_LOG_ENTRIES"}, {"original_string": "private static final String MOCKSERVER_OUTPUT_MEMORY_USAGE_CSV = \"mockserver.outputMemoryUsageCsv\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_OUTPUT_MEMORY_USAGE_CSV = \"mockserver.outputMemoryUsageCsv\"", "var_name": "MOCKSERVER_OUTPUT_MEMORY_USAGE_CSV"}, {"original_string": "private static final String MOCKSERVER_MEMORY_USAGE_DIRECTORY = \"mockserver.memoryUsageCsvDirectory\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MEMORY_USAGE_DIRECTORY = \"mockserver.memoryUsageCsvDirectory\"", "var_name": "MOCKSERVER_MEMORY_USAGE_DIRECTORY"}, {"original_string": "private static final String MOCKSERVER_MAX_WEB_SOCKET_EXPECTATIONS = \"mockserver.maxWebSocketExpectations\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_WEB_SOCKET_EXPECTATIONS = \"mockserver.maxWebSocketExpectations\"", "var_name": "MOCKSERVER_MAX_WEB_SOCKET_EXPECTATIONS"}, {"original_string": "private static final String MOCKSERVER_MAX_INITIAL_LINE_LENGTH = \"mockserver.maxInitialLineLength\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_INITIAL_LINE_LENGTH = \"mockserver.maxInitialLineLength\"", "var_name": "MOCKSERVER_MAX_INITIAL_LINE_LENGTH"}, {"original_string": "private static final String MOCKSERVER_MAX_HEADER_SIZE = \"mockserver.maxHeaderSize\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_HEADER_SIZE = \"mockserver.maxHeaderSize\"", "var_name": "MOCKSERVER_MAX_HEADER_SIZE"}, {"original_string": "private static final String MOCKSERVER_MAX_CHUNK_SIZE = \"mockserver.maxChunkSize\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_CHUNK_SIZE = \"mockserver.maxChunkSize\"", "var_name": "MOCKSERVER_MAX_CHUNK_SIZE"}, {"original_string": "private static final String MOCKSERVER_NIO_EVENT_LOOP_THREAD_COUNT = \"mockserver.nioEventLoopThreadCount\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_NIO_EVENT_LOOP_THREAD_COUNT = \"mockserver.nioEventLoopThreadCount\"", "var_name": "MOCKSERVER_NIO_EVENT_LOOP_THREAD_COUNT"}, {"original_string": "private static final String MOCKSERVER_ACTION_HANDLER_THREAD_COUNT = \"mockserver.actionHandlerThreadCount\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_ACTION_HANDLER_THREAD_COUNT = \"mockserver.actionHandlerThreadCount\"", "var_name": "MOCKSERVER_ACTION_HANDLER_THREAD_COUNT"}, {"original_string": "private static final String MOCKSERVER_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT = \"mockserver.webSocketClientEventLoopThreadCount\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT = \"mockserver.webSocketClientEventLoopThreadCount\"", "var_name": "MOCKSERVER_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT"}, {"original_string": "private static final String MOCKSERVER_MAX_SOCKET_TIMEOUT = \"mockserver.maxSocketTimeout\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_SOCKET_TIMEOUT = \"mockserver.maxSocketTimeout\"", "var_name": "MOCKSERVER_MAX_SOCKET_TIMEOUT"}, {"original_string": "private static final String MOCKSERVER_MAX_FUTURE_TIMEOUT = \"mockserver.maxFutureTimeout\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MAX_FUTURE_TIMEOUT = \"mockserver.maxFutureTimeout\"", "var_name": "MOCKSERVER_MAX_FUTURE_TIMEOUT"}, {"original_string": "private static final String MOCKSERVER_SOCKET_CONNECTION_TIMEOUT = \"mockserver.socketConnectionTimeout\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_SOCKET_CONNECTION_TIMEOUT = \"mockserver.socketConnectionTimeout\"", "var_name": "MOCKSERVER_SOCKET_CONNECTION_TIMEOUT"}, {"original_string": "private static final String MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS = \"mockserver.alwaysCloseSocketConnections\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS = \"mockserver.alwaysCloseSocketConnections\"", "var_name": "MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS"}, {"original_string": "private static final String MOCKSERVER_SSL_CERTIFICATE_DOMAIN_NAME = \"mockserver.sslCertificateDomainName\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_SSL_CERTIFICATE_DOMAIN_NAME = \"mockserver.sslCertificateDomainName\"", "var_name": "MOCKSERVER_SSL_CERTIFICATE_DOMAIN_NAME"}, {"original_string": "private static final String MOCKSERVER_SSL_SUBJECT_ALTERNATIVE_NAME_DOMAINS = \"mockserver.sslSubjectAlternativeNameDomains\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_SSL_SUBJECT_ALTERNATIVE_NAME_DOMAINS = \"mockserver.sslSubjectAlternativeNameDomains\"", "var_name": "MOCKSERVER_SSL_SUBJECT_ALTERNATIVE_NAME_DOMAINS"}, {"original_string": "private static final String MOCKSERVER_SSL_SUBJECT_ALTERNATIVE_NAME_IPS = \"mockserver.sslSubjectAlternativeNameIps\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_SSL_SUBJECT_ALTERNATIVE_NAME_IPS = \"mockserver.sslSubjectAlternativeNameIps\"", "var_name": "MOCKSERVER_SSL_SUBJECT_ALTERNATIVE_NAME_IPS"}, {"original_string": "private static final String MOCKSERVER_USE_BOUNCY_CASTLE_FOR_KEY_AND_CERTIFICATE_GENERATION = \"mockserver.useBouncyCastleForKeyAndCertificateGeneration\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_USE_BOUNCY_CASTLE_FOR_KEY_AND_CERTIFICATE_GENERATION = \"mockserver.useBouncyCastleForKeyAndCertificateGeneration\"", "var_name": "MOCKSERVER_USE_BOUNCY_CASTLE_FOR_KEY_AND_CERTIFICATE_GENERATION"}, {"original_string": "private static final String MOCKSERVER_PREVENT_CERTIFICATE_DYNAMIC_UPDATE = \"mockserver.preventCertificateDynamicUpdate\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_PREVENT_CERTIFICATE_DYNAMIC_UPDATE = \"mockserver.preventCertificateDynamicUpdate\"", "var_name": "MOCKSERVER_PREVENT_CERTIFICATE_DYNAMIC_UPDATE"}, {"original_string": "private static final String MOCKSERVER_CERTIFICATE_AUTHORITY_PRIVATE_KEY = \"mockserver.certificateAuthorityPrivateKey\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_CERTIFICATE_AUTHORITY_PRIVATE_KEY = \"mockserver.certificateAuthorityPrivateKey\"", "var_name": "MOCKSERVER_CERTIFICATE_AUTHORITY_PRIVATE_KEY"}, {"original_string": "private static final String MOCKSERVER_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = \"mockserver.certificateAuthorityCertificate\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = \"mockserver.certificateAuthorityCertificate\"", "var_name": "MOCKSERVER_CERTIFICATE_AUTHORITY_X509_CERTIFICATE"}, {"original_string": "private static final String MOCKSERVER_TLS_PRIVATE_KEY_PATH = \"mockserver.privateKeyPath\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_TLS_PRIVATE_KEY_PATH = \"mockserver.privateKeyPath\"", "var_name": "MOCKSERVER_TLS_PRIVATE_KEY_PATH"}, {"original_string": "private static final String MOCKSERVER_TLS_X509_CERTIFICATE_PATH = \"mockserver.x509CertificatePath\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_TLS_X509_CERTIFICATE_PATH = \"mockserver.x509CertificatePath\"", "var_name": "MOCKSERVER_TLS_X509_CERTIFICATE_PATH"}, {"original_string": "private static final String MOCKSERVER_DYNAMICALLY_CREATE_CERTIFICATE_AUTHORITY_CERTIFICATE = \"mockserver.dynamicallyCreateCertificateAuthorityCertificate\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_DYNAMICALLY_CREATE_CERTIFICATE_AUTHORITY_CERTIFICATE = \"mockserver.dynamicallyCreateCertificateAuthorityCertificate\"", "var_name": "MOCKSERVER_DYNAMICALLY_CREATE_CERTIFICATE_AUTHORITY_CERTIFICATE"}, {"original_string": "private static final String MOCKSERVER_CERTIFICATE_DIRECTORY_TO_SAVE_DYNAMIC_SSL_CERTIFICATE = \"mockserver.directoryToSaveDynamicSSLCertificate\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_CERTIFICATE_DIRECTORY_TO_SAVE_DYNAMIC_SSL_CERTIFICATE = \"mockserver.directoryToSaveDynamicSSLCertificate\"", "var_name": "MOCKSERVER_CERTIFICATE_DIRECTORY_TO_SAVE_DYNAMIC_SSL_CERTIFICATE"}, {"original_string": "private static final String MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_REQUIRED = \"mockserver.tlsMutualAuthenticationRequired\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_REQUIRED = \"mockserver.tlsMutualAuthenticationRequired\"", "var_name": "MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_REQUIRED"}, {"original_string": "private static final String MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN = \"mockserver.tlsMutualAuthenticationCertificateChain\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN = \"mockserver.tlsMutualAuthenticationCertificateChain\"", "var_name": "MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN"}, {"original_string": "private static final String MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE = \"mockserver.forwardProxyTLSX509CertificatesTrustManagerType\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE = \"mockserver.forwardProxyTLSX509CertificatesTrustManagerType\"", "var_name": "MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE"}, {"original_string": "private static final String MOCKSERVER_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES = \"mockserver.forwardProxyTLSCustomTrustX509Certificates\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES = \"mockserver.forwardProxyTLSCustomTrustX509Certificates\"", "var_name": "MOCKSERVER_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES"}, {"original_string": "private static final String MOCKSERVER_FORWARD_PROXY_TLS_PRIVATE_KEY = \"mockserver.forwardProxyPrivateKey\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_PROXY_TLS_PRIVATE_KEY = \"mockserver.forwardProxyPrivateKey\"", "var_name": "MOCKSERVER_FORWARD_PROXY_TLS_PRIVATE_KEY"}, {"original_string": "private static final String MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN = \"mockserver.forwardProxyCertificateChain\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN = \"mockserver.forwardProxyCertificateChain\"", "var_name": "MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN"}, {"original_string": "private static final String MOCKSERVER_LOG_LEVEL = \"mockserver.logLevel\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_LOG_LEVEL = \"mockserver.logLevel\"", "var_name": "MOCKSERVER_LOG_LEVEL"}, {"original_string": "private static final String MOCKSERVER_METRICS_ENABLED = \"mockserver.metricsEnabled\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_METRICS_ENABLED = \"mockserver.metricsEnabled\"", "var_name": "MOCKSERVER_METRICS_ENABLED"}, {"original_string": "private static final String MOCKSERVER_DISABLE_SYSTEM_OUT = \"mockserver.disableSystemOut\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_DISABLE_SYSTEM_OUT = \"mockserver.disableSystemOut\"", "var_name": "MOCKSERVER_DISABLE_SYSTEM_OUT"}, {"original_string": "private static final String MOCKSERVER_DETAILED_MATCH_FAILURES = \"mockserver.detailedMatchFailures\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_DETAILED_MATCH_FAILURES = \"mockserver.detailedMatchFailures\"", "var_name": "MOCKSERVER_DETAILED_MATCH_FAILURES"}, {"original_string": "private static final String MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG = \"mockserver.launchUIForLogLevelDebug\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG = \"mockserver.launchUIForLogLevelDebug\"", "var_name": "MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG"}, {"original_string": "private static final String MOCKSERVER_MATCHERS_FAIL_FAST = \"mockserver.matchersFailFast\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_MATCHERS_FAIL_FAST = \"mockserver.matchersFailFast\"", "var_name": "MOCKSERVER_MATCHERS_FAIL_FAST"}, {"original_string": "private static final String MOCKSERVER_LOCAL_BOUND_IP = \"mockserver.localBoundIP\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_LOCAL_BOUND_IP = \"mockserver.localBoundIP\"", "var_name": "MOCKSERVER_LOCAL_BOUND_IP"}, {"original_string": "private static final String MOCKSERVER_ATTEMPT_TO_PROXY_IF_NO_MATCHING_EXPECTATION = \"mockserver.attemptToProxyIfNoMatchingExpectation\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_ATTEMPT_TO_PROXY_IF_NO_MATCHING_EXPECTATION = \"mockserver.attemptToProxyIfNoMatchingExpectation\"", "var_name": "MOCKSERVER_ATTEMPT_TO_PROXY_IF_NO_MATCHING_EXPECTATION"}, {"original_string": "@Deprecated\n    private static final String MOCKSERVER_HTTP_PROXY = \"mockserver.httpProxy\";", "modifier": "@Deprecated\n    private static final", "type": "String", "declarator": "MOCKSERVER_HTTP_PROXY = \"mockserver.httpProxy\"", "var_name": "MOCKSERVER_HTTP_PROXY"}, {"original_string": "@Deprecated\n    private static final String MOCKSERVER_HTTPS_PROXY = \"mockserver.httpsProxy\";", "modifier": "@Deprecated\n    private static final", "type": "String", "declarator": "MOCKSERVER_HTTPS_PROXY = \"mockserver.httpsProxy\"", "var_name": "MOCKSERVER_HTTPS_PROXY"}, {"original_string": "@Deprecated\n    private static final String MOCKSERVER_SOCKS_PROXY = \"mockserver.socksProxy\";", "modifier": "@Deprecated\n    private static final", "type": "String", "declarator": "MOCKSERVER_SOCKS_PROXY = \"mockserver.socksProxy\"", "var_name": "MOCKSERVER_SOCKS_PROXY"}, {"original_string": "private static final String MOCKSERVER_FORWARD_HTTP_PROXY = \"mockserver.forwardHttpProxy\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_HTTP_PROXY = \"mockserver.forwardHttpProxy\"", "var_name": "MOCKSERVER_FORWARD_HTTP_PROXY"}, {"original_string": "private static final String MOCKSERVER_FORWARD_HTTPS_PROXY = \"mockserver.forwardHttpsProxy\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_HTTPS_PROXY = \"mockserver.forwardHttpsProxy\"", "var_name": "MOCKSERVER_FORWARD_HTTPS_PROXY"}, {"original_string": "private static final String MOCKSERVER_FORWARD_SOCKS_PROXY = \"mockserver.forwardSocksProxy\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_SOCKS_PROXY = \"mockserver.forwardSocksProxy\"", "var_name": "MOCKSERVER_FORWARD_SOCKS_PROXY"}, {"original_string": "private static final String MOCKSERVER_FORWARD_PROXY_AUTHENTICATION_USERNAME = \"mockserver.forwardProxyAuthenticationUsername\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_PROXY_AUTHENTICATION_USERNAME = \"mockserver.forwardProxyAuthenticationUsername\"", "var_name": "MOCKSERVER_FORWARD_PROXY_AUTHENTICATION_USERNAME"}, {"original_string": "private static final String MOCKSERVER_FORWARD_PROXY_AUTHENTICATION_PASSWORD = \"mockserver.forwardProxyAuthenticationPassword\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_FORWARD_PROXY_AUTHENTICATION_PASSWORD = \"mockserver.forwardProxyAuthenticationPassword\"", "var_name": "MOCKSERVER_FORWARD_PROXY_AUTHENTICATION_PASSWORD"}, {"original_string": "private static final String MOCKSERVER_PROXY_SERVER_REALM = \"mockserver.proxyAuthenticationRealm\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_PROXY_SERVER_REALM = \"mockserver.proxyAuthenticationRealm\"", "var_name": "MOCKSERVER_PROXY_SERVER_REALM"}, {"original_string": "private static final String MOCKSERVER_PROXY_AUTHENTICATION_USERNAME = \"mockserver.proxyAuthenticationUsername\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_PROXY_AUTHENTICATION_USERNAME = \"mockserver.proxyAuthenticationUsername\"", "var_name": "MOCKSERVER_PROXY_AUTHENTICATION_USERNAME"}, {"original_string": "private static final String MOCKSERVER_PROXY_AUTHENTICATION_PASSWORD = \"mockserver.proxyAuthenticationPassword\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_PROXY_AUTHENTICATION_PASSWORD = \"mockserver.proxyAuthenticationPassword\"", "var_name": "MOCKSERVER_PROXY_AUTHENTICATION_PASSWORD"}, {"original_string": "private static final String MOCKSERVER_INITIALIZATION_CLASS = \"mockserver.initializationClass\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_INITIALIZATION_CLASS = \"mockserver.initializationClass\"", "var_name": "MOCKSERVER_INITIALIZATION_CLASS"}, {"original_string": "private static final String MOCKSERVER_INITIALIZATION_JSON_PATH = \"mockserver.initializationJsonPath\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_INITIALIZATION_JSON_PATH = \"mockserver.initializationJsonPath\"", "var_name": "MOCKSERVER_INITIALIZATION_JSON_PATH"}, {"original_string": "private static final String MOCKSERVER_WATCH_INITIALIZATION_JSON = \"mockserver.watchInitializationJson\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_WATCH_INITIALIZATION_JSON = \"mockserver.watchInitializationJson\"", "var_name": "MOCKSERVER_WATCH_INITIALIZATION_JSON"}, {"original_string": "private static final String MOCKSERVER_PERSISTED_EXPECTATIONS_PATH = \"mockserver.persistedExpectationsPath\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_PERSISTED_EXPECTATIONS_PATH = \"mockserver.persistedExpectationsPath\"", "var_name": "MOCKSERVER_PERSISTED_EXPECTATIONS_PATH"}, {"original_string": "private static final String MOCKSERVER_PERSIST_EXPECTATIONS = \"mockserver.persistExpectations\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_PERSIST_EXPECTATIONS = \"mockserver.persistExpectations\"", "var_name": "MOCKSERVER_PERSIST_EXPECTATIONS"}, {"original_string": "private static final String MOCKSERVER_CORS_ALLOW_HEADERS = \"mockserver.corsAllowHeaders\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_CORS_ALLOW_HEADERS = \"mockserver.corsAllowHeaders\"", "var_name": "MOCKSERVER_CORS_ALLOW_HEADERS"}, {"original_string": "private static final String MOCKSERVER_CORS_ALLOW_METHODS = \"mockserver.corsAllowMethods\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_CORS_ALLOW_METHODS = \"mockserver.corsAllowMethods\"", "var_name": "MOCKSERVER_CORS_ALLOW_METHODS"}, {"original_string": "private static final String MOCKSERVER_CORS_ALLOW_CREDENTIALS = \"mockserver.corsAllowCredentials\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_CORS_ALLOW_CREDENTIALS = \"mockserver.corsAllowCredentials\"", "var_name": "MOCKSERVER_CORS_ALLOW_CREDENTIALS"}, {"original_string": "private static final String MOCKSERVER_CORS_MAX_AGE_IN_SECONDS = \"mockserver.corsMaxAgeInSeconds\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_CORS_MAX_AGE_IN_SECONDS = \"mockserver.corsMaxAgeInSeconds\"", "var_name": "MOCKSERVER_CORS_MAX_AGE_IN_SECONDS"}, {"original_string": "private static final String MOCKSERVER_LIVENESS_HTTP_GET_PATH = \"mockserver.livenessHttpGetPath\";", "modifier": "private static final", "type": "String", "declarator": "MOCKSERVER_LIVENESS_HTTP_GET_PATH = \"mockserver.livenessHttpGetPath\"", "var_name": "MOCKSERVER_LIVENESS_HTTP_GET_PATH"}, {"original_string": "private static final Properties PROPERTIES = readPropertyFile();", "modifier": "private static final", "type": "Properties", "declarator": "PROPERTIES = readPropertyFile()", "var_name": "PROPERTIES"}, {"original_string": "private static final Set<String> ALL_SUBJECT_ALTERNATIVE_DOMAINS = Sets.newConcurrentHashSet();", "modifier": "private static final", "type": "Set<String>", "declarator": "ALL_SUBJECT_ALTERNATIVE_DOMAINS = Sets.newConcurrentHashSet()", "var_name": "ALL_SUBJECT_ALTERNATIVE_DOMAINS"}, {"original_string": "private static final Set<String> ALL_SUBJECT_ALTERNATIVE_IPS = Sets.newConcurrentHashSet();", "modifier": "private static final", "type": "Set<String>", "declarator": "ALL_SUBJECT_ALTERNATIVE_IPS = Sets.newConcurrentHashSet()", "var_name": "ALL_SUBJECT_ALTERNATIVE_IPS"}, {"original_string": "private static final AtomicBoolean REBUILD_KEY_STORE = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "REBUILD_KEY_STORE = new AtomicBoolean(false)", "var_name": "REBUILD_KEY_STORE"}, {"original_string": "private static final AtomicBoolean REBUILD_SERVER_KEY_STORE = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "REBUILD_SERVER_KEY_STORE = new AtomicBoolean(false)", "var_name": "REBUILD_SERVER_KEY_STORE"}, {"original_string": "private static final IntegerStringListParser INTEGER_STRING_LIST_PARSER = new IntegerStringListParser();", "modifier": "private static final", "type": "IntegerStringListParser", "declarator": "INTEGER_STRING_LIST_PARSER = new IntegerStringListParser()", "var_name": "INTEGER_STRING_LIST_PARSER"}, {"original_string": "private static Map<String, String> slf4jOrJavaLoggerToJavaLoggerLevelMapping;", "modifier": "private static", "type": "Map<String, String>", "declarator": "slf4jOrJavaLoggerToJavaLoggerLevelMapping", "var_name": "slf4jOrJavaLoggerToJavaLoggerLevelMapping"}, {"original_string": "private static Map<String, String> slf4jOrJavaLoggerToSLF4JLevelMapping;", "modifier": "private static", "type": "Map<String, String>", "declarator": "slf4jOrJavaLoggerToSLF4JLevelMapping", "var_name": "slf4jOrJavaLoggerToSLF4JLevelMapping"}, {"original_string": "private static final List<String> forwardProxyTLSX509CertificatesTrustManagerValues = Arrays.stream(ForwardProxyTLSX509CertificatesTrustManager.values()).map(Enum::name).collect(Collectors.toList());", "modifier": "private static final", "type": "List<String>", "declarator": "forwardProxyTLSX509CertificatesTrustManagerValues = Arrays.stream(ForwardProxyTLSX509CertificatesTrustManager.values()).map(Enum::name).collect(Collectors.toList())", "var_name": "forwardProxyTLSX509CertificatesTrustManagerValues"}, {"original_string": "private static MemoryMonitoring memoryMonitoring = new MemoryMonitoring();", "modifier": "private static", "type": "MemoryMonitoring", "declarator": "memoryMonitoring = new MemoryMonitoring()", "var_name": "memoryMonitoring"}, {"original_string": "private static int defaultMaxExpectations = memoryMonitoring.startingMaxExpectations();", "modifier": "private static", "type": "int", "declarator": "defaultMaxExpectations = memoryMonitoring.startingMaxExpectations()", "var_name": "defaultMaxExpectations"}, {"original_string": "private static int defaultMaxLogEntries = memoryMonitoring.startingMaxLogEntries();", "modifier": "private static", "type": "int", "declarator": "defaultMaxLogEntries = memoryMonitoring.startingMaxLogEntries()", "var_name": "defaultMaxLogEntries"}, {"original_string": "private static Level logLevel = Level.valueOf(getSLF4JOrJavaLoggerToSLF4JLevelMapping().get(readPropertyHierarchically(MOCKSERVER_LOG_LEVEL, \"MOCKSERVER_LOG_LEVEL\", DEFAULT_LOG_LEVEL).toUpperCase()));", "modifier": "private static", "type": "Level", "declarator": "logLevel = Level.valueOf(getSLF4JOrJavaLoggerToSLF4JLevelMapping().get(readPropertyHierarchically(MOCKSERVER_LOG_LEVEL, \"MOCKSERVER_LOG_LEVEL\", DEFAULT_LOG_LEVEL).toUpperCase()))", "var_name": "logLevel"}, {"original_string": "private static String javaLoggerLogLevel = getSLF4JOrJavaLoggerToJavaLoggerLevelMapping().get(readPropertyHierarchically(MOCKSERVER_LOG_LEVEL, \"MOCKSERVER_LOG_LEVEL\", DEFAULT_LOG_LEVEL).toUpperCase());", "modifier": "private static", "type": "String", "declarator": "javaLoggerLogLevel = getSLF4JOrJavaLoggerToJavaLoggerLevelMapping().get(readPropertyHierarchically(MOCKSERVER_LOG_LEVEL, \"MOCKSERVER_LOG_LEVEL\", DEFAULT_LOG_LEVEL).toUpperCase())", "var_name": "javaLoggerLogLevel"}, {"original_string": "private static boolean metricsEnabled = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_METRICS_ENABLED, \"MOCKSERVER_METRICS_ENABLED\", \"\" + false));", "modifier": "private static", "type": "boolean", "declarator": "metricsEnabled = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_METRICS_ENABLED, \"MOCKSERVER_METRICS_ENABLED\", \"\" + false))", "var_name": "metricsEnabled"}, {"original_string": "private static boolean disableSystemOut = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_DISABLE_SYSTEM_OUT, \"MOCKSERVER_DISABLE_SYSTEM_OUT\", \"\" + false));", "modifier": "private static", "type": "boolean", "declarator": "disableSystemOut = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_DISABLE_SYSTEM_OUT, \"MOCKSERVER_DISABLE_SYSTEM_OUT\", \"\" + false))", "var_name": "disableSystemOut"}, {"original_string": "private static boolean detailedMatchFailures = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG, \"MOCKSERVER_DETAILED_MATCH_FAILURES\", \"\" + true));", "modifier": "private static", "type": "boolean", "declarator": "detailedMatchFailures = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG, \"MOCKSERVER_DETAILED_MATCH_FAILURES\", \"\" + true))", "var_name": "detailedMatchFailures"}, {"original_string": "private static boolean matchersFailFast = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_DETAILED_MATCH_FAILURES, \"MOCKSERVER_DETAILED_MATCH_FAILURES\", \"\" + true));", "modifier": "private static", "type": "boolean", "declarator": "matchersFailFast = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_DETAILED_MATCH_FAILURES, \"MOCKSERVER_DETAILED_MATCH_FAILURES\", \"\" + true))", "var_name": "matchersFailFast"}, {"original_string": "private static boolean attemptToProxyIfNoMatchingExpectation = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ATTEMPT_TO_PROXY_IF_NO_MATCHING_EXPECTATION, \"MOCKSERVER_ATTEMPT_TO_PROXY_IF_NO_MATCHING_EXPECTATION\", \"\" + true));", "modifier": "private static", "type": "boolean", "declarator": "attemptToProxyIfNoMatchingExpectation = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ATTEMPT_TO_PROXY_IF_NO_MATCHING_EXPECTATION, \"MOCKSERVER_ATTEMPT_TO_PROXY_IF_NO_MATCHING_EXPECTATION\", \"\" + true))", "var_name": "attemptToProxyIfNoMatchingExpectation"}, {"original_string": "private static boolean enableMTLS = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_REQUIRED, \"MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_REQUIRED\", DEFAULT_TLS_MUTUAL_AUTHENTICATION_REQUIRED));", "modifier": "private static", "type": "boolean", "declarator": "enableMTLS = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_REQUIRED, \"MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_REQUIRED\", DEFAULT_TLS_MUTUAL_AUTHENTICATION_REQUIRED))", "var_name": "enableMTLS"}, {"original_string": "private static String tlsMutualAuthenticationCertificateChain = readPropertyHierarchically(MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN, \"MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN\", DEFAULT_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN);", "modifier": "private static", "type": "String", "declarator": "tlsMutualAuthenticationCertificateChain = readPropertyHierarchically(MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN, \"MOCKSERVER_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN\", DEFAULT_TLS_MUTUAL_AUTHENTICATION_CERTIFICATE_CHAIN)", "var_name": "tlsMutualAuthenticationCertificateChain"}, {"original_string": "private static ForwardProxyTLSX509CertificatesTrustManager forwardProxyTLSX509CertificatesTrustManagerType = validateTrustManagerType(readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE, \"MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE\", DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE));", "modifier": "private static", "type": "ForwardProxyTLSX509CertificatesTrustManager", "declarator": "forwardProxyTLSX509CertificatesTrustManagerType = validateTrustManagerType(readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE, \"MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE\", DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATES_TRUST_MANAGER_TYPE))", "var_name": "forwardProxyTLSX509CertificatesTrustManagerType"}, {"original_string": "private static String forwardProxyTLSCustomTrustX509Certificates = readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES, \"MOCKSERVER_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES\", DEFAULT_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES);", "modifier": "private static", "type": "String", "declarator": "forwardProxyTLSCustomTrustX509Certificates = readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES, \"MOCKSERVER_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES\", DEFAULT_FORWARD_PROXY_TLS_CUSTOM_TRUST_X509_CERTIFICATES)", "var_name": "forwardProxyTLSCustomTrustX509Certificates"}, {"original_string": "private static String forwardProxyPrivateKey = readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_PRIVATE_KEY, \"MOCKSERVER_FORWARD_PROXY_TLS_PRIVATE_KEY\", DEFAULT_FORWARD_PROXY_TLS_PRIVATE_KEY);", "modifier": "private static", "type": "String", "declarator": "forwardProxyPrivateKey = readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_PRIVATE_KEY, \"MOCKSERVER_FORWARD_PROXY_TLS_PRIVATE_KEY\", DEFAULT_FORWARD_PROXY_TLS_PRIVATE_KEY)", "var_name": "forwardProxyPrivateKey"}, {"original_string": "private static String forwardProxyCertificateChain = readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN, \"MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN\", DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN);", "modifier": "private static", "type": "String", "declarator": "forwardProxyCertificateChain = readPropertyHierarchically(MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN, \"MOCKSERVER_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN\", DEFAULT_FORWARD_PROXY_TLS_X509_CERTIFICATE_CHAIN)", "var_name": "forwardProxyCertificateChain"}, {"original_string": "private static boolean enableCORSForAPI = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ENABLE_CORS_FOR_API, \"MOCKSERVER_ENABLE_CORS_FOR_API\", DEFAULT_ENABLE_CORS_FOR_API));", "modifier": "private static", "type": "boolean", "declarator": "enableCORSForAPI = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ENABLE_CORS_FOR_API, \"MOCKSERVER_ENABLE_CORS_FOR_API\", DEFAULT_ENABLE_CORS_FOR_API))", "var_name": "enableCORSForAPI"}, {"original_string": "private static boolean enableCORSForAPIHasBeenSetExplicitly = System.getProperty(MOCKSERVER_ENABLE_CORS_FOR_API) != null || PROPERTIES.getProperty(MOCKSERVER_ENABLE_CORS_FOR_API) != null;", "modifier": "private static", "type": "boolean", "declarator": "enableCORSForAPIHasBeenSetExplicitly = System.getProperty(MOCKSERVER_ENABLE_CORS_FOR_API) != null || PROPERTIES.getProperty(MOCKSERVER_ENABLE_CORS_FOR_API) != null", "var_name": "enableCORSForAPIHasBeenSetExplicitly"}, {"original_string": "private static boolean enableCORSForAllResponses = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ENABLE_CORS_FOR_ALL_RESPONSES, \"MOCKSERVER_ENABLE_CORS_FOR_ALL_RESPONSES\", DEFAULT_ENABLE_CORS_FOR_ALL_RESPONSES));", "modifier": "private static", "type": "boolean", "declarator": "enableCORSForAllResponses = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ENABLE_CORS_FOR_ALL_RESPONSES, \"MOCKSERVER_ENABLE_CORS_FOR_ALL_RESPONSES\", DEFAULT_ENABLE_CORS_FOR_ALL_RESPONSES))", "var_name": "enableCORSForAllResponses"}, {"original_string": "private static int maxInitialLineLength = readIntegerProperty(MOCKSERVER_MAX_INITIAL_LINE_LENGTH, \"MOCKSERVER_MAX_INITIAL_LINE_LENGTH\", DEFAULT_MAX_INITIAL_LINE_LENGTH);", "modifier": "private static", "type": "int", "declarator": "maxInitialLineLength = readIntegerProperty(MOCKSERVER_MAX_INITIAL_LINE_LENGTH, \"MOCKSERVER_MAX_INITIAL_LINE_LENGTH\", DEFAULT_MAX_INITIAL_LINE_LENGTH)", "var_name": "maxInitialLineLength"}, {"original_string": "private static int maxHeaderSize = readIntegerProperty(MOCKSERVER_MAX_HEADER_SIZE, \"MOCKSERVER_MAX_HEADER_SIZE\", DEFAULT_MAX_HEADER_SIZE);", "modifier": "private static", "type": "int", "declarator": "maxHeaderSize = readIntegerProperty(MOCKSERVER_MAX_HEADER_SIZE, \"MOCKSERVER_MAX_HEADER_SIZE\", DEFAULT_MAX_HEADER_SIZE)", "var_name": "maxHeaderSize"}, {"original_string": "private static int maxChunkSize = readIntegerProperty(MOCKSERVER_MAX_CHUNK_SIZE, \"MOCKSERVER_MAX_CHUNK_SIZE\", DEFAULT_MAX_CHUNK_SIZE);", "modifier": "private static", "type": "int", "declarator": "maxChunkSize = readIntegerProperty(MOCKSERVER_MAX_CHUNK_SIZE, \"MOCKSERVER_MAX_CHUNK_SIZE\", DEFAULT_MAX_CHUNK_SIZE)", "var_name": "maxChunkSize"}, {"original_string": "private static boolean preventCertificateDynamicUpdate = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_PREVENT_CERTIFICATE_DYNAMIC_UPDATE, \"MOCKSERVER_PREVENT_CERTIFICATE_DYNAMIC_UPDATE\", DEFAULT_PREVENT_CERTIFICATE_DYNAMIC_UPDATE));", "modifier": "private static", "type": "boolean", "declarator": "preventCertificateDynamicUpdate = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_PREVENT_CERTIFICATE_DYNAMIC_UPDATE, \"MOCKSERVER_PREVENT_CERTIFICATE_DYNAMIC_UPDATE\", DEFAULT_PREVENT_CERTIFICATE_DYNAMIC_UPDATE))", "var_name": "preventCertificateDynamicUpdate"}, {"original_string": "private static boolean alwaysCloseConnections = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS, \"MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS\", DEFAULT_MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS));", "modifier": "private static", "type": "boolean", "declarator": "alwaysCloseConnections = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS, \"MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS\", DEFAULT_MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS))", "var_name": "alwaysCloseConnections"}, {"original_string": "private static String livenessHttpGetPath = readPropertyHierarchically(MOCKSERVER_LIVENESS_HTTP_GET_PATH, \"MOCKSERVER_LIVENESS_HTTP_GET_PATH\", DEFAULT_LIVENESS_HTTP_GET_PATH);", "modifier": "private static", "type": "String", "declarator": "livenessHttpGetPath = readPropertyHierarchically(MOCKSERVER_LIVENESS_HTTP_GET_PATH, \"MOCKSERVER_LIVENESS_HTTP_GET_PATH\", DEFAULT_LIVENESS_HTTP_GET_PATH)", "var_name": "livenessHttpGetPath"}], "methods": [{"identifier": "getSLF4JOrJavaLoggerToJavaLoggerLevelMapping", "parameters": "()", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getSLF4JOrJavaLoggerToJavaLoggerLevelMapping()", "full_signature": "private static Map<String, String> getSLF4JOrJavaLoggerToJavaLoggerLevelMapping()", "class_method_signature": "ConfigurationProperties.getSLF4JOrJavaLoggerToJavaLoggerLevelMapping()", "testcase": false, "constructor": false}, {"identifier": "getSLF4JOrJavaLoggerToSLF4JLevelMapping", "parameters": "()", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getSLF4JOrJavaLoggerToSLF4JLevelMapping()", "full_signature": "private static Map<String, String> getSLF4JOrJavaLoggerToSLF4JLevelMapping()", "class_method_signature": "ConfigurationProperties.getSLF4JOrJavaLoggerToSLF4JLevelMapping()", "testcase": false, "constructor": false}, {"identifier": "validateTrustManagerType", "parameters": "(String trustManagerType)", "modifiers": "private static", "return": "ForwardProxyTLSX509CertificatesTrustManager", "signature": "ForwardProxyTLSX509CertificatesTrustManager validateTrustManagerType(String trustManagerType)", "full_signature": "private static ForwardProxyTLSX509CertificatesTrustManager validateTrustManagerType(String trustManagerType)", "class_method_signature": "ConfigurationProperties.validateTrustManagerType(String trustManagerType)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void reset()", "full_signature": "@VisibleForTesting static void reset()", "class_method_signature": "ConfigurationProperties.reset()", "testcase": false, "constructor": false}, {"identifier": "propertyFile", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String propertyFile()", "full_signature": "private static String propertyFile()", "class_method_signature": "ConfigurationProperties.propertyFile()", "testcase": false, "constructor": false}, {"identifier": "defaultMaxExpectations", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int defaultMaxExpectations()", "full_signature": "public static int defaultMaxExpectations()", "class_method_signature": "ConfigurationProperties.defaultMaxExpectations()", "testcase": false, "constructor": false}, {"identifier": "defaultMaxExpectations", "parameters": "(int defaultMaxExpectations)", "modifiers": "public static", "return": "void", "signature": "void defaultMaxExpectations(int defaultMaxExpectations)", "full_signature": "public static void defaultMaxExpectations(int defaultMaxExpectations)", "class_method_signature": "ConfigurationProperties.defaultMaxExpectations(int defaultMaxExpectations)", "testcase": false, "constructor": false}, {"identifier": "maxExpectations", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int maxExpectations()", "full_signature": "public static int maxExpectations()", "class_method_signature": "ConfigurationProperties.maxExpectations()", "testcase": false, "constructor": false}, {"identifier": "maxExpectations", "parameters": "(int count)", "modifiers": "public static", "return": "void", "signature": "void maxExpectations(int count)", "full_signature": "public static void maxExpectations(int count)", "class_method_signature": "ConfigurationProperties.maxExpectations(int count)", "testcase": false, "constructor": false}, {"identifier": "defaultMaxLogEntries", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int defaultMaxLogEntries()", "full_signature": "public static int defaultMaxLogEntries()", "class_method_signature": "ConfigurationProperties.defaultMaxLogEntries()", "testcase": false, "constructor": false}, {"identifier": "defaultMaxLogEntries", "parameters": "(int defaultMaxLogEntries)", "modifiers": "public static", "return": "void", "signature": "void defaultMaxLogEntries(int defaultMaxLogEntries)", "full_signature": "public static void defaultMaxLogEntries(int defaultMaxLogEntries)", "class_method_signature": "ConfigurationProperties.defaultMaxLogEntries(int defaultMaxLogEntries)", "testcase": false, "constructor": false}, {"identifier": "maxLogEntries", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int maxLogEntries()", "full_signature": "public static int maxLogEntries()", "class_method_signature": "ConfigurationProperties.maxLogEntries()", "testcase": false, "constructor": false}, {"identifier": "maxLogEntries", "parameters": "(int count)", "modifiers": "public static", "return": "void", "signature": "void maxLogEntries(int count)", "full_signature": "public static void maxLogEntries(int count)", "class_method_signature": "ConfigurationProperties.maxLogEntries(int count)", "testcase": false, "constructor": false}, {"identifier": "ringBufferSize", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int ringBufferSize()", "full_signature": "public static int ringBufferSize()", "class_method_signature": "ConfigurationProperties.ringBufferSize()", "testcase": false, "constructor": false}, {"identifier": "nextPowerOfTwo", "parameters": "(int value)", "modifiers": "private static", "return": "int", "signature": "int nextPowerOfTwo(int value)", "full_signature": "private static int nextPowerOfTwo(int value)", "class_method_signature": "ConfigurationProperties.nextPowerOfTwo(int value)", "testcase": false, "constructor": false}, {"identifier": "outputMemoryUsageCsv", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean outputMemoryUsageCsv()", "full_signature": "public static boolean outputMemoryUsageCsv()", "class_method_signature": "ConfigurationProperties.outputMemoryUsageCsv()", "testcase": false, "constructor": false}, {"identifier": "outputMemoryUsageCsv", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void outputMemoryUsageCsv(boolean enable)", "full_signature": "public static void outputMemoryUsageCsv(boolean enable)", "class_method_signature": "ConfigurationProperties.outputMemoryUsageCsv(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "memoryUsageCsvDirectory", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String memoryUsageCsvDirectory()", "full_signature": "public static String memoryUsageCsvDirectory()", "class_method_signature": "ConfigurationProperties.memoryUsageCsvDirectory()", "testcase": false, "constructor": false}, {"identifier": "memoryUsageCsvDirectory", "parameters": "(String directory)", "modifiers": "public static", "return": "void", "signature": "void memoryUsageCsvDirectory(String directory)", "full_signature": "public static void memoryUsageCsvDirectory(String directory)", "class_method_signature": "ConfigurationProperties.memoryUsageCsvDirectory(String directory)", "testcase": false, "constructor": false}, {"identifier": "maxWebSocketExpectations", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int maxWebSocketExpectations()", "full_signature": "public static int maxWebSocketExpectations()", "class_method_signature": "ConfigurationProperties.maxWebSocketExpectations()", "testcase": false, "constructor": false}, {"identifier": "maxWebSocketExpectations", "parameters": "(int count)", "modifiers": "public static", "return": "void", "signature": "void maxWebSocketExpectations(int count)", "full_signature": "public static void maxWebSocketExpectations(int count)", "class_method_signature": "ConfigurationProperties.maxWebSocketExpectations(int count)", "testcase": false, "constructor": false}, {"identifier": "maxInitialLineLength", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int maxInitialLineLength()", "full_signature": "public static int maxInitialLineLength()", "class_method_signature": "ConfigurationProperties.maxInitialLineLength()", "testcase": false, "constructor": false}, {"identifier": "maxInitialLineLength", "parameters": "(int length)", "modifiers": "public static", "return": "void", "signature": "void maxInitialLineLength(int length)", "full_signature": "public static void maxInitialLineLength(int length)", "class_method_signature": "ConfigurationProperties.maxInitialLineLength(int length)", "testcase": false, "constructor": false}, {"identifier": "maxHeaderSize", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int maxHeaderSize()", "full_signature": "public static int maxHeaderSize()", "class_method_signature": "ConfigurationProperties.maxHeaderSize()", "testcase": false, "constructor": false}, {"identifier": "maxHeaderSize", "parameters": "(int size)", "modifiers": "public static", "return": "void", "signature": "void maxHeaderSize(int size)", "full_signature": "public static void maxHeaderSize(int size)", "class_method_signature": "ConfigurationProperties.maxHeaderSize(int size)", "testcase": false, "constructor": false}, {"identifier": "maxChunkSize", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int maxChunkSize()", "full_signature": "public static int maxChunkSize()", "class_method_signature": "ConfigurationProperties.maxChunkSize()", "testcase": false, "constructor": false}, {"identifier": "maxChunkSize", "parameters": "(int size)", "modifiers": "public static", "return": "void", "signature": "void maxChunkSize(int size)", "full_signature": "public static void maxChunkSize(int size)", "class_method_signature": "ConfigurationProperties.maxChunkSize(int size)", "testcase": false, "constructor": false}, {"identifier": "nioEventLoopThreadCount", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int nioEventLoopThreadCount()", "full_signature": "public static int nioEventLoopThreadCount()", "class_method_signature": "ConfigurationProperties.nioEventLoopThreadCount()", "testcase": false, "constructor": false}, {"identifier": "nioEventLoopThreadCount", "parameters": "(int count)", "modifiers": "public static", "return": "void", "signature": "void nioEventLoopThreadCount(int count)", "full_signature": "public static void nioEventLoopThreadCount(int count)", "class_method_signature": "ConfigurationProperties.nioEventLoopThreadCount(int count)", "testcase": false, "constructor": false}, {"identifier": "actionHandlerThreadCount", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int actionHandlerThreadCount()", "full_signature": "public static int actionHandlerThreadCount()", "class_method_signature": "ConfigurationProperties.actionHandlerThreadCount()", "testcase": false, "constructor": false}, {"identifier": "actionHandlerThreadCount", "parameters": "(int count)", "modifiers": "public static", "return": "void", "signature": "void actionHandlerThreadCount(int count)", "full_signature": "public static void actionHandlerThreadCount(int count)", "class_method_signature": "ConfigurationProperties.actionHandlerThreadCount(int count)", "testcase": false, "constructor": false}, {"identifier": "webSocketClientEventLoopThreadCount", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int webSocketClientEventLoopThreadCount()", "full_signature": "public static int webSocketClientEventLoopThreadCount()", "class_method_signature": "ConfigurationProperties.webSocketClientEventLoopThreadCount()", "testcase": false, "constructor": false}, {"identifier": "webSocketClientEventLoopThreadCount", "parameters": "(int count)", "modifiers": "public static", "return": "void", "signature": "void webSocketClientEventLoopThreadCount(int count)", "full_signature": "public static void webSocketClientEventLoopThreadCount(int count)", "class_method_signature": "ConfigurationProperties.webSocketClientEventLoopThreadCount(int count)", "testcase": false, "constructor": false}, {"identifier": "maxSocketTimeout", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long maxSocketTimeout()", "full_signature": "public static long maxSocketTimeout()", "class_method_signature": "ConfigurationProperties.maxSocketTimeout()", "testcase": false, "constructor": false}, {"identifier": "maxSocketTimeout", "parameters": "(long milliseconds)", "modifiers": "public static", "return": "void", "signature": "void maxSocketTimeout(long milliseconds)", "full_signature": "public static void maxSocketTimeout(long milliseconds)", "class_method_signature": "ConfigurationProperties.maxSocketTimeout(long milliseconds)", "testcase": false, "constructor": false}, {"identifier": "maxFutureTimeout", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long maxFutureTimeout()", "full_signature": "public static long maxFutureTimeout()", "class_method_signature": "ConfigurationProperties.maxFutureTimeout()", "testcase": false, "constructor": false}, {"identifier": "maxFutureTimeout", "parameters": "(long milliseconds)", "modifiers": "public static", "return": "void", "signature": "void maxFutureTimeout(long milliseconds)", "full_signature": "public static void maxFutureTimeout(long milliseconds)", "class_method_signature": "ConfigurationProperties.maxFutureTimeout(long milliseconds)", "testcase": false, "constructor": false}, {"identifier": "socketConnectionTimeout", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int socketConnectionTimeout()", "full_signature": "public static int socketConnectionTimeout()", "class_method_signature": "ConfigurationProperties.socketConnectionTimeout()", "testcase": false, "constructor": false}, {"identifier": "socketConnectionTimeout", "parameters": "(int milliseconds)", "modifiers": "public static", "return": "void", "signature": "void socketConnectionTimeout(int milliseconds)", "full_signature": "public static void socketConnectionTimeout(int milliseconds)", "class_method_signature": "ConfigurationProperties.socketConnectionTimeout(int milliseconds)", "testcase": false, "constructor": false}, {"identifier": "alwaysCloseSocketConnections", "parameters": "(boolean alwaysClose)", "modifiers": "public static", "return": "void", "signature": "void alwaysCloseSocketConnections(boolean alwaysClose)", "full_signature": "public static void alwaysCloseSocketConnections(boolean alwaysClose)", "class_method_signature": "ConfigurationProperties.alwaysCloseSocketConnections(boolean alwaysClose)", "testcase": false, "constructor": false}, {"identifier": "alwaysCloseSocketConnections", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean alwaysCloseSocketConnections()", "full_signature": "public static boolean alwaysCloseSocketConnections()", "class_method_signature": "ConfigurationProperties.alwaysCloseSocketConnections()", "testcase": false, "constructor": false}, {"identifier": "sslCertificateDomainName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String sslCertificateDomainName()", "full_signature": "public static String sslCertificateDomainName()", "class_method_signature": "ConfigurationProperties.sslCertificateDomainName()", "testcase": false, "constructor": false}, {"identifier": "sslCertificateDomainName", "parameters": "(String domainName)", "modifiers": "public static", "return": "void", "signature": "void sslCertificateDomainName(String domainName)", "full_signature": "public static void sslCertificateDomainName(String domainName)", "class_method_signature": "ConfigurationProperties.sslCertificateDomainName(String domainName)", "testcase": false, "constructor": false}, {"identifier": "addSubjectAlternativeName", "parameters": "(String host)", "modifiers": "@SuppressWarnings(\"UnstableApiUsage\") public static", "return": "void", "signature": "void addSubjectAlternativeName(String host)", "full_signature": "@SuppressWarnings(\"UnstableApiUsage\") public static void addSubjectAlternativeName(String host)", "class_method_signature": "ConfigurationProperties.addSubjectAlternativeName(String host)", "testcase": false, "constructor": false}, {"identifier": "sslSubjectAlternativeNameDomains", "parameters": "()", "modifiers": "public static", "return": "String[]", "signature": "String[] sslSubjectAlternativeNameDomains()", "full_signature": "public static String[] sslSubjectAlternativeNameDomains()", "class_method_signature": "ConfigurationProperties.sslSubjectAlternativeNameDomains()", "testcase": false, "constructor": false}, {"identifier": "addSslSubjectAlternativeNameDomains", "parameters": "(String... additionalSubjectAlternativeNameDomains)", "modifiers": "public static", "return": "void", "signature": "void addSslSubjectAlternativeNameDomains(String... additionalSubjectAlternativeNameDomains)", "full_signature": "public static void addSslSubjectAlternativeNameDomains(String... additionalSubjectAlternativeNameDomains)", "class_method_signature": "ConfigurationProperties.addSslSubjectAlternativeNameDomains(String... additionalSubjectAlternativeNameDomains)", "testcase": false, "constructor": false}, {"identifier": "clearSslSubjectAlternativeNameDomains", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearSslSubjectAlternativeNameDomains()", "full_signature": "public static void clearSslSubjectAlternativeNameDomains()", "class_method_signature": "ConfigurationProperties.clearSslSubjectAlternativeNameDomains()", "testcase": false, "constructor": false}, {"identifier": "containsSslSubjectAlternativeName", "parameters": "(String domainOrIp)", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "boolean", "signature": "boolean containsSslSubjectAlternativeName(String domainOrIp)", "full_signature": "@SuppressWarnings(\"unused\") public static boolean containsSslSubjectAlternativeName(String domainOrIp)", "class_method_signature": "ConfigurationProperties.containsSslSubjectAlternativeName(String domainOrIp)", "testcase": false, "constructor": false}, {"identifier": "sslSubjectAlternativeNameIps", "parameters": "()", "modifiers": "public static", "return": "String[]", "signature": "String[] sslSubjectAlternativeNameIps()", "full_signature": "public static String[] sslSubjectAlternativeNameIps()", "class_method_signature": "ConfigurationProperties.sslSubjectAlternativeNameIps()", "testcase": false, "constructor": false}, {"identifier": "addSslSubjectAlternativeNameIps", "parameters": "(String... additionalSubjectAlternativeNameIps)", "modifiers": "public static", "return": "void", "signature": "void addSslSubjectAlternativeNameIps(String... additionalSubjectAlternativeNameIps)", "full_signature": "public static void addSslSubjectAlternativeNameIps(String... additionalSubjectAlternativeNameIps)", "class_method_signature": "ConfigurationProperties.addSslSubjectAlternativeNameIps(String... additionalSubjectAlternativeNameIps)", "testcase": false, "constructor": false}, {"identifier": "clearSslSubjectAlternativeNameIps", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearSslSubjectAlternativeNameIps()", "full_signature": "public static void clearSslSubjectAlternativeNameIps()", "class_method_signature": "ConfigurationProperties.clearSslSubjectAlternativeNameIps()", "testcase": false, "constructor": false}, {"identifier": "rebuildTLSContext", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean rebuildTLSContext()", "full_signature": "public static boolean rebuildTLSContext()", "class_method_signature": "ConfigurationProperties.rebuildTLSContext()", "testcase": false, "constructor": false}, {"identifier": "rebuildTLSContext", "parameters": "(boolean rebuildTLSContext)", "modifiers": "public static", "return": "void", "signature": "void rebuildTLSContext(boolean rebuildTLSContext)", "full_signature": "public static void rebuildTLSContext(boolean rebuildTLSContext)", "class_method_signature": "ConfigurationProperties.rebuildTLSContext(boolean rebuildTLSContext)", "testcase": false, "constructor": false}, {"identifier": "rebuildServerTLSContext", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean rebuildServerTLSContext()", "full_signature": "public static boolean rebuildServerTLSContext()", "class_method_signature": "ConfigurationProperties.rebuildServerTLSContext()", "testcase": false, "constructor": false}, {"identifier": "rebuildServerTLSContext", "parameters": "(boolean rebuildServerTLSContext)", "modifiers": "public static", "return": "void", "signature": "void rebuildServerTLSContext(boolean rebuildServerTLSContext)", "full_signature": "public static void rebuildServerTLSContext(boolean rebuildServerTLSContext)", "class_method_signature": "ConfigurationProperties.rebuildServerTLSContext(boolean rebuildServerTLSContext)", "testcase": false, "constructor": false}, {"identifier": "useBouncyCastleForKeyAndCertificateGeneration", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void useBouncyCastleForKeyAndCertificateGeneration(boolean enable)", "full_signature": "public static void useBouncyCastleForKeyAndCertificateGeneration(boolean enable)", "class_method_signature": "ConfigurationProperties.useBouncyCastleForKeyAndCertificateGeneration(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "useBouncyCastleForKeyAndCertificateGeneration", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean useBouncyCastleForKeyAndCertificateGeneration()", "full_signature": "public static boolean useBouncyCastleForKeyAndCertificateGeneration()", "class_method_signature": "ConfigurationProperties.useBouncyCastleForKeyAndCertificateGeneration()", "testcase": false, "constructor": false}, {"identifier": "preventCertificateDynamicUpdate", "parameters": "(boolean prevent)", "modifiers": "public static", "return": "void", "signature": "void preventCertificateDynamicUpdate(boolean prevent)", "full_signature": "public static void preventCertificateDynamicUpdate(boolean prevent)", "class_method_signature": "ConfigurationProperties.preventCertificateDynamicUpdate(boolean prevent)", "testcase": false, "constructor": false}, {"identifier": "preventCertificateDynamicUpdate", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean preventCertificateDynamicUpdate()", "full_signature": "public static boolean preventCertificateDynamicUpdate()", "class_method_signature": "ConfigurationProperties.preventCertificateDynamicUpdate()", "testcase": false, "constructor": false}, {"identifier": "certificateAuthorityPrivateKey", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String certificateAuthorityPrivateKey()", "full_signature": "public static String certificateAuthorityPrivateKey()", "class_method_signature": "ConfigurationProperties.certificateAuthorityPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "certificateAuthorityPrivateKey", "parameters": "(String certificateAuthorityPrivateKey)", "modifiers": "public static", "return": "void", "signature": "void certificateAuthorityPrivateKey(String certificateAuthorityPrivateKey)", "full_signature": "public static void certificateAuthorityPrivateKey(String certificateAuthorityPrivateKey)", "class_method_signature": "ConfigurationProperties.certificateAuthorityPrivateKey(String certificateAuthorityPrivateKey)", "testcase": false, "constructor": false}, {"identifier": "certificateAuthorityCertificate", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String certificateAuthorityCertificate()", "full_signature": "public static String certificateAuthorityCertificate()", "class_method_signature": "ConfigurationProperties.certificateAuthorityCertificate()", "testcase": false, "constructor": false}, {"identifier": "certificateAuthorityCertificate", "parameters": "(String certificateAuthorityCertificate)", "modifiers": "public static", "return": "void", "signature": "void certificateAuthorityCertificate(String certificateAuthorityCertificate)", "full_signature": "public static void certificateAuthorityCertificate(String certificateAuthorityCertificate)", "class_method_signature": "ConfigurationProperties.certificateAuthorityCertificate(String certificateAuthorityCertificate)", "testcase": false, "constructor": false}, {"identifier": "dynamicallyCreateCertificateAuthorityCertificate", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean dynamicallyCreateCertificateAuthorityCertificate()", "full_signature": "public static boolean dynamicallyCreateCertificateAuthorityCertificate()", "class_method_signature": "ConfigurationProperties.dynamicallyCreateCertificateAuthorityCertificate()", "testcase": false, "constructor": false}, {"identifier": "dynamicallyCreateCertificateAuthorityCertificate", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void dynamicallyCreateCertificateAuthorityCertificate(boolean enable)", "full_signature": "public static void dynamicallyCreateCertificateAuthorityCertificate(boolean enable)", "class_method_signature": "ConfigurationProperties.dynamicallyCreateCertificateAuthorityCertificate(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "directoryToSaveDynamicSSLCertificate", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String directoryToSaveDynamicSSLCertificate()", "full_signature": "public static String directoryToSaveDynamicSSLCertificate()", "class_method_signature": "ConfigurationProperties.directoryToSaveDynamicSSLCertificate()", "testcase": false, "constructor": false}, {"identifier": "directoryToSaveDynamicSSLCertificate", "parameters": "(String directoryToSaveDynamicSSLCertificate)", "modifiers": "public static", "return": "void", "signature": "void directoryToSaveDynamicSSLCertificate(String directoryToSaveDynamicSSLCertificate)", "full_signature": "public static void directoryToSaveDynamicSSLCertificate(String directoryToSaveDynamicSSLCertificate)", "class_method_signature": "ConfigurationProperties.directoryToSaveDynamicSSLCertificate(String directoryToSaveDynamicSSLCertificate)", "testcase": false, "constructor": false}, {"identifier": "privateKeyPath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String privateKeyPath()", "full_signature": "public static String privateKeyPath()", "class_method_signature": "ConfigurationProperties.privateKeyPath()", "testcase": false, "constructor": false}, {"identifier": "privateKeyPath", "parameters": "(String privateKeyPath)", "modifiers": "public static", "return": "void", "signature": "void privateKeyPath(String privateKeyPath)", "full_signature": "public static void privateKeyPath(String privateKeyPath)", "class_method_signature": "ConfigurationProperties.privateKeyPath(String privateKeyPath)", "testcase": false, "constructor": false}, {"identifier": "x509CertificatePath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String x509CertificatePath()", "full_signature": "public static String x509CertificatePath()", "class_method_signature": "ConfigurationProperties.x509CertificatePath()", "testcase": false, "constructor": false}, {"identifier": "x509CertificatePath", "parameters": "(String x509CertificatePath)", "modifiers": "public static", "return": "void", "signature": "void x509CertificatePath(String x509CertificatePath)", "full_signature": "public static void x509CertificatePath(String x509CertificatePath)", "class_method_signature": "ConfigurationProperties.x509CertificatePath(String x509CertificatePath)", "testcase": false, "constructor": false}, {"identifier": "tlsMutualAuthenticationRequired", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean tlsMutualAuthenticationRequired()", "full_signature": "public static boolean tlsMutualAuthenticationRequired()", "class_method_signature": "ConfigurationProperties.tlsMutualAuthenticationRequired()", "testcase": false, "constructor": false}, {"identifier": "tlsMutualAuthenticationRequired", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void tlsMutualAuthenticationRequired(boolean enable)", "full_signature": "public static void tlsMutualAuthenticationRequired(boolean enable)", "class_method_signature": "ConfigurationProperties.tlsMutualAuthenticationRequired(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "tlsMutualAuthenticationCertificateChain", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String tlsMutualAuthenticationCertificateChain()", "full_signature": "public static String tlsMutualAuthenticationCertificateChain()", "class_method_signature": "ConfigurationProperties.tlsMutualAuthenticationCertificateChain()", "testcase": false, "constructor": false}, {"identifier": "tlsMutualAuthenticationCertificateChain", "parameters": "(String trustCertificateChain)", "modifiers": "public static", "return": "void", "signature": "void tlsMutualAuthenticationCertificateChain(String trustCertificateChain)", "full_signature": "public static void tlsMutualAuthenticationCertificateChain(String trustCertificateChain)", "class_method_signature": "ConfigurationProperties.tlsMutualAuthenticationCertificateChain(String trustCertificateChain)", "testcase": false, "constructor": false}, {"identifier": "forwardProxyTLSX509CertificatesTrustManagerType", "parameters": "()", "modifiers": "public static", "return": "ForwardProxyTLSX509CertificatesTrustManager", "signature": "ForwardProxyTLSX509CertificatesTrustManager forwardProxyTLSX509CertificatesTrustManagerType()", "full_signature": "public static ForwardProxyTLSX509CertificatesTrustManager forwardProxyTLSX509CertificatesTrustManagerType()", "class_method_signature": "ConfigurationProperties.forwardProxyTLSX509CertificatesTrustManagerType()", "testcase": false, "constructor": false}, {"identifier": "forwardProxyTLSX509CertificatesTrustManagerType", "parameters": "(String trustManagerType)", "modifiers": "public static", "return": "void", "signature": "void forwardProxyTLSX509CertificatesTrustManagerType(String trustManagerType)", "full_signature": "public static void forwardProxyTLSX509CertificatesTrustManagerType(String trustManagerType)", "class_method_signature": "ConfigurationProperties.forwardProxyTLSX509CertificatesTrustManagerType(String trustManagerType)", "testcase": false, "constructor": false}, {"identifier": "forwardProxyTLSCustomTrustX509Certificates", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String forwardProxyTLSCustomTrustX509Certificates()", "full_signature": "public static String forwardProxyTLSCustomTrustX509Certificates()", "class_method_signature": "ConfigurationProperties.forwardProxyTLSCustomTrustX509Certificates()", "testcase": false, "constructor": false}, {"identifier": "forwardProxyTLSCustomTrustX509Certificates", "parameters": "(String customX509Certificates)", "modifiers": "public static", "return": "void", "signature": "void forwardProxyTLSCustomTrustX509Certificates(String customX509Certificates)", "full_signature": "public static void forwardProxyTLSCustomTrustX509Certificates(String customX509Certificates)", "class_method_signature": "ConfigurationProperties.forwardProxyTLSCustomTrustX509Certificates(String customX509Certificates)", "testcase": false, "constructor": false}, {"identifier": "forwardProxyPrivateKey", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String forwardProxyPrivateKey()", "full_signature": "public static String forwardProxyPrivateKey()", "class_method_signature": "ConfigurationProperties.forwardProxyPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "forwardProxyPrivateKey", "parameters": "(String privateKey)", "modifiers": "public static", "return": "void", "signature": "void forwardProxyPrivateKey(String privateKey)", "full_signature": "public static void forwardProxyPrivateKey(String privateKey)", "class_method_signature": "ConfigurationProperties.forwardProxyPrivateKey(String privateKey)", "testcase": false, "constructor": false}, {"identifier": "forwardProxyCertificateChain", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String forwardProxyCertificateChain()", "full_signature": "public static String forwardProxyCertificateChain()", "class_method_signature": "ConfigurationProperties.forwardProxyCertificateChain()", "testcase": false, "constructor": false}, {"identifier": "forwardProxyCertificateChain", "parameters": "(String certificateChain)", "modifiers": "public static", "return": "void", "signature": "void forwardProxyCertificateChain(String certificateChain)", "full_signature": "public static void forwardProxyCertificateChain(String certificateChain)", "class_method_signature": "ConfigurationProperties.forwardProxyCertificateChain(String certificateChain)", "testcase": false, "constructor": false}, {"identifier": "logLevel", "parameters": "()", "modifiers": "public static", "return": "Level", "signature": "Level logLevel()", "full_signature": "public static Level logLevel()", "class_method_signature": "ConfigurationProperties.logLevel()", "testcase": false, "constructor": false}, {"identifier": "javaLoggerLogLevel", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String javaLoggerLogLevel()", "full_signature": "public static String javaLoggerLogLevel()", "class_method_signature": "ConfigurationProperties.javaLoggerLogLevel()", "testcase": false, "constructor": false}, {"identifier": "logLevel", "parameters": "(String level)", "modifiers": "public static", "return": "void", "signature": "void logLevel(String level)", "full_signature": "public static void logLevel(String level)", "class_method_signature": "ConfigurationProperties.logLevel(String level)", "testcase": false, "constructor": false}, {"identifier": "disableSystemOut", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean disableSystemOut()", "full_signature": "public static boolean disableSystemOut()", "class_method_signature": "ConfigurationProperties.disableSystemOut()", "testcase": false, "constructor": false}, {"identifier": "disableSystemOut", "parameters": "(boolean disable)", "modifiers": "public static", "return": "void", "signature": "void disableSystemOut(boolean disable)", "full_signature": "public static void disableSystemOut(boolean disable)", "class_method_signature": "ConfigurationProperties.disableSystemOut(boolean disable)", "testcase": false, "constructor": false}, {"identifier": "detailedMatchFailures", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean detailedMatchFailures()", "full_signature": "public static boolean detailedMatchFailures()", "class_method_signature": "ConfigurationProperties.detailedMatchFailures()", "testcase": false, "constructor": false}, {"identifier": "detailedMatchFailures", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void detailedMatchFailures(boolean enable)", "full_signature": "public static void detailedMatchFailures(boolean enable)", "class_method_signature": "ConfigurationProperties.detailedMatchFailures(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "launchUIForLogLevelDebug", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean launchUIForLogLevelDebug()", "full_signature": "public static boolean launchUIForLogLevelDebug()", "class_method_signature": "ConfigurationProperties.launchUIForLogLevelDebug()", "testcase": false, "constructor": false}, {"identifier": "launchUIForLogLevelDebug", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void launchUIForLogLevelDebug(boolean enable)", "full_signature": "public static void launchUIForLogLevelDebug(boolean enable)", "class_method_signature": "ConfigurationProperties.launchUIForLogLevelDebug(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "matchersFailFast", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean matchersFailFast()", "full_signature": "public static boolean matchersFailFast()", "class_method_signature": "ConfigurationProperties.matchersFailFast()", "testcase": false, "constructor": false}, {"identifier": "matchersFailFast", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void matchersFailFast(boolean enable)", "full_signature": "public static void matchersFailFast(boolean enable)", "class_method_signature": "ConfigurationProperties.matchersFailFast(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "metricsEnabled", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean metricsEnabled()", "full_signature": "public static boolean metricsEnabled()", "class_method_signature": "ConfigurationProperties.metricsEnabled()", "testcase": false, "constructor": false}, {"identifier": "metricsEnabled", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void metricsEnabled(boolean enable)", "full_signature": "public static void metricsEnabled(boolean enable)", "class_method_signature": "ConfigurationProperties.metricsEnabled(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "localBoundIP", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String localBoundIP()", "full_signature": "public static String localBoundIP()", "class_method_signature": "ConfigurationProperties.localBoundIP()", "testcase": false, "constructor": false}, {"identifier": "localBoundIP", "parameters": "(String localBoundIP)", "modifiers": "@SuppressWarnings(\"UnstableApiUsage\") public static", "return": "void", "signature": "void localBoundIP(String localBoundIP)", "full_signature": "@SuppressWarnings(\"UnstableApiUsage\") public static void localBoundIP(String localBoundIP)", "class_method_signature": "ConfigurationProperties.localBoundIP(String localBoundIP)", "testcase": false, "constructor": false}, {"identifier": "attemptToProxyIfNoMatchingExpectation", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean attemptToProxyIfNoMatchingExpectation()", "full_signature": "public static boolean attemptToProxyIfNoMatchingExpectation()", "class_method_signature": "ConfigurationProperties.attemptToProxyIfNoMatchingExpectation()", "testcase": false, "constructor": false}, {"identifier": "attemptToProxyIfNoMatchingExpectation", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void attemptToProxyIfNoMatchingExpectation(boolean enable)", "full_signature": "public static void attemptToProxyIfNoMatchingExpectation(boolean enable)", "class_method_signature": "ConfigurationProperties.attemptToProxyIfNoMatchingExpectation(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "httpProxy", "parameters": "()", "modifiers": "@Deprecated public static", "return": "InetSocketAddress", "signature": "InetSocketAddress httpProxy()", "full_signature": "@Deprecated public static InetSocketAddress httpProxy()", "class_method_signature": "ConfigurationProperties.httpProxy()", "testcase": false, "constructor": false}, {"identifier": "httpProxy", "parameters": "(String hostAndPort)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void httpProxy(String hostAndPort)", "full_signature": "@Deprecated public static void httpProxy(String hostAndPort)", "class_method_signature": "ConfigurationProperties.httpProxy(String hostAndPort)", "testcase": false, "constructor": false}, {"identifier": "httpsProxy", "parameters": "()", "modifiers": "@Deprecated public static", "return": "InetSocketAddress", "signature": "InetSocketAddress httpsProxy()", "full_signature": "@Deprecated public static InetSocketAddress httpsProxy()", "class_method_signature": "ConfigurationProperties.httpsProxy()", "testcase": false, "constructor": false}, {"identifier": "httpsProxy", "parameters": "(String hostAndPort)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void httpsProxy(String hostAndPort)", "full_signature": "@Deprecated public static void httpsProxy(String hostAndPort)", "class_method_signature": "ConfigurationProperties.httpsProxy(String hostAndPort)", "testcase": false, "constructor": false}, {"identifier": "socksProxy", "parameters": "()", "modifiers": "@Deprecated public static", "return": "InetSocketAddress", "signature": "InetSocketAddress socksProxy()", "full_signature": "@Deprecated public static InetSocketAddress socksProxy()", "class_method_signature": "ConfigurationProperties.socksProxy()", "testcase": false, "constructor": false}, {"identifier": "socksProxy", "parameters": "(String hostAndPort)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void socksProxy(String hostAndPort)", "full_signature": "@Deprecated public static void socksProxy(String hostAndPort)", "class_method_signature": "ConfigurationProperties.socksProxy(String hostAndPort)", "testcase": false, "constructor": false}, {"identifier": "forwardHttpProxy", "parameters": "()", "modifiers": "public static", "return": "InetSocketAddress", "signature": "InetSocketAddress forwardHttpProxy()", "full_signature": "public static InetSocketAddress forwardHttpProxy()", "class_method_signature": "ConfigurationProperties.forwardHttpProxy()", "testcase": false, "constructor": false}, {"identifier": "forwardHttpProxy", "parameters": "(String hostAndPort)", "modifiers": "public static", "return": "void", "signature": "void forwardHttpProxy(String hostAndPort)", "full_signature": "public static void forwardHttpProxy(String hostAndPort)", "class_method_signature": "ConfigurationProperties.forwardHttpProxy(String hostAndPort)", "testcase": false, "constructor": false}, {"identifier": "forwardHttpsProxy", "parameters": "()", "modifiers": "public static", "return": "InetSocketAddress", "signature": "InetSocketAddress forwardHttpsProxy()", "full_signature": "public static InetSocketAddress forwardHttpsProxy()", "class_method_signature": "ConfigurationProperties.forwardHttpsProxy()", "testcase": false, "constructor": false}, {"identifier": "forwardHttpsProxy", "parameters": "(String hostAndPort)", "modifiers": "public static", "return": "void", "signature": "void forwardHttpsProxy(String hostAndPort)", "full_signature": "public static void forwardHttpsProxy(String hostAndPort)", "class_method_signature": "ConfigurationProperties.forwardHttpsProxy(String hostAndPort)", "testcase": false, "constructor": false}, {"identifier": "forwardSocksProxy", "parameters": "()", "modifiers": "public static", "return": "InetSocketAddress", "signature": "InetSocketAddress forwardSocksProxy()", "full_signature": "public static InetSocketAddress forwardSocksProxy()", "class_method_signature": "ConfigurationProperties.forwardSocksProxy()", "testcase": false, "constructor": false}, {"identifier": "forwardSocksProxy", "parameters": "(String hostAndPort)", "modifiers": "public static", "return": "void", "signature": "void forwardSocksProxy(String hostAndPort)", "full_signature": "public static void forwardSocksProxy(String hostAndPort)", "class_method_signature": "ConfigurationProperties.forwardSocksProxy(String hostAndPort)", "testcase": false, "constructor": false}, {"identifier": "forwardProxyAuthenticationUsername", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String forwardProxyAuthenticationUsername()", "full_signature": "public static String forwardProxyAuthenticationUsername()", "class_method_signature": "ConfigurationProperties.forwardProxyAuthenticationUsername()", "testcase": false, "constructor": false}, {"identifier": "forwardProxyAuthenticationUsername", "parameters": "(String forwardProxyAuthenticationUsername)", "modifiers": "public static", "return": "void", "signature": "void forwardProxyAuthenticationUsername(String forwardProxyAuthenticationUsername)", "full_signature": "public static void forwardProxyAuthenticationUsername(String forwardProxyAuthenticationUsername)", "class_method_signature": "ConfigurationProperties.forwardProxyAuthenticationUsername(String forwardProxyAuthenticationUsername)", "testcase": false, "constructor": false}, {"identifier": "forwardProxyAuthenticationPassword", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String forwardProxyAuthenticationPassword()", "full_signature": "public static String forwardProxyAuthenticationPassword()", "class_method_signature": "ConfigurationProperties.forwardProxyAuthenticationPassword()", "testcase": false, "constructor": false}, {"identifier": "forwardProxyAuthenticationPassword", "parameters": "(String forwardProxyAuthenticationPassword)", "modifiers": "public static", "return": "void", "signature": "void forwardProxyAuthenticationPassword(String forwardProxyAuthenticationPassword)", "full_signature": "public static void forwardProxyAuthenticationPassword(String forwardProxyAuthenticationPassword)", "class_method_signature": "ConfigurationProperties.forwardProxyAuthenticationPassword(String forwardProxyAuthenticationPassword)", "testcase": false, "constructor": false}, {"identifier": "proxyAuthenticationRealm", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String proxyAuthenticationRealm()", "full_signature": "public static String proxyAuthenticationRealm()", "class_method_signature": "ConfigurationProperties.proxyAuthenticationRealm()", "testcase": false, "constructor": false}, {"identifier": "proxyAuthenticationRealm", "parameters": "(String proxyAuthenticationRealm)", "modifiers": "public static", "return": "void", "signature": "void proxyAuthenticationRealm(String proxyAuthenticationRealm)", "full_signature": "public static void proxyAuthenticationRealm(String proxyAuthenticationRealm)", "class_method_signature": "ConfigurationProperties.proxyAuthenticationRealm(String proxyAuthenticationRealm)", "testcase": false, "constructor": false}, {"identifier": "proxyAuthenticationUsername", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String proxyAuthenticationUsername()", "full_signature": "public static String proxyAuthenticationUsername()", "class_method_signature": "ConfigurationProperties.proxyAuthenticationUsername()", "testcase": false, "constructor": false}, {"identifier": "proxyAuthenticationUsername", "parameters": "(String proxyAuthenticationUsername)", "modifiers": "public static", "return": "void", "signature": "void proxyAuthenticationUsername(String proxyAuthenticationUsername)", "full_signature": "public static void proxyAuthenticationUsername(String proxyAuthenticationUsername)", "class_method_signature": "ConfigurationProperties.proxyAuthenticationUsername(String proxyAuthenticationUsername)", "testcase": false, "constructor": false}, {"identifier": "proxyAuthenticationPassword", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String proxyAuthenticationPassword()", "full_signature": "public static String proxyAuthenticationPassword()", "class_method_signature": "ConfigurationProperties.proxyAuthenticationPassword()", "testcase": false, "constructor": false}, {"identifier": "proxyAuthenticationPassword", "parameters": "(String proxyAuthenticationPassword)", "modifiers": "public static", "return": "void", "signature": "void proxyAuthenticationPassword(String proxyAuthenticationPassword)", "full_signature": "public static void proxyAuthenticationPassword(String proxyAuthenticationPassword)", "class_method_signature": "ConfigurationProperties.proxyAuthenticationPassword(String proxyAuthenticationPassword)", "testcase": false, "constructor": false}, {"identifier": "initializationClass", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String initializationClass()", "full_signature": "public static String initializationClass()", "class_method_signature": "ConfigurationProperties.initializationClass()", "testcase": false, "constructor": false}, {"identifier": "initializationClass", "parameters": "(String initializationClass)", "modifiers": "public static", "return": "void", "signature": "void initializationClass(String initializationClass)", "full_signature": "public static void initializationClass(String initializationClass)", "class_method_signature": "ConfigurationProperties.initializationClass(String initializationClass)", "testcase": false, "constructor": false}, {"identifier": "initializationJsonPath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String initializationJsonPath()", "full_signature": "public static String initializationJsonPath()", "class_method_signature": "ConfigurationProperties.initializationJsonPath()", "testcase": false, "constructor": false}, {"identifier": "initializationJsonPath", "parameters": "(String initializationJsonPath)", "modifiers": "public static", "return": "void", "signature": "void initializationJsonPath(String initializationJsonPath)", "full_signature": "public static void initializationJsonPath(String initializationJsonPath)", "class_method_signature": "ConfigurationProperties.initializationJsonPath(String initializationJsonPath)", "testcase": false, "constructor": false}, {"identifier": "watchInitializationJson", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean watchInitializationJson()", "full_signature": "public static boolean watchInitializationJson()", "class_method_signature": "ConfigurationProperties.watchInitializationJson()", "testcase": false, "constructor": false}, {"identifier": "watchInitializationJson", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void watchInitializationJson(boolean enable)", "full_signature": "public static void watchInitializationJson(boolean enable)", "class_method_signature": "ConfigurationProperties.watchInitializationJson(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "persistExpectations", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean persistExpectations()", "full_signature": "public static boolean persistExpectations()", "class_method_signature": "ConfigurationProperties.persistExpectations()", "testcase": false, "constructor": false}, {"identifier": "persistExpectations", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void persistExpectations(boolean enable)", "full_signature": "public static void persistExpectations(boolean enable)", "class_method_signature": "ConfigurationProperties.persistExpectations(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "persistedExpectationsPath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String persistedExpectationsPath()", "full_signature": "public static String persistedExpectationsPath()", "class_method_signature": "ConfigurationProperties.persistedExpectationsPath()", "testcase": false, "constructor": false}, {"identifier": "persistedExpectationsPath", "parameters": "(String persistedExpectationsPath)", "modifiers": "public static", "return": "void", "signature": "void persistedExpectationsPath(String persistedExpectationsPath)", "full_signature": "public static void persistedExpectationsPath(String persistedExpectationsPath)", "class_method_signature": "ConfigurationProperties.persistedExpectationsPath(String persistedExpectationsPath)", "testcase": false, "constructor": false}, {"identifier": "enableCORSForAPI", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean enableCORSForAPI()", "full_signature": "public static boolean enableCORSForAPI()", "class_method_signature": "ConfigurationProperties.enableCORSForAPI()", "testcase": false, "constructor": false}, {"identifier": "enableCORSForAPIHasBeenSetExplicitly", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean enableCORSForAPIHasBeenSetExplicitly()", "full_signature": "public static boolean enableCORSForAPIHasBeenSetExplicitly()", "class_method_signature": "ConfigurationProperties.enableCORSForAPIHasBeenSetExplicitly()", "testcase": false, "constructor": false}, {"identifier": "enableCORSForAPI", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void enableCORSForAPI(boolean enable)", "full_signature": "public static void enableCORSForAPI(boolean enable)", "class_method_signature": "ConfigurationProperties.enableCORSForAPI(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "enableCORSForAllResponses", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean enableCORSForAllResponses()", "full_signature": "public static boolean enableCORSForAllResponses()", "class_method_signature": "ConfigurationProperties.enableCORSForAllResponses()", "testcase": false, "constructor": false}, {"identifier": "enableCORSForAllResponses", "parameters": "(boolean enable)", "modifiers": "public static", "return": "void", "signature": "void enableCORSForAllResponses(boolean enable)", "full_signature": "public static void enableCORSForAllResponses(boolean enable)", "class_method_signature": "ConfigurationProperties.enableCORSForAllResponses(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "corsAllowHeaders", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String corsAllowHeaders()", "full_signature": "public static String corsAllowHeaders()", "class_method_signature": "ConfigurationProperties.corsAllowHeaders()", "testcase": false, "constructor": false}, {"identifier": "corsAllowHeaders", "parameters": "(String corsAllowHeaders)", "modifiers": "public static", "return": "void", "signature": "void corsAllowHeaders(String corsAllowHeaders)", "full_signature": "public static void corsAllowHeaders(String corsAllowHeaders)", "class_method_signature": "ConfigurationProperties.corsAllowHeaders(String corsAllowHeaders)", "testcase": false, "constructor": false}, {"identifier": "corsAllowMethods", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String corsAllowMethods()", "full_signature": "public static String corsAllowMethods()", "class_method_signature": "ConfigurationProperties.corsAllowMethods()", "testcase": false, "constructor": false}, {"identifier": "corsAllowMethods", "parameters": "(String corsAllowMethods)", "modifiers": "public static", "return": "void", "signature": "void corsAllowMethods(String corsAllowMethods)", "full_signature": "public static void corsAllowMethods(String corsAllowMethods)", "class_method_signature": "ConfigurationProperties.corsAllowMethods(String corsAllowMethods)", "testcase": false, "constructor": false}, {"identifier": "corsAllowCredentials", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean corsAllowCredentials()", "full_signature": "public static boolean corsAllowCredentials()", "class_method_signature": "ConfigurationProperties.corsAllowCredentials()", "testcase": false, "constructor": false}, {"identifier": "corsAllowCredentials", "parameters": "(boolean allow)", "modifiers": "public static", "return": "void", "signature": "void corsAllowCredentials(boolean allow)", "full_signature": "public static void corsAllowCredentials(boolean allow)", "class_method_signature": "ConfigurationProperties.corsAllowCredentials(boolean allow)", "testcase": false, "constructor": false}, {"identifier": "corsMaxAgeInSeconds", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int corsMaxAgeInSeconds()", "full_signature": "public static int corsMaxAgeInSeconds()", "class_method_signature": "ConfigurationProperties.corsMaxAgeInSeconds()", "testcase": false, "constructor": false}, {"identifier": "corsMaxAgeInSeconds", "parameters": "(int ageInSeconds)", "modifiers": "public static", "return": "void", "signature": "void corsMaxAgeInSeconds(int ageInSeconds)", "full_signature": "public static void corsMaxAgeInSeconds(int ageInSeconds)", "class_method_signature": "ConfigurationProperties.corsMaxAgeInSeconds(int ageInSeconds)", "testcase": false, "constructor": false}, {"identifier": "livenessHttpGetPath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String livenessHttpGetPath()", "full_signature": "public static String livenessHttpGetPath()", "class_method_signature": "ConfigurationProperties.livenessHttpGetPath()", "testcase": false, "constructor": false}, {"identifier": "livenessHttpGetPath", "parameters": "(String livenessPath)", "modifiers": "public static", "return": "void", "signature": "void livenessHttpGetPath(String livenessPath)", "full_signature": "public static void livenessHttpGetPath(String livenessPath)", "class_method_signature": "ConfigurationProperties.livenessHttpGetPath(String livenessPath)", "testcase": false, "constructor": false}, {"identifier": "fileExists", "parameters": "(String file)", "modifiers": "@SuppressWarnings(\"ConstantConditions\") private static", "return": "void", "signature": "void fileExists(String file)", "full_signature": "@SuppressWarnings(\"ConstantConditions\") private static void fileExists(String file)", "class_method_signature": "ConfigurationProperties.fileExists(String file)", "testcase": false, "constructor": false}, {"identifier": "validateHostAndPort", "parameters": "(String hostAndPort, String propertyName, String mockserverSocksProxy)", "modifiers": "private static", "return": "void", "signature": "void validateHostAndPort(String hostAndPort, String propertyName, String mockserverSocksProxy)", "full_signature": "private static void validateHostAndPort(String hostAndPort, String propertyName, String mockserverSocksProxy)", "class_method_signature": "ConfigurationProperties.validateHostAndPort(String hostAndPort, String propertyName, String mockserverSocksProxy)", "testcase": false, "constructor": false}, {"identifier": "readInetSocketAddressProperty", "parameters": "(String key, String environmentVariableKey)", "modifiers": "private static", "return": "InetSocketAddress", "signature": "InetSocketAddress readInetSocketAddressProperty(String key, String environmentVariableKey)", "full_signature": "private static InetSocketAddress readInetSocketAddressProperty(String key, String environmentVariableKey)", "class_method_signature": "ConfigurationProperties.readInetSocketAddressProperty(String key, String environmentVariableKey)", "testcase": false, "constructor": false}, {"identifier": "readIntegerListProperty", "parameters": "(String key, String environmentVariableKey, Integer defaultValue)", "modifiers": "@SuppressWarnings(\"unused\") private static", "return": "List<Integer>", "signature": "List<Integer> readIntegerListProperty(String key, String environmentVariableKey, Integer defaultValue)", "full_signature": "@SuppressWarnings(\"unused\") private static List<Integer> readIntegerListProperty(String key, String environmentVariableKey, Integer defaultValue)", "class_method_signature": "ConfigurationProperties.readIntegerListProperty(String key, String environmentVariableKey, Integer defaultValue)", "testcase": false, "constructor": false}, {"identifier": "readIntegerProperty", "parameters": "(String key, String environmentVariableKey, int defaultValue)", "modifiers": "private static", "return": "Integer", "signature": "Integer readIntegerProperty(String key, String environmentVariableKey, int defaultValue)", "full_signature": "private static Integer readIntegerProperty(String key, String environmentVariableKey, int defaultValue)", "class_method_signature": "ConfigurationProperties.readIntegerProperty(String key, String environmentVariableKey, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "readLongProperty", "parameters": "(String key, String environmentVariableKey, long defaultValue)", "modifiers": "private static", "return": "Long", "signature": "Long readLongProperty(String key, String environmentVariableKey, long defaultValue)", "full_signature": "private static Long readLongProperty(String key, String environmentVariableKey, long defaultValue)", "class_method_signature": "ConfigurationProperties.readLongProperty(String key, String environmentVariableKey, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "readPropertyFile", "parameters": "()", "modifiers": "@SuppressWarnings(\"ConstantConditions\") private static", "return": "Properties", "signature": "Properties readPropertyFile()", "full_signature": "@SuppressWarnings(\"ConstantConditions\") private static Properties readPropertyFile()", "class_method_signature": "ConfigurationProperties.readPropertyFile()", "testcase": false, "constructor": false}, {"identifier": "readPropertyHierarchically", "parameters": "(String systemPropertyKey, String environmentVariableKey, String defaultValue)", "modifiers": "@SuppressWarnings(\"ConstantConditions\") private static", "return": "String", "signature": "String readPropertyHierarchically(String systemPropertyKey, String environmentVariableKey, String defaultValue)", "full_signature": "@SuppressWarnings(\"ConstantConditions\") private static String readPropertyHierarchically(String systemPropertyKey, String environmentVariableKey, String defaultValue)", "class_method_signature": "ConfigurationProperties.readPropertyHierarchically(String systemPropertyKey, String environmentVariableKey, String defaultValue)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java"}, "focal_method": {"identifier": "webSocketClientEventLoopThreadCount", "parameters": "()", "modifiers": "public static", "return": "int", "body": "public static int webSocketClientEventLoopThreadCount() {\n        return readIntegerProperty(MOCKSERVER_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT, \"MOCKSERVER_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT\", DEFAULT_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT);\n    }", "signature": "int webSocketClientEventLoopThreadCount()", "full_signature": "public static int webSocketClientEventLoopThreadCount()", "class_method_signature": "ConfigurationProperties.webSocketClientEventLoopThreadCount()", "testcase": false, "constructor": false, "invocations": ["readIntegerProperty"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}