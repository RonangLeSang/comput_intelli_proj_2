{"test_class": {"identifier": "MatcherBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpRequest httpRequest = new HttpRequest()\n        .withMethod(\"GET\")\n        .withPath(\"some_path\")\n        .withQueryStringParameter(new Parameter(\"queryStringParameterName\", \"queryStringParameterValue\"))\n        .withBody(new StringBody(\"some_body\"))\n        .withHeaders(new Header(\"name\", \"value\"))\n        .withCookies(new Cookie(\"name\", \"value\"));", "modifier": "private final", "type": "HttpRequest", "declarator": "httpRequest = new HttpRequest()\n        .withMethod(\"GET\")\n        .withPath(\"some_path\")\n        .withQueryStringParameter(new Parameter(\"queryStringParameterName\", \"queryStringParameterValue\"))\n        .withBody(new StringBody(\"some_body\"))\n        .withHeaders(new Header(\"name\", \"value\"))\n        .withCookies(new Cookie(\"name\", \"value\"))", "var_name": "httpRequest"}, {"original_string": "private MockServerLogger mockServerLogger;", "modifier": "private", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}], "file": "mockserver-core/src/test/java/org/mockserver/matchers/MatcherBuilderTest.java"}, "test_case": {"identifier": "shouldCreateMatcherThatIgnoresHeaders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateMatcherThatIgnoresHeaders() {\n        // when\n        HttpRequestMatcher httpRequestMapper = new MatcherBuilder(mockServerLogger).transformsToMatcher(new Expectation(\n            new HttpRequest()\n                .withMethod(\"GET\")\n                .withPath(\"some_path\")\n                .withQueryStringParameter(new Parameter(\"queryStringParameterName\", \"queryStringParameterValue\"))\n                .withBody(new StringBody(\"some_body\"))\n                .withHeaders()\n                .withCookies(new Cookie(\"name\", \"value\"))\n        ));\n\n        // then\n        assertTrue(httpRequestMapper.matches(null, httpRequest));\n    }", "signature": "void shouldCreateMatcherThatIgnoresHeaders()", "full_signature": "@Test public void shouldCreateMatcherThatIgnoresHeaders()", "class_method_signature": "MatcherBuilderTest.shouldCreateMatcherThatIgnoresHeaders()", "testcase": true, "constructor": false, "invocations": ["transformsToMatcher", "withCookies", "withHeaders", "withBody", "withQueryStringParameter", "withPath", "withMethod", "assertTrue", "matches"]}, "focal_class": {"identifier": "MatcherBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}, {"original_string": "private final LRUCache<RequestDefinition, HttpRequestMatcher> requestMatcherLRUCache;", "modifier": "private final", "type": "LRUCache<RequestDefinition, HttpRequestMatcher>", "declarator": "requestMatcherLRUCache", "var_name": "requestMatcherLRUCache"}], "methods": [{"identifier": "MatcherBuilder", "parameters": "(MockServerLogger mockServerLogger)", "modifiers": "public", "return": "", "signature": " MatcherBuilder(MockServerLogger mockServerLogger)", "full_signature": "public  MatcherBuilder(MockServerLogger mockServerLogger)", "class_method_signature": "MatcherBuilder.MatcherBuilder(MockServerLogger mockServerLogger)", "testcase": false, "constructor": true}, {"identifier": "transformsToMatcher", "parameters": "(RequestDefinition requestDefinition)", "modifiers": "public", "return": "HttpRequestMatcher", "signature": "HttpRequestMatcher transformsToMatcher(RequestDefinition requestDefinition)", "full_signature": "public HttpRequestMatcher transformsToMatcher(RequestDefinition requestDefinition)", "class_method_signature": "MatcherBuilder.transformsToMatcher(RequestDefinition requestDefinition)", "testcase": false, "constructor": false}, {"identifier": "transformsToMatcher", "parameters": "(Expectation expectation)", "modifiers": "public", "return": "HttpRequestMatcher", "signature": "HttpRequestMatcher transformsToMatcher(Expectation expectation)", "full_signature": "public HttpRequestMatcher transformsToMatcher(Expectation expectation)", "class_method_signature": "MatcherBuilder.transformsToMatcher(Expectation expectation)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/matchers/MatcherBuilder.java"}, "focal_method": {"identifier": "transformsToMatcher", "parameters": "(RequestDefinition requestDefinition)", "modifiers": "public", "return": "HttpRequestMatcher", "body": "public HttpRequestMatcher transformsToMatcher(RequestDefinition requestDefinition) {\n        HttpRequestMatcher httpRequestMatcher = requestMatcherLRUCache.get(requestDefinition);\n        if (httpRequestMatcher == null) {\n            if (requestDefinition instanceof OpenAPIDefinition) {\n                httpRequestMatcher = new HttpRequestsPropertiesMatcher(mockServerLogger);\n            } else {\n                httpRequestMatcher = new HttpRequestPropertiesMatcher(mockServerLogger);\n            }\n            httpRequestMatcher.update(requestDefinition);\n            requestMatcherLRUCache.put(requestDefinition, httpRequestMatcher);\n        }\n        return httpRequestMatcher;\n    }", "signature": "HttpRequestMatcher transformsToMatcher(RequestDefinition requestDefinition)", "full_signature": "public HttpRequestMatcher transformsToMatcher(RequestDefinition requestDefinition)", "class_method_signature": "MatcherBuilder.transformsToMatcher(RequestDefinition requestDefinition)", "testcase": false, "constructor": false, "invocations": ["get", "update", "put"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}