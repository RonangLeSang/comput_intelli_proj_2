{"test_class": {"identifier": "X509GeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Integer KEY_SIZE = 512;", "modifier": "private", "type": "Integer", "declarator": "KEY_SIZE = 512", "var_name": "KEY_SIZE"}, {"original_string": "private CertificateSigningRequest csr = new CertificateSigningRequest()\n        .setCommonName(ROOT_COMMON_NAME)\n        .setKeyPairSize(KEY_SIZE);", "modifier": "private", "type": "CertificateSigningRequest", "declarator": "csr = new CertificateSigningRequest()\n        .setCommonName(ROOT_COMMON_NAME)\n        .setKeyPairSize(KEY_SIZE)", "var_name": "csr"}], "file": "mockserver-core/src/test/java/org/mockserver/socket/tls/jdk/X509GeneratorTest.java"}, "test_case": {"identifier": "shouldCreateRootCertificateThatCanBePEMEncodedAndDecoded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateRootCertificateThatCanBePEMEncodedAndDecoded() throws Exception {\n        // given\n        X509Generator x509Generator = new X509Generator(new MockServerLogger());\n\n        // when - a key pair is generated\n        X509AndPrivateKey keyPair = x509Generator.generateRootX509AndPrivateKey(csr);\n\n        // then - validate pem decoding/encoding of the private key\n        assertEquals(keyPair.getPrivateKey(), privateKeyToPEM(privateKeyBytesFromPEM(keyPair.getPrivateKey())));\n\n        // and - validate pem decoding/encoding of the cert\n        assertEquals(keyPair.getCert(), certToPEM(certFromPem(keyPair.getCert())));\n    }", "signature": "void shouldCreateRootCertificateThatCanBePEMEncodedAndDecoded()", "full_signature": "@Test public void shouldCreateRootCertificateThatCanBePEMEncodedAndDecoded()", "class_method_signature": "X509GeneratorTest.shouldCreateRootCertificateThatCanBePEMEncodedAndDecoded()", "testcase": true, "constructor": false, "invocations": ["generateRootX509AndPrivateKey", "assertEquals", "getPrivateKey", "privateKeyToPEM", "privateKeyBytesFromPEM", "getPrivateKey", "assertEquals", "getCert", "certToPEM", "certFromPem", "getCert"]}, "focal_class": {"identifier": "X509Generator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockServerLogger mockServerLogger;", "modifier": "private final", "type": "MockServerLogger", "declarator": "mockServerLogger", "var_name": "mockServerLogger"}], "methods": [{"identifier": "X509Generator", "parameters": "(MockServerLogger mockServerLogger)", "modifiers": "public", "return": "", "signature": " X509Generator(MockServerLogger mockServerLogger)", "full_signature": "public  X509Generator(MockServerLogger mockServerLogger)", "class_method_signature": "X509Generator.X509Generator(MockServerLogger mockServerLogger)", "testcase": false, "constructor": true}, {"identifier": "generateRootX509AndPrivateKey", "parameters": "(final CertificateSigningRequest csr)", "modifiers": "public", "return": "X509AndPrivateKey", "signature": "X509AndPrivateKey generateRootX509AndPrivateKey(final CertificateSigningRequest csr)", "full_signature": "public X509AndPrivateKey generateRootX509AndPrivateKey(final CertificateSigningRequest csr)", "class_method_signature": "X509Generator.generateRootX509AndPrivateKey(final CertificateSigningRequest csr)", "testcase": false, "constructor": false}, {"identifier": "generateLeafX509AndPrivateKey", "parameters": "(final CertificateSigningRequest csr, String issuerDistinguishingName, final String caPrivateKey, final X509Certificate caCertificate)", "modifiers": "public", "return": "X509AndPrivateKey", "signature": "X509AndPrivateKey generateLeafX509AndPrivateKey(final CertificateSigningRequest csr, String issuerDistinguishingName, final String caPrivateKey, final X509Certificate caCertificate)", "full_signature": "public X509AndPrivateKey generateLeafX509AndPrivateKey(final CertificateSigningRequest csr, String issuerDistinguishingName, final String caPrivateKey, final X509Certificate caCertificate)", "class_method_signature": "X509Generator.generateLeafX509AndPrivateKey(final CertificateSigningRequest csr, String issuerDistinguishingName, final String caPrivateKey, final X509Certificate caCertificate)", "testcase": false, "constructor": false}, {"identifier": "generateKeyPair", "parameters": "(final String algorithm, final int keySize)", "modifiers": "private", "return": "KeyPair", "signature": "KeyPair generateKeyPair(final String algorithm, final int keySize)", "full_signature": "private KeyPair generateKeyPair(final String algorithm, final int keySize)", "class_method_signature": "X509Generator.generateKeyPair(final String algorithm, final int keySize)", "testcase": false, "constructor": false}, {"identifier": "buildX509CertInfo", "parameters": "(final X500Name subject, final X500Name issuer, final PublicKey publicKey, final CertificateSigningRequest csr)", "modifiers": "private", "return": "X509CertInfo", "signature": "X509CertInfo buildX509CertInfo(final X500Name subject, final X500Name issuer, final PublicKey publicKey, final CertificateSigningRequest csr)", "full_signature": "private X509CertInfo buildX509CertInfo(final X500Name subject, final X500Name issuer, final PublicKey publicKey, final CertificateSigningRequest csr)", "class_method_signature": "X509Generator.buildX509CertInfo(final X500Name subject, final X500Name issuer, final PublicKey publicKey, final CertificateSigningRequest csr)", "testcase": false, "constructor": false}, {"identifier": "updateWithCertificateExtensions", "parameters": "(final X509CertInfo x509CertInfo, final PublicKey publicKey, final PublicKey caPublicKey, final List<String> subjectAlternativeNames)", "modifiers": "private", "return": "void", "signature": "void updateWithCertificateExtensions(final X509CertInfo x509CertInfo, final PublicKey publicKey, final PublicKey caPublicKey, final List<String> subjectAlternativeNames)", "full_signature": "private void updateWithCertificateExtensions(final X509CertInfo x509CertInfo, final PublicKey publicKey, final PublicKey caPublicKey, final List<String> subjectAlternativeNames)", "class_method_signature": "X509Generator.updateWithCertificateExtensions(final X509CertInfo x509CertInfo, final PublicKey publicKey, final PublicKey caPublicKey, final List<String> subjectAlternativeNames)", "testcase": false, "constructor": false}, {"identifier": "updateWithRootCertificateExtensions", "parameters": "(final X509CertInfo x509CertInfo, final PublicKey publicKey)", "modifiers": "private", "return": "void", "signature": "void updateWithRootCertificateExtensions(final X509CertInfo x509CertInfo, final PublicKey publicKey)", "full_signature": "private void updateWithRootCertificateExtensions(final X509CertInfo x509CertInfo, final PublicKey publicKey)", "class_method_signature": "X509Generator.updateWithRootCertificateExtensions(final X509CertInfo x509CertInfo, final PublicKey publicKey)", "testcase": false, "constructor": false}, {"identifier": "buildGeneralName", "parameters": "(final String subjectAlternativeName)", "modifiers": "@SuppressWarnings(\"UnstableApiUsage\") private", "return": "GeneralName", "signature": "GeneralName buildGeneralName(final String subjectAlternativeName)", "full_signature": "@SuppressWarnings(\"UnstableApiUsage\") private GeneralName buildGeneralName(final String subjectAlternativeName)", "class_method_signature": "X509Generator.buildGeneralName(final String subjectAlternativeName)", "testcase": false, "constructor": false}, {"identifier": "signX509KeyPair", "parameters": "(final PrivateKey privateKey, final KeyPair keyPair, X509CertInfo x509CertInfo, final String signatureAlgorithm)", "modifiers": "private", "return": "X509AndPrivateKey", "signature": "X509AndPrivateKey signX509KeyPair(final PrivateKey privateKey, final KeyPair keyPair, X509CertInfo x509CertInfo, final String signatureAlgorithm)", "full_signature": "private X509AndPrivateKey signX509KeyPair(final PrivateKey privateKey, final KeyPair keyPair, X509CertInfo x509CertInfo, final String signatureAlgorithm)", "class_method_signature": "X509Generator.signX509KeyPair(final PrivateKey privateKey, final KeyPair keyPair, X509CertInfo x509CertInfo, final String signatureAlgorithm)", "testcase": false, "constructor": false}], "file": "mockserver-core/src/main/java/org/mockserver/socket/tls/jdk/X509Generator.java"}, "focal_method": {"identifier": "generateRootX509AndPrivateKey", "parameters": "(final CertificateSigningRequest csr)", "modifiers": "public", "return": "X509AndPrivateKey", "body": "public X509AndPrivateKey generateRootX509AndPrivateKey(final CertificateSigningRequest csr) throws IOException, NoSuchAlgorithmException, CertificateException, InvalidKeyException, NoSuchProviderException, SignatureException {\n        final KeyPair keyPair = generateKeyPair(csr.getKeyPairAlgorithm(), csr.getKeyPairSize());\n        final X500Name subjectAndIssuer = new X500Name(buildDistinguishedName(csr.getCommonName()));\n        X509CertInfo x509CertInfo = buildX509CertInfo(subjectAndIssuer, subjectAndIssuer, keyPair.getPublic(), csr);\n        updateWithRootCertificateExtensions(x509CertInfo, keyPair.getPublic());\n        return signX509KeyPair(keyPair.getPrivate(), keyPair, x509CertInfo, csr.getSigningAlgorithm());\n    }", "signature": "X509AndPrivateKey generateRootX509AndPrivateKey(final CertificateSigningRequest csr)", "full_signature": "public X509AndPrivateKey generateRootX509AndPrivateKey(final CertificateSigningRequest csr)", "class_method_signature": "X509Generator.generateRootX509AndPrivateKey(final CertificateSigningRequest csr)", "testcase": false, "constructor": false, "invocations": ["generateKeyPair", "getKeyPairAlgorithm", "getKeyPairSize", "buildDistinguishedName", "getCommonName", "buildX509CertInfo", "getPublic", "updateWithRootCertificateExtensions", "getPublic", "signX509KeyPair", "getPrivate", "getSigningAlgorithm"]}, "repository": {"repo_id": 8426406, "url": "https://github.com/mock-server/mockserver", "stars": 2440, "created": "2/26/2013 6:09:52 AM +00:00", "updates": "2020-01-27T21:08:35+00:00", "fork": "False", "license": "licensed"}}