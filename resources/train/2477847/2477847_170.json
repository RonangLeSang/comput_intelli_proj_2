{"test_class": {"identifier": "MarkupToEclipseHelpMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n\tpublic", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private MarkupToEclipseHelpMojo markupToEclipseHelp;", "modifier": "private", "type": "MarkupToEclipseHelpMojo", "declarator": "markupToEclipseHelp", "var_name": "markupToEclipseHelp"}], "file": "wikitext/core/org.eclipse.mylyn.wikitext.maven/src/test/java/org/eclipse/mylyn/wikitext/maven/internal/MarkupToEclipseHelpMojoTest.java"}, "test_case": {"identifier": "execute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void execute() throws MojoExecutionException, MojoFailureException {\n\t\tmarkupToEclipseHelp.multipleOutputFiles = true;\n\t\tmarkupToEclipseHelp.title = \"Test This\";\n\t\tmarkupToEclipseHelp.execute();\n\n\t\tassertTrue(computeOutputFile(\"test.html\").exists());\n\t\tassertTrue(computeOutputFile(\"test-toc.xml\").exists());\n\t\tassertTrue(computeOutputFile(\"Top-Level-Heading-2.html\").exists());\n\t\tassertTrue(computeOutputFile(\"Top-Level-Heading-3.html\").exists());\n\t\tassertTrue(computeOutputFile(\"images/wikitext-32.gif\").exists());\n\t\tassertFalse(computeOutputFile(\"test.textile\").exists());\n\n\t\tassertHasContent(\"test.html\", \"<title>Test This</title>\");\n\t\tassertHasContent(\"test.html\", \"<h1 id=\\\"TestFile\\\">Test File</h1>\");\n\t\tassertHasContent(\"test-toc.xml\", \"<toc topic=\\\"test.html\\\" label=\\\"Test This\\\">\");\n\t\tassertHasContent(\"test-toc.xml\", \"<topic href=\\\"Top-Level-Heading-2.html\\\" label=\\\"Top Level Heading 2\\\">\");\n\t\tassertHasContent(\"Top-Level-Heading-2.html\", \"<h1 id=\\\"TopLevelHeading2\\\">Top Level Heading 2</h1>\");\n\t\tassertHasContent(\"Top-Level-Heading-3.html\", \"<h1 id=\\\"TopLevelHeading3\\\">Top Level Heading 3</h1>\");\n\t}", "signature": "void execute()", "full_signature": "@Test public void execute()", "class_method_signature": "MarkupToEclipseHelpMojoTest.execute()", "testcase": true, "constructor": false, "invocations": ["execute", "assertTrue", "exists", "computeOutputFile", "assertTrue", "exists", "computeOutputFile", "assertTrue", "exists", "computeOutputFile", "assertTrue", "exists", "computeOutputFile", "assertTrue", "exists", "computeOutputFile", "assertFalse", "exists", "computeOutputFile", "assertHasContent", "assertHasContent", "assertHasContent", "assertHasContent", "assertHasContent", "assertHasContent"]}, "focal_class": {"identifier": "MarkupToEclipseHelpMojo", "superclass": "extends AbstractMojo", "interfaces": "", "fields": [{"original_string": "protected File outputFolder;", "modifier": "protected", "type": "File", "declarator": "outputFolder", "var_name": "outputFolder"}, {"original_string": "protected File sourceFolder;", "modifier": "protected", "type": "File", "declarator": "sourceFolder", "var_name": "sourceFolder"}, {"original_string": "protected String htmlFilenameFormat = \"$1.html\";", "modifier": "protected", "type": "String", "declarator": "htmlFilenameFormat = \"$1.html\"", "var_name": "htmlFilenameFormat"}, {"original_string": "protected String xmlFilenameFormat = \"$1-toc.xml\";", "modifier": "protected", "type": "String", "declarator": "xmlFilenameFormat = \"$1-toc.xml\"", "var_name": "xmlFilenameFormat"}, {"original_string": "protected String title;", "modifier": "protected", "type": "String", "declarator": "title", "var_name": "title"}, {"original_string": "protected String linkRel;", "modifier": "protected", "type": "String", "declarator": "linkRel", "var_name": "linkRel"}, {"original_string": "protected boolean multipleOutputFiles = false;", "modifier": "protected", "type": "boolean", "declarator": "multipleOutputFiles = false", "var_name": "multipleOutputFiles"}, {"original_string": "private final String sourceEncoding = \"utf-8\";", "modifier": "private final", "type": "String", "declarator": "sourceEncoding = \"utf-8\"", "var_name": "sourceEncoding"}, {"original_string": "protected boolean formatOutput = false;", "modifier": "protected", "type": "boolean", "declarator": "formatOutput = false", "var_name": "formatOutput"}, {"original_string": "protected boolean navigationImages = false;", "modifier": "protected", "type": "boolean", "declarator": "navigationImages = false", "var_name": "navigationImages"}, {"original_string": "protected String prependImagePrefix = null;", "modifier": "protected", "type": "String", "declarator": "prependImagePrefix = null", "var_name": "prependImagePrefix"}, {"original_string": "protected boolean useInlineCssStyles = true;", "modifier": "protected", "type": "boolean", "declarator": "useInlineCssStyles = true", "var_name": "useInlineCssStyles"}, {"original_string": "protected boolean suppressBuiltInCssStyles = false;", "modifier": "protected", "type": "boolean", "declarator": "suppressBuiltInCssStyles = false", "var_name": "suppressBuiltInCssStyles"}, {"original_string": "protected String defaultAbsoluteLinkTarget;", "modifier": "protected", "type": "String", "declarator": "defaultAbsoluteLinkTarget", "var_name": "defaultAbsoluteLinkTarget"}, {"original_string": "protected boolean xhtmlStrict = false;", "modifier": "protected", "type": "boolean", "declarator": "xhtmlStrict = false", "var_name": "xhtmlStrict"}, {"original_string": "protected boolean emitDoctype = true;", "modifier": "protected", "type": "boolean", "declarator": "emitDoctype = true", "var_name": "emitDoctype"}, {"original_string": "protected String htmlDoctype = null;", "modifier": "protected", "type": "String", "declarator": "htmlDoctype = null", "var_name": "htmlDoctype"}, {"original_string": "protected String copyrightNotice = null;", "modifier": "protected", "type": "String", "declarator": "copyrightNotice = null", "var_name": "copyrightNotice"}, {"original_string": "protected List<String> stylesheetUrls = new ArrayList<>();", "modifier": "protected", "type": "List<String>", "declarator": "stylesheetUrls = new ArrayList<>()", "var_name": "stylesheetUrls"}, {"original_string": "protected String helpPrefix;", "modifier": "protected", "type": "String", "declarator": "helpPrefix", "var_name": "helpPrefix"}, {"original_string": "protected int tocAnchorLevel = 0;", "modifier": "protected", "type": "int", "declarator": "tocAnchorLevel = 0", "var_name": "tocAnchorLevel"}, {"original_string": "protected boolean embeddedTableOfContents = false;", "modifier": "protected", "type": "boolean", "declarator": "embeddedTableOfContents = false", "var_name": "embeddedTableOfContents"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "MarkupToEclipseHelpMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "modifiers": "protected", "return": "void", "signature": "void process(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "full_signature": "protected void process(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "class_method_signature": "MarkupToEclipseHelpMojo.process(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File sourceFile, String relativePath)", "modifiers": "private", "return": "void", "signature": "void copy(File sourceFile, String relativePath)", "full_signature": "private void copy(File sourceFile, String relativePath)", "class_method_signature": "MarkupToEclipseHelpMojo.copy(File sourceFile, String relativePath)", "testcase": false, "constructor": false}, {"identifier": "processMarkup", "parameters": "(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "modifiers": "protected", "return": "void", "signature": "void processMarkup(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "full_signature": "protected void processMarkup(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "class_method_signature": "MarkupToEclipseHelpMojo.processMarkup(File sourceFile, String relativePath, MarkupLanguage markupLanguage)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Writer writer, File file)", "modifiers": "private", "return": "void", "signature": "void close(Writer writer, File file)", "full_signature": "private void close(Writer writer, File file)", "class_method_signature": "MarkupToEclipseHelpMojo.close(Writer writer, File file)", "testcase": false, "constructor": false}, {"identifier": "createEclipseHelpToc", "parameters": "(SplitOutlineItem rootTocItem, File sourceFile, String relativePath,\n\t\t\tFile htmlOutputFile, String name)", "modifiers": "private", "return": "void", "signature": "void createEclipseHelpToc(SplitOutlineItem rootTocItem, File sourceFile, String relativePath,\n\t\t\tFile htmlOutputFile, String name)", "full_signature": "private void createEclipseHelpToc(SplitOutlineItem rootTocItem, File sourceFile, String relativePath,\n\t\t\tFile htmlOutputFile, String name)", "class_method_signature": "MarkupToEclipseHelpMojo.createEclipseHelpToc(SplitOutlineItem rootTocItem, File sourceFile, String relativePath,\n\t\t\tFile htmlOutputFile, String name)", "testcase": false, "constructor": false}, {"identifier": "createMarkupToEclipseToc", "parameters": "(String relativePath, File htmlOutputFile, String name)", "modifiers": "protected", "return": "MarkupToEclipseToc", "signature": "MarkupToEclipseToc createMarkupToEclipseToc(String relativePath, File htmlOutputFile, String name)", "full_signature": "protected MarkupToEclipseToc createMarkupToEclipseToc(String relativePath, File htmlOutputFile, String name)", "class_method_signature": "MarkupToEclipseHelpMojo.createMarkupToEclipseToc(String relativePath, File htmlOutputFile, String name)", "testcase": false, "constructor": false}, {"identifier": "calculateHelpPrefix", "parameters": "(String relativePath)", "modifiers": "protected", "return": "String", "signature": "String calculateHelpPrefix(String relativePath)", "full_signature": "protected String calculateHelpPrefix(String relativePath)", "class_method_signature": "MarkupToEclipseHelpMojo.calculateHelpPrefix(String relativePath)", "testcase": false, "constructor": false}, {"identifier": "computeTocFile", "parameters": "(File htmlFile, String name)", "modifiers": "private", "return": "File", "signature": "File computeTocFile(File htmlFile, String name)", "full_signature": "private File computeTocFile(File htmlFile, String name)", "class_method_signature": "MarkupToEclipseHelpMojo.computeTocFile(File htmlFile, String name)", "testcase": false, "constructor": false}, {"identifier": "createSplittingBuilder", "parameters": "(HtmlDocumentBuilder builder, SplitOutlineItem item,\n\t\t\tFile htmlOutputFile, String relativePath)", "modifiers": "protected", "return": "SplittingHtmlDocumentBuilder", "signature": "SplittingHtmlDocumentBuilder createSplittingBuilder(HtmlDocumentBuilder builder, SplitOutlineItem item,\n\t\t\tFile htmlOutputFile, String relativePath)", "full_signature": "protected SplittingHtmlDocumentBuilder createSplittingBuilder(HtmlDocumentBuilder builder, SplitOutlineItem item,\n\t\t\tFile htmlOutputFile, String relativePath)", "class_method_signature": "MarkupToEclipseHelpMojo.createSplittingBuilder(HtmlDocumentBuilder builder, SplitOutlineItem item,\n\t\t\tFile htmlOutputFile, String relativePath)", "testcase": false, "constructor": false}, {"identifier": "createOutlineParser", "parameters": "(MarkupLanguage markupLanguage,\n\t\t\tSplittingStrategy splittingStrategy)", "modifiers": "private", "return": "SplittingOutlineParser", "signature": "SplittingOutlineParser createOutlineParser(MarkupLanguage markupLanguage,\n\t\t\tSplittingStrategy splittingStrategy)", "full_signature": "private SplittingOutlineParser createOutlineParser(MarkupLanguage markupLanguage,\n\t\t\tSplittingStrategy splittingStrategy)", "class_method_signature": "MarkupToEclipseHelpMojo.createOutlineParser(MarkupLanguage markupLanguage,\n\t\t\tSplittingStrategy splittingStrategy)", "testcase": false, "constructor": false}, {"identifier": "createSplittingStrategy", "parameters": "()", "modifiers": "private", "return": "SplittingStrategy", "signature": "SplittingStrategy createSplittingStrategy()", "full_signature": "private SplittingStrategy createSplittingStrategy()", "class_method_signature": "MarkupToEclipseHelpMojo.createSplittingStrategy()", "testcase": false, "constructor": false}, {"identifier": "createRootBuilder", "parameters": "(Writer writer, String name, String relativePath)", "modifiers": "protected", "return": "HtmlDocumentBuilder", "signature": "HtmlDocumentBuilder createRootBuilder(Writer writer, String name, String relativePath)", "full_signature": "protected HtmlDocumentBuilder createRootBuilder(Writer writer, String name, String relativePath)", "class_method_signature": "MarkupToEclipseHelpMojo.createRootBuilder(Writer writer, String name, String relativePath)", "testcase": false, "constructor": false}, {"identifier": "configureStylesheets", "parameters": "(HtmlDocumentBuilder builder, String relativePath)", "modifiers": "protected", "return": "void", "signature": "void configureStylesheets(HtmlDocumentBuilder builder, String relativePath)", "full_signature": "protected void configureStylesheets(HtmlDocumentBuilder builder, String relativePath)", "class_method_signature": "MarkupToEclipseHelpMojo.configureStylesheets(HtmlDocumentBuilder builder, String relativePath)", "testcase": false, "constructor": false}, {"identifier": "computeResourcePath", "parameters": "(String resourcePath, String relativePath)", "modifiers": "protected", "return": "String", "signature": "String computeResourcePath(String resourcePath, String relativePath)", "full_signature": "protected String computeResourcePath(String resourcePath, String relativePath)", "class_method_signature": "MarkupToEclipseHelpMojo.computeResourcePath(String resourcePath, String relativePath)", "testcase": false, "constructor": false}, {"identifier": "isAbsoluteUri", "parameters": "(String resourcePath)", "modifiers": "private", "return": "boolean", "signature": "boolean isAbsoluteUri(String resourcePath)", "full_signature": "private boolean isAbsoluteUri(String resourcePath)", "class_method_signature": "MarkupToEclipseHelpMojo.isAbsoluteUri(String resourcePath)", "testcase": false, "constructor": false}, {"identifier": "createWriter", "parameters": "(File outputFile)", "modifiers": "private", "return": "Writer", "signature": "Writer createWriter(File outputFile)", "full_signature": "private Writer createWriter(File outputFile)", "class_method_signature": "MarkupToEclipseHelpMojo.createWriter(File outputFile)", "testcase": false, "constructor": false}, {"identifier": "computeHtmlFile", "parameters": "(final String relativePath, String name)", "modifiers": "protected", "return": "File", "signature": "File computeHtmlFile(final String relativePath, String name)", "full_signature": "protected File computeHtmlFile(final String relativePath, String name)", "class_method_signature": "MarkupToEclipseHelpMojo.computeHtmlFile(final String relativePath, String name)", "testcase": false, "constructor": false}, {"identifier": "ensureSourceFolderExists", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void ensureSourceFolderExists()", "full_signature": "protected void ensureSourceFolderExists()", "class_method_signature": "MarkupToEclipseHelpMojo.ensureSourceFolderExists()", "testcase": false, "constructor": false}, {"identifier": "ensureOutputFolderExists", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void ensureOutputFolderExists()", "full_signature": "protected void ensureOutputFolderExists()", "class_method_signature": "MarkupToEclipseHelpMojo.ensureOutputFolderExists()", "testcase": false, "constructor": false}, {"identifier": "ensureFolderExists", "parameters": "(String name, File folder, boolean createIfMissing)", "modifiers": "protected", "return": "void", "signature": "void ensureFolderExists(String name, File folder, boolean createIfMissing)", "full_signature": "protected void ensureFolderExists(String name, File folder, boolean createIfMissing)", "class_method_signature": "MarkupToEclipseHelpMojo.ensureFolderExists(String name, File folder, boolean createIfMissing)", "testcase": false, "constructor": false}, {"identifier": "readFully", "parameters": "(File inputFile)", "modifiers": "protected", "return": "String", "signature": "String readFully(File inputFile)", "full_signature": "protected String readFully(File inputFile)", "class_method_signature": "MarkupToEclipseHelpMojo.readFully(File inputFile)", "testcase": false, "constructor": false}], "file": "wikitext/core/org.eclipse.mylyn.wikitext.maven/src/main/java/org/eclipse/mylyn/wikitext/maven/internal/MarkupToEclipseHelpMojo.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void execute() throws MojoExecutionException, MojoFailureException {\n\t\ttry {\n\t\t\tensureOutputFolderExists();\n\t\t\tensureSourceFolderExists();\n\n\t\t\tServiceLocator serviceLocator = ServiceLocator.getInstance(MarkupToEclipseHelpMojo.class.getClassLoader());\n\t\t\tSet<MarkupLanguage> markupLanguages = serviceLocator.getAllMarkupLanguages();\n\t\t\tif (markupLanguages.isEmpty()) {\n\t\t\t\tthrow new MojoFailureException(\"No markup languages are available\");\n\t\t\t}\n\n\t\t\tgetLog().info(\n\t\t\t\t\tformat(\"Generating Eclipse help content from sources: {0} -> {1}\", sourceFolder, outputFolder));\n\n\t\t\tfinal FileToMarkupLanguage fileToMarkupLanguage = new FileToMarkupLanguage(markupLanguages);\n\t\t\tSourceFileTraversal fileTraversal = new SourceFileTraversal(sourceFolder);\n\n\t\t\tfinal AtomicInteger fileCount = new AtomicInteger();\n\t\t\tfileTraversal.traverse(new Visitor() {\n\t\t\t\t@Override\n\t\t\t\tpublic void accept(String relativePath, File sourceFile) {\n\t\t\t\t\tfileCount.incrementAndGet();\n\n\t\t\t\t\tprocess(sourceFile, relativePath, fileToMarkupLanguage.get(sourceFile));\n\t\t\t\t}\n\t\t\t});\n\t\t\tgetLog().info(format(\"Processed {0} files\", fileCount.get()));\n\t\t} catch (BuildFailureException e) {\n\t\t\tgetLog().error(e.getMessage(), e);\n\t\t\tthrow new MojoFailureException(e.getMessage(), e.getCause());\n\t\t}\n\t}", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "MarkupToEclipseHelpMojo.execute()", "testcase": false, "constructor": false, "invocations": ["ensureOutputFolderExists", "ensureSourceFolderExists", "getInstance", "getClassLoader", "getAllMarkupLanguages", "isEmpty", "info", "getLog", "format", "traverse", "incrementAndGet", "process", "get", "info", "getLog", "format", "get", "error", "getLog", "getMessage", "getMessage", "getCause"]}, "repository": {"repo_id": 2477847, "url": "https://github.com/turesheim/org.eclipse.mylyn.docs", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 30493, "license": "licensed"}}