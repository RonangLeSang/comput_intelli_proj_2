{"test_class": {"identifier": "LineSequenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "wikitext/core/org.eclipse.mylyn.wikitext.commonmark/src/test/java/org/eclipse/mylyn/wikitext/commonmark/internal/LineSequenceTest.java"}, "test_case": {"identifier": "toStringTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void toStringTest() {\n\t\tassertEquals(\"LineSequence{currentLine=Line{lineNumber=0, offset=0, text=a}, nextLine=null}\",\n\t\t\t\tLineSequence.create(\"a\\n\").toString());\n\t\tassertEquals(\n\t\t\t\t\"LineSequence{currentLine=Line{lineNumber=0, offset=0, text=a}, nextLine=Line{lineNumber=1, offset=2, text=b}}\",\n\t\t\t\tLineSequence.create(\"a\\nb\").toString());\n\t}", "signature": "void toStringTest()", "full_signature": "@Test public void toStringTest()", "class_method_signature": "LineSequenceTest.toStringTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "create", "assertEquals", "toString", "create"]}, "focal_class": {"identifier": "LineSequence", "superclass": "", "interfaces": "implements Iterable<Line>", "fields": [], "methods": [{"identifier": "create", "parameters": "(String content)", "modifiers": "public static", "return": "LineSequence", "signature": "LineSequence create(String content)", "full_signature": "public static LineSequence create(String content)", "class_method_signature": "LineSequence.create(String content)", "testcase": false, "constructor": false}, {"identifier": "getCurrentLine", "parameters": "()", "modifiers": "public abstract", "return": "Line", "signature": "Line getCurrentLine()", "full_signature": "public abstract Line getCurrentLine()", "class_method_signature": "LineSequence.getCurrentLine()", "testcase": false, "constructor": false}, {"identifier": "getNextLine", "parameters": "()", "modifiers": "public abstract", "return": "Line", "signature": "Line getNextLine()", "full_signature": "public abstract Line getNextLine()", "class_method_signature": "LineSequence.getNextLine()", "testcase": false, "constructor": false}, {"identifier": "advance", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void advance()", "full_signature": "public abstract void advance()", "class_method_signature": "LineSequence.advance()", "testcase": false, "constructor": false}, {"identifier": "advance", "parameters": "(int count)", "modifiers": "public", "return": "void", "signature": "void advance(int count)", "full_signature": "public void advance(int count)", "class_method_signature": "LineSequence.advance(int count)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Line>", "signature": "Iterator<Line> iterator()", "full_signature": "@Override public Iterator<Line> iterator()", "class_method_signature": "LineSequence.iterator()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(Predicate<Line> predicate)", "modifiers": "private", "return": "Iterator<Line>", "signature": "Iterator<Line> iterator(Predicate<Line> predicate)", "full_signature": "private Iterator<Line> iterator(Predicate<Line> predicate)", "class_method_signature": "LineSequence.iterator(Predicate<Line> predicate)", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "(Predicate<Line> predicate)", "modifiers": "public", "return": "LineSequence", "signature": "LineSequence with(Predicate<Line> predicate)", "full_signature": "public LineSequence with(Predicate<Line> predicate)", "class_method_signature": "LineSequence.with(Predicate<Line> predicate)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Function<Line, Line> transform)", "modifiers": "public", "return": "LineSequence", "signature": "LineSequence transform(Function<Line, Line> transform)", "full_signature": "public LineSequence transform(Function<Line, Line> transform)", "class_method_signature": "LineSequence.transform(Function<Line, Line> transform)", "testcase": false, "constructor": false}, {"identifier": "lookAhead", "parameters": "()", "modifiers": "public abstract", "return": "LineSequence", "signature": "LineSequence lookAhead()", "full_signature": "public abstract LineSequence lookAhead()", "class_method_signature": "LineSequence.lookAhead()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LineSequence.toString()", "testcase": false, "constructor": false}], "file": "wikitext/core/org.eclipse.mylyn.wikitext.commonmark/src/main/java/org/eclipse/mylyn/wikitext/commonmark/internal/LineSequence.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String toString() {\n\t\treturn Objects.toStringHelper(LineSequence.class)\n\t\t\t\t.add(\"currentLine\", getCurrentLine())\n\t\t\t\t.add(\"nextLine\", getNextLine())\n\t\t\t\t.toString();\n\t}", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LineSequence.toString()", "testcase": false, "constructor": false, "invocations": ["toString", "add", "add", "toStringHelper", "getCurrentLine", "getNextLine"]}, "repository": {"repo_id": 2477847, "url": "https://github.com/turesheim/org.eclipse.mylyn.docs", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 30493, "license": "licensed"}}