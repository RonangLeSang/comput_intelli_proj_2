{"test_class": {"identifier": "QuadTreeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QuadTree tree;", "modifier": "private", "type": "QuadTree", "declarator": "tree", "var_name": "tree"}, {"original_string": "private Rectangle rectangle1;", "modifier": "private", "type": "Rectangle", "declarator": "rectangle1", "var_name": "rectangle1"}, {"original_string": "private Rectangle rectangle2;", "modifier": "private", "type": "Rectangle", "declarator": "rectangle2", "var_name": "rectangle2"}, {"original_string": "private Rectangle rectangle3;", "modifier": "private", "type": "Rectangle", "declarator": "rectangle3", "var_name": "rectangle3"}, {"original_string": "private Rectangle rectangle4;", "modifier": "private", "type": "Rectangle", "declarator": "rectangle4", "var_name": "rectangle4"}, {"original_string": "private static final int upperLeftX = -512;", "modifier": "private static final", "type": "int", "declarator": "upperLeftX = -512", "var_name": "upperLeftX"}, {"original_string": "private static final int upperLeftY = -512;", "modifier": "private static final", "type": "int", "declarator": "upperLeftY = -512", "var_name": "upperLeftY"}, {"original_string": "private static final int width = 1024;", "modifier": "private static final", "type": "int", "declarator": "width = 1024", "var_name": "width"}, {"original_string": "private static final int height = 1024;", "modifier": "private static final", "type": "int", "declarator": "height = 1024", "var_name": "height"}, {"original_string": "private static final int rectWidth = 5;", "modifier": "private static final", "type": "int", "declarator": "rectWidth = 5", "var_name": "rectWidth"}, {"original_string": "private static final int rectHeight = 5;", "modifier": "private static final", "type": "int", "declarator": "rectHeight = 5", "var_name": "rectHeight"}, {"original_string": "private static final int rectOffset = 5;", "modifier": "private static final", "type": "int", "declarator": "rectOffset = 5", "var_name": "rectOffset"}, {"original_string": "private static final AbsoluteRectangle upperLeftQuadrant = new AbsoluteRectangle(upperLeftX, upperLeftY, width / 2, height / 2);", "modifier": "private static final", "type": "AbsoluteRectangle", "declarator": "upperLeftQuadrant = new AbsoluteRectangle(upperLeftX, upperLeftY, width / 2, height / 2)", "var_name": "upperLeftQuadrant"}, {"original_string": "private static final AbsoluteRectangle upperRightQuadrant = new AbsoluteRectangle(upperLeftX + (width / 2), upperLeftY, width / 2, height / 2);", "modifier": "private static final", "type": "AbsoluteRectangle", "declarator": "upperRightQuadrant = new AbsoluteRectangle(upperLeftX + (width / 2), upperLeftY, width / 2, height / 2)", "var_name": "upperRightQuadrant"}, {"original_string": "private static final AbsoluteRectangle lowerLeftQuadrant = new AbsoluteRectangle(upperLeftX, upperLeftY + (height / 2), width / 2, height / 2);", "modifier": "private static final", "type": "AbsoluteRectangle", "declarator": "lowerLeftQuadrant = new AbsoluteRectangle(upperLeftX, upperLeftY + (height / 2), width / 2, height / 2)", "var_name": "lowerLeftQuadrant"}, {"original_string": "private static final AbsoluteRectangle lowerRightQuadrant = new AbsoluteRectangle(upperLeftX + (width / 2), upperLeftY + (height / 2), width / 2,\n\t\t\theight / 2);", "modifier": "private static final", "type": "AbsoluteRectangle", "declarator": "lowerRightQuadrant = new AbsoluteRectangle(upperLeftX + (width / 2), upperLeftY + (height / 2), width / 2,\n\t\t\theight / 2)", "var_name": "lowerRightQuadrant"}], "file": "core/src/test/java/de/uniluebeck/itm/spyglass/layer/QuadTreeTest.java"}, "test_case": {"identifier": "borderTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void borderTest() {\n\n\t\tfinal Rectangle rectBorderLeft = new Rectangle(upperLeftX, upperLeftY + (height / 2), rectWidth, rectHeight);\n\t\tfinal Rectangle rectBorderTop = new Rectangle(upperLeftX + (width / 2), upperLeftY, rectWidth, rectHeight);\n\t\tfinal Rectangle rectBorderRight = new Rectangle(upperLeftX + width - rectWidth, upperLeftY + (height / 2), rectWidth, rectHeight);\n\t\tfinal Rectangle rectBorderBottom = new Rectangle(upperLeftX + (width / 2), upperLeftY + height - rectHeight, rectWidth, rectHeight);\n\n\t\ttry {\n\t\t\ttree.add(rectBorderLeft);\n\t\t} catch (final RuntimeException e) {\n\t\t\tassertTrue(false);\n\t\t}\n\n\t\ttry {\n\t\t\ttree.add(rectBorderTop);\n\t\t} catch (final RuntimeException e) {\n\t\t\tassertTrue(false);\n\t\t}\n\n\t\ttry {\n\t\t\ttree.add(rectBorderRight);\n\t\t} catch (final RuntimeException e) {\n\t\t\tassertTrue(false);\n\t\t}\n\n\t\ttry {\n\t\t\ttree.add(rectBorderBottom);\n\t\t} catch (final RuntimeException e) {\n\t\t\tassertTrue(false);\n\t\t}\n\n\t}", "signature": "void borderTest()", "full_signature": "@Test public void borderTest()", "class_method_signature": "QuadTreeTest.borderTest()", "testcase": true, "constructor": false, "invocations": ["add", "assertTrue", "add", "assertTrue", "add", "assertTrue", "add", "assertTrue"]}, "focal_class": {"identifier": "QuadTree", "superclass": "", "interfaces": "implements Layer, BoundingBoxChangeListener", "fields": [{"original_string": "private final Map<DrawingObject, Long> insertionOrder;", "modifier": "private final", "type": "Map<DrawingObject, Long>", "declarator": "insertionOrder", "var_name": "insertionOrder"}, {"original_string": "private long insertionOrderLargest;", "modifier": "private", "type": "long", "declarator": "insertionOrderLargest", "var_name": "insertionOrderLargest"}, {"original_string": "private long insertionOrderSmallest;", "modifier": "private", "type": "long", "declarator": "insertionOrderSmallest", "var_name": "insertionOrderSmallest"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private final DrawingObjectComparator sorter;", "modifier": "private final", "type": "DrawingObjectComparator", "declarator": "sorter", "var_name": "sorter"}, {"original_string": "private final boolean threadSafe;", "modifier": "private final", "type": "boolean", "declarator": "threadSafe", "var_name": "threadSafe"}, {"original_string": "private final ISWTQuadTree<DrawingObject> tree;", "modifier": "private final", "type": "ISWTQuadTree<DrawingObject>", "declarator": "tree", "var_name": "tree"}], "methods": [{"identifier": "QuadTree", "parameters": "(final int originX, final int originY, final int totalSideLength, final int minSideLength, final int capacity,\n\t\t\tfinal boolean threadSafe)", "modifiers": "@SuppressWarnings(\"synthetic-access\") public", "return": "", "signature": " QuadTree(final int originX, final int originY, final int totalSideLength, final int minSideLength, final int capacity,\n\t\t\tfinal boolean threadSafe)", "full_signature": "@SuppressWarnings(\"synthetic-access\") public  QuadTree(final int originX, final int originY, final int totalSideLength, final int minSideLength, final int capacity,\n\t\t\tfinal boolean threadSafe)", "class_method_signature": "QuadTree.QuadTree(final int originX, final int originY, final int totalSideLength, final int minSideLength, final int capacity,\n\t\t\tfinal boolean threadSafe)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final DrawingObject d)", "modifiers": "@Override public", "return": "void", "signature": "void add(final DrawingObject d)", "full_signature": "@Override public void add(final DrawingObject d)", "class_method_signature": "QuadTree.add(final DrawingObject d)", "testcase": false, "constructor": false}, {"identifier": "bringToFront", "parameters": "(final DrawingObject dob)", "modifiers": "@Override public", "return": "void", "signature": "void bringToFront(final DrawingObject dob)", "full_signature": "@Override public void bringToFront(final DrawingObject dob)", "class_method_signature": "QuadTree.bringToFront(final DrawingObject dob)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "QuadTree.clear()", "testcase": false, "constructor": false}, {"identifier": "getDrawingObjects", "parameters": "()", "modifiers": "@Override public", "return": "Set<DrawingObject>", "signature": "Set<DrawingObject> getDrawingObjects()", "full_signature": "@Override public Set<DrawingObject> getDrawingObjects()", "class_method_signature": "QuadTree.getDrawingObjects()", "testcase": false, "constructor": false}, {"identifier": "getDrawingObjects", "parameters": "(final AbsoluteRectangle rect)", "modifiers": "@Override public", "return": "SortedSet<DrawingObject>", "signature": "SortedSet<DrawingObject> getDrawingObjects(final AbsoluteRectangle rect)", "full_signature": "@Override public SortedSet<DrawingObject> getDrawingObjects(final AbsoluteRectangle rect)", "class_method_signature": "QuadTree.getDrawingObjects(final AbsoluteRectangle rect)", "testcase": false, "constructor": false}, {"identifier": "getDrawingObjects", "parameters": "(final AbsoluteRectangle rect, final boolean sorted)", "modifiers": "@Override public", "return": "Set<DrawingObject>", "signature": "Set<DrawingObject> getDrawingObjects(final AbsoluteRectangle rect, final boolean sorted)", "full_signature": "@Override public Set<DrawingObject> getDrawingObjects(final AbsoluteRectangle rect, final boolean sorted)", "class_method_signature": "QuadTree.getDrawingObjects(final AbsoluteRectangle rect, final boolean sorted)", "testcase": false, "constructor": false}, {"identifier": "getDrawingObjects", "parameters": "(final boolean sorted)", "modifiers": "@Override public", "return": "Set<DrawingObject>", "signature": "Set<DrawingObject> getDrawingObjects(final boolean sorted)", "full_signature": "@Override public Set<DrawingObject> getDrawingObjects(final boolean sorted)", "class_method_signature": "QuadTree.getDrawingObjects(final boolean sorted)", "testcase": false, "constructor": false}, {"identifier": "onBoundingBoxChanged", "parameters": "(final DrawingObject updatedDrawingObject, final AbsoluteRectangle oldBox)", "modifiers": "@Override public", "return": "void", "signature": "void onBoundingBoxChanged(final DrawingObject updatedDrawingObject, final AbsoluteRectangle oldBox)", "full_signature": "@Override public void onBoundingBoxChanged(final DrawingObject updatedDrawingObject, final AbsoluteRectangle oldBox)", "class_method_signature": "QuadTree.onBoundingBoxChanged(final DrawingObject updatedDrawingObject, final AbsoluteRectangle oldBox)", "testcase": false, "constructor": false}, {"identifier": "pushBack", "parameters": "(final DrawingObject object)", "modifiers": "@Override public", "return": "void", "signature": "void pushBack(final DrawingObject object)", "full_signature": "@Override public void pushBack(final DrawingObject object)", "class_method_signature": "QuadTree.pushBack(final DrawingObject object)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final DrawingObject d)", "modifiers": "@Override public", "return": "void", "signature": "void remove(final DrawingObject d)", "full_signature": "@Override public void remove(final DrawingObject d)", "class_method_signature": "QuadTree.remove(final DrawingObject d)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(final Collection<DrawingObject> dos)", "modifiers": "@Override public", "return": "void", "signature": "void removeAll(final Collection<DrawingObject> dos)", "full_signature": "@Override public void removeAll(final Collection<DrawingObject> dos)", "class_method_signature": "QuadTree.removeAll(final Collection<DrawingObject> dos)", "testcase": false, "constructor": false}], "file": "core/src/main/java/de/uniluebeck/itm/spyglass/layer/QuadTree.java"}, "focal_method": {"identifier": "add", "parameters": "(final DrawingObject d)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void add(final DrawingObject d) {\n\t\tif (threadSafe) {\n\t\t\tsynchronized (lock) {\n\t\t\t\tif (insertionOrder.containsKey(d)) {\n\t\t\t\t\tthrow new RuntimeException(\"Don't do double insert, no no ;-)\");\n\t\t\t\t}\n\t\t\t\td.addBoundingBoxChangedListener(this);\n\t\t\t\tinsertionOrder.put(d, ++insertionOrderLargest);\n\t\t\t\ttree.insertItem(d, d.getBoundingBox().rectangle);\n\t\t\t}\n\t\t} else {\n\t\t\tif (insertionOrder.containsKey(d)) {\n\t\t\t\tthrow new RuntimeException(\"Don't do double insert, no no ;-)\");\n\t\t\t}\n\t\t\td.addBoundingBoxChangedListener(this);\n\t\t\tinsertionOrder.put(d, ++insertionOrderLargest);\n\t\t\ttree.insertItem(d, d.getBoundingBox().rectangle);\n\t\t}\n\t}", "signature": "void add(final DrawingObject d)", "full_signature": "@Override public void add(final DrawingObject d)", "class_method_signature": "QuadTree.add(final DrawingObject d)", "testcase": false, "constructor": false, "invocations": ["containsKey", "addBoundingBoxChangedListener", "put", "insertItem", "getBoundingBox", "containsKey", "addBoundingBoxChangedListener", "put", "insertItem", "getBoundingBox"]}, "repository": {"repo_id": 960760, "url": "https://github.com/itm/spyglass", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 7, "size": 54452, "license": "licensed"}}