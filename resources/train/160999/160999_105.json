{"test_class": {"identifier": "WatcherCleanerTest", "superclass": "extends ZKTestCase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(WatcherCleanerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(WatcherCleanerTest.class)", "var_name": "LOG"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherCleanerTest.java"}, "test_case": {"identifier": "testProcessDeadWatchersBasedOnThreshold", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessDeadWatchersBasedOnThreshold() {\n        MyDeadWatcherListener listener = new MyDeadWatcherListener();\n        int threshold = 3;\n        WatcherCleaner cleaner = new WatcherCleaner(listener, threshold, 60, 1, 10);\n        cleaner.start();\n\n        int i = 0;\n        while (i++ < threshold - 1) {\n            cleaner.addDeadWatcher(i);\n        }\n        // not trigger processDeadWatchers yet\n        assertEquals(0, listener.getDeadWatchers().size());\n\n        listener.setCountDownLatch(new CountDownLatch(1));\n        // add another dead watcher to trigger the process\n        cleaner.addDeadWatcher(i);\n        assertTrue(listener.wait(1000));\n        assertEquals(threshold, listener.getDeadWatchers().size());\n    }", "signature": "void testProcessDeadWatchersBasedOnThreshold()", "full_signature": "@Test public void testProcessDeadWatchersBasedOnThreshold()", "class_method_signature": "WatcherCleanerTest.testProcessDeadWatchersBasedOnThreshold()", "testcase": true, "constructor": false, "invocations": ["start", "addDeadWatcher", "assertEquals", "size", "getDeadWatchers", "setCountDownLatch", "addDeadWatcher", "assertTrue", "wait", "assertEquals", "size", "getDeadWatchers"]}, "focal_class": {"identifier": "WatcherCleaner", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(WatcherCleaner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(WatcherCleaner.class)", "var_name": "LOG"}, {"original_string": "private final RateLogger RATE_LOGGER = new RateLogger(LOG);", "modifier": "private final", "type": "RateLogger", "declarator": "RATE_LOGGER = new RateLogger(LOG)", "var_name": "RATE_LOGGER"}, {"original_string": "private volatile boolean stopped = false;", "modifier": "private volatile", "type": "boolean", "declarator": "stopped = false", "var_name": "stopped"}, {"original_string": "private final Object cleanEvent = new Object();", "modifier": "private final", "type": "Object", "declarator": "cleanEvent = new Object()", "var_name": "cleanEvent"}, {"original_string": "private final Object processingCompletedEvent = new Object();", "modifier": "private final", "type": "Object", "declarator": "processingCompletedEvent = new Object()", "var_name": "processingCompletedEvent"}, {"original_string": "private final Random r = new Random(System.nanoTime());", "modifier": "private final", "type": "Random", "declarator": "r = new Random(System.nanoTime())", "var_name": "r"}, {"original_string": "private final WorkerService cleaners;", "modifier": "private final", "type": "WorkerService", "declarator": "cleaners", "var_name": "cleaners"}, {"original_string": "private final Set<Integer> deadWatchers;", "modifier": "private final", "type": "Set<Integer>", "declarator": "deadWatchers", "var_name": "deadWatchers"}, {"original_string": "private final IDeadWatcherListener listener;", "modifier": "private final", "type": "IDeadWatcherListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private final int watcherCleanThreshold;", "modifier": "private final", "type": "int", "declarator": "watcherCleanThreshold", "var_name": "watcherCleanThreshold"}, {"original_string": "private final int watcherCleanIntervalInSeconds;", "modifier": "private final", "type": "int", "declarator": "watcherCleanIntervalInSeconds", "var_name": "watcherCleanIntervalInSeconds"}, {"original_string": "private final int maxInProcessingDeadWatchers;", "modifier": "private final", "type": "int", "declarator": "maxInProcessingDeadWatchers", "var_name": "maxInProcessingDeadWatchers"}, {"original_string": "private final AtomicInteger totalDeadWatchers = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "totalDeadWatchers = new AtomicInteger()", "var_name": "totalDeadWatchers"}], "methods": [{"identifier": "WatcherCleaner", "parameters": "(IDeadWatcherListener listener)", "modifiers": "public", "return": "", "signature": " WatcherCleaner(IDeadWatcherListener listener)", "full_signature": "public  WatcherCleaner(IDeadWatcherListener listener)", "class_method_signature": "WatcherCleaner.WatcherCleaner(IDeadWatcherListener listener)", "testcase": false, "constructor": true}, {"identifier": "WatcherCleaner", "parameters": "(IDeadWatcherListener listener, int watcherCleanThreshold, int watcherCleanIntervalInSeconds, int watcherCleanThreadsNum, int maxInProcessingDeadWatchers)", "modifiers": "public", "return": "", "signature": " WatcherCleaner(IDeadWatcherListener listener, int watcherCleanThreshold, int watcherCleanIntervalInSeconds, int watcherCleanThreadsNum, int maxInProcessingDeadWatchers)", "full_signature": "public  WatcherCleaner(IDeadWatcherListener listener, int watcherCleanThreshold, int watcherCleanIntervalInSeconds, int watcherCleanThreadsNum, int maxInProcessingDeadWatchers)", "class_method_signature": "WatcherCleaner.WatcherCleaner(IDeadWatcherListener listener, int watcherCleanThreshold, int watcherCleanIntervalInSeconds, int watcherCleanThreadsNum, int maxInProcessingDeadWatchers)", "testcase": false, "constructor": true}, {"identifier": "addDeadWatcher", "parameters": "(int watcherBit)", "modifiers": "public", "return": "void", "signature": "void addDeadWatcher(int watcherBit)", "full_signature": "public void addDeadWatcher(int watcherBit)", "class_method_signature": "WatcherCleaner.addDeadWatcher(int watcherBit)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "WatcherCleaner.run()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "WatcherCleaner.shutdown()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherCleaner.java"}, "focal_method": {"identifier": "addDeadWatcher", "parameters": "(int watcherBit)", "modifiers": "public", "return": "void", "body": "public void addDeadWatcher(int watcherBit) {\n        // Wait if there are too many watchers waiting to be closed,\n        // this is will slow down the socket packet processing and\n        // the adding watches in the ZK pipeline.\n        while (maxInProcessingDeadWatchers > 0 && !stopped && totalDeadWatchers.get() >= maxInProcessingDeadWatchers) {\n            try {\n                RATE_LOGGER.rateLimitLog(\"Waiting for dead watchers cleaning\");\n                long startTime = Time.currentElapsedTime();\n                synchronized (processingCompletedEvent) {\n                    processingCompletedEvent.wait(100);\n                }\n                long latency = Time.currentElapsedTime() - startTime;\n                ServerMetrics.getMetrics().ADD_DEAD_WATCHER_STALL_TIME.add(latency);\n            } catch (InterruptedException e) {\n                LOG.info(\"Got interrupted while waiting for dead watches queue size\");\n                break;\n            }\n        }\n        synchronized (this) {\n            if (deadWatchers.add(watcherBit)) {\n                totalDeadWatchers.incrementAndGet();\n                ServerMetrics.getMetrics().DEAD_WATCHERS_QUEUED.add(1);\n                if (deadWatchers.size() >= watcherCleanThreshold) {\n                    synchronized (cleanEvent) {\n                        cleanEvent.notifyAll();\n                    }\n                }\n            }\n        }\n    }", "signature": "void addDeadWatcher(int watcherBit)", "full_signature": "public void addDeadWatcher(int watcherBit)", "class_method_signature": "WatcherCleaner.addDeadWatcher(int watcherBit)", "testcase": false, "constructor": false, "invocations": ["get", "rateLimitLog", "currentElapsedTime", "wait", "currentElapsedTime", "add", "getMetrics", "info", "add", "incrementAndGet", "add", "getMetrics", "size", "notifyAll"]}, "repository": {"repo_id": 160999, "url": "https://github.com/apache/zookeeper", "stars": 7612, "created": "3/27/2009 3:41:56 PM +00:00", "updates": "2020-01-27T13:06:42+00:00", "fork": "False", "license": "licensed"}}