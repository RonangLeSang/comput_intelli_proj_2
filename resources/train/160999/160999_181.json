{"test_class": {"identifier": "MultipleAddressesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int PORTS_AMOUNT = 10;", "modifier": "public static final", "type": "int", "declarator": "PORTS_AMOUNT = 10", "var_name": "PORTS_AMOUNT"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java"}, "test_case": {"identifier": "testGetReachableOrOneWithSingleReachableAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetReachableOrOneWithSingleReachableAddress() {\n        InetSocketAddress reachableAddress = new InetSocketAddress(\"127.0.0.1\", PortAssignment.unique());\n\n        MultipleAddresses multipleAddresses = new MultipleAddresses(Collections.singletonList(reachableAddress));\n        InetSocketAddress actualReturnedAddress = multipleAddresses.getReachableOrOne();\n\n        assertEquals(reachableAddress, actualReturnedAddress);\n    }", "signature": "void testGetReachableOrOneWithSingleReachableAddress()", "full_signature": "@Test public void testGetReachableOrOneWithSingleReachableAddress()", "class_method_signature": "MultipleAddressesTest.testGetReachableOrOneWithSingleReachableAddress()", "testcase": true, "constructor": false, "invocations": ["unique", "singletonList", "getReachableOrOne", "assertEquals"]}, "focal_class": {"identifier": "MultipleAddresses", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Duration DEFAULT_TIMEOUT = Duration.ofMillis(1000);", "modifier": "public static final", "type": "Duration", "declarator": "DEFAULT_TIMEOUT = Duration.ofMillis(1000)", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "private Set<InetSocketAddress> addresses;", "modifier": "private", "type": "Set<InetSocketAddress>", "declarator": "addresses", "var_name": "addresses"}, {"original_string": "private final Duration timeout;", "modifier": "private final", "type": "Duration", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "newConcurrentHashSet", "parameters": "()", "modifiers": "private static", "return": "Set<InetSocketAddress>", "signature": "Set<InetSocketAddress> newConcurrentHashSet()", "full_signature": "private static Set<InetSocketAddress> newConcurrentHashSet()", "class_method_signature": "MultipleAddresses.newConcurrentHashSet()", "testcase": false, "constructor": false}, {"identifier": "MultipleAddresses", "parameters": "()", "modifiers": "public", "return": "", "signature": " MultipleAddresses()", "full_signature": "public  MultipleAddresses()", "class_method_signature": "MultipleAddresses.MultipleAddresses()", "testcase": false, "constructor": true}, {"identifier": "MultipleAddresses", "parameters": "(Collection<InetSocketAddress> addresses)", "modifiers": "public", "return": "", "signature": " MultipleAddresses(Collection<InetSocketAddress> addresses)", "full_signature": "public  MultipleAddresses(Collection<InetSocketAddress> addresses)", "class_method_signature": "MultipleAddresses.MultipleAddresses(Collection<InetSocketAddress> addresses)", "testcase": false, "constructor": true}, {"identifier": "MultipleAddresses", "parameters": "(InetSocketAddress address)", "modifiers": "public", "return": "", "signature": " MultipleAddresses(InetSocketAddress address)", "full_signature": "public  MultipleAddresses(InetSocketAddress address)", "class_method_signature": "MultipleAddresses.MultipleAddresses(InetSocketAddress address)", "testcase": false, "constructor": true}, {"identifier": "MultipleAddresses", "parameters": "(Collection<InetSocketAddress> addresses, Duration timeout)", "modifiers": "public", "return": "", "signature": " MultipleAddresses(Collection<InetSocketAddress> addresses, Duration timeout)", "full_signature": "public  MultipleAddresses(Collection<InetSocketAddress> addresses, Duration timeout)", "class_method_signature": "MultipleAddresses.MultipleAddresses(Collection<InetSocketAddress> addresses, Duration timeout)", "testcase": false, "constructor": true}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "MultipleAddresses.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getAllAddresses", "parameters": "()", "modifiers": "public", "return": "Set<InetSocketAddress>", "signature": "Set<InetSocketAddress> getAllAddresses()", "full_signature": "public Set<InetSocketAddress> getAllAddresses()", "class_method_signature": "MultipleAddresses.getAllAddresses()", "testcase": false, "constructor": false}, {"identifier": "getWildcardAddresses", "parameters": "()", "modifiers": "public", "return": "Set<InetSocketAddress>", "signature": "Set<InetSocketAddress> getWildcardAddresses()", "full_signature": "public Set<InetSocketAddress> getWildcardAddresses()", "class_method_signature": "MultipleAddresses.getWildcardAddresses()", "testcase": false, "constructor": false}, {"identifier": "getAllPorts", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getAllPorts()", "full_signature": "public List<Integer> getAllPorts()", "class_method_signature": "MultipleAddresses.getAllPorts()", "testcase": false, "constructor": false}, {"identifier": "getAllHostStrings", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllHostStrings()", "full_signature": "public List<String> getAllHostStrings()", "class_method_signature": "MultipleAddresses.getAllHostStrings()", "testcase": false, "constructor": false}, {"identifier": "addAddress", "parameters": "(InetSocketAddress address)", "modifiers": "public", "return": "void", "signature": "void addAddress(InetSocketAddress address)", "full_signature": "public void addAddress(InetSocketAddress address)", "class_method_signature": "MultipleAddresses.addAddress(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "getReachableAddress", "parameters": "()", "modifiers": "public", "return": "InetSocketAddress", "signature": "InetSocketAddress getReachableAddress()", "full_signature": "public InetSocketAddress getReachableAddress()", "class_method_signature": "MultipleAddresses.getReachableAddress()", "testcase": false, "constructor": false}, {"identifier": "getAllReachableAddresses", "parameters": "()", "modifiers": "public", "return": "Set<InetSocketAddress>", "signature": "Set<InetSocketAddress> getAllReachableAddresses()", "full_signature": "public Set<InetSocketAddress> getAllReachableAddresses()", "class_method_signature": "MultipleAddresses.getAllReachableAddresses()", "testcase": false, "constructor": false}, {"identifier": "getAllReachableAddressesOrAll", "parameters": "()", "modifiers": "public", "return": "Set<InetSocketAddress>", "signature": "Set<InetSocketAddress> getAllReachableAddressesOrAll()", "full_signature": "public Set<InetSocketAddress> getAllReachableAddressesOrAll()", "class_method_signature": "MultipleAddresses.getAllReachableAddressesOrAll()", "testcase": false, "constructor": false}, {"identifier": "getReachableOrOne", "parameters": "()", "modifiers": "public", "return": "InetSocketAddress", "signature": "InetSocketAddress getReachableOrOne()", "full_signature": "public InetSocketAddress getReachableOrOne()", "class_method_signature": "MultipleAddresses.getReachableOrOne()", "testcase": false, "constructor": false}, {"identifier": "recreateSocketAddresses", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void recreateSocketAddresses()", "full_signature": "public void recreateSocketAddresses()", "class_method_signature": "MultipleAddresses.recreateSocketAddresses()", "testcase": false, "constructor": false}, {"identifier": "getOne", "parameters": "()", "modifiers": "public", "return": "InetSocketAddress", "signature": "InetSocketAddress getOne()", "full_signature": "public InetSocketAddress getOne()", "class_method_signature": "MultipleAddresses.getOne()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "MultipleAddresses.size()", "testcase": false, "constructor": false}, {"identifier": "checkIfAddressIsReachable", "parameters": "(InetSocketAddress address)", "modifiers": "private", "return": "boolean", "signature": "boolean checkIfAddressIsReachable(InetSocketAddress address)", "full_signature": "private boolean checkIfAddressIsReachable(InetSocketAddress address)", "class_method_signature": "MultipleAddresses.checkIfAddressIsReachable(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "recreateSocketAddress", "parameters": "(InetSocketAddress address)", "modifiers": "private", "return": "InetSocketAddress", "signature": "InetSocketAddress recreateSocketAddress(InetSocketAddress address)", "full_signature": "private InetSocketAddress recreateSocketAddress(InetSocketAddress address)", "class_method_signature": "MultipleAddresses.recreateSocketAddress(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MultipleAddresses.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MultipleAddresses.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultipleAddresses.toString()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java"}, "focal_method": {"identifier": "getReachableOrOne", "parameters": "()", "modifiers": "public", "return": "InetSocketAddress", "body": "public InetSocketAddress getReachableOrOne() {\n        InetSocketAddress address;\n\n        // if there is only a single address provided then we don't do any reachability check\n        if (addresses.size() == 1) {\n            return getOne();\n        }\n\n        try {\n            address = getReachableAddress();\n        } catch (NoRouteToHostException e) {\n            address = getOne();\n        }\n        return address;\n    }", "signature": "InetSocketAddress getReachableOrOne()", "full_signature": "public InetSocketAddress getReachableOrOne()", "class_method_signature": "MultipleAddresses.getReachableOrOne()", "testcase": false, "constructor": false, "invocations": ["size", "getOne", "getReachableAddress", "getOne"]}, "repository": {"repo_id": 160999, "url": "https://github.com/apache/zookeeper", "stars": 7612, "created": "3/27/2009 3:41:56 PM +00:00", "updates": "2020-01-27T13:06:42+00:00", "fork": "False", "license": "licensed"}}