{"test_class": {"identifier": "MgcpMessageParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "control/mgcp/src/test/java/org/restcomm/media/core/control/mgcp/message/MgcpMessageParserTest.java"}, "test_case": {"identifier": "testParseCrcxRequestWithSdp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseCrcxRequestWithSdp() throws MgcpParseException {\n        // given\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"CRCX 147483655 mobicents/bridge/1@127.0.0.1:2427 MGCP 1.0\").append(System.lineSeparator());\n        builder.append(\"C:1\").append(System.lineSeparator());\n        builder.append(\"M:sendrecv\").append(System.lineSeparator());\n        builder.append(\"N:restcomm@127.0.0.1:2727\").append(System.lineSeparator());\n        builder.append(\"L:webrtc:false\").append(System.lineSeparator());\n        builder.append(System.lineSeparator());\n        StringBuilder builderSdp = new StringBuilder();\n        builderSdp.append(\"v=0\").append(System.lineSeparator());\n        builderSdp.append(\"o=hrosa 3616 1899 IN IP4 127.0.0.1\").append(System.lineSeparator());\n        builderSdp.append(\"s=Talk\").append(System.lineSeparator());\n        builderSdp.append(\"c=IN IP4 127.0.0.1\").append(System.lineSeparator());\n        builderSdp.append(\"t=0 0\").append(System.lineSeparator());\n        builderSdp.append(\"a=rtcp-xr:rcvr-rtt=all:10000 stat-summary=loss,dup,jitt,TTL voip-metrics\")\n                .append(System.lineSeparator());\n        builderSdp.append(\"m=audio 7070 RTP/AVP 8 0 101\").append(System.lineSeparator());\n        builderSdp.append(\"a=rtpmap:101 telephone-event/8000\");\n        builder.append(builderSdp.toString());\n        MgcpMessageParser parser = new MgcpMessageParser();\n\n        // when\n        MgcpRequest request = parser.parseRequest(builder.toString());\n\n        // then\n        assertEquals(MgcpRequestType.CRCX, request.getRequestType());\n        assertEquals(147483655, request.getTransactionId());\n        assertEquals(\"mobicents/bridge/1@127.0.0.1:2427\", request.getEndpointId());\n        assertEquals(\"1\", request.getParameter(MgcpParameterType.CALL_ID));\n        assertEquals(\"sendrecv\", request.getParameter(MgcpParameterType.MODE));\n        assertEquals(\"restcomm@127.0.0.1:2727\", request.getParameter(MgcpParameterType.NOTIFIED_ENTITY));\n        assertEquals(\"webrtc:false\", request.getParameter(MgcpParameterType.LOCAL_CONNECTION_OPTIONS));\n        assertTrue(request.isSdpDetected());\n        assertEquals(builderSdp.toString(), request.getParameter(MgcpParameterType.SDP));\n    }", "signature": "void testParseCrcxRequestWithSdp()", "full_signature": "@Test public void testParseCrcxRequestWithSdp()", "class_method_signature": "MgcpMessageParserTest.testParseCrcxRequestWithSdp()", "testcase": true, "constructor": false, "invocations": ["append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "lineSeparator", "append", "append", "toString", "parseRequest", "toString", "assertEquals", "getRequestType", "assertEquals", "getTransactionId", "assertEquals", "getEndpointId", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertTrue", "isSdpDetected", "assertEquals", "toString", "getParameter"]}, "focal_class": {"identifier": "MgcpMessageParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LocalConnectionOptionsParser optionsParser;", "modifier": "private final", "type": "LocalConnectionOptionsParser", "declarator": "optionsParser", "var_name": "optionsParser"}], "methods": [{"identifier": "MgcpMessageParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " MgcpMessageParser()", "full_signature": "public  MgcpMessageParser()", "class_method_signature": "MgcpMessageParser.MgcpMessageParser()", "testcase": false, "constructor": true}, {"identifier": "parseRequest", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "MgcpRequest", "signature": "MgcpRequest parseRequest(byte[] data, int offset, int length)", "full_signature": "public MgcpRequest parseRequest(byte[] data, int offset, int length)", "class_method_signature": "MgcpMessageParser.parseRequest(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseRequest", "parameters": "(String message)", "modifiers": "public", "return": "MgcpRequest", "signature": "MgcpRequest parseRequest(String message)", "full_signature": "public MgcpRequest parseRequest(String message)", "class_method_signature": "MgcpMessageParser.parseRequest(String message)", "testcase": false, "constructor": false}, {"identifier": "parseMgcpRequest", "parameters": "(String message, MgcpRequest request)", "modifiers": "private", "return": "void", "signature": "void parseMgcpRequest(String message, MgcpRequest request)", "full_signature": "private void parseMgcpRequest(String message, MgcpRequest request)", "class_method_signature": "MgcpMessageParser.parseMgcpRequest(String message, MgcpRequest request)", "testcase": false, "constructor": false}, {"identifier": "parseResponse", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "MgcpResponse", "signature": "MgcpResponse parseResponse(byte[] data, int offset, int length)", "full_signature": "public MgcpResponse parseResponse(byte[] data, int offset, int length)", "class_method_signature": "MgcpMessageParser.parseResponse(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseResponse", "parameters": "(String message)", "modifiers": "public", "return": "MgcpResponse", "signature": "MgcpResponse parseResponse(String message)", "full_signature": "public MgcpResponse parseResponse(String message)", "class_method_signature": "MgcpMessageParser.parseResponse(String message)", "testcase": false, "constructor": false}, {"identifier": "parseResponse", "parameters": "(String message, MgcpResponse response)", "modifiers": "private", "return": "void", "signature": "void parseResponse(String message, MgcpResponse response)", "full_signature": "private void parseResponse(String message, MgcpResponse response)", "class_method_signature": "MgcpMessageParser.parseResponse(String message, MgcpResponse response)", "testcase": false, "constructor": false}, {"identifier": "parseParametersAndSdp", "parameters": "(String[] lines, MgcpMessage message)", "modifiers": "private", "return": "void", "signature": "void parseParametersAndSdp(String[] lines, MgcpMessage message)", "full_signature": "private void parseParametersAndSdp(String[] lines, MgcpMessage message)", "class_method_signature": "MgcpMessageParser.parseParametersAndSdp(String[] lines, MgcpMessage message)", "testcase": false, "constructor": false}], "file": "control/mgcp/src/main/java/org/restcomm/media/core/control/mgcp/message/MgcpMessageParser.java"}, "focal_method": {"identifier": "parseRequest", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "MgcpRequest", "body": "public MgcpRequest parseRequest(byte[] data, int offset, int length) throws MgcpParseException {\n        return parseRequest(new String(data, offset, length));\n    }", "signature": "MgcpRequest parseRequest(byte[] data, int offset, int length)", "full_signature": "public MgcpRequest parseRequest(byte[] data, int offset, int length)", "class_method_signature": "MgcpMessageParser.parseRequest(byte[] data, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["parseRequest"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}