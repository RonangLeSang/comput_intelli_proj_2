{"test_class": {"identifier": "TimingFieldParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TimingFieldParser parser = new TimingFieldParser();", "modifier": "private final", "type": "TimingFieldParser", "declarator": "parser = new TimingFieldParser()", "var_name": "parser"}], "file": "sdp/src/test/java/org/restcomm/media/core/sdp/fields/parser/TimingFieldParserTest.java"}, "test_case": {"identifier": "testInvalidParseMissingElement", "parameters": "()", "modifiers": "@Test(expected = SdpException.class) public", "return": "void", "body": "@Test(expected = SdpException.class)\n\tpublic void testInvalidParseMissingElement() throws SdpException {\n\t\t// given\n\t\tString line = \"t=123\\n\\r\";\n\n\t\t// when\n\t\tparser.parse(line);\n\t}", "signature": "void testInvalidParseMissingElement()", "full_signature": "@Test(expected = SdpException.class) public void testInvalidParseMissingElement()", "class_method_signature": "TimingFieldParserTest.testInvalidParseMissingElement()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "TimingFieldParser", "superclass": "", "interfaces": "implements SdpParser<TimingField>", "fields": [{"original_string": "private static final String REGEX = \"^t=\\\\d+\\\\s\\\\d+$\";", "modifier": "private static final", "type": "String", "declarator": "REGEX = \"^t=\\\\d+\\\\s\\\\d+$\"", "var_name": "REGEX"}, {"original_string": "private static final Pattern PATTERN = Pattern.compile(REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(REGEX)", "var_name": "PATTERN"}], "methods": [{"identifier": "canParse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canParse(String sdp)", "full_signature": "@Override public boolean canParse(String sdp)", "class_method_signature": "TimingFieldParser.canParse(String sdp)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "TimingField", "signature": "TimingField parse(String sdp)", "full_signature": "@Override public TimingField parse(String sdp)", "class_method_signature": "TimingFieldParser.parse(String sdp)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(TimingField field, String sdp)", "modifiers": "@Override public", "return": "void", "signature": "void parse(TimingField field, String sdp)", "full_signature": "@Override public void parse(TimingField field, String sdp)", "class_method_signature": "TimingFieldParser.parse(TimingField field, String sdp)", "testcase": false, "constructor": false}], "file": "sdp/src/main/java/org/restcomm/media/core/sdp/fields/parser/TimingFieldParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "TimingField", "body": "@Override\n\tpublic TimingField parse(String sdp) throws SdpException {\n\t\ttry {\n\t\t\tString[] values = sdp.trim().substring(2).split(\" \");\n\t\t\tint startTime = Integer.parseInt(values[0]);\n\t\t\tint stopTime = Integer.parseInt(values[1]);\n\t\t\treturn new TimingField(startTime, stopTime);\n\t\t} catch (Exception e) {\n\t\t\tthrow new SdpException(PARSE_ERROR + sdp, e);\n\t\t}\n\t}", "signature": "TimingField parse(String sdp)", "full_signature": "@Override public TimingField parse(String sdp)", "class_method_signature": "TimingFieldParser.parse(String sdp)", "testcase": false, "constructor": false, "invocations": ["split", "substring", "trim", "parseInt", "parseInt"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}