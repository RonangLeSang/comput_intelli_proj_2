{"test_class": {"identifier": "PlayCollectTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScheduledExecutorService threadPool;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "threadPool", "var_name": "threadPool"}], "file": "control/mgcp/src/test/java/org/restcomm/media/core/control/mgcp/pkg/au/pc/PlayCollectTest.java"}, "test_case": {"identifier": "testCollectWithDefaultMaximumNumberOfDigits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectWithDefaultMaximumNumberOfDigits() throws InterruptedException {\n        // given\n        final Map<String, String> parameters = new HashMap<>(5);\n        parameters.put(\"iek\", \"false\");\n        // mx parameter defaults to 1\n\n        final Player player = mock(Player.class);\n        final DtmfSinkFacade detector = mock(DtmfSinkFacade.class);\n        final ListeningScheduledExecutorService executor = MoreExecutors.listeningDecorator(threadPool);\n        final MgcpEventObserver observer = mock(MgcpEventObserver.class);\n        final PlayCollect pc = new PlayCollect(player, detector, 1, parameters, executor);\n\n        // when\n        final ArgumentCaptor<MgcpEvent> eventCaptor = ArgumentCaptor.forClass(MgcpEvent.class);\n\n        pc.observe(observer);\n        pc.execute();\n\n        pc.detectorObserver.onDtmfEvent(new DtmfEvent(\"6\"));\n\n        // then\n        verify(detector, times(1)).activate();\n        verify(player, never()).activate();\n        verify(observer, timeout(100)).onEvent(eq(pc), eventCaptor.capture());\n\n        assertEquals(String.valueOf(ReturnCode.SUCCESS.code()), eventCaptor.getValue().getParameter(\"rc\"));\n        assertEquals(\"6\", eventCaptor.getValue().getParameter(\"dc\"));\n        assertEquals(\"1\", eventCaptor.getValue().getParameter(\"na\"));\n    }", "signature": "void testCollectWithDefaultMaximumNumberOfDigits()", "full_signature": "@Test public void testCollectWithDefaultMaximumNumberOfDigits()", "class_method_signature": "PlayCollectTest.testCollectWithDefaultMaximumNumberOfDigits()", "testcase": true, "constructor": false, "invocations": ["put", "mock", "mock", "listeningDecorator", "mock", "forClass", "observe", "execute", "onDtmfEvent", "activate", "verify", "times", "activate", "verify", "never", "onEvent", "verify", "timeout", "eq", "capture", "assertEquals", "valueOf", "code", "getParameter", "getValue", "assertEquals", "getParameter", "getValue", "assertEquals", "getParameter", "getValue"]}, "focal_class": {"identifier": "PlayCollect", "superclass": "extends AbstractMgcpSignal", "interfaces": "", "fields": [{"original_string": "static final String SYMBOL = \"pc\";", "modifier": "static final", "type": "String", "declarator": "SYMBOL = \"pc\"", "var_name": "SYMBOL"}, {"original_string": "private final PlayCollectFsm fsm;", "modifier": "private final", "type": "PlayCollectFsm", "declarator": "fsm", "var_name": "fsm"}, {"original_string": "private final DtmfEventSubject detector;", "modifier": "private final", "type": "DtmfEventSubject", "declarator": "detector", "var_name": "detector"}, {"original_string": "final DtmfEventObserver detectorObserver;", "modifier": "final", "type": "DtmfEventObserver", "declarator": "detectorObserver", "var_name": "detectorObserver"}, {"original_string": "private final Player player;", "modifier": "private final", "type": "Player", "declarator": "player", "var_name": "player"}, {"original_string": "final PlayerListener playerListener;", "modifier": "final", "type": "PlayerListener", "declarator": "playerListener", "var_name": "playerListener"}, {"original_string": "private final PlayCollectContext context;", "modifier": "private final", "type": "PlayCollectContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "PlayCollect", "parameters": "(Player player, DtmfEventSubject detector, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "modifiers": "public", "return": "", "signature": " PlayCollect(Player player, DtmfEventSubject detector, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "full_signature": "public  PlayCollect(Player player, DtmfEventSubject detector, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "class_method_signature": "PlayCollect.PlayCollect(Player player, DtmfEventSubject detector, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "testcase": false, "constructor": true}, {"identifier": "PlayCollect", "parameters": "(Player player, DtmfEventSubject detector, int requestId, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "modifiers": "public", "return": "", "signature": " PlayCollect(Player player, DtmfEventSubject detector, int requestId, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "full_signature": "public  PlayCollect(Player player, DtmfEventSubject detector, int requestId, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "class_method_signature": "PlayCollect.PlayCollect(Player player, DtmfEventSubject detector, int requestId, Map<String, String> parameters, ListeningScheduledExecutorService executor)", "testcase": false, "constructor": true}, {"identifier": "isParameterSupported", "parameters": "(String name)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isParameterSupported(String name)", "full_signature": "@Override protected boolean isParameterSupported(String name)", "class_method_signature": "PlayCollect.isParameterSupported(String name)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "PlayCollect.execute()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "PlayCollect.cancel()", "testcase": false, "constructor": false}], "file": "control/mgcp/src/main/java/org/restcomm/media/core/control/mgcp/pkg/au/pc/PlayCollect.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() {\n        if (!this.fsm.isStarted()) {\n            this.fsm.start(this.context);\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "PlayCollect.execute()", "testcase": false, "constructor": false, "invocations": ["isStarted", "start"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}