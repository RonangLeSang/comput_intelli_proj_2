{"test_class": {"identifier": "MgcpCommandProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "control/mgcp/src/test/java/org/restcomm/media/core/control/mgcp/command/MgcpCommandProviderTest.java"}, "test_case": {"identifier": "testProvideRqnt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProvideRqnt() {\n        // given\n        final int transactionId = 12345;\n        final Parameters<MgcpParameterType> parameters = new Parameters<>();\n        final MgcpEndpointManager endpointManager = mock(MgcpEndpointManager.class);\n        final MgcpPackageManager packageManager = mock(MgcpPackageManager.class);\n        final MgcpCallManager callManager = mock(MgcpCallManager.class);\n        final MgcpSignalProvider signalProvider = mock(MgcpSignalProvider.class);\n        final MgcpCommandProvider commandProvider = new MgcpCommandProvider(endpointManager, packageManager, signalProvider, callManager);\n\n        // when\n        MgcpCommand command = commandProvider.provide(MgcpRequestType.RQNT, transactionId, parameters);\n\n        // then\n        Assert.assertTrue(command instanceof RequestNotificationCommand);\n    }", "signature": "void testProvideRqnt()", "full_signature": "@Test public void testProvideRqnt()", "class_method_signature": "MgcpCommandProviderTest.testProvideRqnt()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "provide", "assertTrue"]}, "focal_class": {"identifier": "MgcpCommandProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MgcpEndpointManager endpointManager;", "modifier": "private final", "type": "MgcpEndpointManager", "declarator": "endpointManager", "var_name": "endpointManager"}, {"original_string": "private final MgcpSignalProvider signalProvider;", "modifier": "private final", "type": "MgcpSignalProvider", "declarator": "signalProvider", "var_name": "signalProvider"}, {"original_string": "private final MgcpPackageManager packageManager;", "modifier": "private final", "type": "MgcpPackageManager", "declarator": "packageManager", "var_name": "packageManager"}, {"original_string": "private final MgcpCallManager callManager;", "modifier": "private final", "type": "MgcpCallManager", "declarator": "callManager", "var_name": "callManager"}], "methods": [{"identifier": "MgcpCommandProvider", "parameters": "(MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider, MgcpCallManager callManager)", "modifiers": "public", "return": "", "signature": " MgcpCommandProvider(MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider, MgcpCallManager callManager)", "full_signature": "public  MgcpCommandProvider(MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider, MgcpCallManager callManager)", "class_method_signature": "MgcpCommandProvider.MgcpCommandProvider(MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider, MgcpCallManager callManager)", "testcase": false, "constructor": true}, {"identifier": "provide", "parameters": "(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "modifiers": "public", "return": "MgcpCommand", "signature": "MgcpCommand provide(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "full_signature": "public MgcpCommand provide(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "class_method_signature": "MgcpCommandProvider.provide(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "testcase": false, "constructor": false}], "file": "control/mgcp/src/main/java/org/restcomm/media/core/control/mgcp/command/MgcpCommandProvider.java"}, "focal_method": {"identifier": "provide", "parameters": "(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "modifiers": "public", "return": "MgcpCommand", "body": "public MgcpCommand provide(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters) {\n        switch (type) {\n            case CRCX:\n                return new CreateConnectionCommand(transactionId, parameters, this.endpointManager);\n\n            case MDCX:\n                return new ModifyConnectionCommand(transactionId, parameters, this.endpointManager);\n\n            case DLCX:\n                return new DeleteConnectionCommand(transactionId, parameters, this.endpointManager);\n\n            case RQNT:\n                return new RequestNotificationCommand(transactionId, parameters, this.endpointManager, this.packageManager, this.signalProvider);\n\n            case AUCX:\n                return new AuditConnectionCommand(transactionId, parameters, this.endpointManager);\n\n            case AUEP:\n                return new AuditEndpointCommand(transactionId, parameters, this.endpointManager);\n\n            default:\n                throw new IllegalArgumentException(\"Unsupported command type \" + type.name());\n        }\n    }", "signature": "MgcpCommand provide(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "full_signature": "public MgcpCommand provide(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "class_method_signature": "MgcpCommandProvider.provide(MgcpRequestType type, int transactionId, Parameters<MgcpParameterType> parameters)", "testcase": false, "constructor": false, "invocations": ["name"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}