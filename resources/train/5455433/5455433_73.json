{"test_class": {"identifier": "CandidateAttributeParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CandidateAttributeParser parser = new CandidateAttributeParser();", "modifier": "private final", "type": "CandidateAttributeParser", "declarator": "parser = new CandidateAttributeParser()", "var_name": "parser"}], "file": "sdp/src/test/java/org/restcomm/media/core/sdp/ice/attributes/parser/CandidateAttributeParserTest.java"}, "test_case": {"identifier": "testParseOverwrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParseOverwrite() throws SdpException {\n\t\t// given\n\t\tString line1 = \"a=candidate:2162486046 1 udp 1845501695 85.241.121.60 60495 typ srflx raddr 192.168.1.65 rport 54550 generation 0\\n\\r\";\n\t\tString line2 = \"a=candidate:1995739850 1 udp 2113937151 192.168.1.65 54550 typ host generation 0\\n\\r\";\n\t\t\n\t\t// when\n\t\tCandidateAttribute candidate = parser.parse(line1);\n\t\tparser.parse(candidate, line2);\n\t\t\n\t\t// then\n\t\tAssert.assertEquals(\"1995739850\", candidate.getFoundation());\n\t\tAssert.assertEquals(1, candidate.getComponentId());\n\t\tAssert.assertEquals(\"udp\", candidate.getProtocol());\n\t\tAssert.assertEquals(2113937151, candidate.getPriority());\n\t\tAssert.assertEquals(\"192.168.1.65\", candidate.getAddress());\n\t\tAssert.assertEquals(54550, candidate.getPort());\n\t\tAssert.assertEquals(\"host\", candidate.getCandidateType());\n\t\tAssert.assertEquals(0, candidate.getGeneration());\n\t\tAssert.assertNull(candidate.getRelatedAddress());\n\t\tAssert.assertEquals(0, candidate.getRelatedPort());\n\t}", "signature": "void testParseOverwrite()", "full_signature": "@Test public void testParseOverwrite()", "class_method_signature": "CandidateAttributeParserTest.testParseOverwrite()", "testcase": true, "constructor": false, "invocations": ["parse", "parse", "assertEquals", "getFoundation", "assertEquals", "getComponentId", "assertEquals", "getProtocol", "assertEquals", "getPriority", "assertEquals", "getAddress", "assertEquals", "getPort", "assertEquals", "getCandidateType", "assertEquals", "getGeneration", "assertNull", "getRelatedAddress", "assertEquals", "getRelatedPort"]}, "focal_class": {"identifier": "CandidateAttributeParser", "superclass": "", "interfaces": "implements SdpParser<CandidateAttribute>", "fields": [{"original_string": "private static final String REGEX = \"^a=candidate:\\\\w+\\\\s\\\\d\\\\s\\\\w+\\\\s\\\\d+\\\\s[0-9\\\\.]+\\\\s\\\\d+\\\\s(typ)\\\\s\\\\w+(\\\\stcptype\\\\s\\\\w+)?(\\\\s(raddr)\\\\s[0-9\\\\.]+\\\\s(rport)\\\\s\\\\d+)?\\\\s(generation)\\\\s\\\\d+$\";", "modifier": "private static final", "type": "String", "declarator": "REGEX = \"^a=candidate:\\\\w+\\\\s\\\\d\\\\s\\\\w+\\\\s\\\\d+\\\\s[0-9\\\\.]+\\\\s\\\\d+\\\\s(typ)\\\\s\\\\w+(\\\\stcptype\\\\s\\\\w+)?(\\\\s(raddr)\\\\s[0-9\\\\.]+\\\\s(rport)\\\\s\\\\d+)?\\\\s(generation)\\\\s\\\\d+$\"", "var_name": "REGEX"}, {"original_string": "private static final Pattern PATTERN = Pattern.compile(REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(REGEX)", "var_name": "PATTERN"}], "methods": [{"identifier": "canParse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canParse(String sdp)", "full_signature": "@Override public boolean canParse(String sdp)", "class_method_signature": "CandidateAttributeParser.canParse(String sdp)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "CandidateAttribute", "signature": "CandidateAttribute parse(String sdp)", "full_signature": "@Override public CandidateAttribute parse(String sdp)", "class_method_signature": "CandidateAttributeParser.parse(String sdp)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(CandidateAttribute field, String sdp)", "modifiers": "@Override public", "return": "void", "signature": "void parse(CandidateAttribute field, String sdp)", "full_signature": "@Override public void parse(CandidateAttribute field, String sdp)", "class_method_signature": "CandidateAttributeParser.parse(CandidateAttribute field, String sdp)", "testcase": false, "constructor": false}], "file": "sdp/src/main/java/org/restcomm/media/core/sdp/ice/attributes/parser/CandidateAttributeParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "CandidateAttribute", "body": "@Override\n\tpublic CandidateAttribute parse(String sdp) throws SdpException {\n\t\ttry {\n\t\t\tString[] values = sdp.trim().substring(12).split(\" \");\n\t\t\tint index = 0;\n\n\t\t\t// extract data from SDP\n\t\t\tString foundation = values[index++];\n\t\t\tshort componentId = Short.parseShort(values[index++]);\n\t\t\tString protocol = values[index++];\n\t\t\tlong priority = Long.parseLong(values[index++]);\n\t\t\tString address = values[index++];\n\t\t\tint port = Integer.parseInt(values[index++]);\n\t\t\tindex++; // TYP\n\t\t\tString type = values[index++];\n\t\t\t\n\t\t\tif(!CandidateAttribute.isCandidateTypeValid(type)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Unrecognized candidate type: \" + type);\n\t\t\t}\n\t\t\t\n\t\t\tString relatedAddress = null;\n\t\t\tint relatedPort = 0;\n\t\t\tif(!CandidateAttribute.TYP_HOST.equals(type)) {\n\t\t\t\tindex++; // RADDR\n\t\t\t\trelatedAddress = values[index++];\n\t\t\t\tindex++; // RPORT\n\t\t\t\trelatedPort = Integer.parseInt(values[index++]);\n\t\t\t}\n\t\t\t\n\t\t\tString tcptype = null;\n\t\t\tif(protocol.equalsIgnoreCase(\"tcp\")) {\n\t\t\t\tindex++; // TCPTYPE\n\t\t\t\ttcptype = values[index++];\n\t\t\t}\n\t\t\t\n\t\t\tindex++; // GENERATION which is optional\n\t\t\tint generation = 0;\n\t\t\tif(index == values.length - 1) {\n\t\t\t\tgeneration = Integer.parseInt(values[index]);\n\t\t\t}\n\t\t\t\n\t\t\t// Create object from extracted data\n\t\t\tCandidateAttribute candidate = new CandidateAttribute();\n\t\t\tcandidate.setFoundation(foundation);\n\t\t\tcandidate.setComponentId(componentId);\n\t\t\tcandidate.setProtocol(protocol);\n\t\t\tcandidate.setPriority(priority);\n\t\t\tcandidate.setAddress(address);\n\t\t\tcandidate.setPort(port);\n\t\t\tcandidate.setCandidateType(type);\n\t\t\tcandidate.setRelatedAddress(relatedAddress);\n\t\t\tcandidate.setRelatedPort(relatedPort);\n\t\t\tcandidate.setTcpType(tcptype);\n\t\t\tcandidate.setGeneration(generation);\n\t\t\treturn candidate;\n\t\t} catch (Exception e) {\n\t\t\tthrow new SdpException(PARSE_ERROR + sdp, e);\n\t\t}\n\t}", "signature": "CandidateAttribute parse(String sdp)", "full_signature": "@Override public CandidateAttribute parse(String sdp)", "class_method_signature": "CandidateAttributeParser.parse(String sdp)", "testcase": false, "constructor": false, "invocations": ["split", "substring", "trim", "parseShort", "parseLong", "parseInt", "isCandidateTypeValid", "equals", "parseInt", "equalsIgnoreCase", "parseInt", "setFoundation", "setComponentId", "setProtocol", "setPriority", "setAddress", "setPort", "setCandidateType", "setRelatedAddress", "setRelatedPort", "setTcpType", "setGeneration"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}