{"test_class": {"identifier": "FSMTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FSM fsm;", "modifier": "private", "type": "FSM", "declarator": "fsm", "var_name": "fsm"}, {"original_string": "private ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "scheduler = Executors.newScheduledThreadPool(1)", "var_name": "scheduler"}, {"original_string": "private boolean onEnterEvent = false;", "modifier": "private", "type": "boolean", "declarator": "onEnterEvent = false", "var_name": "onEnterEvent"}, {"original_string": "private boolean onExit = false;", "modifier": "private", "type": "boolean", "declarator": "onExit = false", "var_name": "onExit"}, {"original_string": "private boolean transition = false;", "modifier": "private", "type": "boolean", "declarator": "transition = false", "var_name": "transition"}], "file": "client/jsr-309/driver/src/test/java/org/restcomm/fsm/FSMTest.java"}, "test_case": {"identifier": "testSetStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetStart() {\n        fsm.createState(\"start\");\n        fsm.createState(\"state1\");\n        fsm.createState(\"end\");\n        \n        fsm.setStart(\"start\");\n        fsm.setEnd(\"end\");\n        \n        assertEquals(\"start\", fsm.getState().getName());\n    }", "signature": "void testSetStart()", "full_signature": "@Test public void testSetStart()", "class_method_signature": "FSMTest.testSetStart()", "testcase": true, "constructor": false, "invocations": ["createState", "createState", "createState", "setStart", "setEnd", "assertEquals", "getName", "getState"]}, "focal_class": {"identifier": "FSM", "superclass": "", "interfaces": "implements Runnable, Serializable", "fields": [{"original_string": "protected State start;", "modifier": "protected", "type": "State", "declarator": "start", "var_name": "start"}, {"original_string": "protected State end;", "modifier": "protected", "type": "State", "declarator": "end", "var_name": "end"}, {"original_string": "private HashMap<String, State> states = new HashMap();", "modifier": "private", "type": "HashMap<String, State>", "declarator": "states = new HashMap()", "var_name": "states"}, {"original_string": "protected State state;", "modifier": "protected", "type": "State", "declarator": "state", "var_name": "state"}, {"original_string": "private ReentrantLock lock = new ReentrantLock();", "modifier": "private", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private HashMap attributes = new HashMap();", "modifier": "private", "type": "HashMap", "declarator": "attributes = new HashMap()", "var_name": "attributes"}, {"original_string": "protected ScheduledExecutorService scheduler;", "modifier": "protected", "type": "ScheduledExecutorService", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "protected ScheduledFuture timer;", "modifier": "protected", "type": "ScheduledFuture", "declarator": "timer", "var_name": "timer"}, {"original_string": "protected Logger logger;", "modifier": "protected", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "FSM", "parameters": "(ScheduledExecutorService scheduler)", "modifiers": "public", "return": "", "signature": " FSM(ScheduledExecutorService scheduler)", "full_signature": "public  FSM(ScheduledExecutorService scheduler)", "class_method_signature": "FSM.FSM(ScheduledExecutorService scheduler)", "testcase": false, "constructor": true}, {"identifier": "setLogger", "parameters": "(Logger logger)", "modifiers": "public", "return": "void", "signature": "void setLogger(Logger logger)", "full_signature": "public void setLogger(Logger logger)", "class_method_signature": "FSM.setLogger(Logger logger)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getState()", "full_signature": "public State getState()", "class_method_signature": "FSM.getState()", "testcase": false, "constructor": false}, {"identifier": "setStart", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setStart(String name)", "full_signature": "public void setStart(String name)", "class_method_signature": "FSM.setStart(String name)", "testcase": false, "constructor": false}, {"identifier": "setEnd", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setEnd(String name)", "full_signature": "public void setEnd(String name)", "class_method_signature": "FSM.setEnd(String name)", "testcase": false, "constructor": false}, {"identifier": "createState", "parameters": "(String name)", "modifiers": "public", "return": "State", "signature": "State createState(String name)", "full_signature": "public State createState(String name)", "class_method_signature": "FSM.createState(String name)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, Object value)", "modifiers": "public", "return": "void", "signature": "void setAttribute(String name, Object value)", "full_signature": "public void setAttribute(String name, Object value)", "class_method_signature": "FSM.setAttribute(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name)", "modifiers": "public", "return": "Object", "signature": "Object getAttribute(String name)", "full_signature": "public Object getAttribute(String name)", "class_method_signature": "FSM.getAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void removeAttribute(String name)", "full_signature": "public void removeAttribute(String name)", "class_method_signature": "FSM.removeAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "createTransition", "parameters": "(String name, String from, String to)", "modifiers": "public", "return": "Transition", "signature": "Transition createTransition(String name, String from, String to)", "full_signature": "public Transition createTransition(String name, String from, String to)", "class_method_signature": "FSM.createTransition(String name, String from, String to)", "testcase": false, "constructor": false}, {"identifier": "createTimeoutTransition", "parameters": "(String from, String to, long timeout)", "modifiers": "public", "return": "Transition", "signature": "Transition createTimeoutTransition(String from, String to, long timeout)", "full_signature": "public Transition createTimeoutTransition(String from, String to, long timeout)", "class_method_signature": "FSM.createTimeoutTransition(String from, String to, long timeout)", "testcase": false, "constructor": false}, {"identifier": "signal", "parameters": "(String name)", "modifiers": "public synchronized", "return": "void", "signature": "void signal(String name)", "full_signature": "public synchronized void signal(String name)", "class_method_signature": "FSM.signal(String name)", "testcase": false, "constructor": false}, {"identifier": "signalAsync", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void signalAsync(String name)", "full_signature": "public void signalAsync(String name)", "class_method_signature": "FSM.signalAsync(String name)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "FSM.run()", "testcase": false, "constructor": false}], "file": "client/jsr-309/driver/src/main/java/org/restcomm/fsm/FSM.java"}, "focal_method": {"identifier": "setStart", "parameters": "(String name)", "modifiers": "public", "return": "void", "body": "public void setStart(String name) {\n        //the start state already has value wich differs from current state? \n        if (this.start != null && state != null) {\n            throw new IllegalStateException(\"Start state can be changed now\");\n        }\n        this.start = states.get(name);\n        this.state = start;\n    }", "signature": "void setStart(String name)", "full_signature": "public void setStart(String name)", "class_method_signature": "FSM.setStart(String name)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}