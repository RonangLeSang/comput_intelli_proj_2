{"test_class": {"identifier": "DeleteConnectionCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "control/mgcp/src/test/java/org/restcomm/media/core/control/mgcp/command/DeleteConnectionCommandTest.java"}, "test_case": {"identifier": "testNoCallFoundWhenDeletingMultipleConnections", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoCallFoundWhenDeletingMultipleConnections() throws MgcpException {\n        // given\n        final StringBuilder builder = new StringBuilder();\n        builder.append(\"DLCX 147483653 mobicents/bridge/1@127.0.0.1:2427 MGCP 1.0\").append(System.lineSeparator());\n        builder.append(\"C:1\").append(System.lineSeparator());\n\n        final int transactionId = 147483653;\n        final MgcpMessageParser parser = new MgcpMessageParser();\n        final MgcpRequest request = parser.parseRequest(builder.toString());\n        final MgcpEndpointManager endpointManager = mock(MgcpEndpointManager.class);\n        final MgcpEndpoint bridgeEndpoint = mock(MgcpEndpoint.class);\n        final DeleteConnectionCommand dlcx = new DeleteConnectionCommand(transactionId, request.getParameters(), endpointManager);\n\n        // when\n        when(endpointManager.getEndpoint(\"mobicents/bridge/1@127.0.0.1:2427\")).thenReturn(bridgeEndpoint);\n        when(bridgeEndpoint.deleteConnections(1)).thenThrow(new MgcpCallNotFoundException(\"\"));\n\n        MgcpCommandResult result = dlcx.call();\n\n        // then\n        verify(bridgeEndpoint, times(1)).deleteConnections(1);\n\n        assertNotNull(result);\n        assertEquals(MgcpResponseCode.TRANSACTION_WAS_EXECUTED.code(), result.getCode());\n        assertNull(result.getParameters().getString(MgcpParameterType.CONNECTION_PARAMETERS).orNull());\n    }", "signature": "void testNoCallFoundWhenDeletingMultipleConnections()", "full_signature": "@Test public void testNoCallFoundWhenDeletingMultipleConnections()", "class_method_signature": "DeleteConnectionCommandTest.testNoCallFoundWhenDeletingMultipleConnections()", "testcase": true, "constructor": false, "invocations": ["append", "append", "lineSeparator", "append", "append", "lineSeparator", "parseRequest", "toString", "mock", "mock", "getParameters", "thenReturn", "when", "getEndpoint", "thenThrow", "when", "deleteConnections", "call", "deleteConnections", "verify", "times", "assertNotNull", "assertEquals", "code", "getCode", "assertNull", "orNull", "getString", "getParameters"]}, "focal_class": {"identifier": "DeleteConnectionCommand", "superclass": "extends AbstractMgcpCommand", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(DeleteConnectionCommand.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(DeleteConnectionCommand.class)", "var_name": "log"}], "methods": [{"identifier": "DeleteConnectionCommand", "parameters": "(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager)", "modifiers": "public", "return": "", "signature": " DeleteConnectionCommand(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager)", "full_signature": "public  DeleteConnectionCommand(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager)", "class_method_signature": "DeleteConnectionCommand.DeleteConnectionCommand(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager)", "testcase": false, "constructor": true}, {"identifier": "validateParameters", "parameters": "(Parameters<MgcpParameterType> parameters, DlcxContext context)", "modifiers": "private", "return": "void", "signature": "void validateParameters(Parameters<MgcpParameterType> parameters, DlcxContext context)", "full_signature": "private void validateParameters(Parameters<MgcpParameterType> parameters, DlcxContext context)", "class_method_signature": "DeleteConnectionCommand.validateParameters(Parameters<MgcpParameterType> parameters, DlcxContext context)", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "(DlcxContext context)", "modifiers": "private", "return": "void", "signature": "void executeCommand(DlcxContext context)", "full_signature": "private void executeCommand(DlcxContext context)", "class_method_signature": "DeleteConnectionCommand.executeCommand(DlcxContext context)", "testcase": false, "constructor": false}, {"identifier": "respond", "parameters": "(DlcxContext context)", "modifiers": "private", "return": "MgcpCommandResult", "signature": "MgcpCommandResult respond(DlcxContext context)", "full_signature": "private MgcpCommandResult respond(DlcxContext context)", "class_method_signature": "DeleteConnectionCommand.respond(DlcxContext context)", "testcase": false, "constructor": false}, {"identifier": "translateContext", "parameters": "(DlcxContext context, Parameters<MgcpParameterType> parameters)", "modifiers": "private", "return": "void", "signature": "void translateContext(DlcxContext context, Parameters<MgcpParameterType> parameters)", "full_signature": "private void translateContext(DlcxContext context, Parameters<MgcpParameterType> parameters)", "class_method_signature": "DeleteConnectionCommand.translateContext(DlcxContext context, Parameters<MgcpParameterType> parameters)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "MgcpCommandResult", "signature": "MgcpCommandResult call()", "full_signature": "@Override public MgcpCommandResult call()", "class_method_signature": "DeleteConnectionCommand.call()", "testcase": false, "constructor": false}], "file": "control/mgcp/src/main/java/org/restcomm/media/core/control/mgcp/command/DeleteConnectionCommand.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "MgcpCommandResult", "body": "@Override\n    public MgcpCommandResult call() {\n        // Initialize empty context\n        DlcxContext context = new DlcxContext();\n        try {\n            // Validate Parameters\n            validateParameters(this.requestParameters, context);\n            // Execute Command\n            executeCommand(context);\n            context.code = MgcpResponseCode.TRANSACTION_WAS_EXECUTED.code();\n            context.message = MgcpResponseCode.TRANSACTION_WAS_EXECUTED.message();\n        } catch (RuntimeException e) {\n            log.error(\"Unexpected error occurred during tx=\" + this.transactionId + \" execution. Rolling back.\");\n            context.code = MgcpResponseCode.PROTOCOL_ERROR.code();\n            context.message = MgcpResponseCode.PROTOCOL_ERROR.message();\n        } catch (MgcpCallNotFoundException e) {\n            log.error(\"Protocol error occurred during tx=\" + this.transactionId + \" execution: \" + e.getMessage());\n            context.code = MgcpResponseCode.INCORRECT_CALL_ID.code();\n            context.message = MgcpResponseCode.INCORRECT_CALL_ID.message();\n        } catch (MgcpConnectionNotFoundException e) {\n            log.error(\"Protocol error occurred during tx=\" + this.transactionId + \" execution: \" + e.getMessage());\n            context.code = MgcpResponseCode.INCORRECT_CONNECTION_ID.code();\n            context.message = MgcpResponseCode.INCORRECT_CONNECTION_ID.message();\n        }  catch (MgcpCommandException e) {\n            log.error(\"Protocol error occurred during tx=\" + this.transactionId + \" execution: \" + e.getMessage());\n            context.code = e.getCode();\n            context.message = e.getMessage();\n        }\n        // Build response\n        return respond(context);\n    }", "signature": "MgcpCommandResult call()", "full_signature": "@Override public MgcpCommandResult call()", "class_method_signature": "DeleteConnectionCommand.call()", "testcase": false, "constructor": false, "invocations": ["validateParameters", "executeCommand", "code", "message", "error", "code", "message", "error", "getMessage", "code", "message", "error", "getMessage", "code", "message", "error", "getMessage", "getCode", "getMessage", "respond"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}