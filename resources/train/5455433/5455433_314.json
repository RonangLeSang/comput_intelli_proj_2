{"test_class": {"identifier": "PlayRecordTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ScheduledExecutorService threadPool = Executors.newScheduledThreadPool(1);", "modifier": "private static final", "type": "ScheduledExecutorService", "declarator": "threadPool = Executors.newScheduledThreadPool(1)", "var_name": "threadPool"}], "file": "control/mgcp/src/test/java/org/restcomm/media/core/control/mgcp/pkg/au/pr/PlayRecordTest.java"}, "test_case": {"identifier": "testRecordWithNoSpeech", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRecordWithNoSpeech() throws InterruptedException {\n        // given\n        final Map<String, String> parameters = new HashMap<>(5);\n        parameters.put(\"ri\", \"RE0001\");\n        parameters.put(\"rlt\", \"100\");\n        \n        final MgcpEventObserver observer = mock(MgcpEventObserver.class);\n        final Recorder recorder = mock(Recorder.class);\n        final DtmfSinkFacade detector = mock(DtmfSinkFacade.class);\n        final Player player = mock(Player.class);\n        final PlayRecord pr = new PlayRecord(player, detector, recorder, 1, parameters);\n        \n        // when\n        final ArgumentCaptor<MgcpEvent> eventCaptor = ArgumentCaptor.forClass(MgcpEvent.class);\n        \n        pr.observe(observer);\n        pr.execute();\n        \n        RecorderEventImpl recorderStop = new RecorderEventImpl(RecorderEvent.STOP, recorder);\n        recorderStop.setQualifier(RecorderEvent.NO_SPEECH);\n        pr.recorderListener.process(recorderStop);\n        \n        // then\n        verify(detector, times(1)).activate();\n        verify(recorder, times(1)).activate();\n        verify(player, never()).activate();\n        verify(detector, times(1)).deactivate();\n        verify(recorder, times(1)).deactivate();\n        verify(observer, timeout(100)).onEvent(eq(pr), eventCaptor.capture());\n        \n        assertEquals(String.valueOf(ReturnCode.NO_SPEECH.code()), eventCaptor.getValue().getParameter(\"rc\"));\n        assertEquals(\"1\", eventCaptor.getValue().getParameter(\"na\"));\n    }", "signature": "void testRecordWithNoSpeech()", "full_signature": "@Test public void testRecordWithNoSpeech()", "class_method_signature": "PlayRecordTest.testRecordWithNoSpeech()", "testcase": true, "constructor": false, "invocations": ["put", "put", "mock", "mock", "mock", "mock", "forClass", "observe", "execute", "setQualifier", "process", "activate", "verify", "times", "activate", "verify", "times", "activate", "verify", "never", "deactivate", "verify", "times", "deactivate", "verify", "times", "onEvent", "verify", "timeout", "eq", "capture", "assertEquals", "valueOf", "code", "getParameter", "getValue", "assertEquals", "getParameter", "getValue"]}, "focal_class": {"identifier": "PlayRecord", "superclass": "extends AbstractMgcpSignal", "interfaces": "", "fields": [{"original_string": "static final String SYMBOL = \"pr\";", "modifier": "static final", "type": "String", "declarator": "SYMBOL = \"pr\"", "var_name": "SYMBOL"}, {"original_string": "private final PlayRecordFsm fsm;", "modifier": "private final", "type": "PlayRecordFsm", "declarator": "fsm", "var_name": "fsm"}, {"original_string": "private final Player player;", "modifier": "private final", "type": "Player", "declarator": "player", "var_name": "player"}, {"original_string": "final PlayerListener playerListener;", "modifier": "final", "type": "PlayerListener", "declarator": "playerListener", "var_name": "playerListener"}, {"original_string": "private final DtmfEventSubject detector;", "modifier": "private final", "type": "DtmfEventSubject", "declarator": "detector", "var_name": "detector"}, {"original_string": "final DtmfEventObserver detectorObserver;", "modifier": "final", "type": "DtmfEventObserver", "declarator": "detectorObserver", "var_name": "detectorObserver"}, {"original_string": "private final Recorder recorder;", "modifier": "private final", "type": "Recorder", "declarator": "recorder", "var_name": "recorder"}, {"original_string": "final RecorderListener recorderListener;", "modifier": "final", "type": "RecorderListener", "declarator": "recorderListener", "var_name": "recorderListener"}, {"original_string": "private final PlayRecordContext context;", "modifier": "private final", "type": "PlayRecordContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "PlayRecord", "parameters": "(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters)", "modifiers": "public", "return": "", "signature": " PlayRecord(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters)", "full_signature": "public  PlayRecord(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters)", "class_method_signature": "PlayRecord.PlayRecord(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, NotifiedEntity notifiedEntity, Map<String, String> parameters)", "testcase": false, "constructor": true}, {"identifier": "PlayRecord", "parameters": "(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, Map<String, String> parameters)", "modifiers": "public", "return": "", "signature": " PlayRecord(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, Map<String, String> parameters)", "full_signature": "public  PlayRecord(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, Map<String, String> parameters)", "class_method_signature": "PlayRecord.PlayRecord(Player player, DtmfEventSubject detector, Recorder recorder, int requestId, Map<String, String> parameters)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "PlayRecord.execute()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "PlayRecord.cancel()", "testcase": false, "constructor": false}, {"identifier": "isParameterSupported", "parameters": "(String name)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isParameterSupported(String name)", "full_signature": "@Override protected boolean isParameterSupported(String name)", "class_method_signature": "PlayRecord.isParameterSupported(String name)", "testcase": false, "constructor": false}], "file": "control/mgcp/src/main/java/org/restcomm/media/core/control/mgcp/pkg/au/pr/PlayRecord.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() {\n        if (!this.fsm.isStarted()) {\n            this.fsm.start(this.context);\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "PlayRecord.execute()", "testcase": false, "constructor": false, "invocations": ["isStarted", "start"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}