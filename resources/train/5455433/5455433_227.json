{"test_class": {"identifier": "MgcpEndpointManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAMESPACE_BRIDGE = \"mobicents/bridge/\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE_BRIDGE = \"mobicents/bridge/\"", "var_name": "NAMESPACE_BRIDGE"}, {"original_string": "private static final String NAMESPACE_IVR = \"mobicents/ivr/\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE_IVR = \"mobicents/ivr/\"", "var_name": "NAMESPACE_IVR"}, {"original_string": "private static final String NAMESPACE_CNF = \"mobicents/cnf/\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE_CNF = \"mobicents/cnf/\"", "var_name": "NAMESPACE_CNF"}], "file": "control/mgcp/src/test/java/org/restcomm/media/core/control/mgcp/endpoint/MgcpEndpointManagerTest.java"}, "test_case": {"identifier": "testRegisterUnknownEndpoint", "parameters": "()", "modifiers": "@Test(expected = UnrecognizedMgcpNamespaceException.class) public", "return": "void", "body": "@Test(expected = UnrecognizedMgcpNamespaceException.class)\n    public void testRegisterUnknownEndpoint() throws UnrecognizedMgcpNamespaceException {\n        // given\n        MgcpEndpointManager endpointManager = new MgcpEndpointManager();\n\n        // when\n        endpointManager.registerEndpoint(NAMESPACE_BRIDGE);\n    }", "signature": "void testRegisterUnknownEndpoint()", "full_signature": "@Test(expected = UnrecognizedMgcpNamespaceException.class) public void testRegisterUnknownEndpoint()", "class_method_signature": "MgcpEndpointManagerTest.testRegisterUnknownEndpoint()", "testcase": true, "constructor": false, "invocations": ["registerEndpoint"]}, "focal_class": {"identifier": "MgcpEndpointManager", "superclass": "", "interfaces": "implements MgcpEndpointObserver, MgcpMessageObserver, MgcpMessageSubject", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(MgcpEndpointManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(MgcpEndpointManager.class)", "var_name": "log"}, {"original_string": "private final ConcurrentHashMap<String, MgcpEndpointProvider<?>> providers;", "modifier": "private final", "type": "ConcurrentHashMap<String, MgcpEndpointProvider<?>>", "declarator": "providers", "var_name": "providers"}, {"original_string": "private final ConcurrentHashMap<String, MgcpEndpoint> endpoints;", "modifier": "private final", "type": "ConcurrentHashMap<String, MgcpEndpoint>", "declarator": "endpoints", "var_name": "endpoints"}, {"original_string": "private final Set<MgcpMessageObserver> observers;", "modifier": "private final", "type": "Set<MgcpMessageObserver>", "declarator": "observers", "var_name": "observers"}], "methods": [{"identifier": "MgcpEndpointManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " MgcpEndpointManager()", "full_signature": "public  MgcpEndpointManager()", "class_method_signature": "MgcpEndpointManager.MgcpEndpointManager()", "testcase": false, "constructor": true}, {"identifier": "installProvider", "parameters": "(MgcpEndpointProvider<?> provider)", "modifiers": "public", "return": "void", "signature": "void installProvider(MgcpEndpointProvider<?> provider)", "full_signature": "public void installProvider(MgcpEndpointProvider<?> provider)", "class_method_signature": "MgcpEndpointManager.installProvider(MgcpEndpointProvider<?> provider)", "testcase": false, "constructor": false}, {"identifier": "uninstallProvider", "parameters": "(String namespace)", "modifiers": "public", "return": "void", "signature": "void uninstallProvider(String namespace)", "full_signature": "public void uninstallProvider(String namespace)", "class_method_signature": "MgcpEndpointManager.uninstallProvider(String namespace)", "testcase": false, "constructor": false}, {"identifier": "supportsNamespace", "parameters": "(String namespace)", "modifiers": "public", "return": "boolean", "signature": "boolean supportsNamespace(String namespace)", "full_signature": "public boolean supportsNamespace(String namespace)", "class_method_signature": "MgcpEndpointManager.supportsNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "registerEndpoint", "parameters": "(String namespace)", "modifiers": "public", "return": "MgcpEndpoint", "signature": "MgcpEndpoint registerEndpoint(String namespace)", "full_signature": "public MgcpEndpoint registerEndpoint(String namespace)", "class_method_signature": "MgcpEndpointManager.registerEndpoint(String namespace)", "testcase": false, "constructor": false}, {"identifier": "getEndpoint", "parameters": "(String endpointId)", "modifiers": "public", "return": "MgcpEndpoint", "signature": "MgcpEndpoint getEndpoint(String endpointId)", "full_signature": "public MgcpEndpoint getEndpoint(String endpointId)", "class_method_signature": "MgcpEndpointManager.getEndpoint(String endpointId)", "testcase": false, "constructor": false}, {"identifier": "unregisterEndpoint", "parameters": "(String endpointId)", "modifiers": "public", "return": "void", "signature": "void unregisterEndpoint(String endpointId)", "full_signature": "public void unregisterEndpoint(String endpointId)", "class_method_signature": "MgcpEndpointManager.unregisterEndpoint(String endpointId)", "testcase": false, "constructor": false}, {"identifier": "onMessage", "parameters": "(InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "modifiers": "@Override public", "return": "void", "signature": "void onMessage(InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "full_signature": "@Override public void onMessage(InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "class_method_signature": "MgcpEndpointManager.onMessage(InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "(MgcpMessageObserver observer)", "modifiers": "@Override public", "return": "void", "signature": "void observe(MgcpMessageObserver observer)", "full_signature": "@Override public void observe(MgcpMessageObserver observer)", "class_method_signature": "MgcpEndpointManager.observe(MgcpMessageObserver observer)", "testcase": false, "constructor": false}, {"identifier": "forget", "parameters": "(MgcpMessageObserver observer)", "modifiers": "@Override public", "return": "void", "signature": "void forget(MgcpMessageObserver observer)", "full_signature": "@Override public void forget(MgcpMessageObserver observer)", "class_method_signature": "MgcpEndpointManager.forget(MgcpMessageObserver observer)", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "(Object originator, InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "modifiers": "@Override public", "return": "void", "signature": "void notify(Object originator, InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "full_signature": "@Override public void notify(Object originator, InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "class_method_signature": "MgcpEndpointManager.notify(Object originator, InetSocketAddress from, InetSocketAddress to, MgcpMessage message, MessageDirection direction)", "testcase": false, "constructor": false}, {"identifier": "onEndpointStateChanged", "parameters": "(MgcpEndpoint endpoint, MgcpEndpointState state)", "modifiers": "@Override public", "return": "void", "signature": "void onEndpointStateChanged(MgcpEndpoint endpoint, MgcpEndpointState state)", "full_signature": "@Override public void onEndpointStateChanged(MgcpEndpoint endpoint, MgcpEndpointState state)", "class_method_signature": "MgcpEndpointManager.onEndpointStateChanged(MgcpEndpoint endpoint, MgcpEndpointState state)", "testcase": false, "constructor": false}], "file": "control/mgcp/src/main/java/org/restcomm/media/core/control/mgcp/endpoint/MgcpEndpointManager.java"}, "focal_method": {"identifier": "registerEndpoint", "parameters": "(String namespace)", "modifiers": "public", "return": "MgcpEndpoint", "body": "public MgcpEndpoint registerEndpoint(String namespace) throws UnrecognizedMgcpNamespaceException {\n        // Get correct endpoint provider\n        MgcpEndpointProvider<?> provider = this.providers.get(namespace);\n        if (provider == null) {\n            throw new UnrecognizedMgcpNamespaceException(\"Namespace \" + namespace + \" is unrecognized\");\n        }\n\n        // Create the endpoint and register it\n        MgcpEndpoint endpoint = provider.provide();\n        endpoint.observe((MgcpEndpointObserver) this);\n        endpoint.observe((MgcpMessageObserver) this);\n        this.endpoints.put(endpoint.getEndpointId().toString(), endpoint);\n        \n        if (log.isDebugEnabled()) {\n            log.debug(\"Registered endpoint \" + endpoint.getEndpointId().toString() + \". Count: \" + this.endpoints.size());\n        }\n        \n        return endpoint;\n    }", "signature": "MgcpEndpoint registerEndpoint(String namespace)", "full_signature": "public MgcpEndpoint registerEndpoint(String namespace)", "class_method_signature": "MgcpEndpointManager.registerEndpoint(String namespace)", "testcase": false, "constructor": false, "invocations": ["get", "provide", "observe", "observe", "put", "toString", "getEndpointId", "isDebugEnabled", "debug", "toString", "getEndpointId", "size"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}