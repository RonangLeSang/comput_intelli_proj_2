{"test_class": {"identifier": "RestrictedNetworkGuardTest", "superclass": "", "interfaces": "", "fields": [], "file": "network/src/test/java/org/restcomm/media/core/network/deprecated/channel/RestrictedNetworkGuardTest.java"}, "test_case": {"identifier": "testInsecureSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInsecureSource() {\n        // given\n        final String subnet = \"255.255.255.0\";\n        final String network = \"192.168.1.0\";\n        final InetSocketAddress remoteAddress = new InetSocketAddress(\"192.168.2.4\", 2727);\n        final NetworkChannel channel = Mockito.mock(NetworkChannel.class);\n        final NetworkGuard guard = new RestrictedNetworkGuard(network, subnet);\n\n        // when\n        final boolean secure = guard.isSecure(channel, remoteAddress);\n\n        // then\n        Assert.assertFalse(secure);\n    }", "signature": "void testInsecureSource()", "full_signature": "@Test public void testInsecureSource()", "class_method_signature": "RestrictedNetworkGuardTest.testInsecureSource()", "testcase": true, "constructor": false, "invocations": ["mock", "isSecure", "assertFalse"]}, "focal_class": {"identifier": "RestrictedNetworkGuard", "superclass": "", "interfaces": "implements NetworkGuard", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(RestrictedNetworkGuard.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(RestrictedNetworkGuard.class)", "var_name": "log"}, {"original_string": "private final String network;", "modifier": "private final", "type": "String", "declarator": "network", "var_name": "network"}, {"original_string": "private final String subnet;", "modifier": "private final", "type": "String", "declarator": "subnet", "var_name": "subnet"}], "methods": [{"identifier": "RestrictedNetworkGuard", "parameters": "(String network, String subnet)", "modifiers": "public", "return": "", "signature": " RestrictedNetworkGuard(String network, String subnet)", "full_signature": "public  RestrictedNetworkGuard(String network, String subnet)", "class_method_signature": "RestrictedNetworkGuard.RestrictedNetworkGuard(String network, String subnet)", "testcase": false, "constructor": true}, {"identifier": "isSecure", "parameters": "(NetworkChannel channel, InetSocketAddress source)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSecure(NetworkChannel channel, InetSocketAddress source)", "full_signature": "@Override public boolean isSecure(NetworkChannel channel, InetSocketAddress source)", "class_method_signature": "RestrictedNetworkGuard.isSecure(NetworkChannel channel, InetSocketAddress source)", "testcase": false, "constructor": false}], "file": "network/src/main/java/org/restcomm/media/core/network/deprecated/channel/RestrictedNetworkGuard.java"}, "focal_method": {"identifier": "isSecure", "parameters": "(NetworkChannel channel, InetSocketAddress source)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isSecure(NetworkChannel channel, InetSocketAddress source) {\n        byte[] networkBytes = IPAddressCompare.addressToByteArrayV4(this.network);\n        byte[] subnetBytes = IPAddressCompare.addressToByteArrayV4(this.subnet);\n        boolean secure = IPAddressCompare.isInRangeV4(networkBytes, subnetBytes, source.getAddress().getAddress());\n\n        if (log.isTraceEnabled()) {\n            log.trace(\"Is packet secure? \" + secure + \" [network=\" + this.network + \", subnet=\" + this.subnet + \", remote address=\" + source.getAddress().getHostAddress() + \"]\");\n        }\n\n        return secure;\n    }", "signature": "boolean isSecure(NetworkChannel channel, InetSocketAddress source)", "full_signature": "@Override public boolean isSecure(NetworkChannel channel, InetSocketAddress source)", "class_method_signature": "RestrictedNetworkGuard.isSecure(NetworkChannel channel, InetSocketAddress source)", "testcase": false, "constructor": false, "invocations": ["addressToByteArrayV4", "addressToByteArrayV4", "isInRangeV4", "getAddress", "getAddress", "isTraceEnabled", "trace", "getHostAddress", "getAddress"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}