{"test_class": {"identifier": "FingerprintAttributeParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FingerprintAttributeParser parser = new FingerprintAttributeParser();", "modifier": "private final", "type": "FingerprintAttributeParser", "declarator": "parser = new FingerprintAttributeParser()", "var_name": "parser"}], "file": "sdp/src/test/java/org/restcomm/media/core/sdp/dtls/attributes/parser/FingerprintAttributeParserTest.java"}, "test_case": {"identifier": "testParseMissingFingerprint", "parameters": "()", "modifiers": "@Test(expected=SdpException.class) public", "return": "void", "body": "@Test(expected=SdpException.class)\n\tpublic void testParseMissingFingerprint() throws SdpException {\n\t\t// given\n\t\tString sdp1 = \"a=fingerprint:sha-256\";\n\t\t\n\t\t// when\n\t\tparser.parse(sdp1);\n\t}", "signature": "void testParseMissingFingerprint()", "full_signature": "@Test(expected=SdpException.class) public void testParseMissingFingerprint()", "class_method_signature": "FingerprintAttributeParserTest.testParseMissingFingerprint()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "FingerprintAttributeParser", "superclass": "", "interfaces": "implements SdpParser<FingerprintAttribute>", "fields": [{"original_string": "private static final String REGEX = \"^a=fingerprint:\\\\S+\\\\s(\\\\w+(:\\\\w+)+)$\";", "modifier": "private static final", "type": "String", "declarator": "REGEX = \"^a=fingerprint:\\\\S+\\\\s(\\\\w+(:\\\\w+)+)$\"", "var_name": "REGEX"}, {"original_string": "private static final Pattern PATTERN = Pattern.compile(REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(REGEX)", "var_name": "PATTERN"}], "methods": [{"identifier": "canParse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canParse(String sdp)", "full_signature": "@Override public boolean canParse(String sdp)", "class_method_signature": "FingerprintAttributeParser.canParse(String sdp)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "FingerprintAttribute", "signature": "FingerprintAttribute parse(String sdp)", "full_signature": "@Override public FingerprintAttribute parse(String sdp)", "class_method_signature": "FingerprintAttributeParser.parse(String sdp)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(FingerprintAttribute field, String sdp)", "modifiers": "@Override public", "return": "void", "signature": "void parse(FingerprintAttribute field, String sdp)", "full_signature": "@Override public void parse(FingerprintAttribute field, String sdp)", "class_method_signature": "FingerprintAttributeParser.parse(FingerprintAttribute field, String sdp)", "testcase": false, "constructor": false}], "file": "sdp/src/main/java/org/restcomm/media/core/sdp/dtls/attributes/parser/FingerprintAttributeParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String sdp)", "modifiers": "@Override public", "return": "FingerprintAttribute", "body": "@Override\n\tpublic FingerprintAttribute parse(String sdp) throws SdpException {\n\t\ttry {\n\t\t\tint separator = sdp.indexOf(AttributeField.ATTRIBUTE_SEPARATOR);\n\t\t\tif(separator == -1) {\n\t\t\t\tthrow new IllegalArgumentException(\"No value found\");\n\t\t\t}\n\t\t\t\n\t\t\tString[] values = sdp.trim().substring(separator + 1).split(\" \");\n\t\t\tString hashFunction = values[0];\n\t\t\tString fingerprint = values[1];\n\t\t\treturn new FingerprintAttribute(hashFunction, fingerprint);\n\t\t} catch (Exception e) {\n\t\t\tthrow new SdpException(PARSE_ERROR + sdp, e);\n\t\t}\n\t}", "signature": "FingerprintAttribute parse(String sdp)", "full_signature": "@Override public FingerprintAttribute parse(String sdp)", "class_method_signature": "FingerprintAttributeParser.parse(String sdp)", "testcase": false, "constructor": false, "invocations": ["indexOf", "split", "substring", "trim"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}