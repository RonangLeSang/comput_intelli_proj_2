{"test_class": {"identifier": "RequestNotificationCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "control/mgcp/src/test/java/org/restcomm/media/core/control/mgcp/command/RequestNotificationCommandTest.java"}, "test_case": {"identifier": "testNotificationRequestWithUnrecognizedAction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotificationRequestWithUnrecognizedAction() throws MgcpParseException {\n        // given\n        final StringBuilder builder = new StringBuilder(\"RQNT 12345 mobicents/ivr/10@127.0.0.1:2427 MGCP 1.0\").append(\"\\n\");\n        builder.append(\"N:restcomm@10.229.72.130:2727\").append(\"\\n\");\n        builder.append(\"X:10\").append(\"\\n\");\n        builder.append(\"S:AU/pa(an=http://127.0.0.1:8080/restcomm/cache/ACae6e420f/5a26d1299.wav it=1)\").append(\"\\n\");\n        builder.append(\"R:AU/oc(XYZ),AU/of(N)\");\n\n        final MgcpMessageParser parser = new MgcpMessageParser();\n        final MgcpRequest request = parser.parseRequest(builder.toString());\n        final MgcpEndpointManager endpointManager = mock(MgcpEndpointManager.class);\n        final MgcpPackageManager packageManager = mock(MgcpPackageManager.class);\n        final MgcpPackage mgcpPackage = mock(MgcpPackage.class);\n        final MgcpEventType eventType = mock(MgcpEventType.class);\n        final MgcpEndpoint endpoint = mock(MgcpEndpoint.class);\n        final MgcpSignalProvider signalProvider = mock(MgcpSignalProvider.class);\n        final RequestNotificationCommand rqnt = new RequestNotificationCommand(request.getTransactionId(), request.getParameters(), endpointManager, packageManager, signalProvider);\n\n        // when\n        when(endpointManager.getEndpoint(\"mobicents/ivr/10@127.0.0.1:2427\")).thenReturn(endpoint);\n        \n        when(packageManager.getPackage(\"AU\")).thenReturn(mgcpPackage);\n        when(mgcpPackage.getEventDetails(any(String.class))).thenReturn(eventType);\n        when(eventType.parameterized()).thenReturn(false);\n\n        MgcpCommandResult result = rqnt.call();\n        \n        // then\n        Assert.assertNotNull(result);\n        Assert.assertEquals(MgcpResponseCode.EVENT_OR_SIGNAL_PARAMETER_ERROR.code(), result.getCode());\n    }", "signature": "void testNotificationRequestWithUnrecognizedAction()", "full_signature": "@Test public void testNotificationRequestWithUnrecognizedAction()", "class_method_signature": "RequestNotificationCommandTest.testNotificationRequestWithUnrecognizedAction()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "parseRequest", "toString", "mock", "mock", "mock", "mock", "mock", "mock", "getTransactionId", "getParameters", "thenReturn", "when", "getEndpoint", "thenReturn", "when", "getPackage", "thenReturn", "when", "getEventDetails", "any", "thenReturn", "when", "parameterized", "call", "assertNotNull", "assertEquals", "code", "getCode"]}, "focal_class": {"identifier": "RequestNotificationCommand", "superclass": "extends AbstractMgcpCommand", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(RequestNotificationCommand.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(RequestNotificationCommand.class)", "var_name": "log"}, {"original_string": "private final MgcpSignalProvider signalProvider;", "modifier": "private final", "type": "MgcpSignalProvider", "declarator": "signalProvider", "var_name": "signalProvider"}, {"original_string": "private final MgcpPackageManager packageManager;", "modifier": "private final", "type": "MgcpPackageManager", "declarator": "packageManager", "var_name": "packageManager"}], "methods": [{"identifier": "RequestNotificationCommand", "parameters": "(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider)", "modifiers": "public", "return": "", "signature": " RequestNotificationCommand(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider)", "full_signature": "public  RequestNotificationCommand(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider)", "class_method_signature": "RequestNotificationCommand.RequestNotificationCommand(int transactionId, Parameters<MgcpParameterType> parameters, MgcpEndpointManager endpointManager, MgcpPackageManager packageManager, MgcpSignalProvider signalProvider)", "testcase": false, "constructor": true}, {"identifier": "validateParameters", "parameters": "(Parameters<MgcpParameterType> parameters, RqntContext context)", "modifiers": "private", "return": "void", "signature": "void validateParameters(Parameters<MgcpParameterType> parameters, RqntContext context)", "full_signature": "private void validateParameters(Parameters<MgcpParameterType> parameters, RqntContext context)", "class_method_signature": "RequestNotificationCommand.validateParameters(Parameters<MgcpParameterType> parameters, RqntContext context)", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "(RqntContext context)", "modifiers": "private", "return": "void", "signature": "void executeCommand(RqntContext context)", "full_signature": "private void executeCommand(RqntContext context)", "class_method_signature": "RequestNotificationCommand.executeCommand(RqntContext context)", "testcase": false, "constructor": false}, {"identifier": "respond", "parameters": "(RqntContext context)", "modifiers": "private", "return": "MgcpCommandResult", "signature": "MgcpCommandResult respond(RqntContext context)", "full_signature": "private MgcpCommandResult respond(RqntContext context)", "class_method_signature": "RequestNotificationCommand.respond(RqntContext context)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "MgcpCommandResult", "signature": "MgcpCommandResult call()", "full_signature": "@Override public MgcpCommandResult call()", "class_method_signature": "RequestNotificationCommand.call()", "testcase": false, "constructor": false}], "file": "control/mgcp/src/main/java/org/restcomm/media/core/control/mgcp/command/RequestNotificationCommand.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "MgcpCommandResult", "body": "@Override\n    public MgcpCommandResult call() {\n        // Initialize empty context\n        RqntContext context = new RqntContext();\n        try {\n            // Validate Parameters\n            validateParameters(this.requestParameters, context);\n            // Execute Command\n            executeCommand(context);\n            context.code = MgcpResponseCode.TRANSACTION_WAS_EXECUTED.code();\n            context.message = MgcpResponseCode.TRANSACTION_WAS_EXECUTED.message();\n        } catch (RuntimeException e) {\n            log.warn(\"Unexpected error occurred during tx=\" + this.transactionId + \" execution. Reason:\", e);\n            context.code = MgcpResponseCode.PROTOCOL_ERROR.code();\n            context.message = MgcpResponseCode.PROTOCOL_ERROR.message();\n        } catch (MgcpCommandException e) {\n            log.warn(\"Protocol error occurred during tx=\" + this.transactionId + \" execution. Reason:\", e);\n            context.code = e.getCode();\n            context.message = e.getMessage();\n        }\n        return respond(context);\n    }", "signature": "MgcpCommandResult call()", "full_signature": "@Override public MgcpCommandResult call()", "class_method_signature": "RequestNotificationCommand.call()", "testcase": false, "constructor": false, "invocations": ["validateParameters", "executeCommand", "code", "message", "warn", "code", "message", "warn", "getCode", "getMessage", "respond"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}