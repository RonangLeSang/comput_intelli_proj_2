{"test_class": {"identifier": "RtcpSdesChunkTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] p = new byte[] { 0x0d, (byte) 0xe9, 0x4f, 0x1f, 0x01, 0x18, 0x61, 0x62, 0x68, 0x61, 0x79, 0x61,\n\t\t\t0x6e, 0x69, 0x40, 0x61, 0x62, 0x68, 0x61, 0x79, 0x61, 0x6e, 0x69, 0x2d, 0x6c, 0x61, 0x70, 0x74, 0x6f, 0x70,\n\t\t\t0x00, 0x00 };", "modifier": "private", "type": "byte[]", "declarator": "p = new byte[] { 0x0d, (byte) 0xe9, 0x4f, 0x1f, 0x01, 0x18, 0x61, 0x62, 0x68, 0x61, 0x79, 0x61,\n\t\t\t0x6e, 0x69, 0x40, 0x61, 0x62, 0x68, 0x61, 0x79, 0x61, 0x6e, 0x69, 0x2d, 0x6c, 0x61, 0x70, 0x74, 0x6f, 0x70,\n\t\t\t0x00, 0x00 }", "var_name": "p"}], "file": "rtp/src/test/java/org/restcomm/media/core/rtcp/RtcpSdesChunkTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDecode() {\n\t\tRtcpSdesChunk rtcpSdesChunk = new RtcpSdesChunk();\n\t\trtcpSdesChunk.decode(p, 0);\n\n\t\tassertEquals(233393951, rtcpSdesChunk.getSsrc());\n\t\tassertEquals(2, rtcpSdesChunk.getItemCount());\n\n\t\tRtcpSdesItem rtcpSdesItem = rtcpSdesChunk.getRtcpSdesItems()[0];\n\n\t\tassertNotNull(rtcpSdesItem);\n\n\t\tassertEquals(RtcpSdesItem.RTCP_SDES_CNAME, rtcpSdesItem.getType());\n\t\tassertEquals(24, rtcpSdesItem.getLength());\n\t\tassertEquals(\"abhayani@abhayani-laptop\", rtcpSdesItem.getText());\n\n\t\trtcpSdesItem = rtcpSdesChunk.getRtcpSdesItems()[1];\n\t\tassertNotNull(rtcpSdesItem);\n\t\tassertEquals(RtcpSdesItem.RTCP_SDES_END, rtcpSdesItem.getType());\n\t}", "signature": "void testDecode()", "full_signature": "@Test public void testDecode()", "class_method_signature": "RtcpSdesChunkTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["decode", "assertEquals", "getSsrc", "assertEquals", "getItemCount", "getRtcpSdesItems", "assertNotNull", "assertEquals", "getType", "assertEquals", "getLength", "assertEquals", "getText", "getRtcpSdesItems", "assertNotNull", "assertEquals", "getType"]}, "focal_class": {"identifier": "RtcpSdesChunk", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_ITEMS = 9;", "modifier": "public static final", "type": "int", "declarator": "MAX_ITEMS = 9", "var_name": "MAX_ITEMS"}, {"original_string": "private long ssrc;", "modifier": "private", "type": "long", "declarator": "ssrc", "var_name": "ssrc"}, {"original_string": "private final List<RtcpSdesItem> rtcpSdesItems;", "modifier": "private final", "type": "List<RtcpSdesItem>", "declarator": "rtcpSdesItems", "var_name": "rtcpSdesItems"}, {"original_string": "private int itemCount = 0;", "modifier": "private", "type": "int", "declarator": "itemCount = 0", "var_name": "itemCount"}], "methods": [{"identifier": "RtcpSdesChunk", "parameters": "(long ssrc)", "modifiers": "public", "return": "", "signature": " RtcpSdesChunk(long ssrc)", "full_signature": "public  RtcpSdesChunk(long ssrc)", "class_method_signature": "RtcpSdesChunk.RtcpSdesChunk(long ssrc)", "testcase": false, "constructor": true}, {"identifier": "RtcpSdesChunk", "parameters": "()", "modifiers": "protected", "return": "", "signature": " RtcpSdesChunk()", "full_signature": "protected  RtcpSdesChunk()", "class_method_signature": "RtcpSdesChunk.RtcpSdesChunk()", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(byte[] rawData, int offSet)", "modifiers": "protected", "return": "int", "signature": "int decode(byte[] rawData, int offSet)", "full_signature": "protected int decode(byte[] rawData, int offSet)", "class_method_signature": "RtcpSdesChunk.decode(byte[] rawData, int offSet)", "testcase": false, "constructor": false}, {"identifier": "addRtcpSdesItem", "parameters": "(RtcpSdesItem rtcpSdesItem)", "modifiers": "public", "return": "void", "signature": "void addRtcpSdesItem(RtcpSdesItem rtcpSdesItem)", "full_signature": "public void addRtcpSdesItem(RtcpSdesItem rtcpSdesItem)", "class_method_signature": "RtcpSdesChunk.addRtcpSdesItem(RtcpSdesItem rtcpSdesItem)", "testcase": false, "constructor": false}, {"identifier": "getSsrc", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSsrc()", "full_signature": "public long getSsrc()", "class_method_signature": "RtcpSdesChunk.getSsrc()", "testcase": false, "constructor": false}, {"identifier": "getCname", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCname()", "full_signature": "public String getCname()", "class_method_signature": "RtcpSdesChunk.getCname()", "testcase": false, "constructor": false}, {"identifier": "getRtcpSdesItems", "parameters": "()", "modifiers": "public", "return": "RtcpSdesItem[]", "signature": "RtcpSdesItem[] getRtcpSdesItems()", "full_signature": "public RtcpSdesItem[] getRtcpSdesItems()", "class_method_signature": "RtcpSdesChunk.getRtcpSdesItems()", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getItemCount()", "full_signature": "public int getItemCount()", "class_method_signature": "RtcpSdesChunk.getItemCount()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[] rawData, int offSet)", "modifiers": "protected", "return": "int", "signature": "int encode(byte[] rawData, int offSet)", "full_signature": "protected int encode(byte[] rawData, int offSet)", "class_method_signature": "RtcpSdesChunk.encode(byte[] rawData, int offSet)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RtcpSdesChunk.toString()", "testcase": false, "constructor": false}], "file": "rtp/src/main/java/org/restcomm/media/core/rtcp/RtcpSdesChunk.java"}, "focal_method": {"identifier": "decode", "parameters": "(byte[] rawData, int offSet)", "modifiers": "protected", "return": "int", "body": "protected int decode(byte[] rawData, int offSet) {\n\n\t\tthis.ssrc |= rawData[offSet++] & 0xFF;\n\t\tthis.ssrc <<= 8;\n\t\tthis.ssrc |= rawData[offSet++] & 0xFF;\n\t\tthis.ssrc <<= 8;\n\t\tthis.ssrc |= rawData[offSet++] & 0xFF;\n\t\tthis.ssrc <<= 8;\n\t\tthis.ssrc |= rawData[offSet++] & 0xFF;\n\n\t\twhile (true) {\n\t\t\tRtcpSdesItem sdesItem = new RtcpSdesItem();\n\t\t\toffSet = sdesItem.decode(rawData, offSet);\n\t\t\taddRtcpSdesItem(sdesItem);\n\n\t\t\tif (RtcpSdesItem.RTCP_SDES_END == sdesItem.getType()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn offSet;\n\t}", "signature": "int decode(byte[] rawData, int offSet)", "full_signature": "protected int decode(byte[] rawData, int offSet)", "class_method_signature": "RtcpSdesChunk.decode(byte[] rawData, int offSet)", "testcase": false, "constructor": false, "invocations": ["decode", "addRtcpSdesItem", "getType"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}