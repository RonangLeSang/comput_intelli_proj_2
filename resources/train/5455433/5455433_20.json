{"test_class": {"identifier": "NettyNetworkManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EventExecutor eventExecutor;", "modifier": "private", "type": "EventExecutor", "declarator": "eventExecutor", "var_name": "eventExecutor"}, {"original_string": "private EventLoopGroup eventLoopGroup;", "modifier": "private", "type": "EventLoopGroup", "declarator": "eventLoopGroup", "var_name": "eventLoopGroup"}], "file": "network/src/test/java/org/restcomm/media/core/network/netty/NettyNetworkManagerTest.java"}, "test_case": {"identifier": "testCloseAsync", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testCloseAsync() {\n        // given\n        this.eventLoopGroup = new NioEventLoopGroup(1);\n        final Bootstrap bootstrap = PowerMockito.mock(Bootstrap.class);\n        PowerMockito.when(bootstrap.group()).thenReturn(eventLoopGroup);\n        final FutureCallback<Void> callback = mock(FutureCallback.class);\n        final NettyNetworkManager networkManager = new NettyNetworkManager(bootstrap);\n\n        // when\n        networkManager.close(callback);\n\n        // then\n        verify(callback, timeout((NettyNetworkManager.SHUTDOWN_TIMEOUT + 1) * 1000)).onSuccess(null);\n        assertTrue(eventLoopGroup.isShutdown());\n    }", "signature": "void testCloseAsync()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testCloseAsync()", "class_method_signature": "NettyNetworkManagerTest.testCloseAsync()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "group", "mock", "close", "onSuccess", "verify", "timeout", "assertTrue", "isShutdown"]}, "focal_class": {"identifier": "NettyNetworkManager", "superclass": "", "interfaces": "implements SynchronousNetworkManager<Channel>, AsynchronousNetworkManager<Channel>", "fields": [{"original_string": "static final long SHUTDOWN_TIMEOUT = 5L;", "modifier": "static final", "type": "long", "declarator": "SHUTDOWN_TIMEOUT = 5L", "var_name": "SHUTDOWN_TIMEOUT"}, {"original_string": "static final int N_THREADS = Runtime.getRuntime().availableProcessors();", "modifier": "static final", "type": "int", "declarator": "N_THREADS = Runtime.getRuntime().availableProcessors()", "var_name": "N_THREADS"}, {"original_string": "protected final EventLoopGroup eventGroup;", "modifier": "protected final", "type": "EventLoopGroup", "declarator": "eventGroup", "var_name": "eventGroup"}, {"original_string": "protected final Bootstrap bootstrap;", "modifier": "protected final", "type": "Bootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private final AtomicBoolean open;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "open", "var_name": "open"}], "methods": [{"identifier": "NettyNetworkManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " NettyNetworkManager()", "full_signature": "public  NettyNetworkManager()", "class_method_signature": "NettyNetworkManager.NettyNetworkManager()", "testcase": false, "constructor": true}, {"identifier": "NettyNetworkManager", "parameters": "(int threadCount)", "modifiers": "public", "return": "", "signature": " NettyNetworkManager(int threadCount)", "full_signature": "public  NettyNetworkManager(int threadCount)", "class_method_signature": "NettyNetworkManager.NettyNetworkManager(int threadCount)", "testcase": false, "constructor": true}, {"identifier": "NettyNetworkManager", "parameters": "(Bootstrap bootstrap)", "modifiers": "public", "return": "", "signature": " NettyNetworkManager(Bootstrap bootstrap)", "full_signature": "public  NettyNetworkManager(Bootstrap bootstrap)", "class_method_signature": "NettyNetworkManager.NettyNetworkManager(Bootstrap bootstrap)", "testcase": false, "constructor": true}, {"identifier": "openChannel", "parameters": "()", "modifiers": "@Override public", "return": "Channel", "signature": "Channel openChannel()", "full_signature": "@Override public Channel openChannel()", "class_method_signature": "NettyNetworkManager.openChannel()", "testcase": false, "constructor": false}, {"identifier": "openChannel", "parameters": "(FutureCallback<Channel> callback)", "modifiers": "@Override public", "return": "void", "signature": "void openChannel(FutureCallback<Channel> callback)", "full_signature": "@Override public void openChannel(FutureCallback<Channel> callback)", "class_method_signature": "NettyNetworkManager.openChannel(FutureCallback<Channel> callback)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NettyNetworkManager.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(FutureCallback<Void> callback)", "modifiers": "@Override public", "return": "void", "signature": "void close(FutureCallback<Void> callback)", "full_signature": "@Override public void close(FutureCallback<Void> callback)", "class_method_signature": "NettyNetworkManager.close(FutureCallback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "assertOpen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void assertOpen()", "full_signature": "private void assertOpen()", "class_method_signature": "NettyNetworkManager.assertOpen()", "testcase": false, "constructor": false}], "file": "network/src/main/java/org/restcomm/media/core/network/netty/NettyNetworkManager.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() throws IOException, IllegalStateException {\n        if (this.open.compareAndSet(true, false)) {\n            try {\n                this.eventGroup.shutdownGracefully(0L, 5L, TimeUnit.SECONDS).sync();\n            } catch (Exception e) {\n                throw new IOException(\"Could not be gracefully closed.\", e);\n            }\n        } else {\n            throw new IllegalStateException(\"Network Manager is already closed\");\n        }\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NettyNetworkManager.close()", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "sync", "shutdownGracefully"]}, "repository": {"repo_id": 5455433, "url": "https://github.com/RestComm/media-core", "language": "Java", "is_fork": false, "fork_count": 110, "stargazer_count": 132, "size": 98455, "license": "licensed"}}