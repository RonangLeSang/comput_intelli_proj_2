{"test_class": {"identifier": "MusicInfoDuckDuckGoImagesTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/messic-server-plugin-musicinfo-duckduckgoimages/src/test/java/org/messic/server/api/musicinfo/duckduckgoimages/MusicInfoDuckDuckGoImagesTest.java"}, "test_case": {"identifier": "testConstructURL", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConstructURL()\n    {\n        MusicInfoDuckDuckGoImages i = new MusicInfoDuckDuckGoImages();\n\n        String surl = i.constructURL( new String[] { \"test\", \"another test\" } );\n\n        System.out.println( surl );\n        Assert.assertTrue( surl.trim().equals( \"https://duckduckgo.com/i.js?o=json&q=\\\"test\\\" \\\"another test\\\"\" ) );\n    }", "signature": "void testConstructURL()", "full_signature": "@Test public void testConstructURL()", "class_method_signature": "MusicInfoDuckDuckGoImagesTest.testConstructURL()", "testcase": true, "constructor": false, "invocations": ["constructURL", "println", "assertTrue", "equals", "trim"]}, "focal_class": {"identifier": "MusicInfoDuckDuckGoImages", "superclass": "", "interfaces": "implements MusicInfoPlugin", "fields": [{"original_string": "private Logger log = Logger.getLogger( MusicInfoDuckDuckGoImages.class );", "modifier": "private", "type": "Logger", "declarator": "log = Logger.getLogger( MusicInfoDuckDuckGoImages.class )", "var_name": "log"}, {"original_string": "public static final String NAME = \"DuckDuckGoImages\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"DuckDuckGoImages\"", "var_name": "NAME"}, {"original_string": "public static final String PROVIDER_NAME = \"Duck Duck Go Images\";", "modifier": "public static final", "type": "String", "declarator": "PROVIDER_NAME = \"Duck Duck Go Images\"", "var_name": "PROVIDER_NAME"}, {"original_string": "public static final String EN_DESCRIPTION = \"Plugin to obtain images from Duck Duck Go images search engine.\";", "modifier": "public static final", "type": "String", "declarator": "EN_DESCRIPTION = \"Plugin to obtain images from Duck Duck Go images search engine.\"", "var_name": "EN_DESCRIPTION"}, {"original_string": "public static final float VERSION = 1.0f;", "modifier": "public static final", "type": "float", "declarator": "VERSION = 1.0f", "var_name": "VERSION"}, {"original_string": "public static final float MINIMUM_MESSIC_VERSION = 1.0f;", "modifier": "public static final", "type": "float", "declarator": "MINIMUM_MESSIC_VERSION = 1.0f", "var_name": "MINIMUM_MESSIC_VERSION"}, {"original_string": "private Properties configuration;", "modifier": "private", "type": "Properties", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "getProxy", "parameters": "()", "modifiers": "protected", "return": "Proxy", "signature": "Proxy getProxy()", "full_signature": "protected Proxy getProxy()", "class_method_signature": "MusicInfoDuckDuckGoImages.getProxy()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "MusicInfoDuckDuckGoImages.getName()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "Properties", "signature": "Properties getConfiguration()", "full_signature": "@Override public Properties getConfiguration()", "class_method_signature": "MusicInfoDuckDuckGoImages.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "setConfiguration", "parameters": "( Properties properties )", "modifiers": "@Override public", "return": "void", "signature": "void setConfiguration( Properties properties )", "full_signature": "@Override public void setConfiguration( Properties properties )", "class_method_signature": "MusicInfoDuckDuckGoImages.setConfiguration( Properties properties )", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "( Locale locale )", "modifiers": "@Override public", "return": "String", "signature": "String getDescription( Locale locale )", "full_signature": "@Override public String getDescription( Locale locale )", "class_method_signature": "MusicInfoDuckDuckGoImages.getDescription( Locale locale )", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "( String baseUrl )", "modifiers": "protected", "return": "String", "signature": "String search( String baseUrl )", "full_signature": "protected String search( String baseUrl )", "class_method_signature": "MusicInfoDuckDuckGoImages.search( String baseUrl )", "testcase": false, "constructor": false}, {"identifier": "getUrlImages", "parameters": "( InputStream is )", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getUrlImages( InputStream is )", "full_signature": "protected List<String> getUrlImages( InputStream is )", "class_method_signature": "MusicInfoDuckDuckGoImages.getUrlImages( InputStream is )", "testcase": false, "constructor": false}, {"identifier": "constructURL", "parameters": "( String[] phrases )", "modifiers": "protected", "return": "String", "signature": "String constructURL( String[] phrases )", "full_signature": "protected String constructURL( String[] phrases )", "class_method_signature": "MusicInfoDuckDuckGoImages.constructURL( String[] phrases )", "testcase": false, "constructor": false}, {"identifier": "getAuthorInfo", "parameters": "( Locale locale, String authorName )", "modifiers": "@Override public", "return": "String", "signature": "String getAuthorInfo( Locale locale, String authorName )", "full_signature": "@Override public String getAuthorInfo( Locale locale, String authorName )", "class_method_signature": "MusicInfoDuckDuckGoImages.getAuthorInfo( Locale locale, String authorName )", "testcase": false, "constructor": false}, {"identifier": "getAlbumInfo", "parameters": "( Locale locale, String authorName, String albumName )", "modifiers": "@Override public", "return": "String", "signature": "String getAlbumInfo( Locale locale, String authorName, String albumName )", "full_signature": "@Override public String getAlbumInfo( Locale locale, String authorName, String albumName )", "class_method_signature": "MusicInfoDuckDuckGoImages.getAlbumInfo( Locale locale, String authorName, String albumName )", "testcase": false, "constructor": false}, {"identifier": "getSongInfo", "parameters": "( Locale locale, String authorName, String albumName, String songName )", "modifiers": "@Override public", "return": "String", "signature": "String getSongInfo( Locale locale, String authorName, String albumName, String songName )", "full_signature": "@Override public String getSongInfo( Locale locale, String authorName, String albumName, String songName )", "class_method_signature": "MusicInfoDuckDuckGoImages.getSongInfo( Locale locale, String authorName, String albumName, String songName )", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getVersion()", "full_signature": "@Override public float getVersion()", "class_method_signature": "MusicInfoDuckDuckGoImages.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getMinimumMessicVersion", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getMinimumMessicVersion()", "full_signature": "@Override public float getMinimumMessicVersion()", "class_method_signature": "MusicInfoDuckDuckGoImages.getMinimumMessicVersion()", "testcase": false, "constructor": false}, {"identifier": "getProviderIcon", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getProviderIcon()", "full_signature": "@Override public byte[] getProviderIcon()", "class_method_signature": "MusicInfoDuckDuckGoImages.getProviderIcon()", "testcase": false, "constructor": false}, {"identifier": "readInputStream", "parameters": "( InputStream is )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readInputStream( InputStream is )", "full_signature": "public static byte[] readInputStream( InputStream is )", "class_method_signature": "MusicInfoDuckDuckGoImages.readInputStream( InputStream is )", "testcase": false, "constructor": false}, {"identifier": "getProviderName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getProviderName()", "full_signature": "@Override public String getProviderName()", "class_method_signature": "MusicInfoDuckDuckGoImages.getProviderName()", "testcase": false, "constructor": false}], "file": "src/messic-server-plugin-musicinfo-duckduckgoimages/src/main/java/org/messic/server/api/musicinfo/duckduckgoimages/MusicInfoDuckDuckGoImages.java"}, "focal_method": {"identifier": "constructURL", "parameters": "( String[] phrases )", "modifiers": "protected", "return": "String", "body": "protected String constructURL( String[] phrases )\n    {\n        String baseUrl = \"https://duckduckgo.com/i.js?o=json&q=\";\n        for ( String phrase : phrases )\n        {\n            baseUrl = baseUrl + \"\\\"\" + phrase + \"\\\" \";\n        }\n        return baseUrl;\n\n    }", "signature": "String constructURL( String[] phrases )", "full_signature": "protected String constructURL( String[] phrases )", "class_method_signature": "MusicInfoDuckDuckGoImages.constructURL( String[] phrases )", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8772570, "url": "https://github.com/spheras/messic", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 29, "size": 921703, "license": "licensed"}}