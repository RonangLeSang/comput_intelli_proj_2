{"test_class": {"identifier": "SatzFactoryTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger(SatzFactoryTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(SatzFactoryTest.class)", "var_name": "LOG"}], "file": "lib/src/test/java/gdv/xport/util/SatzFactoryTest.java"}, "test_case": {"identifier": "testGetAllSupportedSaetze", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAllSupportedSaetze() {\n        Datenpaket all = SatzFactory.getAllSupportedSaetze();\n        List<Datensatz> datensaetze = all.getDatensaetze();\n        Set<Integer> supportedSatzarten = new TreeSet<Integer>();\n        for (Datensatz datensatz : datensaetze) {\n            supportedSatzarten.add(datensatz.getSatzart());\n        }\n        int n = datensaetze.size();\n        LOG.info(n + \" Satzarten supported: \" + supportedSatzarten);\n        assertTrue(\"only \" + n + \" Datensaetze supported\", n > 5);\n        assertTrue(\"Satzart 342 expected to be supported\", supportedSatzarten.contains(342));\n    }", "signature": "void testGetAllSupportedSaetze()", "full_signature": "@Test public void testGetAllSupportedSaetze()", "class_method_signature": "SatzFactoryTest.testGetAllSupportedSaetze()", "testcase": true, "constructor": false, "invocations": ["getAllSupportedSaetze", "getDatensaetze", "add", "getSatzart", "size", "info", "assertTrue", "assertTrue", "contains"]}, "focal_class": {"identifier": "SatzFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger(SatzFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(SatzFactory.class)", "var_name": "LOG"}, {"original_string": "private static final Map<SatzTyp, Class<? extends Satz>> REGISTERED_SATZ_CLASSES =\n            new ConcurrentHashMap<SatzTyp, Class<? extends Satz>>();", "modifier": "private static final", "type": "Map<SatzTyp, Class<? extends Satz>>", "declarator": "REGISTERED_SATZ_CLASSES =\n            new ConcurrentHashMap<SatzTyp, Class<? extends Satz>>()", "var_name": "REGISTERED_SATZ_CLASSES"}, {"original_string": "private static final Map<SatzTyp, Class<? extends Datensatz>> REGISTERED_DATENSATZ_CLASSES =\n            new ConcurrentHashMap<SatzTyp, Class<? extends Datensatz>>();", "modifier": "private static final", "type": "Map<SatzTyp, Class<? extends Datensatz>>", "declarator": "REGISTERED_DATENSATZ_CLASSES =\n            new ConcurrentHashMap<SatzTyp, Class<? extends Datensatz>>()", "var_name": "REGISTERED_DATENSATZ_CLASSES"}, {"original_string": "private static final Map<SatzTyp, Class<? extends Enum>> REGISTERED_ENUM_CLASSES =\n            new ConcurrentHashMap<SatzTyp, Class<? extends Enum>>();", "modifier": "private static final", "type": "Map<SatzTyp, Class<? extends Enum>>", "declarator": "REGISTERED_ENUM_CLASSES =\n            new ConcurrentHashMap<SatzTyp, Class<? extends Enum>>()", "var_name": "REGISTERED_ENUM_CLASSES"}, {"original_string": "private static final XmlService XML_SERVICE = XmlService.getInstance();", "modifier": "private static final", "type": "XmlService", "declarator": "XML_SERVICE = XmlService.getInstance()", "var_name": "XML_SERVICE"}], "methods": [{"identifier": "registerDefault", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void registerDefault()", "full_signature": "private static void registerDefault()", "class_method_signature": "SatzFactory.registerDefault()", "testcase": false, "constructor": false}, {"identifier": "SatzFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " SatzFactory()", "full_signature": "private  SatzFactory()", "class_method_signature": "SatzFactory.SatzFactory()", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "SatzFactory.reset()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(final Class<? extends Satz> clazz, final int satzart)", "modifiers": "public static", "return": "void", "signature": "void register(final Class<? extends Satz> clazz, final int satzart)", "full_signature": "public static void register(final Class<? extends Satz> clazz, final int satzart)", "class_method_signature": "SatzFactory.register(final Class<? extends Satz> clazz, final int satzart)", "testcase": false, "constructor": false}, {"identifier": "registerEnum", "parameters": "(final Class<? extends Enum> enumClass, final int satzart)", "modifiers": "public static", "return": "void", "signature": "void registerEnum(final Class<? extends Enum> enumClass, final int satzart)", "full_signature": "public static void registerEnum(final Class<? extends Enum> enumClass, final int satzart)", "class_method_signature": "SatzFactory.registerEnum(final Class<? extends Enum> enumClass, final int satzart)", "testcase": false, "constructor": false}, {"identifier": "registerEnum", "parameters": "(final Class<? extends Enum> enumClass, final int satzart, final int sparte)", "modifiers": "public static", "return": "void", "signature": "void registerEnum(final Class<? extends Enum> enumClass, final int satzart, final int sparte)", "full_signature": "public static void registerEnum(final Class<? extends Enum> enumClass, final int satzart, final int sparte)", "class_method_signature": "SatzFactory.registerEnum(final Class<? extends Enum> enumClass, final int satzart, final int sparte)", "testcase": false, "constructor": false}, {"identifier": "registerEnum", "parameters": "(final Class<? extends Enum> enumClass, final SatzTyp satzNr)", "modifiers": "public static", "return": "void", "signature": "void registerEnum(final Class<? extends Enum> enumClass, final SatzTyp satzNr)", "full_signature": "public static void registerEnum(final Class<? extends Enum> enumClass, final SatzTyp satzNr)", "class_method_signature": "SatzFactory.registerEnum(final Class<? extends Enum> enumClass, final SatzTyp satzNr)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(final int satzart)", "modifiers": "public static", "return": "void", "signature": "void unregister(final int satzart)", "full_signature": "public static void unregister(final int satzart)", "class_method_signature": "SatzFactory.unregister(final int satzart)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(final Class<? extends Datensatz> clazz, final int satzart, final int sparte)", "modifiers": "public static", "return": "void", "signature": "void register(final Class<? extends Datensatz> clazz, final int satzart, final int sparte)", "full_signature": "public static void register(final Class<? extends Datensatz> clazz, final int satzart, final int sparte)", "class_method_signature": "SatzFactory.register(final Class<? extends Datensatz> clazz, final int satzart, final int sparte)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(final Class<? extends Datensatz> clazz, final SatzTyp satzNr)", "modifiers": "public static", "return": "void", "signature": "void register(final Class<? extends Datensatz> clazz, final SatzTyp satzNr)", "full_signature": "public static void register(final Class<? extends Datensatz> clazz, final SatzTyp satzNr)", "class_method_signature": "SatzFactory.register(final Class<? extends Datensatz> clazz, final SatzTyp satzNr)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(final int satzart, final int sparte)", "modifiers": "public static", "return": "void", "signature": "void unregister(final int satzart, final int sparte)", "full_signature": "public static void unregister(final int satzart, final int sparte)", "class_method_signature": "SatzFactory.unregister(final int satzart, final int sparte)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(final int satzart, final int sparte, final int wagnisart)", "modifiers": "public static", "return": "void", "signature": "void unregister(final int satzart, final int sparte, final int wagnisart)", "full_signature": "public static void unregister(final int satzart, final int sparte, final int wagnisart)", "class_method_signature": "SatzFactory.unregister(final int satzart, final int sparte, final int wagnisart)", "testcase": false, "constructor": false}, {"identifier": "getSatz", "parameters": "(final int satzart)", "modifiers": "public static", "return": "Satz", "signature": "Satz getSatz(final int satzart)", "full_signature": "public static Satz getSatz(final int satzart)", "class_method_signature": "SatzFactory.getSatz(final int satzart)", "testcase": false, "constructor": false}, {"identifier": "getSatz", "parameters": "(final SatzTyp satztyp)", "modifiers": "public static", "return": "Satz", "signature": "Satz getSatz(final SatzTyp satztyp)", "full_signature": "public static Satz getSatz(final SatzTyp satztyp)", "class_method_signature": "SatzFactory.getSatz(final SatzTyp satztyp)", "testcase": false, "constructor": false}, {"identifier": "generateSatz", "parameters": "(final SatzTyp satztyp)", "modifiers": "private static", "return": "Satz", "signature": "Satz generateSatz(final SatzTyp satztyp)", "full_signature": "private static Satz generateSatz(final SatzTyp satztyp)", "class_method_signature": "SatzFactory.generateSatz(final SatzTyp satztyp)", "testcase": false, "constructor": false}, {"identifier": "generateDatensatz", "parameters": "(final SatzTyp satzNr)", "modifiers": "private static", "return": "Datensatz", "signature": "Datensatz generateDatensatz(final SatzTyp satzNr)", "full_signature": "private static Datensatz generateDatensatz(final SatzTyp satzNr)", "class_method_signature": "SatzFactory.generateDatensatz(final SatzTyp satzNr)", "testcase": false, "constructor": false}, {"identifier": "getSatz", "parameters": "(final String content)", "modifiers": "public static", "return": "Satz", "signature": "Satz getSatz(final String content)", "full_signature": "public static Satz getSatz(final String content)", "class_method_signature": "SatzFactory.getSatz(final String content)", "testcase": false, "constructor": false}, {"identifier": "getDatensatz", "parameters": "(final int satzart)", "modifiers": "public static", "return": "Datensatz", "signature": "Datensatz getDatensatz(final int satzart)", "full_signature": "public static Datensatz getDatensatz(final int satzart)", "class_method_signature": "SatzFactory.getDatensatz(final int satzart)", "testcase": false, "constructor": false}, {"identifier": "getDatensatz", "parameters": "(final int satzart, final int sparte)", "modifiers": "public static", "return": "Datensatz", "signature": "Datensatz getDatensatz(final int satzart, final int sparte)", "full_signature": "public static Datensatz getDatensatz(final int satzart, final int sparte)", "class_method_signature": "SatzFactory.getDatensatz(final int satzart, final int sparte)", "testcase": false, "constructor": false}, {"identifier": "getDatensatz", "parameters": "(final int satzart, final int sparte, final int wagnisart)", "modifiers": "public static", "return": "Datensatz", "signature": "Datensatz getDatensatz(final int satzart, final int sparte, final int wagnisart)", "full_signature": "public static Datensatz getDatensatz(final int satzart, final int sparte, final int wagnisart)", "class_method_signature": "SatzFactory.getDatensatz(final int satzart, final int sparte, final int wagnisart)", "testcase": false, "constructor": false}, {"identifier": "getDatensatz", "parameters": "(final SatzTyp satzNr)", "modifiers": "public static", "return": "Datensatz", "signature": "Datensatz getDatensatz(final SatzTyp satzNr)", "full_signature": "public static Datensatz getDatensatz(final SatzTyp satzNr)", "class_method_signature": "SatzFactory.getDatensatz(final SatzTyp satzNr)", "testcase": false, "constructor": false}, {"identifier": "getDatensatz", "parameters": "(final int sparte, final Class<? extends Datensatz> clazz)", "modifiers": "private static", "return": "Datensatz", "signature": "Datensatz getDatensatz(final int sparte, final Class<? extends Datensatz> clazz)", "full_signature": "private static Datensatz getDatensatz(final int sparte, final Class<? extends Datensatz> clazz)", "class_method_signature": "SatzFactory.getDatensatz(final int sparte, final Class<? extends Datensatz> clazz)", "testcase": false, "constructor": false}, {"identifier": "getDatensatz", "parameters": "(final Class<? extends Datensatz> clazz)", "modifiers": "private static", "return": "Datensatz", "signature": "Datensatz getDatensatz(final Class<? extends Datensatz> clazz)", "full_signature": "private static Datensatz getDatensatz(final Class<? extends Datensatz> clazz)", "class_method_signature": "SatzFactory.getDatensatz(final Class<? extends Datensatz> clazz)", "testcase": false, "constructor": false}, {"identifier": "useFallback", "parameters": "(final SatzTyp satzNr)", "modifiers": "private static", "return": "Datensatz", "signature": "Datensatz useFallback(final SatzTyp satzNr)", "full_signature": "private static Datensatz useFallback(final SatzTyp satzNr)", "class_method_signature": "SatzFactory.useFallback(final SatzTyp satzNr)", "testcase": false, "constructor": false}, {"identifier": "getAllSupportedSaetze", "parameters": "()", "modifiers": "public static", "return": "Datenpaket", "signature": "Datenpaket getAllSupportedSaetze()", "full_signature": "public static Datenpaket getAllSupportedSaetze()", "class_method_signature": "SatzFactory.getAllSupportedSaetze()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/gdv/xport/util/SatzFactory.java"}, "focal_method": {"identifier": "getAllSupportedSaetze", "parameters": "()", "modifiers": "public static", "return": "Datenpaket", "body": "public static Datenpaket getAllSupportedSaetze() {\n        Datenpaket all = new Datenpaket();\n        for (int i = 2; i < 9999; i++) {\n            try {\n                all.add((Datensatz) getSatz(i));\n            } catch (NotRegisteredException ex) {\n                LOG.trace(\"Datensatz \" + i + \" is not a supported: \", ex);\n            }\n        }\n        return all;\n    }", "signature": "Datenpaket getAllSupportedSaetze()", "full_signature": "public static Datenpaket getAllSupportedSaetze()", "class_method_signature": "SatzFactory.getAllSupportedSaetze()", "testcase": false, "constructor": false, "invocations": ["add", "getSatz", "trace"]}, "repository": {"repo_id": 335218, "url": "https://github.com/oboehm/gdv.xport", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 12, "size": 5392, "license": "licensed"}}