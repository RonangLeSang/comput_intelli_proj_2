{"test_class": {"identifier": "LogInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger(LogInterceptorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(LogInterceptorTest.class)", "var_name": "LOG"}, {"original_string": "private final LogInterceptor interceptor = new LogInterceptor();", "modifier": "private final", "type": "LogInterceptor", "declarator": "interceptor = new LogInterceptor()", "var_name": "interceptor"}, {"original_string": "private final MockHttpServletRequest request = new MockHttpServletRequest();", "modifier": "private final", "type": "MockHttpServletRequest", "declarator": "request = new MockHttpServletRequest()", "var_name": "request"}, {"original_string": "private final MockHttpServletResponse response = new MockHttpServletResponse();", "modifier": "private final", "type": "MockHttpServletResponse", "declarator": "response = new MockHttpServletResponse()", "var_name": "response"}], "file": "service/src/test/java/gdv/xport/srv/config/LogInterceptorTest.java"}, "test_case": {"identifier": "testAfterCompletionWithException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAfterCompletionWithException() {\n        LOG.info(\"Simulating an exception for testing...\");\n        interceptor.afterCompletion(request, response, \"testAfterCompletion\", new IllegalStateException(\"bumm\"));\n    }", "signature": "void testAfterCompletionWithException()", "full_signature": "@Test public void testAfterCompletionWithException()", "class_method_signature": "LogInterceptorTest.testAfterCompletionWithException()", "testcase": true, "constructor": false, "invocations": ["info", "afterCompletion"]}, "focal_class": {"identifier": "LogInterceptor", "superclass": "extends HandlerInterceptorAdapter", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger(LogInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(LogInterceptor.class)", "var_name": "LOG"}], "methods": [{"identifier": "preHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "full_signature": "@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "class_method_signature": "LogInterceptor.preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "testcase": false, "constructor": false}, {"identifier": "afterCompletion", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "modifiers": "@Override public", "return": "void", "signature": "void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "full_signature": "@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "class_method_signature": "LogInterceptor.afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "testcase": false, "constructor": false}, {"identifier": "logAccess", "parameters": "(String prefix, HttpServletRequest request, HttpServletResponse response)", "modifiers": "private static", "return": "void", "signature": "void logAccess(String prefix, HttpServletRequest request, HttpServletResponse response)", "full_signature": "private static void logAccess(String prefix, HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "LogInterceptor.logAccess(String prefix, HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getRequestURIwithParams", "parameters": "(HttpServletRequest request)", "modifiers": "private static", "return": "String", "signature": "String getRequestURIwithParams(HttpServletRequest request)", "full_signature": "private static String getRequestURIwithParams(HttpServletRequest request)", "class_method_signature": "LogInterceptor.getRequestURIwithParams(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "toParameterString", "parameters": "(Map<String, String[]> parameterMap)", "modifiers": "private static", "return": "String", "signature": "String toParameterString(Map<String, String[]> parameterMap)", "full_signature": "private static String toParameterString(Map<String, String[]> parameterMap)", "class_method_signature": "LogInterceptor.toParameterString(Map<String, String[]> parameterMap)", "testcase": false, "constructor": false}], "file": "service/src/main/java/gdv/xport/srv/config/LogInterceptor.java"}, "focal_method": {"identifier": "afterCompletion", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        if (ex == null) {\n            logAccess(\"->\", request, response);\n        } else {\n            LOG.error(\"{} ** \\\"{} {} {}\\\":\", request.getRemoteHost(), request.getMethod(),\n                    getRequestURIwithParams(request), request.getProtocol(), ex);\n        }\n    }", "signature": "void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "full_signature": "@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "class_method_signature": "LogInterceptor.afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "testcase": false, "constructor": false, "invocations": ["logAccess", "error", "getRemoteHost", "getMethod", "getRequestURIwithParams", "getProtocol"]}, "repository": {"repo_id": 335218, "url": "https://github.com/oboehm/gdv.xport", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 12, "size": 5392, "license": "licensed"}}