{"test_class": {"identifier": "NumFeldTest", "superclass": "extends AbstractFeldTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger(NumFeldTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(NumFeldTest.class)", "var_name": "LOG"}], "file": "lib/src/test/java/gdv/xport/feld/NumFeldTest.java"}, "test_case": {"identifier": "testNumFeldNegativ", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNumFeldNegativ() {\n        NumFeld einsminus = new NumFeld(\"einsminus\", \"-001\");\n        assertEquals(-1, einsminus.toInt());\n    }", "signature": "void testNumFeldNegativ()", "full_signature": "@Test public void testNumFeldNegativ()", "class_method_signature": "NumFeldTest.testNumFeldNegativ()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toInt"]}, "focal_class": {"identifier": "NumFeld", "superclass": "extends Feld", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger(NumFeld.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(NumFeld.class)", "var_name": "LOG"}, {"original_string": "private final int nachkommastellen;", "modifier": "private final", "type": "int", "declarator": "nachkommastellen", "var_name": "nachkommastellen"}], "methods": [{"identifier": "NumFeld", "parameters": "(final Enum feldX)", "modifiers": "public", "return": "", "signature": " NumFeld(final Enum feldX)", "full_signature": "public  NumFeld(final Enum feldX)", "class_method_signature": "NumFeld.NumFeld(final Enum feldX)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final Enum feldX, final FeldInfo info)", "modifiers": "public", "return": "", "signature": " NumFeld(final Enum feldX, final FeldInfo info)", "full_signature": "public  NumFeld(final Enum feldX, final FeldInfo info)", "class_method_signature": "NumFeld.NumFeld(final Enum feldX, final FeldInfo info)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final String name, final String s)", "modifiers": "public", "return": "", "signature": " NumFeld(final String name, final String s)", "full_signature": "public  NumFeld(final String name, final String s)", "class_method_signature": "NumFeld.NumFeld(final String name, final String s)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(Bezeichner bezeichner, int length, int start)", "modifiers": "public", "return": "", "signature": " NumFeld(Bezeichner bezeichner, int length, int start)", "full_signature": "public  NumFeld(Bezeichner bezeichner, int length, int start)", "class_method_signature": "NumFeld.NumFeld(Bezeichner bezeichner, int length, int start)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final Bezeichner bezeichner, final int length, final int start, final int value)", "modifiers": "public", "return": "", "signature": " NumFeld(final Bezeichner bezeichner, final int length, final int start, final int value)", "full_signature": "public  NumFeld(final Bezeichner bezeichner, final int length, final int start, final int value)", "class_method_signature": "NumFeld.NumFeld(final Bezeichner bezeichner, final int length, final int start, final int value)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final String name, final int start, final String value)", "modifiers": "public", "return": "", "signature": " NumFeld(final String name, final int start, final String value)", "full_signature": "public  NumFeld(final String name, final int start, final String value)", "class_method_signature": "NumFeld.NumFeld(final String name, final int start, final String value)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final String name, final String s, final int nachkommastellen)", "modifiers": "public", "return": "", "signature": " NumFeld(final String name, final String s, final int nachkommastellen)", "full_signature": "public  NumFeld(final String name, final String s, final int nachkommastellen)", "class_method_signature": "NumFeld.NumFeld(final String name, final String s, final int nachkommastellen)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final Bezeichner name, final FeldInfo info)", "modifiers": "public", "return": "", "signature": " NumFeld(final Bezeichner name, final FeldInfo info)", "full_signature": "public  NumFeld(final Bezeichner name, final FeldInfo info)", "class_method_signature": "NumFeld.NumFeld(final Bezeichner name, final FeldInfo info)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final String name, final int start, final String value,\n            final int nachkommastellen)", "modifiers": "@Deprecated public", "return": "", "signature": " NumFeld(final String name, final int start, final String value,\n            final int nachkommastellen)", "full_signature": "@Deprecated public  NumFeld(final String name, final int start, final String value,\n            final int nachkommastellen)", "class_method_signature": "NumFeld.NumFeld(final String name, final int start, final String value,\n            final int nachkommastellen)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final Bezeichner name, final int start, final String value, final int nachkommastellen)", "modifiers": "public", "return": "", "signature": " NumFeld(final Bezeichner name, final int start, final String value, final int nachkommastellen)", "full_signature": "public  NumFeld(final Bezeichner name, final int start, final String value, final int nachkommastellen)", "class_method_signature": "NumFeld.NumFeld(final Bezeichner name, final int start, final String value, final int nachkommastellen)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final Bezeichner name, final int length, final int start, final int value,\n            final int nachkommastellen)", "modifiers": "public", "return": "", "signature": " NumFeld(final Bezeichner name, final int length, final int start, final int value,\n            final int nachkommastellen)", "full_signature": "public  NumFeld(final Bezeichner name, final int length, final int start, final int value,\n            final int nachkommastellen)", "class_method_signature": "NumFeld.NumFeld(final Bezeichner name, final int length, final int start, final int value,\n            final int nachkommastellen)", "testcase": false, "constructor": true}, {"identifier": "NumFeld", "parameters": "(final NumFeld other)", "modifiers": "public", "return": "", "signature": " NumFeld(final NumFeld other)", "full_signature": "public  NumFeld(final NumFeld other)", "class_method_signature": "NumFeld.NumFeld(final NumFeld other)", "testcase": false, "constructor": true}, {"identifier": "getDefaultAlignment", "parameters": "()", "modifiers": "@Override protected", "return": "Align", "signature": "Align getDefaultAlignment()", "full_signature": "@Override protected Align getDefaultAlignment()", "class_method_signature": "NumFeld.getDefaultAlignment()", "testcase": false, "constructor": false}, {"identifier": "mitNachkommastellen", "parameters": "(final int n)", "modifiers": "public", "return": "NumFeld", "signature": "NumFeld mitNachkommastellen(final int n)", "full_signature": "public NumFeld mitNachkommastellen(final int n)", "class_method_signature": "NumFeld.mitNachkommastellen(final int n)", "testcase": false, "constructor": false}, {"identifier": "getNachkommastellen", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNachkommastellen()", "full_signature": "public int getNachkommastellen()", "class_method_signature": "NumFeld.getNachkommastellen()", "testcase": false, "constructor": false}, {"identifier": "setInhalt", "parameters": "(final int n)", "modifiers": "@Override public", "return": "void", "signature": "void setInhalt(final int n)", "full_signature": "@Override public void setInhalt(final int n)", "class_method_signature": "NumFeld.setInhalt(final int n)", "testcase": false, "constructor": false}, {"identifier": "setInhalt", "parameters": "(final long n)", "modifiers": "public", "return": "void", "signature": "void setInhalt(final long n)", "full_signature": "public void setInhalt(final long n)", "class_method_signature": "NumFeld.setInhalt(final long n)", "testcase": false, "constructor": false}, {"identifier": "resetInhalt", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetInhalt()", "full_signature": "@Override public void resetInhalt()", "class_method_signature": "NumFeld.resetInhalt()", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int toInt()", "full_signature": "public int toInt()", "class_method_signature": "NumFeld.toInt()", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long toLong()", "full_signature": "public long toLong()", "class_method_signature": "NumFeld.toLong()", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double toDouble()", "full_signature": "public double toDouble()", "class_method_signature": "NumFeld.toDouble()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "@Override public boolean isValid()", "class_method_signature": "NumFeld.isValid()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "@Override public", "return": "List<ConstraintViolation>", "signature": "List<ConstraintViolation> validate()", "full_signature": "@Override public List<ConstraintViolation> validate()", "class_method_signature": "NumFeld.validate()", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String format()", "full_signature": "@Override public String format()", "class_method_signature": "NumFeld.format()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@SuppressWarnings(\"squid:S2975\") @Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@SuppressWarnings(\"squid:S2975\") @Override public Object clone()", "class_method_signature": "NumFeld.clone()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/gdv/xport/feld/NumFeld.java"}, "focal_method": {"identifier": "toInt", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int toInt() {\n        String s = this.getInhalt().trim();\n        if (s.startsWith(\"+\")) {\n            return Integer.parseInt(s.substring(1));\n        }\n        return Integer.parseInt(s);\n    }", "signature": "int toInt()", "full_signature": "public int toInt()", "class_method_signature": "NumFeld.toInt()", "testcase": false, "constructor": false, "invocations": ["trim", "getInhalt", "startsWith", "parseInt", "substring", "parseInt"]}, "repository": {"repo_id": 335218, "url": "https://github.com/oboehm/gdv.xport", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 12, "size": 5392, "license": "licensed"}}