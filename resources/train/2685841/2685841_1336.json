{"test_class": {"identifier": "PatientEmptyObjectsRemoverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<EventListener> mocker =\n        new MockitoComponentMockingRule<EventListener>(PatientEmptyObjectsRemover.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<EventListener>", "declarator": "mocker =\n        new MockitoComponentMockingRule<EventListener>(PatientEmptyObjectsRemover.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private XWiki xWiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xWiki", "var_name": "xWiki"}, {"original_string": "private PatientEmptyObjectsRemover patientEmptyObjectsRemover;", "modifier": "private", "type": "PatientEmptyObjectsRemover", "declarator": "patientEmptyObjectsRemover", "var_name": "patientEmptyObjectsRemover"}, {"original_string": "private List<BaseObject> xWikiObjects;", "modifier": "private", "type": "List<BaseObject>", "declarator": "xWikiObjects", "var_name": "xWikiObjects"}, {"original_string": "@Mock\n    private XWikiDocument xWikiDocument;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "xWikiDocument", "var_name": "xWikiDocument"}], "file": "components/patient-data/impl/src/test/java/org/phenotips/data/internal/PatientEmptyObjectsRemoverTest.java"}, "test_case": {"identifier": "emptyObjectRemovedTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptyObjectRemovedTest() throws XWikiException\n    {\n        BaseObject objOne = mock(BaseObject.class);\n        BaseObject objTwo = mock(BaseObject.class);\n        this.xWikiObjects.add(objOne);\n        this.xWikiObjects.add(objTwo);\n\n        BaseStringProperty property = mock(BaseStringProperty.class);\n        doReturn(property).when(objOne).getField(anyString());\n        doReturn(property).when(objTwo).getField(anyString());\n        doReturn(\"\").when(property).getValue();\n\n        this.patientEmptyObjectsRemover.onEvent(mock(Event.class), this.xWikiDocument, mock(Object.class));\n        verify(this.xWikiDocument, times(4)).removeXObject((BaseObject) anyObject());\n    }", "signature": "void emptyObjectRemovedTest()", "full_signature": "@Test public void emptyObjectRemovedTest()", "class_method_signature": "PatientEmptyObjectsRemoverTest.emptyObjectRemovedTest()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "add", "add", "mock", "getField", "when", "doReturn", "anyString", "getField", "when", "doReturn", "anyString", "getValue", "when", "doReturn", "onEvent", "mock", "mock", "removeXObject", "verify", "times", "anyObject"]}, "focal_class": {"identifier": "PatientEmptyObjectsRemover", "superclass": "extends AbstractEventListener", "interfaces": "", "fields": [{"original_string": "private static final EntityReference GENE_CLASS_REFERENCE = new EntityReference(\"GeneClass\",\n        EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE);", "modifier": "private static final", "type": "EntityReference", "declarator": "GENE_CLASS_REFERENCE = new EntityReference(\"GeneClass\",\n        EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE)", "var_name": "GENE_CLASS_REFERENCE"}, {"original_string": "private static final EntityReference VARIANT_CLASS_REFERENCE = new EntityReference(\"GeneVariantClass\",\n        EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE);", "modifier": "private static final", "type": "EntityReference", "declarator": "VARIANT_CLASS_REFERENCE = new EntityReference(\"GeneVariantClass\",\n        EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE)", "var_name": "VARIANT_CLASS_REFERENCE"}, {"original_string": "private static final String GENE_KEY = \"gene\";", "modifier": "private static final", "type": "String", "declarator": "GENE_KEY = \"gene\"", "var_name": "GENE_KEY"}, {"original_string": "private static final String VARIANT_KEY = \"cdna\";", "modifier": "private static final", "type": "String", "declarator": "VARIANT_KEY = \"cdna\"", "var_name": "VARIANT_KEY"}], "methods": [{"identifier": "PatientEmptyObjectsRemover", "parameters": "()", "modifiers": "public", "return": "", "signature": " PatientEmptyObjectsRemover()", "full_signature": "public  PatientEmptyObjectsRemover()", "class_method_signature": "PatientEmptyObjectsRemover.PatientEmptyObjectsRemover()", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "PatientEmptyObjectsRemover.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false}], "file": "components/patient-data/impl/src/main/java/org/phenotips/data/internal/PatientEmptyObjectsRemover.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        XWikiDocument doc = (XWikiDocument) source;\n\n        Map<String, EntityReference> refs = new LinkedHashMap<>();\n        refs.put(GENE_KEY, GENE_CLASS_REFERENCE);\n        refs.put(VARIANT_KEY, VARIANT_CLASS_REFERENCE);\n\n        for (String key : refs.keySet()) {\n            List<BaseObject> xWikiObjects = doc.getXObjects(refs.get(key));\n            if (xWikiObjects == null || xWikiObjects.isEmpty()) {\n                continue;\n            }\n            for (BaseObject object : xWikiObjects) {\n                if (object == null) {\n                    continue;\n                }\n                BaseStringProperty field = (BaseStringProperty) object.getField(key);\n                if (field == null || StringUtils.isEmpty(field.getValue())) {\n                    doc.removeXObject(object);\n                }\n            }\n        }\n    }", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "PatientEmptyObjectsRemover.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false, "invocations": ["put", "put", "keySet", "getXObjects", "get", "isEmpty", "getField", "isEmpty", "getValue", "removeXObject"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}