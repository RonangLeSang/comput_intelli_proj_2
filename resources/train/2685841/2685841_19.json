{"test_class": {"identifier": "StudyRecordConfigurationModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SECTIONS_LABEL = \"sections\";", "modifier": "private static final", "type": "String", "declarator": "SECTIONS_LABEL = \"sections\"", "var_name": "SECTIONS_LABEL"}, {"original_string": "private static final String FIELDS_LABEL = \"fields\";", "modifier": "private static final", "type": "String", "declarator": "FIELDS_LABEL = \"fields\"", "var_name": "FIELDS_LABEL"}, {"original_string": "@Rule\n    public final MockitoComponentMockingRule<RecordConfigurationModule> mocker =\n        new MockitoComponentMockingRule<>(StudyRecordConfigurationModule.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<RecordConfigurationModule>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(StudyRecordConfigurationModule.class)", "var_name": "mocker"}, {"original_string": "private DocumentAccessBridge dab;", "modifier": "private", "type": "DocumentAccessBridge", "declarator": "dab", "var_name": "dab"}, {"original_string": "@Mock\n    private DefaultRecordConfiguration config;", "modifier": "@Mock\n    private", "type": "DefaultRecordConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "private DocumentReference studyDocumentReference = new DocumentReference(\"xwiki\", \"Studies\", \"Ataxia\");", "modifier": "private", "type": "DocumentReference", "declarator": "studyDocumentReference = new DocumentReference(\"xwiki\", \"Studies\", \"Ataxia\")", "var_name": "studyDocumentReference"}, {"original_string": "@Mock\n    private XWikiDocument studyDocument;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "studyDocument", "var_name": "studyDocument"}, {"original_string": "private DocumentReference mappingDocumentReference =\n        new DocumentReference(\"xwiki\", \"PhenoTips\", \"Ataxia phenotype mapping\");", "modifier": "private", "type": "DocumentReference", "declarator": "mappingDocumentReference =\n        new DocumentReference(\"xwiki\", \"PhenoTips\", \"Ataxia phenotype mapping\")", "var_name": "mappingDocumentReference"}, {"original_string": "@Mock\n    private BaseObject studyObject;", "modifier": "@Mock\n    private", "type": "BaseObject", "declarator": "studyObject", "var_name": "studyObject"}, {"original_string": "private DocumentReference currentDocument = new DocumentReference(\"xwiki\", \"data\", \"P0000001\");", "modifier": "private", "type": "DocumentReference", "declarator": "currentDocument = new DocumentReference(\"xwiki\", \"data\", \"P0000001\")", "var_name": "currentDocument"}, {"original_string": "private DocumentReference bindingClassDocument = new DocumentReference(\"xwiki\", \"PhenoTips\", \"StudyBindingClass\");", "modifier": "private", "type": "DocumentReference", "declarator": "bindingClassDocument = new DocumentReference(\"xwiki\", \"PhenoTips\", \"StudyBindingClass\")", "var_name": "bindingClassDocument"}, {"original_string": "private final RecordElement elementA1 = mockElement(\"elementA1\");", "modifier": "private final", "type": "RecordElement", "declarator": "elementA1 = mockElement(\"elementA1\")", "var_name": "elementA1"}, {"original_string": "private final RecordElement elementA2 = mockElement(\"elementA2\");", "modifier": "private final", "type": "RecordElement", "declarator": "elementA2 = mockElement(\"elementA2\")", "var_name": "elementA2"}, {"original_string": "private final RecordSection sectionA = mockSection(\"sectionA\", this.elementA1, this.elementA2);", "modifier": "private final", "type": "RecordSection", "declarator": "sectionA = mockSection(\"sectionA\", this.elementA1, this.elementA2)", "var_name": "sectionA"}, {"original_string": "private final RecordElement elementB1 = mockElement(\"elementB1\");", "modifier": "private final", "type": "RecordElement", "declarator": "elementB1 = mockElement(\"elementB1\")", "var_name": "elementB1"}, {"original_string": "private final RecordElement elementB2 = mockElement(\"elementB2\");", "modifier": "private final", "type": "RecordElement", "declarator": "elementB2 = mockElement(\"elementB2\")", "var_name": "elementB2"}, {"original_string": "private final RecordElement elementB3 = mockElement(\"elementB3\");", "modifier": "private final", "type": "RecordElement", "declarator": "elementB3 = mockElement(\"elementB3\")", "var_name": "elementB3"}, {"original_string": "private final RecordSection sectionB = mockSection(\"sectionB\", this.elementB1, this.elementB2, this.elementB3);", "modifier": "private final", "type": "RecordSection", "declarator": "sectionB = mockSection(\"sectionB\", this.elementB1, this.elementB2, this.elementB3)", "var_name": "sectionB"}, {"original_string": "private final RecordElement elementC1 = mockElement(\"elementC1\");", "modifier": "private final", "type": "RecordElement", "declarator": "elementC1 = mockElement(\"elementC1\")", "var_name": "elementC1"}, {"original_string": "private final RecordSection sectionC = mockSection(\"sectionC\", this.elementC1);", "modifier": "private final", "type": "RecordSection", "declarator": "sectionC = mockSection(\"sectionC\", this.elementC1)", "var_name": "sectionC"}], "file": "components/studies/api/src/test/java/org/phenotips/studies/internal/StudyRecordConfigurationModuleTest.java"}, "test_case": {"identifier": "processWithNoStudyBoundReturnsPreviousConfigurationUnchanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processWithNoStudyBoundReturnsPreviousConfigurationUnchanged() throws ComponentLookupException\n    {\n        when(this.dab.getProperty(this.currentDocument, this.bindingClassDocument,\n            StudyRecordConfigurationModule.STUDY_REFERENCE_PROPERTY_LABEL))\n                .thenReturn(\"\");\n        Assert.assertSame(this.config, this.mocker.getComponentUnderTest().process(this.config));\n        verifyZeroInteractions(this.config);\n\n        when(this.dab.getProperty(this.currentDocument, this.bindingClassDocument,\n            StudyRecordConfigurationModule.STUDY_REFERENCE_PROPERTY_LABEL))\n                .thenReturn(null);\n        Assert.assertSame(this.config, this.mocker.getComponentUnderTest().process(this.config));\n        verifyZeroInteractions(this.config);\n    }", "signature": "void processWithNoStudyBoundReturnsPreviousConfigurationUnchanged()", "full_signature": "@Test public void processWithNoStudyBoundReturnsPreviousConfigurationUnchanged()", "class_method_signature": "StudyRecordConfigurationModuleTest.processWithNoStudyBoundReturnsPreviousConfigurationUnchanged()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProperty", "assertSame", "process", "getComponentUnderTest", "verifyZeroInteractions", "thenReturn", "when", "getProperty", "assertSame", "process", "getComponentUnderTest", "verifyZeroInteractions"]}, "focal_class": {"identifier": "StudyRecordConfigurationModule", "superclass": "", "interfaces": "implements RecordConfigurationModule", "fields": [{"original_string": "public static final EntityReference STUDY_CLASS_REFERENCE =\n        new EntityReference(\"StudyClass\", EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE);", "modifier": "public static final", "type": "EntityReference", "declarator": "STUDY_CLASS_REFERENCE =\n        new EntityReference(\"StudyClass\", EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE)", "var_name": "STUDY_CLASS_REFERENCE"}, {"original_string": "public static final EntityReference STUDY_BINDING_CLASS_REFERENCE = new EntityReference(\"StudyBindingClass\",\n        EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE);", "modifier": "public static final", "type": "EntityReference", "declarator": "STUDY_BINDING_CLASS_REFERENCE = new EntityReference(\"StudyBindingClass\",\n        EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE)", "var_name": "STUDY_BINDING_CLASS_REFERENCE"}, {"original_string": "public static final String STUDY_REFERENCE_PROPERTY_LABEL = \"studyReference\";", "modifier": "public static final", "type": "String", "declarator": "STUDY_REFERENCE_PROPERTY_LABEL = \"studyReference\"", "var_name": "STUDY_REFERENCE_PROPERTY_LABEL"}, {"original_string": "@Inject\n    private DocumentAccessBridge dab;", "modifier": "@Inject\n    private", "type": "DocumentAccessBridge", "declarator": "dab", "var_name": "dab"}, {"original_string": "@Inject\n    @Named(\"current\")\n    private DocumentReferenceResolver<EntityReference> resolver;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "DocumentReferenceResolver<EntityReference>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Inject\n    private Provider<XWikiContext> xcontextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "xcontextProvider", "var_name": "xcontextProvider"}, {"original_string": "@Inject\n    @Named(\"current\")\n    private DocumentReferenceResolver<String> referenceParser;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "referenceParser", "var_name": "referenceParser"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "process", "parameters": "(RecordConfiguration config)", "modifiers": "@Override public", "return": "RecordConfiguration", "signature": "RecordConfiguration process(RecordConfiguration config)", "full_signature": "@Override public RecordConfiguration process(RecordConfiguration config)", "class_method_signature": "StudyRecordConfigurationModule.process(RecordConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "updateStudyConfiguration", "parameters": "(final RecordConfiguration config, final List<String> sectionOverrides,\n        final List<String> fieldOverrides)", "modifiers": "private", "return": "void", "signature": "void updateStudyConfiguration(final RecordConfiguration config, final List<String> sectionOverrides,\n        final List<String> fieldOverrides)", "full_signature": "private void updateStudyConfiguration(final RecordConfiguration config, final List<String> sectionOverrides,\n        final List<String> fieldOverrides)", "class_method_signature": "StudyRecordConfigurationModule.updateStudyConfiguration(final RecordConfiguration config, final List<String> sectionOverrides,\n        final List<String> fieldOverrides)", "testcase": false, "constructor": false}, {"identifier": "configureFields", "parameters": "(final RecordSection section, final List<String> fieldOverrides)", "modifiers": "private", "return": "void", "signature": "void configureFields(final RecordSection section, final List<String> fieldOverrides)", "full_signature": "private void configureFields(final RecordSection section, final List<String> fieldOverrides)", "class_method_signature": "StudyRecordConfigurationModule.configureFields(final RecordSection section, final List<String> fieldOverrides)", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "StudyRecordConfigurationModule.getPriority()", "testcase": false, "constructor": false}, {"identifier": "supportsRecordType", "parameters": "(String recordType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsRecordType(String recordType)", "full_signature": "@Override public boolean supportsRecordType(String recordType)", "class_method_signature": "StudyRecordConfigurationModule.supportsRecordType(String recordType)", "testcase": false, "constructor": false}, {"identifier": "getBoundConfiguration", "parameters": "()", "modifiers": "private", "return": "StudyConfiguration", "signature": "StudyConfiguration getBoundConfiguration()", "full_signature": "private StudyConfiguration getBoundConfiguration()", "class_method_signature": "StudyRecordConfigurationModule.getBoundConfiguration()", "testcase": false, "constructor": false}], "file": "components/studies/api/src/main/java/org/phenotips/studies/internal/StudyRecordConfigurationModule.java"}, "focal_method": {"identifier": "process", "parameters": "(RecordConfiguration config)", "modifiers": "@Override public", "return": "RecordConfiguration", "body": "@Override\n    public RecordConfiguration process(RecordConfiguration config)\n    {\n        if (config == null) {\n            return null;\n        }\n\n        final StudyConfiguration configObj = getBoundConfiguration();\n\n        // If no study record configuration is provided, then return the default configuration, unchanged.\n        if (configObj == null) {\n            return config;\n        }\n\n        // A study may change the phenotype mapping\n        String customPhenotypeMapping = configObj.getPhenotypeMapping();\n        if (StringUtils.isNotBlank(customPhenotypeMapping)) {\n            config.setPhenotypeMapping(this.referenceParser.resolve(customPhenotypeMapping));\n        }\n\n        // Get the sections and fields overrides.\n        final List<String> sectionOverrides = configObj.getSectionsOverride();\n        final List<String> fieldOverrides = configObj.getFieldsOverride();\n\n        // If no overrides for enabled sections or fields are specified, then everything should be unchanged.\n        if (CollectionUtils.isEmpty(sectionOverrides) || CollectionUtils.isEmpty(fieldOverrides)) {\n            return config;\n        }\n        // Otherwise, update the configuration.\n        updateStudyConfiguration(config, sectionOverrides, fieldOverrides);\n        return config;\n    }", "signature": "RecordConfiguration process(RecordConfiguration config)", "full_signature": "@Override public RecordConfiguration process(RecordConfiguration config)", "class_method_signature": "StudyRecordConfigurationModule.process(RecordConfiguration config)", "testcase": false, "constructor": false, "invocations": ["getBoundConfiguration", "getPhenotypeMapping", "isNotBlank", "setPhenotypeMapping", "resolve", "getSectionsOverride", "getFieldsOverride", "isEmpty", "isEmpty", "updateStudyConfiguration"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}