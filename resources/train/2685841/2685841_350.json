{"test_class": {"identifier": "DefaultPermissionsManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<PermissionsManager> mocker =\n        new MockitoComponentMockingRule<PermissionsManager>(DefaultPermissionsManager.class, PermissionsManager.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<PermissionsManager>", "declarator": "mocker =\n        new MockitoComponentMockingRule<PermissionsManager>(DefaultPermissionsManager.class, PermissionsManager.class)", "var_name": "mocker"}, {"original_string": "private AccessLevel none = new NoAccessLevel();", "modifier": "private", "type": "AccessLevel", "declarator": "none = new NoAccessLevel()", "var_name": "none"}, {"original_string": "private AccessLevel view = new ViewAccessLevel();", "modifier": "private", "type": "AccessLevel", "declarator": "view = new ViewAccessLevel()", "var_name": "view"}, {"original_string": "private AccessLevel edit = new EditAccessLevel();", "modifier": "private", "type": "AccessLevel", "declarator": "edit = new EditAccessLevel()", "var_name": "edit"}, {"original_string": "private AccessLevel manage = new ManageAccessLevel();", "modifier": "private", "type": "AccessLevel", "declarator": "manage = new ManageAccessLevel()", "var_name": "manage"}, {"original_string": "private AccessLevel owner = new OwnerAccessLevel();", "modifier": "private", "type": "AccessLevel", "declarator": "owner = new OwnerAccessLevel()", "var_name": "owner"}, {"original_string": "private Visibility privateVisibility = new MockVisibility(\"private\", 0, this.none);", "modifier": "private", "type": "Visibility", "declarator": "privateVisibility = new MockVisibility(\"private\", 0, this.none)", "var_name": "privateVisibility"}, {"original_string": "private Visibility publicVisibility = new MockVisibility(\"public\", 50, this.view);", "modifier": "private", "type": "Visibility", "declarator": "publicVisibility = new MockVisibility(\"public\", 50, this.view)", "var_name": "publicVisibility"}, {"original_string": "private EntityPermissionsManager entityPermissionsManager;", "modifier": "private", "type": "EntityPermissionsManager", "declarator": "entityPermissionsManager", "var_name": "entityPermissionsManager"}], "file": "components/patient-access-rules/api/src/test/java/org/phenotips/data/permissions/internal/DefaultPermissionsManagerTest.java"}, "test_case": {"identifier": "getPatientAccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPatientAccess() throws ComponentLookupException\n    {\n        ComponentManager cm = this.mocker.getInstance(ComponentManager.class, \"context\");\n        Patient patient = mock(Patient.class);\n        EntityAccessHelper helper = mock(EntityAccessHelper.class);\n        when(cm.getInstance(EntityAccessHelper.class)).thenReturn(helper);\n        PatientAccess result = this.mocker.getComponentUnderTest().getPatientAccess(patient);\n        Assert.assertNotNull(result);\n        Assert.assertTrue(result instanceof DefaultPatientAccess);\n    }", "signature": "void getPatientAccess()", "full_signature": "@Test public void getPatientAccess()", "class_method_signature": "DefaultPermissionsManagerTest.getPatientAccess()", "testcase": true, "constructor": false, "invocations": ["getInstance", "mock", "mock", "thenReturn", "when", "getInstance", "getPatientAccess", "getComponentUnderTest", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "DefaultPermissionsManager", "superclass": "", "interfaces": "implements PermissionsManager", "fields": [{"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    @Named(\"context\")\n    private Provider<ComponentManager> componentManager;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "Provider<ComponentManager>", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "@Inject\n    private PermissionsConfiguration configuration;", "modifier": "@Inject\n    private", "type": "PermissionsConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Inject\n    private EntityPermissionsManager entityPermissionsManager;", "modifier": "@Inject\n    private", "type": "EntityPermissionsManager", "declarator": "entityPermissionsManager", "var_name": "entityPermissionsManager"}, {"original_string": "@Inject\n    private EntityAccessManager accessManager;", "modifier": "@Inject\n    private", "type": "EntityAccessManager", "declarator": "accessManager", "var_name": "accessManager"}, {"original_string": "@Inject\n    private EntityVisibilityManager visibilityManager;", "modifier": "@Inject\n    private", "type": "EntityVisibilityManager", "declarator": "visibilityManager", "var_name": "visibilityManager"}], "methods": [{"identifier": "listVisibilityOptions", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Visibility>", "signature": "Collection<Visibility> listVisibilityOptions()", "full_signature": "@Override public Collection<Visibility> listVisibilityOptions()", "class_method_signature": "DefaultPermissionsManager.listVisibilityOptions()", "testcase": false, "constructor": false}, {"identifier": "listAllVisibilityOptions", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Visibility>", "signature": "Collection<Visibility> listAllVisibilityOptions()", "full_signature": "@Override public Collection<Visibility> listAllVisibilityOptions()", "class_method_signature": "DefaultPermissionsManager.listAllVisibilityOptions()", "testcase": false, "constructor": false}, {"identifier": "getDefaultVisibility", "parameters": "()", "modifiers": "@Override public", "return": "Visibility", "signature": "Visibility getDefaultVisibility()", "full_signature": "@Override public Visibility getDefaultVisibility()", "class_method_signature": "DefaultPermissionsManager.getDefaultVisibility()", "testcase": false, "constructor": false}, {"identifier": "resolveVisibility", "parameters": "(String name)", "modifiers": "@Override public", "return": "Visibility", "signature": "Visibility resolveVisibility(String name)", "full_signature": "@Override public Visibility resolveVisibility(String name)", "class_method_signature": "DefaultPermissionsManager.resolveVisibility(String name)", "testcase": false, "constructor": false}, {"identifier": "listAccessLevels", "parameters": "()", "modifiers": "@Override public", "return": "Collection<AccessLevel>", "signature": "Collection<AccessLevel> listAccessLevels()", "full_signature": "@Override public Collection<AccessLevel> listAccessLevels()", "class_method_signature": "DefaultPermissionsManager.listAccessLevels()", "testcase": false, "constructor": false}, {"identifier": "resolveAccessLevel", "parameters": "(String name)", "modifiers": "@Override public", "return": "AccessLevel", "signature": "AccessLevel resolveAccessLevel(String name)", "full_signature": "@Override public AccessLevel resolveAccessLevel(String name)", "class_method_signature": "DefaultPermissionsManager.resolveAccessLevel(String name)", "testcase": false, "constructor": false}, {"identifier": "getPatientAccess", "parameters": "(Patient targetPatient)", "modifiers": "@Override public", "return": "PatientAccess", "signature": "PatientAccess getPatientAccess(Patient targetPatient)", "full_signature": "@Override public PatientAccess getPatientAccess(Patient targetPatient)", "class_method_signature": "DefaultPermissionsManager.getPatientAccess(Patient targetPatient)", "testcase": false, "constructor": false}, {"identifier": "filterByVisibility", "parameters": "(Collection<Patient> patients, Visibility requiredVisibility)", "modifiers": "@Override public", "return": "Collection<Patient>", "signature": "Collection<Patient> filterByVisibility(Collection<Patient> patients, Visibility requiredVisibility)", "full_signature": "@Override public Collection<Patient> filterByVisibility(Collection<Patient> patients, Visibility requiredVisibility)", "class_method_signature": "DefaultPermissionsManager.filterByVisibility(Collection<Patient> patients, Visibility requiredVisibility)", "testcase": false, "constructor": false}, {"identifier": "filterByVisibility", "parameters": "(Iterator<Patient> patients, Visibility requiredVisibility)", "modifiers": "@Override public", "return": "Iterator<Patient>", "signature": "Iterator<Patient> filterByVisibility(Iterator<Patient> patients, Visibility requiredVisibility)", "full_signature": "@Override public Iterator<Patient> filterByVisibility(Iterator<Patient> patients, Visibility requiredVisibility)", "class_method_signature": "DefaultPermissionsManager.filterByVisibility(Iterator<Patient> patients, Visibility requiredVisibility)", "testcase": false, "constructor": false}, {"identifier": "getHelper", "parameters": "()", "modifiers": "private", "return": "EntityAccessHelper", "signature": "EntityAccessHelper getHelper()", "full_signature": "private EntityAccessHelper getHelper()", "class_method_signature": "DefaultPermissionsManager.getHelper()", "testcase": false, "constructor": false}, {"identifier": "fireRightsUpdateEvent", "parameters": "(String patientId)", "modifiers": "public", "return": "void", "signature": "void fireRightsUpdateEvent(String patientId)", "full_signature": "public void fireRightsUpdateEvent(String patientId)", "class_method_signature": "DefaultPermissionsManager.fireRightsUpdateEvent(String patientId)", "testcase": false, "constructor": false}], "file": "components/patient-access-rules/api/src/main/java/org/phenotips/data/permissions/internal/DefaultPermissionsManager.java"}, "focal_method": {"identifier": "getPatientAccess", "parameters": "(Patient targetPatient)", "modifiers": "@Override public", "return": "PatientAccess", "body": "@Override\n    public PatientAccess getPatientAccess(Patient targetPatient)\n    {\n        return new DefaultPatientAccess(targetPatient, getHelper(), this.accessManager, this.visibilityManager);\n    }", "signature": "PatientAccess getPatientAccess(Patient targetPatient)", "full_signature": "@Override public PatientAccess getPatientAccess(Patient targetPatient)", "class_method_signature": "DefaultPermissionsManager.getPatientAccess(Patient targetPatient)", "testcase": false, "constructor": false, "invocations": ["getHelper"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}