{"test_class": {"identifier": "AbstractSimpleControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATA_NAME = AbstractSimpleControllerTestImplementation.DATA_NAME;", "modifier": "private static final", "type": "String", "declarator": "DATA_NAME = AbstractSimpleControllerTestImplementation.DATA_NAME", "var_name": "DATA_NAME"}, {"original_string": "private static final String PROPERTY_1 = AbstractSimpleControllerTestImplementation.PROPERTY_1;", "modifier": "private static final", "type": "String", "declarator": "PROPERTY_1 = AbstractSimpleControllerTestImplementation.PROPERTY_1", "var_name": "PROPERTY_1"}, {"original_string": "private static final String PROPERTY_2 = AbstractSimpleControllerTestImplementation.PROPERTY_2;", "modifier": "private static final", "type": "String", "declarator": "PROPERTY_2 = AbstractSimpleControllerTestImplementation.PROPERTY_2", "var_name": "PROPERTY_2"}, {"original_string": "private static final String PROPERTY_3 = AbstractSimpleControllerTestImplementation.PROPERTY_3;", "modifier": "private static final", "type": "String", "declarator": "PROPERTY_3 = AbstractSimpleControllerTestImplementation.PROPERTY_3", "var_name": "PROPERTY_3"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<PatientDataController<String>> mocker =\n        new MockitoComponentMockingRule<>(\n            AbstractSimpleControllerTestImplementation.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<PatientDataController<String>>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(\n            AbstractSimpleControllerTestImplementation.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    protected Patient patient;", "modifier": "@Mock\n    protected", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    protected XWikiDocument doc;", "modifier": "@Mock\n    protected", "type": "XWikiDocument", "declarator": "doc", "var_name": "doc"}, {"original_string": "@Mock\n    protected BaseObject data;", "modifier": "@Mock\n    protected", "type": "BaseObject", "declarator": "data", "var_name": "data"}, {"original_string": "private PatientDataController<String> component;", "modifier": "private", "type": "PatientDataController<String>", "declarator": "component", "var_name": "component"}], "file": "components/patient-data/impl/src/test/java/org/phenotips/data/internal/controller/AbstractSimpleControllerTest.java"}, "test_case": {"identifier": "writeJSONWithSelectedFieldsAddsSelectedValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeJSONWithSelectedFieldsAddsSelectedValues() throws ComponentLookupException\n    {\n        Map<String, String> map = new LinkedHashMap<>();\n        map.put(PROPERTY_1, \"datum1\");\n        map.put(PROPERTY_2, \"datum2\");\n        map.put(PROPERTY_3, \"datum3\");\n        PatientData<String> patientData = new DictionaryPatientData<>(DATA_NAME, map);\n        doReturn(patientData).when(this.patient).getData(DATA_NAME);\n        JSONObject json = new JSONObject();\n        Collection<String> selectedFields = new LinkedList<>();\n        selectedFields.add(PROPERTY_1);\n        selectedFields.add(PROPERTY_3);\n\n        this.component.writeJSON(this.patient, json, selectedFields);\n\n        Assert.assertNotNull(json.get(DATA_NAME));\n        Assert.assertTrue(json.get(DATA_NAME) instanceof JSONObject);\n        JSONObject container = json.getJSONObject(DATA_NAME);\n        Assert.assertEquals(\"datum1\", container.get(PROPERTY_1));\n        Assert.assertEquals(\"datum3\", container.get(PROPERTY_3));\n        Assert.assertFalse(container.has(PROPERTY_2));\n    }", "signature": "void writeJSONWithSelectedFieldsAddsSelectedValues()", "full_signature": "@Test public void writeJSONWithSelectedFieldsAddsSelectedValues()", "class_method_signature": "AbstractSimpleControllerTest.writeJSONWithSelectedFieldsAddsSelectedValues()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getData", "when", "doReturn", "add", "add", "writeJSON", "assertNotNull", "get", "assertTrue", "get", "getJSONObject", "assertEquals", "get", "assertEquals", "get", "assertFalse", "has"]}, "focal_class": {"identifier": "AbstractSimpleController", "superclass": "", "interfaces": "implements PatientDataController<String>", "fields": [{"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private Provider<XWikiContext> contextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}], "methods": [{"identifier": "load", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "PatientData<String>", "signature": "PatientData<String> load(Patient patient)", "full_signature": "@Override public PatientData<String> load(Patient patient)", "class_method_signature": "AbstractSimpleController.load(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "signature": "void save(Patient patient)", "full_signature": "@Override public void save(Patient patient)", "class_method_signature": "AbstractSimpleController.save(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "full_signature": "@Override public void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "class_method_signature": "AbstractSimpleController.save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "saveControllerData", "parameters": "(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final PatientData<String> data,\n        @Nonnull final PatientWritePolicy policy)", "modifiers": "private", "return": "void", "signature": "void saveControllerData(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final PatientData<String> data,\n        @Nonnull final PatientWritePolicy policy)", "full_signature": "private void saveControllerData(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final PatientData<String> data,\n        @Nonnull final PatientWritePolicy policy)", "class_method_signature": "AbstractSimpleController.saveControllerData(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final PatientData<String> data,\n        @Nonnull final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "saveFieldValue", "parameters": "(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final String property,\n        @Nullable final String value)", "modifiers": "", "return": "void", "signature": "void saveFieldValue(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final String property,\n        @Nullable final String value)", "full_signature": " void saveFieldValue(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final String property,\n        @Nullable final String value)", "class_method_signature": "AbstractSimpleController.saveFieldValue(\n        @Nonnull final BaseObject xwikiDataObject,\n        @Nonnull final String property,\n        @Nullable final String value)", "testcase": false, "constructor": false}, {"identifier": "getValueForProperty", "parameters": "(@Nonnull final PatientData<String> data, @Nonnull final String property)", "modifiers": "", "return": "String", "signature": "String getValueForProperty(@Nonnull final PatientData<String> data, @Nonnull final String property)", "full_signature": " String getValueForProperty(@Nonnull final PatientData<String> data, @Nonnull final String property)", "class_method_signature": "AbstractSimpleController.getValueForProperty(@Nonnull final PatientData<String> data, @Nonnull final String property)", "testcase": false, "constructor": false}, {"identifier": "containsProperty", "parameters": "(@Nonnull final PatientData<String> data, @Nonnull final String property)", "modifiers": "", "return": "boolean", "signature": "boolean containsProperty(@Nonnull final PatientData<String> data, @Nonnull final String property)", "full_signature": " boolean containsProperty(@Nonnull final PatientData<String> data, @Nonnull final String property)", "class_method_signature": "AbstractSimpleController.containsProperty(@Nonnull final PatientData<String> data, @Nonnull final String property)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json)", "class_method_signature": "AbstractSimpleController.writeJSON(Patient patient, JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "class_method_signature": "AbstractSimpleController.writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "testcase": false, "constructor": false}, {"identifier": "readJSON", "parameters": "(JSONObject json)", "modifiers": "@Override public", "return": "PatientData<String>", "signature": "PatientData<String> readJSON(JSONObject json)", "full_signature": "@Override public PatientData<String> readJSON(JSONObject json)", "class_method_signature": "AbstractSimpleController.readJSON(JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "protected abstract", "return": "List<String>", "signature": "List<String> getProperties()", "full_signature": "protected abstract List<String> getProperties()", "class_method_signature": "AbstractSimpleController.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getJsonPropertyName", "parameters": "()", "modifiers": "protected abstract", "return": "String", "signature": "String getJsonPropertyName()", "full_signature": "protected abstract String getJsonPropertyName()", "class_method_signature": "AbstractSimpleController.getJsonPropertyName()", "testcase": false, "constructor": false}, {"identifier": "getStorageXClass", "parameters": "()", "modifiers": "protected", "return": "EntityReference", "signature": "EntityReference getStorageXClass()", "full_signature": "protected EntityReference getStorageXClass()", "class_method_signature": "AbstractSimpleController.getStorageXClass()", "testcase": false, "constructor": false}], "file": "components/patient-data/impl/src/main/java/org/phenotips/data/internal/controller/AbstractSimpleController.java"}, "focal_method": {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeJSON(Patient patient, JSONObject json)\n    {\n        writeJSON(patient, json, null);\n    }", "signature": "void writeJSON(Patient patient, JSONObject json)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json)", "class_method_signature": "AbstractSimpleController.writeJSON(Patient patient, JSONObject json)", "testcase": false, "constructor": false, "invocations": ["writeJSON"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}