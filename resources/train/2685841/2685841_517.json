{"test_class": {"identifier": "RemoteGeneNomenclatureTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<Vocabulary> mocker =\n        new MockitoComponentMockingRule<Vocabulary>(RemoteGeneNomenclature.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<Vocabulary>", "declarator": "mocker =\n        new MockitoComponentMockingRule<Vocabulary>(RemoteGeneNomenclature.class)", "var_name": "mocker"}, {"original_string": "private ConfigurationSource configuration;", "modifier": "private", "type": "ConfigurationSource", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Mock\n    private CloseableHttpClient client;", "modifier": "@Mock\n    private", "type": "CloseableHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "@Mock\n    private CloseableHttpResponse response;", "modifier": "@Mock\n    private", "type": "CloseableHttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private HttpEntity responseEntity;", "modifier": "@Mock\n    private", "type": "HttpEntity", "declarator": "responseEntity", "var_name": "responseEntity"}, {"original_string": "@Mock\n    private Cache<VocabularyTerm> cache;", "modifier": "@Mock\n    private", "type": "Cache<VocabularyTerm>", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Mock\n    private VocabularyTerm term;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "term", "var_name": "term"}, {"original_string": "private VocabularyTerm emptyMarker;", "modifier": "private", "type": "VocabularyTerm", "declarator": "emptyMarker", "var_name": "emptyMarker"}], "file": "components/vocabularies/hgnc-remote/api/src/test/java/org/phenotips/vocabulary/internal/RemoteGeneNomenclatureTest.java"}, "test_case": {"identifier": "getTermUsesCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTermUsesCache() throws ComponentLookupException, URISyntaxException,\n        ClientProtocolException, IOException\n    {\n        when(this.cache.get(\"BRCA1\")).thenReturn(this.term);\n        VocabularyTerm result = this.mocker.getComponentUnderTest().getTerm(\"BRCA1\");\n        verify(this.client, never()).execute(any(HttpUriRequest.class));\n        Assert.assertSame(this.term, result);\n    }", "signature": "void getTermUsesCache()", "full_signature": "@Test public void getTermUsesCache()", "class_method_signature": "RemoteGeneNomenclatureTest.getTermUsesCache()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "getTerm", "getComponentUnderTest", "execute", "verify", "never", "any", "assertSame"]}, "focal_class": {"identifier": "RemoteGeneNomenclature", "superclass": "", "interfaces": "implements Vocabulary, Initializable", "fields": [{"original_string": "private static final Collection<String> SUPPORTED_CATEGORIES = Collections.singletonList(\"gene\");", "modifier": "private static final", "type": "Collection<String>", "declarator": "SUPPORTED_CATEGORIES = Collections.singletonList(\"gene\")", "var_name": "SUPPORTED_CATEGORIES"}, {"original_string": "private static final VocabularyTerm EMPTY_MARKER = new JSONOntologyTerm(null, null);", "modifier": "private static final", "type": "VocabularyTerm", "declarator": "EMPTY_MARKER = new JSONOntologyTerm(null, null)", "var_name": "EMPTY_MARKER"}, {"original_string": "private static final String RESPONSE_KEY = \"response\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_KEY = \"response\"", "var_name": "RESPONSE_KEY"}, {"original_string": "private static final String DATA_KEY = \"docs\";", "modifier": "private static final", "type": "String", "declarator": "DATA_KEY = \"docs\"", "var_name": "DATA_KEY"}, {"original_string": "private static final String LABEL_KEY = \"symbol\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_KEY = \"symbol\"", "var_name": "LABEL_KEY"}, {"original_string": "private static final String WILDCARD = \"*\";", "modifier": "private static final", "type": "String", "declarator": "WILDCARD = \"*\"", "var_name": "WILDCARD"}, {"original_string": "private static final String DEFAULT_OPERATOR = \"AND\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_OPERATOR = \"AND\"", "var_name": "DEFAULT_OPERATOR"}, {"original_string": "private static final Map<String, String> QUERY_OPERATORS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "QUERY_OPERATORS = new HashMap<>()", "var_name": "QUERY_OPERATORS"}, {"original_string": "@Inject\n    @Named(\"xwikiproperties\")\n    private ConfigurationSource configuration;", "modifier": "@Inject\n    @Named(\"xwikiproperties\")\n    private", "type": "ConfigurationSource", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private String baseServiceURL;", "modifier": "private", "type": "String", "declarator": "baseServiceURL", "var_name": "baseServiceURL"}, {"original_string": "private String searchServiceURL;", "modifier": "private", "type": "String", "declarator": "searchServiceURL", "var_name": "searchServiceURL"}, {"original_string": "private String infoServiceURL;", "modifier": "private", "type": "String", "declarator": "infoServiceURL", "var_name": "infoServiceURL"}, {"original_string": "private String fetchServiceURL;", "modifier": "private", "type": "String", "declarator": "fetchServiceURL", "var_name": "fetchServiceURL"}, {"original_string": "private final CloseableHttpClient client = HttpClients.createSystem();", "modifier": "private final", "type": "CloseableHttpClient", "declarator": "client = HttpClients.createSystem()", "var_name": "client"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private Cache<VocabularyTerm> cache;", "modifier": "private", "type": "Cache<VocabularyTerm>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private Cache<JSONObject> infoCache;", "modifier": "private", "type": "Cache<JSONObject>", "declarator": "infoCache", "var_name": "infoCache"}, {"original_string": "@Inject\n    private CacheManager cacheFactory;", "modifier": "@Inject\n    private", "type": "CacheManager", "declarator": "cacheFactory", "var_name": "cacheFactory"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "RemoteGeneNomenclature.initialize()", "testcase": false, "constructor": false}, {"identifier": "getTerm", "parameters": "(String id)", "modifiers": "@Override public", "return": "VocabularyTerm", "signature": "VocabularyTerm getTerm(String id)", "full_signature": "@Override public VocabularyTerm getTerm(String id)", "class_method_signature": "RemoteGeneNomenclature.getTerm(String id)", "testcase": false, "constructor": false}, {"identifier": "getTerms", "parameters": "(Collection<String> ids)", "modifiers": "@Override public", "return": "Set<VocabularyTerm>", "signature": "Set<VocabularyTerm> getTerms(Collection<String> ids)", "full_signature": "@Override public Set<VocabularyTerm> getTerms(Collection<String> ids)", "class_method_signature": "RemoteGeneNomenclature.getTerms(Collection<String> ids)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(Map<String, ?> fieldValues)", "modifiers": "@Override public", "return": "List<VocabularyTerm>", "signature": "List<VocabularyTerm> search(Map<String, ?> fieldValues)", "full_signature": "@Override public List<VocabularyTerm> search(Map<String, ?> fieldValues)", "class_method_signature": "RemoteGeneNomenclature.search(Map<String, ?> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(Map<String, ?> fieldValues, Map<String, String> queryOptions)", "modifiers": "@Override public", "return": "List<VocabularyTerm>", "signature": "List<VocabularyTerm> search(Map<String, ?> fieldValues, Map<String, String> queryOptions)", "full_signature": "@Override public List<VocabularyTerm> search(Map<String, ?> fieldValues, Map<String, String> queryOptions)", "class_method_signature": "RemoteGeneNomenclature.search(Map<String, ?> fieldValues, Map<String, String> queryOptions)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String input)", "modifiers": "@Override public", "return": "List<VocabularyTerm>", "signature": "List<VocabularyTerm> search(String input)", "full_signature": "@Override public List<VocabularyTerm> search(String input)", "class_method_signature": "RemoteGeneNomenclature.search(String input)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String input, int maxResults, String sort, String customFilter)", "modifiers": "@Override public", "return": "List<VocabularyTerm>", "signature": "List<VocabularyTerm> search(String input, int maxResults, String sort, String customFilter)", "full_signature": "@Override public List<VocabularyTerm> search(String input, int maxResults, String sort, String customFilter)", "class_method_signature": "RemoteGeneNomenclature.search(String input, int maxResults, String sort, String customFilter)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Map<String, ?> fieldValues)", "modifiers": "@Override public", "return": "long", "signature": "long count(Map<String, ?> fieldValues)", "full_signature": "@Override public long count(Map<String, ?> fieldValues)", "class_method_signature": "RemoteGeneNomenclature.count(Map<String, ?> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "getDistance", "parameters": "(String fromTermId, String toTermId)", "modifiers": "@Override public", "return": "long", "signature": "long getDistance(String fromTermId, String toTermId)", "full_signature": "@Override public long getDistance(String fromTermId, String toTermId)", "class_method_signature": "RemoteGeneNomenclature.getDistance(String fromTermId, String toTermId)", "testcase": false, "constructor": false}, {"identifier": "getDistance", "parameters": "(VocabularyTerm fromTerm, VocabularyTerm toTerm)", "modifiers": "@Override public", "return": "long", "signature": "long getDistance(VocabularyTerm fromTerm, VocabularyTerm toTerm)", "full_signature": "@Override public long getDistance(VocabularyTerm fromTerm, VocabularyTerm toTerm)", "class_method_signature": "RemoteGeneNomenclature.getDistance(VocabularyTerm fromTerm, VocabularyTerm toTerm)", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIdentifier()", "full_signature": "@Override public String getIdentifier()", "class_method_signature": "RemoteGeneNomenclature.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "RemoteGeneNomenclature.getName()", "testcase": false, "constructor": false}, {"identifier": "getAliases", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAliases()", "full_signature": "@Override public Set<String> getAliases()", "class_method_signature": "RemoteGeneNomenclature.getAliases()", "testcase": false, "constructor": false}, {"identifier": "getSupportedCategories", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getSupportedCategories()", "full_signature": "@Override public Collection<String> getSupportedCategories()", "class_method_signature": "RemoteGeneNomenclature.getSupportedCategories()", "testcase": false, "constructor": false}, {"identifier": "getWebsite", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getWebsite()", "full_signature": "@Override public String getWebsite()", "class_method_signature": "RemoteGeneNomenclature.getWebsite()", "testcase": false, "constructor": false}, {"identifier": "getCitation", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCitation()", "full_signature": "@Override public String getCitation()", "class_method_signature": "RemoteGeneNomenclature.getCitation()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "RemoteGeneNomenclature.size()", "testcase": false, "constructor": false}, {"identifier": "reindex", "parameters": "(String ontologyUrl)", "modifiers": "@Override public", "return": "int", "signature": "int reindex(String ontologyUrl)", "full_signature": "@Override public int reindex(String ontologyUrl)", "class_method_signature": "RemoteGeneNomenclature.reindex(String ontologyUrl)", "testcase": false, "constructor": false}, {"identifier": "getDefaultSourceLocation", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultSourceLocation()", "full_signature": "@Override public String getDefaultSourceLocation()", "class_method_signature": "RemoteGeneNomenclature.getDefaultSourceLocation()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "RemoteGeneNomenclature.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "()", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject getInfo()", "full_signature": "private JSONObject getInfo()", "class_method_signature": "RemoteGeneNomenclature.getInfo()", "testcase": false, "constructor": false}, {"identifier": "generateQuery", "parameters": "(Map<String, ?> fieldValues)", "modifiers": "private", "return": "String", "signature": "String generateQuery(Map<String, ?> fieldValues)", "full_signature": "private String generateQuery(Map<String, ?> fieldValues)", "class_method_signature": "RemoteGeneNomenclature.generateQuery(Map<String, ?> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "processQueryPart", "parameters": "(StringBuilder query, Map.Entry<String, ?> field, boolean includeOperator)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder processQueryPart(StringBuilder query, Map.Entry<String, ?> field, boolean includeOperator)", "full_signature": "private StringBuilder processQueryPart(StringBuilder query, Map.Entry<String, ?> field, boolean includeOperator)", "class_method_signature": "RemoteGeneNomenclature.processQueryPart(StringBuilder query, Map.Entry<String, ?> field, boolean includeOperator)", "testcase": false, "constructor": false}, {"identifier": "processSubquery", "parameters": "(StringBuilder query, Map.Entry<String, Map<String, ?>> subquery)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder processSubquery(StringBuilder query, Map.Entry<String, Map<String, ?>> subquery)", "full_signature": "private StringBuilder processSubquery(StringBuilder query, Map.Entry<String, Map<String, ?>> subquery)", "class_method_signature": "RemoteGeneNomenclature.processSubquery(StringBuilder query, Map.Entry<String, Map<String, ?>> subquery)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "()", "modifiers": "@Override public", "return": "List<VocabularyExtension>", "signature": "List<VocabularyExtension> getExtensions()", "full_signature": "@Override public List<VocabularyExtension> getExtensions()", "class_method_signature": "RemoteGeneNomenclature.getExtensions()", "testcase": false, "constructor": false}], "file": "components/vocabularies/hgnc-remote/api/src/main/java/org/phenotips/vocabulary/internal/RemoteGeneNomenclature.java"}, "focal_method": {"identifier": "getTerm", "parameters": "(String id)", "modifiers": "@Override public", "return": "VocabularyTerm", "body": "@Override\n    public VocabularyTerm getTerm(String id)\n    {\n        VocabularyTerm result = this.cache.get(id);\n        String safeID;\n        if (result == null) {\n            try {\n                safeID = URLEncoder.encode(id, Consts.UTF_8.name());\n            } catch (UnsupportedEncodingException e) {\n                safeID = id.replaceAll(\"\\\\s\", \"\");\n                this.logger.warn(\"Could not find the encoding: {}\", Consts.UTF_8.name());\n            }\n            HttpGet method = new HttpGet(this.fetchServiceURL + \"symbol/\" + safeID);\n            method.setHeader(HttpHeaders.ACCEPT, ContentType.APPLICATION_JSON.getMimeType());\n            try (CloseableHttpResponse httpResponse = this.client.execute(method)) {\n                String response = IOUtils.toString(httpResponse.getEntity().getContent(), Consts.UTF_8);\n                JSONObject responseJSON = new JSONObject(response);\n                JSONArray docs = responseJSON.getJSONObject(RESPONSE_KEY).getJSONArray(DATA_KEY);\n                if (docs.length() == 1) {\n                    result = new JSONOntologyTerm(docs.getJSONObject(0), this);\n                    this.cache.set(id, result);\n                } else {\n                    this.cache.set(id, EMPTY_MARKER);\n                }\n            } catch (IOException | JSONException ex) {\n                this.logger.warn(\"Failed to fetch gene definition: {}\", ex.getMessage());\n            }\n        }\n        return (result == EMPTY_MARKER) ? null : result;\n    }", "signature": "VocabularyTerm getTerm(String id)", "full_signature": "@Override public VocabularyTerm getTerm(String id)", "class_method_signature": "RemoteGeneNomenclature.getTerm(String id)", "testcase": false, "constructor": false, "invocations": ["get", "encode", "name", "replaceAll", "warn", "name", "setHeader", "getMimeType", "execute", "toString", "getContent", "getEntity", "getJSONArray", "getJSONObject", "length", "getJSONObject", "set", "set", "warn", "getMessage"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}