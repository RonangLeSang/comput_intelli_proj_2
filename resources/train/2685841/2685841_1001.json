{"test_class": {"identifier": "SpreadsheetExporterTest", "superclass": "", "interfaces": "", "fields": [], "file": "components/export/api/src/test/java/org/phenotips/export/internal/SpreadsheetExporterTest.java"}, "test_case": {"identifier": "commitRowTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void commitRowTest()\n    {\n        SpreadsheetExporter exporter = new SpreadsheetExporter();\n        SpreadsheetExporter spy = spy(exporter);\n        Sheet sheet = mock(Sheet.class);\n        Row row = mock(Row.class);\n        Cell cell = mock(Cell.class);\n        DataSection section = mock(DataSection.class);\n        Styler styler = mock(Styler.class);\n        DataCell dataCell = mock(DataCell.class);\n        DataCell[][] matrix = new DataCell[1][1];\n        matrix[0][0] = dataCell;\n\n        doReturn(matrix).when(section).getMatrix();\n        doReturn(row).when(sheet).createRow(anyInt());\n        doReturn(0).when(section).getMaxX();\n        doReturn(0).when(section).getMaxY();\n        doReturn(cell).when(row).createCell(anyInt());\n        doNothing().when(cell).setCellValue(anyString());\n        doNothing().when(styler).style(any(DataCell.class), any(Cell.class), any(Workbook.class));\n        doReturn(0).when(dataCell).getNumberOfLines();\n\n        spy.commitRows(section, sheet, styler);\n\n        verify(sheet, times(1)).createRow(anyInt());\n        verify(row, times(1)).createCell(anyInt());\n        verify(cell, times(1)).setCellValue(anyString());\n        verify(styler, times(1)).style(any(DataCell.class), any(Cell.class), any(Workbook.class));\n        verify(row, atMost(0)).setHeight(anyShort());\n    }", "signature": "void commitRowTest()", "full_signature": "@Test public void commitRowTest()", "class_method_signature": "SpreadsheetExporterTest.commitRowTest()", "testcase": true, "constructor": false, "invocations": ["spy", "mock", "mock", "mock", "mock", "mock", "mock", "getMatrix", "when", "doReturn", "createRow", "when", "doReturn", "anyInt", "getMaxX", "when", "doReturn", "getMaxY", "when", "doReturn", "createCell", "when", "doReturn", "anyInt", "setCellValue", "when", "doNothing", "anyString", "style", "when", "doNothing", "any", "any", "any", "getNumberOfLines", "when", "doReturn", "commitRows", "createRow", "verify", "times", "anyInt", "createCell", "verify", "times", "anyInt", "setCellValue", "verify", "times", "anyString", "style", "verify", "times", "any", "any", "any", "setHeight", "verify", "atMost", "anyShort"]}, "focal_class": {"identifier": "SpreadsheetExporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Workbook wBook;", "modifier": "protected", "type": "Workbook", "declarator": "wBook", "var_name": "wBook"}, {"original_string": "protected Map<String, Sheet> sheets = new HashMap<String, Sheet>();", "modifier": "protected", "type": "Map<String, Sheet>", "declarator": "sheets = new HashMap<String, Sheet>()", "var_name": "sheets"}], "methods": [{"identifier": "export", "parameters": "(String[] enabledFieldsArray, List<Patient> patients, OutputStream outputStream)", "modifiers": "public", "return": "void", "signature": "void export(String[] enabledFieldsArray, List<Patient> patients, OutputStream outputStream)", "full_signature": "public void export(String[] enabledFieldsArray, List<Patient> patients, OutputStream outputStream)", "class_method_signature": "SpreadsheetExporter.export(String[] enabledFieldsArray, List<Patient> patients, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "createNewWorkbook", "parameters": "()", "modifiers": "protected", "return": "Workbook", "signature": "Workbook createNewWorkbook()", "full_signature": "protected Workbook createNewWorkbook()", "class_method_signature": "SpreadsheetExporter.createNewWorkbook()", "testcase": false, "constructor": false}, {"identifier": "processMainSheet", "parameters": "(Set<String> enabledFields, List<Patient> patients)", "modifiers": "protected", "return": "void", "signature": "void processMainSheet(Set<String> enabledFields, List<Patient> patients)", "full_signature": "protected void processMainSheet(Set<String> enabledFields, List<Patient> patients)", "class_method_signature": "SpreadsheetExporter.processMainSheet(Set<String> enabledFields, List<Patient> patients)", "testcase": false, "constructor": false}, {"identifier": "freezeHeader", "parameters": "(Short height, Sheet sheet)", "modifiers": "protected", "return": "void", "signature": "void freezeHeader(Short height, Sheet sheet)", "full_signature": "protected void freezeHeader(Short height, Sheet sheet)", "class_method_signature": "SpreadsheetExporter.freezeHeader(Short height, Sheet sheet)", "testcase": false, "constructor": false}, {"identifier": "runAssembler", "parameters": "(Set<String> enabledFields, List<Patient> patients)", "modifiers": "protected", "return": "SheetAssembler", "signature": "SheetAssembler runAssembler(Set<String> enabledFields, List<Patient> patients)", "full_signature": "protected SheetAssembler runAssembler(Set<String> enabledFields, List<Patient> patients)", "class_method_signature": "SpreadsheetExporter.runAssembler(Set<String> enabledFields, List<Patient> patients)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(DataSection section, Sheet sheet)", "modifiers": "protected", "return": "void", "signature": "void commit(DataSection section, Sheet sheet)", "full_signature": "protected void commit(DataSection section, Sheet sheet)", "class_method_signature": "SpreadsheetExporter.commit(DataSection section, Sheet sheet)", "testcase": false, "constructor": false}, {"identifier": "commitRows", "parameters": "(DataSection section, Sheet sheet, Styler styler)", "modifiers": "protected", "return": "void", "signature": "void commitRows(DataSection section, Sheet sheet, Styler styler)", "full_signature": "protected void commitRows(DataSection section, Sheet sheet, Styler styler)", "class_method_signature": "SpreadsheetExporter.commitRows(DataSection section, Sheet sheet, Styler styler)", "testcase": false, "constructor": false}], "file": "components/export/api/src/main/java/org/phenotips/export/internal/SpreadsheetExporter.java"}, "focal_method": {"identifier": "commitRows", "parameters": "(DataSection section, Sheet sheet, Styler styler)", "modifiers": "protected", "return": "void", "body": "protected void commitRows(DataSection section, Sheet sheet, Styler styler)\n    {\n        DataCell[][] cells = section.getMatrix();\n        Row row;\n        for (Integer y = 0; y <= section.getMaxY(); y++) {\n            row = sheet.createRow(y);\n            Integer maxLines = 0;\n\n            for (Integer x = 0; x <= section.getMaxX(); x++) {\n                DataCell dataCell = cells[x][y];\n                if (dataCell == null) {\n                    continue;\n                }\n                Cell cell = row.createCell(x);\n                cell.setCellValue(dataCell.getValue());\n                styler.style(dataCell, cell, this.wBook);\n\n                if (dataCell.getNumberOfLines() != null) {\n                    maxLines = maxLines < dataCell.getNumberOfLines() ? dataCell.getNumberOfLines() : maxLines;\n                }\n            }\n            if (maxLines > 1) {\n                Integer height = maxLines * 400;\n                row.setHeight(height.shortValue());\n            }\n        }\n    }", "signature": "void commitRows(DataSection section, Sheet sheet, Styler styler)", "full_signature": "protected void commitRows(DataSection section, Sheet sheet, Styler styler)", "class_method_signature": "SpreadsheetExporter.commitRows(DataSection section, Sheet sheet, Styler styler)", "testcase": false, "constructor": false, "invocations": ["getMatrix", "getMaxY", "createRow", "getMaxX", "createCell", "setCellValue", "getValue", "style", "getNumberOfLines", "getNumberOfLines", "getNumberOfLines", "setHeight", "shortValue"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}