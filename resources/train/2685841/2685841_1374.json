{"test_class": {"identifier": "DatesControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATA_NAME = \"dates\";", "modifier": "private static final", "type": "String", "declarator": "DATA_NAME = \"dates\"", "var_name": "DATA_NAME"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<PatientDataController<PhenoTipsDate>> mocker =\n        new MockitoComponentMockingRule<>(DatesController.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<PatientDataController<PhenoTipsDate>>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DatesController.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private ExecutionContext executionContext;", "modifier": "@Mock\n    private", "type": "ExecutionContext", "declarator": "executionContext", "var_name": "executionContext"}, {"original_string": "@Mock\n    private XWikiContext xWikiContext;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "xWikiContext", "var_name": "xWikiContext"}, {"original_string": "@Mock\n    private XWiki xWiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xWiki", "var_name": "xWiki"}, {"original_string": "@Mock\n    private BaseObject data;", "modifier": "@Mock\n    private", "type": "BaseObject", "declarator": "data", "var_name": "data"}, {"original_string": "@Mock\n    private PatientData<Date> dateData;", "modifier": "@Mock\n    private", "type": "PatientData<Date>", "declarator": "dateData", "var_name": "dateData"}, {"original_string": "@Mock\n    private XWikiDocument doc;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "doc", "var_name": "doc"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "private PatientDataController<PhenoTipsDate> component;", "modifier": "private", "type": "PatientDataController<PhenoTipsDate>", "declarator": "component", "var_name": "component"}], "file": "components/patient-data/impl/src/test/java/org/phenotips/data/internal/controller/DatesControllerTest.java"}, "test_case": {"identifier": "saveNullsAllDataWhenPatientDataIsNullAndPolicyIsReplace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void saveNullsAllDataWhenPatientDataIsNullAndPolicyIsReplace()\n    {\n        when(this.patient.getData(DATA_NAME)).thenReturn(null);\n\n        this.component.save(this.patient, PatientWritePolicy.REPLACE);\n\n        verify(this.doc, times(1)).getXObject(eq(Patient.CLASS_REFERENCE), eq(true), any());\n        verifyNoMoreInteractions(this.doc);\n\n        final String deathAsEnteredField = DatesController.CORRESPONDING_ASENTERED_FIELDNAMES\n            .get(DatesController.PATIENT_DATEOFDEATH_FIELDNAME);\n        final String birthAsEnteredField = DatesController.CORRESPONDING_ASENTERED_FIELDNAMES\n            .get(DatesController.PATIENT_DATEOFBIRTH_FIELDNAME);\n\n        verify(this.data, times(1)).setStringValue(deathAsEnteredField, StringUtils.EMPTY);\n        verify(this.data, times(1)).setStringValue(birthAsEnteredField, StringUtils.EMPTY);\n        verify(this.data, times(1)).setDateValue(DatesController.PATIENT_DATEOFBIRTH_FIELDNAME, null);\n        verify(this.data, times(1)).setDateValue(DatesController.PATIENT_DATEOFDEATH_FIELDNAME, null);\n        verify(this.data, times(1)).setDateValue(DatesController.PATIENT_EXAMDATE_FIELDNAME, null);\n        verifyNoMoreInteractions(this.data);\n    }", "signature": "void saveNullsAllDataWhenPatientDataIsNullAndPolicyIsReplace()", "full_signature": "@Test public void saveNullsAllDataWhenPatientDataIsNullAndPolicyIsReplace()", "class_method_signature": "DatesControllerTest.saveNullsAllDataWhenPatientDataIsNullAndPolicyIsReplace()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getData", "save", "getXObject", "verify", "times", "eq", "eq", "any", "verifyNoMoreInteractions", "get", "get", "setStringValue", "verify", "times", "setStringValue", "verify", "times", "setDateValue", "verify", "times", "setDateValue", "verify", "times", "setDateValue", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "DatesController", "superclass": "", "interfaces": "implements PatientDataController<PhenoTipsDate>", "fields": [{"original_string": "protected static final String PATIENT_DATEOFDEATH_FIELDNAME = \"date_of_death\";", "modifier": "protected static final", "type": "String", "declarator": "PATIENT_DATEOFDEATH_FIELDNAME = \"date_of_death\"", "var_name": "PATIENT_DATEOFDEATH_FIELDNAME"}, {"original_string": "protected static final String PATIENT_DATEOFBIRTH_FIELDNAME = \"date_of_birth\";", "modifier": "protected static final", "type": "String", "declarator": "PATIENT_DATEOFBIRTH_FIELDNAME = \"date_of_birth\"", "var_name": "PATIENT_DATEOFBIRTH_FIELDNAME"}, {"original_string": "protected static final String PATIENT_EXAMDATE_FIELDNAME = \"exam_date\";", "modifier": "protected static final", "type": "String", "declarator": "PATIENT_EXAMDATE_FIELDNAME = \"exam_date\"", "var_name": "PATIENT_EXAMDATE_FIELDNAME"}, {"original_string": "protected static final Map<String, String> CORRESPONDING_ASENTERED_FIELDNAMES =\n        Collections.unmodifiableMap(MapUtils.putAll(new HashMap<String, String>(), new String[][] {\n            { PATIENT_DATEOFDEATH_FIELDNAME, \"date_of_death_entered\" },\n            { PATIENT_DATEOFBIRTH_FIELDNAME, \"date_of_birth_entered\" }\n        }));", "modifier": "protected static final", "type": "Map<String, String>", "declarator": "CORRESPONDING_ASENTERED_FIELDNAMES =\n        Collections.unmodifiableMap(MapUtils.putAll(new HashMap<String, String>(), new String[][] {\n            { PATIENT_DATEOFDEATH_FIELDNAME, \"date_of_death_entered\" },\n            { PATIENT_DATEOFBIRTH_FIELDNAME, \"date_of_birth_entered\" }\n        }))", "var_name": "CORRESPONDING_ASENTERED_FIELDNAMES"}, {"original_string": "protected static final String JSON_DATEOFDEATH_FIELDNAME = PATIENT_DATEOFDEATH_FIELDNAME;", "modifier": "protected static final", "type": "String", "declarator": "JSON_DATEOFDEATH_FIELDNAME = PATIENT_DATEOFDEATH_FIELDNAME", "var_name": "JSON_DATEOFDEATH_FIELDNAME"}, {"original_string": "protected static final String JSON_DATEOFBIRTH_FIELDNAME = PATIENT_DATEOFBIRTH_FIELDNAME;", "modifier": "protected static final", "type": "String", "declarator": "JSON_DATEOFBIRTH_FIELDNAME = PATIENT_DATEOFBIRTH_FIELDNAME", "var_name": "JSON_DATEOFBIRTH_FIELDNAME"}, {"original_string": "protected static final String JSON_EXAMDATE_FIELDNAME = PATIENT_EXAMDATE_FIELDNAME;", "modifier": "protected static final", "type": "String", "declarator": "JSON_EXAMDATE_FIELDNAME = PATIENT_EXAMDATE_FIELDNAME", "var_name": "JSON_EXAMDATE_FIELDNAME"}, {"original_string": "protected static final Map<String, String> PHENOTIPS_TO_JSON_FIELDNAMES =\n        Collections.unmodifiableMap(MapUtils.putAll(new LinkedHashMap<String, String>(), new String[][] {\n            { PATIENT_DATEOFDEATH_FIELDNAME, JSON_DATEOFDEATH_FIELDNAME },\n            { PATIENT_DATEOFBIRTH_FIELDNAME, JSON_DATEOFBIRTH_FIELDNAME },\n            { PATIENT_EXAMDATE_FIELDNAME, JSON_EXAMDATE_FIELDNAME }\n        }));", "modifier": "protected static final", "type": "Map<String, String>", "declarator": "PHENOTIPS_TO_JSON_FIELDNAMES =\n        Collections.unmodifiableMap(MapUtils.putAll(new LinkedHashMap<String, String>(), new String[][] {\n            { PATIENT_DATEOFDEATH_FIELDNAME, JSON_DATEOFDEATH_FIELDNAME },\n            { PATIENT_DATEOFBIRTH_FIELDNAME, JSON_DATEOFBIRTH_FIELDNAME },\n            { PATIENT_EXAMDATE_FIELDNAME, JSON_EXAMDATE_FIELDNAME }\n        }))", "var_name": "PHENOTIPS_TO_JSON_FIELDNAMES"}, {"original_string": "protected static final Map<String, String> CONTROLLING_FIELDNAMES =\n        Collections.unmodifiableMap(MapUtils.putAll(new HashMap<String, String>(), new String[][] {\n            { PATIENT_DATEOFDEATH_FIELDNAME, PATIENT_DATEOFDEATH_FIELDNAME },\n            { PATIENT_DATEOFBIRTH_FIELDNAME, PATIENT_DATEOFBIRTH_FIELDNAME },\n            { PATIENT_EXAMDATE_FIELDNAME, PATIENT_EXAMDATE_FIELDNAME }\n        }));", "modifier": "protected static final", "type": "Map<String, String>", "declarator": "CONTROLLING_FIELDNAMES =\n        Collections.unmodifiableMap(MapUtils.putAll(new HashMap<String, String>(), new String[][] {\n            { PATIENT_DATEOFDEATH_FIELDNAME, PATIENT_DATEOFDEATH_FIELDNAME },\n            { PATIENT_DATEOFBIRTH_FIELDNAME, PATIENT_DATEOFBIRTH_FIELDNAME },\n            { PATIENT_EXAMDATE_FIELDNAME, PATIENT_EXAMDATE_FIELDNAME }\n        }))", "var_name": "CONTROLLING_FIELDNAMES"}, {"original_string": "protected static final String DATA_NAME = \"dates\";", "modifier": "protected static final", "type": "String", "declarator": "DATA_NAME = \"dates\"", "var_name": "DATA_NAME"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private Provider<XWikiContext> xcontext;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "xcontext", "var_name": "xcontext"}], "methods": [{"identifier": "load", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "PatientData<PhenoTipsDate>", "signature": "PatientData<PhenoTipsDate> load(Patient patient)", "full_signature": "@Override public PatientData<PhenoTipsDate> load(Patient patient)", "class_method_signature": "DatesController.load(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "signature": "void save(Patient patient)", "full_signature": "@Override public void save(Patient patient)", "class_method_signature": "DatesController.save(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "full_signature": "@Override public void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "class_method_signature": "DatesController.save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "saveDatesData", "parameters": "(\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<PhenoTipsDate> dates,\n        @Nonnull final PatientWritePolicy policy)", "modifiers": "private", "return": "void", "signature": "void saveDatesData(\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<PhenoTipsDate> dates,\n        @Nonnull final PatientWritePolicy policy)", "full_signature": "private void saveDatesData(\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<PhenoTipsDate> dates,\n        @Nonnull final PatientWritePolicy policy)", "class_method_signature": "DatesController.saveDatesData(\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<PhenoTipsDate> dates,\n        @Nonnull final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "saveDateData", "parameters": "(\n        @Nonnull final BaseObject data,\n        @Nullable final PhenoTipsDate date,\n        @Nonnull final String property)", "modifiers": "private", "return": "void", "signature": "void saveDateData(\n        @Nonnull final BaseObject data,\n        @Nullable final PhenoTipsDate date,\n        @Nonnull final String property)", "full_signature": "private void saveDateData(\n        @Nonnull final BaseObject data,\n        @Nullable final PhenoTipsDate date,\n        @Nonnull final String property)", "class_method_signature": "DatesController.saveDateData(\n        @Nonnull final BaseObject data,\n        @Nullable final PhenoTipsDate date,\n        @Nonnull final String property)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json)", "class_method_signature": "DatesController.writeJSON(Patient patient, JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "class_method_signature": "DatesController.writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "testcase": false, "constructor": false}, {"identifier": "readJSON", "parameters": "(JSONObject json)", "modifiers": "@Override public", "return": "PatientData<PhenoTipsDate>", "signature": "PatientData<PhenoTipsDate> readJSON(JSONObject json)", "full_signature": "@Override public PatientData<PhenoTipsDate> readJSON(JSONObject json)", "class_method_signature": "DatesController.readJSON(JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "DatesController.getName()", "testcase": false, "constructor": false}, {"identifier": "getPatientDocumentProperties", "parameters": "()", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> getPatientDocumentProperties()", "full_signature": "protected Set<String> getPatientDocumentProperties()", "class_method_signature": "DatesController.getPatientDocumentProperties()", "testcase": false, "constructor": false}, {"identifier": "getJSONFieldName", "parameters": "(String phenotipsFieldName)", "modifiers": "protected", "return": "String", "signature": "String getJSONFieldName(String phenotipsFieldName)", "full_signature": "protected String getJSONFieldName(String phenotipsFieldName)", "class_method_signature": "DatesController.getJSONFieldName(String phenotipsFieldName)", "testcase": false, "constructor": false}, {"identifier": "getControllingFieldName", "parameters": "(String phenotipsFieldName)", "modifiers": "protected", "return": "String", "signature": "String getControllingFieldName(String phenotipsFieldName)", "full_signature": "protected String getControllingFieldName(String phenotipsFieldName)", "class_method_signature": "DatesController.getControllingFieldName(String phenotipsFieldName)", "testcase": false, "constructor": false}, {"identifier": "getPhenotipsFieldName", "parameters": "(String jsonFieldName)", "modifiers": "protected", "return": "String", "signature": "String getPhenotipsFieldName(String jsonFieldName)", "full_signature": "protected String getPhenotipsFieldName(String jsonFieldName)", "class_method_signature": "DatesController.getPhenotipsFieldName(String jsonFieldName)", "testcase": false, "constructor": false}], "file": "components/patient-data/impl/src/main/java/org/phenotips/data/internal/controller/DatesController.java"}, "focal_method": {"identifier": "save", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void save(Patient patient)\n    {\n        save(patient, PatientWritePolicy.UPDATE);\n    }", "signature": "void save(Patient patient)", "full_signature": "@Override public void save(Patient patient)", "class_method_signature": "DatesController.save(Patient patient)", "testcase": false, "constructor": false, "invocations": ["save"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}