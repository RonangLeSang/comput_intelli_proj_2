{"test_class": {"identifier": "OwnerAccessAuthorizationModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<AuthorizationModule> mocker =\n        new MockitoComponentMockingRule<>(OwnerAccessAuthorizationModule.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<AuthorizationModule>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(OwnerAccessAuthorizationModule.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    private User admin;", "modifier": "@Mock\n    private", "type": "User", "declarator": "admin", "var_name": "admin"}, {"original_string": "@Mock\n    private Family family;", "modifier": "@Mock\n    private", "type": "Family", "declarator": "family", "var_name": "family"}, {"original_string": "private FamilyRepository repo;", "modifier": "private", "type": "FamilyRepository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private DocumentAccessBridge dab;", "modifier": "private", "type": "DocumentAccessBridge", "declarator": "dab", "var_name": "dab"}, {"original_string": "private DocumentReference doc = new DocumentReference(\"xwiki\", \"Families\", \"FAM01\");", "modifier": "private", "type": "DocumentReference", "declarator": "doc = new DocumentReference(\"xwiki\", \"Families\", \"FAM01\")", "var_name": "doc"}, {"original_string": "private DocumentReference xclass = new DocumentReference(\"xwiki\", \"PhenoTips\", \"OwnerClass\");", "modifier": "private", "type": "DocumentReference", "declarator": "xclass = new DocumentReference(\"xwiki\", \"PhenoTips\", \"OwnerClass\")", "var_name": "xclass"}, {"original_string": "private DocumentReference userProfile = new DocumentReference(\"xwiki\", \"Users\", \"padams\");", "modifier": "private", "type": "DocumentReference", "declarator": "userProfile = new DocumentReference(\"xwiki\", \"Users\", \"padams\")", "var_name": "userProfile"}, {"original_string": "private DocumentReference adminProfile = new DocumentReference(\"xwiki\", \"Users\", \"Admin\");", "modifier": "private", "type": "DocumentReference", "declarator": "adminProfile = new DocumentReference(\"xwiki\", \"Users\", \"Admin\")", "var_name": "adminProfile"}], "file": "components/family-studies/api/src/test/java/org/phenotips/studies/family/internal/OwnerAccessAuthorizationModuleTest.java"}, "test_case": {"identifier": "viewAccessGrantedForGuestOwner", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void viewAccessGrantedForGuestOwner() throws ComponentLookupException\n    {\n        when(this.dab.getProperty(this.doc, this.xclass, Owner.PROPERTY_NAME)).thenReturn(\"\");\n        Assert.assertTrue(this.mocker.getComponentUnderTest().hasAccess(null, Right.VIEW, this.doc));\n        Assert.assertTrue(\n            this.mocker.getComponentUnderTest().hasAccess(new InvalidUser(null, null), Right.VIEW, this.doc));\n    }", "signature": "void viewAccessGrantedForGuestOwner()", "full_signature": "@Test public void viewAccessGrantedForGuestOwner()", "class_method_signature": "OwnerAccessAuthorizationModuleTest.viewAccessGrantedForGuestOwner()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProperty", "assertTrue", "hasAccess", "getComponentUnderTest", "assertTrue", "hasAccess", "getComponentUnderTest"]}, "focal_class": {"identifier": "OwnerAccessAuthorizationModule", "superclass": "", "interfaces": "implements AuthorizationModule", "fields": [{"original_string": "@Inject\n    private FamilyRepository familyRepository;", "modifier": "@Inject\n    private", "type": "FamilyRepository", "declarator": "familyRepository", "var_name": "familyRepository"}, {"original_string": "@Inject\n    private DocumentAccessBridge dab;", "modifier": "@Inject\n    private", "type": "DocumentAccessBridge", "declarator": "dab", "var_name": "dab"}, {"original_string": "@Inject\n    @Named(\"current\")\n    private DocumentReferenceResolver<EntityReference> resolver;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "DocumentReferenceResolver<EntityReference>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Inject\n    @Named(\"current\")\n    private DocumentReferenceResolver<String> strResolver;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "strResolver", "var_name": "strResolver"}, {"original_string": "@Inject\n    private AuthorizationService auth;", "modifier": "@Inject\n    private", "type": "AuthorizationService", "declarator": "auth", "var_name": "auth"}], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "OwnerAccessAuthorizationModule.getPriority()", "testcase": false, "constructor": false}, {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "OwnerAccessAuthorizationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false}, {"identifier": "isGuestOwner", "parameters": "(String owner, User user)", "modifiers": "private", "return": "boolean", "signature": "boolean isGuestOwner(String owner, User user)", "full_signature": "private boolean isGuestOwner(String owner, User user)", "class_method_signature": "OwnerAccessAuthorizationModule.isGuestOwner(String owner, User user)", "testcase": false, "constructor": false}], "file": "components/family-studies/api/src/main/java/org/phenotips/studies/family/internal/OwnerAccessAuthorizationModule.java"}, "focal_method": {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n    public Boolean hasAccess(User user, Right access, EntityReference entity)\n    {\n        if (!ObjectUtils.allNotNull(access, entity) || access.getTargetedEntityType() == null\n            || !access.getTargetedEntityType().contains(EntityType.DOCUMENT)) {\n            return null;\n        }\n\n        Family family = this.familyRepository.get(entity.toString());\n        if (family == null) {\n            return null;\n        }\n\n        String ownerStr = (String) this.dab.getProperty(family.getDocumentReference(),\n            this.resolver.resolve(Owner.CLASS_REFERENCE), Owner.PROPERTY_NAME);\n        DocumentReference owner = this.strResolver.resolve(ownerStr);\n\n        if (isGuestOwner(ownerStr, user) || user != null && owner.equals(user.getProfileDocument())) {\n            return true;\n        }\n        // Grant access to administrators\n        if (this.auth.hasAccess(user, Right.ADMIN, entity)) {\n            return true;\n        }\n\n        return null;\n    }", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "OwnerAccessAuthorizationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false, "invocations": ["allNotNull", "getTargetedEntityType", "contains", "getTargetedEntityType", "get", "toString", "getProperty", "getDocumentReference", "resolve", "resolve", "isGuestOwner", "equals", "getProfileDocument", "hasAccess"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}