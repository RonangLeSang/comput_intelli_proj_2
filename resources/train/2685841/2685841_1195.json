{"test_class": {"identifier": "DefaultPatientResourceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String UPDATE = \"update\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE = \"update\"", "var_name": "UPDATE"}, {"original_string": "private static final String PATIENT_ID = \"00000001\";", "modifier": "private static final", "type": "String", "declarator": "PATIENT_ID = \"00000001\"", "var_name": "PATIENT_ID"}, {"original_string": "private static final String URI_STRING = \"http://self/uri\";", "modifier": "private static final", "type": "String", "declarator": "URI_STRING = \"http://self/uri\"", "var_name": "URI_STRING"}, {"original_string": "private static final String EMPTY_JSON = \"{}\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_JSON = \"{}\"", "var_name": "EMPTY_JSON"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<PatientResource> mocker =\n        new MockitoComponentMockingRule<>(DefaultPatientResourceImpl.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<PatientResource>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DefaultPatientResourceImpl.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private User currentUser;", "modifier": "@Mock\n    private", "type": "User", "declarator": "currentUser", "var_name": "currentUser"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private UriInfo uriInfo;", "modifier": "@Mock\n    private", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}, {"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private PatientRepository repository;", "modifier": "private", "type": "PatientRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private AuthorizationService access;", "modifier": "private", "type": "AuthorizationService", "declarator": "access", "var_name": "access"}, {"original_string": "private DocumentReference patientDocument;", "modifier": "private", "type": "DocumentReference", "declarator": "patientDocument", "var_name": "patientDocument"}, {"original_string": "private DefaultPatientResourceImpl patientResource;", "modifier": "private", "type": "DefaultPatientResourceImpl", "declarator": "patientResource", "var_name": "patientResource"}], "file": "components/patient-data/rest/src/test/java/org/phenotips/data/rest/internal/DefaultPatientResourceImplTest.java"}, "test_case": {"identifier": "patchPatientWithBlankIdThrowsWebApplicationException", "parameters": "()", "modifiers": "@Test(expected = WebApplicationException.class) public", "return": "void", "body": "@Test(expected = WebApplicationException.class)\n    public void patchPatientWithBlankIdThrowsWebApplicationException()\n    {\n        try {\n            this.patientResource.patchPatient(EMPTY_JSON, StringUtils.SPACE);\n        } catch (final WebApplicationException ex) {\n            Assert.assertEquals(Status.NOT_FOUND.getStatusCode(), ex.getResponse().getStatus());\n            throw ex;\n        }\n    }", "signature": "void patchPatientWithBlankIdThrowsWebApplicationException()", "full_signature": "@Test(expected = WebApplicationException.class) public void patchPatientWithBlankIdThrowsWebApplicationException()", "class_method_signature": "DefaultPatientResourceImplTest.patchPatientWithBlankIdThrowsWebApplicationException()", "testcase": true, "constructor": false, "invocations": ["patchPatient", "assertEquals", "getStatusCode", "getStatus", "getResponse"]}, "focal_class": {"identifier": "DefaultPatientResourceImpl", "superclass": "extends XWikiResource", "interfaces": "implements PatientResource", "fields": [{"original_string": "@Inject\n    private PatientRepository repository;", "modifier": "@Inject\n    private", "type": "PatientRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Inject\n    private AuthorizationService access;", "modifier": "@Inject\n    private", "type": "AuthorizationService", "declarator": "access", "var_name": "access"}, {"original_string": "@Inject\n    private UserManager users;", "modifier": "@Inject\n    private", "type": "UserManager", "declarator": "users", "var_name": "users"}, {"original_string": "@Inject\n    private Provider<Autolinker> autolinker;", "modifier": "@Inject\n    private", "type": "Provider<Autolinker>", "declarator": "autolinker", "var_name": "autolinker"}], "methods": [{"identifier": "getPatient", "parameters": "(String id)", "modifiers": "@Override public", "return": "Response", "signature": "Response getPatient(String id)", "full_signature": "@Override public Response getPatient(String id)", "class_method_signature": "DefaultPatientResourceImpl.getPatient(String id)", "testcase": false, "constructor": false}, {"identifier": "updatePatient", "parameters": "(String json, String id, String policy)", "modifiers": "@Override public", "return": "Response", "signature": "Response updatePatient(String json, String id, String policy)", "full_signature": "@Override public Response updatePatient(String json, String id, String policy)", "class_method_signature": "DefaultPatientResourceImpl.updatePatient(String json, String id, String policy)", "testcase": false, "constructor": false}, {"identifier": "patchPatient", "parameters": "(final String json, final String id)", "modifiers": "@Override public", "return": "Response", "signature": "Response patchPatient(final String json, final String id)", "full_signature": "@Override public Response patchPatient(final String json, final String id)", "class_method_signature": "DefaultPatientResourceImpl.patchPatient(final String json, final String id)", "testcase": false, "constructor": false}, {"identifier": "updatePatient", "parameters": "(final String json, final String id, final PatientWritePolicy policy)", "modifiers": "private", "return": "Response", "signature": "Response updatePatient(final String json, final String id, final PatientWritePolicy policy)", "full_signature": "private Response updatePatient(final String json, final String id, final PatientWritePolicy policy)", "class_method_signature": "DefaultPatientResourceImpl.updatePatient(final String json, final String id, final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "deletePatient", "parameters": "(String id)", "modifiers": "@Override public", "return": "Response", "signature": "Response deletePatient(String id)", "full_signature": "@Override public Response deletePatient(String id)", "class_method_signature": "DefaultPatientResourceImpl.deletePatient(String id)", "testcase": false, "constructor": false}], "file": "components/patient-data/rest/src/main/java/org/phenotips/data/rest/internal/DefaultPatientResourceImpl.java"}, "focal_method": {"identifier": "patchPatient", "parameters": "(final String json, final String id)", "modifiers": "@Override public", "return": "Response", "body": "@Override\n    public Response patchPatient(final String json, final String id)\n    {\n        return updatePatient(json, id, PatientWritePolicy.MERGE);\n    }", "signature": "Response patchPatient(final String json, final String id)", "full_signature": "@Override public Response patchPatient(final String json, final String id)", "class_method_signature": "DefaultPatientResourceImpl.patchPatient(final String json, final String id)", "testcase": false, "constructor": false, "invocations": ["updatePatient"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}