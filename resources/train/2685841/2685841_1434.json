{"test_class": {"identifier": "SexControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATA_NAME = \"sex\";", "modifier": "private static final", "type": "String", "declarator": "DATA_NAME = \"sex\"", "var_name": "DATA_NAME"}, {"original_string": "private static final String INTERNAL_PROPERTY_NAME = \"gender\";", "modifier": "private static final", "type": "String", "declarator": "INTERNAL_PROPERTY_NAME = \"gender\"", "var_name": "INTERNAL_PROPERTY_NAME"}, {"original_string": "private static final String SEX_MALE = \"M\";", "modifier": "private static final", "type": "String", "declarator": "SEX_MALE = \"M\"", "var_name": "SEX_MALE"}, {"original_string": "private static final String SEX_FEMALE = \"F\";", "modifier": "private static final", "type": "String", "declarator": "SEX_FEMALE = \"F\"", "var_name": "SEX_FEMALE"}, {"original_string": "private static final String SEX_OTHER = \"O\";", "modifier": "private static final", "type": "String", "declarator": "SEX_OTHER = \"O\"", "var_name": "SEX_OTHER"}, {"original_string": "private static final String SEX_UNKNOWN = \"U\";", "modifier": "private static final", "type": "String", "declarator": "SEX_UNKNOWN = \"U\"", "var_name": "SEX_UNKNOWN"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<PatientDataController<String>> mocker =\n        new MockitoComponentMockingRule<>(SexController.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<PatientDataController<String>>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(SexController.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private ExecutionContext executionContext;", "modifier": "@Mock\n    private", "type": "ExecutionContext", "declarator": "executionContext", "var_name": "executionContext"}, {"original_string": "@Mock\n    private XWikiContext xcontext;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "xcontext", "var_name": "xcontext"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private XWikiDocument doc;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "doc", "var_name": "doc"}, {"original_string": "@Mock\n    private BaseObject data;", "modifier": "@Mock\n    private", "type": "BaseObject", "declarator": "data", "var_name": "data"}, {"original_string": "private PatientDataController<String> component;", "modifier": "private", "type": "PatientDataController<String>", "declarator": "component", "var_name": "component"}], "file": "components/patient-data/impl/src/test/java/org/phenotips/data/internal/controller/SexControllerTest.java"}, "test_case": {"identifier": "loadCatchesInvalidDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadCatchesInvalidDocument()\n    {\n        doReturn(null).when(this.patient).getXDocument();\n\n        PatientData<String> result = this.component.load(this.patient);\n\n        verify(this.mocker.getMockedLogger()).error(eq(PatientDataController.ERROR_MESSAGE_LOAD_FAILED), anyString());\n        Assert.assertNull(result);\n    }", "signature": "void loadCatchesInvalidDocument()", "full_signature": "@Test public void loadCatchesInvalidDocument()", "class_method_signature": "SexControllerTest.loadCatchesInvalidDocument()", "testcase": true, "constructor": false, "invocations": ["getXDocument", "when", "doReturn", "load", "error", "verify", "getMockedLogger", "eq", "anyString", "assertNull"]}, "focal_class": {"identifier": "SexController", "superclass": "", "interfaces": "implements PatientDataController<String>", "fields": [{"original_string": "private static final String DATA_NAME = \"sex\";", "modifier": "private static final", "type": "String", "declarator": "DATA_NAME = \"sex\"", "var_name": "DATA_NAME"}, {"original_string": "private static final String INTERNAL_PROPERTY_NAME = \"gender\";", "modifier": "private static final", "type": "String", "declarator": "INTERNAL_PROPERTY_NAME = \"gender\"", "var_name": "INTERNAL_PROPERTY_NAME"}, {"original_string": "private static final String SEX_MALE = \"M\";", "modifier": "private static final", "type": "String", "declarator": "SEX_MALE = \"M\"", "var_name": "SEX_MALE"}, {"original_string": "private static final String SEX_FEMALE = \"F\";", "modifier": "private static final", "type": "String", "declarator": "SEX_FEMALE = \"F\"", "var_name": "SEX_FEMALE"}, {"original_string": "private static final String SEX_OTHER = \"O\";", "modifier": "private static final", "type": "String", "declarator": "SEX_OTHER = \"O\"", "var_name": "SEX_OTHER"}, {"original_string": "private static final String SEX_UNKNOWN = \"U\";", "modifier": "private static final", "type": "String", "declarator": "SEX_UNKNOWN = \"U\"", "var_name": "SEX_UNKNOWN"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private Provider<XWikiContext> xcontext;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "xcontext", "var_name": "xcontext"}], "methods": [{"identifier": "parseGender", "parameters": "(String gender)", "modifiers": "private", "return": "String", "signature": "String parseGender(String gender)", "full_signature": "private String parseGender(String gender)", "class_method_signature": "SexController.parseGender(String gender)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "PatientData<String>", "signature": "PatientData<String> load(Patient patient)", "full_signature": "@Override public PatientData<String> load(Patient patient)", "class_method_signature": "SexController.load(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "signature": "void save(Patient patient)", "full_signature": "@Override public void save(Patient patient)", "class_method_signature": "SexController.save(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "full_signature": "@Override public void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "class_method_signature": "SexController.save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json)", "class_method_signature": "SexController.writeJSON(Patient patient, JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "class_method_signature": "SexController.writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "testcase": false, "constructor": false}, {"identifier": "readJSON", "parameters": "(JSONObject json)", "modifiers": "@Override public", "return": "PatientData<String>", "signature": "PatientData<String> readJSON(JSONObject json)", "full_signature": "@Override public PatientData<String> readJSON(JSONObject json)", "class_method_signature": "SexController.readJSON(JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SexController.getName()", "testcase": false, "constructor": false}], "file": "components/patient-data/impl/src/main/java/org/phenotips/data/internal/controller/SexController.java"}, "focal_method": {"identifier": "load", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "PatientData<String>", "body": "@Override\n    public PatientData<String> load(Patient patient)\n    {\n        try {\n            XWikiDocument doc = patient.getXDocument();\n            BaseObject data = doc.getXObject(Patient.CLASS_REFERENCE);\n            if (data == null) {\n                return null;\n            }\n            String gender = parseGender(data.getStringValue(INTERNAL_PROPERTY_NAME));\n            return new SimpleValuePatientData<>(DATA_NAME, gender);\n        } catch (Exception e) {\n            this.logger.error(ERROR_MESSAGE_LOAD_FAILED, e.getMessage());\n        }\n        return null;\n    }", "signature": "PatientData<String> load(Patient patient)", "full_signature": "@Override public PatientData<String> load(Patient patient)", "class_method_signature": "SexController.load(Patient patient)", "testcase": false, "constructor": false, "invocations": ["getXDocument", "getXObject", "parseGender", "getStringValue", "error", "getMessage"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}