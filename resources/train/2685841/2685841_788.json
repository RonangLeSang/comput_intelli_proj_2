{"test_class": {"identifier": "PanelDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String P_TERM_1 = \"HP:001\";", "modifier": "private static final", "type": "String", "declarator": "P_TERM_1 = \"HP:001\"", "var_name": "P_TERM_1"}, {"original_string": "private static final String P_TERM_2 = \"HP:002\";", "modifier": "private static final", "type": "String", "declarator": "P_TERM_2 = \"HP:002\"", "var_name": "P_TERM_2"}, {"original_string": "private static final String P_TERM_3 = \"HP:003\";", "modifier": "private static final", "type": "String", "declarator": "P_TERM_3 = \"HP:003\"", "var_name": "P_TERM_3"}, {"original_string": "private static final String P_TERM_4 = \"HP:004\";", "modifier": "private static final", "type": "String", "declarator": "P_TERM_4 = \"HP:004\"", "var_name": "P_TERM_4"}, {"original_string": "private static final String A_TERM_5 = \"HP:005\";", "modifier": "private static final", "type": "String", "declarator": "A_TERM_5 = \"HP:005\"", "var_name": "A_TERM_5"}, {"original_string": "private static final String A_TERM_6 = \"HP:006\";", "modifier": "private static final", "type": "String", "declarator": "A_TERM_6 = \"HP:006\"", "var_name": "A_TERM_6"}, {"original_string": "private static final String G_TERM_1 = \"AAA\";", "modifier": "private static final", "type": "String", "declarator": "G_TERM_1 = \"AAA\"", "var_name": "G_TERM_1"}, {"original_string": "private static final String G_TERM_2 = \"BBB\";", "modifier": "private static final", "type": "String", "declarator": "G_TERM_2 = \"BBB\"", "var_name": "G_TERM_2"}, {"original_string": "private static final String G_TERM_3 = \"CCC\";", "modifier": "private static final", "type": "String", "declarator": "G_TERM_3 = \"CCC\"", "var_name": "G_TERM_3"}, {"original_string": "private PanelData panelData;", "modifier": "private", "type": "PanelData", "declarator": "panelData", "var_name": "panelData"}, {"original_string": "private Set<String> presentTerms;", "modifier": "private", "type": "Set<String>", "declarator": "presentTerms", "var_name": "presentTerms"}, {"original_string": "private Set<String> absentTerms;", "modifier": "private", "type": "Set<String>", "declarator": "absentTerms", "var_name": "absentTerms"}, {"original_string": "private Set<String> rejectedGenes;", "modifier": "private", "type": "Set<String>", "declarator": "rejectedGenes", "var_name": "rejectedGenes"}], "file": "components/gene-panels/rest/src/test/java/org/phenotips/panels/rest/internal/PanelDataTest.java"}, "test_case": {"identifier": "getPresentTermsReturnsAllEnteredPresentTerms", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPresentTermsReturnsAllEnteredPresentTerms()\n    {\n        Assert.assertEquals(this.presentTerms, this.panelData.getPresentTerms());\n    }", "signature": "void getPresentTermsReturnsAllEnteredPresentTerms()", "full_signature": "@Test public void getPresentTermsReturnsAllEnteredPresentTerms()", "class_method_signature": "PanelDataTest.getPresentTermsReturnsAllEnteredPresentTerms()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPresentTerms"]}, "focal_class": {"identifier": "PanelData", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<String> presentTerms;", "modifier": "private final", "type": "Set<String>", "declarator": "presentTerms", "var_name": "presentTerms"}, {"original_string": "private final Set<String> absentTerms;", "modifier": "private final", "type": "Set<String>", "declarator": "absentTerms", "var_name": "absentTerms"}, {"original_string": "private final Set<String> rejectedGenes;", "modifier": "private final", "type": "Set<String>", "declarator": "rejectedGenes", "var_name": "rejectedGenes"}, {"original_string": "private final boolean withMatchCount;", "modifier": "private final", "type": "boolean", "declarator": "withMatchCount", "var_name": "withMatchCount"}], "methods": [{"identifier": "PanelData", "parameters": "(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes)", "modifiers": "", "return": "", "signature": " PanelData(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes)", "full_signature": "  PanelData(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes)", "class_method_signature": "PanelData.PanelData(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes)", "testcase": false, "constructor": true}, {"identifier": "PanelData", "parameters": "(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes,\n        final boolean withMatchCount)", "modifiers": "", "return": "", "signature": " PanelData(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes,\n        final boolean withMatchCount)", "full_signature": "  PanelData(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes,\n        final boolean withMatchCount)", "class_method_signature": "PanelData.PanelData(\n        @Nonnull final Set<String> presentTerms,\n        @Nonnull final Set<String> absentTerms,\n        @Nonnull final Set<String> rejectedGenes,\n        final boolean withMatchCount)", "testcase": false, "constructor": true}, {"identifier": "getPresentTerms", "parameters": "()", "modifiers": "", "return": "Set<String>", "signature": "Set<String> getPresentTerms()", "full_signature": " Set<String> getPresentTerms()", "class_method_signature": "PanelData.getPresentTerms()", "testcase": false, "constructor": false}, {"identifier": "getAbsentTerms", "parameters": "()", "modifiers": "", "return": "Set<String>", "signature": "Set<String> getAbsentTerms()", "full_signature": " Set<String> getAbsentTerms()", "class_method_signature": "PanelData.getAbsentTerms()", "testcase": false, "constructor": false}, {"identifier": "getRejectedGenes", "parameters": "()", "modifiers": "", "return": "Set<String>", "signature": "Set<String> getRejectedGenes()", "full_signature": " Set<String> getRejectedGenes()", "class_method_signature": "PanelData.getRejectedGenes()", "testcase": false, "constructor": false}, {"identifier": "isWithMatchCount", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isWithMatchCount()", "full_signature": " boolean isWithMatchCount()", "class_method_signature": "PanelData.isWithMatchCount()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "PanelData.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PanelData.hashCode()", "testcase": false, "constructor": false}], "file": "components/gene-panels/rest/src/main/java/org/phenotips/panels/rest/internal/PanelData.java"}, "focal_method": {"identifier": "getPresentTerms", "parameters": "()", "modifiers": "", "return": "Set<String>", "body": "Set<String> getPresentTerms()\n    {\n        return this.presentTerms;\n    }", "signature": "Set<String> getPresentTerms()", "full_signature": " Set<String> getPresentTerms()", "class_method_signature": "PanelData.getPresentTerms()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}