{"test_class": {"identifier": "GlobalFamilyConfigurationModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TITLE_LABEL = \"title\";", "modifier": "private static final", "type": "String", "declarator": "TITLE_LABEL = \"title\"", "var_name": "TITLE_LABEL"}, {"original_string": "private static final String SORT_PARAMETER_NAME = \"order\";", "modifier": "private static final", "type": "String", "declarator": "SORT_PARAMETER_NAME = \"order\"", "var_name": "SORT_PARAMETER_NAME"}, {"original_string": "private static final String SECTION_A_LABEL = \"sectionA\";", "modifier": "private static final", "type": "String", "declarator": "SECTION_A_LABEL = \"sectionA\"", "var_name": "SECTION_A_LABEL"}, {"original_string": "private static final String SECTION_B_LABEL = \"sectionB\";", "modifier": "private static final", "type": "String", "declarator": "SECTION_B_LABEL = \"sectionB\"", "var_name": "SECTION_B_LABEL"}, {"original_string": "private static final String SECTION_C_LABEL = \"sectionC\";", "modifier": "private static final", "type": "String", "declarator": "SECTION_C_LABEL = \"sectionC\"", "var_name": "SECTION_C_LABEL"}, {"original_string": "@Rule\n    public final MockitoComponentMockingRule<RecordConfigurationModule> mocker =\n        new MockitoComponentMockingRule<>(GlobalFamilyConfigurationModule.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<RecordConfigurationModule>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(GlobalFamilyConfigurationModule.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private RecordConfiguration config;", "modifier": "@Mock\n    private", "type": "RecordConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private CapturingMatcher<List<RecordSection>> sectionsCapture = new CapturingMatcher<>();", "modifier": "private", "type": "CapturingMatcher<List<RecordSection>>", "declarator": "sectionsCapture = new CapturingMatcher<>()", "var_name": "sectionsCapture"}], "file": "components/family-studies/api/src/test/java/org/phenotips/studies/family/internal/GlobalFamilyConfigurationModuleTest.java"}, "test_case": {"identifier": "processAddsAllSectionsToConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processAddsAllSectionsToConfig() throws ComponentLookupException\n    {\n        final UIExtensionManager uixManager = this.mocker.getInstance(UIExtensionManager.class);\n        final UIExtensionFilter orderFilter = this.mocker.getInstance(UIExtensionFilter.class, \"sortByParameter\");\n\n        final UIExtension extensionA = mock(UIExtension.class);\n        final UIExtension extensionB = mock(UIExtension.class);\n        final UIExtension extensionC = mock(UIExtension.class);\n\n        final List<UIExtension> extensions = Arrays.asList(extensionA, extensionB, extensionC);\n\n        when(uixManager.get(\"phenotips.familyRecord.content\")).thenReturn(extensions);\n        when(orderFilter.filter(extensions, SORT_PARAMETER_NAME)).thenReturn(extensions);\n\n        final Map<String, String> paramA = new HashMap<>();\n        paramA.put(TITLE_LABEL, SECTION_A_LABEL);\n        when(extensionA.getParameters()).thenReturn(paramA);\n\n        final Map<String, String> paramB = new HashMap<>();\n        paramB.put(TITLE_LABEL, SECTION_B_LABEL);\n        when(extensionB.getParameters()).thenReturn(paramB);\n\n        final Map<String, String> paramC = new HashMap<>();\n        paramC.put(TITLE_LABEL, SECTION_C_LABEL);\n        when(extensionC.getParameters()).thenReturn(paramC);\n\n        Assert.assertSame(this.config, this.mocker.getComponentUnderTest().process(this.config));\n        final List<String> sectionNames = Arrays.asList(SECTION_A_LABEL, SECTION_B_LABEL, SECTION_C_LABEL);\n        final List<RecordSection> sections = this.sectionsCapture.getLastValue();\n        Assert.assertEquals(3, sections.size());\n        Assert.assertTrue(sectionNames.contains(sections.get(0).getName()));\n        Assert.assertTrue(sectionNames.contains(sections.get(1).getName()));\n        Assert.assertTrue(sectionNames.contains(sections.get(2).getName()));\n    }", "signature": "void processAddsAllSectionsToConfig()", "full_signature": "@Test public void processAddsAllSectionsToConfig()", "class_method_signature": "GlobalFamilyConfigurationModuleTest.processAddsAllSectionsToConfig()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getInstance", "mock", "mock", "mock", "asList", "thenReturn", "when", "get", "thenReturn", "when", "filter", "put", "thenReturn", "when", "getParameters", "put", "thenReturn", "when", "getParameters", "put", "thenReturn", "when", "getParameters", "assertSame", "process", "getComponentUnderTest", "asList", "getLastValue", "assertEquals", "size", "assertTrue", "contains", "getName", "get", "assertTrue", "contains", "getName", "get", "assertTrue", "contains", "getName", "get"]}, "focal_class": {"identifier": "GlobalFamilyConfigurationModule", "superclass": "", "interfaces": "implements RecordConfigurationModule", "fields": [{"original_string": "@Inject\n    private UIExtensionManager uixManager;", "modifier": "@Inject\n    private", "type": "UIExtensionManager", "declarator": "uixManager", "var_name": "uixManager"}, {"original_string": "@Inject\n    @Named(\"sortByParameter\")\n    private UIExtensionFilter orderFilter;", "modifier": "@Inject\n    @Named(\"sortByParameter\")\n    private", "type": "UIExtensionFilter", "declarator": "orderFilter", "var_name": "orderFilter"}], "methods": [{"identifier": "process", "parameters": "(@Nullable final RecordConfiguration config)", "modifiers": "@Override public", "return": "RecordConfiguration", "signature": "RecordConfiguration process(@Nullable final RecordConfiguration config)", "full_signature": "@Override public RecordConfiguration process(@Nullable final RecordConfiguration config)", "class_method_signature": "GlobalFamilyConfigurationModule.process(@Nullable final RecordConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "GlobalFamilyConfigurationModule.getPriority()", "testcase": false, "constructor": false}, {"identifier": "supportsRecordType", "parameters": "(final String recordType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsRecordType(final String recordType)", "full_signature": "@Override public boolean supportsRecordType(final String recordType)", "class_method_signature": "GlobalFamilyConfigurationModule.supportsRecordType(final String recordType)", "testcase": false, "constructor": false}, {"identifier": "getOrderedSectionUIExtensions", "parameters": "()", "modifiers": "private", "return": "List<UIExtension>", "signature": "List<UIExtension> getOrderedSectionUIExtensions()", "full_signature": "private List<UIExtension> getOrderedSectionUIExtensions()", "class_method_signature": "GlobalFamilyConfigurationModule.getOrderedSectionUIExtensions()", "testcase": false, "constructor": false}], "file": "components/family-studies/api/src/main/java/org/phenotips/studies/family/internal/GlobalFamilyConfigurationModule.java"}, "focal_method": {"identifier": "process", "parameters": "(@Nullable final RecordConfiguration config)", "modifiers": "@Override public", "return": "RecordConfiguration", "body": "@Override\n    public RecordConfiguration process(@Nullable final RecordConfiguration config)\n    {\n        if (config == null) {\n            return null;\n        }\n        final List<UIExtension> sectionExtensions = getOrderedSectionUIExtensions();\n        final List<RecordSection> recordSections = new LinkedList<>();\n        for (final UIExtension sectionExtension : sectionExtensions) {\n            final RecordSection section = new UIXRecordSection(sectionExtension, this.uixManager, this.orderFilter);\n            recordSections.add(section);\n        }\n        config.setSections(Collections.unmodifiableList(recordSections));\n        return config;\n    }", "signature": "RecordConfiguration process(@Nullable final RecordConfiguration config)", "full_signature": "@Override public RecordConfiguration process(@Nullable final RecordConfiguration config)", "class_method_signature": "GlobalFamilyConfigurationModule.process(@Nullable final RecordConfiguration config)", "testcase": false, "constructor": false, "invocations": ["getOrderedSectionUIExtensions", "add", "setSections", "unmodifiableList"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}