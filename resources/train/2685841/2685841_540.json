{"test_class": {"identifier": "ModularRightServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ComponentManager cm;", "modifier": "@Mock\n    private", "type": "ComponentManager", "declarator": "cm", "var_name": "cm"}, {"original_string": "@Mock\n    private UserManager userManager;", "modifier": "@Mock\n    private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "@Mock\n    private AuthorizationService internalService;", "modifier": "@Mock\n    private", "type": "AuthorizationService", "declarator": "internalService", "var_name": "internalService"}, {"original_string": "@Mock\n    private XWikiDocument document;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private DocumentReference documentReference = new DocumentReference(\"xwiki\", \"Some\", \"Document\");", "modifier": "private", "type": "DocumentReference", "declarator": "documentReference = new DocumentReference(\"xwiki\", \"Some\", \"Document\")", "var_name": "documentReference"}, {"original_string": "private DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"jdoe\");", "modifier": "private", "type": "DocumentReference", "declarator": "userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"jdoe\")", "var_name": "userReference"}, {"original_string": "private DocumentReference guestReference = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiGuest\");", "modifier": "private", "type": "DocumentReference", "declarator": "guestReference = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiGuest\")", "var_name": "guestReference"}, {"original_string": "@Mock\n    private DocumentReferenceResolver<String> userResolver;", "modifier": "@Mock\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "userResolver", "var_name": "userResolver"}, {"original_string": "@Mock\n    private DocumentReferenceResolver<String> docResolver;", "modifier": "@Mock\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "docResolver", "var_name": "docResolver"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "@Mock\n    private User guestUser;", "modifier": "@Mock\n    private", "type": "User", "declarator": "guestUser", "var_name": "guestUser"}, {"original_string": "private ModularRightServiceImpl service;", "modifier": "private", "type": "ModularRightServiceImpl", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private XWikiAuthService authService;", "modifier": "@Mock\n    private", "type": "XWikiAuthService", "declarator": "authService", "var_name": "authService"}], "file": "components/security/bridge/src/test/java/org/phenotips/security/authorization/ModularRightServiceImplTest.java"}, "test_case": {"identifier": "checkAccessWithNullUserAndGuestAuthentication", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkAccessWithNullUserAndGuestAuthentication() throws XWikiException\n    {\n        when(this.context.getUserReference()).thenReturn(null);\n        XWikiUser oldcoreUser = mock(XWikiUser.class);\n        when(this.xwiki.checkAuth(this.context)).thenReturn(oldcoreUser);\n        when(oldcoreUser.getUser()).thenReturn(\"XWiki.XWikiGuest\");\n\n        Assert.assertFalse(this.service.checkAccess(\"view\", this.document, this.context));\n        // Will show the login screen\n        Mockito.verify(this.authService).showLogin(this.context);\n    }", "signature": "void checkAccessWithNullUserAndGuestAuthentication()", "full_signature": "@Test public void checkAccessWithNullUserAndGuestAuthentication()", "class_method_signature": "ModularRightServiceImplTest.checkAccessWithNullUserAndGuestAuthentication()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getUserReference", "mock", "thenReturn", "when", "checkAuth", "thenReturn", "when", "getUser", "assertFalse", "checkAccess", "showLogin", "verify"]}, "focal_class": {"identifier": "ModularRightServiceImpl", "superclass": "extends XWikiCachingRightService", "interfaces": "implements XWikiRightService", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(ModularRightServiceImpl.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ModularRightServiceImpl.class)", "var_name": "logger"}, {"original_string": "@SuppressWarnings(\"deprecation\")\n    private UserManager userManager = Utils.getComponent(UserManager.class);", "modifier": "@SuppressWarnings(\"deprecation\")\n    private", "type": "UserManager", "declarator": "userManager = Utils.getComponent(UserManager.class)", "var_name": "userManager"}, {"original_string": "@SuppressWarnings(\"deprecation\")\n    private DocumentReferenceResolver<String> documentReferenceResolver = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");", "modifier": "@SuppressWarnings(\"deprecation\")\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "documentReferenceResolver = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"currentmixed\")", "var_name": "documentReferenceResolver"}, {"original_string": "@SuppressWarnings(\"deprecation\")\n    private DocumentReferenceResolver<String> userAndGroupReferenceResolver = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"user\");", "modifier": "@SuppressWarnings(\"deprecation\")\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "userAndGroupReferenceResolver = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"user\")", "var_name": "userAndGroupReferenceResolver"}, {"original_string": "@SuppressWarnings(\"deprecation\")\n    private AuthorizationService service = Utils.getComponent(AuthorizationService.class);", "modifier": "@SuppressWarnings(\"deprecation\")\n    private", "type": "AuthorizationService", "declarator": "service = Utils.getComponent(AuthorizationService.class)", "var_name": "service"}], "methods": [{"identifier": "checkAccess", "parameters": "(String action, XWikiDocument doc, XWikiContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkAccess(String action, XWikiDocument doc, XWikiContext context)", "full_signature": "@Override public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context)", "class_method_signature": "ModularRightServiceImpl.checkAccess(String action, XWikiDocument doc, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "hasAccessLevel", "parameters": "(String right, String username, String docname, XWikiContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAccessLevel(String right, String username, String docname, XWikiContext context)", "full_signature": "@Override public boolean hasAccessLevel(String right, String username, String docname, XWikiContext context)", "class_method_signature": "ModularRightServiceImpl.hasAccessLevel(String right, String username, String docname, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getCurrentUser", "parameters": "(XWikiContext context)", "modifiers": "private", "return": "DocumentReference", "signature": "DocumentReference getCurrentUser(XWikiContext context)", "full_signature": "private DocumentReference getCurrentUser(XWikiContext context)", "class_method_signature": "ModularRightServiceImpl.getCurrentUser(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "resolveUserName", "parameters": "(String username, WikiReference wikiReference)", "modifiers": "private", "return": "DocumentReference", "signature": "DocumentReference resolveUserName(String username, WikiReference wikiReference)", "full_signature": "private DocumentReference resolveUserName(String username, WikiReference wikiReference)", "class_method_signature": "ModularRightServiceImpl.resolveUserName(String username, WikiReference wikiReference)", "testcase": false, "constructor": false}, {"identifier": "resolveDocumentName", "parameters": "(String docname, WikiReference wikiReference)", "modifiers": "private", "return": "DocumentReference", "signature": "DocumentReference resolveDocumentName(String docname, WikiReference wikiReference)", "full_signature": "private DocumentReference resolveDocumentName(String docname, WikiReference wikiReference)", "class_method_signature": "ModularRightServiceImpl.resolveDocumentName(String docname, WikiReference wikiReference)", "testcase": false, "constructor": false}], "file": "components/security/bridge/src/main/java/org/phenotips/security/authorization/ModularRightServiceImpl.java"}, "focal_method": {"identifier": "checkAccess", "parameters": "(String action, XWikiDocument doc, XWikiContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context) throws XWikiException\n    {\n        DocumentReference userReference = getCurrentUser(context);\n        User user = this.userManager.getUser(userReference != null ? userReference.toString() : null, true);\n        boolean result = this.service.hasAccess(user, actionToRight(action), doc.getDocumentReference());\n        if (!result && context.getUserReference() == null && !\"login\".equals(context.getAction())) {\n            this.logger.debug(\"Redirecting unauthenticated user to login, since it have been denied [{}] on [{}].\",\n                actionToRight(action), doc.getDocumentReference());\n            context.getWiki().getAuthService().showLogin(context);\n        }\n\n        return result;\n    }", "signature": "boolean checkAccess(String action, XWikiDocument doc, XWikiContext context)", "full_signature": "@Override public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context)", "class_method_signature": "ModularRightServiceImpl.checkAccess(String action, XWikiDocument doc, XWikiContext context)", "testcase": false, "constructor": false, "invocations": ["getCurrentUser", "getUser", "toString", "hasAccess", "actionToRight", "getDocumentReference", "getUserReference", "equals", "getAction", "debug", "actionToRight", "getDocumentReference", "showLogin", "getAuthService", "getWiki"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}