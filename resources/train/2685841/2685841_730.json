{"test_class": {"identifier": "MetaUserManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<UserManager> mocker =\n        new MockitoComponentMockingRule<UserManager>(MetaUserManager.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<UserManager>", "declarator": "mocker =\n        new MockitoComponentMockingRule<UserManager>(MetaUserManager.class)", "var_name": "mocker"}, {"original_string": "private final String adminUsername = \"Admin\";", "modifier": "private final", "type": "String", "declarator": "adminUsername = \"Admin\"", "var_name": "adminUsername"}, {"original_string": "private final String userSpace = \"XWiki\";", "modifier": "private final", "type": "String", "declarator": "userSpace = \"XWiki\"", "var_name": "userSpace"}, {"original_string": "private final String mainWiki = \"xwiki\";", "modifier": "private final", "type": "String", "declarator": "mainWiki = \"xwiki\"", "var_name": "mainWiki"}, {"original_string": "private UserManager userManager;", "modifier": "private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "private EntityReferenceResolver<String> resolver;", "modifier": "private", "type": "EntityReferenceResolver<String>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private EntityReferenceSerializer<String> serializer;", "modifier": "private", "type": "EntityReferenceSerializer<String>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private ConfigurationSource configuration;", "modifier": "private", "type": "ConfigurationSource", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private ModelConfiguration modelConfiguration;", "modifier": "private", "type": "ModelConfiguration", "declarator": "modelConfiguration", "var_name": "modelConfiguration"}, {"original_string": "private ComponentManager cm;", "modifier": "private", "type": "ComponentManager", "declarator": "cm", "var_name": "cm"}], "file": "components/xwiki-platform-users/xwiki-platform-users-api/src/test/java/org/xwiki/users/internal/MetaUserManagerTest.java"}, "test_case": {"identifier": "getUserFromUsernameWithNoManagers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUserFromUsernameWithNoManagers() throws Exception\n    {\n        DocumentReference admin = new DocumentReference(this.mainWiki, this.userSpace, this.adminUsername);\n        when(this.cm.getInstanceMap(UserManager.class)).thenReturn(Collections.<String, Object>emptyMap());\n        when(this.modelConfiguration.getDefaultReferenceValue(EntityType.WIKI)).thenReturn(this.mainWiki);\n        when(this.configuration.getProperty(\"users.defaultWiki\", this.mainWiki)).thenReturn(this.mainWiki);\n        when(this.resolver.resolve(this.adminUsername, EntityType.DOCUMENT,\n            new EntityReference(this.userSpace, EntityType.SPACE, new WikiReference(this.mainWiki))))\n                .thenReturn(admin);\n        when(this.serializer.serialize(admin, new Object[0])).thenReturn(\"xwiki:XWiki.Admin\");\n\n        User u = this.userManager.getUser(this.adminUsername);\n        Assert.assertEquals(\"xwiki:XWiki.Admin\", u.getId());\n        Assert.assertTrue(u instanceof InvalidUser);\n    }", "signature": "void getUserFromUsernameWithNoManagers()", "full_signature": "@Test public void getUserFromUsernameWithNoManagers()", "class_method_signature": "MetaUserManagerTest.getUserFromUsernameWithNoManagers()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getInstanceMap", "emptyMap", "thenReturn", "when", "getDefaultReferenceValue", "thenReturn", "when", "getProperty", "thenReturn", "when", "resolve", "thenReturn", "when", "serialize", "getUser", "assertEquals", "getId", "assertTrue"]}, "focal_class": {"identifier": "MetaUserManager", "superclass": "extends AbstractUserManager", "interfaces": "", "fields": [{"original_string": "@Inject\n    private DocumentAccessBridge bridge;", "modifier": "@Inject\n    private", "type": "DocumentAccessBridge", "declarator": "bridge", "var_name": "bridge"}, {"original_string": "@Inject\n    @Named(\"xwikiproperties\")\n    private ConfigurationSource configuration;", "modifier": "@Inject\n    @Named(\"xwikiproperties\")\n    private", "type": "ConfigurationSource", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Inject\n    private ModelConfiguration modelConfiguration;", "modifier": "@Inject\n    private", "type": "ModelConfiguration", "declarator": "modelConfiguration", "var_name": "modelConfiguration"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> serializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "@Inject\n    private ComponentManager componentManager;", "modifier": "@Inject\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "@Inject\n    @Named(\"explicit\")\n    private EntityReferenceResolver<String> nameResolver;", "modifier": "@Inject\n    @Named(\"explicit\")\n    private", "type": "EntityReferenceResolver<String>", "declarator": "nameResolver", "var_name": "nameResolver"}], "methods": [{"identifier": "getUser", "parameters": "(String identifier, boolean force)", "modifiers": "@Override public", "return": "User", "signature": "User getUser(String identifier, boolean force)", "full_signature": "@Override public User getUser(String identifier, boolean force)", "class_method_signature": "MetaUserManager.getUser(String identifier, boolean force)", "testcase": false, "constructor": false}, {"identifier": "getCurrentUser", "parameters": "()", "modifiers": "@Override public", "return": "User", "signature": "User getCurrentUser()", "full_signature": "@Override public User getCurrentUser()", "class_method_signature": "MetaUserManager.getCurrentUser()", "testcase": false, "constructor": false}, {"identifier": "getDefaultReference", "parameters": "(String identifier)", "modifiers": "private", "return": "DocumentReference", "signature": "DocumentReference getDefaultReference(String identifier)", "full_signature": "private DocumentReference getDefaultReference(String identifier)", "class_method_signature": "MetaUserManager.getDefaultReference(String identifier)", "testcase": false, "constructor": false}], "file": "components/xwiki-platform-users/xwiki-platform-users-api/src/main/java/org/xwiki/users/internal/MetaUserManager.java"}, "focal_method": {"identifier": "getUser", "parameters": "(String identifier, boolean force)", "modifiers": "@Override public", "return": "User", "body": "@Override\n    public User getUser(String identifier, boolean force)\n    {\n        if (StringUtils.isBlank(identifier)) {\n            return new InvalidUser(null, this.serializer);\n        }\n        User result = null;\n        try {\n            Map<String, UserManager> managers = this.componentManager.getInstanceMap(UserManager.class);\n            managers.remove(\"default\");\n            for (UserManager manager : managers.values()) {\n                result = manager.getUser(identifier);\n                if (result != null) {\n                    return result;\n                }\n            }\n        } catch (ComponentLookupException ex) {\n            // This shouldn't happen; can't create users\n        }\n\n        if (force) {\n            try {\n                UserManager defaultManager =\n                    this.componentManager.getInstance(UserManager.class,\n                        this.configuration.getProperty(\"users.defaultUserManager\", \"wiki\"));\n                return defaultManager.getUser(identifier, true);\n            } catch (ComponentLookupException ex) {\n                // This shouldn't happen; can't create users\n            }\n        }\n        return new InvalidUser(getDefaultReference(identifier), this.serializer);\n    }", "signature": "User getUser(String identifier, boolean force)", "full_signature": "@Override public User getUser(String identifier, boolean force)", "class_method_signature": "MetaUserManager.getUser(String identifier, boolean force)", "testcase": false, "constructor": false, "invocations": ["isBlank", "getInstanceMap", "remove", "values", "getUser", "getInstance", "getProperty", "getUser", "getDefaultReference"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}