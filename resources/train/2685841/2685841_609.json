{"test_class": {"identifier": "DocumentReferenceTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ComponentManager cm;", "modifier": "private static", "type": "ComponentManager", "declarator": "cm", "var_name": "cm"}, {"original_string": "private static DocumentReferenceResolver<String> resolver;", "modifier": "private static", "type": "DocumentReferenceResolver<String>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private static DocumentReference docReference = new DocumentReference(\"wiki\", \"Space\", \"Page\");", "modifier": "private static", "type": "DocumentReference", "declarator": "docReference = new DocumentReference(\"wiki\", \"Space\", \"Page\")", "var_name": "docReference"}, {"original_string": "@Mock\n    private ResultSet rs;", "modifier": "@Mock\n    private", "type": "ResultSet", "declarator": "rs", "var_name": "rs"}, {"original_string": "private String[] names = new String[] { \"reference\" };", "modifier": "private", "type": "String[]", "declarator": "names = new String[] { \"reference\" }", "var_name": "names"}, {"original_string": "private DocumentReferenceType type = new DocumentReferenceType();", "modifier": "private", "type": "DocumentReferenceType", "declarator": "type = new DocumentReferenceType()", "var_name": "type"}, {"original_string": "@Mock\n    private PreparedStatement st;", "modifier": "@Mock\n    private", "type": "PreparedStatement", "declarator": "st", "var_name": "st"}], "file": "components/security/audit/backend/src/test/java/org/phenotips/security/audit/internal/DocumentReferenceTypeTest.java"}, "test_case": {"identifier": "equalsForwardsCall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void equalsForwardsCall()\n    {\n        Assert.assertTrue(this.type.equals(new DocumentReference(\"wiki\", \"Space\", \"Page\"), docReference));\n        Assert.assertFalse(this.type.equals(new DocumentReference(\"wiki\", \"Space\", \"OtherPage\"), docReference));\n        Assert.assertFalse(this.type.equals(\"wiki:Space.Page\", docReference));\n        Assert.assertFalse(this.type.equals(docReference, \"wiki:Space.Page\"));\n        Assert.assertFalse(this.type.equals(\"wiki:Space.Page\", \"wiki:Space.Page\"));\n    }", "signature": "void equalsForwardsCall()", "full_signature": "@Test public void equalsForwardsCall()", "class_method_signature": "DocumentReferenceTypeTest.equalsForwardsCall()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "DocumentReferenceType", "superclass": "", "interfaces": "implements UserType", "fields": [], "methods": [{"identifier": "sqlTypes", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] sqlTypes()", "full_signature": "@Override public int[] sqlTypes()", "class_method_signature": "DocumentReferenceType.sqlTypes()", "testcase": false, "constructor": false}, {"identifier": "returnedClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> returnedClass()", "full_signature": "@Override public Class<?> returnedClass()", "class_method_signature": "DocumentReferenceType.returnedClass()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object x, Object y)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object x, Object y)", "full_signature": "@Override public boolean equals(Object x, Object y)", "class_method_signature": "DocumentReferenceType.equals(Object x, Object y)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(Object x)", "modifiers": "@Override public", "return": "int", "signature": "int hashCode(Object x)", "full_signature": "@Override public int hashCode(Object x)", "class_method_signature": "DocumentReferenceType.hashCode(Object x)", "testcase": false, "constructor": false}, {"identifier": "nullSafeGet", "parameters": "(ResultSet rs, String[] names, Object owner)", "modifiers": "@Override public", "return": "Object", "signature": "Object nullSafeGet(ResultSet rs, String[] names, Object owner)", "full_signature": "@Override public Object nullSafeGet(ResultSet rs, String[] names, Object owner)", "class_method_signature": "DocumentReferenceType.nullSafeGet(ResultSet rs, String[] names, Object owner)", "testcase": false, "constructor": false}, {"identifier": "nullSafeSet", "parameters": "(PreparedStatement st, Object value, int index)", "modifiers": "@Override public", "return": "void", "signature": "void nullSafeSet(PreparedStatement st, Object value, int index)", "full_signature": "@Override public void nullSafeSet(PreparedStatement st, Object value, int index)", "class_method_signature": "DocumentReferenceType.nullSafeSet(PreparedStatement st, Object value, int index)", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "(Object value)", "modifiers": "@Override public", "return": "Object", "signature": "Object deepCopy(Object value)", "full_signature": "@Override public Object deepCopy(Object value)", "class_method_signature": "DocumentReferenceType.deepCopy(Object value)", "testcase": false, "constructor": false}, {"identifier": "isMutable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMutable()", "full_signature": "@Override public boolean isMutable()", "class_method_signature": "DocumentReferenceType.isMutable()", "testcase": false, "constructor": false}, {"identifier": "disassemble", "parameters": "(Object value)", "modifiers": "@Override public", "return": "Serializable", "signature": "Serializable disassemble(Object value)", "full_signature": "@Override public Serializable disassemble(Object value)", "class_method_signature": "DocumentReferenceType.disassemble(Object value)", "testcase": false, "constructor": false}, {"identifier": "assemble", "parameters": "(Serializable cached, Object owner)", "modifiers": "@Override public", "return": "Object", "signature": "Object assemble(Serializable cached, Object owner)", "full_signature": "@Override public Object assemble(Serializable cached, Object owner)", "class_method_signature": "DocumentReferenceType.assemble(Serializable cached, Object owner)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Object original, Object target, Object owner)", "modifiers": "@Override public", "return": "Object", "signature": "Object replace(Object original, Object target, Object owner)", "full_signature": "@Override public Object replace(Object original, Object target, Object owner)", "class_method_signature": "DocumentReferenceType.replace(Object original, Object target, Object owner)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String serializedReference)", "modifiers": "private", "return": "DocumentReference", "signature": "DocumentReference resolve(String serializedReference)", "full_signature": "private DocumentReference resolve(String serializedReference)", "class_method_signature": "DocumentReferenceType.resolve(String serializedReference)", "testcase": false, "constructor": false}], "file": "components/security/audit/backend/src/main/java/org/phenotips/security/audit/internal/DocumentReferenceType.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object x, Object y)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object x, Object y) throws HibernateException\n    {\n        if (DocumentReference.class.isInstance(x) && DocumentReference.class.isInstance(y)) {\n            return x.equals(y);\n        }\n        return false;\n    }", "signature": "boolean equals(Object x, Object y)", "full_signature": "@Override public boolean equals(Object x, Object y)", "class_method_signature": "DocumentReferenceType.equals(Object x, Object y)", "testcase": false, "constructor": false, "invocations": ["isInstance", "isInstance", "equals"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}