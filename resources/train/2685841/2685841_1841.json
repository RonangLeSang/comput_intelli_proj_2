{"test_class": {"identifier": "PatientCreatedEventSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<EventListener> mocker =\n        new MockitoComponentMockingRule<EventListener>(PatientCreatedEventSource.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<EventListener>", "declarator": "mocker =\n        new MockitoComponentMockingRule<EventListener>(PatientCreatedEventSource.class)", "var_name": "mocker"}], "file": "components/patient-data/impl/src/test/java/org/phenotips/data/events/internal/PatientCreatedEventSourceTest.java"}, "test_case": {"identifier": "listensForDocumentCreatedEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void listensForDocumentCreatedEvents() throws ComponentLookupException\n    {\n        List<Event> events = this.mocker.getComponentUnderTest().getEvents();\n        Assert.assertFalse(events.isEmpty());\n        Assert.assertEquals(1, events.size());\n        Assert.assertTrue(events.iterator().next().matches(new DocumentCreatedEvent()));\n        Assert.assertFalse(events.iterator().next().matches(new DocumentCreatingEvent()));\n        Assert.assertFalse(events.iterator().next().matches(new DocumentDeletedEvent()));\n        Assert.assertFalse(events.iterator().next().matches(new DocumentUpdatedEvent()));\n    }", "signature": "void listensForDocumentCreatedEvents()", "full_signature": "@Test public void listensForDocumentCreatedEvents()", "class_method_signature": "PatientCreatedEventSourceTest.listensForDocumentCreatedEvents()", "testcase": true, "constructor": false, "invocations": ["getEvents", "getComponentUnderTest", "assertFalse", "isEmpty", "assertEquals", "size", "assertTrue", "matches", "next", "iterator", "assertFalse", "matches", "next", "iterator", "assertFalse", "matches", "next", "iterator", "assertFalse", "matches", "next", "iterator"]}, "focal_class": {"identifier": "PatientCreatedEventSource", "superclass": "", "interfaces": "implements EventListener", "fields": [{"original_string": "@Inject\n    private ObservationManager observationManager;", "modifier": "@Inject\n    private", "type": "ObservationManager", "declarator": "observationManager", "var_name": "observationManager"}, {"original_string": "@Inject\n    private UserManager userManager;", "modifier": "@Inject\n    private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "@Inject\n    private PatientRepository repo;", "modifier": "@Inject\n    private", "type": "PatientRepository", "declarator": "repo", "var_name": "repo"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "PatientCreatedEventSource.getName()", "testcase": false, "constructor": false}, {"identifier": "getEvents", "parameters": "()", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getEvents()", "full_signature": "@Override public List<Event> getEvents()", "class_method_signature": "PatientCreatedEventSource.getEvents()", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "PatientCreatedEventSource.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false}], "file": "components/patient-data/impl/src/main/java/org/phenotips/data/events/internal/PatientCreatedEventSource.java"}, "focal_method": {"identifier": "getEvents", "parameters": "()", "modifiers": "@Override public", "return": "List<Event>", "body": "@Override\n    public List<Event> getEvents()\n    {\n        return Collections.<Event>singletonList(new DocumentCreatedEvent());\n    }", "signature": "List<Event> getEvents()", "full_signature": "@Override public List<Event> getEvents()", "class_method_signature": "PatientCreatedEventSource.getEvents()", "testcase": false, "constructor": false, "invocations": ["singletonList"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}