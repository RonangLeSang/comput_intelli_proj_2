{"test_class": {"identifier": "MeasurementsScriptServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<MeasurementsScriptService> mocker =\n        new MockitoComponentMockingRule<>(MeasurementsScriptService.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<MeasurementsScriptService>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(MeasurementsScriptService.class)", "var_name": "mocker"}], "file": "components/patient-measurements/api/src/test/java/org/phenotips/measurements/script/MeasurementsScriptServiceTest.java"}, "test_case": {"identifier": "testGetFuzzyValueSD", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFuzzyValueSD() throws ComponentLookupException\n    {\n        Assert.assertEquals(\"extreme-below-normal\", this.mocker.getComponentUnderTest()\n            .getFuzzyValue(-Double.MAX_VALUE));\n        Assert.assertEquals(\"extreme-below-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(-3.1));\n        Assert.assertEquals(\"extreme-below-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(-3.0));\n        Assert.assertEquals(\"below-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(-2.99));\n        Assert.assertEquals(\"below-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(-2.0));\n        Assert.assertEquals(\"normal\", this.mocker.getComponentUnderTest().getFuzzyValue(-1.99));\n        Assert.assertEquals(\"normal\", this.mocker.getComponentUnderTest().getFuzzyValue(0.0));\n        Assert.assertEquals(\"normal\", this.mocker.getComponentUnderTest().getFuzzyValue(1.99));\n        Assert.assertEquals(\"above-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(2.0));\n        Assert.assertEquals(\"above-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(2.99));\n        Assert.assertEquals(\"extreme-above-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(3.0));\n        Assert.assertEquals(\"extreme-above-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(3.1));\n        Assert\n            .assertEquals(\"extreme-above-normal\", this.mocker.getComponentUnderTest().getFuzzyValue(Double.MAX_VALUE));\n    }", "signature": "void testGetFuzzyValueSD()", "full_signature": "@Test public void testGetFuzzyValueSD()", "class_method_signature": "MeasurementsScriptServiceTest.testGetFuzzyValueSD()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest", "assertEquals", "getFuzzyValue", "getComponentUnderTest"]}, "focal_class": {"identifier": "MeasurementsScriptService", "superclass": "", "interfaces": "implements ScriptService", "fields": [{"original_string": "private static final String VALUE_EXTREME_BELOW_NORMAL = \"extreme-below-normal\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_EXTREME_BELOW_NORMAL = \"extreme-below-normal\"", "var_name": "VALUE_EXTREME_BELOW_NORMAL"}, {"original_string": "private static final String VALUE_BELOW_NORMAL = \"below-normal\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_BELOW_NORMAL = \"below-normal\"", "var_name": "VALUE_BELOW_NORMAL"}, {"original_string": "private static final String VALUE_NORMAL = \"normal\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_NORMAL = \"normal\"", "var_name": "VALUE_NORMAL"}, {"original_string": "private static final String VALUE_ABOVE_NORMAL = \"above-normal\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_ABOVE_NORMAL = \"above-normal\"", "var_name": "VALUE_ABOVE_NORMAL"}, {"original_string": "private static final String VALUE_EXTREME_ABOVE_NORMAL = \"extreme-above-normal\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_EXTREME_ABOVE_NORMAL = \"extreme-above-normal\"", "var_name": "VALUE_EXTREME_ABOVE_NORMAL"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    @Named(\"context\")\n    private Provider<ComponentManager> componentManager;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "Provider<ComponentManager>", "declarator": "componentManager", "var_name": "componentManager"}], "methods": [{"identifier": "get", "parameters": "(String measurementType)", "modifiers": "public", "return": "MeasurementHandler", "signature": "MeasurementHandler get(String measurementType)", "full_signature": "public MeasurementHandler get(String measurementType)", "class_method_signature": "MeasurementsScriptService.get(String measurementType)", "testcase": false, "constructor": false}, {"identifier": "getAvailableMeasurementHandlers", "parameters": "()", "modifiers": "public", "return": "List<MeasurementHandler>", "signature": "List<MeasurementHandler> getAvailableMeasurementHandlers()", "full_signature": "public List<MeasurementHandler> getAvailableMeasurementHandlers()", "class_method_signature": "MeasurementsScriptService.getAvailableMeasurementHandlers()", "testcase": false, "constructor": false}, {"identifier": "getAvailableMeasurementNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAvailableMeasurementNames()", "full_signature": "public Set<String> getAvailableMeasurementNames()", "class_method_signature": "MeasurementsScriptService.getAvailableMeasurementNames()", "testcase": false, "constructor": false}, {"identifier": "getFuzzyValue", "parameters": "(int percentile)", "modifiers": "public", "return": "String", "signature": "String getFuzzyValue(int percentile)", "full_signature": "public String getFuzzyValue(int percentile)", "class_method_signature": "MeasurementsScriptService.getFuzzyValue(int percentile)", "testcase": false, "constructor": false}, {"identifier": "getFuzzyValue", "parameters": "(double deviation)", "modifiers": "public", "return": "String", "signature": "String getFuzzyValue(double deviation)", "full_signature": "public String getFuzzyValue(double deviation)", "class_method_signature": "MeasurementsScriptService.getFuzzyValue(double deviation)", "testcase": false, "constructor": false}], "file": "components/patient-measurements/api/src/main/java/org/phenotips/measurements/script/MeasurementsScriptService.java"}, "focal_method": {"identifier": "getFuzzyValue", "parameters": "(int percentile)", "modifiers": "public", "return": "String", "body": "public String getFuzzyValue(int percentile)\n    {\n        String returnValue = VALUE_NORMAL;\n        if (percentile <= 1) {\n            returnValue = VALUE_EXTREME_BELOW_NORMAL;\n        } else if (percentile <= 3) {\n            returnValue = VALUE_BELOW_NORMAL;\n        } else if (percentile >= 99) {\n            returnValue = VALUE_EXTREME_ABOVE_NORMAL;\n        } else if (percentile >= 97) {\n            returnValue = VALUE_ABOVE_NORMAL;\n        }\n        return returnValue;\n    }", "signature": "String getFuzzyValue(int percentile)", "full_signature": "public String getFuzzyValue(int percentile)", "class_method_signature": "MeasurementsScriptService.getFuzzyValue(int percentile)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}