{"test_class": {"identifier": "MedicalReportsControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static TemporaryFolder tf = new TemporaryFolder();", "modifier": "@ClassRule\n    public static", "type": "TemporaryFolder", "declarator": "tf = new TemporaryFolder()", "var_name": "tf"}, {"original_string": "private static final String DATA_NAME = \"medical_reports\";", "modifier": "private static final", "type": "String", "declarator": "DATA_NAME = \"medical_reports\"", "var_name": "DATA_NAME"}, {"original_string": "private static final String CONTROLLER_NAME = \"medicalReports\";", "modifier": "private static final", "type": "String", "declarator": "CONTROLLER_NAME = \"medicalReports\"", "var_name": "CONTROLLER_NAME"}, {"original_string": "private static final String FIELD_NAME = \"reports_history\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_NAME = \"reports_history\"", "var_name": "FIELD_NAME"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<PatientDataController<Attachment>> mocker =\n        new MockitoComponentMockingRule<>(MedicalReportsController.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<PatientDataController<Attachment>>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(MedicalReportsController.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private XWikiDocument doc;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "doc", "var_name": "doc"}, {"original_string": "@Mock\n    private BaseObject data;", "modifier": "@Mock\n    private", "type": "BaseObject", "declarator": "data", "var_name": "data"}, {"original_string": "@Mock\n    private XWikiAttachment attachment1;", "modifier": "@Mock\n    private", "type": "XWikiAttachment", "declarator": "attachment1", "var_name": "attachment1"}, {"original_string": "@Mock\n    private XWikiAttachment attachment2;", "modifier": "@Mock\n    private", "type": "XWikiAttachment", "declarator": "attachment2", "var_name": "attachment2"}, {"original_string": "@Mock\n    private Attachment a1;", "modifier": "@Mock\n    private", "type": "Attachment", "declarator": "a1", "var_name": "a1"}, {"original_string": "@Mock\n    private Attachment a2;", "modifier": "@Mock\n    private", "type": "Attachment", "declarator": "a2", "var_name": "a2"}, {"original_string": "private Date date1;", "modifier": "private", "type": "Date", "declarator": "date1", "var_name": "date1"}, {"original_string": "private Date date2;", "modifier": "private", "type": "Date", "declarator": "date2", "var_name": "date2"}, {"original_string": "private DocumentReference author1 = new DocumentReference(\"main\", \"Users\", \"padams\");", "modifier": "private", "type": "DocumentReference", "declarator": "author1 = new DocumentReference(\"main\", \"Users\", \"padams\")", "var_name": "author1"}, {"original_string": "private DocumentReference author2 = new DocumentReference(\"genetics\", \"Users\", \"hmccoy\");", "modifier": "private", "type": "DocumentReference", "declarator": "author2 = new DocumentReference(\"genetics\", \"Users\", \"hmccoy\")", "var_name": "author2"}, {"original_string": "private AttachmentAdapterFactory adapter;", "modifier": "private", "type": "AttachmentAdapterFactory", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "private JSONObject json1shallow = new JSONObject(\"{\"\n        + \"\\\"filename\\\":\\\"a1.pdf\\\",\"\n        + \"\\\"filesize\\\":4,\"\n        + \"\\\"author\\\":\\\"Users.padams\\\",\"\n        + \"\\\"date\\\":\\\"2017-01-01T12:00:00.000Z\\\",\"\n        + \"\\\"link\\\":\\\"/download/data/abc.def\\\",\"\n        + \"}\");", "modifier": "private", "type": "JSONObject", "declarator": "json1shallow = new JSONObject(\"{\"\n        + \"\\\"filename\\\":\\\"a1.pdf\\\",\"\n        + \"\\\"filesize\\\":4,\"\n        + \"\\\"author\\\":\\\"Users.padams\\\",\"\n        + \"\\\"date\\\":\\\"2017-01-01T12:00:00.000Z\\\",\"\n        + \"\\\"link\\\":\\\"/download/data/abc.def\\\",\"\n        + \"}\")", "var_name": "json1shallow"}, {"original_string": "private JSONObject json1full = new JSONObject(\"{\"\n            + \"\\\"filename\\\":\\\"a1.pdf\\\",\"\n            + \"\\\"filesize\\\":4,\"\n            + \"\\\"author\\\":\\\"Users.padams\\\",\"\n            + \"\\\"date\\\":\\\"2017-01-01T12:00:00.000Z\\\",\"\n            + \"\\\"content\\\":\\\"YWJjZA==\\\"\"\n            + \"}\");", "modifier": "private", "type": "JSONObject", "declarator": "json1full = new JSONObject(\"{\"\n            + \"\\\"filename\\\":\\\"a1.pdf\\\",\"\n            + \"\\\"filesize\\\":4,\"\n            + \"\\\"author\\\":\\\"Users.padams\\\",\"\n            + \"\\\"date\\\":\\\"2017-01-01T12:00:00.000Z\\\",\"\n            + \"\\\"content\\\":\\\"YWJjZA==\\\"\"\n            + \"}\")", "var_name": "json1full"}, {"original_string": "private JSONObject json2shallow = new JSONObject(\"{\"\n        + \"\\\"filename\\\":\\\"a2.pdf\\\",\"\n        + \"\\\"filesize\\\":3,\"\n        + \"\\\"author\\\":\\\"genetics:Users.hmccoy\\\",\"\n        + \"\\\"date\\\":\\\"2016-08-01T14:00:00.000Z\\\",\"\n        + \"\\\"link\\\":\\\"/download/data/xyz.123\\\",\"\n        + \"}\");", "modifier": "private", "type": "JSONObject", "declarator": "json2shallow = new JSONObject(\"{\"\n        + \"\\\"filename\\\":\\\"a2.pdf\\\",\"\n        + \"\\\"filesize\\\":3,\"\n        + \"\\\"author\\\":\\\"genetics:Users.hmccoy\\\",\"\n        + \"\\\"date\\\":\\\"2016-08-01T14:00:00.000Z\\\",\"\n        + \"\\\"link\\\":\\\"/download/data/xyz.123\\\",\"\n        + \"}\")", "var_name": "json2shallow"}, {"original_string": "private JSONObject json2full = new JSONObject(\"{\"\n        + \"\\\"filename\\\":\\\"a2.pdf\\\",\"\n        + \"\\\"filesize\\\":3,\"\n        + \"\\\"author\\\":\\\"genetics:Users.hmccoy\\\",\"\n        + \"\\\"date\\\":\\\"2016-08-01T14:00:00.000Z\\\",\"\n        + \"\\\"content\\\":\\\"eHl6\\\"\"\n        + \"}\");", "modifier": "private", "type": "JSONObject", "declarator": "json2full = new JSONObject(\"{\"\n        + \"\\\"filename\\\":\\\"a2.pdf\\\",\"\n        + \"\\\"filesize\\\":3,\"\n        + \"\\\"author\\\":\\\"genetics:Users.hmccoy\\\",\"\n        + \"\\\"date\\\":\\\"2016-08-01T14:00:00.000Z\\\",\"\n        + \"\\\"content\\\":\\\"eHl6\\\"\"\n        + \"}\")", "var_name": "json2full"}], "file": "components/patient-data/impl/src/test/java/org/phenotips/data/internal/controller/MedicalReportsControllerTest.java"}, "test_case": {"identifier": "saveDoesNothingWhenNoDataPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void saveDoesNothingWhenNoDataPresent() throws ComponentLookupException\n    {\n        this.mocker.getComponentUnderTest().save(this.patient);\n        verify(this.doc).getXObject(Patient.CLASS_REFERENCE, true, this.context);\n        Mockito.verifyNoMoreInteractions(this.doc);\n    }", "signature": "void saveDoesNothingWhenNoDataPresent()", "full_signature": "@Test public void saveDoesNothingWhenNoDataPresent()", "class_method_signature": "MedicalReportsControllerTest.saveDoesNothingWhenNoDataPresent()", "testcase": true, "constructor": false, "invocations": ["save", "getComponentUnderTest", "getXObject", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "MedicalReportsController", "superclass": "", "interfaces": "implements PatientDataController<Attachment>", "fields": [{"original_string": "private static final String DATA_NAME = \"medical_reports\";", "modifier": "private static final", "type": "String", "declarator": "DATA_NAME = \"medical_reports\"", "var_name": "DATA_NAME"}, {"original_string": "private static final String FIELD_NAME = \"reports_history\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_NAME = \"reports_history\"", "var_name": "FIELD_NAME"}, {"original_string": "@Inject\n    private Provider<XWikiContext> contextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}, {"original_string": "@Inject\n    private AttachmentAdapterFactory adapter;", "modifier": "@Inject\n    private", "type": "AttachmentAdapterFactory", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "load", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "PatientData<Attachment>", "signature": "PatientData<Attachment> load(Patient patient)", "full_signature": "@Override public PatientData<Attachment> load(Patient patient)", "class_method_signature": "MedicalReportsController.load(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "signature": "void save(Patient patient)", "full_signature": "@Override public void save(Patient patient)", "class_method_signature": "MedicalReportsController.save(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "full_signature": "@Override public void save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "class_method_signature": "MedicalReportsController.save(@Nonnull final Patient patient, @Nonnull final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "saveAttachments", "parameters": "(\n        @Nonnull final Patient patient,\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<Attachment> reports,\n        @Nonnull final PatientWritePolicy policy,\n        @Nonnull final XWikiContext context)", "modifiers": "private", "return": "void", "signature": "void saveAttachments(\n        @Nonnull final Patient patient,\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<Attachment> reports,\n        @Nonnull final PatientWritePolicy policy,\n        @Nonnull final XWikiContext context)", "full_signature": "private void saveAttachments(\n        @Nonnull final Patient patient,\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<Attachment> reports,\n        @Nonnull final PatientWritePolicy policy,\n        @Nonnull final XWikiContext context)", "class_method_signature": "MedicalReportsController.saveAttachments(\n        @Nonnull final Patient patient,\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final BaseObject data,\n        @Nonnull final PatientData<Attachment> reports,\n        @Nonnull final PatientWritePolicy policy,\n        @Nonnull final XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "saveAndGetFilename", "parameters": "(\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final Attachment report,\n        @Nonnull final XWikiContext context)", "modifiers": "private", "return": "String", "signature": "String saveAndGetFilename(\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final Attachment report,\n        @Nonnull final XWikiContext context)", "full_signature": "private String saveAndGetFilename(\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final Attachment report,\n        @Nonnull final XWikiContext context)", "class_method_signature": "MedicalReportsController.saveAndGetFilename(\n        @Nonnull final XWikiDocument doc,\n        @Nonnull final Attachment report,\n        @Nonnull final XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json)", "class_method_signature": "MedicalReportsController.writeJSON(Patient patient, JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "class_method_signature": "MedicalReportsController.writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "testcase": false, "constructor": false}, {"identifier": "readJSON", "parameters": "(JSONObject json)", "modifiers": "@Override public", "return": "PatientData<Attachment>", "signature": "PatientData<Attachment> readJSON(JSONObject json)", "full_signature": "@Override public PatientData<Attachment> readJSON(JSONObject json)", "class_method_signature": "MedicalReportsController.readJSON(JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "MedicalReportsController.getName()", "testcase": false, "constructor": false}], "file": "components/patient-data/impl/src/main/java/org/phenotips/data/internal/controller/MedicalReportsController.java"}, "focal_method": {"identifier": "save", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void save(Patient patient)\n    {\n        save(patient, PatientWritePolicy.UPDATE);\n    }", "signature": "void save(Patient patient)", "full_signature": "@Override public void save(Patient patient)", "class_method_signature": "MedicalReportsController.save(Patient patient)", "testcase": false, "constructor": false, "invocations": ["save"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}