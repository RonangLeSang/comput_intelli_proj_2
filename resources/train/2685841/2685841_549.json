{"test_class": {"identifier": "AuditScriptServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<AuditScriptService> mocker =\n        new MockitoComponentMockingRule<>(AuditScriptService.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<AuditScriptService>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(AuditScriptService.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private DocumentReference doc = new DocumentReference(\"wiki\", \"Space\", \"Page\");", "modifier": "private", "type": "DocumentReference", "declarator": "doc = new DocumentReference(\"wiki\", \"Space\", \"Page\")", "var_name": "doc"}, {"original_string": "private DocumentReference xwikiPreferences = new DocumentReference(\"wiki\", \"XWiki\", \"XWikiPreferences\");", "modifier": "private", "type": "DocumentReference", "declarator": "xwikiPreferences = new DocumentReference(\"wiki\", \"XWiki\", \"XWikiPreferences\")", "var_name": "xwikiPreferences"}, {"original_string": "private AuditScriptService scriptService;", "modifier": "private", "type": "AuditScriptService", "declarator": "scriptService", "var_name": "scriptService"}, {"original_string": "private AuditStore store;", "modifier": "private", "type": "AuditStore", "declarator": "store", "var_name": "store"}, {"original_string": "private AuthorizationService auth;", "modifier": "private", "type": "AuthorizationService", "declarator": "auth", "var_name": "auth"}, {"original_string": "@Mock\n    private AuditEvent event;", "modifier": "@Mock\n    private", "type": "AuditEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private List<AuditEvent> events;", "modifier": "private", "type": "List<AuditEvent>", "declarator": "events", "var_name": "events"}], "file": "components/security/audit/backend/src/test/java/org/phenotips/security/audit/script/AuditScriptServiceTest.java"}, "test_case": {"identifier": "getEventsForEntityWithoutEditAccessReturnsEmptyList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getEventsForEntityWithoutEditAccessReturnsEmptyList()\n    {\n        when(this.auth.hasAccess(this.user, Right.EDIT, this.doc)).thenReturn(false);\n        Assert.assertTrue(this.scriptService.getEventsForEntity(this.doc).isEmpty());\n        Mockito.verifyZeroInteractions(this.store);\n    }", "signature": "void getEventsForEntityWithoutEditAccessReturnsEmptyList()", "full_signature": "@Test public void getEventsForEntityWithoutEditAccessReturnsEmptyList()", "class_method_signature": "AuditScriptServiceTest.getEventsForEntityWithoutEditAccessReturnsEmptyList()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "hasAccess", "assertTrue", "isEmpty", "getEventsForEntity", "verifyZeroInteractions"]}, "focal_class": {"identifier": "AuditScriptService", "superclass": "", "interfaces": "implements ScriptService", "fields": [{"original_string": "private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ENGLISH);", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "DATE_FORMAT = new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ENGLISH)", "var_name": "DATE_FORMAT"}, {"original_string": "@Inject\n    private AuditStore store;", "modifier": "@Inject\n    private", "type": "AuditStore", "declarator": "store", "var_name": "store"}, {"original_string": "@Inject\n    private UserManager users;", "modifier": "@Inject\n    private", "type": "UserManager", "declarator": "users", "var_name": "users"}, {"original_string": "@Inject\n    private AuthorizationService auth;", "modifier": "@Inject\n    private", "type": "AuthorizationService", "declarator": "auth", "var_name": "auth"}, {"original_string": "@Inject\n    @Named(\"currentmixed\")\n    private DocumentReferenceResolver<EntityReference> resolver;", "modifier": "@Inject\n    @Named(\"currentmixed\")\n    private", "type": "DocumentReferenceResolver<EntityReference>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Inject\n    @Named(\"current\")\n    private DocumentReferenceResolver<String> resolverd;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "resolverd", "var_name": "resolverd"}], "methods": [{"identifier": "getEventsForEntity", "parameters": "(DocumentReference entity)", "modifiers": "@Nonnull public", "return": "List<AuditEvent>", "signature": "List<AuditEvent> getEventsForEntity(DocumentReference entity)", "full_signature": "@Nonnull public List<AuditEvent> getEventsForEntity(DocumentReference entity)", "class_method_signature": "AuditScriptService.getEventsForEntity(DocumentReference entity)", "testcase": false, "constructor": false}, {"identifier": "getEventsForUser", "parameters": "(String userId)", "modifiers": "@Nonnull public", "return": "List<AuditEvent>", "signature": "List<AuditEvent> getEventsForUser(String userId)", "full_signature": "@Nonnull public List<AuditEvent> getEventsForUser(String userId)", "class_method_signature": "AuditScriptService.getEventsForUser(String userId)", "testcase": false, "constructor": false}, {"identifier": "getEventsForUser", "parameters": "(String userId, String ip)", "modifiers": "@Nonnull public", "return": "List<AuditEvent>", "signature": "List<AuditEvent> getEventsForUser(String userId, String ip)", "full_signature": "@Nonnull public List<AuditEvent> getEventsForUser(String userId, String ip)", "class_method_signature": "AuditScriptService.getEventsForUser(String userId, String ip)", "testcase": false, "constructor": false}, {"identifier": "getEvents", "parameters": "(int start, int number, String action, String userId, String ip, String entityId,\n        String fromTime, String toTime)", "modifiers": "@Nonnull @SuppressWarnings(\"checkstyle:ParameterNumber\") public", "return": "List<AuditEvent>", "signature": "List<AuditEvent> getEvents(int start, int number, String action, String userId, String ip, String entityId,\n        String fromTime, String toTime)", "full_signature": "@Nonnull @SuppressWarnings(\"checkstyle:ParameterNumber\") public List<AuditEvent> getEvents(int start, int number, String action, String userId, String ip, String entityId,\n        String fromTime, String toTime)", "class_method_signature": "AuditScriptService.getEvents(int start, int number, String action, String userId, String ip, String entityId,\n        String fromTime, String toTime)", "testcase": false, "constructor": false}, {"identifier": "countEvents", "parameters": "(String action, String userId, String ip, String entityId, String fromTime, String toTime)", "modifiers": "public", "return": "long", "signature": "long countEvents(String action, String userId, String ip, String entityId, String fromTime, String toTime)", "full_signature": "public long countEvents(String action, String userId, String ip, String entityId, String fromTime, String toTime)", "class_method_signature": "AuditScriptService.countEvents(String action, String userId, String ip, String entityId, String fromTime, String toTime)", "testcase": false, "constructor": false}], "file": "components/security/audit/backend/src/main/java/org/phenotips/security/audit/script/AuditScriptService.java"}, "focal_method": {"identifier": "getEventsForEntity", "parameters": "(DocumentReference entity)", "modifiers": "@Nonnull public", "return": "List<AuditEvent>", "body": "@Nonnull\n    public List<AuditEvent> getEventsForEntity(DocumentReference entity)\n    {\n        if (this.auth.hasAccess(this.users.getCurrentUser(), Right.EDIT, entity)) {\n            return this.store.getEventsForEntity(entity);\n        }\n        return Collections.emptyList();\n    }", "signature": "List<AuditEvent> getEventsForEntity(DocumentReference entity)", "full_signature": "@Nonnull public List<AuditEvent> getEventsForEntity(DocumentReference entity)", "class_method_signature": "AuditScriptService.getEventsForEntity(DocumentReference entity)", "testcase": false, "constructor": false, "invocations": ["hasAccess", "getCurrentUser", "getEventsForEntity", "emptyList"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}