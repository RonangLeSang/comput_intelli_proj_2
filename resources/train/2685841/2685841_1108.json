{"test_class": {"identifier": "PatientFamilyLockModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<LockModule> mocker =\n        new MockitoComponentMockingRule<>(PatientFamilyLockModule.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<LockModule>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(PatientFamilyLockModule.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "private DocumentReference currentDocumentReference = new DocumentReference(\"xwiki\", \"data\", \"P01\");", "modifier": "private", "type": "DocumentReference", "declarator": "currentDocumentReference = new DocumentReference(\"xwiki\", \"data\", \"P01\")", "var_name": "currentDocumentReference"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private XWikiDocument patientDoc;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "patientDoc", "var_name": "patientDoc"}, {"original_string": "private DocumentReference familyDocumentReference = new DocumentReference(\"xwiki\", \"Family\", \"F01\");", "modifier": "private", "type": "DocumentReference", "declarator": "familyDocumentReference = new DocumentReference(\"xwiki\", \"Family\", \"F01\")", "var_name": "familyDocumentReference"}, {"original_string": "@Mock\n    private Family family;", "modifier": "@Mock\n    private", "type": "Family", "declarator": "family", "var_name": "family"}, {"original_string": "@Mock\n    private XWikiDocument familyDoc;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "familyDoc", "var_name": "familyDoc"}, {"original_string": "@Mock\n    private XWikiLock lock;", "modifier": "@Mock\n    private", "type": "XWikiLock", "declarator": "lock", "var_name": "lock"}, {"original_string": "@Mock\n    private Date lockDate;", "modifier": "@Mock\n    private", "type": "Date", "declarator": "lockDate", "var_name": "lockDate"}, {"original_string": "@Mock\n    private User lockingUser;", "modifier": "@Mock\n    private", "type": "User", "declarator": "lockingUser", "var_name": "lockingUser"}, {"original_string": "@Mock\n    private User otherUser;", "modifier": "@Mock\n    private", "type": "User", "declarator": "otherUser", "var_name": "otherUser"}, {"original_string": "private FamilyRepository familyRepository;", "modifier": "private", "type": "FamilyRepository", "declarator": "familyRepository", "var_name": "familyRepository"}, {"original_string": "private PatientRepository patientRepository;", "modifier": "private", "type": "PatientRepository", "declarator": "patientRepository", "var_name": "patientRepository"}, {"original_string": "private UserManager userManager;", "modifier": "private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}], "file": "components/family-studies/api/src/test/java/org/phenotips/studies/family/internal/PatientFamilyLockModuleTest.java"}, "test_case": {"identifier": "noLockForNonPatientDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void noLockForNonPatientDocument() throws ComponentLookupException, XWikiException\n    {\n        when(this.patientRepository.get(this.currentDocumentReference.getName())).thenReturn(null);\n\n        Assert.assertNull(this.mocker.getComponentUnderTest().getLock(this.currentDocumentReference));\n    }", "signature": "void noLockForNonPatientDocument()", "full_signature": "@Test public void noLockForNonPatientDocument()", "class_method_signature": "PatientFamilyLockModuleTest.noLockForNonPatientDocument()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "getName", "assertNull", "getLock", "getComponentUnderTest"]}, "focal_class": {"identifier": "PatientFamilyLockModule", "superclass": "", "interfaces": "implements LockModule", "fields": [{"original_string": "@Inject\n    private Provider<XWikiContext> provider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "provider", "var_name": "provider"}, {"original_string": "@Inject\n    private UserManager userManager;", "modifier": "@Inject\n    private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "@Inject\n    private FamilyRepository familyRepository;", "modifier": "@Inject\n    private", "type": "FamilyRepository", "declarator": "familyRepository", "var_name": "familyRepository"}, {"original_string": "@Inject\n    private PatientRepository patientRepository;", "modifier": "@Inject\n    private", "type": "PatientRepository", "declarator": "patientRepository", "var_name": "patientRepository"}, {"original_string": "@Inject\n    private TranslationManager tm;", "modifier": "@Inject\n    private", "type": "TranslationManager", "declarator": "tm", "var_name": "tm"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "PatientFamilyLockModule.getPriority()", "testcase": false, "constructor": false}, {"identifier": "getLock", "parameters": "(DocumentReference doc)", "modifiers": "@Override public", "return": "DocumentLock", "signature": "DocumentLock getLock(DocumentReference doc)", "full_signature": "@Override public DocumentLock getLock(DocumentReference doc)", "class_method_signature": "PatientFamilyLockModule.getLock(DocumentReference doc)", "testcase": false, "constructor": false}], "file": "components/family-studies/api/src/main/java/org/phenotips/studies/family/internal/PatientFamilyLockModule.java"}, "focal_method": {"identifier": "getLock", "parameters": "(DocumentReference doc)", "modifiers": "@Override public", "return": "DocumentLock", "body": "@Override\n    public DocumentLock getLock(DocumentReference doc)\n    {\n        XWikiContext context = this.provider.get();\n        XWiki xwiki = context.getWiki();\n        XWikiDocument xdoc;\n\n        try {\n            xdoc = xwiki.getDocument(doc, context);\n            if (xdoc == null) {\n                return null;\n            }\n\n            String documentId = xdoc.getDocumentReference().getName();\n            Patient patient = this.patientRepository.get(documentId);\n            if (patient == null) {\n                return null;\n            }\n\n            Family family = this.familyRepository.getFamilyForPatient(patient);\n            if (family == null) {\n                return null;\n            }\n\n            DocumentReference familyDoc = family.getDocumentReference();\n            XWikiDocument famDoc = xwiki.getDocument(familyDoc, context);\n            XWikiLock xlock = famDoc.getLock(context);\n            if (xlock != null) {\n                Set<String> actions = Collections.singleton(\"edit\");\n                User user = this.userManager.getUser(xlock.getUserName());\n                return new DocumentLock(user, xlock.getDate(),\n                    this.tm.translate(\"family.locks.patientFamilyInUse\", user.getName()), actions, false);\n            }\n        } catch (XWikiException e) {\n            this.logger.error(\"Failed to access the document lock: {}\", e.getMessage(), e);\n        }\n        return null;\n    }", "signature": "DocumentLock getLock(DocumentReference doc)", "full_signature": "@Override public DocumentLock getLock(DocumentReference doc)", "class_method_signature": "PatientFamilyLockModule.getLock(DocumentReference doc)", "testcase": false, "constructor": false, "invocations": ["get", "getWiki", "getDocument", "getName", "getDocumentReference", "get", "getFamilyForPatient", "getDocumentReference", "getDocument", "getLock", "singleton", "getUser", "getUserName", "getDate", "translate", "getName", "error", "getMessage"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}