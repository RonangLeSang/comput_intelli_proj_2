{"test_class": {"identifier": "DefaultConsentAuthorizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FIELD_A_LABEL = \"fieldA\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_A_LABEL = \"fieldA\"", "var_name": "FIELD_A_LABEL"}, {"original_string": "private static final String FIELD_B_LABEL = \"fieldB\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_B_LABEL = \"fieldB\"", "var_name": "FIELD_B_LABEL"}, {"original_string": "private static final String FIELD_C_LABEL = \"fieldC\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_C_LABEL = \"fieldC\"", "var_name": "FIELD_C_LABEL"}, {"original_string": "private static final String FIELD_D_LABEL = \"fieldD\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_D_LABEL = \"fieldD\"", "var_name": "FIELD_D_LABEL"}, {"original_string": "private static final String CONSENT_A_LABEL = \"consentA\";", "modifier": "private static final", "type": "String", "declarator": "CONSENT_A_LABEL = \"consentA\"", "var_name": "CONSENT_A_LABEL"}, {"original_string": "private static final String CONSENT_B_LABEL = \"consentB\";", "modifier": "private static final", "type": "String", "declarator": "CONSENT_B_LABEL = \"consentB\"", "var_name": "CONSENT_B_LABEL"}, {"original_string": "@Rule\n    public final MockitoComponentMockingRule<ConsentAuthorizer> mocker =\n        new MockitoComponentMockingRule<>(DefaultConsentAuthorizer.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<ConsentAuthorizer>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DefaultConsentAuthorizer.class)", "var_name": "mocker"}, {"original_string": "private ConsentAuthorizer component;", "modifier": "private", "type": "ConsentAuthorizer", "declarator": "component", "var_name": "component"}, {"original_string": "private ConsentManager consentManager;", "modifier": "private", "type": "ConsentManager", "declarator": "consentManager", "var_name": "consentManager"}, {"original_string": "private Patient patient;", "modifier": "private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "private Consent consentA;", "modifier": "private", "type": "Consent", "declarator": "consentA", "var_name": "consentA"}, {"original_string": "private Consent consentB;", "modifier": "private", "type": "Consent", "declarator": "consentB", "var_name": "consentB"}], "file": "components/consents/api/src/test/java/org/phenotips/consents/internal/DefaultConsentAuthorizerTest.java"}, "test_case": {"identifier": "isElementConsentedConsentsAffectSomeFieldsButNotElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isElementConsentedConsentsAffectSomeFieldsButNotElement()\n    {\n        final UIExtension extension = mock(UIExtension.class);\n        when(extension.getId()).thenReturn(FIELD_D_LABEL);\n\n        final RecordElement element = mock(RecordElement.class);\n        when(element.getExtension()).thenReturn(extension);\n\n        final Set<Consent> missingConsents = new HashSet<>();\n        missingConsents.add(this.consentA);\n        missingConsents.add(this.consentB);\n\n        when(this.consentManager.getMissingConsentsForPatient(this.patient)).thenReturn(missingConsents);\n        when(this.consentA.affectsAllFields()).thenReturn(false);\n        when(this.consentB.affectsAllFields()).thenReturn(false);\n        when(this.consentA.affectsSomeFields()).thenReturn(true);\n        when(this.consentB.affectsSomeFields()).thenReturn(true);\n\n        when(this.consentA.getFields()).thenReturn(Arrays.asList(FIELD_A_LABEL, FIELD_B_LABEL));\n        when(this.consentB.getFields()).thenReturn(Collections.singletonList(FIELD_C_LABEL));\n\n        final boolean isElementConsented = this.component.isElementConsented(element, this.patient);\n        Assert.assertTrue(isElementConsented);\n    }", "signature": "void isElementConsentedConsentsAffectSomeFieldsButNotElement()", "full_signature": "@Test public void isElementConsentedConsentsAffectSomeFieldsButNotElement()", "class_method_signature": "DefaultConsentAuthorizerTest.isElementConsentedConsentsAffectSomeFieldsButNotElement()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "mock", "thenReturn", "when", "getExtension", "add", "add", "thenReturn", "when", "getMissingConsentsForPatient", "thenReturn", "when", "affectsAllFields", "thenReturn", "when", "affectsAllFields", "thenReturn", "when", "affectsSomeFields", "thenReturn", "when", "affectsSomeFields", "thenReturn", "when", "getFields", "asList", "thenReturn", "when", "getFields", "singletonList", "isElementConsented", "assertTrue"]}, "focal_class": {"identifier": "DefaultConsentAuthorizer", "superclass": "", "interfaces": "implements ConsentAuthorizer", "fields": [{"original_string": "@Inject\n    private ConsentManager consentManager;", "modifier": "@Inject\n    private", "type": "ConsentManager", "declarator": "consentManager", "var_name": "consentManager"}], "methods": [{"identifier": "consentsGloballyEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean consentsGloballyEnabled()", "full_signature": "@Override public boolean consentsGloballyEnabled()", "class_method_signature": "DefaultConsentAuthorizer.consentsGloballyEnabled()", "testcase": false, "constructor": false}, {"identifier": "filterForm", "parameters": "(List<RecordElement> elements, Patient patient)", "modifiers": "@Override public", "return": "List<RecordElement>", "signature": "List<RecordElement> filterForm(List<RecordElement> elements, Patient patient)", "full_signature": "@Override public List<RecordElement> filterForm(List<RecordElement> elements, Patient patient)", "class_method_signature": "DefaultConsentAuthorizer.filterForm(List<RecordElement> elements, Patient patient)", "testcase": false, "constructor": false}, {"identifier": "authorizeInteraction", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean authorizeInteraction(Patient patient)", "full_signature": "@Override public boolean authorizeInteraction(Patient patient)", "class_method_signature": "DefaultConsentAuthorizer.authorizeInteraction(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "authorizeInteraction", "parameters": "(Set<String> grantedConsents)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean authorizeInteraction(Set<String> grantedConsents)", "full_signature": "@Override public boolean authorizeInteraction(Set<String> grantedConsents)", "class_method_signature": "DefaultConsentAuthorizer.authorizeInteraction(Set<String> grantedConsents)", "testcase": false, "constructor": false}, {"identifier": "containsRequiredConsents", "parameters": "(@Nonnull Set<Consent> missingConsents)", "modifiers": "private", "return": "boolean", "signature": "boolean containsRequiredConsents(@Nonnull Set<Consent> missingConsents)", "full_signature": "private boolean containsRequiredConsents(@Nonnull Set<Consent> missingConsents)", "class_method_signature": "DefaultConsentAuthorizer.containsRequiredConsents(@Nonnull Set<Consent> missingConsents)", "testcase": false, "constructor": false}, {"identifier": "isElementConsented", "parameters": "(RecordElement element, Patient patient)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isElementConsented(RecordElement element, Patient patient)", "full_signature": "@Override public boolean isElementConsented(RecordElement element, Patient patient)", "class_method_signature": "DefaultConsentAuthorizer.isElementConsented(RecordElement element, Patient patient)", "testcase": false, "constructor": false}, {"identifier": "isElementEnabled", "parameters": "(@Nonnull RecordElement element, @Nonnull Set<String> nonConsentedFields)", "modifiers": "private", "return": "boolean", "signature": "boolean isElementEnabled(@Nonnull RecordElement element, @Nonnull Set<String> nonConsentedFields)", "full_signature": "private boolean isElementEnabled(@Nonnull RecordElement element, @Nonnull Set<String> nonConsentedFields)", "class_method_signature": "DefaultConsentAuthorizer.isElementEnabled(@Nonnull RecordElement element, @Nonnull Set<String> nonConsentedFields)", "testcase": false, "constructor": false}, {"identifier": "getNonConsentedFieldSet", "parameters": "(@Nonnull Set<Consent> missingConsents)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getNonConsentedFieldSet(@Nonnull Set<Consent> missingConsents)", "full_signature": "private Set<String> getNonConsentedFieldSet(@Nonnull Set<Consent> missingConsents)", "class_method_signature": "DefaultConsentAuthorizer.getNonConsentedFieldSet(@Nonnull Set<Consent> missingConsents)", "testcase": false, "constructor": false}], "file": "components/consents/api/src/main/java/org/phenotips/consents/internal/DefaultConsentAuthorizer.java"}, "focal_method": {"identifier": "isElementConsented", "parameters": "(RecordElement element, Patient patient)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isElementConsented(RecordElement element, Patient patient)\n    {\n        Set<Consent> missingConsents = this.consentManager.getMissingConsentsForPatient(patient);\n        return this.isElementEnabled(element, this.getNonConsentedFieldSet(missingConsents));\n    }", "signature": "boolean isElementConsented(RecordElement element, Patient patient)", "full_signature": "@Override public boolean isElementConsented(RecordElement element, Patient patient)", "class_method_signature": "DefaultConsentAuthorizer.isElementConsented(RecordElement element, Patient patient)", "testcase": false, "constructor": false, "invocations": ["getMissingConsentsForPatient", "isElementEnabled", "getNonConsentedFieldSet"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}