{"test_class": {"identifier": "DefaultVocabularyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CHEMICAL_CATEGORY = \"chemical\";", "modifier": "private static final", "type": "String", "declarator": "CHEMICAL_CATEGORY = \"chemical\"", "var_name": "CHEMICAL_CATEGORY"}, {"original_string": "private static final String ETHNICITY_CATEGORY = \"ethnicity\";", "modifier": "private static final", "type": "String", "declarator": "ETHNICITY_CATEGORY = \"ethnicity\"", "var_name": "ETHNICITY_CATEGORY"}, {"original_string": "private static final String GENE_CATEGORY = \"gene\";", "modifier": "private static final", "type": "String", "declarator": "GENE_CATEGORY = \"gene\"", "var_name": "GENE_CATEGORY"}, {"original_string": "private static final String PHENOTYPE_CATEGORY = \"phenotype\";", "modifier": "private static final", "type": "String", "declarator": "PHENOTYPE_CATEGORY = \"phenotype\"", "var_name": "PHENOTYPE_CATEGORY"}, {"original_string": "private static final String PHENOTYPE_Q_CATEGORY = \"phenotype-qualifier\";", "modifier": "private static final", "type": "String", "declarator": "PHENOTYPE_Q_CATEGORY = \"phenotype-qualifier\"", "var_name": "PHENOTYPE_Q_CATEGORY"}, {"original_string": "private static final String DISEASE_CATEGORY = \"disease\";", "modifier": "private static final", "type": "String", "declarator": "DISEASE_CATEGORY = \"disease\"", "var_name": "DISEASE_CATEGORY"}, {"original_string": "private static final String HGNC_LABEL = \"hgnc\";", "modifier": "private static final", "type": "String", "declarator": "HGNC_LABEL = \"hgnc\"", "var_name": "HGNC_LABEL"}, {"original_string": "private static final String HGNC_CAPS_LABEL = \"HGNC\";", "modifier": "private static final", "type": "String", "declarator": "HGNC_CAPS_LABEL = \"HGNC\"", "var_name": "HGNC_CAPS_LABEL"}, {"original_string": "private static final String CHEBI_LABEL = \"chebi\";", "modifier": "private static final", "type": "String", "declarator": "CHEBI_LABEL = \"chebi\"", "var_name": "CHEBI_LABEL"}, {"original_string": "private static final String HPO_LABEL = \"hpo\";", "modifier": "private static final", "type": "String", "declarator": "HPO_LABEL = \"hpo\"", "var_name": "HPO_LABEL"}, {"original_string": "private static final String ETHNICITY_LABEL = ETHNICITY_CATEGORY;", "modifier": "private static final", "type": "String", "declarator": "ETHNICITY_LABEL = ETHNICITY_CATEGORY", "var_name": "ETHNICITY_LABEL"}, {"original_string": "private static final String ETHNO_LABEL = \"ETHNO\";", "modifier": "private static final", "type": "String", "declarator": "ETHNO_LABEL = \"ETHNO\"", "var_name": "ETHNO_LABEL"}, {"original_string": "private static final String OMIM_LABEL = \"omim\";", "modifier": "private static final", "type": "String", "declarator": "OMIM_LABEL = \"omim\"", "var_name": "OMIM_LABEL"}, {"original_string": "private static final String SCORE_LABEL = \"score\";", "modifier": "private static final", "type": "String", "declarator": "SCORE_LABEL = \"score\"", "var_name": "SCORE_LABEL"}, {"original_string": "private static final String SEARCH_QUERY_ABC_LABEL = \"ABC\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_QUERY_ABC_LABEL = \"ABC\"", "var_name": "SEARCH_QUERY_ABC_LABEL"}, {"original_string": "private static final String SEARCH_QUERY_A_LABEL = \"A\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_QUERY_A_LABEL = \"A\"", "var_name": "SEARCH_QUERY_A_LABEL"}, {"original_string": "private static final String CHEBI_CAPS_LABEL = \"CHEBI\";", "modifier": "private static final", "type": "String", "declarator": "CHEBI_CAPS_LABEL = \"CHEBI\"", "var_name": "CHEBI_CAPS_LABEL"}, {"original_string": "private static final String HP_LABEL = \"HP\";", "modifier": "private static final", "type": "String", "declarator": "HP_LABEL = \"HP\"", "var_name": "HP_LABEL"}, {"original_string": "private static final String MIM_LABEL = \"MIM\";", "modifier": "private static final", "type": "String", "declarator": "MIM_LABEL = \"MIM\"", "var_name": "MIM_LABEL"}, {"original_string": "@Rule\n    public final MockitoComponentMockingRule<VocabularyManager> mocker =\n        new MockitoComponentMockingRule<>(DefaultVocabularyManager.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<VocabularyManager>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DefaultVocabularyManager.class)", "var_name": "mocker"}, {"original_string": "private VocabularyManager vocabularyManager;", "modifier": "private", "type": "VocabularyManager", "declarator": "vocabularyManager", "var_name": "vocabularyManager"}, {"original_string": "private Map<String, Vocabulary> vocabularies;", "modifier": "private", "type": "Map<String, Vocabulary>", "declarator": "vocabularies", "var_name": "vocabularies"}, {"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private Vocabulary hgnc;", "modifier": "@Mock\n    private", "type": "Vocabulary", "declarator": "hgnc", "var_name": "hgnc"}, {"original_string": "@Mock\n    private Vocabulary chebi;", "modifier": "@Mock\n    private", "type": "Vocabulary", "declarator": "chebi", "var_name": "chebi"}, {"original_string": "@Mock\n    private Vocabulary hpo;", "modifier": "@Mock\n    private", "type": "Vocabulary", "declarator": "hpo", "var_name": "hpo"}, {"original_string": "@Mock\n    private Vocabulary ethnicity;", "modifier": "@Mock\n    private", "type": "Vocabulary", "declarator": "ethnicity", "var_name": "ethnicity"}, {"original_string": "@Mock\n    private Vocabulary omim;", "modifier": "@Mock\n    private", "type": "Vocabulary", "declarator": "omim", "var_name": "omim"}, {"original_string": "@Mock\n    private VocabularyTerm result1;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "result1", "var_name": "result1"}, {"original_string": "@Mock\n    private VocabularyTerm result2;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "result2", "var_name": "result2"}, {"original_string": "@Mock\n    private VocabularyTerm result3;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "result3", "var_name": "result3"}, {"original_string": "@Mock\n    private VocabularyTerm result4;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "result4", "var_name": "result4"}, {"original_string": "@Mock\n    private VocabularyTerm result5;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "result5", "var_name": "result5"}, {"original_string": "@Mock\n    private VocabularyTerm result6;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "result6", "var_name": "result6"}], "file": "components/vocabularies/api/src/test/java/org/phenotips/vocabulary/internal/DefaultVocabularyManagerTest.java"}, "test_case": {"identifier": "searchReturnsCorrectSortedListOfTermsIfOneVocabHasTermsWithNullForScore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void searchReturnsCorrectSortedListOfTermsIfOneVocabHasTermsWithNullForScore()\n    {\n        when(this.result1.get(SCORE_LABEL)).thenReturn(null);\n        when(this.result2.get(SCORE_LABEL)).thenReturn(null);\n        when(this.result3.get(SCORE_LABEL)).thenReturn(null);\n        when(this.result4.get(SCORE_LABEL)).thenReturn((float) 3.2353);\n        when(this.result5.get(SCORE_LABEL)).thenReturn((float) 3.27893);\n        when(this.result6.get(SCORE_LABEL)).thenReturn((float) 1.28793);\n\n        when(this.hgnc.search(SEARCH_QUERY_A_LABEL, GENE_CATEGORY, 3, null, null)).thenReturn(\n            Arrays.asList(this.result1, this.result2, this.result3));\n        when(this.omim.search(SEARCH_QUERY_A_LABEL, GENE_CATEGORY, 3, null, null)).thenReturn(\n            Arrays.asList(this.result4, this.result5, this.result6));\n        final List<VocabularyTerm> terms = this.vocabularyManager.search(SEARCH_QUERY_A_LABEL, GENE_CATEGORY, 3);\n        Assert.assertEquals(3, terms.size());\n        Assert.assertEquals(this.result5, terms.get(0));\n        Assert.assertEquals(this.result4, terms.get(1));\n        Assert.assertEquals(this.result6, terms.get(2));\n    }", "signature": "void searchReturnsCorrectSortedListOfTermsIfOneVocabHasTermsWithNullForScore()", "full_signature": "@Test public void searchReturnsCorrectSortedListOfTermsIfOneVocabHasTermsWithNullForScore()", "class_method_signature": "DefaultVocabularyManagerTest.searchReturnsCorrectSortedListOfTermsIfOneVocabHasTermsWithNullForScore()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "thenReturn", "when", "get", "thenReturn", "when", "get", "thenReturn", "when", "get", "thenReturn", "when", "get", "thenReturn", "when", "get", "thenReturn", "when", "search", "asList", "thenReturn", "when", "search", "asList", "search", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "DefaultVocabularyManager", "superclass": "", "interfaces": "implements VocabularyManager", "fields": [{"original_string": "private static final String SCORE_LABEL = \"score\";", "modifier": "private static final", "type": "String", "declarator": "SCORE_LABEL = \"score\"", "var_name": "SCORE_LABEL"}, {"original_string": "@Inject\n    private Provider<Map<String, Vocabulary>> vocabularies;", "modifier": "@Inject\n    private", "type": "Provider<Map<String, Vocabulary>>", "declarator": "vocabularies", "var_name": "vocabularies"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "constructVocabulariesByAlias", "parameters": "()", "modifiers": "private", "return": "Map<String, Vocabulary>", "signature": "Map<String, Vocabulary> constructVocabulariesByAlias()", "full_signature": "private Map<String, Vocabulary> constructVocabulariesByAlias()", "class_method_signature": "DefaultVocabularyManager.constructVocabulariesByAlias()", "testcase": false, "constructor": false}, {"identifier": "constructVocabulariesByCategory", "parameters": "()", "modifiers": "private", "return": "Map<String, Set<Vocabulary>>", "signature": "Map<String, Set<Vocabulary>> constructVocabulariesByCategory()", "full_signature": "private Map<String, Set<Vocabulary>> constructVocabulariesByCategory()", "class_method_signature": "DefaultVocabularyManager.constructVocabulariesByCategory()", "testcase": false, "constructor": false}, {"identifier": "generateVocabSetForCategory", "parameters": "(@Nonnull final String category,\n        @Nonnull Map<String, Set<Vocabulary>> categorizedVocabularies)", "modifiers": "private", "return": "Set<Vocabulary>", "signature": "Set<Vocabulary> generateVocabSetForCategory(@Nonnull final String category,\n        @Nonnull Map<String, Set<Vocabulary>> categorizedVocabularies)", "full_signature": "private Set<Vocabulary> generateVocabSetForCategory(@Nonnull final String category,\n        @Nonnull Map<String, Set<Vocabulary>> categorizedVocabularies)", "class_method_signature": "DefaultVocabularyManager.generateVocabSetForCategory(@Nonnull final String category,\n        @Nonnull Map<String, Set<Vocabulary>> categorizedVocabularies)", "testcase": false, "constructor": false}, {"identifier": "resolveTerm", "parameters": "(String termId)", "modifiers": "@Override public", "return": "VocabularyTerm", "signature": "VocabularyTerm resolveTerm(String termId)", "full_signature": "@Override public VocabularyTerm resolveTerm(String termId)", "class_method_signature": "DefaultVocabularyManager.resolveTerm(String termId)", "testcase": false, "constructor": false}, {"identifier": "getVocabulary", "parameters": "(String vocabularyId)", "modifiers": "@Override public", "return": "Vocabulary", "signature": "Vocabulary getVocabulary(String vocabularyId)", "full_signature": "@Override public Vocabulary getVocabulary(String vocabularyId)", "class_method_signature": "DefaultVocabularyManager.getVocabulary(String vocabularyId)", "testcase": false, "constructor": false}, {"identifier": "getVocabularies", "parameters": "(final String category)", "modifiers": "@Override public", "return": "Set<Vocabulary>", "signature": "Set<Vocabulary> getVocabularies(final String category)", "full_signature": "@Override public Set<Vocabulary> getVocabularies(final String category)", "class_method_signature": "DefaultVocabularyManager.getVocabularies(final String category)", "testcase": false, "constructor": false}, {"identifier": "getAvailableVocabularies", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAvailableVocabularies()", "full_signature": "@Override public List<String> getAvailableVocabularies()", "class_method_signature": "DefaultVocabularyManager.getAvailableVocabularies()", "testcase": false, "constructor": false}, {"identifier": "getAvailableCategories", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAvailableCategories()", "full_signature": "@Override public List<String> getAvailableCategories()", "class_method_signature": "DefaultVocabularyManager.getAvailableCategories()", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "modifiers": "@Override public", "return": "List<VocabularyTerm>", "signature": "List<VocabularyTerm> search(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "full_signature": "@Override public List<VocabularyTerm> search(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "class_method_signature": "DefaultVocabularyManager.search(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "testcase": false, "constructor": false}, {"identifier": "hasVocabulary", "parameters": "(final String vocabulary)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasVocabulary(final String vocabulary)", "full_signature": "@Override public boolean hasVocabulary(final String vocabulary)", "class_method_signature": "DefaultVocabularyManager.hasVocabulary(final String vocabulary)", "testcase": false, "constructor": false}, {"identifier": "hasCategory", "parameters": "(final String category)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasCategory(final String category)", "full_signature": "@Override public boolean hasCategory(final String category)", "class_method_signature": "DefaultVocabularyManager.hasCategory(final String category)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(@Nonnull final String input, final int maxResults,\n        @Nonnull final String category, @Nonnull final Set<Vocabulary> categorizedVocabularies)", "modifiers": "private", "return": "List<VocabularyTerm>", "signature": "List<VocabularyTerm> search(@Nonnull final String input, final int maxResults,\n        @Nonnull final String category, @Nonnull final Set<Vocabulary> categorizedVocabularies)", "full_signature": "private List<VocabularyTerm> search(@Nonnull final String input, final int maxResults,\n        @Nonnull final String category, @Nonnull final Set<Vocabulary> categorizedVocabularies)", "class_method_signature": "DefaultVocabularyManager.search(@Nonnull final String input, final int maxResults,\n        @Nonnull final String category, @Nonnull final Set<Vocabulary> categorizedVocabularies)", "testcase": false, "constructor": false}, {"identifier": "sortTermsByScore", "parameters": "(@Nonnull final List<VocabularyTerm> results)", "modifiers": "private", "return": "void", "signature": "void sortTermsByScore(@Nonnull final List<VocabularyTerm> results)", "full_signature": "private void sortTermsByScore(@Nonnull final List<VocabularyTerm> results)", "class_method_signature": "DefaultVocabularyManager.sortTermsByScore(@Nonnull final List<VocabularyTerm> results)", "testcase": false, "constructor": false}, {"identifier": "compareScores", "parameters": "(@Nonnull final VocabularyTerm o1, @Nonnull final VocabularyTerm o2)", "modifiers": "private", "return": "int", "signature": "int compareScores(@Nonnull final VocabularyTerm o1, @Nonnull final VocabularyTerm o2)", "full_signature": "private int compareScores(@Nonnull final VocabularyTerm o1, @Nonnull final VocabularyTerm o2)", "class_method_signature": "DefaultVocabularyManager.compareScores(@Nonnull final VocabularyTerm o1, @Nonnull final VocabularyTerm o2)", "testcase": false, "constructor": false}, {"identifier": "getVocabularyForTerm", "parameters": "(String termId)", "modifiers": "private", "return": "Vocabulary", "signature": "Vocabulary getVocabularyForTerm(String termId)", "full_signature": "private Vocabulary getVocabularyForTerm(String termId)", "class_method_signature": "DefaultVocabularyManager.getVocabularyForTerm(String termId)", "testcase": false, "constructor": false}], "file": "components/vocabularies/api/src/main/java/org/phenotips/vocabulary/internal/DefaultVocabularyManager.java"}, "focal_method": {"identifier": "search", "parameters": "(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "modifiers": "@Override public", "return": "List<VocabularyTerm>", "body": "@Override\n    public List<VocabularyTerm> search(@Nullable final String input, @Nullable final String category,\n        final int maxResults)\n    {\n        // If either the category or the input is blank, then there is nothing to search. Return empty list.\n        if (StringUtils.isBlank(input) || StringUtils.isBlank(category)) {\n            return Collections.emptyList();\n        }\n        // Try to get the vocabularies that belong to the provided category. If none returned, return empty list.\n        final Set<Vocabulary> categorizedVocabularies = this.constructVocabulariesByCategory().get(category);\n        if (CollectionUtils.isEmpty(categorizedVocabularies)) {\n            this.logger.warn(\"No vocabularies associated with the specified category: {}\", category);\n            return Collections.emptyList();\n        }\n\n        return search(input, maxResults, category, categorizedVocabularies);\n    }", "signature": "List<VocabularyTerm> search(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "full_signature": "@Override public List<VocabularyTerm> search(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "class_method_signature": "DefaultVocabularyManager.search(@Nullable final String input, @Nullable final String category,\n        final int maxResults)", "testcase": false, "constructor": false, "invocations": ["isBlank", "isBlank", "emptyList", "get", "constructVocabulariesByCategory", "isEmpty", "warn", "emptyList", "search"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}