{"test_class": {"identifier": "VisibilityAccessAuthorizationModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<AuthorizationModule> mocker =\n        new MockitoComponentMockingRule<>(VisibilityAccessAuthorizationModule.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<AuthorizationModule>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(VisibilityAccessAuthorizationModule.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    private PrimaryEntity primaryEntity;", "modifier": "@Mock\n    private", "type": "PrimaryEntity", "declarator": "primaryEntity", "var_name": "primaryEntity"}, {"original_string": "@Mock\n    private AccessLevel noneAccessLevel;", "modifier": "@Mock\n    private", "type": "AccessLevel", "declarator": "noneAccessLevel", "var_name": "noneAccessLevel"}, {"original_string": "@Mock\n    private AccessLevel editAccessLevel;", "modifier": "@Mock\n    private", "type": "AccessLevel", "declarator": "editAccessLevel", "var_name": "editAccessLevel"}, {"original_string": "@Mock\n    private AccessLevel viewAccessLevel;", "modifier": "@Mock\n    private", "type": "AccessLevel", "declarator": "viewAccessLevel", "var_name": "viewAccessLevel"}, {"original_string": "@Mock\n    private Visibility openVisibility;", "modifier": "@Mock\n    private", "type": "Visibility", "declarator": "openVisibility", "var_name": "openVisibility"}, {"original_string": "@Mock\n    private Visibility publicVisibility;", "modifier": "@Mock\n    private", "type": "Visibility", "declarator": "publicVisibility", "var_name": "publicVisibility"}, {"original_string": "@Mock\n    private Visibility privateVisibility;", "modifier": "@Mock\n    private", "type": "Visibility", "declarator": "privateVisibility", "var_name": "privateVisibility"}, {"original_string": "private EntityVisibilityManager helper;", "modifier": "private", "type": "EntityVisibilityManager", "declarator": "helper", "var_name": "helper"}, {"original_string": "private PrimaryEntityResolver resolver;", "modifier": "private", "type": "PrimaryEntityResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private DocumentReference doc = new DocumentReference(\"xwiki\", \"data\", \"P01\");", "modifier": "private", "type": "DocumentReference", "declarator": "doc = new DocumentReference(\"xwiki\", \"data\", \"P01\")", "var_name": "doc"}], "file": "components/patient-access-rules/api/src/test/java/org/phenotips/data/permissions/internal/VisibilityAccessAuthorizationModuleTest.java"}, "test_case": {"identifier": "publicVisibilityDoesntAllowEdit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void publicVisibilityDoesntAllowEdit() throws ComponentLookupException\n    {\n        when(this.helper.getVisibility(this.primaryEntity)).thenReturn(this.publicVisibility);\n        Assert.assertNull(this.mocker.getComponentUnderTest().hasAccess(this.user, Right.EDIT, this.doc));\n    }", "signature": "void publicVisibilityDoesntAllowEdit()", "full_signature": "@Test public void publicVisibilityDoesntAllowEdit()", "class_method_signature": "VisibilityAccessAuthorizationModuleTest.publicVisibilityDoesntAllowEdit()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getVisibility", "assertNull", "hasAccess", "getComponentUnderTest"]}, "focal_class": {"identifier": "VisibilityAccessAuthorizationModule", "superclass": "", "interfaces": "implements AuthorizationModule", "fields": [{"original_string": "@Inject\n    private PrimaryEntityResolver resolver;", "modifier": "@Inject\n    private", "type": "PrimaryEntityResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Inject\n    private EntityVisibilityManager helper;", "modifier": "@Inject\n    private", "type": "EntityVisibilityManager", "declarator": "helper", "var_name": "helper"}], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "VisibilityAccessAuthorizationModule.getPriority()", "testcase": false, "constructor": false}, {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "VisibilityAccessAuthorizationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false}], "file": "components/patient-access-rules/api/src/main/java/org/phenotips/data/permissions/internal/VisibilityAccessAuthorizationModule.java"}, "focal_method": {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n    public Boolean hasAccess(User user, Right access, EntityReference entity)\n    {\n        if (!ObjectUtils.allNotNull(access, entity) || access.getTargetedEntityType() == null\n            || !access.getTargetedEntityType().contains(EntityType.DOCUMENT)) {\n            return null;\n        }\n\n        // This converts the document to an entity.\n        PrimaryEntity primaryEntity = this.resolver.resolveEntity(entity.toString());\n        if (primaryEntity == null) {\n            return null;\n        }\n\n        Visibility visibility = this.helper.getVisibility(primaryEntity);\n        if (visibility == null) {\n            return null;\n        }\n\n        // Checks if the visibility of Patient Record and the access rights\n        Right grantedRight = visibility.getDefaultAccessLevel().getGrantedRight();\n        if (user != null && user.getProfileDocument() != null && (grantedRight.equals(access)\n            || (grantedRight.getImpliedRights() != null && grantedRight.getImpliedRights().contains(access)))) {\n            return true;\n        }\n        return null;\n    }", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "VisibilityAccessAuthorizationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false, "invocations": ["allNotNull", "getTargetedEntityType", "contains", "getTargetedEntityType", "resolveEntity", "toString", "getVisibility", "getGrantedRight", "getDefaultAccessLevel", "getProfileDocument", "equals", "getImpliedRights", "contains", "getImpliedRights"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}