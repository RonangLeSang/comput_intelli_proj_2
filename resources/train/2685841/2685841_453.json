{"test_class": {"identifier": "DefaultVocabularyResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VERSION = \"version\";", "modifier": "private static final", "type": "String", "declarator": "VERSION = \"version\"", "var_name": "VERSION"}, {"original_string": "private static final String HPO_ID = \"hpo\";", "modifier": "private static final", "type": "String", "declarator": "HPO_ID = \"hpo\"", "var_name": "HPO_ID"}, {"original_string": "private static final String HPO_VERSION = \"version_1\";", "modifier": "private static final", "type": "String", "declarator": "HPO_VERSION = \"version_1\"", "var_name": "HPO_VERSION"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<VocabularyResource> mocker =\n        new MockitoComponentMockingRule<>(DefaultVocabularyResource.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<VocabularyResource>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DefaultVocabularyResource.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private UriInfo uriInfo;", "modifier": "@Mock\n    private", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    private Vocabulary hpoVocab;", "modifier": "@Mock\n    private", "type": "Vocabulary", "declarator": "hpoVocab", "var_name": "hpoVocab"}, {"original_string": "@Mock\n    private org.phenotips.vocabularies.rest.model.Vocabulary hpoRestVocab;", "modifier": "@Mock\n    private", "type": "org.phenotips.vocabularies.rest.model.Vocabulary", "declarator": "hpoRestVocab", "var_name": "hpoRestVocab"}, {"original_string": "private VocabularyManager vm;", "modifier": "private", "type": "VocabularyManager", "declarator": "vm", "var_name": "vm"}, {"original_string": "private AuthorizationService authorizationService;", "modifier": "private", "type": "AuthorizationService", "declarator": "authorizationService", "var_name": "authorizationService"}, {"original_string": "private VocabularyResource component;", "modifier": "private", "type": "VocabularyResource", "declarator": "component", "var_name": "component"}], "file": "components/vocabularies/rest/src/test/java/org/phenotips/vocabularies/rest/internal/DefaultVocabularyResourceTest.java"}, "test_case": {"identifier": "reindexIsNotSupported", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reindexIsNotSupported()\n    {\n        when(this.hpoVocab.reindex(null)).thenThrow(new UnsupportedOperationException());\n        final Response response = this.component.reindex(HPO_ID, null);\n        Assert.assertEquals(Response.Status.SERVICE_UNAVAILABLE.getStatusCode(), response.getStatus());\n    }", "signature": "void reindexIsNotSupported()", "full_signature": "@Test public void reindexIsNotSupported()", "class_method_signature": "DefaultVocabularyResourceTest.reindexIsNotSupported()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "reindex", "reindex", "assertEquals", "getStatusCode", "getStatus"]}, "focal_class": {"identifier": "DefaultVocabularyResource", "superclass": "extends XWikiResource", "interfaces": "implements VocabularyResource", "fields": [{"original_string": "private static final String VERSION = \"version\";", "modifier": "private static final", "type": "String", "declarator": "VERSION = \"version\"", "var_name": "VERSION"}, {"original_string": "@Inject\n    private VocabularyManager vm;", "modifier": "@Inject\n    private", "type": "VocabularyManager", "declarator": "vm", "var_name": "vm"}, {"original_string": "@Inject\n    private DomainObjectFactory objectFactory;", "modifier": "@Inject\n    private", "type": "DomainObjectFactory", "declarator": "objectFactory", "var_name": "objectFactory"}, {"original_string": "@Inject\n    private AuthorizationService authorizationService;", "modifier": "@Inject\n    private", "type": "AuthorizationService", "declarator": "authorizationService", "var_name": "authorizationService"}, {"original_string": "@Inject\n    private UserManager users;", "modifier": "@Inject\n    private", "type": "UserManager", "declarator": "users", "var_name": "users"}, {"original_string": "@Inject\n    @Named(\"default\")\n    private DocumentReferenceResolver<EntityReference> resolver;", "modifier": "@Inject\n    @Named(\"default\")\n    private", "type": "DocumentReferenceResolver<EntityReference>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Inject\n    private Provider<Autolinker> autolinker;", "modifier": "@Inject\n    private", "type": "Provider<Autolinker>", "declarator": "autolinker", "var_name": "autolinker"}], "methods": [{"identifier": "getVocabulary", "parameters": "(String vocabularyId)", "modifiers": "@Override public", "return": "org.phenotips.vocabularies.rest.model.Vocabulary", "signature": "org.phenotips.vocabularies.rest.model.Vocabulary getVocabulary(String vocabularyId)", "full_signature": "@Override public org.phenotips.vocabularies.rest.model.Vocabulary getVocabulary(String vocabularyId)", "class_method_signature": "DefaultVocabularyResource.getVocabulary(String vocabularyId)", "testcase": false, "constructor": false}, {"identifier": "getCategoriesForVocabulary", "parameters": "(final Vocabulary vocab)", "modifiers": "private", "return": "List<org.phenotips.vocabularies.rest.model.Category>", "signature": "List<org.phenotips.vocabularies.rest.model.Category> getCategoriesForVocabulary(final Vocabulary vocab)", "full_signature": "private List<org.phenotips.vocabularies.rest.model.Category> getCategoriesForVocabulary(final Vocabulary vocab)", "class_method_signature": "DefaultVocabularyResource.getCategoriesForVocabulary(final Vocabulary vocab)", "testcase": false, "constructor": false}, {"identifier": "getVocabularyLinks", "parameters": "()", "modifiers": "private", "return": "Autolinker", "signature": "Autolinker getVocabularyLinks()", "full_signature": "private Autolinker getVocabularyLinks()", "class_method_signature": "DefaultVocabularyResource.getVocabularyLinks()", "testcase": false, "constructor": false}, {"identifier": "getCategoryLinks", "parameters": "()", "modifiers": "private", "return": "Autolinker", "signature": "Autolinker getCategoryLinks()", "full_signature": "private Autolinker getCategoryLinks()", "class_method_signature": "DefaultVocabularyResource.getCategoryLinks()", "testcase": false, "constructor": false}, {"identifier": "reindex", "parameters": "(String vocabularyId, String url)", "modifiers": "@Override public", "return": "Response", "signature": "Response reindex(String vocabularyId, String url)", "full_signature": "@Override public Response reindex(String vocabularyId, String url)", "class_method_signature": "DefaultVocabularyResource.reindex(String vocabularyId, String url)", "testcase": false, "constructor": false}, {"identifier": "userIsAdmin", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean userIsAdmin()", "full_signature": "private boolean userIsAdmin()", "class_method_signature": "DefaultVocabularyResource.userIsAdmin()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String urlStr)", "modifiers": "private", "return": "boolean", "signature": "boolean exists(String urlStr)", "full_signature": "private boolean exists(String urlStr)", "class_method_signature": "DefaultVocabularyResource.exists(String urlStr)", "testcase": false, "constructor": false}], "file": "components/vocabularies/rest/src/main/java/org/phenotips/vocabularies/rest/internal/DefaultVocabularyResource.java"}, "focal_method": {"identifier": "reindex", "parameters": "(String vocabularyId, String url)", "modifiers": "@Override public", "return": "Response", "body": "@Override\n    public Response reindex(String vocabularyId, String url)\n    {\n        // Validate URL before loading any extensions\n        String[] schemes = { \"http\", \"https\", \"ftp\", \"file\" };\n        UrlValidator urlValidator = new UrlValidator(schemes);\n        if (url != null && !url.startsWith(\"jar:\") && (!urlValidator.isValid(url) || !exists(url))) {\n            return Response.status(Response.Status.BAD_REQUEST).build();\n        }\n\n        // Check permissions, the user must have admin rights on the entire wiki\n        if (!this.userIsAdmin()) {\n            return Response.status(Response.Status.FORBIDDEN).build();\n        }\n\n        Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId);\n        if (vocabulary == null) {\n            return Response.status(Response.Status.NOT_FOUND).build();\n        }\n\n        Response result;\n        try {\n            int reindexStatus = vocabulary.reindex(url);\n\n            if (reindexStatus == 0) {\n                final JSONObject responseMeta = new JSONObject().put(VERSION, vocabulary.getVersion());\n                result = Response.ok(responseMeta, MediaType.APPLICATION_JSON_TYPE).build();\n            } else if (reindexStatus == 1) {\n                result = Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();\n            } else {\n                result = Response.status(Response.Status.BAD_REQUEST).build();\n            }\n        } catch (UnsupportedOperationException e) {\n            result = Response.status(Response.Status.SERVICE_UNAVAILABLE).build();\n        }\n        return result;\n    }", "signature": "Response reindex(String vocabularyId, String url)", "full_signature": "@Override public Response reindex(String vocabularyId, String url)", "class_method_signature": "DefaultVocabularyResource.reindex(String vocabularyId, String url)", "testcase": false, "constructor": false, "invocations": ["startsWith", "isValid", "exists", "build", "status", "userIsAdmin", "build", "status", "getVocabulary", "build", "status", "reindex", "put", "getVersion", "build", "ok", "build", "status", "build", "status", "build", "status"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}