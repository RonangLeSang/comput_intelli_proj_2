{"test_class": {"identifier": "DefaultPermissionsConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<PermissionsConfiguration> mocker =\n        new MockitoComponentMockingRule<>(DefaultPermissionsConfiguration.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<PermissionsConfiguration>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DefaultPermissionsConfiguration.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private DocumentReference visibilityClassReference;", "modifier": "@Mock\n    private", "type": "DocumentReference", "declarator": "visibilityClassReference", "var_name": "visibilityClassReference"}, {"original_string": "@Mock\n    private DocumentReference visibilityConfigurationClassReference;", "modifier": "@Mock\n    private", "type": "DocumentReference", "declarator": "visibilityConfigurationClassReference", "var_name": "visibilityConfigurationClassReference"}, {"original_string": "@Mock\n    private DocumentReference preferencesDocumentReference;", "modifier": "@Mock\n    private", "type": "DocumentReference", "declarator": "preferencesDocumentReference", "var_name": "preferencesDocumentReference"}, {"original_string": "@Mock\n    private DocumentReference patientTemplateReference;", "modifier": "@Mock\n    private", "type": "DocumentReference", "declarator": "patientTemplateReference", "var_name": "patientTemplateReference"}, {"original_string": "@Mock\n    private EntityReferenceSerializer<String> serializer;", "modifier": "@Mock\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "@Mock\n    private DocumentReferenceResolver<String> resolver;", "modifier": "@Mock\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private DocumentAccessBridge dab;", "modifier": "private", "type": "DocumentAccessBridge", "declarator": "dab", "var_name": "dab"}], "file": "components/patient-access-rules/api/src/test/java/org/phenotips/data/permissions/internal/DefaultPermissionsConfigurationTest.java"}, "test_case": {"identifier": "getDefaultVisibilityWithMissingConfigurationReturnsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDefaultVisibilityWithMissingConfigurationReturnsNull() throws ComponentLookupException\n    {\n        when(this.dab.getProperty(new ObjectPropertyReference(\"visibility\",\n            new BaseObjectReference(this.visibilityClassReference, 0, this.patientTemplateReference))))\n                .thenReturn(null);\n        Assert.assertNull(this.mocker.getComponentUnderTest().getDefaultVisibility());\n    }", "signature": "void getDefaultVisibilityWithMissingConfigurationReturnsNull()", "full_signature": "@Test public void getDefaultVisibilityWithMissingConfigurationReturnsNull()", "class_method_signature": "DefaultPermissionsConfigurationTest.getDefaultVisibilityWithMissingConfigurationReturnsNull()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProperty", "assertNull", "getDefaultVisibility", "getComponentUnderTest"]}, "focal_class": {"identifier": "DefaultPermissionsConfiguration", "superclass": "", "interfaces": "implements PermissionsConfiguration", "fields": [{"original_string": "private static final EntityReference TEMPLATE_DOCUMENT =\n        new EntityReference(\"PatientTemplate\", EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE);", "modifier": "private static final", "type": "EntityReference", "declarator": "TEMPLATE_DOCUMENT =\n        new EntityReference(\"PatientTemplate\", EntityType.DOCUMENT, Constants.CODE_SPACE_REFERENCE)", "var_name": "TEMPLATE_DOCUMENT"}, {"original_string": "@Inject\n    @Named(\"current\")\n    private DocumentReferenceResolver<EntityReference> resolver;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "DocumentReferenceResolver<EntityReference>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Inject\n    private DocumentAccessBridge dab;", "modifier": "@Inject\n    private", "type": "DocumentAccessBridge", "declarator": "dab", "var_name": "dab"}], "methods": [{"identifier": "getDefaultVisibility", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultVisibility()", "full_signature": "@Override public String getDefaultVisibility()", "class_method_signature": "DefaultPermissionsConfiguration.getDefaultVisibility()", "testcase": false, "constructor": false}, {"identifier": "isVisibilityDisabled", "parameters": "(String visibilityName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVisibilityDisabled(String visibilityName)", "full_signature": "@Override public boolean isVisibilityDisabled(String visibilityName)", "class_method_signature": "DefaultPermissionsConfiguration.isVisibilityDisabled(String visibilityName)", "testcase": false, "constructor": false}], "file": "components/patient-access-rules/api/src/main/java/org/phenotips/data/permissions/internal/DefaultPermissionsConfiguration.java"}, "focal_method": {"identifier": "getDefaultVisibility", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getDefaultVisibility()\n    {\n        DocumentReference preferencesDocument = this.resolver.resolve(TEMPLATE_DOCUMENT);\n        DocumentReference configurationClassDocument = this.resolver.resolve(Visibility.CLASS_REFERENCE);\n        String visibilityName = (String) this.dab.getProperty(new ObjectPropertyReference(\"visibility\",\n            new BaseObjectReference(configurationClassDocument, 0, preferencesDocument)));\n        return StringUtils.defaultIfBlank(visibilityName, null);\n    }", "signature": "String getDefaultVisibility()", "full_signature": "@Override public String getDefaultVisibility()", "class_method_signature": "DefaultPermissionsConfiguration.getDefaultVisibility()", "testcase": false, "constructor": false, "invocations": ["resolve", "resolve", "getProperty", "defaultIfBlank"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}