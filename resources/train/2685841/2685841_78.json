{"test_class": {"identifier": "DefaultEntityVisibilityManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VISIBILITY = \"visibility\";", "modifier": "private static final", "type": "String", "declarator": "VISIBILITY = \"visibility\"", "var_name": "VISIBILITY"}, {"original_string": "private static final String PUBLIC = \"public\";", "modifier": "private static final", "type": "String", "declarator": "PUBLIC = \"public\"", "var_name": "PUBLIC"}, {"original_string": "private static final String PRIVATE = \"private\";", "modifier": "private static final", "type": "String", "declarator": "PRIVATE = \"private\"", "var_name": "PRIVATE"}, {"original_string": "private static final String HIDDEN = \"hidden\";", "modifier": "private static final", "type": "String", "declarator": "HIDDEN = \"hidden\"", "var_name": "HIDDEN"}, {"original_string": "private static final String UNKNOWN = \"unknown\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN = \"unknown\"", "var_name": "UNKNOWN"}, {"original_string": "private static final String OPEN = \"open\";", "modifier": "private static final", "type": "String", "declarator": "OPEN = \"open\"", "var_name": "OPEN"}, {"original_string": "private static final String WIKI_NAME = \"xwiki\";", "modifier": "private static final", "type": "String", "declarator": "WIKI_NAME = \"xwiki\"", "var_name": "WIKI_NAME"}, {"original_string": "private static final String DATA = \"data\";", "modifier": "private static final", "type": "String", "declarator": "DATA = \"data\"", "var_name": "DATA"}, {"original_string": "private static final String PATIENT_1_ID = \"P0000001\";", "modifier": "private static final", "type": "String", "declarator": "PATIENT_1_ID = \"P0000001\"", "var_name": "PATIENT_1_ID"}, {"original_string": "private static final String PATIENT_2_ID = \"P0000002\";", "modifier": "private static final", "type": "String", "declarator": "PATIENT_2_ID = \"P0000002\"", "var_name": "PATIENT_2_ID"}, {"original_string": "private static final String PATIENT_3_ID = \"P0000003\";", "modifier": "private static final", "type": "String", "declarator": "PATIENT_3_ID = \"P0000003\"", "var_name": "PATIENT_3_ID"}, {"original_string": "private static final String PHENOTIPS = \"PhenoTips\";", "modifier": "private static final", "type": "String", "declarator": "PHENOTIPS = \"PhenoTips\"", "var_name": "PHENOTIPS"}, {"original_string": "private static final String VISIBILITY_TITLE = \"Visibility\";", "modifier": "private static final", "type": "String", "declarator": "VISIBILITY_TITLE = \"Visibility\"", "var_name": "VISIBILITY_TITLE"}, {"original_string": "private static final AccessLevel EDIT_ACCESS = new EditAccessLevel();", "modifier": "private static final", "type": "AccessLevel", "declarator": "EDIT_ACCESS = new EditAccessLevel()", "var_name": "EDIT_ACCESS"}, {"original_string": "private static final AccessLevel VIEW_ACCESS = new ViewAccessLevel();", "modifier": "private static final", "type": "AccessLevel", "declarator": "VIEW_ACCESS = new ViewAccessLevel()", "var_name": "VIEW_ACCESS"}, {"original_string": "private static final AccessLevel NO_ACCESS = new NoAccessLevel();", "modifier": "private static final", "type": "AccessLevel", "declarator": "NO_ACCESS = new NoAccessLevel()", "var_name": "NO_ACCESS"}, {"original_string": "private static final DocumentReference PATIENT_REFERENCE_1 = new DocumentReference(WIKI_NAME, DATA, PATIENT_1_ID);", "modifier": "private static final", "type": "DocumentReference", "declarator": "PATIENT_REFERENCE_1 = new DocumentReference(WIKI_NAME, DATA, PATIENT_1_ID)", "var_name": "PATIENT_REFERENCE_1"}, {"original_string": "private static final DocumentReference PATIENT_REFERENCE_2 = new DocumentReference(WIKI_NAME, DATA, PATIENT_2_ID);", "modifier": "private static final", "type": "DocumentReference", "declarator": "PATIENT_REFERENCE_2 = new DocumentReference(WIKI_NAME, DATA, PATIENT_2_ID)", "var_name": "PATIENT_REFERENCE_2"}, {"original_string": "private static final DocumentReference PATIENT_REFERENCE_3 = new DocumentReference(WIKI_NAME, DATA, PATIENT_3_ID);", "modifier": "private static final", "type": "DocumentReference", "declarator": "PATIENT_REFERENCE_3 = new DocumentReference(WIKI_NAME, DATA, PATIENT_3_ID)", "var_name": "PATIENT_REFERENCE_3"}, {"original_string": "private static final DocumentReference VISIBILITY_CLASS_1 = new DocumentReference(WIKI_NAME, PHENOTIPS,\n        VISIBILITY_TITLE);", "modifier": "private static final", "type": "DocumentReference", "declarator": "VISIBILITY_CLASS_1 = new DocumentReference(WIKI_NAME, PHENOTIPS,\n        VISIBILITY_TITLE)", "var_name": "VISIBILITY_CLASS_1"}, {"original_string": "private static final DocumentReference VISIBILITY_CLASS_2 = new DocumentReference(WIKI_NAME, PHENOTIPS,\n        VISIBILITY_TITLE);", "modifier": "private static final", "type": "DocumentReference", "declarator": "VISIBILITY_CLASS_2 = new DocumentReference(WIKI_NAME, PHENOTIPS,\n        VISIBILITY_TITLE)", "var_name": "VISIBILITY_CLASS_2"}, {"original_string": "private static final DocumentReference VISIBILITY_CLASS_3 = new DocumentReference(WIKI_NAME, PHENOTIPS,\n        VISIBILITY_TITLE);", "modifier": "private static final", "type": "DocumentReference", "declarator": "VISIBILITY_CLASS_3 = new DocumentReference(WIKI_NAME, PHENOTIPS,\n        VISIBILITY_TITLE)", "var_name": "VISIBILITY_CLASS_3"}, {"original_string": "private static final Visibility PUBLIC_VISIBILITY = new MockVisibility(PUBLIC, 50, VIEW_ACCESS, false);", "modifier": "private static final", "type": "Visibility", "declarator": "PUBLIC_VISIBILITY = new MockVisibility(PUBLIC, 50, VIEW_ACCESS, false)", "var_name": "PUBLIC_VISIBILITY"}, {"original_string": "private static final Visibility PRIVATE_VISIBILITY = new MockVisibility(PRIVATE, 0, NO_ACCESS, false);", "modifier": "private static final", "type": "Visibility", "declarator": "PRIVATE_VISIBILITY = new MockVisibility(PRIVATE, 0, NO_ACCESS, false)", "var_name": "PRIVATE_VISIBILITY"}, {"original_string": "private static final Visibility HIDDEN_VISIBILITY = new MockVisibility(HIDDEN, -1, NO_ACCESS, false);", "modifier": "private static final", "type": "Visibility", "declarator": "HIDDEN_VISIBILITY = new MockVisibility(HIDDEN, -1, NO_ACCESS, false)", "var_name": "HIDDEN_VISIBILITY"}, {"original_string": "private static final Visibility DISABLED_OPEN_VISIBILITY = new MockVisibility(OPEN, 80, EDIT_ACCESS, true);", "modifier": "private static final", "type": "Visibility", "declarator": "DISABLED_OPEN_VISIBILITY = new MockVisibility(OPEN, 80, EDIT_ACCESS, true)", "var_name": "DISABLED_OPEN_VISIBILITY"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<EntityVisibilityManager> mocker =\n        new MockitoComponentMockingRule<>(DefaultEntityVisibilityManager.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<EntityVisibilityManager>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DefaultEntityVisibilityManager.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private Patient entity1;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "entity1", "var_name": "entity1"}, {"original_string": "@Mock\n    private Patient entity2;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "entity2", "var_name": "entity2"}, {"original_string": "@Mock\n    private Patient entity3;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "entity3", "var_name": "entity3"}, {"original_string": "@Mock\n    private XWikiDocument entityDoc1;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "entityDoc1", "var_name": "entityDoc1"}, {"original_string": "@Mock\n    private XWikiDocument entityDoc2;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "entityDoc2", "var_name": "entityDoc2"}, {"original_string": "@Mock\n    private XWikiDocument entityDoc3;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "entityDoc3", "var_name": "entityDoc3"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "private EntityVisibilityManager component;", "modifier": "private", "type": "EntityVisibilityManager", "declarator": "component", "var_name": "component"}, {"original_string": "private PermissionsConfiguration config;", "modifier": "private", "type": "PermissionsConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private ComponentManager componentManager;", "modifier": "private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "private EntityAccessHelper helper;", "modifier": "private", "type": "EntityAccessHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "private Visibility privateVisibility;", "modifier": "private", "type": "Visibility", "declarator": "privateVisibility", "var_name": "privateVisibility"}, {"original_string": "private ParameterizedType entityResolverType = new DefaultParameterizedType(null, DocumentReferenceResolver.class,\n        EntityReference.class);", "modifier": "private", "type": "ParameterizedType", "declarator": "entityResolverType = new DefaultParameterizedType(null, DocumentReferenceResolver.class,\n        EntityReference.class)", "var_name": "entityResolverType"}], "file": "components/entity-access-rules/api/src/test/java/org/phenotips/data/permissions/internal/DefaultEntityVisibilityManagerTest.java"}, "test_case": {"identifier": "setVisibility", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setVisibility() throws XWikiException\n    {\n        when(this.helper.getStringProperty(this.entityDoc1, VISIBILITY_CLASS_1, VISIBILITY)).thenReturn(PRIVATE);\n        Assert.assertTrue(this.component.setVisibility(this.entity1, PUBLIC_VISIBILITY));\n        verify(this.helper).setProperty(this.entityDoc1, VISIBILITY_CLASS_1, VISIBILITY, PUBLIC);\n        verify(this.xwiki).saveDocument(this.entityDoc1, \"Set visibility: \" + PUBLIC, true, this.context);\n    }", "signature": "void setVisibility()", "full_signature": "@Test public void setVisibility()", "class_method_signature": "DefaultEntityVisibilityManagerTest.setVisibility()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getStringProperty", "assertTrue", "setVisibility", "setProperty", "verify", "saveDocument", "verify"]}, "focal_class": {"identifier": "DefaultEntityVisibilityManager", "superclass": "", "interfaces": "implements EntityVisibilityManager", "fields": [{"original_string": "private static final String VISIBILITY = \"visibility\";", "modifier": "private static final", "type": "String", "declarator": "VISIBILITY = \"visibility\"", "var_name": "VISIBILITY"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private PermissionsConfiguration configuration;", "modifier": "@Inject\n    private", "type": "PermissionsConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Inject\n    private EntityAccessHelper helper;", "modifier": "@Inject\n    private", "type": "EntityAccessHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "@Inject\n    private Provider<XWikiContext> xcontextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "xcontextProvider", "var_name": "xcontextProvider"}, {"original_string": "@Inject\n    @Named(\"context\")\n    private Provider<ComponentManager> componentManager;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "Provider<ComponentManager>", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "@Inject\n    @Named(\"currentmixed\")\n    private DocumentReferenceResolver<EntityReference> partialEntityResolver;", "modifier": "@Inject\n    @Named(\"currentmixed\")\n    private", "type": "DocumentReferenceResolver<EntityReference>", "declarator": "partialEntityResolver", "var_name": "partialEntityResolver"}, {"original_string": "@Inject\n    @Named(\"private\")\n    private Visibility privateVisibility;", "modifier": "@Inject\n    @Named(\"private\")\n    private", "type": "Visibility", "declarator": "privateVisibility", "var_name": "privateVisibility"}], "methods": [{"identifier": "listVisibilityOptions", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "Collection<Visibility>", "signature": "Collection<Visibility> listVisibilityOptions()", "full_signature": "@Nonnull @Override public Collection<Visibility> listVisibilityOptions()", "class_method_signature": "DefaultEntityVisibilityManager.listVisibilityOptions()", "testcase": false, "constructor": false}, {"identifier": "listAllVisibilityOptions", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "Collection<Visibility>", "signature": "Collection<Visibility> listAllVisibilityOptions()", "full_signature": "@Nonnull @Override public Collection<Visibility> listAllVisibilityOptions()", "class_method_signature": "DefaultEntityVisibilityManager.listAllVisibilityOptions()", "testcase": false, "constructor": false}, {"identifier": "getDefaultVisibility", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "Visibility", "signature": "Visibility getDefaultVisibility()", "full_signature": "@Nonnull @Override public Visibility getDefaultVisibility()", "class_method_signature": "DefaultEntityVisibilityManager.getDefaultVisibility()", "testcase": false, "constructor": false}, {"identifier": "resolveVisibility", "parameters": "(@Nullable final String name)", "modifiers": "@Nonnull @Override public", "return": "Visibility", "signature": "Visibility resolveVisibility(@Nullable final String name)", "full_signature": "@Nonnull @Override public Visibility resolveVisibility(@Nullable final String name)", "class_method_signature": "DefaultEntityVisibilityManager.resolveVisibility(@Nullable final String name)", "testcase": false, "constructor": false}, {"identifier": "setVisibility", "parameters": "(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setVisibility(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "full_signature": "@Override public boolean setVisibility(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "class_method_signature": "DefaultEntityVisibilityManager.setVisibility(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "testcase": false, "constructor": false}, {"identifier": "getVisibility", "parameters": "(@Nullable final PrimaryEntity entity)", "modifiers": "@Nonnull @Override public", "return": "Visibility", "signature": "Visibility getVisibility(@Nullable final PrimaryEntity entity)", "full_signature": "@Nonnull @Override public Visibility getVisibility(@Nullable final PrimaryEntity entity)", "class_method_signature": "DefaultEntityVisibilityManager.getVisibility(@Nullable final PrimaryEntity entity)", "testcase": false, "constructor": false}, {"identifier": "filterByVisibility", "parameters": "(\n        @Nullable final Collection<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "modifiers": "@Nonnull @Override public", "return": "Collection<? extends PrimaryEntity>", "signature": "Collection<? extends PrimaryEntity> filterByVisibility(\n        @Nullable final Collection<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "full_signature": "@Nonnull @Override public Collection<? extends PrimaryEntity> filterByVisibility(\n        @Nullable final Collection<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "class_method_signature": "DefaultEntityVisibilityManager.filterByVisibility(\n        @Nullable final Collection<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "testcase": false, "constructor": false}, {"identifier": "filterByVisibility", "parameters": "(\n        @Nullable final Iterator<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "modifiers": "@Nonnull @Override public", "return": "Iterator<? extends PrimaryEntity>", "signature": "Iterator<? extends PrimaryEntity> filterByVisibility(\n        @Nullable final Iterator<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "full_signature": "@Nonnull @Override public Iterator<? extends PrimaryEntity> filterByVisibility(\n        @Nullable final Iterator<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "class_method_signature": "DefaultEntityVisibilityManager.filterByVisibility(\n        @Nullable final Iterator<? extends PrimaryEntity> entities,\n        @Nullable final Visibility requiredVisibility)", "testcase": false, "constructor": false}], "file": "components/entity-access-rules/api/src/main/java/org/phenotips/data/permissions/internal/DefaultEntityVisibilityManager.java"}, "focal_method": {"identifier": "setVisibility", "parameters": "(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean setVisibility(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)\n    {\n        if (entity == null || entity.getDocumentReference() == null) {\n            return false;\n        }\n        final DocumentReference classReference =\n            this.partialEntityResolver.resolve(Visibility.CLASS_REFERENCE, entity.getDocumentReference());\n        try {\n            final String visibilityAsString = (visibility != null) ? visibility.getName() : StringUtils.EMPTY;\n            final String currentVisibility = this.helper.getStringProperty(entity.getXDocument(), classReference,\n                VISIBILITY);\n            if (!visibilityAsString.equals(currentVisibility)) {\n                this.helper.setProperty(entity.getXDocument(), classReference, VISIBILITY, visibilityAsString);\n                final XWikiContext context = this.xcontextProvider.get();\n                context.getWiki().saveDocument(entity.getXDocument(), \"Set visibility: \" + visibilityAsString,\n                    true, context);\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }", "signature": "boolean setVisibility(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "full_signature": "@Override public boolean setVisibility(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "class_method_signature": "DefaultEntityVisibilityManager.setVisibility(\n        @Nullable final PrimaryEntity entity,\n        @Nullable final Visibility visibility)", "testcase": false, "constructor": false, "invocations": ["getDocumentReference", "resolve", "getDocumentReference", "getName", "getStringProperty", "getXDocument", "equals", "setProperty", "getXDocument", "get", "saveDocument", "getWiki", "getXDocument"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}