{"test_class": {"identifier": "AccessThroughFamilyMemberAuthorisationModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<AuthorizationModule> mocker =\n        new MockitoComponentMockingRule<>(AccessThroughFamilyMemberAuthorisationModule.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<AuthorizationModule>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(AccessThroughFamilyMemberAuthorisationModule.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    private Family family;", "modifier": "@Mock\n    private", "type": "Family", "declarator": "family", "var_name": "family"}, {"original_string": "@Mock\n    private Patient patient1;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient1", "var_name": "patient1"}, {"original_string": "@Mock\n    private AccessLevel access1;", "modifier": "@Mock\n    private", "type": "AccessLevel", "declarator": "access1", "var_name": "access1"}, {"original_string": "@Mock\n    private Patient patient2;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient2", "var_name": "patient2"}, {"original_string": "@Mock\n    private AccessLevel access2;", "modifier": "@Mock\n    private", "type": "AccessLevel", "declarator": "access2", "var_name": "access2"}, {"original_string": "private EntityAccessManager helper;", "modifier": "private", "type": "EntityAccessManager", "declarator": "helper", "var_name": "helper"}, {"original_string": "private FamilyRepository repo;", "modifier": "private", "type": "FamilyRepository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private DocumentReference doc = new DocumentReference(\"xwiki\", \"Families\", \"FAM01\");", "modifier": "private", "type": "DocumentReference", "declarator": "doc = new DocumentReference(\"xwiki\", \"Families\", \"FAM01\")", "var_name": "doc"}, {"original_string": "@Mock\n    private DocumentReference userProfile;", "modifier": "@Mock\n    private", "type": "DocumentReference", "declarator": "userProfile", "var_name": "userProfile"}], "file": "components/family-studies/api/src/test/java/org/phenotips/studies/family/internal/AccessThroughFamilyMemberAuthorisationModuleTest.java"}, "test_case": {"identifier": "commentAccessNotGrantedForEditCollaborator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void commentAccessNotGrantedForEditCollaborator() throws ComponentLookupException\n    {\n        when(this.access1.getGrantedRight()).thenReturn(Right.EDIT);\n        when(this.access2.getGrantedRight()).thenReturn(Right.ILLEGAL);\n        Assert.assertNull(this.mocker.getComponentUnderTest().hasAccess(this.user, Right.COMMENT, this.doc));\n    }", "signature": "void commentAccessNotGrantedForEditCollaborator()", "full_signature": "@Test public void commentAccessNotGrantedForEditCollaborator()", "class_method_signature": "AccessThroughFamilyMemberAuthorisationModuleTest.commentAccessNotGrantedForEditCollaborator()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getGrantedRight", "thenReturn", "when", "getGrantedRight", "assertNull", "hasAccess", "getComponentUnderTest"]}, "focal_class": {"identifier": "AccessThroughFamilyMemberAuthorisationModule", "superclass": "", "interfaces": "implements AuthorizationModule", "fields": [{"original_string": "@Inject\n    private FamilyRepository familyRepository;", "modifier": "@Inject\n    private", "type": "FamilyRepository", "declarator": "familyRepository", "var_name": "familyRepository"}, {"original_string": "@Inject\n    private EntityAccessManager manager;", "modifier": "@Inject\n    private", "type": "EntityAccessManager", "declarator": "manager", "var_name": "manager"}], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "AccessThroughFamilyMemberAuthorisationModule.getPriority()", "testcase": false, "constructor": false}, {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "AccessThroughFamilyMemberAuthorisationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false}], "file": "components/family-studies/api/src/main/java/org/phenotips/studies/family/internal/AccessThroughFamilyMemberAuthorisationModule.java"}, "focal_method": {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n    public Boolean hasAccess(User user, Right access, EntityReference entity)\n    {\n        if (!ObjectUtils.allNotNull(user, access, entity) || !(access == Right.VIEW || access == Right.EDIT)) {\n            return null;\n        }\n\n        Family family = this.familyRepository.get(entity.toString());\n        if (family == null) {\n            return null;\n        }\n\n        for (Patient member : family.getMembers()) {\n            AccessLevel grantedAccess = this.manager.getAccessLevel(member, user.getProfileDocument());\n            Right grantedRight = grantedAccess.getGrantedRight();\n\n            if (grantedRight != null && (grantedRight.equals(access)\n                || (grantedRight.getImpliedRights() != null && grantedRight.getImpliedRights().contains(access)))) {\n                return true;\n            }\n        }\n\n        return null;\n    }", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "AccessThroughFamilyMemberAuthorisationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false, "invocations": ["allNotNull", "get", "toString", "getMembers", "getAccessLevel", "getProfileDocument", "getGrantedRight", "equals", "getImpliedRights", "contains", "getImpliedRights"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}