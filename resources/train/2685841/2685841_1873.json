{"test_class": {"identifier": "DefaultPatientRecordLockManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<PatientRecordLockManager> mocker =\n        new MockitoComponentMockingRule<PatientRecordLockManager>(DefaultPatientRecordLockManager.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<PatientRecordLockManager>", "declarator": "mocker =\n        new MockitoComponentMockingRule<PatientRecordLockManager>(DefaultPatientRecordLockManager.class)", "var_name": "mocker"}, {"original_string": "private EntityPermissionsManager pm;", "modifier": "private", "type": "EntityPermissionsManager", "declarator": "pm", "var_name": "pm"}, {"original_string": "private Provider<XWikiContext> contextProvider;", "modifier": "private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}, {"original_string": "private AccessLevel manageAccessLevel;", "modifier": "private", "type": "AccessLevel", "declarator": "manageAccessLevel", "var_name": "manageAccessLevel"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private DocumentReference patientDocumentReference;", "modifier": "@Mock\n    private", "type": "DocumentReference", "declarator": "patientDocumentReference", "var_name": "patientDocumentReference"}, {"original_string": "@Mock\n    private XWikiDocument patientDocument;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "patientDocument", "var_name": "patientDocument"}, {"original_string": "@Mock\n    private BaseObject lock;", "modifier": "@Mock\n    private", "type": "BaseObject", "declarator": "lock", "var_name": "lock"}, {"original_string": "@Mock\n    private EntityAccess entityAccess;", "modifier": "@Mock\n    private", "type": "EntityAccess", "declarator": "entityAccess", "var_name": "entityAccess"}], "file": "components/record-locking/api/src/test/java/org/phenotips/recordLocking/internal/DefaultPatientRecordLockManagerTest.java"}, "test_case": {"identifier": "wontLockWithoutManageAccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void wontLockWithoutManageAccess() throws ComponentLookupException\n    {\n        Mockito.doReturn(null).when(this.patientDocument).getXObject(Matchers.<EntityReference>any());\n        Mockito.doReturn(false).when(this.entityAccess).hasAccessLevel(this.manageAccessLevel);\n        PatientRecordLockManager mockedLockManager = this.mocker.getComponentUnderTest();\n        Assert.assertFalse(mockedLockManager.lockPatientRecord(this.patient));\n    }", "signature": "void wontLockWithoutManageAccess()", "full_signature": "@Test public void wontLockWithoutManageAccess()", "class_method_signature": "DefaultPatientRecordLockManagerTest.wontLockWithoutManageAccess()", "testcase": true, "constructor": false, "invocations": ["getXObject", "when", "doReturn", "any", "hasAccessLevel", "when", "doReturn", "getComponentUnderTest", "assertFalse", "lockPatientRecord"]}, "focal_class": {"identifier": "DefaultPatientRecordLockManager", "superclass": "", "interfaces": "implements org.phenotips.recordLocking.PatientRecordLockManager", "fields": [{"original_string": "private EntityReference lockClassReference = new EntityReference(\"PatientLock\", EntityType.DOCUMENT,\n        Constants.CODE_SPACE_REFERENCE);", "modifier": "private", "type": "EntityReference", "declarator": "lockClassReference = new EntityReference(\"PatientLock\", EntityType.DOCUMENT,\n        Constants.CODE_SPACE_REFERENCE)", "var_name": "lockClassReference"}, {"original_string": "@Inject\n    private EntityPermissionsManager pm;", "modifier": "@Inject\n    private", "type": "EntityPermissionsManager", "declarator": "pm", "var_name": "pm"}, {"original_string": "@Inject\n    private Provider<XWikiContext> contextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}, {"original_string": "@Inject\n    @Named(\"manage\")\n    private AccessLevel manageAccessLevel;", "modifier": "@Inject\n    @Named(\"manage\")\n    private", "type": "AccessLevel", "declarator": "manageAccessLevel", "var_name": "manageAccessLevel"}], "methods": [{"identifier": "lockPatientRecord", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean lockPatientRecord(Patient patient)", "full_signature": "@Override public boolean lockPatientRecord(Patient patient)", "class_method_signature": "DefaultPatientRecordLockManager.lockPatientRecord(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "unlockPatientRecord", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unlockPatientRecord(Patient patient)", "full_signature": "@Override public boolean unlockPatientRecord(Patient patient)", "class_method_signature": "DefaultPatientRecordLockManager.unlockPatientRecord(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "isLocked", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLocked(Patient patient)", "full_signature": "@Override public boolean isLocked(Patient patient)", "class_method_signature": "DefaultPatientRecordLockManager.isLocked(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "hasLockingPermission", "parameters": "(Patient patient)", "modifiers": "private", "return": "boolean", "signature": "boolean hasLockingPermission(Patient patient)", "full_signature": "private boolean hasLockingPermission(Patient patient)", "class_method_signature": "DefaultPatientRecordLockManager.hasLockingPermission(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "isDocumentLocked", "parameters": "(XWikiDocument document)", "modifiers": "private", "return": "boolean", "signature": "boolean isDocumentLocked(XWikiDocument document)", "full_signature": "private boolean isDocumentLocked(XWikiDocument document)", "class_method_signature": "DefaultPatientRecordLockManager.isDocumentLocked(XWikiDocument document)", "testcase": false, "constructor": false}], "file": "components/record-locking/api/src/main/java/org/phenotips/recordLocking/internal/DefaultPatientRecordLockManager.java"}, "focal_method": {"identifier": "lockPatientRecord", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean lockPatientRecord(Patient patient)\n    {\n        try {\n            XWikiDocument patientDocument = patient.getXDocument();\n            if (!this.isDocumentLocked(patientDocument) && this.hasLockingPermission(patient)) {\n                XWikiContext context = this.contextProvider.get();\n                XWiki xwiki = context.getWiki();\n                patientDocument.createXObject(this.lockClassReference, context);\n                xwiki.saveDocument(patientDocument, \"Locked patient record\", true,\n                    context);\n                return true;\n            } else {\n                return false;\n            }\n        } catch (XWikiException | NullPointerException e) {\n            return false;\n        }\n    }", "signature": "boolean lockPatientRecord(Patient patient)", "full_signature": "@Override public boolean lockPatientRecord(Patient patient)", "class_method_signature": "DefaultPatientRecordLockManager.lockPatientRecord(Patient patient)", "testcase": false, "constructor": false, "invocations": ["getXDocument", "isDocumentLocked", "hasLockingPermission", "get", "getWiki", "createXObject", "saveDocument"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}