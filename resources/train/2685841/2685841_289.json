{"test_class": {"identifier": "LockingListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<EventListener> mocker =\n        new MockitoComponentMockingRule<>(LockingListener.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<EventListener>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(LockingListener.class)", "var_name": "mocker"}, {"original_string": "private DocumentLockManager lockManager;", "modifier": "private", "type": "DocumentLockManager", "declarator": "lockManager", "var_name": "lockManager"}, {"original_string": "private EventListener listener;", "modifier": "private", "type": "EventListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private DocumentReference docRef = new DocumentReference(\"xwiki\", \"data\", \"P0000001\");", "modifier": "private", "type": "DocumentReference", "declarator": "docRef = new DocumentReference(\"xwiki\", \"data\", \"P0000001\")", "var_name": "docRef"}, {"original_string": "@Mock\n    private XWikiDocument doc;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "doc", "var_name": "doc"}], "file": "components/utilities/concurrency-locking/src/test/java/org/phenotips/locks/internal/LockingListenerTest.java"}, "test_case": {"identifier": "unlocksOnActionExecutedEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unlocksOnActionExecutedEvent()\n    {\n        this.listener.onEvent(new ActionExecutedEvent(\"save\"), this.doc, null);\n        Mockito.verify(this.lockManager).unlock(this.docRef);\n    }", "signature": "void unlocksOnActionExecutedEvent()", "full_signature": "@Test public void unlocksOnActionExecutedEvent()", "class_method_signature": "LockingListenerTest.unlocksOnActionExecutedEvent()", "testcase": true, "constructor": false, "invocations": ["onEvent", "unlock", "verify"]}, "focal_class": {"identifier": "LockingListener", "superclass": "extends AbstractEventListener", "interfaces": "", "fields": [{"original_string": "private static final List<String> SUPPORTED_EVENTS = Collections.unmodifiableList(\n        Arrays.asList(\"get\", \"view\", \"save\", \"saveandcontinue\", \"preview\", \"objectadd\", \"objectremove\", \"rollback\"));", "modifier": "private static final", "type": "List<String>", "declarator": "SUPPORTED_EVENTS = Collections.unmodifiableList(\n        Arrays.asList(\"get\", \"view\", \"save\", \"saveandcontinue\", \"preview\", \"objectadd\", \"objectremove\", \"rollback\"))", "var_name": "SUPPORTED_EVENTS"}, {"original_string": "@Inject\n    private DocumentLockManager lockManager;", "modifier": "@Inject\n    private", "type": "DocumentLockManager", "declarator": "lockManager", "var_name": "lockManager"}], "methods": [{"identifier": "LockingListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " LockingListener()", "full_signature": "public  LockingListener()", "class_method_signature": "LockingListener.LockingListener()", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "LockingListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false}], "file": "components/utilities/concurrency-locking/src/main/java/org/phenotips/locks/internal/LockingListener.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        if (event == null || source == null || !(event instanceof ActionExecutionEvent)) {\n            return;\n        }\n        String name = ((ActionExecutionEvent) event).getActionName();\n        if (!SUPPORTED_EVENTS.contains(name)) {\n            return;\n        }\n        if (event instanceof ActionExecutingEvent) {\n            this.lockManager.lock(((XWikiDocument) source).getDocumentReference());\n        } else if (event instanceof ActionExecutedEvent) {\n            this.lockManager.unlock(((XWikiDocument) source).getDocumentReference());\n        }\n    }", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "LockingListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false, "invocations": ["getActionName", "contains", "lock", "getDocumentReference", "unlock", "getDocumentReference"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}