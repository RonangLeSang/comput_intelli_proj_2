{"test_class": {"identifier": "StylerTest", "superclass": "", "interfaces": "", "fields": [], "file": "components/export/api/src/test/java/org/phenotips/export/internal/StylerTest.java"}, "test_case": {"identifier": "styleNoStyles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void styleNoStyles()\n    {\n        Styler styler = new Styler();\n        DataCell dataCell = mock(DataCell.class);\n        Cell cell = mock(Cell.class);\n        Workbook workbook = mock(Workbook.class);\n        CellStyle style = mock(CellStyle.class);\n        Font font = mock(Font.class);\n\n        doReturn(null).when(dataCell).getStyles();\n        doReturn(style).when(workbook).createCellStyle();\n        doReturn(font).when(workbook).createFont();\n\n        styler.style(dataCell, cell, workbook);\n\n        verify(dataCell).getStyles();\n        verify(style, times(1)).setWrapText(true);\n        verify(style, times(1)).setFont(any(Font.class));\n        verify(style, times(1)).setVerticalAlignment(CellStyle.VERTICAL_TOP);\n        verify(cell, times(1)).setCellStyle(style);\n        verifyNoMoreInteractions(style);\n        /* This is the only one that's important. */\n        verifyNoMoreInteractions(cell);\n        verifyNoMoreInteractions(dataCell);\n    }", "signature": "void styleNoStyles()", "full_signature": "@Test public void styleNoStyles()", "class_method_signature": "StylerTest.styleNoStyles()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "getStyles", "when", "doReturn", "createCellStyle", "when", "doReturn", "createFont", "when", "doReturn", "style", "getStyles", "verify", "setWrapText", "verify", "times", "setFont", "verify", "times", "any", "setVerticalAlignment", "verify", "times", "setCellStyle", "verify", "times", "verifyNoMoreInteractions", "verifyNoMoreInteractions", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "Styler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NO_MATRIX_ERR_MSG = \"The section has not been converted to a matrix\";", "modifier": "private static final", "type": "String", "declarator": "NO_MATRIX_ERR_MSG = \"The section has not been converted to a matrix\"", "var_name": "NO_MATRIX_ERR_MSG"}, {"original_string": "private Map<Set<StyleOption>, CellStyle> styleCache = new HashMap<>();", "modifier": "private", "type": "Map<Set<StyleOption>, CellStyle>", "declarator": "styleCache = new HashMap<>()", "var_name": "styleCache"}, {"original_string": "private Font defaultFont;", "modifier": "private", "type": "Font", "declarator": "defaultFont", "var_name": "defaultFont"}], "methods": [{"identifier": "disallowBodyStyles", "parameters": "(DataSection section)", "modifiers": "public static", "return": "void", "signature": "void disallowBodyStyles(DataSection section)", "full_signature": "public static void disallowBodyStyles(DataSection section)", "class_method_signature": "Styler.disallowBodyStyles(DataSection section)", "testcase": false, "constructor": false}, {"identifier": "styleSectionBottom", "parameters": "(DataSection section, StyleOption style)", "modifiers": "public static", "return": "void", "signature": "void styleSectionBottom(DataSection section, StyleOption style)", "full_signature": "public static void styleSectionBottom(DataSection section, StyleOption style)", "class_method_signature": "Styler.styleSectionBottom(DataSection section, StyleOption style)", "testcase": false, "constructor": false}, {"identifier": "styleSectionBorder", "parameters": "(DataSection section, StyleOption styleLeft, StyleOption styleRight)", "modifiers": "public static", "return": "void", "signature": "void styleSectionBorder(DataSection section, StyleOption styleLeft, StyleOption styleRight)", "full_signature": "public static void styleSectionBorder(DataSection section, StyleOption styleLeft, StyleOption styleRight)", "class_method_signature": "Styler.styleSectionBorder(DataSection section, StyleOption styleLeft, StyleOption styleRight)", "testcase": false, "constructor": false}, {"identifier": "extendStyleHorizontally", "parameters": "(DataSection section, StyleOption... styles)", "modifiers": "@SuppressWarnings({ \"checkstyle:NPathComplexity\", \"checkstyle:CyclomaticComplexity\" }) public static", "return": "void", "signature": "void extendStyleHorizontally(DataSection section, StyleOption... styles)", "full_signature": "@SuppressWarnings({ \"checkstyle:NPathComplexity\", \"checkstyle:CyclomaticComplexity\" }) public static void extendStyleHorizontally(DataSection section, StyleOption... styles)", "class_method_signature": "Styler.extendStyleHorizontally(DataSection section, StyleOption... styles)", "testcase": false, "constructor": false}, {"identifier": "extendStyleVertically", "parameters": "(DataSection section, StyleOption... styles)", "modifiers": "@SuppressWarnings({ \"checkstyle:NPathComplexity\", \"checkstyle:CyclomaticComplexity\" }) public static", "return": "void", "signature": "void extendStyleVertically(DataSection section, StyleOption... styles)", "full_signature": "@SuppressWarnings({ \"checkstyle:NPathComplexity\", \"checkstyle:CyclomaticComplexity\" }) public static void extendStyleVertically(DataSection section, StyleOption... styles)", "class_method_signature": "Styler.extendStyleVertically(DataSection section, StyleOption... styles)", "testcase": false, "constructor": false}, {"identifier": "style", "parameters": "(DataCell dataCell, Cell cell, Workbook wBook)", "modifiers": "public", "return": "void", "signature": "void style(DataCell dataCell, Cell cell, Workbook wBook)", "full_signature": "public void style(DataCell dataCell, Cell cell, Workbook wBook)", "class_method_signature": "Styler.style(DataCell dataCell, Cell cell, Workbook wBook)", "testcase": false, "constructor": false}, {"identifier": "setDefaultStyle", "parameters": "(Set<StyleOption> styles, Cell cell, CellStyle cellStyle)", "modifiers": "private", "return": "boolean", "signature": "boolean setDefaultStyle(Set<StyleOption> styles, Cell cell, CellStyle cellStyle)", "full_signature": "private boolean setDefaultStyle(Set<StyleOption> styles, Cell cell, CellStyle cellStyle)", "class_method_signature": "Styler.setDefaultStyle(Set<StyleOption> styles, Cell cell, CellStyle cellStyle)", "testcase": false, "constructor": false}, {"identifier": "setFontStyles", "parameters": "(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "modifiers": "private", "return": "void", "signature": "void setFontStyles(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "full_signature": "private void setFontStyles(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "class_method_signature": "Styler.setFontStyles(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "testcase": false, "constructor": false}, {"identifier": "setBorderStyles", "parameters": "(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "modifiers": "private", "return": "void", "signature": "void setBorderStyles(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "full_signature": "private void setBorderStyles(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "class_method_signature": "Styler.setBorderStyles(Set<StyleOption> styles, Cell cell, CellStyle cellStyle, Workbook wBook)", "testcase": false, "constructor": false}, {"identifier": "createDefaultFont", "parameters": "(Workbook wBook)", "modifiers": "private", "return": "Font", "signature": "Font createDefaultFont(Workbook wBook)", "full_signature": "private Font createDefaultFont(Workbook wBook)", "class_method_signature": "Styler.createDefaultFont(Workbook wBook)", "testcase": false, "constructor": false}], "file": "components/export/api/src/main/java/org/phenotips/export/internal/Styler.java"}, "focal_method": {"identifier": "style", "parameters": "(DataCell dataCell, Cell cell, Workbook wBook)", "modifiers": "public", "return": "void", "body": "public void style(DataCell dataCell, Cell cell, Workbook wBook)\n    {\n        Set<StyleOption> styles = dataCell.getStyles();\n        CellStyle cellStyle = wBook.createCellStyle();\n        /* For \\n to work properly set to true */\n        cellStyle.setWrapText(true);\n        if (this.defaultFont == null) {\n            this.defaultFont = createDefaultFont(wBook);\n        }\n        cellStyle.setFont(this.defaultFont);\n        cellStyle.setVerticalAlignment(CellStyle.VERTICAL_TOP);\n\n        /* If the DataCell's styles is not set, gives default style, and indicates that this function should return. */\n        if (this.setDefaultStyle(styles, cell, cellStyle)) {\n            return;\n        }\n        if (this.styleCache.containsKey(styles)) {\n            cell.setCellStyle(this.styleCache.get(styles));\n            return;\n        }\n\n        /* Priority of styles can be coded in by placing the if statement lower within the corresponding function. */\n        this.setFontStyles(styles, cell, cellStyle, wBook);\n        this.setBorderStyles(styles, cell, cellStyle, wBook);\n\n        /* Keep this as the last statement. */\n        this.styleCache.put(styles, cellStyle);\n    }", "signature": "void style(DataCell dataCell, Cell cell, Workbook wBook)", "full_signature": "public void style(DataCell dataCell, Cell cell, Workbook wBook)", "class_method_signature": "Styler.style(DataCell dataCell, Cell cell, Workbook wBook)", "testcase": false, "constructor": false, "invocations": ["getStyles", "createCellStyle", "setWrapText", "createDefaultFont", "setFont", "setVerticalAlignment", "setDefaultStyle", "containsKey", "setCellStyle", "get", "setFontStyles", "setBorderStyles", "put"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}