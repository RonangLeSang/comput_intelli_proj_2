{"test_class": {"identifier": "LockedAuthorizationModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<AuthorizationModule> mocker =\n        new MockitoComponentMockingRule<>(LockedAuthorizationModule.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<AuthorizationModule>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(LockedAuthorizationModule.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    private Right right;", "modifier": "@Mock\n    private", "type": "Right", "declarator": "right", "var_name": "right"}, {"original_string": "@Mock\n    private DocumentReference documentReference;", "modifier": "@Mock\n    private", "type": "DocumentReference", "declarator": "documentReference", "var_name": "documentReference"}, {"original_string": "@Mock\n    private XWikiDocument document;", "modifier": "@Mock\n    private", "type": "XWikiDocument", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "private Provider<XWikiContext> contextProvider;", "modifier": "private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}], "file": "components/record-locking/api/src/test/java/org/phenotips/recordLocking/internal/authorization/LockedAuthorizationModuleTest.java"}, "test_case": {"identifier": "ignoresNonDocumentReferences", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ignoresNonDocumentReferences() throws ComponentLookupException\n    {\n        Assert.assertNull(\n            this.mocker.getComponentUnderTest().hasAccess(this.user, this.right, this.documentReference.getParent()));\n    }", "signature": "void ignoresNonDocumentReferences()", "full_signature": "@Test public void ignoresNonDocumentReferences()", "class_method_signature": "LockedAuthorizationModuleTest.ignoresNonDocumentReferences()", "testcase": true, "constructor": false, "invocations": ["assertNull", "hasAccess", "getComponentUnderTest", "getParent"]}, "focal_class": {"identifier": "LockedAuthorizationModule", "superclass": "", "interfaces": "implements AuthorizationModule", "fields": [{"original_string": "private EntityReference lockClassReference = new EntityReference(\"PatientLock\", EntityType.DOCUMENT,\n        Constants.CODE_SPACE_REFERENCE);", "modifier": "private", "type": "EntityReference", "declarator": "lockClassReference = new EntityReference(\"PatientLock\", EntityType.DOCUMENT,\n        Constants.CODE_SPACE_REFERENCE)", "var_name": "lockClassReference"}, {"original_string": "@Inject\n    private Provider<XWikiContext> contextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "LockedAuthorizationModule.getPriority()", "testcase": false, "constructor": false}, {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "LockedAuthorizationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false}], "file": "components/record-locking/api/src/main/java/org/phenotips/recordLocking/internal/authorization/LockedAuthorizationModule.java"}, "focal_method": {"identifier": "hasAccess", "parameters": "(User user, Right access, EntityReference entity)", "modifiers": "@Override public", "return": "Boolean", "body": "@Override\n    public Boolean hasAccess(User user, Right access, EntityReference entity)\n    {\n        if (!(entity instanceof DocumentReference)) {\n            return null;\n        }\n        XWikiContext context = this.contextProvider.get();\n\n        try {\n            XWikiDocument doc = context.getWiki().getDocument((DocumentReference) entity, context);\n            BaseObject lock = doc.getXObject(this.lockClassReference);\n            if (lock != null && !access.isReadOnly()) {\n                return Boolean.FALSE;\n            }\n        } catch (XWikiException | NullPointerException e) {\n            return null;\n        }\n\n        return null;\n    }", "signature": "Boolean hasAccess(User user, Right access, EntityReference entity)", "full_signature": "@Override public Boolean hasAccess(User user, Right access, EntityReference entity)", "class_method_signature": "LockedAuthorizationModule.hasAccess(User user, Right access, EntityReference entity)", "testcase": false, "constructor": false, "invocations": ["get", "getDocument", "getWiki", "getXObject", "isReadOnly"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}