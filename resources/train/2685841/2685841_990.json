{"test_class": {"identifier": "ContactInformationControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<PatientDataController<ContactInfo>> mocker =\n        new MockitoComponentMockingRule<PatientDataController<ContactInfo>>(ContactInformationController.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<PatientDataController<ContactInfo>>", "declarator": "mocker =\n        new MockitoComponentMockingRule<PatientDataController<ContactInfo>>(ContactInformationController.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private ContactInfo contact1;", "modifier": "@Mock\n    private", "type": "ContactInfo", "declarator": "contact1", "var_name": "contact1"}, {"original_string": "@Mock\n    private ContactInfo contact2;", "modifier": "@Mock\n    private", "type": "ContactInfo", "declarator": "contact2", "var_name": "contact2"}, {"original_string": "@Mock\n    private ContactInfo contact3;", "modifier": "@Mock\n    private", "type": "ContactInfo", "declarator": "contact3", "var_name": "contact3"}, {"original_string": "private PatientContactsManager manager;", "modifier": "private", "type": "PatientContactsManager", "declarator": "manager", "var_name": "manager"}], "file": "components/patient-contacts/src/test/java/org/phenotips/data/internal/controller/ContactInformationControllerTest.java"}, "test_case": {"identifier": "loadReturnsNullWhenNoContactsAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadReturnsNullWhenNoContactsAvailable() throws ComponentLookupException\n    {\n        when(this.manager.getAll(this.patient)).thenReturn(null);\n        PatientData<ContactInfo> result = this.mocker.getComponentUnderTest().load(this.patient);\n        Assert.assertNull(result);\n\n        when(this.manager.getAll(this.patient)).thenReturn(Collections.<ContactInfo>emptyList());\n        result = this.mocker.getComponentUnderTest().load(this.patient);\n        Assert.assertNull(result);\n    }", "signature": "void loadReturnsNullWhenNoContactsAvailable()", "full_signature": "@Test public void loadReturnsNullWhenNoContactsAvailable()", "class_method_signature": "ContactInformationControllerTest.loadReturnsNullWhenNoContactsAvailable()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAll", "load", "getComponentUnderTest", "assertNull", "thenReturn", "when", "getAll", "emptyList", "load", "getComponentUnderTest", "assertNull"]}, "focal_class": {"identifier": "ContactInformationController", "superclass": "", "interfaces": "implements PatientDataController<ContactInfo>", "fields": [{"original_string": "private static final String DATA_CONTACT = \"contact\";", "modifier": "private static final", "type": "String", "declarator": "DATA_CONTACT = \"contact\"", "var_name": "DATA_CONTACT"}, {"original_string": "@Inject\n    private PatientContactsManager contactsManager;", "modifier": "@Inject\n    private", "type": "PatientContactsManager", "declarator": "contactsManager", "var_name": "contactsManager"}], "methods": [{"identifier": "load", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "PatientData<ContactInfo>", "signature": "PatientData<ContactInfo> load(Patient patient)", "full_signature": "@Override public PatientData<ContactInfo> load(Patient patient)", "class_method_signature": "ContactInformationController.load(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "signature": "void save(Patient patient)", "full_signature": "@Override public void save(Patient patient)", "class_method_signature": "ContactInformationController.save(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(final Patient patient, final PatientWritePolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void save(final Patient patient, final PatientWritePolicy policy)", "full_signature": "@Override public void save(final Patient patient, final PatientWritePolicy policy)", "class_method_signature": "ContactInformationController.save(final Patient patient, final PatientWritePolicy policy)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json)", "class_method_signature": "ContactInformationController.writeJSON(Patient patient, JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "writeJSON", "parameters": "(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "modifiers": "@Override public", "return": "void", "signature": "void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "full_signature": "@Override public void writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "class_method_signature": "ContactInformationController.writeJSON(Patient patient, JSONObject json, Collection<String> selectedFieldNames)", "testcase": false, "constructor": false}, {"identifier": "readJSON", "parameters": "(JSONObject json)", "modifiers": "@Override public", "return": "PatientData<ContactInfo>", "signature": "PatientData<ContactInfo> readJSON(JSONObject json)", "full_signature": "@Override public PatientData<ContactInfo> readJSON(JSONObject json)", "class_method_signature": "ContactInformationController.readJSON(JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ContactInformationController.getName()", "testcase": false, "constructor": false}], "file": "components/patient-contacts/src/main/java/org/phenotips/data/internal/controller/ContactInformationController.java"}, "focal_method": {"identifier": "load", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "PatientData<ContactInfo>", "body": "@Override\n    public PatientData<ContactInfo> load(Patient patient)\n    {\n        List<ContactInfo> contacts = this.contactsManager.getAll(patient);\n        if (contacts == null || contacts.isEmpty()) {\n            return null;\n        }\n        return new IndexedPatientData<>(getName(), contacts);\n    }", "signature": "PatientData<ContactInfo> load(Patient patient)", "full_signature": "@Override public PatientData<ContactInfo> load(Patient patient)", "class_method_signature": "ContactInformationController.load(Patient patient)", "testcase": false, "constructor": false, "invocations": ["getAll", "isEmpty", "getName"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}