{"test_class": {"identifier": "PatientDataAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GENES = \"genes\";", "modifier": "private static final", "type": "String", "declarator": "GENES = \"genes\"", "var_name": "GENES"}, {"original_string": "private static final String GLOBAL_QUALIFIERS = \"global-qualifiers\";", "modifier": "private static final", "type": "String", "declarator": "GLOBAL_QUALIFIERS = \"global-qualifiers\"", "var_name": "GLOBAL_QUALIFIERS"}, {"original_string": "private static final String POS_FEATURE_1_ID = \"HP:1\";", "modifier": "private static final", "type": "String", "declarator": "POS_FEATURE_1_ID = \"HP:1\"", "var_name": "POS_FEATURE_1_ID"}, {"original_string": "private static final String POS_FEATURE_2_ID = \"HP:2\";", "modifier": "private static final", "type": "String", "declarator": "POS_FEATURE_2_ID = \"HP:2\"", "var_name": "POS_FEATURE_2_ID"}, {"original_string": "private static final String NEG_FEATURE_1_ID = \"-HP:1\";", "modifier": "private static final", "type": "String", "declarator": "NEG_FEATURE_1_ID = \"-HP:1\"", "var_name": "NEG_FEATURE_1_ID"}, {"original_string": "private static final String HGNC = \"hgnc\";", "modifier": "private static final", "type": "String", "declarator": "HGNC = \"hgnc\"", "var_name": "HGNC"}, {"original_string": "private static final String GENE_1_ID = \"gene1\";", "modifier": "private static final", "type": "String", "declarator": "GENE_1_ID = \"gene1\"", "var_name": "GENE_1_ID"}, {"original_string": "private static final String GENE_2_ID = \"gene2\";", "modifier": "private static final", "type": "String", "declarator": "GENE_2_ID = \"gene2\"", "var_name": "GENE_2_ID"}, {"original_string": "private static final String GENE_3_ID = \"gene3\";", "modifier": "private static final", "type": "String", "declarator": "GENE_3_ID = \"gene3\"", "var_name": "GENE_3_ID"}, {"original_string": "private static final String REJECTED_LABEL = \"rejected\";", "modifier": "private static final", "type": "String", "declarator": "REJECTED_LABEL = \"rejected\"", "var_name": "REJECTED_LABEL"}, {"original_string": "private static final String REJECTED_CANDIDATE_LABEL = \"rejected_candidate\";", "modifier": "private static final", "type": "String", "declarator": "REJECTED_CANDIDATE_LABEL = \"rejected_candidate\"", "var_name": "REJECTED_CANDIDATE_LABEL"}, {"original_string": "private static final String STATUS_KEY = \"status\";", "modifier": "private static final", "type": "String", "declarator": "STATUS_KEY = \"status\"", "var_name": "STATUS_KEY"}, {"original_string": "private static final String STRATEGY_KEY = \"strategy\";", "modifier": "private static final", "type": "String", "declarator": "STRATEGY_KEY = \"strategy\"", "var_name": "STRATEGY_KEY"}, {"original_string": "private static final List<String> STATUS_VALUES = Arrays.asList(\"candidate\", \"rejected\", \"rejected_candidate\",\n        \"solved\", \"carrier\");", "modifier": "private static final", "type": "List<String>", "declarator": "STATUS_VALUES = Arrays.asList(\"candidate\", \"rejected\", \"rejected_candidate\",\n        \"solved\", \"carrier\")", "var_name": "STATUS_VALUES"}, {"original_string": "private static final List<String> STRATEGY_VALUES = Arrays.asList(\"sequencing\", \"deletion\", \"familial_mutation\",\n        \"common_mutations\");", "modifier": "private static final", "type": "List<String>", "declarator": "STRATEGY_VALUES = Arrays.asList(\"sequencing\", \"deletion\", \"familial_mutation\",\n        \"common_mutations\")", "var_name": "STRATEGY_VALUES"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private VocabularyManager vocabularyManager;", "modifier": "@Mock\n    private", "type": "VocabularyManager", "declarator": "vocabularyManager", "var_name": "vocabularyManager"}, {"original_string": "@Mock\n    private Vocabulary hgnc;", "modifier": "@Mock\n    private", "type": "Vocabulary", "declarator": "hgnc", "var_name": "hgnc"}, {"original_string": "@Mock\n    private Feature positiveFeature1;", "modifier": "@Mock\n    private", "type": "Feature", "declarator": "positiveFeature1", "var_name": "positiveFeature1"}, {"original_string": "@Mock\n    private Feature positiveFeature2;", "modifier": "@Mock\n    private", "type": "Feature", "declarator": "positiveFeature2", "var_name": "positiveFeature2"}, {"original_string": "@Mock\n    private Feature negativeFeature1;", "modifier": "@Mock\n    private", "type": "Feature", "declarator": "negativeFeature1", "var_name": "negativeFeature1"}, {"original_string": "@Mock\n    private VocabularyTerm positiveTerm1;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "positiveTerm1", "var_name": "positiveTerm1"}, {"original_string": "@Mock\n    private VocabularyTerm positiveTerm2;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "positiveTerm2", "var_name": "positiveTerm2"}, {"original_string": "@Mock\n    private VocabularyTerm negativeTerm1;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "negativeTerm1", "var_name": "negativeTerm1"}, {"original_string": "@Mock\n    private VocabularyTerm qualifierTerm1;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "qualifierTerm1", "var_name": "qualifierTerm1"}, {"original_string": "@Mock\n    private VocabularyTerm qualifierTerm2;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "qualifierTerm2", "var_name": "qualifierTerm2"}, {"original_string": "@Mock\n    private VocabularyTerm geneTerm1;", "modifier": "@Mock\n    private", "type": "VocabularyTerm", "declarator": "geneTerm1", "var_name": "geneTerm1"}, {"original_string": "@Mock\n    private Provider<XWikiContext> provider;", "modifier": "@Mock\n    private", "type": "Provider<XWikiContext>", "declarator": "provider", "var_name": "provider"}, {"original_string": "@Mock\n    private XWikiContext context;", "modifier": "@Mock\n    private", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private ComponentManager cm;", "modifier": "@Mock\n    private", "type": "ComponentManager", "declarator": "cm", "var_name": "cm"}, {"original_string": "@Mock\n    private Provider<ComponentManager> mockProvider;", "modifier": "@Mock\n    private", "type": "Provider<ComponentManager>", "declarator": "mockProvider", "var_name": "mockProvider"}, {"original_string": "private PatientData<Gene> geneData;", "modifier": "private", "type": "PatientData<Gene>", "declarator": "geneData", "var_name": "geneData"}, {"original_string": "private PatientData<Object> qualifierData;", "modifier": "private", "type": "PatientData<Object>", "declarator": "qualifierData", "var_name": "qualifierData"}, {"original_string": "private PatientDataAdapter.AdapterBuilder adapterBuilder;", "modifier": "private", "type": "PatientDataAdapter.AdapterBuilder", "declarator": "adapterBuilder", "var_name": "adapterBuilder"}, {"original_string": "private Set<Feature> features;", "modifier": "private", "type": "Set<Feature>", "declarator": "features", "var_name": "features"}], "file": "components/gene-panels/api/src/test/java/org/phenotips/panels/internal/PatientDataAdapterTest.java"}, "test_case": {"identifier": "getPresentTermsReturnsTermsForAllPresentFeatures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPresentTermsReturnsTermsForAllPresentFeatures()\n    {\n        final PatientDataAdapter dataAdapter = this.adapterBuilder.build();\n        final Set<VocabularyTerm> presentTerms = new HashSet<>();\n        presentTerms.add(this.positiveTerm1);\n        presentTerms.add(this.positiveTerm2);\n        presentTerms.add(this.qualifierTerm1);\n        presentTerms.add(this.qualifierTerm2);\n        Assert.assertEquals(presentTerms, dataAdapter.getPresentTerms());\n    }", "signature": "void getPresentTermsReturnsTermsForAllPresentFeatures()", "full_signature": "@Test public void getPresentTermsReturnsTermsForAllPresentFeatures()", "class_method_signature": "PatientDataAdapterTest.getPresentTermsReturnsTermsForAllPresentFeatures()", "testcase": true, "constructor": false, "invocations": ["build", "add", "add", "add", "add", "assertEquals", "getPresentTerms"]}, "focal_class": {"identifier": "PatientDataAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<VocabularyTerm> presentTerms;", "modifier": "private final", "type": "Set<VocabularyTerm>", "declarator": "presentTerms", "var_name": "presentTerms"}, {"original_string": "private final Set<VocabularyTerm> absentTerms;", "modifier": "private final", "type": "Set<VocabularyTerm>", "declarator": "absentTerms", "var_name": "absentTerms"}, {"original_string": "private final Set<VocabularyTerm> rejectedGenes;", "modifier": "private final", "type": "Set<VocabularyTerm>", "declarator": "rejectedGenes", "var_name": "rejectedGenes"}], "methods": [{"identifier": "PatientDataAdapter", "parameters": "(@Nonnull final AdapterBuilder builder)", "modifiers": "private", "return": "", "signature": " PatientDataAdapter(@Nonnull final AdapterBuilder builder)", "full_signature": "private  PatientDataAdapter(@Nonnull final AdapterBuilder builder)", "class_method_signature": "PatientDataAdapter.PatientDataAdapter(@Nonnull final AdapterBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "getPresentTerms", "parameters": "()", "modifiers": "", "return": "Collection<VocabularyTerm>", "signature": "Collection<VocabularyTerm> getPresentTerms()", "full_signature": " Collection<VocabularyTerm> getPresentTerms()", "class_method_signature": "PatientDataAdapter.getPresentTerms()", "testcase": false, "constructor": false}, {"identifier": "getAbsentTerms", "parameters": "()", "modifiers": "", "return": "Collection<VocabularyTerm>", "signature": "Collection<VocabularyTerm> getAbsentTerms()", "full_signature": " Collection<VocabularyTerm> getAbsentTerms()", "class_method_signature": "PatientDataAdapter.getAbsentTerms()", "testcase": false, "constructor": false}, {"identifier": "getRejectedGenes", "parameters": "()", "modifiers": "", "return": "Collection<VocabularyTerm>", "signature": "Collection<VocabularyTerm> getRejectedGenes()", "full_signature": " Collection<VocabularyTerm> getRejectedGenes()", "class_method_signature": "PatientDataAdapter.getRejectedGenes()", "testcase": false, "constructor": false}], "file": "components/gene-panels/api/src/main/java/org/phenotips/panels/internal/PatientDataAdapter.java"}, "focal_method": {"identifier": "getPresentTerms", "parameters": "()", "modifiers": "", "return": "Collection<VocabularyTerm>", "body": "Collection<VocabularyTerm> getPresentTerms()\n    {\n        return Collections.unmodifiableSet(this.presentTerms);\n    }", "signature": "Collection<VocabularyTerm> getPresentTerms()", "full_signature": " Collection<VocabularyTerm> getPresentTerms()", "class_method_signature": "PatientDataAdapter.getPresentTerms()", "testcase": false, "constructor": false, "invocations": ["unmodifiableSet"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}