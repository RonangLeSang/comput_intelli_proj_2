{"test_class": {"identifier": "SolrPatientIndexerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STATUS_KEY = \"status\";", "modifier": "private static final", "type": "String", "declarator": "STATUS_KEY = \"status\"", "var_name": "STATUS_KEY"}, {"original_string": "private static final List<String> STATUS_VALUES = Arrays.asList(\"candidate\", \"rejected\", \"rejected_candidate\",\n        \"solved\", \"carrier\");", "modifier": "private static final", "type": "List<String>", "declarator": "STATUS_VALUES = Arrays.asList(\"candidate\", \"rejected\", \"rejected_candidate\",\n        \"solved\", \"carrier\")", "var_name": "STATUS_VALUES"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<PatientIndexer> mocker =\n        new MockitoComponentMockingRule<>(SolrPatientIndexer.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<PatientIndexer>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(SolrPatientIndexer.class)", "var_name": "mocker"}, {"original_string": "@Mock\n    private Patient patient;", "modifier": "@Mock\n    private", "type": "Patient", "declarator": "patient", "var_name": "patient"}, {"original_string": "@Mock\n    private SolrClient server;", "modifier": "@Mock\n    private", "type": "SolrClient", "declarator": "server", "var_name": "server"}, {"original_string": "@Mock\n    private ComponentManager cm;", "modifier": "@Mock\n    private", "type": "ComponentManager", "declarator": "cm", "var_name": "cm"}, {"original_string": "@Mock\n    private Provider<ComponentManager> mockProvider;", "modifier": "@Mock\n    private", "type": "Provider<ComponentManager>", "declarator": "mockProvider", "var_name": "mockProvider"}, {"original_string": "@Mock\n    private VocabularyManager vm;", "modifier": "@Mock\n    private", "type": "VocabularyManager", "declarator": "vm", "var_name": "vm"}, {"original_string": "@Mock\n    private Provider<XWikiContext> provider;", "modifier": "@Mock\n    private", "type": "Provider<XWikiContext>", "declarator": "provider", "var_name": "provider"}, {"original_string": "@Mock\n    private XWiki xwiki;", "modifier": "@Mock\n    private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}, {"original_string": "private PatientIndexer patientIndexer;", "modifier": "private", "type": "PatientIndexer", "declarator": "patientIndexer", "var_name": "patientIndexer"}, {"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private QueryManager qm;", "modifier": "private", "type": "QueryManager", "declarator": "qm", "var_name": "qm"}, {"original_string": "private PatientRepository patientRepository;", "modifier": "private", "type": "PatientRepository", "declarator": "patientRepository", "var_name": "patientRepository"}, {"original_string": "private EntityPermissionsManager permissions;", "modifier": "private", "type": "EntityPermissionsManager", "declarator": "permissions", "var_name": "permissions"}, {"original_string": "private DocumentReference patientDocReference;", "modifier": "private", "type": "DocumentReference", "declarator": "patientDocReference", "var_name": "patientDocReference"}], "file": "components/patient-data/indexing/src/test/java/org/phenotips/data/indexing/internal/SolrPatientIndexerTest.java"}, "test_case": {"identifier": "deleteThrowsSolrException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteThrowsSolrException() throws IOException, SolrServerException\n    {\n        doReturn(this.patientDocReference).when(this.patient).getDocumentReference();\n        doThrow(new SolrServerException(\"commit failed\")).when(this.server).commit();\n        this.patientIndexer.delete(this.patient);\n        verify(this.logger).warn(\"Failed to delete from Solr: {}\", \"commit failed\");\n    }", "signature": "void deleteThrowsSolrException()", "full_signature": "@Test public void deleteThrowsSolrException()", "class_method_signature": "SolrPatientIndexerTest.deleteThrowsSolrException()", "testcase": true, "constructor": false, "invocations": ["getDocumentReference", "when", "doReturn", "commit", "when", "doThrow", "delete", "warn", "verify"]}, "focal_class": {"identifier": "SolrPatientIndexer", "superclass": "", "interfaces": "implements PatientIndexer, Initializable", "fields": [{"original_string": "private static final String GENES_KEY = \"genes\";", "modifier": "private static final", "type": "String", "declarator": "GENES_KEY = \"genes\"", "var_name": "GENES_KEY"}, {"original_string": "private static final String SOLR_FIELD_CANDIDATE_GENES = \"candidate_genes\";", "modifier": "private static final", "type": "String", "declarator": "SOLR_FIELD_CANDIDATE_GENES = \"candidate_genes\"", "var_name": "SOLR_FIELD_CANDIDATE_GENES"}, {"original_string": "private static final String SOLR_GENE_STATUS_FIELD_POSTFIX = \"_genes\";", "modifier": "private static final", "type": "String", "declarator": "SOLR_GENE_STATUS_FIELD_POSTFIX = \"_genes\"", "var_name": "SOLR_GENE_STATUS_FIELD_POSTFIX"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private SolrCoreContainerHandler cores;", "modifier": "@Inject\n    private", "type": "SolrCoreContainerHandler", "declarator": "cores", "var_name": "cores"}, {"original_string": "private SolrClient server;", "modifier": "private", "type": "SolrClient", "declarator": "server", "var_name": "server"}, {"original_string": "@Inject\n    private QueryManager qm;", "modifier": "@Inject\n    private", "type": "QueryManager", "declarator": "qm", "var_name": "qm"}, {"original_string": "@Inject\n    private PatientRepository patientRepository;", "modifier": "@Inject\n    private", "type": "PatientRepository", "declarator": "patientRepository", "var_name": "patientRepository"}, {"original_string": "@Inject\n    private EntityPermissionsManager permissions;", "modifier": "@Inject\n    private", "type": "EntityPermissionsManager", "declarator": "permissions", "var_name": "permissions"}, {"original_string": "@Inject\n    @Named(\"hpo\")\n    private Vocabulary ontologyService;", "modifier": "@Inject\n    @Named(\"hpo\")\n    private", "type": "Vocabulary", "declarator": "ontologyService", "var_name": "ontologyService"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> referenceSerializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "referenceSerializer", "var_name": "referenceSerializer"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "SolrPatientIndexer.initialize()", "testcase": false, "constructor": false}, {"identifier": "index", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "signature": "void index(Patient patient)", "full_signature": "@Override public void index(Patient patient)", "class_method_signature": "SolrPatientIndexer.index(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "internalIndex", "parameters": "(Patient patient, boolean commit)", "modifiers": "private", "return": "void", "signature": "void internalIndex(Patient patient, boolean commit)", "full_signature": "private void internalIndex(Patient patient, boolean commit)", "class_method_signature": "SolrPatientIndexer.internalIndex(Patient patient, boolean commit)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Patient patient)", "full_signature": "@Override public void delete(Patient patient)", "class_method_signature": "SolrPatientIndexer.delete(Patient patient)", "testcase": false, "constructor": false}, {"identifier": "reindex", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reindex()", "full_signature": "@Override public void reindex()", "class_method_signature": "SolrPatientIndexer.reindex()", "testcase": false, "constructor": false}, {"identifier": "addGenes", "parameters": "(SolrInputDocument input, Patient patient)", "modifiers": "private", "return": "void", "signature": "void addGenes(SolrInputDocument input, Patient patient)", "full_signature": "private void addGenes(SolrInputDocument input, Patient patient)", "class_method_signature": "SolrPatientIndexer.addGenes(SolrInputDocument input, Patient patient)", "testcase": false, "constructor": false}], "file": "components/patient-data/indexing/src/main/java/org/phenotips/data/indexing/internal/SolrPatientIndexer.java"}, "focal_method": {"identifier": "delete", "parameters": "(Patient patient)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void delete(Patient patient)\n    {\n        try {\n            this.server.deleteByQuery(\"document:\"\n                + ClientUtils.escapeQueryChars(this.referenceSerializer.serialize(patient.getDocumentReference())));\n            this.server.commit();\n        } catch (SolrServerException ex) {\n            this.logger.warn(\"Failed to delete from Solr: {}\", ex.getMessage());\n        } catch (IOException ex) {\n            this.logger.warn(\"Error occurred while deleting Solr documents: {}\", ex.getMessage());\n        }\n    }", "signature": "void delete(Patient patient)", "full_signature": "@Override public void delete(Patient patient)", "class_method_signature": "SolrPatientIndexer.delete(Patient patient)", "testcase": false, "constructor": false, "invocations": ["deleteByQuery", "escapeQueryChars", "serialize", "getDocumentReference", "commit", "warn", "getMessage", "warn", "getMessage"]}, "repository": {"repo_id": 2685841, "url": "https://github.com/phenotips/phenotips", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 87, "size": 1662205, "license": "licensed"}}