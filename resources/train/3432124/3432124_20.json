{"test_class": {"identifier": "TestAbstractXClock", "superclass": "", "interfaces": "implements XClockTest", "fields": [], "file": "xnet/xsim/src/test/java/com/xtructure/xsim/impl/TestAbstractXClock.java"}, "test_case": {"identifier": "setTimeOnBadTimeDoesNothing", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalArgumentException.class) public final", "return": "void", "body": "@Test(expectedExceptions = IllegalArgumentException.class)\n    public final void setTimeOnBadTimeDoesNothing(){\n    \tfinal AbstractXClock<PhaseImpl> CLOCK = new AbstractXClockImpl(PhaseImpl.values());\n    \tfinal XTime<PhaseImpl> NEW_TIME = new XTime<PhaseImpl>(){\n\t\t\t@Override\n\t\t\tpublic PhaseImpl getPhase() {return null;}\n\t\t\t@Override\n\t\t\tpublic long getTick() {return 0;}\n\t\t\t@Override\n\t\t\tpublic int compareTo(XTime<PhaseImpl> o) {return 0;}\n    \t};\n    \tCLOCK.setTime(NEW_TIME);\n    }", "signature": "void setTimeOnBadTimeDoesNothing()", "full_signature": "@Test(expectedExceptions = IllegalArgumentException.class) public final void setTimeOnBadTimeDoesNothing()", "class_method_signature": "TestAbstractXClock.setTimeOnBadTimeDoesNothing()", "testcase": true, "constructor": false, "invocations": ["values", "setTime"]}, "focal_class": {"identifier": "AbstractXClock", "superclass": "", "interfaces": "implements XClock<F>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n        .getLogger(AbstractXClock.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n        .getLogger(AbstractXClock.class)", "var_name": "LOGGER"}, {"original_string": "private SimpleXTime<F> _time;", "modifier": "private", "type": "SimpleXTime<F>", "declarator": "_time", "var_name": "_time"}, {"original_string": "private final Lock _timeLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "_timeLock = new ReentrantLock()", "var_name": "_timeLock"}, {"original_string": "private final List<F> _allPhases;", "modifier": "private final", "type": "List<F>", "declarator": "_allPhases", "var_name": "_allPhases"}], "methods": [{"identifier": "AbstractXClock", "parameters": "(\n            final long tick,\n            final F phase,\n            final F[] allPhases)", "modifiers": "protected", "return": "", "signature": " AbstractXClock(\n            final long tick,\n            final F phase,\n            final F[] allPhases)", "full_signature": "protected  AbstractXClock(\n            final long tick,\n            final F phase,\n            final F[] allPhases)", "class_method_signature": "AbstractXClock.AbstractXClock(\n            final long tick,\n            final F phase,\n            final F[] allPhases)", "testcase": false, "constructor": true}, {"identifier": "AbstractXClock", "parameters": "(\n            final F[] allPhases)", "modifiers": "protected", "return": "", "signature": " AbstractXClock(\n            final F[] allPhases)", "full_signature": "protected  AbstractXClock(\n            final F[] allPhases)", "class_method_signature": "AbstractXClock.AbstractXClock(\n            final F[] allPhases)", "testcase": false, "constructor": true}, {"identifier": "getTime", "parameters": "()", "modifiers": "@Override public final", "return": "XTime<F>", "signature": "XTime<F> getTime()", "full_signature": "@Override public final XTime<F> getTime()", "class_method_signature": "AbstractXClock.getTime()", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "()", "modifiers": "@Override public final", "return": "XTime<F>", "signature": "XTime<F> increment()", "full_signature": "@Override public final XTime<F> increment()", "class_method_signature": "AbstractXClock.increment()", "testcase": false, "constructor": false}, {"identifier": "setTime", "parameters": "(\n            final XTime<F> time)", "modifiers": "@Override public", "return": "void", "signature": "void setTime(\n            final XTime<F> time)", "full_signature": "@Override public void setTime(\n            final XTime<F> time)", "class_method_signature": "AbstractXClock.setTime(\n            final XTime<F> time)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(\n            final XClock<F> other)", "modifiers": "@Override public final", "return": "int", "signature": "int compareTo(\n            final XClock<F> other)", "full_signature": "@Override public final int compareTo(\n            final XClock<F> other)", "class_method_signature": "AbstractXClock.compareTo(\n            final XClock<F> other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(\n            final Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(\n            final Object obj)", "full_signature": "@Override public final boolean equals(\n            final Object obj)", "class_method_signature": "AbstractXClock.equals(\n            final Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "AbstractXClock.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "AbstractXClock.toString()", "testcase": false, "constructor": false}], "file": "xnet/xsim/src/main/java/com/xtructure/xsim/impl/AbstractXClock.java"}, "focal_method": {"identifier": "setTime", "parameters": "(\n            final XTime<F> time)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setTime(\n            final XTime<F> time)\n    {\n        LOGGER.trace(\"begin {}.setTime({})\", new Object[] {\n                getClass().getSimpleName(), time });\n\n        _timeLock.lock();\n        try\n        {\n            _time = new SimpleXTime<F>(time.getTick(), time.getPhase());\n            LOGGER.trace(\"end {}.setTime()\", getClass().getSimpleName());\n        }\n        finally\n        {\n            _timeLock.unlock();\n        }\n    }", "signature": "void setTime(\n            final XTime<F> time)", "full_signature": "@Override public void setTime(\n            final XTime<F> time)", "class_method_signature": "AbstractXClock.setTime(\n            final XTime<F> time)", "testcase": false, "constructor": false, "invocations": ["trace", "getSimpleName", "getClass", "lock", "getTick", "getPhase", "trace", "getSimpleName", "getClass", "unlock"]}, "repository": {"repo_id": 3432124, "url": "https://github.com/xtructure/xnet-public", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 5582, "license": "licensed"}}