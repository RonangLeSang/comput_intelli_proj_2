{"test_class": {"identifier": "DoubleArrayTest", "superclass": "extends AbstractTermIdTrieTest<DoubleArray>", "interfaces": "", "fields": [], "file": "trie4j/src/test/java/org/trie4j/doublearray/DoubleArrayTest.java"}, "test_case": {"identifier": "test_getNode_traverse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test_getNode_traverse() throws Exception{\n\t\tTrie t = trieWithWords(\"hello\", \"helloworld\", \"hi\", \"howsgoing\", \"hell\", \"helloworld2\", \"world\");\n\t\tStringWriter sw = new StringWriter();\n\t\tPrintWriter w = new PrintWriter(sw);\n\t\tprint(t.getRoot(), 0, w);\n\t\tString expected = StreamUtil.readAsString(getClass().getResourceAsStream(\"DoubleArrayTest_dump_expected.txt\"), \"UTF-8\");\n\t\tString actual = sw.toString();\n\t\tAssert.assertEquals(expected, actual);\n\t}", "signature": "void test_getNode_traverse()", "full_signature": "@Test public void test_getNode_traverse()", "class_method_signature": "DoubleArrayTest.test_getNode_traverse()", "testcase": true, "constructor": false, "invocations": ["trieWithWords", "print", "getRoot", "readAsString", "getResourceAsStream", "getClass", "toString", "assertEquals"]}, "focal_class": {"identifier": "DoubleArray", "superclass": "extends AbstractTermIdTrie", "interfaces": "implements Externalizable, TermIdTrie", "fields": [{"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private int nodeSize;", "modifier": "private", "type": "int", "declarator": "nodeSize", "var_name": "nodeSize"}, {"original_string": "private int[] base;", "modifier": "private", "type": "int[]", "declarator": "base", "var_name": "base"}, {"original_string": "private int[] check;", "modifier": "private", "type": "int[]", "declarator": "check", "var_name": "check"}, {"original_string": "private int firstEmptyCheck = 1;", "modifier": "private", "type": "int", "declarator": "firstEmptyCheck = 1", "var_name": "firstEmptyCheck"}, {"original_string": "private int last;", "modifier": "private", "type": "int", "declarator": "last", "var_name": "last"}, {"original_string": "private SuccinctBitVector term;", "modifier": "private", "type": "SuccinctBitVector", "declarator": "term", "var_name": "term"}, {"original_string": "private Set<Character> chars = new TreeSet<Character>();", "modifier": "private", "type": "Set<Character>", "declarator": "chars = new TreeSet<Character>()", "var_name": "chars"}, {"original_string": "private char[] charToCode = new char[Character.MAX_VALUE+1];", "modifier": "private", "type": "char[]", "declarator": "charToCode = new char[Character.MAX_VALUE+1]", "var_name": "charToCode"}, {"original_string": "private static final int BASE_EMPTY = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "BASE_EMPTY = Integer.MAX_VALUE", "var_name": "BASE_EMPTY"}, {"original_string": "private static final DoubleArrayNode[] emptyNodes = {};", "modifier": "private static final", "type": "DoubleArrayNode[]", "declarator": "emptyNodes = {}", "var_name": "emptyNodes"}], "methods": [{"identifier": "DoubleArray", "parameters": "()", "modifiers": "public", "return": "", "signature": " DoubleArray()", "full_signature": "public  DoubleArray()", "class_method_signature": "DoubleArray.DoubleArray()", "testcase": false, "constructor": true}, {"identifier": "DoubleArray", "parameters": "(Trie trie)", "modifiers": "public", "return": "", "signature": " DoubleArray(Trie trie)", "full_signature": "public  DoubleArray(Trie trie)", "class_method_signature": "DoubleArray.DoubleArray(Trie trie)", "testcase": false, "constructor": true}, {"identifier": "DoubleArray", "parameters": "(Trie trie, int arraySize)", "modifiers": "public", "return": "", "signature": " DoubleArray(Trie trie, int arraySize)", "full_signature": "public  DoubleArray(Trie trie, int arraySize)", "class_method_signature": "DoubleArray.DoubleArray(Trie trie, int arraySize)", "testcase": false, "constructor": true}, {"identifier": "DoubleArray", "parameters": "(Trie trie, int arraySize, TermNodeListener listener)", "modifiers": "public", "return": "", "signature": " DoubleArray(Trie trie, int arraySize, TermNodeListener listener)", "full_signature": "public  DoubleArray(Trie trie, int arraySize, TermNodeListener listener)", "class_method_signature": "DoubleArray.DoubleArray(Trie trie, int arraySize, TermNodeListener listener)", "testcase": false, "constructor": true}, {"identifier": "nodeSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int nodeSize()", "full_signature": "@Override public int nodeSize()", "class_method_signature": "DoubleArray.nodeSize()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "DoubleArray.size()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "TermIdNode", "signature": "TermIdNode getRoot()", "full_signature": "@Override public TermIdNode getRoot()", "class_method_signature": "DoubleArray.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getBase", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getBase()", "full_signature": "public int[] getBase()", "class_method_signature": "DoubleArray.getBase()", "testcase": false, "constructor": false}, {"identifier": "getCheck", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getCheck()", "full_signature": "public int[] getCheck()", "class_method_signature": "DoubleArray.getCheck()", "testcase": false, "constructor": false}, {"identifier": "getTerm", "parameters": "()", "modifiers": "public", "return": "BitSet", "signature": "BitSet getTerm()", "full_signature": "public BitSet getTerm()", "class_method_signature": "DoubleArray.getTerm()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String text)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(String text)", "full_signature": "@Override public boolean contains(String text)", "class_method_signature": "DoubleArray.contains(String text)", "testcase": false, "constructor": false}, {"identifier": "getNodeId", "parameters": "(String text)", "modifiers": "public", "return": "int", "signature": "int getNodeId(String text)", "full_signature": "public int getNodeId(String text)", "class_method_signature": "DoubleArray.getNodeId(String text)", "testcase": false, "constructor": false}, {"identifier": "getTermId", "parameters": "(String text)", "modifiers": "@Override public", "return": "int", "signature": "int getTermId(String text)", "full_signature": "@Override public int getTermId(String text)", "class_method_signature": "DoubleArray.getTermId(String text)", "testcase": false, "constructor": false}, {"identifier": "findShortestWord", "parameters": "(CharSequence chars, int start, int end, StringBuilder word)", "modifiers": "@Override public", "return": "int", "signature": "int findShortestWord(CharSequence chars, int start, int end, StringBuilder word)", "full_signature": "@Override public int findShortestWord(CharSequence chars, int start, int end, StringBuilder word)", "class_method_signature": "DoubleArray.findShortestWord(CharSequence chars, int start, int end, StringBuilder word)", "testcase": false, "constructor": false}, {"identifier": "findLongestWord", "parameters": "(CharSequence chars, int start, int end, StringBuilder word)", "modifiers": "@Override public", "return": "int", "signature": "int findLongestWord(CharSequence chars, int start, int end, StringBuilder word)", "full_signature": "@Override public int findLongestWord(CharSequence chars, int start, int end, StringBuilder word)", "class_method_signature": "DoubleArray.findLongestWord(CharSequence chars, int start, int end, StringBuilder word)", "testcase": false, "constructor": false}, {"identifier": "commonPrefixSearch", "parameters": "(String query)", "modifiers": "@Override public", "return": "Iterable<String>", "signature": "Iterable<String> commonPrefixSearch(String query)", "full_signature": "@Override public Iterable<String> commonPrefixSearch(String query)", "class_method_signature": "DoubleArray.commonPrefixSearch(String query)", "testcase": false, "constructor": false}, {"identifier": "commonPrefixSearchWithTermId", "parameters": "(\n\t\t\tString query)", "modifiers": "@Override public", "return": "Iterable<Pair<String, Integer>>", "signature": "Iterable<Pair<String, Integer>> commonPrefixSearchWithTermId(\n\t\t\tString query)", "full_signature": "@Override public Iterable<Pair<String, Integer>> commonPrefixSearchWithTermId(\n\t\t\tString query)", "class_method_signature": "DoubleArray.commonPrefixSearchWithTermId(\n\t\t\tString query)", "testcase": false, "constructor": false}, {"identifier": "predictiveSearch", "parameters": "(String prefix)", "modifiers": "@Override public", "return": "Iterable<String>", "signature": "Iterable<String> predictiveSearch(String prefix)", "full_signature": "@Override public Iterable<String> predictiveSearch(String prefix)", "class_method_signature": "DoubleArray.predictiveSearch(String prefix)", "testcase": false, "constructor": false}, {"identifier": "predictiveSearchWithTermId", "parameters": "(\n\t\t\tString prefix)", "modifiers": "@Override public", "return": "Iterable<Pair<String, Integer>>", "signature": "Iterable<Pair<String, Integer>> predictiveSearchWithTermId(\n\t\t\tString prefix)", "full_signature": "@Override public Iterable<Pair<String, Integer>> predictiveSearchWithTermId(\n\t\t\tString prefix)", "class_method_signature": "DoubleArray.predictiveSearchWithTermId(\n\t\t\tString prefix)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "DoubleArray.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(OutputStream os)", "modifiers": "public", "return": "void", "signature": "void save(OutputStream os)", "full_signature": "public void save(OutputStream os)", "class_method_signature": "DoubleArray.save(OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@Override public void readExternal(ObjectInput in)", "class_method_signature": "DoubleArray.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(InputStream is)", "modifiers": "public", "return": "void", "signature": "void load(InputStream is)", "full_signature": "public void load(InputStream is)", "class_method_signature": "DoubleArray.load(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "trimToSize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void trimToSize()", "full_signature": "@Override public void trimToSize()", "class_method_signature": "DoubleArray.trimToSize()", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(Writer w)", "modifiers": "@Override public", "return": "void", "signature": "void dump(Writer w)", "full_signature": "@Override public void dump(Writer w)", "class_method_signature": "DoubleArray.dump(Writer w)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Node node, int nodeIndex,\n\t\t\tFastBitSet bs, TermNodeListener listener)", "modifiers": "private", "return": "void", "signature": "void build(Node node, int nodeIndex,\n\t\t\tFastBitSet bs, TermNodeListener listener)", "full_signature": "private void build(Node node, int nodeIndex,\n\t\t\tFastBitSet bs, TermNodeListener listener)", "class_method_signature": "DoubleArray.build(Node node, int nodeIndex,\n\t\t\tFastBitSet bs, TermNodeListener listener)", "testcase": false, "constructor": false}, {"identifier": "newDoubleArrayNode", "parameters": "(int id)", "modifiers": "private", "return": "DoubleArrayNode", "signature": "DoubleArrayNode newDoubleArrayNode(int id)", "full_signature": "private DoubleArrayNode newDoubleArrayNode(int id)", "class_method_signature": "DoubleArray.newDoubleArrayNode(int id)", "testcase": false, "constructor": false}, {"identifier": "newDoubleArrayNode", "parameters": "(int id, char s)", "modifiers": "private", "return": "DoubleArrayNode", "signature": "DoubleArrayNode newDoubleArrayNode(int id, char s)", "full_signature": "private DoubleArrayNode newDoubleArrayNode(int id, char s)", "class_method_signature": "DoubleArray.newDoubleArrayNode(int id, char s)", "testcase": false, "constructor": false}, {"identifier": "findCharId", "parameters": "(char c)", "modifiers": "private", "return": "int", "signature": "int findCharId(char c)", "full_signature": "private int findCharId(char c)", "class_method_signature": "DoubleArray.findCharId(char c)", "testcase": false, "constructor": false}, {"identifier": "findInsertOffset", "parameters": "(int[] heads, int minHead, int maxHead)", "modifiers": "private", "return": "int", "signature": "int findInsertOffset(int[] heads, int minHead, int maxHead)", "full_signature": "private int findInsertOffset(int[] heads, int minHead, int maxHead)", "class_method_signature": "DoubleArray.findInsertOffset(int[] heads, int minHead, int maxHead)", "testcase": false, "constructor": false}, {"identifier": "getCharId", "parameters": "(char c)", "modifiers": "private", "return": "int", "signature": "int getCharId(char c)", "full_signature": "private int getCharId(char c)", "class_method_signature": "DoubleArray.getCharId(char c)", "testcase": false, "constructor": false}, {"identifier": "extend", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void extend(int i)", "full_signature": "private void extend(int i)", "class_method_signature": "DoubleArray.extend(int i)", "testcase": false, "constructor": false}, {"identifier": "findFirstEmptyCheck", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int findFirstEmptyCheck()", "full_signature": "private int findFirstEmptyCheck()", "class_method_signature": "DoubleArray.findFirstEmptyCheck()", "testcase": false, "constructor": false}, {"identifier": "findNextEmptyCheck", "parameters": "(int i)", "modifiers": "private", "return": "int", "signature": "int findNextEmptyCheck(int i)", "full_signature": "private int findNextEmptyCheck(int i)", "class_method_signature": "DoubleArray.findNextEmptyCheck(int i)", "testcase": false, "constructor": false}, {"identifier": "setCheck", "parameters": "(int index, int id)", "modifiers": "private", "return": "void", "signature": "void setCheck(int index, int id)", "full_signature": "private void setCheck(int index, int id)", "class_method_signature": "DoubleArray.setCheck(int index, int id)", "testcase": false, "constructor": false}], "file": "trie4j/src/main/java/org/trie4j/doublearray/DoubleArray.java"}, "focal_method": {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "TermIdNode", "body": "@Override\n\tpublic TermIdNode getRoot() {\n\t\treturn newDoubleArrayNode(0);\n\t}", "signature": "TermIdNode getRoot()", "full_signature": "@Override public TermIdNode getRoot()", "class_method_signature": "DoubleArray.getRoot()", "testcase": false, "constructor": false, "invocations": ["newDoubleArrayNode"]}, "repository": {"repo_id": 3999381, "url": "https://github.com/takawitter/trie4j", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 136, "size": 2037, "license": "licensed"}}