{"test_class": {"identifier": "DatasetImporterForMetaTableTest", "superclass": "", "interfaces": "", "fields": [], "file": "eol-globi-data-sources/src/test/java/org/eol/globi/data/DatasetImporterForMetaTableTest.java"}, "test_case": {"identifier": "parseValueEOL", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseValueEOL() {\n        final DatasetImporterForMetaTable.Column column = new DatasetImporterForMetaTable.Column(\"foo\", \"string\");\n        column.setValueUrl(\"http://eol.org/pages/{foo}\");\n        final String parsedValue = DatasetImporterForMetaTable.parseValue(\"123\", column);\n        assertThat(parsedValue, is(\"EOL:123\"));\n    }", "signature": "void parseValueEOL()", "full_signature": "@Test public void parseValueEOL()", "class_method_signature": "DatasetImporterForMetaTableTest.parseValueEOL()", "testcase": true, "constructor": false, "invocations": ["setValueUrl", "parseValue", "assertThat", "is"]}, "focal_class": {"identifier": "DatasetImporterForMetaTable", "superclass": "extends DatasetImporterWithListener", "interfaces": "", "fields": [{"original_string": "public static final String AUTHOR = \"author\";", "modifier": "public static final", "type": "String", "declarator": "AUTHOR = \"author\"", "var_name": "AUTHOR"}, {"original_string": "public static final String TITLE = \"title\";", "modifier": "public static final", "type": "String", "declarator": "TITLE = \"title\"", "var_name": "TITLE"}, {"original_string": "public static final String YEAR = \"year\";", "modifier": "public static final", "type": "String", "declarator": "YEAR = \"year\"", "var_name": "YEAR"}, {"original_string": "public static final String JOURNAL = \"journal\";", "modifier": "public static final", "type": "String", "declarator": "JOURNAL = \"journal\"", "var_name": "JOURNAL"}, {"original_string": "public static final String VOLUME = \"volume\";", "modifier": "public static final", "type": "String", "declarator": "VOLUME = \"volume\"", "var_name": "VOLUME"}, {"original_string": "public static final String NUMBER = \"number\";", "modifier": "public static final", "type": "String", "declarator": "NUMBER = \"number\"", "var_name": "NUMBER"}, {"original_string": "public static final String PAGES = \"pages\";", "modifier": "public static final", "type": "String", "declarator": "PAGES = \"pages\"", "var_name": "PAGES"}, {"original_string": "public static final String LONGITUDE = \"http://rs.tdwg.org/dwc/terms/decimalLongitude\";", "modifier": "public static final", "type": "String", "declarator": "LONGITUDE = \"http://rs.tdwg.org/dwc/terms/decimalLongitude\"", "var_name": "LONGITUDE"}, {"original_string": "public static final String LATITUDE = \"http://rs.tdwg.org/dwc/terms/decimalLatitude\";", "modifier": "public static final", "type": "String", "declarator": "LATITUDE = \"http://rs.tdwg.org/dwc/terms/decimalLatitude\"", "var_name": "LATITUDE"}, {"original_string": "public static final String EVENT_DATE = \"http://rs.tdwg.org/dwc/terms/eventDate\";", "modifier": "public static final", "type": "String", "declarator": "EVENT_DATE = \"http://rs.tdwg.org/dwc/terms/eventDate\"", "var_name": "EVENT_DATE"}, {"original_string": "private Dataset dataset;", "modifier": "private", "type": "Dataset", "declarator": "dataset", "var_name": "dataset"}], "methods": [{"identifier": "DatasetImporterForMetaTable", "parameters": "(ParserFactory parserFactory, NodeFactory nodeFactory)", "modifiers": "public", "return": "", "signature": " DatasetImporterForMetaTable(ParserFactory parserFactory, NodeFactory nodeFactory)", "full_signature": "public  DatasetImporterForMetaTable(ParserFactory parserFactory, NodeFactory nodeFactory)", "class_method_signature": "DatasetImporterForMetaTable.DatasetImporterForMetaTable(ParserFactory parserFactory, NodeFactory nodeFactory)", "testcase": false, "constructor": true}, {"identifier": "importStudy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void importStudy()", "full_signature": "@Override public void importStudy()", "class_method_signature": "DatasetImporterForMetaTable.importStudy()", "testcase": false, "constructor": false}, {"identifier": "collectTables", "parameters": "(Dataset dataset)", "modifiers": "static", "return": "List<JsonNode>", "signature": "List<JsonNode> collectTables(Dataset dataset)", "full_signature": "static List<JsonNode> collectTables(Dataset dataset)", "class_method_signature": "DatasetImporterForMetaTable.collectTables(Dataset dataset)", "testcase": false, "constructor": false}, {"identifier": "generateTablesForNHMResources", "parameters": "(List<JsonNode> tableList, Dataset dataset)", "modifiers": "private static", "return": "void", "signature": "void generateTablesForNHMResources(List<JsonNode> tableList, Dataset dataset)", "full_signature": "private static void generateTablesForNHMResources(List<JsonNode> tableList, Dataset dataset)", "class_method_signature": "DatasetImporterForMetaTable.generateTablesForNHMResources(List<JsonNode> tableList, Dataset dataset)", "testcase": false, "constructor": false}, {"identifier": "isNHMResource", "parameters": "(JsonNode config)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNHMResource(JsonNode config)", "full_signature": "private static boolean isNHMResource(JsonNode config)", "class_method_signature": "DatasetImporterForMetaTable.isNHMResource(JsonNode config)", "testcase": false, "constructor": false}, {"identifier": "importTable", "parameters": "(InteractionListener interactionListener, TableParserFactory tableFactory, JsonNode tableConfig, Dataset dataset, ImportLogger importLogger)", "modifiers": "static", "return": "void", "signature": "void importTable(InteractionListener interactionListener, TableParserFactory tableFactory, JsonNode tableConfig, Dataset dataset, ImportLogger importLogger)", "full_signature": "static void importTable(InteractionListener interactionListener, TableParserFactory tableFactory, JsonNode tableConfig, Dataset dataset, ImportLogger importLogger)", "class_method_signature": "DatasetImporterForMetaTable.importTable(InteractionListener interactionListener, TableParserFactory tableFactory, JsonNode tableConfig, Dataset dataset, ImportLogger importLogger)", "testcase": false, "constructor": false}, {"identifier": "columnsForSchema", "parameters": "(JsonNode table, JsonNode tableSchema, Dataset dataset)", "modifiers": "private static", "return": "List<Column>", "signature": "List<Column> columnsForSchema(JsonNode table, JsonNode tableSchema, Dataset dataset)", "full_signature": "private static List<Column> columnsForSchema(JsonNode table, JsonNode tableSchema, Dataset dataset)", "class_method_signature": "DatasetImporterForMetaTable.columnsForSchema(JsonNode table, JsonNode tableSchema, Dataset dataset)", "testcase": false, "constructor": false}, {"identifier": "columnsFromExternalSchema", "parameters": "(JsonNode tableSchema, Dataset dataset)", "modifiers": "static", "return": "List<Column>", "signature": "List<Column> columnsFromExternalSchema(JsonNode tableSchema, Dataset dataset)", "full_signature": "static List<Column> columnsFromExternalSchema(JsonNode tableSchema, Dataset dataset)", "class_method_signature": "DatasetImporterForMetaTable.columnsFromExternalSchema(JsonNode tableSchema, Dataset dataset)", "testcase": false, "constructor": false}, {"identifier": "parseNullValues", "parameters": "(JsonNode nullValues)", "modifiers": "static private", "return": "List<String>", "signature": "List<String> parseNullValues(JsonNode nullValues)", "full_signature": "static private List<String> parseNullValues(JsonNode nullValues)", "class_method_signature": "DatasetImporterForMetaTable.parseNullValues(JsonNode nullValues)", "testcase": false, "constructor": false}, {"identifier": "generateReferenceCitation", "parameters": "(Map<String, String> properties)", "modifiers": "static", "return": "String", "signature": "String generateReferenceCitation(Map<String, String> properties)", "full_signature": "static String generateReferenceCitation(Map<String, String> properties)", "class_method_signature": "DatasetImporterForMetaTable.generateReferenceCitation(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder citation, String value, String suffix, String prefix)", "modifiers": "public static", "return": "void", "signature": "void append(StringBuilder citation, String value, String suffix, String prefix)", "full_signature": "public static void append(StringBuilder citation, String value, String suffix, String prefix)", "class_method_signature": "DatasetImporterForMetaTable.append(StringBuilder citation, String value, String suffix, String prefix)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder citation, String value, String continuation)", "modifiers": "public static", "return": "void", "signature": "void append(StringBuilder citation, String value, String continuation)", "full_signature": "public static void append(StringBuilder citation, String value, String continuation)", "class_method_signature": "DatasetImporterForMetaTable.append(StringBuilder citation, String value, String continuation)", "testcase": false, "constructor": false}, {"identifier": "generateInteractionType", "parameters": "(Map<String, String> properties, InteractTypeMapper mapper)", "modifiers": "public static", "return": "InteractType", "signature": "InteractType generateInteractionType(Map<String, String> properties, InteractTypeMapper mapper)", "full_signature": "public static InteractType generateInteractionType(Map<String, String> properties, InteractTypeMapper mapper)", "class_method_signature": "DatasetImporterForMetaTable.generateInteractionType(Map<String, String> properties, InteractTypeMapper mapper)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getConfig()", "full_signature": "public JsonNode getConfig()", "class_method_signature": "DatasetImporterForMetaTable.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getBaseUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaseUrl()", "full_signature": "public String getBaseUrl()", "class_method_signature": "DatasetImporterForMetaTable.getBaseUrl()", "testcase": false, "constructor": false}, {"identifier": "importAll", "parameters": "(InteractionListener interactionListener,\n                                 List<Column> columnNames,\n                                 CSVParse csvParse, JsonNode config, ImportLogger importLogger)", "modifiers": "public static", "return": "void", "signature": "void importAll(InteractionListener interactionListener,\n                                 List<Column> columnNames,\n                                 CSVParse csvParse, JsonNode config, ImportLogger importLogger)", "full_signature": "public static void importAll(InteractionListener interactionListener,\n                                 List<Column> columnNames,\n                                 CSVParse csvParse, JsonNode config, ImportLogger importLogger)", "class_method_signature": "DatasetImporterForMetaTable.importAll(InteractionListener interactionListener,\n                                 List<Column> columnNames,\n                                 CSVParse csvParse, JsonNode config, ImportLogger importLogger)", "testcase": false, "constructor": false}, {"identifier": "parseColumnValue", "parameters": "(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "modifiers": "public static", "return": "void", "signature": "void parseColumnValue(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "full_signature": "public static void parseColumnValue(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "class_method_signature": "DatasetImporterForMetaTable.parseColumnValue(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "testcase": false, "constructor": false}, {"identifier": "logParseWarning", "parameters": "(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "modifiers": "public static", "return": "void", "signature": "void logParseWarning(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "full_signature": "public static void logParseWarning(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "class_method_signature": "DatasetImporterForMetaTable.logParseWarning(ImportLogger importLogger, Map<String, String> mappedLine, String value, Column column)", "testcase": false, "constructor": false}, {"identifier": "valueOrDefault", "parameters": "(String value, Column column)", "modifiers": "public static", "return": "String", "signature": "String valueOrDefault(String value, Column column)", "full_signature": "public static String valueOrDefault(String value, Column column)", "class_method_signature": "DatasetImporterForMetaTable.valueOrDefault(String value, Column column)", "testcase": false, "constructor": false}, {"identifier": "setInteractionType", "parameters": "(Map<String, String> properties, InteractType type)", "modifiers": "public static", "return": "void", "signature": "void setInteractionType(Map<String, String> properties, InteractType type)", "full_signature": "public static void setInteractionType(Map<String, String> properties, InteractType type)", "class_method_signature": "DatasetImporterForMetaTable.setInteractionType(Map<String, String> properties, InteractType type)", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(String value, Column column)", "modifiers": "public static", "return": "String", "signature": "String parseValue(String value, Column column)", "full_signature": "public static String parseValue(String value, Column column)", "class_method_signature": "DatasetImporterForMetaTable.parseValue(String value, Column column)", "testcase": false, "constructor": false}, {"identifier": "populateValueUrlOrNull", "parameters": "(String value, Column column, String convertedValue)", "modifiers": "private static", "return": "String", "signature": "String populateValueUrlOrNull(String value, Column column, String convertedValue)", "full_signature": "private static String populateValueUrlOrNull(String value, Column column, String convertedValue)", "class_method_signature": "DatasetImporterForMetaTable.populateValueUrlOrNull(String value, Column column, String convertedValue)", "testcase": false, "constructor": false}, {"identifier": "setDataset", "parameters": "(Dataset dataset)", "modifiers": "public", "return": "void", "signature": "void setDataset(Dataset dataset)", "full_signature": "public void setDataset(Dataset dataset)", "class_method_signature": "DatasetImporterForMetaTable.setDataset(Dataset dataset)", "testcase": false, "constructor": false}, {"identifier": "getDataset", "parameters": "()", "modifiers": "public", "return": "Dataset", "signature": "Dataset getDataset()", "full_signature": "public Dataset getDataset()", "class_method_signature": "DatasetImporterForMetaTable.getDataset()", "testcase": false, "constructor": false}, {"identifier": "columnNamesForMetaTable", "parameters": "(JsonNode config)", "modifiers": "public static", "return": "List<Column>", "signature": "List<Column> columnNamesForMetaTable(JsonNode config)", "full_signature": "public static List<Column> columnNamesForMetaTable(JsonNode config)", "class_method_signature": "DatasetImporterForMetaTable.columnNamesForMetaTable(JsonNode config)", "testcase": false, "constructor": false}, {"identifier": "columnNamesForSchema", "parameters": "(JsonNode tableSchema)", "modifiers": "public static", "return": "List<Column>", "signature": "List<Column> columnNamesForSchema(JsonNode tableSchema)", "full_signature": "public static List<Column> columnNamesForSchema(JsonNode tableSchema)", "class_method_signature": "DatasetImporterForMetaTable.columnNamesForSchema(JsonNode tableSchema)", "testcase": false, "constructor": false}, {"identifier": "createStringColumn", "parameters": "(JsonNode columnName)", "modifiers": "public static", "return": "Column", "signature": "Column createStringColumn(JsonNode columnName)", "full_signature": "public static Column createStringColumn(JsonNode columnName)", "class_method_signature": "DatasetImporterForMetaTable.createStringColumn(JsonNode columnName)", "testcase": false, "constructor": false}, {"identifier": "createTypedColumn", "parameters": "(JsonNode column, JsonNode columnName)", "modifiers": "private static", "return": "Column", "signature": "Column createTypedColumn(JsonNode column, JsonNode columnName)", "full_signature": "private static Column createTypedColumn(JsonNode column, JsonNode columnName)", "class_method_signature": "DatasetImporterForMetaTable.createTypedColumn(JsonNode column, JsonNode columnName)", "testcase": false, "constructor": false}], "file": "eol-globi-data-sources/src/main/java/org/eol/globi/data/DatasetImporterForMetaTable.java"}, "focal_method": {"identifier": "parseValue", "parameters": "(String value, Column column)", "modifiers": "public static", "return": "String", "body": "public static String parseValue(String value, Column column) throws IllegalFormatException {\n        String convertedValue = null;\n        if (StringUtils.isNotBlank(value)) {\n            if (\"long\".equalsIgnoreCase(column.getDataTypeBase())) {\n                if (!NumberUtils.isDigits(value)) {\n                    return null;\n                }\n            }\n\n            convertedValue = populateValueUrlOrNull(value, column, convertedValue);\n\n            if (null == convertedValue) {\n                if (\"https://marinemetadata.org/references/nodctaxacodes\".equals(column.getDataTypeId())) {\n                    final String[] parts = value.trim().split(\"[^0-9]\");\n                    convertedValue = TaxonomyProvider.NATIONAL_OCEANOGRAPHIC_DATA_CENTER.getIdPrefix() + parts[0].replace(\"00\", \"\");\n                } else if (\"http://purl.bioontology.org/ontology/NCBITAXON\".equals(column.getDataTypeId())) {\n                    final String id = value.trim();\n                    if (NumberUtils.isDigits(id)) {\n                        convertedValue = TaxonomyProvider.NCBI.getIdPrefix() + id;\n                    }\n                } else if (\"http://eol.org/schema/taxonID\".equals(column.getDataTypeId())) {\n                    convertedValue = TaxonomyProvider.ID_PREFIX_EOL + value.trim();\n                } else if (\"date\".equals(column.getDataTypeBase())) {\n                    final DateTimeFormatter dateTimeFormatter = StringUtils.isNotBlank(column.getDataTypeFormat())\n                            ? DateTimeFormat.forPattern(column.getDataTypeFormat())\n                            : DateTimeFormat.fullDateTime();\n                    convertedValue = dateTimeFormatter.withZoneUTC()\n                            .parseDateTime(value)\n                            .toString(ISODateTimeFormat.dateTime().withZoneUTC());\n                } else {\n                    convertedValue = value;\n                }\n            }\n        }\n        return StringUtils.trim(convertedValue);\n    }", "signature": "String parseValue(String value, Column column)", "full_signature": "public static String parseValue(String value, Column column)", "class_method_signature": "DatasetImporterForMetaTable.parseValue(String value, Column column)", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "equalsIgnoreCase", "getDataTypeBase", "isDigits", "populateValueUrlOrNull", "equals", "getDataTypeId", "split", "trim", "getIdPrefix", "replace", "equals", "getDataTypeId", "trim", "isDigits", "getIdPrefix", "equals", "getDataTypeId", "trim", "equals", "getDataTypeBase", "isNotBlank", "getDataTypeFormat", "forPattern", "getDataTypeFormat", "fullDateTime", "toString", "parseDateTime", "withZoneUTC", "withZoneUTC", "dateTime", "trim"]}, "repository": {"repo_id": 2478263, "url": "https://github.com/globalbioticinteractions/globalbioticinteractions", "stars": 49, "created": "9/28/2011 9:51:47 PM +00:00", "updates": "2020-01-17T17:47:05+00:00", "fork": "False", "license": "licensed"}}