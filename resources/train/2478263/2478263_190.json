{"test_class": {"identifier": "DatasetWithCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "eol-globi-cache/src/test/java/org/globalbioticinteractions/dataset/DatasetWithCacheTest.java"}, "test_case": {"identifier": "doNotCacheLocalDirResourceURI", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n    public void doNotCacheLocalDirResourceURI() throws IOException, URISyntaxException {\n        Cache cache = Mockito.mock(Cache.class);\n        URI localFileURI = getClass().getResource(\"archive.zip\").toURI();\n        URI cachedLocalURI = new File(localFileURI).getParentFile().toURI();\n        assertTrue(CacheUtil.isLocalDir(cachedLocalURI));\n        when(cache.retrieve(any(URI.class))).thenThrow(new IOException(\"kaboom!\"));\n\n        DatasetImpl datasetUncached = new DatasetImpl(\"some/namespace\", cachedLocalURI, inStream -> inStream);\n\n        DatasetWithCache datasetWithCache = new DatasetWithCache(datasetUncached, cache);\n        try {\n            datasetWithCache.retrieve(cachedLocalURI);\n        } catch (IOException ex) {\n            assertThat(ex.getMessage(), is(\"kaboom!\"));\n            throw ex;\n        }\n\n    }", "signature": "void doNotCacheLocalDirResourceURI()", "full_signature": "@Test(expected = IOException.class) public void doNotCacheLocalDirResourceURI()", "class_method_signature": "DatasetWithCacheTest.doNotCacheLocalDirResourceURI()", "testcase": true, "constructor": false, "invocations": ["mock", "toURI", "getResource", "getClass", "toURI", "getParentFile", "assertTrue", "isLocalDir", "thenThrow", "when", "retrieve", "any", "retrieve", "assertThat", "getMessage", "is"]}, "focal_class": {"identifier": "DatasetWithCache", "superclass": "", "interfaces": "implements Dataset", "fields": [{"original_string": "private final static Log LOG = LogFactory.getLog(DatasetWithCache.class);", "modifier": "private final static", "type": "Log", "declarator": "LOG = LogFactory.getLog(DatasetWithCache.class)", "var_name": "LOG"}, {"original_string": "private final Cache cache;", "modifier": "private final", "type": "Cache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private final Dataset datasetCached;", "modifier": "private final", "type": "Dataset", "declarator": "datasetCached", "var_name": "datasetCached"}, {"original_string": "private ContentProvenance datasetProvenance;", "modifier": "private", "type": "ContentProvenance", "declarator": "datasetProvenance", "var_name": "datasetProvenance"}], "methods": [{"identifier": "DatasetWithCache", "parameters": "(Dataset dataset, final Cache cache)", "modifiers": "public", "return": "", "signature": " DatasetWithCache(Dataset dataset, final Cache cache)", "full_signature": "public  DatasetWithCache(Dataset dataset, final Cache cache)", "class_method_signature": "DatasetWithCache.DatasetWithCache(Dataset dataset, final Cache cache)", "testcase": false, "constructor": true}, {"identifier": "retrieve", "parameters": "(URI resourceName)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream retrieve(URI resourceName)", "full_signature": "@Override public InputStream retrieve(URI resourceName)", "class_method_signature": "DatasetWithCache.retrieve(URI resourceName)", "testcase": false, "constructor": false}, {"identifier": "getAccessedAt", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getAccessedAt()", "full_signature": "private String getAccessedAt()", "class_method_signature": "DatasetWithCache.getAccessedAt()", "testcase": false, "constructor": false}, {"identifier": "getDatasetProvenance", "parameters": "()", "modifiers": "private", "return": "ContentProvenance", "signature": "ContentProvenance getDatasetProvenance()", "full_signature": "private ContentProvenance getDatasetProvenance()", "class_method_signature": "DatasetWithCache.getDatasetProvenance()", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getHash()", "full_signature": "private String getHash()", "class_method_signature": "DatasetWithCache.getHash()", "testcase": false, "constructor": false}, {"identifier": "getArchiveURI", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getArchiveURI()", "full_signature": "public URI getArchiveURI()", "class_method_signature": "DatasetWithCache.getArchiveURI()", "testcase": false, "constructor": false}, {"identifier": "getOrDefault", "parameters": "(String key, String defaultValue)", "modifiers": "@Override public", "return": "String", "signature": "String getOrDefault(String key, String defaultValue)", "full_signature": "@Override public String getOrDefault(String key, String defaultValue)", "class_method_signature": "DatasetWithCache.getOrDefault(String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespace()", "full_signature": "public String getNamespace()", "class_method_signature": "DatasetWithCache.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getConfig()", "full_signature": "public JsonNode getConfig()", "class_method_signature": "DatasetWithCache.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getDOI", "parameters": "()", "modifiers": "public", "return": "DOI", "signature": "DOI getDOI()", "full_signature": "public DOI getDOI()", "class_method_signature": "DatasetWithCache.getDOI()", "testcase": false, "constructor": false}, {"identifier": "getCitation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCitation()", "full_signature": "public String getCitation()", "class_method_signature": "DatasetWithCache.getCitation()", "testcase": false, "constructor": false}, {"identifier": "generateCitation", "parameters": "(String citation)", "modifiers": "private", "return": "String", "signature": "String generateCitation(String citation)", "full_signature": "private String generateCitation(String citation)", "class_method_signature": "DatasetWithCache.generateCitation(String citation)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFormat()", "full_signature": "public String getFormat()", "class_method_signature": "DatasetWithCache.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getConfigURI", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getConfigURI()", "full_signature": "public URI getConfigURI()", "class_method_signature": "DatasetWithCache.getConfigURI()", "testcase": false, "constructor": false}, {"identifier": "setConfig", "parameters": "(JsonNode config)", "modifiers": "@Override public", "return": "void", "signature": "void setConfig(JsonNode config)", "full_signature": "@Override public void setConfig(JsonNode config)", "class_method_signature": "DatasetWithCache.setConfig(JsonNode config)", "testcase": false, "constructor": false}, {"identifier": "setConfigURI", "parameters": "(URI configURI)", "modifiers": "@Override public", "return": "void", "signature": "void setConfigURI(URI configURI)", "full_signature": "@Override public void setConfigURI(URI configURI)", "class_method_signature": "DatasetWithCache.setConfigURI(URI configURI)", "testcase": false, "constructor": false}, {"identifier": "getDatasetCached", "parameters": "()", "modifiers": "private", "return": "Dataset", "signature": "Dataset getDatasetCached()", "full_signature": "private Dataset getDatasetCached()", "class_method_signature": "DatasetWithCache.getDatasetCached()", "testcase": false, "constructor": false}], "file": "eol-globi-cache/src/main/java/org/globalbioticinteractions/dataset/DatasetWithCache.java"}, "focal_method": {"identifier": "retrieve", "parameters": "(URI resourceName)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream retrieve(URI resourceName) throws IOException {\n        return cache.retrieve(resourceName);\n    }", "signature": "InputStream retrieve(URI resourceName)", "full_signature": "@Override public InputStream retrieve(URI resourceName)", "class_method_signature": "DatasetWithCache.retrieve(URI resourceName)", "testcase": false, "constructor": false, "invocations": ["retrieve"]}, "repository": {"repo_id": 2478263, "url": "https://github.com/globalbioticinteractions/globalbioticinteractions", "stars": 49, "created": "9/28/2011 9:51:47 PM +00:00", "updates": "2020-01-17T17:47:05+00:00", "fork": "False", "license": "licensed"}}