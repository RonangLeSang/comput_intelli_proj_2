{"test_class": {"identifier": "NodeFactoryNeo4jTest", "superclass": "extends GraphDBTestCase", "interfaces": "", "fields": [{"original_string": "public static final DOI SOME_DOI = new DOI(\"some\", \"doi\");", "modifier": "public static final", "type": "DOI", "declarator": "SOME_DOI = new DOI(\"some\", \"doi\")", "var_name": "SOME_DOI"}], "file": "eol-globi-neo4j-index/src/test/java/org/eol/globi/data/NodeFactoryNeo4jTest.java"}, "test_case": {"identifier": "sameStudyDifferentDataset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sameStudyDifferentDataset() throws NodeFactoryException, IOException {\n        StudyImpl study1 = new StudyImpl(\"my title\", SOME_DOI, \"some citation\");\n        study1.setOriginatingDataset(datasetWithNamespace(\"some/namespace\"));\n\n        StudyNode study = getNodeFactory().getOrCreateStudy(study1);\n        Node datasetNode = NodeUtil.getDataSetForStudy(study);\n\n        study1.setOriginatingDataset(datasetWithNamespace(\"some/othernamespace\"));\n        StudyNode studyDifferentDataset = getNodeFactory().getOrCreateStudy(study1);\n        Node datasetNodeOther = NodeUtil.getDataSetForStudy(studyDifferentDataset);\n\n        assertThat(datasetNode.getId(), is(not(datasetNodeOther.getId())));\n\n        getNodeFactory().getOrCreateStudy(study1);\n    }", "signature": "void sameStudyDifferentDataset()", "full_signature": "@Test public void sameStudyDifferentDataset()", "class_method_signature": "NodeFactoryNeo4jTest.sameStudyDifferentDataset()", "testcase": true, "constructor": false, "invocations": ["setOriginatingDataset", "datasetWithNamespace", "getOrCreateStudy", "getNodeFactory", "getDataSetForStudy", "setOriginatingDataset", "datasetWithNamespace", "getOrCreateStudy", "getNodeFactory", "getDataSetForStudy", "assertThat", "getId", "is", "not", "getId", "getOrCreateStudy", "getNodeFactory"]}, "focal_class": {"identifier": "NodeFactoryNeo4j", "superclass": "", "interfaces": "implements NodeFactory", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(NodeFactoryNeo4j.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(NodeFactoryNeo4j.class)", "var_name": "LOG"}, {"original_string": "public static final TermImpl NO_MATCH_TERM = new TermImpl(PropertyAndValueDictionary.NO_MATCH, PropertyAndValueDictionary.NO_MATCH);", "modifier": "public static final", "type": "TermImpl", "declarator": "NO_MATCH_TERM = new TermImpl(PropertyAndValueDictionary.NO_MATCH, PropertyAndValueDictionary.NO_MATCH)", "var_name": "NO_MATCH_TERM"}, {"original_string": "private GraphDatabaseService graphDb;", "modifier": "private", "type": "GraphDatabaseService", "declarator": "graphDb", "var_name": "graphDb"}, {"original_string": "private final Index<Node> studies;", "modifier": "private final", "type": "Index<Node>", "declarator": "studies", "var_name": "studies"}, {"original_string": "private final Index<Node> datasets;", "modifier": "private final", "type": "Index<Node>", "declarator": "datasets", "var_name": "datasets"}, {"original_string": "private final Index<Node> seasons;", "modifier": "private final", "type": "Index<Node>", "declarator": "seasons", "var_name": "seasons"}, {"original_string": "private final Index<Node> locations;", "modifier": "private final", "type": "Index<Node>", "declarator": "locations", "var_name": "locations"}, {"original_string": "private final Index<Node> environments;", "modifier": "private final", "type": "Index<Node>", "declarator": "environments", "var_name": "environments"}, {"original_string": "private TermLookupService termLookupService;", "modifier": "private", "type": "TermLookupService", "declarator": "termLookupService", "var_name": "termLookupService"}, {"original_string": "private TermLookupService envoLookupService;", "modifier": "private", "type": "TermLookupService", "declarator": "envoLookupService", "var_name": "envoLookupService"}, {"original_string": "private final TermLookupService lifeStageLookupService;", "modifier": "private final", "type": "TermLookupService", "declarator": "lifeStageLookupService", "var_name": "lifeStageLookupService"}, {"original_string": "private final TermLookupService bodyPartLookupService;", "modifier": "private final", "type": "TermLookupService", "declarator": "bodyPartLookupService", "var_name": "bodyPartLookupService"}], "methods": [{"identifier": "NodeFactoryNeo4j", "parameters": "(GraphDatabaseService graphDb)", "modifiers": "public", "return": "", "signature": " NodeFactoryNeo4j(GraphDatabaseService graphDb)", "full_signature": "public  NodeFactoryNeo4j(GraphDatabaseService graphDb)", "class_method_signature": "NodeFactoryNeo4j.NodeFactoryNeo4j(GraphDatabaseService graphDb)", "testcase": false, "constructor": true}, {"identifier": "getGraphDb", "parameters": "()", "modifiers": "public", "return": "GraphDatabaseService", "signature": "GraphDatabaseService getGraphDb()", "full_signature": "public GraphDatabaseService getGraphDb()", "class_method_signature": "NodeFactoryNeo4j.getGraphDb()", "testcase": false, "constructor": false}, {"identifier": "findLocation", "parameters": "(Location location)", "modifiers": "@Override public", "return": "LocationNode", "signature": "LocationNode findLocation(Location location)", "full_signature": "@Override public LocationNode findLocation(Location location)", "class_method_signature": "NodeFactoryNeo4j.findLocation(Location location)", "testcase": false, "constructor": false}, {"identifier": "hasLatLng", "parameters": "(Location location)", "modifiers": "private", "return": "boolean", "signature": "boolean hasLatLng(Location location)", "full_signature": "private boolean hasLatLng(Location location)", "class_method_signature": "NodeFactoryNeo4j.hasLatLng(Location location)", "testcase": false, "constructor": false}, {"identifier": "findLocationByLocality", "parameters": "(Location location)", "modifiers": "private", "return": "Node", "signature": "Node findLocationByLocality(Location location)", "full_signature": "private Node findLocationByLocality(Location location)", "class_method_signature": "NodeFactoryNeo4j.findLocationByLocality(Location location)", "testcase": false, "constructor": false}, {"identifier": "findLocationByLocalityId", "parameters": "(Location location)", "modifiers": "private", "return": "Node", "signature": "Node findLocationByLocalityId(Location location)", "full_signature": "private Node findLocationByLocalityId(Location location)", "class_method_signature": "NodeFactoryNeo4j.findLocationByLocalityId(Location location)", "testcase": false, "constructor": false}, {"identifier": "findLocationBy", "parameters": "(Location location, String key, String value)", "modifiers": "private", "return": "Node", "signature": "Node findLocationBy(Location location, String key, String value)", "full_signature": "private Node findLocationBy(Location location, String key, String value)", "class_method_signature": "NodeFactoryNeo4j.findLocationBy(Location location, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "isSameLocation", "parameters": "(Location location, Location foundLocation)", "modifiers": "private", "return": "boolean", "signature": "boolean isSameLocation(Location location, Location foundLocation)", "full_signature": "private boolean isSameLocation(Location location, Location foundLocation)", "class_method_signature": "NodeFactoryNeo4j.isSameLocation(Location location, Location foundLocation)", "testcase": false, "constructor": false}, {"identifier": "sameLocalityId", "parameters": "(Location location, Location foundLocation)", "modifiers": "private", "return": "boolean", "signature": "boolean sameLocalityId(Location location, Location foundLocation)", "full_signature": "private boolean sameLocalityId(Location location, Location foundLocation)", "class_method_signature": "NodeFactoryNeo4j.sameLocalityId(Location location, Location foundLocation)", "testcase": false, "constructor": false}, {"identifier": "sameLocality", "parameters": "(Location location, Location foundLocation)", "modifiers": "private", "return": "boolean", "signature": "boolean sameLocality(Location location, Location foundLocation)", "full_signature": "private boolean sameLocality(Location location, Location foundLocation)", "class_method_signature": "NodeFactoryNeo4j.sameLocality(Location location, Location foundLocation)", "testcase": false, "constructor": false}, {"identifier": "sameFootprintWKT", "parameters": "(Location location, Location foundLocation)", "modifiers": "private", "return": "boolean", "signature": "boolean sameFootprintWKT(Location location, Location foundLocation)", "full_signature": "private boolean sameFootprintWKT(Location location, Location foundLocation)", "class_method_signature": "NodeFactoryNeo4j.sameFootprintWKT(Location location, Location foundLocation)", "testcase": false, "constructor": false}, {"identifier": "sameAltitude", "parameters": "(Location location, Location foundLocation)", "modifiers": "private", "return": "boolean", "signature": "boolean sameAltitude(Location location, Location foundLocation)", "full_signature": "private boolean sameAltitude(Location location, Location foundLocation)", "class_method_signature": "NodeFactoryNeo4j.sameAltitude(Location location, Location foundLocation)", "testcase": false, "constructor": false}, {"identifier": "sameLatitude", "parameters": "(Location location, Location foundLocation)", "modifiers": "private", "return": "boolean", "signature": "boolean sameLatitude(Location location, Location foundLocation)", "full_signature": "private boolean sameLatitude(Location location, Location foundLocation)", "class_method_signature": "NodeFactoryNeo4j.sameLatitude(Location location, Location foundLocation)", "testcase": false, "constructor": false}, {"identifier": "sameLongitude", "parameters": "(Location location, Location foundLocation)", "modifiers": "private", "return": "boolean", "signature": "boolean sameLongitude(Location location, Location foundLocation)", "full_signature": "private boolean sameLongitude(Location location, Location foundLocation)", "class_method_signature": "NodeFactoryNeo4j.sameLongitude(Location location, Location foundLocation)", "testcase": false, "constructor": false}, {"identifier": "findLocationByLatitude", "parameters": "(Location location)", "modifiers": "private", "return": "Node", "signature": "Node findLocationByLatitude(Location location)", "full_signature": "private Node findLocationByLatitude(Location location)", "class_method_signature": "NodeFactoryNeo4j.findLocationByLatitude(Location location)", "testcase": false, "constructor": false}, {"identifier": "createSeason", "parameters": "(String seasonNameLower)", "modifiers": "@Override public", "return": "SeasonNode", "signature": "SeasonNode createSeason(String seasonNameLower)", "full_signature": "@Override public SeasonNode createSeason(String seasonNameLower)", "class_method_signature": "NodeFactoryNeo4j.createSeason(String seasonNameLower)", "testcase": false, "constructor": false}, {"identifier": "createLocation", "parameters": "(final Location location)", "modifiers": "private", "return": "LocationNode", "signature": "LocationNode createLocation(final Location location)", "full_signature": "private LocationNode createLocation(final Location location)", "class_method_signature": "NodeFactoryNeo4j.createLocation(final Location location)", "testcase": false, "constructor": false}, {"identifier": "createSpecimen", "parameters": "(Interaction interaction, Taxon taxon)", "modifiers": "@Override public", "return": "SpecimenNode", "signature": "SpecimenNode createSpecimen(Interaction interaction, Taxon taxon)", "full_signature": "@Override public SpecimenNode createSpecimen(Interaction interaction, Taxon taxon)", "class_method_signature": "NodeFactoryNeo4j.createSpecimen(Interaction interaction, Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "createSpecimen", "parameters": "(Study study, Taxon taxon)", "modifiers": "@Override public", "return": "SpecimenNode", "signature": "SpecimenNode createSpecimen(Study study, Taxon taxon)", "full_signature": "@Override public SpecimenNode createSpecimen(Study study, Taxon taxon)", "class_method_signature": "NodeFactoryNeo4j.createSpecimen(Study study, Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "createSpecimen", "parameters": "(Study study, Taxon taxon, RelTypes... types)", "modifiers": "@Override public", "return": "SpecimenNode", "signature": "SpecimenNode createSpecimen(Study study, Taxon taxon, RelTypes... types)", "full_signature": "@Override public SpecimenNode createSpecimen(Study study, Taxon taxon, RelTypes... types)", "class_method_signature": "NodeFactoryNeo4j.createSpecimen(Study study, Taxon taxon, RelTypes... types)", "testcase": false, "constructor": false}, {"identifier": "extractTerms", "parameters": "(String taxonName, Specimen specimen)", "modifiers": "private", "return": "void", "signature": "void extractTerms(String taxonName, Specimen specimen)", "full_signature": "private void extractTerms(String taxonName, Specimen specimen)", "class_method_signature": "NodeFactoryNeo4j.extractTerms(String taxonName, Specimen specimen)", "testcase": false, "constructor": false}, {"identifier": "extractLifeStage", "parameters": "(Specimen specimen, String part)", "modifiers": "private", "return": "void", "signature": "void extractLifeStage(Specimen specimen, String part)", "full_signature": "private void extractLifeStage(Specimen specimen, String part)", "class_method_signature": "NodeFactoryNeo4j.extractLifeStage(Specimen specimen, String part)", "testcase": false, "constructor": false}, {"identifier": "extractBodyPart", "parameters": "(Specimen specimen, String part)", "modifiers": "private", "return": "void", "signature": "void extractBodyPart(Specimen specimen, String part)", "full_signature": "private void extractBodyPart(Specimen specimen, String part)", "class_method_signature": "NodeFactoryNeo4j.extractBodyPart(Specimen specimen, String part)", "testcase": false, "constructor": false}, {"identifier": "createSpecimen", "parameters": "()", "modifiers": "private", "return": "SpecimenNode", "signature": "SpecimenNode createSpecimen()", "full_signature": "private SpecimenNode createSpecimen()", "class_method_signature": "NodeFactoryNeo4j.createSpecimen()", "testcase": false, "constructor": false}, {"identifier": "createStudy", "parameters": "(Study study)", "modifiers": "@Override public", "return": "StudyNode", "signature": "StudyNode createStudy(Study study)", "full_signature": "@Override public StudyNode createStudy(Study study)", "class_method_signature": "NodeFactoryNeo4j.createStudy(Study study)", "testcase": false, "constructor": false}, {"identifier": "createDatasetNode", "parameters": "(Dataset dataset)", "modifiers": "private", "return": "Node", "signature": "Node createDatasetNode(Dataset dataset)", "full_signature": "private Node createDatasetNode(Dataset dataset)", "class_method_signature": "NodeFactoryNeo4j.createDatasetNode(Dataset dataset)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateStudy", "parameters": "(Study study)", "modifiers": "@Override public", "return": "StudyNode", "signature": "StudyNode getOrCreateStudy(Study study)", "full_signature": "@Override public StudyNode getOrCreateStudy(Study study)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateStudy(Study study)", "testcase": false, "constructor": false}, {"identifier": "namespaceOrNull", "parameters": "(Study study)", "modifiers": "private", "return": "String", "signature": "String namespaceOrNull(Study study)", "full_signature": "private String namespaceOrNull(Study study)", "class_method_signature": "NodeFactoryNeo4j.namespaceOrNull(Study study)", "testcase": false, "constructor": false}, {"identifier": "findStudy", "parameters": "(String title)", "modifiers": "@Deprecated @Override public", "return": "StudyNode", "signature": "StudyNode findStudy(String title)", "full_signature": "@Deprecated @Override public StudyNode findStudy(String title)", "class_method_signature": "NodeFactoryNeo4j.findStudy(String title)", "testcase": false, "constructor": false}, {"identifier": "findStudy", "parameters": "(Study study)", "modifiers": "private", "return": "StudyNode", "signature": "StudyNode findStudy(Study study)", "full_signature": "private StudyNode findStudy(Study study)", "class_method_signature": "NodeFactoryNeo4j.findStudy(Study study)", "testcase": false, "constructor": false}, {"identifier": "getTitleInNamespace", "parameters": "(Study study)", "modifiers": "private", "return": "String", "signature": "String getTitleInNamespace(Study study)", "full_signature": "private String getTitleInNamespace(Study study)", "class_method_signature": "NodeFactoryNeo4j.getTitleInNamespace(Study study)", "testcase": false, "constructor": false}, {"identifier": "findSeason", "parameters": "(String seasonName)", "modifiers": "@Override public", "return": "SeasonNode", "signature": "SeasonNode findSeason(String seasonName)", "full_signature": "@Override public SeasonNode findSeason(String seasonName)", "class_method_signature": "NodeFactoryNeo4j.findSeason(String seasonName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateLocation", "parameters": "(org.eol.globi.domain.Location location)", "modifiers": "@Override public", "return": "LocationNode", "signature": "LocationNode getOrCreateLocation(org.eol.globi.domain.Location location)", "full_signature": "@Override public LocationNode getOrCreateLocation(org.eol.globi.domain.Location location)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateLocation(org.eol.globi.domain.Location location)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Location location)", "modifiers": "private", "return": "void", "signature": "void validate(Location location)", "full_signature": "private void validate(Location location)", "class_method_signature": "NodeFactoryNeo4j.validate(Location location)", "testcase": false, "constructor": false}, {"identifier": "setUnixEpochProperty", "parameters": "(Specimen specimen, Date date)", "modifiers": "@Override public", "return": "void", "signature": "void setUnixEpochProperty(Specimen specimen, Date date)", "full_signature": "@Override public void setUnixEpochProperty(Specimen specimen, Date date)", "class_method_signature": "NodeFactoryNeo4j.setUnixEpochProperty(Specimen specimen, Date date)", "testcase": false, "constructor": false}, {"identifier": "getCollectedRel", "parameters": "(Specimen specimen)", "modifiers": "private", "return": "Iterable<Relationship>", "signature": "Iterable<Relationship> getCollectedRel(Specimen specimen)", "full_signature": "private Iterable<Relationship> getCollectedRel(Specimen specimen)", "class_method_signature": "NodeFactoryNeo4j.getCollectedRel(Specimen specimen)", "testcase": false, "constructor": false}, {"identifier": "getUnixEpochProperty", "parameters": "(Specimen specimen)", "modifiers": "@Override public", "return": "Date", "signature": "Date getUnixEpochProperty(Specimen specimen)", "full_signature": "@Override public Date getUnixEpochProperty(Specimen specimen)", "class_method_signature": "NodeFactoryNeo4j.getUnixEpochProperty(Specimen specimen)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateEnvironments", "parameters": "(Location location, String externalId, String name)", "modifiers": "@Override public", "return": "List<Environment>", "signature": "List<Environment> getOrCreateEnvironments(Location location, String externalId, String name)", "full_signature": "@Override public List<Environment> getOrCreateEnvironments(Location location, String externalId, String name)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateEnvironments(Location location, String externalId, String name)", "testcase": false, "constructor": false}, {"identifier": "addEnvironmentToLocation", "parameters": "(Location location, List<Term> terms)", "modifiers": "@Override public", "return": "List<Environment>", "signature": "List<Environment> addEnvironmentToLocation(Location location, List<Term> terms)", "full_signature": "@Override public List<Environment> addEnvironmentToLocation(Location location, List<Term> terms)", "class_method_signature": "NodeFactoryNeo4j.addEnvironmentToLocation(Location location, List<Term> terms)", "testcase": false, "constructor": false}, {"identifier": "findEnvironment", "parameters": "(String name)", "modifiers": "protected", "return": "EnvironmentNode", "signature": "EnvironmentNode findEnvironment(String name)", "full_signature": "protected EnvironmentNode findEnvironment(String name)", "class_method_signature": "NodeFactoryNeo4j.findEnvironment(String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateBodyPart", "parameters": "(String externalId, String name)", "modifiers": "@Override public", "return": "Term", "signature": "Term getOrCreateBodyPart(String externalId, String name)", "full_signature": "@Override public Term getOrCreateBodyPart(String externalId, String name)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateBodyPart(String externalId, String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreatePhysiologicalState", "parameters": "(String externalId, String name)", "modifiers": "@Override public", "return": "Term", "signature": "Term getOrCreatePhysiologicalState(String externalId, String name)", "full_signature": "@Override public Term getOrCreatePhysiologicalState(String externalId, String name)", "class_method_signature": "NodeFactoryNeo4j.getOrCreatePhysiologicalState(String externalId, String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateLifeStage", "parameters": "(String externalId, String name)", "modifiers": "@Override public", "return": "Term", "signature": "Term getOrCreateLifeStage(String externalId, String name)", "full_signature": "@Override public Term getOrCreateLifeStage(String externalId, String name)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateLifeStage(String externalId, String name)", "testcase": false, "constructor": false}, {"identifier": "matchTerm", "parameters": "(String externalId, String name)", "modifiers": "private", "return": "Term", "signature": "Term matchTerm(String externalId, String name)", "full_signature": "private Term matchTerm(String externalId, String name)", "class_method_signature": "NodeFactoryNeo4j.matchTerm(String externalId, String name)", "testcase": false, "constructor": false}, {"identifier": "getTermLookupService", "parameters": "()", "modifiers": "@Override public", "return": "TermLookupService", "signature": "TermLookupService getTermLookupService()", "full_signature": "@Override public TermLookupService getTermLookupService()", "class_method_signature": "NodeFactoryNeo4j.getTermLookupService()", "testcase": false, "constructor": false}, {"identifier": "setEnvoLookupService", "parameters": "(TermLookupService envoLookupService)", "modifiers": "public", "return": "void", "signature": "void setEnvoLookupService(TermLookupService envoLookupService)", "full_signature": "public void setEnvoLookupService(TermLookupService envoLookupService)", "class_method_signature": "NodeFactoryNeo4j.setEnvoLookupService(TermLookupService envoLookupService)", "testcase": false, "constructor": false}, {"identifier": "setTermLookupService", "parameters": "(TermLookupService termLookupService)", "modifiers": "public", "return": "void", "signature": "void setTermLookupService(TermLookupService termLookupService)", "full_signature": "public void setTermLookupService(TermLookupService termLookupService)", "class_method_signature": "NodeFactoryNeo4j.setTermLookupService(TermLookupService termLookupService)", "testcase": false, "constructor": false}, {"identifier": "setDoiResolver", "parameters": "(DOIResolver doiResolver)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setDoiResolver(DOIResolver doiResolver)", "full_signature": "@Deprecated public void setDoiResolver(DOIResolver doiResolver)", "class_method_signature": "NodeFactoryNeo4j.setDoiResolver(DOIResolver doiResolver)", "testcase": false, "constructor": false}, {"identifier": "getAuthorResolver", "parameters": "()", "modifiers": "@Override public", "return": "AuthorIdResolver", "signature": "AuthorIdResolver getAuthorResolver()", "full_signature": "@Override public AuthorIdResolver getAuthorResolver()", "class_method_signature": "NodeFactoryNeo4j.getAuthorResolver()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateBasisOfRecord", "parameters": "(String externalId, String name)", "modifiers": "@Override public", "return": "Term", "signature": "Term getOrCreateBasisOfRecord(String externalId, String name)", "full_signature": "@Override public Term getOrCreateBasisOfRecord(String externalId, String name)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateBasisOfRecord(String externalId, String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateDataset", "parameters": "(Dataset originatingDataset)", "modifiers": "@Override public", "return": "Dataset", "signature": "Dataset getOrCreateDataset(Dataset originatingDataset)", "full_signature": "@Override public Dataset getOrCreateDataset(Dataset originatingDataset)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateDataset(Dataset originatingDataset)", "testcase": false, "constructor": false}, {"identifier": "createInteraction", "parameters": "(Study study)", "modifiers": "@Override public", "return": "Interaction", "signature": "Interaction createInteraction(Study study)", "full_signature": "@Override public Interaction createInteraction(Study study)", "class_method_signature": "NodeFactoryNeo4j.createInteraction(Study study)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateDatasetNoTx", "parameters": "(Dataset originatingDataset)", "modifiers": "private", "return": "Dataset", "signature": "Dataset getOrCreateDatasetNoTx(Dataset originatingDataset)", "full_signature": "private Dataset getOrCreateDatasetNoTx(Dataset originatingDataset)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateDatasetNoTx(Dataset originatingDataset)", "testcase": false, "constructor": false}], "file": "eol-globi-neo4j-index/src/main/java/org/eol/globi/data/NodeFactoryNeo4j.java"}, "focal_method": {"identifier": "getOrCreateStudy", "parameters": "(Study study)", "modifiers": "@Override public", "return": "StudyNode", "body": "@Override\n    public StudyNode getOrCreateStudy(Study study) throws NodeFactoryException {\n        if (StringUtils.isBlank(study.getTitle())) {\n            throw new NodeFactoryException(\"null or empty study title\");\n        }\n\n        StudyNode studyNode;\n        try (Transaction transaction = getGraphDb().beginTx()) {\n            studyNode = findStudy(study);\n            transaction.success();\n        }\n\n        return studyNode == null\n                ? createStudy(study)\n                : studyNode;\n    }", "signature": "StudyNode getOrCreateStudy(Study study)", "full_signature": "@Override public StudyNode getOrCreateStudy(Study study)", "class_method_signature": "NodeFactoryNeo4j.getOrCreateStudy(Study study)", "testcase": false, "constructor": false, "invocations": ["isBlank", "getTitle", "beginTx", "getGraphDb", "findStudy", "success", "createStudy"]}, "repository": {"repo_id": 2478263, "url": "https://github.com/globalbioticinteractions/globalbioticinteractions", "stars": 49, "created": "9/28/2011 9:51:47 PM +00:00", "updates": "2020-01-17T17:47:05+00:00", "fork": "False", "license": "licensed"}}