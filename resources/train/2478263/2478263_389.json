{"test_class": {"identifier": "TaxonUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "eol-globi-lib/src/test/java/org/eol/globi/service/TaxonUtilTest.java"}, "test_case": {"identifier": "nonOverlapping2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nonOverlapping2() {\n        final TaxonImpl taxonA = new TaxonImpl(\"name\",\"id\");\n        taxonA.setPath(\"\");\n        final TaxonImpl taxonB = new TaxonImpl(\"otherName\", \"id\");\n        taxonB.setPath(\"three | four\");\n        final List<Taxon> taxons = TaxonUtil.determineNonOverlappingTaxa(Arrays.asList(taxonA, taxonB));\n\n        assertThat(taxons.size(), is(2));\n    }", "signature": "void nonOverlapping2()", "full_signature": "@Test public void nonOverlapping2()", "class_method_signature": "TaxonUtilTest.nonOverlapping2()", "testcase": true, "constructor": false, "invocations": ["setPath", "setPath", "determineNonOverlappingTaxa", "asList", "assertThat", "size", "is"]}, "focal_class": {"identifier": "TaxonUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SOURCE_TAXON = \"sourceTaxon\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON = \"sourceTaxon\"", "var_name": "SOURCE_TAXON"}, {"original_string": "public static final String SOURCE_TAXON_KINGDOM = SOURCE_TAXON + \"Kingdom\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_KINGDOM = SOURCE_TAXON + \"Kingdom\"", "var_name": "SOURCE_TAXON_KINGDOM"}, {"original_string": "public static final String SOURCE_TAXON_PHYLUM = SOURCE_TAXON + \"Phylum\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_PHYLUM = SOURCE_TAXON + \"Phylum\"", "var_name": "SOURCE_TAXON_PHYLUM"}, {"original_string": "public static final String SOURCE_TAXON_CLASS = SOURCE_TAXON + \"Class\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_CLASS = SOURCE_TAXON + \"Class\"", "var_name": "SOURCE_TAXON_CLASS"}, {"original_string": "public static final String SOURCE_TAXON_SUBCLASS = SOURCE_TAXON + \"Subclass\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SUBCLASS = SOURCE_TAXON + \"Subclass\"", "var_name": "SOURCE_TAXON_SUBCLASS"}, {"original_string": "public static final String SOURCE_TAXON_SUPERORDER = SOURCE_TAXON + \"Superorder\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SUPERORDER = SOURCE_TAXON + \"Superorder\"", "var_name": "SOURCE_TAXON_SUPERORDER"}, {"original_string": "public static final String SOURCE_TAXON_ORDER = SOURCE_TAXON + \"Order\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_ORDER = SOURCE_TAXON + \"Order\"", "var_name": "SOURCE_TAXON_ORDER"}, {"original_string": "public static final String SOURCE_TAXON_SUBORDER = SOURCE_TAXON + \"Suborder\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SUBORDER = SOURCE_TAXON + \"Suborder\"", "var_name": "SOURCE_TAXON_SUBORDER"}, {"original_string": "public static final String SOURCE_TAXON_INFRAORDER = SOURCE_TAXON + \"Infraorder\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_INFRAORDER = SOURCE_TAXON + \"Infraorder\"", "var_name": "SOURCE_TAXON_INFRAORDER"}, {"original_string": "public static final String SOURCE_TAXON_PARVORDER = SOURCE_TAXON + \"Parvorder\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_PARVORDER = SOURCE_TAXON + \"Parvorder\"", "var_name": "SOURCE_TAXON_PARVORDER"}, {"original_string": "public static final String SOURCE_TAXON_SUPERFAMILY = SOURCE_TAXON + \"Superfamily\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SUPERFAMILY = SOURCE_TAXON + \"Superfamily\"", "var_name": "SOURCE_TAXON_SUPERFAMILY"}, {"original_string": "public static final String SOURCE_TAXON_FAMILY = SOURCE_TAXON + \"Family\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_FAMILY = SOURCE_TAXON + \"Family\"", "var_name": "SOURCE_TAXON_FAMILY"}, {"original_string": "public static final String SOURCE_TAXON_SUBFAMILY = SOURCE_TAXON + \"Subfamily\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SUBFAMILY = SOURCE_TAXON + \"Subfamily\"", "var_name": "SOURCE_TAXON_SUBFAMILY"}, {"original_string": "public static final String SOURCE_TAXON_GENUS = SOURCE_TAXON + \"Genus\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_GENUS = SOURCE_TAXON + \"Genus\"", "var_name": "SOURCE_TAXON_GENUS"}, {"original_string": "public static final String SOURCE_TAXON_SUBGENUS = SOURCE_TAXON + \"Subgenus\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SUBGENUS = SOURCE_TAXON + \"Subgenus\"", "var_name": "SOURCE_TAXON_SUBGENUS"}, {"original_string": "public static final String SOURCE_TAXON_SPECIFIC_EPITHET = SOURCE_TAXON + \"SpecificEpithet\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SPECIFIC_EPITHET = SOURCE_TAXON + \"SpecificEpithet\"", "var_name": "SOURCE_TAXON_SPECIFIC_EPITHET"}, {"original_string": "public static final String SOURCE_TAXON_SUBSPECIFIC_EPITHET = SOURCE_TAXON + \"SubspecificEpithet\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SUBSPECIFIC_EPITHET = SOURCE_TAXON + \"SubspecificEpithet\"", "var_name": "SOURCE_TAXON_SUBSPECIFIC_EPITHET"}, {"original_string": "public static final List<String> SOURCE_TAXON_HIGHER_ORDER_RANK_KEYS = Arrays.asList(\n            SOURCE_TAXON_SUBGENUS,\n            SOURCE_TAXON_GENUS,\n            SOURCE_TAXON_SUBFAMILY,\n            SOURCE_TAXON_FAMILY,\n            SOURCE_TAXON_SUPERFAMILY,\n            SOURCE_TAXON_PARVORDER,\n            SOURCE_TAXON_INFRAORDER,\n            SOURCE_TAXON_SUBORDER,\n            SOURCE_TAXON_ORDER,\n            SOURCE_TAXON_SUPERORDER,\n            SOURCE_TAXON_SUBCLASS,\n            SOURCE_TAXON_CLASS,\n            SOURCE_TAXON_PHYLUM,\n            SOURCE_TAXON_KINGDOM);", "modifier": "public static final", "type": "List<String>", "declarator": "SOURCE_TAXON_HIGHER_ORDER_RANK_KEYS = Arrays.asList(\n            SOURCE_TAXON_SUBGENUS,\n            SOURCE_TAXON_GENUS,\n            SOURCE_TAXON_SUBFAMILY,\n            SOURCE_TAXON_FAMILY,\n            SOURCE_TAXON_SUPERFAMILY,\n            SOURCE_TAXON_PARVORDER,\n            SOURCE_TAXON_INFRAORDER,\n            SOURCE_TAXON_SUBORDER,\n            SOURCE_TAXON_ORDER,\n            SOURCE_TAXON_SUPERORDER,\n            SOURCE_TAXON_SUBCLASS,\n            SOURCE_TAXON_CLASS,\n            SOURCE_TAXON_PHYLUM,\n            SOURCE_TAXON_KINGDOM)", "var_name": "SOURCE_TAXON_HIGHER_ORDER_RANK_KEYS"}, {"original_string": "public static final String TARGET_TAXON = \"targetTaxon\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON = \"targetTaxon\"", "var_name": "TARGET_TAXON"}, {"original_string": "public static final String TARGET_TAXON_KINGDOM = TARGET_TAXON + \"Kingdom\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_KINGDOM = TARGET_TAXON + \"Kingdom\"", "var_name": "TARGET_TAXON_KINGDOM"}, {"original_string": "public static final String TARGET_TAXON_PHYLUM = TARGET_TAXON + \"Phylum\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_PHYLUM = TARGET_TAXON + \"Phylum\"", "var_name": "TARGET_TAXON_PHYLUM"}, {"original_string": "public static final String TARGET_TAXON_CLASS = TARGET_TAXON + \"Class\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_CLASS = TARGET_TAXON + \"Class\"", "var_name": "TARGET_TAXON_CLASS"}, {"original_string": "public static final String TARGET_TAXON_SUBCLASS = TARGET_TAXON + \"Subclass\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SUBCLASS = TARGET_TAXON + \"Subclass\"", "var_name": "TARGET_TAXON_SUBCLASS"}, {"original_string": "public static final String TARGET_TAXON_SUPERORDER = TARGET_TAXON + \"Superorder\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SUPERORDER = TARGET_TAXON + \"Superorder\"", "var_name": "TARGET_TAXON_SUPERORDER"}, {"original_string": "public static final String TARGET_TAXON_ORDER = TARGET_TAXON + \"Order\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_ORDER = TARGET_TAXON + \"Order\"", "var_name": "TARGET_TAXON_ORDER"}, {"original_string": "public static final String TARGET_TAXON_SUBORDER = TARGET_TAXON + \"Suborder\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SUBORDER = TARGET_TAXON + \"Suborder\"", "var_name": "TARGET_TAXON_SUBORDER"}, {"original_string": "public static final String TARGET_TAXON_INFRAORDER = TARGET_TAXON + \"Infraorder\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_INFRAORDER = TARGET_TAXON + \"Infraorder\"", "var_name": "TARGET_TAXON_INFRAORDER"}, {"original_string": "public static final String TARGET_TAXON_PARVORDER = TARGET_TAXON + \"Parvorder\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_PARVORDER = TARGET_TAXON + \"Parvorder\"", "var_name": "TARGET_TAXON_PARVORDER"}, {"original_string": "public static final String TARGET_TAXON_SUPERFAMILY = TARGET_TAXON + \"Superfamily\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SUPERFAMILY = TARGET_TAXON + \"Superfamily\"", "var_name": "TARGET_TAXON_SUPERFAMILY"}, {"original_string": "public static final String TARGET_TAXON_FAMILY = TARGET_TAXON + \"Family\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_FAMILY = TARGET_TAXON + \"Family\"", "var_name": "TARGET_TAXON_FAMILY"}, {"original_string": "public static final String TARGET_TAXON_SUBFAMILY = TARGET_TAXON + \"Subfamily\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SUBFAMILY = TARGET_TAXON + \"Subfamily\"", "var_name": "TARGET_TAXON_SUBFAMILY"}, {"original_string": "public static final String TARGET_TAXON_GENUS = TARGET_TAXON + \"Genus\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_GENUS = TARGET_TAXON + \"Genus\"", "var_name": "TARGET_TAXON_GENUS"}, {"original_string": "public static final String TARGET_TAXON_SUBGENUS = TARGET_TAXON + \"Subgenus\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SUBGENUS = TARGET_TAXON + \"Subgenus\"", "var_name": "TARGET_TAXON_SUBGENUS"}, {"original_string": "public static final String TARGET_TAXON_SPECIFIC_EPITHET = TARGET_TAXON + \"SpecificEpithet\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SPECIFIC_EPITHET = TARGET_TAXON + \"SpecificEpithet\"", "var_name": "TARGET_TAXON_SPECIFIC_EPITHET"}, {"original_string": "public static final String TARGET_TAXON_SUBSPECIFIC_EPITHET = TARGET_TAXON + \"SubspecificEpithet\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SUBSPECIFIC_EPITHET = TARGET_TAXON + \"SubspecificEpithet\"", "var_name": "TARGET_TAXON_SUBSPECIFIC_EPITHET"}, {"original_string": "public static final List<String> TARGET_TAXON_HIGHER_ORDER_RANK_KEYS = Arrays.asList(\n            TARGET_TAXON_SUBGENUS,\n            TARGET_TAXON_GENUS,\n            TARGET_TAXON_SUBFAMILY,\n            TARGET_TAXON_FAMILY,\n            TARGET_TAXON_SUPERFAMILY,\n            TARGET_TAXON_PARVORDER,\n            TARGET_TAXON_INFRAORDER,\n            TARGET_TAXON_SUBORDER,\n            TARGET_TAXON_ORDER,\n            TARGET_TAXON_SUPERORDER,\n            TARGET_TAXON_SUBCLASS,\n            TARGET_TAXON_CLASS,\n            TARGET_TAXON_PHYLUM,\n            TARGET_TAXON_KINGDOM);", "modifier": "public static final", "type": "List<String>", "declarator": "TARGET_TAXON_HIGHER_ORDER_RANK_KEYS = Arrays.asList(\n            TARGET_TAXON_SUBGENUS,\n            TARGET_TAXON_GENUS,\n            TARGET_TAXON_SUBFAMILY,\n            TARGET_TAXON_FAMILY,\n            TARGET_TAXON_SUPERFAMILY,\n            TARGET_TAXON_PARVORDER,\n            TARGET_TAXON_INFRAORDER,\n            TARGET_TAXON_SUBORDER,\n            TARGET_TAXON_ORDER,\n            TARGET_TAXON_SUPERORDER,\n            TARGET_TAXON_SUBCLASS,\n            TARGET_TAXON_CLASS,\n            TARGET_TAXON_PHYLUM,\n            TARGET_TAXON_KINGDOM)", "var_name": "TARGET_TAXON_HIGHER_ORDER_RANK_KEYS"}, {"original_string": "public static final String SOURCE_TAXON_NAME = \"sourceTaxonName\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_NAME = \"sourceTaxonName\"", "var_name": "SOURCE_TAXON_NAME"}, {"original_string": "public static final String SOURCE_TAXON_ID = \"sourceTaxonId\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_ID = \"sourceTaxonId\"", "var_name": "SOURCE_TAXON_ID"}, {"original_string": "public static final String SOURCE_TAXON_PATH = \"sourceTaxonPath\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_PATH = \"sourceTaxonPath\"", "var_name": "SOURCE_TAXON_PATH"}, {"original_string": "public static final String SOURCE_TAXON_PATH_NAMES = \"sourceTaxonPathNames\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_PATH_NAMES = \"sourceTaxonPathNames\"", "var_name": "SOURCE_TAXON_PATH_NAMES"}, {"original_string": "public static final String TARGET_TAXON_PATH = \"targetTaxonPath\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_PATH = \"targetTaxonPath\"", "var_name": "TARGET_TAXON_PATH"}, {"original_string": "public static final String TARGET_TAXON_PATH_NAMES = \"targetTaxonPathNames\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_PATH_NAMES = \"targetTaxonPathNames\"", "var_name": "TARGET_TAXON_PATH_NAMES"}, {"original_string": "public static final String TARGET_TAXON_ID = \"targetTaxonId\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_ID = \"targetTaxonId\"", "var_name": "TARGET_TAXON_ID"}, {"original_string": "public static final String TARGET_TAXON_NAME = \"targetTaxonName\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_NAME = \"targetTaxonName\"", "var_name": "TARGET_TAXON_NAME"}, {"original_string": "public static final List<String> TAXON_RANK_PROPERTY_NAMES = new ArrayList<String>() {{\n        addAll(SOURCE_TAXON_HIGHER_ORDER_RANK_KEYS);\n        add(SOURCE_TAXON_SPECIFIC_EPITHET);\n        add(SOURCE_TAXON_SUBSPECIFIC_EPITHET);\n        addAll(TARGET_TAXON_HIGHER_ORDER_RANK_KEYS);\n        add(TARGET_TAXON_SPECIFIC_EPITHET);\n        add(TARGET_TAXON_SUBSPECIFIC_EPITHET);\n    }};", "modifier": "public static final", "type": "List<String>", "declarator": "TAXON_RANK_PROPERTY_NAMES = new ArrayList<String>() {{\n        addAll(SOURCE_TAXON_HIGHER_ORDER_RANK_KEYS);\n        add(SOURCE_TAXON_SPECIFIC_EPITHET);\n        add(SOURCE_TAXON_SUBSPECIFIC_EPITHET);\n        addAll(TARGET_TAXON_HIGHER_ORDER_RANK_KEYS);\n        add(TARGET_TAXON_SPECIFIC_EPITHET);\n        add(TARGET_TAXON_SUBSPECIFIC_EPITHET);\n    }}", "var_name": "TAXON_RANK_PROPERTY_NAMES"}, {"original_string": "public static final String SOURCE_TAXON_RANK = SOURCE_TAXON + \"Rank\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_RANK = SOURCE_TAXON + \"Rank\"", "var_name": "SOURCE_TAXON_RANK"}, {"original_string": "public static final String SOURCE_TAXON_PATH_IDS = SOURCE_TAXON_PATH + \"Ids\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_PATH_IDS = SOURCE_TAXON_PATH + \"Ids\"", "var_name": "SOURCE_TAXON_PATH_IDS"}, {"original_string": "public static final String TARGET_TAXON_PATH_IDS = TARGET_TAXON_PATH + \"Ids\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_PATH_IDS = TARGET_TAXON_PATH + \"Ids\"", "var_name": "TARGET_TAXON_PATH_IDS"}, {"original_string": "public static final String TARGET_TAXON_RANK = TARGET_TAXON + \"Rank\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_RANK = TARGET_TAXON + \"Rank\"", "var_name": "TARGET_TAXON_RANK"}, {"original_string": "public static final String TARGET_TAXON_SPECIES = TARGET_TAXON + \"Species\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_TAXON_SPECIES = TARGET_TAXON + \"Species\"", "var_name": "TARGET_TAXON_SPECIES"}, {"original_string": "public static final String SOURCE_TAXON_SPECIES = SOURCE_TAXON + \"Species\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TAXON_SPECIES = SOURCE_TAXON + \"Species\"", "var_name": "SOURCE_TAXON_SPECIES"}, {"original_string": "public static final List<String> TAXON_RANK_NAMES = Arrays.asList(\"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\");", "modifier": "public static final", "type": "List<String>", "declarator": "TAXON_RANK_NAMES = Arrays.asList(\"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\")", "var_name": "TAXON_RANK_NAMES"}], "methods": [{"identifier": "taxonToMap", "parameters": "(Taxon taxon)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> taxonToMap(Taxon taxon)", "full_signature": "public static Map<String, String> taxonToMap(Taxon taxon)", "class_method_signature": "TaxonUtil.taxonToMap(Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "taxonToMap", "parameters": "(Taxon taxon, String prefix)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> taxonToMap(Taxon taxon, String prefix)", "full_signature": "public static Map<String, String> taxonToMap(Taxon taxon, String prefix)", "class_method_signature": "TaxonUtil.taxonToMap(Taxon taxon, String prefix)", "testcase": false, "constructor": false}, {"identifier": "mapToTaxon", "parameters": "(Map<String, String> properties, Taxon taxon)", "modifiers": "public static", "return": "void", "signature": "void mapToTaxon(Map<String, String> properties, Taxon taxon)", "full_signature": "public static void mapToTaxon(Map<String, String> properties, Taxon taxon)", "class_method_signature": "TaxonUtil.mapToTaxon(Map<String, String> properties, Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "enrich", "parameters": "(PropertyEnricher enricher, Taxon taxon)", "modifiers": "public static", "return": "Taxon", "signature": "Taxon enrich(PropertyEnricher enricher, Taxon taxon)", "full_signature": "public static Taxon enrich(PropertyEnricher enricher, Taxon taxon)", "class_method_signature": "TaxonUtil.enrich(PropertyEnricher enricher, Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "mapToTaxon", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "Taxon", "signature": "Taxon mapToTaxon(Map<String, String> properties)", "full_signature": "public static Taxon mapToTaxon(Map<String, String> properties)", "class_method_signature": "TaxonUtil.mapToTaxon(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Taxon taxon)", "modifiers": "public static", "return": "Taxon", "signature": "Taxon copy(Taxon taxon)", "full_signature": "public static Taxon copy(Taxon taxon)", "class_method_signature": "TaxonUtil.copy(Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Taxon srcTaxon, Taxon targetTaxon)", "modifiers": "public static", "return": "Taxon", "signature": "Taxon copy(Taxon srcTaxon, Taxon targetTaxon)", "full_signature": "public static Taxon copy(Taxon srcTaxon, Taxon targetTaxon)", "class_method_signature": "TaxonUtil.copy(Taxon srcTaxon, Taxon targetTaxon)", "testcase": false, "constructor": false}, {"identifier": "likelyHomonym", "parameters": "(Taxon taxonA, Taxon taxonB)", "modifiers": "public static", "return": "boolean", "signature": "boolean likelyHomonym(Taxon taxonA, Taxon taxonB)", "full_signature": "public static boolean likelyHomonym(Taxon taxonA, Taxon taxonB)", "class_method_signature": "TaxonUtil.likelyHomonym(Taxon taxonA, Taxon taxonB)", "testcase": false, "constructor": false}, {"identifier": "overlap", "parameters": "(Taxon taxonA, Taxon taxonB)", "modifiers": "public static", "return": "boolean", "signature": "boolean overlap(Taxon taxonA, Taxon taxonB)", "full_signature": "public static boolean overlap(Taxon taxonA, Taxon taxonB)", "class_method_signature": "TaxonUtil.overlap(Taxon taxonA, Taxon taxonB)", "testcase": false, "constructor": false}, {"identifier": "determineNonOverlappingTaxa", "parameters": "(List<Taxon> collectTaxa)", "modifiers": "public static", "return": "List<Taxon>", "signature": "List<Taxon> determineNonOverlappingTaxa(List<Taxon> collectTaxa)", "full_signature": "public static List<Taxon> determineNonOverlappingTaxa(List<Taxon> collectTaxa)", "class_method_signature": "TaxonUtil.determineNonOverlappingTaxa(List<Taxon> collectTaxa)", "testcase": false, "constructor": false}, {"identifier": "nextOverlapping", "parameters": "(List<Taxon> collectTaxa)", "modifiers": "public static", "return": "List<Taxon>", "signature": "List<Taxon> nextOverlapping(List<Taxon> collectTaxa)", "full_signature": "public static List<Taxon> nextOverlapping(List<Taxon> collectTaxa)", "class_method_signature": "TaxonUtil.nextOverlapping(List<Taxon> collectTaxa)", "testcase": false, "constructor": false}, {"identifier": "hasHigherOrderTaxaMismatch", "parameters": "(Map<String, String> pathMapA, Map<String, String> pathMapB)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasHigherOrderTaxaMismatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "full_signature": "private static boolean hasHigherOrderTaxaMismatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "class_method_signature": "TaxonUtil.hasHigherOrderTaxaMismatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "testcase": false, "constructor": false}, {"identifier": "higherOrderTaxaMatch", "parameters": "(Map<String, String> pathMapA, Map<String, String> pathMapB)", "modifiers": "private static", "return": "boolean", "signature": "boolean higherOrderTaxaMatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "full_signature": "private static boolean higherOrderTaxaMatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "class_method_signature": "TaxonUtil.higherOrderTaxaMatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "testcase": false, "constructor": false}, {"identifier": "taxonPathLengthMismatch", "parameters": "(Map<String, String> pathMapA, Map<String, String> pathMapB)", "modifiers": "public static", "return": "boolean", "signature": "boolean taxonPathLengthMismatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "full_signature": "public static boolean taxonPathLengthMismatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "class_method_signature": "TaxonUtil.taxonPathLengthMismatch(Map<String, String> pathMapA, Map<String, String> pathMapB)", "testcase": false, "constructor": false}, {"identifier": "toPathNameMap", "parameters": "(Taxon taxonA)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> toPathNameMap(Taxon taxonA)", "full_signature": "public static Map<String, String> toPathNameMap(Taxon taxonA)", "class_method_signature": "TaxonUtil.toPathNameMap(Taxon taxonA)", "testcase": false, "constructor": false}, {"identifier": "toPathIdMap", "parameters": "(Taxon taxonA)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> toPathIdMap(Taxon taxonA)", "full_signature": "public static Map<String, String> toPathIdMap(Taxon taxonA)", "class_method_signature": "TaxonUtil.toPathIdMap(Taxon taxonA)", "testcase": false, "constructor": false}, {"identifier": "toPathNameMap", "parameters": "(Taxon taxonA, String pathElements)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> toPathNameMap(Taxon taxonA, String pathElements)", "full_signature": "private static Map<String, String> toPathNameMap(Taxon taxonA, String pathElements)", "class_method_signature": "TaxonUtil.toPathNameMap(Taxon taxonA, String pathElements)", "testcase": false, "constructor": false}, {"identifier": "enrichTaxonImageWithTaxon", "parameters": "(Map<String, String> taxon, TaxonImage taxonImage)", "modifiers": "public static", "return": "TaxonImage", "signature": "TaxonImage enrichTaxonImageWithTaxon(Map<String, String> taxon, TaxonImage taxonImage)", "full_signature": "public static TaxonImage enrichTaxonImageWithTaxon(Map<String, String> taxon, TaxonImage taxonImage)", "class_method_signature": "TaxonUtil.enrichTaxonImageWithTaxon(Map<String, String> taxon, TaxonImage taxonImage)", "testcase": false, "constructor": false}, {"identifier": "enrichTaxonImageWithTaxon", "parameters": "(\n            Map<String, String> taxon,\n            TaxonImage taxonImage,\n            String preferredLanguage)", "modifiers": "public static", "return": "TaxonImage", "signature": "TaxonImage enrichTaxonImageWithTaxon(\n            Map<String, String> taxon,\n            TaxonImage taxonImage,\n            String preferredLanguage)", "full_signature": "public static TaxonImage enrichTaxonImageWithTaxon(\n            Map<String, String> taxon,\n            TaxonImage taxonImage,\n            String preferredLanguage)", "class_method_signature": "TaxonUtil.enrichTaxonImageWithTaxon(\n            Map<String, String> taxon,\n            TaxonImage taxonImage,\n            String preferredLanguage)", "testcase": false, "constructor": false}, {"identifier": "enrich", "parameters": "(Map<String, String> taxon, TaxonImage taxonImage, String preferredLanguage)", "modifiers": "private static", "return": "TaxonImage", "signature": "TaxonImage enrich(Map<String, String> taxon, TaxonImage taxonImage, String preferredLanguage)", "full_signature": "private static TaxonImage enrich(Map<String, String> taxon, TaxonImage taxonImage, String preferredLanguage)", "class_method_signature": "TaxonUtil.enrich(Map<String, String> taxon, TaxonImage taxonImage, String preferredLanguage)", "testcase": false, "constructor": false}, {"identifier": "eraseLanguageTag", "parameters": "(TaxonImage taxonImage, String preferredLanguage, String commonName)", "modifiers": "private static", "return": "void", "signature": "void eraseLanguageTag(TaxonImage taxonImage, String preferredLanguage, String commonName)", "full_signature": "private static void eraseLanguageTag(TaxonImage taxonImage, String preferredLanguage, String commonName)", "class_method_signature": "TaxonUtil.eraseLanguageTag(TaxonImage taxonImage, String preferredLanguage, String commonName)", "testcase": false, "constructor": false}, {"identifier": "isResolved", "parameters": "(Taxon taxon)", "modifiers": "public static", "return": "boolean", "signature": "boolean isResolved(Taxon taxon)", "full_signature": "public static boolean isResolved(Taxon taxon)", "class_method_signature": "TaxonUtil.isResolved(Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "isResolved", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "boolean", "signature": "boolean isResolved(Map<String, String> properties)", "full_signature": "public static boolean isResolved(Map<String, String> properties)", "class_method_signature": "TaxonUtil.isResolved(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "isNonEmptyValue", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNonEmptyValue(String value)", "full_signature": "public static boolean isNonEmptyValue(String value)", "class_method_signature": "TaxonUtil.isNonEmptyValue(String value)", "testcase": false, "constructor": false}, {"identifier": "isEmptyValue", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmptyValue(String value)", "full_signature": "public static boolean isEmptyValue(String value)", "class_method_signature": "TaxonUtil.isEmptyValue(String value)", "testcase": false, "constructor": false}, {"identifier": "generateTargetTaxonPath", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "String", "signature": "String generateTargetTaxonPath(Map<String, String> properties)", "full_signature": "public static String generateTargetTaxonPath(Map<String, String> properties)", "class_method_signature": "TaxonUtil.generateTargetTaxonPath(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "generateTaxonPath", "parameters": "(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank)", "modifiers": "public static", "return": "String", "signature": "String generateTaxonPath(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank)", "full_signature": "public static String generateTaxonPath(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank)", "class_method_signature": "TaxonUtil.generateTaxonPath(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank)", "testcase": false, "constructor": false}, {"identifier": "generateTaxonPath", "parameters": "(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank,\n                                           String speciesRank)", "modifiers": "public static", "return": "String", "signature": "String generateTaxonPath(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank,\n                                           String speciesRank)", "full_signature": "public static String generateTaxonPath(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank,\n                                           String speciesRank)", "class_method_signature": "TaxonUtil.generateTaxonPath(Map<String, String> properties,\n                                           List<String> allRanks,\n                                           String genusRank,\n                                           String specificEpithetRank,\n                                           String subspecificEpithetRank,\n                                           String speciesRank)", "testcase": false, "constructor": false}, {"identifier": "generateTaxonPathNames", "parameters": "(Map<String, String> properties,\n                                                List<String> allRanks,\n                                                String keyPrefix,\n                                                String genusRank,\n                                                String specificEpithetRank,\n                                                String subspecificEpithetRank,\n                                                String speciesRank)", "modifiers": "public static", "return": "String", "signature": "String generateTaxonPathNames(Map<String, String> properties,\n                                                List<String> allRanks,\n                                                String keyPrefix,\n                                                String genusRank,\n                                                String specificEpithetRank,\n                                                String subspecificEpithetRank,\n                                                String speciesRank)", "full_signature": "public static String generateTaxonPathNames(Map<String, String> properties,\n                                                List<String> allRanks,\n                                                String keyPrefix,\n                                                String genusRank,\n                                                String specificEpithetRank,\n                                                String subspecificEpithetRank,\n                                                String speciesRank)", "class_method_signature": "TaxonUtil.generateTaxonPathNames(Map<String, String> properties,\n                                                List<String> allRanks,\n                                                String keyPrefix,\n                                                String genusRank,\n                                                String specificEpithetRank,\n                                                String subspecificEpithetRank,\n                                                String speciesRank)", "testcase": false, "constructor": false}, {"identifier": "getAllTargetTaxonRanks", "parameters": "()", "modifiers": "public final static", "return": "List<String>", "signature": "List<String> getAllTargetTaxonRanks()", "full_signature": "public final static List<String> getAllTargetTaxonRanks()", "class_method_signature": "TaxonUtil.getAllTargetTaxonRanks()", "testcase": false, "constructor": false}, {"identifier": "getAllSourceTaxonRanks", "parameters": "()", "modifiers": "public final static", "return": "List<String>", "signature": "List<String> getAllSourceTaxonRanks()", "full_signature": "public final static List<String> getAllSourceTaxonRanks()", "class_method_signature": "TaxonUtil.getAllSourceTaxonRanks()", "testcase": false, "constructor": false}, {"identifier": "generateTargetTaxonPathNames", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "String", "signature": "String generateTargetTaxonPathNames(Map<String, String> properties)", "full_signature": "public static String generateTargetTaxonPathNames(Map<String, String> properties)", "class_method_signature": "TaxonUtil.generateTargetTaxonPathNames(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "generateSourceTaxonPath", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "String", "signature": "String generateSourceTaxonPath(Map<String, String> properties)", "full_signature": "public static String generateSourceTaxonPath(Map<String, String> properties)", "class_method_signature": "TaxonUtil.generateSourceTaxonPath(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "generateSourceTaxonPathNames", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "String", "signature": "String generateSourceTaxonPathNames(Map<String, String> properties)", "full_signature": "public static String generateSourceTaxonPathNames(Map<String, String> properties)", "class_method_signature": "TaxonUtil.generateSourceTaxonPathNames(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "generateTaxonName", "parameters": "(Map<String, String> properties,\n                                           List<String> higherOrderRankKeys,\n                                           String genusKey,\n                                           String specificEpithetKey,\n                                           String subspecificEpithetKey,\n                                           String speciesKey)", "modifiers": "public static", "return": "String", "signature": "String generateTaxonName(Map<String, String> properties,\n                                           List<String> higherOrderRankKeys,\n                                           String genusKey,\n                                           String specificEpithetKey,\n                                           String subspecificEpithetKey,\n                                           String speciesKey)", "full_signature": "public static String generateTaxonName(Map<String, String> properties,\n                                           List<String> higherOrderRankKeys,\n                                           String genusKey,\n                                           String specificEpithetKey,\n                                           String subspecificEpithetKey,\n                                           String speciesKey)", "class_method_signature": "TaxonUtil.generateTaxonName(Map<String, String> properties,\n                                           List<String> higherOrderRankKeys,\n                                           String genusKey,\n                                           String specificEpithetKey,\n                                           String subspecificEpithetKey,\n                                           String speciesKey)", "testcase": false, "constructor": false}, {"identifier": "generateSpeciesName", "parameters": "(Map<String, String> properties, String genusKey, String specificEpithetKey, String subspecificEpithetKey, String speciesKey)", "modifiers": "public static", "return": "String", "signature": "String generateSpeciesName(Map<String, String> properties, String genusKey, String specificEpithetKey, String subspecificEpithetKey, String speciesKey)", "full_signature": "public static String generateSpeciesName(Map<String, String> properties, String genusKey, String specificEpithetKey, String subspecificEpithetKey, String speciesKey)", "class_method_signature": "TaxonUtil.generateSpeciesName(Map<String, String> properties, String genusKey, String specificEpithetKey, String subspecificEpithetKey, String speciesKey)", "testcase": false, "constructor": false}, {"identifier": "generateSourceTaxonName", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "String", "signature": "String generateSourceTaxonName(Map<String, String> properties)", "full_signature": "public static String generateSourceTaxonName(Map<String, String> properties)", "class_method_signature": "TaxonUtil.generateSourceTaxonName(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "generateTargetTaxonName", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "String", "signature": "String generateTargetTaxonName(Map<String, String> properties)", "full_signature": "public static String generateTargetTaxonName(Map<String, String> properties)", "class_method_signature": "TaxonUtil.generateTargetTaxonName(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "enrichTaxonNames", "parameters": "(Map<String, String> properties)", "modifiers": "public static", "return": "void", "signature": "void enrichTaxonNames(Map<String, String> properties)", "full_signature": "public static void enrichTaxonNames(Map<String, String> properties)", "class_method_signature": "TaxonUtil.enrichTaxonNames(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "nonBlankNodeOrNonBlankId", "parameters": "(Taxon taxon)", "modifiers": "public static", "return": "boolean", "signature": "boolean nonBlankNodeOrNonBlankId(Taxon taxon)", "full_signature": "public static boolean nonBlankNodeOrNonBlankId(Taxon taxon)", "class_method_signature": "TaxonUtil.nonBlankNodeOrNonBlankId(Taxon taxon)", "testcase": false, "constructor": false}, {"identifier": "generateTaxonPath", "parameters": "(Map<String, String> nameMap)", "modifiers": "public static", "return": "String", "signature": "String generateTaxonPath(Map<String, String> nameMap)", "full_signature": "public static String generateTaxonPath(Map<String, String> nameMap)", "class_method_signature": "TaxonUtil.generateTaxonPath(Map<String, String> nameMap)", "testcase": false, "constructor": false}, {"identifier": "generateTaxonPathNames", "parameters": "(Map<String, String> nameMap)", "modifiers": "public static", "return": "String", "signature": "String generateTaxonPathNames(Map<String, String> nameMap)", "full_signature": "public static String generateTaxonPathNames(Map<String, String> nameMap)", "class_method_signature": "TaxonUtil.generateTaxonPathNames(Map<String, String> nameMap)", "testcase": false, "constructor": false}, {"identifier": "hasLiteratureReference", "parameters": "(Taxon taxon)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasLiteratureReference(Taxon taxon)", "full_signature": "public static boolean hasLiteratureReference(Taxon taxon)", "class_method_signature": "TaxonUtil.hasLiteratureReference(Taxon taxon)", "testcase": false, "constructor": false}], "file": "eol-globi-lib/src/main/java/org/eol/globi/service/TaxonUtil.java"}, "focal_method": {"identifier": "determineNonOverlappingTaxa", "parameters": "(List<Taxon> collectTaxa)", "modifiers": "public static", "return": "List<Taxon>", "body": "public static List<Taxon> determineNonOverlappingTaxa(List<Taxon> collectTaxa) {\n        List<Taxon> nonOverlapping = new ArrayList<>(collectTaxa);\n        List<Taxon> overlapping;\n        while ((overlapping = nextOverlapping(nonOverlapping)).size() == 2) {\n            final Taxon first = overlapping.get(0);\n            final String[] split1 = split(first.getPath(), CharsetConstant.SEPARATOR_CHAR);\n            final Taxon second = overlapping.get(1);\n            final String[] split2 = split(second.getPath(), CharsetConstant.SEPARATOR_CHAR);\n            if (split1 != null && split2 != null && split1.length > split2.length) {\n                nonOverlapping.remove(first);\n            } else {\n                nonOverlapping.remove(second);\n            }\n        }\n        return nonOverlapping;\n    }", "signature": "List<Taxon> determineNonOverlappingTaxa(List<Taxon> collectTaxa)", "full_signature": "public static List<Taxon> determineNonOverlappingTaxa(List<Taxon> collectTaxa)", "class_method_signature": "TaxonUtil.determineNonOverlappingTaxa(List<Taxon> collectTaxa)", "testcase": false, "constructor": false, "invocations": ["size", "nextOverlapping", "get", "split", "getPath", "get", "split", "getPath", "remove", "remove"]}, "repository": {"repo_id": 2478263, "url": "https://github.com/globalbioticinteractions/globalbioticinteractions", "stars": 49, "created": "9/28/2011 9:51:47 PM +00:00", "updates": "2020-01-17T17:47:05+00:00", "fork": "False", "license": "licensed"}}