{"test_class": {"identifier": "DatasetImporterForDwCATest", "superclass": "", "interfaces": "", "fields": [], "file": "eol-globi-data-sources/src/test/java/org/eol/globi/data/DatasetImporterForDwCATest.java"}, "test_case": {"identifier": "occurrenceRemarks3", "parameters": "()", "modifiers": "@Test // see https://github.com/globalbioticinteractions/globalbioticinteractions/issues/504 public", "return": "void", "body": "@Test\n    // see https://github.com/globalbioticinteractions/globalbioticinteractions/issues/504\n    public void occurrenceRemarks3() throws IOException {\n        String occurrenceRemarks = \"AFA Acetocarmine Canada balsam \" +\n                \"{\\\"hostGen\\\":\\\"Bryconamericus\\\",\" +\n                \"\\\"hostSpec\\\":\\\"scleroparius\\\",\" +\n                \"\\\"hostBodyLoc\\\":\\\"intestine\\\",\" +\n                \"\\\"hostFldNo\\\":\\\"AChoudhury-BA-CR98-3\\\"}\";\n\n        Map<String, String> properties = DatasetImporterForDwCA.parseUSNMStyleHostOccurrenceRemarks(occurrenceRemarks);\n\n\n        assertThat(properties.get(TaxonUtil.TARGET_TAXON_NAME), is(\"Bryconamericus scleroparius\"));\n        assertThat(properties.get(TaxonUtil.TARGET_TAXON_GENUS), is(\"Bryconamericus\"));\n        assertThat(properties.get(TaxonUtil.TARGET_TAXON_SPECIFIC_EPITHET), is(\"scleroparius\"));\n        assertThat(properties.get(TaxonUtil.TARGET_TAXON_PATH), is(\"Bryconamericus | Bryconamericus scleroparius\"));\n        assertThat(properties.get(TaxonUtil.TARGET_TAXON_PATH_NAMES), is(\"genus | species\"));\n        assertThat(properties.get(TARGET_BODY_PART_NAME), is(\"intestine\"));\n        assertThat(properties.get(INTERACTION_TYPE_NAME), is(InteractType.HAS_HOST.getLabel()));\n        assertThat(properties.get(INTERACTION_TYPE_ID), is(InteractType.HAS_HOST.getIRI()));\n    }", "signature": "void occurrenceRemarks3()", "full_signature": "@Test // see https://github.com/globalbioticinteractions/globalbioticinteractions/issues/504 public void occurrenceRemarks3()", "class_method_signature": "DatasetImporterForDwCATest.occurrenceRemarks3()", "testcase": true, "constructor": false, "invocations": ["parseUSNMStyleHostOccurrenceRemarks", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "getLabel", "assertThat", "get", "is", "getIRI"]}, "focal_class": {"identifier": "DatasetImporterForDwCA", "superclass": "extends DatasetImporterWithListener", "interfaces": "", "fields": [{"original_string": "public static final String EXTENSION_ASSOCIATED_TAXA = \"http://purl.org/NET/aec/associatedTaxa\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_ASSOCIATED_TAXA = \"http://purl.org/NET/aec/associatedTaxa\"", "var_name": "EXTENSION_ASSOCIATED_TAXA"}, {"original_string": "public static final String EXTENSION_RESOURCE_RELATIONSHIP = \"http://rs.tdwg.org/dwc/terms/ResourceRelationship\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_RESOURCE_RELATIONSHIP = \"http://rs.tdwg.org/dwc/terms/ResourceRelationship\"", "var_name": "EXTENSION_RESOURCE_RELATIONSHIP"}, {"original_string": "public static final String EXTENSION_TAXON = \"http://rs.tdwg.org/dwc/terms/Taxon\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_TAXON = \"http://rs.tdwg.org/dwc/terms/Taxon\"", "var_name": "EXTENSION_TAXON"}, {"original_string": "public static final Pattern EX_NOTATION = Pattern.compile(\"^ex.+\\\\W.*\", Pattern.CASE_INSENSITIVE);", "modifier": "public static final", "type": "Pattern", "declarator": "EX_NOTATION = Pattern.compile(\"^ex.+\\\\W.*\", Pattern.CASE_INSENSITIVE)", "var_name": "EX_NOTATION"}, {"original_string": "public static final Pattern REARED_EX_NOTATION = Pattern.compile(\"^reared ex.+\\\\W.*\", Pattern.CASE_INSENSITIVE);", "modifier": "public static final", "type": "Pattern", "declarator": "REARED_EX_NOTATION = Pattern.compile(\"^reared ex.+\\\\W.*\", Pattern.CASE_INSENSITIVE)", "var_name": "REARED_EX_NOTATION"}, {"original_string": "public static final Pattern PATTERN_ASSOCIATED_TAXA_IDEA = Pattern.compile(\"(\\\\w+)\\\\W+(\\\\w+)(:)(.*idae)\");", "modifier": "public static final", "type": "Pattern", "declarator": "PATTERN_ASSOCIATED_TAXA_IDEA = Pattern.compile(\"(\\\\w+)\\\\W+(\\\\w+)(:)(.*idae)\")", "var_name": "PATTERN_ASSOCIATED_TAXA_IDEA"}, {"original_string": "public static final Pattern PATTERN_ASSOCIATED_TAXA_EAE = Pattern.compile(\"(.*eae):(.*):(.*)\");", "modifier": "public static final", "type": "Pattern", "declarator": "PATTERN_ASSOCIATED_TAXA_EAE = Pattern.compile(\"(.*eae):(.*):(.*)\")", "var_name": "PATTERN_ASSOCIATED_TAXA_EAE"}], "methods": [{"identifier": "DatasetImporterForDwCA", "parameters": "(ParserFactory parserFactory, NodeFactory nodeFactory)", "modifiers": "public", "return": "", "signature": " DatasetImporterForDwCA(ParserFactory parserFactory, NodeFactory nodeFactory)", "full_signature": "public  DatasetImporterForDwCA(ParserFactory parserFactory, NodeFactory nodeFactory)", "class_method_signature": "DatasetImporterForDwCA.DatasetImporterForDwCA(ParserFactory parserFactory, NodeFactory nodeFactory)", "testcase": false, "constructor": true}, {"identifier": "importStudy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void importStudy()", "full_signature": "@Override public void importStudy()", "class_method_signature": "DatasetImporterForDwCA.importStudy()", "testcase": false, "constructor": false}, {"identifier": "importCore", "parameters": "(Archive archive, InteractionListener interactionListener)", "modifiers": "public", "return": "int", "signature": "int importCore(Archive archive, InteractionListener interactionListener)", "full_signature": "public int importCore(Archive archive, InteractionListener interactionListener)", "class_method_signature": "DatasetImporterForDwCA.importCore(Archive archive, InteractionListener interactionListener)", "testcase": false, "constructor": false}, {"identifier": "handleRecord", "parameters": "(InteractionListener interactionListener, Record rec)", "modifiers": "public", "return": "void", "signature": "void handleRecord(InteractionListener interactionListener, Record rec)", "full_signature": "public void handleRecord(InteractionListener interactionListener, Record rec)", "class_method_signature": "DatasetImporterForDwCA.handleRecord(InteractionListener interactionListener, Record rec)", "testcase": false, "constructor": false}, {"identifier": "addRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks", "parameters": "(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "modifiers": "public static", "return": "void", "signature": "void addRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "full_signature": "public static void addRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "class_method_signature": "DatasetImporterForDwCA.addRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "testcase": false, "constructor": false}, {"identifier": "parseRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks", "parameters": "(String occurrenceRemarks)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks(String occurrenceRemarks)", "full_signature": "public static Map<String, String> parseRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks(String occurrenceRemarks)", "class_method_signature": "DatasetImporterForDwCA.parseRoyalSaskatchewanMuseumOwlPelletCollectionStyleRemarks(String occurrenceRemarks)", "testcase": false, "constructor": false}, {"identifier": "addUSNMStyleHostOccurrenceRemarks", "parameters": "(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "modifiers": "public", "return": "void", "signature": "void addUSNMStyleHostOccurrenceRemarks(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "full_signature": "public void addUSNMStyleHostOccurrenceRemarks(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "class_method_signature": "DatasetImporterForDwCA.addUSNMStyleHostOccurrenceRemarks(List<Map<String, String>> interactionCandidates, String occurrenceRemarks)", "testcase": false, "constructor": false}, {"identifier": "mapCoreProperties", "parameters": "(Record rec, Map<String, String> interactionProperties)", "modifiers": "public static", "return": "void", "signature": "void mapCoreProperties(Record rec, Map<String, String> interactionProperties)", "full_signature": "public static void mapCoreProperties(Record rec, Map<String, String> interactionProperties)", "class_method_signature": "DatasetImporterForDwCA.mapCoreProperties(Record rec, Map<String, String> interactionProperties)", "testcase": false, "constructor": false}, {"identifier": "mapLocationAndReferenceInfo", "parameters": "(Record rec, Map<String, String> interactionProperties)", "modifiers": "public static", "return": "void", "signature": "void mapLocationAndReferenceInfo(Record rec, Map<String, String> interactionProperties)", "full_signature": "public static void mapLocationAndReferenceInfo(Record rec, Map<String, String> interactionProperties)", "class_method_signature": "DatasetImporterForDwCA.mapLocationAndReferenceInfo(Record rec, Map<String, String> interactionProperties)", "testcase": false, "constructor": false}, {"identifier": "mapSourceProperties", "parameters": "(Record rec, Map<String, String> interactionProperties)", "modifiers": "public static", "return": "void", "signature": "void mapSourceProperties(Record rec, Map<String, String> interactionProperties)", "full_signature": "public static void mapSourceProperties(Record rec, Map<String, String> interactionProperties)", "class_method_signature": "DatasetImporterForDwCA.mapSourceProperties(Record rec, Map<String, String> interactionProperties)", "testcase": false, "constructor": false}, {"identifier": "mapReferenceInfo", "parameters": "(Record rec, Map<String, String> interactionProperties)", "modifiers": "static", "return": "void", "signature": "void mapReferenceInfo(Record rec, Map<String, String> interactionProperties)", "full_signature": "static void mapReferenceInfo(Record rec, Map<String, String> interactionProperties)", "class_method_signature": "DatasetImporterForDwCA.mapReferenceInfo(Record rec, Map<String, String> interactionProperties)", "testcase": false, "constructor": false}, {"identifier": "mapIfAvailable", "parameters": "(Record rec, Map<String, String> interactionProperties, String key, Term term)", "modifiers": "public static", "return": "void", "signature": "void mapIfAvailable(Record rec, Map<String, String> interactionProperties, String key, Term term)", "full_signature": "public static void mapIfAvailable(Record rec, Map<String, String> interactionProperties, String key, Term term)", "class_method_signature": "DatasetImporterForDwCA.mapIfAvailable(Record rec, Map<String, String> interactionProperties, String key, Term term)", "testcase": false, "constructor": false}, {"identifier": "mapIfAvailable", "parameters": "(Map<String, String> interactionProperties, String key, String value)", "modifiers": "public static", "return": "void", "signature": "void mapIfAvailable(Map<String, String> interactionProperties, String key, String value)", "full_signature": "public static void mapIfAvailable(Map<String, String> interactionProperties, String key, String value)", "class_method_signature": "DatasetImporterForDwCA.mapIfAvailable(Map<String, String> interactionProperties, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "parseAssociatedTaxa", "parameters": "(String s)", "modifiers": "static", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> parseAssociatedTaxa(String s)", "full_signature": "static List<Map<String, String>> parseAssociatedTaxa(String s)", "class_method_signature": "DatasetImporterForDwCA.parseAssociatedTaxa(String s)", "testcase": false, "constructor": false}, {"identifier": "addSpecificInteractionForAssociatedTaxon", "parameters": "(List<Map<String, String>> properties, String[] verbTaxon)", "modifiers": "private static", "return": "void", "signature": "void addSpecificInteractionForAssociatedTaxon(List<Map<String, String>> properties, String[] verbTaxon)", "full_signature": "private static void addSpecificInteractionForAssociatedTaxon(List<Map<String, String>> properties, String[] verbTaxon)", "class_method_signature": "DatasetImporterForDwCA.addSpecificInteractionForAssociatedTaxon(List<Map<String, String>> properties, String[] verbTaxon)", "testcase": false, "constructor": false}, {"identifier": "trimAndRemoveQuotes", "parameters": "(String verbatimTerm)", "modifiers": "private static", "return": "String", "signature": "String trimAndRemoveQuotes(String verbatimTerm)", "full_signature": "private static String trimAndRemoveQuotes(String verbatimTerm)", "class_method_signature": "DatasetImporterForDwCA.trimAndRemoveQuotes(String verbatimTerm)", "testcase": false, "constructor": false}, {"identifier": "addDefaultInteractionForAssociatedTaxon", "parameters": "(List<Map<String, String>> properties, String part)", "modifiers": "private static", "return": "void", "signature": "void addDefaultInteractionForAssociatedTaxon(List<Map<String, String>> properties, String part)", "full_signature": "private static void addDefaultInteractionForAssociatedTaxon(List<Map<String, String>> properties, String part)", "class_method_signature": "DatasetImporterForDwCA.addDefaultInteractionForAssociatedTaxon(List<Map<String, String>> properties, String part)", "testcase": false, "constructor": false}, {"identifier": "parseAssociatedOccurrences", "parameters": "(String s)", "modifiers": "static", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> parseAssociatedOccurrences(String s)", "full_signature": "static List<Map<String, String>> parseAssociatedOccurrences(String s)", "class_method_signature": "DatasetImporterForDwCA.parseAssociatedOccurrences(String s)", "testcase": false, "constructor": false}, {"identifier": "parseDynamicPropertiesForInteractionsOnly", "parameters": "(String s)", "modifiers": "static", "return": "Map<String, String>", "signature": "Map<String, String> parseDynamicPropertiesForInteractionsOnly(String s)", "full_signature": "static Map<String, String> parseDynamicPropertiesForInteractionsOnly(String s)", "class_method_signature": "DatasetImporterForDwCA.parseDynamicPropertiesForInteractionsOnly(String s)", "testcase": false, "constructor": false}, {"identifier": "importAssociatedTaxaExtension", "parameters": "(Archive archive, InteractionListener interactionListener)", "modifiers": "static", "return": "void", "signature": "void importAssociatedTaxaExtension(Archive archive, InteractionListener interactionListener)", "full_signature": "static void importAssociatedTaxaExtension(Archive archive, InteractionListener interactionListener)", "class_method_signature": "DatasetImporterForDwCA.importAssociatedTaxaExtension(Archive archive, InteractionListener interactionListener)", "testcase": false, "constructor": false}, {"identifier": "importResourceRelationExtension", "parameters": "(Archive archive, InteractionListener interactionListener)", "modifiers": "static", "return": "void", "signature": "void importResourceRelationExtension(Archive archive, InteractionListener interactionListener)", "full_signature": "static void importResourceRelationExtension(Archive archive, InteractionListener interactionListener)", "class_method_signature": "DatasetImporterForDwCA.importResourceRelationExtension(Archive archive, InteractionListener interactionListener)", "testcase": false, "constructor": false}, {"identifier": "appendVerbatimResourceRelationsValues", "parameters": "(Record record, Map<String, String> props)", "modifiers": "private static", "return": "void", "signature": "void appendVerbatimResourceRelationsValues(Record record, Map<String, String> props)", "full_signature": "private static void appendVerbatimResourceRelationsValues(Record record, Map<String, String> props)", "class_method_signature": "DatasetImporterForDwCA.appendVerbatimResourceRelationsValues(Record record, Map<String, String> props)", "testcase": false, "constructor": false}, {"identifier": "findRelationshipTypeIdByLabel", "parameters": "(String relationship, InteractTypeMapper mapper)", "modifiers": "private static", "return": "String", "signature": "String findRelationshipTypeIdByLabel(String relationship, InteractTypeMapper mapper)", "full_signature": "private static String findRelationshipTypeIdByLabel(String relationship, InteractTypeMapper mapper)", "class_method_signature": "DatasetImporterForDwCA.findRelationshipTypeIdByLabel(String relationship, InteractTypeMapper mapper)", "testcase": false, "constructor": false}, {"identifier": "attemptLinkUsingTerm", "parameters": "(HTreeMap<String, Map<String, Map<String, String>>> termIdPropertyMap,\n                                             Set<String> referencedSourceIds,\n                                             Set<String> referencedTargetIds,\n                                             Record coreRecord,\n                                             DwcTerm term)", "modifiers": "private static", "return": "void", "signature": "void attemptLinkUsingTerm(HTreeMap<String, Map<String, Map<String, String>>> termIdPropertyMap,\n                                             Set<String> referencedSourceIds,\n                                             Set<String> referencedTargetIds,\n                                             Record coreRecord,\n                                             DwcTerm term)", "full_signature": "private static void attemptLinkUsingTerm(HTreeMap<String, Map<String, Map<String, String>>> termIdPropertyMap,\n                                             Set<String> referencedSourceIds,\n                                             Set<String> referencedTargetIds,\n                                             Record coreRecord,\n                                             DwcTerm term)", "class_method_signature": "DatasetImporterForDwCA.attemptLinkUsingTerm(HTreeMap<String, Map<String, Map<String, String>>> termIdPropertyMap,\n                                             Set<String> referencedSourceIds,\n                                             Set<String> referencedTargetIds,\n                                             Record coreRecord,\n                                             DwcTerm term)", "testcase": false, "constructor": false}, {"identifier": "populatePropertiesAssociatedWithId", "parameters": "(Map<String, String> props,\n                                                           String id,\n                                                           boolean isSource,\n                                                           Map<String, String> occurrenceProperties,\n                                                           Pair<String, String> idLabelPairs)", "modifiers": "private static", "return": "void", "signature": "void populatePropertiesAssociatedWithId(Map<String, String> props,\n                                                           String id,\n                                                           boolean isSource,\n                                                           Map<String, String> occurrenceProperties,\n                                                           Pair<String, String> idLabelPairs)", "full_signature": "private static void populatePropertiesAssociatedWithId(Map<String, String> props,\n                                                           String id,\n                                                           boolean isSource,\n                                                           Map<String, String> occurrenceProperties,\n                                                           Pair<String, String> idLabelPairs)", "class_method_signature": "DatasetImporterForDwCA.populatePropertiesAssociatedWithId(Map<String, String> props,\n                                                           String id,\n                                                           boolean isSource,\n                                                           Map<String, String> occurrenceProperties,\n                                                           Pair<String, String> idLabelPairs)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsentAndNotBlank", "parameters": "(Map<String, String> props, String key, String value)", "modifiers": "private static", "return": "void", "signature": "void putIfAbsentAndNotBlank(Map<String, String> props, String key, String value)", "full_signature": "private static void putIfAbsentAndNotBlank(Map<String, String> props, String key, String value)", "class_method_signature": "DatasetImporterForDwCA.putIfAbsentAndNotBlank(Map<String, String> props, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "findResourceRelationshipExtension", "parameters": "(Archive archive)", "modifiers": "private static", "return": "ArchiveFile", "signature": "ArchiveFile findResourceRelationshipExtension(Archive archive)", "full_signature": "private static ArchiveFile findResourceRelationshipExtension(Archive archive)", "class_method_signature": "DatasetImporterForDwCA.findResourceRelationshipExtension(Archive archive)", "testcase": false, "constructor": false}, {"identifier": "findResourceExtension", "parameters": "(Archive archive, String extensionType)", "modifiers": "private static", "return": "ArchiveFile", "signature": "ArchiveFile findResourceExtension(Archive archive, String extensionType)", "full_signature": "private static ArchiveFile findResourceExtension(Archive archive, String extensionType)", "class_method_signature": "DatasetImporterForDwCA.findResourceExtension(Archive archive, String extensionType)", "testcase": false, "constructor": false}, {"identifier": "termsToMap", "parameters": "(Record record, Map<String, String> props)", "modifiers": "private static", "return": "void", "signature": "void termsToMap(Record record, Map<String, String> props)", "full_signature": "private static void termsToMap(Record record, Map<String, String> props)", "class_method_signature": "DatasetImporterForDwCA.termsToMap(Record record, Map<String, String> props)", "testcase": false, "constructor": false}, {"identifier": "mapAssociationProperties", "parameters": "(Map<String, String> targetProperties, TreeMap<String, String> interaction)", "modifiers": "private static", "return": "void", "signature": "void mapAssociationProperties(Map<String, String> targetProperties, TreeMap<String, String> interaction)", "full_signature": "private static void mapAssociationProperties(Map<String, String> targetProperties, TreeMap<String, String> interaction)", "class_method_signature": "DatasetImporterForDwCA.mapAssociationProperties(Map<String, String> targetProperties, TreeMap<String, String> interaction)", "testcase": false, "constructor": false}, {"identifier": "hasExtension", "parameters": "(Archive archive, String extensionQualitfiedName)", "modifiers": "static", "return": "boolean", "signature": "boolean hasExtension(Archive archive, String extensionQualitfiedName)", "full_signature": "static boolean hasExtension(Archive archive, String extensionQualitfiedName)", "class_method_signature": "DatasetImporterForDwCA.hasExtension(Archive archive, String extensionQualitfiedName)", "testcase": false, "constructor": false}, {"identifier": "hasAssociatedTaxaExtension", "parameters": "(Archive archive)", "modifiers": "static", "return": "boolean", "signature": "boolean hasAssociatedTaxaExtension(Archive archive)", "full_signature": "static boolean hasAssociatedTaxaExtension(Archive archive)", "class_method_signature": "DatasetImporterForDwCA.hasAssociatedTaxaExtension(Archive archive)", "testcase": false, "constructor": false}, {"identifier": "hasResourceRelationships", "parameters": "(Archive archive)", "modifiers": "static", "return": "boolean", "signature": "boolean hasResourceRelationships(Archive archive)", "full_signature": "static boolean hasResourceRelationships(Archive archive)", "class_method_signature": "DatasetImporterForDwCA.hasResourceRelationships(Archive archive)", "testcase": false, "constructor": false}, {"identifier": "parseUSNMStyleHostOccurrenceRemarks", "parameters": "(String occurrenceRemarks)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseUSNMStyleHostOccurrenceRemarks(String occurrenceRemarks)", "full_signature": "public static Map<String, String> parseUSNMStyleHostOccurrenceRemarks(String occurrenceRemarks)", "class_method_signature": "DatasetImporterForDwCA.parseUSNMStyleHostOccurrenceRemarks(String occurrenceRemarks)", "testcase": false, "constructor": false}, {"identifier": "parseJsonChunk", "parameters": "(String candidateJsonChunk)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseJsonChunk(String candidateJsonChunk)", "full_signature": "public static Map<String, String> parseJsonChunk(String candidateJsonChunk)", "class_method_signature": "DatasetImporterForDwCA.parseJsonChunk(String candidateJsonChunk)", "testcase": false, "constructor": false}, {"identifier": "setPropertyIfExists", "parameters": "(Map<String, String> properties, JsonNode jsonNode, String remarkKey, String propertyName)", "modifiers": "private static", "return": "void", "signature": "void setPropertyIfExists(Map<String, String> properties, JsonNode jsonNode, String remarkKey, String propertyName)", "full_signature": "private static void setPropertyIfExists(Map<String, String> properties, JsonNode jsonNode, String remarkKey, String propertyName)", "class_method_signature": "DatasetImporterForDwCA.setPropertyIfExists(Map<String, String> properties, JsonNode jsonNode, String remarkKey, String propertyName)", "testcase": false, "constructor": false}], "file": "eol-globi-data-sources/src/main/java/org/eol/globi/data/DatasetImporterForDwCA.java"}, "focal_method": {"identifier": "parseUSNMStyleHostOccurrenceRemarks", "parameters": "(String occurrenceRemarks)", "modifiers": "public static", "return": "Map<String, String>", "body": "public static Map<String, String> parseUSNMStyleHostOccurrenceRemarks(String occurrenceRemarks) throws IOException {\n        Map<String, String> properties = Collections.emptyMap();\n        String candidateJsonChunk = null;\n        String[] split = StringUtils.splitPreserveAllTokens(occurrenceRemarks, \"{\");\n        if (split.length > 1) {\n            String[] splitClosing = StringUtils.splitPreserveAllTokens(split[1], \"}\");\n            if (splitClosing.length > 1) {\n                candidateJsonChunk = \"{\" + splitClosing[0] + \"}\";\n            }\n        }\n\n        if (StringUtils.isNotBlank(candidateJsonChunk)) {\n            try {\n                properties = parseJsonChunk(candidateJsonChunk);\n            } catch (IOException ex) {\n                if (StringUtils.contains(candidateJsonChunk, \"hostGen\")) {\n                    throw new IOException(\"found likely malformed host description [\" + candidateJsonChunk + \"], see https://github.com/globalbioticinteractions/globalbioticinteractions/issues/505\");\n                }\n            }\n        }\n        return properties;\n    }", "signature": "Map<String, String> parseUSNMStyleHostOccurrenceRemarks(String occurrenceRemarks)", "full_signature": "public static Map<String, String> parseUSNMStyleHostOccurrenceRemarks(String occurrenceRemarks)", "class_method_signature": "DatasetImporterForDwCA.parseUSNMStyleHostOccurrenceRemarks(String occurrenceRemarks)", "testcase": false, "constructor": false, "invocations": ["emptyMap", "splitPreserveAllTokens", "splitPreserveAllTokens", "isNotBlank", "parseJsonChunk", "contains"]}, "repository": {"repo_id": 2478263, "url": "https://github.com/globalbioticinteractions/globalbioticinteractions", "stars": 49, "created": "9/28/2011 9:51:47 PM +00:00", "updates": "2020-01-17T17:47:05+00:00", "fork": "False", "license": "licensed"}}