{"test_class": {"identifier": "ExternalIdUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "eol-globi-lib/src/test/java/org/eol/globi/util/ExternalIdUtilTest.java"}, "test_case": {"identifier": "gbifTaxon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void gbifTaxon() {\n        assertThat(ExternalIdUtil.taxonomyProviderFor(\"https://www.gbif.org/species/5110848\"), is(TaxonomyProvider.GBIF));\n    }", "signature": "void gbifTaxon()", "full_signature": "@Test public void gbifTaxon()", "class_method_signature": "ExternalIdUtilTest.gbifTaxon()", "testcase": true, "constructor": false, "invocations": ["assertThat", "taxonomyProviderFor", "is"]}, "focal_class": {"identifier": "ExternalIdUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, String> PREFIX_MAP = new HashMap<String, String>() {{\n        put(TaxonomyProvider.ID_PREFIX_EOL, \"http://eol.org/pages/\");\n        put(TaxonomyProvider.EOL_V2.getIdPrefix(), \"https://doi.org/10.5281/zenodo.1495266#\");\n        put(TaxonomyProvider.ID_PREFIX_WORMS, \"https://www.marinespecies.org/aphia.php?p=taxdetails&id=\");\n        put(TaxonomyProvider.ID_PREFIX_ENVO, \"http://purl.obolibrary.org/obo/ENVO_\");\n        put(TaxonomyProvider.ID_PREFIX_WIKIPEDIA, \"http://wikipedia.org/wiki/\");\n        put(TaxonomyProvider.ID_PREFIX_GULFBASE, \"http://gulfbase.org/biogomx/biospecies.php?species=\");\n        put(TaxonomyProvider.ID_PREFIX_GAME, \"https://public.myfwc.com/FWRI/GAME/Survey.aspx?id=\");\n        put(TaxonomyProvider.ID_CMECS, \"https://cmecscatalog.org/cmecs/classification/aquaticSetting/\");\n        put(TaxonomyProvider.ID_BIO_INFO_REFERENCE, \"http://bioinfo.org.uk/html/b\");\n        put(TaxonomyProvider.ID_PREFIX_GBIF, \"http://www.gbif.org/species/\");\n        put(TaxonomyProvider.ID_PREFIX_INATURALIST, \"https://www.inaturalist.org/observations/\");\n        put(TaxonomyProvider.ATLAS_OF_LIVING_AUSTRALIA.getIdPrefix(), \"https://bie.ala.org.au/species/\");\n        put(TaxonomyProvider.ID_PREFIX_AUSTRALIAN_FAUNAL_DIRECTORY, \"http://www.environment.gov.au/biodiversity/abrs/online-resources/fauna/afd/taxa/\");\n        put(TaxonomyProvider.ID_PREFIX_BIODIVERSITY_AUSTRALIA, \"http://id.biodiversity.org.au/apni.taxon/\");\n        put(TaxonomyProvider.ID_PREFIX_INDEX_FUNGORUM, \"http://www.indexfungorum.org/names/NamesRecord.asp?RecordID=\");\n        put(TaxonomyProvider.ID_PREFIX_NCBI, \"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=\");\n        put(TaxonomyProvider.ID_PREFIX_NBN, \"https://data.nbn.org.uk/Taxa/\");\n        put(\"doi:\", \"https://doi.org/\");\n        put(\"DOI:\", \"https://doi.org/\");\n        put(TaxonomyProvider.INTERIM_REGISTER_OF_MARINE_AND_NONMARINE_GENERA.getIdPrefix(), \"http://www.marine.csiro.au/mirrorsearch/ir_search.list_species?sp_id=\");\n        put(TaxonomyProvider.OPEN_TREE_OF_LIFE.getIdPrefix(), \"https://tree.opentreeoflife.org/opentree/ottol@\");\n        put(TaxonomyProvider.ID_PREFIX_HTTP, TaxonomyProvider.ID_PREFIX_HTTP);\n        put(TaxonomyProvider.ID_PREFIX_HTTPS, TaxonomyProvider.ID_PREFIX_HTTPS);\n        put(TaxonomyProvider.ID_PREFIX_ITIS, \"http://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=\");\n        put(TaxonomyProvider.FISHBASE_SPECCODE.getIdPrefix(), \"http://fishbase.org/summary/\");\n        put(TaxonomyProvider.SEALIFEBASE_SPECCODE.getIdPrefix(), \"http://sealifebase.org/Summary/SpeciesSummary.php?id=\");\n        put(TaxonomyProvider.INATURALIST_TAXON.getIdPrefix(), \"https://inaturalist.org/taxa/\");\n        put(TaxonomyProvider.WIKIDATA.getIdPrefix(), \"https://www.wikidata.org/wiki/\");\n        put(TaxonomyProvider.GEONAMES.getIdPrefix(), \"http://www.geonames.org/\");\n        put(TaxonomyProvider.MSW.getIdPrefix(), \"http://www.departments.bucknell.edu/biology/resources/msw3/browse.asp?s=y&id=\");\n        put(TaxonomyProvider.PLAZI.getIdPrefix(), \"http://treatment.plazi.org/id/\");\n    }};", "modifier": "private static final", "type": "Map<String, String>", "declarator": "PREFIX_MAP = new HashMap<String, String>() {{\n        put(TaxonomyProvider.ID_PREFIX_EOL, \"http://eol.org/pages/\");\n        put(TaxonomyProvider.EOL_V2.getIdPrefix(), \"https://doi.org/10.5281/zenodo.1495266#\");\n        put(TaxonomyProvider.ID_PREFIX_WORMS, \"https://www.marinespecies.org/aphia.php?p=taxdetails&id=\");\n        put(TaxonomyProvider.ID_PREFIX_ENVO, \"http://purl.obolibrary.org/obo/ENVO_\");\n        put(TaxonomyProvider.ID_PREFIX_WIKIPEDIA, \"http://wikipedia.org/wiki/\");\n        put(TaxonomyProvider.ID_PREFIX_GULFBASE, \"http://gulfbase.org/biogomx/biospecies.php?species=\");\n        put(TaxonomyProvider.ID_PREFIX_GAME, \"https://public.myfwc.com/FWRI/GAME/Survey.aspx?id=\");\n        put(TaxonomyProvider.ID_CMECS, \"https://cmecscatalog.org/cmecs/classification/aquaticSetting/\");\n        put(TaxonomyProvider.ID_BIO_INFO_REFERENCE, \"http://bioinfo.org.uk/html/b\");\n        put(TaxonomyProvider.ID_PREFIX_GBIF, \"http://www.gbif.org/species/\");\n        put(TaxonomyProvider.ID_PREFIX_INATURALIST, \"https://www.inaturalist.org/observations/\");\n        put(TaxonomyProvider.ATLAS_OF_LIVING_AUSTRALIA.getIdPrefix(), \"https://bie.ala.org.au/species/\");\n        put(TaxonomyProvider.ID_PREFIX_AUSTRALIAN_FAUNAL_DIRECTORY, \"http://www.environment.gov.au/biodiversity/abrs/online-resources/fauna/afd/taxa/\");\n        put(TaxonomyProvider.ID_PREFIX_BIODIVERSITY_AUSTRALIA, \"http://id.biodiversity.org.au/apni.taxon/\");\n        put(TaxonomyProvider.ID_PREFIX_INDEX_FUNGORUM, \"http://www.indexfungorum.org/names/NamesRecord.asp?RecordID=\");\n        put(TaxonomyProvider.ID_PREFIX_NCBI, \"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=\");\n        put(TaxonomyProvider.ID_PREFIX_NBN, \"https://data.nbn.org.uk/Taxa/\");\n        put(\"doi:\", \"https://doi.org/\");\n        put(\"DOI:\", \"https://doi.org/\");\n        put(TaxonomyProvider.INTERIM_REGISTER_OF_MARINE_AND_NONMARINE_GENERA.getIdPrefix(), \"http://www.marine.csiro.au/mirrorsearch/ir_search.list_species?sp_id=\");\n        put(TaxonomyProvider.OPEN_TREE_OF_LIFE.getIdPrefix(), \"https://tree.opentreeoflife.org/opentree/ottol@\");\n        put(TaxonomyProvider.ID_PREFIX_HTTP, TaxonomyProvider.ID_PREFIX_HTTP);\n        put(TaxonomyProvider.ID_PREFIX_HTTPS, TaxonomyProvider.ID_PREFIX_HTTPS);\n        put(TaxonomyProvider.ID_PREFIX_ITIS, \"http://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=\");\n        put(TaxonomyProvider.FISHBASE_SPECCODE.getIdPrefix(), \"http://fishbase.org/summary/\");\n        put(TaxonomyProvider.SEALIFEBASE_SPECCODE.getIdPrefix(), \"http://sealifebase.org/Summary/SpeciesSummary.php?id=\");\n        put(TaxonomyProvider.INATURALIST_TAXON.getIdPrefix(), \"https://inaturalist.org/taxa/\");\n        put(TaxonomyProvider.WIKIDATA.getIdPrefix(), \"https://www.wikidata.org/wiki/\");\n        put(TaxonomyProvider.GEONAMES.getIdPrefix(), \"http://www.geonames.org/\");\n        put(TaxonomyProvider.MSW.getIdPrefix(), \"http://www.departments.bucknell.edu/biology/resources/msw3/browse.asp?s=y&id=\");\n        put(TaxonomyProvider.PLAZI.getIdPrefix(), \"http://treatment.plazi.org/id/\");\n    }}", "var_name": "PREFIX_MAP"}, {"original_string": "private static final Map<String, String> URL_TO_PREFIX_MAP = new HashMap<String, String>() {{\n        for (Entry<String, String> prefixUrl : PREFIX_MAP.entrySet()) {\n            put(prefixUrl.getValue(), prefixUrl.getKey());\n        }\n\n    }};", "modifier": "private static final", "type": "Map<String, String>", "declarator": "URL_TO_PREFIX_MAP = new HashMap<String, String>() {{\n        for (Entry<String, String> prefixUrl : PREFIX_MAP.entrySet()) {\n            put(prefixUrl.getValue(), prefixUrl.getKey());\n        }\n\n    }}", "var_name": "URL_TO_PREFIX_MAP"}, {"original_string": "private static final Log LOG = LogFactory.getLog(ExternalIdUtil.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ExternalIdUtil.class)", "var_name": "LOG"}, {"original_string": "private static final Pattern LIKELY_ID_PATTERN = Pattern.compile(\".*[:-].*\");", "modifier": "private static final", "type": "Pattern", "declarator": "LIKELY_ID_PATTERN = Pattern.compile(\".*[:-].*\")", "var_name": "LIKELY_ID_PATTERN"}], "methods": [{"identifier": "urlForExternalId", "parameters": "(String externalId)", "modifiers": "public static", "return": "String", "signature": "String urlForExternalId(String externalId)", "full_signature": "public static String urlForExternalId(String externalId)", "class_method_signature": "ExternalIdUtil.urlForExternalId(String externalId)", "testcase": false, "constructor": false}, {"identifier": "isIRMNG", "parameters": "(String idPrefix)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIRMNG(String idPrefix)", "full_signature": "public static boolean isIRMNG(String idPrefix)", "class_method_signature": "ExternalIdUtil.isIRMNG(String idPrefix)", "testcase": false, "constructor": false}, {"identifier": "urlForIRMNG", "parameters": "(String externalId, String idPrefix)", "modifiers": "public static", "return": "String", "signature": "String urlForIRMNG(String externalId, String idPrefix)", "full_signature": "public static String urlForIRMNG(String externalId, String idPrefix)", "class_method_signature": "ExternalIdUtil.urlForIRMNG(String externalId, String idPrefix)", "testcase": false, "constructor": false}, {"identifier": "getURLPrefixMap", "parameters": "()", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getURLPrefixMap()", "full_signature": "public static Map<String, String> getURLPrefixMap()", "class_method_signature": "ExternalIdUtil.getURLPrefixMap()", "testcase": false, "constructor": false}, {"identifier": "getURLSuffixMap", "parameters": "()", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getURLSuffixMap()", "full_signature": "public static Map<String, String> getURLSuffixMap()", "class_method_signature": "ExternalIdUtil.getURLSuffixMap()", "testcase": false, "constructor": false}, {"identifier": "isSupported", "parameters": "(String externalId)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupported(String externalId)", "full_signature": "public static boolean isSupported(String externalId)", "class_method_signature": "ExternalIdUtil.isSupported(String externalId)", "testcase": false, "constructor": false}, {"identifier": "taxonomyProviderFor", "parameters": "(String externalId)", "modifiers": "public static", "return": "TaxonomyProvider", "signature": "TaxonomyProvider taxonomyProviderFor(String externalId)", "full_signature": "public static TaxonomyProvider taxonomyProviderFor(String externalId)", "class_method_signature": "ExternalIdUtil.taxonomyProviderFor(String externalId)", "testcase": false, "constructor": false}, {"identifier": "getUrlFromExternalId", "parameters": "(String jsonString)", "modifiers": "public static", "return": "String", "signature": "String getUrlFromExternalId(String jsonString)", "full_signature": "public static String getUrlFromExternalId(String jsonString)", "class_method_signature": "ExternalIdUtil.getUrlFromExternalId(String jsonString)", "testcase": false, "constructor": false}, {"identifier": "buildJsonUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String buildJsonUrl(String url)", "full_signature": "public static String buildJsonUrl(String url)", "class_method_signature": "ExternalIdUtil.buildJsonUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "toCitation", "parameters": "(String contributor, String description, String publicationYear)", "modifiers": "public static", "return": "String", "signature": "String toCitation(String contributor, String description, String publicationYear)", "full_signature": "public static String toCitation(String contributor, String description, String publicationYear)", "class_method_signature": "ExternalIdUtil.toCitation(String contributor, String description, String publicationYear)", "testcase": false, "constructor": false}, {"identifier": "selectValue", "parameters": "(Map<String, String> link, String[] candidateIdsInIncreasingPreference)", "modifiers": "public static", "return": "String", "signature": "String selectValue(Map<String, String> link, String[] candidateIdsInIncreasingPreference)", "full_signature": "public static String selectValue(Map<String, String> link, String[] candidateIdsInIncreasingPreference)", "class_method_signature": "ExternalIdUtil.selectValue(Map<String, String> link, String[] candidateIdsInIncreasingPreference)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(Map<String, String> link, String propertyName)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasProperty(Map<String, String> link, String propertyName)", "full_signature": "public static boolean hasProperty(Map<String, String> link, String propertyName)", "class_method_signature": "ExternalIdUtil.hasProperty(Map<String, String> link, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "stripPrefix", "parameters": "(TaxonomyProvider provider, String externalId)", "modifiers": "public static", "return": "String", "signature": "String stripPrefix(TaxonomyProvider provider, String externalId)", "full_signature": "public static String stripPrefix(TaxonomyProvider provider, String externalId)", "class_method_signature": "ExternalIdUtil.stripPrefix(TaxonomyProvider provider, String externalId)", "testcase": false, "constructor": false}, {"identifier": "prefixForUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String prefixForUrl(String url)", "full_signature": "public static String prefixForUrl(String url)", "class_method_signature": "ExternalIdUtil.prefixForUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "isLikelyId", "parameters": "(String idCandidate)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLikelyId(String idCandidate)", "full_signature": "public static boolean isLikelyId(String idCandidate)", "class_method_signature": "ExternalIdUtil.isLikelyId(String idCandidate)", "testcase": false, "constructor": false}, {"identifier": "isUnlikelyId", "parameters": "(String idCandidate)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUnlikelyId(String idCandidate)", "full_signature": "public static boolean isUnlikelyId(String idCandidate)", "class_method_signature": "ExternalIdUtil.isUnlikelyId(String idCandidate)", "testcase": false, "constructor": false}], "file": "eol-globi-lib/src/main/java/org/eol/globi/util/ExternalIdUtil.java"}, "focal_method": {"identifier": "taxonomyProviderFor", "parameters": "(String externalId)", "modifiers": "public static", "return": "TaxonomyProvider", "body": "public static TaxonomyProvider taxonomyProviderFor(String externalId) {\n        TaxonomyProvider provider = null;\n        if (StringUtils.isNotBlank(externalId)) {\n            for (TaxonomyProvider prefix : TaxonomyProvider.values()) {\n                for (String idPrefix : prefix.getIdPrefixes()) {\n                    if (StringUtils.startsWith(externalId, idPrefix)) {\n                        provider = prefix;\n                        break;\n                    }\n                }\n            }\n        }\n        return provider;\n    }", "signature": "TaxonomyProvider taxonomyProviderFor(String externalId)", "full_signature": "public static TaxonomyProvider taxonomyProviderFor(String externalId)", "class_method_signature": "ExternalIdUtil.taxonomyProviderFor(String externalId)", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "values", "getIdPrefixes", "startsWith"]}, "repository": {"repo_id": 2478263, "url": "https://github.com/globalbioticinteractions/globalbioticinteractions", "stars": 49, "created": "9/28/2011 9:51:47 PM +00:00", "updates": "2020-01-17T17:47:05+00:00", "fork": "False", "license": "licensed"}}