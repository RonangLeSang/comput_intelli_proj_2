{"test_class": {"identifier": "BuildServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProjectService projectService;", "modifier": "@Mock\n    private", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "@Mock\n    private SecurityService securityService;", "modifier": "@Mock\n    private", "type": "SecurityService", "declarator": "securityService", "var_name": "securityService"}, {"original_string": "@Mock\n    private AbstractProject<?, ?> project;", "modifier": "@Mock\n    private", "type": "AbstractProject<?, ?>", "declarator": "project", "var_name": "project"}, {"original_string": "@Mock\n    private AbstractBuild<?, ?> build;", "modifier": "@Mock\n    private", "type": "AbstractBuild<?, ?>", "declarator": "build", "var_name": "build"}], "file": "hudson-service/src/test/java/org/hudsonci/service/internal/BuildServiceImplTest.java"}, "test_case": {"identifier": "findBuildByProjectSecurity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findBuildByProjectSecurity() throws IOException {\n\n        // spy so that we can call real methods\n        BuildService buildService = spy(getInst());\n\n        // partial mocking\n        doReturn(build).when(project).getBuildByNumber(1);\n\n        // test\n        buildService.findBuild(project, 1);\n\n        // verify\n        verify(securityService).checkPermission(build, Item.READ);\n\n    }", "signature": "void findBuildByProjectSecurity()", "full_signature": "@Test public void findBuildByProjectSecurity()", "class_method_signature": "BuildServiceImplTest.findBuildByProjectSecurity()", "testcase": true, "constructor": false, "invocations": ["spy", "getInst", "getBuildByNumber", "when", "doReturn", "findBuild", "checkPermission", "verify"]}, "focal_class": {"identifier": "BuildServiceImpl", "superclass": "extends ServiceSupport", "interfaces": "implements BuildService", "fields": [{"original_string": "private final ProjectService projects;", "modifier": "private final", "type": "ProjectService", "declarator": "projects", "var_name": "projects"}, {"original_string": "private final SecurityService security;", "modifier": "private final", "type": "SecurityService", "declarator": "security", "var_name": "security"}], "methods": [{"identifier": "BuildServiceImpl", "parameters": "(final ProjectService projects, SecurityService security)", "modifiers": "@Inject", "return": "", "signature": " BuildServiceImpl(final ProjectService projects, SecurityService security)", "full_signature": "@Inject  BuildServiceImpl(final ProjectService projects, SecurityService security)", "class_method_signature": "BuildServiceImpl.BuildServiceImpl(final ProjectService projects, SecurityService security)", "testcase": false, "constructor": true}, {"identifier": "deleteBuild", "parameters": "(final AbstractProject<?, ?> project, final int buildNumber)", "modifiers": "public", "return": "void", "signature": "void deleteBuild(final AbstractProject<?, ?> project, final int buildNumber)", "full_signature": "public void deleteBuild(final AbstractProject<?, ?> project, final int buildNumber)", "class_method_signature": "BuildServiceImpl.deleteBuild(final AbstractProject<?, ?> project, final int buildNumber)", "testcase": false, "constructor": false}, {"identifier": "keepBuild", "parameters": "(final AbstractProject<?, ?> project, final int buildNumber, final boolean release)", "modifiers": "public", "return": "void", "signature": "void keepBuild(final AbstractProject<?, ?> project, final int buildNumber, final boolean release)", "full_signature": "public void keepBuild(final AbstractProject<?, ?> project, final int buildNumber, final boolean release)", "class_method_signature": "BuildServiceImpl.keepBuild(final AbstractProject<?, ?> project, final int buildNumber, final boolean release)", "testcase": false, "constructor": false}, {"identifier": "getBuild", "parameters": "(final String projectName, final int buildNumber)", "modifiers": "public", "return": "AbstractBuild<?, ?>", "signature": "AbstractBuild<?, ?> getBuild(final String projectName, final int buildNumber)", "full_signature": "public AbstractBuild<?, ?> getBuild(final String projectName, final int buildNumber)", "class_method_signature": "BuildServiceImpl.getBuild(final String projectName, final int buildNumber)", "testcase": false, "constructor": false}, {"identifier": "getBuild", "parameters": "(final AbstractProject<?,?> project, final int buildNumber)", "modifiers": "public", "return": "AbstractBuild<?, ?>", "signature": "AbstractBuild<?, ?> getBuild(final AbstractProject<?,?> project, final int buildNumber)", "full_signature": "public AbstractBuild<?, ?> getBuild(final AbstractProject<?,?> project, final int buildNumber)", "class_method_signature": "BuildServiceImpl.getBuild(final AbstractProject<?,?> project, final int buildNumber)", "testcase": false, "constructor": false}, {"identifier": "findBuild", "parameters": "(final String projectName, final int buildNumber)", "modifiers": "public", "return": "AbstractBuild<?, ?>", "signature": "AbstractBuild<?, ?> findBuild(final String projectName, final int buildNumber)", "full_signature": "public AbstractBuild<?, ?> findBuild(final String projectName, final int buildNumber)", "class_method_signature": "BuildServiceImpl.findBuild(final String projectName, final int buildNumber)", "testcase": false, "constructor": false}, {"identifier": "findBuild", "parameters": "(final AbstractProject<?, ?> project, final int buildNumber)", "modifiers": "public", "return": "AbstractBuild<?,?>", "signature": "AbstractBuild<?,?> findBuild(final AbstractProject<?, ?> project, final int buildNumber)", "full_signature": "public AbstractBuild<?,?> findBuild(final AbstractProject<?, ?> project, final int buildNumber)", "class_method_signature": "BuildServiceImpl.findBuild(final AbstractProject<?, ?> project, final int buildNumber)", "testcase": false, "constructor": false}, {"identifier": "stopBuild", "parameters": "(final AbstractProject<?, ?> project, final int buildNumber)", "modifiers": "public", "return": "void", "signature": "void stopBuild(final AbstractProject<?, ?> project, final int buildNumber)", "full_signature": "public void stopBuild(final AbstractProject<?, ?> project, final int buildNumber)", "class_method_signature": "BuildServiceImpl.stopBuild(final AbstractProject<?, ?> project, final int buildNumber)", "testcase": false, "constructor": false}], "file": "hudson-service/src/main/java/org/hudsonci/service/internal/BuildServiceImpl.java"}, "focal_method": {"identifier": "findBuild", "parameters": "(final String projectName, final int buildNumber)", "modifiers": "public", "return": "AbstractBuild<?, ?>", "body": "public AbstractBuild<?, ?> findBuild(final String projectName, final int buildNumber) {\n        checkProjectName(projectName);\n        checkBuildNumber(buildNumber);\n\n        AbstractProject<?, ?> project = projects.findProject(projectName);\n        return project != null ? findBuild(project, buildNumber) : null;\n    }", "signature": "AbstractBuild<?, ?> findBuild(final String projectName, final int buildNumber)", "full_signature": "public AbstractBuild<?, ?> findBuild(final String projectName, final int buildNumber)", "class_method_signature": "BuildServiceImpl.findBuild(final String projectName, final int buildNumber)", "testcase": false, "constructor": false, "invocations": ["checkProjectName", "checkBuildNumber", "findProject", "findBuild"]}, "repository": {"repo_id": 1367811, "url": "https://github.com/hudson/hudson-2.x", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 142, "size": 56250, "license": "licensed"}}