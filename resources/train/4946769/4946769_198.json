{"test_class": {"identifier": "HttpUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String mixedCaseURL1 = \"http://localhost:9001/Test/A001\";", "modifier": "private static final", "type": "String", "declarator": "mixedCaseURL1 = \"http://localhost:9001/Test/A001\"", "var_name": "mixedCaseURL1"}, {"original_string": "private static final String mixedCaseURLWithoutProtocol = \"localhost:9001/Test/A001\";", "modifier": "private static final", "type": "String", "declarator": "mixedCaseURLWithoutProtocol = \"localhost:9001/Test/A001\"", "var_name": "mixedCaseURLWithoutProtocol"}, {"original_string": "private static final String trailingSpaceURL1 = \"   http://localhost:9001/Test/A001   \";", "modifier": "private static final", "type": "String", "declarator": "trailingSpaceURL1 = \"   http://localhost:9001/Test/A001   \"", "var_name": "trailingSpaceURL1"}, {"original_string": "private static final String propertyExpansionExample = \"${#Project#prop1}\";", "modifier": "private static final", "type": "String", "declarator": "propertyExpansionExample = \"${#Project#prop1}\"", "var_name": "propertyExpansionExample"}, {"original_string": "private static final String uppercaseURLHTTP = \"HTTP://LOCALHOST:9001/TEST/A001\";", "modifier": "private static final", "type": "String", "declarator": "uppercaseURLHTTP = \"HTTP://LOCALHOST:9001/TEST/A001\"", "var_name": "uppercaseURLHTTP"}, {"original_string": "private static final String uppercaseURLHTTPS = \"HTTPS://LOCALHOST:9001/TEST/A001\";", "modifier": "private static final", "type": "String", "declarator": "uppercaseURLHTTPS = \"HTTPS://LOCALHOST:9001/TEST/A001\"", "var_name": "uppercaseURLHTTPS"}], "file": "soapui/src/test/java/com/eviware/soapui/impl/support/HttpUtilsTest.java"}, "test_case": {"identifier": "emptyURLShouldBeReturnEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptyURLShouldBeReturnEmpty() throws Exception{\n        assertEquals(\"\", HttpUtils.completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(\"\"));\n    }", "signature": "void emptyURLShouldBeReturnEmpty()", "full_signature": "@Test public void emptyURLShouldBeReturnEmpty()", "class_method_signature": "HttpUtilsTest.emptyURLShouldBeReturnEmpty()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion"]}, "focal_class": {"identifier": "HttpUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String pingErrorMessage;", "modifier": "private static", "type": "String", "declarator": "pingErrorMessage", "var_name": "pingErrorMessage"}], "methods": [{"identifier": "isErrorStatus", "parameters": "(int statusCode)", "modifiers": "public static", "return": "boolean", "signature": "boolean isErrorStatus(int statusCode)", "full_signature": "public static boolean isErrorStatus(int statusCode)", "class_method_signature": "HttpUtils.isErrorStatus(int statusCode)", "testcase": false, "constructor": false}, {"identifier": "extractHttpHeaderParameter", "parameters": "(String headerString, String parameterName)", "modifiers": "public static", "return": "String", "signature": "String extractHttpHeaderParameter(String headerString, String parameterName)", "full_signature": "public static String extractHttpHeaderParameter(String headerString, String parameterName)", "class_method_signature": "HttpUtils.extractHttpHeaderParameter(String headerString, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion", "parameters": "(String endpoint)", "modifiers": "public static", "return": "String", "signature": "String completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(String endpoint)", "full_signature": "public static String completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(String endpoint)", "class_method_signature": "HttpUtils.completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "completeUrlWithHttpIfProtocolIsMissing", "parameters": "(String endpoint)", "modifiers": "public static", "return": "String", "signature": "String completeUrlWithHttpIfProtocolIsMissing(String endpoint)", "full_signature": "public static String completeUrlWithHttpIfProtocolIsMissing(String endpoint)", "class_method_signature": "HttpUtils.completeUrlWithHttpIfProtocolIsMissing(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "(String host, int timeout)", "modifiers": "public static", "return": "boolean", "signature": "boolean ping(String host, int timeout)", "full_signature": "public static boolean ping(String host, int timeout)", "class_method_signature": "HttpUtils.ping(String host, int timeout)", "testcase": false, "constructor": false}, {"identifier": "urlEncodeWithUtf8", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String urlEncodeWithUtf8(String input)", "full_signature": "public static String urlEncodeWithUtf8(String input)", "class_method_signature": "HttpUtils.urlEncodeWithUtf8(String input)", "testcase": false, "constructor": false}, {"identifier": "getPingErrorMessage", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getPingErrorMessage()", "full_signature": "public static String getPingErrorMessage()", "class_method_signature": "HttpUtils.getPingErrorMessage()", "testcase": false, "constructor": false}, {"identifier": "createUri", "parameters": "(URI uri)", "modifiers": "public static", "return": "java.net.URI", "signature": "java.net.URI createUri(URI uri)", "full_signature": "public static java.net.URI createUri(URI uri)", "class_method_signature": "HttpUtils.createUri(URI uri)", "testcase": false, "constructor": false}, {"identifier": "createUri", "parameters": "(String scheme, String userinfo, String host, int port, String escapedPath,\n                                         String escapedQuery, String escapedFragment)", "modifiers": "public static", "return": "java.net.URI", "signature": "java.net.URI createUri(String scheme, String userinfo, String host, int port, String escapedPath,\n                                         String escapedQuery, String escapedFragment)", "full_signature": "public static java.net.URI createUri(String scheme, String userinfo, String host, int port, String escapedPath,\n                                         String escapedQuery, String escapedFragment)", "class_method_signature": "HttpUtils.createUri(String scheme, String userinfo, String host, int port, String escapedPath,\n                                         String escapedQuery, String escapedFragment)", "testcase": false, "constructor": false}], "file": "soapui/src/main/java/com/eviware/soapui/impl/support/HttpUtils.java"}, "focal_method": {"identifier": "completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion", "parameters": "(String endpoint)", "modifiers": "public static", "return": "String", "body": "public static String completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(String endpoint) {\n        if (StringUtils.isNullOrEmpty(endpoint)) {\n            return endpoint;\n        }\n        endpoint = endpoint.trim();\n        String lowerCaseEndpoint = endpoint.toLowerCase();\n        if (!lowerCaseEndpoint.startsWith(\"http://\") && !lowerCaseEndpoint.startsWith(\"https://\") && !endpoint.startsWith(\"$\")) {\n            return \"http://\" + endpoint;\n        }\n\n        return endpoint;\n    }", "signature": "String completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(String endpoint)", "full_signature": "public static String completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(String endpoint)", "class_method_signature": "HttpUtils.completeUrlWithHttpIfProtocolIsNotHttpOrHttpsOrPropertyExpansion(String endpoint)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "trim", "toLowerCase", "startsWith", "startsWith", "startsWith"]}, "repository": {"repo_id": 4946769, "url": "https://github.com/SmartBear/soapui", "stars": 1017, "created": "7/8/2012 2:27:41 PM +00:00", "updates": "2020-01-22T09:41:13+00:00", "fork": "False", "license": "licensed"}}