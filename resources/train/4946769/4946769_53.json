{"test_class": {"identifier": "AddRestRequestToMockServiceActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ONE_HEADER = \"oneHeader\";", "modifier": "private static final", "type": "String", "declarator": "ONE_HEADER = \"oneHeader\"", "var_name": "ONE_HEADER"}, {"original_string": "private static final String ANOTHER_HEADER = \"anotherHeader\";", "modifier": "private static final", "type": "String", "declarator": "ANOTHER_HEADER = \"anotherHeader\"", "var_name": "ANOTHER_HEADER"}, {"original_string": "private static final String HEADER_STATUS = \"#status#\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_STATUS = \"#status#\"", "var_name": "HEADER_STATUS"}, {"original_string": "private static final String HEADER_CONTENT_LENGTH = \"Content-Length\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_CONTENT_LENGTH = \"Content-Length\"", "var_name": "HEADER_CONTENT_LENGTH"}, {"original_string": "private static final String HEADER_CONTENT_TYPE = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_CONTENT_TYPE = \"Content-Type\"", "var_name": "HEADER_CONTENT_TYPE"}, {"original_string": "private final String requestPath = \"/some/path\";", "modifier": "private final", "type": "String", "declarator": "requestPath = \"/some/path\"", "var_name": "requestPath"}, {"original_string": "AddRestRequestToMockServiceAction action = new AddRestRequestToMockServiceAction();", "modifier": "", "type": "AddRestRequestToMockServiceAction", "declarator": "action = new AddRestRequestToMockServiceAction()", "var_name": "action"}, {"original_string": "RestRequest restRequest;", "modifier": "", "type": "RestRequest", "declarator": "restRequest", "var_name": "restRequest"}, {"original_string": "Object notUsed = null;", "modifier": "", "type": "Object", "declarator": "notUsed = null", "var_name": "notUsed"}, {"original_string": "String mockServiceName = \"Mock Service1 1\";", "modifier": "", "type": "String", "declarator": "mockServiceName = \"Mock Service1 1\"", "var_name": "mockServiceName"}, {"original_string": "private XDialogs originalDialogs;", "modifier": "private", "type": "XDialogs", "declarator": "originalDialogs", "var_name": "originalDialogs"}, {"original_string": "private WsdlProject project;", "modifier": "private", "type": "WsdlProject", "declarator": "project", "var_name": "project"}], "file": "soapui/src/test/java/com/eviware/soapui/impl/rest/actions/mock/AddRestRequestToMockServiceActionTest.java"}, "test_case": {"identifier": "shouldFireProjectChangedEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldFireProjectChangedEvent() {\n        ProjectListenerAdapter listener = mock(ProjectListenerAdapter.class);\n        project.addProjectListener(listener);\n        action.perform(restRequest, notUsed);\n        verify(listener, times(1)).mockServiceAdded(any(RestMockService.class));\n    }", "signature": "void shouldFireProjectChangedEvent()", "full_signature": "@Test public void shouldFireProjectChangedEvent()", "class_method_signature": "AddRestRequestToMockServiceActionTest.shouldFireProjectChangedEvent()", "testcase": true, "constructor": false, "invocations": ["mock", "addProjectListener", "perform", "mockServiceAdded", "verify", "times", "any"]}, "focal_class": {"identifier": "AddRestRequestToMockServiceAction", "superclass": "extends AbstractSoapUIAction<RestRequest>", "interfaces": "", "fields": [{"original_string": "private static final String SELECT_MOCKSERVICE_OPTION = \"Create new..\";", "modifier": "private static final", "type": "String", "declarator": "SELECT_MOCKSERVICE_OPTION = \"Create new..\"", "var_name": "SELECT_MOCKSERVICE_OPTION"}, {"original_string": "public static final String SOAPUI_ACTION_ID = \"AddRestRequestToMockServiceAction\";", "modifier": "public static final", "type": "String", "declarator": "SOAPUI_ACTION_ID = \"AddRestRequestToMockServiceAction\"", "var_name": "SOAPUI_ACTION_ID"}, {"original_string": "private static final MessageSupport messages = MessageSupport.getMessages(AddRestRequestToMockServiceAction.class);", "modifier": "private static final", "type": "MessageSupport", "declarator": "messages = MessageSupport.getMessages(AddRestRequestToMockServiceAction.class)", "var_name": "messages"}, {"original_string": "private static List<String> HEADERS_TO_IGNORE = new ArrayList<String>();", "modifier": "private static", "type": "List<String>", "declarator": "HEADERS_TO_IGNORE = new ArrayList<String>()", "var_name": "HEADERS_TO_IGNORE"}], "methods": [{"identifier": "AddRestRequestToMockServiceAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " AddRestRequestToMockServiceAction()", "full_signature": "public  AddRestRequestToMockServiceAction()", "class_method_signature": "AddRestRequestToMockServiceAction.AddRestRequestToMockServiceAction()", "testcase": false, "constructor": true}, {"identifier": "perform", "parameters": "(RestRequest restRequest, Object param)", "modifiers": "@Override public", "return": "void", "signature": "void perform(RestRequest restRequest, Object param)", "full_signature": "@Override public void perform(RestRequest restRequest, Object param)", "class_method_signature": "AddRestRequestToMockServiceAction.perform(RestRequest restRequest, Object param)", "testcase": false, "constructor": false}, {"identifier": "maybeStart", "parameters": "(MockService mockService)", "modifiers": "private", "return": "void", "signature": "void maybeStart(MockService mockService)", "full_signature": "private void maybeStart(MockService mockService)", "class_method_signature": "AddRestRequestToMockServiceAction.maybeStart(MockService mockService)", "testcase": false, "constructor": false}, {"identifier": "promptForMockServiceSelection", "parameters": "(String title, WsdlProject project)", "modifiers": "private", "return": "String", "signature": "String promptForMockServiceSelection(String title, WsdlProject project)", "full_signature": "private String promptForMockServiceSelection(String title, WsdlProject project)", "class_method_signature": "AddRestRequestToMockServiceAction.promptForMockServiceSelection(String title, WsdlProject project)", "testcase": false, "constructor": false}, {"identifier": "createNewMockService", "parameters": "(String title, WsdlProject project)", "modifiers": "private", "return": "RestMockService", "signature": "RestMockService createNewMockService(String title, WsdlProject project)", "full_signature": "private RestMockService createNewMockService(String title, WsdlProject project)", "class_method_signature": "AddRestRequestToMockServiceAction.createNewMockService(String title, WsdlProject project)", "testcase": false, "constructor": false}, {"identifier": "promptForServiceName", "parameters": "(String title, WsdlProject project)", "modifiers": "private", "return": "String", "signature": "String promptForServiceName(String title, WsdlProject project)", "full_signature": "private String promptForServiceName(String title, WsdlProject project)", "class_method_signature": "AddRestRequestToMockServiceAction.promptForServiceName(String title, WsdlProject project)", "testcase": false, "constructor": false}, {"identifier": "addRequestToMockService", "parameters": "(RestRequest restRequest, RestMockService mockService)", "modifiers": "private", "return": "void", "signature": "void addRequestToMockService(RestRequest restRequest, RestMockService mockService)", "full_signature": "private void addRequestToMockService(RestRequest restRequest, RestMockService mockService)", "class_method_signature": "AddRestRequestToMockServiceAction.addRequestToMockService(RestRequest restRequest, RestMockService mockService)", "testcase": false, "constructor": false}, {"identifier": "copyHeaders", "parameters": "(RestRequest restRequest, RestMockResponse mockResponse)", "modifiers": "private", "return": "void", "signature": "void copyHeaders(RestRequest restRequest, RestMockResponse mockResponse)", "full_signature": "private void copyHeaders(RestRequest restRequest, RestMockResponse mockResponse)", "class_method_signature": "AddRestRequestToMockServiceAction.copyHeaders(RestRequest restRequest, RestMockResponse mockResponse)", "testcase": false, "constructor": false}, {"identifier": "copyResponseContent", "parameters": "(RestRequest restRequest, RestMockResponse mockResponse)", "modifiers": "private", "return": "void", "signature": "void copyResponseContent(RestRequest restRequest, RestMockResponse mockResponse)", "full_signature": "private void copyResponseContent(RestRequest restRequest, RestMockResponse mockResponse)", "class_method_signature": "AddRestRequestToMockServiceAction.copyResponseContent(RestRequest restRequest, RestMockResponse mockResponse)", "testcase": false, "constructor": false}], "file": "soapui/src/main/java/com/eviware/soapui/impl/rest/actions/mock/AddRestRequestToMockServiceAction.java"}, "focal_method": {"identifier": "perform", "parameters": "(RestRequest restRequest, Object param)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void perform(RestRequest restRequest, Object param) {\n        String title = getName();\n\n        RestMockService mockService = null;\n        WsdlProject project = restRequest.getOperation().getInterface().getProject();\n\n        while (mockService == null) {\n\n            if (project.getRestMockServiceCount() > 0) {\n                String option = promptForMockServiceSelection(title, project);\n                boolean userCancelled = option == null;\n                if (userCancelled) {\n                    return;\n                }\n\n                mockService = project.getRestMockServiceByName(option);\n            }\n\n            if (mockService == null) {\n                mockService = createNewMockService(title, project);\n                UISupport.showDesktopPanel(mockService);\n                maybeStart(mockService);\n            }\n        }\n\n        addRequestToMockService(restRequest, mockService);\n        restRequest.getOperation().getService().addEndpoint(mockService.getLocalEndpoint());\n        Analytics.trackAction(ADD_REST_REQUEST_TO_REST_MOCK_SERVICE);\n    }", "signature": "void perform(RestRequest restRequest, Object param)", "full_signature": "@Override public void perform(RestRequest restRequest, Object param)", "class_method_signature": "AddRestRequestToMockServiceAction.perform(RestRequest restRequest, Object param)", "testcase": false, "constructor": false, "invocations": ["getName", "getProject", "getInterface", "getOperation", "getRestMockServiceCount", "promptForMockServiceSelection", "getRestMockServiceByName", "createNewMockService", "showDesktopPanel", "maybeStart", "addRequestToMockService", "addEndpoint", "getService", "getOperation", "getLocalEndpoint", "trackAction"]}, "repository": {"repo_id": 4946769, "url": "https://github.com/SmartBear/soapui", "stars": 1017, "created": "7/8/2012 2:27:41 PM +00:00", "updates": "2020-01-22T09:41:13+00:00", "fork": "False", "license": "licensed"}}