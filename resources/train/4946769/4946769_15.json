{"test_class": {"identifier": "VersionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Version BASE_VERSION = Version.fromString(\"1.7\");", "modifier": "public static final", "type": "Version", "declarator": "BASE_VERSION = Version.fromString(\"1.7\")", "var_name": "BASE_VERSION"}], "file": "soapui/src/test/java/com/eviware/soapui/plugins/VersionTest.java"}, "test_case": {"identifier": "compareTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compareTo() throws Exception {\n        assertThat(Version.fromString(\"1.1\"), is(greaterThan(Version.fromString(\"1.0\"))));\n        assertThat(Version.fromString(\"1.1.1\"), is(greaterThan(Version.fromString(\"1.1.0\"))));\n        assertThat(Version.fromString(\"1.1.1\"), is(greaterThan(Version.fromString(\"1.1\"))));\n    }", "signature": "void compareTo()", "full_signature": "@Test public void compareTo()", "class_method_signature": "VersionTest.compareTo()", "testcase": true, "constructor": false, "invocations": ["assertThat", "fromString", "is", "greaterThan", "fromString", "assertThat", "fromString", "is", "greaterThan", "fromString", "assertThat", "fromString", "is", "greaterThan", "fromString"]}, "focal_class": {"identifier": "Version", "superclass": "", "interfaces": "implements Comparable<Version>", "fields": [{"original_string": "private final int majorVersion;", "modifier": "private final", "type": "int", "declarator": "majorVersion", "var_name": "majorVersion"}, {"original_string": "private final int minorVersion;", "modifier": "private final", "type": "int", "declarator": "minorVersion", "var_name": "minorVersion"}, {"original_string": "private final String patchVersion;", "modifier": "private final", "type": "String", "declarator": "patchVersion", "var_name": "patchVersion"}], "methods": [{"identifier": "Version", "parameters": "(int majorVersion, int minorVersion, String patchVersion)", "modifiers": "public", "return": "", "signature": " Version(int majorVersion, int minorVersion, String patchVersion)", "full_signature": "public  Version(int majorVersion, int minorVersion, String patchVersion)", "class_method_signature": "Version.Version(int majorVersion, int minorVersion, String patchVersion)", "testcase": false, "constructor": true}, {"identifier": "fromString", "parameters": "(String versionString)", "modifiers": "public static", "return": "Version", "signature": "Version fromString(String versionString)", "full_signature": "public static Version fromString(String versionString)", "class_method_signature": "Version.fromString(String versionString)", "testcase": false, "constructor": false}, {"identifier": "getMajorVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMajorVersion()", "full_signature": "public int getMajorVersion()", "class_method_signature": "Version.getMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "getMinorVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinorVersion()", "full_signature": "public int getMinorVersion()", "class_method_signature": "Version.getMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "getPatchVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPatchVersion()", "full_signature": "public String getPatchVersion()", "class_method_signature": "Version.getPatchVersion()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Version.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Version.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Version.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Version other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Version other)", "full_signature": "@Override public int compareTo(Version other)", "class_method_signature": "Version.compareTo(Version other)", "testcase": false, "constructor": false}, {"identifier": "normalizePatchVersion", "parameters": "(String patchVersion)", "modifiers": "private", "return": "String", "signature": "String normalizePatchVersion(String patchVersion)", "full_signature": "private String normalizePatchVersion(String patchVersion)", "class_method_signature": "Version.normalizePatchVersion(String patchVersion)", "testcase": false, "constructor": false}], "file": "soapui/src/main/java/com/eviware/soapui/plugins/Version.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(Version other)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compareTo(Version other) {\n        if (majorVersion != other.majorVersion) {\n            return majorVersion - other.majorVersion;\n        }\n        if (minorVersion != other.minorVersion) {\n            return minorVersion - other.minorVersion;\n        }\n        return normalizePatchVersion(patchVersion).compareTo(normalizePatchVersion(other.patchVersion));\n    }", "signature": "int compareTo(Version other)", "full_signature": "@Override public int compareTo(Version other)", "class_method_signature": "Version.compareTo(Version other)", "testcase": false, "constructor": false, "invocations": ["compareTo", "normalizePatchVersion", "normalizePatchVersion"]}, "repository": {"repo_id": 4946769, "url": "https://github.com/SmartBear/soapui", "stars": 1017, "created": "7/8/2012 2:27:41 PM +00:00", "updates": "2020-01-22T09:41:13+00:00", "fork": "False", "license": "licensed"}}