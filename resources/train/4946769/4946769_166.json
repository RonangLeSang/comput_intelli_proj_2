{"test_class": {"identifier": "OAuth2RequestFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EXPIRED_TOKEN = \"EXPIRED#TOKEN\";", "modifier": "public static final", "type": "String", "declarator": "EXPIRED_TOKEN = \"EXPIRED#TOKEN\"", "var_name": "EXPIRED_TOKEN"}, {"original_string": "private static final String ACCESS_TOKEN = \"ACDFECDSFKJFK#SDFSD8df#ACCESS-TOKEN\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_TOKEN = \"ACDFECDSFKJFK#SDFSD8df#ACCESS-TOKEN\"", "var_name": "ACCESS_TOKEN"}, {"original_string": "private static final String RETRIEVED_ACCESS_TOKEN = \"yyCDFECDSFKJFK#dsfsddf#28317\";", "modifier": "private static final", "type": "String", "declarator": "RETRIEVED_ACCESS_TOKEN = \"yyCDFECDSFKJFK#dsfsddf#28317\"", "var_name": "RETRIEVED_ACCESS_TOKEN"}, {"original_string": "private OAuth2RequestFilter oAuth2RequestFilter;", "modifier": "private", "type": "OAuth2RequestFilter", "declarator": "oAuth2RequestFilter", "var_name": "oAuth2RequestFilter"}, {"original_string": "private RestRequest restRequest;", "modifier": "private", "type": "RestRequest", "declarator": "restRequest", "var_name": "restRequest"}, {"original_string": "private ExtendedPostMethod httpRequest;", "modifier": "private", "type": "ExtendedPostMethod", "declarator": "httpRequest", "var_name": "httpRequest"}, {"original_string": "private OAuth2ProfileContainer oAuth2ProfileContainer;", "modifier": "private", "type": "OAuth2ProfileContainer", "declarator": "oAuth2ProfileContainer", "var_name": "oAuth2ProfileContainer"}, {"original_string": "@Mock\n    private SubmitContext mockContext;", "modifier": "@Mock\n    private", "type": "SubmitContext", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "@Mock\n    private Logger mockLogger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "mockLogger", "var_name": "mockLogger"}, {"original_string": "private Logger realLogger;", "modifier": "private", "type": "Logger", "declarator": "realLogger", "var_name": "realLogger"}, {"original_string": "private OAuth2Profile oAuth2Profile;", "modifier": "private", "type": "OAuth2Profile", "declarator": "oAuth2Profile", "var_name": "oAuth2Profile"}], "file": "soapui/src/test/java/com/eviware/soapui/impl/wsdl/submit/filters/OAuth2RequestFilterTest.java"}, "test_case": {"identifier": "doesNotRefreshAccessTokenWhenRefreshMethodIsManual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doesNotRefreshAccessTokenWhenRefreshMethodIsManual() throws SoapUIException {\n        OAuth2Profile profileWithRefreshToken = setProfileWithRefreshTokenAndExpiredAccessToken();\n        profileWithRefreshToken.setRefreshAccessTokenMethod(OAuth2Profile.RefreshAccessTokenMethods.MANUAL);\n        oAuth2FilterWithMockOAuth2ClientFacade(profileWithRefreshToken);\n        oAuth2RequestFilter.filterRestRequest(mockContext, restRequest);\n\n        assertThat(profileWithRefreshToken.getAccessToken(), is(EXPIRED_TOKEN));\n    }", "signature": "void doesNotRefreshAccessTokenWhenRefreshMethodIsManual()", "full_signature": "@Test public void doesNotRefreshAccessTokenWhenRefreshMethodIsManual()", "class_method_signature": "OAuth2RequestFilterTest.doesNotRefreshAccessTokenWhenRefreshMethodIsManual()", "testcase": true, "constructor": false, "invocations": ["setProfileWithRefreshTokenAndExpiredAccessToken", "setRefreshAccessTokenMethod", "oAuth2FilterWithMockOAuth2ClientFacade", "filterRestRequest", "assertThat", "getAccessToken", "is"]}, "focal_class": {"identifier": "OAuth2RequestFilter", "superclass": "extends AbstractRequestFilter", "interfaces": "", "fields": [{"original_string": "private static final int ACCESS_TOKEN_RETRIEVAL_TIMEOUT = 5000;", "modifier": "private static final", "type": "int", "declarator": "ACCESS_TOKEN_RETRIEVAL_TIMEOUT = 5000", "var_name": "ACCESS_TOKEN_RETRIEVAL_TIMEOUT"}, {"original_string": "private static Logger log = Logger.getLogger(OAuth2RequestFilter.class);", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(OAuth2RequestFilter.class)", "var_name": "log"}], "methods": [{"identifier": "getLog", "parameters": "()", "modifiers": "static", "return": "Logger", "signature": "Logger getLog()", "full_signature": "static Logger getLog()", "class_method_signature": "OAuth2RequestFilter.getLog()", "testcase": false, "constructor": false}, {"identifier": "setLog", "parameters": "(Logger newLog)", "modifiers": "static", "return": "void", "signature": "void setLog(Logger newLog)", "full_signature": "static void setLog(Logger newLog)", "class_method_signature": "OAuth2RequestFilter.setLog(Logger newLog)", "testcase": false, "constructor": false}, {"identifier": "filterRestRequest", "parameters": "(SubmitContext context, RestRequestInterface request)", "modifiers": "@Override public", "return": "void", "signature": "void filterRestRequest(SubmitContext context, RestRequestInterface request)", "full_signature": "@Override public void filterRestRequest(SubmitContext context, RestRequestInterface request)", "class_method_signature": "OAuth2RequestFilter.filterRestRequest(SubmitContext context, RestRequestInterface request)", "testcase": false, "constructor": false}, {"identifier": "getOAuth2ClientFacade", "parameters": "()", "modifiers": "protected", "return": "OAuth2ClientFacade", "signature": "OAuth2ClientFacade getOAuth2ClientFacade()", "full_signature": "protected OAuth2ClientFacade getOAuth2ClientFacade()", "class_method_signature": "OAuth2RequestFilter.getOAuth2ClientFacade()", "testcase": false, "constructor": false}, {"identifier": "getOAuth1ClientFacade", "parameters": "()", "modifiers": "protected", "return": "OAuth1ClientFacade", "signature": "OAuth1ClientFacade getOAuth1ClientFacade()", "full_signature": "protected OAuth1ClientFacade getOAuth1ClientFacade()", "class_method_signature": "OAuth2RequestFilter.getOAuth1ClientFacade()", "testcase": false, "constructor": false}, {"identifier": "accessTokenIsExpired", "parameters": "(OAuth2Profile profile)", "modifiers": "private", "return": "boolean", "signature": "boolean accessTokenIsExpired(OAuth2Profile profile)", "full_signature": "private boolean accessTokenIsExpired(OAuth2Profile profile)", "class_method_signature": "OAuth2RequestFilter.accessTokenIsExpired(OAuth2Profile profile)", "testcase": false, "constructor": false}, {"identifier": "convertExpirationTimeToSeconds", "parameters": "(String expirationTimeString, TimeUnitConfig.Enum timeUnit)", "modifiers": "private", "return": "long", "signature": "long convertExpirationTimeToSeconds(String expirationTimeString, TimeUnitConfig.Enum timeUnit)", "full_signature": "private long convertExpirationTimeToSeconds(String expirationTimeString, TimeUnitConfig.Enum timeUnit)", "class_method_signature": "OAuth2RequestFilter.convertExpirationTimeToSeconds(String expirationTimeString, TimeUnitConfig.Enum timeUnit)", "testcase": false, "constructor": false}, {"identifier": "reloadAccessToken", "parameters": "(OAuth2Profile profile, OAuth2ClientFacade oAuth2Client)", "modifiers": "private", "return": "void", "signature": "void reloadAccessToken(OAuth2Profile profile, OAuth2ClientFacade oAuth2Client)", "full_signature": "private void reloadAccessToken(OAuth2Profile profile, OAuth2ClientFacade oAuth2Client)", "class_method_signature": "OAuth2RequestFilter.reloadAccessToken(OAuth2Profile profile, OAuth2ClientFacade oAuth2Client)", "testcase": false, "constructor": false}], "file": "soapui/src/main/java/com/eviware/soapui/impl/wsdl/submit/filters/OAuth2RequestFilter.java"}, "focal_method": {"identifier": "filterRestRequest", "parameters": "(SubmitContext context, RestRequestInterface request)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void filterRestRequest(SubmitContext context, RestRequestInterface request) {\n\n        HttpRequestBase httpMethod = (HttpRequestBase) context.getProperty(BaseHttpRequestTransport.HTTP_METHOD);\n\n        if (O_AUTH_2_0.toString().equals(request.getAuthType())) {\n            OAuth2ProfileContainer profileContainer = request.getResource().getService().getProject()\n                    .getOAuth2ProfileContainer();\n            OAuth2Profile profile = profileContainer.getProfileByName(((AbstractHttpRequest) request).getSelectedAuthProfile());\n            if (profile == null || StringUtils.isNullOrEmpty(profile.getAccessToken())) {\n                return;\n            }\n            OAuth2ClientFacade oAuth2Client = getOAuth2ClientFacade();\n\n            if (accessTokenIsExpired(profile)) {\n                if (profile.shouldReloadAccessTokenAutomatically()) {\n                    reloadAccessToken(profile, oAuth2Client);\n                } else {\n                    profile.setAccessTokenStatus(OAuth2Profile.AccessTokenStatus.EXPIRED);\n                }\n            }\n            oAuth2Client.applyAccessToken(profile, httpMethod, request.getRequestContent());\n        } else if (O_AUTH_1_0.toString().equals(request.getAuthType())) {\n            OAuth1ProfileContainer profileContainer = request.getResource().getService().getProject()\n                    .getOAuth1ProfileContainer();\n            OAuth1Profile profile = profileContainer.getProfileByName(\n                    ((AbstractHttpRequest) request).getSelectedAuthProfile());\n\n            if (profile == null || StringUtils.isNullOrEmpty(profile.getAccessToken())) {\n                return;\n            }\n            OAuth1ClientFacade oAuth1Client = getOAuth1ClientFacade();\n\n            oAuth1Client.applyAccessToken(profile, httpMethod, request.getRequestContent());\n        }\n    }", "signature": "void filterRestRequest(SubmitContext context, RestRequestInterface request)", "full_signature": "@Override public void filterRestRequest(SubmitContext context, RestRequestInterface request)", "class_method_signature": "OAuth2RequestFilter.filterRestRequest(SubmitContext context, RestRequestInterface request)", "testcase": false, "constructor": false, "invocations": ["getProperty", "equals", "toString", "getAuthType", "getOAuth2ProfileContainer", "getProject", "getService", "getResource", "getProfileByName", "getSelectedAuthProfile", "isNullOrEmpty", "getAccessToken", "getOAuth2ClientFacade", "accessTokenIsExpired", "shouldReloadAccessTokenAutomatically", "reloadAccessToken", "setAccessTokenStatus", "applyAccessToken", "getRequestContent", "equals", "toString", "getAuthType", "getOAuth1ProfileContainer", "getProject", "getService", "getResource", "getProfileByName", "getSelectedAuthProfile", "isNullOrEmpty", "getAccessToken", "getOAuth1ClientFacade", "applyAccessToken", "getRequestContent"]}, "repository": {"repo_id": 4946769, "url": "https://github.com/SmartBear/soapui", "stars": 1017, "created": "7/8/2012 2:27:41 PM +00:00", "updates": "2020-01-22T09:41:13+00:00", "fork": "False", "license": "licensed"}}