{"test_class": {"identifier": "GetOAuthAccessTokenActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ActionEvent DUMMY_ACTION_EVENT = new ActionEvent(new Object(), 0, \"click\");", "modifier": "public static final", "type": "ActionEvent", "declarator": "DUMMY_ACTION_EVENT = new ActionEvent(new Object(), 0, \"click\")", "var_name": "DUMMY_ACTION_EVENT"}, {"original_string": "private XDialogs originalDialogs;", "modifier": "private", "type": "XDialogs", "declarator": "originalDialogs", "var_name": "originalDialogs"}, {"original_string": "private StubbedDialogs stubbedDialogs;", "modifier": "private", "type": "StubbedDialogs", "declarator": "stubbedDialogs", "var_name": "stubbedDialogs"}, {"original_string": "private OAuth2Profile profile;", "modifier": "private", "type": "OAuth2Profile", "declarator": "profile", "var_name": "profile"}], "file": "soapui/src/test/java/com/eviware/soapui/impl/rest/actions/oauth/GetOAuthAccessTokenActionTest.java"}, "test_case": {"identifier": "displaysValidationErrorWhenValidationFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void displaysValidationErrorWhenValidationFails() throws Exception {\n        final OAuth2ClientFacade clientFacade = mock(OAuth2ClientFacade.class);\n        GetOAuthAccessTokenAction action = new GetOAuthAccessTokenAction(profile) {\n            @Override\n            protected OAuth2ClientFacade getOAuthClientFacade() {\n                return clientFacade;\n            }\n        };\n        String theMessage = \"Access token URI blabla is not a valid HTTP URL\";\n        Mockito.doThrow(new InvalidOAuthParametersException(theMessage)).when(clientFacade).requestAccessToken(profile);\n\n        action.actionPerformed(DUMMY_ACTION_EVENT);\n        assertThat(stubbedDialogs.getErrorMessages(), is(aCollectionWithSize(1)));\n        assertThat(stubbedDialogs.getErrorMessages().get(0), containsString(theMessage));\n    }", "signature": "void displaysValidationErrorWhenValidationFails()", "full_signature": "@Test public void displaysValidationErrorWhenValidationFails()", "class_method_signature": "GetOAuthAccessTokenActionTest.displaysValidationErrorWhenValidationFails()", "testcase": true, "constructor": false, "invocations": ["mock", "requestAccessToken", "when", "doThrow", "actionPerformed", "assertThat", "getErrorMessages", "is", "aCollectionWithSize", "assertThat", "get", "getErrorMessages", "containsString"]}, "focal_class": {"identifier": "GetOAuthAccessTokenAction", "superclass": "extends AbstractAction", "interfaces": "", "fields": [{"original_string": "private static final MessageSupport messages = MessageSupport.getMessages(GetOAuthAccessTokenAction.class);", "modifier": "private static final", "type": "MessageSupport", "declarator": "messages = MessageSupport.getMessages(GetOAuthAccessTokenAction.class)", "var_name": "messages"}, {"original_string": "private OAuth2Profile target;", "modifier": "private", "type": "OAuth2Profile", "declarator": "target", "var_name": "target"}], "methods": [{"identifier": "GetOAuthAccessTokenAction", "parameters": "(OAuth2Profile target)", "modifiers": "public", "return": "", "signature": " GetOAuthAccessTokenAction(OAuth2Profile target)", "full_signature": "public  GetOAuthAccessTokenAction(OAuth2Profile target)", "class_method_signature": "GetOAuthAccessTokenAction.GetOAuthAccessTokenAction(OAuth2Profile target)", "testcase": false, "constructor": true}, {"identifier": "actionPerformed", "parameters": "(ActionEvent event)", "modifiers": "public", "return": "void", "signature": "void actionPerformed(ActionEvent event)", "full_signature": "public void actionPerformed(ActionEvent event)", "class_method_signature": "GetOAuthAccessTokenAction.actionPerformed(ActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "getOAuthClientFacade", "parameters": "()", "modifiers": "protected", "return": "OAuth2ClientFacade", "signature": "OAuth2ClientFacade getOAuthClientFacade()", "full_signature": "protected OAuth2ClientFacade getOAuthClientFacade()", "class_method_signature": "GetOAuthAccessTokenAction.getOAuthClientFacade()", "testcase": false, "constructor": false}], "file": "soapui/src/main/java/com/eviware/soapui/impl/rest/actions/oauth/GetOAuthAccessTokenAction.java"}, "focal_method": {"identifier": "actionPerformed", "parameters": "(ActionEvent event)", "modifiers": "public", "return": "void", "body": "public void actionPerformed(ActionEvent event) {\n        try {\n            getOAuthClientFacade().requestAccessToken(target);\n        } catch (InvalidOAuthParametersException e) {\n            UISupport.showErrorMessage(messages.get(\"GetOAuthAccessTokenAction.Error.InvalidParameters\", e.getMessage()));\n        } catch (Exception e) {\n            SoapUI.logError(e, messages.get(\"GetOAuthAccessTokenAction.Error.RetrievingFailLog\"));\n            UISupport.showErrorMessage(messages.get(\"GetOAuthAccessTokenAction.Error.RetrievingFailMessage\"));\n        }\n    }", "signature": "void actionPerformed(ActionEvent event)", "full_signature": "public void actionPerformed(ActionEvent event)", "class_method_signature": "GetOAuthAccessTokenAction.actionPerformed(ActionEvent event)", "testcase": false, "constructor": false, "invocations": ["requestAccessToken", "getOAuthClientFacade", "showErrorMessage", "get", "getMessage", "logError", "get", "showErrorMessage", "get"]}, "repository": {"repo_id": 4946769, "url": "https://github.com/SmartBear/soapui", "stars": 1017, "created": "7/8/2012 2:27:41 PM +00:00", "updates": "2020-01-22T09:41:13+00:00", "fork": "False", "license": "licensed"}}