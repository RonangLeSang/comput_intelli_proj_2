{"test_class": {"identifier": "MediatorTest", "superclass": "extends AbstractMediatorTest", "interfaces": "", "fields": [], "file": "crud/src/test/java/com/redhat/lightblue/mediator/MediatorTest.java"}, "test_case": {"identifier": "insertDocWithRequiredFieldNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void insertDocWithRequiredFieldNull() throws Exception {\n        mdManager.md = getMd(\"./termsmd.json\");\n\n        InsertionRequest req = new InsertionRequest();\n        req.setEntityVersion(new EntityVersion(\"terms\", \"0.14.1-SNAPSHOT\"));\n        req.setEntityData(loadJsonNode(\"./termsdata.json\"));\n        req.setReturnFields(null);\n        req.setClientId(new RestClientIdentification(Arrays.asList(\"test.field1-insert\", \"test-insert\")));\n        // lastUpdatedBy is required, set that to null\n        ((ObjectNode) req.getEntityData()).set(\"lastUpdatedBy\", JsonNodeFactory.instance.nullNode());\n        mockCrudController.insertResponse=new CRUDInsertionResponse();\n        mockCrudController.insertResponse.setNumInserted(1);\n\n        Response response = mediator.insert(req);\n        // there should be no errors\n        // Response should return the entity name:version\n        Assert.assertEquals(\"terms\",response.getEntity().getEntity());\n        Assert.assertEquals(\"0.14.1-SNAPSHOT\",response.getEntity().getVersion());\n    }", "signature": "void insertDocWithRequiredFieldNull()", "full_signature": "@Test public void insertDocWithRequiredFieldNull()", "class_method_signature": "MediatorTest.insertDocWithRequiredFieldNull()", "testcase": true, "constructor": false, "invocations": ["getMd", "setEntityVersion", "setEntityData", "loadJsonNode", "setReturnFields", "setClientId", "asList", "set", "getEntityData", "nullNode", "setNumInserted", "insert", "assertEquals", "getEntity", "getEntity", "assertEquals", "getVersion", "getEntity"]}, "focal_class": {"identifier": "Mediator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CTX_QPLAN = \"meditor:qplan\";", "modifier": "public static final", "type": "String", "declarator": "CTX_QPLAN = \"meditor:qplan\"", "var_name": "CTX_QPLAN"}, {"original_string": "public static final String CRUD_MSG_PREFIX = \"CRUD controller={}\";", "modifier": "public static final", "type": "String", "declarator": "CRUD_MSG_PREFIX = \"CRUD controller={}\"", "var_name": "CRUD_MSG_PREFIX"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Mediator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Mediator.class)", "var_name": "LOGGER"}, {"original_string": "private static final Logger METRICS = LoggerFactory.getLogger(\"metrics.\"+Mediator.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "METRICS = LoggerFactory.getLogger(\"metrics.\"+Mediator.class.getName())", "var_name": "METRICS"}, {"original_string": "private static final Path OBJECT_TYPE_PATH = new Path(\"objectType\");", "modifier": "private static final", "type": "Path", "declarator": "OBJECT_TYPE_PATH = new Path(\"objectType\")", "var_name": "OBJECT_TYPE_PATH"}, {"original_string": "public final Metadata metadata;", "modifier": "public final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "public final Factory factory;", "modifier": "public final", "type": "Factory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "Mediator", "parameters": "(Metadata md,\n                    Factory factory)", "modifiers": "public", "return": "", "signature": " Mediator(Metadata md,\n                    Factory factory)", "full_signature": "public  Mediator(Metadata md,\n                    Factory factory)", "class_method_signature": "Mediator.Mediator(Metadata md,\n                    Factory factory)", "testcase": false, "constructor": true}, {"identifier": "insert", "parameters": "(InsertionRequest req)", "modifiers": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public", "return": "Response", "signature": "Response insert(InsertionRequest req)", "full_signature": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public Response insert(InsertionRequest req)", "class_method_signature": "Mediator.insert(InsertionRequest req)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(SaveRequest req)", "modifiers": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public", "return": "Response", "signature": "Response save(SaveRequest req)", "full_signature": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public Response save(SaveRequest req)", "class_method_signature": "Mediator.save(SaveRequest req)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(UpdateRequest req)", "modifiers": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public", "return": "Response", "signature": "Response update(UpdateRequest req)", "full_signature": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public Response update(UpdateRequest req)", "class_method_signature": "Mediator.update(UpdateRequest req)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(DeleteRequest req)", "modifiers": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public", "return": "Response", "signature": "Response delete(DeleteRequest req)", "full_signature": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public Response delete(DeleteRequest req)", "class_method_signature": "Mediator.delete(DeleteRequest req)", "testcase": false, "constructor": false}, {"identifier": "rewriteUpdateQueryForCompositeSearch", "parameters": "(CompositeMetadata md, OperationContext ctx)", "modifiers": "private", "return": "QueryExpression", "signature": "QueryExpression rewriteUpdateQueryForCompositeSearch(CompositeMetadata md, OperationContext ctx)", "full_signature": "private QueryExpression rewriteUpdateQueryForCompositeSearch(CompositeMetadata md, OperationContext ctx)", "class_method_signature": "Mediator.rewriteUpdateQueryForCompositeSearch(CompositeMetadata md, OperationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(FindRequest req)", "modifiers": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public", "return": "Response", "signature": "Response find(FindRequest req)", "full_signature": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public Response find(FindRequest req)", "class_method_signature": "Mediator.find(FindRequest req)", "testcase": false, "constructor": false}, {"identifier": "findAndStream", "parameters": "(FindRequest req)", "modifiers": "public", "return": "StreamingResponse", "signature": "StreamingResponse findAndStream(FindRequest req)", "full_signature": "public StreamingResponse findAndStream(FindRequest req)", "class_method_signature": "Mediator.findAndStream(FindRequest req)", "testcase": false, "constructor": false}, {"identifier": "_findAndStream", "parameters": "(FindRequest req, OperationContext ctx)", "modifiers": "private", "return": "StreamingResponse", "signature": "StreamingResponse _findAndStream(FindRequest req, OperationContext ctx)", "full_signature": "private StreamingResponse _findAndStream(FindRequest req, OperationContext ctx)", "class_method_signature": "Mediator._findAndStream(FindRequest req, OperationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "explain", "parameters": "(FindRequest req)", "modifiers": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\") public", "return": "Response", "signature": "Response explain(FindRequest req)", "full_signature": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\") public Response explain(FindRequest req)", "class_method_signature": "Mediator.explain(FindRequest req)", "testcase": false, "constructor": false}, {"identifier": "wait", "parameters": "(BulkExecutionContext ctx)", "modifiers": "protected", "return": "void", "signature": "void wait(BulkExecutionContext ctx)", "full_signature": "protected void wait(BulkExecutionContext ctx)", "class_method_signature": "Mediator.wait(BulkExecutionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getFutureRequest", "parameters": "(final Request req, RequestMetrics metrics)", "modifiers": "protected", "return": "Callable<Response>", "signature": "Callable<Response> getFutureRequest(final Request req, RequestMetrics metrics)", "full_signature": "protected Callable<Response> getFutureRequest(final Request req, RequestMetrics metrics)", "class_method_signature": "Mediator.getFutureRequest(final Request req, RequestMetrics metrics)", "testcase": false, "constructor": false}, {"identifier": "bulkRequest", "parameters": "(BulkRequest requests, RequestMetrics metrics)", "modifiers": "public", "return": "BulkResponse", "signature": "BulkResponse bulkRequest(BulkRequest requests, RequestMetrics metrics)", "full_signature": "public BulkResponse bulkRequest(BulkRequest requests, RequestMetrics metrics)", "class_method_signature": "Mediator.bulkRequest(BulkRequest requests, RequestMetrics metrics)", "testcase": false, "constructor": false}, {"identifier": "newCtx", "parameters": "(Request request, CRUDOperation CRUDOperation)", "modifiers": "protected", "return": "OperationContext", "signature": "OperationContext newCtx(Request request, CRUDOperation CRUDOperation)", "full_signature": "protected OperationContext newCtx(Request request, CRUDOperation CRUDOperation)", "class_method_signature": "Mediator.newCtx(Request request, CRUDOperation CRUDOperation)", "testcase": false, "constructor": false}, {"identifier": "runBulkConstraintValidation", "parameters": "(OperationContext ctx)", "modifiers": "private", "return": "void", "signature": "void runBulkConstraintValidation(OperationContext ctx)", "full_signature": "private void runBulkConstraintValidation(OperationContext ctx)", "class_method_signature": "Mediator.runBulkConstraintValidation(OperationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "updatePredefinedFields", "parameters": "(OperationContext ctx, CRUDController controller, String entity)", "modifiers": "private", "return": "void", "signature": "void updatePredefinedFields(OperationContext ctx, CRUDController controller, String entity)", "full_signature": "private void updatePredefinedFields(OperationContext ctx, CRUDController controller, String entity)", "class_method_signature": "Mediator.updatePredefinedFields(OperationContext ctx, CRUDController controller, String entity)", "testcase": false, "constructor": false}, {"identifier": "checkQueryAccess", "parameters": "(OperationContext ctx, QueryExpression query)", "modifiers": "private", "return": "boolean", "signature": "boolean checkQueryAccess(OperationContext ctx, QueryExpression query)", "full_signature": "private boolean checkQueryAccess(OperationContext ctx, QueryExpression query)", "class_method_signature": "Mediator.checkQueryAccess(OperationContext ctx, QueryExpression query)", "testcase": false, "constructor": false}, {"identifier": "setResponseResults", "parameters": "(OperationContext ctx,\n                                               WithRange requestWithRange,\n                                               Response response)", "modifiers": "private", "return": "List<DataError>", "signature": "List<DataError> setResponseResults(OperationContext ctx,\n                                               WithRange requestWithRange,\n                                               Response response)", "full_signature": "private List<DataError> setResponseResults(OperationContext ctx,\n                                               WithRange requestWithRange,\n                                               Response response)", "class_method_signature": "Mediator.setResponseResults(OperationContext ctx,\n                                               WithRange requestWithRange,\n                                               Response response)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/mediator/Mediator.java"}, "focal_method": {"identifier": "insert", "parameters": "(InsertionRequest req)", "modifiers": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public", "return": "Response", "body": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\")\n    public Response insert(InsertionRequest req) {\n        LOGGER.debug(\"insert {}\", req.getEntityVersion());\n        Error.push(\"insert(\" + req.getEntityVersion().toString() + \")\");\n        Response response = new Response(factory.getNodeFactory(), OperationStatus.ERROR);\n        OperationContext ctx=null;\n        try {\n            ctx = newCtx(req, CRUDOperation.INSERT);\n            ctx.measure.begin(\"insert\");\n            response.setEntity(ctx.getTopLevelEntityName(),ctx.getTopLevelEntityVersion());\n            EntityMetadata md = ctx.getTopLevelEntityMetadata();\n            if (!md.getAccess().getInsert().hasAccess(ctx.getCallerRoles())) {\n                ctx.setStatus(OperationStatus.ERROR);\n                ctx.addError(Error.get(CrudConstants.ERR_NO_ACCESS, \"insert \" + ctx.getTopLevelEntityName()));\n            } else {\n                factory.getInterceptors().callInterceptors(InterceptPoint.PRE_MEDIATOR_INSERT, ctx);\n                CRUDController controller = factory.getCRUDController(md);\n                updatePredefinedFields(ctx, controller, md.getName());\n                runBulkConstraintValidation(ctx);\n                if (!ctx.hasErrors() && ctx.hasInputDocumentsWithoutErrors()) {\n                    LOGGER.debug(CRUD_MSG_PREFIX, controller.getClass().getName());\n                    CRUDInsertionResponse ir=controller.insert(ctx, req.getReturnFields());\n                    ctx.getHookManager().queueMediatorHooks(ctx);\n                    ctx.measure.begin(\"postProcessInsertedDocs\");\n                    response.setModifiedCount(ir.getNumInserted());\n                    List<DataError> dataErrors=setResponseResults(ctx,req,response);\n                    response.getDataErrors().addAll(dataErrors);\n                    ctx.measure.begin(\"postProcessInsertedDocs\");\n                    if (!ctx.hasErrors() && dataErrors.isEmpty() && ctx.getInputDocuments().size()==ir.getNumInserted()) {\n                        ctx.setStatus(OperationStatus.COMPLETE);\n                    } else if (ir.getNumInserted()>0) {\n                        ctx.setStatus(OperationStatus.PARTIAL);\n                    } else {\n                        ctx.setStatus(OperationStatus.ERROR);\n                    }\n                } else {\n                    List<DataError> dataErrors=setResponseResults(ctx,req,response);\n                    response.getDataErrors().addAll(dataErrors);\n                    ctx.setStatus(OperationStatus.ERROR);\n                }\n            }\n            response.getErrors().addAll(ctx.getErrors());\n            response.setStatus(ctx.getStatus());\n            if (response.getStatus() != OperationStatus.ERROR) {\n                ctx.getHookManager().callQueuedHooks();\n            }\n        } catch (Error e) {\n            response.getErrors().add(e);\n            response.setStatus(OperationStatus.ERROR);\n        } catch (Exception e) {\n            response.getErrors().add(Error.get(CrudConstants.ERR_CRUD, e));\n            response.setStatus(OperationStatus.ERROR);\n        } finally {\n            if(ctx!=null) {\n                ctx.measure.end(\"insert\");\n                METRICS.debug(\"insert: {}\",ctx.measure);\n            }\n            Error.pop();\n        }\n        return response;\n    }", "signature": "Response insert(InsertionRequest req)", "full_signature": "@StopWatch(loggerName = \"stopwatch.com.redhat.lightblue.mediator.Mediator\", sizeCalculatorClass = \"com.redhat.lightblue.mediator.ResponsePayloadSizeCalculator\") public Response insert(InsertionRequest req)", "class_method_signature": "Mediator.insert(InsertionRequest req)", "testcase": false, "constructor": false, "invocations": ["debug", "getEntityVersion", "push", "toString", "getEntityVersion", "getNodeFactory", "newCtx", "begin", "setEntity", "getTopLevelEntityName", "getTopLevelEntityVersion", "getTopLevelEntityMetadata", "hasAccess", "getInsert", "getAccess", "getCallerRoles", "setStatus", "addError", "get", "getTopLevelEntityName", "callInterceptors", "getInterceptors", "getCRUDController", "updatePredefinedFields", "getName", "runBulkConstraintValidation", "hasErrors", "hasInputDocumentsWithoutErrors", "debug", "getName", "getClass", "insert", "getReturnFields", "queueMediatorHooks", "getHookManager", "begin", "setModifiedCount", "getNumInserted", "setResponseResults", "addAll", "getDataErrors", "begin", "hasErrors", "isEmpty", "size", "getInputDocuments", "getNumInserted", "setStatus", "getNumInserted", "setStatus", "setStatus", "setResponseResults", "addAll", "getDataErrors", "setStatus", "addAll", "getErrors", "getErrors", "setStatus", "getStatus", "getStatus", "callQueuedHooks", "getHookManager", "add", "getErrors", "setStatus", "add", "getErrors", "get", "setStatus", "end", "debug", "pop"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}