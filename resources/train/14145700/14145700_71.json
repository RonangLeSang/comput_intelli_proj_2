{"test_class": {"identifier": "TestAbstractMetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AbstractMetadata metadata;", "modifier": "", "type": "AbstractMetadata", "declarator": "metadata", "var_name": "metadata"}], "file": "metadata/src/test/java/com/redhat/lightblue/metadata/TestAbstractMetadataTest.java"}, "test_case": {"identifier": "checkVersionIsValid_Valid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkVersionIsValid_Valid() {\n        // test a bunch of values that should be valid\n        String[] values = new String[]{\n            \"1.0.0\",\n            \"1.1.0\",\n            \"100.344.88999\",\n            \"1.0.0-alpha\",\n            \"1.0.3-SNAPSHOT\",\n            \"1.0.4-100\"\n        };\n        for (String value : values) {\n            Assert.assertNotNull(value, metadata.checkVersionIsValid(new Version(value, null, null)));\n        }\n    }", "signature": "void checkVersionIsValid_Valid()", "full_signature": "@Test public void checkVersionIsValid_Valid()", "class_method_signature": "TestAbstractMetadataTest.checkVersionIsValid_Valid()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "checkVersionIsValid"]}, "focal_class": {"identifier": "AbstractMetadata", "superclass": "", "interfaces": "implements Metadata", "fields": [{"original_string": "public static final String SEMVER_REGEX = \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-.*)?$\";", "modifier": "public static final", "type": "String", "declarator": "SEMVER_REGEX = \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-.*)?$\"", "var_name": "SEMVER_REGEX"}, {"original_string": "protected Map<MetadataRole, List<String>> roleMap;", "modifier": "protected", "type": "Map<MetadataRole, List<String>>", "declarator": "roleMap", "var_name": "roleMap"}], "methods": [{"identifier": "checkVersionExists", "parameters": "(String entityName, String version)", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean checkVersionExists(String entityName, String version)", "full_signature": "protected abstract boolean checkVersionExists(String entityName, String version)", "class_method_signature": "AbstractMetadata.checkVersionExists(String entityName, String version)", "testcase": false, "constructor": false}, {"identifier": "checkDataStoreIsValid", "parameters": "(EntityInfo md)", "modifiers": "protected abstract", "return": "void", "signature": "void checkDataStoreIsValid(EntityInfo md)", "full_signature": "protected abstract void checkDataStoreIsValid(EntityInfo md)", "class_method_signature": "AbstractMetadata.checkDataStoreIsValid(EntityInfo md)", "testcase": false, "constructor": false}, {"identifier": "validateDefaultVersion", "parameters": "(EntityInfo ei)", "modifiers": "protected final", "return": "void", "signature": "void validateDefaultVersion(EntityInfo ei)", "full_signature": "protected final void validateDefaultVersion(EntityInfo ei)", "class_method_signature": "AbstractMetadata.validateDefaultVersion(EntityInfo ei)", "testcase": false, "constructor": false}, {"identifier": "checkVersionIsValid", "parameters": "(EntityMetadata md)", "modifiers": "protected final", "return": "Version", "signature": "Version checkVersionIsValid(EntityMetadata md)", "full_signature": "protected final Version checkVersionIsValid(EntityMetadata md)", "class_method_signature": "AbstractMetadata.checkVersionIsValid(EntityMetadata md)", "testcase": false, "constructor": false}, {"identifier": "checkVersionIsValid", "parameters": "(EntitySchema md)", "modifiers": "protected final", "return": "Version", "signature": "Version checkVersionIsValid(EntitySchema md)", "full_signature": "protected final Version checkVersionIsValid(EntitySchema md)", "class_method_signature": "AbstractMetadata.checkVersionIsValid(EntitySchema md)", "testcase": false, "constructor": false}, {"identifier": "checkVersionIsValid", "parameters": "(Version ver)", "modifiers": "protected final", "return": "Version", "signature": "Version checkVersionIsValid(Version ver)", "full_signature": "protected final Version checkVersionIsValid(Version ver)", "class_method_signature": "AbstractMetadata.checkVersionIsValid(Version ver)", "testcase": false, "constructor": false}, {"identifier": "checkMetadataHasName", "parameters": "(EntityMetadata md)", "modifiers": "protected final", "return": "void", "signature": "void checkMetadataHasName(EntityMetadata md)", "full_signature": "protected final void checkMetadataHasName(EntityMetadata md)", "class_method_signature": "AbstractMetadata.checkMetadataHasName(EntityMetadata md)", "testcase": false, "constructor": false}, {"identifier": "checkMetadataHasName", "parameters": "(EntityInfo md)", "modifiers": "protected final", "return": "void", "signature": "void checkMetadataHasName(EntityInfo md)", "full_signature": "protected final void checkMetadataHasName(EntityInfo md)", "class_method_signature": "AbstractMetadata.checkMetadataHasName(EntityInfo md)", "testcase": false, "constructor": false}, {"identifier": "checkMetadataHasFields", "parameters": "(EntityMetadata md)", "modifiers": "protected final", "return": "void", "signature": "void checkMetadataHasFields(EntityMetadata md)", "full_signature": "protected final void checkMetadataHasFields(EntityMetadata md)", "class_method_signature": "AbstractMetadata.checkMetadataHasFields(EntityMetadata md)", "testcase": false, "constructor": false}, {"identifier": "checkDataStoreIsValid", "parameters": "(EntityMetadata md)", "modifiers": "protected final", "return": "void", "signature": "void checkDataStoreIsValid(EntityMetadata md)", "full_signature": "protected final void checkDataStoreIsValid(EntityMetadata md)", "class_method_signature": "AbstractMetadata.checkDataStoreIsValid(EntityMetadata md)", "testcase": false, "constructor": false}, {"identifier": "checkMetadataHasFields", "parameters": "(EntitySchema md)", "modifiers": "protected final", "return": "void", "signature": "void checkMetadataHasFields(EntitySchema md)", "full_signature": "protected final void checkMetadataHasFields(EntitySchema md)", "class_method_signature": "AbstractMetadata.checkMetadataHasFields(EntitySchema md)", "testcase": false, "constructor": false}, {"identifier": "helperAddRoles", "parameters": "(Collection<String> roles, String operation, String path, Map<String, Map<String, List<String>>> accessMap)", "modifiers": "protected final", "return": "void", "signature": "void helperAddRoles(Collection<String> roles, String operation, String path, Map<String, Map<String, List<String>>> accessMap)", "full_signature": "protected final void helperAddRoles(Collection<String> roles, String operation, String path, Map<String, Map<String, List<String>>> accessMap)", "class_method_signature": "AbstractMetadata.helperAddRoles(Collection<String> roles, String operation, String path, Map<String, Map<String, List<String>>> accessMap)", "testcase": false, "constructor": false}, {"identifier": "getMappedRoles", "parameters": "()", "modifiers": "@Override public", "return": "Map<MetadataRole, List<String>>", "signature": "Map<MetadataRole, List<String>> getMappedRoles()", "full_signature": "@Override public Map<MetadataRole, List<String>> getMappedRoles()", "class_method_signature": "AbstractMetadata.getMappedRoles()", "testcase": false, "constructor": false}, {"identifier": "setRoleMap", "parameters": "(Map<MetadataRole, List<String>> roleMap)", "modifiers": "public", "return": "void", "signature": "void setRoleMap(Map<MetadataRole, List<String>> roleMap)", "full_signature": "public void setRoleMap(Map<MetadataRole, List<String>> roleMap)", "class_method_signature": "AbstractMetadata.setRoleMap(Map<MetadataRole, List<String>> roleMap)", "testcase": false, "constructor": false}], "file": "metadata/src/main/java/com/redhat/lightblue/metadata/AbstractMetadata.java"}, "focal_method": {"identifier": "checkVersionIsValid", "parameters": "(EntityMetadata md)", "modifiers": "protected final", "return": "Version", "body": "protected final Version checkVersionIsValid(EntityMetadata md) {\n        return checkVersionIsValid(md.getEntitySchema().getVersion());\n    }", "signature": "Version checkVersionIsValid(EntityMetadata md)", "full_signature": "protected final Version checkVersionIsValid(EntityMetadata md)", "class_method_signature": "AbstractMetadata.checkVersionIsValid(EntityMetadata md)", "testcase": false, "constructor": false, "invocations": ["checkVersionIsValid", "getVersion", "getEntitySchema"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}