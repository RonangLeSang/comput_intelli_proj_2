{"test_class": {"identifier": "SearchesTest", "superclass": "extends AbstractJsonSchemaTest", "interfaces": "", "fields": [], "file": "crud/src/test/java/com/redhat/lightblue/assoc/ep/SearchesTest.java"}, "test_case": {"identifier": "writeQueriesForJoin1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeQueriesForJoin1() throws Exception {\n        CompositeMetadata umd = getCmd(\"U\", projection(\"[{'field':'legalEntities.*.legalEntity'}]\"));\n        CompositeMetadata lmd = umd.getChildMetadata(new Path(\"legalEntities.*.legalEntity\"));\n        QueryPlanChooser chooser = new QueryPlanChooser(umd, new First(),\n                new SimpleScorer(), query(\"{'field':'_id','op':'=','rvalue':1}\"),\n                null);\n        QueryPlan qp = chooser.choose();\n        // Flip it to L -> U\n        qp.flip(qp.getNode(umd), qp.getNode(lmd));\n\n        ExecutionBlock ublock = new ExecutionBlock(umd, qp.getNode(umd));\n        ExecutionBlock lblock = new ExecutionBlock(umd, qp.getNode(lmd));\n        QueryPlanData data = qp.getEdgeData(qp.getNode(umd), qp.getNode(lmd));\n        AssociationQuery a1 = new AssociationQuery(umd, umd, data.getReference(), data.getConjuncts());\n        ublock.setAssociationQuery(lblock, a1);\n\n        ublock.addSourceBlock(lblock);\n\n        ublock.linkBlocks();\n        lblock.linkBlocks();\n\n        ArrayList<ResultDocument> l = new ArrayList<>();\n        l.add(resultDoc(lblock, \"{'_id':1,'name':'a'}\"));\n        JoinTuple tuple = new JoinTuple(null, null, l);\n        List<QueryExpression> queries = Searches.writeQueriesForJoinTuple(tuple, ublock);\n        System.out.println(queries);\n        Assert.assertEquals(1, queries.size());\n        JSONAssert.assertEquals(\"{field:legalEntities.*.legalEntityId,op:$eq,rvalue:1}\", queries.get(0).toString(), false);\n    }", "signature": "void writeQueriesForJoin1()", "full_signature": "@Test public void writeQueriesForJoin1()", "class_method_signature": "SearchesTest.writeQueriesForJoin1()", "testcase": true, "constructor": false, "invocations": ["getCmd", "projection", "getChildMetadata", "query", "choose", "flip", "getNode", "getNode", "getNode", "getNode", "getEdgeData", "getNode", "getNode", "getReference", "getConjuncts", "setAssociationQuery", "addSourceBlock", "linkBlocks", "linkBlocks", "add", "resultDoc", "writeQueriesForJoinTuple", "println", "assertEquals", "size", "assertEquals", "toString", "get"]}, "focal_class": {"identifier": "Searches", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Searches.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Searches.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "Searches", "parameters": "()", "modifiers": "private", "return": "", "signature": " Searches()", "full_signature": "private  Searches()", "class_method_signature": "Searches.Searches()", "testcase": false, "constructor": true}, {"identifier": "writeChildQueriesFromParentDoc", "parameters": "(AssociationQuery aq,\n                                                                                 ResultDocument parentDocument)", "modifiers": "public static", "return": "Map<ChildSlot, QueryExpression>", "signature": "Map<ChildSlot, QueryExpression> writeChildQueriesFromParentDoc(AssociationQuery aq,\n                                                                                 ResultDocument parentDocument)", "full_signature": "public static Map<ChildSlot, QueryExpression> writeChildQueriesFromParentDoc(AssociationQuery aq,\n                                                                                 ResultDocument parentDocument)", "class_method_signature": "Searches.writeChildQueriesFromParentDoc(AssociationQuery aq,\n                                                                                 ResultDocument parentDocument)", "testcase": false, "constructor": false}, {"identifier": "writeQueriesForJoinTuple", "parameters": "(JoinTuple tuple, ExecutionBlock childBlock)", "modifiers": "public static", "return": "List<QueryExpression>", "signature": "List<QueryExpression> writeQueriesForJoinTuple(JoinTuple tuple, ExecutionBlock childBlock)", "full_signature": "public static List<QueryExpression> writeQueriesForJoinTuple(JoinTuple tuple, ExecutionBlock childBlock)", "class_method_signature": "Searches.writeQueriesForJoinTuple(JoinTuple tuple, ExecutionBlock childBlock)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(QueryExpression... q)", "modifiers": "public static", "return": "QueryExpression", "signature": "QueryExpression and(QueryExpression... q)", "full_signature": "public static QueryExpression and(QueryExpression... q)", "class_method_signature": "Searches.and(QueryExpression... q)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(List<QueryExpression> list)", "modifiers": "public static", "return": "QueryExpression", "signature": "QueryExpression and(List<QueryExpression> list)", "full_signature": "public static QueryExpression and(List<QueryExpression> list)", "class_method_signature": "Searches.and(List<QueryExpression> list)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(NaryLogicalOperator op, List<QueryExpression> list)", "modifiers": "public static", "return": "QueryExpression", "signature": "QueryExpression combine(NaryLogicalOperator op, List<QueryExpression> list)", "full_signature": "public static QueryExpression combine(NaryLogicalOperator op, List<QueryExpression> list)", "class_method_signature": "Searches.combine(NaryLogicalOperator op, List<QueryExpression> list)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/assoc/ep/Searches.java"}, "focal_method": {"identifier": "writeQueriesForJoinTuple", "parameters": "(JoinTuple tuple, ExecutionBlock childBlock)", "modifiers": "public static", "return": "List<QueryExpression>", "body": "public static List<QueryExpression> writeQueriesForJoinTuple(JoinTuple tuple, ExecutionBlock childBlock) {\n        LOGGER.debug(\"writeQueriesForJoinTuples tuple:{}, child:{}\", tuple, childBlock);\n        Tuples<BindQuery> btuples = new Tuples<>();\n        if (tuple.getParentDocument() != null) {\n            AssociationQuery aq = childBlock.getAssociationQueryForEdge(tuple.getParentDocument().getBlock());\n            BindQuery parentb = tuple.getParentDocument().getBindersForSlot(tuple.getParentDocumentSlot(), aq);\n            List<BindQuery> l = new ArrayList<>(1);\n            l.add(parentb);\n            btuples.add(l);\n        }\n        if (tuple.getChildTuple() != null) {\n            // Add the child binders to the b-tuples\n            for (ResultDocument childDoc : tuple.getChildTuple()) {\n                AssociationQuery aq = childBlock.getAssociationQueryForEdge(childDoc.getBlock());\n                List<BindQuery> binders = childDoc.getBindersForParent(aq);\n                btuples.add(binders);\n            }\n        }\n        List<QueryExpression> queries = new ArrayList<>();\n        for (ExecutionBlock sourceBlock : tuple.getBlocks()) {\n            AssociationQuery aq = childBlock.getAssociationQueryForEdge(sourceBlock);\n            if (aq.getQuery() != null) {\n                queries.add(aq.getQuery());\n            }\n        }\n        QueryExpression query = and(queries);\n        ArrayList<QueryExpression> ret = new ArrayList<>();\n        if (query != null) {\n            for (Iterator<List<BindQuery>> itr = btuples.tuples(); itr.hasNext();) {\n                List<BindQuery> binders = itr.next();\n                BindQuery allBinders = BindQuery.combine(binders);\n                ret.add(allBinders.iterate(query));\n            }\n        }\n        LOGGER.debug(\"queries={}\", ret);\n        return ret;\n    }", "signature": "List<QueryExpression> writeQueriesForJoinTuple(JoinTuple tuple, ExecutionBlock childBlock)", "full_signature": "public static List<QueryExpression> writeQueriesForJoinTuple(JoinTuple tuple, ExecutionBlock childBlock)", "class_method_signature": "Searches.writeQueriesForJoinTuple(JoinTuple tuple, ExecutionBlock childBlock)", "testcase": false, "constructor": false, "invocations": ["debug", "getParentDocument", "getAssociationQueryForEdge", "getBlock", "getParentDocument", "getBindersForSlot", "getParentDocument", "getParentDocumentSlot", "add", "add", "getChildTuple", "getChildTuple", "getAssociationQueryForEdge", "getBlock", "getBindersForParent", "add", "getBlocks", "getAssociationQueryForEdge", "getQuery", "add", "getQuery", "and", "tuples", "hasNext", "next", "combine", "add", "iterate", "debug"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}