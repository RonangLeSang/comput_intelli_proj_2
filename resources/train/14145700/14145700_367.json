{"test_class": {"identifier": "RewriteQueryTest", "superclass": "extends AbstractJsonNodeTest", "interfaces": "", "fields": [], "file": "crud/src/test/java/com/redhat/lightblue/assoc/RewriteQueryTest.java"}, "test_case": {"identifier": "testReqQuery_forEach_arr_points_into_ref", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReqQuery_forEach_arr_points_into_ref() throws Exception {\n        GMD gmd = new GMD(projection(\"{'field':'us','include':1}\"), null);\n        CompositeMetadata md = CompositeMetadata.buildCompositeMetadata(getMd(\"composite/L.json\"), gmd);\n\n        AnalyzeQuery pq = new AnalyzeQuery(md, null);\n        QueryExpression q = query(\"{'array':'us.*.authentications','elemMatch':{ '$and':[ { 'field':'principal','op':'$in','values':['a']}, {'field':'providerName','op':'$eq','rvalue':'p'} ] } }\");\n        pq.iterate(q);\n        List<QueryFieldInfo> list = pq.getFieldInfo();\n\n        // L is the parent, U is the child\n        // Rewrite for U. This means, L docs are retrieved, now we'll retrieve U docs\n        // This is the trivial rewrite case\n        RewriteQuery rw = new RewriteQuery(md, md.getChildMetadata(new Path(\"us\")));\n        RewriteQuery.RewriteQueryResult result = rw.rewriteQuery(q, list);\n        QueryExpression newq = result.query;\n        System.out.println(newq);\n        List<BoundObject> bindings = result.bindings;\n        Assert.assertEquals(\"authentications\", ((ArrayMatchExpression) newq).getArray().toString());\n        // Rewrite for L. That means, U docs are retrieved, and we'll retrieve L\n        // This is the reverse case\n        rw = new RewriteQuery(md, md);\n        result = rw.rewriteQuery(q, list);\n        bindings = result.bindings;\n        newq = result.query;\n        System.out.println(newq);\n        Assert.assertTrue(newq instanceof RewriteQuery.TruePH);\n    }", "signature": "void testReqQuery_forEach_arr_points_into_ref()", "full_signature": "@Test public void testReqQuery_forEach_arr_points_into_ref()", "class_method_signature": "RewriteQueryTest.testReqQuery_forEach_arr_points_into_ref()", "testcase": true, "constructor": false, "invocations": ["projection", "buildCompositeMetadata", "getMd", "query", "iterate", "getFieldInfo", "getChildMetadata", "rewriteQuery", "println", "assertEquals", "toString", "getArray", "rewriteQuery", "println", "assertTrue"]}, "focal_class": {"identifier": "RewriteQuery", "superclass": "extends QueryIterator", "interfaces": "", "fields": [{"original_string": "private final CompositeMetadata currentEntity;", "modifier": "private final", "type": "CompositeMetadata", "declarator": "currentEntity", "var_name": "currentEntity"}], "methods": [{"identifier": "RewriteQuery", "parameters": "(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "modifiers": "public", "return": "", "signature": " RewriteQuery(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "full_signature": "public  RewriteQuery(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "class_method_signature": "RewriteQuery.RewriteQuery(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "testcase": false, "constructor": true}, {"identifier": "rewriteQuery", "parameters": "(QueryExpression q, List<QueryFieldInfo> fieldInfo)", "modifiers": "public", "return": "RewriteQueryResult", "signature": "RewriteQueryResult rewriteQuery(QueryExpression q, List<QueryFieldInfo> fieldInfo)", "full_signature": "public RewriteQueryResult rewriteQuery(QueryExpression q, List<QueryFieldInfo> fieldInfo)", "class_method_signature": "RewriteQuery.rewriteQuery(QueryExpression q, List<QueryFieldInfo> fieldInfo)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/assoc/RewriteQuery.java"}, "focal_method": {"identifier": "RewriteQuery", "parameters": "(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "modifiers": "public", "return": "", "body": "public RewriteQuery(CompositeMetadata root,\n                        CompositeMetadata currentEntity) {\n        this.currentEntity = currentEntity;\n    }", "signature": " RewriteQuery(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "full_signature": "public  RewriteQuery(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "class_method_signature": "RewriteQuery.RewriteQuery(CompositeMetadata root,\n                        CompositeMetadata currentEntity)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}