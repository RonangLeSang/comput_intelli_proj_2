{"test_class": {"identifier": "ValueTest", "superclass": "", "interfaces": "", "fields": [], "file": "query-api/src/test/java/com/redhat/lightblue/query/ValueTest.java"}, "test_case": {"identifier": "testToJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToJson() throws IOException {\n        Value instance = new Value(10L);\n        JsonNode expResult = new LongNode(10);\n        JsonNode result = instance.toJson();\n        assertEquals(expResult, result);\n\n        instance = new Value(Long.MAX_VALUE);\n        expResult = new LongNode(Long.MAX_VALUE);\n        result = instance.toJson();\n        assertEquals(expResult, result);\n\n        instance = new Value(10.0D);\n        expResult = new DoubleNode(10.0D);\n        result = instance.toJson();\n        assertEquals(expResult, result);\n\n        instance = new Value(3.0F);\n        expResult = new FloatNode(3.0F);\n        result = instance.toJson();\n        assertEquals(expResult, result);\n    }", "signature": "void testToJson()", "full_signature": "@Test public void testToJson()", "class_method_signature": "ValueTest.testToJson()", "testcase": true, "constructor": false, "invocations": ["toJson", "assertEquals", "toJson", "assertEquals", "toJson", "assertEquals", "toJson", "assertEquals"]}, "focal_class": {"identifier": "Value", "superclass": "extends JsonObject", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "protected Object value;", "modifier": "protected", "type": "Object", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "Value", "parameters": "(Object o)", "modifiers": "public", "return": "", "signature": " Value(Object o)", "full_signature": "public  Value(Object o)", "class_method_signature": "Value.Value(Object o)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getValue()", "full_signature": "public Object getValue()", "class_method_signature": "Value.getValue()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonNode", "signature": "JsonNode toJson()", "full_signature": "@Override public JsonNode toJson()", "class_method_signature": "Value.toJson()", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(JsonNode node)", "modifiers": "public static", "return": "Value", "signature": "Value fromJson(JsonNode node)", "full_signature": "public static Value fromJson(JsonNode node)", "class_method_signature": "Value.fromJson(JsonNode node)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Value.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Value.equals(Object obj)", "testcase": false, "constructor": false}], "file": "query-api/src/main/java/com/redhat/lightblue/query/Value.java"}, "focal_method": {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonNode", "body": "@Override\n    public JsonNode toJson() {\n        if (value instanceof Number) {\n            if (value instanceof BigDecimal) {\n                return getFactory().numberNode((BigDecimal) value);\n            } else if (value instanceof BigInteger) {\n                return getFactory().numberNode((BigInteger) value);\n            } else if (value instanceof Double) {\n                return getFactory().numberNode((Double) value);\n            } else if (value instanceof Float) {\n                return getFactory().numberNode((Float) value);\n            } else if (value instanceof Long) {\n                return getFactory().numberNode((Long) value);\n            } else {\n                return getFactory().numberNode(((Number) value).intValue());\n            }\n        } else if (value instanceof Boolean) {\n            return getFactory().booleanNode((Boolean) value);\n        } else if (value == null) {\n            return getFactory().nullNode();\n        } else if (value instanceof JsonNode) {\n            return (JsonNode) value;\n        } else {\n            return getFactory().textNode(value.toString());\n        }\n    }", "signature": "JsonNode toJson()", "full_signature": "@Override public JsonNode toJson()", "class_method_signature": "Value.toJson()", "testcase": false, "constructor": false, "invocations": ["numberNode", "getFactory", "numberNode", "getFactory", "numberNode", "getFactory", "numberNode", "getFactory", "numberNode", "getFactory", "numberNode", "getFactory", "intValue", "booleanNode", "getFactory", "nullNode", "getFactory", "textNode", "getFactory", "toString"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}