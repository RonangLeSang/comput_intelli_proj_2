{"test_class": {"identifier": "FieldAccessRoleEvaluatorTest", "superclass": "extends AbstractJsonNodeTest", "interfaces": "", "fields": [], "file": "crud/src/test/java/com/redhat/lightblue/eval/FieldAccessRoleEvaluatorTest.java"}, "test_case": {"identifier": "testDiff_field1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiff_field1() throws Exception {\n        EntityMetadata md = EvalTestContext.getMd(\"./testMetadata-restricted.json\");\n        JsonDoc oldDoc = EvalTestContext.getDoc(\"./doc-restricted.json\");\n        JsonDoc newDoc = EvalTestContext.getDoc(\"./doc-restricted.json\");\n        newDoc.modify(new Path(\"field1\"), JSON_NODE_FACTORY.textNode(\"test\"), true);\n        Set<String> roles = new HashSet<>();\n        roles.add(\"somerole\");\n        FieldAccessRoleEvaluator eval = new FieldAccessRoleEvaluator(md, roles);\n\n        Set<Path> list = eval.getInaccessibleFields_Update(newDoc, oldDoc);\n        Assert.assertEquals(1, list.size());\n        Assert.assertTrue(list.contains(new Path(\"field1\")));\n    }", "signature": "void testDiff_field1()", "full_signature": "@Test public void testDiff_field1()", "class_method_signature": "FieldAccessRoleEvaluatorTest.testDiff_field1()", "testcase": true, "constructor": false, "invocations": ["getMd", "getDoc", "getDoc", "modify", "textNode", "add", "getInaccessibleFields_Update", "assertEquals", "size", "assertTrue", "contains"]}, "focal_class": {"identifier": "FieldAccessRoleEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EntityMetadata md;", "modifier": "private final", "type": "EntityMetadata", "declarator": "md", "var_name": "md"}, {"original_string": "private final Set<String> roles;", "modifier": "private final", "type": "Set<String>", "declarator": "roles", "var_name": "roles"}, {"original_string": "private JsonCompare comparator;", "modifier": "private", "type": "JsonCompare", "declarator": "comparator", "var_name": "comparator"}, {"original_string": "private DocComparator.Difference<JsonNode> diff;", "modifier": "private", "type": "DocComparator.Difference<JsonNode>", "declarator": "diff", "var_name": "diff"}, {"original_string": "private static final AccAccessor INS_ACC = new AccAccessor() {\n        public Access getFieldAccess(FieldAccess f) {\n            return f.getInsert();\n        }\n    };", "modifier": "private static final", "type": "AccAccessor", "declarator": "INS_ACC = new AccAccessor() {\n        public Access getFieldAccess(FieldAccess f) {\n            return f.getInsert();\n        }\n    }", "var_name": "INS_ACC"}, {"original_string": "private static final AccAccessor UPD_ACC = new AccAccessor() {\n        public Access getFieldAccess(FieldAccess f) {\n            return f.getUpdate();\n        }\n    };", "modifier": "private static final", "type": "AccAccessor", "declarator": "UPD_ACC = new AccAccessor() {\n        public Access getFieldAccess(FieldAccess f) {\n            return f.getUpdate();\n        }\n    }", "var_name": "UPD_ACC"}, {"original_string": "private static final AccAccessor FIND_ACC = new AccAccessor() {\n        public Access getFieldAccess(FieldAccess f) {\n            return f.getFind();\n        }\n    };", "modifier": "private static final", "type": "AccAccessor", "declarator": "FIND_ACC = new AccAccessor() {\n        public Access getFieldAccess(FieldAccess f) {\n            return f.getFind();\n        }\n    }", "var_name": "FIND_ACC"}], "methods": [{"identifier": "FieldAccessRoleEvaluator", "parameters": "(EntityMetadata md, Set<String> callerRoles)", "modifiers": "public", "return": "", "signature": " FieldAccessRoleEvaluator(EntityMetadata md, Set<String> callerRoles)", "full_signature": "public  FieldAccessRoleEvaluator(EntityMetadata md, Set<String> callerRoles)", "class_method_signature": "FieldAccessRoleEvaluator.FieldAccessRoleEvaluator(EntityMetadata md, Set<String> callerRoles)", "testcase": false, "constructor": true}, {"identifier": "hasAccess", "parameters": "(Set<Path> fields, Operation op)", "modifiers": "public", "return": "boolean", "signature": "boolean hasAccess(Set<Path> fields, Operation op)", "full_signature": "public boolean hasAccess(Set<Path> fields, Operation op)", "class_method_signature": "FieldAccessRoleEvaluator.hasAccess(Set<Path> fields, Operation op)", "testcase": false, "constructor": false}, {"identifier": "hasAccess", "parameters": "(Path field, Operation op)", "modifiers": "public", "return": "boolean", "signature": "boolean hasAccess(Path field, Operation op)", "full_signature": "public boolean hasAccess(Path field, Operation op)", "class_method_signature": "FieldAccessRoleEvaluator.hasAccess(Path field, Operation op)", "testcase": false, "constructor": false}, {"identifier": "getInaccessibleFields", "parameters": "(Operation op)", "modifiers": "public", "return": "Set<Path>", "signature": "Set<Path> getInaccessibleFields(Operation op)", "full_signature": "public Set<Path> getInaccessibleFields(Operation op)", "class_method_signature": "FieldAccessRoleEvaluator.getInaccessibleFields(Operation op)", "testcase": false, "constructor": false}, {"identifier": "getInaccessibleFields_Insert", "parameters": "(JsonDoc doc)", "modifiers": "public", "return": "Set<Path>", "signature": "Set<Path> getInaccessibleFields_Insert(JsonDoc doc)", "full_signature": "public Set<Path> getInaccessibleFields_Insert(JsonDoc doc)", "class_method_signature": "FieldAccessRoleEvaluator.getInaccessibleFields_Insert(JsonDoc doc)", "testcase": false, "constructor": false}, {"identifier": "getLastDiff", "parameters": "()", "modifiers": "public", "return": "DocComparator.Difference<JsonNode>", "signature": "DocComparator.Difference<JsonNode> getLastDiff()", "full_signature": "public DocComparator.Difference<JsonNode> getLastDiff()", "class_method_signature": "FieldAccessRoleEvaluator.getLastDiff()", "testcase": false, "constructor": false}, {"identifier": "getInaccessibleFields_Update", "parameters": "(JsonDoc newDoc, JsonDoc oldDoc)", "modifiers": "public", "return": "Set<Path>", "signature": "Set<Path> getInaccessibleFields_Update(JsonDoc newDoc, JsonDoc oldDoc)", "full_signature": "public Set<Path> getInaccessibleFields_Update(JsonDoc newDoc, JsonDoc oldDoc)", "class_method_signature": "FieldAccessRoleEvaluator.getInaccessibleFields_Update(JsonDoc newDoc, JsonDoc oldDoc)", "testcase": false, "constructor": false}, {"identifier": "getExcludedFields", "parameters": "(Operation op)", "modifiers": "public", "return": "Projection", "signature": "Projection getExcludedFields(Operation op)", "full_signature": "public Projection getExcludedFields(Operation op)", "class_method_signature": "FieldAccessRoleEvaluator.getExcludedFields(Operation op)", "testcase": false, "constructor": false}, {"identifier": "getEffAccess", "parameters": "(Field f, AccAccessor acc, Access entityAccess)", "modifiers": "private", "return": "Access", "signature": "Access getEffAccess(Field f, AccAccessor acc, Access entityAccess)", "full_signature": "private Access getEffAccess(Field f, AccAccessor acc, Access entityAccess)", "class_method_signature": "FieldAccessRoleEvaluator.getEffAccess(Field f, AccAccessor acc, Access entityAccess)", "testcase": false, "constructor": false}, {"identifier": "hasAccess", "parameters": "(Field f, Operation op)", "modifiers": "private", "return": "boolean", "signature": "boolean hasAccess(Field f, Operation op)", "full_signature": "private boolean hasAccess(Field f, Operation op)", "class_method_signature": "FieldAccessRoleEvaluator.hasAccess(Field f, Operation op)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/eval/FieldAccessRoleEvaluator.java"}, "focal_method": {"identifier": "getInaccessibleFields_Update", "parameters": "(JsonDoc newDoc, JsonDoc oldDoc)", "modifiers": "public", "return": "Set<Path>", "body": "public Set<Path> getInaccessibleFields_Update(JsonDoc newDoc, JsonDoc oldDoc) {\n        // Initialize the comparator if not already\n        if (comparator == null) {\n            comparator = md.getEntitySchema().getDocComparator();\n        }\n        Set<Path> inaccessibleFields = getInaccessibleFields(Operation.update);\n        Set<Path> ret = new HashSet<>();\n        if (!inaccessibleFields.isEmpty()) {\n            try {\n                diff = comparator.compareNodes(oldDoc.getRoot(), newDoc.getRoot());\n            } catch (Exception e) {\n                // Any exception at this point is a bug\n                throw new RuntimeException(e);\n            }\n            for (DocComparator.Delta<JsonNode> d : diff.getDelta()) {\n                if ((d instanceof DocComparator.Addition\n                        && ((DocComparator.Addition<JsonNode>) d).getAddedNode().isValueNode())\n                        || (d instanceof DocComparator.Removal\n                        && ((DocComparator.Removal<JsonNode>) d).getRemovedNode().isValueNode())\n                        || (d instanceof DocComparator.Modification\n                        && ((DocComparator.Modification<JsonNode>) d).getUnmodifiedNode().isValueNode())) {\n                    FieldTreeNode fieldMd = md.resolve(d.getField());\n                    boolean modified = true;\n                    if (d instanceof JsonCompare.Modification) {\n                        // Is it really modified\n                        Object o1 = fieldMd.getType().fromJson(((DocComparator.Modification<JsonNode>) d).getUnmodifiedNode());\n                        Object o2 = fieldMd.getType().fromJson(((DocComparator.Modification<JsonNode>) d).getModifiedNode());\n                        if (o1.equals(o2)) {\n                            modified = false;\n                        }\n                    }\n                    if (modified && inaccessibleFields.contains(fieldMd.getFullPath())) {\n                        ret.add(d.getField());\n                    }\n                }\n                // In case of an addition, removal, or move, check if the parent node is an object or an array\n                // that is not accesible.\n                if (d instanceof DocComparator.Addition\n                        || d instanceof DocComparator.Removal\n                        || d instanceof DocComparator.Move) {\n                    Path field = d.getField();\n                    if (field.numSegments() > 2) { // Not a top-level or first level variable\n                        // That means, it's parent is not the root level, so we can check access\n                        // to the parent itself.\n                        Path parent = md.resolve(field.prefix(-1)).getFullPath();\n\n                        if (inaccessibleFields.contains(parent)) {\n                            ret.add(parent);\n                        }\n                    }\n                }\n            }\n        }\n        return ret;\n    }", "signature": "Set<Path> getInaccessibleFields_Update(JsonDoc newDoc, JsonDoc oldDoc)", "full_signature": "public Set<Path> getInaccessibleFields_Update(JsonDoc newDoc, JsonDoc oldDoc)", "class_method_signature": "FieldAccessRoleEvaluator.getInaccessibleFields_Update(JsonDoc newDoc, JsonDoc oldDoc)", "testcase": false, "constructor": false, "invocations": ["getDocComparator", "getEntitySchema", "getInaccessibleFields", "isEmpty", "compareNodes", "getRoot", "getRoot", "getDelta", "isValueNode", "getAddedNode", "isValueNode", "getRemovedNode", "isValueNode", "getUnmodifiedNode", "resolve", "getField", "fromJson", "getType", "getUnmodifiedNode", "fromJson", "getType", "getModifiedNode", "equals", "contains", "getFullPath", "add", "getField", "getField", "numSegments", "getFullPath", "resolve", "prefix", "contains", "add"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}