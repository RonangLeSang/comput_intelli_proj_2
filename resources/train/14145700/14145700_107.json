{"test_class": {"identifier": "BigIntegerTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Type bigIntegerType;", "modifier": "", "type": "Type", "declarator": "bigIntegerType", "var_name": "bigIntegerType"}], "file": "metadata/src/test/java/com/redhat/lightblue/metadata/types/BigIntegerTypeTest.java"}, "test_case": {"identifier": "testCastNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCastNull() {\n        assertNull(bigIntegerType.cast(null));\n    }", "signature": "void testCastNull()", "full_signature": "@Test public void testCastNull()", "class_method_signature": "BigIntegerTypeTest.testCastNull()", "testcase": true, "constructor": false, "invocations": ["assertNull", "cast"]}, "focal_class": {"identifier": "BigIntegerType", "superclass": "", "interfaces": "implements Type, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1l;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1l", "var_name": "serialVersionUID"}, {"original_string": "public static final Type TYPE = new BigIntegerType();", "modifier": "public static final", "type": "Type", "declarator": "TYPE = new BigIntegerType()", "var_name": "TYPE"}, {"original_string": "public static final String NAME = \"biginteger\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"biginteger\"", "var_name": "NAME"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "BigIntegerType.getName()", "testcase": false, "constructor": false}, {"identifier": "supportsEq", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsEq()", "full_signature": "@Override public boolean supportsEq()", "class_method_signature": "BigIntegerType.supportsEq()", "testcase": false, "constructor": false}, {"identifier": "supportsOrdering", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOrdering()", "full_signature": "@Override public boolean supportsOrdering()", "class_method_signature": "BigIntegerType.supportsOrdering()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(JsonNodeFactory factory, Object obj)", "modifiers": "@Override public", "return": "JsonNode", "signature": "JsonNode toJson(JsonNodeFactory factory, Object obj)", "full_signature": "@Override public JsonNode toJson(JsonNodeFactory factory, Object obj)", "class_method_signature": "BigIntegerType.toJson(JsonNodeFactory factory, Object obj)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(JsonNode node)", "modifiers": "@Override public", "return": "Object", "signature": "Object fromJson(JsonNode node)", "full_signature": "@Override public Object fromJson(JsonNode node)", "class_method_signature": "BigIntegerType.fromJson(JsonNode node)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "Object", "signature": "Object cast(Object obj)", "full_signature": "@Override public Object cast(Object obj)", "class_method_signature": "BigIntegerType.cast(Object obj)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object v1, Object v2)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public", "return": "int", "signature": "int compare(Object v1, Object v2)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public int compare(Object v1, Object v2)", "class_method_signature": "BigIntegerType.compare(Object v1, Object v2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "BigIntegerType.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BigIntegerType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BigIntegerType.toString()", "testcase": false, "constructor": false}, {"identifier": "BigIntegerType", "parameters": "()", "modifiers": "private", "return": "", "signature": " BigIntegerType()", "full_signature": "private  BigIntegerType()", "class_method_signature": "BigIntegerType.BigIntegerType()", "testcase": false, "constructor": true}], "file": "metadata/src/main/java/com/redhat/lightblue/metadata/types/BigIntegerType.java"}, "focal_method": {"identifier": "cast", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object cast(Object obj) {\n        BigInteger value = null;\n        if (obj != null) {\n            if (obj instanceof BigInteger) {\n                value = (BigInteger) obj;\n            } else if (obj instanceof Number) {\n                value = new BigInteger(Long.toString(((Number) obj).longValue()));\n            } else if (obj instanceof Boolean) {\n                value = new BigInteger(((Boolean) obj) ? \"1\" : \"0\");\n            } else if (obj instanceof String) {\n                try {\n                    value = new BigInteger((String) obj);\n                } catch (NumberFormatException e) {\n                    throw Error.get(NAME, MetadataConstants.ERR_INCOMPATIBLE_VALUE, obj.toString());\n                }\n            } else {\n                throw Error.get(NAME, MetadataConstants.ERR_INCOMPATIBLE_VALUE, obj.toString());\n            }\n        }\n        return value;\n    }", "signature": "Object cast(Object obj)", "full_signature": "@Override public Object cast(Object obj)", "class_method_signature": "BigIntegerType.cast(Object obj)", "testcase": false, "constructor": false, "invocations": ["toString", "longValue", "get", "toString", "get", "toString"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}