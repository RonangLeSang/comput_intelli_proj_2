{"test_class": {"identifier": "FieldComparisonEvaluatorTest", "superclass": "extends AbstractJsonSchemaTest", "interfaces": "", "fields": [{"original_string": "private EntityMetadata md;", "modifier": "private", "type": "EntityMetadata", "declarator": "md", "var_name": "md"}], "file": "crud/src/test/java/com/redhat/lightblue/eval/FieldComparisonEvaluatorTest.java"}, "test_case": {"identifier": "field_comparison_returns_false_when_expression_false", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void field_comparison_returns_false_when_expression_false() throws Exception {\n        QueryExpression q = EvalTestContext.queryExpressionFromJson(\"{'field':'field4','op':'<','rfield':'field3'}\");\n        QueryEvaluator qe = QueryEvaluator.getInstance(q, md);\n\n        QueryEvaluationContext ctx = qe.evaluate(jsonDoc);\n\n        Assert.assertFalse(ctx.getResult());\n    }", "signature": "void field_comparison_returns_false_when_expression_false()", "full_signature": "@Test public void field_comparison_returns_false_when_expression_false()", "class_method_signature": "FieldComparisonEvaluatorTest.field_comparison_returns_false_when_expression_false()", "testcase": true, "constructor": false, "invocations": ["queryExpressionFromJson", "getInstance", "evaluate", "assertFalse", "getResult"]}, "focal_class": {"identifier": "FieldComparisonEvaluator", "superclass": "extends QueryEvaluator", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FieldComparisonEvaluator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FieldComparisonEvaluator.class)", "var_name": "LOGGER"}, {"original_string": "private final FieldTreeNode fieldMd;", "modifier": "private final", "type": "FieldTreeNode", "declarator": "fieldMd", "var_name": "fieldMd"}, {"original_string": "private final FieldTreeNode rfieldMd;", "modifier": "private final", "type": "FieldTreeNode", "declarator": "rfieldMd", "var_name": "rfieldMd"}, {"original_string": "private final Path relativePath;", "modifier": "private final", "type": "Path", "declarator": "relativePath", "var_name": "relativePath"}, {"original_string": "private final Path rfieldRelativePath;", "modifier": "private final", "type": "Path", "declarator": "rfieldRelativePath", "var_name": "rfieldRelativePath"}, {"original_string": "private final BinaryComparisonOperator operator;", "modifier": "private final", "type": "BinaryComparisonOperator", "declarator": "operator", "var_name": "operator"}, {"original_string": "private static final BinaryComparisonOperator CMP_LOOKUP[] = {\n        BinaryComparisonOperator._neq, // 000\n        BinaryComparisonOperator._gt, // 001\n        BinaryComparisonOperator._eq, // 010\n        BinaryComparisonOperator._gte, // 011\n        BinaryComparisonOperator._lt, // 100\n        BinaryComparisonOperator._neq, // 101\n        BinaryComparisonOperator._lte, // 110\n        BinaryComparisonOperator._neq // 111\n    };", "modifier": "private static final", "type": "BinaryComparisonOperator", "declarator": "CMP_LOOKUP[] = {\n        BinaryComparisonOperator._neq, // 000\n        BinaryComparisonOperator._gt, // 001\n        BinaryComparisonOperator._eq, // 010\n        BinaryComparisonOperator._gte, // 011\n        BinaryComparisonOperator._lt, // 100\n        BinaryComparisonOperator._neq, // 101\n        BinaryComparisonOperator._lte, // 110\n        BinaryComparisonOperator._neq // 111\n    }", "var_name": "CMP_LOOKUP"}], "methods": [{"identifier": "FieldComparisonEvaluator", "parameters": "(FieldComparisonExpression expr, FieldTreeNode context)", "modifiers": "public", "return": "", "signature": " FieldComparisonEvaluator(FieldComparisonExpression expr, FieldTreeNode context)", "full_signature": "public  FieldComparisonEvaluator(FieldComparisonExpression expr, FieldTreeNode context)", "class_method_signature": "FieldComparisonEvaluator.FieldComparisonEvaluator(FieldComparisonExpression expr, FieldTreeNode context)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(QueryEvaluationContext ctx)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluate(QueryEvaluationContext ctx)", "full_signature": "@Override public boolean evaluate(QueryEvaluationContext ctx)", "class_method_signature": "FieldComparisonEvaluator.evaluate(QueryEvaluationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "makeList", "parameters": "(Type t, JsonNode node)", "modifiers": "private static", "return": "List<Object>", "signature": "List<Object> makeList(Type t, JsonNode node)", "full_signature": "private static List<Object> makeList(Type t, JsonNode node)", "class_method_signature": "FieldComparisonEvaluator.makeList(Type t, JsonNode node)", "testcase": false, "constructor": false}, {"identifier": "cmpOp", "parameters": "(BinaryComparisonOperator result, BinaryComparisonOperator op)", "modifiers": "private static", "return": "boolean", "signature": "boolean cmpOp(BinaryComparisonOperator result, BinaryComparisonOperator op)", "full_signature": "private static boolean cmpOp(BinaryComparisonOperator result, BinaryComparisonOperator op)", "class_method_signature": "FieldComparisonEvaluator.cmpOp(BinaryComparisonOperator result, BinaryComparisonOperator op)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(int cmp, int result)", "modifiers": "private static", "return": "int", "signature": "int apply(int cmp, int result)", "full_signature": "private static int apply(int cmp, int result)", "class_method_signature": "FieldComparisonEvaluator.apply(int cmp, int result)", "testcase": false, "constructor": false}, {"identifier": "lvCompare", "parameters": "(Object value, List<Object> list, Type t)", "modifiers": "private static", "return": "BinaryComparisonOperator", "signature": "BinaryComparisonOperator lvCompare(Object value, List<Object> list, Type t)", "full_signature": "private static BinaryComparisonOperator lvCompare(Object value, List<Object> list, Type t)", "class_method_signature": "FieldComparisonEvaluator.lvCompare(Object value, List<Object> list, Type t)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/eval/FieldComparisonEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(QueryEvaluationContext ctx)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean evaluate(QueryEvaluationContext ctx) {\n        LOGGER.debug(\"evaluate {} {} {}\", relativePath, operator, rfieldRelativePath);\n        KeyValueCursor<Path, JsonNode> lcursor = ctx.getNodes(relativePath);\n        ctx.setResult(false);\n        if (lcursor != null) {\n            while (lcursor.hasNext() && !ctx.getResult()) {\n                lcursor.next();\n                JsonNode lvalueNode = lcursor.getCurrentValue();\n                Object ldocValue = null;\n                List<Object> ldocList = null;\n                if (lvalueNode != null) {\n                    if (fieldMd.getType() instanceof ArrayType) {\n                        ldocList = makeList(((ArrayField) fieldMd).getElement().getType(), lvalueNode);\n                    } else {\n                        ldocValue = fieldMd.getType().fromJson(lvalueNode);\n                    }\n                }\n                KeyValueCursor<Path, JsonNode> rcursor = ctx.getNodes(rfieldRelativePath);\n                if (rcursor != null) {\n                    while (rcursor.hasNext() && !ctx.getResult()) {\n                        rcursor.next();\n                        JsonNode rvalueNode = rcursor.getCurrentValue();\n                        Object rdocValue = null;\n                        List<Object> rdocList = null;\n                        if (rvalueNode != null) {\n                            if (rfieldMd.getType() instanceof ArrayType) {\n                                rdocList = makeList(((ArrayField) rfieldMd).getElement().getType(), rvalueNode);\n                            } else {\n                                rdocValue = rfieldMd.getType().fromJson(rvalueNode);\n                            }\n                        }\n                        LOGGER.debug(\" lvalue={} rvalue={}\", lvalueNode, rvalueNode);\n                        // Treat null (both value and list are null) as a value\n                        boolean leftIsValue = ldocValue != null || ldocList == null;\n                        boolean rightIsValue = rdocValue != null || rdocList == null;\n                        if (leftIsValue && rightIsValue) {\n                            int result = fieldMd.getType().compare(ldocValue, rdocValue);\n                            LOGGER.debug(\" result={}\", result);\n                            if (operator.apply(result)) {\n                                ctx.setResult(true);\n                            }\n                        } else if (!leftIsValue && !rightIsValue) {\n                            // Both fields are arrays. Compare each element\n                            Type type = ((ArrayField) fieldMd).getElement().getType();\n                            int ln = ldocList.size();\n                            int rn = rdocList.size();\n                            int cmp = 0;\n                            if (ln == rn) {\n                                for (int i = 0; i < ln; i++) {\n                                    cmp = apply(cmp, type.compare(ldocList.get(i), rdocList.get(i)));\n                                }\n                            } else {\n                                cmp = 0x07; // $ne\n                            }\n                            LOGGER.debug(\"Comparing arrays {} {} {}={}\", ldocList, operator, rdocList, cmp);\n                            if (cmpOp(CMP_LOOKUP[cmp], operator)) {\n                                ctx.setResult(true);\n                            }\n                        } else if (!leftIsValue) {\n                            // Left field is an array, right field is a value\n                            BinaryComparisonOperator resultOp = lvCompare(rdocValue, ldocList,\n                                    ((ArrayField) fieldMd).getElement().getType()).invert();\n                            LOGGER.debug(\"Comparing array with field {} {} {}={}\", ldocList, operator, rdocValue, resultOp);\n                            if (cmpOp(resultOp, operator)) {\n                                ctx.setResult(true);\n                            }\n                        } else {\n                            // left field is a value, right field is an array\n                            BinaryComparisonOperator resultOp = lvCompare(ldocValue, rdocList, fieldMd.getType());\n                            LOGGER.debug(\"Comparing field with array {} {} {}={}\", ldocValue, operator, rdocList, resultOp);\n                            if (cmpOp(resultOp, operator)) {\n                                ctx.setResult(true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return ctx.getResult();\n    }", "signature": "boolean evaluate(QueryEvaluationContext ctx)", "full_signature": "@Override public boolean evaluate(QueryEvaluationContext ctx)", "class_method_signature": "FieldComparisonEvaluator.evaluate(QueryEvaluationContext ctx)", "testcase": false, "constructor": false, "invocations": ["debug", "getNodes", "setResult", "hasNext", "getResult", "next", "getCurrentValue", "getType", "makeList", "getType", "getElement", "fromJson", "getType", "getNodes", "hasNext", "getResult", "next", "getCurrentValue", "getType", "makeList", "getType", "getElement", "fromJson", "getType", "debug", "compare", "getType", "debug", "apply", "setResult", "getType", "getElement", "size", "size", "apply", "compare", "get", "get", "debug", "cmpOp", "setResult", "invert", "lvCompare", "getType", "getElement", "debug", "cmpOp", "setResult", "lvCompare", "getType", "debug", "cmpOp", "setResult", "getResult"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}