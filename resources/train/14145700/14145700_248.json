{"test_class": {"identifier": "ArithTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Arith arith;", "modifier": "", "type": "Arith", "declarator": "arith", "var_name": "arith"}], "file": "metadata/src/test/java/com/redhat/lightblue/metadata/types/ArithTest.java"}, "test_case": {"identifier": "testPromoteBigIntegerAndDoubleResultsInBigDecimalType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPromoteBigIntegerAndDoubleResultsInBigDecimalType() {\n        Assert.assertEquals(BigDecimalType.TYPE, Arith.promote(BigIntegerType.TYPE, DoubleType.TYPE));\n    }", "signature": "void testPromoteBigIntegerAndDoubleResultsInBigDecimalType()", "full_signature": "@Test public void testPromoteBigIntegerAndDoubleResultsInBigDecimalType()", "class_method_signature": "ArithTest.testPromoteBigIntegerAndDoubleResultsInBigDecimalType()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "promote"]}, "focal_class": {"identifier": "Arith", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "add", "parameters": "(Object operand1,\n                             Object operand2,\n                             Type resultType)", "modifiers": "public static", "return": "Object", "signature": "Object add(Object operand1,\n                             Object operand2,\n                             Type resultType)", "full_signature": "public static Object add(Object operand1,\n                             Object operand2,\n                             Type resultType)", "class_method_signature": "Arith.add(Object operand1,\n                             Object operand2,\n                             Type resultType)", "testcase": false, "constructor": false}, {"identifier": "promote", "parameters": "(Type operand1,\n                               Type operand2)", "modifiers": "public static", "return": "Type", "signature": "Type promote(Type operand1,\n                               Type operand2)", "full_signature": "public static Type promote(Type operand1,\n                               Type operand2)", "class_method_signature": "Arith.promote(Type operand1,\n                               Type operand2)", "testcase": false, "constructor": false}, {"identifier": "arithType", "parameters": "(Type operand)", "modifiers": "private static", "return": "int", "signature": "int arithType(Type operand)", "full_signature": "private static int arithType(Type operand)", "class_method_signature": "Arith.arithType(Type operand)", "testcase": false, "constructor": false}, {"identifier": "arithType", "parameters": "(int type)", "modifiers": "private static", "return": "Type", "signature": "Type arithType(int type)", "full_signature": "private static Type arithType(int type)", "class_method_signature": "Arith.arithType(int type)", "testcase": false, "constructor": false}, {"identifier": "Arith", "parameters": "()", "modifiers": "private", "return": "", "signature": " Arith()", "full_signature": "private  Arith()", "class_method_signature": "Arith.Arith()", "testcase": false, "constructor": true}], "file": "metadata/src/main/java/com/redhat/lightblue/metadata/types/Arith.java"}, "focal_method": {"identifier": "promote", "parameters": "(Type operand1,\n                               Type operand2)", "modifiers": "public static", "return": "Type", "body": "public static Type promote(Type operand1,\n                               Type operand2) {\n        // For all cases except BigInteger-double operations, ordering\n        // the types and getting max determines the reslt type. For\n        // BigInteger-double operations, result is BigDecimal.\n        if ((operand1 instanceof BigIntegerType && operand2 instanceof DoubleType)\n                || (operand1 instanceof DoubleType && operand2 instanceof BigIntegerType)) {\n            return BigDecimalType.TYPE;\n        } else {\n            int o1 = arithType(operand1);\n            int o2 = arithType(operand2);\n            return arithType(Math.max(o1, o2));\n        }\n    }", "signature": "Type promote(Type operand1,\n                               Type operand2)", "full_signature": "public static Type promote(Type operand1,\n                               Type operand2)", "class_method_signature": "Arith.promote(Type operand1,\n                               Type operand2)", "testcase": false, "constructor": false, "invocations": ["arithType", "arithType", "arithType", "max"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}