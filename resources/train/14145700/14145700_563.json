{"test_class": {"identifier": "MinMaxCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Number number;", "modifier": "private final", "type": "Number", "declarator": "number", "var_name": "number"}], "file": "crud/src/test/java/com/redhat/lightblue/crud/validator/MinMaxCheckerTest.java"}, "test_case": {"identifier": "testCheckConstraint_MIN_Equal_Pass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckConstraint_MIN_Equal_Pass() {\n        ConstraintValidator validator = mock(ConstraintValidator.class);\n\n        MinMaxConstraint constraint = new MinMaxConstraint(MinMaxConstraint.MIN);\n        constraint.setValue(number);\n\n        JsonNode fieldValue = mock(JsonNode.class);\n        mockFieldValue(fieldValue, 2);\n\n        new MinMaxChecker().checkConstraint(validator, null, null, constraint, null, null, fieldValue);\n\n        verify(validator, never()).addDocError(any(Error.class));\n    }", "signature": "void testCheckConstraint_MIN_Equal_Pass()", "full_signature": "@Test public void testCheckConstraint_MIN_Equal_Pass()", "class_method_signature": "MinMaxCheckerTest.testCheckConstraint_MIN_Equal_Pass()", "testcase": true, "constructor": false, "invocations": ["mock", "setValue", "mock", "mockFieldValue", "checkConstraint", "addDocError", "verify", "never", "any"]}, "focal_class": {"identifier": "MinMaxChecker", "superclass": "", "interfaces": "implements FieldConstraintValueChecker", "fields": [], "methods": [{"identifier": "checkConstraint", "parameters": "(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "modifiers": "@Override public", "return": "void", "signature": "void checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "full_signature": "@Override public void checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "class_method_signature": "MinMaxChecker.checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "testcase": false, "constructor": false}, {"identifier": "cmp", "parameters": "(JsonNode node, Number value)", "modifiers": "private", "return": "int", "signature": "int cmp(JsonNode node, Number value)", "full_signature": "private int cmp(JsonNode node, Number value)", "class_method_signature": "MinMaxChecker.cmp(JsonNode node, Number value)", "testcase": false, "constructor": false}, {"identifier": "cmp", "parameters": "(long nodeValue, long fieldValue)", "modifiers": "private", "return": "int", "signature": "int cmp(long nodeValue, long fieldValue)", "full_signature": "private int cmp(long nodeValue, long fieldValue)", "class_method_signature": "MinMaxChecker.cmp(long nodeValue, long fieldValue)", "testcase": false, "constructor": false}, {"identifier": "cmp", "parameters": "(double nodeValue, double fieldValue)", "modifiers": "private", "return": "int", "signature": "int cmp(double nodeValue, double fieldValue)", "full_signature": "private int cmp(double nodeValue, double fieldValue)", "class_method_signature": "MinMaxChecker.cmp(double nodeValue, double fieldValue)", "testcase": false, "constructor": false}, {"identifier": "cmp", "parameters": "(BigInteger nodeValue, BigInteger fieldValue)", "modifiers": "private", "return": "int", "signature": "int cmp(BigInteger nodeValue, BigInteger fieldValue)", "full_signature": "private int cmp(BigInteger nodeValue, BigInteger fieldValue)", "class_method_signature": "MinMaxChecker.cmp(BigInteger nodeValue, BigInteger fieldValue)", "testcase": false, "constructor": false}, {"identifier": "cmp", "parameters": "(BigDecimal nodeValue, BigDecimal fieldValue)", "modifiers": "private", "return": "int", "signature": "int cmp(BigDecimal nodeValue, BigDecimal fieldValue)", "full_signature": "private int cmp(BigDecimal nodeValue, BigDecimal fieldValue)", "class_method_signature": "MinMaxChecker.cmp(BigDecimal nodeValue, BigDecimal fieldValue)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/crud/validator/MinMaxChecker.java"}, "focal_method": {"identifier": "checkConstraint", "parameters": "(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue) {\n        Number value = ((MinMaxConstraint) constraint).getValue();\n        String type = ((MinMaxConstraint) constraint).getType();\n        if (!(fieldValue instanceof NullNode)) {\n            int cmp = cmp(fieldValue, value);\n            // cmp==0: fieldValue=value\n            // cmp <0: fieldValue<value\n            // cmp >0: fieldValue>value\n            if (MinMaxConstraint.MIN.equals(type)) {\n                if (cmp < 0) {\n                    validator.addDocError(Error.get(CrudConstants.ERR_VALUE_TOO_SMALL, fieldValue.asText()));\n                }\n            } else if (cmp > 0) {\n                validator.addDocError(Error.get(CrudConstants.ERR_VALUE_TOO_LARGE, fieldValue.asText()));\n            }\n        }\n    }", "signature": "void checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "full_signature": "@Override public void checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "class_method_signature": "MinMaxChecker.checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                Path valuePath,\n                                JsonDoc doc,\n                                JsonNode fieldValue)", "testcase": false, "constructor": false, "invocations": ["getValue", "getType", "cmp", "equals", "addDocError", "get", "asText", "addDocError", "get", "asText"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}