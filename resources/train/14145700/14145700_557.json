{"test_class": {"identifier": "RequiredCheckerTest", "superclass": "", "interfaces": "", "fields": [], "file": "crud/src/test/java/com/redhat/lightblue/crud/validator/RequiredCheckerTest.java"}, "test_case": {"identifier": "testGetMissingFields_WithoutAnys_PathNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMissingFields_WithoutAnys_PathNotExist() {\n        Path path = mock(Path.class);\n        when(path.nAnys()).thenReturn(0);\n\n        JsonDoc doc = mock(JsonDoc.class);\n        when(doc.get(path)).thenReturn(null);\n\n        List<Path> results = RequiredChecker.getMissingFields(path, doc);\n\n        assertNotNull(results);\n        assertEquals(1, results.size());\n        assertEquals(path, results.get(0));\n    }", "signature": "void testGetMissingFields_WithoutAnys_PathNotExist()", "full_signature": "@Test public void testGetMissingFields_WithoutAnys_PathNotExist()", "class_method_signature": "RequiredCheckerTest.testGetMissingFields_WithoutAnys_PathNotExist()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "nAnys", "mock", "thenReturn", "when", "get", "getMissingFields", "assertNotNull", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "RequiredChecker", "superclass": "", "interfaces": "implements FieldConstraintDocChecker", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RequiredChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RequiredChecker.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "checkConstraint", "parameters": "(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                JsonDoc doc)", "modifiers": "@Override public", "return": "void", "signature": "void checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                JsonDoc doc)", "full_signature": "@Override public void checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                JsonDoc doc)", "class_method_signature": "RequiredChecker.checkConstraint(ConstraintValidator validator,\n                                FieldTreeNode fieldMetadata,\n                                Path fieldMetadataPath,\n                                FieldConstraint constraint,\n                                JsonDoc doc)", "testcase": false, "constructor": false}, {"identifier": "getMissingFields", "parameters": "(Path fieldMetadataPath,\n                                              JsonDoc doc)", "modifiers": "public static", "return": "List<Path>", "signature": "List<Path> getMissingFields(Path fieldMetadataPath,\n                                              JsonDoc doc)", "full_signature": "public static List<Path> getMissingFields(Path fieldMetadataPath,\n                                              JsonDoc doc)", "class_method_signature": "RequiredChecker.getMissingFields(Path fieldMetadataPath,\n                                              JsonDoc doc)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/crud/validator/RequiredChecker.java"}, "focal_method": {"identifier": "getMissingFields", "parameters": "(Path fieldMetadataPath,\n                                              JsonDoc doc)", "modifiers": "public static", "return": "List<Path>", "body": "public static List<Path> getMissingFields(Path fieldMetadataPath,\n                                              JsonDoc doc) {\n        LOGGER.debug(\"Checking {}\", fieldMetadataPath);\n        int nAnys = fieldMetadataPath.nAnys();\n        List<Path> errors = new ArrayList<>();\n        if (nAnys == 0) {\n            JsonNode fieldNode = doc.get(fieldMetadataPath);\n            if (fieldNode == null) {\n                // Field does not exist. If the parent object does not exist either, constraint is ok\n                if (fieldMetadataPath.numSegments() > 1) {\n                    JsonNode parent = doc.get(fieldMetadataPath.prefix(-1));\n                    if (parent == null || parent instanceof NullNode) {\n                        // Parent does not exist as well. Let it pass\n                        ;\n                    } else {\n                        errors.add(fieldMetadataPath);\n                    }\n                } else {\n                    errors.add(fieldMetadataPath);\n                }\n            } else if (fieldNode instanceof NullNode) {\n                errors.add(fieldMetadataPath);\n            }\n        } else {\n            // The required field is a member of an object that's an element of an array\n            // If the array element exists, then the member must exist in that object\n            Path parent = fieldMetadataPath.prefix(-1);\n            String fieldName = fieldMetadataPath.tail(0);\n            LOGGER.debug(\"Checking {} under {}\", fieldName, parent);\n            KeyValueCursor<Path, JsonNode> cursor = doc.getAllNodes(parent);\n            while (cursor.hasNext()) {\n                cursor.next();\n                JsonNode parentObject = cursor.getCurrentValue();\n                if (!(parentObject instanceof NullNode)) {\n                    LOGGER.debug(\"Checking {}\", cursor.getCurrentKey());\n                    JsonNode fieldNode = parentObject.get(fieldName);\n                    if (fieldNode == null || fieldNode instanceof NullNode) {\n                        errors.add(new Path(cursor.getCurrentKey() + \".\" + fieldName));\n                    }\n                }\n            }\n        }\n        LOGGER.debug(\"Errors:{}\", errors);\n        return errors;\n    }", "signature": "List<Path> getMissingFields(Path fieldMetadataPath,\n                                              JsonDoc doc)", "full_signature": "public static List<Path> getMissingFields(Path fieldMetadataPath,\n                                              JsonDoc doc)", "class_method_signature": "RequiredChecker.getMissingFields(Path fieldMetadataPath,\n                                              JsonDoc doc)", "testcase": false, "constructor": false, "invocations": ["debug", "nAnys", "get", "numSegments", "get", "prefix", "add", "add", "add", "prefix", "tail", "debug", "getAllNodes", "hasNext", "next", "getCurrentValue", "debug", "getCurrentKey", "get", "add", "getCurrentKey", "debug"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}