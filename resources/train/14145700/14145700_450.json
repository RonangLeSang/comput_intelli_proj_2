{"test_class": {"identifier": "ArrayAddExpressionEvaluatorTest", "superclass": "extends AbstractJsonNodeTest", "interfaces": "", "fields": [{"original_string": "private EntityMetadata md;", "modifier": "private", "type": "EntityMetadata", "declarator": "md", "var_name": "md"}, {"original_string": "private JsonDoc doc;", "modifier": "private", "type": "JsonDoc", "declarator": "doc", "var_name": "doc"}], "file": "crud/src/test/java/com/redhat/lightblue/eval/ArrayAddExpressionEvaluatorTest.java"}, "test_case": {"identifier": "string_array_insert_with_1_", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void string_array_insert_with_1_$parent_relative_path() throws Exception {\n        String[] expectedValues = {\"four\", \"three\", \"five\", \"six\", \"value2\", \"two\", \"one\"};\n        UpdateExpression expr = EvalTestContext.updateExpressionFromJson(\"{ '$insert' : { 'field6.nf6.$parent.nf8.2' : [ 'five','six',{'$valueof':'field2' }] } }\");\n        Updater updater = Updater.getInstance(JSON_NODE_FACTORY, md, expr);\n\n        updater.update(doc, md.getFieldTreeRoot(), new Path());\n\n        Assert.assertTrue(arrayNodesHaveSameValues(stringArrayNode(expectedValues), doc.get(new Path(\"field6.nf8\"))));\n    }", "signature": "void string_array_insert_with_1_()", "full_signature": "@Test public void string_array_insert_with_1_()", "class_method_signature": "ArrayAddExpressionEvaluatorTest.string_array_insert_with_1_()", "testcase": true, "constructor": false, "invocations": ["updateExpressionFromJson", "getInstance", "update", "getFieldTreeRoot", "assertTrue", "arrayNodesHaveSameValues", "stringArrayNode", "get"]}, "focal_class": {"identifier": "ArrayAddExpressionEvaluator", "superclass": "extends Updater", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ArrayAddExpressionEvaluator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ArrayAddExpressionEvaluator.class)", "var_name": "LOGGER"}, {"original_string": "private final Path arrayField;", "modifier": "private final", "type": "Path", "declarator": "arrayField", "var_name": "arrayField"}, {"original_string": "private final Path arraySizeField;", "modifier": "private final", "type": "Path", "declarator": "arraySizeField", "var_name": "arraySizeField"}, {"original_string": "private final Path absArrayField;", "modifier": "private final", "type": "Path", "declarator": "absArrayField", "var_name": "absArrayField"}, {"original_string": "private final int insertionIndex;", "modifier": "private final", "type": "int", "declarator": "insertionIndex", "var_name": "insertionIndex"}, {"original_string": "private final ArrayField fieldMd;", "modifier": "private final", "type": "ArrayField", "declarator": "fieldMd", "var_name": "fieldMd"}, {"original_string": "private final List<RValueData> values;", "modifier": "private final", "type": "List<RValueData>", "declarator": "values", "var_name": "values"}, {"original_string": "private final JsonNodeFactory factory;", "modifier": "private final", "type": "JsonNodeFactory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "ArrayAddExpressionEvaluator", "parameters": "(JsonNodeFactory factory, FieldTreeNode context, ArrayAddExpression expr)", "modifiers": "public", "return": "", "signature": " ArrayAddExpressionEvaluator(JsonNodeFactory factory, FieldTreeNode context, ArrayAddExpression expr)", "full_signature": "public  ArrayAddExpressionEvaluator(JsonNodeFactory factory, FieldTreeNode context, ArrayAddExpression expr)", "class_method_signature": "ArrayAddExpressionEvaluator.ArrayAddExpressionEvaluator(JsonNodeFactory factory, FieldTreeNode context, ArrayAddExpression expr)", "testcase": false, "constructor": true}, {"identifier": "initializeArrayField", "parameters": "(FieldTreeNode context, ArrayAddExpression expr)", "modifiers": "private", "return": "void", "signature": "void initializeArrayField(FieldTreeNode context, ArrayAddExpression expr)", "full_signature": "private void initializeArrayField(FieldTreeNode context, ArrayAddExpression expr)", "class_method_signature": "ArrayAddExpressionEvaluator.initializeArrayField(FieldTreeNode context, ArrayAddExpression expr)", "testcase": false, "constructor": false}, {"identifier": "validateArrayElement", "parameters": "(ArrayElement element, FieldTreeNode refMd, RValueExpression rvalue, Path refPath)", "modifiers": "private", "return": "void", "signature": "void validateArrayElement(ArrayElement element, FieldTreeNode refMd, RValueExpression rvalue, Path refPath)", "full_signature": "private void validateArrayElement(ArrayElement element, FieldTreeNode refMd, RValueExpression rvalue, Path refPath)", "class_method_signature": "ArrayAddExpressionEvaluator.validateArrayElement(ArrayElement element, FieldTreeNode refMd, RValueExpression rvalue, Path refPath)", "testcase": false, "constructor": false}, {"identifier": "getUpdateFields", "parameters": "(Set<Path> fields)", "modifiers": "@Override public", "return": "void", "signature": "void getUpdateFields(Set<Path> fields)", "full_signature": "@Override public void getUpdateFields(Set<Path> fields)", "class_method_signature": "ArrayAddExpressionEvaluator.getUpdateFields(Set<Path> fields)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean update(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "full_signature": "@Override public boolean update(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "class_method_signature": "ArrayAddExpressionEvaluator.update(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/eval/ArrayAddExpressionEvaluator.java"}, "focal_method": {"identifier": "update", "parameters": "(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean update(JsonDoc doc, FieldTreeNode contextMd, Path contextPath) {\n        boolean ret = false;\n        Path absPath = new Path(contextPath, arrayField);\n        JsonNode node = doc.get(absPath);\n        int insertTo = insertionIndex;\n        if (node == null || node instanceof NullNode) {\n            doc.modify(absPath, node = factory.arrayNode(), true);\n        }\n        if (node instanceof ArrayNode) {\n            ArrayNode arrayNode = (ArrayNode) node;\n            for (RValueData rvalueData : values) {\n                LOGGER.debug(\"add element to {} rvalue:{}\", absPath, rvalueData);\n                Object newValue = null;\n                Type newValueType = null;\n                JsonNode newValueNode = null;\n                if (rvalueData.refPath != null) {\n                    JsonNode refNode = doc.get(new Path(contextPath, rvalueData.refPath));\n                    if (refNode != null) {\n                        newValueNode = refNode.deepCopy();\n                        newValue = rvalueData.refType.fromJson(newValueNode);\n                        newValueType = rvalueData.refType;\n                    }\n                } else if (rvalueData.value != null) {\n                    newValue = rvalueData.value.getValue();\n                    newValueNode = newValue instanceof JsonNode ? (JsonNode) newValue : fieldMd.getElement().getType().toJson(factory, newValue);\n                    newValueType = fieldMd.getElement().getType();\n                } else if (rvalueData.rvalueType == RValueExpression.RValueType._null) {\n                    newValueNode = factory.nullNode();\n                }\n                LOGGER.debug(\"newValueType:{}, newValue:{}, newValueNode:{} \", newValueType, newValue, newValueNode);\n\n                if (insertTo >= 0) {\n                    // If we're inserting, make sure we have that many elements\n                    while (arrayNode.size() < insertTo) {\n                        arrayNode.addNull();\n                    }\n\n                    if (arrayNode.size() > insertTo) {\n                        arrayNode.insert(insertTo, newValueNode);\n                    } else {\n                        arrayNode.add(newValueNode);\n                    }\n                    insertTo++;\n                } else {\n                    arrayNode.add(newValueNode);\n                }\n                ret = true;\n            }\n            if (ret) {\n                // We have to rewrite the array indexes in arraySizeField using\n                // the context path\n                MutablePath p = new MutablePath(arraySizeField);\n                p.rewriteIndexes(absPath);\n                LOGGER.debug(\"Setting {} = {}\", p, arrayNode.size());\n                doc.modify(p, factory.numberNode(arrayNode.size()), false);\n            }\n        }\n        return ret;\n    }", "signature": "boolean update(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "full_signature": "@Override public boolean update(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "class_method_signature": "ArrayAddExpressionEvaluator.update(JsonDoc doc, FieldTreeNode contextMd, Path contextPath)", "testcase": false, "constructor": false, "invocations": ["get", "modify", "arrayNode", "debug", "get", "deepCopy", "fromJson", "getValue", "toJson", "getType", "getElement", "getType", "getElement", "nullNode", "debug", "size", "addNull", "size", "insert", "add", "add", "rewriteIndexes", "debug", "size", "modify", "numberNode", "size"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}