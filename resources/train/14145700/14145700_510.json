{"test_class": {"identifier": "RegexEvaluatorTest", "superclass": "extends AbstractJsonNodeTest", "interfaces": "", "fields": [{"original_string": "private EntityMetadata md;", "modifier": "private", "type": "EntityMetadata", "declarator": "md", "var_name": "md"}], "file": "crud/src/test/java/com/redhat/lightblue/eval/RegexEvaluatorTest.java"}, "test_case": {"identifier": "regex_on_field_partial_string_case_insensitive_match_works", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void regex_on_field_partial_string_case_insensitive_match_works() throws Exception {\n        QueryExpression q = EvalTestContext.queryExpressionFromJson(\"{'field':'field1','regex':'Val.*','caseInsensitive':1}\");\n        QueryEvaluator qe = QueryEvaluator.getInstance(q, md);\n        QueryEvaluationContext ctx = qe.evaluate(jsonDoc);\n        ctx = qe.evaluate(jsonDoc);\n        Assert.assertTrue(ctx.getResult());\n    }", "signature": "void regex_on_field_partial_string_case_insensitive_match_works()", "full_signature": "@Test public void regex_on_field_partial_string_case_insensitive_match_works()", "class_method_signature": "RegexEvaluatorTest.regex_on_field_partial_string_case_insensitive_match_works()", "testcase": true, "constructor": false, "invocations": ["queryExpressionFromJson", "getInstance", "evaluate", "evaluate", "assertTrue", "getResult"]}, "focal_class": {"identifier": "RegexEvaluator", "superclass": "extends QueryEvaluator", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RegexEvaluator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RegexEvaluator.class)", "var_name": "LOGGER"}, {"original_string": "private final FieldTreeNode fieldMd;", "modifier": "private final", "type": "FieldTreeNode", "declarator": "fieldMd", "var_name": "fieldMd"}, {"original_string": "private final Pattern regex;", "modifier": "private final", "type": "Pattern", "declarator": "regex", "var_name": "regex"}, {"original_string": "private final Path relativePath;", "modifier": "private final", "type": "Path", "declarator": "relativePath", "var_name": "relativePath"}], "methods": [{"identifier": "RegexEvaluator", "parameters": "(RegexMatchExpression expr, FieldTreeNode context)", "modifiers": "public", "return": "", "signature": " RegexEvaluator(RegexMatchExpression expr, FieldTreeNode context)", "full_signature": "public  RegexEvaluator(RegexMatchExpression expr, FieldTreeNode context)", "class_method_signature": "RegexEvaluator.RegexEvaluator(RegexMatchExpression expr, FieldTreeNode context)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(QueryEvaluationContext ctx)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluate(QueryEvaluationContext ctx)", "full_signature": "@Override public boolean evaluate(QueryEvaluationContext ctx)", "class_method_signature": "RegexEvaluator.evaluate(QueryEvaluationContext ctx)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/eval/RegexEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(QueryEvaluationContext ctx)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean evaluate(QueryEvaluationContext ctx) {\n        LOGGER.debug(\"evaluate {} {}\", relativePath, regex);\n        KeyValueCursor<Path, JsonNode> cursor = ctx.getNodes(relativePath);\n        boolean ret = false;\n        while (cursor.hasNext()) {\n            cursor.next();\n            JsonNode valueNode = cursor.getCurrentValue();\n            Object docValue;\n            if (valueNode != null) {\n                docValue = fieldMd.getType().fromJson(valueNode);\n            } else {\n                docValue = null;\n            }\n            LOGGER.debug(\" value={}\", valueNode);\n            if (docValue != null) {\n                ret = regex.matcher(docValue.toString()).matches();\n            }\n            if (ret) {\n                break;\n            }\n        }\n        ctx.setResult(ret);\n        return ret;\n    }", "signature": "boolean evaluate(QueryEvaluationContext ctx)", "full_signature": "@Override public boolean evaluate(QueryEvaluationContext ctx)", "class_method_signature": "RegexEvaluator.evaluate(QueryEvaluationContext ctx)", "testcase": false, "constructor": false, "invocations": ["debug", "getNodes", "hasNext", "next", "getCurrentValue", "fromJson", "getType", "debug", "matches", "matcher", "toString", "setResult"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}