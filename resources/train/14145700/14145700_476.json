{"test_class": {"identifier": "ArrayContainsEvaluatorTest", "superclass": "extends AbstractJsonNodeTest", "interfaces": "", "fields": [{"original_string": "private EntityMetadata md;", "modifier": "private", "type": "EntityMetadata", "declarator": "md", "var_name": "md"}], "file": "crud/src/test/java/com/redhat/lightblue/eval/ArrayContainsEvaluatorTest.java"}, "test_case": {"identifier": "contains_none_returns_false_when_expression_values_in_array", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void contains_none_returns_false_when_expression_values_in_array() throws Exception {\n        QueryExpression expr = EvalTestContext.queryExpressionFromJson(\"{'array':'field6.nf5', 'contains':'$none', 'values':[5,null,15,25]}\");\n        QueryEvaluator eval = QueryEvaluator.getInstance(expr, md);\n\n        QueryEvaluationContext context = eval.evaluate(jsonDoc);\n\n        Assert.assertFalse(context.getResult());\n    }", "signature": "void contains_none_returns_false_when_expression_values_in_array()", "full_signature": "@Test public void contains_none_returns_false_when_expression_values_in_array()", "class_method_signature": "ArrayContainsEvaluatorTest.contains_none_returns_false_when_expression_values_in_array()", "testcase": true, "constructor": false, "invocations": ["queryExpressionFromJson", "getInstance", "evaluate", "assertFalse", "getResult"]}, "focal_class": {"identifier": "ArrayContainsEvaluator", "superclass": "extends QueryEvaluator", "interfaces": "", "fields": [{"original_string": "private final ArrayContainsExpression expr;", "modifier": "private final", "type": "ArrayContainsExpression", "declarator": "expr", "var_name": "expr"}, {"original_string": "private final SimpleArrayElement elem;", "modifier": "private final", "type": "SimpleArrayElement", "declarator": "elem", "var_name": "elem"}], "methods": [{"identifier": "ArrayContainsEvaluator", "parameters": "(ArrayContainsExpression expr, FieldTreeNode context)", "modifiers": "public", "return": "", "signature": " ArrayContainsEvaluator(ArrayContainsExpression expr, FieldTreeNode context)", "full_signature": "public  ArrayContainsEvaluator(ArrayContainsExpression expr, FieldTreeNode context)", "class_method_signature": "ArrayContainsEvaluator.ArrayContainsEvaluator(ArrayContainsExpression expr, FieldTreeNode context)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(QueryEvaluationContext ctx)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluate(QueryEvaluationContext ctx)", "full_signature": "@Override public boolean evaluate(QueryEvaluationContext ctx)", "class_method_signature": "ArrayContainsEvaluator.evaluate(QueryEvaluationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "isValueInNode", "parameters": "(JsonNode valueNode, Object value, Type type)", "modifiers": "private", "return": "boolean", "signature": "boolean isValueInNode(JsonNode valueNode, Object value, Type type)", "full_signature": "private boolean isValueInNode(JsonNode valueNode, Object value, Type type)", "class_method_signature": "ArrayContainsEvaluator.isValueInNode(JsonNode valueNode, Object value, Type type)", "testcase": false, "constructor": false}, {"identifier": "evaluateContainsOperator", "parameters": "(ContainsOperator op, int numElementsContained, List<Value> values)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateContainsOperator(ContainsOperator op, int numElementsContained, List<Value> values)", "full_signature": "private boolean evaluateContainsOperator(ContainsOperator op, int numElementsContained, List<Value> values)", "class_method_signature": "ArrayContainsEvaluator.evaluateContainsOperator(ContainsOperator op, int numElementsContained, List<Value> values)", "testcase": false, "constructor": false}], "file": "crud/src/main/java/com/redhat/lightblue/eval/ArrayContainsEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(QueryEvaluationContext ctx)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean evaluate(QueryEvaluationContext ctx) {\n        boolean ret = false;\n        JsonNode node = ctx.getNode(expr.getArray());\n        if (node instanceof ArrayNode) {\n            ArrayNode array = (ArrayNode) node;\n            List<Value> values = expr.getValues();\n            ContainsOperator op = expr.getOp();\n            Type t = elem.getType();\n            int numElementsContained = 0;\n            for (Iterator<JsonNode> itr = array.elements(); itr.hasNext();) {\n                JsonNode valueNode = itr.next();\n                for (Value value : values) {\n                    Object v = value.getValue();\n                    if (isValueInNode(valueNode, v, t)) {\n                        numElementsContained++;\n                        break;\n                    }\n                }\n            }\n            ret = evaluateContainsOperator(op, numElementsContained, values);\n        }\n        ctx.setResult(ret);\n        return ret;\n    }", "signature": "boolean evaluate(QueryEvaluationContext ctx)", "full_signature": "@Override public boolean evaluate(QueryEvaluationContext ctx)", "class_method_signature": "ArrayContainsEvaluator.evaluate(QueryEvaluationContext ctx)", "testcase": false, "constructor": false, "invocations": ["getNode", "getArray", "getValues", "getOp", "getType", "elements", "hasNext", "next", "getValue", "isValueInNode", "evaluateContainsOperator", "setResult"]}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}