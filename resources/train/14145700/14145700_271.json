{"test_class": {"identifier": "DateTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Type dateType;", "modifier": "", "type": "Type", "declarator": "dateType", "var_name": "dateType"}], "file": "metadata/src/test/java/com/redhat/lightblue/metadata/types/DateTypeTest.java"}, "test_case": {"identifier": "testEqualsTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualsTrue() {\n        assertTrue(dateType.equals(DateType.TYPE));\n    }", "signature": "void testEqualsTrue()", "full_signature": "@Test public void testEqualsTrue()", "class_method_signature": "DateTypeTest.testEqualsTrue()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals"]}, "focal_class": {"identifier": "DateType", "superclass": "", "interfaces": "implements Type, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1l;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1l", "var_name": "serialVersionUID"}, {"original_string": "@Deprecated\n    public static final String DATE_FORMAT_STR = Constants.DATE_FORMAT_STR;", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "DATE_FORMAT_STR = Constants.DATE_FORMAT_STR", "var_name": "DATE_FORMAT_STR"}, {"original_string": "public static final Type TYPE = new DateType();", "modifier": "public static final", "type": "Type", "declarator": "TYPE = new DateType()", "var_name": "TYPE"}, {"original_string": "public static final String NAME = \"date\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"date\"", "var_name": "NAME"}], "methods": [{"identifier": "getDateFormat", "parameters": "()", "modifiers": "@Deprecated public static", "return": "DateFormat", "signature": "DateFormat getDateFormat()", "full_signature": "@Deprecated public static DateFormat getDateFormat()", "class_method_signature": "DateType.getDateFormat()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "DateType.getName()", "testcase": false, "constructor": false}, {"identifier": "supportsEq", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsEq()", "full_signature": "@Override public boolean supportsEq()", "class_method_signature": "DateType.supportsEq()", "testcase": false, "constructor": false}, {"identifier": "supportsOrdering", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOrdering()", "full_signature": "@Override public boolean supportsOrdering()", "class_method_signature": "DateType.supportsOrdering()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(JsonNodeFactory factory, Object obj)", "modifiers": "@Override public", "return": "JsonNode", "signature": "JsonNode toJson(JsonNodeFactory factory, Object obj)", "full_signature": "@Override public JsonNode toJson(JsonNodeFactory factory, Object obj)", "class_method_signature": "DateType.toJson(JsonNodeFactory factory, Object obj)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(JsonNode node)", "modifiers": "@Override public", "return": "Object", "signature": "Object fromJson(JsonNode node)", "full_signature": "@Override public Object fromJson(JsonNode node)", "class_method_signature": "DateType.fromJson(JsonNode node)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "Object", "signature": "Object cast(Object obj)", "full_signature": "@Override public Object cast(Object obj)", "class_method_signature": "DateType.cast(Object obj)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object v1, Object v2)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) @Override public", "return": "int", "signature": "int compare(Object v1, Object v2)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) @Override public int compare(Object v1, Object v2)", "class_method_signature": "DateType.compare(Object v1, Object v2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DateType.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DateType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DateType.toString()", "testcase": false, "constructor": false}, {"identifier": "DateType", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateType()", "full_signature": "private  DateType()", "class_method_signature": "DateType.DateType()", "testcase": false, "constructor": true}], "file": "metadata/src/main/java/com/redhat/lightblue/metadata/types/DateType.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        return obj instanceof DateType;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DateType.equals(Object obj)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14145700, "url": "https://github.com/lightblue-platform/lightblue-core", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 9487, "license": "licensed"}}