{"test_class": {"identifier": "HttpDownloadContinuationMarkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STUB_ETAG = \"abc\";", "modifier": "private static final", "type": "String", "declarator": "STUB_ETAG = \"abc\"", "var_name": "STUB_ETAG"}, {"original_string": "private static final UnboundedRequest STUB_UNBOUNDED_REQUEST_RANGE = new UnboundedRequest(0);", "modifier": "private static final", "type": "UnboundedRequest", "declarator": "STUB_UNBOUNDED_REQUEST_RANGE = new UnboundedRequest(0)", "var_name": "STUB_UNBOUNDED_REQUEST_RANGE"}, {"original_string": "private static final BoundedRequest STUB_BOUNDED_REQUEST_RANGE = new BoundedRequest(0, 3);", "modifier": "private static final", "type": "BoundedRequest", "declarator": "STUB_BOUNDED_REQUEST_RANGE = new BoundedRequest(0, 3)", "var_name": "STUB_BOUNDED_REQUEST_RANGE"}, {"original_string": "private static final Response STUB_CONTENT_RANGE = new Response(0, 3, 4L);", "modifier": "private static final", "type": "Response", "declarator": "STUB_CONTENT_RANGE = new Response(0, 3, 4L)", "var_name": "STUB_CONTENT_RANGE"}], "file": "java-manta-client-unshaded/src/test/java/com/joyent/manta/http/HttpDownloadContinuationMarkerTest.java"}, "test_case": {"identifier": "throwsWhenResponseHasIncorrectResponseCodeForPlainRequest", "parameters": "()", "modifiers": "@Test(expectedExceptions = ProtocolException.class) public", "return": "void", "body": "@Test(expectedExceptions = ProtocolException.class)\n    public void throwsWhenResponseHasIncorrectResponseCodeForPlainRequest() throws Exception {\n        HttpDownloadContinuationMarker.validateInitialExchange(ImmutablePair.of(STUB_ETAG, null),\n                                                               SC_PARTIAL_CONTENT,\n                                                               ImmutablePair.of(STUB_ETAG, STUB_CONTENT_RANGE));\n    }", "signature": "void throwsWhenResponseHasIncorrectResponseCodeForPlainRequest()", "full_signature": "@Test(expectedExceptions = ProtocolException.class) public void throwsWhenResponseHasIncorrectResponseCodeForPlainRequest()", "class_method_signature": "HttpDownloadContinuationMarkerTest.throwsWhenResponseHasIncorrectResponseCodeForPlainRequest()", "testcase": true, "constructor": false, "invocations": ["validateInitialExchange", "of", "of"]}, "focal_class": {"identifier": "HttpDownloadContinuationMarker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String etag;", "modifier": "private final", "type": "String", "declarator": "etag", "var_name": "etag"}, {"original_string": "private final long originalRangeStart;", "modifier": "private final", "type": "long", "declarator": "originalRangeStart", "var_name": "originalRangeStart"}, {"original_string": "private final long totalRangeSize;", "modifier": "private final", "type": "long", "declarator": "totalRangeSize", "var_name": "totalRangeSize"}, {"original_string": "private BoundedRequest currentRange;", "modifier": "private", "type": "BoundedRequest", "declarator": "currentRange", "var_name": "currentRange"}], "methods": [{"identifier": "HttpDownloadContinuationMarker", "parameters": "(final String etag,\n                                   final Response initialContentRange)", "modifiers": "", "return": "", "signature": " HttpDownloadContinuationMarker(final String etag,\n                                   final Response initialContentRange)", "full_signature": "  HttpDownloadContinuationMarker(final String etag,\n                                   final Response initialContentRange)", "class_method_signature": "HttpDownloadContinuationMarker.HttpDownloadContinuationMarker(final String etag,\n                                   final Response initialContentRange)", "testcase": false, "constructor": true}, {"identifier": "getEtag", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getEtag()", "full_signature": " String getEtag()", "class_method_signature": "HttpDownloadContinuationMarker.getEtag()", "testcase": false, "constructor": false}, {"identifier": "getCurrentRange", "parameters": "()", "modifiers": "", "return": "BoundedRequest", "signature": "BoundedRequest getCurrentRange()", "full_signature": " BoundedRequest getCurrentRange()", "class_method_signature": "HttpDownloadContinuationMarker.getCurrentRange()", "testcase": false, "constructor": false}, {"identifier": "getTotalRangeSize", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getTotalRangeSize()", "full_signature": " long getTotalRangeSize()", "class_method_signature": "HttpDownloadContinuationMarker.getTotalRangeSize()", "testcase": false, "constructor": false}, {"identifier": "updateRangeStart", "parameters": "(final long totalBytesRead)", "modifiers": "", "return": "void", "signature": "void updateRangeStart(final long totalBytesRead)", "full_signature": " void updateRangeStart(final long totalBytesRead)", "class_method_signature": "HttpDownloadContinuationMarker.updateRangeStart(final long totalBytesRead)", "testcase": false, "constructor": false}, {"identifier": "validateResponseRange", "parameters": "(final Response responseRange)", "modifiers": "", "return": "void", "signature": "void validateResponseRange(final Response responseRange)", "full_signature": " void validateResponseRange(final Response responseRange)", "class_method_signature": "HttpDownloadContinuationMarker.validateResponseRange(final Response responseRange)", "testcase": false, "constructor": false}, {"identifier": "validateInitialExchange", "parameters": "(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "modifiers": "static", "return": "HttpDownloadContinuationMarker", "signature": "HttpDownloadContinuationMarker validateInitialExchange(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "full_signature": "static HttpDownloadContinuationMarker validateInitialExchange(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "class_method_signature": "HttpDownloadContinuationMarker.validateInitialExchange(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpDownloadContinuationMarker.toString()", "testcase": false, "constructor": false}], "file": "java-manta-client-unshaded/src/main/java/com/joyent/manta/http/HttpDownloadContinuationMarker.java"}, "focal_method": {"identifier": "validateInitialExchange", "parameters": "(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "modifiers": "static", "return": "HttpDownloadContinuationMarker", "body": "static HttpDownloadContinuationMarker validateInitialExchange(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)\n            throws ProtocolException {\n\n        // there was an if-match header and the response etag does not match\n        if (requestHints.getLeft() != null && !requestHints.getLeft().equals(responseFingerprint.getLeft())) {\n            throw new ProtocolException(\n                    String.format(\n                            \"ETag does not match If-Match: If-Match [%s], ETag [%s]\",\n                            requestHints.getLeft(),\n                            responseFingerprint.getLeft()));\n\n        }\n\n        final boolean rangeRequest = requestHints.getRight() != null;\n\n        // there was a request range and an invalid response range (or none) was returned\n        // Note: we should use the more complete range (the response range) to invoke match so as many values are\n        // compared as possible\n        if (rangeRequest && !requestHints.getRight().matches(responseFingerprint.getRight())) {\n            throw new ProtocolException(\n                    String.format(\n                            \"Content-Range does not match Request range: Range [%s], Content-Range [%s]\",\n                            requestHints.getRight(),\n                            responseFingerprint.getRight()));\n        }\n\n        // if there was a request range the response code should be 206\n        if (rangeRequest && responseCode != SC_PARTIAL_CONTENT) {\n            throw new ProtocolException(\n                    String.format(\n                            \"Unexpected response code for range request: expected [%d], got [%d]\",\n                            SC_PARTIAL_CONTENT,\n                            responseCode));\n        }\n\n        // if there was no request range the response code should be 200\n        if (!rangeRequest && responseCode != SC_OK) {\n            throw new ProtocolException(\n                    String.format(\n                            \"Unexpected response code for non-range request: expected [%d], got [%d]\",\n                            SC_OK,\n                            responseCode));\n\n        }\n\n        return new HttpDownloadContinuationMarker(responseFingerprint.getLeft(), responseFingerprint.getRight());\n    }", "signature": "HttpDownloadContinuationMarker validateInitialExchange(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "full_signature": "static HttpDownloadContinuationMarker validateInitialExchange(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "class_method_signature": "HttpDownloadContinuationMarker.validateInitialExchange(final Pair<String, Request> requestHints,\n                                                                  final int responseCode,\n                                                                  final Pair<String, Response> responseFingerprint)", "testcase": false, "constructor": false, "invocations": ["getLeft", "equals", "getLeft", "getLeft", "format", "getLeft", "getLeft", "getRight", "matches", "getRight", "getRight", "format", "getRight", "getRight", "format", "format", "getLeft", "getRight"]}, "repository": {"repo_id": 7263059, "url": "https://github.com/joyent/java-manta", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 16, "size": 20253, "license": "licensed"}}