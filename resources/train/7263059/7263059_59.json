{"test_class": {"identifier": "EncryptionTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "java-manta-client-unshaded/src/test/java/com/joyent/manta/client/crypto/EncryptionTypeTest.java"}, "test_case": {"identifier": "noSeparatorEncryptionTypeWontValidate", "parameters": "()", "modifiers": "@Test(expectedExceptions = MantaEncryptionException.class) public", "return": "void", "body": "@Test(expectedExceptions = MantaEncryptionException.class)\n    public void noSeparatorEncryptionTypeWontValidate() {\n        String unsupported = \"foo2\";\n        EncryptionType.validateEncryptionTypeIsSupported(unsupported);\n    }", "signature": "void noSeparatorEncryptionTypeWontValidate()", "full_signature": "@Test(expectedExceptions = MantaEncryptionException.class) public void noSeparatorEncryptionTypeWontValidate()", "class_method_signature": "EncryptionTypeTest.noSeparatorEncryptionTypeWontValidate()", "testcase": true, "constructor": false, "invocations": ["validateEncryptionTypeIsSupported"]}, "focal_class": {"identifier": "EncryptionType", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final EncryptionType CLIENT = new EncryptionType(\n            \"client\",\n            CLIENT_SIDE_ENCRYPTION_MIN_VERSION,\n            CLIENT_SIDE_ENCRYPTION_MAX_VERSION);", "modifier": "public static final", "type": "EncryptionType", "declarator": "CLIENT = new EncryptionType(\n            \"client\",\n            CLIENT_SIDE_ENCRYPTION_MIN_VERSION,\n            CLIENT_SIDE_ENCRYPTION_MAX_VERSION)", "var_name": "CLIENT"}, {"original_string": "private static final Map<String, EncryptionType> SUPPORTED_ENCRYPTION_TYPES =\n            Collections.singletonMap(CLIENT.name, CLIENT);", "modifier": "private static final", "type": "Map<String, EncryptionType>", "declarator": "SUPPORTED_ENCRYPTION_TYPES =\n            Collections.singletonMap(CLIENT.name, CLIENT)", "var_name": "SUPPORTED_ENCRYPTION_TYPES"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final int minVersionSupported;", "modifier": "private final", "type": "int", "declarator": "minVersionSupported", "var_name": "minVersionSupported"}, {"original_string": "private final int maxVersionSupported;", "modifier": "private final", "type": "int", "declarator": "maxVersionSupported", "var_name": "maxVersionSupported"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "EncryptionType", "parameters": "(final String name,\n                           final int minVersionSupported,\n                           final int maxVersionSupported)", "modifiers": "private", "return": "", "signature": " EncryptionType(final String name,\n                           final int minVersionSupported,\n                           final int maxVersionSupported)", "full_signature": "private  EncryptionType(final String name,\n                           final int minVersionSupported,\n                           final int maxVersionSupported)", "class_method_signature": "EncryptionType.EncryptionType(final String name,\n                           final int minVersionSupported,\n                           final int maxVersionSupported)", "testcase": false, "constructor": true}, {"identifier": "validateEncryptionTypeIsSupported", "parameters": "(final String encryptionType)", "modifiers": "@SuppressWarnings({\"Duplicates\"}) public static", "return": "void", "signature": "void validateEncryptionTypeIsSupported(final String encryptionType)", "full_signature": "@SuppressWarnings({\"Duplicates\"}) public static void validateEncryptionTypeIsSupported(final String encryptionType)", "class_method_signature": "EncryptionType.validateEncryptionTypeIsSupported(final String encryptionType)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "EncryptionType.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EncryptionType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "EncryptionType.toString()", "testcase": false, "constructor": false}], "file": "java-manta-client-unshaded/src/main/java/com/joyent/manta/client/crypto/EncryptionType.java"}, "focal_method": {"identifier": "validateEncryptionTypeIsSupported", "parameters": "(final String encryptionType)", "modifiers": "@SuppressWarnings({\"Duplicates\"}) public static", "return": "void", "body": "@SuppressWarnings({\"Duplicates\"})\n    public static void validateEncryptionTypeIsSupported(final String encryptionType) {\n        if (encryptionType == null) {\n            String msg = \"Invalid encryption type identifier must not be null\";\n            throw new MantaEncryptionException(msg);\n        }\n\n        if (StringUtils.isBlank(encryptionType)) {\n            String msg = \"Invalid encryption type identifier must not be blank\";\n            MantaEncryptionException e = new MantaEncryptionException(msg);\n            e.setContextValue(\"malformedEncryptionType\", String.format(\"[%s]\", encryptionType));\n            throw e;\n        }\n\n        final String[] parts = encryptionType.split(SEPARATOR, 2);\n\n        if (parts.length != 2) {\n            String msg = \"Invalid encryption type identifier specified: missing version separator.\";\n            MantaEncryptionException e = new MantaEncryptionException(msg);\n            e.setContextValue(\"malformedEncryptionType\", encryptionType);\n            throw e;\n        }\n\n        final EncryptionType type = SUPPORTED_ENCRYPTION_TYPES.get(parts[0]);\n\n        if (type == null) {\n            String msg = \"Invalid encryption type identifier specified: Unknown type.\";\n            MantaEncryptionException e = new MantaEncryptionException(msg);\n            e.setContextValue(\"malformedEncryptionType\", encryptionType);\n            e.setContextValue(\"type\", parts[0]);\n            throw e;\n        }\n\n        final int version;\n\n        try {\n            version = Integer.parseUnsignedInt(parts[1]);\n        } catch (NumberFormatException e) {\n            String msg = \"Invalid encryption type version identifier specified.\";\n            MantaEncryptionException mcee = new MantaEncryptionException(msg, e);\n            mcee.setContextValue(\"malformedEncryptionType\", encryptionType);\n            mcee.setContextValue(\"malformedVersionString\", parts[1]);\n            throw mcee;\n        }\n\n        if (version > type.maxVersionSupported) {\n            String msg = \"Encryption type version is greater than supported\";\n            MantaEncryptionException e = new MantaEncryptionException(msg);\n            e.setContextValue(\"encryptionType\", encryptionType);\n            e.setContextValue(\"desiredVersion\", version);\n            e.setContextValue(\"minimumVersionSupported\", type.minVersionSupported);\n            e.setContextValue(\"maximumVersionSupported\", type.maxVersionSupported);\n            throw e;\n        }\n\n        if (version < type.maxVersionSupported) {\n            String msg = \"Encryption type version is less than supported\";\n            MantaEncryptionException e = new MantaEncryptionException(msg);\n            e.setContextValue(\"encryptionType\", encryptionType);\n            e.setContextValue(\"desiredVersion\", version);\n            e.setContextValue(\"minimumVersionSupported\", type.minVersionSupported);\n            e.setContextValue(\"maximumVersionSupported\", type.maxVersionSupported);\n            throw e;\n        }\n    }", "signature": "void validateEncryptionTypeIsSupported(final String encryptionType)", "full_signature": "@SuppressWarnings({\"Duplicates\"}) public static void validateEncryptionTypeIsSupported(final String encryptionType)", "class_method_signature": "EncryptionType.validateEncryptionTypeIsSupported(final String encryptionType)", "testcase": false, "constructor": false, "invocations": ["isBlank", "setContextValue", "format", "split", "setContextValue", "get", "setContextValue", "setContextValue", "parseUnsignedInt", "setContextValue", "setContextValue", "setContextValue", "setContextValue", "setContextValue", "setContextValue", "setContextValue", "setContextValue", "setContextValue", "setContextValue"]}, "repository": {"repo_id": 7263059, "url": "https://github.com/joyent/java-manta", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 16, "size": 20253, "license": "licensed"}}