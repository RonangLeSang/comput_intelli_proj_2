{"test_class": {"identifier": "TextHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "main/src/test/java/net/sourceforge/argparse4j/helper/TextHelperTest.java"}, "test_case": {"identifier": "testAdjustSpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdjustSpace() {\n        StringBuilder s1 = new StringBuilder(\"  Do you like Java language?  \");\n        assertEquals(\"Do  you  like  Java  language?\",\n                TextHelper.adjustSpace(s1, 30, 30).toString());\n        assertEquals(\"Do  you  like   Java  language?\",\n                TextHelper.adjustSpace(s1, 31, 30).toString());\n        StringBuilder s2 = new StringBuilder();\n        assertEquals(\"\", TextHelper.adjustSpace(s2, 30, 30).toString());\n        StringBuilder s3 = new StringBuilder(\"The Argparse4j\");\n        assertEquals(\"The       Argparse4j\", TextHelper.adjustSpace(s3, 20, 14).toString());\n    }", "signature": "void testAdjustSpace()", "full_signature": "@Test public void testAdjustSpace()", "class_method_signature": "TextHelperTest.testAdjustSpace()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "adjustSpace", "assertEquals", "toString", "adjustSpace", "assertEquals", "toString", "adjustSpace", "assertEquals", "toString", "adjustSpace"]}, "focal_class": {"identifier": "TextHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Locale LOCALE_ROOT = Locale.ROOT;", "modifier": "public static final", "type": "Locale", "declarator": "LOCALE_ROOT = Locale.ROOT", "var_name": "LOCALE_ROOT"}, {"original_string": "public static final String LINESEP = System.getProperty(\"line.separator\");", "modifier": "public static final", "type": "String", "declarator": "LINESEP = System.getProperty(\"line.separator\")", "var_name": "LINESEP"}], "methods": [{"identifier": "TextHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " TextHelper()", "full_signature": "private  TextHelper()", "class_method_signature": "TextHelper.TextHelper()", "testcase": false, "constructor": true}, {"identifier": "concat", "parameters": "(T a[], int offset, String sep,\n            String start, String end)", "modifiers": "public static", "return": "String", "signature": "String concat(T a[], int offset, String sep,\n            String start, String end)", "full_signature": "public static String concat(T a[], int offset, String sep,\n            String start, String end)", "class_method_signature": "TextHelper.concat(T a[], int offset, String sep,\n            String start, String end)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(T a[], int offset, String sep)", "modifiers": "public static", "return": "String", "signature": "String concat(T a[], int offset, String sep)", "full_signature": "public static String concat(T a[], int offset, String sep)", "class_method_signature": "TextHelper.concat(T a[], int offset, String sep)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(Collection<T> a, int offset, String sep,\n            String start, String end)", "modifiers": "public static", "return": "String", "signature": "String concat(Collection<T> a, int offset, String sep,\n            String start, String end)", "full_signature": "public static String concat(Collection<T> a, int offset, String sep,\n            String start, String end)", "class_method_signature": "TextHelper.concat(Collection<T> a, int offset, String sep,\n            String start, String end)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(Collection<T> a, int offset, String sep)", "modifiers": "public static", "return": "String", "signature": "String concat(Collection<T> a, int offset, String sep)", "full_signature": "public static String concat(Collection<T> a, int offset, String sep)", "class_method_signature": "TextHelper.concat(Collection<T> a, int offset, String sep)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(TextWidthCounter textWidthCounter, String s,\n            int width, int initialOffset, String initialIndent,\n            String subsequentIndent)", "modifiers": "public static", "return": "String", "signature": "String wrap(TextWidthCounter textWidthCounter, String s,\n            int width, int initialOffset, String initialIndent,\n            String subsequentIndent)", "full_signature": "public static String wrap(TextWidthCounter textWidthCounter, String s,\n            int width, int initialOffset, String initialIndent,\n            String subsequentIndent)", "class_method_signature": "TextHelper.wrap(TextWidthCounter textWidthCounter, String s,\n            int width, int initialOffset, String initialIndent,\n            String subsequentIndent)", "testcase": false, "constructor": false}, {"identifier": "adjustSpace", "parameters": "(StringBuilder sb, int width,\n            int curWidth)", "modifiers": "public static", "return": "StringBuilder", "signature": "StringBuilder adjustSpace(StringBuilder sb, int width,\n            int curWidth)", "full_signature": "public static StringBuilder adjustSpace(StringBuilder sb, int width,\n            int curWidth)", "class_method_signature": "TextHelper.adjustSpace(StringBuilder sb, int width,\n            int curWidth)", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "(PrintWriter writer, String title, String help,\n            TextWidthCounter textWidthCounter, int width)", "modifiers": "public static", "return": "void", "signature": "void printHelp(PrintWriter writer, String title, String help,\n            TextWidthCounter textWidthCounter, int width)", "full_signature": "public static void printHelp(PrintWriter writer, String title, String help,\n            TextWidthCounter textWidthCounter, int width)", "class_method_signature": "TextHelper.printHelp(PrintWriter writer, String title, String help,\n            TextWidthCounter textWidthCounter, int width)", "testcase": false, "constructor": false}, {"identifier": "nonNull", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String nonNull(String str)", "full_signature": "public static String nonNull(String str)", "class_method_signature": "TextHelper.nonNull(String str)", "testcase": false, "constructor": false}, {"identifier": "findPrefix", "parameters": "(Collection<String> src, String prefix)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> findPrefix(Collection<String> src, String prefix)", "full_signature": "public static List<String> findPrefix(Collection<String> src, String prefix)", "class_method_signature": "TextHelper.findPrefix(Collection<String> src, String prefix)", "testcase": false, "constructor": false}], "file": "main/src/main/java/net/sourceforge/argparse4j/helper/TextHelper.java"}, "focal_method": {"identifier": "adjustSpace", "parameters": "(StringBuilder sb, int width,\n            int curWidth)", "modifiers": "public static", "return": "StringBuilder", "body": "public static StringBuilder adjustSpace(StringBuilder sb, int width,\n            int curWidth) {\n        int i, len = sb.length();\n        int origLen = len;\n        i = 0;\n        while (i < len && sb.charAt(i) == ' ') {\n            ++i;\n        }\n        sb.delete(0, i);\n        len = sb.length();\n        i = len - 1;\n        while (i >= 0 && sb.charAt(i) == ' ') {\n            --i;\n        }\n        sb.delete(i + 1, len);\n        len = sb.length();\n        curWidth -= origLen - len;\n\n        int numWsBlock = 0;\n        boolean cont = false;\n        for (i = 0; i < len; ++i) {\n            if (sb.charAt(i) == ' ') {\n                if (!cont) {\n                    cont = true;\n                    ++numWsBlock;\n                }\n            } else {\n                cont = false;\n            }\n        }\n        if (numWsBlock == 0) {\n            return sb;\n        }\n        // Distribute needWs white spaces to numWsBlock blocks.\n        // Put one more space to the middle of the blocks to look nicer if\n        // needWs is not divisible by numWsBlock.\n        int needWs = width - curWidth;\n        int eachWs = needWs / numWsBlock;\n        int rem = needWs % numWsBlock;\n        int remStart = (numWsBlock - rem + 1) / 2;\n        int remEnd = remStart + rem;\n        cont = false;\n        int b = 0;\n        for (i = 0; i < len; ++i) {\n            if (sb.charAt(i) == ' ') {\n                if (!cont) {\n                    cont = true;\n                    int add = eachWs + (remStart <= b && b < remEnd ? 1 : 0);\n                    for (int j = 0; j < add; ++j) {\n                        sb.insert(i, ' ');\n                    }\n                    len = sb.length();\n                    ++b;\n                }\n            } else {\n                cont = false;\n            }\n        }\n        return sb;\n    }", "signature": "StringBuilder adjustSpace(StringBuilder sb, int width,\n            int curWidth)", "full_signature": "public static StringBuilder adjustSpace(StringBuilder sb, int width,\n            int curWidth)", "class_method_signature": "TextHelper.adjustSpace(StringBuilder sb, int width,\n            int curWidth)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "delete", "length", "charAt", "delete", "length", "charAt", "charAt", "insert", "length"]}, "repository": {"repo_id": 2856208, "url": "https://github.com/argparse4j/argparse4j", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 195, "size": 810, "license": "licensed"}}