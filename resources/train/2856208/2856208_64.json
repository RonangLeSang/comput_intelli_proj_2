{"test_class": {"identifier": "AppendArgumentActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MyMockArgument arg = new MyMockArgument();", "modifier": "private", "type": "MyMockArgument", "declarator": "arg = new MyMockArgument()", "var_name": "arg"}, {"original_string": "private AppendArgumentAction act = new AppendArgumentAction();", "modifier": "private", "type": "AppendArgumentAction", "declarator": "act = new AppendArgumentAction()", "var_name": "act"}, {"original_string": "private Map<String, Object> attrs;", "modifier": "private", "type": "Map<String, Object>", "declarator": "attrs", "var_name": "attrs"}], "file": "main/src/test/java/net/sourceforge/argparse4j/impl/action/AppendArgumentActionTest.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRun() throws ArgumentParserException {\n        act.run(null, arg, attrs, null, \"hello\");\n        assertEquals(singletonList(\"hello\"), attrs.get(\"dest\"));\n        act.run(null, arg, attrs, null, \"world\");\n        assertEquals(Arrays.asList(\"hello\", \"world\"), attrs.get(\"dest\"));\n    }", "signature": "void testRun()", "full_signature": "@Test public void testRun()", "class_method_signature": "AppendArgumentActionTest.testRun()", "testcase": true, "constructor": false, "invocations": ["run", "assertEquals", "singletonList", "get", "run", "assertEquals", "asList", "get"]}, "focal_class": {"identifier": "AppendArgumentAction", "superclass": "", "interfaces": "implements ArgumentAction", "fields": [], "methods": [{"identifier": "run", "parameters": "(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void run(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "full_signature": "@Override public void run(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "class_method_signature": "AppendArgumentAction.run(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "testcase": false, "constructor": false}, {"identifier": "consumeArgument", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean consumeArgument()", "full_signature": "@Override public boolean consumeArgument()", "class_method_signature": "AppendArgumentAction.consumeArgument()", "testcase": false, "constructor": false}, {"identifier": "onAttach", "parameters": "(Argument arg)", "modifiers": "@Override public", "return": "void", "signature": "void onAttach(Argument arg)", "full_signature": "@Override public void onAttach(Argument arg)", "class_method_signature": "AppendArgumentAction.onAttach(Argument arg)", "testcase": false, "constructor": false}], "file": "main/src/main/java/net/sourceforge/argparse4j/impl/action/AppendArgumentAction.java"}, "focal_method": {"identifier": "run", "parameters": "(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)\n            throws ArgumentParserException {\n        if (attrs.containsKey(arg.getDest())) {\n            Object obj = attrs.get(arg.getDest());\n            if (obj instanceof List) {\n                //noinspection unchecked\n                ((List<Object>) obj).add(value);\n                return;\n            }\n        }\n        List<Object> list = new ArrayList<Object>();\n        list.add(value);\n        attrs.put(arg.getDest(), list);\n    }", "signature": "void run(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "full_signature": "@Override public void run(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "class_method_signature": "AppendArgumentAction.run(ArgumentParser parser, Argument arg,\n            Map<String, Object> attrs, String flag, Object value)", "testcase": false, "constructor": false, "invocations": ["containsKey", "getDest", "get", "getDest", "add", "add", "put", "getDest"]}, "repository": {"repo_id": 2856208, "url": "https://github.com/argparse4j/argparse4j", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 195, "size": 810, "license": "licensed"}}