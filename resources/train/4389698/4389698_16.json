{"test_class": {"identifier": "ASTPrinterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BlockToken BLOCKEOL = _BlockEOL(\"\\n\");", "modifier": "private static final", "type": "BlockToken", "declarator": "BLOCKEOL = _BlockEOL(\"\\n\")", "var_name": "BLOCKEOL"}, {"original_string": "private static final BlockToken BLOCKSTART = _BlockWord(\"/*\");", "modifier": "private static final", "type": "BlockToken", "declarator": "BLOCKSTART = _BlockWord(\"/*\")", "var_name": "BLOCKSTART"}, {"original_string": "private static final BlockToken BLOCKEND = _BlockWord(\"*/\");", "modifier": "private static final", "type": "BlockToken", "declarator": "BLOCKEND = _BlockWord(\"*/\")", "var_name": "BLOCKEND"}, {"original_string": "private static final BlockToken BLOCKONEWS = _BlockWhiteSpace(\" \");", "modifier": "private static final", "type": "BlockToken", "declarator": "BLOCKONEWS = _BlockWhiteSpace(\" \")", "var_name": "BLOCKONEWS"}, {"original_string": "private static final JDToken ONEEOL = _JDEOL(\"\\n\");", "modifier": "private static final", "type": "JDToken", "declarator": "ONEEOL = _JDEOL(\"\\n\")", "var_name": "ONEEOL"}, {"original_string": "private static final JDToken ONEWS = _JDWhiteSpace(\" \");", "modifier": "private static final", "type": "JDToken", "declarator": "ONEWS = _JDWhiteSpace(\" \")", "var_name": "ONEWS"}, {"original_string": "private static final List<JDToken> NO_TOKENS = Util.<JDToken>list();", "modifier": "private static final", "type": "List<JDToken>", "declarator": "NO_TOKENS = Util.<JDToken>list()", "var_name": "NO_TOKENS"}, {"original_string": "private static final List<RefType> NO_TYPE_ARGS = Util.<RefType>list();", "modifier": "private static final", "type": "List<RefType>", "declarator": "NO_TYPE_ARGS = Util.<RefType>list()", "var_name": "NO_TYPE_ARGS"}, {"original_string": "private static final List<JDTagSection> NO_TAG_SECTIONS = Util.<JDTagSection>list();", "modifier": "private static final", "type": "List<JDTagSection>", "declarator": "NO_TAG_SECTIONS = Util.<JDTagSection>list()", "var_name": "NO_TAG_SECTIONS"}, {"original_string": "private static final Optional<RefType> NO_EXTENDS = Optional.<RefType>_None();", "modifier": "private static final", "type": "Optional<RefType>", "declarator": "NO_EXTENDS = Optional.<RefType>_None()", "var_name": "NO_EXTENDS"}, {"original_string": "private static final List<RefType> NO_IMPLEMENTS = Util.<RefType>list();", "modifier": "private static final", "type": "List<RefType>", "declarator": "NO_IMPLEMENTS = Util.<RefType>list()", "var_name": "NO_IMPLEMENTS"}, {"original_string": "private static final List<Annotation> NO_ANNOTATIONS = Util.<Annotation>list();", "modifier": "private static final", "type": "List<Annotation>", "declarator": "NO_ANNOTATIONS = Util.<Annotation>list()", "var_name": "NO_ANNOTATIONS"}], "file": "jADT-core/src/test/java/com/pogofish/jadt/printer/ASTPrinterTest.java"}, "test_case": {"identifier": "testArrayTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testArrayTypes() {\n        // single level\n        assertEquals(\"boolean[]\", print(_Ref(_ArrayType(_Primitive(_BooleanType())))));\n        // double level\n        assertEquals(\"String[][]\",\n                print(_Ref(_ArrayType(_Ref(_ArrayType(_Ref(_ClassType(\"String\", Util.<RefType> list()))))))));\n    }", "signature": "void testArrayTypes()", "full_signature": "@Test public void testArrayTypes()", "class_method_signature": "ASTPrinterTest.testArrayTypes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "print", "_Ref", "_ArrayType", "_Primitive", "_BooleanType", "assertEquals", "print", "_Ref", "_ArrayType", "_Ref", "_ArrayType", "_Ref", "_ClassType", "list"]}, "focal_class": {"identifier": "ASTPrinter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "print", "parameters": "(Doc doc)", "modifiers": "public static", "return": "String", "signature": "String print(Doc doc)", "full_signature": "public static String print(Doc doc)", "class_method_signature": "ASTPrinter.print(Doc doc)", "testcase": false, "constructor": false}, {"identifier": "printComments", "parameters": "(String indent, List<JavaComment> comments)", "modifiers": "public static", "return": "String", "signature": "String printComments(String indent, List<JavaComment> comments)", "full_signature": "public static String printComments(String indent, List<JavaComment> comments)", "class_method_signature": "ASTPrinter.printComments(String indent, List<JavaComment> comments)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(final String indent, JavaComment comment)", "modifiers": "public static", "return": "String", "signature": "String print(final String indent, JavaComment comment)", "full_signature": "public static String print(final String indent, JavaComment comment)", "class_method_signature": "ASTPrinter.print(final String indent, JavaComment comment)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(DataType dataType)", "modifiers": "public static", "return": "String", "signature": "String print(DataType dataType)", "full_signature": "public static String print(DataType dataType)", "class_method_signature": "ASTPrinter.print(DataType dataType)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Constructor constructor)", "modifiers": "public static", "return": "String", "signature": "String print(Constructor constructor)", "full_signature": "public static String print(Constructor constructor)", "class_method_signature": "ASTPrinter.print(Constructor constructor)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Arg arg)", "modifiers": "public static", "return": "String", "signature": "String print(Arg arg)", "full_signature": "public static String print(Arg arg)", "class_method_signature": "ASTPrinter.print(Arg arg)", "testcase": false, "constructor": false}, {"identifier": "printArgModifiers", "parameters": "(List<ArgModifier> modifiers)", "modifiers": "public static", "return": "String", "signature": "String printArgModifiers(List<ArgModifier> modifiers)", "full_signature": "public static String printArgModifiers(List<ArgModifier> modifiers)", "class_method_signature": "ASTPrinter.printArgModifiers(List<ArgModifier> modifiers)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Type type)", "modifiers": "public static", "return": "String", "signature": "String print(Type type)", "full_signature": "public static String print(Type type)", "class_method_signature": "ASTPrinter.print(Type type)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(RefType type)", "modifiers": "public static", "return": "String", "signature": "String print(RefType type)", "full_signature": "public static String print(RefType type)", "class_method_signature": "ASTPrinter.print(RefType type)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(PrimitiveType type)", "modifiers": "public static", "return": "String", "signature": "String print(PrimitiveType type)", "full_signature": "public static String print(PrimitiveType type)", "class_method_signature": "ASTPrinter.print(PrimitiveType type)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(ArgModifier modifier)", "modifiers": "public static", "return": "String", "signature": "String print(ArgModifier modifier)", "full_signature": "public static String print(ArgModifier modifier)", "class_method_signature": "ASTPrinter.print(ArgModifier modifier)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(final String indent, JDToken token)", "modifiers": "private static", "return": "String", "signature": "String print(final String indent, JDToken token)", "full_signature": "private static String print(final String indent, JDToken token)", "class_method_signature": "ASTPrinter.print(final String indent, JDToken token)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(final Literal literal)", "modifiers": "public static", "return": "String", "signature": "String print(final Literal literal)", "full_signature": "public static String print(final Literal literal)", "class_method_signature": "ASTPrinter.print(final Literal literal)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Expression expression)", "modifiers": "public static", "return": "String", "signature": "String print(Expression expression)", "full_signature": "public static String print(Expression expression)", "class_method_signature": "ASTPrinter.print(Expression expression)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Annotation annotation)", "modifiers": "public static", "return": "String", "signature": "String print(Annotation annotation)", "full_signature": "public static String print(Annotation annotation)", "class_method_signature": "ASTPrinter.print(Annotation annotation)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(AnnotationElement value)", "modifiers": "public static", "return": "String", "signature": "String print(AnnotationElement value)", "full_signature": "public static String print(AnnotationElement value)", "class_method_signature": "ASTPrinter.print(AnnotationElement value)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(AnnotationValue value)", "modifiers": "public static", "return": "String", "signature": "String print(AnnotationValue value)", "full_signature": "public static String print(AnnotationValue value)", "class_method_signature": "ASTPrinter.print(AnnotationValue value)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(BinaryOperator op)", "modifiers": "public static", "return": "String", "signature": "String print(BinaryOperator op)", "full_signature": "public static String print(BinaryOperator op)", "class_method_signature": "ASTPrinter.print(BinaryOperator op)", "testcase": false, "constructor": false}], "file": "jADT-core/src/main/java/com/pogofish/jadt/printer/ASTPrinter.java"}, "focal_method": {"identifier": "print", "parameters": "(Doc doc)", "modifiers": "public static", "return": "String", "body": "public static String print(Doc doc) {\n        final StringBuilder builder = new StringBuilder(doc.pkg.name.isEmpty() ? \"\" : (\"package \" + doc.pkg.name + \"\\n\\n\"));\n        if (!doc.imports.isEmpty()) {\n            for (Imprt imp : doc.imports) {\n                builder.append(\"import \" + imp.name + \"\\n\");\n            }\n            builder.append(\"\\n\");\n        }\n        for (DataType dataType : doc.dataTypes) {\n            builder.append(print(dataType));\n            builder.append(\"\\n\");\n        }\n        return builder.toString();  \n        \n    }", "signature": "String print(Doc doc)", "full_signature": "public static String print(Doc doc)", "class_method_signature": "ASTPrinter.print(Doc doc)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "append", "append", "append", "print", "append", "toString"]}, "repository": {"repo_id": 4389698, "url": "https://github.com/JamesIry/jADT", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 50, "size": 9055, "license": "licensed"}}