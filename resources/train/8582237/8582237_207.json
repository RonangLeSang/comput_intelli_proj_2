{"test_class": {"identifier": "Murmur64Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int maxRuns=1000;", "modifier": "private static final", "type": "int", "declarator": "maxRuns=1000", "var_name": "maxRuns"}, {"original_string": "private final byte[] sampleData;", "modifier": "private final", "type": "byte[]", "declarator": "sampleData", "var_name": "sampleData"}, {"original_string": "private final int sampleValue;", "modifier": "private final", "type": "int", "declarator": "sampleValue", "var_name": "sampleValue"}, {"original_string": "private final long sampleLong;", "modifier": "private final", "type": "long", "declarator": "sampleLong", "var_name": "sampleLong"}, {"original_string": "private final Murmur64 hasher= new Murmur64(0);", "modifier": "private final", "type": "Murmur64", "declarator": "hasher= new Murmur64(0)", "var_name": "hasher"}], "file": "utilities/src/test/java/com/splicemachine/hash/Murmur64Test.java"}, "test_case": {"identifier": "testIntSameAsByteArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIntSameAsByteArray() throws Exception {\n        byte[] bytes = Bytes.toBytes(sampleValue);\n        long correct = hasher.hash(bytes,0,bytes.length);\n\n        long actual = hasher.hash(sampleValue);\n\n        Assert.assertEquals(\"Incorrect int hash!\",correct,actual);\n    }", "signature": "void testIntSameAsByteArray()", "full_signature": "@Test public void testIntSameAsByteArray()", "class_method_signature": "Murmur64Test.testIntSameAsByteArray()", "testcase": true, "constructor": false, "invocations": ["toBytes", "hash", "hash", "assertEquals"]}, "focal_class": {"identifier": "Murmur64", "superclass": "", "interfaces": "implements Hash64", "fields": [{"original_string": "private static final long m = 0xc6a4a7935bd1e995L;", "modifier": "private static final", "type": "long", "declarator": "m = 0xc6a4a7935bd1e995L", "var_name": "m"}, {"original_string": "private static final int r = 47;", "modifier": "private static final", "type": "int", "declarator": "r = 47", "var_name": "r"}, {"original_string": "private final int seed;", "modifier": "private final", "type": "int", "declarator": "seed", "var_name": "seed"}], "methods": [{"identifier": "Murmur64", "parameters": "(int seed)", "modifiers": "", "return": "", "signature": " Murmur64(int seed)", "full_signature": "  Murmur64(int seed)", "class_method_signature": "Murmur64.Murmur64(int seed)", "testcase": false, "constructor": true}, {"identifier": "hash", "parameters": "(String elem)", "modifiers": "@Override public", "return": "long", "signature": "long hash(String elem)", "full_signature": "@Override public long hash(String elem)", "class_method_signature": "Murmur64.hash(String elem)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "long", "signature": "long hash(byte[] data, int offset, int length)", "full_signature": "@Override public long hash(byte[] data, int offset, int length)", "class_method_signature": "Murmur64.hash(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(ByteBuffer byteBuffer)", "modifiers": "@Override public", "return": "long", "signature": "long hash(ByteBuffer byteBuffer)", "full_signature": "@Override public long hash(ByteBuffer byteBuffer)", "class_method_signature": "Murmur64.hash(ByteBuffer byteBuffer)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(long element)", "modifiers": "@Override public", "return": "long", "signature": "long hash(long element)", "full_signature": "@Override public long hash(long element)", "class_method_signature": "Murmur64.hash(long element)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(int element)", "modifiers": "@Override public", "return": "long", "signature": "long hash(int element)", "full_signature": "@Override public long hash(int element)", "class_method_signature": "Murmur64.hash(int element)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(float element)", "modifiers": "@Override public", "return": "long", "signature": "long hash(float element)", "full_signature": "@Override public long hash(float element)", "class_method_signature": "Murmur64.hash(float element)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(double element)", "modifiers": "@Override public", "return": "long", "signature": "long hash(double element)", "full_signature": "@Override public long hash(double element)", "class_method_signature": "Murmur64.hash(double element)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(long seed, int length)", "modifiers": "private", "return": "long", "signature": "long initialize(long seed, int length)", "full_signature": "private long initialize(long seed, int length)", "class_method_signature": "Murmur64.initialize(long seed, int length)", "testcase": false, "constructor": false}, {"identifier": "updatePartial", "parameters": "(byte[] data, int length, long h, int dataPosition)", "modifiers": "private", "return": "long", "signature": "long updatePartial(byte[] data, int length, long h, int dataPosition)", "full_signature": "private long updatePartial(byte[] data, int length, long h, int dataPosition)", "class_method_signature": "Murmur64.updatePartial(byte[] data, int length, long h, int dataPosition)", "testcase": false, "constructor": false}, {"identifier": "updatePartial", "parameters": "(char[] data, int length, long h, int dataPosition)", "modifiers": "private", "return": "long", "signature": "long updatePartial(char[] data, int length, long h, int dataPosition)", "full_signature": "private long updatePartial(char[] data, int length, long h, int dataPosition)", "class_method_signature": "Murmur64.updatePartial(char[] data, int length, long h, int dataPosition)", "testcase": false, "constructor": false}, {"identifier": "updateFull", "parameters": "(byte[] data, long h, int dataPosition)", "modifiers": "private", "return": "long", "signature": "long updateFull(byte[] data, long h, int dataPosition)", "full_signature": "private long updateFull(byte[] data, long h, int dataPosition)", "class_method_signature": "Murmur64.updateFull(byte[] data, long h, int dataPosition)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(long h, long k)", "modifiers": "private", "return": "long", "signature": "long hash(long h, long k)", "full_signature": "private long hash(long h, long k)", "class_method_signature": "Murmur64.hash(long h, long k)", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "(long h)", "modifiers": "private", "return": "long", "signature": "long finalize(long h)", "full_signature": "private long finalize(long h)", "class_method_signature": "Murmur64.finalize(long h)", "testcase": false, "constructor": false}], "file": "utilities/src/main/java/com/splicemachine/hash/Murmur64.java"}, "focal_method": {"identifier": "hash", "parameters": "(String elem)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long hash(String elem) {\n        assert elem!=null: \"Cannot hash a null element\";\n        int length = elem.length();\n        long h = initialize(seed,length);\n        int pos =0;\n        char[] chars = elem.toCharArray();\n        while(length-pos>=8){\n            h = hash(h, LittleEndianBits.toLong(chars, pos));\n            pos+=8;\n        }\n\n        h = updatePartial(chars,length-pos,h,pos);\n        return finalize(h);\n    }", "signature": "long hash(String elem)", "full_signature": "@Override public long hash(String elem)", "class_method_signature": "Murmur64.hash(String elem)", "testcase": false, "constructor": false, "invocations": ["length", "initialize", "toCharArray", "hash", "toLong", "updatePartial", "finalize"]}, "repository": {"repo_id": 8582237, "url": "https://github.com/splicemachine/spliceengine", "stars": 128, "created": "3/5/2013 3:07:56 PM +00:00", "updates": "2020-01-23T21:06:43+00:00", "fork": "False", "license": "licensed"}}