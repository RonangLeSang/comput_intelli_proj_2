{"test_class": {"identifier": "SICompactionStateMutateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private long watermark = 1000;", "modifier": "private", "type": "long", "declarator": "watermark = 1000", "var_name": "watermark"}, {"original_string": "private SICompactionStateMutate cutNoPurge = new SICompactionStateMutate(\n            new PurgeConfigBuilder().noPurge().transactionLowWatermark(watermark).build());", "modifier": "private", "type": "SICompactionStateMutate", "declarator": "cutNoPurge = new SICompactionStateMutate(\n            new PurgeConfigBuilder().noPurge().transactionLowWatermark(watermark).build())", "var_name": "cutNoPurge"}, {"original_string": "private SICompactionStateMutate cutForcePurge = new SICompactionStateMutate(\n            new PurgeConfigBuilder().forcePurgeDeletes().purgeUpdates(true).transactionLowWatermark(watermark).build());", "modifier": "private", "type": "SICompactionStateMutate", "declarator": "cutForcePurge = new SICompactionStateMutate(\n            new PurgeConfigBuilder().forcePurgeDeletes().purgeUpdates(true).transactionLowWatermark(watermark).build())", "var_name": "cutForcePurge"}, {"original_string": "private SICompactionStateMutate cutPurgeDuringFlush = new SICompactionStateMutate(\n            new PurgeConfigBuilder().purgeDeletesDuringFlush().purgeUpdates(true).transactionLowWatermark(watermark).build());", "modifier": "private", "type": "SICompactionStateMutate", "declarator": "cutPurgeDuringFlush = new SICompactionStateMutate(\n            new PurgeConfigBuilder().purgeDeletesDuringFlush().purgeUpdates(true).transactionLowWatermark(watermark).build())", "var_name": "cutPurgeDuringFlush"}, {"original_string": "private SICompactionStateMutate cutPurgeDuringMajorCompaction = new SICompactionStateMutate(\n            new PurgeConfigBuilder().purgeDeletesDuringMajorCompaction().purgeUpdates(true).transactionLowWatermark(watermark).build());", "modifier": "private", "type": "SICompactionStateMutate", "declarator": "cutPurgeDuringMajorCompaction = new SICompactionStateMutate(\n            new PurgeConfigBuilder().purgeDeletesDuringMajorCompaction().purgeUpdates(true).transactionLowWatermark(watermark).build())", "var_name": "cutPurgeDuringMajorCompaction"}, {"original_string": "private SICompactionStateMutate cutPurgeDuringMinorCompaction = new SICompactionStateMutate(\n            new PurgeConfigBuilder().purgeDeletesDuringMinorCompaction().purgeUpdates(true).transactionLowWatermark(watermark).build());", "modifier": "private", "type": "SICompactionStateMutate", "declarator": "cutPurgeDuringMinorCompaction = new SICompactionStateMutate(\n            new PurgeConfigBuilder().purgeDeletesDuringMinorCompaction().purgeUpdates(true).transactionLowWatermark(watermark).build())", "var_name": "cutPurgeDuringMinorCompaction"}, {"original_string": "private List<Cell> inputCells = new ArrayList<>();", "modifier": "private", "type": "List<Cell>", "declarator": "inputCells = new ArrayList<>()", "var_name": "inputCells"}, {"original_string": "private List<TxnView> transactions = new ArrayList<>();", "modifier": "private", "type": "List<TxnView>", "declarator": "transactions = new ArrayList<>()", "var_name": "transactions"}, {"original_string": "private List<Cell> outputCells = new ArrayList<>();", "modifier": "private", "type": "List<Cell>", "declarator": "outputCells = new ArrayList<>()", "var_name": "outputCells"}], "file": "hbase_storage/src/test/java/com/splicemachine/si/impl/server/SICompactionStateMutateTest.java"}, "test_case": {"identifier": "mutateNonForcePurge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mutateNonForcePurge() throws IOException {\n        inputCells.addAll(Arrays.asList(\n                SITestUtils.getMockCommitCell(200, 210),\n                SITestUtils.getMockCommitCell(100, 110),\n                SITestUtils.getMockTombstoneCell(200),\n                SITestUtils.getMockValueCell(100)\n        ));\n        transactions.addAll(Arrays.asList(\n                null,\n                null,\n                TxnTestUtils.getMockCommittedTxn(200, 210),\n                TxnTestUtils.getMockCommittedTxn(100, 110)\n        ));\n        cutPurgeDuringMajorCompaction.mutate(inputCells, transactions, outputCells);\n        assertThat(outputCells, is(empty()));\n    }", "signature": "void mutateNonForcePurge()", "full_signature": "@Test public void mutateNonForcePurge()", "class_method_signature": "SICompactionStateMutateTest.mutateNonForcePurge()", "testcase": true, "constructor": false, "invocations": ["addAll", "asList", "getMockCommitCell", "getMockCommitCell", "getMockTombstoneCell", "getMockValueCell", "addAll", "asList", "getMockCommittedTxn", "getMockCommittedTxn", "mutate", "assertThat", "is", "empty"]}, "focal_class": {"identifier": "SICompactionStateMutate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(SICompactionStateMutate.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(SICompactionStateMutate.class)", "var_name": "LOG"}, {"original_string": "private SortedSet<Cell> dataToReturn = new TreeSet<>(new CellComparatorWithValueLength());", "modifier": "private", "type": "SortedSet<Cell>", "declarator": "dataToReturn = new TreeSet<>(new CellComparatorWithValueLength())", "var_name": "dataToReturn"}, {"original_string": "private final PurgeConfig purgeConfig;", "modifier": "private final", "type": "PurgeConfig", "declarator": "purgeConfig", "var_name": "purgeConfig"}, {"original_string": "private Cell maxTombstone = null;", "modifier": "private", "type": "Cell", "declarator": "maxTombstone = null", "var_name": "maxTombstone"}, {"original_string": "private Cell lastSeenAntiTombstone = null;", "modifier": "private", "type": "Cell", "declarator": "lastSeenAntiTombstone = null", "var_name": "lastSeenAntiTombstone"}, {"original_string": "private boolean firstWriteToken = false;", "modifier": "private", "type": "boolean", "declarator": "firstWriteToken = false", "var_name": "firstWriteToken"}, {"original_string": "private long deleteRightAfterFirstWriteTimestamp = 0;", "modifier": "private", "type": "long", "declarator": "deleteRightAfterFirstWriteTimestamp = 0", "var_name": "deleteRightAfterFirstWriteTimestamp"}, {"original_string": "private boolean bypassPurge = false;", "modifier": "private", "type": "boolean", "declarator": "bypassPurge = false", "var_name": "bypassPurge"}, {"original_string": "private Map<Integer, Long> columnUpdateLatestTimestamp = new HashMap<>();", "modifier": "private", "type": "Map<Integer, Long>", "declarator": "columnUpdateLatestTimestamp = new HashMap<>()", "var_name": "columnUpdateLatestTimestamp"}, {"original_string": "private Set<Long> updatesToPurgeTimestamps = new HashSet<>();", "modifier": "private", "type": "Set<Long>", "declarator": "updatesToPurgeTimestamps = new HashSet<>()", "var_name": "updatesToPurgeTimestamps"}, {"original_string": "private boolean firstUpdateCell = true;", "modifier": "private", "type": "boolean", "declarator": "firstUpdateCell = true", "var_name": "firstUpdateCell"}], "methods": [{"identifier": "SICompactionStateMutate", "parameters": "(PurgeConfig purgeConfig)", "modifiers": "", "return": "", "signature": " SICompactionStateMutate(PurgeConfig purgeConfig)", "full_signature": "  SICompactionStateMutate(PurgeConfig purgeConfig)", "class_method_signature": "SICompactionStateMutate.SICompactionStateMutate(PurgeConfig purgeConfig)", "testcase": false, "constructor": true}, {"identifier": "isSorted", "parameters": "(List<Cell> list)", "modifiers": "private", "return": "boolean", "signature": "boolean isSorted(List<Cell> list)", "full_signature": "private boolean isSorted(List<Cell> list)", "class_method_signature": "SICompactionStateMutate.isSorted(List<Cell> list)", "testcase": false, "constructor": false}, {"identifier": "handleSanityChecks", "parameters": "(List<Cell> results,\n                                    List<Cell> rawList,\n                                    List<TxnView> txns)", "modifiers": "private", "return": "void", "signature": "void handleSanityChecks(List<Cell> results,\n                                    List<Cell> rawList,\n                                    List<TxnView> txns)", "full_signature": "private void handleSanityChecks(List<Cell> results,\n                                    List<Cell> rawList,\n                                    List<TxnView> txns)", "class_method_signature": "SICompactionStateMutate.handleSanityChecks(List<Cell> results,\n                                    List<Cell> rawList,\n                                    List<TxnView> txns)", "testcase": false, "constructor": false}, {"identifier": "setBypassPurgeWithWarning", "parameters": "(String warningMessage)", "modifiers": "private", "return": "void", "signature": "void setBypassPurgeWithWarning(String warningMessage)", "full_signature": "private void setBypassPurgeWithWarning(String warningMessage)", "class_method_signature": "SICompactionStateMutate.setBypassPurgeWithWarning(String warningMessage)", "testcase": false, "constructor": false}, {"identifier": "mutate", "parameters": "(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "modifiers": "public", "return": "long", "signature": "long mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "full_signature": "public long mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "class_method_signature": "SICompactionStateMutate.mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "testcase": false, "constructor": false}, {"identifier": "mutate", "parameters": "(Cell element, TxnView txn)", "modifiers": "private", "return": "void", "signature": "void mutate(Cell element, TxnView txn)", "full_signature": "private void mutate(Cell element, TxnView txn)", "class_method_signature": "SICompactionStateMutate.mutate(Cell element, TxnView txn)", "testcase": false, "constructor": false}, {"identifier": "shouldPurgeDeletes", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldPurgeDeletes()", "full_signature": "private boolean shouldPurgeDeletes()", "class_method_signature": "SICompactionStateMutate.shouldPurgeDeletes()", "testcase": false, "constructor": false}, {"identifier": "shouldPurgeUpdates", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldPurgeUpdates()", "full_signature": "private boolean shouldPurgeUpdates()", "class_method_signature": "SICompactionStateMutate.shouldPurgeUpdates()", "testcase": false, "constructor": false}, {"identifier": "shouldRemoveMostRecentTombstone", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldRemoveMostRecentTombstone()", "full_signature": "private boolean shouldRemoveMostRecentTombstone()", "class_method_signature": "SICompactionStateMutate.shouldRemoveMostRecentTombstone()", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(Predicate<R> predicate)", "modifiers": "public static", "return": "Predicate<R>", "signature": "Predicate<R> not(Predicate<R> predicate)", "full_signature": "public static Predicate<R> not(Predicate<R> predicate)", "class_method_signature": "SICompactionStateMutate.not(Predicate<R> predicate)", "testcase": false, "constructor": false}, {"identifier": "purgeableDeletedRow", "parameters": "(Cell element)", "modifiers": "private", "return": "boolean", "signature": "boolean purgeableDeletedRow(Cell element)", "full_signature": "private boolean purgeableDeletedRow(Cell element)", "class_method_signature": "SICompactionStateMutate.purgeableDeletedRow(Cell element)", "testcase": false, "constructor": false}, {"identifier": "purgeableOldUpdate", "parameters": "(Cell element)", "modifiers": "private", "return": "boolean", "signature": "boolean purgeableOldUpdate(Cell element)", "full_signature": "private boolean purgeableOldUpdate(Cell element)", "class_method_signature": "SICompactionStateMutate.purgeableOldUpdate(Cell element)", "testcase": false, "constructor": false}, {"identifier": "newTransactionTimeStampKeyValue", "parameters": "(Cell element, byte[] value)", "modifiers": "private static", "return": "Cell", "signature": "Cell newTransactionTimeStampKeyValue(Cell element, byte[] value)", "full_signature": "private static Cell newTransactionTimeStampKeyValue(Cell element, byte[] value)", "class_method_signature": "SICompactionStateMutate.newTransactionTimeStampKeyValue(Cell element, byte[] value)", "testcase": false, "constructor": false}], "file": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java"}, "focal_method": {"identifier": "mutate", "parameters": "(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "modifiers": "public", "return": "long", "body": "public long mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n        handleSanityChecks(results, rawList, txns);\n        long totalSize = 0;\n        try {\n            Iterator<TxnView> it = txns.iterator();\n            for (Cell cell : rawList) {\n                totalSize += KeyValueUtil.length(cell);\n                TxnView txn = it.next();\n                mutate(cell, txn);\n            }\n            Stream<Cell> stream = dataToReturn.stream();\n            if (shouldPurgeDeletes())\n                stream = stream.filter(not(this::purgeableDeletedRow));\n            if (shouldPurgeUpdates())\n                stream = stream.filter(not(this::purgeableOldUpdate));\n            stream.forEachOrdered(results::add);\n            final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(results);\n            if (!debugSortCheck)\n                setBypassPurgeWithWarning(\"CompactionStateMutate: results not sorted.\");\n            assert debugSortCheck : \"CompactionStateMutate: results not sorted\";\n            return totalSize;\n        } catch (AssertionError e) {\n            LOG.error(e);\n            LOG.error(rawList.toString());\n            LOG.error(txns.toString());\n            throw e;\n        }\n    }", "signature": "long mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "full_signature": "public long mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "class_method_signature": "SICompactionStateMutate.mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results)", "testcase": false, "constructor": false, "invocations": ["handleSanityChecks", "iterator", "length", "next", "mutate", "stream", "shouldPurgeDeletes", "filter", "not", "shouldPurgeUpdates", "filter", "not", "forEachOrdered", "isDebugEnabled", "isSorted", "setBypassPurgeWithWarning", "error", "error", "toString", "error", "toString"]}, "repository": {"repo_id": 8582237, "url": "https://github.com/splicemachine/spliceengine", "stars": 128, "created": "3/5/2013 3:07:56 PM +00:00", "updates": "2020-01-23T21:06:43+00:00", "fork": "False", "license": "licensed"}}