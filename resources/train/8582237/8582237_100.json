{"test_class": {"identifier": "ByteSliceTest", "superclass": "", "interfaces": "", "fields": [], "file": "splice_encoding/src/test/java/com/splicemachine/utils/ByteSliceTest.java"}, "test_case": {"identifier": "getByteCopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getByteCopy() {\n        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5};\n        ByteSlice byteSlice = ByteSlice.wrap(bytes);\n        byte[] copy = byteSlice.getByteCopy();\n        assertNotSame(\"should not be the same\", bytes, copy);\n        assertArrayEquals(\"but should be equal\", bytes, copy);\n    }", "signature": "void getByteCopy()", "full_signature": "@Test public void getByteCopy()", "class_method_signature": "ByteSliceTest.getByteCopy()", "testcase": true, "constructor": false, "invocations": ["wrap", "getByteCopy", "assertNotSame", "assertArrayEquals"]}, "focal_class": {"identifier": "ByteSlice", "superclass": "", "interfaces": "implements Externalizable,Comparable<ByteSlice>,Cloneable", "fields": [{"original_string": "private static final Hash32 hashFunction = HashFunctions.murmur3(0);", "modifier": "private static final", "type": "Hash32", "declarator": "hashFunction = HashFunctions.murmur3(0)", "var_name": "hashFunction"}, {"original_string": "private static final byte[] EMPTY_BYTE_ARRAY = {};", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_BYTE_ARRAY = {}", "var_name": "EMPTY_BYTE_ARRAY"}, {"original_string": "private byte[] buffer;", "modifier": "private", "type": "byte[]", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private int offset;", "modifier": "private", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private int length;", "modifier": "private", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "private transient int hashCode;", "modifier": "private transient", "type": "int", "declarator": "hashCode", "var_name": "hashCode"}, {"original_string": "private transient boolean hashSet;", "modifier": "private transient", "type": "boolean", "declarator": "hashSet", "var_name": "hashSet"}], "methods": [{"identifier": "ByteSlice", "parameters": "()", "modifiers": "public", "return": "", "signature": " ByteSlice()", "full_signature": "public  ByteSlice()", "class_method_signature": "ByteSlice.ByteSlice()", "testcase": false, "constructor": true}, {"identifier": "ByteSlice", "parameters": "(ByteSlice other)", "modifiers": "public", "return": "", "signature": " ByteSlice(ByteSlice other)", "full_signature": "public  ByteSlice(ByteSlice other)", "class_method_signature": "ByteSlice.ByteSlice(ByteSlice other)", "testcase": false, "constructor": true}, {"identifier": "cachedEmpty", "parameters": "()", "modifiers": "public static", "return": "ByteSlice", "signature": "ByteSlice cachedEmpty()", "full_signature": "public static ByteSlice cachedEmpty()", "class_method_signature": "ByteSlice.cachedEmpty()", "testcase": false, "constructor": false}, {"identifier": "empty", "parameters": "()", "modifiers": "public static", "return": "ByteSlice", "signature": "ByteSlice empty()", "full_signature": "public static ByteSlice empty()", "class_method_signature": "ByteSlice.empty()", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(ByteBuffer buffer)", "modifiers": "public static", "return": "ByteSlice", "signature": "ByteSlice wrap(ByteBuffer buffer)", "full_signature": "public static ByteSlice wrap(ByteBuffer buffer)", "class_method_signature": "ByteSlice.wrap(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "cachedWrap", "parameters": "(byte[] data)", "modifiers": "public static", "return": "ByteSlice", "signature": "ByteSlice cachedWrap(byte[] data)", "full_signature": "public static ByteSlice cachedWrap(byte[] data)", "class_method_signature": "ByteSlice.cachedWrap(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "cachedWrap", "parameters": "(byte[] data, int offset,int length)", "modifiers": "public static", "return": "ByteSlice", "signature": "ByteSlice cachedWrap(byte[] data, int offset,int length)", "full_signature": "public static ByteSlice cachedWrap(byte[] data, int offset,int length)", "class_method_signature": "ByteSlice.cachedWrap(byte[] data, int offset,int length)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public static", "return": "ByteSlice", "signature": "ByteSlice wrap(byte[] data, int offset, int length)", "full_signature": "public static ByteSlice wrap(byte[] data, int offset, int length)", "class_method_signature": "ByteSlice.wrap(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(byte[] rowKey)", "modifiers": "public static", "return": "ByteSlice", "signature": "ByteSlice wrap(byte[] rowKey)", "full_signature": "public static ByteSlice wrap(byte[] rowKey)", "class_method_signature": "ByteSlice.wrap(byte[] rowKey)", "testcase": false, "constructor": false}, {"identifier": "ByteSlice", "parameters": "(byte[] buffer, int offset, int length)", "modifiers": "protected", "return": "", "signature": " ByteSlice(byte[] buffer, int offset, int length)", "full_signature": "protected  ByteSlice(byte[] buffer, int offset, int length)", "class_method_signature": "ByteSlice.ByteSlice(byte[] buffer, int offset, int length)", "testcase": false, "constructor": true}, {"identifier": "offset", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int offset()", "full_signature": "public int offset()", "class_method_signature": "ByteSlice.offset()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int length()", "full_signature": "public int length()", "class_method_signature": "ByteSlice.length()", "testcase": false, "constructor": false}, {"identifier": "getByteCopy", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getByteCopy()", "full_signature": "public byte[] getByteCopy()", "class_method_signature": "ByteSlice.getByteCopy()", "testcase": false, "constructor": false}, {"identifier": "asBuffer", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer asBuffer()", "full_signature": "public ByteBuffer asBuffer()", "class_method_signature": "ByteSlice.asBuffer()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] destination, int destOffset)", "modifiers": "public", "return": "void", "signature": "void get(byte[] destination, int destOffset)", "full_signature": "public void get(byte[] destination, int destOffset)", "class_method_signature": "ByteSlice.get(byte[] destination, int destOffset)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] destination, int destOffset,int destLength)", "modifiers": "public", "return": "void", "signature": "void get(byte[] destination, int destOffset,int destLength)", "full_signature": "public void get(byte[] destination, int destOffset,int destLength)", "class_method_signature": "ByteSlice.get(byte[] destination, int destOffset,int destLength)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "void", "signature": "void set(byte[] bytes)", "full_signature": "public void set(byte[] bytes)", "class_method_signature": "ByteSlice.set(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(byte[] buffer, int offset, int length)", "modifiers": "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\",justification = \"Intentional\") public", "return": "void", "signature": "void set(byte[] buffer, int offset, int length)", "full_signature": "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\",justification = \"Intentional\") public void set(byte[] buffer, int offset, int length)", "class_method_signature": "ByteSlice.set(byte[] buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "updateSlice", "parameters": "(ByteSlice slice, boolean reverse)", "modifiers": "public", "return": "void", "signature": "void updateSlice(ByteSlice slice, boolean reverse)", "full_signature": "public void updateSlice(ByteSlice slice, boolean reverse)", "class_method_signature": "ByteSlice.updateSlice(ByteSlice slice, boolean reverse)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(ByteSlice rowSlice, boolean reverse)", "modifiers": "public", "return": "void", "signature": "void set(ByteSlice rowSlice, boolean reverse)", "full_signature": "public void set(ByteSlice rowSlice, boolean reverse)", "class_method_signature": "ByteSlice.set(ByteSlice rowSlice, boolean reverse)", "testcase": false, "constructor": false}, {"identifier": "data", "parameters": "(boolean reverse)", "modifiers": "public", "return": "byte[]", "signature": "byte[] data(boolean reverse)", "full_signature": "public byte[] data(boolean reverse)", "class_method_signature": "ByteSlice.data(boolean reverse)", "testcase": false, "constructor": false}, {"identifier": "array", "parameters": "()", "modifiers": "@SuppressFBWarnings(value = \"EI_EXPOSE_REP\",justification = \"Intentional\") public", "return": "byte[]", "signature": "byte[] array()", "full_signature": "@SuppressFBWarnings(value = \"EI_EXPOSE_REP\",justification = \"Intentional\") public byte[] array()", "class_method_signature": "ByteSlice.array()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "ByteSlice.reset()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ByteSlice.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ByteSlice.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(ByteSlice currentData, int equalsLength)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(ByteSlice currentData, int equalsLength)", "full_signature": "public boolean equals(ByteSlice currentData, int equalsLength)", "class_method_signature": "ByteSlice.equals(ByteSlice currentData, int equalsLength)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(byte[] data, int offset, int length)", "full_signature": "public boolean equals(byte[] data, int offset, int length)", "class_method_signature": "ByteSlice.equals(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(ByteSlice o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(ByteSlice o)", "full_signature": "@Override public int compareTo(ByteSlice o)", "class_method_signature": "ByteSlice.compareTo(ByteSlice o)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(byte[] bytes,int offset, int length)", "modifiers": "public", "return": "int", "signature": "int compareTo(byte[] bytes,int offset, int length)", "full_signature": "public int compareTo(byte[] bytes,int offset, int length)", "class_method_signature": "ByteSlice.compareTo(byte[] bytes,int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ByteSlice.hashCode()", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@Override public void readExternal(ObjectInput in)", "class_method_signature": "ByteSlice.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "ByteSlice.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reverse()", "full_signature": "public void reverse()", "class_method_signature": "ByteSlice.reverse()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(byte toFind, int startOffset)", "modifiers": "public", "return": "int", "signature": "int find(byte toFind, int startOffset)", "full_signature": "public int find(byte toFind, int startOffset)", "class_method_signature": "ByteSlice.find(byte toFind, int startOffset)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"CloneDoesntCallSuperClone\") //intentionally doesn't call it @SuppressFBWarnings(value = \"CN_IDIOM_NO_SUPER_CALL\",justification = \"Intentional\") public", "return": "ByteSlice", "signature": "ByteSlice clone()", "full_signature": "@Override @SuppressWarnings(\"CloneDoesntCallSuperClone\") //intentionally doesn't call it @SuppressFBWarnings(value = \"CN_IDIOM_NO_SUPER_CALL\",justification = \"Intentional\") public ByteSlice clone()", "class_method_signature": "ByteSlice.clone()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(ByteSlice newData)", "modifiers": "public", "return": "void", "signature": "void set(ByteSlice newData)", "full_signature": "public void set(ByteSlice newData)", "class_method_signature": "ByteSlice.set(ByteSlice newData)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toHexString()", "full_signature": "public String toHexString()", "class_method_signature": "ByteSlice.toHexString()", "testcase": false, "constructor": false}, {"identifier": "assertLengthCorrect", "parameters": "(byte[] buffer, int offset, int length)", "modifiers": "private static", "return": "void", "signature": "void assertLengthCorrect(byte[] buffer, int offset, int length)", "full_signature": "private static void assertLengthCorrect(byte[] buffer, int offset, int length)", "class_method_signature": "ByteSlice.assertLengthCorrect(byte[] buffer, int offset, int length)", "testcase": false, "constructor": false}], "file": "splice_encoding/src/main/java/com/splicemachine/utils/ByteSlice.java"}, "focal_method": {"identifier": "getByteCopy", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] getByteCopy() {\n        if(length<=0) return EMPTY_BYTE_ARRAY;\n        return Bytes.slice(buffer, offset, length);\n    }", "signature": "byte[] getByteCopy()", "full_signature": "public byte[] getByteCopy()", "class_method_signature": "ByteSlice.getByteCopy()", "testcase": false, "constructor": false, "invocations": ["slice"]}, "repository": {"repo_id": 8582237, "url": "https://github.com/splicemachine/spliceengine", "stars": 128, "created": "3/5/2013 3:07:56 PM +00:00", "updates": "2020-01-23T21:06:43+00:00", "fork": "False", "license": "licensed"}}