{"test_class": {"identifier": "Murmur32Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int maxRuns=1000;", "modifier": "private static final", "type": "int", "declarator": "maxRuns=1000", "var_name": "maxRuns"}, {"original_string": "private final byte[] sampleData;", "modifier": "private final", "type": "byte[]", "declarator": "sampleData", "var_name": "sampleData"}, {"original_string": "private final int sampleOffset;", "modifier": "private final", "type": "int", "declarator": "sampleOffset", "var_name": "sampleOffset"}, {"original_string": "private final int sampleLength;", "modifier": "private final", "type": "int", "declarator": "sampleLength", "var_name": "sampleLength"}, {"original_string": "private final int sampleValue;", "modifier": "private final", "type": "int", "declarator": "sampleValue", "var_name": "sampleValue"}, {"original_string": "private final long sampleLong;", "modifier": "private final", "type": "long", "declarator": "sampleLong", "var_name": "sampleLong"}, {"original_string": "private final Murmur32 murmur32 = new Murmur32(0);", "modifier": "private final", "type": "Murmur32", "declarator": "murmur32 = new Murmur32(0)", "var_name": "murmur32"}], "file": "utilities/src/test/java/com/splicemachine/hash/Murmur32Test.java"}, "test_case": {"identifier": "testLongSameAsByteArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLongSameAsByteArray() throws Exception {\n        byte[] bytes = Bytes.toBytes(sampleLong);\n        int correct = murmur32.hash(bytes,0,bytes.length);\n\n        int actual = murmur32.hash(sampleLong);\n\n        Assert.assertEquals(\"Incorrect int hash!\",correct,actual);\n    }", "signature": "void testLongSameAsByteArray()", "full_signature": "@Test public void testLongSameAsByteArray()", "class_method_signature": "Murmur32Test.testLongSameAsByteArray()", "testcase": true, "constructor": false, "invocations": ["toBytes", "hash", "hash", "assertEquals"]}, "focal_class": {"identifier": "Murmur32", "superclass": "", "interfaces": "implements Hash32", "fields": [{"original_string": "private static final int c1 = 0xcc9e2d51;", "modifier": "private static final", "type": "int", "declarator": "c1 = 0xcc9e2d51", "var_name": "c1"}, {"original_string": "private static final int c2 = 0x1b873593;", "modifier": "private static final", "type": "int", "declarator": "c2 = 0x1b873593", "var_name": "c2"}, {"original_string": "private final int seed;", "modifier": "private final", "type": "int", "declarator": "seed", "var_name": "seed"}], "methods": [{"identifier": "Murmur32", "parameters": "(int seed)", "modifiers": "", "return": "", "signature": " Murmur32(int seed)", "full_signature": "  Murmur32(int seed)", "class_method_signature": "Murmur32.Murmur32(int seed)", "testcase": false, "constructor": true}, {"identifier": "hash", "parameters": "(String elem)", "modifiers": "@Override public", "return": "int", "signature": "int hash(String elem)", "full_signature": "@Override public int hash(String elem)", "class_method_signature": "Murmur32.hash(String elem)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(byte[] bytes, int offset, int length)", "modifiers": "@Override public", "return": "int", "signature": "int hash(byte[] bytes, int offset, int length)", "full_signature": "@Override public int hash(byte[] bytes, int offset, int length)", "class_method_signature": "Murmur32.hash(byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(long item)", "modifiers": "@Override public", "return": "int", "signature": "int hash(long item)", "full_signature": "@Override public int hash(long item)", "class_method_signature": "Murmur32.hash(long item)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(int element)", "modifiers": "@Override public", "return": "int", "signature": "int hash(int element)", "full_signature": "@Override public int hash(int element)", "class_method_signature": "Murmur32.hash(int element)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(short element)", "modifiers": "@Override public", "return": "int", "signature": "int hash(short element)", "full_signature": "@Override public int hash(short element)", "class_method_signature": "Murmur32.hash(short element)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(ByteBuffer bytes)", "modifiers": "@Override public", "return": "int", "signature": "int hash(ByteBuffer bytes)", "full_signature": "@Override public int hash(ByteBuffer bytes)", "class_method_signature": "Murmur32.hash(ByteBuffer bytes)", "testcase": false, "constructor": false}, {"identifier": "updatePartial", "parameters": "(CharSequence bytes, int length, int pos, int h,int bytesVisited)", "modifiers": "private", "return": "int", "signature": "int updatePartial(CharSequence bytes, int length, int pos, int h,int bytesVisited)", "full_signature": "private int updatePartial(CharSequence bytes, int length, int pos, int h,int bytesVisited)", "class_method_signature": "Murmur32.updatePartial(CharSequence bytes, int length, int pos, int h,int bytesVisited)", "testcase": false, "constructor": false}, {"identifier": "updatePartial", "parameters": "(char[] bytes, int length, int pos, int h,int bytesVisited)", "modifiers": "private", "return": "int", "signature": "int updatePartial(char[] bytes, int length, int pos, int h,int bytesVisited)", "full_signature": "private int updatePartial(char[] bytes, int length, int pos, int h,int bytesVisited)", "class_method_signature": "Murmur32.updatePartial(char[] bytes, int length, int pos, int h,int bytesVisited)", "testcase": false, "constructor": false}, {"identifier": "updatePartial", "parameters": "(byte[] bytes, int length, int pos, int h,int bytesVisited)", "modifiers": "private", "return": "int", "signature": "int updatePartial(byte[] bytes, int length, int pos, int h,int bytesVisited)", "full_signature": "private int updatePartial(byte[] bytes, int length, int pos, int h,int bytesVisited)", "class_method_signature": "Murmur32.updatePartial(byte[] bytes, int length, int pos, int h,int bytesVisited)", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "(int h)", "modifiers": "private", "return": "int", "signature": "int finalize(int h)", "full_signature": "private int finalize(int h)", "class_method_signature": "Murmur32.finalize(int h)", "testcase": false, "constructor": false}, {"identifier": "mutate", "parameters": "(int h1, int k1)", "modifiers": "private", "return": "int", "signature": "int mutate(int h1, int k1)", "full_signature": "private int mutate(int h1, int k1)", "class_method_signature": "Murmur32.mutate(int h1, int k1)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String...args)", "modifiers": "public static", "return": "void", "signature": "void main(String...args)", "full_signature": "public static void main(String...args)", "class_method_signature": "Murmur32.main(String...args)", "testcase": false, "constructor": false}], "file": "utilities/src/main/java/com/splicemachine/hash/Murmur32.java"}, "focal_method": {"identifier": "hash", "parameters": "(String elem)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hash(String elem) {\n        assert elem!=null: \"Cannot hash a null element!\";\n        int h = seed;\n        int length = elem.length();\n        int pos = 0;\n        int visited =0;\n        char[] chars = elem.toCharArray();\n        while(length-visited>=4){\n            /*\n             * Since a char has two bytes, we create one int by packing together two chars\n             */\n            int k1 = LittleEndianBits.toInt(chars, pos);\n            h = mutate(h,k1);\n            pos+=2;\n            visited+=4;\n        }\n        h = updatePartial(chars,length,pos,h,visited);\n\n        return finalize(h);\n    }", "signature": "int hash(String elem)", "full_signature": "@Override public int hash(String elem)", "class_method_signature": "Murmur32.hash(String elem)", "testcase": false, "constructor": false, "invocations": ["length", "toCharArray", "toInt", "mutate", "updatePartial", "finalize"]}, "repository": {"repo_id": 8582237, "url": "https://github.com/splicemachine/spliceengine", "stars": 128, "created": "3/5/2013 3:07:56 PM +00:00", "updates": "2020-01-23T21:06:43+00:00", "fork": "False", "license": "licensed"}}