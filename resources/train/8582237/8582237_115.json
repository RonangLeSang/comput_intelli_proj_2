{"test_class": {"identifier": "IntArraysTest", "superclass": "", "interfaces": "", "fields": [], "file": "splice_encoding/src/test/java/com/splicemachine/utils/IntArraysTest.java"}, "test_case": {"identifier": "testComplementMap9", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComplementMap9() throws Exception {\n        int[] expected = new int[] {0,1,2,5};\n        int[] input = new int[] {3,4};\n        int size = expected.length + input.length;\n\n        int[] complement = IntArrays.complementMap(input,size);\n//        System.out.println(printArrays(input,size,expected,complement));\n        Assert.assertArrayEquals(printArrays(input,size,expected,complement),expected,complement);\n    }", "signature": "void testComplementMap9()", "full_signature": "@Test public void testComplementMap9()", "class_method_signature": "IntArraysTest.testComplementMap9()", "testcase": true, "constructor": false, "invocations": ["complementMap", "assertArrayEquals", "printArrays"]}, "focal_class": {"identifier": "IntArrays", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "IntArrays", "parameters": "()", "modifiers": "private", "return": "", "signature": " IntArrays()", "full_signature": "private  IntArrays()", "class_method_signature": "IntArrays.IntArrays()", "testcase": false, "constructor": true}, {"identifier": "complement", "parameters": "(int[] map,int size)", "modifiers": "public static", "return": "int[]", "signature": "int[] complement(int[] map,int size)", "full_signature": "public static int[] complement(int[] map,int size)", "class_method_signature": "IntArrays.complement(int[] map,int size)", "testcase": false, "constructor": false}, {"identifier": "complementMap", "parameters": "(int[] filterMap, int size)", "modifiers": "public static", "return": "int[]", "signature": "int[] complementMap(int[] filterMap, int size)", "full_signature": "public static int[] complementMap(int[] filterMap, int size)", "class_method_signature": "IntArrays.complementMap(int[] filterMap, int size)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(int[] map,int size)", "modifiers": "public static", "return": "int[]", "signature": "int[] intersect(int[] map,int size)", "full_signature": "public static int[] intersect(int[] map,int size)", "class_method_signature": "IntArrays.intersect(int[] map,int size)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "(int[] map)", "modifiers": "private static", "return": "int", "signature": "int max(int[] map)", "full_signature": "private static int max(int[] map)", "class_method_signature": "IntArrays.max(int[] map)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(int size)", "modifiers": "public static", "return": "int[]", "signature": "int[] count(int size)", "full_signature": "public static int[] count(int size)", "class_method_signature": "IntArrays.count(int size)", "testcase": false, "constructor": false}, {"identifier": "negativeInitialize", "parameters": "(int size)", "modifiers": "public static", "return": "int[]", "signature": "int[] negativeInitialize(int size)", "full_signature": "public static int[] negativeInitialize(int size)", "class_method_signature": "IntArrays.negativeInitialize(int size)", "testcase": false, "constructor": false}], "file": "splice_encoding/src/main/java/com/splicemachine/utils/IntArrays.java"}, "focal_method": {"identifier": "complementMap", "parameters": "(int[] filterMap, int size)", "modifiers": "public static", "return": "int[]", "body": "public static int[] complementMap(int[] filterMap, int size) {\n        // track columns we need to filter\n        HashSet<Integer> columnsToFilter = new HashSet<Integer>(filterMap.length);\n        // determine the number of columns to filter\n        int numMissingFields = 0;\n        for (int i=0; i<filterMap.length; i++) {\n            if (filterMap[i] >= 0) numMissingFields++;\n            columnsToFilter.add(filterMap[i]);\n        }\n\n        int mapSize = size - numMissingFields;\n        assert mapSize >= 0 : \"Cannot construct a complement with more missing fields than present!\";\n        if (mapSize == 0) return new int[]{};\n\n        int[] finalData = new int[mapSize];\n        int index = 0;\n        int filter = 0;\n        while (index < mapSize) {\n            if (! columnsToFilter.contains(filter)) {\n                // add index only if it's not filtered\n                finalData[index++] = filter;\n            }\n            filter++;\n        }\n        return finalData;\n    }", "signature": "int[] complementMap(int[] filterMap, int size)", "full_signature": "public static int[] complementMap(int[] filterMap, int size)", "class_method_signature": "IntArrays.complementMap(int[] filterMap, int size)", "testcase": false, "constructor": false, "invocations": ["add", "contains"]}, "repository": {"repo_id": 8582237, "url": "https://github.com/splicemachine/spliceengine", "stars": 128, "created": "3/5/2013 3:07:56 PM +00:00", "updates": "2020-01-23T21:06:43+00:00", "fork": "False", "license": "licensed"}}