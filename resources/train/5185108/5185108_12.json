{"test_class": {"identifier": "TestServiceResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InMemoryDynamicStore dynamicStore;", "modifier": "private", "type": "InMemoryDynamicStore", "declarator": "dynamicStore", "var_name": "dynamicStore"}, {"original_string": "private ServiceResource resource;", "modifier": "private", "type": "ServiceResource", "declarator": "resource", "var_name": "resource"}], "file": "discovery-server/src/test/java/io/airlift/discovery/server/TestServiceResource.java"}, "test_case": {"identifier": "testGetAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAll()\n    {\n        Id<Node> redNodeId = Id.random();\n        DynamicServiceAnnouncement redStorage = new DynamicServiceAnnouncement(Id.<Service>random(), \"storage\", ImmutableMap.of(\"key\", \"1\"));\n        DynamicServiceAnnouncement redWeb = new DynamicServiceAnnouncement(Id.<Service>random(), \"web\", ImmutableMap.of(\"key\", \"2\"));\n        DynamicAnnouncement red = new DynamicAnnouncement(\"testing\", \"alpha\", \"/a/b/c\", of(redStorage, redWeb));\n\n        Id<Node> greenNodeId = Id.random();\n        DynamicServiceAnnouncement greenStorage = new DynamicServiceAnnouncement(Id.<Service>random(), \"storage\", ImmutableMap.of(\"key\", \"3\"));\n        DynamicAnnouncement green = new DynamicAnnouncement(\"testing\", \"alpha\", \"/x/y/z\", of(greenStorage));\n\n        Id<Node> blueNodeId = Id.random();\n        DynamicServiceAnnouncement blueStorage = new DynamicServiceAnnouncement(Id.<Service>random(), \"storage\", ImmutableMap.of(\"key\", \"4\"));\n        DynamicAnnouncement blue = new DynamicAnnouncement(\"testing\", \"beta\", \"/a/b/c\", of(blueStorage));\n\n        dynamicStore.put(redNodeId, red);\n        dynamicStore.put(greenNodeId, green);\n        dynamicStore.put(blueNodeId, blue);\n\n        assertEquals(resource.getServices(), new Services(\"testing\", ImmutableSet.of(\n                toServiceWith(redNodeId, red.getLocation(), red.getPool()).apply(redStorage),\n                toServiceWith(redNodeId, red.getLocation(), red.getPool()).apply(redWeb),\n                toServiceWith(greenNodeId, green.getLocation(), green.getPool()).apply(greenStorage),\n                toServiceWith(blueNodeId, blue.getLocation(), blue.getPool()).apply(blueStorage))));\n    }", "signature": "void testGetAll()", "full_signature": "@Test public void testGetAll()", "class_method_signature": "TestServiceResource.testGetAll()", "testcase": true, "constructor": false, "invocations": ["random", "random", "of", "random", "of", "of", "random", "random", "of", "of", "random", "random", "of", "of", "put", "put", "put", "assertEquals", "getServices", "of", "apply", "toServiceWith", "getLocation", "getPool", "apply", "toServiceWith", "getLocation", "getPool", "apply", "toServiceWith", "getLocation", "getPool", "apply", "toServiceWith", "getLocation", "getPool"]}, "focal_class": {"identifier": "ServiceResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DynamicStore dynamicStore;", "modifier": "private final", "type": "DynamicStore", "declarator": "dynamicStore", "var_name": "dynamicStore"}, {"original_string": "private final StaticStore staticStore;", "modifier": "private final", "type": "StaticStore", "declarator": "staticStore", "var_name": "staticStore"}, {"original_string": "private final NodeInfo node;", "modifier": "private final", "type": "NodeInfo", "declarator": "node", "var_name": "node"}], "methods": [{"identifier": "ServiceResource", "parameters": "(DynamicStore dynamicStore, StaticStore staticStore, NodeInfo node)", "modifiers": "@Inject public", "return": "", "signature": " ServiceResource(DynamicStore dynamicStore, StaticStore staticStore, NodeInfo node)", "full_signature": "@Inject public  ServiceResource(DynamicStore dynamicStore, StaticStore staticStore, NodeInfo node)", "class_method_signature": "ServiceResource.ServiceResource(DynamicStore dynamicStore, StaticStore staticStore, NodeInfo node)", "testcase": false, "constructor": true}, {"identifier": "getServices", "parameters": "(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "modifiers": "@GET @Path(\"{type}/{pool}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Services", "signature": "Services getServices(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "full_signature": "@GET @Path(\"{type}/{pool}\") @Produces(MediaType.APPLICATION_JSON) public Services getServices(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "class_method_signature": "ServiceResource.getServices(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "(@PathParam(\"type\") String type)", "modifiers": "@GET @Path(\"{type}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Services", "signature": "Services getServices(@PathParam(\"type\") String type)", "full_signature": "@GET @Path(\"{type}\") @Produces(MediaType.APPLICATION_JSON) public Services getServices(@PathParam(\"type\") String type)", "class_method_signature": "ServiceResource.getServices(@PathParam(\"type\") String type)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) public", "return": "Services", "signature": "Services getServices()", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) public Services getServices()", "class_method_signature": "ServiceResource.getServices()", "testcase": false, "constructor": false}], "file": "discovery-server/src/main/java/io/airlift/discovery/server/ServiceResource.java"}, "focal_method": {"identifier": "getServices", "parameters": "(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "modifiers": "@GET @Path(\"{type}/{pool}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Services", "body": "@GET\n    @Path(\"{type}/{pool}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Services getServices(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)\n    {\n        return new Services(node.getEnvironment(), union(dynamicStore.get(type, pool), staticStore.get(type, pool)));\n    }", "signature": "Services getServices(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "full_signature": "@GET @Path(\"{type}/{pool}\") @Produces(MediaType.APPLICATION_JSON) public Services getServices(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "class_method_signature": "ServiceResource.getServices(@PathParam(\"type\") String type, @PathParam(\"pool\") String pool)", "testcase": false, "constructor": false, "invocations": ["getEnvironment", "union", "get", "get"]}, "repository": {"repo_id": 5185108, "url": "https://github.com/airlift/discovery", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 40, "size": 590, "license": "licensed"}}