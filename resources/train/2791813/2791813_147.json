{"test_class": {"identifier": "DexterityPotionTest", "superclass": "extends AbstractItemTest", "interfaces": "", "fields": [{"original_string": "private static final int MIN_AGI = 1;", "modifier": "private static final", "type": "int", "declarator": "MIN_AGI = 1", "var_name": "MIN_AGI"}, {"original_string": "private static final int MAX_AGI = 5;", "modifier": "private static final", "type": "int", "declarator": "MAX_AGI = 5", "var_name": "MAX_AGI"}, {"original_string": "private static final int DURATION = 300;", "modifier": "private static final", "type": "int", "declarator": "DURATION = 300", "var_name": "DURATION"}, {"original_string": "private DexterityPotion potion1;", "modifier": "private", "type": "DexterityPotion", "declarator": "potion1", "var_name": "potion1"}, {"original_string": "private DexterityPotion potion2;", "modifier": "private", "type": "DexterityPotion", "declarator": "potion2", "var_name": "potion2"}], "file": "aoxp-server/src/test/java/com/ao/model/worldobject/DexterityPotionTest.java"}, "test_case": {"identifier": "testUseWithCleanup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUseWithCleanup() {\n\t\tfinal Inventory inventory = mock(Inventory.class);\n\t\tfinal Character character = mock(Character.class);\n\t\twhen(character.getInventory()).thenReturn(inventory);\n\n\t\tpotion2.use(character);\n\n\t\t// Consumption of potion2 requires these 2 calls.\n\t\tverify(inventory).cleanup();\n\t\tverify(character).addToDexterity(MAX_AGI, DURATION);\n\t}", "signature": "void testUseWithCleanup()", "full_signature": "@Test public void testUseWithCleanup()", "class_method_signature": "DexterityPotionTest.testUseWithCleanup()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getInventory", "use", "cleanup", "verify", "addToDexterity", "verify"]}, "focal_class": {"identifier": "DexterityPotion", "superclass": "extends ConsumableItem", "interfaces": "", "fields": [], "methods": [{"identifier": "DexterityPotion", "parameters": "(TemporalStatModifyingItemProperties properties, int amount)", "modifiers": "public", "return": "", "signature": " DexterityPotion(TemporalStatModifyingItemProperties properties, int amount)", "full_signature": "public  DexterityPotion(TemporalStatModifyingItemProperties properties, int amount)", "class_method_signature": "DexterityPotion.DexterityPotion(TemporalStatModifyingItemProperties properties, int amount)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Item", "signature": "Item clone()", "full_signature": "@Override public Item clone()", "class_method_signature": "DexterityPotion.clone()", "testcase": false, "constructor": false}, {"identifier": "use", "parameters": "(Character character)", "modifiers": "@Override public", "return": "void", "signature": "void use(Character character)", "full_signature": "@Override public void use(Character character)", "class_method_signature": "DexterityPotion.use(Character character)", "testcase": false, "constructor": false}, {"identifier": "getMinModifier", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinModifier()", "full_signature": "public int getMinModifier()", "class_method_signature": "DexterityPotion.getMinModifier()", "testcase": false, "constructor": false}, {"identifier": "getMaxModifier", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxModifier()", "full_signature": "public int getMaxModifier()", "class_method_signature": "DexterityPotion.getMaxModifier()", "testcase": false, "constructor": false}, {"identifier": "getEffectDuration", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEffectDuration()", "full_signature": "public int getEffectDuration()", "class_method_signature": "DexterityPotion.getEffectDuration()", "testcase": false, "constructor": false}], "file": "aoxp-server/src/main/java/com/ao/model/worldobject/DexterityPotion.java"}, "focal_method": {"identifier": "use", "parameters": "(Character character)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void use(Character character) {\n\t\tsuper.use(character);\n\n\t\tint minModifier = ((TemporalStatModifyingItemProperties) properties).getMinModifier();\n\t\tint maxModifier = ((TemporalStatModifyingItemProperties) properties).getMaxModifier();\n\t\tint time = ((TemporalStatModifyingItemProperties) properties).getEffectDuration();\n\n\t\t// increase dexterity!\n\t\tcharacter.addToDexterity((int) (Math.random() * (maxModifier - minModifier + 1)) + minModifier, time);\n\t}", "signature": "void use(Character character)", "full_signature": "@Override public void use(Character character)", "class_method_signature": "DexterityPotion.use(Character character)", "testcase": false, "constructor": false, "invocations": ["use", "getMinModifier", "getMaxModifier", "getEffectDuration", "addToDexterity", "random"]}, "repository": {"repo_id": 2791813, "url": "https://github.com/aoxp/AOXP-Server", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 6674, "license": "licensed"}}