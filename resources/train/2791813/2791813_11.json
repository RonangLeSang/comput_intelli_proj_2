{"test_class": {"identifier": "LoginNewCharacterPacketTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CHARACTER_NAME = \"testnew\";", "modifier": "private static final", "type": "String", "declarator": "CHARACTER_NAME = \"testnew\"", "var_name": "CHARACTER_NAME"}, {"original_string": "private static final String CHARACTER_PASSWORD = \"a\";", "modifier": "private static final", "type": "String", "declarator": "CHARACTER_PASSWORD = \"a\"", "var_name": "CHARACTER_PASSWORD"}, {"original_string": "private static final String CHARACTER_MAIL = \"thistestisnotgoingtofail@aoxp.com\";", "modifier": "private static final", "type": "String", "declarator": "CHARACTER_MAIL = \"thistestisnotgoingtofail@aoxp.com\"", "var_name": "CHARACTER_MAIL"}, {"original_string": "private static final byte CHARACTER_ARCHETYPE = (byte) UserArchetype.ASSASIN.ordinal();", "modifier": "private static final", "type": "byte", "declarator": "CHARACTER_ARCHETYPE = (byte) UserArchetype.ASSASIN.ordinal()", "var_name": "CHARACTER_ARCHETYPE"}, {"original_string": "private static final byte CHARACTER_RACE = (byte) Race.HUMAN.ordinal();", "modifier": "private static final", "type": "byte", "declarator": "CHARACTER_RACE = (byte) Race.HUMAN.ordinal()", "var_name": "CHARACTER_RACE"}, {"original_string": "private static final byte CHARACTER_GENDER = (byte) Gender.MALE.ordinal();", "modifier": "private static final", "type": "byte", "declarator": "CHARACTER_GENDER = (byte) Gender.MALE.ordinal()", "var_name": "CHARACTER_GENDER"}, {"original_string": "private static final byte CHARACTER_HOMELAND = 1;", "modifier": "private static final", "type": "byte", "declarator": "CHARACTER_HOMELAND = 1", "var_name": "CHARACTER_HOMELAND"}, {"original_string": "private static final byte CHARACTER_HEAD = 10;", "modifier": "private static final", "type": "byte", "declarator": "CHARACTER_HEAD = 10", "var_name": "CHARACTER_HEAD"}, {"original_string": "private static final String INVALID_CHARACTER_NAME = \" \";", "modifier": "private static final", "type": "String", "declarator": "INVALID_CHARACTER_NAME = \" \"", "var_name": "INVALID_CHARACTER_NAME"}, {"original_string": "private static final byte CLIENT_MAJOR = 0;", "modifier": "private static final", "type": "byte", "declarator": "CLIENT_MAJOR = 0", "var_name": "CLIENT_MAJOR"}, {"original_string": "private static final byte CLIENT_MINOR = 12;", "modifier": "private static final", "type": "byte", "declarator": "CLIENT_MINOR = 12", "var_name": "CLIENT_MINOR"}, {"original_string": "private static final byte CLIENT_VERSION = 2;", "modifier": "private static final", "type": "byte", "declarator": "CLIENT_VERSION = 2", "var_name": "CLIENT_VERSION"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IncomingPacket packet;", "modifier": "private", "type": "IncomingPacket", "declarator": "packet", "var_name": "packet"}, {"original_string": "private DataBuffer inputBuffer;", "modifier": "private", "type": "DataBuffer", "declarator": "inputBuffer", "var_name": "inputBuffer"}, {"original_string": "private ArgumentCaptor<ErrorMessagePacket> errPacket;", "modifier": "private", "type": "ArgumentCaptor<ErrorMessagePacket>", "declarator": "errPacket", "var_name": "errPacket"}, {"original_string": "private ServerConfig config;", "modifier": "private", "type": "ServerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private SecurityManager security;", "modifier": "private", "type": "SecurityManager", "declarator": "security", "var_name": "security"}, {"original_string": "private MapService mapService;", "modifier": "private", "type": "MapService", "declarator": "mapService", "var_name": "mapService"}], "file": "aoxp-server/src/test/java/com/ao/network/packet/incoming/LoginNewCharacterPacketTest.java"}, "test_case": {"identifier": "invalidRaceTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void invalidRaceTest() throws Exception {\n\t\twriteLogin(CHARACTER_NAME, CHARACTER_PASSWORD, CLIENT_MAJOR, CLIENT_MINOR,\n\t\t\t\tCLIENT_VERSION, \"\", (byte) -1, CHARACTER_GENDER, CHARACTER_ARCHETYPE,\n\t\t\t\tCHARACTER_HEAD, CHARACTER_MAIL, CHARACTER_HOMELAND);\n\n\t\tpacket.handle(inputBuffer, connection);\n\t\tverify(connection).send(errPacket.capture());\n\t\tassertEquals(LoginServiceImpl.INVALID_RACE_ERROR, errPacket.getValue().getMessage());\n\t}", "signature": "void invalidRaceTest()", "full_signature": "@Test public void invalidRaceTest()", "class_method_signature": "LoginNewCharacterPacketTest.invalidRaceTest()", "testcase": true, "constructor": false, "invocations": ["writeLogin", "handle", "send", "verify", "capture", "assertEquals", "getMessage", "getValue"]}, "focal_class": {"identifier": "LoginNewCharacterPacket", "superclass": "", "interfaces": "implements IncomingPacket", "fields": [{"original_string": "private static LoginService service = ApplicationContext.getInstance(LoginService.class);", "modifier": "private static", "type": "LoginService", "declarator": "service = ApplicationContext.getInstance(LoginService.class)", "var_name": "service"}, {"original_string": "private static SecurityManager security = ApplicationContext.getInstance(SecurityManager.class);", "modifier": "private static", "type": "SecurityManager", "declarator": "security = ApplicationContext.getInstance(SecurityManager.class)", "var_name": "security"}], "methods": [{"identifier": "handle", "parameters": "(DataBuffer buffer, Connection connection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handle(DataBuffer buffer, Connection connection)", "full_signature": "@Override public boolean handle(DataBuffer buffer, Connection connection)", "class_method_signature": "LoginNewCharacterPacket.handle(DataBuffer buffer, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "loginError", "parameters": "(Connection connection, String cause)", "modifiers": "private", "return": "void", "signature": "void loginError(Connection connection, String cause)", "full_signature": "private void loginError(Connection connection, String cause)", "class_method_signature": "LoginNewCharacterPacket.loginError(Connection connection, String cause)", "testcase": false, "constructor": false}], "file": "aoxp-server/src/main/java/com/ao/network/packet/incoming/LoginNewCharacterPacket.java"}, "focal_method": {"identifier": "handle", "parameters": "(DataBuffer buffer, Connection connection)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean handle(DataBuffer buffer, Connection connection) throws ArrayIndexOutOfBoundsException,\n\t\t\tUnsupportedEncodingException {\n\t\t// Check if there is enough data to attempt to read...\n\t\tif (buffer.getReadableBytes() < 12 + security.getPasswordHashLength() + security.getClientHashLength()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tString nick = buffer.getASCIIString();\n\t\tString password = buffer.getASCIIStringFixed(security.getPasswordHashLength());\n\n\t\t// FIXME : On the login these are shorts...\n\t\tString version = buffer.get() + \".\" + buffer.get() + \".\" + buffer.get();\n\t\tString clientHash = buffer.getASCIIStringFixed(security.getClientHashLength());\n\n\n\t\tbyte race = buffer.get();\n\t\tbyte gender = buffer.get();\n\t\tbyte archetype = buffer.get();\n\t\tint head = buffer.get();\n\t\tString mail = buffer.getASCIIString();\n\t\tbyte homeland = buffer.get();\n\n\t\ttry {\n\t\t\tservice.connectNewCharacter((ConnectedUser) connection.getUser(),\n\t\t\t\t\tnick, password, race, gender, archetype, head, mail,\n\t\t\t\t\thomeland, clientHash, version);\n\n\t\t} catch (LoginErrorException e) {\n\t\t\tloginError(connection, e.getMessage());\n\t\t}\n\n\t\treturn true;\n\t}", "signature": "boolean handle(DataBuffer buffer, Connection connection)", "full_signature": "@Override public boolean handle(DataBuffer buffer, Connection connection)", "class_method_signature": "LoginNewCharacterPacket.handle(DataBuffer buffer, Connection connection)", "testcase": false, "constructor": false, "invocations": ["getReadableBytes", "getPasswordHashLength", "getClientHashLength", "getASCIIString", "getASCIIStringFixed", "getPasswordHashLength", "get", "get", "get", "getASCIIStringFixed", "getClientHashLength", "get", "get", "get", "get", "getASCIIString", "get", "connectNewCharacter", "getUser", "loginError", "getMessage"]}, "repository": {"repo_id": 2791813, "url": "https://github.com/aoxp/AOXP-Server", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 6674, "license": "licensed"}}