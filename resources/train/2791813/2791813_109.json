{"test_class": {"identifier": "KeyTest", "superclass": "extends AbstractWorldObjectTest", "interfaces": "", "fields": [{"original_string": "private static final int CODE = 123;", "modifier": "private static final", "type": "int", "declarator": "CODE = 123", "var_name": "CODE"}, {"original_string": "private Key key1;", "modifier": "private", "type": "Key", "declarator": "key1", "var_name": "key1"}], "file": "aoxp-server/src/test/java/com/ao/model/worldobject/KeyTest.java"}, "test_case": {"identifier": "testClone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testClone() {\n\t\tfinal Key clone = (Key) key1.clone();\n\t\t\n\t\t// Make sure all fields match\n\t\tassertEquals(key1.amount, clone.amount);\n\t\tassertEquals(key1.properties, clone.properties);\n\t\t\n\t\t// Make sure the object itself is different\n\t\tassertNotSame(key1, clone);\n\n\t}", "signature": "void testClone()", "full_signature": "@Test public void testClone()", "class_method_signature": "KeyTest.testClone()", "testcase": true, "constructor": false, "invocations": ["clone", "assertEquals", "assertEquals", "assertNotSame"]}, "focal_class": {"identifier": "Key", "superclass": "extends AbstractItem", "interfaces": "", "fields": [], "methods": [{"identifier": "Key", "parameters": "(KeyProperties properties, int amount)", "modifiers": "public", "return": "", "signature": " Key(KeyProperties properties, int amount)", "full_signature": "public  Key(KeyProperties properties, int amount)", "class_method_signature": "Key.Key(KeyProperties properties, int amount)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Item", "signature": "Item clone()", "full_signature": "@Override public Item clone()", "class_method_signature": "Key.clone()", "testcase": false, "constructor": false}, {"identifier": "use", "parameters": "(Character character)", "modifiers": "@Override public", "return": "void", "signature": "void use(Character character)", "full_signature": "@Override public void use(Character character)", "class_method_signature": "Key.use(Character character)", "testcase": false, "constructor": false}, {"identifier": "getCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCode()", "full_signature": "public int getCode()", "class_method_signature": "Key.getCode()", "testcase": false, "constructor": false}], "file": "aoxp-server/src/main/java/com/ao/model/worldobject/Key.java"}, "focal_method": {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Item", "body": "@Override\n\tpublic Item clone() {\n\t\treturn new Key((KeyProperties) properties, amount);\n\t}", "signature": "Item clone()", "full_signature": "@Override public Item clone()", "class_method_signature": "Key.clone()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2791813, "url": "https://github.com/aoxp/AOXP-Server", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 6674, "license": "licensed"}}