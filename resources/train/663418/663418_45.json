{"test_class": {"identifier": "ToolsTest", "superclass": "", "interfaces": "", "fields": [], "file": "RestFixture/src/test/java/smartrics/rest/fitnesse/fixture/support/ToolsTest.java"}, "test_case": {"identifier": "mustNotMatchWhenRegexIsInvalidAndNotifyError", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void mustNotMatchWhenRegexIsInvalidAndNotifyError() {\n\t\tTools.regex(\"200\", \"40[]4\");\n\t\tfail(\"Should have thrown IAE as expression is invalid\");\n\t}", "signature": "void mustNotMatchWhenRegexIsInvalidAndNotifyError()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void mustNotMatchWhenRegexIsInvalidAndNotifyError()", "class_method_signature": "ToolsTest.mustNotMatchWhenRegexIsInvalidAndNotifyError()", "testcase": true, "constructor": false, "invocations": ["regex", "fail"]}, "focal_class": {"identifier": "Tools", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Tools", "parameters": "()", "modifiers": "private", "return": "", "signature": " Tools()", "full_signature": "private  Tools()", "class_method_signature": "Tools.Tools()", "testcase": false, "constructor": true}, {"identifier": "extractXPath", "parameters": "(String xpathExpression, String content)", "modifiers": "public static", "return": "NodeList", "signature": "NodeList extractXPath(String xpathExpression, String content)", "full_signature": "public static NodeList extractXPath(String xpathExpression, String content)", "class_method_signature": "Tools.extractXPath(String xpathExpression, String content)", "testcase": false, "constructor": false}, {"identifier": "toExpression", "parameters": "(String xpathExpression)", "modifiers": "private static", "return": "XPathExpression", "signature": "XPathExpression toExpression(String xpathExpression)", "full_signature": "private static XPathExpression toExpression(String xpathExpression)", "class_method_signature": "Tools.toExpression(String xpathExpression)", "testcase": false, "constructor": false}, {"identifier": "toDocument", "parameters": "(String content)", "modifiers": "private static", "return": "Document", "signature": "Document toDocument(String content)", "full_signature": "private static Document toDocument(String content)", "class_method_signature": "Tools.toDocument(String content)", "testcase": false, "constructor": false}, {"identifier": "fromJSONtoXML", "parameters": "(String jsonString)", "modifiers": "public static", "return": "String", "signature": "String fromJSONtoXML(String jsonString)", "full_signature": "public static String fromJSONtoXML(String jsonString)", "class_method_signature": "Tools.fromJSONtoXML(String jsonString)", "testcase": false, "constructor": false}, {"identifier": "extractXPath", "parameters": "(String xpathExpression, String content,\n\t\t\tQName returnType)", "modifiers": "public static", "return": "Object", "signature": "Object extractXPath(String xpathExpression, String content,\n\t\t\tQName returnType)", "full_signature": "public static Object extractXPath(String xpathExpression, String content,\n\t\t\tQName returnType)", "class_method_signature": "Tools.extractXPath(String xpathExpression, String content,\n\t\t\tQName returnType)", "testcase": false, "constructor": false}, {"identifier": "getStringFromInputStream", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String", "signature": "String getStringFromInputStream(InputStream is)", "full_signature": "public static String getStringFromInputStream(InputStream is)", "class_method_signature": "Tools.getStringFromInputStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getInputStreamFromString", "parameters": "(String string)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getInputStreamFromString(String string)", "full_signature": "public static InputStream getInputStreamFromString(String string)", "class_method_signature": "Tools.getInputStreamFromString(String string)", "testcase": false, "constructor": false}, {"identifier": "convertMapToString", "parameters": "(Map<String, String> map,\n\t\t\tString nvSep, String entrySep)", "modifiers": "public static", "return": "String", "signature": "String convertMapToString(Map<String, String> map,\n\t\t\tString nvSep, String entrySep)", "full_signature": "public static String convertMapToString(Map<String, String> map,\n\t\t\tString nvSep, String entrySep)", "class_method_signature": "Tools.convertMapToString(Map<String, String> map,\n\t\t\tString nvSep, String entrySep)", "testcase": false, "constructor": false}, {"identifier": "convertEntryToString", "parameters": "(String name, String value,\n\t\t\tString nvSep)", "modifiers": "public static", "return": "String", "signature": "String convertEntryToString(String name, String value,\n\t\t\tString nvSep)", "full_signature": "public static String convertEntryToString(String name, String value,\n\t\t\tString nvSep)", "class_method_signature": "Tools.convertEntryToString(String name, String value,\n\t\t\tString nvSep)", "testcase": false, "constructor": false}, {"identifier": "regex", "parameters": "(String text, String expr)", "modifiers": "public static", "return": "boolean", "signature": "boolean regex(String text, String expr)", "full_signature": "public static boolean regex(String text, String expr)", "class_method_signature": "Tools.regex(String text, String expr)", "testcase": false, "constructor": false}, {"identifier": "convertStringToMap", "parameters": "(final String expStr,\n\t\t\tfinal String nvSep, final String entrySep)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> convertStringToMap(final String expStr,\n\t\t\tfinal String nvSep, final String entrySep)", "full_signature": "public static Map<String, String> convertStringToMap(final String expStr,\n\t\t\tfinal String nvSep, final String entrySep)", "class_method_signature": "Tools.convertStringToMap(final String expStr,\n\t\t\tfinal String nvSep, final String entrySep)", "testcase": false, "constructor": false}, {"identifier": "toHtml", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String toHtml(String text)", "full_signature": "public static String toHtml(String text)", "class_method_signature": "Tools.toHtml(String text)", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String toJSON(String text)", "full_signature": "public static String toJSON(String text)", "class_method_signature": "Tools.toJSON(String text)", "testcase": false, "constructor": false}, {"identifier": "fromHtml", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String fromHtml(String text)", "full_signature": "public static String fromHtml(String text)", "class_method_signature": "Tools.fromHtml(String text)", "testcase": false, "constructor": false}], "file": "RestFixture/src/main/java/smartrics/rest/fitnesse/fixture/support/Tools.java"}, "focal_method": {"identifier": "regex", "parameters": "(String text, String expr)", "modifiers": "public static", "return": "boolean", "body": "public static boolean regex(String text, String expr) {\n\t\ttry {\n\t\t\tPattern p = Pattern.compile(expr);\n\t\t\tboolean find = p.matcher(text).find();\n\t\t\treturn find;\n\t\t} catch (PatternSyntaxException e) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid regex \" + expr);\n\t\t}\n\t}", "signature": "boolean regex(String text, String expr)", "full_signature": "public static boolean regex(String text, String expr)", "class_method_signature": "Tools.regex(String text, String expr)", "testcase": false, "constructor": false, "invocations": ["compile", "find", "matcher"]}, "repository": {"repo_id": 663418, "url": "https://github.com/tfredrich/rest-fixture", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 8272, "license": "licensed"}}