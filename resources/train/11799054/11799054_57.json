{"test_class": {"identifier": "HeaderParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final byte[] inputGap = { 1, 5, 0, 0, 3, 4, 0, 0, 0, 1, 2};", "modifier": "protected static final", "type": "byte[]", "declarator": "inputGap = { 1, 5, 0, 0, 3, 4, 0, 0, 0, 1, 2}", "var_name": "inputGap"}, {"original_string": "protected static final byte[] inputString = {\n        (byte)0xFE, (byte)0xFE, (byte)0x00, (byte)0x00, (byte)0x0A, (byte)0x00,\n        (byte)0x50, (byte)0x00, (byte)0x6C, (byte)0x00, (byte)0x61, (byte)0x00,\n        (byte)0x79, (byte)0x00, (byte)0x65, (byte)0x00, (byte)0x72, (byte)0x00,\n        (byte)0x44, (byte)0x00, (byte)0x61, (byte)0x00, (byte)0x74, (byte)0x00,\n        (byte)0x61, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x30,\n        (byte)0x00, (byte)0x31, (byte)0x00, (byte)0x2D, (byte)0x00, (byte)0x45,\n        (byte)0x00, (byte)0x6D, (byte)0x00, (byte)0x70, (byte)0x00, (byte)0x74,\n        (byte)0x00, (byte)0x79, (byte)0x00, (byte)0x06, (byte)0x8C, (byte)0x89\n    };", "modifier": "protected static final", "type": "byte[]", "declarator": "inputString = {\n        (byte)0xFE, (byte)0xFE, (byte)0x00, (byte)0x00, (byte)0x0A, (byte)0x00,\n        (byte)0x50, (byte)0x00, (byte)0x6C, (byte)0x00, (byte)0x61, (byte)0x00,\n        (byte)0x79, (byte)0x00, (byte)0x65, (byte)0x00, (byte)0x72, (byte)0x00,\n        (byte)0x44, (byte)0x00, (byte)0x61, (byte)0x00, (byte)0x74, (byte)0x00,\n        (byte)0x61, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x30,\n        (byte)0x00, (byte)0x31, (byte)0x00, (byte)0x2D, (byte)0x00, (byte)0x45,\n        (byte)0x00, (byte)0x6D, (byte)0x00, (byte)0x70, (byte)0x00, (byte)0x74,\n        (byte)0x00, (byte)0x79, (byte)0x00, (byte)0x06, (byte)0x8C, (byte)0x89\n    }", "var_name": "inputString"}], "file": "maps4cim-core/src/test/java/de/nx42/maps4cim/header/HeaderParserTest.java"}, "test_case": {"identifier": "testReadToGap2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadToGap2() throws Exception {\n        int expected = 6;\n        int actual = HeaderParser.readToGap(inputGap, 0, 3);\n        assertEquals(expected, actual);\n    }", "signature": "void testReadToGap2()", "full_signature": "@Test public void testReadToGap2()", "class_method_signature": "HeaderParserTest.testReadToGap2()", "testcase": true, "constructor": false, "invocations": ["readToGap", "assertEquals"]}, "focal_class": {"identifier": "HeaderParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(HeaderParser.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(HeaderParser.class)", "var_name": "log"}], "methods": [{"identifier": "parse", "parameters": "(File map)", "modifiers": "public static", "return": "CustomHeader", "signature": "CustomHeader parse(File map)", "full_signature": "public static CustomHeader parse(File map)", "class_method_signature": "HeaderParser.parse(File map)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(byte[] map)", "modifiers": "public static", "return": "CustomHeader", "signature": "CustomHeader parse(byte[] map)", "full_signature": "public static CustomHeader parse(byte[] map)", "class_method_signature": "HeaderParser.parse(byte[] map)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(ByteSource source)", "modifiers": "public static", "return": "CustomHeader", "signature": "CustomHeader parse(ByteSource source)", "full_signature": "public static CustomHeader parse(ByteSource source)", "class_method_signature": "HeaderParser.parse(ByteSource source)", "testcase": false, "constructor": false}, {"identifier": "getRelevantPart", "parameters": "(InputStream is)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] getRelevantPart(InputStream is)", "full_signature": "protected static byte[] getRelevantPart(InputStream is)", "class_method_signature": "HeaderParser.getRelevantPart(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "findEndOfHeader", "parameters": "(ByteSource source)", "modifiers": "public static", "return": "int", "signature": "int findEndOfHeader(ByteSource source)", "full_signature": "public static int findEndOfHeader(ByteSource source)", "class_method_signature": "HeaderParser.findEndOfHeader(ByteSource source)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(byte[] header)", "modifiers": "protected static", "return": "CustomHeader", "signature": "CustomHeader execute(byte[] header)", "full_signature": "protected static CustomHeader execute(byte[] header)", "class_method_signature": "HeaderParser.execute(byte[] header)", "testcase": false, "constructor": false}, {"identifier": "readToString", "parameters": "(byte[] header, int off)", "modifiers": "protected static", "return": "int", "signature": "int readToString(byte[] header, int off)", "full_signature": "protected static int readToString(byte[] header, int off)", "class_method_signature": "HeaderParser.readToString(byte[] header, int off)", "testcase": false, "constructor": false}, {"identifier": "isStringAt", "parameters": "(byte[] arr, int off)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isStringAt(byte[] arr, int off)", "full_signature": "protected static boolean isStringAt(byte[] arr, int off)", "class_method_signature": "HeaderParser.isStringAt(byte[] arr, int off)", "testcase": false, "constructor": false}, {"identifier": "readAfterString", "parameters": "(byte[] header, int off)", "modifiers": "protected static", "return": "int", "signature": "int readAfterString(byte[] header, int off)", "full_signature": "protected static int readAfterString(byte[] header, int off)", "class_method_signature": "HeaderParser.readAfterString(byte[] header, int off)", "testcase": false, "constructor": false}, {"identifier": "readAfterString", "parameters": "(byte[] header, int off, String s)", "modifiers": "protected static", "return": "int", "signature": "int readAfterString(byte[] header, int off, String s)", "full_signature": "protected static int readAfterString(byte[] header, int off, String s)", "class_method_signature": "HeaderParser.readAfterString(byte[] header, int off, String s)", "testcase": false, "constructor": false}, {"identifier": "readAfterBytes", "parameters": "(byte[] header, int off, byte[] b)", "modifiers": "protected static", "return": "int", "signature": "int readAfterBytes(byte[] header, int off, byte[] b)", "full_signature": "protected static int readAfterBytes(byte[] header, int off, byte[] b)", "class_method_signature": "HeaderParser.readAfterBytes(byte[] header, int off, byte[] b)", "testcase": false, "constructor": false}, {"identifier": "readToGap", "parameters": "(byte[] header, int off, int len)", "modifiers": "protected static", "return": "int", "signature": "int readToGap(byte[] header, int off, int len)", "full_signature": "protected static int readToGap(byte[] header, int off, int len)", "class_method_signature": "HeaderParser.readToGap(byte[] header, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "readAfterGap", "parameters": "(byte[] header, int off, int len)", "modifiers": "protected static", "return": "int", "signature": "int readAfterGap(byte[] header, int off, int len)", "full_signature": "protected static int readAfterGap(byte[] header, int off, int len)", "class_method_signature": "HeaderParser.readAfterGap(byte[] header, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "int24parse", "parameters": "(byte[] int24)", "modifiers": "protected static", "return": "int", "signature": "int int24parse(byte[] int24)", "full_signature": "protected static int int24parse(byte[] int24)", "class_method_signature": "HeaderParser.int24parse(byte[] int24)", "testcase": false, "constructor": false}, {"identifier": "parseHeaderString", "parameters": "(byte[] b, int off)", "modifiers": "protected static", "return": "String", "signature": "String parseHeaderString(byte[] b, int off)", "full_signature": "protected static String parseHeaderString(byte[] b, int off)", "class_method_signature": "HeaderParser.parseHeaderString(byte[] b, int off)", "testcase": false, "constructor": false}, {"identifier": "parseHeaderString", "parameters": "(byte[] b)", "modifiers": "protected static", "return": "String", "signature": "String parseHeaderString(byte[] b)", "full_signature": "protected static String parseHeaderString(byte[] b)", "class_method_signature": "HeaderParser.parseHeaderString(byte[] b)", "testcase": false, "constructor": false}], "file": "maps4cim-core/src/main/java/de/nx42/maps4cim/header/HeaderParser.java"}, "focal_method": {"identifier": "readToGap", "parameters": "(byte[] header, int off, int len)", "modifiers": "protected static", "return": "int", "body": "protected static int readToGap(byte[] header, int off, int len) {\n        return KMPMatch.indexOf(header, new byte[len], off);\n    }", "signature": "int readToGap(byte[] header, int off, int len)", "full_signature": "protected static int readToGap(byte[] header, int off, int len)", "class_method_signature": "HeaderParser.readToGap(byte[] header, int off, int len)", "testcase": false, "constructor": false, "invocations": ["indexOf"]}, "repository": {"repo_id": 11799054, "url": "https://github.com/klamann/maps4cim", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 1724, "license": "licensed"}}