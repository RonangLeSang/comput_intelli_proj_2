{"test_class": {"identifier": "RandomBorderExtenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SOURCE_WIDTH = 10;", "modifier": "private static final", "type": "int", "declarator": "SOURCE_WIDTH = 10", "var_name": "SOURCE_WIDTH"}, {"original_string": "private static final int BUFFER_WIDTH = 2;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_WIDTH = 2", "var_name": "BUFFER_WIDTH"}, {"original_string": "private final PlanarImage sourceImage;", "modifier": "private final", "type": "PlanarImage", "declarator": "sourceImage", "var_name": "sourceImage"}], "file": "utils/src/test/java/org/jaitools/imageutils/RandomBorderExtenderTest.java"}, "test_case": {"identifier": "testExtendDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtendDouble() {\n        // System.out.println(\"   image type DOUBLE\");\n\n        WritableRaster raster = createRaster(DataBuffer.TYPE_DOUBLE);\n\n        RandomBorderExtender ex = new RandomBorderExtender(-10, 10);\n        ex.extend(raster, sourceImage);\n\n        checkResultAsDouble(raster, sourceImage.getBounds(), -10, 10);\n    }", "signature": "void testExtendDouble()", "full_signature": "@Test public void testExtendDouble()", "class_method_signature": "RandomBorderExtenderTest.testExtendDouble()", "testcase": true, "constructor": false, "invocations": ["createRaster", "extend", "checkResultAsDouble", "getBounds"]}, "focal_class": {"identifier": "RandomBorderExtender", "superclass": "extends BorderExtender", "interfaces": "", "fields": [{"original_string": "private final Number minValueN;", "modifier": "private final", "type": "Number", "declarator": "minValueN", "var_name": "minValueN"}, {"original_string": "private final Number maxValueN;", "modifier": "private final", "type": "Number", "declarator": "maxValueN", "var_name": "maxValueN"}, {"original_string": "private final Random rand;", "modifier": "private final", "type": "Random", "declarator": "rand", "var_name": "rand"}], "methods": [{"identifier": "RandomBorderExtender", "parameters": "(Number minValue, Number maxValue)", "modifiers": "public", "return": "", "signature": " RandomBorderExtender(Number minValue, Number maxValue)", "full_signature": "public  RandomBorderExtender(Number minValue, Number maxValue)", "class_method_signature": "RandomBorderExtender.RandomBorderExtender(Number minValue, Number maxValue)", "testcase": false, "constructor": true}, {"identifier": "extend", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "@Override public", "return": "void", "signature": "void extend(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "@Override public void extend(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extend(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false}, {"identifier": "extendAsByte", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "private", "return": "void", "signature": "void extendAsByte(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "private void extendAsByte(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extendAsByte(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false}, {"identifier": "extendAsShort", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "private", "return": "void", "signature": "void extendAsShort(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "private void extendAsShort(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extendAsShort(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false}, {"identifier": "extendAsUShort", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "private", "return": "void", "signature": "void extendAsUShort(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "private void extendAsUShort(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extendAsUShort(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false}, {"identifier": "extendAsInt", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "private", "return": "void", "signature": "void extendAsInt(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "private void extendAsInt(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extendAsInt(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false}, {"identifier": "extendAsFloat", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "private", "return": "void", "signature": "void extendAsFloat(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "private void extendAsFloat(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extendAsFloat(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false}, {"identifier": "extendAsDouble", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "private", "return": "void", "signature": "void extendAsDouble(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "private void extendAsDouble(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extendAsDouble(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false}, {"identifier": "clamp", "parameters": "(long value, long min, long max)", "modifiers": "private", "return": "long", "signature": "long clamp(long value, long min, long max)", "full_signature": "private long clamp(long value, long min, long max)", "class_method_signature": "RandomBorderExtender.clamp(long value, long min, long max)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/jaitools/imageutils/RandomBorderExtender.java"}, "focal_method": {"identifier": "extend", "parameters": "(WritableRaster raster, PlanarImage sourceImage)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void extend(WritableRaster raster, PlanarImage sourceImage) {\n\n        int dataType = raster.getSampleModel().getDataType();\n        switch (dataType) {\n            case DataBuffer.TYPE_BYTE:\n                extendAsByte(raster, sourceImage);\n                break;\n\n            case DataBuffer.TYPE_SHORT:\n                extendAsShort(raster, sourceImage);\n                break;\n\n            case DataBuffer.TYPE_USHORT:\n                extendAsUShort(raster, sourceImage);\n                break;\n\n            case DataBuffer.TYPE_INT:\n                extendAsInt(raster, sourceImage);\n                break;\n\n            case DataBuffer.TYPE_FLOAT:\n                extendAsFloat(raster, sourceImage);\n                break;\n\n            case DataBuffer.TYPE_DOUBLE:\n                extendAsDouble(raster, sourceImage);\n                break;\n\n            default:\n                throw new UnsupportedOperationException(\"Unsupported data type\");\n        }\n    }", "signature": "void extend(WritableRaster raster, PlanarImage sourceImage)", "full_signature": "@Override public void extend(WritableRaster raster, PlanarImage sourceImage)", "class_method_signature": "RandomBorderExtender.extend(WritableRaster raster, PlanarImage sourceImage)", "testcase": false, "constructor": false, "invocations": ["getDataType", "getSampleModel", "extendAsByte", "extendAsShort", "extendAsUShort", "extendAsInt", "extendAsFloat", "extendAsDouble"]}, "repository": {"repo_id": 7623114, "url": "https://github.com/mbedward/jaitools", "stars": 14, "created": "1/15/2013 10:48:42 AM +00:00", "updates": "2018-10-23T16:04:20+00:00", "fork": "False", "license": "licensed"}}