{"test_class": {"identifier": "CompareOpTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/org/jaitools/numeric/CompareOpTest.java"}, "test_case": {"identifier": "aequalFloatsWithTol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void aequalFloatsWithTol() {\n        float tol = 0.1f;\n        float x1 = 42;\n        float x2 = x1 + tol * 10;\n        assertFalse(CompareOp.aequal(x1, x2, tol));\n        \n        x2 = x1 + tol / 10;\n        assertTrue(CompareOp.aequal(x1, x2, tol));\n    }", "signature": "void aequalFloatsWithTol()", "full_signature": "@Test public void aequalFloatsWithTol()", "class_method_signature": "CompareOpTest.aequalFloatsWithTol()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "aequal", "assertTrue", "aequal"]}, "focal_class": {"identifier": "CompareOp", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double DTOL = 1.0e-8d;", "modifier": "public static final", "type": "double", "declarator": "DTOL = 1.0e-8d", "var_name": "DTOL"}, {"original_string": "public static final float FTOL = 1.0e-4f;", "modifier": "public static final", "type": "float", "declarator": "FTOL = 1.0e-4f", "var_name": "FTOL"}], "methods": [{"identifier": "isZero", "parameters": "(double x)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZero(double x)", "full_signature": "public static boolean isZero(double x)", "class_method_signature": "CompareOp.isZero(double x)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(float x)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZero(float x)", "full_signature": "public static boolean isZero(float x)", "class_method_signature": "CompareOp.isZero(float x)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(double x, double tol)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZero(double x, double tol)", "full_signature": "public static boolean isZero(double x, double tol)", "class_method_signature": "CompareOp.isZero(double x, double tol)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(float x, float tol)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZero(float x, float tol)", "full_signature": "public static boolean isZero(float x, float tol)", "class_method_signature": "CompareOp.isZero(float x, float tol)", "testcase": false, "constructor": false}, {"identifier": "acompare", "parameters": "(double x1, double x2)", "modifiers": "public static", "return": "int", "signature": "int acompare(double x1, double x2)", "full_signature": "public static int acompare(double x1, double x2)", "class_method_signature": "CompareOp.acompare(double x1, double x2)", "testcase": false, "constructor": false}, {"identifier": "acompare", "parameters": "(float x1, float x2)", "modifiers": "public static", "return": "int", "signature": "int acompare(float x1, float x2)", "full_signature": "public static int acompare(float x1, float x2)", "class_method_signature": "CompareOp.acompare(float x1, float x2)", "testcase": false, "constructor": false}, {"identifier": "acompare", "parameters": "(double x1, double x2, double tol)", "modifiers": "public static", "return": "int", "signature": "int acompare(double x1, double x2, double tol)", "full_signature": "public static int acompare(double x1, double x2, double tol)", "class_method_signature": "CompareOp.acompare(double x1, double x2, double tol)", "testcase": false, "constructor": false}, {"identifier": "acompare", "parameters": "(float x1, float x2, float tol)", "modifiers": "public static", "return": "int", "signature": "int acompare(float x1, float x2, float tol)", "full_signature": "public static int acompare(float x1, float x2, float tol)", "class_method_signature": "CompareOp.acompare(float x1, float x2, float tol)", "testcase": false, "constructor": false}, {"identifier": "pcompare", "parameters": "(double x1, double x2, double propTol)", "modifiers": "public static", "return": "int", "signature": "int pcompare(double x1, double x2, double propTol)", "full_signature": "public static int pcompare(double x1, double x2, double propTol)", "class_method_signature": "CompareOp.pcompare(double x1, double x2, double propTol)", "testcase": false, "constructor": false}, {"identifier": "pcompare", "parameters": "(float x1, float x2, float propTol)", "modifiers": "public static", "return": "int", "signature": "int pcompare(float x1, float x2, float propTol)", "full_signature": "public static int pcompare(float x1, float x2, float propTol)", "class_method_signature": "CompareOp.pcompare(float x1, float x2, float propTol)", "testcase": false, "constructor": false}, {"identifier": "aequal", "parameters": "(double x1, double x2)", "modifiers": "public static", "return": "boolean", "signature": "boolean aequal(double x1, double x2)", "full_signature": "public static boolean aequal(double x1, double x2)", "class_method_signature": "CompareOp.aequal(double x1, double x2)", "testcase": false, "constructor": false}, {"identifier": "aequal", "parameters": "(float x1, float x2)", "modifiers": "public static", "return": "boolean", "signature": "boolean aequal(float x1, float x2)", "full_signature": "public static boolean aequal(float x1, float x2)", "class_method_signature": "CompareOp.aequal(float x1, float x2)", "testcase": false, "constructor": false}, {"identifier": "aequal", "parameters": "(double x1, double x2, double tol)", "modifiers": "public static", "return": "boolean", "signature": "boolean aequal(double x1, double x2, double tol)", "full_signature": "public static boolean aequal(double x1, double x2, double tol)", "class_method_signature": "CompareOp.aequal(double x1, double x2, double tol)", "testcase": false, "constructor": false}, {"identifier": "aequal", "parameters": "(float x1, float x2, float tol)", "modifiers": "public static", "return": "boolean", "signature": "boolean aequal(float x1, float x2, float tol)", "full_signature": "public static boolean aequal(float x1, float x2, float tol)", "class_method_signature": "CompareOp.aequal(float x1, float x2, float tol)", "testcase": false, "constructor": false}, {"identifier": "pequal", "parameters": "(double x1, double x2, double propTol)", "modifiers": "public static", "return": "boolean", "signature": "boolean pequal(double x1, double x2, double propTol)", "full_signature": "public static boolean pequal(double x1, double x2, double propTol)", "class_method_signature": "CompareOp.pequal(double x1, double x2, double propTol)", "testcase": false, "constructor": false}, {"identifier": "pequal", "parameters": "(float x1, float x2, float propTol)", "modifiers": "public static", "return": "boolean", "signature": "boolean pequal(float x1, float x2, float propTol)", "full_signature": "public static boolean pequal(float x1, float x2, float propTol)", "class_method_signature": "CompareOp.pequal(float x1, float x2, float propTol)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/jaitools/numeric/CompareOp.java"}, "focal_method": {"identifier": "aequal", "parameters": "(double x1, double x2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean aequal(double x1, double x2) {\n        return isZero(x1 - x2);\n    }", "signature": "boolean aequal(double x1, double x2)", "full_signature": "public static boolean aequal(double x1, double x2)", "class_method_signature": "CompareOp.aequal(double x1, double x2)", "testcase": false, "constructor": false, "invocations": ["isZero"]}, "repository": {"repo_id": 7623114, "url": "https://github.com/mbedward/jaitools", "stars": 14, "created": "1/15/2013 10:48:42 AM +00:00", "updates": "2018-10-23T16:04:20+00:00", "fork": "False", "license": "licensed"}}