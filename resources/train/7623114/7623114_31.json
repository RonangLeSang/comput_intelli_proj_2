{"test_class": {"identifier": "SampleStatsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-8;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-8", "var_name": "TOL"}, {"original_string": "static final Double[] values;", "modifier": "static final", "type": "Double[]", "declarator": "values", "var_name": "values"}, {"original_string": "static final Double[] singleValue = { 42.0 };", "modifier": "static final", "type": "Double[]", "declarator": "singleValue = { 42.0 }", "var_name": "singleValue"}], "file": "utils/src/test/java/org/jaitools/numeric/SampleStatsTest.java"}, "test_case": {"identifier": "testMaxSingleValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMaxSingleValue() {\n        // System.out.println(\"   max with single value\");\n        assertEquals(singleValue[0], Double.valueOf(SampleStats.max(singleValue, true)));\n    }", "signature": "void testMaxSingleValue()", "full_signature": "@Test public void testMaxSingleValue()", "class_method_signature": "SampleStatsTest.testMaxSingleValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "valueOf", "max"]}, "focal_class": {"identifier": "SampleStats", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "max", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double max(Double[] values, boolean ignoreNaN)", "full_signature": "public static double max(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.max(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double mean(Double[] values, boolean ignoreNaN)", "full_signature": "public static double mean(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.mean(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double min(Double[] values, boolean ignoreNaN)", "full_signature": "public static double min(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.min(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "@SuppressWarnings(\"empty-statement\") public static", "return": "double", "signature": "double median(Double[] values, boolean ignoreNaN)", "full_signature": "@SuppressWarnings(\"empty-statement\") public static double median(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.median(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "mode", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "@SuppressWarnings(\"empty-statement\") public static", "return": "double", "signature": "double mode(Double[] values, boolean ignoreNaN)", "full_signature": "@SuppressWarnings(\"empty-statement\") public static double mode(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.mode(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double range(Double[] values, boolean ignoreNaN)", "full_signature": "public static double range(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.range(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double variance(Double[] values, boolean ignoreNaN)", "full_signature": "public static double variance(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.variance(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "sdev", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double sdev(Double[] values, boolean ignoreNaN)", "full_signature": "public static double sdev(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.sdev(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double sum(Double[] values, boolean ignoreNaN)", "full_signature": "public static double sum(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.sum(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/jaitools/numeric/SampleStats.java"}, "focal_method": {"identifier": "max", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "body": "public static double max(Double[] values, boolean ignoreNaN) {\n        if (values == null || values.length == 0) {\n            return Double.NaN;\n        } else if (values.length == 1) {\n            return values[0];\n        }\n        \n        SortedSet<Double> set = CollectionFactory.sortedSet();\n        set.addAll(Arrays.asList(values));\n        if (ignoreNaN) set.remove(Double.NaN);\n        return set.last();\n    }", "signature": "double max(Double[] values, boolean ignoreNaN)", "full_signature": "public static double max(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.max(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false, "invocations": ["sortedSet", "addAll", "asList", "remove", "last"]}, "repository": {"repo_id": 7623114, "url": "https://github.com/mbedward/jaitools", "stars": 14, "created": "1/15/2013 10:48:42 AM +00:00", "updates": "2018-10-23T16:04:20+00:00", "fork": "False", "license": "licensed"}}