{"test_class": {"identifier": "ROIGeometryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static GeometryFactory gf = new GeometryFactory();", "modifier": "private static", "type": "GeometryFactory", "declarator": "gf = new GeometryFactory()", "var_name": "gf"}], "file": "utils/src/test/java/org/jaitools/imageutils/ROIGeometryTest.java"}, "test_case": {"identifier": "testGetThreshold", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void testGetThreshold() {\n        // System.out.println(\"getThreshold\");\n        fail(\"not implemented\");\n    }", "signature": "void testGetThreshold()", "full_signature": "@Ignore @Test public void testGetThreshold()", "class_method_signature": "ROIGeometryTest.testGetThreshold()", "testcase": true, "constructor": false, "invocations": ["fail"]}, "focal_class": {"identifier": "ROIGeometry", "superclass": "extends ROI", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ROIGeometry.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ROIGeometry.class.getName())", "var_name": "LOGGER"}, {"original_string": "public static final boolean DEFAULT_ROIGEOMETRY_ANTIALISING = true;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_ROIGEOMETRY_ANTIALISING = true", "var_name": "DEFAULT_ROIGEOMETRY_ANTIALISING"}, {"original_string": "public static final boolean DEFAULT_ROIGEOMETRY_USEFIXEDPRECISION = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_ROIGEOMETRY_USEFIXEDPRECISION = false", "var_name": "DEFAULT_ROIGEOMETRY_USEFIXEDPRECISION"}, {"original_string": "private boolean useAntialiasing = DEFAULT_ROIGEOMETRY_ANTIALISING;", "modifier": "private", "type": "boolean", "declarator": "useAntialiasing = DEFAULT_ROIGEOMETRY_ANTIALISING", "var_name": "useAntialiasing"}, {"original_string": "private boolean useFixedPrecision = DEFAULT_ROIGEOMETRY_USEFIXEDPRECISION;", "modifier": "private", "type": "boolean", "declarator": "useFixedPrecision = DEFAULT_ROIGEOMETRY_USEFIXEDPRECISION", "var_name": "useFixedPrecision"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final AffineTransformation Y_INVERSION = new AffineTransformation(1, 0, 0, 0, -1, 0);", "modifier": "private static final", "type": "AffineTransformation", "declarator": "Y_INVERSION = new AffineTransformation(1, 0, 0, 0, -1, 0)", "var_name": "Y_INVERSION"}, {"original_string": "private static final String UNSUPPORTED_ROI_TYPE = \n            \"The argument be either an ROIGeometry or an ROIShape\";", "modifier": "private static final", "type": "String", "declarator": "UNSUPPORTED_ROI_TYPE = \n            \"The argument be either an ROIGeometry or an ROIShape\"", "var_name": "UNSUPPORTED_ROI_TYPE"}, {"original_string": "private final PreparedGeometry theGeom;", "modifier": "private final", "type": "PreparedGeometry", "declarator": "theGeom", "var_name": "theGeom"}, {"original_string": "private volatile PlanarImage roiImage;", "modifier": "private volatile", "type": "PlanarImage", "declarator": "roiImage", "var_name": "roiImage"}, {"original_string": "private final GeometryFactory geomFactory;", "modifier": "private final", "type": "GeometryFactory", "declarator": "geomFactory", "var_name": "geomFactory"}, {"original_string": "private final static double tolerance = 1d;", "modifier": "private final static", "type": "double", "declarator": "tolerance = 1d", "var_name": "tolerance"}, {"original_string": "private final static PrecisionModel PRECISION = new PrecisionModel(tolerance);", "modifier": "private final static", "type": "PrecisionModel", "declarator": "PRECISION = new PrecisionModel(tolerance)", "var_name": "PRECISION"}, {"original_string": "private final static GeometryFactory PRECISE_FACTORY = new GeometryFactory(PRECISION);", "modifier": "private final static", "type": "GeometryFactory", "declarator": "PRECISE_FACTORY = new GeometryFactory(PRECISION)", "var_name": "PRECISE_FACTORY"}, {"original_string": "private final static PrecisionModel FLOAT_PRECISION = new PrecisionModel(PrecisionModel.FLOATING_SINGLE);", "modifier": "private final static", "type": "PrecisionModel", "declarator": "FLOAT_PRECISION = new PrecisionModel(PrecisionModel.FLOATING_SINGLE)", "var_name": "FLOAT_PRECISION"}, {"original_string": "private final static GeometryFactory FLOAT_PRECISION_FACTORY = new GeometryFactory(FLOAT_PRECISION);", "modifier": "private final static", "type": "GeometryFactory", "declarator": "FLOAT_PRECISION_FACTORY = new GeometryFactory(FLOAT_PRECISION)", "var_name": "FLOAT_PRECISION_FACTORY"}, {"original_string": "private final CoordinateSequence2D testPointCS;", "modifier": "private final", "type": "CoordinateSequence2D", "declarator": "testPointCS", "var_name": "testPointCS"}, {"original_string": "private final org.locationtech.jts.geom.Point testPoint;", "modifier": "private final", "type": "org.locationtech.jts.geom.Point", "declarator": "testPoint", "var_name": "testPoint"}, {"original_string": "private final CoordinateSequence2D testRectCS;", "modifier": "private final", "type": "CoordinateSequence2D", "declarator": "testRectCS", "var_name": "testRectCS"}, {"original_string": "private final Polygon testRect;", "modifier": "private final", "type": "Polygon", "declarator": "testRect", "var_name": "testRect"}, {"original_string": "private RenderingHints hints;", "modifier": "private", "type": "RenderingHints", "declarator": "hints", "var_name": "hints"}], "methods": [{"identifier": "ROIGeometry", "parameters": "(Geometry geom)", "modifiers": "public", "return": "", "signature": " ROIGeometry(Geometry geom)", "full_signature": "public  ROIGeometry(Geometry geom)", "class_method_signature": "ROIGeometry.ROIGeometry(Geometry geom)", "testcase": false, "constructor": true}, {"identifier": "ROIGeometry", "parameters": "(Geometry geom, final boolean useFixedPrecision)", "modifiers": "public", "return": "", "signature": " ROIGeometry(Geometry geom, final boolean useFixedPrecision)", "full_signature": "public  ROIGeometry(Geometry geom, final boolean useFixedPrecision)", "class_method_signature": "ROIGeometry.ROIGeometry(Geometry geom, final boolean useFixedPrecision)", "testcase": false, "constructor": true}, {"identifier": "ROIGeometry", "parameters": "(Geometry geom, final boolean antiAliasing, final boolean useFixedPrecision)", "modifiers": "public", "return": "", "signature": " ROIGeometry(Geometry geom, final boolean antiAliasing, final boolean useFixedPrecision)", "full_signature": "public  ROIGeometry(Geometry geom, final boolean antiAliasing, final boolean useFixedPrecision)", "class_method_signature": "ROIGeometry.ROIGeometry(Geometry geom, final boolean antiAliasing, final boolean useFixedPrecision)", "testcase": false, "constructor": true}, {"identifier": "ROIGeometry", "parameters": "(Geometry geom, final RenderingHints hints)", "modifiers": "public", "return": "", "signature": " ROIGeometry(Geometry geom, final RenderingHints hints)", "full_signature": "public  ROIGeometry(Geometry geom, final RenderingHints hints)", "class_method_signature": "ROIGeometry.ROIGeometry(Geometry geom, final RenderingHints hints)", "testcase": false, "constructor": true}, {"identifier": "ROIGeometry", "parameters": "(Geometry geom, final boolean antiAliasing, \n            final boolean useFixedPrecision, final RenderingHints hints)", "modifiers": "public", "return": "", "signature": " ROIGeometry(Geometry geom, final boolean antiAliasing, \n            final boolean useFixedPrecision, final RenderingHints hints)", "full_signature": "public  ROIGeometry(Geometry geom, final boolean antiAliasing, \n            final boolean useFixedPrecision, final RenderingHints hints)", "class_method_signature": "ROIGeometry.ROIGeometry(Geometry geom, final boolean antiAliasing, \n            final boolean useFixedPrecision, final RenderingHints hints)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(ROI roi)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI add(ROI roi)", "full_signature": "@Override public ROI add(ROI roi)", "class_method_signature": "ROIGeometry.add(ROI roi)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Point p)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Point p)", "full_signature": "@Override public boolean contains(Point p)", "class_method_signature": "ROIGeometry.contains(Point p)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Point2D p)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Point2D p)", "full_signature": "@Override public boolean contains(Point2D p)", "class_method_signature": "ROIGeometry.contains(Point2D p)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int x, int y)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int x, int y)", "full_signature": "@Override public boolean contains(int x, int y)", "class_method_signature": "ROIGeometry.contains(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(double x, double y)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(double x, double y)", "full_signature": "@Override public boolean contains(double x, double y)", "class_method_signature": "ROIGeometry.contains(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Rectangle rect)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Rectangle rect)", "full_signature": "@Override public boolean contains(Rectangle rect)", "class_method_signature": "ROIGeometry.contains(Rectangle rect)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Rectangle2D rect)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Rectangle2D rect)", "full_signature": "@Override public boolean contains(Rectangle2D rect)", "class_method_signature": "ROIGeometry.contains(Rectangle2D rect)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int x, int y, int w, int h)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int x, int y, int w, int h)", "full_signature": "@Override public boolean contains(int x, int y, int w, int h)", "class_method_signature": "ROIGeometry.contains(int x, int y, int w, int h)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(double x, double y, double w, double h)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(double x, double y, double w, double h)", "full_signature": "@Override public boolean contains(double x, double y, double w, double h)", "class_method_signature": "ROIGeometry.contains(double x, double y, double w, double h)", "testcase": false, "constructor": false}, {"identifier": "exclusiveOr", "parameters": "(ROI roi)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI exclusiveOr(ROI roi)", "full_signature": "@Override public ROI exclusiveOr(ROI roi)", "class_method_signature": "ROIGeometry.exclusiveOr(ROI roi)", "testcase": false, "constructor": false}, {"identifier": "getAsBitmask", "parameters": "(int x, int y, int width, int height, int[][] mask)", "modifiers": "@Override public", "return": "int[][]", "signature": "int[][] getAsBitmask(int x, int y, int width, int height, int[][] mask)", "full_signature": "@Override public int[][] getAsBitmask(int x, int y, int width, int height, int[][] mask)", "class_method_signature": "ROIGeometry.getAsBitmask(int x, int y, int width, int height, int[][] mask)", "testcase": false, "constructor": false}, {"identifier": "getAsImage", "parameters": "()", "modifiers": "@Override public", "return": "PlanarImage", "signature": "PlanarImage getAsImage()", "full_signature": "@Override public PlanarImage getAsImage()", "class_method_signature": "ROIGeometry.getAsImage()", "testcase": false, "constructor": false}, {"identifier": "getAsRectangleList", "parameters": "(int x, int y, int width, int height)", "modifiers": "@Override public", "return": "LinkedList", "signature": "LinkedList getAsRectangleList(int x, int y, int width, int height)", "full_signature": "@Override public LinkedList getAsRectangleList(int x, int y, int width, int height)", "class_method_signature": "ROIGeometry.getAsRectangleList(int x, int y, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "getAsRectangleList", "parameters": "(int x, int y, int width, int height, boolean mergeRectangles)", "modifiers": "@Override protected", "return": "LinkedList", "signature": "LinkedList getAsRectangleList(int x, int y, int width, int height, boolean mergeRectangles)", "full_signature": "@Override protected LinkedList getAsRectangleList(int x, int y, int width, int height, boolean mergeRectangles)", "class_method_signature": "ROIGeometry.getAsRectangleList(int x, int y, int width, int height, boolean mergeRectangles)", "testcase": false, "constructor": false}, {"identifier": "getAsShape", "parameters": "()", "modifiers": "@Override public", "return": "Shape", "signature": "Shape getAsShape()", "full_signature": "@Override public Shape getAsShape()", "class_method_signature": "ROIGeometry.getAsShape()", "testcase": false, "constructor": false}, {"identifier": "getAsGeometry", "parameters": "()", "modifiers": "public", "return": "Geometry", "signature": "Geometry getAsGeometry()", "full_signature": "public Geometry getAsGeometry()", "class_method_signature": "ROIGeometry.getAsGeometry()", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "()", "modifiers": "@Override public", "return": "Rectangle", "signature": "Rectangle getBounds()", "full_signature": "@Override public Rectangle getBounds()", "class_method_signature": "ROIGeometry.getBounds()", "testcase": false, "constructor": false}, {"identifier": "getBounds2D", "parameters": "()", "modifiers": "@Override public", "return": "Rectangle2D", "signature": "Rectangle2D getBounds2D()", "full_signature": "@Override public Rectangle2D getBounds2D()", "class_method_signature": "ROIGeometry.getBounds2D()", "testcase": false, "constructor": false}, {"identifier": "getThreshold", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getThreshold()", "full_signature": "@Override public int getThreshold()", "class_method_signature": "ROIGeometry.getThreshold()", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(ROI roi)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI intersect(ROI roi)", "full_signature": "@Override public ROI intersect(ROI roi)", "class_method_signature": "ROIGeometry.intersect(ROI roi)", "testcase": false, "constructor": false}, {"identifier": "getGeometry", "parameters": "(ROI roi)", "modifiers": "private", "return": "Geometry", "signature": "Geometry getGeometry(ROI roi)", "full_signature": "private Geometry getGeometry(ROI roi)", "class_method_signature": "ROIGeometry.getGeometry(ROI roi)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Rectangle rect)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(Rectangle rect)", "full_signature": "@Override public boolean intersects(Rectangle rect)", "class_method_signature": "ROIGeometry.intersects(Rectangle rect)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Rectangle2D rect)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(Rectangle2D rect)", "full_signature": "@Override public boolean intersects(Rectangle2D rect)", "class_method_signature": "ROIGeometry.intersects(Rectangle2D rect)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(int x, int y, int w, int h)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(int x, int y, int w, int h)", "full_signature": "@Override public boolean intersects(int x, int y, int w, int h)", "class_method_signature": "ROIGeometry.intersects(int x, int y, int w, int h)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(double x, double y, double w, double h)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(double x, double y, double w, double h)", "full_signature": "@Override public boolean intersects(double x, double y, double w, double h)", "class_method_signature": "ROIGeometry.intersects(double x, double y, double w, double h)", "testcase": false, "constructor": false}, {"identifier": "performImageOp", "parameters": "(RenderedImageFactory RIF, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI performImageOp(RenderedImageFactory RIF, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "full_signature": "@Override public ROI performImageOp(RenderedImageFactory RIF, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "class_method_signature": "ROIGeometry.performImageOp(RenderedImageFactory RIF, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "testcase": false, "constructor": false}, {"identifier": "performImageOp", "parameters": "(String name, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI performImageOp(String name, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "full_signature": "@Override public ROI performImageOp(String name, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "class_method_signature": "ROIGeometry.performImageOp(String name, ParameterBlock paramBlock, int sourceIndex, RenderingHints renderHints)", "testcase": false, "constructor": false}, {"identifier": "setThreshold", "parameters": "(int threshold)", "modifiers": "@Override public", "return": "void", "signature": "void setThreshold(int threshold)", "full_signature": "@Override public void setThreshold(int threshold)", "class_method_signature": "ROIGeometry.setThreshold(int threshold)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(ROI roi)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI subtract(ROI roi)", "full_signature": "@Override public ROI subtract(ROI roi)", "class_method_signature": "ROIGeometry.subtract(ROI roi)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(AffineTransform at, Interpolation interp)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI transform(AffineTransform at, Interpolation interp)", "full_signature": "@Override public ROI transform(AffineTransform at, Interpolation interp)", "class_method_signature": "ROIGeometry.transform(AffineTransform at, Interpolation interp)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(AffineTransform at)", "modifiers": "@Override public", "return": "ROI", "signature": "ROI transform(AffineTransform at)", "full_signature": "@Override public ROI transform(AffineTransform at)", "class_method_signature": "ROIGeometry.transform(AffineTransform at)", "testcase": false, "constructor": false}, {"identifier": "setTestRect", "parameters": "(double x, double y, double w, double h)", "modifiers": "private", "return": "void", "signature": "void setTestRect(double x, double y, double w, double h)", "full_signature": "private void setTestRect(double x, double y, double w, double h)", "class_method_signature": "ROIGeometry.setTestRect(double x, double y, double w, double h)", "testcase": false, "constructor": false}, {"identifier": "buildROIGeometry", "parameters": "(Geometry geometry)", "modifiers": "private", "return": "ROI", "signature": "ROI buildROIGeometry(Geometry geometry)", "full_signature": "private ROI buildROIGeometry(Geometry geometry)", "class_method_signature": "ROIGeometry.buildROIGeometry(Geometry geometry)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/jaitools/imageutils/ROIGeometry.java"}, "focal_method": {"identifier": "getThreshold", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getThreshold() {\n        throw new UnsupportedOperationException(\"Not implemented\");\n    }", "signature": "int getThreshold()", "full_signature": "@Override public int getThreshold()", "class_method_signature": "ROIGeometry.getThreshold()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7623114, "url": "https://github.com/mbedward/jaitools", "stars": 14, "created": "1/15/2013 10:48:42 AM +00:00", "updates": "2018-10-23T16:04:20+00:00", "fork": "False", "license": "licensed"}}