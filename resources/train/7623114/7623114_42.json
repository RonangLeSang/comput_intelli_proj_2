{"test_class": {"identifier": "SampleStatsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-8;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-8", "var_name": "TOL"}, {"original_string": "static final Double[] values;", "modifier": "static final", "type": "Double[]", "declarator": "values", "var_name": "values"}, {"original_string": "static final Double[] singleValue = { 42.0 };", "modifier": "static final", "type": "Double[]", "declarator": "singleValue = { 42.0 }", "var_name": "singleValue"}], "file": "utils/src/test/java/org/jaitools/numeric/SampleStatsTest.java"}, "test_case": {"identifier": "testVarianceSingleValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVarianceSingleValue() {\n        // System.out.println(\"   variance with single value\");\n        assertTrue(Double.isNaN(SampleStats.variance(singleValue, true)));\n    }", "signature": "void testVarianceSingleValue()", "full_signature": "@Test public void testVarianceSingleValue()", "class_method_signature": "SampleStatsTest.testVarianceSingleValue()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isNaN", "variance"]}, "focal_class": {"identifier": "SampleStats", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "max", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double max(Double[] values, boolean ignoreNaN)", "full_signature": "public static double max(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.max(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double mean(Double[] values, boolean ignoreNaN)", "full_signature": "public static double mean(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.mean(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double min(Double[] values, boolean ignoreNaN)", "full_signature": "public static double min(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.min(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "@SuppressWarnings(\"empty-statement\") public static", "return": "double", "signature": "double median(Double[] values, boolean ignoreNaN)", "full_signature": "@SuppressWarnings(\"empty-statement\") public static double median(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.median(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "mode", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "@SuppressWarnings(\"empty-statement\") public static", "return": "double", "signature": "double mode(Double[] values, boolean ignoreNaN)", "full_signature": "@SuppressWarnings(\"empty-statement\") public static double mode(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.mode(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double range(Double[] values, boolean ignoreNaN)", "full_signature": "public static double range(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.range(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double variance(Double[] values, boolean ignoreNaN)", "full_signature": "public static double variance(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.variance(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "sdev", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double sdev(Double[] values, boolean ignoreNaN)", "full_signature": "public static double sdev(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.sdev(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "signature": "double sum(Double[] values, boolean ignoreNaN)", "full_signature": "public static double sum(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.sum(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/jaitools/numeric/SampleStats.java"}, "focal_method": {"identifier": "variance", "parameters": "(Double[] values, boolean ignoreNaN)", "modifiers": "public static", "return": "double", "body": "public static double variance(Double[] values, boolean ignoreNaN) {\n        if (values.length < 2) {\n            return Double.NaN;\n        }\n\n        double mNew, mOld = 0.0d, s = 0.0d;\n\n        int n = 0;\n        for (int i = 0; i < values.length; i++) {\n            if (Double.isNaN(values[i])) {\n                if (!ignoreNaN) {\n                    return Double.NaN;\n                }\n                \n            } else {\n                n++;\n                if (n == 1) {\n                    mNew = mOld = values[i];\n                } else {\n                    mNew = mOld + (values[i] - mOld) / n;\n                    s = s + (values[i] - mOld) * (values[i] - mNew);\n                    mOld = mNew;\n                }\n            }\n        }\n\n        if (n > 1) {\n            return s / (n - 1);\n        } else if (n == 1) {\n            return 0.0d;\n        } else {\n            return Double.NaN;\n        }\n    }", "signature": "double variance(Double[] values, boolean ignoreNaN)", "full_signature": "public static double variance(Double[] values, boolean ignoreNaN)", "class_method_signature": "SampleStats.variance(Double[] values, boolean ignoreNaN)", "testcase": false, "constructor": false, "invocations": ["isNaN"]}, "repository": {"repo_id": 7623114, "url": "https://github.com/mbedward/jaitools", "stars": 14, "created": "1/15/2013 10:48:42 AM +00:00", "updates": "2018-10-23T16:04:20+00:00", "fork": "False", "license": "licensed"}}