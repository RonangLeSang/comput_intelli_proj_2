{"test_class": {"identifier": "TestMavenGoals", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MavenContext ctx;", "modifier": "private", "type": "MavenContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private MavenProject project;", "modifier": "private", "type": "MavenProject", "declarator": "project", "var_name": "project"}, {"original_string": "private Build build;", "modifier": "private", "type": "Build", "declarator": "build", "var_name": "build"}, {"original_string": "private MavenGoals goals;", "modifier": "private", "type": "MavenGoals", "declarator": "goals", "var_name": "goals"}], "file": "maven-amps-plugin/src/test/java/com/atlassian/maven/plugins/amps/TestMavenGoals.java"}, "test_case": {"identifier": "testGenerateMinimalManifest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateMinimalManifest() throws Exception\n    {\n        File tempDir = File.createTempFile(\"TestMavenGoals\", \"dir\");\n        tempDir.delete();\n        tempDir.mkdir();\n        \n        when(build.getOutputDirectory()).thenReturn(tempDir.getAbsolutePath());\n\n        Map<String, String> attrs = ImmutableMap.of(\"Attribute-A\", \"aaa\", \"Attribute-B\", \"bbb\");\n        \n        goals.generateMinimalManifest(attrs);\n        \n        File mf = file(tempDir.getAbsolutePath(), \"META-INF\", \"MANIFEST.MF\");\n        assertTrue(mf.exists());\n        \n        Manifest m = new Manifest(new FileInputStream(mf));\n        assertEquals(\"aaa\", m.getMainAttributes().getValue(\"Attribute-A\"));\n        assertEquals(\"bbb\", m.getMainAttributes().getValue(\"Attribute-B\"));\n        assertNull(m.getMainAttributes().getValue(\"Bundle-SymbolicName\"));\n    }", "signature": "void testGenerateMinimalManifest()", "full_signature": "@Test public void testGenerateMinimalManifest()", "class_method_signature": "TestMavenGoals.testGenerateMinimalManifest()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "delete", "mkdir", "thenReturn", "when", "getOutputDirectory", "getAbsolutePath", "of", "generateMinimalManifest", "file", "getAbsolutePath", "assertTrue", "exists", "assertEquals", "getValue", "getMainAttributes", "assertEquals", "getValue", "getMainAttributes", "assertNull", "getValue", "getMainAttributes"]}, "focal_class": {"identifier": "MavenGoals", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MavenContext ctx;", "modifier": "private final", "type": "MavenContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private final Log log;", "modifier": "private final", "type": "Log", "declarator": "log", "var_name": "log"}, {"original_string": "private final Map<String, String> pluginArtifactIdToVersionMap;", "modifier": "private final", "type": "Map<String, String>", "declarator": "pluginArtifactIdToVersionMap", "var_name": "pluginArtifactIdToVersionMap"}, {"original_string": "private final Map<String, Container> idToContainerMap = new HashMap<String, Container>()\n    {{\n            put(\"tomcat5x\", new Container(\"tomcat5x\", \"org.apache.tomcat\", \"apache-tomcat\", \"5.5.26\"));\n            put(\"tomcat6x\", new Container(\"tomcat6x\", \"org.apache.tomcat\", \"apache-tomcat\", \"6.0.20\"));\n            put(\"resin3x\", new Container(\"resin3x\", \"com.caucho\", \"resin\", \"3.0.26\"));\n            put(\"jboss42x\", new Container(\"jboss42x\", \"org.jboss.jbossas\", \"jbossas\", \"4.2.3.GA\"));\n            put(\"jetty6x\", new Container(\"jetty6x\"));\n        }};", "modifier": "private final", "type": "Map<String, Container>", "declarator": "idToContainerMap = new HashMap<String, Container>()\n    {{\n            put(\"tomcat5x\", new Container(\"tomcat5x\", \"org.apache.tomcat\", \"apache-tomcat\", \"5.5.26\"));\n            put(\"tomcat6x\", new Container(\"tomcat6x\", \"org.apache.tomcat\", \"apache-tomcat\", \"6.0.20\"));\n            put(\"resin3x\", new Container(\"resin3x\", \"com.caucho\", \"resin\", \"3.0.26\"));\n            put(\"jboss42x\", new Container(\"jboss42x\", \"org.jboss.jbossas\", \"jbossas\", \"4.2.3.GA\"));\n            put(\"jetty6x\", new Container(\"jetty6x\"));\n        }}", "var_name": "idToContainerMap"}, {"original_string": "private final Map<String, String> defaultArtifactIdToVersionMap = new HashMap<String, String>()\n    {{\n            put(\"maven-cli-plugin\", \"0.7\");\n            put(\"cargo-maven2-plugin\", \"1.0-beta-2-db2\");\n            // Below is a second definition of 'cargo-maven2-plugin', using CodeHaus instead of TwData.\n            put(\"org.codehaus.cargo:cargo-maven2-plugin\", \"1.1.3\");\n            put(\"atlassian-pdk\", \"2.3.0\");\n            put(\"maven-archetype-plugin\", \"2.0-alpha-4\");\n            put(\"maven-bundle-plugin\", \"2.0.0\");\n            put(\"yuicompressor-maven-plugin\", \"0.7.1\");\n            put(\"build-helper-maven-plugin\", \"1.7\");\n\n            // You can't actually override the version a plugin if defined in the project, so these don't actually do\n            // anything, since the super pom already defines versions.\n            put(\"maven-dependency-plugin\", \"2.0\");\n            put(\"maven-resources-plugin\", \"2.3\");\n            put(\"maven-jar-plugin\", \"2.2\");\n            put(\"maven-surefire-plugin\", \"2.4.3\");\n\n        }};", "modifier": "private final", "type": "Map<String, String>", "declarator": "defaultArtifactIdToVersionMap = new HashMap<String, String>()\n    {{\n            put(\"maven-cli-plugin\", \"0.7\");\n            put(\"cargo-maven2-plugin\", \"1.0-beta-2-db2\");\n            // Below is a second definition of 'cargo-maven2-plugin', using CodeHaus instead of TwData.\n            put(\"org.codehaus.cargo:cargo-maven2-plugin\", \"1.1.3\");\n            put(\"atlassian-pdk\", \"2.3.0\");\n            put(\"maven-archetype-plugin\", \"2.0-alpha-4\");\n            put(\"maven-bundle-plugin\", \"2.0.0\");\n            put(\"yuicompressor-maven-plugin\", \"0.7.1\");\n            put(\"build-helper-maven-plugin\", \"1.7\");\n\n            // You can't actually override the version a plugin if defined in the project, so these don't actually do\n            // anything, since the super pom already defines versions.\n            put(\"maven-dependency-plugin\", \"2.0\");\n            put(\"maven-resources-plugin\", \"2.3\");\n            put(\"maven-jar-plugin\", \"2.2\");\n            put(\"maven-surefire-plugin\", \"2.4.3\");\n\n        }}", "var_name": "defaultArtifactIdToVersionMap"}], "methods": [{"identifier": "MavenGoals", "parameters": "(final MavenContext ctx)", "modifiers": "public", "return": "", "signature": " MavenGoals(final MavenContext ctx)", "full_signature": "public  MavenGoals(final MavenContext ctx)", "class_method_signature": "MavenGoals.MavenGoals(final MavenContext ctx)", "testcase": false, "constructor": true}, {"identifier": "executionEnvironment", "parameters": "()", "modifiers": "private", "return": "ExecutionEnvironment", "signature": "ExecutionEnvironment executionEnvironment()", "full_signature": "private ExecutionEnvironment executionEnvironment()", "class_method_signature": "MavenGoals.executionEnvironment()", "testcase": false, "constructor": false}, {"identifier": "getContextProject", "parameters": "()", "modifiers": "public", "return": "MavenProject", "signature": "MavenProject getContextProject()", "full_signature": "public MavenProject getContextProject()", "class_method_signature": "MavenGoals.getContextProject()", "testcase": false, "constructor": false}, {"identifier": "executeAmpsRecursively", "parameters": "(final String ampsVersion, final String ampsGoal, Xpp3Dom cfg)", "modifiers": "public", "return": "void", "signature": "void executeAmpsRecursively(final String ampsVersion, final String ampsGoal, Xpp3Dom cfg)", "full_signature": "public void executeAmpsRecursively(final String ampsVersion, final String ampsGoal, Xpp3Dom cfg)", "class_method_signature": "MavenGoals.executeAmpsRecursively(final String ampsVersion, final String ampsGoal, Xpp3Dom cfg)", "testcase": false, "constructor": false}, {"identifier": "startCli", "parameters": "(final PluginInformation pluginInformation, final int port)", "modifiers": "public", "return": "void", "signature": "void startCli(final PluginInformation pluginInformation, final int port)", "full_signature": "public void startCli(final PluginInformation pluginInformation, final int port)", "class_method_signature": "MavenGoals.startCli(final PluginInformation pluginInformation, final int port)", "testcase": false, "constructor": false}, {"identifier": "createPlugin", "parameters": "(final String productId)", "modifiers": "public", "return": "void", "signature": "void createPlugin(final String productId)", "full_signature": "public void createPlugin(final String productId)", "class_method_signature": "MavenGoals.createPlugin(final String productId)", "testcase": false, "constructor": false}, {"identifier": "copyBundledDependencies", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void copyBundledDependencies()", "full_signature": "public void copyBundledDependencies()", "class_method_signature": "MavenGoals.copyBundledDependencies()", "testcase": false, "constructor": false}, {"identifier": "extractBundledDependencies", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void extractBundledDependencies()", "full_signature": "public void extractBundledDependencies()", "class_method_signature": "MavenGoals.extractBundledDependencies()", "testcase": false, "constructor": false}, {"identifier": "compressResources", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void compressResources()", "full_signature": "public void compressResources()", "class_method_signature": "MavenGoals.compressResources()", "testcase": false, "constructor": false}, {"identifier": "filterPluginDescriptor", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void filterPluginDescriptor()", "full_signature": "public void filterPluginDescriptor()", "class_method_signature": "MavenGoals.filterPluginDescriptor()", "testcase": false, "constructor": false}, {"identifier": "runUnitTests", "parameters": "(Map<String, Object> systemProperties)", "modifiers": "public", "return": "void", "signature": "void runUnitTests(Map<String, Object> systemProperties)", "full_signature": "public void runUnitTests(Map<String, Object> systemProperties)", "class_method_signature": "MavenGoals.runUnitTests(Map<String, Object> systemProperties)", "testcase": false, "constructor": false}, {"identifier": "copyWebappWar", "parameters": "(final String productId, final File targetDirectory, final ProductArtifact artifact)", "modifiers": "public", "return": "File", "signature": "File copyWebappWar(final String productId, final File targetDirectory, final ProductArtifact artifact)", "full_signature": "public File copyWebappWar(final String productId, final File targetDirectory, final ProductArtifact artifact)", "class_method_signature": "MavenGoals.copyWebappWar(final String productId, final File targetDirectory, final ProductArtifact artifact)", "testcase": false, "constructor": false}, {"identifier": "copyPlugins", "parameters": "(final File outputDirectory, final List<ProductArtifact> artifacts)", "modifiers": "public", "return": "void", "signature": "void copyPlugins(final File outputDirectory, final List<ProductArtifact> artifacts)", "full_signature": "public void copyPlugins(final File outputDirectory, final List<ProductArtifact> artifacts)", "class_method_signature": "MavenGoals.copyPlugins(final File outputDirectory, final List<ProductArtifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "getReactorProjectForArtifact", "parameters": "(ProductArtifact artifact)", "modifiers": "private", "return": "MavenProject", "signature": "MavenProject getReactorProjectForArtifact(ProductArtifact artifact)", "full_signature": "private MavenProject getReactorProjectForArtifact(ProductArtifact artifact)", "class_method_signature": "MavenGoals.getReactorProjectForArtifact(ProductArtifact artifact)", "testcase": false, "constructor": false}, {"identifier": "unpackContainer", "parameters": "(final Container container)", "modifiers": "private", "return": "void", "signature": "void unpackContainer(final Container container)", "full_signature": "private void unpackContainer(final Container container)", "class_method_signature": "MavenGoals.unpackContainer(final Container container)", "testcase": false, "constructor": false}, {"identifier": "getBuildDirectory", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getBuildDirectory()", "full_signature": "private String getBuildDirectory()", "class_method_signature": "MavenGoals.getBuildDirectory()", "testcase": false, "constructor": false}, {"identifier": "startWebapp", "parameters": "(final String productInstanceId, final File war, final Map<String, String> systemProperties, final List<ProductArtifact> extraContainerDependencies,\n                           final Product webappContext)", "modifiers": "public", "return": "int", "signature": "int startWebapp(final String productInstanceId, final File war, final Map<String, String> systemProperties, final List<ProductArtifact> extraContainerDependencies,\n                           final Product webappContext)", "full_signature": "public int startWebapp(final String productInstanceId, final File war, final Map<String, String> systemProperties, final List<ProductArtifact> extraContainerDependencies,\n                           final Product webappContext)", "class_method_signature": "MavenGoals.startWebapp(final String productInstanceId, final File war, final Map<String, String> systemProperties, final List<ProductArtifact> extraContainerDependencies,\n                           final Product webappContext)", "testcase": false, "constructor": false}, {"identifier": "stopWebapp", "parameters": "(final String productId, final String containerId, final Product webappContext)", "modifiers": "public", "return": "void", "signature": "void stopWebapp(final String productId, final String containerId, final Product webappContext)", "full_signature": "public void stopWebapp(final String productId, final String containerId, final Product webappContext)", "class_method_signature": "MavenGoals.stopWebapp(final String productId, final String containerId, final Product webappContext)", "testcase": false, "constructor": false}, {"identifier": "createShutdownPortsPropertiesConfiguration", "parameters": "(final Product webappContext)", "modifiers": "private", "return": "Element[]", "signature": "Element[] createShutdownPortsPropertiesConfiguration(final Product webappContext)", "full_signature": "private Element[] createShutdownPortsPropertiesConfiguration(final Product webappContext)", "class_method_signature": "MavenGoals.createShutdownPortsPropertiesConfiguration(final Product webappContext)", "testcase": false, "constructor": false}, {"identifier": "cargo", "parameters": "(Product webappContext)", "modifiers": "private", "return": "Plugin", "signature": "Plugin cargo(Product webappContext)", "full_signature": "private Plugin cargo(Product webappContext)", "class_method_signature": "MavenGoals.cargo(Product webappContext)", "testcase": false, "constructor": false}, {"identifier": "getBaseUrl", "parameters": "(final String server, final int actualHttpPort, final String contextPath)", "modifiers": "public static", "return": "String", "signature": "String getBaseUrl(final String server, final int actualHttpPort, final String contextPath)", "full_signature": "public static String getBaseUrl(final String server, final int actualHttpPort, final String contextPath)", "class_method_signature": "MavenGoals.getBaseUrl(final String server, final int actualHttpPort, final String contextPath)", "testcase": false, "constructor": false}, {"identifier": "runTests", "parameters": "(String testGroupId, String containerId, List<String> includes, List<String> excludes, Map<String, Object> systemProperties, final File targetDirectory)", "modifiers": "public", "return": "void", "signature": "void runTests(String testGroupId, String containerId, List<String> includes, List<String> excludes, Map<String, Object> systemProperties, final File targetDirectory)", "full_signature": "public void runTests(String testGroupId, String containerId, List<String> includes, List<String> excludes, Map<String, Object> systemProperties, final File targetDirectory)", "class_method_signature": "MavenGoals.runTests(String testGroupId, String containerId, List<String> includes, List<String> excludes, Map<String, Object> systemProperties, final File targetDirectory)", "testcase": false, "constructor": false}, {"identifier": "convertPropsToElements", "parameters": "(Map<String, Object> systemProperties)", "modifiers": "private", "return": "Element", "signature": "Element convertPropsToElements(Map<String, Object> systemProperties)", "full_signature": "private Element convertPropsToElements(Map<String, Object> systemProperties)", "class_method_signature": "MavenGoals.convertPropsToElements(Map<String, Object> systemProperties)", "testcase": false, "constructor": false}, {"identifier": "findContainer", "parameters": "(final String containerId)", "modifiers": "private", "return": "Container", "signature": "Container findContainer(final String containerId)", "full_signature": "private Container findContainer(final String containerId)", "class_method_signature": "MavenGoals.findContainer(final String containerId)", "testcase": false, "constructor": false}, {"identifier": "pickFreePort", "parameters": "(final int requestedPort)", "modifiers": "", "return": "int", "signature": "int pickFreePort(final int requestedPort)", "full_signature": " int pickFreePort(final int requestedPort)", "class_method_signature": "MavenGoals.pickFreePort(final int requestedPort)", "testcase": false, "constructor": false}, {"identifier": "closeSocket", "parameters": "(ServerSocket socket)", "modifiers": "private", "return": "void", "signature": "void closeSocket(ServerSocket socket)", "full_signature": "private void closeSocket(ServerSocket socket)", "class_method_signature": "MavenGoals.closeSocket(ServerSocket socket)", "testcase": false, "constructor": false}, {"identifier": "installPlugin", "parameters": "(PdkParams pdkParams)", "modifiers": "public", "return": "void", "signature": "void installPlugin(PdkParams pdkParams)", "full_signature": "public void installPlugin(PdkParams pdkParams)", "class_method_signature": "MavenGoals.installPlugin(PdkParams pdkParams)", "testcase": false, "constructor": false}, {"identifier": "uninstallPlugin", "parameters": "(final String pluginKey, final String server, final int port, final String contextPath)", "modifiers": "public", "return": "void", "signature": "void uninstallPlugin(final String pluginKey, final String server, final int port, final String contextPath)", "full_signature": "public void uninstallPlugin(final String pluginKey, final String server, final int port, final String contextPath)", "class_method_signature": "MavenGoals.uninstallPlugin(final String pluginKey, final String server, final int port, final String contextPath)", "testcase": false, "constructor": false}, {"identifier": "installIdeaPlugin", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void installIdeaPlugin()", "full_signature": "public void installIdeaPlugin()", "class_method_signature": "MavenGoals.installIdeaPlugin()", "testcase": false, "constructor": false}, {"identifier": "copyDist", "parameters": "(final File targetDirectory, final ProductArtifact artifact)", "modifiers": "public", "return": "File", "signature": "File copyDist(final File targetDirectory, final ProductArtifact artifact)", "full_signature": "public File copyDist(final File targetDirectory, final ProductArtifact artifact)", "class_method_signature": "MavenGoals.copyDist(final File targetDirectory, final ProductArtifact artifact)", "testcase": false, "constructor": false}, {"identifier": "copyHome", "parameters": "(final File targetDirectory, final ProductArtifact artifact)", "modifiers": "public", "return": "File", "signature": "File copyHome(final File targetDirectory, final ProductArtifact artifact)", "full_signature": "public File copyHome(final File targetDirectory, final ProductArtifact artifact)", "class_method_signature": "MavenGoals.copyHome(final File targetDirectory, final ProductArtifact artifact)", "testcase": false, "constructor": false}, {"identifier": "copyZip", "parameters": "(final File targetDirectory, final ProductArtifact artifact, final String localName)", "modifiers": "public", "return": "File", "signature": "File copyZip(final File targetDirectory, final ProductArtifact artifact, final String localName)", "full_signature": "public File copyZip(final File targetDirectory, final ProductArtifact artifact, final String localName)", "class_method_signature": "MavenGoals.copyZip(final File targetDirectory, final ProductArtifact artifact, final String localName)", "testcase": false, "constructor": false}, {"identifier": "generateBundleManifest", "parameters": "(final Map<String, String> instructions, final Map<String, String> basicAttributes)", "modifiers": "public", "return": "void", "signature": "void generateBundleManifest(final Map<String, String> instructions, final Map<String, String> basicAttributes)", "full_signature": "public void generateBundleManifest(final Map<String, String> instructions, final Map<String, String> basicAttributes)", "class_method_signature": "MavenGoals.generateBundleManifest(final Map<String, String> instructions, final Map<String, String> basicAttributes)", "testcase": false, "constructor": false}, {"identifier": "generateMinimalManifest", "parameters": "(final Map<String, String> basicAttributes)", "modifiers": "public", "return": "void", "signature": "void generateMinimalManifest(final Map<String, String> basicAttributes)", "full_signature": "public void generateMinimalManifest(final Map<String, String> basicAttributes)", "class_method_signature": "MavenGoals.generateMinimalManifest(final Map<String, String> basicAttributes)", "testcase": false, "constructor": false}, {"identifier": "jarWithOptionalManifest", "parameters": "(final boolean manifestExists)", "modifiers": "public", "return": "void", "signature": "void jarWithOptionalManifest(final boolean manifestExists)", "full_signature": "public void jarWithOptionalManifest(final boolean manifestExists)", "class_method_signature": "MavenGoals.jarWithOptionalManifest(final boolean manifestExists)", "testcase": false, "constructor": false}, {"identifier": "jarTests", "parameters": "(String finalName)", "modifiers": "public", "return": "void", "signature": "void jarTests(String finalName)", "full_signature": "public void jarTests(String finalName)", "class_method_signature": "MavenGoals.jarTests(String finalName)", "testcase": false, "constructor": false}, {"identifier": "generateObrXml", "parameters": "(File dep, File obrXml)", "modifiers": "public", "return": "void", "signature": "void generateObrXml(File dep, File obrXml)", "full_signature": "public void generateObrXml(File dep, File obrXml)", "class_method_signature": "MavenGoals.generateObrXml(File dep, File obrXml)", "testcase": false, "constructor": false}, {"identifier": "attachArtifact", "parameters": "(File file, String type)", "modifiers": "public", "return": "void", "signature": "void attachArtifact(File file, String type)", "full_signature": "public void attachArtifact(File file, String type)", "class_method_signature": "MavenGoals.attachArtifact(File file, String type)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(String mavenArgs)", "modifiers": "public", "return": "void", "signature": "void release(String mavenArgs)", "full_signature": "public void release(String mavenArgs)", "class_method_signature": "MavenGoals.release(String mavenArgs)", "testcase": false, "constructor": false}, {"identifier": "generateRestDocs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void generateRestDocs()", "full_signature": "public void generateRestDocs()", "class_method_signature": "MavenGoals.generateRestDocs()", "testcase": false, "constructor": false}], "file": "maven-amps-plugin/src/main/java/com/atlassian/maven/plugins/amps/MavenGoals.java"}, "focal_method": {"identifier": "generateMinimalManifest", "parameters": "(final Map<String, String> basicAttributes)", "modifiers": "public", "return": "void", "body": "public void generateMinimalManifest(final Map<String, String> basicAttributes) throws MojoExecutionException\n    {\n        File metaInf = file(ctx.getProject().getBuild().getOutputDirectory(), \"META-INF\");\n        if (!metaInf.exists())\n        {\n            metaInf.mkdirs();\n        }\n        File mf = file(ctx.getProject().getBuild().getOutputDirectory(), \"META-INF\", \"MANIFEST.MF\");\n        Manifest m = new Manifest();\n        m.getMainAttributes().putValue(\"Manifest-Version\", \"1.0\");\n        for (Map.Entry<String, String> entry : basicAttributes.entrySet())\n        {\n            m.getMainAttributes().putValue(entry.getKey(), entry.getValue());\n        }\n        FileOutputStream fos = null;\n        try\n        {\n            fos = new FileOutputStream(mf);\n            m.write(fos);\n        }\n        catch (IOException e)\n        {\n            throw new MojoExecutionException(\"Unable to create manifest\", e);\n        }\n        finally\n        {\n            IOUtils.closeQuietly(fos);\n        }\n    }", "signature": "void generateMinimalManifest(final Map<String, String> basicAttributes)", "full_signature": "public void generateMinimalManifest(final Map<String, String> basicAttributes)", "class_method_signature": "MavenGoals.generateMinimalManifest(final Map<String, String> basicAttributes)", "testcase": false, "constructor": false, "invocations": ["file", "getOutputDirectory", "getBuild", "getProject", "exists", "mkdirs", "file", "getOutputDirectory", "getBuild", "getProject", "putValue", "getMainAttributes", "entrySet", "putValue", "getMainAttributes", "getKey", "getValue", "write", "closeQuietly"]}, "repository": {"repo_id": 860694, "url": "https://github.com/mrdon/AMPS", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 3147, "license": "licensed"}}