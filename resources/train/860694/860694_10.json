{"test_class": {"identifier": "TestZipUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int NUM_FILES = 2;", "modifier": "public static final", "type": "int", "declarator": "NUM_FILES = 2", "var_name": "NUM_FILES"}, {"original_string": "public static final int NUM_FOLDERS = 4;", "modifier": "public static final", "type": "int", "declarator": "NUM_FOLDERS = 4", "var_name": "NUM_FOLDERS"}, {"original_string": "public static final int NUM_FOLDERS_NESTED_PREFIX = NUM_FOLDERS + 1;", "modifier": "public static final", "type": "int", "declarator": "NUM_FOLDERS_NESTED_PREFIX = NUM_FOLDERS + 1", "var_name": "NUM_FOLDERS_NESTED_PREFIX"}, {"original_string": "public static final String ROOT_DIR = \"test-zip-dir\";", "modifier": "public static final", "type": "String", "declarator": "ROOT_DIR = \"test-zip-dir\"", "var_name": "ROOT_DIR"}, {"original_string": "public static final String FIRST_PREFIX = \"prefix1\";", "modifier": "public static final", "type": "String", "declarator": "FIRST_PREFIX = \"prefix1\"", "var_name": "FIRST_PREFIX"}, {"original_string": "public static final String SECOND_PREFIX = \"prefix2\";", "modifier": "public static final", "type": "String", "declarator": "SECOND_PREFIX = \"prefix2\"", "var_name": "SECOND_PREFIX"}, {"original_string": "public static final String NESTED_PREFIX = FIRST_PREFIX + \"/\" + SECOND_PREFIX;", "modifier": "public static final", "type": "String", "declarator": "NESTED_PREFIX = FIRST_PREFIX + \"/\" + SECOND_PREFIX", "var_name": "NESTED_PREFIX"}, {"original_string": "private File tempDir;", "modifier": "private", "type": "File", "declarator": "tempDir", "var_name": "tempDir"}, {"original_string": "private File sourceZipDir;", "modifier": "private", "type": "File", "declarator": "sourceZipDir", "var_name": "sourceZipDir"}, {"original_string": "private ZipFile zip;", "modifier": "private", "type": "ZipFile", "declarator": "zip", "var_name": "zip"}], "file": "maven-amps-plugin/src/test/java/com/atlassian/maven/plugins/amps/util/TestZipUtils.java"}, "test_case": {"identifier": "detectNoPrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void detectNoPrefix() throws IOException, URISyntaxException\n    {\n        // zip-no-root.zip is a zip with no root folder.\n        // We can't use ZipUtils#zipDir() to create it (zipDir() always puts a root folder),\n        // so we need to provide one in src/test/resources.\n        URL zipPath = TestZipUtils.class.getResource(\"zip-no-root.zip\");\n        File zipFile = new File(zipPath.toURI());\n\n        int nestedRoots = ZipUtils.countNestingLevel(zipFile);\n\n        assertEquals(\"No nesting should be detected\", 0, nestedRoots);\n    }", "signature": "void detectNoPrefix()", "full_signature": "@Test public void detectNoPrefix()", "class_method_signature": "TestZipUtils.detectNoPrefix()", "testcase": true, "constructor": false, "invocations": ["getResource", "toURI", "countNestingLevel", "assertEquals"]}, "focal_class": {"identifier": "ZipUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "unzip", "parameters": "(final File zipFile, final String destDir)", "modifiers": "public static", "return": "void", "signature": "void unzip(final File zipFile, final String destDir)", "full_signature": "public static void unzip(final File zipFile, final String destDir)", "class_method_signature": "ZipUtils.unzip(final File zipFile, final String destDir)", "testcase": false, "constructor": false}, {"identifier": "unzip", "parameters": "(final File zipFile, final String destDir, int leadingPathSegmentsToTrim)", "modifiers": "public static", "return": "void", "signature": "void unzip(final File zipFile, final String destDir, int leadingPathSegmentsToTrim)", "full_signature": "public static void unzip(final File zipFile, final String destDir, int leadingPathSegmentsToTrim)", "class_method_signature": "ZipUtils.unzip(final File zipFile, final String destDir, int leadingPathSegmentsToTrim)", "testcase": false, "constructor": false}, {"identifier": "countNestingLevel", "parameters": "(File zip)", "modifiers": "public static", "return": "int", "signature": "int countNestingLevel(File zip)", "full_signature": "public static int countNestingLevel(File zip)", "class_method_signature": "ZipUtils.countNestingLevel(File zip)", "testcase": false, "constructor": false}, {"identifier": "countNestingLevel", "parameters": "(List<String> filenames)", "modifiers": "static", "return": "int", "signature": "int countNestingLevel(List<String> filenames)", "full_signature": "static int countNestingLevel(List<String> filenames)", "class_method_signature": "ZipUtils.countNestingLevel(List<String> filenames)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(final Enumeration<? extends ZipEntry> entries)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> toList(final Enumeration<? extends ZipEntry> entries)", "full_signature": "private static List<String> toList(final Enumeration<? extends ZipEntry> entries)", "class_method_signature": "ZipUtils.toList(final Enumeration<? extends ZipEntry> entries)", "testcase": false, "constructor": false}, {"identifier": "zipDir", "parameters": "(final File zipFile, final File srcDir, final String prefix)", "modifiers": "public static", "return": "void", "signature": "void zipDir(final File zipFile, final File srcDir, final String prefix)", "full_signature": "public static void zipDir(final File zipFile, final File srcDir, final String prefix)", "class_method_signature": "ZipUtils.zipDir(final File zipFile, final File srcDir, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "addZipPrefixes", "parameters": "(File dirObj, ZipOutputStream out, String prefix)", "modifiers": "private static", "return": "void", "signature": "void addZipPrefixes(File dirObj, ZipOutputStream out, String prefix)", "full_signature": "private static void addZipPrefixes(File dirObj, ZipOutputStream out, String prefix)", "class_method_signature": "ZipUtils.addZipPrefixes(File dirObj, ZipOutputStream out, String prefix)", "testcase": false, "constructor": false}, {"identifier": "addZipDir", "parameters": "(File dirObj, ZipOutputStream out, String prefix)", "modifiers": "private static", "return": "void", "signature": "void addZipDir(File dirObj, ZipOutputStream out, String prefix)", "full_signature": "private static void addZipDir(File dirObj, ZipOutputStream out, String prefix)", "class_method_signature": "ZipUtils.addZipDir(File dirObj, ZipOutputStream out, String prefix)", "testcase": false, "constructor": false}, {"identifier": "ensurePrefixWithSlash", "parameters": "(File rootDir, String prefix)", "modifiers": "private static", "return": "String", "signature": "String ensurePrefixWithSlash(File rootDir, String prefix)", "full_signature": "private static String ensurePrefixWithSlash(File rootDir, String prefix)", "class_method_signature": "ZipUtils.ensurePrefixWithSlash(File rootDir, String prefix)", "testcase": false, "constructor": false}, {"identifier": "trimPathSegments", "parameters": "(String zipPath, final int trimLeadingPathSegments)", "modifiers": "private static", "return": "String", "signature": "String trimPathSegments(String zipPath, final int trimLeadingPathSegments)", "full_signature": "private static String trimPathSegments(String zipPath, final int trimLeadingPathSegments)", "class_method_signature": "ZipUtils.trimPathSegments(String zipPath, final int trimLeadingPathSegments)", "testcase": false, "constructor": false}], "file": "maven-amps-plugin/src/main/java/com/atlassian/maven/plugins/amps/util/ZipUtils.java"}, "focal_method": {"identifier": "countNestingLevel", "parameters": "(File zip)", "modifiers": "public static", "return": "int", "body": "public static int countNestingLevel(File zip) throws ZipException, IOException\n    {\n        List<String> filenames = toList(new ZipFile(zip).entries());\n        return countNestingLevel(filenames);\n    }", "signature": "int countNestingLevel(File zip)", "full_signature": "public static int countNestingLevel(File zip)", "class_method_signature": "ZipUtils.countNestingLevel(File zip)", "testcase": false, "constructor": false, "invocations": ["toList", "entries", "countNestingLevel"]}, "repository": {"repo_id": 860694, "url": "https://github.com/mrdon/AMPS", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 3147, "license": "licensed"}}