{"test_class": {"identifier": "SlackNotificationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NotificationService notificationService;", "modifier": "private", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}, {"original_string": "private SeyrenConfig mockSeyrenConfig;", "modifier": "private", "type": "SeyrenConfig", "declarator": "mockSeyrenConfig", "var_name": "mockSeyrenConfig"}, {"original_string": "@Rule\n    public ClientDriverRule clientDriver = new ClientDriverRule();", "modifier": "@Rule\n    public", "type": "ClientDriverRule", "declarator": "clientDriver = new ClientDriverRule()", "var_name": "clientDriver"}], "file": "seyren-core/src/test/java/com/seyren/core/service/notification/SlackNotificationServiceTest.java"}, "test_case": {"identifier": "notifcationServiceCanOnlyHandleSlackSubscription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void notifcationServiceCanOnlyHandleSlackSubscription() {\n        assertThat(notificationService.canHandle(SubscriptionType.SLACK), is(true));\n        for (SubscriptionType type : SubscriptionType.values()) {\n            if (type == SubscriptionType.SLACK) {\n                continue;\n            }\n            assertThat(notificationService.canHandle(type), is(false));\n        }\n    }", "signature": "void notifcationServiceCanOnlyHandleSlackSubscription()", "full_signature": "@Test public void notifcationServiceCanOnlyHandleSlackSubscription()", "class_method_signature": "SlackNotificationServiceTest.notifcationServiceCanOnlyHandleSlackSubscription()", "testcase": true, "constructor": false, "invocations": ["assertThat", "canHandle", "is", "values", "assertThat", "canHandle", "is"]}, "focal_class": {"identifier": "SlackNotificationService", "superclass": "", "interfaces": "implements NotificationService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SlackNotificationService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SlackNotificationService.class)", "var_name": "LOGGER"}, {"original_string": "private final SeyrenConfig seyrenConfig;", "modifier": "private final", "type": "SeyrenConfig", "declarator": "seyrenConfig", "var_name": "seyrenConfig"}, {"original_string": "private final String baseUrl;", "modifier": "private final", "type": "String", "declarator": "baseUrl", "var_name": "baseUrl"}], "methods": [{"identifier": "SlackNotificationService", "parameters": "(SeyrenConfig seyrenConfig)", "modifiers": "@Inject public", "return": "", "signature": " SlackNotificationService(SeyrenConfig seyrenConfig)", "full_signature": "@Inject public  SlackNotificationService(SeyrenConfig seyrenConfig)", "class_method_signature": "SlackNotificationService.SlackNotificationService(SeyrenConfig seyrenConfig)", "testcase": false, "constructor": true}, {"identifier": "SlackNotificationService", "parameters": "(SeyrenConfig seyrenConfig, String baseUrl)", "modifiers": "protected", "return": "", "signature": " SlackNotificationService(SeyrenConfig seyrenConfig, String baseUrl)", "full_signature": "protected  SlackNotificationService(SeyrenConfig seyrenConfig, String baseUrl)", "class_method_signature": "SlackNotificationService.SlackNotificationService(SeyrenConfig seyrenConfig, String baseUrl)", "testcase": false, "constructor": true}, {"identifier": "sendNotification", "parameters": "(Check check, Subscription subscription, List<Alert> alerts)", "modifiers": "@Override public", "return": "void", "signature": "void sendNotification(Check check, Subscription subscription, List<Alert> alerts)", "full_signature": "@Override public void sendNotification(Check check, Subscription subscription, List<Alert> alerts)", "class_method_signature": "SlackNotificationService.sendNotification(Check check, Subscription subscription, List<Alert> alerts)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(SubscriptionType subscriptionType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(SubscriptionType subscriptionType)", "full_signature": "@Override public boolean canHandle(SubscriptionType subscriptionType)", "class_method_signature": "SlackNotificationService.canHandle(SubscriptionType subscriptionType)", "testcase": false, "constructor": false}, {"identifier": "formatContent", "parameters": "(List<String> emojis, Check check, Subscription subscription, List<Alert> alerts)", "modifiers": "private", "return": "String", "signature": "String formatContent(List<String> emojis, Check check, Subscription subscription, List<Alert> alerts)", "full_signature": "private String formatContent(List<String> emojis, Check check, Subscription subscription, List<Alert> alerts)", "class_method_signature": "SlackNotificationService.formatContent(List<String> emojis, Check check, Subscription subscription, List<Alert> alerts)", "testcase": false, "constructor": false}], "file": "seyren-core/src/main/java/com/seyren/core/service/notification/SlackNotificationService.java"}, "focal_method": {"identifier": "canHandle", "parameters": "(SubscriptionType subscriptionType)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean canHandle(SubscriptionType subscriptionType) {\n        return subscriptionType == SubscriptionType.SLACK;\n    }", "signature": "boolean canHandle(SubscriptionType subscriptionType)", "full_signature": "@Override public boolean canHandle(SubscriptionType subscriptionType)", "class_method_signature": "SlackNotificationService.canHandle(SubscriptionType subscriptionType)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4167742, "url": "https://github.com/scobal/seyren", "language": "Java", "is_fork": false, "fork_count": 234, "stargazer_count": 869, "size": 1940, "license": "licensed"}}