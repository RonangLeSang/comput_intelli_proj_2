{"test_class": {"identifier": "JcrBackedDatasourceMgmtServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXP_FILE_ID = \"456\";", "modifier": "private static final", "type": "String", "declarator": "EXP_FILE_ID = \"456\"", "var_name": "EXP_FILE_ID"}, {"original_string": "private static final String EXP_DBMETA_NAME = \"haha\";", "modifier": "private static final", "type": "String", "declarator": "EXP_DBMETA_NAME = \"haha\"", "var_name": "EXP_DBMETA_NAME"}, {"original_string": "private static final String EXP_DBMETA_HOSTNAME = \"acme\";", "modifier": "private static final", "type": "String", "declarator": "EXP_DBMETA_HOSTNAME = \"acme\"", "var_name": "EXP_DBMETA_HOSTNAME"}, {"original_string": "private static final String EXP_DBMETA_PORT = \"10521\";", "modifier": "private static final", "type": "String", "declarator": "EXP_DBMETA_PORT = \"10521\"", "var_name": "EXP_DBMETA_PORT"}, {"original_string": "private static final String EXP_UPDATED_DBMETA_NAME = \"hahaUpdated\";", "modifier": "private static final", "type": "String", "declarator": "EXP_UPDATED_DBMETA_NAME = \"hahaUpdated\"", "var_name": "EXP_UPDATED_DBMETA_NAME"}, {"original_string": "private static final String EXP_UPDATED_DBMETA_HOSTNAME = \"acmeUpdated\";", "modifier": "private static final", "type": "String", "declarator": "EXP_UPDATED_DBMETA_HOSTNAME = \"acmeUpdated\"", "var_name": "EXP_UPDATED_DBMETA_HOSTNAME"}, {"original_string": "private static final String EXP_UPDATED_DBMETA_PORT = \"10522\";", "modifier": "private static final", "type": "String", "declarator": "EXP_UPDATED_DBMETA_PORT = \"10522\"", "var_name": "EXP_UPDATED_DBMETA_PORT"}, {"original_string": "private static final List<Character> reservedChars = Collections.emptyList();", "modifier": "private static final", "type": "List<Character>", "declarator": "reservedChars = Collections.emptyList()", "var_name": "reservedChars"}, {"original_string": "@Rule\n  public ExpectedException datasourceException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "datasourceException = ExpectedException.none()", "var_name": "datasourceException"}], "file": "repository/src/test/java/org/pentaho/platform/repository/JcrBackedDatasourceMgmtServiceTest.java"}, "test_case": {"identifier": "testgetDatasourceById", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testgetDatasourceById() throws Exception {\n    testgetDatasourceById( false );\n  }", "signature": "void testgetDatasourceById()", "full_signature": "@Test public void testgetDatasourceById()", "class_method_signature": "JcrBackedDatasourceMgmtServiceTest.testgetDatasourceById()", "testcase": true, "constructor": false, "invocations": ["testgetDatasourceById"]}, "focal_class": {"identifier": "JcrBackedDatasourceMgmtService", "superclass": "", "interfaces": "implements IDatasourceMgmtService", "fields": [{"original_string": "private IUnifiedRepository repository;", "modifier": "private", "type": "IUnifiedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private volatile List<Character> cachedReservedChars;", "modifier": "private volatile", "type": "List<Character>", "declarator": "cachedReservedChars", "var_name": "cachedReservedChars"}, {"original_string": "private Serializable cachedDatabaseParentFolderId;", "modifier": "private", "type": "Serializable", "declarator": "cachedDatabaseParentFolderId", "var_name": "cachedDatabaseParentFolderId"}, {"original_string": "private static final String FOLDER_PDI = \"pdi\";", "modifier": "private static final", "type": "String", "declarator": "FOLDER_PDI = \"pdi\"", "var_name": "FOLDER_PDI"}, {"original_string": "private static final String FOLDER_DATABASES = \"databases\";", "modifier": "private static final", "type": "String", "declarator": "FOLDER_DATABASES = \"databases\"", "var_name": "FOLDER_DATABASES"}, {"original_string": "private DatabaseHelper databaseHelper;", "modifier": "private", "type": "DatabaseHelper", "declarator": "databaseHelper", "var_name": "databaseHelper"}], "methods": [{"identifier": "JcrBackedDatasourceMgmtService", "parameters": "()", "modifiers": "public", "return": "", "signature": " JcrBackedDatasourceMgmtService()", "full_signature": "public  JcrBackedDatasourceMgmtService()", "class_method_signature": "JcrBackedDatasourceMgmtService.JcrBackedDatasourceMgmtService()", "testcase": false, "constructor": true}, {"identifier": "JcrBackedDatasourceMgmtService", "parameters": "( IUnifiedRepository repository, IDatabaseDialectService databaseDialectService )", "modifiers": "public", "return": "", "signature": " JcrBackedDatasourceMgmtService( IUnifiedRepository repository, IDatabaseDialectService databaseDialectService )", "full_signature": "public  JcrBackedDatasourceMgmtService( IUnifiedRepository repository, IDatabaseDialectService databaseDialectService )", "class_method_signature": "JcrBackedDatasourceMgmtService.JcrBackedDatasourceMgmtService( IUnifiedRepository repository, IDatabaseDialectService databaseDialectService )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "( IPentahoSession session )", "modifiers": "public", "return": "void", "signature": "void init( IPentahoSession session )", "full_signature": "public void init( IPentahoSession session )", "class_method_signature": "JcrBackedDatasourceMgmtService.init( IPentahoSession session )", "testcase": false, "constructor": false}, {"identifier": "createDatasource", "parameters": "( IDatabaseConnection databaseConnection )", "modifiers": "public", "return": "String", "signature": "String createDatasource( IDatabaseConnection databaseConnection )", "full_signature": "public String createDatasource( IDatabaseConnection databaseConnection )", "class_method_signature": "JcrBackedDatasourceMgmtService.createDatasource( IDatabaseConnection databaseConnection )", "testcase": false, "constructor": false}, {"identifier": "deleteDatasourceByName", "parameters": "( String name )", "modifiers": "public", "return": "void", "signature": "void deleteDatasourceByName( String name )", "full_signature": "public void deleteDatasourceByName( String name )", "class_method_signature": "JcrBackedDatasourceMgmtService.deleteDatasourceByName( String name )", "testcase": false, "constructor": false}, {"identifier": "deleteDatasourceById", "parameters": "( String id )", "modifiers": "public", "return": "void", "signature": "void deleteDatasourceById( String id )", "full_signature": "public void deleteDatasourceById( String id )", "class_method_signature": "JcrBackedDatasourceMgmtService.deleteDatasourceById( String id )", "testcase": false, "constructor": false}, {"identifier": "deleteDatasource", "parameters": "( RepositoryFile file )", "modifiers": "private", "return": "void", "signature": "void deleteDatasource( RepositoryFile file )", "full_signature": "private void deleteDatasource( RepositoryFile file )", "class_method_signature": "JcrBackedDatasourceMgmtService.deleteDatasource( RepositoryFile file )", "testcase": false, "constructor": false}, {"identifier": "getDatasourceByName", "parameters": "( String name )", "modifiers": "public", "return": "IDatabaseConnection", "signature": "IDatabaseConnection getDatasourceByName( String name )", "full_signature": "public IDatabaseConnection getDatasourceByName( String name )", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatasourceByName( String name )", "testcase": false, "constructor": false}, {"identifier": "getDatasourceById", "parameters": "( String id )", "modifiers": "public", "return": "IDatabaseConnection", "signature": "IDatabaseConnection getDatasourceById( String id )", "full_signature": "public IDatabaseConnection getDatasourceById( String id )", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatasourceById( String id )", "testcase": false, "constructor": false}, {"identifier": "getDatasource", "parameters": "( RepositoryFile file )", "modifiers": "private", "return": "IDatabaseConnection", "signature": "IDatabaseConnection getDatasource( RepositoryFile file )", "full_signature": "private IDatabaseConnection getDatasource( RepositoryFile file )", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatasource( RepositoryFile file )", "testcase": false, "constructor": false}, {"identifier": "getDatasources", "parameters": "()", "modifiers": "public", "return": "List<IDatabaseConnection>", "signature": "List<IDatabaseConnection> getDatasources()", "full_signature": "public List<IDatabaseConnection> getDatasources()", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatasources()", "testcase": false, "constructor": false}, {"identifier": "getDatasourceIds", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDatasourceIds()", "full_signature": "public List<String> getDatasourceIds()", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatasourceIds()", "testcase": false, "constructor": false}, {"identifier": "updateDatasourceById", "parameters": "( String id, IDatabaseConnection databaseConnection )", "modifiers": "public", "return": "String", "signature": "String updateDatasourceById( String id, IDatabaseConnection databaseConnection )", "full_signature": "public String updateDatasourceById( String id, IDatabaseConnection databaseConnection )", "class_method_signature": "JcrBackedDatasourceMgmtService.updateDatasourceById( String id, IDatabaseConnection databaseConnection )", "testcase": false, "constructor": false}, {"identifier": "updateDatasourceByName", "parameters": "( String name, IDatabaseConnection databaseConnection )", "modifiers": "public", "return": "String", "signature": "String updateDatasourceByName( String name, IDatabaseConnection databaseConnection )", "full_signature": "public String updateDatasourceByName( String name, IDatabaseConnection databaseConnection )", "class_method_signature": "JcrBackedDatasourceMgmtService.updateDatasourceByName( String name, IDatabaseConnection databaseConnection )", "testcase": false, "constructor": false}, {"identifier": "updateDatasource", "parameters": "( RepositoryFile file, IDatabaseConnection databaseConnection )", "modifiers": "private", "return": "String", "signature": "String updateDatasource( RepositoryFile file, IDatabaseConnection databaseConnection )", "full_signature": "private String updateDatasource( RepositoryFile file, IDatabaseConnection databaseConnection )", "class_method_signature": "JcrBackedDatasourceMgmtService.updateDatasource( RepositoryFile file, IDatabaseConnection databaseConnection )", "testcase": false, "constructor": false}, {"identifier": "getDatabaseParentFolderPath", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getDatabaseParentFolderPath()", "full_signature": "private String getDatabaseParentFolderPath()", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatabaseParentFolderPath()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseParentFolderId", "parameters": "()", "modifiers": "private", "return": "Serializable", "signature": "Serializable getDatabaseParentFolderId()", "full_signature": "private Serializable getDatabaseParentFolderId()", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatabaseParentFolderId()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryFiles", "parameters": "()", "modifiers": "private", "return": "List<RepositoryFile>", "signature": "List<RepositoryFile> getRepositoryFiles()", "full_signature": "private List<RepositoryFile> getRepositoryFiles()", "class_method_signature": "JcrBackedDatasourceMgmtService.getRepositoryFiles()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "( final String name )", "modifiers": "private", "return": "String", "signature": "String getPath( final String name )", "full_signature": "private String getPath( final String name )", "class_method_signature": "JcrBackedDatasourceMgmtService.getPath( final String name )", "testcase": false, "constructor": false}, {"identifier": "renameIfNecessary", "parameters": "( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "modifiers": "private", "return": "void", "signature": "void renameIfNecessary( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "full_signature": "private void renameIfNecessary( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "class_method_signature": "JcrBackedDatasourceMgmtService.renameIfNecessary( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "testcase": false, "constructor": false}, {"identifier": "isRenamed", "parameters": "( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "modifiers": "private", "return": "boolean", "signature": "boolean isRenamed( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "full_signature": "private boolean isRenamed( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "class_method_signature": "JcrBackedDatasourceMgmtService.isRenamed( final IDatabaseConnection databaseConnection, final RepositoryFile file )", "testcase": false, "constructor": false}, {"identifier": "getParentPath", "parameters": "( final String path )", "modifiers": "protected", "return": "String", "signature": "String getParentPath( final String path )", "full_signature": "protected String getParentPath( final String path )", "class_method_signature": "JcrBackedDatasourceMgmtService.getParentPath( final String path )", "testcase": false, "constructor": false}], "file": "repository/src/main/java/org/pentaho/platform/repository/JcrBackedDatasourceMgmtService.java"}, "focal_method": {"identifier": "getDatasourceById", "parameters": "( String id )", "modifiers": "public", "return": "IDatabaseConnection", "body": "public IDatabaseConnection getDatasourceById( String id ) throws DatasourceMgmtServiceException {\n    RepositoryFile file = null;\n    try {\n      file = repository.getFileById( id );\n    } catch ( UnifiedRepositoryException ure ) {\n      throw new DatasourceMgmtServiceException( Messages.getInstance().getErrorString(\n          \"DatasourceMgmtService.ERROR_0004_UNABLE_TO_RETRIEVE_DATASOURCE\", file != null ? file.getName() : id ), ure ); //$NON-NLS-1$\n    }\n    if ( file != null ) {\n      return getDatasource( file );\n    }\n    return null;\n  }", "signature": "IDatabaseConnection getDatasourceById( String id )", "full_signature": "public IDatabaseConnection getDatasourceById( String id )", "class_method_signature": "JcrBackedDatasourceMgmtService.getDatasourceById( String id )", "testcase": false, "constructor": false, "invocations": ["getFileById", "getErrorString", "getInstance", "getName", "getDatasource"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}