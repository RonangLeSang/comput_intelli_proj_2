{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] TEST_RESERVED = new char[] {'/', '%'};", "modifier": "private static final", "type": "char[]", "declarator": "TEST_RESERVED = new char[] {'/', '%'}", "var_name": "TEST_RESERVED"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/utils/FileUtilsTest.java"}, "test_case": {"identifier": "convertSingleString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void convertSingleString() {\n    String string = \"string\";\n\n    String[] result = FileUtils.convertCommaSeparatedStringToArray( string );\n    assertEquals( result.length, 1 );\n    assertEquals( result[ 0 ], string );\n  }", "signature": "void convertSingleString()", "full_signature": "@Test public void convertSingleString()", "class_method_signature": "FileUtilsTest.convertSingleString()", "testcase": true, "constructor": false, "invocations": ["convertCommaSeparatedStringToArray", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATH_SEPARATOR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "PATH_SEPARATOR = \"/\"", "var_name": "PATH_SEPARATOR"}, {"original_string": "public static final String ENCODED_PATH_SEPARATOR = \":\";", "modifier": "public static final", "type": "String", "declarator": "ENCODED_PATH_SEPARATOR = \":\"", "var_name": "ENCODED_PATH_SEPARATOR"}, {"original_string": "private static final Log logger = LogFactory.getLog( FileUtils.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( FileUtils.class )", "var_name": "logger"}, {"original_string": "private static final RegExp containsControlCharactersPattern = RegExp.compile( \"[\\\\x00-\\\\x1F\\\\x7F]\" );", "modifier": "private static final", "type": "RegExp", "declarator": "containsControlCharactersPattern = RegExp.compile( \"[\\\\x00-\\\\x1F\\\\x7F]\" )", "var_name": "containsControlCharactersPattern"}], "methods": [{"identifier": "idToPath", "parameters": "( String pathId )", "modifiers": "public static", "return": "String", "signature": "String idToPath( String pathId )", "full_signature": "public static String idToPath( String pathId )", "class_method_signature": "FileUtils.idToPath( String pathId )", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "( FileInputStream fileInputStream )", "modifiers": "public static", "return": "boolean", "signature": "boolean closeQuietly( FileInputStream fileInputStream )", "full_signature": "public static boolean closeQuietly( FileInputStream fileInputStream )", "class_method_signature": "FileUtils.closeQuietly( FileInputStream fileInputStream )", "testcase": false, "constructor": false}, {"identifier": "containsReservedCharacter", "parameters": "( String path, char[] reserved )", "modifiers": "public static", "return": "boolean", "signature": "boolean containsReservedCharacter( String path, char[] reserved )", "full_signature": "public static boolean containsReservedCharacter( String path, char[] reserved )", "class_method_signature": "FileUtils.containsReservedCharacter( String path, char[] reserved )", "testcase": false, "constructor": false}, {"identifier": "containsControlCharacters", "parameters": "( String path )", "modifiers": "public static", "return": "boolean", "signature": "boolean containsControlCharacters( String path )", "full_signature": "public static boolean containsControlCharacters( String path )", "class_method_signature": "FileUtils.containsControlCharacters( String path )", "testcase": false, "constructor": false}, {"identifier": "convertCommaSeparatedStringToArray", "parameters": "( String stringToConvert )", "modifiers": "public static", "return": "String[]", "signature": "String[] convertCommaSeparatedStringToArray( String stringToConvert )", "full_signature": "public static String[] convertCommaSeparatedStringToArray( String stringToConvert )", "class_method_signature": "FileUtils.convertCommaSeparatedStringToArray( String stringToConvert )", "testcase": false, "constructor": false}, {"identifier": "getParentPath", "parameters": "( final String path )", "modifiers": "public static", "return": "String", "signature": "String getParentPath( final String path )", "full_signature": "public static String getParentPath( final String path )", "class_method_signature": "FileUtils.getParentPath( final String path )", "testcase": false, "constructor": false}, {"identifier": "isRootLevelPath", "parameters": "( final String path )", "modifiers": "public static", "return": "boolean", "signature": "boolean isRootLevelPath( final String path )", "full_signature": "public static boolean isRootLevelPath( final String path )", "class_method_signature": "FileUtils.isRootLevelPath( final String path )", "testcase": false, "constructor": false}, {"identifier": "trimTrailingSlash", "parameters": "( String path )", "modifiers": "private static", "return": "String", "signature": "String trimTrailingSlash( String path )", "full_signature": "private static String trimTrailingSlash( String path )", "class_method_signature": "FileUtils.trimTrailingSlash( String path )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/utils/FileUtils.java"}, "focal_method": {"identifier": "convertCommaSeparatedStringToArray", "parameters": "( String stringToConvert )", "modifiers": "public static", "return": "String[]", "body": "public static String[] convertCommaSeparatedStringToArray( String stringToConvert ) {\n    if ( stringToConvert == null || stringToConvert.isEmpty() ) {\n      throw new IllegalArgumentException( \"String cannot be null or empty\" );\n    }\n\n    return stringToConvert.split( \"[,]\" );\n  }", "signature": "String[] convertCommaSeparatedStringToArray( String stringToConvert )", "full_signature": "public static String[] convertCommaSeparatedStringToArray( String stringToConvert )", "class_method_signature": "FileUtils.convertCommaSeparatedStringToArray( String stringToConvert )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "split"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}