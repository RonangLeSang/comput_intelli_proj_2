{"test_class": {"identifier": "SystemConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SystemConfig systemConfig;", "modifier": "", "type": "SystemConfig", "declarator": "systemConfig", "var_name": "systemConfig"}, {"original_string": "private List<IConfiguration> configs;", "modifier": "private", "type": "List<IConfiguration>", "declarator": "configs", "var_name": "configs"}, {"original_string": "private Properties props1;", "modifier": "private", "type": "Properties", "declarator": "props1", "var_name": "props1"}, {"original_string": "private Properties props2;", "modifier": "private", "type": "Properties", "declarator": "props2", "var_name": "props2"}, {"original_string": "@Mock IConfiguration config1;", "modifier": "@Mock", "type": "IConfiguration", "declarator": "config1", "var_name": "config1"}, {"original_string": "@Mock IConfiguration config2;", "modifier": "@Mock", "type": "IConfiguration", "declarator": "config2", "var_name": "config2"}, {"original_string": "@Mock IConfiguration config3;", "modifier": "@Mock", "type": "IConfiguration", "declarator": "config3", "var_name": "config3"}], "file": "extensions/src/test/java/org/pentaho/platform/config/SystemConfigTest.java"}, "test_case": {"identifier": "testConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConstructor() throws Exception {\n    systemConfig = new SystemConfig( configs );\n    assertNotNull( systemConfig.getConfiguration( \"1\" ) );\n    assertNotNull( systemConfig.getConfiguration( \"2\" ) );\n  }", "signature": "void testConstructor()", "full_signature": "@Test public void testConstructor()", "class_method_signature": "SystemConfigTest.testConstructor()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getConfiguration", "assertNotNull", "getConfiguration"]}, "focal_class": {"identifier": "SystemConfig", "superclass": "", "interfaces": "implements ISystemConfig", "fields": [{"original_string": "private final Map<String, IConfiguration> configs = new ConcurrentHashMap<String, IConfiguration>();", "modifier": "private final", "type": "Map<String, IConfiguration>", "declarator": "configs = new ConcurrentHashMap<String, IConfiguration>()", "var_name": "configs"}, {"original_string": "private static final Pattern pattern = Pattern.compile( \"([^\\\\.]+)\\\\.(.+)\" );", "modifier": "private static final", "type": "Pattern", "declarator": "pattern = Pattern.compile( \"([^\\\\.]+)\\\\.(.+)\" )", "var_name": "pattern"}, {"original_string": "private Logger logger = LoggerFactory.getLogger( getClass() );", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( getClass() )", "var_name": "logger"}], "methods": [{"identifier": "SystemConfig", "parameters": "()", "modifiers": "public", "return": "", "signature": " SystemConfig()", "full_signature": "public  SystemConfig()", "class_method_signature": "SystemConfig.SystemConfig()", "testcase": false, "constructor": true}, {"identifier": "SystemConfig", "parameters": "( List<IConfiguration> startingConfigs )", "modifiers": "public", "return": "", "signature": " SystemConfig( List<IConfiguration> startingConfigs )", "full_signature": "public  SystemConfig( List<IConfiguration> startingConfigs )", "class_method_signature": "SystemConfig.SystemConfig( List<IConfiguration> startingConfigs )", "testcase": false, "constructor": true}, {"identifier": "getProperty", "parameters": "( String placeholder )", "modifiers": "public", "return": "String", "signature": "String getProperty( String placeholder )", "full_signature": "public String getProperty( String placeholder )", "class_method_signature": "SystemConfig.getProperty( String placeholder )", "testcase": false, "constructor": false}, {"identifier": "resolveValue", "parameters": "( String placeholder )", "modifiers": "private", "return": "String", "signature": "String resolveValue( String placeholder )", "full_signature": "private String resolveValue( String placeholder )", "class_method_signature": "SystemConfig.resolveValue( String placeholder )", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "( String configId )", "modifiers": "@Override public", "return": "IConfiguration", "signature": "IConfiguration getConfiguration( String configId )", "full_signature": "@Override public IConfiguration getConfiguration( String configId )", "class_method_signature": "SystemConfig.getConfiguration( String configId )", "testcase": false, "constructor": false}, {"identifier": "registerConfiguration", "parameters": "( IConfiguration configuration )", "modifiers": "@Override public", "return": "void", "signature": "void registerConfiguration( IConfiguration configuration )", "full_signature": "@Override public void registerConfiguration( IConfiguration configuration )", "class_method_signature": "SystemConfig.registerConfiguration( IConfiguration configuration )", "testcase": false, "constructor": false}, {"identifier": "listConfigurations", "parameters": "()", "modifiers": "@Override public", "return": "IConfiguration[]", "signature": "IConfiguration[] listConfigurations()", "full_signature": "@Override public IConfiguration[] listConfigurations()", "class_method_signature": "SystemConfig.listConfigurations()", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/config/SystemConfig.java"}, "focal_method": {"identifier": "getConfiguration", "parameters": "( String configId )", "modifiers": "@Override public", "return": "IConfiguration", "body": "@Override\n  public IConfiguration getConfiguration( String configId ) {\n    return configs.get( configId );\n  }", "signature": "IConfiguration getConfiguration( String configId )", "full_signature": "@Override public IConfiguration getConfiguration( String configId )", "class_method_signature": "SystemConfig.getConfiguration( String configId )", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}