{"test_class": {"identifier": "LocaleFilesProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ENCODING = \"UTF-8\"", "var_name": "DEFAULT_ENCODING"}, {"original_string": "PentahoPlatformImporter importer;", "modifier": "", "type": "PentahoPlatformImporter", "declarator": "importer", "var_name": "importer"}, {"original_string": "LocaleFilesProcessor localeFilesProcessor;", "modifier": "", "type": "LocaleFilesProcessor", "declarator": "localeFilesProcessor", "var_name": "localeFilesProcessor"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/services/importer/LocaleFilesProcessorTest.java"}, "test_case": {"identifier": "isXMLLocaleWrongFormatTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void isXMLLocaleWrongFormatTest() {\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n      + \"<name>the name</name>\"\n      + \"<description>the description</description>\";\n    localeFilesProcessor = new LocaleFilesProcessor();\n    assertFalse( localeFilesProcessor.isXMLlocale( new ByteArrayInputStream( xml.getBytes() ) ) );\n  }", "signature": "void isXMLLocaleWrongFormatTest()", "full_signature": "@Test public void isXMLLocaleWrongFormatTest()", "class_method_signature": "LocaleFilesProcessorTest.isXMLLocaleWrongFormatTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isXMLlocale", "getBytes"]}, "focal_class": {"identifier": "LocaleFilesProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_LOCALE_RESOLVER = \"file.locale\";", "modifier": "private static final", "type": "String", "declarator": "FILE_LOCALE_RESOLVER = \"file.locale\"", "var_name": "FILE_LOCALE_RESOLVER"}, {"original_string": "private static final String URL_DESCRIPTION = \"url_description\";", "modifier": "private static final", "type": "String", "declarator": "URL_DESCRIPTION = \"url_description\"", "var_name": "URL_DESCRIPTION"}, {"original_string": "private static final String URL_NAME = \"url_name\";", "modifier": "private static final", "type": "String", "declarator": "URL_NAME = \"url_name\"", "var_name": "URL_NAME"}, {"original_string": "private static final String DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final String TITLE = \"title\";", "modifier": "private static final", "type": "String", "declarator": "TITLE = \"title\"", "var_name": "TITLE"}, {"original_string": "private static final String NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}, {"original_string": "private static final String PROPERTIES_EXT = \".properties\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTIES_EXT = \".properties\"", "var_name": "PROPERTIES_EXT"}, {"original_string": "private static final String LOCALE_EXT = \".locale\";", "modifier": "private static final", "type": "String", "declarator": "LOCALE_EXT = \".locale\"", "var_name": "LOCALE_EXT"}, {"original_string": "private static final String XML_LOCALE = \"index.xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_LOCALE = \"index.xml\"", "var_name": "XML_LOCALE"}, {"original_string": "private List<LocaleFileDescriptor> localeFiles;", "modifier": "private", "type": "List<LocaleFileDescriptor>", "declarator": "localeFiles", "var_name": "localeFiles"}], "methods": [{"identifier": "LocaleFilesProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " LocaleFilesProcessor()", "full_signature": "public  LocaleFilesProcessor()", "class_method_signature": "LocaleFilesProcessor.LocaleFilesProcessor()", "testcase": false, "constructor": true}, {"identifier": "isLocaleFile", "parameters": "( IRepositoryFileBundle file, String parentPath, byte[] bytes )", "modifiers": "public", "return": "boolean", "signature": "boolean isLocaleFile( IRepositoryFileBundle file, String parentPath, byte[] bytes )", "full_signature": "public boolean isLocaleFile( IRepositoryFileBundle file, String parentPath, byte[] bytes )", "class_method_signature": "LocaleFilesProcessor.isLocaleFile( IRepositoryFileBundle file, String parentPath, byte[] bytes )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Properties properties, String propertyName, int sourceVersion )", "modifiers": "private", "return": "String", "signature": "String getProperty( Properties properties, String propertyName, int sourceVersion )", "full_signature": "private String getProperty( Properties properties, String propertyName, int sourceVersion )", "class_method_signature": "LocaleFilesProcessor.getProperty( Properties properties, String propertyName, int sourceVersion )", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "( InputStream inputStream )", "modifiers": "public", "return": "Properties", "signature": "Properties loadProperties( InputStream inputStream )", "full_signature": "public Properties loadProperties( InputStream inputStream )", "class_method_signature": "LocaleFilesProcessor.loadProperties( InputStream inputStream )", "testcase": false, "constructor": false}, {"identifier": "createLocaleEntry", "parameters": "( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is )", "modifiers": "public", "return": "boolean", "signature": "boolean createLocaleEntry( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is )", "full_signature": "public boolean createLocaleEntry( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is )", "class_method_signature": "LocaleFilesProcessor.createLocaleEntry( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is )", "testcase": false, "constructor": false}, {"identifier": "createLocaleEntry", "parameters": "( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is, int sourceVersion )", "modifiers": "public", "return": "boolean", "signature": "boolean createLocaleEntry( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is, int sourceVersion )", "full_signature": "public boolean createLocaleEntry( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is, int sourceVersion )", "class_method_signature": "LocaleFilesProcessor.createLocaleEntry( String filePath, String name, String title, String description,\n      RepositoryFile file, InputStream is, int sourceVersion )", "testcase": false, "constructor": false}, {"identifier": "processLocaleFiles", "parameters": "( IPlatformImporter importer )", "modifiers": "public", "return": "void", "signature": "void processLocaleFiles( IPlatformImporter importer )", "full_signature": "public void processLocaleFiles( IPlatformImporter importer )", "class_method_signature": "LocaleFilesProcessor.processLocaleFiles( IPlatformImporter importer )", "testcase": false, "constructor": false}, {"identifier": "proceed", "parameters": "( IPlatformImporter importer, RepositoryFileImportBundle.Builder bundleBuilder, String mimeType,\n                          LocaleFileDescriptor localeFile )", "modifiers": "protected", "return": "void", "signature": "void proceed( IPlatformImporter importer, RepositoryFileImportBundle.Builder bundleBuilder, String mimeType,\n                          LocaleFileDescriptor localeFile )", "full_signature": "protected void proceed( IPlatformImporter importer, RepositoryFileImportBundle.Builder bundleBuilder, String mimeType,\n                          LocaleFileDescriptor localeFile )", "class_method_signature": "LocaleFilesProcessor.proceed( IPlatformImporter importer, RepositoryFileImportBundle.Builder bundleBuilder, String mimeType,\n                          LocaleFileDescriptor localeFile )", "testcase": false, "constructor": false}, {"identifier": "isXMLlocale", "parameters": "( InputStream localeBundle )", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isXMLlocale( InputStream localeBundle )", "full_signature": "@VisibleForTesting boolean isXMLlocale( InputStream localeBundle )", "class_method_signature": "LocaleFilesProcessor.isXMLlocale( InputStream localeBundle )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/services/importer/LocaleFilesProcessor.java"}, "focal_method": {"identifier": "isXMLlocale", "parameters": "( InputStream localeBundle )", "modifiers": "@VisibleForTesting", "return": "boolean", "body": "@VisibleForTesting\n  boolean isXMLlocale( InputStream localeBundle ) {\n    try {\n      DocumentBuilderFactory builderFactory = XMLParserFactoryProducer.createSecureDocBuilderFactory();\n      DocumentBuilder builder = builderFactory.newDocumentBuilder();\n      XPath xPath = XPathFactory.newInstance().newXPath();\n      Document document = builder.parse( localeBundle );\n      String name = xPath.compile( \"/index/name\" ).evaluate( document );\n      String desc = xPath.compile( \"/index/description\" ).evaluate( document );\n      if ( !name.isEmpty() && !desc.isEmpty() ) {\n        return true;\n      }\n    } catch ( XPathExpressionException | ParserConfigurationException | SAXException | IOException e ) {\n      return false;\n    }\n    return false;\n  }", "signature": "boolean isXMLlocale( InputStream localeBundle )", "full_signature": "@VisibleForTesting boolean isXMLlocale( InputStream localeBundle )", "class_method_signature": "LocaleFilesProcessor.isXMLlocale( InputStream localeBundle )", "testcase": false, "constructor": false, "invocations": ["createSecureDocBuilderFactory", "newDocumentBuilder", "newXPath", "newInstance", "parse", "evaluate", "compile", "evaluate", "compile", "isEmpty", "isEmpty"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}