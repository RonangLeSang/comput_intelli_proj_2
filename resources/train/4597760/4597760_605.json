{"test_class": {"identifier": "ServerPortRegistryTest", "superclass": "", "interfaces": "", "fields": [], "file": "extensions/src/test/java/org/pentaho/platform/settings/ServerPortRegistryTest.java"}, "test_case": {"identifier": "addServiceTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addServiceTest() {\n    ServerPortRegistry.clear();\n    Service service = new Service( \"foo\", \"foo description\" );\n    ServerPortRegistry.addService( service );\n\n    Service readService = ServerPortRegistry.getService( \"foo\" );\n    assertEquals( service.getServiceDescription(), readService.getServiceDescription() );\n  }", "signature": "void addServiceTest()", "full_signature": "@Test public void addServiceTest()", "class_method_signature": "ServerPortRegistryTest.addServiceTest()", "testcase": true, "constructor": false, "invocations": ["clear", "addService", "getService", "assertEquals", "getServiceDescription", "getServiceDescription"]}, "focal_class": {"identifier": "ServerPortRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "static ServerPortRegistry instance = new ServerPortRegistry();", "modifier": "static", "type": "ServerPortRegistry", "declarator": "instance = new ServerPortRegistry()", "var_name": "instance"}, {"original_string": "private static ConcurrentHashMap<String, ServerPort> serverPorts;", "modifier": "private static", "type": "ConcurrentHashMap<String, ServerPort>", "declarator": "serverPorts", "var_name": "serverPorts"}, {"original_string": "private static ConcurrentHashMap<String, Service> services;", "modifier": "private static", "type": "ConcurrentHashMap<String, Service>", "declarator": "services", "var_name": "services"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger( ServerPortRegistry.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( ServerPortRegistry.class )", "var_name": "logger"}], "methods": [{"identifier": "ServerPortRegistry", "parameters": "()", "modifiers": "private", "return": "", "signature": " ServerPortRegistry()", "full_signature": "private  ServerPortRegistry()", "class_method_signature": "ServerPortRegistry.ServerPortRegistry()", "testcase": false, "constructor": true}, {"identifier": "addPort", "parameters": "( ServerPort serverPort )", "modifiers": "public static", "return": "void", "signature": "void addPort( ServerPort serverPort )", "full_signature": "public static void addPort( ServerPort serverPort )", "class_method_signature": "ServerPortRegistry.addPort( ServerPort serverPort )", "testcase": false, "constructor": false}, {"identifier": "addService", "parameters": "( Service service )", "modifiers": "public static", "return": "void", "signature": "void addService( Service service )", "full_signature": "public static void addService( Service service )", "class_method_signature": "ServerPortRegistry.addService( Service service )", "testcase": false, "constructor": false}, {"identifier": "removePort", "parameters": "( ServerPort serverPort )", "modifiers": "public static", "return": "void", "signature": "void removePort( ServerPort serverPort )", "full_signature": "public static void removePort( ServerPort serverPort )", "class_method_signature": "ServerPortRegistry.removePort( ServerPort serverPort )", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "ServerPortRegistry.clear()", "testcase": false, "constructor": false}, {"identifier": "getService", "parameters": "( String serviceName )", "modifiers": "public static", "return": "Service", "signature": "Service getService( String serviceName )", "full_signature": "public static Service getService( String serviceName )", "class_method_signature": "ServerPortRegistry.getService( String serviceName )", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "( String portId )", "modifiers": "public static", "return": "ServerPort", "signature": "ServerPort getPort( String portId )", "full_signature": "public static ServerPort getPort( String portId )", "class_method_signature": "ServerPortRegistry.getPort( String portId )", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "public static", "return": "Set<Service>", "signature": "Set<Service> getServices()", "full_signature": "public static Set<Service> getServices()", "class_method_signature": "ServerPortRegistry.getServices()", "testcase": false, "constructor": false}, {"identifier": "getPorts", "parameters": "()", "modifiers": "public static", "return": "Set<ServerPort>", "signature": "Set<ServerPort> getPorts()", "full_signature": "public static Set<ServerPort> getPorts()", "class_method_signature": "ServerPortRegistry.getPorts()", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/settings/ServerPortRegistry.java"}, "focal_method": {"identifier": "addService", "parameters": "( Service service )", "modifiers": "public static", "return": "void", "body": "public static void addService( Service service ) {\n    if ( !services.contains( service.getServiceName() ) ) {\n      services.put( service.getServiceName(), service );\n    }\n  }", "signature": "void addService( Service service )", "full_signature": "public static void addService( Service service )", "class_method_signature": "ServerPortRegistry.addService( Service service )", "testcase": false, "constructor": false, "invocations": ["contains", "getServiceName", "put", "getServiceName"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}