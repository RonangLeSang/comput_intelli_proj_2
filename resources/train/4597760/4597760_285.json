{"test_class": {"identifier": "DefaultLdapAuthenticationProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DefaultLdapAuthenticationProvider ldapAuthProvider;", "modifier": "", "type": "DefaultLdapAuthenticationProvider", "declarator": "ldapAuthProvider", "var_name": "ldapAuthProvider"}, {"original_string": "@Mock LdapAuthenticator authenticator;", "modifier": "@Mock", "type": "LdapAuthenticator", "declarator": "authenticator", "var_name": "authenticator"}, {"original_string": "@Mock IAuthenticationRoleMapper roleMapper;", "modifier": "@Mock", "type": "IAuthenticationRoleMapper", "declarator": "roleMapper", "var_name": "roleMapper"}, {"original_string": "@Mock LdapAuthoritiesPopulator authoritiesPopulator;", "modifier": "@Mock", "type": "LdapAuthoritiesPopulator", "declarator": "authoritiesPopulator", "var_name": "authoritiesPopulator"}, {"original_string": "@Mock Authentication auth;", "modifier": "@Mock", "type": "Authentication", "declarator": "auth", "var_name": "auth"}, {"original_string": "@Mock UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken;", "modifier": "@Mock", "type": "UsernamePasswordAuthenticationToken", "declarator": "usernamePasswordAuthenticationToken", "var_name": "usernamePasswordAuthenticationToken"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/services/security/userrole/ldap/DefaultLdapAuthenticationProviderTest.java"}, "test_case": {"identifier": "testAuthenticate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAuthenticate() throws Exception {\n    ldapAuthProvider = new DefaultLdapAuthenticationProvider( authenticator, authoritiesPopulator, roleMapper, \"admin\" );\n    when( usernamePasswordAuthenticationToken.getName() ).thenReturn( \"admin\" );\n    when( usernamePasswordAuthenticationToken.getCredentials() ).thenReturn( \"p@$$w0rd\" );\n\n    DirContextOperations dirContextOps = mock( DirContextOperations.class );\n    when( authenticator.authenticate( usernamePasswordAuthenticationToken ) ).thenReturn( dirContextOps );\n    Collection grantedAuthorities = Arrays.asList( new GrantedAuthority[]{ new SimpleGrantedAuthority( \"admin\" ) } );\n\n    when( authoritiesPopulator.getGrantedAuthorities( dirContextOps, \"admin\" ) ).thenReturn( grantedAuthorities );\n\n    UserDetailsContextMapper contextMapper = mock( UserDetailsContextMapper.class );\n    ldapAuthProvider.setUserDetailsContextMapper( contextMapper );\n    UserDetails userDetails = mock( UserDetails.class );\n    when( userDetails.getAuthorities() ).thenReturn( grantedAuthorities );\n    when( contextMapper.mapUserFromContext( any( DirContextOperations.class ), anyString(), any( grantedAuthorities.getClass() ) ) ).thenReturn( userDetails );\n    when( roleMapper.toPentahoRole( anyString() ) ).thenReturn( \"admin\" );\n\n    Authentication result = ldapAuthProvider.authenticate( usernamePasswordAuthenticationToken );\n\n    assertNotNull( result );\n    assertEquals( \"p@$$w0rd\", result.getCredentials().toString() );\n  }", "signature": "void testAuthenticate()", "full_signature": "@Test public void testAuthenticate()", "class_method_signature": "DefaultLdapAuthenticationProviderTest.testAuthenticate()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getName", "thenReturn", "when", "getCredentials", "mock", "thenReturn", "when", "authenticate", "asList", "thenReturn", "when", "getGrantedAuthorities", "mock", "setUserDetailsContextMapper", "mock", "thenReturn", "when", "getAuthorities", "thenReturn", "when", "mapUserFromContext", "any", "anyString", "any", "getClass", "thenReturn", "when", "toPentahoRole", "anyString", "authenticate", "assertNotNull", "assertEquals", "toString", "getCredentials"]}, "focal_class": {"identifier": "DefaultLdapAuthenticationProvider", "superclass": "extends LdapAuthenticationProvider", "interfaces": "", "fields": [{"original_string": "private IAuthenticationRoleMapper roleMapper;", "modifier": "private", "type": "IAuthenticationRoleMapper", "declarator": "roleMapper", "var_name": "roleMapper"}, {"original_string": "private String authenticatedRole;", "modifier": "private", "type": "String", "declarator": "authenticatedRole", "var_name": "authenticatedRole"}], "methods": [{"identifier": "DefaultLdapAuthenticationProvider", "parameters": "( LdapAuthenticator authenticator, IAuthenticationRoleMapper roleMapper )", "modifiers": "public", "return": "", "signature": " DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator, IAuthenticationRoleMapper roleMapper )", "full_signature": "public  DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator, IAuthenticationRoleMapper roleMapper )", "class_method_signature": "DefaultLdapAuthenticationProvider.DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator, IAuthenticationRoleMapper roleMapper )", "testcase": false, "constructor": true}, {"identifier": "DefaultLdapAuthenticationProvider", "parameters": "( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper )", "modifiers": "public", "return": "", "signature": " DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper )", "full_signature": "public  DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper )", "class_method_signature": "DefaultLdapAuthenticationProvider.DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper )", "testcase": false, "constructor": true}, {"identifier": "DefaultLdapAuthenticationProvider", "parameters": "( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper, String authenticatedRole )", "modifiers": "public", "return": "", "signature": " DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper, String authenticatedRole )", "full_signature": "public  DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper, String authenticatedRole )", "class_method_signature": "DefaultLdapAuthenticationProvider.DefaultLdapAuthenticationProvider( LdapAuthenticator authenticator,\n      LdapAuthoritiesPopulator authoritiesPopulator, IAuthenticationRoleMapper roleMapper, String authenticatedRole )", "testcase": false, "constructor": true}, {"identifier": "loadUserAuthorities", "parameters": "( DirContextOperations userData, String username, String password )", "modifiers": "@Override protected", "return": "Collection<? extends GrantedAuthority>", "signature": "Collection<? extends GrantedAuthority> loadUserAuthorities( DirContextOperations userData, String username, String password )", "full_signature": "@Override protected Collection<? extends GrantedAuthority> loadUserAuthorities( DirContextOperations userData, String username, String password )", "class_method_signature": "DefaultLdapAuthenticationProvider.loadUserAuthorities( DirContextOperations userData, String username, String password )", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "( Authentication authentication )", "modifiers": "@Override public", "return": "Authentication", "signature": "Authentication authenticate( Authentication authentication )", "full_signature": "@Override public Authentication authenticate( Authentication authentication )", "class_method_signature": "DefaultLdapAuthenticationProvider.authenticate( Authentication authentication )", "testcase": false, "constructor": false}, {"identifier": "setAuthenticatedRole", "parameters": "( String authenticatedRole )", "modifiers": "private", "return": "void", "signature": "void setAuthenticatedRole( String authenticatedRole )", "full_signature": "private void setAuthenticatedRole( String authenticatedRole )", "class_method_signature": "DefaultLdapAuthenticationProvider.setAuthenticatedRole( String authenticatedRole )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/services/security/userrole/ldap/DefaultLdapAuthenticationProvider.java"}, "focal_method": {"identifier": "authenticate", "parameters": "( Authentication authentication )", "modifiers": "@Override public", "return": "Authentication", "body": "@Override\n  public Authentication authenticate( Authentication authentication ) throws AuthenticationException {\n    final Authentication authenticate = super.authenticate( authentication );\n    for ( GrantedAuthority authority : authenticate.getAuthorities() ) {\n      if ( authority.getAuthority().equals( authenticatedRole ) ) {\n        return authenticate;\n      }\n    }\n    throw new AuthenticationServiceException( \"The user doesn't have '\" + authenticatedRole + \"' role.\" );\n  }", "signature": "Authentication authenticate( Authentication authentication )", "full_signature": "@Override public Authentication authenticate( Authentication authentication )", "class_method_signature": "DefaultLdapAuthenticationProvider.authenticate( Authentication authentication )", "testcase": false, "constructor": false, "invocations": ["authenticate", "getAuthorities", "equals", "getAuthority"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}