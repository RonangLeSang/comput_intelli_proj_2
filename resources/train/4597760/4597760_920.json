{"test_class": {"identifier": "SchedulerResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SchedulerResource schedulerResource;", "modifier": "", "type": "SchedulerResource", "declarator": "schedulerResource", "var_name": "schedulerResource"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/SchedulerResourceTest.java"}, "test_case": {"identifier": "updateJob_Returns500_WhenSchedulerFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void updateJob_Returns500_WhenSchedulerFails() throws Exception {\n    JobScheduleRequest request = new JobScheduleRequest();\n    when( schedulerResource.schedulerService.updateJob( request ) )\n      .thenThrow( new SchedulerException( new RuntimeException( \"error\" ) ) );\n\n    assertUpdateJob( request, INTERNAL_SERVER_ERROR, \"error\" );\n  }", "signature": "void updateJob_Returns500_WhenSchedulerFails()", "full_signature": "@Test public void updateJob_Returns500_WhenSchedulerFails()", "class_method_signature": "SchedulerResourceTest.updateJob_Returns500_WhenSchedulerFails()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "updateJob", "assertUpdateJob"]}, "focal_class": {"identifier": "SchedulerResource", "superclass": "extends AbstractJaxRSResource", "interfaces": "", "fields": [{"original_string": "protected SchedulerService schedulerService;", "modifier": "protected", "type": "SchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}, {"original_string": "protected static final Log logger = LogFactory.getLog( SchedulerResource.class );", "modifier": "protected static final", "type": "Log", "declarator": "logger = LogFactory.getLog( SchedulerResource.class )", "var_name": "logger"}], "methods": [{"identifier": "SchedulerResource", "parameters": "()", "modifiers": "public", "return": "", "signature": " SchedulerResource()", "full_signature": "public  SchedulerResource()", "class_method_signature": "SchedulerResource.SchedulerResource()", "testcase": false, "constructor": true}, {"identifier": "createJob", "parameters": "( JobScheduleRequest scheduleRequest )", "modifiers": "@POST @Path ( \"/job\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Schedule created successfully.\" ), @ResponseCode ( code = 401, condition = \"User is not allowed to create schedules.\" ), @ResponseCode ( code = 403, condition = \"Cannot create schedules for the specified file.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while creating a schedule.\" ) } ) public", "return": "Response", "signature": "Response createJob( JobScheduleRequest scheduleRequest )", "full_signature": "@POST @Path ( \"/job\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Schedule created successfully.\" ), @ResponseCode ( code = 401, condition = \"User is not allowed to create schedules.\" ), @ResponseCode ( code = 403, condition = \"Cannot create schedules for the specified file.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while creating a schedule.\" ) } ) public Response createJob( JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerResource.createJob( JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "updateJob", "parameters": "( JobScheduleRequest scheduleRequest )", "modifiers": "@POST @Path ( \"/job/update\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Schedule updated successfully.\" ), @ResponseCode ( code = 401, condition = \"User is not allowed to update schedules.\" ), @ResponseCode ( code = 403, condition = \"Cannot update schedules for the specified file.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while updating a schedule.\" ) } ) public", "return": "Response", "signature": "Response updateJob( JobScheduleRequest scheduleRequest )", "full_signature": "@POST @Path ( \"/job/update\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Schedule updated successfully.\" ), @ResponseCode ( code = 401, condition = \"User is not allowed to update schedules.\" ), @ResponseCode ( code = 403, condition = \"Cannot update schedules for the specified file.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while updating a schedule.\" ) } ) public Response updateJob( JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerResource.updateJob( JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "triggerNow", "parameters": "( JobRequest jobRequest )", "modifiers": "@POST @Path ( \"/triggerNow\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Job triggered successfully.\" ), @ResponseCode ( code = 400, condition = \"Invalid input.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public", "return": "Response", "signature": "Response triggerNow( JobRequest jobRequest )", "full_signature": "@POST @Path ( \"/triggerNow\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Job triggered successfully.\" ), @ResponseCode ( code = 400, condition = \"Invalid input.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public Response triggerNow( JobRequest jobRequest )", "class_method_signature": "SchedulerResource.triggerNow( JobRequest jobRequest )", "testcase": false, "constructor": false}, {"identifier": "getContentCleanerJob", "parameters": "()", "modifiers": "@GET @Path ( \"/getContentCleanerJob\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Content cleaner job successfully retrieved.\" ), @ResponseCode ( code = 204, condition = \"No content cleaner job exists.\" ), } ) public", "return": "Job", "signature": "Job getContentCleanerJob()", "full_signature": "@GET @Path ( \"/getContentCleanerJob\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Content cleaner job successfully retrieved.\" ), @ResponseCode ( code = 204, condition = \"No content cleaner job exists.\" ), } ) public Job getContentCleanerJob()", "class_method_signature": "SchedulerResource.getContentCleanerJob()", "testcase": false, "constructor": false}, {"identifier": "getJobs", "parameters": "( @DefaultValue ( \"false\" ) @QueryParam ( \"asCronString\" ) Boolean asCronString )", "modifiers": "@Deprecated @GET @Path ( \"/jobs\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Jobs retrieved successfully.\" ), @ResponseCode ( code = 500, condition = \"Error while retrieving jobs.\" ) } ) public", "return": "List<Job>", "signature": "List<Job> getJobs( @DefaultValue ( \"false\" ) @QueryParam ( \"asCronString\" ) Boolean asCronString )", "full_signature": "@Deprecated @GET @Path ( \"/jobs\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Jobs retrieved successfully.\" ), @ResponseCode ( code = 500, condition = \"Error while retrieving jobs.\" ) } ) public List<Job> getJobs( @DefaultValue ( \"false\" ) @QueryParam ( \"asCronString\" ) Boolean asCronString )", "class_method_signature": "SchedulerResource.getJobs( @DefaultValue ( \"false\" ) @QueryParam ( \"asCronString\" ) Boolean asCronString )", "testcase": false, "constructor": false}, {"identifier": "getAllJobs", "parameters": "()", "modifiers": "@GET @Path ( \"/getJobs\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Jobs retrieved successfully.\" ), @ResponseCode ( code = 500, condition = \"Error while retrieving jobs.\" ), } ) public", "return": "List<Job>", "signature": "List<Job> getAllJobs()", "full_signature": "@GET @Path ( \"/getJobs\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Jobs retrieved successfully.\" ), @ResponseCode ( code = 500, condition = \"Error while retrieving jobs.\" ), } ) public List<Job> getAllJobs()", "class_method_signature": "SchedulerResource.getAllJobs()", "testcase": false, "constructor": false}, {"identifier": "isScheduleAllowed", "parameters": "( @QueryParam ( \"id\" ) String id )", "modifiers": "@GET @Path ( \"/isScheduleAllowed\" ) @Produces ( TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved scheduling ability of repository file.\" ), @ResponseCode ( code = 500, condition = \"Invalid repository file id.\" ), } ) public", "return": "String", "signature": "String isScheduleAllowed( @QueryParam ( \"id\" ) String id )", "full_signature": "@GET @Path ( \"/isScheduleAllowed\" ) @Produces ( TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved scheduling ability of repository file.\" ), @ResponseCode ( code = 500, condition = \"Invalid repository file id.\" ), } ) public String isScheduleAllowed( @QueryParam ( \"id\" ) String id )", "class_method_signature": "SchedulerResource.isScheduleAllowed( @QueryParam ( \"id\" ) String id )", "testcase": false, "constructor": false}, {"identifier": "doGetCanSchedule", "parameters": "()", "modifiers": "@GET @Path ( \"/canSchedule\" ) @Produces ( APPLICATION_JSON ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful retrieved the scheduling permission.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the scheduling permission.\" ) } ) public", "return": "String", "signature": "String doGetCanSchedule()", "full_signature": "@GET @Path ( \"/canSchedule\" ) @Produces ( APPLICATION_JSON ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful retrieved the scheduling permission.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the scheduling permission.\" ) } ) public String doGetCanSchedule()", "class_method_signature": "SchedulerResource.doGetCanSchedule()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "@GET @Path ( \"/state\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the state of the scheduler.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when getting the state of the scheduler.\" ) } ) public", "return": "Response", "signature": "Response getState()", "full_signature": "@GET @Path ( \"/state\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the state of the scheduler.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when getting the state of the scheduler.\" ) } ) public Response getState()", "class_method_signature": "SchedulerResource.getState()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@POST @Path ( \"/start\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully started the server.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when resuming the scheduler.\" ) } ) public", "return": "Response", "signature": "Response start()", "full_signature": "@POST @Path ( \"/start\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully started the server.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when resuming the scheduler.\" ) } ) public Response start()", "class_method_signature": "SchedulerResource.start()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "@POST @Path ( \"/pause\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully paused the server.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when pausing the scheduler.\" ) } ) public", "return": "Response", "signature": "Response pause()", "full_signature": "@POST @Path ( \"/pause\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully paused the server.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when pausing the scheduler.\" ) } ) public Response pause()", "class_method_signature": "SchedulerResource.pause()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@POST @Path ( \"/shutdown\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully shut down the server.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when shutting down the scheduler.\" ) } ) public", "return": "Response", "signature": "Response shutdown()", "full_signature": "@POST @Path ( \"/shutdown\" ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully shut down the server.\" ), @ResponseCode ( code = 500, condition = \"An error occurred when shutting down the scheduler.\" ) } ) public Response shutdown()", "class_method_signature": "SchedulerResource.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getJobState", "parameters": "( JobRequest jobRequest )", "modifiers": "@POST @Path ( \"/jobState\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the state of the requested job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public", "return": "Response", "signature": "Response getJobState( JobRequest jobRequest )", "full_signature": "@POST @Path ( \"/jobState\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the state of the requested job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public Response getJobState( JobRequest jobRequest )", "class_method_signature": "SchedulerResource.getJobState( JobRequest jobRequest )", "testcase": false, "constructor": false}, {"identifier": "pauseJob", "parameters": "( JobRequest jobRequest )", "modifiers": "@POST @Path ( \"/pauseJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully paused the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public", "return": "Response", "signature": "Response pauseJob( JobRequest jobRequest )", "full_signature": "@POST @Path ( \"/pauseJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully paused the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public Response pauseJob( JobRequest jobRequest )", "class_method_signature": "SchedulerResource.pauseJob( JobRequest jobRequest )", "testcase": false, "constructor": false}, {"identifier": "resumeJob", "parameters": "( JobRequest jobRequest )", "modifiers": "@POST @Path ( \"/resumeJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully resumed the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public", "return": "Response", "signature": "Response resumeJob( JobRequest jobRequest )", "full_signature": "@POST @Path ( \"/resumeJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully resumed the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public Response resumeJob( JobRequest jobRequest )", "class_method_signature": "SchedulerResource.resumeJob( JobRequest jobRequest )", "testcase": false, "constructor": false}, {"identifier": "removeJob", "parameters": "( JobRequest jobRequest )", "modifiers": "@Deprecated @DELETE @Path ( \"/removeJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully removed the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public", "return": "Response", "signature": "Response removeJob( JobRequest jobRequest )", "full_signature": "@Deprecated @DELETE @Path ( \"/removeJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully removed the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public Response removeJob( JobRequest jobRequest )", "class_method_signature": "SchedulerResource.removeJob( JobRequest jobRequest )", "testcase": false, "constructor": false}, {"identifier": "deleteJob", "parameters": "( JobRequest jobRequest )", "modifiers": "@PUT @Path ( \"/removeJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully removed the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public", "return": "Response", "signature": "Response deleteJob( JobRequest jobRequest )", "full_signature": "@PUT @Path ( \"/removeJob\" ) @Produces ( \"text/plain\" ) @Consumes ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully removed the job.\" ), @ResponseCode ( code = 500, condition = \"Invalid jobId.\" ) } ) public Response deleteJob( JobRequest jobRequest )", "class_method_signature": "SchedulerResource.deleteJob( JobRequest jobRequest )", "testcase": false, "constructor": false}, {"identifier": "getJob", "parameters": "( @QueryParam( \"jobId\" ) String jobId,\n                     @DefaultValue( \"false\" ) @QueryParam( \"asCronString\" ) String asCronString )", "modifiers": "@GET @Path ( \"/jobinfo\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the information for the requested job.\" ), @ResponseCode ( code = 204, condition = \"jobId is valid, but the job is either finished or does not exists.\" ), @ResponseCode ( code = 500, condition = \"Internal error or invalid jobId.\" ) } ) public", "return": "Response", "signature": "Response getJob( @QueryParam( \"jobId\" ) String jobId,\n                     @DefaultValue( \"false\" ) @QueryParam( \"asCronString\" ) String asCronString )", "full_signature": "@GET @Path ( \"/jobinfo\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the information for the requested job.\" ), @ResponseCode ( code = 204, condition = \"jobId is valid, but the job is either finished or does not exists.\" ), @ResponseCode ( code = 500, condition = \"Internal error or invalid jobId.\" ) } ) public Response getJob( @QueryParam( \"jobId\" ) String jobId,\n                     @DefaultValue( \"false\" ) @QueryParam( \"asCronString\" ) String asCronString )", "class_method_signature": "SchedulerResource.getJob( @QueryParam( \"jobId\" ) String jobId,\n                     @DefaultValue( \"false\" ) @QueryParam( \"asCronString\" ) String asCronString )", "testcase": false, "constructor": false}, {"identifier": "getJobInfo", "parameters": "()", "modifiers": "@Deprecated @GET @Path ( \"/jobinfotest\" ) @Produces ( { APPLICATION_JSON } ) @Facet ( name = \"Unsupported\" ) public", "return": "JobScheduleRequest", "signature": "JobScheduleRequest getJobInfo()", "full_signature": "@Deprecated @GET @Path ( \"/jobinfotest\" ) @Produces ( { APPLICATION_JSON } ) @Facet ( name = \"Unsupported\" ) public JobScheduleRequest getJobInfo()", "class_method_signature": "SchedulerResource.getJobInfo()", "testcase": false, "constructor": false}, {"identifier": "getJobs", "parameters": "()", "modifiers": "@Deprecated @Facet ( name = \"Unsupported\" ) public", "return": "List<Job>", "signature": "List<Job> getJobs()", "full_signature": "@Deprecated @Facet ( name = \"Unsupported\" ) public List<Job> getJobs()", "class_method_signature": "SchedulerResource.getJobs()", "testcase": false, "constructor": false}, {"identifier": "getBlockoutJobs", "parameters": "()", "modifiers": "@GET @Path ( \"/blockout/blockoutjobs\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved blockout jobs.\" ), } ) public", "return": "List<Job>", "signature": "List<Job> getBlockoutJobs()", "full_signature": "@GET @Path ( \"/blockout/blockoutjobs\" ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved blockout jobs.\" ), } ) public List<Job> getBlockoutJobs()", "class_method_signature": "SchedulerResource.getBlockoutJobs()", "testcase": false, "constructor": false}, {"identifier": "hasBlockouts", "parameters": "()", "modifiers": "@GET @Path ( \"/blockout/hasblockouts\" ) @Produces ( { TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully determined whether or not the system contains blockouts.\" ), } ) public", "return": "Response", "signature": "Response hasBlockouts()", "full_signature": "@GET @Path ( \"/blockout/hasblockouts\" ) @Produces ( { TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully determined whether or not the system contains blockouts.\" ), } ) public Response hasBlockouts()", "class_method_signature": "SchedulerResource.hasBlockouts()", "testcase": false, "constructor": false}, {"identifier": "addBlockout", "parameters": "( JobScheduleRequest jobScheduleRequest )", "modifiers": "@POST @Path ( \"/blockout/add\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ), @ResponseCode ( code = 401, condition = \"User is not authorized to create blockout.\" ) } ) public", "return": "Response", "signature": "Response addBlockout( JobScheduleRequest jobScheduleRequest )", "full_signature": "@POST @Path ( \"/blockout/add\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ), @ResponseCode ( code = 401, condition = \"User is not authorized to create blockout.\" ) } ) public Response addBlockout( JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerResource.addBlockout( JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "updateBlockout", "parameters": "( @QueryParam ( \"jobid\" ) String jobId, JobScheduleRequest jobScheduleRequest )", "modifiers": "@POST @Path ( \"/blockout/update\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ), @ResponseCode ( code = 401, condition = \"User is not authorized to update blockout.\" ) } ) public", "return": "Response", "signature": "Response updateBlockout( @QueryParam ( \"jobid\" ) String jobId, JobScheduleRequest jobScheduleRequest )", "full_signature": "@POST @Path ( \"/blockout/update\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ), @ResponseCode ( code = 401, condition = \"User is not authorized to update blockout.\" ) } ) public Response updateBlockout( @QueryParam ( \"jobid\" ) String jobId, JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerResource.updateBlockout( @QueryParam ( \"jobid\" ) String jobId, JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "blockoutWillFire", "parameters": "( JobScheduleRequest jobScheduleRequest )", "modifiers": "@POST @Path ( \"/blockout/willFire\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( { TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while determining blockouts being fired.\" ) } ) public", "return": "Response", "signature": "Response blockoutWillFire( JobScheduleRequest jobScheduleRequest )", "full_signature": "@POST @Path ( \"/blockout/willFire\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( { TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while determining blockouts being fired.\" ) } ) public Response blockoutWillFire( JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerResource.blockoutWillFire( JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "shouldFireNow", "parameters": "()", "modifiers": "@GET @Path ( \"/blockout/shouldFireNow\" ) @Produces ( { TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ) } ) public", "return": "Response", "signature": "Response shouldFireNow()", "full_signature": "@GET @Path ( \"/blockout/shouldFireNow\" ) @Produces ( { TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful operation.\" ) } ) public Response shouldFireNow()", "class_method_signature": "SchedulerResource.shouldFireNow()", "testcase": false, "constructor": false}, {"identifier": "getBlockStatus", "parameters": "( JobScheduleRequest jobScheduleRequest )", "modifiers": "@POST @Path ( \"/blockout/blockstatus\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully got the blockout status.\" ), @ResponseCode ( code = 401, condition = \"User is not authorized to get the blockout status.\" ) } ) public", "return": "Response", "signature": "Response getBlockStatus( JobScheduleRequest jobScheduleRequest )", "full_signature": "@POST @Path ( \"/blockout/blockstatus\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully got the blockout status.\" ), @ResponseCode ( code = 401, condition = \"User is not authorized to get the blockout status.\" ) } ) public Response getBlockStatus( JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerResource.getBlockStatus( JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "doGetGeneratedContentForSchedule", "parameters": "( @QueryParam ( \"lineageId\" ) String lineageId )", "modifiers": "@GET @Path ( \"/generatedContentForSchedule\" ) @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully got the generated content for schedule\" ) } ) public", "return": "List<RepositoryFileDto>", "signature": "List<RepositoryFileDto> doGetGeneratedContentForSchedule( @QueryParam ( \"lineageId\" ) String lineageId )", "full_signature": "@GET @Path ( \"/generatedContentForSchedule\" ) @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully got the generated content for schedule\" ) } ) public List<RepositoryFileDto> doGetGeneratedContentForSchedule( @QueryParam ( \"lineageId\" ) String lineageId )", "class_method_signature": "SchedulerResource.doGetGeneratedContentForSchedule( @QueryParam ( \"lineageId\" ) String lineageId )", "testcase": false, "constructor": false}, {"identifier": "buildOkResponse", "parameters": "( Object entity )", "modifiers": "protected", "return": "Response", "signature": "Response buildOkResponse( Object entity )", "full_signature": "protected Response buildOkResponse( Object entity )", "class_method_signature": "SchedulerResource.buildOkResponse( Object entity )", "testcase": false, "constructor": false}, {"identifier": "buildPlainTextOkResponse", "parameters": "( String msg )", "modifiers": "protected", "return": "Response", "signature": "Response buildPlainTextOkResponse( String msg )", "full_signature": "protected Response buildPlainTextOkResponse( String msg )", "class_method_signature": "SchedulerResource.buildPlainTextOkResponse( String msg )", "testcase": false, "constructor": false}, {"identifier": "buildServerErrorResponse", "parameters": "( Object entity )", "modifiers": "protected", "return": "Response", "signature": "Response buildServerErrorResponse( Object entity )", "full_signature": "protected Response buildServerErrorResponse( Object entity )", "class_method_signature": "SchedulerResource.buildServerErrorResponse( Object entity )", "testcase": false, "constructor": false}, {"identifier": "buildStatusResponse", "parameters": "( Status status )", "modifiers": "protected", "return": "Response", "signature": "Response buildStatusResponse( Status status )", "full_signature": "protected Response buildStatusResponse( Status status )", "class_method_signature": "SchedulerResource.buildStatusResponse( Status status )", "testcase": false, "constructor": false}, {"identifier": "buildPlainTextStatusResponse", "parameters": "( Status status )", "modifiers": "protected", "return": "Response", "signature": "Response buildPlainTextStatusResponse( Status status )", "full_signature": "protected Response buildPlainTextStatusResponse( Status status )", "class_method_signature": "SchedulerResource.buildPlainTextStatusResponse( Status status )", "testcase": false, "constructor": false}, {"identifier": "getJobRequest", "parameters": "()", "modifiers": "protected", "return": "JobRequest", "signature": "JobRequest getJobRequest()", "full_signature": "protected JobRequest getJobRequest()", "class_method_signature": "SchedulerResource.getJobRequest()", "testcase": false, "constructor": false}, {"identifier": "convertScheduleRequestToJobTrigger", "parameters": "( JobScheduleRequest request )", "modifiers": "protected", "return": "IJobTrigger", "signature": "IJobTrigger convertScheduleRequestToJobTrigger( JobScheduleRequest request )", "full_signature": "protected IJobTrigger convertScheduleRequestToJobTrigger( JobScheduleRequest request )", "class_method_signature": "SchedulerResource.convertScheduleRequestToJobTrigger( JobScheduleRequest request )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/SchedulerResource.java"}, "focal_method": {"identifier": "updateJob", "parameters": "( JobScheduleRequest scheduleRequest )", "modifiers": "@POST @Path ( \"/job/update\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Schedule updated successfully.\" ), @ResponseCode ( code = 401, condition = \"User is not allowed to update schedules.\" ), @ResponseCode ( code = 403, condition = \"Cannot update schedules for the specified file.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while updating a schedule.\" ) } ) public", "return": "Response", "body": "@POST\n  @Path ( \"/job/update\" )\n  @Consumes ( { APPLICATION_JSON, APPLICATION_XML } )\n  @Produces ( \"text/plain\" )\n  @StatusCodes ( {\n      @ResponseCode ( code = 200, condition = \"Schedule updated successfully.\" ),\n      @ResponseCode ( code = 401, condition = \"User is not allowed to update schedules.\" ),\n      @ResponseCode ( code = 403, condition = \"Cannot update schedules for the specified file.\" ),\n      @ResponseCode ( code = 500, condition = \"An error occurred while updating a schedule.\" )\n    } )\n  public Response updateJob( JobScheduleRequest scheduleRequest ) {\n    try {\n      Job job = schedulerService.updateJob( scheduleRequest );\n      return buildPlainTextOkResponse( job.getJobId() );\n    } catch ( SchedulerException e ) {\n      return buildServerErrorResponse( e.getCause().getMessage() );\n    } catch ( IOException e ) {\n      return buildServerErrorResponse( e.getCause().getMessage() );\n    } catch ( SecurityException e ) {\n      return buildStatusResponse( UNAUTHORIZED );\n    } catch ( IllegalAccessException e ) {\n      return buildStatusResponse( FORBIDDEN );\n    }\n  }", "signature": "Response updateJob( JobScheduleRequest scheduleRequest )", "full_signature": "@POST @Path ( \"/job/update\" ) @Consumes ( { APPLICATION_JSON, APPLICATION_XML } ) @Produces ( \"text/plain\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Schedule updated successfully.\" ), @ResponseCode ( code = 401, condition = \"User is not allowed to update schedules.\" ), @ResponseCode ( code = 403, condition = \"Cannot update schedules for the specified file.\" ), @ResponseCode ( code = 500, condition = \"An error occurred while updating a schedule.\" ) } ) public Response updateJob( JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerResource.updateJob( JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false, "invocations": ["updateJob", "buildPlainTextOkResponse", "getJobId", "buildServerErrorResponse", "getMessage", "getCause", "buildServerErrorResponse", "getMessage", "getCause", "buildStatusResponse", "buildStatusResponse"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}