{"test_class": {"identifier": "MDXBaseComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MDXBaseComponent mdxBaseComponent;", "modifier": "", "type": "MDXBaseComponent", "declarator": "mdxBaseComponent", "var_name": "mdxBaseComponent"}, {"original_string": "MDXBaseComponent baseMdxBaseComponent;", "modifier": "", "type": "MDXBaseComponent", "declarator": "baseMdxBaseComponent", "var_name": "baseMdxBaseComponent"}, {"original_string": "@Mock MdxQueryAction queryAction;", "modifier": "@Mock", "type": "MdxQueryAction", "declarator": "queryAction", "var_name": "queryAction"}, {"original_string": "@Mock MdxConnectionAction connAction;", "modifier": "@Mock", "type": "MdxConnectionAction", "declarator": "connAction", "var_name": "connAction"}, {"original_string": "@Mock IActionOutput outputResultSet;", "modifier": "@Mock", "type": "IActionOutput", "declarator": "outputResultSet", "var_name": "outputResultSet"}, {"original_string": "@Mock IPreparedComponent preparedComponent;", "modifier": "@Mock", "type": "IPreparedComponent", "declarator": "preparedComponent", "var_name": "preparedComponent"}, {"original_string": "@Mock IActionInput actionInput;", "modifier": "@Mock", "type": "IActionInput", "declarator": "actionInput", "var_name": "actionInput"}, {"original_string": "@Mock IPentahoConnection conn;", "modifier": "@Mock", "type": "IPentahoConnection", "declarator": "conn", "var_name": "conn"}, {"original_string": "@Mock IActionInput queryActionInput;", "modifier": "@Mock", "type": "IActionInput", "declarator": "queryActionInput", "var_name": "queryActionInput"}, {"original_string": "@Mock IPentahoResultSet resultSet;", "modifier": "@Mock", "type": "IPentahoResultSet", "declarator": "resultSet", "var_name": "resultSet"}, {"original_string": "@Mock IRuntimeContext runtimeContext;", "modifier": "@Mock", "type": "IRuntimeContext", "declarator": "runtimeContext", "var_name": "runtimeContext"}, {"original_string": "@Mock IParameterManager paramManager;", "modifier": "@Mock", "type": "IParameterManager", "declarator": "paramManager", "var_name": "paramManager"}, {"original_string": "@Mock MDXResultSet mdxResultSet;", "modifier": "@Mock", "type": "MDXResultSet", "declarator": "mdxResultSet", "var_name": "mdxResultSet"}, {"original_string": "@Mock IActionInput catalog;", "modifier": "@Mock", "type": "IActionInput", "declarator": "catalog", "var_name": "catalog"}, {"original_string": "@Mock IMondrianCatalogService mondrianCatalogService;", "modifier": "@Mock", "type": "IMondrianCatalogService", "declarator": "mondrianCatalogService", "var_name": "mondrianCatalogService"}, {"original_string": "@Mock MondrianCatalog mondrianCatalog;", "modifier": "@Mock", "type": "MondrianCatalog", "declarator": "mondrianCatalog", "var_name": "mondrianCatalog"}, {"original_string": "@Mock IPentahoObjectFactory objFactory;", "modifier": "@Mock", "type": "IPentahoObjectFactory", "declarator": "objFactory", "var_name": "objFactory"}, {"original_string": "@Mock IPentahoSession session;", "modifier": "@Mock", "type": "IPentahoSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock MDXConnection mdxConnection;", "modifier": "@Mock", "type": "MDXConnection", "declarator": "mdxConnection", "var_name": "mdxConnection"}, {"original_string": "@Mock IActionInput connectionStringAction;", "modifier": "@Mock", "type": "IActionInput", "declarator": "connectionStringAction", "var_name": "connectionStringAction"}, {"original_string": "@Mock IActionInput jdbcAction;", "modifier": "@Mock", "type": "IActionInput", "declarator": "jdbcAction", "var_name": "jdbcAction"}, {"original_string": "@Mock IActionInput jndiAction;", "modifier": "@Mock", "type": "IActionInput", "declarator": "jndiAction", "var_name": "jndiAction"}, {"original_string": "@Mock IActionInput locationAction;", "modifier": "@Mock", "type": "IActionInput", "declarator": "locationAction", "var_name": "locationAction"}, {"original_string": "@Mock IActionInput roleAction;", "modifier": "@Mock", "type": "IActionInput", "declarator": "roleAction", "var_name": "roleAction"}, {"original_string": "@Mock IActionResource catalogResource;", "modifier": "@Mock", "type": "IActionResource", "declarator": "catalogResource", "var_name": "catalogResource"}, {"original_string": "@Mock IActionSequenceResource catalogActionSeqRes;", "modifier": "@Mock", "type": "IActionSequenceResource", "declarator": "catalogActionSeqRes", "var_name": "catalogActionSeqRes"}, {"original_string": "@Mock IActionInput userAction;", "modifier": "@Mock", "type": "IActionInput", "declarator": "userAction", "var_name": "userAction"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/action/mdx/MDXBaseComponentTest.java"}, "test_case": {"identifier": "testGetConnection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetConnection() throws Exception {\n    doReturn( connAction ).when( mdxBaseComponent ).getActionDefinition();\n    when( connAction.getCatalog() ).thenReturn( catalog );\n    when( catalog.getStringValue() ).thenReturn( \"my catalog\" );\n\n    PentahoSystem.registerObject( mondrianCatalogService );\n    PentahoSystem.registerObject( mdxConnection );\n    PentahoSystem.registerPrimaryObjectFactory( objFactory );\n    PentahoSessionHolder.setSession( session );\n\n    when( objFactory.get( any( Class.class ), eq( \"connection-MDX\" ), any( IPentahoSession.class ) ) ).thenReturn( mdxConnection );\n\n    when( mondrianCatalogService.getCatalog( anyString(), any( IPentahoSession.class ) ) ).thenReturn( mondrianCatalog );\n\n    when( mondrianCatalog.getDataSourceInfo() ).thenReturn( \"connection info\" );\n    when( mondrianCatalog.getDefinition() ).thenReturn( \"<catalog></catalog>\" );\n    when( connAction.getExtendedColumnNames() ).thenReturn( ActionInputConstant.NULL_INPUT );\n\n    IPentahoConnection connection = mdxBaseComponent.getConnection();\n    assertNotNull( connection );\n    assertEquals( mdxConnection, connection );\n  }", "signature": "void testGetConnection()", "full_signature": "@Test public void testGetConnection()", "class_method_signature": "MDXBaseComponentTest.testGetConnection()", "testcase": true, "constructor": false, "invocations": ["getActionDefinition", "when", "doReturn", "thenReturn", "when", "getCatalog", "thenReturn", "when", "getStringValue", "registerObject", "registerObject", "registerPrimaryObjectFactory", "setSession", "thenReturn", "when", "get", "any", "eq", "any", "thenReturn", "when", "getCatalog", "anyString", "any", "thenReturn", "when", "getDataSourceInfo", "thenReturn", "when", "getDefinition", "thenReturn", "when", "getExtendedColumnNames", "getConnection", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "MDXBaseComponent", "superclass": "extends ComponentBase", "interfaces": "implements IDataComponent, IPreparedComponent", "fields": [{"original_string": "private static final long serialVersionUID = 495868243986115468L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 495868243986115468L", "var_name": "serialVersionUID"}, {"original_string": "public static final String FORMATTED_CELL_VALUES = \"formattedCellValues\";", "modifier": "public static final", "type": "String", "declarator": "FORMATTED_CELL_VALUES = \"formattedCellValues\"", "var_name": "FORMATTED_CELL_VALUES"}, {"original_string": "private IPentahoResultSet rSet;", "modifier": "private", "type": "IPentahoResultSet", "declarator": "rSet", "var_name": "rSet"}, {"original_string": "private boolean connectionOwner = true;", "modifier": "private", "type": "boolean", "declarator": "connectionOwner = true", "var_name": "connectionOwner"}, {"original_string": "private IPentahoConnection connection;", "modifier": "private", "type": "IPentahoConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "String preparedQuery = null;", "modifier": "", "type": "String", "declarator": "preparedQuery = null", "var_name": "preparedQuery"}], "methods": [{"identifier": "validateSystemSettings", "parameters": "()", "modifiers": "@Override public abstract", "return": "boolean", "signature": "boolean validateSystemSettings()", "full_signature": "@Override public abstract boolean validateSystemSettings()", "class_method_signature": "MDXBaseComponent.validateSystemSettings()", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override public abstract", "return": "Log", "signature": "Log getLogger()", "full_signature": "@Override public abstract Log getLogger()", "class_method_signature": "MDXBaseComponent.getLogger()", "testcase": false, "constructor": false}, {"identifier": "getResultSet", "parameters": "()", "modifiers": "public", "return": "IPentahoResultSet", "signature": "IPentahoResultSet getResultSet()", "full_signature": "public IPentahoResultSet getResultSet()", "class_method_signature": "MDXBaseComponent.getResultSet()", "testcase": false, "constructor": false}, {"identifier": "validateAction", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean validateAction()", "full_signature": "@Override protected boolean validateAction()", "class_method_signature": "MDXBaseComponent.validateAction()", "testcase": false, "constructor": false}, {"identifier": "isConnectionInfoSpecified", "parameters": "( final MdxConnectionAction connAction )", "modifiers": "private", "return": "boolean", "signature": "boolean isConnectionInfoSpecified( final MdxConnectionAction connAction )", "full_signature": "private boolean isConnectionInfoSpecified( final MdxConnectionAction connAction )", "class_method_signature": "MDXBaseComponent.isConnectionInfoSpecified( final MdxConnectionAction connAction )", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void done()", "full_signature": "@Override public void done()", "class_method_signature": "MDXBaseComponent.done()", "testcase": false, "constructor": false}, {"identifier": "executeAction", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean executeAction()", "full_signature": "@Override protected boolean executeAction()", "class_method_signature": "MDXBaseComponent.executeAction()", "testcase": false, "constructor": false}, {"identifier": "prepareQuery", "parameters": "( final String rawQuery )", "modifiers": "protected", "return": "boolean", "signature": "boolean prepareQuery( final String rawQuery )", "full_signature": "protected boolean prepareQuery( final String rawQuery )", "class_method_signature": "MDXBaseComponent.prepareQuery( final String rawQuery )", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "MDXBaseComponent.dispose()", "testcase": false, "constructor": false}, {"identifier": "shareConnection", "parameters": "()", "modifiers": "public", "return": "IPentahoConnection", "signature": "IPentahoConnection shareConnection()", "full_signature": "public IPentahoConnection shareConnection()", "class_method_signature": "MDXBaseComponent.shareConnection()", "testcase": false, "constructor": false}, {"identifier": "executePrepared", "parameters": "( final Map preparedParams )", "modifiers": "public", "return": "IPentahoResultSet", "signature": "IPentahoResultSet executePrepared( final Map preparedParams )", "full_signature": "public IPentahoResultSet executePrepared( final Map preparedParams )", "class_method_signature": "MDXBaseComponent.executePrepared( final Map preparedParams )", "testcase": false, "constructor": false}, {"identifier": "runQuery", "parameters": "( final IPentahoConnection localConnection, final String rawQuery )", "modifiers": "protected", "return": "boolean", "signature": "boolean runQuery( final IPentahoConnection localConnection, final String rawQuery )", "full_signature": "protected boolean runQuery( final IPentahoConnection localConnection, final String rawQuery )", "class_method_signature": "MDXBaseComponent.runQuery( final IPentahoConnection localConnection, final String rawQuery )", "testcase": false, "constructor": false}, {"identifier": "getDatasourceConnection", "parameters": "()", "modifiers": "public", "return": "IPentahoConnection", "signature": "IPentahoConnection getDatasourceConnection()", "full_signature": "public IPentahoConnection getDatasourceConnection()", "class_method_signature": "MDXBaseComponent.getDatasourceConnection()", "testcase": false, "constructor": false}, {"identifier": "waitFor", "parameters": "( final int millis )", "modifiers": "protected", "return": "void", "signature": "void waitFor( final int millis )", "full_signature": "protected void waitFor( final int millis )", "class_method_signature": "MDXBaseComponent.waitFor( final int millis )", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "protected", "return": "IPentahoConnection", "signature": "IPentahoConnection getConnection()", "full_signature": "protected IPentahoConnection getConnection()", "class_method_signature": "MDXBaseComponent.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getConnectionOrig", "parameters": "()", "modifiers": "protected", "return": "IPentahoConnection", "signature": "IPentahoConnection getConnectionOrig()", "full_signature": "protected IPentahoConnection getConnectionOrig()", "class_method_signature": "MDXBaseComponent.getConnectionOrig()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean init()", "full_signature": "@Override public boolean init()", "class_method_signature": "MDXBaseComponent.init()", "testcase": false, "constructor": false}, {"identifier": "setOutputValue", "parameters": "( String outputName, Object value )", "modifiers": "@Override protected", "return": "void", "signature": "void setOutputValue( String outputName, Object value )", "full_signature": "@Override protected void setOutputValue( String outputName, Object value )", "class_method_signature": "MDXBaseComponent.setOutputValue( String outputName, Object value )", "testcase": false, "constructor": false}, {"identifier": "setConnection", "parameters": "( IPentahoConnection connection )", "modifiers": "protected", "return": "void", "signature": "void setConnection( IPentahoConnection connection )", "full_signature": "protected void setConnection( IPentahoConnection connection )", "class_method_signature": "MDXBaseComponent.setConnection( IPentahoConnection connection )", "testcase": false, "constructor": false}, {"identifier": "applyInputsToFormat", "parameters": "( String format )", "modifiers": "@Override protected", "return": "String", "signature": "String applyInputsToFormat( String format )", "full_signature": "@Override protected String applyInputsToFormat( String format )", "class_method_signature": "MDXBaseComponent.applyInputsToFormat( String format )", "testcase": false, "constructor": false}, {"identifier": "getMondrianCatalog", "parameters": "( String catalog )", "modifiers": "@VisibleForTesting", "return": "MondrianCatalog", "signature": "MondrianCatalog getMondrianCatalog( String catalog )", "full_signature": "@VisibleForTesting MondrianCatalog getMondrianCatalog( String catalog )", "class_method_signature": "MDXBaseComponent.getMondrianCatalog( String catalog )", "testcase": false, "constructor": false}, {"identifier": "fileExistsInRepository", "parameters": "( String catalog )", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean fileExistsInRepository( String catalog )", "full_signature": "@VisibleForTesting boolean fileExistsInRepository( String catalog )", "class_method_signature": "MDXBaseComponent.fileExistsInRepository( String catalog )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/action/mdx/MDXBaseComponent.java"}, "focal_method": {"identifier": "getConnection", "parameters": "()", "modifiers": "protected", "return": "IPentahoConnection", "body": "protected IPentahoConnection getConnection() {\n\n    // first attempt to get the connection metadata from the catalog service. if that is not successful,\n    // get the connection using the original approach.\n\n    MdxConnectionAction connAction = (MdxConnectionAction) getActionDefinition();\n    String catalogName = connAction.getCatalog().getStringValue();\n    IMondrianCatalogService mondrianCatalogService =\n        PentahoSystem.get( IMondrianCatalogService.class, \"IMondrianCatalogService\", PentahoSessionHolder.getSession() ); //$NON-NLS-1$\n    MondrianCatalog catalog = mondrianCatalogService.getCatalog( catalogName, PentahoSessionHolder.getSession() );\n\n    if ( catalog == null ) {\n      return getConnectionOrig();\n    }\n\n    Util.PropertyList connectProperties = Util.parseConnectString( catalog.getDataSourceInfo() );\n\n    Properties properties = new Properties();\n\n    Iterator<Pair<String, String>> iter = connectProperties.iterator();\n    while ( iter.hasNext() ) {\n      Pair<String, String> pair = iter.next();\n      properties.put( pair.getKey(), pair.getValue() );\n    }\n\n    properties.put( \"Catalog\", catalog.getDefinition() );\n    properties.put( \"Provider\", \"mondrian\" );\n    properties.put( \"PoolNeeded\", \"false\" );\n    properties.put( RolapConnectionProperties.Locale.name(), LocaleHelper.getLocale().toString() );\n\n    debug( \"Mondrian Connection Properties: \" + properties.toString() );\n\n    MDXConnection mdxConnection =\n        (MDXConnection) PentahoConnectionFactory.getConnection( IPentahoConnection.MDX_DATASOURCE, properties,\n          PentahoSessionHolder.getSession(), this );\n\n    if ( connAction != null ) {\n      if ( ( connAction.getExtendedColumnNames() != ActionInputConstant.NULL_INPUT ) ) {\n        mdxConnection.setUseExtendedColumnNames( connAction.getExtendedColumnNames().getBooleanValue() );\n      }\n    }\n\n    return mdxConnection;\n  }", "signature": "IPentahoConnection getConnection()", "full_signature": "protected IPentahoConnection getConnection()", "class_method_signature": "MDXBaseComponent.getConnection()", "testcase": false, "constructor": false, "invocations": ["getActionDefinition", "getStringValue", "getCatalog", "get", "getSession", "getCatalog", "getSession", "getConnectionOrig", "parseConnectString", "getDataSourceInfo", "iterator", "hasNext", "next", "put", "getKey", "getValue", "put", "getDefinition", "put", "put", "put", "name", "toString", "getLocale", "debug", "toString", "getConnection", "getSession", "getExtendedColumnNames", "setUseExtendedColumnNames", "getBooleanValue", "getExtendedColumnNames"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}