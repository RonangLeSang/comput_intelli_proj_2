{"test_class": {"identifier": "RepositoryResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IUnifiedRepository repository = mock( IUnifiedRepository.class );", "modifier": "private", "type": "IUnifiedRepository", "declarator": "repository = mock( IUnifiedRepository.class )", "var_name": "repository"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/RepositoryResourceTest.java"}, "test_case": {"identifier": "doExecuteDefaultNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void doExecuteDefaultNotFound() throws Exception {\n    doReturn( null ).when( repository ).getFile( \"/home/admin/comments.wcdf\" );\n    Response response = new RepositoryResource().doExecuteDefault( \":home:admin:comments.wcdf\" );\n\n    assertEquals( Response.Status.NOT_FOUND.getStatusCode(), response.getStatus() );\n  }", "signature": "void doExecuteDefaultNotFound()", "full_signature": "@Test public void doExecuteDefaultNotFound()", "class_method_signature": "RepositoryResourceTest.doExecuteDefaultNotFound()", "testcase": true, "constructor": false, "invocations": ["getFile", "when", "doReturn", "doExecuteDefault", "assertEquals", "getStatusCode", "getStatus"]}, "focal_class": {"identifier": "RepositoryResource", "superclass": "extends AbstractJaxRSResource", "interfaces": "", "fields": [{"original_string": "protected IPluginManager pluginManager = PentahoSystem.get( IPluginManager.class );", "modifier": "protected", "type": "IPluginManager", "declarator": "pluginManager = PentahoSystem.get( IPluginManager.class )", "var_name": "pluginManager"}, {"original_string": "private static final Log logger = LogFactory.getLog( RepositoryResource.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( RepositoryResource.class )", "var_name": "logger"}, {"original_string": "public static final String GENERATED_CONTENT_PERSPECTIVE = \"generatedContent\";", "modifier": "public static final", "type": "String", "declarator": "GENERATED_CONTENT_PERSPECTIVE = \"generatedContent\"", "var_name": "GENERATED_CONTENT_PERSPECTIVE"}, {"original_string": "protected IUnifiedRepository repository = PentahoSystem.get( IUnifiedRepository.class );", "modifier": "protected", "type": "IUnifiedRepository", "declarator": "repository = PentahoSystem.get( IUnifiedRepository.class )", "var_name": "repository"}, {"original_string": "protected RepositoryDownloadWhitelist whitelist;", "modifier": "protected", "type": "RepositoryDownloadWhitelist", "declarator": "whitelist", "var_name": "whitelist"}], "methods": [{"identifier": "doGetFileOrDir", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/content\" ) @Produces ( { WILDCARD } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response doGetFileOrDir( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/content\" ) @Produces ( { WILDCARD } ) @Facet ( name = \"Unsupported\" ) public Response doGetFileOrDir( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "RepositoryResource.doGetFileOrDir( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doExecuteDefault", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/default\" ) @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 303, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public", "return": "Response", "signature": "Response doExecuteDefault( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/default\" ) @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 303, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public Response doExecuteDefault( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "RepositoryResource.doExecuteDefault( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doFormPost", "parameters": "( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId,\n                              final MultivaluedMap<String, String> formParams )", "modifiers": "@Path ( \"/{contextId}/{resourceId : .+}\" ) @POST @Consumes ( APPLICATION_FORM_URLENCODED ) @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public", "return": "Response", "signature": "Response doFormPost( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId,\n                              final MultivaluedMap<String, String> formParams )", "full_signature": "@Path ( \"/{contextId}/{resourceId : .+}\" ) @POST @Consumes ( APPLICATION_FORM_URLENCODED ) @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public Response doFormPost( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId,\n                              final MultivaluedMap<String, String> formParams )", "class_method_signature": "RepositoryResource.doFormPost( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId,\n                              final MultivaluedMap<String, String> formParams )", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId )", "modifiers": "@Path ( \"/{contextId}/{resourceId : .+}\" ) @GET @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public", "return": "Response", "signature": "Response doGet( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId )", "full_signature": "@Path ( \"/{contextId}/{resourceId : .+}\" ) @GET @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public Response doGet( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId )", "class_method_signature": "RepositoryResource.doGet( @PathParam ( \"contextId\" ) String contextId, @PathParam ( \"resourceId\" ) String resourceId )", "testcase": false, "constructor": false}, {"identifier": "getExecutableTypes", "parameters": "()", "modifiers": "@Path ( \"/executableTypes\" ) @GET @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response getExecutableTypes()", "full_signature": "@Path ( \"/executableTypes\" ) @GET @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @Facet ( name = \"Unsupported\" ) public Response getExecutableTypes()", "class_method_signature": "RepositoryResource.getExecutableTypes()", "testcase": false, "constructor": false}, {"identifier": "hasOperationId", "parameters": "( final List<IPluginOperation> operations, final String operationId )", "modifiers": "private", "return": "boolean", "signature": "boolean hasOperationId( final List<IPluginOperation> operations, final String operationId )", "full_signature": "private boolean hasOperationId( final List<IPluginOperation> operations, final String operationId )", "class_method_signature": "RepositoryResource.hasOperationId( final List<IPluginOperation> operations, final String operationId )", "testcase": false, "constructor": false}, {"identifier": "doService", "parameters": "( String contextId, String resourceId )", "modifiers": "protected", "return": "Response", "signature": "Response doService( String contextId, String resourceId )", "full_signature": "protected Response doService( String contextId, String resourceId )", "class_method_signature": "RepositoryResource.doService( String contextId, String resourceId )", "testcase": false, "constructor": false}, {"identifier": "getUrlResponse", "parameters": "( RepositoryFile file, String resourceId )", "modifiers": "protected", "return": "Response", "signature": "Response getUrlResponse( RepositoryFile file, String resourceId )", "full_signature": "protected Response getUrlResponse( RepositoryFile file, String resourceId )", "class_method_signature": "RepositoryResource.getUrlResponse( RepositoryFile file, String resourceId )", "testcase": false, "constructor": false}, {"identifier": "getContentGeneratorResponse", "parameters": "( CGFactory fac )", "modifiers": "protected", "return": "Response", "signature": "Response getContentGeneratorResponse( CGFactory fac )", "full_signature": "protected Response getContentGeneratorResponse( CGFactory fac )", "class_method_signature": "RepositoryResource.getContentGeneratorResponse( CGFactory fac )", "testcase": false, "constructor": false}, {"identifier": "getPluginFileResponse", "parameters": "( String pluginId, String filePath )", "modifiers": "protected", "return": "Response", "signature": "Response getPluginFileResponse( String pluginId, String filePath )", "full_signature": "protected Response getPluginFileResponse( String pluginId, String filePath )", "class_method_signature": "RepositoryResource.getPluginFileResponse( String pluginId, String filePath )", "testcase": false, "constructor": false}, {"identifier": "getRepositoryFileResponse", "parameters": "( String filePath, String relPath )", "modifiers": "protected", "return": "Response", "signature": "Response getRepositoryFileResponse( String filePath, String relPath )", "full_signature": "protected Response getRepositoryFileResponse( String filePath, String relPath )", "class_method_signature": "RepositoryResource.getRepositoryFileResponse( String filePath, String relPath )", "testcase": false, "constructor": false}, {"identifier": "ctxt", "parameters": "( String msg, Object... args )", "modifiers": "private", "return": "void", "signature": "void ctxt( String msg, Object... args )", "full_signature": "private void ctxt( String msg, Object... args )", "class_method_signature": "RepositoryResource.ctxt( String msg, Object... args )", "testcase": false, "constructor": false}, {"identifier": "rsc", "parameters": "( String msg, Object... args )", "modifiers": "private", "return": "void", "signature": "void rsc( String msg, Object... args )", "full_signature": "private void rsc( String msg, Object... args )", "class_method_signature": "RepositoryResource.rsc( String msg, Object... args )", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "( String msg, Object... args )", "modifiers": "private", "return": "void", "signature": "void debug( String msg, Object... args )", "full_signature": "private void debug( String msg, Object... args )", "class_method_signature": "RepositoryResource.debug( String msg, Object... args )", "testcase": false, "constructor": false}, {"identifier": "extractUrl", "parameters": "( RepositoryFile file )", "modifiers": "protected", "return": "String", "signature": "String extractUrl( RepositoryFile file )", "full_signature": "protected String extractUrl( RepositoryFile file )", "class_method_signature": "RepositoryResource.extractUrl( RepositoryFile file )", "testcase": false, "constructor": false}, {"identifier": "getWhitelist", "parameters": "()", "modifiers": "public", "return": "RepositoryDownloadWhitelist", "signature": "RepositoryDownloadWhitelist getWhitelist()", "full_signature": "public RepositoryDownloadWhitelist getWhitelist()", "class_method_signature": "RepositoryResource.getWhitelist()", "testcase": false, "constructor": false}, {"identifier": "setWhitelist", "parameters": "( RepositoryDownloadWhitelist whitelist )", "modifiers": "public", "return": "void", "signature": "void setWhitelist( RepositoryDownloadWhitelist whitelist )", "full_signature": "public void setWhitelist( RepositoryDownloadWhitelist whitelist )", "class_method_signature": "RepositoryResource.setWhitelist( RepositoryDownloadWhitelist whitelist )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/RepositoryResource.java"}, "focal_method": {"identifier": "doExecuteDefault", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/default\" ) @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 303, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public", "return": "Response", "body": "@GET\n  @Path ( \"{pathId : .+}/default\" )\n  @Produces ( { WILDCARD } )\n  @StatusCodes ( {\n    @ResponseCode ( code = 303, condition = \"Successfully get the resource.\" ),\n    @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" )\n  } )\n  public Response doExecuteDefault( @PathParam ( \"pathId\" ) String pathId ) throws FileNotFoundException,\n      MalformedURLException, URISyntaxException {\n    String perspective = null;\n    StringBuffer buffer = null;\n    String url = null;\n    String path = FileResource.idToPath( pathId );\n\n    if ( FileResource.getRepository().getFile( path ) == null ) {\n      return Response.status( Status.NOT_FOUND ).build();\n    }\n\n    String extension = path.substring( path.lastIndexOf( '.' ) + 1 );\n    IPluginManager pluginManager = PentahoSystem.get( IPluginManager.class, PentahoSessionHolder.getSession() );\n    IContentInfo info = pluginManager.getContentTypeInfo( extension );\n    for ( IPluginOperation operation : info.getOperations() ) {\n      if ( operation.getId().equalsIgnoreCase( \"RUN\" ) ) { //$NON-NLS-1$\n        perspective = operation.getPerspective();\n        break;\n      }\n    }\n    if ( perspective == null ) {\n      perspective = GENERATED_CONTENT_PERSPECTIVE;\n    }\n\n    buffer = httpServletRequest.getRequestURL();\n    String queryString = httpServletRequest.getQueryString();\n    url = buffer.substring( 0, buffer.lastIndexOf( \"/\" ) + 1 ) + perspective + //$NON-NLS-1$\n        ( ( queryString != null && queryString.length() > 0 ) ? \"?\" + httpServletRequest.getQueryString() : \"\" );\n    return Response.seeOther( ( new URL( url ) ).toURI() ).build();\n  }", "signature": "Response doExecuteDefault( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/default\" ) @Produces ( { WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 303, condition = \"Successfully get the resource.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the resource.\" ) } ) public Response doExecuteDefault( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "RepositoryResource.doExecuteDefault( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false, "invocations": ["idToPath", "getFile", "getRepository", "build", "status", "substring", "lastIndexOf", "get", "getSession", "getContentTypeInfo", "getOperations", "equalsIgnoreCase", "getId", "getPerspective", "getRequestURL", "getQueryString", "substring", "lastIndexOf", "length", "getQueryString", "build", "seeOther", "toURI"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}