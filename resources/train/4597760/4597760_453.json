{"test_class": {"identifier": "SolutionImportHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SolutionImportHandler importHandler;", "modifier": "private", "type": "SolutionImportHandler", "declarator": "importHandler", "var_name": "importHandler"}, {"original_string": "private IUserRoleDao userRoleDao;", "modifier": "private", "type": "IUserRoleDao", "declarator": "userRoleDao", "var_name": "userRoleDao"}, {"original_string": "private IUnifiedRepository repository;", "modifier": "private", "type": "IUnifiedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private IRoleAuthorizationPolicyRoleBindingDao roleAuthorizationPolicyRoleBindingDao;", "modifier": "private", "type": "IRoleAuthorizationPolicyRoleBindingDao", "declarator": "roleAuthorizationPolicyRoleBindingDao", "var_name": "roleAuthorizationPolicyRoleBindingDao"}, {"original_string": "private SolutionFileImportHelper solutionHelper;", "modifier": "private", "type": "SolutionFileImportHelper", "declarator": "solutionHelper", "var_name": "solutionHelper"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/services/importer/SolutionImportHandlerTest.java"}, "test_case": {"identifier": "testImportRoles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testImportRoles() throws Exception {\n    String roleName = \"ADMIN\";\n    List<String> permissions = new ArrayList<String>();\n\n    RoleExport role = new RoleExport();\n    role.setRolename( roleName );\n    role.setPermission( permissions );\n\n    List<RoleExport> roles = new ArrayList<>();\n    roles.add( role );\n\n    Map<String, List<String>> roleToUserMap = new HashMap<>();\n    final List<String> adminUsers = new ArrayList<>();\n    adminUsers.add( \"admin\" );\n    adminUsers.add( \"root\" );\n    roleToUserMap.put( roleName, adminUsers );\n\n    String[] userStrings = adminUsers.toArray( new String[] {} );\n\n    importHandler.importRoles( roles, roleToUserMap );\n\n    Mockito.verify( userRoleDao ).createRole( Mockito.any( ITenant.class ), Mockito.eq( roleName ), Mockito.anyString(),\n      Mockito.any( userStrings.getClass() ) );\n    Mockito.verify( roleAuthorizationPolicyRoleBindingDao )\n      .setRoleBindings( Mockito.any( ITenant.class ), Mockito.eq( roleName ),\n        Mockito.eq( permissions ) );\n  }", "signature": "void testImportRoles()", "full_signature": "@Test public void testImportRoles()", "class_method_signature": "SolutionImportHandlerTest.testImportRoles()", "testcase": true, "constructor": false, "invocations": ["setRolename", "setPermission", "add", "add", "add", "put", "toArray", "importRoles", "createRole", "verify", "any", "eq", "anyString", "any", "getClass", "setRoleBindings", "verify", "any", "eq", "eq"]}, "focal_class": {"identifier": "SolutionImportHandler", "superclass": "", "interfaces": "implements IPlatformImportHandler", "fields": [{"original_string": "private static final String RESERVEDMAPKEY_LINEAGE_ID = \"lineage-id\";", "modifier": "private static final", "type": "String", "declarator": "RESERVEDMAPKEY_LINEAGE_ID = \"lineage-id\"", "var_name": "RESERVEDMAPKEY_LINEAGE_ID"}, {"original_string": "private static final String XMI_EXTENSION = \".xmi\";", "modifier": "private static final", "type": "String", "declarator": "XMI_EXTENSION = \".xmi\"", "var_name": "XMI_EXTENSION"}, {"original_string": "private static final String EXPORT_MANIFEST_XML_FILE = \"exportManifest.xml\";", "modifier": "private static final", "type": "String", "declarator": "EXPORT_MANIFEST_XML_FILE = \"exportManifest.xml\"", "var_name": "EXPORT_MANIFEST_XML_FILE"}, {"original_string": "private static final String DOMAIN_ID = \"domain-id\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN_ID = \"domain-id\"", "var_name": "DOMAIN_ID"}, {"original_string": "private static final String UTF_8 = StandardCharsets.UTF_8.name();", "modifier": "private static final", "type": "String", "declarator": "UTF_8 = StandardCharsets.UTF_8.name()", "var_name": "UTF_8"}, {"original_string": "private IUnifiedRepository repository;", "modifier": "private", "type": "IUnifiedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "protected Map<String, RepositoryFileImportBundle.Builder> cachedImports;", "modifier": "protected", "type": "Map<String, RepositoryFileImportBundle.Builder>", "declarator": "cachedImports", "var_name": "cachedImports"}, {"original_string": "private SolutionFileImportHelper solutionHelper;", "modifier": "private", "type": "SolutionFileImportHelper", "declarator": "solutionHelper", "var_name": "solutionHelper"}, {"original_string": "private List<IMimeType> mimeTypes;", "modifier": "private", "type": "List<IMimeType>", "declarator": "mimeTypes", "var_name": "mimeTypes"}, {"original_string": "private boolean overwriteFile;", "modifier": "private", "type": "boolean", "declarator": "overwriteFile", "var_name": "overwriteFile"}, {"original_string": "private List<IRepositoryFileBundle> files;", "modifier": "private", "type": "List<IRepositoryFileBundle>", "declarator": "files", "var_name": "files"}], "methods": [{"identifier": "SolutionImportHandler", "parameters": "( List<IMimeType> mimeTypes )", "modifiers": "public", "return": "", "signature": " SolutionImportHandler( List<IMimeType> mimeTypes )", "full_signature": "public  SolutionImportHandler( List<IMimeType> mimeTypes )", "class_method_signature": "SolutionImportHandler.SolutionImportHandler( List<IMimeType> mimeTypes )", "testcase": false, "constructor": true}, {"identifier": "getImportSession", "parameters": "()", "modifiers": "public", "return": "ImportSession", "signature": "ImportSession getImportSession()", "full_signature": "public ImportSession getImportSession()", "class_method_signature": "SolutionImportHandler.getImportSession()", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "public", "return": "Log", "signature": "Log getLogger()", "full_signature": "public Log getLogger()", "class_method_signature": "SolutionImportHandler.getLogger()", "testcase": false, "constructor": false}, {"identifier": "importFile", "parameters": "( IPlatformImportBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void importFile( IPlatformImportBundle bundle )", "full_signature": "@Override public void importFile( IPlatformImportBundle bundle )", "class_method_signature": "SolutionImportHandler.importFile( IPlatformImportBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "getAllJobs", "parameters": "( SchedulerResource schedulerResource )", "modifiers": "", "return": "List<Job>", "signature": "List<Job> getAllJobs( SchedulerResource schedulerResource )", "full_signature": " List<Job> getAllJobs( SchedulerResource schedulerResource )", "class_method_signature": "SolutionImportHandler.getAllJobs( SchedulerResource schedulerResource )", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "( IPlatformImportBundle importBundle, IRepositoryFileBundle fileBundle )", "modifiers": "private", "return": "RepositoryFile", "signature": "RepositoryFile getFile( IPlatformImportBundle importBundle, IRepositoryFileBundle fileBundle )", "full_signature": "private RepositoryFile getFile( IPlatformImportBundle importBundle, IRepositoryFileBundle fileBundle )", "class_method_signature": "SolutionImportHandler.getFile( IPlatformImportBundle importBundle, IRepositoryFileBundle fileBundle )", "testcase": false, "constructor": false}, {"identifier": "importSchedules", "parameters": "( List<JobScheduleRequest> scheduleList )", "modifiers": "protected", "return": "void", "signature": "void importSchedules( List<JobScheduleRequest> scheduleList )", "full_signature": "protected void importSchedules( List<JobScheduleRequest> scheduleList )", "class_method_signature": "SolutionImportHandler.importSchedules( List<JobScheduleRequest> scheduleList )", "testcase": false, "constructor": false}, {"identifier": "importMetaStore", "parameters": "( ExportManifestMetaStore manifestMetaStore, boolean overwrite )", "modifiers": "protected", "return": "void", "signature": "void importMetaStore( ExportManifestMetaStore manifestMetaStore, boolean overwrite )", "full_signature": "protected void importMetaStore( ExportManifestMetaStore manifestMetaStore, boolean overwrite )", "class_method_signature": "SolutionImportHandler.importMetaStore( ExportManifestMetaStore manifestMetaStore, boolean overwrite )", "testcase": false, "constructor": false}, {"identifier": "importUsers", "parameters": "( List<UserExport> users )", "modifiers": "protected", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> importUsers( List<UserExport> users )", "full_signature": "protected Map<String, List<String>> importUsers( List<UserExport> users )", "class_method_signature": "SolutionImportHandler.importUsers( List<UserExport> users )", "testcase": false, "constructor": false}, {"identifier": "importGlobalUserSettings", "parameters": "( List<ExportManifestUserSetting> globalSettings )", "modifiers": "protected", "return": "void", "signature": "void importGlobalUserSettings( List<ExportManifestUserSetting> globalSettings )", "full_signature": "protected void importGlobalUserSettings( List<ExportManifestUserSetting> globalSettings )", "class_method_signature": "SolutionImportHandler.importGlobalUserSettings( List<ExportManifestUserSetting> globalSettings )", "testcase": false, "constructor": false}, {"identifier": "importUserSettings", "parameters": "( UserExport user )", "modifiers": "protected", "return": "void", "signature": "void importUserSettings( UserExport user )", "full_signature": "protected void importUserSettings( UserExport user )", "class_method_signature": "SolutionImportHandler.importUserSettings( UserExport user )", "testcase": false, "constructor": false}, {"identifier": "importRoles", "parameters": "( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "modifiers": "protected", "return": "void", "signature": "void importRoles( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "full_signature": "protected void importRoles( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "class_method_signature": "SolutionImportHandler.importRoles( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "testcase": false, "constructor": false}, {"identifier": "importMetadata", "parameters": "( List<ExportManifestMetadata> metadataList, boolean preserveDsw )", "modifiers": "protected", "return": "void", "signature": "void importMetadata( List<ExportManifestMetadata> metadataList, boolean preserveDsw )", "full_signature": "protected void importMetadata( List<ExportManifestMetadata> metadataList, boolean preserveDsw )", "class_method_signature": "SolutionImportHandler.importMetadata( List<ExportManifestMetadata> metadataList, boolean preserveDsw )", "testcase": false, "constructor": false}, {"identifier": "importMondrian", "parameters": "( List<ExportManifestMondrian> mondrianList )", "modifiers": "protected", "return": "void", "signature": "void importMondrian( List<ExportManifestMondrian> mondrianList )", "full_signature": "protected void importMondrian( List<ExportManifestMondrian> mondrianList )", "class_method_signature": "SolutionImportHandler.importMondrian( List<ExportManifestMondrian> mondrianList )", "testcase": false, "constructor": false}, {"identifier": "fileIsScheduleInputSource", "parameters": "( ExportManifest manifest, String sourcePath )", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean fileIsScheduleInputSource( ExportManifest manifest, String sourcePath )", "full_signature": "@VisibleForTesting boolean fileIsScheduleInputSource( ExportManifest manifest, String sourcePath )", "class_method_signature": "SolutionImportHandler.fileIsScheduleInputSource( ExportManifest manifest, String sourcePath )", "testcase": false, "constructor": false}, {"identifier": "isFileHidden", "parameters": "( RepositoryFile file, ManifestFile manifestFile, String sourcePath )", "modifiers": "private", "return": "boolean", "signature": "boolean isFileHidden( RepositoryFile file, ManifestFile manifestFile, String sourcePath )", "full_signature": "private boolean isFileHidden( RepositoryFile file, ManifestFile manifestFile, String sourcePath )", "class_method_signature": "SolutionImportHandler.isFileHidden( RepositoryFile file, ManifestFile manifestFile, String sourcePath )", "testcase": false, "constructor": false}, {"identifier": "isSchedulable", "parameters": "( RepositoryFile file, ManifestFile manifestFile )", "modifiers": "private", "return": "boolean", "signature": "boolean isSchedulable( RepositoryFile file, ManifestFile manifestFile )", "full_signature": "private boolean isSchedulable( RepositoryFile file, ManifestFile manifestFile )", "class_method_signature": "SolutionImportHandler.isSchedulable( RepositoryFile file, ManifestFile manifestFile )", "testcase": false, "constructor": false}, {"identifier": "repositoryPathConcat", "parameters": "( String path, String... subPaths )", "modifiers": "private", "return": "String", "signature": "String repositoryPathConcat( String path, String... subPaths )", "full_signature": "private String repositoryPathConcat( String path, String... subPaths )", "class_method_signature": "SolutionImportHandler.repositoryPathConcat( String path, String... subPaths )", "testcase": false, "constructor": false}, {"identifier": "processZip", "parameters": "( InputStream inputStream )", "modifiers": "private", "return": "boolean", "signature": "boolean processZip( InputStream inputStream )", "full_signature": "private boolean processZip( InputStream inputStream )", "class_method_signature": "SolutionImportHandler.processZip( InputStream inputStream )", "testcase": false, "constructor": false}, {"identifier": "initializeAclManifest", "parameters": "( IRepositoryFileBundle file )", "modifiers": "private", "return": "void", "signature": "void initializeAclManifest( IRepositoryFileBundle file )", "full_signature": "private void initializeAclManifest( IRepositoryFileBundle file )", "class_method_signature": "SolutionImportHandler.initializeAclManifest( IRepositoryFileBundle file )", "testcase": false, "constructor": false}, {"identifier": "getMimeTypes", "parameters": "()", "modifiers": "@Override public", "return": "List<IMimeType>", "signature": "List<IMimeType> getMimeTypes()", "full_signature": "@Override public List<IMimeType> getMimeTypes()", "class_method_signature": "SolutionImportHandler.getMimeTypes()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "( RepositoryFileImportBundle.Builder builder )", "modifiers": "public", "return": "IPlatformImportBundle", "signature": "IPlatformImportBundle build( RepositoryFileImportBundle.Builder builder )", "full_signature": "public IPlatformImportBundle build( RepositoryFileImportBundle.Builder builder )", "class_method_signature": "SolutionImportHandler.build( RepositoryFileImportBundle.Builder builder )", "testcase": false, "constructor": false}, {"identifier": "createSchedulerJob", "parameters": "( SchedulerResource scheduler, JobScheduleRequest jobScheduleRequest )", "modifiers": "public", "return": "Response", "signature": "Response createSchedulerJob( SchedulerResource scheduler, JobScheduleRequest jobScheduleRequest )", "full_signature": "public Response createSchedulerJob( SchedulerResource scheduler, JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SolutionImportHandler.createSchedulerJob( SchedulerResource scheduler, JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "isOverwriteFile", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOverwriteFile()", "full_signature": "public boolean isOverwriteFile()", "class_method_signature": "SolutionImportHandler.isOverwriteFile()", "testcase": false, "constructor": false}, {"identifier": "setOverwriteFile", "parameters": "( boolean overwriteFile )", "modifiers": "public", "return": "void", "signature": "void setOverwriteFile( boolean overwriteFile )", "full_signature": "public void setOverwriteFile( boolean overwriteFile )", "class_method_signature": "SolutionImportHandler.setOverwriteFile( boolean overwriteFile )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/services/importer/SolutionImportHandler.java"}, "focal_method": {"identifier": "importRoles", "parameters": "( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "modifiers": "protected", "return": "void", "body": "protected void importRoles( List<RoleExport> roles, Map<String, List<String>> roleToUserMap ) {\n    if ( roles != null ) {\n      IUserRoleDao roleDao = PentahoSystem.get( IUserRoleDao.class );\n      ITenant tenant = new Tenant( \"/pentaho/\" + TenantUtils.getDefaultTenant(), true );\n      IRoleAuthorizationPolicyRoleBindingDao roleBindingDao = PentahoSystem.get(\n        IRoleAuthorizationPolicyRoleBindingDao.class );\n\n      Set<String> existingRoles = new HashSet<>();\n\n      for ( RoleExport role : roles ) {\n        getLogger().debug( Messages.getInstance().getString( \"ROLE.importing\", role.getRolename() ) );\n        try {\n          List<String> users = roleToUserMap.get( role.getRolename() );\n          String[] userarray = users == null ? new String[] {} : users.toArray( new String[] {} );\n          IPentahoRole role1 = roleDao.createRole( tenant, role.getRolename(), null, userarray );\n        } catch ( AlreadyExistsException e ) {\n          existingRoles.add( role.getRolename() );\n          // it's ok if the role already exists, it is probably a default role\n          getLogger().info( Messages.getInstance().getString( \"ROLE.Already.Exists\", role.getRolename() ) );\n        }\n        try {\n          if ( existingRoles.contains( role.getRolename() ) ) {\n            //Only update an existing role if the overwrite flag is set\n            if ( isOverwriteFile() ) {\n              roleBindingDao.setRoleBindings( tenant, role.getRolename(), role.getPermissions() );\n            }\n          } else {\n            //Always write a roles permissions that were not previously existing\n            roleBindingDao.setRoleBindings( tenant, role.getRolename(), role.getPermissions() );\n          }\n        } catch ( Exception e ) {\n          getLogger().info( Messages.getInstance()\n            .getString( \"ERROR.SettingRolePermissions\", role.getRolename() ), e );\n        }\n      }\n    }\n  }", "signature": "void importRoles( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "full_signature": "protected void importRoles( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "class_method_signature": "SolutionImportHandler.importRoles( List<RoleExport> roles, Map<String, List<String>> roleToUserMap )", "testcase": false, "constructor": false, "invocations": ["get", "getDefaultTenant", "get", "debug", "getLogger", "getString", "getInstance", "getRolename", "get", "getRolename", "toArray", "createRole", "getRolename", "add", "getRolename", "info", "getLogger", "getString", "getInstance", "getRolename", "contains", "getRolename", "isOverwriteFile", "setRoleBindings", "getRolename", "getPermissions", "setRoleBindings", "getRolename", "getPermissions", "info", "getLogger", "getString", "getInstance", "getRolename"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}