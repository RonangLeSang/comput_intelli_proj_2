{"test_class": {"identifier": "LocaleImportHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ENCODING = \"UTF-8\"", "var_name": "DEFAULT_ENCODING"}, {"original_string": "private static final String FILE_BUNDLE_PATH = \"/pentaho-solutions/my-test/\";", "modifier": "private static final", "type": "String", "declarator": "FILE_BUNDLE_PATH = \"/pentaho-solutions/my-test/\"", "var_name": "FILE_BUNDLE_PATH"}, {"original_string": "PentahoPlatformImporter importer;", "modifier": "", "type": "PentahoPlatformImporter", "declarator": "importer", "var_name": "importer"}, {"original_string": "LocaleFilesProcessor localeFilesProcessor;", "modifier": "", "type": "LocaleFilesProcessor", "declarator": "localeFilesProcessor", "var_name": "localeFilesProcessor"}, {"original_string": "LocaleImportHandler localeImportHandler;", "modifier": "", "type": "LocaleImportHandler", "declarator": "localeImportHandler", "var_name": "localeImportHandler"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/services/importer/LocaleImportHandlerTest.java"}, "test_case": {"identifier": "loadPropertiesByXmlWrongTypeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void loadPropertiesByXmlWrongTypeTest() {\n    RepositoryFileImportBundle repFileBundleMock = mock( RepositoryFileImportBundle.class );\n    RepositoryFile repFileMock = mock( RepositoryFile.class );\n    when( repFileBundleMock.getFile() ).thenReturn( repFileMock );\n    when( repFileMock.getName() ).thenReturn( \"fileName\" );\n    assertEquals( localeImportHandler.loadPropertiesByXml( repFileBundleMock ).size(), 0 );\n  }", "signature": "void loadPropertiesByXmlWrongTypeTest()", "full_signature": "@Test public void loadPropertiesByXmlWrongTypeTest()", "class_method_signature": "LocaleImportHandlerTest.loadPropertiesByXmlWrongTypeTest()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getFile", "thenReturn", "when", "getName", "assertEquals", "size", "loadPropertiesByXml"]}, "focal_class": {"identifier": "LocaleImportHandler", "superclass": "extends RepositoryFileImportFileHandler", "interfaces": "implements IPlatformImportHandler", "fields": [{"original_string": "private static final String FILE_DESCRIPTION = \"file.description\";", "modifier": "private static final", "type": "String", "declarator": "FILE_DESCRIPTION = \"file.description\"", "var_name": "FILE_DESCRIPTION"}, {"original_string": "private static final String FILE_TITLE = \"file.title\";", "modifier": "private static final", "type": "String", "declarator": "FILE_TITLE = \"file.title\"", "var_name": "FILE_TITLE"}, {"original_string": "private static final String DIRECTORY_NAME = \"directory_name\";", "modifier": "private static final", "type": "String", "declarator": "DIRECTORY_NAME = \"directory_name\"", "var_name": "DIRECTORY_NAME"}, {"original_string": "private static final String DIRECTORY_DESCRIPTION = \"directory_description\";", "modifier": "private static final", "type": "String", "declarator": "DIRECTORY_DESCRIPTION = \"directory_description\"", "var_name": "DIRECTORY_DESCRIPTION"}, {"original_string": "private static final String LOCALE_FOLDER = \"index\";", "modifier": "private static final", "type": "String", "declarator": "LOCALE_FOLDER = \"index\"", "var_name": "LOCALE_FOLDER"}, {"original_string": "private static final String LOCALE_EXT = \".locale\";", "modifier": "private static final", "type": "String", "declarator": "LOCALE_EXT = \".locale\"", "var_name": "LOCALE_EXT"}, {"original_string": "private static final String OLD_LOCALE_EXT = \".properties\";", "modifier": "private static final", "type": "String", "declarator": "OLD_LOCALE_EXT = \".properties\"", "var_name": "OLD_LOCALE_EXT"}, {"original_string": "private static final String XML_LOCALE_EXT = \".xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_LOCALE_EXT = \".xml\"", "var_name": "XML_LOCALE_EXT"}, {"original_string": "private static final String VARIABLE_SYMBOL_FROM_INDEX = \"%\";", "modifier": "private static final", "type": "String", "declarator": "VARIABLE_SYMBOL_FROM_INDEX = \"%\"", "var_name": "VARIABLE_SYMBOL_FROM_INDEX"}, {"original_string": "private static final String TITLE_PROPERTY_NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "TITLE_PROPERTY_NAME = \"name\"", "var_name": "TITLE_PROPERTY_NAME"}, {"original_string": "private static final String DESC_PROPERTY_NAME = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESC_PROPERTY_NAME = \"description\"", "var_name": "DESC_PROPERTY_NAME"}, {"original_string": "private List<String> artifacts;", "modifier": "private", "type": "List<String>", "declarator": "artifacts", "var_name": "artifacts"}, {"original_string": "private IUnifiedRepository unifiedRepository;", "modifier": "private", "type": "IUnifiedRepository", "declarator": "unifiedRepository", "var_name": "unifiedRepository"}], "methods": [{"identifier": "LocaleImportHandler", "parameters": "( List<IMimeType> mimeTypes, List<String> artifacts )", "modifiers": "public", "return": "", "signature": " LocaleImportHandler( List<IMimeType> mimeTypes, List<String> artifacts )", "full_signature": "public  LocaleImportHandler( List<IMimeType> mimeTypes, List<String> artifacts )", "class_method_signature": "LocaleImportHandler.LocaleImportHandler( List<IMimeType> mimeTypes, List<String> artifacts )", "testcase": false, "constructor": true}, {"identifier": "importFile", "parameters": "( IPlatformImportBundle bundle )", "modifiers": "public", "return": "void", "signature": "void importFile( IPlatformImportBundle bundle )", "full_signature": "public void importFile( IPlatformImportBundle bundle )", "class_method_signature": "LocaleImportHandler.importFile( IPlatformImportBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "buildLocaleProperties", "parameters": "( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "modifiers": "private", "return": "Properties", "signature": "Properties buildLocaleProperties( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "full_signature": "private Properties buildLocaleProperties( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "class_method_signature": "LocaleImportHandler.buildLocaleProperties( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "testcase": false, "constructor": false}, {"identifier": "extractLocaleCode", "parameters": "( RepositoryFileImportBundle localeBundle )", "modifiers": "private", "return": "String", "signature": "String extractLocaleCode( RepositoryFileImportBundle localeBundle )", "full_signature": "private String extractLocaleCode( RepositoryFileImportBundle localeBundle )", "class_method_signature": "LocaleImportHandler.extractLocaleCode( RepositoryFileImportBundle localeBundle )", "testcase": false, "constructor": false}, {"identifier": "getLocaleParent", "parameters": "( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "modifiers": "@VisibleForTesting", "return": "RepositoryFile", "signature": "RepositoryFile getLocaleParent( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "full_signature": "@VisibleForTesting RepositoryFile getLocaleParent( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "class_method_signature": "LocaleImportHandler.getLocaleParent( RepositoryFileImportBundle locale, Properties localePropertiesFromIndex )", "testcase": false, "constructor": false}, {"identifier": "isLocaleFolder", "parameters": "( String localeFileName, Properties localePropertiesFromIndex )", "modifiers": "private", "return": "boolean", "signature": "boolean isLocaleFolder( String localeFileName, Properties localePropertiesFromIndex )", "full_signature": "private boolean isLocaleFolder( String localeFileName, Properties localePropertiesFromIndex )", "class_method_signature": "LocaleImportHandler.isLocaleFolder( String localeFileName, Properties localePropertiesFromIndex )", "testcase": false, "constructor": false}, {"identifier": "getLocaleFolderChild", "parameters": "( String localeFileName, List<RepositoryFile> localeFolderChildren )", "modifiers": "private", "return": "RepositoryFile", "signature": "RepositoryFile getLocaleFolderChild( String localeFileName, List<RepositoryFile> localeFolderChildren )", "full_signature": "private RepositoryFile getLocaleFolderChild( String localeFileName, List<RepositoryFile> localeFolderChildren )", "class_method_signature": "LocaleImportHandler.getLocaleFolderChild( String localeFileName, List<RepositoryFile> localeFolderChildren )", "testcase": false, "constructor": false}, {"identifier": "extractExtension", "parameters": "( String name )", "modifiers": "private", "return": "String", "signature": "String extractExtension( String name )", "full_signature": "private String extractExtension( String name )", "class_method_signature": "LocaleImportHandler.extractExtension( String name )", "testcase": false, "constructor": false}, {"identifier": "extractFileName", "parameters": "( String name, char separator )", "modifiers": "private", "return": "String", "signature": "String extractFileName( String name, char separator )", "full_signature": "private String extractFileName( String name, char separator )", "class_method_signature": "LocaleImportHandler.extractFileName( String name, char separator )", "testcase": false, "constructor": false}, {"identifier": "extractFileName", "parameters": "( String name )", "modifiers": "private", "return": "String", "signature": "String extractFileName( String name )", "full_signature": "private String extractFileName( String name )", "class_method_signature": "LocaleImportHandler.extractFileName( String name )", "testcase": false, "constructor": false}, {"identifier": "extractFileNameWithCountryLocalization", "parameters": "( String name )", "modifiers": "private", "return": "String", "signature": "String extractFileNameWithCountryLocalization( String name )", "full_signature": "private String extractFileNameWithCountryLocalization( String name )", "class_method_signature": "LocaleImportHandler.extractFileNameWithCountryLocalization( String name )", "testcase": false, "constructor": false}, {"identifier": "extractFileNameWithLanguageLocalization", "parameters": "( String name )", "modifiers": "private", "return": "String", "signature": "String extractFileNameWithLanguageLocalization( String name )", "full_signature": "private String extractFileNameWithLanguageLocalization( String name )", "class_method_signature": "LocaleImportHandler.extractFileNameWithLanguageLocalization( String name )", "testcase": false, "constructor": false}, {"identifier": "checkIfLocaleFileNameAlsoContainsAFileExtension", "parameters": "( String locale )", "modifiers": "private", "return": "boolean", "signature": "boolean checkIfLocaleFileNameAlsoContainsAFileExtension( String locale )", "full_signature": "private boolean checkIfLocaleFileNameAlsoContainsAFileExtension( String locale )", "class_method_signature": "LocaleImportHandler.checkIfLocaleFileNameAlsoContainsAFileExtension( String locale )", "testcase": false, "constructor": false}, {"identifier": "loadPropertiesByXml", "parameters": "( RepositoryFileImportBundle localeBundle )", "modifiers": "@VisibleForTesting", "return": "Properties", "signature": "Properties loadPropertiesByXml( RepositoryFileImportBundle localeBundle )", "full_signature": "@VisibleForTesting Properties loadPropertiesByXml( RepositoryFileImportBundle localeBundle )", "class_method_signature": "LocaleImportHandler.loadPropertiesByXml( RepositoryFileImportBundle localeBundle )", "testcase": false, "constructor": false}, {"identifier": "getLocalBundleDocument", "parameters": "( InputStream is )", "modifiers": "@VisibleForTesting", "return": "Document", "signature": "Document getLocalBundleDocument( InputStream is )", "full_signature": "@VisibleForTesting Document getLocalBundleDocument( InputStream is )", "class_method_signature": "LocaleImportHandler.getLocalBundleDocument( InputStream is )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/services/importer/LocaleImportHandler.java"}, "focal_method": {"identifier": "loadPropertiesByXml", "parameters": "( RepositoryFileImportBundle localeBundle )", "modifiers": "@VisibleForTesting", "return": "Properties", "body": "@VisibleForTesting\n  Properties loadPropertiesByXml( RepositoryFileImportBundle localeBundle ) {\n    final Properties properties = new Properties();\n    RepositoryFile file = localeBundle.getFile();\n    if ( file == null ) {\n      return properties;\n    }\n    String fileTitle = localeBundle.getFile().getName();\n\n    if ( ( LOCALE_FOLDER + XML_LOCALE_EXT ).equals( fileTitle ) ) {\n      try {\n        InputStream is = localeBundle.getInputStream();\n        is.reset();\n        Document document = getLocalBundleDocument( is );\n        XPath xPath = XPathFactory.newInstance().newXPath();\n\n        String name = xPath.compile( \"/index/name\" ).evaluate( document );\n        String desc = xPath.compile( \"/index/description\" ).evaluate( document );\n\n        if ( StringUtils.isNotBlank( name ) && !name.equals( VARIABLE_SYMBOL_FROM_INDEX + TITLE_PROPERTY_NAME ) ) {\n          properties.put( TITLE_PROPERTY_NAME, name );\n        }\n        if ( StringUtils.isNotBlank( desc ) && !desc.equals( VARIABLE_SYMBOL_FROM_INDEX + DESC_PROPERTY_NAME ) ) {\n          properties.put( DESC_PROPERTY_NAME, desc );\n        }\n      } catch ( Exception e ) {\n        getLogger().error( e.getMessage() );\n      }\n    }\n    return properties;\n  }", "signature": "Properties loadPropertiesByXml( RepositoryFileImportBundle localeBundle )", "full_signature": "@VisibleForTesting Properties loadPropertiesByXml( RepositoryFileImportBundle localeBundle )", "class_method_signature": "LocaleImportHandler.loadPropertiesByXml( RepositoryFileImportBundle localeBundle )", "testcase": false, "constructor": false, "invocations": ["getFile", "getName", "getFile", "equals", "getInputStream", "reset", "getLocalBundleDocument", "newXPath", "newInstance", "evaluate", "compile", "evaluate", "compile", "isNotBlank", "equals", "put", "isNotBlank", "equals", "put", "error", "getLogger", "getMessage"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}