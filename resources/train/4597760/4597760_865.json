{"test_class": {"identifier": "SchedulerServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SchedulerService schedulerService;", "modifier": "private static", "type": "SchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/services/SchedulerServiceTest.java"}, "test_case": {"identifier": "testGetJobs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetJobs() throws Exception {\n    IPentahoSession mockPentahoSession = mock( IPentahoSession.class );\n\n    doReturn( mockPentahoSession ).when( schedulerService ).getSession();\n    doReturn( \"admin\" ).when( mockPentahoSession ).getName();\n    doReturn( true ).when( schedulerService ).canAdminister( mockPentahoSession );\n    List<Job> mockJobs = new ArrayList<>();\n    mockJobs.add( mock( Job.class ) );\n    doReturn( mockJobs ).when( schedulerService.scheduler ).getJobs( any( IJobFilter.class ) );\n\n    List<Job> jobs = schedulerService.getJobs();\n\n    assertEquals( mockJobs, jobs );\n\n    verify( schedulerService, times( 1 ) ).getSession();\n    verify( mockPentahoSession, times( 1 ) ).getName();\n    verify( schedulerService, times( 1 ) ).canAdminister( mockPentahoSession );\n    verify( schedulerService.scheduler, times( 1 ) ).getJobs( any( IJobFilter.class ) );\n  }", "signature": "void testGetJobs()", "full_signature": "@Test public void testGetJobs()", "class_method_signature": "SchedulerServiceTest.testGetJobs()", "testcase": true, "constructor": false, "invocations": ["mock", "getSession", "when", "doReturn", "getName", "when", "doReturn", "canAdminister", "when", "doReturn", "add", "mock", "getJobs", "when", "doReturn", "any", "getJobs", "assertEquals", "getSession", "verify", "times", "getName", "verify", "times", "canAdminister", "verify", "times", "getJobs", "verify", "times", "any"]}, "focal_class": {"identifier": "SchedulerService", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected IScheduler scheduler = PentahoSystem.get( IScheduler.class, \"IScheduler2\", null );", "modifier": "protected", "type": "IScheduler", "declarator": "scheduler = PentahoSystem.get( IScheduler.class, \"IScheduler2\", null )", "var_name": "scheduler"}, {"original_string": "protected IAuthorizationPolicy policy;", "modifier": "protected", "type": "IAuthorizationPolicy", "declarator": "policy", "var_name": "policy"}, {"original_string": "protected IUnifiedRepository repository;", "modifier": "protected", "type": "IUnifiedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "protected SessionResource sessionResource;", "modifier": "protected", "type": "SessionResource", "declarator": "sessionResource", "var_name": "sessionResource"}, {"original_string": "protected FileService fileService;", "modifier": "protected", "type": "FileService", "declarator": "fileService", "var_name": "fileService"}, {"original_string": "protected IBlockoutManager blockoutManager;", "modifier": "protected", "type": "IBlockoutManager", "declarator": "blockoutManager", "var_name": "blockoutManager"}, {"original_string": "private static final Log logger = LogFactory.getLog( FileService.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( FileService.class )", "var_name": "logger"}], "methods": [{"identifier": "createJob", "parameters": "( JobScheduleRequest scheduleRequest )", "modifiers": "public", "return": "Job", "signature": "Job createJob( JobScheduleRequest scheduleRequest )", "full_signature": "public Job createJob( JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerService.createJob( JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "updateJob", "parameters": "( JobScheduleRequest scheduleRequest )", "modifiers": "public", "return": "Job", "signature": "Job updateJob( JobScheduleRequest scheduleRequest )", "full_signature": "public Job updateJob( JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerService.updateJob( JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "triggerNow", "parameters": "( String jobId )", "modifiers": "public", "return": "Job", "signature": "Job triggerNow( String jobId )", "full_signature": "public Job triggerNow( String jobId )", "class_method_signature": "SchedulerService.triggerNow( String jobId )", "testcase": false, "constructor": false}, {"identifier": "getContentCleanerJob", "parameters": "()", "modifiers": "public", "return": "Job", "signature": "Job getContentCleanerJob()", "full_signature": "public Job getContentCleanerJob()", "class_method_signature": "SchedulerService.getContentCleanerJob()", "testcase": false, "constructor": false}, {"identifier": "doGetGeneratedContentForSchedule", "parameters": "( String lineageId )", "modifiers": "public", "return": "List<RepositoryFileDto>", "signature": "List<RepositoryFileDto> doGetGeneratedContentForSchedule( String lineageId )", "full_signature": "public List<RepositoryFileDto> doGetGeneratedContentForSchedule( String lineageId )", "class_method_signature": "SchedulerService.doGetGeneratedContentForSchedule( String lineageId )", "testcase": false, "constructor": false}, {"identifier": "getJob", "parameters": "( String jobId )", "modifiers": "public", "return": "Job", "signature": "Job getJob( String jobId )", "full_signature": "public Job getJob( String jobId )", "class_method_signature": "SchedulerService.getJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "isScheduleAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isScheduleAllowed()", "full_signature": "public boolean isScheduleAllowed()", "class_method_signature": "SchedulerService.isScheduleAllowed()", "testcase": false, "constructor": false}, {"identifier": "isScheduleAllowed", "parameters": "( String id )", "modifiers": "public", "return": "boolean", "signature": "boolean isScheduleAllowed( String id )", "full_signature": "public boolean isScheduleAllowed( String id )", "class_method_signature": "SchedulerService.isScheduleAllowed( String id )", "testcase": false, "constructor": false}, {"identifier": "getJobFilter", "parameters": "( boolean canAdminister, String principalName )", "modifiers": "public", "return": "IJobFilter", "signature": "IJobFilter getJobFilter( boolean canAdminister, String principalName )", "full_signature": "public IJobFilter getJobFilter( boolean canAdminister, String principalName )", "class_method_signature": "SchedulerService.getJobFilter( boolean canAdminister, String principalName )", "testcase": false, "constructor": false}, {"identifier": "doGetCanSchedule", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String doGetCanSchedule()", "full_signature": "public String doGetCanSchedule()", "class_method_signature": "SchedulerService.doGetCanSchedule()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getState()", "full_signature": "public String getState()", "class_method_signature": "SchedulerService.getState()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String start()", "full_signature": "public String start()", "class_method_signature": "SchedulerService.start()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String pause()", "full_signature": "public String pause()", "class_method_signature": "SchedulerService.pause()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String shutdown()", "full_signature": "public String shutdown()", "class_method_signature": "SchedulerService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "pauseJob", "parameters": "( String jobId )", "modifiers": "public", "return": "JobState", "signature": "JobState pauseJob( String jobId )", "full_signature": "public JobState pauseJob( String jobId )", "class_method_signature": "SchedulerService.pauseJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "resumeJob", "parameters": "( String jobId )", "modifiers": "public", "return": "JobState", "signature": "JobState resumeJob( String jobId )", "full_signature": "public JobState resumeJob( String jobId )", "class_method_signature": "SchedulerService.resumeJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "removeJob", "parameters": "( String jobId )", "modifiers": "public", "return": "boolean", "signature": "boolean removeJob( String jobId )", "full_signature": "public boolean removeJob( String jobId )", "class_method_signature": "SchedulerService.removeJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "getJobInfo", "parameters": "( String jobId )", "modifiers": "public", "return": "Job", "signature": "Job getJobInfo( String jobId )", "full_signature": "public Job getJobInfo( String jobId )", "class_method_signature": "SchedulerService.getJobInfo( String jobId )", "testcase": false, "constructor": false}, {"identifier": "getBlockOutJobs", "parameters": "()", "modifiers": "public", "return": "List<Job>", "signature": "List<Job> getBlockOutJobs()", "full_signature": "public List<Job> getBlockOutJobs()", "class_method_signature": "SchedulerService.getBlockOutJobs()", "testcase": false, "constructor": false}, {"identifier": "hasBlockouts", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasBlockouts()", "full_signature": "public boolean hasBlockouts()", "class_method_signature": "SchedulerService.hasBlockouts()", "testcase": false, "constructor": false}, {"identifier": "willFire", "parameters": "( IJobTrigger trigger )", "modifiers": "public", "return": "boolean", "signature": "boolean willFire( IJobTrigger trigger )", "full_signature": "public boolean willFire( IJobTrigger trigger )", "class_method_signature": "SchedulerService.willFire( IJobTrigger trigger )", "testcase": false, "constructor": false}, {"identifier": "shouldFireNow", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean shouldFireNow()", "full_signature": "public boolean shouldFireNow()", "class_method_signature": "SchedulerService.shouldFireNow()", "testcase": false, "constructor": false}, {"identifier": "addBlockout", "parameters": "( JobScheduleRequest jobScheduleRequest )", "modifiers": "public", "return": "Job", "signature": "Job addBlockout( JobScheduleRequest jobScheduleRequest )", "full_signature": "public Job addBlockout( JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerService.addBlockout( JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "getJobScheduleParam", "parameters": "( String name, String value )", "modifiers": "protected", "return": "JobScheduleParam", "signature": "JobScheduleParam getJobScheduleParam( String name, String value )", "full_signature": "protected JobScheduleParam getJobScheduleParam( String name, String value )", "class_method_signature": "SchedulerService.getJobScheduleParam( String name, String value )", "testcase": false, "constructor": false}, {"identifier": "getJobScheduleParam", "parameters": "( String name, long value )", "modifiers": "protected", "return": "JobScheduleParam", "signature": "JobScheduleParam getJobScheduleParam( String name, long value )", "full_signature": "protected JobScheduleParam getJobScheduleParam( String name, long value )", "class_method_signature": "SchedulerService.getJobScheduleParam( String name, long value )", "testcase": false, "constructor": false}, {"identifier": "updateStartDateForTimeZone", "parameters": "( JobScheduleRequest jobScheduleRequest )", "modifiers": "protected", "return": "void", "signature": "void updateStartDateForTimeZone( JobScheduleRequest jobScheduleRequest )", "full_signature": "protected void updateStartDateForTimeZone( JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerService.updateStartDateForTimeZone( JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "updateBlockout", "parameters": "( String jobId, JobScheduleRequest jobScheduleRequest )", "modifiers": "public", "return": "Job", "signature": "Job updateBlockout( String jobId, JobScheduleRequest jobScheduleRequest )", "full_signature": "public Job updateBlockout( String jobId, JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerService.updateBlockout( String jobId, JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "getBlockStatus", "parameters": "( JobScheduleRequest jobScheduleRequest )", "modifiers": "public", "return": "BlockStatusProxy", "signature": "BlockStatusProxy getBlockStatus( JobScheduleRequest jobScheduleRequest )", "full_signature": "public BlockStatusProxy getBlockStatus( JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerService.getBlockStatus( JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "getBlockStatusProxy", "parameters": "( Boolean totallyBlocked, Boolean partiallyBlocked )", "modifiers": "protected", "return": "BlockStatusProxy", "signature": "BlockStatusProxy getBlockStatusProxy( Boolean totallyBlocked, Boolean partiallyBlocked )", "full_signature": "protected BlockStatusProxy getBlockStatusProxy( Boolean totallyBlocked, Boolean partiallyBlocked )", "class_method_signature": "SchedulerService.getBlockStatusProxy( Boolean totallyBlocked, Boolean partiallyBlocked )", "testcase": false, "constructor": false}, {"identifier": "convertScheduleRequestToJobTrigger", "parameters": "( JobScheduleRequest jobScheduleRequest )", "modifiers": "protected", "return": "IJobTrigger", "signature": "IJobTrigger convertScheduleRequestToJobTrigger( JobScheduleRequest jobScheduleRequest )", "full_signature": "protected IJobTrigger convertScheduleRequestToJobTrigger( JobScheduleRequest jobScheduleRequest )", "class_method_signature": "SchedulerService.convertScheduleRequestToJobTrigger( JobScheduleRequest jobScheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "getJobInfo", "parameters": "()", "modifiers": "public", "return": "JobScheduleRequest", "signature": "JobScheduleRequest getJobInfo()", "full_signature": "public JobScheduleRequest getJobInfo()", "class_method_signature": "SchedulerService.getJobInfo()", "testcase": false, "constructor": false}, {"identifier": "getJobState", "parameters": "( JobRequest jobRequest )", "modifiers": "public", "return": "JobState", "signature": "JobState getJobState( JobRequest jobRequest )", "full_signature": "public JobState getJobState( JobRequest jobRequest )", "class_method_signature": "SchedulerService.getJobState( JobRequest jobRequest )", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "protected", "return": "IPentahoSession", "signature": "IPentahoSession getSession()", "full_signature": "protected IPentahoSession getSession()", "class_method_signature": "SchedulerService.getSession()", "testcase": false, "constructor": false}, {"identifier": "getAction", "parameters": "( String actionClass )", "modifiers": "public", "return": "Class<IAction>", "signature": "Class<IAction> getAction( String actionClass )", "full_signature": "public Class<IAction> getAction( String actionClass )", "class_method_signature": "SchedulerService.getAction( String actionClass )", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "()", "modifiers": "public", "return": "IUnifiedRepository", "signature": "IUnifiedRepository getRepository()", "full_signature": "public IUnifiedRepository getRepository()", "class_method_signature": "SchedulerService.getRepository()", "testcase": false, "constructor": false}, {"identifier": "getScheduler", "parameters": "()", "modifiers": "public", "return": "IScheduler", "signature": "IScheduler getScheduler()", "full_signature": "public IScheduler getScheduler()", "class_method_signature": "SchedulerService.getScheduler()", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "()", "modifiers": "public", "return": "IAuthorizationPolicy", "signature": "IAuthorizationPolicy getPolicy()", "full_signature": "public IAuthorizationPolicy getPolicy()", "class_method_signature": "SchedulerService.getPolicy()", "testcase": false, "constructor": false}, {"identifier": "getSchedulerOutputPathResolver", "parameters": "( JobScheduleRequest scheduleRequest )", "modifiers": "protected", "return": "SchedulerOutputPathResolver", "signature": "SchedulerOutputPathResolver getSchedulerOutputPathResolver( JobScheduleRequest scheduleRequest )", "full_signature": "protected SchedulerOutputPathResolver getSchedulerOutputPathResolver( JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerService.getSchedulerOutputPathResolver( JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "isPdiFile", "parameters": "( RepositoryFile file )", "modifiers": "protected", "return": "boolean", "signature": "boolean isPdiFile( RepositoryFile file )", "full_signature": "protected boolean isPdiFile( RepositoryFile file )", "class_method_signature": "SchedulerService.isPdiFile( RepositoryFile file )", "testcase": false, "constructor": false}, {"identifier": "handlePDIScheduling", "parameters": "( RepositoryFile file,\n                                                               HashMap<String, Serializable> parameterMap,\n                                                               Map<String, String> pdiParameters )", "modifiers": "protected", "return": "HashMap<String, Serializable>", "signature": "HashMap<String, Serializable> handlePDIScheduling( RepositoryFile file,\n                                                               HashMap<String, Serializable> parameterMap,\n                                                               Map<String, String> pdiParameters )", "full_signature": "protected HashMap<String, Serializable> handlePDIScheduling( RepositoryFile file,\n                                                               HashMap<String, Serializable> parameterMap,\n                                                               Map<String, String> pdiParameters )", "class_method_signature": "SchedulerService.handlePDIScheduling( RepositoryFile file,\n                                                               HashMap<String, Serializable> parameterMap,\n                                                               Map<String, String> pdiParameters )", "testcase": false, "constructor": false}, {"identifier": "getAutoCreateUniqueFilename", "parameters": "( final JobScheduleRequest scheduleRequest )", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoCreateUniqueFilename( final JobScheduleRequest scheduleRequest )", "full_signature": "public boolean getAutoCreateUniqueFilename( final JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerService.getAutoCreateUniqueFilename( final JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "getAppendDateFormat", "parameters": "( final JobScheduleRequest scheduleRequest )", "modifiers": "public", "return": "String", "signature": "String getAppendDateFormat( final JobScheduleRequest scheduleRequest )", "full_signature": "public String getAppendDateFormat( final JobScheduleRequest scheduleRequest )", "class_method_signature": "SchedulerService.getAppendDateFormat( final JobScheduleRequest scheduleRequest )", "testcase": false, "constructor": false}, {"identifier": "getJobs", "parameters": "()", "modifiers": "public", "return": "List<Job>", "signature": "List<Job> getJobs()", "full_signature": "public List<Job> getJobs()", "class_method_signature": "SchedulerService.getJobs()", "testcase": false, "constructor": false}, {"identifier": "canAdminister", "parameters": "()", "modifiers": "protected", "return": "Boolean", "signature": "Boolean canAdminister()", "full_signature": "protected Boolean canAdminister()", "class_method_signature": "SchedulerService.canAdminister()", "testcase": false, "constructor": false}, {"identifier": "canAdminister", "parameters": "( IPentahoSession session )", "modifiers": "protected", "return": "Boolean", "signature": "Boolean canAdminister( IPentahoSession session )", "full_signature": "protected Boolean canAdminister( IPentahoSession session )", "class_method_signature": "SchedulerService.canAdminister( IPentahoSession session )", "testcase": false, "constructor": false}, {"identifier": "resolveActionId", "parameters": "( final String inputFile )", "modifiers": "protected", "return": "String", "signature": "String resolveActionId( final String inputFile )", "full_signature": "protected String resolveActionId( final String inputFile )", "class_method_signature": "SchedulerService.resolveActionId( final String inputFile )", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "( String filename )", "modifiers": "protected", "return": "String", "signature": "String getExtension( String filename )", "full_signature": "protected String getExtension( String filename )", "class_method_signature": "SchedulerService.getExtension( String filename )", "testcase": false, "constructor": false}, {"identifier": "getSessionResource", "parameters": "()", "modifiers": "protected", "return": "SessionResource", "signature": "SessionResource getSessionResource()", "full_signature": "protected SessionResource getSessionResource()", "class_method_signature": "SchedulerService.getSessionResource()", "testcase": false, "constructor": false}, {"identifier": "getFileService", "parameters": "()", "modifiers": "protected", "return": "FileService", "signature": "FileService getFileService()", "full_signature": "protected FileService getFileService()", "class_method_signature": "SchedulerService.getFileService()", "testcase": false, "constructor": false}, {"identifier": "getBlockoutManager", "parameters": "()", "modifiers": "protected", "return": "IBlockoutManager", "signature": "IBlockoutManager getBlockoutManager()", "full_signature": "protected IBlockoutManager getBlockoutManager()", "class_method_signature": "SchedulerService.getBlockoutManager()", "testcase": false, "constructor": false}, {"identifier": "getSecurityHelper", "parameters": "()", "modifiers": "protected", "return": "ISecurityHelper", "signature": "ISecurityHelper getSecurityHelper()", "full_signature": "protected ISecurityHelper getSecurityHelper()", "class_method_signature": "SchedulerService.getSecurityHelper()", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/services/SchedulerService.java"}, "focal_method": {"identifier": "getJobs", "parameters": "()", "modifiers": "public", "return": "List<Job>", "body": "public List<Job> getJobs() throws SchedulerException {\n    IPentahoSession session = getSession();\n    final String principalName = session.getName(); // this authentication wasn't matching with the job user name,\n    // changed to get name via the current session\n    final Boolean canAdminister = canAdminister( session );\n\n    List<Job> jobs = getScheduler().getJobs( new IJobFilter() {\n      @Override\n      public boolean accept( Job job ) {\n        if ( canAdminister ) {\n          return !IBlockoutManager.BLOCK_OUT_JOB_NAME.equals( job.getJobName() );\n        }\n        return principalName.equals( job.getUserName() );\n      }\n    } );\n    return jobs;\n  }", "signature": "List<Job> getJobs()", "full_signature": "public List<Job> getJobs()", "class_method_signature": "SchedulerService.getJobs()", "testcase": false, "constructor": false, "invocations": ["getSession", "getName", "canAdminister", "getJobs", "getScheduler", "equals", "getJobName", "equals", "getUserName"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}