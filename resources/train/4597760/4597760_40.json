{"test_class": {"identifier": "JcrStringHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PATH_TO_REPORT_NOT_ENCODED = \"/home/admin/[~!@#$%^&*(){}|.,]-=_+|;'\\\"?<>~`.prpti\";", "modifier": "private static final", "type": "String", "declarator": "PATH_TO_REPORT_NOT_ENCODED = \"/home/admin/[~!@#$%^&*(){}|.,]-=_+|;'\\\"?<>~`.prpti\"", "var_name": "PATH_TO_REPORT_NOT_ENCODED"}, {"original_string": "private static final String PATH_TO_REPORT_ENCODED = \"/home/admin/%5B~!@#$%25^&%2A(){}%7C.,%5D-=_+%7C;'\\\"?<>~`.prpti\";", "modifier": "private static final", "type": "String", "declarator": "PATH_TO_REPORT_ENCODED = \"/home/admin/%5B~!@#$%25^&%2A(){}%7C.,%5D-=_+%7C;'\\\"?<>~`.prpti\"", "var_name": "PATH_TO_REPORT_ENCODED"}, {"original_string": "private static final String SOLUTION_PATH = \"src/test/resources/solution\";", "modifier": "private static final", "type": "String", "declarator": "SOLUTION_PATH = \"src/test/resources/solution\"", "var_name": "SOLUTION_PATH"}], "file": "repository/src/test/java/org/pentaho/platform/repository2/unified/jcr/JcrStringHelperTest.java"}, "test_case": {"identifier": "testFileIsEncoded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFileIsEncoded() {\n    assertTrue( JcrStringHelper.isEncoded( PATH_TO_REPORT_ENCODED ) );\n  }", "signature": "void testFileIsEncoded()", "full_signature": "@Test public void testFileIsEncoded()", "class_method_signature": "JcrStringHelperTest.testFileIsEncoded()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEncoded"]}, "focal_class": {"identifier": "JcrStringHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static boolean useMultiByteEncoding = false;", "modifier": "private static", "type": "boolean", "declarator": "useMultiByteEncoding = false", "var_name": "useMultiByteEncoding"}, {"original_string": "private static boolean multiByteValueInitialized = false;", "modifier": "private static", "type": "boolean", "declarator": "multiByteValueInitialized = false", "var_name": "multiByteValueInitialized"}, {"original_string": "private static final String SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"/\"", "var_name": "SEPARATOR"}], "methods": [{"identifier": "JcrStringHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " JcrStringHelper()", "full_signature": "private  JcrStringHelper()", "class_method_signature": "JcrStringHelper.JcrStringHelper()", "testcase": false, "constructor": true}, {"identifier": "fileNameEncode", "parameters": "( String fileName )", "modifiers": "public static", "return": "String", "signature": "String fileNameEncode( String fileName )", "full_signature": "public static String fileNameEncode( String fileName )", "class_method_signature": "JcrStringHelper.fileNameEncode( String fileName )", "testcase": false, "constructor": false}, {"identifier": "fileNameEncode", "parameters": "( String fileName, boolean useMultiByte )", "modifiers": "public static", "return": "String", "signature": "String fileNameEncode( String fileName, boolean useMultiByte )", "full_signature": "public static String fileNameEncode( String fileName, boolean useMultiByte )", "class_method_signature": "JcrStringHelper.fileNameEncode( String fileName, boolean useMultiByte )", "testcase": false, "constructor": false}, {"identifier": "idEncode", "parameters": "( String id )", "modifiers": "public static", "return": "String", "signature": "String idEncode( String id )", "full_signature": "public static String idEncode( String id )", "class_method_signature": "JcrStringHelper.idEncode( String id )", "testcase": false, "constructor": false}, {"identifier": "fileNameDecode", "parameters": "( String encodedFileName )", "modifiers": "public static", "return": "String", "signature": "String fileNameDecode( String encodedFileName )", "full_signature": "public static String fileNameDecode( String encodedFileName )", "class_method_signature": "JcrStringHelper.fileNameDecode( String encodedFileName )", "testcase": false, "constructor": false}, {"identifier": "fileNameDecode", "parameters": "( String encodedFileName, boolean useMultiByte )", "modifiers": "public static", "return": "String", "signature": "String fileNameDecode( String encodedFileName, boolean useMultiByte )", "full_signature": "public static String fileNameDecode( String encodedFileName, boolean useMultiByte )", "class_method_signature": "JcrStringHelper.fileNameDecode( String encodedFileName, boolean useMultiByte )", "testcase": false, "constructor": false}, {"identifier": "pathEncode", "parameters": "( String path )", "modifiers": "public static", "return": "String", "signature": "String pathEncode( String path )", "full_signature": "public static String pathEncode( String path )", "class_method_signature": "JcrStringHelper.pathEncode( String path )", "testcase": false, "constructor": false}, {"identifier": "pathEncode", "parameters": "( String path, boolean useMultiByte )", "modifiers": "public static", "return": "String", "signature": "String pathEncode( String path, boolean useMultiByte )", "full_signature": "public static String pathEncode( String path, boolean useMultiByte )", "class_method_signature": "JcrStringHelper.pathEncode( String path, boolean useMultiByte )", "testcase": false, "constructor": false}, {"identifier": "pathDecode", "parameters": "( String encodedPath )", "modifiers": "public static", "return": "String", "signature": "String pathDecode( String encodedPath )", "full_signature": "public static String pathDecode( String encodedPath )", "class_method_signature": "JcrStringHelper.pathDecode( String encodedPath )", "testcase": false, "constructor": false}, {"identifier": "pathDecode", "parameters": "( String encodedPath, boolean useMultiByte )", "modifiers": "public static", "return": "String", "signature": "String pathDecode( String encodedPath, boolean useMultiByte )", "full_signature": "public static String pathDecode( String encodedPath, boolean useMultiByte )", "class_method_signature": "JcrStringHelper.pathDecode( String encodedPath, boolean useMultiByte )", "testcase": false, "constructor": false}, {"identifier": "isMultiByteEncodingEnabled", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isMultiByteEncodingEnabled()", "full_signature": "public static boolean isMultiByteEncodingEnabled()", "class_method_signature": "JcrStringHelper.isMultiByteEncodingEnabled()", "testcase": false, "constructor": false}, {"identifier": "setMultiByteEncodingEnabled", "parameters": "( boolean useMultiByteEncoding )", "modifiers": "public static", "return": "void", "signature": "void setMultiByteEncodingEnabled( boolean useMultiByteEncoding )", "full_signature": "public static void setMultiByteEncodingEnabled( boolean useMultiByteEncoding )", "class_method_signature": "JcrStringHelper.setMultiByteEncodingEnabled( boolean useMultiByteEncoding )", "testcase": false, "constructor": false}, {"identifier": "isEncoded", "parameters": "( String path )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEncoded( String path )", "full_signature": "public static boolean isEncoded( String path )", "class_method_signature": "JcrStringHelper.isEncoded( String path )", "testcase": false, "constructor": false}], "file": "repository/src/main/java/org/pentaho/platform/repository2/unified/jcr/JcrStringHelper.java"}, "focal_method": {"identifier": "isEncoded", "parameters": "( String path )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isEncoded( String path ) {\n    return !path.equals( pathDecode( path ) );\n  }", "signature": "boolean isEncoded( String path )", "full_signature": "public static boolean isEncoded( String path )", "class_method_signature": "JcrStringHelper.isEncoded( String path )", "testcase": false, "constructor": false, "invocations": ["equals", "pathDecode"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}