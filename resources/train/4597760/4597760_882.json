{"test_class": {"identifier": "Log4jResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONFIG = \"log4j.xml\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG = \"log4j.xml\"", "var_name": "CONFIG"}, {"original_string": "private Log4jResource target = new Log4jResource();", "modifier": "private", "type": "Log4jResource", "declarator": "target = new Log4jResource()", "var_name": "target"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/Log4jResourceTest.java"}, "test_case": {"identifier": "resetLogLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void resetLogLevel() throws Exception {\n    Logger root = LogManager.getRootLogger();\n    Level initialLevel = root.getLevel();\n    assertNotEquals( initialLevel, Level.ALL );\n    root.setLevel( Level.ALL );\n    assertEquals( Level.ALL, root.getLevel() );\n\n    Response res = target.reloadConfiguration();\n    assertNotEquals( Level.ALL,  LogManager.getRootLogger().getLevel() );\n\n    assertEquals( \"Done\", res.getEntity().toString() );\n  }", "signature": "void resetLogLevel()", "full_signature": "@Test public void resetLogLevel()", "class_method_signature": "Log4jResourceTest.resetLogLevel()", "testcase": true, "constructor": false, "invocations": ["getRootLogger", "getLevel", "assertNotEquals", "setLevel", "assertEquals", "getLevel", "reloadConfiguration", "assertNotEquals", "getLevel", "getRootLogger", "assertEquals", "toString", "getEntity"]}, "focal_class": {"identifier": "Log4jResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger( Log4jResource.class );", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger( Log4jResource.class )", "var_name": "LOGGER"}, {"original_string": "private static final String CONFIG = \"log4j.xml\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG = \"log4j.xml\"", "var_name": "CONFIG"}], "methods": [{"identifier": "reloadConfiguration", "parameters": "()", "modifiers": "@PUT @Path ( \"/reload\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully reload from configuration.\" ) } ) @Produces( { MediaType.TEXT_PLAIN } ) public", "return": "Response", "signature": "Response reloadConfiguration()", "full_signature": "@PUT @Path ( \"/reload\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully reload from configuration.\" ) } ) @Produces( { MediaType.TEXT_PLAIN } ) public Response reloadConfiguration()", "class_method_signature": "Log4jResource.reloadConfiguration()", "testcase": false, "constructor": false}, {"identifier": "updateLogLevel", "parameters": "( @FormParam(  \"level\" ) String targetLevel, @FormParam( \"category\" ) String category )", "modifiers": "@PUT @Path ( \"/update\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully update log level.\" ), @ResponseCode( code = 304, condition = \"Log level is not modified.\" ) } ) @Produces( { MediaType.TEXT_PLAIN } ) public", "return": "Response", "signature": "Response updateLogLevel( @FormParam(  \"level\" ) String targetLevel, @FormParam( \"category\" ) String category )", "full_signature": "@PUT @Path ( \"/update\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully update log level.\" ), @ResponseCode( code = 304, condition = \"Log level is not modified.\" ) } ) @Produces( { MediaType.TEXT_PLAIN } ) public Response updateLogLevel( @FormParam(  \"level\" ) String targetLevel, @FormParam( \"category\" ) String category )", "class_method_signature": "Log4jResource.updateLogLevel( @FormParam(  \"level\" ) String targetLevel, @FormParam( \"category\" ) String category )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/Log4jResource.java"}, "focal_method": {"identifier": "reloadConfiguration", "parameters": "()", "modifiers": "@PUT @Path ( \"/reload\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully reload from configuration.\" ) } ) @Produces( { MediaType.TEXT_PLAIN } ) public", "return": "Response", "body": "@PUT\n  @Path ( \"/reload\" )\n  @StatusCodes( {\n    @ResponseCode( code = 200, condition = \"Successfully reload from configuration.\" )\n    } )\n  @Produces( { MediaType.TEXT_PLAIN } )\n  public Response reloadConfiguration() throws Exception {\n    LOGGER.setLevel( Level.INFO );\n    LOGGER.info( \"Reloading configuration...\" );\n\n    DOMConfigurator.configure( Loader.getResource( CONFIG ) );\n    return Response.ok( \"Done\" ).build();\n  }", "signature": "Response reloadConfiguration()", "full_signature": "@PUT @Path ( \"/reload\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully reload from configuration.\" ) } ) @Produces( { MediaType.TEXT_PLAIN } ) public Response reloadConfiguration()", "class_method_signature": "Log4jResource.reloadConfiguration()", "testcase": false, "constructor": false, "invocations": ["setLevel", "info", "configure", "getResource", "build", "ok"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}