{"test_class": {"identifier": "QuartzSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static IUnifiedRepository repo;", "modifier": "private static", "type": "IUnifiedRepository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private static IUnifiedRepository oldRepo;", "modifier": "private static", "type": "IUnifiedRepository", "declarator": "oldRepo", "var_name": "oldRepo"}], "file": "scheduler/src/test/java/org/pentaho/platform/scheduler2/quartz/QuartzSchedulerTest.java"}, "test_case": {"identifier": "testSetJobNextRunToTheFuture", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetJobNextRunToTheFuture() {\n\n    Trigger trigger = Mockito.mock( Trigger.class );\n    Job job = new Job();\n    QuartzScheduler quartzScheduler = new QuartzScheduler();\n    long nowDate = new Date().getTime();\n    long futureDate = nowDate+1000000000;\n\n    Mockito.when( trigger.getNextFireTime() ).thenReturn( new Date( futureDate ) );\n    Mockito.when( trigger.getFireTimeAfter( any() ) ).thenReturn( new Date( nowDate ) );\n\n    quartzScheduler.setJobNextRun( job, trigger );\n\n    assertEquals( new Date( futureDate ), job.getNextRun() );\n  }", "signature": "void testSetJobNextRunToTheFuture()", "full_signature": "@Test public void testSetJobNextRunToTheFuture()", "class_method_signature": "QuartzSchedulerTest.testSetJobNextRunToTheFuture()", "testcase": true, "constructor": false, "invocations": ["mock", "getTime", "thenReturn", "when", "getNextFireTime", "thenReturn", "when", "getFireTimeAfter", "any", "setJobNextRun", "assertEquals", "getNextRun"]}, "focal_class": {"identifier": "QuartzScheduler", "superclass": "", "interfaces": "implements IScheduler", "fields": [{"original_string": "public static final String RESERVEDMAPKEY_ACTIONCLASS = ActionUtil.QUARTZ_ACTIONCLASS;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_ACTIONCLASS = ActionUtil.QUARTZ_ACTIONCLASS", "var_name": "RESERVEDMAPKEY_ACTIONCLASS"}, {"original_string": "public static final String RESERVEDMAPKEY_ACTIONUSER = ActionUtil.QUARTZ_ACTIONUSER;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_ACTIONUSER = ActionUtil.QUARTZ_ACTIONUSER", "var_name": "RESERVEDMAPKEY_ACTIONUSER"}, {"original_string": "public static final String RESERVEDMAPKEY_ACTIONID = ActionUtil.QUARTZ_ACTIONID;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_ACTIONID = ActionUtil.QUARTZ_ACTIONID", "var_name": "RESERVEDMAPKEY_ACTIONID"}, {"original_string": "public static final String RESERVEDMAPKEY_STREAMPROVIDER = ActionUtil.QUARTZ_STREAMPROVIDER;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_STREAMPROVIDER = ActionUtil.QUARTZ_STREAMPROVIDER", "var_name": "RESERVEDMAPKEY_STREAMPROVIDER"}, {"original_string": "public static final String RESERVEDMAPKEY_STREAMPROVIDER_INPUTFILE = ActionUtil.QUARTZ_STREAMPROVIDER_INPUT_FILE;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_STREAMPROVIDER_INPUTFILE = ActionUtil.QUARTZ_STREAMPROVIDER_INPUT_FILE", "var_name": "RESERVEDMAPKEY_STREAMPROVIDER_INPUTFILE"}, {"original_string": "public static final String RESERVEDMAPKEY_UIPASSPARAM = ActionUtil.QUARTZ_UIPASSPARAM;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_UIPASSPARAM = ActionUtil.QUARTZ_UIPASSPARAM", "var_name": "RESERVEDMAPKEY_UIPASSPARAM"}, {"original_string": "public static final String RESERVEDMAPKEY_LINEAGE_ID = ActionUtil.QUARTZ_LINEAGE_ID;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_LINEAGE_ID = ActionUtil.QUARTZ_LINEAGE_ID", "var_name": "RESERVEDMAPKEY_LINEAGE_ID"}, {"original_string": "public static final String RESERVEDMAPKEY_RESTART_FLAG = ActionUtil.QUARTZ_RESTART_FLAG;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_RESTART_FLAG = ActionUtil.QUARTZ_RESTART_FLAG", "var_name": "RESERVEDMAPKEY_RESTART_FLAG"}, {"original_string": "public static final String RESERVEDMAPKEY_AUTO_CREATE_UNIQUE_FILENAME = ActionUtil.QUARTZ_AUTO_CREATE_UNIQUE_FILENAME;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_AUTO_CREATE_UNIQUE_FILENAME = ActionUtil.QUARTZ_AUTO_CREATE_UNIQUE_FILENAME", "var_name": "RESERVEDMAPKEY_AUTO_CREATE_UNIQUE_FILENAME"}, {"original_string": "public static final String RESERVEDMAPKEY_APPEND_DATE_FORMAT = ActionUtil.QUARTZ_APPEND_DATE_FORMAT;", "modifier": "public static final", "type": "String", "declarator": "RESERVEDMAPKEY_APPEND_DATE_FORMAT = ActionUtil.QUARTZ_APPEND_DATE_FORMAT", "var_name": "RESERVEDMAPKEY_APPEND_DATE_FORMAT"}, {"original_string": "private static final Log logger = LogFactory.getLog( QuartzScheduler.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( QuartzScheduler.class )", "var_name": "logger"}, {"original_string": "private SchedulerFactory quartzSchedulerFactory;", "modifier": "private", "type": "SchedulerFactory", "declarator": "quartzSchedulerFactory", "var_name": "quartzSchedulerFactory"}, {"original_string": "private Scheduler quartzScheduler;", "modifier": "private", "type": "Scheduler", "declarator": "quartzScheduler", "var_name": "quartzScheduler"}, {"original_string": "private ArrayList<ISchedulerListener> listeners = new ArrayList<ISchedulerListener>();", "modifier": "private", "type": "ArrayList<ISchedulerListener>", "declarator": "listeners = new ArrayList<ISchedulerListener>()", "var_name": "listeners"}, {"original_string": "private static final Pattern listPattern = Pattern.compile( \"\\\\d+\" );", "modifier": "private static final", "type": "Pattern", "declarator": "listPattern = Pattern.compile( \"\\\\d+\" )", "var_name": "listPattern"}, {"original_string": "private static final Pattern dayOfWeekRangePattern = Pattern.compile( \".*\\\\-.*\" );", "modifier": "private static final", "type": "Pattern", "declarator": "dayOfWeekRangePattern = Pattern.compile( \".*\\\\-.*\" )", "var_name": "dayOfWeekRangePattern"}, {"original_string": "private static final Pattern sequencePattern = Pattern.compile( \"\\\\d+\\\\-\\\\d+\" );", "modifier": "private static final", "type": "Pattern", "declarator": "sequencePattern = Pattern.compile( \"\\\\d+\\\\-\\\\d+\" )", "var_name": "sequencePattern"}, {"original_string": "private static final Pattern intervalPattern = Pattern.compile( \"\\\\d+/\\\\d+\" );", "modifier": "private static final", "type": "Pattern", "declarator": "intervalPattern = Pattern.compile( \"\\\\d+/\\\\d+\" )", "var_name": "intervalPattern"}, {"original_string": "private static final Pattern qualifiedDayPattern = Pattern.compile( \"\\\\d+#\\\\d+\" );", "modifier": "private static final", "type": "Pattern", "declarator": "qualifiedDayPattern = Pattern.compile( \"\\\\d+#\\\\d+\" )", "var_name": "qualifiedDayPattern"}, {"original_string": "private static final Pattern lastDayPattern = Pattern.compile( \"\\\\d+L\" );", "modifier": "private static final", "type": "Pattern", "declarator": "lastDayPattern = Pattern.compile( \"\\\\d+L\" )", "var_name": "lastDayPattern"}], "methods": [{"identifier": "QuartzScheduler", "parameters": "( SchedulerFactory schedulerFactory )", "modifiers": "public", "return": "", "signature": " QuartzScheduler( SchedulerFactory schedulerFactory )", "full_signature": "public  QuartzScheduler( SchedulerFactory schedulerFactory )", "class_method_signature": "QuartzScheduler.QuartzScheduler( SchedulerFactory schedulerFactory )", "testcase": false, "constructor": true}, {"identifier": "QuartzScheduler", "parameters": "()", "modifiers": "public", "return": "", "signature": " QuartzScheduler()", "full_signature": "public  QuartzScheduler()", "class_method_signature": "QuartzScheduler.QuartzScheduler()", "testcase": false, "constructor": true}, {"identifier": "setQuartzSchedulerFactory", "parameters": "( SchedulerFactory quartzSchedulerFactory )", "modifiers": "public", "return": "void", "signature": "void setQuartzSchedulerFactory( SchedulerFactory quartzSchedulerFactory )", "full_signature": "public void setQuartzSchedulerFactory( SchedulerFactory quartzSchedulerFactory )", "class_method_signature": "QuartzScheduler.setQuartzSchedulerFactory( SchedulerFactory quartzSchedulerFactory )", "testcase": false, "constructor": false}, {"identifier": "getQuartzScheduler", "parameters": "()", "modifiers": "public", "return": "Scheduler", "signature": "Scheduler getQuartzScheduler()", "full_signature": "public Scheduler getQuartzScheduler()", "class_method_signature": "QuartzScheduler.getQuartzScheduler()", "testcase": false, "constructor": false}, {"identifier": "setQuartzScheduler", "parameters": "( Scheduler quartzScheduler )", "modifiers": "private", "return": "void", "signature": "void setQuartzScheduler( Scheduler quartzScheduler )", "full_signature": "private void setQuartzScheduler( Scheduler quartzScheduler )", "class_method_signature": "QuartzScheduler.setQuartzScheduler( Scheduler quartzScheduler )", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "modifiers": "public", "return": "Job", "signature": "Job createJob( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "full_signature": "public Job createJob( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "class_method_signature": "QuartzScheduler.createJob( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger )", "modifiers": "public", "return": "Job", "signature": "Job createJob( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger )", "full_signature": "public Job createJob( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger )", "class_method_signature": "QuartzScheduler.createJob( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger )", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger, IBackgroundExecutionStreamProvider outputStreamProvider )", "modifiers": "public", "return": "Job", "signature": "Job createJob( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger, IBackgroundExecutionStreamProvider outputStreamProvider )", "full_signature": "public Job createJob( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger, IBackgroundExecutionStreamProvider outputStreamProvider )", "class_method_signature": "QuartzScheduler.createJob( String jobName, Class<? extends IAction> action, Map<String, Serializable> jobParams,\n      IJobTrigger trigger, IBackgroundExecutionStreamProvider outputStreamProvider )", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "modifiers": "public", "return": "Job", "signature": "Job createJob( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "full_signature": "public Job createJob( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "class_method_signature": "QuartzScheduler.createJob( String jobName, String actionId, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "testcase": false, "constructor": false}, {"identifier": "createQuartzTrigger", "parameters": "( IJobTrigger jobTrigger, QuartzJobKey jobId )", "modifiers": "public static", "return": "Trigger", "signature": "Trigger createQuartzTrigger( IJobTrigger jobTrigger, QuartzJobKey jobId )", "full_signature": "public static Trigger createQuartzTrigger( IJobTrigger jobTrigger, QuartzJobKey jobId )", "class_method_signature": "QuartzScheduler.createQuartzTrigger( IJobTrigger jobTrigger, QuartzJobKey jobId )", "testcase": false, "constructor": false}, {"identifier": "createJobDetails", "parameters": "( QuartzJobKey jobId, Map<String, Serializable> jobParams )", "modifiers": "private", "return": "JobDetail", "signature": "JobDetail createJobDetails( QuartzJobKey jobId, Map<String, Serializable> jobParams )", "full_signature": "private JobDetail createJobDetails( QuartzJobKey jobId, Map<String, Serializable> jobParams )", "class_method_signature": "QuartzScheduler.createJobDetails( QuartzJobKey jobId, Map<String, Serializable> jobParams )", "testcase": false, "constructor": false}, {"identifier": "createQuartzCalendar", "parameters": "( ComplexJobTrigger complexJobTrigger )", "modifiers": "private", "return": "Calendar", "signature": "Calendar createQuartzCalendar( ComplexJobTrigger complexJobTrigger )", "full_signature": "private Calendar createQuartzCalendar( ComplexJobTrigger complexJobTrigger )", "class_method_signature": "QuartzScheduler.createQuartzCalendar( ComplexJobTrigger complexJobTrigger )", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "( String jobName, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "modifiers": "protected", "return": "Job", "signature": "Job createJob( String jobName, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "full_signature": "protected Job createJob( String jobName, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "class_method_signature": "QuartzScheduler.createJob( String jobName, Map<String, Serializable> jobParams, IJobTrigger trigger,\n      IBackgroundExecutionStreamProvider outputStreamProvider )", "testcase": false, "constructor": false}, {"identifier": "updateJob", "parameters": "( String jobId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "modifiers": "@Override public", "return": "void", "signature": "void updateJob( String jobId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "full_signature": "@Override public void updateJob( String jobId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "class_method_signature": "QuartzScheduler.updateJob( String jobId, Map<String, Serializable> jobParams, IJobTrigger trigger )", "testcase": false, "constructor": false}, {"identifier": "getAvailabilityWindows", "parameters": "()", "modifiers": "public", "return": "Map<IScheduleSubject, ComplexJobTrigger>", "signature": "Map<IScheduleSubject, ComplexJobTrigger> getAvailabilityWindows()", "full_signature": "public Map<IScheduleSubject, ComplexJobTrigger> getAvailabilityWindows()", "class_method_signature": "QuartzScheduler.getAvailabilityWindows()", "testcase": false, "constructor": false}, {"identifier": "getJobHistory", "parameters": "( String jobId )", "modifiers": "public", "return": "List<IJobResult>", "signature": "List<IJobResult> getJobHistory( String jobId )", "full_signature": "public List<IJobResult> getJobHistory( String jobId )", "class_method_signature": "QuartzScheduler.getJobHistory( String jobId )", "testcase": false, "constructor": false}, {"identifier": "triggerNow", "parameters": "( String jobId )", "modifiers": "public", "return": "void", "signature": "void triggerNow( String jobId )", "full_signature": "public void triggerNow( String jobId )", "class_method_signature": "QuartzScheduler.triggerNow( String jobId )", "testcase": false, "constructor": false}, {"identifier": "getJob", "parameters": "( String jobId )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public", "return": "Job", "signature": "Job getJob( String jobId )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public Job getJob( String jobId )", "class_method_signature": "QuartzScheduler.getJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "getJobs", "parameters": "( IJobFilter filter )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public", "return": "List<Job>", "signature": "List<Job> getJobs( IJobFilter filter )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public List<Job> getJobs( IJobFilter filter )", "class_method_signature": "QuartzScheduler.getJobs( IJobFilter filter )", "testcase": false, "constructor": false}, {"identifier": "setJobNextRun", "parameters": "( Job job, Trigger trigger )", "modifiers": "protected", "return": "void", "signature": "void setJobNextRun( Job job, Trigger trigger )", "full_signature": "protected void setJobNextRun( Job job, Trigger trigger )", "class_method_signature": "QuartzScheduler.setJobNextRun( Job job, Trigger trigger )", "testcase": false, "constructor": false}, {"identifier": "setJobTrigger", "parameters": "( Scheduler scheduler, Job job, Trigger trigger )", "modifiers": "private", "return": "void", "signature": "void setJobTrigger( Scheduler scheduler, Job job, Trigger trigger )", "full_signature": "private void setJobTrigger( Scheduler scheduler, Job job, Trigger trigger )", "class_method_signature": "QuartzScheduler.setJobTrigger( Scheduler scheduler, Job job, Trigger trigger )", "testcase": false, "constructor": false}, {"identifier": "getMinScheduleInterval", "parameters": "( IScheduleSubject subject )", "modifiers": "public", "return": "Integer", "signature": "Integer getMinScheduleInterval( IScheduleSubject subject )", "full_signature": "public Integer getMinScheduleInterval( IScheduleSubject subject )", "class_method_signature": "QuartzScheduler.getMinScheduleInterval( IScheduleSubject subject )", "testcase": false, "constructor": false}, {"identifier": "getSubjectAvailabilityWindow", "parameters": "( IScheduleSubject subject )", "modifiers": "public", "return": "ComplexJobTrigger", "signature": "ComplexJobTrigger getSubjectAvailabilityWindow( IScheduleSubject subject )", "full_signature": "public ComplexJobTrigger getSubjectAvailabilityWindow( IScheduleSubject subject )", "class_method_signature": "QuartzScheduler.getSubjectAvailabilityWindow( IScheduleSubject subject )", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pause()", "full_signature": "public void pause()", "class_method_signature": "QuartzScheduler.pause()", "testcase": false, "constructor": false}, {"identifier": "pauseJob", "parameters": "( String jobId )", "modifiers": "public", "return": "void", "signature": "void pauseJob( String jobId )", "full_signature": "public void pauseJob( String jobId )", "class_method_signature": "QuartzScheduler.pauseJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "removeJob", "parameters": "( String jobId )", "modifiers": "public", "return": "void", "signature": "void removeJob( String jobId )", "full_signature": "public void removeJob( String jobId )", "class_method_signature": "QuartzScheduler.removeJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "QuartzScheduler.start()", "testcase": false, "constructor": false}, {"identifier": "resumeJob", "parameters": "( String jobId )", "modifiers": "public", "return": "void", "signature": "void resumeJob( String jobId )", "full_signature": "public void resumeJob( String jobId )", "class_method_signature": "QuartzScheduler.resumeJob( String jobId )", "testcase": false, "constructor": false}, {"identifier": "setAvailabilityWindows", "parameters": "( Map<IScheduleSubject, ComplexJobTrigger> availability )", "modifiers": "public", "return": "void", "signature": "void setAvailabilityWindows( Map<IScheduleSubject, ComplexJobTrigger> availability )", "full_signature": "public void setAvailabilityWindows( Map<IScheduleSubject, ComplexJobTrigger> availability )", "class_method_signature": "QuartzScheduler.setAvailabilityWindows( Map<IScheduleSubject, ComplexJobTrigger> availability )", "testcase": false, "constructor": false}, {"identifier": "setMinScheduleInterval", "parameters": "( IScheduleSubject subject, int intervalInSeconds )", "modifiers": "public", "return": "void", "signature": "void setMinScheduleInterval( IScheduleSubject subject, int intervalInSeconds )", "full_signature": "public void setMinScheduleInterval( IScheduleSubject subject, int intervalInSeconds )", "class_method_signature": "QuartzScheduler.setMinScheduleInterval( IScheduleSubject subject, int intervalInSeconds )", "testcase": false, "constructor": false}, {"identifier": "setSubjectAvailabilityWindow", "parameters": "( IScheduleSubject subject, ComplexJobTrigger availability )", "modifiers": "public", "return": "void", "signature": "void setSubjectAvailabilityWindow( IScheduleSubject subject, ComplexJobTrigger availability )", "full_signature": "public void setSubjectAvailabilityWindow( IScheduleSubject subject, ComplexJobTrigger availability )", "class_method_signature": "QuartzScheduler.setSubjectAvailabilityWindow( IScheduleSubject subject, ComplexJobTrigger availability )", "testcase": false, "constructor": false}, {"identifier": "getCurrentUser", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getCurrentUser()", "full_signature": "protected String getCurrentUser()", "class_method_signature": "QuartzScheduler.getCurrentUser()", "testcase": false, "constructor": false}, {"identifier": "createComplexTrigger", "parameters": "( String cronExpression )", "modifiers": "public static", "return": "ComplexJobTrigger", "signature": "ComplexJobTrigger createComplexTrigger( String cronExpression )", "full_signature": "public static ComplexJobTrigger createComplexTrigger( String cronExpression )", "class_method_signature": "QuartzScheduler.createComplexTrigger( String cronExpression )", "testcase": false, "constructor": false}, {"identifier": "parseDayOfWeekRecurrences", "parameters": "( String cronExpression )", "modifiers": "private static", "return": "List<ITimeRecurrence>", "signature": "List<ITimeRecurrence> parseDayOfWeekRecurrences( String cronExpression )", "full_signature": "private static List<ITimeRecurrence> parseDayOfWeekRecurrences( String cronExpression )", "class_method_signature": "QuartzScheduler.parseDayOfWeekRecurrences( String cronExpression )", "testcase": false, "constructor": false}, {"identifier": "parseRecurrence", "parameters": "( String cronExpression, int tokenIndex )", "modifiers": "private static", "return": "List<ITimeRecurrence>", "signature": "List<ITimeRecurrence> parseRecurrence( String cronExpression, int tokenIndex )", "full_signature": "private static List<ITimeRecurrence> parseRecurrence( String cronExpression, int tokenIndex )", "class_method_signature": "QuartzScheduler.parseRecurrence( String cronExpression, int tokenIndex )", "testcase": false, "constructor": false}, {"identifier": "setTimezone", "parameters": "( CronTrigger cronTrigger, String timezone )", "modifiers": "", "return": "void", "signature": "void setTimezone( CronTrigger cronTrigger, String timezone )", "full_signature": " void setTimezone( CronTrigger cronTrigger, String timezone )", "class_method_signature": "QuartzScheduler.setTimezone( CronTrigger cronTrigger, String timezone )", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "SchedulerStatus", "signature": "SchedulerStatus getStatus()", "full_signature": "public SchedulerStatus getStatus()", "class_method_signature": "QuartzScheduler.getStatus()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "QuartzScheduler.shutdown()", "testcase": false, "constructor": false}, {"identifier": "prettyPrintMap", "parameters": "( Map<String, Serializable> map )", "modifiers": "public static", "return": "String", "signature": "String prettyPrintMap( Map<String, Serializable> map )", "full_signature": "public static String prettyPrintMap( Map<String, Serializable> map )", "class_method_signature": "QuartzScheduler.prettyPrintMap( Map<String, Serializable> map )", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "( ISchedulerListener listener )", "modifiers": "public", "return": "void", "signature": "void addListener( ISchedulerListener listener )", "full_signature": "public void addListener( ISchedulerListener listener )", "class_method_signature": "QuartzScheduler.addListener( ISchedulerListener listener )", "testcase": false, "constructor": false}, {"identifier": "setListeners", "parameters": "( Collection<ISchedulerListener> listeners )", "modifiers": "public", "return": "void", "signature": "void setListeners( Collection<ISchedulerListener> listeners )", "full_signature": "public void setListeners( Collection<ISchedulerListener> listeners )", "class_method_signature": "QuartzScheduler.setListeners( Collection<ISchedulerListener> listeners )", "testcase": false, "constructor": false}, {"identifier": "fireJobCompleted", "parameters": "( IAction actionBean, String actionUser, Map<String, Serializable> params,\n      IBackgroundExecutionStreamProvider streamProvider )", "modifiers": "public", "return": "void", "signature": "void fireJobCompleted( IAction actionBean, String actionUser, Map<String, Serializable> params,\n      IBackgroundExecutionStreamProvider streamProvider )", "full_signature": "public void fireJobCompleted( IAction actionBean, String actionUser, Map<String, Serializable> params,\n      IBackgroundExecutionStreamProvider streamProvider )", "class_method_signature": "QuartzScheduler.fireJobCompleted( IAction actionBean, String actionUser, Map<String, Serializable> params,\n      IBackgroundExecutionStreamProvider streamProvider )", "testcase": false, "constructor": false}, {"identifier": "validateJobParams", "parameters": "( Map<String, Serializable> jobParams )", "modifiers": "@Override public", "return": "void", "signature": "void validateJobParams( Map<String, Serializable> jobParams )", "full_signature": "@Override public void validateJobParams( Map<String, Serializable> jobParams )", "class_method_signature": "QuartzScheduler.validateJobParams( Map<String, Serializable> jobParams )", "testcase": false, "constructor": false}], "file": "scheduler/src/main/java/org/pentaho/platform/scheduler2/quartz/QuartzScheduler.java"}, "focal_method": {"identifier": "setJobNextRun", "parameters": "( Job job, Trigger trigger )", "modifiers": "protected", "return": "void", "body": "protected void setJobNextRun( Job job, Trigger trigger ) {\n    //if getNextFireTime() is in the future, then we use it\n    //if it is in past, we call getFireTimeAfter( new Date() ) to get the correct next date from today on\n    Date nextFire = trigger.getNextFireTime();\n    job.setNextRun( nextFire != null && ( nextFire.getTime() < new Date().getTime() )\n      ? trigger.getFireTimeAfter( new Date() )\n      : nextFire );\n  }", "signature": "void setJobNextRun( Job job, Trigger trigger )", "full_signature": "protected void setJobNextRun( Job job, Trigger trigger )", "class_method_signature": "QuartzScheduler.setJobNextRun( Job job, Trigger trigger )", "testcase": false, "constructor": false, "invocations": ["getNextFireTime", "setNextRun", "getTime", "getTime", "getFireTimeAfter"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}