{"test_class": {"identifier": "UserRoleDaoResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UserRoleDaoResource userRoleResource;", "modifier": "private", "type": "UserRoleDaoResource", "declarator": "userRoleResource", "var_name": "userRoleResource"}, {"original_string": "private IRoleAuthorizationPolicyRoleBindingDao roleBindingDao;", "modifier": "private", "type": "IRoleAuthorizationPolicyRoleBindingDao", "declarator": "roleBindingDao", "var_name": "roleBindingDao"}, {"original_string": "private ITenantManager tenantManager;", "modifier": "private", "type": "ITenantManager", "declarator": "tenantManager", "var_name": "tenantManager"}, {"original_string": "private ArrayList<String> systemRoles;", "modifier": "private", "type": "ArrayList<String>", "declarator": "systemRoles", "var_name": "systemRoles"}, {"original_string": "private String adminRole;", "modifier": "private", "type": "String", "declarator": "adminRole", "var_name": "adminRole"}, {"original_string": "private UserRoleDaoService userRoleService;", "modifier": "private", "type": "UserRoleDaoService", "declarator": "userRoleService", "var_name": "userRoleService"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/UserRoleDaoResourceTest.java"}, "test_case": {"identifier": "testChangePasswordSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testChangePasswordSuccess() throws Exception {\n    Response response = userRoleResource.changeUserPassword( new ChangePasswordUser( \"name\", \"newPass\", \"oldPass\" ) );\n    assertEquals( Response.Status.NO_CONTENT.getStatusCode(), response.getStatus() );\n  }", "signature": "void testChangePasswordSuccess()", "full_signature": "@Test public void testChangePasswordSuccess()", "class_method_signature": "UserRoleDaoResourceTest.testChangePasswordSuccess()", "testcase": true, "constructor": false, "invocations": ["changeUserPassword", "assertEquals", "getStatusCode", "getStatus"]}, "focal_class": {"identifier": "UserRoleDaoResource", "superclass": "extends AbstractJaxRSResource", "interfaces": "", "fields": [{"original_string": "private static final String PUC_VALIDATION_ERROR_MESSAGE = \"PUC_VALIDATION_ERROR_MESSAGE\";", "modifier": "private static final", "type": "String", "declarator": "PUC_VALIDATION_ERROR_MESSAGE = \"PUC_VALIDATION_ERROR_MESSAGE\"", "var_name": "PUC_VALIDATION_ERROR_MESSAGE"}, {"original_string": "private IRoleAuthorizationPolicyRoleBindingDao roleBindingDao = null;", "modifier": "private", "type": "IRoleAuthorizationPolicyRoleBindingDao", "declarator": "roleBindingDao = null", "var_name": "roleBindingDao"}, {"original_string": "private ITenantManager tenantManager = null;", "modifier": "private", "type": "ITenantManager", "declarator": "tenantManager = null", "var_name": "tenantManager"}, {"original_string": "private final UserRoleDaoService userRoleDaoService;", "modifier": "private final", "type": "UserRoleDaoService", "declarator": "userRoleDaoService", "var_name": "userRoleDaoService"}, {"original_string": "private ArrayList<String> systemRoles;", "modifier": "private", "type": "ArrayList<String>", "declarator": "systemRoles", "var_name": "systemRoles"}, {"original_string": "private String adminRole;", "modifier": "private", "type": "String", "declarator": "adminRole", "var_name": "adminRole"}, {"original_string": "private static final Log logger =\n      LogFactory.getLog( UserRoleDaoResource.class );", "modifier": "private static final", "type": "Log", "declarator": "logger =\n      LogFactory.getLog( UserRoleDaoResource.class )", "var_name": "logger"}], "methods": [{"identifier": "UserRoleDaoResource", "parameters": "()", "modifiers": "public", "return": "", "signature": " UserRoleDaoResource()", "full_signature": "public  UserRoleDaoResource()", "class_method_signature": "UserRoleDaoResource.UserRoleDaoResource()", "testcase": false, "constructor": true}, {"identifier": "UserRoleDaoResource", "parameters": "( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole )", "modifiers": "public", "return": "", "signature": " UserRoleDaoResource( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole )", "full_signature": "public  UserRoleDaoResource( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole )", "class_method_signature": "UserRoleDaoResource.UserRoleDaoResource( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole )", "testcase": false, "constructor": true}, {"identifier": "UserRoleDaoResource", "parameters": "( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole, UserRoleDaoService  service )", "modifiers": "public", "return": "", "signature": " UserRoleDaoResource( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole, UserRoleDaoService  service )", "full_signature": "public  UserRoleDaoResource( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole, UserRoleDaoService  service )", "class_method_signature": "UserRoleDaoResource.UserRoleDaoResource( final IRoleAuthorizationPolicyRoleBindingDao roleBindingDao,\n                              final ITenantManager tenantMgr, final ArrayList<String> systemRoles, final String adminRole, UserRoleDaoService  service )", "testcase": false, "constructor": true}, {"identifier": "createUser", "parameters": "( User user )", "modifiers": "@PUT @Path( \"/createUser\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully created new user.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode( code = 412, condition = \"Unable to create user.\" ) } ) public", "return": "Response", "signature": "Response createUser( User user )", "full_signature": "@PUT @Path( \"/createUser\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully created new user.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode( code = 412, condition = \"Unable to create user.\" ) } ) public Response createUser( User user )", "class_method_signature": "UserRoleDaoResource.createUser( User user )", "testcase": false, "constructor": false}, {"identifier": "deleteUsers", "parameters": "( @QueryParam( \"userNames\" ) String userNames )", "modifiers": "@PUT @Path ( \"/deleteUsers\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the list of users.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public", "return": "Response", "signature": "Response deleteUsers( @QueryParam( \"userNames\" ) String userNames )", "full_signature": "@PUT @Path ( \"/deleteUsers\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the list of users.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public Response deleteUsers( @QueryParam( \"userNames\" ) String userNames )", "class_method_signature": "UserRoleDaoResource.deleteUsers( @QueryParam( \"userNames\" ) String userNames )", "testcase": false, "constructor": false}, {"identifier": "changeUserPassword", "parameters": "( ChangePasswordUser user )", "modifiers": "@PUT @Path( \"/user\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully changed password.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Provided user name or password is incorrect.\" ), @ResponseCode( code = 412, condition = \"An error occurred in the platform.\" ) } ) public", "return": "Response", "signature": "Response changeUserPassword( ChangePasswordUser user )", "full_signature": "@PUT @Path( \"/user\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully changed password.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Provided user name or password is incorrect.\" ), @ResponseCode( code = 412, condition = \"An error occurred in the platform.\" ) } ) public Response changeUserPassword( ChangePasswordUser user )", "class_method_signature": "UserRoleDaoResource.changeUserPassword( ChangePasswordUser user )", "testcase": false, "constructor": false}, {"identifier": "b64DecodePassword", "parameters": "( String encodedPassword )", "modifiers": "private", "return": "String", "signature": "String b64DecodePassword( String encodedPassword )", "full_signature": "private String b64DecodePassword( String encodedPassword )", "class_method_signature": "UserRoleDaoResource.b64DecodePassword( String encodedPassword )", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "()", "modifiers": "@GET @Path ( \"/users\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes( { @ResponseCode ( code = 200, condition = \"Successfully returned the list of users.\" ), @ResponseCode ( code = 500, condition = \"An error occurred in the platform while trying to access the list of users.\" ) } ) public", "return": "UserListWrapper", "signature": "UserListWrapper getUsers()", "full_signature": "@GET @Path ( \"/users\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes( { @ResponseCode ( code = 200, condition = \"Successfully returned the list of users.\" ), @ResponseCode ( code = 500, condition = \"An error occurred in the platform while trying to access the list of users.\" ) } ) public UserListWrapper getUsers()", "class_method_signature": "UserRoleDaoResource.getUsers()", "testcase": false, "constructor": false}, {"identifier": "getRolesForUser", "parameters": "( @QueryParam( \"userName\" ) String user )", "modifiers": "@GET @Path ( \"/userRoles\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of roles.\" ), @ResponseCode ( code = 500, condition = \"Invalid user parameter.\" ) } ) public", "return": "RoleListWrapper", "signature": "RoleListWrapper getRolesForUser( @QueryParam( \"userName\" ) String user )", "full_signature": "@GET @Path ( \"/userRoles\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of roles.\" ), @ResponseCode ( code = 500, condition = \"Invalid user parameter.\" ) } ) public RoleListWrapper getRolesForUser( @QueryParam( \"userName\" ) String user )", "class_method_signature": "UserRoleDaoResource.getRolesForUser( @QueryParam( \"userName\" ) String user )", "testcase": false, "constructor": false}, {"identifier": "assignRolesToUser", "parameters": "( @QueryParam( \"userName\" ) String userName,\n                                     @QueryParam( \"roleNames\" ) String roleNames )", "modifiers": "@PUT @Path( \"/assignRoleToUser\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully append the roles to the user.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public", "return": "Response", "signature": "Response assignRolesToUser( @QueryParam( \"userName\" ) String userName,\n                                     @QueryParam( \"roleNames\" ) String roleNames )", "full_signature": "@PUT @Path( \"/assignRoleToUser\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully append the roles to the user.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public Response assignRolesToUser( @QueryParam( \"userName\" ) String userName,\n                                     @QueryParam( \"roleNames\" ) String roleNames )", "class_method_signature": "UserRoleDaoResource.assignRolesToUser( @QueryParam( \"userName\" ) String userName,\n                                     @QueryParam( \"roleNames\" ) String roleNames )", "testcase": false, "constructor": false}, {"identifier": "removeRolesFromUser", "parameters": "( @QueryParam( \"userName\" ) String userName,\n                                       @QueryParam( \"roleNames\" ) String roleNames )", "modifiers": "@PUT @Path( \"/removeRoleFromUser\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully removed the roles from the user.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public", "return": "Response", "signature": "Response removeRolesFromUser( @QueryParam( \"userName\" ) String userName,\n                                       @QueryParam( \"roleNames\" ) String roleNames )", "full_signature": "@PUT @Path( \"/removeRoleFromUser\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully removed the roles from the user.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public Response removeRolesFromUser( @QueryParam( \"userName\" ) String userName,\n                                       @QueryParam( \"roleNames\" ) String roleNames )", "class_method_signature": "UserRoleDaoResource.removeRolesFromUser( @QueryParam( \"userName\" ) String userName,\n                                       @QueryParam( \"roleNames\" ) String roleNames )", "testcase": false, "constructor": false}, {"identifier": "createRole", "parameters": "( @QueryParam( \"roleName\" ) String roleName )", "modifiers": "@PUT @Path( \"/createRole\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully created new role.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode( code = 412, condition = \"Unable to create role objects.\" ) } ) public", "return": "Response", "signature": "Response createRole( @QueryParam( \"roleName\" ) String roleName )", "full_signature": "@PUT @Path( \"/createRole\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully created new role.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode( code = 412, condition = \"Unable to create role objects.\" ) } ) public Response createRole( @QueryParam( \"roleName\" ) String roleName )", "class_method_signature": "UserRoleDaoResource.createRole( @QueryParam( \"roleName\" ) String roleName )", "testcase": false, "constructor": false}, {"identifier": "deleteRoles", "parameters": "( @QueryParam( \"roleNames\" ) String roleNames )", "modifiers": "@PUT @Path( \"/deleteRoles\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully deleted the list of roles.\" ), @ResponseCode( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode( code = 500, condition = \"The system was unable to delete the roles passed in.\" ) } ) public", "return": "Response", "signature": "Response deleteRoles( @QueryParam( \"roleNames\" ) String roleNames )", "full_signature": "@PUT @Path( \"/deleteRoles\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully deleted the list of roles.\" ), @ResponseCode( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode( code = 500, condition = \"The system was unable to delete the roles passed in.\" ) } ) public Response deleteRoles( @QueryParam( \"roleNames\" ) String roleNames )", "class_method_signature": "UserRoleDaoResource.deleteRoles( @QueryParam( \"roleNames\" ) String roleNames )", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "()", "modifiers": "@GET @Path( \"/roles\" ) @Produces( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of roles.\" ), @ResponseCode ( code = 500, condition = \"The system was not able to return the list of roles.\" ) } ) public", "return": "RoleListWrapper", "signature": "RoleListWrapper getRoles()", "full_signature": "@GET @Path( \"/roles\" ) @Produces( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of roles.\" ), @ResponseCode ( code = 500, condition = \"The system was not able to return the list of roles.\" ) } ) public RoleListWrapper getRoles()", "class_method_signature": "UserRoleDaoResource.getRoles()", "testcase": false, "constructor": false}, {"identifier": "getRoleMembers", "parameters": "( @QueryParam ( \"roleName\" ) String roleName )", "modifiers": "@GET @Path ( \"/roleMembers\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of Users.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"The system was not able to return the list of users.\" ) } ) public", "return": "UserListWrapper", "signature": "UserListWrapper getRoleMembers( @QueryParam ( \"roleName\" ) String roleName )", "full_signature": "@GET @Path ( \"/roleMembers\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of Users.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"The system was not able to return the list of users.\" ) } ) public UserListWrapper getRoleMembers( @QueryParam ( \"roleName\" ) String roleName )", "class_method_signature": "UserRoleDaoResource.getRoleMembers( @QueryParam ( \"roleName\" ) String roleName )", "testcase": false, "constructor": false}, {"identifier": "setLogicalRoles", "parameters": "( LogicalRoleAssignments roleAssignments )", "modifiers": "@PUT @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @Path ( \"/roleAssignments\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully applied the logical role assignment.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ) } ) public", "return": "Response", "signature": "Response setLogicalRoles( LogicalRoleAssignments roleAssignments )", "full_signature": "@PUT @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @Path ( \"/roleAssignments\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully applied the logical role assignment.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ) } ) public Response setLogicalRoles( LogicalRoleAssignments roleAssignments )", "class_method_signature": "UserRoleDaoResource.setLogicalRoles( LogicalRoleAssignments roleAssignments )", "testcase": false, "constructor": false}, {"identifier": "getRoleBindingStruct", "parameters": "( @QueryParam ( \"locale\" ) String locale )", "modifiers": "@GET @Path ( \"/logicalRoleMap\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ) } ) public", "return": "SystemRolesMap", "signature": "SystemRolesMap getRoleBindingStruct( @QueryParam ( \"locale\" ) String locale )", "full_signature": "@GET @Path ( \"/logicalRoleMap\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ) } ) public SystemRolesMap getRoleBindingStruct( @QueryParam ( \"locale\" ) String locale )", "class_method_signature": "UserRoleDaoResource.getRoleBindingStruct( @QueryParam ( \"locale\" ) String locale )", "testcase": false, "constructor": false}, {"identifier": "assignAllRolesToUser", "parameters": "( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam ( \"userName\" ) String userName )", "modifiers": "@PUT @Path ( \"/assignAllRolesToUser\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response assignAllRolesToUser( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam ( \"userName\" ) String userName )", "full_signature": "@PUT @Path ( \"/assignAllRolesToUser\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public Response assignAllRolesToUser( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam ( \"userName\" ) String userName )", "class_method_signature": "UserRoleDaoResource.assignAllRolesToUser( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam ( \"userName\" ) String userName )", "testcase": false, "constructor": false}, {"identifier": "removeAllRolesFromUser", "parameters": "( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"userName\" ) String userName )", "modifiers": "@PUT @Path ( \"/removeAllRolesFromUser\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response removeAllRolesFromUser( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"userName\" ) String userName )", "full_signature": "@PUT @Path ( \"/removeAllRolesFromUser\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public Response removeAllRolesFromUser( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"userName\" ) String userName )", "class_method_signature": "UserRoleDaoResource.removeAllRolesFromUser( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"userName\" ) String userName )", "testcase": false, "constructor": false}, {"identifier": "assignUserToRole", "parameters": "( @QueryParam ( \"tenant\" ) String tenantPath,\n                                    @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "modifiers": "@PUT @Path ( \"/assignUserToRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response assignUserToRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                    @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "full_signature": "@PUT @Path ( \"/assignUserToRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public Response assignUserToRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                    @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "class_method_signature": "UserRoleDaoResource.assignUserToRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                    @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "testcase": false, "constructor": false}, {"identifier": "removeUserFromRole", "parameters": "( @QueryParam ( \"tenant\" ) String tenantPath,\n                                      @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "modifiers": "@PUT @Path ( \"/removeUserFromRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response removeUserFromRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                      @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "full_signature": "@PUT @Path ( \"/removeUserFromRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public Response removeUserFromRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                      @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "class_method_signature": "UserRoleDaoResource.removeUserFromRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                      @QueryParam ( \"userNames\" ) String userNames, @QueryParam ( \"roleName\" ) String roleName )", "testcase": false, "constructor": false}, {"identifier": "assignAllUsersToRole", "parameters": "( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam( \"roleName\" ) String roleName )", "modifiers": "@PUT @Path ( \"/assignAllUsersToRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response assignAllUsersToRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam( \"roleName\" ) String roleName )", "full_signature": "@PUT @Path ( \"/assignAllUsersToRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public Response assignAllUsersToRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam( \"roleName\" ) String roleName )", "class_method_signature": "UserRoleDaoResource.assignAllUsersToRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                        @QueryParam( \"roleName\" ) String roleName )", "testcase": false, "constructor": false}, {"identifier": "removeAllUsersFromRole", "parameters": "( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"roleName\" ) String roleName )", "modifiers": "@PUT @Path ( \"/removeAllUsersFromRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response removeAllUsersFromRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"roleName\" ) String roleName )", "full_signature": "@PUT @Path ( \"/removeAllUsersFromRole\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) public Response removeAllUsersFromRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"roleName\" ) String roleName )", "class_method_signature": "UserRoleDaoResource.removeAllUsersFromRole( @QueryParam ( \"tenant\" ) String tenantPath,\n                                          @QueryParam ( \"roleName\" ) String roleName )", "testcase": false, "constructor": false}, {"identifier": "updatePassword", "parameters": "( UserChangePasswordDTO user )", "modifiers": "@PUT @Path( \"/updatePassword\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the list of users.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public", "return": "Response", "signature": "Response updatePassword( UserChangePasswordDTO user )", "full_signature": "@PUT @Path( \"/updatePassword\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the list of users.\" ), @ResponseCode ( code = 403, condition = \"Only users with administrative privileges can access this method.\" ), @ResponseCode ( code = 500, condition = \"Internal server error prevented the system from properly retrieving either the user or roles.\" ) } ) public Response updatePassword( UserChangePasswordDTO user )", "class_method_signature": "UserRoleDaoResource.updatePassword( UserChangePasswordDTO user )", "testcase": false, "constructor": false}, {"identifier": "getTenant", "parameters": "( String tenantId )", "modifiers": "protected", "return": "ITenant", "signature": "ITenant getTenant( String tenantId )", "full_signature": "protected ITenant getTenant( String tenantId )", "class_method_signature": "UserRoleDaoResource.getTenant( String tenantId )", "testcase": false, "constructor": false}, {"identifier": "tokenToString", "parameters": "( String tokenString )", "modifiers": "private", "return": "HashSet<String>", "signature": "HashSet<String> tokenToString( String tokenString )", "full_signature": "private HashSet<String> tokenToString( String tokenString )", "class_method_signature": "UserRoleDaoResource.tokenToString( String tokenString )", "testcase": false, "constructor": false}, {"identifier": "processErrorResponse", "parameters": "( String errMessage )", "modifiers": "private", "return": "Response", "signature": "Response processErrorResponse( String errMessage )", "full_signature": "private Response processErrorResponse( String errMessage )", "class_method_signature": "UserRoleDaoResource.processErrorResponse( String errMessage )", "testcase": false, "constructor": false}, {"identifier": "canAdminister", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean canAdminister()", "full_signature": "protected boolean canAdminister()", "class_method_signature": "UserRoleDaoResource.canAdminister()", "testcase": false, "constructor": false}, {"identifier": "updateRolesForCurrentSession", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateRolesForCurrentSession()", "full_signature": "protected void updateRolesForCurrentSession()", "class_method_signature": "UserRoleDaoResource.updateRolesForCurrentSession()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "protected", "return": "IPentahoSession", "signature": "IPentahoSession getSession()", "full_signature": "protected IPentahoSession getSession()", "class_method_signature": "UserRoleDaoResource.getSession()", "testcase": false, "constructor": false}, {"identifier": "getUserRoleDao", "parameters": "()", "modifiers": "protected", "return": "IUserRoleDao", "signature": "IUserRoleDao getUserRoleDao()", "full_signature": "protected IUserRoleDao getUserRoleDao()", "class_method_signature": "UserRoleDaoResource.getUserRoleDao()", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/UserRoleDaoResource.java"}, "focal_method": {"identifier": "changeUserPassword", "parameters": "( ChangePasswordUser user )", "modifiers": "@PUT @Path( \"/user\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully changed password.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Provided user name or password is incorrect.\" ), @ResponseCode( code = 412, condition = \"An error occurred in the platform.\" ) } ) public", "return": "Response", "body": "@PUT\n  @Path( \"/user\" )\n  @StatusCodes( {\n    @ResponseCode( code = 200, condition = \"Successfully changed password.\" ),\n    @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ),\n    @ResponseCode( code = 403, condition = \"Provided user name or password is incorrect.\" ),\n    @ResponseCode( code = 412, condition = \"An error occurred in the platform.\" )\n    } )\n  public Response changeUserPassword( ChangePasswordUser user ) {\n    try {\n      user.setNewPassword( b64DecodePassword( user.getNewPassword() ) );\n      user.setOldPassword( b64DecodePassword( user.getOldPassword() ) );\n      userRoleDaoService.changeUserPassword( user.getUserName(), user.getNewPassword(), user.getOldPassword() );\n    } catch ( ValidationFailedException e ) {\n      Response.ResponseBuilder response = Response.status( Response.Status.BAD_REQUEST );\n      response.header( PUC_VALIDATION_ERROR_MESSAGE, e.getMessage() );\n      throw new WebApplicationException( response.build() );\n    } catch ( SecurityException e ) {\n      Response.ResponseBuilder response = Response.status( Response.Status.FORBIDDEN );\n      response.header( PUC_VALIDATION_ERROR_MESSAGE, e.getMessage() );\n      throw new WebApplicationException( response.build() );\n    } catch ( Exception e ) {\n      // TODO: INTERNAL_SERVER_ERROR(500) returns (FORBIDDEN)403 error instead for unknown reason. I used\n      // PRECONDITION_FAILED\n      throw new WebApplicationException( Response.Status.PRECONDITION_FAILED );\n    }\n    return Response.noContent().build();\n  }", "signature": "Response changeUserPassword( ChangePasswordUser user )", "full_signature": "@PUT @Path( \"/user\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully changed password.\" ), @ResponseCode( code = 400, condition = \"Provided data has invalid format.\" ), @ResponseCode( code = 403, condition = \"Provided user name or password is incorrect.\" ), @ResponseCode( code = 412, condition = \"An error occurred in the platform.\" ) } ) public Response changeUserPassword( ChangePasswordUser user )", "class_method_signature": "UserRoleDaoResource.changeUserPassword( ChangePasswordUser user )", "testcase": false, "constructor": false, "invocations": ["setNewPassword", "b64DecodePassword", "getNewPassword", "setOldPassword", "b64DecodePassword", "getOldPassword", "changeUserPassword", "getUserName", "getNewPassword", "getOldPassword", "status", "header", "getMessage", "build", "status", "header", "getMessage", "build", "build", "noContent"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}