{"test_class": {"identifier": "UserRoleDaoServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UserRoleDaoService userRoleService;", "modifier": "private", "type": "UserRoleDaoService", "declarator": "userRoleService", "var_name": "userRoleService"}, {"original_string": "private final static String SESSION_USER_NAME = \"lucyInTheSky\";", "modifier": "private final static", "type": "String", "declarator": "SESSION_USER_NAME = \"lucyInTheSky\"", "var_name": "SESSION_USER_NAME"}, {"original_string": "private final static String SESSION_USER_PASSWORD = \"oldLucyPassword\";", "modifier": "private final static", "type": "String", "declarator": "SESSION_USER_PASSWORD = \"oldLucyPassword\"", "var_name": "SESSION_USER_PASSWORD"}, {"original_string": "private final static String OTHER_USER_NAME = \"motherMary\";", "modifier": "private final static", "type": "String", "declarator": "OTHER_USER_NAME = \"motherMary\"", "var_name": "OTHER_USER_NAME"}, {"original_string": "private final static String OTHER_USER_PASSWORD = \"oldMotherMaryPassword\";", "modifier": "private final static", "type": "String", "declarator": "OTHER_USER_PASSWORD = \"oldMotherMaryPassword\"", "var_name": "OTHER_USER_PASSWORD"}, {"original_string": "private final static String A_NEW_PASSWORD = \"correct_horse_battery_staple\";", "modifier": "private final static", "type": "String", "declarator": "A_NEW_PASSWORD = \"correct_horse_battery_staple\"", "var_name": "A_NEW_PASSWORD"}, {"original_string": "private final static String A_WRONG_PASSWORD = \"123456\";", "modifier": "private final static", "type": "String", "declarator": "A_WRONG_PASSWORD = \"123456\"", "var_name": "A_WRONG_PASSWORD"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/services/UserRoleDaoServiceTest.java"}, "test_case": {"identifier": "testGetRoleMembersSecurityException", "parameters": "()", "modifiers": "@Test( expected = SecurityException.class ) public", "return": "void", "body": "@Test( expected = SecurityException.class )\n  public void testGetRoleMembersSecurityException() {\n    setupMockSessionUser( SESSION_USER_NAME, false );\n\n    List<IPentahoUser> userList = new ArrayList<>();\n    IUserRoleDao roleDao = mock( IUserRoleDao.class );\n    when( roleDao.getRoleMembers( any( ITenant.class ), anyString() ) ).thenReturn( userList );\n    PentahoSystem.registerObject( roleDao );\n\n    IPentahoUser user = mock( IPentahoUser.class );\n    when( user.getUsername() ).thenReturn( \"admin\" );\n    userList.add( user );\n    UserListWrapper wrapUserList = new UserListWrapper( userList );\n\n    IPentahoSession session = mock( IPentahoSession.class );\n    String tenantPath = \"testPath\";\n    when( session.getAttribute( IPentahoSession.TENANT_ID_KEY ) ).thenReturn( tenantPath );\n    PentahoSessionHolder.setSession( session );\n\n    userRoleService.getRoleMembers( \"Report Author\" );\n  }", "signature": "void testGetRoleMembersSecurityException()", "full_signature": "@Test( expected = SecurityException.class ) public void testGetRoleMembersSecurityException()", "class_method_signature": "UserRoleDaoServiceTest.testGetRoleMembersSecurityException()", "testcase": true, "constructor": false, "invocations": ["setupMockSessionUser", "mock", "thenReturn", "when", "getRoleMembers", "any", "anyString", "registerObject", "mock", "thenReturn", "when", "getUsername", "add", "mock", "thenReturn", "when", "getAttribute", "setSession", "getRoleMembers"]}, "focal_class": {"identifier": "UserRoleDaoService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IUserRoleDao roleDao;", "modifier": "private", "type": "IUserRoleDao", "declarator": "roleDao", "var_name": "roleDao"}, {"original_string": "private IAuthorizationPolicy policy;", "modifier": "private", "type": "IAuthorizationPolicy", "declarator": "policy", "var_name": "policy"}, {"original_string": "private IRoleAuthorizationPolicyRoleBindingDao roleBindingDao;", "modifier": "private", "type": "IRoleAuthorizationPolicyRoleBindingDao", "declarator": "roleBindingDao", "var_name": "roleBindingDao"}, {"original_string": "private static final String PASS_VALIDATION_ERROR_WRONG_PASS = \"UserRoleDaoService.PassValidationError_WrongPass\";", "modifier": "private static final", "type": "String", "declarator": "PASS_VALIDATION_ERROR_WRONG_PASS = \"UserRoleDaoService.PassValidationError_WrongPass\"", "var_name": "PASS_VALIDATION_ERROR_WRONG_PASS"}, {"original_string": "public static final String PUC_USER_PASSWORD_LENGTH = \"PUC_USER_PASSWORD_LENGTH\";", "modifier": "public static final", "type": "String", "declarator": "PUC_USER_PASSWORD_LENGTH = \"PUC_USER_PASSWORD_LENGTH\"", "var_name": "PUC_USER_PASSWORD_LENGTH"}, {"original_string": "public static final String PUC_USER_PASSWORD_REQUIRE_SPECIAL_CHARACTER = \"PUC_USER_PASSWORD_REQUIRE_SPECIAL_CHARACTER\";", "modifier": "public static final", "type": "String", "declarator": "PUC_USER_PASSWORD_REQUIRE_SPECIAL_CHARACTER = \"PUC_USER_PASSWORD_REQUIRE_SPECIAL_CHARACTER\"", "var_name": "PUC_USER_PASSWORD_REQUIRE_SPECIAL_CHARACTER"}, {"original_string": "private ISystemConfig systemConfig = PentahoSystem.get( ISystemConfig.class );", "modifier": "private", "type": "ISystemConfig", "declarator": "systemConfig = PentahoSystem.get( ISystemConfig.class )", "var_name": "systemConfig"}], "methods": [{"identifier": "getUsers", "parameters": "()", "modifiers": "public", "return": "UserListWrapper", "signature": "UserListWrapper getUsers()", "full_signature": "public UserListWrapper getUsers()", "class_method_signature": "UserRoleDaoService.getUsers()", "testcase": false, "constructor": false}, {"identifier": "getRolesForUser", "parameters": "( String user )", "modifiers": "public", "return": "RoleListWrapper", "signature": "RoleListWrapper getRolesForUser( String user )", "full_signature": "public RoleListWrapper getRolesForUser( String user )", "class_method_signature": "UserRoleDaoService.getRolesForUser( String user )", "testcase": false, "constructor": false}, {"identifier": "assignRolesToUser", "parameters": "( String userName, String roleNames )", "modifiers": "public", "return": "void", "signature": "void assignRolesToUser( String userName, String roleNames )", "full_signature": "public void assignRolesToUser( String userName, String roleNames )", "class_method_signature": "UserRoleDaoService.assignRolesToUser( String userName, String roleNames )", "testcase": false, "constructor": false}, {"identifier": "removeRolesFromUser", "parameters": "( String userName, String roleNames )", "modifiers": "public", "return": "void", "signature": "void removeRolesFromUser( String userName, String roleNames )", "full_signature": "public void removeRolesFromUser( String userName, String roleNames )", "class_method_signature": "UserRoleDaoService.removeRolesFromUser( String userName, String roleNames )", "testcase": false, "constructor": false}, {"identifier": "createRole", "parameters": "( String roleName )", "modifiers": "public", "return": "void", "signature": "void createRole( String roleName )", "full_signature": "public void createRole( String roleName )", "class_method_signature": "UserRoleDaoService.createRole( String roleName )", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "()", "modifiers": "public", "return": "RoleListWrapper", "signature": "RoleListWrapper getRoles()", "full_signature": "public RoleListWrapper getRoles()", "class_method_signature": "UserRoleDaoService.getRoles()", "testcase": false, "constructor": false}, {"identifier": "getRoleMembers", "parameters": "( String roleName )", "modifiers": "public", "return": "UserListWrapper", "signature": "UserListWrapper getRoleMembers( String roleName )", "full_signature": "public UserListWrapper getRoleMembers( String roleName )", "class_method_signature": "UserRoleDaoService.getRoleMembers( String roleName )", "testcase": false, "constructor": false}, {"identifier": "containsReservedChars", "parameters": "( String username )", "modifiers": "private", "return": "boolean", "signature": "boolean containsReservedChars( String username )", "full_signature": "private boolean containsReservedChars( String username )", "class_method_signature": "UserRoleDaoService.containsReservedChars( String username )", "testcase": false, "constructor": false}, {"identifier": "strNotEmpty", "parameters": "( String str )", "modifiers": "private", "return": "boolean", "signature": "boolean strNotEmpty( String str )", "full_signature": "private boolean strNotEmpty( String str )", "class_method_signature": "UserRoleDaoService.strNotEmpty( String str )", "testcase": false, "constructor": false}, {"identifier": "userValid", "parameters": "( User user )", "modifiers": "private", "return": "boolean", "signature": "boolean userValid( User user )", "full_signature": "private boolean userValid( User user )", "class_method_signature": "UserRoleDaoService.userValid( User user )", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "( String toDecode )", "modifiers": "private", "return": "String", "signature": "String decode( String toDecode )", "full_signature": "private String decode( String toDecode )", "class_method_signature": "UserRoleDaoService.decode( String toDecode )", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "( User user )", "modifiers": "public", "return": "void", "signature": "void createUser( User user )", "full_signature": "public void createUser( User user )", "class_method_signature": "UserRoleDaoService.createUser( User user )", "testcase": false, "constructor": false}, {"identifier": "inputValid", "parameters": "( String userName, String newPass, String oldPass )", "modifiers": "private", "return": "boolean", "signature": "boolean inputValid( String userName, String newPass, String oldPass )", "full_signature": "private boolean inputValid( String userName, String newPass, String oldPass )", "class_method_signature": "UserRoleDaoService.inputValid( String userName, String newPass, String oldPass )", "testcase": false, "constructor": false}, {"identifier": "validatePasswordFormat", "parameters": "( String password )", "modifiers": "private", "return": "ValidationFailedException", "signature": "ValidationFailedException validatePasswordFormat( String password )", "full_signature": "private ValidationFailedException validatePasswordFormat( String password )", "class_method_signature": "UserRoleDaoService.validatePasswordFormat( String password )", "testcase": false, "constructor": false}, {"identifier": "credentialValid", "parameters": "( IPentahoUser pentahoUser, String oldPass )", "modifiers": "private", "return": "boolean", "signature": "boolean credentialValid( IPentahoUser pentahoUser, String oldPass )", "full_signature": "private boolean credentialValid( IPentahoUser pentahoUser, String oldPass )", "class_method_signature": "UserRoleDaoService.credentialValid( IPentahoUser pentahoUser, String oldPass )", "testcase": false, "constructor": false}, {"identifier": "changeUserPassword", "parameters": "( final String userName, final String newPass, String oldPass )", "modifiers": "public", "return": "void", "signature": "void changeUserPassword( final String userName, final String newPass, String oldPass )", "full_signature": "public void changeUserPassword( final String userName, final String newPass, String oldPass )", "class_method_signature": "UserRoleDaoService.changeUserPassword( final String userName, final String newPass, String oldPass )", "testcase": false, "constructor": false}, {"identifier": "deleteUsers", "parameters": "( String userNames )", "modifiers": "public", "return": "void", "signature": "void deleteUsers( String userNames )", "full_signature": "public void deleteUsers( String userNames )", "class_method_signature": "UserRoleDaoService.deleteUsers( String userNames )", "testcase": false, "constructor": false}, {"identifier": "deleteRoles", "parameters": "( String roleNames )", "modifiers": "public", "return": "void", "signature": "void deleteRoles( String roleNames )", "full_signature": "public void deleteRoles( String roleNames )", "class_method_signature": "UserRoleDaoService.deleteRoles( String roleNames )", "testcase": false, "constructor": false}, {"identifier": "getRoleBindingStruct", "parameters": "( String locale )", "modifiers": "public", "return": "SystemRolesMap", "signature": "SystemRolesMap getRoleBindingStruct( String locale )", "full_signature": "public SystemRolesMap getRoleBindingStruct( String locale )", "class_method_signature": "UserRoleDaoService.getRoleBindingStruct( String locale )", "testcase": false, "constructor": false}, {"identifier": "setLogicalRoles", "parameters": "( LogicalRoleAssignments roleAssignments )", "modifiers": "public", "return": "void", "signature": "void setLogicalRoles( LogicalRoleAssignments roleAssignments )", "full_signature": "public void setLogicalRoles( LogicalRoleAssignments roleAssignments )", "class_method_signature": "UserRoleDaoService.setLogicalRoles( LogicalRoleAssignments roleAssignments )", "testcase": false, "constructor": false}, {"identifier": "updatePassword", "parameters": "( User user, String administratorPassword )", "modifiers": "public", "return": "void", "signature": "void updatePassword( User user, String administratorPassword )", "full_signature": "public void updatePassword( User user, String administratorPassword )", "class_method_signature": "UserRoleDaoService.updatePassword( User user, String administratorPassword )", "testcase": false, "constructor": false}, {"identifier": "updatePassword", "parameters": "( User user )", "modifiers": "public", "return": "void", "signature": "void updatePassword( User user )", "full_signature": "public void updatePassword( User user )", "class_method_signature": "UserRoleDaoService.updatePassword( User user )", "testcase": false, "constructor": false}, {"identifier": "canAdminister", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean canAdminister()", "full_signature": "private boolean canAdminister()", "class_method_signature": "UserRoleDaoService.canAdminister()", "testcase": false, "constructor": false}, {"identifier": "getRoleBindingDao", "parameters": "()", "modifiers": "private", "return": "IRoleAuthorizationPolicyRoleBindingDao", "signature": "IRoleAuthorizationPolicyRoleBindingDao getRoleBindingDao()", "full_signature": "private IRoleAuthorizationPolicyRoleBindingDao getRoleBindingDao()", "class_method_signature": "UserRoleDaoService.getRoleBindingDao()", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "()", "modifiers": "private", "return": "IAuthorizationPolicy", "signature": "IAuthorizationPolicy getPolicy()", "full_signature": "private IAuthorizationPolicy getPolicy()", "class_method_signature": "UserRoleDaoService.getPolicy()", "testcase": false, "constructor": false}, {"identifier": "getRoleDao", "parameters": "()", "modifiers": "private", "return": "IUserRoleDao", "signature": "IUserRoleDao getRoleDao()", "full_signature": "private IUserRoleDao getRoleDao()", "class_method_signature": "UserRoleDaoService.getRoleDao()", "testcase": false, "constructor": false}, {"identifier": "setSystemConfig", "parameters": "( ISystemConfig systemConfig )", "modifiers": "@VisibleForTesting protected", "return": "void", "signature": "void setSystemConfig( ISystemConfig systemConfig )", "full_signature": "@VisibleForTesting protected void setSystemConfig( ISystemConfig systemConfig )", "class_method_signature": "UserRoleDaoService.setSystemConfig( ISystemConfig systemConfig )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/services/UserRoleDaoService.java"}, "focal_method": {"identifier": "getRoleMembers", "parameters": "( String roleName )", "modifiers": "public", "return": "UserListWrapper", "body": "public UserListWrapper getRoleMembers( String roleName ) throws UncategorizedUserRoleDaoException, SecurityException {\n    if ( canAdminister() ) {\n      return new UserListWrapper( getRoleDao().getRoleMembers( TenantUtils.getCurrentTenant(), roleName ) );\n    } else {\n      throw new SecurityException();\n    }\n  }", "signature": "UserListWrapper getRoleMembers( String roleName )", "full_signature": "public UserListWrapper getRoleMembers( String roleName )", "class_method_signature": "UserRoleDaoService.getRoleMembers( String roleName )", "testcase": false, "constructor": false, "invocations": ["canAdminister", "getRoleMembers", "getRoleDao", "getCurrentTenant"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}