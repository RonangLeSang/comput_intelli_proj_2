{"test_class": {"identifier": "FileResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ACL_OWNER = \"ACL_Owner\";", "modifier": "private static final", "type": "String", "declarator": "ACL_OWNER = \"ACL_Owner\"", "var_name": "ACL_OWNER"}, {"original_string": "private static final String BAD_ACL_OWNER = \"<script>alert('999');</script>\";", "modifier": "private static final", "type": "String", "declarator": "BAD_ACL_OWNER = \"<script>alert('999');</script>\"", "var_name": "BAD_ACL_OWNER"}, {"original_string": "private static final String USERNAME = \"admin\";", "modifier": "private static final", "type": "String", "declarator": "USERNAME = \"admin\"", "var_name": "USERNAME"}, {"original_string": "private static final String BAD_USERNAME = \"cowboy\";", "modifier": "private static final", "type": "String", "declarator": "BAD_USERNAME = \"cowboy\"", "var_name": "BAD_USERNAME"}, {"original_string": "private static final String ROLENAME = \"Administrators\";", "modifier": "private static final", "type": "String", "declarator": "ROLENAME = \"Administrators\"", "var_name": "ROLENAME"}, {"original_string": "private static final String BAD_ROLENAME = \"Outlaws\";", "modifier": "private static final", "type": "String", "declarator": "BAD_ROLENAME = \"Outlaws\"", "var_name": "BAD_ROLENAME"}, {"original_string": "private static final String XML_EXTENSION = \"xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_EXTENSION = \"xml\"", "var_name": "XML_EXTENSION"}, {"original_string": "private static final String PATH_CONTROL_CHARACTER = \"Create Control Character \\u0017 File.xml\";", "modifier": "private static final", "type": "String", "declarator": "PATH_CONTROL_CHARACTER = \"Create Control Character \\u0017 File.xml\"", "var_name": "PATH_CONTROL_CHARACTER"}, {"original_string": "private static final String PATH_SPECIAL_CHARACTERS = \"\u00e9\u00c9\u00e8\u00c8\u00e7\u00c7\u00ba\u00aa\u00fc\u00dc@\u00a3\u00a7.xml\";", "modifier": "private static final", "type": "String", "declarator": "PATH_SPECIAL_CHARACTERS = \"\u00e9\u00c9\u00e8\u00c8\u00e7\u00c7\u00ba\u00aa\u00fc\u00dc@\u00a3\u00a7.xml\";", "var_name": "PATH_SPECIAL_CHARACTERS"}, {"original_string": "private static final String PATH_JAPANESE_CHARACTERS = \"\u30ad\u30e3\u30e9\u30af\u30bf\u30fc.xml\";", "modifier": "private static final", "type": "String", "declarator": "PATH_JAPANESE_CHARACTERS = \"\u30ad\u30e3\u30e9\u30af\u30bf\u30fc.xml\";", "var_name": "PATH_JAPANESE_CHARACTERS"}, {"original_string": "private static final String PATH_ID = \"pathId.xml\";", "modifier": "private static final", "type": "String", "declarator": "PATH_ID = \"pathId.xml\"", "var_name": "PATH_ID"}, {"original_string": "private static final String PATH_ID_WITHOUTH_EXTENSION = \"pathId\";", "modifier": "private static final", "type": "String", "declarator": "PATH_ID_WITHOUTH_EXTENSION = \"pathId\"", "var_name": "PATH_ID_WITHOUTH_EXTENSION"}, {"original_string": "private static final String PATH_ID_INCORRECT_EXTENSION = \"pathId.wrong\";", "modifier": "private static final", "type": "String", "declarator": "PATH_ID_INCORRECT_EXTENSION = \"pathId.wrong\"", "var_name": "PATH_ID_INCORRECT_EXTENSION"}, {"original_string": "private static final String NAME_NEW_FILE = \"nameNewFile.xml\";", "modifier": "private static final", "type": "String", "declarator": "NAME_NEW_FILE = \"nameNewFile.xml\"", "var_name": "NAME_NEW_FILE"}, {"original_string": "private static final String NAME_NEW_FILE_WITHOUT_EXTENSION = \"nameNewFile\";", "modifier": "private static final", "type": "String", "declarator": "NAME_NEW_FILE_WITHOUT_EXTENSION = \"nameNewFile\"", "var_name": "NAME_NEW_FILE_WITHOUT_EXTENSION"}, {"original_string": "private static final String NAME_NEW_FILE_WRONG_EXTENSION = \"nameNewFile.wrong\";", "modifier": "private static final", "type": "String", "declarator": "NAME_NEW_FILE_WRONG_EXTENSION = \"nameNewFile.wrong\"", "var_name": "NAME_NEW_FILE_WRONG_EXTENSION"}, {"original_string": "private static final String FILE_ID = \"444324fd54ghad\";", "modifier": "private static final", "type": "String", "declarator": "FILE_ID = \"444324fd54ghad\"", "var_name": "FILE_ID"}, {"original_string": "private FileResource fileResource;", "modifier": "private", "type": "FileResource", "declarator": "fileResource", "var_name": "fileResource"}, {"original_string": "private IUserRoleDao userRoleDao;", "modifier": "private", "type": "IUserRoleDao", "declarator": "userRoleDao", "var_name": "userRoleDao"}, {"original_string": "private Tenant tenant;", "modifier": "private", "type": "Tenant", "declarator": "tenant", "var_name": "tenant"}], "file": "extensions/src/test/java/org/pentaho/platform/web/http/api/resources/FileResourceTest.java"}, "test_case": {"identifier": "testGenerateDocumentFromXMLString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateDocumentFromXMLString() throws Exception {\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<element>\" + \"true\" + \"</element>\";\n    Document document = fileResource.parseText( xml );\n    assertNotNull( document );\n    assertTrue( document.getRootElement().getStringValue().equals( \"true\" ) );\n  }", "signature": "void testGenerateDocumentFromXMLString()", "full_signature": "@Test public void testGenerateDocumentFromXMLString()", "class_method_signature": "FileResourceTest.testGenerateDocumentFromXMLString()", "testcase": true, "constructor": false, "invocations": ["parseText", "assertNotNull", "assertTrue", "equals", "getStringValue", "getRootElement"]}, "focal_class": {"identifier": "FileResource", "superclass": "extends AbstractJaxRSResource", "interfaces": "", "fields": [{"original_string": "private static final String INVALID_SECURITY_PRINCIPAL_CHARACTERS = \".*[#,+\\\"\\\\\\\\<>]+.*\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_SECURITY_PRINCIPAL_CHARACTERS = \".*[#,+\\\"\\\\\\\\<>]+.*\"", "var_name": "INVALID_SECURITY_PRINCIPAL_CHARACTERS"}, {"original_string": "private static final Pattern INVALID_SECURITY_PRINCIPAL_PATTERN = Pattern.compile( INVALID_SECURITY_PRINCIPAL_CHARACTERS );", "modifier": "private static final", "type": "Pattern", "declarator": "INVALID_SECURITY_PRINCIPAL_PATTERN = Pattern.compile( INVALID_SECURITY_PRINCIPAL_CHARACTERS )", "var_name": "INVALID_SECURITY_PRINCIPAL_PATTERN"}, {"original_string": "public static final String APPLICATION_ZIP = \"application/zip\";", "modifier": "public static final", "type": "String", "declarator": "APPLICATION_ZIP = \"application/zip\"", "var_name": "APPLICATION_ZIP"}, {"original_string": "public static final String REPOSITORY_ADMIN_USERNAME = \"pentahoRepoAdmin\";", "modifier": "public static final", "type": "String", "declarator": "REPOSITORY_ADMIN_USERNAME = \"pentahoRepoAdmin\"", "var_name": "REPOSITORY_ADMIN_USERNAME"}, {"original_string": "protected static final Log logger = LogFactory.getLog( FileResource.class );", "modifier": "protected static final", "type": "Log", "declarator": "logger = LogFactory.getLog( FileResource.class )", "var_name": "logger"}, {"original_string": "protected FileService fileService;", "modifier": "protected", "type": "FileService", "declarator": "fileService", "var_name": "fileService"}, {"original_string": "protected RepositoryDownloadWhitelist whitelist;", "modifier": "protected", "type": "RepositoryDownloadWhitelist", "declarator": "whitelist", "var_name": "whitelist"}, {"original_string": "protected static IUnifiedRepository repository;", "modifier": "protected static", "type": "IUnifiedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "protected static DefaultUnifiedRepositoryWebService repoWs;", "modifier": "protected static", "type": "DefaultUnifiedRepositoryWebService", "declarator": "repoWs", "var_name": "repoWs"}, {"original_string": "protected static IAuthorizationPolicy policy;", "modifier": "protected static", "type": "IAuthorizationPolicy", "declarator": "policy", "var_name": "policy"}, {"original_string": "protected static UserRoleListService userRoleListService;", "modifier": "protected static", "type": "UserRoleListService", "declarator": "userRoleListService", "var_name": "userRoleListService"}, {"original_string": "IRepositoryContentConverterHandler converterHandler;", "modifier": "", "type": "IRepositoryContentConverterHandler", "declarator": "converterHandler", "var_name": "converterHandler"}, {"original_string": "Map<String, Converter> converters;", "modifier": "", "type": "Map<String, Converter>", "declarator": "converters", "var_name": "converters"}, {"original_string": "protected IPlatformMimeResolver mimeResolver;", "modifier": "protected", "type": "IPlatformMimeResolver", "declarator": "mimeResolver", "var_name": "mimeResolver"}], "methods": [{"identifier": "FileResource", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileResource()", "full_signature": "public  FileResource()", "class_method_signature": "FileResource.FileResource()", "testcase": false, "constructor": true}, {"identifier": "FileResource", "parameters": "( HttpServletResponse httpServletResponse )", "modifiers": "public", "return": "", "signature": " FileResource( HttpServletResponse httpServletResponse )", "full_signature": "public  FileResource( HttpServletResponse httpServletResponse )", "class_method_signature": "FileResource.FileResource( HttpServletResponse httpServletResponse )", "testcase": false, "constructor": true}, {"identifier": "idToPath", "parameters": "( String pathId )", "modifiers": "public static", "return": "String", "signature": "String idToPath( String pathId )", "full_signature": "public static String idToPath( String pathId )", "class_method_signature": "FileResource.idToPath( String pathId )", "testcase": false, "constructor": false}, {"identifier": "systemBackup", "parameters": "( @HeaderParam ( \"user-agent\" ) String userAgent )", "modifiers": "@GET @Path( \"/backup\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully exported the existing Pentaho System\" ), @ResponseCode( code = 403, condition = \"User does not have administrative permissions\" ), @ResponseCode( code = 500, condition = \"Failure to complete the export.\" ) } ) public", "return": "Response", "signature": "Response systemBackup( @HeaderParam ( \"user-agent\" ) String userAgent )", "full_signature": "@GET @Path( \"/backup\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully exported the existing Pentaho System\" ), @ResponseCode( code = 403, condition = \"User does not have administrative permissions\" ), @ResponseCode( code = 500, condition = \"Failure to complete the export.\" ) } ) public Response systemBackup( @HeaderParam ( \"user-agent\" ) String userAgent )", "class_method_signature": "FileResource.systemBackup( @HeaderParam ( \"user-agent\" ) String userAgent )", "testcase": false, "constructor": false}, {"identifier": "systemRestore", "parameters": "( @FormDataParam( \"fileUpload\" ) InputStream fileUpload, @FormDataParam ( \"overwriteFile\" ) String overwriteFile,\n                                 @FormDataParam ( \"applyAclSettings\" ) String applyAclSettings, @FormDataParam ( \"overwriteAclSettings\" ) String overwriteAclSettings )", "modifiers": "@POST @Path( \"/systemRestore\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully imported the Pentaho System\" ), @ResponseCode( code = 403, condition = \"User does not have administrative permissions\" ), @ResponseCode( code = 500, condition = \"Failure to complete the import.\" ) } ) public", "return": "Response", "signature": "Response systemRestore( @FormDataParam( \"fileUpload\" ) InputStream fileUpload, @FormDataParam ( \"overwriteFile\" ) String overwriteFile,\n                                 @FormDataParam ( \"applyAclSettings\" ) String applyAclSettings, @FormDataParam ( \"overwriteAclSettings\" ) String overwriteAclSettings )", "full_signature": "@POST @Path( \"/systemRestore\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully imported the Pentaho System\" ), @ResponseCode( code = 403, condition = \"User does not have administrative permissions\" ), @ResponseCode( code = 500, condition = \"Failure to complete the import.\" ) } ) public Response systemRestore( @FormDataParam( \"fileUpload\" ) InputStream fileUpload, @FormDataParam ( \"overwriteFile\" ) String overwriteFile,\n                                 @FormDataParam ( \"applyAclSettings\" ) String applyAclSettings, @FormDataParam ( \"overwriteAclSettings\" ) String overwriteAclSettings )", "class_method_signature": "FileResource.systemRestore( @FormDataParam( \"fileUpload\" ) InputStream fileUpload, @FormDataParam ( \"overwriteFile\" ) String overwriteFile,\n                                 @FormDataParam ( \"applyAclSettings\" ) String applyAclSettings, @FormDataParam ( \"overwriteAclSettings\" ) String overwriteAclSettings )", "testcase": false, "constructor": false}, {"identifier": "doDeleteFiles", "parameters": "( String params )", "modifiers": "@PUT @Path( \"/delete\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully moved file to trash.\" ), @ResponseCode( code = 500, condition = \"Failure move the file to the trash.\" ) } ) public", "return": "Response", "signature": "Response doDeleteFiles( String params )", "full_signature": "@PUT @Path( \"/delete\" ) @Consumes( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully moved file to trash.\" ), @ResponseCode( code = 500, condition = \"Failure move the file to the trash.\" ) } ) public Response doDeleteFiles( String params )", "class_method_signature": "FileResource.doDeleteFiles( String params )", "testcase": false, "constructor": false}, {"identifier": "doDeleteFilesPermanent", "parameters": "( String params )", "modifiers": "@PUT @Path ( \"/deletepermanent\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the comma seperated list of fileIds from the system.\" ), @ResponseCode ( code = 403, condition = \"Failure to delete the file due to path not found.\" ) } ) public", "return": "Response", "signature": "Response doDeleteFilesPermanent( String params )", "full_signature": "@PUT @Path ( \"/deletepermanent\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the comma seperated list of fileIds from the system.\" ), @ResponseCode ( code = 403, condition = \"Failure to delete the file due to path not found.\" ) } ) public Response doDeleteFilesPermanent( String params )", "class_method_signature": "FileResource.doDeleteFilesPermanent( String params )", "testcase": false, "constructor": false}, {"identifier": "doMove", "parameters": "( @PathParam ( \"pathId\" ) String destPathId, String params )", "modifiers": "@PUT @Path ( \"{pathId : .+}/move\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully moved the file.\" ), @ResponseCode ( code = 403, condition = \"Failure to move the file due to path not found.\" ), @ResponseCode ( code = 500, condition = \"Failure to move the file.\" ) } ) public", "return": "Response", "signature": "Response doMove( @PathParam ( \"pathId\" ) String destPathId, String params )", "full_signature": "@PUT @Path ( \"{pathId : .+}/move\" ) @Consumes ( { MediaType.WILDCARD } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully moved the file.\" ), @ResponseCode ( code = 403, condition = \"Failure to move the file due to path not found.\" ), @ResponseCode ( code = 500, condition = \"Failure to move the file.\" ) } ) public Response doMove( @PathParam ( \"pathId\" ) String destPathId, String params )", "class_method_signature": "FileResource.doMove( @PathParam ( \"pathId\" ) String destPathId, String params )", "testcase": false, "constructor": false}, {"identifier": "doRestore", "parameters": "( String params,\n                             @QueryParam( value = \"overwriteMode\" ) Integer mode )", "modifiers": "@PUT @Path( \"/restore\" ) @Consumes( { MediaType.WILDCARD } ) @Facet( name = \"Unsupported\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully restored the file.\" ), @ResponseCode( code = 307, condition = \"Cannot restore in origin folder, can restore in home folder without \" + \"conflicts\" ), @ResponseCode( code = 403, condition = \"Failure to Restore the file.\" ), @ResponseCode( code = 409, condition = \"Cannot restore in origin folder, cannot restore in home folder without \" + \"conflicts\" ), } ) public", "return": "Response", "signature": "Response doRestore( String params,\n                             @QueryParam( value = \"overwriteMode\" ) Integer mode )", "full_signature": "@PUT @Path( \"/restore\" ) @Consumes( { MediaType.WILDCARD } ) @Facet( name = \"Unsupported\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully restored the file.\" ), @ResponseCode( code = 307, condition = \"Cannot restore in origin folder, can restore in home folder without \" + \"conflicts\" ), @ResponseCode( code = 403, condition = \"Failure to Restore the file.\" ), @ResponseCode( code = 409, condition = \"Cannot restore in origin folder, cannot restore in home folder without \" + \"conflicts\" ), } ) public Response doRestore( String params,\n                             @QueryParam( value = \"overwriteMode\" ) Integer mode )", "class_method_signature": "FileResource.doRestore( String params,\n                             @QueryParam( value = \"overwriteMode\" ) Integer mode )", "testcase": false, "constructor": false}, {"identifier": "createFile", "parameters": "( @PathParam ( \"pathId\" ) String pathId, InputStream fileContents )", "modifiers": "@PUT @Path ( \"{pathId : .+}\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully created the file.\" ), @ResponseCode ( code = 403, condition = \"Failure to create the file due to permissions, file already exists, or invalid path id.\" ) } ) public", "return": "Response", "signature": "Response createFile( @PathParam ( \"pathId\" ) String pathId, InputStream fileContents )", "full_signature": "@PUT @Path ( \"{pathId : .+}\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully created the file.\" ), @ResponseCode ( code = 403, condition = \"Failure to create the file due to permissions, file already exists, or invalid path id.\" ) } ) public Response createFile( @PathParam ( \"pathId\" ) String pathId, InputStream fileContents )", "class_method_signature": "FileResource.createFile( @PathParam ( \"pathId\" ) String pathId, InputStream fileContents )", "testcase": false, "constructor": false}, {"identifier": "doCopyFiles", "parameters": "( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"mode\" ) Integer mode,\n                               String params )", "modifiers": "@PUT @Path ( \"{pathId : .+}/children\" ) @Consumes ( { MediaType.TEXT_PLAIN } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully copied the file.\" ), @ResponseCode ( code = 500, condition = \"Failure to Copy file due to exception while getting file with id fileid...\" ), } ) public", "return": "Response", "signature": "Response doCopyFiles( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"mode\" ) Integer mode,\n                               String params )", "full_signature": "@PUT @Path ( \"{pathId : .+}/children\" ) @Consumes ( { MediaType.TEXT_PLAIN } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully copied the file.\" ), @ResponseCode ( code = 500, condition = \"Failure to Copy file due to exception while getting file with id fileid...\" ), } ) public Response doCopyFiles( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"mode\" ) Integer mode,\n                               String params )", "class_method_signature": "FileResource.doCopyFiles( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"mode\" ) Integer mode,\n                               String params )", "testcase": false, "constructor": false}, {"identifier": "doGetFileOrDir", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}\" ) @Produces ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the file or directory.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the file or resource.\" ), @ResponseCode ( code = 500, condition = \"Failed to open content.\" ) } ) public", "return": "Response", "signature": "Response doGetFileOrDir( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}\" ) @Produces ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the file or directory.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the file or resource.\" ), @ResponseCode ( code = 500, condition = \"Failed to open content.\" ) } ) public Response doGetFileOrDir( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetFileOrDir( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetDirAsZip", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "public", "return": "Response", "signature": "Response doGetDirAsZip( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "public Response doGetDirAsZip( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetDirAsZip( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetDirAsZip", "parameters": "( RepositoryFile repositoryFile )", "modifiers": "public", "return": "Response", "signature": "Response doGetDirAsZip( RepositoryFile repositoryFile )", "full_signature": "public Response doGetDirAsZip( RepositoryFile repositoryFile )", "class_method_signature": "FileResource.doGetDirAsZip( RepositoryFile repositoryFile )", "testcase": false, "constructor": false}, {"identifier": "doIsParameterizable", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/parameterizable\" ) @Produces ( MediaType.TEXT_PLAIN ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the file or directory.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the file or resource.\" ) } ) // have to accept anything for browsers to work public", "return": "String", "signature": "String doIsParameterizable( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/parameterizable\" ) @Produces ( MediaType.TEXT_PLAIN ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully get the file or directory.\" ), @ResponseCode ( code = 404, condition = \"Failed to find the file or resource.\" ) } ) // have to accept anything for browsers to work public String doIsParameterizable( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doIsParameterizable( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetFileOrDirAsDownload", "parameters": "( @HeaderParam ( \"user-agent\" ) String userAgent,\n                                            @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"withManifest\" ) String strWithManifest )", "modifiers": "@GET @Path ( \"{pathId : .+}/download\" ) @Produces ( MediaType.WILDCARD ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful download.\" ), @ResponseCode ( code = 400, condition = \"Usually a bad pathId.\" ), @ResponseCode ( code = 403, condition = \"pathId points at a file the user doesn't have access to.\" ), @ResponseCode ( code = 404, condition = \"File not found.\" ), @ResponseCode ( code = 500, condition = \"Failed to download file for another reason.\" ) } ) // have to accept anything for browsers to work public", "return": "Response", "signature": "Response doGetFileOrDirAsDownload( @HeaderParam ( \"user-agent\" ) String userAgent,\n                                            @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"withManifest\" ) String strWithManifest )", "full_signature": "@GET @Path ( \"{pathId : .+}/download\" ) @Produces ( MediaType.WILDCARD ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successful download.\" ), @ResponseCode ( code = 400, condition = \"Usually a bad pathId.\" ), @ResponseCode ( code = 403, condition = \"pathId points at a file the user doesn't have access to.\" ), @ResponseCode ( code = 404, condition = \"File not found.\" ), @ResponseCode ( code = 500, condition = \"Failed to download file for another reason.\" ) } ) // have to accept anything for browsers to work public Response doGetFileOrDirAsDownload( @HeaderParam ( \"user-agent\" ) String userAgent,\n                                            @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"withManifest\" ) String strWithManifest )", "class_method_signature": "FileResource.doGetFileOrDirAsDownload( @HeaderParam ( \"user-agent\" ) String userAgent,\n                                            @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"withManifest\" ) String strWithManifest )", "testcase": false, "constructor": false}, {"identifier": "doGetFileAsInline", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/inline\" ) @Produces ( MediaType.WILDCARD ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved file.\" ), @ResponseCode ( code = 403, condition = \"Failed to retrieve file due to permission problem.\" ), @ResponseCode ( code = 404, condition = \"Failed to retrieve file due because file was not found.\" ), @ResponseCode ( code = 500, condition = \"Failed to download file because of some other error.\" ) } ) public", "return": "Response", "signature": "Response doGetFileAsInline( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/inline\" ) @Produces ( MediaType.WILDCARD ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved file.\" ), @ResponseCode ( code = 403, condition = \"Failed to retrieve file due to permission problem.\" ), @ResponseCode ( code = 404, condition = \"Failed to retrieve file due because file was not found.\" ), @ResponseCode ( code = 500, condition = \"Failed to download file because of some other error.\" ) } ) public Response doGetFileAsInline( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetFileAsInline( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "setFileAcls", "parameters": "( @PathParam ( \"pathId\" ) String pathId, RepositoryFileAclDto acl )", "modifiers": "@PUT @Path ( \"{pathId : .+}/acl\" ) @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully saved file.\" ), @ResponseCode ( code = 403, condition = \"Failed to save acls due to missing or incorrect properties.\" ), @ResponseCode ( code = 400, condition = \"Failed to save acls due to malformed xml.\" ), @ResponseCode ( code = 500, condition = \"Failed to save acls due to another error.\" ) } ) public", "return": "Response", "signature": "Response setFileAcls( @PathParam ( \"pathId\" ) String pathId, RepositoryFileAclDto acl )", "full_signature": "@PUT @Path ( \"{pathId : .+}/acl\" ) @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully saved file.\" ), @ResponseCode ( code = 403, condition = \"Failed to save acls due to missing or incorrect properties.\" ), @ResponseCode ( code = 400, condition = \"Failed to save acls due to malformed xml.\" ), @ResponseCode ( code = 500, condition = \"Failed to save acls due to another error.\" ) } ) public Response setFileAcls( @PathParam ( \"pathId\" ) String pathId, RepositoryFileAclDto acl )", "class_method_signature": "FileResource.setFileAcls( @PathParam ( \"pathId\" ) String pathId, RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "doSetContentCreator", "parameters": "( @PathParam ( \"pathId\" ) String pathId, RepositoryFileDto contentCreator )", "modifiers": "@PUT @Path ( \"{pathId : .+}/creator\" ) @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved file.\" ), @ResponseCode ( code = 500, condition = \"Failed to download file because of some other error.\" ) } ) @Facet ( name = \"Unsupported\" ) public", "return": "Response", "signature": "Response doSetContentCreator( @PathParam ( \"pathId\" ) String pathId, RepositoryFileDto contentCreator )", "full_signature": "@PUT @Path ( \"{pathId : .+}/creator\" ) @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved file.\" ), @ResponseCode ( code = 500, condition = \"Failed to download file because of some other error.\" ) } ) @Facet ( name = \"Unsupported\" ) public Response doSetContentCreator( @PathParam ( \"pathId\" ) String pathId, RepositoryFileDto contentCreator )", "class_method_signature": "FileResource.doSetContentCreator( @PathParam ( \"pathId\" ) String pathId, RepositoryFileDto contentCreator )", "testcase": false, "constructor": false}, {"identifier": "doGetFileLocales", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/locales\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved locale information.\" ), @ResponseCode ( code = 404, condition = \"Failed to retrieve locales because the file was not found.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve locales due to some other error.\" ) } ) public", "return": "List<LocaleMapDto>", "signature": "List<LocaleMapDto> doGetFileLocales( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/locales\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved locale information.\" ), @ResponseCode ( code = 404, condition = \"Failed to retrieve locales because the file was not found.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve locales due to some other error.\" ) } ) public List<LocaleMapDto> doGetFileLocales( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetFileLocales( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetLocaleProperties", "parameters": "( @PathParam ( \"pathId\" ) String pathId,\n                                                              @QueryParam ( \"locale\" ) String locale )", "modifiers": "@GET @Path ( \"{pathId : .+}/localeProperties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved locale properties.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve locale properties due to some other error.\" ) } ) public", "return": "List<StringKeyStringValueDto>", "signature": "List<StringKeyStringValueDto> doGetLocaleProperties( @PathParam ( \"pathId\" ) String pathId,\n                                                              @QueryParam ( \"locale\" ) String locale )", "full_signature": "@GET @Path ( \"{pathId : .+}/localeProperties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved locale properties.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve locale properties due to some other error.\" ) } ) public List<StringKeyStringValueDto> doGetLocaleProperties( @PathParam ( \"pathId\" ) String pathId,\n                                                              @QueryParam ( \"locale\" ) String locale )", "class_method_signature": "FileResource.doGetLocaleProperties( @PathParam ( \"pathId\" ) String pathId,\n                                                              @QueryParam ( \"locale\" ) String locale )", "testcase": false, "constructor": false}, {"identifier": "doSetLocaleProperties", "parameters": "( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale,\n                                         List<StringKeyStringValueDto> properties )", "modifiers": "@PUT @Path ( \"{pathId : .+}/localeProperties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully updated locale properties.\" ), @ResponseCode ( code = 500, condition = \"Unable to update locale properties due to some other error.\" ) } ) public", "return": "Response", "signature": "Response doSetLocaleProperties( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale,\n                                         List<StringKeyStringValueDto> properties )", "full_signature": "@PUT @Path ( \"{pathId : .+}/localeProperties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully updated locale properties.\" ), @ResponseCode ( code = 500, condition = \"Unable to update locale properties due to some other error.\" ) } ) public Response doSetLocaleProperties( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale,\n                                         List<StringKeyStringValueDto> properties )", "class_method_signature": "FileResource.doSetLocaleProperties( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale,\n                                         List<StringKeyStringValueDto> properties )", "testcase": false, "constructor": false}, {"identifier": "doDeleteLocale", "parameters": "( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale )", "modifiers": "@PUT @Path ( \"{pathId : .+}/deleteLocale\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the locale.\" ), @ResponseCode ( code = 500, condition = \"Unable to delete the locale properties due to some other error.\" ) } ) public", "return": "Response", "signature": "Response doDeleteLocale( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale )", "full_signature": "@PUT @Path ( \"{pathId : .+}/deleteLocale\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully deleted the locale.\" ), @ResponseCode ( code = 500, condition = \"Unable to delete the locale properties due to some other error.\" ) } ) public Response doDeleteLocale( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale )", "class_method_signature": "FileResource.doDeleteLocale( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"locale\" ) String locale )", "testcase": false, "constructor": false}, {"identifier": "doGetRootProperties", "parameters": "()", "modifiers": "@GET @Path ( \"/properties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the properties of the root directory.\" ), @ResponseCode ( code = 404, condition = \"Unable to retrieve the properties of the root directory due to file not found error.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the properties of the root directory due to some other error.\" ) } ) public", "return": "RepositoryFileDto", "signature": "RepositoryFileDto doGetRootProperties()", "full_signature": "@GET @Path ( \"/properties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the properties of the root directory.\" ), @ResponseCode ( code = 404, condition = \"Unable to retrieve the properties of the root directory due to file not found error.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the properties of the root directory due to some other error.\" ) } ) public RepositoryFileDto doGetRootProperties()", "class_method_signature": "FileResource.doGetRootProperties()", "testcase": false, "constructor": false}, {"identifier": "doGetCanAccessList", "parameters": "( @PathParam ( \"pathId\" ) String pathId,\n                                           @QueryParam ( \"permissions\" ) String permissions )", "modifiers": "@GET @Path ( \"{pathId : .+}/canAccessMap\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the permissions of the file.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the permissions of the file due to some other error.\" ) } ) public", "return": "List<Setting>", "signature": "List<Setting> doGetCanAccessList( @PathParam ( \"pathId\" ) String pathId,\n                                           @QueryParam ( \"permissions\" ) String permissions )", "full_signature": "@GET @Path ( \"{pathId : .+}/canAccessMap\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the permissions of the file.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the permissions of the file due to some other error.\" ) } ) public List<Setting> doGetCanAccessList( @PathParam ( \"pathId\" ) String pathId,\n                                           @QueryParam ( \"permissions\" ) String permissions )", "class_method_signature": "FileResource.doGetCanAccessList( @PathParam ( \"pathId\" ) String pathId,\n                                           @QueryParam ( \"permissions\" ) String permissions )", "testcase": false, "constructor": false}, {"identifier": "doGetPathsAccessList", "parameters": "( StringListWrapper pathsWrapper )", "modifiers": "@POST @Path ( \"/pathsAccessList\" ) @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the permissions of the given paths.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the permissions of the given paths due to some other error.\" ) } ) public", "return": "List<Setting>", "signature": "List<Setting> doGetPathsAccessList( StringListWrapper pathsWrapper )", "full_signature": "@POST @Path ( \"/pathsAccessList\" ) @Consumes ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the permissions of the given paths.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the permissions of the given paths due to some other error.\" ) } ) public List<Setting> doGetPathsAccessList( StringListWrapper pathsWrapper )", "class_method_signature": "FileResource.doGetPathsAccessList( StringListWrapper pathsWrapper )", "testcase": false, "constructor": false}, {"identifier": "doGetCanAccess", "parameters": "( @PathParam ( \"pathId\" ) String pathId,\n                                @QueryParam ( \"permissions\" ) String permissions )", "modifiers": "@GET @Path ( \"{pathId : .+}/canAccess\" ) @Produces ( MediaType.TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the permissions of the given paths.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the permissions of the given paths due to some other error.\" ) } ) public", "return": "String", "signature": "String doGetCanAccess( @PathParam ( \"pathId\" ) String pathId,\n                                @QueryParam ( \"permissions\" ) String permissions )", "full_signature": "@GET @Path ( \"{pathId : .+}/canAccess\" ) @Produces ( MediaType.TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the permissions of the given paths.\" ), @ResponseCode ( code = 500, condition = \"Unable to retrieve the permissions of the given paths due to some other error.\" ) } ) public String doGetCanAccess( @PathParam ( \"pathId\" ) String pathId,\n                                @QueryParam ( \"permissions\" ) String permissions )", "class_method_signature": "FileResource.doGetCanAccess( @PathParam ( \"pathId\" ) String pathId,\n                                @QueryParam ( \"permissions\" ) String permissions )", "testcase": false, "constructor": false}, {"identifier": "doGetCanAdminister", "parameters": "()", "modifiers": "@GET @Path ( \"/canAdminister\" ) @Produces ( MediaType.TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns a boolean value, either true or false\" ) } ) public", "return": "String", "signature": "String doGetCanAdminister()", "full_signature": "@GET @Path ( \"/canAdminister\" ) @Produces ( MediaType.TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns a boolean value, either true or false\" ) } ) public String doGetCanAdminister()", "class_method_signature": "FileResource.doGetCanAdminister()", "testcase": false, "constructor": false}, {"identifier": "doGetReservedChars", "parameters": "()", "modifiers": "@GET @Path ( \"/reservedCharacters\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns a list of repositroy reserved characters\" ) } ) public", "return": "Response", "signature": "Response doGetReservedChars()", "full_signature": "@GET @Path ( \"/reservedCharacters\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns a list of repositroy reserved characters\" ) } ) public Response doGetReservedChars()", "class_method_signature": "FileResource.doGetReservedChars()", "testcase": false, "constructor": false}, {"identifier": "doGetReservedCharactersDisplay", "parameters": "()", "modifiers": "@GET @Path ( \"/reservedCharactersDisplay\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns a list of repositroy reserved characters\" ) } ) public", "return": "Response", "signature": "Response doGetReservedCharactersDisplay()", "full_signature": "@GET @Path ( \"/reservedCharactersDisplay\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns a list of repositroy reserved characters\" ) } ) public Response doGetReservedCharactersDisplay()", "class_method_signature": "FileResource.doGetReservedCharactersDisplay()", "testcase": false, "constructor": false}, {"identifier": "doGetCanCreate", "parameters": "()", "modifiers": "@GET @Path ( \"/canCreate\" ) @Produces ( MediaType.TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns true or false depending on the users permissions\" ) } ) public", "return": "String", "signature": "String doGetCanCreate()", "full_signature": "@GET @Path ( \"/canCreate\" ) @Produces ( MediaType.TEXT_PLAIN ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully returns true or false depending on the users permissions\" ) } ) public String doGetCanCreate()", "class_method_signature": "FileResource.doGetCanCreate()", "testcase": false, "constructor": false}, {"identifier": "doGetFileAcl", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/acl\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Returns the requested file permissions in xml or json format\" ), @ResponseCode ( code = 500, condition = \"File failed to be retrieved. This could be caused by an invalid path, or the file does not exist.\" ) } ) public", "return": "RepositoryFileAclDto", "signature": "RepositoryFileAclDto doGetFileAcl( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/acl\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Returns the requested file permissions in xml or json format\" ), @ResponseCode ( code = 500, condition = \"File failed to be retrieved. This could be caused by an invalid path, or the file does not exist.\" ) } ) public RepositoryFileAclDto doGetFileAcl( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetFileAcl( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetProperties", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/properties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the properties for a file.\" ), @ResponseCode ( code = 204, condition = \"Invalid file path.\" ) } ) public", "return": "RepositoryFileDto", "signature": "RepositoryFileDto doGetProperties( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/properties\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the properties for a file.\" ), @ResponseCode ( code = 204, condition = \"Invalid file path.\" ) } ) public RepositoryFileDto doGetProperties( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetProperties( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetContentCreator", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/creator\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the content creator for a file.\" ), @ResponseCode ( code = 403, condition = \"Failure to move the file due to path not found.\" ) } ) public", "return": "RepositoryFileDto", "signature": "RepositoryFileDto doGetContentCreator( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/creator\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @Facet ( name = \"Unsupported\" ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the content creator for a file.\" ), @ResponseCode ( code = 403, condition = \"Failure to move the file due to path not found.\" ) } ) public RepositoryFileDto doGetContentCreator( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetContentCreator( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetGeneratedContent", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/generatedContent\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of RepositoryFileDto objects.\" ), @ResponseCode ( code = 200, condition = \"Empty list of RepositoryFileDto objects.\" ) } ) public", "return": "List<RepositoryFileDto>", "signature": "List<RepositoryFileDto> doGetGeneratedContent( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/generatedContent\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of RepositoryFileDto objects.\" ), @ResponseCode ( code = 200, condition = \"Empty list of RepositoryFileDto objects.\" ) } ) public List<RepositoryFileDto> doGetGeneratedContent( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetGeneratedContent( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doGetGeneratedContentForUser", "parameters": "( @PathParam ( \"pathId\" ) String pathId,\n                                                               @QueryParam ( \"user\" ) String user )", "modifiers": "@GET @Path ( \"{pathId : .+}/generatedContentForUser\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of RepositoryFileDto objects.\" ), @ResponseCode ( code = 200, condition = \"Empty list of RepositoryFileDto objects.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public", "return": "List<RepositoryFileDto>", "signature": "List<RepositoryFileDto> doGetGeneratedContentForUser( @PathParam ( \"pathId\" ) String pathId,\n                                                               @QueryParam ( \"user\" ) String user )", "full_signature": "@GET @Path ( \"{pathId : .+}/generatedContentForUser\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of RepositoryFileDto objects.\" ), @ResponseCode ( code = 200, condition = \"Empty list of RepositoryFileDto objects.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public List<RepositoryFileDto> doGetGeneratedContentForUser( @PathParam ( \"pathId\" ) String pathId,\n                                                               @QueryParam ( \"user\" ) String user )", "class_method_signature": "FileResource.doGetGeneratedContentForUser( @PathParam ( \"pathId\" ) String pathId,\n                                                               @QueryParam ( \"user\" ) String user )", "testcase": false, "constructor": false}, {"identifier": "doGetRootTree", "parameters": "( @QueryParam ( \"depth\" ) Integer depth,\n                                              @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                              @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "modifiers": "@GET @Path ( \"/tree\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of files from root of the repository.\" ), @ResponseCode ( code = 404, condition = \"Invalid parameters.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public", "return": "RepositoryFileTreeDto", "signature": "RepositoryFileTreeDto doGetRootTree( @QueryParam ( \"depth\" ) Integer depth,\n                                              @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                              @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "full_signature": "@GET @Path ( \"/tree\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of files from root of the repository.\" ), @ResponseCode ( code = 404, condition = \"Invalid parameters.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public RepositoryFileTreeDto doGetRootTree( @QueryParam ( \"depth\" ) Integer depth,\n                                              @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                              @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "class_method_signature": "FileResource.doGetRootTree( @QueryParam ( \"depth\" ) Integer depth,\n                                              @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                              @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "testcase": false, "constructor": false}, {"identifier": "doGetRootChildren", "parameters": "( @QueryParam ( \"filter\" ) String filter,\n                                                    @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                    @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "modifiers": "@GET @Path ( \"/children\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of child files from root of the repository.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public", "return": "List<RepositoryFileDto>", "signature": "List<RepositoryFileDto> doGetRootChildren( @QueryParam ( \"filter\" ) String filter,\n                                                    @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                    @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "full_signature": "@GET @Path ( \"/children\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of child files from root of the repository.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public List<RepositoryFileDto> doGetRootChildren( @QueryParam ( \"filter\" ) String filter,\n                                                    @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                    @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "class_method_signature": "FileResource.doGetRootChildren( @QueryParam ( \"filter\" ) String filter,\n                                                    @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                    @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "testcase": false, "constructor": false}, {"identifier": "doGetTree", "parameters": "( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"depth\" ) Integer depth,\n                                          @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeSysDirs\" ) Boolean includeSystemFolders )", "modifiers": "@GET @Path ( \"{pathId : .+}/tree\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of files from root of the repository.\" ), @ResponseCode ( code = 404, condition = \"Invalid parameters.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public", "return": "RepositoryFileTreeDto", "signature": "RepositoryFileTreeDto doGetTree( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"depth\" ) Integer depth,\n                                          @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeSysDirs\" ) Boolean includeSystemFolders )", "full_signature": "@GET @Path ( \"{pathId : .+}/tree\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of files from root of the repository.\" ), @ResponseCode ( code = 404, condition = \"Invalid parameters.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public RepositoryFileTreeDto doGetTree( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"depth\" ) Integer depth,\n                                          @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeSysDirs\" ) Boolean includeSystemFolders )", "class_method_signature": "FileResource.doGetTree( @PathParam ( \"pathId\" ) String pathId, @QueryParam ( \"depth\" ) Integer depth,\n                                          @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls,\n                                          @DefaultValue ( \"false\" ) @QueryParam ( \"includeSysDirs\" ) Boolean includeSystemFolders )", "testcase": false, "constructor": false}, {"identifier": "doGetChildren", "parameters": "( @PathParam ( \"pathId\" ) String pathId,\n                                                @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "modifiers": "@GET @Path ( \"{pathId : .+}/children\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode( code = 200, condition = \"Successfully retrieved the list of child files from selected repository path of the repository.\" ), @ResponseCode( code = 500, condition = \"Server Error.\" ) } ) public", "return": "List<RepositoryFileDto>", "signature": "List<RepositoryFileDto> doGetChildren( @PathParam ( \"pathId\" ) String pathId,\n                                                @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "full_signature": "@GET @Path ( \"{pathId : .+}/children\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode( code = 200, condition = \"Successfully retrieved the list of child files from selected repository path of the repository.\" ), @ResponseCode( code = 500, condition = \"Server Error.\" ) } ) public List<RepositoryFileDto> doGetChildren( @PathParam ( \"pathId\" ) String pathId,\n                                                @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "class_method_signature": "FileResource.doGetChildren( @PathParam ( \"pathId\" ) String pathId,\n                                                @QueryParam ( \"filter\" ) String filter, @QueryParam ( \"showHidden\" ) Boolean showHidden,\n                                                @DefaultValue ( \"false\" ) @QueryParam ( \"includeAcls\" ) Boolean includeAcls )", "testcase": false, "constructor": false}, {"identifier": "doGetDeletedFiles", "parameters": "()", "modifiers": "@GET @Path ( \"/deleted\" ) @Produces ( {MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of files from trash folder of the repository.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public", "return": "List<RepositoryFileDto>", "signature": "List<RepositoryFileDto> doGetDeletedFiles()", "full_signature": "@GET @Path ( \"/deleted\" ) @Produces ( {MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved the list of files from trash folder of the repository.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public List<RepositoryFileDto> doGetDeletedFiles()", "class_method_signature": "FileResource.doGetDeletedFiles()", "testcase": false, "constructor": false}, {"identifier": "doGetMetadata", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/metadata\" ) @Produces ( { MediaType.APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved metadata.\" ), @ResponseCode( code = 403, condition = \"Invalid path.\" ), @ResponseCode( code = 500, condition = \"Server Error.\" ) } ) public", "return": "List<StringKeyStringValueDto>", "signature": "List<StringKeyStringValueDto> doGetMetadata( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/metadata\" ) @Produces ( { MediaType.APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved metadata.\" ), @ResponseCode( code = 403, condition = \"Invalid path.\" ), @ResponseCode( code = 500, condition = \"Server Error.\" ) } ) public List<StringKeyStringValueDto> doGetMetadata( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doGetMetadata( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doRename", "parameters": "( @PathParam( \"pathId\" ) String pathId, @QueryParam( \"newName\" ) String newName )", "modifiers": "@PUT @Path ( \"{pathId : .+}/rename\" ) @Consumes ( { MediaType.WILDCARD } ) @Produces ( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully renamed file.\" ), @ResponseCode( code = 403, condition = \"Forbidden.\" ), @ResponseCode( code = 404, condition = \"File not found.\" ) } ) public", "return": "Response", "signature": "Response doRename( @PathParam( \"pathId\" ) String pathId, @QueryParam( \"newName\" ) String newName )", "full_signature": "@PUT @Path ( \"{pathId : .+}/rename\" ) @Consumes ( { MediaType.WILDCARD } ) @Produces ( { MediaType.WILDCARD } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully renamed file.\" ), @ResponseCode( code = 403, condition = \"Forbidden.\" ), @ResponseCode( code = 404, condition = \"File not found.\" ) } ) public Response doRename( @PathParam( \"pathId\" ) String pathId, @QueryParam( \"newName\" ) String newName )", "class_method_signature": "FileResource.doRename( @PathParam( \"pathId\" ) String pathId, @QueryParam( \"newName\" ) String newName )", "testcase": false, "constructor": false}, {"identifier": "doSetMetadata", "parameters": "( @PathParam ( \"pathId\" ) String pathId, List<StringKeyStringValueDto> metadata )", "modifiers": "@PUT @Path ( \"{pathId : .+}/metadata\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved metadata.\" ), @ResponseCode ( code = 403, condition = \"Invalid path.\" ), @ResponseCode ( code = 400, condition = \"Invalid payload.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public", "return": "Response", "signature": "Response doSetMetadata( @PathParam ( \"pathId\" ) String pathId, List<StringKeyStringValueDto> metadata )", "full_signature": "@PUT @Path ( \"{pathId : .+}/metadata\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully retrieved metadata.\" ), @ResponseCode ( code = 403, condition = \"Invalid path.\" ), @ResponseCode ( code = 400, condition = \"Invalid payload.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public Response doSetMetadata( @PathParam ( \"pathId\" ) String pathId, List<StringKeyStringValueDto> metadata )", "class_method_signature": "FileResource.doSetMetadata( @PathParam ( \"pathId\" ) String pathId, List<StringKeyStringValueDto> metadata )", "testcase": false, "constructor": false}, {"identifier": "doCreateDirs", "parameters": "( @PathParam ( \"pathId\" ) String pathId )", "modifiers": "@PUT @Path ( \"{pathId : .+}/createDir\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully created folder.\" ), @ResponseCode ( code = 403, condition = \"Forbidden.\" ), @ResponseCode ( code = 409, condition = \"Path already exists.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public", "return": "Response", "signature": "Response doCreateDirs( @PathParam ( \"pathId\" ) String pathId )", "full_signature": "@PUT @Path ( \"{pathId : .+}/createDir\" ) @Consumes ( { MediaType.WILDCARD } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Successfully created folder.\" ), @ResponseCode ( code = 403, condition = \"Forbidden.\" ), @ResponseCode ( code = 409, condition = \"Path already exists.\" ), @ResponseCode ( code = 500, condition = \"Server Error.\" ) } ) public Response doCreateDirs( @PathParam ( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doCreateDirs( @PathParam ( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "doVersioningConfiguration", "parameters": "( @PathParam( \"pathId\" ) String pathId )", "modifiers": "@GET @Path ( \"{pathId : .+}/versioningConfiguration\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode( code = 200, condition = \"Successfully returns the versioning configuration\" ) } ) public", "return": "FileVersioningConfiguration", "signature": "FileVersioningConfiguration doVersioningConfiguration( @PathParam( \"pathId\" ) String pathId )", "full_signature": "@GET @Path ( \"{pathId : .+}/versioningConfiguration\" ) @Produces ( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON } ) @StatusCodes ( { @ResponseCode( code = 200, condition = \"Successfully returns the versioning configuration\" ) } ) public FileVersioningConfiguration doVersioningConfiguration( @PathParam( \"pathId\" ) String pathId )", "class_method_signature": "FileResource.doVersioningConfiguration( @PathParam( \"pathId\" ) String pathId )", "testcase": false, "constructor": false}, {"identifier": "canDownload", "parameters": "( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "modifiers": "@GET @Path ( \"/canDownload\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Returns a boolean response.\" ) } ) public", "return": "Response", "signature": "Response canDownload( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "full_signature": "@GET @Path ( \"/canDownload\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Returns a boolean response.\" ) } ) public Response canDownload( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "class_method_signature": "FileResource.canDownload( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "testcase": false, "constructor": false}, {"identifier": "canUpload", "parameters": "( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "modifiers": "@GET @Path ( \"/canUpload\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Returns a boolean response.\" ) } ) public", "return": "Response", "signature": "Response canUpload( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "full_signature": "@GET @Path ( \"/canUpload\" ) @Produces ( { MediaType.TEXT_PLAIN } ) @StatusCodes ( { @ResponseCode ( code = 200, condition = \"Returns a boolean response.\" ) } ) public Response canUpload( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "class_method_signature": "FileResource.canUpload( @QueryParam ( \"dirPath\" ) @DefaultValue( \"\" ) String dirPath )", "testcase": false, "constructor": false}, {"identifier": "isPathValid", "parameters": "( String path )", "modifiers": "protected", "return": "boolean", "signature": "boolean isPathValid( String path )", "full_signature": "protected boolean isPathValid( String path )", "class_method_signature": "FileResource.isPathValid( String path )", "testcase": false, "constructor": false}, {"identifier": "getWhitelist", "parameters": "()", "modifiers": "public", "return": "RepositoryDownloadWhitelist", "signature": "RepositoryDownloadWhitelist getWhitelist()", "full_signature": "public RepositoryDownloadWhitelist getWhitelist()", "class_method_signature": "FileResource.getWhitelist()", "testcase": false, "constructor": false}, {"identifier": "setWhitelist", "parameters": "( RepositoryDownloadWhitelist whitelist )", "modifiers": "public", "return": "void", "signature": "void setWhitelist( RepositoryDownloadWhitelist whitelist )", "full_signature": "public void setWhitelist( RepositoryDownloadWhitelist whitelist )", "class_method_signature": "FileResource.setWhitelist( RepositoryDownloadWhitelist whitelist )", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "()", "modifiers": "public static", "return": "IAuthorizationPolicy", "signature": "IAuthorizationPolicy getPolicy()", "full_signature": "public static IAuthorizationPolicy getPolicy()", "class_method_signature": "FileResource.getPolicy()", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "()", "modifiers": "public static", "return": "IUnifiedRepository", "signature": "IUnifiedRepository getRepository()", "full_signature": "public static IUnifiedRepository getRepository()", "class_method_signature": "FileResource.getRepository()", "testcase": false, "constructor": false}, {"identifier": "getRepoWs", "parameters": "()", "modifiers": "public static", "return": "DefaultUnifiedRepositoryWebService", "signature": "DefaultUnifiedRepositoryWebService getRepoWs()", "full_signature": "public static DefaultUnifiedRepositoryWebService getRepoWs()", "class_method_signature": "FileResource.getRepoWs()", "testcase": false, "constructor": false}, {"identifier": "setConverterHandler", "parameters": "( IRepositoryContentConverterHandler converterHandler )", "modifiers": "public", "return": "void", "signature": "void setConverterHandler( IRepositoryContentConverterHandler converterHandler )", "full_signature": "public void setConverterHandler( IRepositoryContentConverterHandler converterHandler )", "class_method_signature": "FileResource.setConverterHandler( IRepositoryContentConverterHandler converterHandler )", "testcase": false, "constructor": false}, {"identifier": "setMimeResolver", "parameters": "( IPlatformMimeResolver mimeResolver )", "modifiers": "public", "return": "void", "signature": "void setMimeResolver( IPlatformMimeResolver mimeResolver )", "full_signature": "public void setMimeResolver( IPlatformMimeResolver mimeResolver )", "class_method_signature": "FileResource.setMimeResolver( IPlatformMimeResolver mimeResolver )", "testcase": false, "constructor": false}, {"identifier": "buildOkResponse", "parameters": "()", "modifiers": "protected", "return": "Response", "signature": "Response buildOkResponse()", "full_signature": "protected Response buildOkResponse()", "class_method_signature": "FileResource.buildOkResponse()", "testcase": false, "constructor": false}, {"identifier": "buildOkResponse", "parameters": "( String msg )", "modifiers": "protected", "return": "Response", "signature": "Response buildOkResponse( String msg )", "full_signature": "protected Response buildOkResponse( String msg )", "class_method_signature": "FileResource.buildOkResponse( String msg )", "testcase": false, "constructor": false}, {"identifier": "buildPlainTextOkResponse", "parameters": "( String msg )", "modifiers": "protected", "return": "Response", "signature": "Response buildPlainTextOkResponse( String msg )", "full_signature": "protected Response buildPlainTextOkResponse( String msg )", "class_method_signature": "FileResource.buildPlainTextOkResponse( String msg )", "testcase": false, "constructor": false}, {"identifier": "buildStatusResponse", "parameters": "( Response.Status status )", "modifiers": "protected", "return": "Response", "signature": "Response buildStatusResponse( Response.Status status )", "full_signature": "protected Response buildStatusResponse( Response.Status status )", "class_method_signature": "FileResource.buildStatusResponse( Response.Status status )", "testcase": false, "constructor": false}, {"identifier": "buildServerErrorResponse", "parameters": "( Throwable t )", "modifiers": "protected", "return": "Response", "signature": "Response buildServerErrorResponse( Throwable t )", "full_signature": "protected Response buildServerErrorResponse( Throwable t )", "class_method_signature": "FileResource.buildServerErrorResponse( Throwable t )", "testcase": false, "constructor": false}, {"identifier": "buildServerErrorResponse", "parameters": "( String msg )", "modifiers": "protected", "return": "Response", "signature": "Response buildServerErrorResponse( String msg )", "full_signature": "protected Response buildServerErrorResponse( String msg )", "class_method_signature": "FileResource.buildServerErrorResponse( String msg )", "testcase": false, "constructor": false}, {"identifier": "buildSafeHtmlServerErrorResponse", "parameters": "( Exception e )", "modifiers": "protected", "return": "Response", "signature": "Response buildSafeHtmlServerErrorResponse( Exception e )", "full_signature": "protected Response buildSafeHtmlServerErrorResponse( Exception e )", "class_method_signature": "FileResource.buildSafeHtmlServerErrorResponse( Exception e )", "testcase": false, "constructor": false}, {"identifier": "buildOkResponse", "parameters": "( FileService.RepositoryFileToStreamWrapper wrapper )", "modifiers": "protected", "return": "Response", "signature": "Response buildOkResponse( FileService.RepositoryFileToStreamWrapper wrapper )", "full_signature": "protected Response buildOkResponse( FileService.RepositoryFileToStreamWrapper wrapper )", "class_method_signature": "FileResource.buildOkResponse( FileService.RepositoryFileToStreamWrapper wrapper )", "testcase": false, "constructor": false}, {"identifier": "buildZipOkResponse", "parameters": "( FileService.DownloadFileWrapper wrapper )", "modifiers": "protected", "return": "Response", "signature": "Response buildZipOkResponse( FileService.DownloadFileWrapper wrapper )", "full_signature": "protected Response buildZipOkResponse( FileService.DownloadFileWrapper wrapper )", "class_method_signature": "FileResource.buildZipOkResponse( FileService.DownloadFileWrapper wrapper )", "testcase": false, "constructor": false}, {"identifier": "buildOkResponse", "parameters": "( Object o, String s )", "modifiers": "protected", "return": "Response", "signature": "Response buildOkResponse( Object o, String s )", "full_signature": "protected Response buildOkResponse( Object o, String s )", "class_method_signature": "FileResource.buildOkResponse( Object o, String s )", "testcase": false, "constructor": false}, {"identifier": "getExporter", "parameters": "()", "modifiers": "protected", "return": "Exporter", "signature": "Exporter getExporter()", "full_signature": "protected Exporter getExporter()", "class_method_signature": "FileResource.getExporter()", "testcase": false, "constructor": false}, {"identifier": "getFileInputStream", "parameters": "( File file )", "modifiers": "protected", "return": "FileInputStream", "signature": "FileInputStream getFileInputStream( File file )", "full_signature": "protected FileInputStream getFileInputStream( File file )", "class_method_signature": "FileResource.getFileInputStream( File file )", "testcase": false, "constructor": false}, {"identifier": "getStreamingOutput", "parameters": "( final InputStream is )", "modifiers": "protected", "return": "StreamingOutput", "signature": "StreamingOutput getStreamingOutput( final InputStream is )", "full_signature": "protected StreamingOutput getStreamingOutput( final InputStream is )", "class_method_signature": "FileResource.getStreamingOutput( final InputStream is )", "testcase": false, "constructor": false}, {"identifier": "hasParameterUi", "parameters": "( RepositoryFile repositoryFile )", "modifiers": "protected", "return": "boolean", "signature": "boolean hasParameterUi( RepositoryFile repositoryFile )", "full_signature": "protected boolean hasParameterUi( RepositoryFile repositoryFile )", "class_method_signature": "FileResource.hasParameterUi( RepositoryFile repositoryFile )", "testcase": false, "constructor": false}, {"identifier": "getContentGenerator", "parameters": "( RepositoryFile repositoryFile )", "modifiers": "protected", "return": "IContentGenerator", "signature": "IContentGenerator getContentGenerator( RepositoryFile repositoryFile )", "full_signature": "protected IContentGenerator getContentGenerator( RepositoryFile repositoryFile )", "class_method_signature": "FileResource.getContentGenerator( RepositoryFile repositoryFile )", "testcase": false, "constructor": false}, {"identifier": "getSimpleParameterProvider", "parameters": "()", "modifiers": "protected", "return": "SimpleParameterProvider", "signature": "SimpleParameterProvider getSimpleParameterProvider()", "full_signature": "protected SimpleParameterProvider getSimpleParameterProvider()", "class_method_signature": "FileResource.getSimpleParameterProvider()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "( String s )", "modifiers": "protected", "return": "String", "signature": "String encode( String s )", "full_signature": "protected String encode( String s )", "class_method_signature": "FileResource.encode( String s )", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "protected", "return": "IPentahoSession", "signature": "IPentahoSession getSession()", "full_signature": "protected IPentahoSession getSession()", "class_method_signature": "FileResource.getSession()", "testcase": false, "constructor": false}, {"identifier": "getByteArrayOutputStream", "parameters": "()", "modifiers": "protected", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream getByteArrayOutputStream()", "full_signature": "protected ByteArrayOutputStream getByteArrayOutputStream()", "class_method_signature": "FileResource.getByteArrayOutputStream()", "testcase": false, "constructor": false}, {"identifier": "parseText", "parameters": "( String text )", "modifiers": "protected", "return": "Document", "signature": "Document parseText( String text )", "full_signature": "protected Document parseText( String text )", "class_method_signature": "FileResource.parseText( String text )", "testcase": false, "constructor": false}, {"identifier": "getMessagesInstance", "parameters": "()", "modifiers": "protected", "return": "Messages", "signature": "Messages getMessagesInstance()", "full_signature": "protected Messages getMessagesInstance()", "class_method_signature": "FileResource.getMessagesInstance()", "testcase": false, "constructor": false}, {"identifier": "checkCorrectExtension", "parameters": "( String fileName )", "modifiers": "private", "return": "void", "signature": "void checkCorrectExtension( String fileName )", "full_signature": "private void checkCorrectExtension( String fileName )", "class_method_signature": "FileResource.checkCorrectExtension( String fileName )", "testcase": false, "constructor": false}, {"identifier": "getUserHomeFolder", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getUserHomeFolder()", "full_signature": "protected String getUserHomeFolder()", "class_method_signature": "FileResource.getUserHomeFolder()", "testcase": false, "constructor": false}, {"identifier": "validateUsersAndRoles", "parameters": "( RepositoryFileAclDto acl )", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean validateUsersAndRoles( RepositoryFileAclDto acl )", "full_signature": "@VisibleForTesting boolean validateUsersAndRoles( RepositoryFileAclDto acl )", "class_method_signature": "FileResource.validateUsersAndRoles( RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "validateSecurityPrincipal", "parameters": "( String principal )", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean validateSecurityPrincipal( String principal )", "full_signature": "@VisibleForTesting boolean validateSecurityPrincipal( String principal )", "class_method_signature": "FileResource.validateSecurityPrincipal( String principal )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/http/api/resources/FileResource.java"}, "focal_method": {"identifier": "parseText", "parameters": "( String text )", "modifiers": "protected", "return": "Document", "body": "protected Document parseText( String text ) throws DocumentException {\n    SAXReader reader = XMLParserFactoryProducer.getSAXReader( null );\n    StringReader stringReader = new StringReader( text );\n    return reader.read( stringReader );\n  }", "signature": "Document parseText( String text )", "full_signature": "protected Document parseText( String text )", "class_method_signature": "FileResource.parseText( String text )", "testcase": false, "constructor": false, "invocations": ["getSAXReader", "read"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}