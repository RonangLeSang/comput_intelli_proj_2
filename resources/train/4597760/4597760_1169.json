{"test_class": {"identifier": "JobParamsAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "scheduler/src/test/java/org/pentaho/platform/api/scheduler2/JobParamsAdapterTest.java"}, "test_case": {"identifier": "testMarshalMultiValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMarshalMultiValue() throws Exception {\n    JobParamsAdapter adapter = new JobParamsAdapter();\n\n    Map<String, Serializable> dataMap = new HashMap<String, Serializable>();\n    dataMap.put( \"a\", \"A\" );\n    dataMap.put( \"bb\", \"[B]\" );\n    ArrayList<String> cValue = castAsArrayList( new String[] { \"[C].[CCC]\", \"[D].[DDD,ddd]\" } );\n    dataMap.put( \"ccc\", cValue );\n    ArrayList<String> eValue = castAsArrayList( new String[] { null, \"FFFFFF\" } );\n    dataMap.put( \"eeeee\", eValue );\n    JobParams expectedJobParams = createJobParams( new JobParam[]{\n      createJobParam( \"a\", \"A\" ),\n      createJobParam( \"bb\", \"[B]\" ),\n      createJobParam( \"ccc\", \"[C].[CCC]\" ),\n      createJobParam( \"ccc\", \"[D].[DDD,ddd]\" ),\n      createJobParam( \"eeeee\", \"FFFFFF\" )\n    } );\n\n    final JobParams resultJobParams = adapter.marshal( dataMap );\n\n    assertNotNull( resultJobParams );\n    assertNotNull( resultJobParams.jobParams );\n    Arrays.sort( resultJobParams.jobParams, new JobParamWholeComparator() );\n    assertJobParamArrayEquals( \"\", expectedJobParams.jobParams, resultJobParams.jobParams );\n  }", "signature": "void testMarshalMultiValue()", "full_signature": "@Test public void testMarshalMultiValue()", "class_method_signature": "JobParamsAdapterTest.testMarshalMultiValue()", "testcase": true, "constructor": false, "invocations": ["put", "put", "castAsArrayList", "put", "castAsArrayList", "put", "createJobParams", "createJobParam", "createJobParam", "createJobParam", "createJobParam", "createJobParam", "marshal", "assertNotNull", "assertNotNull", "sort", "assertJobParamArrayEquals"]}, "focal_class": {"identifier": "JobParamsAdapter", "superclass": "extends XmlAdapter<JobParams, Map<String, Serializable>>", "interfaces": "", "fields": [{"original_string": "private static final String VARIABLES = \"variables\";", "modifier": "private static final", "type": "String", "declarator": "VARIABLES = \"variables\"", "var_name": "VARIABLES"}, {"original_string": "private static final String PARAMETERS = \"parameters\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETERS = \"parameters\"", "var_name": "PARAMETERS"}], "methods": [{"identifier": "marshal", "parameters": "( Map<String, Serializable> v )", "modifiers": "public", "return": "JobParams", "signature": "JobParams marshal( Map<String, Serializable> v )", "full_signature": "public JobParams marshal( Map<String, Serializable> v )", "class_method_signature": "JobParamsAdapter.marshal( Map<String, Serializable> v )", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "( JobParams v )", "modifiers": "public", "return": "Map<String, Serializable>", "signature": "Map<String, Serializable> unmarshal( JobParams v )", "full_signature": "public Map<String, Serializable> unmarshal( JobParams v )", "class_method_signature": "JobParamsAdapter.unmarshal( JobParams v )", "testcase": false, "constructor": false}], "file": "scheduler/src/main/java/org/pentaho/platform/api/scheduler2/JobParamsAdapter.java"}, "focal_method": {"identifier": "marshal", "parameters": "( Map<String, Serializable> v )", "modifiers": "public", "return": "JobParams", "body": "public JobParams marshal( Map<String, Serializable> v ) throws Exception {\n    Object variables = v.get( VARIABLES );\n    Object parameters = v.get( PARAMETERS );\n    if ( parameters != null && parameters instanceof Map\n            && variables != null && variables instanceof Map ) {\n      Map<String, String> paramMap = (Map) parameters;\n      Map<String, String> variableMap = (Map) variables;\n      if ( !paramMap.isEmpty() && !variableMap.isEmpty() ) {\n        for ( Map.Entry<String, String> paramEntry : paramMap.entrySet() ) {\n          if ( variableMap.containsKey( paramEntry.getKey() ) && paramEntry.getValue() != null ) {\n            variableMap.remove( paramEntry.getKey() );\n          }\n        }\n      }\n    }\n\n    ArrayList<JobParam> params = new ArrayList<JobParam>();\n    for ( Map.Entry<String, Serializable> entry : v.entrySet() ) {\n      if ( entry != null && entry.getKey() != null && entry.getValue() != null ) {\n        if ( entry.getValue() instanceof Collection ) {\n          for ( Object iValue : (Collection<?>) entry.getValue() ) {\n            if ( iValue != null ) {\n              JobParam jobParam = new JobParam();\n              jobParam.name = entry.getKey();\n              jobParam.value = iValue.toString();\n              params.add( jobParam );\n            }\n          }\n        } else if ( entry.getValue() instanceof Map ) {\n          ( (Map<String, Serializable>) entry.getValue() ).forEach( ( key, value ) -> {\n            if ( value != null ) {\n              JobParam jobParam = new JobParam();\n              jobParam.name = key;\n              jobParam.value = value.toString();\n              params.add( jobParam );\n            }\n          } );\n        } else {\n          JobParam jobParam = new JobParam();\n          jobParam.name = entry.getKey();\n          jobParam.value = entry.getValue().toString();\n          params.add( jobParam );\n        }\n      }\n    }\n    JobParams jobParams = new JobParams();\n    jobParams.jobParams = params.toArray( new JobParam[0] );\n    return jobParams;\n  }", "signature": "JobParams marshal( Map<String, Serializable> v )", "full_signature": "public JobParams marshal( Map<String, Serializable> v )", "class_method_signature": "JobParamsAdapter.marshal( Map<String, Serializable> v )", "testcase": false, "constructor": false, "invocations": ["get", "get", "isEmpty", "isEmpty", "entrySet", "containsKey", "getKey", "getValue", "remove", "getKey", "entrySet", "getKey", "getValue", "getValue", "getValue", "getKey", "toString", "add", "getValue", "forEach", "getValue", "toString", "add", "getKey", "toString", "getValue", "add", "toArray"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}