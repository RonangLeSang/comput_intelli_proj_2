{"test_class": {"identifier": "WebUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpServletRequest mockRequest;", "modifier": "private", "type": "HttpServletRequest", "declarator": "mockRequest", "var_name": "mockRequest"}, {"original_string": "private HttpServletResponse mockResponse;", "modifier": "private", "type": "HttpServletResponse", "declarator": "mockResponse", "var_name": "mockResponse"}], "file": "extensions/src/test/java/org/pentaho/platform/web/WebUtilTest.java"}, "test_case": {"identifier": "testParseXmlCsrfInvalidType", "parameters": "()", "modifiers": "@Test( expected = IllegalArgumentException.class ) public", "return": "void", "body": "@Test( expected = IllegalArgumentException.class )\n  public void testParseXmlCsrfInvalidType() {\n\n    Element csrfRequestMatcherElem = mock( Element.class );\n    when( csrfRequestMatcherElem.attributeValue( eq( \"type\" ), anyString() ) ).thenReturn( \"foo\" );\n    when( csrfRequestMatcherElem.attributeValue( eq( \"pattern\" ), anyString() ) ).thenReturn( \"abc\" );\n    when( csrfRequestMatcherElem.attributeValue( eq( \"methods\" ), anyString() ) ).thenReturn( \"GET,POST\" );\n\n    Element csrfProtectionDefinitionElem = mock( Element.class );\n    when( csrfProtectionDefinitionElem.selectNodes( eq( \"request-matcher\" ) ) )\n        .thenReturn( Collections.singletonList( csrfRequestMatcherElem ) );\n\n    WebUtil.parseXmlCsrfProtectionDefinition( csrfProtectionDefinitionElem );\n  }", "signature": "void testParseXmlCsrfInvalidType()", "full_signature": "@Test( expected = IllegalArgumentException.class ) public void testParseXmlCsrfInvalidType()", "class_method_signature": "WebUtilTest.testParseXmlCsrfInvalidType()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "attributeValue", "eq", "anyString", "thenReturn", "when", "attributeValue", "eq", "anyString", "thenReturn", "when", "attributeValue", "eq", "anyString", "mock", "thenReturn", "when", "selectNodes", "eq", "singletonList", "parseXmlCsrfProtectionDefinition"]}, "focal_class": {"identifier": "WebUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String ORIGIN_HEADER = \"origin\";", "modifier": "static final", "type": "String", "declarator": "ORIGIN_HEADER = \"origin\"", "var_name": "ORIGIN_HEADER"}, {"original_string": "static final String CORS_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\";", "modifier": "static final", "type": "String", "declarator": "CORS_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\"", "var_name": "CORS_ALLOW_ORIGIN_HEADER"}, {"original_string": "static final String CORS_ALLOW_CREDENTIALS_HEADER = \"Access-Control-Allow-Credentials\";", "modifier": "static final", "type": "String", "declarator": "CORS_ALLOW_CREDENTIALS_HEADER = \"Access-Control-Allow-Credentials\"", "var_name": "CORS_ALLOW_CREDENTIALS_HEADER"}, {"original_string": "public static final String CORS_EXPOSE_HEADERS_HEADER = \"Access-Control-Expose-Headers\";", "modifier": "public static final", "type": "String", "declarator": "CORS_EXPOSE_HEADERS_HEADER = \"Access-Control-Expose-Headers\"", "var_name": "CORS_EXPOSE_HEADERS_HEADER"}], "methods": [{"identifier": "setCorsResponseHeaders", "parameters": "( HttpServletRequest request, HttpServletResponse response )", "modifiers": "public static", "return": "void", "signature": "void setCorsResponseHeaders( HttpServletRequest request, HttpServletResponse response )", "full_signature": "public static void setCorsResponseHeaders( HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "WebUtil.setCorsResponseHeaders( HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "setCorsResponseHeaders", "parameters": "( HttpServletRequest request, HttpServletResponse response,\n                                             Map<String, List<String>> corsHeadersConfiguration )", "modifiers": "public static", "return": "void", "signature": "void setCorsResponseHeaders( HttpServletRequest request, HttpServletResponse response,\n                                             Map<String, List<String>> corsHeadersConfiguration )", "full_signature": "public static void setCorsResponseHeaders( HttpServletRequest request, HttpServletResponse response,\n                                             Map<String, List<String>> corsHeadersConfiguration )", "class_method_signature": "WebUtil.setCorsResponseHeaders( HttpServletRequest request, HttpServletResponse response,\n                                             Map<String, List<String>> corsHeadersConfiguration )", "testcase": false, "constructor": false}, {"identifier": "isCorsRequestsAllowed", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean isCorsRequestsAllowed()", "full_signature": "private static boolean isCorsRequestsAllowed()", "class_method_signature": "WebUtil.isCorsRequestsAllowed()", "testcase": false, "constructor": false}, {"identifier": "getCorsRequestsAllowedDomains", "parameters": "()", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getCorsRequestsAllowedDomains()", "full_signature": "private static List<String> getCorsRequestsAllowedDomains()", "class_method_signature": "WebUtil.getCorsRequestsAllowedDomains()", "testcase": false, "constructor": false}, {"identifier": "isCorsRequestOriginAllowed", "parameters": "( String domain )", "modifiers": "private static", "return": "boolean", "signature": "boolean isCorsRequestOriginAllowed( String domain )", "full_signature": "private static boolean isCorsRequestOriginAllowed( String domain )", "class_method_signature": "WebUtil.isCorsRequestOriginAllowed( String domain )", "testcase": false, "constructor": false}, {"identifier": "getCorsRequestsAllowedSystemProperty", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getCorsRequestsAllowedSystemProperty()", "full_signature": "static String getCorsRequestsAllowedSystemProperty()", "class_method_signature": "WebUtil.getCorsRequestsAllowedSystemProperty()", "testcase": false, "constructor": false}, {"identifier": "getCorsAllowedDomainsSystemProperty", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getCorsAllowedDomainsSystemProperty()", "full_signature": "static String getCorsAllowedDomainsSystemProperty()", "class_method_signature": "WebUtil.getCorsAllowedDomainsSystemProperty()", "testcase": false, "constructor": false}, {"identifier": "parseXmlCsrfProtectionDefinition", "parameters": "( Element csrfProtectionElem )", "modifiers": "public static", "return": "CsrfProtectionDefinition", "signature": "CsrfProtectionDefinition parseXmlCsrfProtectionDefinition( Element csrfProtectionElem )", "full_signature": "public static CsrfProtectionDefinition parseXmlCsrfProtectionDefinition( Element csrfProtectionElem )", "class_method_signature": "WebUtil.parseXmlCsrfProtectionDefinition( Element csrfProtectionElem )", "testcase": false, "constructor": false}, {"identifier": "getCsrfRequestMatcher", "parameters": "( Element csrfRequestMatcherElem )", "modifiers": "private static", "return": "RequestMatcherDefinition", "signature": "RequestMatcherDefinition getCsrfRequestMatcher( Element csrfRequestMatcherElem )", "full_signature": "private static RequestMatcherDefinition getCsrfRequestMatcher( Element csrfRequestMatcherElem )", "class_method_signature": "WebUtil.getCsrfRequestMatcher( Element csrfRequestMatcherElem )", "testcase": false, "constructor": false}, {"identifier": "buildCsrfRequestMatcher", "parameters": "( Collection<CsrfProtectionDefinition> csrfProtectionDefinitions )", "modifiers": "public static", "return": "RequestMatcher", "signature": "RequestMatcher buildCsrfRequestMatcher( Collection<CsrfProtectionDefinition> csrfProtectionDefinitions )", "full_signature": "public static RequestMatcher buildCsrfRequestMatcher( Collection<CsrfProtectionDefinition> csrfProtectionDefinitions )", "class_method_signature": "WebUtil.buildCsrfRequestMatcher( Collection<CsrfProtectionDefinition> csrfProtectionDefinitions )", "testcase": false, "constructor": false}, {"identifier": "collectRequestMatchers", "parameters": "( Collection<RequestMatcher> requestMatchers,\n                                              CsrfProtectionDefinition csrfProtectionDefinition )", "modifiers": "private static", "return": "void", "signature": "void collectRequestMatchers( Collection<RequestMatcher> requestMatchers,\n                                              CsrfProtectionDefinition csrfProtectionDefinition )", "full_signature": "private static void collectRequestMatchers( Collection<RequestMatcher> requestMatchers,\n                                              CsrfProtectionDefinition csrfProtectionDefinition )", "class_method_signature": "WebUtil.collectRequestMatchers( Collection<RequestMatcher> requestMatchers,\n                                              CsrfProtectionDefinition csrfProtectionDefinition )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/web/WebUtil.java"}, "focal_method": {"identifier": "parseXmlCsrfProtectionDefinition", "parameters": "( Element csrfProtectionElem )", "modifiers": "public static", "return": "CsrfProtectionDefinition", "body": "public static CsrfProtectionDefinition parseXmlCsrfProtectionDefinition( Element csrfProtectionElem ) {\n    /* Example XML\n     * <csrf-protection>\n     *   <request-matcher type=\"regex\" methods=\"GET,POST\" pattern=\"\" />\n     *   ...\n     * </csrf-protection>\n     */\n    List<RequestMatcherDefinition> requestMatchers = new ArrayList<>();\n\n    for ( Node csrfRequestMatcherNode : csrfProtectionElem.selectNodes( \"request-matcher\" ) ) {\n      requestMatchers.add( getCsrfRequestMatcher( (Element) csrfRequestMatcherNode ) );\n    }\n\n    if ( requestMatchers.size() == 0 ) {\n      return null;\n    }\n\n    CsrfProtectionDefinition protectionDefinition = new CsrfProtectionDefinition();\n    protectionDefinition.setProtectedRequestMatchers( requestMatchers );\n    return protectionDefinition;\n  }", "signature": "CsrfProtectionDefinition parseXmlCsrfProtectionDefinition( Element csrfProtectionElem )", "full_signature": "public static CsrfProtectionDefinition parseXmlCsrfProtectionDefinition( Element csrfProtectionElem )", "class_method_signature": "WebUtil.parseXmlCsrfProtectionDefinition( Element csrfProtectionElem )", "testcase": false, "constructor": false, "invocations": ["selectNodes", "add", "getCsrfRequestMatcher", "size", "setProtectedRequestMatchers"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}