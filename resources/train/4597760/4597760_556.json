{"test_class": {"identifier": "LocalActionInvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LocalActionInvoker defaultActionInvoker;", "modifier": "private", "type": "LocalActionInvoker", "declarator": "defaultActionInvoker", "var_name": "defaultActionInvoker"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/action/LocalActionInvokerTest.java"}, "test_case": {"identifier": "getStreamProviderNullTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getStreamProviderNullTest() {\n    Map<String, Serializable> paramMap = new HashMap<>();\n    paramMap.put( ActionUtil.INVOKER_STREAMPROVIDER, null );\n    IBackgroundExecutionStreamProvider iBackgroundExecutionStreamProvider = defaultActionInvoker.getStreamProvider( paramMap );\n    Assert.assertNull( iBackgroundExecutionStreamProvider );\n  }", "signature": "void getStreamProviderNullTest()", "full_signature": "@Test public void getStreamProviderNullTest()", "class_method_signature": "LocalActionInvokerTest.getStreamProviderNullTest()", "testcase": true, "constructor": false, "invocations": ["put", "getStreamProvider", "assertNull"]}, "focal_class": {"identifier": "LocalActionInvoker", "superclass": "extends DefaultActionInvoker", "interfaces": "", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog( org.pentaho.platform.plugin.action.LocalActionInvoker.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( org.pentaho.platform.plugin.action.LocalActionInvoker.class )", "var_name": "logger"}], "methods": [{"identifier": "getStreamProvider", "parameters": "( final Map<String, Serializable> params )", "modifiers": "@Override protected", "return": "IBackgroundExecutionStreamProvider", "signature": "IBackgroundExecutionStreamProvider getStreamProvider( final Map<String, Serializable> params )", "full_signature": "@Override protected IBackgroundExecutionStreamProvider getStreamProvider( final Map<String, Serializable> params )", "class_method_signature": "LocalActionInvoker.getStreamProvider( final Map<String, Serializable> params )", "testcase": false, "constructor": false}, {"identifier": "invokeAction", "parameters": "( final IAction actionBean,\n                                           final String actionUser,\n                                           final Map<String, Serializable> params )", "modifiers": "@Override public", "return": "IActionInvokeStatus", "signature": "IActionInvokeStatus invokeAction( final IAction actionBean,\n                                           final String actionUser,\n                                           final Map<String, Serializable> params )", "full_signature": "@Override public IActionInvokeStatus invokeAction( final IAction actionBean,\n                                           final String actionUser,\n                                           final Map<String, Serializable> params )", "class_method_signature": "LocalActionInvoker.invokeAction( final IAction actionBean,\n                                           final String actionUser,\n                                           final Map<String, Serializable> params )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/action/LocalActionInvoker.java"}, "focal_method": {"identifier": "getStreamProvider", "parameters": "( final Map<String, Serializable> params )", "modifiers": "@Override protected", "return": "IBackgroundExecutionStreamProvider", "body": "@Override\n  protected IBackgroundExecutionStreamProvider getStreamProvider( final Map<String, Serializable> params ) {\n\n    if ( params == null ) {\n      logger.warn( Messages.getInstance().getMapNullCantReturnSp() );\n      return null;\n    }\n    IBackgroundExecutionStreamProvider streamProvider = null;\n\n    final Object objsp = params.get( ActionUtil.INVOKER_STREAMPROVIDER );\n    if ( objsp != null && IBackgroundExecutionStreamProvider.class.isAssignableFrom( objsp.getClass() ) ) {\n      streamProvider = (IBackgroundExecutionStreamProvider) objsp;\n      if ( streamProvider instanceof RepositoryFileStreamProvider ) {\n        params.put( ActionUtil.INVOKER_STREAMPROVIDER_INPUT_FILE, ( (RepositoryFileStreamProvider) streamProvider )\n          .getInputFilePath() );\n        params.put( ActionUtil.INVOKER_STREAMPROVIDER_OUTPUT_FILE_PATTERN, ( (RepositoryFileStreamProvider)\n          streamProvider ).getOutputFilePath() );\n        params.put( ActionUtil.INVOKER_STREAMPROVIDER_UNIQUE_FILE_NAME, ( (RepositoryFileStreamProvider)\n          streamProvider ).autoCreateUniqueFilename() );\n      }\n    } else {\n      final String inputFile = params.get( ActionUtil.INVOKER_STREAMPROVIDER_INPUT_FILE ) == null ? null : params.get(\n        ActionUtil.INVOKER_STREAMPROVIDER_INPUT_FILE ).toString();\n      final String outputFilePattern = params.get( ActionUtil.INVOKER_STREAMPROVIDER_OUTPUT_FILE_PATTERN ) == null\n        ? null : params.get( ActionUtil.INVOKER_STREAMPROVIDER_OUTPUT_FILE_PATTERN ).toString();\n      boolean hasInputFile = !StringUtils.isEmpty( inputFile );\n      boolean hasOutputPattern = !StringUtils.isEmpty( outputFilePattern );\n      if ( hasInputFile && hasOutputPattern ) {\n        boolean autoCreateUniqueFilename = params.get( ActionUtil.INVOKER_STREAMPROVIDER_UNIQUE_FILE_NAME ) == null\n          || params.get( ActionUtil.INVOKER_STREAMPROVIDER_UNIQUE_FILE_NAME ).toString().equalsIgnoreCase( \"true\" );\n        streamProvider = new RepositoryFileStreamProvider( inputFile, outputFilePattern, autoCreateUniqueFilename );\n        // put in the map for future lookup\n        params.put( ActionUtil.INVOKER_STREAMPROVIDER, streamProvider );\n      } else {\n        if ( logger.isWarnEnabled() ) {\n          logger.warn( Messages.getInstance().getMissingParamsCantReturnSp( String.format( \"%s, %s\",\n            ActionUtil.INVOKER_STREAMPROVIDER_INPUT_FILE, ActionUtil.INVOKER_STREAMPROVIDER_OUTPUT_FILE_PATTERN ),\n            params ) ); //$NON-NLS-1$\n        }\n      }\n    }\n    return streamProvider;\n  }", "signature": "IBackgroundExecutionStreamProvider getStreamProvider( final Map<String, Serializable> params )", "full_signature": "@Override protected IBackgroundExecutionStreamProvider getStreamProvider( final Map<String, Serializable> params )", "class_method_signature": "LocalActionInvoker.getStreamProvider( final Map<String, Serializable> params )", "testcase": false, "constructor": false, "invocations": ["warn", "getMapNullCantReturnSp", "getInstance", "get", "isAssignableFrom", "getClass", "put", "getInputFilePath", "put", "getOutputFilePath", "put", "autoCreateUniqueFilename", "get", "toString", "get", "get", "toString", "get", "isEmpty", "isEmpty", "get", "equalsIgnoreCase", "toString", "get", "put", "isWarnEnabled", "warn", "getMissingParamsCantReturnSp", "getInstance", "format"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}