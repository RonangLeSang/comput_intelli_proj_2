{"test_class": {"identifier": "ScriptableConditionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESULT_ELEMENT = \"resultElement\";", "modifier": "private static final", "type": "String", "declarator": "RESULT_ELEMENT = \"resultElement\"", "var_name": "RESULT_ELEMENT"}, {"original_string": "private static final String RESULT_ELEMENT_SCRIPT = \"resultElement;\";", "modifier": "private static final", "type": "String", "declarator": "RESULT_ELEMENT_SCRIPT = \"resultElement;\"", "var_name": "RESULT_ELEMENT_SCRIPT"}, {"original_string": "private static final Log logger = mock( Log.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = mock( Log.class )", "var_name": "logger"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/condition/scriptable/ScriptableConditionTest.java"}, "test_case": {"identifier": "shouldExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldExecute() throws Exception {\n    ScriptableCondition scriptableCondition = new ScriptableCondition();\n    scriptableCondition.setScript( \"var result = 'true'; result;\" );\n    scriptableCondition.shouldExecute( Collections.EMPTY_MAP, logger );\n  }", "signature": "void shouldExecute()", "full_signature": "@Test public void shouldExecute()", "class_method_signature": "ScriptableConditionTest.shouldExecute()", "testcase": true, "constructor": false, "invocations": ["setScript", "shouldExecute"]}, "focal_class": {"identifier": "ScriptableCondition", "superclass": "", "interfaces": "implements IConditionalExecution", "fields": [{"original_string": "private String script;", "modifier": "private", "type": "String", "declarator": "script", "var_name": "script"}, {"original_string": "private String scriptLanguage = \"JavaScript\";", "modifier": "private", "type": "String", "declarator": "scriptLanguage = \"JavaScript\"", "var_name": "scriptLanguage"}, {"original_string": "private boolean defaultResult = true;", "modifier": "private", "type": "boolean", "declarator": "defaultResult = true", "var_name": "defaultResult"}, {"original_string": "private boolean ignoreInputNamesWithMinus = false;", "modifier": "private", "type": "boolean", "declarator": "ignoreInputNamesWithMinus = false", "var_name": "ignoreInputNamesWithMinus"}, {"original_string": "private boolean listAvailableEngines = false;", "modifier": "private", "type": "boolean", "declarator": "listAvailableEngines = false", "var_name": "listAvailableEngines"}], "methods": [{"identifier": "ScriptableCondition", "parameters": "()", "modifiers": "public", "return": "", "signature": " ScriptableCondition()", "full_signature": "public  ScriptableCondition()", "class_method_signature": "ScriptableCondition.ScriptableCondition()", "testcase": false, "constructor": true}, {"identifier": "getScript", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScript()", "full_signature": "public String getScript()", "class_method_signature": "ScriptableCondition.getScript()", "testcase": false, "constructor": false}, {"identifier": "setScript", "parameters": "( final String script )", "modifiers": "public", "return": "void", "signature": "void setScript( final String script )", "full_signature": "public void setScript( final String script )", "class_method_signature": "ScriptableCondition.setScript( final String script )", "testcase": false, "constructor": false}, {"identifier": "setScriptLanguage", "parameters": "( final String value )", "modifiers": "public", "return": "void", "signature": "void setScriptLanguage( final String value )", "full_signature": "public void setScriptLanguage( final String value )", "class_method_signature": "ScriptableCondition.setScriptLanguage( final String value )", "testcase": false, "constructor": false}, {"identifier": "setDefaultResult", "parameters": "( final boolean value )", "modifiers": "public", "return": "void", "signature": "void setDefaultResult( final boolean value )", "full_signature": "public void setDefaultResult( final boolean value )", "class_method_signature": "ScriptableCondition.setDefaultResult( final boolean value )", "testcase": false, "constructor": false}, {"identifier": "getDefaultResult", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDefaultResult()", "full_signature": "public boolean getDefaultResult()", "class_method_signature": "ScriptableCondition.getDefaultResult()", "testcase": false, "constructor": false}, {"identifier": "getScriptLanguage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScriptLanguage()", "full_signature": "public String getScriptLanguage()", "class_method_signature": "ScriptableCondition.getScriptLanguage()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreInputNamesWithMinus", "parameters": "( final boolean value )", "modifiers": "public", "return": "void", "signature": "void setIgnoreInputNamesWithMinus( final boolean value )", "full_signature": "public void setIgnoreInputNamesWithMinus( final boolean value )", "class_method_signature": "ScriptableCondition.setIgnoreInputNamesWithMinus( final boolean value )", "testcase": false, "constructor": false}, {"identifier": "getIgnoreInputNamesWithMinus", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getIgnoreInputNamesWithMinus()", "full_signature": "public boolean getIgnoreInputNamesWithMinus()", "class_method_signature": "ScriptableCondition.getIgnoreInputNamesWithMinus()", "testcase": false, "constructor": false}, {"identifier": "setListAvailableEngines", "parameters": "( final boolean value )", "modifiers": "public", "return": "void", "signature": "void setListAvailableEngines( final boolean value )", "full_signature": "public void setListAvailableEngines( final boolean value )", "class_method_signature": "ScriptableCondition.setListAvailableEngines( final boolean value )", "testcase": false, "constructor": false}, {"identifier": "shouldExecute", "parameters": "( final Map currentInputs, final Log logger )", "modifiers": "public", "return": "boolean", "signature": "boolean shouldExecute( final Map currentInputs, final Log logger )", "full_signature": "public boolean shouldExecute( final Map currentInputs, final Log logger )", "class_method_signature": "ScriptableCondition.shouldExecute( final Map currentInputs, final Log logger )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/condition/scriptable/ScriptableCondition.java"}, "focal_method": {"identifier": "shouldExecute", "parameters": "( final Map currentInputs, final Log logger )", "modifiers": "public", "return": "boolean", "body": "public boolean shouldExecute( final Map currentInputs, final Log logger ) throws Exception {\n    boolean shouldExecute = this.getDefaultResult();\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName( this.getScriptLanguage() );\n    if ( engine == null ) {\n      throw new IllegalArgumentException( Messages.getInstance().getErrorString(\n          \"ScriptableCondition.ERROR_0001_ENGINE_NOT_AVAILABLE\", this.getScriptLanguage() ) ); //$NON-NLS-1$\n    }\n    Object inputValue;\n    IActionParameter inputParameter;\n    String inputName = null;\n    Iterator inputs = currentInputs.entrySet().iterator();\n    Map.Entry mapEntry;\n    while ( inputs.hasNext() ) {\n      mapEntry = (Map.Entry) inputs.next();\n      inputName = (String) mapEntry.getKey();\n      if ( this.getIgnoreInputNamesWithMinus() && inputName.indexOf( '-' ) >= 0 ) {\n        logger.info( Messages.getInstance().getString( \"ScriptableCondition.INFO_IGNORED_INPUT\", inputName ) ); //$NON-NLS-1$\n        continue;\n      }\n      inputParameter = (IActionParameter) mapEntry.getValue();\n      inputValue = inputParameter.getValue();\n      engine.put( inputName, inputValue ); // What happens to resultset objects I wonder...\n    }\n    engine.put( \"out\", System.out );\n    engine.put( \"rule\", this );\n    Object resultObject = engine.eval( this.getScript() );\n    if ( resultObject instanceof Boolean ) {\n      return ( (Boolean) resultObject ).booleanValue();\n    } else if ( resultObject instanceof String ) {\n      return ( \"true\".equalsIgnoreCase( resultObject.toString() ) ) || ( \"yes\".equalsIgnoreCase(\n        resultObject.toString() ) ); //$NON-NLS-1$ //$NON-NLS-2$\n    } else if ( resultObject instanceof Number ) {\n      return ( (Number) resultObject ).intValue() > 0;\n    } else if ( resultObject instanceof IPentahoResultSet ) {\n      return ( (IPentahoResultSet) resultObject ).getRowCount() > 0;\n    }\n    logger.info( Messages.getInstance().getString( \"ScriptableCondition.INFO_DEFAULT_RESULT_RETURNED\" ) ); //$NON-NLS-1$\n    return shouldExecute;\n  }", "signature": "boolean shouldExecute( final Map currentInputs, final Log logger )", "full_signature": "public boolean shouldExecute( final Map currentInputs, final Log logger )", "class_method_signature": "ScriptableCondition.shouldExecute( final Map currentInputs, final Log logger )", "testcase": false, "constructor": false, "invocations": ["getDefaultResult", "getEngineByName", "getScriptLanguage", "getErrorString", "getInstance", "getScriptLanguage", "iterator", "entrySet", "hasNext", "next", "getKey", "getIgnoreInputNamesWithMinus", "indexOf", "info", "getString", "getInstance", "getValue", "getValue", "put", "put", "put", "eval", "getScript", "booleanValue", "equalsIgnoreCase", "toString", "equalsIgnoreCase", "toString", "intValue", "getRowCount", "info", "getString", "getInstance"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}