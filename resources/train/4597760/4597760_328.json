{"test_class": {"identifier": "SQLResultSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Object[][] columns = new Object[][]{ { \"column1\", \"column2\" } };", "modifier": "private final", "type": "Object[][]", "declarator": "columns = new Object[][]{ { \"column1\", \"column2\" } }", "var_name": "columns"}, {"original_string": "private SQLConnection nativeConnection;", "modifier": "private", "type": "SQLConnection", "declarator": "nativeConnection", "var_name": "nativeConnection"}, {"original_string": "private ResultSet nativeResultSet;", "modifier": "private", "type": "ResultSet", "declarator": "nativeResultSet", "var_name": "nativeResultSet"}], "file": "extensions/src/test/java/org/pentaho/platform/plugin/services/connections/sql/SQLResultSetTest.java"}, "test_case": {"identifier": "testGetRowCountResultSetReturnRow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetRowCountResultSetReturnRow() throws SQLException {\n    int rowCount = 1;\n    when( nativeResultSet.getRow() ).thenReturn( rowCount );\n    //we should read last row when native result set row count equals SQLresultSetCount\n    when( nativeResultSet.last() ).thenReturn( true );\n    SQLResultSet resultSet = new SQLResultSet( nativeResultSet, nativeConnection );\n    assertEquals( rowCount, resultSet.getRowCount() );\n  }", "signature": "void testGetRowCountResultSetReturnRow()", "full_signature": "@Test public void testGetRowCountResultSetReturnRow()", "class_method_signature": "SQLResultSetTest.testGetRowCountResultSetReturnRow()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRow", "thenReturn", "when", "last", "assertEquals", "getRowCount"]}, "focal_class": {"identifier": "SQLResultSet", "superclass": "", "interfaces": "implements IPentahoResultSet, IPeekable", "fields": [{"original_string": "ResultSet nativeResultSet = null;", "modifier": "", "type": "ResultSet", "declarator": "nativeResultSet = null", "var_name": "nativeResultSet"}, {"original_string": "SQLConnection connection;", "modifier": "", "type": "SQLConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private static final int COUNT_NEVER_OBTAINED = -2;", "modifier": "private static final", "type": "int", "declarator": "COUNT_NEVER_OBTAINED = -2", "var_name": "COUNT_NEVER_OBTAINED"}, {"original_string": "private int rowCount = SQLResultSet.COUNT_NEVER_OBTAINED;", "modifier": "private", "type": "int", "declarator": "rowCount = SQLResultSet.COUNT_NEVER_OBTAINED", "var_name": "rowCount"}, {"original_string": "private int columnCount = SQLResultSet.COUNT_NEVER_OBTAINED;", "modifier": "private", "type": "int", "declarator": "columnCount = SQLResultSet.COUNT_NEVER_OBTAINED", "var_name": "columnCount"}, {"original_string": "protected Object[] peekRow;", "modifier": "protected", "type": "Object[]", "declarator": "peekRow", "var_name": "peekRow"}, {"original_string": "private static final Log log = LogFactory.getLog( SQLResultSet.class );", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog( SQLResultSet.class )", "var_name": "log"}, {"original_string": "private IPentahoMetaData metaData;", "modifier": "private", "type": "IPentahoMetaData", "declarator": "metaData", "var_name": "metaData"}], "methods": [{"identifier": "SQLResultSet", "parameters": "( final ResultSet nativeResultSet, final SQLConnection nativeConnection )", "modifiers": "public", "return": "", "signature": " SQLResultSet( final ResultSet nativeResultSet, final SQLConnection nativeConnection )", "full_signature": "public  SQLResultSet( final ResultSet nativeResultSet, final SQLConnection nativeConnection )", "class_method_signature": "SQLResultSet.SQLResultSet( final ResultSet nativeResultSet, final SQLConnection nativeConnection )", "testcase": false, "constructor": true}, {"identifier": "setMetaData", "parameters": "( final IPentahoMetaData metadata )", "modifiers": "public", "return": "void", "signature": "void setMetaData( final IPentahoMetaData metadata )", "full_signature": "public void setMetaData( final IPentahoMetaData metadata )", "class_method_signature": "SQLResultSet.setMetaData( final IPentahoMetaData metadata )", "testcase": false, "constructor": false}, {"identifier": "getMetaData", "parameters": "()", "modifiers": "public", "return": "IPentahoMetaData", "signature": "IPentahoMetaData getMetaData()", "full_signature": "public IPentahoMetaData getMetaData()", "class_method_signature": "SQLResultSet.getMetaData()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] peek()", "full_signature": "public Object[] peek()", "class_method_signature": "SQLResultSet.peek()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] next()", "full_signature": "public Object[] next()", "class_method_signature": "SQLResultSet.next()", "testcase": false, "constructor": false}, {"identifier": "closeConnection", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeConnection()", "full_signature": "public void closeConnection()", "class_method_signature": "SQLResultSet.closeConnection()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "SQLResultSet.close()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "SQLResultSet.dispose()", "testcase": false, "constructor": false}, {"identifier": "isScrollable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isScrollable()", "full_signature": "public boolean isScrollable()", "class_method_signature": "SQLResultSet.isScrollable()", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnCount()", "full_signature": "public int getColumnCount()", "class_method_signature": "SQLResultSet.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowCount()", "full_signature": "public int getRowCount()", "class_method_signature": "SQLResultSet.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "getValueAt", "parameters": "( final int row, final int column )", "modifiers": "public", "return": "Object", "signature": "Object getValueAt( final int row, final int column )", "full_signature": "public Object getValueAt( final int row, final int column )", "class_method_signature": "SQLResultSet.getValueAt( final int row, final int column )", "testcase": false, "constructor": false}, {"identifier": "memoryCopy", "parameters": "()", "modifiers": "public", "return": "IPentahoResultSet", "signature": "IPentahoResultSet memoryCopy()", "full_signature": "public IPentahoResultSet memoryCopy()", "class_method_signature": "SQLResultSet.memoryCopy()", "testcase": false, "constructor": false}, {"identifier": "beforeFirst", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void beforeFirst()", "full_signature": "public void beforeFirst()", "class_method_signature": "SQLResultSet.beforeFirst()", "testcase": false, "constructor": false}, {"identifier": "getDataColumn", "parameters": "( final int column )", "modifiers": "public", "return": "Object[]", "signature": "Object[] getDataColumn( final int column )", "full_signature": "public Object[] getDataColumn( final int column )", "class_method_signature": "SQLResultSet.getDataColumn( final int column )", "testcase": false, "constructor": false}, {"identifier": "getDataRow", "parameters": "( final int row )", "modifiers": "public", "return": "Object[]", "signature": "Object[] getDataRow( final int row )", "full_signature": "public Object[] getDataRow( final int row )", "class_method_signature": "SQLResultSet.getDataRow( final int row )", "testcase": false, "constructor": false}], "file": "extensions/src/main/java/org/pentaho/platform/plugin/services/connections/sql/SQLResultSet.java"}, "focal_method": {"identifier": "getRowCount", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getRowCount() {\n    if ( !isScrollable() ) {\n      return -1;\n    }\n    if ( rowCount != SQLResultSet.COUNT_NEVER_OBTAINED ) {\n      // We have already calculated rowcount, return what we have\n      return rowCount;\n    }\n    // No resultset\n    if ( nativeResultSet == null ) {\n      return 0;\n    }\n    try {\n      // Get current row in the resultset\n      int curRow = nativeResultSet.getRow();\n      try {\n        // Seek to the end of the resultset. This could be very\n        // bad for performance if the cursor is client-side.\n        if ( nativeResultSet.last() ) {\n          // Get the rownumber of the last row\n          rowCount = nativeResultSet.getRow();\n          // Boundary case\n          if ( rowCount <= 0 ) {\n            rowCount = 0;\n          }\n        } else {\n          // Couldn't seek to last row - Scrollable resultsets not\n          // supported?\n          // TODO: Possibly throw an exception in this case\n          rowCount = 0;\n        }\n      } finally {\n        // There is no row 0 - if the curRow was 0, go to before the\n        // first row in the resultset\n        if ( curRow == 0 ) {\n          nativeResultSet.beforeFirst();\n        } else {\n          // Go back where we started\n          nativeResultSet.absolute( curRow );\n        }\n      }\n    } catch ( SQLException sqle ) {\n      SQLResultSet.log.error(\n          Messages.getInstance().getErrorString( \"SQLResultSet.ERROR_0001_OBTAINING_ROWCOUNT\" ), sqle ); //$NON-NLS-1$\n      rowCount = 0;\n    }\n    return rowCount;\n  }", "signature": "int getRowCount()", "full_signature": "public int getRowCount()", "class_method_signature": "SQLResultSet.getRowCount()", "testcase": false, "constructor": false, "invocations": ["isScrollable", "getRow", "last", "getRow", "beforeFirst", "absolute", "error", "getErrorString", "getInstance"]}, "repository": {"repo_id": 4597760, "url": "https://github.com/pentaho/pentaho-platform", "stars": 389, "created": "6/8/2012 1:48:12 PM +00:00", "updates": "2020-01-20T18:27:17+00:00", "fork": "False", "license": "licensed"}}