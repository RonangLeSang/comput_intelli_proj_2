{"test_class": {"identifier": "CounterFieldBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String COUNTER_NAME = MetricRegistry.name(CounterFieldBean.class, \"counterName\");", "modifier": "private final static", "type": "String", "declarator": "COUNTER_NAME = MetricRegistry.name(CounterFieldBean.class, \"counterName\")", "var_name": "COUNTER_NAME"}, {"original_string": "@Inject\n    private MetricRegistry registry;", "modifier": "@Inject\n    private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Inject\n    private CounterFieldBean bean;", "modifier": "@Inject\n    private", "type": "CounterFieldBean", "declarator": "bean", "var_name": "bean"}], "file": "envs/se/src/test/java/io/astefanutti/metrics/cdi/se/CounterFieldBeanTest.java"}, "test_case": {"identifier": "incrementCounterField", "parameters": "()", "modifiers": "@Test @InSequence(2) public", "return": "void", "body": "@Test\n    @InSequence(2)\n    public void incrementCounterField() {\n        assertThat(\"Counter is not registered correctly\", registry.getCounters(), hasKey(COUNTER_NAME));\n        Counter counter = registry.getCounters().get(COUNTER_NAME);\n\n        // Call the increment method and assert the counter is up-to-date\n        long value = Math.round(Math.random() * Long.MAX_VALUE);\n        bean.increment(value);\n        assertThat(\"Counter value is incorrect\", counter.getCount(), is(equalTo(value)));\n    }", "signature": "void incrementCounterField()", "full_signature": "@Test @InSequence(2) public void incrementCounterField()", "class_method_signature": "CounterFieldBeanTest.incrementCounterField()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getCounters", "hasKey", "get", "getCounters", "round", "random", "increment", "assertThat", "getCount", "is", "equalTo"]}, "focal_class": {"identifier": "CounterFieldBean", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    @Metric(name = \"counterName\")\n    private Counter counter;", "modifier": "@Inject\n    @Metric(name = \"counterName\")\n    private", "type": "Counter", "declarator": "counter", "var_name": "counter"}], "methods": [{"identifier": "increment", "parameters": "(long n)", "modifiers": "public", "return": "void", "signature": "void increment(long n)", "full_signature": "public void increment(long n)", "class_method_signature": "CounterFieldBean.increment(long n)", "testcase": false, "constructor": false}], "file": "envs/se/src/main/java/io/astefanutti/metrics/cdi/se/CounterFieldBean.java"}, "focal_method": {"identifier": "increment", "parameters": "(long n)", "modifiers": "public", "return": "void", "body": "public void increment(long n) {\n        counter.inc(n);\n    }", "signature": "void increment(long n)", "full_signature": "public void increment(long n)", "class_method_signature": "CounterFieldBean.increment(long n)", "testcase": false, "constructor": false, "invocations": ["inc"]}, "repository": {"repo_id": 13719326, "url": "https://github.com/astefanutti/metrics-cdi", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 75, "size": 761, "license": "licensed"}}