{"test_class": {"identifier": "HugeHashMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int N_THREADS = 32;", "modifier": "static final", "type": "int", "declarator": "N_THREADS = 32", "var_name": "N_THREADS"}, {"original_string": "static final int COUNT = 4 * 1000000;", "modifier": "static final", "type": "int", "declarator": "COUNT = 4 * 1000000", "var_name": "COUNT"}, {"original_string": "static final long stride;", "modifier": "static final", "type": "long", "declarator": "stride", "var_name": "stride"}], "file": "collections/src/test/java/net/openhft/collections/HugeHashMapTest.java"}, "test_case": {"identifier": "valuesRetainAllReflectedInMapAndOtherViews", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void valuesRetainAllReflectedInMapAndOtherViews() {\n        HugeHashMap<Integer, String> map = getViewTestMap(3);\n        Set<Map.Entry<Integer, String>> entrySet = map.entrySet();\n        Set<Integer> keySet = map.keySet();\n        Collection<String> values = map.values();\n\n        values.retainAll(Arrays.asList(\"1\", \"2\"));\n        assertMap(map, new int[]{2, 1}, new String[]{\"2\", \"1\"});\n        assertEntrySet(entrySet, new int[]{2, 1}, new String[]{\"2\", \"1\"});\n        assertKeySet(keySet, new int[]{2, 1});\n        assertValues(values, new String[]{\"2\", \"1\"});\n    }", "signature": "void valuesRetainAllReflectedInMapAndOtherViews()", "full_signature": "@Test public void valuesRetainAllReflectedInMapAndOtherViews()", "class_method_signature": "HugeHashMapTest.valuesRetainAllReflectedInMapAndOtherViews()", "testcase": true, "constructor": false, "invocations": ["getViewTestMap", "entrySet", "keySet", "values", "retainAll", "asList", "assertMap", "assertEntrySet", "assertKeySet", "assertValues"]}, "focal_class": {"identifier": "HugeHashMap", "superclass": "extends AbstractMap<K, V>", "interfaces": "implements HugeMap<K, V>", "fields": [{"original_string": "private final Segment<K, V>[] segments;", "modifier": "private final", "type": "Segment<K, V>[]", "declarator": "segments", "var_name": "segments"}, {"original_string": "private final Hasher hasher;", "modifier": "private final", "type": "Hasher", "declarator": "hasher", "var_name": "hasher"}, {"original_string": "transient Set<Map.Entry<K, V>> entrySet;", "modifier": "transient", "type": "Set<Map.Entry<K, V>>", "declarator": "entrySet", "var_name": "entrySet"}], "methods": [{"identifier": "HugeHashMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " HugeHashMap()", "full_signature": "public  HugeHashMap()", "class_method_signature": "HugeHashMap.HugeHashMap()", "testcase": false, "constructor": true}, {"identifier": "HugeHashMap", "parameters": "(HugeConfig config, Class<K> kClass, Class<V> vClass)", "modifiers": "public", "return": "", "signature": " HugeHashMap(HugeConfig config, Class<K> kClass, Class<V> vClass)", "full_signature": "public  HugeHashMap(HugeConfig config, Class<K> kClass, Class<V> vClass)", "class_method_signature": "HugeHashMap.HugeHashMap(HugeConfig config, Class<K> kClass, Class<V> vClass)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "V", "signature": "V put(K key, V value)", "full_signature": "@Override public V put(K key, V value)", "class_method_signature": "HugeHashMap.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V get(Object key)", "full_signature": "@Override public V get(Object key)", "class_method_signature": "HugeHashMap.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "V", "signature": "V get(K key, V value)", "full_signature": "@Override public V get(K key, V value)", "class_method_signature": "HugeHashMap.get(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V remove(Object key)", "full_signature": "@Override public V remove(Object key)", "class_method_signature": "HugeHashMap.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(Object key)", "full_signature": "@Override public boolean containsKey(Object key)", "class_method_signature": "HugeHashMap.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Set<Entry<K, V>>", "signature": "Set<Entry<K, V>> entrySet()", "full_signature": "@NotNull @Override public Set<Entry<K, V>> entrySet()", "class_method_signature": "HugeHashMap.entrySet()", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(@NotNull K key, V value)", "modifiers": "@Override public", "return": "V", "signature": "V putIfAbsent(@NotNull K key, V value)", "full_signature": "@Override public V putIfAbsent(@NotNull K key, V value)", "class_method_signature": "HugeHashMap.putIfAbsent(@NotNull K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@NotNull Object key, Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(@NotNull Object key, Object value)", "full_signature": "@Override public boolean remove(@NotNull Object key, Object value)", "class_method_signature": "HugeHashMap.remove(@NotNull Object key, Object value)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(@NotNull K key, @NotNull V oldValue, @NotNull V newValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean replace(@NotNull K key, @NotNull V oldValue, @NotNull V newValue)", "full_signature": "@Override public boolean replace(@NotNull K key, @NotNull V oldValue, @NotNull V newValue)", "class_method_signature": "HugeHashMap.replace(@NotNull K key, @NotNull V oldValue, @NotNull V newValue)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(@NotNull K key, @NotNull V value)", "modifiers": "@Override public", "return": "V", "signature": "V replace(@NotNull K key, @NotNull V value)", "full_signature": "@Override public V replace(@NotNull K key, @NotNull V value)", "class_method_signature": "HugeHashMap.replace(@NotNull K key, @NotNull V value)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "HugeHashMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "HugeHashMap.size()", "testcase": false, "constructor": false}, {"identifier": "offHeapUsed", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long offHeapUsed()", "full_signature": "@Override public long offHeapUsed()", "class_method_signature": "HugeHashMap.offHeapUsed()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "HugeHashMap.clear()", "testcase": false, "constructor": false}], "file": "collections/src/main/java/net/openhft/collections/HugeHashMap.java"}, "focal_method": {"identifier": "entrySet", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Set<Entry<K, V>>", "body": "@NotNull\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        return (entrySet != null) ? entrySet : (entrySet = new EntrySet());\n    }", "signature": "Set<Entry<K, V>> entrySet()", "full_signature": "@NotNull @Override public Set<Entry<K, V>> entrySet()", "class_method_signature": "HugeHashMap.entrySet()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10762348, "url": "https://github.com/peter-lawrey/HugeCollections-OLD", "language": "Java", "is_fork": false, "fork_count": 55, "stargazer_count": 270, "size": 11446, "license": "licensed"}}