{"test_class": {"identifier": "TestTimingWheel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestTimingWheel.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestTimingWheel.class)", "var_name": "LOG"}, {"original_string": "private          TimingWheel<String> wheel    ;", "modifier": "private", "type": "TimingWheel<String>", "declarator": "wheel", "var_name": "wheel"}, {"original_string": "private volatile long                startTime;", "modifier": "private volatile", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private volatile long                endTime  ;", "modifier": "private volatile", "type": "long", "declarator": "endTime", "var_name": "endTime"}], "file": "craft-atom-util/src/test/java/io/craft/atom/util/schedule/TestTimingWheel.java"}, "test_case": {"identifier": "testExpire", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExpire() throws InterruptedException {\n\t\tstartTime = System.currentTimeMillis();\n\t\tlong ttl = wheel.add(\"test-1\");\n\t\twhile(endTime == 0);\n\t\tlong deviation = (endTime - startTime) - ttl;\n\t\tLOG.debug(\"[CRAFT-ATOM-UTIL] Timing wheel deviation={}\", deviation);\n\t\tAssert.assertTrue(deviation <= 2);\n\t\tAssert.assertTrue(deviation >= -2);\n\t\tSystem.out.println(String.format(\"[CRAFT-ATOM-UTIL] (^_^)  <%s>  Case -> test timing wheel expire. \", CaseCounter.incr(2)));\n\t}", "signature": "void testExpire()", "full_signature": "@Test public void testExpire()", "class_method_signature": "TestTimingWheel.testExpire()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "add", "debug", "assertTrue", "assertTrue", "println", "format", "incr"]}, "focal_class": {"identifier": "TimingWheel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TimingWheel.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TimingWheel.class)", "var_name": "LOG"}, {"original_string": "private final    long                                        tickDuration                                                           ;", "modifier": "private final", "type": "long", "declarator": "tickDuration", "var_name": "tickDuration"}, {"original_string": "private final    int                                         ticksPerWheel                                                          ;", "modifier": "private final", "type": "int", "declarator": "ticksPerWheel", "var_name": "ticksPerWheel"}, {"original_string": "private final    ArrayList<Slot<E>>                          wheel                                                                  ;", "modifier": "private final", "type": "ArrayList<Slot<E>>", "declarator": "wheel", "var_name": "wheel"}, {"original_string": "private final    Map<E, Slot<E>>                             indicator           = new ConcurrentHashMap<E, Slot<E>>()              ;", "modifier": "private final", "type": "Map<E, Slot<E>>", "declarator": "indicator           = new ConcurrentHashMap<E, Slot<E>>()", "var_name": "indicator"}, {"original_string": "private final    AtomicBoolean                               shutdown            = new AtomicBoolean(false)                         ;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "shutdown            = new AtomicBoolean(false)", "var_name": "shutdown"}, {"original_string": "private final    ReadWriteLock                               lock                = new ReentrantReadWriteLock()                     ;", "modifier": "private final", "type": "ReadWriteLock", "declarator": "lock                = new ReentrantReadWriteLock()", "var_name": "lock"}, {"original_string": "private final    CopyOnWriteArrayList<ExpirationListener<E>> expirationListeners = new CopyOnWriteArrayList<ExpirationListener<E>>();", "modifier": "private final", "type": "CopyOnWriteArrayList<ExpirationListener<E>>", "declarator": "expirationListeners = new CopyOnWriteArrayList<ExpirationListener<E>>()", "var_name": "expirationListeners"}, {"original_string": "private volatile int                                         currentTickIndex    = 0                                                ;", "modifier": "private volatile", "type": "int", "declarator": "currentTickIndex    = 0", "var_name": "currentTickIndex"}, {"original_string": "private          Thread                                      workerThread                                                           ;", "modifier": "private", "type": "Thread", "declarator": "workerThread", "var_name": "workerThread"}], "methods": [{"identifier": "TimingWheel", "parameters": "(int tickDuration, int ticksPerWheel, TimeUnit timeUnit)", "modifiers": "public", "return": "", "signature": " TimingWheel(int tickDuration, int ticksPerWheel, TimeUnit timeUnit)", "full_signature": "public  TimingWheel(int tickDuration, int ticksPerWheel, TimeUnit timeUnit)", "class_method_signature": "TimingWheel.TimingWheel(int tickDuration, int ticksPerWheel, TimeUnit timeUnit)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "TimingWheel.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean stop()", "full_signature": "public boolean stop()", "class_method_signature": "TimingWheel.stop()", "testcase": false, "constructor": false}, {"identifier": "addExpirationListener", "parameters": "(ExpirationListener<E> listener)", "modifiers": "public", "return": "void", "signature": "void addExpirationListener(ExpirationListener<E> listener)", "full_signature": "public void addExpirationListener(ExpirationListener<E> listener)", "class_method_signature": "TimingWheel.addExpirationListener(ExpirationListener<E> listener)", "testcase": false, "constructor": false}, {"identifier": "removeExpirationListener", "parameters": "(ExpirationListener<E> listener)", "modifiers": "public", "return": "void", "signature": "void removeExpirationListener(ExpirationListener<E> listener)", "full_signature": "public void removeExpirationListener(ExpirationListener<E> listener)", "class_method_signature": "TimingWheel.removeExpirationListener(ExpirationListener<E> listener)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E e)", "modifiers": "public", "return": "long", "signature": "long add(E e)", "full_signature": "public long add(E e)", "class_method_signature": "TimingWheel.add(E e)", "testcase": false, "constructor": false}, {"identifier": "checkAdd", "parameters": "(E e)", "modifiers": "private", "return": "void", "signature": "void checkAdd(E e)", "full_signature": "private void checkAdd(E e)", "class_method_signature": "TimingWheel.checkAdd(E e)", "testcase": false, "constructor": false}, {"identifier": "getPreviousTickIndex", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getPreviousTickIndex()", "full_signature": "private int getPreviousTickIndex()", "class_method_signature": "TimingWheel.getPreviousTickIndex()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(E e)", "modifiers": "public", "return": "boolean", "signature": "boolean remove(E e)", "full_signature": "public boolean remove(E e)", "class_method_signature": "TimingWheel.remove(E e)", "testcase": false, "constructor": false}, {"identifier": "notifyExpired", "parameters": "(int idx)", "modifiers": "private", "return": "void", "signature": "void notifyExpired(int idx)", "full_signature": "private void notifyExpired(int idx)", "class_method_signature": "TimingWheel.notifyExpired(int idx)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "TimingWheel.size()", "testcase": false, "constructor": false}, {"identifier": "elements", "parameters": "()", "modifiers": "public", "return": "Set<E>", "signature": "Set<E> elements()", "full_signature": "public Set<E> elements()", "class_method_signature": "TimingWheel.elements()", "testcase": false, "constructor": false}], "file": "craft-atom-util/src/main/java/io/craft/atom/util/schedule/TimingWheel.java"}, "focal_method": {"identifier": "add", "parameters": "(E e)", "modifiers": "public", "return": "long", "body": "public long add(E e) {\n\t\t// at any time just only one e(element) in the timing-wheel, all operations(add,remove,put) on this element should be synchronized.\n\t\tsynchronized(e) {\n\t\t\tcheckAdd(e);\n\t\t\t\n\t\t\tint previousTickIndex = getPreviousTickIndex();\n\t\t\tSlot<E> slot = wheel.get(previousTickIndex);\n\t\t\tslot.add(e);\n\t\t\tindicator.put(e, slot);\n\t\t\t\n\t\t\treturn (ticksPerWheel - 1) * tickDuration;\n\t\t}\n\t}", "signature": "long add(E e)", "full_signature": "public long add(E e)", "class_method_signature": "TimingWheel.add(E e)", "testcase": false, "constructor": false, "invocations": ["checkAdd", "getPreviousTickIndex", "get", "add", "put"]}, "repository": {"repo_id": 7393690, "url": "https://github.com/mindwind/craft-atom", "language": "Java", "is_fork": false, "fork_count": 132, "stargazer_count": 329, "size": 2621, "license": "licensed"}}