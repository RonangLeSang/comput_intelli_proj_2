{"test_class": {"identifier": "CommandExchangeBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NORMAL_VER14_SSID_TEXT = SSID.getCode()\n            + \"4O0055LOCALUSER           MYPASSWD02048BYYN064             \\r\";", "modifier": "private static final", "type": "String", "declarator": "NORMAL_VER14_SSID_TEXT = SSID.getCode()\n            + \"4O0055LOCALUSER           MYPASSWD02048BYYN064             \\r\"", "var_name": "NORMAL_VER14_SSID_TEXT"}, {"original_string": "private static final String BEGIN_VER20_EERP_TEXT = EERP.getCode()\n            + \"MyFileDatasetName         RSV200812081454350123USERDATAO0055DESTINATIONUSER     \"\n            + \"O0055ORIGINATORUSER      \";", "modifier": "private static final", "type": "String", "declarator": "BEGIN_VER20_EERP_TEXT = EERP.getCode()\n            + \"MyFileDatasetName         RSV200812081454350123USERDATAO0055DESTINATIONUSER     \"\n            + \"O0055ORIGINATORUSER      \"", "var_name": "BEGIN_VER20_EERP_TEXT"}, {"original_string": "private static final String BEGIN_NO_HASH_AND_SIGNATURE_VER20_EERP_TEXT = EERP.getCode()\n            + \"MyFileDatasetName            200812081454350123USERDATAO0055DESTINATIONUSER     \"\n            + \"O0055ORIGINATORUSER      \";", "modifier": "private static final", "type": "String", "declarator": "BEGIN_NO_HASH_AND_SIGNATURE_VER20_EERP_TEXT = EERP.getCode()\n            + \"MyFileDatasetName            200812081454350123USERDATAO0055DESTINATIONUSER     \"\n            + \"O0055ORIGINATORUSER      \"", "var_name": "BEGIN_NO_HASH_AND_SIGNATURE_VER20_EERP_TEXT"}, {"original_string": "private static final String NORMAL_VER20_ESID_TEXT = ESID.getCode() + \"00000\\r\";", "modifier": "private static final", "type": "String", "declarator": "NORMAL_VER20_ESID_TEXT = ESID.getCode() + \"00000\\r\"", "var_name": "NORMAL_VER20_ESID_TEXT"}, {"original_string": "private static final String BEGIN_VER20_ESID_WITH_DESCRIPTION_TEXT = ESID.getCode() + \"00018\";", "modifier": "private static final", "type": "String", "declarator": "BEGIN_VER20_ESID_WITH_DESCRIPTION_TEXT = ESID.getCode() + \"00018\"", "var_name": "BEGIN_VER20_ESID_WITH_DESCRIPTION_TEXT"}, {"original_string": "private static final String NORMAL_TERMINATION_DESC = \"NORMAL TERMINATION\";", "modifier": "private static final", "type": "String", "declarator": "NORMAL_TERMINATION_DESC = \"NORMAL TERMINATION\"", "var_name": "NORMAL_TERMINATION_DESC"}, {"original_string": "private static final String NORMAL_VER20_EFID_TEXT = EFID.getCode() + \"0000000000000000000000000000017860\";", "modifier": "private static final", "type": "String", "declarator": "NORMAL_VER20_EFID_TEXT = EFID.getCode() + \"0000000000000000000000000000017860\"", "var_name": "NORMAL_VER20_EFID_TEXT"}, {"original_string": "private static final String NORMAL_VER20_SFID_TEXT = SFID.getCode() + \"LOOPTEST                     20081127\"\n            + \"1055440001        O0055ORIGIN              O0055DEST                U0000000000000000180000000000256\"\n            + \"00000000000000007030101N000\";", "modifier": "private static final", "type": "String", "declarator": "NORMAL_VER20_SFID_TEXT = SFID.getCode() + \"LOOPTEST                     20081127\"\n            + \"1055440001        O0055ORIGIN              O0055DEST                U0000000000000000180000000000256\"\n            + \"00000000000000007030101N000\"", "var_name": "NORMAL_VER20_SFID_TEXT"}], "file": "odetteftp/core/src/test/java/org/neociclo/odetteftp/protocol/CommandExchangeBufferTest.java"}, "test_case": {"identifier": "testParseNormalVer20StartFileBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNormalVer20StartFileBuffer() throws Exception {\n\n        ChannelBuffer buffer = ChannelBuffers.wrappedBuffer(NORMAL_VER20_SFID_TEXT.getBytes(DEFAULT_PROTOCOL_CHARSET));\n        CommandExchangeBuffer sfid = CommandExchangeBufferBuilder.create(SFID_V20, buffer,\n        \t\tHeapChannelBufferFactory.getInstance());\n\n        // compare buffers text\n        String createdBufferText = new String(sfid.getRawBuffer().array(), DEFAULT_PROTOCOL_CHARSET);\n        assertEquals(\"Invalid created buffer text.\", NORMAL_VER20_SFID_TEXT, createdBufferText);\n\n    }", "signature": "void testParseNormalVer20StartFileBuffer()", "full_signature": "@Test public void testParseNormalVer20StartFileBuffer()", "class_method_signature": "CommandExchangeBufferTest.testParseNormalVer20StartFileBuffer()", "testcase": true, "constructor": false, "invocations": ["wrappedBuffer", "getBytes", "create", "getInstance", "array", "getRawBuffer", "assertEquals"]}, "focal_class": {"identifier": "CommandExchangeBuffer", "superclass": "", "interfaces": "implements OdetteFtpExchangeBuffer", "fields": [{"original_string": "public static final Charset DEFAULT_PROTOCOL_CHARSET = Charset.forName(\"ISO_646.IRV:1991\");", "modifier": "public static final", "type": "Charset", "declarator": "DEFAULT_PROTOCOL_CHARSET = Charset.forName(\"ISO_646.IRV:1991\")", "var_name": "DEFAULT_PROTOCOL_CHARSET"}, {"original_string": "public static final Charset UTF8_ENCODED_PROTOCOL_CHARSET = Charset.forName(\"UTF-8\");", "modifier": "public static final", "type": "Charset", "declarator": "UTF8_ENCODED_PROTOCOL_CHARSET = Charset.forName(\"UTF-8\")", "var_name": "UTF8_ENCODED_PROTOCOL_CHARSET"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CommandExchangeBuffer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CommandExchangeBuffer.class)", "var_name": "LOGGER"}, {"original_string": "private Map<String, Object> attributes;", "modifier": "private", "type": "Map<String, Object>", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "private Integer size = null;", "modifier": "private", "type": "Integer", "declarator": "size = null", "var_name": "size"}, {"original_string": "private final CommandFormat commandFormat;", "modifier": "private final", "type": "CommandFormat", "declarator": "commandFormat", "var_name": "commandFormat"}], "methods": [{"identifier": "formatAttribute", "parameters": "(Field field, String value)", "modifiers": "public static", "return": "String", "signature": "String formatAttribute(Field field, String value)", "full_signature": "public static String formatAttribute(Field field, String value)", "class_method_signature": "CommandExchangeBuffer.formatAttribute(Field field, String value)", "testcase": false, "constructor": false}, {"identifier": "checkAttribute", "parameters": "(char type, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkAttribute(char type, String value)", "full_signature": "public static boolean checkAttribute(char type, String value)", "class_method_signature": "CommandExchangeBuffer.checkAttribute(char type, String value)", "testcase": false, "constructor": false}, {"identifier": "CommandExchangeBuffer", "parameters": "(CommandFormat commandFormat)", "modifiers": "public", "return": "", "signature": " CommandExchangeBuffer(CommandFormat commandFormat)", "full_signature": "public  CommandExchangeBuffer(CommandFormat commandFormat)", "class_method_signature": "CommandExchangeBuffer.CommandExchangeBuffer(CommandFormat commandFormat)", "testcase": false, "constructor": true}, {"identifier": "getAttribute", "parameters": "(String name)", "modifiers": "public", "return": "Object", "signature": "Object getAttribute(String name)", "full_signature": "public Object getAttribute(String name)", "class_method_signature": "CommandExchangeBuffer.getAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "getStringAttribute", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getStringAttribute(String name)", "full_signature": "public String getStringAttribute(String name)", "class_method_signature": "CommandExchangeBuffer.getStringAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "getByteArrayAttribute", "parameters": "(String name)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getByteArrayAttribute(String name)", "full_signature": "public byte[] getByteArrayAttribute(String name)", "class_method_signature": "CommandExchangeBuffer.getByteArrayAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "getFormattedAttribute", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getFormattedAttribute(String name)", "full_signature": "public String getFormattedAttribute(String name)", "class_method_signature": "CommandExchangeBuffer.getFormattedAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "getRawBuffer", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer getRawBuffer()", "full_signature": "public ByteBuffer getRawBuffer()", "class_method_signature": "CommandExchangeBuffer.getRawBuffer()", "testcase": false, "constructor": false}, {"identifier": "getFieldNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getFieldNames()", "full_signature": "public String[] getFieldNames()", "class_method_signature": "CommandExchangeBuffer.getFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "public", "return": "CommandIdentifier", "signature": "CommandIdentifier getIdentifier()", "full_signature": "public CommandIdentifier getIdentifier()", "class_method_signature": "CommandExchangeBuffer.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "CommandExchangeBuffer.getSize()", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String fieldName, Object value)", "modifiers": "public", "return": "Object", "signature": "Object setAttribute(String fieldName, Object value)", "full_signature": "public Object setAttribute(String fieldName, Object value)", "class_method_signature": "CommandExchangeBuffer.setAttribute(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CommandExchangeBuffer.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "CommandExchangeBuffer.equals(Object obj)", "testcase": false, "constructor": false}], "file": "odetteftp/core/src/main/java/org/neociclo/odetteftp/protocol/CommandExchangeBuffer.java"}, "focal_method": {"identifier": "getRawBuffer", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "body": "public ByteBuffer getRawBuffer() {\n\n        ByteBuffer buffer = ByteBufferFactory.allocate(getSize());\n        buffer.order(ByteOrder.BIG_ENDIAN);\n\n        /*\n         * Loop through all command fields and put the formatted field value\n         * within the buffer on its specified position. Event though a field is\n         * not present in the command attributes set (often as Reserved are), it\n         * will be formatted with blank spaces value.\n         */\n        for (String fieldName : getFieldNames()) {\n\n            Field field = commandFormat.getField(fieldName);\n\n            byte[] octets = null;\n\n            if (field.getType() == Field.BINARY_TYPE) {\n                octets = getByteArrayAttribute(fieldName);\n            } else {\n                String text = formatAttribute(field, getStringAttribute(fieldName));\n\n                if (text == null) {\n                    continue;\n                }\n\n                if (field.getType() == Field.ENCODED_TYPE) {\n                    octets = text.getBytes(UTF8_ENCODED_PROTOCOL_CHARSET);\n                } else {\n                    octets = text.getBytes(DEFAULT_PROTOCOL_CHARSET);\n                }\n            }\n\n            if (octets == null && LOGGER.isDebugEnabled())\n                LOGGER.debug(\"getBuffer() - Field is null: {}\", fieldName);\n\n            if (octets != null) {\n                buffer.put(octets);\n            }\n        }\n\n        buffer.flip();\n\n        return buffer;\n    }", "signature": "ByteBuffer getRawBuffer()", "full_signature": "public ByteBuffer getRawBuffer()", "class_method_signature": "CommandExchangeBuffer.getRawBuffer()", "testcase": false, "constructor": false, "invocations": ["allocate", "getSize", "order", "getFieldNames", "getField", "getType", "getByteArrayAttribute", "formatAttribute", "getStringAttribute", "getType", "getBytes", "getBytes", "isDebugEnabled", "debug", "put", "flip"]}, "repository": {"repo_id": 8188105, "url": "https://github.com/rmarins/accord", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 5, "size": 2052, "license": "licensed"}}