{"test_class": {"identifier": "RequestsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Mockery mockContext = new Mockery() {\n                                    {\n                                        setImposteriser(ClassImposteriser.INSTANCE);\n                                    }\n                                };", "modifier": "private", "type": "Mockery", "declarator": "mockContext = new Mockery() {\n                                    {\n                                        setImposteriser(ClassImposteriser.INSTANCE);\n                                    }\n                                }", "var_name": "mockContext"}], "file": "wink-server/src/test/java/org/apache/wink/server/internal/log/RequestsTest.java"}, "test_case": {"identifier": "testRequestsInitWithNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequestsInitWithNull() {\n        Requests r = new Requests();\n        r.init(null);\n        mockContext.assertIsSatisfied();\n    }", "signature": "void testRequestsInitWithNull()", "full_signature": "@Test public void testRequestsInitWithNull()", "class_method_signature": "RequestsTest.testRequestsInitWithNull()", "testcase": true, "constructor": false, "invocations": ["init", "assertIsSatisfied"]}, "focal_class": {"identifier": "Requests", "superclass": "", "interfaces": "implements RequestHandler", "fields": [{"original_string": "final private static Logger  logger             = LoggerFactory.getLogger(Requests.class);", "modifier": "final private static", "type": "Logger", "declarator": "logger             = LoggerFactory.getLogger(Requests.class)", "var_name": "logger"}, {"original_string": "final private static int     BREAK_POINT        =\n                                                        Integer\n                                                            .valueOf(System\n                                                                .getProperty(Requests.class\n                                                                                 .getName() + \".breakPoint\",\n                                                                             \"4096\")).intValue();", "modifier": "final private static", "type": "int", "declarator": "BREAK_POINT        =\n                                                        Integer\n                                                            .valueOf(System\n                                                                .getProperty(Requests.class\n                                                                                 .getName() + \".breakPoint\",\n                                                                             \"4096\")).intValue()", "var_name": "BREAK_POINT"}, {"original_string": "final private static boolean IS_LOGGED_AS_BYTES =\n                                                        Boolean\n                                                            .valueOf(System\n                                                                .getProperty(Requests.class\n                                                                                 .getName() + \".logAsBytes\",\n                                                                             \"false\"))\n                                                            .booleanValue();", "modifier": "final private static", "type": "boolean", "declarator": "IS_LOGGED_AS_BYTES =\n                                                        Boolean\n                                                            .valueOf(System\n                                                                .getProperty(Requests.class\n                                                                                 .getName() + \".logAsBytes\",\n                                                                             \"false\"))\n                                                            .booleanValue()", "var_name": "IS_LOGGED_AS_BYTES"}, {"original_string": "final private static int     BUFFER_SIZE        =\n                                                        Integer\n                                                            .valueOf(System\n                                                                .getProperty(Requests.class\n                                                                                 .getName() + \".bufferSize\",\n                                                                             \"8192\")).intValue();", "modifier": "final private static", "type": "int", "declarator": "BUFFER_SIZE        =\n                                                        Integer\n                                                            .valueOf(System\n                                                                .getProperty(Requests.class\n                                                                                 .getName() + \".bufferSize\",\n                                                                             \"8192\")).intValue()", "var_name": "BUFFER_SIZE"}], "methods": [{"identifier": "init", "parameters": "(Properties props)", "modifiers": "public", "return": "void", "signature": "void init(Properties props)", "full_signature": "public void init(Properties props)", "class_method_signature": "Requests.init(Properties props)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(MessageContext context, HandlersChain chain)", "modifiers": "public", "return": "void", "signature": "void handleRequest(MessageContext context, HandlersChain chain)", "full_signature": "public void handleRequest(MessageContext context, HandlersChain chain)", "class_method_signature": "Requests.handleRequest(MessageContext context, HandlersChain chain)", "testcase": false, "constructor": false}, {"identifier": "logStartRequest", "parameters": "(MessageContext context)", "modifiers": "", "return": "void", "signature": "void logStartRequest(MessageContext context)", "full_signature": " void logStartRequest(MessageContext context)", "class_method_signature": "Requests.logStartRequest(MessageContext context)", "testcase": false, "constructor": false}, {"identifier": "logFinishRequest", "parameters": "(MessageContext context)", "modifiers": "", "return": "void", "signature": "void logFinishRequest(MessageContext context)", "full_signature": " void logFinishRequest(MessageContext context)", "class_method_signature": "Requests.logFinishRequest(MessageContext context)", "testcase": false, "constructor": false}], "file": "wink-server/src/main/java/org/apache/wink/server/internal/log/Requests.java"}, "focal_method": {"identifier": "init", "parameters": "(Properties props)", "modifiers": "public", "return": "void", "body": "public void init(Properties props) {\n        /* do nothing */\n    }", "signature": "void init(Properties props)", "full_signature": "public void init(Properties props)", "class_method_signature": "Requests.init(Properties props)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 247823, "url": "https://github.com/apache/attic-wink", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 19, "size": 12479, "license": "licensed"}}