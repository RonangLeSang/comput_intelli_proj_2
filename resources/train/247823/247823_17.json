{"test_class": {"identifier": "WinkSystemPropertiesTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final String PROP_KEY = \"someSysPropKey\";", "modifier": "private static final", "type": "String", "declarator": "PROP_KEY = \"someSysPropKey\"", "var_name": "PROP_KEY"}], "file": "wink-common/src/test/java/org/apache/wink/common/internal/properties/WinkSystemPropertiesTest.java"}, "test_case": {"identifier": "testGetSystemProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSystemProperties() throws Exception {\n        Properties startProps = new Properties();  // empty\n        System.setProperty(PROP_KEY, \"false\");\n        // loadSystemProperties can only override an existing key in the properties bag.  We should get an empty bag back\n        Properties props = WinkSystemProperties.loadSystemProperties(startProps);\n        assertTrue(\"expected empty properties bag\", props.isEmpty());\n    }", "signature": "void testGetSystemProperties()", "full_signature": "@Test public void testGetSystemProperties()", "class_method_signature": "WinkSystemPropertiesTest.testGetSystemProperties()", "testcase": true, "constructor": false, "invocations": ["setProperty", "loadSystemProperties", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "WinkSystemProperties", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WinkSystemProperties.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WinkSystemProperties.class)", "var_name": "logger"}], "methods": [{"identifier": "loadSystemProperties", "parameters": "(Properties properties)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadSystemProperties(Properties properties)", "full_signature": "public static Properties loadSystemProperties(Properties properties)", "class_method_signature": "WinkSystemProperties.loadSystemProperties(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getSystemProperty", "parameters": "(final String key)", "modifiers": "private static", "return": "String", "signature": "String getSystemProperty(final String key)", "full_signature": "private static String getSystemProperty(final String key)", "class_method_signature": "WinkSystemProperties.getSystemProperty(final String key)", "testcase": false, "constructor": false}], "file": "wink-common/src/main/java/org/apache/wink/common/internal/properties/WinkSystemProperties.java"}, "focal_method": {"identifier": "loadSystemProperties", "parameters": "(Properties properties)", "modifiers": "public static", "return": "Properties", "body": "public static Properties loadSystemProperties(Properties properties) {\n        String key = null;\n        String value = null;\n        Properties systemProperties = new Properties();\n\n        // Read the properties contained in passed-in properties\n        if (properties != null) {\n            Enumeration<?> keyEnum = properties.propertyNames();\n            while (keyEnum.hasMoreElements()) {\n                key = (String)keyEnum.nextElement();\n                value = (String)properties.get(key);\n\n                // If value is null or empty, try to read as JVM property\n                if (value == null || value.length() == 0) {\n                    value = getSystemProperty(key);\n                    if(value != null) {\n                        systemProperties.setProperty(key, value);\n                    }\n                } else {\n                    logger.trace(\"Property {} is already defined with value {}\", key, value); //$NON-NLS-1$\n                }\n            }\n        } else {\n            logger.trace(\"Properties are null\"); //$NON-NLS-1$\n        }\n        return systemProperties;\n    }", "signature": "Properties loadSystemProperties(Properties properties)", "full_signature": "public static Properties loadSystemProperties(Properties properties)", "class_method_signature": "WinkSystemProperties.loadSystemProperties(Properties properties)", "testcase": false, "constructor": false, "invocations": ["propertyNames", "hasMoreElements", "nextElement", "get", "length", "getSystemProperty", "setProperty", "trace", "trace"]}, "repository": {"repo_id": 247823, "url": "https://github.com/apache/attic-wink", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 19, "size": 12479, "license": "licensed"}}