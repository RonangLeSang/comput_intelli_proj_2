{"test_class": {"identifier": "CassandraUniqueIdentifierServiceTest", "superclass": "extends CassandraTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CassandraUniqueIdentifierService service;", "modifier": "@Autowired\n    private", "type": "CassandraUniqueIdentifierService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n    private CassandraConnectionProvider dbService;", "modifier": "@Autowired\n    private", "type": "CassandraConnectionProvider", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "@Autowired\n    private CassandraDataProviderDAO dataProviderDao;", "modifier": "@Autowired\n    private", "type": "CassandraDataProviderDAO", "declarator": "dataProviderDao", "var_name": "dataProviderDao"}, {"original_string": "@Autowired\n    private CassandraLocalIdDAO localIdDao;", "modifier": "@Autowired\n    private", "type": "CassandraLocalIdDAO", "declarator": "localIdDao", "var_name": "localIdDao"}, {"original_string": "@Autowired\n    private CassandraCloudIdDAO cloudIdDao;", "modifier": "@Autowired\n    private", "type": "CassandraCloudIdDAO", "declarator": "cloudIdDao", "var_name": "cloudIdDao"}], "file": "service/uis/rest/src/test/java/eu/europeana/cloud/service/uis/service/CassandraUniqueIdentifierServiceTest.java"}, "test_case": {"identifier": "testRemoveIdMapping", "parameters": "()", "modifiers": "@Test(expected = RecordDoesNotExistException.class) public", "return": "void", "body": "@Test(expected = RecordDoesNotExistException.class)\n    public void testRemoveIdMapping() throws Exception {\n\tdataProviderDao.createDataProvider(\"test16\",\n\t\tnew DataProviderProperties());\n\tservice.createCloudId(\"test16\", \"test16\");\n\tservice.removeIdMapping(\"test16\", \"test16\");\n\tservice.getCloudId(\"test16\", \"test16\");\n    }", "signature": "void testRemoveIdMapping()", "full_signature": "@Test(expected = RecordDoesNotExistException.class) public void testRemoveIdMapping()", "class_method_signature": "CassandraUniqueIdentifierServiceTest.testRemoveIdMapping()", "testcase": true, "constructor": false, "invocations": ["createDataProvider", "createCloudId", "removeIdMapping", "getCloudId"]}, "focal_class": {"identifier": "CassandraUniqueIdentifierService", "superclass": "", "interfaces": "implements UniqueIdentifierService", "fields": [{"original_string": "private final CassandraCloudIdDAO cloudIdDao;", "modifier": "private final", "type": "CassandraCloudIdDAO", "declarator": "cloudIdDao", "var_name": "cloudIdDao"}, {"original_string": "private final CassandraLocalIdDAO localIdDao;", "modifier": "private final", "type": "CassandraLocalIdDAO", "declarator": "localIdDao", "var_name": "localIdDao"}, {"original_string": "private final CassandraDataProviderDAO dataProviderDao;", "modifier": "private final", "type": "CassandraDataProviderDAO", "declarator": "dataProviderDao", "var_name": "dataProviderDao"}, {"original_string": "private final String hostList;", "modifier": "private final", "type": "String", "declarator": "hostList", "var_name": "hostList"}, {"original_string": "private final String keyspace;", "modifier": "private final", "type": "String", "declarator": "keyspace", "var_name": "keyspace"}, {"original_string": "private final String port;", "modifier": "private final", "type": "String", "declarator": "port", "var_name": "port"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CassandraUniqueIdentifierService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CassandraUniqueIdentifierService.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "CassandraUniqueIdentifierService", "parameters": "(CassandraCloudIdDAO cloudIdDao, CassandraLocalIdDAO localIdDao,\n                                            CassandraDataProviderDAO dataProviderDao)", "modifiers": "public", "return": "", "signature": " CassandraUniqueIdentifierService(CassandraCloudIdDAO cloudIdDao, CassandraLocalIdDAO localIdDao,\n                                            CassandraDataProviderDAO dataProviderDao)", "full_signature": "public  CassandraUniqueIdentifierService(CassandraCloudIdDAO cloudIdDao, CassandraLocalIdDAO localIdDao,\n                                            CassandraDataProviderDAO dataProviderDao)", "class_method_signature": "CassandraUniqueIdentifierService.CassandraUniqueIdentifierService(CassandraCloudIdDAO cloudIdDao, CassandraLocalIdDAO localIdDao,\n                                            CassandraDataProviderDAO dataProviderDao)", "testcase": false, "constructor": true}, {"identifier": "createCloudId", "parameters": "(String... recordInfo)", "modifiers": "@Override public", "return": "CloudId", "signature": "CloudId createCloudId(String... recordInfo)", "full_signature": "@Override public CloudId createCloudId(String... recordInfo)", "class_method_signature": "CassandraUniqueIdentifierService.createCloudId(String... recordInfo)", "testcase": false, "constructor": false}, {"identifier": "getCloudId", "parameters": "(String providerId, String recordId)", "modifiers": "@Override public", "return": "CloudId", "signature": "CloudId getCloudId(String providerId, String recordId)", "full_signature": "@Override public CloudId getCloudId(String providerId, String recordId)", "class_method_signature": "CassandraUniqueIdentifierService.getCloudId(String providerId, String recordId)", "testcase": false, "constructor": false}, {"identifier": "getLocalIdsByCloudId", "parameters": "(String cloudId)", "modifiers": "@Override public", "return": "List<CloudId>", "signature": "List<CloudId> getLocalIdsByCloudId(String cloudId)", "full_signature": "@Override public List<CloudId> getLocalIdsByCloudId(String cloudId)", "class_method_signature": "CassandraUniqueIdentifierService.getLocalIdsByCloudId(String cloudId)", "testcase": false, "constructor": false}, {"identifier": "getLocalIdsByProvider", "parameters": "(String providerId, String start, int end)", "modifiers": "@Override public", "return": "List<CloudId>", "signature": "List<CloudId> getLocalIdsByProvider(String providerId, String start, int end)", "full_signature": "@Override public List<CloudId> getLocalIdsByProvider(String providerId, String start, int end)", "class_method_signature": "CassandraUniqueIdentifierService.getLocalIdsByProvider(String providerId, String start, int end)", "testcase": false, "constructor": false}, {"identifier": "getCloudIdsByProvider", "parameters": "(String providerId, String startRecordId, int limit)", "modifiers": "@Override public", "return": "List<CloudId>", "signature": "List<CloudId> getCloudIdsByProvider(String providerId, String startRecordId, int limit)", "full_signature": "@Override public List<CloudId> getCloudIdsByProvider(String providerId, String startRecordId, int limit)", "class_method_signature": "CassandraUniqueIdentifierService.getCloudIdsByProvider(String providerId, String startRecordId, int limit)", "testcase": false, "constructor": false}, {"identifier": "createIdMapping", "parameters": "(String cloudId, String providerId, String recordId)", "modifiers": "@Override public", "return": "CloudId", "signature": "CloudId createIdMapping(String cloudId, String providerId, String recordId)", "full_signature": "@Override public CloudId createIdMapping(String cloudId, String providerId, String recordId)", "class_method_signature": "CassandraUniqueIdentifierService.createIdMapping(String cloudId, String providerId, String recordId)", "testcase": false, "constructor": false}, {"identifier": "removeIdMapping", "parameters": "(String providerId, String recordId)", "modifiers": "@Override public", "return": "void", "signature": "void removeIdMapping(String providerId, String recordId)", "full_signature": "@Override public void removeIdMapping(String providerId, String recordId)", "class_method_signature": "CassandraUniqueIdentifierService.removeIdMapping(String providerId, String recordId)", "testcase": false, "constructor": false}, {"identifier": "deleteCloudId", "parameters": "(String cloudId)", "modifiers": "@Override public", "return": "List<CloudId>", "signature": "List<CloudId> deleteCloudId(String cloudId)", "full_signature": "@Override public List<CloudId> deleteCloudId(String cloudId)", "class_method_signature": "CassandraUniqueIdentifierService.deleteCloudId(String cloudId)", "testcase": false, "constructor": false}, {"identifier": "getHostList", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHostList()", "full_signature": "@Override public String getHostList()", "class_method_signature": "CassandraUniqueIdentifierService.getHostList()", "testcase": false, "constructor": false}, {"identifier": "getKeyspace", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyspace()", "full_signature": "@Override public String getKeyspace()", "class_method_signature": "CassandraUniqueIdentifierService.getKeyspace()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPort()", "full_signature": "@Override public String getPort()", "class_method_signature": "CassandraUniqueIdentifierService.getPort()", "testcase": false, "constructor": false}, {"identifier": "createIdMapping", "parameters": "(String cloudId, String providerId)", "modifiers": "@Override public", "return": "CloudId", "signature": "CloudId createIdMapping(String cloudId, String providerId)", "full_signature": "@Override public CloudId createIdMapping(String cloudId, String providerId)", "class_method_signature": "CassandraUniqueIdentifierService.createIdMapping(String cloudId, String providerId)", "testcase": false, "constructor": false}], "file": "service/uis/rest/src/main/java/eu/europeana/cloud/service/uis/service/CassandraUniqueIdentifierService.java"}, "focal_method": {"identifier": "removeIdMapping", "parameters": "(String providerId, String recordId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void removeIdMapping(String providerId, String recordId)\n            throws DatabaseConnectionException, ProviderDoesNotExistException {\n        LOGGER.info(\"removeIdMapping() removing Id mapping for providerId='{}', recordId='{}' ...\", providerId,\n                recordId);\n        if (dataProviderDao.getProvider(providerId) == null) {\n            LOGGER.warn(\"ProviderDoesNotExistException for providerId='{}', recordId='{}'\", providerId, recordId);\n            throw new ProviderDoesNotExistException(new IdentifierErrorInfo(\n                    IdentifierErrorTemplate.PROVIDER_DOES_NOT_EXIST.getHttpCode(),\n                    IdentifierErrorTemplate.PROVIDER_DOES_NOT_EXIST.getErrorInfo(providerId)));\n        }\n        localIdDao.delete(providerId, recordId);\n        LOGGER.info(\"Id mapping removed for providerId='{}', recordId='{}'\", providerId, recordId);\n    }", "signature": "void removeIdMapping(String providerId, String recordId)", "full_signature": "@Override public void removeIdMapping(String providerId, String recordId)", "class_method_signature": "CassandraUniqueIdentifierService.removeIdMapping(String providerId, String recordId)", "testcase": false, "constructor": false, "invocations": ["info", "getProvider", "warn", "getHttpCode", "getErrorInfo", "delete", "info"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}