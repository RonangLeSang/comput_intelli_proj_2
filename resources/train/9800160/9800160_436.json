{"test_class": {"identifier": "RecordServiceClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public Recorder recorder = new Recorder();", "modifier": "@Rule\n    public", "type": "Recorder", "declarator": "recorder = new Recorder()", "var_name": "recorder"}, {"original_string": "private static final String BASE_URL_ISTI = \"http://ecloud.eanadev.org:8080/ecloud-service-mcs-rest-0.2-SNAPSHOT/\";", "modifier": "private static final", "type": "String", "declarator": "BASE_URL_ISTI = \"http://ecloud.eanadev.org:8080/ecloud-service-mcs-rest-0.2-SNAPSHOT/\"", "var_name": "BASE_URL_ISTI"}, {"original_string": "private static final String BASE_URL_LOCALHOST = \"http://localhost:8080/ecloud-service-mcs-rest-0.2-SNAPSHOT\";", "modifier": "private static final", "type": "String", "declarator": "BASE_URL_LOCALHOST = \"http://localhost:8080/ecloud-service-mcs-rest-0.2-SNAPSHOT\"", "var_name": "BASE_URL_LOCALHOST"}, {"original_string": "private final String baseUrl = BASE_URL_ISTI;", "modifier": "private final", "type": "String", "declarator": "baseUrl = BASE_URL_ISTI", "var_name": "baseUrl"}, {"original_string": "private static final String CLOUD_ID = \"W3KBLNZDKNQ\";", "modifier": "private static final", "type": "String", "declarator": "CLOUD_ID = \"W3KBLNZDKNQ\"", "var_name": "CLOUD_ID"}, {"original_string": "private static final String PROVIDER_ID = \"Provider001\";", "modifier": "private static final", "type": "String", "declarator": "PROVIDER_ID = \"Provider001\"", "var_name": "PROVIDER_ID"}, {"original_string": "private static final String REPRESENTATION_NAME = \"schema66\";", "modifier": "private static final", "type": "String", "declarator": "REPRESENTATION_NAME = \"schema66\"", "var_name": "REPRESENTATION_NAME"}, {"original_string": "private static final String VERSION = \"881c5c00-4259-11e4-9c35-00163eefc9c8\";", "modifier": "private static final", "type": "String", "declarator": "VERSION = \"881c5c00-4259-11e4-9c35-00163eefc9c8\"", "var_name": "VERSION"}, {"original_string": "private static final String NON_EXISTING_REPRESENTATION_NAME = \"NON_EXISTING_REPRESENTATION_NAME_12\";", "modifier": "private static final", "type": "String", "declarator": "NON_EXISTING_REPRESENTATION_NAME = \"NON_EXISTING_REPRESENTATION_NAME_12\"", "var_name": "NON_EXISTING_REPRESENTATION_NAME"}, {"original_string": "private static final String NON_EXISTING_REPRESENTATION_NAME_2 = \"NON_EXISTING_REPRESENTATION_NAME_2_12\";", "modifier": "private static final", "type": "String", "declarator": "NON_EXISTING_REPRESENTATION_NAME_2 = \"NON_EXISTING_REPRESENTATION_NAME_2_12\"", "var_name": "NON_EXISTING_REPRESENTATION_NAME_2"}, {"original_string": "private static final String username = \"Cristiano\";", "modifier": "private static final", "type": "String", "declarator": "username = \"Cristiano\"", "var_name": "username"}, {"original_string": "private static final String password = \"Ronaldo\";", "modifier": "private static final", "type": "String", "declarator": "password = \"Ronaldo\"", "var_name": "password"}], "file": "service/mcs/driver/src/test/java/eu/europeana/cloud/mcs/driver/RecordServiceClientTest.java"}, "test_case": {"identifier": "shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord", "parameters": "()", "modifiers": "@Betamax(tape = \"records_shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord\") @Test(expected = RepresentationNotExistsException.class) public", "return": "void", "body": "@Betamax(tape = \"records_shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord\")\n    @Test(expected = RepresentationNotExistsException.class)\n    public void shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord()\n            throws MCSException {\n        String cloudId = \"noSuchRecord\";\n        String representationName = \"schema1\";\n        RecordServiceClient instance = new RecordServiceClient(baseUrl,\n                username, password);\n\n        instance.getRepresentations(cloudId, representationName);\n    }", "signature": "void shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord()", "full_signature": "@Betamax(tape = \"records_shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord\") @Test(expected = RepresentationNotExistsException.class) public void shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord()", "class_method_signature": "RecordServiceClientTest.shouldThrowRepresentationNotExistsForGetRepresentationNameVersionsWhenNoRecord()", "testcase": true, "constructor": false, "invocations": ["getRepresentations"]}, "focal_class": {"identifier": "RecordServiceClient", "superclass": "extends MCSClient", "interfaces": "", "fields": [{"original_string": "private final Client client = ClientBuilder.newBuilder()\n            .register(JacksonFeature.class)\n            .register(MultiPartFeature.class)\n            .build();", "modifier": "private final", "type": "Client", "declarator": "client = ClientBuilder.newBuilder()\n            .register(JacksonFeature.class)\n            .register(MultiPartFeature.class)\n            .build()", "var_name": "client"}], "methods": [{"identifier": "RecordServiceClient", "parameters": "(String baseUrl)", "modifiers": "public", "return": "", "signature": " RecordServiceClient(String baseUrl)", "full_signature": "public  RecordServiceClient(String baseUrl)", "class_method_signature": "RecordServiceClient.RecordServiceClient(String baseUrl)", "testcase": false, "constructor": true}, {"identifier": "RecordServiceClient", "parameters": "(String baseUrl, final int connectTimeoutInMillis, final int readTimeoutInMillis)", "modifiers": "public", "return": "", "signature": " RecordServiceClient(String baseUrl, final int connectTimeoutInMillis, final int readTimeoutInMillis)", "full_signature": "public  RecordServiceClient(String baseUrl, final int connectTimeoutInMillis, final int readTimeoutInMillis)", "class_method_signature": "RecordServiceClient.RecordServiceClient(String baseUrl, final int connectTimeoutInMillis, final int readTimeoutInMillis)", "testcase": false, "constructor": true}, {"identifier": "RecordServiceClient", "parameters": "(String baseUrl, final String username, final String password)", "modifiers": "public", "return": "", "signature": " RecordServiceClient(String baseUrl, final String username, final String password)", "full_signature": "public  RecordServiceClient(String baseUrl, final String username, final String password)", "class_method_signature": "RecordServiceClient.RecordServiceClient(String baseUrl, final String username, final String password)", "testcase": false, "constructor": true}, {"identifier": "RecordServiceClient", "parameters": "(String baseUrl, final String authorizationHeader)", "modifiers": "public", "return": "", "signature": " RecordServiceClient(String baseUrl, final String authorizationHeader)", "full_signature": "public  RecordServiceClient(String baseUrl, final String authorizationHeader)", "class_method_signature": "RecordServiceClient.RecordServiceClient(String baseUrl, final String authorizationHeader)", "testcase": false, "constructor": true}, {"identifier": "RecordServiceClient", "parameters": "(String baseUrl, final String authorizationHeader, final String username, final String password,\n                               final int connectTimeoutInMillis, final int readTimeoutInMillis)", "modifiers": "public", "return": "", "signature": " RecordServiceClient(String baseUrl, final String authorizationHeader, final String username, final String password,\n                               final int connectTimeoutInMillis, final int readTimeoutInMillis)", "full_signature": "public  RecordServiceClient(String baseUrl, final String authorizationHeader, final String username, final String password,\n                               final int connectTimeoutInMillis, final int readTimeoutInMillis)", "class_method_signature": "RecordServiceClient.RecordServiceClient(String baseUrl, final String authorizationHeader, final String username, final String password,\n                               final int connectTimeoutInMillis, final int readTimeoutInMillis)", "testcase": false, "constructor": true}, {"identifier": "useAuthorizationHeader", "parameters": "(final String authorizationHeader)", "modifiers": "public", "return": "void", "signature": "void useAuthorizationHeader(final String authorizationHeader)", "full_signature": "public void useAuthorizationHeader(final String authorizationHeader)", "class_method_signature": "RecordServiceClient.useAuthorizationHeader(final String authorizationHeader)", "testcase": false, "constructor": false}, {"identifier": "getRecord", "parameters": "(String cloudId)", "modifiers": "public", "return": "Record", "signature": "Record getRecord(String cloudId)", "full_signature": "public Record getRecord(String cloudId)", "class_method_signature": "RecordServiceClient.getRecord(String cloudId)", "testcase": false, "constructor": false}, {"identifier": "deleteRecord", "parameters": "(String cloudId)", "modifiers": "public", "return": "void", "signature": "void deleteRecord(String cloudId)", "full_signature": "public void deleteRecord(String cloudId)", "class_method_signature": "RecordServiceClient.deleteRecord(String cloudId)", "testcase": false, "constructor": false}, {"identifier": "getRepresentations", "parameters": "(String cloudId)", "modifiers": "public", "return": "List<Representation>", "signature": "List<Representation> getRepresentations(String cloudId)", "full_signature": "public List<Representation> getRepresentations(String cloudId)", "class_method_signature": "RecordServiceClient.getRepresentations(String cloudId)", "testcase": false, "constructor": false}, {"identifier": "getRepresentation", "parameters": "(String cloudId, String representationName)", "modifiers": "public", "return": "Representation", "signature": "Representation getRepresentation(String cloudId, String representationName)", "full_signature": "public Representation getRepresentation(String cloudId, String representationName)", "class_method_signature": "RecordServiceClient.getRepresentation(String cloudId, String representationName)", "testcase": false, "constructor": false}, {"identifier": "createRepresentation", "parameters": "(String cloudId, String representationName, String providerId)", "modifiers": "public", "return": "URI", "signature": "URI createRepresentation(String cloudId, String representationName, String providerId)", "full_signature": "public URI createRepresentation(String cloudId, String representationName, String providerId)", "class_method_signature": "RecordServiceClient.createRepresentation(String cloudId, String representationName, String providerId)", "testcase": false, "constructor": false}, {"identifier": "createRepresentation", "parameters": "(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType)", "modifiers": "public", "return": "URI", "signature": "URI createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType)", "full_signature": "public URI createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType)", "class_method_signature": "RecordServiceClient.createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType)", "testcase": false, "constructor": false}, {"identifier": "createRepresentation", "parameters": "(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType,\n                                    String key, String value)", "modifiers": "public", "return": "URI", "signature": "URI createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType,\n                                    String key, String value)", "full_signature": "public URI createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType,\n                                    String key, String value)", "class_method_signature": "RecordServiceClient.createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String fileName,\n                                    String mediaType,\n                                    String key, String value)", "testcase": false, "constructor": false}, {"identifier": "createRepresentation", "parameters": "(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String mediaType)", "modifiers": "public", "return": "URI", "signature": "URI createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String mediaType)", "full_signature": "public URI createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String mediaType)", "class_method_signature": "RecordServiceClient.createRepresentation(String cloudId,\n                                    String representationName,\n                                    String providerId,\n                                    InputStream data,\n                                    String mediaType)", "testcase": false, "constructor": false}, {"identifier": "prepareRequestBody", "parameters": "(String providerId, InputStream data, String fileName, String mediaType)", "modifiers": "private", "return": "FormDataMultiPart", "signature": "FormDataMultiPart prepareRequestBody(String providerId, InputStream data, String fileName, String mediaType)", "full_signature": "private FormDataMultiPart prepareRequestBody(String providerId, InputStream data, String fileName, String mediaType)", "class_method_signature": "RecordServiceClient.prepareRequestBody(String providerId, InputStream data, String fileName, String mediaType)", "testcase": false, "constructor": false}, {"identifier": "deleteRepresentation", "parameters": "(String cloudId, String representationName)", "modifiers": "public", "return": "void", "signature": "void deleteRepresentation(String cloudId, String representationName)", "full_signature": "public void deleteRepresentation(String cloudId, String representationName)", "class_method_signature": "RecordServiceClient.deleteRepresentation(String cloudId, String representationName)", "testcase": false, "constructor": false}, {"identifier": "getRepresentations", "parameters": "(String cloudId, String representationName)", "modifiers": "public", "return": "List<Representation>", "signature": "List<Representation> getRepresentations(String cloudId, String representationName)", "full_signature": "public List<Representation> getRepresentations(String cloudId, String representationName)", "class_method_signature": "RecordServiceClient.getRepresentations(String cloudId, String representationName)", "testcase": false, "constructor": false}, {"identifier": "getRepresentation", "parameters": "(String cloudId, String representationName, String version)", "modifiers": "public", "return": "Representation", "signature": "Representation getRepresentation(String cloudId, String representationName, String version)", "full_signature": "public Representation getRepresentation(String cloudId, String representationName, String version)", "class_method_signature": "RecordServiceClient.getRepresentation(String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "getRepresentation", "parameters": "(String cloudId, String representationName,\n                                            String version, String key, String value)", "modifiers": "public", "return": "Representation", "signature": "Representation getRepresentation(String cloudId, String representationName,\n                                            String version, String key, String value)", "full_signature": "public Representation getRepresentation(String cloudId, String representationName,\n                                            String version, String key, String value)", "class_method_signature": "RecordServiceClient.getRepresentation(String cloudId, String representationName,\n                                            String version, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "deleteRepresentation", "parameters": "(String cloudId, String representationName, String version)", "modifiers": "public", "return": "void", "signature": "void deleteRepresentation(String cloudId, String representationName, String version)", "full_signature": "public void deleteRepresentation(String cloudId, String representationName, String version)", "class_method_signature": "RecordServiceClient.deleteRepresentation(String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "deleteRepresentation", "parameters": "(String cloudId, String representationName, String version,\n                                     String key, String value)", "modifiers": "public", "return": "void", "signature": "void deleteRepresentation(String cloudId, String representationName, String version,\n                                     String key, String value)", "full_signature": "public void deleteRepresentation(String cloudId, String representationName, String version,\n                                     String key, String value)", "class_method_signature": "RecordServiceClient.deleteRepresentation(String cloudId, String representationName, String version,\n                                     String key, String value)", "testcase": false, "constructor": false}, {"identifier": "copyRepresentation", "parameters": "(String cloudId, String representationName, String version)", "modifiers": "public", "return": "URI", "signature": "URI copyRepresentation(String cloudId, String representationName, String version)", "full_signature": "public URI copyRepresentation(String cloudId, String representationName, String version)", "class_method_signature": "RecordServiceClient.copyRepresentation(String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "persistRepresentation", "parameters": "(String cloudId, String representationName, String version)", "modifiers": "public", "return": "URI", "signature": "URI persistRepresentation(String cloudId, String representationName, String version)", "full_signature": "public URI persistRepresentation(String cloudId, String representationName, String version)", "class_method_signature": "RecordServiceClient.persistRepresentation(String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "grantPermissionsToVersion", "parameters": "(String cloudId, String representationName, String version,\n                                          String userName, Permission permission)", "modifiers": "public", "return": "void", "signature": "void grantPermissionsToVersion(String cloudId, String representationName, String version,\n                                          String userName, Permission permission)", "full_signature": "public void grantPermissionsToVersion(String cloudId, String representationName, String version,\n                                          String userName, Permission permission)", "class_method_signature": "RecordServiceClient.grantPermissionsToVersion(String cloudId, String representationName, String version,\n                                          String userName, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "revokePermissionsToVersion", "parameters": "(String cloudId, String representationName, String version,\n                                           String userName, Permission permission)", "modifiers": "public", "return": "void", "signature": "void revokePermissionsToVersion(String cloudId, String representationName, String version,\n                                           String userName, Permission permission)", "full_signature": "public void revokePermissionsToVersion(String cloudId, String representationName, String version,\n                                           String userName, Permission permission)", "class_method_signature": "RecordServiceClient.revokePermissionsToVersion(String cloudId, String representationName, String version,\n                                           String userName, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "permitVersion", "parameters": "(String cloudId, String representationName, String version)", "modifiers": "public", "return": "void", "signature": "void permitVersion(String cloudId, String representationName, String version)", "full_signature": "public void permitVersion(String cloudId, String representationName, String version)", "class_method_signature": "RecordServiceClient.permitVersion(String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "getRepresentationsByRevision", "parameters": "(\n            String cloudId, String representationName, String revisionName,\n            String revisionProviderId, String revisionTimestamp)", "modifiers": "public", "return": "List<Representation>", "signature": "List<Representation> getRepresentationsByRevision(\n            String cloudId, String representationName, String revisionName,\n            String revisionProviderId, String revisionTimestamp)", "full_signature": "public List<Representation> getRepresentationsByRevision(\n            String cloudId, String representationName, String revisionName,\n            String revisionProviderId, String revisionTimestamp)", "class_method_signature": "RecordServiceClient.getRepresentationsByRevision(\n            String cloudId, String representationName, String revisionName,\n            String revisionProviderId, String revisionTimestamp)", "testcase": false, "constructor": false}, {"identifier": "getRepresentationsByRevision", "parameters": "(\n            String cloudId,\n            String representationName,\n            String revisionName,\n            String revisionProviderId,\n            String revisionTimestamp,\n            String key,\n            String value)", "modifiers": "public", "return": "List<Representation>", "signature": "List<Representation> getRepresentationsByRevision(\n            String cloudId,\n            String representationName,\n            String revisionName,\n            String revisionProviderId,\n            String revisionTimestamp,\n            String key,\n            String value)", "full_signature": "public List<Representation> getRepresentationsByRevision(\n            String cloudId,\n            String representationName,\n            String revisionName,\n            String revisionProviderId,\n            String revisionTimestamp,\n            String key,\n            String value)", "class_method_signature": "RecordServiceClient.getRepresentationsByRevision(\n            String cloudId,\n            String representationName,\n            String revisionName,\n            String revisionProviderId,\n            String revisionTimestamp,\n            String key,\n            String value)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "RecordServiceClient.close()", "testcase": false, "constructor": false}, {"identifier": "throwException", "parameters": "(Response response)", "modifiers": "private", "return": "void", "signature": "void throwException(Response response)", "full_signature": "private void throwException(Response response)", "class_method_signature": "RecordServiceClient.throwException(Response response)", "testcase": false, "constructor": false}, {"identifier": "closeResponse", "parameters": "(Response response)", "modifiers": "private", "return": "void", "signature": "void closeResponse(Response response)", "full_signature": "private void closeResponse(Response response)", "class_method_signature": "RecordServiceClient.closeResponse(Response response)", "testcase": false, "constructor": false}, {"identifier": "handleResponse", "parameters": "(Response response)", "modifiers": "private", "return": "URI", "signature": "URI handleResponse(Response response)", "full_signature": "private URI handleResponse(Response response)", "class_method_signature": "RecordServiceClient.handleResponse(Response response)", "testcase": false, "constructor": false}, {"identifier": "handleDeleteRequest", "parameters": "(Builder request)", "modifiers": "private", "return": "void", "signature": "void handleDeleteRequest(Builder request)", "full_signature": "private void handleDeleteRequest(Builder request)", "class_method_signature": "RecordServiceClient.handleDeleteRequest(Builder request)", "testcase": false, "constructor": false}, {"identifier": "handleRepresentationResponse", "parameters": "(WebTarget webtarget, Builder request)", "modifiers": "private", "return": "Representation", "signature": "Representation handleRepresentationResponse(WebTarget webtarget, Builder request)", "full_signature": "private Representation handleRepresentationResponse(WebTarget webtarget, Builder request)", "class_method_signature": "RecordServiceClient.handleRepresentationResponse(WebTarget webtarget, Builder request)", "testcase": false, "constructor": false}, {"identifier": "handleRepresentationResponse", "parameters": "(Form form, Builder request, Response response)", "modifiers": "private", "return": "URI", "signature": "URI handleRepresentationResponse(Form form, Builder request, Response response)", "full_signature": "private URI handleRepresentationResponse(Form form, Builder request, Response response)", "class_method_signature": "RecordServiceClient.handleRepresentationResponse(Form form, Builder request, Response response)", "testcase": false, "constructor": false}], "file": "service/mcs/driver/src/main/java/eu/europeana/cloud/mcs/driver/RecordServiceClient.java"}, "focal_method": {"identifier": "getRepresentations", "parameters": "(String cloudId)", "modifiers": "public", "return": "List<Representation>", "body": "public List<Representation> getRepresentations(String cloudId) throws MCSException {\n\n        WebTarget target = client\n                .target(baseUrl)\n                .path(REPRESENTATIONS_RESOURCE)\n                .resolveTemplate(CLOUD_ID, cloudId);\n\n        Response response = null;\n        try {\n            response = target.request().get();\n            if (response.getStatus() == Response.Status.OK.getStatusCode()) {\n                return response.readEntity(new GenericType<List<Representation>>() {\n                }); //formatting here is irreadble\n            }\n\n            ErrorInfo errorInfo = response.readEntity(ErrorInfo.class);\n            throw MCSExceptionProvider.generateException(errorInfo);\n\n        } finally {\n            closeResponse(response);\n        }\n    }", "signature": "List<Representation> getRepresentations(String cloudId)", "full_signature": "public List<Representation> getRepresentations(String cloudId)", "class_method_signature": "RecordServiceClient.getRepresentations(String cloudId)", "testcase": false, "constructor": false, "invocations": ["resolveTemplate", "path", "target", "get", "request", "getStatus", "getStatusCode", "readEntity", "readEntity", "generateException", "closeResponse"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}