{"test_class": {"identifier": "LinkCheckBoltTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock(name = \"outputCollector\")\n    private OutputCollector outputCollector;", "modifier": "@Mock(name = \"outputCollector\")\n    private", "type": "OutputCollector", "declarator": "outputCollector", "var_name": "outputCollector"}, {"original_string": "@Mock\n    private LinkChecker linkChecker;", "modifier": "@Mock\n    private", "type": "LinkChecker", "declarator": "linkChecker", "var_name": "linkChecker"}, {"original_string": "@InjectMocks\n    private LinkCheckBolt linkCheckBolt = new LinkCheckBolt();", "modifier": "@InjectMocks\n    private", "type": "LinkCheckBolt", "declarator": "linkCheckBolt = new LinkCheckBolt()", "var_name": "linkCheckBolt"}, {"original_string": "@Captor\n    ArgumentCaptor<Values> captor = ArgumentCaptor.forClass(Values.class);", "modifier": "@Captor", "type": "ArgumentCaptor<Values>", "declarator": "captor = ArgumentCaptor.forClass(Values.class)", "var_name": "captor"}], "file": "service/dps/storm/topologies/link-check/src/test/java/eu/europeana/cloud/service/dps/storm/topologies/link/check/LinkCheckBoltTest.java"}, "test_case": {"identifier": "shouldCheckOneLinkWithoutEmittingTuple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCheckOneLinkWithoutEmittingTuple() throws Exception {\n        Tuple anchorTuple = mock(TupleImpl.class);\n        StormTaskTuple tuple = prepareRandomTuple();\n        linkCheckBolt.execute(anchorTuple, tuple);\n        verify(outputCollector, times(0)).emit(eq(\"NotificationStream\"), any(Tuple.class), Mockito.anyList());\n        verify(linkChecker, times(1)).performLinkChecking(tuple.getParameter(PluginParameterKeys.RESOURCE_URL));\n    }", "signature": "void shouldCheckOneLinkWithoutEmittingTuple()", "full_signature": "@Test public void shouldCheckOneLinkWithoutEmittingTuple()", "class_method_signature": "LinkCheckBoltTest.shouldCheckOneLinkWithoutEmittingTuple()", "testcase": true, "constructor": false, "invocations": ["mock", "prepareRandomTuple", "execute", "emit", "verify", "times", "eq", "any", "anyList", "performLinkChecking", "verify", "times", "getParameter"]}, "focal_class": {"identifier": "LinkCheckBolt", "superclass": "extends AbstractDpsBolt", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LinkCheckBolt.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LinkCheckBolt.class)", "var_name": "LOGGER"}, {"original_string": "private static final int CACHE_SIZE = 1024;", "modifier": "private static final", "type": "int", "declarator": "CACHE_SIZE = 1024", "var_name": "CACHE_SIZE"}, {"original_string": "transient Map<String, FileInfo> cache;", "modifier": "transient", "type": "Map<String, FileInfo>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private transient LinkChecker linkChecker;", "modifier": "private transient", "type": "LinkChecker", "declarator": "linkChecker", "var_name": "linkChecker"}], "methods": [{"identifier": "prepare", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void prepare()", "full_signature": "@Override public void prepare()", "class_method_signature": "LinkCheckBolt.prepare()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Tuple anchorTuple, StormTaskTuple tuple)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Tuple anchorTuple, StormTaskTuple tuple)", "full_signature": "@Override public void execute(Tuple anchorTuple, StormTaskTuple tuple)", "class_method_signature": "LinkCheckBolt.execute(Tuple anchorTuple, StormTaskTuple tuple)", "testcase": false, "constructor": false}, {"identifier": "ackAllSourceTuplesForFile", "parameters": "(FileInfo edmFile)", "modifiers": "private", "return": "void", "signature": "void ackAllSourceTuplesForFile(FileInfo edmFile)", "full_signature": "private void ackAllSourceTuplesForFile(FileInfo edmFile)", "class_method_signature": "LinkCheckBolt.ackAllSourceTuplesForFile(FileInfo edmFile)", "testcase": false, "constructor": false}, {"identifier": "readResourceInfoFromTuple", "parameters": "(StormTaskTuple tuple)", "modifiers": "private", "return": "ResourceInfo", "signature": "ResourceInfo readResourceInfoFromTuple(StormTaskTuple tuple)", "full_signature": "private ResourceInfo readResourceInfoFromTuple(StormTaskTuple tuple)", "class_method_signature": "LinkCheckBolt.readResourceInfoFromTuple(StormTaskTuple tuple)", "testcase": false, "constructor": false}, {"identifier": "hasLinksForCheck", "parameters": "(ResourceInfo resourceInfo)", "modifiers": "private", "return": "boolean", "signature": "boolean hasLinksForCheck(ResourceInfo resourceInfo)", "full_signature": "private boolean hasLinksForCheck(ResourceInfo resourceInfo)", "class_method_signature": "LinkCheckBolt.hasLinksForCheck(ResourceInfo resourceInfo)", "testcase": false, "constructor": false}, {"identifier": "checkProvidedLink", "parameters": "(StormTaskTuple tuple, ResourceInfo resourceInfo)", "modifiers": "private", "return": "FileInfo", "signature": "FileInfo checkProvidedLink(StormTaskTuple tuple, ResourceInfo resourceInfo)", "full_signature": "private FileInfo checkProvidedLink(StormTaskTuple tuple, ResourceInfo resourceInfo)", "class_method_signature": "LinkCheckBolt.checkProvidedLink(StormTaskTuple tuple, ResourceInfo resourceInfo)", "testcase": false, "constructor": false}, {"identifier": "isFileFullyProcessed", "parameters": "(FileInfo fileInfo)", "modifiers": "private", "return": "boolean", "signature": "boolean isFileFullyProcessed(FileInfo fileInfo)", "full_signature": "private boolean isFileFullyProcessed(FileInfo fileInfo)", "class_method_signature": "LinkCheckBolt.isFileFullyProcessed(FileInfo fileInfo)", "testcase": false, "constructor": false}, {"identifier": "takeFileFromCache", "parameters": "(ResourceInfo resourceInfo)", "modifiers": "private", "return": "FileInfo", "signature": "FileInfo takeFileFromCache(ResourceInfo resourceInfo)", "full_signature": "private FileInfo takeFileFromCache(ResourceInfo resourceInfo)", "class_method_signature": "LinkCheckBolt.takeFileFromCache(ResourceInfo resourceInfo)", "testcase": false, "constructor": false}, {"identifier": "putFileToCache", "parameters": "(FileInfo fileInfo)", "modifiers": "private", "return": "void", "signature": "void putFileToCache(FileInfo fileInfo)", "full_signature": "private void putFileToCache(FileInfo fileInfo)", "class_method_signature": "LinkCheckBolt.putFileToCache(FileInfo fileInfo)", "testcase": false, "constructor": false}, {"identifier": "checkLink", "parameters": "(ResourceInfo resourceInfo, FileInfo fileInfo)", "modifiers": "private", "return": "void", "signature": "void checkLink(ResourceInfo resourceInfo, FileInfo fileInfo)", "full_signature": "private void checkLink(ResourceInfo resourceInfo, FileInfo fileInfo)", "class_method_signature": "LinkCheckBolt.checkLink(ResourceInfo resourceInfo, FileInfo fileInfo)", "testcase": false, "constructor": false}, {"identifier": "cleanInvalidData", "parameters": "(StormTaskTuple tuple)", "modifiers": "protected", "return": "void", "signature": "void cleanInvalidData(StormTaskTuple tuple)", "full_signature": "protected void cleanInvalidData(StormTaskTuple tuple)", "class_method_signature": "LinkCheckBolt.cleanInvalidData(StormTaskTuple tuple)", "testcase": false, "constructor": false}, {"identifier": "cachedFileIsFromPreviousAttempt", "parameters": "(StormTaskTuple tuple, FileInfo cachedEdmFile)", "modifiers": "private", "return": "boolean", "signature": "boolean cachedFileIsFromPreviousAttempt(StormTaskTuple tuple, FileInfo cachedEdmFile)", "full_signature": "private boolean cachedFileIsFromPreviousAttempt(StormTaskTuple tuple, FileInfo cachedEdmFile)", "class_method_signature": "LinkCheckBolt.cachedFileIsFromPreviousAttempt(StormTaskTuple tuple, FileInfo cachedEdmFile)", "testcase": false, "constructor": false}], "file": "service/dps/storm/topologies/link-check/src/main/java/eu/europeana/cloud/service/dps/storm/topologies/link/check/LinkCheckBolt.java"}, "focal_method": {"identifier": "execute", "parameters": "(Tuple anchorTuple, StormTaskTuple tuple)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(Tuple anchorTuple, StormTaskTuple tuple) {\n        ResourceInfo resourceInfo = readResourceInfoFromTuple(tuple);\n        if (!hasLinksForCheck(resourceInfo)) {\n            emitSuccessNotification(anchorTuple, tuple.getTaskId(), tuple.getFileUrl(), \"\", \"The EDM file has no resources\", \"\",\n                    StormTaskTupleHelper.getRecordProcessingStartTime(tuple));\n            outputCollector.ack(anchorTuple);\n        } else {\n            FileInfo edmFile = checkProvidedLink(tuple, resourceInfo);\n            edmFile.addSourceTuple(anchorTuple);\n            if (isFileFullyProcessed(edmFile)) {\n                cache.remove(edmFile.fileUrl);\n                if (edmFile.errors == null || edmFile.errors.isEmpty())\n                    emitSuccessNotification(anchorTuple, tuple.getTaskId(), tuple.getFileUrl(), \"\", \"\", \"\",\n                            StormTaskTupleHelper.getRecordProcessingStartTime(tuple));\n                else\n                    emitSuccessNotification(anchorTuple, tuple.getTaskId(), tuple.getFileUrl(), \"\", \"\", \"\", \"resource exception\", edmFile.errors,\n                            StormTaskTupleHelper.getRecordProcessingStartTime(tuple));\n                ackAllSourceTuplesForFile(edmFile);\n            }\n        }\n    }", "signature": "void execute(Tuple anchorTuple, StormTaskTuple tuple)", "full_signature": "@Override public void execute(Tuple anchorTuple, StormTaskTuple tuple)", "class_method_signature": "LinkCheckBolt.execute(Tuple anchorTuple, StormTaskTuple tuple)", "testcase": false, "constructor": false, "invocations": ["readResourceInfoFromTuple", "hasLinksForCheck", "emitSuccessNotification", "getTaskId", "getFileUrl", "getRecordProcessingStartTime", "ack", "checkProvidedLink", "addSourceTuple", "isFileFullyProcessed", "remove", "isEmpty", "emitSuccessNotification", "getTaskId", "getFileUrl", "getRecordProcessingStartTime", "emitSuccessNotification", "getTaskId", "getFileUrl", "getRecordProcessingStartTime", "ackAllSourceTuplesForFile"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}