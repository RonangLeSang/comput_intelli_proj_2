{"test_class": {"identifier": "RepresentationResourceTest", "superclass": "extends AbstractResourceTest", "interfaces": "", "fields": [{"original_string": "private RecordService recordService;", "modifier": "private", "type": "RecordService", "declarator": "recordService", "var_name": "recordService"}, {"original_string": "static final private String globalId = \"1\";", "modifier": "static final private", "type": "String", "declarator": "globalId = \"1\"", "var_name": "globalId"}, {"original_string": "static final private String schema = \"DC\";", "modifier": "static final private", "type": "String", "declarator": "schema = \"DC\"", "var_name": "schema"}, {"original_string": "static final private String version = \"1.0\";", "modifier": "static final private", "type": "String", "declarator": "version = \"1.0\"", "var_name": "version"}, {"original_string": "static final private String providerID = \"DLF\";", "modifier": "static final private", "type": "String", "declarator": "providerID = \"DLF\"", "var_name": "providerID"}, {"original_string": "static final private Representation representation = new Representation(globalId, schema, version, null, null,\n            \"DLF\", Arrays.asList(new File(\"1.xml\", \"text/xml\", \"91162629d258a876ee994e9233b2ad87\", \"2013-01-01\", 12345,\n                            null)),null, true, new Date());", "modifier": "static final private", "type": "Representation", "declarator": "representation = new Representation(globalId, schema, version, null, null,\n            \"DLF\", Arrays.asList(new File(\"1.xml\", \"text/xml\", \"91162629d258a876ee994e9233b2ad87\", \"2013-01-01\", 12345,\n                            null)),null, true, new Date())", "var_name": "representation"}], "file": "service/mcs/rest/src/test/java/eu/europeana/cloud/service/mcs/rest/RepresentationResourceTest.java"}, "test_case": {"identifier": "getRepresentationReturns404IfRepresentationOrRecordDoesNotExists", "parameters": "(Throwable exception, String errorCode)", "modifiers": "@Test @Parameters(method = \"representationErrors\") public", "return": "void", "body": "@Test\n    @Parameters(method = \"representationErrors\")\n    public void getRepresentationReturns404IfRepresentationOrRecordDoesNotExists(Throwable exception, String errorCode)\n            throws Exception {\n        when(recordService.getRepresentation(globalId, schema)).thenThrow(exception);\n\n        ResultActions response = mockMvc.perform(get(URITools.getRepresentationPath(globalId, schema))\n                .accept(MediaType.APPLICATION_XML))\n                .andExpect(status().isNotFound());\n\n        ErrorInfo errorInfo = responseContent(response,ErrorInfo.class,MediaType.APPLICATION_XML);\n        assertThat(errorInfo.getErrorCode(), is(errorCode));\n        verify(recordService, times(1)).getRepresentation(globalId, schema);\n        verifyNoMoreInteractions(recordService);\n    }", "signature": "void getRepresentationReturns404IfRepresentationOrRecordDoesNotExists(Throwable exception, String errorCode)", "full_signature": "@Test @Parameters(method = \"representationErrors\") public void getRepresentationReturns404IfRepresentationOrRecordDoesNotExists(Throwable exception, String errorCode)", "class_method_signature": "RepresentationResourceTest.getRepresentationReturns404IfRepresentationOrRecordDoesNotExists(Throwable exception, String errorCode)", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "getRepresentation", "andExpect", "perform", "accept", "get", "getRepresentationPath", "isNotFound", "status", "responseContent", "assertThat", "getErrorCode", "is", "getRepresentation", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "RepresentationResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String REPRESENTATION_CLASS_NAME = Representation.class.getName();", "modifier": "private static final", "type": "String", "declarator": "REPRESENTATION_CLASS_NAME = Representation.class.getName()", "var_name": "REPRESENTATION_CLASS_NAME"}, {"original_string": "private final RecordService recordService;", "modifier": "private final", "type": "RecordService", "declarator": "recordService", "var_name": "recordService"}, {"original_string": "private final MutableAclService mutableAclService;", "modifier": "private final", "type": "MutableAclService", "declarator": "mutableAclService", "var_name": "mutableAclService"}], "methods": [{"identifier": "RepresentationResource", "parameters": "(RecordService recordService,\n\t\t\t\t\t\t\t\t  MutableAclService mutableAclService)", "modifiers": "public", "return": "", "signature": " RepresentationResource(RecordService recordService,\n\t\t\t\t\t\t\t\t  MutableAclService mutableAclService)", "full_signature": "public  RepresentationResource(RecordService recordService,\n\t\t\t\t\t\t\t\t  MutableAclService mutableAclService)", "class_method_signature": "RepresentationResource.RepresentationResource(RecordService recordService,\n\t\t\t\t\t\t\t\t  MutableAclService mutableAclService)", "testcase": false, "constructor": true}, {"identifier": "getRepresentation", "parameters": "(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "modifiers": "@GetMapping(produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }) @PostAuthorize(\"hasPermission\" + \"( \" + \" (#cloudId).concat('/').concat(#representationName).concat('/').concat(returnObject.version) ,\" + \" 'eu.europeana.cloud.common.model.Representation', read\" + \")\") @ResponseBody public", "return": "Representation", "signature": "Representation getRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "full_signature": "@GetMapping(produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }) @PostAuthorize(\"hasPermission\" + \"( \" + \" (#cloudId).concat('/').concat(#representationName).concat('/').concat(returnObject.version) ,\" + \" 'eu.europeana.cloud.common.model.Representation', read\" + \")\") @ResponseBody public Representation getRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "class_method_signature": "RepresentationResource.getRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "testcase": false, "constructor": false}, {"identifier": "deleteRepresentation", "parameters": "(\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "modifiers": "@DeleteMapping @ResponseStatus(HttpStatus.NO_CONTENT) @PreAuthorize(\"hasRole('ROLE_ADMIN')\") public", "return": "void", "signature": "void deleteRepresentation(\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "full_signature": "@DeleteMapping @ResponseStatus(HttpStatus.NO_CONTENT) @PreAuthorize(\"hasRole('ROLE_ADMIN')\") public void deleteRepresentation(\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "class_method_signature": "RepresentationResource.deleteRepresentation(\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "testcase": false, "constructor": false}, {"identifier": "createRepresentation", "parameters": "(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName,\n\t\t\t@RequestParam String providerId)", "modifiers": "@PostMapping(consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE}) @PreAuthorize(\"isAuthenticated()\") public", "return": "ResponseEntity<Void>", "signature": "ResponseEntity<Void> createRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName,\n\t\t\t@RequestParam String providerId)", "full_signature": "@PostMapping(consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE}) @PreAuthorize(\"isAuthenticated()\") public ResponseEntity<Void> createRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName,\n\t\t\t@RequestParam String providerId)", "class_method_signature": "RepresentationResource.createRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName,\n\t\t\t@RequestParam String providerId)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(HttpServletRequest httpServletRequest, Representation representation)", "modifiers": "private", "return": "void", "signature": "void prepare(HttpServletRequest httpServletRequest, Representation representation)", "full_signature": "private void prepare(HttpServletRequest httpServletRequest, Representation representation)", "class_method_signature": "RepresentationResource.prepare(HttpServletRequest httpServletRequest, Representation representation)", "testcase": false, "constructor": false}], "file": "service/mcs/rest/src/main/java/eu/europeana/cloud/service/mcs/rest/RepresentationResource.java"}, "focal_method": {"identifier": "getRepresentation", "parameters": "(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "modifiers": "@GetMapping(produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }) @PostAuthorize(\"hasPermission\" + \"( \" + \" (#cloudId).concat('/').concat(#representationName).concat('/').concat(returnObject.version) ,\" + \" 'eu.europeana.cloud.common.model.Representation', read\" + \")\") @ResponseBody public", "return": "Representation", "body": "@GetMapping(produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })\n    @PostAuthorize(\"hasPermission\"\n    \t    + \"( \"\n    \t    + \" (#cloudId).concat('/').concat(#representationName).concat('/').concat(returnObject.version) ,\"\n    \t    + \" 'eu.europeana.cloud.common.model.Representation', read\" + \")\")\n\t@ResponseBody\n\tpublic Representation getRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName) throws RepresentationNotExistsException {\n\n\t\tRepresentation info = recordService.getRepresentation(cloudId, representationName);\n\t\tprepare(httpServletRequest, info);\n\t\treturn info;\n\t}", "signature": "Representation getRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "full_signature": "@GetMapping(produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }) @PostAuthorize(\"hasPermission\" + \"( \" + \" (#cloudId).concat('/').concat(#representationName).concat('/').concat(returnObject.version) ,\" + \" 'eu.europeana.cloud.common.model.Representation', read\" + \")\") @ResponseBody public Representation getRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "class_method_signature": "RepresentationResource.getRepresentation(\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\t@PathVariable String cloudId,\n\t\t\t@PathVariable String representationName)", "testcase": false, "constructor": false, "invocations": ["getRepresentation", "prepare"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}