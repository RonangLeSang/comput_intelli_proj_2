{"test_class": {"identifier": "OaiPmhFilesCounterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().port(9999));", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(wireMockConfig().port(9999))", "var_name": "wireMockRule"}, {"original_string": "private final static String OAI_PMH_ENDPOINT = \"http://localhost:9999/oai-phm/\";", "modifier": "private final static", "type": "String", "declarator": "OAI_PMH_ENDPOINT = \"http://localhost:9999/oai-phm/\"", "var_name": "OAI_PMH_ENDPOINT"}], "file": "service/dps/rest/src/test/java/eu/europeana/cloud/service/dps/utils/files/counter/OaiPmhFilesCounterTest.java"}, "test_case": {"identifier": "shouldReturnMinusOneWhenIncorrectCompleteListSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnMinusOneWhenIncorrectCompleteListSize() throws Exception {\n        stubFor(get(urlEqualTo(\"/oai-phm/?verb=ListIdentifiers\"))\n                .willReturn(response200XmlContent(getFileContent(\"/oaiListIdentifiersIncorrectCompleteListSize.xml\"))));\n        OaiPmhFilesCounter counter = new OaiPmhFilesCounter();\n        OAIPMHHarvestingDetails details = new OAIPMHHarvestingDetails(null, null, null, null, null);\n        DpsTask task = getDpsTask(details);\n\n        assertEquals(-1, counter.getFilesCount(task));\n    }", "signature": "void shouldReturnMinusOneWhenIncorrectCompleteListSize()", "full_signature": "@Test public void shouldReturnMinusOneWhenIncorrectCompleteListSize()", "class_method_signature": "OaiPmhFilesCounterTest.shouldReturnMinusOneWhenIncorrectCompleteListSize()", "testcase": true, "constructor": false, "invocations": ["stubFor", "willReturn", "get", "urlEqualTo", "response200XmlContent", "getFileContent", "getDpsTask", "assertEquals", "getFilesCount"]}, "focal_class": {"identifier": "OaiPmhFilesCounter", "superclass": "extends FilesCounter", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(OaiPmhFilesCounter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(OaiPmhFilesCounter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String COMPLETE_LIST_SIZE_XPATH =\n            \"/*[local-name()='OAI-PMH']\" +\n                    \"/*[local-name()='ListIdentifiers']\" +\n                    \"/*[local-name()='resumptionToken']\";", "modifier": "private static final", "type": "String", "declarator": "COMPLETE_LIST_SIZE_XPATH =\n            \"/*[local-name()='OAI-PMH']\" +\n                    \"/*[local-name()='ListIdentifiers']\" +\n                    \"/*[local-name()='resumptionToken']\"", "var_name": "COMPLETE_LIST_SIZE_XPATH"}, {"original_string": "public static final String COMPLETE_LIST_SIZE = \"completeListSize\";", "modifier": "public static final", "type": "String", "declarator": "COMPLETE_LIST_SIZE = \"completeListSize\"", "var_name": "COMPLETE_LIST_SIZE"}, {"original_string": "private static final int DEFAULT_LIST_SIZE = -1;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_LIST_SIZE = -1", "var_name": "DEFAULT_LIST_SIZE"}, {"original_string": "private static final int DEFAULT_RETRIES = 3;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_RETRIES = 3", "var_name": "DEFAULT_RETRIES"}, {"original_string": "private static final int SLEEP_TIME = 5000;", "modifier": "private static final", "type": "int", "declarator": "SLEEP_TIME = 5000", "var_name": "SLEEP_TIME"}], "methods": [{"identifier": "getFilesCount", "parameters": "(DpsTask task)", "modifiers": "@Override public", "return": "int", "signature": "int getFilesCount(DpsTask task)", "full_signature": "@Override public int getFilesCount(DpsTask task)", "class_method_signature": "OaiPmhFilesCounter.getFilesCount(DpsTask task)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryUrl", "parameters": "(Map<InputDataType, List<String>> inputData)", "modifiers": "private", "return": "String", "signature": "String getRepositoryUrl(Map<InputDataType, List<String>> inputData)", "full_signature": "private String getRepositoryUrl(Map<InputDataType, List<String>> inputData)", "class_method_signature": "OaiPmhFilesCounter.getRepositoryUrl(Map<InputDataType, List<String>> inputData)", "testcase": false, "constructor": false}, {"identifier": "getListSizeForSchemasAndSet", "parameters": "(String repositoryUrl, ListIdentifiersParameters params, Set<String> schemas)", "modifiers": "private", "return": "int", "signature": "int getListSizeForSchemasAndSet(String repositoryUrl, ListIdentifiersParameters params, Set<String> schemas)", "full_signature": "private int getListSizeForSchemasAndSet(String repositoryUrl, ListIdentifiersParameters params, Set<String> schemas)", "class_method_signature": "OaiPmhFilesCounter.getListSizeForSchemasAndSet(String repositoryUrl, ListIdentifiersParameters params, Set<String> schemas)", "testcase": false, "constructor": false}, {"identifier": "getSizeForSchemaAndSet", "parameters": "(String repositoryUrl, ListIdentifiersParameters params)", "modifiers": "private", "return": "int", "signature": "int getSizeForSchemaAndSet(String repositoryUrl, ListIdentifiersParameters params)", "full_signature": "private int getSizeForSchemaAndSet(String repositoryUrl, ListIdentifiersParameters params)", "class_method_signature": "OaiPmhFilesCounter.getSizeForSchemaAndSet(String repositoryUrl, ListIdentifiersParameters params)", "testcase": false, "constructor": false}, {"identifier": "readCompleteListSizeFromXML", "parameters": "(InputStream stream)", "modifiers": "private", "return": "int", "signature": "int readCompleteListSizeFromXML(InputStream stream)", "full_signature": "private int readCompleteListSizeFromXML(InputStream stream)", "class_method_signature": "OaiPmhFilesCounter.readCompleteListSizeFromXML(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "specified", "parameters": "(Set<String> strings)", "modifiers": "private", "return": "boolean", "signature": "boolean specified(Set<String> strings)", "full_signature": "private boolean specified(Set<String> strings)", "class_method_signature": "OaiPmhFilesCounter.specified(Set<String> strings)", "testcase": false, "constructor": false}], "file": "service/dps/rest/src/main/java/eu/europeana/cloud/service/dps/utils/files/counter/OaiPmhFilesCounter.java"}, "focal_method": {"identifier": "getFilesCount", "parameters": "(DpsTask task)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getFilesCount(DpsTask task) throws TaskSubmissionException {\n\n        OAIPMHHarvestingDetails harvestingDetails = task.getHarvestingDetails();\n        if (harvestingDetails != null) {\n            if (specified(harvestingDetails.getExcludedSets()) || specified(harvestingDetails.getExcludedSchemas())) {\n                LOGGER.info(\"Cannot count completeListSize for taskId= {} . Excluded sets or schemas are not supported\", task.getTaskId());\n                return DEFAULT_LIST_SIZE;\n            }\n\n            String repositoryUrl = getRepositoryUrl(task.getInputData());\n            if (repositoryUrl != null) {\n                ListIdentifiersParameters params = new ListIdentifiersParameters()\n                        .withFrom(harvestingDetails.getDateFrom())\n                        .withUntil(harvestingDetails.getDateUntil());\n\n                Set<String> schemas = harvestingDetails.getSchemas();\n                Set<String> sets = harvestingDetails.getSets();\n\n                if (specified(sets)) {\n                    if (sets.size() == 1) {\n                        params.withSetSpec(sets.iterator().next());\n                    } else {\n                        LOGGER.info(\"Cannot count completeListSize for taskId= {} . Specifying multiple sets is not supported \", task.getTaskId());\n                        return DEFAULT_LIST_SIZE;\n                    }\n                }\n\n                try {\n                    return getListSizeForSchemasAndSet(repositoryUrl, params, schemas);\n                } catch (OAIResponseParseException e) {\n                    LOGGER.info(\"Cannot count completeListSize for taskId= {}\", task.getTaskId(), e);\n                    return DEFAULT_LIST_SIZE;\n                } catch (OAIRequestException e) {\n                    String logMessage = \"Cannot complete the request for the following repository URL \" + repositoryUrl;\n                    LOGGER.info(logMessage, e);\n                    throw new TaskSubmissionException(logMessage + \" Because: \" + e.getMessage(), e);\n                }\n            } else {\n                throw new TaskSubmissionException(\"The task was dropped because the repositoryUrl can not be null\");\n            }\n        } else\n            return DEFAULT_LIST_SIZE;\n    }", "signature": "int getFilesCount(DpsTask task)", "full_signature": "@Override public int getFilesCount(DpsTask task)", "class_method_signature": "OaiPmhFilesCounter.getFilesCount(DpsTask task)", "testcase": false, "constructor": false, "invocations": ["getHarvestingDetails", "specified", "getExcludedSets", "specified", "getExcludedSchemas", "info", "getTaskId", "getRepositoryUrl", "getInputData", "withUntil", "withFrom", "getDateFrom", "getDateUntil", "getSchemas", "getSets", "specified", "size", "withSetSpec", "next", "iterator", "info", "getTaskId", "getListSizeForSchemasAndSet", "info", "getTaskId", "info", "getMessage"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}