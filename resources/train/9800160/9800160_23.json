{"test_class": {"identifier": "CassandraHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<String> primaryKeys;", "modifier": "private static", "type": "List<String>", "declarator": "primaryKeys", "var_name": "primaryKeys"}, {"original_string": "private static CassandraConnectionProvider cassandraConnectionProvider;", "modifier": "private static", "type": "CassandraConnectionProvider", "declarator": "cassandraConnectionProvider", "var_name": "cassandraConnectionProvider"}, {"original_string": "private static Session session;", "modifier": "private static", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private static PreparedStatement preparedStatement;", "modifier": "private static", "type": "PreparedStatement", "declarator": "preparedStatement", "var_name": "preparedStatement"}, {"original_string": "private static BoundStatement boundStatement;", "modifier": "private static", "type": "BoundStatement", "declarator": "boundStatement", "var_name": "boundStatement"}], "file": "tools/data-validator/src/test/java/data/validator/cql/CassandraHelperTest.java"}, "test_case": {"identifier": "prepareBoundStatementForMatchingTargetTableTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void prepareBoundStatementForMatchingTargetTableTest() {\n        assertThat(CassandraHelper.prepareBoundStatementForMatchingTargetTable(cassandraConnectionProvider, \"table\", primaryKeys), is(boundStatement));\n    }", "signature": "void prepareBoundStatementForMatchingTargetTableTest()", "full_signature": "@Test public void prepareBoundStatementForMatchingTargetTableTest()", "class_method_signature": "CassandraHelperTest.prepareBoundStatementForMatchingTargetTableTest()", "testcase": true, "constructor": false, "invocations": ["assertThat", "prepareBoundStatementForMatchingTargetTable", "is"]}, "focal_class": {"identifier": "CassandraHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "prepareBoundStatementForMatchingTargetTable", "parameters": "(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "modifiers": "public static", "return": "BoundStatement", "signature": "BoundStatement prepareBoundStatementForMatchingTargetTable(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "full_signature": "public static BoundStatement prepareBoundStatementForMatchingTargetTable(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "class_method_signature": "CassandraHelper.prepareBoundStatementForMatchingTargetTable(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryKeysFromSourceTable", "parameters": "(CassandraConnectionProvider cassandraConnectionProvider, String sourceTableName, List<String> primaryKeys)", "modifiers": "public static", "return": "ResultSet", "signature": "ResultSet getPrimaryKeysFromSourceTable(CassandraConnectionProvider cassandraConnectionProvider, String sourceTableName, List<String> primaryKeys)", "full_signature": "public static ResultSet getPrimaryKeysFromSourceTable(CassandraConnectionProvider cassandraConnectionProvider, String sourceTableName, List<String> primaryKeys)", "class_method_signature": "CassandraHelper.getPrimaryKeysFromSourceTable(CassandraConnectionProvider cassandraConnectionProvider, String sourceTableName, List<String> primaryKeys)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryKeysNames", "parameters": "(CassandraConnectionProvider cassandraConnectionProvider, String tableName, String selectColumnNames)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getPrimaryKeysNames(CassandraConnectionProvider cassandraConnectionProvider, String tableName, String selectColumnNames)", "full_signature": "public static List<String> getPrimaryKeysNames(CassandraConnectionProvider cassandraConnectionProvider, String tableName, String selectColumnNames)", "class_method_signature": "CassandraHelper.getPrimaryKeysNames(CassandraConnectionProvider cassandraConnectionProvider, String tableName, String selectColumnNames)", "testcase": false, "constructor": false}], "file": "tools/data-validator/src/main/java/data/validator/cql/CassandraHelper.java"}, "focal_method": {"identifier": "prepareBoundStatementForMatchingTargetTable", "parameters": "(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "modifiers": "public static", "return": "BoundStatement", "body": "public static BoundStatement prepareBoundStatementForMatchingTargetTable(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys) {\n        String matchCountStatementCQL = CQLBuilder.getMatchCountStatementFromTargetTable(targetTableName, primaryKeys);\n        PreparedStatement matchCountStatementCQLStatement = cassandraConnectionProvider.getSession().prepare(matchCountStatementCQL);\n        matchCountStatementCQLStatement.setConsistencyLevel(cassandraConnectionProvider.getConsistencyLevel());\n        return matchCountStatementCQLStatement.bind();\n    }", "signature": "BoundStatement prepareBoundStatementForMatchingTargetTable(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "full_signature": "public static BoundStatement prepareBoundStatementForMatchingTargetTable(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "class_method_signature": "CassandraHelper.prepareBoundStatementForMatchingTargetTable(CassandraConnectionProvider cassandraConnectionProvider, String targetTableName, List<String> primaryKeys)", "testcase": false, "constructor": false, "invocations": ["getMatchCountStatementFromTargetTable", "prepare", "getSession", "setConsistencyLevel", "getConsistencyLevel", "bind"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}