{"test_class": {"identifier": "GhostTaskServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<TaskState> ACTIVE_TASK_STATES = Arrays.asList(TaskState.PROCESSING_BY_REST_APPLICATION, TaskState.QUEUED);", "modifier": "private static final", "type": "List<TaskState>", "declarator": "ACTIVE_TASK_STATES = Arrays.asList(TaskState.PROCESSING_BY_REST_APPLICATION, TaskState.QUEUED)", "var_name": "ACTIVE_TASK_STATES"}, {"original_string": "private static final TaskInfo TOPIC_INFO_1 = createTopicInfo(1L, \"oai_topology_2\");", "modifier": "private static final", "type": "TaskInfo", "declarator": "TOPIC_INFO_1 = createTopicInfo(1L, \"oai_topology_2\")", "var_name": "TOPIC_INFO_1"}, {"original_string": "private static final TaskInfo TOPIC_INFO_1_UNKNONW_TOPIC = createTopicInfo(1L, \"unknown_topic\");", "modifier": "private static final", "type": "TaskInfo", "declarator": "TOPIC_INFO_1_UNKNONW_TOPIC = createTopicInfo(1L, \"unknown_topic\")", "var_name": "TOPIC_INFO_1_UNKNONW_TOPIC"}, {"original_string": "private static final TaskInfo OLD_SENT_NO_STARTED_TASK_INFO_1 = createTaskInfo(1L,11);", "modifier": "private static final", "type": "TaskInfo", "declarator": "OLD_SENT_NO_STARTED_TASK_INFO_1 = createTaskInfo(1L,11)", "var_name": "OLD_SENT_NO_STARTED_TASK_INFO_1"}, {"original_string": "private static final TaskInfo NEWLY_SENT_NO_STARTED_TASK_INFO_1 = createTaskInfo(1L,9);", "modifier": "private static final", "type": "TaskInfo", "declarator": "NEWLY_SENT_NO_STARTED_TASK_INFO_1 = createTaskInfo(1L,9)", "var_name": "NEWLY_SENT_NO_STARTED_TASK_INFO_1"}, {"original_string": "private static final TaskInfo OLD_SENT_OLD_STARTED_TASK_INFO_1 = createTaskInfo(1L,11,11);", "modifier": "private static final", "type": "TaskInfo", "declarator": "OLD_SENT_OLD_STARTED_TASK_INFO_1 = createTaskInfo(1L,11,11)", "var_name": "OLD_SENT_OLD_STARTED_TASK_INFO_1"}, {"original_string": "private static final TaskInfo OLD_SENT_NEWLY_STARTED_TASK_INFO_1 = createTaskInfo(1L,11,9);", "modifier": "private static final", "type": "TaskInfo", "declarator": "OLD_SENT_NEWLY_STARTED_TASK_INFO_1 = createTaskInfo(1L,11,9)", "var_name": "OLD_SENT_NEWLY_STARTED_TASK_INFO_1"}, {"original_string": "private static final TaskInfo NEWLY_SENT_NEWLY_STARTED_TASK_INFO_1 = createTaskInfo(1L,9,9);", "modifier": "private static final", "type": "TaskInfo", "declarator": "NEWLY_SENT_NEWLY_STARTED_TASK_INFO_1 = createTaskInfo(1L,9,9)", "var_name": "NEWLY_SENT_NEWLY_STARTED_TASK_INFO_1"}, {"original_string": "@Autowired\n    private GhostTaskService service;", "modifier": "@Autowired\n    private", "type": "GhostTaskService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n    private CassandraTaskInfoDAO taskInfoDAO;", "modifier": "@Autowired\n    private", "type": "CassandraTaskInfoDAO", "declarator": "taskInfoDAO", "var_name": "taskInfoDAO"}, {"original_string": "@Autowired\n    private TasksByStateDAO tasksByStateDAO;", "modifier": "@Autowired\n    private", "type": "TasksByStateDAO", "declarator": "tasksByStateDAO", "var_name": "tasksByStateDAO"}], "file": "service/dps/rest/src/test/java/eu/europeana/cloud/service/dps/utils/GhostTaskServiceTest.java"}, "test_case": {"identifier": "findGhostTasksShouldIgnoreTasksThatNewlySentAndNewStarted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findGhostTasksShouldIgnoreTasksThatNewlySentAndNewStarted() {\n        when(tasksByStateDAO.findTasksInGivenState(eq(ACTIVE_TASK_STATES)))\n                .thenReturn(Collections.singletonList(TOPIC_INFO_1));\n        when(taskInfoDAO.findById(anyLong())).thenReturn(Optional.of(OLD_SENT_NEWLY_STARTED_TASK_INFO_1));\n\n        assertThat(service.findGhostTasks(), empty());\n    }", "signature": "void findGhostTasksShouldIgnoreTasksThatNewlySentAndNewStarted()", "full_signature": "@Test public void findGhostTasksShouldIgnoreTasksThatNewlySentAndNewStarted()", "class_method_signature": "GhostTaskServiceTest.findGhostTasksShouldIgnoreTasksThatNewlySentAndNewStarted()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findTasksInGivenState", "eq", "singletonList", "thenReturn", "when", "findById", "anyLong", "of", "assertThat", "findGhostTasks", "empty"]}, "focal_class": {"identifier": "GhostTaskService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GhostTaskService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GhostTaskService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private TasksByStateDAO tasksByStateDAO;", "modifier": "@Autowired\n    private", "type": "TasksByStateDAO", "declarator": "tasksByStateDAO", "var_name": "tasksByStateDAO"}, {"original_string": "@Autowired\n    private CassandraTaskInfoDAO taskInfoDAO;", "modifier": "@Autowired\n    private", "type": "CassandraTaskInfoDAO", "declarator": "taskInfoDAO", "var_name": "taskInfoDAO"}, {"original_string": "private final Set<String> availableTopic;", "modifier": "private final", "type": "Set<String>", "declarator": "availableTopic", "var_name": "availableTopic"}], "methods": [{"identifier": "GhostTaskService", "parameters": "(Environment environment)", "modifiers": "public", "return": "", "signature": " GhostTaskService(Environment environment)", "full_signature": "public  GhostTaskService(Environment environment)", "class_method_signature": "GhostTaskService.GhostTaskService(Environment environment)", "testcase": false, "constructor": true}, {"identifier": "serviceTask", "parameters": "()", "modifiers": "@Scheduled(cron = \"0 0 * * * *\") public", "return": "void", "signature": "void serviceTask()", "full_signature": "@Scheduled(cron = \"0 0 * * * *\") public void serviceTask()", "class_method_signature": "GhostTaskService.serviceTask()", "testcase": false, "constructor": false}, {"identifier": "findGhostTasks", "parameters": "()", "modifiers": "public", "return": "List<TaskInfo>", "signature": "List<TaskInfo> findGhostTasks()", "full_signature": "public List<TaskInfo> findGhostTasks()", "class_method_signature": "GhostTaskService.findGhostTasks()", "testcase": false, "constructor": false}, {"identifier": "findTasksInGivenStates", "parameters": "(TaskState... states)", "modifiers": "private", "return": "Stream<TaskInfo>", "signature": "Stream<TaskInfo> findTasksInGivenStates(TaskState... states)", "full_signature": "private Stream<TaskInfo> findTasksInGivenStates(TaskState... states)", "class_method_signature": "GhostTaskService.findTasksInGivenStates(TaskState... states)", "testcase": false, "constructor": false}, {"identifier": "isGhost", "parameters": "(TaskInfo task)", "modifiers": "private", "return": "boolean", "signature": "boolean isGhost(TaskInfo task)", "full_signature": "private boolean isGhost(TaskInfo task)", "class_method_signature": "GhostTaskService.isGhost(TaskInfo task)", "testcase": false, "constructor": false}, {"identifier": "isDateTooOld", "parameters": "(Date date)", "modifiers": "private", "return": "boolean", "signature": "boolean isDateTooOld(Date date)", "full_signature": "private boolean isDateTooOld(Date date)", "class_method_signature": "GhostTaskService.isDateTooOld(Date date)", "testcase": false, "constructor": false}], "file": "service/dps/rest/src/main/java/eu/europeana/cloud/service/dps/utils/GhostTaskService.java"}, "focal_method": {"identifier": "findGhostTasks", "parameters": "()", "modifiers": "public", "return": "List<TaskInfo>", "body": "public List<TaskInfo> findGhostTasks() {\n        return findTasksInGivenStates(TaskState.PROCESSING_BY_REST_APPLICATION, TaskState.QUEUED).\n                filter(this::isGhost).collect(Collectors.toList());\n    }", "signature": "List<TaskInfo> findGhostTasks()", "full_signature": "public List<TaskInfo> findGhostTasks()", "class_method_signature": "GhostTaskService.findGhostTasks()", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "findTasksInGivenStates", "toList"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}