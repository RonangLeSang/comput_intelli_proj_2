{"test_class": {"identifier": "GzUnpackingServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileUnpackingService gzUnpackingService;", "modifier": "private", "type": "FileUnpackingService", "declarator": "gzUnpackingService", "var_name": "gzUnpackingService"}, {"original_string": "private final static String DESTINATION_DIR = \"src/test/resources/__files/\";", "modifier": "private final static", "type": "String", "declarator": "DESTINATION_DIR = \"src/test/resources/__files/\"", "var_name": "DESTINATION_DIR"}, {"original_string": "private final static int XML_FILES_COUNT = 13;", "modifier": "private final static", "type": "int", "declarator": "XML_FILES_COUNT = 13", "var_name": "XML_FILES_COUNT"}, {"original_string": "private final static String FILE_NAME = \"gzFile\";", "modifier": "private final static", "type": "String", "declarator": "FILE_NAME = \"gzFile\"", "var_name": "FILE_NAME"}, {"original_string": "private final static String FILE_NAME2 = \"gzFileWithCompressedGZFiles\";", "modifier": "private final static", "type": "String", "declarator": "FILE_NAME2 = \"gzFileWithCompressedGZFiles\"", "var_name": "FILE_NAME2"}, {"original_string": "private final static String FILE_NAME3 = \"gzFilesWithMixedCompressedFiles\";", "modifier": "private final static", "type": "String", "declarator": "FILE_NAME3 = \"gzFilesWithMixedCompressedFiles\"", "var_name": "FILE_NAME3"}, {"original_string": "private final static String XML_TYPE = \"xml\";", "modifier": "private final static", "type": "String", "declarator": "XML_TYPE = \"xml\"", "var_name": "XML_TYPE"}], "file": "service/dps/storm/topologies/http-harvesting/src/test/java/eu/europeana/cloud/http/service/GzUnpackingServiceTest.java"}, "test_case": {"identifier": "shouldUnpackTheTarGzFilesRecursivelyWithMixedNestedCompressedFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUnpackTheTarGzFilesRecursivelyWithMixedNestedCompressedFiles() throws CompressionExtensionNotRecognizedException, IOException {\n        gzUnpackingService.unpackFile(DESTINATION_DIR + FILE_NAME3 + \".tar.gz\", DESTINATION_DIR);\n        Collection files = getXMLFiles(DESTINATION_DIR + FILE_NAME3);\n        assertNotNull(files);\n        assertEquals(XML_FILES_COUNT,files.size());\n    }", "signature": "void shouldUnpackTheTarGzFilesRecursivelyWithMixedNestedCompressedFiles()", "full_signature": "@Test public void shouldUnpackTheTarGzFilesRecursivelyWithMixedNestedCompressedFiles()", "class_method_signature": "GzUnpackingServiceTest.shouldUnpackTheTarGzFilesRecursivelyWithMixedNestedCompressedFiles()", "testcase": true, "constructor": false, "invocations": ["unpackFile", "getXMLFiles", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "GzUnpackingService", "superclass": "", "interfaces": "implements FileUnpackingService", "fields": [{"original_string": "public static final String TAR = \".tar\";", "modifier": "public static final", "type": "String", "declarator": "TAR = \".tar\"", "var_name": "TAR"}], "methods": [{"identifier": "unpackFile", "parameters": "(final String zipFile, final String destinationFolder)", "modifiers": "public", "return": "void", "signature": "void unpackFile(final String zipFile, final String destinationFolder)", "full_signature": "public void unpackFile(final String zipFile, final String destinationFolder)", "class_method_signature": "GzUnpackingService.unpackFile(final String zipFile, final String destinationFolder)", "testcase": false, "constructor": false}, {"identifier": "unpackFile", "parameters": "(final String compressedFile, final String destinationFolder, final String[] extensions)", "modifiers": "private", "return": "void", "signature": "void unpackFile(final String compressedFile, final String destinationFolder, final String[] extensions)", "full_signature": "private void unpackFile(final String compressedFile, final String destinationFolder, final String[] extensions)", "class_method_signature": "GzUnpackingService.unpackFile(final String compressedFile, final String destinationFolder, final String[] extensions)", "testcase": false, "constructor": false}, {"identifier": "extractTarGzipArchive", "parameters": "(String compressedFile, File destination)", "modifiers": "private", "return": "File", "signature": "File extractTarGzipArchive(String compressedFile, File destination)", "full_signature": "private File extractTarGzipArchive(String compressedFile, File destination)", "class_method_signature": "GzUnpackingService.extractTarGzipArchive(String compressedFile, File destination)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(String fileLocation)", "modifiers": "private", "return": "String", "signature": "String getFileName(String fileLocation)", "full_signature": "private String getFileName(String fileLocation)", "class_method_signature": "GzUnpackingService.getFileName(String fileLocation)", "testcase": false, "constructor": false}, {"identifier": "getDestinationFolder", "parameters": "(String destination, String fileName)", "modifiers": "private", "return": "File", "signature": "File getDestinationFolder(String destination, String fileName)", "full_signature": "private File getDestinationFolder(String destination, String fileName)", "class_method_signature": "GzUnpackingService.getDestinationFolder(String destination, String fileName)", "testcase": false, "constructor": false}], "file": "service/dps/storm/topologies/http-harvesting/src/main/java/eu/europeana/cloud/http/service/GzUnpackingService.java"}, "focal_method": {"identifier": "unpackFile", "parameters": "(final String zipFile, final String destinationFolder)", "modifiers": "public", "return": "void", "body": "public void unpackFile(final String zipFile, final String destinationFolder) throws CompressionExtensionNotRecognizedException, IOException {\n        String[] extensions = CompressionFileExtension.getExtensionValues();\n        unpackFile(zipFile, destinationFolder, extensions);\n    }", "signature": "void unpackFile(final String zipFile, final String destinationFolder)", "full_signature": "public void unpackFile(final String zipFile, final String destinationFolder)", "class_method_signature": "GzUnpackingService.unpackFile(final String zipFile, final String destinationFolder)", "testcase": false, "constructor": false, "invocations": ["getExtensionValues", "unpackFile"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}