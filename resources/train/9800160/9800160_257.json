{"test_class": {"identifier": "HarvesterImplTest", "superclass": "extends WiremockHelper", "interfaces": "", "fields": [{"original_string": "private static final String OAI_PMH_ENDPOINT = \"http://localhost:8181/oai-phm/\";", "modifier": "private static final", "type": "String", "declarator": "OAI_PMH_ENDPOINT = \"http://localhost:8181/oai-phm/\"", "var_name": "OAI_PMH_ENDPOINT"}, {"original_string": "private static final String METADATA_XPATH = \"/*[local-name()='OAI-PMH']\" +\n            \"/*[local-name()='GetRecord']\" +\n            \"/*[local-name()='record']\" +\n            \"/*[local-name()='metadata']\" +\n            \"/child::*\";", "modifier": "private static final", "type": "String", "declarator": "METADATA_XPATH = \"/*[local-name()='OAI-PMH']\" +\n            \"/*[local-name()='GetRecord']\" +\n            \"/*[local-name()='record']\" +\n            \"/*[local-name()='metadata']\" +\n            \"/child::*\"", "var_name": "METADATA_XPATH"}, {"original_string": "private static final String IS_DELETED_XPATH = \"string(/*[local-name()='OAI-PMH']\" +\n            \"/*[local-name()='GetRecord']\" +\n            \"/*[local-name()='record']\" +\n            \"/*[local-name()='header']\" +\n            \"/@status)\";", "modifier": "private static final", "type": "String", "declarator": "IS_DELETED_XPATH = \"string(/*[local-name()='OAI-PMH']\" +\n            \"/*[local-name()='GetRecord']\" +\n            \"/*[local-name()='record']\" +\n            \"/*[local-name()='header']\" +\n            \"/@status)\"", "var_name": "IS_DELETED_XPATH"}, {"original_string": "private static final int TEST_SOCKET_TIMEOUT = 10 * 1000;", "modifier": "private static final", "type": "int", "declarator": "TEST_SOCKET_TIMEOUT = 10 * 1000", "var_name": "TEST_SOCKET_TIMEOUT"}, {"original_string": "private static final String EDM = \"EDM\";", "modifier": "private static final", "type": "String", "declarator": "EDM = \"EDM\"", "var_name": "EDM"}, {"original_string": "private static final String RDF = \"RDF\";", "modifier": "private static final", "type": "String", "declarator": "RDF = \"RDF\"", "var_name": "RDF"}, {"original_string": "private static final String OAI_DC = \"OAI_DC\";", "modifier": "private static final", "type": "String", "declarator": "OAI_DC = \"OAI_DC\"", "var_name": "OAI_DC"}, {"original_string": "private XPathExpression isDeletedExpression;", "modifier": "private", "type": "XPathExpression", "declarator": "isDeletedExpression", "var_name": "isDeletedExpression"}, {"original_string": "private XPathExpression expr;", "modifier": "private", "type": "XPathExpression", "declarator": "expr", "var_name": "expr"}], "file": "service/dps/oaipmh/src/test/java/eu/europeana/cloud/service/dps/oaipmh/HarvesterImplTest.java"}, "test_case": {"identifier": "shouldHandleTimeout", "parameters": "()", "modifiers": "@Test(expected = HarvesterException.class) public", "return": "void", "body": "@Test(expected = HarvesterException.class)\n    public void shouldHandleTimeout() throws IOException, HarvesterException {\n        //given\n        stubFor(get(urlEqualTo(\"/oai-phm/?verb=GetRecord&identifier=mediateka\" +\n                \"&metadataPrefix=oai_dc\"))\n                .willReturn(responsTimeoutGreaterThanSocketTimeout(getFileContent(\"/sampleOaiRecord.xml\"), TEST_SOCKET_TIMEOUT)\n                ));\n        final HarvesterImpl.ConnectionFactory connectionFactory = new HarvesterImpl.ConnectionFactory() {\n            @Override\n            public OaiPmhConnection createConnection(String oaiPmhEndpoint, Parameters parameters) {\n                return new OaiPmhConnection(oaiPmhEndpoint, parameters, TEST_SOCKET_TIMEOUT, TEST_SOCKET_TIMEOUT, TEST_SOCKET_TIMEOUT);\n            }\n        };\n        final HarvesterImpl harvester = new HarvesterImpl(1, SLEEP_TIME);\n\n        //when\n        harvester.harvestRecord(connectionFactory, OAI_PMH_ENDPOINT, \"mediateka\", \"oai_dc\", expr,\n                isDeletedExpression);\n\n        //then\n        //exception expected\n    }", "signature": "void shouldHandleTimeout()", "full_signature": "@Test(expected = HarvesterException.class) public void shouldHandleTimeout()", "class_method_signature": "HarvesterImplTest.shouldHandleTimeout()", "testcase": true, "constructor": false, "invocations": ["stubFor", "willReturn", "get", "urlEqualTo", "responsTimeoutGreaterThanSocketTimeout", "getFileContent", "harvestRecord"]}, "focal_class": {"identifier": "HarvesterImpl", "superclass": "", "interfaces": "implements Harvester", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HarvesterImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HarvesterImpl.class)", "var_name": "LOGGER"}, {"original_string": "private static final ConnectionFactory DEFAULT_CONNECTION_FACTORY = (oaiPmhEndpoint, parameters)\n            -> new OaiPmhConnection(oaiPmhEndpoint, parameters);", "modifier": "private static final", "type": "ConnectionFactory", "declarator": "DEFAULT_CONNECTION_FACTORY = (oaiPmhEndpoint, parameters)\n            -> new OaiPmhConnection(oaiPmhEndpoint, parameters)", "var_name": "DEFAULT_CONNECTION_FACTORY"}, {"original_string": "private final int numberOfRetries;", "modifier": "private final", "type": "int", "declarator": "numberOfRetries", "var_name": "numberOfRetries"}, {"original_string": "private final int timeBetweenRetries;", "modifier": "private final", "type": "int", "declarator": "timeBetweenRetries", "var_name": "timeBetweenRetries"}], "methods": [{"identifier": "HarvesterImpl", "parameters": "(int numberOfRetries, int timeBetweenRetries)", "modifiers": "", "return": "", "signature": " HarvesterImpl(int numberOfRetries, int timeBetweenRetries)", "full_signature": "  HarvesterImpl(int numberOfRetries, int timeBetweenRetries)", "class_method_signature": "HarvesterImpl.HarvesterImpl(int numberOfRetries, int timeBetweenRetries)", "testcase": false, "constructor": true}, {"identifier": "harvestRecord", "parameters": "(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream harvestRecord(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "full_signature": "@Override public InputStream harvestRecord(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "class_method_signature": "HarvesterImpl.harvestRecord(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "testcase": false, "constructor": false}, {"identifier": "harvestRecord", "parameters": "(ConnectionFactory connectionFactory, String oaiPmhEndpoint,\n                              String recordId, String metadataPrefix, XPathExpression expression,\n                              XPathExpression statusCheckerExpression)", "modifiers": "", "return": "InputStream", "signature": "InputStream harvestRecord(ConnectionFactory connectionFactory, String oaiPmhEndpoint,\n                              String recordId, String metadataPrefix, XPathExpression expression,\n                              XPathExpression statusCheckerExpression)", "full_signature": " InputStream harvestRecord(ConnectionFactory connectionFactory, String oaiPmhEndpoint,\n                              String recordId, String metadataPrefix, XPathExpression expression,\n                              XPathExpression statusCheckerExpression)", "class_method_signature": "HarvesterImpl.harvestRecord(ConnectionFactory connectionFactory, String oaiPmhEndpoint,\n                              String recordId, String metadataPrefix, XPathExpression expression,\n                              XPathExpression statusCheckerExpression)", "testcase": false, "constructor": false}, {"identifier": "harvestIdentifiers", "parameters": "(Harvest harvest)", "modifiers": "@Override public", "return": "Iterator<OAIHeader>", "signature": "Iterator<OAIHeader> harvestIdentifiers(Harvest harvest)", "full_signature": "@Override public Iterator<OAIHeader> harvestIdentifiers(Harvest harvest)", "class_method_signature": "HarvesterImpl.harvestIdentifiers(Harvest harvest)", "testcase": false, "constructor": false}, {"identifier": "prepareParameters", "parameters": "(Harvest harvest)", "modifiers": "private", "return": "ListIdentifiersParameters", "signature": "ListIdentifiersParameters prepareParameters(Harvest harvest)", "full_signature": "private ListIdentifiersParameters prepareParameters(Harvest harvest)", "class_method_signature": "HarvesterImpl.prepareParameters(Harvest harvest)", "testcase": false, "constructor": false}, {"identifier": "waitForSpecificTime", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void waitForSpecificTime()", "full_signature": "protected void waitForSpecificTime()", "class_method_signature": "HarvesterImpl.waitForSpecificTime()", "testcase": false, "constructor": false}], "file": "service/dps/oaipmh/src/main/java/eu/europeana/cloud/service/dps/oaipmh/HarvesterImpl.java"}, "focal_method": {"identifier": "harvestRecord", "parameters": "(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream harvestRecord(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)\n            throws HarvesterException {\n        return harvestRecord(DEFAULT_CONNECTION_FACTORY, oaiPmhEndpoint, recordId, metadataPrefix,\n                expression, statusCheckerExpression);\n    }", "signature": "InputStream harvestRecord(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "full_signature": "@Override public InputStream harvestRecord(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "class_method_signature": "HarvesterImpl.harvestRecord(String oaiPmhEndpoint, String recordId, String metadataPrefix,\n                                     XPathExpression expression, XPathExpression statusCheckerExpression)", "testcase": false, "constructor": false, "invocations": ["harvestRecord"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}