{"test_class": {"identifier": "DataSetsResourceTest", "superclass": "extends CassandraBasedAbstractResourceTest", "interfaces": "", "fields": [{"original_string": "private DataSetService dataSetService;", "modifier": "private", "type": "DataSetService", "declarator": "dataSetService", "var_name": "dataSetService"}, {"original_string": "private String dataSetsWebTarget;", "modifier": "private", "type": "String", "declarator": "dataSetsWebTarget", "var_name": "dataSetsWebTarget"}, {"original_string": "private UISClientHandler uisHandler;", "modifier": "private", "type": "UISClientHandler", "declarator": "uisHandler", "var_name": "uisHandler"}, {"original_string": "private DataProvider dataProvider = new DataProvider();", "modifier": "private", "type": "DataProvider", "declarator": "dataProvider = new DataProvider()", "var_name": "dataProvider"}], "file": "service/mcs/rest/src/test/java/eu/europeana/cloud/service/mcs/rest/DataSetsResourceTest.java"}, "test_case": {"identifier": "shouldCreateDataset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateDataset() throws Exception {\n        Mockito.doReturn(new DataProvider()).when(uisHandler)\n                .getProvider(\"provId\");\n        // given\n        String datasetId = \"datasetId\";\n        String description = \"dataset description\";\n\n        // when you add data set for a provider\n        ResultActions createResponse = mockMvc.perform(post(dataSetsWebTarget,\n                \"provId\").contentType(MediaType.APPLICATION_FORM_URLENCODED)\n                .param(F_DATASET, datasetId).param(F_DESCRIPTION, description)\n        ).andExpect(status().isCreated());\n\n        // then location of dataset should be given in response\n        String uriFromResponse = createResponse.andReturn().getResponse().getHeader(HttpHeaders.LOCATION);\n        assertEquals(\"http://localhost:80/data-providers/provId/data-sets/datasetId\", uriFromResponse);\n        // and then this set should be visible in service\n        List<DataSet> dataSetsForPrivider = dataSetService.getDataSets(\n                \"provId\", null, 10000).getResults();\n        assertEquals(\"Expected single dataset in service\", 1,\n                dataSetsForPrivider.size());\n        DataSet ds = dataSetsForPrivider.get(0);\n        assertEquals(datasetId, ds.getId());\n        assertEquals(description, ds.getDescription());\n    }", "signature": "void shouldCreateDataset()", "full_signature": "@Test public void shouldCreateDataset()", "class_method_signature": "DataSetsResourceTest.shouldCreateDataset()", "testcase": true, "constructor": false, "invocations": ["getProvider", "when", "doReturn", "andExpect", "perform", "param", "param", "contentType", "post", "isCreated", "status", "getHeader", "getResponse", "andReturn", "assertEquals", "getResults", "getDataSets", "assertEquals", "size", "get", "assertEquals", "getId", "assertEquals", "getDescription"]}, "focal_class": {"identifier": "DataSetsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATASET_CLASS_NAME = DataSet.class.getName();", "modifier": "private static final", "type": "String", "declarator": "DATASET_CLASS_NAME = DataSet.class.getName()", "var_name": "DATASET_CLASS_NAME"}, {"original_string": "private final DataSetService dataSetService;", "modifier": "private final", "type": "DataSetService", "declarator": "dataSetService", "var_name": "dataSetService"}, {"original_string": "private final MutableAclService mutableAclService;", "modifier": "private final", "type": "MutableAclService", "declarator": "mutableAclService", "var_name": "mutableAclService"}, {"original_string": "@Value(\"${numberOfElementsOnPage}\")\n    private int numberOfElementsOnPage;", "modifier": "@Value(\"${numberOfElementsOnPage}\")\n    private", "type": "int", "declarator": "numberOfElementsOnPage", "var_name": "numberOfElementsOnPage"}], "methods": [{"identifier": "DataSetsResource", "parameters": "(DataSetService dataSetService, MutableAclService mutableAclService)", "modifiers": "public", "return": "", "signature": " DataSetsResource(DataSetService dataSetService, MutableAclService mutableAclService)", "full_signature": "public  DataSetsResource(DataSetService dataSetService, MutableAclService mutableAclService)", "class_method_signature": "DataSetsResource.DataSetsResource(DataSetService dataSetService, MutableAclService mutableAclService)", "testcase": false, "constructor": true}, {"identifier": "getDataSets", "parameters": "(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "modifiers": "@GetMapping(produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}) @ResponseBody public", "return": "ResultSlice<DataSet>", "signature": "ResultSlice<DataSet> getDataSets(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "full_signature": "@GetMapping(produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}) @ResponseBody public ResultSlice<DataSet> getDataSets(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "class_method_signature": "DataSetsResource.getDataSets(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "testcase": false, "constructor": false}, {"identifier": "createDataSet", "parameters": "(\n            HttpServletRequest httpServletRequest,\n            @PathVariable String providerId,\n            @RequestParam String dataSetId,\n            @RequestParam(required = false) String description)", "modifiers": "@PreAuthorize(\"isAuthenticated()\") @PostMapping public", "return": "ResponseEntity<Void>", "signature": "ResponseEntity<Void> createDataSet(\n            HttpServletRequest httpServletRequest,\n            @PathVariable String providerId,\n            @RequestParam String dataSetId,\n            @RequestParam(required = false) String description)", "full_signature": "@PreAuthorize(\"isAuthenticated()\") @PostMapping public ResponseEntity<Void> createDataSet(\n            HttpServletRequest httpServletRequest,\n            @PathVariable String providerId,\n            @RequestParam String dataSetId,\n            @RequestParam(required = false) String description)", "class_method_signature": "DataSetsResource.createDataSet(\n            HttpServletRequest httpServletRequest,\n            @PathVariable String providerId,\n            @RequestParam String dataSetId,\n            @RequestParam(required = false) String description)", "testcase": false, "constructor": false}], "file": "service/mcs/rest/src/main/java/eu/europeana/cloud/service/mcs/rest/DataSetsResource.java"}, "focal_method": {"identifier": "getDataSets", "parameters": "(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "modifiers": "@GetMapping(produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}) @ResponseBody public", "return": "ResultSlice<DataSet>", "body": "@GetMapping(produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})\n    @ResponseBody\n    public ResultSlice<DataSet> getDataSets(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom) {\n\n        return dataSetService.getDataSets(providerId, startFrom, numberOfElementsOnPage);\n    }", "signature": "ResultSlice<DataSet> getDataSets(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "full_signature": "@GetMapping(produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}) @ResponseBody public ResultSlice<DataSet> getDataSets(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "class_method_signature": "DataSetsResource.getDataSets(\n            @PathVariable String providerId,\n    \t\t@RequestParam(required = false) String startFrom)", "testcase": false, "constructor": false, "invocations": ["getDataSets"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}