{"test_class": {"identifier": "CassandraRecordServiceTest", "superclass": "extends CassandraTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CassandraRecordService cassandraRecordService;", "modifier": "@Autowired\n    private", "type": "CassandraRecordService", "declarator": "cassandraRecordService", "var_name": "cassandraRecordService"}, {"original_string": "@Autowired\n    private CassandraDataSetService cassandraDataSetService;", "modifier": "@Autowired\n    private", "type": "CassandraDataSetService", "declarator": "cassandraDataSetService", "var_name": "cassandraDataSetService"}, {"original_string": "@Autowired\n    private UISClientHandler uisHandler;", "modifier": "@Autowired\n    private", "type": "UISClientHandler", "declarator": "uisHandler", "var_name": "uisHandler"}, {"original_string": "private static final String PROVIDER_1_ID = \"provider1\";", "modifier": "private static final", "type": "String", "declarator": "PROVIDER_1_ID = \"provider1\"", "var_name": "PROVIDER_1_ID"}, {"original_string": "private static final int PROVIDER_1_PARTITION_KEY = 0;", "modifier": "private static final", "type": "int", "declarator": "PROVIDER_1_PARTITION_KEY = 0", "var_name": "PROVIDER_1_PARTITION_KEY"}, {"original_string": "private static final String PROVIDER_2_ID = \"provider2\";", "modifier": "private static final", "type": "String", "declarator": "PROVIDER_2_ID = \"provider2\"", "var_name": "PROVIDER_2_ID"}, {"original_string": "private static final int PROVIDER_2_PARTITION_KEY = 1;", "modifier": "private static final", "type": "int", "declarator": "PROVIDER_2_PARTITION_KEY = 1", "var_name": "PROVIDER_2_PARTITION_KEY"}, {"original_string": "private static final String REVISION_PROVIDER = \"revisionProvider\";", "modifier": "private static final", "type": "String", "declarator": "REVISION_PROVIDER = \"revisionProvider\"", "var_name": "REVISION_PROVIDER"}, {"original_string": "private static final String REVISION_NAME = \"revisionName\";", "modifier": "private static final", "type": "String", "declarator": "REVISION_NAME = \"revisionName\"", "var_name": "REVISION_NAME"}, {"original_string": "private DataProvider dataProvider1;", "modifier": "private", "type": "DataProvider", "declarator": "dataProvider1", "var_name": "dataProvider1"}, {"original_string": "private DataProvider dataProvider2;", "modifier": "private", "type": "DataProvider", "declarator": "dataProvider2", "var_name": "dataProvider2"}], "file": "service/mcs/persistent/src/test/java/eu/europeana/cloud/service/mcs/persistent/CassandraRecordServiceTest.java"}, "test_case": {"identifier": "shouldThrowSystemExpWhileCreatingRepresentationIfUisFails", "parameters": "()", "modifiers": "@Test(expected = SystemException.class) public", "return": "void", "body": "@Test(expected = SystemException.class)\n    public void shouldThrowSystemExpWhileCreatingRepresentationIfUisFails()\n            throws Exception {\n        mockUISProvider1Success();\n        makeUISThrowSystemException();\n\n        cassandraRecordService.createRepresentation(\"globalId\", \"dc\",\n                PROVIDER_1_ID);\n    }", "signature": "void shouldThrowSystemExpWhileCreatingRepresentationIfUisFails()", "full_signature": "@Test(expected = SystemException.class) public void shouldThrowSystemExpWhileCreatingRepresentationIfUisFails()", "class_method_signature": "CassandraRecordServiceTest.shouldThrowSystemExpWhileCreatingRepresentationIfUisFails()", "testcase": true, "constructor": false, "invocations": ["mockUISProvider1Success", "makeUISThrowSystemException", "createRepresentation"]}, "focal_class": {"identifier": "CassandraRecordService", "superclass": "", "interfaces": "implements RecordService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CassandraRecordService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CassandraRecordService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private CassandraRecordDAO recordDAO;", "modifier": "@Autowired\n    private", "type": "CassandraRecordDAO", "declarator": "recordDAO", "var_name": "recordDAO"}, {"original_string": "@Autowired\n    private CassandraDataSetService dataSetService;", "modifier": "@Autowired\n    private", "type": "CassandraDataSetService", "declarator": "dataSetService", "var_name": "dataSetService"}, {"original_string": "@Autowired\n    private CassandraDataSetDAO dataSetDAO;", "modifier": "@Autowired\n    private", "type": "CassandraDataSetDAO", "declarator": "dataSetDAO", "var_name": "dataSetDAO"}, {"original_string": "@Autowired\n    private DynamicContentDAO contentDAO;", "modifier": "@Autowired\n    private", "type": "DynamicContentDAO", "declarator": "contentDAO", "var_name": "contentDAO"}, {"original_string": "@Autowired\n    private UISClientHandler uis;", "modifier": "@Autowired\n    private", "type": "UISClientHandler", "declarator": "uis", "var_name": "uis"}], "methods": [{"identifier": "getRecord", "parameters": "(String cloudId)", "modifiers": "@Override public", "return": "Record", "signature": "Record getRecord(String cloudId)", "full_signature": "@Override public Record getRecord(String cloudId)", "class_method_signature": "CassandraRecordService.getRecord(String cloudId)", "testcase": false, "constructor": false}, {"identifier": "deleteRecord", "parameters": "(String cloudId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteRecord(String cloudId)", "full_signature": "@Override public void deleteRecord(String cloudId)", "class_method_signature": "CassandraRecordService.deleteRecord(String cloudId)", "testcase": false, "constructor": false}, {"identifier": "removeFilesFromRepresentationVersion", "parameters": "(String cloudId, Representation repVersion)", "modifiers": "private", "return": "void", "signature": "void removeFilesFromRepresentationVersion(String cloudId, Representation repVersion)", "full_signature": "private void removeFilesFromRepresentationVersion(String cloudId, Representation repVersion)", "class_method_signature": "CassandraRecordService.removeFilesFromRepresentationVersion(String cloudId, Representation repVersion)", "testcase": false, "constructor": false}, {"identifier": "deleteRepresentation", "parameters": "(String globalId, String schema)", "modifiers": "@Override public", "return": "void", "signature": "void deleteRepresentation(String globalId, String schema)", "full_signature": "@Override public void deleteRepresentation(String globalId, String schema)", "class_method_signature": "CassandraRecordService.deleteRepresentation(String globalId, String schema)", "testcase": false, "constructor": false}, {"identifier": "deleteRepresentationRevision", "parameters": "(String globalId, Representation rep)", "modifiers": "private", "return": "void", "signature": "void deleteRepresentationRevision(String globalId, Representation rep)", "full_signature": "private void deleteRepresentationRevision(String globalId, Representation rep)", "class_method_signature": "CassandraRecordService.deleteRepresentationRevision(String globalId, Representation rep)", "testcase": false, "constructor": false}, {"identifier": "createRepresentation", "parameters": "(String cloudId, String representationName, String providerId)", "modifiers": "@Override public", "return": "Representation", "signature": "Representation createRepresentation(String cloudId, String representationName, String providerId)", "full_signature": "@Override public Representation createRepresentation(String cloudId, String representationName, String providerId)", "class_method_signature": "CassandraRecordService.createRepresentation(String cloudId, String representationName, String providerId)", "testcase": false, "constructor": false}, {"identifier": "getRepresentation", "parameters": "(String globalId, String schema)", "modifiers": "@Override public", "return": "Representation", "signature": "Representation getRepresentation(String globalId, String schema)", "full_signature": "@Override public Representation getRepresentation(String globalId, String schema)", "class_method_signature": "CassandraRecordService.getRepresentation(String globalId, String schema)", "testcase": false, "constructor": false}, {"identifier": "getRepresentation", "parameters": "(String globalId, String schema, String version)", "modifiers": "@Override public", "return": "Representation", "signature": "Representation getRepresentation(String globalId, String schema, String version)", "full_signature": "@Override public Representation getRepresentation(String globalId, String schema, String version)", "class_method_signature": "CassandraRecordService.getRepresentation(String globalId, String schema, String version)", "testcase": false, "constructor": false}, {"identifier": "deleteRepresentation", "parameters": "(String globalId, String schema, String version)", "modifiers": "@Override public", "return": "void", "signature": "void deleteRepresentation(String globalId, String schema, String version)", "full_signature": "@Override public void deleteRepresentation(String globalId, String schema, String version)", "class_method_signature": "CassandraRecordService.deleteRepresentation(String globalId, String schema, String version)", "testcase": false, "constructor": false}, {"identifier": "removeRepresentationAssignmentFromDataSets", "parameters": "(String globalId, Representation representation)", "modifiers": "private", "return": "void", "signature": "void removeRepresentationAssignmentFromDataSets(String globalId, Representation representation)", "full_signature": "private void removeRepresentationAssignmentFromDataSets(String globalId, Representation representation)", "class_method_signature": "CassandraRecordService.removeRepresentationAssignmentFromDataSets(String globalId, Representation representation)", "testcase": false, "constructor": false}, {"identifier": "persistRepresentation", "parameters": "(String globalId, String schema, String version)", "modifiers": "@Override public", "return": "Representation", "signature": "Representation persistRepresentation(String globalId, String schema, String version)", "full_signature": "@Override public Representation persistRepresentation(String globalId, String schema, String version)", "class_method_signature": "CassandraRecordService.persistRepresentation(String globalId, String schema, String version)", "testcase": false, "constructor": false}, {"identifier": "listRepresentationVersions", "parameters": "(String globalId, String schema)", "modifiers": "@Override public", "return": "List<Representation>", "signature": "List<Representation> listRepresentationVersions(String globalId, String schema)", "full_signature": "@Override public List<Representation> listRepresentationVersions(String globalId, String schema)", "class_method_signature": "CassandraRecordService.listRepresentationVersions(String globalId, String schema)", "testcase": false, "constructor": false}, {"identifier": "putContent", "parameters": "(String globalId, String schema, String version, File file, InputStream content)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean putContent(String globalId, String schema, String version, File file, InputStream content)", "full_signature": "@Override public boolean putContent(String globalId, String schema, String version, File file, InputStream content)", "class_method_signature": "CassandraRecordService.putContent(String globalId, String schema, String version, File file, InputStream content)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(String globalId, String schema, String version, String fileName, long rangeStart,\n                                             long rangeEnd)", "modifiers": "@Override public", "return": "Consumer<OutputStream>", "signature": "Consumer<OutputStream> getContent(String globalId, String schema, String version, String fileName, long rangeStart,\n                                             long rangeEnd)", "full_signature": "@Override public Consumer<OutputStream> getContent(String globalId, String schema, String version, String fileName, long rangeStart,\n                                             long rangeEnd)", "class_method_signature": "CassandraRecordService.getContent(String globalId, String schema, String version, String fileName, long rangeStart,\n                                             long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(String globalId, String schema, String version, String fileName, OutputStream os)", "modifiers": "@Override public", "return": "String", "signature": "String getContent(String globalId, String schema, String version, String fileName, OutputStream os)", "full_signature": "@Override public String getContent(String globalId, String schema, String version, String fileName, OutputStream os)", "class_method_signature": "CassandraRecordService.getContent(String globalId, String schema, String version, String fileName, OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "deleteContent", "parameters": "(String globalId, String schema, String version, String fileName)", "modifiers": "@Override public", "return": "void", "signature": "void deleteContent(String globalId, String schema, String version, String fileName)", "full_signature": "@Override public void deleteContent(String globalId, String schema, String version, String fileName)", "class_method_signature": "CassandraRecordService.deleteContent(String globalId, String schema, String version, String fileName)", "testcase": false, "constructor": false}, {"identifier": "copyRepresentation", "parameters": "(String globalId, String schema, String version)", "modifiers": "@Override public", "return": "Representation", "signature": "Representation copyRepresentation(String globalId, String schema, String version)", "full_signature": "@Override public Representation copyRepresentation(String globalId, String schema, String version)", "class_method_signature": "CassandraRecordService.copyRepresentation(String globalId, String schema, String version)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String globalId, String schema, String version, String fileName)", "modifiers": "@Override public", "return": "File", "signature": "File getFile(String globalId, String schema, String version, String fileName)", "full_signature": "@Override public File getFile(String globalId, String schema, String version, String fileName)", "class_method_signature": "CassandraRecordService.getFile(String globalId, String schema, String version, String fileName)", "testcase": false, "constructor": false}, {"identifier": "findFileInRepresentation", "parameters": "(Representation representation, String fileName)", "modifiers": "private", "return": "File", "signature": "File findFileInRepresentation(Representation representation, String fileName)", "full_signature": "private File findFileInRepresentation(Representation representation, String fileName)", "class_method_signature": "CassandraRecordService.findFileInRepresentation(Representation representation, String fileName)", "testcase": false, "constructor": false}, {"identifier": "sortByProviderId", "parameters": "(List<Representation> input)", "modifiers": "private static", "return": "void", "signature": "void sortByProviderId(List<Representation> input)", "full_signature": "private static void sortByProviderId(List<Representation> input)", "class_method_signature": "CassandraRecordService.sortByProviderId(List<Representation> input)", "testcase": false, "constructor": false}, {"identifier": "addRevision", "parameters": "(String globalId, String schema, String version, Revision revision)", "modifiers": "@Override public", "return": "void", "signature": "void addRevision(String globalId, String schema, String version, Revision revision)", "full_signature": "@Override public void addRevision(String globalId, String schema, String version, Revision revision)", "class_method_signature": "CassandraRecordService.addRevision(String globalId, String schema, String version, Revision revision)", "testcase": false, "constructor": false}, {"identifier": "getRepresentationRevisions", "parameters": "(String globalId, String schema, String revisionProviderId, String revisionName, Date revisionTimestamp)", "modifiers": "@Override public", "return": "List<RepresentationRevisionResponse>", "signature": "List<RepresentationRevisionResponse> getRepresentationRevisions(String globalId, String schema, String revisionProviderId, String revisionName, Date revisionTimestamp)", "full_signature": "@Override public List<RepresentationRevisionResponse> getRepresentationRevisions(String globalId, String schema, String revisionProviderId, String revisionName, Date revisionTimestamp)", "class_method_signature": "CassandraRecordService.getRepresentationRevisions(String globalId, String schema, String revisionProviderId, String revisionName, Date revisionTimestamp)", "testcase": false, "constructor": false}, {"identifier": "insertRepresentationRevision", "parameters": "(String globalId, String schema, String revisionProviderId, String revisionName, String versionId, Date revisionTimestamp)", "modifiers": "@Override public", "return": "void", "signature": "void insertRepresentationRevision(String globalId, String schema, String revisionProviderId, String revisionName, String versionId, Date revisionTimestamp)", "full_signature": "@Override public void insertRepresentationRevision(String globalId, String schema, String revisionProviderId, String revisionName, String versionId, Date revisionTimestamp)", "class_method_signature": "CassandraRecordService.insertRepresentationRevision(String globalId, String schema, String revisionProviderId, String revisionName, String versionId, Date revisionTimestamp)", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "(String globalId, String schema, String version, String revisionKey)", "modifiers": "@Override public", "return": "Revision", "signature": "Revision getRevision(String globalId, String schema, String version, String revisionKey)", "full_signature": "@Override public Revision getRevision(String globalId, String schema, String version, String revisionKey)", "class_method_signature": "CassandraRecordService.getRevision(String globalId, String schema, String version, String revisionKey)", "testcase": false, "constructor": false}], "file": "service/mcs/persistent/src/main/java/eu/europeana/cloud/service/mcs/persistent/CassandraRecordService.java"}, "focal_method": {"identifier": "createRepresentation", "parameters": "(String cloudId, String representationName, String providerId)", "modifiers": "@Override public", "return": "Representation", "body": "@Override\n    public Representation createRepresentation(String cloudId, String representationName, String providerId)\n            throws ProviderNotExistsException, RecordNotExistsException {\n\n        Date now = new Date();\n        DataProvider dataProvider;\n        // check if data provider exists\n        if ((dataProvider = uis.getProvider(providerId)) == null) {\n            throw new ProviderNotExistsException(String.format(\"Provider %s does not exist.\", providerId));\n        }\n        if (uis.existsCloudId(cloudId)) {\n            Representation rep = recordDAO.createRepresentation(cloudId, representationName, providerId, now);\n            return rep;\n        } else {\n            throw new RecordNotExistsException(cloudId);\n        }\n    }", "signature": "Representation createRepresentation(String cloudId, String representationName, String providerId)", "full_signature": "@Override public Representation createRepresentation(String cloudId, String representationName, String providerId)", "class_method_signature": "CassandraRecordService.createRepresentation(String cloudId, String representationName, String providerId)", "testcase": false, "constructor": false, "invocations": ["getProvider", "format", "existsCloudId", "createRepresentation"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}