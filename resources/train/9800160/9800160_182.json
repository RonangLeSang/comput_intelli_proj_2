{"test_class": {"identifier": "ReportResourceTest", "superclass": "extends AbstractResourceTest", "interfaces": "", "fields": [{"original_string": "private final static String WEB_TARGET = ReportResource.class.getAnnotation(RequestMapping.class).value()[0];", "modifier": "private final static", "type": "String", "declarator": "WEB_TARGET = ReportResource.class.getAnnotation(RequestMapping.class).value()[0]", "var_name": "WEB_TARGET"}, {"original_string": "private final static String DETAILED_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/reports/details\";", "modifier": "private final static", "type": "String", "declarator": "DETAILED_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/reports/details\"", "var_name": "DETAILED_REPORT_WEB_TARGET"}, {"original_string": "private final static String ERRORS_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/reports/errors\";", "modifier": "private final static", "type": "String", "declarator": "ERRORS_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/reports/errors\"", "var_name": "ERRORS_REPORT_WEB_TARGET"}, {"original_string": "private final static String VALIDATION_STATISTICS_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/statistics\";", "modifier": "private final static", "type": "String", "declarator": "VALIDATION_STATISTICS_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/statistics\"", "var_name": "VALIDATION_STATISTICS_REPORT_WEB_TARGET"}, {"original_string": "private final static String ELEMENT_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/reports/element\";", "modifier": "private final static", "type": "String", "declarator": "ELEMENT_REPORT_WEB_TARGET = WEB_TARGET + \"/{taskId}/reports/element\"", "var_name": "ELEMENT_REPORT_WEB_TARGET"}, {"original_string": "private final static String ERROR_MESSAGE = \"Message\";", "modifier": "private final static", "type": "String", "declarator": "ERROR_MESSAGE = \"Message\"", "var_name": "ERROR_MESSAGE"}, {"original_string": "private final static String[] ERROR_TYPES = {\"bd0c7280-db47-11e7-ada4-e2f54b49d956\", \"bd0ac4d0-db47-11e7-ada4-e2f54b49d956\", \"4bb74640-db48-11e7-af3d-e2f54b49d956\"};", "modifier": "private final static", "type": "String[]", "declarator": "ERROR_TYPES = {\"bd0c7280-db47-11e7-ada4-e2f54b49d956\", \"bd0ac4d0-db47-11e7-ada4-e2f54b49d956\", \"4bb74640-db48-11e7-af3d-e2f54b49d956\"}", "var_name": "ERROR_TYPES"}, {"original_string": "private final static int[] ERROR_COUNTS = {5, 2, 7};", "modifier": "private final static", "type": "int[]", "declarator": "ERROR_COUNTS = {5, 2, 7}", "var_name": "ERROR_COUNTS"}, {"original_string": "private final static String ERROR_RESOURCE_IDENTIFIER = \"Resource id \";", "modifier": "private final static", "type": "String", "declarator": "ERROR_RESOURCE_IDENTIFIER = \"Resource id \"", "var_name": "ERROR_RESOURCE_IDENTIFIER"}, {"original_string": "private final static String ADDITIONAL_INFORMATIONS = \"Additional informations \";", "modifier": "private final static", "type": "String", "declarator": "ADDITIONAL_INFORMATIONS = \"Additional informations \"", "var_name": "ADDITIONAL_INFORMATIONS"}, {"original_string": "public final static String PATH = \"path\";", "modifier": "public final static", "type": "String", "declarator": "PATH = \"path\"", "var_name": "PATH"}, {"original_string": "public final static String PATH_VALUE = \"ELEMENT\";", "modifier": "public final static", "type": "String", "declarator": "PATH_VALUE = \"ELEMENT\"", "var_name": "PATH_VALUE"}, {"original_string": "private TaskExecutionReportService reportService;", "modifier": "private", "type": "TaskExecutionReportService", "declarator": "reportService", "var_name": "reportService"}], "file": "service/dps/rest/src/test/java/eu/europeana/cloud/service/dps/rest/ReportResourceTest.java"}, "test_case": {"identifier": "shouldReturn405WhenStatisticsRequestedButTopologyNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturn405WhenStatisticsRequestedButTopologyNotFound() throws Exception {\n        when(validationStatisticsService.getTaskStatisticsReport(TASK_ID)).thenReturn(new StatisticsReport(TASK_ID, null));\n        when(topologyManager.containsTopology(anyString())).thenReturn(false);\n\n        ResultActions response = mockMvc.perform(\n                get(VALIDATION_STATISTICS_REPORT_WEB_TARGET, TOPOLOGY_NAME, TASK_ID)\n        );\n        response.andExpect(status().isMethodNotAllowed());\n    }", "signature": "void shouldReturn405WhenStatisticsRequestedButTopologyNotFound()", "full_signature": "@Test public void shouldReturn405WhenStatisticsRequestedButTopologyNotFound()", "class_method_signature": "ReportResourceTest.shouldReturn405WhenStatisticsRequestedButTopologyNotFound()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getTaskStatisticsReport", "thenReturn", "when", "containsTopology", "anyString", "perform", "get", "andExpect", "isMethodNotAllowed", "status"]}, "focal_class": {"identifier": "ReportResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ReportResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ReportResource.class)", "var_name": "LOGGER"}, {"original_string": "public static final String TASK_PREFIX = \"DPS_Task\";", "modifier": "public static final", "type": "String", "declarator": "TASK_PREFIX = \"DPS_Task\"", "var_name": "TASK_PREFIX"}, {"original_string": "@Value(\"${maxIdentifiersCount}\")\n    private int maxIdentifiersCount;", "modifier": "@Value(\"${maxIdentifiersCount}\")\n    private", "type": "int", "declarator": "maxIdentifiersCount", "var_name": "maxIdentifiersCount"}, {"original_string": "@Autowired\n    private TopologyManager topologyManager;", "modifier": "@Autowired\n    private", "type": "TopologyManager", "declarator": "topologyManager", "var_name": "topologyManager"}, {"original_string": "@Autowired\n    private TaskExecutionReportService reportService;", "modifier": "@Autowired\n    private", "type": "TaskExecutionReportService", "declarator": "reportService", "var_name": "reportService"}, {"original_string": "@Autowired\n    private ValidationStatisticsReportService validationStatisticsService;", "modifier": "@Autowired\n    private", "type": "ValidationStatisticsReportService", "declarator": "validationStatisticsService", "var_name": "validationStatisticsService"}], "methods": [{"identifier": "getTaskDetailedReport", "parameters": "(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(defaultValue = \"1\")  @Min(1) int from,\n            @RequestParam(defaultValue = \"100\") @Min(1) int to)", "modifiers": "@GetMapping(path = \"{taskId}/reports/details\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public", "return": "List<SubTaskInfo>", "signature": "List<SubTaskInfo> getTaskDetailedReport(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(defaultValue = \"1\")  @Min(1) int from,\n            @RequestParam(defaultValue = \"100\") @Min(1) int to)", "full_signature": "@GetMapping(path = \"{taskId}/reports/details\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public List<SubTaskInfo> getTaskDetailedReport(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(defaultValue = \"1\")  @Min(1) int from,\n            @RequestParam(defaultValue = \"100\") @Min(1) int to)", "class_method_signature": "ReportResource.getTaskDetailedReport(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(defaultValue = \"1\")  @Min(1) int from,\n            @RequestParam(defaultValue = \"100\") @Min(1) int to)", "testcase": false, "constructor": false}, {"identifier": "getTaskErrorReport", "parameters": "(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(required = false) String error,\n            @RequestParam(defaultValue = \"0\") int idsCount)", "modifiers": "@GetMapping(path = \"{taskId}/reports/errors\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public", "return": "TaskErrorsInfo", "signature": "TaskErrorsInfo getTaskErrorReport(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(required = false) String error,\n            @RequestParam(defaultValue = \"0\") int idsCount)", "full_signature": "@GetMapping(path = \"{taskId}/reports/errors\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public TaskErrorsInfo getTaskErrorReport(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(required = false) String error,\n            @RequestParam(defaultValue = \"0\") int idsCount)", "class_method_signature": "ReportResource.getTaskErrorReport(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName,\n            @RequestParam(required = false) String error,\n            @RequestParam(defaultValue = \"0\") int idsCount)", "testcase": false, "constructor": false}, {"identifier": "checkIfErrorReportExists", "parameters": "(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName)", "modifiers": "@RequestMapping(method = { RequestMethod.HEAD }, path = \"{taskId}/reports/errors\") @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public", "return": "Boolean", "signature": "Boolean checkIfErrorReportExists(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName)", "full_signature": "@RequestMapping(method = { RequestMethod.HEAD }, path = \"{taskId}/reports/errors\") @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public Boolean checkIfErrorReportExists(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName)", "class_method_signature": "ReportResource.checkIfErrorReportExists(\n            @PathVariable String taskId,\n            @PathVariable final String topologyName)", "testcase": false, "constructor": false}, {"identifier": "getTaskStatisticsReport", "parameters": "(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "modifiers": "@GetMapping(path = \"{taskId}/statistics\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public", "return": "StatisticsReport", "signature": "StatisticsReport getTaskStatisticsReport(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "full_signature": "@GetMapping(path = \"{taskId}/statistics\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public StatisticsReport getTaskStatisticsReport(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "class_method_signature": "ReportResource.getTaskStatisticsReport(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "testcase": false, "constructor": false}, {"identifier": "getElementsValues", "parameters": "(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId,\n            @NotNull @RequestParam(\"path\") String elementPath)", "modifiers": "@GetMapping(path = \"{taskId}/reports/element\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public", "return": "List<NodeReport>", "signature": "List<NodeReport> getElementsValues(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId,\n            @NotNull @RequestParam(\"path\") String elementPath)", "full_signature": "@GetMapping(path = \"{taskId}/reports/element\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public List<NodeReport> getElementsValues(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId,\n            @NotNull @RequestParam(\"path\") String elementPath)", "class_method_signature": "ReportResource.getElementsValues(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId,\n            @NotNull @RequestParam(\"path\") String elementPath)", "testcase": false, "constructor": false}, {"identifier": "assertContainTopology", "parameters": "(String topology)", "modifiers": "private", "return": "void", "signature": "void assertContainTopology(String topology)", "full_signature": "private void assertContainTopology(String topology)", "class_method_signature": "ReportResource.assertContainTopology(String topology)", "testcase": false, "constructor": false}], "file": "service/dps/rest/src/main/java/eu/europeana/cloud/service/dps/rest/ReportResource.java"}, "focal_method": {"identifier": "getTaskStatisticsReport", "parameters": "(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "modifiers": "@GetMapping(path = \"{taskId}/statistics\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public", "return": "StatisticsReport", "body": "@GetMapping(path = \"{taskId}/statistics\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})\n    @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\")\n    public StatisticsReport getTaskStatisticsReport(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)\n            throws AccessDeniedOrTopologyDoesNotExistException, AccessDeniedOrObjectDoesNotExistException {\n        assertContainTopology(topologyName);\n        reportService.checkIfTaskExists(taskId, topologyName);\n        return validationStatisticsService.getTaskStatisticsReport(Long.parseLong(taskId));\n    }", "signature": "StatisticsReport getTaskStatisticsReport(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "full_signature": "@GetMapping(path = \"{taskId}/statistics\", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) @PreAuthorize(\"hasPermission(#taskId,'\" + TASK_PREFIX + \"', read)\") public StatisticsReport getTaskStatisticsReport(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "class_method_signature": "ReportResource.getTaskStatisticsReport(\n            @PathVariable String topologyName,\n            @PathVariable  String taskId)", "testcase": false, "constructor": false, "invocations": ["assertContainTopology", "checkIfTaskExists", "getTaskStatisticsReport", "parseLong"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}