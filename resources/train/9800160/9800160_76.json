{"test_class": {"identifier": "ResourceProcessingBoltTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String AWS_ACCESS_KEY = \"AWS_ACCESS_KEY\";", "modifier": "private final static", "type": "String", "declarator": "AWS_ACCESS_KEY = \"AWS_ACCESS_KEY\"", "var_name": "AWS_ACCESS_KEY"}, {"original_string": "private final static String AWS_SECRET_KEY = \"AWS_SECRET_KEY\";", "modifier": "private final static", "type": "String", "declarator": "AWS_SECRET_KEY = \"AWS_SECRET_KEY\"", "var_name": "AWS_SECRET_KEY"}, {"original_string": "private final static String AWS_END_POINT = \"AWS_END_POINT\";", "modifier": "private final static", "type": "String", "declarator": "AWS_END_POINT = \"AWS_END_POINT\"", "var_name": "AWS_END_POINT"}, {"original_string": "private final static String AWS_BUCKET = \"AWS_BUCKET\";", "modifier": "private final static", "type": "String", "declarator": "AWS_BUCKET = \"AWS_BUCKET\"", "var_name": "AWS_BUCKET"}, {"original_string": "private static final String MEDIA_RESOURCE_EXCEPTION = \"media resource exception\";", "modifier": "private static final", "type": "String", "declarator": "MEDIA_RESOURCE_EXCEPTION = \"media resource exception\"", "var_name": "MEDIA_RESOURCE_EXCEPTION"}, {"original_string": "private static final long TASK_ID = 1;", "modifier": "private static final", "type": "long", "declarator": "TASK_ID = 1", "var_name": "TASK_ID"}, {"original_string": "public static final String FILE_URL = \"FILE_URL\";", "modifier": "public static final", "type": "String", "declarator": "FILE_URL = \"FILE_URL\"", "var_name": "FILE_URL"}, {"original_string": "private static final String AUTHORIZATION = \"Authorization\";", "modifier": "private static final", "type": "String", "declarator": "AUTHORIZATION = \"Authorization\"", "var_name": "AUTHORIZATION"}, {"original_string": "private StormTaskTuple stormTaskTuple;", "modifier": "private", "type": "StormTaskTuple", "declarator": "stormTaskTuple", "var_name": "stormTaskTuple"}, {"original_string": "@Mock(name = \"outputCollector\")\n    private OutputCollector outputCollector;", "modifier": "@Mock(name = \"outputCollector\")\n    private", "type": "OutputCollector", "declarator": "outputCollector", "var_name": "outputCollector"}, {"original_string": "@Mock\n    private AmazonClient amazonClient;", "modifier": "@Mock\n    private", "type": "AmazonClient", "declarator": "amazonClient", "var_name": "amazonClient"}, {"original_string": "@Mock(name = \"mediaExtractor\")\n    private MediaExtractor mediaExtractor;", "modifier": "@Mock(name = \"mediaExtractor\")\n    private", "type": "MediaExtractor", "declarator": "mediaExtractor", "var_name": "mediaExtractor"}, {"original_string": "@Mock(name = \"taskStatusChecker\")\n    private TaskStatusChecker taskStatusChecker;", "modifier": "@Mock(name = \"taskStatusChecker\")\n    private", "type": "TaskStatusChecker", "declarator": "taskStatusChecker", "var_name": "taskStatusChecker"}, {"original_string": "@Captor\n    ArgumentCaptor<Values> captor = ArgumentCaptor.forClass(Values.class);", "modifier": "@Captor", "type": "ArgumentCaptor<Values>", "declarator": "captor = ArgumentCaptor.forClass(Values.class)", "var_name": "captor"}, {"original_string": "@InjectMocks\n    ResourceProcessingBolt resourceProcessingBolt = new ResourceProcessingBolt(amazonClient);", "modifier": "@InjectMocks", "type": "ResourceProcessingBolt", "declarator": "resourceProcessingBolt = new ResourceProcessingBolt(amazonClient)", "var_name": "resourceProcessingBolt"}], "file": "service/dps/storm/topologies/media-service/src/test/java/eu/europeana/cloud/service/dps/storm/topologies/media/service/ResourceProcessingBoltTest.java"}, "test_case": {"identifier": "shouldDropTheTaskAndStopProcessing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDropTheTaskAndStopProcessing() throws Exception {\n        Tuple anchorTuple = mock(TupleImpl.class);\n        stormTaskTuple.addParameter(PluginParameterKeys.RESOURCE_LINKS_COUNT, Integer.toString(5));\n        stormTaskTuple.addParameter(PluginParameterKeys.RESOURCE_LINK_KEY, \"{\\\"resourceUrl\\\":\\\"http://contribute.europeana.eu/media/d2136d50-5b4c-0136-9258-16256f71c4b1\\\",\\\"urlTypes\\\":[\\\"HAS_VIEW\\\"]}\");\n\n        String resourceName = \"RESOURCE_URL\";\n        int thumbnailCount = 3;\n        List<Thumbnail> thumbnailList = getThumbnails(thumbnailCount);\n\n        AbstractResourceMetadata resourceMetadata = new TextResourceMetadata(\"text/xml\", resourceName, 100L, false, 10, thumbnailList);\n        ResourceExtractionResult resourceExtractionResult = new ResourceExtractionResultImpl(resourceMetadata, thumbnailList);\n\n        when(mediaExtractor.performMediaExtraction(any(RdfResourceEntry.class), anyBoolean())).thenReturn(resourceExtractionResult);\n        when(amazonClient.putObject(anyString(), any(InputStream.class), isNull(ObjectMetadata.class))).thenReturn(new PutObjectResult());\n\n        when(taskStatusChecker.hasKillFlag(eq(TASK_ID))).thenReturn(false).thenReturn(true);\n\n        resourceProcessingBolt.execute(anchorTuple, stormTaskTuple);\n        verify(amazonClient, Mockito.times(1)).putObject(anyString(), any(InputStream.class), any(ObjectMetadata.class));\n    }", "signature": "void shouldDropTheTaskAndStopProcessing()", "full_signature": "@Test public void shouldDropTheTaskAndStopProcessing()", "class_method_signature": "ResourceProcessingBoltTest.shouldDropTheTaskAndStopProcessing()", "testcase": true, "constructor": false, "invocations": ["mock", "addParameter", "toString", "addParameter", "getThumbnails", "thenReturn", "when", "performMediaExtraction", "any", "anyBoolean", "thenReturn", "when", "putObject", "anyString", "any", "isNull", "thenReturn", "thenReturn", "when", "hasKillFlag", "eq", "execute", "putObject", "verify", "times", "anyString", "any", "any"]}, "focal_class": {"identifier": "ResourceProcessingBolt", "superclass": "extends AbstractDpsBolt", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ResourceProcessingBolt.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ResourceProcessingBolt.class)", "var_name": "LOGGER"}, {"original_string": "private static final String MEDIA_RESOURCE_EXCEPTION = \"media resource exception\";", "modifier": "private static final", "type": "String", "declarator": "MEDIA_RESOURCE_EXCEPTION = \"media resource exception\"", "var_name": "MEDIA_RESOURCE_EXCEPTION"}, {"original_string": "private AmazonClient amazonClient;", "modifier": "private", "type": "AmazonClient", "declarator": "amazonClient", "var_name": "amazonClient"}, {"original_string": "private transient Gson gson;", "modifier": "private transient", "type": "Gson", "declarator": "gson", "var_name": "gson"}, {"original_string": "private transient MediaExtractor mediaExtractor;", "modifier": "private transient", "type": "MediaExtractor", "declarator": "mediaExtractor", "var_name": "mediaExtractor"}], "methods": [{"identifier": "ResourceProcessingBolt", "parameters": "(AmazonClient amazonClient)", "modifiers": "public", "return": "", "signature": " ResourceProcessingBolt(AmazonClient amazonClient)", "full_signature": "public  ResourceProcessingBolt(AmazonClient amazonClient)", "class_method_signature": "ResourceProcessingBolt.ResourceProcessingBolt(AmazonClient amazonClient)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "full_signature": "@Override public void execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "class_method_signature": "ResourceProcessingBolt.execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "testcase": false, "constructor": false}, {"identifier": "storeThumbnails", "parameters": "(StormTaskTuple stormTaskTuple, StringBuilder exception, ResourceExtractionResult resourceExtractionResult)", "modifiers": "private", "return": "void", "signature": "void storeThumbnails(StormTaskTuple stormTaskTuple, StringBuilder exception, ResourceExtractionResult resourceExtractionResult)", "full_signature": "private void storeThumbnails(StormTaskTuple stormTaskTuple, StringBuilder exception, ResourceExtractionResult resourceExtractionResult)", "class_method_signature": "ResourceProcessingBolt.storeThumbnails(StormTaskTuple stormTaskTuple, StringBuilder exception, ResourceExtractionResult resourceExtractionResult)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void prepare()", "full_signature": "@Override public void prepare()", "class_method_signature": "ResourceProcessingBolt.prepare()", "testcase": false, "constructor": false}, {"identifier": "initGson", "parameters": "()", "modifiers": "", "return": "void", "signature": "void initGson()", "full_signature": " void initGson()", "class_method_signature": "ResourceProcessingBolt.initGson()", "testcase": false, "constructor": false}, {"identifier": "createMediaExtractor", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createMediaExtractor()", "full_signature": "private void createMediaExtractor()", "class_method_signature": "ResourceProcessingBolt.createMediaExtractor()", "testcase": false, "constructor": false}, {"identifier": "prepareObjectMetadata", "parameters": "(Thumbnail thumbnail)", "modifiers": "private", "return": "ObjectMetadata", "signature": "ObjectMetadata prepareObjectMetadata(Thumbnail thumbnail)", "full_signature": "private ObjectMetadata prepareObjectMetadata(Thumbnail thumbnail)", "class_method_signature": "ResourceProcessingBolt.prepareObjectMetadata(Thumbnail thumbnail)", "testcase": false, "constructor": false}, {"identifier": "buildErrorMessage", "parameters": "(StringBuilder message, String newMessage)", "modifiers": "private", "return": "void", "signature": "void buildErrorMessage(StringBuilder message, String newMessage)", "full_signature": "private void buildErrorMessage(StringBuilder message, String newMessage)", "class_method_signature": "ResourceProcessingBolt.buildErrorMessage(StringBuilder message, String newMessage)", "testcase": false, "constructor": false}], "file": "service/dps/storm/topologies/media-service/src/main/java/eu/europeana/cloud/service/dps/storm/topologies/media/service/ResourceProcessingBolt.java"}, "focal_method": {"identifier": "execute", "parameters": "(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple) {\n        LOGGER.info(\"Starting resource processing\");\n        long processingStartTime = new Date().getTime();\n        StringBuilder exception = new StringBuilder();\n        if (stormTaskTuple.getParameter(PluginParameterKeys.RESOURCE_LINKS_COUNT) == null) {\n            outputCollector.emit(anchorTuple, stormTaskTuple.toStormTuple());\n            outputCollector.ack(anchorTuple);\n        } else {\n            try {\n                RdfResourceEntry rdfResourceEntry = gson.fromJson(stormTaskTuple.getParameter(PluginParameterKeys.RESOURCE_LINK_KEY), RdfResourceEntry.class);\n                ResourceExtractionResult resourceExtractionResult = mediaExtractor.performMediaExtraction(rdfResourceEntry, Boolean.parseBoolean(stormTaskTuple.getParameter(PluginParameterKeys.MAIN_THUMBNAIL_AVAILABLE)));\n                if (resourceExtractionResult != null) {\n                    if (resourceExtractionResult.getMetadata() != null)\n                        stormTaskTuple.addParameter(PluginParameterKeys.RESOURCE_METADATA, gson.toJson(resourceExtractionResult.getMetadata()));\n                    storeThumbnails(stormTaskTuple, exception, resourceExtractionResult);\n                }\n                LOGGER.info(\"Resource processing finished in: {}ms\", String.valueOf(Calendar.getInstance().getTimeInMillis() - processingStartTime));\n            } catch (Exception e) {\n                LOGGER.error(\"Exception while processing the resource {}. The full error is:{} \", stormTaskTuple.getParameter(PluginParameterKeys.RESOURCE_URL), ExceptionUtils.getStackTrace(e));\n                buildErrorMessage(exception, \"Exception while processing the resource: \" + stormTaskTuple.getParameter(PluginParameterKeys.RESOURCE_URL) + \". The full error is: \" + e.getMessage() + \" because of: \" + e.getCause());\n            } finally {\n                stormTaskTuple.getParameters().remove(PluginParameterKeys.RESOURCE_LINK_KEY);\n                if (exception.length() > 0) {\n                    stormTaskTuple.addParameter(PluginParameterKeys.EXCEPTION_ERROR_MESSAGE, exception.toString());\n                    stormTaskTuple.addParameter(PluginParameterKeys.UNIFIED_ERROR_MESSAGE, MEDIA_RESOURCE_EXCEPTION);\n                }\n                outputCollector.emit(anchorTuple, stormTaskTuple.toStormTuple());\n                outputCollector.ack(anchorTuple);\n            }\n        }\n        LOGGER.info(\"Resource processing finished in: {}ms\", Calendar.getInstance().getTimeInMillis() - processingStartTime);\n    }", "signature": "void execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "full_signature": "@Override public void execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "class_method_signature": "ResourceProcessingBolt.execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple)", "testcase": false, "constructor": false, "invocations": ["info", "getTime", "getParameter", "emit", "toStormTuple", "ack", "fromJson", "getParameter", "performMediaExtraction", "parseBoolean", "getParameter", "getMetadata", "addParameter", "toJson", "getMetadata", "storeThumbnails", "info", "valueOf", "getTimeInMillis", "getInstance", "error", "getParameter", "getStackTrace", "buildErrorMessage", "getParameter", "getMessage", "getCause", "remove", "getParameters", "length", "addParameter", "toString", "addParameter", "emit", "toStormTuple", "ack", "info", "getTimeInMillis", "getInstance"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}