{"test_class": {"identifier": "BucketsHandlerTest", "superclass": "extends CassandraTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private BucketsHandler bucketsHandler;", "modifier": "@Autowired\n    private", "type": "BucketsHandler", "declarator": "bucketsHandler", "var_name": "bucketsHandler"}, {"original_string": "@Autowired\n    private CassandraConnectionProvider dbService;", "modifier": "@Autowired\n    private", "type": "CassandraConnectionProvider", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "private static final String BUCKETS_TABLE_NAME = \"provider_record_id_buckets\";", "modifier": "private static final", "type": "String", "declarator": "BUCKETS_TABLE_NAME = \"provider_record_id_buckets\"", "var_name": "BUCKETS_TABLE_NAME"}], "file": "service/commons/src/test/java/eu/europeana/cloud/service/commons/utils/BucketsHandlerTest.java"}, "test_case": {"identifier": "shouldUpdateCounterForExistingBucket", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdateCounterForExistingBucket() {\n        Bucket bucket = new Bucket(\"sampleObjectId\", new com.eaio.uuid.UUID().toString(), 0);\n        bucketsHandler.increaseBucketCount(BUCKETS_TABLE_NAME, bucket);\n        bucketsHandler.increaseBucketCount(BUCKETS_TABLE_NAME, bucket);\n\n        assertResults(bucket, 2);\n    }", "signature": "void shouldUpdateCounterForExistingBucket()", "full_signature": "@Test public void shouldUpdateCounterForExistingBucket()", "class_method_signature": "BucketsHandlerTest.shouldUpdateCounterForExistingBucket()", "testcase": true, "constructor": false, "invocations": ["toString", "increaseBucketCount", "increaseBucketCount", "assertResults"]}, "focal_class": {"identifier": "BucketsHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String OBJECT_ID_COLUMN_NAME = \"object_id\";", "modifier": "public static final", "type": "String", "declarator": "OBJECT_ID_COLUMN_NAME = \"object_id\"", "var_name": "OBJECT_ID_COLUMN_NAME"}, {"original_string": "public static final String BUCKET_ID_COLUMN_NAME = \"bucket_id\";", "modifier": "public static final", "type": "String", "declarator": "BUCKET_ID_COLUMN_NAME = \"bucket_id\"", "var_name": "BUCKET_ID_COLUMN_NAME"}, {"original_string": "public static final String ROWS_COUNT_COLUMN_NAME = \"rows_count\";", "modifier": "public static final", "type": "String", "declarator": "ROWS_COUNT_COLUMN_NAME = \"rows_count\"", "var_name": "ROWS_COUNT_COLUMN_NAME"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "BucketsHandler", "parameters": "(Session session)", "modifiers": "public", "return": "", "signature": " BucketsHandler(Session session)", "full_signature": "public  BucketsHandler(Session session)", "class_method_signature": "BucketsHandler.BucketsHandler(Session session)", "testcase": false, "constructor": true}, {"identifier": "getCurrentBucket", "parameters": "(String bucketsTableName, String objectId)", "modifiers": "public", "return": "Bucket", "signature": "Bucket getCurrentBucket(String bucketsTableName, String objectId)", "full_signature": "public Bucket getCurrentBucket(String bucketsTableName, String objectId)", "class_method_signature": "BucketsHandler.getCurrentBucket(String bucketsTableName, String objectId)", "testcase": false, "constructor": false}, {"identifier": "increaseBucketCount", "parameters": "(String bucketsTableName, Bucket bucket)", "modifiers": "public", "return": "void", "signature": "void increaseBucketCount(String bucketsTableName, Bucket bucket)", "full_signature": "public void increaseBucketCount(String bucketsTableName, Bucket bucket)", "class_method_signature": "BucketsHandler.increaseBucketCount(String bucketsTableName, Bucket bucket)", "testcase": false, "constructor": false}, {"identifier": "decreaseBucketCount", "parameters": "(String bucketsTableName, Bucket bucket)", "modifiers": "public", "return": "void", "signature": "void decreaseBucketCount(String bucketsTableName, Bucket bucket)", "full_signature": "public void decreaseBucketCount(String bucketsTableName, Bucket bucket)", "class_method_signature": "BucketsHandler.decreaseBucketCount(String bucketsTableName, Bucket bucket)", "testcase": false, "constructor": false}, {"identifier": "getAllBuckets", "parameters": "(String bucketsTableName, String objectId)", "modifiers": "public", "return": "List<Bucket>", "signature": "List<Bucket> getAllBuckets(String bucketsTableName, String objectId)", "full_signature": "public List<Bucket> getAllBuckets(String bucketsTableName, String objectId)", "class_method_signature": "BucketsHandler.getAllBuckets(String bucketsTableName, String objectId)", "testcase": false, "constructor": false}, {"identifier": "getBucket", "parameters": "(String bucketsTableName, Bucket bucket)", "modifiers": "public", "return": "Bucket", "signature": "Bucket getBucket(String bucketsTableName, Bucket bucket)", "full_signature": "public Bucket getBucket(String bucketsTableName, Bucket bucket)", "class_method_signature": "BucketsHandler.getBucket(String bucketsTableName, Bucket bucket)", "testcase": false, "constructor": false}, {"identifier": "getNextBucket", "parameters": "(String bucketsTableName, String objectId)", "modifiers": "public", "return": "Bucket", "signature": "Bucket getNextBucket(String bucketsTableName, String objectId)", "full_signature": "public Bucket getNextBucket(String bucketsTableName, String objectId)", "class_method_signature": "BucketsHandler.getNextBucket(String bucketsTableName, String objectId)", "testcase": false, "constructor": false}, {"identifier": "getNextBucket", "parameters": "(String bucketsTableName, String objectId, Bucket bucket)", "modifiers": "public", "return": "Bucket", "signature": "Bucket getNextBucket(String bucketsTableName, String objectId, Bucket bucket)", "full_signature": "public Bucket getNextBucket(String bucketsTableName, String objectId, Bucket bucket)", "class_method_signature": "BucketsHandler.getNextBucket(String bucketsTableName, String objectId, Bucket bucket)", "testcase": false, "constructor": false}, {"identifier": "removeBucket", "parameters": "(String bucketsTableName, Bucket bucket)", "modifiers": "public", "return": "void", "signature": "void removeBucket(String bucketsTableName, Bucket bucket)", "full_signature": "public void removeBucket(String bucketsTableName, Bucket bucket)", "class_method_signature": "BucketsHandler.removeBucket(String bucketsTableName, Bucket bucket)", "testcase": false, "constructor": false}, {"identifier": "getBucket", "parameters": "(String query)", "modifiers": "private", "return": "Bucket", "signature": "Bucket getBucket(String query)", "full_signature": "private Bucket getBucket(String query)", "class_method_signature": "BucketsHandler.getBucket(String query)", "testcase": false, "constructor": false}], "file": "service/commons/src/main/java/eu/europeana/cloud/service/commons/utils/BucketsHandler.java"}, "focal_method": {"identifier": "increaseBucketCount", "parameters": "(String bucketsTableName, Bucket bucket)", "modifiers": "public", "return": "void", "body": "public void increaseBucketCount(String bucketsTableName, Bucket bucket) {\n        String query = \"UPDATE \" + bucketsTableName + \" SET rows_count = rows_count + 1 WHERE object_id = '\" + bucket.getObjectId() + \"' AND bucket_id = \" + UUID.fromString(bucket.getBucketId()) + \";\";\n        session.execute(query);\n    }", "signature": "void increaseBucketCount(String bucketsTableName, Bucket bucket)", "full_signature": "public void increaseBucketCount(String bucketsTableName, Bucket bucket)", "class_method_signature": "BucketsHandler.increaseBucketCount(String bucketsTableName, Bucket bucket)", "testcase": false, "constructor": false, "invocations": ["getObjectId", "fromString", "getBucketId", "execute"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}