{"test_class": {"identifier": "InMemoryDataSetServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InMemoryDataSetDAO datasetDao;", "modifier": "private", "type": "InMemoryDataSetDAO", "declarator": "datasetDao", "var_name": "datasetDao"}, {"original_string": "private String providerId = \"FBC\";", "modifier": "private", "type": "String", "declarator": "providerId = \"FBC\"", "var_name": "providerId"}, {"original_string": "private String dataSetId = \"Books\";", "modifier": "private", "type": "String", "declarator": "dataSetId = \"Books\"", "var_name": "dataSetId"}, {"original_string": "private List<Representation> representations;", "modifier": "private", "type": "List<Representation>", "declarator": "representations", "var_name": "representations"}, {"original_string": "private InMemoryDataSetService dataSetService;", "modifier": "private", "type": "InMemoryDataSetService", "declarator": "dataSetService", "var_name": "dataSetService"}, {"original_string": "private UISClientHandler uisHandler;", "modifier": "private", "type": "UISClientHandler", "declarator": "uisHandler", "var_name": "uisHandler"}], "file": "service/mcs/inmemory/src/test/java/eu/europeana/cloud/service/mcs/inmemory/InMemoryDataSetServiceTest.java"}, "test_case": {"identifier": "shouldListEmptyDataSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldListEmptyDataSet()\n            throws Exception {\n        when(datasetDao.listDataSet(providerId, dataSetId)).thenReturn(new ArrayList<Representation>());\n        InMemoryRecordDAO recordDao = new InMemoryRecordListDAO(new ArrayList<Representation>());\n        dataSetService = new InMemoryDataSetService(datasetDao, recordDao, uisHandler);\n\n        ResultSlice<Representation> actual = dataSetService.listDataSet(providerId, dataSetId, null, 100);\n\n        assertThat(\"Next slice should be null, but was '\" + actual.getNextSlice() + \"'\", actual.getNextSlice(),\n            nullValue());\n        assertTrue(\"List of representations should be empty, but was: \" + actual.getResults(), actual.getResults()\n                .isEmpty());\n    }", "signature": "void shouldListEmptyDataSet()", "full_signature": "@Test public void shouldListEmptyDataSet()", "class_method_signature": "InMemoryDataSetServiceTest.shouldListEmptyDataSet()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "listDataSet", "listDataSet", "assertThat", "getNextSlice", "getNextSlice", "nullValue", "assertTrue", "getResults", "isEmpty", "getResults"]}, "focal_class": {"identifier": "InMemoryDataSetService", "superclass": "", "interfaces": "implements DataSetService", "fields": [{"original_string": "@Autowired\n    private InMemoryDataSetDAO dataSetDAO;", "modifier": "@Autowired\n    private", "type": "InMemoryDataSetDAO", "declarator": "dataSetDAO", "var_name": "dataSetDAO"}, {"original_string": "@Autowired\n    private InMemoryRecordDAO recordDAO;", "modifier": "@Autowired\n    private", "type": "InMemoryRecordDAO", "declarator": "recordDAO", "var_name": "recordDAO"}, {"original_string": "@Autowired\n    private UISClientHandler uisHandler;", "modifier": "@Autowired\n    private", "type": "UISClientHandler", "declarator": "uisHandler", "var_name": "uisHandler"}], "methods": [{"identifier": "InMemoryDataSetService", "parameters": "(InMemoryDataSetDAO dataSetDAO, InMemoryRecordDAO recordDAO,\n            UISClientHandler dataProviderDao)", "modifiers": "public", "return": "", "signature": " InMemoryDataSetService(InMemoryDataSetDAO dataSetDAO, InMemoryRecordDAO recordDAO,\n            UISClientHandler dataProviderDao)", "full_signature": "public  InMemoryDataSetService(InMemoryDataSetDAO dataSetDAO, InMemoryRecordDAO recordDAO,\n            UISClientHandler dataProviderDao)", "class_method_signature": "InMemoryDataSetService.InMemoryDataSetService(InMemoryDataSetDAO dataSetDAO, InMemoryRecordDAO recordDAO,\n            UISClientHandler dataProviderDao)", "testcase": false, "constructor": true}, {"identifier": "InMemoryDataSetService", "parameters": "()", "modifiers": "public", "return": "", "signature": " InMemoryDataSetService()", "full_signature": "public  InMemoryDataSetService()", "class_method_signature": "InMemoryDataSetService.InMemoryDataSetService()", "testcase": false, "constructor": true}, {"identifier": "listDataSet", "parameters": "(String providerId, String dataSetId, String thresholdParam, int limit)", "modifiers": "@Override public", "return": "ResultSlice<Representation>", "signature": "ResultSlice<Representation> listDataSet(String providerId, String dataSetId, String thresholdParam, int limit)", "full_signature": "@Override public ResultSlice<Representation> listDataSet(String providerId, String dataSetId, String thresholdParam, int limit)", "class_method_signature": "InMemoryDataSetService.listDataSet(String providerId, String dataSetId, String thresholdParam, int limit)", "testcase": false, "constructor": false}, {"identifier": "parseInteger", "parameters": "(String thresholdParam)", "modifiers": "private", "return": "int", "signature": "int parseInteger(String thresholdParam)", "full_signature": "private int parseInteger(String thresholdParam)", "class_method_signature": "InMemoryDataSetService.parseInteger(String thresholdParam)", "testcase": false, "constructor": false}, {"identifier": "addAssignment", "parameters": "(String providerId, String dataSetId, String recordId, String schema, String version)", "modifiers": "@Override public", "return": "void", "signature": "void addAssignment(String providerId, String dataSetId, String recordId, String schema, String version)", "full_signature": "@Override public void addAssignment(String providerId, String dataSetId, String recordId, String schema, String version)", "class_method_signature": "InMemoryDataSetService.addAssignment(String providerId, String dataSetId, String recordId, String schema, String version)", "testcase": false, "constructor": false}, {"identifier": "removeAssignment", "parameters": "(String providerId, String dataSetId, String recordId, String schema)", "modifiers": "@Override public", "return": "void", "signature": "void removeAssignment(String providerId, String dataSetId, String recordId, String schema)", "full_signature": "@Override public void removeAssignment(String providerId, String dataSetId, String recordId, String schema)", "class_method_signature": "InMemoryDataSetService.removeAssignment(String providerId, String dataSetId, String recordId, String schema)", "testcase": false, "constructor": false}, {"identifier": "createDataSet", "parameters": "(String providerId, String dataSetId, String description)", "modifiers": "@Override public", "return": "DataSet", "signature": "DataSet createDataSet(String providerId, String dataSetId, String description)", "full_signature": "@Override public DataSet createDataSet(String providerId, String dataSetId, String description)", "class_method_signature": "InMemoryDataSetService.createDataSet(String providerId, String dataSetId, String description)", "testcase": false, "constructor": false}, {"identifier": "getDataSets", "parameters": "(String providerId, String thresholdDatasetId, int limit)", "modifiers": "@Override public", "return": "ResultSlice<DataSet>", "signature": "ResultSlice<DataSet> getDataSets(String providerId, String thresholdDatasetId, int limit)", "full_signature": "@Override public ResultSlice<DataSet> getDataSets(String providerId, String thresholdDatasetId, int limit)", "class_method_signature": "InMemoryDataSetService.getDataSets(String providerId, String thresholdDatasetId, int limit)", "testcase": false, "constructor": false}, {"identifier": "deleteDataSet", "parameters": "(String providerId, String dataSetId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteDataSet(String providerId, String dataSetId)", "full_signature": "@Override public void deleteDataSet(String providerId, String dataSetId)", "class_method_signature": "InMemoryDataSetService.deleteDataSet(String providerId, String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "updateDataSet", "parameters": "(String providerId, String dataSetId, String description)", "modifiers": "@Override public", "return": "DataSet", "signature": "DataSet updateDataSet(String providerId, String dataSetId, String description)", "full_signature": "@Override public DataSet updateDataSet(String providerId, String dataSetId, String description)", "class_method_signature": "InMemoryDataSetService.updateDataSet(String providerId, String dataSetId, String description)", "testcase": false, "constructor": false}], "file": "service/mcs/inmemory/src/main/java/eu/europeana/cloud/service/mcs/inmemory/InMemoryDataSetService.java"}, "focal_method": {"identifier": "listDataSet", "parameters": "(String providerId, String dataSetId, String thresholdParam, int limit)", "modifiers": "@Override public", "return": "ResultSlice<Representation>", "body": "@Override\n    public ResultSlice<Representation> listDataSet(String providerId, String dataSetId, String thresholdParam, int limit)\n            throws DataSetNotExistsException {\n        int treshold = 0;\n        if (thresholdParam != null) {\n            treshold = parseInteger(thresholdParam);\n        }\n        List<Representation> listOfAllStubs = dataSetDAO.listDataSet(providerId, dataSetId);\n        if (listOfAllStubs.size() != 0 && treshold >= listOfAllStubs.size()) {\n            throw new IllegalArgumentException(\"Illegal threshold param value: '\" + thresholdParam + \"'.\");\n        }\n        int newOffset = -1;\n        List<Representation> listOfStubs = listOfAllStubs;\n        if (limit > 0) {\n            listOfStubs = listOfAllStubs.subList(treshold, Math.min(treshold + limit, listOfAllStubs.size()));\n            if (listOfAllStubs.size() > treshold + limit) {\n                newOffset = treshold + limit;\n            }\n        }\n        List<Representation> toReturn = new ArrayList<>(listOfStubs.size());\n        for (Representation stub : listOfStubs) {\n            Representation realContent;\n            try {\n                realContent = recordDAO.getRepresentation(stub.getCloudId(), stub.getRepresentationName(),\n                    stub.getVersion());\n            } catch (RepresentationNotExistsException e) {\n                // we have reference to an object that not exists anymore!\n                continue;\n            }\n            toReturn.add(realContent);\n        }\n        return newOffset == -1 ? new ResultSlice<>(null, toReturn) : new ResultSlice<>(Integer.toString(newOffset),\n                toReturn);\n    }", "signature": "ResultSlice<Representation> listDataSet(String providerId, String dataSetId, String thresholdParam, int limit)", "full_signature": "@Override public ResultSlice<Representation> listDataSet(String providerId, String dataSetId, String thresholdParam, int limit)", "class_method_signature": "InMemoryDataSetService.listDataSet(String providerId, String dataSetId, String thresholdParam, int limit)", "testcase": false, "constructor": false, "invocations": ["parseInteger", "listDataSet", "size", "size", "subList", "min", "size", "size", "size", "getRepresentation", "getCloudId", "getRepresentationName", "getVersion", "add", "toString"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}