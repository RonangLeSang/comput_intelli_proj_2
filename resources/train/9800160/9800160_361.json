{"test_class": {"identifier": "DataSetServiceClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public Recorder recorder = new Recorder();", "modifier": "@Rule\n    public", "type": "Recorder", "declarator": "recorder = new Recorder()", "var_name": "recorder"}, {"original_string": "private final String baseUrl = \"http://localhost:8080/mcs\";", "modifier": "private final", "type": "String", "declarator": "baseUrl = \"http://localhost:8080/mcs\"", "var_name": "baseUrl"}], "file": "service/mcs/driver/src/test/java/eu/europeana/cloud/mcs/driver/DataSetServiceClientTest.java"}, "test_case": {"identifier": "shouldThrowDriverExceptionForDeleteDataSet", "parameters": "()", "modifiers": "@Betamax(tape = \"dataSets_shouldThrowDriverExceptionForDeleteDataSet\") @Test(expected = DriverException.class) public", "return": "void", "body": "@Betamax(tape = \"dataSets_shouldThrowDriverExceptionForDeleteDataSet\")\n    @Test(expected = DriverException.class)\n    public void shouldThrowDriverExceptionForDeleteDataSet()\n            throws MCSException {\n        String providerId = \"Provider002\";\n        String dataSetId = \"dataset000033\";\n\n        DataSetServiceClient instance = new DataSetServiceClient(baseUrl);\n        instance.deleteDataSet(providerId, dataSetId);\n\n    }", "signature": "void shouldThrowDriverExceptionForDeleteDataSet()", "full_signature": "@Betamax(tape = \"dataSets_shouldThrowDriverExceptionForDeleteDataSet\") @Test(expected = DriverException.class) public void shouldThrowDriverExceptionForDeleteDataSet()", "class_method_signature": "DataSetServiceClientTest.shouldThrowDriverExceptionForDeleteDataSet()", "testcase": true, "constructor": false, "invocations": ["deleteDataSet"]}, "focal_class": {"identifier": "DataSetServiceClient", "superclass": "extends MCSClient", "interfaces": "", "fields": [{"original_string": "private final Client client = ClientBuilder.newBuilder()\n            .register(JacksonFeature.class)\n            .register(MultiPartFeature.class)\n            .build();", "modifier": "private final", "type": "Client", "declarator": "client = ClientBuilder.newBuilder()\n            .register(JacksonFeature.class)\n            .register(MultiPartFeature.class)\n            .build()", "var_name": "client"}], "methods": [{"identifier": "DataSetServiceClient", "parameters": "(String baseUrl)", "modifiers": "public", "return": "", "signature": " DataSetServiceClient(String baseUrl)", "full_signature": "public  DataSetServiceClient(String baseUrl)", "class_method_signature": "DataSetServiceClient.DataSetServiceClient(String baseUrl)", "testcase": false, "constructor": true}, {"identifier": "DataSetServiceClient", "parameters": "(String baseUrl, final String authorization)", "modifiers": "public", "return": "", "signature": " DataSetServiceClient(String baseUrl, final String authorization)", "full_signature": "public  DataSetServiceClient(String baseUrl, final String authorization)", "class_method_signature": "DataSetServiceClient.DataSetServiceClient(String baseUrl, final String authorization)", "testcase": false, "constructor": true}, {"identifier": "DataSetServiceClient", "parameters": "(String baseUrl, final String username, final String password)", "modifiers": "public", "return": "", "signature": " DataSetServiceClient(String baseUrl, final String username, final String password)", "full_signature": "public  DataSetServiceClient(String baseUrl, final String username, final String password)", "class_method_signature": "DataSetServiceClient.DataSetServiceClient(String baseUrl, final String username, final String password)", "testcase": false, "constructor": true}, {"identifier": "DataSetServiceClient", "parameters": "(String baseUrl, final String authorizationHeader, final String username, final String password,\n                                final int connectTimeoutInMillis, final int readTimeoutInMillis)", "modifiers": "public", "return": "", "signature": " DataSetServiceClient(String baseUrl, final String authorizationHeader, final String username, final String password,\n                                final int connectTimeoutInMillis, final int readTimeoutInMillis)", "full_signature": "public  DataSetServiceClient(String baseUrl, final String authorizationHeader, final String username, final String password,\n                                final int connectTimeoutInMillis, final int readTimeoutInMillis)", "class_method_signature": "DataSetServiceClient.DataSetServiceClient(String baseUrl, final String authorizationHeader, final String username, final String password,\n                                final int connectTimeoutInMillis, final int readTimeoutInMillis)", "testcase": false, "constructor": true}, {"identifier": "getDataSetsForProviderChunk", "parameters": "(String providerId, String startFrom)", "modifiers": "public", "return": "ResultSlice<DataSet>", "signature": "ResultSlice<DataSet> getDataSetsForProviderChunk(String providerId, String startFrom)", "full_signature": "public ResultSlice<DataSet> getDataSetsForProviderChunk(String providerId, String startFrom)", "class_method_signature": "DataSetServiceClient.getDataSetsForProviderChunk(String providerId, String startFrom)", "testcase": false, "constructor": false}, {"identifier": "getDataSetsForProvider", "parameters": "(String providerId)", "modifiers": "public", "return": "List<DataSet>", "signature": "List<DataSet> getDataSetsForProvider(String providerId)", "full_signature": "public List<DataSet> getDataSetsForProvider(String providerId)", "class_method_signature": "DataSetServiceClient.getDataSetsForProvider(String providerId)", "testcase": false, "constructor": false}, {"identifier": "getDataSetIteratorForProvider", "parameters": "(String providerId)", "modifiers": "public", "return": "DataSetIterator", "signature": "DataSetIterator getDataSetIteratorForProvider(String providerId)", "full_signature": "public DataSetIterator getDataSetIteratorForProvider(String providerId)", "class_method_signature": "DataSetServiceClient.getDataSetIteratorForProvider(String providerId)", "testcase": false, "constructor": false}, {"identifier": "createDataSet", "parameters": "(String providerId, String dataSetId, String description)", "modifiers": "public", "return": "URI", "signature": "URI createDataSet(String providerId, String dataSetId, String description)", "full_signature": "public URI createDataSet(String providerId, String dataSetId, String description)", "class_method_signature": "DataSetServiceClient.createDataSet(String providerId, String dataSetId, String description)", "testcase": false, "constructor": false}, {"identifier": "getDataSetRepresentationsChunk", "parameters": "(\n            String providerId, String dataSetId, String startFrom)", "modifiers": "public", "return": "ResultSlice<Representation>", "signature": "ResultSlice<Representation> getDataSetRepresentationsChunk(\n            String providerId, String dataSetId, String startFrom)", "full_signature": "public ResultSlice<Representation> getDataSetRepresentationsChunk(\n            String providerId, String dataSetId, String startFrom)", "class_method_signature": "DataSetServiceClient.getDataSetRepresentationsChunk(\n            String providerId, String dataSetId, String startFrom)", "testcase": false, "constructor": false}, {"identifier": "getDataSetRepresentations", "parameters": "(String providerId, String dataSetId)", "modifiers": "public", "return": "List<Representation>", "signature": "List<Representation> getDataSetRepresentations(String providerId, String dataSetId)", "full_signature": "public List<Representation> getDataSetRepresentations(String providerId, String dataSetId)", "class_method_signature": "DataSetServiceClient.getDataSetRepresentations(String providerId, String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "getRepresentationIterator", "parameters": "(String providerId, String dataSetId)", "modifiers": "public", "return": "RepresentationIterator", "signature": "RepresentationIterator getRepresentationIterator(String providerId, String dataSetId)", "full_signature": "public RepresentationIterator getRepresentationIterator(String providerId, String dataSetId)", "class_method_signature": "DataSetServiceClient.getRepresentationIterator(String providerId, String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "updateDescriptionOfDataSet", "parameters": "(String providerId, String dataSetId, String description)", "modifiers": "public", "return": "void", "signature": "void updateDescriptionOfDataSet(String providerId, String dataSetId, String description)", "full_signature": "public void updateDescriptionOfDataSet(String providerId, String dataSetId, String description)", "class_method_signature": "DataSetServiceClient.updateDescriptionOfDataSet(String providerId, String dataSetId, String description)", "testcase": false, "constructor": false}, {"identifier": "deleteDataSet", "parameters": "(String providerId, String dataSetId)", "modifiers": "public", "return": "void", "signature": "void deleteDataSet(String providerId, String dataSetId)", "full_signature": "public void deleteDataSet(String providerId, String dataSetId)", "class_method_signature": "DataSetServiceClient.deleteDataSet(String providerId, String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "assignRepresentationToDataSet", "parameters": "(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "modifiers": "public", "return": "void", "signature": "void assignRepresentationToDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "full_signature": "public void assignRepresentationToDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "class_method_signature": "DataSetServiceClient.assignRepresentationToDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "getForm", "parameters": "(String cloudId, String representationName, String version)", "modifiers": "private", "return": "Form", "signature": "Form getForm(String cloudId, String representationName, String version)", "full_signature": "private Form getForm(String cloudId, String representationName, String version)", "class_method_signature": "DataSetServiceClient.getForm(String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "assignRepresentationToDataSet", "parameters": "(\n            String providerId, String dataSetId, String cloudId, String representationName,\n            String version, String key, String value)", "modifiers": "public", "return": "void", "signature": "void assignRepresentationToDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName,\n            String version, String key, String value)", "full_signature": "public void assignRepresentationToDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName,\n            String version, String key, String value)", "class_method_signature": "DataSetServiceClient.assignRepresentationToDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName,\n            String version, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "unassignRepresentationFromDataSet", "parameters": "(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "modifiers": "public", "return": "void", "signature": "void unassignRepresentationFromDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "full_signature": "public void unassignRepresentationFromDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "class_method_signature": "DataSetServiceClient.unassignRepresentationFromDataSet(\n            String providerId, String dataSetId, String cloudId, String representationName, String version)", "testcase": false, "constructor": false}, {"identifier": "getDataSetRevisionsChunk", "parameters": "(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp,\n            String startFrom, Integer limit)", "modifiers": "public", "return": "ResultSlice<CloudTagsResponse>", "signature": "ResultSlice<CloudTagsResponse> getDataSetRevisionsChunk(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp,\n            String startFrom, Integer limit)", "full_signature": "public ResultSlice<CloudTagsResponse> getDataSetRevisionsChunk(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp,\n            String startFrom, Integer limit)", "class_method_signature": "DataSetServiceClient.getDataSetRevisionsChunk(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp,\n            String startFrom, Integer limit)", "testcase": false, "constructor": false}, {"identifier": "getDataSetRevisions", "parameters": "(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp)", "modifiers": "public", "return": "List<CloudTagsResponse>", "signature": "List<CloudTagsResponse> getDataSetRevisions(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp)", "full_signature": "public List<CloudTagsResponse> getDataSetRevisions(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp)", "class_method_signature": "DataSetServiceClient.getDataSetRevisions(\n            String providerId, String dataSetId, String representationName,\n            String revisionName, String revisionProviderId, String revisionTimestamp)", "testcase": false, "constructor": false}, {"identifier": "getDataSetCloudIdsByRepresentationChunk", "parameters": "(String dataSetId, String providerId, String representationName, String dateFrom, String tag, String startFrom)", "modifiers": "public", "return": "ResultSlice<CloudVersionRevisionResponse>", "signature": "ResultSlice<CloudVersionRevisionResponse> getDataSetCloudIdsByRepresentationChunk(String dataSetId, String providerId, String representationName, String dateFrom, String tag, String startFrom)", "full_signature": "public ResultSlice<CloudVersionRevisionResponse> getDataSetCloudIdsByRepresentationChunk(String dataSetId, String providerId, String representationName, String dateFrom, String tag, String startFrom)", "class_method_signature": "DataSetServiceClient.getDataSetCloudIdsByRepresentationChunk(String dataSetId, String providerId, String representationName, String dateFrom, String tag, String startFrom)", "testcase": false, "constructor": false}, {"identifier": "getDataSetCloudIdsByRepresentation", "parameters": "(String dataSetId, String providerId, \n                                           String representationName, String dateFrom, String tag)", "modifiers": "public", "return": "List<CloudVersionRevisionResponse>", "signature": "List<CloudVersionRevisionResponse> getDataSetCloudIdsByRepresentation(String dataSetId, String providerId, \n                                           String representationName, String dateFrom, String tag)", "full_signature": "public List<CloudVersionRevisionResponse> getDataSetCloudIdsByRepresentation(String dataSetId, String providerId, \n                                           String representationName, String dateFrom, String tag)", "class_method_signature": "DataSetServiceClient.getDataSetCloudIdsByRepresentation(String dataSetId, String providerId, \n                                           String representationName, String dateFrom, String tag)", "testcase": false, "constructor": false}, {"identifier": "getLatestDataSetCloudIdByRepresentationAndRevisionChunk", "parameters": "(\n            String dataSetId, String providerId, String revisionProvider, String revisionName,\n            String representationName, Boolean isDeleted, String startFrom)", "modifiers": "public", "return": "ResultSlice<CloudIdAndTimestampResponse>", "signature": "ResultSlice<CloudIdAndTimestampResponse> getLatestDataSetCloudIdByRepresentationAndRevisionChunk(\n            String dataSetId, String providerId, String revisionProvider, String revisionName,\n            String representationName, Boolean isDeleted, String startFrom)", "full_signature": "public ResultSlice<CloudIdAndTimestampResponse> getLatestDataSetCloudIdByRepresentationAndRevisionChunk(\n            String dataSetId, String providerId, String revisionProvider, String revisionName,\n            String representationName, Boolean isDeleted, String startFrom)", "class_method_signature": "DataSetServiceClient.getLatestDataSetCloudIdByRepresentationAndRevisionChunk(\n            String dataSetId, String providerId, String revisionProvider, String revisionName,\n            String representationName, Boolean isDeleted, String startFrom)", "testcase": false, "constructor": false}, {"identifier": "getLatestDataSetCloudIdByRepresentationAndRevision", "parameters": "(\n            String dataSetId, String providerId, String revisionProvider, String revisionName, \n            String representationName, Boolean isDeleted)", "modifiers": "public", "return": "List<CloudIdAndTimestampResponse>", "signature": "List<CloudIdAndTimestampResponse> getLatestDataSetCloudIdByRepresentationAndRevision(\n            String dataSetId, String providerId, String revisionProvider, String revisionName, \n            String representationName, Boolean isDeleted)", "full_signature": "public List<CloudIdAndTimestampResponse> getLatestDataSetCloudIdByRepresentationAndRevision(\n            String dataSetId, String providerId, String revisionProvider, String revisionName, \n            String representationName, Boolean isDeleted)", "class_method_signature": "DataSetServiceClient.getLatestDataSetCloudIdByRepresentationAndRevision(\n            String dataSetId, String providerId, String revisionProvider, String revisionName, \n            String representationName, Boolean isDeleted)", "testcase": false, "constructor": false}, {"identifier": "getLatelyTaggedRecords", "parameters": "(\n            String dataSetId, String providerId, String cloudId, String representationName,\n            String revisionName, String revisionProviderId)", "modifiers": "public", "return": "String", "signature": "String getLatelyTaggedRecords(\n            String dataSetId, String providerId, String cloudId, String representationName,\n            String revisionName, String revisionProviderId)", "full_signature": "public String getLatelyTaggedRecords(\n            String dataSetId, String providerId, String cloudId, String representationName,\n            String revisionName, String revisionProviderId)", "class_method_signature": "DataSetServiceClient.getLatelyTaggedRecords(\n            String dataSetId, String providerId, String cloudId, String representationName,\n            String revisionName, String revisionProviderId)", "testcase": false, "constructor": false}, {"identifier": "useAuthorizationHeader", "parameters": "(final String headerValue)", "modifiers": "public", "return": "void", "signature": "void useAuthorizationHeader(final String headerValue)", "full_signature": "public void useAuthorizationHeader(final String headerValue)", "class_method_signature": "DataSetServiceClient.useAuthorizationHeader(final String headerValue)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "DataSetServiceClient.close()", "testcase": false, "constructor": false}, {"identifier": "prepareResultSliceResponse", "parameters": "(WebTarget target)", "modifiers": "private", "return": "ResultSlice", "signature": "ResultSlice prepareResultSliceResponse(WebTarget target)", "full_signature": "private ResultSlice prepareResultSliceResponse(WebTarget target)", "class_method_signature": "DataSetServiceClient.prepareResultSliceResponse(WebTarget target)", "testcase": false, "constructor": false}, {"identifier": "closeResponse", "parameters": "(Response response)", "modifiers": "private", "return": "void", "signature": "void closeResponse(Response response)", "full_signature": "private void closeResponse(Response response)", "class_method_signature": "DataSetServiceClient.closeResponse(Response response)", "testcase": false, "constructor": false}], "file": "service/mcs/driver/src/main/java/eu/europeana/cloud/mcs/driver/DataSetServiceClient.java"}, "focal_method": {"identifier": "deleteDataSet", "parameters": "(String providerId, String dataSetId)", "modifiers": "public", "return": "void", "body": "public void deleteDataSet(String providerId, String dataSetId) throws MCSException {\n\n        WebTarget target = client\n                .target(this.baseUrl)\n                .path(DATA_SET_RESOURCE)\n                .resolveTemplate(PROVIDER_ID, providerId)\n                .resolveTemplate(DATA_SET_ID, dataSetId);\n\n        Response response = null;\n\n        try {\n            response = target.request().delete();\n\n            if (response.getStatus() != Status.NO_CONTENT.getStatusCode()) {\n\n                ErrorInfo errorInfo = response.readEntity(ErrorInfo.class);\n                throw MCSExceptionProvider.generateException(errorInfo);\n            }\n        } finally {\n            if (response != null) {\n                response.close();\n            }\n        }\n\n\n    }", "signature": "void deleteDataSet(String providerId, String dataSetId)", "full_signature": "public void deleteDataSet(String providerId, String dataSetId)", "class_method_signature": "DataSetServiceClient.deleteDataSet(String providerId, String dataSetId)", "testcase": false, "constructor": false, "invocations": ["resolveTemplate", "resolveTemplate", "path", "target", "delete", "request", "getStatus", "getStatusCode", "readEntity", "generateException", "close"]}, "repository": {"repo_id": 9800160, "url": "https://github.com/europeana/Europeana-Cloud", "stars": 13, "created": "5/1/2013 9:10:46 PM +00:00", "updates": "2020-01-24T10:33:33+00:00", "fork": "False", "license": "licensed"}}