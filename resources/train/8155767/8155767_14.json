{"test_class": {"identifier": "OwmClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/org/bitpipeline/lib/owm/OwmClientTest.java"}, "test_case": {"identifier": "testHourlyHistoryWeatherAtStation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHourlyHistoryWeatherAtStation () throws IOException, JSONException {\n\t\tHttpClient mockHttpClient = createHttpClientThatRespondsWith (TestData.HISTORY_WEATHER_AT_STATION_ID_BY_HOUR);\n\t\tOwmClient owm = new OwmClient (mockHttpClient);\n\t\tWeatherHistoryStationResponse historyResponse = owm.historyWeatherAtStation (9040, HistoryType.HOUR);\n\t\tassertNotNull  (historyResponse);\n\t\tList<AbstractWeatherData> history = historyResponse.getHistory ();\n\t\tassertNotNull (history);\n\t\tassertTrue (history.size () == 14);\n\t\tAbstractWeatherData weather = history.get (0);\n\t\tassertNotNull (weather);\n\t\tassertEquals (289.26f, weather.getTemp (), 0.001f);\n\t\tassertEquals (1019f, weather.getPressure (), 0.01f);\n\t\tassertEquals (99f, weather.getHumidity (), 0.01f);\n\t\t// wind\n\t\tassertEquals (0f, weather.getWindSpeed (), 0.01f);\n\t\tassertEquals (0f, weather.getWindGust (), 0.01f);\n\t\tassertEquals (Integer.MIN_VALUE, weather.getWindDeg ());\n\t\t// rain, snow and precipitation\n\t\tassertEquals (0, weather.getRain ());\n\t\tassertEquals (Integer.MIN_VALUE, weather.getSnow ());\n\t\tassertEquals (0, weather.getPrecipitation ());\n\t}", "signature": "void testHourlyHistoryWeatherAtStation()", "full_signature": "@Test public void testHourlyHistoryWeatherAtStation()", "class_method_signature": "OwmClientTest.testHourlyHistoryWeatherAtStation()", "testcase": true, "constructor": false, "invocations": ["createHttpClientThatRespondsWith", "historyWeatherAtStation", "assertNotNull", "getHistory", "assertNotNull", "assertTrue", "size", "get", "assertNotNull", "assertEquals", "getTemp", "assertEquals", "getPressure", "assertEquals", "getHumidity", "assertEquals", "getWindSpeed", "assertEquals", "getWindGust", "assertEquals", "getWindDeg", "assertEquals", "getRain", "assertEquals", "getSnow", "assertEquals", "getPrecipitation"]}, "focal_class": {"identifier": "OwmClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "static private final String APPID_HEADER = \"x-api-key\";", "modifier": "static private final", "type": "String", "declarator": "APPID_HEADER = \"x-api-key\"", "var_name": "APPID_HEADER"}, {"original_string": "private String baseOwmUrl = \"http://api.openweathermap.org/data/2.1/\";", "modifier": "private", "type": "String", "declarator": "baseOwmUrl = \"http://api.openweathermap.org/data/2.1/\"", "var_name": "baseOwmUrl"}, {"original_string": "private String owmAPPID = null;", "modifier": "private", "type": "String", "declarator": "owmAPPID = null", "var_name": "owmAPPID"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}], "methods": [{"identifier": "OwmClient", "parameters": "()", "modifiers": "public", "return": "", "signature": " OwmClient()", "full_signature": "public  OwmClient()", "class_method_signature": "OwmClient.OwmClient()", "testcase": false, "constructor": true}, {"identifier": "OwmClient", "parameters": "(HttpClient httpClient)", "modifiers": "public", "return": "", "signature": " OwmClient(HttpClient httpClient)", "full_signature": "public  OwmClient(HttpClient httpClient)", "class_method_signature": "OwmClient.OwmClient(HttpClient httpClient)", "testcase": false, "constructor": true}, {"identifier": "setAPPID", "parameters": "(String appid)", "modifiers": "public", "return": "void", "signature": "void setAPPID(String appid)", "full_signature": "public void setAPPID(String appid)", "class_method_signature": "OwmClient.setAPPID(String appid)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAroundPoint", "parameters": "(float lat, float lon, int cnt)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherAroundPoint(float lat, float lon, int cnt)", "full_signature": "public WeatherStatusResponse currentWeatherAroundPoint(float lat, float lon, int cnt)", "class_method_signature": "OwmClient.currentWeatherAroundPoint(float lat, float lon, int cnt)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAtCity", "parameters": "(float lat, float lon, int cnt)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherAtCity(float lat, float lon, int cnt)", "full_signature": "public WeatherStatusResponse currentWeatherAtCity(float lat, float lon, int cnt)", "class_method_signature": "OwmClient.currentWeatherAtCity(float lat, float lon, int cnt)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherInBoundingBox", "parameters": "(float northLat, float westLon, float southLat, float eastLon)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherInBoundingBox(float northLat, float westLon, float southLat, float eastLon)", "full_signature": "public WeatherStatusResponse currentWeatherInBoundingBox(float northLat, float westLon, float southLat, float eastLon)", "class_method_signature": "OwmClient.currentWeatherInBoundingBox(float northLat, float westLon, float southLat, float eastLon)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAtCityBoundingBox", "parameters": "(float northLat, float westLon, float southLat, float eastLon)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherAtCityBoundingBox(float northLat, float westLon, float southLat, float eastLon)", "full_signature": "public WeatherStatusResponse currentWeatherAtCityBoundingBox(float northLat, float westLon, float southLat, float eastLon)", "class_method_signature": "OwmClient.currentWeatherAtCityBoundingBox(float northLat, float westLon, float southLat, float eastLon)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherInCircle", "parameters": "(float lat, float lon, float radius)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherInCircle(float lat, float lon, float radius)", "full_signature": "public WeatherStatusResponse currentWeatherInCircle(float lat, float lon, float radius)", "class_method_signature": "OwmClient.currentWeatherInCircle(float lat, float lon, float radius)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAtCityCircle", "parameters": "(float lat, float lon, float radius)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherAtCityCircle(float lat, float lon, float radius)", "full_signature": "public WeatherStatusResponse currentWeatherAtCityCircle(float lat, float lon, float radius)", "class_method_signature": "OwmClient.currentWeatherAtCityCircle(float lat, float lon, float radius)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAtCity", "parameters": "(int cityId)", "modifiers": "public", "return": "StatusWeatherData", "signature": "StatusWeatherData currentWeatherAtCity(int cityId)", "full_signature": "public StatusWeatherData currentWeatherAtCity(int cityId)", "class_method_signature": "OwmClient.currentWeatherAtCity(int cityId)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAtStation", "parameters": "(int stationId)", "modifiers": "public", "return": "StatusWeatherData", "signature": "StatusWeatherData currentWeatherAtStation(int stationId)", "full_signature": "public StatusWeatherData currentWeatherAtStation(int stationId)", "class_method_signature": "OwmClient.currentWeatherAtStation(int stationId)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAtCity", "parameters": "(String cityName)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherAtCity(String cityName)", "full_signature": "public WeatherStatusResponse currentWeatherAtCity(String cityName)", "class_method_signature": "OwmClient.currentWeatherAtCity(String cityName)", "testcase": false, "constructor": false}, {"identifier": "currentWeatherAtCity", "parameters": "(String cityName, String countryCode)", "modifiers": "public", "return": "WeatherStatusResponse", "signature": "WeatherStatusResponse currentWeatherAtCity(String cityName, String countryCode)", "full_signature": "public WeatherStatusResponse currentWeatherAtCity(String cityName, String countryCode)", "class_method_signature": "OwmClient.currentWeatherAtCity(String cityName, String countryCode)", "testcase": false, "constructor": false}, {"identifier": "forecastWeatherAtCity", "parameters": "(int cityId)", "modifiers": "public", "return": "WeatherForecastResponse", "signature": "WeatherForecastResponse forecastWeatherAtCity(int cityId)", "full_signature": "public WeatherForecastResponse forecastWeatherAtCity(int cityId)", "class_method_signature": "OwmClient.forecastWeatherAtCity(int cityId)", "testcase": false, "constructor": false}, {"identifier": "forecastWeatherAtCity", "parameters": "(String cityName)", "modifiers": "public", "return": "WeatherForecastResponse", "signature": "WeatherForecastResponse forecastWeatherAtCity(String cityName)", "full_signature": "public WeatherForecastResponse forecastWeatherAtCity(String cityName)", "class_method_signature": "OwmClient.forecastWeatherAtCity(String cityName)", "testcase": false, "constructor": false}, {"identifier": "historyWeatherAtCity", "parameters": "(int cityId, HistoryType type)", "modifiers": "public", "return": "WeatherHistoryCityResponse", "signature": "WeatherHistoryCityResponse historyWeatherAtCity(int cityId, HistoryType type)", "full_signature": "public WeatherHistoryCityResponse historyWeatherAtCity(int cityId, HistoryType type)", "class_method_signature": "OwmClient.historyWeatherAtCity(int cityId, HistoryType type)", "testcase": false, "constructor": false}, {"identifier": "historyWeatherAtStation", "parameters": "(int stationId, HistoryType type)", "modifiers": "public", "return": "WeatherHistoryStationResponse", "signature": "WeatherHistoryStationResponse historyWeatherAtStation(int stationId, HistoryType type)", "full_signature": "public WeatherHistoryStationResponse historyWeatherAtStation(int stationId, HistoryType type)", "class_method_signature": "OwmClient.historyWeatherAtStation(int stationId, HistoryType type)", "testcase": false, "constructor": false}, {"identifier": "doQuery", "parameters": "(String subUrl)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject doQuery(String subUrl)", "full_signature": "private JSONObject doQuery(String subUrl)", "class_method_signature": "OwmClient.doQuery(String subUrl)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/org/bitpipeline/lib/owm/OwmClient.java"}, "focal_method": {"identifier": "historyWeatherAtStation", "parameters": "(int stationId, HistoryType type)", "modifiers": "public", "return": "WeatherHistoryStationResponse", "body": "public WeatherHistoryStationResponse historyWeatherAtStation (int stationId, HistoryType type) throws JSONException, IOException {\n\t\tif (type == HistoryType.UNKNOWN)\n\t\t\tthrow new IllegalArgumentException(\"Can't do a historic request for unknown type of history.\");\n\t\tString subUrl = String.format (Locale.ROOT, \"history/station/%d?type=%s\", stationId, type);\n\t\tJSONObject response = doQuery (subUrl);\n\t\treturn new WeatherHistoryStationResponse (response);\n\t}", "signature": "WeatherHistoryStationResponse historyWeatherAtStation(int stationId, HistoryType type)", "full_signature": "public WeatherHistoryStationResponse historyWeatherAtStation(int stationId, HistoryType type)", "class_method_signature": "OwmClient.historyWeatherAtStation(int stationId, HistoryType type)", "testcase": false, "constructor": false, "invocations": ["format", "doQuery"]}, "repository": {"repo_id": 8155767, "url": "https://github.com/migtavares/owmClient", "language": "Java", "is_fork": false, "fork_count": 53, "stargazer_count": 77, "size": 106, "license": "licensed"}}