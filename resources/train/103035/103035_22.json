{"test_class": {"identifier": "ConversionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "red5_base/src/test/java/org/red5/server/service/ConversionUtilsTest.java"}, "test_case": {"identifier": "testConvertObjectArrayToStringArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConvertObjectArrayToStringArray() {\n\t\tObject[] source = new Object[3];\n\n\t\tsource[0] = new Integer(21);\n\t\tsource[1] = Boolean.FALSE;\n\t\tsource[2] = \"Woot\";\n\n\t\tClass<? extends String[]> target = (new String[0]).getClass();\n\n\t\tObject result = ConversionUtils.convert(source, target);\n\t\tif (!(result.getClass().isArray() && result.getClass()\n\t\t\t\t.getComponentType().equals(String.class))) {\n\t\t\tfail(\"Should be String[]\");\n\t\t}\n\t\tString[] results = (String[]) result;\n\n\t\tassertEquals(results.length, source.length);\n\t\tassertEquals(results[2], source[2]);\n\n\t}", "signature": "void testConvertObjectArrayToStringArray()", "full_signature": "@Test public void testConvertObjectArrayToStringArray()", "class_method_signature": "ConversionUtilsTest.testConvertObjectArrayToStringArray()", "testcase": true, "constructor": false, "invocations": ["getClass", "convert", "isArray", "getClass", "equals", "getComponentType", "getClass", "fail", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ConversionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ConversionUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConversionUtils.class)", "var_name": "log"}, {"original_string": "private static final Class<?>[] PRIMITIVES = { boolean.class, byte.class,\n\t\t\tchar.class, short.class, int.class, long.class, float.class,\n\t\t\tdouble.class };", "modifier": "private static final", "type": "Class<?>[]", "declarator": "PRIMITIVES = { boolean.class, byte.class,\n\t\t\tchar.class, short.class, int.class, long.class, float.class,\n\t\t\tdouble.class }", "var_name": "PRIMITIVES"}, {"original_string": "private static final Class<?>[] WRAPPERS = { Boolean.class, Byte.class,\n\t\t\tCharacter.class, Short.class, Integer.class, Long.class,\n\t\t\tFloat.class, Double.class };", "modifier": "private static final", "type": "Class<?>[]", "declarator": "WRAPPERS = { Boolean.class, Byte.class,\n\t\t\tCharacter.class, Short.class, Integer.class, Long.class,\n\t\t\tFloat.class, Double.class }", "var_name": "WRAPPERS"}, {"original_string": "private static final Class<?>[][] PARAMETER_CHAINS = {\n\t\t\t{ boolean.class, null }, { byte.class, Short.class },\n\t\t\t{ char.class, Integer.class }, { short.class, Integer.class },\n\t\t\t{ int.class, Long.class }, { long.class, Float.class },\n\t\t\t{ float.class, Double.class }, { double.class, null } };", "modifier": "private static final", "type": "Class<?>[][]", "declarator": "PARAMETER_CHAINS = {\n\t\t\t{ boolean.class, null }, { byte.class, Short.class },\n\t\t\t{ char.class, Integer.class }, { short.class, Integer.class },\n\t\t\t{ int.class, Long.class }, { long.class, Float.class },\n\t\t\t{ float.class, Double.class }, { double.class, null } }", "var_name": "PARAMETER_CHAINS"}, {"original_string": "private static Map<Class<?>, Class<?>> primitiveMap = new HashMap<Class<?>, Class<?>>();", "modifier": "private static", "type": "Map<Class<?>, Class<?>>", "declarator": "primitiveMap = new HashMap<Class<?>, Class<?>>()", "var_name": "primitiveMap"}, {"original_string": "private static Map<Class<?>, Class<?>> wrapperMap = new HashMap<Class<?>, Class<?>>();", "modifier": "private static", "type": "Map<Class<?>, Class<?>>", "declarator": "wrapperMap = new HashMap<Class<?>, Class<?>>()", "var_name": "wrapperMap"}, {"original_string": "private static Map<Class<?>, Class<?>[]> parameterMap = new HashMap<Class<?>, Class<?>[]>();", "modifier": "private static", "type": "Map<Class<?>, Class<?>[]>", "declarator": "parameterMap = new HashMap<Class<?>, Class<?>[]>()", "var_name": "parameterMap"}], "methods": [{"identifier": "convert", "parameters": "(Object source, Class<?> target)", "modifiers": "public static", "return": "Object", "signature": "Object convert(Object source, Class<?> target)", "full_signature": "public static Object convert(Object source, Class<?> target)", "class_method_signature": "ConversionUtils.convert(Object source, Class<?> target)", "testcase": false, "constructor": false}, {"identifier": "convertToArray", "parameters": "(Object source, Class<?> target)", "modifiers": "public static", "return": "Object", "signature": "Object convertToArray(Object source, Class<?> target)", "full_signature": "public static Object convertToArray(Object source, Class<?> target)", "class_method_signature": "ConversionUtils.convertToArray(Object source, Class<?> target)", "testcase": false, "constructor": false}, {"identifier": "convertMapToList", "parameters": "(Map<?, ?> map)", "modifiers": "public static", "return": "List<Object>", "signature": "List<Object> convertMapToList(Map<?, ?> map)", "full_signature": "public static List<Object> convertMapToList(Map<?, ?> map)", "class_method_signature": "ConversionUtils.convertMapToList(Map<?, ?> map)", "testcase": false, "constructor": false}, {"identifier": "convertToWrappedPrimitive", "parameters": "(Object source, Class<?> wrapper)", "modifiers": "public static", "return": "Object", "signature": "Object convertToWrappedPrimitive(Object source, Class<?> wrapper)", "full_signature": "public static Object convertToWrappedPrimitive(Object source, Class<?> wrapper)", "class_method_signature": "ConversionUtils.convertToWrappedPrimitive(Object source, Class<?> wrapper)", "testcase": false, "constructor": false}, {"identifier": "convertStringToWrapper", "parameters": "(String str, Class<?> wrapper)", "modifiers": "public static", "return": "Object", "signature": "Object convertStringToWrapper(String str, Class<?> wrapper)", "full_signature": "public static Object convertStringToWrapper(String str, Class<?> wrapper)", "class_method_signature": "ConversionUtils.convertStringToWrapper(String str, Class<?> wrapper)", "testcase": false, "constructor": false}, {"identifier": "convertNumberToWrapper", "parameters": "(Number num, Class<?> wrapper)", "modifiers": "public static", "return": "Object", "signature": "Object convertNumberToWrapper(Number num, Class<?> wrapper)", "full_signature": "public static Object convertNumberToWrapper(Number num, Class<?> wrapper)", "class_method_signature": "ConversionUtils.convertNumberToWrapper(Number num, Class<?> wrapper)", "testcase": false, "constructor": false}, {"identifier": "findMethodsByNameAndNumParams", "parameters": "(Object object,\n\t\t\tString method, int numParam)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findMethodsByNameAndNumParams(Object object,\n\t\t\tString method, int numParam)", "full_signature": "public static List<Method> findMethodsByNameAndNumParams(Object object,\n\t\t\tString method, int numParam)", "class_method_signature": "ConversionUtils.findMethodsByNameAndNumParams(Object object,\n\t\t\tString method, int numParam)", "testcase": false, "constructor": false}, {"identifier": "convertParams", "parameters": "(Object[] source, Class<?>[] target)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] convertParams(Object[] source, Class<?>[] target)", "full_signature": "public static Object[] convertParams(Object[] source, Class<?>[] target)", "class_method_signature": "ConversionUtils.convertParams(Object[] source, Class<?>[] target)", "testcase": false, "constructor": false}, {"identifier": "convertParams", "parameters": "(Object[] source)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] convertParams(Object[] source)", "full_signature": "public static Class<?>[] convertParams(Object[] source)", "class_method_signature": "ConversionUtils.convertParams(Object[] source)", "testcase": false, "constructor": false}, {"identifier": "convertArrayToList", "parameters": "(Object[] source)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> convertArrayToList(Object[] source)", "full_signature": "public static List<?> convertArrayToList(Object[] source)", "class_method_signature": "ConversionUtils.convertArrayToList(Object[] source)", "testcase": false, "constructor": false}, {"identifier": "convertMapToBean", "parameters": "(Map<?, ?> source, Class<?> target)", "modifiers": "public static", "return": "Object", "signature": "Object convertMapToBean(Map<?, ?> source, Class<?> target)", "full_signature": "public static Object convertMapToBean(Map<?, ?> source, Class<?> target)", "class_method_signature": "ConversionUtils.convertMapToBean(Map<?, ?> source, Class<?> target)", "testcase": false, "constructor": false}, {"identifier": "convertBeanToMap", "parameters": "(Object source)", "modifiers": "public static", "return": "Map<?, ?>", "signature": "Map<?, ?> convertBeanToMap(Object source)", "full_signature": "public static Map<?, ?> convertBeanToMap(Object source)", "class_method_signature": "ConversionUtils.convertBeanToMap(Object source)", "testcase": false, "constructor": false}, {"identifier": "convertArrayToSet", "parameters": "(Object[] source)", "modifiers": "public static", "return": "Set<?>", "signature": "Set<?> convertArrayToSet(Object[] source)", "full_signature": "public static Set<?> convertArrayToSet(Object[] source)", "class_method_signature": "ConversionUtils.convertArrayToSet(Object[] source)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String className)", "modifiers": "protected static", "return": "Object", "signature": "Object newInstance(String className)", "full_signature": "protected static Object newInstance(String className)", "class_method_signature": "ConversionUtils.newInstance(String className)", "testcase": false, "constructor": false}], "file": "red5_base/src/main/java/org/red5/server/service/ConversionUtils.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object source, Class<?> target)", "modifiers": "public static", "return": "Object", "body": "public static Object convert(Object source, Class<?> target)\n\t\t\tthrows ConversionException {\n\t\tif (target == null) {\n\t\t\tthrow new ConversionException(\"Unable to perform conversion, target was null\");\n\t\t}\n\t\tif (source == null) {\n\t\t\tif (target.isPrimitive()) {\n\t\t\t\tthrow new ConversionException(String.format(\"Unable to convert null to primitive value of %s\", target));\n\t\t\t}\n\t\t\treturn source;\n\t\t} else if ((source instanceof Float && ((Float) source).isNaN()) || \n\t\t\t\t   (source instanceof Double && ((Double) source).isNaN())) {\n\t\t\t// Don't convert NaN values\n\t\t\treturn source;\n\t\t}\n\t\t\n\t\tif (IConnection.class.isAssignableFrom(source.getClass())\n\t\t\t\t&& !target.equals(IConnection.class)) {\n\t\t\tthrow new ConversionException(\"IConnection must match exactly\");\n\t\t}\n\t\tif (target.isInstance(source)) {\n\t\t\treturn source;\n\t\t}\n\t\tif (target.isAssignableFrom(source.getClass())) {\n\t\t\treturn source;\n\t\t}\n\t\tif (target.isArray()) {\n\t\t\treturn convertToArray(source, target);\n\t\t}\n\t\tif (target.equals(String.class)) {\n\t\t\treturn source.toString();\n\t\t}\n\t\tif (target.isPrimitive()) {\n\t\t\treturn convertToWrappedPrimitive(source, primitiveMap.get(target));\n\t\t}\n\t\tif (wrapperMap.containsKey(target)) {\n\t\t\treturn convertToWrappedPrimitive(source, target);\n\t\t}\n\t\tif (target.equals(Map.class)) {\n\t\t\treturn convertBeanToMap(source);\n\t\t}\n\t\tif (target.equals(List.class) || target.equals(Collection.class)) {\n\t\t\tif (source.getClass().equals(LinkedHashMap.class)) {\n\t\t\t\treturn convertMapToList((LinkedHashMap<?, ?>) source);\n\t\t\t} else if (source.getClass().isArray()) {\n\t\t\t\treturn convertArrayToList((Object[]) source);\n\t\t\t}\n\t\t}\n\t\tif (target.equals(Set.class) && source.getClass().isArray()) {\n\t\t\treturn convertArrayToSet((Object[]) source);\n\t\t}\n\t\tthrow new ConversionException(String.format(\"Unable to preform conversion from %s to %s\", source, target));\n\t}", "signature": "Object convert(Object source, Class<?> target)", "full_signature": "public static Object convert(Object source, Class<?> target)", "class_method_signature": "ConversionUtils.convert(Object source, Class<?> target)", "testcase": false, "constructor": false, "invocations": ["isPrimitive", "format", "isNaN", "isNaN", "isAssignableFrom", "getClass", "equals", "isInstance", "isAssignableFrom", "getClass", "isArray", "convertToArray", "equals", "toString", "isPrimitive", "convertToWrappedPrimitive", "get", "containsKey", "convertToWrappedPrimitive", "equals", "convertBeanToMap", "equals", "equals", "equals", "getClass", "convertMapToList", "isArray", "getClass", "convertArrayToList", "equals", "isArray", "getClass", "convertArrayToSet", "format"]}, "repository": {"repo_id": 103035, "url": "https://github.com/mguymon/red5-mavenized", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 11090, "license": "licensed"}}