{"test_class": {"identifier": "PlaylistSubscriberStreamTest", "superclass": "extends AbstractDependencyInjectionSpringContextTests", "interfaces": "", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(PlaylistSubscriberStreamTest.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PlaylistSubscriberStreamTest.class)", "var_name": "log"}, {"original_string": "private static PlaylistSubscriberStream pss;", "modifier": "private static", "type": "PlaylistSubscriberStream", "declarator": "pss", "var_name": "pss"}], "file": "red5_base/src/test/java/org/red5/server/stream/PlaylistSubscriberStreamTest.java"}, "test_case": {"identifier": "testNextItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNextItem() {\n\t\tlog.error(\"Not yet implemented -- get on that\");\n\t}", "signature": "void testNextItem()", "full_signature": "@Test public void testNextItem()", "class_method_signature": "PlaylistSubscriberStreamTest.testNextItem()", "testcase": true, "constructor": false, "invocations": ["error"]}, "focal_class": {"identifier": "PlaylistSubscriberStream", "superclass": "extends AbstractClientStream", "interfaces": "implements\n\t\tIPlaylistSubscriberStream, IPlaylistSubscriberStreamStatistics", "fields": [{"original_string": "private static final Logger log = Red5LoggerFactory.getLogger(PlaylistSubscriberStream.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Red5LoggerFactory.getLogger(PlaylistSubscriberStream.class)", "var_name": "log"}, {"original_string": "private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "readWriteLock = new ReentrantReadWriteLock()", "var_name": "readWriteLock"}, {"original_string": "private final Lock read = readWriteLock.readLock();", "modifier": "private final", "type": "Lock", "declarator": "read = readWriteLock.readLock()", "var_name": "read"}, {"original_string": "private final Lock write = readWriteLock.writeLock();", "modifier": "private final", "type": "Lock", "declarator": "write = readWriteLock.writeLock()", "var_name": "write"}, {"original_string": "private IPlaylistController controller;", "modifier": "private", "type": "IPlaylistController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private IPlaylistController defaultController;", "modifier": "private", "type": "IPlaylistController", "declarator": "defaultController", "var_name": "defaultController"}, {"original_string": "private final List<IPlayItem> items;", "modifier": "private final", "type": "List<IPlayItem>", "declarator": "items", "var_name": "items"}, {"original_string": "private int currentItemIndex = 0;", "modifier": "private", "type": "int", "declarator": "currentItemIndex = 0", "var_name": "currentItemIndex"}, {"original_string": "private PlayEngine engine;", "modifier": "private", "type": "PlayEngine", "declarator": "engine", "var_name": "engine"}, {"original_string": "private IBWControlService bwController;", "modifier": "private", "type": "IBWControlService", "declarator": "bwController", "var_name": "bwController"}, {"original_string": "private IBWControlContext bwContext;", "modifier": "private", "type": "IBWControlContext", "declarator": "bwContext", "var_name": "bwContext"}, {"original_string": "private boolean rewind;", "modifier": "private", "type": "boolean", "declarator": "rewind", "var_name": "rewind"}, {"original_string": "private boolean random;", "modifier": "private", "type": "boolean", "declarator": "random", "var_name": "random"}, {"original_string": "private boolean repeat;", "modifier": "private", "type": "boolean", "declarator": "repeat", "var_name": "repeat"}, {"original_string": "private static ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(16);", "modifier": "private static", "type": "ScheduledThreadPoolExecutor", "declarator": "executor = new ScheduledThreadPoolExecutor(16)", "var_name": "executor"}, {"original_string": "private int bufferCheckInterval = 0;", "modifier": "private", "type": "int", "declarator": "bufferCheckInterval = 0", "var_name": "bufferCheckInterval"}, {"original_string": "private int underrunTrigger = 10;", "modifier": "private", "type": "int", "declarator": "underrunTrigger = 10", "var_name": "underrunTrigger"}, {"original_string": "private long creationTime = System.currentTimeMillis();", "modifier": "private", "type": "long", "declarator": "creationTime = System.currentTimeMillis()", "var_name": "creationTime"}, {"original_string": "private long bytesSent = 0;", "modifier": "private", "type": "long", "declarator": "bytesSent = 0", "var_name": "bytesSent"}], "methods": [{"identifier": "PlaylistSubscriberStream", "parameters": "()", "modifiers": "public", "return": "", "signature": " PlaylistSubscriberStream()", "full_signature": "public  PlaylistSubscriberStream()", "class_method_signature": "PlaylistSubscriberStream.PlaylistSubscriberStream()", "testcase": false, "constructor": true}, {"identifier": "createEngine", "parameters": "(ISchedulingService schedulingService, IConsumerService consumerService, IProviderService providerService)", "modifiers": "", "return": "PlayEngine", "signature": "PlayEngine createEngine(ISchedulingService schedulingService, IConsumerService consumerService, IProviderService providerService)", "full_signature": " PlayEngine createEngine(ISchedulingService schedulingService, IConsumerService consumerService, IProviderService providerService)", "class_method_signature": "PlaylistSubscriberStream.createEngine(ISchedulingService schedulingService, IConsumerService consumerService, IProviderService providerService)", "testcase": false, "constructor": false}, {"identifier": "setExecutor", "parameters": "(ScheduledThreadPoolExecutor executor)", "modifiers": "public", "return": "void", "signature": "void setExecutor(ScheduledThreadPoolExecutor executor)", "full_signature": "public void setExecutor(ScheduledThreadPoolExecutor executor)", "class_method_signature": "PlaylistSubscriberStream.setExecutor(ScheduledThreadPoolExecutor executor)", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "()", "modifiers": "public", "return": "ScheduledThreadPoolExecutor", "signature": "ScheduledThreadPoolExecutor getExecutor()", "full_signature": "public ScheduledThreadPoolExecutor getExecutor()", "class_method_signature": "PlaylistSubscriberStream.getExecutor()", "testcase": false, "constructor": false}, {"identifier": "setBufferCheckInterval", "parameters": "(int bufferCheckInterval)", "modifiers": "public", "return": "void", "signature": "void setBufferCheckInterval(int bufferCheckInterval)", "full_signature": "public void setBufferCheckInterval(int bufferCheckInterval)", "class_method_signature": "PlaylistSubscriberStream.setBufferCheckInterval(int bufferCheckInterval)", "testcase": false, "constructor": false}, {"identifier": "setUnderrunTrigger", "parameters": "(int underrunTrigger)", "modifiers": "public", "return": "void", "signature": "void setUnderrunTrigger(int underrunTrigger)", "full_signature": "public void setUnderrunTrigger(int underrunTrigger)", "class_method_signature": "PlaylistSubscriberStream.setUnderrunTrigger(int underrunTrigger)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "PlaylistSubscriberStream.start()", "testcase": false, "constructor": false}, {"identifier": "play", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void play()", "full_signature": "public void play()", "class_method_signature": "PlaylistSubscriberStream.play()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "(int position)", "modifiers": "public", "return": "void", "signature": "void pause(int position)", "full_signature": "public void pause(int position)", "class_method_signature": "PlaylistSubscriberStream.pause(int position)", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "(int position)", "modifiers": "public", "return": "void", "signature": "void resume(int position)", "full_signature": "public void resume(int position)", "class_method_signature": "PlaylistSubscriberStream.resume(int position)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "PlaylistSubscriberStream.stop()", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(int position)", "modifiers": "public", "return": "void", "signature": "void seek(int position)", "full_signature": "public void seek(int position)", "class_method_signature": "PlaylistSubscriberStream.seek(int position)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "PlaylistSubscriberStream.close()", "testcase": false, "constructor": false}, {"identifier": "isPaused", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPaused()", "full_signature": "public boolean isPaused()", "class_method_signature": "PlaylistSubscriberStream.isPaused()", "testcase": false, "constructor": false}, {"identifier": "addItem", "parameters": "(IPlayItem item)", "modifiers": "public", "return": "void", "signature": "void addItem(IPlayItem item)", "full_signature": "public void addItem(IPlayItem item)", "class_method_signature": "PlaylistSubscriberStream.addItem(IPlayItem item)", "testcase": false, "constructor": false}, {"identifier": "addItem", "parameters": "(IPlayItem item, int index)", "modifiers": "public", "return": "void", "signature": "void addItem(IPlayItem item, int index)", "full_signature": "public void addItem(IPlayItem item, int index)", "class_method_signature": "PlaylistSubscriberStream.addItem(IPlayItem item, int index)", "testcase": false, "constructor": false}, {"identifier": "removeItem", "parameters": "(int index)", "modifiers": "public", "return": "void", "signature": "void removeItem(int index)", "full_signature": "public void removeItem(int index)", "class_method_signature": "PlaylistSubscriberStream.removeItem(int index)", "testcase": false, "constructor": false}, {"identifier": "removeAllItems", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeAllItems()", "full_signature": "public void removeAllItems()", "class_method_signature": "PlaylistSubscriberStream.removeAllItems()", "testcase": false, "constructor": false}, {"identifier": "previousItem", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void previousItem()", "full_signature": "public void previousItem()", "class_method_signature": "PlaylistSubscriberStream.previousItem()", "testcase": false, "constructor": false}, {"identifier": "hasMoreItems", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasMoreItems()", "full_signature": "public boolean hasMoreItems()", "class_method_signature": "PlaylistSubscriberStream.hasMoreItems()", "testcase": false, "constructor": false}, {"identifier": "nextItem", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nextItem()", "full_signature": "public void nextItem()", "class_method_signature": "PlaylistSubscriberStream.nextItem()", "testcase": false, "constructor": false}, {"identifier": "setItem", "parameters": "(int index)", "modifiers": "public", "return": "void", "signature": "void setItem(int index)", "full_signature": "public void setItem(int index)", "class_method_signature": "PlaylistSubscriberStream.setItem(int index)", "testcase": false, "constructor": false}, {"identifier": "isRandom", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRandom()", "full_signature": "public boolean isRandom()", "class_method_signature": "PlaylistSubscriberStream.isRandom()", "testcase": false, "constructor": false}, {"identifier": "setRandom", "parameters": "(boolean random)", "modifiers": "public", "return": "void", "signature": "void setRandom(boolean random)", "full_signature": "public void setRandom(boolean random)", "class_method_signature": "PlaylistSubscriberStream.setRandom(boolean random)", "testcase": false, "constructor": false}, {"identifier": "isRewind", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRewind()", "full_signature": "public boolean isRewind()", "class_method_signature": "PlaylistSubscriberStream.isRewind()", "testcase": false, "constructor": false}, {"identifier": "setRewind", "parameters": "(boolean rewind)", "modifiers": "public", "return": "void", "signature": "void setRewind(boolean rewind)", "full_signature": "public void setRewind(boolean rewind)", "class_method_signature": "PlaylistSubscriberStream.setRewind(boolean rewind)", "testcase": false, "constructor": false}, {"identifier": "isRepeat", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRepeat()", "full_signature": "public boolean isRepeat()", "class_method_signature": "PlaylistSubscriberStream.isRepeat()", "testcase": false, "constructor": false}, {"identifier": "setRepeat", "parameters": "(boolean repeat)", "modifiers": "public", "return": "void", "signature": "void setRepeat(boolean repeat)", "full_signature": "public void setRepeat(boolean repeat)", "class_method_signature": "PlaylistSubscriberStream.setRepeat(boolean repeat)", "testcase": false, "constructor": false}, {"identifier": "seekToCurrentPlayback", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void seekToCurrentPlayback()", "full_signature": "private void seekToCurrentPlayback()", "class_method_signature": "PlaylistSubscriberStream.seekToCurrentPlayback()", "testcase": false, "constructor": false}, {"identifier": "receiveVideo", "parameters": "(boolean receive)", "modifiers": "public", "return": "void", "signature": "void receiveVideo(boolean receive)", "full_signature": "public void receiveVideo(boolean receive)", "class_method_signature": "PlaylistSubscriberStream.receiveVideo(boolean receive)", "testcase": false, "constructor": false}, {"identifier": "receiveAudio", "parameters": "(boolean receive)", "modifiers": "public", "return": "void", "signature": "void receiveAudio(boolean receive)", "full_signature": "public void receiveAudio(boolean receive)", "class_method_signature": "PlaylistSubscriberStream.receiveAudio(boolean receive)", "testcase": false, "constructor": false}, {"identifier": "setPlaylistController", "parameters": "(IPlaylistController controller)", "modifiers": "public", "return": "void", "signature": "void setPlaylistController(IPlaylistController controller)", "full_signature": "public void setPlaylistController(IPlaylistController controller)", "class_method_signature": "PlaylistSubscriberStream.setPlaylistController(IPlaylistController controller)", "testcase": false, "constructor": false}, {"identifier": "getItemSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getItemSize()", "full_signature": "public int getItemSize()", "class_method_signature": "PlaylistSubscriberStream.getItemSize()", "testcase": false, "constructor": false}, {"identifier": "getCurrentItemIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentItemIndex()", "full_signature": "public int getCurrentItemIndex()", "class_method_signature": "PlaylistSubscriberStream.getCurrentItemIndex()", "testcase": false, "constructor": false}, {"identifier": "getCurrentItem", "parameters": "()", "modifiers": "public", "return": "IPlayItem", "signature": "IPlayItem getCurrentItem()", "full_signature": "public IPlayItem getCurrentItem()", "class_method_signature": "PlaylistSubscriberStream.getCurrentItem()", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "(int index)", "modifiers": "public", "return": "IPlayItem", "signature": "IPlayItem getItem(int index)", "full_signature": "public IPlayItem getItem(int index)", "class_method_signature": "PlaylistSubscriberStream.getItem(int index)", "testcase": false, "constructor": false}, {"identifier": "setBandwidthController", "parameters": "(IBWControlService bwController)", "modifiers": "public", "return": "void", "signature": "void setBandwidthController(IBWControlService bwController)", "full_signature": "public void setBandwidthController(IBWControlService bwController)", "class_method_signature": "PlaylistSubscriberStream.setBandwidthController(IBWControlService bwController)", "testcase": false, "constructor": false}, {"identifier": "setBandwidthConfigure", "parameters": "(IBandwidthConfigure config)", "modifiers": "@Override public", "return": "void", "signature": "void setBandwidthConfigure(IBandwidthConfigure config)", "full_signature": "@Override public void setBandwidthConfigure(IBandwidthConfigure config)", "class_method_signature": "PlaylistSubscriberStream.setBandwidthConfigure(IBandwidthConfigure config)", "testcase": false, "constructor": false}, {"identifier": "written", "parameters": "(Object message)", "modifiers": "public", "return": "void", "signature": "void written(Object message)", "full_signature": "public void written(Object message)", "class_method_signature": "PlaylistSubscriberStream.written(Object message)", "testcase": false, "constructor": false}, {"identifier": "moveToNext", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void moveToNext()", "full_signature": "private void moveToNext()", "class_method_signature": "PlaylistSubscriberStream.moveToNext()", "testcase": false, "constructor": false}, {"identifier": "moveToPrevious", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void moveToPrevious()", "full_signature": "private void moveToPrevious()", "class_method_signature": "PlaylistSubscriberStream.moveToPrevious()", "testcase": false, "constructor": false}, {"identifier": "onItemEnd", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onItemEnd()", "full_signature": "protected void onItemEnd()", "class_method_signature": "PlaylistSubscriberStream.onItemEnd()", "testcase": false, "constructor": false}, {"identifier": "notifySubscriberStart", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void notifySubscriberStart()", "full_signature": "protected void notifySubscriberStart()", "class_method_signature": "PlaylistSubscriberStream.notifySubscriberStart()", "testcase": false, "constructor": false}, {"identifier": "notifySubscriberClose", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void notifySubscriberClose()", "full_signature": "protected void notifySubscriberClose()", "class_method_signature": "PlaylistSubscriberStream.notifySubscriberClose()", "testcase": false, "constructor": false}, {"identifier": "notifyItemPlay", "parameters": "(IPlayItem item, boolean isLive)", "modifiers": "protected", "return": "void", "signature": "void notifyItemPlay(IPlayItem item, boolean isLive)", "full_signature": "protected void notifyItemPlay(IPlayItem item, boolean isLive)", "class_method_signature": "PlaylistSubscriberStream.notifyItemPlay(IPlayItem item, boolean isLive)", "testcase": false, "constructor": false}, {"identifier": "notifyItemStop", "parameters": "(IPlayItem item)", "modifiers": "protected", "return": "void", "signature": "void notifyItemStop(IPlayItem item)", "full_signature": "protected void notifyItemStop(IPlayItem item)", "class_method_signature": "PlaylistSubscriberStream.notifyItemStop(IPlayItem item)", "testcase": false, "constructor": false}, {"identifier": "notifyItemPause", "parameters": "(IPlayItem item, int position)", "modifiers": "protected", "return": "void", "signature": "void notifyItemPause(IPlayItem item, int position)", "full_signature": "protected void notifyItemPause(IPlayItem item, int position)", "class_method_signature": "PlaylistSubscriberStream.notifyItemPause(IPlayItem item, int position)", "testcase": false, "constructor": false}, {"identifier": "notifyItemResume", "parameters": "(IPlayItem item, int position)", "modifiers": "protected", "return": "void", "signature": "void notifyItemResume(IPlayItem item, int position)", "full_signature": "protected void notifyItemResume(IPlayItem item, int position)", "class_method_signature": "PlaylistSubscriberStream.notifyItemResume(IPlayItem item, int position)", "testcase": false, "constructor": false}, {"identifier": "notifyItemSeek", "parameters": "(IPlayItem item, int position)", "modifiers": "protected", "return": "void", "signature": "void notifyItemSeek(IPlayItem item, int position)", "full_signature": "protected void notifyItemSeek(IPlayItem item, int position)", "class_method_signature": "PlaylistSubscriberStream.notifyItemSeek(IPlayItem item, int position)", "testcase": false, "constructor": false}, {"identifier": "getStatistics", "parameters": "()", "modifiers": "public", "return": "IPlaylistSubscriberStreamStatistics", "signature": "IPlaylistSubscriberStreamStatistics getStatistics()", "full_signature": "public IPlaylistSubscriberStreamStatistics getStatistics()", "class_method_signature": "PlaylistSubscriberStream.getStatistics()", "testcase": false, "constructor": false}, {"identifier": "getCreationTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCreationTime()", "full_signature": "public long getCreationTime()", "class_method_signature": "PlaylistSubscriberStream.getCreationTime()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTimestamp", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentTimestamp()", "full_signature": "public int getCurrentTimestamp()", "class_method_signature": "PlaylistSubscriberStream.getCurrentTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getBytesSent", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getBytesSent()", "full_signature": "public long getBytesSent()", "class_method_signature": "PlaylistSubscriberStream.getBytesSent()", "testcase": false, "constructor": false}, {"identifier": "getEstimatedBufferFill", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getEstimatedBufferFill()", "full_signature": "public double getEstimatedBufferFill()", "class_method_signature": "PlaylistSubscriberStream.getEstimatedBufferFill()", "testcase": false, "constructor": false}], "file": "red5_base/src/main/java/org/red5/server/stream/PlaylistSubscriberStream.java"}, "focal_method": {"identifier": "nextItem", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void nextItem() {\n\t\tmoveToNext();\n\t\tif (currentItemIndex == -1) {\n\t\t\treturn;\n\t\t}\n\t\tIPlayItem item = null;\n\t\tint count = items.size();\n\t\twhile (count-- > 0) {\n\t\t\tread.lock();\n\t\t\ttry {\n\t\t\t\titem = items.get(currentItemIndex);\n\t\t\t\tengine.play(item, false);\n\t\t\t\tbreak;\n\t\t\t} catch (IOException err) {\n\t\t\t\tlog.error(\"Error while starting to play item, moving to next\",\n\t\t\t\t\t\terr);\n\t\t\t\t// go for next item\n\t\t\t\tmoveToNext();\n\t\t\t\tif (currentItemIndex == -1) {\n\t\t\t\t\t// we reaches the end.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch (StreamNotFoundException e) {\n\t\t\t\t// go for next item\n\t\t\t\tmoveToNext();\n\t\t\t\tif (currentItemIndex == -1) {\n\t\t\t\t\t// we reaches the end.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t// an stream is already playing\n\t\t\t\tbreak;\n\t\t\t} finally {\n\t\t\t\tread.unlock();\n\t\t\t}\n\t\t}\n\t}", "signature": "void nextItem()", "full_signature": "public void nextItem()", "class_method_signature": "PlaylistSubscriberStream.nextItem()", "testcase": false, "constructor": false, "invocations": ["moveToNext", "size", "lock", "get", "play", "error", "moveToNext", "moveToNext", "unlock"]}, "repository": {"repo_id": 103035, "url": "https://github.com/mguymon/red5-mavenized", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 11090, "license": "licensed"}}