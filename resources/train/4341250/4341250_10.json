{"test_class": {"identifier": "WordRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "examples/dictionary/client/src/test/java/com/bazaarvoice/ostrich/examples/dictionary/client/WordRangeTest.java"}, "test_case": {"identifier": "testAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAll() {\n        WordRange range = new WordRange(\"-\");\n\n        Assert.assertTrue(range.apply(\"\"));\n        Assert.assertTrue(range.apply(\"0\"));\n        Assert.assertTrue(range.apply(\"a\"));\n        Assert.assertTrue(range.apply(\"\\uffff\"));\n    }", "signature": "void testAll()", "full_signature": "@Test public void testAll()", "class_method_signature": "WordRangeTest.testAll()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply", "assertTrue", "apply"]}, "focal_class": {"identifier": "WordRange", "superclass": "", "interfaces": "implements Predicate<String>", "fields": [{"original_string": "private static final Pattern RANGE_PATTERN = Pattern.compile(\"(\\\\w*)-(\\\\w*)\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "RANGE_PATTERN = Pattern.compile(\"(\\\\w*)-(\\\\w*)\", Pattern.CASE_INSENSITIVE)", "var_name": "RANGE_PATTERN"}, {"original_string": "private final String rangeString;", "modifier": "private final", "type": "String", "declarator": "rangeString", "var_name": "rangeString"}, {"original_string": "private final NavigableMap<String, String> ranges;", "modifier": "private final", "type": "NavigableMap<String, String>", "declarator": "ranges", "var_name": "ranges"}], "methods": [{"identifier": "WordRange", "parameters": "(String rangeString)", "modifiers": "public", "return": "", "signature": " WordRange(String rangeString)", "full_signature": "public  WordRange(String rangeString)", "class_method_signature": "WordRange.WordRange(String rangeString)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(String string)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(String string)", "full_signature": "@Override public boolean apply(String string)", "class_method_signature": "WordRange.apply(String string)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override @JsonValue public", "return": "String", "signature": "String toString()", "full_signature": "@Override @JsonValue public String toString()", "class_method_signature": "WordRange.toString()", "testcase": false, "constructor": false}], "file": "examples/dictionary/client/src/main/java/com/bazaarvoice/ostrich/examples/dictionary/client/WordRange.java"}, "focal_method": {"identifier": "apply", "parameters": "(String string)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean apply(String string) {\n        String lower = string.toLowerCase();\n        Map.Entry<String, String> entry = ranges.floorEntry(lower);\n        return entry != null && lower.compareTo(entry.getValue()) <= 0;\n    }", "signature": "boolean apply(String string)", "full_signature": "@Override public boolean apply(String string)", "class_method_signature": "WordRange.apply(String string)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "floorEntry", "compareTo", "getValue"]}, "repository": {"repo_id": 4341250, "url": "https://github.com/bazaarvoice/ostrich", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 26, "size": 1577, "license": "licensed"}}