{"test_class": {"identifier": "AsyncServicePoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final RetryPolicy NEVER_RETRY = mock(RetryPolicy.class);", "modifier": "private static final", "type": "RetryPolicy", "declarator": "NEVER_RETRY = mock(RetryPolicy.class)", "var_name": "NEVER_RETRY"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private final ServicePool<Service> _mockPool = mock(ServicePool.class);", "modifier": "@SuppressWarnings(\"unchecked\")\n    private final", "type": "ServicePool<Service>", "declarator": "_mockPool = mock(ServicePool.class)", "var_name": "_mockPool"}, {"original_string": "private final Ticker _mockTicker = mock(Ticker.class);", "modifier": "private final", "type": "Ticker", "declarator": "_mockTicker = mock(Ticker.class)", "var_name": "_mockTicker"}, {"original_string": "private final ExecutorService _mockExecutor = mock(ExecutorService.class);", "modifier": "private final", "type": "ExecutorService", "declarator": "_mockExecutor = mock(ExecutorService.class)", "var_name": "_mockExecutor"}, {"original_string": "private final Collection<AsyncServicePool<Service>> _asyncServicePools = Lists.newArrayList();", "modifier": "private final", "type": "Collection<AsyncServicePool<Service>>", "declarator": "_asyncServicePools = Lists.newArrayList()", "var_name": "_asyncServicePools"}, {"original_string": "private final MetricRegistry _metricRegistry = mock(MetricRegistry.class, RETURNS_MOCKS);", "modifier": "private final", "type": "MetricRegistry", "declarator": "_metricRegistry = mock(MetricRegistry.class, RETURNS_MOCKS)", "var_name": "_metricRegistry"}], "file": "core/src/test/java/com/bazaarvoice/ostrich/pool/AsyncServicePoolTest.java"}, "test_case": {"identifier": "testSubmitsCallableToExecutor", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSubmitsCallableToExecutor() {\n        AsyncServicePool<Service> pool = newAsyncPool();\n        pool.execute(NEVER_RETRY, mock(ServiceCallback.class));\n\n        verify(_mockExecutor).submit(any(Callable.class));\n    }", "signature": "void testSubmitsCallableToExecutor()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testSubmitsCallableToExecutor()", "class_method_signature": "AsyncServicePoolTest.testSubmitsCallableToExecutor()", "testcase": true, "constructor": false, "invocations": ["newAsyncPool", "execute", "mock", "submit", "verify", "any"]}, "focal_class": {"identifier": "AsyncServicePool", "superclass": "", "interfaces": "implements com.bazaarvoice.ostrich.AsyncServicePool<S>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AsyncServicePool.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AsyncServicePool.class)", "var_name": "LOG"}, {"original_string": "private static final ServiceEndPointPredicate ALL_END_POINTS = new ServiceEndPointPredicate() {\n        @Override\n        public boolean apply(ServiceEndPoint endPoint) {\n            return true;\n        }\n    };", "modifier": "private static final", "type": "ServiceEndPointPredicate", "declarator": "ALL_END_POINTS = new ServiceEndPointPredicate() {\n        @Override\n        public boolean apply(ServiceEndPoint endPoint) {\n            return true;\n        }\n    }", "var_name": "ALL_END_POINTS"}, {"original_string": "private final Ticker _ticker;", "modifier": "private final", "type": "Ticker", "declarator": "_ticker", "var_name": "_ticker"}, {"original_string": "private final ServicePool<S> _pool;", "modifier": "private final", "type": "ServicePool<S>", "declarator": "_pool", "var_name": "_pool"}, {"original_string": "private final boolean _shutdownPoolOnClose;", "modifier": "private final", "type": "boolean", "declarator": "_shutdownPoolOnClose", "var_name": "_shutdownPoolOnClose"}, {"original_string": "private final ExecutorService _executor;", "modifier": "private final", "type": "ExecutorService", "declarator": "_executor", "var_name": "_executor"}, {"original_string": "private final boolean _shutdownExecutorOnClose;", "modifier": "private final", "type": "boolean", "declarator": "_shutdownExecutorOnClose", "var_name": "_shutdownExecutorOnClose"}, {"original_string": "private final Metrics.InstanceMetrics _metrics;", "modifier": "private final", "type": "Metrics.InstanceMetrics", "declarator": "_metrics", "var_name": "_metrics"}, {"original_string": "private final Timer _executionTime;", "modifier": "private final", "type": "Timer", "declarator": "_executionTime", "var_name": "_executionTime"}, {"original_string": "private final Meter _numExecuteSuccesses;", "modifier": "private final", "type": "Meter", "declarator": "_numExecuteSuccesses", "var_name": "_numExecuteSuccesses"}, {"original_string": "private final Meter _numExecuteFailures;", "modifier": "private final", "type": "Meter", "declarator": "_numExecuteFailures", "var_name": "_numExecuteFailures"}, {"original_string": "private final Histogram _executeBatchSize;", "modifier": "private final", "type": "Histogram", "declarator": "_executeBatchSize", "var_name": "_executeBatchSize"}], "methods": [{"identifier": "AsyncServicePool", "parameters": "(Ticker ticker, ServicePool<S> pool, boolean shutdownPoolOnClose,\n                            ExecutorService executor, boolean shutdownExecutorOnClose, MetricRegistry metrics)", "modifiers": "", "return": "", "signature": " AsyncServicePool(Ticker ticker, ServicePool<S> pool, boolean shutdownPoolOnClose,\n                            ExecutorService executor, boolean shutdownExecutorOnClose, MetricRegistry metrics)", "full_signature": "  AsyncServicePool(Ticker ticker, ServicePool<S> pool, boolean shutdownPoolOnClose,\n                            ExecutorService executor, boolean shutdownExecutorOnClose, MetricRegistry metrics)", "class_method_signature": "AsyncServicePool.AsyncServicePool(Ticker ticker, ServicePool<S> pool, boolean shutdownPoolOnClose,\n                            ExecutorService executor, boolean shutdownExecutorOnClose, MetricRegistry metrics)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AsyncServicePool.close()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "modifiers": "@Override public", "return": "Future<R>", "signature": "Future<R> execute(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "full_signature": "@Override public Future<R> execute(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "class_method_signature": "AsyncServicePool.execute(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final PartitionContext partitionContext, final RetryPolicy retryPolicy,\n                                 final ServiceCallback<S, R> callback)", "modifiers": "@Override public", "return": "Future<R>", "signature": "Future<R> execute(final PartitionContext partitionContext, final RetryPolicy retryPolicy,\n                                 final ServiceCallback<S, R> callback)", "full_signature": "@Override public Future<R> execute(final PartitionContext partitionContext, final RetryPolicy retryPolicy,\n                                 final ServiceCallback<S, R> callback)", "class_method_signature": "AsyncServicePool.execute(final PartitionContext partitionContext, final RetryPolicy retryPolicy,\n                                 final ServiceCallback<S, R> callback)", "testcase": false, "constructor": false}, {"identifier": "executeOnAll", "parameters": "(RetryPolicy retry, ServiceCallback<S, R> callback)", "modifiers": "@Override public", "return": "Collection<Future<R>>", "signature": "Collection<Future<R>> executeOnAll(RetryPolicy retry, ServiceCallback<S, R> callback)", "full_signature": "@Override public Collection<Future<R>> executeOnAll(RetryPolicy retry, ServiceCallback<S, R> callback)", "class_method_signature": "AsyncServicePool.executeOnAll(RetryPolicy retry, ServiceCallback<S, R> callback)", "testcase": false, "constructor": false}, {"identifier": "executeOn", "parameters": "(ServiceEndPointPredicate predicate, final RetryPolicy retry,\n                                               final ServiceCallback<S, R> callback)", "modifiers": "@Override public", "return": "Collection<Future<R>>", "signature": "Collection<Future<R>> executeOn(ServiceEndPointPredicate predicate, final RetryPolicy retry,\n                                               final ServiceCallback<S, R> callback)", "full_signature": "@Override public Collection<Future<R>> executeOn(ServiceEndPointPredicate predicate, final RetryPolicy retry,\n                                               final ServiceCallback<S, R> callback)", "class_method_signature": "AsyncServicePool.executeOn(ServiceEndPointPredicate predicate, final RetryPolicy retry,\n                                               final ServiceCallback<S, R> callback)", "testcase": false, "constructor": false}, {"identifier": "getNumValidEndPoints", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumValidEndPoints()", "full_signature": "@Override public int getNumValidEndPoints()", "class_method_signature": "AsyncServicePool.getNumValidEndPoints()", "testcase": false, "constructor": false}, {"identifier": "getNumBadEndPoints", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumBadEndPoints()", "full_signature": "@Override public int getNumBadEndPoints()", "class_method_signature": "AsyncServicePool.getNumBadEndPoints()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/bazaarvoice/ostrich/pool/AsyncServicePool.java"}, "focal_method": {"identifier": "execute", "parameters": "(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "modifiers": "@Override public", "return": "Future<R>", "body": "@Override\n    public <R> Future<R> execute(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback) {\n        return _executor.submit(new Callable<R>() {\n            @Override\n            public R call() throws Exception {\n                return _pool.execute(retryPolicy, callback);\n            }\n        });\n    }", "signature": "Future<R> execute(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "full_signature": "@Override public Future<R> execute(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "class_method_signature": "AsyncServicePool.execute(final RetryPolicy retryPolicy, final ServiceCallback<S, R> callback)", "testcase": false, "constructor": false, "invocations": ["submit", "execute"]}, "repository": {"repo_id": 4341250, "url": "https://github.com/bazaarvoice/ostrich", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 26, "size": 1577, "license": "licensed"}}