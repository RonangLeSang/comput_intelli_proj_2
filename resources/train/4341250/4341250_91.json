{"test_class": {"identifier": "SingleThreadedClientServiceCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ServiceEndPoint END_POINT = mock(ServiceEndPoint.class);", "modifier": "private static final", "type": "ServiceEndPoint", "declarator": "END_POINT = mock(ServiceEndPoint.class)", "var_name": "END_POINT"}, {"original_string": "private ServiceFactory<Service> _factory;", "modifier": "private", "type": "ServiceFactory<Service>", "declarator": "_factory", "var_name": "_factory"}, {"original_string": "private ServiceCachingPolicy _cachingPolicy;", "modifier": "private", "type": "ServiceCachingPolicy", "declarator": "_cachingPolicy", "var_name": "_cachingPolicy"}, {"original_string": "private MetricRegistry _registry = new MetricRegistry();", "modifier": "private", "type": "MetricRegistry", "declarator": "_registry = new MetricRegistry()", "var_name": "_registry"}, {"original_string": "private List<SingleThreadedClientServiceCache<?>> _caches = Lists.newArrayList();", "modifier": "private", "type": "List<SingleThreadedClientServiceCache<?>>", "declarator": "_caches = Lists.newArrayList()", "var_name": "_caches"}], "file": "core/src/test/java/com/bazaarvoice/ostrich/pool/SingleThreadedClientServiceCacheTest.java"}, "test_case": {"identifier": "testKeyedObjectPoolIsCorrectlyConfigured", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testKeyedObjectPoolIsCorrectlyConfigured() {\n        // Set values to be different from corresponding GenericKeyedObjectPool defaults.\n        when(_cachingPolicy.getCacheExhaustionAction()).thenReturn(ServiceCachingPolicy.ExhaustionAction.GROW);\n        when(_cachingPolicy.getMaxNumServiceInstances()).thenReturn(20);\n        when(_cachingPolicy.getMaxNumServiceInstancesPerEndPoint()).thenReturn(5);\n        when(_cachingPolicy.getMaxServiceInstanceIdleTime(TimeUnit.MILLISECONDS)).thenReturn(10L);\n\n        GenericKeyedObjectPool<ServiceEndPoint, Service> pool = newCache().getPool();\n        assertEquals(GenericKeyedObjectPool.WHEN_EXHAUSTED_GROW, pool.getWhenExhaustedAction());\n        assertEquals(20, pool.getMaxTotal());\n        assertEquals(5, pool.getMaxActive());\n        assertEquals(5, pool.getMaxIdle());\n        assertEquals(10L, pool.getMinEvictableIdleTimeMillis());\n        assertEquals(20, pool.getNumTestsPerEvictionRun());\n    }", "signature": "void testKeyedObjectPoolIsCorrectlyConfigured()", "full_signature": "@Test public void testKeyedObjectPoolIsCorrectlyConfigured()", "class_method_signature": "SingleThreadedClientServiceCacheTest.testKeyedObjectPoolIsCorrectlyConfigured()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getCacheExhaustionAction", "thenReturn", "when", "getMaxNumServiceInstances", "thenReturn", "when", "getMaxNumServiceInstancesPerEndPoint", "thenReturn", "when", "getMaxServiceInstanceIdleTime", "getPool", "newCache", "assertEquals", "getWhenExhaustedAction", "assertEquals", "getMaxTotal", "assertEquals", "getMaxActive", "assertEquals", "getMaxIdle", "assertEquals", "getMinEvictableIdleTimeMillis", "assertEquals", "getNumTestsPerEvictionRun"]}, "focal_class": {"identifier": "SingleThreadedClientServiceCache", "superclass": "", "interfaces": "implements ServiceCache<S>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SingleThreadedClientServiceCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SingleThreadedClientServiceCache.class)", "var_name": "LOG"}, {"original_string": "@VisibleForTesting\n    static final long EVICTION_DURATION_IN_SECONDS = 300;", "modifier": "@VisibleForTesting\n    static final", "type": "long", "declarator": "EVICTION_DURATION_IN_SECONDS = 300", "var_name": "EVICTION_DURATION_IN_SECONDS"}, {"original_string": "private final GenericKeyedObjectPool<ServiceEndPoint, S> _pool;", "modifier": "private final", "type": "GenericKeyedObjectPool<ServiceEndPoint, S>", "declarator": "_pool", "var_name": "_pool"}, {"original_string": "private final AtomicLong _revisionNumber = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "_revisionNumber = new AtomicLong()", "var_name": "_revisionNumber"}, {"original_string": "private final Map<ServiceEndPoint, Long> _invalidRevisions = new MapMaker().weakKeys().makeMap();", "modifier": "private final", "type": "Map<ServiceEndPoint, Long>", "declarator": "_invalidRevisions = new MapMaker().weakKeys().makeMap()", "var_name": "_invalidRevisions"}, {"original_string": "private final Map<ServiceHandle<S>, Long> _checkedOutRevisions = new MapMaker().makeMap();", "modifier": "private final", "type": "Map<ServiceHandle<S>, Long>", "declarator": "_checkedOutRevisions = new MapMaker().makeMap()", "var_name": "_checkedOutRevisions"}, {"original_string": "private final Future<?> _evictionFuture;", "modifier": "private final", "type": "Future<?>", "declarator": "_evictionFuture", "var_name": "_evictionFuture"}, {"original_string": "private volatile boolean _isClosed = false;", "modifier": "private volatile", "type": "boolean", "declarator": "_isClosed = false", "var_name": "_isClosed"}, {"original_string": "private final Metrics.InstanceMetrics _metrics;", "modifier": "private final", "type": "Metrics.InstanceMetrics", "declarator": "_metrics", "var_name": "_metrics"}, {"original_string": "private final Timer _loadTimer;", "modifier": "private final", "type": "Timer", "declarator": "_loadTimer", "var_name": "_loadTimer"}, {"original_string": "private final AtomicLong _requestCount = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "_requestCount = new AtomicLong()", "var_name": "_requestCount"}, {"original_string": "private final AtomicLong _missCount = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "_missCount = new AtomicLong()", "var_name": "_missCount"}, {"original_string": "private final AtomicLong _loadSuccessCount = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "_loadSuccessCount = new AtomicLong()", "var_name": "_loadSuccessCount"}, {"original_string": "private final AtomicLong _loadFailureCount = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "_loadFailureCount = new AtomicLong()", "var_name": "_loadFailureCount"}], "methods": [{"identifier": "SingleThreadedClientServiceCache", "parameters": "(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, MetricRegistry metrics)", "modifiers": "", "return": "", "signature": " SingleThreadedClientServiceCache(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, MetricRegistry metrics)", "full_signature": "  SingleThreadedClientServiceCache(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, MetricRegistry metrics)", "class_method_signature": "SingleThreadedClientServiceCache.SingleThreadedClientServiceCache(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, MetricRegistry metrics)", "testcase": false, "constructor": true}, {"identifier": "SingleThreadedClientServiceCache", "parameters": "(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, ScheduledExecutorService executor,\n                                     MetricRegistry metrics)", "modifiers": "@VisibleForTesting", "return": "", "signature": " SingleThreadedClientServiceCache(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, ScheduledExecutorService executor,\n                                     MetricRegistry metrics)", "full_signature": "@VisibleForTesting  SingleThreadedClientServiceCache(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, ScheduledExecutorService executor,\n                                     MetricRegistry metrics)", "class_method_signature": "SingleThreadedClientServiceCache.SingleThreadedClientServiceCache(ServiceCachingPolicy policy, ServiceFactory<S> serviceFactory, ScheduledExecutorService executor,\n                                     MetricRegistry metrics)", "testcase": false, "constructor": true}, {"identifier": "getPool", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "GenericKeyedObjectPool<ServiceEndPoint, S>", "signature": "GenericKeyedObjectPool<ServiceEndPoint, S> getPool()", "full_signature": "@VisibleForTesting GenericKeyedObjectPool<ServiceEndPoint, S> getPool()", "class_method_signature": "SingleThreadedClientServiceCache.getPool()", "testcase": false, "constructor": false}, {"identifier": "checkOut", "parameters": "(ServiceEndPoint endPoint)", "modifiers": "public", "return": "ServiceHandle<S>", "signature": "ServiceHandle<S> checkOut(ServiceEndPoint endPoint)", "full_signature": "public ServiceHandle<S> checkOut(ServiceEndPoint endPoint)", "class_method_signature": "SingleThreadedClientServiceCache.checkOut(ServiceEndPoint endPoint)", "testcase": false, "constructor": false}, {"identifier": "checkIn", "parameters": "(ServiceHandle<S> handle)", "modifiers": "@Override public", "return": "void", "signature": "void checkIn(ServiceHandle<S> handle)", "full_signature": "@Override public void checkIn(ServiceHandle<S> handle)", "class_method_signature": "SingleThreadedClientServiceCache.checkIn(ServiceHandle<S> handle)", "testcase": false, "constructor": false}, {"identifier": "getNumIdleInstances", "parameters": "(ServiceEndPoint endPoint)", "modifiers": "@Override public", "return": "int", "signature": "int getNumIdleInstances(ServiceEndPoint endPoint)", "full_signature": "@Override public int getNumIdleInstances(ServiceEndPoint endPoint)", "class_method_signature": "SingleThreadedClientServiceCache.getNumIdleInstances(ServiceEndPoint endPoint)", "testcase": false, "constructor": false}, {"identifier": "getNumActiveInstances", "parameters": "(ServiceEndPoint endPoint)", "modifiers": "@Override public", "return": "int", "signature": "int getNumActiveInstances(ServiceEndPoint endPoint)", "full_signature": "@Override public int getNumActiveInstances(ServiceEndPoint endPoint)", "class_method_signature": "SingleThreadedClientServiceCache.getNumActiveInstances(ServiceEndPoint endPoint)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SingleThreadedClientServiceCache.close()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(ServiceEndPoint endPoint)", "modifiers": "@Override public", "return": "void", "signature": "void register(ServiceEndPoint endPoint)", "full_signature": "@Override public void register(ServiceEndPoint endPoint)", "class_method_signature": "SingleThreadedClientServiceCache.register(ServiceEndPoint endPoint)", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "(ServiceEndPoint endPoint)", "modifiers": "@Override public", "return": "void", "signature": "void evict(ServiceEndPoint endPoint)", "full_signature": "@Override public void evict(ServiceEndPoint endPoint)", "class_method_signature": "SingleThreadedClientServiceCache.evict(ServiceEndPoint endPoint)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/bazaarvoice/ostrich/pool/SingleThreadedClientServiceCache.java"}, "focal_method": {"identifier": "getPool", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "GenericKeyedObjectPool<ServiceEndPoint, S>", "body": "@VisibleForTesting\n    GenericKeyedObjectPool<ServiceEndPoint, S> getPool() {\n        return _pool;\n    }", "signature": "GenericKeyedObjectPool<ServiceEndPoint, S> getPool()", "full_signature": "@VisibleForTesting GenericKeyedObjectPool<ServiceEndPoint, S> getPool()", "class_method_signature": "SingleThreadedClientServiceCache.getPool()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4341250, "url": "https://github.com/bazaarvoice/ostrich", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 26, "size": 1577, "license": "licensed"}}