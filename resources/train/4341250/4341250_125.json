{"test_class": {"identifier": "ServiceCachingPolicyBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/bazaarvoice/ostrich/pool/ServiceCachingPolicyBuilderTest.java"}, "test_case": {"identifier": "testUseMultiThreadedClientPolicyWithMaxNumServiceInstancesPerEndPoint", "parameters": "()", "modifiers": "@Test (expected = UnsupportedOperationException.class) public", "return": "void", "body": "@Test (expected = UnsupportedOperationException.class)\n    public void testUseMultiThreadedClientPolicyWithMaxNumServiceInstancesPerEndPoint() {\n        ServiceCachingPolicy cachingPolicy = ServiceCachingPolicyBuilder.getMultiThreadedClientPolicy();\n        assertEquals(1, cachingPolicy.getMaxNumServiceInstancesPerEndPoint());\n    }", "signature": "void testUseMultiThreadedClientPolicyWithMaxNumServiceInstancesPerEndPoint()", "full_signature": "@Test (expected = UnsupportedOperationException.class) public void testUseMultiThreadedClientPolicyWithMaxNumServiceInstancesPerEndPoint()", "class_method_signature": "ServiceCachingPolicyBuilderTest.testUseMultiThreadedClientPolicyWithMaxNumServiceInstancesPerEndPoint()", "testcase": true, "constructor": false, "invocations": ["getMultiThreadedClientPolicy", "assertEquals", "getMaxNumServiceInstancesPerEndPoint"]}, "focal_class": {"identifier": "ServiceCachingPolicyBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ServiceCachingPolicy NO_CACHING = new ServiceCachingPolicyBuilder()\n            .withMaxNumServiceInstances(0)\n            .withMaxNumServiceInstancesPerEndPoint(0)\n            .withCacheExhaustionAction(ExhaustionAction.GROW)\n            .build();", "modifier": "public static final", "type": "ServiceCachingPolicy", "declarator": "NO_CACHING = new ServiceCachingPolicyBuilder()\n            .withMaxNumServiceInstances(0)\n            .withMaxNumServiceInstancesPerEndPoint(0)\n            .withCacheExhaustionAction(ExhaustionAction.GROW)\n            .build()", "var_name": "NO_CACHING"}, {"original_string": "private static final ServiceCachingPolicy DEFAULT_MULTI_THREADED_CLIENTS_POLICY = new ServiceCachingPolicy() {\n        @Override\n        public int getMaxNumServiceInstances() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int getMaxNumServiceInstancesPerEndPoint() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long getMaxServiceInstanceIdleTime(TimeUnit unit) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public ExhaustionAction getCacheExhaustionAction() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean useMultiThreadedClientPolicy() {\n            return true;\n        }\n    };", "modifier": "private static final", "type": "ServiceCachingPolicy", "declarator": "DEFAULT_MULTI_THREADED_CLIENTS_POLICY = new ServiceCachingPolicy() {\n        @Override\n        public int getMaxNumServiceInstances() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int getMaxNumServiceInstancesPerEndPoint() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long getMaxServiceInstanceIdleTime(TimeUnit unit) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public ExhaustionAction getCacheExhaustionAction() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean useMultiThreadedClientPolicy() {\n            return true;\n        }\n    }", "var_name": "DEFAULT_MULTI_THREADED_CLIENTS_POLICY"}, {"original_string": "private int _maxNumServiceInstances = -1;", "modifier": "private", "type": "int", "declarator": "_maxNumServiceInstances = -1", "var_name": "_maxNumServiceInstances"}, {"original_string": "private int _maxNumServiceInstancesPerEndPoint = -1;", "modifier": "private", "type": "int", "declarator": "_maxNumServiceInstancesPerEndPoint = -1", "var_name": "_maxNumServiceInstancesPerEndPoint"}, {"original_string": "private long _maxServiceInstanceIdleTimeNanos;", "modifier": "private", "type": "long", "declarator": "_maxServiceInstanceIdleTimeNanos", "var_name": "_maxServiceInstanceIdleTimeNanos"}, {"original_string": "private ExhaustionAction _cacheExhaustionAction = ExhaustionAction.GROW;", "modifier": "private", "type": "ExhaustionAction", "declarator": "_cacheExhaustionAction = ExhaustionAction.GROW", "var_name": "_cacheExhaustionAction"}], "methods": [{"identifier": "getMultiThreadedClientPolicy", "parameters": "()", "modifiers": "public static", "return": "ServiceCachingPolicy", "signature": "ServiceCachingPolicy getMultiThreadedClientPolicy()", "full_signature": "public static ServiceCachingPolicy getMultiThreadedClientPolicy()", "class_method_signature": "ServiceCachingPolicyBuilder.getMultiThreadedClientPolicy()", "testcase": false, "constructor": false}, {"identifier": "withMaxNumServiceInstances", "parameters": "(int maxNumServiceInstances)", "modifiers": "public", "return": "ServiceCachingPolicyBuilder", "signature": "ServiceCachingPolicyBuilder withMaxNumServiceInstances(int maxNumServiceInstances)", "full_signature": "public ServiceCachingPolicyBuilder withMaxNumServiceInstances(int maxNumServiceInstances)", "class_method_signature": "ServiceCachingPolicyBuilder.withMaxNumServiceInstances(int maxNumServiceInstances)", "testcase": false, "constructor": false}, {"identifier": "withMaxNumServiceInstancesPerEndPoint", "parameters": "(int maxNumServiceInstancesPerEndPoint)", "modifiers": "public", "return": "ServiceCachingPolicyBuilder", "signature": "ServiceCachingPolicyBuilder withMaxNumServiceInstancesPerEndPoint(int maxNumServiceInstancesPerEndPoint)", "full_signature": "public ServiceCachingPolicyBuilder withMaxNumServiceInstancesPerEndPoint(int maxNumServiceInstancesPerEndPoint)", "class_method_signature": "ServiceCachingPolicyBuilder.withMaxNumServiceInstancesPerEndPoint(int maxNumServiceInstancesPerEndPoint)", "testcase": false, "constructor": false}, {"identifier": "withMaxServiceInstanceIdleTime", "parameters": "(int maxServiceInstanceIdleTime, TimeUnit unit)", "modifiers": "public", "return": "ServiceCachingPolicyBuilder", "signature": "ServiceCachingPolicyBuilder withMaxServiceInstanceIdleTime(int maxServiceInstanceIdleTime, TimeUnit unit)", "full_signature": "public ServiceCachingPolicyBuilder withMaxServiceInstanceIdleTime(int maxServiceInstanceIdleTime, TimeUnit unit)", "class_method_signature": "ServiceCachingPolicyBuilder.withMaxServiceInstanceIdleTime(int maxServiceInstanceIdleTime, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "withCacheExhaustionAction", "parameters": "(ExhaustionAction action)", "modifiers": "public", "return": "ServiceCachingPolicyBuilder", "signature": "ServiceCachingPolicyBuilder withCacheExhaustionAction(ExhaustionAction action)", "full_signature": "public ServiceCachingPolicyBuilder withCacheExhaustionAction(ExhaustionAction action)", "class_method_signature": "ServiceCachingPolicyBuilder.withCacheExhaustionAction(ExhaustionAction action)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "ServiceCachingPolicy", "signature": "ServiceCachingPolicy build()", "full_signature": "public ServiceCachingPolicy build()", "class_method_signature": "ServiceCachingPolicyBuilder.build()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/bazaarvoice/ostrich/pool/ServiceCachingPolicyBuilder.java"}, "focal_method": {"identifier": "getMultiThreadedClientPolicy", "parameters": "()", "modifiers": "public static", "return": "ServiceCachingPolicy", "body": "public static ServiceCachingPolicy getMultiThreadedClientPolicy() {\n        return DEFAULT_MULTI_THREADED_CLIENTS_POLICY;\n    }", "signature": "ServiceCachingPolicy getMultiThreadedClientPolicy()", "full_signature": "public static ServiceCachingPolicy getMultiThreadedClientPolicy()", "class_method_signature": "ServiceCachingPolicyBuilder.getMultiThreadedClientPolicy()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4341250, "url": "https://github.com/bazaarvoice/ostrich", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 26, "size": 1577, "license": "licensed"}}