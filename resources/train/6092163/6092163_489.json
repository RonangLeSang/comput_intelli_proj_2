{"test_class": {"identifier": "TestHandshake", "superclass": "", "interfaces": "", "fields": [], "file": "client/src/test/java/org/teiid/net/socket/TestHandshake.java"}, "test_case": {"identifier": "testVersionNormalization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testVersionNormalization() throws Exception {\n        Handshake hs = new Handshake(\"11.2.3.a\");\n        assertEquals(\"11.02.03.a\", hs.getVersion());\n    }", "signature": "void testVersionNormalization()", "full_signature": "@Test public void testVersionNormalization()", "class_method_signature": "TestHandshake.testVersionNormalization()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getVersion"]}, "focal_class": {"identifier": "Handshake", "superclass": "", "interfaces": "implements Externalizable", "fields": [{"original_string": "private static final long serialVersionUID = 7839271224736355515L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7839271224736355515L", "var_name": "serialVersionUID"}, {"original_string": "private String version = ApplicationInfo.getInstance().getReleaseNumber();", "modifier": "private", "type": "String", "declarator": "version = ApplicationInfo.getInstance().getReleaseNumber()", "var_name": "version"}, {"original_string": "private byte[] publicKey;", "modifier": "private", "type": "byte[]", "declarator": "publicKey", "var_name": "publicKey"}, {"original_string": "private byte[] publicKeyLarge;", "modifier": "private", "type": "byte[]", "declarator": "publicKeyLarge", "var_name": "publicKeyLarge"}, {"original_string": "private AuthenticationType authType = AuthenticationType.USERPASSWORD;", "modifier": "private", "type": "AuthenticationType", "declarator": "authType = AuthenticationType.USERPASSWORD", "var_name": "authType"}, {"original_string": "private boolean cbc = true;", "modifier": "private", "type": "boolean", "declarator": "cbc = true", "var_name": "cbc"}], "methods": [{"identifier": "Handshake", "parameters": "()", "modifiers": "public", "return": "", "signature": " Handshake()", "full_signature": "public  Handshake()", "class_method_signature": "Handshake.Handshake()", "testcase": false, "constructor": true}, {"identifier": "Handshake", "parameters": "(String version)", "modifiers": "", "return": "", "signature": " Handshake(String version)", "full_signature": "  Handshake(String version)", "class_method_signature": "Handshake.Handshake(String version)", "testcase": false, "constructor": true}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "Handshake.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setVersion()", "full_signature": "public void setVersion()", "class_method_signature": "Handshake.setVersion()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPublicKey()", "full_signature": "public byte[] getPublicKey()", "class_method_signature": "Handshake.getPublicKey()", "testcase": false, "constructor": false}, {"identifier": "setPublicKey", "parameters": "(byte[] key)", "modifiers": "public", "return": "void", "signature": "void setPublicKey(byte[] key)", "full_signature": "public void setPublicKey(byte[] key)", "class_method_signature": "Handshake.setPublicKey(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "getAuthType", "parameters": "()", "modifiers": "@Deprecated public", "return": "AuthenticationType", "signature": "AuthenticationType getAuthType()", "full_signature": "@Deprecated public AuthenticationType getAuthType()", "class_method_signature": "Handshake.getAuthType()", "testcase": false, "constructor": false}, {"identifier": "setAuthType", "parameters": "(AuthenticationType authType)", "modifiers": "public", "return": "void", "signature": "void setAuthType(AuthenticationType authType)", "full_signature": "public void setAuthType(AuthenticationType authType)", "class_method_signature": "Handshake.setAuthType(AuthenticationType authType)", "testcase": false, "constructor": false}, {"identifier": "getPublicKeyLarge", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPublicKeyLarge()", "full_signature": "public byte[] getPublicKeyLarge()", "class_method_signature": "Handshake.getPublicKeyLarge()", "testcase": false, "constructor": false}, {"identifier": "setPublicKeyLarge", "parameters": "(byte[] publicKeyLarge)", "modifiers": "public", "return": "void", "signature": "void setPublicKeyLarge(byte[] publicKeyLarge)", "full_signature": "public void setPublicKeyLarge(byte[] publicKeyLarge)", "class_method_signature": "Handshake.setPublicKeyLarge(byte[] publicKeyLarge)", "testcase": false, "constructor": false}, {"identifier": "isCbc", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCbc()", "full_signature": "public boolean isCbc()", "class_method_signature": "Handshake.isCbc()", "testcase": false, "constructor": false}, {"identifier": "setCbc", "parameters": "(boolean cbc)", "modifiers": "public", "return": "void", "signature": "void setCbc(boolean cbc)", "full_signature": "public void setCbc(boolean cbc)", "class_method_signature": "Handshake.setCbc(boolean cbc)", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@Override public void readExternal(ObjectInput in)", "class_method_signature": "Handshake.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "Handshake.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}], "file": "client/src/main/java/org/teiid/net/socket/Handshake.java"}, "focal_method": {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getVersion() {\n        if (this.version != null) {\n            //normalize to allow for more increments\n            StringBuilder builder = new StringBuilder();\n            List<String> parts = StringUtil.split(this.version, \".\"); //$NON-NLS-1$\n            for (int i = 0; i < parts.size(); i++) {\n                if (i > 0) {\n                    builder.append('.');\n                }\n                String part = parts.get(i);\n                if (part.length() < 2 && Character.isDigit(part.charAt(0))) {\n                    builder.append('0');\n                }\n                builder.append(part);\n            }\n            return builder.toString();\n        }\n        return this.version;\n    }", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "Handshake.getVersion()", "testcase": false, "constructor": false, "invocations": ["split", "size", "append", "get", "length", "isDigit", "charAt", "append", "append", "toString"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}