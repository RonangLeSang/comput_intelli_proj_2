{"test_class": {"identifier": "TestFunctionMethods", "superclass": "", "interfaces": "", "fields": [], "file": "engine/src/test/java/org/teiid/query/function/TestFunctionMethods.java"}, "test_case": {"identifier": "testTimestampDiffCalendarBasedHour", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testTimestampDiffCalendarBasedHour() throws Exception {\n        assertEquals(Long.valueOf(2562072), FunctionMethods.timestampDiff(NonReserved.SQL_TSI_HOUR,\n                new Timestamp(TimestampUtil.createDate(112, 0, 1).getTime()),\n                new Timestamp(TimestampUtil.createDate(404, 3, 13).getTime()), true));\n    }", "signature": "void testTimestampDiffCalendarBasedHour()", "full_signature": "@Test public void testTimestampDiffCalendarBasedHour()", "class_method_signature": "TestFunctionMethods.testTimestampDiffCalendarBasedHour()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "valueOf", "timestampDiff", "getTime", "createDate", "getTime", "createDate"]}, "focal_class": {"identifier": "FunctionMethods", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ONE_BILLION = 1000000000;", "modifier": "private static final", "type": "int", "declarator": "ONE_BILLION = 1000000000", "var_name": "ONE_BILLION"}, {"original_string": "private static final boolean CALENDAR_TIMESTAMPDIFF = PropertiesUtils.getHierarchicalProperty(\"org.teiid.calendarTimestampDiff\", true, Boolean.class);", "modifier": "private static final", "type": "boolean", "declarator": "CALENDAR_TIMESTAMPDIFF = PropertiesUtils.getHierarchicalProperty(\"org.teiid.calendarTimestampDiff\", true, Boolean.class)", "var_name": "CALENDAR_TIMESTAMPDIFF"}, {"original_string": "public static final String AT = \"@\";", "modifier": "public static final", "type": "String", "declarator": "AT = \"@\"", "var_name": "AT"}, {"original_string": "private static final BigDecimal ZERO = new BigDecimal(0);", "modifier": "private static final", "type": "BigDecimal", "declarator": "ZERO = new BigDecimal(0)", "var_name": "ZERO"}, {"original_string": "private static final double log10baseE = Math.log(10);", "modifier": "private static final", "type": "double", "declarator": "log10baseE = Math.log(10)", "var_name": "log10baseE"}, {"original_string": "static String[] dayNames;", "modifier": "static", "type": "String[]", "declarator": "dayNames", "var_name": "dayNames"}, {"original_string": "static String[] monthNames;", "modifier": "static", "type": "String[]", "declarator": "monthNames", "var_name": "monthNames"}, {"original_string": "private static final char SPACE = ' ';", "modifier": "private static final", "type": "char", "declarator": "SPACE = ' '", "var_name": "SPACE"}, {"original_string": "public static final String SPACE_CHAR = \" \";", "modifier": "public static final", "type": "String", "declarator": "SPACE_CHAR = \" \"", "var_name": "SPACE_CHAR"}, {"original_string": "private static byte iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };", "modifier": "private static", "type": "byte", "declarator": "iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }", "var_name": "iv"}], "methods": [{"identifier": "plus", "parameters": "(int x, int y)", "modifiers": "public static", "return": "int", "signature": "int plus(int x, int y)", "full_signature": "public static int plus(int x, int y)", "class_method_signature": "FunctionMethods.plus(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "integerRangeCheck", "parameters": "(long result)", "modifiers": "public static", "return": "int", "signature": "int integerRangeCheck(long result)", "full_signature": "public static int integerRangeCheck(long result)", "class_method_signature": "FunctionMethods.integerRangeCheck(long result)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(long x, long y)", "modifiers": "public static", "return": "long", "signature": "long plus(long x, long y)", "full_signature": "public static long plus(long x, long y)", "class_method_signature": "FunctionMethods.plus(long x, long y)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(float x, float y)", "modifiers": "public static", "return": "float", "signature": "float plus(float x, float y)", "full_signature": "public static float plus(float x, float y)", "class_method_signature": "FunctionMethods.plus(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double plus(double x, double y)", "full_signature": "public static double plus(double x, double y)", "class_method_signature": "FunctionMethods.plus(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(BigInteger x, BigInteger y)", "modifiers": "public static", "return": "Object", "signature": "Object plus(BigInteger x, BigInteger y)", "full_signature": "public static Object plus(BigInteger x, BigInteger y)", "class_method_signature": "FunctionMethods.plus(BigInteger x, BigInteger y)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(BigDecimal x, BigDecimal y)", "modifiers": "public static", "return": "Object", "signature": "Object plus(BigDecimal x, BigDecimal y)", "full_signature": "public static Object plus(BigDecimal x, BigDecimal y)", "class_method_signature": "FunctionMethods.plus(BigDecimal x, BigDecimal y)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(int x, int y)", "modifiers": "public static", "return": "int", "signature": "int minus(int x, int y)", "full_signature": "public static int minus(int x, int y)", "class_method_signature": "FunctionMethods.minus(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(long x, long y)", "modifiers": "public static", "return": "long", "signature": "long minus(long x, long y)", "full_signature": "public static long minus(long x, long y)", "class_method_signature": "FunctionMethods.minus(long x, long y)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(float x, float y)", "modifiers": "public static", "return": "float", "signature": "float minus(float x, float y)", "full_signature": "public static float minus(float x, float y)", "class_method_signature": "FunctionMethods.minus(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double minus(double x, double y)", "full_signature": "public static double minus(double x, double y)", "class_method_signature": "FunctionMethods.minus(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(BigInteger x, BigInteger y)", "modifiers": "public static", "return": "Object", "signature": "Object minus(BigInteger x, BigInteger y)", "full_signature": "public static Object minus(BigInteger x, BigInteger y)", "class_method_signature": "FunctionMethods.minus(BigInteger x, BigInteger y)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(BigDecimal x, BigDecimal y)", "modifiers": "public static", "return": "Object", "signature": "Object minus(BigDecimal x, BigDecimal y)", "full_signature": "public static Object minus(BigDecimal x, BigDecimal y)", "class_method_signature": "FunctionMethods.minus(BigDecimal x, BigDecimal y)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(int x, int y)", "modifiers": "public static", "return": "int", "signature": "int multiply(int x, int y)", "full_signature": "public static int multiply(int x, int y)", "class_method_signature": "FunctionMethods.multiply(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(long x, long y)", "modifiers": "public static", "return": "long", "signature": "long multiply(long x, long y)", "full_signature": "public static long multiply(long x, long y)", "class_method_signature": "FunctionMethods.multiply(long x, long y)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(float x, float y)", "modifiers": "public static", "return": "float", "signature": "float multiply(float x, float y)", "full_signature": "public static float multiply(float x, float y)", "class_method_signature": "FunctionMethods.multiply(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double multiply(double x, double y)", "full_signature": "public static double multiply(double x, double y)", "class_method_signature": "FunctionMethods.multiply(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(BigInteger x, BigInteger y)", "modifiers": "public static", "return": "Object", "signature": "Object multiply(BigInteger x, BigInteger y)", "full_signature": "public static Object multiply(BigInteger x, BigInteger y)", "class_method_signature": "FunctionMethods.multiply(BigInteger x, BigInteger y)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(BigDecimal x, BigDecimal y)", "modifiers": "public static", "return": "Object", "signature": "Object multiply(BigDecimal x, BigDecimal y)", "full_signature": "public static Object multiply(BigDecimal x, BigDecimal y)", "class_method_signature": "FunctionMethods.multiply(BigDecimal x, BigDecimal y)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(int x, int y)", "modifiers": "public static", "return": "int", "signature": "int divide(int x, int y)", "full_signature": "public static int divide(int x, int y)", "class_method_signature": "FunctionMethods.divide(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(long x, long y)", "modifiers": "public static", "return": "long", "signature": "long divide(long x, long y)", "full_signature": "public static long divide(long x, long y)", "class_method_signature": "FunctionMethods.divide(long x, long y)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(float x, float y)", "modifiers": "public static", "return": "float", "signature": "float divide(float x, float y)", "full_signature": "public static float divide(float x, float y)", "class_method_signature": "FunctionMethods.divide(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double divide(double x, double y)", "full_signature": "public static double divide(double x, double y)", "class_method_signature": "FunctionMethods.divide(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigInteger x, BigInteger y)", "modifiers": "public static", "return": "Object", "signature": "Object divide(BigInteger x, BigInteger y)", "full_signature": "public static Object divide(BigInteger x, BigInteger y)", "class_method_signature": "FunctionMethods.divide(BigInteger x, BigInteger y)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigDecimal x, BigDecimal y)", "modifiers": "public static", "return": "Object", "signature": "Object divide(BigDecimal x, BigDecimal y)", "full_signature": "public static Object divide(BigDecimal x, BigDecimal y)", "class_method_signature": "FunctionMethods.divide(BigDecimal x, BigDecimal y)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(int x)", "modifiers": "public static", "return": "int", "signature": "int abs(int x)", "full_signature": "public static int abs(int x)", "class_method_signature": "FunctionMethods.abs(int x)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(long x)", "modifiers": "public static", "return": "long", "signature": "long abs(long x)", "full_signature": "public static long abs(long x)", "class_method_signature": "FunctionMethods.abs(long x)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(float x)", "modifiers": "public static", "return": "float", "signature": "float abs(float x)", "full_signature": "public static float abs(float x)", "class_method_signature": "FunctionMethods.abs(float x)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(double x)", "modifiers": "public static", "return": "double", "signature": "double abs(double x)", "full_signature": "public static double abs(double x)", "class_method_signature": "FunctionMethods.abs(double x)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(BigInteger x)", "modifiers": "public static", "return": "Object", "signature": "Object abs(BigInteger x)", "full_signature": "public static Object abs(BigInteger x)", "class_method_signature": "FunctionMethods.abs(BigInteger x)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(BigDecimal x)", "modifiers": "public static", "return": "Object", "signature": "Object abs(BigDecimal x)", "full_signature": "public static Object abs(BigDecimal x)", "class_method_signature": "FunctionMethods.abs(BigDecimal x)", "testcase": false, "constructor": false}, {"identifier": "ceiling", "parameters": "(Number x)", "modifiers": "public static", "return": "Object", "signature": "Object ceiling(Number x)", "full_signature": "public static Object ceiling(Number x)", "class_method_signature": "FunctionMethods.ceiling(Number x)", "testcase": false, "constructor": false}, {"identifier": "exp", "parameters": "(Number x)", "modifiers": "public static", "return": "Object", "signature": "Object exp(Number x)", "full_signature": "public static Object exp(Number x)", "class_method_signature": "FunctionMethods.exp(Number x)", "testcase": false, "constructor": false}, {"identifier": "floor", "parameters": "(Number x)", "modifiers": "public static", "return": "Object", "signature": "Object floor(Number x)", "full_signature": "public static Object floor(Number x)", "class_method_signature": "FunctionMethods.floor(Number x)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Number x)", "modifiers": "public static", "return": "Object", "signature": "Object log(Number x)", "full_signature": "public static Object log(Number x)", "class_method_signature": "FunctionMethods.log(Number x)", "testcase": false, "constructor": false}, {"identifier": "log10", "parameters": "(Number x)", "modifiers": "public static", "return": "Object", "signature": "Object log10(Number x)", "full_signature": "public static Object log10(Number x)", "class_method_signature": "FunctionMethods.log10(Number x)", "testcase": false, "constructor": false}, {"identifier": "rand", "parameters": "(CommandContext context, Integer seed)", "modifiers": "public static", "return": "Object", "signature": "Object rand(CommandContext context, Integer seed)", "full_signature": "public static Object rand(CommandContext context, Integer seed)", "class_method_signature": "FunctionMethods.rand(CommandContext context, Integer seed)", "testcase": false, "constructor": false}, {"identifier": "rand", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object rand(CommandContext context)", "full_signature": "public static Object rand(CommandContext context)", "class_method_signature": "FunctionMethods.rand(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(int x, int y)", "modifiers": "public static", "return": "int", "signature": "int mod(int x, int y)", "full_signature": "public static int mod(int x, int y)", "class_method_signature": "FunctionMethods.mod(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(long x, long y)", "modifiers": "public static", "return": "long", "signature": "long mod(long x, long y)", "full_signature": "public static long mod(long x, long y)", "class_method_signature": "FunctionMethods.mod(long x, long y)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(float x, float y)", "modifiers": "public static", "return": "float", "signature": "float mod(float x, float y)", "full_signature": "public static float mod(float x, float y)", "class_method_signature": "FunctionMethods.mod(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double mod(double x, double y)", "full_signature": "public static double mod(double x, double y)", "class_method_signature": "FunctionMethods.mod(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(BigInteger x, BigInteger y)", "modifiers": "public static", "return": "Object", "signature": "Object mod(BigInteger x, BigInteger y)", "full_signature": "public static Object mod(BigInteger x, BigInteger y)", "class_method_signature": "FunctionMethods.mod(BigInteger x, BigInteger y)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(BigDecimal x, BigDecimal y)", "modifiers": "public static", "return": "Object", "signature": "Object mod(BigDecimal x, BigDecimal y)", "full_signature": "public static Object mod(BigDecimal x, BigDecimal y)", "class_method_signature": "FunctionMethods.mod(BigDecimal x, BigDecimal y)", "testcase": false, "constructor": false}, {"identifier": "power", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double power(double x, double y)", "full_signature": "public static double power(double x, double y)", "class_method_signature": "FunctionMethods.power(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "power", "parameters": "(BigInteger x, int y)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger power(BigInteger x, int y)", "full_signature": "public static BigInteger power(BigInteger x, int y)", "class_method_signature": "FunctionMethods.power(BigInteger x, int y)", "testcase": false, "constructor": false}, {"identifier": "power", "parameters": "(BigDecimal x, int y)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal power(BigDecimal x, int y)", "full_signature": "public static BigDecimal power(BigDecimal x, int y)", "class_method_signature": "FunctionMethods.power(BigDecimal x, int y)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(int number, int places)", "modifiers": "public static", "return": "int", "signature": "int round(int number, int places)", "full_signature": "public static int round(int number, int places)", "class_method_signature": "FunctionMethods.round(int number, int places)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(float number, int places)", "modifiers": "public static", "return": "float", "signature": "float round(float number, int places)", "full_signature": "public static float round(float number, int places)", "class_method_signature": "FunctionMethods.round(float number, int places)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double number, int places)", "modifiers": "public static", "return": "double", "signature": "double round(double number, int places)", "full_signature": "public static double round(double number, int places)", "class_method_signature": "FunctionMethods.round(double number, int places)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(BigDecimal bigDecimalNumber, int places)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal round(BigDecimal bigDecimalNumber, int places)", "full_signature": "public static BigDecimal round(BigDecimal bigDecimalNumber, int places)", "class_method_signature": "FunctionMethods.round(BigDecimal bigDecimalNumber, int places)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(int x)", "modifiers": "public static", "return": "Object", "signature": "Object sign(int x)", "full_signature": "public static Object sign(int x)", "class_method_signature": "FunctionMethods.sign(int x)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(long x)", "modifiers": "public static", "return": "Object", "signature": "Object sign(long x)", "full_signature": "public static Object sign(long x)", "class_method_signature": "FunctionMethods.sign(long x)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(float x)", "modifiers": "public static", "return": "Object", "signature": "Object sign(float x)", "full_signature": "public static Object sign(float x)", "class_method_signature": "FunctionMethods.sign(float x)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(double x)", "modifiers": "public static", "return": "Object", "signature": "Object sign(double x)", "full_signature": "public static Object sign(double x)", "class_method_signature": "FunctionMethods.sign(double x)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(BigInteger x)", "modifiers": "public static", "return": "Object", "signature": "Object sign(BigInteger x)", "full_signature": "public static Object sign(BigInteger x)", "class_method_signature": "FunctionMethods.sign(BigInteger x)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(BigDecimal x)", "modifiers": "public static", "return": "Object", "signature": "Object sign(BigDecimal x)", "full_signature": "public static Object sign(BigDecimal x)", "class_method_signature": "FunctionMethods.sign(BigDecimal x)", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "(Number x)", "modifiers": "public static", "return": "Object", "signature": "Object sqrt(Number x)", "full_signature": "public static Object sqrt(Number x)", "class_method_signature": "FunctionMethods.sqrt(Number x)", "testcase": false, "constructor": false}, {"identifier": "currentDate", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object currentDate(CommandContext context)", "full_signature": "public static Object currentDate(CommandContext context)", "class_method_signature": "FunctionMethods.currentDate(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "currentTime", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object currentTime(CommandContext context)", "full_signature": "public static Object currentTime(CommandContext context)", "class_method_signature": "FunctionMethods.currentTime(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "currentTimestamp", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object currentTimestamp(CommandContext context)", "full_signature": "public static Object currentTimestamp(CommandContext context)", "class_method_signature": "FunctionMethods.currentTimestamp(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(java.util.Date date, int field)", "modifiers": "private static", "return": "int", "signature": "int getField(java.util.Date date, int field)", "full_signature": "private static int getField(java.util.Date date, int field)", "class_method_signature": "FunctionMethods.getField(java.util.Date date, int field)", "testcase": false, "constructor": false}, {"identifier": "dayName", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object dayName(Date x)", "full_signature": "public static Object dayName(Date x)", "class_method_signature": "FunctionMethods.dayName(Date x)", "testcase": false, "constructor": false}, {"identifier": "getSymbolLocale", "parameters": "()", "modifiers": "private static", "return": "Locale", "signature": "Locale getSymbolLocale()", "full_signature": "private static Locale getSymbolLocale()", "class_method_signature": "FunctionMethods.getSymbolLocale()", "testcase": false, "constructor": false}, {"identifier": "getMonthNames", "parameters": "()", "modifiers": "static", "return": "String[]", "signature": "String[] getMonthNames()", "full_signature": "static String[] getMonthNames()", "class_method_signature": "FunctionMethods.getMonthNames()", "testcase": false, "constructor": false}, {"identifier": "getDayNames", "parameters": "()", "modifiers": "static", "return": "String[]", "signature": "String[] getDayNames()", "full_signature": "static String[] getDayNames()", "class_method_signature": "FunctionMethods.getDayNames()", "testcase": false, "constructor": false}, {"identifier": "dayOfMonth", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object dayOfMonth(Date x)", "full_signature": "public static Object dayOfMonth(Date x)", "class_method_signature": "FunctionMethods.dayOfMonth(Date x)", "testcase": false, "constructor": false}, {"identifier": "dayOfWeek", "parameters": "(Date x)", "modifiers": "public static", "return": "int", "signature": "int dayOfWeek(Date x)", "full_signature": "public static int dayOfWeek(Date x)", "class_method_signature": "FunctionMethods.dayOfWeek(Date x)", "testcase": false, "constructor": false}, {"identifier": "dayOfYear", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object dayOfYear(Date x)", "full_signature": "public static Object dayOfYear(Date x)", "class_method_signature": "FunctionMethods.dayOfYear(Date x)", "testcase": false, "constructor": false}, {"identifier": "hour", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object hour(Date x)", "full_signature": "public static Object hour(Date x)", "class_method_signature": "FunctionMethods.hour(Date x)", "testcase": false, "constructor": false}, {"identifier": "minute", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object minute(Date x)", "full_signature": "public static Object minute(Date x)", "class_method_signature": "FunctionMethods.minute(Date x)", "testcase": false, "constructor": false}, {"identifier": "month", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object month(Date x)", "full_signature": "public static Object month(Date x)", "class_method_signature": "FunctionMethods.month(Date x)", "testcase": false, "constructor": false}, {"identifier": "monthName", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object monthName(Date x)", "full_signature": "public static Object monthName(Date x)", "class_method_signature": "FunctionMethods.monthName(Date x)", "testcase": false, "constructor": false}, {"identifier": "second", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object second(Date x)", "full_signature": "public static Object second(Date x)", "class_method_signature": "FunctionMethods.second(Date x)", "testcase": false, "constructor": false}, {"identifier": "week", "parameters": "(Date x)", "modifiers": "public static", "return": "int", "signature": "int week(Date x)", "full_signature": "public static int week(Date x)", "class_method_signature": "FunctionMethods.week(Date x)", "testcase": false, "constructor": false}, {"identifier": "year", "parameters": "(Date x)", "modifiers": "public static", "return": "Object", "signature": "Object year(Date x)", "full_signature": "public static Object year(Date x)", "class_method_signature": "FunctionMethods.year(Date x)", "testcase": false, "constructor": false}, {"identifier": "quarter", "parameters": "(Date date)", "modifiers": "public static", "return": "Object", "signature": "Object quarter(Date date)", "full_signature": "public static Object quarter(Date date)", "class_method_signature": "FunctionMethods.quarter(Date date)", "testcase": false, "constructor": false}, {"identifier": "epoch", "parameters": "(Timestamp date)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, nullOnNull=true, pushdown=PushDown.CAN_PUSHDOWN) public static", "return": "double", "signature": "double epoch(Timestamp date)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, nullOnNull=true, pushdown=PushDown.CAN_PUSHDOWN) public static double epoch(Timestamp date)", "class_method_signature": "FunctionMethods.epoch(Timestamp date)", "testcase": false, "constructor": false}, {"identifier": "from_unixtime", "parameters": "(long count)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static", "return": "String", "signature": "String from_unixtime(long count)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static String from_unixtime(long count)", "class_method_signature": "FunctionMethods.from_unixtime(long count)", "testcase": false, "constructor": false}, {"identifier": "unix_timestamp", "parameters": "(String date)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, nullOnNull=true, pushdown=PushDown.CAN_PUSHDOWN) public static", "return": "Long", "signature": "Long unix_timestamp(String date)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, nullOnNull=true, pushdown=PushDown.CAN_PUSHDOWN) public static Long unix_timestamp(String date)", "class_method_signature": "FunctionMethods.unix_timestamp(String date)", "testcase": false, "constructor": false}, {"identifier": "from_millis", "parameters": "(long millis)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static", "return": "Timestamp", "signature": "Timestamp from_millis(long millis)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static Timestamp from_millis(long millis)", "class_method_signature": "FunctionMethods.from_millis(long millis)", "testcase": false, "constructor": false}, {"identifier": "to_millis", "parameters": "(Timestamp date)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, nullOnNull=true, pushdown=PushDown.CAN_PUSHDOWN) public static", "return": "Long", "signature": "Long to_millis(Timestamp date)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, nullOnNull=true, pushdown=PushDown.CAN_PUSHDOWN) public static Long to_millis(Timestamp date)", "class_method_signature": "FunctionMethods.to_millis(Timestamp date)", "testcase": false, "constructor": false}, {"identifier": "timestampAdd", "parameters": "(String intervalType, int count, Timestamp timestamp)", "modifiers": "public static", "return": "Object", "signature": "Object timestampAdd(String intervalType, int count, Timestamp timestamp)", "full_signature": "public static Object timestampAdd(String intervalType, int count, Timestamp timestamp)", "class_method_signature": "FunctionMethods.timestampAdd(String intervalType, int count, Timestamp timestamp)", "testcase": false, "constructor": false}, {"identifier": "timestampAdd", "parameters": "(String intervalType, long count, Timestamp timestamp)", "modifiers": "public static", "return": "Object", "signature": "Object timestampAdd(String intervalType, long count, Timestamp timestamp)", "full_signature": "public static Object timestampAdd(String intervalType, long count, Timestamp timestamp)", "class_method_signature": "FunctionMethods.timestampAdd(String intervalType, long count, Timestamp timestamp)", "testcase": false, "constructor": false}, {"identifier": "addField", "parameters": "(String interval, Integer count, Calendar cal)", "modifiers": "private static", "return": "void", "signature": "void addField(String interval, Integer count, Calendar cal)", "full_signature": "private static void addField(String interval, Integer count, Calendar cal)", "class_method_signature": "FunctionMethods.addField(String interval, Integer count, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "timestampDiff", "parameters": "(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "modifiers": "public static", "return": "Long", "signature": "Long timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "full_signature": "public static Long timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "class_method_signature": "FunctionMethods.timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "testcase": false, "constructor": false}, {"identifier": "timestampDiff", "parameters": "(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj, boolean calendarBased)", "modifiers": "public static", "return": "Long", "signature": "Long timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj, boolean calendarBased)", "full_signature": "public static Long timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj, boolean calendarBased)", "class_method_signature": "FunctionMethods.timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj, boolean calendarBased)", "testcase": false, "constructor": false}, {"identifier": "timestampCreate", "parameters": "(java.sql.Date date, Time time)", "modifiers": "public static", "return": "Object", "signature": "Object timestampCreate(java.sql.Date date, Time time)", "full_signature": "public static Object timestampCreate(java.sql.Date date, Time time)", "class_method_signature": "FunctionMethods.timestampCreate(java.sql.Date date, Time time)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(String str)", "modifiers": "public static", "return": "Object", "signature": "Object length(String str)", "full_signature": "public static Object length(String str)", "class_method_signature": "FunctionMethods.length(String str)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "String", "signature": "String concat(String str1, String str2)", "full_signature": "public static String concat(String str1, String str2)", "class_method_signature": "FunctionMethods.concat(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "concat2", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "String", "signature": "String concat2(String str1, String str2)", "full_signature": "public static String concat2(String str1, String str2)", "class_method_signature": "FunctionMethods.concat2(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(CommandContext context, ClobType str1, ClobType str2)", "modifiers": "public static", "return": "ClobType", "signature": "ClobType concat(CommandContext context, ClobType str1, ClobType str2)", "full_signature": "public static ClobType concat(CommandContext context, ClobType str1, ClobType str2)", "class_method_signature": "FunctionMethods.concat(CommandContext context, ClobType str1, ClobType str2)", "testcase": false, "constructor": false}, {"identifier": "concat2", "parameters": "(CommandContext context, ClobType str1, ClobType str2)", "modifiers": "public static", "return": "ClobType", "signature": "ClobType concat2(CommandContext context, ClobType str1, ClobType str2)", "full_signature": "public static ClobType concat2(CommandContext context, ClobType str1, ClobType str2)", "class_method_signature": "FunctionMethods.concat2(CommandContext context, ClobType str1, ClobType str2)", "testcase": false, "constructor": false}, {"identifier": "substring", "parameters": "(String string, Integer startVal, Integer lengthVal)", "modifiers": "public static", "return": "Object", "signature": "Object substring(String string, Integer startVal, Integer lengthVal)", "full_signature": "public static Object substring(String string, Integer startVal, Integer lengthVal)", "class_method_signature": "FunctionMethods.substring(String string, Integer startVal, Integer lengthVal)", "testcase": false, "constructor": false}, {"identifier": "substring", "parameters": "(String string, Integer start)", "modifiers": "public static", "return": "Object", "signature": "Object substring(String string, Integer start)", "full_signature": "public static Object substring(String string, Integer start)", "class_method_signature": "FunctionMethods.substring(String string, Integer start)", "testcase": false, "constructor": false}, {"identifier": "left", "parameters": "(String string, Integer count)", "modifiers": "public static", "return": "Object", "signature": "Object left(String string, Integer count)", "full_signature": "public static Object left(String string, Integer count)", "class_method_signature": "FunctionMethods.left(String string, Integer count)", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "(String string, Integer count)", "modifiers": "public static", "return": "Object", "signature": "Object right(String string, Integer count)", "full_signature": "public static Object right(String string, Integer count)", "class_method_signature": "FunctionMethods.right(String string, Integer count)", "testcase": false, "constructor": false}, {"identifier": "lowerCase", "parameters": "(String str)", "modifiers": "public static", "return": "Object", "signature": "Object lowerCase(String str)", "full_signature": "public static Object lowerCase(String str)", "class_method_signature": "FunctionMethods.lowerCase(String str)", "testcase": false, "constructor": false}, {"identifier": "lowerCase", "parameters": "(ClobType str)", "modifiers": "public static", "return": "ClobType", "signature": "ClobType lowerCase(ClobType str)", "full_signature": "public static ClobType lowerCase(ClobType str)", "class_method_signature": "FunctionMethods.lowerCase(ClobType str)", "testcase": false, "constructor": false}, {"identifier": "upperCase", "parameters": "(String str)", "modifiers": "public static", "return": "Object", "signature": "Object upperCase(String str)", "full_signature": "public static Object upperCase(String str)", "class_method_signature": "FunctionMethods.upperCase(String str)", "testcase": false, "constructor": false}, {"identifier": "upperCase", "parameters": "(ClobType str)", "modifiers": "public static", "return": "ClobType", "signature": "ClobType upperCase(ClobType str)", "full_signature": "public static ClobType upperCase(ClobType str)", "class_method_signature": "FunctionMethods.upperCase(ClobType str)", "testcase": false, "constructor": false}, {"identifier": "locate", "parameters": "(String sub, String str)", "modifiers": "public static", "return": "Object", "signature": "Object locate(String sub, String str)", "full_signature": "public static Object locate(String sub, String str)", "class_method_signature": "FunctionMethods.locate(String sub, String str)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(String sub, String str)", "modifiers": "public static", "return": "Object", "signature": "Object endsWith(String sub, String str)", "full_signature": "public static Object endsWith(String sub, String str)", "class_method_signature": "FunctionMethods.endsWith(String sub, String str)", "testcase": false, "constructor": false}, {"identifier": "locate", "parameters": "(String sub, String str, Integer start)", "modifiers": "public static", "return": "Object", "signature": "Object locate(String sub, String str, Integer start)", "full_signature": "public static Object locate(String sub, String str, Integer start)", "class_method_signature": "FunctionMethods.locate(String sub, String str, Integer start)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String trimSpec, String trimChar, String string)", "modifiers": "public static", "return": "String", "signature": "String trim(String trimSpec, String trimChar, String string)", "full_signature": "public static String trim(String trimSpec, String trimChar, String string)", "class_method_signature": "FunctionMethods.trim(String trimSpec, String trimChar, String string)", "testcase": false, "constructor": false}, {"identifier": "leftTrim", "parameters": "(String string, char trimChar)", "modifiers": "public static", "return": "String", "signature": "String leftTrim(String string, char trimChar)", "full_signature": "public static String leftTrim(String string, char trimChar)", "class_method_signature": "FunctionMethods.leftTrim(String string, char trimChar)", "testcase": false, "constructor": false}, {"identifier": "leftTrim", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String leftTrim(String string)", "full_signature": "public static String leftTrim(String string)", "class_method_signature": "FunctionMethods.leftTrim(String string)", "testcase": false, "constructor": false}, {"identifier": "rightTrim", "parameters": "(String string, char trimChar)", "modifiers": "public static", "return": "String", "signature": "String rightTrim(String string, char trimChar)", "full_signature": "public static String rightTrim(String string, char trimChar)", "class_method_signature": "FunctionMethods.rightTrim(String string, char trimChar)", "testcase": false, "constructor": false}, {"identifier": "rightTrim", "parameters": "(String string, char trimChar, boolean newString)", "modifiers": "public static", "return": "String", "signature": "String rightTrim(String string, char trimChar, boolean newString)", "full_signature": "public static String rightTrim(String string, char trimChar, boolean newString)", "class_method_signature": "FunctionMethods.rightTrim(String string, char trimChar, boolean newString)", "testcase": false, "constructor": false}, {"identifier": "rightTrim", "parameters": "(String string)", "modifiers": "public static", "return": "Object", "signature": "Object rightTrim(String string)", "full_signature": "public static Object rightTrim(String string)", "class_method_signature": "FunctionMethods.rightTrim(String string)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String string, String subString, String replaceString)", "modifiers": "public static", "return": "Object", "signature": "Object replace(String string, String subString, String replaceString)", "full_signature": "public static Object replace(String string, String subString, String replaceString)", "class_method_signature": "FunctionMethods.replace(String string, String subString, String replaceString)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(String string1, Integer start, Integer length, String str2)", "modifiers": "public static", "return": "Object", "signature": "Object insert(String string1, Integer start, Integer length, String str2)", "full_signature": "public static Object insert(String string1, Integer start, Integer length, String str2)", "class_method_signature": "FunctionMethods.insert(String string1, Integer start, Integer length, String str2)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(String str, Integer count)", "modifiers": "public static", "return": "Object", "signature": "Object repeat(String str, Integer count)", "full_signature": "public static Object repeat(String str, Integer count)", "class_method_signature": "FunctionMethods.repeat(String str, Integer count)", "testcase": false, "constructor": false}, {"identifier": "ascii", "parameters": "(String ch)", "modifiers": "public static", "return": "Integer", "signature": "Integer ascii(String ch)", "full_signature": "public static Integer ascii(String ch)", "class_method_signature": "FunctionMethods.ascii(String ch)", "testcase": false, "constructor": false}, {"identifier": "ascii", "parameters": "(Character ch)", "modifiers": "public static", "return": "Integer", "signature": "Integer ascii(Character ch)", "full_signature": "public static Integer ascii(Character ch)", "class_method_signature": "FunctionMethods.ascii(Character ch)", "testcase": false, "constructor": false}, {"identifier": "chr", "parameters": "(int intValue)", "modifiers": "public static", "return": "Object", "signature": "Object chr(int intValue)", "full_signature": "public static Object chr(int intValue)", "class_method_signature": "FunctionMethods.chr(int intValue)", "testcase": false, "constructor": false}, {"identifier": "initCap", "parameters": "(String s)", "modifiers": "public static", "return": "Object", "signature": "Object initCap(String s)", "full_signature": "public static Object initCap(String s)", "class_method_signature": "FunctionMethods.initCap(String s)", "testcase": false, "constructor": false}, {"identifier": "lpad", "parameters": "(String inputString, Integer padLength, String padStr)", "modifiers": "public static", "return": "Object", "signature": "Object lpad(String inputString, Integer padLength, String padStr)", "full_signature": "public static Object lpad(String inputString, Integer padLength, String padStr)", "class_method_signature": "FunctionMethods.lpad(String inputString, Integer padLength, String padStr)", "testcase": false, "constructor": false}, {"identifier": "pad", "parameters": "(String str, Integer padLength, String padStr, boolean left)", "modifiers": "public static", "return": "Object", "signature": "Object pad(String str, Integer padLength, String padStr, boolean left)", "full_signature": "public static Object pad(String str, Integer padLength, String padStr, boolean left)", "class_method_signature": "FunctionMethods.pad(String str, Integer padLength, String padStr, boolean left)", "testcase": false, "constructor": false}, {"identifier": "lpad", "parameters": "(String inputString, Integer padLength)", "modifiers": "public static", "return": "Object", "signature": "Object lpad(String inputString, Integer padLength)", "full_signature": "public static Object lpad(String inputString, Integer padLength)", "class_method_signature": "FunctionMethods.lpad(String inputString, Integer padLength)", "testcase": false, "constructor": false}, {"identifier": "rpad", "parameters": "(String inputString, Integer padLength, String padStr)", "modifiers": "public static", "return": "Object", "signature": "Object rpad(String inputString, Integer padLength, String padStr)", "full_signature": "public static Object rpad(String inputString, Integer padLength, String padStr)", "class_method_signature": "FunctionMethods.rpad(String inputString, Integer padLength, String padStr)", "testcase": false, "constructor": false}, {"identifier": "rpad", "parameters": "(String inputString, Integer padLength)", "modifiers": "public static", "return": "Object", "signature": "Object rpad(String inputString, Integer padLength)", "full_signature": "public static Object rpad(String inputString, Integer padLength)", "class_method_signature": "FunctionMethods.rpad(String inputString, Integer padLength)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(String str, String in, String out)", "modifiers": "public static", "return": "Object", "signature": "Object translate(String str, String in, String out)", "full_signature": "public static Object translate(String str, String in, String out)", "class_method_signature": "FunctionMethods.translate(String str, String in, String out)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(CommandContext context, Object src, String type)", "modifiers": "public static", "return": "Object", "signature": "Object convert(CommandContext context, Object src, String type)", "full_signature": "public static Object convert(CommandContext context, Object src, String type)", "class_method_signature": "FunctionMethods.convert(CommandContext context, Object src, String type)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(Object codeTable, Object returnElement, Object keyElement, Object keyValue)", "modifiers": "public static", "return": "Object", "signature": "Object lookup(Object codeTable, Object returnElement, Object keyElement, Object keyValue)", "full_signature": "public static Object lookup(Object codeTable, Object returnElement, Object keyElement, Object keyValue)", "class_method_signature": "FunctionMethods.lookup(Object codeTable, Object returnElement, Object keyElement, Object keyValue)", "testcase": false, "constructor": false}, {"identifier": "ifnull", "parameters": "(Object value, Object ifNullValue)", "modifiers": "public static", "return": "Object", "signature": "Object ifnull(Object value, Object ifNullValue)", "full_signature": "public static Object ifnull(Object value, Object ifNullValue)", "class_method_signature": "FunctionMethods.ifnull(Object value, Object ifNullValue)", "testcase": false, "constructor": false}, {"identifier": "coalesce", "parameters": "(Object value, Object value1, Object... other)", "modifiers": "public static", "return": "Object", "signature": "Object coalesce(Object value, Object value1, Object... other)", "full_signature": "public static Object coalesce(Object value, Object value1, Object... other)", "class_method_signature": "FunctionMethods.coalesce(Object value, Object value1, Object... other)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(CommandContext context, Date date, String format)", "modifiers": "public static", "return": "String", "signature": "String format(CommandContext context, Date date, String format)", "full_signature": "public static String format(CommandContext context, Date date, String format)", "class_method_signature": "FunctionMethods.format(CommandContext context, Date date, String format)", "testcase": false, "constructor": false}, {"identifier": "parseDateHelper", "parameters": "(CommandContext context, String date, String format)", "modifiers": "private static", "return": "Date", "signature": "Date parseDateHelper(CommandContext context, String date, String format)", "full_signature": "private static Date parseDateHelper(CommandContext context, String date, String format)", "class_method_signature": "FunctionMethods.parseDateHelper(CommandContext context, String date, String format)", "testcase": false, "constructor": false}, {"identifier": "parseTimestamp", "parameters": "(CommandContext context, String timestamp, String format)", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp parseTimestamp(CommandContext context, String timestamp, String format)", "full_signature": "public static Timestamp parseTimestamp(CommandContext context, String timestamp, String format)", "class_method_signature": "FunctionMethods.parseTimestamp(CommandContext context, String timestamp, String format)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(CommandContext context, Number number, String format)", "modifiers": "public static", "return": "String", "signature": "String format(CommandContext context, Number number, String format)", "full_signature": "public static String format(CommandContext context, Number number, String format)", "class_method_signature": "FunctionMethods.format(CommandContext context, Number number, String format)", "testcase": false, "constructor": false}, {"identifier": "parseInteger", "parameters": "(CommandContext context, String number, String format)", "modifiers": "public static", "return": "Object", "signature": "Object parseInteger(CommandContext context, String number, String format)", "full_signature": "public static Object parseInteger(CommandContext context, String number, String format)", "class_method_signature": "FunctionMethods.parseInteger(CommandContext context, String number, String format)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(CommandContext context, String number, String format)", "modifiers": "public static", "return": "Object", "signature": "Object parseLong(CommandContext context, String number, String format)", "full_signature": "public static Object parseLong(CommandContext context, String number, String format)", "class_method_signature": "FunctionMethods.parseLong(CommandContext context, String number, String format)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(CommandContext context, String number, String format)", "modifiers": "public static", "return": "Object", "signature": "Object parseDouble(CommandContext context, String number, String format)", "full_signature": "public static Object parseDouble(CommandContext context, String number, String format)", "class_method_signature": "FunctionMethods.parseDouble(CommandContext context, String number, String format)", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "(CommandContext context, String number, String format)", "modifiers": "public static", "return": "Object", "signature": "Object parseFloat(CommandContext context, String number, String format)", "full_signature": "public static Object parseFloat(CommandContext context, String number, String format)", "class_method_signature": "FunctionMethods.parseFloat(CommandContext context, String number, String format)", "testcase": false, "constructor": false}, {"identifier": "parseBigInteger", "parameters": "(CommandContext context, String number, String format)", "modifiers": "public static", "return": "Object", "signature": "Object parseBigInteger(CommandContext context, String number, String format)", "full_signature": "public static Object parseBigInteger(CommandContext context, String number, String format)", "class_method_signature": "FunctionMethods.parseBigInteger(CommandContext context, String number, String format)", "testcase": false, "constructor": false}, {"identifier": "parseBigDecimal", "parameters": "(CommandContext context, String number, String format)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal parseBigDecimal(CommandContext context, String number, String format)", "full_signature": "public static BigDecimal parseBigDecimal(CommandContext context, String number, String format)", "class_method_signature": "FunctionMethods.parseBigDecimal(CommandContext context, String number, String format)", "testcase": false, "constructor": false}, {"identifier": "acos", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object acos(Number number)", "full_signature": "public static Object acos(Number number)", "class_method_signature": "FunctionMethods.acos(Number number)", "testcase": false, "constructor": false}, {"identifier": "asin", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object asin(Number number)", "full_signature": "public static Object asin(Number number)", "class_method_signature": "FunctionMethods.asin(Number number)", "testcase": false, "constructor": false}, {"identifier": "atan", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object atan(Number number)", "full_signature": "public static Object atan(Number number)", "class_method_signature": "FunctionMethods.atan(Number number)", "testcase": false, "constructor": false}, {"identifier": "atan2", "parameters": "(Number number1, Number number2)", "modifiers": "public static", "return": "Object", "signature": "Object atan2(Number number1, Number number2)", "full_signature": "public static Object atan2(Number number1, Number number2)", "class_method_signature": "FunctionMethods.atan2(Number number1, Number number2)", "testcase": false, "constructor": false}, {"identifier": "cos", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object cos(Number number)", "full_signature": "public static Object cos(Number number)", "class_method_signature": "FunctionMethods.cos(Number number)", "testcase": false, "constructor": false}, {"identifier": "cot", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object cot(Number number)", "full_signature": "public static Object cot(Number number)", "class_method_signature": "FunctionMethods.cot(Number number)", "testcase": false, "constructor": false}, {"identifier": "degrees", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object degrees(Number number)", "full_signature": "public static Object degrees(Number number)", "class_method_signature": "FunctionMethods.degrees(Number number)", "testcase": false, "constructor": false}, {"identifier": "pi", "parameters": "()", "modifiers": "public static", "return": "Object", "signature": "Object pi()", "full_signature": "public static Object pi()", "class_method_signature": "FunctionMethods.pi()", "testcase": false, "constructor": false}, {"identifier": "radians", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object radians(Number number)", "full_signature": "public static Object radians(Number number)", "class_method_signature": "FunctionMethods.radians(Number number)", "testcase": false, "constructor": false}, {"identifier": "sin", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object sin(Number number)", "full_signature": "public static Object sin(Number number)", "class_method_signature": "FunctionMethods.sin(Number number)", "testcase": false, "constructor": false}, {"identifier": "tan", "parameters": "(Number number)", "modifiers": "public static", "return": "Object", "signature": "Object tan(Number number)", "full_signature": "public static Object tan(Number number)", "class_method_signature": "FunctionMethods.tan(Number number)", "testcase": false, "constructor": false}, {"identifier": "bitand", "parameters": "(int x, int y)", "modifiers": "public static", "return": "Object", "signature": "Object bitand(int x, int y)", "full_signature": "public static Object bitand(int x, int y)", "class_method_signature": "FunctionMethods.bitand(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "bitor", "parameters": "(int x, int y)", "modifiers": "public static", "return": "Object", "signature": "Object bitor(int x, int y)", "full_signature": "public static Object bitor(int x, int y)", "class_method_signature": "FunctionMethods.bitor(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "bitxor", "parameters": "(int x, int y)", "modifiers": "public static", "return": "Object", "signature": "Object bitxor(int x, int y)", "full_signature": "public static Object bitxor(int x, int y)", "class_method_signature": "FunctionMethods.bitxor(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "bitnot", "parameters": "(int x)", "modifiers": "public static", "return": "int", "signature": "int bitnot(int x)", "full_signature": "public static int bitnot(int x)", "class_method_signature": "FunctionMethods.bitnot(int x)", "testcase": false, "constructor": false}, {"identifier": "user", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object user(CommandContext context)", "full_signature": "public static Object user(CommandContext context)", "class_method_signature": "FunctionMethods.user(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "user", "parameters": "(CommandContext context, boolean includeSecurityDomain)", "modifiers": "public static", "return": "Object", "signature": "Object user(CommandContext context, boolean includeSecurityDomain)", "full_signature": "public static Object user(CommandContext context, boolean includeSecurityDomain)", "class_method_signature": "FunctionMethods.user(CommandContext context, boolean includeSecurityDomain)", "testcase": false, "constructor": false}, {"identifier": "escapeName", "parameters": "(String name)", "modifiers": "static", "return": "String", "signature": "String escapeName(String name)", "full_signature": "static String escapeName(String name)", "class_method_signature": "FunctionMethods.escapeName(String name)", "testcase": false, "constructor": false}, {"identifier": "current_database", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object current_database(CommandContext context)", "full_signature": "public static Object current_database(CommandContext context)", "class_method_signature": "FunctionMethods.current_database(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "commandPayload", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object commandPayload(CommandContext context)", "full_signature": "public static Object commandPayload(CommandContext context)", "class_method_signature": "FunctionMethods.commandPayload(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "commandPayload", "parameters": "(CommandContext context, String param)", "modifiers": "public static", "return": "Object", "signature": "Object commandPayload(CommandContext context, String param)", "full_signature": "public static Object commandPayload(CommandContext context, String param)", "class_method_signature": "FunctionMethods.commandPayload(CommandContext context, String param)", "testcase": false, "constructor": false}, {"identifier": "env", "parameters": "(String propertyName)", "modifiers": "public static", "return": "Object", "signature": "Object env(String propertyName)", "full_signature": "public static Object env(String propertyName)", "class_method_signature": "FunctionMethods.env(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "sys_prop", "parameters": "(String propertyName)", "modifiers": "public static", "return": "Object", "signature": "Object sys_prop(String propertyName)", "full_signature": "public static Object sys_prop(String propertyName)", "class_method_signature": "FunctionMethods.sys_prop(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "env_var", "parameters": "(String propertyName)", "modifiers": "public static", "return": "Object", "signature": "Object env_var(String propertyName)", "full_signature": "public static Object env_var(String propertyName)", "class_method_signature": "FunctionMethods.env_var(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "session_id", "parameters": "(CommandContext context)", "modifiers": "public static", "return": "Object", "signature": "Object session_id(CommandContext context)", "full_signature": "public static Object session_id(CommandContext context)", "class_method_signature": "FunctionMethods.session_id(CommandContext context)", "testcase": false, "constructor": false}, {"identifier": "node_id", "parameters": "()", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.MISCELLANEOUS, pushdown=PushDown.CANNOT_PUSHDOWN) public static", "return": "String", "signature": "String node_id()", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.MISCELLANEOUS, pushdown=PushDown.CANNOT_PUSHDOWN) public static String node_id()", "class_method_signature": "FunctionMethods.node_id()", "testcase": false, "constructor": false}, {"identifier": "modifyTimeZone", "parameters": "(Timestamp value, String originalTimezoneString, String targetTimezoneString)", "modifiers": "public static", "return": "Object", "signature": "Object modifyTimeZone(Timestamp value, String originalTimezoneString, String targetTimezoneString)", "full_signature": "public static Object modifyTimeZone(Timestamp value, String originalTimezoneString, String targetTimezoneString)", "class_method_signature": "FunctionMethods.modifyTimeZone(Timestamp value, String originalTimezoneString, String targetTimezoneString)", "testcase": false, "constructor": false}, {"identifier": "modifyTimeZone", "parameters": "(CommandContext context, Timestamp value, String targetTimezoneString)", "modifiers": "public static", "return": "Object", "signature": "Object modifyTimeZone(CommandContext context, Timestamp value, String targetTimezoneString)", "full_signature": "public static Object modifyTimeZone(CommandContext context, Timestamp value, String targetTimezoneString)", "class_method_signature": "FunctionMethods.modifyTimeZone(CommandContext context, Timestamp value, String targetTimezoneString)", "testcase": false, "constructor": false}, {"identifier": "toChars", "parameters": "(BlobType value, String encoding)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_chars\", nullOnNull=true) public static", "return": "ClobType", "signature": "ClobType toChars(BlobType value, String encoding)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_chars\", nullOnNull=true) public static ClobType toChars(BlobType value, String encoding)", "class_method_signature": "FunctionMethods.toChars(BlobType value, String encoding)", "testcase": false, "constructor": false}, {"identifier": "toChars", "parameters": "(BlobType value, String encoding, boolean wellFormed)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_chars\") public static", "return": "ClobType", "signature": "ClobType toChars(BlobType value, String encoding, boolean wellFormed)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_chars\") public static ClobType toChars(BlobType value, String encoding, boolean wellFormed)", "class_method_signature": "FunctionMethods.toChars(BlobType value, String encoding, boolean wellFormed)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(ClobType value, String encoding)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_bytes\", nullOnNull=true) public static", "return": "BlobType", "signature": "BlobType toBytes(ClobType value, String encoding)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_bytes\", nullOnNull=true) public static BlobType toBytes(ClobType value, String encoding)", "class_method_signature": "FunctionMethods.toBytes(ClobType value, String encoding)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(ClobType value, String encoding, boolean wellFormed)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_bytes\") public static", "return": "BlobType", "signature": "BlobType toBytes(ClobType value, String encoding, boolean wellFormed)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.CONVERSION, name=\"to_bytes\") public static BlobType toBytes(ClobType value, String encoding, boolean wellFormed)", "class_method_signature": "FunctionMethods.toBytes(ClobType value, String encoding, boolean wellFormed)", "testcase": false, "constructor": false}, {"identifier": "unescape", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String unescape(String string)", "full_signature": "public static String unescape(String string)", "class_method_signature": "FunctionMethods.unescape(String string)", "testcase": false, "constructor": false}, {"identifier": "uuid", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String uuid()", "full_signature": "public static String uuid()", "class_method_signature": "FunctionMethods.uuid()", "testcase": false, "constructor": false}, {"identifier": "array_get", "parameters": "(Object array, int index)", "modifiers": "public static", "return": "Object", "signature": "Object array_get(Object array, int index)", "full_signature": "public static Object array_get(Object array, int index)", "class_method_signature": "FunctionMethods.array_get(Object array, int index)", "testcase": false, "constructor": false}, {"identifier": "array_length", "parameters": "(Object array)", "modifiers": "public static", "return": "int", "signature": "int array_length(Object array)", "full_signature": "public static int array_length(Object array)", "class_method_signature": "FunctionMethods.array_length(Object array)", "testcase": false, "constructor": false}, {"identifier": "mvstatus", "parameters": "(CommandContext context, String schemaName, String viewName)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SYSTEM, determinism = Determinism.COMMAND_DETERMINISTIC, pushdown=PushDown.CANNOT_PUSHDOWN) public static", "return": "int", "signature": "int mvstatus(CommandContext context, String schemaName, String viewName)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SYSTEM, determinism = Determinism.COMMAND_DETERMINISTIC, pushdown=PushDown.CANNOT_PUSHDOWN) public static int mvstatus(CommandContext context, String schemaName, String viewName)", "class_method_signature": "FunctionMethods.mvstatus(CommandContext context, String schemaName, String viewName)", "testcase": false, "constructor": false}, {"identifier": "tokenize", "parameters": "(String str, char delimiter)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SYSTEM) public static", "return": "String[]", "signature": "String[] tokenize(String str, char delimiter)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SYSTEM) public static String[] tokenize(String str, char delimiter)", "class_method_signature": "FunctionMethods.tokenize(String str, char delimiter)", "testcase": false, "constructor": false}, {"identifier": "regexpReplace", "parameters": "(CommandContext context,\n                                       String source,\n                                       String regex,\n                                       String replacement)", "modifiers": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static", "return": "String", "signature": "String regexpReplace(CommandContext context,\n                                       String source,\n                                       String regex,\n                                       String replacement)", "full_signature": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static String regexpReplace(CommandContext context,\n                                       String source,\n                                       String regex,\n                                       String replacement)", "class_method_signature": "FunctionMethods.regexpReplace(CommandContext context,\n                                       String source,\n                                       String regex,\n                                       String replacement)", "testcase": false, "constructor": false}, {"identifier": "regexpReplace", "parameters": "(CommandContext context,\n                                    ClobType source,\n                                    String regex,\n                                    String replacement)", "modifiers": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static", "return": "ClobType", "signature": "ClobType regexpReplace(CommandContext context,\n                                    ClobType source,\n                                    String regex,\n                                    String replacement)", "full_signature": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static ClobType regexpReplace(CommandContext context,\n                                    ClobType source,\n                                    String regex,\n                                    String replacement)", "class_method_signature": "FunctionMethods.regexpReplace(CommandContext context,\n                                    ClobType source,\n                                    String regex,\n                                    String replacement)", "testcase": false, "constructor": false}, {"identifier": "regexpReplace", "parameters": "(CommandContext context,\n                                String source,\n                                String regex,\n                                String replacement,\n                                String flags)", "modifiers": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static", "return": "String", "signature": "String regexpReplace(CommandContext context,\n                                String source,\n                                String regex,\n                                String replacement,\n                                String flags)", "full_signature": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static String regexpReplace(CommandContext context,\n                                String source,\n                                String regex,\n                                String replacement,\n                                String flags)", "class_method_signature": "FunctionMethods.regexpReplace(CommandContext context,\n                                String source,\n                                String regex,\n                                String replacement,\n                                String flags)", "testcase": false, "constructor": false}, {"identifier": "regexpReplace", "parameters": "(CommandContext context,\n                                ClobType source,\n                                String regex,\n                                String replacement,\n                                String flags)", "modifiers": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static", "return": "ClobType", "signature": "ClobType regexpReplace(CommandContext context,\n                                ClobType source,\n                                String regex,\n                                String replacement,\n                                String flags)", "full_signature": "@TeiidFunction(name=SourceSystemFunctions.REGEXP_REPLACE, category=FunctionCategoryConstants.STRING, nullOnNull=true) public static ClobType regexpReplace(CommandContext context,\n                                ClobType source,\n                                String regex,\n                                String replacement,\n                                String flags)", "class_method_signature": "FunctionMethods.regexpReplace(CommandContext context,\n                                ClobType source,\n                                String regex,\n                                String replacement,\n                                String flags)", "testcase": false, "constructor": false}, {"identifier": "regexpReplace", "parameters": "(CommandContext context,\n                                       CharSequence source,\n                                       String regex,\n                                       String replacement,\n                                       String flags)", "modifiers": "public static", "return": "String", "signature": "String regexpReplace(CommandContext context,\n                                       CharSequence source,\n                                       String regex,\n                                       String replacement,\n                                       String flags)", "full_signature": "public static String regexpReplace(CommandContext context,\n                                       CharSequence source,\n                                       String regex,\n                                       String replacement,\n                                       String flags)", "class_method_signature": "FunctionMethods.regexpReplace(CommandContext context,\n                                       CharSequence source,\n                                       String regex,\n                                       String replacement,\n                                       String flags)", "testcase": false, "constructor": false}, {"identifier": "md5", "parameters": "(String plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType md5(String plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType md5(String plainText)", "class_method_signature": "FunctionMethods.md5(String plainText)", "testcase": false, "constructor": false}, {"identifier": "sha1", "parameters": "(String plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType sha1(String plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType sha1(String plainText)", "class_method_signature": "FunctionMethods.sha1(String plainText)", "testcase": false, "constructor": false}, {"identifier": "sha2_256", "parameters": "(String plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType sha2_256(String plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType sha2_256(String plainText)", "class_method_signature": "FunctionMethods.sha2_256(String plainText)", "testcase": false, "constructor": false}, {"identifier": "sha2_512", "parameters": "(String plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType sha2_512(String plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType sha2_512(String plainText)", "class_method_signature": "FunctionMethods.sha2_512(String plainText)", "testcase": false, "constructor": false}, {"identifier": "md5", "parameters": "(BinaryType plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType md5(BinaryType plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType md5(BinaryType plainText)", "class_method_signature": "FunctionMethods.md5(BinaryType plainText)", "testcase": false, "constructor": false}, {"identifier": "sha1", "parameters": "(BinaryType plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType sha1(BinaryType plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType sha1(BinaryType plainText)", "class_method_signature": "FunctionMethods.sha1(BinaryType plainText)", "testcase": false, "constructor": false}, {"identifier": "sha2_256", "parameters": "(BinaryType plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType sha2_256(BinaryType plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType sha2_256(BinaryType plainText)", "class_method_signature": "FunctionMethods.sha2_256(BinaryType plainText)", "testcase": false, "constructor": false}, {"identifier": "sha2_512", "parameters": "(BinaryType plainText)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType sha2_512(BinaryType plainText)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType sha2_512(BinaryType plainText)", "class_method_signature": "FunctionMethods.sha2_512(BinaryType plainText)", "testcase": false, "constructor": false}, {"identifier": "digest", "parameters": "(byte[] plainText, String algorithm)", "modifiers": "public static", "return": "BinaryType", "signature": "BinaryType digest(byte[] plainText, String algorithm)", "full_signature": "public static BinaryType digest(byte[] plainText, String algorithm)", "class_method_signature": "FunctionMethods.digest(byte[] plainText, String algorithm)", "testcase": false, "constructor": false}, {"identifier": "aes_encrypt", "parameters": "(BinaryType dataBytes, BinaryType keyBytes)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType aes_encrypt(BinaryType dataBytes, BinaryType keyBytes)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType aes_encrypt(BinaryType dataBytes, BinaryType keyBytes)", "class_method_signature": "FunctionMethods.aes_encrypt(BinaryType dataBytes, BinaryType keyBytes)", "testcase": false, "constructor": false}, {"identifier": "aes_decrypt", "parameters": "(BinaryType dataBytes, BinaryType keyBytes)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static", "return": "BinaryType", "signature": "BinaryType aes_decrypt(BinaryType dataBytes, BinaryType keyBytes)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.SECURITY, nullOnNull=true) public static BinaryType aes_decrypt(BinaryType dataBytes, BinaryType keyBytes)", "class_method_signature": "FunctionMethods.aes_decrypt(BinaryType dataBytes, BinaryType keyBytes)", "testcase": false, "constructor": false}, {"identifier": "padkey", "parameters": "(byte[] bytes)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] padkey(byte[] bytes)", "full_signature": "private static byte[] padkey(byte[] bytes)", "class_method_signature": "FunctionMethods.padkey(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "current_time", "parameters": "(CommandContext context, int precision)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static", "return": "Time", "signature": "Time current_time(CommandContext context, int precision)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static Time current_time(CommandContext context, int precision)", "class_method_signature": "FunctionMethods.current_time(CommandContext context, int precision)", "testcase": false, "constructor": false}, {"identifier": "current_timestamp", "parameters": "(CommandContext context, int precision)", "modifiers": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static", "return": "Timestamp", "signature": "Timestamp current_timestamp(CommandContext context, int precision)", "full_signature": "@TeiidFunction(category=FunctionCategoryConstants.DATETIME, pushdown=PushDown.CAN_PUSHDOWN) public static Timestamp current_timestamp(CommandContext context, int precision)", "class_method_signature": "FunctionMethods.current_timestamp(CommandContext context, int precision)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/org/teiid/query/function/FunctionMethods.java"}, "focal_method": {"identifier": "timestampDiff", "parameters": "(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "modifiers": "public static", "return": "Long", "body": "public static Long timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj) throws FunctionExecutionException  {\n        return timestampDiff(intervalType, ts1Obj, ts2Obj, CALENDAR_TIMESTAMPDIFF);\n    }", "signature": "Long timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "full_signature": "public static Long timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "class_method_signature": "FunctionMethods.timestampDiff(String intervalType, Timestamp ts1Obj, Timestamp ts2Obj)", "testcase": false, "constructor": false, "invocations": ["timestampDiff"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}