{"test_class": {"identifier": "TestCouchbaseMetadataProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String KEYSPACE = \"test\";", "modifier": "static final", "type": "String", "declarator": "KEYSPACE = \"test\"", "var_name": "KEYSPACE"}, {"original_string": "static final String KEYSPACE_SOURCE = \"`test`\";", "modifier": "static final", "type": "String", "declarator": "KEYSPACE_SOURCE = \"`test`\"", "var_name": "KEYSPACE_SOURCE"}, {"original_string": "private static final boolean PRINT_TO_CONSOLE = false;", "modifier": "private static final", "type": "boolean", "declarator": "PRINT_TO_CONSOLE = false", "var_name": "PRINT_TO_CONSOLE"}, {"original_string": "private static final boolean REPLACE_EXPECTED = false;", "modifier": "private static final", "type": "boolean", "declarator": "REPLACE_EXPECTED = false", "var_name": "REPLACE_EXPECTED"}], "file": "connectors/couchbase/translator-couchbase/src/test/java/org/teiid/translator/couchbase/TestCouchbaseMetadataProcessor.java"}, "test_case": {"identifier": "testProcedures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcedures() throws Exception {\n\n        CouchbaseMetadataProcessor metadataProcessor = new CouchbaseMetadataProcessor();\n        MetadataFactory mf = new MetadataFactory(\"vdb\", 1, \"couchbase\", SystemMetadata.getInstance().getRuntimeTypeMap(), new Properties(), null);\n        metadataProcessor.addProcedures(mf, null);\n        helpTest(\"procedures.expected\", mf);\n    }", "signature": "void testProcedures()", "full_signature": "@Test public void testProcedures()", "class_method_signature": "TestCouchbaseMetadataProcessor.testProcedures()", "testcase": true, "constructor": false, "invocations": ["getRuntimeTypeMap", "getInstance", "addProcedures", "helpTest"]}, "focal_class": {"identifier": "CouchbaseMetadataProcessor", "superclass": "", "interfaces": "implements MetadataProcessor<CouchbaseConnection>", "fields": [{"original_string": "@ExtensionMetadataProperty(applicable = Table.class, datatype = Boolean.class, display = \"Is Array Table\", description = \"Declare whether the table is array table\")\n    public static final String IS_ARRAY_TABLE = MetadataFactory.COUCHBASE_PREFIX + \"ISARRAYTABLE\";", "modifier": "@ExtensionMetadataProperty(applicable = Table.class, datatype = Boolean.class, display = \"Is Array Table\", description = \"Declare whether the table is array table\")\n    public static final", "type": "String", "declarator": "IS_ARRAY_TABLE = MetadataFactory.COUCHBASE_PREFIX + \"ISARRAYTABLE\"", "var_name": "IS_ARRAY_TABLE"}, {"original_string": "@ExtensionMetadataProperty(applicable = Table.class, datatype = String.class, display = \"Named Type Pair\", description = \"Declare the name of typed key/value pair\")\n    public static final String NAMED_TYPE_PAIR = MetadataFactory.COUCHBASE_PREFIX + \"NAMEDTYPEPAIR\";", "modifier": "@ExtensionMetadataProperty(applicable = Table.class, datatype = String.class, display = \"Named Type Pair\", description = \"Declare the name of typed key/value pair\")\n    public static final", "type": "String", "declarator": "NAMED_TYPE_PAIR = MetadataFactory.COUCHBASE_PREFIX + \"NAMEDTYPEPAIR\"", "var_name": "NAMED_TYPE_PAIR"}, {"original_string": "private Integer sampleSize;", "modifier": "private", "type": "Integer", "declarator": "sampleSize", "var_name": "sampleSize"}, {"original_string": "private String typeNameList;", "modifier": "private", "type": "String", "declarator": "typeNameList", "var_name": "typeNameList"}, {"original_string": "private String sampleKeyspaces = ALL_COLS;", "modifier": "private", "type": "String", "declarator": "sampleKeyspaces = ALL_COLS", "var_name": "sampleKeyspaces"}, {"original_string": "private Map<String, List<String>> typeNameMap;", "modifier": "private", "type": "Map<String, List<String>>", "declarator": "typeNameMap", "var_name": "typeNameMap"}, {"original_string": "private boolean useDouble;", "modifier": "private", "type": "boolean", "declarator": "useDouble", "var_name": "useDouble"}], "methods": [{"identifier": "process", "parameters": "(MetadataFactory mf, CouchbaseConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void process(MetadataFactory mf, CouchbaseConnection conn)", "full_signature": "@Override public void process(MetadataFactory mf, CouchbaseConnection conn)", "class_method_signature": "CouchbaseMetadataProcessor.process(MetadataFactory mf, CouchbaseConnection conn)", "testcase": false, "constructor": false}, {"identifier": "loadKeyspaces", "parameters": "(CouchbaseConnection conn)", "modifiers": "private", "return": "List<String>", "signature": "List<String> loadKeyspaces(CouchbaseConnection conn)", "full_signature": "private List<String> loadKeyspaces(CouchbaseConnection conn)", "class_method_signature": "CouchbaseMetadataProcessor.loadKeyspaces(CouchbaseConnection conn)", "testcase": false, "constructor": false}, {"identifier": "addTable", "parameters": "(MetadataFactory mf, CouchbaseConnection conn, String namespace, String keyspace)", "modifiers": "private", "return": "void", "signature": "void addTable(MetadataFactory mf, CouchbaseConnection conn, String namespace, String keyspace)", "full_signature": "private void addTable(MetadataFactory mf, CouchbaseConnection conn, String namespace, String keyspace)", "class_method_signature": "CouchbaseMetadataProcessor.addTable(MetadataFactory mf, CouchbaseConnection conn, String namespace, String keyspace)", "testcase": false, "constructor": false}, {"identifier": "scanRow", "parameters": "(String key, String keyInSource, JsonValue value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "modifiers": "protected", "return": "void", "signature": "void scanRow(String key, String keyInSource, JsonValue value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "full_signature": "protected void scanRow(String key, String keyInSource, JsonValue value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "class_method_signature": "CouchbaseMetadataProcessor.scanRow(String key, String keyInSource, JsonValue value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "testcase": false, "constructor": false}, {"identifier": "scanObjectRow", "parameters": "(String key, String keyInSource, JsonObject value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "modifiers": "private", "return": "void", "signature": "void scanObjectRow(String key, String keyInSource, JsonObject value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "full_signature": "private void scanObjectRow(String key, String keyInSource, JsonObject value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "class_method_signature": "CouchbaseMetadataProcessor.scanObjectRow(String key, String keyInSource, JsonObject value, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "testcase": false, "constructor": false}, {"identifier": "scanArrayRow", "parameters": "(String keyspace, String keyInSource, JsonArray array, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "modifiers": "private", "return": "void", "signature": "void scanArrayRow(String keyspace, String keyInSource, JsonArray array, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "full_signature": "private void scanArrayRow(String keyspace, String keyInSource, JsonArray array, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "class_method_signature": "CouchbaseMetadataProcessor.scanArrayRow(String keyspace, String keyInSource, JsonArray array, MetadataFactory mf, Table table, String referenceTableName, boolean isNestedType, Dimension dimension)", "testcase": false, "constructor": false}, {"identifier": "addTable", "parameters": "(String tableName, String nameInSource, boolean updatable, String referenceTableName, Dimension dimension, MetadataFactory mf)", "modifiers": "private", "return": "Table", "signature": "Table addTable(String tableName, String nameInSource, boolean updatable, String referenceTableName, Dimension dimension, MetadataFactory mf)", "full_signature": "private Table addTable(String tableName, String nameInSource, boolean updatable, String referenceTableName, Dimension dimension, MetadataFactory mf)", "class_method_signature": "CouchbaseMetadataProcessor.addTable(String tableName, String nameInSource, boolean updatable, String referenceTableName, Dimension dimension, MetadataFactory mf)", "testcase": false, "constructor": false}, {"identifier": "addColumn", "parameters": "(String name, String type, Object columnValue, boolean updatable, String nameInSource, Table table, MetadataFactory mf)", "modifiers": "private", "return": "void", "signature": "void addColumn(String name, String type, Object columnValue, boolean updatable, String nameInSource, Table table, MetadataFactory mf)", "full_signature": "private void addColumn(String name, String type, Object columnValue, boolean updatable, String nameInSource, Table table, MetadataFactory mf)", "class_method_signature": "CouchbaseMetadataProcessor.addColumn(String name, String type, Object columnValue, boolean updatable, String nameInSource, Table table, MetadataFactory mf)", "testcase": false, "constructor": false}, {"identifier": "isObjectJsonType", "parameters": "(Object jsonValue)", "modifiers": "private", "return": "boolean", "signature": "boolean isObjectJsonType(Object jsonValue)", "full_signature": "private boolean isObjectJsonType(Object jsonValue)", "class_method_signature": "CouchbaseMetadataProcessor.isObjectJsonType(Object jsonValue)", "testcase": false, "constructor": false}, {"identifier": "isArrayJsonType", "parameters": "(Object jsonValue)", "modifiers": "private", "return": "boolean", "signature": "boolean isArrayJsonType(Object jsonValue)", "full_signature": "private boolean isArrayJsonType(Object jsonValue)", "class_method_signature": "CouchbaseMetadataProcessor.isArrayJsonType(Object jsonValue)", "testcase": false, "constructor": false}, {"identifier": "repleaceTypedName", "parameters": "(String name, String path)", "modifiers": "private", "return": "String", "signature": "String repleaceTypedName(String name, String path)", "full_signature": "private String repleaceTypedName(String name, String path)", "class_method_signature": "CouchbaseMetadataProcessor.repleaceTypedName(String name, String path)", "testcase": false, "constructor": false}, {"identifier": "buildArrayTableIdxName", "parameters": "(String nameInSource, int dimension)", "modifiers": "private", "return": "String", "signature": "String buildArrayTableIdxName(String nameInSource, int dimension)", "full_signature": "private String buildArrayTableIdxName(String nameInSource, int dimension)", "class_method_signature": "CouchbaseMetadataProcessor.buildArrayTableIdxName(String nameInSource, int dimension)", "testcase": false, "constructor": false}, {"identifier": "buildNamedTypePair", "parameters": "(String columnIdentifierName, String typedValue)", "modifiers": "private", "return": "String", "signature": "String buildNamedTypePair(String columnIdentifierName, String typedValue)", "full_signature": "private String buildNamedTypePair(String columnIdentifierName, String typedValue)", "class_method_signature": "CouchbaseMetadataProcessor.buildNamedTypePair(String columnIdentifierName, String typedValue)", "testcase": false, "constructor": false}, {"identifier": "getTypeName", "parameters": "(String keyspace)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getTypeName(String keyspace)", "full_signature": "private List<String> getTypeName(String keyspace)", "class_method_signature": "CouchbaseMetadataProcessor.getTypeName(String keyspace)", "testcase": false, "constructor": false}, {"identifier": "addProcedures", "parameters": "(MetadataFactory metadataFactory, CouchbaseConnection connection)", "modifiers": "protected", "return": "void", "signature": "void addProcedures(MetadataFactory metadataFactory, CouchbaseConnection connection)", "full_signature": "protected void addProcedures(MetadataFactory metadataFactory, CouchbaseConnection connection)", "class_method_signature": "CouchbaseMetadataProcessor.addProcedures(MetadataFactory metadataFactory, CouchbaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "getDataType", "parameters": "(Object value)", "modifiers": "private", "return": "String", "signature": "String getDataType(Object value)", "full_signature": "private String getDataType(Object value)", "class_method_signature": "CouchbaseMetadataProcessor.getDataType(Object value)", "testcase": false, "constructor": false}, {"identifier": "buildN1QLNamespaces", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildN1QLNamespaces()", "full_signature": "private String buildN1QLNamespaces()", "class_method_signature": "CouchbaseMetadataProcessor.buildN1QLNamespaces()", "testcase": false, "constructor": false}, {"identifier": "buildN1QLKeyspaces", "parameters": "(String namespace)", "modifiers": "private", "return": "String", "signature": "String buildN1QLKeyspaces(String namespace)", "full_signature": "private String buildN1QLKeyspaces(String namespace)", "class_method_signature": "CouchbaseMetadataProcessor.buildN1QLKeyspaces(String namespace)", "testcase": false, "constructor": false}, {"identifier": "buildN1QLTypeQuery", "parameters": "(List<String> typeNameList, String namespace, String keyspace)", "modifiers": "private", "return": "String", "signature": "String buildN1QLTypeQuery(List<String> typeNameList, String namespace, String keyspace)", "full_signature": "private String buildN1QLTypeQuery(List<String> typeNameList, String namespace, String keyspace)", "class_method_signature": "CouchbaseMetadataProcessor.buildN1QLTypeQuery(List<String> typeNameList, String namespace, String keyspace)", "testcase": false, "constructor": false}, {"identifier": "buildN1QLQuery", "parameters": "(String columnIdentifierName, String typedValue, String namespace, String keyspace, int sampleSize, boolean hasTypeIdentifier)", "modifiers": "private", "return": "String", "signature": "String buildN1QLQuery(String columnIdentifierName, String typedValue, String namespace, String keyspace, int sampleSize, boolean hasTypeIdentifier)", "full_signature": "private String buildN1QLQuery(String columnIdentifierName, String typedValue, String namespace, String keyspace, int sampleSize, boolean hasTypeIdentifier)", "class_method_signature": "CouchbaseMetadataProcessor.buildN1QLQuery(String columnIdentifierName, String typedValue, String namespace, String keyspace, int sampleSize, boolean hasTypeIdentifier)", "testcase": false, "constructor": false}, {"identifier": "buildN1QLFrom", "parameters": "(String namespace, String keyspace)", "modifiers": "private", "return": "String", "signature": "String buildN1QLFrom(String namespace, String keyspace)", "full_signature": "private String buildN1QLFrom(String namespace, String keyspace)", "class_method_signature": "CouchbaseMetadataProcessor.buildN1QLFrom(String namespace, String keyspace)", "testcase": false, "constructor": false}, {"identifier": "trimWave", "parameters": "(String value)", "modifiers": "static", "return": "String", "signature": "String trimWave(String value)", "full_signature": "static String trimWave(String value)", "class_method_signature": "CouchbaseMetadataProcessor.trimWave(String value)", "testcase": false, "constructor": false}, {"identifier": "nameInSource", "parameters": "(String path)", "modifiers": "static", "return": "String", "signature": "String nameInSource(String path)", "full_signature": "static String nameInSource(String path)", "class_method_signature": "CouchbaseMetadataProcessor.nameInSource(String path)", "testcase": false, "constructor": false}, {"identifier": "getSampleSize", "parameters": "()", "modifiers": "@TranslatorProperty(display = \"SampleSize\", category = PropertyType.IMPORT, description = \"Maximum number of documents per keyspace that should be map\") //$NON-NLS-1$ //$NON-NLS-2$ public", "return": "int", "signature": "int getSampleSize()", "full_signature": "@TranslatorProperty(display = \"SampleSize\", category = PropertyType.IMPORT, description = \"Maximum number of documents per keyspace that should be map\") //$NON-NLS-1$ //$NON-NLS-2$ public int getSampleSize()", "class_method_signature": "CouchbaseMetadataProcessor.getSampleSize()", "testcase": false, "constructor": false}, {"identifier": "setSampleSize", "parameters": "(int sampleSize)", "modifiers": "public", "return": "void", "signature": "void setSampleSize(int sampleSize)", "full_signature": "public void setSampleSize(int sampleSize)", "class_method_signature": "CouchbaseMetadataProcessor.setSampleSize(int sampleSize)", "testcase": false, "constructor": false}, {"identifier": "getTypeNameList", "parameters": "()", "modifiers": "@TranslatorProperty(display = \"TypeNameList\", category = PropertyType.IMPORT, description = \"A comma-separated list of the attributes that the buckets use to specify document types. Each list item must be a bucket name surrounded by back quotes (`), a colon (:), and an attribute name surrounded by back quotes (`).\") //$NON-NLS-1$ //$NON-NLS-2$ public", "return": "String", "signature": "String getTypeNameList()", "full_signature": "@TranslatorProperty(display = \"TypeNameList\", category = PropertyType.IMPORT, description = \"A comma-separated list of the attributes that the buckets use to specify document types. Each list item must be a bucket name surrounded by back quotes (`), a colon (:), and an attribute name surrounded by back quotes (`).\") //$NON-NLS-1$ //$NON-NLS-2$ public String getTypeNameList()", "class_method_signature": "CouchbaseMetadataProcessor.getTypeNameList()", "testcase": false, "constructor": false}, {"identifier": "setTypeNameList", "parameters": "(String typeNameList)", "modifiers": "public", "return": "void", "signature": "void setTypeNameList(String typeNameList)", "full_signature": "public void setTypeNameList(String typeNameList)", "class_method_signature": "CouchbaseMetadataProcessor.setTypeNameList(String typeNameList)", "testcase": false, "constructor": false}, {"identifier": "getSampleKeyspaces", "parameters": "()", "modifiers": "@TranslatorProperty(display = \"SampleKeyspaces\", category = PropertyType.IMPORT, description = \"A comma-separated list of the keyspace names to define which keyspaces that should be map, default map all keyspaces\") //$NON-NLS-1$ //$NON-NLS-2$ public", "return": "String", "signature": "String getSampleKeyspaces()", "full_signature": "@TranslatorProperty(display = \"SampleKeyspaces\", category = PropertyType.IMPORT, description = \"A comma-separated list of the keyspace names to define which keyspaces that should be map, default map all keyspaces\") //$NON-NLS-1$ //$NON-NLS-2$ public String getSampleKeyspaces()", "class_method_signature": "CouchbaseMetadataProcessor.getSampleKeyspaces()", "testcase": false, "constructor": false}, {"identifier": "setSampleKeyspaces", "parameters": "(String sampleKeyspaces)", "modifiers": "public", "return": "void", "signature": "void setSampleKeyspaces(String sampleKeyspaces)", "full_signature": "public void setSampleKeyspaces(String sampleKeyspaces)", "class_method_signature": "CouchbaseMetadataProcessor.setSampleKeyspaces(String sampleKeyspaces)", "testcase": false, "constructor": false}, {"identifier": "setUseDouble", "parameters": "(boolean useDouble)", "modifiers": "public", "return": "void", "signature": "void setUseDouble(boolean useDouble)", "full_signature": "public void setUseDouble(boolean useDouble)", "class_method_signature": "CouchbaseMetadataProcessor.setUseDouble(boolean useDouble)", "testcase": false, "constructor": false}], "file": "connectors/couchbase/translator-couchbase/src/main/java/org/teiid/translator/couchbase/CouchbaseMetadataProcessor.java"}, "focal_method": {"identifier": "addProcedures", "parameters": "(MetadataFactory metadataFactory, CouchbaseConnection connection)", "modifiers": "protected", "return": "void", "body": "protected void addProcedures(MetadataFactory metadataFactory, CouchbaseConnection connection) {\n\n        Procedure getDocuments = metadataFactory.addProcedure(GETDOCUMENTS);\n        getDocuments.setAnnotation(CouchbasePlugin.Util.getString(\"getDocuments.Annotation\")); //$NON-NLS-1$\n        ProcedureParameter param = metadataFactory.addProcedureParameter(ID, TypeFacility.RUNTIME_NAMES.STRING, Type.In, getDocuments);\n        param.setNullType(No_Nulls);\n        param.setAnnotation(CouchbasePlugin.Util.getString(\"getDocuments.id.Annotation\")); //$NON-NLS-1$\n        param = metadataFactory.addProcedureParameter(KEYSPACE, TypeFacility.RUNTIME_NAMES.STRING, Type.In, getDocuments);\n        param.setNullType(No_Nulls);\n        param.setAnnotation(CouchbasePlugin.Util.getString(\"getDocuments.keyspace.Annotation\")); //$NON-NLS-1$\n        metadataFactory.addProcedureResultSetColumn(RESULT, TypeFacility.RUNTIME_NAMES.BLOB, getDocuments);\n\n        Procedure getDocument = metadataFactory.addProcedure(GETDOCUMENT);\n        getDocument.setAnnotation(CouchbasePlugin.Util.getString(\"getDocument.Annotation\")); //$NON-NLS-1$\n        param = metadataFactory.addProcedureParameter(ID, TypeFacility.RUNTIME_NAMES.STRING, Type.In, getDocument);\n        param.setNullType(No_Nulls);\n        param.setAnnotation(CouchbasePlugin.Util.getString(\"getDocument.id.Annotation\")); //$NON-NLS-1$\n        param = metadataFactory.addProcedureParameter(KEYSPACE, TypeFacility.RUNTIME_NAMES.STRING, Type.In, getDocument);\n        param.setNullType(No_Nulls);\n        param.setAnnotation(CouchbasePlugin.Util.getString(\"getDocument.keyspace.Annotation\")); //$NON-NLS-1$\n        metadataFactory.addProcedureResultSetColumn(RESULT, TypeFacility.RUNTIME_NAMES.BLOB, getDocument);\n    }", "signature": "void addProcedures(MetadataFactory metadataFactory, CouchbaseConnection connection)", "full_signature": "protected void addProcedures(MetadataFactory metadataFactory, CouchbaseConnection connection)", "class_method_signature": "CouchbaseMetadataProcessor.addProcedures(MetadataFactory metadataFactory, CouchbaseConnection connection)", "testcase": false, "constructor": false, "invocations": ["addProcedure", "setAnnotation", "getString", "addProcedureParameter", "setNullType", "setAnnotation", "getString", "addProcedureParameter", "setNullType", "setAnnotation", "getString", "addProcedureResultSetColumn", "addProcedure", "setAnnotation", "getString", "addProcedureParameter", "setNullType", "setAnnotation", "getString", "addProcedureParameter", "setNullType", "setAnnotation", "getString", "addProcedureResultSetColumn"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}