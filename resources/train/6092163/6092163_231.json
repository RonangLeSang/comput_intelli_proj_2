{"test_class": {"identifier": "TestFtpFileSystem", "superclass": "", "interfaces": "", "fields": [], "file": "connectors/file/file-api/src/test/java/org/teiid/file/ftp/TestFtpFileSystem.java"}, "test_case": {"identifier": "testExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExists(){\n        assertTrue(VFS.getChild(\"/home/kylin/vsftpd/marketdata-price.txt\").exists()); //$NON-NLS-1$\n        assertTrue(VFS.getChild(\"/home/kylin/vsftpd/marketdata-price1.txt\").exists()); //$NON-NLS-1$\n        assertTrue(VFS.getChild(\"/home/kylin/vsftpd/sub\").exists()); //$NON-NLS-1$\n    }", "signature": "void testExists()", "full_signature": "@Test public void testExists()", "class_method_signature": "TestFtpFileSystem.testExists()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "getChild", "assertTrue", "exists", "getChild", "assertTrue", "exists", "getChild"]}, "focal_class": {"identifier": "FtpFileSystem", "superclass": "", "interfaces": "implements FileSystem", "fields": [{"original_string": "private FTPClient client;", "modifier": "private", "type": "FTPClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "FtpFileSystem", "parameters": "(FTPClient ftpClient)", "modifiers": "public", "return": "", "signature": " FtpFileSystem(FTPClient ftpClient)", "full_signature": "public  FtpFileSystem(FTPClient ftpClient)", "class_method_signature": "FtpFileSystem.FtpFileSystem(FTPClient ftpClient)", "testcase": false, "constructor": true}, {"identifier": "getFile", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "File", "signature": "File getFile(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public File getFile(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.getFile(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "openInputStream", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream openInputStream(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public InputStream openInputStream(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.openInputStream(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly()", "full_signature": "@Override public boolean isReadOnly()", "class_method_signature": "FtpFileSystem.isReadOnly()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public boolean delete(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.delete(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public long getSize(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.getSize(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "getLastModified", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "long", "signature": "long getLastModified(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public long getLastModified(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.getLastModified(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public boolean exists(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.exists(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "isFile", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFile(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public boolean isFile(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.isFile(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDirectory(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public boolean isDirectory(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.isDirectory(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "getDirectoryEntries", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getDirectoryEntries(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public List<String> getDirectoryEntries(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.getDirectoryEntries(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "getCodeSigners", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "CodeSigner[]", "signature": "CodeSigner[] getCodeSigners(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public CodeSigner[] getCodeSigners(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.getCodeSigners(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FtpFileSystem.close()", "testcase": false, "constructor": false}, {"identifier": "getMountSource", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getMountSource()", "full_signature": "@Override public File getMountSource()", "class_method_signature": "FtpFileSystem.getMountSource()", "testcase": false, "constructor": false}, {"identifier": "getRootURI", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getRootURI()", "full_signature": "@Override public URI getRootURI()", "class_method_signature": "FtpFileSystem.getRootURI()", "testcase": false, "constructor": false}], "file": "connectors/file/file-api/src/main/java/org/teiid/file/ftp/FtpFileSystem.java"}, "focal_method": {"identifier": "exists", "parameters": "(VirtualFile mountPoint, VirtualFile target)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean exists(VirtualFile mountPoint, VirtualFile target) {\n        return isFile(mountPoint, target) || isDirectory(mountPoint, target);\n    }", "signature": "boolean exists(VirtualFile mountPoint, VirtualFile target)", "full_signature": "@Override public boolean exists(VirtualFile mountPoint, VirtualFile target)", "class_method_signature": "FtpFileSystem.exists(VirtualFile mountPoint, VirtualFile target)", "testcase": false, "constructor": false, "invocations": ["isFile", "isDirectory"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}