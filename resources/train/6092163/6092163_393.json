{"test_class": {"identifier": "TestLimitNode", "superclass": "", "interfaces": "", "fields": [], "file": "engine/src/test/java/org/teiid/query/processor/relational/TestLimitNode.java"}, "test_case": {"identifier": "testOffsetWithoutLimit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testOffsetWithoutLimit() throws Exception {\n        LimitNode node = new LimitNode(1, null, new Constant(new Integer(10)));\n        node.addChild(new FakeRelationalNode(2, getRows(10), 50));\n        node.open();\n\n        TupleBatch batch = node.nextBatch();\n        assertNotNull(batch);\n        assertEquals(0, batch.getRowCount());\n        assertTrue(batch.getTerminationFlag());\n    }", "signature": "void testOffsetWithoutLimit()", "full_signature": "@Test public void testOffsetWithoutLimit()", "class_method_signature": "TestLimitNode.testOffsetWithoutLimit()", "testcase": true, "constructor": false, "invocations": ["addChild", "getRows", "open", "nextBatch", "assertNotNull", "assertEquals", "getRowCount", "assertTrue", "getTerminationFlag"]}, "focal_class": {"identifier": "LimitNode", "superclass": "extends RelationalNode", "interfaces": "", "fields": [{"original_string": "private final Expression limitExpr;", "modifier": "private final", "type": "Expression", "declarator": "limitExpr", "var_name": "limitExpr"}, {"original_string": "private final Expression offsetExpr;", "modifier": "private final", "type": "Expression", "declarator": "offsetExpr", "var_name": "offsetExpr"}, {"original_string": "private int limit;", "modifier": "private", "type": "int", "declarator": "limit", "var_name": "limit"}, {"original_string": "private int offset;", "modifier": "private", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private int rowCounter;", "modifier": "private", "type": "int", "declarator": "rowCounter", "var_name": "rowCounter"}, {"original_string": "private boolean offsetPhase = true;", "modifier": "private", "type": "boolean", "declarator": "offsetPhase = true", "var_name": "offsetPhase"}, {"original_string": "private boolean implicit;", "modifier": "private", "type": "boolean", "declarator": "implicit", "var_name": "implicit"}], "methods": [{"identifier": "LimitNode", "parameters": "(int nodeID, Expression limitExpr, Expression offsetExpr)", "modifiers": "public", "return": "", "signature": " LimitNode(int nodeID, Expression limitExpr, Expression offsetExpr)", "full_signature": "public  LimitNode(int nodeID, Expression limitExpr, Expression offsetExpr)", "class_method_signature": "LimitNode.LimitNode(int nodeID, Expression limitExpr, Expression offsetExpr)", "testcase": false, "constructor": true}, {"identifier": "setImplicit", "parameters": "(boolean implicit)", "modifiers": "public", "return": "void", "signature": "void setImplicit(boolean implicit)", "full_signature": "public void setImplicit(boolean implicit)", "class_method_signature": "LimitNode.setImplicit(boolean implicit)", "testcase": false, "constructor": false}, {"identifier": "isImplicit", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isImplicit()", "full_signature": "public boolean isImplicit()", "class_method_signature": "LimitNode.isImplicit()", "testcase": false, "constructor": false}, {"identifier": "nextBatchDirect", "parameters": "()", "modifiers": "protected", "return": "TupleBatch", "signature": "TupleBatch nextBatchDirect()", "full_signature": "protected TupleBatch nextBatchDirect()", "class_method_signature": "LimitNode.nextBatchDirect()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void open()", "full_signature": "public void open()", "class_method_signature": "LimitNode.open()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "LimitNode.reset()", "testcase": false, "constructor": false}, {"identifier": "getNodeString", "parameters": "(StringBuffer buf)", "modifiers": "protected", "return": "void", "signature": "void getNodeString(StringBuffer buf)", "full_signature": "protected void getNodeString(StringBuffer buf)", "class_method_signature": "LimitNode.getNodeString(StringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "getDescriptionProperties", "parameters": "()", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode getDescriptionProperties()", "full_signature": "public PlanNode getDescriptionProperties()", "class_method_signature": "LimitNode.getDescriptionProperties()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "LimitNode.clone()", "testcase": false, "constructor": false}, {"identifier": "getLimitExpr", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression getLimitExpr()", "full_signature": "public Expression getLimitExpr()", "class_method_signature": "LimitNode.getLimitExpr()", "testcase": false, "constructor": false}, {"identifier": "getOffsetExpr", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression getOffsetExpr()", "full_signature": "public Expression getOffsetExpr()", "class_method_signature": "LimitNode.getOffsetExpr()", "testcase": false, "constructor": false}, {"identifier": "getLimit", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLimit()", "full_signature": "public int getLimit()", "class_method_signature": "LimitNode.getLimit()", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOffset()", "full_signature": "public int getOffset()", "class_method_signature": "LimitNode.getOffset()", "testcase": false, "constructor": false}, {"identifier": "hasBuffer", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasBuffer()", "full_signature": "@Override public boolean hasBuffer()", "class_method_signature": "LimitNode.hasBuffer()", "testcase": false, "constructor": false}, {"identifier": "getBufferDirect", "parameters": "(int maxRows)", "modifiers": "@Override public", "return": "TupleBuffer", "signature": "TupleBuffer getBufferDirect(int maxRows)", "full_signature": "@Override public TupleBuffer getBufferDirect(int maxRows)", "class_method_signature": "LimitNode.getBufferDirect(int maxRows)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/org/teiid/query/processor/relational/LimitNode.java"}, "focal_method": {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void open() throws TeiidComponentException, TeiidProcessingException {\n        limit = -1;\n        if (limitExpr != null) {\n            Integer limitVal = (Integer)new Evaluator(Collections.emptyMap(), getDataManager(), getContext()).evaluate(limitExpr, Collections.emptyList());\n            ValidationVisitor.LIMIT_CONSTRAINT.validate(limitVal);\n            limit = limitVal.intValue();\n        }\n        if (limit == 0) {\n            return;\n        }\n        if (offsetExpr != null) {\n            Integer offsetVal = (Integer)new Evaluator(Collections.emptyMap(), getDataManager(), getContext()).evaluate(offsetExpr, Collections.emptyList());\n            ValidationVisitor.LIMIT_CONSTRAINT.validate(offsetVal);\n            offset = offsetVal.intValue();\n        } else {\n            offset = 0;\n        }\n        offsetPhase = offset > 0;\n        if (limit > -1 && this.getChildren()[0] instanceof SortNode) {\n            ((SortNode)this.getChildren()[0]).setRowLimit((int) Math.min(Integer.MAX_VALUE, (long)limit + offset));\n        }\n        super.open();\n    }", "signature": "void open()", "full_signature": "public void open()", "class_method_signature": "LimitNode.open()", "testcase": false, "constructor": false, "invocations": ["evaluate", "emptyMap", "getDataManager", "getContext", "emptyList", "validate", "intValue", "evaluate", "emptyMap", "getDataManager", "getContext", "emptyList", "validate", "intValue", "getChildren", "setRowLimit", "getChildren", "min", "open"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}