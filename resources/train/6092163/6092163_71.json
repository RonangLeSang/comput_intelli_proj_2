{"test_class": {"identifier": "TestSQLXMLImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "String testStr = \"<foo>test</foo>\";", "modifier": "", "type": "String", "declarator": "testStr = \"<foo>test</foo>\"", "var_name": "testStr"}], "file": "common-core/src/test/java/org/teiid/core/types/TestSQLXMLImpl.java"}, "test_case": {"identifier": "testGetSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testGetSource() throws Exception {\n        SQLXMLImpl xml = new SQLXMLImpl(testStr);\n        assertTrue(xml.getSource(null) instanceof StreamSource);\n\n        StreamSource ss = (StreamSource)xml.getSource(null);\n        assertEquals(testStr, new String(ObjectConverterUtil.convertToByteArray(ss.getInputStream()), Streamable.ENCODING));\n    }", "signature": "void testGetSource()", "full_signature": "@Test public void testGetSource()", "class_method_signature": "TestSQLXMLImpl.testGetSource()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getSource", "getSource", "assertEquals", "convertToByteArray", "getInputStream"]}, "focal_class": {"identifier": "SQLXMLImpl", "superclass": "extends BaseLob", "interfaces": "implements SQLXML", "fields": [], "methods": [{"identifier": "SQLXMLImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " SQLXMLImpl()", "full_signature": "public  SQLXMLImpl()", "class_method_signature": "SQLXMLImpl.SQLXMLImpl()", "testcase": false, "constructor": true}, {"identifier": "SQLXMLImpl", "parameters": "(final byte[] bytes)", "modifiers": "public", "return": "", "signature": " SQLXMLImpl(final byte[] bytes)", "full_signature": "public  SQLXMLImpl(final byte[] bytes)", "class_method_signature": "SQLXMLImpl.SQLXMLImpl(final byte[] bytes)", "testcase": false, "constructor": true}, {"identifier": "SQLXMLImpl", "parameters": "(final String str)", "modifiers": "public", "return": "", "signature": " SQLXMLImpl(final String str)", "full_signature": "public  SQLXMLImpl(final String str)", "class_method_signature": "SQLXMLImpl.SQLXMLImpl(final String str)", "testcase": false, "constructor": true}, {"identifier": "SQLXMLImpl", "parameters": "(InputStreamFactory factory)", "modifiers": "public", "return": "", "signature": " SQLXMLImpl(InputStreamFactory factory)", "full_signature": "public  SQLXMLImpl(InputStreamFactory factory)", "class_method_signature": "SQLXMLImpl.SQLXMLImpl(InputStreamFactory factory)", "testcase": false, "constructor": true}, {"identifier": "getCharset", "parameters": "()", "modifiers": "@Override public", "return": "Charset", "signature": "Charset getCharset()", "full_signature": "@Override public Charset getCharset()", "class_method_signature": "SQLXMLImpl.getCharset()", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(Class<T> sourceClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getSource(Class<T> sourceClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getSource(Class<T> sourceClass)", "class_method_signature": "SQLXMLImpl.getSource(Class<T> sourceClass)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getString()", "full_signature": "public String getString()", "class_method_signature": "SQLXMLImpl.getString()", "testcase": false, "constructor": false}, {"identifier": "setBinaryStream", "parameters": "()", "modifiers": "public", "return": "OutputStream", "signature": "OutputStream setBinaryStream()", "full_signature": "public OutputStream setBinaryStream()", "class_method_signature": "SQLXMLImpl.setBinaryStream()", "testcase": false, "constructor": false}, {"identifier": "setCharacterStream", "parameters": "()", "modifiers": "public", "return": "Writer", "signature": "Writer setCharacterStream()", "full_signature": "public Writer setCharacterStream()", "class_method_signature": "SQLXMLImpl.setCharacterStream()", "testcase": false, "constructor": false}, {"identifier": "setString", "parameters": "(String value)", "modifiers": "public", "return": "void", "signature": "void setString(String value)", "full_signature": "public void setString(String value)", "class_method_signature": "SQLXMLImpl.setString(String value)", "testcase": false, "constructor": false}, {"identifier": "setResult", "parameters": "(Class<T> resultClass)", "modifiers": "public", "return": "T", "signature": "T setResult(Class<T> resultClass)", "full_signature": "public T setResult(Class<T> resultClass)", "class_method_signature": "SQLXMLImpl.setResult(Class<T> resultClass)", "testcase": false, "constructor": false}, {"identifier": "quickLength", "parameters": "(SQLXML xml)", "modifiers": "public static", "return": "long", "signature": "long quickLength(SQLXML xml)", "full_signature": "public static long quickLength(SQLXML xml)", "class_method_signature": "SQLXMLImpl.quickLength(SQLXML xml)", "testcase": false, "constructor": false}], "file": "common-core/src/main/java/org/teiid/core/types/SQLXMLImpl.java"}, "focal_method": {"identifier": "getSource", "parameters": "(Class<T> sourceClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    public <T extends Source> T getSource(Class<T> sourceClass) throws SQLException {\n        if (sourceClass == null || sourceClass == StreamSource.class) {\n            return (T)new StreamSource(getBinaryStream(), this.getStreamFactory().getSystemId());\n        } else if (sourceClass == StAXSource.class) {\n            XMLInputFactory factory = XMLType.getXmlInputFactory();\n            try {\n                return (T) new StAXSource(factory.createXMLStreamReader(getBinaryStream()));\n            } catch (XMLStreamException e) {\n                throw new SQLException(e);\n            }\n        } else if (sourceClass == SAXSource.class) {\n            return (T) new SAXSource(new InputSource(getBinaryStream()));\n        } else if (sourceClass == DOMSource.class) {\n            try {\n                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n                dbf.setNamespaceAware(true);\n                if (!XMLType.SUPPORT_DTD) {\n                    dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false); //$NON-NLS-1$\n                    dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", false); //$NON-NLS-1$\n                }\n                DocumentBuilder docBuilder = dbf.newDocumentBuilder();\n                Node doc = docBuilder.parse(new InputSource(getBinaryStream()));\n                return (T) new DOMSource(doc);\n            } catch (ParserConfigurationException e) {\n                throw new SQLException(e);\n            } catch (SAXException e) {\n                throw new SQLException(e);\n            } catch (IOException e) {\n                throw new SQLException(e);\n            }\n        }\n        throw new SQLException(\"Unsupported source type \" + sourceClass); //$NON-NLS-1$\n    }", "signature": "T getSource(Class<T> sourceClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getSource(Class<T> sourceClass)", "class_method_signature": "SQLXMLImpl.getSource(Class<T> sourceClass)", "testcase": false, "constructor": false, "invocations": ["getBinaryStream", "getSystemId", "getStreamFactory", "getXmlInputFactory", "createXMLStreamReader", "getBinaryStream", "getBinaryStream", "newInstance", "setNamespaceAware", "setFeature", "setFeature", "newDocumentBuilder", "parse", "getBinaryStream"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}