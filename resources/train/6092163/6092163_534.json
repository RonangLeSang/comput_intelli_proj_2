{"test_class": {"identifier": "TestODataTypeManager", "superclass": "", "interfaces": "", "fields": [], "file": "olingo-common/src/test/java/org/teiid/olingo/common/TestODataTypeManager.java"}, "test_case": {"identifier": "testTimestampPrecision", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testTimestampPrecision() {\n        Timestamp value = new Timestamp(1234);\n        value.setNanos(56789);\n        Timestamp corrected = (Timestamp)ODataTypeManager.rationalizePrecision(0, null, value);\n        assertEquals(0, corrected.getNanos());\n\n        corrected = (Timestamp)ODataTypeManager.rationalizePrecision(5, null, value);\n        assertEquals(50000, corrected.getNanos());\n\n        corrected = (Timestamp)ODataTypeManager.rationalizePrecision(8, null, value);\n        assertEquals(56780, corrected.getNanos());\n    }", "signature": "void testTimestampPrecision()", "full_signature": "@Test public void testTimestampPrecision()", "class_method_signature": "TestODataTypeManager.testTimestampPrecision()", "testcase": true, "constructor": false, "invocations": ["setNanos", "rationalizePrecision", "assertEquals", "getNanos", "rationalizePrecision", "assertEquals", "getNanos", "rationalizePrecision", "assertEquals", "getNanos"]}, "focal_class": {"identifier": "ODataTypeManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HashMap<String, String> odataTypes = new HashMap<String, String>();", "modifier": "private static", "type": "HashMap<String, String>", "declarator": "odataTypes = new HashMap<String, String>()", "var_name": "odataTypes"}, {"original_string": "private static HashMap<String, String> teiidTypes = new HashMap<String, String>();", "modifier": "private static", "type": "HashMap<String, String>", "declarator": "teiidTypes = new HashMap<String, String>()", "var_name": "teiidTypes"}], "methods": [{"identifier": "teiidType", "parameters": "(SingletonPrimitiveType odataType, boolean array)", "modifiers": "public static", "return": "String", "signature": "String teiidType(SingletonPrimitiveType odataType, boolean array)", "full_signature": "public static String teiidType(SingletonPrimitiveType odataType, boolean array)", "class_method_signature": "ODataTypeManager.teiidType(SingletonPrimitiveType odataType, boolean array)", "testcase": false, "constructor": false}, {"identifier": "teiidType", "parameters": "(String odataType, boolean array)", "modifiers": "public static", "return": "String", "signature": "String teiidType(String odataType, boolean array)", "full_signature": "public static String teiidType(String odataType, boolean array)", "class_method_signature": "ODataTypeManager.teiidType(String odataType, boolean array)", "testcase": false, "constructor": false}, {"identifier": "odataType", "parameters": "(Class<?> teiidRuntimeTypeClass)", "modifiers": "public static", "return": "EdmPrimitiveTypeKind", "signature": "EdmPrimitiveTypeKind odataType(Class<?> teiidRuntimeTypeClass)", "full_signature": "public static EdmPrimitiveTypeKind odataType(Class<?> teiidRuntimeTypeClass)", "class_method_signature": "ODataTypeManager.odataType(Class<?> teiidRuntimeTypeClass)", "testcase": false, "constructor": false}, {"identifier": "odataType", "parameters": "(BaseColumn c)", "modifiers": "public static", "return": "EdmPrimitiveTypeKind", "signature": "EdmPrimitiveTypeKind odataType(BaseColumn c)", "full_signature": "public static EdmPrimitiveTypeKind odataType(BaseColumn c)", "class_method_signature": "ODataTypeManager.odataType(BaseColumn c)", "testcase": false, "constructor": false}, {"identifier": "odataType", "parameters": "(String teiidRuntimeType)", "modifiers": "public static", "return": "EdmPrimitiveTypeKind", "signature": "EdmPrimitiveTypeKind odataType(String teiidRuntimeType)", "full_signature": "public static EdmPrimitiveTypeKind odataType(String teiidRuntimeType)", "class_method_signature": "ODataTypeManager.odataType(String teiidRuntimeType)", "testcase": false, "constructor": false}, {"identifier": "convertToTeiidRuntimeType", "parameters": "(Class<?> type, Object value, String odataType, String srid)", "modifiers": "public static", "return": "Object", "signature": "Object convertToTeiidRuntimeType(Class<?> type, Object value, String odataType, String srid)", "full_signature": "public static Object convertToTeiidRuntimeType(Class<?> type, Object value, String odataType, String srid)", "class_method_signature": "ODataTypeManager.convertToTeiidRuntimeType(Class<?> type, Object value, String odataType, String srid)", "testcase": false, "constructor": false}, {"identifier": "convertByteArrayToTeiidRuntimeType", "parameters": "(final Class<?> type, final byte[] contents,\n            final String odataType, String srid)", "modifiers": "public static", "return": "Object", "signature": "Object convertByteArrayToTeiidRuntimeType(final Class<?> type, final byte[] contents,\n            final String odataType, String srid)", "full_signature": "public static Object convertByteArrayToTeiidRuntimeType(final Class<?> type, final byte[] contents,\n            final String odataType, String srid)", "class_method_signature": "ODataTypeManager.convertByteArrayToTeiidRuntimeType(final Class<?> type, final byte[] contents,\n            final String odataType, String srid)", "testcase": false, "constructor": false}, {"identifier": "parseLiteral", "parameters": "(EdmParameter edmParameter, Class<?> runtimeType, String value)", "modifiers": "public static", "return": "Object", "signature": "Object parseLiteral(EdmParameter edmParameter, Class<?> runtimeType, String value)", "full_signature": "public static Object parseLiteral(EdmParameter edmParameter, Class<?> runtimeType, String value)", "class_method_signature": "ODataTypeManager.parseLiteral(EdmParameter edmParameter, Class<?> runtimeType, String value)", "testcase": false, "constructor": false}, {"identifier": "parseLiteral", "parameters": "(EdmProperty edmProperty, Class<?> runtimeType, String value)", "modifiers": "public static", "return": "Object", "signature": "Object parseLiteral(EdmProperty edmProperty, Class<?> runtimeType, String value)", "full_signature": "public static Object parseLiteral(EdmProperty edmProperty, Class<?> runtimeType, String value)", "class_method_signature": "ODataTypeManager.parseLiteral(EdmProperty edmProperty, Class<?> runtimeType, String value)", "testcase": false, "constructor": false}, {"identifier": "parseLiteral", "parameters": "(String odataType, String value)", "modifiers": "public static", "return": "Object", "signature": "Object parseLiteral(String odataType, String value)", "full_signature": "public static Object parseLiteral(String odataType, String value)", "class_method_signature": "ODataTypeManager.parseLiteral(String odataType, String value)", "testcase": false, "constructor": false}, {"identifier": "rationalizePrecision", "parameters": "(Integer precision, Integer scale, Object value)", "modifiers": "public static", "return": "Object", "signature": "Object rationalizePrecision(Integer precision, Integer scale, Object value)", "full_signature": "public static Object rationalizePrecision(Integer precision, Integer scale, Object value)", "class_method_signature": "ODataTypeManager.rationalizePrecision(Integer precision, Integer scale, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertToODataValue", "parameters": "(InputStream wkb, boolean includesSrid)", "modifiers": "public static", "return": "Geospatial", "signature": "Geospatial convertToODataValue(InputStream wkb, boolean includesSrid)", "full_signature": "public static Geospatial convertToODataValue(InputStream wkb, boolean includesSrid)", "class_method_signature": "ODataTypeManager.convertToODataValue(InputStream wkb, boolean includesSrid)", "testcase": false, "constructor": false}, {"identifier": "convertToODataURIValue", "parameters": "(Object val, String odataType)", "modifiers": "public static", "return": "String", "signature": "String convertToODataURIValue(Object val, String odataType)", "full_signature": "public static String convertToODataURIValue(Object val, String odataType)", "class_method_signature": "ODataTypeManager.convertToODataURIValue(Object val, String odataType)", "testcase": false, "constructor": false}, {"identifier": "geometryToODataValueString", "parameters": "(Geometry g, boolean geometry)", "modifiers": "static", "return": "String", "signature": "String geometryToODataValueString(Geometry g, boolean geometry)", "full_signature": "static String geometryToODataValueString(Geometry g, boolean geometry)", "class_method_signature": "ODataTypeManager.geometryToODataValueString(Geometry g, boolean geometry)", "testcase": false, "constructor": false}], "file": "olingo-common/src/main/java/org/teiid/olingo/common/ODataTypeManager.java"}, "focal_method": {"identifier": "rationalizePrecision", "parameters": "(Integer precision, Integer scale, Object value)", "modifiers": "public static", "return": "Object", "body": "public static Object rationalizePrecision(Integer precision, Integer scale, Object value) {\n        if (precision == null) {\n            return value;\n        }\n        if (value instanceof BigDecimal) {\n            BigDecimal bigDecimalValue = (BigDecimal)value;\n            //if precision is set, then try to set an appropriate scale to pass the facet check\n            final int digits = bigDecimalValue.scale() >= 0\n                      ? Math.max(bigDecimalValue.precision(), bigDecimalValue.scale())\n                          : bigDecimalValue.precision() - bigDecimalValue.scale();\n\n            if (bigDecimalValue.scale() > (scale == null ? 0 : scale) || (digits > precision)) {\n                BigDecimal newBigDecimal = bigDecimalValue.setScale(Math.min(digits > precision ? bigDecimalValue.scale() - digits + precision : bigDecimalValue.scale(), scale == null ? 0 : scale), RoundingMode.HALF_UP);\n                //only allow for trimming trailing zeros\n                if (newBigDecimal.compareTo(bigDecimalValue) == 0) {\n                    bigDecimalValue = newBigDecimal;\n                }\n            }\n            return bigDecimalValue;\n        } else if (value instanceof Timestamp) {\n            if (precision < 9) {\n                Timestamp timestamp = (Timestamp)value;\n                int nanos = timestamp.getNanos();\n                long mask = (long)Math.pow(10, 9-precision);\n                long adjusted = (nanos / mask) * mask;\n                if (adjusted != nanos) {\n                    Timestamp result = new Timestamp(timestamp.getTime());\n                    result.setNanos((int)adjusted);\n                    return result;\n                }\n\n            }\n        }\n        return value;\n    }", "signature": "Object rationalizePrecision(Integer precision, Integer scale, Object value)", "full_signature": "public static Object rationalizePrecision(Integer precision, Integer scale, Object value)", "class_method_signature": "ODataTypeManager.rationalizePrecision(Integer precision, Integer scale, Object value)", "testcase": false, "constructor": false, "invocations": ["scale", "max", "precision", "scale", "precision", "scale", "scale", "setScale", "min", "scale", "scale", "compareTo", "getNanos", "pow", "getTime", "setNanos"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}