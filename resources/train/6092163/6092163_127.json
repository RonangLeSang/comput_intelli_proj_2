{"test_class": {"identifier": "TestAccumuloQueryExecution", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static AccumuloExecutionFactory translator;", "modifier": "private static", "type": "AccumuloExecutionFactory", "declarator": "translator", "var_name": "translator"}, {"original_string": "private static TranslationUtility utility;", "modifier": "private static", "type": "TranslationUtility", "declarator": "utility", "var_name": "utility"}, {"original_string": "private static AccumuloConnection connection;", "modifier": "private static", "type": "AccumuloConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private static AccumuloClient client;", "modifier": "private static", "type": "AccumuloClient", "declarator": "client", "var_name": "client"}, {"original_string": "private static Connector connector;", "modifier": "private static", "type": "Connector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private static MiniAccumuloCluster cluster;", "modifier": "private static", "type": "MiniAccumuloCluster", "declarator": "cluster", "var_name": "cluster"}], "file": "connectors/accumulo/translator-accumulo/src/test/java/org/teiid/translator/accumulo/TestAccumuloQueryExecution.java"}, "test_case": {"identifier": "testComparisionOnNonPKColumn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComparisionOnNonPKColumn() throws Exception {\n        executeCmd(\"delete from rental\");\n        executeCmd(\"insert into rental (rental_id, amount, customer_id) values (1, 3.99, 5)\");\n        executeCmd(\"insert into rental (rental_id, amount, customer_id) values (2, 5.99, 2)\");\n        executeCmd(\"insert into rental (rental_id, amount, customer_id) values (3, 11.99, 1)\");\n        executeCmd(\"insert into rental (rental_id, amount, customer_id) values (4, 12.99, 1)\");\n\n        AccumuloQueryExecution exec = (AccumuloQueryExecution)executeCmd(\"select rental_id, amount, \"\n                + \"customer_id from rental where amount > 6.01\");\n        assertEquals(Arrays.asList(3, new BigDecimal(\"11.99\"), 1), exec.next());\n        assertEquals(Arrays.asList(4, new BigDecimal(\"12.99\"), 1), exec.next());\n        assertNull(exec.next());\n    }", "signature": "void testComparisionOnNonPKColumn()", "full_signature": "@Test public void testComparisionOnNonPKColumn()", "class_method_signature": "TestAccumuloQueryExecution.testComparisionOnNonPKColumn()", "testcase": true, "constructor": false, "invocations": ["executeCmd", "executeCmd", "executeCmd", "executeCmd", "executeCmd", "executeCmd", "assertEquals", "asList", "next", "assertEquals", "asList", "next", "assertNull", "next"]}, "focal_class": {"identifier": "AccumuloQueryExecution", "superclass": "", "interfaces": "implements ResultSetExecution", "fields": [{"original_string": "private AccumuloConnection connection;", "modifier": "private", "type": "AccumuloConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Iterator<Entry<Key,Value>> results;", "modifier": "private", "type": "Iterator<Entry<Key,Value>>", "declarator": "results", "var_name": "results"}, {"original_string": "private Class<?>[] expectedColumnTypes;", "modifier": "private", "type": "Class<?>[]", "declarator": "expectedColumnTypes", "var_name": "expectedColumnTypes"}, {"original_string": "private AccumuloExecutionFactory aef;", "modifier": "private", "type": "AccumuloExecutionFactory", "declarator": "aef", "var_name": "aef"}, {"original_string": "private AccumuloQueryVisitor visitor;", "modifier": "private", "type": "AccumuloQueryVisitor", "declarator": "visitor", "var_name": "visitor"}, {"original_string": "private Entry<Key, Value> prevEntry;", "modifier": "private", "type": "Entry<Key, Value>", "declarator": "prevEntry", "var_name": "prevEntry"}], "methods": [{"identifier": "AccumuloQueryExecution", "parameters": "(AccumuloExecutionFactory aef, Select command,\n            ExecutionContext executionContext,\n            RuntimeMetadata metadata,\n            AccumuloConnection connection)", "modifiers": "public", "return": "", "signature": " AccumuloQueryExecution(AccumuloExecutionFactory aef, Select command,\n            ExecutionContext executionContext,\n            RuntimeMetadata metadata,\n            AccumuloConnection connection)", "full_signature": "public  AccumuloQueryExecution(AccumuloExecutionFactory aef, Select command,\n            ExecutionContext executionContext,\n            RuntimeMetadata metadata,\n            AccumuloConnection connection)", "class_method_signature": "AccumuloQueryExecution.AccumuloQueryExecution(AccumuloExecutionFactory aef, Select command,\n            ExecutionContext executionContext,\n            RuntimeMetadata metadata,\n            AccumuloConnection connection)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "AccumuloQueryExecution.execute()", "testcase": false, "constructor": false}, {"identifier": "runQuery", "parameters": "(AccumuloExecutionFactory aef,\n            Connector connector, Authorizations auths, List<Range> ranges,\n            Table scanTable, List<IteratorSetting> scanIterators)", "modifiers": "static", "return": "Iterator<Entry<Key, Value>>", "signature": "Iterator<Entry<Key, Value>> runQuery(AccumuloExecutionFactory aef,\n            Connector connector, Authorizations auths, List<Range> ranges,\n            Table scanTable, List<IteratorSetting> scanIterators)", "full_signature": "static Iterator<Entry<Key, Value>> runQuery(AccumuloExecutionFactory aef,\n            Connector connector, Authorizations auths, List<Range> ranges,\n            Table scanTable, List<IteratorSetting> scanIterators)", "class_method_signature": "AccumuloQueryExecution.runQuery(AccumuloExecutionFactory aef,\n            Connector connector, Authorizations auths, List<Range> ranges,\n            Table scanTable, List<IteratorSetting> scanIterators)", "testcase": false, "constructor": false}, {"identifier": "readNextRow", "parameters": "()", "modifiers": "private", "return": "SortedMap<Key, Value>", "signature": "SortedMap<Key, Value> readNextRow()", "full_signature": "private SortedMap<Key, Value> readNextRow()", "class_method_signature": "AccumuloQueryExecution.readNextRow()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "List<?>", "signature": "List<?> next()", "full_signature": "@Override public List<?> next()", "class_method_signature": "AccumuloQueryExecution.next()", "testcase": false, "constructor": false}, {"identifier": "findMatchingColumn", "parameters": "(Text rowCF, Text rowCQ)", "modifiers": "private", "return": "Column", "signature": "Column findMatchingColumn(Text rowCF, Text rowCQ)", "full_signature": "private Column findMatchingColumn(Text rowCF, Text rowCQ)", "class_method_signature": "AccumuloQueryExecution.findMatchingColumn(Text rowCF, Text rowCQ)", "testcase": false, "constructor": false}, {"identifier": "nextRow", "parameters": "(Map<String, byte[]> values)", "modifiers": "private", "return": "List<?>", "signature": "List<?> nextRow(Map<String, byte[]> values)", "full_signature": "private List<?> nextRow(Map<String, byte[]> values)", "class_method_signature": "AccumuloQueryExecution.nextRow(Map<String, byte[]> values)", "testcase": false, "constructor": false}, {"identifier": "buildValue", "parameters": "(String pattern, Text cq, Value value)", "modifiers": "private", "return": "byte[]", "signature": "byte[] buildValue(String pattern, Text cq, Value value)", "full_signature": "private byte[] buildValue(String pattern, Text cq, Value value)", "class_method_signature": "AccumuloQueryExecution.buildValue(String pattern, Text cq, Value value)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AccumuloQueryExecution.close()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "AccumuloQueryExecution.cancel()", "testcase": false, "constructor": false}], "file": "connectors/accumulo/translator-accumulo/src/main/java/org/teiid/translator/accumulo/AccumuloQueryExecution.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "List<?>", "body": "@Override\n    public List<?> next() throws TranslatorException, DataNotAvailableException {\n        SortedMap<Key, Value> rowItems = readNextRow();\n        boolean rowIdAdded = false;\n        LinkedHashMap<String, byte[]> values = new LinkedHashMap<String, byte[]>();\n\n        for (Key key:rowItems.keySet()) {\n            Text cf = key.getColumnFamily();\n            Text cq = key.getColumnQualifier();\n            Text rowid = key.getRow();\n            Value value = rowItems.get(key);\n\n            Column match = findMatchingColumn(cf, cq);\n            if (!rowIdAdded) {\n                values.put(AccumuloMetadataProcessor.ROWID, rowid.getBytes());\n                rowIdAdded = true;\n            }\n\n            if (match != null) {\n                String valueIn = match.getProperty(AccumuloMetadataProcessor.VALUE_IN, false);\n                // failed to use isolated scanner, but this if check will accomplish the same in getting the\n                // most top value\n                if (values.get(match.getName()) == null) {\n                    values.put(match.getName(), buildValue(valueIn, cq, value));\n                }\n            }\n        }\n        return nextRow(values);\n    }", "signature": "List<?> next()", "full_signature": "@Override public List<?> next()", "class_method_signature": "AccumuloQueryExecution.next()", "testcase": false, "constructor": false, "invocations": ["readNextRow", "keySet", "getColumnFamily", "getColumnQualifier", "getRow", "get", "findMatchingColumn", "put", "getBytes", "getProperty", "get", "getName", "put", "getName", "buildValue", "nextRow"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}