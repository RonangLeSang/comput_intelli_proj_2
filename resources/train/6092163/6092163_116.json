{"test_class": {"identifier": "TestS3ProcedureExecution", "superclass": "", "interfaces": "", "fields": [], "file": "connectors/amazon/translator-amazon-s3/src/test/java/org/teiid/translator/amazon/s3/TestS3ProcedureExecution.java"}, "test_case": {"identifier": "testEndpoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testEndpoint() throws TranslatorException {\n        WSConnection conn = Mockito.mock(WSConnection.class);\n        S3ProcedureExecution s3ProcedureExecution = new S3ProcedureExecution(null, null, null, null, conn);\n        assertEquals(\"https://s3.z.amazonaws.com/y/x\", s3ProcedureExecution.determineEndpoint(\"x\", \"y\", \"z\"));\n\n        Mockito.stub(conn.getEndPoint()).toReturn(\"http://localhost:9000\");\n        s3ProcedureExecution = new S3ProcedureExecution(null, null, null, null, conn);\n        assertEquals(\"http://localhost:9000/y/x\", s3ProcedureExecution.determineEndpoint(\"x\", \"y\", \"z\"));\n    }", "signature": "void testEndpoint()", "full_signature": "@Test public void testEndpoint()", "class_method_signature": "TestS3ProcedureExecution.testEndpoint()", "testcase": true, "constructor": false, "invocations": ["mock", "assertEquals", "determineEndpoint", "toReturn", "stub", "getEndPoint", "assertEquals", "determineEndpoint"]}, "focal_class": {"identifier": "S3ProcedureExecution", "superclass": "", "interfaces": "implements ProcedureExecution", "fields": [{"original_string": "private static String AWS_S3_URL_PREFIX = \"https://s3.\";", "modifier": "private static", "type": "String", "declarator": "AWS_S3_URL_PREFIX = \"https://s3.\"", "var_name": "AWS_S3_URL_PREFIX"}, {"original_string": "private static String AWS_S3_HOSTHAME = \"amazonaws.com\";", "modifier": "private static", "type": "String", "declarator": "AWS_S3_HOSTHAME = \"amazonaws.com\"", "var_name": "AWS_S3_HOSTHAME"}, {"original_string": "private final Call command;", "modifier": "private final", "type": "Call", "declarator": "command", "var_name": "command"}, {"original_string": "private final WSConnection conn;", "modifier": "private final", "type": "WSConnection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private S3ExecutionFactory ef;", "modifier": "private", "type": "S3ExecutionFactory", "declarator": "ef", "var_name": "ef"}, {"original_string": "private RuntimeMetadata metadata;", "modifier": "private", "type": "RuntimeMetadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private ExecutionContext ec;", "modifier": "private", "type": "ExecutionContext", "declarator": "ec", "var_name": "ec"}, {"original_string": "private String baseEndpoint;", "modifier": "private", "type": "String", "declarator": "baseEndpoint", "var_name": "baseEndpoint"}, {"original_string": "private String endpoint;", "modifier": "private", "type": "String", "declarator": "endpoint", "var_name": "endpoint"}, {"original_string": "private BinaryWSProcedureExecution execution = null;", "modifier": "private", "type": "BinaryWSProcedureExecution", "declarator": "execution = null", "var_name": "execution"}, {"original_string": "boolean isText = false;", "modifier": "", "type": "boolean", "declarator": "isText = false", "var_name": "isText"}, {"original_string": "boolean isList = false;", "modifier": "", "type": "boolean", "declarator": "isList = false", "var_name": "isList"}, {"original_string": "boolean streaming = false;", "modifier": "", "type": "boolean", "declarator": "streaming = false", "var_name": "streaming"}], "methods": [{"identifier": "S3ProcedureExecution", "parameters": "(Call command, S3ExecutionFactory ef, RuntimeMetadata metadata, ExecutionContext ec,\n            WSConnection conn)", "modifiers": "public", "return": "", "signature": " S3ProcedureExecution(Call command, S3ExecutionFactory ef, RuntimeMetadata metadata, ExecutionContext ec,\n            WSConnection conn)", "full_signature": "public  S3ProcedureExecution(Call command, S3ExecutionFactory ef, RuntimeMetadata metadata, ExecutionContext ec,\n            WSConnection conn)", "class_method_signature": "S3ProcedureExecution.S3ProcedureExecution(Call command, S3ExecutionFactory ef, RuntimeMetadata metadata, ExecutionContext ec,\n            WSConnection conn)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "S3ProcedureExecution.execute()", "testcase": false, "constructor": false}, {"identifier": "saveFile", "parameters": "(List<Argument> arguments)", "modifiers": "private", "return": "BinaryWSProcedureExecution", "signature": "BinaryWSProcedureExecution saveFile(List<Argument> arguments)", "full_signature": "private BinaryWSProcedureExecution saveFile(List<Argument> arguments)", "class_method_signature": "S3ProcedureExecution.saveFile(List<Argument> arguments)", "testcase": false, "constructor": false}, {"identifier": "determineEndpoint", "parameters": "(String name, String bucket, String region)", "modifiers": "protected", "return": "String", "signature": "String determineEndpoint(String name, String bucket, String region)", "full_signature": "protected String determineEndpoint(String name, String bucket, String region)", "class_method_signature": "S3ProcedureExecution.determineEndpoint(String name, String bucket, String region)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(List<Argument> arguments)", "modifiers": "private", "return": "BinaryWSProcedureExecution", "signature": "BinaryWSProcedureExecution getFile(List<Argument> arguments)", "full_signature": "private BinaryWSProcedureExecution getFile(List<Argument> arguments)", "class_method_signature": "S3ProcedureExecution.getFile(List<Argument> arguments)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(List<Argument> arguments)", "modifiers": "private", "return": "BinaryWSProcedureExecution", "signature": "BinaryWSProcedureExecution deleteFile(List<Argument> arguments)", "full_signature": "private BinaryWSProcedureExecution deleteFile(List<Argument> arguments)", "class_method_signature": "S3ProcedureExecution.deleteFile(List<Argument> arguments)", "testcase": false, "constructor": false}, {"identifier": "listBucketV1", "parameters": "(List<Argument> arguments)", "modifiers": "private", "return": "BinaryWSProcedureExecution", "signature": "BinaryWSProcedureExecution listBucketV1(List<Argument> arguments)", "full_signature": "private BinaryWSProcedureExecution listBucketV1(List<Argument> arguments)", "class_method_signature": "S3ProcedureExecution.listBucketV1(List<Argument> arguments)", "testcase": false, "constructor": false}, {"identifier": "listBucket", "parameters": "(List<Argument> arguments)", "modifiers": "private", "return": "BinaryWSProcedureExecution", "signature": "BinaryWSProcedureExecution listBucket(List<Argument> arguments)", "full_signature": "private BinaryWSProcedureExecution listBucket(List<Argument> arguments)", "class_method_signature": "S3ProcedureExecution.listBucket(List<Argument> arguments)", "testcase": false, "constructor": false}, {"identifier": "invokeHTTP", "parameters": "(String method,\n            String uri, Object payload, Map<String, String> headers)", "modifiers": "protected", "return": "BinaryWSProcedureExecution", "signature": "BinaryWSProcedureExecution invokeHTTP(String method,\n            String uri, Object payload, Map<String, String> headers)", "full_signature": "protected BinaryWSProcedureExecution invokeHTTP(String method,\n            String uri, Object payload, Map<String, String> headers)", "class_method_signature": "S3ProcedureExecution.invokeHTTP(String method,\n            String uri, Object payload, Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "S3ProcedureExecution.close()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "S3ProcedureExecution.cancel()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(String name)", "modifiers": "@SuppressWarnings(\"rawtypes\") private", "return": "String", "signature": "String getHeader(String name)", "full_signature": "@SuppressWarnings(\"rawtypes\") private String getHeader(String name)", "class_method_signature": "S3ProcedureExecution.getHeader(String name)", "testcase": false, "constructor": false}, {"identifier": "getErrorDescription", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getErrorDescription()", "full_signature": "private String getErrorDescription()", "class_method_signature": "S3ProcedureExecution.getErrorDescription()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "List<?>", "signature": "List<?> next()", "full_signature": "@Override public List<?> next()", "class_method_signature": "S3ProcedureExecution.next()", "testcase": false, "constructor": false}, {"identifier": "getOutputParameterValues", "parameters": "()", "modifiers": "@Override public", "return": "List<?>", "signature": "List<?> getOutputParameterValues()", "full_signature": "@Override public List<?> getOutputParameterValues()", "class_method_signature": "S3ProcedureExecution.getOutputParameterValues()", "testcase": false, "constructor": false}], "file": "connectors/amazon/translator-amazon-s3/src/main/java/org/teiid/translator/amazon/s3/S3ProcedureExecution.java"}, "focal_method": {"identifier": "determineEndpoint", "parameters": "(String name, String bucket, String region)", "modifiers": "protected", "return": "String", "body": "protected String determineEndpoint(String name, String bucket, String region) throws TranslatorException {\n        if (endpoint != null) {\n            return endpoint;\n        }\n        if (bucket == null) {\n            throw new TranslatorException(S3ExecutionFactory.UTIL.gs(\"no_bucket\")); //$NON-NLS-1$\n        }\n        if (baseEndpoint != null) {\n            endpoint = baseEndpoint;\n        } else if (region.equalsIgnoreCase(S3ExecutionFactory.US_EAST_1)) {\n            endpoint = AWS_S3_URL_PREFIX + AWS_S3_HOSTHAME;\n        } else {\n            endpoint = AWS_S3_URL_PREFIX + region + \".\" + AWS_S3_HOSTHAME; //$NON-NLS-1$\n        }\n        //TODO: is url encoding needed here\n        endpoint += ((!endpoint.endsWith(\"/\")?\"/\":\"\") + bucket + \"/\" + name); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n        return endpoint;\n    }", "signature": "String determineEndpoint(String name, String bucket, String region)", "full_signature": "protected String determineEndpoint(String name, String bucket, String region)", "class_method_signature": "S3ProcedureExecution.determineEndpoint(String name, String bucket, String region)", "testcase": false, "constructor": false, "invocations": ["gs", "equalsIgnoreCase", "endsWith"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}