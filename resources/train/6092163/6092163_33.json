{"test_class": {"identifier": "TestStringUtil", "superclass": "", "interfaces": "", "fields": [], "file": "common-core/src/test/java/org/teiid/core/util/TestStringUtil.java"}, "test_case": {"identifier": "testEndsWithIgnoreCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testEndsWithIgnoreCase() {\n        String text = \"test\"; //$NON-NLS-1$\n        assertEquals(false,StringUtil.endsWithIgnoreCase(null,text));\n        assertEquals(false,StringUtil.endsWithIgnoreCase(\"\",text)); //$NON-NLS-1$\n        assertEquals(false,StringUtil.endsWithIgnoreCase(text,null));\n        assertEquals(true,StringUtil.endsWithIgnoreCase(text,\"\")); //$NON-NLS-1$\n        assertEquals(false,StringUtil.endsWithIgnoreCase(text,\"testing\")); //$NON-NLS-1$\n\n        assertEquals(false,StringUtil.endsWithIgnoreCase(text,\"es\")); //$NON-NLS-1$\n        assertEquals(true,StringUtil.endsWithIgnoreCase(text,\"st\")); //$NON-NLS-1$\n        assertEquals(true,StringUtil.endsWithIgnoreCase(text,\"St\")); //$NON-NLS-1$\n        assertEquals(true,StringUtil.endsWithIgnoreCase(text,\"sT\")); //$NON-NLS-1$\n        assertEquals(true,StringUtil.endsWithIgnoreCase(text,\"ST\")); //$NON-NLS-1$\n    }", "signature": "void testEndsWithIgnoreCase()", "full_signature": "@Test public void testEndsWithIgnoreCase()", "class_method_signature": "TestStringUtil.testEndsWithIgnoreCase()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase", "assertEquals", "endsWithIgnoreCase"]}, "focal_class": {"identifier": "StringUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "join", "parameters": "(Collection<String> strings, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<String> strings, String delimiter)", "full_signature": "public static String join(Collection<String> strings, String delimiter)", "class_method_signature": "StringUtil.join(Collection<String> strings, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "( final Object[] array, final String delim )", "modifiers": "public static", "return": "String", "signature": "String toString( final Object[] array, final String delim )", "full_signature": "public static String toString( final Object[] array, final String delim )", "class_method_signature": "StringUtil.toString( final Object[] array, final String delim )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "( final Object[] array, final String delim, boolean includeBrackets)", "modifiers": "public static", "return": "String", "signature": "String toString( final Object[] array, final String delim, boolean includeBrackets)", "full_signature": "public static String toString( final Object[] array, final String delim, boolean includeBrackets)", "class_method_signature": "StringUtil.toString( final Object[] array, final String delim, boolean includeBrackets)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "( final Object[] array )", "modifiers": "public static", "return": "String", "signature": "String toString( final Object[] array )", "full_signature": "public static String toString( final Object[] array )", "class_method_signature": "StringUtil.toString( final Object[] array )", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, String splitter)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> split(String str, String splitter)", "full_signature": "public static List<String> split(String str, String splitter)", "class_method_signature": "StringUtil.split(String str, String splitter)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String source, String search, String replace)", "modifiers": "public static", "return": "String", "signature": "String replace(String source, String search, String replace)", "full_signature": "public static String replace(String source, String search, String replace)", "class_method_signature": "StringUtil.replace(String source, String search, String replace)", "testcase": false, "constructor": false}, {"identifier": "replaceAll", "parameters": "(String source, String search, String replace)", "modifiers": "public static", "return": "String", "signature": "String replaceAll(String source, String search, String replace)", "full_signature": "public static String replaceAll(String source, String search, String replace)", "class_method_signature": "StringUtil.replaceAll(String source, String search, String replace)", "testcase": false, "constructor": false}, {"identifier": "getTokens", "parameters": "(String str, String delimiter)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getTokens(String str, String delimiter)", "full_signature": "public static List<String> getTokens(String str, String delimiter)", "class_method_signature": "StringUtil.getTokens(String str, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "getLastToken", "parameters": "(String str, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String getLastToken(String str, String delimiter)", "full_signature": "public static String getLastToken(String str, String delimiter)", "class_method_signature": "StringUtil.getLastToken(String str, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "getFirstToken", "parameters": "(String str, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String getFirstToken(String str, String delimiter)", "full_signature": "public static String getFirstToken(String str, String delimiter)", "class_method_signature": "StringUtil.getFirstToken(String str, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "getStackTrace", "parameters": "( final Throwable t )", "modifiers": "public static", "return": "String", "signature": "String getStackTrace( final Throwable t )", "full_signature": "public static String getStackTrace( final Throwable t )", "class_method_signature": "StringUtil.getStackTrace( final Throwable t )", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(final String text)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(final String text)", "full_signature": "public static boolean isEmpty(final String text)", "class_method_signature": "StringUtil.isEmpty(final String text)", "testcase": false, "constructor": false}, {"identifier": "indexOfIgnoreCase", "parameters": "(final String text, final String str)", "modifiers": "public static", "return": "int", "signature": "int indexOfIgnoreCase(final String text, final String str)", "full_signature": "public static int indexOfIgnoreCase(final String text, final String str)", "class_method_signature": "StringUtil.indexOfIgnoreCase(final String text, final String str)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCase", "parameters": "(final String text, final String prefix)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCase(final String text, final String prefix)", "full_signature": "public static boolean startsWithIgnoreCase(final String text, final String prefix)", "class_method_signature": "StringUtil.startsWithIgnoreCase(final String text, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "endsWithIgnoreCase", "parameters": "(final String text, final String suffix)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWithIgnoreCase(final String text, final String suffix)", "full_signature": "public static boolean endsWithIgnoreCase(final String text, final String suffix)", "class_method_signature": "StringUtil.endsWithIgnoreCase(final String text, final String suffix)", "testcase": false, "constructor": false}, {"identifier": "StringUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtil()", "full_signature": "private  StringUtil()", "class_method_signature": "StringUtil.StringUtil()", "testcase": false, "constructor": true}, {"identifier": "isLetter", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLetter(char c)", "full_signature": "public static boolean isLetter(char c)", "class_method_signature": "StringUtil.isLetter(char c)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "public static boolean isDigit(char c)", "class_method_signature": "StringUtil.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "isLetterOrDigit", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLetterOrDigit(char c)", "full_signature": "public static boolean isLetterOrDigit(char c)", "class_method_signature": "StringUtil.isLetterOrDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "isBasicLatinLetter", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isBasicLatinLetter(char c)", "full_signature": "private static boolean isBasicLatinLetter(char c)", "class_method_signature": "StringUtil.isBasicLatinLetter(char c)", "testcase": false, "constructor": false}, {"identifier": "isBasicLatinDigit", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isBasicLatinDigit(char c)", "full_signature": "private static boolean isBasicLatinDigit(char c)", "class_method_signature": "StringUtil.isBasicLatinDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String value, Class type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T valueOf(String value, Class type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T valueOf(String value, Class type)", "class_method_signature": "StringUtil.valueOf(String value, Class type)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreCase", "parameters": "(String s1, String s2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsIgnoreCase(String s1, String s2)", "full_signature": "public static boolean equalsIgnoreCase(String s1, String s2)", "class_method_signature": "StringUtil.equalsIgnoreCase(String s1, String s2)", "testcase": false, "constructor": false}, {"identifier": "caseInsensitiveValueOf", "parameters": "(Class<T> enumType, String name)", "modifiers": "public static", "return": "T", "signature": "T caseInsensitiveValueOf(Class<T> enumType, String name)", "full_signature": "public static T caseInsensitiveValueOf(Class<T> enumType, String name)", "class_method_signature": "StringUtil.caseInsensitiveValueOf(Class<T> enumType, String name)", "testcase": false, "constructor": false}, {"identifier": "tokenize", "parameters": "(String str, char delim)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> tokenize(String str, char delim)", "full_signature": "public static List<String> tokenize(String str, char delim)", "class_method_signature": "StringUtil.tokenize(String str, char delim)", "testcase": false, "constructor": false}, {"identifier": "unescape", "parameters": "(CharSequence string, int quoteChar, boolean useAsciiEscapes, StringBuilder sb)", "modifiers": "public static", "return": "String", "signature": "String unescape(CharSequence string, int quoteChar, boolean useAsciiEscapes, StringBuilder sb)", "full_signature": "public static String unescape(CharSequence string, int quoteChar, boolean useAsciiEscapes, StringBuilder sb)", "class_method_signature": "StringUtil.unescape(CharSequence string, int quoteChar, boolean useAsciiEscapes, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "parseNumericValue", "parameters": "(CharSequence string, StringBuilder sb,\n            int i, int value, int possibleDigits, int radixExp)", "modifiers": "private static", "return": "int", "signature": "int parseNumericValue(CharSequence string, StringBuilder sb,\n            int i, int value, int possibleDigits, int radixExp)", "full_signature": "private static int parseNumericValue(CharSequence string, StringBuilder sb,\n            int i, int value, int possibleDigits, int radixExp)", "class_method_signature": "StringUtil.parseNumericValue(CharSequence string, StringBuilder sb,\n            int i, int value, int possibleDigits, int radixExp)", "testcase": false, "constructor": false}], "file": "common-core/src/main/java/org/teiid/core/util/StringUtil.java"}, "focal_method": {"identifier": "endsWithIgnoreCase", "parameters": "(final String text, final String suffix)", "modifiers": "public static", "return": "boolean", "body": "public static boolean endsWithIgnoreCase(final String text, final String suffix) {\n        if (text == null || suffix == null) {\n            return false;\n        }\n        return text.regionMatches(true, text.length() - suffix.length(), suffix, 0, suffix.length());\n    }", "signature": "boolean endsWithIgnoreCase(final String text, final String suffix)", "full_signature": "public static boolean endsWithIgnoreCase(final String text, final String suffix)", "class_method_signature": "StringUtil.endsWithIgnoreCase(final String text, final String suffix)", "testcase": false, "constructor": false, "invocations": ["regionMatches", "length", "length", "length"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}