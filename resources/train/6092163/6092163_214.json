{"test_class": {"identifier": "TestSQLConversionVisitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ExecutionContextImpl context = new ExecutionContextImpl(\"VDB\",  //$NON-NLS-1$\n                                                                            1,\n                                                                            \"Payload\",  //$NON-NLS-1$\n                                                                            \"ConnectionID\",   //$NON-NLS-1$\n                                                                            \"Connector\", //$NON-NLS-1$\n                                                                            1,\n                                                                            \"PartID\",  //$NON-NLS-1$\n                                                                            \"ExecCount\");", "modifier": "public static final", "type": "ExecutionContextImpl", "declarator": "context = new ExecutionContextImpl(\"VDB\",  //$NON-NLS-1$\n                                                                            1,\n                                                                            \"Payload\",  //$NON-NLS-1$\n                                                                            \"ConnectionID\",   //$NON-NLS-1$\n                                                                            \"Connector\", //$NON-NLS-1$\n                                                                            1,\n                                                                            \"PartID\",  //$NON-NLS-1$\n                                                                            \"ExecCount\")", "var_name": "context"}, {"original_string": "private static JDBCExecutionFactory TRANSLATOR;", "modifier": "private static", "type": "JDBCExecutionFactory", "declarator": "TRANSLATOR", "var_name": "TRANSLATOR"}], "file": "connectors/jdbc/translator-jdbc/src/test/java/org/teiid/translator/jdbc/TestSQLConversionVisitor.java"}, "test_case": {"identifier": "testFunctionNativeQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testFunctionNativeQuery() throws SQLException {\n        String ddl = \"create foreign table t (x integer, y integer); create foreign function bsl (arg1 integer, arg2 integer) returns integer OPTIONS (\\\"teiid_rel:native-query\\\" '$1 << $2');\";\n\n        helpTestVisitor(ddl,\n                        \"select bsl(x, y) from t\", //$NON-NLS-1$\n                        \"SELECT t.x << t.y FROM t\", //$NON-NLS-1$\n                        true);\n        //make sure we don't treat arguments as bind values\n        helpTestVisitor(ddl,\n                \"select bsl(x, y) from t where x = 1 + 1\", //$NON-NLS-1$\n                \"SELECT t.x << t.y FROM t WHERE t.x = ?\", //$NON-NLS-1$\n                true);\n\n        TranslatedCommand tc = helpTestVisitor(ddl,\n                \"select bsl(1, y) from t where x = y\", //$NON-NLS-1$\n                \"SELECT ? << t.y FROM t WHERE t.x = t.y\", //$NON-NLS-1$\n                true);\n        JDBCQueryExecution qe = new JDBCQueryExecution(null, null, Mockito.mock(ExecutionContext.class), TRANSLATOR);\n        PreparedStatement ps = Mockito.mock(PreparedStatement.class);\n        qe.bind(ps, tc.getPreparedValues(), null);\n        Mockito.verify(ps, Mockito.times(1)).setObject(1, 1, Types.INTEGER);\n    }", "signature": "void testFunctionNativeQuery()", "full_signature": "@Test public void testFunctionNativeQuery()", "class_method_signature": "TestSQLConversionVisitor.testFunctionNativeQuery()", "testcase": true, "constructor": false, "invocations": ["helpTestVisitor", "helpTestVisitor", "helpTestVisitor", "mock", "mock", "bind", "getPreparedValues", "setObject", "verify", "times"]}, "focal_class": {"identifier": "SQLConversionVisitor", "superclass": "extends SQLStringVisitor", "interfaces": "implements SQLStringVisitor.Substitutor", "fields": [{"original_string": "public static final String TEIID_NON_PREPARED = AbstractMetadataRecord.RELATIONAL_PREFIX + \"non-prepared\";", "modifier": "public static final", "type": "String", "declarator": "TEIID_NON_PREPARED = AbstractMetadataRecord.RELATIONAL_PREFIX + \"non-prepared\"", "var_name": "TEIID_NON_PREPARED"}, {"original_string": "private static DecimalFormat DECIMAL_FORMAT =\n        new DecimalFormat(\"#############################0.0#############################\", DecimalFormatSymbols.getInstance(Locale.US));", "modifier": "private static", "type": "DecimalFormat", "declarator": "DECIMAL_FORMAT =\n        new DecimalFormat(\"#############################0.0#############################\", DecimalFormatSymbols.getInstance(Locale.US))", "var_name": "DECIMAL_FORMAT"}, {"original_string": "private static double SCIENTIFIC_LOW = Math.pow(10, -3);", "modifier": "private static", "type": "double", "declarator": "SCIENTIFIC_LOW = Math.pow(10, -3)", "var_name": "SCIENTIFIC_LOW"}, {"original_string": "private static double SCIENTIFIC_HIGH = Math.pow(10, 7);", "modifier": "private static", "type": "double", "declarator": "SCIENTIFIC_HIGH = Math.pow(10, 7)", "var_name": "SCIENTIFIC_HIGH"}, {"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private JDBCExecutionFactory executionFactory;", "modifier": "private", "type": "JDBCExecutionFactory", "declarator": "executionFactory", "var_name": "executionFactory"}, {"original_string": "private boolean prepared;", "modifier": "private", "type": "boolean", "declarator": "prepared", "var_name": "prepared"}, {"original_string": "private boolean usingBinding;", "modifier": "private", "type": "boolean", "declarator": "usingBinding", "var_name": "usingBinding"}, {"original_string": "private List preparedValues = new ArrayList();", "modifier": "private", "type": "List", "declarator": "preparedValues = new ArrayList()", "var_name": "preparedValues"}, {"original_string": "private Set<LanguageObject> recursionObjects = Collections.newSetFromMap(new IdentityHashMap<LanguageObject, Boolean>());", "modifier": "private", "type": "Set<LanguageObject>", "declarator": "recursionObjects = Collections.newSetFromMap(new IdentityHashMap<LanguageObject, Boolean>())", "var_name": "recursionObjects"}, {"original_string": "private Map<LanguageObject, Object> translations = new IdentityHashMap<LanguageObject, Object>();", "modifier": "private", "type": "Map<LanguageObject, Object>", "declarator": "translations = new IdentityHashMap<LanguageObject, Object>()", "var_name": "translations"}, {"original_string": "private boolean replaceWithBinding = false;", "modifier": "private", "type": "boolean", "declarator": "replaceWithBinding = false", "var_name": "replaceWithBinding"}], "methods": [{"identifier": "SQLConversionVisitor", "parameters": "(JDBCExecutionFactory ef)", "modifiers": "public", "return": "", "signature": " SQLConversionVisitor(JDBCExecutionFactory ef)", "full_signature": "public  SQLConversionVisitor(JDBCExecutionFactory ef)", "class_method_signature": "SQLConversionVisitor.SQLConversionVisitor(JDBCExecutionFactory ef)", "testcase": false, "constructor": true}, {"identifier": "append", "parameters": "(LanguageObject obj)", "modifiers": "@Override public", "return": "void", "signature": "void append(LanguageObject obj)", "full_signature": "@Override public void append(LanguageObject obj)", "class_method_signature": "SQLConversionVisitor.append(LanguageObject obj)", "testcase": false, "constructor": false}, {"identifier": "translateSQLType", "parameters": "(Class<?> type, Object obj, StringBuilder valuesbuffer)", "modifiers": "protected", "return": "void", "signature": "void translateSQLType(Class<?> type, Object obj, StringBuilder valuesbuffer)", "full_signature": "protected void translateSQLType(Class<?> type, Object obj, StringBuilder valuesbuffer)", "class_method_signature": "SQLConversionVisitor.translateSQLType(Class<?> type, Object obj, StringBuilder valuesbuffer)", "testcase": false, "constructor": false}, {"identifier": "isNonAscii", "parameters": "(String val)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNonAscii(String val)", "full_signature": "protected boolean isNonAscii(String val)", "class_method_signature": "SQLConversionVisitor.isNonAscii(String val)", "testcase": false, "constructor": false}, {"identifier": "removeCharacters", "parameters": "(String value)", "modifiers": "protected", "return": "String", "signature": "String removeCharacters(String value)", "full_signature": "protected String removeCharacters(String value)", "class_method_signature": "SQLConversionVisitor.removeCharacters(String value)", "testcase": false, "constructor": false}, {"identifier": "useUnicodePrefix", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean useUnicodePrefix()", "full_signature": "protected boolean useUnicodePrefix()", "class_method_signature": "SQLConversionVisitor.useUnicodePrefix()", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Call obj)", "modifiers": "public", "return": "void", "signature": "void visit(Call obj)", "full_signature": "public void visit(Call obj)", "class_method_signature": "SQLConversionVisitor.visit(Call obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Function obj)", "modifiers": "public", "return": "void", "signature": "void visit(Function obj)", "full_signature": "public void visit(Function obj)", "class_method_signature": "SQLConversionVisitor.visit(Function obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Parameter obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(Parameter obj)", "full_signature": "@Override public void visit(Parameter obj)", "class_method_signature": "SQLConversionVisitor.visit(Parameter obj)", "testcase": false, "constructor": false}, {"identifier": "addBinding", "parameters": "(LanguageObject value)", "modifiers": "protected", "return": "void", "signature": "void addBinding(LanguageObject value)", "full_signature": "protected void addBinding(LanguageObject value)", "class_method_signature": "SQLConversionVisitor.addBinding(LanguageObject value)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Literal obj)", "modifiers": "public", "return": "void", "signature": "void visit(Literal obj)", "full_signature": "public void visit(Literal obj)", "class_method_signature": "SQLConversionVisitor.visit(Literal obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(In obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(In obj)", "full_signature": "@Override public void visit(In obj)", "class_method_signature": "SQLConversionVisitor.visit(In obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Like obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(Like obj)", "full_signature": "@Override public void visit(Like obj)", "class_method_signature": "SQLConversionVisitor.visit(Like obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Comparison obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(Comparison obj)", "full_signature": "@Override public void visit(Comparison obj)", "class_method_signature": "SQLConversionVisitor.visit(Comparison obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ExpressionValueSource obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(ExpressionValueSource obj)", "full_signature": "@Override public void visit(ExpressionValueSource obj)", "class_method_signature": "SQLConversionVisitor.visit(ExpressionValueSource obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(SetClause obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(SetClause obj)", "full_signature": "@Override public void visit(SetClause obj)", "class_method_signature": "SQLConversionVisitor.visit(SetClause obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(DerivedColumn obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(DerivedColumn obj)", "full_signature": "@Override public void visit(DerivedColumn obj)", "class_method_signature": "SQLConversionVisitor.visit(DerivedColumn obj)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(SearchedCase obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(SearchedCase obj)", "full_signature": "@Override public void visit(SearchedCase obj)", "class_method_signature": "SQLConversionVisitor.visit(SearchedCase obj)", "testcase": false, "constructor": false}, {"identifier": "setExecutionContext", "parameters": "(ExecutionContext context)", "modifiers": "public", "return": "void", "signature": "void setExecutionContext(ExecutionContext context)", "full_signature": "public void setExecutionContext(ExecutionContext context)", "class_method_signature": "SQLConversionVisitor.setExecutionContext(ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "getExecutionContext", "parameters": "()", "modifiers": "protected", "return": "ExecutionContext", "signature": "ExecutionContext getExecutionContext()", "full_signature": "protected ExecutionContext getExecutionContext()", "class_method_signature": "SQLConversionVisitor.getExecutionContext()", "testcase": false, "constructor": false}, {"identifier": "getSourceComment", "parameters": "(Command command)", "modifiers": "protected", "return": "String", "signature": "String getSourceComment(Command command)", "full_signature": "protected String getSourceComment(Command command)", "class_method_signature": "SQLConversionVisitor.getSourceComment(Command command)", "testcase": false, "constructor": false}, {"identifier": "generateSqlForStoredProcedure", "parameters": "(Call exec)", "modifiers": "protected", "return": "void", "signature": "void generateSqlForStoredProcedure(Call exec)", "full_signature": "protected void generateSqlForStoredProcedure(Call exec)", "class_method_signature": "SQLConversionVisitor.generateSqlForStoredProcedure(Call exec)", "testcase": false, "constructor": false}, {"identifier": "getPreparedValues", "parameters": "()", "modifiers": "", "return": "List", "signature": "List getPreparedValues()", "full_signature": " List getPreparedValues()", "class_method_signature": "SQLConversionVisitor.getPreparedValues()", "testcase": false, "constructor": false}, {"identifier": "isPrepared", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPrepared()", "full_signature": "public boolean isPrepared()", "class_method_signature": "SQLConversionVisitor.isPrepared()", "testcase": false, "constructor": false}, {"identifier": "setPrepared", "parameters": "(boolean prepared)", "modifiers": "public", "return": "void", "signature": "void setPrepared(boolean prepared)", "full_signature": "public void setPrepared(boolean prepared)", "class_method_signature": "SQLConversionVisitor.setPrepared(boolean prepared)", "testcase": false, "constructor": false}, {"identifier": "isUsingBinding", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsingBinding()", "full_signature": "public boolean isUsingBinding()", "class_method_signature": "SQLConversionVisitor.isUsingBinding()", "testcase": false, "constructor": false}, {"identifier": "useAsInGroupAlias", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean useAsInGroupAlias()", "full_signature": "@Override protected boolean useAsInGroupAlias()", "class_method_signature": "SQLConversionVisitor.useAsInGroupAlias()", "testcase": false, "constructor": false}, {"identifier": "useParensForSetQueries", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean useParensForSetQueries()", "full_signature": "@Override protected boolean useParensForSetQueries()", "class_method_signature": "SQLConversionVisitor.useParensForSetQueries()", "testcase": false, "constructor": false}, {"identifier": "replaceElementName", "parameters": "(String group, String element)", "modifiers": "@Override protected", "return": "String", "signature": "String replaceElementName(String group, String element)", "full_signature": "@Override protected String replaceElementName(String group, String element)", "class_method_signature": "SQLConversionVisitor.replaceElementName(String group, String element)", "testcase": false, "constructor": false}, {"identifier": "appendSetOperation", "parameters": "(Operation operation)", "modifiers": "@Override protected", "return": "void", "signature": "void appendSetOperation(Operation operation)", "full_signature": "@Override protected void appendSetOperation(Operation operation)", "class_method_signature": "SQLConversionVisitor.appendSetOperation(Operation operation)", "testcase": false, "constructor": false}, {"identifier": "useParensForJoins", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean useParensForJoins()", "full_signature": "@Override protected boolean useParensForJoins()", "class_method_signature": "SQLConversionVisitor.useParensForJoins()", "testcase": false, "constructor": false}, {"identifier": "useSelectLimit", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean useSelectLimit()", "full_signature": "protected boolean useSelectLimit()", "class_method_signature": "SQLConversionVisitor.useSelectLimit()", "testcase": false, "constructor": false}, {"identifier": "getLikeRegexString", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getLikeRegexString()", "full_signature": "@Override protected String getLikeRegexString()", "class_method_signature": "SQLConversionVisitor.getLikeRegexString()", "testcase": false, "constructor": false}, {"identifier": "appendBaseName", "parameters": "(NamedTable obj)", "modifiers": "@Override protected", "return": "void", "signature": "void appendBaseName(NamedTable obj)", "full_signature": "@Override protected void appendBaseName(NamedTable obj)", "class_method_signature": "SQLConversionVisitor.appendBaseName(NamedTable obj)", "testcase": false, "constructor": false}, {"identifier": "substitute", "parameters": "(Argument arg, StringBuilder builder, int index)", "modifiers": "@Override public", "return": "void", "signature": "void substitute(Argument arg, StringBuilder builder, int index)", "full_signature": "@Override public void substitute(Argument arg, StringBuilder builder, int index)", "class_method_signature": "SQLConversionVisitor.substitute(Argument arg, StringBuilder builder, int index)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(GroupBy obj)", "modifiers": "@Override public", "return": "void", "signature": "void visit(GroupBy obj)", "full_signature": "@Override public void visit(GroupBy obj)", "class_method_signature": "SQLConversionVisitor.visit(GroupBy obj)", "testcase": false, "constructor": false}, {"identifier": "appendLateralKeyword", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void appendLateralKeyword()", "full_signature": "@Override protected void appendLateralKeyword()", "class_method_signature": "SQLConversionVisitor.appendLateralKeyword()", "testcase": false, "constructor": false}], "file": "connectors/jdbc/translator-jdbc/src/main/java/org/teiid/translator/jdbc/SQLConversionVisitor.java"}, "focal_method": {"identifier": "getPreparedValues", "parameters": "()", "modifiers": "", "return": "List", "body": "List getPreparedValues() {\n        return this.preparedValues;\n    }", "signature": "List getPreparedValues()", "full_signature": " List getPreparedValues()", "class_method_signature": "SQLConversionVisitor.getPreparedValues()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}