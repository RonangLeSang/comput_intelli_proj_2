{"test_class": {"identifier": "TestSwaggerMetadataProcessor", "superclass": "", "interfaces": "", "fields": [], "file": "connectors/openapi/translator-openapi/src/test/java/org/teiid/translator/swagger/TestSwaggerMetadataProcessor.java"}, "test_case": {"identifier": "testSwaggerINParameterTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSwaggerINParameterTypes() throws TranslatorException {\n        SwaggerExecutionFactory translator = new SwaggerExecutionFactory();\n        translator.start();\n        MetadataFactory mf = swaggerMetadata(translator);\n\n        for(Procedure p : mf.getSchema().getProcedures().values()) {\n            // multiple in parameter\n            if(p.getName().equals(\"getByNumCityCountry\")) {\n                List<ProcedureParameter> params = p.getParameters();\n                for(ProcedureParameter param : params) {\n                    assertEquals(RestMetadataExtension.ParameterType.QUERY.name(),\n                            param.getProperty(RestMetadataExtension.PARAMETER_TYPE, false).toUpperCase());\n                }\n                assertEquals(3, params.size());\n                assertTrue(params.get(0).getName().equalsIgnoreCase(\"customernumber\"));\n                assertTrue(params.get(1).getName().equalsIgnoreCase(\"city\"));\n                assertTrue(params.get(2).getName().equalsIgnoreCase(\"country\"));\n            }\n            // QueryParameter and  PathParameter\n            else if (p.getName().equals(\"getCustomerByCity\")\n                    || p.getName().equals(\"getCustomerByCountry\")\n                    && p.getName().equals(\"getByNumCityCountry\")) {\n                for(ProcedureParameter param : p.getParameters()) {\n                    assertEquals(RestMetadataExtension.ParameterType.QUERY.name(),\n                            param.getProperty(RestMetadataExtension.PARAMETER_TYPE, false).toUpperCase());\n                }\n            } else if(p.getName().equals(\"getCustomerByNumber\") || p.getName().equals(\"getCustomerByName\")) {\n                for(ProcedureParameter param : p.getParameters()) {\n                    assertEquals(RestMetadataExtension.ParameterType.PATH.name(),\n                            param.getProperty(RestMetadataExtension.PARAMETER_TYPE, false).toUpperCase());\n                }\n            }\n            // Post parameter\n            else if (p.getName().equals(\"addCustomer\")\n                    || p.getName().equals(\"addOneCustomer\")\n                    || p.getName().equals(\"addCustomerList\")) {\n                ProcedureParameter param = p.getParameters().get(0);\n                assertEquals(RestMetadataExtension.ParameterType.BODY.name(),\n                        param.getProperty(RestMetadataExtension.PARAMETER_TYPE, false).toUpperCase());\n            }\n\n            if (p.getName().equals(\"addCustomer\")) {\n                List<ProcedureParameter> params = p.getParameters();\n                assertEquals(13, params.size());\n                assertEquals(\"customernumber\", params.get(0).getName());\n                assertEquals(\"creditlimit\", params.get(12).getName());\n            }\n        }\n    }", "signature": "void testSwaggerINParameterTypes()", "full_signature": "@Test public void testSwaggerINParameterTypes()", "class_method_signature": "TestSwaggerMetadataProcessor.testSwaggerINParameterTypes()", "testcase": true, "constructor": false, "invocations": ["start", "swaggerMetadata", "values", "getProcedures", "getSchema", "equals", "getName", "getParameters", "assertEquals", "name", "toUpperCase", "getProperty", "assertEquals", "size", "assertTrue", "equalsIgnoreCase", "getName", "get", "assertTrue", "equalsIgnoreCase", "getName", "get", "assertTrue", "equalsIgnoreCase", "getName", "get", "equals", "getName", "equals", "getName", "equals", "getName", "getParameters", "assertEquals", "name", "toUpperCase", "getProperty", "equals", "getName", "equals", "getName", "getParameters", "assertEquals", "name", "toUpperCase", "getProperty", "equals", "getName", "equals", "getName", "equals", "getName", "get", "getParameters", "assertEquals", "name", "toUpperCase", "getProperty", "equals", "getName", "getParameters", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getName", "get"]}, "focal_class": {"identifier": "SwaggerMetadataProcessor", "superclass": "", "interfaces": "implements MetadataProcessor<WSConnection>", "fields": [{"original_string": "private static final String ARRAY_SUFFIX = \"[]\";", "modifier": "private static final", "type": "String", "declarator": "ARRAY_SUFFIX = \"[]\"", "var_name": "ARRAY_SUFFIX"}, {"original_string": "public static final String KEY_NAME = \"key_name\";", "modifier": "public static final", "type": "String", "declarator": "KEY_NAME = \"key_name\"", "var_name": "KEY_NAME"}, {"original_string": "public static final String KEY_VALUE = \"key_value\";", "modifier": "public static final", "type": "String", "declarator": "KEY_VALUE = \"key_value\"", "var_name": "KEY_VALUE"}, {"original_string": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"URI\",\n            description=\"Used to define endpoint of the procedure\", required=true)\n    public final static String URI = RestMetadataExtension.URI;", "modifier": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"URI\",\n            description=\"Used to define endpoint of the procedure\", required=true)\n    public final static", "type": "String", "declarator": "URI = RestMetadataExtension.URI", "var_name": "URI"}, {"original_string": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Http Method\",\n            description=\"Http method used to execute the procedure\", required=true,\n            allowed=\"GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH\")\n    public final static String METHOD = RestMetadataExtension.METHOD;", "modifier": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Http Method\",\n            description=\"Http method used to execute the procedure\", required=true,\n            allowed=\"GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH\")\n    public final static", "type": "String", "declarator": "METHOD = RestMetadataExtension.METHOD", "var_name": "METHOD"}, {"original_string": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Scheme\",\n            description=\"Scheme to use http, https etc.\",\n            allowed=\"HTTP,HTTPS\")\n    public final static String SCHEME = RestMetadataExtension.SCHEME;", "modifier": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Scheme\",\n            description=\"Scheme to use http, https etc.\",\n            allowed=\"HTTP,HTTPS\")\n    public final static", "type": "String", "declarator": "SCHEME = RestMetadataExtension.SCHEME", "var_name": "SCHEME"}, {"original_string": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Produces\",\n            description=\"Used to define content type produced by this procedure, default JSON assumed\")\n    public final static String PRODUCES = RestMetadataExtension.PRODUCES;", "modifier": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Produces\",\n            description=\"Used to define content type produced by this procedure, default JSON assumed\")\n    public final static", "type": "String", "declarator": "PRODUCES = RestMetadataExtension.PRODUCES", "var_name": "PRODUCES"}, {"original_string": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Consumes\",\n            description=\"Used to define content type consumed by this procedure with body type parameters. Default JSON assumed\")\n    public final static String CONSUMES = RestMetadataExtension.CONSUMES;", "modifier": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Consumes\",\n            description=\"Used to define content type consumed by this procedure with body type parameters. Default JSON assumed\")\n    public final static", "type": "String", "declarator": "CONSUMES = RestMetadataExtension.CONSUMES", "var_name": "CONSUMES"}, {"original_string": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Charset\",\n            description=\"Encoding of the return data\")\n    public final static String CHARSET = RestMetadataExtension.CHARSET;", "modifier": "@ExtensionMetadataProperty(applicable=Procedure.class, datatype=String.class, display=\"Charset\",\n            description=\"Encoding of the return data\")\n    public final static", "type": "String", "declarator": "CHARSET = RestMetadataExtension.CHARSET", "var_name": "CHARSET"}, {"original_string": "@ExtensionMetadataProperty(applicable=ProcedureParameter.class, datatype=String.class, display=\"Parameter Type\",\n            description=\"Parameter type, as to how the parameter is being provided to the procedure\", required=true,\n            allowed=\"PATH,QUERY,FORM,FORMDATA,BODY,HEADER\")\n    public final static String PARAMETER_TYPE = RestMetadataExtension.PARAMETER_TYPE;", "modifier": "@ExtensionMetadataProperty(applicable=ProcedureParameter.class, datatype=String.class, display=\"Parameter Type\",\n            description=\"Parameter type, as to how the parameter is being provided to the procedure\", required=true,\n            allowed=\"PATH,QUERY,FORM,FORMDATA,BODY,HEADER\")\n    public final static", "type": "String", "declarator": "PARAMETER_TYPE = RestMetadataExtension.PARAMETER_TYPE", "var_name": "PARAMETER_TYPE"}, {"original_string": "@ExtensionMetadataProperty(applicable=ProcedureParameter.class, datatype=String.class, display=\"Collection Format\",\n            description=\"Determines the format of the array if type array is used, like CSV,TSV etc.\",\n            allowed=\"CSV,SSV,TSV,PIPES,MULTI\")\n    public final static String COLLECION_FORMAT = RestMetadataExtension.COLLECION_FORMAT;", "modifier": "@ExtensionMetadataProperty(applicable=ProcedureParameter.class, datatype=String.class, display=\"Collection Format\",\n            description=\"Determines the format of the array if type array is used, like CSV,TSV etc.\",\n            allowed=\"CSV,SSV,TSV,PIPES,MULTI\")\n    public final static", "type": "String", "declarator": "COLLECION_FORMAT = RestMetadataExtension.COLLECION_FORMAT", "var_name": "COLLECION_FORMAT"}, {"original_string": "private String swaggerFilePath;", "modifier": "private", "type": "String", "declarator": "swaggerFilePath", "var_name": "swaggerFilePath"}, {"original_string": "private boolean useDefaultHost = true;", "modifier": "private", "type": "boolean", "declarator": "useDefaultHost = true", "var_name": "useDefaultHost"}, {"original_string": "private String preferredScheme;", "modifier": "private", "type": "String", "declarator": "preferredScheme", "var_name": "preferredScheme"}, {"original_string": "private String preferredProduces = \"application/json\";", "modifier": "private", "type": "String", "declarator": "preferredProduces = \"application/json\"", "var_name": "preferredProduces"}, {"original_string": "private String preferredConsumes = \"application/json\";", "modifier": "private", "type": "String", "declarator": "preferredConsumes = \"application/json\"", "var_name": "preferredConsumes"}, {"original_string": "private SwaggerExecutionFactory ef;", "modifier": "private", "type": "SwaggerExecutionFactory", "declarator": "ef", "var_name": "ef"}], "methods": [{"identifier": "SwaggerMetadataProcessor", "parameters": "(SwaggerExecutionFactory ef)", "modifiers": "public", "return": "", "signature": " SwaggerMetadataProcessor(SwaggerExecutionFactory ef)", "full_signature": "public  SwaggerMetadataProcessor(SwaggerExecutionFactory ef)", "class_method_signature": "SwaggerMetadataProcessor.SwaggerMetadataProcessor(SwaggerExecutionFactory ef)", "testcase": false, "constructor": true}, {"identifier": "getSwaggerFilePath", "parameters": "()", "modifiers": "@TranslatorProperty(display=\"Swagger metadata file path\", category=PropertyType.IMPORT, description=\"Swagger metadata file path.\") public", "return": "String", "signature": "String getSwaggerFilePath()", "full_signature": "@TranslatorProperty(display=\"Swagger metadata file path\", category=PropertyType.IMPORT, description=\"Swagger metadata file path.\") public String getSwaggerFilePath()", "class_method_signature": "SwaggerMetadataProcessor.getSwaggerFilePath()", "testcase": false, "constructor": false}, {"identifier": "setSwaggerFilePath", "parameters": "(String swaggerFilePath)", "modifiers": "public", "return": "void", "signature": "void setSwaggerFilePath(String swaggerFilePath)", "full_signature": "public void setSwaggerFilePath(String swaggerFilePath)", "class_method_signature": "SwaggerMetadataProcessor.setSwaggerFilePath(String swaggerFilePath)", "testcase": false, "constructor": false}, {"identifier": "isUseDefaultHost", "parameters": "()", "modifiers": "@TranslatorProperty(display=\"Use Host from Swagger File\", category=PropertyType.IMPORT, description=\"Use default host specified in the Swagger file; Defaults to true\") public", "return": "boolean", "signature": "boolean isUseDefaultHost()", "full_signature": "@TranslatorProperty(display=\"Use Host from Swagger File\", category=PropertyType.IMPORT, description=\"Use default host specified in the Swagger file; Defaults to true\") public boolean isUseDefaultHost()", "class_method_signature": "SwaggerMetadataProcessor.isUseDefaultHost()", "testcase": false, "constructor": false}, {"identifier": "setUseDefaultHost", "parameters": "(boolean useDefault)", "modifiers": "public", "return": "void", "signature": "void setUseDefaultHost(boolean useDefault)", "full_signature": "public void setUseDefaultHost(boolean useDefault)", "class_method_signature": "SwaggerMetadataProcessor.setUseDefaultHost(boolean useDefault)", "testcase": false, "constructor": false}, {"identifier": "getPreferredScheme", "parameters": "()", "modifiers": "@TranslatorProperty(display=\"Preferred Scheme\", category=PropertyType.IMPORT, description=\"Preferred Scheme to use when Swagger file supports multiple invocation schemes like http, https etc.\") public", "return": "String", "signature": "String getPreferredScheme()", "full_signature": "@TranslatorProperty(display=\"Preferred Scheme\", category=PropertyType.IMPORT, description=\"Preferred Scheme to use when Swagger file supports multiple invocation schemes like http, https etc.\") public String getPreferredScheme()", "class_method_signature": "SwaggerMetadataProcessor.getPreferredScheme()", "testcase": false, "constructor": false}, {"identifier": "setPreferredScheme", "parameters": "(String scheme)", "modifiers": "public", "return": "void", "signature": "void setPreferredScheme(String scheme)", "full_signature": "public void setPreferredScheme(String scheme)", "class_method_signature": "SwaggerMetadataProcessor.setPreferredScheme(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getPreferredProduces", "parameters": "()", "modifiers": "@TranslatorProperty(display=\"Preferred Accept Header\", category=PropertyType.IMPORT, description=\"Preferred Accept MIME type header, this should be one of the Swagger \" + \"'produces' types; default is application/json\") public", "return": "String", "signature": "String getPreferredProduces()", "full_signature": "@TranslatorProperty(display=\"Preferred Accept Header\", category=PropertyType.IMPORT, description=\"Preferred Accept MIME type header, this should be one of the Swagger \" + \"'produces' types; default is application/json\") public String getPreferredProduces()", "class_method_signature": "SwaggerMetadataProcessor.getPreferredProduces()", "testcase": false, "constructor": false}, {"identifier": "setPreferredProduces", "parameters": "(String accept)", "modifiers": "public", "return": "void", "signature": "void setPreferredProduces(String accept)", "full_signature": "public void setPreferredProduces(String accept)", "class_method_signature": "SwaggerMetadataProcessor.setPreferredProduces(String accept)", "testcase": false, "constructor": false}, {"identifier": "getPreferredConsumes", "parameters": "()", "modifiers": "@TranslatorProperty(display=\"Preferred Content-type Header\", category=PropertyType.IMPORT, description=\"Preferred Content-type header, this should be one of the Swagger 'consume' \" + \"types, default is application/json\") public", "return": "String", "signature": "String getPreferredConsumes()", "full_signature": "@TranslatorProperty(display=\"Preferred Content-type Header\", category=PropertyType.IMPORT, description=\"Preferred Content-type header, this should be one of the Swagger 'consume' \" + \"types, default is application/json\") public String getPreferredConsumes()", "class_method_signature": "SwaggerMetadataProcessor.getPreferredConsumes()", "testcase": false, "constructor": false}, {"identifier": "setPreferredConsumes", "parameters": "(String type)", "modifiers": "public", "return": "void", "signature": "void setPreferredConsumes(String type)", "full_signature": "public void setPreferredConsumes(String type)", "class_method_signature": "SwaggerMetadataProcessor.setPreferredConsumes(String type)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(MetadataFactory mf, WSConnection connection)", "modifiers": "@Override public", "return": "void", "signature": "void process(MetadataFactory mf, WSConnection connection)", "full_signature": "@Override public void process(MetadataFactory mf, WSConnection connection)", "class_method_signature": "SwaggerMetadataProcessor.process(MetadataFactory mf, WSConnection connection)", "testcase": false, "constructor": false}, {"identifier": "buildURL", "parameters": "(String basePath, String endpoint)", "modifiers": "private", "return": "String", "signature": "String buildURL(String basePath, String endpoint)", "full_signature": "private String buildURL(String basePath, String endpoint)", "class_method_signature": "SwaggerMetadataProcessor.buildURL(String basePath, String endpoint)", "testcase": false, "constructor": false}, {"identifier": "getSchemes", "parameters": "(Operation op)", "modifiers": "private", "return": "String", "signature": "String getSchemes(Operation op)", "full_signature": "private String getSchemes(Operation op)", "class_method_signature": "SwaggerMetadataProcessor.getSchemes(Operation op)", "testcase": false, "constructor": false}, {"identifier": "nvl", "parameters": "(T value, T ifNull)", "modifiers": "private static", "return": "T", "signature": "T nvl(T value, T ifNull)", "full_signature": "private static T nvl(T value, T ifNull)", "class_method_signature": "SwaggerMetadataProcessor.nvl(T value, T ifNull)", "testcase": false, "constructor": false}, {"identifier": "getOperationMap", "parameters": "(Path operations)", "modifiers": "public static", "return": "Map<HttpMethod, Operation>", "signature": "Map<HttpMethod, Operation> getOperationMap(Path operations)", "full_signature": "public static Map<HttpMethod, Operation> getOperationMap(Path operations)", "class_method_signature": "SwaggerMetadataProcessor.getOperationMap(Path operations)", "testcase": false, "constructor": false}, {"identifier": "addProcedure", "parameters": "(MetadataFactory mf, Swagger swagger,\n            String basePath, String endpoint, Path operations)", "modifiers": "private", "return": "void", "signature": "void addProcedure(MetadataFactory mf, Swagger swagger,\n            String basePath, String endpoint, Path operations)", "full_signature": "private void addProcedure(MetadataFactory mf, Swagger swagger,\n            String basePath, String endpoint, Path operations)", "class_method_signature": "SwaggerMetadataProcessor.addProcedure(MetadataFactory mf, Swagger swagger,\n            String basePath, String endpoint, Path operations)", "testcase": false, "constructor": false}, {"identifier": "buildResponse", "parameters": "(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Response resp)", "modifiers": "private", "return": "boolean", "signature": "boolean buildResponse(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Response resp)", "full_signature": "private boolean buildResponse(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Response resp)", "class_method_signature": "SwaggerMetadataProcessor.buildResponse(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Response resp)", "testcase": false, "constructor": false}, {"identifier": "isSimple", "parameters": "(Property property)", "modifiers": "private", "return": "boolean", "signature": "boolean isSimple(Property property)", "full_signature": "private boolean isSimple(Property property)", "class_method_signature": "SwaggerMetadataProcessor.isSimple(Property property)", "testcase": false, "constructor": false}, {"identifier": "walkProperties", "parameters": "(final Swagger swagger,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "modifiers": "private", "return": "void", "signature": "void walkProperties(final Swagger swagger,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "full_signature": "private void walkProperties(final Swagger swagger,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "class_method_signature": "SwaggerMetadataProcessor.walkProperties(final Swagger swagger,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "testcase": false, "constructor": false}, {"identifier": "walkProperties", "parameters": "(final Swagger swagger, Set<Property> parents,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "modifiers": "private", "return": "void", "signature": "void walkProperties(final Swagger swagger, Set<Property> parents,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "full_signature": "private void walkProperties(final Swagger swagger, Set<Property> parents,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "class_method_signature": "SwaggerMetadataProcessor.walkProperties(final Swagger swagger, Set<Property> parents,\n            final Map<String,Property> properties, final String namePrefix,\n            final String nisPrefix, final PropertyAction pa)", "testcase": false, "constructor": false}, {"identifier": "fqn", "parameters": "(String prefix, String name)", "modifiers": "private", "return": "String", "signature": "String fqn(String prefix, String name)", "full_signature": "private String fqn(String prefix, String name)", "class_method_signature": "SwaggerMetadataProcessor.fqn(String prefix, String name)", "testcase": false, "constructor": false}, {"identifier": "nis", "parameters": "(String prefix, String name, boolean array)", "modifiers": "private", "return": "String", "signature": "String nis(String prefix, String name, boolean array)", "full_signature": "private String nis(String prefix, String name, boolean array)", "class_method_signature": "SwaggerMetadataProcessor.nis(String prefix, String name, boolean array)", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(Property property,\n            boolean array)", "modifiers": "private static", "return": "String", "signature": "String getPropertyType(Property property,\n            boolean array)", "full_signature": "private static String getPropertyType(Property property,\n            boolean array)", "class_method_signature": "SwaggerMetadataProcessor.getPropertyType(Property property,\n            boolean array)", "testcase": false, "constructor": false}, {"identifier": "addProcedureParameters", "parameters": "(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Operation operation)", "modifiers": "private", "return": "void", "signature": "void addProcedureParameters(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Operation operation)", "full_signature": "private void addProcedureParameters(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Operation operation)", "class_method_signature": "SwaggerMetadataProcessor.addProcedureParameters(final MetadataFactory mf, final Swagger swagger,\n            final Procedure procedure, final Operation operation)", "testcase": false, "constructor": false}, {"identifier": "getOperationSummary", "parameters": "(Operation operation)", "modifiers": "private", "return": "String", "signature": "String getOperationSummary(Operation operation)", "full_signature": "private String getOperationSummary(Operation operation)", "class_method_signature": "SwaggerMetadataProcessor.getOperationSummary(Operation operation)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "(List<String> types, String preferred)", "modifiers": "private", "return": "String", "signature": "String getTypes(List<String> types, String preferred)", "full_signature": "private String getTypes(List<String> types, String preferred)", "class_method_signature": "SwaggerMetadataProcessor.getTypes(List<String> types, String preferred)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(WSConnection conn)", "modifiers": "protected", "return": "Swagger", "signature": "Swagger getSchema(WSConnection conn)", "full_signature": "protected Swagger getSchema(WSConnection conn)", "class_method_signature": "SwaggerMetadataProcessor.getSchema(WSConnection conn)", "testcase": false, "constructor": false}], "file": "connectors/openapi/translator-openapi/src/main/java/org/teiid/translator/swagger/SwaggerMetadataProcessor.java"}, "focal_method": {"identifier": "getSchema", "parameters": "(WSConnection conn)", "modifiers": "protected", "return": "Swagger", "body": "protected Swagger getSchema(WSConnection conn) throws TranslatorException {\n        Swagger swagger = null;\n\n        try {\n            String swaggerFile = getSwaggerFilePath();\n\n            if( swaggerFile != null &&  !swaggerFile.isEmpty()) {\n                File f = new File(swaggerFile);\n\n                if(!f.exists() || !f.isFile()) {\n                    throw new TranslatorException(SwaggerPlugin.Event.TEIID28019,\n                            SwaggerPlugin.Util.gs(SwaggerPlugin.Event.TEIID28019, swaggerFile));\n                }\n\n                SwaggerParser parser = new SwaggerParser();\n                swagger =  parser.read(f.getAbsolutePath(), null, true);\n            } else {\n                BaseQueryExecution execution = new BaseQueryExecution(this.ef, null, null, conn);\n                Map<String, List<String>> headers = new HashMap<String, List<String>>();\n                BinaryWSProcedureExecution call = execution.buildInvokeHTTP(\"GET\", \"swagger.json\", null, headers); //$NON-NLS-1$ //$NON-NLS-2$\n                call.execute();\n                if (call.getResponseCode() != 200) {\n                    throw new TranslatorException(SwaggerPlugin.Event.TEIID28015,\n                            SwaggerPlugin.Util.gs(SwaggerPlugin.Event.TEIID28015,call.getResponseCode()));\n                }\n\n                Blob out = (Blob)call.getOutputParameterValues().get(0);\n                ObjectMapper objectMapper = new ObjectMapper();\n                JsonNode rootNode = objectMapper.readTree(out.getBinaryStream());\n                swagger =  new SwaggerParser().read(rootNode, true);\n            }\n        } catch (Exception e) {\n            throw new TranslatorException(SwaggerPlugin.Event.TEIID28016, e,\n                    SwaggerPlugin.Util.gs(SwaggerPlugin.Event.TEIID28016, e));\n        }\n\n        return swagger;\n    }", "signature": "Swagger getSchema(WSConnection conn)", "full_signature": "protected Swagger getSchema(WSConnection conn)", "class_method_signature": "SwaggerMetadataProcessor.getSchema(WSConnection conn)", "testcase": false, "constructor": false, "invocations": ["getSwaggerFilePath", "isEmpty", "exists", "isFile", "gs", "read", "getAbsolutePath", "buildInvokeHTTP", "execute", "getResponseCode", "gs", "getResponseCode", "get", "getOutputParameterValues", "readTree", "getBinaryStream", "read", "gs"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}