{"test_class": {"identifier": "TestGzipFilter", "superclass": "", "interfaces": "", "fields": [], "file": "olingo/src/test/java/org/teiid/olingo/web/gzip/TestGzipFilter.java"}, "test_case": {"identifier": "testUseGzipMessageRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUseGzipMessageRequest() throws IOException, ServletException{\n        HttpServletRequest req = mockRequest(\"GZIP\", \"deflate\");\n        HttpServletResponse res = Mockito.mock(HttpServletResponse.class);\n        FilterChain chain = Mockito.mock(FilterChain.class);\n        new GzipFilter().doFilter(req, res, chain);\n        Mockito.verify(chain).doFilter(Mockito.any(GzipMessageRequest.class), Mockito.same(res));\n        Mockito.verify(req, Mockito.times(2)).getHeader(Mockito.anyString());\n        Mockito.verify(req).getCharacterEncoding();\n        Mockito.verifyNoMoreInteractions(chain, req, res);\n    }", "signature": "void testUseGzipMessageRequest()", "full_signature": "@Test public void testUseGzipMessageRequest()", "class_method_signature": "TestGzipFilter.testUseGzipMessageRequest()", "testcase": true, "constructor": false, "invocations": ["mockRequest", "mock", "mock", "doFilter", "doFilter", "verify", "any", "same", "getHeader", "verify", "times", "anyString", "getCharacterEncoding", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "GzipFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "init", "parameters": "(FilterConfig filterConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(FilterConfig filterConfig)", "full_signature": "@Override public void init(FilterConfig filterConfig)", "class_method_signature": "GzipFilter.init(FilterConfig filterConfig)", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "GzipFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "GzipFilter.destroy()", "testcase": false, "constructor": false}], "file": "olingo/src/main/java/org/teiid/olingo/web/gzip/GzipFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException{\n        HttpServletRequest req = (HttpServletRequest)request;\n        HttpServletResponse res = (HttpServletResponse)response;\n        if(\"gzip\".equalsIgnoreCase(req.getHeader(\"Content-Encoding\"))){\n            req = new GzipMessageRequest(req);\n        }\n        if(String.valueOf(req.getHeader(\"Accept-Encoding\")).toLowerCase().contains(\"gzip\")){\n            res = new GzipMessageResponse(res);\n            res.setHeader(\"Content-Encoding\", \"gzip\");\n        }\n        chain.doFilter(req, res);\n    }", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "GzipFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "getHeader", "contains", "toLowerCase", "valueOf", "getHeader", "setHeader", "doFilter"]}, "repository": {"repo_id": 6092163, "url": "https://github.com/teiid/teiid", "stars": 191, "created": "10/5/2012 3:21:04 PM +00:00", "updates": "2020-01-27T20:57:36+00:00", "fork": "False", "license": "licensed"}}