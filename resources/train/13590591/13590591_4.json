{"test_class": {"identifier": "PublicKeyManagerTest", "superclass": "extends H2HJUnitTest", "interfaces": "", "fields": [{"original_string": "private static List<NetworkManager> network;", "modifier": "private static", "type": "List<NetworkManager>", "declarator": "network", "var_name": "network"}, {"original_string": "private static Random random = new Random();", "modifier": "private static", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private PublicKeyManager publicKeyManager;", "modifier": "private", "type": "PublicKeyManager", "declarator": "publicKeyManager", "var_name": "publicKeyManager"}, {"original_string": "private KeyPair loggedInUserKeys;", "modifier": "private", "type": "KeyPair", "declarator": "loggedInUserKeys", "var_name": "loggedInUserKeys"}, {"original_string": "private String loggedInUserId;", "modifier": "private", "type": "String", "declarator": "loggedInUserId", "var_name": "loggedInUserId"}], "file": "org.hive2hive.core/src/test/java/org/hive2hive/core/network/data/PublicKeyManagerTest.java"}, "test_case": {"identifier": "testGetFailedExceptions", "parameters": "()", "modifiers": "@Test(expected = GetFailedException.class) public", "return": "void", "body": "@Test(expected = GetFailedException.class)\n\tpublic void testGetFailedExceptions() throws NoPeerConnectionException, GetFailedException {\n\t\tString otherUser = randomString();\n\t\tH2HTestData noPublicKey = new H2HTestData(\"public key\");\n\t\tParameters parameters = new Parameters().setLocationKey(otherUser).setContentKey(H2HConstants.USER_PUBLIC_KEY)\n\t\t\t\t.setNetworkContent(noPublicKey);\n\t\tAssert.assertEquals(H2HPutStatus.OK, NetworkTestUtil.getRandomNode(network).getDataManager().put(parameters));\n\n\t\tpublicKeyManager.getPublicKey(otherUser);\n\t}", "signature": "void testGetFailedExceptions()", "full_signature": "@Test(expected = GetFailedException.class) public void testGetFailedExceptions()", "class_method_signature": "PublicKeyManagerTest.testGetFailedExceptions()", "testcase": true, "constructor": false, "invocations": ["randomString", "setNetworkContent", "setContentKey", "setLocationKey", "assertEquals", "put", "getDataManager", "getRandomNode", "getPublicKey"]}, "focal_class": {"identifier": "PublicKeyManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PublicKeyManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PublicKeyManager.class)", "var_name": "logger"}, {"original_string": "private final String userId;", "modifier": "private final", "type": "String", "declarator": "userId", "var_name": "userId"}, {"original_string": "private final KeyPair usersKeyPair;", "modifier": "private final", "type": "KeyPair", "declarator": "usersKeyPair", "var_name": "usersKeyPair"}, {"original_string": "private final KeyPair defaultProtectionKeyPair;", "modifier": "private final", "type": "KeyPair", "declarator": "defaultProtectionKeyPair", "var_name": "defaultProtectionKeyPair"}, {"original_string": "private final DataManager dataManager;", "modifier": "private final", "type": "DataManager", "declarator": "dataManager", "var_name": "dataManager"}, {"original_string": "private final Map<String, PublicKey> publicKeyCache;", "modifier": "private final", "type": "Map<String, PublicKey>", "declarator": "publicKeyCache", "var_name": "publicKeyCache"}], "methods": [{"identifier": "PublicKeyManager", "parameters": "(String userId, KeyPair usersKeyPair, KeyPair defaultProtectionKeyPair, DataManager dataManager)", "modifiers": "public", "return": "", "signature": " PublicKeyManager(String userId, KeyPair usersKeyPair, KeyPair defaultProtectionKeyPair, DataManager dataManager)", "full_signature": "public  PublicKeyManager(String userId, KeyPair usersKeyPair, KeyPair defaultProtectionKeyPair, DataManager dataManager)", "class_method_signature": "PublicKeyManager.PublicKeyManager(String userId, KeyPair usersKeyPair, KeyPair defaultProtectionKeyPair, DataManager dataManager)", "testcase": false, "constructor": true}, {"identifier": "getOwnPublicKey", "parameters": "()", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey getOwnPublicKey()", "full_signature": "public PublicKey getOwnPublicKey()", "class_method_signature": "PublicKeyManager.getOwnPublicKey()", "testcase": false, "constructor": false}, {"identifier": "getOwnPrivateKey", "parameters": "()", "modifiers": "public", "return": "PrivateKey", "signature": "PrivateKey getOwnPrivateKey()", "full_signature": "public PrivateKey getOwnPrivateKey()", "class_method_signature": "PublicKeyManager.getOwnPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "getOwnKeyPair", "parameters": "()", "modifiers": "public", "return": "KeyPair", "signature": "KeyPair getOwnKeyPair()", "full_signature": "public KeyPair getOwnKeyPair()", "class_method_signature": "PublicKeyManager.getOwnKeyPair()", "testcase": false, "constructor": false}, {"identifier": "getDefaultProtectionKeyPair", "parameters": "()", "modifiers": "public", "return": "KeyPair", "signature": "KeyPair getDefaultProtectionKeyPair()", "full_signature": "public KeyPair getDefaultProtectionKeyPair()", "class_method_signature": "PublicKeyManager.getDefaultProtectionKeyPair()", "testcase": false, "constructor": false}, {"identifier": "getCachedPublicKeys", "parameters": "()", "modifiers": "public", "return": "Map<String, PublicKey>", "signature": "Map<String, PublicKey> getCachedPublicKeys()", "full_signature": "public Map<String, PublicKey> getCachedPublicKeys()", "class_method_signature": "PublicKeyManager.getCachedPublicKeys()", "testcase": false, "constructor": false}, {"identifier": "putPublicKey", "parameters": "(String userId, PublicKey publicKey)", "modifiers": "public", "return": "void", "signature": "void putPublicKey(String userId, PublicKey publicKey)", "full_signature": "public void putPublicKey(String userId, PublicKey publicKey)", "class_method_signature": "PublicKeyManager.putPublicKey(String userId, PublicKey publicKey)", "testcase": false, "constructor": false}, {"identifier": "containsPublicKey", "parameters": "(String userId)", "modifiers": "public", "return": "boolean", "signature": "boolean containsPublicKey(String userId)", "full_signature": "public boolean containsPublicKey(String userId)", "class_method_signature": "PublicKeyManager.containsPublicKey(String userId)", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(String userId)", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey getPublicKey(String userId)", "full_signature": "public PublicKey getPublicKey(String userId)", "class_method_signature": "PublicKeyManager.getPublicKey(String userId)", "testcase": false, "constructor": false}, {"identifier": "evaluateResult", "parameters": "(BaseNetworkContent content, String requestingUserId)", "modifiers": "private", "return": "PublicKey", "signature": "PublicKey evaluateResult(BaseNetworkContent content, String requestingUserId)", "full_signature": "private PublicKey evaluateResult(BaseNetworkContent content, String requestingUserId)", "class_method_signature": "PublicKeyManager.evaluateResult(BaseNetworkContent content, String requestingUserId)", "testcase": false, "constructor": false}], "file": "org.hive2hive.core/src/main/java/org/hive2hive/core/network/data/PublicKeyManager.java"}, "focal_method": {"identifier": "getPublicKey", "parameters": "(String userId)", "modifiers": "public", "return": "PublicKey", "body": "public PublicKey getPublicKey(String userId) throws GetFailedException {\n\t\tlogger.debug(\"Requested to get the public key of user '{}'.\", userId);\n\t\tif (this.userId.equals(userId)) {\n\t\t\t// get the own public key\n\t\t\treturn usersKeyPair.getPublic();\n\t\t}\n\t\tif (publicKeyCache.containsKey(userId)) {\n\t\t\t// check the cache\n\t\t\treturn publicKeyCache.get(userId);\n\t\t}\n\n\t\tIParameters parameters = new Parameters().setLocationKey(userId).setContentKey(H2HConstants.USER_PUBLIC_KEY);\n\t\tBaseNetworkContent content = dataManager.get(parameters);\n\t\treturn evaluateResult(content, userId);\n\t}", "signature": "PublicKey getPublicKey(String userId)", "full_signature": "public PublicKey getPublicKey(String userId)", "class_method_signature": "PublicKeyManager.getPublicKey(String userId)", "testcase": false, "constructor": false, "invocations": ["debug", "equals", "getPublic", "containsKey", "get", "setContentKey", "setLocationKey", "get", "evaluateResult"]}, "repository": {"repo_id": 13590591, "url": "https://github.com/Hive2Hive/Hive2Hive", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 460, "size": 10352, "license": "licensed"}}