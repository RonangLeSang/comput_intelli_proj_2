{"test_class": {"identifier": "PasswordUtilTest", "superclass": "extends H2HJUnitTest", "interfaces": "", "fields": [], "file": "org.hive2hive.core/src/test/java/org/hive2hive/core/security/PasswordUtilTest.java"}, "test_case": {"identifier": "generateSaltTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void generateSaltTest() {\n\n\t\tbyte[][] salt = new byte[100][];\n\t\tfor (int i = 0; i < salt.length; i++) {\n\n\t\t\t// test salt generation\n\t\t\tsalt[i] = PasswordUtil.generateRandomSalt();\n\t\t\tassertNotNull(salt[i]);\n\t\t\tassertTrue(salt[i].length == PasswordUtil.SALT_BIT_SIZE / 8);\n\n\t\t\tlogger.debug(\"Generated Salt: {}.\", EncryptionUtil.byteToHex(salt[i]));\n\n\t\t\t// test whether salts are random\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tassertFalse(Arrays.equals(salt[i], salt[j]));\n\t\t\t}\n\t\t}\n\t}", "signature": "void generateSaltTest()", "full_signature": "@Test public void generateSaltTest()", "class_method_signature": "PasswordUtilTest.generateSaltTest()", "testcase": true, "constructor": false, "invocations": ["generateRandomSalt", "assertNotNull", "assertTrue", "debug", "byteToHex", "assertFalse", "equals"]}, "focal_class": {"identifier": "PasswordUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PasswordUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PasswordUtil.class)", "var_name": "logger"}, {"original_string": "public static final int HASH_BIT_SIZE = 192;", "modifier": "public static final", "type": "int", "declarator": "HASH_BIT_SIZE = 192", "var_name": "HASH_BIT_SIZE"}, {"original_string": "public static final int SALT_BIT_SIZE = HASH_BIT_SIZE;", "modifier": "public static final", "type": "int", "declarator": "SALT_BIT_SIZE = HASH_BIT_SIZE", "var_name": "SALT_BIT_SIZE"}, {"original_string": "private static final int PBKDF2_ITERATIONS = 65536;", "modifier": "private static final", "type": "int", "declarator": "PBKDF2_ITERATIONS = 65536", "var_name": "PBKDF2_ITERATIONS"}], "methods": [{"identifier": "PasswordUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " PasswordUtil()", "full_signature": "private  PasswordUtil()", "class_method_signature": "PasswordUtil.PasswordUtil()", "testcase": false, "constructor": true}, {"identifier": "generateRandomSalt", "parameters": "()", "modifiers": "public static", "return": "byte[]", "signature": "byte[] generateRandomSalt()", "full_signature": "public static byte[] generateRandomSalt()", "class_method_signature": "PasswordUtil.generateRandomSalt()", "testcase": false, "constructor": false}, {"identifier": "generateFixedSalt", "parameters": "(byte[] input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] generateFixedSalt(byte[] input)", "full_signature": "public static byte[] generateFixedSalt(byte[] input)", "class_method_signature": "PasswordUtil.generateFixedSalt(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "generateHash", "parameters": "(char[] password, byte[] salt)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] generateHash(char[] password, byte[] salt)", "full_signature": "public static byte[] generateHash(char[] password, byte[] salt)", "class_method_signature": "PasswordUtil.generateHash(char[] password, byte[] salt)", "testcase": false, "constructor": false}, {"identifier": "generateAESKeyFromPassword", "parameters": "(String password, String pin, AES_KEYLENGTH keyLength)", "modifiers": "public static", "return": "SecretKey", "signature": "SecretKey generateAESKeyFromPassword(String password, String pin, AES_KEYLENGTH keyLength)", "full_signature": "public static SecretKey generateAESKeyFromPassword(String password, String pin, AES_KEYLENGTH keyLength)", "class_method_signature": "PasswordUtil.generateAESKeyFromPassword(String password, String pin, AES_KEYLENGTH keyLength)", "testcase": false, "constructor": false}, {"identifier": "validatePassword", "parameters": "(char[] password, byte[] salt, byte[] correctHash)", "modifiers": "public static", "return": "boolean", "signature": "boolean validatePassword(char[] password, byte[] salt, byte[] correctHash)", "full_signature": "public static boolean validatePassword(char[] password, byte[] salt, byte[] correctHash)", "class_method_signature": "PasswordUtil.validatePassword(char[] password, byte[] salt, byte[] correctHash)", "testcase": false, "constructor": false}, {"identifier": "getPBKDF2Hash", "parameters": "(char[] password, byte[] salt, int hashBitSize)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getPBKDF2Hash(char[] password, byte[] salt, int hashBitSize)", "full_signature": "private static byte[] getPBKDF2Hash(char[] password, byte[] salt, int hashBitSize)", "class_method_signature": "PasswordUtil.getPBKDF2Hash(char[] password, byte[] salt, int hashBitSize)", "testcase": false, "constructor": false}, {"identifier": "slowCompare", "parameters": "(byte[] a, byte[] b)", "modifiers": "private static", "return": "boolean", "signature": "boolean slowCompare(byte[] a, byte[] b)", "full_signature": "private static boolean slowCompare(byte[] a, byte[] b)", "class_method_signature": "PasswordUtil.slowCompare(byte[] a, byte[] b)", "testcase": false, "constructor": false}], "file": "org.hive2hive.core/src/main/java/org/hive2hive/core/security/PasswordUtil.java"}, "focal_method": {"identifier": "generateRandomSalt", "parameters": "()", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] generateRandomSalt() {\n\n\t\tSecureRandom random = new SecureRandom();\n\t\tbyte[] salt = new byte[SALT_BIT_SIZE / 8];\n\t\trandom.nextBytes(salt);\n\t\treturn salt;\n\t}", "signature": "byte[] generateRandomSalt()", "full_signature": "public static byte[] generateRandomSalt()", "class_method_signature": "PasswordUtil.generateRandomSalt()", "testcase": false, "constructor": false, "invocations": ["nextBytes"]}, "repository": {"repo_id": 13590591, "url": "https://github.com/Hive2Hive/Hive2Hive", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 460, "size": 10352, "license": "licensed"}}