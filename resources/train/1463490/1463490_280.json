{"test_class": {"identifier": "UntypedEventListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<UntypedEventListener> mocker =\n            new MockitoComponentMockingRule<>(UntypedEventListener.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<UntypedEventListener>", "declarator": "mocker =\n            new MockitoComponentMockingRule<>(UntypedEventListener.class)", "var_name": "mocker"}, {"original_string": "private MyAnswer answer;", "modifier": "private", "type": "MyAnswer", "declarator": "answer", "var_name": "answer"}, {"original_string": "private ObservationManager observationManager;", "modifier": "private", "type": "ObservationManager", "declarator": "observationManager", "var_name": "observationManager"}, {"original_string": "private ScriptContextManager scriptContextManager;", "modifier": "private", "type": "ScriptContextManager", "declarator": "scriptContextManager", "var_name": "scriptContextManager"}, {"original_string": "private ComponentManager componentManager;", "modifier": "private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "private ModelBridge modelBridge;", "modifier": "private", "type": "ModelBridge", "declarator": "modelBridge", "var_name": "modelBridge"}, {"original_string": "private TemplateManager templateManager;", "modifier": "private", "type": "TemplateManager", "declarator": "templateManager", "var_name": "templateManager"}, {"original_string": "private Template template;", "modifier": "private", "type": "Template", "declarator": "template", "var_name": "template"}, {"original_string": "private XDOM xdom;", "modifier": "private", "type": "XDOM", "declarator": "xdom", "var_name": "xdom"}, {"original_string": "private ScriptContext scriptContext;", "modifier": "private", "type": "ScriptContext", "declarator": "scriptContext", "var_name": "scriptContext"}, {"original_string": "private BlockRenderer renderer;", "modifier": "private", "type": "BlockRenderer", "declarator": "renderer", "var_name": "renderer"}], "file": "xwiki-platform-core/xwiki-platform-eventstream/xwiki-platform-eventstream-default/src/test/java/org/xwiki/eventstream/internal/UntypedEventListenerTest.java"}, "test_case": {"identifier": "onEventWithWrongEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onEventWithWrongEvent() throws Exception\n    {\n        // Mocks\n        mockDescriptor();\n\n        // Test\n        mocker.getComponentUnderTest().onEvent(new ApplicationReadyEvent(), mock(Object.class), null);\n\n        // Verify\n        verify(this.observationManager, never()).notify(any(), any(), any());\n        assertNull(answer.getSentEvent());\n    }", "signature": "void onEventWithWrongEvent()", "full_signature": "@Test public void onEventWithWrongEvent()", "class_method_signature": "UntypedEventListenerTest.onEventWithWrongEvent()", "testcase": true, "constructor": false, "invocations": ["mockDescriptor", "onEvent", "getComponentUnderTest", "mock", "notify", "verify", "never", "any", "any", "any", "assertNull", "getSentEvent"]}, "focal_class": {"identifier": "UntypedEventListener", "superclass": "extends AbstractEventListener", "interfaces": "", "fields": [{"original_string": "public static final String NAME = \"Untyped Event Listener\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"Untyped Event Listener\"", "var_name": "NAME"}, {"original_string": "public static final String EVENT_BINDING_NAME = \"event\";", "modifier": "public static final", "type": "String", "declarator": "EVENT_BINDING_NAME = \"event\"", "var_name": "EVENT_BINDING_NAME"}, {"original_string": "public static final String SOURCE_BINDING_NAME = \"source\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_BINDING_NAME = \"source\"", "var_name": "SOURCE_BINDING_NAME"}, {"original_string": "private static final String EVENT_STREAM_MODULE = \"org.xwiki.platform:xwiki-platform-eventstream-api\";", "modifier": "private static final", "type": "String", "declarator": "EVENT_STREAM_MODULE = \"org.xwiki.platform:xwiki-platform-eventstream-api\"", "var_name": "EVENT_STREAM_MODULE"}, {"original_string": "private static final String XRETURN_BINDING = \"xreturn\";", "modifier": "private static final", "type": "String", "declarator": "XRETURN_BINDING = \"xreturn\"", "var_name": "XRETURN_BINDING"}, {"original_string": "@Inject\n    private ObservationManager observationManager;", "modifier": "@Inject\n    private", "type": "ObservationManager", "declarator": "observationManager", "var_name": "observationManager"}, {"original_string": "@Inject\n    private TemplateManager templateManager;", "modifier": "@Inject\n    private", "type": "TemplateManager", "declarator": "templateManager", "var_name": "templateManager"}, {"original_string": "@Inject\n    @Named(\"html/5.0\")\n    private BlockRenderer renderer;", "modifier": "@Inject\n    @Named(\"html/5.0\")\n    private", "type": "BlockRenderer", "declarator": "renderer", "var_name": "renderer"}, {"original_string": "@Inject\n    @Named(\"wiki\")\n    private Provider<ComponentManager> componentManagerProvider;", "modifier": "@Inject\n    @Named(\"wiki\")\n    private", "type": "Provider<ComponentManager>", "declarator": "componentManagerProvider", "var_name": "componentManagerProvider"}, {"original_string": "@Inject\n    private ModelBridge modelBridge;", "modifier": "@Inject\n    private", "type": "ModelBridge", "declarator": "modelBridge", "var_name": "modelBridge"}, {"original_string": "@Inject\n    private ScriptContextManager scriptContextManager;", "modifier": "@Inject\n    private", "type": "ScriptContextManager", "declarator": "scriptContextManager", "var_name": "scriptContextManager"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "UntypedEventListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " UntypedEventListener()", "full_signature": "public  UntypedEventListener()", "class_method_signature": "UntypedEventListener.UntypedEventListener()", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "UntypedEventListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false}, {"identifier": "eventMatchesDescriptor", "parameters": "(Event event, Object source, UntypedRecordableEventDescriptor descriptor)", "modifiers": "private", "return": "boolean", "signature": "boolean eventMatchesDescriptor(Event event, Object source, UntypedRecordableEventDescriptor descriptor)", "full_signature": "private boolean eventMatchesDescriptor(Event event, Object source, UntypedRecordableEventDescriptor descriptor)", "class_method_signature": "UntypedEventListener.eventMatchesDescriptor(Event event, Object source, UntypedRecordableEventDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "checkXObjectCondition", "parameters": "(UntypedRecordableEventDescriptor descriptor, Object source)", "modifiers": "private", "return": "boolean", "signature": "boolean checkXObjectCondition(UntypedRecordableEventDescriptor descriptor, Object source)", "full_signature": "private boolean checkXObjectCondition(UntypedRecordableEventDescriptor descriptor, Object source)", "class_method_signature": "UntypedEventListener.checkXObjectCondition(UntypedRecordableEventDescriptor descriptor, Object source)", "testcase": false, "constructor": false}, {"identifier": "isValidated", "parameters": "(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidated(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "full_signature": "private boolean isValidated(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "class_method_signature": "UntypedEventListener.isValidated(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getTarget(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "full_signature": "private Set<String> getTarget(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "class_method_signature": "UntypedEventListener.getTarget(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "testcase": false, "constructor": false}, {"identifier": "evaluateVelocity", "parameters": "(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "modifiers": "private", "return": "XDOM", "signature": "XDOM evaluateVelocity(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "full_signature": "private XDOM evaluateVelocity(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "class_method_signature": "UntypedEventListener.evaluateVelocity(Event event, Object source, DocumentReference userReference,\n            String templateContent)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-eventstream/xwiki-platform-eventstream-default/src/main/java/org/xwiki/eventstream/internal/UntypedEventListener.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        try {\n            // Get every UntypedEventDescriptor registered in the ComponentManager\n            List<UntypedRecordableEventDescriptor> descriptors =\n                    this.componentManagerProvider.get().getInstanceList(UntypedRecordableEventDescriptor.class);\n\n            // Filter the event descriptors concerned by the event, then create the concerned events\n            for (UntypedRecordableEventDescriptor descriptor : descriptors) {\n                // If the event is expected by our descriptor\n                if (eventMatchesDescriptor(event, source, descriptor)) {\n                    Set<String> target = getTarget(event, source, descriptor.getAuthorReference(),\n                            descriptor.getTargetExpression());\n                    observationManager.notify(\n                            new DefaultUntypedRecordableEvent(descriptor.getEventType(), target),\n                            EVENT_STREAM_MODULE, source);\n                }\n            }\n        } catch (ComponentLookupException e) {\n            logger.error(\"Unable to retrieve a list of registered UntypedRecordableEventDescriptor \"\n                    + \"from the ComponentManager.\", e);\n        }\n    }", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "UntypedEventListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false, "invocations": ["getInstanceList", "get", "eventMatchesDescriptor", "getTarget", "getAuthorReference", "getTargetExpression", "notify", "getEventType", "error"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}