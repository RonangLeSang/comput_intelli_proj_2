{"test_class": {"identifier": "ExpressionNodeToHQLConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<ExpressionNodeToHQLConverter> mocker =\n            new MockitoComponentMockingRule<>(ExpressionNodeToHQLConverter.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<ExpressionNodeToHQLConverter>", "declarator": "mocker =\n            new MockitoComponentMockingRule<>(ExpressionNodeToHQLConverter.class)", "var_name": "mocker"}, {"original_string": "private static final String TEST_VALUE_1 = \"aRandomStringValue\";", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE_1 = \"aRandomStringValue\"", "var_name": "TEST_VALUE_1"}, {"original_string": "private static final String TEST_VALUE_1_IDENTIFIER = String.format(\"value_%s\", sha256Hex(TEST_VALUE_1));", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE_1_IDENTIFIER = String.format(\"value_%s\", sha256Hex(TEST_VALUE_1))", "var_name": "TEST_VALUE_1_IDENTIFIER"}, {"original_string": "private static final String TEST_VALUE_2 = \"another_ random_string_ & value\";", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE_2 = \"another_ random_string_ & value\"", "var_name": "TEST_VALUE_2"}, {"original_string": "private static final String TEST_VALUE_2_IDENTIFIER = String.format(\"value_%s\", sha256Hex(TEST_VALUE_2));", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE_2_IDENTIFIER = String.format(\"value_%s\", sha256Hex(TEST_VALUE_2))", "var_name": "TEST_VALUE_2_IDENTIFIER"}, {"original_string": "private ExpressionNodeToHQLConverter parser;", "modifier": "private", "type": "ExpressionNodeToHQLConverter", "declarator": "parser", "var_name": "parser"}, {"original_string": "private EntityReferenceSerializer<String> serializer;", "modifier": "private", "type": "EntityReferenceSerializer<String>", "declarator": "serializer", "var_name": "serializer"}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-sources/src/test/java/org/xwiki/notifications/sources/internal/ExpressionNodeToHQLConverterTest.java"}, "test_case": {"identifier": "parseWithStartsWithNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseWithStartsWithNode()\n    {\n        AbstractNode testAST = new StartsWith(new StringValueNode(TEST_VALUE_1), new StringValueNode(TEST_VALUE_2));\n\n        assertEquals(String.format(\":%s LIKE concat(:%s, '%%') ESCAPE '!'\", TEST_VALUE_1_IDENTIFIER,\n                TEST_VALUE_2_IDENTIFIER), parser.parse(testAST).getQuery());\n    }", "signature": "void parseWithStartsWithNode()", "full_signature": "@Test public void parseWithStartsWithNode()", "class_method_signature": "ExpressionNodeToHQLConverterTest.parseWithStartsWithNode()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "format", "getQuery", "parse"]}, "focal_class": {"identifier": "ExpressionNodeToHQLConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VARIABLE_NAME = \":%s\";", "modifier": "private static final", "type": "String", "declarator": "VARIABLE_NAME = \":%s\"", "var_name": "VARIABLE_NAME"}, {"original_string": "private static final EnumMap<EventProperty, String> PROPERTY_MAPPING = new EnumMap<>(EventProperty.class);", "modifier": "private static final", "type": "EnumMap<EventProperty, String>", "declarator": "PROPERTY_MAPPING = new EnumMap<>(EventProperty.class)", "var_name": "PROPERTY_MAPPING"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> serializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "serializer", "var_name": "serializer"}], "methods": [{"identifier": "parse", "parameters": "(ExpressionNode node)", "modifiers": "public", "return": "HQLQuery", "signature": "HQLQuery parse(ExpressionNode node)", "full_signature": "public HQLQuery parse(ExpressionNode node)", "class_method_signature": "ExpressionNodeToHQLConverter.parse(ExpressionNode node)", "testcase": false, "constructor": false}, {"identifier": "parseBlock", "parameters": "(ExpressionNode node, HQLQuery result)", "modifiers": "private", "return": "String", "signature": "String parseBlock(ExpressionNode node, HQLQuery result)", "full_signature": "private String parseBlock(ExpressionNode node, HQLQuery result)", "class_method_signature": "ExpressionNodeToHQLConverter.parseBlock(ExpressionNode node, HQLQuery result)", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(AbstractValueNode value, HQLQuery result)", "modifiers": "private", "return": "String", "signature": "String parseValue(AbstractValueNode value, HQLQuery result)", "full_signature": "private String parseValue(AbstractValueNode value, HQLQuery result)", "class_method_signature": "ExpressionNodeToHQLConverter.parseValue(AbstractValueNode value, HQLQuery result)", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(AbstractValueNode value, boolean escape, HQLQuery result)", "modifiers": "private", "return": "String", "signature": "String parseValue(AbstractValueNode value, boolean escape, HQLQuery result)", "full_signature": "private String parseValue(AbstractValueNode value, boolean escape, HQLQuery result)", "class_method_signature": "ExpressionNodeToHQLConverter.parseValue(AbstractValueNode value, boolean escape, HQLQuery result)", "testcase": false, "constructor": false}, {"identifier": "parseUnaryOperator", "parameters": "(AbstractUnaryOperatorNode operator, HQLQuery result)", "modifiers": "private", "return": "String", "signature": "String parseUnaryOperator(AbstractUnaryOperatorNode operator, HQLQuery result)", "full_signature": "private String parseUnaryOperator(AbstractUnaryOperatorNode operator, HQLQuery result)", "class_method_signature": "ExpressionNodeToHQLConverter.parseUnaryOperator(AbstractUnaryOperatorNode operator, HQLQuery result)", "testcase": false, "constructor": false}, {"identifier": "parseBinaryOperator", "parameters": "(AbstractBinaryOperatorNode operator, HQLQuery result)", "modifiers": "private", "return": "String", "signature": "String parseBinaryOperator(AbstractBinaryOperatorNode operator, HQLQuery result)", "full_signature": "private String parseBinaryOperator(AbstractBinaryOperatorNode operator, HQLQuery result)", "class_method_signature": "ExpressionNodeToHQLConverter.parseBinaryOperator(AbstractBinaryOperatorNode operator, HQLQuery result)", "testcase": false, "constructor": false}, {"identifier": "parseOtherOperation", "parameters": "(AbstractOperatorNode operator, HQLQuery result)", "modifiers": "private", "return": "String", "signature": "String parseOtherOperation(AbstractOperatorNode operator, HQLQuery result)", "full_signature": "private String parseOtherOperation(AbstractOperatorNode operator, HQLQuery result)", "class_method_signature": "ExpressionNodeToHQLConverter.parseOtherOperation(AbstractOperatorNode operator, HQLQuery result)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(String format)", "modifiers": "private", "return": "String", "signature": "String escape(String format)", "full_signature": "private String escape(String format)", "class_method_signature": "ExpressionNodeToHQLConverter.escape(String format)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-sources/src/main/java/org/xwiki/notifications/sources/internal/ExpressionNodeToHQLConverter.java"}, "focal_method": {"identifier": "parse", "parameters": "(ExpressionNode node)", "modifiers": "public", "return": "HQLQuery", "body": "public HQLQuery parse(ExpressionNode node)\n    {\n        HQLQuery result = new HQLQuery();\n        result.query = parseBlock(node, result);\n        return result;\n    }", "signature": "HQLQuery parse(ExpressionNode node)", "full_signature": "public HQLQuery parse(ExpressionNode node)", "class_method_signature": "ExpressionNodeToHQLConverter.parse(ExpressionNode node)", "testcase": false, "constructor": false, "invocations": ["parseBlock"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}