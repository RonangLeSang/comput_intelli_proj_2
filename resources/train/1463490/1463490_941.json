{"test_class": {"identifier": "XWikiLinkLabelGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<XWikiLinkLabelGenerator> mocker =\n        new MockitoComponentMockingRule<>(XWikiLinkLabelGenerator.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<XWikiLinkLabelGenerator>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(XWikiLinkLabelGenerator.class)", "var_name": "mocker"}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/renderer/XWikiLinkLabelGeneratorTest.java"}, "test_case": {"identifier": "generateWhithRegexpSyntax", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generateWhithRegexpSyntax() throws Exception\n    {\n        ResourceReference resourceReference = new DocumentResourceReference(\"HelloWorld\");\n        DocumentReference documentReference = new DocumentReference(\"$0\", \"\\\\\", \"$0\");\n\n        EntityReferenceResolver<ResourceReference> resourceReferenceResolver = this.mocker.getInstance(\n            new DefaultParameterizedType(null, EntityReferenceResolver.class, ResourceReference.class));\n        when(resourceReferenceResolver.resolve(resourceReference, EntityType.DOCUMENT)).thenReturn(documentReference);\n\n        DocumentAccessBridge dab = this.mocker.getInstance(DocumentAccessBridge.class);\n        DocumentModelBridge dmb = mock(DocumentModelBridge.class);\n        when(dab.getTranslatedDocumentInstance(documentReference)).thenReturn(dmb);\n        when(dmb.getTitle()).thenReturn(\"$0\");\n\n        EntityReferenceSerializer<String> localSerializer =\n            this.mocker.getInstance(EntityReferenceSerializer.TYPE_STRING, \"local\");\n        when(localSerializer.serialize(new SpaceReference(\"$0\", \"\\\\\"))).thenReturn(\"\\\\\");\n\n        assertEquals(\"%l%la%n%na%N%NA [$0:\\\\.$0] \\\\ $0 $0 $0 ($0) [$0:\\\\.$0] \\\\ $0 $0 $0 ($0)\",\n            this.mocker.getComponentUnderTest().generate(resourceReference));\n    }", "signature": "void generateWhithRegexpSyntax()", "full_signature": "@Test public void generateWhithRegexpSyntax()", "class_method_signature": "XWikiLinkLabelGeneratorTest.generateWhithRegexpSyntax()", "testcase": true, "constructor": false, "invocations": ["getInstance", "thenReturn", "when", "resolve", "getInstance", "mock", "thenReturn", "when", "getTranslatedDocumentInstance", "thenReturn", "when", "getTitle", "getInstance", "thenReturn", "when", "serialize", "assertEquals", "generate", "getComponentUnderTest"]}, "focal_class": {"identifier": "XWikiLinkLabelGenerator", "superclass": "", "interfaces": "implements LinkLabelGenerator", "fields": [{"original_string": "@Inject\n    private RenderingConfiguration renderingConfiguration;", "modifier": "@Inject\n    private", "type": "RenderingConfiguration", "declarator": "renderingConfiguration", "var_name": "renderingConfiguration"}, {"original_string": "@Inject\n    private DocumentAccessBridge documentAccessBridge;", "modifier": "@Inject\n    private", "type": "DocumentAccessBridge", "declarator": "documentAccessBridge", "var_name": "documentAccessBridge"}, {"original_string": "@Inject\n    private EntityReferenceResolver<ResourceReference> resourceReferenceResolver;", "modifier": "@Inject\n    private", "type": "EntityReferenceResolver<ResourceReference>", "declarator": "resourceReferenceResolver", "var_name": "resourceReferenceResolver"}, {"original_string": "@Inject\n    private EntityReferenceProvider defaultEntityReferenceProvider;", "modifier": "@Inject\n    private", "type": "EntityReferenceProvider", "declarator": "defaultEntityReferenceProvider", "var_name": "defaultEntityReferenceProvider"}, {"original_string": "@Inject\n    @Named(\"local\")\n    private EntityReferenceSerializer<String> localReferenceSerializer;", "modifier": "@Inject\n    @Named(\"local\")\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "localReferenceSerializer", "var_name": "localReferenceSerializer"}], "methods": [{"identifier": "generate", "parameters": "(ResourceReference reference)", "modifiers": "@Override public", "return": "String", "signature": "String generate(ResourceReference reference)", "full_signature": "@Override public String generate(ResourceReference reference)", "class_method_signature": "XWikiLinkLabelGenerator.generate(ResourceReference reference)", "testcase": false, "constructor": false}, {"identifier": "getCamelNestedPageLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getCamelNestedPageLabel(DocumentReference documentReference)", "full_signature": "private String getCamelNestedPageLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getCamelNestedPageLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getLastSpaceLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getLastSpaceLabel(DocumentReference documentReference)", "full_signature": "private String getLastSpaceLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getLastSpaceLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getWikiLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getWikiLabel(DocumentReference documentReference)", "full_signature": "private String getWikiLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getWikiLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getCamelPageLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getCamelPageLabel(DocumentReference documentReference)", "full_signature": "private String getCamelPageLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getCamelPageLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "convertCamelString", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String convertCamelString(String value)", "full_signature": "private String convertCamelString(String value)", "class_method_signature": "XWikiLinkLabelGenerator.convertCamelString(String value)", "testcase": false, "constructor": false}, {"identifier": "getPageLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getPageLabel(DocumentReference documentReference)", "full_signature": "private String getPageLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getPageLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getSpacesLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getSpacesLabel(DocumentReference documentReference)", "full_signature": "private String getSpacesLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getSpacesLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getNestedPageLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getNestedPageLabel(DocumentReference documentReference)", "full_signature": "private String getNestedPageLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getNestedPageLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getTitleLabel", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "String", "signature": "String getTitleLabel(DocumentReference documentReference)", "full_signature": "private String getTitleLabel(DocumentReference documentReference)", "class_method_signature": "XWikiLinkLabelGenerator.getTitleLabel(DocumentReference documentReference)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/renderer/XWikiLinkLabelGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(ResourceReference reference)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String generate(ResourceReference reference)\n    {\n        StringBuilder result = new StringBuilder();\n\n        String format = this.renderingConfiguration.getLinkLabelFormat();\n\n        EntityReference resolvedReference = resourceReferenceResolver.resolve(reference, EntityType.DOCUMENT);\n        if (resolvedReference == null) {\n            throw new IllegalArgumentException(String.valueOf(reference));\n        }\n        DocumentReference documentReference = new DocumentReference(resolvedReference);\n\n        for (int i = 0; i < format.length(); i++) {\n            char c = format.charAt(i);\n            if (c == '%' && i + 1 < format.length()) {\n                // Check first letter after '%'\n                i++;\n                char cc = format.charAt(i);\n                switch (cc) {\n                    case 's':\n                        // Replace %s with the full space name (e.g. space1.space2)\n                        result.append(getSpacesLabel(documentReference));\n                        break;\n                    case 'p':\n                        // Replace %p with the page name\n                        result.append(getPageLabel(documentReference));\n                        break;\n                    case 't':\n                        // Replace %t with the document title and fall back to %np if the title is null or empty\n                        result.append(getTitleLabel(documentReference));\n                        break;\n                    case 'P':\n                        // Replace %P with the page name in camel case + space\n                        result.append(getCamelPageLabel(documentReference));\n                        break;\n                    case 'w':\n                        // Replace %w with the wiki name\n                        result.append(getWikiLabel(documentReference));\n                        break;\n                    case 'l':\n                        if (i + 1 < format.length()) {\n                            i++;\n                            char ccc = format.charAt(i);\n                            if (ccc == 's') {\n                                // Replace %ls with the last space name\n                                result.append(getLastSpaceLabel(documentReference));\n                            } else {\n                                result.append(c);\n                                result.append(cc);\n                                result.append(ccc);\n                            }\n                        } else {\n                            result.append(c);\n                            result.append(cc);\n                        }\n                        break;\n                    case 'n':\n                        if (i + 1 < format.length()) {\n                            i++;\n                            char ccc = format.charAt(i);\n                            if (ccc == 'p') {\n                                // Replace %np with the page name if the name is not the default page name\n                                // (e.g. \"WebHome\") or with the last space name if it is.\n                                result.append(getNestedPageLabel(documentReference));\n                            } else {\n                                result.append(c);\n                                result.append(cc);\n                                result.append(ccc);\n                            }\n                        } else {\n                            result.append(c);\n                            result.append(cc);\n                        }\n                        break;\n                    case 'N':\n                        if (i + 1 < format.length()) {\n                            i++;\n                            char ccc = format.charAt(i);\n                            if (ccc == 'P') {\n                                // Replace %NP with the nested page name in camel case + space\n                                result.append(getCamelNestedPageLabel(documentReference));\n                            } else {\n                                result.append(c);\n                                result.append(cc);\n                                result.append(ccc);\n                            }\n                        } else {\n                            result.append(c);\n                            result.append(cc);\n                        }\n                        break;\n                    default:\n                        result.append(c);\n                        result.append(cc);\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }", "signature": "String generate(ResourceReference reference)", "full_signature": "@Override public String generate(ResourceReference reference)", "class_method_signature": "XWikiLinkLabelGenerator.generate(ResourceReference reference)", "testcase": false, "constructor": false, "invocations": ["getLinkLabelFormat", "resolve", "valueOf", "length", "charAt", "length", "charAt", "append", "getSpacesLabel", "append", "getPageLabel", "append", "getTitleLabel", "append", "getCamelPageLabel", "append", "getWikiLabel", "length", "charAt", "append", "getLastSpaceLabel", "append", "append", "append", "append", "append", "length", "charAt", "append", "getNestedPageLabel", "append", "append", "append", "append", "append", "length", "charAt", "append", "getCamelNestedPageLabel", "append", "append", "append", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}