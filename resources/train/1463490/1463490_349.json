{"test_class": {"identifier": "MailSenderPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Mail mail;", "modifier": "private", "type": "Mail", "declarator": "mail", "var_name": "mail"}, {"original_string": "private static MailSenderPlugin plugin;", "modifier": "private static", "type": "MailSenderPlugin", "declarator": "plugin", "var_name": "plugin"}], "file": "xwiki-platform-core/xwiki-platform-mailsender/src/test/java/com/xpn/xwiki/plugin/mailsender/MailSenderPluginTest.java"}, "test_case": {"identifier": "testParseRawMessageWithNullMail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseRawMessageWithNullMail()\n    {\n        boolean thrown = false;\n        try {\n            plugin.parseRawMessage(\"Subject:Greetings!\\n\\nDear John,\\nHello and Goodbye!\", null);\n        } catch (IllegalArgumentException ex) {\n            thrown = true;\n        }\n        Assert.assertTrue(thrown);\n    }", "signature": "void testParseRawMessageWithNullMail()", "full_signature": "@Test public void testParseRawMessageWithNullMail()", "class_method_signature": "MailSenderPluginTest.testParseRawMessageWithNullMail()", "testcase": true, "constructor": false, "invocations": ["parseRawMessage", "assertTrue"]}, "focal_class": {"identifier": "MailSenderPlugin", "superclass": "extends XWikiDefaultPlugin", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MailSenderPlugin.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MailSenderPlugin.class)", "var_name": "LOGGER"}, {"original_string": "private static final String EMAIL_ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL_ENCODING = \"UTF-8\"", "var_name": "EMAIL_ENCODING"}, {"original_string": "public static int ERROR_TEMPLATE_EMAIL_OBJECT_NOT_FOUND = -2;", "modifier": "public static", "type": "int", "declarator": "ERROR_TEMPLATE_EMAIL_OBJECT_NOT_FOUND = -2", "var_name": "ERROR_TEMPLATE_EMAIL_OBJECT_NOT_FOUND"}, {"original_string": "public static int ERROR = -1;", "modifier": "public static", "type": "int", "declarator": "ERROR = -1", "var_name": "ERROR"}, {"original_string": "public static final String EMAIL_XWIKI_CLASS_NAME = \"XWiki.Mail\";", "modifier": "public static final", "type": "String", "declarator": "EMAIL_XWIKI_CLASS_NAME = \"XWiki.Mail\"", "var_name": "EMAIL_XWIKI_CLASS_NAME"}, {"original_string": "public static final String ID = \"mailsender\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"mailsender\"", "var_name": "ID"}, {"original_string": "protected static final String URL_SEPARATOR = \"/\";", "modifier": "protected static final", "type": "String", "declarator": "URL_SEPARATOR = \"/\"", "var_name": "URL_SEPARATOR"}, {"original_string": "private static final Pattern SMTP_HEADER = Pattern.compile(\"^([\\\\x21-\\\\x7E&&[^\\\\x3A]]++):(.*+)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "SMTP_HEADER = Pattern.compile(\"^([\\\\x21-\\\\x7E&&[^\\\\x3A]]++):(.*+)$\")", "var_name": "SMTP_HEADER"}, {"original_string": "private static final String SUBJECT = \"Subject\";", "modifier": "private static final", "type": "String", "declarator": "SUBJECT = \"Subject\"", "var_name": "SUBJECT"}, {"original_string": "private static final String FROM = \"From\";", "modifier": "private static final", "type": "String", "declarator": "FROM = \"From\"", "var_name": "FROM"}], "methods": [{"identifier": "MailSenderPlugin", "parameters": "(String name, String className, XWikiContext context)", "modifiers": "public", "return": "", "signature": " MailSenderPlugin(String name, String className, XWikiContext context)", "full_signature": "public  MailSenderPlugin(String name, String className, XWikiContext context)", "class_method_signature": "MailSenderPlugin.MailSenderPlugin(String name, String className, XWikiContext context)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "MailSenderPlugin.getName()", "testcase": false, "constructor": false}, {"identifier": "getPluginApi", "parameters": "(XWikiPluginInterface plugin, XWikiContext context)", "modifiers": "@Override public", "return": "Api", "signature": "Api getPluginApi(XWikiPluginInterface plugin, XWikiContext context)", "full_signature": "@Override public Api getPluginApi(XWikiPluginInterface plugin, XWikiContext context)", "class_method_signature": "MailSenderPlugin.getPluginApi(XWikiPluginInterface plugin, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "parseAddresses", "parameters": "(String email)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseAddresses(String email)", "full_signature": "public static String[] parseAddresses(String email)", "class_method_signature": "MailSenderPlugin.parseAddresses(String email)", "testcase": false, "constructor": false}, {"identifier": "toInternetAddresses", "parameters": "(String email)", "modifiers": "private static", "return": "InternetAddress[]", "signature": "InternetAddress[] toInternetAddresses(String email)", "full_signature": "private static InternetAddress[] toInternetAddresses(String email)", "class_method_signature": "MailSenderPlugin.toInternetAddresses(String email)", "testcase": false, "constructor": false}, {"identifier": "createMimeMessage", "parameters": "(Mail mail, Session session, XWikiContext context)", "modifiers": "private", "return": "MimeMessage", "signature": "MimeMessage createMimeMessage(Mail mail, Session session, XWikiContext context)", "full_signature": "private MimeMessage createMimeMessage(Mail mail, Session session, XWikiContext context)", "class_method_signature": "MailSenderPlugin.createMimeMessage(Mail mail, Session session, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "createAttachmentBodyPart", "parameters": "(Attachment attachment, XWikiContext context)", "modifiers": "public", "return": "MimeBodyPart", "signature": "MimeBodyPart createAttachmentBodyPart(Attachment attachment, XWikiContext context)", "full_signature": "public MimeBodyPart createAttachmentBodyPart(Attachment attachment, XWikiContext context)", "class_method_signature": "MailSenderPlugin.createAttachmentBodyPart(Attachment attachment, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "createMimeMultipart", "parameters": "(Mail mail, XWikiContext context)", "modifiers": "public", "return": "Multipart", "signature": "Multipart createMimeMultipart(Mail mail, XWikiContext context)", "full_signature": "public Multipart createMimeMultipart(Mail mail, XWikiContext context)", "class_method_signature": "MailSenderPlugin.createMimeMultipart(Mail mail, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "parseRawMessage", "parameters": "(String rawMessage, Mail toMail)", "modifiers": "protected", "return": "void", "signature": "void parseRawMessage(String rawMessage, Mail toMail)", "full_signature": "protected void parseRawMessage(String rawMessage, Mail toMail)", "class_method_signature": "MailSenderPlugin.parseRawMessage(String rawMessage, Mail toMail)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String property, Context context)", "modifiers": "protected", "return": "String", "signature": "String evaluate(String property, Context context)", "full_signature": "protected String evaluate(String property, Context context)", "class_method_signature": "MailSenderPlugin.evaluate(String property, Context context)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(String path)", "modifiers": "protected", "return": "String", "signature": "String getFileName(String path)", "full_signature": "protected String getFileName(String path)", "class_method_signature": "MailSenderPlugin.getFileName(String path)", "testcase": false, "constructor": false}, {"identifier": "initProperties", "parameters": "(MailConfiguration mailConfiguration)", "modifiers": "private", "return": "Properties", "signature": "Properties initProperties(MailConfiguration mailConfiguration)", "full_signature": "private Properties initProperties(MailConfiguration mailConfiguration)", "class_method_signature": "MailSenderPlugin.initProperties(MailConfiguration mailConfiguration)", "testcase": false, "constructor": false}, {"identifier": "prepareVelocityContext", "parameters": "(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        VelocityContext vcontext, XWikiContext context)", "modifiers": "public", "return": "VelocityContext", "signature": "VelocityContext prepareVelocityContext(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        VelocityContext vcontext, XWikiContext context)", "full_signature": "public VelocityContext prepareVelocityContext(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        VelocityContext vcontext, XWikiContext context)", "class_method_signature": "MailSenderPlugin.prepareVelocityContext(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        VelocityContext vcontext, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "prepareVelocityContext", "parameters": "(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        Map<String, Object> parameters, XWikiContext context)", "modifiers": "public", "return": "VelocityContext", "signature": "VelocityContext prepareVelocityContext(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        Map<String, Object> parameters, XWikiContext context)", "full_signature": "public VelocityContext prepareVelocityContext(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        Map<String, Object> parameters, XWikiContext context)", "class_method_signature": "MailSenderPlugin.prepareVelocityContext(String fromAddr, String toAddr, String ccAddr, String bccAddr,\n        Map<String, Object> parameters, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "sendMail", "parameters": "(Mail mailItem, XWikiContext context)", "modifiers": "public", "return": "boolean", "signature": "boolean sendMail(Mail mailItem, XWikiContext context)", "full_signature": "public boolean sendMail(Mail mailItem, XWikiContext context)", "class_method_signature": "MailSenderPlugin.sendMail(Mail mailItem, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "sendMail", "parameters": "(Mail mailItem, MailConfiguration mailConfiguration, XWikiContext context)", "modifiers": "public", "return": "boolean", "signature": "boolean sendMail(Mail mailItem, MailConfiguration mailConfiguration, XWikiContext context)", "full_signature": "public boolean sendMail(Mail mailItem, MailConfiguration mailConfiguration, XWikiContext context)", "class_method_signature": "MailSenderPlugin.sendMail(Mail mailItem, MailConfiguration mailConfiguration, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "sendMails", "parameters": "(Collection<Mail> emails, XWikiContext context)", "modifiers": "public", "return": "boolean", "signature": "boolean sendMails(Collection<Mail> emails, XWikiContext context)", "full_signature": "public boolean sendMails(Collection<Mail> emails, XWikiContext context)", "class_method_signature": "MailSenderPlugin.sendMails(Collection<Mail> emails, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "sendMails", "parameters": "(Collection<Mail> emails, MailConfiguration mailConfiguration, XWikiContext context)", "modifiers": "public", "return": "boolean", "signature": "boolean sendMails(Collection<Mail> emails, MailConfiguration mailConfiguration, XWikiContext context)", "full_signature": "public boolean sendMails(Collection<Mail> emails, MailConfiguration mailConfiguration, XWikiContext context)", "class_method_signature": "MailSenderPlugin.sendMails(Collection<Mail> emails, MailConfiguration mailConfiguration, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "sendMailFromTemplate", "parameters": "(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, VelocityContext vcontext, XWikiContext context)", "modifiers": "public", "return": "int", "signature": "int sendMailFromTemplate(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, VelocityContext vcontext, XWikiContext context)", "full_signature": "public int sendMailFromTemplate(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, VelocityContext vcontext, XWikiContext context)", "class_method_signature": "MailSenderPlugin.sendMailFromTemplate(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, VelocityContext vcontext, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String content, String name, VelocityContext vcontext, XWikiContext context)", "modifiers": "private", "return": "String", "signature": "String evaluate(String content, String name, VelocityContext vcontext, XWikiContext context)", "full_signature": "private String evaluate(String content, String name, VelocityContext vcontext, XWikiContext context)", "class_method_signature": "MailSenderPlugin.evaluate(String content, String name, VelocityContext vcontext, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "sendMailFromTemplate", "parameters": "(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, Map<String, Object> parameters, XWikiContext context)", "modifiers": "public", "return": "int", "signature": "int sendMailFromTemplate(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, Map<String, Object> parameters, XWikiContext context)", "full_signature": "public int sendMailFromTemplate(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, Map<String, Object> parameters, XWikiContext context)", "class_method_signature": "MailSenderPlugin.sendMailFromTemplate(String templateDocFullName, String from, String to, String cc, String bcc,\n        String language, Map<String, Object> parameters, XWikiContext context)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-mailsender/src/main/java/com/xpn/xwiki/plugin/mailsender/MailSenderPlugin.java"}, "focal_method": {"identifier": "parseRawMessage", "parameters": "(String rawMessage, Mail toMail)", "modifiers": "protected", "return": "void", "body": "protected void parseRawMessage(String rawMessage, Mail toMail)\n    {\n        // Sanity check\n        if (toMail == null) {\n            throw new IllegalArgumentException(\"The target Mail can't be null\");\n        } else if (rawMessage == null) {\n            throw new IllegalArgumentException(\"rawMessage can't be null\");\n        } else if (StringUtils.isBlank(rawMessage)) {\n            throw new IllegalArgumentException(\"rawMessage can't be empty\");\n        }\n\n        try {\n            // The message is read line by line\n            BufferedReader input = new BufferedReader(new StringReader(rawMessage));\n            String line;\n            StringWriter result = new StringWriter();\n            PrintWriter output = new PrintWriter(result);\n            boolean headersFound = false;\n\n            line = input.readLine();\n            // Additional headers are at the start. Parse them and put them in the Mail object.\n            // Warning: no empty lines are allowed before the headers.\n            Matcher m = SMTP_HEADER.matcher(line);\n            while (line != null && m.matches()) {\n                String header = m.group(1);\n                String value = m.group(2);\n                line = input.readLine();\n                while (line != null && (line.startsWith(\" \") || line.startsWith(\"\\t\"))) {\n                    value += line;\n                    line = input.readLine();\n                }\n                if (header.equals(SUBJECT)) {\n                    toMail.setSubject(value);\n                } else if (header.equals(FROM)) {\n                    toMail.setFrom(value);\n                } else {\n                    toMail.setHeader(header, value);\n                }\n                if (line != null) {\n                    m.reset(line);\n                }\n                headersFound = true;\n            }\n\n            // There should be one empty line here, separating the body from the headers.\n            if (headersFound && line != null && StringUtils.isBlank(line)) {\n                line = input.readLine();\n            } else {\n                if (headersFound) {\n                    LOGGER.warn(\"Mail body does not contain an empty line between the headers and the body.\");\n                }\n            }\n\n            // If no text exists after the headers, return\n            if (line == null) {\n                toMail.setTextPart(\"\");\n                return;\n            }\n\n            do {\n                // Mails always use \\r\\n as EOL\n                output.print(line + \"\\r\\n\");\n            } while ((line = input.readLine()) != null);\n\n            toMail.setTextPart(result.toString());\n        } catch (IOException ioe) {\n            // Can't really happen here\n            LOGGER.error(\"Unexpected IO exception while preparing a mail\", ioe);\n        }\n    }", "signature": "void parseRawMessage(String rawMessage, Mail toMail)", "full_signature": "protected void parseRawMessage(String rawMessage, Mail toMail)", "class_method_signature": "MailSenderPlugin.parseRawMessage(String rawMessage, Mail toMail)", "testcase": false, "constructor": false, "invocations": ["isBlank", "readLine", "matcher", "matches", "group", "group", "readLine", "startsWith", "startsWith", "readLine", "equals", "setSubject", "equals", "setFrom", "setHeader", "reset", "isBlank", "readLine", "warn", "setTextPart", "print", "readLine", "setTextPart", "toString", "error"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}