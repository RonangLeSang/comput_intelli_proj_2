{"test_class": {"identifier": "DefaultSearchSuggestCustomConfigDeleterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<DefaultSearchSuggestCustomConfigDeleter> mocker =\n            new MockitoComponentMockingRule(DefaultSearchSuggestCustomConfigDeleter.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<DefaultSearchSuggestCustomConfigDeleter>", "declarator": "mocker =\n            new MockitoComponentMockingRule(DefaultSearchSuggestCustomConfigDeleter.class)", "var_name": "mocker"}, {"original_string": "private Provider<XWikiContext> xcontextProvider;", "modifier": "private", "type": "Provider<XWikiContext>", "declarator": "xcontextProvider", "var_name": "xcontextProvider"}, {"original_string": "private XWikiContext xcontext;", "modifier": "private", "type": "XWikiContext", "declarator": "xcontext", "var_name": "xcontext"}, {"original_string": "private XWiki xwiki;", "modifier": "private", "type": "XWiki", "declarator": "xwiki", "var_name": "xwiki"}], "file": "xwiki-platform-core/xwiki-platform-wiki/xwiki-platform-wiki-workspaces-migrator/src/test/java/org/xwiki/wiki/workspacesmigrator/internal/DefaultSearchSuggestCustomConfigDeleterTest.java"}, "test_case": {"identifier": "deleteSearchSuggestCustomConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteSearchSuggestCustomConfig() throws Exception\n    {\n        XWikiDocument searchSuggestConfigDoc = mock(XWikiDocument.class);\n        when(xwiki.getDocument(eq(new DocumentReference(\"mainWiki\", \"XWiki\", \"SearchSuggestConfig\")),\n                any(XWikiContext.class))).thenReturn(searchSuggestConfigDoc);\n        BaseObject objConfig1 = mock(BaseObject.class);\n        BaseObject objConfig2 = mock(BaseObject.class);\n        BaseObject objConfig3 = mock(BaseObject.class);\n        BaseObject objConfig4 = mock(BaseObject.class);\n        BaseObject objConfig5 = mock(BaseObject.class);\n        BaseObject objConfig6 = mock(BaseObject.class);\n        List<BaseObject> objects = new ArrayList<BaseObject>();\n        objects.add(objConfig1);\n        objects.add(objConfig2);\n        objects.add(objConfig3);\n        // null objects can be present in the list\n        objects.add(null);\n        objects.add(objConfig4);\n        objects.add(objConfig5);\n        objects.add(objConfig6);\n        when(searchSuggestConfigDoc.getXObjects(eq(new DocumentReference(\"mainWiki\", \"XWiki\",\n                \"SearchSuggestSourceClass\")))).thenReturn(objects);\n\n        // Object 1\n        when(objConfig1.getStringValue(\"name\")).thenReturn(\"platform.workspace.searchSuggestSourceWorkspaces\");\n        when(objConfig1.getStringValue(\"engine\")).thenReturn(\"solr\");\n        when(objConfig1.getStringValue(\"query\")).thenReturn(\"class:XWiki.XWikiServerClass AND \" +\n                \"propertyname:wikiprettyname AND propertyvalue__:(__INPUT__*)\");\n        when(objConfig1.getStringValue(\"url\")).thenReturn(\"xwiki:WorkspaceManager.WorkspacesSuggestSolrService\");\n\n        // Object 2\n        when(objConfig2.getStringValue(\"name\")).thenReturn(\"Bad name\");\n        when(objConfig2.getStringValue(\"engine\")).thenReturn(\"solr\");\n        when(objConfig2.getStringValue(\"query\")).thenReturn(\"class:XWiki.XWikiServerClass AND \" +\n                \"propertyname:wikiprettyname AND propertyvalue__:(__INPUT__*)\");\n        when(objConfig2.getStringValue(\"url\")).thenReturn(\"xwiki:WorkspaceManager.WorkspacesSuggestSolrService\");\n\n        // Object 3\n        when(objConfig3.getStringValue(\"name\")).thenReturn(\"platform.workspace.searchSuggestSourceWorkspaces\");\n        when(objConfig3.getStringValue(\"engine\")).thenReturn(\"lucene\");\n        when(objConfig3.getStringValue(\"query\")).thenReturn(\"XWiki.XWikiServerClass.wikiprettyname:__INPUT__* AND \" +\n                \"object:WorkspaceManager.WorkspaceClass\");\n        when(objConfig3.getStringValue(\"url\")).thenReturn(\"xwiki:WorkspaceManager.WorkspacesSuggestLuceneService\");\n\n        // Object 4\n        when(objConfig4.getStringValue(\"name\")).thenReturn(\"platform.workspace.searchSuggestSourceWorkspaces\");\n        when(objConfig4.getStringValue(\"engine\")).thenReturn(null);\n        when(objConfig4.getStringValue(\"query\")).thenReturn(\"XWiki.XWikiServerClass.wikiprettyname:__INPUT__* AND \" +\n                \"object:WorkspaceManager.WorkspaceClass\");\n        when(objConfig4.getStringValue(\"url\")).thenReturn(\"xwiki:WorkspaceManager.WorkspacesSuggestLuceneService\");\n\n        // Object 5\n        when(objConfig5.getStringValue(\"name\")).thenReturn(\"platform.workspace.searchSuggestSourceWorkspaces\");\n        when(objConfig5.getStringValue(\"engine\")).thenReturn(null);\n        when(objConfig5.getStringValue(\"query\")).thenReturn(\"bad query\");\n        when(objConfig5.getStringValue(\"url\")).thenReturn(\"xwiki:WorkspaceManager.WorkspacesSuggestLuceneService\");\n\n        // Object 6\n        when(objConfig6.getStringValue(\"name\")).thenReturn(\"platform.workspace.searchSuggestSourceWorkspaces\");\n        when(objConfig6.getStringValue(\"engine\")).thenReturn(null);\n        when(objConfig6.getStringValue(\"query\")).thenReturn(\"XWiki.XWikiServerClass.wikiprettyname:__INPUT__* AND \" +\n                \"object:WorkspaceManager.WorkspaceClass\");\n        when(objConfig6.getStringValue(\"url\")).thenReturn(\"bad URL\");\n\n        // Run\n        mocker.getComponentUnderTest().deleteSearchSuggestCustomConfig(\"mainWiki\");\n\n        // Verify that the good objects has been removed\n        verify(searchSuggestConfigDoc).removeXObject(objConfig1);\n        verify(searchSuggestConfigDoc).removeXObject(objConfig3);\n        // Verify that the document have been saved\n        verify(xwiki).saveDocument(searchSuggestConfigDoc,\n                \"Remove object previously introduced by WorkspaceManager.Install\", xcontext);\n\n    }", "signature": "void deleteSearchSuggestCustomConfig()", "full_signature": "@Test public void deleteSearchSuggestCustomConfig()", "class_method_signature": "DefaultSearchSuggestCustomConfigDeleterTest.deleteSearchSuggestCustomConfig()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getDocument", "eq", "any", "mock", "mock", "mock", "mock", "mock", "mock", "add", "add", "add", "add", "add", "add", "add", "thenReturn", "when", "getXObjects", "eq", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "thenReturn", "when", "getStringValue", "deleteSearchSuggestCustomConfig", "getComponentUnderTest", "removeXObject", "verify", "removeXObject", "verify", "saveDocument", "verify"]}, "focal_class": {"identifier": "DefaultSearchSuggestCustomConfigDeleter", "superclass": "", "interfaces": "implements SearchSuggestCustomConfigDeleter", "fields": [{"original_string": "@Inject\n    private Provider<XWikiContext> xcontextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "xcontextProvider", "var_name": "xcontextProvider"}], "methods": [{"identifier": "deleteSearchSuggestCustomConfig", "parameters": "(String wikiId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteSearchSuggestCustomConfig(String wikiId)", "full_signature": "@Override public void deleteSearchSuggestCustomConfig(String wikiId)", "class_method_signature": "DefaultSearchSuggestCustomConfigDeleter.deleteSearchSuggestCustomConfig(String wikiId)", "testcase": false, "constructor": false}, {"identifier": "isSolrObject", "parameters": "(String query, String engine, String url)", "modifiers": "private", "return": "boolean", "signature": "boolean isSolrObject(String query, String engine, String url)", "full_signature": "private boolean isSolrObject(String query, String engine, String url)", "class_method_signature": "DefaultSearchSuggestCustomConfigDeleter.isSolrObject(String query, String engine, String url)", "testcase": false, "constructor": false}, {"identifier": "isLuceneObject", "parameters": "(String query, String engine, String url)", "modifiers": "private", "return": "boolean", "signature": "boolean isLuceneObject(String query, String engine, String url)", "full_signature": "private boolean isLuceneObject(String query, String engine, String url)", "class_method_signature": "DefaultSearchSuggestCustomConfigDeleter.isLuceneObject(String query, String engine, String url)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-wiki/xwiki-platform-wiki-workspaces-migrator/src/main/java/org/xwiki/wiki/workspacesmigrator/internal/DefaultSearchSuggestCustomConfigDeleter.java"}, "focal_method": {"identifier": "deleteSearchSuggestCustomConfig", "parameters": "(String wikiId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void deleteSearchSuggestCustomConfig(String wikiId) throws XWikiException\n    {\n        XWikiContext xcontext = xcontextProvider.get();\n        XWiki xwiki = xcontext.getWiki();\n\n        DocumentReference searchConfigDocRef = new DocumentReference(wikiId, XWiki.SYSTEM_SPACE, \"SearchSuggestConfig\");\n        DocumentReference searchConfigClass = new DocumentReference(wikiId, XWiki.SYSTEM_SPACE,\n                \"SearchSuggestSourceClass\");\n\n        XWikiDocument searchConfigDoc = xwiki.getDocument(searchConfigDocRef, xcontext);\n\n        // Get the config objects\n        List<BaseObject> objects = searchConfigDoc.getXObjects(searchConfigClass);\n        if (objects != null) {\n            boolean found = false;\n            // Find the object to remove\n            for (BaseObject object : objects) {\n                if (object == null) {\n                    continue;\n                }\n                // Look if the object is to remove\n                String name = object.getStringValue(\"name\");\n                if (name.equals(\"platform.workspace.searchSuggestSourceWorkspaces\")) {\n                    String query = object.getStringValue(\"query\");\n                    String engine = object.getStringValue(\"engine\");\n                    String url = object.getStringValue(\"url\");\n\n                    if (isSolrObject(query, engine, url) || isLuceneObject(query, engine, url)) {\n                        searchConfigDoc.removeXObject(object);\n                        found = true;\n                    }\n                }\n            }\n\n            if (found) {\n                xwiki.saveDocument(searchConfigDoc, \"Remove object previously introduced by WorkspaceManager.Install\",\n                        xcontext);\n            }\n        }\n    }", "signature": "void deleteSearchSuggestCustomConfig(String wikiId)", "full_signature": "@Override public void deleteSearchSuggestCustomConfig(String wikiId)", "class_method_signature": "DefaultSearchSuggestCustomConfigDeleter.deleteSearchSuggestCustomConfig(String wikiId)", "testcase": false, "constructor": false, "invocations": ["get", "getWiki", "getDocument", "getXObjects", "getStringValue", "equals", "getStringValue", "getStringValue", "getStringValue", "isSolrObject", "isLuceneObject", "removeXObject", "saveDocument"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}