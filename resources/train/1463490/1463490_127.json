{"test_class": {"identifier": "FilesystemResourceReferenceSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File BASEDIR = new File(System.getProperty(\"java.io.tmpdir\"), \"xwikitest\");", "modifier": "private static final", "type": "File", "declarator": "BASEDIR = new File(System.getProperty(\"java.io.tmpdir\"), \"xwikitest\")", "var_name": "BASEDIR"}, {"original_string": "@Rule\n    public MockitoComponentMockingRule<FilesystemResourceReferenceSerializer> mocker =\n        new MockitoComponentMockingRule<>(FilesystemResourceReferenceSerializer.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<FilesystemResourceReferenceSerializer>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(FilesystemResourceReferenceSerializer.class)", "var_name": "mocker"}, {"original_string": "private ClassLoader originalThreadContextClassLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "originalThreadContextClassLoader", "var_name": "originalThreadContextClassLoader"}], "file": "xwiki-platform-core/xwiki-platform-webjars/xwiki-platform-webjars-api/src/test/java/org/xwiki/webjars/internal/FilesystemResourceReferenceSerializerTest.java"}, "test_case": {"identifier": "serializeWithCSSPathAdjustments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void serializeWithCSSPathAdjustments() throws Exception\n    {\n        FilesystemExportContext exportContext = new FilesystemExportContext();\n        exportContext.setExportDir(BASEDIR);\n        exportContext.pushCSSParentLevels(3);\n\n        Provider<FilesystemExportContext> exportContextProvider = this.mocker.getInstance(new DefaultParameterizedType(\n            null, Provider.class, FilesystemExportContext.class));\n        Mockito.when(exportContextProvider.get()).thenReturn(exportContext);\n\n        WebJarsResourceReference reference = new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\n            \"font-awesome\", \"4.7.0\", \"fonts/FontAwesome.otf\"));\n\n        // Verify that the returned URL is ok\n        assertEquals(\"../../../webjars/font-awesome/4.7.0/fonts/FontAwesome.otf\",\n            this.mocker.getComponentUnderTest().serialize(reference).serialize());\n\n        // Also verify that the resource has been copied!\n        assertTrue(new File(BASEDIR, \"webjars/font-awesome/4.7.0/fonts/FontAwesome.otf\").exists());\n    }", "signature": "void serializeWithCSSPathAdjustments()", "full_signature": "@Test public void serializeWithCSSPathAdjustments()", "class_method_signature": "FilesystemResourceReferenceSerializerTest.serializeWithCSSPathAdjustments()", "testcase": true, "constructor": false, "invocations": ["setExportDir", "pushCSSParentLevels", "getInstance", "thenReturn", "when", "get", "asList", "assertEquals", "serialize", "serialize", "getComponentUnderTest", "assertTrue", "exists"]}, "focal_class": {"identifier": "FilesystemResourceReferenceSerializer", "superclass": "", "interfaces": "implements ResourceReferenceSerializer<WebJarsResourceReference, ExtendedURL>", "fields": [{"original_string": "private static final String WEBJARS_RESOURCE_PREFIX = \"META-INF/resources/webjars\";", "modifier": "private static final", "type": "String", "declarator": "WEBJARS_RESOURCE_PREFIX = \"META-INF/resources/webjars\"", "var_name": "WEBJARS_RESOURCE_PREFIX"}, {"original_string": "private static final String PARENT = \"..\";", "modifier": "private static final", "type": "String", "declarator": "PARENT = \"..\"", "var_name": "PARENT"}, {"original_string": "private static final String WEBJAR_PATH = \"webjars\";", "modifier": "private static final", "type": "String", "declarator": "WEBJAR_PATH = \"webjars\"", "var_name": "WEBJAR_PATH"}, {"original_string": "@Inject\n    private Provider<FilesystemExportContext> exportContextProvider;", "modifier": "@Inject\n    private", "type": "Provider<FilesystemExportContext>", "declarator": "exportContextProvider", "var_name": "exportContextProvider"}], "methods": [{"identifier": "serialize", "parameters": "(WebJarsResourceReference reference)", "modifiers": "@Override public", "return": "ExtendedURL", "signature": "ExtendedURL serialize(WebJarsResourceReference reference)", "full_signature": "@Override public ExtendedURL serialize(WebJarsResourceReference reference)", "class_method_signature": "FilesystemResourceReferenceSerializer.serialize(WebJarsResourceReference reference)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-webjars/xwiki-platform-webjars-api/src/main/java/org/xwiki/webjars/internal/FilesystemResourceReferenceSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(WebJarsResourceReference reference)", "modifiers": "@Override public", "return": "ExtendedURL", "body": "@Override\n    public ExtendedURL serialize(WebJarsResourceReference reference)\n        throws SerializeResourceReferenceException, UnsupportedResourceReferenceException\n    {\n        // Copy the resource from the webjar to the filesystem\n        FilesystemExportContext exportContext = this.exportContextProvider.get();\n        try {\n            FilesystemResourceReferenceCopier copier = new FilesystemResourceReferenceCopier();\n            copier.copyResourceFromJAR(WEBJARS_RESOURCE_PREFIX, reference.getResourceName(), WEBJAR_PATH,\n                exportContext);\n\n            // If the resource asked is a CSS file, then parse it to look for relative URLs and also save them on the\n            // filesystem.\n            if (reference.getResourceName().toLowerCase().endsWith(\"css\")) {\n                copier.processCSS(WEBJARS_RESOURCE_PREFIX, reference.getResourceName(), WEBJAR_PATH, exportContext);\n            }\n        } catch (Exception e) {\n            throw new SerializeResourceReferenceException(\n                String.format(\"Failed to extract and copy WebJAR resource [%s]\", reference.getResourceName()), e);\n        }\n\n        List<String> pathSegments = new ArrayList<>();\n\n        // If the webjar URL is computed inside a CSS file then we need to be relative to that CSS's path, i.e only\n        // take into account the CSS Parent levels. However if the webjar URL is not inside a CSS we need to take into\n        // account the doc parent level.\n\n        // Adjust path depending on where the current doc is stored\n        if (exportContext.getCSSParentLevel() == 0) {\n            for (int i = 0; i < exportContext.getDocParentLevel(); i++) {\n                pathSegments.add(PARENT);\n            }\n        } else {\n            // Adjust path for links inside CSS files (since they need to be relative to the CSS file they're in).\n            for (int i = 0; i < exportContext.getCSSParentLevel(); i++) {\n                pathSegments.add(PARENT);\n            }\n        }\n\n        pathSegments.add(WEBJAR_PATH);\n        for (String resourceSegment : StringUtils.split(reference.getResourceName(), '/')) {\n            pathSegments.add(resourceSegment);\n        }\n\n        return new RelativeExtendedURL(pathSegments);\n    }", "signature": "ExtendedURL serialize(WebJarsResourceReference reference)", "full_signature": "@Override public ExtendedURL serialize(WebJarsResourceReference reference)", "class_method_signature": "FilesystemResourceReferenceSerializer.serialize(WebJarsResourceReference reference)", "testcase": false, "constructor": false, "invocations": ["get", "copyResourceFromJAR", "getResourceName", "endsWith", "toLowerCase", "getResourceName", "processCSS", "getResourceName", "format", "getResourceName", "getCSSParentLevel", "getDocParentLevel", "add", "getCSSParentLevel", "add", "add", "split", "getResourceName", "add"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}