{"test_class": {"identifier": "DocumentTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMockComponents\n    private DocumentTreeNode documentTreeNode;", "modifier": "@InjectMockComponents\n    private", "type": "DocumentTreeNode", "declarator": "documentTreeNode", "var_name": "documentTreeNode"}, {"original_string": "@MockComponent\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "defaultEntityReferenceSerializer", "var_name": "defaultEntityReferenceSerializer"}, {"original_string": "@MockComponent\n    @Named(\"local\")\n    private EntityReferenceSerializer<String> localEntityReferenceSerializer;", "modifier": "@MockComponent\n    @Named(\"local\")\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "localEntityReferenceSerializer", "var_name": "localEntityReferenceSerializer"}, {"original_string": "@MockComponent\n    private EntityReferenceProvider defaultEntityReferenceProvider;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceProvider", "declarator": "defaultEntityReferenceProvider", "var_name": "defaultEntityReferenceProvider"}, {"original_string": "@MockComponent\n    private ContextualAuthorizationManager authorization;", "modifier": "@MockComponent\n    private", "type": "ContextualAuthorizationManager", "declarator": "authorization", "var_name": "authorization"}, {"original_string": "@MockComponent\n    private LocalizationContext localizationContext;", "modifier": "@MockComponent\n    private", "type": "LocalizationContext", "declarator": "localizationContext", "var_name": "localizationContext"}, {"original_string": "@MockComponent\n    @Named(\"childPage/nestedPages\")\n    private QueryFilter childPageFilter;", "modifier": "@MockComponent\n    @Named(\"childPage/nestedPages\")\n    private", "type": "QueryFilter", "declarator": "childPageFilter", "var_name": "childPageFilter"}, {"original_string": "@MockComponent\n    @Named(\"documentReferenceResolver/nestedPages\")\n    private QueryFilter documentReferenceResolverFilter;", "modifier": "@MockComponent\n    @Named(\"documentReferenceResolver/nestedPages\")\n    private", "type": "QueryFilter", "declarator": "documentReferenceResolverFilter", "var_name": "documentReferenceResolverFilter"}, {"original_string": "@MockComponent\n    private QueryManager queryManager;", "modifier": "@MockComponent\n    private", "type": "QueryManager", "declarator": "queryManager", "var_name": "queryManager"}, {"original_string": "@MockComponent\n    @Named(\"translations\")\n    private TreeNode translationsTreeNode;", "modifier": "@MockComponent\n    @Named(\"translations\")\n    private", "type": "TreeNode", "declarator": "translationsTreeNode", "var_name": "translationsTreeNode"}, {"original_string": "@MockComponent\n    @Named(\"attachments\")\n    private TreeNode attachmentsTreeNode;", "modifier": "@MockComponent\n    @Named(\"attachments\")\n    private", "type": "TreeNode", "declarator": "attachmentsTreeNode", "var_name": "attachmentsTreeNode"}, {"original_string": "@MockComponent\n    @Named(\"classProperties\")\n    private TreeNode classPropertiesTreeNode;", "modifier": "@MockComponent\n    @Named(\"classProperties\")\n    private", "type": "TreeNode", "declarator": "classPropertiesTreeNode", "var_name": "classPropertiesTreeNode"}, {"original_string": "@MockComponent\n    @Named(\"objects\")\n    private TreeNode objectsTreeNode;", "modifier": "@MockComponent\n    @Named(\"objects\")\n    private", "type": "TreeNode", "declarator": "objectsTreeNode", "var_name": "objectsTreeNode"}, {"original_string": "@Mock\n    @Named(\"nestedPagesOrderedByName\")\n    private Query nestedPagesOrderedByName;", "modifier": "@Mock\n    @Named(\"nestedPagesOrderedByName\")\n    private", "type": "Query", "declarator": "nestedPagesOrderedByName", "var_name": "nestedPagesOrderedByName"}, {"original_string": "@MockComponent\n    @Named(\"entityTreeNodeId\")\n    private Converter<EntityReference> entityTreeNodeIdConverter;", "modifier": "@MockComponent\n    @Named(\"entityTreeNodeId\")\n    private", "type": "Converter<EntityReference>", "declarator": "entityTreeNodeIdConverter", "var_name": "entityTreeNodeIdConverter"}, {"original_string": "@MockComponent\n    @Named(\"context\")\n    private Provider<ComponentManager> contextComponentManagerProvider;", "modifier": "@MockComponent\n    @Named(\"context\")\n    private", "type": "Provider<ComponentManager>", "declarator": "contextComponentManagerProvider", "var_name": "contextComponentManagerProvider"}, {"original_string": "@MockComponent\n    @Named(\"test\")\n    private TreeFilter filter;", "modifier": "@MockComponent\n    @Named(\"test\")\n    private", "type": "TreeFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private DocumentReference documentReference =\n        new DocumentReference(\"wiki\", Arrays.asList(\"Path\", \"To\", \"Page\"), \"WebHome\");", "modifier": "private", "type": "DocumentReference", "declarator": "documentReference =\n        new DocumentReference(\"wiki\", Arrays.asList(\"Path\", \"To\", \"Page\"), \"WebHome\")", "var_name": "documentReference"}, {"original_string": "private DocumentReference terminalDocumentReference = new DocumentReference(\"wiki\", \"Some\", \"Page\");", "modifier": "private", "type": "DocumentReference", "declarator": "terminalDocumentReference = new DocumentReference(\"wiki\", \"Some\", \"Page\")", "var_name": "terminalDocumentReference"}], "file": "xwiki-platform-core/xwiki-platform-index/xwiki-platform-index-tree/xwiki-platform-index-tree-api/src/test/java/org/xwiki/index/tree/internal/nestedpages/DocumentTreeNodeTest.java"}, "test_case": {"identifier": "getChildDocuments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getChildDocuments() throws Exception\n    {\n        assertEquals(Collections.emptyList(),\n            this.documentTreeNode.getChildDocuments(terminalDocumentReference, 0, 10));\n\n        this.documentTreeNode.getProperties().put(\"showTerminalDocuments\", false);\n        Query queryNonTerminalPagesByName = mock(Query.class, \"nonTerminalPagesOrderedByTitle\");\n        String statement = \"select reference, 0 as terminal from XWikiSpace page order by lower(name), name\";\n        when(this.queryManager.createQuery(statement, Query.HQL)).thenReturn(queryNonTerminalPagesByName);\n        when(queryNonTerminalPagesByName.addFilter(this.documentReferenceResolverFilter))\n            .thenReturn(queryNonTerminalPagesByName);\n        DocumentReference childReference = new DocumentReference(\"wiki\", Arrays.asList(\"Path.To.Page\"), \"Alice\");\n        when(queryNonTerminalPagesByName.execute()).thenReturn(Collections.singletonList(childReference));\n\n        assertEquals(Collections.singletonList(childReference),\n            this.documentTreeNode.getChildDocuments(documentReference, 5, 3));\n\n        verify(queryNonTerminalPagesByName).setWiki(\"wiki\");\n        verify(queryNonTerminalPagesByName).setOffset(5);\n        verify(queryNonTerminalPagesByName).setLimit(3);\n        verify(queryNonTerminalPagesByName).addFilter(this.childPageFilter);\n        verify(queryNonTerminalPagesByName).bindValue(\"parent\", \"Path.To.Page\");\n\n        this.documentTreeNode.getProperties().put(\"orderBy\", \"title\");\n        Query queryNonTerminalPagesByTitle = mock(Query.class, \"nonTerminalPagesOrderedByTitle\");\n        when(this.queryManager.getNamedQuery(\"nonTerminalPagesOrderedByTitle\"))\n            .thenReturn(queryNonTerminalPagesByTitle);\n        childReference = new DocumentReference(\"wiki\", Arrays.asList(\"Path.To.Page\"), \"Bob\");\n        when(queryNonTerminalPagesByTitle.addFilter(this.documentReferenceResolverFilter))\n            .thenReturn(queryNonTerminalPagesByTitle);\n        when(queryNonTerminalPagesByTitle.execute()).thenReturn(Collections.singletonList(childReference));\n        when(this.localizationContext.getCurrentLocale()).thenReturn(Locale.GERMAN);\n\n        assertEquals(Collections.singletonList(childReference),\n            this.documentTreeNode.getChildDocuments(documentReference, 0, 5));\n\n        verify(queryNonTerminalPagesByTitle).bindValue(\"locale\", \"de\");\n    }", "signature": "void getChildDocuments()", "full_signature": "@Test public void getChildDocuments()", "class_method_signature": "DocumentTreeNodeTest.getChildDocuments()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "emptyList", "getChildDocuments", "put", "getProperties", "mock", "thenReturn", "when", "createQuery", "thenReturn", "when", "addFilter", "asList", "thenReturn", "when", "execute", "singletonList", "assertEquals", "singletonList", "getChildDocuments", "setWiki", "verify", "setOffset", "verify", "setLimit", "verify", "addFilter", "verify", "bindValue", "verify", "put", "getProperties", "mock", "thenReturn", "when", "getNamedQuery", "asList", "thenReturn", "when", "addFilter", "thenReturn", "when", "execute", "singletonList", "thenReturn", "when", "getCurrentLocale", "assertEquals", "singletonList", "getChildDocuments", "bindValue", "verify"]}, "focal_class": {"identifier": "DocumentTreeNode", "superclass": "extends AbstractDocumentTreeNode", "interfaces": "implements Initializable", "fields": [{"original_string": "private static final String FIELD_TITLE = \"title\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_TITLE = \"title\"", "var_name": "FIELD_TITLE"}, {"original_string": "private static final String PARAMETER_LOCALE = \"locale\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_LOCALE = \"locale\"", "var_name": "PARAMETER_LOCALE"}, {"original_string": "private static final String PARAMETER_EXCLUDED_DOCUMENTS = \"excludedDocuments\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_EXCLUDED_DOCUMENTS = \"excludedDocuments\"", "var_name": "PARAMETER_EXCLUDED_DOCUMENTS"}, {"original_string": "@Inject\n    @Named(\"count\")\n    protected QueryFilter countQueryFilter;", "modifier": "@Inject\n    @Named(\"count\")\n    protected", "type": "QueryFilter", "declarator": "countQueryFilter", "var_name": "countQueryFilter"}, {"original_string": "@Inject\n    @Named(\"hidden/document\")\n    protected Provider<QueryFilter> hiddenDocumentQueryFilterProvider;", "modifier": "@Inject\n    @Named(\"hidden/document\")\n    protected", "type": "Provider<QueryFilter>", "declarator": "hiddenDocumentQueryFilterProvider", "var_name": "hiddenDocumentQueryFilterProvider"}, {"original_string": "@Inject\n    private LocalizationContext localizationContext;", "modifier": "@Inject\n    private", "type": "LocalizationContext", "declarator": "localizationContext", "var_name": "localizationContext"}, {"original_string": "@Inject\n    private ContextualAuthorizationManager authorization;", "modifier": "@Inject\n    private", "type": "ContextualAuthorizationManager", "declarator": "authorization", "var_name": "authorization"}, {"original_string": "@Inject\n    @Named(\"childPage/nestedPages\")\n    private QueryFilter childPageFilter;", "modifier": "@Inject\n    @Named(\"childPage/nestedPages\")\n    private", "type": "QueryFilter", "declarator": "childPageFilter", "var_name": "childPageFilter"}, {"original_string": "@Inject\n    @Named(\"hiddenPage/nestedPages\")\n    private QueryFilter hiddenPageFilter;", "modifier": "@Inject\n    @Named(\"hiddenPage/nestedPages\")\n    private", "type": "QueryFilter", "declarator": "hiddenPageFilter", "var_name": "hiddenPageFilter"}, {"original_string": "@Inject\n    @Named(\"excludedSpace/nestedPages\")\n    private QueryFilter excludedSpaceFilter;", "modifier": "@Inject\n    @Named(\"excludedSpace/nestedPages\")\n    private", "type": "QueryFilter", "declarator": "excludedSpaceFilter", "var_name": "excludedSpaceFilter"}, {"original_string": "@Inject\n    @Named(\"excludedDocument/nestedPages\")\n    private QueryFilter excludedDocumentFilter;", "modifier": "@Inject\n    @Named(\"excludedDocument/nestedPages\")\n    private", "type": "QueryFilter", "declarator": "excludedDocumentFilter", "var_name": "excludedDocumentFilter"}, {"original_string": "@Inject\n    @Named(\"documentReferenceResolver/nestedPages\")\n    private QueryFilter documentReferenceResolverFilter;", "modifier": "@Inject\n    @Named(\"documentReferenceResolver/nestedPages\")\n    private", "type": "QueryFilter", "declarator": "documentReferenceResolverFilter", "var_name": "documentReferenceResolverFilter"}, {"original_string": "private Map<String, TreeNode> nonLeafChildNodes = new LinkedHashMap<String, TreeNode>();", "modifier": "private", "type": "Map<String, TreeNode>", "declarator": "nonLeafChildNodes = new LinkedHashMap<String, TreeNode>()", "var_name": "nonLeafChildNodes"}], "methods": [{"identifier": "DocumentTreeNode", "parameters": "()", "modifiers": "public", "return": "", "signature": " DocumentTreeNode()", "full_signature": "public  DocumentTreeNode()", "class_method_signature": "DocumentTreeNode.DocumentTreeNode()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "DocumentTreeNode.initialize()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(DocumentReference documentReference, int offset, int limit)", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getChildren(DocumentReference documentReference, int offset, int limit)", "full_signature": "@Override protected List<String> getChildren(DocumentReference documentReference, int offset, int limit)", "class_method_signature": "DocumentTreeNode.getChildren(DocumentReference documentReference, int offset, int limit)", "testcase": false, "constructor": false}, {"identifier": "getPseudoChildren", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getPseudoChildren(DocumentReference documentReference)", "full_signature": "private List<String> getPseudoChildren(DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.getPseudoChildren(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getChildDocuments", "parameters": "(DocumentReference documentReference, int offset, int limit)", "modifiers": "protected", "return": "List<DocumentReference>", "signature": "List<DocumentReference> getChildDocuments(DocumentReference documentReference, int offset, int limit)", "full_signature": "protected List<DocumentReference> getChildDocuments(DocumentReference documentReference, int offset, int limit)", "class_method_signature": "DocumentTreeNode.getChildDocuments(DocumentReference documentReference, int offset, int limit)", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "(DocumentReference documentReference)", "modifiers": "@Override protected", "return": "int", "signature": "int getChildCount(DocumentReference documentReference)", "full_signature": "@Override protected int getChildCount(DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.getChildCount(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getPseudoChildCount", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "int", "signature": "int getPseudoChildCount(DocumentReference documentReference)", "full_signature": "private int getPseudoChildCount(DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.getPseudoChildCount(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getChildDocumentsCount", "parameters": "(DocumentReference documentReference)", "modifiers": "protected", "return": "int", "signature": "int getChildDocumentsCount(DocumentReference documentReference)", "full_signature": "protected int getChildDocumentsCount(DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.getChildDocumentsCount(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getChildTerminalPagesCount", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "int", "signature": "int getChildTerminalPagesCount(DocumentReference documentReference)", "full_signature": "private int getChildTerminalPagesCount(DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.getChildTerminalPagesCount(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "(DocumentReference documentReference)", "modifiers": "@Override protected", "return": "EntityReference", "signature": "EntityReference getParent(DocumentReference documentReference)", "full_signature": "@Override protected EntityReference getParent(DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.getParent(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "showAddDocument", "parameters": "(DocumentReference documentReference)", "modifiers": "private", "return": "boolean", "signature": "boolean showAddDocument(DocumentReference documentReference)", "full_signature": "private boolean showAddDocument(DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.showAddDocument(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "hasChild", "parameters": "(String nodeType, TreeNode childNode, DocumentReference documentReference)", "modifiers": "private", "return": "boolean", "signature": "boolean hasChild(String nodeType, TreeNode childNode, DocumentReference documentReference)", "full_signature": "private boolean hasChild(String nodeType, TreeNode childNode, DocumentReference documentReference)", "class_method_signature": "DocumentTreeNode.hasChild(String nodeType, TreeNode childNode, DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "hasChild", "parameters": "(String nodeType, TreeNode childNode, String serializedDocumentReference)", "modifiers": "private", "return": "boolean", "signature": "boolean hasChild(String nodeType, TreeNode childNode, String serializedDocumentReference)", "full_signature": "private boolean hasChild(String nodeType, TreeNode childNode, String serializedDocumentReference)", "class_method_signature": "DocumentTreeNode.hasChild(String nodeType, TreeNode childNode, String serializedDocumentReference)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-index/xwiki-platform-index-tree/xwiki-platform-index-tree-api/src/main/java/org/xwiki/index/tree/internal/nestedpages/DocumentTreeNode.java"}, "focal_method": {"identifier": "getChildDocuments", "parameters": "(DocumentReference documentReference, int offset, int limit)", "modifiers": "protected", "return": "List<DocumentReference>", "body": "protected List<DocumentReference> getChildDocuments(DocumentReference documentReference, int offset, int limit)\n        throws QueryException\n    {\n        if (!getDefaultDocumentName().equals(documentReference.getName())) {\n            return Collections.emptyList();\n        }\n\n        String orderBy = getOrderBy();\n        Query query;\n        if (areTerminalDocumentsShown()) {\n            if (FIELD_TITLE.equals(orderBy)) {\n                query = this.queryManager.getNamedQuery(\"nestedPagesOrderedByTitle\");\n                query.bindValue(PARAMETER_LOCALE, this.localizationContext.getCurrentLocale().toString());\n            } else {\n                query = this.queryManager.getNamedQuery(\"nestedPagesOrderedByName\");\n            }\n            Set<String> excludedDocuments = getExcludedDocuments(documentReference.getParent());\n            if (!excludedDocuments.isEmpty()) {\n                query.bindValue(PARAMETER_EXCLUDED_DOCUMENTS, excludedDocuments);\n                query.addFilter(this.excludedDocumentFilter);\n            }\n        } else {\n            if (FIELD_TITLE.equals(orderBy)) {\n                query = this.queryManager.getNamedQuery(\"nonTerminalPagesOrderedByTitle\");\n                query.bindValue(PARAMETER_LOCALE, this.localizationContext.getCurrentLocale().toString());\n            } else {\n                // Query only the spaces table.\n                query = this.queryManager.createQuery(\n                    \"select reference, 0 as terminal from XWikiSpace page order by lower(name), name\", Query.HQL);\n            }\n        }\n\n        query.setWiki(documentReference.getWikiReference().getName());\n        query.setOffset(offset);\n        query.setLimit(limit);\n\n        query.addFilter(this.childPageFilter);\n        query.bindValue(\"parent\", this.localEntityReferenceSerializer.serialize(documentReference.getParent()));\n\n        if (!areHiddenEntitiesShown()) {\n            query.addFilter(this.hiddenPageFilter);\n        }\n\n        Set<String> excludedSpaces = getExcludedSpaces(documentReference.getParent());\n        if (!excludedSpaces.isEmpty()) {\n            query.bindValue(\"excludedSpaces\", excludedSpaces);\n            query.addFilter(this.excludedSpaceFilter);\n        }\n\n        return query.addFilter(this.documentReferenceResolverFilter).execute();\n    }", "signature": "List<DocumentReference> getChildDocuments(DocumentReference documentReference, int offset, int limit)", "full_signature": "protected List<DocumentReference> getChildDocuments(DocumentReference documentReference, int offset, int limit)", "class_method_signature": "DocumentTreeNode.getChildDocuments(DocumentReference documentReference, int offset, int limit)", "testcase": false, "constructor": false, "invocations": ["equals", "getDefaultDocumentName", "getName", "emptyList", "getOrderBy", "areTerminalDocumentsShown", "equals", "getNamedQuery", "bindValue", "toString", "getCurrentLocale", "getNamedQuery", "getExcludedDocuments", "getParent", "isEmpty", "bindValue", "addFilter", "equals", "getNamedQuery", "bindValue", "toString", "getCurrentLocale", "createQuery", "setWiki", "getName", "getWikiReference", "setOffset", "setLimit", "addFilter", "bindValue", "serialize", "getParent", "areHiddenEntitiesShown", "addFilter", "getExcludedSpaces", "getParent", "isEmpty", "bindValue", "addFilter", "execute", "addFilter"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}