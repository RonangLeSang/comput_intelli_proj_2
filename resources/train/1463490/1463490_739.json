{"test_class": {"identifier": "ContextRootComponentManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<ComponentManager> mocker = new MockitoComponentMockingRule<ComponentManager>(\n        ContextRootComponentManager.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<ComponentManager>", "declarator": "mocker = new MockitoComponentMockingRule<ComponentManager>(\n        ContextRootComponentManager.class)", "var_name": "mocker"}, {"original_string": "private ComponentManager contextComponentManager;", "modifier": "private", "type": "ComponentManager", "declarator": "contextComponentManager", "var_name": "contextComponentManager"}, {"original_string": "private ComponentManager rootComponentManager;", "modifier": "private", "type": "ComponentManager", "declarator": "rootComponentManager", "var_name": "rootComponentManager"}], "file": "xwiki-platform-core/xwiki-platform-component/xwiki-platform-component-multi/src/test/java/org/xwiki/component/internal/ContextRootComponentManagerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws Exception\n    {\n        this.mocker.getComponentUnderTest().getInstance(Type.class);\n        this.mocker.getComponentUnderTest().getInstance(Type.class, \"hint\");\n        this.mocker.getComponentUnderTest().getComponentDescriptor(Type.class, \"hint\");\n        this.mocker.getComponentUnderTest().getComponentDescriptorList(Type.class);\n        this.mocker.getComponentUnderTest().getComponentDescriptorList((Type)Type.class);\n        this.mocker.getComponentUnderTest().getInstanceList(Type.class);\n        this.mocker.getComponentUnderTest().getInstanceMap(Type.class);\n\n        DefaultComponentDescriptor<Type> descriptor = new DefaultComponentDescriptor<>();\n        this.mocker.getComponentUnderTest().registerComponent(descriptor);\n        this.mocker.getComponentUnderTest().registerComponent(descriptor, Type.class);\n\n        // Verify\n\n        verify(contextComponentManager).getInstance(Type.class);\n        verify(contextComponentManager).getInstance(Type.class, \"hint\");\n        verify(contextComponentManager).getComponentDescriptor(Type.class, \"hint\");\n        verify(contextComponentManager).getComponentDescriptorList(Type.class);\n        verify(contextComponentManager).getComponentDescriptorList((Type)Type.class);\n        verify(contextComponentManager).getInstanceList(Type.class);\n        verify(contextComponentManager).getInstanceMap(Type.class);\n\n        verify(rootComponentManager).registerComponent(descriptor);\n        verify(rootComponentManager).registerComponent(descriptor, Type.class);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ContextRootComponentManagerTest.test()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getComponentUnderTest", "getInstance", "getComponentUnderTest", "getComponentDescriptor", "getComponentUnderTest", "getComponentDescriptorList", "getComponentUnderTest", "getComponentDescriptorList", "getComponentUnderTest", "getInstanceList", "getComponentUnderTest", "getInstanceMap", "getComponentUnderTest", "registerComponent", "getComponentUnderTest", "registerComponent", "getComponentUnderTest", "getInstance", "verify", "getInstance", "verify", "getComponentDescriptor", "verify", "getComponentDescriptorList", "verify", "getComponentDescriptorList", "verify", "getInstanceList", "verify", "getInstanceMap", "verify", "registerComponent", "verify", "registerComponent", "verify"]}, "focal_class": {"identifier": "ContextRootComponentManager", "superclass": "extends DelegateComponentManager", "interfaces": "implements Initializable", "fields": [{"original_string": "@Inject\n    @Named(\"context\")\n    private ComponentManager userComponentManager;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "ComponentManager", "declarator": "userComponentManager", "var_name": "userComponentManager"}, {"original_string": "@Inject\n    @Named(\"root\")\n    private ComponentManager rootComponentManager;", "modifier": "@Inject\n    @Named(\"root\")\n    private", "type": "ComponentManager", "declarator": "rootComponentManager", "var_name": "rootComponentManager"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "ContextRootComponentManager.initialize()", "testcase": false, "constructor": false}, {"identifier": "registerComponent", "parameters": "(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "modifiers": "@Override public", "return": "void", "signature": "void registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "full_signature": "@Override public void registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "class_method_signature": "ContextRootComponentManager.registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "testcase": false, "constructor": false}, {"identifier": "registerComponent", "parameters": "(ComponentDescriptor<T> componentDescriptor)", "modifiers": "@Override public", "return": "void", "signature": "void registerComponent(ComponentDescriptor<T> componentDescriptor)", "full_signature": "@Override public void registerComponent(ComponentDescriptor<T> componentDescriptor)", "class_method_signature": "ContextRootComponentManager.registerComponent(ComponentDescriptor<T> componentDescriptor)", "testcase": false, "constructor": false}, {"identifier": "setComponentEventManager", "parameters": "(ComponentEventManager eventManager)", "modifiers": "@Override public", "return": "void", "signature": "void setComponentEventManager(ComponentEventManager eventManager)", "full_signature": "@Override public void setComponentEventManager(ComponentEventManager eventManager)", "class_method_signature": "ContextRootComponentManager.setComponentEventManager(ComponentEventManager eventManager)", "testcase": false, "constructor": false}, {"identifier": "setParent", "parameters": "(ComponentManager parentComponentManager)", "modifiers": "@Override public", "return": "void", "signature": "void setParent(ComponentManager parentComponentManager)", "full_signature": "@Override public void setParent(ComponentManager parentComponentManager)", "class_method_signature": "ContextRootComponentManager.setParent(ComponentManager parentComponentManager)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-component/xwiki-platform-component-multi/src/main/java/org/xwiki/component/internal/ContextRootComponentManager.java"}, "focal_method": {"identifier": "registerComponent", "parameters": "(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public <T> void registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)\n        throws ComponentRepositoryException\n    {\n        this.rootComponentManager.registerComponent(componentDescriptor, componentInstance);\n    }", "signature": "void registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "full_signature": "@Override public void registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "class_method_signature": "ContextRootComponentManager.registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)", "testcase": false, "constructor": false, "invocations": ["registerComponent"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}