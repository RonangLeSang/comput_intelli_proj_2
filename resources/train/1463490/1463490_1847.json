{"test_class": {"identifier": "DBTreeListClassTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoOldcoreRule oldcore = new MockitoOldcoreRule();", "modifier": "@Rule\n    public", "type": "MockitoOldcoreRule", "declarator": "oldcore = new MockitoOldcoreRule()", "var_name": "oldcore"}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/objects/classes/DBTreeListClassTest.java"}, "test_case": {"identifier": "testGetQueryWithIdAndValueSpecified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetQueryWithIdAndValueSpecified()\n    {\n        DBTreeListClass dbtlc = new DBTreeListClass();\n        dbtlc.setIdField(\"doc.name\");\n        dbtlc.setValueField(\"doc.name\");\n        assertEquals(\"select distinct doc.name, doc.name, doc.parent\" + \" from XWikiDocument as doc\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"doc.creator\");\n        assertEquals(\"select distinct doc.name, doc.creator, doc.parent\" + \" from XWikiDocument as doc\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"obj.className\");\n        assertEquals(\n            \"select distinct doc.name, obj.className, doc.parent\"\n                + \" from XWikiDocument as doc, BaseObject as obj where doc.fullName=obj.name\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"property\");\n        assertEquals(\"select distinct doc.name, doc.property, doc.parent\" + \" from XWikiDocument as doc\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n\n        dbtlc.setIdField(\"obj.className\");\n        dbtlc.setValueField(\"doc.name\");\n        assertEquals(\n            \"select distinct obj.className, doc.name, doc.parent\"\n                + \" from XWikiDocument as doc, BaseObject as obj where doc.fullName=obj.name\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"obj.className\");\n        assertEquals(\n            \"select distinct obj.className, obj.className, doc.parent\"\n                + \" from XWikiDocument as doc, BaseObject as obj where doc.fullName=obj.name\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"obj.id\");\n        assertEquals(\n            \"select distinct obj.className, obj.id, doc.parent\"\n                + \" from XWikiDocument as doc, BaseObject as obj where doc.fullName=obj.name\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"property\");\n        assertEquals(\n            \"select distinct obj.className, doc.property, doc.parent\"\n                + \" from XWikiDocument as doc, BaseObject as obj where doc.fullName=obj.name\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n\n        dbtlc.setIdField(\"property\");\n        dbtlc.setValueField(\"doc.name\");\n        assertEquals(\"select distinct doc.property, doc.name, doc.parent\" + \" from XWikiDocument as doc\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"obj.className\");\n        assertEquals(\n            \"select distinct doc.property, obj.className, doc.parent\"\n                + \" from XWikiDocument as doc, BaseObject as obj where doc.fullName=obj.name\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"property\");\n        assertEquals(\"select distinct doc.property, doc.property, doc.parent\" + \" from XWikiDocument as doc\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n        dbtlc.setValueField(\"otherProperty\");\n        assertEquals(\"select distinct doc.property, doc.otherProperty, doc.parent\" + \" from XWikiDocument as doc\",\n            dbtlc.getQuery(this.oldcore.getXWikiContext()));\n    }", "signature": "void testGetQueryWithIdAndValueSpecified()", "full_signature": "@Test public void testGetQueryWithIdAndValueSpecified()", "class_method_signature": "DBTreeListClassTest.testGetQueryWithIdAndValueSpecified()", "testcase": true, "constructor": false, "invocations": ["setIdField", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setIdField", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setIdField", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext", "setValueField", "assertEquals", "getQuery", "getXWikiContext"]}, "focal_class": {"identifier": "DBTreeListClass", "superclass": "extends DBListClass", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final String XCLASSNAME = \"dbtreelist\";", "modifier": "private static final", "type": "String", "declarator": "XCLASSNAME = \"dbtreelist\"", "var_name": "XCLASSNAME"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DBTreeListClass.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DBTreeListClass.class)", "var_name": "LOGGER"}, {"original_string": "private List<ListItem> cachedDBTreeList;", "modifier": "private", "type": "List<ListItem>", "declarator": "cachedDBTreeList", "var_name": "cachedDBTreeList"}], "methods": [{"identifier": "DBTreeListClass", "parameters": "(PropertyMetaClass wclass)", "modifiers": "public", "return": "", "signature": " DBTreeListClass(PropertyMetaClass wclass)", "full_signature": "public  DBTreeListClass(PropertyMetaClass wclass)", "class_method_signature": "DBTreeListClass.DBTreeListClass(PropertyMetaClass wclass)", "testcase": false, "constructor": true}, {"identifier": "DBTreeListClass", "parameters": "()", "modifiers": "public", "return": "", "signature": " DBTreeListClass()", "full_signature": "public  DBTreeListClass()", "class_method_signature": "DBTreeListClass.DBTreeListClass()", "testcase": false, "constructor": true}, {"identifier": "getParentField", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getParentField()", "full_signature": "public String getParentField()", "class_method_signature": "DBTreeListClass.getParentField()", "testcase": false, "constructor": false}, {"identifier": "setParentField", "parameters": "(String parentField)", "modifiers": "public", "return": "void", "signature": "void setParentField(String parentField)", "full_signature": "public void setParentField(String parentField)", "class_method_signature": "DBTreeListClass.setParentField(String parentField)", "testcase": false, "constructor": false}, {"identifier": "getCachedDBTreeList", "parameters": "(XWikiContext context)", "modifiers": "protected", "return": "List<ListItem>", "signature": "List<ListItem> getCachedDBTreeList(XWikiContext context)", "full_signature": "protected List<ListItem> getCachedDBTreeList(XWikiContext context)", "class_method_signature": "DBTreeListClass.getCachedDBTreeList(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "setCachedDBTreeList", "parameters": "(List<ListItem> cachedDBTreeList, XWikiContext context)", "modifiers": "protected", "return": "void", "signature": "void setCachedDBTreeList(List<ListItem> cachedDBTreeList, XWikiContext context)", "full_signature": "protected void setCachedDBTreeList(List<ListItem> cachedDBTreeList, XWikiContext context)", "class_method_signature": "DBTreeListClass.setCachedDBTreeList(List<ListItem> cachedDBTreeList, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getTreeMap", "parameters": "(XWikiContext context)", "modifiers": "public", "return": "Map<String, List<ListItem>>", "signature": "Map<String, List<ListItem>> getTreeMap(XWikiContext context)", "full_signature": "public Map<String, List<ListItem>> getTreeMap(XWikiContext context)", "class_method_signature": "DBTreeListClass.getTreeMap(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getTreeList", "parameters": "(Map<String, List<ListItem>> treemap, Map<String, ListItem> map,\n        XWikiContext context)", "modifiers": "protected", "return": "List<ListItem>", "signature": "List<ListItem> getTreeList(Map<String, List<ListItem>> treemap, Map<String, ListItem> map,\n        XWikiContext context)", "full_signature": "protected List<ListItem> getTreeList(Map<String, List<ListItem>> treemap, Map<String, ListItem> map,\n        XWikiContext context)", "class_method_signature": "DBTreeListClass.getTreeList(Map<String, List<ListItem>> treemap, Map<String, ListItem> map,\n        XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "addToTreeList", "parameters": "(List<ListItem> treelist, Map<String, List<ListItem>> treemap,\n        Map<String, ListItem> map, String parent, XWikiContext context)", "modifiers": "protected", "return": "void", "signature": "void addToTreeList(List<ListItem> treelist, Map<String, List<ListItem>> treemap,\n        Map<String, ListItem> map, String parent, XWikiContext context)", "full_signature": "protected void addToTreeList(List<ListItem> treelist, Map<String, List<ListItem>> treemap,\n        Map<String, ListItem> map, String parent, XWikiContext context)", "class_method_signature": "DBTreeListClass.addToTreeList(List<ListItem> treelist, Map<String, List<ListItem>> treemap,\n        Map<String, ListItem> map, String parent, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "addToList", "parameters": "(Map<String, List<ListItem>> map, String key, ListItem item)", "modifiers": "protected", "return": "void", "signature": "void addToList(Map<String, List<ListItem>> map, String key, ListItem item)", "full_signature": "protected void addToList(Map<String, List<ListItem>> map, String key, ListItem item)", "class_method_signature": "DBTreeListClass.addToList(Map<String, List<ListItem>> map, String key, ListItem item)", "testcase": false, "constructor": false}, {"identifier": "displayView", "parameters": "(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "modifiers": "@Override public", "return": "void", "signature": "void displayView(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "full_signature": "@Override public void displayView(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "class_method_signature": "DBTreeListClass.displayView(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "displayEdit", "parameters": "(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "modifiers": "@Override public", "return": "void", "signature": "void displayEdit(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "full_signature": "@Override public void displayEdit(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "class_method_signature": "DBTreeListClass.displayEdit(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "displayFlatView", "parameters": "(List<String> selectlist, XWikiContext context)", "modifiers": "private", "return": "String", "signature": "String displayFlatView(List<String> selectlist, XWikiContext context)", "full_signature": "private String displayFlatView(List<String> selectlist, XWikiContext context)", "class_method_signature": "DBTreeListClass.displayFlatView(List<String> selectlist, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "renderItemsList", "parameters": "(List<List<ListItem>> resList)", "modifiers": "protected", "return": "String", "signature": "String renderItemsList(List<List<ListItem>> resList)", "full_signature": "protected String renderItemsList(List<List<ListItem>> resList)", "class_method_signature": "DBTreeListClass.renderItemsList(List<List<ListItem>> resList)", "testcase": false, "constructor": false}, {"identifier": "mergeItems", "parameters": "(List<ListItem> itemPath, List<List<ListItem>> resList)", "modifiers": "private", "return": "void", "signature": "void mergeItems(List<ListItem> itemPath, List<List<ListItem>> resList)", "full_signature": "private void mergeItems(List<ListItem> itemPath, List<List<ListItem>> resList)", "class_method_signature": "DBTreeListClass.mergeItems(List<ListItem> itemPath, List<List<ListItem>> resList)", "testcase": false, "constructor": false}, {"identifier": "getItemPath", "parameters": "(String item, List<ListItem> treeList, ArrayList<ListItem> resList)", "modifiers": "private", "return": "List<ListItem>", "signature": "List<ListItem> getItemPath(String item, List<ListItem> treeList, ArrayList<ListItem> resList)", "full_signature": "private List<ListItem> getItemPath(String item, List<ListItem> treeList, ArrayList<ListItem> resList)", "class_method_signature": "DBTreeListClass.getItemPath(String item, List<ListItem> treeList, ArrayList<ListItem> resList)", "testcase": false, "constructor": false}, {"identifier": "displayTree", "parameters": "(String name, String prefix, List<String> selectlist, String mode, XWikiContext context)", "modifiers": "private", "return": "String", "signature": "String displayTree(String name, String prefix, List<String> selectlist, String mode, XWikiContext context)", "full_signature": "private String displayTree(String name, String prefix, List<String> selectlist, String mode, XWikiContext context)", "class_method_signature": "DBTreeListClass.displayTree(String name, String prefix, List<String> selectlist, String mode, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "addToSelect", "parameters": "(select select, List<String> selectlist, Map<String, ListItem> map,\n        Map<String, List<ListItem>> treemap, String parent, String level, XWikiContext context)", "modifiers": "protected", "return": "void", "signature": "void addToSelect(select select, List<String> selectlist, Map<String, ListItem> map,\n        Map<String, List<ListItem>> treemap, String parent, String level, XWikiContext context)", "full_signature": "protected void addToSelect(select select, List<String> selectlist, Map<String, ListItem> map,\n        Map<String, List<ListItem>> treemap, String parent, String level, XWikiContext context)", "class_method_signature": "DBTreeListClass.addToSelect(select select, List<String> selectlist, Map<String, ListItem> map,\n        Map<String, List<ListItem>> treemap, String parent, String level, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "displayTreeSelectEdit", "parameters": "(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "modifiers": "protected", "return": "void", "signature": "void displayTreeSelectEdit(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "full_signature": "protected void displayTreeSelectEdit(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "class_method_signature": "DBTreeListClass.displayTreeSelectEdit(StringBuffer buffer, String name, String prefix, BaseCollection object,\n        XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "String", "signature": "String getQuery(XWikiContext context)", "full_signature": "@Override public String getQuery(XWikiContext context)", "class_method_signature": "DBTreeListClass.getQuery(XWikiContext context)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/objects/classes/DBTreeListClass.java"}, "focal_method": {"identifier": "getQuery", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getQuery(XWikiContext context)\n    {\n        // First, get the hql query entered by the user.\n        String sql = getSql();\n        // If the query field is blank, construct a query using the classname, idField,\n        // valueField and parentField properties.\n        if (StringUtils.isBlank(sql)) {\n            if (context.getWiki().getHibernateStore() != null) {\n                // Extract the 3 properties in non-null variables.\n                String classname = StringUtils.defaultString(getClassname());\n                String idField = StringUtils.defaultString(getIdField());\n                String valueField = StringUtils.defaultString(getValueField());\n                String parentField = StringUtils.defaultString(getParentField());\n\n                // Check if the properties are specified or not.\n                boolean hasClassname = !StringUtils.isBlank(classname);\n                boolean hasIdField = !StringUtils.isBlank(idField);\n                boolean hasValueField = !StringUtils.isBlank(valueField);\n                boolean hasParentField = !StringUtils.isBlank(parentField);\n\n                if (!(hasIdField || hasValueField)) {\n                    // If only the classname is specified, return a query that selects all the\n                    // document names which have an object of that type, and the hierarchy is\n                    // defined by the document \"parent\" property (unless a parent property is\n                    // specified).\n                    if (hasClassname) {\n                        sql = \"select distinct doc.fullName, doc.fullName, \"\n                            + (hasParentField ? parentField : \"doc.parent\")\n                            + \" from XWikiDocument as doc, BaseObject as obj\"\n                            + \" where doc.fullName=obj.name and obj.className='\" + classname + \"'\";\n                    } else {\n                        // If none of the first 3 properties is specified, return a query that\n                        // always returns no rows (only with the parent field no query can be made)\n                        sql = DEFAULT_QUERY;\n                    }\n                    return sql;\n                }\n\n                // If only one of the id and value fields is specified, use it for both columns.\n                if (!hasIdField && hasValueField) {\n                    idField = valueField;\n                } else if (hasIdField && !hasValueField) {\n                    valueField = idField;\n                }\n\n                // If no parent field was specified, use the document \"parent\" metadata\n                if (!hasParentField) {\n                    parentField = \"doc.parent\";\n                }\n\n                // Check if the document and object are needed or not.\n                // The object is needed if there is a classname, or if at least one of the selected\n                // columns is an object property.\n                boolean usesObj = hasClassname || idField.startsWith(\"obj.\") || valueField.startsWith(\"obj.\")\n                    || parentField.startsWith(\"obj.\");\n                // The document is needed if one of the selected columns is a document property, or\n                // if there is no classname specified and at least one of the selected columns is\n                // not an object property.\n                boolean usesDoc =\n                    idField.startsWith(\"doc.\") || valueField.startsWith(\"doc.\") || parentField.startsWith(\"doc.\");\n                if ((!idField.startsWith(\"obj.\") || !valueField.startsWith(\"obj.\") || !parentField.startsWith(\"obj.\"))\n                    && !hasClassname) {\n                    usesDoc = true;\n                }\n\n                // Build the query in this variable.\n                StringBuffer select = new StringBuffer(\"select distinct \");\n                // These will hold the components of the from and where parts of the query.\n                ArrayList<String> fromStatements = new ArrayList<String>();\n                ArrayList<String> whereStatements = new ArrayList<String>();\n\n                // Add the document to the query only if it is needed.\n                if (usesDoc) {\n                    fromStatements.add(\"XWikiDocument as doc\");\n                    if (usesObj) {\n                        whereStatements.add(\"doc.fullName=obj.name\");\n                    }\n                }\n                // Add the object to the query only if it is needed.\n                if (usesObj) {\n                    fromStatements.add(\"BaseObject as obj\");\n                    if (hasClassname) {\n                        whereStatements.add(\"obj.className='\" + classname + \"'\");\n                    }\n                }\n\n                // Add the first column to the query.\n                if (idField.startsWith(\"doc.\") || idField.startsWith(\"obj.\")) {\n                    select.append(idField);\n                } else if (!hasClassname) {\n                    select.append(\"doc.\" + idField);\n                } else {\n                    select.append(\"idprop.value\");\n                    fromStatements.add(\"StringProperty as idprop\");\n                    whereStatements.add(\"obj.id=idprop.id.id and idprop.id.name='\" + idField + \"'\");\n                }\n\n                // Add the second column to the query.\n                if (valueField.startsWith(\"doc.\") || valueField.startsWith(\"obj.\")) {\n                    select.append(\", \").append(valueField);\n                } else if (!hasClassname) {\n                    select.append(\", doc.\" + valueField);\n                } else {\n                    if (valueField.equals(idField)) {\n                        select.append(\", idprop.value\");\n                    } else {\n                        select.append(\", valueprop.value\");\n                        fromStatements.add(\"StringProperty as valueprop\");\n                        whereStatements.add(\"obj.id=valueprop.id.id and valueprop.id.name='\" + valueField + \"'\");\n                    }\n                }\n\n                // Add the third column to the query.\n                if (parentField.startsWith(\"doc.\") || parentField.startsWith(\"obj.\")) {\n                    select.append(\", \").append(parentField);\n                } else if (!hasClassname) {\n                    select.append(\", doc.\" + parentField);\n                } else {\n                    if (parentField.equals(idField)) {\n                        select.append(\", idprop.value\");\n                    } else if (parentField.equals(valueField)) {\n                        select.append(\", valueprop.value\");\n                    } else {\n                        select.append(\", parentprop.value\");\n                        fromStatements.add(\"StringProperty as parentprop\");\n                        whereStatements.add(\"obj.id=parentprop.id.id and parentprop.id.name='\" + parentField + \"'\");\n                    }\n                }\n                // Let's create the complete query\n                select.append(\" from \");\n                select.append(StringUtils.join(fromStatements.iterator(), \", \"));\n                if (whereStatements.size() > 0) {\n                    select.append(\" where \");\n                    select.append(StringUtils.join(whereStatements.iterator(), \" and \"));\n                }\n                sql = select.toString();\n            } else {\n                // TODO: query plugin impl.\n                // We need to generate the right query for the query plugin\n            }\n        }\n        // Parse the query, so that it can contain velocity scripts, for example to use the\n        // current document name, or the current username.\n        try {\n            sql = context.getWiki().parseContent(sql, context);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to parse SQL script [\" + sql + \"]. Continuing with non-rendered script.\", e);\n        }\n        return sql;\n    }", "signature": "String getQuery(XWikiContext context)", "full_signature": "@Override public String getQuery(XWikiContext context)", "class_method_signature": "DBTreeListClass.getQuery(XWikiContext context)", "testcase": false, "constructor": false, "invocations": ["getSql", "isBlank", "getHibernateStore", "getWiki", "defaultString", "getClassname", "defaultString", "getIdField", "defaultString", "getValueField", "defaultString", "getParentField", "isBlank", "isBlank", "isBlank", "isBlank", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "add", "add", "add", "add", "startsWith", "startsWith", "append", "append", "append", "add", "add", "startsWith", "startsWith", "append", "append", "append", "equals", "append", "append", "add", "add", "startsWith", "startsWith", "append", "append", "append", "equals", "append", "equals", "append", "append", "add", "add", "append", "append", "join", "iterator", "size", "append", "append", "join", "iterator", "toString", "parseContent", "getWiki", "error"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}