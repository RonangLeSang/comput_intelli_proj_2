{"test_class": {"identifier": "HTMLMimeBodyPartFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMockComponents\n    private HTMLMimeBodyPartFactory htmlMimeBodyPartFactory;", "modifier": "@InjectMockComponents\n    private", "type": "HTMLMimeBodyPartFactory", "declarator": "htmlMimeBodyPartFactory", "var_name": "htmlMimeBodyPartFactory"}, {"original_string": "@InjectComponentManager\n    private ComponentManager componentManager;", "modifier": "@InjectComponentManager\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}], "file": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-send/xwiki-platform-mail-send-default/src/test/java/org/xwiki/mail/internal/factory/html/HTMLMimeBodyPartFactoryTest.java"}, "test_case": {"identifier": "createWhenHTMLContentAndHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createWhenHTMLContentAndHeader() throws Exception\n    {\n        MimeBodyPart bodyPart = this.htmlMimeBodyPartFactory.create(\"<p>some html</p>\",\n            Collections.singletonMap(\"headers\", Collections.singletonMap(\"key\", \"value\")));\n\n        assertEquals(\"<p>some html</p>\", bodyPart.getContent());\n        assertArrayEquals(new String[]{ \"value\" }, bodyPart.getHeader(\"key\"));\n    }", "signature": "void createWhenHTMLContentAndHeader()", "full_signature": "@Test public void createWhenHTMLContentAndHeader()", "class_method_signature": "HTMLMimeBodyPartFactoryTest.createWhenHTMLContentAndHeader()", "testcase": true, "constructor": false, "invocations": ["create", "singletonMap", "singletonMap", "assertEquals", "getContent", "assertArrayEquals", "getHeader"]}, "focal_class": {"identifier": "HTMLMimeBodyPartFactory", "superclass": "extends AbstractMimeBodyPartFactory<String>", "interfaces": "", "fields": [{"original_string": "private static final Pattern CID_PATTERN =\n        Pattern.compile(\"src=('|\\\")cid:([^'\\\"]*)('|\\\")\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);", "modifier": "private static final", "type": "Pattern", "declarator": "CID_PATTERN =\n        Pattern.compile(\"src=('|\\\")cid:([^'\\\"]*)('|\\\")\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)", "var_name": "CID_PATTERN"}, {"original_string": "private static final String TEXT_HTML_CONTENT_TYPE = \"text/html; charset=\" + StandardCharsets.UTF_8.name();", "modifier": "private static final", "type": "String", "declarator": "TEXT_HTML_CONTENT_TYPE = \"text/html; charset=\" + StandardCharsets.UTF_8.name()", "var_name": "TEXT_HTML_CONTENT_TYPE"}, {"original_string": "@Inject\n    @Named(\"xwiki/attachment\")\n    private MimeBodyPartFactory<Attachment> attachmentPartFactory;", "modifier": "@Inject\n    @Named(\"xwiki/attachment\")\n    private", "type": "MimeBodyPartFactory<Attachment>", "declarator": "attachmentPartFactory", "var_name": "attachmentPartFactory"}, {"original_string": "@Inject\n    private MimeBodyPartFactory<String> defaultPartFactory;", "modifier": "@Inject\n    private", "type": "MimeBodyPartFactory<String>", "declarator": "defaultPartFactory", "var_name": "defaultPartFactory"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "create", "parameters": "(String content, Map<String, Object> parameters)", "modifiers": "@Override public", "return": "MimeBodyPart", "signature": "MimeBodyPart create(String content, Map<String, Object> parameters)", "full_signature": "@Override public MimeBodyPart create(String content, Map<String, Object> parameters)", "class_method_signature": "HTMLMimeBodyPartFactory.create(String content, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "handleAttachments", "parameters": "(MimeMultipart multipart, List<Attachment> attachments)", "modifiers": "private", "return": "void", "signature": "void handleAttachments(MimeMultipart multipart, List<Attachment> attachments)", "full_signature": "private void handleAttachments(MimeMultipart multipart, List<Attachment> attachments)", "class_method_signature": "HTMLMimeBodyPartFactory.handleAttachments(MimeMultipart multipart, List<Attachment> attachments)", "testcase": false, "constructor": false}, {"identifier": "createAlternativePart", "parameters": "(MimeBodyPart htmlBodyPart, MimeBodyPart textBodyPart)", "modifiers": "private", "return": "MimeBodyPart", "signature": "MimeBodyPart createAlternativePart(MimeBodyPart htmlBodyPart, MimeBodyPart textBodyPart)", "full_signature": "private MimeBodyPart createAlternativePart(MimeBodyPart htmlBodyPart, MimeBodyPart textBodyPart)", "class_method_signature": "HTMLMimeBodyPartFactory.createAlternativePart(MimeBodyPart htmlBodyPart, MimeBodyPart textBodyPart)", "testcase": false, "constructor": false}, {"identifier": "createHTMLMultipart", "parameters": "(String content, List<Attachment> embeddedImages)", "modifiers": "private", "return": "MimeMultipart", "signature": "MimeMultipart createHTMLMultipart(String content, List<Attachment> embeddedImages)", "full_signature": "private MimeMultipart createHTMLMultipart(String content, List<Attachment> embeddedImages)", "class_method_signature": "HTMLMimeBodyPartFactory.createHTMLMultipart(String content, List<Attachment> embeddedImages)", "testcase": false, "constructor": false}, {"identifier": "createHTMLBodyPart", "parameters": "(String content, boolean hasAttachments)", "modifiers": "private", "return": "MimeBodyPart", "signature": "MimeBodyPart createHTMLBodyPart(String content, boolean hasAttachments)", "full_signature": "private MimeBodyPart createHTMLBodyPart(String content, boolean hasAttachments)", "class_method_signature": "HTMLMimeBodyPartFactory.createHTMLBodyPart(String content, boolean hasAttachments)", "testcase": false, "constructor": false}, {"identifier": "separateAttachments", "parameters": "(String content, List<Attachment> attachments)", "modifiers": "private", "return": "Pair<List<Attachment>, List<Attachment>>", "signature": "Pair<List<Attachment>, List<Attachment>> separateAttachments(String content, List<Attachment> attachments)", "full_signature": "private Pair<List<Attachment>, List<Attachment>> separateAttachments(String content, List<Attachment> attachments)", "class_method_signature": "HTMLMimeBodyPartFactory.separateAttachments(String content, List<Attachment> attachments)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-mail/xwiki-platform-mail-send/xwiki-platform-mail-send-default/src/main/java/org/xwiki/mail/internal/factory/html/HTMLMimeBodyPartFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(String content, Map<String, Object> parameters)", "modifiers": "@Override public", "return": "MimeBodyPart", "body": "@Override\n    public MimeBodyPart create(String content, Map<String, Object> parameters) throws MessagingException\n    {\n        MimeBodyPart resultBodyPart;\n\n        // Separate normal attachment from embedded image attachments\n        List<Attachment> allAttachments = (List<Attachment>) parameters.get(\"attachments\");\n        Pair<List<Attachment>, List<Attachment>> attachmentPairs = separateAttachments(content, allAttachments);\n        List<Attachment> embeddedImageAttachments = attachmentPairs.getLeft();\n        List<Attachment> normalAttachments = attachmentPairs.getRight();\n\n        // Step 1: Handle the HTML section of the mail.\n        MimeBodyPart htmlBodyPart;\n        if (!embeddedImageAttachments.isEmpty()) {\n            htmlBodyPart = new MimeBodyPart();\n            htmlBodyPart.setContent(createHTMLMultipart(content, embeddedImageAttachments));\n        } else {\n            // Create the HTML body part of the email\n            htmlBodyPart = createHTMLBodyPart(content, false);\n        }\n\n        // Step 2: Handle the optional alternative text\n        String alternativeText = (String) parameters.get(\"alternate\");\n        if (alternativeText != null) {\n            resultBodyPart = createAlternativePart(htmlBodyPart,\n                this.defaultPartFactory.create(alternativeText, Collections.<String, Object>emptyMap()));\n        } else {\n            // No alternative text, just add the HTML body part to the Multipart\n            resultBodyPart = htmlBodyPart;\n        }\n\n        // Step 3 Add the normal attachments (if any). Any embedded images have already been handled in the HTML body\n        // part. Note: If there are attachments we need to wrap our body part inside a \"mixed\" Multipart.\n        if (!normalAttachments.isEmpty()) {\n            MimeMultipart multipart = new MimeMultipart(\"mixed\");\n            multipart.addBodyPart(resultBodyPart);\n            handleAttachments(multipart, normalAttachments);\n            resultBodyPart = new MimeBodyPart();\n            resultBodyPart.setContent(multipart);\n        }\n\n        // Handle headers passed as parameter\n        addHeaders(resultBodyPart, parameters);\n\n        return resultBodyPart;\n    }", "signature": "MimeBodyPart create(String content, Map<String, Object> parameters)", "full_signature": "@Override public MimeBodyPart create(String content, Map<String, Object> parameters)", "class_method_signature": "HTMLMimeBodyPartFactory.create(String content, Map<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["get", "separateAttachments", "getLeft", "getRight", "isEmpty", "setContent", "createHTMLMultipart", "createHTMLBodyPart", "get", "createAlternativePart", "create", "emptyMap", "isEmpty", "addBodyPart", "handleAttachments", "setContent", "addHeaders"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}