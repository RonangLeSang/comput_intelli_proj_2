{"test_class": {"identifier": "DefaultAsyncRendererExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CELEMENT1 = \"celement1\";", "modifier": "private static final", "type": "String", "declarator": "CELEMENT1 = \"celement1\"", "var_name": "CELEMENT1"}, {"original_string": "private static final String CELEMENT2 = \"celement2\";", "modifier": "private static final", "type": "String", "declarator": "CELEMENT2 = \"celement2\"", "var_name": "CELEMENT2"}, {"original_string": "private static final Set<String> CELEMENTS = new LinkedHashSet<>(Arrays.asList(CELEMENT1, CELEMENT2));", "modifier": "private static final", "type": "Set<String>", "declarator": "CELEMENTS = new LinkedHashSet<>(Arrays.asList(CELEMENT1, CELEMENT2))", "var_name": "CELEMENTS"}, {"original_string": "private AsyncRendererConfiguration configuration;", "modifier": "private", "type": "AsyncRendererConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@MockComponent\n    private JobExecutor jobs;", "modifier": "@MockComponent\n    private", "type": "JobExecutor", "declarator": "jobs", "var_name": "jobs"}, {"original_string": "@MockComponent\n    private AsyncContext asyncContext;", "modifier": "@MockComponent\n    private", "type": "AsyncContext", "declarator": "asyncContext", "var_name": "asyncContext"}, {"original_string": "@MockComponent\n    private AsyncRendererCache cache;", "modifier": "@MockComponent\n    private", "type": "AsyncRendererCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "@MockComponent\n    private ContextStoreManager context;", "modifier": "@MockComponent\n    private", "type": "ContextStoreManager", "declarator": "context", "var_name": "context"}, {"original_string": "@InjectMockComponents\n    private DefaultAsyncRendererExecutor executor;", "modifier": "@InjectMockComponents\n    private", "type": "DefaultAsyncRendererExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private AsyncRenderer renderer;", "modifier": "private", "type": "AsyncRenderer", "declarator": "renderer", "var_name": "renderer"}, {"original_string": "private AsyncRendererJob job;", "modifier": "private", "type": "AsyncRendererJob", "declarator": "job", "var_name": "job"}, {"original_string": "private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock()", "var_name": "lock"}, {"original_string": "private JobGroupPath jobGroupPath;", "modifier": "private", "type": "JobGroupPath", "declarator": "jobGroupPath", "var_name": "jobGroupPath"}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-async/xwiki-platform-rendering-async-default/src/test/java/org/xwiki/rendering/async/internal/DefaultAsyncRendererExecutorTest.java"}, "test_case": {"identifier": "rendererAsyncCachedContextDisabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rendererAsyncCachedContextDisabled() throws JobException, RenderingException\n    {\n        // Disabled async in the context\n        when(this.asyncContext.isEnabled()).thenReturn(false);\n\n        when(this.renderer.getId()).thenReturn(Arrays.asList(\"1\", \"2\"));\n        when(this.renderer.isAsyncAllowed()).thenReturn(true);\n        when(this.renderer.isCacheAllowed()).thenReturn(true);\n\n        AsyncRendererExecutorResponse response = this.executor.render(this.renderer, this.configuration);\n\n        assertNull(response.getAsyncClientId());\n        assertEquals(\"1/2/celement1/value1%255c/celement2/value2%252f\", response.getJobIdHTTPPath());\n        assertEquals(Arrays.asList(\"1\", \"2\", \"celement1\", \"value1%5c\", \"celement2\", \"value2%2f\"),\n            response.getStatus().getRequest().getId());\n        assertEquals(\"false true\", response.getStatus().getResult().getResult());\n    }", "signature": "void rendererAsyncCachedContextDisabled()", "full_signature": "@Test public void rendererAsyncCachedContextDisabled()", "class_method_signature": "DefaultAsyncRendererExecutorTest.rendererAsyncCachedContextDisabled()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isEnabled", "thenReturn", "when", "getId", "asList", "thenReturn", "when", "isAsyncAllowed", "thenReturn", "when", "isCacheAllowed", "render", "assertNull", "getAsyncClientId", "assertEquals", "getJobIdHTTPPath", "assertEquals", "asList", "getId", "getRequest", "getStatus", "assertEquals", "getResult", "getResult", "getStatus"]}, "focal_class": {"identifier": "DefaultAsyncRendererExecutor", "superclass": "", "interfaces": "implements AsyncRendererExecutor", "fields": [{"original_string": "@Inject\n    @Named(AsyncRendererJobStatus.JOBTYPE)\n    private Provider<Job> jobProvider;", "modifier": "@Inject\n    @Named(AsyncRendererJobStatus.JOBTYPE)\n    private", "type": "Provider<Job>", "declarator": "jobProvider", "var_name": "jobProvider"}, {"original_string": "@Inject\n    private JobExecutor executor;", "modifier": "@Inject\n    private", "type": "JobExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Inject\n    private ContextStoreManager contextStore;", "modifier": "@Inject\n    private", "type": "ContextStoreManager", "declarator": "contextStore", "var_name": "contextStore"}, {"original_string": "@Inject\n    private AsyncRendererCache cache;", "modifier": "@Inject\n    private", "type": "AsyncRendererCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Inject\n    private AsyncContext asyncContext;", "modifier": "@Inject\n    private", "type": "AsyncContext", "declarator": "asyncContext", "var_name": "asyncContext"}, {"original_string": "@Inject\n    protected AuthorExecutor authorExecutor;", "modifier": "@Inject\n    protected", "type": "AuthorExecutor", "declarator": "authorExecutor", "var_name": "authorExecutor"}, {"original_string": "@Inject\n    @Named(\"context\")\n    private ComponentManager componentManager;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "@Inject\n    private CacheControl cacheControl;", "modifier": "@Inject\n    private", "type": "CacheControl", "declarator": "cacheControl", "var_name": "cacheControl"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private AtomicLong clientIdCount = new AtomicLong();", "modifier": "private", "type": "AtomicLong", "declarator": "clientIdCount = new AtomicLong()", "var_name": "clientIdCount"}], "methods": [{"identifier": "newClientId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String newClientId()", "full_signature": "private String newClientId()", "class_method_signature": "DefaultAsyncRendererExecutor.newClientId()", "testcase": false, "constructor": false}, {"identifier": "getAsyncStatus", "parameters": "(List<String> id, String clientId)", "modifiers": "@Override public", "return": "AsyncRendererJobStatus", "signature": "AsyncRendererJobStatus getAsyncStatus(List<String> id, String clientId)", "full_signature": "@Override public AsyncRendererJobStatus getAsyncStatus(List<String> id, String clientId)", "class_method_signature": "DefaultAsyncRendererExecutor.getAsyncStatus(List<String> id, String clientId)", "testcase": false, "constructor": false}, {"identifier": "getAsyncStatus", "parameters": "(List<String> id, String clientId, long time, TimeUnit unit)", "modifiers": "@Override public", "return": "AsyncRendererJobStatus", "signature": "AsyncRendererJobStatus getAsyncStatus(List<String> id, String clientId, long time, TimeUnit unit)", "full_signature": "@Override public AsyncRendererJobStatus getAsyncStatus(List<String> id, String clientId, long time, TimeUnit unit)", "class_method_signature": "DefaultAsyncRendererExecutor.getAsyncStatus(List<String> id, String clientId, long time, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "modifiers": "@Override public", "return": "AsyncRendererExecutorResponse", "signature": "AsyncRendererExecutorResponse render(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "full_signature": "@Override public AsyncRendererExecutorResponse render(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "class_method_signature": "DefaultAsyncRendererExecutor.render(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "syncRender", "parameters": "(AsyncRenderer renderer, boolean cached,\n        AsyncRendererConfiguration configuration)", "modifiers": "private", "return": "AsyncRendererResult", "signature": "AsyncRendererResult syncRender(AsyncRenderer renderer, boolean cached,\n        AsyncRendererConfiguration configuration)", "full_signature": "private AsyncRendererResult syncRender(AsyncRenderer renderer, boolean cached,\n        AsyncRendererConfiguration configuration)", "class_method_signature": "DefaultAsyncRendererExecutor.syncRender(AsyncRenderer renderer, boolean cached,\n        AsyncRendererConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "injectUses", "parameters": "(AsyncRendererJobStatus status)", "modifiers": "private", "return": "void", "signature": "void injectUses(AsyncRendererJobStatus status)", "full_signature": "private void injectUses(AsyncRendererJobStatus status)", "class_method_signature": "DefaultAsyncRendererExecutor.injectUses(AsyncRendererJobStatus status)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(boolean asyncAllowed, boolean cacheAllowed,\n        AsyncRendererConfiguration configuration)", "modifiers": "private", "return": "Map<String, Serializable>", "signature": "Map<String, Serializable> getContext(boolean asyncAllowed, boolean cacheAllowed,\n        AsyncRendererConfiguration configuration)", "full_signature": "private Map<String, Serializable> getContext(boolean asyncAllowed, boolean cacheAllowed,\n        AsyncRendererConfiguration configuration)", "class_method_signature": "DefaultAsyncRendererExecutor.getContext(boolean asyncAllowed, boolean cacheAllowed,\n        AsyncRendererConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "getCurrent", "parameters": "(List<String> jobId)", "modifiers": "private", "return": "AsyncRendererJobStatus", "signature": "AsyncRendererJobStatus getCurrent(List<String> jobId)", "full_signature": "private AsyncRendererJobStatus getCurrent(List<String> jobId)", "class_method_signature": "DefaultAsyncRendererExecutor.getCurrent(List<String> jobId)", "testcase": false, "constructor": false}, {"identifier": "getJobId", "parameters": "(AsyncRenderer renderer, Map<String, Serializable> context)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getJobId(AsyncRenderer renderer, Map<String, Serializable> context)", "full_signature": "private List<String> getJobId(AsyncRenderer renderer, Map<String, Serializable> context)", "class_method_signature": "DefaultAsyncRendererExecutor.getJobId(AsyncRenderer renderer, Map<String, Serializable> context)", "testcase": false, "constructor": false}, {"identifier": "encodeId", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String encodeId(String value)", "full_signature": "private String encodeId(String value)", "class_method_signature": "DefaultAsyncRendererExecutor.encodeId(String value)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(char c, StringBuilder builder)", "modifiers": "private", "return": "void", "signature": "void encode(char c, StringBuilder builder)", "full_signature": "private void encode(char c, StringBuilder builder)", "class_method_signature": "DefaultAsyncRendererExecutor.encode(char c, StringBuilder builder)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-async/xwiki-platform-rendering-async-default/src/main/java/org/xwiki/rendering/async/internal/DefaultAsyncRendererExecutor.java"}, "focal_method": {"identifier": "render", "parameters": "(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "modifiers": "@Override public", "return": "AsyncRendererExecutorResponse", "body": "@Override\n    public AsyncRendererExecutorResponse render(AsyncRenderer renderer, AsyncRendererConfiguration configuration)\n        throws JobException, RenderingException\n    {\n        // if placeholder is forced, then we always consider it as async.\n        boolean asyncAllowed = configuration.isPlaceHolderForced()\n                                || (renderer.isAsyncAllowed() && this.asyncContext.isEnabled());\n        boolean cacheAllowed = renderer.isCacheAllowed();\n\n        // Get context and job id\n        Map<String, Serializable> context = getContext(asyncAllowed, cacheAllowed, configuration);\n\n        // Generate job id\n        List<String> jobId = getJobId(renderer, context);\n\n        if (cacheAllowed) {\n            this.cache.getLock().readLock().lock();\n\n            try {\n                AsyncRendererJobStatus status = getCurrent(jobId);\n\n                if (status != null\n                    && (status.getEndDate() == null || this.cacheControl.isCacheReadAllowed(status.getEndDate()))) {\n                    if (status.getResult() != null && !configuration.isPlaceHolderForced()) {\n                        // Available cached result, return it\n\n                        injectUses(status);\n\n                        return new AsyncRendererExecutorResponse(status);\n                    } else if (asyncAllowed) {\n                        // Already running job, associate it with another client\n                        return new AsyncRendererExecutorResponse(status, newClientId());\n                    }\n                }\n            } finally {\n                this.cache.getLock().readLock().unlock();\n            }\n        }\n\n        ////////////////////////////////\n        // Execute the renderer\n\n        AsyncRendererExecutorResponse response;\n\n        AsyncRendererJobRequest request = new AsyncRendererJobRequest();\n        request.setRenderer(renderer);\n        request.setJobGroupPath(renderer.getJobGroupPath());\n\n        if (asyncAllowed) {\n            this.cache.getLock().writeLock().lock();\n\n            try {\n                if (context != null) {\n                    request.setContext(context);\n                }\n\n                String asyncClientId = newClientId();\n\n                // If cache is disabled make sure the id is unique\n                if (!renderer.isCacheAllowed()) {\n                    jobId.add(asyncClientId);\n                }\n\n                request.setId(jobId);\n\n                Job job = this.executor.execute(AsyncRendererJobStatus.JOBTYPE, request);\n\n                AsyncRendererJobStatus status = (AsyncRendererJobStatus) job.getStatus();\n\n                response = new AsyncRendererExecutorResponse(status, asyncClientId);\n            } finally {\n                this.cache.getLock().writeLock().unlock();\n            }\n        } else {\n            AsyncRendererJobStatus status;\n\n            // If async is disabled run the renderer in the current thread\n            if (renderer.isCacheAllowed()) {\n                // Prepare to catch stuff to invalidate the cache\n                if (this.asyncContext instanceof DefaultAsyncContext) {\n                    ((DefaultAsyncContext) this.asyncContext).pushContextUse();\n                }\n\n                AsyncRendererResult result = syncRender(renderer, true, configuration);\n\n                // Get suff to invalidate the cache\n                if (this.asyncContext instanceof DefaultAsyncContext) {\n                    ContextUse contextUse = ((DefaultAsyncContext) this.asyncContext).popContextUse();\n\n                    // Create a pseudo job status\n                    status = new AsyncRendererJobStatus(request, result, contextUse.getReferences(),\n                        contextUse.getRoleTypes(), contextUse.getRoles(), contextUse.getRights(), contextUse.getUses());\n                } else {\n                    // Create a pseudo job status\n                    status = new AsyncRendererJobStatus(request, result, null, null, null, null, null);\n                }\n\n                request.setId(jobId);\n\n                this.cache.put(status);\n            } else {\n                AsyncRendererResult result = syncRender(renderer, false, configuration);\n\n                // Create a pseudo job status\n                status = new AsyncRendererJobStatus(request, result);\n            }\n\n            response = new AsyncRendererExecutorResponse(status);\n        }\n\n        return response;\n    }", "signature": "AsyncRendererExecutorResponse render(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "full_signature": "@Override public AsyncRendererExecutorResponse render(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "class_method_signature": "DefaultAsyncRendererExecutor.render(AsyncRenderer renderer, AsyncRendererConfiguration configuration)", "testcase": false, "constructor": false, "invocations": ["isPlaceHolderForced", "isAsyncAllowed", "isEnabled", "isCacheAllowed", "getContext", "getJobId", "lock", "readLock", "getLock", "getCurrent", "getEndDate", "isCacheReadAllowed", "getEndDate", "getResult", "isPlaceHolderForced", "injectUses", "newClientId", "unlock", "readLock", "getLock", "setRenderer", "setJobGroupPath", "getJobGroupPath", "lock", "writeLock", "getLock", "setContext", "newClientId", "isCacheAllowed", "add", "setId", "execute", "getStatus", "unlock", "writeLock", "getLock", "isCacheAllowed", "pushContextUse", "syncRender", "popContextUse", "getReferences", "getRoleTypes", "getRoles", "getRights", "getUses", "setId", "put", "syncRender"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}