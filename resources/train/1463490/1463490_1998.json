{"test_class": {"identifier": "ActionFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ActionFilter filter = new ActionFilter();", "modifier": "private final", "type": "ActionFilter", "declarator": "filter = new ActionFilter()", "var_name": "filter"}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/ActionFilterTest.java"}, "test_case": {"identifier": "doFilterXactionNull", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void doFilterXactionNull() throws Exception\n    {\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        ServletResponse response = mock(ServletResponse.class);\n        FilterChain chain = mock(FilterChain.class);\n\n        when(request.getParameterValues(\"xaction\")).thenReturn(null);\n        when(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.singletonList(\"a\")));\n\n        filter.doFilter(request, response, chain);\n\n        verify(request).getParameterValues(\"xaction\");\n        verify(chain).doFilter(request, response);\n        verify(request, never()).getRequestDispatcher(any());\n    }", "signature": "void doFilterXactionNull()", "full_signature": "@Test void doFilterXactionNull()", "class_method_signature": "ActionFilterTest.doFilterXactionNull()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getParameterValues", "thenReturn", "when", "getParameterNames", "enumeration", "singletonList", "doFilter", "getParameterValues", "verify", "doFilter", "verify", "getRequestDispatcher", "verify", "never", "any"]}, "focal_class": {"identifier": "ActionFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ActionFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ActionFilter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String ACTION_PREFIX = \"action_\";", "modifier": "private static final", "type": "String", "declarator": "ACTION_PREFIX = \"action_\"", "var_name": "ACTION_PREFIX"}, {"original_string": "private static final String PATH_SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "PATH_SEPARATOR = \"/\"", "var_name": "PATH_SEPARATOR"}, {"original_string": "private static final String ATTRIBUTE_ACTION_DISPATCHED = ActionFilter.class.getName() + \".actionDispatched\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIBUTE_ACTION_DISPATCHED = ActionFilter.class.getName() + \".actionDispatched\"", "var_name": "ATTRIBUTE_ACTION_DISPATCHED"}], "methods": [{"identifier": "init", "parameters": "(FilterConfig filterConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(FilterConfig filterConfig)", "full_signature": "@Override public void init(FilterConfig filterConfig)", "class_method_signature": "ActionFilter.init(FilterConfig filterConfig)", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "ActionFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ActionFilter.destroy()", "testcase": false, "constructor": false}, {"identifier": "getTargetURL", "parameters": "(HttpServletRequest request, String action)", "modifiers": "private", "return": "String", "signature": "String getTargetURL(HttpServletRequest request, String action)", "full_signature": "private String getTargetURL(HttpServletRequest request, String action)", "class_method_signature": "ActionFilter.getTargetURL(HttpServletRequest request, String action)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/ActionFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n        ServletException\n    {\n        // Only HTTP requests can be dispatched.\n        if (request instanceof HttpServletRequest\n            && !Boolean.parseBoolean((String) request.getAttribute(ATTRIBUTE_ACTION_DISPATCHED)))\n        {\n            HttpServletRequest hrequest = (HttpServletRequest) request;\n            Enumeration<String> parameterNames = hrequest.getParameterNames();\n            while (parameterNames.hasMoreElements()) {\n                String parameter = parameterNames.nextElement();\n                \n                // If some xactions are passed as parameter, the parameters prefixed with 'action_' are only taken into\n                // account if they are part of the xaction list. Otherwise, all the parameters prefixed with 'action_'\n                // are accepted.\n                String[] xactions = request.getParameterValues(\"xaction\");\n                if (parameter.startsWith(ACTION_PREFIX) && (xactions == null || Stream.of(xactions)\n                    .anyMatch(it -> Objects.equals(parameter, String.format(\"action_%s\", it)))))\n                {\n                    String targetURL = getTargetURL(hrequest, parameter);\n                    RequestDispatcher dispatcher = hrequest.getRequestDispatcher(targetURL);\n                    if (dispatcher != null) {\n                        LOGGER.debug(\"Forwarding request to \" + targetURL);\n                        request.setAttribute(ATTRIBUTE_ACTION_DISPATCHED, \"true\");\n                        dispatcher.forward(hrequest, response);\n                        // Allow multiple calls to this filter as long as they are not nested.\n                        request.removeAttribute(ATTRIBUTE_ACTION_DISPATCHED);\n                        // If the request was forwarder to another path, don't continue the normal processing chain.\n                        return;\n                    }\n                }\n            }\n        }\n        // Let the request pass through unchanged.\n        chain.doFilter(request, response);\n    }", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "ActionFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false, "invocations": ["parseBoolean", "getAttribute", "getParameterNames", "hasMoreElements", "nextElement", "getParameterValues", "startsWith", "anyMatch", "of", "equals", "format", "getTargetURL", "getRequestDispatcher", "debug", "setAttribute", "forward", "removeAttribute", "doFilter"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}