{"test_class": {"identifier": "DownloadActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_FILE_NAME = \"file.txt\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FILE_NAME = \"file.txt\"", "var_name": "DEFAULT_FILE_NAME"}, {"original_string": "private static final String DEFAULT_URI = \"/xwiki/bin/download/space/page/file.txt\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_URI = \"/xwiki/bin/download/space/page/file.txt\"", "var_name": "DEFAULT_URI"}, {"original_string": "@Rule\n    public MockitoOldcoreRule oldcore = new MockitoOldcoreRule();", "modifier": "@Rule\n    public", "type": "MockitoOldcoreRule", "declarator": "oldcore = new MockitoOldcoreRule()", "var_name": "oldcore"}, {"original_string": "private XWikiDocument document;", "modifier": "private", "type": "XWikiDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private XWikiRequest request;", "modifier": "private", "type": "XWikiRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private XWikiResponse response;", "modifier": "private", "type": "XWikiResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private XWikiEngineContext ec;", "modifier": "private", "type": "XWikiEngineContext", "declarator": "ec", "var_name": "ec"}, {"original_string": "private ServletOutputStream out;", "modifier": "private", "type": "ServletOutputStream", "declarator": "out", "var_name": "out"}, {"original_string": "private DownloadAction action = new DownloadAction();", "modifier": "private", "type": "DownloadAction", "declarator": "action = new DownloadAction()", "var_name": "action"}, {"original_string": "private byte[] fileContent = \"abcdefghijklmn\".getBytes(XWiki.DEFAULT_ENCODING);", "modifier": "private", "type": "byte[]", "declarator": "fileContent = \"abcdefghijklmn\".getBytes(XWiki.DEFAULT_ENCODING)", "var_name": "fileContent"}, {"original_string": "private ResourceReferenceManager resourceReferenceManager;", "modifier": "private", "type": "ResourceReferenceManager", "declarator": "resourceReferenceManager", "var_name": "resourceReferenceManager"}, {"original_string": "private DocumentReference documentReference;", "modifier": "private", "type": "DocumentReference", "declarator": "documentReference", "var_name": "documentReference"}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/DownloadActionTest.java"}, "test_case": {"identifier": "downloadWhenValidOverflowingRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void downloadWhenValidOverflowingRange() throws XWikiException, IOException\n    {\n        // This test expects bytes 9, 10, 11, 12 and 13 from the file, although 14 and 15 are requested as well.\n        Date d = new Date();\n        createAttachment(d, DEFAULT_FILE_NAME);\n        setRequestExpectations(DEFAULT_URI, null, null, \"bytes=9-15\", -1l, DEFAULT_FILE_NAME);\n\n        assertNull(this.action.render(this.oldcore.getXWikiContext()));\n\n        verify(this.response).setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);\n        verify(this.response).setHeader(\"Content-Range\", \"bytes 9-13/\" + DownloadActionTest.this.fileContent.length);\n        verifyResponseExpectations(d.getTime(), this.fileContent.length - 9);\n        verifyOutputExpectations(9, this.fileContent.length);\n    }", "signature": "void downloadWhenValidOverflowingRange()", "full_signature": "@Test public void downloadWhenValidOverflowingRange()", "class_method_signature": "DownloadActionTest.downloadWhenValidOverflowingRange()", "testcase": true, "constructor": false, "invocations": ["createAttachment", "setRequestExpectations", "assertNull", "render", "getXWikiContext", "setStatus", "verify", "setHeader", "verify", "verifyResponseExpectations", "getTime", "verifyOutputExpectations"]}, "focal_class": {"identifier": "DownloadAction", "superclass": "extends XWikiAction", "interfaces": "", "fields": [{"original_string": "public static final String ACTION_NAME = \"download\";", "modifier": "public static final", "type": "String", "declarator": "ACTION_NAME = \"download\"", "var_name": "ACTION_NAME"}, {"original_string": "public static final String ATTACHMENT = \"attachment\";", "modifier": "public static final", "type": "String", "declarator": "ATTACHMENT = \"attachment\"", "var_name": "ATTACHMENT"}, {"original_string": "public static final List<String> MIMETYPE_WHITELIST =\n        Arrays.asList(\"audio/basic\", \"audio/L24\", \"audio/mp4\", \"audio/mpeg\", \"audio/ogg\", \"audio/vorbis\",\n            \"audio/vnd.rn-realaudio\", \"audio/vnd.wave\", \"audio/webm\", \"image/gif\", \"image/jpeg\", \"image/pjpeg\",\n            \"image/png\", \"image/svg+xml\", \"image/tiff\", \"text/csv\", \"text/plain\", \"text/xml\", \"text/rtf\", \"video/mpeg\",\n            \"video/ogg\", \"video/quicktime\", \"video/webm\", \"video/x-matroska\", \"video/x-ms-wmv\", \"video/x-flv\");", "modifier": "public static final", "type": "List<String>", "declarator": "MIMETYPE_WHITELIST =\n        Arrays.asList(\"audio/basic\", \"audio/L24\", \"audio/mp4\", \"audio/mpeg\", \"audio/ogg\", \"audio/vorbis\",\n            \"audio/vnd.rn-realaudio\", \"audio/vnd.wave\", \"audio/webm\", \"image/gif\", \"image/jpeg\", \"image/pjpeg\",\n            \"image/png\", \"image/svg+xml\", \"image/tiff\", \"text/csv\", \"text/plain\", \"text/xml\", \"text/rtf\", \"video/mpeg\",\n            \"video/ogg\", \"video/quicktime\", \"video/webm\", \"video/x-matroska\", \"video/x-ms-wmv\", \"video/x-flv\")", "var_name": "MIMETYPE_WHITELIST"}, {"original_string": "public static final String WHITELIST_PROPERTY = \"attachment.download.whitelist\";", "modifier": "public static final", "type": "String", "declarator": "WHITELIST_PROPERTY = \"attachment.download.whitelist\"", "var_name": "WHITELIST_PROPERTY"}, {"original_string": "public static final String BLACKLIST_PROPERTY = \"attachment.download.blacklist\";", "modifier": "public static final", "type": "String", "declarator": "BLACKLIST_PROPERTY = \"attachment.download.blacklist\"", "var_name": "BLACKLIST_PROPERTY"}, {"original_string": "private static final String SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"/\"", "var_name": "SEPARATOR"}, {"original_string": "private static final String RANGE_HEADER_NAME = \"Range\";", "modifier": "private static final", "type": "String", "declarator": "RANGE_HEADER_NAME = \"Range\"", "var_name": "RANGE_HEADER_NAME"}, {"original_string": "private static final Pattern RANGE_HEADER_PATTERN = Pattern.compile(\"bytes=([0-9]+)?-([0-9]+)?\");", "modifier": "private static final", "type": "Pattern", "declarator": "RANGE_HEADER_PATTERN = Pattern.compile(\"bytes=([0-9]+)?-([0-9]+)?\")", "var_name": "RANGE_HEADER_PATTERN"}], "methods": [{"identifier": "DownloadAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " DownloadAction()", "full_signature": "public  DownloadAction()", "class_method_signature": "DownloadAction.DownloadAction()", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "String", "signature": "String render(XWikiContext context)", "full_signature": "@Override public String render(XWikiContext context)", "class_method_signature": "DownloadAction.render(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "throwNotFoundException", "parameters": "(String filename)", "modifiers": "private", "return": "void", "signature": "void throwNotFoundException(String filename)", "full_signature": "private void throwNotFoundException(String filename)", "class_method_signature": "DownloadAction.throwNotFoundException(String filename)", "testcase": false, "constructor": false}, {"identifier": "sendPartialContent", "parameters": "(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "modifiers": "private", "return": "boolean", "signature": "boolean sendPartialContent(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "full_signature": "private boolean sendPartialContent(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "class_method_signature": "DownloadAction.sendPartialContent(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "writeByteRange", "parameters": "(final XWikiAttachment attachment, Long start, Long end, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "modifiers": "private", "return": "void", "signature": "void writeByteRange(final XWikiAttachment attachment, Long start, Long end, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "full_signature": "private void writeByteRange(final XWikiAttachment attachment, Long start, Long end, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "class_method_signature": "DownloadAction.writeByteRange(final XWikiAttachment attachment, Long start, Long end, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "sendContent", "parameters": "(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "modifiers": "protected", "return": "void", "signature": "void sendContent(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "full_signature": "protected void sendContent(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "class_method_signature": "DownloadAction.sendContent(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getFileName()", "full_signature": "private String getFileName()", "class_method_signature": "DownloadAction.getFileName()", "testcase": false, "constructor": false}, {"identifier": "extractAttachmentAndDocumentFromURLWithoutSupportingNestedSpaces", "parameters": "(\n        XWikiRequest request, XWikiContext context)", "modifiers": "private", "return": "Pair<XWikiDocument, XWikiAttachment>", "signature": "Pair<XWikiDocument, XWikiAttachment> extractAttachmentAndDocumentFromURLWithoutSupportingNestedSpaces(\n        XWikiRequest request, XWikiContext context)", "full_signature": "private Pair<XWikiDocument, XWikiAttachment> extractAttachmentAndDocumentFromURLWithoutSupportingNestedSpaces(\n        XWikiRequest request, XWikiContext context)", "class_method_signature": "DownloadAction.extractAttachmentAndDocumentFromURLWithoutSupportingNestedSpaces(\n        XWikiRequest request, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "pushDocumentInContext", "parameters": "(Map<String, Object> backupObjects, DocumentReference documentReference)", "modifiers": "private", "return": "void", "signature": "void pushDocumentInContext(Map<String, Object> backupObjects, DocumentReference documentReference)", "full_signature": "private void pushDocumentInContext(Map<String, Object> backupObjects, DocumentReference documentReference)", "class_method_signature": "DownloadAction.pushDocumentInContext(Map<String, Object> backupObjects, DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "popDocumentFromContext", "parameters": "(Map<String, Object> backupObjects)", "modifiers": "private", "return": "void", "signature": "void popDocumentFromContext(Map<String, Object> backupObjects)", "full_signature": "private void popDocumentFromContext(Map<String, Object> backupObjects)", "class_method_signature": "DownloadAction.popDocumentFromContext(Map<String, Object> backupObjects)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "private", "return": "XWikiContext", "signature": "XWikiContext getContext()", "full_signature": "private XWikiContext getContext()", "class_method_signature": "DownloadAction.getContext()", "testcase": false, "constructor": false}, {"identifier": "getAttachment", "parameters": "(XWikiRequest request, XWikiDocument document, String filename)", "modifiers": "private", "return": "XWikiAttachment", "signature": "XWikiAttachment getAttachment(XWikiRequest request, XWikiDocument document, String filename)", "full_signature": "private XWikiAttachment getAttachment(XWikiRequest request, XWikiDocument document, String filename)", "class_method_signature": "DownloadAction.getAttachment(XWikiRequest request, XWikiDocument document, String filename)", "testcase": false, "constructor": false}, {"identifier": "setCommonHeaders", "parameters": "(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "modifiers": "private", "return": "void", "signature": "void setCommonHeaders(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "full_signature": "private void setCommonHeaders(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "class_method_signature": "DownloadAction.setCommonHeaders(final XWikiAttachment attachment, final XWikiRequest request,\n        final XWikiResponse response, final XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "isValidRange", "parameters": "(Long start, Long end)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidRange(Long start, Long end)", "full_signature": "private boolean isValidRange(Long start, Long end)", "class_method_signature": "DownloadAction.isValidRange(Long start, Long end)", "testcase": false, "constructor": false}, {"identifier": "isAuthorized", "parameters": "(String mimeType)", "modifiers": "private", "return": "boolean", "signature": "boolean isAuthorized(String mimeType)", "full_signature": "private boolean isAuthorized(String mimeType)", "class_method_signature": "DownloadAction.isAuthorized(String mimeType)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/DownloadAction.java"}, "focal_method": {"identifier": "render", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        XWikiRequest request = context.getRequest();\n        XWikiResponse response = context.getResponse();\n\n        XWikiDocument doc = context.getDoc();\n        String filename = getFileName();\n        XWikiAttachment attachment = getAttachment(request, doc, filename);\n\n        Map<String, Object> backwardCompatibilityContextObjects = null;\n\n        if (attachment == null) {\n            // If some plugins extend the Download URL format for the Standard Scheme the document in the context will\n            // most likely not have a reference that corresponds to what the plugin expects. For example imagine that\n            // the URL is a Zip Explorer URL like .../download/space/page/attachment/index.html. This will be parsed\n            // as space.page.attachment@index.html by the Standard URL scheme parsers. Thus the attachment won't be\n            // found since index.html is not the correct attachment for the Zip Explorer plugin's URL format.\n            //\n            // Thus in order to preserve backward compatibility for existing plugins that have custom URL formats\n            // extending the Download URL format, we parse again the URL by considering that it doesn't contain any\n            // Nested Space. This also means that those plugins will need to completely reparse the URL if they wish to\n            // support Nested Spaces.\n            //\n            // Also note that this code below is not compatible with the notion of having several URL schemes. The real\n            // fix will be to not allow plugins to support custom URL formats and instead to have them register new\n            // Actions if they need a different URL format.\n            Pair<XWikiDocument, XWikiAttachment> result =\n                extractAttachmentAndDocumentFromURLWithoutSupportingNestedSpaces(request, context);\n\n            if (result == null) {\n                throwNotFoundException(filename);\n            }\n\n            XWikiDocument backwardCompatibilityDocument = result.getLeft();\n            attachment = result.getRight();\n\n            // Set the new doc as the context doc so that plugins see it as the context doc\n            backwardCompatibilityContextObjects = new HashMap<>();\n            pushDocumentInContext(backwardCompatibilityContextObjects,\n                backwardCompatibilityDocument.getDocumentReference());\n        }\n\n        try {\n            XWikiPluginManager plugins = context.getWiki().getPluginManager();\n            attachment = plugins.downloadAttachment(attachment, context);\n\n            if (attachment == null) {\n                throwNotFoundException(filename);\n            }\n\n            // Try to load the attachment content just to make sure that the attachment really exists\n            // This will throw an exception if the attachment content isn't available\n            try {\n                attachment.getContentLongSize(context);\n            } catch (XWikiException e) {\n                Object[] args = { filename };\n                throw new XWikiException(XWikiException.MODULE_XWIKI_APP,\n                    XWikiException.ERROR_XWIKI_APP_ATTACHMENT_NOT_FOUND, \"Attachment content {0} not found\", null,\n                    args);\n            }\n\n            long lastModifiedOnClient = request.getDateHeader(\"If-Modified-Since\");\n            long lastModifiedOnServer = attachment.getDate().getTime();\n            if (lastModifiedOnClient != -1 && lastModifiedOnClient >= lastModifiedOnServer) {\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                return null;\n            }\n\n            // Sending the content of the attachment\n            if (request.getHeader(RANGE_HEADER_NAME) != null) {\n                try {\n                    if (sendPartialContent(attachment, request, response, context)) {\n                        return null;\n                    }\n                } catch (IOException ex) {\n                    // Broken response...\n                }\n            }\n            sendContent(attachment, request, response, context);\n            return null;\n        } finally {\n            if (backwardCompatibilityContextObjects != null) {\n                popDocumentFromContext(backwardCompatibilityContextObjects);\n            }\n        }\n    }", "signature": "String render(XWikiContext context)", "full_signature": "@Override public String render(XWikiContext context)", "class_method_signature": "DownloadAction.render(XWikiContext context)", "testcase": false, "constructor": false, "invocations": ["getRequest", "getResponse", "getDoc", "getFileName", "getAttachment", "extractAttachmentAndDocumentFromURLWithoutSupportingNestedSpaces", "throwNotFoundException", "getLeft", "getRight", "pushDocumentInContext", "getDocumentReference", "getPluginManager", "getWiki", "downloadAttachment", "throwNotFoundException", "getContentLongSize", "getDateHeader", "getTime", "getDate", "setStatus", "getHeader", "sendPartialContent", "sendContent", "popDocumentFromContext"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}