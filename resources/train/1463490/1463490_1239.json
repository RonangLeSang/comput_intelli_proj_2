{"test_class": {"identifier": "DefaultNotificationPreferenceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<DefaultNotificationPreferenceManager> mocker =\n            new MockitoComponentMockingRule<>(DefaultNotificationPreferenceManager.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<DefaultNotificationPreferenceManager>", "declarator": "mocker =\n            new MockitoComponentMockingRule<>(DefaultNotificationPreferenceManager.class)", "var_name": "mocker"}, {"original_string": "private ModelBridge modelBridge;", "modifier": "private", "type": "ModelBridge", "declarator": "modelBridge", "var_name": "modelBridge"}, {"original_string": "private NotificationPreference mockPreference11;", "modifier": "private", "type": "NotificationPreference", "declarator": "mockPreference11", "var_name": "mockPreference11"}, {"original_string": "private NotificationPreference mockPreference12;", "modifier": "private", "type": "NotificationPreference", "declarator": "mockPreference12", "var_name": "mockPreference12"}, {"original_string": "private NotificationPreference mockPreference21;", "modifier": "private", "type": "NotificationPreference", "declarator": "mockPreference21", "var_name": "mockPreference21"}, {"original_string": "private NotificationPreference mockPreference22;", "modifier": "private", "type": "NotificationPreference", "declarator": "mockPreference22", "var_name": "mockPreference22"}, {"original_string": "private NotificationPreference mockPreference23;", "modifier": "private", "type": "NotificationPreference", "declarator": "mockPreference23", "var_name": "mockPreference23"}, {"original_string": "private NotificationPreferenceProvider mockPreferenceProvider1;", "modifier": "private", "type": "NotificationPreferenceProvider", "declarator": "mockPreferenceProvider1", "var_name": "mockPreferenceProvider1"}, {"original_string": "private NotificationPreferenceProvider mockPreferenceProvider2;", "modifier": "private", "type": "NotificationPreferenceProvider", "declarator": "mockPreferenceProvider2", "var_name": "mockPreferenceProvider2"}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-preferences/xwiki-platform-notifications-preferences-api/src/test/java/org/xwiki/notifications/preferences/internal/DefaultNotificationPreferenceManagerTest.java"}, "test_case": {"identifier": "getNotificationPreferencesWithAdditionalParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNotificationPreferencesWithAdditionalParameters() throws Exception\n    {\n        DocumentReference user = new DocumentReference(\"xwiki\", \"test\", \"user\");\n\n        mockPreferenceProviders(user);\n\n        List<NotificationPreference> preferences = mocker.getComponentUnderTest().getPreferences(user,\n                true, NotificationFormat.ALERT);\n\n        assertEquals(1, preferences.size());\n        assertTrue(preferences.contains(mockPreference11));\n\n        preferences = mocker.getComponentUnderTest().getPreferences(user,\n                false, NotificationFormat.ALERT);\n\n        assertEquals(1, preferences.size());\n        assertTrue(preferences.contains(mockPreference21));\n\n        preferences = mocker.getComponentUnderTest().getPreferences(user,\n                true, NotificationFormat.EMAIL);\n\n        assertEquals(0, preferences.size());\n\n        preferences = mocker.getComponentUnderTest().getPreferences(user,\n                false, NotificationFormat.EMAIL);\n\n        assertEquals(2, preferences.size());\n        assertTrue(preferences.contains(mockPreference22));\n        assertTrue(preferences.contains(mockPreference23));\n    }", "signature": "void getNotificationPreferencesWithAdditionalParameters()", "full_signature": "@Test public void getNotificationPreferencesWithAdditionalParameters()", "class_method_signature": "DefaultNotificationPreferenceManagerTest.getNotificationPreferencesWithAdditionalParameters()", "testcase": true, "constructor": false, "invocations": ["mockPreferenceProviders", "getPreferences", "getComponentUnderTest", "assertEquals", "size", "assertTrue", "contains", "getPreferences", "getComponentUnderTest", "assertEquals", "size", "assertTrue", "contains", "getPreferences", "getComponentUnderTest", "assertEquals", "size", "getPreferences", "getComponentUnderTest", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "DefaultNotificationPreferenceManager", "superclass": "", "interfaces": "implements NotificationPreferenceManager", "fields": [{"original_string": "@Inject\n    @Named(\"cached\")\n    private ModelBridge cachedModelBridge;", "modifier": "@Inject\n    @Named(\"cached\")\n    private", "type": "ModelBridge", "declarator": "cachedModelBridge", "var_name": "cachedModelBridge"}, {"original_string": "@Inject\n    private ComponentManager componentManager;", "modifier": "@Inject\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "getProviders", "parameters": "()", "modifiers": "private", "return": "List<NotificationPreferenceProvider>", "signature": "List<NotificationPreferenceProvider> getProviders()", "full_signature": "private List<NotificationPreferenceProvider> getProviders()", "class_method_signature": "DefaultNotificationPreferenceManager.getProviders()", "testcase": false, "constructor": false}, {"identifier": "getAllPreferences", "parameters": "(DocumentReference user)", "modifiers": "@Override public", "return": "List<NotificationPreference>", "signature": "List<NotificationPreference> getAllPreferences(DocumentReference user)", "full_signature": "@Override public List<NotificationPreference> getAllPreferences(DocumentReference user)", "class_method_signature": "DefaultNotificationPreferenceManager.getAllPreferences(DocumentReference user)", "testcase": false, "constructor": false}, {"identifier": "getAllPreferences", "parameters": "(WikiReference wiki)", "modifiers": "@Override public", "return": "List<NotificationPreference>", "signature": "List<NotificationPreference> getAllPreferences(WikiReference wiki)", "full_signature": "@Override public List<NotificationPreference> getAllPreferences(WikiReference wiki)", "class_method_signature": "DefaultNotificationPreferenceManager.getAllPreferences(WikiReference wiki)", "testcase": false, "constructor": false}, {"identifier": "getPreferences", "parameters": "(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "modifiers": "@Override public", "return": "List<NotificationPreference>", "signature": "List<NotificationPreference> getPreferences(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "full_signature": "@Override public List<NotificationPreference> getPreferences(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "class_method_signature": "DefaultNotificationPreferenceManager.getPreferences(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "testcase": false, "constructor": false}, {"identifier": "setStartDateForUser", "parameters": "(DocumentReference user, Date startDate)", "modifiers": "@Override public", "return": "void", "signature": "void setStartDateForUser(DocumentReference user, Date startDate)", "full_signature": "@Override public void setStartDateForUser(DocumentReference user, Date startDate)", "class_method_signature": "DefaultNotificationPreferenceManager.setStartDateForUser(DocumentReference user, Date startDate)", "testcase": false, "constructor": false}, {"identifier": "savePreferences", "parameters": "(List<NotificationPreference> preferences)", "modifiers": "@Override public", "return": "void", "signature": "void savePreferences(List<NotificationPreference> preferences)", "full_signature": "@Override public void savePreferences(List<NotificationPreference> preferences)", "class_method_signature": "DefaultNotificationPreferenceManager.savePreferences(List<NotificationPreference> preferences)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-preferences/xwiki-platform-notifications-preferences-api/src/main/java/org/xwiki/notifications/preferences/internal/DefaultNotificationPreferenceManager.java"}, "focal_method": {"identifier": "getPreferences", "parameters": "(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "modifiers": "@Override public", "return": "List<NotificationPreference>", "body": "@Override\n    public List<NotificationPreference> getPreferences(DocumentReference user, boolean isEnabled,\n            NotificationFormat format) throws NotificationException\n    {\n        List<NotificationPreference> preferences = getAllPreferences(user);\n\n        Iterator<NotificationPreference> it = preferences.iterator();\n        while (it.hasNext()) {\n            NotificationPreference preference = it.next();\n\n            if (preference.isNotificationEnabled() != isEnabled\n                || !preference.getFormat().equals(format)) {\n                it.remove();\n            }\n        }\n\n        return preferences;\n    }", "signature": "List<NotificationPreference> getPreferences(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "full_signature": "@Override public List<NotificationPreference> getPreferences(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "class_method_signature": "DefaultNotificationPreferenceManager.getPreferences(DocumentReference user, boolean isEnabled,\n            NotificationFormat format)", "testcase": false, "constructor": false, "invocations": ["getAllPreferences", "iterator", "hasNext", "next", "isNotificationEnabled", "equals", "getFormat", "remove"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}