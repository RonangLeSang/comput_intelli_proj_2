{"test_class": {"identifier": "DefaultLinkRefactoringTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@MockComponent\n    @Named(\"compact\")\n    private EntityReferenceSerializer<String> compactEntityReferenceSerializer;", "modifier": "@MockComponent\n    @Named(\"compact\")\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "compactEntityReferenceSerializer", "var_name": "compactEntityReferenceSerializer"}, {"original_string": "@MockComponent\n    private DocumentReferenceResolver<EntityReference> defaultReferenceDocumentReferenceResolver;", "modifier": "@MockComponent\n    private", "type": "DocumentReferenceResolver<EntityReference>", "declarator": "defaultReferenceDocumentReferenceResolver", "var_name": "defaultReferenceDocumentReferenceResolver"}, {"original_string": "@MockComponent\n    private EntityReferenceResolver<ResourceReference> resourceReferenceResolver;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceResolver<ResourceReference>", "declarator": "resourceReferenceResolver", "var_name": "resourceReferenceResolver"}, {"original_string": "@MockComponent\n    private PageReferenceResolver<EntityReference> defaultReferencePageReferenceResolver;", "modifier": "@MockComponent\n    private", "type": "PageReferenceResolver<EntityReference>", "declarator": "defaultReferencePageReferenceResolver", "var_name": "defaultReferencePageReferenceResolver"}, {"original_string": "@MockComponent\n    private Provider<XWikiContext> xcontextProvider;", "modifier": "@MockComponent\n    private", "type": "Provider<XWikiContext>", "declarator": "xcontextProvider", "var_name": "xcontextProvider"}, {"original_string": "@MockComponent\n    @Named(\"context\")\n    private Provider<ComponentManager> componentManagerProvider;", "modifier": "@MockComponent\n    @Named(\"context\")\n    private", "type": "Provider<ComponentManager>", "declarator": "componentManagerProvider", "var_name": "componentManagerProvider"}, {"original_string": "@MockComponent\n    private ContentParser contentParser;", "modifier": "@MockComponent\n    private", "type": "ContentParser", "declarator": "contentParser", "var_name": "contentParser"}, {"original_string": "@InjectComponentManager\n    private ComponentManager componentManager;", "modifier": "@InjectComponentManager\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "@MockComponent\n    @Named(\"xwiki/2.1\")\n    private BlockRenderer blockRenderer;", "modifier": "@MockComponent\n    @Named(\"xwiki/2.1\")\n    private", "type": "BlockRenderer", "declarator": "blockRenderer", "var_name": "blockRenderer"}, {"original_string": "@InjectMockComponents\n    private DefaultLinkRefactoring refactoring;", "modifier": "@InjectMockComponents\n    private", "type": "DefaultLinkRefactoring", "declarator": "refactoring", "var_name": "refactoring"}, {"original_string": "@RegisterExtension\n    LogCaptureExtension logCapture = new LogCaptureExtension();", "modifier": "@RegisterExtension", "type": "LogCaptureExtension", "declarator": "logCapture = new LogCaptureExtension()", "var_name": "logCapture"}, {"original_string": "private XWikiContext xcontext = mock(XWikiContext.class);", "modifier": "private", "type": "XWikiContext", "declarator": "xcontext = mock(XWikiContext.class)", "var_name": "xcontext"}, {"original_string": "int logIndex = 0;", "modifier": "", "type": "int", "declarator": "logIndex = 0", "var_name": "logIndex"}], "file": "xwiki-platform-core/xwiki-platform-refactoring/xwiki-platform-refactoring-default/src/test/java/org/xwiki/refactoring/internal/DefaultLinkRefactoringTest.java"}, "test_case": {"identifier": "renameNonTerminalToTerminalDocumentLinks", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void renameNonTerminalToTerminalDocumentLinks() throws Exception\n    {\n        DocumentReference documentReference = new DocumentReference(\"wiki\", \"Space\", \"Page\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(this.xcontext.getWiki().getDocument(documentReference, this.xcontext)).thenReturn(document);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.getSyntax()).thenReturn(Syntax.XWIKI_2_1);\n\n        // From a non-terminal document to a terminal document.\n        DocumentReference oldLinkTarget = new DocumentReference(\"wiki\", \"A\", \"WebHome\");\n        DocumentReference newLinkTarget = new DocumentReference(\"wiki\", \"X\", \"Y\");\n\n        XDOM xdom = mock(XDOM.class);\n        when(document.getXDOM()).thenReturn(xdom);\n\n        ResourceReference docLinkReference = new ResourceReference(\"A.WebHome\", ResourceType.DOCUMENT);\n        LinkBlock documentLinkBlock = new LinkBlock(Collections.emptyList(), docLinkReference, false);\n\n        ResourceReference spaceLinkReference = new ResourceReference(\"A\", ResourceType.SPACE);\n        LinkBlock spaceLinkBlock = new LinkBlock(Collections.emptyList(), spaceLinkReference, false);\n\n        when(xdom.getBlocks(any(), eq(Block.Axes.DESCENDANT)))\n            .thenReturn(Arrays.asList(documentLinkBlock, spaceLinkBlock));\n\n        // Doc link\n        when(this.resourceReferenceResolver.resolve(docLinkReference, null, documentReference))\n            .thenReturn(oldLinkTarget);\n        when(this.defaultReferenceDocumentReferenceResolver.resolve(oldLinkTarget)).thenReturn(oldLinkTarget);\n        when(this.compactEntityReferenceSerializer.serialize(newLinkTarget, documentReference)).thenReturn(\"X.Y\");\n\n        // Space link\n        SpaceReference spaceReference = oldLinkTarget.getLastSpaceReference();\n        when(this.resourceReferenceResolver.resolve(spaceLinkReference, null, documentReference))\n            .thenReturn(spaceReference);\n        when(this.defaultReferenceDocumentReferenceResolver.resolve(spaceReference)).thenReturn(oldLinkTarget);\n        when(this.compactEntityReferenceSerializer.serialize(newLinkTarget.getLastSpaceReference(), documentReference))\n            .thenReturn(\"X\");\n\n        this.refactoring.renameLinks(documentReference, oldLinkTarget, newLinkTarget);\n\n        // Note that both resulting renamed back-links are of type document. (i.e. the space link was converted to a doc\n        // link)\n        assertEquals(\"X.Y\", documentLinkBlock.getReference().getReference());\n        assertEquals(ResourceType.DOCUMENT, documentLinkBlock.getReference().getType());\n        assertEquals(\"X.Y\", spaceLinkBlock.getReference().getReference());\n        assertEquals(ResourceType.DOCUMENT, spaceLinkBlock.getReference().getType());\n        verifyDocumentSave(document, \"Renamed back-links.\", false, false);\n    }", "signature": "void renameNonTerminalToTerminalDocumentLinks()", "full_signature": "@Test void renameNonTerminalToTerminalDocumentLinks()", "class_method_signature": "DefaultLinkRefactoringTest.renameNonTerminalToTerminalDocumentLinks()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getDocument", "getWiki", "thenReturn", "when", "getDocumentReference", "thenReturn", "when", "getSyntax", "mock", "thenReturn", "when", "getXDOM", "emptyList", "emptyList", "thenReturn", "when", "getBlocks", "any", "eq", "asList", "thenReturn", "when", "resolve", "thenReturn", "when", "resolve", "thenReturn", "when", "serialize", "getLastSpaceReference", "thenReturn", "when", "resolve", "thenReturn", "when", "resolve", "thenReturn", "when", "serialize", "getLastSpaceReference", "renameLinks", "assertEquals", "getReference", "getReference", "assertEquals", "getType", "getReference", "assertEquals", "getReference", "getReference", "assertEquals", "getType", "getReference", "verifyDocumentSave"]}, "focal_class": {"identifier": "DefaultLinkRefactoring", "superclass": "", "interfaces": "implements LinkRefactoring", "fields": [{"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private Provider<XWikiContext> xcontextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "xcontextProvider", "var_name": "xcontextProvider"}, {"original_string": "@Inject\n    private JobProgressManager progressManager;", "modifier": "@Inject\n    private", "type": "JobProgressManager", "declarator": "progressManager", "var_name": "progressManager"}, {"original_string": "@Inject\n    @Named(\"context\")\n    private Provider<ComponentManager> contextComponentManagerProvider;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "Provider<ComponentManager>", "declarator": "contextComponentManagerProvider", "var_name": "contextComponentManagerProvider"}, {"original_string": "@Inject\n    private ContentParser contentParser;", "modifier": "@Inject\n    private", "type": "ContentParser", "declarator": "contentParser", "var_name": "contentParser"}, {"original_string": "@Inject\n    private ReferenceRenamer renamer;", "modifier": "@Inject\n    private", "type": "ReferenceRenamer", "declarator": "renamer", "var_name": "renamer"}], "methods": [{"identifier": "renameLinks", "parameters": "(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "modifiers": "@Override public", "return": "void", "signature": "void renameLinks(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "full_signature": "@Override public void renameLinks(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "class_method_signature": "DefaultLinkRefactoring.renameLinks(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "testcase": false, "constructor": false}, {"identifier": "renameLinks", "parameters": "(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        XWikiContext xcontext, boolean relative)", "modifiers": "private", "return": "void", "signature": "void renameLinks(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        XWikiContext xcontext, boolean relative)", "full_signature": "private void renameLinks(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        XWikiContext xcontext, boolean relative)", "class_method_signature": "DefaultLinkRefactoring.renameLinks(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        XWikiContext xcontext, boolean relative)", "testcase": false, "constructor": false}, {"identifier": "renameLinks", "parameters": "(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        boolean relative)", "modifiers": "private", "return": "boolean", "signature": "boolean renameLinks(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        boolean relative)", "full_signature": "private boolean renameLinks(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        boolean relative)", "class_method_signature": "DefaultLinkRefactoring.renameLinks(XWikiDocument document, DocumentReference oldTarget, DocumentReference newTarget,\n        boolean relative)", "testcase": false, "constructor": false}, {"identifier": "renameLinks", "parameters": "(XDOM xdom, DocumentReference currentDocumentReference, DocumentReference oldTarget,\n        DocumentReference newTarget, boolean relative)", "modifiers": "private", "return": "boolean", "signature": "boolean renameLinks(XDOM xdom, DocumentReference currentDocumentReference, DocumentReference oldTarget,\n        DocumentReference newTarget, boolean relative)", "full_signature": "private boolean renameLinks(XDOM xdom, DocumentReference currentDocumentReference, DocumentReference oldTarget,\n        DocumentReference newTarget, boolean relative)", "class_method_signature": "DefaultLinkRefactoring.renameLinks(XDOM xdom, DocumentReference currentDocumentReference, DocumentReference oldTarget,\n        DocumentReference newTarget, boolean relative)", "testcase": false, "constructor": false}, {"identifier": "renameLinks", "parameters": "(BaseObject xobject, XWikiDocument document, DocumentReference oldTarget,\n        DocumentReference newTarget, BlockRenderer renderer, XWikiContext xcontext, boolean relative)", "modifiers": "private", "return": "boolean", "signature": "boolean renameLinks(BaseObject xobject, XWikiDocument document, DocumentReference oldTarget,\n        DocumentReference newTarget, BlockRenderer renderer, XWikiContext xcontext, boolean relative)", "full_signature": "private boolean renameLinks(BaseObject xobject, XWikiDocument document, DocumentReference oldTarget,\n        DocumentReference newTarget, BlockRenderer renderer, XWikiContext xcontext, boolean relative)", "class_method_signature": "DefaultLinkRefactoring.renameLinks(BaseObject xobject, XWikiDocument document, DocumentReference oldTarget,\n        DocumentReference newTarget, BlockRenderer renderer, XWikiContext xcontext, boolean relative)", "testcase": false, "constructor": false}, {"identifier": "renderXDOM", "parameters": "(XDOM content, BlockRenderer renderer)", "modifiers": "private", "return": "String", "signature": "String renderXDOM(XDOM content, BlockRenderer renderer)", "full_signature": "private String renderXDOM(XDOM content, BlockRenderer renderer)", "class_method_signature": "DefaultLinkRefactoring.renderXDOM(XDOM content, BlockRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "updateRelativeLinks", "parameters": "(DocumentReference oldReference, DocumentReference newReference)", "modifiers": "@Override public", "return": "void", "signature": "void updateRelativeLinks(DocumentReference oldReference, DocumentReference newReference)", "full_signature": "@Override public void updateRelativeLinks(DocumentReference oldReference, DocumentReference newReference)", "class_method_signature": "DefaultLinkRefactoring.updateRelativeLinks(DocumentReference oldReference, DocumentReference newReference)", "testcase": false, "constructor": false}, {"identifier": "saveDocumentPreservingContentAuthor", "parameters": "(XWikiDocument document, String comment, boolean minorEdit)", "modifiers": "private", "return": "void", "signature": "void saveDocumentPreservingContentAuthor(XWikiDocument document, String comment, boolean minorEdit)", "full_signature": "private void saveDocumentPreservingContentAuthor(XWikiDocument document, String comment, boolean minorEdit)", "class_method_signature": "DefaultLinkRefactoring.saveDocumentPreservingContentAuthor(XWikiDocument document, String comment, boolean minorEdit)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-refactoring/xwiki-platform-refactoring-default/src/main/java/org/xwiki/refactoring/internal/DefaultLinkRefactoring.java"}, "focal_method": {"identifier": "renameLinks", "parameters": "(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void renameLinks(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)\n    {\n        boolean popLevelProgress = false;\n        XWikiContext xcontext = this.xcontextProvider.get();\n        String previousWikiId = xcontext.getWikiId();\n        try {\n            xcontext.setWikiId(documentReference.getWikiReference().getName());\n            XWikiDocument document = xcontext.getWiki().getDocument(documentReference, xcontext);\n            List<Locale> locales = document.getTranslationLocales(xcontext);\n\n            this.progressManager.pushLevelProgress(1 + locales.size(), this);\n            popLevelProgress = true;\n\n            // Update the default locale instance.\n            this.progressManager.startStep(this);\n            renameLinks(document, oldLinkTarget, newLinkTarget, xcontext, false);\n            this.progressManager.endStep(this);\n\n            // Update the translations.\n            for (Locale locale : locales) {\n                this.progressManager.startStep(this);\n                renameLinks(document.getTranslatedDocument(locale, xcontext), oldLinkTarget, newLinkTarget, xcontext,\n                    false);\n                this.progressManager.endStep(this);\n            }\n        } catch (XWikiException e) {\n            this.logger.error(\"Failed to rename the links that target [{}] from [{}].\", oldLinkTarget,\n                documentReference, e);\n        } finally {\n            if (popLevelProgress) {\n                this.progressManager.popLevelProgress(this);\n            }\n            xcontext.setWikiId(previousWikiId);\n        }\n    }", "signature": "void renameLinks(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "full_signature": "@Override public void renameLinks(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "class_method_signature": "DefaultLinkRefactoring.renameLinks(DocumentReference documentReference, DocumentReference oldLinkTarget,\n        DocumentReference newLinkTarget)", "testcase": false, "constructor": false, "invocations": ["get", "getWikiId", "setWikiId", "getName", "getWikiReference", "getDocument", "getWiki", "getTranslationLocales", "pushLevelProgress", "size", "startStep", "renameLinks", "endStep", "startStep", "renameLinks", "getTranslatedDocument", "endStep", "error", "popLevelProgress", "setWikiId"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}