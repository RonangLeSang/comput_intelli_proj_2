{"test_class": {"identifier": "DefaultLegacyEventConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMockComponents\n    private DefaultLegacyEventConverter legacyEventConverter;", "modifier": "@InjectMockComponents\n    private", "type": "DefaultLegacyEventConverter", "declarator": "legacyEventConverter", "var_name": "legacyEventConverter"}, {"original_string": "@MockComponent\n    @Named(\"compactwiki\")\n    private EntityReferenceSerializer<String> compactSerializer;", "modifier": "@MockComponent\n    @Named(\"compactwiki\")\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "compactSerializer", "var_name": "compactSerializer"}, {"original_string": "@MockComponent\n    private EntityReferenceSerializer<String> serializer;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "@MockComponent\n    private EventFactory eventFactory;", "modifier": "@MockComponent\n    private", "type": "EventFactory", "declarator": "eventFactory", "var_name": "eventFactory"}, {"original_string": "@MockComponent\n    private EntityReferenceResolver<String> resolver;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceResolver<String>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@MockComponent\n    @Named(\"explicit\")\n    private EntityReferenceResolver<String> explicitResolver;", "modifier": "@MockComponent\n    @Named(\"explicit\")\n    private", "type": "EntityReferenceResolver<String>", "declarator": "explicitResolver", "var_name": "explicitResolver"}], "file": "xwiki-platform-core/xwiki-platform-eventstream/xwiki-platform-eventstream-stores/xwiki-platform-eventstream-store-hibernate/src/test/java/org/xwiki/eventstream/store/internal/DefaultLegacyEventConverterTest.java"}, "test_case": {"identifier": "convertEventToLegacyActivityNoDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertEventToLegacyActivityNoDocument()\n    {\n        DocumentReference useReference = new DocumentReference(\"mywiki\", \"XWiki\", \"Foo\");\n        Set<String> target = Collections.singleton(\"mywiki:XWiki.Bar\");\n        WikiReference wikiReference = new WikiReference(\"mywiki\");\n        Event event = mock(Event.class);\n        when(event.getImportance()).thenReturn(Event.Importance.MINOR);\n        when(event.getApplication()).thenReturn(\"app\");\n        when(event.getBody()).thenReturn(\"body\");\n        when(event.getDate()).thenReturn(new Date(10));\n        when(event.getId()).thenReturn(\"eventId\");\n        when(event.getWiki()).thenReturn(wikiReference);\n        when(event.getGroupId()).thenReturn(\"groupId\");\n        when(event.getStream()).thenReturn(\"stream\");\n        when(event.getTitle()).thenReturn(\"title\");\n        when(event.getType()).thenReturn(\"type\");\n        when(event.getUser()).thenReturn(useReference);\n        when(event.getTarget()).thenReturn(target);\n        when(event.getHidden()).thenReturn(false);\n\n        when(serializer.serialize(useReference)).thenReturn(\"mywiki:XWiki.Foo\");\n        when(serializer.serialize(wikiReference)).thenReturn(\"mywiki\");\n\n        // Test\n        LegacyEvent result = legacyEventConverter.convertEventToLegacyActivity(event);\n\n        // Verify\n        assertNotNull(result);\n        assertEquals(20, result.getPriority());\n        assertEquals(\"app\", result.getApplication());\n        assertEquals(\"body\", result.getBody());\n        assertEquals(new Date(10), result.getDate());\n        assertEquals(\"eventId\", result.getEventId());\n        assertNull(result.getPage());\n        assertEquals(\"\", result.getParam1());\n        assertEquals(\"\", result.getParam2());\n        assertEquals(\"groupId\", result.getRequestId());\n        assertNull(result.getSpace());\n        assertEquals(\"stream\", result.getStream());\n        assertEquals(\"title\", result.getTitle());\n        assertEquals(\"type\", result.getType());\n        assertNull(result.getUrl());\n        assertEquals(\"mywiki:XWiki.Foo\", result.getUser());\n        assertEquals(\"\", result.getVersion());\n        assertEquals(\"mywiki\", result.getWiki());\n        assertEquals(target, result.getTarget());\n        assertFalse(result.isHidden());\n\n        verify(serializer, times(2)).serialize(any());\n        verify(compactSerializer, never()).serialize(any());\n    }", "signature": "void convertEventToLegacyActivityNoDocument()", "full_signature": "@Test public void convertEventToLegacyActivityNoDocument()", "class_method_signature": "DefaultLegacyEventConverterTest.convertEventToLegacyActivityNoDocument()", "testcase": true, "constructor": false, "invocations": ["singleton", "mock", "thenReturn", "when", "getImportance", "thenReturn", "when", "getApplication", "thenReturn", "when", "getBody", "thenReturn", "when", "getDate", "thenReturn", "when", "getId", "thenReturn", "when", "getWiki", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getStream", "thenReturn", "when", "getTitle", "thenReturn", "when", "getType", "thenReturn", "when", "getUser", "thenReturn", "when", "getTarget", "thenReturn", "when", "getHidden", "thenReturn", "when", "serialize", "thenReturn", "when", "serialize", "convertEventToLegacyActivity", "assertNotNull", "assertEquals", "getPriority", "assertEquals", "getApplication", "assertEquals", "getBody", "assertEquals", "getDate", "assertEquals", "getEventId", "assertNull", "getPage", "assertEquals", "getParam1", "assertEquals", "getParam2", "assertEquals", "getRequestId", "assertNull", "getSpace", "assertEquals", "getStream", "assertEquals", "getTitle", "assertEquals", "getType", "assertNull", "getUrl", "assertEquals", "getUser", "assertEquals", "getVersion", "assertEquals", "getWiki", "assertEquals", "getTarget", "assertFalse", "isHidden", "serialize", "verify", "times", "any", "serialize", "verify", "never", "any"]}, "focal_class": {"identifier": "DefaultLegacyEventConverter", "superclass": "extends AbstractLegacyEventConverter", "interfaces": "", "fields": [{"original_string": "@Inject\n    @Named(\"context\")\n    private ComponentManager componentManager;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "getConverterForType", "parameters": "(String type)", "modifiers": "private", "return": "LegacyEventConverter", "signature": "LegacyEventConverter getConverterForType(String type)", "full_signature": "private LegacyEventConverter getConverterForType(String type)", "class_method_signature": "DefaultLegacyEventConverter.getConverterForType(String type)", "testcase": false, "constructor": false}, {"identifier": "convertEventToLegacyActivity", "parameters": "(Event e)", "modifiers": "@Override public", "return": "LegacyEvent", "signature": "LegacyEvent convertEventToLegacyActivity(Event e)", "full_signature": "@Override public LegacyEvent convertEventToLegacyActivity(Event e)", "class_method_signature": "DefaultLegacyEventConverter.convertEventToLegacyActivity(Event e)", "testcase": false, "constructor": false}, {"identifier": "convertLegacyActivityToEvent", "parameters": "(LegacyEvent e)", "modifiers": "@Override public", "return": "Event", "signature": "Event convertLegacyActivityToEvent(LegacyEvent e)", "full_signature": "@Override public Event convertLegacyActivityToEvent(LegacyEvent e)", "class_method_signature": "DefaultLegacyEventConverter.convertLegacyActivityToEvent(LegacyEvent e)", "testcase": false, "constructor": false}, {"identifier": "convertEventStatusToLegacyActivityStatus", "parameters": "(EventStatus eventStatus)", "modifiers": "@Override public", "return": "LegacyEventStatus", "signature": "LegacyEventStatus convertEventStatusToLegacyActivityStatus(EventStatus eventStatus)", "full_signature": "@Override public LegacyEventStatus convertEventStatusToLegacyActivityStatus(EventStatus eventStatus)", "class_method_signature": "DefaultLegacyEventConverter.convertEventStatusToLegacyActivityStatus(EventStatus eventStatus)", "testcase": false, "constructor": false}, {"identifier": "convertLegacyActivityStatusToEventStatus", "parameters": "(LegacyEventStatus eventStatus)", "modifiers": "@Override public", "return": "EventStatus", "signature": "EventStatus convertLegacyActivityStatusToEventStatus(LegacyEventStatus eventStatus)", "full_signature": "@Override public EventStatus convertLegacyActivityStatusToEventStatus(LegacyEventStatus eventStatus)", "class_method_signature": "DefaultLegacyEventConverter.convertLegacyActivityStatusToEventStatus(LegacyEventStatus eventStatus)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-eventstream/xwiki-platform-eventstream-stores/xwiki-platform-eventstream-store-hibernate/src/main/java/org/xwiki/eventstream/store/internal/DefaultLegacyEventConverter.java"}, "focal_method": {"identifier": "convertEventToLegacyActivity", "parameters": "(Event e)", "modifiers": "@Override public", "return": "LegacyEvent", "body": "@Override\n    public LegacyEvent convertEventToLegacyActivity(Event e)\n    {\n        LegacyEventConverter converter = this.getConverterForType(e.getType());\n        LegacyEvent result;\n        if (converter == null) {\n            result = super.convertEventToLegacyActivity(e);\n        } else {\n            result = converter.convertEventToLegacyActivity(e);\n        }\n        return result;\n    }", "signature": "LegacyEvent convertEventToLegacyActivity(Event e)", "full_signature": "@Override public LegacyEvent convertEventToLegacyActivity(Event e)", "class_method_signature": "DefaultLegacyEventConverter.convertEventToLegacyActivity(Event e)", "testcase": false, "constructor": false, "invocations": ["getConverterForType", "getType", "convertEventToLegacyActivity", "convertEventToLegacyActivity"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}