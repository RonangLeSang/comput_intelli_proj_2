{"test_class": {"identifier": "ScopeNotificationFilterPreferencesGetterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMockComponents\n    private ScopeNotificationFilterPreferencesGetter getter;", "modifier": "@InjectMockComponents\n    private", "type": "ScopeNotificationFilterPreferencesGetter", "declarator": "getter", "var_name": "getter"}, {"original_string": "@MockComponent\n    private EntityReferenceResolver<String> entityReferenceResolver;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceResolver<String>", "declarator": "entityReferenceResolver", "var_name": "entityReferenceResolver"}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-filters/xwiki-platform-notifications-filters-api/src/test/java/org/xwiki/notifications/filters/internal/scope/ScopeNotificationFilterPreferencesGetterTest.java"}, "test_case": {"identifier": "getScopeFilterPreferencesCriteriaEventTypeNullOnlyGivenType", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getScopeFilterPreferencesCriteriaEventTypeNullOnlyGivenType()\n    {\n        NotificationFormat requestedFormat = null;\n        String requestedEventType = null;\n        boolean onlyGivenType = true;\n\n        NotificationFilterPreference pref1 = mock(NotificationFilterPreference.class);\n        NotificationFilterPreference pref2 = mock(NotificationFilterPreference.class);\n        NotificationFilterPreference pref3 = mock(NotificationFilterPreference.class);\n        NotificationFilterPreference pref4 = mock(NotificationFilterPreference.class);\n        NotificationFilterPreference pref5 = mock(NotificationFilterPreference.class);\n        NotificationFilterPreference pref6 = mock(NotificationFilterPreference.class);\n\n        // pref1 is not enabled, it will be discarded right away. Others are enabled.\n        when(pref1.isEnabled()).thenReturn(false);\n        when(pref2.isEnabled()).thenReturn(true);\n        when(pref3.isEnabled()).thenReturn(true);\n        when(pref4.isEnabled()).thenReturn(true);\n        when(pref5.isEnabled()).thenReturn(true);\n        when(pref6.isEnabled()).thenReturn(true);\n\n        // pref2 has not the right filter name, it is discarded. Others have the right name.\n        when(pref2.getFilterName()).thenReturn(\"Something\");\n        when(pref3.getFilterName()).thenReturn(ScopeNotificationFilter.FILTER_NAME);\n        when(pref4.getFilterName()).thenReturn(ScopeNotificationFilter.FILTER_NAME);\n        when(pref5.getFilterName()).thenReturn(ScopeNotificationFilter.FILTER_NAME);\n        when(pref6.getFilterName()).thenReturn(ScopeNotificationFilter.FILTER_NAME);\n\n        // All formats will be accepted\n        when(pref3.getNotificationFormats()).thenReturn(Collections.singleton(NotificationFormat.EMAIL));\n        when(pref4.getNotificationFormats())\n            .thenReturn(new HashSet<>(Arrays.asList(NotificationFormat.ALERT, NotificationFormat.EMAIL)));\n        when(pref5.getNotificationFormats()).thenReturn(Collections.singleton(NotificationFormat.ALERT));\n        when(pref6.getNotificationFormats()).thenReturn(null);\n\n        // eventType is null and onlyGivenType is true so only pref5 matches.\n        when(pref3.getEventTypes()).thenReturn(Collections.singleton(\"mentions\"));\n        when(pref4.getEventTypes()).thenReturn(Collections.singleton(\"otherEventType\"));\n        when(pref5.getEventTypes()).thenReturn(Collections.emptySet());\n        when(pref6.getEventTypes()).thenReturn(new HashSet<>(Arrays.asList(\"like\", \"mentions\", \"comment\")));\n\n        ScopeNotificationFilterPreferencesHierarchy expected = new ScopeNotificationFilterPreferencesHierarchy(\n            Collections.singletonList(\n                new ScopeNotificationFilterPreference(pref5, this.entityReferenceResolver)\n            ));\n        assertEquals(expected, this.getter.getScopeFilterPreferences(Arrays.asList(\n            pref1, pref2, pref3, pref4, pref5, pref6\n        ), requestedEventType, requestedFormat, onlyGivenType));\n    }", "signature": "void getScopeFilterPreferencesCriteriaEventTypeNullOnlyGivenType()", "full_signature": "@Test void getScopeFilterPreferencesCriteriaEventTypeNullOnlyGivenType()", "class_method_signature": "ScopeNotificationFilterPreferencesGetterTest.getScopeFilterPreferencesCriteriaEventTypeNullOnlyGivenType()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "isEnabled", "thenReturn", "when", "isEnabled", "thenReturn", "when", "isEnabled", "thenReturn", "when", "isEnabled", "thenReturn", "when", "isEnabled", "thenReturn", "when", "isEnabled", "thenReturn", "when", "getFilterName", "thenReturn", "when", "getFilterName", "thenReturn", "when", "getFilterName", "thenReturn", "when", "getFilterName", "thenReturn", "when", "getFilterName", "thenReturn", "when", "getNotificationFormats", "singleton", "thenReturn", "when", "getNotificationFormats", "asList", "thenReturn", "when", "getNotificationFormats", "singleton", "thenReturn", "when", "getNotificationFormats", "thenReturn", "when", "getEventTypes", "singleton", "thenReturn", "when", "getEventTypes", "singleton", "thenReturn", "when", "getEventTypes", "emptySet", "thenReturn", "when", "getEventTypes", "asList", "singletonList", "assertEquals", "getScopeFilterPreferences", "asList"]}, "focal_class": {"identifier": "ScopeNotificationFilterPreferencesGetter", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private EntityReferenceResolver<String> entityReferenceResolver;", "modifier": "@Inject\n    private", "type": "EntityReferenceResolver<String>", "declarator": "entityReferenceResolver", "var_name": "entityReferenceResolver"}], "methods": [{"identifier": "getScopeFilterPreferences", "parameters": "(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "modifiers": "public", "return": "ScopeNotificationFilterPreferencesHierarchy", "signature": "ScopeNotificationFilterPreferencesHierarchy getScopeFilterPreferences(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "full_signature": "public ScopeNotificationFilterPreferencesHierarchy getScopeFilterPreferences(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "class_method_signature": "ScopeNotificationFilterPreferencesGetter.getScopeFilterPreferences(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "testcase": false, "constructor": false}, {"identifier": "matchAllCriteria", "parameters": "(NotificationFilterPreference pref, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "modifiers": "private", "return": "boolean", "signature": "boolean matchAllCriteria(NotificationFilterPreference pref, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "full_signature": "private boolean matchAllCriteria(NotificationFilterPreference pref, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "class_method_signature": "ScopeNotificationFilterPreferencesGetter.matchAllCriteria(NotificationFilterPreference pref, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "testcase": false, "constructor": false}, {"identifier": "matchFilter", "parameters": "(NotificationFilterPreference pref)", "modifiers": "private", "return": "boolean", "signature": "boolean matchFilter(NotificationFilterPreference pref)", "full_signature": "private boolean matchFilter(NotificationFilterPreference pref)", "class_method_signature": "ScopeNotificationFilterPreferencesGetter.matchFilter(NotificationFilterPreference pref)", "testcase": false, "constructor": false}, {"identifier": "matchFormat", "parameters": "(NotificationFilterPreference filterPreference, NotificationFormat format)", "modifiers": "private", "return": "boolean", "signature": "boolean matchFormat(NotificationFilterPreference filterPreference, NotificationFormat format)", "full_signature": "private boolean matchFormat(NotificationFilterPreference filterPreference, NotificationFormat format)", "class_method_signature": "ScopeNotificationFilterPreferencesGetter.matchFormat(NotificationFilterPreference filterPreference, NotificationFormat format)", "testcase": false, "constructor": false}, {"identifier": "matchAllEvents", "parameters": "(NotificationFilterPreference filterPreference)", "modifiers": "private", "return": "boolean", "signature": "boolean matchAllEvents(NotificationFilterPreference filterPreference)", "full_signature": "private boolean matchAllEvents(NotificationFilterPreference filterPreference)", "class_method_signature": "ScopeNotificationFilterPreferencesGetter.matchAllEvents(NotificationFilterPreference filterPreference)", "testcase": false, "constructor": false}, {"identifier": "matchEventType", "parameters": "(NotificationFilterPreference filterPreference, String eventType)", "modifiers": "private", "return": "boolean", "signature": "boolean matchEventType(NotificationFilterPreference filterPreference, String eventType)", "full_signature": "private boolean matchEventType(NotificationFilterPreference filterPreference, String eventType)", "class_method_signature": "ScopeNotificationFilterPreferencesGetter.matchEventType(NotificationFilterPreference filterPreference, String eventType)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-filters/xwiki-platform-notifications-filters-api/src/main/java/org/xwiki/notifications/filters/internal/scope/ScopeNotificationFilterPreferencesGetter.java"}, "focal_method": {"identifier": "getScopeFilterPreferences", "parameters": "(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "modifiers": "public", "return": "ScopeNotificationFilterPreferencesHierarchy", "body": "public ScopeNotificationFilterPreferencesHierarchy getScopeFilterPreferences(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)\n    {\n        List<ScopeNotificationFilterPreference> results = new ArrayList<>();\n\n        // Filter them according to the event type and the filter name\n        Stream<NotificationFilterPreference> filterPreferenceStream = filterPreferences.stream().filter(\n            pref -> matchAllCriteria(pref, eventType, format, onlyGivenType)\n        );\n\n        Iterator<NotificationFilterPreference> iterator = filterPreferenceStream.iterator();\n        while (iterator.hasNext()) {\n            results.add(new ScopeNotificationFilterPreference(iterator.next(), entityReferenceResolver));\n        }\n\n        return new ScopeNotificationFilterPreferencesHierarchy(results);\n    }", "signature": "ScopeNotificationFilterPreferencesHierarchy getScopeFilterPreferences(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "full_signature": "public ScopeNotificationFilterPreferencesHierarchy getScopeFilterPreferences(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "class_method_signature": "ScopeNotificationFilterPreferencesGetter.getScopeFilterPreferences(\n        Collection<NotificationFilterPreference> filterPreferences, String eventType, NotificationFormat format,\n        boolean onlyGivenType)", "testcase": false, "constructor": false, "invocations": ["filter", "stream", "matchAllCriteria", "iterator", "hasNext", "add", "next"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}