{"test_class": {"identifier": "DocumentsDeletingListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<DocumentsDeletingListener> mocker =\n            new MockitoComponentMockingRule(DocumentsDeletingListener.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<DocumentsDeletingListener>", "declarator": "mocker =\n            new MockitoComponentMockingRule(DocumentsDeletingListener.class)", "var_name": "mocker"}, {"original_string": "protected XarInstalledExtensionRepository repository;", "modifier": "protected", "type": "XarInstalledExtensionRepository", "declarator": "repository", "var_name": "repository"}], "file": "xwiki-platform-core/xwiki-platform-extension/xwiki-platform-extension-handlers/xwiki-platform-extension-handler-xar/src/test/java/org/xwiki/extension/xar/internal/delete/DocumentsDeletingListenerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws Exception\n    {\n        Request request = mock(Request.class);\n        Job job = mock(Job.class);\n        JobStatus status = mock(JobStatus.class);\n        when(job.getRequest()).thenReturn(request);\n        when(request.isInteractive()).thenReturn(true);\n        when(job.getStatus()).thenReturn(status);\n\n        Map<EntityReference, EntitySelection> concernedEntities = new HashMap<>();\n\n        DocumentReference doc1 = new DocumentReference(\"a\", \"b\", \"c1\");\n        DocumentReference doc2 = new DocumentReference(\"a\", \"b\", \"c2\");\n        DocumentReference doc3 = new DocumentReference(\"a\", \"b\", \"c3\");\n        DocumentReference doc4 = new DocumentReference(\"a\", \"b\", \"c4\");\n\n        concernedEntities.put(doc1, new EntitySelection(doc1));\n        concernedEntities.put(doc2, new EntitySelection(doc2));\n        concernedEntities.put(doc3, new EntitySelection(doc3));\n        concernedEntities.put(doc4, new EntitySelection(doc4));\n\n        XarInstalledExtension ext1 = mock(XarInstalledExtension.class);\n        XarInstalledExtension ext2 = mock(XarInstalledExtension.class);\n        when(ext1.getId()).thenReturn(new ExtensionId(\"ext1\"));\n        when(ext2.getId()).thenReturn(new ExtensionId(\"ext2\"));\n        when(repository.getXarInstalledExtensions(doc1)).thenReturn(Arrays.asList(ext1, ext2));\n        when(repository.isAllowed(doc1, Right.DELETE)).thenReturn(false);\n        when(repository.getXarInstalledExtensions(doc2)).thenReturn(Collections.emptyList());\n        when(repository.isAllowed(doc2, Right.DELETE)).thenReturn(true);\n        when(repository.getXarInstalledExtensions(doc3)).thenReturn(Arrays.asList(ext2));\n        when(repository.isAllowed(doc3, Right.DELETE)).thenReturn(false);\n        when(repository.getXarInstalledExtensions(doc4)).thenReturn(Arrays.asList(ext1));\n        when(repository.isAllowed(doc4, Right.DELETE)).thenReturn(true);\n\n        doAnswer(invocationOnMock -> {\n            ExtensionBreakingQuestion question = invocationOnMock.getArgument(0);\n            assertEquals(concernedEntities, question.getConcernedEntities());\n            // Ext 1\n            assertEquals(1, question.getExtension(\"ext1\").getPages().size());\n            assertTrue(question.getExtension(\"ext1\").getPages().contains(\n                    concernedEntities.get(doc1)\n            ));\n\n            // Ext 2\n            assertEquals(2, question.getExtension(\"ext2\").getPages().size());\n            assertTrue(question.getExtension(\"ext2\").getPages().contains(\n                    concernedEntities.get(doc1)\n            ));\n            assertTrue(question.getExtension(\"ext2\").getPages().contains(\n                    concernedEntities.get(doc3)\n            ));\n\n            // Free pages\n            assertEquals(2, question.getFreePages().size());\n            assertTrue(question.getFreePages().contains(concernedEntities.get(doc2)));\n            assertTrue(question.getFreePages().contains(concernedEntities.get(doc4)));\n\n            // Assert nothing is select by default\n            for (EntitySelection selection : question.getConcernedEntities().values()) {\n                assertFalse(selection.isSelected());\n            }\n            return null;\n        }).when(status).ask(any(), anyLong(), any());\n\n        // Test\n        DocumentsDeletingEvent event = new DocumentsDeletingEvent();\n        mocker.getComponentUnderTest().onEvent(event, job, concernedEntities);\n\n        // Check\n        verify(status, times(1)).ask(any(), eq(5L), eq(TimeUnit.MINUTES));\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "DocumentsDeletingListenerTest.test()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getRequest", "thenReturn", "when", "isInteractive", "thenReturn", "when", "getStatus", "put", "put", "put", "put", "mock", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getId", "thenReturn", "when", "getXarInstalledExtensions", "asList", "thenReturn", "when", "isAllowed", "thenReturn", "when", "getXarInstalledExtensions", "emptyList", "thenReturn", "when", "isAllowed", "thenReturn", "when", "getXarInstalledExtensions", "asList", "thenReturn", "when", "isAllowed", "thenReturn", "when", "getXarInstalledExtensions", "asList", "thenReturn", "when", "isAllowed", "ask", "when", "doAnswer", "getArgument", "assertEquals", "getConcernedEntities", "assertEquals", "size", "getPages", "getExtension", "assertTrue", "contains", "getPages", "getExtension", "get", "assertEquals", "size", "getPages", "getExtension", "assertTrue", "contains", "getPages", "getExtension", "get", "assertTrue", "contains", "getPages", "getExtension", "get", "assertEquals", "size", "getFreePages", "assertTrue", "contains", "getFreePages", "get", "assertTrue", "contains", "getFreePages", "get", "values", "getConcernedEntities", "assertFalse", "isSelected", "any", "anyLong", "any", "onEvent", "getComponentUnderTest", "ask", "verify", "times", "any", "eq", "eq"]}, "focal_class": {"identifier": "DocumentsDeletingListener", "superclass": "extends AbstractEventListener", "interfaces": "", "fields": [{"original_string": "private static final List<Event> EVENTS = Arrays.asList(new DocumentsDeletingEvent());", "modifier": "private static final", "type": "List<Event>", "declarator": "EVENTS = Arrays.asList(new DocumentsDeletingEvent())", "var_name": "EVENTS"}, {"original_string": "@Inject\n    @Named(\"xar\")\n    private InstalledExtensionRepository installedExtensionRepository;", "modifier": "@Inject\n    @Named(\"xar\")\n    private", "type": "InstalledExtensionRepository", "declarator": "installedExtensionRepository", "var_name": "installedExtensionRepository"}, {"original_string": "@Inject\n    private XarExtensionConfiguration configuration;", "modifier": "@Inject\n    private", "type": "XarExtensionConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "DocumentsDeletingListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " DocumentsDeletingListener()", "full_signature": "public  DocumentsDeletingListener()", "class_method_signature": "DocumentsDeletingListener.DocumentsDeletingListener()", "testcase": false, "constructor": true}, {"identifier": "shouldListenerBeTriggered", "parameters": "(Job job, CancelableEvent event)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldListenerBeTriggered(Job job, CancelableEvent event)", "full_signature": "private boolean shouldListenerBeTriggered(Job job, CancelableEvent event)", "class_method_signature": "DocumentsDeletingListener.shouldListenerBeTriggered(Job job, CancelableEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "DocumentsDeletingListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false}, {"identifier": "checkIfDeleteIsAllowed", "parameters": "(EntitySelection entitySelection, ExtensionBreakingQuestion question)", "modifiers": "private", "return": "void", "signature": "void checkIfDeleteIsAllowed(EntitySelection entitySelection, ExtensionBreakingQuestion question)", "full_signature": "private void checkIfDeleteIsAllowed(EntitySelection entitySelection, ExtensionBreakingQuestion question)", "class_method_signature": "DocumentsDeletingListener.checkIfDeleteIsAllowed(EntitySelection entitySelection, ExtensionBreakingQuestion question)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-extension/xwiki-platform-extension-handlers/xwiki-platform-extension-handler-xar/src/main/java/org/xwiki/extension/xar/internal/delete/DocumentsDeletingListener.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        Job job = (Job) source;\n        CancelableEvent cancelableEvent = (CancelableEvent) event;\n\n        if (!this.shouldListenerBeTriggered(job, cancelableEvent)) {\n            return;\n        }\n\n        // Check if some pages belong to extensions\n        Map<EntityReference, EntitySelection> concernedEntities = (Map<EntityReference, EntitySelection>) data;\n        ExtensionBreakingQuestion question = new ExtensionBreakingQuestion(concernedEntities);\n        for (EntitySelection entitySelection : concernedEntities.values()) {\n            if (entitySelection.getEntityReference() instanceof DocumentReference) {\n                checkIfDeleteIsAllowed(entitySelection, question);\n            }\n        }\n\n        JobStatus jobStatus = job.getStatus();\n        // Ask a confirmation to the user if some pages belong to extensions\n        if (!question.getExtensions().isEmpty()) {\n            // Conservative choice: we let the user enable the pages to delete.\n            question.unselectAll();\n            try {\n                // The user can modify the question so it could disable some EntitySelection.\n                // We add a timeout because when a refactoring job is running, it prevents others to run.\n                // 5 minutes is probably enough for the user to decide if the process should go on.\n                boolean ack = jobStatus.ask(question, 5, TimeUnit.MINUTES);\n                if (!ack) {\n                    // Without any confirmation, we must cancel the operation.\n                    String message = \"The question has been asked, however no answer has been received.\";\n                    this.logger.warn(message);\n                    cancelableEvent.cancel(message);\n                }\n            } catch (InterruptedException e) {\n                this.logger.warn(\"Confirm question has been interrupted.\");\n                cancelableEvent.cancel(\"Question has been interrupted.\");\n            }\n            // we always want the event and the CancelableJobStatus to be consistent\n            if (jobStatus instanceof CancelableJobStatus) {\n                CancelableJobStatus cancelableJobStatus = (CancelableJobStatus) jobStatus;\n                if (cancelableJobStatus.isCanceled()) {\n                    cancelableEvent.cancel();\n                }\n                if (cancelableEvent.isCanceled()) {\n                    cancelableJobStatus.cancel();\n                }\n            }\n        }\n    }", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "DocumentsDeletingListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false, "invocations": ["shouldListenerBeTriggered", "values", "getEntityReference", "checkIfDeleteIsAllowed", "getStatus", "isEmpty", "getExtensions", "unselectAll", "ask", "warn", "cancel", "warn", "cancel", "isCanceled", "cancel", "isCanceled", "cancel"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}