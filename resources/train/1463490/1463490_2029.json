{"test_class": {"identifier": "CreateActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoOldcoreRule oldcore = new MockitoOldcoreRule();", "modifier": "@Rule\n    public", "type": "MockitoOldcoreRule", "declarator": "oldcore = new MockitoOldcoreRule()", "var_name": "oldcore"}, {"original_string": "XWikiURLFactory mockURLFactory;", "modifier": "", "type": "XWikiURLFactory", "declarator": "mockURLFactory", "var_name": "mockURLFactory"}, {"original_string": "CreateAction action;", "modifier": "", "type": "CreateAction", "declarator": "action", "var_name": "action"}, {"original_string": "XWikiContext context;", "modifier": "", "type": "XWikiContext", "declarator": "context", "var_name": "context"}, {"original_string": "XWikiRequest mockRequest;", "modifier": "", "type": "XWikiRequest", "declarator": "mockRequest", "var_name": "mockRequest"}, {"original_string": "XWikiResponse mockResponse;", "modifier": "", "type": "XWikiResponse", "declarator": "mockResponse", "var_name": "mockResponse"}, {"original_string": "Query mockTemplateProvidersQuery;", "modifier": "", "type": "Query", "declarator": "mockTemplateProvidersQuery", "var_name": "mockTemplateProvidersQuery"}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/CreateActionTest.java"}, "test_case": {"identifier": "newDocumentWebHomeTopLevelSpaceButTerminalFromURL", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newDocumentWebHomeTopLevelSpaceButTerminalFromURL() throws Exception\n    {\n        // new document = xwiki:X.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Pass the tocreate=terminal request parameter\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to enter the missing values.\n        assertEquals(\"create\", result);\n\n        // Note: We can not create the \"X\" terminal document, since it is already at the top level of the hierarchy and\n        // none was able to be deducted from the given information. The user needs to specify more info in order to\n        // continue.\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n            any(), any(XWikiContext.class));\n    }", "signature": "void newDocumentWebHomeTopLevelSpaceButTerminalFromURL()", "full_signature": "@Test public void newDocumentWebHomeTopLevelSpaceButTerminalFromURL()", "class_method_signature": "CreateActionTest.newDocumentWebHomeTopLevelSpaceButTerminalFromURL()", "testcase": true, "constructor": false, "invocations": ["asList", "mock", "thenReturn", "when", "getDocumentReference", "thenReturn", "when", "isNew", "thenReturn", "when", "getLocalReferenceMaxLength", "setDoc", "thenReturn", "when", "getParameter", "render", "assertEquals", "createURL", "verify", "never", "any", "any", "any", "any", "any", "any", "any"]}, "focal_class": {"identifier": "CreateAction", "superclass": "extends XWikiAction", "interfaces": "", "fields": [{"original_string": "private static final String CREATE_TEMPLATE = \"create\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_TEMPLATE = \"create\"", "var_name": "CREATE_TEMPLATE"}, {"original_string": "private static final String PARENT = \"parent\";", "modifier": "private static final", "type": "String", "declarator": "PARENT = \"parent\"", "var_name": "PARENT"}, {"original_string": "private static final String SPACE_REFERENCE = \"spaceReference\";", "modifier": "private static final", "type": "String", "declarator": "SPACE_REFERENCE = \"spaceReference\"", "var_name": "SPACE_REFERENCE"}, {"original_string": "private static final String NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}, {"original_string": "private static final String TEMPLATE = \"template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE = \"template\"", "var_name": "TEMPLATE"}, {"original_string": "private static final String IS_SPACE = \"isSpace\";", "modifier": "private static final", "type": "String", "declarator": "IS_SPACE = \"isSpace\"", "var_name": "IS_SPACE"}, {"original_string": "private static final String WEBHOME = \"WebHome\";", "modifier": "private static final", "type": "String", "declarator": "WEBHOME = \"WebHome\"", "var_name": "WEBHOME"}, {"original_string": "private static final String LOCAL_SERIALIZER_HINT = \"local\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_SERIALIZER_HINT = \"local\"", "var_name": "LOCAL_SERIALIZER_HINT"}, {"original_string": "private static final String CURRENT_MIXED_RESOLVER_HINT = \"currentmixed\";", "modifier": "private static final", "type": "String", "declarator": "CURRENT_MIXED_RESOLVER_HINT = \"currentmixed\"", "var_name": "CURRENT_MIXED_RESOLVER_HINT"}], "methods": [{"identifier": "CreateAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " CreateAction()", "full_signature": "public  CreateAction()", "class_method_signature": "CreateAction.CreateAction()", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "String", "signature": "String render(XWikiContext context)", "full_signature": "@Override public String render(XWikiContext context)", "class_method_signature": "CreateAction.render(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "checkRights", "parameters": "(SpaceReference spaceReference, XWikiContext context)", "modifiers": "private", "return": "void", "signature": "void checkRights(SpaceReference spaceReference, XWikiContext context)", "full_signature": "private void checkRights(SpaceReference spaceReference, XWikiContext context)", "class_method_signature": "CreateAction.checkRights(SpaceReference spaceReference, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "doCreate", "parameters": "(XWikiContext context, XWikiDocument newDocument, boolean isSpace, BaseObject templateProvider)", "modifiers": "private", "return": "void", "signature": "void doCreate(XWikiContext context, XWikiDocument newDocument, boolean isSpace, BaseObject templateProvider)", "full_signature": "private void doCreate(XWikiContext context, XWikiDocument newDocument, boolean isSpace, BaseObject templateProvider)", "class_method_signature": "CreateAction.doCreate(XWikiContext context, XWikiDocument newDocument, boolean isSpace, BaseObject templateProvider)", "testcase": false, "constructor": false}, {"identifier": "getCurrentMixedDocumentReferenceResolver", "parameters": "()", "modifiers": "private", "return": "DocumentReferenceResolver<String>", "signature": "DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()", "full_signature": "private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()", "class_method_signature": "CreateAction.getCurrentMixedDocumentReferenceResolver()", "testcase": false, "constructor": false}, {"identifier": "initAndSaveDocument", "parameters": "(XWikiContext context, XWikiDocument newDocument, String title, String template,\n        String parent)", "modifiers": "private", "return": "void", "signature": "void initAndSaveDocument(XWikiContext context, XWikiDocument newDocument, String title, String template,\n        String parent)", "full_signature": "private void initAndSaveDocument(XWikiContext context, XWikiDocument newDocument, String title, String template,\n        String parent)", "class_method_signature": "CreateAction.initAndSaveDocument(XWikiContext context, XWikiDocument newDocument, String title, String template,\n        String parent)", "testcase": false, "constructor": false}, {"identifier": "getRedirectParameters", "parameters": "(String parent, String title, String template, ActionOnCreate actionOnCreate)", "modifiers": "private", "return": "String", "signature": "String getRedirectParameters(String parent, String title, String template, ActionOnCreate actionOnCreate)", "full_signature": "private String getRedirectParameters(String parent, String title, String template, ActionOnCreate actionOnCreate)", "class_method_signature": "CreateAction.getRedirectParameters(String parent, String title, String template, ActionOnCreate actionOnCreate)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "(BaseObject templateProvider, XWikiRequest request)", "modifiers": "private", "return": "String", "signature": "String getTemplate(BaseObject templateProvider, XWikiRequest request)", "full_signature": "private String getTemplate(BaseObject templateProvider, XWikiRequest request)", "class_method_signature": "CreateAction.getTemplate(BaseObject templateProvider, XWikiRequest request)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)", "modifiers": "private", "return": "String", "signature": "String getParent(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)", "full_signature": "private String getParent(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)", "class_method_signature": "CreateAction.getParent(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getTitle", "parameters": "(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)", "modifiers": "private", "return": "String", "signature": "String getTitle(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)", "full_signature": "private String getTitle(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)", "class_method_signature": "CreateAction.getTitle(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)", "testcase": false, "constructor": false}, {"identifier": "getActionOnCreate", "parameters": "(BaseObject templateProvider)", "modifiers": "private", "return": "ActionOnCreate", "signature": "ActionOnCreate getActionOnCreate(BaseObject templateProvider)", "full_signature": "private ActionOnCreate getActionOnCreate(BaseObject templateProvider)", "class_method_signature": "CreateAction.getActionOnCreate(BaseObject templateProvider)", "testcase": false, "constructor": false}, {"identifier": "getEditMode", "parameters": "(String template, XWikiContext context)", "modifiers": "private", "return": "String", "signature": "String getEditMode(String template, XWikiContext context)", "full_signature": "private String getEditMode(String template, XWikiContext context)", "class_method_signature": "CreateAction.getEditMode(String template, XWikiContext context)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/CreateAction.java"}, "focal_method": {"identifier": "render", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        CreateActionRequestHandler handler = new CreateActionRequestHandler(context);\n\n        // Read the request and extract the passed information.\n        handler.processRequest();\n\n        // Save the determined values so we have them available in the action template.\n        ScriptContext scontext = getCurrentScriptContext();\n        scontext.setAttribute(SPACE_REFERENCE, handler.getSpaceReference(), ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(NAME, handler.getName(), ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(IS_SPACE, handler.isSpace(), ScriptContext.ENGINE_SCOPE);\n        // put the available templates on the context, for the .vm to not compute them again\n        scontext.setAttribute(\"availableTemplateProviders\", handler.getAvailableTemplateProviders(),\n            ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(\"recommendedTemplateProviders\", handler.getRecommendedTemplateProviders(),\n            ScriptContext.ENGINE_SCOPE);\n\n        DocumentReference newDocumentReference = handler.getNewDocumentReference();\n        if (newDocumentReference == null) {\n            // There is information still missing, go back to the template and fill it.\n            return CREATE_TEMPLATE;\n        }\n\n        // Check if the creation in the spaceReference is allowed.\n        if (!handler.isTemplateProviderAllowedToCreateInCurrentSpace()) {\n            // The selected template provider is not usable in the selected location. Go back to the template and pick\n            // something else.\n            return CREATE_TEMPLATE;\n        }\n\n        // Checking the rights to create the new document.\n        // Note: Note checking the logical spaceReference, but the space of the final actual document reference, since\n        // that is where we are creating the new document.\n        checkRights(newDocumentReference.getLastSpaceReference(), context);\n\n        // Check if the document to create already exists and if it respects the name strategy\n        XWikiDocument newDocument = context.getWiki().getDocument(newDocumentReference, context);\n        if (handler.isDocumentAlreadyExisting(newDocument) || handler.isDocumentPathTooLong(newDocumentReference)\n            || !this.isEntityReferenceNameValid(newDocumentReference)) {\n            return CREATE_TEMPLATE;\n        }\n\n        // Verify if the \"type\" of document to create has been set, even if we currently do not use it in the action.\n        // The goal is let the user be able to chose it, which have some consequences in the UI (thanks to javascript).\n        // See: https://jira.xwiki.org/browse/XWIKI-12580\n        // Note: we do not need the \"type\" if we have a template provider: the type of the new document will be the type\n        // of the template.\n        // TODO: handle this type in doCreate() that we call above (see: https://jira.xwiki.org/browse/XWIKI-12585).\n        if (StringUtils.isBlank(handler.getType()) && !handler.hasTemplate()) {\n            return CREATE_TEMPLATE;\n        }\n\n        // create is finally valid, can be executed\n        doCreate(context, newDocument, handler.isSpace(), handler.getTemplateProvider());\n\n        return null;\n    }", "signature": "String render(XWikiContext context)", "full_signature": "@Override public String render(XWikiContext context)", "class_method_signature": "CreateAction.render(XWikiContext context)", "testcase": false, "constructor": false, "invocations": ["processRequest", "getCurrentScriptContext", "setAttribute", "getSpaceReference", "setAttribute", "getName", "setAttribute", "isSpace", "setAttribute", "getAvailableTemplateProviders", "setAttribute", "getRecommendedTemplateProviders", "getNewDocumentReference", "isTemplateProviderAllowedToCreateInCurrentSpace", "checkRights", "getLastSpaceReference", "getDocument", "getWiki", "isDocumentAlreadyExisting", "isDocumentPathTooLong", "isEntityReferenceNameValid", "isBlank", "getType", "hasTemplate", "doCreate", "isSpace", "getTemplateProvider"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}