{"test_class": {"identifier": "DefaultLikeManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMockComponents\n    private DefaultLikeManager defaultLikeManager;", "modifier": "@InjectMockComponents\n    private", "type": "DefaultLikeManager", "declarator": "defaultLikeManager", "var_name": "defaultLikeManager"}, {"original_string": "@MockComponent\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> userReferenceDocumentSerializer;", "modifier": "@MockComponent\n    @Named(\"document\")\n    private", "type": "UserReferenceSerializer<DocumentReference>", "declarator": "userReferenceDocumentSerializer", "var_name": "userReferenceDocumentSerializer"}, {"original_string": "@MockComponent\n    private UserReferenceSerializer<String> userReferenceStringSerializer;", "modifier": "@MockComponent\n    private", "type": "UserReferenceSerializer<String>", "declarator": "userReferenceStringSerializer", "var_name": "userReferenceStringSerializer"}, {"original_string": "@MockComponent\n    private AuthorizationManager authorizationManager;", "modifier": "@MockComponent\n    private", "type": "AuthorizationManager", "declarator": "authorizationManager", "var_name": "authorizationManager"}, {"original_string": "@MockComponent\n    private ObservationManager observationManager;", "modifier": "@MockComponent\n    private", "type": "ObservationManager", "declarator": "observationManager", "var_name": "observationManager"}, {"original_string": "@MockComponent\n    private CacheManager cacheManager;", "modifier": "@MockComponent\n    private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@MockComponent\n    private LikeConfiguration likeConfiguration;", "modifier": "@MockComponent\n    private", "type": "LikeConfiguration", "declarator": "likeConfiguration", "var_name": "likeConfiguration"}, {"original_string": "@MockComponent\n    private EntityReferenceSerializer<String> entityReferenceSerializer;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "entityReferenceSerializer", "var_name": "entityReferenceSerializer"}, {"original_string": "@MockComponent\n    private RatingsManagerFactory ratingsManagerFactory;", "modifier": "@MockComponent\n    private", "type": "RatingsManagerFactory", "declarator": "ratingsManagerFactory", "var_name": "ratingsManagerFactory"}, {"original_string": "private RatingsManager ratingsManager;", "modifier": "private", "type": "RatingsManager", "declarator": "ratingsManager", "var_name": "ratingsManager"}, {"original_string": "private Cache<Long> likedEntityCache;", "modifier": "private", "type": "Cache<Long>", "declarator": "likedEntityCache", "var_name": "likedEntityCache"}, {"original_string": "private Cache<Boolean> likeExistCache;", "modifier": "private", "type": "Cache<Boolean>", "declarator": "likeExistCache", "var_name": "likeExistCache"}, {"original_string": "private Right likeRight;", "modifier": "private", "type": "Right", "declarator": "likeRight", "var_name": "likeRight"}, {"original_string": "@Mock\n    private UserReference userReference;", "modifier": "@Mock\n    private", "type": "UserReference", "declarator": "userReference", "var_name": "userReference"}, {"original_string": "private DocumentReference userDocReference;", "modifier": "private", "type": "DocumentReference", "declarator": "userDocReference", "var_name": "userDocReference"}, {"original_string": "private DocumentReference target;", "modifier": "private", "type": "DocumentReference", "declarator": "target", "var_name": "target"}], "file": "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/test/java/org/xwiki/like/internal/DefaultLikeManagerTest.java"}, "test_case": {"identifier": "getLikers", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getLikers() throws Exception\n    {\n        Rating grading1 = mock(Rating.class);\n        UserReference userReference1 = mock(UserReference.class);\n        when(grading1.getAuthor()).thenReturn(userReference1);\n\n        Rating grading2 = mock(Rating.class);\n        UserReference userReference2 = mock(UserReference.class);\n        when(grading2.getAuthor()).thenReturn(userReference2);\n\n        Rating grading3 = mock(Rating.class);\n        UserReference userReference3 = mock(UserReference.class);\n        when(grading3.getAuthor()).thenReturn(userReference3);\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n\n        when(this.ratingsManager.getRatings(queryMap, 12, 4, RatingsManager.RatingQueryField.UPDATED_DATE, false))\n            .thenReturn(Arrays.asList(grading1, grading2, grading3));\n        assertEquals(Arrays.asList(userReference1, userReference2, userReference3),\n            this.defaultLikeManager.getLikers(this.target, 12, 4));\n    }", "signature": "void getLikers()", "full_signature": "@Test void getLikers()", "class_method_signature": "DefaultLikeManagerTest.getLikers()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getAuthor", "mock", "mock", "thenReturn", "when", "getAuthor", "mock", "mock", "thenReturn", "when", "getAuthor", "put", "getType", "put", "thenReturn", "when", "getRatings", "asList", "assertEquals", "asList", "getLikers"]}, "focal_class": {"identifier": "DefaultLikeManager", "superclass": "", "interfaces": "implements LikeManager, Initializable, Disposable", "fields": [{"original_string": "private static final int DEFAULT_LIKE_VOTE = 1;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_LIKE_VOTE = 1", "var_name": "DEFAULT_LIKE_VOTE"}, {"original_string": "@Inject\n    private RatingsManagerFactory ratingsManagerFactory;", "modifier": "@Inject\n    private", "type": "RatingsManagerFactory", "declarator": "ratingsManagerFactory", "var_name": "ratingsManagerFactory"}, {"original_string": "@Inject\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> userReferenceDocumentSerializer;", "modifier": "@Inject\n    @Named(\"document\")\n    private", "type": "UserReferenceSerializer<DocumentReference>", "declarator": "userReferenceDocumentSerializer", "var_name": "userReferenceDocumentSerializer"}, {"original_string": "@Inject\n    private UserReferenceSerializer<String> userReferenceStringSerializer;", "modifier": "@Inject\n    private", "type": "UserReferenceSerializer<String>", "declarator": "userReferenceStringSerializer", "var_name": "userReferenceStringSerializer"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> entityReferenceSerializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "entityReferenceSerializer", "var_name": "entityReferenceSerializer"}, {"original_string": "@Inject\n    private AuthorizationManager authorizationManager;", "modifier": "@Inject\n    private", "type": "AuthorizationManager", "declarator": "authorizationManager", "var_name": "authorizationManager"}, {"original_string": "@Inject\n    private ObservationManager observationManager;", "modifier": "@Inject\n    private", "type": "ObservationManager", "declarator": "observationManager", "var_name": "observationManager"}, {"original_string": "@Inject\n    private CacheManager cacheManager;", "modifier": "@Inject\n    private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@Inject\n    private LikeConfiguration likeConfiguration;", "modifier": "@Inject\n    private", "type": "LikeConfiguration", "declarator": "likeConfiguration", "var_name": "likeConfiguration"}, {"original_string": "private RatingsManager ratingsManager;", "modifier": "private", "type": "RatingsManager", "declarator": "ratingsManager", "var_name": "ratingsManager"}, {"original_string": "private Cache<Long> likeCountCache;", "modifier": "private", "type": "Cache<Long>", "declarator": "likeCountCache", "var_name": "likeCountCache"}, {"original_string": "private Cache<Boolean> likeExistCache;", "modifier": "private", "type": "Cache<Boolean>", "declarator": "likeExistCache", "var_name": "likeExistCache"}, {"original_string": "private Right likeRight;", "modifier": "private", "type": "Right", "declarator": "likeRight", "var_name": "likeRight"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "DefaultLikeManager.initialize()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "DefaultLikeManager.dispose()", "testcase": false, "constructor": false}, {"identifier": "getExistCacheKey", "parameters": "(UserReference source, EntityReference target)", "modifiers": "private", "return": "String", "signature": "String getExistCacheKey(UserReference source, EntityReference target)", "full_signature": "private String getExistCacheKey(UserReference source, EntityReference target)", "class_method_signature": "DefaultLikeManager.getExistCacheKey(UserReference source, EntityReference target)", "testcase": false, "constructor": false}, {"identifier": "saveLike", "parameters": "(UserReference source, EntityReference target)", "modifiers": "@Override public", "return": "long", "signature": "long saveLike(UserReference source, EntityReference target)", "full_signature": "@Override public long saveLike(UserReference source, EntityReference target)", "class_method_signature": "DefaultLikeManager.saveLike(UserReference source, EntityReference target)", "testcase": false, "constructor": false}, {"identifier": "getUserLikes", "parameters": "(UserReference source, int offset, int limit)", "modifiers": "@Override public", "return": "List<EntityReference>", "signature": "List<EntityReference> getUserLikes(UserReference source, int offset, int limit)", "full_signature": "@Override public List<EntityReference> getUserLikes(UserReference source, int offset, int limit)", "class_method_signature": "DefaultLikeManager.getUserLikes(UserReference source, int offset, int limit)", "testcase": false, "constructor": false}, {"identifier": "getEntityLikes", "parameters": "(EntityReference target)", "modifiers": "@Override public", "return": "long", "signature": "long getEntityLikes(EntityReference target)", "full_signature": "@Override public long getEntityLikes(EntityReference target)", "class_method_signature": "DefaultLikeManager.getEntityLikes(EntityReference target)", "testcase": false, "constructor": false}, {"identifier": "removeLike", "parameters": "(UserReference source, EntityReference target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeLike(UserReference source, EntityReference target)", "full_signature": "@Override public boolean removeLike(UserReference source, EntityReference target)", "class_method_signature": "DefaultLikeManager.removeLike(UserReference source, EntityReference target)", "testcase": false, "constructor": false}, {"identifier": "isLiked", "parameters": "(UserReference source, EntityReference target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLiked(UserReference source, EntityReference target)", "full_signature": "@Override public boolean isLiked(UserReference source, EntityReference target)", "class_method_signature": "DefaultLikeManager.isLiked(UserReference source, EntityReference target)", "testcase": false, "constructor": false}, {"identifier": "getLikers", "parameters": "(EntityReference target, int offset, int limit)", "modifiers": "@Override public", "return": "List<UserReference>", "signature": "List<UserReference> getLikers(EntityReference target, int offset, int limit)", "full_signature": "@Override public List<UserReference> getLikers(EntityReference target, int offset, int limit)", "class_method_signature": "DefaultLikeManager.getLikers(EntityReference target, int offset, int limit)", "testcase": false, "constructor": false}, {"identifier": "getLikeRight", "parameters": "()", "modifiers": "@Override public", "return": "Right", "signature": "Right getLikeRight()", "full_signature": "@Override public Right getLikeRight()", "class_method_signature": "DefaultLikeManager.getLikeRight()", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/main/java/org/xwiki/like/internal/DefaultLikeManager.java"}, "focal_method": {"identifier": "getLikers", "parameters": "(EntityReference target, int offset, int limit)", "modifiers": "@Override public", "return": "List<UserReference>", "body": "@Override\n    public List<UserReference> getLikers(EntityReference target, int offset, int limit) throws LikeException\n    {\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        try {\n            List<Rating> gradings = this.ratingsManager\n                .getRatings(queryMap, offset, limit, RatingsManager.RatingQueryField.UPDATED_DATE, false);\n            return gradings.stream().map(Rating::getAuthor).collect(Collectors.toList());\n        } catch (RatingsException e) {\n            throw new LikeException(String.format(\"Error while getting likers of [%s]\", target), e);\n        }\n    }", "signature": "List<UserReference> getLikers(EntityReference target, int offset, int limit)", "full_signature": "@Override public List<UserReference> getLikers(EntityReference target, int offset, int limit)", "class_method_signature": "DefaultLikeManager.getLikers(EntityReference target, int offset, int limit)", "testcase": false, "constructor": false, "invocations": ["put", "getType", "put", "getRatings", "collect", "map", "stream", "toList", "format"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}