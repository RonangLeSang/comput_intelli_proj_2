{"test_class": {"identifier": "CurrentMacroEntityReferenceResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<EntityReferenceResolver<String>> mocker =\n        new MockitoComponentMockingRule<EntityReferenceResolver<String>>(CurrentMacroEntityReferenceResolver.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<EntityReferenceResolver<String>>", "declarator": "mocker =\n        new MockitoComponentMockingRule<EntityReferenceResolver<String>>(CurrentMacroEntityReferenceResolver.class)", "var_name": "mocker"}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-transformations/xwiki-platform-rendering-transformation-macro/src/test/java/org/xwiki/rendering/internal/transformation/macro/CurrentMacroEntityReferenceResolverTest.java"}, "test_case": {"identifier": "resolveWhenNoMetaDataBlock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolveWhenNoMetaDataBlock() throws Exception\n    {\n        EntityReference expectedReference = new DocumentReference(\"wiki\", \"Space\", \"Page\");\n        EntityReferenceResolver<String> currentEntityReferenceResolver =\n            mocker.getInstance(EntityReferenceResolver.TYPE_STRING, \"current\");\n        when(currentEntityReferenceResolver.resolve(\"Space.Page\", EntityType.DOCUMENT)).thenReturn(expectedReference);\n\n        Block block = new WordBlock(\"whatever\");\n        Assert.assertEquals(expectedReference,\n            mocker.getComponentUnderTest().resolve(\"Space.Page\", EntityType.DOCUMENT, block));\n    }", "signature": "void resolveWhenNoMetaDataBlock()", "full_signature": "@Test public void resolveWhenNoMetaDataBlock()", "class_method_signature": "CurrentMacroEntityReferenceResolverTest.resolveWhenNoMetaDataBlock()", "testcase": true, "constructor": false, "invocations": ["getInstance", "thenReturn", "when", "resolve", "assertEquals", "resolve", "getComponentUnderTest"]}, "focal_class": {"identifier": "CurrentMacroEntityReferenceResolver", "superclass": "", "interfaces": "implements EntityReferenceResolver<String>", "fields": [{"original_string": "@Inject\n    @Named(\"current\")\n    private EntityReferenceResolver<String> currentEntityReferenceResolver;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "EntityReferenceResolver<String>", "declarator": "currentEntityReferenceResolver", "var_name": "currentEntityReferenceResolver"}], "methods": [{"identifier": "resolve", "parameters": "(String representation, EntityType entityType, Object... parameters)", "modifiers": "@Override public", "return": "EntityReference", "signature": "EntityReference resolve(String representation, EntityType entityType, Object... parameters)", "full_signature": "@Override public EntityReference resolve(String representation, EntityType entityType, Object... parameters)", "class_method_signature": "CurrentMacroEntityReferenceResolver.resolve(String representation, EntityType entityType, Object... parameters)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-transformations/xwiki-platform-rendering-transformation-macro/src/main/java/org/xwiki/rendering/internal/transformation/macro/CurrentMacroEntityReferenceResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(String representation, EntityType entityType, Object... parameters)", "modifiers": "@Override public", "return": "EntityReference", "body": "@Override\n    public EntityReference resolve(String representation, EntityType entityType, Object... parameters)\n    {\n        // There must one parameter and it must be of type Block\n        if (parameters.length != 1 || !(parameters[0] instanceof Block)) {\n            throw new IllegalArgumentException(String.format(\"You must pass one parameter of type [%s]\",\n                Block.class.getName()));\n        }\n\n        Block currentBlock = (Block) parameters[0];\n\n        EntityReference result;\n\n        MetaDataBlock metaDataBlock =\n            currentBlock.getFirstBlock(new MetadataBlockMatcher(MetaData.BASE), Block.Axes.ANCESTOR);\n\n        // If no Source MetaData was found resolve against the current entity as a failsafe solution.\n        if (metaDataBlock == null) {\n            result = this.currentEntityReferenceResolver.resolve(representation, entityType);\n        } else {\n            String sourceMetaData = (String) metaDataBlock.getMetaData().getMetaData(MetaData.BASE);\n            result =\n                this.currentEntityReferenceResolver.resolve(representation, entityType,\n                    this.currentEntityReferenceResolver.resolve(sourceMetaData, EntityType.DOCUMENT));\n        }\n\n        return result;\n    }", "signature": "EntityReference resolve(String representation, EntityType entityType, Object... parameters)", "full_signature": "@Override public EntityReference resolve(String representation, EntityType entityType, Object... parameters)", "class_method_signature": "CurrentMacroEntityReferenceResolver.resolve(String representation, EntityType entityType, Object... parameters)", "testcase": false, "constructor": false, "invocations": ["format", "getName", "getFirstBlock", "resolve", "getMetaData", "getMetaData", "resolve", "resolve"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}