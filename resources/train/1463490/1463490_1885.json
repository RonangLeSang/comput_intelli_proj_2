{"test_class": {"identifier": "HqlQueryExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<HqlQueryExecutor> mocker =\n        new MockitoComponentMockingRule<>(HqlQueryExecutor.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<HqlQueryExecutor>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(HqlQueryExecutor.class)", "var_name": "mocker"}, {"original_string": "private ContextualAuthorizationManager authorization;", "modifier": "private", "type": "ContextualAuthorizationManager", "declarator": "authorization", "var_name": "authorization"}, {"original_string": "private boolean hasProgrammingRight;", "modifier": "private", "type": "boolean", "declarator": "hasProgrammingRight", "var_name": "hasProgrammingRight"}, {"original_string": "private HqlQueryExecutor executor;", "modifier": "private", "type": "HqlQueryExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private XWikiHibernateStore store;", "modifier": "private", "type": "XWikiHibernateStore", "declarator": "store", "var_name": "store"}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/store/hibernate/query/HqlQueryExecutorTest.java"}, "test_case": {"identifier": "executeWhenNotAllowedSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeWhenNotAllowedSelect() throws Exception\n    {\n        try {\n            execute(\"select notallowed.name from NotAllowedTable notallowed\", false);\n            fail(\"Should have thrown an exception here\");\n        } catch (QueryException expected) {\n            assertEquals(\n                \"The query requires programming right.\"\n                    + \" Query statement = [select notallowed.name from NotAllowedTable notallowed]\",\n                expected.getMessage());\n        }\n    }", "signature": "void executeWhenNotAllowedSelect()", "full_signature": "@Test public void executeWhenNotAllowedSelect()", "class_method_signature": "HqlQueryExecutorTest.executeWhenNotAllowedSelect()", "testcase": true, "constructor": false, "invocations": ["execute", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "HqlQueryExecutor", "superclass": "", "interfaces": "implements QueryExecutor, Initializable", "fields": [{"original_string": "private static final String MAPPING_PATH = \"queries.hbm.xml\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_PATH = \"queries.hbm.xml\"", "var_name": "MAPPING_PATH"}, {"original_string": "private static final String ESCAPE_LIKE_PARAMETERS_FILTER = \"escapeLikeParameters\";", "modifier": "private static final", "type": "String", "declarator": "ESCAPE_LIKE_PARAMETERS_FILTER = \"escapeLikeParameters\"", "var_name": "ESCAPE_LIKE_PARAMETERS_FILTER"}, {"original_string": "@Inject\n    private HibernateStore hibernate;", "modifier": "@Inject\n    private", "type": "HibernateStore", "declarator": "hibernate", "var_name": "hibernate"}, {"original_string": "@Inject\n    private Execution execution;", "modifier": "@Inject\n    private", "type": "Execution", "declarator": "execution", "var_name": "execution"}, {"original_string": "@Inject\n    private ContextualAuthorizationManager authorization;", "modifier": "@Inject\n    private", "type": "ContextualAuthorizationManager", "declarator": "authorization", "var_name": "authorization"}, {"original_string": "@Inject\n    private JobProgressManager progress;", "modifier": "@Inject\n    private", "type": "JobProgressManager", "declarator": "progress", "var_name": "progress"}, {"original_string": "@Inject\n    @Named(\"context\")\n    private Provider<ComponentManager> componentManagerProvider;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "Provider<ComponentManager>", "declarator": "componentManagerProvider", "var_name": "componentManagerProvider"}, {"original_string": "private volatile Set<String> allowedNamedQueries;", "modifier": "private volatile", "type": "Set<String>", "declarator": "allowedNamedQueries", "var_name": "allowedNamedQueries"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "HqlQueryExecutor.initialize()", "testcase": false, "constructor": false}, {"identifier": "getAllowedNamedQueries", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAllowedNamedQueries()", "full_signature": "private Set<String> getAllowedNamedQueries()", "class_method_signature": "HqlQueryExecutor.getAllowedNamedQueries()", "testcase": false, "constructor": false}, {"identifier": "isSafeSelect", "parameters": "(String statementString)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isSafeSelect(String statementString)", "full_signature": "protected static boolean isSafeSelect(String statementString)", "class_method_signature": "HqlQueryExecutor.isSafeSelect(String statementString)", "testcase": false, "constructor": false}, {"identifier": "checkAllowed", "parameters": "(final Query query)", "modifiers": "protected", "return": "void", "signature": "void checkAllowed(final Query query)", "full_signature": "protected void checkAllowed(final Query query)", "class_method_signature": "HqlQueryExecutor.checkAllowed(final Query query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final Query query)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> execute(final Query query)", "full_signature": "@Override public List<T> execute(final Query query)", "class_method_signature": "HqlQueryExecutor.execute(final Query query)", "testcase": false, "constructor": false}, {"identifier": "createHibernateQuery", "parameters": "(Session session, Query query)", "modifiers": "protected", "return": "org.hibernate.query.Query<T>", "signature": "org.hibernate.query.Query<T> createHibernateQuery(Session session, Query query)", "full_signature": "protected org.hibernate.query.Query<T> createHibernateQuery(Session session, Query query)", "class_method_signature": "HqlQueryExecutor.createHibernateQuery(Session session, Query query)", "testcase": false, "constructor": false}, {"identifier": "filterQuery", "parameters": "(Query query, String language)", "modifiers": "private", "return": "Query", "signature": "Query filterQuery(Query query, String language)", "full_signature": "private Query filterQuery(Query query, String language)", "class_method_signature": "HqlQueryExecutor.filterQuery(Query query, String language)", "testcase": false, "constructor": false}, {"identifier": "addEscapeLikeParametersFilter", "parameters": "(Query query)", "modifiers": "private", "return": "void", "signature": "void addEscapeLikeParametersFilter(Query query)", "full_signature": "private void addEscapeLikeParametersFilter(Query query)", "class_method_signature": "HqlQueryExecutor.addEscapeLikeParametersFilter(Query query)", "testcase": false, "constructor": false}, {"identifier": "hasQueryParametersType", "parameters": "(Query query)", "modifiers": "private", "return": "boolean", "signature": "boolean hasQueryParametersType(Query query)", "full_signature": "private boolean hasQueryParametersType(Query query)", "class_method_signature": "HqlQueryExecutor.hasQueryParametersType(Query query)", "testcase": false, "constructor": false}, {"identifier": "completeShortFormStatement", "parameters": "(String statement)", "modifiers": "protected", "return": "String", "signature": "String completeShortFormStatement(String statement)", "full_signature": "protected String completeShortFormStatement(String statement)", "class_method_signature": "HqlQueryExecutor.completeShortFormStatement(String statement)", "testcase": false, "constructor": false}, {"identifier": "createNamedHibernateQuery", "parameters": "(Session session, Query query)", "modifiers": "private", "return": "org.hibernate.query.Query<T>", "signature": "org.hibernate.query.Query<T> createNamedHibernateQuery(Session session, Query query)", "full_signature": "private org.hibernate.query.Query<T> createNamedHibernateQuery(Session session, Query query)", "class_method_signature": "HqlQueryExecutor.createNamedHibernateQuery(Session session, Query query)", "testcase": false, "constructor": false}, {"identifier": "populateParameters", "parameters": "(org.hibernate.query.Query<?> hquery, Query query)", "modifiers": "protected", "return": "void", "signature": "void populateParameters(org.hibernate.query.Query<?> hquery, Query query)", "full_signature": "protected void populateParameters(org.hibernate.query.Query<?> hquery, Query query)", "class_method_signature": "HqlQueryExecutor.populateParameters(org.hibernate.query.Query<?> hquery, Query query)", "testcase": false, "constructor": false}, {"identifier": "setNamedParameter", "parameters": "(org.hibernate.query.Query<?> query, String name, Object value)", "modifiers": "protected", "return": "void", "signature": "void setNamedParameter(org.hibernate.query.Query<?> query, String name, Object value)", "full_signature": "protected void setNamedParameter(org.hibernate.query.Query<?> query, String name, Object value)", "class_method_signature": "HqlQueryExecutor.setNamedParameter(org.hibernate.query.Query<?> query, String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "getStore", "parameters": "()", "modifiers": "protected", "return": "XWikiHibernateStore", "signature": "XWikiHibernateStore getStore()", "full_signature": "protected XWikiHibernateStore getStore()", "class_method_signature": "HqlQueryExecutor.getStore()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "protected", "return": "XWikiContext", "signature": "XWikiContext getContext()", "full_signature": "protected XWikiContext getContext()", "class_method_signature": "HqlQueryExecutor.getContext()", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/hibernate/query/HqlQueryExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(final Query query)", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public <T> List<T> execute(final Query query) throws QueryException\n    {\n        // Make sure the query is allowed in the current context\n        checkAllowed(query);\n\n        String oldDatabase = getContext().getWikiId();\n        try {\n            this.progress.startStep(query, \"query.hql.progress.execute\", \"Execute HQL query [{}]\", query);\n\n            if (query.getWiki() != null) {\n                getContext().setWikiId(query.getWiki());\n            }\n            return getStore().executeRead(getContext(), session -> {\n                org.hibernate.query.Query<T> hquery = createHibernateQuery(session, query);\n\n                List<T> results = hquery.list();\n                if (query.getFilters() != null && !query.getFilters().isEmpty()) {\n                    for (QueryFilter filter : query.getFilters()) {\n                        results = filter.filterResults(results);\n                    }\n                }\n                return results;\n            });\n        } catch (XWikiException e) {\n            throw new QueryException(\"Exception while executing query\", query, e);\n        } finally {\n            getContext().setWikiId(oldDatabase);\n\n            this.progress.endStep(query);\n        }\n    }", "signature": "List<T> execute(final Query query)", "full_signature": "@Override public List<T> execute(final Query query)", "class_method_signature": "HqlQueryExecutor.execute(final Query query)", "testcase": false, "constructor": false, "invocations": ["checkAllowed", "getWikiId", "getContext", "startStep", "getWiki", "setWikiId", "getContext", "getWiki", "executeRead", "getStore", "getContext", "createHibernateQuery", "list", "getFilters", "isEmpty", "getFilters", "getFilters", "filterResults", "setWikiId", "getContext", "endStep"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}