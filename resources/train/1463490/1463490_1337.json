{"test_class": {"identifier": "SolrIndexInitializeListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMockComponents\n    private SolrIndexInitializeListener solrIndexInitializeListener;", "modifier": "@InjectMockComponents\n    private", "type": "SolrIndexInitializeListener", "declarator": "solrIndexInitializeListener", "var_name": "solrIndexInitializeListener"}, {"original_string": "@MockComponent\n    private Provider<SolrIndexer> solrIndexerProvider;", "modifier": "@MockComponent\n    private", "type": "Provider<SolrIndexer>", "declarator": "solrIndexerProvider", "var_name": "solrIndexerProvider"}, {"original_string": "@MockComponent\n    private SolrIndexer solrIndexer;", "modifier": "@MockComponent\n    private", "type": "SolrIndexer", "declarator": "solrIndexer", "var_name": "solrIndexer"}, {"original_string": "@MockComponent\n    private SolrConfiguration configuration;", "modifier": "@MockComponent\n    private", "type": "SolrConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@MockComponent\n    private EntityReferenceSerializer<String> entityReferenceSerializer;", "modifier": "@MockComponent\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "entityReferenceSerializer", "var_name": "entityReferenceSerializer"}, {"original_string": "@MockComponent\n    private WikiDescriptorManager wikiDescriptorManager;", "modifier": "@MockComponent\n    private", "type": "WikiDescriptorManager", "declarator": "wikiDescriptorManager", "var_name": "wikiDescriptorManager"}], "file": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/test/java/org/xwiki/search/solr/internal/SolrIndexInitializeListenerTest.java"}, "test_case": {"identifier": "onEventApplicationReadyForFarm", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void onEventApplicationReadyForFarm() throws SolrIndexerException\n    {\n        when(this.configuration.synchronizeAtStartupMode()).thenReturn(SolrConfiguration.SynchronizeAtStartupMode.FARM);\n\n        when(this.configuration.synchronizeAtStartup()).thenReturn(false);\n        this.solrIndexInitializeListener.onEvent(new ApplicationReadyEvent(), null, null);\n        verify(this.solrIndexer, never()).startIndex(any());\n\n        when(this.configuration.synchronizeAtStartup()).thenReturn(true);\n        this.solrIndexInitializeListener.onEvent(new ApplicationReadyEvent(), null, null);\n        IndexerRequest indexerRequest = new IndexerRequest();\n        indexerRequest.setId(Arrays.asList(\"solr\", \"indexer\"));\n        verify(this.solrIndexer).startIndex(indexerRequest);\n    }", "signature": "void onEventApplicationReadyForFarm()", "full_signature": "@Test void onEventApplicationReadyForFarm()", "class_method_signature": "SolrIndexInitializeListenerTest.onEventApplicationReadyForFarm()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "synchronizeAtStartupMode", "thenReturn", "when", "synchronizeAtStartup", "onEvent", "startIndex", "verify", "never", "any", "thenReturn", "when", "synchronizeAtStartup", "onEvent", "setId", "asList", "startIndex", "verify"]}, "focal_class": {"identifier": "SolrIndexInitializeListener", "superclass": "", "interfaces": "implements EventListener", "fields": [{"original_string": "private static final List<Event> EVENTS = Arrays.<Event> asList(new ApplicationReadyEvent(), new WikiReadyEvent());", "modifier": "private static final", "type": "List<Event>", "declarator": "EVENTS = Arrays.<Event> asList(new ApplicationReadyEvent(), new WikiReadyEvent())", "var_name": "EVENTS"}, {"original_string": "private static final List<String> REQUEST_DEFAULT_ID = Arrays.asList(\"solr\", \"indexer\");", "modifier": "private static final", "type": "List<String>", "declarator": "REQUEST_DEFAULT_ID = Arrays.asList(\"solr\", \"indexer\")", "var_name": "REQUEST_DEFAULT_ID"}, {"original_string": "@Inject\n    protected Logger logger;", "modifier": "@Inject\n    protected", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private Provider<SolrIndexer> solrIndexer;", "modifier": "@Inject\n    private", "type": "Provider<SolrIndexer>", "declarator": "solrIndexer", "var_name": "solrIndexer"}, {"original_string": "@Inject\n    private SolrConfiguration configuration;", "modifier": "@Inject\n    private", "type": "SolrConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> entityReferenceSerializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "entityReferenceSerializer", "var_name": "entityReferenceSerializer"}, {"original_string": "@Inject\n    private WikiDescriptorManager wikiDescriptorManager;", "modifier": "@Inject\n    private", "type": "WikiDescriptorManager", "declarator": "wikiDescriptorManager", "var_name": "wikiDescriptorManager"}], "methods": [{"identifier": "getEvents", "parameters": "()", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getEvents()", "full_signature": "@Override public List<Event> getEvents()", "class_method_signature": "SolrIndexInitializeListener.getEvents()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SolrIndexInitializeListener.getName()", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "SolrIndexInitializeListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-api/src/main/java/org/xwiki/search/solr/internal/SolrIndexInitializeListener.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        if (this.configuration.synchronizeAtStartup()) {\n            SolrConfiguration.SynchronizeAtStartupMode startupMode =\n                this.configuration.synchronizeAtStartupMode();\n            IndexerRequest request = null;\n            ArrayList<String> requestId = new ArrayList<>(REQUEST_DEFAULT_ID);\n\n            try {\n                if (event instanceof ApplicationReadyEvent) {\n                    if (startupMode == SolrConfiguration.SynchronizeAtStartupMode.FARM) {\n                        request = new IndexerRequest();\n                        request.setId(requestId);\n                    } else if (startupMode == SolrConfiguration.SynchronizeAtStartupMode.WIKI) {\n                        // Startup of the application: start indexing the main wiki.\n                        request = new IndexerRequest();\n                        WikiReference wikiReference = this.wikiDescriptorManager.getMainWikiDescriptor().getReference();\n                        request.setRootReference(wikiReference);\n                        requestId.add(this.entityReferenceSerializer.serialize(wikiReference));\n                        request.setId(requestId);\n                    }\n                } else if (startupMode == SolrConfiguration.SynchronizeAtStartupMode.WIKI\n                    && event instanceof WikiReadyEvent) {\n                    WikiReadyEvent wikiReadyEvent = (WikiReadyEvent) event;\n                    WikiReference wikiReference = new WikiReference(wikiReadyEvent.getWikiId());\n                    request = new IndexerRequest();\n                    request.setRootReference(wikiReference);\n\n                    requestId.add(this.entityReferenceSerializer.serialize(wikiReference));\n                    request.setId(requestId);\n                }\n\n                if (request != null) {\n                    this.solrIndexer.get().startIndex(request);\n                }\n            } catch (SolrIndexerException | WikiManagerException e) {\n                this.logger.error(\"Failed to start initial Solr index synchronization\", e);\n            }\n        }\n    }", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "SolrIndexInitializeListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false, "invocations": ["synchronizeAtStartup", "synchronizeAtStartupMode", "setId", "getReference", "getMainWikiDescriptor", "setRootReference", "add", "serialize", "setId", "getWikiId", "setRootReference", "add", "serialize", "setId", "startIndex", "get", "error"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}