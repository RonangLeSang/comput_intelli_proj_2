{"test_class": {"identifier": "DefaultModelBridgeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockitoComponentMockingRule<ModelBridge> mocker =\n            new MockitoComponentMockingRule<>(DefaultModelBridge.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<ModelBridge>", "declarator": "mocker =\n            new MockitoComponentMockingRule<>(DefaultModelBridge.class)", "var_name": "mocker"}, {"original_string": "private Provider<XWikiContext> contextProvider;", "modifier": "private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}, {"original_string": "private DocumentReferenceResolver<String> documentReferenceResolver;", "modifier": "private", "type": "DocumentReferenceResolver<String>", "declarator": "documentReferenceResolver", "var_name": "documentReferenceResolver"}], "file": "xwiki-platform-core/xwiki-platform-eventstream/xwiki-platform-eventstream-default/src/test/java/org/xwiki/eventstream/internal/DefaultModelBridgeTest.java"}, "test_case": {"identifier": "testAuthorReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthorReference() throws Exception\n    {\n        XWikiContext context = mock(XWikiContext.class);\n        XWiki xwiki = mock(XWiki.class);\n        XWikiDocument document = mock(XWikiDocument.class);\n        DocumentReference authorReference = mock(DocumentReference.class);\n        EntityReference entityReference = mock(EntityReference.class);\n\n        when(this.contextProvider.get()).thenReturn(context);\n        when(context.getWiki()).thenReturn(xwiki);\n        when(xwiki.getDocument(entityReference, context)).thenReturn(document);\n        when(document.getAuthorReference()).thenReturn(authorReference);\n\n        DocumentReference result = this.mocker.getComponentUnderTest().getAuthorReference(entityReference);\n\n        assertEquals(authorReference, result);\n    }", "signature": "void testAuthorReference()", "full_signature": "@Test public void testAuthorReference()", "class_method_signature": "DefaultModelBridgeTest.testAuthorReference()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "get", "thenReturn", "when", "getWiki", "thenReturn", "when", "getDocument", "thenReturn", "when", "getAuthorReference", "getAuthorReference", "getComponentUnderTest", "assertEquals"]}, "focal_class": {"identifier": "DefaultModelBridge", "superclass": "", "interfaces": "implements ModelBridge", "fields": [{"original_string": "@Inject\n    private Provider<XWikiContext> contextProvider;", "modifier": "@Inject\n    private", "type": "Provider<XWikiContext>", "declarator": "contextProvider", "var_name": "contextProvider"}, {"original_string": "@Inject\n    private DocumentReferenceResolver<String> documentReferenceResolver;", "modifier": "@Inject\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "documentReferenceResolver", "var_name": "documentReferenceResolver"}], "methods": [{"identifier": "getAuthorReference", "parameters": "(EntityReference entityReference)", "modifiers": "@Override public", "return": "DocumentReference", "signature": "DocumentReference getAuthorReference(EntityReference entityReference)", "full_signature": "@Override public DocumentReference getAuthorReference(EntityReference entityReference)", "class_method_signature": "DefaultModelBridge.getAuthorReference(EntityReference entityReference)", "testcase": false, "constructor": false}, {"identifier": "checkXObjectPresence", "parameters": "(List<String> xObjectTypes, Object source)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkXObjectPresence(List<String> xObjectTypes, Object source)", "full_signature": "@Override public boolean checkXObjectPresence(List<String> xObjectTypes, Object source)", "class_method_signature": "DefaultModelBridge.checkXObjectPresence(List<String> xObjectTypes, Object source)", "testcase": false, "constructor": false}, {"identifier": "findDocument", "parameters": "(EntityReference entityReference)", "modifiers": "private", "return": "XWikiDocument", "signature": "XWikiDocument findDocument(EntityReference entityReference)", "full_signature": "private XWikiDocument findDocument(EntityReference entityReference)", "class_method_signature": "DefaultModelBridge.findDocument(EntityReference entityReference)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-eventstream/xwiki-platform-eventstream-default/src/main/java/org/xwiki/eventstream/internal/DefaultModelBridge.java"}, "focal_method": {"identifier": "getAuthorReference", "parameters": "(EntityReference entityReference)", "modifiers": "@Override public", "return": "DocumentReference", "body": "@Override\n    public DocumentReference getAuthorReference(EntityReference entityReference) throws EventStreamException\n    {\n        return this.findDocument(entityReference).getAuthorReference();\n    }", "signature": "DocumentReference getAuthorReference(EntityReference entityReference)", "full_signature": "@Override public DocumentReference getAuthorReference(EntityReference entityReference)", "class_method_signature": "DefaultModelBridge.getAuthorReference(EntityReference entityReference)", "testcase": false, "constructor": false, "invocations": ["getAuthorReference", "findDocument"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}