{"test_class": {"identifier": "XWikiAuthServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoOldcoreRule oldcore = new MockitoOldcoreRule();", "modifier": "@Rule\n    public", "type": "MockitoOldcoreRule", "declarator": "oldcore = new MockitoOldcoreRule()", "var_name": "oldcore"}, {"original_string": "private XWikiAuthServiceImpl authService;", "modifier": "private", "type": "XWikiAuthServiceImpl", "declarator": "authService", "var_name": "authService"}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/user/impl/xwiki/XWikiAuthServiceImplTest.java"}, "test_case": {"identifier": "testAuthenticateWithSuperAdminPrefixedWithXWikiWhenSuperAdminPasswordIsTurnedOff", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthenticateWithSuperAdminPrefixedWithXWikiWhenSuperAdminPasswordIsTurnedOff() throws Exception\n    {\n        Principal principal = this.authService.authenticate(XWikiRightService.SUPERADMIN_USER_FULLNAME, \"whatever\",\n            this.oldcore.getXWikiContext());\n\n        assertNull(principal);\n    }", "signature": "void testAuthenticateWithSuperAdminPrefixedWithXWikiWhenSuperAdminPasswordIsTurnedOff()", "full_signature": "@Test public void testAuthenticateWithSuperAdminPrefixedWithXWikiWhenSuperAdminPasswordIsTurnedOff()", "class_method_signature": "XWikiAuthServiceImplTest.testAuthenticateWithSuperAdminPrefixedWithXWikiWhenSuperAdminPasswordIsTurnedOff()", "testcase": true, "constructor": false, "invocations": ["authenticate", "getXWikiContext", "assertNull"]}, "focal_class": {"identifier": "XWikiAuthServiceImpl", "superclass": "extends AbstractXWikiAuthService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XWikiAuthServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XWikiAuthServiceImpl.class)", "var_name": "LOGGER"}, {"original_string": "private static final EntityReference USERCLASS_REFERENCE = new EntityReference(\"XWikiUsers\", EntityType.DOCUMENT,\n        new EntityReference(\"XWiki\", EntityType.SPACE));", "modifier": "private static final", "type": "EntityReference", "declarator": "USERCLASS_REFERENCE = new EntityReference(\"XWikiUsers\", EntityType.DOCUMENT,\n        new EntityReference(\"XWiki\", EntityType.SPACE))", "var_name": "USERCLASS_REFERENCE"}, {"original_string": "private DocumentReferenceResolver<String> currentDocumentReferenceResolver = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"current\");", "modifier": "private", "type": "DocumentReferenceResolver<String>", "declarator": "currentDocumentReferenceResolver = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"current\")", "var_name": "currentDocumentReferenceResolver"}, {"original_string": "private EntityReferenceSerializer<String> compactWikiEntityReferenceSerializer = Utils.getComponent(\n        EntityReferenceSerializer.TYPE_STRING, \"compactwiki\");", "modifier": "private", "type": "EntityReferenceSerializer<String>", "declarator": "compactWikiEntityReferenceSerializer = Utils.getComponent(\n        EntityReferenceSerializer.TYPE_STRING, \"compactwiki\")", "var_name": "compactWikiEntityReferenceSerializer"}, {"original_string": "protected Map<String, XWikiAuthenticator> authenticators = new ConcurrentHashMap<String, XWikiAuthenticator>();", "modifier": "protected", "type": "Map<String, XWikiAuthenticator>", "declarator": "authenticators = new ConcurrentHashMap<String, XWikiAuthenticator>()", "var_name": "authenticators"}], "methods": [{"identifier": "getAuthenticator", "parameters": "(XWikiContext context)", "modifiers": "protected", "return": "XWikiAuthenticator", "signature": "XWikiAuthenticator getAuthenticator(XWikiContext context)", "full_signature": "protected XWikiAuthenticator getAuthenticator(XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.getAuthenticator(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "checkAuth", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "XWikiUser", "signature": "XWikiUser checkAuth(XWikiContext context)", "full_signature": "@Override public XWikiUser checkAuth(XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.checkAuth(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "checkAuth", "parameters": "(String username, String password, String rememberme, XWikiContext context)", "modifiers": "@Override public", "return": "XWikiUser", "signature": "XWikiUser checkAuth(String username, String password, String rememberme, XWikiContext context)", "full_signature": "@Override public XWikiUser checkAuth(String username, String password, String rememberme, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.checkAuth(String username, String password, String rememberme, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getContextUserName", "parameters": "(Principal principal, XWikiContext context)", "modifiers": "private", "return": "String", "signature": "String getContextUserName(Principal principal, XWikiContext context)", "full_signature": "private String getContextUserName(Principal principal, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.getContextUserName(Principal principal, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "showLogin", "parameters": "(XWikiContext context)", "modifiers": "@Override public", "return": "void", "signature": "void showLogin(XWikiContext context)", "full_signature": "@Override public void showLogin(XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.showLogin(XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String username, String password, XWikiContext context)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(String username, String password, XWikiContext context)", "full_signature": "@Override public Principal authenticate(String username, String password, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.authenticate(String username, String password, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "findUser", "parameters": "(String username, XWikiContext context)", "modifiers": "protected", "return": "String", "signature": "String findUser(String username, XWikiContext context)", "full_signature": "protected String findUser(String username, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.findUser(String username, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "checkPassword", "parameters": "(String username, String password, XWikiContext context)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkPassword(String username, String password, XWikiContext context)", "full_signature": "protected boolean checkPassword(String username, String password, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.checkPassword(String username, String password, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "getParam", "parameters": "(String name, XWikiContext context)", "modifiers": "protected", "return": "String", "signature": "String getParam(String name, XWikiContext context)", "full_signature": "protected String getParam(String name, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.getParam(String name, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(String user, XWikiContext context)", "modifiers": "protected", "return": "String", "signature": "String createUser(String user, XWikiContext context)", "full_signature": "protected String createUser(String user, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.createUser(String user, XWikiContext context)", "testcase": false, "constructor": false}, {"identifier": "stripContextPathFromURL", "parameters": "(URL url, XWikiContext context)", "modifiers": "protected", "return": "String", "signature": "String stripContextPathFromURL(URL url, XWikiContext context)", "full_signature": "protected String stripContextPathFromURL(URL url, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.stripContextPathFromURL(URL url, XWikiContext context)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/impl/xwiki/XWikiAuthServiceImpl.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(String username, String password, XWikiContext context)", "modifiers": "@Override public", "return": "Principal", "body": "@Override\n    public Principal authenticate(String username, String password, XWikiContext context) throws XWikiException\n    {\n        /*\n         * This method was returning null on failure so I preserved that behaviour, while adding the exact error\n         * messages to the context given as argument. However, the right way to do this would probably be to throw\n         * XWikiException-s.\n         */\n\n        if (username == null) {\n            // If we can't find the username field then we are probably on the login screen\n            return null;\n        }\n\n        // Check for empty usernames\n        if (StringUtils.isBlank(username)) {\n            context.put(\"message\", \"nousername\");\n            return null;\n        }\n\n        // Check for empty passwords\n        if (password == null || password.isEmpty()) {\n            context.put(\"message\", \"nopassword\");\n            return null;\n        }\n\n        // Trim the username to allow users to enter their names with spaces before or after\n        String cannonicalUsername = username.replaceAll(\" \", \"\");\n\n        // Check for superadmin\n        if (isSuperAdmin(cannonicalUsername)) {\n            return authenticateSuperAdmin(password, context);\n        }\n\n        // If we have the context then we are using direct mode, and we should be able to specify the database\n        // This is needed for virtual mode to work\n        if (context != null) {\n            String susername = cannonicalUsername;\n            String virtualXwikiName = null;\n            int i = cannonicalUsername.indexOf(\".\");\n            int j = cannonicalUsername.indexOf(\":\");\n\n            // Extract the specified wiki name, if it exists\n            if (j > 0) {\n                virtualXwikiName = cannonicalUsername.substring(0, j);\n            }\n\n            // Use just the username, without a wiki or space prefix\n            if (i != -1) {\n                susername = cannonicalUsername.substring(i + 1);\n            } else if (j > 0) {\n                // The username could be in the format xwiki:Username, so strip the wiki prefix.\n                susername = cannonicalUsername.substring(j + 1);\n            }\n\n            String db = context.getWikiId();\n\n            try {\n                // Set the context database to the specified wiki, if any\n                if (virtualXwikiName != null) {\n                    context.setWikiId(virtualXwikiName);\n                }\n                // Check in the current database first\n                try {\n                    String user = findUser(susername, context);\n                    if (user != null && checkPassword(user, password, context)) {\n                        return new SimplePrincipal(virtualXwikiName != null ? context.getWikiId() + \":\" + user : user);\n                    }\n                } catch (Exception e) {\n                    // continue\n                }\n\n                if (!context.isMainWiki()) {\n                    // Then we check in the main database\n                    context.setWikiId(context.getMainXWiki());\n                    try {\n                        String user = findUser(susername, context);\n                        if (user != null && checkPassword(user, password, context)) {\n                            return new SimplePrincipal(context.getWikiId() + \":\" + user);\n                        }\n                    } catch (Exception e) {\n                        context.put(\"message\", \"loginfailed\");\n                        return null;\n                    }\n                }\n\n                // No user found\n                context.put(\"message\", \"invalidcredentials\");\n                return null;\n\n            } finally {\n                context.setWikiId(db);\n            }\n\n        } else {\n            LOGGER.error(\"XWikiContext is null\");\n\n            return null;\n        }\n    }", "signature": "Principal authenticate(String username, String password, XWikiContext context)", "full_signature": "@Override public Principal authenticate(String username, String password, XWikiContext context)", "class_method_signature": "XWikiAuthServiceImpl.authenticate(String username, String password, XWikiContext context)", "testcase": false, "constructor": false, "invocations": ["isBlank", "put", "isEmpty", "put", "replaceAll", "isSuperAdmin", "authenticateSuperAdmin", "indexOf", "indexOf", "substring", "substring", "substring", "getWikiId", "setWikiId", "findUser", "checkPassword", "getWikiId", "isMainWiki", "setWikiId", "getMainXWiki", "findUser", "checkPassword", "getWikiId", "put", "put", "setWikiId", "error"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}