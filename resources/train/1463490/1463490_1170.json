{"test_class": {"identifier": "PrefilteringLiveNotificationEmailDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMockComponents\n    private PrefilteringLiveNotificationEmailDispatcher dispatcher;", "modifier": "@InjectMockComponents\n    private", "type": "PrefilteringLiveNotificationEmailDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "@MockComponent\n    private SimilarityCalculator similarityCalculator;", "modifier": "@MockComponent\n    private", "type": "SimilarityCalculator", "declarator": "similarityCalculator", "var_name": "similarityCalculator"}, {"original_string": "@MockComponent\n    private PrefilteringLiveNotificationEmailSender sender;", "modifier": "@MockComponent\n    private", "type": "PrefilteringLiveNotificationEmailSender", "declarator": "sender", "var_name": "sender"}, {"original_string": "@MockComponent\n    private NotificationConfiguration notificationConfiguration;", "modifier": "@MockComponent\n    private", "type": "NotificationConfiguration", "declarator": "notificationConfiguration", "var_name": "notificationConfiguration"}, {"original_string": "@MockComponent\n    @Named(\"context\")\n    private ComponentManager componentManager;", "modifier": "@MockComponent\n    @Named(\"context\")\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-notifiers/xwiki-platform-notifications-notifiers-api/src/test/java/org/xwiki/notifications/notifiers/internal/email/live/PrefilteringLiveNotificationEmailDispatcherTest.java"}, "test_case": {"identifier": "addEvent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void addEvent() throws IllegalAccessException, InterruptedException, NotificationException\n    {\n        // Force a very short grace period so that the test does not take 1 minute\n        FieldUtils.writeField(this.dispatcher, \"grace\", 100, true);\n\n        //////\n        // One event\n\n        DocumentReference userReference = new DocumentReference(\"wiki\", \"XWiki\", \"user\");\n        DefaultEvent event = new DefaultEvent();\n        event.setId(\"id\");\n        event.setDate(new Date());\n\n        this.dispatcher.addEvent(event, userReference);\n\n        // Give enough time to wait for the grace period and process the event\n        Thread.sleep(400);\n\n        Map<DocumentReference, CompositeEvent> events = new HashMap<>();\n        events.put(userReference, new CompositeEvent(event));\n\n        verify(this.sender).sendMails(events);\n\n        //////\n        // One event with two users\n\n        DocumentReference user2Reference = new DocumentReference(\"wiki\", \"XWiki\", \"user2\");\n        DefaultEvent sameevent = new DefaultEvent();\n        sameevent.setId(\"id\");\n        sameevent.setDate(new Date());\n        event.setDate(new Date());\n\n        this.dispatcher.addEvent(event, userReference);\n        this.dispatcher.addEvent(sameevent, user2Reference);\n\n        // Give enough time to wait for the grace period and process the event\n        Thread.sleep(400);\n\n        events = new HashMap<>();\n        events.put(userReference, new CompositeEvent(event));\n        events.put(user2Reference, new CompositeEvent(event));\n\n        verify(this.sender).sendMails(events);\n\n        //////\n        // Two similar events\n\n        DefaultEvent similarevent = new DefaultEvent();\n        similarevent.setId(\"similar\");\n        similarevent.setDate(new Date());\n        DefaultEvent otherevent = new DefaultEvent();\n        otherevent.setId(\"other\");\n        otherevent.setDate(new Date());\n        event.setDate(new Date());\n\n        when(this.similarityCalculator.computeSimilarity(event, similarevent))\n            .thenReturn(SimilarityCalculator.SAME_DOCUMENT_AND_TYPE);\n\n        this.dispatcher.addEvent(event, userReference);\n        this.dispatcher.addEvent(similarevent, userReference);\n        this.dispatcher.addEvent(otherevent, userReference);\n\n        // Give enough time to wait for the grace period and process the event\n        Thread.sleep(400);\n\n        events = new HashMap<>();\n        CompositeEvent composite = new CompositeEvent(event);\n        composite.add(similarevent, SimilarityCalculator.SAME_DOCUMENT_AND_TYPE);\n        events.put(userReference, composite);\n        events.put(userReference, new CompositeEvent(otherevent));\n\n        verify(this.sender).sendMails(events);\n    }", "signature": "void addEvent()", "full_signature": "@Test void addEvent()", "class_method_signature": "PrefilteringLiveNotificationEmailDispatcherTest.addEvent()", "testcase": true, "constructor": false, "invocations": ["writeField", "setId", "setDate", "addEvent", "sleep", "put", "sendMails", "verify", "setId", "setDate", "setDate", "addEvent", "addEvent", "sleep", "put", "put", "sendMails", "verify", "setId", "setDate", "setId", "setDate", "setDate", "thenReturn", "when", "computeSimilarity", "addEvent", "addEvent", "addEvent", "sleep", "add", "put", "put", "sendMails", "verify"]}, "focal_class": {"identifier": "PrefilteringLiveNotificationEmailDispatcher", "superclass": "", "interfaces": "implements Initializable, Disposable", "fields": [{"original_string": "@Inject\n    private SimilarityCalculator similarityCalculator;", "modifier": "@Inject\n    private", "type": "SimilarityCalculator", "declarator": "similarityCalculator", "var_name": "similarityCalculator"}, {"original_string": "@Inject\n    private PrefilteringLiveNotificationEmailSender sender;", "modifier": "@Inject\n    private", "type": "PrefilteringLiveNotificationEmailSender", "declarator": "sender", "var_name": "sender"}, {"original_string": "@Inject\n    private NotificationConfiguration notificationConfiguration;", "modifier": "@Inject\n    private", "type": "NotificationConfiguration", "declarator": "notificationConfiguration", "var_name": "notificationConfiguration"}, {"original_string": "@Inject\n    @Named(\"context\")\n    private ComponentManager componentManager;", "modifier": "@Inject\n    @Named(\"context\")\n    private", "type": "ComponentManager", "declarator": "componentManager", "var_name": "componentManager"}, {"original_string": "private ScheduledExecutorService processingService;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "processingService", "var_name": "processingService"}, {"original_string": "private final BlockingQueue<QueueEntry> queue = new LinkedBlockingQueue<>();", "modifier": "private final", "type": "BlockingQueue<QueueEntry>", "declarator": "queue = new LinkedBlockingQueue<>()", "var_name": "queue"}, {"original_string": "private long grace;", "modifier": "private", "type": "long", "declarator": "grace", "var_name": "grace"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "PrefilteringLiveNotificationEmailDispatcher.initialize()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "PrefilteringLiveNotificationEmailDispatcher.dispose()", "testcase": false, "constructor": false}, {"identifier": "addEvent", "parameters": "(Event event, DocumentReference userDocumentReference)", "modifiers": "public", "return": "void", "signature": "void addEvent(Event event, DocumentReference userDocumentReference)", "full_signature": "public void addEvent(Event event, DocumentReference userDocumentReference)", "class_method_signature": "PrefilteringLiveNotificationEmailDispatcher.addEvent(Event event, DocumentReference userDocumentReference)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void dispatch()", "full_signature": "private void dispatch()", "class_method_signature": "PrefilteringLiveNotificationEmailDispatcher.dispatch()", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(QueueEntry entry, Map<DocumentReference, CompositeEvent> eventsToSend)", "modifiers": "private", "return": "void", "signature": "void prepare(QueueEntry entry, Map<DocumentReference, CompositeEvent> eventsToSend)", "full_signature": "private void prepare(QueueEntry entry, Map<DocumentReference, CompositeEvent> eventsToSend)", "class_method_signature": "PrefilteringLiveNotificationEmailDispatcher.prepare(QueueEntry entry, Map<DocumentReference, CompositeEvent> eventsToSend)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-notifiers/xwiki-platform-notifications-notifiers-api/src/main/java/org/xwiki/notifications/notifiers/internal/email/live/PrefilteringLiveNotificationEmailDispatcher.java"}, "focal_method": {"identifier": "addEvent", "parameters": "(Event event, DocumentReference userDocumentReference)", "modifiers": "public", "return": "void", "body": "public void addEvent(Event event, DocumentReference userDocumentReference)\n    {\n        // Optimize a bit the queue to group users associated with the same event\n        synchronized (this.queue) {\n            for (QueueEntry entry : this.queue) {\n                if (entry.event.getId().equals(event.getId())) {\n                    entry.entities.add(userDocumentReference);\n\n                    return;\n                }\n            }\n        }\n\n        QueueEntry entry = new QueueEntry(event, userDocumentReference);\n        this.queue.add(entry);\n\n        Instant instant = event.getDate().toInstant().plusMillis(this.grace);\n        Duration duration = Duration.between(Instant.now(), instant);\n\n        this.processingService.schedule(new ExecutionContextRunnable(this::dispatch, this.componentManager),\n            duration.getSeconds(), TimeUnit.SECONDS);\n    }", "signature": "void addEvent(Event event, DocumentReference userDocumentReference)", "full_signature": "public void addEvent(Event event, DocumentReference userDocumentReference)", "class_method_signature": "PrefilteringLiveNotificationEmailDispatcher.addEvent(Event event, DocumentReference userDocumentReference)", "testcase": false, "constructor": false, "invocations": ["equals", "getId", "getId", "add", "add", "plusMillis", "toInstant", "getDate", "between", "now", "schedule", "getSeconds"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}