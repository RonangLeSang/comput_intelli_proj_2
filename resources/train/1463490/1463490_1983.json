{"test_class": {"identifier": "CommentEventGeneratorListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public MockitoComponentMockingRule<CommentEventGeneratorListener> mocker =\n        new MockitoComponentMockingRule<CommentEventGeneratorListener>(CommentEventGeneratorListener.class);", "modifier": "public", "type": "MockitoComponentMockingRule<CommentEventGeneratorListener>", "declarator": "mocker =\n        new MockitoComponentMockingRule<CommentEventGeneratorListener>(CommentEventGeneratorListener.class)", "var_name": "mocker"}, {"original_string": "@Rule\n    public MockitoOldcoreRule oldcore = new MockitoOldcoreRule(mocker);", "modifier": "@Rule\n    public", "type": "MockitoOldcoreRule", "declarator": "oldcore = new MockitoOldcoreRule(mocker)", "var_name": "oldcore"}, {"original_string": "private ObservationManager mockObservation;", "modifier": "private", "type": "ObservationManager", "declarator": "mockObservation", "var_name": "mockObservation"}, {"original_string": "private XWikiDocument commentXClassDocument;", "modifier": "private", "type": "XWikiDocument", "declarator": "commentXClassDocument", "var_name": "commentXClassDocument"}, {"original_string": "private BaseClass commentXClass;", "modifier": "private", "type": "BaseClass", "declarator": "commentXClass", "var_name": "commentXClass"}, {"original_string": "private BaseObject commentXObject;", "modifier": "private", "type": "BaseObject", "declarator": "commentXObject", "var_name": "commentXObject"}, {"original_string": "private XWikiDocument document;", "modifier": "private", "type": "XWikiDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private XWikiDocument documentOrigin;", "modifier": "private", "type": "XWikiDocument", "declarator": "documentOrigin", "var_name": "documentOrigin"}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/internal/event/CommentEventGeneratorListenerTest.java"}, "test_case": {"identifier": "testModifiedComment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testModifiedComment() throws ComponentLookupException\n    {\n        this.document.addXObject(this.commentXObject);\n        this.documentOrigin.addXObject(this.commentXObject.clone());\n\n        this.commentXObject.setStringValue(\"comment\", \"comment\");\n\n        final Event event = new CommentUpdatedEvent(\"wiki:space.page\", \"0\");\n\n        this.mocker.getComponentUnderTest().onEvent(new XObjectUpdatedEvent(this.commentXObject.getReference()),\n            this.document, this.oldcore.getXWikiContext());\n\n        // Make sure the listener generated a comment updated event\n        verify(this.mockObservation)\n            .notify(any(event.getClass()), same(document), same(this.oldcore.getXWikiContext()));\n    }", "signature": "void testModifiedComment()", "full_signature": "@Test public void testModifiedComment()", "class_method_signature": "CommentEventGeneratorListenerTest.testModifiedComment()", "testcase": true, "constructor": false, "invocations": ["addXObject", "addXObject", "clone", "setStringValue", "onEvent", "getComponentUnderTest", "getReference", "getXWikiContext", "notify", "verify", "any", "getClass", "same", "same", "getXWikiContext"]}, "focal_class": {"identifier": "CommentEventGeneratorListener", "superclass": "extends AbstractEventListener", "interfaces": "", "fields": [{"original_string": "private static final RegexEntityReference COMMENTCLASS_REFERENCE =\n        XWikiCommentsDocumentInitializer.OBJECT_REFERENCE;", "modifier": "private static final", "type": "RegexEntityReference", "declarator": "COMMENTCLASS_REFERENCE =\n        XWikiCommentsDocumentInitializer.OBJECT_REFERENCE", "var_name": "COMMENTCLASS_REFERENCE"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "defaultEntityReferenceSerializer", "var_name": "defaultEntityReferenceSerializer"}, {"original_string": "@Inject\n    private ObservationManager observation;", "modifier": "@Inject\n    private", "type": "ObservationManager", "declarator": "observation", "var_name": "observation"}], "methods": [{"identifier": "CommentEventGeneratorListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " CommentEventGeneratorListener()", "full_signature": "public  CommentEventGeneratorListener()", "class_method_signature": "CommentEventGeneratorListener.CommentEventGeneratorListener()", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "CommentEventGeneratorListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/internal/event/CommentEventGeneratorListener.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(Event event, Object source, Object data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onEvent(Event event, Object source, Object data)\n    {\n        XWikiDocument doc = (XWikiDocument) source;\n        XWikiDocument originalDoc = doc.getOriginalDocument();\n        XWikiContext context = (XWikiContext) data;\n\n        XObjectEvent objectEvent = (XObjectEvent) event;\n\n        String reference = this.defaultEntityReferenceSerializer.serialize(doc.getDocumentReference());\n\n        if (event instanceof XObjectDeletedEvent) {\n            BaseObject obj = originalDoc.getXObject((ObjectReference) objectEvent.getReference());\n            String number = String.valueOf(obj.getNumber());\n            this.observation.notify(new CommentDeletedEvent(reference, number), source, context);\n        } else {\n            BaseObject obj = doc.getXObject((ObjectReference) objectEvent.getReference());\n            String number = String.valueOf(obj.getNumber());\n            if (event instanceof XObjectAddedEvent) {\n                this.observation.notify(new CommentAddedEvent(reference, number), source, context);\n            } else {\n                this.observation.notify(new CommentUpdatedEvent(reference, number), source, context);\n            }\n        }\n    }", "signature": "void onEvent(Event event, Object source, Object data)", "full_signature": "@Override public void onEvent(Event event, Object source, Object data)", "class_method_signature": "CommentEventGeneratorListener.onEvent(Event event, Object source, Object data)", "testcase": false, "constructor": false, "invocations": ["getOriginalDocument", "serialize", "getDocumentReference", "getXObject", "getReference", "valueOf", "getNumber", "notify", "getXObject", "getReference", "valueOf", "getNumber", "notify", "notify"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}