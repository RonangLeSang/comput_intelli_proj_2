{"test_class": {"identifier": "DefaultWikiMacroManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<DefaultWikiMacroManager> mocker =\n        new MockitoComponentMockingRule<>(DefaultWikiMacroManager.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<DefaultWikiMacroManager>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(DefaultWikiMacroManager.class)", "var_name": "mocker"}, {"original_string": "private DocumentReference authorReference =\n        new DocumentReference(\"authorwiki\", Arrays.asList(\"authorspace\"), \"authorpage\");", "modifier": "private", "type": "DocumentReference", "declarator": "authorReference =\n        new DocumentReference(\"authorwiki\", Arrays.asList(\"authorspace\"), \"authorpage\")", "var_name": "authorReference"}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-wikimacro/xwiki-platform-rendering-wikimacro-api/src/test/java/org/xwiki/rendering/internal/macro/wikibridge/DefaultWikiMacroManagerTest.java"}, "test_case": {"identifier": "registerWikiMacroWhenWikiVisibilityAndNotAllowed", "parameters": "()", "modifiers": "@Test(expected = InsufficientPrivilegesException.class) public", "return": "void", "body": "@Test(expected = InsufficientPrivilegesException.class)\n    public void registerWikiMacroWhenWikiVisibilityAndNotAllowed() throws Exception\n    {\n        WikiMacro wikiMacro = generateWikiMacro(WikiMacroVisibility.WIKI);\n\n        // Simulate a user who's not allowed for the WIKI visibility\n        WikiMacroFactory wikiMacroFactory = this.mocker.getInstance(WikiMacroFactory.class);\n        when(wikiMacroFactory.isAllowed(wikiMacro.getDocumentReference(), WikiMacroVisibility.WIKI)).thenReturn(false);\n\n        this.mocker.getComponentUnderTest().registerWikiMacro(wikiMacro.getDocumentReference(), wikiMacro);\n    }", "signature": "void registerWikiMacroWhenWikiVisibilityAndNotAllowed()", "full_signature": "@Test(expected = InsufficientPrivilegesException.class) public void registerWikiMacroWhenWikiVisibilityAndNotAllowed()", "class_method_signature": "DefaultWikiMacroManagerTest.registerWikiMacroWhenWikiVisibilityAndNotAllowed()", "testcase": true, "constructor": false, "invocations": ["generateWikiMacro", "getInstance", "thenReturn", "when", "isAllowed", "getDocumentReference", "registerWikiMacro", "getComponentUnderTest", "getDocumentReference"]}, "focal_class": {"identifier": "DefaultWikiMacroManager", "superclass": "", "interfaces": "implements WikiMacroManager", "fields": [{"original_string": "@Inject\n    private ComponentManager rootComponentManager;", "modifier": "@Inject\n    private", "type": "ComponentManager", "declarator": "rootComponentManager", "var_name": "rootComponentManager"}, {"original_string": "@Inject\n    private DocumentAccessBridge bridge;", "modifier": "@Inject\n    private", "type": "DocumentAccessBridge", "declarator": "bridge", "var_name": "bridge"}, {"original_string": "@Inject\n    private ModelContext modelContext;", "modifier": "@Inject\n    private", "type": "ModelContext", "declarator": "modelContext", "var_name": "modelContext"}, {"original_string": "@Inject\n    private WikiMacroFactory wikiMacroFactory;", "modifier": "@Inject\n    private", "type": "WikiMacroFactory", "declarator": "wikiMacroFactory", "var_name": "wikiMacroFactory"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> serializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "@Inject\n    private WikiDescriptorManager wikis;", "modifier": "@Inject\n    private", "type": "WikiDescriptorManager", "declarator": "wikis", "var_name": "wikis"}, {"original_string": "private Map<DocumentReference, WikiMacroData> wikiMacroMap = new HashMap<>();", "modifier": "private", "type": "Map<DocumentReference, WikiMacroData>", "declarator": "wikiMacroMap = new HashMap<>()", "var_name": "wikiMacroMap"}], "methods": [{"identifier": "hasWikiMacro", "parameters": "(DocumentReference documentReference)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasWikiMacro(DocumentReference documentReference)", "full_signature": "@Override public boolean hasWikiMacro(DocumentReference documentReference)", "class_method_signature": "DefaultWikiMacroManager.hasWikiMacro(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "registerWikiMacro", "parameters": "(DocumentReference documentReference, WikiMacro wikiMacro)", "modifiers": "@Override public", "return": "void", "signature": "void registerWikiMacro(DocumentReference documentReference, WikiMacro wikiMacro)", "full_signature": "@Override public void registerWikiMacro(DocumentReference documentReference, WikiMacro wikiMacro)", "class_method_signature": "DefaultWikiMacroManager.registerWikiMacro(DocumentReference documentReference, WikiMacro wikiMacro)", "testcase": false, "constructor": false}, {"identifier": "unregisterWikiMacro", "parameters": "(DocumentReference documentReference)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterWikiMacro(DocumentReference documentReference)", "full_signature": "@Override public void unregisterWikiMacro(DocumentReference documentReference)", "class_method_signature": "DefaultWikiMacroManager.unregisterWikiMacro(DocumentReference documentReference)", "testcase": false, "constructor": false}, {"identifier": "isRegistered", "parameters": "(WikiMacroData macroData, ComponentManager componentManager)", "modifiers": "private", "return": "boolean", "signature": "boolean isRegistered(WikiMacroData macroData, ComponentManager componentManager)", "full_signature": "private boolean isRegistered(WikiMacroData macroData, ComponentManager componentManager)", "class_method_signature": "DefaultWikiMacroManager.isRegistered(WikiMacroData macroData, ComponentManager componentManager)", "testcase": false, "constructor": false}, {"identifier": "findComponentManager", "parameters": "(WikiMacroVisibility visibility)", "modifiers": "private", "return": "ComponentManager", "signature": "ComponentManager findComponentManager(WikiMacroVisibility visibility)", "full_signature": "private ComponentManager findComponentManager(WikiMacroVisibility visibility)", "class_method_signature": "DefaultWikiMacroManager.findComponentManager(WikiMacroVisibility visibility)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-wikimacro/xwiki-platform-rendering-wikimacro-api/src/main/java/org/xwiki/rendering/internal/macro/wikibridge/DefaultWikiMacroManager.java"}, "focal_method": {"identifier": "registerWikiMacro", "parameters": "(DocumentReference documentReference, WikiMacro wikiMacro)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void registerWikiMacro(DocumentReference documentReference, WikiMacro wikiMacro)\n        throws InsufficientPrivilegesException, WikiMacroException\n    {\n        WikiMacroDescriptor macroDescriptor = (WikiMacroDescriptor) wikiMacro.getDescriptor();\n\n        WikiMacroVisibility visibility = macroDescriptor.getVisibility();\n\n        // GLOBAL means WIKI on subwikis (only macro stored on main wiki are allowed to affect the whole farm)\n        if (visibility == WikiMacroVisibility.GLOBAL\n            && !this.wikis.isMainWiki(documentReference.getWikiReference().getName())) {\n            visibility = WikiMacroVisibility.WIKI;\n        }\n\n        // Verify that the user has the right to register this wiki macro the chosen visibility\n        if (this.wikiMacroFactory.isAllowed(documentReference, visibility)) {\n            DefaultComponentDescriptor<Macro> componentDescriptor = new DefaultComponentDescriptor<>();\n            componentDescriptor.setRoleType(Macro.class);\n            componentDescriptor.setRoleHint(wikiMacro.getDescriptor().getId().getId());\n\n            // Save current context informations\n            String currentUser = this.bridge.getCurrentUser();\n            EntityReference currentEntityReference = this.modelContext.getCurrentEntityReference();\n            try {\n                // Put the proper context information to let components manager use the proper keys to find\n                // components to unregister\n                this.bridge.setCurrentUser(this.serializer.serialize(wikiMacro.getAuthorReference() != null\n                    ? wikiMacro.getAuthorReference() : this.bridge.getCurrentUserReference()));\n                this.modelContext.setCurrentEntityReference(documentReference);\n\n                // Register the macro against the right Component Manager, depending on the defined macro visibility.\n                findComponentManager(visibility).registerComponent(componentDescriptor, wikiMacro);\n                this.wikiMacroMap.put(documentReference,\n                    new WikiMacroData(componentDescriptor.getRoleHint(), wikiMacro));\n            } catch (Exception e) {\n                throw new WikiMacroException(String.format(\"Failed to register macro [%s] in [%s] for visibility [%s]\",\n                    wikiMacro.getDescriptor().getId().getId(), documentReference, visibility), e);\n            } finally {\n                // Restore previous context informations\n                this.bridge.setCurrentUser(currentUser);\n                this.modelContext.setCurrentEntityReference(currentEntityReference);\n            }\n        } else {\n            throw new InsufficientPrivilegesException(String.format(\n                \"Unable to register macro [%s] in [%s] for visibility [%s] due to insufficient privileges\",\n                wikiMacro.getDescriptor().getId().getId(), documentReference, macroDescriptor.getVisibility()));\n        }\n    }", "signature": "void registerWikiMacro(DocumentReference documentReference, WikiMacro wikiMacro)", "full_signature": "@Override public void registerWikiMacro(DocumentReference documentReference, WikiMacro wikiMacro)", "class_method_signature": "DefaultWikiMacroManager.registerWikiMacro(DocumentReference documentReference, WikiMacro wikiMacro)", "testcase": false, "constructor": false, "invocations": ["getDescriptor", "getVisibility", "isMainWiki", "getName", "getWikiReference", "isAllowed", "setRoleType", "setRoleHint", "getId", "getId", "getDescriptor", "getCurrentUser", "getCurrentEntityReference", "setCurrentUser", "serialize", "getAuthorReference", "getAuthorReference", "getCurrentUserReference", "setCurrentEntityReference", "registerComponent", "findComponentManager", "put", "getRoleHint", "format", "getId", "getId", "getDescriptor", "setCurrentUser", "setCurrentEntityReference", "format", "getId", "getId", "getDescriptor", "getVisibility"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}