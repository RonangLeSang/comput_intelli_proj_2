{"test_class": {"identifier": "BatikSVGRasterizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VALID_SVG =\n        \"<svg xmlns='http://www.w3.org/2000/svg'><ellipse cx='50' cy='100' rx='25' ry='50'/></svg>\";", "modifier": "private static final", "type": "String", "declarator": "VALID_SVG =\n        \"<svg xmlns='http://www.w3.org/2000/svg'><ellipse cx='50' cy='100' rx='25' ry='50'/></svg>\"", "var_name": "VALID_SVG"}, {"original_string": "private static final String INVALID_SVG = \"<bad>svg!\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_SVG = \"<bad>svg!\"", "var_name": "INVALID_SVG"}, {"original_string": "private static final String RASTER_FILE_NAME = Math.abs(VALID_SVG.hashCode()) + \".png\";", "modifier": "private static final", "type": "String", "declarator": "RASTER_FILE_NAME = Math.abs(VALID_SVG.hashCode()) + \".png\"", "var_name": "RASTER_FILE_NAME"}, {"original_string": "@Rule\n    public final MockitoComponentMockingRule<SVGRasterizer> mocker =\n        new MockitoComponentMockingRule<SVGRasterizer>(BatikSVGRasterizer.class);", "modifier": "@Rule\n    public final", "type": "MockitoComponentMockingRule<SVGRasterizer>", "declarator": "mocker =\n        new MockitoComponentMockingRule<SVGRasterizer>(BatikSVGRasterizer.class)", "var_name": "mocker"}, {"original_string": "@Rule\n    public final TemporaryFolder baseDirectory = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "baseDirectory = new TemporaryFolder()", "var_name": "baseDirectory"}, {"original_string": "private DocumentReference dref = new DocumentReference(\"wiki\", \"Space\", \"Document\");", "modifier": "private", "type": "DocumentReference", "declarator": "dref = new DocumentReference(\"wiki\", \"Space\", \"Document\")", "var_name": "dref"}, {"original_string": "private TemporaryResourceStore temporaryResourceStore;", "modifier": "private", "type": "TemporaryResourceStore", "declarator": "temporaryResourceStore", "var_name": "temporaryResourceStore"}, {"original_string": "private DocumentReferenceResolver<String> resolver;", "modifier": "private", "type": "DocumentReferenceResolver<String>", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private Container container;", "modifier": "private", "type": "Container", "declarator": "container", "var_name": "container"}, {"original_string": "@Mock\n    private ServletResponse sresponse;", "modifier": "@Mock\n    private", "type": "ServletResponse", "declarator": "sresponse", "var_name": "sresponse"}, {"original_string": "@Mock\n    private HttpServletResponse hsresponse;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "hsresponse", "var_name": "hsresponse"}, {"original_string": "private File rasterFile;", "modifier": "private", "type": "File", "declarator": "rasterFile", "var_name": "rasterFile"}, {"original_string": "private File temporaryFile;", "modifier": "private", "type": "File", "declarator": "temporaryFile", "var_name": "temporaryFile"}, {"original_string": "private String temporaryFilePath;", "modifier": "private", "type": "String", "declarator": "temporaryFilePath", "var_name": "temporaryFilePath"}], "file": "xwiki-platform-core/xwiki-platform-svg/xwiki-platform-svg-rasterizer/src/test/java/org/xwiki/platform/svg/internal/BatikSVGRasterizerTest.java"}, "test_case": {"identifier": "rasterizeToTemporaryFileReturnsNullOnExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rasterizeToTemporaryFileReturnsNullOnExceptions() throws Exception\n    {\n        File tfile = this.mocker.getComponentUnderTest().rasterizeToTemporaryFile(INVALID_SVG, 0, 0);\n        Assert.assertNull(tfile);\n    }", "signature": "void rasterizeToTemporaryFileReturnsNullOnExceptions()", "full_signature": "@Test public void rasterizeToTemporaryFileReturnsNullOnExceptions()", "class_method_signature": "BatikSVGRasterizerTest.rasterizeToTemporaryFileReturnsNullOnExceptions()", "testcase": true, "constructor": false, "invocations": ["rasterizeToTemporaryFile", "getComponentUnderTest", "assertNull"]}, "focal_class": {"identifier": "BatikSVGRasterizer", "superclass": "", "interfaces": "implements SVGRasterizer", "fields": [{"original_string": "private static final String TEMP_DIR_NAME = \"svg\";", "modifier": "private static final", "type": "String", "declarator": "TEMP_DIR_NAME = \"svg\"", "var_name": "TEMP_DIR_NAME"}, {"original_string": "private static final String RASTER_FILE_EXTENSION = \".png\";", "modifier": "private static final", "type": "String", "declarator": "RASTER_FILE_EXTENSION = \".png\"", "var_name": "RASTER_FILE_EXTENSION"}, {"original_string": "@Inject\n    private Logger logger;", "modifier": "@Inject\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Inject\n    private TemporaryResourceStore temporaryResourceStore;", "modifier": "@Inject\n    private", "type": "TemporaryResourceStore", "declarator": "temporaryResourceStore", "var_name": "temporaryResourceStore"}, {"original_string": "@Inject\n    @Named(\"current\")\n    private DocumentReferenceResolver<String> currentDocumentResolver;", "modifier": "@Inject\n    @Named(\"current\")\n    private", "type": "DocumentReferenceResolver<String>", "declarator": "currentDocumentResolver", "var_name": "currentDocumentResolver"}, {"original_string": "@Inject\n    private Container container;", "modifier": "@Inject\n    private", "type": "Container", "declarator": "container", "var_name": "container"}], "methods": [{"identifier": "rasterizeToTemporaryFile", "parameters": "(String content, int width, int height)", "modifiers": "@Override public", "return": "File", "signature": "File rasterizeToTemporaryFile(String content, int width, int height)", "full_signature": "@Override public File rasterizeToTemporaryFile(String content, int width, int height)", "class_method_signature": "BatikSVGRasterizer.rasterizeToTemporaryFile(String content, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "rasterizeToTemporaryResource", "parameters": "(String content, int width, int height)", "modifiers": "@Override public", "return": "TemporaryResourceReference", "signature": "TemporaryResourceReference rasterizeToTemporaryResource(String content, int width, int height)", "full_signature": "@Override public TemporaryResourceReference rasterizeToTemporaryResource(String content, int width, int height)", "class_method_signature": "BatikSVGRasterizer.rasterizeToTemporaryResource(String content, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "rasterizeToTemporaryResource", "parameters": "(String content, int width, int height,\n        DocumentReference targetContext)", "modifiers": "@Override public", "return": "TemporaryResourceReference", "signature": "TemporaryResourceReference rasterizeToTemporaryResource(String content, int width, int height,\n        DocumentReference targetContext)", "full_signature": "@Override public TemporaryResourceReference rasterizeToTemporaryResource(String content, int width, int height,\n        DocumentReference targetContext)", "class_method_signature": "BatikSVGRasterizer.rasterizeToTemporaryResource(String content, int width, int height,\n        DocumentReference targetContext)", "testcase": false, "constructor": false}, {"identifier": "rasterizeToResponse", "parameters": "(String content, int width, int height)", "modifiers": "@Override public", "return": "void", "signature": "void rasterizeToResponse(String content, int width, int height)", "full_signature": "@Override public void rasterizeToResponse(String content, int width, int height)", "class_method_signature": "BatikSVGRasterizer.rasterizeToResponse(String content, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "rasterizeToFile", "parameters": "(String content, File out, int width, int height)", "modifiers": "private", "return": "boolean", "signature": "boolean rasterizeToFile(String content, File out, int width, int height)", "full_signature": "private boolean rasterizeToFile(String content, File out, int width, int height)", "class_method_signature": "BatikSVGRasterizer.rasterizeToFile(String content, File out, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "rasterize", "parameters": "(TranscoderInput input, TranscoderOutput output, int width, int height)", "modifiers": "private", "return": "boolean", "signature": "boolean rasterize(TranscoderInput input, TranscoderOutput output, int width, int height)", "full_signature": "private boolean rasterize(TranscoderInput input, TranscoderOutput output, int width, int height)", "class_method_signature": "BatikSVGRasterizer.rasterize(TranscoderInput input, TranscoderOutput output, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "getTemporaryFileName", "parameters": "(String content, int width, int height)", "modifiers": "private", "return": "String", "signature": "String getTemporaryFileName(String content, int width, int height)", "full_signature": "private String getTemporaryFileName(String content, int width, int height)", "class_method_signature": "BatikSVGRasterizer.getTemporaryFileName(String content, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "getCurrentDocument", "parameters": "()", "modifiers": "private", "return": "DocumentReference", "signature": "DocumentReference getCurrentDocument()", "full_signature": "private DocumentReference getCurrentDocument()", "class_method_signature": "BatikSVGRasterizer.getCurrentDocument()", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-svg/xwiki-platform-svg-rasterizer/src/main/java/org/xwiki/platform/svg/internal/BatikSVGRasterizer.java"}, "focal_method": {"identifier": "rasterizeToTemporaryFile", "parameters": "(String content, int width, int height)", "modifiers": "@Override public", "return": "File", "body": "@Override\n    public File rasterizeToTemporaryFile(String content, int width, int height) throws IOException\n    {\n        String fileName = getTemporaryFileName(content, width, height);\n        TemporaryResourceReference reference = new TemporaryResourceReference(TEMP_DIR_NAME, fileName, null);\n        File out = this.temporaryResourceStore.getTemporaryFile(reference);\n        if (rasterizeToFile(content, out, width, height)) {\n            return out;\n        }\n        return null;\n    }", "signature": "File rasterizeToTemporaryFile(String content, int width, int height)", "full_signature": "@Override public File rasterizeToTemporaryFile(String content, int width, int height)", "class_method_signature": "BatikSVGRasterizer.rasterizeToTemporaryFile(String content, int width, int height)", "testcase": false, "constructor": false, "invocations": ["getTemporaryFileName", "getTemporaryFile", "rasterizeToFile"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}