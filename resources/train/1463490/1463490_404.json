{"test_class": {"identifier": "OfficeAttachmentImporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoComponentMockingRule<AttachmentImporter> mocker =\n        new MockitoComponentMockingRule<>(OfficeAttachmentImporter.class);", "modifier": "@Rule\n    public", "type": "MockitoComponentMockingRule<AttachmentImporter>", "declarator": "mocker =\n        new MockitoComponentMockingRule<>(OfficeAttachmentImporter.class)", "var_name": "mocker"}, {"original_string": "private AttachmentReference attachmentReference =\n        new AttachmentReference(\"my.doc\", new DocumentReference(\"wiki\", \"Some\", \"Page\"));", "modifier": "private", "type": "AttachmentReference", "declarator": "attachmentReference =\n        new AttachmentReference(\"my.doc\", new DocumentReference(\"wiki\", \"Some\", \"Page\"))", "var_name": "attachmentReference"}, {"original_string": "private ContextualAuthorizationManager authorization;", "modifier": "private", "type": "ContextualAuthorizationManager", "declarator": "authorization", "var_name": "authorization"}, {"original_string": "private EntityReferenceSerializer<String> entityReferenceSerializer;", "modifier": "private", "type": "EntityReferenceSerializer<String>", "declarator": "entityReferenceSerializer", "var_name": "entityReferenceSerializer"}, {"original_string": "private DocumentAccessBridge documentAccessBridge;", "modifier": "private", "type": "DocumentAccessBridge", "declarator": "documentAccessBridge", "var_name": "documentAccessBridge"}, {"original_string": "private OfficeServer officeServer;", "modifier": "private", "type": "OfficeServer", "declarator": "officeServer", "var_name": "officeServer"}], "file": "xwiki-platform-core/xwiki-platform-wysiwyg/xwiki-platform-wysiwyg-api/src/test/java/org/xwiki/wysiwyg/internal/importer/OfficeAttachmentImporterTest.java"}, "test_case": {"identifier": "toHTML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toHTML() throws Exception\n    {\n        when(this.authorization.hasAccess(Right.EDIT, attachmentReference)).thenReturn(true);\n        when(this.documentAccessBridge.getAttachmentVersion(attachmentReference)).thenReturn(\"1.3\");\n        when(this.officeServer.getState()).thenReturn(ServerState.CONNECTED);\n\n        InputStream attachmentContent = mock(InputStream.class);\n        when(this.documentAccessBridge.getAttachmentContent(attachmentReference)).thenReturn(attachmentContent);\n\n        XDOMOfficeDocumentBuilder documentBuilder = this.mocker.getInstance(XDOMOfficeDocumentBuilder.class);\n        XDOMOfficeDocument xdomOfficeDocument = mock(XDOMOfficeDocument.class);\n        when(documentBuilder.build(attachmentContent, \"my.doc\", attachmentReference.getDocumentReference(), true))\n            .thenReturn(xdomOfficeDocument);\n        when(xdomOfficeDocument.getArtifacts()).thenReturn(Collections.emptyMap());\n        when(xdomOfficeDocument.getContentAsString(\"annotatedxhtml/1.0\")).thenReturn(\"test\");\n\n        Map<String, Object> parameters = Collections.singletonMap(\"filterStyles\", \"true\");\n        assertEquals(\"test\", this.mocker.getComponentUnderTest().toHTML(attachmentReference, parameters));\n    }", "signature": "void toHTML()", "full_signature": "@Test public void toHTML()", "class_method_signature": "OfficeAttachmentImporterTest.toHTML()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "hasAccess", "thenReturn", "when", "getAttachmentVersion", "thenReturn", "when", "getState", "mock", "thenReturn", "when", "getAttachmentContent", "getInstance", "mock", "thenReturn", "when", "build", "getDocumentReference", "thenReturn", "when", "getArtifacts", "emptyMap", "thenReturn", "when", "getContentAsString", "singletonMap", "assertEquals", "toHTML", "getComponentUnderTest"]}, "focal_class": {"identifier": "OfficeAttachmentImporter", "superclass": "", "interfaces": "implements AttachmentImporter", "fields": [{"original_string": "@Inject\n    private DocumentAccessBridge documentAccessBridge;", "modifier": "@Inject\n    private", "type": "DocumentAccessBridge", "declarator": "documentAccessBridge", "var_name": "documentAccessBridge"}, {"original_string": "@Inject\n    private PresentationBuilder presentationBuilder;", "modifier": "@Inject\n    private", "type": "PresentationBuilder", "declarator": "presentationBuilder", "var_name": "presentationBuilder"}, {"original_string": "@Inject\n    private XDOMOfficeDocumentBuilder documentBuilder;", "modifier": "@Inject\n    private", "type": "XDOMOfficeDocumentBuilder", "declarator": "documentBuilder", "var_name": "documentBuilder"}, {"original_string": "@Inject\n    private OfficeServer officeServer;", "modifier": "@Inject\n    private", "type": "OfficeServer", "declarator": "officeServer", "var_name": "officeServer"}, {"original_string": "@Inject\n    private OfficeMacroImporter officeMacroImporter;", "modifier": "@Inject\n    private", "type": "OfficeMacroImporter", "declarator": "officeMacroImporter", "var_name": "officeMacroImporter"}, {"original_string": "@Inject\n    private ContextualAuthorizationManager authorization;", "modifier": "@Inject\n    private", "type": "ContextualAuthorizationManager", "declarator": "authorization", "var_name": "authorization"}, {"original_string": "@Inject\n    private EntityReferenceSerializer<String> entityReferenceSerializer;", "modifier": "@Inject\n    private", "type": "EntityReferenceSerializer<String>", "declarator": "entityReferenceSerializer", "var_name": "entityReferenceSerializer"}], "methods": [{"identifier": "toHTML", "parameters": "(AttachmentReference attachmentReference, Map<String, Object> parameters)", "modifiers": "@Override public", "return": "String", "signature": "String toHTML(AttachmentReference attachmentReference, Map<String, Object> parameters)", "full_signature": "@Override public String toHTML(AttachmentReference attachmentReference, Map<String, Object> parameters)", "class_method_signature": "OfficeAttachmentImporter.toHTML(AttachmentReference attachmentReference, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "maybeConvertAttachmentContent", "parameters": "(AttachmentReference attachmentReference, boolean filterStyles)", "modifiers": "private", "return": "String", "signature": "String maybeConvertAttachmentContent(AttachmentReference attachmentReference, boolean filterStyles)", "full_signature": "private String maybeConvertAttachmentContent(AttachmentReference attachmentReference, boolean filterStyles)", "class_method_signature": "OfficeAttachmentImporter.maybeConvertAttachmentContent(AttachmentReference attachmentReference, boolean filterStyles)", "testcase": false, "constructor": false}, {"identifier": "convertAttachmentContent", "parameters": "(AttachmentReference attachmentReference, boolean filterStyles)", "modifiers": "private", "return": "String", "signature": "String convertAttachmentContent(AttachmentReference attachmentReference, boolean filterStyles)", "full_signature": "private String convertAttachmentContent(AttachmentReference attachmentReference, boolean filterStyles)", "class_method_signature": "OfficeAttachmentImporter.convertAttachmentContent(AttachmentReference attachmentReference, boolean filterStyles)", "testcase": false, "constructor": false}, {"identifier": "isPresentation", "parameters": "(String fileName)", "modifiers": "private", "return": "boolean", "signature": "boolean isPresentation(String fileName)", "full_signature": "private boolean isPresentation(String fileName)", "class_method_signature": "OfficeAttachmentImporter.isPresentation(String fileName)", "testcase": false, "constructor": false}], "file": "xwiki-platform-core/xwiki-platform-wysiwyg/xwiki-platform-wysiwyg-api/src/main/java/org/xwiki/wysiwyg/internal/importer/OfficeAttachmentImporter.java"}, "focal_method": {"identifier": "toHTML", "parameters": "(AttachmentReference attachmentReference, Map<String, Object> parameters)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toHTML(AttachmentReference attachmentReference, Map<String, Object> parameters) throws Exception\n    {\n        boolean filterStyles = Boolean.valueOf(String.valueOf(parameters.get(\"filterStyles\")));\n        if (Boolean.valueOf(String.valueOf(parameters.get(\"useOfficeViewer\")))) {\n            return this.officeMacroImporter\n                .render(this.officeMacroImporter.buildXDOM(attachmentReference, filterStyles));\n        } else {\n            return maybeConvertAttachmentContent(attachmentReference, filterStyles);\n        }\n    }", "signature": "String toHTML(AttachmentReference attachmentReference, Map<String, Object> parameters)", "full_signature": "@Override public String toHTML(AttachmentReference attachmentReference, Map<String, Object> parameters)", "class_method_signature": "OfficeAttachmentImporter.toHTML(AttachmentReference attachmentReference, Map<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["valueOf", "valueOf", "get", "valueOf", "valueOf", "get", "render", "buildXDOM", "maybeConvertAttachmentContent"]}, "repository": {"repo_id": 1463490, "url": "https://github.com/xwiki/xwiki-platform", "stars": 495, "created": "3/10/2011 1:26:41 PM +00:00", "updates": "2020-01-27T14:12:16+00:00", "fork": "False", "license": "licensed"}}