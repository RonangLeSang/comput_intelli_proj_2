{"test_class": {"identifier": "LongestPathLayererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LongestPathLayerer layerer;", "modifier": "private", "type": "LongestPathLayerer", "declarator": "layerer", "var_name": "layerer"}], "file": "GraphLayout/src/test/java/net/sf/anathema/graph/layering/LongestPathLayererTest.java"}, "test_case": {"identifier": "testLayerSingleChild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLayerSingleChild() throws Exception {\n    IRegularNode leaf = NodeFactory.createChildlessNode(\"leaf\");\n    IRegularNode root = new IdentifiedRegularNode(\"root\", leaf);\n    IRegularNode[] acyclicGraph = new IRegularNode[]{leaf, root};\n    int deepestLayer = layerer.layerGraph(acyclicGraph);\n    assertEquals(2, deepestLayer);\n    assertEquals(root.getLayer(), 1);\n    assertEquals(leaf.getLayer(), 2);\n  }", "signature": "void testLayerSingleChild()", "full_signature": "@Test public void testLayerSingleChild()", "class_method_signature": "LongestPathLayererTest.testLayerSingleChild()", "testcase": true, "constructor": false, "invocations": ["createChildlessNode", "layerGraph", "assertEquals", "assertEquals", "getLayer", "assertEquals", "getLayer"]}, "focal_class": {"identifier": "LongestPathLayerer", "superclass": "", "interfaces": "implements ILayerer", "fields": [], "methods": [{"identifier": "layerGraph", "parameters": "(IRegularNode[] acyclicGraph)", "modifiers": "@Override public", "return": "int", "signature": "int layerGraph(IRegularNode[] acyclicGraph)", "full_signature": "@Override public int layerGraph(IRegularNode[] acyclicGraph)", "class_method_signature": "LongestPathLayerer.layerGraph(IRegularNode[] acyclicGraph)", "testcase": false, "constructor": false}, {"identifier": "determineLayers", "parameters": "(IRegularNode[] topologicallySortedNodes)", "modifiers": "private", "return": "int", "signature": "int determineLayers(IRegularNode[] topologicallySortedNodes)", "full_signature": "private int determineLayers(IRegularNode[] topologicallySortedNodes)", "class_method_signature": "LongestPathLayerer.determineLayers(IRegularNode[] topologicallySortedNodes)", "testcase": false, "constructor": false}, {"identifier": "setChildLayers", "parameters": "(int deepestLayer, IRegularNode node)", "modifiers": "private", "return": "int", "signature": "int setChildLayers(int deepestLayer, IRegularNode node)", "full_signature": "private int setChildLayers(int deepestLayer, IRegularNode node)", "class_method_signature": "LongestPathLayerer.setChildLayers(int deepestLayer, IRegularNode node)", "testcase": false, "constructor": false}, {"identifier": "setLayersToOne", "parameters": "(IRegularNode[] topologicallySortedNodes)", "modifiers": "private", "return": "void", "signature": "void setLayersToOne(IRegularNode[] topologicallySortedNodes)", "full_signature": "private void setLayersToOne(IRegularNode[] topologicallySortedNodes)", "class_method_signature": "LongestPathLayerer.setLayersToOne(IRegularNode[] topologicallySortedNodes)", "testcase": false, "constructor": false}], "file": "GraphLayout/src/main/java/net/sf/anathema/graph/layering/LongestPathLayerer.java"}, "focal_method": {"identifier": "layerGraph", "parameters": "(IRegularNode[] acyclicGraph)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int layerGraph(IRegularNode[] acyclicGraph) {\n    IRegularNode[] topologicallySortedNodes = TopologyBuilder.sortGraphByTopology(acyclicGraph);\n    setLayersToOne(topologicallySortedNodes);\n    return determineLayers(topologicallySortedNodes);\n  }", "signature": "int layerGraph(IRegularNode[] acyclicGraph)", "full_signature": "@Override public int layerGraph(IRegularNode[] acyclicGraph)", "class_method_signature": "LongestPathLayerer.layerGraph(IRegularNode[] acyclicGraph)", "testcase": false, "constructor": false, "invocations": ["sortGraphByTopology", "setLayersToOne", "determineLayers"]}, "repository": {"repo_id": 2364987, "url": "https://github.com/anathema/anathema_legacy", "language": "Java", "is_fork": false, "fork_count": 71, "stargazer_count": 67, "size": 284668, "license": "licensed"}}