{"test_class": {"identifier": "TextWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SHAPE_WIDTH = 100;", "modifier": "private static final", "type": "int", "declarator": "SHAPE_WIDTH = 100", "var_name": "SHAPE_WIDTH"}, {"original_string": "private static final int SHAPE_HEIGHT = 100;", "modifier": "private static final", "type": "int", "declarator": "SHAPE_HEIGHT = 100", "var_name": "SHAPE_HEIGHT"}, {"original_string": "public static final int TEXT_WIDTH = 50;", "modifier": "public static final", "type": "int", "declarator": "TEXT_WIDTH = 50", "var_name": "TEXT_WIDTH"}, {"original_string": "public static final int TEXT_HEIGHT = 15;", "modifier": "public static final", "type": "int", "declarator": "TEXT_HEIGHT = 15", "var_name": "TEXT_HEIGHT"}, {"original_string": "private final Polygon shape = new Polygon();", "modifier": "private final", "type": "Polygon", "declarator": "shape = new Polygon()", "var_name": "shape"}, {"original_string": "private final LineSuggestion suggestion = mock(LineSuggestion.class);", "modifier": "private final", "type": "LineSuggestion", "declarator": "suggestion = mock(LineSuggestion.class)", "var_name": "suggestion"}, {"original_string": "private TextWriter writer = new TextWriter(shape, suggestion);", "modifier": "private", "type": "TextWriter", "declarator": "writer = new TextWriter(shape, suggestion)", "var_name": "writer"}, {"original_string": "private Canvas canvas = mock(Canvas.class);", "modifier": "private", "type": "Canvas", "declarator": "canvas = mock(Canvas.class)", "var_name": "canvas"}], "file": "Platform_TreeFramework/src/test/java/net/sf/anathema/platform/tree/view/draw/TextWriterTest.java"}, "test_case": {"identifier": "setsFontForText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void setsFontForText() throws Exception {\n    writer.write(canvas);\n    verify(canvas).setFontStyle(FontStyle.Plain, 15);\n  }", "signature": "void setsFontForText()", "full_signature": "@Test public void setsFontForText()", "class_method_signature": "TextWriterTest.setsFontForText()", "testcase": true, "constructor": false, "invocations": ["write", "setFontStyle", "verify"]}, "focal_class": {"identifier": "TextWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int TEXT_SIZE = 15;", "modifier": "private static final", "type": "int", "declarator": "TEXT_SIZE = 15", "var_name": "TEXT_SIZE"}, {"original_string": "private static final int LINE_HEIGHT = TEXT_SIZE + 1;", "modifier": "private static final", "type": "int", "declarator": "LINE_HEIGHT = TEXT_SIZE + 1", "var_name": "LINE_HEIGHT"}, {"original_string": "private String text = \"\";", "modifier": "private", "type": "String", "declarator": "text = \"\"", "var_name": "text"}, {"original_string": "private RGBColor textColor = RGBColor.Black;", "modifier": "private", "type": "RGBColor", "declarator": "textColor = RGBColor.Black", "var_name": "textColor"}, {"original_string": "private final AgnosticShape shape;", "modifier": "private final", "type": "AgnosticShape", "declarator": "shape", "var_name": "shape"}, {"original_string": "private String[] parts;", "modifier": "private", "type": "String[]", "declarator": "parts", "var_name": "parts"}, {"original_string": "private LineSuggestion lineSuggestion = new LineSuggestion();", "modifier": "private", "type": "LineSuggestion", "declarator": "lineSuggestion = new LineSuggestion()", "var_name": "lineSuggestion"}], "methods": [{"identifier": "TextWriter", "parameters": "(AgnosticShape shape, LineSuggestion lineSuggestion)", "modifiers": "public", "return": "", "signature": " TextWriter(AgnosticShape shape, LineSuggestion lineSuggestion)", "full_signature": "public  TextWriter(AgnosticShape shape, LineSuggestion lineSuggestion)", "class_method_signature": "TextWriter.TextWriter(AgnosticShape shape, LineSuggestion lineSuggestion)", "testcase": false, "constructor": true}, {"identifier": "TextWriter", "parameters": "(AgnosticShape shape)", "modifiers": "public", "return": "", "signature": " TextWriter(AgnosticShape shape)", "full_signature": "public  TextWriter(AgnosticShape shape)", "class_method_signature": "TextWriter.TextWriter(AgnosticShape shape)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(Canvas graphics)", "modifiers": "public", "return": "void", "signature": "void write(Canvas graphics)", "full_signature": "public void write(Canvas graphics)", "class_method_signature": "TextWriter.write(Canvas graphics)", "testcase": false, "constructor": false}, {"identifier": "findBreaksIfNotAlreadyEstablished", "parameters": "(Area textSize)", "modifiers": "private", "return": "void", "signature": "void findBreaksIfNotAlreadyEstablished(Area textSize)", "full_signature": "private void findBreaksIfNotAlreadyEstablished(Area textSize)", "class_method_signature": "TextWriter.findBreaksIfNotAlreadyEstablished(Area textSize)", "testcase": false, "constructor": false}, {"identifier": "breakText", "parameters": "(int lines)", "modifiers": "private", "return": "String[]", "signature": "String[] breakText(int lines)", "full_signature": "private String[] breakText(int lines)", "class_method_signature": "TextWriter.breakText(int lines)", "testcase": false, "constructor": false}, {"identifier": "yCorrection", "parameters": "(int currentLine, int numberOfLines)", "modifiers": "private", "return": "int", "signature": "int yCorrection(int currentLine, int numberOfLines)", "full_signature": "private int yCorrection(int currentLine, int numberOfLines)", "class_method_signature": "TextWriter.yCorrection(int currentLine, int numberOfLines)", "testcase": false, "constructor": false}, {"identifier": "setText", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void setText(String text)", "full_signature": "public void setText(String text)", "class_method_signature": "TextWriter.setText(String text)", "testcase": false, "constructor": false}, {"identifier": "setStroke", "parameters": "(RGBColor stroke)", "modifiers": "public", "return": "void", "signature": "void setStroke(RGBColor stroke)", "full_signature": "public void setStroke(RGBColor stroke)", "class_method_signature": "TextWriter.setStroke(RGBColor stroke)", "testcase": false, "constructor": false}], "file": "Platform_TreeFramework/src/main/java/net/sf/anathema/platform/tree/view/draw/TextWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(Canvas graphics)", "modifiers": "public", "return": "void", "body": "public void write(Canvas graphics) {\n    graphics.setColor(textColor);\n    graphics.setFontStyle(FontStyle.Plain, TEXT_SIZE);\n    Area textSize = graphics.measureText(text);\n    findBreaksIfNotAlreadyEstablished(textSize);\n    Rectangle bounds = graphics.calculateBounds(shape);\n    for (int partIndex = 0; partIndex < parts.length; partIndex++) {\n      String part = parts[partIndex];\n      Area partSize = graphics.measureText(part);\n      int centeredX = bounds.origin.x + bounds.area.width / 2 - (partSize.width / 2);\n      int centeredY = bounds.origin.y + bounds.area.height / 2 + (partSize.height / 2);\n      int actualY = centeredY + yCorrection(partIndex, parts.length);\n      graphics.drawString(part, new Coordinate(centeredX, actualY));\n    }\n  }", "signature": "void write(Canvas graphics)", "full_signature": "public void write(Canvas graphics)", "class_method_signature": "TextWriter.write(Canvas graphics)", "testcase": false, "constructor": false, "invocations": ["setColor", "setFontStyle", "measureText", "findBreaksIfNotAlreadyEstablished", "calculateBounds", "measureText", "yCorrection", "drawString"]}, "repository": {"repo_id": 2364987, "url": "https://github.com/anathema/anathema_legacy", "language": "Java", "is_fork": false, "fork_count": 71, "stargazer_count": 67, "size": 284668, "license": "licensed"}}