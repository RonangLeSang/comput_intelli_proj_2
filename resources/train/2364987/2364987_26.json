{"test_class": {"identifier": "ReflectionObjectFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnnotationFinder annotationFinder = mock(AnnotationFinder.class);", "modifier": "private", "type": "AnnotationFinder", "declarator": "annotationFinder = mock(AnnotationFinder.class)", "var_name": "annotationFinder"}, {"original_string": "private InterfaceFinder interfaceFinder = mock(InterfaceFinder.class);", "modifier": "private", "type": "InterfaceFinder", "declarator": "interfaceFinder = mock(InterfaceFinder.class)", "var_name": "interfaceFinder"}, {"original_string": "private ReflectionObjectFactory factory = new ReflectionObjectFactory(annotationFinder, interfaceFinder);", "modifier": "private", "type": "ReflectionObjectFactory", "declarator": "factory = new ReflectionObjectFactory(annotationFinder, interfaceFinder)", "var_name": "factory"}, {"original_string": "private Set<Class<?>> annotatedClasses = new LinkedHashSet<>();", "modifier": "private", "type": "Set<Class<?>>", "declarator": "annotatedClasses = new LinkedHashSet<>()", "var_name": "annotatedClasses"}], "file": "Platform/src/test/java/net/sf/anathema/framework/environment/dependencies/ReflectionObjectFactoryTest.java"}, "test_case": {"identifier": "instantiatesAllClassesAnnotated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void instantiatesAllClassesAnnotated() {\n    annotatedClasses.add(AnnotatedDummy.class);\n    annotatedClasses.add(AnotherAnnotatedDummy.class);\n    Collection<AnnotatedDummy> result = factory.instantiateAll(DummyAnnotation.class);\n    assertThat(result, hasSize(2));\n  }", "signature": "void instantiatesAllClassesAnnotated()", "full_signature": "@Test public void instantiatesAllClassesAnnotated()", "class_method_signature": "ReflectionObjectFactoryTest.instantiatesAllClassesAnnotated()", "testcase": true, "constructor": false, "invocations": ["add", "add", "instantiateAll", "assertThat", "hasSize"]}, "focal_class": {"identifier": "ReflectionObjectFactory", "superclass": "", "interfaces": "implements ObjectFactory", "fields": [{"original_string": "private AnnotationFinder finder;", "modifier": "private", "type": "AnnotationFinder", "declarator": "finder", "var_name": "finder"}, {"original_string": "private InterfaceFinder interfaceFinder;", "modifier": "private", "type": "InterfaceFinder", "declarator": "interfaceFinder", "var_name": "interfaceFinder"}], "methods": [{"identifier": "ReflectionObjectFactory", "parameters": "(AnnotationFinder finder, InterfaceFinder interfaceFinder)", "modifiers": "public", "return": "", "signature": " ReflectionObjectFactory(AnnotationFinder finder, InterfaceFinder interfaceFinder)", "full_signature": "public  ReflectionObjectFactory(AnnotationFinder finder, InterfaceFinder interfaceFinder)", "class_method_signature": "ReflectionObjectFactory.ReflectionObjectFactory(AnnotationFinder finder, InterfaceFinder interfaceFinder)", "testcase": false, "constructor": true}, {"identifier": "instantiateOrdered", "parameters": "(Class<? extends Annotation> annotation,\n                                              Object... parameter)", "modifiers": "@Override public", "return": "Collection<T>", "signature": "Collection<T> instantiateOrdered(Class<? extends Annotation> annotation,\n                                              Object... parameter)", "full_signature": "@Override public Collection<T> instantiateOrdered(Class<? extends Annotation> annotation,\n                                              Object... parameter)", "class_method_signature": "ReflectionObjectFactory.instantiateOrdered(Class<? extends Annotation> annotation,\n                                              Object... parameter)", "testcase": false, "constructor": false}, {"identifier": "instantiateAll", "parameters": "(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "modifiers": "@Override public", "return": "Collection<T>", "signature": "Collection<T> instantiateAll(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "full_signature": "@Override public Collection<T> instantiateAll(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "class_method_signature": "ReflectionObjectFactory.instantiateAll(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "testcase": false, "constructor": false}, {"identifier": "instantiateAllImplementers", "parameters": "(Class<T> interfaceClass, Object... parameter)", "modifiers": "@Override public", "return": "Collection<T>", "signature": "Collection<T> instantiateAllImplementers(Class<T> interfaceClass, Object... parameter)", "full_signature": "@Override public Collection<T> instantiateAllImplementers(Class<T> interfaceClass, Object... parameter)", "class_method_signature": "ReflectionObjectFactory.instantiateAllImplementers(Class<T> interfaceClass, Object... parameter)", "testcase": false, "constructor": false}, {"identifier": "findLegalImplementers", "parameters": "(Class<T> interfaceClass)", "modifiers": "private", "return": "Collection<Class<? extends T>>", "signature": "Collection<Class<? extends T>> findLegalImplementers(Class<T> interfaceClass)", "full_signature": "private Collection<Class<? extends T>> findLegalImplementers(Class<T> interfaceClass)", "class_method_signature": "ReflectionObjectFactory.findLegalImplementers(Class<T> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "filterBlackListedClasses", "parameters": "(Set<Class<? extends T>> classes)", "modifiers": "private", "return": "Collection<Class<? extends T>>", "signature": "Collection<Class<? extends T>> filterBlackListedClasses(Set<Class<? extends T>> classes)", "full_signature": "private Collection<Class<? extends T>> filterBlackListedClasses(Set<Class<? extends T>> classes)", "class_method_signature": "ReflectionObjectFactory.filterBlackListedClasses(Set<Class<? extends T>> classes)", "testcase": false, "constructor": false}, {"identifier": "filterAbstractClasses", "parameters": "(Collection<Class<? extends T>> classes)", "modifiers": "private", "return": "Collection<Class<? extends T>>", "signature": "Collection<Class<? extends T>> filterAbstractClasses(Collection<Class<? extends T>> classes)", "full_signature": "private Collection<Class<? extends T>> filterAbstractClasses(Collection<Class<? extends T>> classes)", "class_method_signature": "ReflectionObjectFactory.filterAbstractClasses(Collection<Class<? extends T>> classes)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(Set<Class<?>> pluginClasses)", "modifiers": "private", "return": "List<Class<?>>", "signature": "List<Class<?>> sort(Set<Class<?>> pluginClasses)", "full_signature": "private List<Class<?>> sort(Set<Class<?>> pluginClasses)", "class_method_signature": "ReflectionObjectFactory.sort(Set<Class<?>> pluginClasses)", "testcase": false, "constructor": false}], "file": "Platform/src/main/java/net/sf/anathema/framework/environment/dependencies/ReflectionObjectFactory.java"}, "focal_method": {"identifier": "instantiateAll", "parameters": "(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "modifiers": "@Override public", "return": "Collection<T>", "body": "@Override\n  public <T> Collection<T> instantiateAll(Class<? extends Annotation> annotation,\n                                          Object... parameter) throws InitializationException {\n    Set<Class<?>> pluginClasses = finder.getTypesAnnotatedWith(annotation);\n    return Collections2.transform(pluginClasses, new Instantiate<>(parameter));\n  }", "signature": "Collection<T> instantiateAll(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "full_signature": "@Override public Collection<T> instantiateAll(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "class_method_signature": "ReflectionObjectFactory.instantiateAll(Class<? extends Annotation> annotation,\n                                          Object... parameter)", "testcase": false, "constructor": false, "invocations": ["getTypesAnnotatedWith", "transform"]}, "repository": {"repo_id": 2364987, "url": "https://github.com/anathema/anathema_legacy", "language": "Java", "is_fork": false, "fork_count": 71, "stargazer_count": 67, "size": 284668, "license": "licensed"}}