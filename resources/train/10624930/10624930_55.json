{"test_class": {"identifier": "ConfigurationUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_PROPERTY_NAME = \"ConfigurationUtilsTestProperty\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PROPERTY_NAME = \"ConfigurationUtilsTestProperty\"", "var_name": "TEST_PROPERTY_NAME"}], "file": "common/src/test/java/org/jboss/aerogear/unifiedpush/system/ConfigurationUtilsTest.java"}, "test_case": {"identifier": "testEnvVarLookup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnvVarLookup() {\n        assertThat(ConfigurationUtils.tryGetGlobalProperty(\"test.env.var\"))\n          .isEqualTo(\"Ok\");\n    }", "signature": "void testEnvVarLookup()", "full_signature": "@Test public void testEnvVarLookup()", "class_method_signature": "ConfigurationUtilsTest.testEnvVarLookup()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "tryGetGlobalProperty"]}, "focal_class": {"identifier": "ConfigurationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConfigurationUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConfigurationUtils.class)", "var_name": "logger"}], "methods": [{"identifier": "ConfigurationUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfigurationUtils()", "full_signature": "private  ConfigurationUtils()", "class_method_signature": "ConfigurationUtils.ConfigurationUtils()", "testcase": false, "constructor": true}, {"identifier": "tryGetProperty", "parameters": "(String key, String defaultValue)", "modifiers": "private static", "return": "String", "signature": "String tryGetProperty(String key, String defaultValue)", "full_signature": "private static String tryGetProperty(String key, String defaultValue)", "class_method_signature": "ConfigurationUtils.tryGetProperty(String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "tryGetIntegerProperty", "parameters": "(String key, Integer defaultValue)", "modifiers": "private static", "return": "Integer", "signature": "Integer tryGetIntegerProperty(String key, Integer defaultValue)", "full_signature": "private static Integer tryGetIntegerProperty(String key, Integer defaultValue)", "class_method_signature": "ConfigurationUtils.tryGetIntegerProperty(String key, Integer defaultValue)", "testcase": false, "constructor": false}, {"identifier": "formatEnvironmentVariable", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String formatEnvironmentVariable(String key)", "full_signature": "public static String formatEnvironmentVariable(String key)", "class_method_signature": "ConfigurationUtils.formatEnvironmentVariable(String key)", "testcase": false, "constructor": false}, {"identifier": "tryGetGlobalProperty", "parameters": "(String key, String defaultValue)", "modifiers": "public static", "return": "String", "signature": "String tryGetGlobalProperty(String key, String defaultValue)", "full_signature": "public static String tryGetGlobalProperty(String key, String defaultValue)", "class_method_signature": "ConfigurationUtils.tryGetGlobalProperty(String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "tryGetGlobalProperty", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String tryGetGlobalProperty(String key)", "full_signature": "public static String tryGetGlobalProperty(String key)", "class_method_signature": "ConfigurationUtils.tryGetGlobalProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "tryGetGlobalIntegerProperty", "parameters": "(String key, Integer defaultValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer tryGetGlobalIntegerProperty(String key, Integer defaultValue)", "full_signature": "public static Integer tryGetGlobalIntegerProperty(String key, Integer defaultValue)", "class_method_signature": "ConfigurationUtils.tryGetGlobalIntegerProperty(String key, Integer defaultValue)", "testcase": false, "constructor": false}, {"identifier": "tryGetGlobalIntegerProperty", "parameters": "(String key)", "modifiers": "public static", "return": "Integer", "signature": "Integer tryGetGlobalIntegerProperty(String key)", "full_signature": "public static Integer tryGetGlobalIntegerProperty(String key)", "class_method_signature": "ConfigurationUtils.tryGetGlobalIntegerProperty(String key)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/jboss/aerogear/unifiedpush/system/ConfigurationUtils.java"}, "focal_method": {"identifier": "tryGetGlobalProperty", "parameters": "(String key, String defaultValue)", "modifiers": "public static", "return": "String", "body": "public static String tryGetGlobalProperty(String key, String defaultValue) {\n        try {\n            String value = System.getenv(formatEnvironmentVariable(key));\n            if (value == null) {\n                value = tryGetProperty(key, defaultValue);\n            }\n            return value;\n        } catch (SecurityException e) {\n            logger.error(\"Could not get value of global property {} due to SecurityManager. Using default value.\", key, e);\n            return defaultValue;\n        }\n    }", "signature": "String tryGetGlobalProperty(String key, String defaultValue)", "full_signature": "public static String tryGetGlobalProperty(String key, String defaultValue)", "class_method_signature": "ConfigurationUtils.tryGetGlobalProperty(String key, String defaultValue)", "testcase": false, "constructor": false, "invocations": ["getenv", "formatEnvironmentVariable", "tryGetProperty", "error"]}, "repository": {"repo_id": 10624930, "url": "https://github.com/aerogear/aerogear-unifiedpush-server", "stars": 411, "created": "6/11/2013 3:48:01 PM +00:00", "updates": "2020-01-27T00:45:29+00:00", "fork": "False", "license": "licensed"}}