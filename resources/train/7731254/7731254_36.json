{"test_class": {"identifier": "ExtendedDataTableRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HtmlUnitEnvironment environment;", "modifier": "private", "type": "HtmlUnitEnvironment", "declarator": "environment", "var_name": "environment"}], "file": "components/rich/src/test/java/org/richfaces/renderkit/ExtendedDataTableRendererTest.java"}, "test_case": {"identifier": "testFilteringWithoutClean", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testFilteringWithoutClean() throws IOException {\n        FacesRequest facesRequest = startFacesRequest();\n        FacesContext facesContext = FacesContext.getCurrentInstance();\n        AbstractExtendedDataTable component = (AbstractExtendedDataTable) facesContext.getViewRoot().findComponent(\"table\");\n        ExtendedDataTableRenderer renderer = (ExtendedDataTableRenderer) FacesContext.getCurrentInstance().getRenderKit()\n            .getRenderer(component.getFamily(), component.getRendererType());\n        Map<String, Object> column1Attributes = component.findComponent(\"column1\").getAttributes();\n        Map<String, Object> column2Attributes = component.findComponent(\"column2\").getAttributes();\n        String clientId = component.getClientId(facesContext);\n        assertNull(column1Attributes.get(\"filterValue\"));\n        assertEquals(\"filterValue2\", column2Attributes.get(\"filterValue\"));\n        facesRequest.withParameter(clientId, clientId);\n        facesRequest.withParameter(clientId + \"rich:filtering\", \"column1:filterValue1:null\");\n        renderer.doDecode(facesContext, component);\n        assertEquals(\"filterValue1\", column1Attributes.get(\"filterValue\"));\n        assertEquals(\"filterValue2\", column2Attributes.get(\"filterValue\"));\n        assertTrue(facesContext.getPartialViewContext().getRenderIds().contains(clientId));\n        facesRequest.release();\n    }", "signature": "void testFilteringWithoutClean()", "full_signature": "@Test public final void testFilteringWithoutClean()", "class_method_signature": "ExtendedDataTableRendererTest.testFilteringWithoutClean()", "testcase": true, "constructor": false, "invocations": ["startFacesRequest", "getCurrentInstance", "findComponent", "getViewRoot", "getRenderer", "getRenderKit", "getCurrentInstance", "getFamily", "getRendererType", "getAttributes", "findComponent", "getAttributes", "findComponent", "getClientId", "assertNull", "get", "assertEquals", "get", "withParameter", "withParameter", "doDecode", "assertEquals", "get", "assertEquals", "get", "assertTrue", "contains", "getRenderIds", "getPartialViewContext", "release"]}, "focal_class": {"identifier": "ExtendedDataTableRenderer", "superclass": "extends SelectionRenderer", "interfaces": "implements MetaComponentRenderer", "fields": [{"original_string": "private static final JSReference CLIENT_PARAMS = new JSReference(\"clientParams\");", "modifier": "private static final", "type": "JSReference", "declarator": "CLIENT_PARAMS = new JSReference(\"clientParams\")", "var_name": "CLIENT_PARAMS"}, {"original_string": "private static final String DATA_ATTRIBUTE = \"data-rf-column-name\";", "modifier": "private static final", "type": "String", "declarator": "DATA_ATTRIBUTE = \"data-rf-column-name\"", "var_name": "DATA_ATTRIBUTE"}, {"original_string": "private static final String BEHAVIOR_EVENT_NAME = \"javax.faces.behavior.event\";", "modifier": "private static final", "type": "String", "declarator": "BEHAVIOR_EVENT_NAME = \"javax.faces.behavior.event\"", "var_name": "BEHAVIOR_EVENT_NAME"}, {"original_string": "private static final String ROW = \"row\";", "modifier": "private static final", "type": "String", "declarator": "ROW = \"row\"", "var_name": "ROW"}, {"original_string": "private static final Map<java.lang.String, ComponentAttribute> EVENT_ATTRIBUTES = Collections\n        .unmodifiableMap(ComponentAttribute.createMap(\n            new ComponentAttribute(\"onselectionchange\").setEventNames(new String[] { \"selectionchange\" }),\n            new ComponentAttribute(\"onbeforeselectionchange\").setEventNames(new String[] { \"beforeselectionchange\" }),\n            new ComponentAttribute(\"onready\").setEventNames(new String[] { \"ready\" })));", "modifier": "private static final", "type": "Map<java.lang.String, ComponentAttribute>", "declarator": "EVENT_ATTRIBUTES = Collections\n        .unmodifiableMap(ComponentAttribute.createMap(\n            new ComponentAttribute(\"onselectionchange\").setEventNames(new String[] { \"selectionchange\" }),\n            new ComponentAttribute(\"onbeforeselectionchange\").setEventNames(new String[] { \"beforeselectionchange\" }),\n            new ComponentAttribute(\"onready\").setEventNames(new String[] { \"ready\" })))", "var_name": "EVENT_ATTRIBUTES"}], "methods": [{"identifier": "preEncodeBegin", "parameters": "(FacesContext context, UIComponent component)", "modifiers": "@Override protected", "return": "void", "signature": "void preEncodeBegin(FacesContext context, UIComponent component)", "full_signature": "@Override protected void preEncodeBegin(FacesContext context, UIComponent component)", "class_method_signature": "ExtendedDataTableRenderer.preEncodeBegin(FacesContext context, UIComponent component)", "testcase": false, "constructor": false}, {"identifier": "encodeEmptyFooterCell", "parameters": "(FacesContext context, ResponseWriter writer, UIComponent column, boolean isLastColumn)", "modifiers": "private", "return": "void", "signature": "void encodeEmptyFooterCell(FacesContext context, ResponseWriter writer, UIComponent column, boolean isLastColumn)", "full_signature": "private void encodeEmptyFooterCell(FacesContext context, ResponseWriter writer, UIComponent column, boolean isLastColumn)", "class_method_signature": "ExtendedDataTableRenderer.encodeEmptyFooterCell(FacesContext context, ResponseWriter writer, UIComponent column, boolean isLastColumn)", "testcase": false, "constructor": false}, {"identifier": "encodeHeaderOrFooterCell", "parameters": "(FacesContext context, ResponseWriter writer, UIComponent column, String facetName, boolean isLastColumn)", "modifiers": "private", "return": "void", "signature": "void encodeHeaderOrFooterCell(FacesContext context, ResponseWriter writer, UIComponent column, String facetName, boolean isLastColumn)", "full_signature": "private void encodeHeaderOrFooterCell(FacesContext context, ResponseWriter writer, UIComponent column, String facetName, boolean isLastColumn)", "class_method_signature": "ExtendedDataTableRenderer.encodeHeaderOrFooterCell(FacesContext context, ResponseWriter writer, UIComponent column, String facetName, boolean isLastColumn)", "testcase": false, "constructor": false}, {"identifier": "getFacetClassName", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getFacetClassName(String name)", "full_signature": "private String getFacetClassName(String name)", "class_method_signature": "ExtendedDataTableRenderer.getFacetClassName(String name)", "testcase": false, "constructor": false}, {"identifier": "encodeHeaderOrFooter", "parameters": "(RendererState state, String facetName)", "modifiers": "private", "return": "void", "signature": "void encodeHeaderOrFooter(RendererState state, String facetName)", "full_signature": "private void encodeHeaderOrFooter(RendererState state, String facetName)", "class_method_signature": "ExtendedDataTableRenderer.encodeHeaderOrFooter(RendererState state, String facetName)", "testcase": false, "constructor": false}, {"identifier": "encodeHeader", "parameters": "(RendererState state)", "modifiers": "public", "return": "void", "signature": "void encodeHeader(RendererState state)", "full_signature": "public void encodeHeader(RendererState state)", "class_method_signature": "ExtendedDataTableRenderer.encodeHeader(RendererState state)", "testcase": false, "constructor": false}, {"identifier": "encodeBody", "parameters": "(RendererState state)", "modifiers": "public", "return": "void", "signature": "void encodeBody(RendererState state)", "full_signature": "public void encodeBody(RendererState state)", "class_method_signature": "ExtendedDataTableRenderer.encodeBody(RendererState state)", "testcase": false, "constructor": false}, {"identifier": "encodeFooter", "parameters": "(RendererState state)", "modifiers": "public", "return": "void", "signature": "void encodeFooter(RendererState state)", "full_signature": "public void encodeFooter(RendererState state)", "class_method_signature": "ExtendedDataTableRenderer.encodeFooter(RendererState state)", "testcase": false, "constructor": false}, {"identifier": "getComponentClass", "parameters": "()", "modifiers": "@Override protected", "return": "Class<? extends UIComponent>", "signature": "Class<? extends UIComponent> getComponentClass()", "full_signature": "@Override protected Class<? extends UIComponent> getComponentClass()", "class_method_signature": "ExtendedDataTableRenderer.getComponentClass()", "testcase": false, "constructor": false}, {"identifier": "encodeMetaComponent", "parameters": "(FacesContext context, UIComponent component, String metaComponentId)", "modifiers": "public", "return": "void", "signature": "void encodeMetaComponent(FacesContext context, UIComponent component, String metaComponentId)", "full_signature": "public void encodeMetaComponent(FacesContext context, UIComponent component, String metaComponentId)", "class_method_signature": "ExtendedDataTableRenderer.encodeMetaComponent(FacesContext context, UIComponent component, String metaComponentId)", "testcase": false, "constructor": false}, {"identifier": "decodeMetaComponent", "parameters": "(FacesContext context, UIComponent component, String metaComponentId)", "modifiers": "public", "return": "void", "signature": "void decodeMetaComponent(FacesContext context, UIComponent component, String metaComponentId)", "full_signature": "public void decodeMetaComponent(FacesContext context, UIComponent component, String metaComponentId)", "class_method_signature": "ExtendedDataTableRenderer.decodeMetaComponent(FacesContext context, UIComponent component, String metaComponentId)", "testcase": false, "constructor": false}, {"identifier": "doEncodeBegin", "parameters": "(ResponseWriter writer, FacesContext context, UIComponent component)", "modifiers": "protected", "return": "void", "signature": "void doEncodeBegin(ResponseWriter writer, FacesContext context, UIComponent component)", "full_signature": "protected void doEncodeBegin(ResponseWriter writer, FacesContext context, UIComponent component)", "class_method_signature": "ExtendedDataTableRenderer.doEncodeBegin(ResponseWriter writer, FacesContext context, UIComponent component)", "testcase": false, "constructor": false}, {"identifier": "createRowHolder", "parameters": "(FacesContext context, UIComponent component, Object[] options)", "modifiers": "public", "return": "RendererState", "signature": "RendererState createRowHolder(FacesContext context, UIComponent component, Object[] options)", "full_signature": "public RendererState createRowHolder(FacesContext context, UIComponent component, Object[] options)", "class_method_signature": "ExtendedDataTableRenderer.createRowHolder(FacesContext context, UIComponent component, Object[] options)", "testcase": false, "constructor": false}, {"identifier": "doEncodeChildren", "parameters": "(ResponseWriter writer, FacesContext context, UIComponent component)", "modifiers": "protected", "return": "void", "signature": "void doEncodeChildren(ResponseWriter writer, FacesContext context, UIComponent component)", "full_signature": "protected void doEncodeChildren(ResponseWriter writer, FacesContext context, UIComponent component)", "class_method_signature": "ExtendedDataTableRenderer.doEncodeChildren(ResponseWriter writer, FacesContext context, UIComponent component)", "testcase": false, "constructor": false}, {"identifier": "doEncodeEnd", "parameters": "(ResponseWriter writer, FacesContext context, UIComponent component)", "modifiers": "protected", "return": "void", "signature": "void doEncodeEnd(ResponseWriter writer, FacesContext context, UIComponent component)", "full_signature": "protected void doEncodeEnd(ResponseWriter writer, FacesContext context, UIComponent component)", "class_method_signature": "ExtendedDataTableRenderer.doEncodeEnd(ResponseWriter writer, FacesContext context, UIComponent component)", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "(UIComponent component)", "modifiers": "private", "return": "int", "signature": "int getRowCount(UIComponent component)", "full_signature": "private int getRowCount(UIComponent component)", "class_method_signature": "ExtendedDataTableRenderer.getRowCount(UIComponent component)", "testcase": false, "constructor": false}, {"identifier": "encodeStyle", "parameters": "(RendererState state)", "modifiers": "private", "return": "void", "signature": "void encodeStyle(RendererState state)", "full_signature": "private void encodeStyle(RendererState state)", "class_method_signature": "ExtendedDataTableRenderer.encodeStyle(RendererState state)", "testcase": false, "constructor": false}, {"identifier": "getCSSText", "parameters": "(FacesContext context, UIDataTableBase table)", "modifiers": "protected", "return": "String", "signature": "String getCSSText(FacesContext context, UIDataTableBase table)", "full_signature": "protected String getCSSText(FacesContext context, UIDataTableBase table)", "class_method_signature": "ExtendedDataTableRenderer.getCSSText(FacesContext context, UIDataTableBase table)", "testcase": false, "constructor": false}, {"identifier": "encodeRow", "parameters": "(ResponseWriter writer, FacesContext facesContext, RowHolderBase rowHolder)", "modifiers": "public", "return": "void", "signature": "void encodeRow(ResponseWriter writer, FacesContext facesContext, RowHolderBase rowHolder)", "full_signature": "public void encodeRow(ResponseWriter writer, FacesContext facesContext, RowHolderBase rowHolder)", "class_method_signature": "ExtendedDataTableRenderer.encodeRow(ResponseWriter writer, FacesContext facesContext, RowHolderBase rowHolder)", "testcase": false, "constructor": false}, {"identifier": "doDecode", "parameters": "(FacesContext context, final UIComponent component)", "modifiers": "@Override protected", "return": "void", "signature": "void doDecode(FacesContext context, final UIComponent component)", "full_signature": "@Override protected void doDecode(FacesContext context, final UIComponent component)", "class_method_signature": "ExtendedDataTableRenderer.doDecode(FacesContext context, final UIComponent component)", "testcase": false, "constructor": false}, {"identifier": "updateWidthOfColumns", "parameters": "(FacesContext context, UIComponent component, String widthString)", "modifiers": "private", "return": "void", "signature": "void updateWidthOfColumns(FacesContext context, UIComponent component, String widthString)", "full_signature": "private void updateWidthOfColumns(FacesContext context, UIComponent component, String widthString)", "class_method_signature": "ExtendedDataTableRenderer.updateWidthOfColumns(FacesContext context, UIComponent component, String widthString)", "testcase": false, "constructor": false}, {"identifier": "updateColumnsOrder", "parameters": "(FacesContext context, UIComponent component, String columnsOrderString)", "modifiers": "private", "return": "void", "signature": "void updateColumnsOrder(FacesContext context, UIComponent component, String columnsOrderString)", "full_signature": "private void updateColumnsOrder(FacesContext context, UIComponent component, String columnsOrderString)", "class_method_signature": "ExtendedDataTableRenderer.updateColumnsOrder(FacesContext context, UIComponent component, String columnsOrderString)", "testcase": false, "constructor": false}, {"identifier": "updateClientFirst", "parameters": "(FacesContext context, UIComponent component, String clientFirst)", "modifiers": "private", "return": "void", "signature": "void updateClientFirst(FacesContext context, UIComponent component, String clientFirst)", "full_signature": "private void updateClientFirst(FacesContext context, UIComponent component, String clientFirst)", "class_method_signature": "ExtendedDataTableRenderer.updateClientFirst(FacesContext context, UIComponent component, String clientFirst)", "testcase": false, "constructor": false}, {"identifier": "consumeTableState", "parameters": "(FacesContext facesContext, UIDataTableBase table, ExtendedDataTableState tableState)", "modifiers": "public", "return": "void", "signature": "void consumeTableState(FacesContext facesContext, UIDataTableBase table, ExtendedDataTableState tableState)", "full_signature": "public void consumeTableState(FacesContext facesContext, UIDataTableBase table, ExtendedDataTableState tableState)", "class_method_signature": "ExtendedDataTableRenderer.consumeTableState(FacesContext facesContext, UIDataTableBase table, ExtendedDataTableState tableState)", "testcase": false, "constructor": false}, {"identifier": "getColumnWidth", "parameters": "(UIComponent column)", "modifiers": "private", "return": "String", "signature": "String getColumnWidth(UIComponent column)", "full_signature": "private String getColumnWidth(UIComponent column)", "class_method_signature": "ExtendedDataTableRenderer.getColumnWidth(UIComponent column)", "testcase": false, "constructor": false}], "file": "components/rich/src/main/java/org/richfaces/renderkit/ExtendedDataTableRenderer.java"}, "focal_method": {"identifier": "doDecode", "parameters": "(FacesContext context, final UIComponent component)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doDecode(FacesContext context, final UIComponent component) {\n        super.doDecode(context, component);\n        Map<String, String> map = context.getExternalContext().getRequestParameterMap();\n        String clientId = component.getClientId(context);\n        updateWidthOfColumns(context, component, map.get(clientId + \":wi\"));\n        if (map.get(clientId) != null) {\n            updateColumnsOrder(context, component, map.get(\"rich:columnsOrder\"));\n        }\n        if (map.get(clientId) != null) {\n            updateClientFirst(context, component, map.get(\"rich:clientFirst\"));\n        }\n        decodeSortingFiltering(context, component);\n\n        if (component.getAttributes().get(\"tableState\") != null) {\n            ExtendedDataTableState tableState = new ExtendedDataTableState((UIDataTableBase) component);\n            updateAttribute(context, component, \"tableState\", tableState.toString());\n        }\n\n        if (component instanceof ClientBehaviorHolder) {\n            final Map<String, List<ClientBehavior>> behaviors = ((ClientBehaviorHolder) component).getClientBehaviors();\n\n            if (behaviors == null || behaviors.isEmpty()) {\n                return;\n            }\n\n            Map<String, String> parametersMap = context.getExternalContext().getRequestParameterMap();\n            final String behaviorEvent = parametersMap.get(BEHAVIOR_EVENT_NAME);\n\n            if (behaviorEvent == null || !behaviorEvent.startsWith(ROW)) {\n                return;\n            }\n\n            String behaviorSourceId = RenderKitUtils.getBehaviorSourceId(context);\n            if (behaviorSourceId.endsWith(\":n\")) {\n                behaviorSourceId = behaviorSourceId.substring(0, behaviorSourceId.length() - 2);\n            } else {\n                return;\n            }\n\n            ((UIDataAdaptor) component).invokeOnRow(context, behaviorSourceId, new ContextCallback() {\n                public void invokeContextCallback(FacesContext context, UIComponent target) {\n                    if (target.equals(component)) {\n                        List<ClientBehavior> behaviorsForEvent = behaviors.get(behaviorEvent);\n                        if (behaviorsForEvent != null && !behaviorsForEvent.isEmpty()) {\n                            for (ClientBehavior behavior : behaviorsForEvent) {\n                                behavior.decode(context, component);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }", "signature": "void doDecode(FacesContext context, final UIComponent component)", "full_signature": "@Override protected void doDecode(FacesContext context, final UIComponent component)", "class_method_signature": "ExtendedDataTableRenderer.doDecode(FacesContext context, final UIComponent component)", "testcase": false, "constructor": false, "invocations": ["doDecode", "getRequestParameterMap", "getExternalContext", "getClientId", "updateWidthOfColumns", "get", "get", "updateColumnsOrder", "get", "get", "updateClientFirst", "get", "decodeSortingFiltering", "get", "getAttributes", "updateAttribute", "toString", "getClientBehaviors", "isEmpty", "getRequestParameterMap", "getExternalContext", "get", "startsWith", "getBehaviorSourceId", "endsWith", "substring", "length", "invokeOnRow", "equals", "get", "isEmpty", "decode"]}, "repository": {"repo_id": 7731254, "url": "https://github.com/richfaces/richfaces", "language": "Java", "is_fork": false, "fork_count": 95, "stargazer_count": 58, "size": 310136, "license": "licensed"}}