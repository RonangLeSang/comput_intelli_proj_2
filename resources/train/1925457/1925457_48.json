{"test_class": {"identifier": "StringsTest", "superclass": "", "interfaces": "", "fields": [], "file": "gpslogger/src/test/java/com/mendhak/gpslogger/common/StringsTest.java"}, "test_case": {"identifier": "GetFormattedCustomFileName_MIN_ReplaceWithPaddedMinute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void GetFormattedCustomFileName_MIN_ReplaceWithPaddedMinute(){\n\n        PreferenceHelper ph = mock(PreferenceHelper.class);\n        Calendar gc = mock(Calendar.class);\n        when(gc.get(Calendar.HOUR_OF_DAY)).thenReturn(4);\n        when(gc.get(Calendar.MINUTE)).thenReturn(7);\n\n        String actual = Strings.getFormattedCustomFileName(\"basename_%HOUR%MIN\", gc, ph);\n        String expected = \"basename_0407\";\n        assertThat(\" %MIN 7 should be replaced with 07\", actual, is(expected));\n\n        when(gc.get(Calendar.HOUR_OF_DAY)).thenReturn(0);\n        when(gc.get(Calendar.MINUTE)).thenReturn(0);\n\n        actual = Strings.getFormattedCustomFileName(\"basename_%HOUR%MIN\", gc, ph);\n        expected = \"basename_0000\";\n        assertThat(\" %MIN 0 should be replaced with 00\", actual, is(expected));\n\n    }", "signature": "void GetFormattedCustomFileName_MIN_ReplaceWithPaddedMinute()", "full_signature": "@Test public void GetFormattedCustomFileName_MIN_ReplaceWithPaddedMinute()", "class_method_signature": "StringsTest.GetFormattedCustomFileName_MIN_ReplaceWithPaddedMinute()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "get", "thenReturn", "when", "get", "getFormattedCustomFileName", "assertThat", "is", "thenReturn", "when", "get", "thenReturn", "when", "get", "getFormattedCustomFileName", "assertThat", "is"]}, "focal_class": {"identifier": "Strings", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getDescriptiveDurationString", "parameters": "(int numberOfSeconds,\n                                                      Context context)", "modifiers": "public static", "return": "String", "signature": "String getDescriptiveDurationString(int numberOfSeconds,\n                                                      Context context)", "full_signature": "public static String getDescriptiveDurationString(int numberOfSeconds,\n                                                      Context context)", "class_method_signature": "Strings.getDescriptiveDurationString(int numberOfSeconds,\n                                                      Context context)", "testcase": false, "constructor": false}, {"identifier": "getBearingDescription", "parameters": "(float bearingDegrees,\n                                               Context context)", "modifiers": "public static", "return": "String", "signature": "String getBearingDescription(float bearingDegrees,\n                                               Context context)", "full_signature": "public static String getBearingDescription(float bearingDegrees,\n                                               Context context)", "class_method_signature": "Strings.getBearingDescription(float bearingDegrees,\n                                               Context context)", "testcase": false, "constructor": false}, {"identifier": "cleanDescriptionForXml", "parameters": "(String desc)", "modifiers": "public static", "return": "String", "signature": "String cleanDescriptionForXml(String desc)", "full_signature": "public static String cleanDescriptionForXml(String desc)", "class_method_signature": "Strings.cleanDescriptionForXml(String desc)", "testcase": false, "constructor": false}, {"identifier": "cleanDescriptionForJson", "parameters": "(String desc)", "modifiers": "public static", "return": "String", "signature": "String cleanDescriptionForJson(String desc)", "full_signature": "public static String cleanDescriptionForJson(String desc)", "class_method_signature": "Strings.cleanDescriptionForJson(String desc)", "testcase": false, "constructor": false}, {"identifier": "getIsoDateTime", "parameters": "(Date dateToFormat)", "modifiers": "public static", "return": "String", "signature": "String getIsoDateTime(Date dateToFormat)", "full_signature": "public static String getIsoDateTime(Date dateToFormat)", "class_method_signature": "Strings.getIsoDateTime(Date dateToFormat)", "testcase": false, "constructor": false}, {"identifier": "getIsoDateTimeFormat", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getIsoDateTimeFormat()", "full_signature": "public static String getIsoDateTimeFormat()", "class_method_signature": "Strings.getIsoDateTimeFormat()", "testcase": false, "constructor": false}, {"identifier": "getIsoCalendarDate", "parameters": "(Date dateToFormat)", "modifiers": "public static", "return": "String", "signature": "String getIsoCalendarDate(Date dateToFormat)", "full_signature": "public static String getIsoCalendarDate(Date dateToFormat)", "class_method_signature": "Strings.getIsoCalendarDate(Date dateToFormat)", "testcase": false, "constructor": false}, {"identifier": "getIsoCalendarDateFormat", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getIsoCalendarDateFormat()", "full_signature": "public static String getIsoCalendarDateFormat()", "class_method_signature": "Strings.getIsoCalendarDateFormat()", "testcase": false, "constructor": false}, {"identifier": "getReadableDateTime", "parameters": "(Date dateToFormat)", "modifiers": "public static", "return": "String", "signature": "String getReadableDateTime(Date dateToFormat)", "full_signature": "public static String getReadableDateTime(Date dateToFormat)", "class_method_signature": "Strings.getReadableDateTime(Date dateToFormat)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(String text)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(String text)", "full_signature": "public static boolean isNullOrEmpty(String text)", "class_method_signature": "Strings.isNullOrEmpty(String text)", "testcase": false, "constructor": false}, {"identifier": "htmlDecode", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String htmlDecode(String text)", "full_signature": "public static String htmlDecode(String text)", "class_method_signature": "Strings.htmlDecode(String text)", "testcase": false, "constructor": false}, {"identifier": "getBuildSerial", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getBuildSerial()", "full_signature": "public static String getBuildSerial()", "class_method_signature": "Strings.getBuildSerial()", "testcase": false, "constructor": false}, {"identifier": "getFormattedFileName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getFormattedFileName()", "full_signature": "public static String getFormattedFileName()", "class_method_signature": "Strings.getFormattedFileName()", "testcase": false, "constructor": false}, {"identifier": "getFormattedFileName", "parameters": "(Session session, PreferenceHelper ph)", "modifiers": "public static", "return": "String", "signature": "String getFormattedFileName(Session session, PreferenceHelper ph)", "full_signature": "public static String getFormattedFileName(Session session, PreferenceHelper ph)", "class_method_signature": "Strings.getFormattedFileName(Session session, PreferenceHelper ph)", "testcase": false, "constructor": false}, {"identifier": "getFormattedCustomFileName", "parameters": "(String baseName, Calendar calendar, PreferenceHelper ph)", "modifiers": "public static", "return": "String", "signature": "String getFormattedCustomFileName(String baseName, Calendar calendar, PreferenceHelper ph)", "full_signature": "public static String getFormattedCustomFileName(String baseName, Calendar calendar, PreferenceHelper ph)", "class_method_signature": "Strings.getFormattedCustomFileName(String baseName, Calendar calendar, PreferenceHelper ph)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(String number, int defaultVal)", "modifiers": "public static", "return": "int", "signature": "int toInt(String number, int defaultVal)", "full_signature": "public static int toInt(String number, int defaultVal)", "class_method_signature": "Strings.toInt(String number, int defaultVal)", "testcase": false, "constructor": false}, {"identifier": "getSpeedDisplay", "parameters": "(Context context, double metersPerSecond, boolean imperial)", "modifiers": "public static", "return": "String", "signature": "String getSpeedDisplay(Context context, double metersPerSecond, boolean imperial)", "full_signature": "public static String getSpeedDisplay(Context context, double metersPerSecond, boolean imperial)", "class_method_signature": "Strings.getSpeedDisplay(Context context, double metersPerSecond, boolean imperial)", "testcase": false, "constructor": false}, {"identifier": "getDistanceDisplay", "parameters": "(Context context, double meters, boolean imperial, boolean autoscale)", "modifiers": "public static", "return": "String", "signature": "String getDistanceDisplay(Context context, double meters, boolean imperial, boolean autoscale)", "full_signature": "public static String getDistanceDisplay(Context context, double meters, boolean imperial, boolean autoscale)", "class_method_signature": "Strings.getDistanceDisplay(Context context, double meters, boolean imperial, boolean autoscale)", "testcase": false, "constructor": false}, {"identifier": "getTimeDisplay", "parameters": "(Context context, long milliseconds)", "modifiers": "public static", "return": "String", "signature": "String getTimeDisplay(Context context, long milliseconds)", "full_signature": "public static String getTimeDisplay(Context context, long milliseconds)", "class_method_signature": "Strings.getTimeDisplay(Context context, long milliseconds)", "testcase": false, "constructor": false}, {"identifier": "getAvailableLocales", "parameters": "(Context context)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getAvailableLocales(Context context)", "full_signature": "public static Map<String, String> getAvailableLocales(Context context)", "class_method_signature": "Strings.getAvailableLocales(Context context)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedMarkdownForFaqView", "parameters": "(String md)", "modifiers": "public static", "return": "String", "signature": "String getSanitizedMarkdownForFaqView(String md)", "full_signature": "public static String getSanitizedMarkdownForFaqView(String md)", "class_method_signature": "Strings.getSanitizedMarkdownForFaqView(String md)", "testcase": false, "constructor": false}, {"identifier": "getDegreesMinutesSeconds", "parameters": "(double decimaldegrees, boolean isLatitude)", "modifiers": "public static", "return": "String", "signature": "String getDegreesMinutesSeconds(double decimaldegrees, boolean isLatitude)", "full_signature": "public static String getDegreesMinutesSeconds(double decimaldegrees, boolean isLatitude)", "class_method_signature": "Strings.getDegreesMinutesSeconds(double decimaldegrees, boolean isLatitude)", "testcase": false, "constructor": false}, {"identifier": "getDegreesDecimalMinutes", "parameters": "(double decimaldegrees, boolean isLatitude)", "modifiers": "public static", "return": "String", "signature": "String getDegreesDecimalMinutes(double decimaldegrees, boolean isLatitude)", "full_signature": "public static String getDegreesDecimalMinutes(double decimaldegrees, boolean isLatitude)", "class_method_signature": "Strings.getDegreesDecimalMinutes(double decimaldegrees, boolean isLatitude)", "testcase": false, "constructor": false}, {"identifier": "getDecimalDegrees", "parameters": "(double decimaldegrees)", "modifiers": "public static", "return": "String", "signature": "String getDecimalDegrees(double decimaldegrees)", "full_signature": "public static String getDecimalDegrees(double decimaldegrees)", "class_method_signature": "Strings.getDecimalDegrees(double decimaldegrees)", "testcase": false, "constructor": false}, {"identifier": "getFormattedLatitude", "parameters": "(double decimaldegrees)", "modifiers": "public static", "return": "String", "signature": "String getFormattedLatitude(double decimaldegrees)", "full_signature": "public static String getFormattedLatitude(double decimaldegrees)", "class_method_signature": "Strings.getFormattedLatitude(double decimaldegrees)", "testcase": false, "constructor": false}, {"identifier": "getFormattedLongitude", "parameters": "(double decimaldegrees)", "modifiers": "public static", "return": "String", "signature": "String getFormattedLongitude(double decimaldegrees)", "full_signature": "public static String getFormattedLongitude(double decimaldegrees)", "class_method_signature": "Strings.getFormattedLongitude(double decimaldegrees)", "testcase": false, "constructor": false}, {"identifier": "getFormattedDegrees", "parameters": "(double decimaldegrees, boolean isLatitude, PreferenceHelper ph)", "modifiers": "static", "return": "String", "signature": "String getFormattedDegrees(double decimaldegrees, boolean isLatitude, PreferenceHelper ph)", "full_signature": "static String getFormattedDegrees(double decimaldegrees, boolean isLatitude, PreferenceHelper ph)", "class_method_signature": "Strings.getFormattedDegrees(double decimaldegrees, boolean isLatitude, PreferenceHelper ph)", "testcase": false, "constructor": false}, {"identifier": "getDetectedActivityName", "parameters": "(DetectedActivity detectedActivity)", "modifiers": "public static", "return": "String", "signature": "String getDetectedActivityName(DetectedActivity detectedActivity)", "full_signature": "public static String getDetectedActivityName(DetectedActivity detectedActivity)", "class_method_signature": "Strings.getDetectedActivityName(DetectedActivity detectedActivity)", "testcase": false, "constructor": false}], "file": "gpslogger/src/main/java/com/mendhak/gpslogger/common/Strings.java"}, "focal_method": {"identifier": "getFormattedCustomFileName", "parameters": "(String baseName, Calendar calendar, PreferenceHelper ph)", "modifiers": "public static", "return": "String", "body": "public static String getFormattedCustomFileName(String baseName, Calendar calendar, PreferenceHelper ph){\n\n        String finalFileName = baseName;\n        finalFileName = finalFileName.replaceAll(\"(?i)%ser\", String.valueOf(getBuildSerial()));\n        finalFileName = finalFileName.replaceAll(\"(?i)%ver\", String.valueOf(BuildConfig.VERSION_NAME));\n        finalFileName = finalFileName.replaceAll(\"(?i)%hour\", String.format(\"%02d\", calendar.get(Calendar.HOUR_OF_DAY)));\n        finalFileName = finalFileName.replaceAll(\"(?i)%min\", String.format(\"%02d\", calendar.get(Calendar.MINUTE)));\n        finalFileName = finalFileName.replaceAll(\"(?i)%year\",  String.valueOf(calendar.get(Calendar.YEAR)));\n        finalFileName = finalFileName.replaceAll(\"(?i)%monthname\", new SimpleDateFormat(\"MMM\", Locale.ENGLISH).format(calendar.getTime()).toLowerCase());\n        finalFileName = finalFileName.replaceAll(\"(?i)%month\", String.format(\"%02d\", calendar.get(Calendar.MONTH) +1));\n        finalFileName = finalFileName.replaceAll(\"(?i)%dayname\", new SimpleDateFormat(\"EE\", Locale.ENGLISH).format(calendar.getTime()).toLowerCase());\n        finalFileName = finalFileName.replaceAll(\"(?i)%day\", String.format(\"%02d\", calendar.get(Calendar.DAY_OF_MONTH) ));\n        finalFileName = finalFileName.replaceAll(\"(?i)%profile\", String.valueOf(ph.getCurrentProfileName()));\n        return finalFileName;\n    }", "signature": "String getFormattedCustomFileName(String baseName, Calendar calendar, PreferenceHelper ph)", "full_signature": "public static String getFormattedCustomFileName(String baseName, Calendar calendar, PreferenceHelper ph)", "class_method_signature": "Strings.getFormattedCustomFileName(String baseName, Calendar calendar, PreferenceHelper ph)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "valueOf", "getBuildSerial", "replaceAll", "valueOf", "replaceAll", "format", "get", "replaceAll", "format", "get", "replaceAll", "valueOf", "get", "replaceAll", "toLowerCase", "format", "getTime", "replaceAll", "format", "get", "replaceAll", "toLowerCase", "format", "getTime", "replaceAll", "format", "get", "replaceAll", "valueOf", "getCurrentProfileName"]}, "repository": {"repo_id": 1925457, "url": "https://github.com/mendhak/gpslogger", "language": "Java", "is_fork": false, "fork_count": 502, "stargazer_count": 1195, "size": 23203, "license": "licensed"}}