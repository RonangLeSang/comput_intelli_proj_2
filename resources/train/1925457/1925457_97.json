{"test_class": {"identifier": "CustomUrlLoggerTest", "superclass": "", "interfaces": "", "fields": [], "file": "gpslogger/src/test/java/com/mendhak/gpslogger/loggers/customurl/CustomUrlLoggerTest.java"}, "test_case": {"identifier": "getFormattedUrl_WhenDistanceAvailable_FormattedWithoutDecimal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFormattedUrl_WhenDistanceAvailable_FormattedWithoutDecimal() throws Exception {\n\n        Location loc = MockLocations.builder(\"MOCK\", 12.193, 19.111)\n                .build();\n\n\n        CustomUrlLogger logger = new CustomUrlLogger(\"\",0, \"GET\", \"\",\"\");\n        String expected =\"http://192.168.1.65:8000/test?lat=12.193&lon=19.111&dist=27\";\n        String urlTemplate = \"http://192.168.1.65:8000/test?lat=%LAT&lon=%LON&dist=%DIST\";\n        assertThat(\"Distance formatted without decimal\", logger.getFormattedTextblock(urlTemplate,loc, \"blah\", \"22\", 91, \"SRS11\", 0,\"\",\"\", 27), is(expected));\n\n    }", "signature": "void getFormattedUrl_WhenDistanceAvailable_FormattedWithoutDecimal()", "full_signature": "@Test public void getFormattedUrl_WhenDistanceAvailable_FormattedWithoutDecimal()", "class_method_signature": "CustomUrlLoggerTest.getFormattedUrl_WhenDistanceAvailable_FormattedWithoutDecimal()", "testcase": true, "constructor": false, "invocations": ["build", "builder", "assertThat", "getFormattedTextblock", "is"]}, "focal_class": {"identifier": "CustomUrlLogger", "superclass": "", "interfaces": "implements FileLogger", "fields": [{"original_string": "private final String name = \"URL\";", "modifier": "private final", "type": "String", "declarator": "name = \"URL\"", "var_name": "name"}, {"original_string": "private final String customLoggingUrl;", "modifier": "private final", "type": "String", "declarator": "customLoggingUrl", "var_name": "customLoggingUrl"}, {"original_string": "private final int batteryLevel;", "modifier": "private final", "type": "int", "declarator": "batteryLevel", "var_name": "batteryLevel"}, {"original_string": "private final String httpMethod;", "modifier": "private final", "type": "String", "declarator": "httpMethod", "var_name": "httpMethod"}, {"original_string": "private final String httpBody;", "modifier": "private final", "type": "String", "declarator": "httpBody", "var_name": "httpBody"}, {"original_string": "private final String httpHeaders;", "modifier": "private final", "type": "String", "declarator": "httpHeaders", "var_name": "httpHeaders"}, {"original_string": "private final String basicAuthUsername;", "modifier": "private final", "type": "String", "declarator": "basicAuthUsername", "var_name": "basicAuthUsername"}, {"original_string": "private final String basicAuthPassword;", "modifier": "private final", "type": "String", "declarator": "basicAuthPassword", "var_name": "basicAuthPassword"}], "methods": [{"identifier": "CustomUrlLogger", "parameters": "(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders)", "modifiers": "public", "return": "", "signature": " CustomUrlLogger(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders)", "full_signature": "public  CustomUrlLogger(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders)", "class_method_signature": "CustomUrlLogger.CustomUrlLogger(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders)", "testcase": false, "constructor": true}, {"identifier": "CustomUrlLogger", "parameters": "(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders, String basicAuthUsername, String basicAuthPassword)", "modifiers": "public", "return": "", "signature": " CustomUrlLogger(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders, String basicAuthUsername, String basicAuthPassword)", "full_signature": "public  CustomUrlLogger(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders, String basicAuthUsername, String basicAuthPassword)", "class_method_signature": "CustomUrlLogger.CustomUrlLogger(String customLoggingUrl, int batteryLevel, String httpMethod, String httpBody, String httpHeaders, String basicAuthUsername, String basicAuthPassword)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(Location loc)", "modifiers": "@Override public", "return": "void", "signature": "void write(Location loc)", "full_signature": "@Override public void write(Location loc)", "class_method_signature": "CustomUrlLogger.write(Location loc)", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "(String description, Location loc)", "modifiers": "@Override public", "return": "void", "signature": "void annotate(String description, Location loc)", "full_signature": "@Override public void annotate(String description, Location loc)", "class_method_signature": "CustomUrlLogger.annotate(String description, Location loc)", "testcase": false, "constructor": false}, {"identifier": "getFormattedTextblock", "parameters": "(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "modifiers": "public", "return": "String", "signature": "String getFormattedTextblock(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "full_signature": "public String getFormattedTextblock(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "class_method_signature": "CustomUrlLogger.getFormattedTextblock(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CustomUrlLogger.getName()", "testcase": false, "constructor": false}], "file": "gpslogger/src/main/java/com/mendhak/gpslogger/loggers/customurl/CustomUrlLogger.java"}, "focal_method": {"identifier": "getFormattedTextblock", "parameters": "(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "modifiers": "public", "return": "String", "body": "public String getFormattedTextblock(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)\n            throws Exception {\n\n        String logUrl = customLoggingUrl;\n        SerializableLocation sLoc = new SerializableLocation(loc);\n        logUrl = logUrl.replaceAll(\"(?i)%lat\", String.valueOf(sLoc.getLatitude()));\n        logUrl = logUrl.replaceAll(\"(?i)%lon\", String.valueOf(sLoc.getLongitude()));\n        logUrl = logUrl.replaceAll(\"(?i)%sat\", String.valueOf(sLoc.getSatelliteCount()));\n        logUrl = logUrl.replaceAll(\"(?i)%desc\", String.valueOf(URLEncoder.encode(Strings.htmlDecode(description), \"UTF-8\")));\n        logUrl = logUrl.replaceAll(\"(?i)%alt\", String.valueOf(sLoc.getAltitude()));\n        logUrl = logUrl.replaceAll(\"(?i)%acc\", String.valueOf(sLoc.getAccuracy()));\n        logUrl = logUrl.replaceAll(\"(?i)%dir\", String.valueOf(sLoc.getBearing()));\n        logUrl = logUrl.replaceAll(\"(?i)%prov\", String.valueOf(sLoc.getProvider()));\n        logUrl = logUrl.replaceAll(\"(?i)%spd\", String.valueOf(sLoc.getSpeed()));\n        logUrl = logUrl.replaceAll(\"(?i)%timestamp\", String.valueOf(sLoc.getTime()/1000));\n        logUrl = logUrl.replaceAll(\"(?i)%time\", String.valueOf(Strings.getIsoDateTime(new Date(sLoc.getTime()))));\n        logUrl = logUrl.replaceAll(\"(?i)%date\", String.valueOf(Strings.getIsoCalendarDate(new Date(sLoc.getTime()))));\n        logUrl = logUrl.replaceAll(\"(?i)%starttimestamp\", String.valueOf(sessionStartTimeStamp/1000));\n        logUrl = logUrl.replaceAll(\"(?i)%batt\", String.valueOf(batteryLevel));\n        logUrl = logUrl.replaceAll(\"(?i)%aid\", String.valueOf(androidId));\n        logUrl = logUrl.replaceAll(\"(?i)%ser\", String.valueOf(buildSerial));\n        logUrl = logUrl.replaceAll(\"(?i)%act\", String.valueOf(sLoc.getDetectedActivity()));\n        logUrl = logUrl.replaceAll(\"(?i)%filename\", fileName);\n        logUrl = logUrl.replaceAll(\"(?i)%profile\",URLEncoder.encode(profileName, \"UTF-8\"));\n        logUrl = logUrl.replaceAll(\"(?i)%hdop\", sLoc.getHDOP());\n        logUrl = logUrl.replaceAll(\"(?i)%vdop\", sLoc.getVDOP());\n        logUrl = logUrl.replaceAll(\"(?i)%pdop\", sLoc.getPDOP());\n        logUrl = logUrl.replaceAll(\"(?i)%dist\", String.valueOf((int)distance));\n\n        return logUrl;\n    }", "signature": "String getFormattedTextblock(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "full_signature": "public String getFormattedTextblock(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "class_method_signature": "CustomUrlLogger.getFormattedTextblock(String customLoggingUrl, Location loc, String description, String androidId,\n                                        float batteryLevel, String buildSerial, long sessionStartTimeStamp, String fileName, String profileName, double distance)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "valueOf", "getLatitude", "replaceAll", "valueOf", "getLongitude", "replaceAll", "valueOf", "getSatelliteCount", "replaceAll", "valueOf", "encode", "htmlDecode", "replaceAll", "valueOf", "getAltitude", "replaceAll", "valueOf", "getAccuracy", "replaceAll", "valueOf", "getBearing", "replaceAll", "valueOf", "getProvider", "replaceAll", "valueOf", "getSpeed", "replaceAll", "valueOf", "getTime", "replaceAll", "valueOf", "getIsoDateTime", "getTime", "replaceAll", "valueOf", "getIsoCalendarDate", "getTime", "replaceAll", "valueOf", "replaceAll", "valueOf", "replaceAll", "valueOf", "replaceAll", "valueOf", "replaceAll", "valueOf", "getDetectedActivity", "replaceAll", "replaceAll", "encode", "replaceAll", "getHDOP", "replaceAll", "getVDOP", "replaceAll", "getPDOP", "replaceAll", "valueOf"]}, "repository": {"repo_id": 1925457, "url": "https://github.com/mendhak/gpslogger", "language": "Java", "is_fork": false, "fork_count": 502, "stargazer_count": 1195, "size": 23203, "license": "licensed"}}