{"test_class": {"identifier": "MathsTest", "superclass": "", "interfaces": "", "fields": [], "file": "lang/src/test/java/net/openhft/lang/MathsTest.java"}, "test_case": {"identifier": "testIntLog2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIntLog2() {\n        for (int i = 0; i < 63; i++) {\n            long l = 1L << i;\n            assertEquals(i, Maths.intLog2(l));\n        }\n    }", "signature": "void testIntLog2()", "full_signature": "@Test public void testIntLog2()", "class_method_signature": "MathsTest.testIntLog2()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "intLog2"]}, "focal_class": {"identifier": "Maths", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double WHOLE_NUMBER = 1L << 53;", "modifier": "private static final", "type": "double", "declarator": "WHOLE_NUMBER = 1L << 53", "var_name": "WHOLE_NUMBER"}, {"original_string": "private static final long[] TENS = new long[19];", "modifier": "private static final", "type": "long[]", "declarator": "TENS = new long[19]", "var_name": "TENS"}], "methods": [{"identifier": "round2", "parameters": "(double d)", "modifiers": "public static", "return": "double", "signature": "double round2(double d)", "full_signature": "public static double round2(double d)", "class_method_signature": "Maths.round2(double d)", "testcase": false, "constructor": false}, {"identifier": "round4", "parameters": "(double d)", "modifiers": "public static", "return": "double", "signature": "double round4(double d)", "full_signature": "public static double round4(double d)", "class_method_signature": "Maths.round4(double d)", "testcase": false, "constructor": false}, {"identifier": "round6", "parameters": "(double d)", "modifiers": "public static", "return": "double", "signature": "double round6(double d)", "full_signature": "public static double round6(double d)", "class_method_signature": "Maths.round6(double d)", "testcase": false, "constructor": false}, {"identifier": "round8", "parameters": "(double d)", "modifiers": "public static", "return": "double", "signature": "double round8(double d)", "full_signature": "public static double round8(double d)", "class_method_signature": "Maths.round8(double d)", "testcase": false, "constructor": false}, {"identifier": "power10", "parameters": "(int n)", "modifiers": "public static", "return": "long", "signature": "long power10(int n)", "full_signature": "public static long power10(int n)", "class_method_signature": "Maths.power10(int n)", "testcase": false, "constructor": false}, {"identifier": "nextPower2", "parameters": "(int n, int min)", "modifiers": "public static", "return": "int", "signature": "int nextPower2(int n, int min)", "full_signature": "public static int nextPower2(int n, int min)", "class_method_signature": "Maths.nextPower2(int n, int min)", "testcase": false, "constructor": false}, {"identifier": "nextPower2", "parameters": "(long n, long min)", "modifiers": "public static", "return": "long", "signature": "long nextPower2(long n, long min)", "full_signature": "public static long nextPower2(long n, long min)", "class_method_signature": "Maths.nextPower2(long n, long min)", "testcase": false, "constructor": false}, {"identifier": "isPowerOf2", "parameters": "(int n)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPowerOf2(int n)", "full_signature": "public static boolean isPowerOf2(int n)", "class_method_signature": "Maths.isPowerOf2(int n)", "testcase": false, "constructor": false}, {"identifier": "isPowerOf2", "parameters": "(long n)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPowerOf2(long n)", "full_signature": "public static boolean isPowerOf2(long n)", "class_method_signature": "Maths.isPowerOf2(long n)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(int n)", "modifiers": "public static", "return": "int", "signature": "int hash(int n)", "full_signature": "public static int hash(int n)", "class_method_signature": "Maths.hash(int n)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(long n)", "modifiers": "public static", "return": "long", "signature": "long hash(long n)", "full_signature": "public static long hash(long n)", "class_method_signature": "Maths.hash(long n)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "long", "signature": "long hash(CharSequence cs)", "full_signature": "public static long hash(CharSequence cs)", "class_method_signature": "Maths.hash(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(long x, long y)", "modifiers": "public static", "return": "int", "signature": "int compare(long x, long y)", "full_signature": "public static int compare(long x, long y)", "class_method_signature": "Maths.compare(long x, long y)", "testcase": false, "constructor": false}, {"identifier": "intLog2", "parameters": "(long num)", "modifiers": "public static", "return": "int", "signature": "int intLog2(long num)", "full_signature": "public static int intLog2(long num)", "class_method_signature": "Maths.intLog2(long num)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(long l, String error)", "modifiers": "public static", "return": "int", "signature": "int toInt(long l, String error)", "full_signature": "public static int toInt(long l, String error)", "class_method_signature": "Maths.toInt(long l, String error)", "testcase": false, "constructor": false}, {"identifier": "agitate", "parameters": "(long l)", "modifiers": "public static", "return": "long", "signature": "long agitate(long l)", "full_signature": "public static long agitate(long l)", "class_method_signature": "Maths.agitate(long l)", "testcase": false, "constructor": false}], "file": "lang/src/main/java/net/openhft/lang/Maths.java"}, "focal_method": {"identifier": "intLog2", "parameters": "(long num)", "modifiers": "public static", "return": "int", "body": "public static int intLog2(long num) {\n        long l = Double.doubleToRawLongBits(num);\n        return (int) ((l >> 52) - 1023);\n    }", "signature": "int intLog2(long num)", "full_signature": "public static int intLog2(long num)", "class_method_signature": "Maths.intLog2(long num)", "testcase": false, "constructor": false, "invocations": ["doubleToRawLongBits"]}, "repository": {"repo_id": 10311319, "url": "https://github.com/OpenHFT/Java-Lang", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 274, "size": 88148, "license": "licensed"}}