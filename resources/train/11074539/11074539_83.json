{"test_class": {"identifier": "GlusterFileSystemProviderTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "public static final String SERVER = \"hostname\";", "modifier": "public static final", "type": "String", "declarator": "SERVER = \"hostname\"", "var_name": "SERVER"}, {"original_string": "public static final String VOLNAME = \"testvol\";", "modifier": "public static final", "type": "String", "declarator": "VOLNAME = \"testvol\"", "var_name": "VOLNAME"}, {"original_string": "@Mock\n    private GlusterFileSystem mockFileSystem;", "modifier": "@Mock\n    private", "type": "GlusterFileSystem", "declarator": "mockFileSystem", "var_name": "mockFileSystem"}, {"original_string": "@Mock\n    private GlusterFileSystem differentMockFileSystem;", "modifier": "@Mock\n    private", "type": "GlusterFileSystem", "declarator": "differentMockFileSystem", "var_name": "differentMockFileSystem"}, {"original_string": "@Mock\n    private GlusterPath mockPath;", "modifier": "@Mock\n    private", "type": "GlusterPath", "declarator": "mockPath", "var_name": "mockPath"}, {"original_string": "@Mock\n    private GlusterPath targetPath;", "modifier": "@Mock\n    private", "type": "GlusterPath", "declarator": "targetPath", "var_name": "targetPath"}, {"original_string": "@Mock\n    private GlusterFileChannel mockChannel;", "modifier": "@Mock\n    private", "type": "GlusterFileChannel", "declarator": "mockChannel", "var_name": "mockChannel"}, {"original_string": "@Mock\n    private GlusterDirectoryIterator mockIterator;", "modifier": "@Mock\n    private", "type": "GlusterDirectoryIterator", "declarator": "mockIterator", "var_name": "mockIterator"}, {"original_string": "@Mock\n    private GlusterDirectoryStream mockStream;", "modifier": "@Mock\n    private", "type": "GlusterDirectoryStream", "declarator": "mockStream", "var_name": "mockStream"}, {"original_string": "@Mock\n    private DirectoryStream.Filter<? super Path> mockFilter;", "modifier": "@Mock\n    private", "type": "DirectoryStream.Filter<? super Path>", "declarator": "mockFilter", "var_name": "mockFilter"}, {"original_string": "@Spy\n    private GlusterFileSystemProvider provider = new GlusterFileSystemProvider();", "modifier": "@Spy\n    private", "type": "GlusterFileSystemProvider", "declarator": "provider = new GlusterFileSystemProvider()", "var_name": "provider"}], "file": "glusterfs-java-filesystem/src/test/java/com/peircean/glusterfs/GlusterFileSystemProviderTest.java"}, "test_case": {"identifier": "testCreateSymlink_whenExists", "parameters": "()", "modifiers": "@Test(expected = FileAlreadyExistsException.class) public", "return": "void", "body": "@Test(expected = FileAlreadyExistsException.class)\n    public void testCreateSymlink_whenExists() throws IOException {\n        Mockito.doReturn(\"mockpath\").when(mockPath).toString();\n        \n        mockStatic(Files.class);\n        when(Files.exists(mockPath, LinkOption.NOFOLLOW_LINKS)).thenReturn(true);\n\n        provider.createSymbolicLink(mockPath, targetPath);\n    }", "signature": "void testCreateSymlink_whenExists()", "full_signature": "@Test(expected = FileAlreadyExistsException.class) public void testCreateSymlink_whenExists()", "class_method_signature": "GlusterFileSystemProviderTest.testCreateSymlink_whenExists()", "testcase": true, "constructor": false, "invocations": ["toString", "when", "doReturn", "mockStatic", "thenReturn", "when", "exists", "createSymbolicLink"]}, "focal_class": {"identifier": "GlusterFileSystemProvider", "superclass": "extends FileSystemProvider", "interfaces": "", "fields": [{"original_string": "public static final String GLUSTER = \"gluster\";", "modifier": "public static final", "type": "String", "declarator": "GLUSTER = \"gluster\"", "var_name": "GLUSTER"}, {"original_string": "public static final int GLUSTERD_PORT = 24007;", "modifier": "public static final", "type": "int", "declarator": "GLUSTERD_PORT = 24007", "var_name": "GLUSTERD_PORT"}, {"original_string": "public static final String TCP = \"tcp\";", "modifier": "public static final", "type": "String", "declarator": "TCP = \"tcp\"", "var_name": "TCP"}, {"original_string": "@Getter(AccessLevel.PACKAGE)\n    private static Map<String, GlusterFileSystem> cache = new HashMap<String, GlusterFileSystem>();", "modifier": "@Getter(AccessLevel.PACKAGE)\n    private static", "type": "Map<String, GlusterFileSystem>", "declarator": "cache = new HashMap<String, GlusterFileSystem>()", "var_name": "cache"}], "methods": [{"identifier": "getScheme", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getScheme()", "full_signature": "@Override public String getScheme()", "class_method_signature": "GlusterFileSystemProvider.getScheme()", "testcase": false, "constructor": false}, {"identifier": "newFileSystem", "parameters": "(URI uri, Map<String, ?> stringMap)", "modifiers": "@Override public", "return": "FileSystem", "signature": "FileSystem newFileSystem(URI uri, Map<String, ?> stringMap)", "full_signature": "@Override public FileSystem newFileSystem(URI uri, Map<String, ?> stringMap)", "class_method_signature": "GlusterFileSystemProvider.newFileSystem(URI uri, Map<String, ?> stringMap)", "testcase": false, "constructor": false}, {"identifier": "parseAuthority", "parameters": "(String authority)", "modifiers": "", "return": "String[]", "signature": "String[] parseAuthority(String authority)", "full_signature": " String[] parseAuthority(String authority)", "class_method_signature": "GlusterFileSystemProvider.parseAuthority(String authority)", "testcase": false, "constructor": false}, {"identifier": "glfsNew", "parameters": "(String volname)", "modifiers": "", "return": "long", "signature": "long glfsNew(String volname)", "full_signature": " long glfsNew(String volname)", "class_method_signature": "GlusterFileSystemProvider.glfsNew(String volname)", "testcase": false, "constructor": false}, {"identifier": "glfsSetVolfileServer", "parameters": "(String host, long volptr)", "modifiers": "", "return": "void", "signature": "void glfsSetVolfileServer(String host, long volptr)", "full_signature": " void glfsSetVolfileServer(String host, long volptr)", "class_method_signature": "GlusterFileSystemProvider.glfsSetVolfileServer(String host, long volptr)", "testcase": false, "constructor": false}, {"identifier": "glfsInit", "parameters": "(String authorityString, long volptr)", "modifiers": "", "return": "void", "signature": "void glfsInit(String authorityString, long volptr)", "full_signature": " void glfsInit(String authorityString, long volptr)", "class_method_signature": "GlusterFileSystemProvider.glfsInit(String authorityString, long volptr)", "testcase": false, "constructor": false}, {"identifier": "getFileSystem", "parameters": "(URI uri)", "modifiers": "@Override public", "return": "FileSystem", "signature": "FileSystem getFileSystem(URI uri)", "full_signature": "@Override public FileSystem getFileSystem(URI uri)", "class_method_signature": "GlusterFileSystemProvider.getFileSystem(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(URI uri)", "modifiers": "@Override public", "return": "Path", "signature": "Path getPath(URI uri)", "full_signature": "@Override public Path getPath(URI uri)", "class_method_signature": "GlusterFileSystemProvider.getPath(URI uri)", "testcase": false, "constructor": false}, {"identifier": "newByteChannel", "parameters": "(Path path, Set<? extends OpenOption> openOptions, FileAttribute<?>... fileAttributes)", "modifiers": "@Override public", "return": "SeekableByteChannel", "signature": "SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> openOptions, FileAttribute<?>... fileAttributes)", "full_signature": "@Override public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> openOptions, FileAttribute<?>... fileAttributes)", "class_method_signature": "GlusterFileSystemProvider.newByteChannel(Path path, Set<? extends OpenOption> openOptions, FileAttribute<?>... fileAttributes)", "testcase": false, "constructor": false}, {"identifier": "newFileChannel", "parameters": "(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs)", "modifiers": "@Override public", "return": "FileChannel", "signature": "FileChannel newFileChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs)", "full_signature": "@Override public FileChannel newFileChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs)", "class_method_signature": "GlusterFileSystemProvider.newFileChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs)", "testcase": false, "constructor": false}, {"identifier": "newFileChannelHelper", "parameters": "(Path path, Set<? extends OpenOption> options, FileAttribute<?>[] attrs)", "modifiers": "", "return": "FileChannel", "signature": "FileChannel newFileChannelHelper(Path path, Set<? extends OpenOption> options, FileAttribute<?>[] attrs)", "full_signature": " FileChannel newFileChannelHelper(Path path, Set<? extends OpenOption> options, FileAttribute<?>[] attrs)", "class_method_signature": "GlusterFileSystemProvider.newFileChannelHelper(Path path, Set<? extends OpenOption> options, FileAttribute<?>[] attrs)", "testcase": false, "constructor": false}, {"identifier": "newDirectoryStream", "parameters": "(Path path, DirectoryStream.Filter<? super Path> filter)", "modifiers": "@Override public", "return": "DirectoryStream<Path>", "signature": "DirectoryStream<Path> newDirectoryStream(Path path, DirectoryStream.Filter<? super Path> filter)", "full_signature": "@Override public DirectoryStream<Path> newDirectoryStream(Path path, DirectoryStream.Filter<? super Path> filter)", "class_method_signature": "GlusterFileSystemProvider.newDirectoryStream(Path path, DirectoryStream.Filter<? super Path> filter)", "testcase": false, "constructor": false}, {"identifier": "createDirectory", "parameters": "(Path path, FileAttribute<?>... fileAttributes)", "modifiers": "@Override public", "return": "void", "signature": "void createDirectory(Path path, FileAttribute<?>... fileAttributes)", "full_signature": "@Override public void createDirectory(Path path, FileAttribute<?>... fileAttributes)", "class_method_signature": "GlusterFileSystemProvider.createDirectory(Path path, FileAttribute<?>... fileAttributes)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Path path)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Path path)", "full_signature": "@Override public void delete(Path path)", "class_method_signature": "GlusterFileSystemProvider.delete(Path path)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Path path, Path path2, CopyOption... copyOptions)", "modifiers": "@Override public", "return": "void", "signature": "void copy(Path path, Path path2, CopyOption... copyOptions)", "full_signature": "@Override public void copy(Path path, Path path2, CopyOption... copyOptions)", "class_method_signature": "GlusterFileSystemProvider.copy(Path path, Path path2, CopyOption... copyOptions)", "testcase": false, "constructor": false}, {"identifier": "copyFileAttributes", "parameters": "(Path path, Path path2)", "modifiers": "", "return": "void", "signature": "void copyFileAttributes(Path path, Path path2)", "full_signature": " void copyFileAttributes(Path path, Path path2)", "class_method_signature": "GlusterFileSystemProvider.copyFileAttributes(Path path, Path path2)", "testcase": false, "constructor": false}, {"identifier": "copyFileContent", "parameters": "(Path path, Path path2)", "modifiers": "", "return": "void", "signature": "void copyFileContent(Path path, Path path2)", "full_signature": " void copyFileContent(Path path, Path path2)", "class_method_signature": "GlusterFileSystemProvider.copyFileContent(Path path, Path path2)", "testcase": false, "constructor": false}, {"identifier": "directoryIsEmpty", "parameters": "(Path path)", "modifiers": "", "return": "boolean", "signature": "boolean directoryIsEmpty(Path path)", "full_signature": " boolean directoryIsEmpty(Path path)", "class_method_signature": "GlusterFileSystemProvider.directoryIsEmpty(Path path)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(Path path, Path path2, CopyOption... copyOptions)", "modifiers": "@Override public", "return": "void", "signature": "void move(Path path, Path path2, CopyOption... copyOptions)", "full_signature": "@Override public void move(Path path, Path path2, CopyOption... copyOptions)", "class_method_signature": "GlusterFileSystemProvider.move(Path path, Path path2, CopyOption... copyOptions)", "testcase": false, "constructor": false}, {"identifier": "guardFileExists", "parameters": "(Path path)", "modifiers": "", "return": "void", "signature": "void guardFileExists(Path path)", "full_signature": " void guardFileExists(Path path)", "class_method_signature": "GlusterFileSystemProvider.guardFileExists(Path path)", "testcase": false, "constructor": false}, {"identifier": "guardAbsolutePath", "parameters": "(Path p)", "modifiers": "", "return": "void", "signature": "void guardAbsolutePath(Path p)", "full_signature": " void guardAbsolutePath(Path p)", "class_method_signature": "GlusterFileSystemProvider.guardAbsolutePath(Path p)", "testcase": false, "constructor": false}, {"identifier": "isSameFile", "parameters": "(Path path, Path path2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSameFile(Path path, Path path2)", "full_signature": "@Override public boolean isSameFile(Path path, Path path2)", "class_method_signature": "GlusterFileSystemProvider.isSameFile(Path path, Path path2)", "testcase": false, "constructor": false}, {"identifier": "statPath", "parameters": "(Path path)", "modifiers": "", "return": "stat", "signature": "stat statPath(Path path)", "full_signature": " stat statPath(Path path)", "class_method_signature": "GlusterFileSystemProvider.statPath(Path path)", "testcase": false, "constructor": false}, {"identifier": "isHidden", "parameters": "(Path path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHidden(Path path)", "full_signature": "@Override public boolean isHidden(Path path)", "class_method_signature": "GlusterFileSystemProvider.isHidden(Path path)", "testcase": false, "constructor": false}, {"identifier": "getFileStore", "parameters": "(Path path)", "modifiers": "@Override public", "return": "FileStore", "signature": "FileStore getFileStore(Path path)", "full_signature": "@Override public FileStore getFileStore(Path path)", "class_method_signature": "GlusterFileSystemProvider.getFileStore(Path path)", "testcase": false, "constructor": false}, {"identifier": "checkAccess", "parameters": "(Path path, AccessMode... accessModes)", "modifiers": "@Override public", "return": "void", "signature": "void checkAccess(Path path, AccessMode... accessModes)", "full_signature": "@Override public void checkAccess(Path path, AccessMode... accessModes)", "class_method_signature": "GlusterFileSystemProvider.checkAccess(Path path, AccessMode... accessModes)", "testcase": false, "constructor": false}, {"identifier": "modeInt", "parameters": "(AccessMode m)", "modifiers": "private", "return": "int", "signature": "int modeInt(AccessMode m)", "full_signature": "private int modeInt(AccessMode m)", "class_method_signature": "GlusterFileSystemProvider.modeInt(AccessMode m)", "testcase": false, "constructor": false}, {"identifier": "getFileAttributeView", "parameters": "(Path path, Class<V> vClass, LinkOption... linkOptions)", "modifiers": "@Override public", "return": "V", "signature": "V getFileAttributeView(Path path, Class<V> vClass, LinkOption... linkOptions)", "full_signature": "@Override public V getFileAttributeView(Path path, Class<V> vClass, LinkOption... linkOptions)", "class_method_signature": "GlusterFileSystemProvider.getFileAttributeView(Path path, Class<V> vClass, LinkOption... linkOptions)", "testcase": false, "constructor": false}, {"identifier": "readAttributes", "parameters": "(Path path, Class<A> type, LinkOption... linkOptions)", "modifiers": "@Override public", "return": "A", "signature": "A readAttributes(Path path, Class<A> type, LinkOption... linkOptions)", "full_signature": "@Override public A readAttributes(Path path, Class<A> type, LinkOption... linkOptions)", "class_method_signature": "GlusterFileSystemProvider.readAttributes(Path path, Class<A> type, LinkOption... linkOptions)", "testcase": false, "constructor": false}, {"identifier": "readAttributes", "parameters": "(Path path, String s, LinkOption... linkOptions)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> readAttributes(Path path, String s, LinkOption... linkOptions)", "full_signature": "@Override public Map<String, Object> readAttributes(Path path, String s, LinkOption... linkOptions)", "class_method_signature": "GlusterFileSystemProvider.readAttributes(Path path, String s, LinkOption... linkOptions)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(Path path, String s, Object o, LinkOption... linkOptions)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(Path path, String s, Object o, LinkOption... linkOptions)", "full_signature": "@Override public void setAttribute(Path path, String s, Object o, LinkOption... linkOptions)", "class_method_signature": "GlusterFileSystemProvider.setAttribute(Path path, String s, Object o, LinkOption... linkOptions)", "testcase": false, "constructor": false}, {"identifier": "readSymbolicLink", "parameters": "(Path link)", "modifiers": "@Override public", "return": "Path", "signature": "Path readSymbolicLink(Path link)", "full_signature": "@Override public Path readSymbolicLink(Path link)", "class_method_signature": "GlusterFileSystemProvider.readSymbolicLink(Path link)", "testcase": false, "constructor": false}, {"identifier": "createSymbolicLink", "parameters": "(Path link, Path target, FileAttribute<?>... attrs)", "modifiers": "@Override public", "return": "void", "signature": "void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)", "full_signature": "@Override public void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)", "class_method_signature": "GlusterFileSystemProvider.createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(long volptr)", "modifiers": "", "return": "int", "signature": "int close(long volptr)", "full_signature": " int close(long volptr)", "class_method_signature": "GlusterFileSystemProvider.close(long volptr)", "testcase": false, "constructor": false}, {"identifier": "getTotalSpace", "parameters": "(long volptr)", "modifiers": "", "return": "long", "signature": "long getTotalSpace(long volptr)", "full_signature": " long getTotalSpace(long volptr)", "class_method_signature": "GlusterFileSystemProvider.getTotalSpace(long volptr)", "testcase": false, "constructor": false}, {"identifier": "getUsableSpace", "parameters": "(long volptr)", "modifiers": "", "return": "long", "signature": "long getUsableSpace(long volptr)", "full_signature": " long getUsableSpace(long volptr)", "class_method_signature": "GlusterFileSystemProvider.getUsableSpace(long volptr)", "testcase": false, "constructor": false}, {"identifier": "getUnallocatedSpace", "parameters": "(long volptr)", "modifiers": "", "return": "long", "signature": "long getUnallocatedSpace(long volptr)", "full_signature": " long getUnallocatedSpace(long volptr)", "class_method_signature": "GlusterFileSystemProvider.getUnallocatedSpace(long volptr)", "testcase": false, "constructor": false}], "file": "glusterfs-java-filesystem/src/main/java/com/peircean/glusterfs/GlusterFileSystemProvider.java"}, "focal_method": {"identifier": "createSymbolicLink", "parameters": "(Path link, Path target, FileAttribute<?>... attrs)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs) throws IOException {\n        String linkPath = link.toString();\n        if (Files.exists(link, LinkOption.NOFOLLOW_LINKS)) {\n            throw new FileAlreadyExistsException(linkPath);\n        }\n        if (null != attrs && attrs.length > 0) {\n            throw new UnsupportedOperationException(\"glfs_symlink does not support atomic mode/perms\");\n        }\n        GlusterFileSystem fileSystem = (GlusterFileSystem) link.getFileSystem();\n        long volptr = fileSystem.getVolptr();\n        int ret = GLFS.glfs_symlink(volptr, target.toString(), linkPath);\n        if (0 != ret) {\n            throw new IOException(\"Unknown error creating symlink: \" + linkPath);\n        }\n    }", "signature": "void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)", "full_signature": "@Override public void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)", "class_method_signature": "GlusterFileSystemProvider.createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)", "testcase": false, "constructor": false, "invocations": ["toString", "exists", "getFileSystem", "getVolptr", "glfs_symlink", "toString"]}, "repository": {"repo_id": 11074539, "url": "https://github.com/gluster/glusterfs-java-filesystem", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 48, "size": 396, "license": "licensed"}}