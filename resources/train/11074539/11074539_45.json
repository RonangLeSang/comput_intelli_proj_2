{"test_class": {"identifier": "GlusterWatchKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GlusterPath mockPath;", "modifier": "@Mock", "type": "GlusterPath", "declarator": "mockPath", "var_name": "mockPath"}, {"original_string": "@Mock\n    WatchEvent.Kind mockKind;", "modifier": "@Mock", "type": "WatchEvent.Kind", "declarator": "mockKind", "var_name": "mockKind"}, {"original_string": "WatchEvent.Kind[] mockKinds = new WatchEvent.Kind[]{mockKind};", "modifier": "", "type": "WatchEvent.Kind[]", "declarator": "mockKinds = new WatchEvent.Kind[]{mockKind}", "var_name": "mockKinds"}, {"original_string": "GlusterWatchKey key;", "modifier": "", "type": "GlusterWatchKey", "declarator": "key", "var_name": "key"}], "file": "glusterfs-java-filesystem/src/test/java/com/peircean/glusterfs/GlusterWatchKeyTest.java"}, "test_case": {"identifier": "testFindPendingEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindPendingEvents() {\n\n    }", "signature": "void testFindPendingEvents()", "full_signature": "@Test public void testFindPendingEvents()", "class_method_signature": "GlusterWatchKeyTest.testFindPendingEvents()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "GlusterWatchKey", "superclass": "", "interfaces": "implements WatchKey", "fields": [{"original_string": "private boolean valid = true;", "modifier": "private", "type": "boolean", "declarator": "valid = true", "var_name": "valid"}, {"original_string": "private boolean ready = true;", "modifier": "private", "type": "boolean", "declarator": "ready = true", "var_name": "ready"}, {"original_string": "Map<Path, GlusterWatchEvent> events = new HashMap<>();", "modifier": "", "type": "Map<Path, GlusterWatchEvent>", "declarator": "events = new HashMap<>()", "var_name": "events"}, {"original_string": "final private GlusterPath path;", "modifier": "final private", "type": "GlusterPath", "declarator": "path", "var_name": "path"}, {"original_string": "@NonNull\n    private WatchEvent.Kind[] kinds;", "modifier": "@NonNull\n    private", "type": "WatchEvent.Kind[]", "declarator": "kinds", "var_name": "kinds"}, {"original_string": "private long lastPolled = (new Date()).getTime();", "modifier": "private", "type": "long", "declarator": "lastPolled = (new Date()).getTime()", "var_name": "lastPolled"}], "methods": [{"identifier": "isValid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "@Override public boolean isValid()", "class_method_signature": "GlusterWatchKey.isValid()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean update()", "full_signature": "public boolean update()", "class_method_signature": "GlusterWatchKey.update()", "testcase": false, "constructor": false}, {"identifier": "processExistingFile", "parameters": "(List<Path> files, Path f)", "modifiers": "", "return": "boolean", "signature": "boolean processExistingFile(List<Path> files, Path f)", "full_signature": " boolean processExistingFile(List<Path> files, Path f)", "class_method_signature": "GlusterWatchKey.processExistingFile(List<Path> files, Path f)", "testcase": false, "constructor": false}, {"identifier": "checkDeleted", "parameters": "(List<Path> files, Path f)", "modifiers": "", "return": "boolean", "signature": "boolean checkDeleted(List<Path> files, Path f)", "full_signature": " boolean checkDeleted(List<Path> files, Path f)", "class_method_signature": "GlusterWatchKey.checkDeleted(List<Path> files, Path f)", "testcase": false, "constructor": false}, {"identifier": "checkCreated", "parameters": "(Path f, long lastModified)", "modifiers": "", "return": "boolean", "signature": "boolean checkCreated(Path f, long lastModified)", "full_signature": " boolean checkCreated(Path f, long lastModified)", "class_method_signature": "GlusterWatchKey.checkCreated(Path f, long lastModified)", "testcase": false, "constructor": false}, {"identifier": "checkModified", "parameters": "(GlusterWatchEvent event, long lastModified)", "modifiers": "", "return": "boolean", "signature": "boolean checkModified(GlusterWatchEvent event, long lastModified)", "full_signature": " boolean checkModified(GlusterWatchEvent event, long lastModified)", "class_method_signature": "GlusterWatchKey.checkModified(GlusterWatchEvent event, long lastModified)", "testcase": false, "constructor": false}, {"identifier": "kindsContains", "parameters": "(WatchEvent.Kind kind)", "modifiers": "", "return": "boolean", "signature": "boolean kindsContains(WatchEvent.Kind kind)", "full_signature": " boolean kindsContains(WatchEvent.Kind kind)", "class_method_signature": "GlusterWatchKey.kindsContains(WatchEvent.Kind kind)", "testcase": false, "constructor": false}, {"identifier": "pollEvents", "parameters": "()", "modifiers": "@Override synchronized public", "return": "List<WatchEvent<?>>", "signature": "List<WatchEvent<?>> pollEvents()", "full_signature": "@Override synchronized public List<WatchEvent<?>> pollEvents()", "class_method_signature": "GlusterWatchKey.pollEvents()", "testcase": false, "constructor": false}, {"identifier": "findPendingEvents", "parameters": "()", "modifiers": "", "return": "LinkedList<WatchEvent<?>>", "signature": "LinkedList<WatchEvent<?>> findPendingEvents()", "full_signature": " LinkedList<WatchEvent<?>> findPendingEvents()", "class_method_signature": "GlusterWatchKey.findPendingEvents()", "testcase": false, "constructor": false}, {"identifier": "queueEventIfPending", "parameters": "(LinkedList<WatchEvent<?>> pendingEvents, Path p)", "modifiers": "private", "return": "long", "signature": "long queueEventIfPending(LinkedList<WatchEvent<?>> pendingEvents, Path p)", "full_signature": "private long queueEventIfPending(LinkedList<WatchEvent<?>> pendingEvents, Path p)", "class_method_signature": "GlusterWatchKey.queueEventIfPending(LinkedList<WatchEvent<?>> pendingEvents, Path p)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override synchronized public", "return": "boolean", "signature": "boolean reset()", "full_signature": "@Override synchronized public boolean reset()", "class_method_signature": "GlusterWatchKey.reset()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "GlusterWatchKey.cancel()", "testcase": false, "constructor": false}, {"identifier": "watchable", "parameters": "()", "modifiers": "@Override public", "return": "Watchable", "signature": "Watchable watchable()", "full_signature": "@Override public Watchable watchable()", "class_method_signature": "GlusterWatchKey.watchable()", "testcase": false, "constructor": false}], "file": "glusterfs-java-filesystem/src/main/java/com/peircean/glusterfs/GlusterWatchKey.java"}, "focal_method": {"identifier": "findPendingEvents", "parameters": "()", "modifiers": "", "return": "LinkedList<WatchEvent<?>>", "body": "LinkedList<WatchEvent<?>> findPendingEvents() {\n        long maxModifiedTime = lastPolled;\n        LinkedList<WatchEvent<?>> pendingEvents = new LinkedList<>();\n        for (Path p : events.keySet()) {\n            long lastModified = queueEventIfPending(pendingEvents, p);\n            maxModifiedTime = Math.max(maxModifiedTime, lastModified);\n        }\n        lastPolled = maxModifiedTime;\n        return pendingEvents;\n    }", "signature": "LinkedList<WatchEvent<?>> findPendingEvents()", "full_signature": " LinkedList<WatchEvent<?>> findPendingEvents()", "class_method_signature": "GlusterWatchKey.findPendingEvents()", "testcase": false, "constructor": false, "invocations": ["keySet", "queueEventIfPending", "max"]}, "repository": {"repo_id": 11074539, "url": "https://github.com/gluster/glusterfs-java-filesystem", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 48, "size": 396, "license": "licensed"}}