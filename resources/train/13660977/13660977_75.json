{"test_class": {"identifier": "TestAbstractNameSetOnlyPermission", "superclass": "", "interfaces": "", "fields": [], "file": "permission/src/test/java/org/wildfly/security/permission/TestAbstractNameSetOnlyPermission.java"}, "test_case": {"identifier": "testSerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialization() {\n        SomePermission perm = new SomePermission(\"name1\");\n        SerializedPermission obj = (SerializedPermission) perm.writeReplace();\n        SomePermission resolved = (SomePermission) obj.readResolve();\n        assertEquals(perm, resolved);\n\n        AbstractPermissionCollection permissions = perm.newPermissionCollection();\n        permissions.add(new SomePermission(\"name2\"));\n        SerializedPermissionCollection obj2 = (SerializedPermissionCollection) permissions.writeReplace();\n        AbstractPermissionCollection resolvedCollection = (AbstractPermissionCollection) obj2.readResolve();\n        assertTrue(PermissionUtil.equals(permissions, resolvedCollection));\n        Iterator<Permission> iterator = resolvedCollection.iterator();\n        assertTrue(iterator.hasNext());\n        assertEquals(new SomePermission(\"name2\"), iterator.next());\n        assertFalse(iterator.hasNext());\n    }", "signature": "void testSerialization()", "full_signature": "@Test public void testSerialization()", "class_method_signature": "TestAbstractNameSetOnlyPermission.testSerialization()", "testcase": true, "constructor": false, "invocations": ["writeReplace", "readResolve", "assertEquals", "newPermissionCollection", "add", "writeReplace", "readResolve", "assertTrue", "equals", "iterator", "assertTrue", "hasNext", "assertEquals", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "AbstractNameSetOnlyPermission", "superclass": "extends AbstractNameOnlyPermission<This>", "interfaces": "", "fields": [{"original_string": "private final StringEnumeration nameEnumeration;", "modifier": "private final", "type": "StringEnumeration", "declarator": "nameEnumeration", "var_name": "nameEnumeration"}], "methods": [{"identifier": "AbstractNameSetOnlyPermission", "parameters": "(final String name, final StringEnumeration nameEnumeration)", "modifiers": "protected", "return": "", "signature": " AbstractNameSetOnlyPermission(final String name, final StringEnumeration nameEnumeration)", "full_signature": "protected  AbstractNameSetOnlyPermission(final String name, final StringEnumeration nameEnumeration)", "class_method_signature": "AbstractNameSetOnlyPermission.AbstractNameSetOnlyPermission(final String name, final StringEnumeration nameEnumeration)", "testcase": false, "constructor": true}, {"identifier": "getNameEnumeration", "parameters": "()", "modifiers": "", "return": "StringEnumeration", "signature": "StringEnumeration getNameEnumeration()", "full_signature": " StringEnumeration getNameEnumeration()", "class_method_signature": "AbstractNameSetOnlyPermission.getNameEnumeration()", "testcase": false, "constructor": false}, {"identifier": "newPermissionCollection", "parameters": "()", "modifiers": "public", "return": "AbstractPermissionCollection", "signature": "AbstractPermissionCollection newPermissionCollection()", "full_signature": "public AbstractPermissionCollection newPermissionCollection()", "class_method_signature": "AbstractNameSetOnlyPermission.newPermissionCollection()", "testcase": false, "constructor": false}, {"identifier": "nameEquals", "parameters": "(final String name)", "modifiers": "public final", "return": "boolean", "signature": "boolean nameEquals(final String name)", "full_signature": "public final boolean nameEquals(final String name)", "class_method_signature": "AbstractNameSetOnlyPermission.nameEquals(final String name)", "testcase": false, "constructor": false}, {"identifier": "impliesName", "parameters": "(final String name)", "modifiers": "public final", "return": "boolean", "signature": "boolean impliesName(final String name)", "full_signature": "public final boolean impliesName(final String name)", "class_method_signature": "AbstractNameSetOnlyPermission.impliesName(final String name)", "testcase": false, "constructor": false}, {"identifier": "nameHashCode", "parameters": "()", "modifiers": "protected final", "return": "int", "signature": "int nameHashCode()", "full_signature": "protected final int nameHashCode()", "class_method_signature": "AbstractNameSetOnlyPermission.nameHashCode()", "testcase": false, "constructor": false}], "file": "permission/src/main/java/org/wildfly/security/permission/AbstractNameSetOnlyPermission.java"}, "focal_method": {"identifier": "newPermissionCollection", "parameters": "()", "modifiers": "public", "return": "AbstractPermissionCollection", "body": "public AbstractPermissionCollection newPermissionCollection() {\n        return NameSetPermissionCollection.newInstance(this, nameEnumeration);\n    }", "signature": "AbstractPermissionCollection newPermissionCollection()", "full_signature": "public AbstractPermissionCollection newPermissionCollection()", "class_method_signature": "AbstractNameSetOnlyPermission.newPermissionCollection()", "testcase": false, "constructor": false, "invocations": ["newInstance"]}, "repository": {"repo_id": 13660977, "url": "https://github.com/wildfly-security/wildfly-elytron", "stars": 38, "created": "10/17/2013 8:57:07 PM +00:00", "updates": "2020-01-27T16:58:02+00:00", "fork": "False", "license": "licensed"}}