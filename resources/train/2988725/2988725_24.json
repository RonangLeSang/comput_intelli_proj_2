{"test_class": {"identifier": "TestSQLDirectory", "superclass": "extends SQLDirectoryTestCase", "interfaces": "", "fields": [{"original_string": "private static final String SCHEMA = \"user\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMA = \"user\"", "var_name": "SCHEMA"}], "file": "nuxeo-platform-directory/nuxeo-platform-directory-sql/src/test/java/org/nuxeo/ecm/directory/sql/TestSQLDirectory.java"}, "test_case": {"identifier": "testGetEntry", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testGetEntry() throws Exception {\n        Session session = getSession();\n        try {\n            DocumentModel dm = session.getEntry(\"user_1\");\n            assertEquals(\"user_1\", dm.getProperty(SCHEMA, \"username\"));\n            assertEquals(\"pass_1\", dm.getProperty(SCHEMA, \"password\"));\n            assertEquals(Long.valueOf(3), dm.getProperty(SCHEMA, \"intField\"));\n            assertCalendarEquals(getCalendar(2007, 9, 7, 14, 36, 28, 0),\n                    (Calendar) dm.getProperty(SCHEMA, \"dateField\"));\n            assertNull(dm.getProperty(SCHEMA, \"company\"));\n            List<String> groups = (List<String>) dm.getProperty(SCHEMA,\n                    \"groups\");\n            assertEquals(2, groups.size());\n            assertTrue(groups.contains(\"group_1\"));\n            assertTrue(groups.contains(\"members\"));\n\n            dm = session.getEntry(\"Administrator\");\n            assertEquals(\"Administrator\", dm.getProperty(SCHEMA, \"username\"));\n            assertEquals(\"Administrator\", dm.getProperty(SCHEMA, \"password\"));\n            assertEquals(Long.valueOf(10), dm.getProperty(SCHEMA, \"intField\"));\n            assertCalendarEquals(getCalendar(1982, 3, 25, 16, 30, 47, 123),\n                    (Calendar) dm.getProperty(SCHEMA, \"dateField\"));\n            assertTrue((Boolean) dm.getProperty(SCHEMA, \"booleanField\"));\n            groups = (List<String>) dm.getProperty(SCHEMA, \"groups\");\n            assertEquals(1, groups.size());\n            assertTrue(groups.contains(\"administrators\"));\n            // assertTrue(groups.contains(\"members\"));\n\n        } finally {\n            session.close();\n        }\n    }", "signature": "void testGetEntry()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testGetEntry()", "class_method_signature": "TestSQLDirectory.testGetEntry()", "testcase": true, "constructor": false, "invocations": ["getSession", "getEntry", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "valueOf", "getProperty", "assertCalendarEquals", "getCalendar", "getProperty", "assertNull", "getProperty", "getProperty", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "getEntry", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "valueOf", "getProperty", "assertCalendarEquals", "getCalendar", "getProperty", "assertTrue", "getProperty", "getProperty", "assertEquals", "size", "assertTrue", "contains", "close"]}, "focal_class": {"identifier": "SQLDirectory", "superclass": "extends AbstractDirectory", "interfaces": "", "fields": [{"original_string": "public static final Log log = LogFactory.getLog(SQLDirectory.class);", "modifier": "public static final", "type": "Log", "declarator": "log = LogFactory.getLog(SQLDirectory.class)", "var_name": "log"}, {"original_string": "public static final String TENANT_ID_FIELD = \"tenantId\";", "modifier": "public static final", "type": "String", "declarator": "TENANT_ID_FIELD = \"tenantId\"", "var_name": "TENANT_ID_FIELD"}, {"original_string": "public static final int MAX_CONNECTION_TRIES = 5;", "modifier": "public static final", "type": "int", "declarator": "MAX_CONNECTION_TRIES = 5", "var_name": "MAX_CONNECTION_TRIES"}, {"original_string": "private final SQLDirectoryDescriptor config;", "modifier": "private final", "type": "SQLDirectoryDescriptor", "declarator": "config", "var_name": "config"}, {"original_string": "private final boolean nativeCase;", "modifier": "private final", "type": "boolean", "declarator": "nativeCase", "var_name": "nativeCase"}, {"original_string": "private boolean managedSQLSession;", "modifier": "private", "type": "boolean", "declarator": "managedSQLSession", "var_name": "managedSQLSession"}, {"original_string": "private DataSource dataSource;", "modifier": "private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private Table table;", "modifier": "private", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "private Schema schema;", "modifier": "private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private Map<String, Field> schemaFieldMap;", "modifier": "private", "type": "Map<String, Field>", "declarator": "schemaFieldMap", "var_name": "schemaFieldMap"}, {"original_string": "private List<String> storedFieldNames;", "modifier": "private", "type": "List<String>", "declarator": "storedFieldNames", "var_name": "storedFieldNames"}, {"original_string": "private Dialect dialect;", "modifier": "private", "type": "Dialect", "declarator": "dialect", "var_name": "dialect"}], "methods": [{"identifier": "SQLDirectory", "parameters": "(SQLDirectoryDescriptor config)", "modifiers": "public", "return": "", "signature": " SQLDirectory(SQLDirectoryDescriptor config)", "full_signature": "public  SQLDirectory(SQLDirectoryDescriptor config)", "class_method_signature": "SQLDirectory.SQLDirectory(SQLDirectoryDescriptor config)", "testcase": false, "constructor": true}, {"identifier": "initConnection", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initConnection()", "full_signature": "protected void initConnection()", "class_method_signature": "SQLDirectory.initConnection()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "SQLDirectoryDescriptor", "signature": "SQLDirectoryDescriptor getConfig()", "full_signature": "public SQLDirectoryDescriptor getConfig()", "class_method_signature": "SQLDirectory.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "()", "modifiers": "protected", "return": "DataSource", "signature": "DataSource getDataSource()", "full_signature": "protected DataSource getDataSource()", "class_method_signature": "SQLDirectory.getDataSource()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "public Connection getConnection()", "class_method_signature": "SQLDirectory.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(DataSource dataSource)", "modifiers": "protected", "return": "Connection", "signature": "Connection getConnection(DataSource dataSource)", "full_signature": "protected Connection getConnection(DataSource dataSource)", "class_method_signature": "SQLDirectory.getConnection(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SQLDirectory.getName()", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSchema()", "full_signature": "@Override public String getSchema()", "class_method_signature": "SQLDirectory.getSchema()", "testcase": false, "constructor": false}, {"identifier": "getParentDirectory", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getParentDirectory()", "full_signature": "@Override public String getParentDirectory()", "class_method_signature": "SQLDirectory.getParentDirectory()", "testcase": false, "constructor": false}, {"identifier": "getIdField", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIdField()", "full_signature": "@Override public String getIdField()", "class_method_signature": "SQLDirectory.getIdField()", "testcase": false, "constructor": false}, {"identifier": "getPasswordField", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPasswordField()", "full_signature": "@Override public String getPasswordField()", "class_method_signature": "SQLDirectory.getPasswordField()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Session", "signature": "Session getSession()", "full_signature": "@Override public synchronized Session getSession()", "class_method_signature": "SQLDirectory.getSession()", "testcase": false, "constructor": false}, {"identifier": "addSession", "parameters": "(final SQLSession session)", "modifiers": "protected synchronized", "return": "void", "signature": "void addSession(final SQLSession session)", "full_signature": "protected synchronized void addSession(final SQLSession session)", "class_method_signature": "SQLDirectory.addSession(final SQLSession session)", "testcase": false, "constructor": false}, {"identifier": "registerInTx", "parameters": "(final SQLSession session)", "modifiers": "protected", "return": "void", "signature": "void registerInTx(final SQLSession session)", "full_signature": "protected void registerInTx(final SQLSession session)", "class_method_signature": "SQLDirectory.registerInTx(final SQLSession session)", "testcase": false, "constructor": false}, {"identifier": "getSchemaFieldMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Field>", "signature": "Map<String, Field> getSchemaFieldMap()", "full_signature": "public Map<String, Field> getSchemaFieldMap()", "class_method_signature": "SQLDirectory.getSchemaFieldMap()", "testcase": false, "constructor": false}, {"identifier": "getStoredFieldNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getStoredFieldNames()", "full_signature": "public List<String> getStoredFieldNames()", "class_method_signature": "SQLDirectory.getStoredFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table getTable()", "full_signature": "public Table getTable()", "class_method_signature": "SQLDirectory.getTable()", "testcase": false, "constructor": false}, {"identifier": "getDialect", "parameters": "()", "modifiers": "public", "return": "Dialect", "signature": "Dialect getDialect()", "full_signature": "public Dialect getDialect()", "class_method_signature": "SQLDirectory.getDialect()", "testcase": false, "constructor": false}, {"identifier": "useNativeCase", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean useNativeCase()", "full_signature": "public boolean useNativeCase()", "class_method_signature": "SQLDirectory.useNativeCase()", "testcase": false, "constructor": false}, {"identifier": "isMultiTenant", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMultiTenant()", "full_signature": "@Override public boolean isMultiTenant()", "class_method_signature": "SQLDirectory.isMultiTenant()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SQLDirectory.toString()", "testcase": false, "constructor": false}], "file": "nuxeo-platform-directory/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/SQLDirectory.java"}, "focal_method": {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Session", "body": "@Override\n    public synchronized Session getSession() throws DirectoryException {\n        if (dialect == null) {\n            initConnection();\n        }\n        SQLSession session = new SQLSession(this, config, managedSQLSession);\n        addSession(session);\n        return session;\n    }", "signature": "Session getSession()", "full_signature": "@Override public synchronized Session getSession()", "class_method_signature": "SQLDirectory.getSession()", "testcase": false, "constructor": false, "invocations": ["initConnection", "addSession"]}, "repository": {"repo_id": 2988725, "url": "https://github.com/nuxeo-archives/nuxeo-services", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 7, "size": 92657, "license": "licensed"}}