{"test_class": {"identifier": "TestMultiDirectory", "superclass": "", "interfaces": "", "fields": [{"original_string": "DirectoryService directoryService;", "modifier": "", "type": "DirectoryService", "declarator": "directoryService", "var_name": "directoryService"}, {"original_string": "MemoryDirectoryFactory memoryDirectoryFactory;", "modifier": "", "type": "MemoryDirectoryFactory", "declarator": "memoryDirectoryFactory", "var_name": "memoryDirectoryFactory"}, {"original_string": "MemoryDirectory memdir1;", "modifier": "", "type": "MemoryDirectory", "declarator": "memdir1", "var_name": "memdir1"}, {"original_string": "MemoryDirectory memdir2;", "modifier": "", "type": "MemoryDirectory", "declarator": "memdir2", "var_name": "memdir2"}, {"original_string": "MemoryDirectory memdir3;", "modifier": "", "type": "MemoryDirectory", "declarator": "memdir3", "var_name": "memdir3"}, {"original_string": "MultiDirectory multiDir;", "modifier": "", "type": "MultiDirectory", "declarator": "multiDir", "var_name": "multiDir"}, {"original_string": "MultiDirectorySession dir;", "modifier": "", "type": "MultiDirectorySession", "declarator": "dir", "var_name": "dir"}], "file": "nuxeo-platform-directory/nuxeo-platform-directory-multi/src/test/java/org/nuxeo/ecm/directory/multi/TestMultiDirectory.java"}, "test_case": {"identifier": "testUpdateReadonlyMultidir", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateReadonlyMultidir() throws Exception {\n        MultiDirectory readonlyMultidir = (MultiDirectory) directoryService.getDirectory(\"readonlymulti\");\n        MultiDirectorySession readonlyDir = (MultiDirectorySession) readonlyMultidir.getSession();\n        Session dir1 = memdir1.getSession();\n        Session dir2 = memdir2.getSession();\n        Session dir3 = memdir3.getSession();\n\n        // multi-subdirs update\n        DocumentModel e = readonlyDir.getEntry(\"1\");\n        assertEquals(\"foo1\", e.getProperty(\"schema3\", \"thefoo\"));\n        assertEquals(\"bar1\", e.getProperty(\"schema3\", \"thebar\"));\n        e.setProperty(\"schema3\", \"thefoo\", \"fffooo1\");\n        e.setProperty(\"schema3\", \"thebar\", \"babar1\");\n\n        readonlyDir.updateEntry(e);\n        e = readonlyDir.getEntry(\"1\");\n        // the multidirectory entry was not updated\n        assertEquals(\"foo1\", e.getProperty(\"schema3\", \"thefoo\"));\n        assertEquals(\"bar1\", e.getProperty(\"schema3\", \"thebar\"));\n\n        // neither the underlying directories\n        assertEquals(\"foo1\",\n                dir1.getEntry(\"1\").getProperty(\"schema1\", \"foo\"));\n        assertEquals(\"bar1\", dir2.getEntry(\"1\").getProperty(\"schema2\", \"bar\"));\n        assertNull(dir3.getEntry(\"1\"));\n    }", "signature": "void testUpdateReadonlyMultidir()", "full_signature": "@Test public void testUpdateReadonlyMultidir()", "class_method_signature": "TestMultiDirectory.testUpdateReadonlyMultidir()", "testcase": true, "constructor": false, "invocations": ["getDirectory", "getSession", "getSession", "getSession", "getSession", "getEntry", "assertEquals", "getProperty", "assertEquals", "getProperty", "setProperty", "setProperty", "updateEntry", "getEntry", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "getEntry", "assertEquals", "getProperty", "getEntry", "assertNull", "getEntry"]}, "focal_class": {"identifier": "MultiDirectory", "superclass": "extends AbstractDirectory", "interfaces": "", "fields": [{"original_string": "private final MultiDirectoryDescriptor descriptor;", "modifier": "private final", "type": "MultiDirectoryDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "methods": [{"identifier": "MultiDirectory", "parameters": "(MultiDirectoryDescriptor descriptor)", "modifiers": "public", "return": "", "signature": " MultiDirectory(MultiDirectoryDescriptor descriptor)", "full_signature": "public  MultiDirectory(MultiDirectoryDescriptor descriptor)", "class_method_signature": "MultiDirectory.MultiDirectory(MultiDirectoryDescriptor descriptor)", "testcase": false, "constructor": true}, {"identifier": "getDescriptor", "parameters": "()", "modifiers": "protected", "return": "MultiDirectoryDescriptor", "signature": "MultiDirectoryDescriptor getDescriptor()", "full_signature": "protected MultiDirectoryDescriptor getDescriptor()", "class_method_signature": "MultiDirectory.getDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "MultiDirectory.getName()", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSchema()", "full_signature": "@Override public String getSchema()", "class_method_signature": "MultiDirectory.getSchema()", "testcase": false, "constructor": false}, {"identifier": "getParentDirectory", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getParentDirectory()", "full_signature": "@Override public String getParentDirectory()", "class_method_signature": "MultiDirectory.getParentDirectory()", "testcase": false, "constructor": false}, {"identifier": "getIdField", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIdField()", "full_signature": "@Override public String getIdField()", "class_method_signature": "MultiDirectory.getIdField()", "testcase": false, "constructor": false}, {"identifier": "getPasswordField", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPasswordField()", "full_signature": "@Override public String getPasswordField()", "class_method_signature": "MultiDirectory.getPasswordField()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public", "return": "Session", "signature": "Session getSession()", "full_signature": "@Override public Session getSession()", "class_method_signature": "MultiDirectory.getSession()", "testcase": false, "constructor": false}, {"identifier": "addSession", "parameters": "(MultiDirectorySession session)", "modifiers": "protected", "return": "void", "signature": "void addSession(MultiDirectorySession session)", "full_signature": "protected void addSession(MultiDirectorySession session)", "class_method_signature": "MultiDirectory.addSession(MultiDirectorySession session)", "testcase": false, "constructor": false}, {"identifier": "getReference", "parameters": "(String referenceFieldName)", "modifiers": "@Override public", "return": "Reference", "signature": "Reference getReference(String referenceFieldName)", "full_signature": "@Override public Reference getReference(String referenceFieldName)", "class_method_signature": "MultiDirectory.getReference(String referenceFieldName)", "testcase": false, "constructor": false}, {"identifier": "invalidateDirectoryCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void invalidateDirectoryCache()", "full_signature": "@Override public void invalidateDirectoryCache()", "class_method_signature": "MultiDirectory.invalidateDirectoryCache()", "testcase": false, "constructor": false}], "file": "nuxeo-platform-directory/nuxeo-platform-directory-multi/src/main/java/org/nuxeo/ecm/directory/multi/MultiDirectory.java"}, "focal_method": {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public", "return": "Session", "body": "@Override\n    public Session getSession() throws DirectoryException {\n        MultiDirectorySession session = new MultiDirectorySession(this);\n        addSession(session);\n        return session;\n    }", "signature": "Session getSession()", "full_signature": "@Override public Session getSession()", "class_method_signature": "MultiDirectory.getSession()", "testcase": false, "constructor": false, "invocations": ["addSession"]}, "repository": {"repo_id": 2988725, "url": "https://github.com/nuxeo-archives/nuxeo-services", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 7, "size": 92657, "license": "licensed"}}