{"test_class": {"identifier": "TestDownloadServlet", "superclass": "", "interfaces": "", "fields": [], "file": "nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/ui/web/download/TestDownloadServlet.java"}, "test_case": {"identifier": "testParseUnsupportedByteRange5", "parameters": "()", "modifiers": "@Test(expected = ClientException.class) public", "return": "void", "body": "@Test(expected = ClientException.class)\n    public void testParseUnsupportedByteRange5() throws Exception {\n        DownloadServlet.parseRange(\"bytes=0-123,-45\", 12345); // Do no support\n                                                              // multiple ranges\n    }", "signature": "void testParseUnsupportedByteRange5()", "full_signature": "@Test(expected = ClientException.class) public void testParseUnsupportedByteRange5()", "class_method_signature": "TestDownloadServlet.testParseUnsupportedByteRange5()", "testcase": true, "constructor": false, "invocations": ["parseRange"]}, "focal_class": {"identifier": "DownloadServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "protected static final String NXDOWNLOADINFO_PREFIX = \"nxdownloadinfo\";", "modifier": "protected static final", "type": "String", "declarator": "NXDOWNLOADINFO_PREFIX = \"nxdownloadinfo\"", "var_name": "NXDOWNLOADINFO_PREFIX"}, {"original_string": "protected static final String NXBIGFILE_PREFIX = \"nxbigfile\";", "modifier": "protected static final", "type": "String", "declarator": "NXBIGFILE_PREFIX = \"nxbigfile\"", "var_name": "NXBIGFILE_PREFIX"}, {"original_string": "protected static final String NXBIGBLOB_PREFIX = \"nxbigblob\";", "modifier": "protected static final", "type": "String", "declarator": "NXBIGBLOB_PREFIX = \"nxbigblob\"", "var_name": "NXBIGBLOB_PREFIX"}, {"original_string": "protected static final int BUFFER_SIZE = 1024 * 512;", "modifier": "protected static final", "type": "int", "declarator": "BUFFER_SIZE = 1024 * 512", "var_name": "BUFFER_SIZE"}, {"original_string": "protected static final int MIN_BUFFER_SIZE = 1024 * 64;", "modifier": "protected static final", "type": "int", "declarator": "MIN_BUFFER_SIZE = 1024 * 64", "var_name": "MIN_BUFFER_SIZE"}, {"original_string": "protected static final Blob BLOB_NOT_FOUND = new StringBlob(\"404\");", "modifier": "protected static final", "type": "Blob", "declarator": "BLOB_NOT_FOUND = new StringBlob(\"404\")", "var_name": "BLOB_NOT_FOUND"}, {"original_string": "private static final long serialVersionUID = 986876871L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 986876871L", "var_name": "serialVersionUID"}, {"original_string": "private static final Log log = LogFactory.getLog(DownloadServlet.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(DownloadServlet.class)", "var_name": "log"}], "methods": [{"identifier": "doGet", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "DownloadServlet.doGet(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "resolveBlob", "parameters": "(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "modifiers": "protected", "return": "Blob", "signature": "Blob resolveBlob(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "full_signature": "protected Blob resolveBlob(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "class_method_signature": "DownloadServlet.resolveBlob(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "testcase": false, "constructor": false}, {"identifier": "handleGetDownloadInfo", "parameters": "(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "modifiers": "protected", "return": "void", "signature": "void handleGetDownloadInfo(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "full_signature": "protected void handleGetDownloadInfo(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "class_method_signature": "DownloadServlet.handleGetDownloadInfo(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "testcase": false, "constructor": false}, {"identifier": "isBlobFound", "parameters": "(Blob blob, HttpServletResponse resp)", "modifiers": "private", "return": "boolean", "signature": "boolean isBlobFound(Blob blob, HttpServletResponse resp)", "full_signature": "private boolean isBlobFound(Blob blob, HttpServletResponse resp)", "class_method_signature": "DownloadServlet.isBlobFound(Blob blob, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "handleDownloadSingleDocument", "parameters": "(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "modifiers": "protected", "return": "void", "signature": "void handleDownloadSingleDocument(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "full_signature": "protected void handleDownloadSingleDocument(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "class_method_signature": "DownloadServlet.handleDownloadSingleDocument(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "testcase": false, "constructor": false}, {"identifier": "handleDownloadSingleBlob", "parameters": "(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "modifiers": "protected", "return": "void", "signature": "void handleDownloadSingleBlob(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "full_signature": "protected void handleDownloadSingleBlob(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "class_method_signature": "DownloadServlet.handleDownloadSingleBlob(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "testcase": false, "constructor": false}, {"identifier": "downloadBlob", "parameters": "(HttpServletRequest req,\n            HttpServletResponse resp, Blob blob, String fileName)", "modifiers": "protected", "return": "void", "signature": "void downloadBlob(HttpServletRequest req,\n            HttpServletResponse resp, Blob blob, String fileName)", "full_signature": "protected void downloadBlob(HttpServletRequest req,\n            HttpServletResponse resp, Blob blob, String fileName)", "class_method_signature": "DownloadServlet.downloadBlob(HttpServletRequest req,\n            HttpServletResponse resp, Blob blob, String fileName)", "testcase": false, "constructor": false}, {"identifier": "handleClientDisconnect", "parameters": "(IOException ioe)", "modifiers": "public", "return": "void", "signature": "void handleClientDisconnect(IOException ioe)", "full_signature": "public void handleClientDisconnect(IOException ioe)", "class_method_signature": "DownloadServlet.handleClientDisconnect(IOException ioe)", "testcase": false, "constructor": false}, {"identifier": "handleDownloadTemporaryZip", "parameters": "(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "modifiers": "protected", "return": "void", "signature": "void handleDownloadTemporaryZip(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "full_signature": "protected void handleDownloadTemporaryZip(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "class_method_signature": "DownloadServlet.handleDownloadTemporaryZip(HttpServletRequest req,\n            HttpServletResponse resp, String requestURI)", "testcase": false, "constructor": false}, {"identifier": "writeStream", "parameters": "(InputStream in, OutputStream out,\n            ByteRange range)", "modifiers": "public static", "return": "void", "signature": "void writeStream(InputStream in, OutputStream out,\n            ByteRange range)", "full_signature": "public static void writeStream(InputStream in, OutputStream out,\n            ByteRange range)", "class_method_signature": "DownloadServlet.writeStream(InputStream in, OutputStream out,\n            ByteRange range)", "testcase": false, "constructor": false}, {"identifier": "parseRange", "parameters": "(String range, long fileSize)", "modifiers": "public static", "return": "ByteRange", "signature": "ByteRange parseRange(String range, long fileSize)", "full_signature": "public static ByteRange parseRange(String range, long fileSize)", "class_method_signature": "DownloadServlet.parseRange(String range, long fileSize)", "testcase": false, "constructor": false}], "file": "nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/ui/web/download/DownloadServlet.java"}, "focal_method": {"identifier": "parseRange", "parameters": "(String range, long fileSize)", "modifiers": "public static", "return": "ByteRange", "body": "public static ByteRange parseRange(String range, long fileSize)\n            throws ClientException {\n        // Do no support multiple ranges\n        if (!range.startsWith(\"bytes=\") || range.indexOf(',') >= 0) {\n            throw new ClientException(\"Cannot parse range : \" + range);\n        }\n        int sepIndex = range.indexOf('-', 6);\n        if (sepIndex < 0) {\n            throw new ClientException(\"Cannot parse range : \" + range);\n        }\n        String start = range.substring(6, sepIndex).trim();\n        String end = range.substring(sepIndex + 1).trim();\n        long rangeStart = 0;\n        long rangeEnd = fileSize - 1;\n        if (start.isEmpty()) {\n            if (end.isEmpty()) {\n                throw new ClientException(\"Cannot parse range : \" + range);\n            }\n            rangeStart = fileSize - Integer.parseInt(end);\n            if (rangeStart < 0) {\n                rangeStart = 0;\n            }\n        } else {\n            rangeStart = Integer.parseInt(start);\n            if (!end.isEmpty()) {\n                rangeEnd = Integer.parseInt(end);\n            }\n        }\n        if (rangeStart > rangeEnd) {\n            throw new ClientException(\"Cannot parse range : \" + range);\n        }\n\n        return new ByteRange(rangeStart, rangeEnd);\n    }", "signature": "ByteRange parseRange(String range, long fileSize)", "full_signature": "public static ByteRange parseRange(String range, long fileSize)", "class_method_signature": "DownloadServlet.parseRange(String range, long fileSize)", "testcase": false, "constructor": false, "invocations": ["startsWith", "indexOf", "indexOf", "trim", "substring", "trim", "substring", "isEmpty", "isEmpty", "parseInt", "parseInt", "isEmpty", "parseInt"]}, "repository": {"repo_id": 2988725, "url": "https://github.com/nuxeo-archives/nuxeo-services", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 7, "size": 92657, "license": "licensed"}}