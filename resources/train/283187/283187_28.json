{"test_class": {"identifier": "AbbreviatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final char FS = '/';", "modifier": "static final", "type": "char", "declarator": "FS = '/'", "var_name": "FS"}, {"original_string": "static final String INPUT_0 = \"/abc/123456/ABC\";", "modifier": "static final", "type": "String", "declarator": "INPUT_0 = \"/abc/123456/ABC\"", "var_name": "INPUT_0"}, {"original_string": "static final String INPUT_1 = \"/abc/123456/xxxxx/ABC\";", "modifier": "static final", "type": "String", "declarator": "INPUT_1 = \"/abc/123456/xxxxx/ABC\"", "var_name": "INPUT_1"}, {"original_string": "RandomHelper rh = new RandomHelper(FS);", "modifier": "", "type": "RandomHelper", "declarator": "rh = new RandomHelper(FS)", "var_name": "rh"}], "file": "slf4j-migrator/src/test/java/org/slf4j/migrator/helper/AbbreviatorTest.java"}, "test_case": {"identifier": "testImpossibleToAbbreviate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testImpossibleToAbbreviate() {\n        Abbreviator abb = new Abbreviator(2, 20, FS);\n        String in = \"iczldqwivpgm/mgrmvbjdxrwmqgprdjusth\";\n        String r = abb.abbreviate(in);\n        assertEquals(in, r);\n    }", "signature": "void testImpossibleToAbbreviate()", "full_signature": "@Test public void testImpossibleToAbbreviate()", "class_method_signature": "AbbreviatorTest.testImpossibleToAbbreviate()", "testcase": true, "constructor": false, "invocations": ["abbreviate", "assertEquals"]}, "focal_class": {"identifier": "Abbreviator", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String FILLER = \"...\";", "modifier": "static final", "type": "String", "declarator": "FILLER = \"...\"", "var_name": "FILLER"}, {"original_string": "final char folderSeparator;", "modifier": "final", "type": "char", "declarator": "folderSeparator", "var_name": "folderSeparator"}, {"original_string": "final int invariantPrefixLength;", "modifier": "final", "type": "int", "declarator": "invariantPrefixLength", "var_name": "invariantPrefixLength"}, {"original_string": "final int desiredLength;", "modifier": "final", "type": "int", "declarator": "desiredLength", "var_name": "desiredLength"}], "methods": [{"identifier": "Abbreviator", "parameters": "(int invariantPrefixLength, int desiredLength, char folderSeparator)", "modifiers": "public", "return": "", "signature": " Abbreviator(int invariantPrefixLength, int desiredLength, char folderSeparator)", "full_signature": "public  Abbreviator(int invariantPrefixLength, int desiredLength, char folderSeparator)", "class_method_signature": "Abbreviator.Abbreviator(int invariantPrefixLength, int desiredLength, char folderSeparator)", "testcase": false, "constructor": true}, {"identifier": "abbreviate", "parameters": "(String filename)", "modifiers": "public", "return": "String", "signature": "String abbreviate(String filename)", "full_signature": "public String abbreviate(String filename)", "class_method_signature": "Abbreviator.abbreviate(String filename)", "testcase": false, "constructor": false}, {"identifier": "computeNextIndex", "parameters": "(String filename, int firstIndex)", "modifiers": "", "return": "int", "signature": "int computeNextIndex(String filename, int firstIndex)", "full_signature": " int computeNextIndex(String filename, int firstIndex)", "class_method_signature": "Abbreviator.computeNextIndex(String filename, int firstIndex)", "testcase": false, "constructor": false}], "file": "slf4j-migrator/src/main/java/org/slf4j/migrator/helper/Abbreviator.java"}, "focal_method": {"identifier": "abbreviate", "parameters": "(String filename)", "modifiers": "public", "return": "String", "body": "public String abbreviate(String filename) {\n        if (filename.length() <= desiredLength) {\n            return filename;\n        } else {\n\n            int firstIndex = filename.indexOf(folderSeparator, invariantPrefixLength);\n            if (firstIndex == -1) {\n                // we cant't process this string\n                return filename;\n            }\n            StringBuilder buf = new StringBuilder(desiredLength);\n            buf.append(filename, 0, firstIndex + 1);\n            buf.append(FILLER);\n            int nextIndex = computeNextIndex(filename, firstIndex);\n            if (nextIndex != -1) {\n                buf.append(filename.substring(nextIndex));\n            } else {\n                // better long than wrong\n                return filename;\n            }\n\n            if (buf.length() < filename.length()) {\n                return buf.toString();\n            } else {\n                // we tried our best but we are still could not shorten the input\n                return filename;\n            }\n        }\n    }", "signature": "String abbreviate(String filename)", "full_signature": "public String abbreviate(String filename)", "class_method_signature": "Abbreviator.abbreviate(String filename)", "testcase": false, "constructor": false, "invocations": ["length", "indexOf", "append", "append", "computeNextIndex", "append", "substring", "length", "length", "toString"]}, "repository": {"repo_id": 283187, "url": "https://github.com/qos-ch/slf4j", "stars": 1386, "created": "8/20/2009 4:25:49 PM +00:00", "updates": "2020-01-27T20:42:09+00:00", "fork": "False", "license": "licensed"}}