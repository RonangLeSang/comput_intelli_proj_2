{"test_class": {"identifier": "AppCompilerTest", "superclass": "", "interfaces": "", "fields": [], "file": "compiler/src/test/java/org/robovm/compiler/AppCompilerTest.java"}, "test_case": {"identifier": "testMissingImplIsIgnore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissingImplIsIgnore() throws Exception {\n        final Path impl1 = new MockPath(\"META-INF/services/java.lang.Number\", \"java.lang.Integer\");\n        final Path impl2 = new MockPath(\"META-INF/services/java.lang.Number\", \"nobody.knows.such.Class\");\n        Clazzes clazzes = createClazzes(impl1, impl2);\n        Clazz interfaceClazz = clazzes.load(\"java/lang/Number\");\n\n        Set<Clazz> compiled = new HashSet<>();\n        Set<Clazz> queue = new LinkedHashSet<>();\n        AppCompiler.addMetaInfImplementations(clazzes, interfaceClazz, compiled, queue);\n     \n        assertEquals(\"Just one item added to queue: \" + queue, 1, queue.size());\n        \n        assertTrue(\"Integer in queue\" + queue, queue.contains(clazzes.load(\"java/lang/Integer\")));\n    }", "signature": "void testMissingImplIsIgnore()", "full_signature": "@Test public void testMissingImplIsIgnore()", "class_method_signature": "AppCompilerTest.testMissingImplIsIgnore()", "testcase": true, "constructor": false, "invocations": ["createClazzes", "load", "addMetaInfImplementations", "assertEquals", "size", "assertTrue", "contains", "load"]}, "focal_class": {"identifier": "AppCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] ROOT_CLASSES = {\n        \"java/io/FileDescriptor\",\n        \"java/io/PrintWriter\",\n        \"java/io/Serializable\",\n        \"java/io/StringWriter\",\n        \"java/lang/AbstractMethodError\",\n        \"java/lang/annotation/Annotation\",\n        \"java/lang/annotation/AnnotationFormatError\",\n        \"java/lang/ArithmeticException\",\n        \"java/lang/ArrayIndexOutOfBoundsException\",\n        \"java/lang/ArrayStoreException\",\n        \"java/lang/Boolean\",\n        \"java/lang/Byte\",\n        \"java/lang/Character\",\n        \"java/lang/Class\",\n        \"java/lang/ClassCastException\",\n        \"java/lang/ClassLoader\",\n        \"java/lang/ClassLoader$SystemClassLoader\",\n        \"java/lang/ClassNotFoundException\",\n        \"java/lang/Cloneable\",\n        \"java/lang/Daemons\",\n        \"java/lang/Double\",\n        \"java/lang/Enum\",\n        \"java/lang/Error\",\n        \"java/lang/ExceptionInInitializerError\",\n        \"java/lang/Float\",\n        \"java/lang/IllegalAccessError\",\n        \"java/lang/IllegalArgumentException\",\n        \"java/lang/IllegalMonitorStateException\",\n        \"java/lang/IllegalStateException\",\n        \"java/lang/IncompatibleClassChangeError\",\n        \"java/lang/IndexOutOfBoundsException\",\n        \"java/lang/InstantiationError\",\n        \"java/lang/InstantiationException\",\n        \"java/lang/Integer\",\n        \"java/lang/InternalError\",\n        \"java/lang/InterruptedException\",\n        \"java/lang/LinkageError\",\n        \"java/lang/Long\",\n        \"java/lang/NegativeArraySizeException\",\n        \"java/lang/NoClassDefFoundError\",\n        \"java/lang/NoSuchFieldError\",\n        \"java/lang/NoSuchMethodError\",\n        \"java/lang/NullPointerException\",\n        \"java/lang/Object\",\n        \"java/lang/OutOfMemoryError\",\n        \"java/lang/RealToString\",\n        \"java/lang/ref/FinalizerReference\",\n        \"java/lang/ref/PhantomReference\",\n        \"java/lang/ref/Reference\",\n        \"java/lang/ref/ReferenceQueue\",\n        \"java/lang/ref/SoftReference\",\n        \"java/lang/ref/WeakReference\",\n        \"java/lang/reflect/AccessibleObject\",\n        \"java/lang/reflect/Constructor\",\n        \"java/lang/reflect/Field\",\n        \"java/lang/reflect/InvocationHandler\",\n        \"java/lang/reflect/InvocationTargetException\",\n        \"java/lang/reflect/Method\",\n        \"java/lang/reflect/Proxy\",\n        \"java/lang/reflect/UndeclaredThrowableException\",\n        \"java/lang/Runtime\",\n        \"java/lang/RuntimeException\",\n        \"java/lang/Short\",\n        \"java/lang/StackOverflowError\",\n        \"java/lang/StackTraceElement\",\n        \"java/lang/String\",\n        \"java/lang/System\",\n        \"java/lang/Thread\",\n        \"java/lang/Thread$UncaughtExceptionHandler\",\n        \"java/lang/ThreadGroup\",\n        \"java/lang/Throwable\",\n        \"java/lang/TypeNotPresentException\",\n        \"java/lang/UnsatisfiedLinkError\",\n        \"java/lang/UnsupportedOperationException\",\n        \"java/lang/VerifyError\",\n        \"java/lang/VMClassLoader\",\n        \"java/math/BigDecimal\",\n        \"java/net/Inet6Address\",\n        \"java/net/InetAddress\",\n        \"java/net/InetSocketAddress\",\n        \"java/net/InetUnixAddress\",\n        \"java/net/Socket\",\n        \"java/net/SocketImpl\",\n        \"java/nio/charset/CharsetICU\",\n        \"java/nio/DirectByteBuffer\",\n        \"java/text/Bidi$Run\",\n        \"java/text/ParsePosition\",\n        \"java/util/Calendar\",\n        \"java/util/regex/PatternSyntaxException\",\n        \"java/util/zip/Deflater\",\n        \"java/util/zip/Inflater\",\n        \"libcore/icu/LocaleData\",\n        \"libcore/icu/NativeDecimalFormat$FieldPositionIterator\",\n        \"libcore/io/ErrnoException\",\n        \"libcore/io/GaiException\",\n        \"libcore/io/StructAddrinfo\",\n        \"libcore/io/StructFlock\",\n        \"libcore/io/StructGroupReq\",\n        \"libcore/io/StructLinger\",\n        \"libcore/io/StructPasswd\",\n        \"libcore/io/StructPollfd\",\n        \"libcore/io/StructStat\",\n        \"libcore/io/StructStatVfs\",\n        \"libcore/io/StructTimeval\",\n        \"libcore/io/StructUcred\",\n        \"libcore/io/StructUtsname\",\n        \"libcore/util/MutableInt\",\n        \"libcore/util/MutableLong\",\n        \"org/robovm/rt/bro/Struct\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "ROOT_CLASSES = {\n        \"java/io/FileDescriptor\",\n        \"java/io/PrintWriter\",\n        \"java/io/Serializable\",\n        \"java/io/StringWriter\",\n        \"java/lang/AbstractMethodError\",\n        \"java/lang/annotation/Annotation\",\n        \"java/lang/annotation/AnnotationFormatError\",\n        \"java/lang/ArithmeticException\",\n        \"java/lang/ArrayIndexOutOfBoundsException\",\n        \"java/lang/ArrayStoreException\",\n        \"java/lang/Boolean\",\n        \"java/lang/Byte\",\n        \"java/lang/Character\",\n        \"java/lang/Class\",\n        \"java/lang/ClassCastException\",\n        \"java/lang/ClassLoader\",\n        \"java/lang/ClassLoader$SystemClassLoader\",\n        \"java/lang/ClassNotFoundException\",\n        \"java/lang/Cloneable\",\n        \"java/lang/Daemons\",\n        \"java/lang/Double\",\n        \"java/lang/Enum\",\n        \"java/lang/Error\",\n        \"java/lang/ExceptionInInitializerError\",\n        \"java/lang/Float\",\n        \"java/lang/IllegalAccessError\",\n        \"java/lang/IllegalArgumentException\",\n        \"java/lang/IllegalMonitorStateException\",\n        \"java/lang/IllegalStateException\",\n        \"java/lang/IncompatibleClassChangeError\",\n        \"java/lang/IndexOutOfBoundsException\",\n        \"java/lang/InstantiationError\",\n        \"java/lang/InstantiationException\",\n        \"java/lang/Integer\",\n        \"java/lang/InternalError\",\n        \"java/lang/InterruptedException\",\n        \"java/lang/LinkageError\",\n        \"java/lang/Long\",\n        \"java/lang/NegativeArraySizeException\",\n        \"java/lang/NoClassDefFoundError\",\n        \"java/lang/NoSuchFieldError\",\n        \"java/lang/NoSuchMethodError\",\n        \"java/lang/NullPointerException\",\n        \"java/lang/Object\",\n        \"java/lang/OutOfMemoryError\",\n        \"java/lang/RealToString\",\n        \"java/lang/ref/FinalizerReference\",\n        \"java/lang/ref/PhantomReference\",\n        \"java/lang/ref/Reference\",\n        \"java/lang/ref/ReferenceQueue\",\n        \"java/lang/ref/SoftReference\",\n        \"java/lang/ref/WeakReference\",\n        \"java/lang/reflect/AccessibleObject\",\n        \"java/lang/reflect/Constructor\",\n        \"java/lang/reflect/Field\",\n        \"java/lang/reflect/InvocationHandler\",\n        \"java/lang/reflect/InvocationTargetException\",\n        \"java/lang/reflect/Method\",\n        \"java/lang/reflect/Proxy\",\n        \"java/lang/reflect/UndeclaredThrowableException\",\n        \"java/lang/Runtime\",\n        \"java/lang/RuntimeException\",\n        \"java/lang/Short\",\n        \"java/lang/StackOverflowError\",\n        \"java/lang/StackTraceElement\",\n        \"java/lang/String\",\n        \"java/lang/System\",\n        \"java/lang/Thread\",\n        \"java/lang/Thread$UncaughtExceptionHandler\",\n        \"java/lang/ThreadGroup\",\n        \"java/lang/Throwable\",\n        \"java/lang/TypeNotPresentException\",\n        \"java/lang/UnsatisfiedLinkError\",\n        \"java/lang/UnsupportedOperationException\",\n        \"java/lang/VerifyError\",\n        \"java/lang/VMClassLoader\",\n        \"java/math/BigDecimal\",\n        \"java/net/Inet6Address\",\n        \"java/net/InetAddress\",\n        \"java/net/InetSocketAddress\",\n        \"java/net/InetUnixAddress\",\n        \"java/net/Socket\",\n        \"java/net/SocketImpl\",\n        \"java/nio/charset/CharsetICU\",\n        \"java/nio/DirectByteBuffer\",\n        \"java/text/Bidi$Run\",\n        \"java/text/ParsePosition\",\n        \"java/util/Calendar\",\n        \"java/util/regex/PatternSyntaxException\",\n        \"java/util/zip/Deflater\",\n        \"java/util/zip/Inflater\",\n        \"libcore/icu/LocaleData\",\n        \"libcore/icu/NativeDecimalFormat$FieldPositionIterator\",\n        \"libcore/io/ErrnoException\",\n        \"libcore/io/GaiException\",\n        \"libcore/io/StructAddrinfo\",\n        \"libcore/io/StructFlock\",\n        \"libcore/io/StructGroupReq\",\n        \"libcore/io/StructLinger\",\n        \"libcore/io/StructPasswd\",\n        \"libcore/io/StructPollfd\",\n        \"libcore/io/StructStat\",\n        \"libcore/io/StructStatVfs\",\n        \"libcore/io/StructTimeval\",\n        \"libcore/io/StructUcred\",\n        \"libcore/io/StructUtsname\",\n        \"libcore/util/MutableInt\",\n        \"libcore/util/MutableLong\",\n        \"org/robovm/rt/bro/Struct\"\n    }", "var_name": "ROOT_CLASSES"}, {"original_string": "private static final String TRUSTED_CERTIFICATE_STORE_CLASS =\n            \"com/android/org/conscrypt/TrustedCertificateStore\";", "modifier": "private static final", "type": "String", "declarator": "TRUSTED_CERTIFICATE_STORE_CLASS =\n            \"com/android/org/conscrypt/TrustedCertificateStore\"", "var_name": "TRUSTED_CERTIFICATE_STORE_CLASS"}, {"original_string": "static final Executor SAME_THREAD_EXECUTOR = new Executor() {\n        public void execute(Runnable r) {\n            r.run();\n        }\n    };", "modifier": "static final", "type": "Executor", "declarator": "SAME_THREAD_EXECUTOR = new Executor() {\n        public void execute(Runnable r) {\n            r.run();\n        }\n    }", "var_name": "SAME_THREAD_EXECUTOR"}, {"original_string": "private final Config config;", "modifier": "private final", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private final ClassCompiler classCompiler;", "modifier": "private final", "type": "ClassCompiler", "declarator": "classCompiler", "var_name": "classCompiler"}, {"original_string": "private final Linker linker;", "modifier": "private final", "type": "Linker", "declarator": "linker", "var_name": "linker"}], "methods": [{"identifier": "AppCompiler", "parameters": "(Config config)", "modifiers": "public", "return": "", "signature": " AppCompiler(Config config)", "full_signature": "public  AppCompiler(Config config)", "class_method_signature": "AppCompiler.AppCompiler(Config config)", "testcase": false, "constructor": true}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "Config", "signature": "Config getConfig()", "full_signature": "public Config getConfig()", "class_method_signature": "AppCompiler.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getMatchingClasses", "parameters": "(String pattern)", "modifiers": "private", "return": "Collection<Clazz>", "signature": "Collection<Clazz> getMatchingClasses(String pattern)", "full_signature": "private Collection<Clazz> getMatchingClasses(String pattern)", "class_method_signature": "AppCompiler.getMatchingClasses(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getRootClasses", "parameters": "()", "modifiers": "private", "return": "TreeSet<Clazz>", "signature": "TreeSet<Clazz> getRootClasses()", "full_signature": "private TreeSet<Clazz> getRootClasses()", "class_method_signature": "AppCompiler.getRootClasses()", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(Executor executor, ClassCompilerListener listener,\n            Clazz clazz, Set<Clazz> compileQueue, Set<Clazz> compiled)", "modifiers": "private", "return": "boolean", "signature": "boolean compile(Executor executor, ClassCompilerListener listener,\n            Clazz clazz, Set<Clazz> compileQueue, Set<Clazz> compiled)", "full_signature": "private boolean compile(Executor executor, ClassCompilerListener listener,\n            Clazz clazz, Set<Clazz> compileQueue, Set<Clazz> compiled)", "class_method_signature": "AppCompiler.compile(Executor executor, ClassCompilerListener listener,\n            Clazz clazz, Set<Clazz> compileQueue, Set<Clazz> compiled)", "testcase": false, "constructor": false}, {"identifier": "addMetaInfImplementations", "parameters": "(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "modifiers": "static", "return": "void", "signature": "void addMetaInfImplementations(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "full_signature": "static void addMetaInfImplementations(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "class_method_signature": "AppCompiler.addMetaInfImplementations(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(Set<Clazz> rootClasses, boolean compileDependencies,\n            final ClassCompilerListener listener)", "modifiers": "public", "return": "Set<Clazz>", "signature": "Set<Clazz> compile(Set<Clazz> rootClasses, boolean compileDependencies,\n            final ClassCompilerListener listener)", "full_signature": "public Set<Clazz> compile(Set<Clazz> rootClasses, boolean compileDependencies,\n            final ClassCompilerListener listener)", "class_method_signature": "AppCompiler.compile(Set<Clazz> rootClasses, boolean compileDependencies,\n            final ClassCompilerListener listener)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void compile()", "full_signature": "private void compile()", "class_method_signature": "AppCompiler.compile()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AppCompiler.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void build()", "full_signature": "public void build()", "class_method_signature": "AppCompiler.build()", "testcase": false, "constructor": false}, {"identifier": "archive", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void archive()", "full_signature": "public void archive()", "class_method_signature": "AppCompiler.archive()", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void install()", "full_signature": "public void install()", "class_method_signature": "AppCompiler.install()", "testcase": false, "constructor": false}, {"identifier": "launch", "parameters": "(LaunchParameters launchParameters)", "modifiers": "public", "return": "int", "signature": "int launch(LaunchParameters launchParameters)", "full_signature": "public int launch(LaunchParameters launchParameters)", "class_method_signature": "AppCompiler.launch(LaunchParameters launchParameters)", "testcase": false, "constructor": false}, {"identifier": "launch", "parameters": "(LaunchParameters launchParameters, InputStream inputStream)", "modifiers": "public", "return": "int", "signature": "int launch(LaunchParameters launchParameters, InputStream inputStream)", "full_signature": "public int launch(LaunchParameters launchParameters, InputStream inputStream)", "class_method_signature": "AppCompiler.launch(LaunchParameters launchParameters, InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "launchAsync", "parameters": "(LaunchParameters launchParameters)", "modifiers": "public", "return": "Process", "signature": "Process launchAsync(LaunchParameters launchParameters)", "full_signature": "public Process launchAsync(LaunchParameters launchParameters)", "class_method_signature": "AppCompiler.launchAsync(LaunchParameters launchParameters)", "testcase": false, "constructor": false}, {"identifier": "launchAsync", "parameters": "(LaunchParameters launchParameters, InputStream inputStream)", "modifiers": "public", "return": "Process", "signature": "Process launchAsync(LaunchParameters launchParameters, InputStream inputStream)", "full_signature": "public Process launchAsync(LaunchParameters launchParameters, InputStream inputStream)", "class_method_signature": "AppCompiler.launchAsync(LaunchParameters launchParameters, InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "launchAsyncCleanup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void launchAsyncCleanup()", "full_signature": "public void launchAsyncCleanup()", "class_method_signature": "AppCompiler.launchAsyncCleanup()", "testcase": false, "constructor": false}, {"identifier": "printDeviceTypesAndExit", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printDeviceTypesAndExit()", "full_signature": "private static void printDeviceTypesAndExit()", "class_method_signature": "AppCompiler.printDeviceTypesAndExit()", "testcase": false, "constructor": false}, {"identifier": "printVersionAndExit", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printVersionAndExit()", "full_signature": "private static void printVersionAndExit()", "class_method_signature": "AppCompiler.printVersionAndExit()", "testcase": false, "constructor": false}, {"identifier": "printUsageAndExit", "parameters": "(String errorMessage, List<Plugin> plugins)", "modifiers": "private static", "return": "void", "signature": "void printUsageAndExit(String errorMessage, List<Plugin> plugins)", "full_signature": "private static void printUsageAndExit(String errorMessage, List<Plugin> plugins)", "class_method_signature": "AppCompiler.printUsageAndExit(String errorMessage, List<Plugin> plugins)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(String s, int n)", "modifiers": "private static", "return": "String", "signature": "String repeat(String s, int n)", "full_signature": "private static String repeat(String s, int n)", "class_method_signature": "AppCompiler.repeat(String s, int n)", "testcase": false, "constructor": false}, {"identifier": "updateCheck", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateCheck()", "full_signature": "private void updateCheck()", "class_method_signature": "AppCompiler.updateCheck()", "testcase": false, "constructor": false}, {"identifier": "getInstallUuid", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getInstallUuid()", "full_signature": "private String getInstallUuid()", "class_method_signature": "AppCompiler.getInstallUuid()", "testcase": false, "constructor": false}, {"identifier": "getLastUpdateCheckTime", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getLastUpdateCheckTime()", "full_signature": "private long getLastUpdateCheckTime()", "class_method_signature": "AppCompiler.getLastUpdateCheckTime()", "testcase": false, "constructor": false}, {"identifier": "updateLastUpdateCheckTime", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateLastUpdateCheckTime()", "full_signature": "private void updateLastUpdateCheckTime()", "class_method_signature": "AppCompiler.updateLastUpdateCheckTime()", "testcase": false, "constructor": false}, {"identifier": "fetchJson", "parameters": "(String address)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject fetchJson(String address)", "full_signature": "private JSONObject fetchJson(String address)", "class_method_signature": "AppCompiler.fetchJson(String address)", "testcase": false, "constructor": false}], "file": "compiler/src/main/java/org/robovm/compiler/AppCompiler.java"}, "focal_method": {"identifier": "addMetaInfImplementations", "parameters": "(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "modifiers": "static", "return": "void", "body": "static void addMetaInfImplementations(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)\n            throws IOException {\n        String metaInfName = \"META-INF/services/\" + clazz.getClassName();\n        IOException throwLater = null;\n        for (InputStream is : clazzes.loadResources(metaInfName)) {\n            try (BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF8\"))) {\n                for (;;) {\n                    String line = r.readLine();\n                    if (line == null) {\n                        break;\n                    }\n                    if (line.startsWith(\"#\")) {\n                        continue;\n                    }\n                    String implClazzName = line.replace('.', '/');\n                    Clazz implClazz = clazzes.load(implClazzName);\n                    if (implClazz != null && !compiled.contains(implClazz)) {\n                        compileQueue.add(implClazz);\n                    }\n                }\n            } catch (IOException ex) {\n                throwLater = ex;\n            }\n        }\n        if (throwLater != null) {\n            throw throwLater;\n        }\n    }", "signature": "void addMetaInfImplementations(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "full_signature": "static void addMetaInfImplementations(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "class_method_signature": "AppCompiler.addMetaInfImplementations(Clazzes clazzes, Clazz clazz, Set<Clazz> compiled, Set<Clazz> compileQueue)", "testcase": false, "constructor": false, "invocations": ["getClassName", "loadResources", "readLine", "startsWith", "replace", "load", "contains", "add"]}, "repository": {"repo_id": 7480345, "url": "https://github.com/robovm/robovm", "language": "Java", "is_fork": false, "fork_count": 414, "stargazer_count": 1613, "size": 377573, "license": "licensed"}}