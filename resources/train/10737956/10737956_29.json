{"test_class": {"identifier": "SensorInstanceProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INSERT_OFFERING_PROCEDURE = \"http://www.52north.org/sensor/cite/1\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_OFFERING_PROCEDURE = \"http://www.52north.org/sensor/cite/1\"", "var_name": "INSERT_OFFERING_PROCEDURE"}, {"original_string": "private static final String INSERT_SENSOR_OFFERING_FILE = \"/files/insert_sensor_offering_test.xml\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_SENSOR_OFFERING_FILE = \"/files/insert_sensor_offering_test.xml\"", "var_name": "INSERT_SENSOR_OFFERING_FILE"}, {"original_string": "private static final String INSERT_SENSOR_OFFERING_PLUGIN_TYPE = \"CiteTestSensor\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_SENSOR_OFFERING_PLUGIN_TYPE = \"CiteTestSensor\"", "var_name": "INSERT_SENSOR_OFFERING_PLUGIN_TYPE"}, {"original_string": "private InsertSensorOfferingDocument insertSensorOffering;", "modifier": "private", "type": "InsertSensorOfferingDocument", "declarator": "insertSensorOffering", "var_name": "insertSensorOffering"}, {"original_string": "private SensorInstanceProvider sensorInstanceProvider;", "modifier": "private", "type": "SensorInstanceProvider", "declarator": "sensorInstanceProvider", "var_name": "sensorInstanceProvider"}], "file": "52n-sps-api/src/test/java/org/n52/sps/service/core/SensorInstanceProviderTest.java"}, "test_case": {"identifier": "testGetSensorConfigurationRepository", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSensorConfigurationRepository() throws InternalServiceException {\n        SensorInstanceProvider provider = new SensorInstanceProvider();\n        assertNull(provider.getSensorConfigurationRepository());\n        setEmptyInMemoryRepositories(provider);\n        assertNotNull(provider.getSensorConfigurationRepository());\n    }", "signature": "void testGetSensorConfigurationRepository()", "full_signature": "@Test public void testGetSensorConfigurationRepository()", "class_method_signature": "SensorInstanceProviderTest.testGetSensorConfigurationRepository()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getSensorConfigurationRepository", "setEmptyInMemoryRepositories", "assertNotNull", "getSensorConfigurationRepository"]}, "focal_class": {"identifier": "SensorInstanceProvider", "superclass": "", "interfaces": "implements InsertSensorOfferingListener", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SensorInstanceProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SensorInstanceProvider.class)", "var_name": "LOGGER"}, {"original_string": "protected SensorConfigurationRepository sensorConfigurationRepository;", "modifier": "protected", "type": "SensorConfigurationRepository", "declarator": "sensorConfigurationRepository", "var_name": "sensorConfigurationRepository"}, {"original_string": "protected SensorTaskRepository sensorTaskRepository;", "modifier": "protected", "type": "SensorTaskRepository", "declarator": "sensorTaskRepository", "var_name": "sensorTaskRepository"}, {"original_string": "private ServiceLoader<SensorInstanceFactory> sensorPluginLoader;", "modifier": "private", "type": "ServiceLoader<SensorInstanceFactory>", "declarator": "sensorPluginLoader", "var_name": "sensorPluginLoader"}, {"original_string": "private List<SensorPlugin> sensorInstances = new ArrayList<SensorPlugin>();", "modifier": "private", "type": "List<SensorPlugin>", "declarator": "sensorInstances = new ArrayList<SensorPlugin>()", "var_name": "sensorInstances"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "SensorInstanceProvider.init()", "testcase": false, "constructor": false}, {"identifier": "isMissingRepository", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isMissingRepository()", "full_signature": "private boolean isMissingRepository()", "class_method_signature": "SensorInstanceProvider.isMissingRepository()", "testcase": false, "constructor": false}, {"identifier": "addSensor", "parameters": "(SensorPlugin sensorInstance)", "modifiers": "protected", "return": "void", "signature": "void addSensor(SensorPlugin sensorInstance)", "full_signature": "protected void addSensor(SensorPlugin sensorInstance)", "class_method_signature": "SensorInstanceProvider.addSensor(SensorPlugin sensorInstance)", "testcase": false, "constructor": false}, {"identifier": "getSensors", "parameters": "()", "modifiers": "public", "return": "Iterable<SensorPlugin>", "signature": "Iterable<SensorPlugin> getSensors()", "full_signature": "public Iterable<SensorPlugin> getSensors()", "class_method_signature": "SensorInstanceProvider.getSensors()", "testcase": false, "constructor": false}, {"identifier": "containsTaskWith", "parameters": "(String taskId)", "modifiers": "public", "return": "boolean", "signature": "boolean containsTaskWith(String taskId)", "full_signature": "public boolean containsTaskWith(String taskId)", "class_method_signature": "SensorInstanceProvider.containsTaskWith(String taskId)", "testcase": false, "constructor": false}, {"identifier": "getTaskForTaskId", "parameters": "(String taskId)", "modifiers": "public", "return": "SensorTask", "signature": "SensorTask getTaskForTaskId(String taskId)", "full_signature": "public SensorTask getTaskForTaskId(String taskId)", "class_method_signature": "SensorInstanceProvider.getTaskForTaskId(String taskId)", "testcase": false, "constructor": false}, {"identifier": "containsSensorWith", "parameters": "(String procedure)", "modifiers": "public", "return": "boolean", "signature": "boolean containsSensorWith(String procedure)", "full_signature": "public boolean containsSensorWith(String procedure)", "class_method_signature": "SensorInstanceProvider.containsSensorWith(String procedure)", "testcase": false, "constructor": false}, {"identifier": "getSensorForProcedure", "parameters": "(String procedure)", "modifiers": "public", "return": "SensorPlugin", "signature": "SensorPlugin getSensorForProcedure(String procedure)", "full_signature": "public SensorPlugin getSensorForProcedure(String procedure)", "class_method_signature": "SensorInstanceProvider.getSensorForProcedure(String procedure)", "testcase": false, "constructor": false}, {"identifier": "getSensorForTaskId", "parameters": "(String taskId)", "modifiers": "public", "return": "SensorPlugin", "signature": "SensorPlugin getSensorForTaskId(String taskId)", "full_signature": "public SensorPlugin getSensorForTaskId(String taskId)", "class_method_signature": "SensorInstanceProvider.getSensorForTaskId(String taskId)", "testcase": false, "constructor": false}, {"identifier": "getSensorConfigurationRepository", "parameters": "()", "modifiers": "public", "return": "SensorConfigurationRepository", "signature": "SensorConfigurationRepository getSensorConfigurationRepository()", "full_signature": "public SensorConfigurationRepository getSensorConfigurationRepository()", "class_method_signature": "SensorInstanceProvider.getSensorConfigurationRepository()", "testcase": false, "constructor": false}, {"identifier": "setSensorConfigurationRepository", "parameters": "(SensorConfigurationRepository sensorConfigurationRepository)", "modifiers": "public", "return": "void", "signature": "void setSensorConfigurationRepository(SensorConfigurationRepository sensorConfigurationRepository)", "full_signature": "public void setSensorConfigurationRepository(SensorConfigurationRepository sensorConfigurationRepository)", "class_method_signature": "SensorInstanceProvider.setSensorConfigurationRepository(SensorConfigurationRepository sensorConfigurationRepository)", "testcase": false, "constructor": false}, {"identifier": "getSensorTaskRepository", "parameters": "()", "modifiers": "public", "return": "SensorTaskRepository", "signature": "SensorTaskRepository getSensorTaskRepository()", "full_signature": "public SensorTaskRepository getSensorTaskRepository()", "class_method_signature": "SensorInstanceProvider.getSensorTaskRepository()", "testcase": false, "constructor": false}, {"identifier": "setSensorTaskRepository", "parameters": "(SensorTaskRepository sensorTaskRepository)", "modifiers": "public", "return": "void", "signature": "void setSensorTaskRepository(SensorTaskRepository sensorTaskRepository)", "full_signature": "public void setSensorTaskRepository(SensorTaskRepository sensorTaskRepository)", "class_method_signature": "SensorInstanceProvider.setSensorTaskRepository(SensorTaskRepository sensorTaskRepository)", "testcase": false, "constructor": false}, {"identifier": "handleInsertSensorOffering", "parameters": "(InsertSensorOfferingEvent insertSensorOfferingEvent)", "modifiers": "public", "return": "void", "signature": "void handleInsertSensorOffering(InsertSensorOfferingEvent insertSensorOfferingEvent)", "full_signature": "public void handleInsertSensorOffering(InsertSensorOfferingEvent insertSensorOfferingEvent)", "class_method_signature": "SensorInstanceProvider.handleInsertSensorOffering(InsertSensorOfferingEvent insertSensorOfferingEvent)", "testcase": false, "constructor": false}, {"identifier": "initSensorInstance", "parameters": "(SensorConfiguration sensorConfiguration)", "modifiers": "private", "return": "SensorPlugin", "signature": "SensorPlugin initSensorInstance(SensorConfiguration sensorConfiguration)", "full_signature": "private SensorPlugin initSensorInstance(SensorConfiguration sensorConfiguration)", "class_method_signature": "SensorInstanceProvider.initSensorInstance(SensorConfiguration sensorConfiguration)", "testcase": false, "constructor": false}, {"identifier": "checkMandatoryContentForNewSensorOffering", "parameters": "(InsertSensorOffering insertSensorOffering)", "modifiers": "private", "return": "void", "signature": "void checkMandatoryContentForNewSensorOffering(InsertSensorOffering insertSensorOffering)", "full_signature": "private void checkMandatoryContentForNewSensorOffering(InsertSensorOffering insertSensorOffering)", "class_method_signature": "SensorInstanceProvider.checkMandatoryContentForNewSensorOffering(InsertSensorOffering insertSensorOffering)", "testcase": false, "constructor": false}, {"identifier": "getSensorFactory", "parameters": "(String pluginType)", "modifiers": "protected", "return": "SensorInstanceFactory", "signature": "SensorInstanceFactory getSensorFactory(String pluginType)", "full_signature": "protected SensorInstanceFactory getSensorFactory(String pluginType)", "class_method_signature": "SensorInstanceProvider.getSensorFactory(String pluginType)", "testcase": false, "constructor": false}, {"identifier": "createFromInsertSensorOffering", "parameters": "(InsertSensorOffering insertSensorOffering)", "modifiers": "private", "return": "SensorOfferingType", "signature": "SensorOfferingType createFromInsertSensorOffering(InsertSensorOffering insertSensorOffering)", "full_signature": "private SensorOfferingType createFromInsertSensorOffering(InsertSensorOffering insertSensorOffering)", "class_method_signature": "SensorInstanceProvider.createFromInsertSensorOffering(InsertSensorOffering insertSensorOffering)", "testcase": false, "constructor": false}, {"identifier": "createSensorConfiguration", "parameters": "(InsertSensorOffering insertSensorOffering, SensorOfferingType sensorOffering)", "modifiers": "private", "return": "SensorConfiguration", "signature": "SensorConfiguration createSensorConfiguration(InsertSensorOffering insertSensorOffering, SensorOfferingType sensorOffering)", "full_signature": "private SensorConfiguration createSensorConfiguration(InsertSensorOffering insertSensorOffering, SensorOfferingType sensorOffering)", "class_method_signature": "SensorInstanceProvider.createSensorConfiguration(InsertSensorOffering insertSensorOffering, SensorOfferingType sensorOffering)", "testcase": false, "constructor": false}, {"identifier": "isSensorExisting", "parameters": "(SensorInstanceData sensorInstanceData)", "modifiers": "private", "return": "boolean", "signature": "boolean isSensorExisting(SensorInstanceData sensorInstanceData)", "full_signature": "private boolean isSensorExisting(SensorInstanceData sensorInstanceData)", "class_method_signature": "SensorInstanceProvider.isSensorExisting(SensorInstanceData sensorInstanceData)", "testcase": false, "constructor": false}, {"identifier": "createSensorDescriptions", "parameters": "(SensorDescriptionData[] sensorDescriptionDataArray)", "modifiers": "private", "return": "List<SensorDescription>", "signature": "List<SensorDescription> createSensorDescriptions(SensorDescriptionData[] sensorDescriptionDataArray)", "full_signature": "private List<SensorDescription> createSensorDescriptions(SensorDescriptionData[] sensorDescriptionDataArray)", "class_method_signature": "SensorInstanceProvider.createSensorDescriptions(SensorDescriptionData[] sensorDescriptionDataArray)", "testcase": false, "constructor": false}, {"identifier": "createTaskingParameterTemplate", "parameters": "(SensorTaskingParametersSet sensorTaskingParametersSet)", "modifiers": "private", "return": "AbstractDataComponentType", "signature": "AbstractDataComponentType createTaskingParameterTemplate(SensorTaskingParametersSet sensorTaskingParametersSet)", "full_signature": "private AbstractDataComponentType createTaskingParameterTemplate(SensorTaskingParametersSet sensorTaskingParametersSet)", "class_method_signature": "SensorInstanceProvider.createTaskingParameterTemplate(SensorTaskingParametersSet sensorTaskingParametersSet)", "testcase": false, "constructor": false}, {"identifier": "isValidTaskingName", "parameters": "(String name, List<String> validIdentifiers)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidTaskingName(String name, List<String> validIdentifiers)", "full_signature": "private boolean isValidTaskingName(String name, List<String> validIdentifiers)", "class_method_signature": "SensorInstanceProvider.isValidTaskingName(String name, List<String> validIdentifiers)", "testcase": false, "constructor": false}, {"identifier": "isValidTaskingName", "parameters": "(String name)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidTaskingName(String name)", "full_signature": "private boolean isValidTaskingName(String name)", "class_method_signature": "SensorInstanceProvider.isValidTaskingName(String name)", "testcase": false, "constructor": false}, {"identifier": "throwInvalidSensorInformation", "parameters": "(String identifier)", "modifiers": "private", "return": "void", "signature": "void throwInvalidSensorInformation(String identifier)", "full_signature": "private void throwInvalidSensorInformation(String identifier)", "class_method_signature": "SensorInstanceProvider.throwInvalidSensorInformation(String identifier)", "testcase": false, "constructor": false}, {"identifier": "createResultAccessReference", "parameters": "(SensorInstanceData sensorInstanceData)", "modifiers": "protected", "return": "ResultAccessDataServiceReference", "signature": "ResultAccessDataServiceReference createResultAccessReference(SensorInstanceData sensorInstanceData)", "full_signature": "protected ResultAccessDataServiceReference createResultAccessReference(SensorInstanceData sensorInstanceData)", "class_method_signature": "SensorInstanceProvider.createResultAccessReference(SensorInstanceData sensorInstanceData)", "testcase": false, "constructor": false}, {"identifier": "createDataAccessTypes", "parameters": "(MetadataType[] metadataArray)", "modifiers": "private", "return": "List<String>", "signature": "List<String> createDataAccessTypes(MetadataType[] metadataArray)", "full_signature": "private List<String> createDataAccessTypes(MetadataType[] metadataArray)", "class_method_signature": "SensorInstanceProvider.createDataAccessTypes(MetadataType[] metadataArray)", "testcase": false, "constructor": false}, {"identifier": "handleAbstractContent", "parameters": "(ResultAccessDataServiceReference reference, LanguageStringType[] abstracts)", "modifiers": "private", "return": "void", "signature": "void handleAbstractContent(ResultAccessDataServiceReference reference, LanguageStringType[] abstracts)", "full_signature": "private void handleAbstractContent(ResultAccessDataServiceReference reference, LanguageStringType[] abstracts)", "class_method_signature": "SensorInstanceProvider.handleAbstractContent(ResultAccessDataServiceReference reference, LanguageStringType[] abstracts)", "testcase": false, "constructor": false}], "file": "52n-sps-api/src/main/java/org/n52/sps/service/core/SensorInstanceProvider.java"}, "focal_method": {"identifier": "getSensorConfigurationRepository", "parameters": "()", "modifiers": "public", "return": "SensorConfigurationRepository", "body": "public SensorConfigurationRepository getSensorConfigurationRepository() {\n        return sensorConfigurationRepository;\n    }", "signature": "SensorConfigurationRepository getSensorConfigurationRepository()", "full_signature": "public SensorConfigurationRepository getSensorConfigurationRepository()", "class_method_signature": "SensorInstanceProvider.getSensorConfigurationRepository()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10737956, "url": "https://github.com/52North/SensorPlanningService", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 292, "license": "licensed"}}