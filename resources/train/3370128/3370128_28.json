{"test_class": {"identifier": "ParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "pgjdbc/src/test/java/org/postgresql/core/ParserTest.java"}, "test_case": {"identifier": "testWithCommandParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWithCommandParsing() {\n    char[] command = new char[4];\n    \"WITH\".getChars(0, 4, command, 0);\n    assertTrue(\"Failed to correctly parse upper case command.\", Parser.parseWithKeyword(command, 0));\n    \"wITh\".getChars(0, 4, command, 0);\n    assertTrue(\"Failed to correctly parse mixed case command.\", Parser.parseWithKeyword(command, 0));\n    \"witH\".getChars(0, 4, command, 0);\n    assertTrue(\"Failed to correctly parse mixed case command.\", Parser.parseWithKeyword(command, 0));\n    \"With\".getChars(0, 4, command, 0);\n    assertTrue(\"Failed to correctly parse mixed case command.\", Parser.parseWithKeyword(command, 0));\n    \"with\".getChars(0, 4, command, 0);\n    assertTrue(\"Failed to correctly parse lower case command.\", Parser.parseWithKeyword(command, 0));\n  }", "signature": "void testWithCommandParsing()", "full_signature": "@Test public void testWithCommandParsing()", "class_method_signature": "ParserTest.testWithCommandParsing()", "testcase": true, "constructor": false, "invocations": ["getChars", "assertTrue", "parseWithKeyword", "getChars", "assertTrue", "parseWithKeyword", "getChars", "assertTrue", "parseWithKeyword", "getChars", "assertTrue", "parseWithKeyword", "getChars", "assertTrue", "parseWithKeyword"]}, "focal_class": {"identifier": "Parser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int[] NO_BINDS = new int[0];", "modifier": "private static final", "type": "int[]", "declarator": "NO_BINDS = new int[0]", "var_name": "NO_BINDS"}, {"original_string": "private static final char[] QUOTE_OR_ALPHABETIC_MARKER = {'\\\"', '0'};", "modifier": "private static final", "type": "char[]", "declarator": "QUOTE_OR_ALPHABETIC_MARKER = {'\\\"', '0'}", "var_name": "QUOTE_OR_ALPHABETIC_MARKER"}, {"original_string": "private static final char[] QUOTE_OR_ALPHABETIC_MARKER_OR_PARENTHESIS = {'\\\"', '0', '('};", "modifier": "private static final", "type": "char[]", "declarator": "QUOTE_OR_ALPHABETIC_MARKER_OR_PARENTHESIS = {'\\\"', '0', '('}", "var_name": "QUOTE_OR_ALPHABETIC_MARKER_OR_PARENTHESIS"}, {"original_string": "private static final char[] SINGLE_QUOTE = {'\\''};", "modifier": "private static final", "type": "char[]", "declarator": "SINGLE_QUOTE = {'\\''}", "var_name": "SINGLE_QUOTE"}], "methods": [{"identifier": "parseJdbcSql", "parameters": "(String query, boolean standardConformingStrings,\n      boolean withParameters, boolean splitStatements,\n      boolean isBatchedReWriteConfigured,\n      String... returningColumnNames)", "modifiers": "public static", "return": "List<NativeQuery>", "signature": "List<NativeQuery> parseJdbcSql(String query, boolean standardConformingStrings,\n      boolean withParameters, boolean splitStatements,\n      boolean isBatchedReWriteConfigured,\n      String... returningColumnNames)", "full_signature": "public static List<NativeQuery> parseJdbcSql(String query, boolean standardConformingStrings,\n      boolean withParameters, boolean splitStatements,\n      boolean isBatchedReWriteConfigured,\n      String... returningColumnNames)", "class_method_signature": "Parser.parseJdbcSql(String query, boolean standardConformingStrings,\n      boolean withParameters, boolean splitStatements,\n      boolean isBatchedReWriteConfigured,\n      String... returningColumnNames)", "testcase": false, "constructor": false}, {"identifier": "parseWithCommandType", "parameters": "(char[] aChars, int i, int keywordStart,\n      int wordLength)", "modifiers": "private static @Nullable", "return": "SqlCommandType", "signature": "SqlCommandType parseWithCommandType(char[] aChars, int i, int keywordStart,\n      int wordLength)", "full_signature": "private static @Nullable SqlCommandType parseWithCommandType(char[] aChars, int i, int keywordStart,\n      int wordLength)", "class_method_signature": "Parser.parseWithCommandType(char[] aChars, int i, int keywordStart,\n      int wordLength)", "testcase": false, "constructor": false}, {"identifier": "addReturning", "parameters": "(StringBuilder nativeSql, SqlCommandType currentCommandType,\n      String[] returningColumnNames, boolean isReturningPresent)", "modifiers": "private static", "return": "boolean", "signature": "boolean addReturning(StringBuilder nativeSql, SqlCommandType currentCommandType,\n      String[] returningColumnNames, boolean isReturningPresent)", "full_signature": "private static boolean addReturning(StringBuilder nativeSql, SqlCommandType currentCommandType,\n      String[] returningColumnNames, boolean isReturningPresent)", "class_method_signature": "Parser.addReturning(StringBuilder nativeSql, SqlCommandType currentCommandType,\n      String[] returningColumnNames, boolean isReturningPresent)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "(@Nullable List<Integer> list)", "modifiers": "private static", "return": "int[]", "signature": "int[] toIntArray(@Nullable List<Integer> list)", "full_signature": "private static int[] toIntArray(@Nullable List<Integer> list)", "class_method_signature": "Parser.toIntArray(@Nullable List<Integer> list)", "testcase": false, "constructor": false}, {"identifier": "parseSingleQuotes", "parameters": "(final char[] query, int offset,\n      boolean standardConformingStrings)", "modifiers": "public static", "return": "int", "signature": "int parseSingleQuotes(final char[] query, int offset,\n      boolean standardConformingStrings)", "full_signature": "public static int parseSingleQuotes(final char[] query, int offset,\n      boolean standardConformingStrings)", "class_method_signature": "Parser.parseSingleQuotes(final char[] query, int offset,\n      boolean standardConformingStrings)", "testcase": false, "constructor": false}, {"identifier": "parseDoubleQuotes", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "int", "signature": "int parseDoubleQuotes(final char[] query, int offset)", "full_signature": "public static int parseDoubleQuotes(final char[] query, int offset)", "class_method_signature": "Parser.parseDoubleQuotes(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseDollarQuotes", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "int", "signature": "int parseDollarQuotes(final char[] query, int offset)", "full_signature": "public static int parseDollarQuotes(final char[] query, int offset)", "class_method_signature": "Parser.parseDollarQuotes(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseLineComment", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "int", "signature": "int parseLineComment(final char[] query, int offset)", "full_signature": "public static int parseLineComment(final char[] query, int offset)", "class_method_signature": "Parser.parseLineComment(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseBlockComment", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "int", "signature": "int parseBlockComment(final char[] query, int offset)", "full_signature": "public static int parseBlockComment(final char[] query, int offset)", "class_method_signature": "Parser.parseBlockComment(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseDeleteKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseDeleteKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseDeleteKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseDeleteKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseInsertKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseInsertKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseInsertKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseInsertKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseMoveKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseMoveKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseMoveKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseMoveKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseReturningKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseReturningKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseReturningKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseReturningKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseSelectKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseSelectKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseSelectKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseSelectKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseUpdateKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseUpdateKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseUpdateKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseUpdateKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseValuesKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseValuesKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseValuesKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseValuesKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(String s, int beginIndex, int endIndex)", "modifiers": "public static", "return": "long", "signature": "long parseLong(String s, int beginIndex, int endIndex)", "full_signature": "public static long parseLong(String s, int beginIndex, int endIndex)", "class_method_signature": "Parser.parseLong(String s, int beginIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "parseWithKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseWithKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseWithKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseWithKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "parseAsKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseAsKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseAsKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseAsKeyword(final char[] query, int offset)", "testcase": false, "constructor": false}, {"identifier": "isDigitAt", "parameters": "(String s, int pos)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigitAt(String s, int pos)", "full_signature": "public static boolean isDigitAt(String s, int pos)", "class_method_signature": "Parser.isDigitAt(String s, int pos)", "testcase": false, "constructor": false}, {"identifier": "digitAt", "parameters": "(String s, int pos)", "modifiers": "public static", "return": "int", "signature": "int digitAt(String s, int pos)", "full_signature": "public static int digitAt(String s, int pos)", "class_method_signature": "Parser.digitAt(String s, int pos)", "testcase": false, "constructor": false}, {"identifier": "isSpace", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSpace(char c)", "full_signature": "public static boolean isSpace(char c)", "class_method_signature": "Parser.isSpace(char c)", "testcase": false, "constructor": false}, {"identifier": "isArrayWhiteSpace", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArrayWhiteSpace(char c)", "full_signature": "public static boolean isArrayWhiteSpace(char c)", "class_method_signature": "Parser.isArrayWhiteSpace(char c)", "testcase": false, "constructor": false}, {"identifier": "isOperatorChar", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOperatorChar(char c)", "full_signature": "public static boolean isOperatorChar(char c)", "class_method_signature": "Parser.isOperatorChar(char c)", "testcase": false, "constructor": false}, {"identifier": "isIdentifierStartChar", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIdentifierStartChar(char c)", "full_signature": "public static boolean isIdentifierStartChar(char c)", "class_method_signature": "Parser.isIdentifierStartChar(char c)", "testcase": false, "constructor": false}, {"identifier": "isIdentifierContChar", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIdentifierContChar(char c)", "full_signature": "public static boolean isIdentifierContChar(char c)", "class_method_signature": "Parser.isIdentifierContChar(char c)", "testcase": false, "constructor": false}, {"identifier": "charTerminatesIdentifier", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean charTerminatesIdentifier(char c)", "full_signature": "public static boolean charTerminatesIdentifier(char c)", "class_method_signature": "Parser.charTerminatesIdentifier(char c)", "testcase": false, "constructor": false}, {"identifier": "isDollarQuoteStartChar", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDollarQuoteStartChar(char c)", "full_signature": "public static boolean isDollarQuoteStartChar(char c)", "class_method_signature": "Parser.isDollarQuoteStartChar(char c)", "testcase": false, "constructor": false}, {"identifier": "isDollarQuoteContChar", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDollarQuoteContChar(char c)", "full_signature": "public static boolean isDollarQuoteContChar(char c)", "class_method_signature": "Parser.isDollarQuoteContChar(char c)", "testcase": false, "constructor": false}, {"identifier": "subArraysEqual", "parameters": "(final char[] arr,\n      final int offA, final int offB,\n      final int len)", "modifiers": "private static", "return": "boolean", "signature": "boolean subArraysEqual(final char[] arr,\n      final int offA, final int offB,\n      final int len)", "full_signature": "private static boolean subArraysEqual(final char[] arr,\n      final int offA, final int offB,\n      final int len)", "class_method_signature": "Parser.subArraysEqual(final char[] arr,\n      final int offA, final int offB,\n      final int len)", "testcase": false, "constructor": false}, {"identifier": "modifyJdbcCall", "parameters": "(String jdbcSql, boolean stdStrings,\n      int serverVersion, int protocolVersion, EscapeSyntaxCallMode escapeSyntaxCallMode)", "modifiers": "public static", "return": "JdbcCallParseInfo", "signature": "JdbcCallParseInfo modifyJdbcCall(String jdbcSql, boolean stdStrings,\n      int serverVersion, int protocolVersion, EscapeSyntaxCallMode escapeSyntaxCallMode)", "full_signature": "public static JdbcCallParseInfo modifyJdbcCall(String jdbcSql, boolean stdStrings,\n      int serverVersion, int protocolVersion, EscapeSyntaxCallMode escapeSyntaxCallMode)", "class_method_signature": "Parser.modifyJdbcCall(String jdbcSql, boolean stdStrings,\n      int serverVersion, int protocolVersion, EscapeSyntaxCallMode escapeSyntaxCallMode)", "testcase": false, "constructor": false}, {"identifier": "replaceProcessing", "parameters": "(String sql, boolean replaceProcessingEnabled,\n      boolean standardConformingStrings)", "modifiers": "public static", "return": "String", "signature": "String replaceProcessing(String sql, boolean replaceProcessingEnabled,\n      boolean standardConformingStrings)", "full_signature": "public static String replaceProcessing(String sql, boolean replaceProcessingEnabled,\n      boolean standardConformingStrings)", "class_method_signature": "Parser.replaceProcessing(String sql, boolean replaceProcessingEnabled,\n      boolean standardConformingStrings)", "testcase": false, "constructor": false}, {"identifier": "parseSql", "parameters": "(char[] sql, int i, StringBuilder newsql, boolean stopOnComma,\n      boolean stdStrings)", "modifiers": "private static", "return": "int", "signature": "int parseSql(char[] sql, int i, StringBuilder newsql, boolean stopOnComma,\n      boolean stdStrings)", "full_signature": "private static int parseSql(char[] sql, int i, StringBuilder newsql, boolean stopOnComma,\n      boolean stdStrings)", "class_method_signature": "Parser.parseSql(char[] sql, int i, StringBuilder newsql, boolean stopOnComma,\n      boolean stdStrings)", "testcase": false, "constructor": false}, {"identifier": "findOpenBrace", "parameters": "(char[] sql, int i)", "modifiers": "private static", "return": "int", "signature": "int findOpenBrace(char[] sql, int i)", "full_signature": "private static int findOpenBrace(char[] sql, int i)", "class_method_signature": "Parser.findOpenBrace(char[] sql, int i)", "testcase": false, "constructor": false}, {"identifier": "checkParsePosition", "parameters": "(int i, int len, int i0, char[] sql,\n      String message)", "modifiers": "private static", "return": "void", "signature": "void checkParsePosition(int i, int len, int i0, char[] sql,\n      String message)", "full_signature": "private static void checkParsePosition(int i, int len, int i0, char[] sql,\n      String message)", "class_method_signature": "Parser.checkParsePosition(int i, int len, int i0, char[] sql,\n      String message)", "testcase": false, "constructor": false}, {"identifier": "escapeFunction", "parameters": "(char[] sql, int i, StringBuilder newsql, boolean stdStrings)", "modifiers": "private static", "return": "int", "signature": "int escapeFunction(char[] sql, int i, StringBuilder newsql, boolean stdStrings)", "full_signature": "private static int escapeFunction(char[] sql, int i, StringBuilder newsql, boolean stdStrings)", "class_method_signature": "Parser.escapeFunction(char[] sql, int i, StringBuilder newsql, boolean stdStrings)", "testcase": false, "constructor": false}, {"identifier": "escapeFunctionArguments", "parameters": "(StringBuilder newsql, String functionName, char[] sql, int i,\n      boolean stdStrings)", "modifiers": "private static", "return": "int", "signature": "int escapeFunctionArguments(StringBuilder newsql, String functionName, char[] sql, int i,\n      boolean stdStrings)", "full_signature": "private static int escapeFunctionArguments(StringBuilder newsql, String functionName, char[] sql, int i,\n      boolean stdStrings)", "class_method_signature": "Parser.escapeFunctionArguments(StringBuilder newsql, String functionName, char[] sql, int i,\n      boolean stdStrings)", "testcase": false, "constructor": false}], "file": "pgjdbc/src/main/java/org/postgresql/core/Parser.java"}, "focal_method": {"identifier": "parseWithKeyword", "parameters": "(final char[] query, int offset)", "modifiers": "public static", "return": "boolean", "body": "public static boolean parseWithKeyword(final char[] query, int offset) {\n    if (query.length < (offset + 4)) {\n      return false;\n    }\n\n    return (query[offset] | 32) == 'w'\n        && (query[offset + 1] | 32) == 'i'\n        && (query[offset + 2] | 32) == 't'\n        && (query[offset + 3] | 32) == 'h';\n  }", "signature": "boolean parseWithKeyword(final char[] query, int offset)", "full_signature": "public static boolean parseWithKeyword(final char[] query, int offset)", "class_method_signature": "Parser.parseWithKeyword(final char[] query, int offset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3370128, "url": "https://github.com/pgjdbc/pgjdbc", "stars": 772, "created": "2/6/2012 7:30:35 PM +00:00", "updates": "2020-01-25T07:41:33+00:00", "fork": "False", "license": "licensed"}}