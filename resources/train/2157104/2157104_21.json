{"test_class": {"identifier": "GeradorASATest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/br/univali/portugol/nucleo/analise/sintatica/GeradorASATest.java"}, "test_case": {"identifier": "testAtribuicoesCompostas", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAtribuicoesCompostas() throws Exception {\n\n         PortugolParser parser = novoParser(\n                \" programa {                                                    \"\n                + \"      funcao inicio() {                                      \"\n                + \"         inteiro x = 1                                       \\n\"\n                + \"         x += 10                                             \\n\"\n                + \"         x -= 10                                             \\n\"\n                + \"         x *= 10                                             \\n\"\n                + \"         x /= 10                                             \\n\"                        \n                + \"         x += teste()                                        \\n\"                        \n                + \"     }                                                       \\n\"\n                + \"     funcao inteiro teste(){ retorne 1 }\"\n                + \"}                                                            \"\n        );\n\n        GeradorASA geradorASA = new GeradorASA(parser);\n        ASA asa = geradorASA.geraASA();\n        \n        NoDeclaracaoFuncao inicio = getNoDeclaracaoFuncao(\"inicio\", asa);\n        \n        List<NoBloco> declaracoes = inicio.getBlocos();\n        assertNoDeclaracaoVariavel((NoDeclaracaoVariavel)declaracoes.get(0), \"x\", TipoDado.INTEIRO, 1);\n        \n        NoOperacaoSoma soma = (NoOperacaoSoma)((NoOperacaoAtribuicao)declaracoes.get(1)).getOperandoDireito();\n        Assert.assertEquals(\"erro na atribui\u00e7\u00e3o composta\", \"x\", ((NoReferenciaVariavel)soma.getOperandoEsquerdo()).getNome());\n        Assert.assertEquals(\"erro no operando direito \", new Integer(10), ((NoInteiro)soma.getOperandoDireito()).getValor());\n        \n        NoOperacaoSubtracao subtracao = (NoOperacaoSubtracao)((NoOperacaoAtribuicao)declaracoes.get(2)).getOperandoDireito();;\n        Assert.assertEquals(\"erro na atribui\u00e7\u00e3o composta\", \"x\", ((NoReferenciaVariavel)subtracao.getOperandoEsquerdo()).getNome());\n        Assert.assertEquals(\"erro no operando direito \", new Integer(10), ((NoInteiro)subtracao.getOperandoDireito()).getValor());\n        \n        NoOperacaoMultiplicacao multiplicacao = (NoOperacaoMultiplicacao)((NoOperacaoAtribuicao)declaracoes.get(3)).getOperandoDireito();\n        Assert.assertEquals(\"erro na atribui\u00e7\u00e3o composta\", \"x\", ((NoReferenciaVariavel)multiplicacao.getOperandoEsquerdo()).getNome());\n        Assert.assertEquals(\"erro no operando direito \", new Integer(10), ((NoInteiro)multiplicacao.getOperandoDireito()).getValor());\n        \n        NoOperacaoDivisao divisao = (NoOperacaoDivisao)((NoOperacaoAtribuicao)declaracoes.get(4)).getOperandoDireito();;\n        Assert.assertEquals(\"erro na atribui\u00e7\u00e3o composta\", \"x\", ((NoReferenciaVariavel)divisao.getOperandoEsquerdo()).getNome());\n        Assert.assertEquals(\"erro no operando direito \", new Integer(10), ((NoInteiro)divisao.getOperandoDireito()).getValor());\n        \n        //declaracoes. \n    }", "signature": "void testAtribuicoesCompostas()", "full_signature": "@Test public void testAtribuicoesCompostas()", "class_method_signature": "GeradorASATest.testAtribuicoesCompostas()", "testcase": true, "constructor": false, "invocations": ["novoParser", "geraASA", "getNoDeclaracaoFuncao", "getBlocos", "assertNoDeclaracaoVariavel", "get", "getOperandoDireito", "get", "assertEquals", "tNome()", "tOperandoEsquerdo()", "assertEquals", "getValor", "getOperandoDireito", "getOperandoDireito", "get", "assertEquals", "tNome()", "tOperandoEsquerdo()", "assertEquals", "getValor", "getOperandoDireito", "getOperandoDireito", "get", "assertEquals", "tNome()", "tOperandoEsquerdo()", "assertEquals", "getValor", "getOperandoDireito", "getOperandoDireito", "get", "assertEquals", "tNome()", "tOperandoEsquerdo()", "assertEquals", "getValor", "getOperandoDireito"]}, "focal_class": {"identifier": "GeradorASA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PortugolParser parser;", "modifier": "private final", "type": "PortugolParser", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "GeradorASA", "parameters": "(PortugolParser parser)", "modifiers": "public", "return": "", "signature": " GeradorASA(PortugolParser parser)", "full_signature": "public  GeradorASA(PortugolParser parser)", "class_method_signature": "GeradorASA.GeradorASA(PortugolParser parser)", "testcase": false, "constructor": true}, {"identifier": "geraASA", "parameters": "()", "modifiers": "public", "return": "ASA", "signature": "ASA geraASA()", "full_signature": "public ASA geraASA()", "class_method_signature": "GeradorASA.geraASA()", "testcase": false, "constructor": false}], "file": "core/src/main/java/br/univali/portugol/nucleo/analise/sintatica/GeradorASA.java"}, "focal_method": {"identifier": "geraASA", "parameters": "()", "modifiers": "public", "return": "ASA", "body": "public ASA geraASA() {\n\n        Antlr4ParserVisitor visitor = new Antlr4ParserVisitor();\n\n        visitor.visitArquivo(parser.arquivo()); // invoca a primeira regra da gram\u00e1tica\n\n        return visitor.getAsa();\n    }", "signature": "ASA geraASA()", "full_signature": "public ASA geraASA()", "class_method_signature": "GeradorASA.geraASA()", "testcase": false, "constructor": false, "invocations": ["visitArquivo", "arquivo", "getAsa"]}, "repository": {"repo_id": 2157104, "url": "https://github.com/UNIVALI-LITE/Portugol-Studio", "language": "Java", "is_fork": false, "fork_count": 131, "stargazer_count": 252, "size": 77733, "license": "licensed"}}