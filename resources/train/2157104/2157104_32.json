{"test_class": {"identifier": "GeradorASATest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/br/univali/portugol/nucleo/analise/sintatica/GeradorASATest.java"}, "test_case": {"identifier": "testEnquanto", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnquanto() throws IOException, RecognitionException, ExcecaoVisitaASA {\n        PortugolParser parser = novoParser(\"programa {  \"\n                + \" funcao inicio() {                   \"\n                + \"     enquanto (x > 10)  {            \"\n                + \"         se (x < 5) {                \"\n                + \"             escreva(\\\"teste\\\")      \"\n                + \"         }                           \"\n                + \"     }                               \"\n                + \"     enquanto (x > 10)               \"\n                + \"         escreva(x)                  \"\n                + \" }                                   \" // func\u00e3o in\u00edcio\n                + \"}                                    \");\n\n        GeradorASA gerador = new GeradorASA(parser);\n        ASAPrograma asa = (ASAPrograma) gerador.geraASA();\n        \n        NoDeclaracaoFuncao funcaoInicio = getNoDeclaracaoFuncao(\"inicio\", asa);\n        \n        NoEnquanto enquanto = (NoEnquanto) funcaoInicio.getBlocos().get(0);\n        \n        Assert.assertTrue(\"a condi\u00e7\u00e3o do primeiro enquanto \u00e9 do tipo >\", enquanto.getCondicao() instanceof NoOperacaoLogicaMaior);\n        NoOperacaoLogicaMaior condicao = (NoOperacaoLogicaMaior)enquanto.getCondicao();\n        Assert.assertEquals(\"o operando esquerdo da condi\u00e7\u00e3o deveria ser 'x'\", \"x\", ((NoReferenciaVariavel)condicao.getOperandoEsquerdo()).getNome());\n        Assert.assertEquals(\"o operando direito da condi\u00e7\u00e3o deveria ser 10\", (Integer)10, ((NoInteiro)condicao.getOperandoDireito()).getValor());\n        Assert.assertEquals(\"o primeiro enquanto deveria ter um filho\", 1, enquanto.getBlocos().size());\n        \n        NoEnquanto enquanto2 = (NoEnquanto) funcaoInicio.getBlocos().get(1);\n        \n        Assert.assertTrue(\"a condi\u00e7\u00e3o do segundo enquanto \u00e9 do tipo <\", enquanto2.getCondicao() instanceof NoOperacaoLogicaMaior);\n        NoOperacaoLogicaMaior condicao2 = (NoOperacaoLogicaMaior)enquanto2.getCondicao();\n        Assert.assertEquals(\"o operando esquerdo da condi\u00e7\u00e3o deveria ser 'x'\", \"x\", ((NoReferenciaVariavel)condicao2.getOperandoEsquerdo()).getNome());\n        Assert.assertEquals(\"o operando direito da condi\u00e7\u00e3o deveria ser 10\", (Integer)10, ((NoInteiro)condicao2.getOperandoDireito()).getValor());\n        Assert.assertEquals(\"o segundo enquanto deveria ter um filho\", 1, enquanto2.getBlocos().size());\n    }", "signature": "void testEnquanto()", "full_signature": "@Test public void testEnquanto()", "class_method_signature": "GeradorASATest.testEnquanto()", "testcase": true, "constructor": false, "invocations": ["novoParser", "geraASA", "getNoDeclaracaoFuncao", "get", "getBlocos", "assertTrue", "Condicao() ", "getCondicao", "assertEquals", "tNome()", "tOperandoEsquerdo()", "assertEquals", "tValor()", "tOperandoDireito()", "assertEquals", "size", "getBlocos", "get", "getBlocos", "assertTrue", "Condicao() ", "getCondicao", "assertEquals", "tNome()", "tOperandoEsquerdo()", "assertEquals", "tValor()", "tOperandoDireito()", "assertEquals", "size", "getBlocos"]}, "focal_class": {"identifier": "GeradorASA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PortugolParser parser;", "modifier": "private final", "type": "PortugolParser", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "GeradorASA", "parameters": "(PortugolParser parser)", "modifiers": "public", "return": "", "signature": " GeradorASA(PortugolParser parser)", "full_signature": "public  GeradorASA(PortugolParser parser)", "class_method_signature": "GeradorASA.GeradorASA(PortugolParser parser)", "testcase": false, "constructor": true}, {"identifier": "geraASA", "parameters": "()", "modifiers": "public", "return": "ASA", "signature": "ASA geraASA()", "full_signature": "public ASA geraASA()", "class_method_signature": "GeradorASA.geraASA()", "testcase": false, "constructor": false}], "file": "core/src/main/java/br/univali/portugol/nucleo/analise/sintatica/GeradorASA.java"}, "focal_method": {"identifier": "geraASA", "parameters": "()", "modifiers": "public", "return": "ASA", "body": "public ASA geraASA() {\n\n        Antlr4ParserVisitor visitor = new Antlr4ParserVisitor();\n\n        visitor.visitArquivo(parser.arquivo()); // invoca a primeira regra da gram\u00e1tica\n\n        return visitor.getAsa();\n    }", "signature": "ASA geraASA()", "full_signature": "public ASA geraASA()", "class_method_signature": "GeradorASA.geraASA()", "testcase": false, "constructor": false, "invocations": ["visitArquivo", "arquivo", "getAsa"]}, "repository": {"repo_id": 2157104, "url": "https://github.com/UNIVALI-LITE/Portugol-Studio", "language": "Java", "is_fork": false, "fork_count": 131, "stargazer_count": 252, "size": 77733, "license": "licensed"}}