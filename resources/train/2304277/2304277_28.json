{"test_class": {"identifier": "PackagingProviderConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CORE_JAR_ID = \"jar\";", "modifier": "private static final", "type": "String", "declarator": "CORE_JAR_ID = \"jar\"", "var_name": "CORE_JAR_ID"}, {"original_string": "private static final String CORE_WAR_ID = \"war\";", "modifier": "private static final", "type": "String", "declarator": "CORE_WAR_ID = \"war\"", "var_name": "CORE_WAR_ID"}, {"original_string": "private static final String CUSTOM_JAR_ID = \"jar_custom\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_JAR_ID = \"jar_custom\"", "var_name": "CUSTOM_JAR_ID"}, {"original_string": "private PackagingProviderConverter converter;", "modifier": "private", "type": "PackagingProviderConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Mock\n  private CorePackagingProvider mockCoreJarPackaging;", "modifier": "@Mock\n  private", "type": "CorePackagingProvider", "declarator": "mockCoreJarPackaging", "var_name": "mockCoreJarPackaging"}, {"original_string": "@Mock\n  private PackagingProvider mockCustomJarPackaging;", "modifier": "@Mock\n  private", "type": "PackagingProvider", "declarator": "mockCustomJarPackaging", "var_name": "mockCustomJarPackaging"}, {"original_string": "@Mock\n  private PackagingProviderRegistry mockPackagingProviderRegistry;", "modifier": "@Mock\n  private", "type": "PackagingProviderRegistry", "declarator": "mockPackagingProviderRegistry", "var_name": "mockPackagingProviderRegistry"}, {"original_string": "@Mock\n  private CorePackagingProvider mockWarPackaging;", "modifier": "@Mock\n  private", "type": "CorePackagingProvider", "declarator": "mockWarPackaging", "var_name": "mockWarPackaging"}], "file": "runtime/converters/src/test/java/org/springframework/roo/converters/PackagingProviderConverterTest.java"}, "test_case": {"identifier": "testGetAllPossibleValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetAllPossibleValues() {\n    // Set up\n    final PackagingProvider[] providers =\n        {mockCoreJarPackaging, mockCustomJarPackaging, mockWarPackaging};\n    when(mockPackagingProviderRegistry.getAllPackagingProviders()).thenReturn(\n        Arrays.asList(providers));\n    final List<Completion> expectedCompletions = new ArrayList<Completion>();\n    for (final PackagingProvider provider : providers) {\n      expectedCompletions.add(new Completion(provider.getId().toUpperCase()));\n    }\n    final List<Completion> completions = new ArrayList<Completion>();\n\n    // Invoke\n    final boolean addSpace =\n        converter.getAllPossibleValues(completions, PackagingProvider.class, \"ignored\", null, null);\n\n    // Check\n    assertTrue(addSpace);\n    assertEquals(expectedCompletions.size(), completions.size());\n    assertTrue(\"Expected \" + expectedCompletions + \" but was \" + completions,\n        completions.containsAll(expectedCompletions));\n  }", "signature": "void testGetAllPossibleValues()", "full_signature": "@Test public void testGetAllPossibleValues()", "class_method_signature": "PackagingProviderConverterTest.testGetAllPossibleValues()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAllPackagingProviders", "asList", "add", "toUpperCase", "getId", "getAllPossibleValues", "assertTrue", "assertEquals", "size", "size", "assertTrue", "containsAll"]}, "focal_class": {"identifier": "PackagingProviderConverter", "superclass": "", "interfaces": "implements Converter<PackagingProvider>", "fields": [{"original_string": "@Reference\n  PackagingProviderRegistry packagingProviderRegistry;", "modifier": "@Reference", "type": "PackagingProviderRegistry", "declarator": "packagingProviderRegistry", "var_name": "packagingProviderRegistry"}], "methods": [{"identifier": "convertFromText", "parameters": "(final String value, final Class<?> targetType,\n      final String optionContext)", "modifiers": "public", "return": "PackagingProvider", "signature": "PackagingProvider convertFromText(final String value, final Class<?> targetType,\n      final String optionContext)", "full_signature": "public PackagingProvider convertFromText(final String value, final Class<?> targetType,\n      final String optionContext)", "class_method_signature": "PackagingProviderConverter.convertFromText(final String value, final Class<?> targetType,\n      final String optionContext)", "testcase": false, "constructor": false}, {"identifier": "getAllPossibleValues", "parameters": "(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "modifiers": "public", "return": "boolean", "signature": "boolean getAllPossibleValues(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "full_signature": "public boolean getAllPossibleValues(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "class_method_signature": "PackagingProviderConverter.getAllPossibleValues(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(final Class<?> type, final String optionContext)", "modifiers": "public", "return": "boolean", "signature": "boolean supports(final Class<?> type, final String optionContext)", "full_signature": "public boolean supports(final Class<?> type, final String optionContext)", "class_method_signature": "PackagingProviderConverter.supports(final Class<?> type, final String optionContext)", "testcase": false, "constructor": false}], "file": "runtime/converters/src/main/java/org/springframework/roo/converters/PackagingProviderConverter.java"}, "focal_method": {"identifier": "getAllPossibleValues", "parameters": "(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "modifiers": "public", "return": "boolean", "body": "public boolean getAllPossibleValues(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target) {\n    for (final PackagingProvider packagingProvider : packagingProviderRegistry\n        .getAllPackagingProviders()) {\n      completions.add(new Completion(packagingProvider.getId().toUpperCase()));\n    }\n    return true;\n  }", "signature": "boolean getAllPossibleValues(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "full_signature": "public boolean getAllPossibleValues(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "class_method_signature": "PackagingProviderConverter.getAllPossibleValues(final List<Completion> completions,\n      final Class<?> targetType, final String existingData, final String optionContext,\n      final MethodTarget target)", "testcase": false, "constructor": false, "invocations": ["getAllPackagingProviders", "add", "toUpperCase", "getId"]}, "repository": {"repo_id": 2304277, "url": "https://github.com/spring-projects/spring-roo", "language": "Java", "is_fork": false, "fork_count": 303, "stargazer_count": 661, "size": 40033, "license": "licensed"}}