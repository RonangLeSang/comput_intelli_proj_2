{"test_class": {"identifier": "DomUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_TEXT = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TEXT = \"foo\"", "var_name": "DEFAULT_TEXT"}, {"original_string": "private static final String NODE_TEXT = \"bar\";", "modifier": "private static final", "type": "String", "declarator": "NODE_TEXT = \"bar\"", "var_name": "NODE_TEXT"}, {"original_string": "private static final String XML_AFTER_REMOVAL =\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><top><middle/></top>\";", "modifier": "private static final", "type": "String", "declarator": "XML_AFTER_REMOVAL =\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><top><middle/></top>\"", "var_name": "XML_AFTER_REMOVAL"}, {"original_string": "private static final String XML_BEFORE_REMOVAL =\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><top><middle><bottom id=\\\"1\\\" /><bottom id=\\\"2\\\" /></middle></top>\";", "modifier": "private static final", "type": "String", "declarator": "XML_BEFORE_REMOVAL =\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><top><middle><bottom id=\\\"1\\\" /><bottom id=\\\"2\\\" /></middle></top>\"", "var_name": "XML_BEFORE_REMOVAL"}], "file": "runtime/support/src/test/java/org/springframework/roo/support/util/DomUtilsTest.java"}, "test_case": {"identifier": "testGetTextContentOfNonNullNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTextContentOfNonNullNode() {\n    // Set up\n    final Node mockNode = mock(Node.class);\n    when(mockNode.getTextContent()).thenReturn(NODE_TEXT);\n\n    assertEquals(NODE_TEXT, DomUtils.getTextContent(mockNode, DEFAULT_TEXT));\n  }", "signature": "void testGetTextContentOfNonNullNode()", "full_signature": "@Test public void testGetTextContentOfNonNullNode()", "class_method_signature": "DomUtilsTest.testGetTextContentOfNonNullNode()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getTextContent", "assertEquals", "getTextContent"]}, "focal_class": {"identifier": "DomUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createChildElement", "parameters": "(final String tagName, final Node parent,\n      final Document document)", "modifiers": "public static", "return": "Element", "signature": "Element createChildElement(final String tagName, final Node parent,\n      final Document document)", "full_signature": "public static Element createChildElement(final String tagName, final Node parent,\n      final Document document)", "class_method_signature": "DomUtils.createChildElement(final String tagName, final Node parent,\n      final Document document)", "testcase": false, "constructor": false}, {"identifier": "createChildIfNotExists", "parameters": "(final String tagName, final Node parent,\n      final Document document)", "modifiers": "public static", "return": "Element", "signature": "Element createChildIfNotExists(final String tagName, final Node parent,\n      final Document document)", "full_signature": "public static Element createChildIfNotExists(final String tagName, final Node parent,\n      final Document document)", "class_method_signature": "DomUtils.createChildIfNotExists(final String tagName, final Node parent,\n      final Document document)", "testcase": false, "constructor": false}, {"identifier": "findFirstElementByName", "parameters": "(final String name, final Element root)", "modifiers": "public static", "return": "Element", "signature": "Element findFirstElementByName(final String name, final Element root)", "full_signature": "public static Element findFirstElementByName(final String name, final Element root)", "class_method_signature": "DomUtils.findFirstElementByName(final String name, final Element root)", "testcase": false, "constructor": false}, {"identifier": "getChildElementByTagName", "parameters": "(final Element element,\n      final String childElementName)", "modifiers": "public static", "return": "Element", "signature": "Element getChildElementByTagName(final Element element,\n      final String childElementName)", "full_signature": "public static Element getChildElementByTagName(final Element element,\n      final String childElementName)", "class_method_signature": "DomUtils.getChildElementByTagName(final Element element,\n      final String childElementName)", "testcase": false, "constructor": false}, {"identifier": "getChildElementsByTagName", "parameters": "(final Element element,\n      final String childEleName)", "modifiers": "public static", "return": "List<Element>", "signature": "List<Element> getChildElementsByTagName(final Element element,\n      final String childEleName)", "full_signature": "public static List<Element> getChildElementsByTagName(final Element element,\n      final String childEleName)", "class_method_signature": "DomUtils.getChildElementsByTagName(final Element element,\n      final String childEleName)", "testcase": false, "constructor": false}, {"identifier": "getChildElementsByTagName", "parameters": "(final Element element,\n      final String[] childElementNames)", "modifiers": "public static", "return": "List<Element>", "signature": "List<Element> getChildElementsByTagName(final Element element,\n      final String[] childElementNames)", "full_signature": "public static List<Element> getChildElementsByTagName(final Element element,\n      final String[] childElementNames)", "class_method_signature": "DomUtils.getChildElementsByTagName(final Element element,\n      final String[] childElementNames)", "testcase": false, "constructor": false}, {"identifier": "getChildElementValueByTagName", "parameters": "(final Element element,\n      final String childElementName)", "modifiers": "public static", "return": "String", "signature": "String getChildElementValueByTagName(final Element element,\n      final String childElementName)", "full_signature": "public static String getChildElementValueByTagName(final Element element,\n      final String childElementName)", "class_method_signature": "DomUtils.getChildElementValueByTagName(final Element element,\n      final String childElementName)", "testcase": false, "constructor": false}, {"identifier": "getChildTextContent", "parameters": "(final Element parent, final String child)", "modifiers": "public static", "return": "String", "signature": "String getChildTextContent(final Element parent, final String child)", "full_signature": "public static String getChildTextContent(final Element parent, final String child)", "class_method_signature": "DomUtils.getChildTextContent(final Element parent, final String child)", "testcase": false, "constructor": false}, {"identifier": "getTextContent", "parameters": "(final Node node, final String defaultValue)", "modifiers": "public static", "return": "String", "signature": "String getTextContent(final Node node, final String defaultValue)", "full_signature": "public static String getTextContent(final Node node, final String defaultValue)", "class_method_signature": "DomUtils.getTextContent(final Node node, final String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getTextValue", "parameters": "(final Element valueElement)", "modifiers": "public static", "return": "String", "signature": "String getTextValue(final Element valueElement)", "full_signature": "public static String getTextValue(final Element valueElement)", "class_method_signature": "DomUtils.getTextValue(final Element valueElement)", "testcase": false, "constructor": false}, {"identifier": "nodeNameEquals", "parameters": "(final Node node, final String desiredName)", "modifiers": "public static", "return": "boolean", "signature": "boolean nodeNameEquals(final Node node, final String desiredName)", "full_signature": "public static boolean nodeNameEquals(final Node node, final String desiredName)", "class_method_signature": "DomUtils.nodeNameEquals(final Node node, final String desiredName)", "testcase": false, "constructor": false}, {"identifier": "nodeNameMatch", "parameters": "(final Node node, final Collection<?> desiredNames)", "modifiers": "private static", "return": "boolean", "signature": "boolean nodeNameMatch(final Node node, final Collection<?> desiredNames)", "full_signature": "private static boolean nodeNameMatch(final Node node, final Collection<?> desiredNames)", "class_method_signature": "DomUtils.nodeNameMatch(final Node node, final Collection<?> desiredNames)", "testcase": false, "constructor": false}, {"identifier": "nodeNameMatch", "parameters": "(final Node node, final String desiredName)", "modifiers": "private static", "return": "boolean", "signature": "boolean nodeNameMatch(final Node node, final String desiredName)", "full_signature": "private static boolean nodeNameMatch(final Node node, final String desiredName)", "class_method_signature": "DomUtils.nodeNameMatch(final Node node, final String desiredName)", "testcase": false, "constructor": false}, {"identifier": "removeElements", "parameters": "(final String xPath, final Element searchBase)", "modifiers": "public static", "return": "void", "signature": "void removeElements(final String xPath, final Element searchBase)", "full_signature": "public static void removeElements(final String xPath, final Element searchBase)", "class_method_signature": "DomUtils.removeElements(final String xPath, final Element searchBase)", "testcase": false, "constructor": false}, {"identifier": "removeTextNodes", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "signature": "void removeTextNodes(final Node node)", "full_signature": "public static void removeTextNodes(final Node node)", "class_method_signature": "DomUtils.removeTextNodes(final Node node)", "testcase": false, "constructor": false}, {"identifier": "DomUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DomUtils()", "full_signature": "private  DomUtils()", "class_method_signature": "DomUtils.DomUtils()", "testcase": false, "constructor": true}], "file": "runtime/support/src/main/java/org/springframework/roo/support/util/DomUtils.java"}, "focal_method": {"identifier": "getTextContent", "parameters": "(final Node node, final String defaultValue)", "modifiers": "public static", "return": "String", "body": "public static String getTextContent(final Node node, final String defaultValue) {\n    if (node == null) {\n      return defaultValue;\n    }\n    return node.getTextContent();\n  }", "signature": "String getTextContent(final Node node, final String defaultValue)", "full_signature": "public static String getTextContent(final Node node, final String defaultValue)", "class_method_signature": "DomUtils.getTextContent(final Node node, final String defaultValue)", "testcase": false, "constructor": false, "invocations": ["getTextContent"]}, "repository": {"repo_id": 2304277, "url": "https://github.com/spring-projects/spring-roo", "language": "Java", "is_fork": false, "fork_count": 303, "stargazer_count": 661, "size": 40033, "license": "licensed"}}