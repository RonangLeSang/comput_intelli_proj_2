{"test_class": {"identifier": "CompoundInterestTest", "superclass": "", "interfaces": "", "fields": [], "file": "calc/src/test/java/org/javamoney/calc/common/CompoundInterestTest.java"}, "test_case": {"identifier": "of_correctPeriods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void of_correctPeriods() throws Exception {\n        CompoundInterest ci = CompoundInterest.of(\n                RateAndPeriods.of(0.05,1)\n        );\n        assertEquals(ci.getPeriods(),  1);\n        ci = CompoundInterest.of(\n                RateAndPeriods.of(0.05,234)\n        );\n        assertEquals(ci.getPeriods(),  234);\n    }", "signature": "void of_correctPeriods()", "full_signature": "@Test public void of_correctPeriods()", "class_method_signature": "CompoundInterestTest.of_correctPeriods()", "testcase": true, "constructor": false, "invocations": ["of", "of", "assertEquals", "getPeriods", "of", "of", "assertEquals", "getPeriods"]}, "focal_class": {"identifier": "CompoundInterest", "superclass": "extends AbstractRateAndPeriodBasedOperator", "interfaces": "", "fields": [{"original_string": "private final int timesCompounded;", "modifier": "private final", "type": "int", "declarator": "timesCompounded", "var_name": "timesCompounded"}], "methods": [{"identifier": "CompoundInterest", "parameters": "(RateAndPeriods rateAndPeriods, int timesCompounded)", "modifiers": "private", "return": "", "signature": " CompoundInterest(RateAndPeriods rateAndPeriods, int timesCompounded)", "full_signature": "private  CompoundInterest(RateAndPeriods rateAndPeriods, int timesCompounded)", "class_method_signature": "CompoundInterest.CompoundInterest(RateAndPeriods rateAndPeriods, int timesCompounded)", "testcase": false, "constructor": true}, {"identifier": "getTimesCompounded", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimesCompounded()", "full_signature": "public int getTimesCompounded()", "class_method_signature": "CompoundInterest.getTimesCompounded()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(RateAndPeriods rateAndPeriods, int timesCompounded)", "modifiers": "public static", "return": "CompoundInterest", "signature": "CompoundInterest of(RateAndPeriods rateAndPeriods, int timesCompounded)", "full_signature": "public static CompoundInterest of(RateAndPeriods rateAndPeriods, int timesCompounded)", "class_method_signature": "CompoundInterest.of(RateAndPeriods rateAndPeriods, int timesCompounded)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(RateAndPeriods rateAndperiods)", "modifiers": "public static", "return": "CompoundInterest", "signature": "CompoundInterest of(RateAndPeriods rateAndperiods)", "full_signature": "public static CompoundInterest of(RateAndPeriods rateAndperiods)", "class_method_signature": "CompoundInterest.of(RateAndPeriods rateAndperiods)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(MonetaryAmount amount, RateAndPeriods rateAndPeriods)", "modifiers": "public static", "return": "MonetaryAmount", "signature": "MonetaryAmount calculate(MonetaryAmount amount, RateAndPeriods rateAndPeriods)", "full_signature": "public static MonetaryAmount calculate(MonetaryAmount amount, RateAndPeriods rateAndPeriods)", "class_method_signature": "CompoundInterest.calculate(MonetaryAmount amount, RateAndPeriods rateAndPeriods)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(MonetaryAmount amount, RateAndPeriods rateAndPeriods, int timesCompounded)", "modifiers": "public static", "return": "MonetaryAmount", "signature": "MonetaryAmount calculate(MonetaryAmount amount, RateAndPeriods rateAndPeriods, int timesCompounded)", "full_signature": "public static MonetaryAmount calculate(MonetaryAmount amount, RateAndPeriods rateAndPeriods, int timesCompounded)", "class_method_signature": "CompoundInterest.calculate(MonetaryAmount amount, RateAndPeriods rateAndPeriods, int timesCompounded)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(MonetaryAmount amount)", "modifiers": "@Override public", "return": "MonetaryAmount", "signature": "MonetaryAmount apply(MonetaryAmount amount)", "full_signature": "@Override public MonetaryAmount apply(MonetaryAmount amount)", "class_method_signature": "CompoundInterest.apply(MonetaryAmount amount)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CompoundInterest.toString()", "testcase": false, "constructor": false}], "file": "calc/src/main/java/org/javamoney/calc/common/CompoundInterest.java"}, "focal_method": {"identifier": "of", "parameters": "(RateAndPeriods rateAndPeriods, int timesCompounded)", "modifiers": "public static", "return": "CompoundInterest", "body": "public static CompoundInterest of(RateAndPeriods rateAndPeriods, int timesCompounded) {\n        return new CompoundInterest(rateAndPeriods, timesCompounded);\n    }", "signature": "CompoundInterest of(RateAndPeriods rateAndPeriods, int timesCompounded)", "full_signature": "public static CompoundInterest of(RateAndPeriods rateAndPeriods, int timesCompounded)", "class_method_signature": "CompoundInterest.of(RateAndPeriods rateAndPeriods, int timesCompounded)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9553726, "url": "https://github.com/JavaMoney/javamoney-lib", "language": "Java", "is_fork": false, "fork_count": 72, "stargazer_count": 93, "size": 2478, "license": "licensed"}}