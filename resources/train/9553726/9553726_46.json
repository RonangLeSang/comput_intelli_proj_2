{"test_class": {"identifier": "FutureValueFactorTest", "superclass": "", "interfaces": "", "fields": [], "file": "calc/src/test/java/org/javamoney/calc/common/FutureValueFactorTest.java"}, "test_case": {"identifier": "calculate_NegativeRates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculate_NegativeRates() throws Exception {\n        assertEquals(1.0, FutureValueFactor.calculate(RateAndPeriods.of(-0.05,0)).doubleValue(), 0.0d);\n        assertEquals(0.9500, FutureValueFactor.calculate(RateAndPeriods.of(-0.05,1)).doubleValue(), 0.0d);\n        assertEquals(0.5987369392383789, FutureValueFactor.calculate(RateAndPeriods.of(-0.05,10)).doubleValue(), 0.0d);\n    }", "signature": "void calculate_NegativeRates()", "full_signature": "@Test public void calculate_NegativeRates()", "class_method_signature": "FutureValueFactorTest.calculate_NegativeRates()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "doubleValue", "calculate", "of", "assertEquals", "doubleValue", "calculate", "of", "assertEquals", "doubleValue", "calculate", "of"]}, "focal_class": {"identifier": "FutureValueFactor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FutureValueFactor", "parameters": "()", "modifiers": "private", "return": "", "signature": " FutureValueFactor()", "full_signature": "private  FutureValueFactor()", "class_method_signature": "FutureValueFactor.FutureValueFactor()", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(RateAndPeriods rateAndPeriods)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal calculate(RateAndPeriods rateAndPeriods)", "full_signature": "public static BigDecimal calculate(RateAndPeriods rateAndPeriods)", "class_method_signature": "FutureValueFactor.calculate(RateAndPeriods rateAndPeriods)", "testcase": false, "constructor": false}], "file": "calc/src/main/java/org/javamoney/calc/common/FutureValueFactor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(RateAndPeriods rateAndPeriods)", "modifiers": "public static", "return": "BigDecimal", "body": "public static BigDecimal calculate(RateAndPeriods rateAndPeriods) {\n        Objects.requireNonNull(rateAndPeriods);\n        // 1/((1+r)^n)\n        BigDecimal base = CalculationContext.one().add(rateAndPeriods.getRate().get());\n        return base.pow(rateAndPeriods.getPeriods(), CalculationContext.mathContext());\n    }", "signature": "BigDecimal calculate(RateAndPeriods rateAndPeriods)", "full_signature": "public static BigDecimal calculate(RateAndPeriods rateAndPeriods)", "class_method_signature": "FutureValueFactor.calculate(RateAndPeriods rateAndPeriods)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "add", "one", "get", "getRate", "pow", "getPeriods", "mathContext"]}, "repository": {"repo_id": 9553726, "url": "https://github.com/JavaMoney/javamoney-lib", "language": "Java", "is_fork": false, "fork_count": 72, "stargazer_count": 93, "size": 2478, "license": "licensed"}}