{"test_class": {"identifier": "DiscountFactorTest", "superclass": "", "interfaces": "", "fields": [], "file": "calc/src/test/java/org/javamoney/calc/common/DiscountFactorTest.java"}, "test_case": {"identifier": "calculate_Zero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calculate_Zero() {\n        assertEquals(1, DiscountFactor.calculate(RateAndPeriods.of(0.00,0)).intValueExact());\n        assertEquals(1, DiscountFactor.calculate(RateAndPeriods.of(0.00,1)).intValueExact());\n        assertEquals(1, DiscountFactor.calculate(RateAndPeriods.of(0.00,10)).intValueExact());\n    }", "signature": "void calculate_Zero()", "full_signature": "@Test public void calculate_Zero()", "class_method_signature": "DiscountFactorTest.calculate_Zero()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "intValueExact", "calculate", "of", "assertEquals", "intValueExact", "calculate", "of", "assertEquals", "intValueExact", "calculate", "of"]}, "focal_class": {"identifier": "DiscountFactor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "DiscountFactor", "parameters": "()", "modifiers": "private", "return": "", "signature": " DiscountFactor()", "full_signature": "private  DiscountFactor()", "class_method_signature": "DiscountFactor.DiscountFactor()", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(RateAndPeriods rateAndPeriods)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal calculate(RateAndPeriods rateAndPeriods)", "full_signature": "public static BigDecimal calculate(RateAndPeriods rateAndPeriods)", "class_method_signature": "DiscountFactor.calculate(RateAndPeriods rateAndPeriods)", "testcase": false, "constructor": false}], "file": "calc/src/main/java/org/javamoney/calc/common/DiscountFactor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(RateAndPeriods rateAndPeriods)", "modifiers": "public static", "return": "BigDecimal", "body": "public static BigDecimal calculate(RateAndPeriods rateAndPeriods) {\n        Objects.requireNonNull(rateAndPeriods);\n        // (1-(1+r)^n)/1-(1+rate)\n        final BigDecimal ONE = CalculationContext.one();\n        BigDecimal div = ONE.min(ONE.add(rateAndPeriods.getRate().get()));\n        BigDecimal factor = ONE.subtract(ONE.add(rateAndPeriods.getRate().get()).pow(rateAndPeriods.getPeriods()))\n                .divide(div, CalculationContext.mathContext());\n        return ONE.add(factor);\n    }", "signature": "BigDecimal calculate(RateAndPeriods rateAndPeriods)", "full_signature": "public static BigDecimal calculate(RateAndPeriods rateAndPeriods)", "class_method_signature": "DiscountFactor.calculate(RateAndPeriods rateAndPeriods)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "one", "min", "add", "get", "getRate", "divide", "subtract", "pow", "add", "get", "getRate", "getPeriods", "mathContext", "add"]}, "repository": {"repo_id": 9553726, "url": "https://github.com/JavaMoney/javamoney-lib", "language": "Java", "is_fork": false, "fork_count": 72, "stargazer_count": 93, "size": 2478, "license": "licensed"}}