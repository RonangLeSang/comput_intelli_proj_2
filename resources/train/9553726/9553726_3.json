{"test_class": {"identifier": "AnnualPercentageYieldTest", "superclass": "", "interfaces": "", "fields": [], "file": "calc/src/test/java/org/javamoney/calc/banking/AnnualPercentageYieldTest.java"}, "test_case": {"identifier": "apply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void apply() throws Exception {\n        AnnualPercentageYield ci = AnnualPercentageYield.of(\n                Rate.of(0.05),2\n        );\n        assertEquals(ci.apply(Money.of(1,\"CHF\")),Money.of(0.050625,\"CHF\"));\n    }", "signature": "void apply()", "full_signature": "@Test public void apply()", "class_method_signature": "AnnualPercentageYieldTest.apply()", "testcase": true, "constructor": false, "invocations": ["of", "of", "assertEquals", "apply", "of", "of"]}, "focal_class": {"identifier": "AnnualPercentageYield", "superclass": "", "interfaces": "implements MonetaryOperator", "fields": [{"original_string": "private final Rate rate;", "modifier": "private final", "type": "Rate", "declarator": "rate", "var_name": "rate"}, {"original_string": "private final int periods;", "modifier": "private final", "type": "int", "declarator": "periods", "var_name": "periods"}], "methods": [{"identifier": "AnnualPercentageYield", "parameters": "(Rate rate, int periods)", "modifiers": "private", "return": "", "signature": " AnnualPercentageYield(Rate rate, int periods)", "full_signature": "private  AnnualPercentageYield(Rate rate, int periods)", "class_method_signature": "AnnualPercentageYield.AnnualPercentageYield(Rate rate, int periods)", "testcase": false, "constructor": true}, {"identifier": "getPeriods", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPeriods()", "full_signature": "public int getPeriods()", "class_method_signature": "AnnualPercentageYield.getPeriods()", "testcase": false, "constructor": false}, {"identifier": "getRate", "parameters": "()", "modifiers": "public", "return": "Rate", "signature": "Rate getRate()", "full_signature": "public Rate getRate()", "class_method_signature": "AnnualPercentageYield.getRate()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Rate rate, int periods)", "modifiers": "public static", "return": "AnnualPercentageYield", "signature": "AnnualPercentageYield of(Rate rate, int periods)", "full_signature": "public static AnnualPercentageYield of(Rate rate, int periods)", "class_method_signature": "AnnualPercentageYield.of(Rate rate, int periods)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Rate rate, int periods)", "modifiers": "public static", "return": "Rate", "signature": "Rate calculate(Rate rate, int periods)", "full_signature": "public static Rate calculate(Rate rate, int periods)", "class_method_signature": "AnnualPercentageYield.calculate(Rate rate, int periods)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(MonetaryAmount amount, Rate rate, int periods)", "modifiers": "public static", "return": "MonetaryAmount", "signature": "MonetaryAmount calculate(MonetaryAmount amount, Rate rate, int periods)", "full_signature": "public static MonetaryAmount calculate(MonetaryAmount amount, Rate rate, int periods)", "class_method_signature": "AnnualPercentageYield.calculate(MonetaryAmount amount, Rate rate, int periods)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(MonetaryAmount amount)", "modifiers": "@Override public", "return": "MonetaryAmount", "signature": "MonetaryAmount apply(MonetaryAmount amount)", "full_signature": "@Override public MonetaryAmount apply(MonetaryAmount amount)", "class_method_signature": "AnnualPercentageYield.apply(MonetaryAmount amount)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AnnualPercentageYield.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Rate rate, int periods)", "modifiers": "private static", "return": "String", "signature": "String toString(Rate rate, int periods)", "full_signature": "private static String toString(Rate rate, int periods)", "class_method_signature": "AnnualPercentageYield.toString(Rate rate, int periods)", "testcase": false, "constructor": false}], "file": "calc/src/main/java/org/javamoney/calc/banking/AnnualPercentageYield.java"}, "focal_method": {"identifier": "apply", "parameters": "(MonetaryAmount amount)", "modifiers": "@Override public", "return": "MonetaryAmount", "body": "@Override\n    public MonetaryAmount apply(MonetaryAmount amount) {\n        return calculate(amount, rate, periods);\n    }", "signature": "MonetaryAmount apply(MonetaryAmount amount)", "full_signature": "@Override public MonetaryAmount apply(MonetaryAmount amount)", "class_method_signature": "AnnualPercentageYield.apply(MonetaryAmount amount)", "testcase": false, "constructor": false, "invocations": ["calculate"]}, "repository": {"repo_id": 9553726, "url": "https://github.com/JavaMoney/javamoney-lib", "language": "Java", "is_fork": false, "fork_count": 72, "stargazer_count": 93, "size": 2478, "license": "licensed"}}