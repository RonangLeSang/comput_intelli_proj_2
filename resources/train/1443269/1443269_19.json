{"test_class": {"identifier": "DirectoryReferenceCounterTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/blur-core/src/test/java/com/nearinfinity/blur/manager/writer/DirectoryReferenceCounterTest.java"}, "test_case": {"identifier": "testDirectoryReferenceCounterTestError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDirectoryReferenceCounterTestError() throws CorruptIndexException, IOException {\n    Directory directory = wrap(new RAMDirectory());\n    IndexWriterConfig conf = new IndexWriterConfig(Version.LUCENE_36, new KeywordAnalyzer());\n    IndexWriter writer = new IndexWriter(directory, conf);\n    int size = 100;\n    IndexReader[] readers = new IndexReader[size];\n    for (int i = 0; i < size; i++) {\n      writer.addDocument(getDoc());\n      readers[i] = IndexReader.open(writer, true);\n      writer.forceMerge(1);\n    }\n\n    try {\n      for (int i = 0; i < size; i++) {\n        checkReader(readers[i], i);\n      }\n      fail();\n    } catch (Exception e) {\n      //should error\n    }\n  }", "signature": "void testDirectoryReferenceCounterTestError()", "full_signature": "@Test public void testDirectoryReferenceCounterTestError()", "class_method_signature": "DirectoryReferenceCounterTest.testDirectoryReferenceCounterTestError()", "testcase": true, "constructor": false, "invocations": ["wrap", "addDocument", "getDoc", "open", "forceMerge", "checkReader", "fail"]}, "focal_class": {"identifier": "DirectoryReferenceCounter", "superclass": "extends Directory", "interfaces": "", "fields": [{"original_string": "private final static Log LOG = LogFactory.getLog(DirectoryReferenceCounter.class);", "modifier": "private final static", "type": "Log", "declarator": "LOG = LogFactory.getLog(DirectoryReferenceCounter.class)", "var_name": "LOG"}, {"original_string": "private Directory directory;", "modifier": "private", "type": "Directory", "declarator": "directory", "var_name": "directory"}, {"original_string": "private Map<String, AtomicInteger> refs = new ConcurrentHashMap<String, AtomicInteger>();", "modifier": "private", "type": "Map<String, AtomicInteger>", "declarator": "refs = new ConcurrentHashMap<String, AtomicInteger>()", "var_name": "refs"}, {"original_string": "private DirectoryReferenceFileGC gc;", "modifier": "private", "type": "DirectoryReferenceFileGC", "declarator": "gc", "var_name": "gc"}], "methods": [{"identifier": "DirectoryReferenceCounter", "parameters": "(Directory directory, DirectoryReferenceFileGC gc)", "modifiers": "public", "return": "", "signature": " DirectoryReferenceCounter(Directory directory, DirectoryReferenceFileGC gc)", "full_signature": "public  DirectoryReferenceCounter(Directory directory, DirectoryReferenceFileGC gc)", "class_method_signature": "DirectoryReferenceCounter.DirectoryReferenceCounter(Directory directory, DirectoryReferenceFileGC gc)", "testcase": false, "constructor": true}, {"identifier": "deleteFile", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void deleteFile(String name)", "full_signature": "public void deleteFile(String name)", "class_method_signature": "DirectoryReferenceCounter.deleteFile(String name)", "testcase": false, "constructor": false}, {"identifier": "addToFileGC", "parameters": "(String name)", "modifiers": "private", "return": "void", "signature": "void addToFileGC(String name)", "full_signature": "private void addToFileGC(String name)", "class_method_signature": "DirectoryReferenceCounter.addToFileGC(String name)", "testcase": false, "constructor": false}, {"identifier": "createOutput", "parameters": "(String name)", "modifiers": "public", "return": "IndexOutput", "signature": "IndexOutput createOutput(String name)", "full_signature": "public IndexOutput createOutput(String name)", "class_method_signature": "DirectoryReferenceCounter.createOutput(String name)", "testcase": false, "constructor": false}, {"identifier": "openInput", "parameters": "(String name)", "modifiers": "public", "return": "IndexInput", "signature": "IndexInput openInput(String name)", "full_signature": "public IndexInput openInput(String name)", "class_method_signature": "DirectoryReferenceCounter.openInput(String name)", "testcase": false, "constructor": false}, {"identifier": "openInput", "parameters": "(String name, int bufferSize)", "modifiers": "public", "return": "IndexInput", "signature": "IndexInput openInput(String name, int bufferSize)", "full_signature": "public IndexInput openInput(String name, int bufferSize)", "class_method_signature": "DirectoryReferenceCounter.openInput(String name, int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(String name, IndexInput input)", "modifiers": "private", "return": "IndexInput", "signature": "IndexInput wrap(String name, IndexInput input)", "full_signature": "private IndexInput wrap(String name, IndexInput input)", "class_method_signature": "DirectoryReferenceCounter.wrap(String name, IndexInput input)", "testcase": false, "constructor": false}, {"identifier": "touchFile", "parameters": "(String name)", "modifiers": "@SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void touchFile(String name)", "full_signature": "@SuppressWarnings(\"deprecation\") public void touchFile(String name)", "class_method_signature": "DirectoryReferenceCounter.touchFile(String name)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(String name)", "modifiers": "@SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void sync(String name)", "full_signature": "@SuppressWarnings(\"deprecation\") public void sync(String name)", "class_method_signature": "DirectoryReferenceCounter.sync(String name)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(Collection<String> names)", "modifiers": "public", "return": "void", "signature": "void sync(Collection<String> names)", "full_signature": "public void sync(Collection<String> names)", "class_method_signature": "DirectoryReferenceCounter.sync(Collection<String> names)", "testcase": false, "constructor": false}, {"identifier": "clearLock", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void clearLock(String name)", "full_signature": "public void clearLock(String name)", "class_method_signature": "DirectoryReferenceCounter.clearLock(String name)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "DirectoryReferenceCounter.close()", "testcase": false, "constructor": false}, {"identifier": "setLockFactory", "parameters": "(LockFactory lockFactory)", "modifiers": "public", "return": "void", "signature": "void setLockFactory(LockFactory lockFactory)", "full_signature": "public void setLockFactory(LockFactory lockFactory)", "class_method_signature": "DirectoryReferenceCounter.setLockFactory(LockFactory lockFactory)", "testcase": false, "constructor": false}, {"identifier": "getLockID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLockID()", "full_signature": "public String getLockID()", "class_method_signature": "DirectoryReferenceCounter.getLockID()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Directory to, String src, String dest)", "modifiers": "public", "return": "void", "signature": "void copy(Directory to, String src, String dest)", "full_signature": "public void copy(Directory to, String src, String dest)", "class_method_signature": "DirectoryReferenceCounter.copy(Directory to, String src, String dest)", "testcase": false, "constructor": false}, {"identifier": "fileExists", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean fileExists(String name)", "full_signature": "public boolean fileExists(String name)", "class_method_signature": "DirectoryReferenceCounter.fileExists(String name)", "testcase": false, "constructor": false}, {"identifier": "fileModified", "parameters": "(String name)", "modifiers": "@SuppressWarnings(\"deprecation\") public", "return": "long", "signature": "long fileModified(String name)", "full_signature": "@SuppressWarnings(\"deprecation\") public long fileModified(String name)", "class_method_signature": "DirectoryReferenceCounter.fileModified(String name)", "testcase": false, "constructor": false}, {"identifier": "fileLength", "parameters": "(String name)", "modifiers": "public", "return": "long", "signature": "long fileLength(String name)", "full_signature": "public long fileLength(String name)", "class_method_signature": "DirectoryReferenceCounter.fileLength(String name)", "testcase": false, "constructor": false}, {"identifier": "getLockFactory", "parameters": "()", "modifiers": "public", "return": "LockFactory", "signature": "LockFactory getLockFactory()", "full_signature": "public LockFactory getLockFactory()", "class_method_signature": "DirectoryReferenceCounter.getLockFactory()", "testcase": false, "constructor": false}, {"identifier": "listAll", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] listAll()", "full_signature": "public String[] listAll()", "class_method_signature": "DirectoryReferenceCounter.listAll()", "testcase": false, "constructor": false}, {"identifier": "makeLock", "parameters": "(String name)", "modifiers": "public", "return": "Lock", "signature": "Lock makeLock(String name)", "full_signature": "public Lock makeLock(String name)", "class_method_signature": "DirectoryReferenceCounter.makeLock(String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "DirectoryReferenceCounter.toString()", "testcase": false, "constructor": false}], "file": "src/blur-core/src/main/java/com/nearinfinity/blur/manager/writer/DirectoryReferenceCounter.java"}, "focal_method": {"identifier": "wrap", "parameters": "(String name, IndexInput input)", "modifiers": "private", "return": "IndexInput", "body": "private IndexInput wrap(String name, IndexInput input) {\n    AtomicInteger counter = refs.get(name);\n    if (counter == null) {\n      counter = new AtomicInteger();\n      refs.put(name, counter);\n    }\n    return new RefIndexInput(input, counter);\n  }", "signature": "IndexInput wrap(String name, IndexInput input)", "full_signature": "private IndexInput wrap(String name, IndexInput input)", "class_method_signature": "DirectoryReferenceCounter.wrap(String name, IndexInput input)", "testcase": false, "constructor": false, "invocations": ["get", "put"]}, "repository": {"repo_id": 1443269, "url": "https://github.com/altamiracorp/blur", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 128, "size": 30862, "license": "licensed"}}