{"test_class": {"identifier": "BlurInputFormatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path indexPath = new Path(\"./tmp/test-indexes/oldapi\");", "modifier": "private", "type": "Path", "declarator": "indexPath = new Path(\"./tmp/test-indexes/oldapi\")", "var_name": "indexPath"}, {"original_string": "private int numberOfShards = 13;", "modifier": "private", "type": "int", "declarator": "numberOfShards = 13", "var_name": "numberOfShards"}, {"original_string": "private int rowsPerIndex = 10;", "modifier": "private", "type": "int", "declarator": "rowsPerIndex = 10", "var_name": "rowsPerIndex"}], "file": "src/blur-mapred/src/test/java/com/nearinfinity/blur/mapred/BlurInputFormatTest.java"}, "test_case": {"identifier": "testGetRecordReader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetRecordReader() throws IOException {\n    BlurInputFormat format = new BlurInputFormat();\n    JobConf job = new JobConf(new Configuration());\n    FileInputFormat.addInputPath(job, indexPath);\n    InputSplit[] splits = format.getSplits(job, -1);\n    for (int i = 0; i < splits.length; i++) {\n      RecordReader<Text, BlurRecord> reader = format.getRecordReader(splits[i], job, Reporter.NULL);\n      Text key = reader.createKey();\n      BlurRecord value = reader.createValue();\n      while (reader.next(key, value)) {\n        System.out.println(reader.getProgress() + \" \" + key + \" \" + value);\n      }\n    }\n  }", "signature": "void testGetRecordReader()", "full_signature": "@Test public void testGetRecordReader()", "class_method_signature": "BlurInputFormatTest.testGetRecordReader()", "testcase": true, "constructor": false, "invocations": ["addInputPath", "getSplits", "getRecordReader", "createKey", "createValue", "next", "println", "getProgress"]}, "focal_class": {"identifier": "BlurInputFormat", "superclass": "", "interfaces": "implements InputFormat<Text, BlurRecord>", "fields": [], "methods": [{"identifier": "getSplits", "parameters": "(JobConf job, int numSplits)", "modifiers": "@Override public", "return": "InputSplit[]", "signature": "InputSplit[] getSplits(JobConf job, int numSplits)", "full_signature": "@Override public InputSplit[] getSplits(JobConf job, int numSplits)", "class_method_signature": "BlurInputFormat.getSplits(JobConf job, int numSplits)", "testcase": false, "constructor": false}, {"identifier": "getRecordReader", "parameters": "(InputSplit split, JobConf job, Reporter reporter)", "modifiers": "@Override public", "return": "RecordReader<Text, BlurRecord>", "signature": "RecordReader<Text, BlurRecord> getRecordReader(InputSplit split, JobConf job, Reporter reporter)", "full_signature": "@Override public RecordReader<Text, BlurRecord> getRecordReader(InputSplit split, JobConf job, Reporter reporter)", "class_method_signature": "BlurInputFormat.getRecordReader(InputSplit split, JobConf job, Reporter reporter)", "testcase": false, "constructor": false}], "file": "src/blur-mapred/src/main/java/com/nearinfinity/blur/mapred/BlurInputFormat.java"}, "focal_method": {"identifier": "getRecordReader", "parameters": "(InputSplit split, JobConf job, Reporter reporter)", "modifiers": "@Override public", "return": "RecordReader<Text, BlurRecord>", "body": "@Override\n  public RecordReader<Text, BlurRecord> getRecordReader(InputSplit split, JobConf job, Reporter reporter) throws IOException {\n    reporter.setStatus(split.toString());\n    return new BlurRecordReader(split,job);\n  }", "signature": "RecordReader<Text, BlurRecord> getRecordReader(InputSplit split, JobConf job, Reporter reporter)", "full_signature": "@Override public RecordReader<Text, BlurRecord> getRecordReader(InputSplit split, JobConf job, Reporter reporter)", "class_method_signature": "BlurInputFormat.getRecordReader(InputSplit split, JobConf job, Reporter reporter)", "testcase": false, "constructor": false, "invocations": ["setStatus", "toString"]}, "repository": {"repo_id": 1443269, "url": "https://github.com/altamiracorp/blur", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 128, "size": 30862, "license": "licensed"}}