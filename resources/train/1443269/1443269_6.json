{"test_class": {"identifier": "ZookeeperClusterStatusTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TEST = \"test\"", "var_name": "TEST"}, {"original_string": "private static final String DEFAULT = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT = \"default\"", "var_name": "DEFAULT"}, {"original_string": "private static final Log LOG = LogFactory.getLog(ZookeeperClusterStatusTest.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ZookeeperClusterStatusTest.class)", "var_name": "LOG"}, {"original_string": "private ZooKeeper zooKeeper;", "modifier": "private", "type": "ZooKeeper", "declarator": "zooKeeper", "var_name": "zooKeeper"}, {"original_string": "private ZookeeperClusterStatus clusterStatus;", "modifier": "private", "type": "ZookeeperClusterStatus", "declarator": "clusterStatus", "var_name": "clusterStatus"}], "file": "src/blur-core/src/test/java/com/nearinfinity/blur/manager/clusterstatus/ZookeeperClusterStatusTest.java"}, "test_case": {"identifier": "testIsEnabledNoTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsEnabledNoTable() {\n    assertFalse(clusterStatus.isEnabled(false, DEFAULT, \"notable\"));\n    assertFalse(clusterStatus.isEnabled(true, DEFAULT, \"notable\"));\n  }", "signature": "void testIsEnabledNoTable()", "full_signature": "@Test public void testIsEnabledNoTable()", "class_method_signature": "ZookeeperClusterStatusTest.testIsEnabledNoTable()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isEnabled", "assertFalse", "isEnabled"]}, "focal_class": {"identifier": "ZookeeperClusterStatus", "superclass": "extends ClusterStatus", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ZookeeperClusterStatus.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ZookeeperClusterStatus.class)", "var_name": "LOG"}, {"original_string": "private ZooKeeper _zk;", "modifier": "private", "type": "ZooKeeper", "declarator": "_zk", "var_name": "_zk"}, {"original_string": "private AtomicBoolean _running = new AtomicBoolean();", "modifier": "private", "type": "AtomicBoolean", "declarator": "_running = new AtomicBoolean()", "var_name": "_running"}, {"original_string": "private ConcurrentMap<String, Long> _safeModeMap = new ConcurrentHashMap<String, Long>();", "modifier": "private", "type": "ConcurrentMap<String, Long>", "declarator": "_safeModeMap = new ConcurrentHashMap<String, Long>()", "var_name": "_safeModeMap"}, {"original_string": "private ConcurrentMap<String, List<String>> _onlineShardsNodes = new ConcurrentHashMap<String, List<String>>();", "modifier": "private", "type": "ConcurrentMap<String, List<String>>", "declarator": "_onlineShardsNodes = new ConcurrentHashMap<String, List<String>>()", "var_name": "_onlineShardsNodes"}, {"original_string": "private ConcurrentMap<String, Set<String>> _tablesPerCluster = new ConcurrentHashMap<String, Set<String>>();", "modifier": "private", "type": "ConcurrentMap<String, Set<String>>", "declarator": "_tablesPerCluster = new ConcurrentHashMap<String, Set<String>>()", "var_name": "_tablesPerCluster"}, {"original_string": "private AtomicReference<Set<String>> _clusters = new AtomicReference<Set<String>>(new HashSet<String>());", "modifier": "private", "type": "AtomicReference<Set<String>>", "declarator": "_clusters = new AtomicReference<Set<String>>(new HashSet<String>())", "var_name": "_clusters"}, {"original_string": "private ConcurrentMap<String, Boolean> _enabled = new ConcurrentHashMap<String, Boolean>();", "modifier": "private", "type": "ConcurrentMap<String, Boolean>", "declarator": "_enabled = new ConcurrentHashMap<String, Boolean>()", "var_name": "_enabled"}, {"original_string": "private ConcurrentMap<String, Boolean> _readOnly = new ConcurrentHashMap<String, Boolean>();", "modifier": "private", "type": "ConcurrentMap<String, Boolean>", "declarator": "_readOnly = new ConcurrentHashMap<String, Boolean>()", "var_name": "_readOnly"}, {"original_string": "private WatchChildren _clusterWatcher;", "modifier": "private", "type": "WatchChildren", "declarator": "_clusterWatcher", "var_name": "_clusterWatcher"}, {"original_string": "private ConcurrentMap<String, WatchChildren> _onlineShardsNodesWatchers = new ConcurrentHashMap<String, WatchChildren>();", "modifier": "private", "type": "ConcurrentMap<String, WatchChildren>", "declarator": "_onlineShardsNodesWatchers = new ConcurrentHashMap<String, WatchChildren>()", "var_name": "_onlineShardsNodesWatchers"}, {"original_string": "private ConcurrentMap<String, WatchChildren> _tableWatchers = new ConcurrentHashMap<String, WatchChildren>();", "modifier": "private", "type": "ConcurrentMap<String, WatchChildren>", "declarator": "_tableWatchers = new ConcurrentHashMap<String, WatchChildren>()", "var_name": "_tableWatchers"}, {"original_string": "private ConcurrentMap<String, WatchNodeExistance> _safeModeWatchers = new ConcurrentHashMap<String, WatchNodeExistance>();", "modifier": "private", "type": "ConcurrentMap<String, WatchNodeExistance>", "declarator": "_safeModeWatchers = new ConcurrentHashMap<String, WatchNodeExistance>()", "var_name": "_safeModeWatchers"}, {"original_string": "private ConcurrentMap<String, WatchNodeData> _safeModeDataWatchers = new ConcurrentHashMap<String, WatchNodeData>();", "modifier": "private", "type": "ConcurrentMap<String, WatchNodeData>", "declarator": "_safeModeDataWatchers = new ConcurrentHashMap<String, WatchNodeData>()", "var_name": "_safeModeDataWatchers"}, {"original_string": "private ConcurrentMap<String, WatchNodeExistance> _enabledWatchNodeExistance = new ConcurrentHashMap<String, WatchNodeExistance>();", "modifier": "private", "type": "ConcurrentMap<String, WatchNodeExistance>", "declarator": "_enabledWatchNodeExistance = new ConcurrentHashMap<String, WatchNodeExistance>()", "var_name": "_enabledWatchNodeExistance"}, {"original_string": "private ConcurrentMap<String, WatchNodeExistance> _readOnlyWatchNodeExistance = new ConcurrentHashMap<String, WatchNodeExistance>();", "modifier": "private", "type": "ConcurrentMap<String, WatchNodeExistance>", "declarator": "_readOnlyWatchNodeExistance = new ConcurrentHashMap<String, WatchNodeExistance>()", "var_name": "_readOnlyWatchNodeExistance"}, {"original_string": "private Map<String, TableDescriptor> _tableDescriptorCache = new ConcurrentHashMap<String, TableDescriptor>();", "modifier": "private", "type": "Map<String, TableDescriptor>", "declarator": "_tableDescriptorCache = new ConcurrentHashMap<String, TableDescriptor>()", "var_name": "_tableDescriptorCache"}], "methods": [{"identifier": "ZookeeperClusterStatus", "parameters": "(ZooKeeper zooKeeper)", "modifiers": "public", "return": "", "signature": " ZookeeperClusterStatus(ZooKeeper zooKeeper)", "full_signature": "public  ZookeeperClusterStatus(ZooKeeper zooKeeper)", "class_method_signature": "ZookeeperClusterStatus.ZookeeperClusterStatus(ZooKeeper zooKeeper)", "testcase": false, "constructor": true}, {"identifier": "watchForClusters", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void watchForClusters()", "full_signature": "private void watchForClusters()", "class_method_signature": "ZookeeperClusterStatus.watchForClusters()", "testcase": false, "constructor": false}, {"identifier": "ZookeeperClusterStatus", "parameters": "(String connectionStr)", "modifiers": "public", "return": "", "signature": " ZookeeperClusterStatus(String connectionStr)", "full_signature": "public  ZookeeperClusterStatus(String connectionStr)", "class_method_signature": "ZookeeperClusterStatus.ZookeeperClusterStatus(String connectionStr)", "testcase": false, "constructor": true}, {"identifier": "getClusterTableKey", "parameters": "(String cluster, String table)", "modifiers": "private", "return": "String", "signature": "String getClusterTableKey(String cluster, String table)", "full_signature": "private String getClusterTableKey(String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.getClusterTableKey(String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "getClusterList", "parameters": "(boolean useCache)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getClusterList(boolean useCache)", "full_signature": "@Override public List<String> getClusterList(boolean useCache)", "class_method_signature": "ZookeeperClusterStatus.getClusterList(boolean useCache)", "testcase": false, "constructor": false}, {"identifier": "checkIfOpen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkIfOpen()", "full_signature": "private void checkIfOpen()", "class_method_signature": "ZookeeperClusterStatus.checkIfOpen()", "testcase": false, "constructor": false}, {"identifier": "getControllerServerList", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getControllerServerList()", "full_signature": "@Override public List<String> getControllerServerList()", "class_method_signature": "ZookeeperClusterStatus.getControllerServerList()", "testcase": false, "constructor": false}, {"identifier": "getOnlineShardServers", "parameters": "(boolean useCache, String cluster)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getOnlineShardServers(boolean useCache, String cluster)", "full_signature": "@Override public List<String> getOnlineShardServers(boolean useCache, String cluster)", "class_method_signature": "ZookeeperClusterStatus.getOnlineShardServers(boolean useCache, String cluster)", "testcase": false, "constructor": false}, {"identifier": "watchForOnlineShardNodes", "parameters": "(final String cluster)", "modifiers": "private", "return": "void", "signature": "void watchForOnlineShardNodes(final String cluster)", "full_signature": "private void watchForOnlineShardNodes(final String cluster)", "class_method_signature": "ZookeeperClusterStatus.watchForOnlineShardNodes(final String cluster)", "testcase": false, "constructor": false}, {"identifier": "getShardServerList", "parameters": "(String cluster)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getShardServerList(String cluster)", "full_signature": "@Override public List<String> getShardServerList(String cluster)", "class_method_signature": "ZookeeperClusterStatus.getShardServerList(String cluster)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(boolean useCache, String cluster, String table)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(boolean useCache, String cluster, String table)", "full_signature": "@Override public boolean exists(boolean useCache, String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.exists(boolean useCache, String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "(boolean useCache, String cluster, String table)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled(boolean useCache, String cluster, String table)", "full_signature": "@Override public boolean isEnabled(boolean useCache, String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.isEnabled(boolean useCache, String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "getTableDescriptor", "parameters": "(boolean useCache, String cluster, String table)", "modifiers": "@Override public", "return": "TableDescriptor", "signature": "TableDescriptor getTableDescriptor(boolean useCache, String cluster, String table)", "full_signature": "@Override public TableDescriptor getTableDescriptor(boolean useCache, String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.getTableDescriptor(boolean useCache, String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "updateReadOnlyAndEnabled", "parameters": "(boolean useCache, TableDescriptor tableDescriptor, String cluster, String table)", "modifiers": "private", "return": "void", "signature": "void updateReadOnlyAndEnabled(boolean useCache, TableDescriptor tableDescriptor, String cluster, String table)", "full_signature": "private void updateReadOnlyAndEnabled(boolean useCache, TableDescriptor tableDescriptor, String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.updateReadOnlyAndEnabled(boolean useCache, TableDescriptor tableDescriptor, String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "fromBytes", "parameters": "(byte[] data, Class<T> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T fromBytes(byte[] data, Class<T> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") private T fromBytes(byte[] data, Class<T> clazz)", "class_method_signature": "ZookeeperClusterStatus.fromBytes(byte[] data, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(String path)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getData(String path)", "full_signature": "private byte[] getData(String path)", "class_method_signature": "ZookeeperClusterStatus.getData(String path)", "testcase": false, "constructor": false}, {"identifier": "getTableList", "parameters": "(boolean useCache, String cluster)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getTableList(boolean useCache, String cluster)", "full_signature": "@Override public List<String> getTableList(boolean useCache, String cluster)", "class_method_signature": "ZookeeperClusterStatus.getTableList(boolean useCache, String cluster)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ZookeeperClusterStatus.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(ConcurrentMap<String, ? extends Closeable> closableMap)", "modifiers": "private", "return": "void", "signature": "void close(ConcurrentMap<String, ? extends Closeable> closableMap)", "full_signature": "private void close(ConcurrentMap<String, ? extends Closeable> closableMap)", "class_method_signature": "ZookeeperClusterStatus.close(ConcurrentMap<String, ? extends Closeable> closableMap)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Closeable closeable)", "modifiers": "private", "return": "void", "signature": "void close(Closeable closeable)", "full_signature": "private void close(Closeable closeable)", "class_method_signature": "ZookeeperClusterStatus.close(Closeable closeable)", "testcase": false, "constructor": false}, {"identifier": "getCluster", "parameters": "(boolean useCache, String table)", "modifiers": "@Override public", "return": "String", "signature": "String getCluster(boolean useCache, String table)", "full_signature": "@Override public String getCluster(boolean useCache, String table)", "class_method_signature": "ZookeeperClusterStatus.getCluster(boolean useCache, String table)", "testcase": false, "constructor": false}, {"identifier": "isInSafeMode", "parameters": "(boolean useCache, String cluster)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInSafeMode(boolean useCache, String cluster)", "full_signature": "@Override public boolean isInSafeMode(boolean useCache, String cluster)", "class_method_signature": "ZookeeperClusterStatus.isInSafeMode(boolean useCache, String cluster)", "testcase": false, "constructor": false}, {"identifier": "getShardCount", "parameters": "(boolean useCache, String cluster, String table)", "modifiers": "@Override public", "return": "int", "signature": "int getShardCount(boolean useCache, String cluster, String table)", "full_signature": "@Override public int getShardCount(boolean useCache, String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.getShardCount(boolean useCache, String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "getBlockCacheFileTypes", "parameters": "(String cluster, String table)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getBlockCacheFileTypes(String cluster, String table)", "full_signature": "@Override public Set<String> getBlockCacheFileTypes(String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.getBlockCacheFileTypes(String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "isBlockCacheEnabled", "parameters": "(String cluster, String table)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBlockCacheEnabled(String cluster, String table)", "full_signature": "@Override public boolean isBlockCacheEnabled(String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.isBlockCacheEnabled(String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "(boolean useCache, String cluster, String table)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly(boolean useCache, String cluster, String table)", "full_signature": "@Override public boolean isReadOnly(boolean useCache, String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.isReadOnly(boolean useCache, String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(TableDescriptor tableDescriptor)", "modifiers": "@Override public", "return": "void", "signature": "void createTable(TableDescriptor tableDescriptor)", "full_signature": "@Override public void createTable(TableDescriptor tableDescriptor)", "class_method_signature": "ZookeeperClusterStatus.createTable(TableDescriptor tableDescriptor)", "testcase": false, "constructor": false}, {"identifier": "disableTable", "parameters": "(String cluster, String table)", "modifiers": "@Override public", "return": "void", "signature": "void disableTable(String cluster, String table)", "full_signature": "@Override public void disableTable(String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.disableTable(String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "enableTable", "parameters": "(String cluster, String table)", "modifiers": "@Override public", "return": "void", "signature": "void enableTable(String cluster, String table)", "full_signature": "@Override public void enableTable(String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.enableTable(String cluster, String table)", "testcase": false, "constructor": false}, {"identifier": "removeTable", "parameters": "(String cluster, String table, boolean deleteIndexFiles)", "modifiers": "@Override public", "return": "void", "signature": "void removeTable(String cluster, String table, boolean deleteIndexFiles)", "full_signature": "@Override public void removeTable(String cluster, String table, boolean deleteIndexFiles)", "class_method_signature": "ZookeeperClusterStatus.removeTable(String cluster, String table, boolean deleteIndexFiles)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(Set<String> blockCachingFileTypes)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] toBytes(Set<String> blockCachingFileTypes)", "full_signature": "private static byte[] toBytes(Set<String> blockCachingFileTypes)", "class_method_signature": "ZookeeperClusterStatus.toBytes(Set<String> blockCachingFileTypes)", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "@Override public boolean isOpen()", "class_method_signature": "ZookeeperClusterStatus.isOpen()", "testcase": false, "constructor": false}], "file": "src/blur-core/src/main/java/com/nearinfinity/blur/manager/clusterstatus/ZookeeperClusterStatus.java"}, "focal_method": {"identifier": "isEnabled", "parameters": "(boolean useCache, String cluster, String table)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean isEnabled(boolean useCache, String cluster, String table) {\n    if (useCache) {\n      Boolean e = _enabled.get(getClusterTableKey(cluster, table));\n      if (e != null) {\n        return e;\n      }\n    }\n    long s = System.nanoTime();\n    String tablePathIsEnabled = ZookeeperPathConstants.getTableEnabledPath(cluster, table);\n    try {\n      checkIfOpen();\n      if (_zk.exists(tablePathIsEnabled, false) == null) {\n        return false;\n      }\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      throw new RuntimeException(e);\n    } finally {\n      long e = System.nanoTime();\n      LOG.debug(\"trace isEnabled took [\" + (e - s) / 1000000.0 + \" ms]\");\n    }\n    return true;\n  }", "signature": "boolean isEnabled(boolean useCache, String cluster, String table)", "full_signature": "@Override public boolean isEnabled(boolean useCache, String cluster, String table)", "class_method_signature": "ZookeeperClusterStatus.isEnabled(boolean useCache, String cluster, String table)", "testcase": false, "constructor": false, "invocations": ["get", "getClusterTableKey", "nanoTime", "getTableEnabledPath", "checkIfOpen", "exists", "nanoTime", "debug"]}, "repository": {"repo_id": 1443269, "url": "https://github.com/altamiracorp/blur", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 128, "size": 30862, "license": "licensed"}}