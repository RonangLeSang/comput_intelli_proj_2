{"test_class": {"identifier": "JetS3TemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AwsCredentials credentials = new AwsCredentials(TestPropertiesAccessor.getDefaultTestAwsKey(),\n            TestPropertiesAccessor.getDefaultTestAwsSecretKey());", "modifier": "private", "type": "AwsCredentials", "declarator": "credentials = new AwsCredentials(TestPropertiesAccessor.getDefaultTestAwsKey(),\n            TestPropertiesAccessor.getDefaultTestAwsSecretKey())", "var_name": "credentials"}, {"original_string": "private static String BUCKET_NAME = \"bucket1\";", "modifier": "private static", "type": "String", "declarator": "BUCKET_NAME = \"bucket1\"", "var_name": "BUCKET_NAME"}, {"original_string": "private static String KEY = \"key1\";", "modifier": "private static", "type": "String", "declarator": "KEY = \"key1\"", "var_name": "KEY"}, {"original_string": "private static String TEST_FILE_NAME = \"test-s3.txt\";", "modifier": "private static", "type": "String", "declarator": "TEST_FILE_NAME = \"test-s3.txt\"", "var_name": "TEST_FILE_NAME"}, {"original_string": "private static final S3BucketNameMatcher S3_BUCKET_NAME_MATCHER = new S3BucketNameMatcher();", "modifier": "private static final", "type": "S3BucketNameMatcher", "declarator": "S3_BUCKET_NAME_MATCHER = new S3BucketNameMatcher()", "var_name": "S3_BUCKET_NAME_MATCHER"}, {"original_string": "private static final S3ObjectMatcher S3_OBJECT_MATCHER = new S3ObjectMatcher(KEY);", "modifier": "private static final", "type": "S3ObjectMatcher", "declarator": "S3_OBJECT_MATCHER = new S3ObjectMatcher(KEY)", "var_name": "S3_OBJECT_MATCHER"}, {"original_string": "private static File TEST_FILE;", "modifier": "private static", "type": "File", "declarator": "TEST_FILE", "var_name": "TEST_FILE"}, {"original_string": "private static InputStream TEST_INPUT_STREAM;", "modifier": "private static", "type": "InputStream", "declarator": "TEST_INPUT_STREAM", "var_name": "TEST_INPUT_STREAM"}, {"original_string": "private S3Service s3Service;", "modifier": "private", "type": "S3Service", "declarator": "s3Service", "var_name": "s3Service"}, {"original_string": "private StorageOperations template = null;", "modifier": "private", "type": "StorageOperations", "declarator": "template = null", "var_name": "template"}], "file": "cloud-storage-s3/src/test/java/org/opencredo/cloud/storage/s3/JetS3TemplateTest.java"}, "test_case": {"identifier": "testCreateBucketCauseS3CommunicationException", "parameters": "()", "modifiers": "@Test(expected = StorageCommunicationException.class) public", "return": "void", "body": "@Test(expected = StorageCommunicationException.class)\n    public void testCreateBucketCauseS3CommunicationException() throws S3ServiceException {\n\n        when(s3Service.createBucket(argThat(S3_BUCKET_NAME_MATCHER))).thenThrow(new S3ServiceException());\n        template.createContainer(BUCKET_NAME);\n    }", "signature": "void testCreateBucketCauseS3CommunicationException()", "full_signature": "@Test(expected = StorageCommunicationException.class) public void testCreateBucketCauseS3CommunicationException()", "class_method_signature": "JetS3TemplateTest.testCreateBucketCauseS3CommunicationException()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "createBucket", "argThat", "createContainer"]}, "focal_class": {"identifier": "JetS3Template", "superclass": "extends S3Template", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(S3Template.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(S3Template.class)", "var_name": "LOG"}, {"original_string": "private static final String BUCKET_NAME_CANNOT_BE_NULL = \"Bucket name cannot be null\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET_NAME_CANNOT_BE_NULL = \"Bucket name cannot be null\"", "var_name": "BUCKET_NAME_CANNOT_BE_NULL"}, {"original_string": "private static final String BUCKET_CREATION_PROBLEM = \"Bucket creation problem\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET_CREATION_PROBLEM = \"Bucket creation problem\"", "var_name": "BUCKET_CREATION_PROBLEM"}, {"original_string": "private static final String BUCKET_DELETION_PROBLEM = \"Bucket deletion problem\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET_DELETION_PROBLEM = \"Bucket deletion problem\"", "var_name": "BUCKET_DELETION_PROBLEM"}, {"original_string": "private static final String SERVICE_PROBLEM = \"Service problem\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_PROBLEM = \"Service problem\"", "var_name": "SERVICE_PROBLEM"}, {"original_string": "private static final String RECEIVING_FILE_PROBLEM = \"Receiving file problem\";", "modifier": "private static final", "type": "String", "declarator": "RECEIVING_FILE_PROBLEM = \"Receiving file problem\"", "var_name": "RECEIVING_FILE_PROBLEM"}, {"original_string": "private static final String SEND_STRING_TO_BUCKET_WITH_KEY = \"Send string to bucket '{}' with key '{}'\";", "modifier": "private static final", "type": "String", "declarator": "SEND_STRING_TO_BUCKET_WITH_KEY = \"Send string to bucket '{}' with key '{}'\"", "var_name": "SEND_STRING_TO_BUCKET_WITH_KEY"}, {"original_string": "private static final String SEND_INPUT_STREAM_TO_BUCKET_WITH_KEY = \"Send input-stream to bucket '{}' with key '{}'\";", "modifier": "private static final", "type": "String", "declarator": "SEND_INPUT_STREAM_TO_BUCKET_WITH_KEY = \"Send input-stream to bucket '{}' with key '{}'\"", "var_name": "SEND_INPUT_STREAM_TO_BUCKET_WITH_KEY"}, {"original_string": "private static final String BLOB_NAME_MUST_BE_SET = \"Blob name must be set\";", "modifier": "private static final", "type": "String", "declarator": "BLOB_NAME_MUST_BE_SET = \"Blob name must be set\"", "var_name": "BLOB_NAME_MUST_BE_SET"}, {"original_string": "private static final String SENDING_INPUT_STREAM_PROBLEM = \"Sending input stream problem\";", "modifier": "private static final", "type": "String", "declarator": "SENDING_INPUT_STREAM_PROBLEM = \"Sending input stream problem\"", "var_name": "SENDING_INPUT_STREAM_PROBLEM"}, {"original_string": "private static final String SENDING_INPUT_STREAM_IO_PROBLEM = \"Sending input stream IO problem\";", "modifier": "private static final", "type": "String", "declarator": "SENDING_INPUT_STREAM_IO_PROBLEM = \"Sending input stream IO problem\"", "var_name": "SENDING_INPUT_STREAM_IO_PROBLEM"}, {"original_string": "private final S3Service s3Service;", "modifier": "private final", "type": "S3Service", "declarator": "s3Service", "var_name": "s3Service"}], "methods": [{"identifier": "JetS3Template", "parameters": "(final AwsCredentials awsCredentials)", "modifiers": "public", "return": "", "signature": " JetS3Template(final AwsCredentials awsCredentials)", "full_signature": "public  JetS3Template(final AwsCredentials awsCredentials)", "class_method_signature": "JetS3Template.JetS3Template(final AwsCredentials awsCredentials)", "testcase": false, "constructor": true}, {"identifier": "JetS3Template", "parameters": "(final AwsCredentials awsCredentials, final String defaultContainerName)", "modifiers": "public", "return": "", "signature": " JetS3Template(final AwsCredentials awsCredentials, final String defaultContainerName)", "full_signature": "public  JetS3Template(final AwsCredentials awsCredentials, final String defaultContainerName)", "class_method_signature": "JetS3Template.JetS3Template(final AwsCredentials awsCredentials, final String defaultContainerName)", "testcase": false, "constructor": true}, {"identifier": "createContainer", "parameters": "(String containerName)", "modifiers": "public", "return": "boolean", "signature": "boolean createContainer(String containerName)", "full_signature": "public boolean createContainer(String containerName)", "class_method_signature": "JetS3Template.createContainer(String containerName)", "testcase": false, "constructor": false}, {"identifier": "createPublicContainer", "parameters": "(String containerName)", "modifiers": "public", "return": "void", "signature": "void createPublicContainer(String containerName)", "full_signature": "public void createPublicContainer(String containerName)", "class_method_signature": "JetS3Template.createPublicContainer(String containerName)", "testcase": false, "constructor": false}, {"identifier": "deleteContainer", "parameters": "(String containerName)", "modifiers": "public", "return": "void", "signature": "void deleteContainer(String containerName)", "full_signature": "public void deleteContainer(String containerName)", "class_method_signature": "JetS3Template.deleteContainer(String containerName)", "testcase": false, "constructor": false}, {"identifier": "deleteObject", "parameters": "(String objectName)", "modifiers": "public", "return": "void", "signature": "void deleteObject(String objectName)", "full_signature": "public void deleteObject(String objectName)", "class_method_signature": "JetS3Template.deleteObject(String objectName)", "testcase": false, "constructor": false}, {"identifier": "deleteObject", "parameters": "(String containerName, String objectName)", "modifiers": "public", "return": "void", "signature": "void deleteObject(String containerName, String objectName)", "full_signature": "public void deleteObject(String containerName, String objectName)", "class_method_signature": "JetS3Template.deleteObject(String containerName, String objectName)", "testcase": false, "constructor": false}, {"identifier": "listContainerNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> listContainerNames()", "full_signature": "public List<String> listContainerNames()", "class_method_signature": "JetS3Template.listContainerNames()", "testcase": false, "constructor": false}, {"identifier": "listContainerObjectDetails", "parameters": "()", "modifiers": "public", "return": "List<BlobDetails>", "signature": "List<BlobDetails> listContainerObjectDetails()", "full_signature": "public List<BlobDetails> listContainerObjectDetails()", "class_method_signature": "JetS3Template.listContainerObjectDetails()", "testcase": false, "constructor": false}, {"identifier": "checkContainerStatus", "parameters": "(String containerName)", "modifiers": "public", "return": "ContainerStatus", "signature": "ContainerStatus checkContainerStatus(String containerName)", "full_signature": "public ContainerStatus checkContainerStatus(String containerName)", "class_method_signature": "JetS3Template.checkContainerStatus(String containerName)", "testcase": false, "constructor": false}, {"identifier": "listContainerObjectDetails", "parameters": "(String containerName)", "modifiers": "public", "return": "List<BlobDetails>", "signature": "List<BlobDetails> listContainerObjectDetails(String containerName)", "full_signature": "public List<BlobDetails> listContainerObjectDetails(String containerName)", "class_method_signature": "JetS3Template.listContainerObjectDetails(String containerName)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String objectName, String stringToSend)", "modifiers": "public", "return": "String", "signature": "String send(String objectName, String stringToSend)", "full_signature": "public String send(String objectName, String stringToSend)", "class_method_signature": "JetS3Template.send(String objectName, String stringToSend)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String containerName, String objectName, String stringToSend)", "modifiers": "public", "return": "String", "signature": "String send(String containerName, String objectName, String stringToSend)", "full_signature": "public String send(String containerName, String objectName, String stringToSend)", "class_method_signature": "JetS3Template.send(String containerName, String objectName, String stringToSend)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(File fileToSend)", "modifiers": "public", "return": "String", "signature": "String send(File fileToSend)", "full_signature": "public String send(File fileToSend)", "class_method_signature": "JetS3Template.send(File fileToSend)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String containerName, File fileToSend)", "modifiers": "public", "return": "String", "signature": "String send(String containerName, File fileToSend)", "full_signature": "public String send(String containerName, File fileToSend)", "class_method_signature": "JetS3Template.send(String containerName, File fileToSend)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String containerName, String objectName, File fileToSend)", "modifiers": "public", "return": "String", "signature": "String send(String containerName, String objectName, File fileToSend)", "full_signature": "public String send(String containerName, String objectName, File fileToSend)", "class_method_signature": "JetS3Template.send(String containerName, String objectName, File fileToSend)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String objectName, InputStream is)", "modifiers": "public", "return": "String", "signature": "String send(String objectName, InputStream is)", "full_signature": "public String send(String objectName, InputStream is)", "class_method_signature": "JetS3Template.send(String objectName, InputStream is)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String containerName, String objectName, InputStream is)", "modifiers": "public", "return": "String", "signature": "String send(String containerName, String objectName, InputStream is)", "full_signature": "public String send(String containerName, String objectName, InputStream is)", "class_method_signature": "JetS3Template.send(String containerName, String objectName, InputStream is)", "testcase": false, "constructor": false}, {"identifier": "sendAndReceiveUrl", "parameters": "(String objectName, String stringToSend)", "modifiers": "public", "return": "String", "signature": "String sendAndReceiveUrl(String objectName, String stringToSend)", "full_signature": "public String sendAndReceiveUrl(String objectName, String stringToSend)", "class_method_signature": "JetS3Template.sendAndReceiveUrl(String objectName, String stringToSend)", "testcase": false, "constructor": false}, {"identifier": "sendAndReceiveUrl", "parameters": "(String containerName, String objectName, String stringToSend)", "modifiers": "public", "return": "String", "signature": "String sendAndReceiveUrl(String containerName, String objectName, String stringToSend)", "full_signature": "public String sendAndReceiveUrl(String containerName, String objectName, String stringToSend)", "class_method_signature": "JetS3Template.sendAndReceiveUrl(String containerName, String objectName, String stringToSend)", "testcase": false, "constructor": false}, {"identifier": "sendAndReceiveUrl", "parameters": "(String containerName, String objectName, File fileToSend)", "modifiers": "public", "return": "String", "signature": "String sendAndReceiveUrl(String containerName, String objectName, File fileToSend)", "full_signature": "public String sendAndReceiveUrl(String containerName, String objectName, File fileToSend)", "class_method_signature": "JetS3Template.sendAndReceiveUrl(String containerName, String objectName, File fileToSend)", "testcase": false, "constructor": false}, {"identifier": "sendAndReceiveUrl", "parameters": "(File fileToSend)", "modifiers": "public", "return": "String", "signature": "String sendAndReceiveUrl(File fileToSend)", "full_signature": "public String sendAndReceiveUrl(File fileToSend)", "class_method_signature": "JetS3Template.sendAndReceiveUrl(File fileToSend)", "testcase": false, "constructor": false}, {"identifier": "sendAndReceiveUrl", "parameters": "(String objectName, InputStream is)", "modifiers": "public", "return": "String", "signature": "String sendAndReceiveUrl(String objectName, InputStream is)", "full_signature": "public String sendAndReceiveUrl(String objectName, InputStream is)", "class_method_signature": "JetS3Template.sendAndReceiveUrl(String objectName, InputStream is)", "testcase": false, "constructor": false}, {"identifier": "sendAndReceiveUrl", "parameters": "(String containerName, File fileToSend)", "modifiers": "public", "return": "String", "signature": "String sendAndReceiveUrl(String containerName, File fileToSend)", "full_signature": "public String sendAndReceiveUrl(String containerName, File fileToSend)", "class_method_signature": "JetS3Template.sendAndReceiveUrl(String containerName, File fileToSend)", "testcase": false, "constructor": false}, {"identifier": "sendAndReceiveUrl", "parameters": "(String containerName, String objectName, InputStream is)", "modifiers": "public", "return": "String", "signature": "String sendAndReceiveUrl(String containerName, String objectName, InputStream is)", "full_signature": "public String sendAndReceiveUrl(String containerName, String objectName, InputStream is)", "class_method_signature": "JetS3Template.sendAndReceiveUrl(String containerName, String objectName, InputStream is)", "testcase": false, "constructor": false}, {"identifier": "receiveAsString", "parameters": "(String keyName)", "modifiers": "public", "return": "String", "signature": "String receiveAsString(String keyName)", "full_signature": "public String receiveAsString(String keyName)", "class_method_signature": "JetS3Template.receiveAsString(String keyName)", "testcase": false, "constructor": false}, {"identifier": "receiveAsString", "parameters": "(String containerName, String objectName)", "modifiers": "public", "return": "String", "signature": "String receiveAsString(String containerName, String objectName)", "full_signature": "public String receiveAsString(String containerName, String objectName)", "class_method_signature": "JetS3Template.receiveAsString(String containerName, String objectName)", "testcase": false, "constructor": false}, {"identifier": "receiveAndSaveToFile", "parameters": "(String objectName, File toFile)", "modifiers": "public", "return": "String", "signature": "String receiveAndSaveToFile(String objectName, File toFile)", "full_signature": "public String receiveAndSaveToFile(String objectName, File toFile)", "class_method_signature": "JetS3Template.receiveAndSaveToFile(String objectName, File toFile)", "testcase": false, "constructor": false}, {"identifier": "receiveAndSaveToFile", "parameters": "(String containerName, String objectName, File toFile)", "modifiers": "public", "return": "String", "signature": "String receiveAndSaveToFile(String containerName, String objectName, File toFile)", "full_signature": "public String receiveAndSaveToFile(String containerName, String objectName, File toFile)", "class_method_signature": "JetS3Template.receiveAndSaveToFile(String containerName, String objectName, File toFile)", "testcase": false, "constructor": false}, {"identifier": "receiveAsInputStream", "parameters": "(String objectName)", "modifiers": "public", "return": "InputStream", "signature": "InputStream receiveAsInputStream(String objectName)", "full_signature": "public InputStream receiveAsInputStream(String objectName)", "class_method_signature": "JetS3Template.receiveAsInputStream(String objectName)", "testcase": false, "constructor": false}, {"identifier": "receiveAsInputStream", "parameters": "(String containerName, String objectName)", "modifiers": "public", "return": "InputStream", "signature": "InputStream receiveAsInputStream(String containerName, String objectName)", "full_signature": "public InputStream receiveAsInputStream(String containerName, String objectName)", "class_method_signature": "JetS3Template.receiveAsInputStream(String containerName, String objectName)", "testcase": false, "constructor": false}, {"identifier": "createdSignedUrl", "parameters": "(String containerName, String objectName, Date expiryDate)", "modifiers": "public", "return": "String", "signature": "String createdSignedUrl(String containerName, String objectName, Date expiryDate)", "full_signature": "public String createdSignedUrl(String containerName, String objectName, Date expiryDate)", "class_method_signature": "JetS3Template.createdSignedUrl(String containerName, String objectName, Date expiryDate)", "testcase": false, "constructor": false}], "file": "cloud-storage-s3/src/main/java/org/opencredo/cloud/storage/s3/JetS3Template.java"}, "focal_method": {"identifier": "createContainer", "parameters": "(String containerName)", "modifiers": "public", "return": "boolean", "body": "public boolean createContainer(String containerName) {\n        Assert.notNull(containerName, BUCKET_NAME_CANNOT_BE_NULL);\n        try {\n            final S3Bucket bucket = s3Service.createBucket(new S3Bucket(containerName));\n            return bucket != null;\n        } catch (S3ServiceException e) {\n            throw new StorageCommunicationException(\"Bucket creation problem\", e);\n        }\n\n    }", "signature": "boolean createContainer(String containerName)", "full_signature": "public boolean createContainer(String containerName)", "class_method_signature": "JetS3Template.createContainer(String containerName)", "testcase": false, "constructor": false, "invocations": ["notNull", "createBucket"]}, "repository": {"repo_id": 249855, "url": "https://github.com/opencredo/opencredo-cloud-storage", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 3292, "license": "licensed"}}