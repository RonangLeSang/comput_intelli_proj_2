{"test_class": {"identifier": "BasicList1Test", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/nullschool/collect/basic/BasicList1Test.java"}, "test_case": {"identifier": "test_delete_out_of_bounds", "parameters": "()", "modifiers": "@Test(expected = IndexOutOfBoundsException.class) public", "return": "void", "body": "@Test(expected = IndexOutOfBoundsException.class)\n    public void test_delete_out_of_bounds() {\n        new BasicList1<>(1).delete(1);\n    }", "signature": "void test_delete_out_of_bounds()", "full_signature": "@Test(expected = IndexOutOfBoundsException.class) public void test_delete_out_of_bounds()", "class_method_signature": "BasicList1Test.test_delete_out_of_bounds()", "testcase": true, "constructor": false, "invocations": ["delete"]}, "focal_class": {"identifier": "BasicList1", "superclass": "extends BasicConstList<E>", "interfaces": "", "fields": [{"original_string": "private final E e0;", "modifier": "private final", "type": "E", "declarator": "e0", "var_name": "e0"}], "methods": [{"identifier": "BasicList1", "parameters": "(Object e0)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " BasicList1(Object e0)", "full_signature": "@SuppressWarnings(\"unchecked\")  BasicList1(Object e0)", "class_method_signature": "BasicList1.BasicList1(Object e0)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BasicList1.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "BasicList1.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "BasicList1.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(Object o)", "full_signature": "@Override public int indexOf(Object o)", "class_method_signature": "BasicList1.indexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int lastIndexOf(Object o)", "full_signature": "@Override public int lastIndexOf(Object o)", "class_method_signature": "BasicList1.lastIndexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "E", "signature": "E get(int index)", "full_signature": "@Override public E get(int index)", "class_method_signature": "BasicList1.get(int index)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override public Object[] toArray()", "class_method_signature": "BasicList1.toArray()", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "(E e)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> with(E e)", "full_signature": "@Override public ConstList<E> with(E e)", "class_method_signature": "BasicList1.with(E e)", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "(int index, E e)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> with(int index, E e)", "full_signature": "@Override public ConstList<E> with(int index, E e)", "class_method_signature": "BasicList1.with(int index, E e)", "testcase": false, "constructor": false}, {"identifier": "withAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> withAll(Collection<? extends E> c)", "full_signature": "@Override public ConstList<E> withAll(Collection<? extends E> c)", "class_method_signature": "BasicList1.withAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "withAll", "parameters": "(int index, Collection<? extends E> c)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> withAll(int index, Collection<? extends E> c)", "full_signature": "@Override public ConstList<E> withAll(int index, Collection<? extends E> c)", "class_method_signature": "BasicList1.withAll(int index, Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(int index, E e)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> replace(int index, E e)", "full_signature": "@Override public ConstList<E> replace(int index, E e)", "class_method_signature": "BasicList1.replace(int index, E e)", "testcase": false, "constructor": false}, {"identifier": "without", "parameters": "(Object o)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> without(Object o)", "full_signature": "@Override public ConstList<E> without(Object o)", "class_method_signature": "BasicList1.without(Object o)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(int index)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> delete(int index)", "full_signature": "@Override public ConstList<E> delete(int index)", "class_method_signature": "BasicList1.delete(int index)", "testcase": false, "constructor": false}, {"identifier": "withoutAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> withoutAll(Collection<?> c)", "full_signature": "@Override public ConstList<E> withoutAll(Collection<?> c)", "class_method_signature": "BasicList1.withoutAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "subList", "parameters": "(int fromIndex, int toIndex)", "modifiers": "@Override public", "return": "ConstList<E>", "signature": "ConstList<E> subList(int fromIndex, int toIndex)", "full_signature": "@Override public ConstList<E> subList(int fromIndex, int toIndex)", "class_method_signature": "BasicList1.subList(int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(List<?> that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(List<?> that)", "full_signature": "private boolean equals(List<?> that)", "class_method_signature": "BasicList1.equals(List<?> that)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object that)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object that)", "full_signature": "@Override public boolean equals(Object that)", "class_method_signature": "BasicList1.equals(Object that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasicList1.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/nullschool/collect/basic/BasicList1.java"}, "focal_method": {"identifier": "delete", "parameters": "(int index)", "modifiers": "@Override public", "return": "ConstList<E>", "body": "@Override public ConstList<E> delete(int index) {\n        if (index == 0) {\n            return emptyList();\n        }\n        throw new IndexOutOfBoundsException();\n    }", "signature": "ConstList<E> delete(int index)", "full_signature": "@Override public ConstList<E> delete(int index)", "class_method_signature": "BasicList1.delete(int index)", "testcase": false, "constructor": false, "invocations": ["emptyList"]}, "repository": {"repo_id": 9665465, "url": "https://github.com/cambecc/grains", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 1245, "license": "licensed"}}