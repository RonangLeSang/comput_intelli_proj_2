{"test_class": {"identifier": "BasicSortedSetNTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/nullschool/collect/basic/BasicSortedSetNTest.java"}, "test_case": {"identifier": "test_withAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_withAll() {\n        ConstSortedSet<Integer> set;\n\n        set = new BasicSortedSetN<>(null, new Object[] {1, 2, 3, 4, 5, 7});\n        compare_sorted_sets(\n            newSortedSet(null, 0, 1, 2, 3, 4, 5, 6, 7, 8),\n            set.withAll(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0)));\n        assertSame(set, set.withAll(Arrays.asList(1, 1, 1, 2, 2, 3, 3)));\n        assertSame(set, set.withAll(Collections.<Integer>emptyList()));\n\n        set = new BasicSortedSetN<>(reverseOrder(), new Object[] {7, 5, 4, 3, 2, 1});\n        compare_sorted_sets(\n            newSortedSet(reverseOrder(), 8, 7, 6, 5, 4, 3, 2, 1, 0),\n            set.withAll(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0)));\n        assertSame(set, set.withAll(Arrays.asList(1, 1, 1, 2, 2, 3, 3)));\n        assertSame(set, set.withAll(Collections.<Integer>emptyList()));\n    }", "signature": "void test_withAll()", "full_signature": "@Test public void test_withAll()", "class_method_signature": "BasicSortedSetNTest.test_withAll()", "testcase": true, "constructor": false, "invocations": ["compare_sorted_sets", "newSortedSet", "withAll", "asList", "assertSame", "withAll", "asList", "assertSame", "withAll", "emptyList", "reverseOrder", "compare_sorted_sets", "newSortedSet", "reverseOrder", "withAll", "asList", "assertSame", "withAll", "asList", "assertSame", "withAll", "emptyList"]}, "focal_class": {"identifier": "BasicSortedSetN", "superclass": "extends BasicConstSortedSet<E>", "interfaces": "", "fields": [{"original_string": "private final E[] elements;", "modifier": "private final", "type": "E[]", "declarator": "elements", "var_name": "elements"}], "methods": [{"identifier": "BasicSortedSetN", "parameters": "(Comparator<? super E> comparator, Object[] elements)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " BasicSortedSetN(Comparator<? super E> comparator, Object[] elements)", "full_signature": "@SuppressWarnings(\"unchecked\")  BasicSortedSetN(Comparator<? super E> comparator, Object[] elements)", "class_method_signature": "BasicSortedSetN.BasicSortedSetN(Comparator<? super E> comparator, Object[] elements)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BasicSortedSetN.size()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object o)", "modifiers": "private", "return": "int", "signature": "int indexOf(Object o)", "full_signature": "private int indexOf(Object o)", "class_method_signature": "BasicSortedSetN.indexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "BasicSortedSetN.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override", "return": "E", "signature": "E get(int index)", "full_signature": "@Override E get(int index)", "class_method_signature": "BasicSortedSetN.get(int index)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E first()", "full_signature": "@Override public E first()", "class_method_signature": "BasicSortedSetN.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E last()", "full_signature": "@Override public E last()", "class_method_signature": "BasicSortedSetN.last()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override public Object[] toArray()", "class_method_signature": "BasicSortedSetN.toArray()", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "(E e)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> with(E e)", "full_signature": "@Override public ConstSortedSet<E> with(E e)", "class_method_signature": "BasicSortedSetN.with(E e)", "testcase": false, "constructor": false}, {"identifier": "withAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> withAll(Collection<? extends E> c)", "full_signature": "@Override public ConstSortedSet<E> withAll(Collection<? extends E> c)", "class_method_signature": "BasicSortedSetN.withAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "without", "parameters": "(Object o)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> without(Object o)", "full_signature": "@Override public ConstSortedSet<E> without(Object o)", "class_method_signature": "BasicSortedSetN.without(Object o)", "testcase": false, "constructor": false}, {"identifier": "withoutAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> withoutAll(Collection<?> c)", "full_signature": "@Override public ConstSortedSet<E> withoutAll(Collection<?> c)", "class_method_signature": "BasicSortedSetN.withoutAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "subSet", "parameters": "(int fromIndex, int toIndex)", "modifiers": "private", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> subSet(int fromIndex, int toIndex)", "full_signature": "private ConstSortedSet<E> subSet(int fromIndex, int toIndex)", "class_method_signature": "BasicSortedSetN.subSet(int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "headSet", "parameters": "(E toElement)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> headSet(E toElement)", "full_signature": "@Override public ConstSortedSet<E> headSet(E toElement)", "class_method_signature": "BasicSortedSetN.headSet(E toElement)", "testcase": false, "constructor": false}, {"identifier": "tailSet", "parameters": "(E fromElement)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> tailSet(E fromElement)", "full_signature": "@Override public ConstSortedSet<E> tailSet(E fromElement)", "class_method_signature": "BasicSortedSetN.tailSet(E fromElement)", "testcase": false, "constructor": false}, {"identifier": "subSet", "parameters": "(E fromElement, E toElement)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "signature": "ConstSortedSet<E> subSet(E fromElement, E toElement)", "full_signature": "@Override public ConstSortedSet<E> subSet(E fromElement, E toElement)", "class_method_signature": "BasicSortedSetN.subSet(E fromElement, E toElement)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasicSortedSetN.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/nullschool/collect/basic/BasicSortedSetN.java"}, "focal_method": {"identifier": "withAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@Override public", "return": "ConstSortedSet<E>", "body": "@Override public ConstSortedSet<E> withAll(Collection<? extends E> c) {\n        if (c.isEmpty()) {\n            return this;\n        }\n        Object[] expanded = unionInto(elements, c.toArray(), comparator);\n        return expanded.length == size() ? this : new BasicSortedSetN<>(comparator, expanded);\n    }", "signature": "ConstSortedSet<E> withAll(Collection<? extends E> c)", "full_signature": "@Override public ConstSortedSet<E> withAll(Collection<? extends E> c)", "class_method_signature": "BasicSortedSetN.withAll(Collection<? extends E> c)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "unionInto", "toArray", "size"]}, "repository": {"repo_id": 9665465, "url": "https://github.com/cambecc/grains", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 1245, "license": "licensed"}}