{"test_class": {"identifier": "BasicConstSortedMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/nullschool/collect/basic/BasicConstSortedMapTest.java"}, "test_case": {"identifier": "test_construction_permutations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_construction_permutations() {\n        for (int a = 0; a < 6; a++) {\n            compare(newSortedMap(null, a, a+1), sortedMapOf(null, a, a+1));\n            for (int b = 0; b < 6; b++) {\n                compare(newSortedMap(null, a, a, b, b), sortedMapOf(null, a, a, b, b));\n                for (int c = 0; c < 6; c++) {\n                    compare(newSortedMap(null, a, a, b, b, c, c), sortedMapOf(null, a, a, b, b, c, c));\n                    for (int d = 0; d < 6; d++) {\n                        compare(\n                            newSortedMap(null, a, a, b, b, c, c, d, d),\n                            sortedMapOf(null, a, a, b, b, c, c, d, d));\n                        for (int e = 0; e < 6; e++) {\n                            compare(\n                                newSortedMap(null, a, a, b, b, c, c, d, d, e, e),\n                                sortedMapOf(null, a, a, b, b, c, c, d, d, e, e));\n                            for (int f = 0; f < 6; f++) {\n                                Integer[] ary = new Integer[] {a, b, c, d, e, f};\n                                SortedMap<Integer, Integer> expected =\n                                    newSortedMap(null, a, a, b, b, c, c, d, d, e, e, f, f);\n                                Map<Integer, Integer> plainMap =\n                                    newMap(a, a, b, b, c, c, d, d, e, e, f, f);\n\n                                // asMap(comparator, array, array)\n                                compare(expected, asSortedMap(null, ary, ary));\n                                // asMap(sortedMap)\n                                compare(expected, asSortedMap(expected));\n                                // asMap(comparator, map)\n                                compare(expected, asSortedMap(null, plainMap));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }", "signature": "void test_construction_permutations()", "full_signature": "@Test public void test_construction_permutations()", "class_method_signature": "BasicConstSortedMapTest.test_construction_permutations()", "testcase": true, "constructor": false, "invocations": ["compare", "newSortedMap", "sortedMapOf", "compare", "newSortedMap", "sortedMapOf", "compare", "newSortedMap", "sortedMapOf", "compare", "newSortedMap", "sortedMapOf", "compare", "newSortedMap", "sortedMapOf", "newSortedMap", "newMap", "compare", "asSortedMap", "compare", "asSortedMap", "compare", "asSortedMap"]}, "focal_class": {"identifier": "BasicConstSortedMap", "superclass": "extends BasicConstMap<K, V>", "interfaces": "implements ConstSortedMap<K, V>", "fields": [{"original_string": "final Comparator<? super K> comparator;", "modifier": "final", "type": "Comparator<? super K>", "declarator": "comparator", "var_name": "comparator"}, {"original_string": "private static final long serialVersionUID = 1;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1", "var_name": "serialVersionUID"}], "methods": [{"identifier": "BasicConstSortedMap", "parameters": "(Comparator<? super K> comparator)", "modifiers": "", "return": "", "signature": " BasicConstSortedMap(Comparator<? super K> comparator)", "full_signature": "  BasicConstSortedMap(Comparator<? super K> comparator)", "class_method_signature": "BasicConstSortedMap.BasicConstSortedMap(Comparator<? super K> comparator)", "testcase": false, "constructor": true}, {"identifier": "comparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<? super K>", "signature": "Comparator<? super K> comparator()", "full_signature": "@Override public Comparator<? super K> comparator()", "class_method_signature": "BasicConstSortedMap.comparator()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(K left, K right)", "modifiers": "", "return": "int", "signature": "int compare(K left, K right)", "full_signature": " int compare(K left, K right)", "class_method_signature": "BasicConstSortedMap.compare(K left, K right)", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public abstract", "return": "ConstSortedSet<K>", "signature": "ConstSortedSet<K> keySet()", "full_signature": "@Override public abstract ConstSortedSet<K> keySet()", "class_method_signature": "BasicConstSortedMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public abstract", "return": "ConstCollection<V>", "signature": "ConstCollection<V> values()", "full_signature": "@Override public abstract ConstCollection<V> values()", "class_method_signature": "BasicConstSortedMap.values()", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@Override public abstract", "return": "ConstSet<Map.Entry<K, V>>", "signature": "ConstSet<Map.Entry<K, V>> entrySet()", "full_signature": "@Override public abstract ConstSet<Map.Entry<K, V>> entrySet()", "class_method_signature": "BasicConstSortedMap.entrySet()", "testcase": false, "constructor": false}, {"identifier": "writeReplace", "parameters": "()", "modifiers": "", "return": "Object", "signature": "Object writeReplace()", "full_signature": " Object writeReplace()", "class_method_signature": "BasicConstSortedMap.writeReplace()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "private void readObject(ObjectInputStream in)", "class_method_signature": "BasicConstSortedMap.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/nullschool/collect/basic/BasicConstSortedMap.java"}, "focal_method": {"identifier": "compare", "parameters": "(K left, K right)", "modifiers": "", "return": "int", "body": "int compare(K left, K right) {\n        return ObjectTools.compare(left, right, comparator);\n    }", "signature": "int compare(K left, K right)", "full_signature": " int compare(K left, K right)", "class_method_signature": "BasicConstSortedMap.compare(K left, K right)", "testcase": false, "constructor": false, "invocations": ["compare"]}, "repository": {"repo_id": 9665465, "url": "https://github.com/cambecc/grains", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 1245, "license": "licensed"}}