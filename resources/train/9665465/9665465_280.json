{"test_class": {"identifier": "AbstractIterableMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/nullschool/collect/AbstractIterableMapTest.java"}, "test_case": {"identifier": "test_keySet_removeAll_throws", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void test_keySet_removeAll_throws() {\n        new MockIterableMap<>(singletonMap(\"a\", 1)).keySet().removeAll(null);\n    }", "signature": "void test_keySet_removeAll_throws()", "full_signature": "@Test(expected = NullPointerException.class) public void test_keySet_removeAll_throws()", "class_method_signature": "AbstractIterableMapTest.test_keySet_removeAll_throws()", "testcase": true, "constructor": false, "invocations": ["removeAll", "keySet", "singletonMap"]}, "focal_class": {"identifier": "AbstractIterableMap", "superclass": "", "interfaces": "implements IterableMap<K, V>", "fields": [], "methods": [{"identifier": "size", "parameters": "()", "modifiers": "@Override public abstract", "return": "int", "signature": "int size()", "full_signature": "@Override public abstract int size()", "class_method_signature": "AbstractIterableMap.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "AbstractIterableMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public abstract", "return": "MapIterator<K, V>", "signature": "MapIterator<K, V> iterator()", "full_signature": "@Override public abstract MapIterator<K, V> iterator()", "class_method_signature": "AbstractIterableMap.iterator()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(Object key)", "full_signature": "@Override public boolean containsKey(Object key)", "class_method_signature": "AbstractIterableMap.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsValue(Object value)", "full_signature": "@Override public boolean containsValue(Object value)", "class_method_signature": "AbstractIterableMap.containsValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "containsEntry", "parameters": "(Object key, Object value)", "modifiers": "protected", "return": "boolean", "signature": "boolean containsEntry(Object key, Object value)", "full_signature": "protected boolean containsEntry(Object key, Object value)", "class_method_signature": "AbstractIterableMap.containsEntry(Object key, Object value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V get(Object key)", "full_signature": "@Override public V get(Object key)", "class_method_signature": "AbstractIterableMap.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "V", "signature": "V put(K key, V value)", "full_signature": "@Override public V put(K key, V value)", "class_method_signature": "AbstractIterableMap.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<? extends K, ? extends V> map)", "modifiers": "@Override public", "return": "void", "signature": "void putAll(Map<? extends K, ? extends V> map)", "full_signature": "@Override public void putAll(Map<? extends K, ? extends V> map)", "class_method_signature": "AbstractIterableMap.putAll(Map<? extends K, ? extends V> map)", "testcase": false, "constructor": false}, {"identifier": "removeKey", "parameters": "(Object key)", "modifiers": "protected", "return": "boolean", "signature": "boolean removeKey(Object key)", "full_signature": "protected boolean removeKey(Object key)", "class_method_signature": "AbstractIterableMap.removeKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "removeValue", "parameters": "(Object value)", "modifiers": "protected", "return": "boolean", "signature": "boolean removeValue(Object value)", "full_signature": "protected boolean removeValue(Object value)", "class_method_signature": "AbstractIterableMap.removeValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(Object key, Object value)", "modifiers": "protected", "return": "boolean", "signature": "boolean removeEntry(Object key, Object value)", "full_signature": "protected boolean removeEntry(Object key, Object value)", "class_method_signature": "AbstractIterableMap.removeEntry(Object key, Object value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V remove(Object key)", "full_signature": "@Override public V remove(Object key)", "class_method_signature": "AbstractIterableMap.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "AbstractIterableMap.clear()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Map<?, ?> that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(Map<?, ?> that)", "full_signature": "private boolean equals(Map<?, ?> that)", "class_method_signature": "AbstractIterableMap.equals(Map<?, ?> that)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object that)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object that)", "full_signature": "@Override public boolean equals(Object that)", "class_method_signature": "AbstractIterableMap.equals(Object that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractIterableMap.hashCode()", "testcase": false, "constructor": false}, {"identifier": "printEntriesTo", "parameters": "(StringBuilder sb)", "modifiers": "protected", "return": "void", "signature": "void printEntriesTo(StringBuilder sb)", "full_signature": "protected void printEntriesTo(StringBuilder sb)", "class_method_signature": "AbstractIterableMap.printEntriesTo(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractIterableMap.toString()", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<K>", "signature": "Set<K> keySet()", "full_signature": "@Override public Set<K> keySet()", "class_method_signature": "AbstractIterableMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> values()", "full_signature": "@Override public Collection<V> values()", "class_method_signature": "AbstractIterableMap.values()", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<Entry<K, V>>", "signature": "Set<Entry<K, V>> entrySet()", "full_signature": "@Override public Set<Entry<K, V>> entrySet()", "class_method_signature": "AbstractIterableMap.entrySet()", "testcase": false, "constructor": false}, {"identifier": "iteratorFor", "parameters": "(Map<K, V> map)", "modifiers": "private static", "return": "MapIterator<K, V>", "signature": "MapIterator<K, V> iteratorFor(Map<K, V> map)", "full_signature": "private static MapIterator<K, V> iteratorFor(Map<K, V> map)", "class_method_signature": "AbstractIterableMap.iteratorFor(Map<K, V> map)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/nullschool/collect/AbstractIterableMap.java"}, "focal_method": {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<K>", "body": "@Override public Set<K> keySet() {\n        return new KeysView();\n    }", "signature": "Set<K> keySet()", "full_signature": "@Override public Set<K> keySet()", "class_method_signature": "AbstractIterableMap.keySet()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9665465, "url": "https://github.com/cambecc/grains", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 1245, "license": "licensed"}}