{"test_class": {"identifier": "BasicSetNTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/nullschool/collect/basic/BasicSetNTest.java"}, "test_case": {"identifier": "test_withoutAll_throws", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void test_withoutAll_throws() {\n        new BasicSetN<>(new Object[] {1, 2, 3, 4, 5, 6}).withoutAll(null);\n    }", "signature": "void test_withoutAll_throws()", "full_signature": "@Test(expected = NullPointerException.class) public void test_withoutAll_throws()", "class_method_signature": "BasicSetNTest.test_withoutAll_throws()", "testcase": true, "constructor": false, "invocations": ["withoutAll"]}, "focal_class": {"identifier": "BasicSetN", "superclass": "extends BasicConstSet<E>", "interfaces": "", "fields": [{"original_string": "private final E[] elements;", "modifier": "private final", "type": "E[]", "declarator": "elements", "var_name": "elements"}], "methods": [{"identifier": "BasicSetN", "parameters": "(Object[] elements)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " BasicSetN(Object[] elements)", "full_signature": "@SuppressWarnings(\"unchecked\")  BasicSetN(Object[] elements)", "class_method_signature": "BasicSetN.BasicSetN(Object[] elements)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BasicSetN.size()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "BasicSetN.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override", "return": "E", "signature": "E get(int index)", "full_signature": "@Override E get(int index)", "class_method_signature": "BasicSetN.get(int index)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override public Object[] toArray()", "class_method_signature": "BasicSetN.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] a)", "modifiers": "@Override public", "return": "T[]", "signature": "T[] toArray(T[] a)", "full_signature": "@Override public T[] toArray(T[] a)", "class_method_signature": "BasicSetN.toArray(T[] a)", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "(E e)", "modifiers": "@Override public", "return": "ConstSet<E>", "signature": "ConstSet<E> with(E e)", "full_signature": "@Override public ConstSet<E> with(E e)", "class_method_signature": "BasicSetN.with(E e)", "testcase": false, "constructor": false}, {"identifier": "withAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@Override public", "return": "ConstSet<E>", "signature": "ConstSet<E> withAll(Collection<? extends E> c)", "full_signature": "@Override public ConstSet<E> withAll(Collection<? extends E> c)", "class_method_signature": "BasicSetN.withAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "without", "parameters": "(Object o)", "modifiers": "@Override public", "return": "ConstSet<E>", "signature": "ConstSet<E> without(Object o)", "full_signature": "@Override public ConstSet<E> without(Object o)", "class_method_signature": "BasicSetN.without(Object o)", "testcase": false, "constructor": false}, {"identifier": "withoutAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "ConstSet<E>", "signature": "ConstSet<E> withoutAll(Collection<?> c)", "full_signature": "@Override public ConstSet<E> withoutAll(Collection<?> c)", "class_method_signature": "BasicSetN.withoutAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasicSetN.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/nullschool/collect/basic/BasicSetN.java"}, "focal_method": {"identifier": "withoutAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "ConstSet<E>", "body": "@Override public ConstSet<E> withoutAll(Collection<?> c) {\n        if (c.isEmpty()) {\n            return this;\n        }\n        Object[] shrunk = deleteAll(elements, c);\n        return shrunk.length == size() ? this : BasicCollections.<E>condenseToSet(shrunk);\n    }", "signature": "ConstSet<E> withoutAll(Collection<?> c)", "full_signature": "@Override public ConstSet<E> withoutAll(Collection<?> c)", "class_method_signature": "BasicSetN.withoutAll(Collection<?> c)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "deleteAll", "size", "condenseToSet"]}, "repository": {"repo_id": 9665465, "url": "https://github.com/cambecc/grains", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 1245, "license": "licensed"}}