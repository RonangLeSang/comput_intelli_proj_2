{"test_class": {"identifier": "SenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String regId = \"15;16\";", "modifier": "private final", "type": "String", "declarator": "regId = \"15;16\"", "var_name": "regId"}, {"original_string": "private final String collapseKey = \"collapseKey\";", "modifier": "private final", "type": "String", "declarator": "collapseKey = \"collapseKey\"", "var_name": "collapseKey"}, {"original_string": "private final boolean delayWhileIdle = true;", "modifier": "private final", "type": "boolean", "declarator": "delayWhileIdle = true", "var_name": "delayWhileIdle"}, {"original_string": "private final boolean dryRun = true;", "modifier": "private final", "type": "boolean", "declarator": "dryRun = true", "var_name": "dryRun"}, {"original_string": "private final String restrictedPackageName = \"package.name\";", "modifier": "private final", "type": "String", "declarator": "restrictedPackageName = \"package.name\"", "var_name": "restrictedPackageName"}, {"original_string": "private final int retries = 42;", "modifier": "private final", "type": "int", "declarator": "retries = 42", "var_name": "retries"}, {"original_string": "private final int ttl = 108;", "modifier": "private final", "type": "int", "declarator": "ttl = 108", "var_name": "ttl"}, {"original_string": "private final String authKey = \"4815162342\";", "modifier": "private final", "type": "String", "declarator": "authKey = \"4815162342\"", "var_name": "authKey"}, {"original_string": "private final JSONParser jsonParser = new JSONParser();", "modifier": "private final", "type": "JSONParser", "declarator": "jsonParser = new JSONParser()", "var_name": "jsonParser"}, {"original_string": "private final Message message =\n      new Message.Builder()\n          .collapseKey(collapseKey)\n          .delayWhileIdle(delayWhileIdle)\n          .dryRun(dryRun)\n          .restrictedPackageName(restrictedPackageName)\n          .timeToLive(ttl)\n          .addData(\"k0\", null)\n          .addData(null, \"v0\")\n          .addData(\"k1\", \"v1\")\n          .addData(\"k2\", \"v2\")\n          .addData(\"k3\", \"v3\")\n          .build();", "modifier": "private final", "type": "Message", "declarator": "message =\n      new Message.Builder()\n          .collapseKey(collapseKey)\n          .delayWhileIdle(delayWhileIdle)\n          .dryRun(dryRun)\n          .restrictedPackageName(restrictedPackageName)\n          .timeToLive(ttl)\n          .addData(\"k0\", null)\n          .addData(null, \"v0\")\n          .addData(\"k1\", \"v1\")\n          .addData(\"k2\", \"v2\")\n          .addData(\"k3\", \"v3\")\n          .build()", "var_name": "message"}, {"original_string": "private final InputStream exceptionalStream = new InputStream() {\n\n    @Override\n    public int read() throws IOException {\n      throw new IOException();\n    }};", "modifier": "private final", "type": "InputStream", "declarator": "exceptionalStream = new InputStream() {\n\n    @Override\n    public int read() throws IOException {\n      throw new IOException();\n    }}", "var_name": "exceptionalStream"}, {"original_string": "@Spy private Sender sender = new Sender(authKey);", "modifier": "@Spy private", "type": "Sender", "declarator": "sender = new Sender(authKey)", "var_name": "sender"}, {"original_string": "@Mock private HttpURLConnection mockedConn;", "modifier": "@Mock private", "type": "HttpURLConnection", "declarator": "mockedConn", "var_name": "mockedConn"}, {"original_string": "private final ByteArrayOutputStream outputStream = \n      new ByteArrayOutputStream();", "modifier": "private final", "type": "ByteArrayOutputStream", "declarator": "outputStream = \n      new ByteArrayOutputStream()", "var_name": "outputStream"}, {"original_string": "private Result result;", "modifier": "private", "type": "Result", "declarator": "result", "var_name": "result"}], "file": "gcm-server/src/test/java/com/google/android/gcm/server/SenderTest.java"}, "test_case": {"identifier": "testSendNoRetry_serviceUnavailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSendNoRetry_serviceUnavailable() throws Exception {\n    setResponseExpectations(503, \"\");\n    Result result = sender.sendNoRetry(message, regId);\n    assertNull(result);\n    assertRequestBody();\n  }", "signature": "void testSendNoRetry_serviceUnavailable()", "full_signature": "@Test public void testSendNoRetry_serviceUnavailable()", "class_method_signature": "SenderTest.testSendNoRetry_serviceUnavailable()", "testcase": true, "constructor": false, "invocations": ["setResponseExpectations", "sendNoRetry", "assertNull", "assertRequestBody"]}, "focal_class": {"identifier": "Sender", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String UTF8 = \"UTF-8\";", "modifier": "protected static final", "type": "String", "declarator": "UTF8 = \"UTF-8\"", "var_name": "UTF8"}, {"original_string": "protected static final int BACKOFF_INITIAL_DELAY = 1000;", "modifier": "protected static final", "type": "int", "declarator": "BACKOFF_INITIAL_DELAY = 1000", "var_name": "BACKOFF_INITIAL_DELAY"}, {"original_string": "protected static final int MAX_BACKOFF_DELAY = 1024000;", "modifier": "protected static final", "type": "int", "declarator": "MAX_BACKOFF_DELAY = 1024000", "var_name": "MAX_BACKOFF_DELAY"}, {"original_string": "protected final Random random = new Random();", "modifier": "protected final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "protected static final Logger logger =\n      Logger.getLogger(Sender.class.getName());", "modifier": "protected static final", "type": "Logger", "declarator": "logger =\n      Logger.getLogger(Sender.class.getName())", "var_name": "logger"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}], "methods": [{"identifier": "Sender", "parameters": "(String key)", "modifiers": "public", "return": "", "signature": " Sender(String key)", "full_signature": "public  Sender(String key)", "class_method_signature": "Sender.Sender(String key)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(Message message, String registrationId, int retries)", "modifiers": "public", "return": "Result", "signature": "Result send(Message message, String registrationId, int retries)", "full_signature": "public Result send(Message message, String registrationId, int retries)", "class_method_signature": "Sender.send(Message message, String registrationId, int retries)", "testcase": false, "constructor": false}, {"identifier": "sendNoRetry", "parameters": "(Message message, String registrationId)", "modifiers": "public", "return": "Result", "signature": "Result sendNoRetry(Message message, String registrationId)", "full_signature": "public Result sendNoRetry(Message message, String registrationId)", "class_method_signature": "Sender.sendNoRetry(Message message, String registrationId)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Message message, List<String> regIds, int retries)", "modifiers": "public", "return": "MulticastResult", "signature": "MulticastResult send(Message message, List<String> regIds, int retries)", "full_signature": "public MulticastResult send(Message message, List<String> regIds, int retries)", "class_method_signature": "Sender.send(Message message, List<String> regIds, int retries)", "testcase": false, "constructor": false}, {"identifier": "updateStatus", "parameters": "(List<String> unsentRegIds,\n      Map<String, Result> allResults, MulticastResult multicastResult)", "modifiers": "private", "return": "List<String>", "signature": "List<String> updateStatus(List<String> unsentRegIds,\n      Map<String, Result> allResults, MulticastResult multicastResult)", "full_signature": "private List<String> updateStatus(List<String> unsentRegIds,\n      Map<String, Result> allResults, MulticastResult multicastResult)", "class_method_signature": "Sender.updateStatus(List<String> unsentRegIds,\n      Map<String, Result> allResults, MulticastResult multicastResult)", "testcase": false, "constructor": false}, {"identifier": "sendNoRetry", "parameters": "(Message message,\n      List<String> registrationIds)", "modifiers": "public", "return": "MulticastResult", "signature": "MulticastResult sendNoRetry(Message message,\n      List<String> registrationIds)", "full_signature": "public MulticastResult sendNoRetry(Message message,\n      List<String> registrationIds)", "class_method_signature": "Sender.sendNoRetry(Message message,\n      List<String> registrationIds)", "testcase": false, "constructor": false}, {"identifier": "newIoException", "parameters": "(String responseBody, Exception e)", "modifiers": "private", "return": "IOException", "signature": "IOException newIoException(String responseBody, Exception e)", "full_signature": "private IOException newIoException(String responseBody, Exception e)", "class_method_signature": "Sender.newIoException(String responseBody, Exception e)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Closeable closeable)", "modifiers": "private static", "return": "void", "signature": "void close(Closeable closeable)", "full_signature": "private static void close(Closeable closeable)", "class_method_signature": "Sender.close(Closeable closeable)", "testcase": false, "constructor": false}, {"identifier": "setJsonField", "parameters": "(Map<Object, Object> json, String field,\n      Object value)", "modifiers": "private", "return": "void", "signature": "void setJsonField(Map<Object, Object> json, String field,\n      Object value)", "full_signature": "private void setJsonField(Map<Object, Object> json, String field,\n      Object value)", "class_method_signature": "Sender.setJsonField(Map<Object, Object> json, String field,\n      Object value)", "testcase": false, "constructor": false}, {"identifier": "getNumber", "parameters": "(Map<?, ?> json, String field)", "modifiers": "private", "return": "Number", "signature": "Number getNumber(Map<?, ?> json, String field)", "full_signature": "private Number getNumber(Map<?, ?> json, String field)", "class_method_signature": "Sender.getNumber(Map<?, ?> json, String field)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String line)", "modifiers": "private", "return": "String[]", "signature": "String[] split(String line)", "full_signature": "private String[] split(String line)", "class_method_signature": "Sender.split(String line)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(String url, String body)", "modifiers": "protected", "return": "HttpURLConnection", "signature": "HttpURLConnection post(String url, String body)", "full_signature": "protected HttpURLConnection post(String url, String body)", "class_method_signature": "Sender.post(String url, String body)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(String url, String contentType, String body)", "modifiers": "protected", "return": "HttpURLConnection", "signature": "HttpURLConnection post(String url, String contentType, String body)", "full_signature": "protected HttpURLConnection post(String url, String contentType, String body)", "class_method_signature": "Sender.post(String url, String contentType, String body)", "testcase": false, "constructor": false}, {"identifier": "newKeyValues", "parameters": "(String key,\n      String value)", "modifiers": "protected static final", "return": "Map<String, String>", "signature": "Map<String, String> newKeyValues(String key,\n      String value)", "full_signature": "protected static final Map<String, String> newKeyValues(String key,\n      String value)", "class_method_signature": "Sender.newKeyValues(String key,\n      String value)", "testcase": false, "constructor": false}, {"identifier": "newBody", "parameters": "(String name, String value)", "modifiers": "protected static", "return": "StringBuilder", "signature": "StringBuilder newBody(String name, String value)", "full_signature": "protected static StringBuilder newBody(String name, String value)", "class_method_signature": "Sender.newBody(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "addParameter", "parameters": "(StringBuilder body, String name,\n      String value)", "modifiers": "protected static", "return": "void", "signature": "void addParameter(StringBuilder body, String name,\n      String value)", "full_signature": "protected static void addParameter(StringBuilder body, String name,\n      String value)", "class_method_signature": "Sender.addParameter(StringBuilder body, String name,\n      String value)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(String url)", "modifiers": "protected", "return": "HttpURLConnection", "signature": "HttpURLConnection getConnection(String url)", "full_signature": "protected HttpURLConnection getConnection(String url)", "class_method_signature": "Sender.getConnection(String url)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(InputStream stream)", "modifiers": "protected static", "return": "String", "signature": "String getString(InputStream stream)", "full_signature": "protected static String getString(InputStream stream)", "class_method_signature": "Sender.getString(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getAndClose", "parameters": "(InputStream stream)", "modifiers": "private static", "return": "String", "signature": "String getAndClose(InputStream stream)", "full_signature": "private static String getAndClose(InputStream stream)", "class_method_signature": "Sender.getAndClose(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "nonNull", "parameters": "(T argument)", "modifiers": "static", "return": "T", "signature": "T nonNull(T argument)", "full_signature": "static T nonNull(T argument)", "class_method_signature": "Sender.nonNull(T argument)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(long millis)", "modifiers": "", "return": "void", "signature": "void sleep(long millis)", "full_signature": " void sleep(long millis)", "class_method_signature": "Sender.sleep(long millis)", "testcase": false, "constructor": false}], "file": "gcm-server/src/main/java/com/google/android/gcm/server/Sender.java"}, "focal_method": {"identifier": "sendNoRetry", "parameters": "(Message message, String registrationId)", "modifiers": "public", "return": "Result", "body": "public Result sendNoRetry(Message message, String registrationId)\n      throws IOException {\n    StringBuilder body = newBody(PARAM_REGISTRATION_ID, registrationId);\n    Boolean delayWhileIdle = message.isDelayWhileIdle();\n    if (delayWhileIdle != null) {\n      addParameter(body, PARAM_DELAY_WHILE_IDLE, delayWhileIdle ? \"1\" : \"0\");\n    }\n    Boolean dryRun = message.isDryRun();\n    if (dryRun != null) {\n      addParameter(body, PARAM_DRY_RUN, dryRun ? \"1\" : \"0\");\n    }\n    String collapseKey = message.getCollapseKey();\n    if (collapseKey != null) {\n      addParameter(body, PARAM_COLLAPSE_KEY, collapseKey);\n    }\n    String restrictedPackageName = message.getRestrictedPackageName();\n    if (restrictedPackageName != null) {\n      addParameter(body, PARAM_RESTRICTED_PACKAGE_NAME, restrictedPackageName);\n    }\n    Integer timeToLive = message.getTimeToLive();\n    if (timeToLive != null) {\n      addParameter(body, PARAM_TIME_TO_LIVE, Integer.toString(timeToLive));\n    }\n    for (Entry<String, String> entry : message.getData().entrySet()) {\n      String key = entry.getKey();\n      String value = entry.getValue();\n      if (key == null || value == null) {\n        logger.warning(\"Ignoring payload entry thas has null: \" + entry);\n      } else {\n        key = PARAM_PAYLOAD_PREFIX + key;\n        addParameter(body, key, URLEncoder.encode(value, UTF8));\n      }\n    }\n    String requestBody = body.toString();\n    logger.finest(\"Request body: \" + requestBody);\n    HttpURLConnection conn;\n    int status;\n    try {\n      conn = post(GCM_SEND_ENDPOINT, requestBody);\n      status = conn.getResponseCode();\n    } catch (IOException e) {\n      logger.log(Level.FINE, \"IOException posting to GCM\", e);\n      return null;\n    }\n    if (status / 100 == 5) {\n      logger.fine(\"GCM service is unavailable (status \" + status + \")\");\n      return null;\n    }\n    String responseBody;\n    if (status != 200) {\n      try {\n        responseBody = getAndClose(conn.getErrorStream());\n        logger.finest(\"Plain post error response: \" + responseBody);\n      } catch (IOException e) {\n        // ignore the exception since it will thrown an InvalidRequestException\n        // anyways\n        responseBody = \"N/A\";\n        logger.log(Level.FINE, \"Exception reading response: \", e);\n      }\n      throw new InvalidRequestException(status, responseBody);\n    } else {\n      try {\n        responseBody = getAndClose(conn.getInputStream());\n      } catch (IOException e) {\n        logger.log(Level.WARNING, \"Exception reading response: \", e);\n        // return null so it can retry\n        return null;\n      }\n    }\n    String[] lines = responseBody.split(\"\\n\");\n    if (lines.length == 0 || lines[0].equals(\"\")) {\n      throw new IOException(\"Received empty response from GCM service.\");\n    }\n    String firstLine = lines[0];\n    String[] responseParts = split(firstLine);\n    String token = responseParts[0];\n    String value = responseParts[1];\n    if (token.equals(TOKEN_MESSAGE_ID)) {\n      Builder builder = new Result.Builder().messageId(value);\n      // check for canonical registration id\n      if (lines.length > 1) {\n        String secondLine = lines[1];\n        responseParts = split(secondLine);\n        token = responseParts[0];\n        value = responseParts[1];\n        if (token.equals(TOKEN_CANONICAL_REG_ID)) {\n          builder.canonicalRegistrationId(value);\n        } else {\n          logger.warning(\"Invalid response from GCM: \" + responseBody);\n        }\n      }\n      Result result = builder.build();\n      if (logger.isLoggable(Level.FINE)) {\n        logger.fine(\"Message created succesfully (\" + result + \")\");\n      }\n      return result;\n    } else if (token.equals(TOKEN_ERROR)) {\n      return new Result.Builder().errorCode(value).build();\n    } else {\n      throw new IOException(\"Invalid response from GCM: \" + responseBody);\n    }\n  }", "signature": "Result sendNoRetry(Message message, String registrationId)", "full_signature": "public Result sendNoRetry(Message message, String registrationId)", "class_method_signature": "Sender.sendNoRetry(Message message, String registrationId)", "testcase": false, "constructor": false, "invocations": ["newBody", "isDelayWhileIdle", "addParameter", "isDryRun", "addParameter", "getCollapseKey", "addParameter", "getRestrictedPackageName", "addParameter", "getTimeToLive", "addParameter", "toString", "entrySet", "getData", "getKey", "getValue", "warning", "addParameter", "encode", "toString", "finest", "post", "getResponseCode", "log", "fine", "getAndClose", "getErrorStream", "finest", "log", "getAndClose", "getInputStream", "log", "split", "equals", "split", "equals", "messageId", "split", "equals", "canonicalRegistrationId", "warning", "build", "isLoggable", "fine", "equals", "build", "errorCode"]}, "repository": {"repo_id": 8087042, "url": "https://github.com/guetux/gcm-sample", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 9, "size": 228, "license": "licensed"}}