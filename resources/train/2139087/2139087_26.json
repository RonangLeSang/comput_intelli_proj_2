{"test_class": {"identifier": "TestMapUnitToPixelTransform", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CoordinateReferenceSystem<C2D> crs = PROJECTED_2D_METER;", "modifier": "private", "type": "CoordinateReferenceSystem<C2D>", "declarator": "crs = PROJECTED_2D_METER", "var_name": "crs"}, {"original_string": "private Envelope<C2D> bbox = new Envelope<>(10, 20, 110, 100, crs);", "modifier": "private", "type": "Envelope<C2D>", "declarator": "bbox = new Envelope<>(10, 20, 110, 100, crs)", "var_name": "bbox"}, {"original_string": "private PixelRange pixelRange = new PixelRange(100, 50, 100, 200);", "modifier": "private", "type": "PixelRange", "declarator": "pixelRange = new PixelRange(100, 50, 100, 200)", "var_name": "pixelRange"}, {"original_string": "private double mapUnitsPerPixel = 10.0;", "modifier": "private", "type": "double", "declarator": "mapUnitsPerPixel = 10.0", "var_name": "mapUnitsPerPixel"}, {"original_string": "private MapUnitToPixelTransform pixRangeBasedTransform = new MapUnitToPixelTransform(bbox, pixelRange);", "modifier": "private", "type": "MapUnitToPixelTransform", "declarator": "pixRangeBasedTransform = new MapUnitToPixelTransform(bbox, pixelRange)", "var_name": "pixRangeBasedTransform"}, {"original_string": "private MapUnitToPixelTransform uppBasedTransform = new MapUnitToPixelTransform(bbox, 100, 200, 0.1);", "modifier": "private", "type": "MapUnitToPixelTransform", "declarator": "uppBasedTransform = new MapUnitToPixelTransform(bbox, 100, 200, 0.1)", "var_name": "uppBasedTransform"}], "file": "mapserver/src/test/java/org/geolatte/mapserver/tilemap/TestMapUnitToPixelTransform.java"}, "test_case": {"identifier": "test_point_to_pixel_on_pixrange_based_transform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_point_to_pixel_on_pixrange_based_transform() {\n        Pixel pixel = pixRangeBasedTransform.toPixel( new C2D(10, 20));\n        assertEquals(Pixel.valueOf(100, 249), pixel);\n\n        pixel = pixRangeBasedTransform.toPixel(new C2D(10, 100));\n        assertEquals(Pixel.valueOf(100, 50), pixel);\n\n        pixel = pixRangeBasedTransform.toPixel(new C2D(110, 100));\n        assertEquals(Pixel.valueOf(199, 50), pixel);\n\n        pixel = pixRangeBasedTransform.toPixel(new C2D(110, 20));\n        assertEquals(Pixel.valueOf(199, 249), pixel);\n\n        pixel = pixRangeBasedTransform.toPixel(new C2D(60, 60));\n        assertEquals(Pixel.valueOf(150, 150), pixel);\n\n    }", "signature": "void test_point_to_pixel_on_pixrange_based_transform()", "full_signature": "@Test public void test_point_to_pixel_on_pixrange_based_transform()", "class_method_signature": "TestMapUnitToPixelTransform.test_point_to_pixel_on_pixrange_based_transform()", "testcase": true, "constructor": false, "invocations": ["toPixel", "assertEquals", "valueOf", "toPixel", "assertEquals", "valueOf", "toPixel", "assertEquals", "valueOf", "toPixel", "assertEquals", "valueOf", "toPixel", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "MapUnitToPixelTransform", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Envelope<C2D> extent;", "modifier": "private final", "type": "Envelope<C2D>", "declarator": "extent", "var_name": "extent"}, {"original_string": "private final double mapUnitsPerPixelX;", "modifier": "private final", "type": "double", "declarator": "mapUnitsPerPixelX", "var_name": "mapUnitsPerPixelX"}, {"original_string": "private final double mapUnitsPerPixelY;", "modifier": "private final", "type": "double", "declarator": "mapUnitsPerPixelY", "var_name": "mapUnitsPerPixelY"}, {"original_string": "private final PixelRange pixelRange;", "modifier": "private final", "type": "PixelRange", "declarator": "pixelRange", "var_name": "pixelRange"}], "methods": [{"identifier": "MapUnitToPixelTransform", "parameters": "(Envelope<C2D> extent, PixelRange pixelRange)", "modifiers": "public", "return": "", "signature": " MapUnitToPixelTransform(Envelope<C2D> extent, PixelRange pixelRange)", "full_signature": "public  MapUnitToPixelTransform(Envelope<C2D> extent, PixelRange pixelRange)", "class_method_signature": "MapUnitToPixelTransform.MapUnitToPixelTransform(Envelope<C2D> extent, PixelRange pixelRange)", "testcase": false, "constructor": true}, {"identifier": "MapUnitToPixelTransform", "parameters": "(Envelope<C2D> extent, int minPixelX, int minPixelY, double mapUnitsPerPixel)", "modifiers": "public", "return": "", "signature": " MapUnitToPixelTransform(Envelope<C2D> extent, int minPixelX, int minPixelY, double mapUnitsPerPixel)", "full_signature": "public  MapUnitToPixelTransform(Envelope<C2D> extent, int minPixelX, int minPixelY, double mapUnitsPerPixel)", "class_method_signature": "MapUnitToPixelTransform.MapUnitToPixelTransform(Envelope<C2D> extent, int minPixelX, int minPixelY, double mapUnitsPerPixel)", "testcase": false, "constructor": true}, {"identifier": "MapUnitToPixelTransform", "parameters": "(Envelope<C2D> extent, double mapUnitsPerPixel)", "modifiers": "public", "return": "", "signature": " MapUnitToPixelTransform(Envelope<C2D> extent, double mapUnitsPerPixel)", "full_signature": "public  MapUnitToPixelTransform(Envelope<C2D> extent, double mapUnitsPerPixel)", "class_method_signature": "MapUnitToPixelTransform.MapUnitToPixelTransform(Envelope<C2D> extent, double mapUnitsPerPixel)", "testcase": false, "constructor": true}, {"identifier": "getRange", "parameters": "()", "modifiers": "public", "return": "PixelRange", "signature": "PixelRange getRange()", "full_signature": "public PixelRange getRange()", "class_method_signature": "MapUnitToPixelTransform.getRange()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "public", "return": "Envelope<C2D>", "signature": "Envelope<C2D> getDomain()", "full_signature": "public Envelope<C2D> getDomain()", "class_method_signature": "MapUnitToPixelTransform.getDomain()", "testcase": false, "constructor": false}, {"identifier": "toPoint", "parameters": "(Pixel pixel)", "modifiers": "public", "return": "Point<C2D>", "signature": "Point<C2D> toPoint(Pixel pixel)", "full_signature": "public Point<C2D> toPoint(Pixel pixel)", "class_method_signature": "MapUnitToPixelTransform.toPoint(Pixel pixel)", "testcase": false, "constructor": false}, {"identifier": "toPixel", "parameters": "(C2D point)", "modifiers": "public", "return": "Pixel", "signature": "Pixel toPixel(C2D point)", "full_signature": "public Pixel toPixel(C2D point)", "class_method_signature": "MapUnitToPixelTransform.toPixel(C2D point)", "testcase": false, "constructor": false}, {"identifier": "toPixel", "parameters": "(C2D point, boolean leftBorderInclusive, boolean lowerBorderInclusive)", "modifiers": "public", "return": "Pixel", "signature": "Pixel toPixel(C2D point, boolean leftBorderInclusive, boolean lowerBorderInclusive)", "full_signature": "public Pixel toPixel(C2D point, boolean leftBorderInclusive, boolean lowerBorderInclusive)", "class_method_signature": "MapUnitToPixelTransform.toPixel(C2D point, boolean leftBorderInclusive, boolean lowerBorderInclusive)", "testcase": false, "constructor": false}, {"identifier": "removeRoundingError", "parameters": "(double x)", "modifiers": "private", "return": "double", "signature": "double removeRoundingError(double x)", "full_signature": "private double removeRoundingError(double x)", "class_method_signature": "MapUnitToPixelTransform.removeRoundingError(double x)", "testcase": false, "constructor": false}, {"identifier": "toPixelRange", "parameters": "(Envelope<C2D> bbox)", "modifiers": "public", "return": "PixelRange", "signature": "PixelRange toPixelRange(Envelope<C2D> bbox)", "full_signature": "public PixelRange toPixelRange(Envelope<C2D> bbox)", "class_method_signature": "MapUnitToPixelTransform.toPixelRange(Envelope<C2D> bbox)", "testcase": false, "constructor": false}], "file": "mapserver/src/main/java/org/geolatte/mapserver/tilemap/MapUnitToPixelTransform.java"}, "focal_method": {"identifier": "toPixel", "parameters": "(C2D point)", "modifiers": "public", "return": "Pixel", "body": "public Pixel toPixel(C2D point) {\n        if (point.equals(this.extent.upperRight())) {\n            return toPixel(point, true, false);\n        }\n        if (point.equals(this.extent.upperLeft())) {\n            return toPixel(point, false, false);\n        }\n        if (point.equals(this.extent.lowerLeft())) {\n            return toPixel(point, false, true);\n        }\n        if (point.equals(this.extent.lowerRight())) {\n            return toPixel(point, true, true);\n        }\n        return toPixel(point, false, false);\n    }", "signature": "Pixel toPixel(C2D point)", "full_signature": "public Pixel toPixel(C2D point)", "class_method_signature": "MapUnitToPixelTransform.toPixel(C2D point)", "testcase": false, "constructor": false, "invocations": ["equals", "upperRight", "toPixel", "equals", "upperLeft", "toPixel", "equals", "lowerLeft", "toPixel", "equals", "lowerRight", "toPixel", "toPixel"]}, "repository": {"repo_id": 2139087, "url": "https://github.com/GeoLatte/geolatte-mapserver", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 10, "size": 1302, "license": "licensed"}}