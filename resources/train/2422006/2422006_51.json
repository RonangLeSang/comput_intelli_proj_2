{"test_class": {"identifier": "ResultsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Results instance;", "modifier": "private", "type": "Results", "declarator": "instance", "var_name": "instance"}], "file": "error-track/src/test/java/com/captaindebug/errortrack/report/ResultsTest.java"}, "test_case": {"identifier": "testAddResult_with_valid_data_multiple_errors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddResult_with_valid_data_multiple_errors() {\n\n\t\tfinal String path1 = \"/use/local/myfile1.log\";\n\n\t\tList<String> list = getList(\"hello1\", \"world1\");\n\t\tinstance.addResult(path1, 10, list);\n\n\t\tlist = getList(\"hello2\", \"world2\");\n\t\tinstance.addResult(path1, 10, list);\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, List<Results.ErrorResult>> results = (Map<String, List<ErrorResult>>) ReflectionTestUtils\n\t\t\t\t.getField(instance, \"results\");\n\t\tassertEquals(1, results.size());\n\n\t\tList<Results.ErrorResult> result = results.get(path1);\n\t\tassertEquals(2, result.size());\n\t}", "signature": "void testAddResult_with_valid_data_multiple_errors()", "full_signature": "@Test public void testAddResult_with_valid_data_multiple_errors()", "class_method_signature": "ResultsTest.testAddResult_with_valid_data_multiple_errors()", "testcase": true, "constructor": false, "invocations": ["getList", "addResult", "getList", "addResult", "getField", "assertEquals", "size", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "Results", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Results.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Results.class)", "var_name": "logger"}, {"original_string": "private final Map<String, List<ErrorResult>> results = new HashMap<String, List<ErrorResult>>();", "modifier": "private final", "type": "Map<String, List<ErrorResult>>", "declarator": "results = new HashMap<String, List<ErrorResult>>()", "var_name": "results"}], "methods": [{"identifier": "addFile", "parameters": "(String filePath)", "modifiers": "public", "return": "void", "signature": "void addFile(String filePath)", "full_signature": "public void addFile(String filePath)", "class_method_signature": "Results.addFile(String filePath)", "testcase": false, "constructor": false}, {"identifier": "addResult", "parameters": "(String path, int lineNumber, List<String> lines)", "modifiers": "public", "return": "void", "signature": "void addResult(String path, int lineNumber, List<String> lines)", "full_signature": "public void addResult(String path, int lineNumber, List<String> lines)", "class_method_signature": "Results.addResult(String path, int lineNumber, List<String> lines)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(Object obj)", "modifiers": "private", "return": "boolean", "signature": "boolean isNull(Object obj)", "full_signature": "private boolean isNull(Object obj)", "class_method_signature": "Results.isNull(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Results.clear()", "testcase": false, "constructor": false}, {"identifier": "getRawResults", "parameters": "()", "modifiers": "", "return": "Map<String, List<ErrorResult>>", "signature": "Map<String, List<ErrorResult>> getRawResults()", "full_signature": " Map<String, List<ErrorResult>> getRawResults()", "class_method_signature": "Results.getRawResults()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(Formatter formatter, Publisher publisher)", "modifiers": "public", "return": "void", "signature": "void generate(Formatter formatter, Publisher publisher)", "full_signature": "public void generate(Formatter formatter, Publisher publisher)", "class_method_signature": "Results.generate(Formatter formatter, Publisher publisher)", "testcase": false, "constructor": false}], "file": "error-track/src/main/java/com/captaindebug/errortrack/report/Results.java"}, "focal_method": {"identifier": "addResult", "parameters": "(String path, int lineNumber, List<String> lines)", "modifiers": "public", "return": "void", "body": "public void addResult(String path, int lineNumber, List<String> lines) {\n\n\t\tValidate.notBlank(path, \"Invalid file/path\");\n\t\tValidate.notEmpty(lines);\n\t\tValidate.isTrue(lineNumber > 0, \"line numbers must be positive\");\n\n\t\tList<ErrorResult> list = results.get(path);\n\t\tif (isNull(list)) {\n\t\t\taddFile(path);\n\t\t\tlist = results.get(path);\n\t\t}\n\n\t\tErrorResult errorResult = new ErrorResult(lineNumber, lines);\n\t\tlist.add(errorResult);\n\t\tlogger.debug(\"Adding Result: {}\", errorResult);\n\t}", "signature": "void addResult(String path, int lineNumber, List<String> lines)", "full_signature": "public void addResult(String path, int lineNumber, List<String> lines)", "class_method_signature": "Results.addResult(String path, int lineNumber, List<String> lines)", "testcase": false, "constructor": false, "invocations": ["notBlank", "notEmpty", "isTrue", "get", "isNull", "addFile", "get", "add", "debug"]}, "repository": {"repo_id": 2422006, "url": "https://github.com/roghughe/captaindebug", "language": "Java", "is_fork": false, "fork_count": 327, "stargazer_count": 193, "size": 3937, "license": "licensed"}}