{"test_class": {"identifier": "MarketMakerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String CODE = \"BT.L\";", "modifier": "private static", "type": "String", "declarator": "CODE = \"BT.L\"", "var_name": "CODE"}, {"original_string": "private static String DESCRIPTION = \"British Telecom\";", "modifier": "private static", "type": "String", "declarator": "DESCRIPTION = \"British Telecom\"", "var_name": "DESCRIPTION"}, {"original_string": "private MarketMaker instance;", "modifier": "private", "type": "MarketMaker", "declarator": "instance", "var_name": "instance"}, {"original_string": "@Mock\n\tprivate ITopic<StockPrice> iTopic;", "modifier": "@Mock\n\tprivate", "type": "ITopic<StockPrice>", "declarator": "iTopic", "var_name": "iTopic"}], "file": "hazelcast/src/test/java/com/captaindebug/hazelcast/pubsub/MarketMakerTest.java"}, "test_case": {"identifier": "testCreateStockPrice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateStockPrice() {\n\n\t\tStockPrice result = instance.createStockPrice();\n\n\t\tassertEquals(CODE, result.getCode());\n\t\tassertEquals(DESCRIPTION, result.getDescription());\n\n\t\tBigDecimal ask = result.getAsk();\n\n\t\t// Range is: 2010 - 1520\n\t\tassertTrue(ask.doubleValue() <= 20.10);\n\t\tassertTrue(ask.doubleValue() >= 15.20);\n\n\t\tBigDecimal bid = result.getBid();\n\t\tassertTrue(bid.doubleValue() <= 20.10);\n\t\tassertTrue(bid.doubleValue() >= 15.20);\n\n\t\tassertTrue(bid.doubleValue() < ask.doubleValue());\n\n\t}", "signature": "void testCreateStockPrice()", "full_signature": "@Test public void testCreateStockPrice()", "class_method_signature": "MarketMakerTest.testCreateStockPrice()", "testcase": true, "constructor": false, "invocations": ["createStockPrice", "assertEquals", "getCode", "assertEquals", "getDescription", "getAsk", "assertTrue", "doubleValue", "assertTrue", "doubleValue", "getBid", "assertTrue", "doubleValue", "assertTrue", "doubleValue", "assertTrue", "doubleValue", "doubleValue"]}, "focal_class": {"identifier": "MarketMaker", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static Random random = new Random();", "modifier": "private static", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private final String stockCode;", "modifier": "private final", "type": "String", "declarator": "stockCode", "var_name": "stockCode"}, {"original_string": "private final String description;", "modifier": "private final", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private final ITopic<StockPrice> topic;", "modifier": "private final", "type": "ITopic<StockPrice>", "declarator": "topic", "var_name": "topic"}, {"original_string": "private volatile boolean running;", "modifier": "private volatile", "type": "boolean", "declarator": "running", "var_name": "running"}], "methods": [{"identifier": "MarketMaker", "parameters": "(String topicName, String stockCode, String description)", "modifiers": "public", "return": "", "signature": " MarketMaker(String topicName, String stockCode, String description)", "full_signature": "public  MarketMaker(String topicName, String stockCode, String description)", "class_method_signature": "MarketMaker.MarketMaker(String topicName, String stockCode, String description)", "testcase": false, "constructor": true}, {"identifier": "createTopic", "parameters": "(String topicName)", "modifiers": "@VisibleForTesting", "return": "ITopic<StockPrice>", "signature": "ITopic<StockPrice> createTopic(String topicName)", "full_signature": "@VisibleForTesting ITopic<StockPrice> createTopic(String topicName)", "class_method_signature": "MarketMaker.createTopic(String topicName)", "testcase": false, "constructor": false}, {"identifier": "publishPrices", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void publishPrices()", "full_signature": "public void publishPrices()", "class_method_signature": "MarketMaker.publishPrices()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "MarketMaker.run()", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void publish()", "full_signature": "private void publish()", "class_method_signature": "MarketMaker.publish()", "testcase": false, "constructor": false}, {"identifier": "createStockPrice", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "StockPrice", "signature": "StockPrice createStockPrice()", "full_signature": "@VisibleForTesting StockPrice createStockPrice()", "class_method_signature": "MarketMaker.createStockPrice()", "testcase": false, "constructor": false}, {"identifier": "createPrice", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double createPrice()", "full_signature": "private double createPrice()", "class_method_signature": "MarketMaker.createPrice()", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(double price)", "modifiers": "private", "return": "double", "signature": "double variance(double price)", "full_signature": "private double variance(double price)", "class_method_signature": "MarketMaker.variance(double price)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sleep()", "full_signature": "private void sleep()", "class_method_signature": "MarketMaker.sleep()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "MarketMaker.stop()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "MarketMaker.main(String[] args)", "testcase": false, "constructor": false}], "file": "hazelcast/src/main/java/com/captaindebug/hazelcast/pubsub/MarketMaker.java"}, "focal_method": {"identifier": "createStockPrice", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "StockPrice", "body": "@VisibleForTesting\n\tStockPrice createStockPrice() {\n\n\t\tdouble price = createPrice();\n\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n\n\t\tBigDecimal bid = new BigDecimal(df.format(price - variance(price)));\n\t\tBigDecimal ask = new BigDecimal(df.format(price + variance(price)));\n\n\t\tStockPrice stockPrice = new StockPrice(bid, ask, stockCode, description,\n\t\t\t\tSystem.currentTimeMillis());\n\t\treturn stockPrice;\n\t}", "signature": "StockPrice createStockPrice()", "full_signature": "@VisibleForTesting StockPrice createStockPrice()", "class_method_signature": "MarketMaker.createStockPrice()", "testcase": false, "constructor": false, "invocations": ["createPrice", "format", "variance", "format", "variance", "currentTimeMillis"]}, "repository": {"repo_id": 2422006, "url": "https://github.com/roghughe/captaindebug", "language": "Java", "is_fork": false, "fork_count": 327, "stargazer_count": 193, "size": 3937, "license": "licensed"}}