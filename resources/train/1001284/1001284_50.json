{"test_class": {"identifier": "ReflectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public final ExpectedException thrown = none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "thrown = none()", "var_name": "thrown"}], "file": "core/src/test/java/com/pholser/junit/quickcheck/internal/ReflectionTest.java"}, "test_case": {"identifier": "findingSingleAccessibleConstructorSuccessfully", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void findingSingleAccessibleConstructorSuccessfully() {\n        Constructor<Object> ctor = singleAccessibleConstructor(Object.class);\n\n        assertEquals(0, ctor.getParameterTypes().length);\n    }", "signature": "void findingSingleAccessibleConstructorSuccessfully()", "full_signature": "@Test public void findingSingleAccessibleConstructorSuccessfully()", "class_method_signature": "ReflectionTest.findingSingleAccessibleConstructorSuccessfully()", "testcase": true, "constructor": false, "invocations": ["singleAccessibleConstructor", "assertEquals", "getParameterTypes"]}, "focal_class": {"identifier": "Reflection", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Class<?>, Class<?>> PRIMITIVES =\n        new HashMap<>(16);", "modifier": "private static final", "type": "Map<Class<?>, Class<?>>", "declarator": "PRIMITIVES =\n        new HashMap<>(16)", "var_name": "PRIMITIVES"}], "methods": [{"identifier": "Reflection", "parameters": "()", "modifiers": "private", "return": "", "signature": " Reflection()", "full_signature": "private  Reflection()", "class_method_signature": "Reflection.Reflection()", "testcase": false, "constructor": true}, {"identifier": "maybeWrap", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> maybeWrap(Class<?> clazz)", "full_signature": "public static Class<?> maybeWrap(Class<?> clazz)", "class_method_signature": "Reflection.maybeWrap(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "findConstructor", "parameters": "(\n        Class<T> type,\n        Class<?>... parameterTypes)", "modifiers": "public static", "return": "Constructor<T>", "signature": "Constructor<T> findConstructor(\n        Class<T> type,\n        Class<?>... parameterTypes)", "full_signature": "public static Constructor<T> findConstructor(\n        Class<T> type,\n        Class<?>... parameterTypes)", "class_method_signature": "Reflection.findConstructor(\n        Class<T> type,\n        Class<?>... parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "findDeclaredConstructor", "parameters": "(\n        Class<T> type,\n        Class<?>... parameterTypes)", "modifiers": "public static", "return": "Constructor<T>", "signature": "Constructor<T> findDeclaredConstructor(\n        Class<T> type,\n        Class<?>... parameterTypes)", "full_signature": "public static Constructor<T> findDeclaredConstructor(\n        Class<T> type,\n        Class<?>... parameterTypes)", "class_method_signature": "Reflection.findDeclaredConstructor(\n        Class<T> type,\n        Class<?>... parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "singleAccessibleConstructor", "parameters": "(\n        Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Constructor<T>", "signature": "Constructor<T> singleAccessibleConstructor(\n        Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Constructor<T> singleAccessibleConstructor(\n        Class<T> type)", "class_method_signature": "Reflection.singleAccessibleConstructor(\n        Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T instantiate(Class<T> clazz)", "full_signature": "public static T instantiate(Class<T> clazz)", "class_method_signature": "Reflection.instantiate(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(Constructor<T> ctor, Object... args)", "modifiers": "public static", "return": "T", "signature": "T instantiate(Constructor<T> ctor, Object... args)", "full_signature": "public static T instantiate(Constructor<T> ctor, Object... args)", "class_method_signature": "Reflection.instantiate(Constructor<T> ctor, Object... args)", "testcase": false, "constructor": false}, {"identifier": "supertypes", "parameters": "(Type<?> bottom)", "modifiers": "public static", "return": "Set<Type<?>>", "signature": "Set<Type<?>> supertypes(Type<?> bottom)", "full_signature": "public static Set<Type<?>> supertypes(Type<?> bottom)", "class_method_signature": "Reflection.supertypes(Type<?> bottom)", "testcase": false, "constructor": false}, {"identifier": "defaultValueOf", "parameters": "(\n        Class<? extends Annotation> annotationType,\n        String attribute)", "modifiers": "public static", "return": "Object", "signature": "Object defaultValueOf(\n        Class<? extends Annotation> annotationType,\n        String attribute)", "full_signature": "public static Object defaultValueOf(\n        Class<? extends Annotation> annotationType,\n        String attribute)", "class_method_signature": "Reflection.defaultValueOf(\n        Class<? extends Annotation> annotationType,\n        String attribute)", "testcase": false, "constructor": false}, {"identifier": "allAnnotations", "parameters": "(AnnotatedElement e)", "modifiers": "public static", "return": "List<Annotation>", "signature": "List<Annotation> allAnnotations(AnnotatedElement e)", "full_signature": "public static List<Annotation> allAnnotations(AnnotatedElement e)", "class_method_signature": "Reflection.allAnnotations(AnnotatedElement e)", "testcase": false, "constructor": false}, {"identifier": "allAnnotationsByType", "parameters": "(\n        AnnotatedElement e,\n        Class<T> type)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> allAnnotationsByType(\n        AnnotatedElement e,\n        Class<T> type)", "full_signature": "public static List<T> allAnnotationsByType(\n        AnnotatedElement e,\n        Class<T> type)", "class_method_signature": "Reflection.allAnnotationsByType(\n        AnnotatedElement e,\n        Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(\n        Class<?> target,\n        String methodName,\n        Class<?>... argTypes)", "modifiers": "public static", "return": "Method", "signature": "Method findMethod(\n        Class<?> target,\n        String methodName,\n        Class<?>... argTypes)", "full_signature": "public static Method findMethod(\n        Class<?> target,\n        String methodName,\n        Class<?>... argTypes)", "class_method_signature": "Reflection.findMethod(\n        Class<?> target,\n        String methodName,\n        Class<?>... argTypes)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Method method, Object target, Object... args)", "modifiers": "public static", "return": "Object", "signature": "Object invoke(Method method, Object target, Object... args)", "full_signature": "public static Object invoke(Method method, Object target, Object... args)", "class_method_signature": "Reflection.invoke(Method method, Object target, Object... args)", "testcase": false, "constructor": false}, {"identifier": "findField", "parameters": "(Class<?> type, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field findField(Class<?> type, String fieldName)", "full_signature": "public static Field findField(Class<?> type, String fieldName)", "class_method_signature": "Reflection.findField(Class<?> type, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "allDeclaredFieldsOf", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> allDeclaredFieldsOf(Class<?> type)", "full_signature": "public static List<Field> allDeclaredFieldsOf(Class<?> type)", "class_method_signature": "Reflection.allDeclaredFieldsOf(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(\n        Field field,\n        Object target,\n        Object value,\n        boolean suppressProtection)", "modifiers": "public static", "return": "void", "signature": "void setField(\n        Field field,\n        Object target,\n        Object value,\n        boolean suppressProtection)", "full_signature": "public static void setField(\n        Field field,\n        Object target,\n        Object value,\n        boolean suppressProtection)", "class_method_signature": "Reflection.setField(\n        Field field,\n        Object target,\n        Object value,\n        boolean suppressProtection)", "testcase": false, "constructor": false}, {"identifier": "jdk9OrBetter", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean jdk9OrBetter()", "full_signature": "public static boolean jdk9OrBetter()", "class_method_signature": "Reflection.jdk9OrBetter()", "testcase": false, "constructor": false}, {"identifier": "singleAbstractMethodOf", "parameters": "(Class<?> rawClass)", "modifiers": "public static", "return": "Method", "signature": "Method singleAbstractMethodOf(Class<?> rawClass)", "full_signature": "public static Method singleAbstractMethodOf(Class<?> rawClass)", "class_method_signature": "Reflection.singleAbstractMethodOf(Class<?> rawClass)", "testcase": false, "constructor": false}, {"identifier": "isMarkerInterface", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMarkerInterface(Class<?> clazz)", "full_signature": "public static boolean isMarkerInterface(Class<?> clazz)", "class_method_signature": "Reflection.isMarkerInterface(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "overridesJavaLangObjectMethod", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean overridesJavaLangObjectMethod(Method method)", "full_signature": "private static boolean overridesJavaLangObjectMethod(Method method)", "class_method_signature": "Reflection.overridesJavaLangObjectMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "isEquals", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEquals(Method method)", "full_signature": "private static boolean isEquals(Method method)", "class_method_signature": "Reflection.isEquals(Method method)", "testcase": false, "constructor": false}, {"identifier": "isHashCode", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean isHashCode(Method method)", "full_signature": "private static boolean isHashCode(Method method)", "class_method_signature": "Reflection.isHashCode(Method method)", "testcase": false, "constructor": false}, {"identifier": "isToString", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean isToString(Method method)", "full_signature": "private static boolean isToString(Method method)", "class_method_signature": "Reflection.isToString(Method method)", "testcase": false, "constructor": false}, {"identifier": "reflectionException", "parameters": "(Exception ex)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException reflectionException(Exception ex)", "full_signature": "public static RuntimeException reflectionException(Exception ex)", "class_method_signature": "Reflection.reflectionException(Exception ex)", "testcase": false, "constructor": false}, {"identifier": "nonSystemAnnotations", "parameters": "(AnnotatedElement e)", "modifiers": "private static", "return": "List<Annotation>", "signature": "List<Annotation> nonSystemAnnotations(AnnotatedElement e)", "full_signature": "private static List<Annotation> nonSystemAnnotations(AnnotatedElement e)", "class_method_signature": "Reflection.nonSystemAnnotations(AnnotatedElement e)", "testcase": false, "constructor": false}, {"identifier": "annotatedComponentTypes", "parameters": "(\n        AnnotatedType annotatedType)", "modifiers": "public static", "return": "List<AnnotatedType>", "signature": "List<AnnotatedType> annotatedComponentTypes(\n        AnnotatedType annotatedType)", "full_signature": "public static List<AnnotatedType> annotatedComponentTypes(\n        AnnotatedType annotatedType)", "class_method_signature": "Reflection.annotatedComponentTypes(\n        AnnotatedType annotatedType)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/pholser/junit/quickcheck/internal/Reflection.java"}, "focal_method": {"identifier": "singleAccessibleConstructor", "parameters": "(\n        Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Constructor<T>", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T> Constructor<T> singleAccessibleConstructor(\n        Class<T> type) {\n\n        Constructor<?>[] constructors = type.getConstructors();\n        if (constructors.length != 1) {\n            throw new ReflectionException(\n                type + \" needs a single accessible constructor\");\n        }\n\n        return (Constructor<T>) constructors[0];\n    }", "signature": "Constructor<T> singleAccessibleConstructor(\n        Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Constructor<T> singleAccessibleConstructor(\n        Class<T> type)", "class_method_signature": "Reflection.singleAccessibleConstructor(\n        Class<T> type)", "testcase": false, "constructor": false, "invocations": ["getConstructors"]}, "repository": {"repo_id": 1001284, "url": "https://github.com/pholser/junit-quickcheck", "stars": 731, "created": "10/18/2010 10:33:36 PM +00:00", "updates": "2020-01-24T01:53:34+00:00", "fork": "False", "license": "licensed"}}