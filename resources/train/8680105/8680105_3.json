{"test_class": {"identifier": "PlayerDestinationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PlayerDestination.Factory factory;", "modifier": "private", "type": "PlayerDestination.Factory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected MultiverseCoreAPI api;", "modifier": "protected", "type": "MultiverseCoreAPI", "declarator": "api", "var_name": "api"}, {"original_string": "private List<String> validDestinations = Arrays.asList(\n            \"player:someplayer\",\n            \"pl:someplayer\"\n    );", "modifier": "private", "type": "List<String>", "declarator": "validDestinations = Arrays.asList(\n            \"player:someplayer\",\n            \"pl:someplayer\"\n    )", "var_name": "validDestinations"}], "file": "base/src/test/java/com/mvplugin/core/destination/PlayerDestinationTest.java"}, "test_case": {"identifier": "testGetOfflinePlayerDestination", "parameters": "()", "modifiers": "@Test(expected = TeleportException.class) public", "return": "void", "body": "@Test(expected = TeleportException.class)\n    public void testGetOfflinePlayerDestination() throws Exception {\n        PlayerDestination dest = factory.createDestination(api, \"player:fakeplayer\");\n        dest.getDestination();\n    }", "signature": "void testGetOfflinePlayerDestination()", "full_signature": "@Test(expected = TeleportException.class) public void testGetOfflinePlayerDestination()", "class_method_signature": "PlayerDestinationTest.testGetOfflinePlayerDestination()", "testcase": true, "constructor": false, "invocations": ["createDestination", "getDestination"]}, "focal_class": {"identifier": "PlayerDestination", "superclass": "extends SimpleDestination", "interfaces": "", "fields": [{"original_string": "static final Set<String> PREFIXES = new CopyOnWriteArraySet<String>() {{\n        add(\"player\");\n        add(\"pl\");\n    }};", "modifier": "static final", "type": "Set<String>", "declarator": "PREFIXES = new CopyOnWriteArraySet<String>() {{\n        add(\"player\");\n        add(\"pl\");\n    }}", "var_name": "PREFIXES"}, {"original_string": "@NotNull\n    private final String playerName;", "modifier": "@NotNull\n    private final", "type": "String", "declarator": "playerName", "var_name": "playerName"}], "methods": [{"identifier": "PlayerDestination", "parameters": "(@NotNull MultiverseCoreAPI api, @NotNull String playerName)", "modifiers": "", "return": "", "signature": " PlayerDestination(@NotNull MultiverseCoreAPI api, @NotNull String playerName)", "full_signature": "  PlayerDestination(@NotNull MultiverseCoreAPI api, @NotNull String playerName)", "class_method_signature": "PlayerDestination.PlayerDestination(@NotNull MultiverseCoreAPI api, @NotNull String playerName)", "testcase": false, "constructor": true}, {"identifier": "getDestination", "parameters": "()", "modifiers": "@NotNull @Override protected", "return": "EntityCoordinates", "signature": "EntityCoordinates getDestination()", "full_signature": "@NotNull @Override protected EntityCoordinates getDestination()", "class_method_signature": "PlayerDestination.getDestination()", "testcase": false, "constructor": false}, {"identifier": "getDestinationString", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getDestinationString()", "full_signature": "@NotNull @Override public String getDestinationString()", "class_method_signature": "PlayerDestination.getDestinationString()", "testcase": false, "constructor": false}, {"identifier": "checkPermissions", "parameters": "(@NotNull Permissible teleporter, @NotNull Entity teleportee)", "modifiers": "@Override protected", "return": "void", "signature": "void checkPermissions(@NotNull Permissible teleporter, @NotNull Entity teleportee)", "full_signature": "@Override protected void checkPermissions(@NotNull Permissible teleporter, @NotNull Entity teleportee)", "class_method_signature": "PlayerDestination.checkPermissions(@NotNull Permissible teleporter, @NotNull Entity teleportee)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "PlayerDestination.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PlayerDestination.hashCode()", "testcase": false, "constructor": false}], "file": "base/src/main/java/com/mvplugin/core/destination/PlayerDestination.java"}, "focal_method": {"identifier": "getDestination", "parameters": "()", "modifiers": "@NotNull @Override protected", "return": "EntityCoordinates", "body": "@NotNull\n    @Override\n    protected EntityCoordinates getDestination() throws TeleportException {\n        BasePlayer player = this.getApi().getServerInterface().getPlayer(playerName);\n        if (player instanceof Entity) {\n            return ((Entity) player).getLocation();\n        } else {\n            throw new TeleportException(Message.bundleMessage(NOT_FOUND, playerName));\n        }\n    }", "signature": "EntityCoordinates getDestination()", "full_signature": "@NotNull @Override protected EntityCoordinates getDestination()", "class_method_signature": "PlayerDestination.getDestination()", "testcase": false, "constructor": false, "invocations": ["getPlayer", "getServerInterface", "getApi", "getLocation", "bundleMessage"]}, "repository": {"repo_id": 8680105, "url": "https://github.com/Multiverse/Multiverse-3", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 12474, "license": "licensed"}}