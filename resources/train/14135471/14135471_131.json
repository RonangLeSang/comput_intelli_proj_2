{"test_class": {"identifier": "MvccLogEntrySerializationStrategyImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    @Rule\n    public MigrationManagerRule migrationManagerRule;", "modifier": "@Inject\n    @Rule\n    public", "type": "MigrationManagerRule", "declarator": "migrationManagerRule", "var_name": "migrationManagerRule"}, {"original_string": "private MvccLogEntrySerializationStrategy logEntryStrategy;", "modifier": "private", "type": "MvccLogEntrySerializationStrategy", "declarator": "logEntryStrategy", "var_name": "logEntryStrategy"}], "file": "stack/corepersistence/collection/src/test/java/org/apache/usergrid/persistence/collection/serialization/impl/MvccLogEntrySerializationStrategyImplTest.java"}, "test_case": {"identifier": "loadParamEntityId", "parameters": "()", "modifiers": "@Test( expected = NullPointerException.class ) public", "return": "void", "body": "@Test( expected = NullPointerException.class )\n    public void loadParamEntityId() throws ConnectionException {\n\n        logEntryStrategy\n            .load( new ApplicationScopeImpl( new SimpleId( \"organization\" ) ), null, UUIDGenerator.newTimeUUID() );\n    }", "signature": "void loadParamEntityId()", "full_signature": "@Test( expected = NullPointerException.class ) public void loadParamEntityId()", "class_method_signature": "MvccLogEntrySerializationStrategyImplTest.loadParamEntityId()", "testcase": true, "constructor": false, "invocations": ["load", "newTimeUUID"]}, "focal_class": {"identifier": "MvccLogEntrySerializationStrategyImpl", "superclass": "", "interfaces": "implements MvccLogEntrySerializationStrategy", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( MvccLogEntrySerializationStrategyImpl.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( MvccLogEntrySerializationStrategyImpl.class )", "var_name": "logger"}, {"original_string": "private static final StageSerializer SER = new StageSerializer();", "modifier": "private static final", "type": "StageSerializer", "declarator": "SER = new StageSerializer()", "var_name": "SER"}, {"original_string": "private final MultiTenantColumnFamily<ScopedRowKey<K>, UUID> CF_ENTITY_LOG;", "modifier": "private final", "type": "MultiTenantColumnFamily<ScopedRowKey<K>, UUID>", "declarator": "CF_ENTITY_LOG", "var_name": "CF_ENTITY_LOG"}, {"original_string": "protected final Keyspace keyspace;", "modifier": "protected final", "type": "Keyspace", "declarator": "keyspace", "var_name": "keyspace"}, {"original_string": "protected final SerializationFig fig;", "modifier": "protected final", "type": "SerializationFig", "declarator": "fig", "var_name": "fig"}], "methods": [{"identifier": "MvccLogEntrySerializationStrategyImpl", "parameters": "( final Keyspace keyspace, final SerializationFig fig )", "modifiers": "public", "return": "", "signature": " MvccLogEntrySerializationStrategyImpl( final Keyspace keyspace, final SerializationFig fig )", "full_signature": "public  MvccLogEntrySerializationStrategyImpl( final Keyspace keyspace, final SerializationFig fig )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.MvccLogEntrySerializationStrategyImpl( final Keyspace keyspace, final SerializationFig fig )", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "( final ApplicationScope collectionScope, final MvccLogEntry entry )", "modifiers": "@Override public", "return": "MutationBatch", "signature": "MutationBatch write( final ApplicationScope collectionScope, final MvccLogEntry entry )", "full_signature": "@Override public MutationBatch write( final ApplicationScope collectionScope, final MvccLogEntry entry )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.write( final ApplicationScope collectionScope, final MvccLogEntry entry )", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "modifiers": "@Override public", "return": "VersionSet", "signature": "VersionSet load( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "full_signature": "@Override public VersionSet load( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.load( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "( final ApplicationScope collectionScope, final Id entityId, final UUID version,\n                                    final int maxSize )", "modifiers": "@Override public", "return": "List<MvccLogEntry>", "signature": "List<MvccLogEntry> load( final ApplicationScope collectionScope, final Id entityId, final UUID version,\n                                    final int maxSize )", "full_signature": "@Override public List<MvccLogEntry> load( final ApplicationScope collectionScope, final Id entityId, final UUID version,\n                                    final int maxSize )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.load( final ApplicationScope collectionScope, final Id entityId, final UUID version,\n                                    final int maxSize )", "testcase": false, "constructor": false}, {"identifier": "loadReversed", "parameters": "( final ApplicationScope applicationScope, final Id entityId,\n                                            final UUID minVersion, final int maxSize )", "modifiers": "@Override public", "return": "List<MvccLogEntry>", "signature": "List<MvccLogEntry> loadReversed( final ApplicationScope applicationScope, final Id entityId,\n                                            final UUID minVersion, final int maxSize )", "full_signature": "@Override public List<MvccLogEntry> loadReversed( final ApplicationScope applicationScope, final Id entityId,\n                                            final UUID minVersion, final int maxSize )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.loadReversed( final ApplicationScope applicationScope, final Id entityId,\n                                            final UUID minVersion, final int maxSize )", "testcase": false, "constructor": false}, {"identifier": "parseResults", "parameters": "( final ColumnList<UUID> columns, final Id entityId )", "modifiers": "private", "return": "List<MvccLogEntry>", "signature": "List<MvccLogEntry> parseResults( final ColumnList<UUID> columns, final Id entityId )", "full_signature": "private List<MvccLogEntry> parseResults( final ColumnList<UUID> columns, final Id entityId )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.parseResults( final ColumnList<UUID> columns, final Id entityId )", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "( final ApplicationScope context, final Id entityId, final UUID version )", "modifiers": "@Override public", "return": "MutationBatch", "signature": "MutationBatch delete( final ApplicationScope context, final Id entityId, final UUID version )", "full_signature": "@Override public MutationBatch delete( final ApplicationScope context, final Id entityId, final UUID version )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.delete( final ApplicationScope context, final Id entityId, final UUID version )", "testcase": false, "constructor": false}, {"identifier": "doWrite", "parameters": "( ApplicationScope collectionScope, Id entityId, UUID version, RowOp op )", "modifiers": "private", "return": "MutationBatch", "signature": "MutationBatch doWrite( ApplicationScope collectionScope, Id entityId, UUID version, RowOp op )", "full_signature": "private MutationBatch doWrite( ApplicationScope collectionScope, Id entityId, UUID version, RowOp op )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.doWrite( ApplicationScope collectionScope, Id entityId, UUID version, RowOp op )", "testcase": false, "constructor": false}, {"identifier": "getColumnFamily", "parameters": "()", "modifiers": "protected abstract", "return": "MultiTenantColumnFamily<ScopedRowKey<K>, UUID>", "signature": "MultiTenantColumnFamily<ScopedRowKey<K>, UUID> getColumnFamily()", "full_signature": "protected abstract MultiTenantColumnFamily<ScopedRowKey<K>, UUID> getColumnFamily()", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.getColumnFamily()", "testcase": false, "constructor": false}, {"identifier": "createKey", "parameters": "( final Id applicationId, final Id entityId )", "modifiers": "protected abstract", "return": "ScopedRowKey<K>", "signature": "ScopedRowKey<K> createKey( final Id applicationId, final Id entityId )", "full_signature": "protected abstract ScopedRowKey<K> createKey( final Id applicationId, final Id entityId )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.createKey( final Id applicationId, final Id entityId )", "testcase": false, "constructor": false}, {"identifier": "getEntityIdFromKey", "parameters": "( final ScopedRowKey<K> key )", "modifiers": "protected abstract", "return": "Id", "signature": "Id getEntityIdFromKey( final ScopedRowKey<K> key )", "full_signature": "protected abstract Id getEntityIdFromKey( final ScopedRowKey<K> key )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.getEntityIdFromKey( final ScopedRowKey<K> key )", "testcase": false, "constructor": false}], "file": "stack/corepersistence/collection/src/main/java/org/apache/usergrid/persistence/collection/serialization/impl/MvccLogEntrySerializationStrategyImpl.java"}, "focal_method": {"identifier": "load", "parameters": "( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "modifiers": "@Override public", "return": "VersionSet", "body": "@Override\n    public VersionSet load( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion ) {\n        Preconditions.checkNotNull( collectionScope, \"collectionScope is required\" );\n        Preconditions.checkNotNull( entityIds, \"entityIds is required\" );\n        Preconditions.checkArgument( entityIds.size() > 0, \"You must specify an Id\" );\n        Preconditions.checkNotNull( maxVersion, \"maxVersion is required\" );\n\n\n        //didnt put the max in the error message, I don't want to take the string construction hit every time\n        Preconditions.checkArgument( entityIds.size() <= fig.getMaxLoadSize(),\n            \"requested size cannot be over configured maximum\" );\n\n\n        final Id applicationId = collectionScope.getApplication();\n\n\n        final List<ScopedRowKey<K>> rowKeys = new ArrayList<>( entityIds.size() );\n\n\n        for ( final Id entityId : entityIds ) {\n            final ScopedRowKey<K> rowKey = createKey( applicationId, entityId );\n\n\n            rowKeys.add( rowKey );\n        }\n\n\n        final Iterator<Row<ScopedRowKey<K>, UUID>> latestEntityColumns;\n\n\n        try {\n            latestEntityColumns = keyspace.prepareQuery( CF_ENTITY_LOG ).getKeySlice( rowKeys )\n                                          .withColumnRange( maxVersion, null, false, 1 ).execute().getResult()\n                                          .iterator();\n        }\n        catch ( ConnectionException e ) {\n            throw new CollectionRuntimeException( null, collectionScope, \"An error occurred connecting to cassandra\",\n                e );\n        }\n\n\n        final VersionSetImpl versionResults = new VersionSetImpl( entityIds.size() );\n\n        while ( latestEntityColumns.hasNext() ) {\n            final Row<ScopedRowKey<K>, UUID> row = latestEntityColumns.next();\n\n            final ColumnList<UUID> columns = row.getColumns();\n\n            if ( columns.size() == 0 ) {\n                continue;\n            }\n\n\n            final Id entityId = getEntityIdFromKey( row.getKey() );\n\n            final Column<UUID> column = columns.getColumnByIndex( 0 );\n\n\n            final UUID version = column.getName();\n\n            final StageStatus stageStatus = column.getValue( SER );\n\n            final MvccLogEntry logEntry =\n                new MvccLogEntryImpl( entityId, version, stageStatus.stage, stageStatus.state );\n\n\n            versionResults.addEntry( logEntry );\n        }\n\n        return versionResults;\n    }", "signature": "VersionSet load( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "full_signature": "@Override public VersionSet load( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "class_method_signature": "MvccLogEntrySerializationStrategyImpl.load( final ApplicationScope collectionScope, final Collection<Id> entityIds,\n                            final UUID maxVersion )", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "checkArgument", "size", "checkNotNull", "checkArgument", "size", "getMaxLoadSize", "getApplication", "size", "createKey", "add", "iterator", "getResult", "execute", "withColumnRange", "getKeySlice", "prepareQuery", "size", "hasNext", "next", "getColumns", "size", "getEntityIdFromKey", "getKey", "getColumnByIndex", "getName", "getValue", "addEntry"]}, "repository": {"repo_id": 14135471, "url": "https://github.com/apache/usergrid", "language": "Java", "is_fork": false, "fork_count": 432, "stargazer_count": 983, "size": 383432, "license": "licensed"}}