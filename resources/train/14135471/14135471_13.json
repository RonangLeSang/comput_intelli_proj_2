{"test_class": {"identifier": "CountTest", "superclass": "", "interfaces": "", "fields": [], "file": "stack/core/src/test/java/org/apache/usergrid/count/common/CountTest.java"}, "test_case": {"identifier": "testApplyFail_onKeyname", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testApplyFail_onKeyname() {\n        Count count = new Count( \"Counters\", \"k1\", \"c1\", 1 );\n        Count c2 = new Count( \"Coutenrs\", \"k2\", \"c1\", 1 );\n        count.apply( c2 );\n    }", "signature": "void testApplyFail_onKeyname()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testApplyFail_onKeyname()", "class_method_signature": "CountTest.testApplyFail_onKeyname()", "testcase": true, "constructor": false, "invocations": ["apply"]}, "focal_class": {"identifier": "Count", "superclass": "", "interfaces": "", "fields": [{"original_string": "@JsonProperty\n    private final String tableName;", "modifier": "@JsonProperty\n    private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "@JsonProperty\n    private final K keyName;", "modifier": "@JsonProperty\n    private final", "type": "K", "declarator": "keyName", "var_name": "keyName"}, {"original_string": "@JsonProperty\n    private final C columnName;", "modifier": "@JsonProperty\n    private final", "type": "C", "declarator": "columnName", "var_name": "columnName"}, {"original_string": "@JsonProperty\n    private long value;", "modifier": "@JsonProperty\n    private", "type": "long", "declarator": "value", "var_name": "value"}, {"original_string": "private Serializer<K> keySerializer;", "modifier": "private", "type": "Serializer<K>", "declarator": "keySerializer", "var_name": "keySerializer"}, {"original_string": "private Serializer<C> columnNameSerializer;", "modifier": "private", "type": "Serializer<C>", "declarator": "columnNameSerializer", "var_name": "columnNameSerializer"}, {"original_string": "private String counterName;", "modifier": "private", "type": "String", "declarator": "counterName", "var_name": "counterName"}], "methods": [{"identifier": "Count", "parameters": "( @JsonProperty(value = \"tableName\") String tableName, @JsonProperty(value = \"keyName\") K keyName,\n                  @JsonProperty(value = \"columnName\") C columnName, @JsonProperty(value = \"value\") long value )", "modifiers": "@JsonCreator public", "return": "", "signature": " Count( @JsonProperty(value = \"tableName\") String tableName, @JsonProperty(value = \"keyName\") K keyName,\n                  @JsonProperty(value = \"columnName\") C columnName, @JsonProperty(value = \"value\") long value )", "full_signature": "@JsonCreator public  Count( @JsonProperty(value = \"tableName\") String tableName, @JsonProperty(value = \"keyName\") K keyName,\n                  @JsonProperty(value = \"columnName\") C columnName, @JsonProperty(value = \"value\") long value )", "class_method_signature": "Count.Count( @JsonProperty(value = \"tableName\") String tableName, @JsonProperty(value = \"keyName\") K keyName,\n                  @JsonProperty(value = \"columnName\") C columnName, @JsonProperty(value = \"value\") long value )", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "( Count count )", "modifiers": "public", "return": "Count", "signature": "Count apply( Count count )", "full_signature": "public Count apply( Count count )", "class_method_signature": "Count.apply( Count count )", "testcase": false, "constructor": false}, {"identifier": "getCounterName", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "String", "signature": "String getCounterName()", "full_signature": "@JsonIgnore public String getCounterName()", "class_method_signature": "Count.getCounterName()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getValue()", "full_signature": "public long getValue()", "class_method_signature": "Count.getValue()", "testcase": false, "constructor": false}, {"identifier": "getColumnName", "parameters": "()", "modifiers": "public", "return": "C", "signature": "C getColumnName()", "full_signature": "public C getColumnName()", "class_method_signature": "Count.getColumnName()", "testcase": false, "constructor": false}, {"identifier": "getKeyName", "parameters": "()", "modifiers": "public", "return": "K", "signature": "K getKeyName()", "full_signature": "public K getKeyName()", "class_method_signature": "Count.getKeyName()", "testcase": false, "constructor": false}, {"identifier": "getKeyNameBytes", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "ByteBuffer", "signature": "ByteBuffer getKeyNameBytes()", "full_signature": "@JsonIgnore public ByteBuffer getKeyNameBytes()", "class_method_signature": "Count.getKeyNameBytes()", "testcase": false, "constructor": false}, {"identifier": "getColumnNameBytes", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "ByteBuffer", "signature": "ByteBuffer getColumnNameBytes()", "full_signature": "@JsonIgnore public ByteBuffer getColumnNameBytes()", "class_method_signature": "Count.getColumnNameBytes()", "testcase": false, "constructor": false}, {"identifier": "getKeySerializer", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "Serializer<K>", "signature": "Serializer<K> getKeySerializer()", "full_signature": "@JsonIgnore public Serializer<K> getKeySerializer()", "class_method_signature": "Count.getKeySerializer()", "testcase": false, "constructor": false}, {"identifier": "getColumnNameSerializer", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "Serializer<C>", "signature": "Serializer<C> getColumnNameSerializer()", "full_signature": "@JsonIgnore public Serializer<C> getColumnNameSerializer()", "class_method_signature": "Count.getColumnNameSerializer()", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTableName()", "full_signature": "public String getTableName()", "class_method_signature": "Count.getTableName()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Count.toString()", "testcase": false, "constructor": false}], "file": "stack/core/src/main/java/org/apache/usergrid/count/common/Count.java"}, "focal_method": {"identifier": "apply", "parameters": "( Count count )", "modifiers": "public", "return": "Count", "body": "public Count apply( Count count ) {\n        if ( !StringUtils.equals( count.getCounterName(), getCounterName() ) ) {\n            throw new IllegalArgumentException( \"Attempt to apply a counter with a different name\" );\n        }\n        this.value += count.getValue();\n        return this;\n    }", "signature": "Count apply( Count count )", "full_signature": "public Count apply( Count count )", "class_method_signature": "Count.apply( Count count )", "testcase": false, "constructor": false, "invocations": ["equals", "getCounterName", "getCounterName", "getValue"]}, "repository": {"repo_id": 14135471, "url": "https://github.com/apache/usergrid", "language": "Java", "is_fork": false, "fork_count": 432, "stargazer_count": 983, "size": 383432, "license": "licensed"}}