{"test_class": {"identifier": "QueueActorHelperTest", "superclass": "extends AbstractAkkaTest", "interfaces": "", "fields": [], "file": "stack/corepersistence/queue/src/test/java/org/apache/usergrid/persistence/qakka/distributed/actors/QueueActorHelperTest.java"}, "test_case": {"identifier": "putInflight", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void putInflight() throws Exception {\n\n        Injector injector = getInjector();\n\n        injector.getInstance( App.class ); // init the INJECTOR\n\n        ActorSystemFig actorSystemFig = injector.getInstance( ActorSystemFig.class );\n        QueueMessageSerialization qms = injector.getInstance( QueueMessageSerialization.class );\n        QueueManager queueManager     = injector.getInstance( QueueManager.class );\n\n        String region = actorSystemFig.getRegionLocal();\n//        App app = injector.getInstance( App.class );\n//        app.start( \"localhost\", getNextAkkaPort(), region );\n\n        // write message to messages_available table\n\n        UUID queueMessageId = QakkaUtils.getTimeUuid();\n\n        String queueName = \"qat_queue_\" + RandomStringUtils.randomAlphanumeric( 10 );\n        queueManager.createQueue( new Queue( queueName ) );\n\n        try {\n\n            DatabaseQueueMessage message = new DatabaseQueueMessage(\n                QakkaUtils.getTimeUuid(),\n                DatabaseQueueMessage.Type.DEFAULT,\n                queueName,\n                actorSystemFig.getRegionLocal(),\n                null,\n                System.currentTimeMillis(),\n                null,\n                queueMessageId );\n            qms.writeMessage( message );\n\n            // put message inflight\n\n            QueueActorHelper helper = injector.getInstance( QueueActorHelper.class );\n            helper.putInflight( message );\n\n            // message must be gone from messages_available table\n\n            Assert.assertNull( qms.loadMessage(\n                queueName,\n                actorSystemFig.getRegionLocal(),\n                null,\n                DatabaseQueueMessage.Type.DEFAULT,\n                message.getQueueMessageId() ) );\n\n            // message must be present in messages_inflight table\n\n            Assert.assertNotNull( qms.loadMessage(\n                queueName,\n                actorSystemFig.getRegionLocal(),\n                null,\n                DatabaseQueueMessage.Type.INFLIGHT,\n                message.getQueueMessageId() ) );\n\n            // there must be an audit log record of the successful get operation\n\n            AuditLogSerialization auditLogSerialization = injector.getInstance( AuditLogSerialization.class );\n            Result<AuditLog> auditLogs = auditLogSerialization.getAuditLogs( message.getMessageId() );\n            Assert.assertEquals( 1, auditLogs.getEntities().size() );\n            Assert.assertEquals( AuditLog.Status.SUCCESS, auditLogs.getEntities().get( 0 ).getStatus() );\n            Assert.assertEquals( AuditLog.Action.GET, auditLogs.getEntities().get( 0 ).getAction() );\n\n            DistributedQueueService distributedQueueService = injector.getInstance( DistributedQueueService.class );\n            distributedQueueService.shutdown();\n\n        } finally {\n            queueManager.deleteQueue( queueName );\n        }\n    }", "signature": "void putInflight()", "full_signature": "@Test public void putInflight()", "class_method_signature": "QueueActorHelperTest.putInflight()", "testcase": true, "constructor": false, "invocations": ["getInjector", "getInstance", "getInstance", "getInstance", "getInstance", "getRegionLocal", "getTimeUuid", "randomAlphanumeric", "createQueue", "getTimeUuid", "getRegionLocal", "currentTimeMillis", "writeMessage", "getInstance", "putInflight", "assertNull", "loadMessage", "getRegionLocal", "getQueueMessageId", "assertNotNull", "loadMessage", "getRegionLocal", "getQueueMessageId", "getInstance", "getAuditLogs", "getMessageId", "assertEquals", "size", "getEntities", "assertEquals", "getStatus", "get", "getEntities", "assertEquals", "getAction", "get", "getEntities", "getInstance", "shutdown", "deleteQueue"]}, "focal_class": {"identifier": "QueueActorHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( QueueActorHelper.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( QueueActorHelper.class )", "var_name": "logger"}, {"original_string": "private final String name = RandomStringUtils.randomAlphanumeric( 4 );", "modifier": "private final", "type": "String", "declarator": "name = RandomStringUtils.randomAlphanumeric( 4 )", "var_name": "name"}, {"original_string": "private final ActorSystemFig            actorSystemFig;", "modifier": "private final", "type": "ActorSystemFig", "declarator": "actorSystemFig", "var_name": "actorSystemFig"}, {"original_string": "private final QueueMessageSerialization messageSerialization;", "modifier": "private final", "type": "QueueMessageSerialization", "declarator": "messageSerialization", "var_name": "messageSerialization"}, {"original_string": "private final AuditLogSerialization     auditLogSerialization;", "modifier": "private final", "type": "AuditLogSerialization", "declarator": "auditLogSerialization", "var_name": "auditLogSerialization"}, {"original_string": "private final InMemoryQueue             inMemoryQueue;", "modifier": "private final", "type": "InMemoryQueue", "declarator": "inMemoryQueue", "var_name": "inMemoryQueue"}, {"original_string": "private final QakkaFig                  qakkaFig;", "modifier": "private final", "type": "QakkaFig", "declarator": "qakkaFig", "var_name": "qakkaFig"}, {"original_string": "private final MetricsService            metricsService;", "modifier": "private final", "type": "MetricsService", "declarator": "metricsService", "var_name": "metricsService"}, {"original_string": "private final CassandraClient           cassandraClient;", "modifier": "private final", "type": "CassandraClient", "declarator": "cassandraClient", "var_name": "cassandraClient"}, {"original_string": "private Map<String, Long> startingShards = new HashMap<>();", "modifier": "private", "type": "Map<String, Long>", "declarator": "startingShards = new HashMap<>()", "var_name": "startingShards"}, {"original_string": "private Map<String, Long> lastRefreshTimeMillis = new HashMap<>();", "modifier": "private", "type": "Map<String, Long>", "declarator": "lastRefreshTimeMillis = new HashMap<>()", "var_name": "lastRefreshTimeMillis"}, {"original_string": "private Map<String, UUID> newestFetchedUuid = new HashMap<>();", "modifier": "private", "type": "Map<String, UUID>", "declarator": "newestFetchedUuid = new HashMap<>()", "var_name": "newestFetchedUuid"}], "methods": [{"identifier": "QueueActorHelper", "parameters": "(\n            QakkaFig                  qakkaFig,\n            ActorSystemFig            actorSystemFig,\n            QueueMessageSerialization messageSerialization,\n            AuditLogSerialization     auditLogSerialization,\n            InMemoryQueue             inMemoryQueue,\n            MetricsService            metricsService,\n            CassandraClient           cassandraClient\n            )", "modifiers": "@Inject public", "return": "", "signature": " QueueActorHelper(\n            QakkaFig                  qakkaFig,\n            ActorSystemFig            actorSystemFig,\n            QueueMessageSerialization messageSerialization,\n            AuditLogSerialization     auditLogSerialization,\n            InMemoryQueue             inMemoryQueue,\n            MetricsService            metricsService,\n            CassandraClient           cassandraClient\n            )", "full_signature": "@Inject public  QueueActorHelper(\n            QakkaFig                  qakkaFig,\n            ActorSystemFig            actorSystemFig,\n            QueueMessageSerialization messageSerialization,\n            AuditLogSerialization     auditLogSerialization,\n            InMemoryQueue             inMemoryQueue,\n            MetricsService            metricsService,\n            CassandraClient           cassandraClient\n            )", "class_method_signature": "QueueActorHelper.QueueActorHelper(\n            QakkaFig                  qakkaFig,\n            ActorSystemFig            actorSystemFig,\n            QueueMessageSerialization messageSerialization,\n            AuditLogSerialization     auditLogSerialization,\n            InMemoryQueue             inMemoryQueue,\n            MetricsService            metricsService,\n            CassandraClient           cassandraClient\n            )", "testcase": false, "constructor": true}, {"identifier": "loadDatabaseQueueMessage", "parameters": "(\n            String queueName, UUID queueMessageId, DatabaseQueueMessage.Type type )", "modifiers": "", "return": "DatabaseQueueMessage", "signature": "DatabaseQueueMessage loadDatabaseQueueMessage(\n            String queueName, UUID queueMessageId, DatabaseQueueMessage.Type type )", "full_signature": " DatabaseQueueMessage loadDatabaseQueueMessage(\n            String queueName, UUID queueMessageId, DatabaseQueueMessage.Type type )", "class_method_signature": "QueueActorHelper.loadDatabaseQueueMessage(\n            String queueName, UUID queueMessageId, DatabaseQueueMessage.Type type )", "testcase": false, "constructor": false}, {"identifier": "getMessages", "parameters": "(String queueName, int numRequested )", "modifiers": "", "return": "Collection<DatabaseQueueMessage>", "signature": "Collection<DatabaseQueueMessage> getMessages(String queueName, int numRequested )", "full_signature": " Collection<DatabaseQueueMessage> getMessages(String queueName, int numRequested )", "class_method_signature": "QueueActorHelper.getMessages(String queueName, int numRequested )", "testcase": false, "constructor": false}, {"identifier": "getMessagesFromMemory", "parameters": "(String queueName, int numRequested )", "modifiers": "private", "return": "Collection<DatabaseQueueMessage>", "signature": "Collection<DatabaseQueueMessage> getMessagesFromMemory(String queueName, int numRequested )", "full_signature": "private Collection<DatabaseQueueMessage> getMessagesFromMemory(String queueName, int numRequested )", "class_method_signature": "QueueActorHelper.getMessagesFromMemory(String queueName, int numRequested )", "testcase": false, "constructor": false}, {"identifier": "getMessagesFromStorage", "parameters": "(String queueName, int numRequested )", "modifiers": "private", "return": "Collection<DatabaseQueueMessage>", "signature": "Collection<DatabaseQueueMessage> getMessagesFromStorage(String queueName, int numRequested )", "full_signature": "private Collection<DatabaseQueueMessage> getMessagesFromStorage(String queueName, int numRequested )", "class_method_signature": "QueueActorHelper.getMessagesFromStorage(String queueName, int numRequested )", "testcase": false, "constructor": false}, {"identifier": "putInflight", "parameters": "( DatabaseQueueMessage queueMessage )", "modifiers": "", "return": "boolean", "signature": "boolean putInflight( DatabaseQueueMessage queueMessage )", "full_signature": " boolean putInflight( DatabaseQueueMessage queueMessage )", "class_method_signature": "QueueActorHelper.putInflight( DatabaseQueueMessage queueMessage )", "testcase": false, "constructor": false}, {"identifier": "ackQueueMessage", "parameters": "(String queueName, UUID queueMessageId )", "modifiers": "", "return": "DistributedQueueService.Status", "signature": "DistributedQueueService.Status ackQueueMessage(String queueName, UUID queueMessageId )", "full_signature": " DistributedQueueService.Status ackQueueMessage(String queueName, UUID queueMessageId )", "class_method_signature": "QueueActorHelper.ackQueueMessage(String queueName, UUID queueMessageId )", "testcase": false, "constructor": false}, {"identifier": "queueRefresh", "parameters": "( String queueName )", "modifiers": "synchronized", "return": "void", "signature": "void queueRefresh( String queueName )", "full_signature": "synchronized void queueRefresh( String queueName )", "class_method_signature": "QueueActorHelper.queueRefresh( String queueName )", "testcase": false, "constructor": false}, {"identifier": "createShardKey", "parameters": "(String queueName, Shard.Type type, String region )", "modifiers": "private", "return": "String", "signature": "String createShardKey(String queueName, Shard.Type type, String region )", "full_signature": "private String createShardKey(String queueName, Shard.Type type, String region )", "class_method_signature": "QueueActorHelper.createShardKey(String queueName, Shard.Type type, String region )", "testcase": false, "constructor": false}, {"identifier": "updateUUIDPointer", "parameters": "(String queueName, UUID newUUIDPointer)", "modifiers": "private synchronized", "return": "void", "signature": "void updateUUIDPointer(String queueName, UUID newUUIDPointer)", "full_signature": "private synchronized void updateUUIDPointer(String queueName, UUID newUUIDPointer)", "class_method_signature": "QueueActorHelper.updateUUIDPointer(String queueName, UUID newUUIDPointer)", "testcase": false, "constructor": false}, {"identifier": "updateLastRefreshedTime", "parameters": "(String queueName)", "modifiers": "private synchronized", "return": "void", "signature": "void updateLastRefreshedTime(String queueName)", "full_signature": "private synchronized void updateLastRefreshedTime(String queueName)", "class_method_signature": "QueueActorHelper.updateLastRefreshedTime(String queueName)", "testcase": false, "constructor": false}], "file": "stack/corepersistence/queue/src/main/java/org/apache/usergrid/persistence/qakka/distributed/actors/QueueActorHelper.java"}, "focal_method": {"identifier": "putInflight", "parameters": "( DatabaseQueueMessage queueMessage )", "modifiers": "", "return": "boolean", "body": "boolean putInflight( DatabaseQueueMessage queueMessage ) {\n\n        UUID qmid = queueMessage.getQueueMessageId();\n        try {\n\n            messageSerialization.putInflight( queueMessage );\n\n        } catch ( Throwable t ) {\n            logger.error(\"Error putting inflight queue message \"\n                + qmid + \" queue name: \" + queueMessage.getQueueName(), t);\n\n            auditLogSerialization.recordAuditLog(\n                AuditLog.Action.GET,\n                AuditLog.Status.ERROR,\n                queueMessage.getQueueName(),\n                actorSystemFig.getRegionLocal(),\n                queueMessage.getMessageId(),\n                qmid);\n\n            return false;\n        }\n\n        auditLogSerialization.recordAuditLog(\n            AuditLog.Action.GET,\n            AuditLog.Status.SUCCESS,\n            queueMessage.getQueueName(),\n            actorSystemFig.getRegionLocal(),\n            queueMessage.getMessageId(),\n            qmid);\n\n        return true;\n    }", "signature": "boolean putInflight( DatabaseQueueMessage queueMessage )", "full_signature": " boolean putInflight( DatabaseQueueMessage queueMessage )", "class_method_signature": "QueueActorHelper.putInflight( DatabaseQueueMessage queueMessage )", "testcase": false, "constructor": false, "invocations": ["getQueueMessageId", "putInflight", "error", "getQueueName", "recordAuditLog", "getQueueName", "getRegionLocal", "getMessageId", "recordAuditLog", "getQueueName", "getRegionLocal", "getMessageId"]}, "repository": {"repo_id": 14135471, "url": "https://github.com/apache/usergrid", "language": "Java", "is_fork": false, "fork_count": 432, "stargazer_count": 983, "size": 383432, "license": "licensed"}}