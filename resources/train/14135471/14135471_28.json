{"test_class": {"identifier": "UUIDUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( UUIDUtilsTest.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( UUIDUtilsTest.class )", "var_name": "logger"}], "file": "stack/core/src/test/java/org/apache/usergrid/utils/UUIDUtilsTest.java"}, "test_case": {"identifier": "nonTimeUUID", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void nonTimeUUID() {\n        UUIDUtils.decrement( UUID.randomUUID() );\n    }", "signature": "void nonTimeUUID()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void nonTimeUUID()", "class_method_signature": "UUIDUtilsTest.nonTimeUUID()", "testcase": true, "constructor": false, "invocations": ["decrement", "randomUUID"]}, "focal_class": {"identifier": "UUIDUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( UUIDUtils.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( UUIDUtils.class )", "var_name": "logger"}, {"original_string": "private static final int[] MICROS = new int[1000];", "modifier": "private static final", "type": "int[]", "declarator": "MICROS = new int[1000]", "var_name": "MICROS"}, {"original_string": "private static ReentrantLock tsLock = new ReentrantLock( true );", "modifier": "private static", "type": "ReentrantLock", "declarator": "tsLock = new ReentrantLock( true )", "var_name": "tsLock"}, {"original_string": "public static final UUID MIN_TIME_UUID = UUID.fromString( \"00000000-0000-1000-8000-000000000000\" );", "modifier": "public static final", "type": "UUID", "declarator": "MIN_TIME_UUID = UUID.fromString( \"00000000-0000-1000-8000-000000000000\" )", "var_name": "MIN_TIME_UUID"}, {"original_string": "public static final UUID MAX_TIME_UUID = UUID.fromString( \"ffffffff-ffff-1fff-bfff-ffffffffffff\" );", "modifier": "public static final", "type": "UUID", "declarator": "MAX_TIME_UUID = UUID.fromString( \"ffffffff-ffff-1fff-bfff-ffffffffffff\" )", "var_name": "MAX_TIME_UUID"}, {"original_string": "public static final UUID ZERO_UUID = new UUID( 0, 0 );", "modifier": "public static final", "type": "UUID", "declarator": "ZERO_UUID = new UUID( 0, 0 )", "var_name": "ZERO_UUID"}, {"original_string": "private static long timestampMillisNow = System.currentTimeMillis();", "modifier": "private static", "type": "long", "declarator": "timestampMillisNow = System.currentTimeMillis()", "var_name": "timestampMillisNow"}, {"original_string": "private static AtomicInteger currentMicrosPoint = new AtomicInteger( 0 );", "modifier": "private static", "type": "AtomicInteger", "declarator": "currentMicrosPoint = new AtomicInteger( 0 )", "var_name": "currentMicrosPoint"}, {"original_string": "private static AtomicInteger customMicrosPointer = new AtomicInteger( 0 );", "modifier": "private static", "type": "AtomicInteger", "declarator": "customMicrosPointer = new AtomicInteger( 0 )", "var_name": "customMicrosPointer"}, {"original_string": "private static final long KCLOCK_OFFSET = 0x01b21dd213814000L;", "modifier": "private static final", "type": "long", "declarator": "KCLOCK_OFFSET = 0x01b21dd213814000L", "var_name": "KCLOCK_OFFSET"}, {"original_string": "private static final long KCLOCK_MULTIPLIER_L = 10000L;", "modifier": "private static final", "type": "long", "declarator": "KCLOCK_MULTIPLIER_L = 10000L", "var_name": "KCLOCK_MULTIPLIER_L"}, {"original_string": "private static final Random CLOCK_SEQ_RANDOM = new Random();", "modifier": "private static final", "type": "Random", "declarator": "CLOCK_SEQ_RANDOM = new Random()", "var_name": "CLOCK_SEQ_RANDOM"}], "methods": [{"identifier": "newTimeUUID", "parameters": "()", "modifiers": "public static", "return": "java.util.UUID", "signature": "java.util.UUID newTimeUUID()", "full_signature": "public static java.util.UUID newTimeUUID()", "class_method_signature": "UUIDUtils.newTimeUUID()", "testcase": false, "constructor": false}, {"identifier": "getRandomClockSequence", "parameters": "()", "modifiers": "private static", "return": "int", "signature": "int getRandomClockSequence()", "full_signature": "private static int getRandomClockSequence()", "class_method_signature": "UUIDUtils.getRandomClockSequence()", "testcase": false, "constructor": false}, {"identifier": "setTimestamp", "parameters": "( long timestamp, byte[] uuidBytes, int clockSeq, int timeOffset )", "modifiers": "private static", "return": "void", "signature": "void setTimestamp( long timestamp, byte[] uuidBytes, int clockSeq, int timeOffset )", "full_signature": "private static void setTimestamp( long timestamp, byte[] uuidBytes, int clockSeq, int timeOffset )", "class_method_signature": "UUIDUtils.setTimestamp( long timestamp, byte[] uuidBytes, int clockSeq, int timeOffset )", "testcase": false, "constructor": false}, {"identifier": "setTime", "parameters": "( byte[] uuidBytes, long timestamp )", "modifiers": "@SuppressWarnings(\"all\") private static", "return": "void", "signature": "void setTime( byte[] uuidBytes, long timestamp )", "full_signature": "@SuppressWarnings(\"all\") private static void setTime( byte[] uuidBytes, long timestamp )", "class_method_signature": "UUIDUtils.setTime( byte[] uuidBytes, long timestamp )", "testcase": false, "constructor": false}, {"identifier": "newTimeUUID", "parameters": "( long ts, int timeoffset )", "modifiers": "public static", "return": "UUID", "signature": "UUID newTimeUUID( long ts, int timeoffset )", "full_signature": "public static UUID newTimeUUID( long ts, int timeoffset )", "class_method_signature": "UUIDUtils.newTimeUUID( long ts, int timeoffset )", "testcase": false, "constructor": false}, {"identifier": "newTimeUUID", "parameters": "( long ts )", "modifiers": "public static", "return": "UUID", "signature": "UUID newTimeUUID( long ts )", "full_signature": "public static UUID newTimeUUID( long ts )", "class_method_signature": "UUIDUtils.newTimeUUID( long ts )", "testcase": false, "constructor": false}, {"identifier": "maxTimeUUID", "parameters": "( long ts )", "modifiers": "public static", "return": "UUID", "signature": "UUID maxTimeUUID( long ts )", "full_signature": "public static UUID maxTimeUUID( long ts )", "class_method_signature": "UUIDUtils.maxTimeUUID( long ts )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( UUID first, UUID second )", "modifiers": "public static", "return": "UUID", "signature": "UUID min( UUID first, UUID second )", "full_signature": "public static UUID min( UUID first, UUID second )", "class_method_signature": "UUIDUtils.min( UUID first, UUID second )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( UUID first, UUID second )", "modifiers": "public static", "return": "UUID", "signature": "UUID max( UUID first, UUID second )", "full_signature": "public static UUID max( UUID first, UUID second )", "class_method_signature": "UUIDUtils.max( UUID first, UUID second )", "testcase": false, "constructor": false}, {"identifier": "decrement", "parameters": "( UUID uuid )", "modifiers": "public static", "return": "UUID", "signature": "UUID decrement( UUID uuid )", "full_signature": "public static UUID decrement( UUID uuid )", "class_method_signature": "UUIDUtils.decrement( UUID uuid )", "testcase": false, "constructor": false}, {"identifier": "isTimeBased", "parameters": "( UUID uuid )", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeBased( UUID uuid )", "full_signature": "public static boolean isTimeBased( UUID uuid )", "class_method_signature": "UUIDUtils.isTimeBased( UUID uuid )", "testcase": false, "constructor": false}, {"identifier": "getTimestampInMillis", "parameters": "( UUID uuid )", "modifiers": "public static", "return": "long", "signature": "long getTimestampInMillis( UUID uuid )", "full_signature": "public static long getTimestampInMillis( UUID uuid )", "class_method_signature": "UUIDUtils.getTimestampInMillis( UUID uuid )", "testcase": false, "constructor": false}, {"identifier": "getTimestampInMicros", "parameters": "( UUID uuid )", "modifiers": "public static", "return": "long", "signature": "long getTimestampInMicros( UUID uuid )", "full_signature": "public static long getTimestampInMicros( UUID uuid )", "class_method_signature": "UUIDUtils.getTimestampInMicros( UUID uuid )", "testcase": false, "constructor": false}, {"identifier": "tryGetUUID", "parameters": "( String s )", "modifiers": "public static", "return": "UUID", "signature": "UUID tryGetUUID( String s )", "full_signature": "public static UUID tryGetUUID( String s )", "class_method_signature": "UUIDUtils.tryGetUUID( String s )", "testcase": false, "constructor": false}, {"identifier": "isUUID", "parameters": "( String s )", "modifiers": "public static", "return": "boolean", "signature": "boolean isUUID( String s )", "full_signature": "public static boolean isUUID( String s )", "class_method_signature": "UUIDUtils.isUUID( String s )", "testcase": false, "constructor": false}, {"identifier": "tryExtractUUID", "parameters": "( String s )", "modifiers": "public static", "return": "UUID", "signature": "UUID tryExtractUUID( String s )", "full_signature": "public static UUID tryExtractUUID( String s )", "class_method_signature": "UUIDUtils.tryExtractUUID( String s )", "testcase": false, "constructor": false}, {"identifier": "tryExtractUUID", "parameters": "( String s, int offset )", "modifiers": "public static", "return": "UUID", "signature": "UUID tryExtractUUID( String s, int offset )", "full_signature": "public static UUID tryExtractUUID( String s, int offset )", "class_method_signature": "UUIDUtils.tryExtractUUID( String s, int offset )", "testcase": false, "constructor": false}, {"identifier": "toBase64", "parameters": "( UUID id )", "modifiers": "public static", "return": "String", "signature": "String toBase64( UUID id )", "full_signature": "public static String toBase64( UUID id )", "class_method_signature": "UUIDUtils.toBase64( UUID id )", "testcase": false, "constructor": false}, {"identifier": "fromBase64", "parameters": "( String str )", "modifiers": "public static", "return": "UUID", "signature": "UUID fromBase64( String str )", "full_signature": "public static UUID fromBase64( String str )", "class_method_signature": "UUIDUtils.fromBase64( String str )", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "( UUID u1, UUID u2 )", "modifiers": "public static", "return": "int", "signature": "int compare( UUID u1, UUID u2 )", "full_signature": "public static int compare( UUID u1, UUID u2 )", "class_method_signature": "UUIDUtils.compare( UUID u1, UUID u2 )", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "( List<UUID> uuids )", "modifiers": "public static", "return": "List<UUID>", "signature": "List<UUID> sort( List<UUID> uuids )", "full_signature": "public static List<UUID> sort( List<UUID> uuids )", "class_method_signature": "UUIDUtils.sort( List<UUID> uuids )", "testcase": false, "constructor": false}], "file": "stack/core/src/main/java/org/apache/usergrid/utils/UUIDUtils.java"}, "focal_method": {"identifier": "decrement", "parameters": "( UUID uuid )", "modifiers": "public static", "return": "UUID", "body": "public static UUID decrement( UUID uuid ) {\n        if ( !isTimeBased( uuid ) ) {\n            throw new IllegalArgumentException( \"The uuid must be a time type\" );\n        }\n\n\n        //timestamp is in the 60 bit timestamp\n        long timestamp = uuid.timestamp();\n        timestamp--;\n\n        if ( timestamp < 0 ) {\n            throw new IllegalArgumentException( \"You must specify a time uuid with a timestamp > 0\" );\n        }\n\n        //get our bytes, then set the smaller timestamp into it\n        byte[] uuidBytes = bytes( uuid );\n\n        setTime( uuidBytes, timestamp );\n\n        return uuid( uuidBytes );\n    }", "signature": "UUID decrement( UUID uuid )", "full_signature": "public static UUID decrement( UUID uuid )", "class_method_signature": "UUIDUtils.decrement( UUID uuid )", "testcase": false, "constructor": false, "invocations": ["isTimeBased", "timestamp", "bytes", "setTime", "uuid"]}, "repository": {"repo_id": 14135471, "url": "https://github.com/apache/usergrid", "language": "Java", "is_fork": false, "fork_count": 432, "stargazer_count": 983, "size": 383432, "license": "licensed"}}