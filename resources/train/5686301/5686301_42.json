{"test_class": {"identifier": "TempCleaningTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}], "file": "api/src/test/java/org/sonarsource/scanner/api/internal/TempCleaningTest.java"}, "test_case": {"identifier": "should_clean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void should_clean() throws Exception {\n    Path dir = temp.newFolder().toPath();\n    Path oldBatch = dir.resolve(\"sonar-scanner-api-batch656.jar\");\n    Files.write(oldBatch, \"foo\".getBytes(StandardCharsets.UTF_8));\n    FileTime fTime = FileTime.fromMillis(System.currentTimeMillis() - 3 * TempCleaning.ONE_DAY_IN_MILLISECONDS);\n    Files.setLastModifiedTime(oldBatch, fTime);\n    \n    Path youngBatch = dir.resolve(\"sonar-scanner-api-batch123.jar\");\n    Files.write(youngBatch, \"foo\".getBytes(StandardCharsets.UTF_8));\n\n    Path doNotDelete = dir.resolve(\"jacoco.txt\");\n    Files.write(doNotDelete, \"foo\".getBytes(StandardCharsets.UTF_8));\n\n    assertThat(oldBatch).exists();\n    assertThat(youngBatch).exists();\n    assertThat(doNotDelete).exists();\n    new TempCleaning(dir, mock(Logger.class)).clean();\n\n    assertThat(oldBatch).doesNotExist();\n    assertThat(youngBatch).exists();\n    assertThat(doNotDelete).exists();\n  }", "signature": "void should_clean()", "full_signature": "@Test public void should_clean()", "class_method_signature": "TempCleaningTest.should_clean()", "testcase": true, "constructor": false, "invocations": ["toPath", "newFolder", "resolve", "write", "getBytes", "fromMillis", "currentTimeMillis", "setLastModifiedTime", "resolve", "write", "getBytes", "resolve", "write", "getBytes", "exists", "assertThat", "exists", "assertThat", "exists", "assertThat", "clean", "mock", "doesNotExist", "assertThat", "exists", "assertThat", "exists", "assertThat"]}, "focal_class": {"identifier": "TempCleaning", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int ONE_DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000;", "modifier": "static final", "type": "int", "declarator": "ONE_DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000", "var_name": "ONE_DAY_IN_MILLISECONDS"}, {"original_string": "final Path tempDir;", "modifier": "final", "type": "Path", "declarator": "tempDir", "var_name": "tempDir"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "TempCleaning", "parameters": "(Logger logger)", "modifiers": "", "return": "", "signature": " TempCleaning(Logger logger)", "full_signature": "  TempCleaning(Logger logger)", "class_method_signature": "TempCleaning.TempCleaning(Logger logger)", "testcase": false, "constructor": true}, {"identifier": "TempCleaning", "parameters": "(Path tempDir, Logger logger)", "modifiers": "", "return": "", "signature": " TempCleaning(Path tempDir, Logger logger)", "full_signature": "  TempCleaning(Path tempDir, Logger logger)", "class_method_signature": "TempCleaning.TempCleaning(Path tempDir, Logger logger)", "testcase": false, "constructor": true}, {"identifier": "clean", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clean()", "full_signature": " void clean()", "class_method_signature": "TempCleaning.clean()", "testcase": false, "constructor": false}, {"identifier": "lastModifiedTime", "parameters": "(Path file)", "modifiers": "private static", "return": "long", "signature": "long lastModifiedTime(Path file)", "full_signature": "private static long lastModifiedTime(Path file)", "class_method_signature": "TempCleaning.lastModifiedTime(Path file)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/sonarsource/scanner/api/internal/TempCleaning.java"}, "focal_method": {"identifier": "clean", "parameters": "()", "modifiers": "", "return": "void", "body": "void clean() {\n    logger.debug(\"Start temp cleaning...\");\n    long cutoff = System.currentTimeMillis() - ONE_DAY_IN_MILLISECONDS;\n\n    try (Stream<Path> files = Files.list(tempDir)) {\n      files\n        .filter(p -> p.getFileName().toString().startsWith(\"sonar-scanner-api-batch\"))\n        .filter(p -> lastModifiedTime(p) < cutoff)\n        .forEach(Utils::deleteQuietly);\n      logger.debug(\"Temp cleaning done\");\n    } catch (IOException e) {\n      logger.warn(\"Failed to clean files in \" + tempDir.toString() + \": \" + e.getMessage());\n    }\n  }", "signature": "void clean()", "full_signature": " void clean()", "class_method_signature": "TempCleaning.clean()", "testcase": false, "constructor": false, "invocations": ["debug", "currentTimeMillis", "list", "forEach", "filter", "filter", "startsWith", "toString", "getFileName", "lastModifiedTime", "debug", "warn", "toString", "getMessage"]}, "repository": {"repo_id": 5686301, "url": "https://github.com/SonarSource/sonar-scanner-api", "language": "Java", "is_fork": false, "fork_count": 69, "stargazer_count": 85, "size": 1395, "license": "licensed"}}