{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}, {"original_string": "@Rule\n  public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "api/src/test/java/org/sonarsource/scanner/api/UtilsTest.java"}, "test_case": {"identifier": "shouldHandleJsonErrorsInParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldHandleJsonErrorsInParams() {\n    String props = \"\";\n    exception.expect(IllegalStateException.class);\n    exception.expectMessage(\"Failed to parse JSON\");\n    assertThat(Utils.loadEnvironmentProperties(createSonarQubeScannerProps(props))).isEmpty();\n  }", "signature": "void shouldHandleJsonErrorsInParams()", "full_signature": "@Test public void shouldHandleJsonErrorsInParams()", "class_method_signature": "UtilsTest.shouldHandleJsonErrorsInParams()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "isEmpty", "assertThat", "loadEnvironmentProperties", "createSonarQubeScannerProps"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SONARQUBE_SCANNER_PARAMS = \"SONARQUBE_SCANNER_PARAMS\";", "modifier": "private static final", "type": "String", "declarator": "SONARQUBE_SCANNER_PARAMS = \"SONARQUBE_SCANNER_PARAMS\"", "var_name": "SONARQUBE_SCANNER_PARAMS"}], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "loadEnvironmentProperties", "parameters": "(Map<String, String> env)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadEnvironmentProperties(Map<String, String> env)", "full_signature": "public static Properties loadEnvironmentProperties(Map<String, String> env)", "class_method_signature": "Utils.loadEnvironmentProperties(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String[] array, String delimiter)", "modifiers": "static", "return": "String", "signature": "String join(String[] array, String delimiter)", "full_signature": "static String join(String[] array, String delimiter)", "class_method_signature": "Utils.join(String[] array, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "taskRequiresProject", "parameters": "(Map<String, String> props)", "modifiers": "static", "return": "boolean", "signature": "boolean taskRequiresProject(Map<String, String> props)", "full_signature": "static boolean taskRequiresProject(Map<String, String> props)", "class_method_signature": "Utils.taskRequiresProject(Map<String, String> props)", "testcase": false, "constructor": false}, {"identifier": "writeProperties", "parameters": "(File outputFile, Properties p)", "modifiers": "static", "return": "void", "signature": "void writeProperties(File outputFile, Properties p)", "full_signature": "static void writeProperties(File outputFile, Properties p)", "class_method_signature": "Utils.writeProperties(File outputFile, Properties p)", "testcase": false, "constructor": false}, {"identifier": "deleteQuietly", "parameters": "(Path f)", "modifiers": "public static", "return": "void", "signature": "void deleteQuietly(Path f)", "full_signature": "public static void deleteQuietly(Path f)", "class_method_signature": "Utils.deleteQuietly(Path f)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/sonarsource/scanner/api/Utils.java"}, "focal_method": {"identifier": "loadEnvironmentProperties", "parameters": "(Map<String, String> env)", "modifiers": "public static", "return": "Properties", "body": "public static Properties loadEnvironmentProperties(Map<String, String> env) {\n    String scannerParams = env.get(SONARQUBE_SCANNER_PARAMS);\n    Properties props = new Properties();\n\n    if (scannerParams != null) {\n      try {\n\n        JsonValue jsonValue = Json.parse(scannerParams);\n        JsonObject jsonObject = jsonValue.asObject();\n        Iterator<Member> it = jsonObject.iterator();\n\n        while (it.hasNext()) {\n          Member member = it.next();\n          String key = member.getName();\n          String value = member.getValue().asString();\n          props.put(key, value);\n        }\n      } catch (Exception e) {\n        throw new IllegalStateException(\"Failed to parse JSON in SONARQUBE_SCANNER_PARAMS environment variable\", e);\n      }\n    }\n    return props;\n  }", "signature": "Properties loadEnvironmentProperties(Map<String, String> env)", "full_signature": "public static Properties loadEnvironmentProperties(Map<String, String> env)", "class_method_signature": "Utils.loadEnvironmentProperties(Map<String, String> env)", "testcase": false, "constructor": false, "invocations": ["get", "parse", "asObject", "iterator", "hasNext", "next", "getName", "asString", "getValue", "put"]}, "repository": {"repo_id": 5686301, "url": "https://github.com/SonarSource/sonar-scanner-api", "language": "Java", "is_fork": false, "fork_count": 69, "stargazer_count": 85, "size": 1395, "license": "licensed"}}