{"test_class": {"identifier": "TestSpringContext", "superclass": "extends AbstractSpringTestcase", "interfaces": "", "fields": [], "file": "lib-spring/src/test/java/com/kdgregory/pathfinder/spring/context/TestSpringContext.java"}, "test_case": {"identifier": "testInheritClassFail", "parameters": "()", "modifiers": "@Test(expected=InvalidContextException.class) public", "return": "void", "body": "@Test(expected=InvalidContextException.class)\n    public void testInheritClassFail() throws Exception\n    {\n        logger.info(\"testInheritClassFail()\");\n\n        SpringContext ctx = new SpringContext(null, \"classpath:contexts/inheritClassFail.xml\");\n\n        assertEquals(\"com.example.SomeBean\", ctx.getBean(\"concreteBean\").getBeanClass());\n    }", "signature": "void testInheritClassFail()", "full_signature": "@Test(expected=InvalidContextException.class) public void testInheritClassFail()", "class_method_signature": "TestSpringContext.testInheritClassFail()", "testcase": true, "constructor": false, "invocations": ["info", "assertEquals", "getBeanClass", "getBean"]}, "focal_class": {"identifier": "SpringContext", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = Logger.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private XPathWrapperFactory xpfact\n            = new XPathWrapperFactory(CacheType.SIMPLE)\n              .bindNamespace(\"b\",   \"http://www.springframework.org/schema/beans\")\n              .bindNamespace(\"ctx\", \"http://www.springframework.org/schema/context\");", "modifier": "private", "type": "XPathWrapperFactory", "declarator": "xpfact\n            = new XPathWrapperFactory(CacheType.SIMPLE)\n              .bindNamespace(\"b\",   \"http://www.springframework.org/schema/beans\")\n              .bindNamespace(\"ctx\", \"http://www.springframework.org/schema/context\")", "var_name": "xpfact"}, {"original_string": "private Map<String,BeanDefinition> beanDefinitions       = new HashMap<String,BeanDefinition>();", "modifier": "private", "type": "Map<String,BeanDefinition>", "declarator": "beanDefinitions       = new HashMap<String,BeanDefinition>()", "var_name": "beanDefinitions"}, {"original_string": "private Map<String,BeanDefinition> beanDefinitionsById   = new HashMap<String,BeanDefinition>();", "modifier": "private", "type": "Map<String,BeanDefinition>", "declarator": "beanDefinitionsById   = new HashMap<String,BeanDefinition>()", "var_name": "beanDefinitionsById"}, {"original_string": "private Map<String,BeanDefinition> beanDefinitionsByName = new HashMap<String,BeanDefinition>();", "modifier": "private", "type": "Map<String,BeanDefinition>", "declarator": "beanDefinitionsByName = new HashMap<String,BeanDefinition>()", "var_name": "beanDefinitionsByName"}], "methods": [{"identifier": "SpringContext", "parameters": "(WarMachine war, String contextLocation)", "modifiers": "public", "return": "", "signature": " SpringContext(WarMachine war, String contextLocation)", "full_signature": "public  SpringContext(WarMachine war, String contextLocation)", "class_method_signature": "SpringContext.SpringContext(WarMachine war, String contextLocation)", "testcase": false, "constructor": true}, {"identifier": "SpringContext", "parameters": "(SpringContext parent, WarMachine war, String contextLocation)", "modifiers": "public", "return": "", "signature": " SpringContext(SpringContext parent, WarMachine war, String contextLocation)", "full_signature": "public  SpringContext(SpringContext parent, WarMachine war, String contextLocation)", "class_method_signature": "SpringContext.SpringContext(SpringContext parent, WarMachine war, String contextLocation)", "testcase": false, "constructor": true}, {"identifier": "getBeans", "parameters": "()", "modifiers": "public", "return": "Map<String,BeanDefinition>", "signature": "Map<String,BeanDefinition> getBeans()", "full_signature": "public Map<String,BeanDefinition> getBeans()", "class_method_signature": "SpringContext.getBeans()", "testcase": false, "constructor": false}, {"identifier": "getBean", "parameters": "(String name)", "modifiers": "public", "return": "BeanDefinition", "signature": "BeanDefinition getBean(String name)", "full_signature": "public BeanDefinition getBean(String name)", "class_method_signature": "SpringContext.getBean(String name)", "testcase": false, "constructor": false}, {"identifier": "getBeansByClass", "parameters": "(String className)", "modifiers": "public", "return": "List<BeanDefinition>", "signature": "List<BeanDefinition> getBeansByClass(String className)", "full_signature": "public List<BeanDefinition> getBeansByClass(String className)", "class_method_signature": "SpringContext.getBeansByClass(String className)", "testcase": false, "constructor": false}, {"identifier": "parseContextFile", "parameters": "(WarMachine war, String file, String baseDir)", "modifiers": "private", "return": "Document", "signature": "Document parseContextFile(WarMachine war, String file, String baseDir)", "full_signature": "private Document parseContextFile(WarMachine war, String file, String baseDir)", "class_method_signature": "SpringContext.parseContextFile(WarMachine war, String file, String baseDir)", "testcase": false, "constructor": false}, {"identifier": "processImports", "parameters": "(WarMachine war, String origFile, Document dom)", "modifiers": "private", "return": "void", "signature": "void processImports(WarMachine war, String origFile, Document dom)", "full_signature": "private void processImports(WarMachine war, String origFile, Document dom)", "class_method_signature": "SpringContext.processImports(WarMachine war, String origFile, Document dom)", "testcase": false, "constructor": false}, {"identifier": "processXmlConfig", "parameters": "(String filename, Document dom)", "modifiers": "private", "return": "void", "signature": "void processXmlConfig(String filename, Document dom)", "full_signature": "private void processXmlConfig(String filename, Document dom)", "class_method_signature": "SpringContext.processXmlConfig(String filename, Document dom)", "testcase": false, "constructor": false}, {"identifier": "processComponentScans", "parameters": "(WarMachine war, Document dom)", "modifiers": "private", "return": "void", "signature": "void processComponentScans(WarMachine war, Document dom)", "full_signature": "private void processComponentScans(WarMachine war, Document dom)", "class_method_signature": "SpringContext.processComponentScans(WarMachine war, Document dom)", "testcase": false, "constructor": false}, {"identifier": "getComponentScans", "parameters": "(Document dom)", "modifiers": "private", "return": "List<ClasspathScanner>", "signature": "List<ClasspathScanner> getComponentScans(Document dom)", "full_signature": "private List<ClasspathScanner> getComponentScans(Document dom)", "class_method_signature": "SpringContext.getComponentScans(Document dom)", "testcase": false, "constructor": false}, {"identifier": "addBeanDefinition", "parameters": "(BeanDefinition def)", "modifiers": "private", "return": "void", "signature": "void addBeanDefinition(BeanDefinition def)", "full_signature": "private void addBeanDefinition(BeanDefinition def)", "class_method_signature": "SpringContext.addBeanDefinition(BeanDefinition def)", "testcase": false, "constructor": false}], "file": "lib-spring/src/main/java/com/kdgregory/pathfinder/spring/context/SpringContext.java"}, "focal_method": {"identifier": "getBean", "parameters": "(String name)", "modifiers": "public", "return": "BeanDefinition", "body": "public BeanDefinition getBean(String name)\n    {\n        BeanDefinition def = beanDefinitionsById.get(name);\n        if (def == null)\n            def = beanDefinitionsByName.get(name);\n\n        return def;\n    }", "signature": "BeanDefinition getBean(String name)", "full_signature": "public BeanDefinition getBean(String name)", "class_method_signature": "SpringContext.getBean(String name)", "testcase": false, "constructor": false, "invocations": ["get", "get"]}, "repository": {"repo_id": 3744706, "url": "https://github.com/kdgregory/pathfinder", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 471, "license": "licensed"}}