{"test_class": {"identifier": "TestResourceLoader", "superclass": "extends AbstractSpringTestcase", "interfaces": "", "fields": [{"original_string": "private static WarMachine war;", "modifier": "private static", "type": "WarMachine", "declarator": "war", "var_name": "war"}, {"original_string": "private InputStream in;", "modifier": "private", "type": "InputStream", "declarator": "in", "var_name": "in"}], "file": "lib-spring/src/test/java/com/kdgregory/pathfinder/spring/context/TestResourceLoader.java"}, "test_case": {"identifier": "testFileAbsolutePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFileAbsolutePath() throws Exception\n    {\n        logger.info(\"testFileAbsolutePath()\");\n\n        ResourceLoader loader = new ResourceLoader(null);\n\n        File file = new File(\"src/test/resources/contexts/propContext.xml\");\n        in = loader.getResourceAsStream(\"file:\" + file.getAbsolutePath());\n        assertNotNull(\"returned resource\", in);\n\n        Document dom = ParseUtil.parse(new InputSource(in));\n\n        String testValue = new XPathWrapper(\"/b:beans/b:bean/b:property[@name='propAsRefId']/@ref\")\n                           .bindNamespace(\"b\", \"http://www.springframework.org/schema/beans\")\n                           .evaluateAsString(dom);\n        assertEquals(\"fingerprint on loaded resource\", \"example\", testValue);\n    }", "signature": "void testFileAbsolutePath()", "full_signature": "@Test public void testFileAbsolutePath()", "class_method_signature": "TestResourceLoader.testFileAbsolutePath()", "testcase": true, "constructor": false, "invocations": ["info", "getResourceAsStream", "getAbsolutePath", "assertNotNull", "parse", "evaluateAsString", "bindNamespace", "assertEquals"]}, "focal_class": {"identifier": "ResourceLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WarMachine war;", "modifier": "private", "type": "WarMachine", "declarator": "war", "var_name": "war"}, {"original_string": "private String baseDir;", "modifier": "private", "type": "String", "declarator": "baseDir", "var_name": "baseDir"}], "methods": [{"identifier": "ResourceLoader", "parameters": "(WarMachine war)", "modifiers": "public", "return": "", "signature": " ResourceLoader(WarMachine war)", "full_signature": "public  ResourceLoader(WarMachine war)", "class_method_signature": "ResourceLoader.ResourceLoader(WarMachine war)", "testcase": false, "constructor": true}, {"identifier": "ResourceLoader", "parameters": "(WarMachine war, String baseDir)", "modifiers": "public", "return": "", "signature": " ResourceLoader(WarMachine war, String baseDir)", "full_signature": "public  ResourceLoader(WarMachine war, String baseDir)", "class_method_signature": "ResourceLoader.ResourceLoader(WarMachine war, String baseDir)", "testcase": false, "constructor": true}, {"identifier": "getResourceAsStream", "parameters": "(String name)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getResourceAsStream(String name)", "full_signature": "public InputStream getResourceAsStream(String name)", "class_method_signature": "ResourceLoader.getResourceAsStream(String name)", "testcase": false, "constructor": false}, {"identifier": "decomposeResourceReferences", "parameters": "(String resourceConfig)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> decomposeResourceReferences(String resourceConfig)", "full_signature": "public static List<String> decomposeResourceReferences(String resourceConfig)", "class_method_signature": "ResourceLoader.decomposeResourceReferences(String resourceConfig)", "testcase": false, "constructor": false}, {"identifier": "openClasspathResource", "parameters": "(String name)", "modifiers": "public", "return": "InputStream", "signature": "InputStream openClasspathResource(String name)", "full_signature": "public InputStream openClasspathResource(String name)", "class_method_signature": "ResourceLoader.openClasspathResource(String name)", "testcase": false, "constructor": false}, {"identifier": "openFileResource", "parameters": "(String name)", "modifiers": "public", "return": "InputStream", "signature": "InputStream openFileResource(String name)", "full_signature": "public InputStream openFileResource(String name)", "class_method_signature": "ResourceLoader.openFileResource(String name)", "testcase": false, "constructor": false}, {"identifier": "openWarResource", "parameters": "(String name)", "modifiers": "public", "return": "InputStream", "signature": "InputStream openWarResource(String name)", "full_signature": "public InputStream openWarResource(String name)", "class_method_signature": "ResourceLoader.openWarResource(String name)", "testcase": false, "constructor": false}], "file": "lib-spring/src/main/java/com/kdgregory/pathfinder/spring/context/ResourceLoader.java"}, "focal_method": {"identifier": "getResourceAsStream", "parameters": "(String name)", "modifiers": "public", "return": "InputStream", "body": "public InputStream getResourceAsStream(String name)\n    throws IOException\n    {\n        if (name.startsWith(\"classpath:\"))\n            return openClasspathResource(name);\n        else if (name.startsWith(\"file:\"))\n            return openFileResource(name);\n        else\n            return openWarResource(name);\n    }", "signature": "InputStream getResourceAsStream(String name)", "full_signature": "public InputStream getResourceAsStream(String name)", "class_method_signature": "ResourceLoader.getResourceAsStream(String name)", "testcase": false, "constructor": false, "invocations": ["startsWith", "openClasspathResource", "startsWith", "openFileResource", "openWarResource"]}, "repository": {"repo_id": 3744706, "url": "https://github.com/kdgregory/pathfinder", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 471, "license": "licensed"}}