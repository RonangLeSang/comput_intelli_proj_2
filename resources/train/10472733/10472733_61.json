{"test_class": {"identifier": "EncounterControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EncounterController encounterController;", "modifier": "private", "type": "EncounterController", "declarator": "encounterController", "var_name": "encounterController"}, {"original_string": "private LastSyncTimeService lastSyncTimeService;", "modifier": "private", "type": "LastSyncTimeService", "declarator": "lastSyncTimeService", "var_name": "lastSyncTimeService"}, {"original_string": "private EncounterService encounterService;", "modifier": "private", "type": "EncounterService", "declarator": "encounterService", "var_name": "encounterService"}, {"original_string": "private SntpService sntpService;", "modifier": "private", "type": "SntpService", "declarator": "sntpService", "var_name": "sntpService"}, {"original_string": "private String activeSetupConfigUuid;", "modifier": "private", "type": "String", "declarator": "activeSetupConfigUuid", "var_name": "activeSetupConfigUuid"}], "file": "app/src/test/java/com/muzima/controller/EncounterControllerTest.java"}, "test_case": {"identifier": "shouldUseTheLastSyncTimeWhenDownloadingEncounters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUseTheLastSyncTimeWhenDownloadingEncounters() throws Exception, EncounterController.DownloadEncounterException {\n        Date lastSyncDate = mock(Date.class);\n        when(lastSyncTimeService.getLastSyncTimeFor(DOWNLOAD_ENCOUNTERS,\"patientUuid1,patientUuid2\")).thenReturn(lastSyncDate);\n\n        List<String> patientUuids = asList(\"patientUuid1\", \"patientUuid2\");\n        encounterController.downloadEncountersByPatientUuids(patientUuids, activeSetupConfigUuid);\n        verify(encounterService, never()).downloadEncountersByPatientUuids(anyList());\n        verify(encounterService).downloadEncountersByPatientUuidsAndSyncDateAndSetupConfig(patientUuids, lastSyncDate, activeSetupConfigUuid);\n    }", "signature": "void shouldUseTheLastSyncTimeWhenDownloadingEncounters()", "full_signature": "@Test public void shouldUseTheLastSyncTimeWhenDownloadingEncounters()", "class_method_signature": "EncounterControllerTest.shouldUseTheLastSyncTimeWhenDownloadingEncounters()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getLastSyncTimeFor", "asList", "downloadEncountersByPatientUuids", "downloadEncountersByPatientUuids", "verify", "never", "anyList", "downloadEncountersByPatientUuidsAndSyncDateAndSetupConfig", "verify"]}, "focal_class": {"identifier": "EncounterController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EncounterService encounterService;", "modifier": "private final", "type": "EncounterService", "declarator": "encounterService", "var_name": "encounterService"}, {"original_string": "private final LastSyncTimeService lastSyncTimeService;", "modifier": "private final", "type": "LastSyncTimeService", "declarator": "lastSyncTimeService", "var_name": "lastSyncTimeService"}, {"original_string": "private final SntpService sntpService;", "modifier": "private final", "type": "SntpService", "declarator": "sntpService", "var_name": "sntpService"}], "methods": [{"identifier": "EncounterController", "parameters": "(EncounterService encounterService, LastSyncTimeService lastSyncTimeService, SntpService sntpService)", "modifiers": "public", "return": "", "signature": " EncounterController(EncounterService encounterService, LastSyncTimeService lastSyncTimeService, SntpService sntpService)", "full_signature": "public  EncounterController(EncounterService encounterService, LastSyncTimeService lastSyncTimeService, SntpService sntpService)", "class_method_signature": "EncounterController.EncounterController(EncounterService encounterService, LastSyncTimeService lastSyncTimeService, SntpService sntpService)", "testcase": false, "constructor": true}, {"identifier": "replaceEncounters", "parameters": "(List<Encounter> allEncounters)", "modifiers": "public", "return": "void", "signature": "void replaceEncounters(List<Encounter> allEncounters)", "full_signature": "public void replaceEncounters(List<Encounter> allEncounters)", "class_method_signature": "EncounterController.replaceEncounters(List<Encounter> allEncounters)", "testcase": false, "constructor": false}, {"identifier": "getEncountersCountByPatient", "parameters": "(String patientUuid)", "modifiers": "public", "return": "int", "signature": "int getEncountersCountByPatient(String patientUuid)", "full_signature": "public int getEncountersCountByPatient(String patientUuid)", "class_method_signature": "EncounterController.getEncountersCountByPatient(String patientUuid)", "testcase": false, "constructor": false}, {"identifier": "getEncountersByPatientUuid", "parameters": "(String patientUuid)", "modifiers": "public", "return": "List<Encounter>", "signature": "List<Encounter> getEncountersByPatientUuid(String patientUuid)", "full_signature": "public List<Encounter> getEncountersByPatientUuid(String patientUuid)", "class_method_signature": "EncounterController.getEncountersByPatientUuid(String patientUuid)", "testcase": false, "constructor": false}, {"identifier": "downloadEncountersByPatientUuids", "parameters": "(List<String> patientUuids, String activeSetupConfigUuid)", "modifiers": "public", "return": "List<Encounter>", "signature": "List<Encounter> downloadEncountersByPatientUuids(List<String> patientUuids, String activeSetupConfigUuid)", "full_signature": "public List<Encounter> downloadEncountersByPatientUuids(List<String> patientUuids, String activeSetupConfigUuid)", "class_method_signature": "EncounterController.downloadEncountersByPatientUuids(List<String> patientUuids, String activeSetupConfigUuid)", "testcase": false, "constructor": false}, {"identifier": "downloadEncounters", "parameters": "(List<String> patientUuids, Date lastSyncTime, String activeSetupConfigUuid)", "modifiers": "private", "return": "List<Encounter>", "signature": "List<Encounter> downloadEncounters(List<String> patientUuids, Date lastSyncTime, String activeSetupConfigUuid)", "full_signature": "private List<Encounter> downloadEncounters(List<String> patientUuids, Date lastSyncTime, String activeSetupConfigUuid)", "class_method_signature": "EncounterController.downloadEncounters(List<String> patientUuids, Date lastSyncTime, String activeSetupConfigUuid)", "testcase": false, "constructor": false}, {"identifier": "updateEncountersAndReturnPrevPatientUUIDs", "parameters": "(List<String> patientUuids, List<Encounter> encounters,\n                                                                   List<String> previousPatientsUuid, String activeSetupConfigUuid)", "modifiers": "private", "return": "List<String>", "signature": "List<String> updateEncountersAndReturnPrevPatientUUIDs(List<String> patientUuids, List<Encounter> encounters,\n                                                                   List<String> previousPatientsUuid, String activeSetupConfigUuid)", "full_signature": "private List<String> updateEncountersAndReturnPrevPatientUUIDs(List<String> patientUuids, List<Encounter> encounters,\n                                                                   List<String> previousPatientsUuid, String activeSetupConfigUuid)", "class_method_signature": "EncounterController.updateEncountersAndReturnPrevPatientUUIDs(List<String> patientUuids, List<Encounter> encounters,\n                                                                   List<String> previousPatientsUuid, String activeSetupConfigUuid)", "testcase": false, "constructor": false}, {"identifier": "hasThisCallHappenedBefore", "parameters": "(Date lastSyncTime)", "modifiers": "private", "return": "boolean", "signature": "boolean hasThisCallHappenedBefore(Date lastSyncTime)", "full_signature": "private boolean hasThisCallHappenedBefore(Date lastSyncTime)", "class_method_signature": "EncounterController.hasThisCallHappenedBefore(Date lastSyncTime)", "testcase": false, "constructor": false}, {"identifier": "hasAnyDownloadHappened", "parameters": "(LastSyncTime lastSyncTimeRecorded)", "modifiers": "private", "return": "boolean", "signature": "boolean hasAnyDownloadHappened(LastSyncTime lastSyncTimeRecorded)", "full_signature": "private boolean hasAnyDownloadHappened(LastSyncTime lastSyncTimeRecorded)", "class_method_signature": "EncounterController.hasAnyDownloadHappened(LastSyncTime lastSyncTimeRecorded)", "testcase": false, "constructor": false}, {"identifier": "getUpdatedParam", "parameters": "(List<String> patientUuids, List<String> previousPatientsUuid)", "modifiers": "private", "return": "String", "signature": "String getUpdatedParam(List<String> patientUuids, List<String> previousPatientsUuid)", "full_signature": "private String getUpdatedParam(List<String> patientUuids, List<String> previousPatientsUuid)", "class_method_signature": "EncounterController.getUpdatedParam(List<String> patientUuids, List<String> previousPatientsUuid)", "testcase": false, "constructor": false}, {"identifier": "saveEncounters", "parameters": "(List<Encounter> encounters)", "modifiers": "public", "return": "void", "signature": "void saveEncounters(List<Encounter> encounters)", "full_signature": "public void saveEncounters(List<Encounter> encounters)", "class_method_signature": "EncounterController.saveEncounters(List<Encounter> encounters)", "testcase": false, "constructor": false}, {"identifier": "getEncounterTypes", "parameters": "()", "modifiers": "public", "return": "List<EncounterType>", "signature": "List<EncounterType> getEncounterTypes()", "full_signature": "public List<EncounterType> getEncounterTypes()", "class_method_signature": "EncounterController.getEncounterTypes()", "testcase": false, "constructor": false}, {"identifier": "getEncountersByEncounterTypeNameAndPatientUuid", "parameters": "(String name,String patientUuid)", "modifiers": "public", "return": "List<Encounter>", "signature": "List<Encounter> getEncountersByEncounterTypeNameAndPatientUuid(String name,String patientUuid)", "full_signature": "public List<Encounter> getEncountersByEncounterTypeNameAndPatientUuid(String name,String patientUuid)", "class_method_signature": "EncounterController.getEncountersByEncounterTypeNameAndPatientUuid(String name,String patientUuid)", "testcase": false, "constructor": false}, {"identifier": "getEncountersByEncounterTypeUuidAndPatientUuid", "parameters": "(String encounterTypeUuid,String patientUuid)", "modifiers": "public", "return": "List<Encounter>", "signature": "List<Encounter> getEncountersByEncounterTypeUuidAndPatientUuid(String encounterTypeUuid,String patientUuid)", "full_signature": "public List<Encounter> getEncountersByEncounterTypeUuidAndPatientUuid(String encounterTypeUuid,String patientUuid)", "class_method_signature": "EncounterController.getEncountersByEncounterTypeUuidAndPatientUuid(String encounterTypeUuid,String patientUuid)", "testcase": false, "constructor": false}, {"identifier": "getEncountersByEncounterTypeIdAndPatientUuid", "parameters": "(int encounterTypeId,String patientUuid)", "modifiers": "public", "return": "List<Encounter>", "signature": "List<Encounter> getEncountersByEncounterTypeIdAndPatientUuid(int encounterTypeId,String patientUuid)", "full_signature": "public List<Encounter> getEncountersByEncounterTypeIdAndPatientUuid(int encounterTypeId,String patientUuid)", "class_method_signature": "EncounterController.getEncountersByEncounterTypeIdAndPatientUuid(int encounterTypeId,String patientUuid)", "testcase": false, "constructor": false}, {"identifier": "getEncounterByUuid", "parameters": "(String encounterUuid)", "modifiers": "public", "return": "Encounter", "signature": "Encounter getEncounterByUuid(String encounterUuid)", "full_signature": "public Encounter getEncounterByUuid(String encounterUuid)", "class_method_signature": "EncounterController.getEncounterByUuid(String encounterUuid)", "testcase": false, "constructor": false}, {"identifier": "deleteEncounters", "parameters": "(List<Encounter> encounters)", "modifiers": "public", "return": "void", "signature": "void deleteEncounters(List<Encounter> encounters)", "full_signature": "public void deleteEncounters(List<Encounter> encounters)", "class_method_signature": "EncounterController.deleteEncounters(List<Encounter> encounters)", "testcase": false, "constructor": false}, {"identifier": "saveEncounter", "parameters": "(Encounter encounter)", "modifiers": "public", "return": "void", "signature": "void saveEncounter(Encounter encounter)", "full_signature": "public void saveEncounter(Encounter encounter)", "class_method_signature": "EncounterController.saveEncounter(Encounter encounter)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/muzima/controller/EncounterController.java"}, "focal_method": {"identifier": "downloadEncountersByPatientUuids", "parameters": "(List<String> patientUuids, String activeSetupConfigUuid)", "modifiers": "public", "return": "List<Encounter>", "body": "public List<Encounter> downloadEncountersByPatientUuids(List<String> patientUuids, String activeSetupConfigUuid) throws DownloadEncounterException {\n        try {\n            String paramSignature = StringUtils.getCommaSeparatedStringFromList(patientUuids);\n            Date lastSyncTime = lastSyncTimeService.getLastSyncTimeFor(DOWNLOAD_ENCOUNTERS, paramSignature);\n            List<Encounter> encounters = new ArrayList<>();\n            List<String> previousPatientsUuid = new ArrayList<>();\n            if (hasThisCallHappenedBefore(lastSyncTime)) {\n                encounters.addAll(downloadEncounters(patientUuids, lastSyncTime, activeSetupConfigUuid));\n            } else {\n                //ToDo: Revise this while working on Encounter Delta download\n                //previousPatientsUuid = updateEncountersAndReturnPrevPatientUUIDs(patientUuids, encounters, previousPatientsUuid);\n                encounters.addAll(downloadEncounters(patientUuids, null, activeSetupConfigUuid));\n            }\n            LastSyncTime newLastSyncTime = new LastSyncTime(DOWNLOAD_ENCOUNTERS, sntpService.getTimePerDeviceTimeZone(), paramSignature);\n            lastSyncTimeService.saveLastSyncTime(newLastSyncTime);\n            return encounters;\n        } catch (IOException e) {\n            throw new DownloadEncounterException(e);\n        }\n    }", "signature": "List<Encounter> downloadEncountersByPatientUuids(List<String> patientUuids, String activeSetupConfigUuid)", "full_signature": "public List<Encounter> downloadEncountersByPatientUuids(List<String> patientUuids, String activeSetupConfigUuid)", "class_method_signature": "EncounterController.downloadEncountersByPatientUuids(List<String> patientUuids, String activeSetupConfigUuid)", "testcase": false, "constructor": false, "invocations": ["getCommaSeparatedStringFromList", "getLastSyncTimeFor", "hasThisCallHappenedBefore", "addAll", "downloadEncounters", "addAll", "downloadEncounters", "getTimePerDeviceTimeZone", "saveLastSyncTime"]}, "repository": {"repo_id": 10472733, "url": "https://github.com/muzima/muzima-android", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 8, "size": 20746, "license": "licensed"}}