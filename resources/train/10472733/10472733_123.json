{"test_class": {"identifier": "CohortControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CohortController controller;", "modifier": "private", "type": "CohortController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private CohortService cohortService;", "modifier": "private", "type": "CohortService", "declarator": "cohortService", "var_name": "cohortService"}, {"original_string": "private LastSyncTimeService lastSyncTimeService;", "modifier": "private", "type": "LastSyncTimeService", "declarator": "lastSyncTimeService", "var_name": "lastSyncTimeService"}, {"original_string": "private Date anotherMockDate;", "modifier": "private", "type": "Date", "declarator": "anotherMockDate", "var_name": "anotherMockDate"}, {"original_string": "private SntpService sntpService;", "modifier": "private", "type": "SntpService", "declarator": "sntpService", "var_name": "sntpService"}, {"original_string": "private MuzimaApplication muzimaApplication;", "modifier": "private", "type": "MuzimaApplication", "declarator": "muzimaApplication", "var_name": "muzimaApplication"}, {"original_string": "private Date mockDate;", "modifier": "private", "type": "Date", "declarator": "mockDate", "var_name": "mockDate"}], "file": "app/src/test/java/com/muzima/controller/CohortControllerTest.java"}, "test_case": {"identifier": "downloadAllCohorts_shouldReturnDownloadedCohorts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void downloadAllCohorts_shouldReturnDownloadedCohorts() throws CohortController.CohortDownloadException, IOException {\n        List<Cohort> downloadedCohorts = new ArrayList<>();\n        List<Cohort> cohorts = new ArrayList<>();\n        when(cohortService.downloadCohortsByName(StringUtils.EMPTY,null, null)).thenReturn(downloadedCohorts);\n        when(lastSyncTimeService.getLastSyncTimeFor(DOWNLOAD_COHORTS)).thenReturn(null);\n        controller.downloadAllCohorts(null);\n\n        assertThat(controller.downloadAllCohorts(null), is(downloadedCohorts));\n    }", "signature": "void downloadAllCohorts_shouldReturnDownloadedCohorts()", "full_signature": "@Test public void downloadAllCohorts_shouldReturnDownloadedCohorts()", "class_method_signature": "CohortControllerTest.downloadAllCohorts_shouldReturnDownloadedCohorts()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "downloadCohortsByName", "thenReturn", "when", "getLastSyncTimeFor", "downloadAllCohorts", "assertThat", "downloadAllCohorts", "is"]}, "focal_class": {"identifier": "CohortController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CohortService cohortService;", "modifier": "private final", "type": "CohortService", "declarator": "cohortService", "var_name": "cohortService"}, {"original_string": "private final LastSyncTimeService lastSyncTimeService;", "modifier": "private final", "type": "LastSyncTimeService", "declarator": "lastSyncTimeService", "var_name": "lastSyncTimeService"}, {"original_string": "private final SntpService sntpService;", "modifier": "private final", "type": "SntpService", "declarator": "sntpService", "var_name": "sntpService"}, {"original_string": "private final MuzimaApplication muzimaApplication;", "modifier": "private final", "type": "MuzimaApplication", "declarator": "muzimaApplication", "var_name": "muzimaApplication"}], "methods": [{"identifier": "CohortController", "parameters": "(CohortService cohortService, LastSyncTimeService lastSyncTimeService, SntpService sntpService, MuzimaApplication muzimaApplication)", "modifiers": "public", "return": "", "signature": " CohortController(CohortService cohortService, LastSyncTimeService lastSyncTimeService, SntpService sntpService, MuzimaApplication muzimaApplication)", "full_signature": "public  CohortController(CohortService cohortService, LastSyncTimeService lastSyncTimeService, SntpService sntpService, MuzimaApplication muzimaApplication)", "class_method_signature": "CohortController.CohortController(CohortService cohortService, LastSyncTimeService lastSyncTimeService, SntpService sntpService, MuzimaApplication muzimaApplication)", "testcase": false, "constructor": true}, {"identifier": "getDefaultLocation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultLocation()", "full_signature": "public String getDefaultLocation()", "class_method_signature": "CohortController.getDefaultLocation()", "testcase": false, "constructor": false}, {"identifier": "getLoggedInProvider", "parameters": "()", "modifiers": "public", "return": "Provider", "signature": "Provider getLoggedInProvider()", "full_signature": "public Provider getLoggedInProvider()", "class_method_signature": "CohortController.getLoggedInProvider()", "testcase": false, "constructor": false}, {"identifier": "getAllCohorts", "parameters": "()", "modifiers": "public", "return": "List<Cohort>", "signature": "List<Cohort> getAllCohorts()", "full_signature": "public List<Cohort> getAllCohorts()", "class_method_signature": "CohortController.getAllCohorts()", "testcase": false, "constructor": false}, {"identifier": "countAllCohorts", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int countAllCohorts()", "full_signature": "public int countAllCohorts()", "class_method_signature": "CohortController.countAllCohorts()", "testcase": false, "constructor": false}, {"identifier": "downloadAllCohorts", "parameters": "(String defaultLocation)", "modifiers": "public", "return": "List<Cohort>", "signature": "List<Cohort> downloadAllCohorts(String defaultLocation)", "full_signature": "public List<Cohort> downloadAllCohorts(String defaultLocation)", "class_method_signature": "CohortController.downloadAllCohorts(String defaultLocation)", "testcase": false, "constructor": false}, {"identifier": "downloadCohortData", "parameters": "(String[] cohortUuids, String defaulLocation)", "modifiers": "public", "return": "List<CohortData>", "signature": "List<CohortData> downloadCohortData(String[] cohortUuids, String defaulLocation)", "full_signature": "public List<CohortData> downloadCohortData(String[] cohortUuids, String defaulLocation)", "class_method_signature": "CohortController.downloadCohortData(String[] cohortUuids, String defaulLocation)", "testcase": false, "constructor": false}, {"identifier": "downloadRemovedCohortData", "parameters": "(String[] cohortUuids)", "modifiers": "public", "return": "List<CohortData>", "signature": "List<CohortData> downloadRemovedCohortData(String[] cohortUuids)", "full_signature": "public List<CohortData> downloadRemovedCohortData(String[] cohortUuids)", "class_method_signature": "CohortController.downloadRemovedCohortData(String[] cohortUuids)", "testcase": false, "constructor": false}, {"identifier": "downloadCohortDataByUuid", "parameters": "(String uuid,String defaultLocation)", "modifiers": "public", "return": "CohortData", "signature": "CohortData downloadCohortDataByUuid(String uuid,String defaultLocation)", "full_signature": "public CohortData downloadCohortDataByUuid(String uuid,String defaultLocation)", "class_method_signature": "CohortController.downloadCohortDataByUuid(String uuid,String defaultLocation)", "testcase": false, "constructor": false}, {"identifier": "downloadRemovedCohortDataByUuid", "parameters": "(String uuid)", "modifiers": "public", "return": "CohortData", "signature": "CohortData downloadRemovedCohortDataByUuid(String uuid)", "full_signature": "public CohortData downloadRemovedCohortDataByUuid(String uuid)", "class_method_signature": "CohortController.downloadRemovedCohortDataByUuid(String uuid)", "testcase": false, "constructor": false}, {"identifier": "downloadCohortsByPrefix", "parameters": "(List<String> cohortPrefixes,String defaultLocation)", "modifiers": "public", "return": "List<Cohort>", "signature": "List<Cohort> downloadCohortsByPrefix(List<String> cohortPrefixes,String defaultLocation)", "full_signature": "public List<Cohort> downloadCohortsByPrefix(List<String> cohortPrefixes,String defaultLocation)", "class_method_signature": "CohortController.downloadCohortsByPrefix(List<String> cohortPrefixes,String defaultLocation)", "testcase": false, "constructor": false}, {"identifier": "addUniqueCohorts", "parameters": "(List<Cohort> filteredCohorts, List<Cohort> filteredCohortsForPrefix)", "modifiers": "private", "return": "void", "signature": "void addUniqueCohorts(List<Cohort> filteredCohorts, List<Cohort> filteredCohortsForPrefix)", "full_signature": "private void addUniqueCohorts(List<Cohort> filteredCohorts, List<Cohort> filteredCohortsForPrefix)", "class_method_signature": "CohortController.addUniqueCohorts(List<Cohort> filteredCohorts, List<Cohort> filteredCohortsForPrefix)", "testcase": false, "constructor": false}, {"identifier": "filterCohortsByPrefix", "parameters": "(List<Cohort> cohorts, String cohortPrefix)", "modifiers": "private", "return": "List<Cohort>", "signature": "List<Cohort> filterCohortsByPrefix(List<Cohort> cohorts, String cohortPrefix)", "full_signature": "private List<Cohort> filterCohortsByPrefix(List<Cohort> cohorts, String cohortPrefix)", "class_method_signature": "CohortController.filterCohortsByPrefix(List<Cohort> cohorts, String cohortPrefix)", "testcase": false, "constructor": false}, {"identifier": "saveAllCohorts", "parameters": "(List<Cohort> cohorts)", "modifiers": "public", "return": "void", "signature": "void saveAllCohorts(List<Cohort> cohorts)", "full_signature": "public void saveAllCohorts(List<Cohort> cohorts)", "class_method_signature": "CohortController.saveAllCohorts(List<Cohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "saveOrUpdateCohorts", "parameters": "(List<Cohort> cohorts)", "modifiers": "public", "return": "void", "signature": "void saveOrUpdateCohorts(List<Cohort> cohorts)", "full_signature": "public void saveOrUpdateCohorts(List<Cohort> cohorts)", "class_method_signature": "CohortController.saveOrUpdateCohorts(List<Cohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "deleteAllCohorts", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteAllCohorts()", "full_signature": "public void deleteAllCohorts()", "class_method_signature": "CohortController.deleteAllCohorts()", "testcase": false, "constructor": false}, {"identifier": "deleteCohorts", "parameters": "(List<Cohort> cohorts)", "modifiers": "public", "return": "void", "signature": "void deleteCohorts(List<Cohort> cohorts)", "full_signature": "public void deleteCohorts(List<Cohort> cohorts)", "class_method_signature": "CohortController.deleteCohorts(List<Cohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "getSyncedCohorts", "parameters": "()", "modifiers": "public", "return": "List<Cohort>", "signature": "List<Cohort> getSyncedCohorts()", "full_signature": "public List<Cohort> getSyncedCohorts()", "class_method_signature": "CohortController.getSyncedCohorts()", "testcase": false, "constructor": false}, {"identifier": "isDownloaded", "parameters": "(Cohort cohort)", "modifiers": "public", "return": "boolean", "signature": "boolean isDownloaded(Cohort cohort)", "full_signature": "public boolean isDownloaded(Cohort cohort)", "class_method_signature": "CohortController.isDownloaded(Cohort cohort)", "testcase": false, "constructor": false}, {"identifier": "isUpdateAvailable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUpdateAvailable()", "full_signature": "public boolean isUpdateAvailable()", "class_method_signature": "CohortController.isUpdateAvailable()", "testcase": false, "constructor": false}, {"identifier": "getCohortsWithPendingUpdates", "parameters": "()", "modifiers": "public", "return": "List<Cohort>", "signature": "List<Cohort> getCohortsWithPendingUpdates()", "full_signature": "public List<Cohort> getCohortsWithPendingUpdates()", "class_method_signature": "CohortController.getCohortsWithPendingUpdates()", "testcase": false, "constructor": false}, {"identifier": "markAsUpToDate", "parameters": "(String[] cohortUuids)", "modifiers": "public", "return": "void", "signature": "void markAsUpToDate(String[] cohortUuids)", "full_signature": "public void markAsUpToDate(String[] cohortUuids)", "class_method_signature": "CohortController.markAsUpToDate(String[] cohortUuids)", "testcase": false, "constructor": false}, {"identifier": "setSyncStatus", "parameters": "(String[] cohortUuids)", "modifiers": "public", "return": "void", "signature": "void setSyncStatus(String[] cohortUuids)", "full_signature": "public void setSyncStatus(String[] cohortUuids)", "class_method_signature": "CohortController.setSyncStatus(String[] cohortUuids)", "testcase": false, "constructor": false}, {"identifier": "countSyncedCohorts", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int countSyncedCohorts()", "full_signature": "public int countSyncedCohorts()", "class_method_signature": "CohortController.countSyncedCohorts()", "testcase": false, "constructor": false}, {"identifier": "deleteAllCohortMembers", "parameters": "(String cohortUuid)", "modifiers": "public", "return": "void", "signature": "void deleteAllCohortMembers(String cohortUuid)", "full_signature": "public void deleteAllCohortMembers(String cohortUuid)", "class_method_signature": "CohortController.deleteAllCohortMembers(String cohortUuid)", "testcase": false, "constructor": false}, {"identifier": "addCohortMembers", "parameters": "(List<CohortMember> cohortMembers)", "modifiers": "public", "return": "void", "signature": "void addCohortMembers(List<CohortMember> cohortMembers)", "full_signature": "public void addCohortMembers(List<CohortMember> cohortMembers)", "class_method_signature": "CohortController.addCohortMembers(List<CohortMember> cohortMembers)", "testcase": false, "constructor": false}, {"identifier": "countCohortMembers", "parameters": "(Cohort cohort)", "modifiers": "public", "return": "int", "signature": "int countCohortMembers(Cohort cohort)", "full_signature": "public int countCohortMembers(Cohort cohort)", "class_method_signature": "CohortController.countCohortMembers(Cohort cohort)", "testcase": false, "constructor": false}, {"identifier": "downloadCohortByName", "parameters": "(String name)", "modifiers": "public", "return": "List<Cohort>", "signature": "List<Cohort> downloadCohortByName(String name)", "full_signature": "public List<Cohort> downloadCohortByName(String name)", "class_method_signature": "CohortController.downloadCohortByName(String name)", "testcase": false, "constructor": false}, {"identifier": "downloadCohortsByUuidList", "parameters": "(String[] uuidList)", "modifiers": "public", "return": "List<Cohort>", "signature": "List<Cohort> downloadCohortsByUuidList(String[] uuidList)", "full_signature": "public List<Cohort> downloadCohortsByUuidList(String[] uuidList)", "class_method_signature": "CohortController.downloadCohortsByUuidList(String[] uuidList)", "testcase": false, "constructor": false}, {"identifier": "getCohortMembershipByPatientUuid", "parameters": "(String patientUuid)", "modifiers": "public", "return": "List<CohortMember>", "signature": "List<CohortMember> getCohortMembershipByPatientUuid(String patientUuid)", "full_signature": "public List<CohortMember> getCohortMembershipByPatientUuid(String patientUuid)", "class_method_signature": "CohortController.getCohortMembershipByPatientUuid(String patientUuid)", "testcase": false, "constructor": false}, {"identifier": "deleteAllCohortMembers", "parameters": "(List<Cohort> allCohorts)", "modifiers": "public", "return": "void", "signature": "void deleteAllCohortMembers(List<Cohort> allCohorts)", "full_signature": "public void deleteAllCohortMembers(List<Cohort> allCohorts)", "class_method_signature": "CohortController.deleteAllCohortMembers(List<Cohort> allCohorts)", "testcase": false, "constructor": false}, {"identifier": "deleteCohortMembers", "parameters": "(List<CohortMember> cohortMembers)", "modifiers": "public", "return": "void", "signature": "void deleteCohortMembers(List<CohortMember> cohortMembers)", "full_signature": "public void deleteCohortMembers(List<CohortMember> cohortMembers)", "class_method_signature": "CohortController.deleteCohortMembers(List<CohortMember> cohortMembers)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/muzima/controller/CohortController.java"}, "focal_method": {"identifier": "downloadAllCohorts", "parameters": "(String defaultLocation)", "modifiers": "public", "return": "List<Cohort>", "body": "public List<Cohort> downloadAllCohorts(String defaultLocation) throws CohortDownloadException {\n        try {\n            Date lastSyncTimeForCohorts = lastSyncTimeService.getLastSyncTimeFor(DOWNLOAD_COHORTS);\n            Provider loggedInProvider = getLoggedInProvider();\n            List<Cohort> allCohorts = cohortService.downloadCohortsByNameAndSyncDate(StringUtils.EMPTY, lastSyncTimeForCohorts, defaultLocation, loggedInProvider);\n            LastSyncTime lastSyncTime = new LastSyncTime(DOWNLOAD_COHORTS, sntpService.getTimePerDeviceTimeZone());\n            lastSyncTimeService.saveLastSyncTime(lastSyncTime);\n            return allCohorts;\n        } catch (IOException e) {\n            throw new CohortDownloadException(e);\n        }\n    }", "signature": "List<Cohort> downloadAllCohorts(String defaultLocation)", "full_signature": "public List<Cohort> downloadAllCohorts(String defaultLocation)", "class_method_signature": "CohortController.downloadAllCohorts(String defaultLocation)", "testcase": false, "constructor": false, "invocations": ["getLastSyncTimeFor", "getLoggedInProvider", "downloadCohortsByNameAndSyncDate", "getTimePerDeviceTimeZone", "saveLastSyncTime"]}, "repository": {"repo_id": 10472733, "url": "https://github.com/muzima/muzima-android", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 8, "size": 20746, "license": "licensed"}}