{"test_class": {"identifier": "HTMLFormDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HTMLFormWebViewActivity formWebViewActivity;", "modifier": "private", "type": "HTMLFormWebViewActivity", "declarator": "formWebViewActivity", "var_name": "formWebViewActivity"}, {"original_string": "private FormData formData;", "modifier": "private", "type": "FormData", "declarator": "formData", "var_name": "formData"}, {"original_string": "private HTMLFormObservationCreator htmlFormObservationCreator;", "modifier": "private", "type": "HTMLFormObservationCreator", "declarator": "htmlFormObservationCreator", "var_name": "htmlFormObservationCreator"}, {"original_string": "private HTMLFormDataStore htmlFormDataStore;", "modifier": "private", "type": "HTMLFormDataStore", "declarator": "htmlFormDataStore", "var_name": "htmlFormDataStore"}, {"original_string": "@Mock\n    private ConceptController conceptController;", "modifier": "@Mock\n    private", "type": "ConceptController", "declarator": "conceptController", "var_name": "conceptController"}, {"original_string": "@Mock\n    private MuzimaSettingController settingController;", "modifier": "@Mock\n    private", "type": "MuzimaSettingController", "declarator": "settingController", "var_name": "settingController"}, {"original_string": "@Mock\n    private ObservationController observationController;", "modifier": "@Mock\n    private", "type": "ObservationController", "declarator": "observationController", "var_name": "observationController"}, {"original_string": "@Mock\n    private EncounterController encounterController;", "modifier": "@Mock\n    private", "type": "EncounterController", "declarator": "encounterController", "var_name": "encounterController"}, {"original_string": "@Mock\n    private SetupConfigurationController setupConfigurationController;", "modifier": "@Mock\n    private", "type": "SetupConfigurationController", "declarator": "setupConfigurationController", "var_name": "setupConfigurationController"}], "file": "app/src/test/java/com/muzima/view/forms/HTMLFormDataStoreTest.java"}, "test_case": {"identifier": "shouldNotParseIncompletedForm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotParseIncompletedForm() throws SetupConfigurationController.SetupConfigurationFetchException {\n        when(formWebViewActivity.getString(anyInt())).thenReturn(\"success\");\n\n        SetupConfigurationTemplate setupConfigurationTemplate = new SetupConfigurationTemplate();\n        setupConfigurationTemplate.setUuid(\"dummySetupConfig\");\n        when(setupConfigurationController.getActiveSetupConfigurationTemplate()).thenReturn(setupConfigurationTemplate);\n\n        String jsonPayLoad = readFile();\n        htmlFormDataStore.saveHTML(jsonPayLoad, Constants.STATUS_INCOMPLETE);\n        verify(htmlFormObservationCreator, times(0)).createAndPersistObservations(jsonPayLoad,formData.getUuid());\n    }", "signature": "void shouldNotParseIncompletedForm()", "full_signature": "@Test public void shouldNotParseIncompletedForm()", "class_method_signature": "HTMLFormDataStoreTest.shouldNotParseIncompletedForm()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getString", "anyInt", "setUuid", "thenReturn", "when", "getActiveSetupConfigurationTemplate", "readFile", "saveHTML", "createAndPersistObservations", "verify", "times", "getUuid"]}, "focal_class": {"identifier": "HTMLFormDataStore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HTMLFormWebViewActivity formWebViewActivity;", "modifier": "private final", "type": "HTMLFormWebViewActivity", "declarator": "formWebViewActivity", "var_name": "formWebViewActivity"}, {"original_string": "private final FormController formController;", "modifier": "private final", "type": "FormController", "declarator": "formController", "var_name": "formController"}, {"original_string": "private final LocationController locationController;", "modifier": "private final", "type": "LocationController", "declarator": "locationController", "var_name": "locationController"}, {"original_string": "private final ConceptController conceptController;", "modifier": "private final", "type": "ConceptController", "declarator": "conceptController", "var_name": "conceptController"}, {"original_string": "private final ObservationController observationController;", "modifier": "private final", "type": "ObservationController", "declarator": "observationController", "var_name": "observationController"}, {"original_string": "private final FormData formData;", "modifier": "private final", "type": "FormData", "declarator": "formData", "var_name": "formData"}, {"original_string": "private final ProviderController providerController;", "modifier": "private final", "type": "ProviderController", "declarator": "providerController", "var_name": "providerController"}, {"original_string": "private final EncounterController encounterController;", "modifier": "private final", "type": "EncounterController", "declarator": "encounterController", "var_name": "encounterController"}, {"original_string": "private final MuzimaApplication application;", "modifier": "private final", "type": "MuzimaApplication", "declarator": "application", "var_name": "application"}, {"original_string": "private final MuzimaSettingController settingController;", "modifier": "private final", "type": "MuzimaSettingController", "declarator": "settingController", "var_name": "settingController"}, {"original_string": "private final CohortController cohortController;", "modifier": "private final", "type": "CohortController", "declarator": "cohortController", "var_name": "cohortController"}, {"original_string": "private final PatientController patientController;", "modifier": "private final", "type": "PatientController", "declarator": "patientController", "var_name": "patientController"}, {"original_string": "private final PersonController personController;", "modifier": "private final", "type": "PersonController", "declarator": "personController", "var_name": "personController"}, {"original_string": "private final Comparator<Observation> observationDateTimeComparator = new Comparator<Observation>() {\n        @Override\n        public int compare(Observation lhs, Observation rhs) {\n            return -lhs.getObservationDatetime().compareTo(rhs.getObservationDatetime());\n        }\n    };", "modifier": "private final", "type": "Comparator<Observation>", "declarator": "observationDateTimeComparator = new Comparator<Observation>() {\n        @Override\n        public int compare(Observation lhs, Observation rhs) {\n            return -lhs.getObservationDatetime().compareTo(rhs.getObservationDatetime());\n        }\n    }", "var_name": "observationDateTimeComparator"}], "methods": [{"identifier": "HTMLFormDataStore", "parameters": "(HTMLFormWebViewActivity formWebViewActivity, FormData formData, boolean isFormReload, MuzimaApplication application)", "modifiers": "public", "return": "", "signature": " HTMLFormDataStore(HTMLFormWebViewActivity formWebViewActivity, FormData formData, boolean isFormReload, MuzimaApplication application)", "full_signature": "public  HTMLFormDataStore(HTMLFormWebViewActivity formWebViewActivity, FormData formData, boolean isFormReload, MuzimaApplication application)", "class_method_signature": "HTMLFormDataStore.HTMLFormDataStore(HTMLFormWebViewActivity formWebViewActivity, FormData formData, boolean isFormReload, MuzimaApplication application)", "testcase": false, "constructor": true}, {"identifier": "getStatus", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getStatus()", "full_signature": "@JavascriptInterface public String getStatus()", "class_method_signature": "HTMLFormDataStore.getStatus()", "testcase": false, "constructor": false}, {"identifier": "saveHTML", "parameters": "(String jsonPayload, String status)", "modifiers": "@JavascriptInterface public", "return": "void", "signature": "void saveHTML(String jsonPayload, String status)", "full_signature": "@JavascriptInterface public void saveHTML(String jsonPayload, String status)", "class_method_signature": "HTMLFormDataStore.saveHTML(String jsonPayload, String status)", "testcase": false, "constructor": false}, {"identifier": "saveHTML", "parameters": "(String jsonPayload, String status, boolean keepFormOpen)", "modifiers": "@JavascriptInterface public", "return": "void", "signature": "void saveHTML(String jsonPayload, String status, boolean keepFormOpen)", "full_signature": "@JavascriptInterface public void saveHTML(String jsonPayload, String status, boolean keepFormOpen)", "class_method_signature": "HTMLFormDataStore.saveHTML(String jsonPayload, String status, boolean keepFormOpen)", "testcase": false, "constructor": false}, {"identifier": "getLocationNamesFromDevice", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getLocationNamesFromDevice()", "full_signature": "@JavascriptInterface public String getLocationNamesFromDevice()", "class_method_signature": "HTMLFormDataStore.getLocationNamesFromDevice()", "testcase": false, "constructor": false}, {"identifier": "getRelationshipTypesFromDevice", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getRelationshipTypesFromDevice()", "full_signature": "@JavascriptInterface public String getRelationshipTypesFromDevice()", "class_method_signature": "HTMLFormDataStore.getRelationshipTypesFromDevice()", "testcase": false, "constructor": false}, {"identifier": "getPatientDetailsFromServerByUuid", "parameters": "(String uuid)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getPatientDetailsFromServerByUuid(String uuid)", "full_signature": "@JavascriptInterface public String getPatientDetailsFromServerByUuid(String uuid)", "class_method_signature": "HTMLFormDataStore.getPatientDetailsFromServerByUuid(String uuid)", "testcase": false, "constructor": false}, {"identifier": "getPersonDetailsFromDeviceByUuid", "parameters": "(String uuid)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getPersonDetailsFromDeviceByUuid(String uuid)", "full_signature": "@JavascriptInterface public String getPersonDetailsFromDeviceByUuid(String uuid)", "class_method_signature": "HTMLFormDataStore.getPersonDetailsFromDeviceByUuid(String uuid)", "testcase": false, "constructor": false}, {"identifier": "searchPersons", "parameters": "(String searchTerm, boolean searchServer)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String searchPersons(String searchTerm, boolean searchServer)", "full_signature": "@JavascriptInterface public String searchPersons(String searchTerm, boolean searchServer)", "class_method_signature": "HTMLFormDataStore.searchPersons(String searchTerm, boolean searchServer)", "testcase": false, "constructor": false}, {"identifier": "searchPersonsLocally", "parameters": "(String searchTerm)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String searchPersonsLocally(String searchTerm)", "full_signature": "@JavascriptInterface public String searchPersonsLocally(String searchTerm)", "class_method_signature": "HTMLFormDataStore.searchPersonsLocally(String searchTerm)", "testcase": false, "constructor": false}, {"identifier": "searchPatientOnServer", "parameters": "(String searchTerm)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String searchPatientOnServer(String searchTerm)", "full_signature": "@JavascriptInterface public String searchPatientOnServer(String searchTerm)", "class_method_signature": "HTMLFormDataStore.searchPatientOnServer(String searchTerm)", "testcase": false, "constructor": false}, {"identifier": "getProviderNamesFromDevice", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getProviderNamesFromDevice()", "full_signature": "@JavascriptInterface public String getProviderNamesFromDevice()", "class_method_signature": "HTMLFormDataStore.getProviderNamesFromDevice()", "testcase": false, "constructor": false}, {"identifier": "getDefaultEncounterProvider", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getDefaultEncounterProvider()", "full_signature": "@JavascriptInterface public String getDefaultEncounterProvider()", "class_method_signature": "HTMLFormDataStore.getDefaultEncounterProvider()", "testcase": false, "constructor": false}, {"identifier": "getFontSizePreference", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getFontSizePreference()", "full_signature": "@JavascriptInterface public String getFontSizePreference()", "class_method_signature": "HTMLFormDataStore.getFontSizePreference()", "testcase": false, "constructor": false}, {"identifier": "parseForm", "parameters": "(String jsonPayload, String status)", "modifiers": "private", "return": "void", "signature": "void parseForm(String jsonPayload, String status)", "full_signature": "private void parseForm(String jsonPayload, String status)", "class_method_signature": "HTMLFormDataStore.parseForm(String jsonPayload, String status)", "testcase": false, "constructor": false}, {"identifier": "getEncounterDateFromForm", "parameters": "(String jsonPayload)", "modifiers": "public", "return": "Date", "signature": "Date getEncounterDateFromForm(String jsonPayload)", "full_signature": "public Date getEncounterDateFromForm(String jsonPayload)", "class_method_signature": "HTMLFormDataStore.getEncounterDateFromForm(String jsonPayload)", "testcase": false, "constructor": false}, {"identifier": "getFormParser", "parameters": "()", "modifiers": "", "return": "HTMLFormObservationCreator", "signature": "HTMLFormObservationCreator getFormParser()", "full_signature": " HTMLFormObservationCreator getFormParser()", "class_method_signature": "HTMLFormDataStore.getFormParser()", "testcase": false, "constructor": false}, {"identifier": "isRegistrationComplete", "parameters": "(String status)", "modifiers": "private", "return": "boolean", "signature": "boolean isRegistrationComplete(String status)", "full_signature": "private boolean isRegistrationComplete(String status)", "class_method_signature": "HTMLFormDataStore.isRegistrationComplete(String status)", "testcase": false, "constructor": false}, {"identifier": "isRegistrationForm", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRegistrationForm()", "full_signature": "private boolean isRegistrationForm()", "class_method_signature": "HTMLFormDataStore.isRegistrationForm()", "testcase": false, "constructor": false}, {"identifier": "isEncounterForm", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isEncounterForm()", "full_signature": "private boolean isEncounterForm()", "class_method_signature": "HTMLFormDataStore.isEncounterForm()", "testcase": false, "constructor": false}, {"identifier": "getStringResource", "parameters": "(String stringResourceName)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getStringResource(String stringResourceName)", "full_signature": "@JavascriptInterface public String getStringResource(String stringResourceName)", "class_method_signature": "HTMLFormDataStore.getStringResource(String stringResourceName)", "testcase": false, "constructor": false}, {"identifier": "getConcepts", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getConcepts()", "full_signature": "@JavascriptInterface public String getConcepts()", "class_method_signature": "HTMLFormDataStore.getConcepts()", "testcase": false, "constructor": false}, {"identifier": "getEncountersByPatientUuid", "parameters": "(String patientuuid)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getEncountersByPatientUuid(String patientuuid)", "full_signature": "@JavascriptInterface public String getEncountersByPatientUuid(String patientuuid)", "class_method_signature": "HTMLFormDataStore.getEncountersByPatientUuid(String patientuuid)", "testcase": false, "constructor": false}, {"identifier": "getEncounterTypes", "parameters": "(String patientuuid)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getEncounterTypes(String patientuuid)", "full_signature": "@JavascriptInterface public String getEncounterTypes(String patientuuid)", "class_method_signature": "HTMLFormDataStore.getEncounterTypes(String patientuuid)", "testcase": false, "constructor": false}, {"identifier": "getObsByConceptId", "parameters": "(String patientUuid, int conceptId)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getObsByConceptId(String patientUuid, int conceptId)", "full_signature": "@JavascriptInterface public String getObsByConceptId(String patientUuid, int conceptId)", "class_method_signature": "HTMLFormDataStore.getObsByConceptId(String patientUuid, int conceptId)", "testcase": false, "constructor": false}, {"identifier": "getObsByEncounterId", "parameters": "(int encounterid)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getObsByEncounterId(int encounterid)", "full_signature": "@JavascriptInterface public String getObsByEncounterId(int encounterid)", "class_method_signature": "HTMLFormDataStore.getObsByEncounterId(int encounterid)", "testcase": false, "constructor": false}, {"identifier": "getObsByEncounterType", "parameters": "(String patientUuid, String encounterType)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getObsByEncounterType(String patientUuid, String encounterType)", "full_signature": "@JavascriptInterface public String getObsByEncounterType(String patientUuid, String encounterType)", "class_method_signature": "HTMLFormDataStore.getObsByEncounterType(String patientUuid, String encounterType)", "testcase": false, "constructor": false}, {"identifier": "createObsJsonArray", "parameters": "(List<Observation> observations)", "modifiers": "private", "return": "String", "signature": "String createObsJsonArray(List<Observation> observations)", "full_signature": "private String createObsJsonArray(List<Observation> observations)", "class_method_signature": "HTMLFormDataStore.createObsJsonArray(List<Observation> observations)", "testcase": false, "constructor": false}, {"identifier": "isMedicalRecordNumberRequired", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "boolean", "signature": "boolean isMedicalRecordNumberRequired()", "full_signature": "@JavascriptInterface public boolean isMedicalRecordNumberRequired()", "class_method_signature": "HTMLFormDataStore.isMedicalRecordNumberRequired()", "testcase": false, "constructor": false}, {"identifier": "checkForPossibleFormDuplicate", "parameters": "(String formUuid, String encounterDateTime, String patientUuid, String encounterPayLoad)", "modifiers": "@JavascriptInterface public", "return": "void", "signature": "void checkForPossibleFormDuplicate(String formUuid, String encounterDateTime, String patientUuid, String encounterPayLoad)", "full_signature": "@JavascriptInterface public void checkForPossibleFormDuplicate(String formUuid, String encounterDateTime, String patientUuid, String encounterPayLoad)", "class_method_signature": "HTMLFormDataStore.checkForPossibleFormDuplicate(String formUuid, String encounterDateTime, String patientUuid, String encounterPayLoad)", "testcase": false, "constructor": false}, {"identifier": "getDefaultEncounterLocationSetting", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "boolean", "signature": "boolean getDefaultEncounterLocationSetting()", "full_signature": "@JavascriptInterface public boolean getDefaultEncounterLocationSetting()", "class_method_signature": "HTMLFormDataStore.getDefaultEncounterLocationSetting()", "testcase": false, "constructor": false}, {"identifier": "getDefaultEncounterLocationPreference", "parameters": "()", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getDefaultEncounterLocationPreference()", "full_signature": "@JavascriptInterface public String getDefaultEncounterLocationPreference()", "class_method_signature": "HTMLFormDataStore.getDefaultEncounterLocationPreference()", "testcase": false, "constructor": false}, {"identifier": "areMandatoryEncounterDetailsInForm", "parameters": "(String jsonResponse)", "modifiers": "private", "return": "boolean", "signature": "boolean areMandatoryEncounterDetailsInForm(String jsonResponse)", "full_signature": "private boolean areMandatoryEncounterDetailsInForm(String jsonResponse)", "class_method_signature": "HTMLFormDataStore.areMandatoryEncounterDetailsInForm(String jsonResponse)", "testcase": false, "constructor": false}, {"identifier": "injectUserSystemIdToEncounterPayload", "parameters": "(String jsonPayload)", "modifiers": "private", "return": "String", "signature": "String injectUserSystemIdToEncounterPayload(String jsonPayload)", "full_signature": "private String injectUserSystemIdToEncounterPayload(String jsonPayload)", "class_method_signature": "HTMLFormDataStore.injectUserSystemIdToEncounterPayload(String jsonPayload)", "testcase": false, "constructor": false}, {"identifier": "injectActiveSetupConfigUuidToEncounterPayload", "parameters": "(String jsonPayload)", "modifiers": "private", "return": "String", "signature": "String injectActiveSetupConfigUuidToEncounterPayload(String jsonPayload)", "full_signature": "private String injectActiveSetupConfigUuidToEncounterPayload(String jsonPayload)", "class_method_signature": "HTMLFormDataStore.injectActiveSetupConfigUuidToEncounterPayload(String jsonPayload)", "testcase": false, "constructor": false}, {"identifier": "checkMissingMandatoryEncounterDetails", "parameters": "(String jsonPayLoad)", "modifiers": "private", "return": "String", "signature": "String checkMissingMandatoryEncounterDetails(String jsonPayLoad)", "full_signature": "private String checkMissingMandatoryEncounterDetails(String jsonPayLoad)", "class_method_signature": "HTMLFormDataStore.checkMissingMandatoryEncounterDetails(String jsonPayLoad)", "testcase": false, "constructor": false}, {"identifier": "getLastKnowGPSLocation", "parameters": "(String jsonReturnType)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getLastKnowGPSLocation(String jsonReturnType)", "full_signature": "@JavascriptInterface public String getLastKnowGPSLocation(String jsonReturnType)", "class_method_signature": "HTMLFormDataStore.getLastKnowGPSLocation(String jsonReturnType)", "testcase": false, "constructor": false}, {"identifier": "logEvent", "parameters": "(String tag, String details)", "modifiers": "@JavascriptInterface public", "return": "void", "signature": "void logEvent(String tag, String details)", "full_signature": "@JavascriptInterface public void logEvent(String tag, String details)", "class_method_signature": "HTMLFormDataStore.logEvent(String tag, String details)", "testcase": false, "constructor": false}, {"identifier": "injectTimeZoneToEncounterPayload", "parameters": "(String jsonPayload)", "modifiers": "private", "return": "String", "signature": "String injectTimeZoneToEncounterPayload(String jsonPayload)", "full_signature": "private String injectTimeZoneToEncounterPayload(String jsonPayload)", "class_method_signature": "HTMLFormDataStore.injectTimeZoneToEncounterPayload(String jsonPayload)", "testcase": false, "constructor": false}, {"identifier": "getCohortMembershipByPatientUuid", "parameters": "(String patientUuid)", "modifiers": "@JavascriptInterface public", "return": "String", "signature": "String getCohortMembershipByPatientUuid(String patientUuid)", "full_signature": "@JavascriptInterface public String getCohortMembershipByPatientUuid(String patientUuid)", "class_method_signature": "HTMLFormDataStore.getCohortMembershipByPatientUuid(String patientUuid)", "testcase": false, "constructor": false}, {"identifier": "logFormStartEvent", "parameters": "(boolean isFormReload)", "modifiers": "private", "return": "void", "signature": "void logFormStartEvent(boolean isFormReload)", "full_signature": "private void logFormStartEvent(boolean isFormReload)", "class_method_signature": "HTMLFormDataStore.logFormStartEvent(boolean isFormReload)", "testcase": false, "constructor": false}, {"identifier": "logFormSaveEvent", "parameters": "(String status)", "modifiers": "private", "return": "void", "signature": "void logFormSaveEvent(String status)", "full_signature": "private void logFormSaveEvent(String status)", "class_method_signature": "HTMLFormDataStore.logFormSaveEvent(String status)", "testcase": false, "constructor": false}, {"identifier": "createPersonAndDiscardHTML", "parameters": "(String jsonPayload)", "modifiers": "@JavascriptInterface public", "return": "void", "signature": "void createPersonAndDiscardHTML(String jsonPayload)", "full_signature": "@JavascriptInterface public void createPersonAndDiscardHTML(String jsonPayload)", "class_method_signature": "HTMLFormDataStore.createPersonAndDiscardHTML(String jsonPayload)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/muzima/view/forms/HTMLFormDataStore.java"}, "focal_method": {"identifier": "saveHTML", "parameters": "(String jsonPayload, String status)", "modifiers": "@JavascriptInterface public", "return": "void", "body": "@JavascriptInterface\n    public void saveHTML(String jsonPayload, String status) {\n        saveHTML(jsonPayload, status, false);\n    }", "signature": "void saveHTML(String jsonPayload, String status)", "full_signature": "@JavascriptInterface public void saveHTML(String jsonPayload, String status)", "class_method_signature": "HTMLFormDataStore.saveHTML(String jsonPayload, String status)", "testcase": false, "constructor": false, "invocations": ["saveHTML"]}, "repository": {"repo_id": 10472733, "url": "https://github.com/muzima/muzima-android", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 8, "size": 20746, "license": "licensed"}}