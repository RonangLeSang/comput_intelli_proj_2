{"test_class": {"identifier": "HttpMethodAnnotationHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResourceMetaData metaData;", "modifier": "private", "type": "ResourceMetaData", "declarator": "metaData", "var_name": "metaData"}], "file": "minnal-jaxrs/minnal-instrumentation-jaxrs/src/test/java/org/minnal/instrument/resource/metadata/handler/HttpMethodAnnotationHandlerTest.java"}, "test_case": {"identifier": "shouldHandleDELETEAnnotationWithPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldHandleDELETEAnnotationWithPath() throws Exception {\n\t\tDELETEAnnotationHandler handler = new DELETEAnnotationHandler();\n\t\thandler.handle(metaData, mock(DELETE.class), DummyResource.class.getMethod(\"deleteWithPath\"));\n\t\tassertTrue(! metaData.getResourceMethods().isEmpty());\n\t\tassertEquals(metaData.getResourceMethods().iterator().next(), new ResourceMethodMetaData(\"/dummy/delete\", HttpMethod.DELETE, DummyResource.class.getMethod(\"deleteWithPath\")));\n\t}", "signature": "void shouldHandleDELETEAnnotationWithPath()", "full_signature": "@Test public void shouldHandleDELETEAnnotationWithPath()", "class_method_signature": "HttpMethodAnnotationHandlerTest.shouldHandleDELETEAnnotationWithPath()", "testcase": true, "constructor": false, "invocations": ["handle", "mock", "getMethod", "assertTrue", "isEmpty", "getResourceMethods", "assertEquals", "next", "iterator", "getResourceMethods", "getMethod"]}, "focal_class": {"identifier": "HttpMethodAnnotationHandler", "superclass": "extends AbstractResourceAnnotationHandler", "interfaces": "", "fields": [], "methods": [{"identifier": "handle", "parameters": "(ResourceMetaData metaData, Annotation annotation, Method method)", "modifiers": "@Override public", "return": "void", "signature": "void handle(ResourceMetaData metaData, Annotation annotation, Method method)", "full_signature": "@Override public void handle(ResourceMetaData metaData, Annotation annotation, Method method)", "class_method_signature": "HttpMethodAnnotationHandler.handle(ResourceMetaData metaData, Annotation annotation, Method method)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(ResourceMetaData metaData, Annotation annotation, Field field)", "modifiers": "@Override public", "return": "void", "signature": "void handle(ResourceMetaData metaData, Annotation annotation, Field field)", "full_signature": "@Override public void handle(ResourceMetaData metaData, Annotation annotation, Field field)", "class_method_signature": "HttpMethodAnnotationHandler.handle(ResourceMetaData metaData, Annotation annotation, Field field)", "testcase": false, "constructor": false}, {"identifier": "getHttpMethod", "parameters": "()", "modifiers": "protected abstract", "return": "String", "signature": "String getHttpMethod()", "full_signature": "protected abstract String getHttpMethod()", "class_method_signature": "HttpMethodAnnotationHandler.getHttpMethod()", "testcase": false, "constructor": false}], "file": "minnal-jaxrs/minnal-instrumentation-jaxrs/src/main/java/org/minnal/instrument/resource/metadata/handler/HttpMethodAnnotationHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(ResourceMetaData metaData, Annotation annotation, Method method)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void handle(ResourceMetaData metaData, Annotation annotation, Method method) {\n\t\tPath path = ClassUtils.getAnnotation(method, Path.class);\n\t\tString methodPath = HttpUtil.concatPaths(metaData.getPath(), path != null ? path.value() : null);\n\t\tResourceMethodMetaData resourceMethod = new ResourceMethodMetaData(methodPath, getHttpMethod(), method);\n\t\tmetaData.addResourceMethod(resourceMethod);\n\t}", "signature": "void handle(ResourceMetaData metaData, Annotation annotation, Method method)", "full_signature": "@Override public void handle(ResourceMetaData metaData, Annotation annotation, Method method)", "class_method_signature": "HttpMethodAnnotationHandler.handle(ResourceMetaData metaData, Annotation annotation, Method method)", "testcase": false, "constructor": false, "invocations": ["getAnnotation", "concatPaths", "getPath", "value", "getHttpMethod", "addResourceMethod"]}, "repository": {"repo_id": 9884445, "url": "https://github.com/minnal/minnal", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 26, "size": 88942, "license": "licensed"}}