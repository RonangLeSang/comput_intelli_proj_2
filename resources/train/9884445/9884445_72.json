{"test_class": {"identifier": "RouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Router router;", "modifier": "private", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private MessageContext context;", "modifier": "private", "type": "MessageContext", "declarator": "context", "var_name": "context"}, {"original_string": "private Application<ApplicationConfiguration> application;", "modifier": "private", "type": "Application<ApplicationConfiguration>", "declarator": "application", "var_name": "application"}, {"original_string": "private ApplicationMapping applicationMapping;", "modifier": "private", "type": "ApplicationMapping", "declarator": "applicationMapping", "var_name": "applicationMapping"}, {"original_string": "private FullHttpRequest request;", "modifier": "private", "type": "FullHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private FullHttpResponse response;", "modifier": "private", "type": "FullHttpResponse", "declarator": "response", "var_name": "response"}], "file": "minnal-core/src/test/java/org/minnal/core/RouterTest.java"}, "test_case": {"identifier": "shouldCreateContainerRequestFromHttpRequestWithBaseAndRequestUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldCreateContainerRequestFromHttpRequestWithBaseAndRequestUri() {\n\t\tContainerRequest containerRequest = router.createContainerRequest(context);\n\t\tassertEquals(containerRequest.getBaseUri(), URI.create(\"http://localhost:8080/app/\"));\n\t\tassertEquals(containerRequest.getRequestUri(), URI.create(\"/test\"));\n\t}", "signature": "void shouldCreateContainerRequestFromHttpRequestWithBaseAndRequestUri()", "full_signature": "@Test public void shouldCreateContainerRequestFromHttpRequestWithBaseAndRequestUri()", "class_method_signature": "RouterTest.shouldCreateContainerRequestFromHttpRequestWithBaseAndRequestUri()", "testcase": true, "constructor": false, "invocations": ["createContainerRequest", "assertEquals", "getBaseUri", "create", "assertEquals", "getRequestUri", "create"]}, "focal_class": {"identifier": "Router", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ApplicationMapping applicationMapping;", "modifier": "private", "type": "ApplicationMapping", "declarator": "applicationMapping", "var_name": "applicationMapping"}, {"original_string": "private RouterListener listener;", "modifier": "private", "type": "RouterListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private Map<Application<? extends ApplicationConfiguration>, ApplicationHandler> handlers = new HashMap<Application<? extends ApplicationConfiguration>, ApplicationHandler>();", "modifier": "private", "type": "Map<Application<? extends ApplicationConfiguration>, ApplicationHandler>", "declarator": "handlers = new HashMap<Application<? extends ApplicationConfiguration>, ApplicationHandler>()", "var_name": "handlers"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(Router.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Router.class)", "var_name": "logger"}], "methods": [{"identifier": "Router", "parameters": "(ApplicationMapping applicationMapping)", "modifiers": "public", "return": "", "signature": " Router(ApplicationMapping applicationMapping)", "full_signature": "public  Router(ApplicationMapping applicationMapping)", "class_method_signature": "Router.Router(ApplicationMapping applicationMapping)", "testcase": false, "constructor": true}, {"identifier": "route", "parameters": "(MessageContext context)", "modifiers": "public", "return": "void", "signature": "void route(MessageContext context)", "full_signature": "public void route(MessageContext context)", "class_method_signature": "Router.route(MessageContext context)", "testcase": false, "constructor": false}, {"identifier": "getApplicationHandler", "parameters": "(Application<ApplicationConfiguration> application)", "modifiers": "protected", "return": "ApplicationHandler", "signature": "ApplicationHandler getApplicationHandler(Application<ApplicationConfiguration> application)", "full_signature": "protected ApplicationHandler getApplicationHandler(Application<ApplicationConfiguration> application)", "class_method_signature": "Router.getApplicationHandler(Application<ApplicationConfiguration> application)", "testcase": false, "constructor": false}, {"identifier": "createApplicationHandler", "parameters": "(ResourceConfig resourceConfig)", "modifiers": "protected", "return": "ApplicationHandler", "signature": "ApplicationHandler createApplicationHandler(ResourceConfig resourceConfig)", "full_signature": "protected ApplicationHandler createApplicationHandler(ResourceConfig resourceConfig)", "class_method_signature": "Router.createApplicationHandler(ResourceConfig resourceConfig)", "testcase": false, "constructor": false}, {"identifier": "createContainerRequest", "parameters": "(MessageContext context)", "modifiers": "protected", "return": "ContainerRequest", "signature": "ContainerRequest createContainerRequest(MessageContext context)", "full_signature": "protected ContainerRequest createContainerRequest(MessageContext context)", "class_method_signature": "Router.createContainerRequest(MessageContext context)", "testcase": false, "constructor": false}, {"identifier": "createHttpResponse", "parameters": "(MessageContext context, ContainerResponse containerResponse, ByteBuf buffer)", "modifiers": "protected", "return": "FullHttpResponse", "signature": "FullHttpResponse createHttpResponse(MessageContext context, ContainerResponse containerResponse, ByteBuf buffer)", "full_signature": "protected FullHttpResponse createHttpResponse(MessageContext context, ContainerResponse containerResponse, ByteBuf buffer)", "class_method_signature": "Router.createHttpResponse(MessageContext context, ContainerResponse containerResponse, ByteBuf buffer)", "testcase": false, "constructor": false}, {"identifier": "registerListener", "parameters": "(RouterListener listener)", "modifiers": "protected", "return": "void", "signature": "void registerListener(RouterListener listener)", "full_signature": "protected void registerListener(RouterListener listener)", "class_method_signature": "Router.registerListener(RouterListener listener)", "testcase": false, "constructor": false}], "file": "minnal-core/src/main/java/org/minnal/core/Router.java"}, "focal_method": {"identifier": "createContainerRequest", "parameters": "(MessageContext context)", "modifiers": "protected", "return": "ContainerRequest", "body": "protected ContainerRequest createContainerRequest(MessageContext context) {\n\t\tApplication<ApplicationConfiguration> application = context.getApplication();\n\t\tFullHttpRequest httpRequest = context.getRequest();\n\t\tURI baseUri = URI.create(context.getBaseUri().resolve(application.getPath()) + \"/\");\n\t\tURI requestUri = HttpUtil.createURI(httpRequest.getUri());\n\t\tContainerRequest containerRequest = new ContainerRequest(baseUri, requestUri, httpRequest.getMethod().name(), null, new MapPropertiesDelegate());\n//\t\tcontainerRequest.setProperty(REQUEST_PROPERTY_REMOTE_ADDR, context.getRequest().channel().remoteAddress());\n\t\tcontainerRequest.setEntityStream(new ByteBufInputStream(httpRequest.content()));\n\t\t\n        for (Map.Entry<String, String> headerEntry : httpRequest.headers()) {\n        \tcontainerRequest.getHeaders().add(headerEntry.getKey(), headerEntry.getValue());\n        }\n        return containerRequest;\n\t}", "signature": "ContainerRequest createContainerRequest(MessageContext context)", "full_signature": "protected ContainerRequest createContainerRequest(MessageContext context)", "class_method_signature": "Router.createContainerRequest(MessageContext context)", "testcase": false, "constructor": false, "invocations": ["getApplication", "getRequest", "create", "resolve", "getBaseUri", "getPath", "createURI", "getUri", "name", "getMethod", "setEntityStream", "content", "headers", "add", "getHeaders", "getKey", "getValue"]}, "repository": {"repo_id": 9884445, "url": "https://github.com/minnal/minnal", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 26, "size": 88942, "license": "licensed"}}