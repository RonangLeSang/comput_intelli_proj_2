{"test_class": {"identifier": "SimpleAuthorizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleAuthorizer authorizer;", "modifier": "private", "type": "SimpleAuthorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private RolePermissionMapper rolePermissionMapper;", "modifier": "private", "type": "RolePermissionMapper", "declarator": "rolePermissionMapper", "var_name": "rolePermissionMapper"}, {"original_string": "private UserRoleMapper userRoleMapper;", "modifier": "private", "type": "UserRoleMapper", "declarator": "userRoleMapper", "var_name": "userRoleMapper"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}], "file": "minnal-security/src/test/java/org/minnal/security/auth/SimpleAuthorizerTest.java"}, "test_case": {"identifier": "shouldAuthorizeIfPermissionMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldAuthorizeIfPermissionMatch() {\n\t\tuser.setPermissions(Arrays.asList(\"permission1\"));\n\t\tassertTrue(authorizer.authorize(user, \"permission1\"));\n\t}", "signature": "void shouldAuthorizeIfPermissionMatch()", "full_signature": "@Test public void shouldAuthorizeIfPermissionMatch()", "class_method_signature": "SimpleAuthorizerTest.shouldAuthorizeIfPermissionMatch()", "testcase": true, "constructor": false, "invocations": ["setPermissions", "asList", "assertTrue", "authorize"]}, "focal_class": {"identifier": "SimpleAuthorizer", "superclass": "", "interfaces": "implements Authorizer", "fields": [{"original_string": "private RolePermissionMapper permissionMapper = new SimpleRolePermissionMapper();", "modifier": "private", "type": "RolePermissionMapper", "declarator": "permissionMapper = new SimpleRolePermissionMapper()", "var_name": "permissionMapper"}, {"original_string": "private UserRoleMapper roleMapper = new SimpleUserRoleMapper();", "modifier": "private", "type": "UserRoleMapper", "declarator": "roleMapper = new SimpleUserRoleMapper()", "var_name": "roleMapper"}], "methods": [{"identifier": "SimpleAuthorizer", "parameters": "(RolePermissionMapper permissionMapper,\n\t\t\tUserRoleMapper roleMapper)", "modifiers": "public", "return": "", "signature": " SimpleAuthorizer(RolePermissionMapper permissionMapper,\n\t\t\tUserRoleMapper roleMapper)", "full_signature": "public  SimpleAuthorizer(RolePermissionMapper permissionMapper,\n\t\t\tUserRoleMapper roleMapper)", "class_method_signature": "SimpleAuthorizer.SimpleAuthorizer(RolePermissionMapper permissionMapper,\n\t\t\tUserRoleMapper roleMapper)", "testcase": false, "constructor": true}, {"identifier": "SimpleAuthorizer", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleAuthorizer()", "full_signature": "public  SimpleAuthorizer()", "class_method_signature": "SimpleAuthorizer.SimpleAuthorizer()", "testcase": false, "constructor": true}, {"identifier": "authorize", "parameters": "(User user, List<String> permissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean authorize(User user, List<String> permissions)", "full_signature": "@Override public boolean authorize(User user, List<String> permissions)", "class_method_signature": "SimpleAuthorizer.authorize(User user, List<String> permissions)", "testcase": false, "constructor": false}, {"identifier": "getPermissionMapper", "parameters": "()", "modifiers": "public", "return": "RolePermissionMapper", "signature": "RolePermissionMapper getPermissionMapper()", "full_signature": "public RolePermissionMapper getPermissionMapper()", "class_method_signature": "SimpleAuthorizer.getPermissionMapper()", "testcase": false, "constructor": false}, {"identifier": "setPermissionMapper", "parameters": "(RolePermissionMapper permissionMapper)", "modifiers": "public", "return": "void", "signature": "void setPermissionMapper(RolePermissionMapper permissionMapper)", "full_signature": "public void setPermissionMapper(RolePermissionMapper permissionMapper)", "class_method_signature": "SimpleAuthorizer.setPermissionMapper(RolePermissionMapper permissionMapper)", "testcase": false, "constructor": false}, {"identifier": "getRoleMapper", "parameters": "()", "modifiers": "public", "return": "UserRoleMapper", "signature": "UserRoleMapper getRoleMapper()", "full_signature": "public UserRoleMapper getRoleMapper()", "class_method_signature": "SimpleAuthorizer.getRoleMapper()", "testcase": false, "constructor": false}, {"identifier": "setRoleMapper", "parameters": "(UserRoleMapper roleMapper)", "modifiers": "public", "return": "void", "signature": "void setRoleMapper(UserRoleMapper roleMapper)", "full_signature": "public void setRoleMapper(UserRoleMapper roleMapper)", "class_method_signature": "SimpleAuthorizer.setRoleMapper(UserRoleMapper roleMapper)", "testcase": false, "constructor": false}, {"identifier": "authorize", "parameters": "(User user, String permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean authorize(User user, String permission)", "full_signature": "@Override public boolean authorize(User user, String permission)", "class_method_signature": "SimpleAuthorizer.authorize(User user, String permission)", "testcase": false, "constructor": false}], "file": "minnal-security/src/main/java/org/minnal/security/auth/SimpleAuthorizer.java"}, "focal_method": {"identifier": "authorize", "parameters": "(User user, List<String> permissions)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean authorize(User user, List<String> permissions) {\n\t\tif (user.getRoles() == null || user.getRoles().isEmpty()) {\n\t\t\tList<String> roles = roleMapper.getRoles(user);\n\t\t\tif (roles != null) {\n\t\t\t\tuser.setRoles(roles);\n\t\t\t}\n\t\t}\n\t\tif (user.getPermissions() == null || user.getPermissions().isEmpty()) {\n\t\t\tList<String> perms = new ArrayList<String>();\n\t\t\tif (user.getRoles() != null) {\n\t\t\t\tfor (String role : user.getRoles()) {\n\t\t\t\t\tList<String> rolePerms = permissionMapper.getPermissions(role);\n\t\t\t\t\tif (rolePerms != null) {\n\t\t\t\t\t\tperms.addAll(rolePerms);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tuser.setPermissions(perms);\n\t\t}\n\t\treturn user.hasPermissions(permissions);\n\t}", "signature": "boolean authorize(User user, List<String> permissions)", "full_signature": "@Override public boolean authorize(User user, List<String> permissions)", "class_method_signature": "SimpleAuthorizer.authorize(User user, List<String> permissions)", "testcase": false, "constructor": false, "invocations": ["getRoles", "isEmpty", "getRoles", "getRoles", "setRoles", "getPermissions", "isEmpty", "getPermissions", "getRoles", "getRoles", "getPermissions", "addAll", "setPermissions", "hasPermissions"]}, "repository": {"repo_id": 9884445, "url": "https://github.com/minnal/minnal", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 26, "size": 88942, "license": "licensed"}}