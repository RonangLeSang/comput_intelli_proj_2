{"test_class": {"identifier": "ProtocolAggregatorImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.savara.protocol/src/test/java/org/savara/protocol/internal/aggregator/ProtocolAggregatorImplTest.java"}, "test_case": {"identifier": "testMergePathsSimple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMergePathsSimple() {\n\t\tBlock b1=new Block();\n\t\tBlock b2=new Block();\n\t\t\n\t\tInteraction i1=new Interaction(new Role(\"CreditAgency\"),\n\t\t\t\tnew MessageSignature(new TypeReference(\"CreditOk\")));\n\t\tInteraction i2=new Interaction(new Role(\"Seller\"),\n\t\t\t\tnew MessageSignature(new TypeReference(\"Confirm\")));\n\t\t\n\t\tb1.add(i1);\n\t\tb1.add(i2);\n\t\t\n\t\tb2.add(i1);\n\t\tb2.add(i2);\n\t\t\n\t\tBlock targetPath=new Block();\n\t\t\n\t\tFeedbackHandler handler=new DefaultFeedbackHandler();\n\t\t\n\t\tjava.util.List<Block> sourcePaths=new java.util.Vector<Block>();\n\t\tsourcePaths.add(b1);\n\t\tsourcePaths.add(b2);\n\t\t\n\t\tProtocolAggregatorImpl aggregator=new ProtocolAggregatorImpl();\n\t\taggregator.mergePaths(sourcePaths, targetPath, handler);\n\t\t\n\t\tif (targetPath.size() != 2) {\n\t\t\tfail(\"Target path should have two components: \"+targetPath.size());\n\t\t}\n\t\t\n\t\tif (!targetPath.get(0).equals(i1)) {\n\t\t\tfail(\"First component was unexpected\");\n\t\t}\n\t\t\n\t\tif (!targetPath.get(1).equals(i2)) {\n\t\t\tfail(\"Second component was unexpected\");\n\t\t}\n\t}", "signature": "void testMergePathsSimple()", "full_signature": "@Test public void testMergePathsSimple()", "class_method_signature": "ProtocolAggregatorImplTest.testMergePathsSimple()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "mergePaths", "size", "fail", "size", "equals", "get", "fail", "equals", "get", "fail"]}, "focal_class": {"identifier": "ProtocolAggregatorImpl", "superclass": "", "interfaces": "implements ProtocolAggregator", "fields": [{"original_string": "private static final Logger LOG=Logger.getLogger(ProtocolAggregatorImpl.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG=Logger.getLogger(ProtocolAggregatorImpl.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "aggregateGlobalModel", "parameters": "(String protocolName, String namespace,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "modifiers": "public", "return": "ProtocolModel", "signature": "ProtocolModel aggregateGlobalModel(String protocolName, String namespace,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "full_signature": "public ProtocolModel aggregateGlobalModel(String protocolName, String namespace,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.aggregateGlobalModel(String protocolName, String namespace,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "postProcessGlobal", "parameters": "(ProtocolModel global)", "modifiers": "protected", "return": "void", "signature": "void postProcessGlobal(ProtocolModel global)", "full_signature": "protected void postProcessGlobal(ProtocolModel global)", "class_method_signature": "ProtocolAggregatorImpl.postProcessGlobal(ProtocolModel global)", "testcase": false, "constructor": false}, {"identifier": "createActivity", "parameters": "(Activity act)", "modifiers": "protected", "return": "Activity", "signature": "Activity createActivity(Activity act)", "full_signature": "protected Activity createActivity(Activity act)", "class_method_signature": "ProtocolAggregatorImpl.createActivity(Activity act)", "testcase": false, "constructor": false}, {"identifier": "processProtocolUnits", "parameters": "(GlobalProtocolUnit gpu,\n\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus, \n\t\t\t\tRole client, FeedbackHandler handler)", "modifiers": "protected", "return": "boolean", "signature": "boolean processProtocolUnits(GlobalProtocolUnit gpu,\n\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus, \n\t\t\t\tRole client, FeedbackHandler handler)", "full_signature": "protected boolean processProtocolUnits(GlobalProtocolUnit gpu,\n\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus, \n\t\t\t\tRole client, FeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.processProtocolUnits(GlobalProtocolUnit gpu,\n\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus, \n\t\t\t\tRole client, FeedbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getReceiver", "parameters": "(Activity act,\n\t\t\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus)", "modifiers": "protected", "return": "LocalProtocolUnit", "signature": "LocalProtocolUnit getReceiver(Activity act,\n\t\t\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus)", "full_signature": "protected LocalProtocolUnit getReceiver(Activity act,\n\t\t\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus)", "class_method_signature": "ProtocolAggregatorImpl.getReceiver(Activity act,\n\t\t\t\t\t\tjava.util.Map<Role, LocalProtocolUnit> lpus)", "testcase": false, "constructor": false}, {"identifier": "aggregateLocalModel", "parameters": "(String protocolName,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals, FeedbackHandler handler)", "modifiers": "public", "return": "ProtocolModel", "signature": "ProtocolModel aggregateLocalModel(String protocolName,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals, FeedbackHandler handler)", "full_signature": "public ProtocolModel aggregateLocalModel(String protocolName,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals, FeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.aggregateLocalModel(String protocolName,\n\t\t\t\tjava.util.Collection<ProtocolModel> locals, FeedbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "mergeImports", "parameters": "(ProtocolModel aggregated, java.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "modifiers": "protected", "return": "void", "signature": "void mergeImports(ProtocolModel aggregated, java.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "full_signature": "protected void mergeImports(ProtocolModel aggregated, java.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.mergeImports(ProtocolModel aggregated, java.util.Collection<ProtocolModel> locals,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "mergeAnnotations", "parameters": "(java.util.List<Annotation> main,\n\t\t\tjava.util.List<Annotation> source, FeedbackHandler handler)", "modifiers": "protected", "return": "void", "signature": "void mergeAnnotations(java.util.List<Annotation> main,\n\t\t\tjava.util.List<Annotation> source, FeedbackHandler handler)", "full_signature": "protected void mergeAnnotations(java.util.List<Annotation> main,\n\t\t\tjava.util.List<Annotation> source, FeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.mergeAnnotations(java.util.List<Annotation> main,\n\t\t\tjava.util.List<Annotation> source, FeedbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "mergePaths", "parameters": "(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "modifiers": "protected", "return": "void", "signature": "void mergePaths(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "full_signature": "protected void mergePaths(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.mergePaths(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "postProcessMerged", "parameters": "(Block targetPath, FeedbackHandler handler)", "modifiers": "protected", "return": "void", "signature": "void postProcessMerged(Block targetPath, FeedbackHandler handler)", "full_signature": "protected void postProcessMerged(Block targetPath, FeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.postProcessMerged(Block targetPath, FeedbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "isChoiceValidForRepetition", "parameters": "(Choice choice)", "modifiers": "protected", "return": "boolean", "signature": "boolean isChoiceValidForRepetition(Choice choice)", "full_signature": "protected boolean isChoiceValidForRepetition(Choice choice)", "class_method_signature": "ProtocolAggregatorImpl.isChoiceValidForRepetition(Choice choice)", "testcase": false, "constructor": false}, {"identifier": "checkForRepetition", "parameters": "(Choice choice)", "modifiers": "protected", "return": "void", "signature": "void checkForRepetition(Choice choice)", "full_signature": "protected void checkForRepetition(Choice choice)", "class_method_signature": "ProtocolAggregatorImpl.checkForRepetition(Choice choice)", "testcase": false, "constructor": false}, {"identifier": "transferCommonComponent", "parameters": "(Block targetPath, int targetPos,\n\t\t\t\t\tjava.util.List<Block> sourcePaths, int sourcePos,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "modifiers": "protected", "return": "boolean", "signature": "boolean transferCommonComponent(Block targetPath, int targetPos,\n\t\t\t\t\tjava.util.List<Block> sourcePaths, int sourcePos,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "full_signature": "protected boolean transferCommonComponent(Block targetPath, int targetPos,\n\t\t\t\t\tjava.util.List<Block> sourcePaths, int sourcePos,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.transferCommonComponent(Block targetPath, int targetPos,\n\t\t\t\t\tjava.util.List<Block> sourcePaths, int sourcePos,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "testcase": false, "constructor": false}], "file": "bundles/org.savara.protocol/src/main/java/org/savara/protocol/internal/aggregator/ProtocolAggregatorImpl.java"}, "focal_method": {"identifier": "mergePaths", "parameters": "(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "modifiers": "protected", "return": "void", "body": "protected void mergePaths(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler) {\n\t\tif (sourcePaths.size() == 0) {\n\t\t\treturn;\n\t\t} else if (sourcePaths.size() == 1) {\n\t\t\ttargetPath.getContents().addAll(sourcePaths.get(0).getContents());\n\t\t\treturn;\n\t\t}\n\t\t\n\t\twhile (transferCommonComponent(targetPath, targetPath.size(), sourcePaths, 0,\n\t\t\t\t\t\t\thandler));\n\t\t\n\t\tif (sourcePaths.size() > 0) {\n\t\t\tChoice choice=new Choice();\n\t\t\t\n\t\t\ttargetPath.add(choice);\n\t\t\t\n\t\t\tint pos=targetPath.indexOf(choice);\n\t\t\t\n\t\t\twhile (transferCommonComponent(targetPath, pos+1, sourcePaths, -1,\n\t\t\t\t\thandler));\n\t\t\t\n\t\t\t// Group into paths with common first interaction\n\t\t\tboolean optional=false;\n\t\t\tboolean content=false;\n\t\t\twhile (sourcePaths.size() > 0) {\n\t\t\t\tBlock path=sourcePaths.get(0);\n\t\t\t\tif (path.size() == 0) {\n\t\t\t\t\toptional = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontent = true;\n\t\t\t\t\tObject component=path.get(0);\n\t\t\t\t\t\n\t\t\t\t\tjava.util.List<Block> sps=new java.util.Vector<Block>();\n\t\t\t\t\tsps.add(path);\n\t\t\t\t\t\n\t\t\t\t\t// Check if other paths have the same initial component\n\t\t\t\t\tfor (int i=1; i < sourcePaths.size(); i++) {\n\t\t\t\t\t\tBlock path2=sourcePaths.get(i);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (path2.size() > 0 && path2.get(0).equals(component)) {\n\t\t\t\t\t\t\tsps.add(path2);\n\t\t\t\t\t\t\tsourcePaths.remove(i);\n\t\t\t\t\t\t\ti--; // Decrement due to removed element\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (sps.size() == 1) {\n\t\t\t\t\t\tchoice.getPaths().add(sps.get(0));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Merge paths\n\t\t\t\t\t\tBlock tp=new Block();\n\t\t\t\t\t\tchoice.getPaths().add(tp);\n\t\t\t\t\t\tmergePaths(sps, tp, handler);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsourcePaths.remove(0);\n\t\t\t}\n\t\t\t\n\t\t\t// If no content, then remove the choice construct\n\t\t\tif (!content) {\n\t\t\t\ttargetPath.remove(choice);\n\t\t\t} else {\n\t\t\t\tif (optional) {\n\t\t\t\t\t// Add empty path\n\t\t\t\t\tchoice.getPaths().add(new Block());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Check for located role\n\t\t\t\tRole role=null;\n\t\t\t\t\n\t\t\t\tfor (Block b : choice.getPaths()) {\n\t\t\t\t\tif (b.size() > 0 && b.get(0) instanceof Interaction) {\n\t\t\t\t\t\tInteraction in=(Interaction)b.get(0);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (in.getFromRole() == null) {\n\t\t\t\t\t\t\trole = in.getEnclosingProtocol().getLocatedRole();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trole = in.getFromRole();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tchoice.setRole(new Role(role));\n\t\t\t}\n\t\t}\n\t}", "signature": "void mergePaths(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "full_signature": "protected void mergePaths(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "class_method_signature": "ProtocolAggregatorImpl.mergePaths(java.util.List<Block> sourcePaths, Block targetPath,\n\t\t\t\t\t\t\tFeedbackHandler handler)", "testcase": false, "constructor": false, "invocations": ["size", "size", "addAll", "getContents", "getContents", "get", "transferCommonComponent", "size", "size", "add", "indexOf", "transferCommonComponent", "size", "get", "size", "get", "add", "size", "get", "size", "equals", "get", "add", "remove", "size", "add", "getPaths", "get", "add", "getPaths", "mergePaths", "remove", "remove", "add", "getPaths", "getPaths", "size", "get", "get", "getFromRole", "getLocatedRole", "getEnclosingProtocol", "getFromRole", "setRole"]}, "repository": {"repo_id": 1387581, "url": "https://github.com/savara/savara-core", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 7354, "license": "licensed"}}