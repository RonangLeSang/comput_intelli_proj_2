{"test_class": {"identifier": "SshServerTest", "superclass": "extends BaseTestSupport", "interfaces": "", "fields": [], "file": "sshd-core/src/test/java/org/apache/sshd/server/SshServerTest.java"}, "test_case": {"identifier": "stopMethodShouldBeIdempotent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stopMethodShouldBeIdempotent() throws Exception {\n        try (SshServer sshd = new SshServer()) {\n            sshd.stop();\n            sshd.stop();\n            sshd.stop();\n        }\n    }", "signature": "void stopMethodShouldBeIdempotent()", "full_signature": "@Test public void stopMethodShouldBeIdempotent()", "class_method_signature": "SshServerTest.stopMethodShouldBeIdempotent()", "testcase": true, "constructor": false, "invocations": ["stop", "stop", "stop"]}, "focal_class": {"identifier": "SshServer", "superclass": "extends AbstractFactoryManager", "interfaces": "implements ServerFactoryManager, Closeable", "fields": [{"original_string": "public static final Factory<SshServer> DEFAULT_SSH_SERVER_FACTORY = SshServer::new;", "modifier": "public static final", "type": "Factory<SshServer>", "declarator": "DEFAULT_SSH_SERVER_FACTORY = SshServer::new", "var_name": "DEFAULT_SSH_SERVER_FACTORY"}, {"original_string": "public static final List<ServiceFactory> DEFAULT_SERVICE_FACTORIES = Collections.unmodifiableList(\n            Arrays.asList(\n                    ServerUserAuthServiceFactory.INSTANCE,\n                    ServerConnectionServiceFactory.INSTANCE));", "modifier": "public static final", "type": "List<ServiceFactory>", "declarator": "DEFAULT_SERVICE_FACTORIES = Collections.unmodifiableList(\n            Arrays.asList(\n                    ServerUserAuthServiceFactory.INSTANCE,\n                    ServerConnectionServiceFactory.INSTANCE))", "var_name": "DEFAULT_SERVICE_FACTORIES"}, {"original_string": "protected IoAcceptor acceptor;", "modifier": "protected", "type": "IoAcceptor", "declarator": "acceptor", "var_name": "acceptor"}, {"original_string": "protected String host;", "modifier": "protected", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "protected int port;", "modifier": "protected", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private ServerProxyAcceptor proxyAcceptor;", "modifier": "private", "type": "ServerProxyAcceptor", "declarator": "proxyAcceptor", "var_name": "proxyAcceptor"}, {"original_string": "private ShellFactory shellFactory;", "modifier": "private", "type": "ShellFactory", "declarator": "shellFactory", "var_name": "shellFactory"}, {"original_string": "private SessionFactory sessionFactory;", "modifier": "private", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "private CommandFactory commandFactory;", "modifier": "private", "type": "CommandFactory", "declarator": "commandFactory", "var_name": "commandFactory"}, {"original_string": "private List<SubsystemFactory> subsystemFactories;", "modifier": "private", "type": "List<SubsystemFactory>", "declarator": "subsystemFactories", "var_name": "subsystemFactories"}, {"original_string": "private List<UserAuthFactory> userAuthFactories;", "modifier": "private", "type": "List<UserAuthFactory>", "declarator": "userAuthFactories", "var_name": "userAuthFactories"}, {"original_string": "private KeyPairProvider keyPairProvider;", "modifier": "private", "type": "KeyPairProvider", "declarator": "keyPairProvider", "var_name": "keyPairProvider"}, {"original_string": "private HostKeyCertificateProvider hostKeyCertificateProvider;", "modifier": "private", "type": "HostKeyCertificateProvider", "declarator": "hostKeyCertificateProvider", "var_name": "hostKeyCertificateProvider"}, {"original_string": "private PasswordAuthenticator passwordAuthenticator;", "modifier": "private", "type": "PasswordAuthenticator", "declarator": "passwordAuthenticator", "var_name": "passwordAuthenticator"}, {"original_string": "private PublickeyAuthenticator publickeyAuthenticator;", "modifier": "private", "type": "PublickeyAuthenticator", "declarator": "publickeyAuthenticator", "var_name": "publickeyAuthenticator"}, {"original_string": "private KeyboardInteractiveAuthenticator interactiveAuthenticator;", "modifier": "private", "type": "KeyboardInteractiveAuthenticator", "declarator": "interactiveAuthenticator", "var_name": "interactiveAuthenticator"}, {"original_string": "private HostBasedAuthenticator hostBasedAuthenticator;", "modifier": "private", "type": "HostBasedAuthenticator", "declarator": "hostBasedAuthenticator", "var_name": "hostBasedAuthenticator"}, {"original_string": "private GSSAuthenticator gssAuthenticator;", "modifier": "private", "type": "GSSAuthenticator", "declarator": "gssAuthenticator", "var_name": "gssAuthenticator"}, {"original_string": "private final AtomicBoolean started = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "started = new AtomicBoolean(false)", "var_name": "started"}], "methods": [{"identifier": "SshServer", "parameters": "()", "modifiers": "public", "return": "", "signature": " SshServer()", "full_signature": "public  SshServer()", "class_method_signature": "SshServer.SshServer()", "testcase": false, "constructor": true}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "SshServer.getHost()", "testcase": false, "constructor": false}, {"identifier": "setHost", "parameters": "(String host)", "modifiers": "public", "return": "void", "signature": "void setHost(String host)", "full_signature": "public void setHost(String host)", "class_method_signature": "SshServer.setHost(String host)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "SshServer.getPort()", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(int port)", "modifiers": "public", "return": "void", "signature": "void setPort(int port)", "full_signature": "public void setPort(int port)", "class_method_signature": "SshServer.setPort(int port)", "testcase": false, "constructor": false}, {"identifier": "getBoundAddresses", "parameters": "()", "modifiers": "public", "return": "Set<SocketAddress>", "signature": "Set<SocketAddress> getBoundAddresses()", "full_signature": "public Set<SocketAddress> getBoundAddresses()", "class_method_signature": "SshServer.getBoundAddresses()", "testcase": false, "constructor": false}, {"identifier": "getUserAuthFactories", "parameters": "()", "modifiers": "@Override public", "return": "List<UserAuthFactory>", "signature": "List<UserAuthFactory> getUserAuthFactories()", "full_signature": "@Override public List<UserAuthFactory> getUserAuthFactories()", "class_method_signature": "SshServer.getUserAuthFactories()", "testcase": false, "constructor": false}, {"identifier": "setUserAuthFactories", "parameters": "(List<UserAuthFactory> userAuthFactories)", "modifiers": "@Override public", "return": "void", "signature": "void setUserAuthFactories(List<UserAuthFactory> userAuthFactories)", "full_signature": "@Override public void setUserAuthFactories(List<UserAuthFactory> userAuthFactories)", "class_method_signature": "SshServer.setUserAuthFactories(List<UserAuthFactory> userAuthFactories)", "testcase": false, "constructor": false}, {"identifier": "getShellFactory", "parameters": "()", "modifiers": "@Override public", "return": "ShellFactory", "signature": "ShellFactory getShellFactory()", "full_signature": "@Override public ShellFactory getShellFactory()", "class_method_signature": "SshServer.getShellFactory()", "testcase": false, "constructor": false}, {"identifier": "setShellFactory", "parameters": "(ShellFactory shellFactory)", "modifiers": "public", "return": "void", "signature": "void setShellFactory(ShellFactory shellFactory)", "full_signature": "public void setShellFactory(ShellFactory shellFactory)", "class_method_signature": "SshServer.setShellFactory(ShellFactory shellFactory)", "testcase": false, "constructor": false}, {"identifier": "getSessionFactory", "parameters": "()", "modifiers": "public", "return": "SessionFactory", "signature": "SessionFactory getSessionFactory()", "full_signature": "public SessionFactory getSessionFactory()", "class_method_signature": "SshServer.getSessionFactory()", "testcase": false, "constructor": false}, {"identifier": "setSessionFactory", "parameters": "(SessionFactory sessionFactory)", "modifiers": "public", "return": "void", "signature": "void setSessionFactory(SessionFactory sessionFactory)", "full_signature": "public void setSessionFactory(SessionFactory sessionFactory)", "class_method_signature": "SshServer.setSessionFactory(SessionFactory sessionFactory)", "testcase": false, "constructor": false}, {"identifier": "getServerProxyAcceptor", "parameters": "()", "modifiers": "@Override public", "return": "ServerProxyAcceptor", "signature": "ServerProxyAcceptor getServerProxyAcceptor()", "full_signature": "@Override public ServerProxyAcceptor getServerProxyAcceptor()", "class_method_signature": "SshServer.getServerProxyAcceptor()", "testcase": false, "constructor": false}, {"identifier": "setServerProxyAcceptor", "parameters": "(ServerProxyAcceptor proxyAcceptor)", "modifiers": "@Override public", "return": "void", "signature": "void setServerProxyAcceptor(ServerProxyAcceptor proxyAcceptor)", "full_signature": "@Override public void setServerProxyAcceptor(ServerProxyAcceptor proxyAcceptor)", "class_method_signature": "SshServer.setServerProxyAcceptor(ServerProxyAcceptor proxyAcceptor)", "testcase": false, "constructor": false}, {"identifier": "getCommandFactory", "parameters": "()", "modifiers": "@Override public", "return": "CommandFactory", "signature": "CommandFactory getCommandFactory()", "full_signature": "@Override public CommandFactory getCommandFactory()", "class_method_signature": "SshServer.getCommandFactory()", "testcase": false, "constructor": false}, {"identifier": "setCommandFactory", "parameters": "(CommandFactory commandFactory)", "modifiers": "public", "return": "void", "signature": "void setCommandFactory(CommandFactory commandFactory)", "full_signature": "public void setCommandFactory(CommandFactory commandFactory)", "class_method_signature": "SshServer.setCommandFactory(CommandFactory commandFactory)", "testcase": false, "constructor": false}, {"identifier": "getSubsystemFactories", "parameters": "()", "modifiers": "@Override public", "return": "List<SubsystemFactory>", "signature": "List<SubsystemFactory> getSubsystemFactories()", "full_signature": "@Override public List<SubsystemFactory> getSubsystemFactories()", "class_method_signature": "SshServer.getSubsystemFactories()", "testcase": false, "constructor": false}, {"identifier": "setSubsystemFactories", "parameters": "(List<SubsystemFactory> subsystemFactories)", "modifiers": "public", "return": "void", "signature": "void setSubsystemFactories(List<SubsystemFactory> subsystemFactories)", "full_signature": "public void setSubsystemFactories(List<SubsystemFactory> subsystemFactories)", "class_method_signature": "SshServer.setSubsystemFactories(List<SubsystemFactory> subsystemFactories)", "testcase": false, "constructor": false}, {"identifier": "getPasswordAuthenticator", "parameters": "()", "modifiers": "@Override public", "return": "PasswordAuthenticator", "signature": "PasswordAuthenticator getPasswordAuthenticator()", "full_signature": "@Override public PasswordAuthenticator getPasswordAuthenticator()", "class_method_signature": "SshServer.getPasswordAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "setPasswordAuthenticator", "parameters": "(PasswordAuthenticator passwordAuthenticator)", "modifiers": "@Override public", "return": "void", "signature": "void setPasswordAuthenticator(PasswordAuthenticator passwordAuthenticator)", "full_signature": "@Override public void setPasswordAuthenticator(PasswordAuthenticator passwordAuthenticator)", "class_method_signature": "SshServer.setPasswordAuthenticator(PasswordAuthenticator passwordAuthenticator)", "testcase": false, "constructor": false}, {"identifier": "getPublickeyAuthenticator", "parameters": "()", "modifiers": "@Override public", "return": "PublickeyAuthenticator", "signature": "PublickeyAuthenticator getPublickeyAuthenticator()", "full_signature": "@Override public PublickeyAuthenticator getPublickeyAuthenticator()", "class_method_signature": "SshServer.getPublickeyAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "setPublickeyAuthenticator", "parameters": "(PublickeyAuthenticator publickeyAuthenticator)", "modifiers": "@Override public", "return": "void", "signature": "void setPublickeyAuthenticator(PublickeyAuthenticator publickeyAuthenticator)", "full_signature": "@Override public void setPublickeyAuthenticator(PublickeyAuthenticator publickeyAuthenticator)", "class_method_signature": "SshServer.setPublickeyAuthenticator(PublickeyAuthenticator publickeyAuthenticator)", "testcase": false, "constructor": false}, {"identifier": "getKeyboardInteractiveAuthenticator", "parameters": "()", "modifiers": "@Override public", "return": "KeyboardInteractiveAuthenticator", "signature": "KeyboardInteractiveAuthenticator getKeyboardInteractiveAuthenticator()", "full_signature": "@Override public KeyboardInteractiveAuthenticator getKeyboardInteractiveAuthenticator()", "class_method_signature": "SshServer.getKeyboardInteractiveAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "setKeyboardInteractiveAuthenticator", "parameters": "(KeyboardInteractiveAuthenticator interactiveAuthenticator)", "modifiers": "@Override public", "return": "void", "signature": "void setKeyboardInteractiveAuthenticator(KeyboardInteractiveAuthenticator interactiveAuthenticator)", "full_signature": "@Override public void setKeyboardInteractiveAuthenticator(KeyboardInteractiveAuthenticator interactiveAuthenticator)", "class_method_signature": "SshServer.setKeyboardInteractiveAuthenticator(KeyboardInteractiveAuthenticator interactiveAuthenticator)", "testcase": false, "constructor": false}, {"identifier": "getGSSAuthenticator", "parameters": "()", "modifiers": "@Override public", "return": "GSSAuthenticator", "signature": "GSSAuthenticator getGSSAuthenticator()", "full_signature": "@Override public GSSAuthenticator getGSSAuthenticator()", "class_method_signature": "SshServer.getGSSAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "setGSSAuthenticator", "parameters": "(GSSAuthenticator gssAuthenticator)", "modifiers": "@Override public", "return": "void", "signature": "void setGSSAuthenticator(GSSAuthenticator gssAuthenticator)", "full_signature": "@Override public void setGSSAuthenticator(GSSAuthenticator gssAuthenticator)", "class_method_signature": "SshServer.setGSSAuthenticator(GSSAuthenticator gssAuthenticator)", "testcase": false, "constructor": false}, {"identifier": "getHostBasedAuthenticator", "parameters": "()", "modifiers": "@Override public", "return": "HostBasedAuthenticator", "signature": "HostBasedAuthenticator getHostBasedAuthenticator()", "full_signature": "@Override public HostBasedAuthenticator getHostBasedAuthenticator()", "class_method_signature": "SshServer.getHostBasedAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "setHostBasedAuthenticator", "parameters": "(HostBasedAuthenticator hostBasedAuthenticator)", "modifiers": "@Override public", "return": "void", "signature": "void setHostBasedAuthenticator(HostBasedAuthenticator hostBasedAuthenticator)", "full_signature": "@Override public void setHostBasedAuthenticator(HostBasedAuthenticator hostBasedAuthenticator)", "class_method_signature": "SshServer.setHostBasedAuthenticator(HostBasedAuthenticator hostBasedAuthenticator)", "testcase": false, "constructor": false}, {"identifier": "getKeyPairProvider", "parameters": "()", "modifiers": "@Override public", "return": "KeyPairProvider", "signature": "KeyPairProvider getKeyPairProvider()", "full_signature": "@Override public KeyPairProvider getKeyPairProvider()", "class_method_signature": "SshServer.getKeyPairProvider()", "testcase": false, "constructor": false}, {"identifier": "setKeyPairProvider", "parameters": "(KeyPairProvider keyPairProvider)", "modifiers": "@Override public", "return": "void", "signature": "void setKeyPairProvider(KeyPairProvider keyPairProvider)", "full_signature": "@Override public void setKeyPairProvider(KeyPairProvider keyPairProvider)", "class_method_signature": "SshServer.setKeyPairProvider(KeyPairProvider keyPairProvider)", "testcase": false, "constructor": false}, {"identifier": "getHostKeyCertificateProvider", "parameters": "()", "modifiers": "@Override public", "return": "HostKeyCertificateProvider", "signature": "HostKeyCertificateProvider getHostKeyCertificateProvider()", "full_signature": "@Override public HostKeyCertificateProvider getHostKeyCertificateProvider()", "class_method_signature": "SshServer.getHostKeyCertificateProvider()", "testcase": false, "constructor": false}, {"identifier": "setHostKeyCertificateProvider", "parameters": "(HostKeyCertificateProvider hostKeyCertificateProvider)", "modifiers": "@Override public", "return": "void", "signature": "void setHostKeyCertificateProvider(HostKeyCertificateProvider hostKeyCertificateProvider)", "full_signature": "@Override public void setHostKeyCertificateProvider(HostKeyCertificateProvider hostKeyCertificateProvider)", "class_method_signature": "SshServer.setHostKeyCertificateProvider(HostKeyCertificateProvider hostKeyCertificateProvider)", "testcase": false, "constructor": false}, {"identifier": "checkConfig", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void checkConfig()", "full_signature": "@Override protected void checkConfig()", "class_method_signature": "SshServer.checkConfig()", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "public boolean isStarted()", "class_method_signature": "SshServer.isStarted()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "SshServer.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "SshServer.stop()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(boolean immediately)", "modifiers": "public", "return": "void", "signature": "void stop(boolean immediately)", "full_signature": "public void stop(boolean immediately)", "class_method_signature": "SshServer.stop(boolean immediately)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void open()", "full_signature": "public void open()", "class_method_signature": "SshServer.open()", "testcase": false, "constructor": false}, {"identifier": "getInnerCloseable", "parameters": "()", "modifiers": "@Override protected", "return": "Closeable", "signature": "Closeable getInnerCloseable()", "full_signature": "@Override protected Closeable getInnerCloseable()", "class_method_signature": "SshServer.getInnerCloseable()", "testcase": false, "constructor": false}, {"identifier": "getActiveSessions", "parameters": "()", "modifiers": "public", "return": "List<AbstractSession>", "signature": "List<AbstractSession> getActiveSessions()", "full_signature": "public List<AbstractSession> getActiveSessions()", "class_method_signature": "SshServer.getActiveSessions()", "testcase": false, "constructor": false}, {"identifier": "createAcceptor", "parameters": "()", "modifiers": "protected", "return": "IoAcceptor", "signature": "IoAcceptor createAcceptor()", "full_signature": "protected IoAcceptor createAcceptor()", "class_method_signature": "SshServer.createAcceptor()", "testcase": false, "constructor": false}, {"identifier": "createSessionFactory", "parameters": "()", "modifiers": "protected", "return": "SessionFactory", "signature": "SessionFactory createSessionFactory()", "full_signature": "protected SessionFactory createSessionFactory()", "class_method_signature": "SshServer.createSessionFactory()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SshServer.toString()", "testcase": false, "constructor": false}, {"identifier": "setUpDefaultServer", "parameters": "()", "modifiers": "public static", "return": "SshServer", "signature": "SshServer setUpDefaultServer()", "full_signature": "public static SshServer setUpDefaultServer()", "class_method_signature": "SshServer.setUpDefaultServer()", "testcase": false, "constructor": false}], "file": "sshd-core/src/main/java/org/apache/sshd/server/SshServer.java"}, "focal_method": {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void stop() throws IOException {\n        stop(false);\n    }", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "SshServer.stop()", "testcase": false, "constructor": false, "invocations": ["stop"]}, "repository": {"repo_id": 688360, "url": "https://github.com/apache/mina-sshd", "stars": 235, "created": "5/26/2010 11:38:08 PM +00:00", "updates": "2020-01-27T13:12:10+00:00", "fork": "False", "license": "licensed"}}