{"test_class": {"identifier": "NullInputStreamTest", "superclass": "extends JUnitTestSupport", "interfaces": "", "fields": [{"original_string": "private static final NullInputStream INSTANCE = new NullInputStream();", "modifier": "private static final", "type": "NullInputStream", "declarator": "INSTANCE = new NullInputStream()", "var_name": "INSTANCE"}], "file": "sshd-common/src/test/java/org/apache/sshd/common/util/io/NullInputStreamTest.java"}, "test_case": {"identifier": "testReadPartialBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadPartialBuffer() throws IOException {\n        byte[] buf = new byte[Byte.SIZE];\n        assertEquals(-1, INSTANCE.read(buf, buf.length / 2, (buf.length / 2) - 1));\n    }", "signature": "void testReadPartialBuffer()", "full_signature": "@Test public void testReadPartialBuffer()", "class_method_signature": "NullInputStreamTest.testReadPartialBuffer()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "read"]}, "focal_class": {"identifier": "NullInputStream", "superclass": "extends InputStream", "interfaces": "implements Channel", "fields": [{"original_string": "private final AtomicBoolean open = new AtomicBoolean(true);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "open = new AtomicBoolean(true)", "var_name": "open"}], "methods": [{"identifier": "NullInputStream", "parameters": "()", "modifiers": "public", "return": "", "signature": " NullInputStream()", "full_signature": "public  NullInputStream()", "class_method_signature": "NullInputStream.NullInputStream()", "testcase": false, "constructor": true}, {"identifier": "isOpen", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "@Override public boolean isOpen()", "class_method_signature": "NullInputStream.isOpen()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "NullInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b, int off, int len)", "full_signature": "@Override public int read(byte[] b, int off, int len)", "class_method_signature": "NullInputStream.read(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(long n)", "modifiers": "@Override public", "return": "long", "signature": "long skip(long n)", "full_signature": "@Override public long skip(long n)", "class_method_signature": "NullInputStream.skip(long n)", "testcase": false, "constructor": false}, {"identifier": "available", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int available()", "full_signature": "@Override public int available()", "class_method_signature": "NullInputStream.available()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void reset()", "full_signature": "@Override public synchronized void reset()", "class_method_signature": "NullInputStream.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NullInputStream.close()", "testcase": false, "constructor": false}], "file": "sshd-common/src/main/java/org/apache/sshd/common/util/io/NullInputStream.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int read() throws IOException {\n        if (!isOpen()) {\n            throw new EOFException(\"Stream is closed for reading one value\");\n        }\n        return -1;\n    }", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "NullInputStream.read()", "testcase": false, "constructor": false, "invocations": ["isOpen"]}, "repository": {"repo_id": 688360, "url": "https://github.com/apache/mina-sshd", "stars": 235, "created": "5/26/2010 11:38:08 PM +00:00", "updates": "2020-01-27T13:12:10+00:00", "fork": "False", "license": "licensed"}}