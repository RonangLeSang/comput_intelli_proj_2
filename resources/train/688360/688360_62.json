{"test_class": {"identifier": "OpenSSHKeyPairResourceWriterTest", "superclass": "extends JUnitTestSupport", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private final TestData data;", "modifier": "private final", "type": "TestData", "declarator": "data", "var_name": "data"}, {"original_string": "private KeyPair testKey;", "modifier": "private", "type": "KeyPair", "declarator": "testKey", "var_name": "testKey"}], "file": "sshd-common/src/test/java/org/apache/sshd/common/config/keys/writer/openssh/OpenSSHKeyPairResourceWriterTest.java"}, "test_case": {"identifier": "testFileRoundtripAsymmetric", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFileRoundtripAsymmetric() throws Exception {\n        // Write first unencrypted, then encrypted. read both and compare.\n        Path tmp = getTemporaryOutputFile();\n        try (ByteArrayOutputStream out = new SecureByteArrayOutputStream()) {\n            OpenSSHKeyPairResourceWriter.INSTANCE.writePrivateKey(testKey, \"a comment\", null, out);\n            writeToFile(tmp, out.toByteArray());\n        }\n        try (InputStream in = Files.newInputStream(tmp)) {\n            KeyPair key = SecurityUtils.loadKeyPairIdentities(null,\n                    new PathResource(tmp), in, null).iterator().next();\n            assertNotNull(\"No key pair parsed\", key);\n            assertKeyPairEquals(\"Mismatched recovered keys\", testKey, key);\n            assertTrue(\"Keys should be equal\", compare(key, testKey));\n            Path tmp2 = getTemporaryOutputFile(\"again\");\n            try (ByteArrayOutputStream out = new SecureByteArrayOutputStream()) {\n                OpenSSHKeyEncryptionContext options = new OpenSSHKeyEncryptionContext();\n                options.setPassword(\"nonsense\");\n                options.setCipherName(\"AES\");\n                options.setCipherMode(\"CTR\");\n                options.setCipherType(\"256\");\n                OpenSSHKeyPairResourceWriter.INSTANCE.writePrivateKey(key, \"a comment\", options, out);\n                writeToFile(tmp2, out.toByteArray());\n            }\n            try (InputStream in2 = Files.newInputStream(tmp2)) {\n                KeyPair key2 = SecurityUtils.loadKeyPairIdentities(null,\n                        new PathResource(tmp2), in2, FilePasswordProvider.of(\"nonsense\")).iterator().next();\n                assertNotNull(\"No key pair parsed\", key2);\n                assertKeyPairEquals(\"Mismatched recovered keys\", testKey, key2);\n                assertTrue(\"Keys should be equal\", compare(key2, testKey));\n\n                assertKeyPairEquals(\"Mismatched recovered keys\", key, key2);\n                assertTrue(\"Keys should be equal\", compare(key2, key));\n            }\n        }\n    }", "signature": "void testFileRoundtripAsymmetric()", "full_signature": "@Test public void testFileRoundtripAsymmetric()", "class_method_signature": "OpenSSHKeyPairResourceWriterTest.testFileRoundtripAsymmetric()", "testcase": true, "constructor": false, "invocations": ["getTemporaryOutputFile", "writePrivateKey", "writeToFile", "toByteArray", "newInputStream", "next", "iterator", "loadKeyPairIdentities", "assertNotNull", "assertKeyPairEquals", "assertTrue", "compare", "getTemporaryOutputFile", "setPassword", "setCipherName", "setCipherMode", "setCipherType", "writePrivateKey", "writeToFile", "toByteArray", "newInputStream", "next", "iterator", "loadKeyPairIdentities", "of", "assertNotNull", "assertKeyPairEquals", "assertTrue", "compare", "assertKeyPairEquals", "assertTrue", "compare"]}, "focal_class": {"identifier": "OpenSSHKeyPairResourceWriter", "superclass": "", "interfaces": "implements KeyPairResourceWriter<OpenSSHKeyEncryptionContext>", "fields": [{"original_string": "public static final String DASHES = \"-----\";", "modifier": "public static final", "type": "String", "declarator": "DASHES = \"-----\"", "var_name": "DASHES"}, {"original_string": "public static final int LINE_LENGTH = 70;", "modifier": "public static final", "type": "int", "declarator": "LINE_LENGTH = 70", "var_name": "LINE_LENGTH"}, {"original_string": "public static final OpenSSHKeyPairResourceWriter INSTANCE = new OpenSSHKeyPairResourceWriter();", "modifier": "public static final", "type": "OpenSSHKeyPairResourceWriter", "declarator": "INSTANCE = new OpenSSHKeyPairResourceWriter()", "var_name": "INSTANCE"}, {"original_string": "private static final Pattern VERTICALSPACE = Pattern.compile(\"\\\\v\");", "modifier": "private static final", "type": "Pattern", "declarator": "VERTICALSPACE = Pattern.compile(\"\\\\v\")", "var_name": "VERTICALSPACE"}], "methods": [{"identifier": "OpenSSHKeyPairResourceWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " OpenSSHKeyPairResourceWriter()", "full_signature": "public  OpenSSHKeyPairResourceWriter()", "class_method_signature": "OpenSSHKeyPairResourceWriter.OpenSSHKeyPairResourceWriter()", "testcase": false, "constructor": true}, {"identifier": "writePrivateKey", "parameters": "(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void writePrivateKey(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "full_signature": "@Override public void writePrivateKey(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "class_method_signature": "OpenSSHKeyPairResourceWriter.writePrivateKey(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "determineEncryption", "parameters": "(OpenSSHKeyEncryptionContext options)", "modifiers": "public static", "return": "OpenSSHKeyEncryptionContext", "signature": "OpenSSHKeyEncryptionContext determineEncryption(OpenSSHKeyEncryptionContext options)", "full_signature": "public static OpenSSHKeyEncryptionContext determineEncryption(OpenSSHKeyEncryptionContext options)", "class_method_signature": "OpenSSHKeyPairResourceWriter.determineEncryption(OpenSSHKeyEncryptionContext options)", "testcase": false, "constructor": false}, {"identifier": "encodePrivateKey", "parameters": "(KeyPair key, String keyType, int blockSize, String comment)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodePrivateKey(KeyPair key, String keyType, int blockSize, String comment)", "full_signature": "public static byte[] encodePrivateKey(KeyPair key, String keyType, int blockSize, String comment)", "class_method_signature": "OpenSSHKeyPairResourceWriter.encodePrivateKey(KeyPair key, String keyType, int blockSize, String comment)", "testcase": false, "constructor": false}, {"identifier": "encodePublicKey", "parameters": "(PublicKey key, String keyType)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodePublicKey(PublicKey key, String keyType)", "full_signature": "public static byte[] encodePublicKey(PublicKey key, String keyType)", "class_method_signature": "OpenSSHKeyPairResourceWriter.encodePublicKey(PublicKey key, String keyType)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream out, byte[] bytes, int lineLength)", "modifiers": "public static", "return": "void", "signature": "void write(OutputStream out, byte[] bytes, int lineLength)", "full_signature": "public static void write(OutputStream out, byte[] bytes, int lineLength)", "class_method_signature": "OpenSSHKeyPairResourceWriter.write(OutputStream out, byte[] bytes, int lineLength)", "testcase": false, "constructor": false}, {"identifier": "writePublicKey", "parameters": "(PublicKey key, String comment, OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void writePublicKey(PublicKey key, String comment, OutputStream out)", "full_signature": "@Override public void writePublicKey(PublicKey key, String comment, OutputStream out)", "class_method_signature": "OpenSSHKeyPairResourceWriter.writePublicKey(PublicKey key, String comment, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "firstLine", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String firstLine(String text)", "full_signature": "public static String firstLine(String text)", "class_method_signature": "OpenSSHKeyPairResourceWriter.firstLine(String text)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream out, String s)", "modifiers": "public static", "return": "void", "signature": "void write(OutputStream out, String s)", "full_signature": "public static void write(OutputStream out, String s)", "class_method_signature": "OpenSSHKeyPairResourceWriter.write(OutputStream out, String s)", "testcase": false, "constructor": false}], "file": "sshd-common/src/main/java/org/apache/sshd/common/config/keys/writer/openssh/OpenSSHKeyPairResourceWriter.java"}, "focal_method": {"identifier": "writePrivateKey", "parameters": "(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writePrivateKey(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)\n            throws IOException, GeneralSecurityException {\n        Objects.requireNonNull(key, \"Cannot write null key\");\n        String keyType = KeyUtils.getKeyType(key);\n        if (GenericUtils.isEmpty(keyType)) {\n            throw new GeneralSecurityException(\"Unsupported key: \" + key.getClass().getName());\n        }\n        OpenSSHKeyEncryptionContext opt = determineEncryption(options);\n        // See https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.key\n        write(out, DASHES + OpenSSHKeyPairResourceParser.BEGIN_MARKER + DASHES); // $NON-NLS-1$\n        // OpenSSH expects a single \\n here, not a system line terminator!\n        out.write('\\n');\n        String cipherName = OpenSSHParserContext.NONE_CIPHER;\n        int blockSize = 8; // OpenSSH \"none\" cipher has block size 8\n        if (opt != null) {\n            cipherName = opt.getCipherFactoryName();\n            CipherInformation spec = BuiltinCiphers.fromFactoryName(cipherName);\n            if (spec == null) {\n                // Internal error, no translation\n                throw new IllegalArgumentException(\"Unsupported cipher \" + cipherName); //$NON-NLS-1$\n            }\n            blockSize = spec.getCipherBlockSize();\n        }\n        byte[] privateBytes = encodePrivateKey(key, keyType, blockSize, comment);\n        String kdfName = OpenSSHParserContext.NONE_CIPHER;\n        byte[] kdfOptions = GenericUtils.EMPTY_BYTE_ARRAY;\n        try (SecureByteArrayOutputStream bytes = new SecureByteArrayOutputStream()) {\n            write(bytes, OpenSSHKeyPairResourceParser.AUTH_MAGIC);\n            bytes.write(0);\n            if (opt != null) {\n                KeyEncryptor encryptor = new KeyEncryptor(opt);\n                opt.setPrivateKeyObfuscator(encryptor);\n\n                byte[] encodedBytes = encryptor.applyPrivateKeyCipher(privateBytes, opt, true);\n                Arrays.fill(privateBytes, (byte) 0);\n                privateBytes = encodedBytes;\n                kdfName = BCryptKdfOptions.NAME;\n                kdfOptions = encryptor.getKdfOptions();\n            }\n            KeyEntryResolver.encodeString(bytes, cipherName);\n            KeyEntryResolver.encodeString(bytes, kdfName);\n            KeyEntryResolver.writeRLEBytes(bytes, kdfOptions);\n            KeyEntryResolver.encodeInt(bytes, 1); // 1 key only.\n            KeyEntryResolver.writeRLEBytes(bytes, encodePublicKey(key.getPublic(), keyType));\n            KeyEntryResolver.writeRLEBytes(bytes, privateBytes);\n            write(out, bytes.toByteArray(), LINE_LENGTH);\n        } finally {\n            Arrays.fill(privateBytes, (byte) 0);\n        }\n        write(out, DASHES + OpenSSHKeyPairResourceParser.END_MARKER + DASHES); // $NON-NLS-1$\n        out.write('\\n');\n    }", "signature": "void writePrivateKey(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "full_signature": "@Override public void writePrivateKey(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "class_method_signature": "OpenSSHKeyPairResourceWriter.writePrivateKey(KeyPair key, String comment, OpenSSHKeyEncryptionContext options, OutputStream out)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getKeyType", "isEmpty", "getName", "getClass", "determineEncryption", "write", "write", "getCipherFactoryName", "fromFactoryName", "getCipherBlockSize", "encodePrivateKey", "write", "write", "setPrivateKeyObfuscator", "applyPrivateKeyCipher", "fill", "getKdfOptions", "encodeString", "encodeString", "writeRLEBytes", "encodeInt", "writeRLEBytes", "encodePublicKey", "getPublic", "writeRLEBytes", "write", "toByteArray", "fill", "write", "write"]}, "repository": {"repo_id": 688360, "url": "https://github.com/apache/mina-sshd", "stars": 235, "created": "5/26/2010 11:38:08 PM +00:00", "updates": "2020-01-27T13:12:10+00:00", "fork": "False", "license": "licensed"}}