{"test_class": {"identifier": "EventListenerUtilsTest", "superclass": "extends JUnitTestSupport", "interfaces": "", "fields": [], "file": "sshd-common/src/test/java/org/apache/sshd/common/util/EventListenerUtilsTest.java"}, "test_case": {"identifier": "testProxyWrapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProxyWrapper() {\n        List<ProxyListenerImpl> impls = new ArrayList<>();\n        for (int index = 0; index < Byte.SIZE; index++) {\n            impls.add(new ProxyListenerImpl());\n        }\n\n        ProxyListener listener = EventListenerUtils.proxyWrapper(ProxyListener.class, impls);\n        String expStr = getCurrentTestName();\n        Number expNum = System.currentTimeMillis();\n        listener.callMeWithString(expStr);\n        listener.callMeWithNumber(expNum);\n\n        for (int index = 0; index < impls.size(); index++) {\n            ProxyListenerImpl l = impls.get(index);\n            assertSame(\"Mismatched string at listener #\" + index, expStr, l.getStringValue());\n            assertSame(\"Mismatched number at listener #\" + index, expNum, l.getNumberValue());\n        }\n    }", "signature": "void testProxyWrapper()", "full_signature": "@Test public void testProxyWrapper()", "class_method_signature": "EventListenerUtilsTest.testProxyWrapper()", "testcase": true, "constructor": false, "invocations": ["add", "proxyWrapper", "getCurrentTestName", "currentTimeMillis", "callMeWithString", "callMeWithNumber", "size", "get", "assertSame", "getStringValue", "assertSame", "getNumberValue"]}, "focal_class": {"identifier": "EventListenerUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"checkstyle:anoninnerlength\")\n    public static final Comparator<EventListener> LISTENER_INSTANCE_COMPARATOR = (l1, l2) -> {\n        if (l1 == l2) {\n            return 0;\n        } else if (l1 == null) {\n            return 1;\n        } else if (l2 == null) {\n            return -1;\n        }\n\n        Class<?> c1 = l1.getClass();\n        Class<?> c2 = l2.getClass();\n        boolean checkHashCodes = true;\n        if (Proxy.isProxyClass(c1)) {\n            if (Proxy.isProxyClass(c2)) {\n                checkHashCodes = false; // cannot call hashCode on a proxy\n            } else {\n                return 1;\n            }\n        } else if (Proxy.isProxyClass(c2)) {\n            return -1;\n        }\n\n        if (checkHashCodes) {\n            int nRes = Integer.compare(l1.hashCode(), l2.hashCode());\n            if (nRes != 0) {\n                return nRes;\n            }\n        }\n\n        int nRes = Integer.compare(System.identityHashCode(l1), System.identityHashCode(l2));\n        if (nRes != 0) {\n            return nRes;\n        }\n\n        if (c1 != c2) {\n            return c1.getName().compareTo(c2.getName());\n        }\n\n        String s1 = Objects.toString(l1.toString(), \"\");\n        String s2 = Objects.toString(l2.toString(), \"\");\n        nRes = s1.compareTo(s2);\n        if (nRes != 0) {\n            return nRes;\n        }\n        throw new UnsupportedOperationException(\"Ran out of options to compare instance of \" + s1 + \" vs. \" + s2);\n    };", "modifier": "@SuppressWarnings(\"checkstyle:anoninnerlength\")\n    public static final", "type": "Comparator<EventListener>", "declarator": "LISTENER_INSTANCE_COMPARATOR = (l1, l2) -> {\n        if (l1 == l2) {\n            return 0;\n        } else if (l1 == null) {\n            return 1;\n        } else if (l2 == null) {\n            return -1;\n        }\n\n        Class<?> c1 = l1.getClass();\n        Class<?> c2 = l2.getClass();\n        boolean checkHashCodes = true;\n        if (Proxy.isProxyClass(c1)) {\n            if (Proxy.isProxyClass(c2)) {\n                checkHashCodes = false; // cannot call hashCode on a proxy\n            } else {\n                return 1;\n            }\n        } else if (Proxy.isProxyClass(c2)) {\n            return -1;\n        }\n\n        if (checkHashCodes) {\n            int nRes = Integer.compare(l1.hashCode(), l2.hashCode());\n            if (nRes != 0) {\n                return nRes;\n            }\n        }\n\n        int nRes = Integer.compare(System.identityHashCode(l1), System.identityHashCode(l2));\n        if (nRes != 0) {\n            return nRes;\n        }\n\n        if (c1 != c2) {\n            return c1.getName().compareTo(c2.getName());\n        }\n\n        String s1 = Objects.toString(l1.toString(), \"\");\n        String s2 = Objects.toString(l2.toString(), \"\");\n        nRes = s1.compareTo(s2);\n        if (nRes != 0) {\n            return nRes;\n        }\n        throw new UnsupportedOperationException(\"Ran out of options to compare instance of \" + s1 + \" vs. \" + s2);\n    }", "var_name": "LISTENER_INSTANCE_COMPARATOR"}], "methods": [{"identifier": "EventListenerUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " EventListenerUtils()", "full_signature": "private  EventListenerUtils()", "class_method_signature": "EventListenerUtils.EventListenerUtils()", "testcase": false, "constructor": true}, {"identifier": "synchronizedListenersSet", "parameters": "(Collection<? extends L> listeners)", "modifiers": "public static", "return": "Set<L>", "signature": "Set<L> synchronizedListenersSet(Collection<? extends L> listeners)", "full_signature": "public static Set<L> synchronizedListenersSet(Collection<? extends L> listeners)", "class_method_signature": "EventListenerUtils.synchronizedListenersSet(Collection<? extends L> listeners)", "testcase": false, "constructor": false}, {"identifier": "synchronizedListenersSet", "parameters": "()", "modifiers": "public static", "return": "Set<L>", "signature": "Set<L> synchronizedListenersSet()", "full_signature": "public static Set<L> synchronizedListenersSet()", "class_method_signature": "EventListenerUtils.synchronizedListenersSet()", "testcase": false, "constructor": false}, {"identifier": "proxyWrapper", "parameters": "(Class<T> listenerType, Iterable<? extends T> listeners)", "modifiers": "public static", "return": "T", "signature": "T proxyWrapper(Class<T> listenerType, Iterable<? extends T> listeners)", "full_signature": "public static T proxyWrapper(Class<T> listenerType, Iterable<? extends T> listeners)", "class_method_signature": "EventListenerUtils.proxyWrapper(Class<T> listenerType, Iterable<? extends T> listeners)", "testcase": false, "constructor": false}, {"identifier": "proxyWrapper", "parameters": "(\n            Class<T> listenerType, ClassLoader loader, Iterable<? extends T> listeners)", "modifiers": "public static", "return": "T", "signature": "T proxyWrapper(\n            Class<T> listenerType, ClassLoader loader, Iterable<? extends T> listeners)", "full_signature": "public static T proxyWrapper(\n            Class<T> listenerType, ClassLoader loader, Iterable<? extends T> listeners)", "class_method_signature": "EventListenerUtils.proxyWrapper(\n            Class<T> listenerType, ClassLoader loader, Iterable<? extends T> listeners)", "testcase": false, "constructor": false}], "file": "sshd-common/src/main/java/org/apache/sshd/common/util/EventListenerUtils.java"}, "focal_method": {"identifier": "proxyWrapper", "parameters": "(Class<T> listenerType, Iterable<? extends T> listeners)", "modifiers": "public static", "return": "T", "body": "public static <T extends SshdEventListener> T proxyWrapper(Class<T> listenerType, Iterable<? extends T> listeners) {\n        return proxyWrapper(listenerType, listenerType.getClassLoader(), listeners);\n    }", "signature": "T proxyWrapper(Class<T> listenerType, Iterable<? extends T> listeners)", "full_signature": "public static T proxyWrapper(Class<T> listenerType, Iterable<? extends T> listeners)", "class_method_signature": "EventListenerUtils.proxyWrapper(Class<T> listenerType, Iterable<? extends T> listeners)", "testcase": false, "constructor": false, "invocations": ["proxyWrapper", "getClassLoader"]}, "repository": {"repo_id": 688360, "url": "https://github.com/apache/mina-sshd", "stars": 235, "created": "5/26/2010 11:38:08 PM +00:00", "updates": "2020-01-27T13:12:10+00:00", "fork": "False", "license": "licensed"}}