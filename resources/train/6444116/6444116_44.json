{"test_class": {"identifier": "MuteCommandTest", "superclass": "extends BasePluginDbTest", "interfaces": "", "fields": [{"original_string": "private MuteCommand cmd;", "modifier": "private", "type": "MuteCommand", "declarator": "cmd", "var_name": "cmd"}], "file": "common/src/test/java/me/confuser/banmanager/common/commands/MuteCommandTest.java"}, "test_case": {"identifier": "shouldFailIfExempt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldFailIfExempt() {\n    PlayerData player = testUtils.createRandomPlayer();\n    CommonServer server = spy(plugin.getServer());\n    CommonSender sender = spy(server.getConsoleSender());\n    CommonPlayer commonPlayer = spy(server.getPlayer(player.getName()));\n    String[] args = new String[]{player.getName(), \"test\"};\n\n    when(sender.hasPermission(\"bm.exempt.override.mute\")).thenReturn(false);\n    when(commonPlayer.hasPermission(\"bm.exempt.mute\")).thenReturn(true);\n\n    assert (cmd.onCommand(sender, new CommandParser(plugin, args, 1)));\n    verify(sender).sendMessage(\"&c\" + player.getName() + \" is exempt from that action\");\n  }", "signature": "void shouldFailIfExempt()", "full_signature": "@Test public void shouldFailIfExempt()", "class_method_signature": "MuteCommandTest.shouldFailIfExempt()", "testcase": true, "constructor": false, "invocations": ["createRandomPlayer", "spy", "getServer", "spy", "getConsoleSender", "spy", "getPlayer", "getName", "getName", "thenReturn", "when", "hasPermission", "thenReturn", "when", "hasPermission", "onCommand", "sendMessage", "verify", "getName"]}, "focal_class": {"identifier": "MuteCommand", "superclass": "extends CommonCommand", "interfaces": "", "fields": [], "methods": [{"identifier": "MuteCommand", "parameters": "(BanManagerPlugin plugin)", "modifiers": "public", "return": "", "signature": " MuteCommand(BanManagerPlugin plugin)", "full_signature": "public  MuteCommand(BanManagerPlugin plugin)", "class_method_signature": "MuteCommand.MuteCommand(BanManagerPlugin plugin)", "testcase": false, "constructor": true}, {"identifier": "onCommand", "parameters": "(final CommonSender sender, CommandParser parser)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onCommand(final CommonSender sender, CommandParser parser)", "full_signature": "@Override public boolean onCommand(final CommonSender sender, CommandParser parser)", "class_method_signature": "MuteCommand.onCommand(final CommonSender sender, CommandParser parser)", "testcase": false, "constructor": false}], "file": "common/src/main/java/me/confuser/banmanager/common/commands/MuteCommand.java"}, "focal_method": {"identifier": "onCommand", "parameters": "(final CommonSender sender, CommandParser parser)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean onCommand(final CommonSender sender, CommandParser parser) {\n    final boolean isSilent = parser.isSilent();\n\n    if (isSilent && !sender.hasPermission(getPermission() + \".silent\")) {\n      sender.sendMessage(Message.getString(\"sender.error.noPermission\"));\n      return true;\n    }\n\n    final boolean isSoft = parser.isSoft();\n\n    if (isSoft && !sender.hasPermission(getPermission() + \".soft\")) {\n      sender.sendMessage(Message.getString(\"sender.error.noPermission\"));\n      return true;\n    }\n\n    if (parser.args.length < 2) {\n      return false;\n    }\n\n    if (parser.isInvalidReason()) {\n      Message.get(\"sender.error.invalidReason\")\n              .set(\"reason\", parser.getReason().getMessage())\n              .sendTo(sender);\n      return true;\n    }\n\n    if (parser.args[0].equalsIgnoreCase(sender.getName())) {\n      sender.sendMessage(Message.getString(\"sender.error.noSelf\"));\n      return true;\n    }\n\n    // Check if UUID vs name\n    final String playerName = parser.args[0];\n    final boolean isUUID = playerName.length() > 16;\n    final boolean isMuted;\n\n    if (isUUID) {\n      try {\n        isMuted = getPlugin().getPlayerMuteStorage().isMuted(UUID.fromString(playerName));\n      } catch (IllegalArgumentException e) {\n        sender.sendMessage(Message.get(\"sender.error.notFound\").set(\"player\", playerName).toString());\n        return true;\n      }\n    } else {\n      isMuted = getPlugin().getPlayerMuteStorage().isMuted(playerName);\n    }\n\n    if (isMuted && !sender.hasPermission(\"bm.command.mute.override\")) {\n      Message message = Message.get(\"mute.error.exists\");\n      message.set(\"player\", playerName);\n\n      sender.sendMessage(message.toString());\n      return true;\n    }\n\n    CommonPlayer onlinePlayer;\n\n    if (isUUID) {\n      onlinePlayer = getPlugin().getServer().getPlayer(UUID.fromString(playerName));\n    } else {\n      onlinePlayer = getPlugin().getServer().getPlayer(playerName);\n    }\n\n    if (onlinePlayer == null) {\n      if (!sender.hasPermission(\"bm.command.mute.offline\")) {\n        sender.sendMessage(Message.getString(\"sender.error.offlinePermission\"));\n        return true;\n      }\n    } else if (!sender.hasPermission(\"bm.exempt.override.mute\") && onlinePlayer.hasPermission(\"bm.exempt.mute\")) {\n      Message.get(\"sender.error.exempt\").set(\"player\", onlinePlayer.getName()).sendTo(sender);\n      return true;\n    }\n\n    final Reason reason = parser.getReason();\n\n    getPlugin().getScheduler().runAsync(() -> {\n      final PlayerData player = getPlayer(sender, playerName, true);\n\n      if (player == null) {\n        sender.sendMessage(Message.get(\"sender.error.notFound\").set(\"player\", playerName).toString());\n        return;\n      }\n\n      if (getPlugin().getExemptionsConfig().isExempt(player, \"mute\")) {\n        sender.sendMessage(Message.get(\"sender.error.exempt\").set(\"player\", playerName).toString());\n        return;\n      }\n\n      try {\n        if (getPlugin().getPlayerMuteStorage().isRecentlyMuted(player, getCooldown())) {\n          Message.get(\"mute.error.cooldown\").sendTo(sender);\n          return;\n        }\n      } catch (SQLException e) {\n        sender.sendMessage(Message.get(\"sender.error.exception\").toString());\n        e.printStackTrace();\n        return;\n      }\n\n      PlayerData actor = sender.getData();\n\n      if (isMuted) {\n        PlayerMuteData mute;\n\n        if (isUUID) {\n          mute = getPlugin().getPlayerMuteStorage().getMute(UUID.fromString(playerName));\n        } else {\n          mute = getPlugin().getPlayerMuteStorage().getMute(playerName);\n        }\n\n        if (mute != null) {\n          try {\n            getPlugin().getPlayerMuteStorage().unmute(mute, actor);\n          } catch (SQLException e) {\n            sender.sendMessage(Message.get(\"sender.error.exception\").toString());\n            e.printStackTrace();\n            return;\n          }\n        }\n      }\n\n      PlayerMuteData mute = new PlayerMuteData(player, actor, reason.getMessage(), isSilent, isSoft);\n      boolean created;\n\n      try {\n        created = getPlugin().getPlayerMuteStorage().mute(mute);\n      } catch (SQLException e) {\n        handlePunishmentCreateException(e, sender, Message.get(\"mute.error.exists\").set(\"player\",\n            playerName));\n        return;\n      }\n\n      if (!created) {\n        return;\n      }\n\n      handlePrivateNotes(player, actor, reason);\n\n      CommonPlayer commonPlayer = getPlugin().getServer().getPlayer(player.getUUID());\n\n      if (isSoft || commonPlayer == null) return;\n\n      Message muteMessage = Message.get(\"mute.player.disallowed\")\n          .set(\"displayName\", commonPlayer.getDisplayName())\n          .set(\"player\", player.getName())\n          .set(\"playerId\", player.getUUID().toString())\n          .set(\"reason\", mute.getReason())\n          .set(\"actor\", actor.getName());\n\n      commonPlayer.sendMessage(muteMessage.toString());\n    });\n\n    return true;\n  }", "signature": "boolean onCommand(final CommonSender sender, CommandParser parser)", "full_signature": "@Override public boolean onCommand(final CommonSender sender, CommandParser parser)", "class_method_signature": "MuteCommand.onCommand(final CommonSender sender, CommandParser parser)", "testcase": false, "constructor": false, "invocations": ["isSilent", "hasPermission", "getPermission", "sendMessage", "getString", "isSoft", "hasPermission", "getPermission", "sendMessage", "getString", "isInvalidReason", "sendTo", "set", "get", "getMessage", "getReason", "equalsIgnoreCase", "getName", "sendMessage", "getString", "length", "isMuted", "getPlayerMuteStorage", "getPlugin", "fromString", "sendMessage", "toString", "set", "get", "isMuted", "getPlayerMuteStorage", "getPlugin", "hasPermission", "get", "set", "sendMessage", "toString", "getPlayer", "getServer", "getPlugin", "fromString", "getPlayer", "getServer", "getPlugin", "hasPermission", "sendMessage", "getString", "hasPermission", "hasPermission", "sendTo", "set", "get", "getName", "getReason", "runAsync", "getScheduler", "getPlugin", "getPlayer", "sendMessage", "toString", "set", "get", "isExempt", "getExemptionsConfig", "getPlugin", "sendMessage", "toString", "set", "get", "isRecentlyMuted", "getPlayerMuteStorage", "getPlugin", "getCooldown", "sendTo", "get", "sendMessage", "toString", "get", "printStackTrace", "getData", "getMute", "getPlayerMuteStorage", "getPlugin", "fromString", "getMute", "getPlayerMuteStorage", "getPlugin", "unmute", "getPlayerMuteStorage", "getPlugin", "sendMessage", "toString", "get", "printStackTrace", "getMessage", "mute", "getPlayerMuteStorage", "getPlugin", "handlePunishmentCreateException", "set", "get", "handlePrivateNotes", "getPlayer", "getServer", "getPlugin", "getUUID", "set", "set", "set", "set", "set", "get", "getDisplayName", "getName", "toString", "getUUID", "getReason", "getName", "sendMessage", "toString"]}, "repository": {"repo_id": 6444116, "url": "https://github.com/BanManagement/BanManager", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 80, "size": 2936, "license": "licensed"}}