{"test_class": {"identifier": "ExampleSqlExecutionListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExampleSqlExecutionListener classUnderTest = null;", "modifier": "private", "type": "ExampleSqlExecutionListener", "declarator": "classUnderTest = null", "var_name": "classUnderTest"}, {"original_string": "@Mock\n\tprivate IMessageHandler mockMessageHandler;", "modifier": "@Mock\n\tprivate", "type": "IMessageHandler", "declarator": "mockMessageHandler", "var_name": "mockMessageHandler"}], "file": "sql12/plugins/example/src/test/java/net/sourceforge/squirrel_sql/plugins/example/ExampleSqlExecutionListenerTest.java"}, "test_case": {"identifier": "testStatementExecuted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStatementExecuted()\n\t{\n\t\tfinal String sqlToTest = \"select * from testtable\";\n\t\tclassUnderTest.statementExecuted(sqlToTest);\n\t\t\n\t\t// We just want to verify that the message handler's showMessage method was called.\n\t\tMockito.verify(mockMessageHandler).showMessage(\"statementExecuted: \"+sqlToTest);\n\t}", "signature": "void testStatementExecuted()", "full_signature": "@Test public void testStatementExecuted()", "class_method_signature": "ExampleSqlExecutionListenerTest.testStatementExecuted()", "testcase": true, "constructor": false, "invocations": ["statementExecuted", "showMessage", "verify"]}, "focal_class": {"identifier": "ExampleSqlExecutionListener", "superclass": "extends SQLExecutionAdapter", "interfaces": "", "fields": [{"original_string": "private final IMessageHandler _messageHandler;", "modifier": "private final", "type": "IMessageHandler", "declarator": "_messageHandler", "var_name": "_messageHandler"}], "methods": [{"identifier": "ExampleSqlExecutionListener", "parameters": "(IMessageHandler messageHandler)", "modifiers": "public", "return": "", "signature": " ExampleSqlExecutionListener(IMessageHandler messageHandler)", "full_signature": "public  ExampleSqlExecutionListener(IMessageHandler messageHandler)", "class_method_signature": "ExampleSqlExecutionListener.ExampleSqlExecutionListener(IMessageHandler messageHandler)", "testcase": false, "constructor": true}, {"identifier": "statementExecuted", "parameters": "(String sql)", "modifiers": "@Override public", "return": "void", "signature": "void statementExecuted(String sql)", "full_signature": "@Override public void statementExecuted(String sql)", "class_method_signature": "ExampleSqlExecutionListener.statementExecuted(String sql)", "testcase": false, "constructor": false}, {"identifier": "statementExecuting", "parameters": "(String sql)", "modifiers": "@Override public", "return": "String", "signature": "String statementExecuting(String sql)", "full_signature": "@Override public String statementExecuting(String sql)", "class_method_signature": "ExampleSqlExecutionListener.statementExecuting(String sql)", "testcase": false, "constructor": false}, {"identifier": "executionFinished", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void executionFinished()", "full_signature": "public void executionFinished()", "class_method_signature": "ExampleSqlExecutionListener.executionFinished()", "testcase": false, "constructor": false}], "file": "sql12/plugins/example/src/main/java/net/sourceforge/squirrel_sql/plugins/example/ExampleSqlExecutionListener.java"}, "focal_method": {"identifier": "statementExecuted", "parameters": "(String sql)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void statementExecuted(String sql)\n\t{\n\t\t_messageHandler.showMessage(\"statementExecuted: \"+sql);\n\t}", "signature": "void statementExecuted(String sql)", "full_signature": "@Override public void statementExecuted(String sql)", "class_method_signature": "ExampleSqlExecutionListener.statementExecuted(String sql)", "testcase": false, "constructor": false, "invocations": ["showMessage"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}