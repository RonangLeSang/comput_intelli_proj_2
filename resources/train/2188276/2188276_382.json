{"test_class": {"identifier": "I18nPropsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "InMemoryI18nProperties propsUnderTest = null;", "modifier": "", "type": "InMemoryI18nProperties", "declarator": "propsUnderTest = null", "var_name": "propsUnderTest"}], "file": "sql12/plugins/i18n/src/test/java/net/sourceforge/squirrel_sql/plugins/i18n/I18nPropsTest.java"}, "test_case": {"identifier": "testGetTranslateableProperties_Bug1787731", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTranslateableProperties_Bug1787731() {\n        /* Call class under test */\n        propsUnderTest.getTranslateableProperties();\n    }", "signature": "void testGetTranslateableProperties_Bug1787731()", "full_signature": "@Test public void testGetTranslateableProperties_Bug1787731()", "class_method_signature": "I18nPropsTest.testGetTranslateableProperties_Bug1787731()", "testcase": true, "constructor": false, "invocations": ["getTranslateableProperties"]}, "focal_class": {"identifier": "I18nProps", "superclass": "extends Object", "interfaces": "", "fields": [{"original_string": "private File _file;", "modifier": "private", "type": "File", "declarator": "_file", "var_name": "_file"}, {"original_string": "private File _zipFile;", "modifier": "private", "type": "File", "declarator": "_zipFile", "var_name": "_zipFile"}, {"original_string": "private String _entryName;", "modifier": "private", "type": "String", "declarator": "_entryName", "var_name": "_entryName"}, {"original_string": "private String _name;", "modifier": "private", "type": "String", "declarator": "_name", "var_name": "_name"}], "methods": [{"identifier": "I18nProps", "parameters": "(File file, URL[] sourceUrls)", "modifiers": "public", "return": "", "signature": " I18nProps(File file, URL[] sourceUrls)", "full_signature": "public  I18nProps(File file, URL[] sourceUrls)", "class_method_signature": "I18nProps.I18nProps(File file, URL[] sourceUrls)", "testcase": false, "constructor": true}, {"identifier": "I18nProps", "parameters": "(File zipFile, String entryName, URL[] sourceUrls)", "modifiers": "public", "return": "", "signature": " I18nProps(File zipFile, String entryName, URL[] sourceUrls)", "full_signature": "public  I18nProps(File zipFile, String entryName, URL[] sourceUrls)", "class_method_signature": "I18nProps.I18nProps(File zipFile, String entryName, URL[] sourceUrls)", "testcase": false, "constructor": true}, {"identifier": "initName", "parameters": "(URL[] sourceUrls)", "modifiers": "private", "return": "void", "signature": "void initName(URL[] sourceUrls)", "full_signature": "private void initName(URL[] sourceUrls)", "class_method_signature": "I18nProps.initName(URL[] sourceUrls)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPath()", "full_signature": "public String getPath()", "class_method_signature": "I18nProps.getPath()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "I18nProps.getName()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "", "return": "Properties", "signature": "Properties getProperties()", "full_signature": " Properties getProperties()", "class_method_signature": "I18nProps.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "private", "return": "InputStream", "signature": "InputStream getInputStream()", "full_signature": "private InputStream getInputStream()", "class_method_signature": "I18nProps.getInputStream()", "testcase": false, "constructor": false}, {"identifier": "removeProps", "parameters": "(Properties toRemoveFrom)", "modifiers": "public", "return": "void", "signature": "void removeProps(Properties toRemoveFrom)", "full_signature": "public void removeProps(Properties toRemoveFrom)", "class_method_signature": "I18nProps.removeProps(Properties toRemoveFrom)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(File toCopyTo)", "modifiers": "public", "return": "void", "signature": "void copyTo(File toCopyTo)", "full_signature": "public void copyTo(File toCopyTo)", "class_method_signature": "I18nProps.copyTo(File toCopyTo)", "testcase": false, "constructor": false}, {"identifier": "getLocalizedFileName", "parameters": "(Locale loc)", "modifiers": "public", "return": "String", "signature": "String getLocalizedFileName(Locale loc)", "full_signature": "public String getLocalizedFileName(Locale loc)", "class_method_signature": "I18nProps.getLocalizedFileName(Locale loc)", "testcase": false, "constructor": false}, {"identifier": "getUnlocalizedPath", "parameters": "(Locale loc)", "modifiers": "public", "return": "String", "signature": "String getUnlocalizedPath(Locale loc)", "full_signature": "public String getUnlocalizedPath(Locale loc)", "class_method_signature": "I18nProps.getUnlocalizedPath(Locale loc)", "testcase": false, "constructor": false}, {"identifier": "parseLocaleFromPropsFileName", "parameters": "(String propsFileName)", "modifiers": "public static", "return": "Locale", "signature": "Locale parseLocaleFromPropsFileName(String propsFileName)", "full_signature": "public static Locale parseLocaleFromPropsFileName(String propsFileName)", "class_method_signature": "I18nProps.parseLocaleFromPropsFileName(String propsFileName)", "testcase": false, "constructor": false}, {"identifier": "getTranslateableProperties", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getTranslateableProperties()", "full_signature": "public Properties getTranslateableProperties()", "class_method_signature": "I18nProps.getTranslateableProperties()", "testcase": false, "constructor": false}], "file": "sql12/plugins/i18n/src/main/java/net/sourceforge/squirrel_sql/plugins/i18n/I18nProps.java"}, "focal_method": {"identifier": "getTranslateableProperties", "parameters": "()", "modifiers": "public", "return": "Properties", "body": "public Properties getTranslateableProperties()\n    {\n        String name;\n\n        if(null == _entryName)\n        {\n            name = _file.getName();\n        }\n        else\n        {\n            if(-1 == _entryName.lastIndexOf(File.separator))\n            {\n                name = _entryName;\n            }\n            else\n            {\n                name = _entryName.substring(_entryName.lastIndexOf(File.separator));\n            }\n        }\n\n        if(name.startsWith(\"I18nStrings\"))\n        {\n            return getProperties();\n        }\n        else\n        {\n            // These files contain images etc. We try to filter out these props.\n            Properties ret = getProperties();\n\n\n            // Do not change this way to iterate.\n            // Changing to ret.keySet().iterator() caused bug #1787731\n            // The save way would be not to use  ret.remove(key) inside the loop.\n            for(Enumeration e=ret.keys(); e.hasMoreElements();)\n            {\n                String key = (String) e.nextElement();\n\n                if(key.endsWith(\".image\") ||\n                    key.endsWith(\".rolloverimage\") ||\n                    key.endsWith(\".disabledimage\") ||\n                    key.endsWith(\".frameIcon\") ||\n                    key.endsWith(\".file\") ||\n                    key.endsWith(\".images\") ||\n                    key.endsWith(\".accelerator\") ||\n                    key.equals(\"path.defaults\")\n                    )\n                {\n                    ret.remove(key);\n                }\n\n                if(key.endsWith(\".noi18n\") && ret.getProperty(key).equalsIgnoreCase(\"true\"))\n                {\n                    ret.remove(key);\n                    ret.remove(key.substring(0, key.length() - \".noi18n\".length()));\n                }\n            }\n\n            return ret;\n\n\n\n\n\n\n        }\n\n\n\n    }", "signature": "Properties getTranslateableProperties()", "full_signature": "public Properties getTranslateableProperties()", "class_method_signature": "I18nProps.getTranslateableProperties()", "testcase": false, "constructor": false, "invocations": ["getName", "lastIndexOf", "substring", "lastIndexOf", "startsWith", "getProperties", "getProperties", "keys", "hasMoreElements", "nextElement", "endsWith", "endsWith", "endsWith", "endsWith", "endsWith", "endsWith", "endsWith", "equals", "remove", "endsWith", "equalsIgnoreCase", "getProperty", "remove", "remove", "substring", "length", "length"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}