{"test_class": {"identifier": "DefaultExceptionFormatterTest", "superclass": "extends BaseSQuirreLJUnit4TestCase", "interfaces": "", "fields": [{"original_string": "DefaultExceptionFormatter formatterUnderTest;", "modifier": "", "type": "DefaultExceptionFormatter", "declarator": "formatterUnderTest", "var_name": "formatterUnderTest"}], "file": "sql12/fw/src/test/java/net/sourceforge/squirrel_sql/fw/util/DefaultExceptionFormatterTest.java"}, "test_case": {"identifier": "testSetCustomExceptionFormatter", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testSetCustomExceptionFormatter() throws Exception {\n        ExceptionFormatter formatter1 = createMock(ExceptionFormatter.class);\n        SQLException ex = new SQLException(\"table does not exist\");\n        SQLExecutionException ee = new SQLExecutionException(ex, \"\");\n        expect(formatter1.formatsException(isA(SQLException.class))).andReturn(true).anyTimes();\n        expect(formatter1.format(ex)).andReturn(\"foo\").anyTimes();\n        replay(formatter1);\n        formatterUnderTest.setCustomExceptionFormatter(formatter1);\n        String formattedEx = formatterUnderTest.format(ee);\n        verify(formatter1);\n        Assert.assertEquals(\"foo\", formattedEx);\n    }", "signature": "void testSetCustomExceptionFormatter()", "full_signature": "@Test public final void testSetCustomExceptionFormatter()", "class_method_signature": "DefaultExceptionFormatterTest.testSetCustomExceptionFormatter()", "testcase": true, "constructor": false, "invocations": ["createMock", "anyTimes", "andReturn", "expect", "formatsException", "isA", "anyTimes", "andReturn", "expect", "format", "replay", "setCustomExceptionFormatter", "format", "verify", "assertEquals"]}, "focal_class": {"identifier": "DefaultExceptionFormatter", "superclass": "", "interfaces": "implements ExceptionFormatter", "fields": [{"original_string": "private static final ILogger s_log =\n        LoggerController.createLogger(DefaultExceptionFormatter.class);", "modifier": "private static final", "type": "ILogger", "declarator": "s_log =\n        LoggerController.createLogger(DefaultExceptionFormatter.class)", "var_name": "s_log"}, {"original_string": "private ExceptionFormatter customFormatter = null;", "modifier": "private", "type": "ExceptionFormatter", "declarator": "customFormatter = null", "var_name": "customFormatter"}], "methods": [{"identifier": "format", "parameters": "(Throwable th)", "modifiers": "public", "return": "String", "signature": "String format(Throwable th)", "full_signature": "public String format(Throwable th)", "class_method_signature": "DefaultExceptionFormatter.format(Throwable th)", "testcase": false, "constructor": false}, {"identifier": "defaultFormatSQLException", "parameters": "(Throwable cause)", "modifiers": "public", "return": "String", "signature": "String defaultFormatSQLException(Throwable cause)", "full_signature": "public String defaultFormatSQLException(Throwable cause)", "class_method_signature": "DefaultExceptionFormatter.defaultFormatSQLException(Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "formatsException", "parameters": "(Throwable t)", "modifiers": "public", "return": "boolean", "signature": "boolean formatsException(Throwable t)", "full_signature": "public boolean formatsException(Throwable t)", "class_method_signature": "DefaultExceptionFormatter.formatsException(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "setCustomExceptionFormatter", "parameters": "(ExceptionFormatter customFormatter)", "modifiers": "public", "return": "void", "signature": "void setCustomExceptionFormatter(ExceptionFormatter customFormatter)", "full_signature": "public void setCustomExceptionFormatter(ExceptionFormatter customFormatter)", "class_method_signature": "DefaultExceptionFormatter.setCustomExceptionFormatter(ExceptionFormatter customFormatter)", "testcase": false, "constructor": false}, {"identifier": "getDataTruncationMessage", "parameters": "(DataTruncation ex)", "modifiers": "private", "return": "String", "signature": "String getDataTruncationMessage(DataTruncation ex)", "full_signature": "private String getDataTruncationMessage(DataTruncation ex)", "class_method_signature": "DefaultExceptionFormatter.getDataTruncationMessage(DataTruncation ex)", "testcase": false, "constructor": false}, {"identifier": "getSQLWarningMessage", "parameters": "(SQLWarning ex)", "modifiers": "private", "return": "String", "signature": "String getSQLWarningMessage(SQLWarning ex)", "full_signature": "private String getSQLWarningMessage(SQLWarning ex)", "class_method_signature": "DefaultExceptionFormatter.getSQLWarningMessage(SQLWarning ex)", "testcase": false, "constructor": false}, {"identifier": "getSQLExceptionMessage", "parameters": "(SQLException ex)", "modifiers": "private", "return": "String", "signature": "String getSQLExceptionMessage(SQLException ex)", "full_signature": "private String getSQLExceptionMessage(SQLException ex)", "class_method_signature": "DefaultExceptionFormatter.getSQLExceptionMessage(SQLException ex)", "testcase": false, "constructor": false}, {"identifier": "buildMessage", "parameters": "(String prefix, SQLException ex)", "modifiers": "private", "return": "String", "signature": "String buildMessage(String prefix, SQLException ex)", "full_signature": "private String buildMessage(String prefix, SQLException ex)", "class_method_signature": "DefaultExceptionFormatter.buildMessage(String prefix, SQLException ex)", "testcase": false, "constructor": false}], "file": "sql12/fw/src/main/java/net/sourceforge/squirrel_sql/fw/util/DefaultExceptionFormatter.java"}, "focal_method": {"identifier": "setCustomExceptionFormatter", "parameters": "(ExceptionFormatter customFormatter)", "modifiers": "public", "return": "void", "body": "public void setCustomExceptionFormatter(ExceptionFormatter customFormatter) {\n        if (customFormatter == null) {\n            throw new IllegalArgumentException(\"customFormatter cannot be null\");\n        }\n        \n        if (this.customFormatter == null) {\n            this.customFormatter = customFormatter;\n        } else {\n            // Uh-oh!  We shouldn't have more than one plugin registering a \n            // custom exception handler for a given session.  The first one \n            // wins and all others get an error message.\n            s_log.error(\n                \"setCustomExceptionFormatter: An existing customFormatter ( \"+\n                this.customFormatter.getClass().getName()+\" )has already \" +\n                \"been set - ignoring \"+customFormatter.getClass().getName());\n        }\n    }", "signature": "void setCustomExceptionFormatter(ExceptionFormatter customFormatter)", "full_signature": "public void setCustomExceptionFormatter(ExceptionFormatter customFormatter)", "class_method_signature": "DefaultExceptionFormatter.setCustomExceptionFormatter(ExceptionFormatter customFormatter)", "testcase": false, "constructor": false, "invocations": ["error", "getName", "getClass", "getName", "getClass"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}