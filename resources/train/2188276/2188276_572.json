{"test_class": {"identifier": "NetezzaProcedureFormatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NetezzaProcedureFormator classUnderTest = null;", "modifier": "private", "type": "NetezzaProcedureFormator", "declarator": "classUnderTest = null", "var_name": "classUnderTest"}, {"original_string": "private static final String SQL = \n\t\t\"CREATE OR REPLACE PROCEDURE num() RETURNS BOOL LANGUAGE NZPLSQL AS BEGIN_PROC/n DECLARE/n\t\" +\n\t\t\"n NUMERIC;BEGIN/n\tn := 2147483647;RAISE NOTICE 'n is %', n;n := 2147483647 + 1;\" +\n\t\t\"RAISE NOTICE 'n is %', n;n := 2147483647::numeric + 1;RAISE NOTICE 'n is %', n;\" +\n\t\t\"n := 2147483647::bigint + 1;RAISE NOTICE 'n is %', n;n := 2147483647;n := n + 1;\" +\n\t\t\"RAISE NOTICE 'n is %', n;END;END_PROC;\";", "modifier": "private static final", "type": "String", "declarator": "SQL = \n\t\t\"CREATE OR REPLACE PROCEDURE num() RETURNS BOOL LANGUAGE NZPLSQL AS BEGIN_PROC/n DECLARE/n\t\" +\n\t\t\"n NUMERIC;BEGIN/n\tn := 2147483647;RAISE NOTICE 'n is %', n;n := 2147483647 + 1;\" +\n\t\t\"RAISE NOTICE 'n is %', n;n := 2147483647::numeric + 1;RAISE NOTICE 'n is %', n;\" +\n\t\t\"n := 2147483647::bigint + 1;RAISE NOTICE 'n is %', n;n := 2147483647;n := n + 1;\" +\n\t\t\"RAISE NOTICE 'n is %', n;END;END_PROC;\"", "var_name": "SQL"}, {"original_string": "private static final String SQL2 = \n\t\t  \"create or replace procedure EXEC_NZPLSQL_BLOCK(TEXT) returns BOOLEAN LANGUAGE NZPLSQL AS \" +\n\t\t  \"BEGIN_PROC/nDECLARE lRet BOOLEAN;DECLARE sid INTEGER;DECLARE nm varchar;DECLARE cr varchar;BEGIN  \" +\n\t\t  \"/nsid := current_sid;nm := 'any_block' || sid || '()';cr = 'CREATE OR REPLACE PROCEDURE ' || \" +\n\t\t  \"nm ||  /n' RETURNS BOOL LANGUAGE NZPLSQL AS BEGIN_PROC '  /n|| $1 || ' END_PROC';EXECUTE IMMEDIATE \" +\n\t\t  \"cr;EXECUTE IMMEDIATE 'SELECT ' || nm;EXECUTE IMMEDIATE 'DROP PROCEDURE ' || nm;RETURN TRUE;END;\" +\n\t\t  \"END_PROC;\";", "modifier": "private static final", "type": "String", "declarator": "SQL2 = \n\t\t  \"create or replace procedure EXEC_NZPLSQL_BLOCK(TEXT) returns BOOLEAN LANGUAGE NZPLSQL AS \" +\n\t\t  \"BEGIN_PROC/nDECLARE lRet BOOLEAN;DECLARE sid INTEGER;DECLARE nm varchar;DECLARE cr varchar;BEGIN  \" +\n\t\t  \"/nsid := current_sid;nm := 'any_block' || sid || '()';cr = 'CREATE OR REPLACE PROCEDURE ' || \" +\n\t\t  \"nm ||  /n' RETURNS BOOL LANGUAGE NZPLSQL AS BEGIN_PROC '  /n|| $1 || ' END_PROC';EXECUTE IMMEDIATE \" +\n\t\t  \"cr;EXECUTE IMMEDIATE 'SELECT ' || nm;EXECUTE IMMEDIATE 'DROP PROCEDURE ' || nm;RETURN TRUE;END;\" +\n\t\t  \"END_PROC;\"", "var_name": "SQL2"}], "file": "sql12/plugins/netezza/src/test/java/net/sourceforge/squirrel_sql/plugins/netezza/tab/NetezzaProcedureFormatorTest.java"}, "test_case": {"identifier": "testformat2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testformat2() {\n\t\tString newSql = classUnderTest.reformat(SQL2);\n\t\t//System.err.println(\"formatted query: \\n\"+newSql);\n\t\tString[] parts = newSql.split(\"\\n\");\n\t\tassertEquals(20, parts.length);\n\t}", "signature": "void testformat2()", "full_signature": "@Test public void testformat2()", "class_method_signature": "NetezzaProcedureFormatorTest.testformat2()", "testcase": true, "constructor": false, "invocations": ["reformat", "split", "assertEquals"]}, "focal_class": {"identifier": "NetezzaProcedureFormator", "superclass": "", "interfaces": "implements ICodeReformator", "fields": [{"original_string": "private final String stmtSep;", "modifier": "private final", "type": "String", "declarator": "stmtSep", "var_name": "stmtSep"}], "methods": [{"identifier": "NetezzaProcedureFormator", "parameters": "(String stmtSep)", "modifiers": "public", "return": "", "signature": " NetezzaProcedureFormator(String stmtSep)", "full_signature": "public  NetezzaProcedureFormator(String stmtSep)", "class_method_signature": "NetezzaProcedureFormator.NetezzaProcedureFormator(String stmtSep)", "testcase": false, "constructor": true}, {"identifier": "reformat", "parameters": "(String in)", "modifiers": "@Override public", "return": "String", "signature": "String reformat(String in)", "full_signature": "@Override public String reformat(String in)", "class_method_signature": "NetezzaProcedureFormator.reformat(String in)", "testcase": false, "constructor": false}, {"identifier": "breakApartNewLines", "parameters": "(String[] in, String stmtSep)", "modifiers": "private", "return": "List<String>", "signature": "List<String> breakApartNewLines(String[] in, String stmtSep)", "full_signature": "private List<String> breakApartNewLines(String[] in, String stmtSep)", "class_method_signature": "NetezzaProcedureFormator.breakApartNewLines(String[] in, String stmtSep)", "testcase": false, "constructor": false}], "file": "sql12/plugins/netezza/src/main/java/net/sourceforge/squirrel_sql/plugins/netezza/tab/NetezzaProcedureFormator.java"}, "focal_method": {"identifier": "reformat", "parameters": "(String in)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String reformat(String in)\n\t{\n\t\tStringBuilder result = new StringBuilder();\n\t\tString newLinesStripped = in.replace(\"/n\", \" \");\n\t\tList<String> parts = breakApartNewLines(newLinesStripped.split(\"\\\\s+\"), stmtSep);\n\t\tboolean foundAs = false;\n\t\tboolean inDeclaration = false;\n\t\tboolean inMainSection = false;\n\t\tboolean inCreateSection = true;\n\t\tfor (String part : parts)\n\t\t{\n\t\t\tif (inCreateSection && !part.equalsIgnoreCase(\"AS\"))\n\t\t\t{\n\t\t\t\tresult.append(part);\n\t\t\t\tresult.append(\" \");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (part.equalsIgnoreCase(\"AS\") && !foundAs)\n\t\t\t{\n\t\t\t\tfoundAs = true;\n\t\t\t\tinCreateSection = false;\n\t\t\t\tresult.append(\"AS\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (part.equalsIgnoreCase(\"BEGIN_PROC\") && !inMainSection)\n\t\t\t{\n\t\t\t\tresult.append(\"BEGIN_PROC\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (part.equalsIgnoreCase(\"DECLARE\"))\n\t\t\t{\n\t\t\t\tresult.append(\"DECLARE\\n\");\n\t\t\t\tinDeclaration = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (inDeclaration && !part.equalsIgnoreCase(\"BEGIN\"))\n\t\t\t{\n\t\t\t\tif (!part.endsWith(stmtSep))\n\t\t\t\t{\n\t\t\t\t\tresult.append(\"\\t\");\n\t\t\t\t}\n\t\t\t\tresult.append(part);\n\t\t\t\tif (part.endsWith(stmtSep))\n\t\t\t\t{\n\t\t\t\t\tresult.append(\"\\n\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.append(\" \");\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (inDeclaration && part.equalsIgnoreCase(\"BEGIN\"))\n\t\t\t{\n\t\t\t\tresult.append(\"BEGIN\\n\\t\");\n\t\t\t\tinDeclaration = false;\n\t\t\t\tinMainSection = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (inMainSection)\n\t\t\t{\n\t\t\t\tif (part.equalsIgnoreCase(\"END\"+stmtSep) \n\t\t\t\t\t|| part.equalsIgnoreCase(\"END\"))\n\t\t\t\t{\n\t\t\t\t\tinMainSection = false;\n\t\t\t\t\t// remove the previously added tab character\n\t\t\t\t\tresult.setLength(result.length() - 1);\n\t\t\t\t\tresult.append(part);\n\t\t\t\t\tif (!part.endsWith(stmtSep)) {\n\t\t\t\t\t\tresult.append(stmtSep);\n\t\t\t\t\t}\n\t\t\t\t\tresult.append(\"\\n\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.append(part);\n\t\t\t\t\tresult.append(\" \");\n\t\t\t\t\tif (part.endsWith(stmtSep))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.append(\"\\n\\t\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult.append(part);\n\t\t\tresult.append(stmtSep);\n\t\t\tresult.append(\"\\n\");\n\t\t}\n\t\treturn result.toString();\n\t}", "signature": "String reformat(String in)", "full_signature": "@Override public String reformat(String in)", "class_method_signature": "NetezzaProcedureFormator.reformat(String in)", "testcase": false, "constructor": false, "invocations": ["replace", "breakApartNewLines", "split", "equalsIgnoreCase", "append", "append", "equalsIgnoreCase", "append", "equalsIgnoreCase", "append", "equalsIgnoreCase", "append", "equalsIgnoreCase", "endsWith", "append", "append", "endsWith", "append", "append", "equalsIgnoreCase", "append", "equalsIgnoreCase", "equalsIgnoreCase", "setLength", "length", "append", "endsWith", "append", "append", "append", "append", "endsWith", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}