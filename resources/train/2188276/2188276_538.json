{"test_class": {"identifier": "OracleQueryTokenizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String nullSQL = null;", "modifier": "static", "type": "String", "declarator": "nullSQL = null", "var_name": "nullSQL"}, {"original_string": "static String tmpFilename = null;", "modifier": "static", "type": "String", "declarator": "tmpFilename = null", "var_name": "tmpFilename"}, {"original_string": "static boolean removeMultilineComment = true;", "modifier": "static", "type": "boolean", "declarator": "removeMultilineComment = true", "var_name": "removeMultilineComment"}, {"original_string": "QueryTokenizer qt = null;", "modifier": "", "type": "QueryTokenizer", "declarator": "qt = null", "var_name": "qt"}, {"original_string": "static int sqlFileStmtCount = 0;", "modifier": "static", "type": "int", "declarator": "sqlFileStmtCount = 0", "var_name": "sqlFileStmtCount"}, {"original_string": "static IQueryTokenizerPreferenceBean _prefs;", "modifier": "static", "type": "IQueryTokenizerPreferenceBean", "declarator": "_prefs", "var_name": "_prefs"}, {"original_string": "private IPlugin mockPlugin = mock(IPlugin.class);", "modifier": "private", "type": "IPlugin", "declarator": "mockPlugin = mock(IPlugin.class)", "var_name": "mockPlugin"}], "file": "sql12/plugins/oracle/src/test/java/net/sourceforge/squirrel_sql/plugins/oracle/tokenizer/OracleQueryTokenizerTest.java"}, "test_case": {"identifier": "testExecAnonProcedure2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecAnonProcedure2() {\n        qt = new OracleQueryTokenizer(_prefs);\n        qt.setScriptToTokenize(ANON_PROC_EXEC_2);\n        SQLUtil.checkQueryTokenizer(qt, 1);\n    }", "signature": "void testExecAnonProcedure2()", "full_signature": "@Test public void testExecAnonProcedure2()", "class_method_signature": "OracleQueryTokenizerTest.testExecAnonProcedure2()", "testcase": true, "constructor": false, "invocations": ["setScriptToTokenize", "checkQueryTokenizer"]}, "focal_class": {"identifier": "OracleQueryTokenizer", "superclass": "extends QueryTokenizer", "interfaces": "implements IQueryTokenizer", "fields": [{"original_string": "private final static ILogger s_log = LoggerController.createLogger(OracleQueryTokenizer.class);", "modifier": "private final static", "type": "ILogger", "declarator": "s_log = LoggerController.createLogger(OracleQueryTokenizer.class)", "var_name": "s_log"}, {"original_string": "private static final String PROCEDURE_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+PROCEDURE.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+PROCEDURE\\\\s+.*\";", "modifier": "private static final", "type": "String", "declarator": "PROCEDURE_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+PROCEDURE.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+PROCEDURE\\\\s+.*\"", "var_name": "PROCEDURE_PATTERN"}, {"original_string": "private static final String FUNCTION_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+FUNCTION.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+FUNCTION\\\\s+.*\";", "modifier": "private static final", "type": "String", "declarator": "FUNCTION_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+FUNCTION.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+FUNCTION\\\\s+.*\"", "var_name": "FUNCTION_PATTERN"}, {"original_string": "private static final String TRIGGER_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+TRIGGER.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+TRIGGER\\\\s+.*\";", "modifier": "private static final", "type": "String", "declarator": "TRIGGER_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+TRIGGER.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+TRIGGER\\\\s+.*\"", "var_name": "TRIGGER_PATTERN"}, {"original_string": "private static final String PACKAGE_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+PACKAGE.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+PACKAGE\\\\s+.*\";", "modifier": "private static final", "type": "String", "declarator": "PACKAGE_PATTERN =\n\t\t\"^\\\\s*CREATE\\\\s+PACKAGE.*|^\\\\s*CREATE\\\\s+OR\\\\s+REPLACE\\\\s+PACKAGE\\\\s+.*\"", "var_name": "PACKAGE_PATTERN"}, {"original_string": "private static final String DECLARE_PATTERN = \"^\\\\s*DECLARE\\\\s*.*\";", "modifier": "private static final", "type": "String", "declarator": "DECLARE_PATTERN = \"^\\\\s*DECLARE\\\\s*.*\"", "var_name": "DECLARE_PATTERN"}, {"original_string": "private static final String BEGIN_PATTERN = \"^\\\\s*BEGIN\\\\s*.*\";", "modifier": "private static final", "type": "String", "declarator": "BEGIN_PATTERN = \"^\\\\s*BEGIN\\\\s*.*\"", "var_name": "BEGIN_PATTERN"}, {"original_string": "private static final String SLASH_PATTERN = \".*\\\\n/\\\\n.*\";", "modifier": "private static final", "type": "String", "declarator": "SLASH_PATTERN = \".*\\\\n/\\\\n.*\"", "var_name": "SLASH_PATTERN"}, {"original_string": "private static final String SLASH_SPLIT_PATTERN = \"\\\\n/\\\\n\";", "modifier": "private static final", "type": "String", "declarator": "SLASH_SPLIT_PATTERN = \"\\\\n/\\\\n\"", "var_name": "SLASH_SPLIT_PATTERN"}, {"original_string": "private final String SET_COMMAND_PATTERN = \"^\\\\s*SET\\\\s+\\\\w+\\\\s+\\\\w+\\\\s*$\";", "modifier": "private final", "type": "String", "declarator": "SET_COMMAND_PATTERN = \"^\\\\s*SET\\\\s+\\\\w+\\\\s+\\\\w+\\\\s*$\"", "var_name": "SET_COMMAND_PATTERN"}, {"original_string": "private Pattern procPattern = Pattern.compile(PROCEDURE_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "procPattern = Pattern.compile(PROCEDURE_PATTERN, Pattern.DOTALL)", "var_name": "procPattern"}, {"original_string": "private Pattern funcPattern = Pattern.compile(FUNCTION_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "funcPattern = Pattern.compile(FUNCTION_PATTERN, Pattern.DOTALL)", "var_name": "funcPattern"}, {"original_string": "private Pattern triggerPattern = Pattern.compile(TRIGGER_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "triggerPattern = Pattern.compile(TRIGGER_PATTERN, Pattern.DOTALL)", "var_name": "triggerPattern"}, {"original_string": "private Pattern packagePattern = Pattern.compile(PACKAGE_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "packagePattern = Pattern.compile(PACKAGE_PATTERN, Pattern.DOTALL)", "var_name": "packagePattern"}, {"original_string": "private Pattern declPattern = Pattern.compile(DECLARE_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "declPattern = Pattern.compile(DECLARE_PATTERN, Pattern.DOTALL)", "var_name": "declPattern"}, {"original_string": "private Pattern beginPattern = Pattern.compile(BEGIN_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "beginPattern = Pattern.compile(BEGIN_PATTERN, Pattern.DOTALL)", "var_name": "beginPattern"}, {"original_string": "private Pattern slashPattern = Pattern.compile(SLASH_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "slashPattern = Pattern.compile(SLASH_PATTERN, Pattern.DOTALL)", "var_name": "slashPattern"}, {"original_string": "private Pattern setPattern = Pattern.compile(SET_COMMAND_PATTERN, Pattern.DOTALL);", "modifier": "private", "type": "Pattern", "declarator": "setPattern = Pattern.compile(SET_COMMAND_PATTERN, Pattern.DOTALL)", "var_name": "setPattern"}, {"original_string": "private static final String ORACLE_SCRIPT_INCLUDE_PREFIX = \"@\";", "modifier": "private static final", "type": "String", "declarator": "ORACLE_SCRIPT_INCLUDE_PREFIX = \"@\"", "var_name": "ORACLE_SCRIPT_INCLUDE_PREFIX"}, {"original_string": "private IQueryTokenizerPreferenceBean _prefs = null;", "modifier": "private", "type": "IQueryTokenizerPreferenceBean", "declarator": "_prefs = null", "var_name": "_prefs"}], "methods": [{"identifier": "OracleQueryTokenizer", "parameters": "(IQueryTokenizerPreferenceBean prefs)", "modifiers": "public", "return": "", "signature": " OracleQueryTokenizer(IQueryTokenizerPreferenceBean prefs)", "full_signature": "public  OracleQueryTokenizer(IQueryTokenizerPreferenceBean prefs)", "class_method_signature": "OracleQueryTokenizer.OracleQueryTokenizer(IQueryTokenizerPreferenceBean prefs)", "testcase": false, "constructor": true}, {"identifier": "setScriptToTokenize", "parameters": "(String script)", "modifiers": "public", "return": "void", "signature": "void setScriptToTokenize(String script)", "full_signature": "public void setScriptToTokenize(String script)", "class_method_signature": "OracleQueryTokenizer.setScriptToTokenize(String script)", "testcase": false, "constructor": false}, {"identifier": "removeSqlPlusSetCommands", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeSqlPlusSetCommands()", "full_signature": "private void removeSqlPlusSetCommands()", "class_method_signature": "OracleQueryTokenizer.removeSqlPlusSetCommands()", "testcase": false, "constructor": false}, {"identifier": "setFactory", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setFactory()", "full_signature": "protected void setFactory()", "class_method_signature": "OracleQueryTokenizer.setFactory()", "testcase": false, "constructor": false}, {"identifier": "removeRemainingSlashes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeRemainingSlashes()", "full_signature": "private void removeRemainingSlashes()", "class_method_signature": "OracleQueryTokenizer.removeRemainingSlashes()", "testcase": false, "constructor": false}, {"identifier": "breakApartNewLines", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void breakApartNewLines()", "full_signature": "private void breakApartNewLines()", "class_method_signature": "OracleQueryTokenizer.breakApartNewLines()", "testcase": false, "constructor": false}, {"identifier": "joinFragments", "parameters": "(Pattern pattern, boolean skipStraySlash)", "modifiers": "private", "return": "void", "signature": "void joinFragments(Pattern pattern, boolean skipStraySlash)", "full_signature": "private void joinFragments(Pattern pattern, boolean skipStraySlash)", "class_method_signature": "OracleQueryTokenizer.joinFragments(Pattern pattern, boolean skipStraySlash)", "testcase": false, "constructor": false}, {"identifier": "getTokenizerSessPropsInteractions", "parameters": "()", "modifiers": "@Override public", "return": "TokenizerSessPropsInteractions", "signature": "TokenizerSessPropsInteractions getTokenizerSessPropsInteractions()", "full_signature": "@Override public TokenizerSessPropsInteractions getTokenizerSessPropsInteractions()", "class_method_signature": "OracleQueryTokenizer.getTokenizerSessPropsInteractions()", "testcase": false, "constructor": false}], "file": "sql12/plugins/oracle/src/main/java/net/sourceforge/squirrel_sql/plugins/oracle/tokenizer/OracleQueryTokenizer.java"}, "focal_method": {"identifier": "setScriptToTokenize", "parameters": "(String script)", "modifiers": "public", "return": "void", "body": "public void setScriptToTokenize(String script)\n\t{\n\t\tsuper.setScriptToTokenize(script);\n\n\t\tremoveSqlPlusSetCommands();\n\n\t\t// Since it is likely to have \"/\" on it's own line, and it is key to\n\t\t// letting us know that proceeding statements form a multi-statement\n\t\t// procedure or function, it deserves it's own place in the _queries\n\t\t// arraylist. If it is followed by other procedure or function creation\n\t\t// blocks, we may fail to detect that, so this just goes through the\n\t\t// list and breaks apart statements on newline so that this cannot\n\t\t// happen.\n\t\tbreakApartNewLines();\n\n\t\t// Oracle allows statement separators in PL/SQL blocks. The process\n\t\t// of tokenizing above renders these procedure blocks as separate\n\t\t// statements, which is invalid for Oracle. Since \"/\" is the way\n\t\t// in SQL-Plus to denote the end of a procedure or function, we\n\t\t// re-assemble any create procedure/function/trigger statements that we\n\t\t// find. This should be done before expanding file includes. Otherwise,\n\t\t// any create sql found in files will already be joined, causing this to\n\t\t// find create SQL without matching \"/\". The process of\n\t\t// expanding 'file includes' already joins the sql fragments that it\n\t\t// finds.\n\t\tjoinFragments(procPattern, false);\n\t\tjoinFragments(funcPattern, false);\n\t\tjoinFragments(triggerPattern, false);\n\t\tjoinFragments(packagePattern, false);\n\t\tjoinFragments(declPattern, false);\n\t\tjoinFragments(beginPattern, true);\n\n\t\texpandFileIncludes(ORACLE_SCRIPT_INCLUDE_PREFIX);\n\n\t\tremoveRemainingSlashes();\n\n\t\t_queryIterator = _queries.iterator();\n\t}", "signature": "void setScriptToTokenize(String script)", "full_signature": "public void setScriptToTokenize(String script)", "class_method_signature": "OracleQueryTokenizer.setScriptToTokenize(String script)", "testcase": false, "constructor": false, "invocations": ["setScriptToTokenize", "removeSqlPlusSetCommands", "breakApartNewLines", "joinFragments", "joinFragments", "joinFragments", "joinFragments", "joinFragments", "joinFragments", "expandFileIncludes", "removeRemainingSlashes", "iterator"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}