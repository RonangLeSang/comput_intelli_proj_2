{"test_class": {"identifier": "DB2PluginTest", "superclass": "extends AbstractSessionPluginTest", "interfaces": "implements DatabaseProductVersionData", "fields": [], "file": "sql12/plugins/db2/src/test/java/net/sourceforge/squirrel_sql/plugins/db2/DB2PluginTest.java"}, "test_case": {"identifier": "testSessionStarted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSessionStarted() throws SQLException\n\t{\n\t\twhen(mockDatabaseMetaData.getDriverName()).thenReturn(DB2Plugin.JCC_DRIVER_NAME);\n\t\tPluginSessionCallback result = ((DB2Plugin) super.classUnderTest).sessionStarted(mockSession);\n\t\tassertNotNull(result);\n\t}", "signature": "void testSessionStarted()", "full_signature": "@Test public void testSessionStarted()", "class_method_signature": "DB2PluginTest.testSessionStarted()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDriverName", "sessionStarted", "assertNotNull"]}, "focal_class": {"identifier": "DB2Plugin", "superclass": "extends DefaultSessionPlugin", "interfaces": "", "fields": [{"original_string": "public static final String JCC_DRIVER_NAME = \"IBM DB2 JDBC Universal Driver Architecture\";", "modifier": "public static final", "type": "String", "declarator": "JCC_DRIVER_NAME = \"IBM DB2 JDBC Universal Driver Architecture\"", "var_name": "JCC_DRIVER_NAME"}, {"original_string": "private static final String OS_400_PRODUCT_NAME = \"DB2 UDB for AS/400\";", "modifier": "private static final", "type": "String", "declarator": "OS_400_PRODUCT_NAME = \"DB2 UDB for AS/400\"", "var_name": "OS_400_PRODUCT_NAME"}, {"original_string": "private static final StringManager s_stringMgr = StringManagerFactory.getStringManager(DB2Plugin.class);", "modifier": "private static final", "type": "StringManager", "declarator": "s_stringMgr = StringManagerFactory.getStringManager(DB2Plugin.class)", "var_name": "s_stringMgr"}, {"original_string": "private final static ILogger s_log = LoggerController.createLogger(DB2Plugin.class);", "modifier": "private final static", "type": "ILogger", "declarator": "s_log = LoggerController.createLogger(DB2Plugin.class)", "var_name": "s_log"}, {"original_string": "private IObjectTreeAPI _treeAPI;", "modifier": "private", "type": "IObjectTreeAPI", "declarator": "_treeAPI", "var_name": "_treeAPI"}], "methods": [{"identifier": "getInternalName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInternalName()", "full_signature": "public String getInternalName()", "class_method_signature": "DB2Plugin.getInternalName()", "testcase": false, "constructor": false}, {"identifier": "getDescriptiveName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescriptiveName()", "full_signature": "public String getDescriptiveName()", "class_method_signature": "DB2Plugin.getDescriptiveName()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "DB2Plugin.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getAuthor", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAuthor()", "full_signature": "public String getAuthor()", "class_method_signature": "DB2Plugin.getAuthor()", "testcase": false, "constructor": false}, {"identifier": "getContributors", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContributors()", "full_signature": "public String getContributors()", "class_method_signature": "DB2Plugin.getContributors()", "testcase": false, "constructor": false}, {"identifier": "getChangeLogFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getChangeLogFileName()", "full_signature": "public String getChangeLogFileName()", "class_method_signature": "DB2Plugin.getChangeLogFileName()", "testcase": false, "constructor": false}, {"identifier": "getHelpFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHelpFileName()", "full_signature": "public String getHelpFileName()", "class_method_signature": "DB2Plugin.getHelpFileName()", "testcase": false, "constructor": false}, {"identifier": "getLicenceFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLicenceFileName()", "full_signature": "public String getLicenceFileName()", "class_method_signature": "DB2Plugin.getLicenceFileName()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(IApplication app)", "modifiers": "public synchronized", "return": "void", "signature": "void load(IApplication app)", "full_signature": "public synchronized void load(IApplication app)", "class_method_signature": "DB2Plugin.load(IApplication app)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void initialize()", "full_signature": "public synchronized void initialize()", "class_method_signature": "DB2Plugin.initialize()", "testcase": false, "constructor": false}, {"identifier": "unload", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unload()", "full_signature": "public void unload()", "class_method_signature": "DB2Plugin.unload()", "testcase": false, "constructor": false}, {"identifier": "allowsSessionStartedInBackground", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean allowsSessionStartedInBackground()", "full_signature": "public boolean allowsSessionStartedInBackground()", "class_method_signature": "DB2Plugin.allowsSessionStartedInBackground()", "testcase": false, "constructor": false}, {"identifier": "sessionStarted", "parameters": "(final ISession session)", "modifiers": "public", "return": "PluginSessionCallback", "signature": "PluginSessionCallback sessionStarted(final ISession session)", "full_signature": "public PluginSessionCallback sessionStarted(final ISession session)", "class_method_signature": "DB2Plugin.sessionStarted(final ISession session)", "testcase": false, "constructor": false}, {"identifier": "isPluginSession", "parameters": "(ISession session)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isPluginSession(ISession session)", "full_signature": "@Override protected boolean isPluginSession(ISession session)", "class_method_signature": "DB2Plugin.isPluginSession(ISession session)", "testcase": false, "constructor": false}, {"identifier": "updateTreeApi", "parameters": "(ISession session)", "modifiers": "private", "return": "void", "signature": "void updateTreeApi(ISession session)", "full_signature": "private void updateTreeApi(ISession session)", "class_method_signature": "DB2Plugin.updateTreeApi(ISession session)", "testcase": false, "constructor": false}, {"identifier": "isOS400", "parameters": "(ISession session)", "modifiers": "private", "return": "boolean", "signature": "boolean isOS400(ISession session)", "full_signature": "private boolean isOS400(ISession session)", "class_method_signature": "DB2Plugin.isOS400(ISession session)", "testcase": false, "constructor": false}], "file": "sql12/plugins/db2/src/main/java/net/sourceforge/squirrel_sql/plugins/db2/DB2Plugin.java"}, "focal_method": {"identifier": "sessionStarted", "parameters": "(final ISession session)", "modifiers": "public", "return": "PluginSessionCallback", "body": "public PluginSessionCallback sessionStarted(final ISession session)\n\t{\n\n\t\tif (!isPluginSession(session))\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\tGUIUtils.processOnSwingEventThread(new Runnable()\n\t\t{\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\tupdateTreeApi(session);\n\t\t\t}\n\t\t});\n\n\t\t// Install DB2JCCExceptionFormatter iff we're using the JCC driver\n\t\ttry\n\t\t{\n\t\t\tif (JCC_DRIVER_NAME.equals(session.getMetaData().getJDBCMetaData().getDriverName()))\n\t\t\t{\n\t\t\t\tsession.setExceptionFormatter(new DB2JCCExceptionFormatter());\n\t\t\t}\n\t\t} catch (SQLException e)\n\t\t{\n\t\t\ts_log.error(\"Problem installing exception formatter: \" + e.getMessage());\n\t\t}\n\n\t\treturn new PluginSessionCallbackAdaptor(this);\n\t}", "signature": "PluginSessionCallback sessionStarted(final ISession session)", "full_signature": "public PluginSessionCallback sessionStarted(final ISession session)", "class_method_signature": "DB2Plugin.sessionStarted(final ISession session)", "testcase": false, "constructor": false, "invocations": ["isPluginSession", "processOnSwingEventThread", "updateTreeApi", "equals", "getDriverName", "getJDBCMetaData", "getMetaData", "setExceptionFormatter", "error", "getMessage"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}