{"test_class": {"identifier": "CompletionParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CompletionParser classUnderTest = null;", "modifier": "", "type": "CompletionParser", "declarator": "classUnderTest = null", "var_name": "classUnderTest"}, {"original_string": "String token1 = \"schema1\";", "modifier": "", "type": "String", "declarator": "token1 = \"schema1\"", "var_name": "token1"}, {"original_string": "String token2 = \"table11\";", "modifier": "", "type": "String", "declarator": "token2 = \"table11\"", "var_name": "token2"}, {"original_string": "String qualifiedTableName = token1 + \".\" + token2;", "modifier": "", "type": "String", "declarator": "qualifiedTableName = token1 + \".\" + token2", "var_name": "qualifiedTableName"}, {"original_string": "String testSqlPrefix = \"select col1 as alias1, col2 as alias2 from \";", "modifier": "", "type": "String", "declarator": "testSqlPrefix = \"select col1 as alias1, col2 as alias2 from \"", "var_name": "testSqlPrefix"}, {"original_string": "String testSql = testSqlPrefix + qualifiedTableName;", "modifier": "", "type": "String", "declarator": "testSql = testSqlPrefix + qualifiedTableName", "var_name": "testSql"}], "file": "sql12/fw/src/test/java/net/sourceforge/squirrel_sql/fw/completion/util/CompletionParserTest.java"}, "test_case": {"identifier": "testGetToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetToken()\n\t{\n\t\tassertEquals(token1, classUnderTest.getToken(0));\n\t\tassertEquals(token2, classUnderTest.getToken(1));\n\t}", "signature": "void testGetToken()", "full_signature": "@Test public void testGetToken()", "class_method_signature": "CompletionParserTest.testGetToken()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getToken", "assertEquals", "getToken"]}, "focal_class": {"identifier": "CompletionParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEREF_CHAR = \".\";", "modifier": "private static final", "type": "String", "declarator": "DEREF_CHAR = \".\"", "var_name": "DEREF_CHAR"}, {"original_string": "private ArrayList<String> _tokens = new ArrayList<String>();", "modifier": "private", "type": "ArrayList<String>", "declarator": "_tokens = new ArrayList<String>()", "var_name": "_tokens"}, {"original_string": "private String _stringToParse;", "modifier": "private", "type": "String", "declarator": "_stringToParse", "var_name": "_stringToParse"}, {"original_string": "private int _stringToParsePosition;", "modifier": "private", "type": "int", "declarator": "_stringToParsePosition", "var_name": "_stringToParsePosition"}, {"original_string": "private String _stringToReplace;", "modifier": "private", "type": "String", "declarator": "_stringToReplace", "var_name": "_stringToReplace"}, {"original_string": "private String _textTillCarret;", "modifier": "private", "type": "String", "declarator": "_textTillCarret", "var_name": "_textTillCarret"}], "methods": [{"identifier": "CompletionParser", "parameters": "(String textTillCarret)", "modifiers": "public", "return": "", "signature": " CompletionParser(String textTillCarret)", "full_signature": "public  CompletionParser(String textTillCarret)", "class_method_signature": "CompletionParser.CompletionParser(String textTillCarret)", "testcase": false, "constructor": true}, {"identifier": "CompletionParser", "parameters": "(String textTillCarret, boolean completeQualified)", "modifiers": "public", "return": "", "signature": " CompletionParser(String textTillCarret, boolean completeQualified)", "full_signature": "public  CompletionParser(String textTillCarret, boolean completeQualified)", "class_method_signature": "CompletionParser.CompletionParser(String textTillCarret, boolean completeQualified)", "testcase": false, "constructor": true}, {"identifier": "isQualified", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isQualified()", "full_signature": "public boolean isQualified()", "class_method_signature": "CompletionParser.isQualified()", "testcase": false, "constructor": false}, {"identifier": "getStringToParse", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStringToParse()", "full_signature": "public String getStringToParse()", "class_method_signature": "CompletionParser.getStringToParse()", "testcase": false, "constructor": false}, {"identifier": "getToken", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String getToken(int index)", "full_signature": "public String getToken(int index)", "class_method_signature": "CompletionParser.getToken(int index)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "CompletionParser.size()", "testcase": false, "constructor": false}, {"identifier": "getStringToParsePosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStringToParsePosition()", "full_signature": "public int getStringToParsePosition()", "class_method_signature": "CompletionParser.getStringToParsePosition()", "testcase": false, "constructor": false}, {"identifier": "getStringToReplace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStringToReplace()", "full_signature": "public String getStringToReplace()", "class_method_signature": "CompletionParser.getStringToReplace()", "testcase": false, "constructor": false}, {"identifier": "getReplacementStart", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReplacementStart()", "full_signature": "public int getReplacementStart()", "class_method_signature": "CompletionParser.getReplacementStart()", "testcase": false, "constructor": false}, {"identifier": "getTextTillCarret", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTextTillCarret()", "full_signature": "public String getTextTillCarret()", "class_method_signature": "CompletionParser.getTextTillCarret()", "testcase": false, "constructor": false}, {"identifier": "getLastToken", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLastToken()", "full_signature": "public String getLastToken()", "class_method_signature": "CompletionParser.getLastToken()", "testcase": false, "constructor": false}, {"identifier": "getAllButFirst", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAllButFirst()", "full_signature": "public String getAllButFirst()", "class_method_signature": "CompletionParser.getAllButFirst()", "testcase": false, "constructor": false}], "file": "sql12/fw/src/main/java/net/sourceforge/squirrel_sql/fw/completion/util/CompletionParser.java"}, "focal_method": {"identifier": "getToken", "parameters": "(int index)", "modifiers": "public", "return": "String", "body": "public String getToken(int index)\n   {\n      return _tokens.get(index);\n   }", "signature": "String getToken(int index)", "full_signature": "public String getToken(int index)", "class_method_signature": "CompletionParser.getToken(int index)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}