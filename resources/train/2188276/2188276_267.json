{"test_class": {"identifier": "DataTypeDateTest", "superclass": "extends AbstractDataTypeComponentTest", "interfaces": "", "fields": [{"original_string": "private static int userDefinedDateFormat = DateFormat.MEDIUM;", "modifier": "private static", "type": "int", "declarator": "userDefinedDateFormat = DateFormat.MEDIUM", "var_name": "userDefinedDateFormat"}], "file": "sql12/fw/src/test/java/net/sourceforge/squirrel_sql/fw/datasetviewer/cellcomponent/DataTypeDateTest.java"}, "test_case": {"identifier": "testUseDefaultDateFormatAfterLoadingProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUseDefaultDateFormatAfterLoadingProperties() throws Exception\n\t{\n\t\tresetPropertiesLoadedFlag();\n\t\tDTProperties.put(DataTypeDate.class.getName(), \"useJavaDefaultFormat\", \"true\");\n\t\tclassUnderTest = new DataTypeDate(null, getMockColumnDisplayDefinition());\n\t\tDate currentDate = Date.valueOf(\"2010-10-15\");\n\t\tString renderedDate = classUnderTest.renderObject(currentDate);\n\t\tassertEquals(\"Must use the default format\", \"2010-10-15\", renderedDate);\n\t}", "signature": "void testUseDefaultDateFormatAfterLoadingProperties()", "full_signature": "@Test public void testUseDefaultDateFormatAfterLoadingProperties()", "class_method_signature": "DataTypeDateTest.testUseDefaultDateFormatAfterLoadingProperties()", "testcase": true, "constructor": false, "invocations": ["resetPropertiesLoadedFlag", "put", "getName", "getMockColumnDisplayDefinition", "valueOf", "renderObject", "assertEquals"]}, "focal_class": {"identifier": "DataTypeDate", "superclass": "extends BaseDataTypeComponent", "interfaces": "implements IDataTypeComponent", "fields": [{"original_string": "private static final StringManager s_stringMgr =\n\t\tStringManagerFactory.getStringManager(DataTypeDate.class);", "modifier": "private static final", "type": "StringManager", "declarator": "s_stringMgr =\n\t\tStringManagerFactory.getStringManager(DataTypeDate.class)", "var_name": "s_stringMgr"}, {"original_string": "private static ILogger s_log = LoggerController.createLogger(DataTypeDate.class);", "modifier": "private static", "type": "ILogger", "declarator": "s_log = LoggerController.createLogger(DataTypeDate.class)", "var_name": "s_log"}, {"original_string": "private boolean _isNullable;", "modifier": "private", "type": "boolean", "declarator": "_isNullable", "var_name": "_isNullable"}, {"original_string": "private JTable _table;", "modifier": "private", "type": "JTable", "declarator": "_table", "var_name": "_table"}, {"original_string": "private IRestorableTextComponent _textComponent;", "modifier": "private", "type": "IRestorableTextComponent", "declarator": "_textComponent", "var_name": "_textComponent"}, {"original_string": "private DefaultColumnRenderer _renderer = DefaultColumnRenderer.getInstance();", "modifier": "private", "type": "DefaultColumnRenderer", "declarator": "_renderer = DefaultColumnRenderer.getInstance()", "var_name": "_renderer"}, {"original_string": "private static final String thisClassName =\n\t\t\"net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDate\";", "modifier": "private static final", "type": "String", "declarator": "thisClassName =\n\t\t\"net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDate\"", "var_name": "thisClassName"}, {"original_string": "private static int DEFAULT_LOCALE_FORMAT = DateFormat.SHORT;", "modifier": "private static", "type": "int", "declarator": "DEFAULT_LOCALE_FORMAT = DateFormat.SHORT", "var_name": "DEFAULT_LOCALE_FORMAT"}, {"original_string": "private static boolean propertiesAlreadyLoaded = false;", "modifier": "private static", "type": "boolean", "declarator": "propertiesAlreadyLoaded = false", "var_name": "propertiesAlreadyLoaded"}, {"original_string": "private static boolean useJavaDefaultFormat = true;", "modifier": "private static", "type": "boolean", "declarator": "useJavaDefaultFormat = true", "var_name": "useJavaDefaultFormat"}, {"original_string": "private static int localeFormat = DEFAULT_LOCALE_FORMAT;", "modifier": "private static", "type": "int", "declarator": "localeFormat = DEFAULT_LOCALE_FORMAT", "var_name": "localeFormat"}, {"original_string": "private static boolean lenient = true;", "modifier": "private static", "type": "boolean", "declarator": "lenient = true", "var_name": "lenient"}, {"original_string": "private static boolean readDateAsTimestamp = false;", "modifier": "private static", "type": "boolean", "declarator": "readDateAsTimestamp = false", "var_name": "readDateAsTimestamp"}, {"original_string": "private static ThreadSafeDateFormat dateFormat = \n\t     new ThreadSafeDateFormat(localeFormat);", "modifier": "private static", "type": "ThreadSafeDateFormat", "declarator": "dateFormat = \n\t     new ThreadSafeDateFormat(localeFormat)", "var_name": "dateFormat"}, {"original_string": "private boolean _renderExceptionHasBeenLogged;", "modifier": "private", "type": "boolean", "declarator": "_renderExceptionHasBeenLogged", "var_name": "_renderExceptionHasBeenLogged"}], "methods": [{"identifier": "DataTypeDate", "parameters": "(JTable table, ColumnDisplayDefinition colDef)", "modifiers": "public", "return": "", "signature": " DataTypeDate(JTable table, ColumnDisplayDefinition colDef)", "full_signature": "public  DataTypeDate(JTable table, ColumnDisplayDefinition colDef)", "class_method_signature": "DataTypeDate.DataTypeDate(JTable table, ColumnDisplayDefinition colDef)", "testcase": false, "constructor": true}, {"identifier": "loadProperties", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void loadProperties()", "full_signature": "private static void loadProperties()", "class_method_signature": "DataTypeDate.loadProperties()", "testcase": false, "constructor": false}, {"identifier": "initDateFormat", "parameters": "(int format, boolean lenient)", "modifiers": "private static", "return": "void", "signature": "void initDateFormat(int format, boolean lenient)", "full_signature": "private static void initDateFormat(int format, boolean lenient)", "class_method_signature": "DataTypeDate.initDateFormat(int format, boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "getReadDateAsTimestamp", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean getReadDateAsTimestamp()", "full_signature": "public static boolean getReadDateAsTimestamp()", "class_method_signature": "DataTypeDate.getReadDateAsTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassName()", "full_signature": "public String getClassName()", "class_method_signature": "DataTypeDate.getClassName()", "testcase": false, "constructor": false}, {"identifier": "renderObject", "parameters": "(Object value)", "modifiers": "public", "return": "String", "signature": "String renderObject(Object value)", "full_signature": "public String renderObject(Object value)", "class_method_signature": "DataTypeDate.renderObject(Object value)", "testcase": false, "constructor": false}, {"identifier": "isEditableInCell", "parameters": "(Object originalValue)", "modifiers": "public", "return": "boolean", "signature": "boolean isEditableInCell(Object originalValue)", "full_signature": "public boolean isEditableInCell(Object originalValue)", "class_method_signature": "DataTypeDate.isEditableInCell(Object originalValue)", "testcase": false, "constructor": false}, {"identifier": "needToReRead", "parameters": "(Object originalValue)", "modifiers": "public", "return": "boolean", "signature": "boolean needToReRead(Object originalValue)", "full_signature": "public boolean needToReRead(Object originalValue)", "class_method_signature": "DataTypeDate.needToReRead(Object originalValue)", "testcase": false, "constructor": false}, {"identifier": "getJTextField", "parameters": "()", "modifiers": "public", "return": "JTextField", "signature": "JTextField getJTextField()", "full_signature": "public JTextField getJTextField()", "class_method_signature": "DataTypeDate.getJTextField()", "testcase": false, "constructor": false}, {"identifier": "validateAndConvert", "parameters": "(String value, Object originalValue, StringBuffer messageBuffer)", "modifiers": "public", "return": "Object", "signature": "Object validateAndConvert(String value, Object originalValue, StringBuffer messageBuffer)", "full_signature": "public Object validateAndConvert(String value, Object originalValue, StringBuffer messageBuffer)", "class_method_signature": "DataTypeDate.validateAndConvert(String value, Object originalValue, StringBuffer messageBuffer)", "testcase": false, "constructor": false}, {"identifier": "useBinaryEditingPanel", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean useBinaryEditingPanel()", "full_signature": "public boolean useBinaryEditingPanel()", "class_method_signature": "DataTypeDate.useBinaryEditingPanel()", "testcase": false, "constructor": false}, {"identifier": "isEditableInPopup", "parameters": "(Object originalValue)", "modifiers": "public", "return": "boolean", "signature": "boolean isEditableInPopup(Object originalValue)", "full_signature": "public boolean isEditableInPopup(Object originalValue)", "class_method_signature": "DataTypeDate.isEditableInPopup(Object originalValue)", "testcase": false, "constructor": false}, {"identifier": "getJTextArea", "parameters": "(Object value)", "modifiers": "public", "return": "JTextArea", "signature": "JTextArea getJTextArea(Object value)", "full_signature": "public JTextArea getJTextArea(Object value)", "class_method_signature": "DataTypeDate.getJTextArea(Object value)", "testcase": false, "constructor": false}, {"identifier": "validateAndConvertInPopup", "parameters": "(String value, Object originalValue, StringBuffer messageBuffer)", "modifiers": "public", "return": "Object", "signature": "Object validateAndConvertInPopup(String value, Object originalValue, StringBuffer messageBuffer)", "full_signature": "public Object validateAndConvertInPopup(String value, Object originalValue, StringBuffer messageBuffer)", "class_method_signature": "DataTypeDate.validateAndConvertInPopup(String value, Object originalValue, StringBuffer messageBuffer)", "testcase": false, "constructor": false}, {"identifier": "readResultSet", "parameters": "(ResultSet rs, int index, boolean limitDataRead)", "modifiers": "public", "return": "Object", "signature": "Object readResultSet(ResultSet rs, int index, boolean limitDataRead)", "full_signature": "public Object readResultSet(ResultSet rs, int index, boolean limitDataRead)", "class_method_signature": "DataTypeDate.readResultSet(ResultSet rs, int index, boolean limitDataRead)", "testcase": false, "constructor": false}, {"identifier": "staticReadResultSet", "parameters": "(ResultSet rs, int index, boolean limitDataRead)", "modifiers": "public static", "return": "Object", "signature": "Object staticReadResultSet(ResultSet rs, int index, boolean limitDataRead)", "full_signature": "public static Object staticReadResultSet(ResultSet rs, int index, boolean limitDataRead)", "class_method_signature": "DataTypeDate.staticReadResultSet(ResultSet rs, int index, boolean limitDataRead)", "testcase": false, "constructor": false}, {"identifier": "getWhereClauseValue", "parameters": "(Object value, ISQLDatabaseMetaData md)", "modifiers": "public", "return": "IWhereClausePart", "signature": "IWhereClausePart getWhereClauseValue(Object value, ISQLDatabaseMetaData md)", "full_signature": "public IWhereClausePart getWhereClauseValue(Object value, ISQLDatabaseMetaData md)", "class_method_signature": "DataTypeDate.getWhereClauseValue(Object value, ISQLDatabaseMetaData md)", "testcase": false, "constructor": false}, {"identifier": "setPreparedStatementValue", "parameters": "(PreparedStatement pstmt, Object value, int position)", "modifiers": "public", "return": "void", "signature": "void setPreparedStatementValue(PreparedStatement pstmt, Object value, int position)", "full_signature": "public void setPreparedStatementValue(PreparedStatement pstmt, Object value, int position)", "class_method_signature": "DataTypeDate.setPreparedStatementValue(PreparedStatement pstmt, Object value, int position)", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "(String dbDefaultValue)", "modifiers": "public", "return": "Object", "signature": "Object getDefaultValue(String dbDefaultValue)", "full_signature": "public Object getDefaultValue(String dbDefaultValue)", "class_method_signature": "DataTypeDate.getDefaultValue(String dbDefaultValue)", "testcase": false, "constructor": false}, {"identifier": "canDoFileIO", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canDoFileIO()", "full_signature": "public boolean canDoFileIO()", "class_method_signature": "DataTypeDate.canDoFileIO()", "testcase": false, "constructor": false}, {"identifier": "importObject", "parameters": "(FileInputStream inStream)", "modifiers": "public", "return": "String", "signature": "String importObject(FileInputStream inStream)", "full_signature": "public String importObject(FileInputStream inStream)", "class_method_signature": "DataTypeDate.importObject(FileInputStream inStream)", "testcase": false, "constructor": false}, {"identifier": "exportObject", "parameters": "(FileOutputStream outStream, String text)", "modifiers": "public", "return": "void", "signature": "void exportObject(FileOutputStream outStream, String text)", "full_signature": "public void exportObject(FileOutputStream outStream, String text)", "class_method_signature": "DataTypeDate.exportObject(FileOutputStream outStream, String text)", "testcase": false, "constructor": false}, {"identifier": "getControlPanel", "parameters": "()", "modifiers": "public static", "return": "OkJPanel", "signature": "OkJPanel getControlPanel()", "full_signature": "public static OkJPanel getControlPanel()", "class_method_signature": "DataTypeDate.getControlPanel()", "testcase": false, "constructor": false}], "file": "sql12/fw/src/main/java/net/sourceforge/squirrel_sql/fw/datasetviewer/cellcomponent/DataTypeDate.java"}, "focal_method": {"identifier": "renderObject", "parameters": "(Object value)", "modifiers": "public", "return": "String", "body": "public String renderObject(Object value) {\n\t\t// use the Java default date-to-string\n\t\tif (useJavaDefaultFormat == true || value == null)\n\t\t\treturn (String)_renderer.renderObject(value);\n\n\t\t// use a date formatter\n\t\ttry\n\t\t{\n\t\t    return (String)_renderer.renderObject(dateFormat.format(value));\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t    if(false == _renderExceptionHasBeenLogged)\n\t\t    {\n\t\t        _renderExceptionHasBeenLogged = true;\n\t\t        s_log.error(\"Could not format \\\"\" + value + \"\\\" as date type\", e);\n\t\t    }\n\t\t    return (String) _renderer.renderObject(value);\n\t\t}\n   }", "signature": "String renderObject(Object value)", "full_signature": "public String renderObject(Object value)", "class_method_signature": "DataTypeDate.renderObject(Object value)", "testcase": false, "constructor": false, "invocations": ["renderObject", "renderObject", "format", "error", "renderObject"]}, "repository": {"repo_id": 2188276, "url": "https://github.com/igorhvr/squirrel-sql", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 86577, "license": "licensed"}}