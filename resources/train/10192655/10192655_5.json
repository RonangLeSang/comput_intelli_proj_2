{"test_class": {"identifier": "XMLParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String filePath = System.getProperty(\"user.dir\")+\"/src/test/resources/Event1.xml\";", "modifier": "private static", "type": "String", "declarator": "filePath = System.getProperty(\"user.dir\")+\"/src/test/resources/Event1.xml\"", "var_name": "filePath"}, {"original_string": "private static String filePathToXMLWithHierarchicalTimestamp = System.getProperty(\"user.dir\")+\"/src/test/resources/Event2.xml\";", "modifier": "private static", "type": "String", "declarator": "filePathToXMLWithHierarchicalTimestamp = System.getProperty(\"user.dir\")+\"/src/test/resources/Event2.xml\"", "var_name": "filePathToXMLWithHierarchicalTimestamp"}], "file": "SushiImport/src/test/java/sushi/xml/importer/XMLParserTest.java"}, "test_case": {"identifier": "testHierarchicalTimestampParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHierarchicalTimestampParsing() throws XMLParsingException {\n\t\tSushiEventType eventTyp = new SushiEventType(\"EventTaxonomy\");\n\t\teventTyp.setXMLName(\"EventTaxonomy\");\n\t\teventTyp.setTimestampName(\"location.timestamp\");\n\t\teventTyp.save();\n\t\tSushiEvent event = XMLParser.generateEventFromXML(filePathToXMLWithHierarchicalTimestamp);\n\t\tassertNotNull(event);\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.clear();\n\t\tcal.set(2013, 11, 25, 20, 25, 00);\n\t\tassertTrue(\"Should be \" + cal.getTime() + \" but was \" + event.getTimestamp(), event.getTimestamp().equals(cal.getTime()));\n\t}", "signature": "void testHierarchicalTimestampParsing()", "full_signature": "@Test public void testHierarchicalTimestampParsing()", "class_method_signature": "XMLParserTest.testHierarchicalTimestampParsing()", "testcase": true, "constructor": false, "invocations": ["setXMLName", "setTimestampName", "save", "generateEventFromXML", "assertNotNull", "getInstance", "clear", "set", "assertTrue", "getTime", "getTimestamp", "equals", "getTimestamp", "getTime"]}, "focal_class": {"identifier": "XMLParser", "superclass": "extends AbstractXMLParser", "interfaces": "", "fields": [{"original_string": "private static SushiMapTree<String, Serializable> eventValueTree;", "modifier": "private static", "type": "SushiMapTree<String, Serializable>", "declarator": "eventValueTree", "var_name": "eventValueTree"}], "methods": [{"identifier": "generateEventFromXML", "parameters": "(String filePath)", "modifiers": "public static", "return": "SushiEvent", "signature": "SushiEvent generateEventFromXML(String filePath)", "full_signature": "public static SushiEvent generateEventFromXML(String filePath)", "class_method_signature": "XMLParser.generateEventFromXML(String filePath)", "testcase": false, "constructor": false}, {"identifier": "generateEventFromXML", "parameters": "(String filePath, String pathToXSD)", "modifiers": "public static", "return": "SushiEvent", "signature": "SushiEvent generateEventFromXML(String filePath, String pathToXSD)", "full_signature": "public static SushiEvent generateEventFromXML(String filePath, String pathToXSD)", "class_method_signature": "XMLParser.generateEventFromXML(String filePath, String pathToXSD)", "testcase": false, "constructor": false}, {"identifier": "generateEventFromDoc", "parameters": "(Document xmlDoc)", "modifiers": "public static", "return": "SushiEvent", "signature": "SushiEvent generateEventFromDoc(Document xmlDoc)", "full_signature": "public static SushiEvent generateEventFromDoc(Document xmlDoc)", "class_method_signature": "XMLParser.generateEventFromDoc(Document xmlDoc)", "testcase": false, "constructor": false}, {"identifier": "generateEvent", "parameters": "(Document doc, String pathToXSD)", "modifiers": "private static", "return": "SushiEvent", "signature": "SushiEvent generateEvent(Document doc, String pathToXSD)", "full_signature": "private static SushiEvent generateEvent(Document doc, String pathToXSD)", "class_method_signature": "XMLParser.generateEvent(Document doc, String pathToXSD)", "testcase": false, "constructor": false}, {"identifier": "generateEventTreeFromElement", "parameters": "(Node actualRootElement)", "modifiers": "private static", "return": "void", "signature": "void generateEventTreeFromElement(Node actualRootElement)", "full_signature": "private static void generateEventTreeFromElement(Node actualRootElement)", "class_method_signature": "XMLParser.generateEventTreeFromElement(Node actualRootElement)", "testcase": false, "constructor": false}, {"identifier": "getChildNodesFromEvent", "parameters": "(Node actualRootElement, Boolean shouldBeRoot)", "modifiers": "private static", "return": "SushiMapTree<String, Serializable>", "signature": "SushiMapTree<String, Serializable> getChildNodesFromEvent(Node actualRootElement, Boolean shouldBeRoot)", "full_signature": "private static SushiMapTree<String, Serializable> getChildNodesFromEvent(Node actualRootElement, Boolean shouldBeRoot)", "class_method_signature": "XMLParser.getChildNodesFromEvent(Node actualRootElement, Boolean shouldBeRoot)", "testcase": false, "constructor": false}, {"identifier": "hasRealChildNodes", "parameters": "(Node node)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasRealChildNodes(Node node)", "full_signature": "private static boolean hasRealChildNodes(Node node)", "class_method_signature": "XMLParser.hasRealChildNodes(Node node)", "testcase": false, "constructor": false}, {"identifier": "getXSDNameFromNode", "parameters": "(Node element)", "modifiers": "private static", "return": "String", "signature": "String getXSDNameFromNode(Node element)", "full_signature": "private static String getXSDNameFromNode(Node element)", "class_method_signature": "XMLParser.getXSDNameFromNode(Node element)", "testcase": false, "constructor": false}, {"identifier": "getFirstChildWithNameFromNode", "parameters": "(String name, Node parentNode)", "modifiers": "public static", "return": "Node", "signature": "Node getFirstChildWithNameFromNode(String name, Node parentNode)", "full_signature": "public static Node getFirstChildWithNameFromNode(String name, Node parentNode)", "class_method_signature": "XMLParser.getFirstChildWithNameFromNode(String name, Node parentNode)", "testcase": false, "constructor": false}, {"identifier": "getLastChildWithNameFromNode", "parameters": "(String name, Node parentNode)", "modifiers": "public static", "return": "Node", "signature": "Node getLastChildWithNameFromNode(String name, Node parentNode)", "full_signature": "public static Node getLastChildWithNameFromNode(String name, Node parentNode)", "class_method_signature": "XMLParser.getLastChildWithNameFromNode(String name, Node parentNode)", "testcase": false, "constructor": false}, {"identifier": "getAllChildWithNameFromNode", "parameters": "(String name, Node parentNode)", "modifiers": "public static", "return": "List<Node>", "signature": "List<Node> getAllChildWithNameFromNode(String name, Node parentNode)", "full_signature": "public static List<Node> getAllChildWithNameFromNode(String name, Node parentNode)", "class_method_signature": "XMLParser.getAllChildWithNameFromNode(String name, Node parentNode)", "testcase": false, "constructor": false}], "file": "SushiImport/src/main/java/sushi/xml/importer/XMLParser.java"}, "focal_method": {"identifier": "generateEventFromXML", "parameters": "(String filePath)", "modifiers": "public static", "return": "SushiEvent", "body": "public static SushiEvent generateEventFromXML(String filePath) throws XMLParsingException {\n\t\tDocument doc = readXMLDocument(filePath);\n\t\treturn generateEvent(doc, null);\n\t}", "signature": "SushiEvent generateEventFromXML(String filePath)", "full_signature": "public static SushiEvent generateEventFromXML(String filePath)", "class_method_signature": "XMLParser.generateEventFromXML(String filePath)", "testcase": false, "constructor": false, "invocations": ["readXMLDocument", "generateEvent"]}, "repository": {"repo_id": 10192655, "url": "https://github.com/BPT-NH/ComplexEventProcessingPlatform", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 47696, "license": "licensed"}}