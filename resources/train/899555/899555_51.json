{"test_class": {"identifier": "JBossVfsDirTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File mountedDir;", "modifier": "private", "type": "File", "declarator": "mountedDir", "var_name": "mountedDir"}, {"original_string": "private Closeable mount;", "modifier": "private", "type": "Closeable", "declarator": "mount", "var_name": "mount"}], "file": "errai-jboss-as-support/src/test/java/org/jboss/errai/common/metadata/JBossVfsDirTest.java"}, "test_case": {"identifier": "testNestedEmptyVfsDirListing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNestedEmptyVfsDirListing() throws Exception {\n    new File(mountedDir, \"deeply/nested/directories\").mkdirs();\n\n    JBossVfsDir jbvd = new JBossVfsDir(getJBossVfsMountPoint().asDirectoryURL());\n    int count = 0;\n    for (org.jboss.errai.reflections.vfs.Vfs.File reflectionsFile : jbvd.getFiles()) {\n      System.out.println(\"Visiting virtual file \" + reflectionsFile.getRelativePath());\n      count++;\n    }\n    Assert.assertEquals(\"All dirs were empty, but got non-zero count\", 0, count);\n  }", "signature": "void testNestedEmptyVfsDirListing()", "full_signature": "@Test public void testNestedEmptyVfsDirListing()", "class_method_signature": "JBossVfsDirTest.testNestedEmptyVfsDirListing()", "testcase": true, "constructor": false, "invocations": ["mkdirs", "asDirectoryURL", "getJBossVfsMountPoint", "getFiles", "println", "getRelativePath", "assertEquals"]}, "focal_class": {"identifier": "JBossVfsDir", "superclass": "", "interfaces": "implements Vfs.Dir", "fields": [{"original_string": "private VirtualFile virtualFile;", "modifier": "private", "type": "VirtualFile", "declarator": "virtualFile", "var_name": "virtualFile"}], "methods": [{"identifier": "JBossVfsDir", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " JBossVfsDir(URL url)", "full_signature": "public  JBossVfsDir(URL url)", "class_method_signature": "JBossVfsDir.JBossVfsDir(URL url)", "testcase": false, "constructor": true}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "JBossVfsDir.getPath()", "testcase": false, "constructor": false}, {"identifier": "getFiles", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Vfs.File>", "signature": "Iterable<Vfs.File> getFiles()", "full_signature": "@Override public Iterable<Vfs.File> getFiles()", "class_method_signature": "JBossVfsDir.getFiles()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JBossVfsDir.close()", "testcase": false, "constructor": false}], "file": "errai-jboss-as-support/src/main/java/org/jboss/errai/common/metadata/JBossVfsDir.java"}, "focal_method": {"identifier": "getFiles", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Vfs.File>", "body": "@Override\n  public Iterable<Vfs.File> getFiles() {\n    return new Iterable<Vfs.File>() {\n      @Override\n      public Iterator<Vfs.File> iterator() {\n        final List<VirtualFile> toVisit = new ArrayList<VirtualFile>(virtualFile.getChildren());\n\n        return new AbstractIterator<Vfs.File>() {\n\n          @Override\n          protected Vfs.File computeNext() {\n            while (!toVisit.isEmpty()) {\n              final VirtualFile nextFile = toVisit.remove(toVisit.size() - 1);\n              if (nextFile.isDirectory()) {\n                toVisit.addAll(nextFile.getChildren());\n                continue;\n              }\n              return new Vfs.File() {\n                @Override\n                public String getName() {\n                  return nextFile.getName();\n                }\n\n                @Override\n                public String getRelativePath() {\n                  return nextFile.getPathName();\n                }\n\n                @Override\n                public String getFullPath() {\n                  return nextFile.getPathName();\n                }\n\n                @Override\n                public InputStream openInputStream() throws IOException {\n                  return nextFile.openStream();\n                }\n              };\n            }\n            return endOfData();\n          }\n        };\n      }\n    };\n  }", "signature": "Iterable<Vfs.File> getFiles()", "full_signature": "@Override public Iterable<Vfs.File> getFiles()", "class_method_signature": "JBossVfsDir.getFiles()", "testcase": false, "constructor": false, "invocations": ["getChildren", "isEmpty", "remove", "size", "isDirectory", "addAll", "getChildren", "getName", "getPathName", "getPathName", "openStream", "endOfData"]}, "repository": {"repo_id": 899555, "url": "https://github.com/errai/errai", "language": "Java", "is_fork": false, "fork_count": 189, "stargazer_count": 267, "size": 221862, "license": "licensed"}}