{"test_class": {"identifier": "TestSparqlStmtUtils", "superclass": "", "interfaces": "", "fields": [], "file": "jena-sparql-api-stmt/src/test/java/org/aksw/jena_sparql_api/stmt/TestSparqlStmtUtils.java"}, "test_case": {"identifier": "testUsedPrefixes1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUsedPrefixes1() {\n\t\tPrefixMapping pm = RDFDataMgr.loadModel(\"rdf-prefixes/wikidata.jsonld\");\n\t\tString queryStr = \"SELECT ?s ?desc WHERE {\\n\" + \n\t\t\t\t\"  ?s wdt:P279 wd:Q7725634 .\\n\" + \n\t\t\t\t\"  OPTIONAL {\\n\" + \n\t\t\t\t\"      ?s rdfs:label ?desc \\n\" + \n\t\t\t\t\"      FILTER (LANG(?desc) = \\\"en\\\").\\n\" + \n\t\t\t\t\"  }\\n\" + \n\t\t\t\t\"}\";\n\t\t\n\t\tSparqlStmt stmt = SparqlStmtParserImpl.create(pm).apply(queryStr);\n\t\tSparqlStmtUtils.optimizePrefixes(stmt);\n\t\tQuery query = stmt.getQuery();\n\t\tSet<String> actual = query.getPrefixMapping().getNsPrefixMap().keySet();\n\t\tAssert.assertEquals(Sets.newHashSet(\"rdfs\", \"wd\", \"wdt\"), actual);\t\t\n\t}", "signature": "void testUsedPrefixes1()", "full_signature": "@Test public void testUsedPrefixes1()", "class_method_signature": "TestSparqlStmtUtils.testUsedPrefixes1()", "testcase": true, "constructor": false, "invocations": ["loadModel", "apply", "create", "optimizePrefixes", "getQuery", "keySet", "getNsPrefixMap", "getPrefixMapping", "assertEquals", "newHashSet"]}, "focal_class": {"identifier": "SparqlStmtUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Symbol symConnection = Symbol.create(\"http://jsa.aksw.org/connection\");", "modifier": "public static final", "type": "Symbol", "declarator": "symConnection = Symbol.create(\"http://jsa.aksw.org/connection\")", "var_name": "symConnection"}], "methods": [{"identifier": "mentionedEnvVars", "parameters": "(SparqlStmt stmt)", "modifiers": "public static", "return": "Map<String, Boolean>", "signature": "Map<String, Boolean> mentionedEnvVars(SparqlStmt stmt)", "full_signature": "public static Map<String, Boolean> mentionedEnvVars(SparqlStmt stmt)", "class_method_signature": "SparqlStmtUtils.mentionedEnvVars(SparqlStmt stmt)", "testcase": false, "constructor": false}, {"identifier": "getUnionProjectVars", "parameters": "(Collection<? extends SparqlStmt> stmts)", "modifiers": "public static", "return": "List<Var>", "signature": "List<Var> getUnionProjectVars(Collection<? extends SparqlStmt> stmts)", "full_signature": "public static List<Var> getUnionProjectVars(Collection<? extends SparqlStmt> stmts)", "class_method_signature": "SparqlStmtUtils.getUnionProjectVars(Collection<? extends SparqlStmt> stmts)", "testcase": false, "constructor": false}, {"identifier": "optimizePrefixes", "parameters": "(SparqlStmt stmt)", "modifiers": "public static", "return": "SparqlStmt", "signature": "SparqlStmt optimizePrefixes(SparqlStmt stmt)", "full_signature": "public static SparqlStmt optimizePrefixes(SparqlStmt stmt)", "class_method_signature": "SparqlStmtUtils.optimizePrefixes(SparqlStmt stmt)", "testcase": false, "constructor": false}, {"identifier": "optimizePrefixes", "parameters": "(SparqlStmt stmt, PrefixMapping globalPm)", "modifiers": "public static", "return": "SparqlStmt", "signature": "SparqlStmt optimizePrefixes(SparqlStmt stmt, PrefixMapping globalPm)", "full_signature": "public static SparqlStmt optimizePrefixes(SparqlStmt stmt, PrefixMapping globalPm)", "class_method_signature": "SparqlStmtUtils.optimizePrefixes(SparqlStmt stmt, PrefixMapping globalPm)", "testcase": false, "constructor": false}, {"identifier": "applyOpTransform", "parameters": "(SparqlStmt stmt, Function<? super Op, ? extends Op> transform)", "modifiers": "public static", "return": "SparqlStmt", "signature": "SparqlStmt applyOpTransform(SparqlStmt stmt, Function<? super Op, ? extends Op> transform)", "full_signature": "public static SparqlStmt applyOpTransform(SparqlStmt stmt, Function<? super Op, ? extends Op> transform)", "class_method_signature": "SparqlStmtUtils.applyOpTransform(SparqlStmt stmt, Function<? super Op, ? extends Op> transform)", "testcase": false, "constructor": false}, {"identifier": "applyNodeTransform", "parameters": "(SparqlStmt stmt, NodeTransform xform)", "modifiers": "public static", "return": "SparqlStmt", "signature": "SparqlStmt applyNodeTransform(SparqlStmt stmt, NodeTransform xform)", "full_signature": "public static SparqlStmt applyNodeTransform(SparqlStmt stmt, NodeTransform xform)", "class_method_signature": "SparqlStmtUtils.applyNodeTransform(SparqlStmt stmt, NodeTransform xform)", "testcase": false, "constructor": false}, {"identifier": "processFile", "parameters": "(PrefixMapping pm, String filenameOrURI)", "modifiers": "public static", "return": "SparqlStmtIterator", "signature": "SparqlStmtIterator processFile(PrefixMapping pm, String filenameOrURI)", "full_signature": "public static SparqlStmtIterator processFile(PrefixMapping pm, String filenameOrURI)", "class_method_signature": "SparqlStmtUtils.processFile(PrefixMapping pm, String filenameOrURI)", "testcase": false, "constructor": false}, {"identifier": "extractBaseIri", "parameters": "(String filenameOrURI)", "modifiers": "public static", "return": "URI", "signature": "URI extractBaseIri(String filenameOrURI)", "full_signature": "public static URI extractBaseIri(String filenameOrURI)", "class_method_signature": "SparqlStmtUtils.extractBaseIri(String filenameOrURI)", "testcase": false, "constructor": false}, {"identifier": "loadString", "parameters": "(String filenameOrURI)", "modifiers": "public static", "return": "String", "signature": "String loadString(String filenameOrURI)", "full_signature": "public static String loadString(String filenameOrURI)", "class_method_signature": "SparqlStmtUtils.loadString(String filenameOrURI)", "testcase": false, "constructor": false}, {"identifier": "openInputStream", "parameters": "(String filenameOrURI)", "modifiers": "public static", "return": "TypedInputStream", "signature": "TypedInputStream openInputStream(String filenameOrURI)", "full_signature": "public static TypedInputStream openInputStream(String filenameOrURI)", "class_method_signature": "SparqlStmtUtils.openInputStream(String filenameOrURI)", "testcase": false, "constructor": false}, {"identifier": "processFile", "parameters": "(PrefixMapping pm, String filenameOrURI, String baseIri)", "modifiers": "public static", "return": "SparqlStmtIterator", "signature": "SparqlStmtIterator processFile(PrefixMapping pm, String filenameOrURI, String baseIri)", "full_signature": "public static SparqlStmtIterator processFile(PrefixMapping pm, String filenameOrURI, String baseIri)", "class_method_signature": "SparqlStmtUtils.processFile(PrefixMapping pm, String filenameOrURI, String baseIri)", "testcase": false, "constructor": false}, {"identifier": "processInputStream", "parameters": "(PrefixMapping pm, String baseIri, InputStream in)", "modifiers": "public static", "return": "SparqlStmtIterator", "signature": "SparqlStmtIterator processInputStream(PrefixMapping pm, String baseIri, InputStream in)", "full_signature": "public static SparqlStmtIterator processInputStream(PrefixMapping pm, String baseIri, InputStream in)", "class_method_signature": "SparqlStmtUtils.processInputStream(PrefixMapping pm, String baseIri, InputStream in)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream in, Function<String, SparqlStmt> parser)", "modifiers": "public static", "return": "SparqlStmtIterator", "signature": "SparqlStmtIterator parse(InputStream in, Function<String, SparqlStmt> parser)", "full_signature": "public static SparqlStmtIterator parse(InputStream in, Function<String, SparqlStmt> parser)", "class_method_signature": "SparqlStmtUtils.parse(InputStream in, Function<String, SparqlStmt> parser)", "testcase": false, "constructor": false}, {"identifier": "execAny", "parameters": "(RDFConnection conn, SparqlStmt stmt)", "modifiers": "public static", "return": "SPARQLResultEx", "signature": "SPARQLResultEx execAny(RDFConnection conn, SparqlStmt stmt)", "full_signature": "public static SPARQLResultEx execAny(RDFConnection conn, SparqlStmt stmt)", "class_method_signature": "SparqlStmtUtils.execAny(RDFConnection conn, SparqlStmt stmt)", "testcase": false, "constructor": false}, {"identifier": "createSinkQuads", "parameters": "(RDFFormat format, OutputStream out, PrefixMapping pm, Supplier<Dataset> datasetSupp)", "modifiers": "public static", "return": "Sink<Quad>", "signature": "Sink<Quad> createSinkQuads(RDFFormat format, OutputStream out, PrefixMapping pm, Supplier<Dataset> datasetSupp)", "full_signature": "public static Sink<Quad> createSinkQuads(RDFFormat format, OutputStream out, PrefixMapping pm, Supplier<Dataset> datasetSupp)", "class_method_signature": "SparqlStmtUtils.createSinkQuads(RDFFormat format, OutputStream out, PrefixMapping pm, Supplier<Dataset> datasetSupp)", "testcase": false, "constructor": false}, {"identifier": "output", "parameters": "(\n            SPARQLResultEx rr,\n            SPARQLResultVisitor sink)", "modifiers": "public static", "return": "void", "signature": "void output(\n            SPARQLResultEx rr,\n            SPARQLResultVisitor sink)", "full_signature": "public static void output(\n            SPARQLResultEx rr,\n            SPARQLResultVisitor sink)", "class_method_signature": "SparqlStmtUtils.output(\n            SPARQLResultEx rr,\n            SPARQLResultVisitor sink)", "testcase": false, "constructor": false}, {"identifier": "output", "parameters": "(\n        SPARQLResultEx rr,\n        Consumer<Quad> sink\n    )", "modifiers": "public static", "return": "void", "signature": "void output(\n        SPARQLResultEx rr,\n        Consumer<Quad> sink\n    )", "full_signature": "public static void output(\n        SPARQLResultEx rr,\n        Consumer<Quad> sink\n    )", "class_method_signature": "SparqlStmtUtils.output(\n        SPARQLResultEx rr,\n        Consumer<Quad> sink\n    )", "testcase": false, "constructor": false}, {"identifier": "output", "parameters": "(SPARQLResultEx r)", "modifiers": "public static", "return": "void", "signature": "void output(SPARQLResultEx r)", "full_signature": "public static void output(SPARQLResultEx r)", "class_method_signature": "SparqlStmtUtils.output(SPARQLResultEx r)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(RDFConnection conn, SparqlStmt stmt, SPARQLResultVisitor sink)", "modifiers": "public static", "return": "void", "signature": "void process(RDFConnection conn, SparqlStmt stmt, SPARQLResultVisitor sink)", "full_signature": "public static void process(RDFConnection conn, SparqlStmt stmt, SPARQLResultVisitor sink)", "class_method_signature": "SparqlStmtUtils.process(RDFConnection conn, SparqlStmt stmt, SPARQLResultVisitor sink)", "testcase": false, "constructor": false}, {"identifier": "processOld", "parameters": "(RDFConnection conn, SparqlStmt stmt)", "modifiers": "public static", "return": "void", "signature": "void processOld(RDFConnection conn, SparqlStmt stmt)", "full_signature": "public static void processOld(RDFConnection conn, SparqlStmt stmt)", "class_method_signature": "SparqlStmtUtils.processOld(RDFConnection conn, SparqlStmt stmt)", "testcase": false, "constructor": false}, {"identifier": "toAlgebra", "parameters": "(SparqlStmt stmt)", "modifiers": "public static", "return": "Op", "signature": "Op toAlgebra(SparqlStmt stmt)", "full_signature": "public static Op toAlgebra(SparqlStmt stmt)", "class_method_signature": "SparqlStmtUtils.toAlgebra(SparqlStmt stmt)", "testcase": false, "constructor": false}], "file": "jena-sparql-api-stmt/src/main/java/org/aksw/jena_sparql_api/stmt/SparqlStmtUtils.java"}, "focal_method": {"identifier": "optimizePrefixes", "parameters": "(SparqlStmt stmt)", "modifiers": "public static", "return": "SparqlStmt", "body": "public static SparqlStmt optimizePrefixes(SparqlStmt stmt) {\n        optimizePrefixes(stmt, null);\n        return stmt;\n    }", "signature": "SparqlStmt optimizePrefixes(SparqlStmt stmt)", "full_signature": "public static SparqlStmt optimizePrefixes(SparqlStmt stmt)", "class_method_signature": "SparqlStmtUtils.optimizePrefixes(SparqlStmt stmt)", "testcase": false, "constructor": false, "invocations": ["optimizePrefixes"]}, "repository": {"repo_id": 9121658, "url": "https://github.com/SmartDataAnalytics/jena-sparql-api", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 44, "size": 32072, "license": "licensed"}}