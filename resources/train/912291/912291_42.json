{"test_class": {"identifier": "IDWithIssuerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ID = \"ID\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"ID\"", "var_name": "ID"}, {"original_string": "private static final String NS = \"NS\";", "modifier": "private static final", "type": "String", "declarator": "NS = \"NS\"", "var_name": "NS"}, {"original_string": "private static final String UID = \"UID\";", "modifier": "private static final", "type": "String", "declarator": "UID = \"UID\"", "var_name": "UID"}, {"original_string": "private static final String ISO = \"ISO\";", "modifier": "private static final", "type": "String", "declarator": "ISO = \"ISO\"", "var_name": "ISO"}], "file": "dcm4che-core/src/test/java/org/dcm4che3/data/IDWithIssuerTest.java"}, "test_case": {"identifier": "pidsOfTest_faking_duplicate_by_using_same_PID_but_different_issuer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void pidsOfTest_faking_duplicate_by_using_same_PID_but_different_issuer() {\n        Attributes rootWithMainId = createIdWithNS(NS);\n        rootWithMainId.newSequence(OtherPatientIDsSequence, 0);\n        Sequence other = rootWithMainId.getSequence(OtherPatientIDsSequence);\n        Attributes otherPatientId = otherPatientIds(\"other_ns\");\n        other.add(otherPatientId);\n\n        Set<IDWithIssuer> all = IDWithIssuer.pidsOf(rootWithMainId);\n\n        assertEquals(\"Same pid but for different issuer should not be removed!\", all.size(), 2);\n    }", "signature": "void pidsOfTest_faking_duplicate_by_using_same_PID_but_different_issuer()", "full_signature": "@Test public void pidsOfTest_faking_duplicate_by_using_same_PID_but_different_issuer()", "class_method_signature": "IDWithIssuerTest.pidsOfTest_faking_duplicate_by_using_same_PID_but_different_issuer()", "testcase": true, "constructor": false, "invocations": ["createIdWithNS", "newSequence", "getSequence", "otherPatientIds", "add", "pidsOf", "assertEquals", "size"]}, "focal_class": {"identifier": "IDWithIssuer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final IDWithIssuer[] EMPTY = {};", "modifier": "public static final", "type": "IDWithIssuer[]", "declarator": "EMPTY = {}", "var_name": "EMPTY"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private String typeOfPatientID;", "modifier": "private", "type": "String", "declarator": "typeOfPatientID", "var_name": "typeOfPatientID"}, {"original_string": "private String identifierTypeCode;", "modifier": "private", "type": "String", "declarator": "identifierTypeCode", "var_name": "identifierTypeCode"}, {"original_string": "private Issuer issuer;", "modifier": "private", "type": "Issuer", "declarator": "issuer", "var_name": "issuer"}], "methods": [{"identifier": "IDWithIssuer", "parameters": "(String id, Issuer issuer)", "modifiers": "public", "return": "", "signature": " IDWithIssuer(String id, Issuer issuer)", "full_signature": "public  IDWithIssuer(String id, Issuer issuer)", "class_method_signature": "IDWithIssuer.IDWithIssuer(String id, Issuer issuer)", "testcase": false, "constructor": true}, {"identifier": "IDWithIssuer", "parameters": "(String id, String issuer)", "modifiers": "public", "return": "", "signature": " IDWithIssuer(String id, String issuer)", "full_signature": "public  IDWithIssuer(String id, String issuer)", "class_method_signature": "IDWithIssuer.IDWithIssuer(String id, String issuer)", "testcase": false, "constructor": true}, {"identifier": "IDWithIssuer", "parameters": "(String cx)", "modifiers": "public", "return": "", "signature": " IDWithIssuer(String cx)", "full_signature": "public  IDWithIssuer(String cx)", "class_method_signature": "IDWithIssuer.IDWithIssuer(String cx)", "testcase": false, "constructor": true}, {"identifier": "withoutIssuer", "parameters": "()", "modifiers": "public", "return": "IDWithIssuer", "signature": "IDWithIssuer withoutIssuer()", "full_signature": "public IDWithIssuer withoutIssuer()", "class_method_signature": "IDWithIssuer.withoutIssuer()", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getID()", "full_signature": "public final String getID()", "class_method_signature": "IDWithIssuer.getID()", "testcase": false, "constructor": false}, {"identifier": "getTypeOfPatientID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTypeOfPatientID()", "full_signature": "public String getTypeOfPatientID()", "class_method_signature": "IDWithIssuer.getTypeOfPatientID()", "testcase": false, "constructor": false}, {"identifier": "setTypeOfPatientID", "parameters": "(String typeOfPatientID)", "modifiers": "public", "return": "void", "signature": "void setTypeOfPatientID(String typeOfPatientID)", "full_signature": "public void setTypeOfPatientID(String typeOfPatientID)", "class_method_signature": "IDWithIssuer.setTypeOfPatientID(String typeOfPatientID)", "testcase": false, "constructor": false}, {"identifier": "getIdentifierTypeCode", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getIdentifierTypeCode()", "full_signature": "public final String getIdentifierTypeCode()", "class_method_signature": "IDWithIssuer.getIdentifierTypeCode()", "testcase": false, "constructor": false}, {"identifier": "setIdentifierTypeCode", "parameters": "(String identifierTypeCode)", "modifiers": "public final", "return": "void", "signature": "void setIdentifierTypeCode(String identifierTypeCode)", "full_signature": "public final void setIdentifierTypeCode(String identifierTypeCode)", "class_method_signature": "IDWithIssuer.setIdentifierTypeCode(String identifierTypeCode)", "testcase": false, "constructor": false}, {"identifier": "getIssuer", "parameters": "()", "modifiers": "public final", "return": "Issuer", "signature": "Issuer getIssuer()", "full_signature": "public final Issuer getIssuer()", "class_method_signature": "IDWithIssuer.getIssuer()", "testcase": false, "constructor": false}, {"identifier": "setIssuer", "parameters": "(Issuer issuer)", "modifiers": "public final", "return": "void", "signature": "void setIssuer(Issuer issuer)", "full_signature": "public final void setIssuer(Issuer issuer)", "class_method_signature": "IDWithIssuer.setIssuer(Issuer issuer)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IDWithIssuer.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IDWithIssuer.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "IDWithIssuer.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(IDWithIssuer other)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(IDWithIssuer other)", "full_signature": "public boolean matches(IDWithIssuer other)", "class_method_signature": "IDWithIssuer.matches(IDWithIssuer other)", "testcase": false, "constructor": false}, {"identifier": "exportPatientIDWithIssuer", "parameters": "(Attributes attrs)", "modifiers": "public", "return": "Attributes", "signature": "Attributes exportPatientIDWithIssuer(Attributes attrs)", "full_signature": "public Attributes exportPatientIDWithIssuer(Attributes attrs)", "class_method_signature": "IDWithIssuer.exportPatientIDWithIssuer(Attributes attrs)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(Attributes attrs, int idTag,\n            int issuerSeqTag)", "modifiers": "public static", "return": "IDWithIssuer", "signature": "IDWithIssuer valueOf(Attributes attrs, int idTag,\n            int issuerSeqTag)", "full_signature": "public static IDWithIssuer valueOf(Attributes attrs, int idTag,\n            int issuerSeqTag)", "class_method_signature": "IDWithIssuer.valueOf(Attributes attrs, int idTag,\n            int issuerSeqTag)", "testcase": false, "constructor": false}, {"identifier": "pidOf", "parameters": "(Attributes attrs)", "modifiers": "public static", "return": "IDWithIssuer", "signature": "IDWithIssuer pidOf(Attributes attrs)", "full_signature": "public static IDWithIssuer pidOf(Attributes attrs)", "class_method_signature": "IDWithIssuer.pidOf(Attributes attrs)", "testcase": false, "constructor": false}, {"identifier": "identifierTypeCodeOf", "parameters": "(Attributes attrs)", "modifiers": "private static", "return": "String", "signature": "String identifierTypeCodeOf(Attributes attrs)", "full_signature": "private static String identifierTypeCodeOf(Attributes attrs)", "class_method_signature": "IDWithIssuer.identifierTypeCodeOf(Attributes attrs)", "testcase": false, "constructor": false}, {"identifier": "pidsOf", "parameters": "(Attributes attrs)", "modifiers": "public static", "return": "Set<IDWithIssuer>", "signature": "Set<IDWithIssuer> pidsOf(Attributes attrs)", "full_signature": "public static Set<IDWithIssuer> pidsOf(Attributes attrs)", "class_method_signature": "IDWithIssuer.pidsOf(Attributes attrs)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(IDWithIssuer pid, Set<IDWithIssuer> pids)", "modifiers": "private static", "return": "void", "signature": "void addTo(IDWithIssuer pid, Set<IDWithIssuer> pids)", "full_signature": "private static void addTo(IDWithIssuer pid, Set<IDWithIssuer> pids)", "class_method_signature": "IDWithIssuer.addTo(IDWithIssuer pid, Set<IDWithIssuer> pids)", "testcase": false, "constructor": false}], "file": "dcm4che-core/src/main/java/org/dcm4che3/data/IDWithIssuer.java"}, "focal_method": {"identifier": "pidsOf", "parameters": "(Attributes attrs)", "modifiers": "public static", "return": "Set<IDWithIssuer>", "body": "public static Set<IDWithIssuer> pidsOf(Attributes attrs) {\n        IDWithIssuer pid = IDWithIssuer.pidOf(attrs);\n        Sequence opidseq = attrs.getSequence(Tag.OtherPatientIDsSequence);\n        if (opidseq == null)\n            if (pid == null)\n                return Collections.emptySet();\n            else\n                return Collections.singleton(pid);\n        \n        Set<IDWithIssuer> pids =\n                new HashSet<IDWithIssuer>((1 + opidseq.size()) << 1);\n        if (pid != null)\n            pids.add(pid);\n        for (Attributes item : opidseq)\n            addTo(IDWithIssuer.pidOf(item), pids);\n        return pids;\n    }", "signature": "Set<IDWithIssuer> pidsOf(Attributes attrs)", "full_signature": "public static Set<IDWithIssuer> pidsOf(Attributes attrs)", "class_method_signature": "IDWithIssuer.pidsOf(Attributes attrs)", "testcase": false, "constructor": false, "invocations": ["pidOf", "getSequence", "emptySet", "singleton", "size", "add", "addTo", "pidOf"]}, "repository": {"repo_id": 912291, "url": "https://github.com/dcm4che/dcm4che", "stars": 573, "created": "9/15/2010 11:13:55 AM +00:00", "updates": "2020-01-27T15:08:39+00:00", "fork": "False", "license": "licensed"}}