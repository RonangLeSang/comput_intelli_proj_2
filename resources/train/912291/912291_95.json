{"test_class": {"identifier": "ByteUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] SHORT_12345_BE = { -49, -57 };", "modifier": "private static final", "type": "byte[]", "declarator": "SHORT_12345_BE = { -49, -57 }", "var_name": "SHORT_12345_BE"}, {"original_string": "private static final byte[] SHORT_12345_LE = { -57, -49 };", "modifier": "private static final", "type": "byte[]", "declarator": "SHORT_12345_LE = { -57, -49 }", "var_name": "SHORT_12345_LE"}, {"original_string": "private static final byte[] INT_12345_BE = { -1, -1, -49, -57 };", "modifier": "private static final", "type": "byte[]", "declarator": "INT_12345_BE = { -1, -1, -49, -57 }", "var_name": "INT_12345_BE"}, {"original_string": "private static final byte[] INT_12345_LE = { -57, -49, -1, -1 };", "modifier": "private static final", "type": "byte[]", "declarator": "INT_12345_LE = { -57, -49, -1, -1 }", "var_name": "INT_12345_LE"}, {"original_string": "private static final byte[] TAG_PIXEL_DATA_BE = { 0x7f, (byte) 0xe0, 0, 0x10 };", "modifier": "private static final", "type": "byte[]", "declarator": "TAG_PIXEL_DATA_BE = { 0x7f, (byte) 0xe0, 0, 0x10 }", "var_name": "TAG_PIXEL_DATA_BE"}, {"original_string": "private static final byte[] TAG_PIXEL_DATA_LE = { (byte) 0xe0, 0x7f, 0x10, 0 };", "modifier": "private static final", "type": "byte[]", "declarator": "TAG_PIXEL_DATA_LE = { (byte) 0xe0, 0x7f, 0x10, 0 }", "var_name": "TAG_PIXEL_DATA_LE"}, {"original_string": "private static final byte[] FLOAT_PI_LE = { -37, 15, 73, 64 };", "modifier": "private static final", "type": "byte[]", "declarator": "FLOAT_PI_LE = { -37, 15, 73, 64 }", "var_name": "FLOAT_PI_LE"}, {"original_string": "private static final byte[] FLOAT_PI_BE = { 64, 73, 15, -37 };", "modifier": "private static final", "type": "byte[]", "declarator": "FLOAT_PI_BE = { 64, 73, 15, -37 }", "var_name": "FLOAT_PI_BE"}, {"original_string": "private static final byte[] DOUBLE_PI_LE = { 24, 45, 68, 84, -5, 33, 9, 64 };", "modifier": "private static final", "type": "byte[]", "declarator": "DOUBLE_PI_LE = { 24, 45, 68, 84, -5, 33, 9, 64 }", "var_name": "DOUBLE_PI_LE"}, {"original_string": "private static final byte[] DOUBLE_PI_BE = { 64, 9, 33, -5, 84, 68, 45, 24 };", "modifier": "private static final", "type": "byte[]", "declarator": "DOUBLE_PI_BE = { 64, 9, 33, -5, 84, 68, 45, 24 }", "var_name": "DOUBLE_PI_BE"}], "file": "dcm4che-core/src/test/java/org/dcm4che3/util/ByteUtilsTest.java"}, "test_case": {"identifier": "testShortToBytesBE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShortToBytesBE() {\n        assertArrayEquals(SHORT_12345_BE,\n                ByteUtils.shortToBytesBE(-12345, new byte[2] , 0));\n    }", "signature": "void testShortToBytesBE()", "full_signature": "@Test public void testShortToBytesBE()", "class_method_signature": "ByteUtilsTest.testShortToBytesBE()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "shortToBytesBE"]}, "focal_class": {"identifier": "ByteUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final byte[] EMPTY_BYTES = {};", "modifier": "public static final", "type": "byte[]", "declarator": "EMPTY_BYTES = {}", "var_name": "EMPTY_BYTES"}, {"original_string": "public static final int[] EMPTY_INTS = {};", "modifier": "public static final", "type": "int[]", "declarator": "EMPTY_INTS = {}", "var_name": "EMPTY_INTS"}, {"original_string": "public static final float[] EMPTY_FLOATS = {};", "modifier": "public static final", "type": "float[]", "declarator": "EMPTY_FLOATS = {}", "var_name": "EMPTY_FLOATS"}, {"original_string": "public static final double[] EMPTY_DOUBLES = {};", "modifier": "public static final", "type": "double[]", "declarator": "EMPTY_DOUBLES = {}", "var_name": "EMPTY_DOUBLES"}], "methods": [{"identifier": "bytesToVR", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToVR(byte[] bytes, int off)", "full_signature": "public static int bytesToVR(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToVR(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToUShort", "parameters": "(byte[] bytes, int off, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int bytesToUShort(byte[] bytes, int off, boolean bigEndian)", "full_signature": "public static int bytesToUShort(byte[] bytes, int off, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToUShort(byte[] bytes, int off, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToUShortBE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToUShortBE(byte[] bytes, int off)", "full_signature": "public static int bytesToUShortBE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToUShortBE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToUShortLE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToUShortLE(byte[] bytes, int off)", "full_signature": "public static int bytesToUShortLE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToUShortLE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToShort", "parameters": "(byte[] bytes, int off, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int bytesToShort(byte[] bytes, int off, boolean bigEndian)", "full_signature": "public static int bytesToShort(byte[] bytes, int off, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToShort(byte[] bytes, int off, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToShortBE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToShortBE(byte[] bytes, int off)", "full_signature": "public static int bytesToShortBE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToShortBE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToShortLE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToShortLE(byte[] bytes, int off)", "full_signature": "public static int bytesToShortLE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToShortLE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToShorts", "parameters": "(byte[] b, short[] s, int off, int len, boolean bigEndian)", "modifiers": "public static", "return": "void", "signature": "void bytesToShorts(byte[] b, short[] s, int off, int len, boolean bigEndian)", "full_signature": "public static void bytesToShorts(byte[] b, short[] s, int off, int len, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToShorts(byte[] b, short[] s, int off, int len, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToShortsLE", "parameters": "(byte[] b, short[] s, int off, int len)", "modifiers": "public static", "return": "void", "signature": "void bytesToShortsLE(byte[] b, short[] s, int off, int len)", "full_signature": "public static void bytesToShortsLE(byte[] b, short[] s, int off, int len)", "class_method_signature": "ByteUtils.bytesToShortsLE(byte[] b, short[] s, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "bytesToShortsBE", "parameters": "(byte[] b, short[] s, int off, int len)", "modifiers": "public static", "return": "void", "signature": "void bytesToShortsBE(byte[] b, short[] s, int off, int len)", "full_signature": "public static void bytesToShortsBE(byte[] b, short[] s, int off, int len)", "class_method_signature": "ByteUtils.bytesToShortsBE(byte[] b, short[] s, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "bytesToInt", "parameters": "(byte[] bytes, int off, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int bytesToInt(byte[] bytes, int off, boolean bigEndian)", "full_signature": "public static int bytesToInt(byte[] bytes, int off, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToInt(byte[] bytes, int off, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToIntBE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToIntBE(byte[] bytes, int off)", "full_signature": "public static int bytesToIntBE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToIntBE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToIntLE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToIntLE(byte[] bytes, int off)", "full_signature": "public static int bytesToIntLE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToIntLE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToTag", "parameters": "(byte[] bytes, int off, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int bytesToTag(byte[] bytes, int off, boolean bigEndian)", "full_signature": "public static int bytesToTag(byte[] bytes, int off, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToTag(byte[] bytes, int off, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToTagBE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToTagBE(byte[] bytes, int off)", "full_signature": "public static int bytesToTagBE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToTagBE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToTagLE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "int", "signature": "int bytesToTagLE(byte[] bytes, int off)", "full_signature": "public static int bytesToTagLE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToTagLE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToFloat", "parameters": "(byte[] bytes, int off, boolean bigEndian)", "modifiers": "public static", "return": "float", "signature": "float bytesToFloat(byte[] bytes, int off, boolean bigEndian)", "full_signature": "public static float bytesToFloat(byte[] bytes, int off, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToFloat(byte[] bytes, int off, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToFloatBE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "float", "signature": "float bytesToFloatBE(byte[] bytes, int off)", "full_signature": "public static float bytesToFloatBE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToFloatBE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToFloatLE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "float", "signature": "float bytesToFloatLE(byte[] bytes, int off)", "full_signature": "public static float bytesToFloatLE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToFloatLE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToLong", "parameters": "(byte[] bytes, int off, boolean bigEndian)", "modifiers": "public static", "return": "long", "signature": "long bytesToLong(byte[] bytes, int off, boolean bigEndian)", "full_signature": "public static long bytesToLong(byte[] bytes, int off, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToLong(byte[] bytes, int off, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToLongBE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "long", "signature": "long bytesToLongBE(byte[] bytes, int off)", "full_signature": "public static long bytesToLongBE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToLongBE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToLongLE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "long", "signature": "long bytesToLongLE(byte[] bytes, int off)", "full_signature": "public static long bytesToLongLE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToLongLE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToDouble", "parameters": "(byte[] bytes, int off, boolean bigEndian)", "modifiers": "public static", "return": "double", "signature": "double bytesToDouble(byte[] bytes, int off, boolean bigEndian)", "full_signature": "public static double bytesToDouble(byte[] bytes, int off, boolean bigEndian)", "class_method_signature": "ByteUtils.bytesToDouble(byte[] bytes, int off, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToDoubleBE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "double", "signature": "double bytesToDoubleBE(byte[] bytes, int off)", "full_signature": "public static double bytesToDoubleBE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToDoubleBE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "bytesToDoubleLE", "parameters": "(byte[] bytes, int off)", "modifiers": "public static", "return": "double", "signature": "double bytesToDoubleLE(byte[] bytes, int off)", "full_signature": "public static double bytesToDoubleLE(byte[] bytes, int off)", "class_method_signature": "ByteUtils.bytesToDoubleLE(byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "shortToBytes", "parameters": "(int i, byte[] bytes, int off,\n            boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] shortToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "full_signature": "public static byte[] shortToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "class_method_signature": "ByteUtils.shortToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "shortToBytesBE", "parameters": "(int i, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] shortToBytesBE(int i, byte[] bytes, int off)", "full_signature": "public static byte[] shortToBytesBE(int i, byte[] bytes, int off)", "class_method_signature": "ByteUtils.shortToBytesBE(int i, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "shortToBytesLE", "parameters": "(int i, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] shortToBytesLE(int i, byte[] bytes, int off)", "full_signature": "public static byte[] shortToBytesLE(int i, byte[] bytes, int off)", "class_method_signature": "ByteUtils.shortToBytesLE(int i, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "intToBytes", "parameters": "(int i, byte[] bytes, int off,\n            boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "full_signature": "public static byte[] intToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "class_method_signature": "ByteUtils.intToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "intToBytesBE", "parameters": "(int i, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytesBE(int i, byte[] bytes, int off)", "full_signature": "public static byte[] intToBytesBE(int i, byte[] bytes, int off)", "class_method_signature": "ByteUtils.intToBytesBE(int i, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "intToBytesLE", "parameters": "(int i, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytesLE(int i, byte[] bytes, int off)", "full_signature": "public static byte[] intToBytesLE(int i, byte[] bytes, int off)", "class_method_signature": "ByteUtils.intToBytesLE(int i, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "tagToBytes", "parameters": "(int i, byte[] bytes, int off,\n            boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] tagToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "full_signature": "public static byte[] tagToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "class_method_signature": "ByteUtils.tagToBytes(int i, byte[] bytes, int off,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "tagToBytesBE", "parameters": "(int i, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] tagToBytesBE(int i, byte[] bytes, int off)", "full_signature": "public static byte[] tagToBytesBE(int i, byte[] bytes, int off)", "class_method_signature": "ByteUtils.tagToBytesBE(int i, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "tagToBytesLE", "parameters": "(int i, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] tagToBytesLE(int i, byte[] bytes, int off)", "full_signature": "public static byte[] tagToBytesLE(int i, byte[] bytes, int off)", "class_method_signature": "ByteUtils.tagToBytesLE(int i, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "floatToBytes", "parameters": "(float f, byte[] bytes, int off,\n            boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] floatToBytes(float f, byte[] bytes, int off,\n            boolean bigEndian)", "full_signature": "public static byte[] floatToBytes(float f, byte[] bytes, int off,\n            boolean bigEndian)", "class_method_signature": "ByteUtils.floatToBytes(float f, byte[] bytes, int off,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "floatToBytesBE", "parameters": "(float f, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] floatToBytesBE(float f, byte[] bytes, int off)", "full_signature": "public static byte[] floatToBytesBE(float f, byte[] bytes, int off)", "class_method_signature": "ByteUtils.floatToBytesBE(float f, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "floatToBytesLE", "parameters": "(float f, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] floatToBytesLE(float f, byte[] bytes, int off)", "full_signature": "public static byte[] floatToBytesLE(float f, byte[] bytes, int off)", "class_method_signature": "ByteUtils.floatToBytesLE(float f, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "doubleToBytes", "parameters": "(double d, byte[] bytes, int off,\n            boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] doubleToBytes(double d, byte[] bytes, int off,\n            boolean bigEndian)", "full_signature": "public static byte[] doubleToBytes(double d, byte[] bytes, int off,\n            boolean bigEndian)", "class_method_signature": "ByteUtils.doubleToBytes(double d, byte[] bytes, int off,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "doubleToBytesBE", "parameters": "(double d, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] doubleToBytesBE(double d, byte[] bytes, int off)", "full_signature": "public static byte[] doubleToBytesBE(double d, byte[] bytes, int off)", "class_method_signature": "ByteUtils.doubleToBytesBE(double d, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "doubleToBytesLE", "parameters": "(double d, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] doubleToBytesLE(double d, byte[] bytes, int off)", "full_signature": "public static byte[] doubleToBytesLE(double d, byte[] bytes, int off)", "class_method_signature": "ByteUtils.doubleToBytesLE(double d, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long l, byte[] bytes, int off,\n            boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytes(long l, byte[] bytes, int off,\n            boolean bigEndian)", "full_signature": "public static byte[] longToBytes(long l, byte[] bytes, int off,\n            boolean bigEndian)", "class_method_signature": "ByteUtils.longToBytes(long l, byte[] bytes, int off,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "longToBytesBE", "parameters": "(long l, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytesBE(long l, byte[] bytes, int off)", "full_signature": "public static byte[] longToBytesBE(long l, byte[] bytes, int off)", "class_method_signature": "ByteUtils.longToBytesBE(long l, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "longToBytesLE", "parameters": "(long l, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytesLE(long l, byte[] bytes, int off)", "full_signature": "public static byte[] longToBytesLE(long l, byte[] bytes, int off)", "class_method_signature": "ByteUtils.longToBytesLE(long l, byte[] bytes, int off)", "testcase": false, "constructor": false}, {"identifier": "swapShorts", "parameters": "(byte bs[][])", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] swapShorts(byte bs[][])", "full_signature": "public static byte[][] swapShorts(byte bs[][])", "class_method_signature": "ByteUtils.swapShorts(byte bs[][])", "testcase": false, "constructor": false}, {"identifier": "swapShorts", "parameters": "(byte b[], int off, int len)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] swapShorts(byte b[], int off, int len)", "full_signature": "public static byte[] swapShorts(byte b[], int off, int len)", "class_method_signature": "ByteUtils.swapShorts(byte b[], int off, int len)", "testcase": false, "constructor": false}, {"identifier": "swapInts", "parameters": "(byte b[], int off, int len)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] swapInts(byte b[], int off, int len)", "full_signature": "public static byte[] swapInts(byte b[], int off, int len)", "class_method_signature": "ByteUtils.swapInts(byte b[], int off, int len)", "testcase": false, "constructor": false}, {"identifier": "swapLongs", "parameters": "(byte b[], int off, int len)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] swapLongs(byte b[], int off, int len)", "full_signature": "public static byte[] swapLongs(byte b[], int off, int len)", "class_method_signature": "ByteUtils.swapLongs(byte b[], int off, int len)", "testcase": false, "constructor": false}, {"identifier": "checkLength", "parameters": "(int len, int numBytes)", "modifiers": "private static", "return": "void", "signature": "void checkLength(int len, int numBytes)", "full_signature": "private static void checkLength(int len, int numBytes)", "class_method_signature": "ByteUtils.checkLength(int len, int numBytes)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(byte[] bytes, int a, int b)", "modifiers": "private static", "return": "void", "signature": "void swap(byte[] bytes, int a, int b)", "full_signature": "private static void swap(byte[] bytes, int a, int b)", "class_method_signature": "ByteUtils.swap(byte[] bytes, int a, int b)", "testcase": false, "constructor": false}, {"identifier": "swapLastFirst", "parameters": "(byte[] b1, byte[] b2)", "modifiers": "private static", "return": "void", "signature": "void swapLastFirst(byte[] b1, byte[] b2)", "full_signature": "private static void swapLastFirst(byte[] b1, byte[] b2)", "class_method_signature": "ByteUtils.swapLastFirst(byte[] b1, byte[] b2)", "testcase": false, "constructor": false}, {"identifier": "intsToBytesLE", "parameters": "(int... values)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intsToBytesLE(int... values)", "full_signature": "public static byte[] intsToBytesLE(int... values)", "class_method_signature": "ByteUtils.intsToBytesLE(int... values)", "testcase": false, "constructor": false}], "file": "dcm4che-core/src/main/java/org/dcm4che3/util/ByteUtils.java"}, "focal_method": {"identifier": "shortToBytesBE", "parameters": "(int i, byte[] bytes, int off)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] shortToBytesBE(int i, byte[] bytes, int off) {\n        bytes[off] = (byte) (i >> 8);\n        bytes[off + 1] = (byte) i;\n        return bytes;\n    }", "signature": "byte[] shortToBytesBE(int i, byte[] bytes, int off)", "full_signature": "public static byte[] shortToBytesBE(int i, byte[] bytes, int off)", "class_method_signature": "ByteUtils.shortToBytesBE(int i, byte[] bytes, int off)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 912291, "url": "https://github.com/dcm4che/dcm4che", "stars": 573, "created": "9/15/2010 11:13:55 AM +00:00", "updates": "2020-01-27T15:08:39+00:00", "fork": "False", "license": "licensed"}}