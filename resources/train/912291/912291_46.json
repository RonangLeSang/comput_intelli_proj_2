{"test_class": {"identifier": "PersonNameTest", "superclass": "", "interfaces": "", "fields": [], "file": "dcm4che-core/src/test/java/org/dcm4che3/data/PersonNameTest.java"}, "test_case": {"identifier": "testValueOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValueOf() {\n        PersonName pn = new PersonName(\n                \"Adams^John Robert Quincy^^Rev.^B.A. M.Div.\");\n        assertEquals(\"Adams\", pn.get(PersonName.Component.FamilyName));\n        assertEquals(\"John Robert Quincy\", pn.get(PersonName.Component.GivenName));\n        assertEquals(\"Rev.\", pn.get(PersonName.Component.NamePrefix));\n        assertEquals(\"B.A. M.Div.\", pn.get(PersonName.Component.NameSuffix));\n    }", "signature": "void testValueOf()", "full_signature": "@Test public void testValueOf()", "class_method_signature": "PersonNameTest.testValueOf()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "PersonName", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PersonName.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PersonName.class)", "var_name": "LOG"}, {"original_string": "private final String[] fields = new String[15];", "modifier": "private final", "type": "String[]", "declarator": "fields = new String[15]", "var_name": "fields"}], "methods": [{"identifier": "PersonName", "parameters": "()", "modifiers": "public", "return": "", "signature": " PersonName()", "full_signature": "public  PersonName()", "class_method_signature": "PersonName.PersonName()", "testcase": false, "constructor": true}, {"identifier": "PersonName", "parameters": "(String s)", "modifiers": "public", "return": "", "signature": " PersonName(String s)", "full_signature": "public  PersonName(String s)", "class_method_signature": "PersonName.PersonName(String s)", "testcase": false, "constructor": true}, {"identifier": "PersonName", "parameters": "(String s, boolean lenient)", "modifiers": "public", "return": "", "signature": " PersonName(String s, boolean lenient)", "full_signature": "public  PersonName(String s, boolean lenient)", "class_method_signature": "PersonName.PersonName(String s, boolean lenient)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String s, boolean lenient)", "modifiers": "private", "return": "void", "signature": "void parse(String s, boolean lenient)", "full_signature": "private void parse(String s, boolean lenient)", "class_method_signature": "PersonName.parse(String s, boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "PersonName.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Group g, boolean trim)", "modifiers": "public", "return": "String", "signature": "String toString(Group g, boolean trim)", "full_signature": "public String toString(Group g, boolean trim)", "class_method_signature": "PersonName.toString(Group g, boolean trim)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Component c)", "modifiers": "public", "return": "String", "signature": "String get(Component c)", "full_signature": "public String get(Component c)", "class_method_signature": "PersonName.get(Component c)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Group g, Component c)", "modifiers": "public", "return": "String", "signature": "String get(Group g, Component c)", "full_signature": "public String get(Group g, Component c)", "class_method_signature": "PersonName.get(Group g, Component c)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Component c, String s)", "modifiers": "public", "return": "void", "signature": "void set(Component c, String s)", "full_signature": "public void set(Component c, String s)", "class_method_signature": "PersonName.set(Component c, String s)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Group g, Component c, String s)", "modifiers": "public", "return": "void", "signature": "void set(Group g, Component c, String s)", "full_signature": "public void set(Group g, Component c, String s)", "class_method_signature": "PersonName.set(Group g, Component c, String s)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int gindex, int cindex, String s)", "modifiers": "private", "return": "void", "signature": "void set(int gindex, int cindex, String s)", "full_signature": "private void set(int gindex, int cindex, String s)", "class_method_signature": "PersonName.set(int gindex, int cindex, String s)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "PersonName.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Group g)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Group g)", "full_signature": "public boolean contains(Group g)", "class_method_signature": "PersonName.contains(Group g)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Group g, Component c)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Group g, Component c)", "full_signature": "public boolean contains(Group g, Component c)", "class_method_signature": "PersonName.contains(Group g, Component c)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Component c)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Component c)", "full_signature": "public boolean contains(Component c)", "class_method_signature": "PersonName.contains(Component c)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String trim(String s)", "full_signature": "private static String trim(String s)", "class_method_signature": "PersonName.trim(String s)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PersonName.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PersonName.equals(Object obj)", "testcase": false, "constructor": false}], "file": "dcm4che-core/src/main/java/org/dcm4che3/data/PersonName.java"}, "focal_method": {"identifier": "get", "parameters": "(Component c)", "modifiers": "public", "return": "String", "body": "public String get(Component c) {\n        return get(Group.Alphabetic, c);\n    }", "signature": "String get(Component c)", "full_signature": "public String get(Component c)", "class_method_signature": "PersonName.get(Component c)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 912291, "url": "https://github.com/dcm4che/dcm4che", "stars": 573, "created": "9/15/2010 11:13:55 AM +00:00", "updates": "2020-01-27T15:08:39+00:00", "fork": "False", "license": "licensed"}}