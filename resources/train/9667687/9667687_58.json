{"test_class": {"identifier": "AccessControlQueriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TestName testName = new TestName();", "modifier": "@Rule\n    public", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "private GraphDatabaseService db;", "modifier": "private", "type": "GraphDatabaseService", "declarator": "db", "var_name": "db"}, {"original_string": "private AccessControlQueries queries;", "modifier": "private", "type": "AccessControlQueries", "declarator": "queries", "var_name": "queries"}], "file": "queries/src/test/java/org/neo4j/graphdatabases/queries/AccessControlQueriesTest.java"}, "test_case": {"identifier": "shouldGetAccessibleCompaniesForAdmin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetAccessibleCompaniesForAdmin() throws Exception\n    {\n        // Sarah is a member of groups that have ALLOWED_INHERIT, ALLOWED_DO_NOT_INHERIT and DENIED\n        // This tests this combination (for a 2-layer organizational structure).\n\n        // given\n        ExecutionResult results = queries.findAccessibleCompanies( \"Sarah\" );\n\n        // then\n        Iterator<Map<String, Object>> iterator = results.iterator();\n\n        assertTrue( iterator.hasNext() );\n\n        assertEquals( \"Startup\", iterator.next().get( \"company\" ) );\n        assertEquals( \"Acme\", iterator.next().get( \"company\" ) );\n\n        assertFalse( iterator.hasNext() );\n    }", "signature": "void shouldGetAccessibleCompaniesForAdmin()", "full_signature": "@Test public void shouldGetAccessibleCompaniesForAdmin()", "class_method_signature": "AccessControlQueriesTest.shouldGetAccessibleCompaniesForAdmin()", "testcase": true, "constructor": false, "invocations": ["findAccessibleCompanies", "iterator", "assertTrue", "hasNext", "assertEquals", "get", "next", "assertEquals", "get", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "AccessControlQueries", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExecutionEngineWrapper executionEngine;", "modifier": "private final", "type": "ExecutionEngineWrapper", "declarator": "executionEngine", "var_name": "executionEngine"}], "methods": [{"identifier": "AccessControlQueries", "parameters": "( ExecutionEngineWrapper executionEngineWrapper )", "modifiers": "public", "return": "", "signature": " AccessControlQueries( ExecutionEngineWrapper executionEngineWrapper )", "full_signature": "public  AccessControlQueries( ExecutionEngineWrapper executionEngineWrapper )", "class_method_signature": "AccessControlQueries.AccessControlQueries( ExecutionEngineWrapper executionEngineWrapper )", "testcase": false, "constructor": true}, {"identifier": "findAccessibleResources", "parameters": "( String adminName )", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult findAccessibleResources( String adminName )", "full_signature": "public ExecutionResult findAccessibleResources( String adminName )", "class_method_signature": "AccessControlQueries.findAccessibleResources( String adminName )", "testcase": false, "constructor": false}, {"identifier": "findAccessibleCompanies", "parameters": "( String adminName )", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult findAccessibleCompanies( String adminName )", "full_signature": "public ExecutionResult findAccessibleCompanies( String adminName )", "class_method_signature": "AccessControlQueries.findAccessibleCompanies( String adminName )", "testcase": false, "constructor": false}, {"identifier": "findAccessibleAccountsForCompany", "parameters": "( String adminName, String companyName )", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult findAccessibleAccountsForCompany( String adminName, String companyName )", "full_signature": "public ExecutionResult findAccessibleAccountsForCompany( String adminName, String companyName )", "class_method_signature": "AccessControlQueries.findAccessibleAccountsForCompany( String adminName, String companyName )", "testcase": false, "constructor": false}, {"identifier": "findAdminForResource", "parameters": "( String resourceName )", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult findAdminForResource( String resourceName )", "full_signature": "public ExecutionResult findAdminForResource( String resourceName )", "class_method_signature": "AccessControlQueries.findAdminForResource( String resourceName )", "testcase": false, "constructor": false}, {"identifier": "findAdminForCompany", "parameters": "( String companyName )", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult findAdminForCompany( String companyName )", "full_signature": "public ExecutionResult findAdminForCompany( String companyName )", "class_method_signature": "AccessControlQueries.findAdminForCompany( String companyName )", "testcase": false, "constructor": false}, {"identifier": "hasAccessToResource", "parameters": "( String adminName, String resourceName )", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult hasAccessToResource( String adminName, String resourceName )", "full_signature": "public ExecutionResult hasAccessToResource( String adminName, String resourceName )", "class_method_signature": "AccessControlQueries.hasAccessToResource( String adminName, String resourceName )", "testcase": false, "constructor": false}, {"identifier": "hasAccessToIndexedResource", "parameters": "( String adminName, String resourceName )", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult hasAccessToIndexedResource( String adminName, String resourceName )", "full_signature": "public ExecutionResult hasAccessToIndexedResource( String adminName, String resourceName )", "class_method_signature": "AccessControlQueries.hasAccessToIndexedResource( String adminName, String resourceName )", "testcase": false, "constructor": false}], "file": "queries/src/main/java/org/neo4j/graphdatabases/queries/AccessControlQueries.java"}, "focal_method": {"identifier": "findAccessibleCompanies", "parameters": "( String adminName )", "modifiers": "public", "return": "ExecutionResult", "body": "public ExecutionResult findAccessibleCompanies( String adminName )\n    {\n        String query = \"MATCH (admin:Administrator {name:{adminName}})\\n\" +\n                \"MATCH (admin)-[:MEMBER_OF]->()-[:ALLOWED_INHERIT]->()<-[:CHILD_OF*0..3]-(company)\\n\" +\n                \"WHERE NOT ((admin)-[:MEMBER_OF]->()-[:DENIED]->()<-[:CHILD_OF*0..3]-(company))\\n\" +\n                \"RETURN company.name AS company\\n\" +\n                \"UNION\\n\" +\n                \"MATCH (admin:Administrator {name:{adminName}})\\n\" +\n                \"MATCH (admin)-[:MEMBER_OF]->()-[:ALLOWED_DO_NOT_INHERIT]->(company)\\n\" +\n                \"RETURN company.name AS company\";\n\n        Map<String, Object> params = new HashMap<>();\n        params.put( \"adminName\", adminName );\n\n        return executionEngine.execute( query, params );\n    }", "signature": "ExecutionResult findAccessibleCompanies( String adminName )", "full_signature": "public ExecutionResult findAccessibleCompanies( String adminName )", "class_method_signature": "AccessControlQueries.findAccessibleCompanies( String adminName )", "testcase": false, "constructor": false, "invocations": ["put", "execute"]}, "repository": {"repo_id": 9667687, "url": "https://github.com/iansrobinson/graph-databases-use-cases", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 264, "size": 388, "license": "licensed"}}