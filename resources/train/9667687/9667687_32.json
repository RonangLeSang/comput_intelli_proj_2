{"test_class": {"identifier": "ShakespeareQueriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TestName name = new TestName();", "modifier": "@Rule\n    public", "type": "TestName", "declarator": "name = new TestName()", "var_name": "name"}, {"original_string": "private GraphDatabaseService db;", "modifier": "private", "type": "GraphDatabaseService", "declarator": "db", "var_name": "db"}, {"original_string": "private GraphDatabaseService dbUsingCoreApi;", "modifier": "private", "type": "GraphDatabaseService", "declarator": "dbUsingCoreApi", "var_name": "dbUsingCoreApi"}, {"original_string": "private ShakespeareQueries queries;", "modifier": "private", "type": "ShakespeareQueries", "declarator": "queries", "var_name": "queries"}, {"original_string": "private ShakespeareQueries queries2;", "modifier": "private", "type": "ShakespeareQueries", "declarator": "queries2", "var_name": "queries2"}, {"original_string": "private ShakespeareQueriesUsingAutoIndexes queriesUsingAutoIndexes;", "modifier": "private", "type": "ShakespeareQueriesUsingAutoIndexes", "declarator": "queriesUsingAutoIndexes", "var_name": "queriesUsingAutoIndexes"}], "file": "queries/src/test/java/org/neo4j/graphdatabases/queries/ShakespeareQueriesTest.java"}, "test_case": {"identifier": "shouldReturnLatePeriodPlays", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnLatePeriodPlays() throws Exception\n    {\n        try ( Transaction tx = db.beginTx() )\n        {\n            assertLatePeriodPlays( queries.latePeriodPlays() );\n            assertLatePeriodPlays( queries2.latePeriodPlays() );\n            assertLatePeriodPlays( queriesUsingAutoIndexes.latePeriodPlays() );\n            tx.success();\n        }\n    }", "signature": "void shouldReturnLatePeriodPlays()", "full_signature": "@Test public void shouldReturnLatePeriodPlays()", "class_method_signature": "ShakespeareQueriesTest.shouldReturnLatePeriodPlays()", "testcase": true, "constructor": false, "invocations": ["beginTx", "assertLatePeriodPlays", "latePeriodPlays", "assertLatePeriodPlays", "latePeriodPlays", "assertLatePeriodPlays", "latePeriodPlays", "success"]}, "focal_class": {"identifier": "ShakespeareQueries", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExecutionEngineWrapper executionEngineWrapper;", "modifier": "private final", "type": "ExecutionEngineWrapper", "declarator": "executionEngineWrapper", "var_name": "executionEngineWrapper"}], "methods": [{"identifier": "ShakespeareQueries", "parameters": "( ExecutionEngineWrapper executionEngineWrapper )", "modifiers": "public", "return": "", "signature": " ShakespeareQueries( ExecutionEngineWrapper executionEngineWrapper )", "full_signature": "public  ShakespeareQueries( ExecutionEngineWrapper executionEngineWrapper )", "class_method_signature": "ShakespeareQueries.ShakespeareQueries( ExecutionEngineWrapper executionEngineWrapper )", "testcase": false, "constructor": true}, {"identifier": "theatreCityBard", "parameters": "()", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult theatreCityBard()", "full_signature": "public ExecutionResult theatreCityBard()", "class_method_signature": "ShakespeareQueries.theatreCityBard()", "testcase": false, "constructor": false}, {"identifier": "allPlays", "parameters": "()", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult allPlays()", "full_signature": "public ExecutionResult allPlays()", "class_method_signature": "ShakespeareQueries.allPlays()", "testcase": false, "constructor": false}, {"identifier": "latePeriodPlays", "parameters": "()", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult latePeriodPlays()", "full_signature": "public ExecutionResult latePeriodPlays()", "class_method_signature": "ShakespeareQueries.latePeriodPlays()", "testcase": false, "constructor": false}, {"identifier": "orderedByPerformance", "parameters": "()", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult orderedByPerformance()", "full_signature": "public ExecutionResult orderedByPerformance()", "class_method_signature": "ShakespeareQueries.orderedByPerformance()", "testcase": false, "constructor": false}, {"identifier": "exampleOfWith", "parameters": "()", "modifiers": "public", "return": "ExecutionResult", "signature": "ExecutionResult exampleOfWith()", "full_signature": "public ExecutionResult exampleOfWith()", "class_method_signature": "ShakespeareQueries.exampleOfWith()", "testcase": false, "constructor": false}], "file": "queries/src/main/java/org/neo4j/graphdatabases/queries/ShakespeareQueries.java"}, "focal_method": {"identifier": "latePeriodPlays", "parameters": "()", "modifiers": "public", "return": "ExecutionResult", "body": "public ExecutionResult latePeriodPlays()\n    {\n        String query =\n                \"MATCH (theater:Venue {name:'Theatre Royal'}), \\n\" +\n                        \"      (newcastle:City {name:'Newcastle'}), \\n\" +\n                        \"      (bard:Author {lastname:'Shakespeare'})\\n\" +\n                        \"MATCH (newcastle)<-[:STREET|CITY*1..2]-(theater)<-[:VENUE]-()-[:PERFORMANCE_OF]->()\\n\" +\n                        \"      -[:PRODUCTION_OF]->(play)<-[w:WROTE_PLAY]-(bard)\\n\" +\n                        \"WHERE w.year > 1608\\n\" +\n                        \"RETURN DISTINCT play.title AS play\";\n\n        Map<String, Object> params = new HashMap<String, Object>();\n\n        return executionEngineWrapper.execute( query, params );\n    }", "signature": "ExecutionResult latePeriodPlays()", "full_signature": "public ExecutionResult latePeriodPlays()", "class_method_signature": "ShakespeareQueries.latePeriodPlays()", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 9667687, "url": "https://github.com/iansrobinson/graph-databases-use-cases", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 264, "size": 388, "license": "licensed"}}