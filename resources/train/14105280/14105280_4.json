{"test_class": {"identifier": "CiCommandLineParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tempDirRule = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tempDirRule = new TemporaryFolder()", "var_name": "tempDirRule"}, {"original_string": "private File tmpDir;", "modifier": "private", "type": "File", "declarator": "tmpDir", "var_name": "tmpDir"}], "file": "celos-ci/src/test/java/com/collective/celos/ci/config/CiCommandLineParserTest.java"}, "test_case": {"identifier": "testContextParserTestFailsNoTestDir", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testContextParserTestFailsNoTestDir() throws Exception {\n        CiCommandLineParser contextParser = new CiCommandLineParser();\n        String[] clParams = (\"--target target --mode TEST --deployDir \" + tmpDir.getAbsolutePath() + \" --workflowName workflow\").split(\" \");\n\n        contextParser.parse(clParams);\n    }", "signature": "void testContextParserTestFailsNoTestDir()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testContextParserTestFailsNoTestDir()", "class_method_signature": "CiCommandLineParserTest.testContextParserTestFailsNoTestDir()", "testcase": true, "constructor": false, "invocations": ["split", "getAbsolutePath", "parse"]}, "focal_class": {"identifier": "CiCommandLineParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLI_TARGET = \"target\";", "modifier": "private static final", "type": "String", "declarator": "CLI_TARGET = \"target\"", "var_name": "CLI_TARGET"}, {"original_string": "private static final String CLI_MODE = \"mode\";", "modifier": "private static final", "type": "String", "declarator": "CLI_MODE = \"mode\"", "var_name": "CLI_MODE"}, {"original_string": "private static final String CLI_DEPLOY_DIR = \"deployDir\";", "modifier": "private static final", "type": "String", "declarator": "CLI_DEPLOY_DIR = \"deployDir\"", "var_name": "CLI_DEPLOY_DIR"}, {"original_string": "private static final String CLI_WORKFLOW_NAME = \"workflowName\";", "modifier": "private static final", "type": "String", "declarator": "CLI_WORKFLOW_NAME = \"workflowName\"", "var_name": "CLI_WORKFLOW_NAME"}, {"original_string": "private static final String CLI_TEST_CASES_DIR = \"testDir\";", "modifier": "private static final", "type": "String", "declarator": "CLI_TEST_CASES_DIR = \"testDir\"", "var_name": "CLI_TEST_CASES_DIR"}, {"original_string": "private static final String CLI_CELOS_SERVER = \"celos\";", "modifier": "private static final", "type": "String", "declarator": "CLI_CELOS_SERVER = \"celos\"", "var_name": "CLI_CELOS_SERVER"}, {"original_string": "private static final String CLI_HDFS_ROOT = \"hdfsRoot\";", "modifier": "private static final", "type": "String", "declarator": "CLI_HDFS_ROOT = \"hdfsRoot\"", "var_name": "CLI_HDFS_ROOT"}, {"original_string": "private static final String DEFAULT_TEST_CASES_DIR = \"src/test/celos-ci\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TEST_CASES_DIR = \"src/test/celos-ci\"", "var_name": "DEFAULT_TEST_CASES_DIR"}, {"original_string": "protected static final String USERNAME_ENV_VAR = \"CELOS_CI_USERNAME\";", "modifier": "protected static final", "type": "String", "declarator": "USERNAME_ENV_VAR = \"CELOS_CI_USERNAME\"", "var_name": "USERNAME_ENV_VAR"}, {"original_string": "private static final String KEEP_TEMP_DATA = \"KEEP_TEMP_DATA\";", "modifier": "private static final", "type": "String", "declarator": "KEEP_TEMP_DATA = \"KEEP_TEMP_DATA\"", "var_name": "KEEP_TEMP_DATA"}], "methods": [{"identifier": "parse", "parameters": "(final String[] commandLineArguments)", "modifiers": "public", "return": "CiCommandLine", "signature": "CiCommandLine parse(final String[] commandLineArguments)", "full_signature": "public CiCommandLine parse(final String[] commandLineArguments)", "class_method_signature": "CiCommandLineParser.parse(final String[] commandLineArguments)", "testcase": false, "constructor": false}, {"identifier": "constructOptionsForHelp", "parameters": "()", "modifiers": "public", "return": "Options", "signature": "Options constructOptionsForHelp()", "full_signature": "public Options constructOptionsForHelp()", "class_method_signature": "CiCommandLineParser.constructOptionsForHelp()", "testcase": false, "constructor": false}, {"identifier": "constructOptionsForParsing", "parameters": "()", "modifiers": "public", "return": "Options", "signature": "Options constructOptionsForParsing()", "full_signature": "public Options constructOptionsForParsing()", "class_method_signature": "CiCommandLineParser.constructOptionsForParsing()", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "(\n            final int printedRowWidth,\n            final int spacesBeforeOption,\n            final int spacesBeforeOptionDescription,\n            final boolean displayUsage,\n            final OutputStream out)", "modifiers": "public", "return": "void", "signature": "void printHelp(\n            final int printedRowWidth,\n            final int spacesBeforeOption,\n            final int spacesBeforeOptionDescription,\n            final boolean displayUsage,\n            final OutputStream out)", "full_signature": "public void printHelp(\n            final int printedRowWidth,\n            final int spacesBeforeOption,\n            final int spacesBeforeOptionDescription,\n            final boolean displayUsage,\n            final OutputStream out)", "class_method_signature": "CiCommandLineParser.printHelp(\n            final int printedRowWidth,\n            final int spacesBeforeOption,\n            final int spacesBeforeOptionDescription,\n            final boolean displayUsage,\n            final OutputStream out)", "testcase": false, "constructor": false}], "file": "celos-ci/src/main/java/com/collective/celos/ci/config/CiCommandLineParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String[] commandLineArguments)", "modifiers": "public", "return": "CiCommandLine", "body": "public CiCommandLine parse(final String[] commandLineArguments) throws Exception {\n\n        final CommandLineParser cmdLineGnuParser = new GnuParser();\n        final Options gnuOptions = constructOptionsForParsing();\n        CommandLine commandLine = cmdLineGnuParser.parse(gnuOptions, commandLineArguments);\n\n        if (!commandLine.hasOption(CLI_TARGET) || !commandLine.hasOption(CLI_MODE) || !commandLine.hasOption(CLI_WORKFLOW_NAME)) {\n            printHelp(80, 5, 3, true, System.out);\n            throw new RuntimeException(\"Wrong CelosCi configuration provided\");\n        }\n\n        String deployDir = commandLine.getOptionValue(CLI_DEPLOY_DIR);\n        String mode = commandLine.getOptionValue(CLI_MODE);\n        String workflowName = commandLine.getOptionValue(CLI_WORKFLOW_NAME);\n        String targetUri = commandLine.getOptionValue(CLI_TARGET);\n        String testCasesDir = commandLine.getOptionValue(CLI_TEST_CASES_DIR, DEFAULT_TEST_CASES_DIR);\n        String hdfsRoot = commandLine.getOptionValue(CLI_HDFS_ROOT, Constants.DEFAULT_HDFS_ROOT);\n        String celosServerUri = commandLine.getOptionValue(CLI_CELOS_SERVER);\n\n        boolean keepTempData = Boolean.parseBoolean(System.getenv(KEEP_TEMP_DATA));\n        String userName = System.getenv(USERNAME_ENV_VAR);\n        if (userName == null) {\n            userName = System.getProperty(\"user.name\");\n        }\n        return new CiCommandLine(targetUri, mode, deployDir, workflowName, testCasesDir, userName, keepTempData, celosServerUri, hdfsRoot);\n    }", "signature": "CiCommandLine parse(final String[] commandLineArguments)", "full_signature": "public CiCommandLine parse(final String[] commandLineArguments)", "class_method_signature": "CiCommandLineParser.parse(final String[] commandLineArguments)", "testcase": false, "constructor": false, "invocations": ["constructOptionsForParsing", "parse", "hasOption", "hasOption", "hasOption", "printHelp", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "parseBoolean", "getenv", "getenv", "getProperty"]}, "repository": {"repo_id": 14105280, "url": "https://github.com/collectivemedia/celos", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 23, "size": 8863, "license": "licensed"}}