{"test_class": {"identifier": "HdfsDeployerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tempDir = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tempDir = new TemporaryFolder()", "var_name": "tempDir"}], "file": "celos-ci/src/test/java/com/collective/celos/ci/deploy/HdfsDeployerTest.java"}, "test_case": {"identifier": "testDeployRemoteDirExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeployRemoteDirExist() throws Exception {\n        CelosCiContext context = mock(CelosCiContext.class);\n        HdfsDeployer deployer = new HdfsDeployer(context);\n\n        File localFolder = tempDir.newFolder();\n        File remoteHdfsFolder = tempDir.newFolder();\n\n        File localHdfsFolder = new File(localFolder, \"hdfs\");\n        localHdfsFolder.mkdirs();\n        new File(localHdfsFolder, \"file1\").createNewFile();\n        new File(localHdfsFolder, \"file2\").createNewFile();\n\n        doReturn(LocalFileSystem.get(new Configuration())).when(context).getFileSystem();\n        doReturn(localFolder).when(context).getDeployDir();\n        doReturn(remoteHdfsFolder.getAbsolutePath()).when(context).getHdfsPrefix();\n        doReturn(\"workflow\").when(context).getWorkflowName();\n        doReturn(\"/some/hdfs/root\").when(context).getHdfsRoot();\n\n        File targetDir = new File(remoteHdfsFolder, \"some/hdfs/root/workflow\");\n        targetDir.mkdirs();\n        new File(targetDir, \"file3\").createNewFile();\n        new File(targetDir, \"file4\").createNewFile();\n\n        Assert.assertEquals(Sets.newHashSet(\"file3\", \"file4\"), getFilesWithoutCrc(targetDir));\n\n        deployer.deploy();\n\n        Assert.assertEquals(Sets.newHashSet(\"file2\", \"file1\"), getFilesWithoutCrc(targetDir));\n    }", "signature": "void testDeployRemoteDirExist()", "full_signature": "@Test public void testDeployRemoteDirExist()", "class_method_signature": "HdfsDeployerTest.testDeployRemoteDirExist()", "testcase": true, "constructor": false, "invocations": ["mock", "newFolder", "newFolder", "mkdirs", "createNewFile", "createNewFile", "getFileSystem", "when", "doReturn", "get", "getDeployDir", "when", "doReturn", "getHdfsPrefix", "when", "doReturn", "getAbsolutePath", "getWorkflowName", "when", "doReturn", "getHdfsRoot", "when", "doReturn", "mkdirs", "createNewFile", "createNewFile", "assertEquals", "newHashSet", "getFilesWithoutCrc", "deploy", "assertEquals", "newHashSet", "getFilesWithoutCrc"]}, "focal_class": {"identifier": "HdfsDeployer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String REMOTE_HDFS_PATTERN = \"%s%s/%s\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_HDFS_PATTERN = \"%s%s/%s\"", "var_name": "REMOTE_HDFS_PATTERN"}, {"original_string": "private static final String LOCAL_HDFS_PATTERN = \"%s/hdfs\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_HDFS_PATTERN = \"%s/hdfs\"", "var_name": "LOCAL_HDFS_PATTERN"}, {"original_string": "private final CelosCiContext context;", "modifier": "private final", "type": "CelosCiContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "HdfsDeployer", "parameters": "(CelosCiContext context)", "modifiers": "public", "return": "", "signature": " HdfsDeployer(CelosCiContext context)", "full_signature": "public  HdfsDeployer(CelosCiContext context)", "class_method_signature": "HdfsDeployer.HdfsDeployer(CelosCiContext context)", "testcase": false, "constructor": true}, {"identifier": "undeploy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void undeploy()", "full_signature": "public void undeploy()", "class_method_signature": "HdfsDeployer.undeploy()", "testcase": false, "constructor": false}, {"identifier": "getDestinationHdfsPath", "parameters": "()", "modifiers": "", "return": "Path", "signature": "Path getDestinationHdfsPath()", "full_signature": " Path getDestinationHdfsPath()", "class_method_signature": "HdfsDeployer.getDestinationHdfsPath()", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deploy()", "full_signature": "public void deploy()", "class_method_signature": "HdfsDeployer.deploy()", "testcase": false, "constructor": false}], "file": "celos-ci/src/main/java/com/collective/celos/ci/deploy/HdfsDeployer.java"}, "focal_method": {"identifier": "deploy", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void deploy() throws Exception {\n\n        FileSystem fs = context.getFileSystem();\n        final String hdfsDirLocalPath = String.format(LOCAL_HDFS_PATTERN, context.getDeployDir());\n\n        final File hdfsDirLocal = new File(hdfsDirLocalPath);\n        if (!hdfsDirLocal.exists()) {\n            throw new IllegalStateException(hdfsDirLocalPath + \" not found local FS\");\n        }\n\n        undeploy();\n\n        Path dst = getDestinationHdfsPath();\n        fs.mkdirs(dst);\n        String[] childFiles = hdfsDirLocal.list();\n        for (String child : childFiles) {\n            fs.copyFromLocalFile(new Path(hdfsDirLocalPath, child), dst);\n        }\n    }", "signature": "void deploy()", "full_signature": "public void deploy()", "class_method_signature": "HdfsDeployer.deploy()", "testcase": false, "constructor": false, "invocations": ["getFileSystem", "format", "getDeployDir", "exists", "undeploy", "getDestinationHdfsPath", "mkdirs", "list", "copyFromLocalFile"]}, "repository": {"repo_id": 14105280, "url": "https://github.com/collectivemedia/celos", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 23, "size": 8863, "license": "licensed"}}