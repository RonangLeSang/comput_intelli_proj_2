{"test_class": {"identifier": "SchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static WorkflowInfo emptyWorkflowInfo = new WorkflowInfo(null, Collections.<WorkflowInfo.ContactsInfo>emptyList());", "modifier": "private static", "type": "WorkflowInfo", "declarator": "emptyWorkflowInfo = new WorkflowInfo(null, Collections.<WorkflowInfo.ContactsInfo>emptyList())", "var_name": "emptyWorkflowInfo"}, {"original_string": "private MemoryStateDatabase.MemoryStateDatabaseConnection connection;", "modifier": "private", "type": "MemoryStateDatabase.MemoryStateDatabaseConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private MemoryStateDatabase.MemoryStateDatabaseConnection mockedConnection;", "modifier": "private", "type": "MemoryStateDatabase.MemoryStateDatabaseConnection", "declarator": "mockedConnection", "var_name": "mockedConnection"}, {"original_string": "private Trigger trigger;", "modifier": "private", "type": "Trigger", "declarator": "trigger", "var_name": "trigger"}, {"original_string": "private Schedule schedule;", "modifier": "private", "type": "Schedule", "declarator": "schedule", "var_name": "schedule"}, {"original_string": "private SchedulingStrategy schedulingStrategy;", "modifier": "private", "type": "SchedulingStrategy", "declarator": "schedulingStrategy", "var_name": "schedulingStrategy"}, {"original_string": "private ExternalService externalService;", "modifier": "private", "type": "ExternalService", "declarator": "externalService", "var_name": "externalService"}, {"original_string": "private WorkflowID workflowId;", "modifier": "private", "type": "WorkflowID", "declarator": "workflowId", "var_name": "workflowId"}, {"original_string": "private Workflow wf;", "modifier": "private", "type": "Workflow", "declarator": "wf", "var_name": "wf"}, {"original_string": "private ScheduledTime scheduledTime;", "modifier": "private", "type": "ScheduledTime", "declarator": "scheduledTime", "var_name": "scheduledTime"}, {"original_string": "private Scheduler scheduler;", "modifier": "private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private SlotID slotId;", "modifier": "private", "type": "SlotID", "declarator": "slotId", "var_name": "slotId"}], "file": "celos-server/src/test/java/com/collective/celos/SchedulerTest.java"}, "test_case": {"identifier": "runExternalWorkflowsMultipleReadyCandidates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void runExternalWorkflowsMultipleReadyCandidates() throws Exception {\n        SlotState slotState1 = makeReadySlotStateForTime(\"2013-11-26T15:01Z\");\n        SlotState slotState2 = makeReadySlotStateForTime(\"2013-11-26T15:02Z\");\n\n        List<SlotState> slotStates = new ArrayList<SlotState>();\n        slotStates.add(slotState1);\n        slotStates.add(slotState2);\n\n        stubAsSchedulingCandidates(slotStates);\n\n        SlotState nextSlotState1 = slotState1.transitionToRunning(\"externalId1\");\n        SlotState nextSlotState2 = slotState2.transitionToRunning(\"externalId2\");\n\n        when(externalService.submit(slotState1.getSlotID())).thenReturn(\"externalId1\");\n        when(externalService.submit(slotState2.getSlotID())).thenReturn(\"externalId2\");\n\n        scheduler.runExternalWorkflows(wf, slotStates, mockedConnection);\n        verify(mockedConnection).putSlotState(nextSlotState1);\n        verify(mockedConnection).putSlotState(nextSlotState2);\n        verifyNoMoreInteractions(mockedConnection);\n    }", "signature": "void runExternalWorkflowsMultipleReadyCandidates()", "full_signature": "@Test public void runExternalWorkflowsMultipleReadyCandidates()", "class_method_signature": "SchedulerTest.runExternalWorkflowsMultipleReadyCandidates()", "testcase": true, "constructor": false, "invocations": ["makeReadySlotStateForTime", "makeReadySlotStateForTime", "add", "add", "stubAsSchedulingCandidates", "transitionToRunning", "transitionToRunning", "thenReturn", "when", "submit", "getSlotID", "thenReturn", "when", "submit", "getSlotID", "runExternalWorkflows", "putSlotState", "verify", "putSlotState", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "Scheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int slidingWindowHours;", "modifier": "private final", "type": "int", "declarator": "slidingWindowHours", "var_name": "slidingWindowHours"}, {"original_string": "private final WorkflowConfiguration configuration;", "modifier": "private final", "type": "WorkflowConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private static Logger LOGGER = Logger.getLogger(Scheduler.class);", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(Scheduler.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "Scheduler", "parameters": "(WorkflowConfiguration configuration, int slidingWindowHours)", "modifiers": "public", "return": "", "signature": " Scheduler(WorkflowConfiguration configuration, int slidingWindowHours)", "full_signature": "public  Scheduler(WorkflowConfiguration configuration, int slidingWindowHours)", "class_method_signature": "Scheduler.Scheduler(WorkflowConfiguration configuration, int slidingWindowHours)", "testcase": false, "constructor": true}, {"identifier": "getSlidingWindowStartTime", "parameters": "(ScheduledTime current)", "modifiers": "", "return": "ScheduledTime", "signature": "ScheduledTime getSlidingWindowStartTime(ScheduledTime current)", "full_signature": " ScheduledTime getSlidingWindowStartTime(ScheduledTime current)", "class_method_signature": "Scheduler.getSlidingWindowStartTime(ScheduledTime current)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(ScheduledTime current, StateDatabaseConnection connection)", "modifiers": "public", "return": "void", "signature": "void step(ScheduledTime current, StateDatabaseConnection connection)", "full_signature": "public void step(ScheduledTime current, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.step(ScheduledTime current, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(ScheduledTime current, Set<WorkflowID> workflowIDs, StateDatabaseConnection connection)", "modifiers": "public", "return": "void", "signature": "void step(ScheduledTime current, Set<WorkflowID> workflowIDs, StateDatabaseConnection connection)", "full_signature": "public void step(ScheduledTime current, Set<WorkflowID> workflowIDs, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.step(ScheduledTime current, Set<WorkflowID> workflowIDs, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "stepWorkflow", "parameters": "(Workflow wf, ScheduledTime current, StateDatabaseConnection connection)", "modifiers": "private", "return": "void", "signature": "void stepWorkflow(Workflow wf, ScheduledTime current, StateDatabaseConnection connection)", "full_signature": "private void stepWorkflow(Workflow wf, ScheduledTime current, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.stepWorkflow(Workflow wf, ScheduledTime current, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "getSlotStatesIncludingMarkedForRerun", "parameters": "(Workflow wf, ScheduledTime current, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "modifiers": "public", "return": "List<SlotState>", "signature": "List<SlotState> getSlotStatesIncludingMarkedForRerun(Workflow wf, ScheduledTime current, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "full_signature": "public List<SlotState> getSlotStatesIncludingMarkedForRerun(Workflow wf, ScheduledTime current, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.getSlotStatesIncludingMarkedForRerun(Workflow wf, ScheduledTime current, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "getSlotStates", "parameters": "(Workflow wf, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "modifiers": "public", "return": "List<SlotState>", "signature": "List<SlotState> getSlotStates(Workflow wf, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "full_signature": "public List<SlotState> getSlotStates(Workflow wf, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.getSlotStates(Workflow wf, ScheduledTime start, ScheduledTime end, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "matchScheduledToFetched", "parameters": "(Workflow wf, SortedSet<ScheduledTime> scheduledTimes, Map<SlotID, SlotState> timeToSlots)", "modifiers": "private", "return": "List<SlotState>", "signature": "List<SlotState> matchScheduledToFetched(Workflow wf, SortedSet<ScheduledTime> scheduledTimes, Map<SlotID, SlotState> timeToSlots)", "full_signature": "private List<SlotState> matchScheduledToFetched(Workflow wf, SortedSet<ScheduledTime> scheduledTimes, Map<SlotID, SlotState> timeToSlots)", "class_method_signature": "Scheduler.matchScheduledToFetched(Workflow wf, SortedSet<ScheduledTime> scheduledTimes, Map<SlotID, SlotState> timeToSlots)", "testcase": false, "constructor": false}, {"identifier": "getWorkflowStartTime", "parameters": "(Workflow wf, ScheduledTime current)", "modifiers": "public", "return": "ScheduledTime", "signature": "ScheduledTime getWorkflowStartTime(Workflow wf, ScheduledTime current)", "full_signature": "public ScheduledTime getWorkflowStartTime(Workflow wf, ScheduledTime current)", "class_method_signature": "Scheduler.getWorkflowStartTime(Workflow wf, ScheduledTime current)", "testcase": false, "constructor": false}, {"identifier": "runExternalWorkflows", "parameters": "(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "modifiers": "", "return": "void", "signature": "void runExternalWorkflows(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "full_signature": " void runExternalWorkflows(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.runExternalWorkflows(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "updateSlotState", "parameters": "(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "modifiers": "", "return": "void", "signature": "void updateSlotState(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "full_signature": " void updateSlotState(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.updateSlotState(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "callTrigger", "parameters": "(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "modifiers": "private", "return": "boolean", "signature": "boolean callTrigger(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "full_signature": "private boolean callTrigger(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.callTrigger(Workflow wf, SlotState slotState, ScheduledTime current, StateDatabaseConnection connection)", "testcase": false, "constructor": false}, {"identifier": "isSlotTimedOut", "parameters": "(ScheduledTime nominalTime, ScheduledTime current, int timeoutSeconds)", "modifiers": "static", "return": "boolean", "signature": "boolean isSlotTimedOut(ScheduledTime nominalTime, ScheduledTime current, int timeoutSeconds)", "full_signature": "static boolean isSlotTimedOut(ScheduledTime nominalTime, ScheduledTime current, int timeoutSeconds)", "class_method_signature": "Scheduler.isSlotTimedOut(ScheduledTime nominalTime, ScheduledTime current, int timeoutSeconds)", "testcase": false, "constructor": false}, {"identifier": "getSlidingWindowHours", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSlidingWindowHours()", "full_signature": "public int getSlidingWindowHours()", "class_method_signature": "Scheduler.getSlidingWindowHours()", "testcase": false, "constructor": false}, {"identifier": "getWorkflowConfiguration", "parameters": "()", "modifiers": "public", "return": "WorkflowConfiguration", "signature": "WorkflowConfiguration getWorkflowConfiguration()", "full_signature": "public WorkflowConfiguration getWorkflowConfiguration()", "class_method_signature": "Scheduler.getWorkflowConfiguration()", "testcase": false, "constructor": false}], "file": "celos-server/src/main/java/com/collective/celos/Scheduler.java"}, "focal_method": {"identifier": "runExternalWorkflows", "parameters": "(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "modifiers": "", "return": "void", "body": "void runExternalWorkflows(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection) throws Exception {\n        List<SlotState> scheduledSlots = wf.getSchedulingStrategy().getSchedulingCandidates(slotStates);\n        for (SlotState slotState : scheduledSlots) {\n            if (!slotState.getStatus().equals(SlotState.Status.READY)) {\n                throw new IllegalStateException(\"Scheduling strategy returned non-ready slot: \" + slotState);\n            }\n            SlotID slotID = slotState.getSlotID();\n            LOGGER.info(\"Submitting slot to external service: \" + slotID);\n            String externalID = wf.getExternalService().submit(slotID);\n            connection.putSlotState(slotState.transitionToRunning(externalID));\n            LOGGER.info(\"Starting slot: \" + slotID + \" with external ID: \" + externalID);\n            wf.getExternalService().start(slotID, externalID);\n        }\n    }", "signature": "void runExternalWorkflows(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "full_signature": " void runExternalWorkflows(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "class_method_signature": "Scheduler.runExternalWorkflows(Workflow wf, List<SlotState> slotStates, StateDatabaseConnection connection)", "testcase": false, "constructor": false, "invocations": ["getSchedulingCandidates", "getSchedulingStrategy", "equals", "getStatus", "getSlotID", "info", "submit", "getExternalService", "putSlotState", "transitionToRunning", "info", "start", "getExternalService"]}, "repository": {"repo_id": 14105280, "url": "https://github.com/collectivemedia/celos", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 23, "size": 8863, "license": "licensed"}}