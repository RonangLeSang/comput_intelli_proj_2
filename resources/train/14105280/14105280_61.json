{"test_class": {"identifier": "SerialSchedulingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WorkflowID workflow;", "modifier": "private", "type": "WorkflowID", "declarator": "workflow", "var_name": "workflow"}, {"original_string": "private SlotID slot1;", "modifier": "private", "type": "SlotID", "declarator": "slot1", "var_name": "slot1"}, {"original_string": "private SlotID slot2;", "modifier": "private", "type": "SlotID", "declarator": "slot2", "var_name": "slot2"}, {"original_string": "private SlotID slot3;", "modifier": "private", "type": "SlotID", "declarator": "slot3", "var_name": "slot3"}, {"original_string": "private SlotID slot4;", "modifier": "private", "type": "SlotID", "declarator": "slot4", "var_name": "slot4"}, {"original_string": "private SlotID slot5;", "modifier": "private", "type": "SlotID", "declarator": "slot5", "var_name": "slot5"}, {"original_string": "private SlotID slot6;", "modifier": "private", "type": "SlotID", "declarator": "slot6", "var_name": "slot6"}], "file": "celos-server/src/test/java/com/collective/celos/SerialSchedulingStrategyTest.java"}, "test_case": {"identifier": "testHasNoSlots", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasNoSlots() {\n        List<SlotState> input = Arrays\n                .asList(new SlotState[] {});\n        List<SlotState> expected = Arrays.asList(new SlotState[] {});\n\n        SchedulingStrategy strategy = makeSerialSchedulingStrategy();\n        Assert.assertEquals(expected, strategy.getSchedulingCandidates(input));\n    }", "signature": "void testHasNoSlots()", "full_signature": "@Test public void testHasNoSlots()", "class_method_signature": "SerialSchedulingStrategyTest.testHasNoSlots()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "makeSerialSchedulingStrategy", "assertEquals", "getSchedulingCandidates"]}, "focal_class": {"identifier": "SerialSchedulingStrategy", "superclass": "", "interfaces": "implements SchedulingStrategy", "fields": [{"original_string": "private int concurrencyLevel;", "modifier": "private", "type": "int", "declarator": "concurrencyLevel", "var_name": "concurrencyLevel"}, {"original_string": "private final Predicate RUNNING_PREDICATE\n            = new SlotStateStatusPredicate(RUNNING);", "modifier": "private final", "type": "Predicate", "declarator": "RUNNING_PREDICATE\n            = new SlotStateStatusPredicate(RUNNING)", "var_name": "RUNNING_PREDICATE"}, {"original_string": "private final Predicate CANDIDATE_PREDICATE\n            = new SlotStateStatusPredicate(READY /* , WAITING */);", "modifier": "private final", "type": "Predicate", "declarator": "CANDIDATE_PREDICATE\n            = new SlotStateStatusPredicate(READY /* , WAITING */)", "var_name": "CANDIDATE_PREDICATE"}], "methods": [{"identifier": "SerialSchedulingStrategy", "parameters": "(int concurrencyLevel)", "modifiers": "public", "return": "", "signature": " SerialSchedulingStrategy(int concurrencyLevel)", "full_signature": "public  SerialSchedulingStrategy(int concurrencyLevel)", "class_method_signature": "SerialSchedulingStrategy.SerialSchedulingStrategy(int concurrencyLevel)", "testcase": false, "constructor": true}, {"identifier": "getSchedulingCandidates", "parameters": "(List<SlotState> states)", "modifiers": "@Override public", "return": "List<SlotState>", "signature": "List<SlotState> getSchedulingCandidates(List<SlotState> states)", "full_signature": "@Override public List<SlotState> getSchedulingCandidates(List<SlotState> states)", "class_method_signature": "SerialSchedulingStrategy.getSchedulingCandidates(List<SlotState> states)", "testcase": false, "constructor": false}, {"identifier": "getConcurrencyLevel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getConcurrencyLevel()", "full_signature": "public int getConcurrencyLevel()", "class_method_signature": "SerialSchedulingStrategy.getConcurrencyLevel()", "testcase": false, "constructor": false}], "file": "celos-server/src/main/java/com/collective/celos/SerialSchedulingStrategy.java"}, "focal_method": {"identifier": "getSchedulingCandidates", "parameters": "(List<SlotState> states)", "modifiers": "@Override public", "return": "List<SlotState>", "body": "@Override\n    public List<SlotState> getSchedulingCandidates(List<SlotState> states) {\n\n        int slotsRunning = CollectionUtils.countMatches(states, RUNNING_PREDICATE);\n        if (slotsRunning >= concurrencyLevel) {\n            return Collections.emptyList();\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        Collection<SlotState> candidates = CollectionUtils.select(states, CANDIDATE_PREDICATE);\n\n        if (!candidates.isEmpty()) {\n            int elemsToGet = Math.min(candidates.size(), concurrencyLevel - slotsRunning);\n            return Lists.newArrayList(candidates).subList(0, elemsToGet);\n        }\n\n        return Collections.emptyList();\n    }", "signature": "List<SlotState> getSchedulingCandidates(List<SlotState> states)", "full_signature": "@Override public List<SlotState> getSchedulingCandidates(List<SlotState> states)", "class_method_signature": "SerialSchedulingStrategy.getSchedulingCandidates(List<SlotState> states)", "testcase": false, "constructor": false, "invocations": ["countMatches", "emptyList", "select", "isEmpty", "min", "size", "subList", "newArrayList", "emptyList"]}, "repository": {"repo_id": 14105280, "url": "https://github.com/collectivemedia/celos", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 23, "size": 8863, "license": "licensed"}}