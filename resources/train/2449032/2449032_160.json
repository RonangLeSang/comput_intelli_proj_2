{"test_class": {"identifier": "IntegerValueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Value mPositiveValue      = new IntegerValue (123);", "modifier": "private final", "type": "Value", "declarator": "mPositiveValue      = new IntegerValue (123)", "var_name": "mPositiveValue"}, {"original_string": "private final Value mOneValue           = new IntegerValue (1);", "modifier": "private final", "type": "Value", "declarator": "mOneValue           = new IntegerValue (1)", "var_name": "mOneValue"}, {"original_string": "private final Value mZeroValue          = new IntegerValue (0);", "modifier": "private final", "type": "Value", "declarator": "mZeroValue          = new IntegerValue (0)", "var_name": "mZeroValue"}, {"original_string": "private final Value mMinusOneValue      = new IntegerValue (-1);", "modifier": "private final", "type": "Value", "declarator": "mMinusOneValue      = new IntegerValue (-1)", "var_name": "mMinusOneValue"}, {"original_string": "private final Value mNegativeValue      = new IntegerValue (-123);", "modifier": "private final", "type": "Value", "declarator": "mNegativeValue      = new IntegerValue (-123)", "var_name": "mNegativeValue"}, {"original_string": "private final Value mRealOneValue       = new RealValue (1.0);", "modifier": "private final", "type": "Value", "declarator": "mRealOneValue       = new RealValue (1.0)", "var_name": "mRealOneValue"}, {"original_string": "private final Value mRealHalfValue      = new RealValue (0.5);", "modifier": "private final", "type": "Value", "declarator": "mRealHalfValue      = new RealValue (0.5)", "var_name": "mRealHalfValue"}, {"original_string": "private final Value mRealMinusOneValue  = new RealValue (-1.0);", "modifier": "private final", "type": "Value", "declarator": "mRealMinusOneValue  = new RealValue (-1.0)", "var_name": "mRealMinusOneValue"}], "file": "power-tools-parent/power-tools-engine/src/test/java/org/powertools/engine/expression/IntegerValueTest.java"}, "test_case": {"identifier": "testToStringValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToStringValue () {\n        assertEquals (\"-123\", mNegativeValue.toStringValue ().toString ());\n        assertEquals (\"0\", mZeroValue.toStringValue ().toString ());\n        assertEquals (\"123\", mPositiveValue.toStringValue ().toString ());\n    }", "signature": "void testToStringValue()", "full_signature": "@Test public void testToStringValue()", "class_method_signature": "IntegerValueTest.testToStringValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "toStringValue", "assertEquals", "toString", "toStringValue", "assertEquals", "toString", "toStringValue"]}, "focal_class": {"identifier": "IntegerValue", "superclass": "extends Value", "interfaces": "", "fields": [{"original_string": "private final String mValue;", "modifier": "private final", "type": "String", "declarator": "mValue", "var_name": "mValue"}], "methods": [{"identifier": "IntegerValue", "parameters": "(int value)", "modifiers": "", "return": "", "signature": " IntegerValue(int value)", "full_signature": "  IntegerValue(int value)", "class_method_signature": "IntegerValue.IntegerValue(int value)", "testcase": false, "constructor": true}, {"identifier": "IntegerValue", "parameters": "(String value)", "modifiers": "", "return": "", "signature": " IntegerValue(String value)", "full_signature": "  IntegerValue(String value)", "class_method_signature": "IntegerValue.IntegerValue(String value)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override", "return": "String", "signature": "String getType()", "full_signature": "@Override String getType()", "class_method_signature": "IntegerValue.getType()", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value equal(Value v)", "full_signature": "@Override Value equal(Value v)", "class_method_signature": "IntegerValue.equal(Value v)", "testcase": false, "constructor": false}, {"identifier": "unequal", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value unequal(Value v)", "full_signature": "@Override Value unequal(Value v)", "class_method_signature": "IntegerValue.unequal(Value v)", "testcase": false, "constructor": false}, {"identifier": "lessThan", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value lessThan(Value v)", "full_signature": "@Override Value lessThan(Value v)", "class_method_signature": "IntegerValue.lessThan(Value v)", "testcase": false, "constructor": false}, {"identifier": "lessOrEqual", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value lessOrEqual(Value v)", "full_signature": "@Override Value lessOrEqual(Value v)", "class_method_signature": "IntegerValue.lessOrEqual(Value v)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value greaterThan(Value v)", "full_signature": "@Override Value greaterThan(Value v)", "class_method_signature": "IntegerValue.greaterThan(Value v)", "testcase": false, "constructor": false}, {"identifier": "greaterOrEqual", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value greaterOrEqual(Value v)", "full_signature": "@Override Value greaterOrEqual(Value v)", "class_method_signature": "IntegerValue.greaterOrEqual(Value v)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value add(Value v)", "full_signature": "@Override Value add(Value v)", "class_method_signature": "IntegerValue.add(Value v)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value subtract(Value v)", "full_signature": "@Override Value subtract(Value v)", "class_method_signature": "IntegerValue.subtract(Value v)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value multiply(Value v)", "full_signature": "@Override Value multiply(Value v)", "class_method_signature": "IntegerValue.multiply(Value v)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value divide(Value v)", "full_signature": "@Override Value divide(Value v)", "class_method_signature": "IntegerValue.divide(Value v)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "@Override", "return": "Value", "signature": "Value negate()", "full_signature": "@Override Value negate()", "class_method_signature": "IntegerValue.negate()", "testcase": false, "constructor": false}, {"identifier": "toStringValue", "parameters": "()", "modifiers": "@Override", "return": "StringValue", "signature": "StringValue toStringValue()", "full_signature": "@Override StringValue toStringValue()", "class_method_signature": "IntegerValue.toStringValue()", "testcase": false, "constructor": false}, {"identifier": "toRealValue", "parameters": "()", "modifiers": "@Override", "return": "RealValue", "signature": "RealValue toRealValue()", "full_signature": "@Override RealValue toRealValue()", "class_method_signature": "IntegerValue.toRealValue()", "testcase": false, "constructor": false}, {"identifier": "toIntegerValue", "parameters": "()", "modifiers": "@Override", "return": "IntegerValue", "signature": "IntegerValue toIntegerValue()", "full_signature": "@Override IntegerValue toIntegerValue()", "class_method_signature": "IntegerValue.toIntegerValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IntegerValue.toString()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "", "return": "int", "signature": "int intValue()", "full_signature": " int intValue()", "class_method_signature": "IntegerValue.intValue()", "testcase": false, "constructor": false}], "file": "power-tools-parent/power-tools-engine/src/main/java/org/powertools/engine/expression/IntegerValue.java"}, "focal_method": {"identifier": "toStringValue", "parameters": "()", "modifiers": "@Override", "return": "StringValue", "body": "@Override\n    StringValue toStringValue () {\n        return new StringValue (mValue);\n    }", "signature": "StringValue toStringValue()", "full_signature": "@Override StringValue toStringValue()", "class_method_signature": "IntegerValue.toStringValue()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2449032, "url": "https://github.com/MartinGijsen/PowerTools", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 1630, "license": "licensed"}}