{"test_class": {"identifier": "RealValueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Value mPositiveValue\t= new RealValue (1.23);", "modifier": "private final", "type": "Value", "declarator": "mPositiveValue\t= new RealValue (1.23)", "var_name": "mPositiveValue"}, {"original_string": "private final Value mOneValue\t\t= new RealValue (1.0);", "modifier": "private final", "type": "Value", "declarator": "mOneValue\t\t= new RealValue (1.0)", "var_name": "mOneValue"}, {"original_string": "private final Value mZeroValue\t\t= new RealValue (0.0);", "modifier": "private final", "type": "Value", "declarator": "mZeroValue\t\t= new RealValue (0.0)", "var_name": "mZeroValue"}, {"original_string": "private final Value mMinusOneValue\t= new RealValue (-1.0);", "modifier": "private final", "type": "Value", "declarator": "mMinusOneValue\t= new RealValue (-1.0)", "var_name": "mMinusOneValue"}, {"original_string": "private final Value mNegativeValue\t= new RealValue (-1.23);", "modifier": "private final", "type": "Value", "declarator": "mNegativeValue\t= new RealValue (-1.23)", "var_name": "mNegativeValue"}], "file": "power-tools-parent/power-tools-engine/src/test/java/org/powertools/engine/expression/RealValueTest.java"}, "test_case": {"identifier": "testGreaterOrEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGreaterOrEqual () {\n\t\tassertEquals (\"true\", mNegativeValue.greaterOrEqual (mNegativeValue).toString ());\n\t\tassertEquals (\"false\", mNegativeValue.greaterOrEqual (mZeroValue).toString ());\n\t\tassertEquals (\"true\", mZeroValue.greaterOrEqual (mNegativeValue).toString ());\n\t\tassertEquals (\"true\", mZeroValue.greaterOrEqual (mZeroValue).toString ());\n\t\tassertEquals (\"false\", mZeroValue.greaterOrEqual (mPositiveValue).toString ());\n\t\tassertEquals (\"true\", mPositiveValue.greaterOrEqual (mZeroValue).toString ());\n\t\tassertEquals (\"true\", mPositiveValue.greaterOrEqual (mPositiveValue).toString ());\n\t}", "signature": "void testGreaterOrEqual()", "full_signature": "@Test public void testGreaterOrEqual()", "class_method_signature": "RealValueTest.testGreaterOrEqual()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "greaterOrEqual", "assertEquals", "toString", "greaterOrEqual", "assertEquals", "toString", "greaterOrEqual", "assertEquals", "toString", "greaterOrEqual", "assertEquals", "toString", "greaterOrEqual", "assertEquals", "toString", "greaterOrEqual", "assertEquals", "toString", "greaterOrEqual"]}, "focal_class": {"identifier": "RealValue", "superclass": "extends Value", "interfaces": "", "fields": [{"original_string": "private double mValue;", "modifier": "private", "type": "double", "declarator": "mValue", "var_name": "mValue"}], "methods": [{"identifier": "RealValue", "parameters": "(double value)", "modifiers": "", "return": "", "signature": " RealValue(double value)", "full_signature": "  RealValue(double value)", "class_method_signature": "RealValue.RealValue(double value)", "testcase": false, "constructor": true}, {"identifier": "RealValue", "parameters": "(String value)", "modifiers": "", "return": "", "signature": " RealValue(String value)", "full_signature": "  RealValue(String value)", "class_method_signature": "RealValue.RealValue(String value)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override", "return": "String", "signature": "String getType()", "full_signature": "@Override String getType()", "class_method_signature": "RealValue.getType()", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value equal(Value v)", "full_signature": "@Override Value equal(Value v)", "class_method_signature": "RealValue.equal(Value v)", "testcase": false, "constructor": false}, {"identifier": "unequal", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value unequal(Value v)", "full_signature": "@Override Value unequal(Value v)", "class_method_signature": "RealValue.unequal(Value v)", "testcase": false, "constructor": false}, {"identifier": "lessThan", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value lessThan(Value v)", "full_signature": "@Override Value lessThan(Value v)", "class_method_signature": "RealValue.lessThan(Value v)", "testcase": false, "constructor": false}, {"identifier": "lessOrEqual", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value lessOrEqual(Value v)", "full_signature": "@Override Value lessOrEqual(Value v)", "class_method_signature": "RealValue.lessOrEqual(Value v)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value greaterThan(Value v)", "full_signature": "@Override Value greaterThan(Value v)", "class_method_signature": "RealValue.greaterThan(Value v)", "testcase": false, "constructor": false}, {"identifier": "greaterOrEqual", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value greaterOrEqual(Value v)", "full_signature": "@Override Value greaterOrEqual(Value v)", "class_method_signature": "RealValue.greaterOrEqual(Value v)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value add(Value v)", "full_signature": "@Override Value add(Value v)", "class_method_signature": "RealValue.add(Value v)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value subtract(Value v)", "full_signature": "@Override Value subtract(Value v)", "class_method_signature": "RealValue.subtract(Value v)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value multiply(Value v)", "full_signature": "@Override Value multiply(Value v)", "class_method_signature": "RealValue.multiply(Value v)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "signature": "Value divide(Value v)", "full_signature": "@Override Value divide(Value v)", "class_method_signature": "RealValue.divide(Value v)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "@Override", "return": "Value", "signature": "Value negate()", "full_signature": "@Override Value negate()", "class_method_signature": "RealValue.negate()", "testcase": false, "constructor": false}, {"identifier": "toStringValue", "parameters": "()", "modifiers": "@Override", "return": "StringValue", "signature": "StringValue toStringValue()", "full_signature": "@Override StringValue toStringValue()", "class_method_signature": "RealValue.toStringValue()", "testcase": false, "constructor": false}, {"identifier": "toRealValue", "parameters": "()", "modifiers": "@Override", "return": "RealValue", "signature": "RealValue toRealValue()", "full_signature": "@Override RealValue toRealValue()", "class_method_signature": "RealValue.toRealValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RealValue.toString()", "testcase": false, "constructor": false}], "file": "power-tools-parent/power-tools-engine/src/main/java/org/powertools/engine/expression/RealValue.java"}, "focal_method": {"identifier": "greaterOrEqual", "parameters": "(Value v)", "modifiers": "@Override", "return": "Value", "body": "@Override\n    Value greaterOrEqual (Value v) {\n        return new BooleanValue (mValue >= v.toRealValue ().mValue);\n    }", "signature": "Value greaterOrEqual(Value v)", "full_signature": "@Override Value greaterOrEqual(Value v)", "class_method_signature": "RealValue.greaterOrEqual(Value v)", "testcase": false, "constructor": false, "invocations": ["toRealValue"]}, "repository": {"repo_id": 2449032, "url": "https://github.com/MartinGijsen/PowerTools", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 1630, "license": "licensed"}}