{"test_class": {"identifier": "InstructionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String INSTRUCTION_SET_NAME = \"instruction set name\";", "modifier": "private final", "type": "String", "declarator": "INSTRUCTION_SET_NAME = \"instruction set name\"", "var_name": "INSTRUCTION_SET_NAME"}, {"original_string": "private final String INSTRUCTION_NAME     = \"instruction name\";", "modifier": "private final", "type": "String", "declarator": "INSTRUCTION_NAME     = \"instruction name\"", "var_name": "INSTRUCTION_NAME"}], "file": "power-tools-parent/power-tools-engine/src/test/java/org/powertools/engine/core/InstructionsTest.java"}, "test_case": {"identifier": "testAddInstructionSetTwice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddInstructionSetTwice () {\n        Instructions instructions = new Instructions (null, null);\n        instructions.addInstructionSet (new InstructionSetImpl (INSTRUCTION_SET_NAME));\n        try {\n            instructions.addInstructionSet (new InstructionSetImpl (INSTRUCTION_SET_NAME));\n            fail (\"no exception\");\n        } catch (ExecutionException ee) {\n            // ok\n        }\n    }", "signature": "void testAddInstructionSetTwice()", "full_signature": "@Test public void testAddInstructionSetTwice()", "class_method_signature": "InstructionsTest.testAddInstructionSetTwice()", "testcase": true, "constructor": false, "invocations": ["addInstructionSet", "addInstructionSet", "fail"]}, "focal_class": {"identifier": "Instructions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, InstructionSet> mInstructionSets;", "modifier": "private final", "type": "Map<String, InstructionSet>", "declarator": "mInstructionSets", "var_name": "mInstructionSets"}, {"original_string": "private final Map<String, Executor>       mExecutorCache;", "modifier": "private final", "type": "Map<String, Executor>", "declarator": "mExecutorCache", "var_name": "mExecutorCache"}, {"original_string": "private final Procedures                  mProcedures;", "modifier": "private final", "type": "Procedures", "declarator": "mProcedures", "var_name": "mProcedures"}], "methods": [{"identifier": "Instructions", "parameters": "(ProcedureRunner runner, TestRunResultPublisher publisher)", "modifiers": "", "return": "", "signature": " Instructions(ProcedureRunner runner, TestRunResultPublisher publisher)", "full_signature": "  Instructions(ProcedureRunner runner, TestRunResultPublisher publisher)", "class_method_signature": "Instructions.Instructions(ProcedureRunner runner, TestRunResultPublisher publisher)", "testcase": false, "constructor": true}, {"identifier": "addInstructionSet", "parameters": "(InstructionSet instructionSet)", "modifiers": "", "return": "void", "signature": "void addInstructionSet(InstructionSet instructionSet)", "full_signature": " void addInstructionSet(InstructionSet instructionSet)", "class_method_signature": "Instructions.addInstructionSet(InstructionSet instructionSet)", "testcase": false, "constructor": false}, {"identifier": "removeInstructionSet", "parameters": "(String name)", "modifiers": "", "return": "void", "signature": "void removeInstructionSet(String name)", "full_signature": " void removeInstructionSet(String name)", "class_method_signature": "Instructions.removeInstructionSet(String name)", "testcase": false, "constructor": false}, {"identifier": "addProcedure", "parameters": "(Procedure procedure)", "modifiers": "", "return": "void", "signature": "void addProcedure(Procedure procedure)", "full_signature": " void addProcedure(Procedure procedure)", "class_method_signature": "Instructions.addProcedure(Procedure procedure)", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "(String instructionName)", "modifiers": "", "return": "Executor", "signature": "Executor getExecutor(String instructionName)", "full_signature": " Executor getExecutor(String instructionName)", "class_method_signature": "Instructions.getExecutor(String instructionName)", "testcase": false, "constructor": false}, {"identifier": "createExecutor", "parameters": "(String instructionName)", "modifiers": "private", "return": "Executor", "signature": "Executor createExecutor(String instructionName)", "full_signature": "private Executor createExecutor(String instructionName)", "class_method_signature": "Instructions.createExecutor(String instructionName)", "testcase": false, "constructor": false}, {"identifier": "getInstructionSet", "parameters": "(String instructionSetName)", "modifiers": "private", "return": "InstructionSet", "signature": "InstructionSet getInstructionSet(String instructionSetName)", "full_signature": "private InstructionSet getInstructionSet(String instructionSetName)", "class_method_signature": "Instructions.getInstructionSet(String instructionSetName)", "testcase": false, "constructor": false}, {"identifier": "findMethodAndCreateExecutor", "parameters": "(String instructionName)", "modifiers": "private", "return": "Executor", "signature": "Executor findMethodAndCreateExecutor(String instructionName)", "full_signature": "private Executor findMethodAndCreateExecutor(String instructionName)", "class_method_signature": "Instructions.findMethodAndCreateExecutor(String instructionName)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "", "return": "void", "signature": "void cleanup()", "full_signature": " void cleanup()", "class_method_signature": "Instructions.cleanup()", "testcase": false, "constructor": false}], "file": "power-tools-parent/power-tools-engine/src/main/java/org/powertools/engine/core/Instructions.java"}, "focal_method": {"identifier": "addInstructionSet", "parameters": "(InstructionSet instructionSet)", "modifiers": "", "return": "void", "body": "void addInstructionSet (InstructionSet instructionSet) {\n        String name = instructionSet.getName ();\n        if (!mInstructionSets.containsKey (name)) {\n            mInstructionSets.put (name, instructionSet);\n            instructionSet.setup ();\n            mExecutorCache.clear ();\n        } else {\n            throw new ExecutionException (\"an instruction set '%s' is already registered\", name);\n        }\n    }", "signature": "void addInstructionSet(InstructionSet instructionSet)", "full_signature": " void addInstructionSet(InstructionSet instructionSet)", "class_method_signature": "Instructions.addInstructionSet(InstructionSet instructionSet)", "testcase": false, "constructor": false, "invocations": ["getName", "containsKey", "put", "setup", "clear"]}, "repository": {"repo_id": 2449032, "url": "https://github.com/MartinGijsen/PowerTools", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 1630, "license": "licensed"}}