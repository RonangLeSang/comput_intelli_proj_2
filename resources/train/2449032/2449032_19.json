{"test_class": {"identifier": "ClassInstructionSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}], "file": "power-tools-parent/power-tools-engine/src/test/java/org/powertools/engine/instructions/ClassInstructionSetTest.java"}, "test_case": {"identifier": "testGetExecutorUnknownInstruction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetExecutorUnknownInstruction () {\n        String instructionName                = \"unknown instruction name\";\n        InstructionSetImpl userInstructionSet = new InstructionSetImpl ();\n        ClassInstructionSet instructionSet    = new ClassInstructionSet (NAME, userInstructionSet, null);\n        assertNull (instructionSet.getExecutor (instructionName));\n    }", "signature": "void testGetExecutorUnknownInstruction()", "full_signature": "@Test public void testGetExecutorUnknownInstruction()", "class_method_signature": "ClassInstructionSetTest.testGetExecutorUnknownInstruction()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getExecutor"]}, "focal_class": {"identifier": "ClassInstructionSet", "superclass": "", "interfaces": "implements InstructionSet", "fields": [{"original_string": "private final String mName;", "modifier": "private final", "type": "String", "declarator": "mName", "var_name": "mName"}, {"original_string": "private final Object mObject;", "modifier": "private final", "type": "Object", "declarator": "mObject", "var_name": "mObject"}, {"original_string": "private final ParameterConvertors mParameterConvertors;", "modifier": "private final", "type": "ParameterConvertors", "declarator": "mParameterConvertors", "var_name": "mParameterConvertors"}], "methods": [{"identifier": "ClassInstructionSet", "parameters": "(String name, Object object, ParameterConvertors parameterConvertors)", "modifiers": "", "return": "", "signature": " ClassInstructionSet(String name, Object object, ParameterConvertors parameterConvertors)", "full_signature": "  ClassInstructionSet(String name, Object object, ParameterConvertors parameterConvertors)", "class_method_signature": "ClassInstructionSet.ClassInstructionSet(String name, Object object, ParameterConvertors parameterConvertors)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ClassInstructionSet.getName()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setup()", "full_signature": "@Override public void setup()", "class_method_signature": "ClassInstructionSet.setup()", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "(String instructionName)", "modifiers": "@Override public", "return": "Executor", "signature": "Executor getExecutor(String instructionName)", "full_signature": "@Override public Executor getExecutor(String instructionName)", "class_method_signature": "ClassInstructionSet.getExecutor(String instructionName)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(String instructionName)", "modifiers": "private", "return": "String", "signature": "String getMethodName(String instructionName)", "full_signature": "private String getMethodName(String instructionName)", "class_method_signature": "ClassInstructionSet.getMethodName(String instructionName)", "testcase": false, "constructor": false}, {"identifier": "addWord", "parameters": "(String word, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void addWord(String word, StringBuilder sb)", "full_signature": "private void addWord(String word, StringBuilder sb)", "class_method_signature": "ClassInstructionSet.addWord(String word, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(String methodName)", "modifiers": "private", "return": "Method", "signature": "Method getMethod(String methodName)", "full_signature": "private Method getMethod(String methodName)", "class_method_signature": "ClassInstructionSet.getMethod(String methodName)", "testcase": false, "constructor": false}, {"identifier": "getAnnotatedMethod", "parameters": "(String methodName)", "modifiers": "private", "return": "Method", "signature": "Method getAnnotatedMethod(String methodName)", "full_signature": "private Method getAnnotatedMethod(String methodName)", "class_method_signature": "ClassInstructionSet.getAnnotatedMethod(String methodName)", "testcase": false, "constructor": false}, {"identifier": "isAnnotatedWithKeyword", "parameters": "(Method method, String methodName)", "modifiers": "private", "return": "boolean", "signature": "boolean isAnnotatedWithKeyword(Method method, String methodName)", "full_signature": "private boolean isAnnotatedWithKeyword(Method method, String methodName)", "class_method_signature": "ClassInstructionSet.isAnnotatedWithKeyword(Method method, String methodName)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "ClassInstructionSet.cleanup()", "testcase": false, "constructor": false}, {"identifier": "runMethod", "parameters": "(String name)", "modifiers": "private", "return": "void", "signature": "void runMethod(String name)", "full_signature": "private void runMethod(String name)", "class_method_signature": "ClassInstructionSet.runMethod(String name)", "testcase": false, "constructor": false}], "file": "power-tools-parent/power-tools-engine/src/main/java/org/powertools/engine/instructions/ClassInstructionSet.java"}, "focal_method": {"identifier": "getExecutor", "parameters": "(String instructionName)", "modifiers": "@Override public", "return": "Executor", "body": "@Override\n    public Executor getExecutor (String instructionName) {\n        String methodName = getMethodName (instructionName);\n        Method method     = getMethod (methodName);\n        if (method == null) {\n            method = getAnnotatedMethod (methodName);\n            if (method == null) {\n                return null;\n            } else if (method.isAnnotationPresent (KeywordName.class) && method.isAnnotationPresent (ParameterOrder.class)) {\n                return new ShuffledParametersMethodExecutor (mObject, method, mParameterConvertors);\n            }\n        } else if (method.getParameterTypes ().length == 1 && Map.class.isAssignableFrom (method.getParameterTypes ()[0])) {\n            return new MapMethodExecutor (mObject, method);\n        }\n        return new MethodExecutor (mObject, method, mParameterConvertors);\n    }", "signature": "Executor getExecutor(String instructionName)", "full_signature": "@Override public Executor getExecutor(String instructionName)", "class_method_signature": "ClassInstructionSet.getExecutor(String instructionName)", "testcase": false, "constructor": false, "invocations": ["getMethodName", "getMethod", "getAnnotatedMethod", "isAnnotationPresent", "isAnnotationPresent", "getParameterTypes", "isAssignableFrom", "getParameterTypes"]}, "repository": {"repo_id": 2449032, "url": "https://github.com/MartinGijsen/PowerTools", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 1630, "license": "licensed"}}