{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/gov/llnl/ontology/util/StringUtilsTest.java"}, "test_case": {"identifier": "testTokenOverlapMixed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testTokenOverlapMixed() {\n        String[] tokens1 = {\"the\", \"cat\", \"has\", \"a\", \"brown\", \"bag\"};\n        String[] tokens2 = {\"bag\", \"dog\", \"was\", \"cat\", \"blah\", \"bag\"};\n        assertEquals(2, StringUtils.tokenOverlap(tokens1, tokens2));\n    }", "signature": "void testTokenOverlapMixed()", "full_signature": "@Test public void testTokenOverlapMixed()", "class_method_signature": "StringUtilsTest.testTokenOverlapMixed()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "tokenOverlap"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "tokenOverlap", "parameters": "(String[] tokens1, String[] tokens2)", "modifiers": "public static", "return": "int", "signature": "int tokenOverlap(String[] tokens1, String[] tokens2)", "full_signature": "public static int tokenOverlap(String[] tokens1, String[] tokens2)", "class_method_signature": "StringUtils.tokenOverlap(String[] tokens1, String[] tokens2)", "testcase": false, "constructor": false}, {"identifier": "tokenOverlapExp", "parameters": "(String[] tokens1, String[] tokens2)", "modifiers": "public static", "return": "int", "signature": "int tokenOverlapExp(String[] tokens1, String[] tokens2)", "full_signature": "public static int tokenOverlapExp(String[] tokens1, String[] tokens2)", "class_method_signature": "StringUtils.tokenOverlapExp(String[] tokens1, String[] tokens2)", "testcase": false, "constructor": false}, {"identifier": "findOverlap", "parameters": "(String[] tokens1, int i, \n                                  String[] tokens2, int j)", "modifiers": "public static", "return": "int", "signature": "int findOverlap(String[] tokens1, int i, \n                                  String[] tokens2, int j)", "full_signature": "public static int findOverlap(String[] tokens1, int i, \n                                  String[] tokens2, int j)", "class_method_signature": "StringUtils.findOverlap(String[] tokens1, int i, \n                                  String[] tokens2, int j)", "testcase": false, "constructor": false}], "file": "util/src/main/java/gov/llnl/ontology/util/StringUtils.java"}, "focal_method": {"identifier": "tokenOverlap", "parameters": "(String[] tokens1, String[] tokens2)", "modifiers": "public static", "return": "int", "body": "public static int tokenOverlap(String[] tokens1, String[] tokens2) {\n        Set<String> tokenSet2 = new HashSet<String>(Arrays.asList(tokens2));\n\n        int score = 0;\n        for (String word : tokens1)\n            if (tokenSet2.contains(word))\n                score++;\n        return score;\n    }", "signature": "int tokenOverlap(String[] tokens1, String[] tokens2)", "full_signature": "public static int tokenOverlap(String[] tokens1, String[] tokens2)", "class_method_signature": "StringUtils.tokenOverlap(String[] tokens1, String[] tokens2)", "testcase": false, "constructor": false, "invocations": ["asList", "contains"]}, "repository": {"repo_id": 908709, "url": "https://github.com/fozziethebeat/C-Cat", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 16, "size": 869027, "license": "licensed"}}