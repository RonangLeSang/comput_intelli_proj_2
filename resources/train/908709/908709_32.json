{"test_class": {"identifier": "SentenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[][] TOKEN_INFO = {\n        {\"cat\", \"DT\"},\n        {\"dog\", null},\n        {\"blah\", \"JOB\"},\n        {\"what\", \"1\"}\n    };", "modifier": "private static final", "type": "String[][]", "declarator": "TOKEN_INFO = {\n        {\"cat\", \"DT\"},\n        {\"dog\", null},\n        {\"blah\", \"JOB\"},\n        {\"what\", \"1\"}\n    }", "var_name": "TOKEN_INFO"}, {"original_string": "private static final int[][] RANGES = {\n        {0, 4},\n        {4, 6},\n        {6, 10},\n        {-1, 11}\n    };", "modifier": "private static final", "type": "int[][]", "declarator": "RANGES = {\n        {0, 4},\n        {4, 6},\n        {6, 10},\n        {-1, 11}\n    }", "var_name": "RANGES"}, {"original_string": "private static final String[][] TEST_PARSED_SENTENCES = {\n        {\"When\", \"WRB\", \"2\", \"advmod\"},\n        {\"released\", \"VBN\", \"0\", \"null\"},\n        {\"into\", \"IN\", \"2\", \"prep\"}, \n        {\"the\", \"DT\", \"5\", \"det\"},\n        {\"air\", \"NN\", \"3\", \"pobj\"},\n        {\",\", \",\", \"7\", \"punct\"},\n        {\"CFCs\", \"NNP\", \"4\", \"nn\"},\n    };", "modifier": "private static final", "type": "String[][]", "declarator": "TEST_PARSED_SENTENCES = {\n        {\"When\", \"WRB\", \"2\", \"advmod\"},\n        {\"released\", \"VBN\", \"0\", \"null\"},\n        {\"into\", \"IN\", \"2\", \"prep\"}, \n        {\"the\", \"DT\", \"5\", \"det\"},\n        {\"air\", \"NN\", \"3\", \"pobj\"},\n        {\",\", \",\", \"7\", \"punct\"},\n        {\"CFCs\", \"NNP\", \"4\", \"nn\"},\n    }", "var_name": "TEST_PARSED_SENTENCES"}], "file": "util/src/test/java/gov/llnl/ontology/text/SentenceTest.java"}, "test_case": {"identifier": "testNegativeSet", "parameters": "()", "modifiers": "@Test (expected=IndexOutOfBoundsException.class) public", "return": "void", "body": "@Test (expected=IndexOutOfBoundsException.class)\n    public void testNegativeSet() {\n        Sentence sent = new Sentence(0, 100, 1);\n        Annotation annot = new SimpleAnnotation(\"blah\");\n        sent.addAnnotation(-1, annot);\n    }", "signature": "void testNegativeSet()", "full_signature": "@Test (expected=IndexOutOfBoundsException.class) public void testNegativeSet()", "class_method_signature": "SentenceTest.testNegativeSet()", "testcase": true, "constructor": false, "invocations": ["addAnnotation"]}, "focal_class": {"identifier": "Sentence", "superclass": "", "interfaces": "implements Serializable, Iterable<Annotation>", "fields": [{"original_string": "static final long serialVersionId = 0x331cf4a;", "modifier": "static final", "type": "long", "declarator": "serialVersionId = 0x331cf4a", "var_name": "serialVersionId"}, {"original_string": "private static final String TOK_SEPARATOR = \"\\\\|\";", "modifier": "private static final", "type": "String", "declarator": "TOK_SEPARATOR = \"\\\\|\"", "var_name": "TOK_SEPARATOR"}, {"original_string": "private static final String ANNOT_SEPARATOR = \";\";", "modifier": "private static final", "type": "String", "declarator": "ANNOT_SEPARATOR = \";\"", "var_name": "ANNOT_SEPARATOR"}, {"original_string": "private int start = -1;", "modifier": "private", "type": "int", "declarator": "start = -1", "var_name": "start"}, {"original_string": "private int end = -1;", "modifier": "private", "type": "int", "declarator": "end = -1", "var_name": "end"}, {"original_string": "private Annotation[] tokenAnnotations = new Annotation[0];", "modifier": "private", "type": "Annotation[]", "declarator": "tokenAnnotations = new Annotation[0]", "var_name": "tokenAnnotations"}, {"original_string": "private transient String text;", "modifier": "private transient", "type": "String", "declarator": "text", "var_name": "text"}], "methods": [{"identifier": "Sentence", "parameters": "()", "modifiers": "private", "return": "", "signature": " Sentence()", "full_signature": "private  Sentence()", "class_method_signature": "Sentence.Sentence()", "testcase": false, "constructor": true}, {"identifier": "Sentence", "parameters": "(int start, int end, int numTokens)", "modifiers": "public", "return": "", "signature": " Sentence(int start, int end, int numTokens)", "full_signature": "public  Sentence(int start, int end, int numTokens)", "class_method_signature": "Sentence.Sentence(int start, int end, int numTokens)", "testcase": false, "constructor": true}, {"identifier": "setText", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void setText(String text)", "full_signature": "public void setText(String text)", "class_method_signature": "Sentence.setText(String text)", "testcase": false, "constructor": false}, {"identifier": "sentenceText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String sentenceText()", "full_signature": "public String sentenceText()", "class_method_signature": "Sentence.sentenceText()", "testcase": false, "constructor": false}, {"identifier": "addAnnotation", "parameters": "(int index, Annotation annotation)", "modifiers": "public", "return": "void", "signature": "void addAnnotation(int index, Annotation annotation)", "full_signature": "public void addAnnotation(int index, Annotation annotation)", "class_method_signature": "Sentence.addAnnotation(int index, Annotation annotation)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(int index)", "modifiers": "public", "return": "Annotation", "signature": "Annotation getAnnotation(int index)", "full_signature": "public Annotation getAnnotation(int index)", "class_method_signature": "Sentence.getAnnotation(int index)", "testcase": false, "constructor": false}, {"identifier": "dependencyParseTree", "parameters": "()", "modifiers": "public", "return": "DependencyTreeNode[]", "signature": "DependencyTreeNode[] dependencyParseTree()", "full_signature": "public DependencyTreeNode[] dependencyParseTree()", "class_method_signature": "Sentence.dependencyParseTree()", "testcase": false, "constructor": false}, {"identifier": "taggedTokens", "parameters": "()", "modifiers": "public", "return": "StringPair[]", "signature": "StringPair[] taggedTokens()", "full_signature": "public StringPair[] taggedTokens()", "class_method_signature": "Sentence.taggedTokens()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<Annotation>", "signature": "Iterator<Annotation> iterator()", "full_signature": "public Iterator<Annotation> iterator()", "class_method_signature": "Sentence.iterator()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int start()", "full_signature": "public int start()", "class_method_signature": "Sentence.start()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int end()", "full_signature": "public int end()", "class_method_signature": "Sentence.end()", "testcase": false, "constructor": false}, {"identifier": "numTokens", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numTokens()", "full_signature": "public int numTokens()", "class_method_signature": "Sentence.numTokens()", "testcase": false, "constructor": false}, {"identifier": "readSentences", "parameters": "(String sentenceText, \n                                               String tokenText)", "modifiers": "public static", "return": "List<Sentence>", "signature": "List<Sentence> readSentences(String sentenceText, \n                                               String tokenText)", "full_signature": "public static List<Sentence> readSentences(String sentenceText, \n                                               String tokenText)", "class_method_signature": "Sentence.readSentences(String sentenceText, \n                                               String tokenText)", "testcase": false, "constructor": false}, {"identifier": "writeSentences", "parameters": "(List<Sentence> sentences)", "modifiers": "public static", "return": "StringPair", "signature": "StringPair writeSentences(List<Sentence> sentences)", "full_signature": "public static StringPair writeSentences(List<Sentence> sentences)", "class_method_signature": "Sentence.writeSentences(List<Sentence> sentences)", "testcase": false, "constructor": false}], "file": "util/src/main/java/gov/llnl/ontology/text/Sentence.java"}, "focal_method": {"identifier": "addAnnotation", "parameters": "(int index, Annotation annotation)", "modifiers": "public", "return": "void", "body": "public void addAnnotation(int index, Annotation annotation) {\n        tokenAnnotations[index] = annotation;\n    }", "signature": "void addAnnotation(int index, Annotation annotation)", "full_signature": "public void addAnnotation(int index, Annotation annotation)", "class_method_signature": "Sentence.addAnnotation(int index, Annotation annotation)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 908709, "url": "https://github.com/fozziethebeat/C-Cat", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 16, "size": 869027, "license": "licensed"}}