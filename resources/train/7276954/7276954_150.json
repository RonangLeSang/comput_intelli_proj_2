{"test_class": {"identifier": "ShellUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException mExceptionRule = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "mExceptionRule = ExpectedException.none()", "var_name": "mExceptionRule"}], "file": "core/common/src/test/java/alluxio/util/ShellUtilsTest.java"}, "test_case": {"identifier": "parseRamfsMountInfoWithType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void parseRamfsMountInfoWithType() throws Exception {\n    // Linux mount info.\n    UnixMountInfo info =\n        ShellUtils.parseMountInfo(\"ramfs on /mnt/ramdisk type ramfs (rw,relatime,size=1gb)\");\n    assertEquals(Optional.of(\"ramfs\"), info.getDeviceSpec());\n    assertEquals(Optional.of(\"/mnt/ramdisk\"), info.getMountPoint());\n    assertEquals(Optional.of(\"ramfs\"), info.getFsType());\n    assertEquals(Optional.of(Long.valueOf(Constants.GB)), info.getOptions().getSize());\n  }", "signature": "void parseRamfsMountInfoWithType()", "full_signature": "@Test public void parseRamfsMountInfoWithType()", "class_method_signature": "ShellUtilsTest.parseRamfsMountInfoWithType()", "testcase": true, "constructor": false, "invocations": ["parseMountInfo", "assertEquals", "of", "getDeviceSpec", "assertEquals", "of", "getMountPoint", "assertEquals", "of", "getFsType", "assertEquals", "of", "valueOf", "getSize", "getOptions"]}, "focal_class": {"identifier": "ShellUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ShellUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ShellUtils.class)", "var_name": "LOG"}, {"original_string": "public static final String COMMON_SSH_OPTS = \"-o StrictHostKeyChecking=no -o ConnectTimeout=5\";", "modifier": "public static final", "type": "String", "declarator": "COMMON_SSH_OPTS = \"-o StrictHostKeyChecking=no -o ConnectTimeout=5\"", "var_name": "COMMON_SSH_OPTS"}, {"original_string": "public static final String SET_PERMISSION_COMMAND = \"chmod\";", "modifier": "public static final", "type": "String", "declarator": "SET_PERMISSION_COMMAND = \"chmod\"", "var_name": "SET_PERMISSION_COMMAND"}, {"original_string": "public static final String MOUNT_COMMAND = \"mount\";", "modifier": "public static final", "type": "String", "declarator": "MOUNT_COMMAND = \"mount\"", "var_name": "MOUNT_COMMAND"}, {"original_string": "public static final String TOKEN_SEPARATOR_REGEX = \"[ \\t\\n\\r\\f]\";", "modifier": "public static final", "type": "String", "declarator": "TOKEN_SEPARATOR_REGEX = \"[ \\t\\n\\r\\f]\"", "var_name": "TOKEN_SEPARATOR_REGEX"}], "methods": [{"identifier": "getGroupsForUserCommand", "parameters": "(final String user)", "modifiers": "public static", "return": "String[]", "signature": "String[] getGroupsForUserCommand(final String user)", "full_signature": "public static String[] getGroupsForUserCommand(final String user)", "class_method_signature": "ShellUtils.getGroupsForUserCommand(final String user)", "testcase": false, "constructor": false}, {"identifier": "getSetPermissionCommand", "parameters": "(String perm, String filePath)", "modifiers": "public static", "return": "String[]", "signature": "String[] getSetPermissionCommand(String perm, String filePath)", "full_signature": "public static String[] getSetPermissionCommand(String perm, String filePath)", "class_method_signature": "ShellUtils.getSetPermissionCommand(String perm, String filePath)", "testcase": false, "constructor": false}, {"identifier": "getUnixMountInfo", "parameters": "()", "modifiers": "public static", "return": "List<UnixMountInfo>", "signature": "List<UnixMountInfo> getUnixMountInfo()", "full_signature": "public static List<UnixMountInfo> getUnixMountInfo()", "class_method_signature": "ShellUtils.getUnixMountInfo()", "testcase": false, "constructor": false}, {"identifier": "parseMountInfo", "parameters": "(String line)", "modifiers": "public static", "return": "UnixMountInfo", "signature": "UnixMountInfo parseMountInfo(String line)", "full_signature": "public static UnixMountInfo parseMountInfo(String line)", "class_method_signature": "ShellUtils.parseMountInfo(String line)", "testcase": false, "constructor": false}, {"identifier": "parseUnixMountOptions", "parameters": "(String line)", "modifiers": "private static", "return": "UnixMountInfo.Options", "signature": "UnixMountInfo.Options parseUnixMountOptions(String line)", "full_signature": "private static UnixMountInfo.Options parseUnixMountOptions(String line)", "class_method_signature": "ShellUtils.parseUnixMountOptions(String line)", "testcase": false, "constructor": false}, {"identifier": "isMountingPoint", "parameters": "(String path, String[] fsTypes)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMountingPoint(String path, String[] fsTypes)", "full_signature": "public static boolean isMountingPoint(String path, String[] fsTypes)", "class_method_signature": "ShellUtils.isMountingPoint(String path, String[] fsTypes)", "testcase": false, "constructor": false}, {"identifier": "isAlluxioRunning", "parameters": "(String className)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAlluxioRunning(String className)", "full_signature": "public static boolean isAlluxioRunning(String className)", "class_method_signature": "ShellUtils.isAlluxioRunning(String className)", "testcase": false, "constructor": false}, {"identifier": "execCommand", "parameters": "(String... cmd)", "modifiers": "public static", "return": "String", "signature": "String execCommand(String... cmd)", "full_signature": "public static String execCommand(String... cmd)", "class_method_signature": "ShellUtils.execCommand(String... cmd)", "testcase": false, "constructor": false}, {"identifier": "execCommandWithOutput", "parameters": "(String... cmd)", "modifiers": "public static", "return": "CommandReturn", "signature": "CommandReturn execCommandWithOutput(String... cmd)", "full_signature": "public static CommandReturn execCommandWithOutput(String... cmd)", "class_method_signature": "ShellUtils.execCommandWithOutput(String... cmd)", "testcase": false, "constructor": false}, {"identifier": "sshExecCommandWithOutput", "parameters": "(String hostname, String... cmd)", "modifiers": "public static", "return": "CommandReturn", "signature": "CommandReturn sshExecCommandWithOutput(String hostname, String... cmd)", "full_signature": "public static CommandReturn sshExecCommandWithOutput(String hostname, String... cmd)", "class_method_signature": "ShellUtils.sshExecCommandWithOutput(String hostname, String... cmd)", "testcase": false, "constructor": false}, {"identifier": "scpCommandWithOutput", "parameters": "(\n          String hostname, String fromFile, String toFile, boolean isDir)", "modifiers": "public static", "return": "CommandReturn", "signature": "CommandReturn scpCommandWithOutput(\n          String hostname, String fromFile, String toFile, boolean isDir)", "full_signature": "public static CommandReturn scpCommandWithOutput(\n          String hostname, String fromFile, String toFile, boolean isDir)", "class_method_signature": "ShellUtils.scpCommandWithOutput(\n          String hostname, String fromFile, String toFile, boolean isDir)", "testcase": false, "constructor": false}, {"identifier": "execCmdWithBackup", "parameters": "(ShellCommand cmd, ShellCommand backupCmd)", "modifiers": "public static", "return": "CommandReturn", "signature": "CommandReturn execCmdWithBackup(ShellCommand cmd, ShellCommand backupCmd)", "full_signature": "public static CommandReturn execCmdWithBackup(ShellCommand cmd, ShellCommand backupCmd)", "class_method_signature": "ShellUtils.execCmdWithBackup(ShellCommand cmd, ShellCommand backupCmd)", "testcase": false, "constructor": false}, {"identifier": "ShellUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ShellUtils()", "full_signature": "private  ShellUtils()", "class_method_signature": "ShellUtils.ShellUtils()", "testcase": false, "constructor": true}], "file": "core/common/src/main/java/alluxio/util/ShellUtils.java"}, "focal_method": {"identifier": "parseMountInfo", "parameters": "(String line)", "modifiers": "public static", "return": "UnixMountInfo", "body": "public static UnixMountInfo parseMountInfo(String line) {\n    // Example mount lines:\n    // ramfs on /mnt/ramdisk type ramfs (rw,relatime,size=1gb)\n    // map -hosts on /net (autofs, nosuid, automounted, nobrowse)\n    UnixMountInfo.Builder builder = new UnixMountInfo.Builder();\n\n    // First get and remove the mount type if it's provided.\n    Matcher matcher = Pattern.compile(\".* (type \\\\w+ ).*\").matcher(line);\n    String lineWithoutType;\n    if (matcher.matches()) {\n      String match = matcher.group(1);\n      builder.setFsType(match.replace(\"type\", \"\").trim());\n      lineWithoutType = line.replace(match, \"\");\n    } else {\n      lineWithoutType = line;\n    }\n    // Now parse the rest\n    matcher = Pattern.compile(\"(.*) on (.*) \\\\((.*)\\\\)\").matcher(lineWithoutType);\n    if (!matcher.matches()) {\n      LOG.warn(\"Unable to parse output of '{}': {}\", MOUNT_COMMAND, line);\n      return builder.build();\n    }\n    builder.setDeviceSpec(matcher.group(1));\n    builder.setMountPoint(matcher.group(2));\n    builder.setOptions(parseUnixMountOptions(matcher.group(3)));\n    return builder.build();\n  }", "signature": "UnixMountInfo parseMountInfo(String line)", "full_signature": "public static UnixMountInfo parseMountInfo(String line)", "class_method_signature": "ShellUtils.parseMountInfo(String line)", "testcase": false, "constructor": false, "invocations": ["matcher", "compile", "matches", "group", "setFsType", "trim", "replace", "replace", "matcher", "compile", "matches", "warn", "build", "setDeviceSpec", "group", "setMountPoint", "group", "setOptions", "parseUnixMountOptions", "group", "build"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}