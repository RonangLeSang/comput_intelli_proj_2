{"test_class": {"identifier": "LocalUnderFileSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String mLocalUfsRoot;", "modifier": "private", "type": "String", "declarator": "mLocalUfsRoot", "var_name": "mLocalUfsRoot"}, {"original_string": "private UnderFileSystem mLocalUfs;", "modifier": "private", "type": "UnderFileSystem", "declarator": "mLocalUfs", "var_name": "mLocalUfs"}, {"original_string": "private static AlluxioConfiguration sConf =\n      new InstancedConfiguration(ConfigurationUtils.defaults());", "modifier": "private static", "type": "AlluxioConfiguration", "declarator": "sConf =\n      new InstancedConfiguration(ConfigurationUtils.defaults())", "var_name": "sConf"}, {"original_string": "@Rule\n  public TemporaryFolder mTemporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mTemporaryFolder = new TemporaryFolder()", "var_name": "mTemporaryFolder"}, {"original_string": "@Rule\n  public ExpectedException mException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "mException = ExpectedException.none()", "var_name": "mException"}], "file": "underfs/local/src/test/java/alluxio/underfs/local/LocalUnderFileSystemTest.java"}, "test_case": {"identifier": "deleteFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void deleteFile() throws IOException {\n    String filepath = PathUtils.concatPath(mLocalUfsRoot, getUniqueFileName());\n    mLocalUfs.create(filepath).close();\n    mLocalUfs.deleteFile(filepath);\n\n    assertFalse(mLocalUfs.isFile(filepath));\n\n    File file = new File(filepath);\n    assertFalse(file.exists());\n  }", "signature": "void deleteFile()", "full_signature": "@Test public void deleteFile()", "class_method_signature": "LocalUnderFileSystemTest.deleteFile()", "testcase": true, "constructor": false, "invocations": ["concatPath", "getUniqueFileName", "close", "create", "deleteFile", "assertFalse", "isFile", "assertFalse", "exists"]}, "focal_class": {"identifier": "LocalUnderFileSystem", "superclass": "extends ConsistentUnderFileSystem", "interfaces": "implements AtomicFileOutputStreamCallback", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LocalUnderFileSystem.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LocalUnderFileSystem.class)", "var_name": "LOG"}], "methods": [{"identifier": "LocalUnderFileSystem", "parameters": "(AlluxioURI uri, UnderFileSystemConfiguration ufsConf)", "modifiers": "public", "return": "", "signature": " LocalUnderFileSystem(AlluxioURI uri, UnderFileSystemConfiguration ufsConf)", "full_signature": "public  LocalUnderFileSystem(AlluxioURI uri, UnderFileSystemConfiguration ufsConf)", "class_method_signature": "LocalUnderFileSystem.LocalUnderFileSystem(AlluxioURI uri, UnderFileSystemConfiguration ufsConf)", "testcase": false, "constructor": true}, {"identifier": "getUnderFSType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUnderFSType()", "full_signature": "@Override public String getUnderFSType()", "class_method_signature": "LocalUnderFileSystem.getUnderFSType()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "LocalUnderFileSystem.cleanup()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LocalUnderFileSystem.close()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String path, CreateOptions options)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream create(String path, CreateOptions options)", "full_signature": "@Override public OutputStream create(String path, CreateOptions options)", "class_method_signature": "LocalUnderFileSystem.create(String path, CreateOptions options)", "testcase": false, "constructor": false}, {"identifier": "createDirect", "parameters": "(String path, CreateOptions options)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream createDirect(String path, CreateOptions options)", "full_signature": "@Override public OutputStream createDirect(String path, CreateOptions options)", "class_method_signature": "LocalUnderFileSystem.createDirect(String path, CreateOptions options)", "testcase": false, "constructor": false}, {"identifier": "deleteDirectory", "parameters": "(String path, DeleteOptions options)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteDirectory(String path, DeleteOptions options)", "full_signature": "@Override public boolean deleteDirectory(String path, DeleteOptions options)", "class_method_signature": "LocalUnderFileSystem.deleteDirectory(String path, DeleteOptions options)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteFile(String path)", "full_signature": "@Override public boolean deleteFile(String path)", "class_method_signature": "LocalUnderFileSystem.deleteFile(String path)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(String path)", "full_signature": "@Override public boolean exists(String path)", "class_method_signature": "LocalUnderFileSystem.exists(String path)", "testcase": false, "constructor": false}, {"identifier": "getBlockSizeByte", "parameters": "(String path)", "modifiers": "@Override public", "return": "long", "signature": "long getBlockSizeByte(String path)", "full_signature": "@Override public long getBlockSizeByte(String path)", "class_method_signature": "LocalUnderFileSystem.getBlockSizeByte(String path)", "testcase": false, "constructor": false}, {"identifier": "getDirectoryStatus", "parameters": "(String path)", "modifiers": "@Override public", "return": "UfsDirectoryStatus", "signature": "UfsDirectoryStatus getDirectoryStatus(String path)", "full_signature": "@Override public UfsDirectoryStatus getDirectoryStatus(String path)", "class_method_signature": "LocalUnderFileSystem.getDirectoryStatus(String path)", "testcase": false, "constructor": false}, {"identifier": "getFileLocations", "parameters": "(String path)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getFileLocations(String path)", "full_signature": "@Override public List<String> getFileLocations(String path)", "class_method_signature": "LocalUnderFileSystem.getFileLocations(String path)", "testcase": false, "constructor": false}, {"identifier": "getFileLocations", "parameters": "(String path, FileLocationOptions options)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getFileLocations(String path, FileLocationOptions options)", "full_signature": "@Override public List<String> getFileLocations(String path, FileLocationOptions options)", "class_method_signature": "LocalUnderFileSystem.getFileLocations(String path, FileLocationOptions options)", "testcase": false, "constructor": false}, {"identifier": "getFileStatus", "parameters": "(String path)", "modifiers": "@Override public", "return": "UfsFileStatus", "signature": "UfsFileStatus getFileStatus(String path)", "full_signature": "@Override public UfsFileStatus getFileStatus(String path)", "class_method_signature": "LocalUnderFileSystem.getFileStatus(String path)", "testcase": false, "constructor": false}, {"identifier": "getSpace", "parameters": "(String path, SpaceType type)", "modifiers": "@Override public", "return": "long", "signature": "long getSpace(String path, SpaceType type)", "full_signature": "@Override public long getSpace(String path, SpaceType type)", "class_method_signature": "LocalUnderFileSystem.getSpace(String path, SpaceType type)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(String path)", "modifiers": "@Override public", "return": "UfsStatus", "signature": "UfsStatus getStatus(String path)", "full_signature": "@Override public UfsStatus getStatus(String path)", "class_method_signature": "LocalUnderFileSystem.getStatus(String path)", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDirectory(String path)", "full_signature": "@Override public boolean isDirectory(String path)", "class_method_signature": "LocalUnderFileSystem.isDirectory(String path)", "testcase": false, "constructor": false}, {"identifier": "isFile", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFile(String path)", "full_signature": "@Override public boolean isFile(String path)", "class_method_signature": "LocalUnderFileSystem.isFile(String path)", "testcase": false, "constructor": false}, {"identifier": "listStatus", "parameters": "(String path)", "modifiers": "@Override public", "return": "UfsStatus[]", "signature": "UfsStatus[] listStatus(String path)", "full_signature": "@Override public UfsStatus[] listStatus(String path)", "class_method_signature": "LocalUnderFileSystem.listStatus(String path)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "(String path, MkdirsOptions options)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean mkdirs(String path, MkdirsOptions options)", "full_signature": "@Override public boolean mkdirs(String path, MkdirsOptions options)", "class_method_signature": "LocalUnderFileSystem.mkdirs(String path, MkdirsOptions options)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(String path, OpenOptions options)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream open(String path, OpenOptions options)", "full_signature": "@Override public InputStream open(String path, OpenOptions options)", "class_method_signature": "LocalUnderFileSystem.open(String path, OpenOptions options)", "testcase": false, "constructor": false}, {"identifier": "renameDirectory", "parameters": "(String src, String dst)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renameDirectory(String src, String dst)", "full_signature": "@Override public boolean renameDirectory(String src, String dst)", "class_method_signature": "LocalUnderFileSystem.renameDirectory(String src, String dst)", "testcase": false, "constructor": false}, {"identifier": "renameFile", "parameters": "(String src, String dst)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renameFile(String src, String dst)", "full_signature": "@Override public boolean renameFile(String src, String dst)", "class_method_signature": "LocalUnderFileSystem.renameFile(String src, String dst)", "testcase": false, "constructor": false}, {"identifier": "setOwner", "parameters": "(String path, String user, String group)", "modifiers": "@Override public", "return": "void", "signature": "void setOwner(String path, String user, String group)", "full_signature": "@Override public void setOwner(String path, String user, String group)", "class_method_signature": "LocalUnderFileSystem.setOwner(String path, String user, String group)", "testcase": false, "constructor": false}, {"identifier": "setMode", "parameters": "(String path, short mode)", "modifiers": "@Override public", "return": "void", "signature": "void setMode(String path, short mode)", "full_signature": "@Override public void setMode(String path, short mode)", "class_method_signature": "LocalUnderFileSystem.setMode(String path, short mode)", "testcase": false, "constructor": false}, {"identifier": "connectFromMaster", "parameters": "(String hostname)", "modifiers": "@Override public", "return": "void", "signature": "void connectFromMaster(String hostname)", "full_signature": "@Override public void connectFromMaster(String hostname)", "class_method_signature": "LocalUnderFileSystem.connectFromMaster(String hostname)", "testcase": false, "constructor": false}, {"identifier": "connectFromWorker", "parameters": "(String hostname)", "modifiers": "@Override public", "return": "void", "signature": "void connectFromWorker(String hostname)", "full_signature": "@Override public void connectFromWorker(String hostname)", "class_method_signature": "LocalUnderFileSystem.connectFromWorker(String hostname)", "testcase": false, "constructor": false}, {"identifier": "supportsFlush", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsFlush()", "full_signature": "@Override public boolean supportsFlush()", "class_method_signature": "LocalUnderFileSystem.supportsFlush()", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(String src, String dst)", "modifiers": "private", "return": "boolean", "signature": "boolean rename(String src, String dst)", "full_signature": "private boolean rename(String src, String dst)", "class_method_signature": "LocalUnderFileSystem.rename(String src, String dst)", "testcase": false, "constructor": false}, {"identifier": "stripPath", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String stripPath(String path)", "full_signature": "private String stripPath(String path)", "class_method_signature": "LocalUnderFileSystem.stripPath(String path)", "testcase": false, "constructor": false}], "file": "underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java"}, "focal_method": {"identifier": "deleteFile", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean deleteFile(String path) throws IOException {\n    path = stripPath(path);\n    File file = new File(path);\n    return file.isFile() && file.delete();\n  }", "signature": "boolean deleteFile(String path)", "full_signature": "@Override public boolean deleteFile(String path)", "class_method_signature": "LocalUnderFileSystem.deleteFile(String path)", "testcase": false, "constructor": false, "invocations": ["stripPath", "isFile", "delete"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}