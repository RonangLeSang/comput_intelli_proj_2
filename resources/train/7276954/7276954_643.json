{"test_class": {"identifier": "ServerConfigurationStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<ConfigProperty> mConfigListOne;", "modifier": "private", "type": "List<ConfigProperty>", "declarator": "mConfigListOne", "var_name": "mConfigListOne"}, {"original_string": "private List<ConfigProperty> mConfigListTwo;", "modifier": "private", "type": "List<ConfigProperty>", "declarator": "mConfigListTwo", "var_name": "mConfigListTwo"}, {"original_string": "private Address mAddressOne;", "modifier": "private", "type": "Address", "declarator": "mAddressOne", "var_name": "mAddressOne"}, {"original_string": "private Address mAddressTwo;", "modifier": "private", "type": "Address", "declarator": "mAddressTwo", "var_name": "mAddressTwo"}], "file": "core/server/master/src/test/java/alluxio/master/meta/checkconf/ServerConfigurationStoreTest.java"}, "test_case": {"identifier": "registerNewConf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void registerNewConf() {\n    ServerConfigurationStore configStore = createConfigStore();\n\n    Map<Address, List<ConfigRecord>> confMap = configStore.getConfMap();\n\n    assertTrue(confMap.containsKey(mAddressOne));\n    assertTrue(confMap.containsKey(mAddressTwo));\n  }", "signature": "void registerNewConf()", "full_signature": "@Test public void registerNewConf()", "class_method_signature": "ServerConfigurationStoreTest.registerNewConf()", "testcase": true, "constructor": false, "invocations": ["createConfigStore", "getConfMap", "assertTrue", "containsKey", "assertTrue", "containsKey"]}, "focal_class": {"identifier": "ServerConfigurationStore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Address, List<ConfigRecord>> mConfMap;", "modifier": "private final", "type": "Map<Address, List<ConfigRecord>>", "declarator": "mConfMap", "var_name": "mConfMap"}, {"original_string": "private final Set<Address> mLostNodes;", "modifier": "private final", "type": "Set<Address>", "declarator": "mLostNodes", "var_name": "mLostNodes"}, {"original_string": "private final List<Runnable> mChangeListeners = new ArrayList<>();", "modifier": "private final", "type": "List<Runnable>", "declarator": "mChangeListeners = new ArrayList<>()", "var_name": "mChangeListeners"}], "methods": [{"identifier": "ServerConfigurationStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServerConfigurationStore()", "full_signature": "public  ServerConfigurationStore()", "class_method_signature": "ServerConfigurationStore.ServerConfigurationStore()", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void reset()", "full_signature": "public synchronized void reset()", "class_method_signature": "ServerConfigurationStore.reset()", "testcase": false, "constructor": false}, {"identifier": "registerNewConf", "parameters": "(Address address, List<ConfigProperty> configList)", "modifiers": "public synchronized", "return": "void", "signature": "void registerNewConf(Address address, List<ConfigProperty> configList)", "full_signature": "public synchronized void registerNewConf(Address address, List<ConfigProperty> configList)", "class_method_signature": "ServerConfigurationStore.registerNewConf(Address address, List<ConfigProperty> configList)", "testcase": false, "constructor": false}, {"identifier": "toPropertyKey", "parameters": "(String name)", "modifiers": "private static", "return": "PropertyKey", "signature": "PropertyKey toPropertyKey(String name)", "full_signature": "private static PropertyKey toPropertyKey(String name)", "class_method_signature": "ServerConfigurationStore.toPropertyKey(String name)", "testcase": false, "constructor": false}, {"identifier": "handleNodeLost", "parameters": "(Address address)", "modifiers": "public synchronized", "return": "void", "signature": "void handleNodeLost(Address address)", "full_signature": "public synchronized void handleNodeLost(Address address)", "class_method_signature": "ServerConfigurationStore.handleNodeLost(Address address)", "testcase": false, "constructor": false}, {"identifier": "lostNodeFound", "parameters": "(Address address)", "modifiers": "public synchronized", "return": "void", "signature": "void lostNodeFound(Address address)", "full_signature": "public synchronized void lostNodeFound(Address address)", "class_method_signature": "ServerConfigurationStore.lostNodeFound(Address address)", "testcase": false, "constructor": false}, {"identifier": "getConfMap", "parameters": "()", "modifiers": "public synchronized", "return": "Map<Address, List<ConfigRecord>>", "signature": "Map<Address, List<ConfigRecord>> getConfMap()", "full_signature": "public synchronized Map<Address, List<ConfigRecord>> getConfMap()", "class_method_signature": "ServerConfigurationStore.getConfMap()", "testcase": false, "constructor": false}, {"identifier": "getLiveNodeAddresses", "parameters": "()", "modifiers": "public synchronized", "return": "List<Address>", "signature": "List<Address> getLiveNodeAddresses()", "full_signature": "public synchronized List<Address> getLiveNodeAddresses()", "class_method_signature": "ServerConfigurationStore.getLiveNodeAddresses()", "testcase": false, "constructor": false}, {"identifier": "registerChangeListener", "parameters": "(Runnable function)", "modifiers": "public synchronized", "return": "void", "signature": "void registerChangeListener(Runnable function)", "full_signature": "public synchronized void registerChangeListener(Runnable function)", "class_method_signature": "ServerConfigurationStore.registerChangeListener(Runnable function)", "testcase": false, "constructor": false}], "file": "core/server/master/src/main/java/alluxio/master/meta/checkconf/ServerConfigurationStore.java"}, "focal_method": {"identifier": "registerNewConf", "parameters": "(Address address, List<ConfigProperty> configList)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void registerNewConf(Address address, List<ConfigProperty> configList) {\n    Preconditions.checkNotNull(address, \"address should not be null\");\n    Preconditions.checkNotNull(configList, \"configuration list should not be null\");\n    // Instead of recording property name, we record property key.\n    mConfMap.put(address, configList.stream().map(c -> new ConfigRecord()\n        .setKey(toPropertyKey(c.getName())).setSource(c.getSource())\n        .setValue(c.getValue())).collect(Collectors.toList()));\n    mLostNodes.remove(address);\n    for (Runnable function : mChangeListeners) {\n      function.run();\n    }\n  }", "signature": "void registerNewConf(Address address, List<ConfigProperty> configList)", "full_signature": "public synchronized void registerNewConf(Address address, List<ConfigProperty> configList)", "class_method_signature": "ServerConfigurationStore.registerNewConf(Address address, List<ConfigProperty> configList)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "put", "collect", "map", "stream", "setValue", "setSource", "setKey", "toPropertyKey", "getName", "getSource", "getValue", "toList", "remove", "run"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}