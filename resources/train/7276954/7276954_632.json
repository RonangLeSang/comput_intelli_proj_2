{"test_class": {"identifier": "AbstractPrimarySelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int TIMEOUT = 10 * Constants.SECOND_MS;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT = 10 * Constants.SECOND_MS", "var_name": "TIMEOUT"}, {"original_string": "private TestSelector mSelector;", "modifier": "private", "type": "TestSelector", "declarator": "mSelector", "var_name": "mSelector"}, {"original_string": "private ScheduledExecutorService mExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "mExecutor", "var_name": "mExecutor"}], "file": "core/server/common/src/test/java/alluxio/master/AbstractPrimarySelectorTest.java"}, "test_case": {"identifier": "onStateChange", "parameters": "()", "modifiers": "@Test(timeout = TIMEOUT) public", "return": "void", "body": "@Test(timeout = TIMEOUT)\n  public void onStateChange() {\n    AtomicInteger primaryCounter = new AtomicInteger(0);\n    AtomicInteger secondaryCounter = new AtomicInteger(0);\n    Scoped listener = mSelector.onStateChange(state -> {\n      if (state.equals(State.PRIMARY)) {\n        primaryCounter.incrementAndGet();\n      } else {\n        secondaryCounter.incrementAndGet();\n      }\n    });\n    for (int i = 0; i < 10; i++) {\n      mSelector.setState(State.PRIMARY);\n      mSelector.setState(State.SECONDARY);\n    }\n    assertEquals(10, primaryCounter.get());\n    assertEquals(10, secondaryCounter.get());\n    listener.close();\n    mSelector.setState(State.PRIMARY);\n    mSelector.setState(State.SECONDARY);\n    assertEquals(10, primaryCounter.get());\n    assertEquals(10, secondaryCounter.get());\n  }", "signature": "void onStateChange()", "full_signature": "@Test(timeout = TIMEOUT) public void onStateChange()", "class_method_signature": "AbstractPrimarySelectorTest.onStateChange()", "testcase": true, "constructor": false, "invocations": ["onStateChange", "equals", "incrementAndGet", "incrementAndGet", "setState", "setState", "assertEquals", "get", "assertEquals", "get", "close", "setState", "setState", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "AbstractPrimarySelector", "superclass": "", "interfaces": "implements PrimarySelector", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractPrimarySelector.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractPrimarySelector.class)", "var_name": "LOG"}, {"original_string": "@GuardedBy(\"mListeners\")\n  private final Set<AtomicReference<Consumer<State>>> mListeners = new HashSet<>();", "modifier": "@GuardedBy(\"mListeners\")\n  private final", "type": "Set<AtomicReference<Consumer<State>>>", "declarator": "mListeners = new HashSet<>()", "var_name": "mListeners"}, {"original_string": "private final Lock mStateLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "mStateLock = new ReentrantLock()", "var_name": "mStateLock"}, {"original_string": "private final Condition mStateCond = mStateLock.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "mStateCond = mStateLock.newCondition()", "var_name": "mStateCond"}, {"original_string": "@GuardedBy(\"mStateLock\")\n  private State mState = State.SECONDARY;", "modifier": "@GuardedBy(\"mStateLock\")\n  private", "type": "State", "declarator": "mState = State.SECONDARY", "var_name": "mState"}], "methods": [{"identifier": "setState", "parameters": "(State state)", "modifiers": "protected final", "return": "void", "signature": "void setState(State state)", "full_signature": "protected final void setState(State state)", "class_method_signature": "AbstractPrimarySelector.setState(State state)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "@Override public final", "return": "State", "signature": "State getState()", "full_signature": "@Override public final State getState()", "class_method_signature": "AbstractPrimarySelector.getState()", "testcase": false, "constructor": false}, {"identifier": "onStateChange", "parameters": "(Consumer<State> listener)", "modifiers": "@Override public final", "return": "Scoped", "signature": "Scoped onStateChange(Consumer<State> listener)", "full_signature": "@Override public final Scoped onStateChange(Consumer<State> listener)", "class_method_signature": "AbstractPrimarySelector.onStateChange(Consumer<State> listener)", "testcase": false, "constructor": false}, {"identifier": "waitForState", "parameters": "(State state)", "modifiers": "@Override public final", "return": "void", "signature": "void waitForState(State state)", "full_signature": "@Override public final void waitForState(State state)", "class_method_signature": "AbstractPrimarySelector.waitForState(State state)", "testcase": false, "constructor": false}], "file": "core/server/common/src/main/java/alluxio/master/AbstractPrimarySelector.java"}, "focal_method": {"identifier": "onStateChange", "parameters": "(Consumer<State> listener)", "modifiers": "@Override public final", "return": "Scoped", "body": "@Override\n  public final Scoped onStateChange(Consumer<State> listener) {\n    // Wrap listeners in a reference of our own to guarantee uniqueness for listener references.\n    AtomicReference<Consumer<State>> listenerRef = new AtomicReference<>(listener);\n    synchronized (mListeners) {\n      Preconditions.checkState(mListeners.add(listenerRef), \"listener already exists\");\n    }\n    return () -> {\n      synchronized (mListeners) {\n        mListeners.remove(listenerRef);\n      }\n    };\n  }", "signature": "Scoped onStateChange(Consumer<State> listener)", "full_signature": "@Override public final Scoped onStateChange(Consumer<State> listener)", "class_method_signature": "AbstractPrimarySelector.onStateChange(Consumer<State> listener)", "testcase": false, "constructor": false, "invocations": ["checkState", "add", "remove"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}