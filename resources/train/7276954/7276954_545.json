{"test_class": {"identifier": "TempBlockMetaTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TEST_SESSION_ID = 2;", "modifier": "private static final", "type": "long", "declarator": "TEST_SESSION_ID = 2", "var_name": "TEST_SESSION_ID"}, {"original_string": "private static final long TEST_BLOCK_ID = 9;", "modifier": "private static final", "type": "long", "declarator": "TEST_BLOCK_ID = 9", "var_name": "TEST_BLOCK_ID"}, {"original_string": "private static final long TEST_BLOCK_SIZE = 100;", "modifier": "private static final", "type": "long", "declarator": "TEST_BLOCK_SIZE = 100", "var_name": "TEST_BLOCK_SIZE"}, {"original_string": "private static final int TEST_TIER_ORDINAL = 0;", "modifier": "private static final", "type": "int", "declarator": "TEST_TIER_ORDINAL = 0", "var_name": "TEST_TIER_ORDINAL"}, {"original_string": "private static final String TEST_TIER_ALIAS = \"MEM\";", "modifier": "private static final", "type": "String", "declarator": "TEST_TIER_ALIAS = \"MEM\"", "var_name": "TEST_TIER_ALIAS"}, {"original_string": "private static final long[] TEST_TIER_CAPACITY_BYTES = {100};", "modifier": "private static final", "type": "long[]", "declarator": "TEST_TIER_CAPACITY_BYTES = {100}", "var_name": "TEST_TIER_CAPACITY_BYTES"}, {"original_string": "private static final String[] TEST_TIER_MEDIUM_TYPES = {\"MEM\"};", "modifier": "private static final", "type": "String[]", "declarator": "TEST_TIER_MEDIUM_TYPES = {\"MEM\"}", "var_name": "TEST_TIER_MEDIUM_TYPES"}, {"original_string": "private static final String TEST_WORKER_DATA_FOLDER = \"workertest\";", "modifier": "private static final", "type": "String", "declarator": "TEST_WORKER_DATA_FOLDER = \"workertest\"", "var_name": "TEST_WORKER_DATA_FOLDER"}, {"original_string": "private String mTestDirPath;", "modifier": "private", "type": "String", "declarator": "mTestDirPath", "var_name": "mTestDirPath"}, {"original_string": "private String mTestBlockDirPath;", "modifier": "private", "type": "String", "declarator": "mTestBlockDirPath", "var_name": "mTestBlockDirPath"}, {"original_string": "private TempBlockMeta mTempBlockMeta;", "modifier": "private", "type": "TempBlockMeta", "declarator": "mTempBlockMeta", "var_name": "mTempBlockMeta"}, {"original_string": "@Rule\n  public TemporaryFolder mFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mFolder = new TemporaryFolder()", "var_name": "mFolder"}], "file": "core/server/worker/src/test/java/alluxio/worker/block/meta/TempBlockMetaTest.java"}, "test_case": {"identifier": "getSessionId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getSessionId() {\n    Assert.assertEquals(TEST_SESSION_ID, mTempBlockMeta.getSessionId());\n  }", "signature": "void getSessionId()", "full_signature": "@Test public void getSessionId()", "class_method_signature": "TempBlockMetaTest.getSessionId()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getSessionId"]}, "focal_class": {"identifier": "TempBlockMeta", "superclass": "extends AbstractBlockMeta", "interfaces": "", "fields": [{"original_string": "private final long mSessionId;", "modifier": "private final", "type": "long", "declarator": "mSessionId", "var_name": "mSessionId"}, {"original_string": "private long mTempBlockSize;", "modifier": "private", "type": "long", "declarator": "mTempBlockSize", "var_name": "mTempBlockSize"}], "methods": [{"identifier": "TempBlockMeta", "parameters": "(long sessionId, long blockId, long initialBlockSize, StorageDir dir)", "modifiers": "public", "return": "", "signature": " TempBlockMeta(long sessionId, long blockId, long initialBlockSize, StorageDir dir)", "full_signature": "public  TempBlockMeta(long sessionId, long blockId, long initialBlockSize, StorageDir dir)", "class_method_signature": "TempBlockMeta.TempBlockMeta(long sessionId, long blockId, long initialBlockSize, StorageDir dir)", "testcase": false, "constructor": true}, {"identifier": "getBlockSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBlockSize()", "full_signature": "@Override public long getBlockSize()", "class_method_signature": "TempBlockMeta.getBlockSize()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "TempBlockMeta.getPath()", "testcase": false, "constructor": false}, {"identifier": "getCommitPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCommitPath()", "full_signature": "public String getCommitPath()", "class_method_signature": "TempBlockMeta.getCommitPath()", "testcase": false, "constructor": false}, {"identifier": "getSessionId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSessionId()", "full_signature": "public long getSessionId()", "class_method_signature": "TempBlockMeta.getSessionId()", "testcase": false, "constructor": false}, {"identifier": "setBlockSize", "parameters": "(long newSize)", "modifiers": "public", "return": "void", "signature": "void setBlockSize(long newSize)", "full_signature": "public void setBlockSize(long newSize)", "class_method_signature": "TempBlockMeta.setBlockSize(long newSize)", "testcase": false, "constructor": false}], "file": "core/server/worker/src/main/java/alluxio/worker/block/meta/TempBlockMeta.java"}, "focal_method": {"identifier": "getSessionId", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getSessionId() {\n    return mSessionId;\n  }", "signature": "long getSessionId()", "full_signature": "public long getSessionId()", "class_method_signature": "TempBlockMeta.getSessionId()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}