{"test_class": {"identifier": "MasterWorkerInfoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> STORAGE_TIER_ALIASES = Lists.newArrayList(\"MEM\", \"SSD\");", "modifier": "private static final", "type": "List<String>", "declarator": "STORAGE_TIER_ALIASES = Lists.newArrayList(\"MEM\", \"SSD\")", "var_name": "STORAGE_TIER_ALIASES"}, {"original_string": "private static final StorageTierAssoc GLOBAL_STORAGE_TIER_ASSOC = new MasterStorageTierAssoc(\n      STORAGE_TIER_ALIASES);", "modifier": "private static final", "type": "StorageTierAssoc", "declarator": "GLOBAL_STORAGE_TIER_ASSOC = new MasterStorageTierAssoc(\n      STORAGE_TIER_ALIASES)", "var_name": "GLOBAL_STORAGE_TIER_ASSOC"}, {"original_string": "private static final Map<String, Long> TOTAL_BYTES_ON_TIERS =\n      ImmutableMap.of(\"MEM\", Constants.KB * 3L, \"SSD\", Constants.KB * 3L);", "modifier": "private static final", "type": "Map<String, Long>", "declarator": "TOTAL_BYTES_ON_TIERS =\n      ImmutableMap.of(\"MEM\", Constants.KB * 3L, \"SSD\", Constants.KB * 3L)", "var_name": "TOTAL_BYTES_ON_TIERS"}, {"original_string": "private static final Map<String, Long> USED_BYTES_ON_TIERS =\n      ImmutableMap.of(\"MEM\", (long) Constants.KB, \"SSD\", (long) Constants.KB);", "modifier": "private static final", "type": "Map<String, Long>", "declarator": "USED_BYTES_ON_TIERS =\n      ImmutableMap.of(\"MEM\", (long) Constants.KB, \"SSD\", (long) Constants.KB)", "var_name": "USED_BYTES_ON_TIERS"}, {"original_string": "private static final Set<Long> NEW_BLOCKS = Sets.newHashSet(1L, 2L);", "modifier": "private static final", "type": "Set<Long>", "declarator": "NEW_BLOCKS = Sets.newHashSet(1L, 2L)", "var_name": "NEW_BLOCKS"}, {"original_string": "private MasterWorkerInfo mInfo;", "modifier": "private", "type": "MasterWorkerInfo", "declarator": "mInfo", "var_name": "mInfo"}, {"original_string": "@Rule\n  public ExpectedException mThrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "mThrown = ExpectedException.none()", "var_name": "mThrown"}], "file": "core/server/master/src/test/java/alluxio/master/block/meta/MasterWorkerInfoTest.java"}, "test_case": {"identifier": "registerWithDifferentNumberOfTiers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void registerWithDifferentNumberOfTiers() {\n    mThrown.expect(IllegalArgumentException.class);\n    mThrown.expectMessage(\"totalBytesOnTiers and usedBytesOnTiers should have the same number of\"\n        + \" tiers as storageTierAliases, but storageTierAliases has 2 tiers, while\"\n        + \" totalBytesOnTiers has 2 tiers and usedBytesOnTiers has 1 tiers\");\n\n    mInfo.register(GLOBAL_STORAGE_TIER_ASSOC, STORAGE_TIER_ALIASES, TOTAL_BYTES_ON_TIERS,\n        ImmutableMap.of(\"SSD\", (long) Constants.KB), NEW_BLOCKS);\n  }", "signature": "void registerWithDifferentNumberOfTiers()", "full_signature": "@Test public void registerWithDifferentNumberOfTiers()", "class_method_signature": "MasterWorkerInfoTest.registerWithDifferentNumberOfTiers()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "register", "of"]}, "focal_class": {"identifier": "MasterWorkerInfo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MasterWorkerInfo.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MasterWorkerInfo.class)", "var_name": "LOG"}, {"original_string": "private static final String LIVE_WORKER_STATE = \"In Service\";", "modifier": "private static final", "type": "String", "declarator": "LIVE_WORKER_STATE = \"In Service\"", "var_name": "LIVE_WORKER_STATE"}, {"original_string": "private static final String LOST_WORKER_STATE = \"Out of Service\";", "modifier": "private static final", "type": "String", "declarator": "LOST_WORKER_STATE = \"Out of Service\"", "var_name": "LOST_WORKER_STATE"}, {"original_string": "private final WorkerNetAddress mWorkerAddress;", "modifier": "private final", "type": "WorkerNetAddress", "declarator": "mWorkerAddress", "var_name": "mWorkerAddress"}, {"original_string": "private final long mId;", "modifier": "private final", "type": "long", "declarator": "mId", "var_name": "mId"}, {"original_string": "private final long mStartTimeMs;", "modifier": "private final", "type": "long", "declarator": "mStartTimeMs", "var_name": "mStartTimeMs"}, {"original_string": "private long mCapacityBytes;", "modifier": "private", "type": "long", "declarator": "mCapacityBytes", "var_name": "mCapacityBytes"}, {"original_string": "private long mUsedBytes;", "modifier": "private", "type": "long", "declarator": "mUsedBytes", "var_name": "mUsedBytes"}, {"original_string": "private long mLastUpdatedTimeMs;", "modifier": "private", "type": "long", "declarator": "mLastUpdatedTimeMs", "var_name": "mLastUpdatedTimeMs"}, {"original_string": "private boolean mIsRegistered;", "modifier": "private", "type": "boolean", "declarator": "mIsRegistered", "var_name": "mIsRegistered"}, {"original_string": "private StorageTierAssoc mStorageTierAssoc;", "modifier": "private", "type": "StorageTierAssoc", "declarator": "mStorageTierAssoc", "var_name": "mStorageTierAssoc"}, {"original_string": "private Map<String, Long> mTotalBytesOnTiers;", "modifier": "private", "type": "Map<String, Long>", "declarator": "mTotalBytesOnTiers", "var_name": "mTotalBytesOnTiers"}, {"original_string": "private Map<String, Long> mUsedBytesOnTiers;", "modifier": "private", "type": "Map<String, Long>", "declarator": "mUsedBytesOnTiers", "var_name": "mUsedBytesOnTiers"}, {"original_string": "private Set<Long> mBlocks;", "modifier": "private", "type": "Set<Long>", "declarator": "mBlocks", "var_name": "mBlocks"}, {"original_string": "private Set<Long> mToRemoveBlocks;", "modifier": "private", "type": "Set<Long>", "declarator": "mToRemoveBlocks", "var_name": "mToRemoveBlocks"}, {"original_string": "private Map<String, List<String>> mLostStorage;", "modifier": "private", "type": "Map<String, List<String>>", "declarator": "mLostStorage", "var_name": "mLostStorage"}], "methods": [{"identifier": "MasterWorkerInfo", "parameters": "(long id, WorkerNetAddress address)", "modifiers": "public", "return": "", "signature": " MasterWorkerInfo(long id, WorkerNetAddress address)", "full_signature": "public  MasterWorkerInfo(long id, WorkerNetAddress address)", "class_method_signature": "MasterWorkerInfo.MasterWorkerInfo(long id, WorkerNetAddress address)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> register(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "full_signature": "public Set<Long> register(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "class_method_signature": "MasterWorkerInfo.register(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "testcase": false, "constructor": false}, {"identifier": "addBlock", "parameters": "(long blockId)", "modifiers": "public", "return": "void", "signature": "void addBlock(long blockId)", "full_signature": "public void addBlock(long blockId)", "class_method_signature": "MasterWorkerInfo.addBlock(long blockId)", "testcase": false, "constructor": false}, {"identifier": "removeBlock", "parameters": "(long blockId)", "modifiers": "public", "return": "void", "signature": "void removeBlock(long blockId)", "full_signature": "public void removeBlock(long blockId)", "class_method_signature": "MasterWorkerInfo.removeBlock(long blockId)", "testcase": false, "constructor": false}, {"identifier": "addLostStorage", "parameters": "(String tierAlias, String dirPath)", "modifiers": "public", "return": "void", "signature": "void addLostStorage(String tierAlias, String dirPath)", "full_signature": "public void addLostStorage(String tierAlias, String dirPath)", "class_method_signature": "MasterWorkerInfo.addLostStorage(String tierAlias, String dirPath)", "testcase": false, "constructor": false}, {"identifier": "addLostStorage", "parameters": "(Map<String, StorageList> lostStorage)", "modifiers": "public", "return": "void", "signature": "void addLostStorage(Map<String, StorageList> lostStorage)", "full_signature": "public void addLostStorage(Map<String, StorageList> lostStorage)", "class_method_signature": "MasterWorkerInfo.addLostStorage(Map<String, StorageList> lostStorage)", "testcase": false, "constructor": false}, {"identifier": "generateWorkerInfo", "parameters": "(Set<WorkerInfoField> fieldRange, boolean isLiveWorker)", "modifiers": "public", "return": "WorkerInfo", "signature": "WorkerInfo generateWorkerInfo(Set<WorkerInfoField> fieldRange, boolean isLiveWorker)", "full_signature": "public WorkerInfo generateWorkerInfo(Set<WorkerInfoField> fieldRange, boolean isLiveWorker)", "class_method_signature": "MasterWorkerInfo.generateWorkerInfo(Set<WorkerInfoField> fieldRange, boolean isLiveWorker)", "testcase": false, "constructor": false}, {"identifier": "getWorkerAddress", "parameters": "()", "modifiers": "public", "return": "WorkerNetAddress", "signature": "WorkerNetAddress getWorkerAddress()", "full_signature": "public WorkerNetAddress getWorkerAddress()", "class_method_signature": "MasterWorkerInfo.getWorkerAddress()", "testcase": false, "constructor": false}, {"identifier": "getAvailableBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getAvailableBytes()", "full_signature": "public long getAvailableBytes()", "class_method_signature": "MasterWorkerInfo.getAvailableBytes()", "testcase": false, "constructor": false}, {"identifier": "getBlocks", "parameters": "()", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getBlocks()", "full_signature": "public Set<Long> getBlocks()", "class_method_signature": "MasterWorkerInfo.getBlocks()", "testcase": false, "constructor": false}, {"identifier": "getCapacityBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCapacityBytes()", "full_signature": "public long getCapacityBytes()", "class_method_signature": "MasterWorkerInfo.getCapacityBytes()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getId()", "full_signature": "public long getId()", "class_method_signature": "MasterWorkerInfo.getId()", "testcase": false, "constructor": false}, {"identifier": "getLastUpdatedTimeMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastUpdatedTimeMs()", "full_signature": "public long getLastUpdatedTimeMs()", "class_method_signature": "MasterWorkerInfo.getLastUpdatedTimeMs()", "testcase": false, "constructor": false}, {"identifier": "getToRemoveBlocks", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getToRemoveBlocks()", "full_signature": "public List<Long> getToRemoveBlocks()", "class_method_signature": "MasterWorkerInfo.getToRemoveBlocks()", "testcase": false, "constructor": false}, {"identifier": "getUsedBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getUsedBytes()", "full_signature": "public long getUsedBytes()", "class_method_signature": "MasterWorkerInfo.getUsedBytes()", "testcase": false, "constructor": false}, {"identifier": "getStorageTierAssoc", "parameters": "()", "modifiers": "public", "return": "StorageTierAssoc", "signature": "StorageTierAssoc getStorageTierAssoc()", "full_signature": "public StorageTierAssoc getStorageTierAssoc()", "class_method_signature": "MasterWorkerInfo.getStorageTierAssoc()", "testcase": false, "constructor": false}, {"identifier": "getTotalBytesOnTiers", "parameters": "()", "modifiers": "public", "return": "Map<String, Long>", "signature": "Map<String, Long> getTotalBytesOnTiers()", "full_signature": "public Map<String, Long> getTotalBytesOnTiers()", "class_method_signature": "MasterWorkerInfo.getTotalBytesOnTiers()", "testcase": false, "constructor": false}, {"identifier": "getUsedBytesOnTiers", "parameters": "()", "modifiers": "public", "return": "Map<String, Long>", "signature": "Map<String, Long> getUsedBytesOnTiers()", "full_signature": "public Map<String, Long> getUsedBytesOnTiers()", "class_method_signature": "MasterWorkerInfo.getUsedBytesOnTiers()", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartTime()", "full_signature": "public long getStartTime()", "class_method_signature": "MasterWorkerInfo.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "isRegistered", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRegistered()", "full_signature": "public boolean isRegistered()", "class_method_signature": "MasterWorkerInfo.isRegistered()", "testcase": false, "constructor": false}, {"identifier": "getFreeBytesOnTiers", "parameters": "()", "modifiers": "public", "return": "Map<String, Long>", "signature": "Map<String, Long> getFreeBytesOnTiers()", "full_signature": "public Map<String, Long> getFreeBytesOnTiers()", "class_method_signature": "MasterWorkerInfo.getFreeBytesOnTiers()", "testcase": false, "constructor": false}, {"identifier": "getLostStorage", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getLostStorage()", "full_signature": "public Map<String, List<String>> getLostStorage()", "class_method_signature": "MasterWorkerInfo.getLostStorage()", "testcase": false, "constructor": false}, {"identifier": "hasLostStorage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasLostStorage()", "full_signature": "public boolean hasLostStorage()", "class_method_signature": "MasterWorkerInfo.hasLostStorage()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MasterWorkerInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "updateLastUpdatedTimeMs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateLastUpdatedTimeMs()", "full_signature": "public void updateLastUpdatedTimeMs()", "class_method_signature": "MasterWorkerInfo.updateLastUpdatedTimeMs()", "testcase": false, "constructor": false}, {"identifier": "updateToRemovedBlock", "parameters": "(boolean add, long blockId)", "modifiers": "public", "return": "void", "signature": "void updateToRemovedBlock(boolean add, long blockId)", "full_signature": "public void updateToRemovedBlock(boolean add, long blockId)", "class_method_signature": "MasterWorkerInfo.updateToRemovedBlock(boolean add, long blockId)", "testcase": false, "constructor": false}, {"identifier": "updateCapacityBytes", "parameters": "(Map<String, Long> capacityBytesOnTiers)", "modifiers": "public", "return": "void", "signature": "void updateCapacityBytes(Map<String, Long> capacityBytesOnTiers)", "full_signature": "public void updateCapacityBytes(Map<String, Long> capacityBytesOnTiers)", "class_method_signature": "MasterWorkerInfo.updateCapacityBytes(Map<String, Long> capacityBytesOnTiers)", "testcase": false, "constructor": false}, {"identifier": "updateUsedBytes", "parameters": "(Map<String, Long> usedBytesOnTiers)", "modifiers": "public", "return": "void", "signature": "void updateUsedBytes(Map<String, Long> usedBytesOnTiers)", "full_signature": "public void updateUsedBytes(Map<String, Long> usedBytesOnTiers)", "class_method_signature": "MasterWorkerInfo.updateUsedBytes(Map<String, Long> usedBytesOnTiers)", "testcase": false, "constructor": false}, {"identifier": "updateUsedBytes", "parameters": "(String tierAlias, long usedBytesOnTier)", "modifiers": "public", "return": "void", "signature": "void updateUsedBytes(String tierAlias, long usedBytesOnTier)", "full_signature": "public void updateUsedBytes(String tierAlias, long usedBytesOnTier)", "class_method_signature": "MasterWorkerInfo.updateUsedBytes(String tierAlias, long usedBytesOnTier)", "testcase": false, "constructor": false}], "file": "core/server/master/src/main/java/alluxio/master/block/meta/MasterWorkerInfo.java"}, "focal_method": {"identifier": "register", "parameters": "(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "modifiers": "public", "return": "Set<Long>", "body": "public Set<Long> register(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks) {\n    // If the storage aliases do not have strictly increasing ordinal value based on the total\n    // ordering, throw an error\n    for (int i = 0; i < storageTierAliases.size() - 1; i++) {\n      if (globalStorageTierAssoc.getOrdinal(storageTierAliases.get(i)) >= globalStorageTierAssoc\n          .getOrdinal(storageTierAliases.get(i + 1))) {\n        throw new IllegalArgumentException(\n            \"Worker cannot place storage tier \" + storageTierAliases.get(i) + \" above \"\n                + storageTierAliases.get(i + 1) + \" in the hierarchy\");\n      }\n    }\n    mStorageTierAssoc = new WorkerStorageTierAssoc(storageTierAliases);\n    // validate the number of tiers\n    if (mStorageTierAssoc.size() != totalBytesOnTiers.size()\n        || mStorageTierAssoc.size() != usedBytesOnTiers.size()) {\n      throw new IllegalArgumentException(\n          \"totalBytesOnTiers and usedBytesOnTiers should have the same number of tiers as \"\n              + \"storageTierAliases, but storageTierAliases has \" + mStorageTierAssoc.size()\n              + \" tiers, while totalBytesOnTiers has \" + totalBytesOnTiers.size()\n              + \" tiers and usedBytesOnTiers has \" + usedBytesOnTiers.size() + \" tiers\");\n    }\n\n    // defensive copy\n    mTotalBytesOnTiers = new HashMap<>(totalBytesOnTiers);\n    mUsedBytesOnTiers = new HashMap<>(usedBytesOnTiers);\n    mCapacityBytes = 0;\n    for (long bytes : mTotalBytesOnTiers.values()) {\n      mCapacityBytes += bytes;\n    }\n    mUsedBytes = 0;\n    for (long bytes : mUsedBytesOnTiers.values()) {\n      mUsedBytes += bytes;\n    }\n\n    Set<Long> removedBlocks;\n    if (mIsRegistered) {\n      // This is a re-register of an existing worker. Assume the new block ownership data is more\n      // up-to-date and update the existing block information.\n      LOG.info(\"re-registering an existing workerId: {}\", mId);\n\n      // Compute the difference between the existing block data, and the new data.\n      removedBlocks = Sets.difference(mBlocks, blocks);\n    } else {\n      removedBlocks = Collections.emptySet();\n    }\n\n    // Set the new block information.\n    mBlocks = new HashSet<>(blocks);\n\n    mIsRegistered = true;\n    return removedBlocks;\n  }", "signature": "Set<Long> register(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "full_signature": "public Set<Long> register(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "class_method_signature": "MasterWorkerInfo.register(final StorageTierAssoc globalStorageTierAssoc,\n      final List<String> storageTierAliases, final Map<String, Long> totalBytesOnTiers,\n      final Map<String, Long> usedBytesOnTiers, final Set<Long> blocks)", "testcase": false, "constructor": false, "invocations": ["size", "getOrdinal", "get", "getOrdinal", "get", "get", "get", "size", "size", "size", "size", "size", "size", "size", "values", "values", "info", "difference", "emptySet"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}