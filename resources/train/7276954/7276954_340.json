{"test_class": {"identifier": "AbstractFileSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractFileSystemTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractFileSystemTest.class)", "var_name": "LOG"}, {"original_string": "private InstancedConfiguration mConfiguration = ConfigurationTestUtils.defaults();", "modifier": "private", "type": "InstancedConfiguration", "declarator": "mConfiguration = ConfigurationTestUtils.defaults()", "var_name": "mConfiguration"}, {"original_string": "private FileSystemContext mMockFileSystemContext = mock(FileSystemContext.class);", "modifier": "private", "type": "FileSystemContext", "declarator": "mMockFileSystemContext = mock(FileSystemContext.class)", "var_name": "mMockFileSystemContext"}, {"original_string": "@Rule\n  public ExpectedException mExpectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "mExpectedException = ExpectedException.none()", "var_name": "mExpectedException"}], "file": "core/client/hdfs/src/test/java/alluxio/hadoop/AbstractFileSystemTest.java"}, "test_case": {"identifier": "hadoopShouldLoadFsWithMultiMasterUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void hadoopShouldLoadFsWithMultiMasterUri() throws Exception {\n    URI uri = URI.create(\"alluxio://host1:19998,host2:19998,host3:19998/path\");\n    org.apache.hadoop.fs.FileSystem fs = org.apache.hadoop.fs.FileSystem.get(uri, getConf());\n    assertTrue(fs instanceof FileSystem);\n\n    uri = URI.create(\"alluxio://host1:19998;host2:19998;host3:19998/path\");\n    fs = org.apache.hadoop.fs.FileSystem.get(uri, getConf());\n    assertTrue(fs instanceof FileSystem);\n  }", "signature": "void hadoopShouldLoadFsWithMultiMasterUri()", "full_signature": "@Test public void hadoopShouldLoadFsWithMultiMasterUri()", "class_method_signature": "AbstractFileSystemTest.hadoopShouldLoadFsWithMultiMasterUri()", "testcase": true, "constructor": false, "invocations": ["create", "get", "getConf", "assertTrue", "create", "get", "getConf", "assertTrue"]}, "focal_class": {"identifier": "AbstractFileSystem", "superclass": "extends org.apache.hadoop.fs.FileSystem", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractFileSystem.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractFileSystem.class)", "var_name": "LOG"}, {"original_string": "public static final String FIRST_COM_PATH = \"alluxio_dep/\";", "modifier": "public static final", "type": "String", "declarator": "FIRST_COM_PATH = \"alluxio_dep/\"", "var_name": "FIRST_COM_PATH"}, {"original_string": "protected AlluxioConfiguration mAlluxioConf = null;", "modifier": "protected", "type": "AlluxioConfiguration", "declarator": "mAlluxioConf = null", "var_name": "mAlluxioConf"}, {"original_string": "protected FileSystem mFileSystem = null;", "modifier": "protected", "type": "FileSystem", "declarator": "mFileSystem = null", "var_name": "mFileSystem"}, {"original_string": "private URI mUri = null;", "modifier": "private", "type": "URI", "declarator": "mUri = null", "var_name": "mUri"}, {"original_string": "private Path mWorkingDir = new Path(AlluxioURI.SEPARATOR);", "modifier": "private", "type": "Path", "declarator": "mWorkingDir = new Path(AlluxioURI.SEPARATOR)", "var_name": "mWorkingDir"}, {"original_string": "private Statistics mStatistics = null;", "modifier": "private", "type": "Statistics", "declarator": "mStatistics = null", "var_name": "mStatistics"}, {"original_string": "private String mAlluxioHeader = null;", "modifier": "private", "type": "String", "declarator": "mAlluxioHeader = null", "var_name": "mAlluxioHeader"}], "methods": [{"identifier": "AbstractFileSystem", "parameters": "(FileSystem fileSystem)", "modifiers": "protected", "return": "", "signature": " AbstractFileSystem(FileSystem fileSystem)", "full_signature": "protected  AbstractFileSystem(FileSystem fileSystem)", "class_method_signature": "AbstractFileSystem.AbstractFileSystem(FileSystem fileSystem)", "testcase": false, "constructor": true}, {"identifier": "AbstractFileSystem", "parameters": "()", "modifiers": "protected", "return": "", "signature": " AbstractFileSystem()", "full_signature": "protected  AbstractFileSystem()", "class_method_signature": "AbstractFileSystem.AbstractFileSystem()", "testcase": false, "constructor": true}, {"identifier": "append", "parameters": "(Path path, int bufferSize, Progressable progress)", "modifiers": "@Override public", "return": "FSDataOutputStream", "signature": "FSDataOutputStream append(Path path, int bufferSize, Progressable progress)", "full_signature": "@Override public FSDataOutputStream append(Path path, int bufferSize, Progressable progress)", "class_method_signature": "AbstractFileSystem.append(Path path, int bufferSize, Progressable progress)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AbstractFileSystem.close()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "modifiers": "@Override public", "return": "FSDataOutputStream", "signature": "FSDataOutputStream create(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "full_signature": "@Override public FSDataOutputStream create(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "class_method_signature": "AbstractFileSystem.create(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "testcase": false, "constructor": false}, {"identifier": "createNonRecursive", "parameters": "(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)", "modifiers": "@Override @Deprecated public", "return": "FSDataOutputStream", "signature": "FSDataOutputStream createNonRecursive(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)", "full_signature": "@Override @Deprecated public FSDataOutputStream createNonRecursive(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)", "class_method_signature": "AbstractFileSystem.createNonRecursive(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Path path)", "modifiers": "@Override @Deprecated public", "return": "boolean", "signature": "boolean delete(Path path)", "full_signature": "@Override @Deprecated public boolean delete(Path path)", "class_method_signature": "AbstractFileSystem.delete(Path path)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Path path, boolean recursive)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(Path path, boolean recursive)", "full_signature": "@Override public boolean delete(Path path, boolean recursive)", "class_method_signature": "AbstractFileSystem.delete(Path path, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getDefaultBlockSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getDefaultBlockSize()", "full_signature": "@Override public long getDefaultBlockSize()", "class_method_signature": "AbstractFileSystem.getDefaultBlockSize()", "testcase": false, "constructor": false}, {"identifier": "getFileBlockLocations", "parameters": "(FileStatus file, long start, long len)", "modifiers": "@Nullable @Override public", "return": "BlockLocation[]", "signature": "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)", "full_signature": "@Nullable @Override public BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)", "class_method_signature": "AbstractFileSystem.getFileBlockLocations(FileStatus file, long start, long len)", "testcase": false, "constructor": false}, {"identifier": "getDefaultReplication", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short getDefaultReplication()", "full_signature": "@Override public short getDefaultReplication()", "class_method_signature": "AbstractFileSystem.getDefaultReplication()", "testcase": false, "constructor": false}, {"identifier": "setReplication", "parameters": "(Path path, short replication)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setReplication(Path path, short replication)", "full_signature": "@Override public boolean setReplication(Path path, short replication)", "class_method_signature": "AbstractFileSystem.setReplication(Path path, short replication)", "testcase": false, "constructor": false}, {"identifier": "getFileStatus", "parameters": "(Path path)", "modifiers": "@Override public", "return": "FileStatus", "signature": "FileStatus getFileStatus(Path path)", "full_signature": "@Override public FileStatus getFileStatus(Path path)", "class_method_signature": "AbstractFileSystem.getFileStatus(Path path)", "testcase": false, "constructor": false}, {"identifier": "getReplica", "parameters": "(URIStatus status)", "modifiers": "private", "return": "int", "signature": "int getReplica(URIStatus status)", "full_signature": "private int getReplica(URIStatus status)", "class_method_signature": "AbstractFileSystem.getReplica(URIStatus status)", "testcase": false, "constructor": false}, {"identifier": "setOwner", "parameters": "(Path path, final String username, final String groupname)", "modifiers": "@Override public", "return": "void", "signature": "void setOwner(Path path, final String username, final String groupname)", "full_signature": "@Override public void setOwner(Path path, final String username, final String groupname)", "class_method_signature": "AbstractFileSystem.setOwner(Path path, final String username, final String groupname)", "testcase": false, "constructor": false}, {"identifier": "setPermission", "parameters": "(Path path, FsPermission permission)", "modifiers": "@Override public", "return": "void", "signature": "void setPermission(Path path, FsPermission permission)", "full_signature": "@Override public void setPermission(Path path, FsPermission permission)", "class_method_signature": "AbstractFileSystem.setPermission(Path path, FsPermission permission)", "testcase": false, "constructor": false}, {"identifier": "getScheme", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getScheme()", "full_signature": "public abstract String getScheme()", "class_method_signature": "AbstractFileSystem.getScheme()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getUri()", "full_signature": "@Override public URI getUri()", "class_method_signature": "AbstractFileSystem.getUri()", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getWorkingDirectory()", "full_signature": "@Override public Path getWorkingDirectory()", "class_method_signature": "AbstractFileSystem.getWorkingDirectory()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(URI uri, org.apache.hadoop.conf.Configuration conf)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void initialize(URI uri, org.apache.hadoop.conf.Configuration conf)", "full_signature": "@Override public synchronized void initialize(URI uri, org.apache.hadoop.conf.Configuration conf)", "class_method_signature": "AbstractFileSystem.initialize(URI uri, org.apache.hadoop.conf.Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(URI uri, org.apache.hadoop.conf.Configuration conf,\n      @Nullable AlluxioConfiguration alluxioConfiguration)", "modifiers": "@VisibleForTesting public synchronized", "return": "void", "signature": "void initialize(URI uri, org.apache.hadoop.conf.Configuration conf,\n      @Nullable AlluxioConfiguration alluxioConfiguration)", "full_signature": "@VisibleForTesting public synchronized void initialize(URI uri, org.apache.hadoop.conf.Configuration conf,\n      @Nullable AlluxioConfiguration alluxioConfiguration)", "class_method_signature": "AbstractFileSystem.initialize(URI uri, org.apache.hadoop.conf.Configuration conf,\n      @Nullable AlluxioConfiguration alluxioConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getSubjectFromUGI", "parameters": "(UserGroupInformation ugi)", "modifiers": "private", "return": "Subject", "signature": "Subject getSubjectFromUGI(UserGroupInformation ugi)", "full_signature": "private Subject getSubjectFromUGI(UserGroupInformation ugi)", "class_method_signature": "AbstractFileSystem.getSubjectFromUGI(UserGroupInformation ugi)", "testcase": false, "constructor": false}, {"identifier": "getHadoopSubject", "parameters": "()", "modifiers": "private", "return": "Subject", "signature": "Subject getHadoopSubject()", "full_signature": "private Subject getHadoopSubject()", "class_method_signature": "AbstractFileSystem.getHadoopSubject()", "testcase": false, "constructor": false}, {"identifier": "isZookeeperMode", "parameters": "()", "modifiers": "@Deprecated protected abstract", "return": "boolean", "signature": "boolean isZookeeperMode()", "full_signature": "@Deprecated protected abstract boolean isZookeeperMode()", "class_method_signature": "AbstractFileSystem.isZookeeperMode()", "testcase": false, "constructor": false}, {"identifier": "listStatus", "parameters": "(Path path)", "modifiers": "@Override public", "return": "FileStatus[]", "signature": "FileStatus[] listStatus(Path path)", "full_signature": "@Override public FileStatus[] listStatus(Path path)", "class_method_signature": "AbstractFileSystem.listStatus(Path path)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "(Path path, FsPermission permission)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean mkdirs(Path path, FsPermission permission)", "full_signature": "@Override public boolean mkdirs(Path path, FsPermission permission)", "class_method_signature": "AbstractFileSystem.mkdirs(Path path, FsPermission permission)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Path path, int bufferSize)", "modifiers": "@Override public", "return": "FSDataInputStream", "signature": "FSDataInputStream open(Path path, int bufferSize)", "full_signature": "@Override public FSDataInputStream open(Path path, int bufferSize)", "class_method_signature": "AbstractFileSystem.open(Path path, int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(Path src, Path dst)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean rename(Path src, Path dst)", "full_signature": "@Override public boolean rename(Path src, Path dst)", "class_method_signature": "AbstractFileSystem.rename(Path src, Path dst)", "testcase": false, "constructor": false}, {"identifier": "setWorkingDirectory", "parameters": "(Path path)", "modifiers": "@Override public", "return": "void", "signature": "void setWorkingDirectory(Path path)", "full_signature": "@Override public void setWorkingDirectory(Path path)", "class_method_signature": "AbstractFileSystem.setWorkingDirectory(Path path)", "testcase": false, "constructor": false}, {"identifier": "ensureExists", "parameters": "(AlluxioURI path)", "modifiers": "private", "return": "void", "signature": "void ensureExists(AlluxioURI path)", "full_signature": "private void ensureExists(AlluxioURI path)", "class_method_signature": "AbstractFileSystem.ensureExists(AlluxioURI path)", "testcase": false, "constructor": false}, {"identifier": "getConfigurationFromUri", "parameters": "(URI uri)", "modifiers": "protected abstract", "return": "Map<String, Object>", "signature": "Map<String, Object> getConfigurationFromUri(URI uri)", "full_signature": "protected abstract Map<String, Object> getConfigurationFromUri(URI uri)", "class_method_signature": "AbstractFileSystem.getConfigurationFromUri(URI uri)", "testcase": false, "constructor": false}, {"identifier": "validateFsUri", "parameters": "(URI fsUri)", "modifiers": "protected abstract", "return": "void", "signature": "void validateFsUri(URI fsUri)", "full_signature": "protected abstract void validateFsUri(URI fsUri)", "class_method_signature": "AbstractFileSystem.validateFsUri(URI fsUri)", "testcase": false, "constructor": false}, {"identifier": "getFsScheme", "parameters": "(URI fsUri)", "modifiers": "protected abstract", "return": "String", "signature": "String getFsScheme(URI fsUri)", "full_signature": "protected abstract String getFsScheme(URI fsUri)", "class_method_signature": "AbstractFileSystem.getFsScheme(URI fsUri)", "testcase": false, "constructor": false}, {"identifier": "getAlluxioPath", "parameters": "(Path path)", "modifiers": "protected abstract", "return": "AlluxioURI", "signature": "AlluxioURI getAlluxioPath(Path path)", "full_signature": "protected abstract AlluxioURI getAlluxioPath(Path path)", "class_method_signature": "AbstractFileSystem.getAlluxioPath(Path path)", "testcase": false, "constructor": false}, {"identifier": "getFsPath", "parameters": "(String fsUriHeader, URIStatus fileStatus)", "modifiers": "protected abstract", "return": "Path", "signature": "Path getFsPath(String fsUriHeader, URIStatus fileStatus)", "full_signature": "protected abstract Path getFsPath(String fsUriHeader, URIStatus fileStatus)", "class_method_signature": "AbstractFileSystem.getFsPath(String fsUriHeader, URIStatus fileStatus)", "testcase": false, "constructor": false}], "file": "core/client/hdfs/src/main/java/alluxio/hadoop/AbstractFileSystem.java"}, "focal_method": {"identifier": "create", "parameters": "(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "modifiers": "@Override public", "return": "FSDataOutputStream", "body": "@Override\n  public FSDataOutputStream create(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress) throws IOException {\n    LOG.debug(\"create({}, {}, {}, {}, {}, {}, {})\", path, permission, overwrite, bufferSize,\n        replication, blockSize, progress);\n    if (mStatistics != null) {\n      mStatistics.incrementWriteOps(1);\n    }\n\n    AlluxioURI uri = getAlluxioPath(path);\n    CreateFilePOptions options = CreateFilePOptions.newBuilder().setBlockSizeBytes(blockSize)\n        .setMode(new Mode(permission.toShort()).toProto()).setRecursive(true).build();\n\n    FileOutStream outStream;\n    try {\n      outStream = mFileSystem.createFile(uri, options);\n    } catch (AlluxioException e) {\n      //now we should consider the override parameter\n      try {\n        if (mFileSystem.exists(uri)) {\n          if (!overwrite) {\n            throw new IOException(\n                \"Not allowed to create() (overwrite=false) for existing Alluxio path: \" + uri);\n          }\n          if (mFileSystem.getStatus(uri).isFolder()) {\n            throw new IOException(\n                ExceptionMessage.FILE_CREATE_IS_DIRECTORY.getMessage(uri));\n          }\n          mFileSystem.delete(uri);\n        }\n        outStream = mFileSystem.createFile(uri, options);\n      } catch (AlluxioException e2) {\n        throw new IOException(e2);\n      }\n    }\n    return new FSDataOutputStream(outStream, mStatistics);\n  }", "signature": "FSDataOutputStream create(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "full_signature": "@Override public FSDataOutputStream create(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "class_method_signature": "AbstractFileSystem.create(Path path, FsPermission permission, boolean overwrite,\n      int bufferSize, short replication, long blockSize, Progressable progress)", "testcase": false, "constructor": false, "invocations": ["debug", "incrementWriteOps", "getAlluxioPath", "build", "setRecursive", "setMode", "setBlockSizeBytes", "newBuilder", "toProto", "toShort", "createFile", "exists", "isFolder", "getStatus", "getMessage", "delete", "createFile"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}