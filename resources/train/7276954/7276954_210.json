{"test_class": {"identifier": "FormatUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/alluxio/util/FormatUtilsTest.java"}, "test_case": {"identifier": "getSizeFromBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getSizeFromBytes() {\n    class TestCase {\n      String mExpected;\n      long mInput;\n\n      public TestCase(String expected, long input) {\n        mExpected = expected;\n        mInput = input;\n      }\n    }\n\n    List<TestCase> testCases = new ArrayList<>();\n    testCases.add(new TestCase(\"4B\", 1L << 2));\n    testCases.add(new TestCase(\"8B\", 1L << 3));\n    testCases.add(new TestCase(\"4096B\", 1L << 12));\n    testCases.add(new TestCase(\"8.00KB\", 1L << 13));\n    testCases.add(new TestCase(\"4096.00KB\", 1L << 22));\n    testCases.add(new TestCase(\"8.00MB\", 1L << 23));\n    testCases.add(new TestCase(\"4096.00MB\", 1L << 32));\n    testCases.add(new TestCase(\"8.00GB\", 1L << 33));\n    testCases.add(new TestCase(\"4096.00GB\", 1L << 42));\n    testCases.add(new TestCase(\"8.00TB\", 1L << 43));\n    testCases.add(new TestCase(\"4096.00TB\", 1L << 52));\n    testCases.add(new TestCase(\"8.00PB\", 1L << 53));\n    testCases.add(new TestCase(\"4096.00PB\", 1L << 62));\n\n    for (TestCase testCase : testCases) {\n      assertEquals(testCase.mExpected, FormatUtils.getSizeFromBytes(testCase.mInput));\n    }\n  }", "signature": "void getSizeFromBytes()", "full_signature": "@Test public void getSizeFromBytes()", "class_method_signature": "FormatUtilsTest.getSizeFromBytes()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertEquals", "getSizeFromBytes"]}, "focal_class": {"identifier": "FormatUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern SEP_DIGIT_LETTER = Pattern.compile(\"([-]?[0-9]*)([a-zA-Z]*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "SEP_DIGIT_LETTER = Pattern.compile(\"([-]?[0-9]*)([a-zA-Z]*)\")", "var_name": "SEP_DIGIT_LETTER"}], "methods": [{"identifier": "parametersToString", "parameters": "(Object... objs)", "modifiers": "public static", "return": "String", "signature": "String parametersToString(Object... objs)", "full_signature": "public static String parametersToString(Object... objs)", "class_method_signature": "FormatUtils.parametersToString(Object... objs)", "testcase": false, "constructor": false}, {"identifier": "byteBufferToString", "parameters": "(ByteBuffer buf)", "modifiers": "public static", "return": "String", "signature": "String byteBufferToString(ByteBuffer buf)", "full_signature": "public static String byteBufferToString(ByteBuffer buf)", "class_method_signature": "FormatUtils.byteBufferToString(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToHexString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String byteArrayToHexString(byte[] bytes)", "full_signature": "public static String byteArrayToHexString(byte[] bytes)", "class_method_signature": "FormatUtils.byteArrayToHexString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToHexString", "parameters": "(byte[] bytes, String prefix, String separator)", "modifiers": "public static", "return": "String", "signature": "String byteArrayToHexString(byte[] bytes, String prefix, String separator)", "full_signature": "public static String byteArrayToHexString(byte[] bytes, String prefix, String separator)", "class_method_signature": "FormatUtils.byteArrayToHexString(byte[] bytes, String prefix, String separator)", "testcase": false, "constructor": false}, {"identifier": "formatTimeTakenMs", "parameters": "(long startTimeMs, String message)", "modifiers": "public static", "return": "String", "signature": "String formatTimeTakenMs(long startTimeMs, String message)", "full_signature": "public static String formatTimeTakenMs(long startTimeMs, String message)", "class_method_signature": "FormatUtils.formatTimeTakenMs(long startTimeMs, String message)", "testcase": false, "constructor": false}, {"identifier": "formatTimeTakenNs", "parameters": "(long startTimeNs, String message)", "modifiers": "public static", "return": "String", "signature": "String formatTimeTakenNs(long startTimeNs, String message)", "full_signature": "public static String formatTimeTakenNs(long startTimeNs, String message)", "class_method_signature": "FormatUtils.formatTimeTakenNs(long startTimeNs, String message)", "testcase": false, "constructor": false}, {"identifier": "getSizeFromBytes", "parameters": "(long bytes)", "modifiers": "public static", "return": "String", "signature": "String getSizeFromBytes(long bytes)", "full_signature": "public static String getSizeFromBytes(long bytes)", "class_method_signature": "FormatUtils.getSizeFromBytes(long bytes)", "testcase": false, "constructor": false}, {"identifier": "parseSpaceSize", "parameters": "(String spaceSize)", "modifiers": "public static", "return": "long", "signature": "long parseSpaceSize(String spaceSize)", "full_signature": "public static long parseSpaceSize(String spaceSize)", "class_method_signature": "FormatUtils.parseSpaceSize(String spaceSize)", "testcase": false, "constructor": false}, {"identifier": "parseTimeSize", "parameters": "(String timeSize)", "modifiers": "public static", "return": "long", "signature": "long parseTimeSize(String timeSize)", "full_signature": "public static long parseTimeSize(String timeSize)", "class_method_signature": "FormatUtils.parseTimeSize(String timeSize)", "testcase": false, "constructor": false}, {"identifier": "formatMode", "parameters": "(short mode, boolean directory, boolean hasExtended)", "modifiers": "public static", "return": "String", "signature": "String formatMode(short mode, boolean directory, boolean hasExtended)", "full_signature": "public static String formatMode(short mode, boolean directory, boolean hasExtended)", "class_method_signature": "FormatUtils.formatMode(short mode, boolean directory, boolean hasExtended)", "testcase": false, "constructor": false}, {"identifier": "FormatUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FormatUtils()", "full_signature": "private  FormatUtils()", "class_method_signature": "FormatUtils.FormatUtils()", "testcase": false, "constructor": true}], "file": "core/common/src/main/java/alluxio/util/FormatUtils.java"}, "focal_method": {"identifier": "getSizeFromBytes", "parameters": "(long bytes)", "modifiers": "public static", "return": "String", "body": "public static String getSizeFromBytes(long bytes) {\n    double ret = bytes;\n    if (ret <= 1024 * 5) {\n      return String.format(Locale.ENGLISH, \"%dB\", bytes);\n    }\n    ret /= 1024;\n    if (ret <= 1024 * 5) {\n      return String.format(Locale.ENGLISH, \"%.2fKB\", ret);\n    }\n    ret /= 1024;\n    if (ret <= 1024 * 5) {\n      return String.format(Locale.ENGLISH, \"%.2fMB\", ret);\n    }\n    ret /= 1024;\n    if (ret <= 1024 * 5) {\n      return String.format(Locale.ENGLISH, \"%.2fGB\", ret);\n    }\n    ret /= 1024;\n    if (ret <= 1024 * 5) {\n      return String.format(Locale.ENGLISH, \"%.2fTB\", ret);\n    }\n    ret /= 1024;\n    return String.format(Locale.ENGLISH, \"%.2fPB\", ret);\n  }", "signature": "String getSizeFromBytes(long bytes)", "full_signature": "public static String getSizeFromBytes(long bytes)", "class_method_signature": "FormatUtils.getSizeFromBytes(long bytes)", "testcase": false, "constructor": false, "invocations": ["format", "format", "format", "format", "format", "format"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}