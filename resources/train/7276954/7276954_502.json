{"test_class": {"identifier": "TieredBlockStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long SESSION_ID1 = 2;", "modifier": "private static final", "type": "long", "declarator": "SESSION_ID1 = 2", "var_name": "SESSION_ID1"}, {"original_string": "private static final long SESSION_ID2 = 3;", "modifier": "private static final", "type": "long", "declarator": "SESSION_ID2 = 3", "var_name": "SESSION_ID2"}, {"original_string": "private static final long BLOCK_ID1 = 1000;", "modifier": "private static final", "type": "long", "declarator": "BLOCK_ID1 = 1000", "var_name": "BLOCK_ID1"}, {"original_string": "private static final long BLOCK_ID2 = 1001;", "modifier": "private static final", "type": "long", "declarator": "BLOCK_ID2 = 1001", "var_name": "BLOCK_ID2"}, {"original_string": "private static final long TEMP_BLOCK_ID = 1003;", "modifier": "private static final", "type": "long", "declarator": "TEMP_BLOCK_ID = 1003", "var_name": "TEMP_BLOCK_ID"}, {"original_string": "private static final long TEMP_BLOCK_ID2 = 1004;", "modifier": "private static final", "type": "long", "declarator": "TEMP_BLOCK_ID2 = 1004", "var_name": "TEMP_BLOCK_ID2"}, {"original_string": "private static final long BLOCK_SIZE = 512;", "modifier": "private static final", "type": "long", "declarator": "BLOCK_SIZE = 512", "var_name": "BLOCK_SIZE"}, {"original_string": "private static final String FIRST_TIER_ALIAS = TieredBlockStoreTestUtils.TIER_ALIAS[0];", "modifier": "private static final", "type": "String", "declarator": "FIRST_TIER_ALIAS = TieredBlockStoreTestUtils.TIER_ALIAS[0]", "var_name": "FIRST_TIER_ALIAS"}, {"original_string": "private static final String SECOND_TIER_ALIAS = TieredBlockStoreTestUtils.TIER_ALIAS[1];", "modifier": "private static final", "type": "String", "declarator": "SECOND_TIER_ALIAS = TieredBlockStoreTestUtils.TIER_ALIAS[1]", "var_name": "SECOND_TIER_ALIAS"}, {"original_string": "private TieredBlockStore mBlockStore;", "modifier": "private", "type": "TieredBlockStore", "declarator": "mBlockStore", "var_name": "mBlockStore"}, {"original_string": "private BlockMetadataManager mMetaManager;", "modifier": "private", "type": "BlockMetadataManager", "declarator": "mMetaManager", "var_name": "mMetaManager"}, {"original_string": "private BlockLockManager mLockManager;", "modifier": "private", "type": "BlockLockManager", "declarator": "mLockManager", "var_name": "mLockManager"}, {"original_string": "private StorageDir mTestDir1;", "modifier": "private", "type": "StorageDir", "declarator": "mTestDir1", "var_name": "mTestDir1"}, {"original_string": "private StorageDir mTestDir2;", "modifier": "private", "type": "StorageDir", "declarator": "mTestDir2", "var_name": "mTestDir2"}, {"original_string": "private StorageDir mTestDir3;", "modifier": "private", "type": "StorageDir", "declarator": "mTestDir3", "var_name": "mTestDir3"}, {"original_string": "private StorageDir mTestDir4;", "modifier": "private", "type": "StorageDir", "declarator": "mTestDir4", "var_name": "mTestDir4"}, {"original_string": "private BlockIterator mBlockIterator;", "modifier": "private", "type": "BlockIterator", "declarator": "mBlockIterator", "var_name": "mBlockIterator"}, {"original_string": "@Rule\n  public TemporaryFolder mTestFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mTestFolder = new TemporaryFolder()", "var_name": "mTestFolder"}, {"original_string": "@Rule\n  public ExpectedException mThrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "mThrown = ExpectedException.none()", "var_name": "mThrown"}], "file": "core/server/worker/src/test/java/alluxio/worker/block/TieredBlockStoreTest.java"}, "test_case": {"identifier": "removeBlock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void removeBlock() throws Exception {\n    TieredBlockStoreTestUtils.cache2(SESSION_ID1, BLOCK_ID1, BLOCK_SIZE, mTestDir1, mMetaManager,\n        mBlockIterator);\n    mBlockStore.removeBlock(SESSION_ID1, BLOCK_ID1);\n    assertFalse(mTestDir1.hasBlockMeta(BLOCK_ID1));\n    assertFalse(mBlockStore.hasBlockMeta(BLOCK_ID1));\n    assertFalse(FileUtils.exists(BlockMeta.commitPath(mTestDir1, BLOCK_ID1)));\n\n    // Remove block from specific Dir\n    TieredBlockStoreTestUtils.cache2(SESSION_ID2, BLOCK_ID2, BLOCK_SIZE, mTestDir1, mMetaManager,\n        mBlockIterator);\n    // Remove block from wrong Dir\n    mThrown.expect(BlockDoesNotExistException.class);\n    mThrown.expectMessage(ExceptionMessage.BLOCK_NOT_FOUND_AT_LOCATION.getMessage(BLOCK_ID2,\n        mTestDir2.toBlockStoreLocation()));\n    mBlockStore.removeBlock(SESSION_ID2, BLOCK_ID2, mTestDir2.toBlockStoreLocation());\n    // Remove block from right Dir\n    mBlockStore.removeBlock(SESSION_ID2, BLOCK_ID2, mTestDir1.toBlockStoreLocation());\n    assertFalse(mTestDir1.hasBlockMeta(BLOCK_ID2));\n    assertFalse(mBlockStore.hasBlockMeta(BLOCK_ID2));\n    assertFalse(FileUtils.exists(BlockMeta.commitPath(mTestDir1, BLOCK_ID2)));\n\n    // Remove block from the specific tier\n    TieredBlockStoreTestUtils.cache2(SESSION_ID2, BLOCK_ID2, BLOCK_SIZE, mTestDir1, mMetaManager,\n        mBlockIterator);\n    mBlockStore.removeBlock(SESSION_ID2, BLOCK_ID2,\n        BlockStoreLocation.anyDirInTier(mTestDir1.getParentTier().getTierAlias()));\n    assertFalse(mTestDir1.hasBlockMeta(BLOCK_ID2));\n    assertFalse(mBlockStore.hasBlockMeta(BLOCK_ID2));\n    assertFalse(FileUtils.exists(BlockMeta.commitPath(mTestDir1, BLOCK_ID2)));\n  }", "signature": "void removeBlock()", "full_signature": "@Test public void removeBlock()", "class_method_signature": "TieredBlockStoreTest.removeBlock()", "testcase": true, "constructor": false, "invocations": ["cache2", "removeBlock", "assertFalse", "hasBlockMeta", "assertFalse", "hasBlockMeta", "assertFalse", "exists", "commitPath", "cache2", "expect", "expectMessage", "getMessage", "toBlockStoreLocation", "removeBlock", "toBlockStoreLocation", "removeBlock", "toBlockStoreLocation", "assertFalse", "hasBlockMeta", "assertFalse", "hasBlockMeta", "assertFalse", "exists", "commitPath", "cache2", "removeBlock", "anyDirInTier", "getTierAlias", "getParentTier", "assertFalse", "hasBlockMeta", "assertFalse", "hasBlockMeta", "assertFalse", "exists", "commitPath"]}, "focal_class": {"identifier": "TieredBlockStore", "superclass": "", "interfaces": "implements BlockStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TieredBlockStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TieredBlockStore.class)", "var_name": "LOG"}, {"original_string": "private final BlockMetadataManager mMetaManager;", "modifier": "private final", "type": "BlockMetadataManager", "declarator": "mMetaManager", "var_name": "mMetaManager"}, {"original_string": "private final BlockLockManager mLockManager;", "modifier": "private final", "type": "BlockLockManager", "declarator": "mLockManager", "var_name": "mLockManager"}, {"original_string": "private final Allocator mAllocator;", "modifier": "private final", "type": "Allocator", "declarator": "mAllocator", "var_name": "mAllocator"}, {"original_string": "private final List<BlockStoreEventListener> mBlockStoreEventListeners = new ArrayList<>();", "modifier": "private final", "type": "List<BlockStoreEventListener>", "declarator": "mBlockStoreEventListeners = new ArrayList<>()", "var_name": "mBlockStoreEventListeners"}, {"original_string": "private final Set<Long> mPinnedInodes = new HashSet<>();", "modifier": "private final", "type": "Set<Long>", "declarator": "mPinnedInodes = new HashSet<>()", "var_name": "mPinnedInodes"}, {"original_string": "private final ReentrantReadWriteLock mMetadataLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "mMetadataLock = new ReentrantReadWriteLock()", "var_name": "mMetadataLock"}, {"original_string": "private final Lock mMetadataReadLock = mMetadataLock.readLock();", "modifier": "private final", "type": "Lock", "declarator": "mMetadataReadLock = mMetadataLock.readLock()", "var_name": "mMetadataReadLock"}, {"original_string": "private final Lock mMetadataWriteLock = mMetadataLock.writeLock();", "modifier": "private final", "type": "Lock", "declarator": "mMetadataWriteLock = mMetadataLock.writeLock()", "var_name": "mMetadataWriteLock"}, {"original_string": "private BlockIterator mBlockIterator;", "modifier": "private", "type": "BlockIterator", "declarator": "mBlockIterator", "var_name": "mBlockIterator"}, {"original_string": "private ManagementTaskCoordinator mTaskCoordinator;", "modifier": "private", "type": "ManagementTaskCoordinator", "declarator": "mTaskCoordinator", "var_name": "mTaskCoordinator"}], "methods": [{"identifier": "TieredBlockStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " TieredBlockStore()", "full_signature": "public  TieredBlockStore()", "class_method_signature": "TieredBlockStore.TieredBlockStore()", "testcase": false, "constructor": true}, {"identifier": "lockBlock", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "long", "signature": "long lockBlock(long sessionId, long blockId)", "full_signature": "@Override public long lockBlock(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.lockBlock(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "lockBlockNoException", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "long", "signature": "long lockBlockNoException(long sessionId, long blockId)", "full_signature": "@Override public long lockBlockNoException(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.lockBlockNoException(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "unlockBlock", "parameters": "(long lockId)", "modifiers": "@Override public", "return": "void", "signature": "void unlockBlock(long lockId)", "full_signature": "@Override public void unlockBlock(long lockId)", "class_method_signature": "TieredBlockStore.unlockBlock(long lockId)", "testcase": false, "constructor": false}, {"identifier": "unlockBlock", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unlockBlock(long sessionId, long blockId)", "full_signature": "@Override public boolean unlockBlock(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.unlockBlock(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "getBlockWriter", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "BlockWriter", "signature": "BlockWriter getBlockWriter(long sessionId, long blockId)", "full_signature": "@Override public BlockWriter getBlockWriter(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.getBlockWriter(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "getBlockReader", "parameters": "(long sessionId, long blockId, long lockId)", "modifiers": "@Override public", "return": "BlockReader", "signature": "BlockReader getBlockReader(long sessionId, long blockId, long lockId)", "full_signature": "@Override public BlockReader getBlockReader(long sessionId, long blockId, long lockId)", "class_method_signature": "TieredBlockStore.getBlockReader(long sessionId, long blockId, long lockId)", "testcase": false, "constructor": false}, {"identifier": "createBlock", "parameters": "(long sessionId, long blockId, AllocateOptions options)", "modifiers": "@Override public", "return": "TempBlockMeta", "signature": "TempBlockMeta createBlock(long sessionId, long blockId, AllocateOptions options)", "full_signature": "@Override public TempBlockMeta createBlock(long sessionId, long blockId, AllocateOptions options)", "class_method_signature": "TieredBlockStore.createBlock(long sessionId, long blockId, AllocateOptions options)", "testcase": false, "constructor": false}, {"identifier": "getVolatileBlockMeta", "parameters": "(long blockId)", "modifiers": "@Override public", "return": "BlockMeta", "signature": "BlockMeta getVolatileBlockMeta(long blockId)", "full_signature": "@Override public BlockMeta getVolatileBlockMeta(long blockId)", "class_method_signature": "TieredBlockStore.getVolatileBlockMeta(long blockId)", "testcase": false, "constructor": false}, {"identifier": "getBlockMeta", "parameters": "(long sessionId, long blockId, long lockId)", "modifiers": "@Override public", "return": "BlockMeta", "signature": "BlockMeta getBlockMeta(long sessionId, long blockId, long lockId)", "full_signature": "@Override public BlockMeta getBlockMeta(long sessionId, long blockId, long lockId)", "class_method_signature": "TieredBlockStore.getBlockMeta(long sessionId, long blockId, long lockId)", "testcase": false, "constructor": false}, {"identifier": "getTempBlockMeta", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "TempBlockMeta", "signature": "TempBlockMeta getTempBlockMeta(long sessionId, long blockId)", "full_signature": "@Override public TempBlockMeta getTempBlockMeta(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.getTempBlockMeta(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "commitBlock", "parameters": "(long sessionId, long blockId, boolean pinOnCreate)", "modifiers": "@Override public", "return": "void", "signature": "void commitBlock(long sessionId, long blockId, boolean pinOnCreate)", "full_signature": "@Override public void commitBlock(long sessionId, long blockId, boolean pinOnCreate)", "class_method_signature": "TieredBlockStore.commitBlock(long sessionId, long blockId, boolean pinOnCreate)", "testcase": false, "constructor": false}, {"identifier": "commitBlockLocked", "parameters": "(long sessionId, long blockId, boolean pinOnCreate)", "modifiers": "@Override public", "return": "long", "signature": "long commitBlockLocked(long sessionId, long blockId, boolean pinOnCreate)", "full_signature": "@Override public long commitBlockLocked(long sessionId, long blockId, boolean pinOnCreate)", "class_method_signature": "TieredBlockStore.commitBlockLocked(long sessionId, long blockId, boolean pinOnCreate)", "testcase": false, "constructor": false}, {"identifier": "abortBlock", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "void", "signature": "void abortBlock(long sessionId, long blockId)", "full_signature": "@Override public void abortBlock(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.abortBlock(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "requestSpace", "parameters": "(long sessionId, long blockId, long additionalBytes)", "modifiers": "@Override public", "return": "void", "signature": "void requestSpace(long sessionId, long blockId, long additionalBytes)", "full_signature": "@Override public void requestSpace(long sessionId, long blockId, long additionalBytes)", "class_method_signature": "TieredBlockStore.requestSpace(long sessionId, long blockId, long additionalBytes)", "testcase": false, "constructor": false}, {"identifier": "moveBlock", "parameters": "(long sessionId, long blockId, AllocateOptions moveOptions)", "modifiers": "@Override public", "return": "void", "signature": "void moveBlock(long sessionId, long blockId, AllocateOptions moveOptions)", "full_signature": "@Override public void moveBlock(long sessionId, long blockId, AllocateOptions moveOptions)", "class_method_signature": "TieredBlockStore.moveBlock(long sessionId, long blockId, AllocateOptions moveOptions)", "testcase": false, "constructor": false}, {"identifier": "moveBlock", "parameters": "(long sessionId, long blockId, BlockStoreLocation oldLocation,\n      AllocateOptions moveOptions)", "modifiers": "@Override public", "return": "void", "signature": "void moveBlock(long sessionId, long blockId, BlockStoreLocation oldLocation,\n      AllocateOptions moveOptions)", "full_signature": "@Override public void moveBlock(long sessionId, long blockId, BlockStoreLocation oldLocation,\n      AllocateOptions moveOptions)", "class_method_signature": "TieredBlockStore.moveBlock(long sessionId, long blockId, BlockStoreLocation oldLocation,\n      AllocateOptions moveOptions)", "testcase": false, "constructor": false}, {"identifier": "removeBlock", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "void", "signature": "void removeBlock(long sessionId, long blockId)", "full_signature": "@Override public void removeBlock(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.removeBlock(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "removeBlock", "parameters": "(long sessionId, long blockId, BlockStoreLocation location)", "modifiers": "@Override public", "return": "void", "signature": "void removeBlock(long sessionId, long blockId, BlockStoreLocation location)", "full_signature": "@Override public void removeBlock(long sessionId, long blockId, BlockStoreLocation location)", "class_method_signature": "TieredBlockStore.removeBlock(long sessionId, long blockId, BlockStoreLocation location)", "testcase": false, "constructor": false}, {"identifier": "accessBlock", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "void", "signature": "void accessBlock(long sessionId, long blockId)", "full_signature": "@Override public void accessBlock(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.accessBlock(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "freeSpace", "parameters": "(long sessionId, long minContiguousBytes,\n      long minAvailableBytes, BlockStoreLocation location)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void freeSpace(long sessionId, long minContiguousBytes,\n      long minAvailableBytes, BlockStoreLocation location)", "full_signature": "@Override public synchronized void freeSpace(long sessionId, long minContiguousBytes,\n      long minAvailableBytes, BlockStoreLocation location)", "class_method_signature": "TieredBlockStore.freeSpace(long sessionId, long minContiguousBytes,\n      long minAvailableBytes, BlockStoreLocation location)", "testcase": false, "constructor": false}, {"identifier": "cleanupSession", "parameters": "(long sessionId)", "modifiers": "@Override public", "return": "void", "signature": "void cleanupSession(long sessionId)", "full_signature": "@Override public void cleanupSession(long sessionId)", "class_method_signature": "TieredBlockStore.cleanupSession(long sessionId)", "testcase": false, "constructor": false}, {"identifier": "hasBlockMeta", "parameters": "(long blockId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasBlockMeta(long blockId)", "full_signature": "@Override public boolean hasBlockMeta(long blockId)", "class_method_signature": "TieredBlockStore.hasBlockMeta(long blockId)", "testcase": false, "constructor": false}, {"identifier": "getBlockStoreMeta", "parameters": "()", "modifiers": "@Override public", "return": "BlockStoreMeta", "signature": "BlockStoreMeta getBlockStoreMeta()", "full_signature": "@Override public BlockStoreMeta getBlockStoreMeta()", "class_method_signature": "TieredBlockStore.getBlockStoreMeta()", "testcase": false, "constructor": false}, {"identifier": "getBlockStoreMetaFull", "parameters": "()", "modifiers": "@Override public", "return": "BlockStoreMeta", "signature": "BlockStoreMeta getBlockStoreMetaFull()", "full_signature": "@Override public BlockStoreMeta getBlockStoreMetaFull()", "class_method_signature": "TieredBlockStore.getBlockStoreMetaFull()", "testcase": false, "constructor": false}, {"identifier": "registerBlockStoreEventListener", "parameters": "(BlockStoreEventListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void registerBlockStoreEventListener(BlockStoreEventListener listener)", "full_signature": "@Override public void registerBlockStoreEventListener(BlockStoreEventListener listener)", "class_method_signature": "TieredBlockStore.registerBlockStoreEventListener(BlockStoreEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "checkTempBlockIdAvailable", "parameters": "(long blockId)", "modifiers": "private", "return": "void", "signature": "void checkTempBlockIdAvailable(long blockId)", "full_signature": "private void checkTempBlockIdAvailable(long blockId)", "class_method_signature": "TieredBlockStore.checkTempBlockIdAvailable(long blockId)", "testcase": false, "constructor": false}, {"identifier": "checkTempBlockOwnedBySession", "parameters": "(long sessionId, long blockId)", "modifiers": "private", "return": "void", "signature": "void checkTempBlockOwnedBySession(long sessionId, long blockId)", "full_signature": "private void checkTempBlockOwnedBySession(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.checkTempBlockOwnedBySession(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "abortBlockInternal", "parameters": "(long sessionId, long blockId)", "modifiers": "private", "return": "void", "signature": "void abortBlockInternal(long sessionId, long blockId)", "full_signature": "private void abortBlockInternal(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.abortBlockInternal(long sessionId, long blockId)", "testcase": false, "constructor": false}, {"identifier": "commitBlockInternal", "parameters": "(long sessionId, long blockId, boolean pinOnCreate)", "modifiers": "private", "return": "BlockStoreLocation", "signature": "BlockStoreLocation commitBlockInternal(long sessionId, long blockId, boolean pinOnCreate)", "full_signature": "private BlockStoreLocation commitBlockInternal(long sessionId, long blockId, boolean pinOnCreate)", "class_method_signature": "TieredBlockStore.commitBlockInternal(long sessionId, long blockId, boolean pinOnCreate)", "testcase": false, "constructor": false}, {"identifier": "allocateSpace", "parameters": "(long sessionId, AllocateOptions options)", "modifiers": "private", "return": "StorageDirView", "signature": "StorageDirView allocateSpace(long sessionId, AllocateOptions options)", "full_signature": "private StorageDirView allocateSpace(long sessionId, AllocateOptions options)", "class_method_signature": "TieredBlockStore.allocateSpace(long sessionId, AllocateOptions options)", "testcase": false, "constructor": false}, {"identifier": "createBlockMetaInternal", "parameters": "(long sessionId, long blockId, boolean newBlock,\n      AllocateOptions options)", "modifiers": "private", "return": "TempBlockMeta", "signature": "TempBlockMeta createBlockMetaInternal(long sessionId, long blockId, boolean newBlock,\n      AllocateOptions options)", "full_signature": "private TempBlockMeta createBlockMetaInternal(long sessionId, long blockId, boolean newBlock,\n      AllocateOptions options)", "class_method_signature": "TieredBlockStore.createBlockMetaInternal(long sessionId, long blockId, boolean newBlock,\n      AllocateOptions options)", "testcase": false, "constructor": false}, {"identifier": "freeSpaceInternal", "parameters": "(long sessionId, long minContiguousBytes, long minAvailableBytes,\n      BlockStoreLocation location)", "modifiers": "private", "return": "void", "signature": "void freeSpaceInternal(long sessionId, long minContiguousBytes, long minAvailableBytes,\n      BlockStoreLocation location)", "full_signature": "private void freeSpaceInternal(long sessionId, long minContiguousBytes, long minAvailableBytes,\n      BlockStoreLocation location)", "class_method_signature": "TieredBlockStore.freeSpaceInternal(long sessionId, long minContiguousBytes, long minAvailableBytes,\n      BlockStoreLocation location)", "testcase": false, "constructor": false}, {"identifier": "getUpdatedView", "parameters": "()", "modifiers": "private", "return": "BlockMetadataEvictorView", "signature": "BlockMetadataEvictorView getUpdatedView()", "full_signature": "private BlockMetadataEvictorView getUpdatedView()", "class_method_signature": "TieredBlockStore.getUpdatedView()", "testcase": false, "constructor": false}, {"identifier": "moveBlockInternal", "parameters": "(long sessionId, long blockId,\n      BlockStoreLocation oldLocation, AllocateOptions moveOptions)", "modifiers": "private", "return": "MoveBlockResult", "signature": "MoveBlockResult moveBlockInternal(long sessionId, long blockId,\n      BlockStoreLocation oldLocation, AllocateOptions moveOptions)", "full_signature": "private MoveBlockResult moveBlockInternal(long sessionId, long blockId,\n      BlockStoreLocation oldLocation, AllocateOptions moveOptions)", "class_method_signature": "TieredBlockStore.moveBlockInternal(long sessionId, long blockId,\n      BlockStoreLocation oldLocation, AllocateOptions moveOptions)", "testcase": false, "constructor": false}, {"identifier": "removeBlockInternal", "parameters": "(BlockMeta blockMeta)", "modifiers": "private", "return": "void", "signature": "void removeBlockInternal(BlockMeta blockMeta)", "full_signature": "private void removeBlockInternal(BlockMeta blockMeta)", "class_method_signature": "TieredBlockStore.removeBlockInternal(BlockMeta blockMeta)", "testcase": false, "constructor": false}, {"identifier": "createBlockFile", "parameters": "(String blockPath)", "modifiers": "private static", "return": "void", "signature": "void createBlockFile(String blockPath)", "full_signature": "private static void createBlockFile(String blockPath)", "class_method_signature": "TieredBlockStore.createBlockFile(String blockPath)", "testcase": false, "constructor": false}, {"identifier": "updatePinnedInodes", "parameters": "(Set<Long> inodes)", "modifiers": "@Override public", "return": "void", "signature": "void updatePinnedInodes(Set<Long> inodes)", "full_signature": "@Override public void updatePinnedInodes(Set<Long> inodes)", "class_method_signature": "TieredBlockStore.updatePinnedInodes(Set<Long> inodes)", "testcase": false, "constructor": false}, {"identifier": "addToPinnedInodes", "parameters": "(Long inode)", "modifiers": "private", "return": "void", "signature": "void addToPinnedInodes(Long inode)", "full_signature": "private void addToPinnedInodes(Long inode)", "class_method_signature": "TieredBlockStore.addToPinnedInodes(Long inode)", "testcase": false, "constructor": false}, {"identifier": "checkStorage", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkStorage()", "full_signature": "@Override public boolean checkStorage()", "class_method_signature": "TieredBlockStore.checkStorage()", "testcase": false, "constructor": false}, {"identifier": "removeDir", "parameters": "(StorageDir dir)", "modifiers": "public", "return": "void", "signature": "void removeDir(StorageDir dir)", "full_signature": "public void removeDir(StorageDir dir)", "class_method_signature": "TieredBlockStore.removeDir(StorageDir dir)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TieredBlockStore.close()", "testcase": false, "constructor": false}], "file": "core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java"}, "focal_method": {"identifier": "removeBlock", "parameters": "(long sessionId, long blockId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void removeBlock(long sessionId, long blockId)\n      throws InvalidWorkerStateException, BlockDoesNotExistException, IOException {\n    removeBlock(sessionId, blockId, BlockStoreLocation.anyTier());\n  }", "signature": "void removeBlock(long sessionId, long blockId)", "full_signature": "@Override public void removeBlock(long sessionId, long blockId)", "class_method_signature": "TieredBlockStore.removeBlock(long sessionId, long blockId)", "testcase": false, "constructor": false, "invocations": ["removeBlock", "anyTier"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}