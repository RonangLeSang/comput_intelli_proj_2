{"test_class": {"identifier": "TieredIdentityFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder mFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mFolder = new TemporaryFolder()", "var_name": "mFolder"}, {"original_string": "@Rule\n  public ExpectedException mThrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "mThrown = ExpectedException.none()", "var_name": "mThrown"}, {"original_string": "private InstancedConfiguration mConfiguration;", "modifier": "private", "type": "InstancedConfiguration", "declarator": "mConfiguration", "var_name": "mConfiguration"}], "file": "core/common/src/test/java/alluxio/network/TieredIdentityFactoryTest.java"}, "test_case": {"identifier": "overrideScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void overrideScript() throws Exception {\n    String scriptPath = setupScript(\"node=myhost,rack=myrack,custom=mycustom\", mFolder.newFile());\n    try (Closeable c = new ConfigurationRule(ImmutableMap.of(\n        Template.LOCALITY_TIER.format(\"node\"), \"overridden\",\n        PropertyKey.LOCALITY_ORDER, \"node,rack,custom\",\n        PropertyKey.LOCALITY_SCRIPT, scriptPath), mConfiguration).toResource()) {\n      TieredIdentity identity = TieredIdentityFactory.create(mConfiguration);\n      TieredIdentity expected = new TieredIdentity(Arrays.asList(\n          new LocalityTier(\"node\", \"overridden\"),\n          new LocalityTier(\"rack\", \"myrack\"),\n          new LocalityTier(\"custom\", \"mycustom\")));\n      assertEquals(expected, identity);\n    }\n  }", "signature": "void overrideScript()", "full_signature": "@Test public void overrideScript()", "class_method_signature": "TieredIdentityFactoryTest.overrideScript()", "testcase": true, "constructor": false, "invocations": ["setupScript", "newFile", "toResource", "of", "format", "create", "asList", "assertEquals"]}, "focal_class": {"identifier": "TieredIdentityFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TieredIdentityFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TieredIdentityFactory.class)", "var_name": "LOG"}, {"original_string": "private static final Object LOCK = new Object();", "modifier": "private static final", "type": "Object", "declarator": "LOCK = new Object()", "var_name": "LOCK"}, {"original_string": "@GuardedBy(\"LOCK\")\n  private static volatile TieredIdentity sInstance = null;", "modifier": "@GuardedBy(\"LOCK\")\n  private static volatile", "type": "TieredIdentity", "declarator": "sInstance = null", "var_name": "sInstance"}], "methods": [{"identifier": "localIdentity", "parameters": "(AlluxioConfiguration conf)", "modifiers": "public static", "return": "TieredIdentity", "signature": "TieredIdentity localIdentity(AlluxioConfiguration conf)", "full_signature": "public static TieredIdentity localIdentity(AlluxioConfiguration conf)", "class_method_signature": "TieredIdentityFactory.localIdentity(AlluxioConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(AlluxioConfiguration conf)", "modifiers": "@VisibleForTesting static", "return": "TieredIdentity", "signature": "TieredIdentity create(AlluxioConfiguration conf)", "full_signature": "@VisibleForTesting static TieredIdentity create(AlluxioConfiguration conf)", "class_method_signature": "TieredIdentityFactory.create(AlluxioConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "fromScript", "parameters": "(AlluxioConfiguration conf)", "modifiers": "@Nullable private static", "return": "TieredIdentity", "signature": "TieredIdentity fromScript(AlluxioConfiguration conf)", "full_signature": "@Nullable private static TieredIdentity fromScript(AlluxioConfiguration conf)", "class_method_signature": "TieredIdentityFactory.fromScript(AlluxioConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(String identityString, AlluxioConfiguration conf)", "modifiers": "public static", "return": "TieredIdentity", "signature": "TieredIdentity fromString(String identityString, AlluxioConfiguration conf)", "full_signature": "public static TieredIdentity fromString(String identityString, AlluxioConfiguration conf)", "class_method_signature": "TieredIdentityFactory.fromString(String identityString, AlluxioConfiguration conf)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/alluxio/network/TieredIdentityFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(AlluxioConfiguration conf)", "modifiers": "@VisibleForTesting static", "return": "TieredIdentity", "body": "@VisibleForTesting\n  static TieredIdentity create(AlluxioConfiguration conf) {\n    TieredIdentity scriptIdentity = fromScript(conf);\n\n    List<LocalityTier> tiers = new ArrayList<>();\n    List<String> orderedTierNames = conf.getList(PropertyKey.LOCALITY_ORDER, \",\");\n    for (int i = 0; i < orderedTierNames.size(); i++) {\n      String tierName = orderedTierNames.get(i);\n      String value = null;\n      if (scriptIdentity != null) {\n        LocalityTier scriptTier = scriptIdentity.getTier(i);\n        Preconditions.checkState(scriptTier.getTierName().equals(tierName));\n        value = scriptTier.getValue();\n      }\n      // Explicit configuration overrides script output.\n      if (conf.isSet(Template.LOCALITY_TIER.format(tierName))) {\n        value = conf.get(Template.LOCALITY_TIER.format(tierName));\n      }\n      tiers.add(new LocalityTier(tierName, value));\n    }\n    // If the user doesn't specify the value of the \"node\" tier, we fill in a sensible default.\n    if (tiers.size() > 0 && tiers.get(0).getTierName().equals(Constants.LOCALITY_NODE)\n        && tiers.get(0).getValue() == null) {\n      String name = NetworkAddressUtils.getLocalNodeName(conf);\n      tiers.set(0, new LocalityTier(Constants.LOCALITY_NODE, name));\n    }\n    return new TieredIdentity(tiers);\n  }", "signature": "TieredIdentity create(AlluxioConfiguration conf)", "full_signature": "@VisibleForTesting static TieredIdentity create(AlluxioConfiguration conf)", "class_method_signature": "TieredIdentityFactory.create(AlluxioConfiguration conf)", "testcase": false, "constructor": false, "invocations": ["fromScript", "getList", "size", "get", "getTier", "checkState", "equals", "getTierName", "getValue", "isSet", "format", "get", "format", "add", "size", "equals", "getTierName", "get", "getValue", "get", "getLocalNodeName", "set"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}