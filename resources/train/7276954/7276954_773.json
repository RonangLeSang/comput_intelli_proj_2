{"test_class": {"identifier": "JobMasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int TEST_JOB_MASTER_JOB_CAPACITY = 100;", "modifier": "private static final", "type": "int", "declarator": "TEST_JOB_MASTER_JOB_CAPACITY = 100", "var_name": "TEST_JOB_MASTER_JOB_CAPACITY"}, {"original_string": "private JobMaster mJobMaster;", "modifier": "private", "type": "JobMaster", "declarator": "mJobMaster", "var_name": "mJobMaster"}, {"original_string": "@Rule\n  public TemporaryFolder mTestFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mTestFolder = new TemporaryFolder()", "var_name": "mTestFolder"}], "file": "job/server/src/test/java/alluxio/master/job/JobMasterTest.java"}, "test_case": {"identifier": "cancelNonExistingJob", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void cancelNonExistingJob() {\n    try {\n      mJobMaster.cancel(1);\n      Assert.fail(\"cannot cancel non-existing job\");\n    } catch (JobDoesNotExistException e) {\n      Assert.assertEquals(ExceptionMessage.JOB_DOES_NOT_EXIST.getMessage(1), e.getMessage());\n    }\n  }", "signature": "void cancelNonExistingJob()", "full_signature": "@Test public void cancelNonExistingJob()", "class_method_signature": "JobMasterTest.cancelNonExistingJob()", "testcase": true, "constructor": false, "invocations": ["cancel", "fail", "assertEquals", "getMessage", "getMessage"]}, "focal_class": {"identifier": "JobMaster", "superclass": "extends AbstractMaster", "interfaces": "implements NoopJournaled", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JobMaster.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JobMaster.class)", "var_name": "LOG"}, {"original_string": "private final IndexDefinition<MasterWorkerInfo, Long> mIdIndex =\n      new IndexDefinition<MasterWorkerInfo, Long>(true) {\n        @Override\n        public Long getFieldValue(MasterWorkerInfo o) {\n          return o.getId();\n        }\n      };", "modifier": "private final", "type": "IndexDefinition<MasterWorkerInfo, Long>", "declarator": "mIdIndex =\n      new IndexDefinition<MasterWorkerInfo, Long>(true) {\n        @Override\n        public Long getFieldValue(MasterWorkerInfo o) {\n          return o.getId();\n        }\n      }", "var_name": "mIdIndex"}, {"original_string": "private final IndexDefinition<MasterWorkerInfo, WorkerNetAddress> mAddressIndex =\n      new IndexDefinition<MasterWorkerInfo, WorkerNetAddress>(true) {\n        @Override\n        public WorkerNetAddress getFieldValue(MasterWorkerInfo o) {\n          return o.getWorkerAddress();\n        }\n      };", "modifier": "private final", "type": "IndexDefinition<MasterWorkerInfo, WorkerNetAddress>", "declarator": "mAddressIndex =\n      new IndexDefinition<MasterWorkerInfo, WorkerNetAddress>(true) {\n        @Override\n        public WorkerNetAddress getFieldValue(MasterWorkerInfo o) {\n          return o.getWorkerAddress();\n        }\n      }", "var_name": "mAddressIndex"}, {"original_string": "private final JobServerContext mJobServerContext;", "modifier": "private final", "type": "JobServerContext", "declarator": "mJobServerContext", "var_name": "mJobServerContext"}, {"original_string": "@GuardedBy(\"mWorkerRWLock\")\n  private final IndexedSet<MasterWorkerInfo> mWorkers = new IndexedSet<>(mIdIndex, mAddressIndex);", "modifier": "@GuardedBy(\"mWorkerRWLock\")\n  private final", "type": "IndexedSet<MasterWorkerInfo>", "declarator": "mWorkers = new IndexedSet<>(mIdIndex, mAddressIndex)", "var_name": "mWorkers"}, {"original_string": "private final ConcurrentHashMap<Long, JobWorkerHealth> mWorkerHealth;", "modifier": "private final", "type": "ConcurrentHashMap<Long, JobWorkerHealth>", "declarator": "mWorkerHealth", "var_name": "mWorkerHealth"}, {"original_string": "private final ReentrantReadWriteLock mWorkerRWLock = new ReentrantReadWriteLock(true);", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "mWorkerRWLock = new ReentrantReadWriteLock(true)", "var_name": "mWorkerRWLock"}, {"original_string": "private final AtomicLong mNextWorkerId = new AtomicLong(CommonUtils.getCurrentMs());", "modifier": "private final", "type": "AtomicLong", "declarator": "mNextWorkerId = new AtomicLong(CommonUtils.getCurrentMs())", "var_name": "mNextWorkerId"}, {"original_string": "private final CommandManager mCommandManager;", "modifier": "private final", "type": "CommandManager", "declarator": "mCommandManager", "var_name": "mCommandManager"}, {"original_string": "private final PlanTracker mPlanTracker;", "modifier": "private final", "type": "PlanTracker", "declarator": "mPlanTracker", "var_name": "mPlanTracker"}, {"original_string": "private final WorkflowTracker mWorkflowTracker;", "modifier": "private final", "type": "WorkflowTracker", "declarator": "mWorkflowTracker", "var_name": "mWorkflowTracker"}, {"original_string": "private final JobIdGenerator mJobIdGenerator;", "modifier": "private final", "type": "JobIdGenerator", "declarator": "mJobIdGenerator", "var_name": "mJobIdGenerator"}], "methods": [{"identifier": "JobMaster", "parameters": "(MasterContext masterContext, FileSystem filesystem,\n      FileSystemContext fsContext, UfsManager ufsManager)", "modifiers": "public", "return": "", "signature": " JobMaster(MasterContext masterContext, FileSystem filesystem,\n      FileSystemContext fsContext, UfsManager ufsManager)", "full_signature": "public  JobMaster(MasterContext masterContext, FileSystem filesystem,\n      FileSystemContext fsContext, UfsManager ufsManager)", "class_method_signature": "JobMaster.JobMaster(MasterContext masterContext, FileSystem filesystem,\n      FileSystemContext fsContext, UfsManager ufsManager)", "testcase": false, "constructor": true}, {"identifier": "getNewJobId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNewJobId()", "full_signature": "public long getNewJobId()", "class_method_signature": "JobMaster.getNewJobId()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(Boolean isLeader)", "modifiers": "@Override public", "return": "void", "signature": "void start(Boolean isLeader)", "full_signature": "@Override public void start(Boolean isLeader)", "class_method_signature": "JobMaster.start(Boolean isLeader)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "@Override public", "return": "Map<ServiceType, GrpcService>", "signature": "Map<ServiceType, GrpcService> getServices()", "full_signature": "@Override public Map<ServiceType, GrpcService> getServices()", "class_method_signature": "JobMaster.getServices()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JobMaster.getName()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(JobConfig jobConfig)", "modifiers": "public synchronized", "return": "long", "signature": "long run(JobConfig jobConfig)", "full_signature": "public synchronized long run(JobConfig jobConfig)", "class_method_signature": "JobMaster.run(JobConfig jobConfig)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(JobConfig jobConfig, long jobId)", "modifiers": "public synchronized", "return": "void", "signature": "void run(JobConfig jobConfig, long jobId)", "full_signature": "public synchronized void run(JobConfig jobConfig, long jobId)", "class_method_signature": "JobMaster.run(JobConfig jobConfig, long jobId)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(long jobId)", "modifiers": "public", "return": "void", "signature": "void cancel(long jobId)", "full_signature": "public void cancel(long jobId)", "class_method_signature": "JobMaster.cancel(long jobId)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> list()", "full_signature": "public List<Long> list()", "class_method_signature": "JobMaster.list()", "testcase": false, "constructor": false}, {"identifier": "listDetailed", "parameters": "()", "modifiers": "public", "return": "List<JobInfo>", "signature": "List<JobInfo> listDetailed()", "full_signature": "public List<JobInfo> listDetailed()", "class_method_signature": "JobMaster.listDetailed()", "testcase": false, "constructor": false}, {"identifier": "failed", "parameters": "(int limit, long before, long after)", "modifiers": "public", "return": "List<JobInfo>", "signature": "List<JobInfo> failed(int limit, long before, long after)", "full_signature": "public List<JobInfo> failed(int limit, long before, long after)", "class_method_signature": "JobMaster.failed(int limit, long before, long after)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(long jobId)", "modifiers": "public", "return": "JobInfo", "signature": "JobInfo getStatus(long jobId)", "full_signature": "public JobInfo getStatus(long jobId)", "class_method_signature": "JobMaster.getStatus(long jobId)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(long jobId, boolean verbose)", "modifiers": "public", "return": "JobInfo", "signature": "JobInfo getStatus(long jobId, boolean verbose)", "full_signature": "public JobInfo getStatus(long jobId, boolean verbose)", "class_method_signature": "JobMaster.getStatus(long jobId, boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "getSummary", "parameters": "()", "modifiers": "public", "return": "alluxio.job.wire.JobServiceSummary", "signature": "alluxio.job.wire.JobServiceSummary getSummary()", "full_signature": "public alluxio.job.wire.JobServiceSummary getSummary()", "class_method_signature": "JobMaster.getSummary()", "testcase": false, "constructor": false}, {"identifier": "getAllWorkerHealth", "parameters": "()", "modifiers": "public", "return": "List<JobWorkerHealth>", "signature": "List<JobWorkerHealth> getAllWorkerHealth()", "full_signature": "public List<JobWorkerHealth> getAllWorkerHealth()", "class_method_signature": "JobMaster.getAllWorkerHealth()", "testcase": false, "constructor": false}, {"identifier": "registerWorker", "parameters": "(WorkerNetAddress workerNetAddress)", "modifiers": "public", "return": "long", "signature": "long registerWorker(WorkerNetAddress workerNetAddress)", "full_signature": "public long registerWorker(WorkerNetAddress workerNetAddress)", "class_method_signature": "JobMaster.registerWorker(WorkerNetAddress workerNetAddress)", "testcase": false, "constructor": false}, {"identifier": "getWorkerInfoList", "parameters": "()", "modifiers": "public", "return": "List<WorkerInfo>", "signature": "List<WorkerInfo> getWorkerInfoList()", "full_signature": "public List<WorkerInfo> getWorkerInfoList()", "class_method_signature": "JobMaster.getWorkerInfoList()", "testcase": false, "constructor": false}, {"identifier": "setTaskPoolSize", "parameters": "(int taskPoolSize)", "modifiers": "public", "return": "void", "signature": "void setTaskPoolSize(int taskPoolSize)", "full_signature": "public void setTaskPoolSize(int taskPoolSize)", "class_method_signature": "JobMaster.setTaskPoolSize(int taskPoolSize)", "testcase": false, "constructor": false}, {"identifier": "workerHeartbeat", "parameters": "(JobWorkerHealth jobWorkerHealth,\n      List<TaskInfo> taskInfoList)", "modifiers": "public", "return": "List<JobCommand>", "signature": "List<JobCommand> workerHeartbeat(JobWorkerHealth jobWorkerHealth,\n      List<TaskInfo> taskInfoList)", "full_signature": "public List<JobCommand> workerHeartbeat(JobWorkerHealth jobWorkerHealth,\n      List<TaskInfo> taskInfoList)", "class_method_signature": "JobMaster.workerHeartbeat(JobWorkerHealth jobWorkerHealth,\n      List<TaskInfo> taskInfoList)", "testcase": false, "constructor": false}], "file": "job/server/src/main/java/alluxio/master/job/JobMaster.java"}, "focal_method": {"identifier": "cancel", "parameters": "(long jobId)", "modifiers": "public", "return": "void", "body": "public void cancel(long jobId) throws JobDoesNotExistException {\n    PlanCoordinator planCoordinator = mPlanTracker.getCoordinator(jobId);\n    if (planCoordinator == null) {\n      if (!mWorkflowTracker.cancel(jobId)) {\n        throw new JobDoesNotExistException(ExceptionMessage.JOB_DOES_NOT_EXIST.getMessage(jobId));\n      }\n      return;\n    }\n    planCoordinator.cancel();\n  }", "signature": "void cancel(long jobId)", "full_signature": "public void cancel(long jobId)", "class_method_signature": "JobMaster.cancel(long jobId)", "testcase": false, "constructor": false, "invocations": ["getCoordinator", "cancel", "getMessage", "cancel"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}