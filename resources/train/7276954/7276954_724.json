{"test_class": {"identifier": "ReplicationCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_OWNER = \"user1\";", "modifier": "private static final", "type": "String", "declarator": "TEST_OWNER = \"user1\"", "var_name": "TEST_OWNER"}, {"original_string": "private static final String TEST_GROUP = \"\";", "modifier": "private static final", "type": "String", "declarator": "TEST_GROUP = \"\"", "var_name": "TEST_GROUP"}, {"original_string": "private static final Mode TEST_MODE = new Mode((short) 0755);", "modifier": "private static final", "type": "Mode", "declarator": "TEST_MODE = new Mode((short) 0755)", "var_name": "TEST_MODE"}, {"original_string": "private static final AlluxioURI TEST_FILE_1 = new AlluxioURI(\"/test1\");", "modifier": "private static final", "type": "AlluxioURI", "declarator": "TEST_FILE_1 = new AlluxioURI(\"/test1\")", "var_name": "TEST_FILE_1"}, {"original_string": "private static final AlluxioURI TEST_FILE_2 = new AlluxioURI(\"/test2\");", "modifier": "private static final", "type": "AlluxioURI", "declarator": "TEST_FILE_2 = new AlluxioURI(\"/test2\")", "var_name": "TEST_FILE_2"}, {"original_string": "private static final List<Long> NO_BLOCKS = ImmutableList.of();", "modifier": "private static final", "type": "List<Long>", "declarator": "NO_BLOCKS = ImmutableList.of()", "var_name": "NO_BLOCKS"}, {"original_string": "private static final List<Metric> NO_METRICS = ImmutableList.of();", "modifier": "private static final", "type": "List<Metric>", "declarator": "NO_METRICS = ImmutableList.of()", "var_name": "NO_METRICS"}, {"original_string": "private static final Map<Block.BlockLocation, List<Long>> NO_BLOCKS_ON_LOCATION\n      = ImmutableMap.of();", "modifier": "private static final", "type": "Map<Block.BlockLocation, List<Long>>", "declarator": "NO_BLOCKS_ON_LOCATION\n      = ImmutableMap.of()", "var_name": "NO_BLOCKS_ON_LOCATION"}, {"original_string": "private static final Map<String, StorageList> NO_LOST_STORAGE = ImmutableMap.of();", "modifier": "private static final", "type": "Map<String, StorageList>", "declarator": "NO_LOST_STORAGE = ImmutableMap.of()", "var_name": "NO_LOST_STORAGE"}, {"original_string": "private static final Map EMPTY = ImmutableMap.of();", "modifier": "private static final", "type": "Map", "declarator": "EMPTY = ImmutableMap.of()", "var_name": "EMPTY"}, {"original_string": "private InodeStore mInodeStore;", "modifier": "private", "type": "InodeStore", "declarator": "mInodeStore", "var_name": "mInodeStore"}, {"original_string": "private InodeTree mInodeTree;", "modifier": "private", "type": "InodeTree", "declarator": "mInodeTree", "var_name": "mInodeTree"}, {"original_string": "private BlockMaster mBlockMaster;", "modifier": "private", "type": "BlockMaster", "declarator": "mBlockMaster", "var_name": "mBlockMaster"}, {"original_string": "private ReplicationChecker mReplicationChecker;", "modifier": "private", "type": "ReplicationChecker", "declarator": "mReplicationChecker", "var_name": "mReplicationChecker"}, {"original_string": "private MockHandler mMockReplicationHandler;", "modifier": "private", "type": "MockHandler", "declarator": "mMockReplicationHandler", "var_name": "mMockReplicationHandler"}, {"original_string": "private CreateFileContext mFileContext =\n      CreateFileContext.mergeFrom(CreateFilePOptions.newBuilder().setBlockSizeBytes(Constants.KB)\n          .setMode(TEST_MODE.toProto())).setOwner(TEST_OWNER).setGroup(TEST_GROUP);", "modifier": "private", "type": "CreateFileContext", "declarator": "mFileContext =\n      CreateFileContext.mergeFrom(CreateFilePOptions.newBuilder().setBlockSizeBytes(Constants.KB)\n          .setMode(TEST_MODE.toProto())).setOwner(TEST_OWNER).setGroup(TEST_GROUP)", "var_name": "mFileContext"}, {"original_string": "private Set<Long> mKnownWorkers = Sets.newHashSet();", "modifier": "private", "type": "Set<Long>", "declarator": "mKnownWorkers = Sets.newHashSet()", "var_name": "mKnownWorkers"}, {"original_string": "@Rule\n  public TemporaryFolder mTestFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mTestFolder = new TemporaryFolder()", "var_name": "mTestFolder"}], "file": "core/server/master/src/test/java/alluxio/master/file/replication/ReplicationCheckerTest.java"}, "test_case": {"identifier": "heartbeatFileOverReplicatedBy1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void heartbeatFileOverReplicatedBy1() throws Exception {\n    mFileContext.getOptions().setReplicationMax(1);\n    long blockId = createBlockHelper(TEST_FILE_1, mFileContext, \"\");\n    addBlockLocationHelper(blockId, 2);\n\n    mReplicationChecker.heartbeat();\n    Map<Long, Integer> expected = ImmutableMap.of(blockId, 1);\n    Assert.assertEquals(expected, mMockReplicationHandler.getEvictRequests());\n    Assert.assertEquals(EMPTY, mMockReplicationHandler.getReplicateRequests());\n  }", "signature": "void heartbeatFileOverReplicatedBy1()", "full_signature": "@Test public void heartbeatFileOverReplicatedBy1()", "class_method_signature": "ReplicationCheckerTest.heartbeatFileOverReplicatedBy1()", "testcase": true, "constructor": false, "invocations": ["setReplicationMax", "getOptions", "createBlockHelper", "addBlockLocationHelper", "heartbeat", "of", "assertEquals", "getEvictRequests", "assertEquals", "getReplicateRequests"]}, "focal_class": {"identifier": "ReplicationChecker", "superclass": "", "interfaces": "implements HeartbeatExecutor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ReplicationChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReplicationChecker.class)", "var_name": "LOG"}, {"original_string": "private static final Logger SAMPLING_LOG = new SamplingLogger(LOG, 10L * Constants.MINUTE_MS);", "modifier": "private static final", "type": "Logger", "declarator": "SAMPLING_LOG = new SamplingLogger(LOG, 10L * Constants.MINUTE_MS)", "var_name": "SAMPLING_LOG"}, {"original_string": "private static final long MAX_QUIET_PERIOD_SECONDS = 64;", "modifier": "private static final", "type": "long", "declarator": "MAX_QUIET_PERIOD_SECONDS = 64", "var_name": "MAX_QUIET_PERIOD_SECONDS"}, {"original_string": "private final InodeTree mInodeTree;", "modifier": "private final", "type": "InodeTree", "declarator": "mInodeTree", "var_name": "mInodeTree"}, {"original_string": "private final BlockMaster mBlockMaster;", "modifier": "private final", "type": "BlockMaster", "declarator": "mBlockMaster", "var_name": "mBlockMaster"}, {"original_string": "private final ReplicationHandler mReplicationHandler;", "modifier": "private final", "type": "ReplicationHandler", "declarator": "mReplicationHandler", "var_name": "mReplicationHandler"}, {"original_string": "private final SafeModeManager mSafeModeManager;", "modifier": "private final", "type": "SafeModeManager", "declarator": "mSafeModeManager", "var_name": "mSafeModeManager"}, {"original_string": "private long mQuietPeriodSeconds;", "modifier": "private", "type": "long", "declarator": "mQuietPeriodSeconds", "var_name": "mQuietPeriodSeconds"}], "methods": [{"identifier": "ReplicationChecker", "parameters": "(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, JobMasterClientPool jobMasterClientPool)", "modifiers": "public", "return": "", "signature": " ReplicationChecker(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, JobMasterClientPool jobMasterClientPool)", "full_signature": "public  ReplicationChecker(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, JobMasterClientPool jobMasterClientPool)", "class_method_signature": "ReplicationChecker.ReplicationChecker(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, JobMasterClientPool jobMasterClientPool)", "testcase": false, "constructor": true}, {"identifier": "ReplicationChecker", "parameters": "(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, ReplicationHandler replicationHandler)", "modifiers": "public", "return": "", "signature": " ReplicationChecker(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, ReplicationHandler replicationHandler)", "full_signature": "public  ReplicationChecker(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, ReplicationHandler replicationHandler)", "class_method_signature": "ReplicationChecker.ReplicationChecker(InodeTree inodeTree, BlockMaster blockMaster,\n      SafeModeManager safeModeManager, ReplicationHandler replicationHandler)", "testcase": false, "constructor": true}, {"identifier": "heartbeat", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void heartbeat()", "full_signature": "@Override public void heartbeat()", "class_method_signature": "ReplicationChecker.heartbeat()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ReplicationChecker.close()", "testcase": false, "constructor": false}, {"identifier": "findMisplacedBlock", "parameters": "(\n      InodeFile file, BlockInfo blockInfo)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> findMisplacedBlock(\n      InodeFile file, BlockInfo blockInfo)", "full_signature": "private Map<String, String> findMisplacedBlock(\n      InodeFile file, BlockInfo blockInfo)", "class_method_signature": "ReplicationChecker.findMisplacedBlock(\n      InodeFile file, BlockInfo blockInfo)", "testcase": false, "constructor": false}, {"identifier": "checkMisreplicated", "parameters": "(Set<Long> inodes, ReplicationHandler handler)", "modifiers": "private", "return": "void", "signature": "void checkMisreplicated(Set<Long> inodes, ReplicationHandler handler)", "full_signature": "private void checkMisreplicated(Set<Long> inodes, ReplicationHandler handler)", "class_method_signature": "ReplicationChecker.checkMisreplicated(Set<Long> inodes, ReplicationHandler handler)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Set<Long> inodes, ReplicationHandler handler, Mode mode)", "modifiers": "private", "return": "void", "signature": "void check(Set<Long> inodes, ReplicationHandler handler, Mode mode)", "full_signature": "private void check(Set<Long> inodes, ReplicationHandler handler, Mode mode)", "class_method_signature": "ReplicationChecker.check(Set<Long> inodes, ReplicationHandler handler, Mode mode)", "testcase": false, "constructor": false}], "file": "core/server/master/src/main/java/alluxio/master/file/replication/ReplicationChecker.java"}, "focal_method": {"identifier": "heartbeat", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void heartbeat() throws InterruptedException {\n    // skips replication in safe mode when not all workers are registered\n    if (mSafeModeManager.isInSafeMode()) {\n      return;\n    }\n\n    TimeUnit.SECONDS.sleep(mQuietPeriodSeconds);\n    Set<Long> inodes;\n\n    // Check the set of files that could possibly be under-replicated\n    inodes = mInodeTree.getPinIdSet();\n    check(inodes, mReplicationHandler, Mode.REPLICATE);\n\n    // Check the set of files that could possibly be over-replicated\n    inodes = mInodeTree.getReplicationLimitedFileIds();\n    check(inodes, mReplicationHandler, Mode.EVICT);\n\n    // Check the set of files that could possibly be mis-replicated\n    inodes = mInodeTree.getPinIdSet();\n    checkMisreplicated(inodes, mReplicationHandler);\n  }", "signature": "void heartbeat()", "full_signature": "@Override public void heartbeat()", "class_method_signature": "ReplicationChecker.heartbeat()", "testcase": false, "constructor": false, "invocations": ["isInSafeMode", "sleep", "getPinIdSet", "check", "getReplicationLimitedFileIds", "check", "getPinIdSet", "checkMisreplicated"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}