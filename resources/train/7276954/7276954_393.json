{"test_class": {"identifier": "DefaultMetaStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException mThrown = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "mThrown = ExpectedException.none()", "var_name": "mThrown"}, {"original_string": "private final PageId mPage = new PageId(\"1L\", 2L);", "modifier": "private final", "type": "PageId", "declarator": "mPage = new PageId(\"1L\", 2L)", "var_name": "mPage"}, {"original_string": "private final PageInfo mPageInfo = new PageInfo(mPage, 1024);", "modifier": "private final", "type": "PageInfo", "declarator": "mPageInfo = new PageInfo(mPage, 1024)", "var_name": "mPageInfo"}, {"original_string": "private InstancedConfiguration mConf = ConfigurationTestUtils.defaults();", "modifier": "private", "type": "InstancedConfiguration", "declarator": "mConf = ConfigurationTestUtils.defaults()", "var_name": "mConf"}, {"original_string": "private DefaultMetaStore mMetaStore;", "modifier": "private", "type": "DefaultMetaStore", "declarator": "mMetaStore", "var_name": "mMetaStore"}], "file": "core/client/fs/src/test/java/alluxio/client/file/cache/DefaultMetaStoreTest.java"}, "test_case": {"identifier": "getPageInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getPageInfo() throws Exception {\n    mMetaStore.addPage(mPage, mPageInfo);\n    Assert.assertEquals(mPageInfo, mMetaStore.getPageInfo(mPage));\n  }", "signature": "void getPageInfo()", "full_signature": "@Test public void getPageInfo()", "class_method_signature": "DefaultMetaStoreTest.getPageInfo()", "testcase": true, "constructor": false, "invocations": ["addPage", "assertEquals", "getPageInfo"]}, "focal_class": {"identifier": "DefaultMetaStore", "superclass": "", "interfaces": "implements MetaStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultMetaStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultMetaStore.class)", "var_name": "LOG"}, {"original_string": "private final Map<PageId, PageInfo> mPageMap = new HashMap<>();", "modifier": "private final", "type": "Map<PageId, PageInfo>", "declarator": "mPageMap = new HashMap<>()", "var_name": "mPageMap"}, {"original_string": "private final AtomicLong mBytes = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "mBytes = new AtomicLong(0)", "var_name": "mBytes"}, {"original_string": "private final AtomicLong mPages = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "mPages = new AtomicLong(0)", "var_name": "mPages"}, {"original_string": "private final CacheEvictor mEvictor;", "modifier": "private final", "type": "CacheEvictor", "declarator": "mEvictor", "var_name": "mEvictor"}], "methods": [{"identifier": "DefaultMetaStore", "parameters": "(CacheEvictor evictor)", "modifiers": "public", "return": "", "signature": " DefaultMetaStore(CacheEvictor evictor)", "full_signature": "public  DefaultMetaStore(CacheEvictor evictor)", "class_method_signature": "DefaultMetaStore.DefaultMetaStore(CacheEvictor evictor)", "testcase": false, "constructor": true}, {"identifier": "hasPage", "parameters": "(PageId pageId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPage(PageId pageId)", "full_signature": "@Override public boolean hasPage(PageId pageId)", "class_method_signature": "DefaultMetaStore.hasPage(PageId pageId)", "testcase": false, "constructor": false}, {"identifier": "addPage", "parameters": "(PageId pageId, PageInfo pageInfo)", "modifiers": "@Override public", "return": "void", "signature": "void addPage(PageId pageId, PageInfo pageInfo)", "full_signature": "@Override public void addPage(PageId pageId, PageInfo pageInfo)", "class_method_signature": "DefaultMetaStore.addPage(PageId pageId, PageInfo pageInfo)", "testcase": false, "constructor": false}, {"identifier": "getPageInfo", "parameters": "(PageId pageId)", "modifiers": "@Override public", "return": "PageInfo", "signature": "PageInfo getPageInfo(PageId pageId)", "full_signature": "@Override public PageInfo getPageInfo(PageId pageId)", "class_method_signature": "DefaultMetaStore.getPageInfo(PageId pageId)", "testcase": false, "constructor": false}, {"identifier": "removePage", "parameters": "(PageId pageId)", "modifiers": "@Override public", "return": "void", "signature": "void removePage(PageId pageId)", "full_signature": "@Override public void removePage(PageId pageId)", "class_method_signature": "DefaultMetaStore.removePage(PageId pageId)", "testcase": false, "constructor": false}, {"identifier": "bytes", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long bytes()", "full_signature": "@Override public long bytes()", "class_method_signature": "DefaultMetaStore.bytes()", "testcase": false, "constructor": false}, {"identifier": "pages", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long pages()", "full_signature": "@Override public long pages()", "class_method_signature": "DefaultMetaStore.pages()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "DefaultMetaStore.reset()", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "PageInfo", "signature": "PageInfo evict()", "full_signature": "@Override @Nullable public PageInfo evict()", "class_method_signature": "DefaultMetaStore.evict()", "testcase": false, "constructor": false}], "file": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java"}, "focal_method": {"identifier": "getPageInfo", "parameters": "(PageId pageId)", "modifiers": "@Override public", "return": "PageInfo", "body": "@Override\n  public PageInfo getPageInfo(PageId pageId) throws PageNotFoundException {\n    if (!mPageMap.containsKey(pageId)) {\n      throw new PageNotFoundException(String.format(\"Page %s could not be found\", pageId));\n    }\n    mEvictor.updateOnGet(pageId);\n    return mPageMap.get(pageId);\n  }", "signature": "PageInfo getPageInfo(PageId pageId)", "full_signature": "@Override public PageInfo getPageInfo(PageId pageId)", "class_method_signature": "DefaultMetaStore.getPageInfo(PageId pageId)", "testcase": false, "constructor": false, "invocations": ["containsKey", "format", "updateOnGet", "get"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}