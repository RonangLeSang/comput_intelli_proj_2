{"test_class": {"identifier": "AlluxioFuseFileSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_ROOT_PATH = \"/t/root\";", "modifier": "private static final", "type": "String", "declarator": "TEST_ROOT_PATH = \"/t/root\"", "var_name": "TEST_ROOT_PATH"}, {"original_string": "private static final AlluxioURI BASE_EXPECTED_URI = new AlluxioURI(TEST_ROOT_PATH);", "modifier": "private static final", "type": "AlluxioURI", "declarator": "BASE_EXPECTED_URI = new AlluxioURI(TEST_ROOT_PATH)", "var_name": "BASE_EXPECTED_URI"}, {"original_string": "private AlluxioFuseFileSystem mFuseFs;", "modifier": "private", "type": "AlluxioFuseFileSystem", "declarator": "mFuseFs", "var_name": "mFuseFs"}, {"original_string": "private FileSystem mFileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "mFileSystem", "var_name": "mFileSystem"}, {"original_string": "private FuseFileInfo mFileInfo;", "modifier": "private", "type": "FuseFileInfo", "declarator": "mFileInfo", "var_name": "mFileInfo"}, {"original_string": "private InstancedConfiguration mConf = ConfigurationTestUtils.defaults();", "modifier": "private", "type": "InstancedConfiguration", "declarator": "mConf = ConfigurationTestUtils.defaults()", "var_name": "mConf"}, {"original_string": "@Rule\n  public ConfigurationRule mConfiguration =\n      new ConfigurationRule(ImmutableMap.of(PropertyKey.FUSE_CACHED_PATHS_MAX, \"0\",\n          PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED, \"true\"), mConf);", "modifier": "@Rule\n  public", "type": "ConfigurationRule", "declarator": "mConfiguration =\n      new ConfigurationRule(ImmutableMap.of(PropertyKey.FUSE_CACHED_PATHS_MAX, \"0\",\n          PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED, \"true\"), mConf)", "var_name": "mConfiguration"}], "file": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java"}, "test_case": {"identifier": "rename", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void rename() throws Exception {\n    AlluxioURI oldPath = BASE_EXPECTED_URI.join(\"/old\");\n    AlluxioURI newPath = BASE_EXPECTED_URI.join(\"/new\");\n    doNothing().when(mFileSystem).rename(oldPath, newPath);\n    mFuseFs.rename(\"/old\", \"/new\");\n    verify(mFileSystem).rename(oldPath, newPath);\n  }", "signature": "void rename()", "full_signature": "@Test public void rename()", "class_method_signature": "AlluxioFuseFileSystemTest.rename()", "testcase": true, "constructor": false, "invocations": ["join", "join", "rename", "when", "doNothing", "rename", "rename", "verify"]}, "focal_class": {"identifier": "AlluxioFuseFileSystem", "superclass": "extends FuseStubFS", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AlluxioFuseFileSystem.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AlluxioFuseFileSystem.class)", "var_name": "LOG"}, {"original_string": "private static final int MAX_OPEN_FILES = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "MAX_OPEN_FILES = Integer.MAX_VALUE", "var_name": "MAX_OPEN_FILES"}, {"original_string": "private static final int MAX_OPEN_WAITTIME_MS = 5000;", "modifier": "private static final", "type": "int", "declarator": "MAX_OPEN_WAITTIME_MS = 5000", "var_name": "MAX_OPEN_WAITTIME_MS"}, {"original_string": "@VisibleForTesting\n  public static final int UNKNOWN_INODES = -1;", "modifier": "@VisibleForTesting\n  public static final", "type": "int", "declarator": "UNKNOWN_INODES = -1", "var_name": "UNKNOWN_INODES"}, {"original_string": "@VisibleForTesting\n  public static final int MAX_NAME_LENGTH = 255;", "modifier": "@VisibleForTesting\n  public static final", "type": "int", "declarator": "MAX_NAME_LENGTH = 255", "var_name": "MAX_NAME_LENGTH"}, {"original_string": "private static InstancedConfiguration sConf =\n      new InstancedConfiguration(ConfigurationUtils.defaults());", "modifier": "private static", "type": "InstancedConfiguration", "declarator": "sConf =\n      new InstancedConfiguration(ConfigurationUtils.defaults())", "var_name": "sConf"}, {"original_string": "@VisibleForTesting\n  public static final long ID_NOT_SET_VALUE = -1;", "modifier": "@VisibleForTesting\n  public static final", "type": "long", "declarator": "ID_NOT_SET_VALUE = -1", "var_name": "ID_NOT_SET_VALUE"}, {"original_string": "@VisibleForTesting\n  public static final long ID_NOT_SET_VALUE_UNSIGNED = 4294967295L;", "modifier": "@VisibleForTesting\n  public static final", "type": "long", "declarator": "ID_NOT_SET_VALUE_UNSIGNED = 4294967295L", "var_name": "ID_NOT_SET_VALUE_UNSIGNED"}, {"original_string": "private static final long UID = AlluxioFuseUtils.getUid(System.getProperty(\"user.name\"));", "modifier": "private static final", "type": "long", "declarator": "UID = AlluxioFuseUtils.getUid(System.getProperty(\"user.name\"))", "var_name": "UID"}, {"original_string": "private static final long GID = AlluxioFuseUtils.getGid(System.getProperty(\"user.name\"));", "modifier": "private static final", "type": "long", "declarator": "GID = AlluxioFuseUtils.getGid(System.getProperty(\"user.name\"))", "var_name": "GID"}, {"original_string": "private static final IndexDefinition<OpenFileEntry, Long> ID_INDEX =\n      new IndexDefinition<OpenFileEntry, Long>(true) {\n        @Override\n        public Long getFieldValue(OpenFileEntry o) {\n          return o.getId();\n        }\n      };", "modifier": "private static final", "type": "IndexDefinition<OpenFileEntry, Long>", "declarator": "ID_INDEX =\n      new IndexDefinition<OpenFileEntry, Long>(true) {\n        @Override\n        public Long getFieldValue(OpenFileEntry o) {\n          return o.getId();\n        }\n      }", "var_name": "ID_INDEX"}, {"original_string": "private static final IndexDefinition<OpenFileEntry, String> PATH_INDEX =\n      new IndexDefinition<OpenFileEntry, String>(true) {\n        @Override\n        public String getFieldValue(OpenFileEntry o) {\n          return o.getPath();\n        }\n      };", "modifier": "private static final", "type": "IndexDefinition<OpenFileEntry, String>", "declarator": "PATH_INDEX =\n      new IndexDefinition<OpenFileEntry, String>(true) {\n        @Override\n        public String getFieldValue(OpenFileEntry o) {\n          return o.getPath();\n        }\n      }", "var_name": "PATH_INDEX"}, {"original_string": "private final boolean mIsUserGroupTranslation;", "modifier": "private final", "type": "boolean", "declarator": "mIsUserGroupTranslation", "var_name": "mIsUserGroupTranslation"}, {"original_string": "private final FileSystem mFileSystem;", "modifier": "private final", "type": "FileSystem", "declarator": "mFileSystem", "var_name": "mFileSystem"}, {"original_string": "private final Path mAlluxioRootPath;", "modifier": "private final", "type": "Path", "declarator": "mAlluxioRootPath", "var_name": "mAlluxioRootPath"}, {"original_string": "private final LoadingCache<String, AlluxioURI> mPathResolverCache;", "modifier": "private final", "type": "LoadingCache<String, AlluxioURI>", "declarator": "mPathResolverCache", "var_name": "mPathResolverCache"}, {"original_string": "private final IndexedSet<OpenFileEntry> mOpenFiles;", "modifier": "private final", "type": "IndexedSet<OpenFileEntry>", "declarator": "mOpenFiles", "var_name": "mOpenFiles"}, {"original_string": "private AtomicLong mNextOpenFileId = new AtomicLong(0);", "modifier": "private", "type": "AtomicLong", "declarator": "mNextOpenFileId = new AtomicLong(0)", "var_name": "mNextOpenFileId"}, {"original_string": "private final String mFsName;", "modifier": "private final", "type": "String", "declarator": "mFsName", "var_name": "mFsName"}], "methods": [{"identifier": "AlluxioFuseFileSystem", "parameters": "(FileSystem fs, AlluxioFuseOptions opts, AlluxioConfiguration conf)", "modifiers": "public", "return": "", "signature": " AlluxioFuseFileSystem(FileSystem fs, AlluxioFuseOptions opts, AlluxioConfiguration conf)", "full_signature": "public  AlluxioFuseFileSystem(FileSystem fs, AlluxioFuseOptions opts, AlluxioConfiguration conf)", "class_method_signature": "AlluxioFuseFileSystem.AlluxioFuseFileSystem(FileSystem fs, AlluxioFuseOptions opts, AlluxioConfiguration conf)", "testcase": false, "constructor": true}, {"identifier": "chmod", "parameters": "(String path, @mode_t long mode)", "modifiers": "@Override public", "return": "int", "signature": "int chmod(String path, @mode_t long mode)", "full_signature": "@Override public int chmod(String path, @mode_t long mode)", "class_method_signature": "AlluxioFuseFileSystem.chmod(String path, @mode_t long mode)", "testcase": false, "constructor": false}, {"identifier": "chmodInternal", "parameters": "(String path, @mode_t long mode)", "modifiers": "private", "return": "int", "signature": "int chmodInternal(String path, @mode_t long mode)", "full_signature": "private int chmodInternal(String path, @mode_t long mode)", "class_method_signature": "AlluxioFuseFileSystem.chmodInternal(String path, @mode_t long mode)", "testcase": false, "constructor": false}, {"identifier": "chown", "parameters": "(String path, @uid_t long uid, @gid_t long gid)", "modifiers": "@Override public", "return": "int", "signature": "int chown(String path, @uid_t long uid, @gid_t long gid)", "full_signature": "@Override public int chown(String path, @uid_t long uid, @gid_t long gid)", "class_method_signature": "AlluxioFuseFileSystem.chown(String path, @uid_t long uid, @gid_t long gid)", "testcase": false, "constructor": false}, {"identifier": "chownInternal", "parameters": "(String path, @uid_t long uid, @gid_t long gid)", "modifiers": "private", "return": "int", "signature": "int chownInternal(String path, @uid_t long uid, @gid_t long gid)", "full_signature": "private int chownInternal(String path, @uid_t long uid, @gid_t long gid)", "class_method_signature": "AlluxioFuseFileSystem.chownInternal(String path, @uid_t long uid, @gid_t long gid)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String path, @mode_t long mode, FuseFileInfo fi)", "modifiers": "@Override public", "return": "int", "signature": "int create(String path, @mode_t long mode, FuseFileInfo fi)", "full_signature": "@Override public int create(String path, @mode_t long mode, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.create(String path, @mode_t long mode, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "createInternal", "parameters": "(String path, @mode_t long mode, FuseFileInfo fi)", "modifiers": "private", "return": "int", "signature": "int createInternal(String path, @mode_t long mode, FuseFileInfo fi)", "full_signature": "private int createInternal(String path, @mode_t long mode, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.createInternal(String path, @mode_t long mode, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "(String path, FuseFileInfo fi)", "modifiers": "@Override public", "return": "int", "signature": "int flush(String path, FuseFileInfo fi)", "full_signature": "@Override public int flush(String path, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.flush(String path, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "flushInternal", "parameters": "(String path, FuseFileInfo fi)", "modifiers": "private", "return": "int", "signature": "int flushInternal(String path, FuseFileInfo fi)", "full_signature": "private int flushInternal(String path, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.flushInternal(String path, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "getattr", "parameters": "(String path, FileStat stat)", "modifiers": "@Override public", "return": "int", "signature": "int getattr(String path, FileStat stat)", "full_signature": "@Override public int getattr(String path, FileStat stat)", "class_method_signature": "AlluxioFuseFileSystem.getattr(String path, FileStat stat)", "testcase": false, "constructor": false}, {"identifier": "getattrInternal", "parameters": "(String path, FileStat stat)", "modifiers": "private", "return": "int", "signature": "int getattrInternal(String path, FileStat stat)", "full_signature": "private int getattrInternal(String path, FileStat stat)", "class_method_signature": "AlluxioFuseFileSystem.getattrInternal(String path, FileStat stat)", "testcase": false, "constructor": false}, {"identifier": "getFSName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFSName()", "full_signature": "@Override public String getFSName()", "class_method_signature": "AlluxioFuseFileSystem.getFSName()", "testcase": false, "constructor": false}, {"identifier": "mkdir", "parameters": "(String path, @mode_t long mode)", "modifiers": "@Override public", "return": "int", "signature": "int mkdir(String path, @mode_t long mode)", "full_signature": "@Override public int mkdir(String path, @mode_t long mode)", "class_method_signature": "AlluxioFuseFileSystem.mkdir(String path, @mode_t long mode)", "testcase": false, "constructor": false}, {"identifier": "mkdirInternal", "parameters": "(String path, @mode_t long mode)", "modifiers": "private", "return": "int", "signature": "int mkdirInternal(String path, @mode_t long mode)", "full_signature": "private int mkdirInternal(String path, @mode_t long mode)", "class_method_signature": "AlluxioFuseFileSystem.mkdirInternal(String path, @mode_t long mode)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(String path, FuseFileInfo fi)", "modifiers": "@Override public", "return": "int", "signature": "int open(String path, FuseFileInfo fi)", "full_signature": "@Override public int open(String path, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.open(String path, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "openInternal", "parameters": "(String path, FuseFileInfo fi)", "modifiers": "private", "return": "int", "signature": "int openInternal(String path, FuseFileInfo fi)", "full_signature": "private int openInternal(String path, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.openInternal(String path, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "modifiers": "@Override public", "return": "int", "signature": "int read(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "full_signature": "@Override public int read(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.read(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "readInternal", "parameters": "(String path, Pointer buf, @size_t long size, @off_t long offset,\n           FuseFileInfo fi)", "modifiers": "private", "return": "int", "signature": "int readInternal(String path, Pointer buf, @size_t long size, @off_t long offset,\n           FuseFileInfo fi)", "full_signature": "private int readInternal(String path, Pointer buf, @size_t long size, @off_t long offset,\n           FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.readInternal(String path, Pointer buf, @size_t long size, @off_t long offset,\n           FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "readdir", "parameters": "(String path, Pointer buff, FuseFillDir filter,\n      @off_t long offset, FuseFileInfo fi)", "modifiers": "@Override public", "return": "int", "signature": "int readdir(String path, Pointer buff, FuseFillDir filter,\n      @off_t long offset, FuseFileInfo fi)", "full_signature": "@Override public int readdir(String path, Pointer buff, FuseFillDir filter,\n      @off_t long offset, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.readdir(String path, Pointer buff, FuseFillDir filter,\n      @off_t long offset, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "readdirInternal", "parameters": "(String path, Pointer buff, FuseFillDir filter,\n              @off_t long offset, FuseFileInfo fi)", "modifiers": "private", "return": "int", "signature": "int readdirInternal(String path, Pointer buff, FuseFillDir filter,\n              @off_t long offset, FuseFileInfo fi)", "full_signature": "private int readdirInternal(String path, Pointer buff, FuseFillDir filter,\n              @off_t long offset, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.readdirInternal(String path, Pointer buff, FuseFillDir filter,\n              @off_t long offset, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(String path, FuseFileInfo fi)", "modifiers": "@Override public", "return": "int", "signature": "int release(String path, FuseFileInfo fi)", "full_signature": "@Override public int release(String path, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.release(String path, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "releaseInternal", "parameters": "(String path, FuseFileInfo fi)", "modifiers": "private", "return": "int", "signature": "int releaseInternal(String path, FuseFileInfo fi)", "full_signature": "private int releaseInternal(String path, FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.releaseInternal(String path, FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(String oldPath, String newPath)", "modifiers": "@Override public", "return": "int", "signature": "int rename(String oldPath, String newPath)", "full_signature": "@Override public int rename(String oldPath, String newPath)", "class_method_signature": "AlluxioFuseFileSystem.rename(String oldPath, String newPath)", "testcase": false, "constructor": false}, {"identifier": "renameInternal", "parameters": "(String oldPath, String newPath)", "modifiers": "private", "return": "int", "signature": "int renameInternal(String oldPath, String newPath)", "full_signature": "private int renameInternal(String oldPath, String newPath)", "class_method_signature": "AlluxioFuseFileSystem.renameInternal(String oldPath, String newPath)", "testcase": false, "constructor": false}, {"identifier": "rmdir", "parameters": "(String path)", "modifiers": "@Override public", "return": "int", "signature": "int rmdir(String path)", "full_signature": "@Override public int rmdir(String path)", "class_method_signature": "AlluxioFuseFileSystem.rmdir(String path)", "testcase": false, "constructor": false}, {"identifier": "statfs", "parameters": "(String path, Statvfs stbuf)", "modifiers": "@Override public", "return": "int", "signature": "int statfs(String path, Statvfs stbuf)", "full_signature": "@Override public int statfs(String path, Statvfs stbuf)", "class_method_signature": "AlluxioFuseFileSystem.statfs(String path, Statvfs stbuf)", "testcase": false, "constructor": false}, {"identifier": "statfsInternal", "parameters": "(String path, Statvfs stbuf)", "modifiers": "private", "return": "int", "signature": "int statfsInternal(String path, Statvfs stbuf)", "full_signature": "private int statfsInternal(String path, Statvfs stbuf)", "class_method_signature": "AlluxioFuseFileSystem.statfsInternal(String path, Statvfs stbuf)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(String path, long size)", "modifiers": "@Override public", "return": "int", "signature": "int truncate(String path, long size)", "full_signature": "@Override public int truncate(String path, long size)", "class_method_signature": "AlluxioFuseFileSystem.truncate(String path, long size)", "testcase": false, "constructor": false}, {"identifier": "unlink", "parameters": "(String path)", "modifiers": "@Override public", "return": "int", "signature": "int unlink(String path)", "full_signature": "@Override public int unlink(String path)", "class_method_signature": "AlluxioFuseFileSystem.unlink(String path)", "testcase": false, "constructor": false}, {"identifier": "utimens", "parameters": "(String path, Timespec[] timespec)", "modifiers": "@Override public", "return": "int", "signature": "int utimens(String path, Timespec[] timespec)", "full_signature": "@Override public int utimens(String path, Timespec[] timespec)", "class_method_signature": "AlluxioFuseFileSystem.utimens(String path, Timespec[] timespec)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String path, Pointer buf, @size_t long size, @off_t long offset,\n                   FuseFileInfo fi)", "modifiers": "@Override public", "return": "int", "signature": "int write(String path, Pointer buf, @size_t long size, @off_t long offset,\n                   FuseFileInfo fi)", "full_signature": "@Override public int write(String path, Pointer buf, @size_t long size, @off_t long offset,\n                   FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.write(String path, Pointer buf, @size_t long size, @off_t long offset,\n                   FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "writeInternal", "parameters": "(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "modifiers": "private", "return": "int", "signature": "int writeInternal(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "full_signature": "private int writeInternal(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "class_method_signature": "AlluxioFuseFileSystem.writeInternal(String path, Pointer buf, @size_t long size, @off_t long offset,\n      FuseFileInfo fi)", "testcase": false, "constructor": false}, {"identifier": "rmInternal", "parameters": "(String path)", "modifiers": "private", "return": "int", "signature": "int rmInternal(String path)", "full_signature": "private int rmInternal(String path)", "class_method_signature": "AlluxioFuseFileSystem.rmInternal(String path)", "testcase": false, "constructor": false}, {"identifier": "waitForFileCompleted", "parameters": "(AlluxioURI uri)", "modifiers": "private", "return": "boolean", "signature": "boolean waitForFileCompleted(AlluxioURI uri)", "full_signature": "private boolean waitForFileCompleted(AlluxioURI uri)", "class_method_signature": "AlluxioFuseFileSystem.waitForFileCompleted(AlluxioURI uri)", "testcase": false, "constructor": false}, {"identifier": "getPathResolverCache", "parameters": "()", "modifiers": "", "return": "LoadingCache<String, AlluxioURI>", "signature": "LoadingCache<String, AlluxioURI> getPathResolverCache()", "full_signature": " LoadingCache<String, AlluxioURI> getPathResolverCache()", "class_method_signature": "AlluxioFuseFileSystem.getPathResolverCache()", "testcase": false, "constructor": false}], "file": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java"}, "focal_method": {"identifier": "rename", "parameters": "(String oldPath, String newPath)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int rename(String oldPath, String newPath) {\n    return AlluxioFuseUtils.call(LOG, () -> renameInternal(oldPath, newPath),\n        \"rename\", \"oldPath=%s,newPath=%s,\", oldPath, newPath);\n  }", "signature": "int rename(String oldPath, String newPath)", "full_signature": "@Override public int rename(String oldPath, String newPath)", "class_method_signature": "AlluxioFuseFileSystem.rename(String oldPath, String newPath)", "testcase": false, "constructor": false, "invocations": ["call", "renameInternal"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}