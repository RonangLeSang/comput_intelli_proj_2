{"test_class": {"identifier": "RoundRobinPolicyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int PORT = 1;", "modifier": "private static final", "type": "int", "declarator": "PORT = 1", "var_name": "PORT"}], "file": "core/client/fs/src/test/java/alluxio/client/block/policy/RoundRobinPolicyTest.java"}, "test_case": {"identifier": "equalsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void equalsTest() throws Exception {\n    AlluxioConfiguration conf = ConfigurationTestUtils.defaults();\n    CommonUtils.testEquals(RoundRobinPolicy.class, new Class[]{AlluxioConfiguration.class},\n        new Object[]{conf});\n  }", "signature": "void equalsTest()", "full_signature": "@Test public void equalsTest()", "class_method_signature": "RoundRobinPolicyTest.equalsTest()", "testcase": true, "constructor": false, "invocations": ["defaults", "testEquals"]}, "focal_class": {"identifier": "RoundRobinPolicy", "superclass": "", "interfaces": "implements BlockLocationPolicy", "fields": [{"original_string": "private List<BlockWorkerInfo> mWorkerInfoList;", "modifier": "private", "type": "List<BlockWorkerInfo>", "declarator": "mWorkerInfoList", "var_name": "mWorkerInfoList"}, {"original_string": "private int mIndex;", "modifier": "private", "type": "int", "declarator": "mIndex", "var_name": "mIndex"}, {"original_string": "private boolean mInitialized = false;", "modifier": "private", "type": "boolean", "declarator": "mInitialized = false", "var_name": "mInitialized"}, {"original_string": "private final HashMap<Long, WorkerNetAddress> mBlockLocationCache = new HashMap<>();", "modifier": "private final", "type": "HashMap<Long, WorkerNetAddress>", "declarator": "mBlockLocationCache = new HashMap<>()", "var_name": "mBlockLocationCache"}], "methods": [{"identifier": "RoundRobinPolicy", "parameters": "(AlluxioConfiguration conf)", "modifiers": "public", "return": "", "signature": " RoundRobinPolicy(AlluxioConfiguration conf)", "full_signature": "public  RoundRobinPolicy(AlluxioConfiguration conf)", "class_method_signature": "RoundRobinPolicy.RoundRobinPolicy(AlluxioConfiguration conf)", "testcase": false, "constructor": true}, {"identifier": "getWorker", "parameters": "(GetWorkerOptions options)", "modifiers": "@Override @Nullable public", "return": "WorkerNetAddress", "signature": "WorkerNetAddress getWorker(GetWorkerOptions options)", "full_signature": "@Override @Nullable public WorkerNetAddress getWorker(GetWorkerOptions options)", "class_method_signature": "RoundRobinPolicy.getWorker(GetWorkerOptions options)", "testcase": false, "constructor": false}, {"identifier": "findBlockWorkerInfo", "parameters": "(Iterable<BlockWorkerInfo> workerInfoList,\n      WorkerNetAddress address)", "modifiers": "private", "return": "BlockWorkerInfo", "signature": "BlockWorkerInfo findBlockWorkerInfo(Iterable<BlockWorkerInfo> workerInfoList,\n      WorkerNetAddress address)", "full_signature": "private BlockWorkerInfo findBlockWorkerInfo(Iterable<BlockWorkerInfo> workerInfoList,\n      WorkerNetAddress address)", "class_method_signature": "RoundRobinPolicy.findBlockWorkerInfo(Iterable<BlockWorkerInfo> workerInfoList,\n      WorkerNetAddress address)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RoundRobinPolicy.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RoundRobinPolicy.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RoundRobinPolicy.toString()", "testcase": false, "constructor": false}], "file": "core/client/fs/src/main/java/alluxio/client/block/policy/RoundRobinPolicy.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof RoundRobinPolicy)) {\n      return false;\n    }\n    RoundRobinPolicy that = (RoundRobinPolicy) o;\n    return Objects.equal(mWorkerInfoList, that.mWorkerInfoList)\n        && Objects.equal(mIndex, that.mIndex)\n        && Objects.equal(mInitialized, that.mInitialized)\n        && Objects.equal(mBlockLocationCache, that.mBlockLocationCache);\n  }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RoundRobinPolicy.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["equal", "equal", "equal", "equal"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}