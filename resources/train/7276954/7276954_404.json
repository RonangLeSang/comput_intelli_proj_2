{"test_class": {"identifier": "BaseFileSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final RuntimeException EXCEPTION = new RuntimeException(\"test exception\");", "modifier": "private static final", "type": "RuntimeException", "declarator": "EXCEPTION = new RuntimeException(\"test exception\")", "var_name": "EXCEPTION"}, {"original_string": "private static final String SHOULD_HAVE_PROPAGATED_MESSAGE =\n      \"Exception should have been propagated\";", "modifier": "private static final", "type": "String", "declarator": "SHOULD_HAVE_PROPAGATED_MESSAGE =\n      \"Exception should have been propagated\"", "var_name": "SHOULD_HAVE_PROPAGATED_MESSAGE"}, {"original_string": "private InstancedConfiguration mConf = ConfigurationTestUtils.defaults();", "modifier": "private", "type": "InstancedConfiguration", "declarator": "mConf = ConfigurationTestUtils.defaults()", "var_name": "mConf"}, {"original_string": "@Rule\n  private TestLoggerRule mTestLogger = new TestLoggerRule();", "modifier": "@Rule\n  private", "type": "TestLoggerRule", "declarator": "mTestLogger = new TestLoggerRule()", "var_name": "mTestLogger"}, {"original_string": "private FileSystem mFileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "mFileSystem", "var_name": "mFileSystem"}, {"original_string": "private FileSystemContext mFileContext;", "modifier": "private", "type": "FileSystemContext", "declarator": "mFileContext", "var_name": "mFileContext"}, {"original_string": "private ClientContext mClientContext;", "modifier": "private", "type": "ClientContext", "declarator": "mClientContext", "var_name": "mClientContext"}, {"original_string": "private FileSystemMasterClient mFileSystemMasterClient;", "modifier": "private", "type": "FileSystemMasterClient", "declarator": "mFileSystemMasterClient", "var_name": "mFileSystemMasterClient"}], "file": "core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java"}, "test_case": {"identifier": "getStatus", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getStatus() throws Exception {\n    AlluxioURI file = new AlluxioURI(\"/file\");\n    URIStatus status = new URIStatus(new FileInfo());\n    GetStatusPOptions getStatusOptions = GetStatusPOptions.getDefaultInstance();\n    when(mFileSystemMasterClient.getStatus(file, FileSystemOptions.getStatusDefaults(mConf)\n        .toBuilder().mergeFrom(getStatusOptions).build())).thenReturn(status);\n    assertSame(status, mFileSystem.getStatus(file, getStatusOptions));\n    verify(mFileSystemMasterClient).getStatus(file, FileSystemOptions.getStatusDefaults(mConf)\n        .toBuilder().mergeFrom(getStatusOptions).build());\n\n    verifyFilesystemContextAcquiredAndReleased();\n  }", "signature": "void getStatus()", "full_signature": "@Test public void getStatus()", "class_method_signature": "BaseFileSystemTest.getStatus()", "testcase": true, "constructor": false, "invocations": ["getDefaultInstance", "thenReturn", "when", "getStatus", "build", "mergeFrom", "toBuilder", "getStatusDefaults", "assertSame", "getStatus", "getStatus", "verify", "build", "mergeFrom", "toBuilder", "getStatusDefaults", "verifyFilesystemContextAcquiredAndReleased"]}, "focal_class": {"identifier": "BaseFileSystem", "superclass": "", "interfaces": "implements FileSystem", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BaseFileSystem.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BaseFileSystem.class)", "var_name": "LOG"}, {"original_string": "private final Closer mCloser = Closer.create();", "modifier": "private final", "type": "Closer", "declarator": "mCloser = Closer.create()", "var_name": "mCloser"}, {"original_string": "protected final FileSystemContext mFsContext;", "modifier": "protected final", "type": "FileSystemContext", "declarator": "mFsContext", "var_name": "mFsContext"}, {"original_string": "protected final AlluxioBlockStore mBlockStore;", "modifier": "protected final", "type": "AlluxioBlockStore", "declarator": "mBlockStore", "var_name": "mBlockStore"}, {"original_string": "protected volatile boolean mClosed = false;", "modifier": "protected volatile", "type": "boolean", "declarator": "mClosed = false", "var_name": "mClosed"}], "methods": [{"identifier": "BaseFileSystem", "parameters": "(FileSystemContext fsContext)", "modifiers": "public", "return": "", "signature": " BaseFileSystem(FileSystemContext fsContext)", "full_signature": "public  BaseFileSystem(FileSystemContext fsContext)", "class_method_signature": "BaseFileSystem.BaseFileSystem(FileSystemContext fsContext)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "BaseFileSystem.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "BaseFileSystem.isClosed()", "testcase": false, "constructor": false}, {"identifier": "createDirectory", "parameters": "(AlluxioURI path, CreateDirectoryPOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void createDirectory(AlluxioURI path, CreateDirectoryPOptions options)", "full_signature": "@Override public void createDirectory(AlluxioURI path, CreateDirectoryPOptions options)", "class_method_signature": "BaseFileSystem.createDirectory(AlluxioURI path, CreateDirectoryPOptions options)", "testcase": false, "constructor": false}, {"identifier": "createFile", "parameters": "(AlluxioURI path, CreateFilePOptions options)", "modifiers": "@Override public", "return": "FileOutStream", "signature": "FileOutStream createFile(AlluxioURI path, CreateFilePOptions options)", "full_signature": "@Override public FileOutStream createFile(AlluxioURI path, CreateFilePOptions options)", "class_method_signature": "BaseFileSystem.createFile(AlluxioURI path, CreateFilePOptions options)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(AlluxioURI path, DeletePOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void delete(AlluxioURI path, DeletePOptions options)", "full_signature": "@Override public void delete(AlluxioURI path, DeletePOptions options)", "class_method_signature": "BaseFileSystem.delete(AlluxioURI path, DeletePOptions options)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(AlluxioURI path, final ExistsPOptions options)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(AlluxioURI path, final ExistsPOptions options)", "full_signature": "@Override public boolean exists(AlluxioURI path, final ExistsPOptions options)", "class_method_signature": "BaseFileSystem.exists(AlluxioURI path, final ExistsPOptions options)", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "(AlluxioURI path, final FreePOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void free(AlluxioURI path, final FreePOptions options)", "full_signature": "@Override public void free(AlluxioURI path, final FreePOptions options)", "class_method_signature": "BaseFileSystem.free(AlluxioURI path, final FreePOptions options)", "testcase": false, "constructor": false}, {"identifier": "getBlockLocations", "parameters": "(AlluxioURI path)", "modifiers": "@Override public", "return": "List<BlockLocationInfo>", "signature": "List<BlockLocationInfo> getBlockLocations(AlluxioURI path)", "full_signature": "@Override public List<BlockLocationInfo> getBlockLocations(AlluxioURI path)", "class_method_signature": "BaseFileSystem.getBlockLocations(AlluxioURI path)", "testcase": false, "constructor": false}, {"identifier": "getHostWorkerMap", "parameters": "()", "modifiers": "private", "return": "Map<String, WorkerNetAddress>", "signature": "Map<String, WorkerNetAddress> getHostWorkerMap()", "full_signature": "private Map<String, WorkerNetAddress> getHostWorkerMap()", "class_method_signature": "BaseFileSystem.getHostWorkerMap()", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "@Override public", "return": "AlluxioConfiguration", "signature": "AlluxioConfiguration getConf()", "full_signature": "@Override public AlluxioConfiguration getConf()", "class_method_signature": "BaseFileSystem.getConf()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(AlluxioURI path, final GetStatusPOptions options)", "modifiers": "@Override public", "return": "URIStatus", "signature": "URIStatus getStatus(AlluxioURI path, final GetStatusPOptions options)", "full_signature": "@Override public URIStatus getStatus(AlluxioURI path, final GetStatusPOptions options)", "class_method_signature": "BaseFileSystem.getStatus(AlluxioURI path, final GetStatusPOptions options)", "testcase": false, "constructor": false}, {"identifier": "listStatus", "parameters": "(AlluxioURI path, final ListStatusPOptions options)", "modifiers": "@Override public", "return": "List<URIStatus>", "signature": "List<URIStatus> listStatus(AlluxioURI path, final ListStatusPOptions options)", "full_signature": "@Override public List<URIStatus> listStatus(AlluxioURI path, final ListStatusPOptions options)", "class_method_signature": "BaseFileSystem.listStatus(AlluxioURI path, final ListStatusPOptions options)", "testcase": false, "constructor": false}, {"identifier": "mount", "parameters": "(AlluxioURI alluxioPath, AlluxioURI ufsPath, final MountPOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void mount(AlluxioURI alluxioPath, AlluxioURI ufsPath, final MountPOptions options)", "full_signature": "@Override public void mount(AlluxioURI alluxioPath, AlluxioURI ufsPath, final MountPOptions options)", "class_method_signature": "BaseFileSystem.mount(AlluxioURI alluxioPath, AlluxioURI ufsPath, final MountPOptions options)", "testcase": false, "constructor": false}, {"identifier": "updateMount", "parameters": "(AlluxioURI alluxioPath, final MountPOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void updateMount(AlluxioURI alluxioPath, final MountPOptions options)", "full_signature": "@Override public void updateMount(AlluxioURI alluxioPath, final MountPOptions options)", "class_method_signature": "BaseFileSystem.updateMount(AlluxioURI alluxioPath, final MountPOptions options)", "testcase": false, "constructor": false}, {"identifier": "getMountTable", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, MountPointInfo>", "signature": "Map<String, MountPointInfo> getMountTable()", "full_signature": "@Override public Map<String, MountPointInfo> getMountTable()", "class_method_signature": "BaseFileSystem.getMountTable()", "testcase": false, "constructor": false}, {"identifier": "getSyncPathList", "parameters": "()", "modifiers": "@Override public", "return": "List<SyncPointInfo>", "signature": "List<SyncPointInfo> getSyncPathList()", "full_signature": "@Override public List<SyncPointInfo> getSyncPathList()", "class_method_signature": "BaseFileSystem.getSyncPathList()", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(final AlluxioURI path, final ScheduleAsyncPersistencePOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void persist(final AlluxioURI path, final ScheduleAsyncPersistencePOptions options)", "full_signature": "@Override public void persist(final AlluxioURI path, final ScheduleAsyncPersistencePOptions options)", "class_method_signature": "BaseFileSystem.persist(final AlluxioURI path, final ScheduleAsyncPersistencePOptions options)", "testcase": false, "constructor": false}, {"identifier": "openFile", "parameters": "(AlluxioURI path, OpenFilePOptions options)", "modifiers": "@Override public", "return": "FileInStream", "signature": "FileInStream openFile(AlluxioURI path, OpenFilePOptions options)", "full_signature": "@Override public FileInStream openFile(AlluxioURI path, OpenFilePOptions options)", "class_method_signature": "BaseFileSystem.openFile(AlluxioURI path, OpenFilePOptions options)", "testcase": false, "constructor": false}, {"identifier": "openFile", "parameters": "(URIStatus status, OpenFilePOptions options)", "modifiers": "@Override public", "return": "FileInStream", "signature": "FileInStream openFile(URIStatus status, OpenFilePOptions options)", "full_signature": "@Override public FileInStream openFile(URIStatus status, OpenFilePOptions options)", "class_method_signature": "BaseFileSystem.openFile(URIStatus status, OpenFilePOptions options)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(AlluxioURI src, AlluxioURI dst, RenamePOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void rename(AlluxioURI src, AlluxioURI dst, RenamePOptions options)", "full_signature": "@Override public void rename(AlluxioURI src, AlluxioURI dst, RenamePOptions options)", "class_method_signature": "BaseFileSystem.rename(AlluxioURI src, AlluxioURI dst, RenamePOptions options)", "testcase": false, "constructor": false}, {"identifier": "reverseResolve", "parameters": "(AlluxioURI ufsUri)", "modifiers": "@Override public", "return": "AlluxioURI", "signature": "AlluxioURI reverseResolve(AlluxioURI ufsUri)", "full_signature": "@Override public AlluxioURI reverseResolve(AlluxioURI ufsUri)", "class_method_signature": "BaseFileSystem.reverseResolve(AlluxioURI ufsUri)", "testcase": false, "constructor": false}, {"identifier": "setAcl", "parameters": "(AlluxioURI path, SetAclAction action, List<AclEntry> entries,\n      SetAclPOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void setAcl(AlluxioURI path, SetAclAction action, List<AclEntry> entries,\n      SetAclPOptions options)", "full_signature": "@Override public void setAcl(AlluxioURI path, SetAclAction action, List<AclEntry> entries,\n      SetAclPOptions options)", "class_method_signature": "BaseFileSystem.setAcl(AlluxioURI path, SetAclAction action, List<AclEntry> entries,\n      SetAclPOptions options)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(AlluxioURI path, SetAttributePOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(AlluxioURI path, SetAttributePOptions options)", "full_signature": "@Override public void setAttribute(AlluxioURI path, SetAttributePOptions options)", "class_method_signature": "BaseFileSystem.setAttribute(AlluxioURI path, SetAttributePOptions options)", "testcase": false, "constructor": false}, {"identifier": "startSync", "parameters": "(AlluxioURI path)", "modifiers": "@Override public", "return": "void", "signature": "void startSync(AlluxioURI path)", "full_signature": "@Override public void startSync(AlluxioURI path)", "class_method_signature": "BaseFileSystem.startSync(AlluxioURI path)", "testcase": false, "constructor": false}, {"identifier": "stopSync", "parameters": "(AlluxioURI path)", "modifiers": "@Override public", "return": "void", "signature": "void stopSync(AlluxioURI path)", "full_signature": "@Override public void stopSync(AlluxioURI path)", "class_method_signature": "BaseFileSystem.stopSync(AlluxioURI path)", "testcase": false, "constructor": false}, {"identifier": "unmount", "parameters": "(AlluxioURI path, UnmountPOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void unmount(AlluxioURI path, UnmountPOptions options)", "full_signature": "@Override public void unmount(AlluxioURI path, UnmountPOptions options)", "class_method_signature": "BaseFileSystem.unmount(AlluxioURI path, UnmountPOptions options)", "testcase": false, "constructor": false}, {"identifier": "checkUri", "parameters": "(AlluxioURI uri)", "modifiers": "protected", "return": "void", "signature": "void checkUri(AlluxioURI uri)", "full_signature": "protected void checkUri(AlluxioURI uri)", "class_method_signature": "BaseFileSystem.checkUri(AlluxioURI uri)", "testcase": false, "constructor": false}, {"identifier": "rpc", "parameters": "(RpcCallable<FileSystemMasterClient, R> fn)", "modifiers": "private", "return": "R", "signature": "R rpc(RpcCallable<FileSystemMasterClient, R> fn)", "full_signature": "private R rpc(RpcCallable<FileSystemMasterClient, R> fn)", "class_method_signature": "BaseFileSystem.rpc(RpcCallable<FileSystemMasterClient, R> fn)", "testcase": false, "constructor": false}], "file": "core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java"}, "focal_method": {"identifier": "getStatus", "parameters": "(AlluxioURI path, final GetStatusPOptions options)", "modifiers": "@Override public", "return": "URIStatus", "body": "@Override\n  public URIStatus getStatus(AlluxioURI path, final GetStatusPOptions options)\n      throws FileDoesNotExistException, IOException, AlluxioException {\n    checkUri(path);\n    return rpc(client -> {\n      GetStatusPOptions mergedOptions = FileSystemOptions.getStatusDefaults(\n          mFsContext.getPathConf(path)).toBuilder().mergeFrom(options).build();\n      return client.getStatus(path, mergedOptions);\n    });\n  }", "signature": "URIStatus getStatus(AlluxioURI path, final GetStatusPOptions options)", "full_signature": "@Override public URIStatus getStatus(AlluxioURI path, final GetStatusPOptions options)", "class_method_signature": "BaseFileSystem.getStatus(AlluxioURI path, final GetStatusPOptions options)", "testcase": false, "constructor": false, "invocations": ["checkUri", "rpc", "build", "mergeFrom", "toBuilder", "getStatusDefaults", "getPathConf", "getStatus"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}