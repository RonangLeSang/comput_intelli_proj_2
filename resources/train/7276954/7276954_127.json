{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String mWorkerDataFolderPerms = ConfigurationUtils.defaults()\n      .get(PropertyKey.WORKER_DATA_FOLDER_PERMISSIONS);", "modifier": "private", "type": "String", "declarator": "mWorkerDataFolderPerms = ConfigurationUtils.defaults()\n      .get(PropertyKey.WORKER_DATA_FOLDER_PERMISSIONS)", "var_name": "mWorkerDataFolderPerms"}, {"original_string": "@Rule\n  public TemporaryFolder mTestFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mTestFolder = new TemporaryFolder()", "var_name": "mTestFolder"}, {"original_string": "@Rule\n  public final ExpectedException mException = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "mException = ExpectedException.none()", "var_name": "mException"}], "file": "core/common/src/test/java/alluxio/util/io/FileUtilsTest.java"}, "test_case": {"identifier": "moveNonExistentFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void moveNonExistentFile() throws IOException {\n    // ghostFile is never created, so deleting should fail\n    File ghostFile = new File(mTestFolder.getRoot(), \"ghost.txt\");\n    File toFile = mTestFolder.newFile(\"to.txt\");\n    mException.expect(IOException.class);\n    FileUtils.move(ghostFile.getAbsolutePath(), toFile.getAbsolutePath());\n    fail(\"moving a non-existent file should have failed\");\n  }", "signature": "void moveNonExistentFile()", "full_signature": "@Test public void moveNonExistentFile()", "class_method_signature": "FileUtilsTest.moveNonExistentFile()", "testcase": true, "constructor": false, "invocations": ["getRoot", "newFile", "expect", "move", "getAbsolutePath", "getAbsolutePath", "fail"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "changeLocalFileGroup", "parameters": "(String path, String group)", "modifiers": "public static", "return": "void", "signature": "void changeLocalFileGroup(String path, String group)", "full_signature": "public static void changeLocalFileGroup(String path, String group)", "class_method_signature": "FileUtils.changeLocalFileGroup(String path, String group)", "testcase": false, "constructor": false}, {"identifier": "changeLocalFilePermission", "parameters": "(String filePath, String perms)", "modifiers": "public static", "return": "void", "signature": "void changeLocalFilePermission(String filePath, String perms)", "full_signature": "public static void changeLocalFilePermission(String filePath, String perms)", "class_method_signature": "FileUtils.changeLocalFilePermission(String filePath, String perms)", "testcase": false, "constructor": false}, {"identifier": "changeLocalFileToFullPermission", "parameters": "(String filePath)", "modifiers": "public static", "return": "void", "signature": "void changeLocalFileToFullPermission(String filePath)", "full_signature": "public static void changeLocalFileToFullPermission(String filePath)", "class_method_signature": "FileUtils.changeLocalFileToFullPermission(String filePath)", "testcase": false, "constructor": false}, {"identifier": "getLocalFileOwner", "parameters": "(String filePath)", "modifiers": "public static", "return": "String", "signature": "String getLocalFileOwner(String filePath)", "full_signature": "public static String getLocalFileOwner(String filePath)", "class_method_signature": "FileUtils.getLocalFileOwner(String filePath)", "testcase": false, "constructor": false}, {"identifier": "getLocalFileGroup", "parameters": "(String filePath)", "modifiers": "public static", "return": "String", "signature": "String getLocalFileGroup(String filePath)", "full_signature": "public static String getLocalFileGroup(String filePath)", "class_method_signature": "FileUtils.getLocalFileGroup(String filePath)", "testcase": false, "constructor": false}, {"identifier": "getLocalFileMode", "parameters": "(String filePath)", "modifiers": "public static", "return": "short", "signature": "short getLocalFileMode(String filePath)", "full_signature": "public static short getLocalFileMode(String filePath)", "class_method_signature": "FileUtils.getLocalFileMode(String filePath)", "testcase": false, "constructor": false}, {"identifier": "translatePosixPermissionToMode", "parameters": "(Set<PosixFilePermission> permission)", "modifiers": "public static", "return": "short", "signature": "short translatePosixPermissionToMode(Set<PosixFilePermission> permission)", "full_signature": "public static short translatePosixPermissionToMode(Set<PosixFilePermission> permission)", "class_method_signature": "FileUtils.translatePosixPermissionToMode(Set<PosixFilePermission> permission)", "testcase": false, "constructor": false}, {"identifier": "changeLocalFileUser", "parameters": "(String path, String user)", "modifiers": "public static", "return": "void", "signature": "void changeLocalFileUser(String path, String user)", "full_signature": "public static void changeLocalFileUser(String path, String user)", "class_method_signature": "FileUtils.changeLocalFileUser(String path, String user)", "testcase": false, "constructor": false}, {"identifier": "setLocalDirStickyBit", "parameters": "(String dir)", "modifiers": "public static", "return": "void", "signature": "void setLocalDirStickyBit(String dir)", "full_signature": "public static void setLocalDirStickyBit(String dir)", "class_method_signature": "FileUtils.setLocalDirStickyBit(String dir)", "testcase": false, "constructor": false}, {"identifier": "createBlockPath", "parameters": "(String path, String workerDataFolderPermissions)", "modifiers": "public static", "return": "void", "signature": "void createBlockPath(String path, String workerDataFolderPermissions)", "full_signature": "public static void createBlockPath(String path, String workerDataFolderPermissions)", "class_method_signature": "FileUtils.createBlockPath(String path, String workerDataFolderPermissions)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(String srcPath, String dstPath)", "modifiers": "public static", "return": "void", "signature": "void move(String srcPath, String dstPath)", "full_signature": "public static void move(String srcPath, String dstPath)", "class_method_signature": "FileUtils.move(String srcPath, String dstPath)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String path)", "modifiers": "public static", "return": "void", "signature": "void delete(String path)", "full_signature": "public static void delete(String path)", "class_method_signature": "FileUtils.delete(String path)", "testcase": false, "constructor": false}, {"identifier": "deletePathRecursively", "parameters": "(String path)", "modifiers": "public static", "return": "void", "signature": "void deletePathRecursively(String path)", "full_signature": "public static void deletePathRecursively(String path)", "class_method_signature": "FileUtils.deletePathRecursively(String path)", "testcase": false, "constructor": false}, {"identifier": "createStorageDirPath", "parameters": "(String path, String workerDataFolderPermissions)", "modifiers": "public static", "return": "boolean", "signature": "boolean createStorageDirPath(String path, String workerDataFolderPermissions)", "full_signature": "public static boolean createStorageDirPath(String path, String workerDataFolderPermissions)", "class_method_signature": "FileUtils.createStorageDirPath(String path, String workerDataFolderPermissions)", "testcase": false, "constructor": false}, {"identifier": "createFile", "parameters": "(String filePath)", "modifiers": "public static", "return": "void", "signature": "void createFile(String filePath)", "full_signature": "public static void createFile(String filePath)", "class_method_signature": "FileUtils.createFile(String filePath)", "testcase": false, "constructor": false}, {"identifier": "createDir", "parameters": "(String path)", "modifiers": "public static", "return": "void", "signature": "void createDir(String path)", "full_signature": "public static void createDir(String path)", "class_method_signature": "FileUtils.createDir(String path)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean exists(String path)", "full_signature": "public static boolean exists(String path)", "class_method_signature": "FileUtils.exists(String path)", "testcase": false, "constructor": false}, {"identifier": "isStorageDirAccessible", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStorageDirAccessible(String path)", "full_signature": "public static boolean isStorageDirAccessible(String path)", "class_method_signature": "FileUtils.isStorageDirAccessible(String path)", "testcase": false, "constructor": false}, {"identifier": "FileUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtils()", "full_signature": "private  FileUtils()", "class_method_signature": "FileUtils.FileUtils()", "testcase": false, "constructor": true}], "file": "core/common/src/main/java/alluxio/util/io/FileUtils.java"}, "focal_method": {"identifier": "move", "parameters": "(String srcPath, String dstPath)", "modifiers": "public static", "return": "void", "body": "public static void move(String srcPath, String dstPath) throws IOException {\n    Files.move(Paths.get(srcPath), Paths.get(dstPath), StandardCopyOption.REPLACE_EXISTING);\n  }", "signature": "void move(String srcPath, String dstPath)", "full_signature": "public static void move(String srcPath, String dstPath)", "class_method_signature": "FileUtils.move(String srcPath, String dstPath)", "testcase": false, "constructor": false, "invocations": ["move", "get", "get"]}, "repository": {"repo_id": 7276954, "url": "https://github.com/Alluxio/alluxio", "stars": 4494, "created": "12/21/2012 5:43:46 PM +00:00", "updates": "2020-01-24T20:27:46+00:00", "fork": "False", "license": "licensed"}}