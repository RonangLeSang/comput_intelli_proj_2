{"test_class": {"identifier": "VectoriserTest", "superclass": "extends RandomizedTest", "interfaces": "", "fields": [], "file": "sof-trainer/sofia/src/test/java/de/isabeldrostfromm/sof/naive/VectoriserTest.java"}, "test_case": {"identifier": "testBodyUsage", "parameters": "()", "modifiers": "@Repeat(iterations = 10) @Test public", "return": "void", "body": "@Repeat(iterations = 10)\n\t@Test\n\tpublic void testBodyUsage() throws IOException {\n\t\tString firstBody = randomText(10, 2000, 2, 100);\n\t\tString secondBody = randomText(10, 2000, 2, 100);;\n\t\twhile (firstBody.equals(secondBody)) {\n\t\t\tsecondBody = randomText(10, 2000, 2, 100);;\n\t\t}\n\n\t\tString title = randomText(10, 2000, 2, 10);;\n\t\tSet<String> tags = Sets.newHashSet(randomText(10, 2000, 1, 1));\n\t\tdouble reputation = randomDouble();\n\t\t\n\t\tDocument firstDoc = Document.of(firstBody, \"\", title, reputation, tags);\n\t\tDocument secondDoc = Document.of(secondBody, \"\", title, reputation, tags);\n\t\tVectoriser vectorise = new Vectoriser();\n\t\tVector first = vectorise.vectorise(firstDoc);\n\t\tVector second = vectorise.vectorise(secondDoc);\n\n\t\tassertNotEquals(\"Documents with different body should have different vectors.\", \n\t\t\t\tfirst,\n\t\t\t\tsecond);\n\t}", "signature": "void testBodyUsage()", "full_signature": "@Repeat(iterations = 10) @Test public void testBodyUsage()", "class_method_signature": "VectoriserTest.testBodyUsage()", "testcase": true, "constructor": false, "invocations": ["randomText", "randomText", "equals", "randomText", "randomText", "newHashSet", "randomText", "randomDouble", "of", "of", "vectorise", "vectorise", "assertNotEquals"]}, "focal_class": {"identifier": "Vectoriser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int bodyCard = 1000000;", "modifier": "public static final", "type": "int", "declarator": "bodyCard = 1000000", "var_name": "bodyCard"}, {"original_string": "public static final int titleCard = 1000000;", "modifier": "public static final", "type": "int", "declarator": "titleCard = 1000000", "var_name": "titleCard"}, {"original_string": "private static final int tagCard = 0;", "modifier": "private static final", "type": "int", "declarator": "tagCard = 0", "var_name": "tagCard"}, {"original_string": "private static final int doubles = 0;", "modifier": "private static final", "type": "int", "declarator": "doubles = 0", "var_name": "doubles"}], "methods": [{"identifier": "getCardinality", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getCardinality()", "full_signature": "public static int getCardinality()", "class_method_signature": "Vectoriser.getCardinality()", "testcase": false, "constructor": false}, {"identifier": "vectorise", "parameters": "(Document document)", "modifiers": "public", "return": "Vector", "signature": "Vector vectorise(Document document)", "full_signature": "public Vector vectorise(Document document)", "class_method_signature": "Vectoriser.vectorise(Document document)", "testcase": false, "constructor": false}, {"identifier": "luceneEncode", "parameters": "(int probes, String text)", "modifiers": "private static", "return": "Vector", "signature": "Vector luceneEncode(int probes, String text)", "full_signature": "private static Vector luceneEncode(int probes, String text)", "class_method_signature": "Vectoriser.luceneEncode(int probes, String text)", "testcase": false, "constructor": false}], "file": "sof-trainer/sofia/src/main/java/de/isabeldrostfromm/sof/naive/Vectoriser.java"}, "focal_method": {"identifier": "vectorise", "parameters": "(Document document)", "modifiers": "public", "return": "Vector", "body": "public Vector vectorise(Document document) {\n\t\tVector body = luceneEncode(bodyCard, document.getBody());\n\t\tVector title = luceneEncode(titleCard, document.getTitle());\n\t\t//Vector tags = luceneEncode(tagCard, Strings.collectionToCommaDelimitedString(document.getTags()));\n\t\t//Vector reputation = Vectors.newSequentialAccessSparseVector(document.getReputation());\n\n\t\treturn Vectors.append(body, title);//, tags);//, reputation);\n\t}", "signature": "Vector vectorise(Document document)", "full_signature": "public Vector vectorise(Document document)", "class_method_signature": "Vectoriser.vectorise(Document document)", "testcase": false, "constructor": false, "invocations": ["luceneEncode", "getBody", "luceneEncode", "getTitle", "append"]}, "repository": {"repo_id": 8015168, "url": "https://github.com/MaineC/sofia", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 304, "license": "licensed"}}