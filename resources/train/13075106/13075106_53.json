{"test_class": {"identifier": "TestMurmurHash", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final byte[][] input = {\n            {\n                    (byte)0xed,\n                    (byte)0x53,\n                    (byte)0xc4,\n                    (byte)0xa5,\n                    (byte)0x3b,\n                    (byte)0x1b,\n                    (byte)0xbd,\n                    (byte)0xc2,\n                    (byte)0x52,\n                    (byte)0x7d,\n                    (byte)0xc3,\n                    (byte)0xef,\n                    (byte)0x53,\n                    (byte)0x5f,\n                    (byte)0xae,\n                    (byte)0x3b\n            }, {\n            (byte)0x21,\n            (byte)0x65,\n            (byte)0x59,\n            (byte)0x4e,\n            (byte)0xd8,\n            (byte)0x12,\n            (byte)0xf9,\n            (byte)0x05,\n            (byte)0x80,\n            (byte)0xe9,\n            (byte)0x1e,\n            (byte)0xed,\n            (byte)0xe4,\n            (byte)0x56,\n            (byte)0xbb\n    }, {\n            (byte)0x2b,\n            (byte)0x02,\n            (byte)0xb1,\n            (byte)0xd0,\n            (byte)0x3d,\n            (byte)0xce,\n            (byte)0x31,\n            (byte)0x3d,\n            (byte)0x97,\n            (byte)0xc4,\n            (byte)0x91,\n            (byte)0x0d,\n            (byte)0xf7,\n            (byte)0x17\n    }, {\n            (byte)0x8e,\n            (byte)0xa7,\n            (byte)0x9a,\n            (byte)0x02,\n            (byte)0xe8,\n            (byte)0xb9,\n            (byte)0x6a,\n            (byte)0xda,\n            (byte)0x92,\n            (byte)0xad,\n            (byte)0xe9,\n            (byte)0x2d,\n            (byte)0x21\n    }, {\n            (byte)0xa9,\n            (byte)0x6d,\n            (byte)0xea,\n            (byte)0x77,\n            (byte)0x06,\n            (byte)0xce,\n            (byte)0x1b,\n            (byte)0x85,\n            (byte)0x48,\n            (byte)0x27,\n            (byte)0x4c,\n            (byte)0xfe\n    }, {\n            (byte)0xec,\n            (byte)0x93,\n            (byte)0xa0,\n            (byte)0x12,\n            (byte)0x60,\n            (byte)0xee,\n            (byte)0xc8,\n            (byte)0x0a,\n            (byte)0xc5,\n            (byte)0x90,\n            (byte)0x62\n    }, {\n            (byte)0x55, (byte)0x6d, (byte)0x93, (byte)0x66, (byte)0x14, (byte)0x6d, (byte)0xdf, (byte)0x00, (byte)0x58, (byte)0x99\n    }, {\n            (byte)0x3c, (byte)0x72, (byte)0x20, (byte)0x1f, (byte)0xd2, (byte)0x59, (byte)0x19, (byte)0xdb, (byte)0xa1\n    }, {\n            (byte)0x23, (byte)0xa8, (byte)0xb1, (byte)0x87, (byte)0x55, (byte)0xf7, (byte)0x8a, (byte)0x4b,\n\n    }, {\n            (byte)0xe2, (byte)0x42, (byte)0x1c, (byte)0x2d, (byte)0xc1, (byte)0xe4, (byte)0x3e\n    }, {\n            (byte)0x66, (byte)0xa6, (byte)0xb5, (byte)0x5a, (byte)0x74, (byte)0xd9\n    }, {\n            (byte)0xe8, (byte)0x76, (byte)0xa8, (byte)0x90, (byte)0x76\n    }, {\n            (byte)0xeb, (byte)0x25, (byte)0x3f, (byte)0x87\n    }, {\n            (byte)0x37, (byte)0xa0, (byte)0xa9\n    }, {\n            (byte)0x5b, (byte)0x5d\n    }, {\n            (byte)0x7e\n    }, {}\n    };", "modifier": "static final", "type": "byte[][]", "declarator": "input = {\n            {\n                    (byte)0xed,\n                    (byte)0x53,\n                    (byte)0xc4,\n                    (byte)0xa5,\n                    (byte)0x3b,\n                    (byte)0x1b,\n                    (byte)0xbd,\n                    (byte)0xc2,\n                    (byte)0x52,\n                    (byte)0x7d,\n                    (byte)0xc3,\n                    (byte)0xef,\n                    (byte)0x53,\n                    (byte)0x5f,\n                    (byte)0xae,\n                    (byte)0x3b\n            }, {\n            (byte)0x21,\n            (byte)0x65,\n            (byte)0x59,\n            (byte)0x4e,\n            (byte)0xd8,\n            (byte)0x12,\n            (byte)0xf9,\n            (byte)0x05,\n            (byte)0x80,\n            (byte)0xe9,\n            (byte)0x1e,\n            (byte)0xed,\n            (byte)0xe4,\n            (byte)0x56,\n            (byte)0xbb\n    }, {\n            (byte)0x2b,\n            (byte)0x02,\n            (byte)0xb1,\n            (byte)0xd0,\n            (byte)0x3d,\n            (byte)0xce,\n            (byte)0x31,\n            (byte)0x3d,\n            (byte)0x97,\n            (byte)0xc4,\n            (byte)0x91,\n            (byte)0x0d,\n            (byte)0xf7,\n            (byte)0x17\n    }, {\n            (byte)0x8e,\n            (byte)0xa7,\n            (byte)0x9a,\n            (byte)0x02,\n            (byte)0xe8,\n            (byte)0xb9,\n            (byte)0x6a,\n            (byte)0xda,\n            (byte)0x92,\n            (byte)0xad,\n            (byte)0xe9,\n            (byte)0x2d,\n            (byte)0x21\n    }, {\n            (byte)0xa9,\n            (byte)0x6d,\n            (byte)0xea,\n            (byte)0x77,\n            (byte)0x06,\n            (byte)0xce,\n            (byte)0x1b,\n            (byte)0x85,\n            (byte)0x48,\n            (byte)0x27,\n            (byte)0x4c,\n            (byte)0xfe\n    }, {\n            (byte)0xec,\n            (byte)0x93,\n            (byte)0xa0,\n            (byte)0x12,\n            (byte)0x60,\n            (byte)0xee,\n            (byte)0xc8,\n            (byte)0x0a,\n            (byte)0xc5,\n            (byte)0x90,\n            (byte)0x62\n    }, {\n            (byte)0x55, (byte)0x6d, (byte)0x93, (byte)0x66, (byte)0x14, (byte)0x6d, (byte)0xdf, (byte)0x00, (byte)0x58, (byte)0x99\n    }, {\n            (byte)0x3c, (byte)0x72, (byte)0x20, (byte)0x1f, (byte)0xd2, (byte)0x59, (byte)0x19, (byte)0xdb, (byte)0xa1\n    }, {\n            (byte)0x23, (byte)0xa8, (byte)0xb1, (byte)0x87, (byte)0x55, (byte)0xf7, (byte)0x8a, (byte)0x4b,\n\n    }, {\n            (byte)0xe2, (byte)0x42, (byte)0x1c, (byte)0x2d, (byte)0xc1, (byte)0xe4, (byte)0x3e\n    }, {\n            (byte)0x66, (byte)0xa6, (byte)0xb5, (byte)0x5a, (byte)0x74, (byte)0xd9\n    }, {\n            (byte)0xe8, (byte)0x76, (byte)0xa8, (byte)0x90, (byte)0x76\n    }, {\n            (byte)0xeb, (byte)0x25, (byte)0x3f, (byte)0x87\n    }, {\n            (byte)0x37, (byte)0xa0, (byte)0xa9\n    }, {\n            (byte)0x5b, (byte)0x5d\n    }, {\n            (byte)0x7e\n    }, {}\n    }", "var_name": "input"}, {"original_string": "static final int[] results32_standard = {\n            0x96814fb3,\n            0x485dcaba,\n            0x331dc4ae,\n            0xc6a7bf2f,\n            0xcdf35de0,\n            0xd9dec7cc,\n            0x63a7318a,\n            0xd0d3c2de,\n            0x90923aef,\n            0xaf35c1e2,\n            0x735377b2,\n            0x366c98f3,\n            0x9c48ee29,\n            0x0b615790,\n            0xb4308ac1,\n            0xec98125a,\n            0x106e08d9\n    };", "modifier": "static final", "type": "int[]", "declarator": "results32_standard = {\n            0x96814fb3,\n            0x485dcaba,\n            0x331dc4ae,\n            0xc6a7bf2f,\n            0xcdf35de0,\n            0xd9dec7cc,\n            0x63a7318a,\n            0xd0d3c2de,\n            0x90923aef,\n            0xaf35c1e2,\n            0x735377b2,\n            0x366c98f3,\n            0x9c48ee29,\n            0x0b615790,\n            0xb4308ac1,\n            0xec98125a,\n            0x106e08d9\n    }", "var_name": "results32_standard"}, {"original_string": "static final int[] results32_seed = {\n            0xd92e493e,\n            0x8b50903b,\n            0xc3372a7b,\n            0x48f07e9e,\n            0x8a5e4a6e,\n            0x57916df4,\n            0xa346171f,\n            0x1e319c86,\n            0x9e1a03cd,\n            0x9f973e6c,\n            0x2d8c77f5,\n            0xabed8751,\n            0x296708b6,\n            0x24f8078b,\n            0x111b1553,\n            0xa7da1996,\n            0xfe776c70\n    };", "modifier": "static final", "type": "int[]", "declarator": "results32_seed = {\n            0xd92e493e,\n            0x8b50903b,\n            0xc3372a7b,\n            0x48f07e9e,\n            0x8a5e4a6e,\n            0x57916df4,\n            0xa346171f,\n            0x1e319c86,\n            0x9e1a03cd,\n            0x9f973e6c,\n            0x2d8c77f5,\n            0xabed8751,\n            0x296708b6,\n            0x24f8078b,\n            0x111b1553,\n            0xa7da1996,\n            0xfe776c70\n    }", "var_name": "results32_seed"}, {"original_string": "static final long[] results64_standard = {\n            0x4987cb15118a83d9l,\n            0x28e2a79e3f0394d9l,\n            0x8f4600d786fc5c05l,\n            0xa09b27fea4b54af3l,\n            0x25f34447525bfd1el,\n            0x32fad4c21379c7bfl,\n            0x4b30b99a9d931921l,\n            0x4e5dab004f936cdbl,\n            0x06825c27bc96cf40l,\n            0xff4bf2f8a4823905l,\n            0x7f7e950c064e6367l,\n            0x821ade90caaa5889l,\n            0x6d28c915d791686al,\n            0x9c32649372163ba2l,\n            0xd66ae956c14d5212l,\n            0x38ed30ee5161200fl,\n            0x9bfae0a4e613fc3cl,\n    };", "modifier": "static final", "type": "long[]", "declarator": "results64_standard = {\n            0x4987cb15118a83d9l,\n            0x28e2a79e3f0394d9l,\n            0x8f4600d786fc5c05l,\n            0xa09b27fea4b54af3l,\n            0x25f34447525bfd1el,\n            0x32fad4c21379c7bfl,\n            0x4b30b99a9d931921l,\n            0x4e5dab004f936cdbl,\n            0x06825c27bc96cf40l,\n            0xff4bf2f8a4823905l,\n            0x7f7e950c064e6367l,\n            0x821ade90caaa5889l,\n            0x6d28c915d791686al,\n            0x9c32649372163ba2l,\n            0xd66ae956c14d5212l,\n            0x38ed30ee5161200fl,\n            0x9bfae0a4e613fc3cl,\n    }", "var_name": "results64_standard"}, {"original_string": "static final long[] results64_seed = {\n            0x0822b1481a92e97bl,\n            0xf8a9223fef0822ddl,\n            0x4b49e56affae3a89l,\n            0xc970296e32e1d1c1l,\n            0xe2f9f88789f1b08fl,\n            0x2b0459d9b4c10c61l,\n            0x377e97ea9197ee89l,\n            0xd2ccad460751e0e7l,\n            0xff162ca8d6da8c47l,\n            0xf12e051405769857l,\n            0xdabba41293d5b035l,\n            0xacf326b0bb690d0el,\n            0x0617f431bc1a8e04l,\n            0x15b81f28d576e1b2l,\n            0x28c1fe59e4f8e5bal,\n            0x694dd315c9354ca9l,\n            0xa97052a8f088ae6cl\n    };", "modifier": "static final", "type": "long[]", "declarator": "results64_seed = {\n            0x0822b1481a92e97bl,\n            0xf8a9223fef0822ddl,\n            0x4b49e56affae3a89l,\n            0xc970296e32e1d1c1l,\n            0xe2f9f88789f1b08fl,\n            0x2b0459d9b4c10c61l,\n            0x377e97ea9197ee89l,\n            0xd2ccad460751e0e7l,\n            0xff162ca8d6da8c47l,\n            0xf12e051405769857l,\n            0xdabba41293d5b035l,\n            0xacf326b0bb690d0el,\n            0x0617f431bc1a8e04l,\n            0x15b81f28d576e1b2l,\n            0x28c1fe59e4f8e5bal,\n            0x694dd315c9354ca9l,\n            0xa97052a8f088ae6cl\n    }", "var_name": "results64_seed"}, {"original_string": "static final String text = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit\";", "modifier": "static final", "type": "String", "declarator": "text = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit\"", "var_name": "text"}], "file": "util-core/src/test/java/com/indeed/util/core/hash/TestMurmurHash.java"}, "test_case": {"identifier": "testHash64String", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHash64String() {\n        long hash = MurmurHash.hash64(text);\n        assertTrue(hash == 0x0920e0c1b7eeb261l);\n    }", "signature": "void testHash64String()", "full_signature": "@Test public void testHash64String()", "class_method_signature": "TestMurmurHash.testHash64String()", "testcase": true, "constructor": false, "invocations": ["hash64", "assertTrue"]}, "focal_class": {"identifier": "MurmurHash", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int SEED32 = 0x9747b28c;", "modifier": "public static final", "type": "int", "declarator": "SEED32 = 0x9747b28c", "var_name": "SEED32"}, {"original_string": "public static final int SEED64 = 0xe17a1465;", "modifier": "public static final", "type": "int", "declarator": "SEED64 = 0xe17a1465", "var_name": "SEED64"}], "methods": [{"identifier": "hash32", "parameters": "(final byte[] data, int start, int length, int seed)", "modifiers": "public static", "return": "int", "signature": "int hash32(final byte[] data, int start, int length, int seed)", "full_signature": "public static int hash32(final byte[] data, int start, int length, int seed)", "class_method_signature": "MurmurHash.hash32(final byte[] data, int start, int length, int seed)", "testcase": false, "constructor": false}, {"identifier": "hash32", "parameters": "(final byte[] data, int seed)", "modifiers": "public static", "return": "int", "signature": "int hash32(final byte[] data, int seed)", "full_signature": "public static int hash32(final byte[] data, int seed)", "class_method_signature": "MurmurHash.hash32(final byte[] data, int seed)", "testcase": false, "constructor": false}, {"identifier": "hash32", "parameters": "(final byte[] data, int start, int length)", "modifiers": "public static", "return": "int", "signature": "int hash32(final byte[] data, int start, int length)", "full_signature": "public static int hash32(final byte[] data, int start, int length)", "class_method_signature": "MurmurHash.hash32(final byte[] data, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "hash32", "parameters": "(final byte[] data)", "modifiers": "public static", "return": "int", "signature": "int hash32(final byte[] data)", "full_signature": "public static int hash32(final byte[] data)", "class_method_signature": "MurmurHash.hash32(final byte[] data)", "testcase": false, "constructor": false}, {"identifier": "hash32", "parameters": "(final String text)", "modifiers": "public static", "return": "int", "signature": "int hash32(final String text)", "full_signature": "public static int hash32(final String text)", "class_method_signature": "MurmurHash.hash32(final String text)", "testcase": false, "constructor": false}, {"identifier": "hash32", "parameters": "(final String text, int from, int length)", "modifiers": "public static", "return": "int", "signature": "int hash32(final String text, int from, int length)", "full_signature": "public static int hash32(final String text, int from, int length)", "class_method_signature": "MurmurHash.hash32(final String text, int from, int length)", "testcase": false, "constructor": false}, {"identifier": "hash64", "parameters": "(final byte[] data, int seed)", "modifiers": "public static", "return": "long", "signature": "long hash64(final byte[] data, int seed)", "full_signature": "public static long hash64(final byte[] data, int seed)", "class_method_signature": "MurmurHash.hash64(final byte[] data, int seed)", "testcase": false, "constructor": false}, {"identifier": "hash64", "parameters": "(final byte[] data)", "modifiers": "public static", "return": "long", "signature": "long hash64(final byte[] data)", "full_signature": "public static long hash64(final byte[] data)", "class_method_signature": "MurmurHash.hash64(final byte[] data)", "testcase": false, "constructor": false}, {"identifier": "hash64", "parameters": "(final String text)", "modifiers": "public static", "return": "long", "signature": "long hash64(final String text)", "full_signature": "public static long hash64(final String text)", "class_method_signature": "MurmurHash.hash64(final String text)", "testcase": false, "constructor": false}, {"identifier": "hash64", "parameters": "(final String text, int from, int length)", "modifiers": "public static", "return": "long", "signature": "long hash64(final String text, int from, int length)", "full_signature": "public static long hash64(final String text, int from, int length)", "class_method_signature": "MurmurHash.hash64(final String text, int from, int length)", "testcase": false, "constructor": false}], "file": "util-core/src/main/java/com/indeed/util/core/hash/MurmurHash.java"}, "focal_method": {"identifier": "hash64", "parameters": "(final byte[] data, int seed)", "modifiers": "public static", "return": "long", "body": "public static long hash64(final byte[] data, int seed) {\n        final long m = 0xc6a4a7935bd1e995L;\n        final int r = 47;\n        long h = (seed & 0xffffffffl) ^ (data.length * m);\n        int length8 = data.length / 8;\n        for (int i = 0; i < length8; i++) {\n            final int i8 = i * 8;\n            long\n                    k =\n                    ((long)data[i8] & 0xff) +\n                            (((long)data[i8 + 1] & 0xff) << 8) +\n                            (((long)data[i8 + 2] & 0xff) << 16) +\n                            (((long)data[i8 + 3] & 0xff) << 24) +\n                            (((long)data[i8 + 4] & 0xff) << 32) +\n                            (((long)data[i8 + 5] & 0xff) << 40) +\n                            (((long)data[i8 + 6] & 0xff) << 48) +\n                            (((long)data[i8 + 7] & 0xff) << 56);\n            k *= m;\n            k ^= k >>> r;\n            k *= m;\n            h ^= k;\n            h *= m;\n        }\n        switch (data.length % 8) {\n            case 7:\n                h ^= (long)(data[(data.length & ~7) + 6] & 0xff) << 48;\n            case 6:\n                h ^= (long)(data[(data.length & ~7) + 5] & 0xff) << 40;\n            case 5:\n                h ^= (long)(data[(data.length & ~7) + 4] & 0xff) << 32;\n            case 4:\n                h ^= (long)(data[(data.length & ~7) + 3] & 0xff) << 24;\n            case 3:\n                h ^= (long)(data[(data.length & ~7) + 2] & 0xff) << 16;\n            case 2:\n                h ^= (long)(data[(data.length & ~7) + 1] & 0xff) << 8;\n            case 1:\n                h ^= (long)(data[data.length & ~7] & 0xff);\n                h *= m;\n        }\n        h ^= h >>> r;\n        h *= m;\n        h ^= h >>> r;\n        return h;\n    }", "signature": "long hash64(final byte[] data, int seed)", "full_signature": "public static long hash64(final byte[] data, int seed)", "class_method_signature": "MurmurHash.hash64(final byte[] data, int seed)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 13075106, "url": "https://github.com/indeedeng/util", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 121, "size": 13223, "license": "licensed"}}