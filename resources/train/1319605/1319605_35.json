{"test_class": {"identifier": "DomainValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DomainValidator validator;", "modifier": "private", "type": "DomainValidator", "declarator": "validator", "var_name": "validator"}], "file": "bval-extras/src/test/java/org/apache/bval/extras/constraints/net/DomainValidatorTest.java"}, "test_case": {"identifier": "testIDN", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIDN() {\n        assertTrue(\"b\\u00fccher.ch in IDN should validate\", validator.isValid(\"www.xn--bcher-kva.ch\", null));\n    }", "signature": "void testIDN()", "full_signature": "@Test public void testIDN()", "class_method_signature": "DomainValidatorTest.testIDN()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isValid"]}, "focal_class": {"identifier": "DomainValidator", "superclass": "", "interfaces": "implements ConstraintValidator<Domain, CharSequence>", "fields": [{"original_string": "private boolean allowLocal;", "modifier": "private", "type": "boolean", "declarator": "allowLocal", "var_name": "allowLocal"}, {"original_string": "private static final Pattern DOMAIN_LABEL = Pattern.compile(\"\\\\p{Alnum}(?>[\\\\p{Alnum}-]*\\\\p{Alnum})*\");", "modifier": "private static final", "type": "Pattern", "declarator": "DOMAIN_LABEL = Pattern.compile(\"\\\\p{Alnum}(?>[\\\\p{Alnum}-]*\\\\p{Alnum})*\")", "var_name": "DOMAIN_LABEL"}, {"original_string": "private static final Pattern DOMAIN_NAME_REGEX =\n        Pattern.compile(\"^(?:\" + DOMAIN_LABEL.pattern() + \"\\\\.)+(\\\\p{Alpha}{2,})$\");", "modifier": "private static final", "type": "Pattern", "declarator": "DOMAIN_NAME_REGEX =\n        Pattern.compile(\"^(?:\" + DOMAIN_LABEL.pattern() + \"\\\\.)+(\\\\p{Alpha}{2,})$\")", "var_name": "DOMAIN_NAME_REGEX"}, {"original_string": "private static final Set<String> INFRASTRUCTURE_TLDS = new HashSet<>(Arrays.asList(\"arpa\", // internet infrastructure\n        \"root\" // diagnostic marker for non-truncated root zone\n    ));", "modifier": "private static final", "type": "Set<String>", "declarator": "INFRASTRUCTURE_TLDS = new HashSet<>(Arrays.asList(\"arpa\", // internet infrastructure\n        \"root\" // diagnostic marker for non-truncated root zone\n    ))", "var_name": "INFRASTRUCTURE_TLDS"}, {"original_string": "private static final Set<String> GENERIC_TLDS = new HashSet<>(Arrays.asList(\"aero\", // air transport industry\n        \"asia\", // Pan-Asia/Asia Pacific\n        \"biz\", // businesses\n        \"cat\", // Catalan linguistic/cultural community\n        \"com\", // commercial enterprises\n        \"coop\", // cooperative associations\n        \"info\", // informational sites\n        \"jobs\", // Human Resource managers\n        \"mobi\", // mobile products and services\n        \"museum\", // museums, surprisingly enough\n        \"name\", // individuals' sites\n        \"net\", // internet support infrastructure/business\n        \"org\", // noncommercial organizations\n        \"pro\", // credentialed professionals and entities\n        \"tel\", // contact data for businesses and individuals\n        \"travel\", // entities in the travel industry\n        \"gov\", // United States Government\n        \"edu\", // accredited postsecondary US education entities\n        \"mil\", // United States Military\n        \"int\" // organizations established by international treaty\n    ));", "modifier": "private static final", "type": "Set<String>", "declarator": "GENERIC_TLDS = new HashSet<>(Arrays.asList(\"aero\", // air transport industry\n        \"asia\", // Pan-Asia/Asia Pacific\n        \"biz\", // businesses\n        \"cat\", // Catalan linguistic/cultural community\n        \"com\", // commercial enterprises\n        \"coop\", // cooperative associations\n        \"info\", // informational sites\n        \"jobs\", // Human Resource managers\n        \"mobi\", // mobile products and services\n        \"museum\", // museums, surprisingly enough\n        \"name\", // individuals' sites\n        \"net\", // internet support infrastructure/business\n        \"org\", // noncommercial organizations\n        \"pro\", // credentialed professionals and entities\n        \"tel\", // contact data for businesses and individuals\n        \"travel\", // entities in the travel industry\n        \"gov\", // United States Government\n        \"edu\", // accredited postsecondary US education entities\n        \"mil\", // United States Military\n        \"int\" // organizations established by international treaty\n    ))", "var_name": "GENERIC_TLDS"}, {"original_string": "private static final Set<String> COUNTRY_CODE_TLDS = new HashSet<>(Arrays.asList(\"ac\", // Ascension Island\n        \"ad\", // Andorra\n        \"ae\", // United Arab Emirates\n        \"af\", // Afghanistan\n        \"ag\", // Antigua and Barbuda\n        \"ai\", // Anguilla\n        \"al\", // Albania\n        \"am\", // Armenia\n        \"an\", // Netherlands Antilles\n        \"ao\", // Angola\n        \"aq\", // Antarctica\n        \"ar\", // Argentina\n        \"as\", // American Samoa\n        \"at\", // Austria\n        \"au\", // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)\n        \"aw\", // Aruba\n        \"ax\", // \u00c5land\n        \"az\", // Azerbaijan\n        \"ba\", // Bosnia and Herzegovina\n        \"bb\", // Barbados\n        \"bd\", // Bangladesh\n        \"be\", // Belgium\n        \"bf\", // Burkina Faso\n        \"bg\", // Bulgaria\n        \"bh\", // Bahrain\n        \"bi\", // Burundi\n        \"bj\", // Benin\n        \"bm\", // Bermuda\n        \"bn\", // Brunei Darussalam\n        \"bo\", // Bolivia\n        \"br\", // Brazil\n        \"bs\", // Bahamas\n        \"bt\", // Bhutan\n        \"bv\", // Bouvet Island\n        \"bw\", // Botswana\n        \"by\", // Belarus\n        \"bz\", // Belize\n        \"ca\", // Canada\n        \"cc\", // Cocos (Keeling) Islands\n        \"cd\", // Democratic Republic of the Congo (formerly Zaire)\n        \"cf\", // Central African Republic\n        \"cg\", // Republic of the Congo\n        \"ch\", // Switzerland\n        \"ci\", // C\u00f4te d'Ivoire\n        \"ck\", // Cook Islands\n        \"cl\", // Chile\n        \"cm\", // Cameroon\n        \"cn\", // China, mainland\n        \"co\", // Colombia\n        \"cr\", // Costa Rica\n        \"cu\", // Cuba\n        \"cv\", // Cape Verde\n        \"cx\", // Christmas Island\n        \"cy\", // Cyprus\n        \"cz\", // Czech Republic\n        \"de\", // Germany\n        \"dj\", // Djibouti\n        \"dk\", // Denmark\n        \"dm\", // Dominica\n        \"do\", // Dominican Republic\n        \"dz\", // Algeria\n        \"ec\", // Ecuador\n        \"ee\", // Estonia\n        \"eg\", // Egypt\n        \"er\", // Eritrea\n        \"es\", // Spain\n        \"et\", // Ethiopia\n        \"eu\", // European Union\n        \"fi\", // Finland\n        \"fj\", // Fiji\n        \"fk\", // Falkland Islands\n        \"fm\", // Federated States of Micronesia\n        \"fo\", // Faroe Islands\n        \"fr\", // France\n        \"ga\", // Gabon\n        \"gb\", // Great Britain (United Kingdom)\n        \"gd\", // Grenada\n        \"ge\", // Georgia\n        \"gf\", // French Guiana\n        \"gg\", // Guernsey\n        \"gh\", // Ghana\n        \"gi\", // Gibraltar\n        \"gl\", // Greenland\n        \"gm\", // The Gambia\n        \"gn\", // Guinea\n        \"gp\", // Guadeloupe\n        \"gq\", // Equatorial Guinea\n        \"gr\", // Greece\n        \"gs\", // South Georgia and the South Sandwich Islands\n        \"gt\", // Guatemala\n        \"gu\", // Guam\n        \"gw\", // Guinea-Bissau\n        \"gy\", // Guyana\n        \"hk\", // Hong Kong\n        \"hm\", // Heard Island and McDonald Islands\n        \"hn\", // Honduras\n        \"hr\", // Croatia (Hrvatska)\n        \"ht\", // Haiti\n        \"hu\", // Hungary\n        \"id\", // Indonesia\n        \"ie\", // Ireland (\u00c9ire)\n        \"il\", // Israel\n        \"im\", // Isle of Man\n        \"in\", // India\n        \"io\", // British Indian Ocean Territory\n        \"iq\", // Iraq\n        \"ir\", // Iran\n        \"is\", // Iceland\n        \"it\", // Italy\n        \"je\", // Jersey\n        \"jm\", // Jamaica\n        \"jo\", // Jordan\n        \"jp\", // Japan\n        \"ke\", // Kenya\n        \"kg\", // Kyrgyzstan\n        \"kh\", // Cambodia (Khmer)\n        \"ki\", // Kiribati\n        \"km\", // Comoros\n        \"kn\", // Saint Kitts and Nevis\n        \"kp\", // North Korea\n        \"kr\", // South Korea\n        \"kw\", // Kuwait\n        \"ky\", // Cayman Islands\n        \"kz\", // Kazakhstan\n        \"la\", // Laos (currently being marketed as the official domain for Los Angeles)\n        \"lb\", // Lebanon\n        \"lc\", // Saint Lucia\n        \"li\", // Liechtenstein\n        \"lk\", // Sri Lanka\n        \"lr\", // Liberia\n        \"ls\", // Lesotho\n        \"lt\", // Lithuania\n        \"lu\", // Luxembourg\n        \"lv\", // Latvia\n        \"ly\", // Libya\n        \"ma\", // Morocco\n        \"mc\", // Monaco\n        \"md\", // Moldova\n        \"me\", // Montenegro\n        \"mg\", // Madagascar\n        \"mh\", // Marshall Islands\n        \"mk\", // Republic of Macedonia\n        \"ml\", // Mali\n        \"mm\", // Myanmar\n        \"mn\", // Mongolia\n        \"mo\", // Macau\n        \"mp\", // Northern Mariana Islands\n        \"mq\", // Martinique\n        \"mr\", // Mauritania\n        \"ms\", // Montserrat\n        \"mt\", // Malta\n        \"mu\", // Mauritius\n        \"mv\", // Maldives\n        \"mw\", // Malawi\n        \"mx\", // Mexico\n        \"my\", // Malaysia\n        \"mz\", // Mozambique\n        \"na\", // Namibia\n        \"nc\", // New Caledonia\n        \"ne\", // Niger\n        \"nf\", // Norfolk Island\n        \"ng\", // Nigeria\n        \"ni\", // Nicaragua\n        \"nl\", // Netherlands\n        \"no\", // Norway\n        \"np\", // Nepal\n        \"nr\", // Nauru\n        \"nu\", // Niue\n        \"nz\", // New Zealand\n        \"om\", // Oman\n        \"pa\", // Panama\n        \"pe\", // Peru\n        \"pf\", // French Polynesia With Clipperton Island\n        \"pg\", // Papua New Guinea\n        \"ph\", // Philippines\n        \"pk\", // Pakistan\n        \"pl\", // Poland\n        \"pm\", // Saint-Pierre and Miquelon\n        \"pn\", // Pitcairn Islands\n        \"pr\", // Puerto Rico\n        \"ps\", // Palestinian territories (PA-controlled West Bank and Gaza Strip)\n        \"pt\", // Portugal\n        \"pw\", // Palau\n        \"py\", // Paraguay\n        \"qa\", // Qatar\n        \"re\", // R\u00e9union\n        \"ro\", // Romania\n        \"rs\", // Serbia\n        \"ru\", // Russia\n        \"rw\", // Rwanda\n        \"sa\", // Saudi Arabia\n        \"sb\", // Solomon Islands\n        \"sc\", // Seychelles\n        \"sd\", // Sudan\n        \"se\", // Sweden\n        \"sg\", // Singapore\n        \"sh\", // Saint Helena\n        \"si\", // Slovenia\n        \"sj\", // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)\n        \"sk\", // Slovakia\n        \"sl\", // Sierra Leone\n        \"sm\", // San Marino\n        \"sn\", // Senegal\n        \"so\", // Somalia\n        \"sr\", // Suriname\n        \"st\", // S\u00e3o Tom\u00e9 and Pr\u00edncipe\n        \"su\", // Soviet Union (deprecated)\n        \"sv\", // El Salvador\n        \"sy\", // Syria\n        \"sz\", // Swaziland\n        \"tc\", // Turks and Caicos Islands\n        \"td\", // Chad\n        \"tf\", // French Southern and Antarctic Lands\n        \"tg\", // Togo\n        \"th\", // Thailand\n        \"tj\", // Tajikistan\n        \"tk\", // Tokelau\n        \"tl\", // East Timor (deprecated old code)\n        \"tm\", // Turkmenistan\n        \"tn\", // Tunisia\n        \"to\", // Tonga\n        \"tp\", // East Timor\n        \"tr\", // Turkey\n        \"tt\", // Trinidad and Tobago\n        \"tv\", // Tuvalu\n        \"tw\", // Taiwan, Republic of China\n        \"tz\", // Tanzania\n        \"ua\", // Ukraine\n        \"ug\", // Uganda\n        \"uk\", // United Kingdom\n        \"um\", // United States Minor Outlying Islands\n        \"us\", // United States of America\n        \"uy\", // Uruguay\n        \"uz\", // Uzbekistan\n        \"va\", // Vatican City State\n        \"vc\", // Saint Vincent and the Grenadines\n        \"ve\", // Venezuela\n        \"vg\", // British Virgin Islands\n        \"vi\", // U.S. Virgin Islands\n        \"vn\", // Vietnam\n        \"vu\", // Vanuatu\n        \"wf\", // Wallis and Futuna\n        \"ws\", // Samoa (formerly Western Samoa)\n        \"ye\", // Yemen\n        \"yt\", // Mayotte\n        \"yu\", // Serbia and Montenegro (originally Yugoslavia)\n        \"za\", // South Africa\n        \"zm\", // Zambia\n        \"zw\" // Zimbabwe\n    ));", "modifier": "private static final", "type": "Set<String>", "declarator": "COUNTRY_CODE_TLDS = new HashSet<>(Arrays.asList(\"ac\", // Ascension Island\n        \"ad\", // Andorra\n        \"ae\", // United Arab Emirates\n        \"af\", // Afghanistan\n        \"ag\", // Antigua and Barbuda\n        \"ai\", // Anguilla\n        \"al\", // Albania\n        \"am\", // Armenia\n        \"an\", // Netherlands Antilles\n        \"ao\", // Angola\n        \"aq\", // Antarctica\n        \"ar\", // Argentina\n        \"as\", // American Samoa\n        \"at\", // Austria\n        \"au\", // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)\n        \"aw\", // Aruba\n        \"ax\", // \u00c5land\n        \"az\", // Azerbaijan\n        \"ba\", // Bosnia and Herzegovina\n        \"bb\", // Barbados\n        \"bd\", // Bangladesh\n        \"be\", // Belgium\n        \"bf\", // Burkina Faso\n        \"bg\", // Bulgaria\n        \"bh\", // Bahrain\n        \"bi\", // Burundi\n        \"bj\", // Benin\n        \"bm\", // Bermuda\n        \"bn\", // Brunei Darussalam\n        \"bo\", // Bolivia\n        \"br\", // Brazil\n        \"bs\", // Bahamas\n        \"bt\", // Bhutan\n        \"bv\", // Bouvet Island\n        \"bw\", // Botswana\n        \"by\", // Belarus\n        \"bz\", // Belize\n        \"ca\", // Canada\n        \"cc\", // Cocos (Keeling) Islands\n        \"cd\", // Democratic Republic of the Congo (formerly Zaire)\n        \"cf\", // Central African Republic\n        \"cg\", // Republic of the Congo\n        \"ch\", // Switzerland\n        \"ci\", // C\u00f4te d'Ivoire\n        \"ck\", // Cook Islands\n        \"cl\", // Chile\n        \"cm\", // Cameroon\n        \"cn\", // China, mainland\n        \"co\", // Colombia\n        \"cr\", // Costa Rica\n        \"cu\", // Cuba\n        \"cv\", // Cape Verde\n        \"cx\", // Christmas Island\n        \"cy\", // Cyprus\n        \"cz\", // Czech Republic\n        \"de\", // Germany\n        \"dj\", // Djibouti\n        \"dk\", // Denmark\n        \"dm\", // Dominica\n        \"do\", // Dominican Republic\n        \"dz\", // Algeria\n        \"ec\", // Ecuador\n        \"ee\", // Estonia\n        \"eg\", // Egypt\n        \"er\", // Eritrea\n        \"es\", // Spain\n        \"et\", // Ethiopia\n        \"eu\", // European Union\n        \"fi\", // Finland\n        \"fj\", // Fiji\n        \"fk\", // Falkland Islands\n        \"fm\", // Federated States of Micronesia\n        \"fo\", // Faroe Islands\n        \"fr\", // France\n        \"ga\", // Gabon\n        \"gb\", // Great Britain (United Kingdom)\n        \"gd\", // Grenada\n        \"ge\", // Georgia\n        \"gf\", // French Guiana\n        \"gg\", // Guernsey\n        \"gh\", // Ghana\n        \"gi\", // Gibraltar\n        \"gl\", // Greenland\n        \"gm\", // The Gambia\n        \"gn\", // Guinea\n        \"gp\", // Guadeloupe\n        \"gq\", // Equatorial Guinea\n        \"gr\", // Greece\n        \"gs\", // South Georgia and the South Sandwich Islands\n        \"gt\", // Guatemala\n        \"gu\", // Guam\n        \"gw\", // Guinea-Bissau\n        \"gy\", // Guyana\n        \"hk\", // Hong Kong\n        \"hm\", // Heard Island and McDonald Islands\n        \"hn\", // Honduras\n        \"hr\", // Croatia (Hrvatska)\n        \"ht\", // Haiti\n        \"hu\", // Hungary\n        \"id\", // Indonesia\n        \"ie\", // Ireland (\u00c9ire)\n        \"il\", // Israel\n        \"im\", // Isle of Man\n        \"in\", // India\n        \"io\", // British Indian Ocean Territory\n        \"iq\", // Iraq\n        \"ir\", // Iran\n        \"is\", // Iceland\n        \"it\", // Italy\n        \"je\", // Jersey\n        \"jm\", // Jamaica\n        \"jo\", // Jordan\n        \"jp\", // Japan\n        \"ke\", // Kenya\n        \"kg\", // Kyrgyzstan\n        \"kh\", // Cambodia (Khmer)\n        \"ki\", // Kiribati\n        \"km\", // Comoros\n        \"kn\", // Saint Kitts and Nevis\n        \"kp\", // North Korea\n        \"kr\", // South Korea\n        \"kw\", // Kuwait\n        \"ky\", // Cayman Islands\n        \"kz\", // Kazakhstan\n        \"la\", // Laos (currently being marketed as the official domain for Los Angeles)\n        \"lb\", // Lebanon\n        \"lc\", // Saint Lucia\n        \"li\", // Liechtenstein\n        \"lk\", // Sri Lanka\n        \"lr\", // Liberia\n        \"ls\", // Lesotho\n        \"lt\", // Lithuania\n        \"lu\", // Luxembourg\n        \"lv\", // Latvia\n        \"ly\", // Libya\n        \"ma\", // Morocco\n        \"mc\", // Monaco\n        \"md\", // Moldova\n        \"me\", // Montenegro\n        \"mg\", // Madagascar\n        \"mh\", // Marshall Islands\n        \"mk\", // Republic of Macedonia\n        \"ml\", // Mali\n        \"mm\", // Myanmar\n        \"mn\", // Mongolia\n        \"mo\", // Macau\n        \"mp\", // Northern Mariana Islands\n        \"mq\", // Martinique\n        \"mr\", // Mauritania\n        \"ms\", // Montserrat\n        \"mt\", // Malta\n        \"mu\", // Mauritius\n        \"mv\", // Maldives\n        \"mw\", // Malawi\n        \"mx\", // Mexico\n        \"my\", // Malaysia\n        \"mz\", // Mozambique\n        \"na\", // Namibia\n        \"nc\", // New Caledonia\n        \"ne\", // Niger\n        \"nf\", // Norfolk Island\n        \"ng\", // Nigeria\n        \"ni\", // Nicaragua\n        \"nl\", // Netherlands\n        \"no\", // Norway\n        \"np\", // Nepal\n        \"nr\", // Nauru\n        \"nu\", // Niue\n        \"nz\", // New Zealand\n        \"om\", // Oman\n        \"pa\", // Panama\n        \"pe\", // Peru\n        \"pf\", // French Polynesia With Clipperton Island\n        \"pg\", // Papua New Guinea\n        \"ph\", // Philippines\n        \"pk\", // Pakistan\n        \"pl\", // Poland\n        \"pm\", // Saint-Pierre and Miquelon\n        \"pn\", // Pitcairn Islands\n        \"pr\", // Puerto Rico\n        \"ps\", // Palestinian territories (PA-controlled West Bank and Gaza Strip)\n        \"pt\", // Portugal\n        \"pw\", // Palau\n        \"py\", // Paraguay\n        \"qa\", // Qatar\n        \"re\", // R\u00e9union\n        \"ro\", // Romania\n        \"rs\", // Serbia\n        \"ru\", // Russia\n        \"rw\", // Rwanda\n        \"sa\", // Saudi Arabia\n        \"sb\", // Solomon Islands\n        \"sc\", // Seychelles\n        \"sd\", // Sudan\n        \"se\", // Sweden\n        \"sg\", // Singapore\n        \"sh\", // Saint Helena\n        \"si\", // Slovenia\n        \"sj\", // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)\n        \"sk\", // Slovakia\n        \"sl\", // Sierra Leone\n        \"sm\", // San Marino\n        \"sn\", // Senegal\n        \"so\", // Somalia\n        \"sr\", // Suriname\n        \"st\", // S\u00e3o Tom\u00e9 and Pr\u00edncipe\n        \"su\", // Soviet Union (deprecated)\n        \"sv\", // El Salvador\n        \"sy\", // Syria\n        \"sz\", // Swaziland\n        \"tc\", // Turks and Caicos Islands\n        \"td\", // Chad\n        \"tf\", // French Southern and Antarctic Lands\n        \"tg\", // Togo\n        \"th\", // Thailand\n        \"tj\", // Tajikistan\n        \"tk\", // Tokelau\n        \"tl\", // East Timor (deprecated old code)\n        \"tm\", // Turkmenistan\n        \"tn\", // Tunisia\n        \"to\", // Tonga\n        \"tp\", // East Timor\n        \"tr\", // Turkey\n        \"tt\", // Trinidad and Tobago\n        \"tv\", // Tuvalu\n        \"tw\", // Taiwan, Republic of China\n        \"tz\", // Tanzania\n        \"ua\", // Ukraine\n        \"ug\", // Uganda\n        \"uk\", // United Kingdom\n        \"um\", // United States Minor Outlying Islands\n        \"us\", // United States of America\n        \"uy\", // Uruguay\n        \"uz\", // Uzbekistan\n        \"va\", // Vatican City State\n        \"vc\", // Saint Vincent and the Grenadines\n        \"ve\", // Venezuela\n        \"vg\", // British Virgin Islands\n        \"vi\", // U.S. Virgin Islands\n        \"vn\", // Vietnam\n        \"vu\", // Vanuatu\n        \"wf\", // Wallis and Futuna\n        \"ws\", // Samoa (formerly Western Samoa)\n        \"ye\", // Yemen\n        \"yt\", // Mayotte\n        \"yu\", // Serbia and Montenegro (originally Yugoslavia)\n        \"za\", // South Africa\n        \"zm\", // Zambia\n        \"zw\" // Zimbabwe\n    ))", "var_name": "COUNTRY_CODE_TLDS"}, {"original_string": "private static final Set<String> LOCAL_TLDS = new HashSet<>(Arrays.asList(\"localhost\", // RFC2606 defined\n        \"localdomain\" // Also widely used as localhost.localdomain\n    ));", "modifier": "private static final", "type": "Set<String>", "declarator": "LOCAL_TLDS = new HashSet<>(Arrays.asList(\"localhost\", // RFC2606 defined\n        \"localdomain\" // Also widely used as localhost.localdomain\n    ))", "var_name": "LOCAL_TLDS"}], "methods": [{"identifier": "isValid", "parameters": "(CharSequence domain, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(CharSequence domain, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(CharSequence domain, ConstraintValidatorContext context)", "class_method_signature": "DomainValidator.isValid(CharSequence domain, ConstraintValidatorContext context)", "testcase": false, "constructor": false}, {"identifier": "isValidTld", "parameters": "(String tld)", "modifiers": "", "return": "boolean", "signature": "boolean isValidTld(String tld)", "full_signature": " boolean isValidTld(String tld)", "class_method_signature": "DomainValidator.isValidTld(String tld)", "testcase": false, "constructor": false}, {"identifier": "isValidInfrastructureTld", "parameters": "(String iTld)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidInfrastructureTld(String iTld)", "full_signature": "static boolean isValidInfrastructureTld(String iTld)", "class_method_signature": "DomainValidator.isValidInfrastructureTld(String iTld)", "testcase": false, "constructor": false}, {"identifier": "isValidGenericTld", "parameters": "(String gTld)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidGenericTld(String gTld)", "full_signature": "static boolean isValidGenericTld(String gTld)", "class_method_signature": "DomainValidator.isValidGenericTld(String gTld)", "testcase": false, "constructor": false}, {"identifier": "isValidCountryCodeTld", "parameters": "(String ccTld)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidCountryCodeTld(String ccTld)", "full_signature": "static boolean isValidCountryCodeTld(String ccTld)", "class_method_signature": "DomainValidator.isValidCountryCodeTld(String ccTld)", "testcase": false, "constructor": false}, {"identifier": "isValidLocalTld", "parameters": "(String iTld)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidLocalTld(String iTld)", "full_signature": "static boolean isValidLocalTld(String iTld)", "class_method_signature": "DomainValidator.isValidLocalTld(String iTld)", "testcase": false, "constructor": false}, {"identifier": "chompLeadingDot", "parameters": "(String str)", "modifiers": "private static", "return": "String", "signature": "String chompLeadingDot(String str)", "full_signature": "private static String chompLeadingDot(String str)", "class_method_signature": "DomainValidator.chompLeadingDot(String str)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(Domain domain)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(Domain domain)", "full_signature": "@Override public void initialize(Domain domain)", "class_method_signature": "DomainValidator.initialize(Domain domain)", "testcase": false, "constructor": false}], "file": "bval-extras/src/main/java/org/apache/bval/extras/constraints/net/DomainValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(CharSequence domain, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(CharSequence domain, ConstraintValidatorContext context) {\n        Matcher matcher = DOMAIN_NAME_REGEX.matcher(domain);\n        if (matcher.matches()) {\n            domain = matcher.group(1);\n            return isValidTld(domain.toString());\n        }\n        return allowLocal && DOMAIN_LABEL.matcher(domain).matches();\n    }", "signature": "boolean isValid(CharSequence domain, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(CharSequence domain, ConstraintValidatorContext context)", "class_method_signature": "DomainValidator.isValid(CharSequence domain, ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "group", "isValidTld", "toString", "matches", "matcher"]}, "repository": {"repo_id": 1319605, "url": "https://github.com/apache/bval", "stars": 25, "created": "2/2/2011 8:00:07 AM +00:00", "updates": "2020-01-09T15:48:42+00:00", "fork": "False", "license": "licensed"}}