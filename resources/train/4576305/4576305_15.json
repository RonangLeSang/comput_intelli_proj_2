{"test_class": {"identifier": "CollectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "InMemoryStorage storage = InMemoryStorage.newBuilder().build();", "modifier": "", "type": "InMemoryStorage", "declarator": "storage = InMemoryStorage.newBuilder().build()", "var_name": "storage"}, {"original_string": "Callback<Void> callback = mock(Callback.class);", "modifier": "", "type": "Callback<Void>", "declarator": "callback = mock(Callback.class)", "var_name": "callback"}, {"original_string": "CollectorMetrics metrics = mock(CollectorMetrics.class);", "modifier": "", "type": "CollectorMetrics", "declarator": "metrics = mock(CollectorMetrics.class)", "var_name": "metrics"}, {"original_string": "Collector collector;", "modifier": "", "type": "Collector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private TestLogger testLogger = TestLoggerFactory.getTestLogger(\"\");", "modifier": "private", "type": "TestLogger", "declarator": "testLogger = TestLoggerFactory.getTestLogger(\"\")", "var_name": "testLogger"}], "file": "zipkin-collector/core/src/test/java/zipkin2/collector/CollectorTest.java"}, "test_case": {"identifier": "acceptSpans_emptyMessageOk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void acceptSpans_emptyMessageOk() {\n    byte[] bytes = new byte[] {'[', ']'};\n    collector.acceptSpans(bytes, callback);\n\n    verify(collector).acceptSpans(bytes, SpanBytesDecoder.JSON_V1, callback);\n\n    verify(callback).onSuccess(null);\n    assertThat(testLogger.getLoggingEvents()).isEmpty();\n    assertThat(storage.getTraces()).isEmpty();\n  }", "signature": "void acceptSpans_emptyMessageOk()", "full_signature": "@Test public void acceptSpans_emptyMessageOk()", "class_method_signature": "CollectorTest.acceptSpans_emptyMessageOk()", "testcase": true, "constructor": false, "invocations": ["acceptSpans", "acceptSpans", "verify", "onSuccess", "verify", "isEmpty", "assertThat", "getLoggingEvents", "isEmpty", "assertThat", "getTraces"]}, "focal_class": {"identifier": "Collector", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Callback<Void> NOOP_CALLBACK = new Callback<Void>() {\n    @Override public void onSuccess(Void value) {\n    }\n\n    @Override public void onError(Throwable t) {\n    }\n  };", "modifier": "static final", "type": "Callback<Void>", "declarator": "NOOP_CALLBACK = new Callback<Void>() {\n    @Override public void onSuccess(Void value) {\n    }\n\n    @Override public void onError(Throwable t) {\n    }\n  }", "var_name": "NOOP_CALLBACK"}, {"original_string": "final Logger logger;", "modifier": "final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "final CollectorMetrics metrics;", "modifier": "final", "type": "CollectorMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "final CollectorSampler sampler;", "modifier": "final", "type": "CollectorSampler", "declarator": "sampler", "var_name": "sampler"}, {"original_string": "final StorageComponent storage;", "modifier": "final", "type": "StorageComponent", "declarator": "storage", "var_name": "storage"}], "methods": [{"identifier": "newBuilder", "parameters": "(Class<?> loggingClass)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(Class<?> loggingClass)", "full_signature": "public static Builder newBuilder(Class<?> loggingClass)", "class_method_signature": "Collector.newBuilder(Class<?> loggingClass)", "testcase": false, "constructor": false}, {"identifier": "Collector", "parameters": "(Builder builder)", "modifiers": "", "return": "", "signature": " Collector(Builder builder)", "full_signature": "  Collector(Builder builder)", "class_method_signature": "Collector.Collector(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "accept", "parameters": "(List<Span> spans, Callback<Void> callback)", "modifiers": "public", "return": "void", "signature": "void accept(List<Span> spans, Callback<Void> callback)", "full_signature": "public void accept(List<Span> spans, Callback<Void> callback)", "class_method_signature": "Collector.accept(List<Span> spans, Callback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(List<Span> spans, Callback<Void> callback, Executor executor)", "modifiers": "public", "return": "void", "signature": "void accept(List<Span> spans, Callback<Void> callback, Executor executor)", "full_signature": "public void accept(List<Span> spans, Callback<Void> callback, Executor executor)", "class_method_signature": "Collector.accept(List<Span> spans, Callback<Void> callback, Executor executor)", "testcase": false, "constructor": false}, {"identifier": "acceptSpans", "parameters": "(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "modifiers": "public", "return": "void", "signature": "void acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "full_signature": "public void acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "class_method_signature": "Collector.acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "testcase": false, "constructor": false}, {"identifier": "acceptSpans", "parameters": "(byte[] serialized, Callback<Void> callback)", "modifiers": "public", "return": "void", "signature": "void acceptSpans(byte[] serialized, Callback<Void> callback)", "full_signature": "public void acceptSpans(byte[] serialized, Callback<Void> callback)", "class_method_signature": "Collector.acceptSpans(byte[] serialized, Callback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "acceptSpans", "parameters": "(\n    byte[] serializedSpans, BytesDecoder<Span> decoder, Callback<Void> callback)", "modifiers": "public", "return": "void", "signature": "void acceptSpans(\n    byte[] serializedSpans, BytesDecoder<Span> decoder, Callback<Void> callback)", "full_signature": "public void acceptSpans(\n    byte[] serializedSpans, BytesDecoder<Span> decoder, Callback<Void> callback)", "class_method_signature": "Collector.acceptSpans(\n    byte[] serializedSpans, BytesDecoder<Span> decoder, Callback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "decodeList", "parameters": "(BytesDecoder<Span> decoder, byte[] serialized)", "modifiers": "", "return": "List<Span>", "signature": "List<Span> decodeList(BytesDecoder<Span> decoder, byte[] serialized)", "full_signature": " List<Span> decodeList(BytesDecoder<Span> decoder, byte[] serialized)", "class_method_signature": "Collector.decodeList(BytesDecoder<Span> decoder, byte[] serialized)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(List<Span> sampledSpans, Callback<Void> callback)", "modifiers": "", "return": "void", "signature": "void store(List<Span> sampledSpans, Callback<Void> callback)", "full_signature": " void store(List<Span> sampledSpans, Callback<Void> callback)", "class_method_signature": "Collector.store(List<Span> sampledSpans, Callback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "idString", "parameters": "(Span span)", "modifiers": "", "return": "String", "signature": "String idString(Span span)", "full_signature": " String idString(Span span)", "class_method_signature": "Collector.idString(Span span)", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "(List<Span> input)", "modifiers": "", "return": "List<Span>", "signature": "List<Span> sample(List<Span> input)", "full_signature": " List<Span> sample(List<Span> input)", "class_method_signature": "Collector.sample(List<Span> input)", "testcase": false, "constructor": false}, {"identifier": "handleDecodeError", "parameters": "(Throwable e, Callback<Void> callback)", "modifiers": "", "return": "void", "signature": "void handleDecodeError(Throwable e, Callback<Void> callback)", "full_signature": " void handleDecodeError(Throwable e, Callback<Void> callback)", "class_method_signature": "Collector.handleDecodeError(Throwable e, Callback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "handleStorageError", "parameters": "(List<Span> spans, Throwable e, Callback<Void> callback)", "modifiers": "", "return": "void", "signature": "void handleStorageError(List<Span> spans, Throwable e, Callback<Void> callback)", "full_signature": " void handleStorageError(List<Span> spans, Throwable e, Callback<Void> callback)", "class_method_signature": "Collector.handleStorageError(List<Span> spans, Throwable e, Callback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "handleError", "parameters": "(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)", "modifiers": "", "return": "void", "signature": "void handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)", "full_signature": " void handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)", "class_method_signature": "Collector.handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)", "testcase": false, "constructor": false}, {"identifier": "appendSpanIds", "parameters": "(List<Span> spans, StringBuilder message)", "modifiers": "", "return": "String", "signature": "String appendSpanIds(List<Span> spans, StringBuilder message)", "full_signature": " String appendSpanIds(List<Span> spans, StringBuilder message)", "class_method_signature": "Collector.appendSpanIds(List<Span> spans, StringBuilder message)", "testcase": false, "constructor": false}], "file": "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java"}, "focal_method": {"identifier": "acceptSpans", "parameters": "(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "modifiers": "public", "return": "void", "body": "public void acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor) {\n    List<Span> spans;\n    try {\n      spans = decoder.decodeList(encoded);\n    } catch (RuntimeException | Error e) {\n      handleDecodeError(e, callback);\n      return;\n    }\n    accept(spans, callback, executor);\n  }", "signature": "void acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "full_signature": "public void acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "class_method_signature": "Collector.acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n    Executor executor)", "testcase": false, "constructor": false, "invocations": ["decodeList", "handleDecodeError", "accept"]}, "repository": {"repo_id": 4576305, "url": "https://github.com/openzipkin/zipkin", "stars": 12365, "created": "6/6/2012 6:26:16 PM +00:00", "updates": "2020-01-27T10:22:48+00:00", "fork": "False", "license": "licensed"}}