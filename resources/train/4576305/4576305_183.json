{"test_class": {"identifier": "InitialEndpointSupplierTest", "superclass": "", "interfaces": "", "fields": [], "file": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplierTest.java"}, "test_case": {"identifier": "defaultIsLocalhost9200RegardlessOfSessionProtocol", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test void defaultIsLocalhost9200RegardlessOfSessionProtocol() {\n    assertThat(new InitialEndpointSupplier(HTTP, null).get())\n      .isEqualTo(Endpoint.of(\"localhost\", 9200))\n      .isEqualTo(new InitialEndpointSupplier(HTTPS, null).get());\n  }", "signature": "void defaultIsLocalhost9200RegardlessOfSessionProtocol()", "full_signature": "@Test void defaultIsLocalhost9200RegardlessOfSessionProtocol()", "class_method_signature": "InitialEndpointSupplierTest.defaultIsLocalhost9200RegardlessOfSessionProtocol()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "isEqualTo", "assertThat", "get", "of", "get"]}, "focal_class": {"identifier": "InitialEndpointSupplier", "superclass": "", "interfaces": "implements Supplier<EndpointGroup>", "fields": [{"original_string": "static final Logger LOGGER = LoggerFactory.getLogger(InitialEndpointSupplier.class);", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InitialEndpointSupplier.class)", "var_name": "LOGGER"}, {"original_string": "final String hosts;", "modifier": "final", "type": "String", "declarator": "hosts", "var_name": "hosts"}, {"original_string": "final SessionProtocol sessionProtocol;", "modifier": "final", "type": "SessionProtocol", "declarator": "sessionProtocol", "var_name": "sessionProtocol"}], "methods": [{"identifier": "InitialEndpointSupplier", "parameters": "(SessionProtocol sessionProtocol, @Nullable String hosts)", "modifiers": "", "return": "", "signature": " InitialEndpointSupplier(SessionProtocol sessionProtocol, @Nullable String hosts)", "full_signature": "  InitialEndpointSupplier(SessionProtocol sessionProtocol, @Nullable String hosts)", "class_method_signature": "InitialEndpointSupplier.InitialEndpointSupplier(SessionProtocol sessionProtocol, @Nullable String hosts)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "EndpointGroup", "signature": "EndpointGroup get()", "full_signature": "@Override public EndpointGroup get()", "class_method_signature": "InitialEndpointSupplier.get()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "(URI url)", "modifiers": "", "return": "int", "signature": "int getPort(URI url)", "full_signature": " int getPort(URI url)", "class_method_signature": "InitialEndpointSupplier.getPort(URI url)", "testcase": false, "constructor": false}, {"identifier": "isIpAddress", "parameters": "(String address)", "modifiers": "static", "return": "boolean", "signature": "boolean isIpAddress(String address)", "full_signature": "static boolean isIpAddress(String address)", "class_method_signature": "InitialEndpointSupplier.isIpAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "InitialEndpointSupplier.toString()", "testcase": false, "constructor": false}], "file": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "EndpointGroup", "body": "@Override public EndpointGroup get() {\n    List<EndpointGroup> endpointGroups = new ArrayList<>();\n    for (String hostText : hosts.split(\",\", 100)) {\n      URI url;\n      if (hostText.startsWith(\"http://\") || hostText.startsWith(\"https://\")) {\n        url = URI.create(hostText);\n      } else if (!sessionProtocol.isTls() && hostText.indexOf(':') == -1) {\n        url = URI.create(sessionProtocol.uriText() + \"://\" + hostText + \":9200\");\n      } else {\n        url = URI.create(sessionProtocol.uriText() + \"://\" + hostText);\n      }\n\n      String host = url.getHost();\n      int port = getPort(url);\n\n      if (port == 9300) {\n        LOGGER.warn(\"Native transport no longer supported. Changing {} to http port 9200\", host);\n        port = 9200;\n      }\n\n      if (isIpAddress(host) || host.equals(\"localhost\")) {\n        endpointGroups.add(EndpointGroup.of(Endpoint.of(host, port)));\n      } else {\n        // A host that isn't an IP may resolve to multiple IP addresses, so we use a endpoint\n        // group to round-robin over them. Users can mix addresses that resolve to multiple IPs\n        // with single IPs freely, they'll all get used.\n        endpointGroups.add(DnsAddressEndpointGroup.builder(host).port(port).build());\n      }\n    }\n\n    return EndpointGroup.of(endpointGroups);\n  }", "signature": "EndpointGroup get()", "full_signature": "@Override public EndpointGroup get()", "class_method_signature": "InitialEndpointSupplier.get()", "testcase": false, "constructor": false, "invocations": ["split", "startsWith", "startsWith", "create", "isTls", "indexOf", "create", "uriText", "create", "uriText", "getHost", "getPort", "warn", "isIpAddress", "equals", "add", "of", "of", "add", "build", "port", "builder", "of"]}, "repository": {"repo_id": 4576305, "url": "https://github.com/openzipkin/zipkin", "stars": 12365, "created": "6/6/2012 6:26:16 PM +00:00", "updates": "2020-01-27T10:22:48+00:00", "fork": "False", "license": "licensed"}}