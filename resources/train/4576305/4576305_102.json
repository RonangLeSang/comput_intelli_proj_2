{"test_class": {"identifier": "CassandraUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "QueryRequest request = QueryRequest.newBuilder().endTs(1).limit(1).lookback(1).build();", "modifier": "", "type": "QueryRequest", "declarator": "request = QueryRequest.newBuilder().endTs(1).limit(1).lookback(1).build()", "var_name": "request"}], "file": "zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/CassandraUtilTest.java"}, "test_case": {"identifier": "annotationKeys_dedupes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void annotationKeys_dedupes() {\n    assertThat(\n            CassandraUtil.annotationKeys(\n                request\n                    .toBuilder()\n                    .serviceName(\"service\")\n                    .parseAnnotationQuery(\"error and error\")\n                    .build()))\n        .containsExactly(\"service:error\");\n  }", "signature": "void annotationKeys_dedupes()", "full_signature": "@Test public void annotationKeys_dedupes()", "class_method_signature": "CassandraUtilTest.annotationKeys_dedupes()", "testcase": true, "constructor": false, "invocations": ["containsExactly", "assertThat", "annotationKeys", "build", "parseAnnotationQuery", "serviceName", "toBuilder"]}, "focal_class": {"identifier": "CassandraUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final List<String> CORE_ANNOTATIONS =\n    Arrays.asList(\"cs\", \"cr\", \"ss\", \"sr\", \"ms\", \"mr\", \"ws\", \"wr\");", "modifier": "static final", "type": "List<String>", "declarator": "CORE_ANNOTATIONS =\n    Arrays.asList(\"cs\", \"cr\", \"ss\", \"sr\", \"ms\", \"mr\", \"ws\", \"wr\")", "var_name": "CORE_ANNOTATIONS"}, {"original_string": "private static final ThreadLocal<CharsetEncoder> UTF8_ENCODER =\n    ThreadLocal.withInitial(StandardCharsets.UTF_8::newEncoder);", "modifier": "private static final", "type": "ThreadLocal<CharsetEncoder>", "declarator": "UTF8_ENCODER =\n    ThreadLocal.withInitial(StandardCharsets.UTF_8::newEncoder)", "var_name": "UTF8_ENCODER"}, {"original_string": "static final Random RAND = new Random(System.nanoTime());", "modifier": "static final", "type": "Random", "declarator": "RAND = new Random(System.nanoTime())", "var_name": "RAND"}, {"original_string": "static final BigInteger OFFSET = BigInteger.valueOf(Integer.MAX_VALUE);", "modifier": "static final", "type": "BigInteger", "declarator": "OFFSET = BigInteger.valueOf(Integer.MAX_VALUE)", "var_name": "OFFSET"}], "methods": [{"identifier": "toByteBuffer", "parameters": "(String string)", "modifiers": "static", "return": "ByteBuffer", "signature": "ByteBuffer toByteBuffer(String string)", "full_signature": "static ByteBuffer toByteBuffer(String string)", "class_method_signature": "CassandraUtil.toByteBuffer(String string)", "testcase": false, "constructor": false}, {"identifier": "annotationKeys", "parameters": "(Span span)", "modifiers": "static", "return": "Set<String>", "signature": "Set<String> annotationKeys(Span span)", "full_signature": "static Set<String> annotationKeys(Span span)", "class_method_signature": "CassandraUtil.annotationKeys(Span span)", "testcase": false, "constructor": false}, {"identifier": "annotationKeys", "parameters": "(QueryRequest request)", "modifiers": "static", "return": "List<String>", "signature": "List<String> annotationKeys(QueryRequest request)", "full_signature": "static List<String> annotationKeys(QueryRequest request)", "class_method_signature": "CassandraUtil.annotationKeys(QueryRequest request)", "testcase": false, "constructor": false}, {"identifier": "sortedList", "parameters": "(@Nullable Collection<T> in)", "modifiers": "static", "return": "List<T>", "signature": "List<T> sortedList(@Nullable Collection<T> in)", "full_signature": "static List<T> sortedList(@Nullable Collection<T> in)", "class_method_signature": "CassandraUtil.sortedList(@Nullable Collection<T> in)", "testcase": false, "constructor": false}, {"identifier": "sortTraceIdsByDescTimestamp", "parameters": "(Set<Pair> set)", "modifiers": "static", "return": "Set<Long>", "signature": "Set<Long> sortTraceIdsByDescTimestamp(Set<Pair> set)", "full_signature": "static Set<Long> sortTraceIdsByDescTimestamp(Set<Pair> set)", "class_method_signature": "CassandraUtil.sortTraceIdsByDescTimestamp(Set<Pair> set)", "testcase": false, "constructor": false}, {"identifier": "sortTraceIdsByDescTimestampMapper", "parameters": "()", "modifiers": "static", "return": "Call.Mapper<Set<Pair>, Set<Long>>", "signature": "Call.Mapper<Set<Pair>, Set<Long>> sortTraceIdsByDescTimestampMapper()", "full_signature": "static Call.Mapper<Set<Pair>, Set<Long>> sortTraceIdsByDescTimestampMapper()", "class_method_signature": "CassandraUtil.sortTraceIdsByDescTimestampMapper()", "testcase": false, "constructor": false}, {"identifier": "getDays", "parameters": "(long endTs, @Nullable Long lookback)", "modifiers": "@SuppressWarnings(\"JdkObsolete\") static", "return": "List<Date>", "signature": "List<Date> getDays(long endTs, @Nullable Long lookback)", "full_signature": "@SuppressWarnings(\"JdkObsolete\") static List<Date> getDays(long endTs, @Nullable Long lookback)", "class_method_signature": "CassandraUtil.getDays(long endTs, @Nullable Long lookback)", "testcase": false, "constructor": false}], "file": "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java"}, "focal_method": {"identifier": "annotationKeys", "parameters": "(Span span)", "modifiers": "static", "return": "Set<String>", "body": "static Set<String> annotationKeys(Span span) {\n    Set<String> annotationKeys = new LinkedHashSet<>();\n    String localServiceName = span.localServiceName();\n    if (localServiceName == null) return annotationKeys;\n    for (Annotation a : span.annotations()) {\n      if (a.value().length() > SHORT_STRING_LENGTH) continue;\n\n      // don't index core annotations as they aren't queryable\n      if (CORE_ANNOTATIONS.contains(a.value())) continue;\n      annotationKeys.add(localServiceName + \":\" + a.value());\n    }\n    for (Map.Entry<String, String> e : span.tags().entrySet()) {\n      if (e.getValue().length() > SHORT_STRING_LENGTH) continue;\n\n      annotationKeys.add(localServiceName + \":\" + e.getKey());\n      annotationKeys.add(localServiceName + \":\" + e.getKey() + \":\" + e.getValue());\n    }\n    return annotationKeys;\n  }", "signature": "Set<String> annotationKeys(Span span)", "full_signature": "static Set<String> annotationKeys(Span span)", "class_method_signature": "CassandraUtil.annotationKeys(Span span)", "testcase": false, "constructor": false, "invocations": ["localServiceName", "annotations", "length", "value", "contains", "value", "add", "value", "entrySet", "tags", "length", "getValue", "add", "getKey", "add", "getKey", "getValue"]}, "repository": {"repo_id": 4576305, "url": "https://github.com/openzipkin/zipkin", "stars": 12365, "created": "6/6/2012 6:26:16 PM +00:00", "updates": "2020-01-27T10:22:48+00:00", "fork": "False", "license": "licensed"}}