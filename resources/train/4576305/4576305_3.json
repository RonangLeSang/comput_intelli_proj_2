{"test_class": {"identifier": "JacksonSpanDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] encoded = SpanBytesEncoder.JSON_V2.encodeList(TRACE);", "modifier": "", "type": "byte[]", "declarator": "encoded = SpanBytesEncoder.JSON_V2.encodeList(TRACE)", "var_name": "encoded"}, {"original_string": "byte[] encodedSpan = SpanBytesEncoder.JSON_V2.encode(CLIENT_SPAN);", "modifier": "", "type": "byte[]", "declarator": "encodedSpan = SpanBytesEncoder.JSON_V2.encode(CLIENT_SPAN)", "var_name": "encodedSpan"}], "file": "benchmarks/src/test/java/zipkin2/codec/JacksonSpanDecoderTest.java"}, "test_case": {"identifier": "decodeOne_byteBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void decodeOne_byteBuffer() {\n    ByteBuf encodedBuf = PooledByteBufAllocator.DEFAULT.buffer(encodedSpan.length);\n    encodedBuf.writeBytes(encodedSpan);\n    try {\n      assertThat(JacksonSpanDecoder.decodeOne(encodedBuf.nioBuffer()))\n        .isEqualTo(CLIENT_SPAN);\n    } finally {\n      encodedBuf.release();\n    }\n  }", "signature": "void decodeOne_byteBuffer()", "full_signature": "@Test public void decodeOne_byteBuffer()", "class_method_signature": "JacksonSpanDecoderTest.decodeOne_byteBuffer()", "testcase": true, "constructor": false, "invocations": ["buffer", "writeBytes", "isEqualTo", "assertThat", "decodeOne", "nioBuffer", "release"]}, "focal_class": {"identifier": "JacksonSpanDecoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final JsonFactory JSON_FACTORY = new JsonFactory();", "modifier": "static final", "type": "JsonFactory", "declarator": "JSON_FACTORY = new JsonFactory()", "var_name": "JSON_FACTORY"}], "methods": [{"identifier": "decodeList", "parameters": "(byte[] spans)", "modifiers": "public static", "return": "List<Span>", "signature": "List<Span> decodeList(byte[] spans)", "full_signature": "public static List<Span> decodeList(byte[] spans)", "class_method_signature": "JacksonSpanDecoder.decodeList(byte[] spans)", "testcase": false, "constructor": false}, {"identifier": "decodeList", "parameters": "(ByteBuffer spans)", "modifiers": "public static", "return": "List<Span>", "signature": "List<Span> decodeList(ByteBuffer spans)", "full_signature": "public static List<Span> decodeList(ByteBuffer spans)", "class_method_signature": "JacksonSpanDecoder.decodeList(ByteBuffer spans)", "testcase": false, "constructor": false}, {"identifier": "decodeOne", "parameters": "(byte[] span)", "modifiers": "public static", "return": "Span", "signature": "Span decodeOne(byte[] span)", "full_signature": "public static Span decodeOne(byte[] span)", "class_method_signature": "JacksonSpanDecoder.decodeOne(byte[] span)", "testcase": false, "constructor": false}, {"identifier": "decodeOne", "parameters": "(ByteBuffer span)", "modifiers": "public static", "return": "Span", "signature": "Span decodeOne(ByteBuffer span)", "full_signature": "public static Span decodeOne(ByteBuffer span)", "class_method_signature": "JacksonSpanDecoder.decodeOne(ByteBuffer span)", "testcase": false, "constructor": false}, {"identifier": "decodeList", "parameters": "(JsonParser jsonParser)", "modifiers": "static", "return": "List<Span>", "signature": "List<Span> decodeList(JsonParser jsonParser)", "full_signature": "static List<Span> decodeList(JsonParser jsonParser)", "class_method_signature": "JacksonSpanDecoder.decodeList(JsonParser jsonParser)", "testcase": false, "constructor": false}, {"identifier": "decodeOne", "parameters": "(JsonParser jsonParser)", "modifiers": "static", "return": "Span", "signature": "Span decodeOne(JsonParser jsonParser)", "full_signature": "static Span decodeOne(JsonParser jsonParser)", "class_method_signature": "JacksonSpanDecoder.decodeOne(JsonParser jsonParser)", "testcase": false, "constructor": false}, {"identifier": "parseSpan", "parameters": "(JsonParser jsonParser)", "modifiers": "static", "return": "Span", "signature": "Span parseSpan(JsonParser jsonParser)", "full_signature": "static Span parseSpan(JsonParser jsonParser)", "class_method_signature": "JacksonSpanDecoder.parseSpan(JsonParser jsonParser)", "testcase": false, "constructor": false}, {"identifier": "parseEndpoint", "parameters": "(JsonParser jsonParser)", "modifiers": "static", "return": "Endpoint", "signature": "Endpoint parseEndpoint(JsonParser jsonParser)", "full_signature": "static Endpoint parseEndpoint(JsonParser jsonParser)", "class_method_signature": "JacksonSpanDecoder.parseEndpoint(JsonParser jsonParser)", "testcase": false, "constructor": false}, {"identifier": "parseAnnotation", "parameters": "(JsonParser jsonParser)", "modifiers": "static", "return": "Annotation", "signature": "Annotation parseAnnotation(JsonParser jsonParser)", "full_signature": "static Annotation parseAnnotation(JsonParser jsonParser)", "class_method_signature": "JacksonSpanDecoder.parseAnnotation(JsonParser jsonParser)", "testcase": false, "constructor": false}], "file": "benchmarks/src/main/java/zipkin2/codec/JacksonSpanDecoder.java"}, "focal_method": {"identifier": "decodeOne", "parameters": "(byte[] span)", "modifiers": "public static", "return": "Span", "body": "public static Span decodeOne(byte[] span) {\n    try {\n      return decodeOne(JSON_FACTORY.createParser(span));\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }", "signature": "Span decodeOne(byte[] span)", "full_signature": "public static Span decodeOne(byte[] span)", "class_method_signature": "JacksonSpanDecoder.decodeOne(byte[] span)", "testcase": false, "constructor": false, "invocations": ["decodeOne", "createParser"]}, "repository": {"repo_id": 4576305, "url": "https://github.com/openzipkin/zipkin", "stars": 12365, "created": "6/6/2012 6:26:16 PM +00:00", "updates": "2020-01-27T10:22:48+00:00", "fork": "False", "license": "licensed"}}