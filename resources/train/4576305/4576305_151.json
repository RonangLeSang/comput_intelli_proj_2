{"test_class": {"identifier": "HostAndPortTest", "superclass": "", "interfaces": "", "fields": [], "file": "zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/internal/HostAndPortTest.java"}, "test_case": {"identifier": "parsesHost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void parsesHost() {\n    Stream.of(\n      \"google.com\",\n      \"google.com\",\n      \"192.0.2.1\",\n      \"2001::3\"\n    ).forEach(host -> {\n      assertThat(HostAndPort.fromString(host, 77))\n        .isEqualTo(new HostAndPort(host, 77));\n    });\n  }", "signature": "void parsesHost()", "full_signature": "@Test public void parsesHost()", "class_method_signature": "HostAndPortTest.parsesHost()", "testcase": true, "constructor": false, "invocations": ["forEach", "of", "isEqualTo", "assertThat", "fromString"]}, "focal_class": {"identifier": "HostAndPort", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String host;", "modifier": "final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "final int port;", "modifier": "final", "type": "int", "declarator": "port", "var_name": "port"}], "methods": [{"identifier": "HostAndPort", "parameters": "(String host, int port)", "modifiers": "", "return": "", "signature": " HostAndPort(String host, int port)", "full_signature": "  HostAndPort(String host, int port)", "class_method_signature": "HostAndPort.HostAndPort(String host, int port)", "testcase": false, "constructor": true}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "HostAndPort.getHost()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "HostAndPort.getPort()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HostAndPort.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HostAndPort.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HostAndPort.toString()", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(String hostPort, int defaultPort)", "modifiers": "public static", "return": "HostAndPort", "signature": "HostAndPort fromString(String hostPort, int defaultPort)", "full_signature": "public static HostAndPort fromString(String hostPort, int defaultPort)", "class_method_signature": "HostAndPort.fromString(String hostPort, int defaultPort)", "testcase": false, "constructor": false}, {"identifier": "validatePort", "parameters": "(String portString, String hostPort)", "modifiers": "static", "return": "int", "signature": "int validatePort(String portString, String hostPort)", "full_signature": "static int validatePort(String portString, String hostPort)", "class_method_signature": "HostAndPort.validatePort(String portString, String hostPort)", "testcase": false, "constructor": false}], "file": "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/HostAndPort.java"}, "focal_method": {"identifier": "fromString", "parameters": "(String hostPort, int defaultPort)", "modifiers": "public static", "return": "HostAndPort", "body": "public static HostAndPort fromString(String hostPort, int defaultPort) {\n    if (hostPort == null) throw new NullPointerException(\"hostPort == null\");\n\n    String host = hostPort;\n    int endHostIndex = hostPort.length();\n    if (hostPort.startsWith(\"[\")) { // Bracketed IPv6\n      endHostIndex = hostPort.lastIndexOf(']') + 1;\n      host = hostPort.substring(1, endHostIndex == 0 ? 1 : endHostIndex - 1);\n      if (!Endpoint.newBuilder().parseIp(host)) { // reuse our IPv6 validator\n        throw new IllegalArgumentException(hostPort + \" contains an invalid IPv6 literal\");\n      }\n    } else {\n      int colonIndex = hostPort.indexOf(':'), nextColonIndex = hostPort.lastIndexOf(':');\n      if (colonIndex >= 0) {\n        if (colonIndex == nextColonIndex) { // only 1 colon\n          host = hostPort.substring(0, colonIndex);\n          endHostIndex = colonIndex;\n        } else if (!Endpoint.newBuilder().parseIp(hostPort)) { // reuse our IPv6 validator\n          throw new IllegalArgumentException(hostPort + \" is an invalid IPv6 literal\");\n        }\n      }\n    }\n    if (host.isEmpty()) throw new IllegalArgumentException(hostPort + \" has an empty host\");\n    if (endHostIndex + 1 < hostPort.length() && hostPort.charAt(endHostIndex) == ':') {\n      return new HostAndPort(host, validatePort(hostPort.substring(endHostIndex + 1), hostPort));\n    }\n    return new HostAndPort(host, defaultPort);\n  }", "signature": "HostAndPort fromString(String hostPort, int defaultPort)", "full_signature": "public static HostAndPort fromString(String hostPort, int defaultPort)", "class_method_signature": "HostAndPort.fromString(String hostPort, int defaultPort)", "testcase": false, "constructor": false, "invocations": ["length", "startsWith", "lastIndexOf", "substring", "parseIp", "newBuilder", "indexOf", "lastIndexOf", "substring", "parseIp", "newBuilder", "isEmpty", "length", "charAt", "validatePort", "substring"]}, "repository": {"repo_id": 4576305, "url": "https://github.com/openzipkin/zipkin", "stars": 12365, "created": "6/6/2012 6:26:16 PM +00:00", "updates": "2020-01-27T10:22:48+00:00", "fork": "False", "license": "licensed"}}