{"test_class": {"identifier": "DynamicSyncContextTest", "superclass": "extends AbstractExternalAuthTest", "interfaces": "", "fields": [{"original_string": "private Root r;", "modifier": "private", "type": "Root", "declarator": "r", "var_name": "r"}, {"original_string": "private UserManager userManager;", "modifier": "private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "private ValueFactory valueFactory;", "modifier": "private", "type": "ValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "private DynamicSyncContext syncContext;", "modifier": "private", "type": "DynamicSyncContext", "declarator": "syncContext", "var_name": "syncContext"}], "file": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DynamicSyncContextTest.java"}, "test_case": {"identifier": "testAutoMembership", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAutoMembership() throws Exception {\n        Group gr = userManager.createGroup(\"group\" + UUID.randomUUID());\n        r.commit();\n\n        syncConfig.user().setAutoMembership(gr.getID(), \"non-existing-group\");\n\n        SyncResult result = syncContext.sync(idp.getUser(USER_ID));\n        assertSame(SyncResult.Status.ADD, result.getStatus());\n\n        User u = userManager.getAuthorizable(USER_ID, User.class);\n        assertFalse(gr.isDeclaredMember(u));\n        assertFalse(gr.isMember(u));\n    }", "signature": "void testAutoMembership()", "full_signature": "@Test public void testAutoMembership()", "class_method_signature": "DynamicSyncContextTest.testAutoMembership()", "testcase": true, "constructor": false, "invocations": ["createGroup", "randomUUID", "commit", "setAutoMembership", "user", "getID", "sync", "getUser", "assertSame", "getStatus", "getAuthorizable", "assertFalse", "isDeclaredMember", "assertFalse", "isMember"]}, "focal_class": {"identifier": "DynamicSyncContext", "superclass": "extends DefaultSyncContext", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DynamicSyncContext.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DynamicSyncContext.class)", "var_name": "log"}], "methods": [{"identifier": "DynamicSyncContext", "parameters": "(@NotNull DefaultSyncConfig config,\n                              @NotNull ExternalIdentityProvider idp,\n                              @NotNull UserManager userManager,\n                              @NotNull ValueFactory valueFactory)", "modifiers": "public", "return": "", "signature": " DynamicSyncContext(@NotNull DefaultSyncConfig config,\n                              @NotNull ExternalIdentityProvider idp,\n                              @NotNull UserManager userManager,\n                              @NotNull ValueFactory valueFactory)", "full_signature": "public  DynamicSyncContext(@NotNull DefaultSyncConfig config,\n                              @NotNull ExternalIdentityProvider idp,\n                              @NotNull UserManager userManager,\n                              @NotNull ValueFactory valueFactory)", "class_method_signature": "DynamicSyncContext.DynamicSyncContext(@NotNull DefaultSyncConfig config,\n                              @NotNull ExternalIdentityProvider idp,\n                              @NotNull UserManager userManager,\n                              @NotNull ValueFactory valueFactory)", "testcase": false, "constructor": true}, {"identifier": "sync", "parameters": "(@NotNull ExternalIdentity identity)", "modifiers": "@NotNull @Override public", "return": "SyncResult", "signature": "SyncResult sync(@NotNull ExternalIdentity identity)", "full_signature": "@NotNull @Override public SyncResult sync(@NotNull ExternalIdentity identity)", "class_method_signature": "DynamicSyncContext.sync(@NotNull ExternalIdentity identity)", "testcase": false, "constructor": false}, {"identifier": "syncMembership", "parameters": "(@NotNull ExternalIdentity external, @NotNull Authorizable auth, long depth)", "modifiers": "@Override protected", "return": "void", "signature": "void syncMembership(@NotNull ExternalIdentity external, @NotNull Authorizable auth, long depth)", "full_signature": "@Override protected void syncMembership(@NotNull ExternalIdentity external, @NotNull Authorizable auth, long depth)", "class_method_signature": "DynamicSyncContext.syncMembership(@NotNull ExternalIdentity external, @NotNull Authorizable auth, long depth)", "testcase": false, "constructor": false}, {"identifier": "applyMembership", "parameters": "(@NotNull Authorizable member, @NotNull Set<String> groups)", "modifiers": "@Override protected", "return": "void", "signature": "void applyMembership(@NotNull Authorizable member, @NotNull Set<String> groups)", "full_signature": "@Override protected void applyMembership(@NotNull Authorizable member, @NotNull Set<String> groups)", "class_method_signature": "DynamicSyncContext.applyMembership(@NotNull Authorizable member, @NotNull Set<String> groups)", "testcase": false, "constructor": false}, {"identifier": "collectPrincipalNames", "parameters": "(@NotNull Set<String> principalNames, @NotNull Iterable<ExternalIdentityRef> declaredGroupIdRefs, long depth)", "modifiers": "private", "return": "void", "signature": "void collectPrincipalNames(@NotNull Set<String> principalNames, @NotNull Iterable<ExternalIdentityRef> declaredGroupIdRefs, long depth)", "full_signature": "private void collectPrincipalNames(@NotNull Set<String> principalNames, @NotNull Iterable<ExternalIdentityRef> declaredGroupIdRefs, long depth)", "class_method_signature": "DynamicSyncContext.collectPrincipalNames(@NotNull Set<String> principalNames, @NotNull Iterable<ExternalIdentityRef> declaredGroupIdRefs, long depth)", "testcase": false, "constructor": false}], "file": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DynamicSyncContext.java"}, "focal_method": {"identifier": "sync", "parameters": "(@NotNull ExternalIdentity identity)", "modifiers": "@NotNull @Override public", "return": "SyncResult", "body": "@NotNull\n    @Override\n    public SyncResult sync(@NotNull ExternalIdentity identity) throws SyncException {\n        if (identity instanceof ExternalUser) {\n            return super.sync(identity);\n        } else if (identity instanceof ExternalGroup) {\n            try {\n                Group group = getAuthorizable(identity, Group.class);\n                if (group != null) {\n                    // group has been synchronized before -> continue updating for consistency.\n                    return syncGroup((ExternalGroup) identity, group);\n                } else {\n                    // external group has never been synchronized before:\n                    // don't sync external groups into the repository internal user management\n                    // but limit synchronized information to group-principals stored\n                    // separately with each external user such that the subject gets\n                    // properly populated upon login\n                    ExternalIdentityRef ref = identity.getExternalId();\n\n                    log.debug(\"ExternalGroup {}: Not synchronized as authorizable Group into the repository.\", ref.getString());\n\n                    SyncResult.Status status = (isSameIDP(ref)) ? SyncResult.Status.NOP : SyncResult.Status.FOREIGN;\n                    return new DefaultSyncResultImpl(new DefaultSyncedIdentity(identity.getId(), ref, true, -1), status);\n                }\n            } catch (RepositoryException e) {\n                throw new SyncException(e);\n            }\n        } else {\n            throw new IllegalArgumentException(\"identity must be user or group but was: \" + identity);\n        }\n    }", "signature": "SyncResult sync(@NotNull ExternalIdentity identity)", "full_signature": "@NotNull @Override public SyncResult sync(@NotNull ExternalIdentity identity)", "class_method_signature": "DynamicSyncContext.sync(@NotNull ExternalIdentity identity)", "testcase": false, "constructor": false, "invocations": ["sync", "getAuthorizable", "syncGroup", "getExternalId", "debug", "getString", "isSameIDP", "getId"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}