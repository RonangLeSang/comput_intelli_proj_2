{"test_class": {"identifier": "SecureNodeBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final NodeStore store = new MemoryNodeStore();", "modifier": "private final", "type": "NodeStore", "declarator": "store = new MemoryNodeStore()", "var_name": "store"}, {"original_string": "private final TestPermissionProvider permissionProvider = new TestPermissionProvider();", "modifier": "private final", "type": "TestPermissionProvider", "declarator": "permissionProvider = new TestPermissionProvider()", "var_name": "permissionProvider"}, {"original_string": "private SecureNodeBuilder secureNodeBuilder;", "modifier": "private", "type": "SecureNodeBuilder", "declarator": "secureNodeBuilder", "var_name": "secureNodeBuilder"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/core/SecureNodeBuilderTest.java"}, "test_case": {"identifier": "testGetName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetName() {\n        assertNull(secureNodeBuilder.getName(\"prop\"));\n        assertNull(secureNodeBuilder.getName(NAME_NON_EXISTING));\n        assertNull(secureNodeBuilder.getName(NAME_NON_ACCESSIBLE));\n    }", "signature": "void testGetName()", "full_signature": "@Test public void testGetName()", "class_method_signature": "SecureNodeBuilderTest.testGetName()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getName", "assertNull", "getName", "assertNull", "getName"]}, "focal_class": {"identifier": "SecureNodeBuilder", "superclass": "", "interfaces": "implements NodeBuilder", "fields": [{"original_string": "private final SecureNodeBuilder rootBuilder;", "modifier": "private final", "type": "SecureNodeBuilder", "declarator": "rootBuilder", "var_name": "rootBuilder"}, {"original_string": "private final SecureNodeBuilder parent;", "modifier": "private final", "type": "SecureNodeBuilder", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final LazyValue<PermissionProvider> permissionProvider;", "modifier": "private final", "type": "LazyValue<PermissionProvider>", "declarator": "permissionProvider", "var_name": "permissionProvider"}, {"original_string": "private final NodeBuilder builder;", "modifier": "private final", "type": "NodeBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private TreePermission treePermission = null;", "modifier": "private", "type": "TreePermission", "declarator": "treePermission = null", "var_name": "treePermission"}, {"original_string": "private TreePermission rootPermission = null;", "modifier": "private", "type": "TreePermission", "declarator": "rootPermission = null", "var_name": "rootPermission"}], "methods": [{"identifier": "SecureNodeBuilder", "parameters": "(\n            @NotNull NodeBuilder builder,\n            @NotNull LazyValue<PermissionProvider> permissionProvider)", "modifiers": "", "return": "", "signature": " SecureNodeBuilder(\n            @NotNull NodeBuilder builder,\n            @NotNull LazyValue<PermissionProvider> permissionProvider)", "full_signature": "  SecureNodeBuilder(\n            @NotNull NodeBuilder builder,\n            @NotNull LazyValue<PermissionProvider> permissionProvider)", "class_method_signature": "SecureNodeBuilder.SecureNodeBuilder(\n            @NotNull NodeBuilder builder,\n            @NotNull LazyValue<PermissionProvider> permissionProvider)", "testcase": false, "constructor": true}, {"identifier": "SecureNodeBuilder", "parameters": "(SecureNodeBuilder parent, String name)", "modifiers": "private", "return": "", "signature": " SecureNodeBuilder(SecureNodeBuilder parent, String name)", "full_signature": "private  SecureNodeBuilder(SecureNodeBuilder parent, String name)", "class_method_signature": "SecureNodeBuilder.SecureNodeBuilder(SecureNodeBuilder parent, String name)", "testcase": false, "constructor": true}, {"identifier": "getBaseState", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "NodeState", "signature": "NodeState getBaseState()", "full_signature": "@Override @NotNull public NodeState getBaseState()", "class_method_signature": "SecureNodeBuilder.getBaseState()", "testcase": false, "constructor": false}, {"identifier": "getNodeState", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "NodeState", "signature": "NodeState getNodeState()", "full_signature": "@Override @NotNull public NodeState getNodeState()", "class_method_signature": "SecureNodeBuilder.getNodeState()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists()", "full_signature": "@Override public boolean exists()", "class_method_signature": "SecureNodeBuilder.exists()", "testcase": false, "constructor": false}, {"identifier": "isNew", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNew()", "full_signature": "@Override public boolean isNew()", "class_method_signature": "SecureNodeBuilder.isNew()", "testcase": false, "constructor": false}, {"identifier": "isNew", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNew(String name)", "full_signature": "@Override public boolean isNew(String name)", "class_method_signature": "SecureNodeBuilder.isNew(String name)", "testcase": false, "constructor": false}, {"identifier": "isModified", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isModified()", "full_signature": "@Override public boolean isModified()", "class_method_signature": "SecureNodeBuilder.isModified()", "testcase": false, "constructor": false}, {"identifier": "isReplaced", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReplaced()", "full_signature": "@Override public boolean isReplaced()", "class_method_signature": "SecureNodeBuilder.isReplaced()", "testcase": false, "constructor": false}, {"identifier": "isReplaced", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReplaced(String name)", "full_signature": "@Override public boolean isReplaced(String name)", "class_method_signature": "SecureNodeBuilder.isReplaced(String name)", "testcase": false, "constructor": false}, {"identifier": "baseChanged", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void baseChanged()", "full_signature": "public void baseChanged()", "class_method_signature": "SecureNodeBuilder.baseChanged()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove()", "full_signature": "@Override public boolean remove()", "class_method_signature": "SecureNodeBuilder.remove()", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(@NotNull NodeBuilder newParent, @NotNull String newName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean moveTo(@NotNull NodeBuilder newParent, @NotNull String newName)", "full_signature": "@Override public boolean moveTo(@NotNull NodeBuilder newParent, @NotNull String newName)", "class_method_signature": "SecureNodeBuilder.moveTo(@NotNull NodeBuilder newParent, @NotNull String newName)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Nullable @Override public", "return": "PropertyState", "signature": "PropertyState getProperty(String name)", "full_signature": "@Nullable @Override public PropertyState getProperty(String name)", "class_method_signature": "SecureNodeBuilder.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasProperty(String name)", "full_signature": "@Override public boolean hasProperty(String name)", "class_method_signature": "SecureNodeBuilder.hasProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getPropertyCount", "parameters": "()", "modifiers": "@Override public synchronized", "return": "long", "signature": "long getPropertyCount()", "full_signature": "@Override public synchronized long getPropertyCount()", "class_method_signature": "SecureNodeBuilder.getPropertyCount()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Iterable<? extends PropertyState>", "signature": "Iterable<? extends PropertyState> getProperties()", "full_signature": "@NotNull @Override public Iterable<? extends PropertyState> getProperties()", "class_method_signature": "SecureNodeBuilder.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "(@NotNull String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getBoolean(@NotNull String name)", "full_signature": "@Override public boolean getBoolean(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.getBoolean(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(@NotNull String name)", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getString(@NotNull String name)", "full_signature": "@Nullable @Override public String getString(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.getString(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(@NotNull String name)", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getName(@NotNull String name)", "full_signature": "@Nullable @Override public String getName(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.getName(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "(@NotNull String name)", "modifiers": "@NotNull @Override public", "return": "Iterable<String>", "signature": "Iterable<String> getNames(@NotNull String name)", "full_signature": "@NotNull @Override public Iterable<String> getNames(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.getNames(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(@NotNull PropertyState property)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder setProperty(@NotNull PropertyState property)", "full_signature": "@NotNull @Override public NodeBuilder setProperty(@NotNull PropertyState property)", "class_method_signature": "SecureNodeBuilder.setProperty(@NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String name, @NotNull T value)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder setProperty(String name, @NotNull T value)", "full_signature": "@NotNull @Override public NodeBuilder setProperty(String name, @NotNull T value)", "class_method_signature": "SecureNodeBuilder.setProperty(String name, @NotNull T value)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(\n            String name, @NotNull T value, Type<T> type)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder setProperty(\n            String name, @NotNull T value, Type<T> type)", "full_signature": "@NotNull @Override public NodeBuilder setProperty(\n            String name, @NotNull T value, Type<T> type)", "class_method_signature": "SecureNodeBuilder.setProperty(\n            String name, @NotNull T value, Type<T> type)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(String name)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder removeProperty(String name)", "full_signature": "@NotNull @Override public NodeBuilder removeProperty(String name)", "class_method_signature": "SecureNodeBuilder.removeProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getChildNodeNames", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Iterable<String>", "signature": "Iterable<String> getChildNodeNames()", "full_signature": "@NotNull @Override public Iterable<String> getChildNodeNames()", "class_method_signature": "SecureNodeBuilder.getChildNodeNames()", "testcase": false, "constructor": false}, {"identifier": "hasChildNode", "parameters": "(@NotNull String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChildNode(@NotNull String name)", "full_signature": "@Override public boolean hasChildNode(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.hasChildNode(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "child", "parameters": "(@NotNull String name)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder child(@NotNull String name)", "full_signature": "@NotNull @Override public NodeBuilder child(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.child(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "setChildNode", "parameters": "(@NotNull String name)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder setChildNode(@NotNull String name)", "full_signature": "@NotNull @Override public NodeBuilder setChildNode(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.setChildNode(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "setChildNode", "parameters": "(@NotNull String name, @NotNull NodeState nodeState)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder setChildNode(@NotNull String name, @NotNull NodeState nodeState)", "full_signature": "@NotNull @Override public NodeBuilder setChildNode(@NotNull String name, @NotNull NodeState nodeState)", "class_method_signature": "SecureNodeBuilder.setChildNode(@NotNull String name, @NotNull NodeState nodeState)", "testcase": false, "constructor": false}, {"identifier": "getChildNode", "parameters": "(@NotNull String name)", "modifiers": "@NotNull @Override public", "return": "NodeBuilder", "signature": "NodeBuilder getChildNode(@NotNull String name)", "full_signature": "@NotNull @Override public NodeBuilder getChildNode(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.getChildNode(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getChildNodeCount", "parameters": "(long max)", "modifiers": "@Override public synchronized", "return": "long", "signature": "long getChildNodeCount(long max)", "full_signature": "@Override public synchronized long getChildNodeCount(long max)", "class_method_signature": "SecureNodeBuilder.getChildNodeCount(long max)", "testcase": false, "constructor": false}, {"identifier": "createBlob", "parameters": "(InputStream stream)", "modifiers": "@Override public", "return": "Blob", "signature": "Blob createBlob(InputStream stream)", "full_signature": "@Override public Blob createBlob(InputStream stream)", "class_method_signature": "SecureNodeBuilder.createBlob(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getTreePermission", "parameters": "()", "modifiers": "@NotNull private", "return": "TreePermission", "signature": "TreePermission getTreePermission()", "full_signature": "@NotNull private TreePermission getTreePermission()", "class_method_signature": "SecureNodeBuilder.getTreePermission()", "testcase": false, "constructor": false}, {"identifier": "isType", "parameters": "(@Nullable PropertyState property, Type<?> type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isType(@Nullable PropertyState property, Type<?> type)", "full_signature": "private static boolean isType(@Nullable PropertyState property, Type<?> type)", "class_method_signature": "SecureNodeBuilder.isType(@Nullable PropertyState property, Type<?> type)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/core/SecureNodeBuilder.java"}, "focal_method": {"identifier": "getName", "parameters": "(@NotNull String name)", "modifiers": "@Nullable @Override public", "return": "String", "body": "@Nullable\n    @Override\n    public String getName(@NotNull String name) {\n        PropertyState property = getProperty(name);\n        if (isType(property, NAME)) {\n            return property.getValue(NAME);\n        } else {\n            return null;\n        }\n    }", "signature": "String getName(@NotNull String name)", "full_signature": "@Nullable @Override public String getName(@NotNull String name)", "class_method_signature": "SecureNodeBuilder.getName(@NotNull String name)", "testcase": false, "constructor": false, "invocations": ["getProperty", "isType", "getValue"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}