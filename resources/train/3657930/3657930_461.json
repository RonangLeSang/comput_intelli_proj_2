{"test_class": {"identifier": "SolrQueryIndexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NodeState nodeState;", "modifier": "private", "type": "NodeState", "declarator": "nodeState", "var_name": "nodeState"}], "file": "oak-solr-core/src/test/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndexTest.java"}, "test_case": {"identifier": "testNoPlanWithPropertyRestrictionsEnabledButNotUsedProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoPlanWithPropertyRestrictionsEnabledButNotUsedProperty() throws Exception {\n        NodeBuilder builder = nodeState.builder();\n        builder.child(\"oak:index\").child(\"solr\")\n                .setProperty(\"usedProperties\", Collections.singleton(\"foo\"), Type.STRINGS)\n                .setProperty(\"propertyRestrictions\", true);\n        nodeState = builder.getNodeState();\n\n        SelectorImpl selector = newSelector(nodeState, \"a\");\n\n        SolrQueryIndex solrQueryIndex = new SolrQueryIndex(null, null, null);\n\n        FilterImpl filter = new FilterImpl(selector, \"select * from [nt:base] as a where name = 'hello')\", new QueryEngineSettings());\n        filter.restrictProperty(\"name\", Operator.EQUAL, PropertyValues.newString(\"hello\"));\n        List<QueryIndex.OrderEntry> sortOrder = new LinkedList<QueryIndex.OrderEntry>();\n        List<QueryIndex.IndexPlan> plans = solrQueryIndex.getPlans(filter, sortOrder, nodeState);\n        assertEquals(0, plans.size());\n    }", "signature": "void testNoPlanWithPropertyRestrictionsEnabledButNotUsedProperty()", "full_signature": "@Test public void testNoPlanWithPropertyRestrictionsEnabledButNotUsedProperty()", "class_method_signature": "SolrQueryIndexTest.testNoPlanWithPropertyRestrictionsEnabledButNotUsedProperty()", "testcase": true, "constructor": false, "invocations": ["builder", "setProperty", "setProperty", "child", "child", "singleton", "getNodeState", "newSelector", "restrictProperty", "newString", "getPlans", "assertEquals", "size"]}, "focal_class": {"identifier": "SolrQueryIndex", "superclass": "", "interfaces": "implements FulltextQueryIndex, QueryIndex.AdvanceFulltextQueryIndex", "fields": [{"original_string": "public static final String TYPE = \"solr\";", "modifier": "public static final", "type": "String", "declarator": "TYPE = \"solr\"", "var_name": "TYPE"}, {"original_string": "static final String NATIVE_SOLR_QUERY = \"native*solr\";", "modifier": "static final", "type": "String", "declarator": "NATIVE_SOLR_QUERY = \"native*solr\"", "var_name": "NATIVE_SOLR_QUERY"}, {"original_string": "static final String NATIVE_LUCENE_QUERY = \"native*lucene\";", "modifier": "static final", "type": "String", "declarator": "NATIVE_LUCENE_QUERY = \"native*lucene\"", "var_name": "NATIVE_LUCENE_QUERY"}, {"original_string": "private static double MIN_COST = 2.3;", "modifier": "private static", "type": "double", "declarator": "MIN_COST = 2.3", "var_name": "MIN_COST"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(SolrQueryIndex.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SolrQueryIndex.class)", "var_name": "log"}, {"original_string": "private final NodeAggregator aggregator;", "modifier": "private final", "type": "NodeAggregator", "declarator": "aggregator", "var_name": "aggregator"}, {"original_string": "private final OakSolrConfigurationProvider fallbackOakSolrConfigurationProvider;", "modifier": "private final", "type": "OakSolrConfigurationProvider", "declarator": "fallbackOakSolrConfigurationProvider", "var_name": "fallbackOakSolrConfigurationProvider"}, {"original_string": "private final SolrServerProvider fallbackSolrServerProvider;", "modifier": "private final", "type": "SolrServerProvider", "declarator": "fallbackSolrServerProvider", "var_name": "fallbackSolrServerProvider"}, {"original_string": "private static final Map<String, LMSEstimator> estimators = new WeakHashMap<String, LMSEstimator>();", "modifier": "private static final", "type": "Map<String, LMSEstimator>", "declarator": "estimators = new WeakHashMap<String, LMSEstimator>()", "var_name": "estimators"}], "methods": [{"identifier": "SolrQueryIndex", "parameters": "(NodeAggregator aggregator, OakSolrConfigurationProvider oakSolrConfigurationProvider, SolrServerProvider solrServerProvider)", "modifiers": "public", "return": "", "signature": " SolrQueryIndex(NodeAggregator aggregator, OakSolrConfigurationProvider oakSolrConfigurationProvider, SolrServerProvider solrServerProvider)", "full_signature": "public  SolrQueryIndex(NodeAggregator aggregator, OakSolrConfigurationProvider oakSolrConfigurationProvider, SolrServerProvider solrServerProvider)", "class_method_signature": "SolrQueryIndex.SolrQueryIndex(NodeAggregator aggregator, OakSolrConfigurationProvider oakSolrConfigurationProvider, SolrServerProvider solrServerProvider)", "testcase": false, "constructor": true}, {"identifier": "getMinimumCost", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getMinimumCost()", "full_signature": "@Override public double getMinimumCost()", "class_method_signature": "SolrQueryIndex.getMinimumCost()", "testcase": false, "constructor": false}, {"identifier": "getIndexName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIndexName()", "full_signature": "@Override public String getIndexName()", "class_method_signature": "SolrQueryIndex.getIndexName()", "testcase": false, "constructor": false}, {"identifier": "getCost", "parameters": "(Filter filter, NodeState root)", "modifiers": "@Override public", "return": "double", "signature": "double getCost(Filter filter, NodeState root)", "full_signature": "@Override public double getCost(Filter filter, NodeState root)", "class_method_signature": "SolrQueryIndex.getCost(Filter filter, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "getMatchingFilterRestrictions", "parameters": "(Filter filter, OakSolrConfiguration configuration)", "modifiers": "", "return": "int", "signature": "int getMatchingFilterRestrictions(Filter filter, OakSolrConfiguration configuration)", "full_signature": " int getMatchingFilterRestrictions(Filter filter, OakSolrConfiguration configuration)", "class_method_signature": "SolrQueryIndex.getMatchingFilterRestrictions(Filter filter, OakSolrConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "hasIgnoredProperties", "parameters": "(Collection<Filter.PropertyRestriction> propertyRestrictions, OakSolrConfiguration configuration)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasIgnoredProperties(Collection<Filter.PropertyRestriction> propertyRestrictions, OakSolrConfiguration configuration)", "full_signature": "private static boolean hasIgnoredProperties(Collection<Filter.PropertyRestriction> propertyRestrictions, OakSolrConfiguration configuration)", "class_method_signature": "SolrQueryIndex.hasIgnoredProperties(Collection<Filter.PropertyRestriction> propertyRestrictions, OakSolrConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "getPlan", "parameters": "(Filter filter, NodeState nodeState)", "modifiers": "@Override public", "return": "String", "signature": "String getPlan(Filter filter, NodeState nodeState)", "full_signature": "@Override public String getPlan(Filter filter, NodeState nodeState)", "class_method_signature": "SolrQueryIndex.getPlan(Filter filter, NodeState nodeState)", "testcase": false, "constructor": false}, {"identifier": "getRelativePaths", "parameters": "(FullTextExpression ft)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> getRelativePaths(FullTextExpression ft)", "full_signature": "private static Set<String> getRelativePaths(FullTextExpression ft)", "class_method_signature": "SolrQueryIndex.getRelativePaths(FullTextExpression ft)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final IndexPlan plan, final NodeState root)", "modifiers": "@Override public", "return": "Cursor", "signature": "Cursor query(final IndexPlan plan, final NodeState root)", "full_signature": "@Override public Cursor query(final IndexPlan plan, final NodeState root)", "class_method_signature": "SolrQueryIndex.query(final IndexPlan plan, final NodeState root)", "testcase": false, "constructor": false}, {"identifier": "getEstimator", "parameters": "(String path)", "modifiers": "private synchronized", "return": "LMSEstimator", "signature": "LMSEstimator getEstimator(String path)", "full_signature": "private synchronized LMSEstimator getEstimator(String path)", "class_method_signature": "SolrQueryIndex.getEstimator(String path)", "testcase": false, "constructor": false}, {"identifier": "getServer", "parameters": "(String path, NodeState root)", "modifiers": "private", "return": "SolrClient", "signature": "SolrClient getServer(String path, NodeState root)", "full_signature": "private SolrClient getServer(String path, NodeState root)", "class_method_signature": "SolrQueryIndex.getServer(String path, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "getIterator", "parameters": "(final Filter filter, final IndexPlan plan,\n                                                        final String parent, final int parentDepth,\n                                                        final OakSolrConfiguration configuration, final SolrClient solrServer,\n                                                        final LMSEstimator estimator)", "modifiers": "private", "return": "AbstractIterator<SolrResultRow>", "signature": "AbstractIterator<SolrResultRow> getIterator(final Filter filter, final IndexPlan plan,\n                                                        final String parent, final int parentDepth,\n                                                        final OakSolrConfiguration configuration, final SolrClient solrServer,\n                                                        final LMSEstimator estimator)", "full_signature": "private AbstractIterator<SolrResultRow> getIterator(final Filter filter, final IndexPlan plan,\n                                                        final String parent, final int parentDepth,\n                                                        final OakSolrConfiguration configuration, final SolrClient solrServer,\n                                                        final LMSEstimator estimator)", "class_method_signature": "SolrQueryIndex.getIterator(final Filter filter, final IndexPlan plan,\n                                                        final String parent, final int parentDepth,\n                                                        final OakSolrConfiguration configuration, final SolrClient solrServer,\n                                                        final LMSEstimator estimator)", "testcase": false, "constructor": false}, {"identifier": "filterFacet", "parameters": "(SolrDocument doc, FacetField facetField)", "modifiers": "private", "return": "void", "signature": "void filterFacet(SolrDocument doc, FacetField facetField)", "full_signature": "private void filterFacet(SolrDocument doc, FacetField facetField)", "class_method_signature": "SolrQueryIndex.filterFacet(SolrDocument doc, FacetField facetField)", "testcase": false, "constructor": false}, {"identifier": "putSpellChecks", "parameters": "(SpellCheckResponse spellCheckResponse,\n                                final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "modifiers": "private", "return": "void", "signature": "void putSpellChecks(SpellCheckResponse spellCheckResponse,\n                                final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "full_signature": "private void putSpellChecks(SpellCheckResponse spellCheckResponse,\n                                final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "class_method_signature": "SolrQueryIndex.putSpellChecks(SpellCheckResponse spellCheckResponse,\n                                final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "testcase": false, "constructor": false}, {"identifier": "putSuggestions", "parameters": "(Set<Map.Entry<String, Object>> suggestEntries, final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "modifiers": "private", "return": "void", "signature": "void putSuggestions(Set<Map.Entry<String, Object>> suggestEntries, final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "full_signature": "private void putSuggestions(Set<Map.Entry<String, Object>> suggestEntries, final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "class_method_signature": "SolrQueryIndex.putSuggestions(Set<Map.Entry<String, Object>> suggestEntries, final Deque<SolrResultRow> queue,\n                                Filter filter, OakSolrConfiguration configuration, SolrClient solrServer)", "testcase": false, "constructor": false}, {"identifier": "isIgnoredProperty", "parameters": "(Filter.PropertyRestriction property, OakSolrConfiguration configuration)", "modifiers": "static", "return": "boolean", "signature": "boolean isIgnoredProperty(Filter.PropertyRestriction property, OakSolrConfiguration configuration)", "full_signature": "static boolean isIgnoredProperty(Filter.PropertyRestriction property, OakSolrConfiguration configuration)", "class_method_signature": "SolrQueryIndex.isIgnoredProperty(Filter.PropertyRestriction property, OakSolrConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "getPlans", "parameters": "(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "modifiers": "@Override public", "return": "List<IndexPlan>", "signature": "List<IndexPlan> getPlans(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "full_signature": "@Override public List<IndexPlan> getPlans(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "class_method_signature": "SolrQueryIndex.getPlans(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "(String path, NodeState rootState)", "modifiers": "private", "return": "OakSolrConfiguration", "signature": "OakSolrConfiguration getConfiguration(String path, NodeState rootState)", "full_signature": "private OakSolrConfiguration getConfiguration(String path, NodeState rootState)", "class_method_signature": "SolrQueryIndex.getConfiguration(String path, NodeState rootState)", "testcase": false, "constructor": false}, {"identifier": "getIndexPlan", "parameters": "(Filter filter, OakSolrConfiguration configuration, LMSEstimator estimator,\n                                   List<OrderEntry> sortOrder, String path)", "modifiers": "private", "return": "IndexPlan", "signature": "IndexPlan getIndexPlan(Filter filter, OakSolrConfiguration configuration, LMSEstimator estimator,\n                                   List<OrderEntry> sortOrder, String path)", "full_signature": "private IndexPlan getIndexPlan(Filter filter, OakSolrConfiguration configuration, LMSEstimator estimator,\n                                   List<OrderEntry> sortOrder, String path)", "class_method_signature": "SolrQueryIndex.getIndexPlan(Filter filter, OakSolrConfiguration configuration, LMSEstimator estimator,\n                                   List<OrderEntry> sortOrder, String path)", "testcase": false, "constructor": false}, {"identifier": "getPathPrefix", "parameters": "(String indexPath)", "modifiers": "private", "return": "String", "signature": "String getPathPrefix(String indexPath)", "full_signature": "private String getPathPrefix(String indexPath)", "class_method_signature": "SolrQueryIndex.getPathPrefix(String indexPath)", "testcase": false, "constructor": false}, {"identifier": "planBuilder", "parameters": "(Filter filter)", "modifiers": "private", "return": "IndexPlan.Builder", "signature": "IndexPlan.Builder planBuilder(Filter filter)", "full_signature": "private IndexPlan.Builder planBuilder(Filter filter)", "class_method_signature": "SolrQueryIndex.planBuilder(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getPlanDescription", "parameters": "(IndexPlan plan, NodeState root)", "modifiers": "@Override public", "return": "String", "signature": "String getPlanDescription(IndexPlan plan, NodeState root)", "full_signature": "@Override public String getPlanDescription(IndexPlan plan, NodeState root)", "class_method_signature": "SolrQueryIndex.getPlanDescription(IndexPlan plan, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(Filter filter, NodeState rootState)", "modifiers": "@Override public", "return": "Cursor", "signature": "Cursor query(Filter filter, NodeState rootState)", "full_signature": "@Override public Cursor query(Filter filter, NodeState rootState)", "class_method_signature": "SolrQueryIndex.query(Filter filter, NodeState rootState)", "testcase": false, "constructor": false}, {"identifier": "getNodeAggregator", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "NodeAggregator", "signature": "NodeAggregator getNodeAggregator()", "full_signature": "@Override @Nullable public NodeAggregator getNodeAggregator()", "class_method_signature": "SolrQueryIndex.getNodeAggregator()", "testcase": false, "constructor": false}], "file": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java"}, "focal_method": {"identifier": "getPlans", "parameters": "(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "modifiers": "@Override public", "return": "List<IndexPlan>", "body": "@Override\n    public List<IndexPlan> getPlans(Filter filter, List<OrderEntry> sortOrder, NodeState rootState) {\n\n        Collection<String> indexPaths = new SolrIndexLookup(rootState).collectIndexNodePaths(filter);\n        List<IndexPlan> plans = Lists.newArrayListWithCapacity(indexPaths.size());\n\n        log.debug(\"looking for plans for paths : {}\", indexPaths);\n        for (String path : indexPaths) {\n            OakSolrConfiguration configuration = getConfiguration(path, rootState);\n            SolrClient solrServer = getServer(path, rootState);\n            log.debug(\"building plan for server {} and configuration {}\", solrServer, configuration);\n            // only provide the plan if both valid configuration and server exist\n            if (configuration != null && solrServer != null) {\n                LMSEstimator estimator = getEstimator(path);\n                IndexPlan plan = getIndexPlan(filter, configuration, estimator, sortOrder, path);\n                if (plan != null) {\n                    plans.add(plan);\n                }\n            }\n        }\n        return plans;\n    }", "signature": "List<IndexPlan> getPlans(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "full_signature": "@Override public List<IndexPlan> getPlans(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "class_method_signature": "SolrQueryIndex.getPlans(Filter filter, List<OrderEntry> sortOrder, NodeState rootState)", "testcase": false, "constructor": false, "invocations": ["collectIndexNodePaths", "newArrayListWithCapacity", "size", "debug", "getConfiguration", "getServer", "debug", "getEstimator", "getIndexPlan", "add"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}