{"test_class": {"identifier": "AbstractAccessControlManagerTest", "superclass": "extends AbstractAccessControlTest", "interfaces": "", "fields": [{"original_string": "private static final String WSP_NAME = \"wspName\";", "modifier": "private static final", "type": "String", "declarator": "WSP_NAME = \"wspName\"", "var_name": "WSP_NAME"}, {"original_string": "public static final String TEST_PREFIX = \"jr\";", "modifier": "public static final", "type": "String", "declarator": "TEST_PREFIX = \"jr\"", "var_name": "TEST_PREFIX"}, {"original_string": "private final String testName = TEST_PREFIX + \":testRoot\";", "modifier": "private final", "type": "String", "declarator": "testName = TEST_PREFIX + \":testRoot\"", "var_name": "testName"}, {"original_string": "private final String testPath = '/' + testName;", "modifier": "private final", "type": "String", "declarator": "testPath = '/' + testName", "var_name": "testPath"}, {"original_string": "private final String nonExistingPath = \"/not/existing\";", "modifier": "private final", "type": "String", "declarator": "nonExistingPath = \"/not/existing\"", "var_name": "nonExistingPath"}, {"original_string": "private final Set<Principal> testPrincipals = ImmutableSet.of(testPrincipal);", "modifier": "private final", "type": "Set<Principal>", "declarator": "testPrincipals = ImmutableSet.of(testPrincipal)", "var_name": "testPrincipals"}, {"original_string": "private Privilege[] testPrivileges;", "modifier": "private", "type": "Privilege[]", "declarator": "testPrivileges", "var_name": "testPrivileges"}, {"original_string": "private Privilege[] allPrivileges;", "modifier": "private", "type": "Privilege[]", "declarator": "allPrivileges", "var_name": "allPrivileges"}, {"original_string": "private AbstractAccessControlManager acMgr;", "modifier": "private", "type": "AbstractAccessControlManager", "declarator": "acMgr", "var_name": "acMgr"}, {"original_string": "private PrivilegeManager privilegeManager;", "modifier": "private", "type": "PrivilegeManager", "declarator": "privilegeManager", "var_name": "privilegeManager"}, {"original_string": "private AuthorizationConfiguration authorizationConfiguration;", "modifier": "private", "type": "AuthorizationConfiguration", "declarator": "authorizationConfiguration", "var_name": "authorizationConfiguration"}, {"original_string": "private SecurityProvider securityProvider;", "modifier": "private", "type": "SecurityProvider", "declarator": "securityProvider", "var_name": "securityProvider"}, {"original_string": "private ContentSession cs;", "modifier": "private", "type": "ContentSession", "declarator": "cs", "var_name": "cs"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/accesscontrol/AbstractAccessControlManagerTest.java"}, "test_case": {"identifier": "testGetPrivilegesSessionPrincipalSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPrivilegesSessionPrincipalSet() throws Exception {\n        AbstractAccessControlManager mgr = spy(acMgr);\n        Privilege[] privileges = mgr.getPrivileges(testPath, testPrincipals);\n        assertArrayEquals(acMgr.getPrivileges(testPath), privileges);\n\n        // getPrivileges(String,Set) for the principals attached to the content session,\n        // must result in forwarding the call to getPrivilege(String)\n        verify(mgr, times(1)).getPrivileges(testPath);\n    }", "signature": "void testGetPrivilegesSessionPrincipalSet()", "full_signature": "@Test public void testGetPrivilegesSessionPrincipalSet()", "class_method_signature": "AbstractAccessControlManagerTest.testGetPrivilegesSessionPrincipalSet()", "testcase": true, "constructor": false, "invocations": ["spy", "getPrivileges", "assertArrayEquals", "getPrivileges", "getPrivileges", "verify", "times"]}, "focal_class": {"identifier": "AbstractAccessControlManager", "superclass": "", "interfaces": "implements JackrabbitAccessControlManager, AccessControlConstants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AbstractAccessControlManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractAccessControlManager.class)", "var_name": "log"}, {"original_string": "private final Root root;", "modifier": "private final", "type": "Root", "declarator": "root", "var_name": "root"}, {"original_string": "private final String workspaceName;", "modifier": "private final", "type": "String", "declarator": "workspaceName", "var_name": "workspaceName"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private final AuthorizationConfiguration config;", "modifier": "private final", "type": "AuthorizationConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private final PrivilegeManager privilegeManager;", "modifier": "private final", "type": "PrivilegeManager", "declarator": "privilegeManager", "var_name": "privilegeManager"}, {"original_string": "private PermissionProvider permissionProvider;", "modifier": "private", "type": "PermissionProvider", "declarator": "permissionProvider", "var_name": "permissionProvider"}, {"original_string": "private boolean doRefresh = false;", "modifier": "private", "type": "boolean", "declarator": "doRefresh = false", "var_name": "doRefresh"}], "methods": [{"identifier": "AbstractAccessControlManager", "parameters": "(@NotNull Root root,\n                                           @NotNull NamePathMapper namePathMapper,\n                                           @NotNull SecurityProvider securityProvider)", "modifiers": "protected", "return": "", "signature": " AbstractAccessControlManager(@NotNull Root root,\n                                           @NotNull NamePathMapper namePathMapper,\n                                           @NotNull SecurityProvider securityProvider)", "full_signature": "protected  AbstractAccessControlManager(@NotNull Root root,\n                                           @NotNull NamePathMapper namePathMapper,\n                                           @NotNull SecurityProvider securityProvider)", "class_method_signature": "AbstractAccessControlManager.AbstractAccessControlManager(@NotNull Root root,\n                                           @NotNull NamePathMapper namePathMapper,\n                                           @NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": true}, {"identifier": "getSupportedPrivileges", "parameters": "(@Nullable String absPath)", "modifiers": "@NotNull @Override public", "return": "Privilege[]", "signature": "Privilege[] getSupportedPrivileges(@Nullable String absPath)", "full_signature": "@NotNull @Override public Privilege[] getSupportedPrivileges(@Nullable String absPath)", "class_method_signature": "AbstractAccessControlManager.getSupportedPrivileges(@Nullable String absPath)", "testcase": false, "constructor": false}, {"identifier": "privilegeFromName", "parameters": "(@NotNull String privilegeName)", "modifiers": "@NotNull @Override public", "return": "Privilege", "signature": "Privilege privilegeFromName(@NotNull String privilegeName)", "full_signature": "@NotNull @Override public Privilege privilegeFromName(@NotNull String privilegeName)", "class_method_signature": "AbstractAccessControlManager.privilegeFromName(@NotNull String privilegeName)", "testcase": false, "constructor": false}, {"identifier": "hasPrivileges", "parameters": "(@Nullable String absPath, @Nullable Privilege[] privileges)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPrivileges(@Nullable String absPath, @Nullable Privilege[] privileges)", "full_signature": "@Override public boolean hasPrivileges(@Nullable String absPath, @Nullable Privilege[] privileges)", "class_method_signature": "AbstractAccessControlManager.hasPrivileges(@Nullable String absPath, @Nullable Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "getPrivileges", "parameters": "(@Nullable String absPath)", "modifiers": "@NotNull @Override public", "return": "Privilege[]", "signature": "Privilege[] getPrivileges(@Nullable String absPath)", "full_signature": "@NotNull @Override public Privilege[] getPrivileges(@Nullable String absPath)", "class_method_signature": "AbstractAccessControlManager.getPrivileges(@Nullable String absPath)", "testcase": false, "constructor": false}, {"identifier": "hasPrivileges", "parameters": "(@Nullable String absPath, @NotNull Set<Principal> principals, @Nullable Privilege[] privileges)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPrivileges(@Nullable String absPath, @NotNull Set<Principal> principals, @Nullable Privilege[] privileges)", "full_signature": "@Override public boolean hasPrivileges(@Nullable String absPath, @NotNull Set<Principal> principals, @Nullable Privilege[] privileges)", "class_method_signature": "AbstractAccessControlManager.hasPrivileges(@Nullable String absPath, @NotNull Set<Principal> principals, @Nullable Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "getPrivileges", "parameters": "(@Nullable String absPath, @NotNull Set<Principal> principals)", "modifiers": "@NotNull @Override public", "return": "Privilege[]", "signature": "Privilege[] getPrivileges(@Nullable String absPath, @NotNull Set<Principal> principals)", "full_signature": "@NotNull @Override public Privilege[] getPrivileges(@Nullable String absPath, @NotNull Set<Principal> principals)", "class_method_signature": "AbstractAccessControlManager.getPrivileges(@Nullable String absPath, @NotNull Set<Principal> principals)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "@NotNull protected", "return": "AuthorizationConfiguration", "signature": "AuthorizationConfiguration getConfig()", "full_signature": "@NotNull protected AuthorizationConfiguration getConfig()", "class_method_signature": "AbstractAccessControlManager.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@NotNull protected", "return": "Root", "signature": "Root getRoot()", "full_signature": "@NotNull protected Root getRoot()", "class_method_signature": "AbstractAccessControlManager.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getLatestRoot", "parameters": "()", "modifiers": "@NotNull protected", "return": "Root", "signature": "Root getLatestRoot()", "full_signature": "@NotNull protected Root getLatestRoot()", "class_method_signature": "AbstractAccessControlManager.getLatestRoot()", "testcase": false, "constructor": false}, {"identifier": "getNamePathMapper", "parameters": "()", "modifiers": "@NotNull protected", "return": "NamePathMapper", "signature": "NamePathMapper getNamePathMapper()", "full_signature": "@NotNull protected NamePathMapper getNamePathMapper()", "class_method_signature": "AbstractAccessControlManager.getNamePathMapper()", "testcase": false, "constructor": false}, {"identifier": "getPrivilegeManager", "parameters": "()", "modifiers": "@NotNull protected", "return": "PrivilegeManager", "signature": "PrivilegeManager getPrivilegeManager()", "full_signature": "@NotNull protected PrivilegeManager getPrivilegeManager()", "class_method_signature": "AbstractAccessControlManager.getPrivilegeManager()", "testcase": false, "constructor": false}, {"identifier": "getOakPath", "parameters": "(@Nullable String jcrPath)", "modifiers": "@Nullable protected", "return": "String", "signature": "String getOakPath(@Nullable String jcrPath)", "full_signature": "@Nullable protected String getOakPath(@Nullable String jcrPath)", "class_method_signature": "AbstractAccessControlManager.getOakPath(@Nullable String jcrPath)", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "(@Nullable String oakPath, long permissions, boolean checkAcContent)", "modifiers": "@NotNull protected", "return": "Tree", "signature": "Tree getTree(@Nullable String oakPath, long permissions, boolean checkAcContent)", "full_signature": "@NotNull protected Tree getTree(@Nullable String oakPath, long permissions, boolean checkAcContent)", "class_method_signature": "AbstractAccessControlManager.getTree(@Nullable String oakPath, long permissions, boolean checkAcContent)", "testcase": false, "constructor": false}, {"identifier": "getPermissionProvider", "parameters": "()", "modifiers": "@NotNull protected", "return": "PermissionProvider", "signature": "PermissionProvider getPermissionProvider()", "full_signature": "@NotNull protected PermissionProvider getPermissionProvider()", "class_method_signature": "AbstractAccessControlManager.getPermissionProvider()", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "()", "modifiers": "@NotNull private", "return": "Set<Principal>", "signature": "Set<Principal> getPrincipals()", "full_signature": "@NotNull private Set<Principal> getPrincipals()", "class_method_signature": "AbstractAccessControlManager.getPrincipals()", "testcase": false, "constructor": false}, {"identifier": "checkPermissions", "parameters": "(@Nullable Tree tree, long permissions)", "modifiers": "private", "return": "void", "signature": "void checkPermissions(@Nullable Tree tree, long permissions)", "full_signature": "private void checkPermissions(@Nullable Tree tree, long permissions)", "class_method_signature": "AbstractAccessControlManager.checkPermissions(@Nullable Tree tree, long permissions)", "testcase": false, "constructor": false}, {"identifier": "getPrivileges", "parameters": "(@Nullable String absPath,\n                                      @NotNull PermissionProvider provider,\n                                      long permissions)", "modifiers": "@NotNull private", "return": "Privilege[]", "signature": "Privilege[] getPrivileges(@Nullable String absPath,\n                                      @NotNull PermissionProvider provider,\n                                      long permissions)", "full_signature": "@NotNull private Privilege[] getPrivileges(@Nullable String absPath,\n                                      @NotNull PermissionProvider provider,\n                                      long permissions)", "class_method_signature": "AbstractAccessControlManager.getPrivileges(@Nullable String absPath,\n                                      @NotNull PermissionProvider provider,\n                                      long permissions)", "testcase": false, "constructor": false}, {"identifier": "hasPrivileges", "parameters": "(@Nullable String absPath, @Nullable Privilege[] privileges,\n                                  @NotNull PermissionProvider provider, long permissions,\n                                  boolean checkAcContent)", "modifiers": "private", "return": "boolean", "signature": "boolean hasPrivileges(@Nullable String absPath, @Nullable Privilege[] privileges,\n                                  @NotNull PermissionProvider provider, long permissions,\n                                  boolean checkAcContent)", "full_signature": "private boolean hasPrivileges(@Nullable String absPath, @Nullable Privilege[] privileges,\n                                  @NotNull PermissionProvider provider, long permissions,\n                                  boolean checkAcContent)", "class_method_signature": "AbstractAccessControlManager.hasPrivileges(@Nullable String absPath, @Nullable Privilege[] privileges,\n                                  @NotNull PermissionProvider provider, long permissions,\n                                  boolean checkAcContent)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/accesscontrol/AbstractAccessControlManager.java"}, "focal_method": {"identifier": "getPrivileges", "parameters": "(@Nullable String absPath)", "modifiers": "@NotNull @Override public", "return": "Privilege[]", "body": "@NotNull\n    @Override\n    public Privilege[] getPrivileges(@Nullable String absPath) throws RepositoryException {\n        return getPrivileges(absPath, getPermissionProvider(), Permissions.NO_PERMISSION);\n    }", "signature": "Privilege[] getPrivileges(@Nullable String absPath)", "full_signature": "@NotNull @Override public Privilege[] getPrivileges(@Nullable String absPath)", "class_method_signature": "AbstractAccessControlManager.getPrivileges(@Nullable String absPath)", "testcase": false, "constructor": false, "invocations": ["getPrivileges", "getPermissionProvider"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}