{"test_class": {"identifier": "AllPermissionsTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private final CompiledPermissions all = AllPermissions.getInstance();", "modifier": "private final", "type": "CompiledPermissions", "declarator": "all = AllPermissions.getInstance()", "var_name": "all"}, {"original_string": "private List<String> paths = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "paths = new ArrayList<>()", "var_name": "paths"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/permission/AllPermissionsTest.java"}, "test_case": {"identifier": "testGetRepositoryPermission", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRepositoryPermission() {\n        assertSame(RepositoryPermission.ALL, all.getRepositoryPermission());\n    }", "signature": "void testGetRepositoryPermission()", "full_signature": "@Test public void testGetRepositoryPermission()", "class_method_signature": "AllPermissionsTest.testGetRepositoryPermission()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getRepositoryPermission"]}, "focal_class": {"identifier": "AllPermissions", "superclass": "", "interfaces": "implements CompiledPermissions", "fields": [{"original_string": "private static final CompiledPermissions INSTANCE = new AllPermissions();", "modifier": "private static final", "type": "CompiledPermissions", "declarator": "INSTANCE = new AllPermissions()", "var_name": "INSTANCE"}], "methods": [{"identifier": "AllPermissions", "parameters": "()", "modifiers": "private", "return": "", "signature": " AllPermissions()", "full_signature": "private  AllPermissions()", "class_method_signature": "AllPermissions.AllPermissions()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "@NotNull static", "return": "CompiledPermissions", "signature": "CompiledPermissions getInstance()", "full_signature": "@NotNull static CompiledPermissions getInstance()", "class_method_signature": "AllPermissions.getInstance()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(@NotNull Root root, @NotNull String workspaceName)", "modifiers": "@Override public", "return": "void", "signature": "void refresh(@NotNull Root root, @NotNull String workspaceName)", "full_signature": "@Override public void refresh(@NotNull Root root, @NotNull String workspaceName)", "class_method_signature": "AllPermissions.refresh(@NotNull Root root, @NotNull String workspaceName)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryPermission", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RepositoryPermission", "signature": "RepositoryPermission getRepositoryPermission()", "full_signature": "@NotNull @Override public RepositoryPermission getRepositoryPermission()", "class_method_signature": "AllPermissions.getRepositoryPermission()", "testcase": false, "constructor": false}, {"identifier": "getTreePermission", "parameters": "(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "modifiers": "@NotNull @Override public", "return": "TreePermission", "signature": "TreePermission getTreePermission(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "full_signature": "@NotNull @Override public TreePermission getTreePermission(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "class_method_signature": "AllPermissions.getTreePermission(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "testcase": false, "constructor": false}, {"identifier": "getTreePermission", "parameters": "(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "modifiers": "@NotNull @Override public", "return": "TreePermission", "signature": "TreePermission getTreePermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "full_signature": "@NotNull @Override public TreePermission getTreePermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "class_method_signature": "AllPermissions.getTreePermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(@NotNull Tree tree, @Nullable PropertyState property, long permissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(@NotNull Tree tree, @Nullable PropertyState property, long permissions)", "full_signature": "@Override public boolean isGranted(@NotNull Tree tree, @Nullable PropertyState property, long permissions)", "class_method_signature": "AllPermissions.isGranted(@NotNull Tree tree, @Nullable PropertyState property, long permissions)", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(@NotNull String path, long permissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(@NotNull String path, long permissions)", "full_signature": "@Override public boolean isGranted(@NotNull String path, long permissions)", "class_method_signature": "AllPermissions.isGranted(@NotNull String path, long permissions)", "testcase": false, "constructor": false}, {"identifier": "getPrivileges", "parameters": "(@Nullable Tree tree)", "modifiers": "@NotNull @Override public", "return": "Set<String>", "signature": "Set<String> getPrivileges(@Nullable Tree tree)", "full_signature": "@NotNull @Override public Set<String> getPrivileges(@Nullable Tree tree)", "class_method_signature": "AllPermissions.getPrivileges(@Nullable Tree tree)", "testcase": false, "constructor": false}, {"identifier": "hasPrivileges", "parameters": "(@Nullable Tree tree, @NotNull String... privilegeNames)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPrivileges(@Nullable Tree tree, @NotNull String... privilegeNames)", "full_signature": "@Override public boolean hasPrivileges(@Nullable Tree tree, @NotNull String... privilegeNames)", "class_method_signature": "AllPermissions.hasPrivileges(@Nullable Tree tree, @NotNull String... privilegeNames)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/AllPermissions.java"}, "focal_method": {"identifier": "getRepositoryPermission", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RepositoryPermission", "body": "@NotNull\n    @Override\n    public RepositoryPermission getRepositoryPermission() {\n        return RepositoryPermission.ALL;\n    }", "signature": "RepositoryPermission getRepositoryPermission()", "full_signature": "@NotNull @Override public RepositoryPermission getRepositoryPermission()", "class_method_signature": "AllPermissions.getRepositoryPermission()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}