{"test_class": {"identifier": "PrincipalPolicyImporterTest", "superclass": "extends AbstractPrincipalBasedTest", "interfaces": "", "fields": [{"original_string": "private FilterProvider filterProvider;", "modifier": "private", "type": "FilterProvider", "declarator": "filterProvider", "var_name": "filterProvider"}, {"original_string": "private PrincipalPolicyImporter importer;", "modifier": "private", "type": "PrincipalPolicyImporter", "declarator": "importer", "var_name": "importer"}], "file": "oak-authorization-principalbased/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/PrincipalPolicyImporterTest.java"}, "test_case": {"identifier": "testEndChildInfoWithoutPolicyNorEntry", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testEndChildInfoWithoutPolicyNorEntry() throws Exception {\n        importer.endChildInfo();\n    }", "signature": "void testEndChildInfoWithoutPolicyNorEntry()", "full_signature": "@Test(expected = IllegalStateException.class) public void testEndChildInfoWithoutPolicyNorEntry()", "class_method_signature": "PrincipalPolicyImporterTest.testEndChildInfoWithoutPolicyNorEntry()", "testcase": true, "constructor": false, "invocations": ["endChildInfo"]}, "focal_class": {"identifier": "PrincipalPolicyImporter", "superclass": "", "interfaces": "implements ProtectedNodeImporter, ProtectedPropertyImporter, Constants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PrincipalPolicyImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PrincipalPolicyImporter.class)", "var_name": "log"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private final MgrProvider mgrProvider;", "modifier": "private final", "type": "MgrProvider", "declarator": "mgrProvider", "var_name": "mgrProvider"}, {"original_string": "private final FilterProvider filterProvider;", "modifier": "private final", "type": "FilterProvider", "declarator": "filterProvider", "var_name": "filterProvider"}, {"original_string": "private Filter filter;", "modifier": "private", "type": "Filter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private AuthorizationConfiguration authorizationConfiguration;", "modifier": "private", "type": "AuthorizationConfiguration", "declarator": "authorizationConfiguration", "var_name": "authorizationConfiguration"}, {"original_string": "private int importBehavior;", "modifier": "private", "type": "int", "declarator": "importBehavior", "var_name": "importBehavior"}, {"original_string": "private boolean initialized;", "modifier": "private", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}, {"original_string": "private PrincipalPolicyImpl policy;", "modifier": "private", "type": "PrincipalPolicyImpl", "declarator": "policy", "var_name": "policy"}, {"original_string": "private Entry entry;", "modifier": "private", "type": "Entry", "declarator": "entry", "var_name": "entry"}], "methods": [{"identifier": "PrincipalPolicyImporter", "parameters": "(@NotNull FilterProvider filterProvider, @NotNull MgrProvider mgrProvider)", "modifiers": "", "return": "", "signature": " PrincipalPolicyImporter(@NotNull FilterProvider filterProvider, @NotNull MgrProvider mgrProvider)", "full_signature": "  PrincipalPolicyImporter(@NotNull FilterProvider filterProvider, @NotNull MgrProvider mgrProvider)", "class_method_signature": "PrincipalPolicyImporter.PrincipalPolicyImporter(@NotNull FilterProvider filterProvider, @NotNull MgrProvider mgrProvider)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper, boolean isWorkspaceImport, int uuidBehavior, @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper, boolean isWorkspaceImport, int uuidBehavior, @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "full_signature": "@Override public boolean init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper, boolean isWorkspaceImport, int uuidBehavior, @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "class_method_signature": "PrincipalPolicyImporter.init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper, boolean isWorkspaceImport, int uuidBehavior, @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": false}, {"identifier": "processReferences", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void processReferences()", "full_signature": "@Override public void processReferences()", "class_method_signature": "PrincipalPolicyImporter.processReferences()", "testcase": false, "constructor": false}, {"identifier": "handlePropInfo", "parameters": "(@NotNull Tree parent, @NotNull PropInfo protectedPropInfo, @NotNull PropertyDefinition def)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handlePropInfo(@NotNull Tree parent, @NotNull PropInfo protectedPropInfo, @NotNull PropertyDefinition def)", "full_signature": "@Override public boolean handlePropInfo(@NotNull Tree parent, @NotNull PropInfo protectedPropInfo, @NotNull PropertyDefinition def)", "class_method_signature": "PrincipalPolicyImporter.handlePropInfo(@NotNull Tree parent, @NotNull PropInfo protectedPropInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "propertiesCompleted", "parameters": "(@NotNull Tree protectedParent)", "modifiers": "@Override public", "return": "void", "signature": "void propertiesCompleted(@NotNull Tree protectedParent)", "full_signature": "@Override public void propertiesCompleted(@NotNull Tree protectedParent)", "class_method_signature": "PrincipalPolicyImporter.propertiesCompleted(@NotNull Tree protectedParent)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(@NotNull Tree protectedParent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start(@NotNull Tree protectedParent)", "full_signature": "@Override public boolean start(@NotNull Tree protectedParent)", "class_method_signature": "PrincipalPolicyImporter.start(@NotNull Tree protectedParent)", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "(@NotNull Tree protectedParent)", "modifiers": "@Override public", "return": "void", "signature": "void end(@NotNull Tree protectedParent)", "full_signature": "@Override public void end(@NotNull Tree protectedParent)", "class_method_signature": "PrincipalPolicyImporter.end(@NotNull Tree protectedParent)", "testcase": false, "constructor": false}, {"identifier": "startChildInfo", "parameters": "(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "modifiers": "@Override public", "return": "void", "signature": "void startChildInfo(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "full_signature": "@Override public void startChildInfo(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "class_method_signature": "PrincipalPolicyImporter.startChildInfo(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "testcase": false, "constructor": false}, {"identifier": "endChildInfo", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endChildInfo()", "full_signature": "@Override public void endChildInfo()", "class_method_signature": "PrincipalPolicyImporter.endChildInfo()", "testcase": false, "constructor": false}, {"identifier": "isValidPrincipalProperty", "parameters": "(@NotNull PropInfo propertyInfo, @NotNull PropertyDefinition def)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidPrincipalProperty(@NotNull PropInfo propertyInfo, @NotNull PropertyDefinition def)", "full_signature": "private boolean isValidPrincipalProperty(@NotNull PropInfo propertyInfo, @NotNull PropertyDefinition def)", "class_method_signature": "PrincipalPolicyImporter.isValidPrincipalProperty(@NotNull PropInfo propertyInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "isValidProtectedParent", "parameters": "(@NotNull Tree protectedParent, @NotNull PrincipalPolicyImpl policy)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidProtectedParent(@NotNull Tree protectedParent, @NotNull PrincipalPolicyImpl policy)", "full_signature": "private static boolean isValidProtectedParent(@NotNull Tree protectedParent, @NotNull PrincipalPolicyImpl policy)", "class_method_signature": "PrincipalPolicyImporter.isValidProtectedParent(@NotNull Tree protectedParent, @NotNull PrincipalPolicyImpl policy)", "testcase": false, "constructor": false}, {"identifier": "getOakName", "parameters": "(@Nullable String name)", "modifiers": "@Nullable private", "return": "String", "signature": "String getOakName(@Nullable String name)", "full_signature": "@Nullable private String getOakName(@Nullable String name)", "class_method_signature": "PrincipalPolicyImporter.getOakName(@Nullable String name)", "testcase": false, "constructor": false}, {"identifier": "getAccessControlManager", "parameters": "()", "modifiers": "private", "return": "AccessControlManager", "signature": "AccessControlManager getAccessControlManager()", "full_signature": "private AccessControlManager getAccessControlManager()", "class_method_signature": "PrincipalPolicyImporter.getAccessControlManager()", "testcase": false, "constructor": false}, {"identifier": "getNamePathMapper", "parameters": "()", "modifiers": "private", "return": "NamePathMapper", "signature": "NamePathMapper getNamePathMapper()", "full_signature": "private NamePathMapper getNamePathMapper()", "class_method_signature": "PrincipalPolicyImporter.getNamePathMapper()", "testcase": false, "constructor": false}], "file": "oak-authorization-principalbased/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/PrincipalPolicyImporter.java"}, "focal_method": {"identifier": "endChildInfo", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void endChildInfo() throws RepositoryException {\n        checkState(policy != null);\n        if (entry != null) {\n            entry.applyTo(policy);\n            // reset the child entry\n            entry = null;\n        }\n    }", "signature": "void endChildInfo()", "full_signature": "@Override public void endChildInfo()", "class_method_signature": "PrincipalPolicyImporter.endChildInfo()", "testcase": false, "constructor": false, "invocations": ["checkState", "applyTo"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}