{"test_class": {"identifier": "UserUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/user/util/UserUtilTest.java"}, "test_case": {"identifier": "testGetAuthorizableIdWithTypeFallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAuthorizableIdWithTypeFallback() {\n        Map<AuthorizableType, String[]> test = ImmutableMap.<AuthorizableType,String[]>builder().\n                put(AuthorizableType.USER, new String[]{UserConstants.NT_REP_USER, UserConstants.NT_REP_SYSTEM_USER}).\n                put(AuthorizableType.AUTHORIZABLE, new String[]{UserConstants.NT_REP_USER, UserConstants.NT_REP_SYSTEM_USER, UserConstants.NT_REP_GROUP}).\n                put(AuthorizableType.GROUP, new String[]{UserConstants.NT_REP_GROUP}).build();\n\n        for (AuthorizableType type : test.keySet()) {\n            for (String ntName : test.get(type)) {\n                assertEquals(\"nodeName\", UserUtil.getAuthorizableId(createTree(ntName, null, \"nodeName\"), type));\n            }\n        }\n    }", "signature": "void testGetAuthorizableIdWithTypeFallback()", "full_signature": "@Test public void testGetAuthorizableIdWithTypeFallback()", "class_method_signature": "UserUtilTest.testGetAuthorizableIdWithTypeFallback()", "testcase": true, "constructor": false, "invocations": ["build", "put", "put", "put", "builder", "keySet", "get", "assertEquals", "getAuthorizableId", "createTree"]}, "focal_class": {"identifier": "UserUtil", "superclass": "", "interfaces": "implements UserConstants", "fields": [], "methods": [{"identifier": "UserUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " UserUtil()", "full_signature": "private  UserUtil()", "class_method_signature": "UserUtil.UserUtil()", "testcase": false, "constructor": true}, {"identifier": "isAdmin", "parameters": "(@NotNull ConfigurationParameters parameters, @NotNull String userId)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAdmin(@NotNull ConfigurationParameters parameters, @NotNull String userId)", "full_signature": "public static boolean isAdmin(@NotNull ConfigurationParameters parameters, @NotNull String userId)", "class_method_signature": "UserUtil.isAdmin(@NotNull ConfigurationParameters parameters, @NotNull String userId)", "testcase": false, "constructor": false}, {"identifier": "getAdminId", "parameters": "(@NotNull ConfigurationParameters parameters)", "modifiers": "@NotNull public static", "return": "String", "signature": "String getAdminId(@NotNull ConfigurationParameters parameters)", "full_signature": "@NotNull public static String getAdminId(@NotNull ConfigurationParameters parameters)", "class_method_signature": "UserUtil.getAdminId(@NotNull ConfigurationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "getAnonymousId", "parameters": "(@NotNull ConfigurationParameters parameters)", "modifiers": "@NotNull public static", "return": "String", "signature": "String getAnonymousId(@NotNull ConfigurationParameters parameters)", "full_signature": "@NotNull public static String getAnonymousId(@NotNull ConfigurationParameters parameters)", "class_method_signature": "UserUtil.getAnonymousId(@NotNull ConfigurationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "isType", "parameters": "(@Nullable Tree authorizableTree, @NotNull AuthorizableType type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isType(@Nullable Tree authorizableTree, @NotNull AuthorizableType type)", "full_signature": "public static boolean isType(@Nullable Tree authorizableTree, @NotNull AuthorizableType type)", "class_method_signature": "UserUtil.isType(@Nullable Tree authorizableTree, @NotNull AuthorizableType type)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(@NotNull Tree authorizableNode)", "modifiers": "@Nullable public static", "return": "AuthorizableType", "signature": "AuthorizableType getType(@NotNull Tree authorizableNode)", "full_signature": "@Nullable public static AuthorizableType getType(@NotNull Tree authorizableNode)", "class_method_signature": "UserUtil.getType(@NotNull Tree authorizableNode)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(@Nullable String primaryTypeName)", "modifiers": "@Nullable public static", "return": "AuthorizableType", "signature": "AuthorizableType getType(@Nullable String primaryTypeName)", "full_signature": "@Nullable public static AuthorizableType getType(@Nullable String primaryTypeName)", "class_method_signature": "UserUtil.getType(@Nullable String primaryTypeName)", "testcase": false, "constructor": false}, {"identifier": "isSystemUser", "parameters": "(@Nullable Tree authorizableTree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSystemUser(@Nullable Tree authorizableTree)", "full_signature": "public static boolean isSystemUser(@Nullable Tree authorizableTree)", "class_method_signature": "UserUtil.isSystemUser(@Nullable Tree authorizableTree)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizableRootPath", "parameters": "(@NotNull ConfigurationParameters parameters,\n                                                 @Nullable AuthorizableType type)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getAuthorizableRootPath(@NotNull ConfigurationParameters parameters,\n                                                 @Nullable AuthorizableType type)", "full_signature": "@Nullable public static String getAuthorizableRootPath(@NotNull ConfigurationParameters parameters,\n                                                 @Nullable AuthorizableType type)", "class_method_signature": "UserUtil.getAuthorizableRootPath(@NotNull ConfigurationParameters parameters,\n                                                 @Nullable AuthorizableType type)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizableId", "parameters": "(@NotNull Tree authorizableTree)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getAuthorizableId(@NotNull Tree authorizableTree)", "full_signature": "@Nullable public static String getAuthorizableId(@NotNull Tree authorizableTree)", "class_method_signature": "UserUtil.getAuthorizableId(@NotNull Tree authorizableTree)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizableId", "parameters": "(@NotNull Tree authorizableTree, @NotNull AuthorizableType type)", "modifiers": "@NotNull public static", "return": "String", "signature": "String getAuthorizableId(@NotNull Tree authorizableTree, @NotNull AuthorizableType type)", "full_signature": "@NotNull public static String getAuthorizableId(@NotNull Tree authorizableTree, @NotNull AuthorizableType type)", "class_method_signature": "UserUtil.getAuthorizableId(@NotNull Tree authorizableTree, @NotNull AuthorizableType type)", "testcase": false, "constructor": false}, {"identifier": "castAuthorizable", "parameters": "(@Nullable Authorizable authorizable, Class<T> authorizableClass)", "modifiers": "@Nullable public static", "return": "T", "signature": "T castAuthorizable(@Nullable Authorizable authorizable, Class<T> authorizableClass)", "full_signature": "@Nullable public static T castAuthorizable(@Nullable Authorizable authorizable, Class<T> authorizableClass)", "class_method_signature": "UserUtil.castAuthorizable(@Nullable Authorizable authorizable, Class<T> authorizableClass)", "testcase": false, "constructor": false}, {"identifier": "getImportBehavior", "parameters": "(@NotNull ConfigurationParameters config)", "modifiers": "public static", "return": "int", "signature": "int getImportBehavior(@NotNull ConfigurationParameters config)", "full_signature": "public static int getImportBehavior(@NotNull ConfigurationParameters config)", "class_method_signature": "UserUtil.getImportBehavior(@NotNull ConfigurationParameters config)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/user/util/UserUtil.java"}, "focal_method": {"identifier": "getAuthorizableId", "parameters": "(@NotNull Tree authorizableTree)", "modifiers": "@Nullable public static", "return": "String", "body": "@Nullable\n    public static String getAuthorizableId(@NotNull Tree authorizableTree) {\n        checkNotNull(authorizableTree);\n        if (UserUtil.isType(authorizableTree, AuthorizableType.AUTHORIZABLE)) {\n            PropertyState idProp = authorizableTree.getProperty(UserConstants.REP_AUTHORIZABLE_ID);\n            if (idProp != null) {\n                return idProp.getValue(STRING);\n            } else {\n                return Text.unescapeIllegalJcrChars(authorizableTree.getName());\n            }\n        }\n        return null;\n    }", "signature": "String getAuthorizableId(@NotNull Tree authorizableTree)", "full_signature": "@Nullable public static String getAuthorizableId(@NotNull Tree authorizableTree)", "class_method_signature": "UserUtil.getAuthorizableId(@NotNull Tree authorizableTree)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "isType", "getProperty", "getValue", "unescapeIllegalJcrChars", "getName"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}