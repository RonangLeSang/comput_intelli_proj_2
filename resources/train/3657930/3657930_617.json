{"test_class": {"identifier": "QueryUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PartialValueFactory valueFactory = new PartialValueFactory(NamePathMapper.DEFAULT);", "modifier": "private", "type": "PartialValueFactory", "declarator": "valueFactory = new PartialValueFactory(NamePathMapper.DEFAULT)", "var_name": "valueFactory"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/query/QueryUtilTest.java"}, "test_case": {"identifier": "testFormatLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormatLong() throws Exception {\n        Value longV = valueFactory.createValue(Long.MAX_VALUE);\n        assertEquals(String.valueOf(Long.MAX_VALUE), QueryUtil.format(longV));\n    }", "signature": "void testFormatLong()", "full_signature": "@Test public void testFormatLong()", "class_method_signature": "QueryUtilTest.testFormatLong()", "testcase": true, "constructor": false, "invocations": ["createValue", "assertEquals", "valueOf", "format"]}, "focal_class": {"identifier": "QueryUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(QueryUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(QueryUtil.class)", "var_name": "log"}], "methods": [{"identifier": "QueryUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " QueryUtil()", "full_signature": "private  QueryUtil()", "class_method_signature": "QueryUtil.QueryUtil()", "testcase": false, "constructor": true}, {"identifier": "getSearchRoot", "parameters": "(AuthorizableType type, ConfigurationParameters config)", "modifiers": "@NotNull public static", "return": "String", "signature": "String getSearchRoot(AuthorizableType type, ConfigurationParameters config)", "full_signature": "@NotNull public static String getSearchRoot(AuthorizableType type, ConfigurationParameters config)", "class_method_signature": "QueryUtil.getSearchRoot(AuthorizableType type, ConfigurationParameters config)", "testcase": false, "constructor": false}, {"identifier": "getNodeTypeName", "parameters": "(@NotNull AuthorizableType type)", "modifiers": "@NotNull public static", "return": "String", "signature": "String getNodeTypeName(@NotNull AuthorizableType type)", "full_signature": "@NotNull public static String getNodeTypeName(@NotNull AuthorizableType type)", "class_method_signature": "QueryUtil.getNodeTypeName(@NotNull AuthorizableType type)", "testcase": false, "constructor": false}, {"identifier": "escapeNodeName", "parameters": "(@NotNull String string)", "modifiers": "@NotNull public static", "return": "String", "signature": "String escapeNodeName(@NotNull String string)", "full_signature": "@NotNull public static String escapeNodeName(@NotNull String string)", "class_method_signature": "QueryUtil.escapeNodeName(@NotNull String string)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(@NotNull Value value)", "modifiers": "@NotNull public static", "return": "String", "signature": "String format(@NotNull Value value)", "full_signature": "@NotNull public static String format(@NotNull Value value)", "class_method_signature": "QueryUtil.format(@NotNull Value value)", "testcase": false, "constructor": false}, {"identifier": "escapeForQuery", "parameters": "(@NotNull String oakName, @NotNull NamePathMapper namePathMapper)", "modifiers": "@NotNull public static", "return": "String", "signature": "String escapeForQuery(@NotNull String oakName, @NotNull NamePathMapper namePathMapper)", "full_signature": "@NotNull public static String escapeForQuery(@NotNull String oakName, @NotNull NamePathMapper namePathMapper)", "class_method_signature": "QueryUtil.escapeForQuery(@NotNull String oakName, @NotNull NamePathMapper namePathMapper)", "testcase": false, "constructor": false}, {"identifier": "escapeForQuery", "parameters": "(@NotNull String value)", "modifiers": "@NotNull public static", "return": "String", "signature": "String escapeForQuery(@NotNull String value)", "full_signature": "@NotNull public static String escapeForQuery(@NotNull String value)", "class_method_signature": "QueryUtil.escapeForQuery(@NotNull String value)", "testcase": false, "constructor": false}, {"identifier": "getCollation", "parameters": "(@NotNull QueryBuilder.Direction direction)", "modifiers": "@NotNull public static", "return": "RelationOp", "signature": "RelationOp getCollation(@NotNull QueryBuilder.Direction direction)", "full_signature": "@NotNull public static RelationOp getCollation(@NotNull QueryBuilder.Direction direction)", "class_method_signature": "QueryUtil.getCollation(@NotNull QueryBuilder.Direction direction)", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "(@Nullable Authorizable authorizable)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getID(@Nullable Authorizable authorizable)", "full_signature": "@Nullable public static String getID(@Nullable Authorizable authorizable)", "class_method_signature": "QueryUtil.getID(@Nullable Authorizable authorizable)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/query/QueryUtil.java"}, "focal_method": {"identifier": "format", "parameters": "(@NotNull Value value)", "modifiers": "@NotNull public static", "return": "String", "body": "@NotNull\n    public static String format(@NotNull Value value) throws RepositoryException {\n        switch (value.getType()) {\n            case PropertyType.STRING:\n            case PropertyType.BOOLEAN:\n                return '\\'' + QueryUtil.escapeForQuery(value.getString()) + '\\'';\n\n            case PropertyType.LONG:\n            case PropertyType.DOUBLE:\n                return value.getString();\n\n            case PropertyType.DATE:\n                return \"xs:dateTime('\" + value.getString() + \"')\";\n\n            default:\n                throw new RepositoryException(\"Property of type \" + PropertyType.nameFromValue(value.getType()) + \" not supported\");\n        }\n    }", "signature": "String format(@NotNull Value value)", "full_signature": "@NotNull public static String format(@NotNull Value value)", "class_method_signature": "QueryUtil.format(@NotNull Value value)", "testcase": false, "constructor": false, "invocations": ["getType", "escapeForQuery", "getString", "getString", "getString", "nameFromValue", "getType"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}