{"test_class": {"identifier": "ACETest", "superclass": "extends AbstractAccessControlTest", "interfaces": "", "fields": [{"original_string": "private Value globValue;", "modifier": "private", "type": "Value", "declarator": "globValue", "var_name": "globValue"}, {"original_string": "private Value[] nameValues;", "modifier": "private", "type": "Value[]", "declarator": "nameValues", "var_name": "nameValues"}, {"original_string": "private Value nameValue;", "modifier": "private", "type": "Value", "declarator": "nameValue", "var_name": "nameValue"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/accesscontrol/ACETest.java"}, "test_case": {"identifier": "testGetRestrictionsForMultiValued", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRestrictionsForMultiValued() throws Exception {\n        // multivalued restriction\n        Restriction nameRestr = createRestriction(AccessControlConstants.REP_NT_NAMES, nameValues);\n        ACE ace = createEntry(nameRestr);\n        Value[] vs = ace.getRestrictions(AccessControlConstants.REP_NT_NAMES);\n        assertEquals(2, vs.length);\n        assertArrayEquals(nameValues, vs);\n    }", "signature": "void testGetRestrictionsForMultiValued()", "full_signature": "@Test public void testGetRestrictionsForMultiValued()", "class_method_signature": "ACETest.testGetRestrictionsForMultiValued()", "testcase": true, "constructor": false, "invocations": ["createRestriction", "createEntry", "getRestrictions", "assertEquals", "assertArrayEquals"]}, "focal_class": {"identifier": "ACE", "superclass": "", "interfaces": "implements JackrabbitAccessControlEntry", "fields": [{"original_string": "private final Principal principal;", "modifier": "private final", "type": "Principal", "declarator": "principal", "var_name": "principal"}, {"original_string": "private final PrivilegeBits privilegeBits;", "modifier": "private final", "type": "PrivilegeBits", "declarator": "privilegeBits", "var_name": "privilegeBits"}, {"original_string": "private final boolean isAllow;", "modifier": "private final", "type": "boolean", "declarator": "isAllow", "var_name": "isAllow"}, {"original_string": "private final Set<Restriction> restrictions;", "modifier": "private final", "type": "Set<Restriction>", "declarator": "restrictions", "var_name": "restrictions"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private final PartialValueFactory valueFactory;", "modifier": "private final", "type": "PartialValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "private int hashCode;", "modifier": "private", "type": "int", "declarator": "hashCode", "var_name": "hashCode"}], "methods": [{"identifier": "ACE", "parameters": "(Principal principal, PrivilegeBits privilegeBits,\n               boolean isAllow, Set<Restriction> restrictions, NamePathMapper namePathMapper)", "modifiers": "public", "return": "", "signature": " ACE(Principal principal, PrivilegeBits privilegeBits,\n               boolean isAllow, Set<Restriction> restrictions, NamePathMapper namePathMapper)", "full_signature": "public  ACE(Principal principal, PrivilegeBits privilegeBits,\n               boolean isAllow, Set<Restriction> restrictions, NamePathMapper namePathMapper)", "class_method_signature": "ACE.ACE(Principal principal, PrivilegeBits privilegeBits,\n               boolean isAllow, Set<Restriction> restrictions, NamePathMapper namePathMapper)", "testcase": false, "constructor": true}, {"identifier": "getPrivilegeBits", "parameters": "()", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits getPrivilegeBits()", "full_signature": "@NotNull public PrivilegeBits getPrivilegeBits()", "class_method_signature": "ACE.getPrivilegeBits()", "testcase": false, "constructor": false}, {"identifier": "getRestrictions", "parameters": "()", "modifiers": "@NotNull public", "return": "Set<Restriction>", "signature": "Set<Restriction> getRestrictions()", "full_signature": "@NotNull public Set<Restriction> getRestrictions()", "class_method_signature": "ACE.getRestrictions()", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Principal", "signature": "Principal getPrincipal()", "full_signature": "@NotNull @Override public Principal getPrincipal()", "class_method_signature": "ACE.getPrincipal()", "testcase": false, "constructor": false}, {"identifier": "isAllow", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAllow()", "full_signature": "@Override public boolean isAllow()", "class_method_signature": "ACE.isAllow()", "testcase": false, "constructor": false}, {"identifier": "getRestrictionNames", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] getRestrictionNames()", "full_signature": "@NotNull @Override public String[] getRestrictionNames()", "class_method_signature": "ACE.getRestrictionNames()", "testcase": false, "constructor": false}, {"identifier": "getRestriction", "parameters": "(@NotNull String restrictionName)", "modifiers": "@Nullable @Override public", "return": "Value", "signature": "Value getRestriction(@NotNull String restrictionName)", "full_signature": "@Nullable @Override public Value getRestriction(@NotNull String restrictionName)", "class_method_signature": "ACE.getRestriction(@NotNull String restrictionName)", "testcase": false, "constructor": false}, {"identifier": "getRestrictions", "parameters": "(@NotNull String restrictionName)", "modifiers": "@Nullable @Override public", "return": "Value[]", "signature": "Value[] getRestrictions(@NotNull String restrictionName)", "full_signature": "@Nullable @Override public Value[] getRestrictions(@NotNull String restrictionName)", "class_method_signature": "ACE.getRestrictions(@NotNull String restrictionName)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ACE.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ACE.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getJcrName", "parameters": "(Restriction restriction)", "modifiers": "private", "return": "String", "signature": "String getJcrName(Restriction restriction)", "full_signature": "private String getJcrName(Restriction restriction)", "class_method_signature": "ACE.getJcrName(Restriction restriction)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/accesscontrol/ACE.java"}, "focal_method": {"identifier": "getRestrictions", "parameters": "()", "modifiers": "@NotNull public", "return": "Set<Restriction>", "body": "@NotNull\n    public Set<Restriction> getRestrictions() {\n        return restrictions;\n    }", "signature": "Set<Restriction> getRestrictions()", "full_signature": "@NotNull public Set<Restriction> getRestrictions()", "class_method_signature": "ACE.getRestrictions()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}