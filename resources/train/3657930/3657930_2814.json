{"test_class": {"identifier": "DefaultAuthorizableActionProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/user/action/DefaultAuthorizableActionProviderTest.java"}, "test_case": {"identifier": "testEmtpyActionConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmtpyActionConfig() {\n        AuthorizableActionProvider actionProvider = new DefaultAuthorizableActionProvider(\n                ConfigurationParameters.of(DefaultAuthorizableActionProvider.ENABLED_ACTIONS, new String[0]));\n        List<? extends AuthorizableAction> actions = actionProvider.getAuthorizableActions(getSecurityProvider());\n        assertNotNull(actions);\n        assertEquals(0, actions.size());\n    }", "signature": "void testEmtpyActionConfig()", "full_signature": "@Test public void testEmtpyActionConfig()", "class_method_signature": "DefaultAuthorizableActionProviderTest.testEmtpyActionConfig()", "testcase": true, "constructor": false, "invocations": ["of", "getAuthorizableActions", "getSecurityProvider", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "DefaultAuthorizableActionProvider", "superclass": "", "interfaces": "implements AuthorizableActionProvider", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultAuthorizableActionProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultAuthorizableActionProvider.class)", "var_name": "log"}, {"original_string": "private static final Map<String, Class<? extends AuthorizableAction>> SUPPORTED_ACTIONS = ImmutableMap.<String, Class<? extends AuthorizableAction>>of(\n            AccessControlAction.class.getName(), AccessControlAction.class,\n            PasswordValidationAction.class.getName(), PasswordValidationAction.class,\n            PasswordChangeAction.class.getName(), PasswordChangeAction.class,\n            ClearMembershipAction.class.getName(), ClearMembershipAction.class\n    );", "modifier": "private static final", "type": "Map<String, Class<? extends AuthorizableAction>>", "declarator": "SUPPORTED_ACTIONS = ImmutableMap.<String, Class<? extends AuthorizableAction>>of(\n            AccessControlAction.class.getName(), AccessControlAction.class,\n            PasswordValidationAction.class.getName(), PasswordValidationAction.class,\n            PasswordChangeAction.class.getName(), PasswordChangeAction.class,\n            ClearMembershipAction.class.getName(), ClearMembershipAction.class\n    )", "var_name": "SUPPORTED_ACTIONS"}, {"original_string": "private static final String[] DEFAULT_ACTIONS = new String[] {AccessControlAction.class.getName()};", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_ACTIONS = new String[] {AccessControlAction.class.getName()}", "var_name": "DEFAULT_ACTIONS"}, {"original_string": "static final String ENABLED_ACTIONS = \"enabledActions\";", "modifier": "static final", "type": "String", "declarator": "ENABLED_ACTIONS = \"enabledActions\"", "var_name": "ENABLED_ACTIONS"}, {"original_string": "private String[] enabledActions = DEFAULT_ACTIONS;", "modifier": "private", "type": "String[]", "declarator": "enabledActions = DEFAULT_ACTIONS", "var_name": "enabledActions"}, {"original_string": "private ConfigurationParameters config = ConfigurationParameters.EMPTY;", "modifier": "private", "type": "ConfigurationParameters", "declarator": "config = ConfigurationParameters.EMPTY", "var_name": "config"}], "methods": [{"identifier": "DefaultAuthorizableActionProvider", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "signature": " DefaultAuthorizableActionProvider()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  DefaultAuthorizableActionProvider()", "class_method_signature": "DefaultAuthorizableActionProvider.DefaultAuthorizableActionProvider()", "testcase": false, "constructor": true}, {"identifier": "DefaultAuthorizableActionProvider", "parameters": "(ConfigurationParameters config)", "modifiers": "public", "return": "", "signature": " DefaultAuthorizableActionProvider(ConfigurationParameters config)", "full_signature": "public  DefaultAuthorizableActionProvider(ConfigurationParameters config)", "class_method_signature": "DefaultAuthorizableActionProvider.DefaultAuthorizableActionProvider(ConfigurationParameters config)", "testcase": false, "constructor": true}, {"identifier": "getAuthorizableActions", "parameters": "(@NotNull SecurityProvider securityProvider)", "modifiers": "@NotNull @Override public", "return": "List<? extends AuthorizableAction>", "signature": "List<? extends AuthorizableAction> getAuthorizableActions(@NotNull SecurityProvider securityProvider)", "full_signature": "@NotNull @Override public List<? extends AuthorizableAction> getAuthorizableActions(@NotNull SecurityProvider securityProvider)", "class_method_signature": "DefaultAuthorizableActionProvider.getAuthorizableActions(@NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "(Map<String, Object> properties)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") @Activate private", "return": "void", "signature": "void activate(Map<String, Object> properties)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") @Activate private void activate(Map<String, Object> properties)", "class_method_signature": "DefaultAuthorizableActionProvider.activate(Map<String, Object> properties)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/user/action/DefaultAuthorizableActionProvider.java"}, "focal_method": {"identifier": "getAuthorizableActions", "parameters": "(@NotNull SecurityProvider securityProvider)", "modifiers": "@NotNull @Override public", "return": "List<? extends AuthorizableAction>", "body": "@NotNull\n    @Override\n    public List<? extends AuthorizableAction> getAuthorizableActions(@NotNull SecurityProvider securityProvider) {\n        List<AuthorizableAction> actions = Lists.newArrayListWithExpectedSize(enabledActions.length);\n        for (String className : enabledActions) {\n            try {\n                Class<? extends AuthorizableAction> cl = SUPPORTED_ACTIONS.get(className);\n                if (cl != null) {\n                    AuthorizableAction action = cl.newInstance();\n                    action.init(securityProvider, config);\n                    actions.add(action);\n                }\n            } catch (Exception e) {\n                log.debug(\"Unable to create authorizable action\", e);\n            }\n        }\n        return actions;\n    }", "signature": "List<? extends AuthorizableAction> getAuthorizableActions(@NotNull SecurityProvider securityProvider)", "full_signature": "@NotNull @Override public List<? extends AuthorizableAction> getAuthorizableActions(@NotNull SecurityProvider securityProvider)", "class_method_signature": "DefaultAuthorizableActionProvider.getAuthorizableActions(@NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": false, "invocations": ["newArrayListWithExpectedSize", "get", "newInstance", "init", "add", "debug"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}