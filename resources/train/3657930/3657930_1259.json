{"test_class": {"identifier": "PrincipalRestrictionProviderTest", "superclass": "extends AbstractSecurityTest", "interfaces": "implements AccessControlConstants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PrincipalRestrictionProviderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PrincipalRestrictionProviderTest.class)", "var_name": "log"}, {"original_string": "private RestrictionProvider base = mock(RestrictionProvider.class);", "modifier": "private", "type": "RestrictionProvider", "declarator": "base = mock(RestrictionProvider.class)", "var_name": "base"}, {"original_string": "private PrincipalRestrictionProvider provider = new PrincipalRestrictionProvider(base);", "modifier": "private", "type": "PrincipalRestrictionProvider", "declarator": "provider = new PrincipalRestrictionProvider(base)", "var_name": "provider"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/restriction/PrincipalRestrictionProviderTest.java"}, "test_case": {"identifier": "testWriteRestrictions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteRestrictions() throws Exception {\n        Tree t = mock(Tree.class);\n        Value v = getValueFactory(root).createValue(\"/path\");\n        PropertyState ps = PropertyStates.createProperty(REP_NODE_PATH, v);\n        Set<Restriction> rs = ImmutableSet.of(new RestrictionImpl(ps, true));\n        provider.writeRestrictions(\"/testPath\", t, rs);\n\n        verify(base, never()).writeRestrictions(\"/testPath\", t, Sets.newHashSet(rs));\n        verify(base, times(1)).writeRestrictions(\"/testPath\", t, Sets.newHashSet());\n    }", "signature": "void testWriteRestrictions()", "full_signature": "@Test public void testWriteRestrictions()", "class_method_signature": "PrincipalRestrictionProviderTest.testWriteRestrictions()", "testcase": true, "constructor": false, "invocations": ["mock", "createValue", "getValueFactory", "createProperty", "of", "writeRestrictions", "writeRestrictions", "verify", "never", "newHashSet", "writeRestrictions", "verify", "times", "newHashSet"]}, "focal_class": {"identifier": "PrincipalRestrictionProvider", "superclass": "", "interfaces": "implements RestrictionProvider, AccessControlConstants", "fields": [{"original_string": "private final RestrictionProvider base;", "modifier": "private final", "type": "RestrictionProvider", "declarator": "base", "var_name": "base"}], "methods": [{"identifier": "PrincipalRestrictionProvider", "parameters": "(RestrictionProvider base)", "modifiers": "public", "return": "", "signature": " PrincipalRestrictionProvider(RestrictionProvider base)", "full_signature": "public  PrincipalRestrictionProvider(RestrictionProvider base)", "class_method_signature": "PrincipalRestrictionProvider.PrincipalRestrictionProvider(RestrictionProvider base)", "testcase": false, "constructor": true}, {"identifier": "getSupportedRestrictions", "parameters": "(@Nullable String oakPath)", "modifiers": "@NotNull @Override public", "return": "Set<RestrictionDefinition>", "signature": "Set<RestrictionDefinition> getSupportedRestrictions(@Nullable String oakPath)", "full_signature": "@NotNull @Override public Set<RestrictionDefinition> getSupportedRestrictions(@Nullable String oakPath)", "class_method_signature": "PrincipalRestrictionProvider.getSupportedRestrictions(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "createRestriction", "parameters": "(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "modifiers": "@NotNull @Override public", "return": "Restriction", "signature": "Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "full_signature": "@NotNull @Override public Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "class_method_signature": "PrincipalRestrictionProvider.createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "testcase": false, "constructor": false}, {"identifier": "createRestriction", "parameters": "(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "modifiers": "@NotNull @Override public", "return": "Restriction", "signature": "Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "full_signature": "@NotNull @Override public Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "class_method_signature": "PrincipalRestrictionProvider.createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "testcase": false, "constructor": false}, {"identifier": "readRestrictions", "parameters": "(@Nullable String oakPath, @NotNull Tree aceTree)", "modifiers": "@NotNull @Override public", "return": "Set<Restriction>", "signature": "Set<Restriction> readRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "full_signature": "@NotNull @Override public Set<Restriction> readRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "class_method_signature": "PrincipalRestrictionProvider.readRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "writeRestrictions", "parameters": "(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "modifiers": "@Override public", "return": "void", "signature": "void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "full_signature": "@Override public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "class_method_signature": "PrincipalRestrictionProvider.writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "validateRestrictions", "parameters": "(String oakPath, @NotNull Tree aceTree)", "modifiers": "@Override public", "return": "void", "signature": "void validateRestrictions(String oakPath, @NotNull Tree aceTree)", "full_signature": "@Override public void validateRestrictions(String oakPath, @NotNull Tree aceTree)", "class_method_signature": "PrincipalRestrictionProvider.validateRestrictions(String oakPath, @NotNull Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(@Nullable String oakPath, @NotNull Tree tree)", "modifiers": "@NotNull @Override public", "return": "RestrictionPattern", "signature": "RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Tree tree)", "full_signature": "@NotNull @Override public RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Tree tree)", "class_method_signature": "PrincipalRestrictionProvider.getPattern(@Nullable String oakPath, @NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "modifiers": "@NotNull @Override public", "return": "RestrictionPattern", "signature": "RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "full_signature": "@NotNull @Override public RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "class_method_signature": "PrincipalRestrictionProvider.getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/restriction/PrincipalRestrictionProvider.java"}, "focal_method": {"identifier": "writeRestrictions", "parameters": "(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions) throws RepositoryException {\n        Set<Restriction> rs = Sets.newHashSet(restrictions);\n        rs.removeIf(r -> REP_NODE_PATH.equals(r.getDefinition().getName()));\n        base.writeRestrictions(oakPath, aceTree, rs);\n    }", "signature": "void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "full_signature": "@Override public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "class_method_signature": "PrincipalRestrictionProvider.writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "testcase": false, "constructor": false, "invocations": ["newHashSet", "removeIf", "equals", "getName", "getDefinition", "writeRestrictions"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}