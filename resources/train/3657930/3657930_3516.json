{"test_class": {"identifier": "SegmentNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/file/proc/SegmentNodeTest.java"}, "test_case": {"identifier": "shouldHandleMissingSegment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHandleMissingSegment() {\n        Backend backend = mock(Backend.class);\n        when(backend.getSegment(\"s\")).thenReturn(Optional.empty());\n\n        assertEquals(MissingSegmentNode.class, SegmentNode.newSegmentNode(backend, \"s\").getClass());\n    }", "signature": "void shouldHandleMissingSegment()", "full_signature": "@Test public void shouldHandleMissingSegment()", "class_method_signature": "SegmentNodeTest.shouldHandleMissingSegment()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSegment", "empty", "assertEquals", "getClass", "newSegmentNode"]}, "focal_class": {"identifier": "SegmentNode", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SegmentNode", "parameters": "()", "modifiers": "private", "return": "", "signature": " SegmentNode()", "full_signature": "private  SegmentNode()", "class_method_signature": "SegmentNode.SegmentNode()", "testcase": false, "constructor": true}, {"identifier": "newSegmentNode", "parameters": "(Backend backend, String segmentId)", "modifiers": "static", "return": "NodeState", "signature": "NodeState newSegmentNode(Backend backend, String segmentId)", "full_signature": "static NodeState newSegmentNode(Backend backend, String segmentId)", "class_method_signature": "SegmentNode.newSegmentNode(Backend backend, String segmentId)", "testcase": false, "constructor": false}, {"identifier": "newSegmentNode", "parameters": "(Backend backend, String segmentId, Segment segment)", "modifiers": "private static", "return": "NodeState", "signature": "NodeState newSegmentNode(Backend backend, String segmentId, Segment segment)", "full_signature": "private static NodeState newSegmentNode(Backend backend, String segmentId, Segment segment)", "class_method_signature": "SegmentNode.newSegmentNode(Backend backend, String segmentId, Segment segment)", "testcase": false, "constructor": false}, {"identifier": "newMissingSegment", "parameters": "(String segmentId)", "modifiers": "private static", "return": "NodeState", "signature": "NodeState newMissingSegment(String segmentId)", "full_signature": "private static NodeState newMissingSegment(String segmentId)", "class_method_signature": "SegmentNode.newMissingSegment(String segmentId)", "testcase": false, "constructor": false}], "file": "oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/proc/SegmentNode.java"}, "focal_method": {"identifier": "newSegmentNode", "parameters": "(Backend backend, String segmentId)", "modifiers": "static", "return": "NodeState", "body": "static NodeState newSegmentNode(Backend backend, String segmentId) {\n        return backend.getSegment(segmentId)\n            .map(segment -> newSegmentNode(backend, segmentId, segment))\n            .orElseGet(() -> newMissingSegment(segmentId));\n    }", "signature": "NodeState newSegmentNode(Backend backend, String segmentId)", "full_signature": "static NodeState newSegmentNode(Backend backend, String segmentId)", "class_method_signature": "SegmentNode.newSegmentNode(Backend backend, String segmentId)", "testcase": false, "constructor": false, "invocations": ["orElseGet", "map", "getSegment", "newSegmentNode", "newMissingSegment"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}