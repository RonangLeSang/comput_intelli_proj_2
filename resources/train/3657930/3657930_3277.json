{"test_class": {"identifier": "PermissionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Long, Set<Long>> TEST = ImmutableMap.<Long, Set<Long>>of(\n            Permissions.ADD_NODE|Permissions.ADD_PROPERTY,\n            ImmutableSet.of(Permissions.ADD_NODE, Permissions.ADD_PROPERTY),\n            Permissions.LOCK_MANAGEMENT|Permissions.MODIFY_CHILD_NODE_COLLECTION,\n            ImmutableSet.of(Permissions.LOCK_MANAGEMENT, Permissions.MODIFY_CHILD_NODE_COLLECTION),\n            Permissions.READ_ACCESS_CONTROL|Permissions.MODIFY_ACCESS_CONTROL,\n            ImmutableSet.of(Permissions.READ_ACCESS_CONTROL,Permissions.MODIFY_ACCESS_CONTROL),\n            Permissions.NAMESPACE_MANAGEMENT|Permissions.WORKSPACE_MANAGEMENT|Permissions.NODE_TYPE_DEFINITION_MANAGEMENT|Permissions.PRIVILEGE_MANAGEMENT,\n            ImmutableSet.of(Permissions.NAMESPACE_MANAGEMENT,Permissions.WORKSPACE_MANAGEMENT,Permissions.NODE_TYPE_DEFINITION_MANAGEMENT,Permissions.PRIVILEGE_MANAGEMENT)\n    );", "modifier": "private static final", "type": "Map<Long, Set<Long>>", "declarator": "TEST = ImmutableMap.<Long, Set<Long>>of(\n            Permissions.ADD_NODE|Permissions.ADD_PROPERTY,\n            ImmutableSet.of(Permissions.ADD_NODE, Permissions.ADD_PROPERTY),\n            Permissions.LOCK_MANAGEMENT|Permissions.MODIFY_CHILD_NODE_COLLECTION,\n            ImmutableSet.of(Permissions.LOCK_MANAGEMENT, Permissions.MODIFY_CHILD_NODE_COLLECTION),\n            Permissions.READ_ACCESS_CONTROL|Permissions.MODIFY_ACCESS_CONTROL,\n            ImmutableSet.of(Permissions.READ_ACCESS_CONTROL,Permissions.MODIFY_ACCESS_CONTROL),\n            Permissions.NAMESPACE_MANAGEMENT|Permissions.WORKSPACE_MANAGEMENT|Permissions.NODE_TYPE_DEFINITION_MANAGEMENT|Permissions.PRIVILEGE_MANAGEMENT,\n            ImmutableSet.of(Permissions.NAMESPACE_MANAGEMENT,Permissions.WORKSPACE_MANAGEMENT,Permissions.NODE_TYPE_DEFINITION_MANAGEMENT,Permissions.PRIVILEGE_MANAGEMENT)\n    )", "var_name": "TEST"}, {"original_string": "private Tree existingTree;", "modifier": "private", "type": "Tree", "declarator": "existingTree", "var_name": "existingTree"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/permission/PermissionsTest.java"}, "test_case": {"identifier": "testIsAggregate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsAggregate() {\n        List<Long> aggregates = ImmutableList.of(Permissions.ALL, Permissions.WRITE, Permissions.READ, Permissions.SET_PROPERTY, Permissions.REMOVE);\n        for (long permission : Permissions.PERMISSION_NAMES.keySet()) {\n            if (aggregates.contains(permission)) {\n                assertTrue(Permissions.getString(permission), Permissions.isAggregate(permission));\n            } else {\n                assertFalse(Permissions.getString(permission), Permissions.isAggregate(permission));\n            }\n        }\n    }", "signature": "void testIsAggregate()", "full_signature": "@Test public void testIsAggregate()", "class_method_signature": "PermissionsTest.testIsAggregate()", "testcase": true, "constructor": false, "invocations": ["of", "keySet", "contains", "assertTrue", "getString", "isAggregate", "assertFalse", "getString", "isAggregate"]}, "focal_class": {"identifier": "Permissions", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long NO_PERMISSION = 0;", "modifier": "public static final", "type": "long", "declarator": "NO_PERMISSION = 0", "var_name": "NO_PERMISSION"}, {"original_string": "public static final long READ_NODE = 1;", "modifier": "public static final", "type": "long", "declarator": "READ_NODE = 1", "var_name": "READ_NODE"}, {"original_string": "public static final long READ_PROPERTY = READ_NODE << 1;", "modifier": "public static final", "type": "long", "declarator": "READ_PROPERTY = READ_NODE << 1", "var_name": "READ_PROPERTY"}, {"original_string": "public static final long ADD_PROPERTY = READ_PROPERTY << 1;", "modifier": "public static final", "type": "long", "declarator": "ADD_PROPERTY = READ_PROPERTY << 1", "var_name": "ADD_PROPERTY"}, {"original_string": "public static final long MODIFY_PROPERTY = ADD_PROPERTY << 1;", "modifier": "public static final", "type": "long", "declarator": "MODIFY_PROPERTY = ADD_PROPERTY << 1", "var_name": "MODIFY_PROPERTY"}, {"original_string": "public static final long REMOVE_PROPERTY = MODIFY_PROPERTY << 1;", "modifier": "public static final", "type": "long", "declarator": "REMOVE_PROPERTY = MODIFY_PROPERTY << 1", "var_name": "REMOVE_PROPERTY"}, {"original_string": "public static final long ADD_NODE = REMOVE_PROPERTY << 1;", "modifier": "public static final", "type": "long", "declarator": "ADD_NODE = REMOVE_PROPERTY << 1", "var_name": "ADD_NODE"}, {"original_string": "public static final long REMOVE_NODE = ADD_NODE << 1;", "modifier": "public static final", "type": "long", "declarator": "REMOVE_NODE = ADD_NODE << 1", "var_name": "REMOVE_NODE"}, {"original_string": "public static final long READ_ACCESS_CONTROL = REMOVE_NODE << 1;", "modifier": "public static final", "type": "long", "declarator": "READ_ACCESS_CONTROL = REMOVE_NODE << 1", "var_name": "READ_ACCESS_CONTROL"}, {"original_string": "public static final long MODIFY_ACCESS_CONTROL = READ_ACCESS_CONTROL << 1;", "modifier": "public static final", "type": "long", "declarator": "MODIFY_ACCESS_CONTROL = READ_ACCESS_CONTROL << 1", "var_name": "MODIFY_ACCESS_CONTROL"}, {"original_string": "public static final long NODE_TYPE_MANAGEMENT = MODIFY_ACCESS_CONTROL << 1;", "modifier": "public static final", "type": "long", "declarator": "NODE_TYPE_MANAGEMENT = MODIFY_ACCESS_CONTROL << 1", "var_name": "NODE_TYPE_MANAGEMENT"}, {"original_string": "public static final long VERSION_MANAGEMENT = NODE_TYPE_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "VERSION_MANAGEMENT = NODE_TYPE_MANAGEMENT << 1", "var_name": "VERSION_MANAGEMENT"}, {"original_string": "public static final long LOCK_MANAGEMENT = VERSION_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "LOCK_MANAGEMENT = VERSION_MANAGEMENT << 1", "var_name": "LOCK_MANAGEMENT"}, {"original_string": "public static final long LIFECYCLE_MANAGEMENT = LOCK_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "LIFECYCLE_MANAGEMENT = LOCK_MANAGEMENT << 1", "var_name": "LIFECYCLE_MANAGEMENT"}, {"original_string": "public static final long RETENTION_MANAGEMENT = LIFECYCLE_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "RETENTION_MANAGEMENT = LIFECYCLE_MANAGEMENT << 1", "var_name": "RETENTION_MANAGEMENT"}, {"original_string": "public static final long MODIFY_CHILD_NODE_COLLECTION = RETENTION_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "MODIFY_CHILD_NODE_COLLECTION = RETENTION_MANAGEMENT << 1", "var_name": "MODIFY_CHILD_NODE_COLLECTION"}, {"original_string": "public static final long NODE_TYPE_DEFINITION_MANAGEMENT = MODIFY_CHILD_NODE_COLLECTION << 1;", "modifier": "public static final", "type": "long", "declarator": "NODE_TYPE_DEFINITION_MANAGEMENT = MODIFY_CHILD_NODE_COLLECTION << 1", "var_name": "NODE_TYPE_DEFINITION_MANAGEMENT"}, {"original_string": "public static final long NAMESPACE_MANAGEMENT = NODE_TYPE_DEFINITION_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "NAMESPACE_MANAGEMENT = NODE_TYPE_DEFINITION_MANAGEMENT << 1", "var_name": "NAMESPACE_MANAGEMENT"}, {"original_string": "public static final long WORKSPACE_MANAGEMENT = NAMESPACE_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "WORKSPACE_MANAGEMENT = NAMESPACE_MANAGEMENT << 1", "var_name": "WORKSPACE_MANAGEMENT"}, {"original_string": "public static final long PRIVILEGE_MANAGEMENT = WORKSPACE_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "PRIVILEGE_MANAGEMENT = WORKSPACE_MANAGEMENT << 1", "var_name": "PRIVILEGE_MANAGEMENT"}, {"original_string": "public static final long USER_MANAGEMENT = PRIVILEGE_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "USER_MANAGEMENT = PRIVILEGE_MANAGEMENT << 1", "var_name": "USER_MANAGEMENT"}, {"original_string": "public static final long INDEX_DEFINITION_MANAGEMENT = USER_MANAGEMENT << 1;", "modifier": "public static final", "type": "long", "declarator": "INDEX_DEFINITION_MANAGEMENT = USER_MANAGEMENT << 1", "var_name": "INDEX_DEFINITION_MANAGEMENT"}, {"original_string": "public static final long READ = READ_NODE | READ_PROPERTY;", "modifier": "public static final", "type": "long", "declarator": "READ = READ_NODE | READ_PROPERTY", "var_name": "READ"}, {"original_string": "public static final long REMOVE = REMOVE_NODE | REMOVE_PROPERTY;", "modifier": "public static final", "type": "long", "declarator": "REMOVE = REMOVE_NODE | REMOVE_PROPERTY", "var_name": "REMOVE"}, {"original_string": "public static final long SET_PROPERTY = ADD_PROPERTY | MODIFY_PROPERTY | REMOVE_PROPERTY;", "modifier": "public static final", "type": "long", "declarator": "SET_PROPERTY = ADD_PROPERTY | MODIFY_PROPERTY | REMOVE_PROPERTY", "var_name": "SET_PROPERTY"}, {"original_string": "public static final long WRITE = ADD_NODE | REMOVE_NODE | SET_PROPERTY;", "modifier": "public static final", "type": "long", "declarator": "WRITE = ADD_NODE | REMOVE_NODE | SET_PROPERTY", "var_name": "WRITE"}, {"original_string": "public static final long ALL = (READ\n            | SET_PROPERTY\n            | ADD_NODE | REMOVE_NODE\n            | READ_ACCESS_CONTROL | MODIFY_ACCESS_CONTROL\n            | NODE_TYPE_MANAGEMENT\n            | VERSION_MANAGEMENT\n            | LOCK_MANAGEMENT\n            | LIFECYCLE_MANAGEMENT\n            | RETENTION_MANAGEMENT\n            | MODIFY_CHILD_NODE_COLLECTION\n            | NODE_TYPE_DEFINITION_MANAGEMENT\n            | NAMESPACE_MANAGEMENT\n            | WORKSPACE_MANAGEMENT\n            | PRIVILEGE_MANAGEMENT\n            | USER_MANAGEMENT\n            | INDEX_DEFINITION_MANAGEMENT\n    );", "modifier": "public static final", "type": "long", "declarator": "ALL = (READ\n            | SET_PROPERTY\n            | ADD_NODE | REMOVE_NODE\n            | READ_ACCESS_CONTROL | MODIFY_ACCESS_CONTROL\n            | NODE_TYPE_MANAGEMENT\n            | VERSION_MANAGEMENT\n            | LOCK_MANAGEMENT\n            | LIFECYCLE_MANAGEMENT\n            | RETENTION_MANAGEMENT\n            | MODIFY_CHILD_NODE_COLLECTION\n            | NODE_TYPE_DEFINITION_MANAGEMENT\n            | NAMESPACE_MANAGEMENT\n            | WORKSPACE_MANAGEMENT\n            | PRIVILEGE_MANAGEMENT\n            | USER_MANAGEMENT\n            | INDEX_DEFINITION_MANAGEMENT\n    )", "var_name": "ALL"}, {"original_string": "private static final Set<Long> NON_AGGREGATES = ImmutableSet.of(\n            READ_NODE,\n            READ_PROPERTY,\n            ADD_PROPERTY,\n            MODIFY_PROPERTY,\n            REMOVE_PROPERTY,\n            ADD_NODE,\n            REMOVE_NODE,\n            MODIFY_CHILD_NODE_COLLECTION,\n            READ_ACCESS_CONTROL,\n            MODIFY_ACCESS_CONTROL,\n            NODE_TYPE_MANAGEMENT,\n            VERSION_MANAGEMENT,\n            LOCK_MANAGEMENT,\n            LIFECYCLE_MANAGEMENT,\n            RETENTION_MANAGEMENT,\n            NODE_TYPE_DEFINITION_MANAGEMENT,\n            NAMESPACE_MANAGEMENT,\n            WORKSPACE_MANAGEMENT,\n            PRIVILEGE_MANAGEMENT,\n            USER_MANAGEMENT,\n            INDEX_DEFINITION_MANAGEMENT);", "modifier": "private static final", "type": "Set<Long>", "declarator": "NON_AGGREGATES = ImmutableSet.of(\n            READ_NODE,\n            READ_PROPERTY,\n            ADD_PROPERTY,\n            MODIFY_PROPERTY,\n            REMOVE_PROPERTY,\n            ADD_NODE,\n            REMOVE_NODE,\n            MODIFY_CHILD_NODE_COLLECTION,\n            READ_ACCESS_CONTROL,\n            MODIFY_ACCESS_CONTROL,\n            NODE_TYPE_MANAGEMENT,\n            VERSION_MANAGEMENT,\n            LOCK_MANAGEMENT,\n            LIFECYCLE_MANAGEMENT,\n            RETENTION_MANAGEMENT,\n            NODE_TYPE_DEFINITION_MANAGEMENT,\n            NAMESPACE_MANAGEMENT,\n            WORKSPACE_MANAGEMENT,\n            PRIVILEGE_MANAGEMENT,\n            USER_MANAGEMENT,\n            INDEX_DEFINITION_MANAGEMENT)", "var_name": "NON_AGGREGATES"}, {"original_string": "public static final Map<Long, String> PERMISSION_NAMES = new LinkedHashMap<>();", "modifier": "public static final", "type": "Map<Long, String>", "declarator": "PERMISSION_NAMES = new LinkedHashMap<>()", "var_name": "PERMISSION_NAMES"}, {"original_string": "private static final Map<String, Long> PERMISSION_LOOKUP = new LinkedHashMap<>();", "modifier": "private static final", "type": "Map<String, Long>", "declarator": "PERMISSION_LOOKUP = new LinkedHashMap<>()", "var_name": "PERMISSION_LOOKUP"}, {"original_string": "private static final Set<String> WRITE_ACTIONS = ImmutableSet.of(\n            Session.ACTION_REMOVE,\n            Session.ACTION_ADD_NODE,\n            Session.ACTION_SET_PROPERTY,\n            JackrabbitSession.ACTION_REMOVE_NODE,\n            JackrabbitSession.ACTION_ADD_PROPERTY,\n            JackrabbitSession.ACTION_MODIFY_PROPERTY,\n            JackrabbitSession.ACTION_REMOVE_PROPERTY\n    );", "modifier": "private static final", "type": "Set<String>", "declarator": "WRITE_ACTIONS = ImmutableSet.of(\n            Session.ACTION_REMOVE,\n            Session.ACTION_ADD_NODE,\n            Session.ACTION_SET_PROPERTY,\n            JackrabbitSession.ACTION_REMOVE_NODE,\n            JackrabbitSession.ACTION_ADD_PROPERTY,\n            JackrabbitSession.ACTION_MODIFY_PROPERTY,\n            JackrabbitSession.ACTION_REMOVE_PROPERTY\n    )", "var_name": "WRITE_ACTIONS"}, {"original_string": "private static final Map<String, Long> ACTIONS_MAP = new LinkedHashMap<>();", "modifier": "private static final", "type": "Map<String, Long>", "declarator": "ACTIONS_MAP = new LinkedHashMap<>()", "var_name": "ACTIONS_MAP"}], "methods": [{"identifier": "Permissions", "parameters": "()", "modifiers": "private", "return": "", "signature": " Permissions()", "full_signature": "private  Permissions()", "class_method_signature": "Permissions.Permissions()", "testcase": false, "constructor": true}, {"identifier": "getNames", "parameters": "(long permissions)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getNames(long permissions)", "full_signature": "public static Set<String> getNames(long permissions)", "class_method_signature": "Permissions.getNames(long permissions)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(long permissions)", "modifiers": "public static", "return": "String", "signature": "String getString(long permissions)", "full_signature": "public static String getString(long permissions)", "class_method_signature": "Permissions.getString(long permissions)", "testcase": false, "constructor": false}, {"identifier": "isRepositoryPermission", "parameters": "(long permission)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRepositoryPermission(long permission)", "full_signature": "public static boolean isRepositoryPermission(long permission)", "class_method_signature": "Permissions.isRepositoryPermission(long permission)", "testcase": false, "constructor": false}, {"identifier": "isAggregate", "parameters": "(long permission)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAggregate(long permission)", "full_signature": "public static boolean isAggregate(long permission)", "class_method_signature": "Permissions.isAggregate(long permission)", "testcase": false, "constructor": false}, {"identifier": "aggregates", "parameters": "(final long permissions)", "modifiers": "public static", "return": "Iterable<Long>", "signature": "Iterable<Long> aggregates(final long permissions)", "full_signature": "public static Iterable<Long> aggregates(final long permissions)", "class_method_signature": "Permissions.aggregates(final long permissions)", "testcase": false, "constructor": false}, {"identifier": "includes", "parameters": "(long permissions, long permissionsToTest)", "modifiers": "public static", "return": "boolean", "signature": "boolean includes(long permissions, long permissionsToTest)", "full_signature": "public static boolean includes(long permissions, long permissionsToTest)", "class_method_signature": "Permissions.includes(long permissions, long permissionsToTest)", "testcase": false, "constructor": false}, {"identifier": "respectParentPermissions", "parameters": "(long permissions)", "modifiers": "public static", "return": "boolean", "signature": "boolean respectParentPermissions(long permissions)", "full_signature": "public static boolean respectParentPermissions(long permissions)", "class_method_signature": "Permissions.respectParentPermissions(long permissions)", "testcase": false, "constructor": false}, {"identifier": "diff", "parameters": "(long permissions, long otherPermissions)", "modifiers": "public static", "return": "long", "signature": "long diff(long permissions, long otherPermissions)", "full_signature": "public static long diff(long permissions, long otherPermissions)", "class_method_signature": "Permissions.diff(long permissions, long otherPermissions)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(@NotNull String jcrActions,\n                                      @NotNull TreeLocation location,\n                                      boolean isAccessControlContent)", "modifiers": "public static", "return": "long", "signature": "long getPermissions(@NotNull String jcrActions,\n                                      @NotNull TreeLocation location,\n                                      boolean isAccessControlContent)", "full_signature": "public static long getPermissions(@NotNull String jcrActions,\n                                      @NotNull TreeLocation location,\n                                      boolean isAccessControlContent)", "class_method_signature": "Permissions.getPermissions(@NotNull String jcrActions,\n                                      @NotNull TreeLocation location,\n                                      boolean isAccessControlContent)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(@Nullable String permissionNames)", "modifiers": "public static", "return": "long", "signature": "long getPermissions(@Nullable String permissionNames)", "full_signature": "public static long getPermissions(@Nullable String permissionNames)", "class_method_signature": "Permissions.getPermissions(@Nullable String permissionNames)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(@NotNull Set<String> permissionNames)", "modifiers": "private static", "return": "long", "signature": "long getPermissions(@NotNull Set<String> permissionNames)", "full_signature": "private static long getPermissions(@NotNull Set<String> permissionNames)", "class_method_signature": "Permissions.getPermissions(@NotNull Set<String> permissionNames)", "testcase": false, "constructor": false}, {"identifier": "getPermission", "parameters": "(@Nullable String path, long defaultPermission)", "modifiers": "public static", "return": "long", "signature": "long getPermission(@Nullable String path, long defaultPermission)", "full_signature": "public static long getPermission(@Nullable String path, long defaultPermission)", "class_method_signature": "Permissions.getPermission(@Nullable String path, long defaultPermission)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/permission/Permissions.java"}, "focal_method": {"identifier": "isAggregate", "parameters": "(long permission)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isAggregate(long permission) {\n        return permission > NO_PERMISSION && !NON_AGGREGATES.contains(permission);\n    }", "signature": "boolean isAggregate(long permission)", "full_signature": "public static boolean isAggregate(long permission)", "class_method_signature": "Permissions.isAggregate(long permission)", "testcase": false, "constructor": false, "invocations": ["contains"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}