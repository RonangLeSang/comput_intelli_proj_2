{"test_class": {"identifier": "SyncMBeanImplTest", "superclass": "extends AbstractJmxTest", "interfaces": "", "fields": [{"original_string": "private static final String SYNC_NAME = \"testSyncName\";", "modifier": "private static final", "type": "String", "declarator": "SYNC_NAME = \"testSyncName\"", "var_name": "SYNC_NAME"}, {"original_string": "private SyncMBeanImpl syncMBean;", "modifier": "private", "type": "SyncMBeanImpl", "declarator": "syncMBean", "var_name": "syncMBean"}, {"original_string": "private SyncManager syncMgr;", "modifier": "private", "type": "SyncManager", "declarator": "syncMgr", "var_name": "syncMgr"}, {"original_string": "private ExternalIdentityProviderManager idpMgr;", "modifier": "private", "type": "ExternalIdentityProviderManager", "declarator": "idpMgr", "var_name": "idpMgr"}], "file": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/jmx/SyncMBeanImplTest.java"}, "test_case": {"identifier": "testSyncAllGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSyncAllGroups() throws Exception {\n        // first sync external users into the repo\n        Map<String, String> expected = new HashMap<>();\n        Iterator<ExternalGroup> grIt = idp.listGroups();\n        while (grIt.hasNext()) {\n            ExternalGroup eg = grIt.next();\n            sync(idp, eg.getId(), true);\n            expected.put(eg.getId(), \"upd\");\n        }\n\n        // verify effect of syncAllUsers (which in this case are groups)\n        String[] result = syncMBean.syncAllUsers(false);\n        assertResultMessages(result, expected);\n\n        UserManager userManager = getUserManager();\n        for (String id : expected.keySet()) {\n            ExternalIdentity ei = idp.getGroup(id);\n            assertSync(ei, userManager);\n        }\n    }", "signature": "void testSyncAllGroups()", "full_signature": "@Test public void testSyncAllGroups()", "class_method_signature": "SyncMBeanImplTest.testSyncAllGroups()", "testcase": true, "constructor": false, "invocations": ["listGroups", "hasNext", "next", "sync", "getId", "put", "getId", "syncAllUsers", "assertResultMessages", "getUserManager", "keySet", "getGroup", "assertSync"]}, "focal_class": {"identifier": "SyncMBeanImpl", "superclass": "", "interfaces": "implements SynchronizationMBean", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SyncMBeanImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SyncMBeanImpl.class)", "var_name": "log"}, {"original_string": "private final ContentRepository repository;", "modifier": "private final", "type": "ContentRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final SecurityProvider securityProvider;", "modifier": "private final", "type": "SecurityProvider", "declarator": "securityProvider", "var_name": "securityProvider"}, {"original_string": "private final SyncManager syncManager;", "modifier": "private final", "type": "SyncManager", "declarator": "syncManager", "var_name": "syncManager"}, {"original_string": "private final String syncName;", "modifier": "private final", "type": "String", "declarator": "syncName", "var_name": "syncName"}, {"original_string": "private final ExternalIdentityProviderManager idpManager;", "modifier": "private final", "type": "ExternalIdentityProviderManager", "declarator": "idpManager", "var_name": "idpManager"}, {"original_string": "private final String idpName;", "modifier": "private final", "type": "String", "declarator": "idpName", "var_name": "idpName"}], "methods": [{"identifier": "SyncMBeanImpl", "parameters": "(@NotNull ContentRepository repository, @NotNull SecurityProvider securityProvider,\n                         @NotNull SyncManager syncManager, @NotNull String syncName,\n                         @NotNull ExternalIdentityProviderManager idpManager, @NotNull String idpName)", "modifiers": "public", "return": "", "signature": " SyncMBeanImpl(@NotNull ContentRepository repository, @NotNull SecurityProvider securityProvider,\n                         @NotNull SyncManager syncManager, @NotNull String syncName,\n                         @NotNull ExternalIdentityProviderManager idpManager, @NotNull String idpName)", "full_signature": "public  SyncMBeanImpl(@NotNull ContentRepository repository, @NotNull SecurityProvider securityProvider,\n                         @NotNull SyncManager syncManager, @NotNull String syncName,\n                         @NotNull ExternalIdentityProviderManager idpManager, @NotNull String idpName)", "class_method_signature": "SyncMBeanImpl.SyncMBeanImpl(@NotNull ContentRepository repository, @NotNull SecurityProvider securityProvider,\n                         @NotNull SyncManager syncManager, @NotNull String syncName,\n                         @NotNull ExternalIdentityProviderManager idpManager, @NotNull String idpName)", "testcase": false, "constructor": true}, {"identifier": "getDelegatee", "parameters": "()", "modifiers": "@NotNull private", "return": "Delegatee", "signature": "Delegatee getDelegatee()", "full_signature": "@NotNull private Delegatee getDelegatee()", "class_method_signature": "SyncMBeanImpl.getDelegatee()", "testcase": false, "constructor": false}, {"identifier": "getSyncHandlerName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getSyncHandlerName()", "full_signature": "@NotNull @Override public String getSyncHandlerName()", "class_method_signature": "SyncMBeanImpl.getSyncHandlerName()", "testcase": false, "constructor": false}, {"identifier": "getIDPName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getIDPName()", "full_signature": "@NotNull @Override public String getIDPName()", "class_method_signature": "SyncMBeanImpl.getIDPName()", "testcase": false, "constructor": false}, {"identifier": "syncUsers", "parameters": "(@NotNull String[] userIds, boolean purge)", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] syncUsers(@NotNull String[] userIds, boolean purge)", "full_signature": "@NotNull @Override public String[] syncUsers(@NotNull String[] userIds, boolean purge)", "class_method_signature": "SyncMBeanImpl.syncUsers(@NotNull String[] userIds, boolean purge)", "testcase": false, "constructor": false}, {"identifier": "syncAllUsers", "parameters": "(boolean purge)", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] syncAllUsers(boolean purge)", "full_signature": "@NotNull @Override public String[] syncAllUsers(boolean purge)", "class_method_signature": "SyncMBeanImpl.syncAllUsers(boolean purge)", "testcase": false, "constructor": false}, {"identifier": "syncExternalUsers", "parameters": "(@NotNull String[] externalIds)", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] syncExternalUsers(@NotNull String[] externalIds)", "full_signature": "@NotNull @Override public String[] syncExternalUsers(@NotNull String[] externalIds)", "class_method_signature": "SyncMBeanImpl.syncExternalUsers(@NotNull String[] externalIds)", "testcase": false, "constructor": false}, {"identifier": "syncAllExternalUsers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] syncAllExternalUsers()", "full_signature": "@NotNull @Override public String[] syncAllExternalUsers()", "class_method_signature": "SyncMBeanImpl.syncAllExternalUsers()", "testcase": false, "constructor": false}, {"identifier": "listOrphanedUsers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] listOrphanedUsers()", "full_signature": "@NotNull @Override public String[] listOrphanedUsers()", "class_method_signature": "SyncMBeanImpl.listOrphanedUsers()", "testcase": false, "constructor": false}, {"identifier": "purgeOrphanedUsers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] purgeOrphanedUsers()", "full_signature": "@NotNull @Override public String[] purgeOrphanedUsers()", "class_method_signature": "SyncMBeanImpl.purgeOrphanedUsers()", "testcase": false, "constructor": false}], "file": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/jmx/SyncMBeanImpl.java"}, "focal_method": {"identifier": "syncAllUsers", "parameters": "(boolean purge)", "modifiers": "@NotNull @Override public", "return": "String[]", "body": "@NotNull\n    @Override\n    public String[] syncAllUsers(boolean purge) {\n        Delegatee delegatee = getDelegatee();\n        try {\n            return delegatee.syncAllUsers(purge);\n        } finally {\n            delegatee.close();\n        }\n    }", "signature": "String[] syncAllUsers(boolean purge)", "full_signature": "@NotNull @Override public String[] syncAllUsers(boolean purge)", "class_method_signature": "SyncMBeanImpl.syncAllUsers(boolean purge)", "testcase": false, "constructor": false, "invocations": ["getDelegatee", "syncAllUsers", "close"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}