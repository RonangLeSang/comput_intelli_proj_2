{"test_class": {"identifier": "UserImporterTest", "superclass": "extends UserImporterBaseTest", "interfaces": "implements UserConstants", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/UserImporterTest.java"}, "test_case": {"identifier": "testInitImportUUIDBehaviorRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitImportUUIDBehaviorRemove() throws Exception {\n        assertTrue(importer.init(mockJackrabbitSession(), root, getNamePathMapper(), isWorkspaceImport(), ImportUUIDBehavior.IMPORT_UUID_COLLISION_REMOVE_EXISTING, new ReferenceChangeTracker(), getSecurityProvider()));\n    }", "signature": "void testInitImportUUIDBehaviorRemove()", "full_signature": "@Test public void testInitImportUUIDBehaviorRemove()", "class_method_signature": "UserImporterTest.testInitImportUUIDBehaviorRemove()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "init", "mockJackrabbitSession", "getNamePathMapper", "isWorkspaceImport", "getSecurityProvider"]}, "focal_class": {"identifier": "UserImporter", "superclass": "", "interfaces": "implements ProtectedPropertyImporter, ProtectedNodeImporter, UserConstants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(UserImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(UserImporter.class)", "var_name": "log"}, {"original_string": "private final int importBehavior;", "modifier": "private final", "type": "int", "declarator": "importBehavior", "var_name": "importBehavior"}, {"original_string": "private Root root;", "modifier": "private", "type": "Root", "declarator": "root", "var_name": "root"}, {"original_string": "private NamePathMapper namePathMapper;", "modifier": "private", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private ReferenceChangeTracker referenceTracker;", "modifier": "private", "type": "ReferenceChangeTracker", "declarator": "referenceTracker", "var_name": "referenceTracker"}, {"original_string": "private UserManagerImpl userManager;", "modifier": "private", "type": "UserManagerImpl", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "private IdentifierManager identifierManager;", "modifier": "private", "type": "IdentifierManager", "declarator": "identifierManager", "var_name": "identifierManager"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private Membership currentMembership;", "modifier": "private", "type": "Membership", "declarator": "currentMembership", "var_name": "currentMembership"}, {"original_string": "private Map<String, Membership> memberships = new HashMap<>();", "modifier": "private", "type": "Map<String, Membership>", "declarator": "memberships = new HashMap<>()", "var_name": "memberships"}, {"original_string": "private String currentPw;", "modifier": "private", "type": "String", "declarator": "currentPw", "var_name": "currentPw"}, {"original_string": "private Map<String, Principal> principals = new HashMap<>();", "modifier": "private", "type": "Map<String, Principal>", "declarator": "principals = new HashMap<>()", "var_name": "principals"}], "methods": [{"identifier": "UserImporter", "parameters": "(ConfigurationParameters config)", "modifiers": "", "return": "", "signature": " UserImporter(ConfigurationParameters config)", "full_signature": "  UserImporter(ConfigurationParameters config)", "class_method_signature": "UserImporter.UserImporter(ConfigurationParameters config)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "full_signature": "@Override public boolean init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "class_method_signature": "UserImporter.init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": false}, {"identifier": "canInitUserManager", "parameters": "(@NotNull JackrabbitSession session, boolean isWorkspaceImport)", "modifiers": "private static", "return": "boolean", "signature": "boolean canInitUserManager(@NotNull JackrabbitSession session, boolean isWorkspaceImport)", "full_signature": "private static boolean canInitUserManager(@NotNull JackrabbitSession session, boolean isWorkspaceImport)", "class_method_signature": "UserImporter.canInitUserManager(@NotNull JackrabbitSession session, boolean isWorkspaceImport)", "testcase": false, "constructor": false}, {"identifier": "handlePropInfo", "parameters": "(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handlePropInfo(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "full_signature": "@Override public boolean handlePropInfo(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "class_method_signature": "UserImporter.handlePropInfo(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "propertiesCompleted", "parameters": "(@NotNull Tree protectedParent)", "modifiers": "@Override public", "return": "void", "signature": "void propertiesCompleted(@NotNull Tree protectedParent)", "full_signature": "@Override public void propertiesCompleted(@NotNull Tree protectedParent)", "class_method_signature": "UserImporter.propertiesCompleted(@NotNull Tree protectedParent)", "testcase": false, "constructor": false}, {"identifier": "processReferences", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void processReferences()", "full_signature": "@Override public void processReferences()", "class_method_signature": "UserImporter.processReferences()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(@NotNull Tree protectedParent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start(@NotNull Tree protectedParent)", "full_signature": "@Override public boolean start(@NotNull Tree protectedParent)", "class_method_signature": "UserImporter.start(@NotNull Tree protectedParent)", "testcase": false, "constructor": false}, {"identifier": "startChildInfo", "parameters": "(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "modifiers": "@Override public", "return": "void", "signature": "void startChildInfo(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "full_signature": "@Override public void startChildInfo(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "class_method_signature": "UserImporter.startChildInfo(@NotNull NodeInfo childInfo, @NotNull List<PropInfo> propInfos)", "testcase": false, "constructor": false}, {"identifier": "endChildInfo", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endChildInfo()", "full_signature": "@Override public void endChildInfo()", "class_method_signature": "UserImporter.endChildInfo()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "(@NotNull Tree protectedParent)", "modifiers": "@Override public", "return": "void", "signature": "void end(@NotNull Tree protectedParent)", "full_signature": "@Override public void end(@NotNull Tree protectedParent)", "class_method_signature": "UserImporter.end(@NotNull Tree protectedParent)", "testcase": false, "constructor": false}, {"identifier": "getMembership", "parameters": "(@NotNull String authId)", "modifiers": "@NotNull private", "return": "Membership", "signature": "Membership getMembership(@NotNull String authId)", "full_signature": "@NotNull private Membership getMembership(@NotNull String authId)", "class_method_signature": "UserImporter.getMembership(@NotNull String authId)", "testcase": false, "constructor": false}, {"identifier": "checkInitialized", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkInitialized()", "full_signature": "private void checkInitialized()", "class_method_signature": "UserImporter.checkInitialized()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(@NotNull PropertyDefinition definition, @NotNull String oakNodeTypeName, boolean multipleStatus)", "modifiers": "private", "return": "boolean", "signature": "boolean isValid(@NotNull PropertyDefinition definition, @NotNull String oakNodeTypeName, boolean multipleStatus)", "full_signature": "private boolean isValid(@NotNull PropertyDefinition definition, @NotNull String oakNodeTypeName, boolean multipleStatus)", "class_method_signature": "UserImporter.isValid(@NotNull PropertyDefinition definition, @NotNull String oakNodeTypeName, boolean multipleStatus)", "testcase": false, "constructor": false}, {"identifier": "importAuthorizableId", "parameters": "(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "modifiers": "private", "return": "boolean", "signature": "boolean importAuthorizableId(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "full_signature": "private boolean importAuthorizableId(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "class_method_signature": "UserImporter.importAuthorizableId(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "importPrincipalName", "parameters": "(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "modifiers": "private", "return": "boolean", "signature": "boolean importPrincipalName(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "full_signature": "private boolean importPrincipalName(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "class_method_signature": "UserImporter.importPrincipalName(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "importPassword", "parameters": "(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "modifiers": "private", "return": "boolean", "signature": "boolean importPassword(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "full_signature": "private boolean importPassword(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "class_method_signature": "UserImporter.importPassword(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "importImpersonators", "parameters": "(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "modifiers": "private", "return": "boolean", "signature": "boolean importImpersonators(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "full_signature": "private boolean importImpersonators(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "class_method_signature": "UserImporter.importImpersonators(@NotNull Tree parent, @NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "importDisabled", "parameters": "(@NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "modifiers": "private", "return": "boolean", "signature": "boolean importDisabled(@NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "full_signature": "private boolean importDisabled(@NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "class_method_signature": "UserImporter.importDisabled(@NotNull Authorizable a, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "isMemberNode", "parameters": "(@NotNull Tree tree)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMemberNode(@NotNull Tree tree)", "full_signature": "private static boolean isMemberNode(@NotNull Tree tree)", "class_method_signature": "UserImporter.isMemberNode(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "isMemberReferencesListNode", "parameters": "(@NotNull Tree tree)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMemberReferencesListNode(@NotNull Tree tree)", "full_signature": "private static boolean isMemberReferencesListNode(@NotNull Tree tree)", "class_method_signature": "UserImporter.isMemberReferencesListNode(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "isPwdNode", "parameters": "(@NotNull Tree tree)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPwdNode(@NotNull Tree tree)", "full_signature": "private static boolean isPwdNode(@NotNull Tree tree)", "class_method_signature": "UserImporter.isPwdNode(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "importPwdNodeProperty", "parameters": "(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "modifiers": "private static", "return": "boolean", "signature": "boolean importPwdNodeProperty(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "full_signature": "private static boolean importPwdNodeProperty(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "class_method_signature": "UserImporter.importPwdNodeProperty(@NotNull Tree parent, @NotNull PropInfo propInfo, @NotNull PropertyDefinition def)", "testcase": false, "constructor": false}, {"identifier": "isCacheNode", "parameters": "(@NotNull Tree tree)", "modifiers": "private static", "return": "boolean", "signature": "boolean isCacheNode(@NotNull Tree tree)", "full_signature": "private static boolean isCacheNode(@NotNull Tree tree)", "class_method_signature": "UserImporter.isCacheNode(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "handleFailure", "parameters": "(String msg)", "modifiers": "private", "return": "void", "signature": "void handleFailure(String msg)", "full_signature": "private void handleFailure(String msg)", "class_method_signature": "UserImporter.handleFailure(String msg)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserImporter.java"}, "focal_method": {"identifier": "init", "parameters": "(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider) {\n\n        if (!(session instanceof JackrabbitSession)) {\n            log.debug(\"Importing protected user content requires a JackrabbitSession\");\n            return false;\n        }\n\n        this.root = root;\n        this.namePathMapper = namePathMapper;\n        this.referenceTracker = referenceTracker;\n\n        if (initialized) {\n            throw new IllegalStateException(\"Already initialized\");\n        }\n        if (uuidBehavior == ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW) {\n            log.debug(\"ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW isn't supported when importing users or groups.\");\n            return false;\n        }\n\n        if (!canInitUserManager((JackrabbitSession) session, isWorkspaceImport)) {\n            return false;\n        }\n\n        userManager = new UserManagerImpl(root, new PartialValueFactory(namePathMapper), securityProvider);\n\n        initialized = true;\n        return initialized;\n    }", "signature": "boolean init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "full_signature": "@Override public boolean init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "class_method_signature": "UserImporter.init(@NotNull Session session, @NotNull Root root, @NotNull NamePathMapper namePathMapper,\n            boolean isWorkspaceImport, int uuidBehavior,\n            @NotNull ReferenceChangeTracker referenceTracker, @NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": false, "invocations": ["debug", "debug", "canInitUserManager"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}