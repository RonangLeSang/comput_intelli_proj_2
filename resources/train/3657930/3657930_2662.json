{"test_class": {"identifier": "TreeTypeProviderTest", "superclass": "extends AbstractTreeTest", "interfaces": "", "fields": [{"original_string": "private TreeTypeProvider typeProvider;", "modifier": "private", "type": "TreeTypeProvider", "declarator": "typeProvider", "var_name": "typeProvider"}, {"original_string": "private List<TypeTest> tests;", "modifier": "private", "type": "List<TypeTest>", "declarator": "tests", "var_name": "tests"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/plugins/tree/TreeTypeProviderTest.java"}, "test_case": {"identifier": "testGetTypeForRootTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTypeForRootTree() {\n        Tree t = mockTree(PathUtils.ROOT_PATH, true);\n        assertEquals(TreeType.DEFAULT, typeProvider.getType(t));\n\n        // the type of the root tree is always 'DEFAULT' irrespective of the passed parent type.\n        assertEquals(TreeType.DEFAULT, typeProvider.getType(t, TreeType.DEFAULT));\n        assertEquals(TreeType.DEFAULT, typeProvider.getType(t, TreeType.HIDDEN));\n        assertEquals(TreeType.DEFAULT, typeProvider.getType(t, TreeType.VERSION));\n    }", "signature": "void testGetTypeForRootTree()", "full_signature": "@Test public void testGetTypeForRootTree()", "class_method_signature": "TreeTypeProviderTest.testGetTypeForRootTree()", "testcase": true, "constructor": false, "invocations": ["mockTree", "assertEquals", "getType", "assertEquals", "getType", "assertEquals", "getType", "assertEquals", "getType"]}, "focal_class": {"identifier": "TreeTypeProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TreeContext ctx;", "modifier": "private final", "type": "TreeContext", "declarator": "ctx", "var_name": "ctx"}], "methods": [{"identifier": "TreeTypeProvider", "parameters": "(@NotNull TreeContext authorizationContext)", "modifiers": "public", "return": "", "signature": " TreeTypeProvider(@NotNull TreeContext authorizationContext)", "full_signature": "public  TreeTypeProvider(@NotNull TreeContext authorizationContext)", "class_method_signature": "TreeTypeProvider.TreeTypeProvider(@NotNull TreeContext authorizationContext)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "(@NotNull Tree tree)", "modifiers": "public", "return": "TreeType", "signature": "TreeType getType(@NotNull Tree tree)", "full_signature": "public TreeType getType(@NotNull Tree tree)", "class_method_signature": "TreeTypeProvider.getType(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(@NotNull Tree tree, @NotNull TreeType parentType)", "modifiers": "public", "return": "TreeType", "signature": "TreeType getType(@NotNull Tree tree, @NotNull TreeType parentType)", "full_signature": "public TreeType getType(@NotNull Tree tree, @NotNull TreeType parentType)", "class_method_signature": "TreeTypeProvider.getType(@NotNull Tree tree, @NotNull TreeType parentType)", "testcase": false, "constructor": false}, {"identifier": "internalGetType", "parameters": "(@NotNull Tree tree)", "modifiers": "private", "return": "TreeType", "signature": "TreeType internalGetType(@NotNull Tree tree)", "full_signature": "private TreeType internalGetType(@NotNull Tree tree)", "class_method_signature": "TreeTypeProvider.internalGetType(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "internalGetType", "parameters": "(@NotNull Tree tree, @NotNull TreeType parentType)", "modifiers": "private", "return": "TreeType", "signature": "TreeType internalGetType(@NotNull Tree tree, @NotNull TreeType parentType)", "full_signature": "private TreeType internalGetType(@NotNull Tree tree, @NotNull TreeType parentType)", "class_method_signature": "TreeTypeProvider.internalGetType(@NotNull Tree tree, @NotNull TreeType parentType)", "testcase": false, "constructor": false}, {"identifier": "internalGetType", "parameters": "(@NotNull String name, @NotNull Tree tree)", "modifiers": "private", "return": "TreeType", "signature": "TreeType internalGetType(@NotNull String name, @NotNull Tree tree)", "full_signature": "private TreeType internalGetType(@NotNull String name, @NotNull Tree tree)", "class_method_signature": "TreeTypeProvider.internalGetType(@NotNull String name, @NotNull Tree tree)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/plugins/tree/TreeTypeProvider.java"}, "focal_method": {"identifier": "getType", "parameters": "(@NotNull Tree tree)", "modifiers": "public", "return": "TreeType", "body": "public TreeType getType(@NotNull Tree tree) {\n        if (tree.isRoot()) {\n            return TreeType.DEFAULT;\n        } else {\n            TreeType type;\n            if (tree instanceof TreeTypeAware) {\n                type = ((TreeTypeAware) tree).getType();\n                if (type == null) {\n                    type = internalGetType(tree);\n                    ((TreeTypeAware) tree).setType(type);\n                }\n            } else {\n                type = internalGetType(tree);\n            }\n            return type;\n        }\n    }", "signature": "TreeType getType(@NotNull Tree tree)", "full_signature": "public TreeType getType(@NotNull Tree tree)", "class_method_signature": "TreeTypeProvider.getType(@NotNull Tree tree)", "testcase": false, "constructor": false, "invocations": ["isRoot", "getType", "internalGetType", "setType", "internalGetType"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}