{"test_class": {"identifier": "ChangeSetFilterImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ChangeSetFilterImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ChangeSetFilterImplTest.class)", "var_name": "LOG"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImplTest.java"}, "test_case": {"identifier": "testIncludeOnParentNodeTypeOverflow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIncludeOnParentNodeTypeOverflow() throws Exception {\n        ChangeSetBuilder builder = sampleBuilder();\n        ChangeSetFilterImpl prefilter = new ChangeSetFilterImpl(s(\"/\"), true, null, s(\"/excluded\"), s(\"foo\", \"bars\"), s(\"nt:file\"), s());\n        assertTrue(prefilter.excludes(builder.build()));\n        overflowParentNodeTypes(builder);\n        assertFalse(prefilter.excludes(builder.build()));\n    }", "signature": "void testIncludeOnParentNodeTypeOverflow()", "full_signature": "@Test public void testIncludeOnParentNodeTypeOverflow()", "class_method_signature": "ChangeSetFilterImplTest.testIncludeOnParentNodeTypeOverflow()", "testcase": true, "constructor": false, "invocations": ["sampleBuilder", "s", "s", "s", "s", "s", "assertTrue", "excludes", "build", "overflowParentNodeTypes", "assertFalse", "excludes", "build"]}, "focal_class": {"identifier": "ChangeSetFilterImpl", "superclass": "", "interfaces": "implements ChangeSetFilter", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ChangeSetFilterImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ChangeSetFilterImpl.class)", "var_name": "LOG"}, {"original_string": "private static final int MAX_EXCLUDED_PATHS = 11;", "modifier": "private static final", "type": "int", "declarator": "MAX_EXCLUDED_PATHS = 11", "var_name": "MAX_EXCLUDED_PATHS"}, {"original_string": "private static final int MAX_EXCLUDE_PATH_CUTOFF_LEVEL = 6;", "modifier": "private static final", "type": "int", "declarator": "MAX_EXCLUDE_PATH_CUTOFF_LEVEL = 6", "var_name": "MAX_EXCLUDE_PATH_CUTOFF_LEVEL"}, {"original_string": "private final Set<String> rootIncludePaths;", "modifier": "private final", "type": "Set<String>", "declarator": "rootIncludePaths", "var_name": "rootIncludePaths"}, {"original_string": "private final Set<String> firstLevelIncludeNames;", "modifier": "private final", "type": "Set<String>", "declarator": "firstLevelIncludeNames", "var_name": "firstLevelIncludeNames"}, {"original_string": "private final Set<Pattern> includePathPatterns;", "modifier": "private final", "type": "Set<Pattern>", "declarator": "includePathPatterns", "var_name": "includePathPatterns"}, {"original_string": "private final Set<Pattern> excludePathPatterns;", "modifier": "private final", "type": "Set<Pattern>", "declarator": "excludePathPatterns", "var_name": "excludePathPatterns"}, {"original_string": "private final Set<Pattern> unpreciseExcludePathPatterns;", "modifier": "private final", "type": "Set<Pattern>", "declarator": "unpreciseExcludePathPatterns", "var_name": "unpreciseExcludePathPatterns"}, {"original_string": "private final Set<String> parentNodeNames;", "modifier": "private final", "type": "Set<String>", "declarator": "parentNodeNames", "var_name": "parentNodeNames"}, {"original_string": "private final Set<String> parentNodeTypes;", "modifier": "private final", "type": "Set<String>", "declarator": "parentNodeTypes", "var_name": "parentNodeTypes"}, {"original_string": "private final Set<String> propertyNames;", "modifier": "private final", "type": "Set<String>", "declarator": "propertyNames", "var_name": "propertyNames"}], "methods": [{"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ChangeSetFilterImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "ChangeSetFilterImpl", "parameters": "(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames)", "modifiers": "public", "return": "", "signature": " ChangeSetFilterImpl(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames)", "full_signature": "public  ChangeSetFilterImpl(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames)", "class_method_signature": "ChangeSetFilterImpl.ChangeSetFilterImpl(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames)", "testcase": false, "constructor": true}, {"identifier": "ChangeSetFilterImpl", "parameters": "(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames,\n            int maxExcludedPaths)", "modifiers": "public", "return": "", "signature": " ChangeSetFilterImpl(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames,\n            int maxExcludedPaths)", "full_signature": "public  ChangeSetFilterImpl(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames,\n            int maxExcludedPaths)", "class_method_signature": "ChangeSetFilterImpl.ChangeSetFilterImpl(@NotNull Set<String> includedParentPaths, boolean isDeep,\n            @Nullable Set<String> additionalIncludedParentPaths, Set<String> excludedParentPaths,\n            Set<String> parentNodeNames, Set<String> parentNodeTypes, Set<String> propertyNames,\n            int maxExcludedPaths)", "testcase": false, "constructor": true}, {"identifier": "firstLevelName", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String firstLevelName(String path)", "full_signature": "private String firstLevelName(String path)", "class_method_signature": "ChangeSetFilterImpl.firstLevelName(String path)", "testcase": false, "constructor": false}, {"identifier": "unprecisePaths", "parameters": "(Set<String> paths, int maxExcludedPaths, int maxExcludePathCutOffLevel)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> unprecisePaths(Set<String> paths, int maxExcludedPaths, int maxExcludePathCutOffLevel)", "full_signature": "private Set<String> unprecisePaths(Set<String> paths, int maxExcludedPaths, int maxExcludePathCutOffLevel)", "class_method_signature": "ChangeSetFilterImpl.unprecisePaths(Set<String> paths, int maxExcludedPaths, int maxExcludePathCutOffLevel)", "testcase": false, "constructor": false}, {"identifier": "unprecisePaths", "parameters": "(Set<String> paths, int level)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> unprecisePaths(Set<String> paths, int level)", "full_signature": "private Set<String> unprecisePaths(Set<String> paths, int level)", "class_method_signature": "ChangeSetFilterImpl.unprecisePaths(Set<String> paths, int level)", "testcase": false, "constructor": false}, {"identifier": "getRootIncludePaths", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getRootIncludePaths()", "full_signature": "public Set<String> getRootIncludePaths()", "class_method_signature": "ChangeSetFilterImpl.getRootIncludePaths()", "testcase": false, "constructor": false}, {"identifier": "asPattern", "parameters": "(String patternWithGlobs)", "modifiers": "private", "return": "Pattern", "signature": "Pattern asPattern(String patternWithGlobs)", "full_signature": "private Pattern asPattern(String patternWithGlobs)", "class_method_signature": "ChangeSetFilterImpl.asPattern(String patternWithGlobs)", "testcase": false, "constructor": false}, {"identifier": "excludes", "parameters": "(ChangeSet changeSet)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean excludes(ChangeSet changeSet)", "full_signature": "@Override public boolean excludes(ChangeSet changeSet)", "class_method_signature": "ChangeSetFilterImpl.excludes(ChangeSet changeSet)", "testcase": false, "constructor": false}, {"identifier": "doExcludes", "parameters": "(ChangeSet changeSet)", "modifiers": "private", "return": "boolean", "signature": "boolean doExcludes(ChangeSet changeSet)", "full_signature": "private boolean doExcludes(ChangeSet changeSet)", "class_method_signature": "ChangeSetFilterImpl.doExcludes(ChangeSet changeSet)", "testcase": false, "constructor": false}, {"identifier": "patternsMatch", "parameters": "(Set<Pattern> pathPatterns, String path)", "modifiers": "private static", "return": "boolean", "signature": "boolean patternsMatch(Set<Pattern> pathPatterns, String path)", "full_signature": "private static boolean patternsMatch(Set<Pattern> pathPatterns, String path)", "class_method_signature": "ChangeSetFilterImpl.patternsMatch(Set<Pattern> pathPatterns, String path)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/ChangeSetFilterImpl.java"}, "focal_method": {"identifier": "excludes", "parameters": "(ChangeSet changeSet)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean excludes(ChangeSet changeSet) {\n        try{\n            return doExcludes(changeSet);\n        } catch(Exception e) {\n            LOG.warn(\"excludes: got an Exception while evaluating excludes: \" + e.getMessage() + \n                    \", changeSet=\" + changeSet, e);\n            return false; // false is the safer option\n        }\n    }", "signature": "boolean excludes(ChangeSet changeSet)", "full_signature": "@Override public boolean excludes(ChangeSet changeSet)", "class_method_signature": "ChangeSetFilterImpl.excludes(ChangeSet changeSet)", "testcase": false, "constructor": false, "invocations": ["doExcludes", "warn", "getMessage"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}