{"test_class": {"identifier": "UserQueryManagerTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private ValueFactory valueFactory;", "modifier": "private", "type": "ValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "private UserQueryManager queryMgr;", "modifier": "private", "type": "UserQueryManager", "declarator": "queryMgr", "var_name": "queryMgr"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private String propertyName;", "modifier": "private", "type": "String", "declarator": "propertyName", "var_name": "propertyName"}, {"original_string": "private Value v;", "modifier": "private", "type": "Value", "declarator": "v", "var_name": "v"}, {"original_string": "private List<Group> groups = new ArrayList<>();", "modifier": "private", "type": "List<Group>", "declarator": "groups = new ArrayList<>()", "var_name": "groups"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/query/UserQueryManagerTest.java"}, "test_case": {"identifier": "testQueryBoundWithoutSortOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueryBoundWithoutSortOrder() throws Exception {\n        Group g = createGroup(\"g1\", null);\n        g.setProperty(propertyName, valueFactory.createValue(50));\n        Group g2 = createGroup(\"g2\", null);\n        g2.setProperty(propertyName, valueFactory.createValue(60));\n        user.setProperty(propertyName, valueFactory.createValue(101));\n        root.commit();\n\n        Query q = new Query() {\n            @Override\n            public <T> void build(@NotNull QueryBuilder<T> builder) {\n                builder.setLimit(valueFactory.createValue(100), Long.MAX_VALUE);\n                builder.setCondition(builder.gt(propertyName, valueFactory.createValue(20)));\n            }\n        };\n\n        Iterator<Authorizable> result = queryMgr.findAuthorizables(q);\n        assertResultContainsAuthorizables(result, user, g, g2);\n    }", "signature": "void testQueryBoundWithoutSortOrder()", "full_signature": "@Test public void testQueryBoundWithoutSortOrder()", "class_method_signature": "UserQueryManagerTest.testQueryBoundWithoutSortOrder()", "testcase": true, "constructor": false, "invocations": ["createGroup", "setProperty", "createValue", "createGroup", "setProperty", "createValue", "setProperty", "createValue", "commit", "setLimit", "createValue", "setCondition", "gt", "createValue", "findAuthorizables", "assertResultContainsAuthorizables"]}, "focal_class": {"identifier": "UserQueryManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(UserQueryManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(UserQueryManager.class)", "var_name": "log"}, {"original_string": "private final UserManagerImpl userManager;", "modifier": "private final", "type": "UserManagerImpl", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private final ConfigurationParameters config;", "modifier": "private final", "type": "ConfigurationParameters", "declarator": "config", "var_name": "config"}, {"original_string": "private final Root root;", "modifier": "private final", "type": "Root", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "UserQueryManager", "parameters": "(@NotNull UserManagerImpl userManager,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull ConfigurationParameters config,\n                            @NotNull Root root)", "modifiers": "public", "return": "", "signature": " UserQueryManager(@NotNull UserManagerImpl userManager,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull ConfigurationParameters config,\n                            @NotNull Root root)", "full_signature": "public  UserQueryManager(@NotNull UserManagerImpl userManager,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull ConfigurationParameters config,\n                            @NotNull Root root)", "class_method_signature": "UserQueryManager.UserQueryManager(@NotNull UserManagerImpl userManager,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull ConfigurationParameters config,\n                            @NotNull Root root)", "testcase": false, "constructor": true}, {"identifier": "findAuthorizables", "parameters": "(@NotNull Query query)", "modifiers": "@NotNull public", "return": "Iterator<Authorizable>", "signature": "Iterator<Authorizable> findAuthorizables(@NotNull Query query)", "full_signature": "@NotNull public Iterator<Authorizable> findAuthorizables(@NotNull Query query)", "class_method_signature": "UserQueryManager.findAuthorizables(@NotNull Query query)", "testcase": false, "constructor": false}, {"identifier": "findAuthorizables", "parameters": "(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType)", "modifiers": "@NotNull public", "return": "Iterator<Authorizable>", "signature": "Iterator<Authorizable> findAuthorizables(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType)", "full_signature": "@NotNull public Iterator<Authorizable> findAuthorizables(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType)", "class_method_signature": "UserQueryManager.findAuthorizables(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType)", "testcase": false, "constructor": false}, {"identifier": "findAuthorizables", "parameters": "(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType,\n                                                    boolean exact)", "modifiers": "@NotNull public", "return": "Iterator<Authorizable>", "signature": "Iterator<Authorizable> findAuthorizables(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType,\n                                                    boolean exact)", "full_signature": "@NotNull public Iterator<Authorizable> findAuthorizables(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType,\n                                                    boolean exact)", "class_method_signature": "UserQueryManager.findAuthorizables(@NotNull String relPath,\n                                                    @Nullable String value,\n                                                    @NotNull AuthorizableType authorizableType,\n                                                    boolean exact)", "testcase": false, "constructor": false}, {"identifier": "buildXPathStatement", "parameters": "(@NotNull String relPath,\n                                       @Nullable String value,\n                                       @NotNull AuthorizableType type, boolean exact)", "modifiers": "@NotNull private", "return": "String", "signature": "String buildXPathStatement(@NotNull String relPath,\n                                       @Nullable String value,\n                                       @NotNull AuthorizableType type, boolean exact)", "full_signature": "@NotNull private String buildXPathStatement(@NotNull String relPath,\n                                       @Nullable String value,\n                                       @NotNull AuthorizableType type, boolean exact)", "class_method_signature": "UserQueryManager.buildXPathStatement(@NotNull String relPath,\n                                       @Nullable String value,\n                                       @NotNull AuthorizableType type, boolean exact)", "testcase": false, "constructor": false}, {"identifier": "buildXPathStatement", "parameters": "(@NotNull XPathQueryBuilder builder)", "modifiers": "@NotNull private", "return": "String", "signature": "String buildXPathStatement(@NotNull XPathQueryBuilder builder)", "full_signature": "@NotNull private String buildXPathStatement(@NotNull XPathQueryBuilder builder)", "class_method_signature": "UserQueryManager.buildXPathStatement(@NotNull XPathQueryBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "findAuthorizables", "parameters": "(@NotNull String statement,\n                                                     long limit,\n                                                     long offset,\n                                                     @Nullable AuthorizableType type)", "modifiers": "@NotNull private", "return": "Iterator<Authorizable>", "signature": "Iterator<Authorizable> findAuthorizables(@NotNull String statement,\n                                                     long limit,\n                                                     long offset,\n                                                     @Nullable AuthorizableType type)", "full_signature": "@NotNull private Iterator<Authorizable> findAuthorizables(@NotNull String statement,\n                                                     long limit,\n                                                     long offset,\n                                                     @Nullable AuthorizableType type)", "class_method_signature": "UserQueryManager.findAuthorizables(@NotNull String statement,\n                                                     long limit,\n                                                     long offset,\n                                                     @Nullable AuthorizableType type)", "testcase": false, "constructor": false}, {"identifier": "getQueryPath", "parameters": "(@NotNull String relPath)", "modifiers": "@Nullable private static", "return": "String", "signature": "String getQueryPath(@NotNull String relPath)", "full_signature": "@Nullable private static String getQueryPath(@NotNull String relPath)", "class_method_signature": "UserQueryManager.getQueryPath(@NotNull String relPath)", "testcase": false, "constructor": false}, {"identifier": "isReserved", "parameters": "(@NotNull String propName)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReserved(@NotNull String propName)", "full_signature": "private static boolean isReserved(@NotNull String propName)", "class_method_signature": "UserQueryManager.isReserved(@NotNull String propName)", "testcase": false, "constructor": false}, {"identifier": "isEveryone", "parameters": "(@NotNull String groupId)", "modifiers": "private", "return": "boolean", "signature": "boolean isEveryone(@NotNull String groupId)", "full_signature": "private boolean isEveryone(@NotNull String groupId)", "class_method_signature": "UserQueryManager.isEveryone(@NotNull String groupId)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/query/UserQueryManager.java"}, "focal_method": {"identifier": "findAuthorizables", "parameters": "(@NotNull Query query)", "modifiers": "@NotNull public", "return": "Iterator<Authorizable>", "body": "@NotNull\n    public Iterator<Authorizable> findAuthorizables(@NotNull Query query) throws RepositoryException {\n        XPathQueryBuilder builder = new XPathQueryBuilder();\n        query.build(builder);\n\n        if (builder.getMaxCount() == 0) {\n            return Collections.emptyIterator();\n        }\n\n        String statement = buildXPathStatement(builder);\n        final String groupId = builder.getGroupID();\n        if (groupId == null || isEveryone(groupId)) {\n            long offset = builder.getOffset();\n            Iterator<Authorizable> result = findAuthorizables(statement, builder.getMaxCount(), offset, null);\n            if (groupId == null) {\n                return result;\n            } else {\n                return Iterators.filter(result, authorizable -> !groupId.equals(getID(authorizable)));\n            }\n        } else {\n            // filtering by group name included in query -> enforce offset and limit on the result set.\n            Iterator<Authorizable> result = findAuthorizables(statement, Long.MAX_VALUE, 0, null);\n            Predicate<Authorizable> filter;\n            if (builder.isDeclaredMembersOnly()) {\n                filter = new DeclaredMembershipPredicate(userManager, groupId);\n            } else {\n                filter = new GroupPredicate(userManager, groupId, false);\n\n            }\n            return ResultIterator.create(builder.getOffset(), builder.getMaxCount(), Iterators.filter(result, filter));\n        }\n    }", "signature": "Iterator<Authorizable> findAuthorizables(@NotNull Query query)", "full_signature": "@NotNull public Iterator<Authorizable> findAuthorizables(@NotNull Query query)", "class_method_signature": "UserQueryManager.findAuthorizables(@NotNull Query query)", "testcase": false, "constructor": false, "invocations": ["build", "getMaxCount", "emptyIterator", "buildXPathStatement", "getGroupID", "isEveryone", "getOffset", "findAuthorizables", "getMaxCount", "filter", "equals", "getID", "findAuthorizables", "isDeclaredMembersOnly", "create", "getOffset", "getMaxCount", "filter"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}