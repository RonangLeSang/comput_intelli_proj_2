{"test_class": {"identifier": "GroupPredicateTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private UserManager userManager;", "modifier": "private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "private User testUser;", "modifier": "private", "type": "User", "declarator": "testUser", "var_name": "testUser"}, {"original_string": "private Group testMember;", "modifier": "private", "type": "Group", "declarator": "testMember", "var_name": "testMember"}, {"original_string": "private Group testGroup;", "modifier": "private", "type": "Group", "declarator": "testGroup", "var_name": "testGroup"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/query/GroupPredicateTest.java"}, "test_case": {"identifier": "testDeclaredMembersOnly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeclaredMembersOnly() throws Exception {\n        GroupPredicate gp = new GroupPredicate(userManager, testGroup.getID(), true);\n        assertTrue(gp.apply(testMember));\n\n        assertFalse(gp.apply(testUser));\n        assertFalse(gp.apply(testGroup));\n        assertFalse(gp.apply(null));\n    }", "signature": "void testDeclaredMembersOnly()", "full_signature": "@Test public void testDeclaredMembersOnly()", "class_method_signature": "GroupPredicateTest.testDeclaredMembersOnly()", "testcase": true, "constructor": false, "invocations": ["getID", "assertTrue", "apply", "assertFalse", "apply", "assertFalse", "apply", "assertFalse", "apply"]}, "focal_class": {"identifier": "GroupPredicate", "superclass": "", "interfaces": "implements Predicate<Authorizable>", "fields": [{"original_string": "private final Iterator<Authorizable> membersIterator;", "modifier": "private final", "type": "Iterator<Authorizable>", "declarator": "membersIterator", "var_name": "membersIterator"}, {"original_string": "private final Set<String> memberIds = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "memberIds = new HashSet<>()", "var_name": "memberIds"}], "methods": [{"identifier": "GroupPredicate", "parameters": "(@NotNull UserManager userManager, @NotNull String groupId, boolean declaredMembersOnly)", "modifiers": "", "return": "", "signature": " GroupPredicate(@NotNull UserManager userManager, @NotNull String groupId, boolean declaredMembersOnly)", "full_signature": "  GroupPredicate(@NotNull UserManager userManager, @NotNull String groupId, boolean declaredMembersOnly)", "class_method_signature": "GroupPredicate.GroupPredicate(@NotNull UserManager userManager, @NotNull String groupId, boolean declaredMembersOnly)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(@Nullable Authorizable authorizable)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(@Nullable Authorizable authorizable)", "full_signature": "@Override public boolean apply(@Nullable Authorizable authorizable)", "class_method_signature": "GroupPredicate.apply(@Nullable Authorizable authorizable)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/query/GroupPredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(@Nullable Authorizable authorizable)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean apply(@Nullable Authorizable authorizable) {\n        String id = getID(authorizable);\n        if (id != null) {\n            if (memberIds.contains(id)) {\n                return true;\n            } else {\n                // not contained in ids that have already been processed => look\n                // for occurrence in the remaining iterator entries.\n                while (membersIterator.hasNext()) {\n                    String memberId = getID(membersIterator.next());\n                    if (memberId != null) {\n                        memberIds.add(memberId);\n                        if (memberId.equals(id)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }", "signature": "boolean apply(@Nullable Authorizable authorizable)", "full_signature": "@Override public boolean apply(@Nullable Authorizable authorizable)", "class_method_signature": "GroupPredicate.apply(@Nullable Authorizable authorizable)", "testcase": false, "constructor": false, "invocations": ["getID", "contains", "hasNext", "getID", "next", "add", "equals"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}