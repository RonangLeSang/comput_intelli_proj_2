{"test_class": {"identifier": "AuthorizablePropertiesImplTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private AuthorizablePropertiesImpl emptyProperties;", "modifier": "private", "type": "AuthorizablePropertiesImpl", "declarator": "emptyProperties", "var_name": "emptyProperties"}, {"original_string": "private Authorizable user2;", "modifier": "private", "type": "Authorizable", "declarator": "user2", "var_name": "user2"}, {"original_string": "private AuthorizablePropertiesImpl properties;", "modifier": "private", "type": "AuthorizablePropertiesImpl", "declarator": "properties", "var_name": "properties"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/AuthorizablePropertiesImplTest.java"}, "test_case": {"identifier": "testGetNamesMissingResolutionToOakPath", "parameters": "()", "modifiers": "@Test(expected = RepositoryException.class) public", "return": "void", "body": "@Test(expected = RepositoryException.class)\n    public void testGetNamesMissingResolutionToOakPath() throws Exception {\n        AuthorizableProperties props = new AuthorizablePropertiesImpl((AuthorizableImpl) user2,\n                new PartialValueFactory(new NamePathMapper.Default() {\n            @Override\n            public String getOakNameOrNull(@NotNull String jcrName) {\n                return null;\n            }\n\n            @Override\n            public String getOakPath(String jcrPath) {\n                return null;\n            }\n        }));\n        props.getNames(\"relPath\");\n    }", "signature": "void testGetNamesMissingResolutionToOakPath()", "full_signature": "@Test(expected = RepositoryException.class) public void testGetNamesMissingResolutionToOakPath()", "class_method_signature": "AuthorizablePropertiesImplTest.testGetNamesMissingResolutionToOakPath()", "testcase": true, "constructor": false, "invocations": ["getNames"]}, "focal_class": {"identifier": "AuthorizablePropertiesImpl", "superclass": "", "interfaces": "implements AuthorizableProperties", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AuthorizablePropertiesImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AuthorizablePropertiesImpl.class)", "var_name": "log"}, {"original_string": "private final AuthorizableImpl authorizable;", "modifier": "private final", "type": "AuthorizableImpl", "declarator": "authorizable", "var_name": "authorizable"}, {"original_string": "private final PartialValueFactory valueFactory;", "modifier": "private final", "type": "PartialValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}], "methods": [{"identifier": "AuthorizablePropertiesImpl", "parameters": "(@NotNull AuthorizableImpl authorizable,\n                               @NotNull PartialValueFactory valueFactory)", "modifiers": "", "return": "", "signature": " AuthorizablePropertiesImpl(@NotNull AuthorizableImpl authorizable,\n                               @NotNull PartialValueFactory valueFactory)", "full_signature": "  AuthorizablePropertiesImpl(@NotNull AuthorizableImpl authorizable,\n                               @NotNull PartialValueFactory valueFactory)", "class_method_signature": "AuthorizablePropertiesImpl.AuthorizablePropertiesImpl(@NotNull AuthorizableImpl authorizable,\n                               @NotNull PartialValueFactory valueFactory)", "testcase": false, "constructor": true}, {"identifier": "getNames", "parameters": "(@NotNull String relPath)", "modifiers": "@NotNull @Override public", "return": "Iterator<String>", "signature": "Iterator<String> getNames(@NotNull String relPath)", "full_signature": "@NotNull @Override public Iterator<String> getNames(@NotNull String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.getNames(@NotNull String relPath)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(@NotNull String relPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasProperty(@NotNull String relPath)", "full_signature": "@Override public boolean hasProperty(@NotNull String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.hasProperty(@NotNull String relPath)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(@NotNull String relPath)", "modifiers": "@Override public", "return": "Value[]", "signature": "Value[] getProperty(@NotNull String relPath)", "full_signature": "@Override public Value[] getProperty(@NotNull String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.getProperty(@NotNull String relPath)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(@NotNull String relPath, @Nullable Value value)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(@NotNull String relPath, @Nullable Value value)", "full_signature": "@Override public void setProperty(@NotNull String relPath, @Nullable Value value)", "class_method_signature": "AuthorizablePropertiesImpl.setProperty(@NotNull String relPath, @Nullable Value value)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(@NotNull String relPath, @Nullable Value[] values)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(@NotNull String relPath, @Nullable Value[] values)", "full_signature": "@Override public void setProperty(@NotNull String relPath, @Nullable Value[] values)", "class_method_signature": "AuthorizablePropertiesImpl.setProperty(@NotNull String relPath, @Nullable Value[] values)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(@NotNull String relPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeProperty(@NotNull String relPath)", "full_signature": "@Override public boolean removeProperty(@NotNull String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.removeProperty(@NotNull String relPath)", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "()", "modifiers": "@NotNull private", "return": "Tree", "signature": "Tree getTree()", "full_signature": "@NotNull private Tree getTree()", "class_method_signature": "AuthorizablePropertiesImpl.getTree()", "testcase": false, "constructor": false}, {"identifier": "isAuthorizableProperty", "parameters": "(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "modifiers": "private", "return": "boolean", "signature": "boolean isAuthorizableProperty(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "full_signature": "private boolean isAuthorizableProperty(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "class_method_signature": "AuthorizablePropertiesImpl.isAuthorizableProperty(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizableProperty", "parameters": "(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "modifiers": "@Nullable private", "return": "PropertyState", "signature": "PropertyState getAuthorizableProperty(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "full_signature": "@Nullable private PropertyState getAuthorizableProperty(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "class_method_signature": "AuthorizablePropertiesImpl.getAuthorizableProperty(@NotNull Tree authorizableTree, @NotNull TreeLocation propertyLocation, boolean verifyAncestor)", "testcase": false, "constructor": false}, {"identifier": "checkProtectedProperty", "parameters": "(@NotNull Tree parent, @NotNull PropertyState property)", "modifiers": "private", "return": "void", "signature": "void checkProtectedProperty(@NotNull Tree parent, @NotNull PropertyState property)", "full_signature": "private void checkProtectedProperty(@NotNull Tree parent, @NotNull PropertyState property)", "class_method_signature": "AuthorizablePropertiesImpl.checkProtectedProperty(@NotNull Tree parent, @NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateTargetTree", "parameters": "(@Nullable String relPath)", "modifiers": "@NotNull private", "return": "Tree", "signature": "Tree getOrCreateTargetTree(@Nullable String relPath)", "full_signature": "@NotNull private Tree getOrCreateTargetTree(@Nullable String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.getOrCreateTargetTree(@Nullable String relPath)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(@NotNull Tree tree, @NotNull String relativePath)", "modifiers": "@NotNull private static", "return": "TreeLocation", "signature": "TreeLocation getLocation(@NotNull Tree tree, @NotNull String relativePath)", "full_signature": "@NotNull private static TreeLocation getLocation(@NotNull Tree tree, @NotNull String relativePath)", "class_method_signature": "AuthorizablePropertiesImpl.getLocation(@NotNull Tree tree, @NotNull String relativePath)", "testcase": false, "constructor": false}, {"identifier": "getOakPath", "parameters": "(@NotNull String relPath)", "modifiers": "@NotNull private", "return": "String", "signature": "String getOakPath(@NotNull String relPath)", "full_signature": "@NotNull private String getOakPath(@NotNull String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.getOakPath(@NotNull String relPath)", "testcase": false, "constructor": false}, {"identifier": "checkScope", "parameters": "(@NotNull String userPath, @NotNull String targetPath, @NotNull String relPath)", "modifiers": "private static", "return": "void", "signature": "void checkScope(@NotNull String userPath, @NotNull String targetPath, @NotNull String relPath)", "full_signature": "private static void checkScope(@NotNull String userPath, @NotNull String targetPath, @NotNull String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.checkScope(@NotNull String userPath, @NotNull String targetPath, @NotNull String relPath)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/AuthorizablePropertiesImpl.java"}, "focal_method": {"identifier": "getNames", "parameters": "(@NotNull String relPath)", "modifiers": "@NotNull @Override public", "return": "Iterator<String>", "body": "@NotNull\n    @Override\n    public Iterator<String> getNames(@NotNull String relPath) throws RepositoryException {\n        String oakPath = getOakPath(relPath);\n        Tree tree = getTree();\n        TreeLocation location = getLocation(tree, oakPath);\n        Tree parent = location.getTree();\n        if (parent != null && Text.isDescendantOrEqual(tree.getPath(), parent.getPath())) {\n            List<String> l = new ArrayList<>();\n            for (PropertyState property : parent.getProperties()) {\n                String propName = property.getName();\n                if (isAuthorizableProperty(tree, location.getChild(propName), false)) {\n                    l.add(valueFactory.getNamePathMapper().getJcrName(propName));\n                }\n            }\n            return l.iterator();\n        } else {\n            throw new RepositoryException(\"Relative path \" + relPath + \" refers to non-existing tree or tree outside of scope of authorizable.\");\n        }\n    }", "signature": "Iterator<String> getNames(@NotNull String relPath)", "full_signature": "@NotNull @Override public Iterator<String> getNames(@NotNull String relPath)", "class_method_signature": "AuthorizablePropertiesImpl.getNames(@NotNull String relPath)", "testcase": false, "constructor": false, "invocations": ["getOakPath", "getTree", "getLocation", "getTree", "isDescendantOrEqual", "getPath", "getPath", "getProperties", "getName", "isAuthorizableProperty", "getChild", "add", "getJcrName", "getNamePathMapper", "iterator"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}