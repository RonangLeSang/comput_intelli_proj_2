{"test_class": {"identifier": "AbstractBlobStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected GarbageCollectableBlobStore store;", "modifier": "protected", "type": "GarbageCollectableBlobStore", "declarator": "store", "var_name": "store"}], "file": "oak-blob/src/test/java/org/apache/jackrabbit/oak/spi/blob/AbstractBlobStoreTest.java"}, "test_case": {"identifier": "testIllegalIdentifier3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIllegalIdentifier3() throws Exception {\n        if (store instanceof AbstractBlobStore) {\n            try {\n                ((AbstractBlobStore) store).mark(\"ff\");\n                fail();\n            } catch (Exception e) {\n                // expected\n            }\n        }\n    }", "signature": "void testIllegalIdentifier3()", "full_signature": "@Test public void testIllegalIdentifier3()", "class_method_signature": "AbstractBlobStoreTest.testIllegalIdentifier3()", "testcase": true, "constructor": false, "invocations": ["mark", "fail"]}, "focal_class": {"identifier": "AbstractBlobStore", "superclass": "", "interfaces": "implements GarbageCollectableBlobStore,\n        Cache.Backend<AbstractBlobStore.BlockId, AbstractBlobStore.Data>", "fields": [{"original_string": "protected static final String HASH_ALGORITHM = \"SHA-256\";", "modifier": "protected static final", "type": "String", "declarator": "HASH_ALGORITHM = \"SHA-256\"", "var_name": "HASH_ALGORITHM"}, {"original_string": "protected static final int TYPE_DATA = 0;", "modifier": "protected static final", "type": "int", "declarator": "TYPE_DATA = 0", "var_name": "TYPE_DATA"}, {"original_string": "protected static final int TYPE_HASH = 1;", "modifier": "protected static final", "type": "int", "declarator": "TYPE_HASH = 1", "var_name": "TYPE_HASH"}, {"original_string": "protected static final int BLOCK_SIZE_LIMIT = 48;", "modifier": "protected static final", "type": "int", "declarator": "BLOCK_SIZE_LIMIT = 48", "var_name": "BLOCK_SIZE_LIMIT"}, {"original_string": "protected Map<String, WeakReference<String>> inUse =\n        Collections.synchronizedMap(new WeakHashMap<String, WeakReference<String>>());", "modifier": "protected", "type": "Map<String, WeakReference<String>>", "declarator": "inUse =\n        Collections.synchronizedMap(new WeakHashMap<String, WeakReference<String>>())", "var_name": "inUse"}, {"original_string": "private int blockSizeMin = 4096;", "modifier": "private", "type": "int", "declarator": "blockSizeMin = 4096", "var_name": "blockSizeMin"}, {"original_string": "private int blockSize = 2 * 1024 * 1024;", "modifier": "private", "type": "int", "declarator": "blockSize = 2 * 1024 * 1024", "var_name": "blockSize"}, {"original_string": "private AtomicReference<byte[]> blockBuffer = new AtomicReference<byte[]>();", "modifier": "private", "type": "AtomicReference<byte[]>", "declarator": "blockBuffer = new AtomicReference<byte[]>()", "var_name": "blockBuffer"}, {"original_string": "private static final String ALGORITHM = \"HmacSHA1\";", "modifier": "private static final", "type": "String", "declarator": "ALGORITHM = \"HmacSHA1\"", "var_name": "ALGORITHM"}, {"original_string": "private byte[] referenceKey;", "modifier": "private", "type": "byte[]", "declarator": "referenceKey", "var_name": "referenceKey"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private BlobStatsCollector statsCollector = BlobStatsCollector.NOOP;", "modifier": "private", "type": "BlobStatsCollector", "declarator": "statsCollector = BlobStatsCollector.NOOP", "var_name": "statsCollector"}], "methods": [{"identifier": "setBlockSizeMin", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void setBlockSizeMin(int x)", "full_signature": "public void setBlockSizeMin(int x)", "class_method_signature": "AbstractBlobStore.setBlockSizeMin(int x)", "testcase": false, "constructor": false}, {"identifier": "getBlockSizeMin", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBlockSizeMin()", "full_signature": "@Override public long getBlockSizeMin()", "class_method_signature": "AbstractBlobStore.getBlockSizeMin()", "testcase": false, "constructor": false}, {"identifier": "setBlockSize", "parameters": "(int x)", "modifiers": "@Override public", "return": "void", "signature": "void setBlockSize(int x)", "full_signature": "@Override public void setBlockSize(int x)", "class_method_signature": "AbstractBlobStore.setBlockSize(int x)", "testcase": false, "constructor": false}, {"identifier": "setStatsCollector", "parameters": "(BlobStatsCollector stats)", "modifiers": "public", "return": "void", "signature": "void setStatsCollector(BlobStatsCollector stats)", "full_signature": "public void setStatsCollector(BlobStatsCollector stats)", "class_method_signature": "AbstractBlobStore.setStatsCollector(BlobStatsCollector stats)", "testcase": false, "constructor": false}, {"identifier": "getStatsCollector", "parameters": "()", "modifiers": "protected", "return": "BlobStatsCollector", "signature": "BlobStatsCollector getStatsCollector()", "full_signature": "protected BlobStatsCollector getStatsCollector()", "class_method_signature": "AbstractBlobStore.getStatsCollector()", "testcase": false, "constructor": false}, {"identifier": "validateBlockSize", "parameters": "(int x)", "modifiers": "private static", "return": "void", "signature": "void validateBlockSize(int x)", "full_signature": "private static void validateBlockSize(int x)", "class_method_signature": "AbstractBlobStore.validateBlockSize(int x)", "testcase": false, "constructor": false}, {"identifier": "getBlockSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBlockSize()", "full_signature": "public int getBlockSize()", "class_method_signature": "AbstractBlobStore.getBlockSize()", "testcase": false, "constructor": false}, {"identifier": "writeBlob", "parameters": "(String tempFilePath)", "modifiers": "@Override public", "return": "String", "signature": "String writeBlob(String tempFilePath)", "full_signature": "@Override public String writeBlob(String tempFilePath)", "class_method_signature": "AbstractBlobStore.writeBlob(String tempFilePath)", "testcase": false, "constructor": false}, {"identifier": "writeBlob", "parameters": "(InputStream in)", "modifiers": "@Override public", "return": "String", "signature": "String writeBlob(InputStream in)", "full_signature": "@Override public String writeBlob(InputStream in)", "class_method_signature": "AbstractBlobStore.writeBlob(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "writeBlob", "parameters": "(InputStream in, BlobOptions options)", "modifiers": "@Override public", "return": "String", "signature": "String writeBlob(InputStream in, BlobOptions options)", "full_signature": "@Override public String writeBlob(InputStream in, BlobOptions options)", "class_method_signature": "AbstractBlobStore.writeBlob(InputStream in, BlobOptions options)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(String blobId)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(String blobId)", "full_signature": "@Override public InputStream getInputStream(String blobId)", "class_method_signature": "AbstractBlobStore.getInputStream(String blobId)", "testcase": false, "constructor": false}, {"identifier": "getReference", "parameters": "(@NotNull String blobId)", "modifiers": "@Override public", "return": "String", "signature": "String getReference(@NotNull String blobId)", "full_signature": "@Override public String getReference(@NotNull String blobId)", "class_method_signature": "AbstractBlobStore.getReference(@NotNull String blobId)", "testcase": false, "constructor": false}, {"identifier": "getBlobId", "parameters": "(@NotNull String reference)", "modifiers": "@Override public", "return": "String", "signature": "String getBlobId(@NotNull String reference)", "full_signature": "@Override public String getBlobId(@NotNull String reference)", "class_method_signature": "AbstractBlobStore.getBlobId(@NotNull String reference)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateReferenceKey", "parameters": "()", "modifiers": "protected", "return": "byte[]", "signature": "byte[] getOrCreateReferenceKey()", "full_signature": "protected byte[] getOrCreateReferenceKey()", "class_method_signature": "AbstractBlobStore.getOrCreateReferenceKey()", "testcase": false, "constructor": false}, {"identifier": "getReferenceKey", "parameters": "()", "modifiers": "private synchronized", "return": "byte[]", "signature": "byte[] getReferenceKey()", "full_signature": "private synchronized byte[] getReferenceKey()", "class_method_signature": "AbstractBlobStore.getReferenceKey()", "testcase": false, "constructor": false}, {"identifier": "setReferenceKey", "parameters": "(byte[] referenceKey)", "modifiers": "public", "return": "void", "signature": "void setReferenceKey(byte[] referenceKey)", "full_signature": "public void setReferenceKey(byte[] referenceKey)", "class_method_signature": "AbstractBlobStore.setReferenceKey(byte[] referenceKey)", "testcase": false, "constructor": false}, {"identifier": "setReferenceKeyEncoded", "parameters": "(String encodedKey)", "modifiers": "public", "return": "void", "signature": "void setReferenceKeyEncoded(String encodedKey)", "full_signature": "public void setReferenceKeyEncoded(String encodedKey)", "class_method_signature": "AbstractBlobStore.setReferenceKeyEncoded(String encodedKey)", "testcase": false, "constructor": false}, {"identifier": "setReferenceKeyPlainText", "parameters": "(String textKey)", "modifiers": "public", "return": "void", "signature": "void setReferenceKeyPlainText(String textKey)", "full_signature": "public void setReferenceKeyPlainText(String textKey)", "class_method_signature": "AbstractBlobStore.setReferenceKeyPlainText(String textKey)", "testcase": false, "constructor": false}, {"identifier": "usesBlobId", "parameters": "(String blobId)", "modifiers": "protected", "return": "void", "signature": "void usesBlobId(String blobId)", "full_signature": "protected void usesBlobId(String blobId)", "class_method_signature": "AbstractBlobStore.usesBlobId(String blobId)", "testcase": false, "constructor": false}, {"identifier": "clearInUse", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearInUse()", "full_signature": "@Override public void clearInUse()", "class_method_signature": "AbstractBlobStore.clearInUse()", "testcase": false, "constructor": false}, {"identifier": "convertBlobToId", "parameters": "(InputStream in,\n            ByteArrayOutputStream idStream, int level, long totalLength)", "modifiers": "private", "return": "void", "signature": "void convertBlobToId(InputStream in,\n            ByteArrayOutputStream idStream, int level, long totalLength)", "full_signature": "private void convertBlobToId(InputStream in,\n            ByteArrayOutputStream idStream, int level, long totalLength)", "class_method_signature": "AbstractBlobStore.convertBlobToId(InputStream in,\n            ByteArrayOutputStream idStream, int level, long totalLength)", "testcase": false, "constructor": false}, {"identifier": "storeBlock", "parameters": "(byte[] digest, int level, byte[] data)", "modifiers": "protected abstract", "return": "void", "signature": "void storeBlock(byte[] digest, int level, byte[] data)", "full_signature": "protected abstract void storeBlock(byte[] digest, int level, byte[] data)", "class_method_signature": "AbstractBlobStore.storeBlock(byte[] digest, int level, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "startMark", "parameters": "()", "modifiers": "@Override public abstract", "return": "void", "signature": "void startMark()", "full_signature": "@Override public abstract void startMark()", "class_method_signature": "AbstractBlobStore.startMark()", "testcase": false, "constructor": false}, {"identifier": "sweep", "parameters": "()", "modifiers": "@Override public abstract", "return": "int", "signature": "int sweep()", "full_signature": "@Override public abstract int sweep()", "class_method_signature": "AbstractBlobStore.sweep()", "testcase": false, "constructor": false}, {"identifier": "isMarkEnabled", "parameters": "()", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean isMarkEnabled()", "full_signature": "protected abstract boolean isMarkEnabled()", "class_method_signature": "AbstractBlobStore.isMarkEnabled()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(BlockId id)", "modifiers": "protected abstract", "return": "void", "signature": "void mark(BlockId id)", "full_signature": "protected abstract void mark(BlockId id)", "class_method_signature": "AbstractBlobStore.mark(BlockId id)", "testcase": false, "constructor": false}, {"identifier": "markInUse", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void markInUse()", "full_signature": "protected void markInUse()", "class_method_signature": "AbstractBlobStore.markInUse()", "testcase": false, "constructor": false}, {"identifier": "readBlob", "parameters": "(String blobId, long pos, byte[] buff, int off,\n            int length)", "modifiers": "@Override public", "return": "int", "signature": "int readBlob(String blobId, long pos, byte[] buff, int off,\n            int length)", "full_signature": "@Override public int readBlob(String blobId, long pos, byte[] buff, int off,\n            int length)", "class_method_signature": "AbstractBlobStore.readBlob(String blobId, long pos, byte[] buff, int off,\n            int length)", "testcase": false, "constructor": false}, {"identifier": "readBlock", "parameters": "(byte[] digest, long pos)", "modifiers": "", "return": "byte[]", "signature": "byte[] readBlock(byte[] digest, long pos)", "full_signature": " byte[] readBlock(byte[] digest, long pos)", "class_method_signature": "AbstractBlobStore.readBlock(byte[] digest, long pos)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(BlockId id)", "modifiers": "@Override public", "return": "Data", "signature": "Data load(BlockId id)", "full_signature": "@Override public Data load(BlockId id)", "class_method_signature": "AbstractBlobStore.load(BlockId id)", "testcase": false, "constructor": false}, {"identifier": "readBlockFromBackend", "parameters": "(BlockId id)", "modifiers": "protected abstract", "return": "byte[]", "signature": "byte[] readBlockFromBackend(BlockId id)", "full_signature": "protected abstract byte[] readBlockFromBackend(BlockId id)", "class_method_signature": "AbstractBlobStore.readBlockFromBackend(BlockId id)", "testcase": false, "constructor": false}, {"identifier": "getBlobLength", "parameters": "(String blobId)", "modifiers": "@Override public", "return": "long", "signature": "long getBlobLength(String blobId)", "full_signature": "@Override public long getBlobLength(String blobId)", "class_method_signature": "AbstractBlobStore.getBlobLength(String blobId)", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(String blobId)", "modifiers": "protected", "return": "void", "signature": "void mark(String blobId)", "full_signature": "protected void mark(String blobId)", "class_method_signature": "AbstractBlobStore.mark(String blobId)", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(ByteArrayInputStream idStream)", "modifiers": "private", "return": "void", "signature": "void mark(ByteArrayInputStream idStream)", "full_signature": "private void mark(ByteArrayInputStream idStream)", "class_method_signature": "AbstractBlobStore.mark(ByteArrayInputStream idStream)", "testcase": false, "constructor": false}, {"identifier": "resolveChunks", "parameters": "(String blobId)", "modifiers": "@Override public", "return": "Iterator<String>", "signature": "Iterator<String> resolveChunks(String blobId)", "full_signature": "@Override public Iterator<String> resolveChunks(String blobId)", "class_method_signature": "AbstractBlobStore.resolveChunks(String blobId)", "testcase": false, "constructor": false}, {"identifier": "deleteChunks", "parameters": "(List<String> chunkIds, long maxLastModifiedTime)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteChunks(List<String> chunkIds, long maxLastModifiedTime)", "full_signature": "@Override public boolean deleteChunks(List<String> chunkIds, long maxLastModifiedTime)", "class_method_signature": "AbstractBlobStore.deleteChunks(List<String> chunkIds, long maxLastModifiedTime)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AbstractBlobStore.close()", "testcase": false, "constructor": false}], "file": "oak-blob/src/main/java/org/apache/jackrabbit/oak/spi/blob/AbstractBlobStore.java"}, "focal_method": {"identifier": "mark", "parameters": "(BlockId id)", "modifiers": "protected abstract", "return": "void", "body": "protected abstract void mark(BlockId id) throws Exception;", "signature": "void mark(BlockId id)", "full_signature": "protected abstract void mark(BlockId id)", "class_method_signature": "AbstractBlobStore.mark(BlockId id)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}