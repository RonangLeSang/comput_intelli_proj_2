{"test_class": {"identifier": "RecoveryLockTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DocumentStore store = new MemoryDocumentStore();", "modifier": "private", "type": "DocumentStore", "declarator": "store = new MemoryDocumentStore()", "var_name": "store"}, {"original_string": "private Clock clock = new Clock.Virtual();", "modifier": "private", "type": "Clock", "declarator": "clock = new Clock.Virtual()", "var_name": "clock"}, {"original_string": "private ExecutorService executor = Executors.newCachedThreadPool();", "modifier": "private", "type": "ExecutorService", "declarator": "executor = Executors.newCachedThreadPool()", "var_name": "executor"}, {"original_string": "private RecoveryLock lock1 = new RecoveryLock(store, clock, 1);", "modifier": "private", "type": "RecoveryLock", "declarator": "lock1 = new RecoveryLock(store, clock, 1)", "var_name": "lock1"}, {"original_string": "private RecoveryLock lock2 = new RecoveryLock(store, clock, 2);", "modifier": "private", "type": "RecoveryLock", "declarator": "lock2 = new RecoveryLock(store, clock, 2)", "var_name": "lock2"}, {"original_string": "private ClusterNodeInfo info1;", "modifier": "private", "type": "ClusterNodeInfo", "declarator": "info1", "var_name": "info1"}, {"original_string": "private ClusterNodeInfo info2;", "modifier": "private", "type": "ClusterNodeInfo", "declarator": "info2", "var_name": "info2"}], "file": "oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/RecoveryLockTest.java"}, "test_case": {"identifier": "acquireAfterLeaseEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void acquireAfterLeaseEnd() throws Exception {\n        clock.waitUntil(info1.getLeaseEndTime() + DEFAULT_LEASE_UPDATE_INTERVAL_MILLIS);\n        assertTrue(lock1.acquireRecoveryLock(2));\n        ClusterNodeInfoDocument c = infoDocument(1);\n        assertTrue(c.isActive());\n        assertTrue(c.isBeingRecovered());\n        assertEquals(Long.valueOf(2), c.getRecoveryBy());\n        assertNotNull(c.get(ClusterNodeInfo.LEASE_END_KEY));\n    }", "signature": "void acquireAfterLeaseEnd()", "full_signature": "@Test public void acquireAfterLeaseEnd()", "class_method_signature": "RecoveryLockTest.acquireAfterLeaseEnd()", "testcase": true, "constructor": false, "invocations": ["waitUntil", "getLeaseEndTime", "assertTrue", "acquireRecoveryLock", "infoDocument", "assertTrue", "isActive", "assertTrue", "isBeingRecovered", "assertEquals", "valueOf", "getRecoveryBy", "assertNotNull", "get"]}, "focal_class": {"identifier": "RecoveryLock", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RecoveryLock.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RecoveryLock.class)", "var_name": "LOG"}, {"original_string": "private final DocumentStore store;", "modifier": "private final", "type": "DocumentStore", "declarator": "store", "var_name": "store"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final int clusterId;", "modifier": "private final", "type": "int", "declarator": "clusterId", "var_name": "clusterId"}], "methods": [{"identifier": "RecoveryLock", "parameters": "(DocumentStore store, Clock clock, int clusterId)", "modifiers": "", "return": "", "signature": " RecoveryLock(DocumentStore store, Clock clock, int clusterId)", "full_signature": "  RecoveryLock(DocumentStore store, Clock clock, int clusterId)", "class_method_signature": "RecoveryLock.RecoveryLock(DocumentStore store, Clock clock, int clusterId)", "testcase": false, "constructor": true}, {"identifier": "acquireRecoveryLock", "parameters": "(int recoveredBy)", "modifiers": "", "return": "boolean", "signature": "boolean acquireRecoveryLock(int recoveredBy)", "full_signature": " boolean acquireRecoveryLock(int recoveredBy)", "class_method_signature": "RecoveryLock.acquireRecoveryLock(int recoveredBy)", "testcase": false, "constructor": false}, {"identifier": "releaseRecoveryLock", "parameters": "(boolean success)", "modifiers": "", "return": "void", "signature": "void releaseRecoveryLock(boolean success)", "full_signature": " void releaseRecoveryLock(boolean success)", "class_method_signature": "RecoveryLock.releaseRecoveryLock(boolean success)", "testcase": false, "constructor": false}, {"identifier": "tryAcquireRecoveryLock", "parameters": "(ClusterNodeInfoDocument info,\n                                           int recoveredBy)", "modifiers": "private", "return": "boolean", "signature": "boolean tryAcquireRecoveryLock(ClusterNodeInfoDocument info,\n                                           int recoveredBy)", "full_signature": "private boolean tryAcquireRecoveryLock(ClusterNodeInfoDocument info,\n                                           int recoveredBy)", "class_method_signature": "RecoveryLock.tryAcquireRecoveryLock(ClusterNodeInfoDocument info,\n                                           int recoveredBy)", "testcase": false, "constructor": false}, {"identifier": "tryBreakRecoveryLock", "parameters": "(ClusterNodeInfoDocument doc,\n                                         int recoveredBy)", "modifiers": "private", "return": "boolean", "signature": "boolean tryBreakRecoveryLock(ClusterNodeInfoDocument doc,\n                                         int recoveredBy)", "full_signature": "private boolean tryBreakRecoveryLock(ClusterNodeInfoDocument doc,\n                                         int recoveredBy)", "class_method_signature": "RecoveryLock.tryBreakRecoveryLock(ClusterNodeInfoDocument doc,\n                                         int recoveredBy)", "testcase": false, "constructor": false}], "file": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/RecoveryLock.java"}, "focal_method": {"identifier": "acquireRecoveryLock", "parameters": "(int recoveredBy)", "modifiers": "", "return": "boolean", "body": "boolean acquireRecoveryLock(int recoveredBy) {\n        ClusterNodeInfoDocument doc = store.find(CLUSTER_NODES, String.valueOf(clusterId));\n        if (doc == null) {\n            // this is unexpected...\n            return false;\n        }\n        if (!doc.isRecoveryNeeded(clock.getTime())) {\n            return false;\n        }\n        if (tryAcquireRecoveryLock(doc, recoveredBy)) {\n            return true;\n        }\n        // either we already own the lock or were able to break the lock\n        return doc.isBeingRecoveredBy(recoveredBy)\n                || tryBreakRecoveryLock(doc, recoveredBy);\n    }", "signature": "boolean acquireRecoveryLock(int recoveredBy)", "full_signature": " boolean acquireRecoveryLock(int recoveredBy)", "class_method_signature": "RecoveryLock.acquireRecoveryLock(int recoveredBy)", "testcase": false, "constructor": false, "invocations": ["find", "valueOf", "isRecoveryNeeded", "getTime", "tryAcquireRecoveryLock", "isBeingRecoveredBy", "tryBreakRecoveryLock"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}