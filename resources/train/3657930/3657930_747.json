{"test_class": {"identifier": "UserImplTest", "superclass": "extends AbstractAutoSaveTest", "interfaces": "", "fields": [{"original_string": "private User dlg;", "modifier": "private", "type": "User", "declarator": "dlg", "var_name": "dlg"}, {"original_string": "private UserImpl user;", "modifier": "private", "type": "UserImpl", "declarator": "user", "var_name": "user"}, {"original_string": "private Impersonation impersonationMock = mock(Impersonation.class);", "modifier": "private", "type": "Impersonation", "declarator": "impersonationMock = mock(Impersonation.class)", "var_name": "impersonationMock"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/autosave/UserImplTest.java"}, "test_case": {"identifier": "testIsSystemUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSystemUser() throws Exception {\n        assertEquals(dlg.isSystemUser(), user.isSystemUser());\n        verify(dlg, times(2)).isSystemUser();\n        verify(autosaveMgr, never()).autosave();\n    }", "signature": "void testIsSystemUser()", "full_signature": "@Test public void testIsSystemUser()", "class_method_signature": "UserImplTest.testIsSystemUser()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isSystemUser", "isSystemUser", "isSystemUser", "verify", "times", "autosave", "verify", "never"]}, "focal_class": {"identifier": "UserImpl", "superclass": "extends AuthorizableImpl", "interfaces": "implements User", "fields": [], "methods": [{"identifier": "UserImpl", "parameters": "(User dlg, AutoSaveEnabledManager mgr)", "modifiers": "", "return": "", "signature": " UserImpl(User dlg, AutoSaveEnabledManager mgr)", "full_signature": "  UserImpl(User dlg, AutoSaveEnabledManager mgr)", "class_method_signature": "UserImpl.UserImpl(User dlg, AutoSaveEnabledManager mgr)", "testcase": false, "constructor": true}, {"identifier": "getDelegate", "parameters": "()", "modifiers": "private", "return": "User", "signature": "User getDelegate()", "full_signature": "private User getDelegate()", "class_method_signature": "UserImpl.getDelegate()", "testcase": false, "constructor": false}, {"identifier": "isAdmin", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAdmin()", "full_signature": "@Override public boolean isAdmin()", "class_method_signature": "UserImpl.isAdmin()", "testcase": false, "constructor": false}, {"identifier": "isSystemUser", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSystemUser()", "full_signature": "@Override public boolean isSystemUser()", "class_method_signature": "UserImpl.isSystemUser()", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Credentials", "signature": "Credentials getCredentials()", "full_signature": "@NotNull @Override public Credentials getCredentials()", "class_method_signature": "UserImpl.getCredentials()", "testcase": false, "constructor": false}, {"identifier": "getImpersonation", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Impersonation", "signature": "Impersonation getImpersonation()", "full_signature": "@NotNull @Override public Impersonation getImpersonation()", "class_method_signature": "UserImpl.getImpersonation()", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(@Nullable String pw)", "modifiers": "@Override public", "return": "void", "signature": "void changePassword(@Nullable String pw)", "full_signature": "@Override public void changePassword(@Nullable String pw)", "class_method_signature": "UserImpl.changePassword(@Nullable String pw)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(@Nullable String pw, @NotNull String oldPw)", "modifiers": "@Override public", "return": "void", "signature": "void changePassword(@Nullable String pw, @NotNull String oldPw)", "full_signature": "@Override public void changePassword(@Nullable String pw, @NotNull String oldPw)", "class_method_signature": "UserImpl.changePassword(@Nullable String pw, @NotNull String oldPw)", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "(@Nullable String msg)", "modifiers": "@Override public", "return": "void", "signature": "void disable(@Nullable String msg)", "full_signature": "@Override public void disable(@Nullable String msg)", "class_method_signature": "UserImpl.disable(@Nullable String msg)", "testcase": false, "constructor": false}, {"identifier": "isDisabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisabled()", "full_signature": "@Override public boolean isDisabled()", "class_method_signature": "UserImpl.isDisabled()", "testcase": false, "constructor": false}, {"identifier": "getDisabledReason", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getDisabledReason()", "full_signature": "@Nullable @Override public String getDisabledReason()", "class_method_signature": "UserImpl.getDisabledReason()", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/autosave/UserImpl.java"}, "focal_method": {"identifier": "isSystemUser", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isSystemUser() {\n        return getDelegate().isSystemUser();\n    }", "signature": "boolean isSystemUser()", "full_signature": "@Override public boolean isSystemUser()", "class_method_signature": "UserImpl.isSystemUser()", "testcase": false, "constructor": false, "invocations": ["isSystemUser", "getDelegate"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}