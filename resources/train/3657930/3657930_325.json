{"test_class": {"identifier": "UniquenessConstraintValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NodeState root = INITIAL_CONTENT;", "modifier": "private", "type": "NodeState", "declarator": "root = INITIAL_CONTENT", "var_name": "root"}, {"original_string": "private NodeBuilder builder = EMPTY_NODE.builder();", "modifier": "private", "type": "NodeBuilder", "declarator": "builder = EMPTY_NODE.builder()", "var_name": "builder"}, {"original_string": "private LuceneIndexDefinitionBuilder defnb = new LuceneIndexDefinitionBuilder();", "modifier": "private", "type": "LuceneIndexDefinitionBuilder", "declarator": "defnb = new LuceneIndexDefinitionBuilder()", "var_name": "defnb"}, {"original_string": "private String indexPath  = \"/oak:index/foo\";", "modifier": "private", "type": "String", "declarator": "indexPath  = \"/oak:index/foo\"", "var_name": "indexPath"}], "file": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/property/UniquenessConstraintValidatorTest.java"}, "test_case": {"identifier": "secondStore_NodeExist_PropertyNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void secondStore_NodeExist_PropertyNotExist() throws Exception{\n        defnb.indexRule(\"nt:base\").property(\"foo\").unique();\n\n        NodeBuilder rootBuilder = root.builder();\n        rootBuilder.child(\"b\");\n        root = rootBuilder.getNodeState();\n\n        PropertyIndexUpdateCallback callback = newCallback();\n        propertyUpdated(callback, \"/a\", \"foo\", \"bar\");\n\n        callback.getUniquenessConstraintValidator()\n                .setSecondStore((propertyRelativePath, value) -> singletonList(\"/b\"));\n\n        callback.done();\n    }", "signature": "void secondStore_NodeExist_PropertyNotExist()", "full_signature": "@Test public void secondStore_NodeExist_PropertyNotExist()", "class_method_signature": "UniquenessConstraintValidatorTest.secondStore_NodeExist_PropertyNotExist()", "testcase": true, "constructor": false, "invocations": ["unique", "property", "indexRule", "builder", "child", "getNodeState", "newCallback", "propertyUpdated", "setSecondStore", "getUniquenessConstraintValidator", "singletonList", "done"]}, "focal_class": {"identifier": "UniquenessConstraintValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final NodeState rootState;", "modifier": "private final", "type": "NodeState", "declarator": "rootState", "var_name": "rootState"}, {"original_string": "private final String indexPath;", "modifier": "private final", "type": "String", "declarator": "indexPath", "var_name": "indexPath"}, {"original_string": "private final Multimap<String, String> uniqueKeys = HashMultimap.create();", "modifier": "private final", "type": "Multimap<String, String>", "declarator": "uniqueKeys = HashMultimap.create()", "var_name": "uniqueKeys"}, {"original_string": "private final PropertyQuery firstStore;", "modifier": "private final", "type": "PropertyQuery", "declarator": "firstStore", "var_name": "firstStore"}, {"original_string": "private PropertyQuery secondStore = PropertyQuery.DEFAULT;", "modifier": "private", "type": "PropertyQuery", "declarator": "secondStore = PropertyQuery.DEFAULT", "var_name": "secondStore"}], "methods": [{"identifier": "UniquenessConstraintValidator", "parameters": "(String indexPath, NodeBuilder builder, NodeState rootState)", "modifiers": "public", "return": "", "signature": " UniquenessConstraintValidator(String indexPath, NodeBuilder builder, NodeState rootState)", "full_signature": "public  UniquenessConstraintValidator(String indexPath, NodeBuilder builder, NodeState rootState)", "class_method_signature": "UniquenessConstraintValidator.UniquenessConstraintValidator(String indexPath, NodeBuilder builder, NodeState rootState)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(String propertyRelativePath, Set<String> afterKeys)", "modifiers": "public", "return": "void", "signature": "void add(String propertyRelativePath, Set<String> afterKeys)", "full_signature": "public void add(String propertyRelativePath, Set<String> afterKeys)", "class_method_signature": "UniquenessConstraintValidator.add(String propertyRelativePath, Set<String> afterKeys)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "UniquenessConstraintValidator.validate()", "testcase": false, "constructor": false}, {"identifier": "setSecondStore", "parameters": "(PropertyQuery secondStore)", "modifiers": "public", "return": "void", "signature": "void setSecondStore(PropertyQuery secondStore)", "full_signature": "public void setSecondStore(PropertyQuery secondStore)", "class_method_signature": "UniquenessConstraintValidator.setSecondStore(PropertyQuery secondStore)", "testcase": false, "constructor": false}, {"identifier": "getIndexedPaths", "parameters": "(String propertyRelativePath, String value)", "modifiers": "private", "return": "Iterable<String>", "signature": "Iterable<String> getIndexedPaths(String propertyRelativePath, String value)", "full_signature": "private Iterable<String> getIndexedPaths(String propertyRelativePath, String value)", "class_method_signature": "UniquenessConstraintValidator.getIndexedPaths(String propertyRelativePath, String value)", "testcase": false, "constructor": false}, {"identifier": "getValidPaths", "parameters": "(Set<String> allPaths, String propertyRelativePath, String value)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getValidPaths(Set<String> allPaths, String propertyRelativePath, String value)", "full_signature": "private Set<String> getValidPaths(Set<String> allPaths, String propertyRelativePath, String value)", "class_method_signature": "UniquenessConstraintValidator.getValidPaths(Set<String> allPaths, String propertyRelativePath, String value)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(NodeState node, String propertyRelativePath)", "modifiers": "private static", "return": "PropertyState", "signature": "PropertyState getValue(NodeState node, String propertyRelativePath)", "full_signature": "private static PropertyState getValue(NodeState node, String propertyRelativePath)", "class_method_signature": "UniquenessConstraintValidator.getValue(NodeState node, String propertyRelativePath)", "testcase": false, "constructor": false}], "file": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/property/UniquenessConstraintValidator.java"}, "focal_method": {"identifier": "setSecondStore", "parameters": "(PropertyQuery secondStore)", "modifiers": "public", "return": "void", "body": "public void setSecondStore(PropertyQuery secondStore) {\n        this.secondStore = checkNotNull(secondStore);\n    }", "signature": "void setSecondStore(PropertyQuery secondStore)", "full_signature": "public void setSecondStore(PropertyQuery secondStore)", "class_method_signature": "UniquenessConstraintValidator.setSecondStore(PropertyQuery secondStore)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}