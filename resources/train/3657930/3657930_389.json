{"test_class": {"identifier": "IndexSanityCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Random rnd = new Random();", "modifier": "private", "type": "Random", "declarator": "rnd = new Random()", "var_name": "rnd"}, {"original_string": "private Directory local = new RAMDirectory();", "modifier": "private", "type": "Directory", "declarator": "local = new RAMDirectory()", "var_name": "local"}, {"original_string": "private Directory remote = new RAMDirectory();", "modifier": "private", "type": "Directory", "declarator": "remote = new RAMDirectory()", "var_name": "remote"}], "file": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/directory/IndexSanityCheckerTest.java"}, "test_case": {"identifier": "validDirs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validDirs() throws Exception{\n        byte[] t1 = writeFile(local, \"t1\", 100);\n        writeFile(remote, \"t1\", t1);\n\n        assertTrue(new IndexSanityChecker(\"/foo\", local, remote).check());\n\n        assertTrue(local.fileExists(\"t1\"));\n        assertTrue(remote.fileExists(\"t1\"));\n    }", "signature": "void validDirs()", "full_signature": "@Test public void validDirs()", "class_method_signature": "IndexSanityCheckerTest.validDirs()", "testcase": true, "constructor": false, "invocations": ["writeFile", "writeFile", "assertTrue", "check", "assertTrue", "fileExists", "assertTrue", "fileExists"]}, "focal_class": {"identifier": "IndexSanityChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private final Directory local;", "modifier": "private final", "type": "Directory", "declarator": "local", "var_name": "local"}, {"original_string": "private final Directory remote;", "modifier": "private final", "type": "Directory", "declarator": "remote", "var_name": "remote"}, {"original_string": "private final String indexPath;", "modifier": "private final", "type": "String", "declarator": "indexPath", "var_name": "indexPath"}, {"original_string": "private int localFileCount;", "modifier": "private", "type": "int", "declarator": "localFileCount", "var_name": "localFileCount"}, {"original_string": "private int remoteFileCount;", "modifier": "private", "type": "int", "declarator": "remoteFileCount", "var_name": "remoteFileCount"}, {"original_string": "private long localDirSize;", "modifier": "private", "type": "long", "declarator": "localDirSize", "var_name": "localDirSize"}, {"original_string": "private long remoteDirSize;", "modifier": "private", "type": "long", "declarator": "remoteDirSize", "var_name": "remoteDirSize"}], "methods": [{"identifier": "IndexSanityChecker", "parameters": "(String indexPath, Directory local, Directory remote)", "modifiers": "public", "return": "", "signature": " IndexSanityChecker(String indexPath, Directory local, Directory remote)", "full_signature": "public  IndexSanityChecker(String indexPath, Directory local, Directory remote)", "class_method_signature": "IndexSanityChecker.IndexSanityChecker(String indexPath, Directory local, Directory remote)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean check()", "full_signature": "public boolean check()", "class_method_signature": "IndexSanityChecker.check()", "testcase": false, "constructor": false}, {"identifier": "isThereASizeMismatch", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isThereASizeMismatch()", "full_signature": "private boolean isThereASizeMismatch()", "class_method_signature": "IndexSanityChecker.isThereASizeMismatch()", "testcase": false, "constructor": false}, {"identifier": "deleteAllFiles", "parameters": "(Directory dir)", "modifiers": "private static", "return": "void", "signature": "void deleteAllFiles(Directory dir)", "full_signature": "private static void deleteAllFiles(Directory dir)", "class_method_signature": "IndexSanityChecker.deleteAllFiles(Directory dir)", "testcase": false, "constructor": false}], "file": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/directory/IndexSanityChecker.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean check() throws IOException {\n        boolean allFine = true;\n        //TODO Add support for checksum based checks\n        if (isThereASizeMismatch()){\n            //In case of any mismatch just purge all local files\n            deleteAllFiles(local);\n            allFine = false;\n        } else {\n            //Remove local files which are not found in remote\n            for (String fileName : local.listAll()) {\n                if (!remote.fileExists(fileName)) {\n                    local.deleteFile(fileName);\n                }\n            }\n        }\n\n        if (allFine) {\n            log.info(\"Local index directory content found to be valid for index [{}]. \" +\n                    \"Stats Local: {} files ({}), Remote: {} files ({})\", indexPath,\n                    localFileCount, IOUtils.humanReadableByteCount(localDirSize),\n                    remoteFileCount, IOUtils.humanReadableByteCount(remoteDirSize));\n        } else {\n            log.warn(\"Local index directory content were not found to be in sync with remote for index [{}]. \" +\n                    \"Local directory content has been purged and would be synced again from remote\", indexPath);\n        }\n        return allFine;\n    }", "signature": "boolean check()", "full_signature": "public boolean check()", "class_method_signature": "IndexSanityChecker.check()", "testcase": false, "constructor": false, "invocations": ["isThereASizeMismatch", "deleteAllFiles", "listAll", "fileExists", "deleteFile", "info", "humanReadableByteCount", "humanReadableByteCount", "warn"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}