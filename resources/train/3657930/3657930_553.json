{"test_class": {"identifier": "XPathConditionVisitorTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private static final Map<String, String> LOCAL = ImmutableMap.of(\"rcj\", \"http://www.jcp.org/jcr/1.0\");", "modifier": "private static final", "type": "Map<String, String>", "declarator": "LOCAL = ImmutableMap.of(\"rcj\", \"http://www.jcp.org/jcr/1.0\")", "var_name": "LOCAL"}, {"original_string": "private static final String REL_PATH = \"r'e/l/path\";", "modifier": "private static final", "type": "String", "declarator": "REL_PATH = \"r'e/l/path\"", "var_name": "REL_PATH"}, {"original_string": "private static final String SERACH_EXPR = \"s%e\\\\%arch\\\\E[:]xpr\";", "modifier": "private static final", "type": "String", "declarator": "SERACH_EXPR = \"s%e\\\\%arch\\\\E[:]xpr\"", "var_name": "SERACH_EXPR"}, {"original_string": "private StringBuilder statement;", "modifier": "private", "type": "StringBuilder", "declarator": "statement", "var_name": "statement"}, {"original_string": "private XPathConditionVisitor visitor;", "modifier": "private", "type": "XPathConditionVisitor", "declarator": "visitor", "var_name": "visitor"}, {"original_string": "private Condition.Contains testCondition;", "modifier": "private", "type": "Condition.Contains", "declarator": "testCondition", "var_name": "testCondition"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/query/XPathConditionVisitorTest.java"}, "test_case": {"identifier": "testVisitOrSingle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVisitOrSingle() throws Exception {\n        Condition.Or c = new Condition.Or(testCondition, testCondition);\n        reduceCompoundConditionToSingleTerm(c);\n        visitor.visit(c);\n\n        String s = statement.toString();\n        assertFalse(s.contains(\" or \"));\n        assertFalse(s.startsWith(\"(\"));\n        assertFalse(s.endsWith(\"))\"));\n    }", "signature": "void testVisitOrSingle()", "full_signature": "@Test public void testVisitOrSingle()", "class_method_signature": "XPathConditionVisitorTest.testVisitOrSingle()", "testcase": true, "constructor": false, "invocations": ["reduceCompoundConditionToSingleTerm", "visit", "toString", "assertFalse", "contains", "assertFalse", "startsWith", "assertFalse", "endsWith"]}, "focal_class": {"identifier": "XPathConditionVisitor", "superclass": "", "interfaces": "implements ConditionVisitor", "fields": [{"original_string": "private final StringBuilder statement;", "modifier": "private final", "type": "StringBuilder", "declarator": "statement", "var_name": "statement"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private final UserManager userMgr;", "modifier": "private final", "type": "UserManager", "declarator": "userMgr", "var_name": "userMgr"}], "methods": [{"identifier": "XPathConditionVisitor", "parameters": "(@NotNull StringBuilder statement, @NotNull NamePathMapper namePathMapper,\n                          @NotNull UserManager userMgr)", "modifiers": "", "return": "", "signature": " XPathConditionVisitor(@NotNull StringBuilder statement, @NotNull NamePathMapper namePathMapper,\n                          @NotNull UserManager userMgr)", "full_signature": "  XPathConditionVisitor(@NotNull StringBuilder statement, @NotNull NamePathMapper namePathMapper,\n                          @NotNull UserManager userMgr)", "class_method_signature": "XPathConditionVisitor.XPathConditionVisitor(@NotNull StringBuilder statement, @NotNull NamePathMapper namePathMapper,\n                          @NotNull UserManager userMgr)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(@NotNull Condition.Node condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(@NotNull Condition.Node condition)", "full_signature": "@Override public void visit(@NotNull Condition.Node condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.Node condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(@NotNull Condition.PropertyValue condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(@NotNull Condition.PropertyValue condition)", "full_signature": "@Override public void visit(@NotNull Condition.PropertyValue condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.PropertyValue condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Condition.@NotNull PropertyLike condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(Condition.@NotNull PropertyLike condition)", "full_signature": "@Override public void visit(Condition.@NotNull PropertyLike condition)", "class_method_signature": "XPathConditionVisitor.visit(Condition.@NotNull PropertyLike condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Condition.@NotNull PropertyExists condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(Condition.@NotNull PropertyExists condition)", "full_signature": "@Override public void visit(Condition.@NotNull PropertyExists condition)", "class_method_signature": "XPathConditionVisitor.visit(Condition.@NotNull PropertyExists condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(@NotNull Condition.Contains condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(@NotNull Condition.Contains condition)", "full_signature": "@Override public void visit(@NotNull Condition.Contains condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.Contains condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(@NotNull Condition.Impersonation condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(@NotNull Condition.Impersonation condition)", "full_signature": "@Override public void visit(@NotNull Condition.Impersonation condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.Impersonation condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(@NotNull Condition.Not condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(@NotNull Condition.Not condition)", "full_signature": "@Override public void visit(@NotNull Condition.Not condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.Not condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(@NotNull Condition.And condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(@NotNull Condition.And condition)", "full_signature": "@Override public void visit(@NotNull Condition.And condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.And condition)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(@NotNull Condition.Or condition)", "modifiers": "@Override public", "return": "void", "signature": "void visit(@NotNull Condition.Or condition)", "full_signature": "@Override public void visit(@NotNull Condition.Or condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.Or condition)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/query/XPathConditionVisitor.java"}, "focal_method": {"identifier": "visit", "parameters": "(@NotNull Condition.Node condition)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void visit(@NotNull Condition.Node condition) {\n        statement.append('(')\n                .append(\"jcr:like(@\")\n                .append(QueryUtil.escapeForQuery(UserConstants.REP_AUTHORIZABLE_ID, namePathMapper))\n                .append(\",'\")\n                .append(QueryUtil.escapeForQuery(condition.getPattern()))\n                .append(\"')\")\n                .append(\" or \")\n                .append(\"jcr:like(@\")\n                .append(QueryUtil.escapeForQuery(UserConstants.REP_PRINCIPAL_NAME, namePathMapper))\n                .append(\",'\")\n                .append(QueryUtil.escapeForQuery(condition.getPattern()))\n                .append(\"')\")\n                .append(\" or \")\n                .append(\"jcr:like(fn:name(),'\")\n                .append(QueryUtil.escapeForQuery(QueryUtil.escapeNodeName(condition.getPattern())))\n                .append(\"')\")\n                .append(')');\n    }", "signature": "void visit(@NotNull Condition.Node condition)", "full_signature": "@Override public void visit(@NotNull Condition.Node condition)", "class_method_signature": "XPathConditionVisitor.visit(@NotNull Condition.Node condition)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "escapeForQuery", "escapeForQuery", "getPattern", "escapeForQuery", "escapeForQuery", "getPattern", "escapeForQuery", "escapeNodeName", "getPattern"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}