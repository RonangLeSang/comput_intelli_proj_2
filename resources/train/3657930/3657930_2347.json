{"test_class": {"identifier": "PrefetchIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-jcr/src/test/java/org/apache/jackrabbit/oak/jcr/query/PrefetchIteratorTest.java"}, "test_case": {"identifier": "testTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTimeout() {\n        Iterable<Integer> s;\n        PrefetchIterator<Integer> it;\n        \n        // long delay (10 ms per row)\n        final long testTimeout = 10;\n        s = seq(0, 100, 10);\n        it = new PrefetchIterator<Integer>(s.iterator(), \n                new PrefetchOptions() { {\n                    min = 5;\n                    timeout = testTimeout;\n                    max = 10;\n                    size = -1;\n                } });\n        assertEquals(-1, it.size());\n\n        // no delay\n        s = seq(0, 100);\n        it = new PrefetchIterator<Integer>(s.iterator(), \n                new PrefetchOptions() { {\n                    min = 5;\n                    timeout = testTimeout;\n                    max = 1000;\n                    size = -1;\n                } });\n        assertEquals(100, it.size());\n    }", "signature": "void testTimeout()", "full_signature": "@Test public void testTimeout()", "class_method_signature": "PrefetchIteratorTest.testTimeout()", "testcase": true, "constructor": false, "invocations": ["seq", "iterator", "assertEquals", "size", "seq", "iterator", "assertEquals", "size"]}, "focal_class": {"identifier": "PrefetchIterator", "superclass": "", "interfaces": "implements Iterator<K>", "fields": [{"original_string": "private final Iterator<K> it;", "modifier": "private final", "type": "Iterator<K>", "declarator": "it", "var_name": "it"}, {"original_string": "private final long minPrefetch, timeout, maxPrefetch;", "modifier": "private final", "type": "long", "declarator": "minPrefetch", "var_name": "minPrefetch"}, {"original_string": "private final boolean fastSize;", "modifier": "private final", "type": "boolean", "declarator": "fastSize", "var_name": "fastSize"}, {"original_string": "private final Result fastSizeCallback;", "modifier": "private final", "type": "Result", "declarator": "fastSizeCallback", "var_name": "fastSizeCallback"}, {"original_string": "private boolean prefetchDone;", "modifier": "private", "type": "boolean", "declarator": "prefetchDone", "var_name": "prefetchDone"}, {"original_string": "private Iterator<K> prefetchIterator;", "modifier": "private", "type": "Iterator<K>", "declarator": "prefetchIterator", "var_name": "prefetchIterator"}, {"original_string": "private long size, position;", "modifier": "private", "type": "long", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "PrefetchIterator", "parameters": "(Iterator<K> it, PrefetchOptions options)", "modifiers": "", "return": "", "signature": " PrefetchIterator(Iterator<K> it, PrefetchOptions options)", "full_signature": "  PrefetchIterator(Iterator<K> it, PrefetchOptions options)", "class_method_signature": "PrefetchIterator.PrefetchIterator(Iterator<K> it, PrefetchOptions options)", "testcase": false, "constructor": true}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "PrefetchIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "K", "signature": "K next()", "full_signature": "@Override public K next()", "class_method_signature": "PrefetchIterator.next()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "PrefetchIterator.remove()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long size()", "full_signature": "public long size()", "class_method_signature": "PrefetchIterator.size()", "testcase": false, "constructor": false}], "file": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/query/PrefetchIterator.java"}, "focal_method": {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long size() {\n        if (size != -1) {\n            return size;\n        }\n        if (!fastSize) {\n            if (prefetchDone || position > maxPrefetch) {\n                return -1;\n            }\n        }\n        prefetchDone = true;\n        ArrayList<K> list = new ArrayList<K>();\n        long end;\n        if (timeout <= 0) {\n            end = 0;\n        } else {\n            long nanos = System.nanoTime();\n            end = nanos + timeout * 1000 * 1000;\n        }\n        while (true) {\n            if (!it.hasNext()) {\n                size = position;\n                break;\n            }\n            if (position > maxPrefetch) {\n                break;\n            }\n            if (position > minPrefetch) {\n                if (end == 0 || System.nanoTime() > end) {\n                    break;\n                }\n            }\n            position++;\n            list.add(it.next());\n        }\n        if (list.size() > 0) {\n            prefetchIterator = list.iterator();\n            position -= list.size();\n        }\n        if (size == -1 && fastSize) {\n            if (fastSizeCallback != null) {\n                size = fastSizeCallback.getSize(SizePrecision.EXACT, Long.MAX_VALUE);\n            }\n        }\n        return size;\n    }", "signature": "long size()", "full_signature": "public long size()", "class_method_signature": "PrefetchIterator.size()", "testcase": false, "constructor": false, "invocations": ["nanoTime", "hasNext", "nanoTime", "add", "next", "size", "iterator", "size", "getSize"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}