{"test_class": {"identifier": "AndImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/query/ast/AndImplTest.java"}, "test_case": {"identifier": "simplifyForUnion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simplifyForUnion() {\n        ConstraintImpl and, op1, op2, op3, op4;\n        Set<ConstraintImpl> expected;\n        \n        op1 = mock(ComparisonImpl.class);\n        op2 = mock(ComparisonImpl.class);\n        and = new AndImpl(op1, op2);\n        expected = emptySet();\n        assertThat(and.convertToUnion(), is(expected));\n\n        op1 = mockConstraint(\"op1\", ComparisonImpl.class);\n        op2 = mockConstraint(\"op2\", ComparisonImpl.class);\n        op3 = mockConstraint(\"op3\", ComparisonImpl.class);\n        and = new AndImpl(new OrImpl(op1, op2), op3);\n        expected = of(\n            (ConstraintImpl) new AndImpl(op1, op3)\n            , (ConstraintImpl) new AndImpl(op2, op3)\n        );\n        assertThat(and.convertToUnion(), is(expected));\n\n        op1 = mockConstraint(\"op1\", ComparisonImpl.class);\n        op2 = mockConstraint(\"op2\", ComparisonImpl.class);\n        op3 = mockConstraint(\"op3\", ComparisonImpl.class);\n        op4 = mockConstraint(\"op4\", ComparisonImpl.class);\n        and = new AndImpl(new OrImpl(new OrImpl(op1, op4), op2), op3);\n        expected = of(\n            (ConstraintImpl) new AndImpl(op1, op3)\n            , (ConstraintImpl) new AndImpl(op2, op3)\n            , (ConstraintImpl) new AndImpl(op4, op3)\n        );\n        assertThat(and.convertToUnion(), is(expected));\n}", "signature": "void simplifyForUnion()", "full_signature": "@Test public void simplifyForUnion()", "class_method_signature": "AndImplTest.simplifyForUnion()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "emptySet", "assertThat", "convertToUnion", "is", "mockConstraint", "mockConstraint", "mockConstraint", "of", "assertThat", "convertToUnion", "is", "mockConstraint", "mockConstraint", "mockConstraint", "mockConstraint", "of", "assertThat", "convertToUnion", "is"]}, "focal_class": {"identifier": "AndImpl", "superclass": "extends ConstraintImpl", "interfaces": "", "fields": [{"original_string": "private final List<ConstraintImpl> constraints;", "modifier": "private final", "type": "List<ConstraintImpl>", "declarator": "constraints", "var_name": "constraints"}], "methods": [{"identifier": "AndImpl", "parameters": "(List<ConstraintImpl> constraints)", "modifiers": "public", "return": "", "signature": " AndImpl(List<ConstraintImpl> constraints)", "full_signature": "public  AndImpl(List<ConstraintImpl> constraints)", "class_method_signature": "AndImpl.AndImpl(List<ConstraintImpl> constraints)", "testcase": false, "constructor": true}, {"identifier": "AndImpl", "parameters": "(ConstraintImpl constraint1, ConstraintImpl constraint2)", "modifiers": "public", "return": "", "signature": " AndImpl(ConstraintImpl constraint1, ConstraintImpl constraint2)", "full_signature": "public  AndImpl(ConstraintImpl constraint1, ConstraintImpl constraint2)", "class_method_signature": "AndImpl.AndImpl(ConstraintImpl constraint1, ConstraintImpl constraint2)", "testcase": false, "constructor": true}, {"identifier": "getConstraints", "parameters": "()", "modifiers": "public", "return": "List<ConstraintImpl>", "signature": "List<ConstraintImpl> getConstraints()", "full_signature": "public List<ConstraintImpl> getConstraints()", "class_method_signature": "AndImpl.getConstraints()", "testcase": false, "constructor": false}, {"identifier": "simplify", "parameters": "()", "modifiers": "@Override public", "return": "ConstraintImpl", "signature": "ConstraintImpl simplify()", "full_signature": "@Override public ConstraintImpl simplify()", "class_method_signature": "AndImpl.simplify()", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "()", "modifiers": "@Override", "return": "ConstraintImpl", "signature": "ConstraintImpl not()", "full_signature": "@Override ConstraintImpl not()", "class_method_signature": "AndImpl.not()", "testcase": false, "constructor": false}, {"identifier": "getPropertyExistenceConditions", "parameters": "()", "modifiers": "@Override public", "return": "Set<PropertyExistenceImpl>", "signature": "Set<PropertyExistenceImpl> getPropertyExistenceConditions()", "full_signature": "@Override public Set<PropertyExistenceImpl> getPropertyExistenceConditions()", "class_method_signature": "AndImpl.getPropertyExistenceConditions()", "testcase": false, "constructor": false}, {"identifier": "getFullTextConstraint", "parameters": "(SelectorImpl s)", "modifiers": "@Override public", "return": "FullTextExpression", "signature": "FullTextExpression getFullTextConstraint(SelectorImpl s)", "full_signature": "@Override public FullTextExpression getFullTextConstraint(SelectorImpl s)", "class_method_signature": "AndImpl.getFullTextConstraint(SelectorImpl s)", "testcase": false, "constructor": false}, {"identifier": "getSelectors", "parameters": "()", "modifiers": "@Override public", "return": "Set<SelectorImpl>", "signature": "Set<SelectorImpl> getSelectors()", "full_signature": "@Override public Set<SelectorImpl> getSelectors()", "class_method_signature": "AndImpl.getSelectors()", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluate()", "full_signature": "@Override public boolean evaluate()", "class_method_signature": "AndImpl.evaluate()", "testcase": false, "constructor": false}, {"identifier": "evaluateStop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluateStop()", "full_signature": "@Override public boolean evaluateStop()", "class_method_signature": "AndImpl.evaluateStop()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(AstVisitor v)", "modifiers": "@Override", "return": "boolean", "signature": "boolean accept(AstVisitor v)", "full_signature": "@Override boolean accept(AstVisitor v)", "class_method_signature": "AndImpl.accept(AstVisitor v)", "testcase": false, "constructor": false}, {"identifier": "restrict", "parameters": "(FilterImpl f)", "modifiers": "@Override public", "return": "void", "signature": "void restrict(FilterImpl f)", "full_signature": "@Override public void restrict(FilterImpl f)", "class_method_signature": "AndImpl.restrict(FilterImpl f)", "testcase": false, "constructor": false}, {"identifier": "restrictPushDown", "parameters": "(SelectorImpl s)", "modifiers": "@Override public", "return": "void", "signature": "void restrictPushDown(SelectorImpl s)", "full_signature": "@Override public void restrictPushDown(SelectorImpl s)", "class_method_signature": "AndImpl.restrictPushDown(SelectorImpl s)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AndImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object that)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object that)", "full_signature": "@Override public boolean equals(Object that)", "class_method_signature": "AndImpl.equals(Object that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AndImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "()", "modifiers": "@Override public", "return": "AstElement", "signature": "AstElement copyOf()", "full_signature": "@Override public AstElement copyOf()", "class_method_signature": "AndImpl.copyOf()", "testcase": false, "constructor": false}, {"identifier": "addToUnionList", "parameters": "(Set<ConstraintImpl> target)", "modifiers": "public", "return": "void", "signature": "void addToUnionList(Set<ConstraintImpl> target)", "full_signature": "public void addToUnionList(Set<ConstraintImpl> target)", "class_method_signature": "AndImpl.addToUnionList(Set<ConstraintImpl> target)", "testcase": false, "constructor": false}, {"identifier": "getFirstConstraints", "parameters": "()", "modifiers": "private", "return": "ArrayList<ConstraintImpl>", "signature": "ArrayList<ConstraintImpl> getFirstConstraints()", "full_signature": "private ArrayList<ConstraintImpl> getFirstConstraints()", "class_method_signature": "AndImpl.getFirstConstraints()", "testcase": false, "constructor": false}, {"identifier": "getLastConstraint", "parameters": "()", "modifiers": "private", "return": "ConstraintImpl", "signature": "ConstraintImpl getLastConstraint()", "full_signature": "private ConstraintImpl getLastConstraint()", "class_method_signature": "AndImpl.getLastConstraint()", "testcase": false, "constructor": false}, {"identifier": "pullOrRight", "parameters": "()", "modifiers": "public", "return": "AndImpl", "signature": "AndImpl pullOrRight()", "full_signature": "public AndImpl pullOrRight()", "class_method_signature": "AndImpl.pullOrRight()", "testcase": false, "constructor": false}, {"identifier": "getAllAndConditions", "parameters": "()", "modifiers": "private", "return": "ArrayList<ConstraintImpl>", "signature": "ArrayList<ConstraintImpl> getAllAndConditions()", "full_signature": "private ArrayList<ConstraintImpl> getAllAndConditions()", "class_method_signature": "AndImpl.getAllAndConditions()", "testcase": false, "constructor": false}, {"identifier": "convertToUnion", "parameters": "()", "modifiers": "@Override public", "return": "Set<ConstraintImpl>", "signature": "Set<ConstraintImpl> convertToUnion()", "full_signature": "@Override public Set<ConstraintImpl> convertToUnion()", "class_method_signature": "AndImpl.convertToUnion()", "testcase": false, "constructor": false}, {"identifier": "requiresFullTextIndex", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean requiresFullTextIndex()", "full_signature": "@Override public boolean requiresFullTextIndex()", "class_method_signature": "AndImpl.requiresFullTextIndex()", "testcase": false, "constructor": false}, {"identifier": "containsUnfilteredFullTextCondition", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsUnfilteredFullTextCondition()", "full_signature": "@Override public boolean containsUnfilteredFullTextCondition()", "class_method_signature": "AndImpl.containsUnfilteredFullTextCondition()", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/AndImpl.java"}, "focal_method": {"identifier": "convertToUnion", "parameters": "()", "modifiers": "@Override public", "return": "Set<ConstraintImpl>", "body": "@Override\n    public Set<ConstraintImpl> convertToUnion() {\n        // use linked hash sets where needed, so that the order of queries\n        // within the UNION is always the same (independent of the JVM\n        // implementation)\n        Set<ConstraintImpl> union = Sets.newLinkedHashSet();\n        Set<ConstraintImpl> result = Sets.newLinkedHashSet();\n        Set<ConstraintImpl> nonUnion = Sets.newHashSet();\n        \n        for (ConstraintImpl c : constraints) {\n            Set<ConstraintImpl> converted = c.convertToUnion();\n            if (converted.isEmpty()) {\n                nonUnion.add(c);\n            } else {\n                union.addAll(converted);\n                if (union.size() > QueryImpl.MAX_UNION) {\n                    throw QueryImpl.TOO_MANY_UNION;\n                }\n            }\n        }\n        if (!union.isEmpty() && nonUnion.size() == 1) {\n            // this is the simplest case where, for example, out of the two AND operands at least\n            // one is a non-union. For example WHERE (a OR b OR c) AND d\n            ConstraintImpl right = nonUnion.iterator().next();\n            for (ConstraintImpl c : union) {\n                result.add(new AndImpl(c, right));\n            }\n        } else {\n            // This could happen when for\n            // example: WHERE (a OR b) AND (c OR d).\n            // This can be translated into a AND c, a AND d, b AND c, b AND d.\n            if (QueryEngineSettings.SQL2_OPTIMIZATION_2) {\n                Set<ConstraintImpl> set = Sets.newLinkedHashSet();\n                addToUnionList(set);\n                if (set.size() == 1) {\n                    // not a union: same condition as before\n                    return Collections.emptySet();\n                }\n                return set;\n            }\n        }\n        return result;\n    }", "signature": "Set<ConstraintImpl> convertToUnion()", "full_signature": "@Override public Set<ConstraintImpl> convertToUnion()", "class_method_signature": "AndImpl.convertToUnion()", "testcase": false, "constructor": false, "invocations": ["newLinkedHashSet", "newLinkedHashSet", "newHashSet", "convertToUnion", "isEmpty", "add", "addAll", "size", "isEmpty", "size", "next", "iterator", "add", "newLinkedHashSet", "addToUnionList", "size", "emptySet"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}