{"test_class": {"identifier": "NameValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Validator validator = new NameValidator(newNamespaceNode(\"valid\"), false);", "modifier": "private final", "type": "Validator", "declarator": "validator = new NameValidator(newNamespaceNode(\"valid\"), false)", "var_name": "validator"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/name/NameValidatorTest.java"}, "test_case": {"identifier": "testValidName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidName() throws CommitFailedException {\n        validator.childNodeAdded(\"name\", EMPTY_NODE);\n    }", "signature": "void testValidName()", "full_signature": "@Test public void testValidName()", "class_method_signature": "NameValidatorTest.testValidName()", "testcase": true, "constructor": false, "invocations": ["childNodeAdded"]}, "focal_class": {"identifier": "NameValidator", "superclass": "extends DefaultValidator", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NameValidator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NameValidator.class)", "var_name": "LOG"}, {"original_string": "private final NodeState namespaces;", "modifier": "private final", "type": "NodeState", "declarator": "namespaces", "var_name": "namespaces"}, {"original_string": "private final Set<String> prefixes;", "modifier": "private final", "type": "Set<String>", "declarator": "prefixes", "var_name": "prefixes"}, {"original_string": "private final boolean initPhase;", "modifier": "private final", "type": "boolean", "declarator": "initPhase", "var_name": "initPhase"}, {"original_string": "private final boolean strictInitialNSChecks = Boolean.getBoolean(\"oak.strictInitialNSChecks\");", "modifier": "private final", "type": "boolean", "declarator": "strictInitialNSChecks = Boolean.getBoolean(\"oak.strictInitialNSChecks\")", "var_name": "strictInitialNSChecks"}], "methods": [{"identifier": "NameValidator", "parameters": "(NodeState namespaces, boolean initPhase)", "modifiers": "", "return": "", "signature": " NameValidator(NodeState namespaces, boolean initPhase)", "full_signature": "  NameValidator(NodeState namespaces, boolean initPhase)", "class_method_signature": "NameValidator.NameValidator(NodeState namespaces, boolean initPhase)", "testcase": false, "constructor": true}, {"identifier": "getPrintableName", "parameters": "(String s)", "modifiers": "protected static", "return": "String", "signature": "String getPrintableName(String s)", "full_signature": "protected static String getPrintableName(String s)", "class_method_signature": "NameValidator.getPrintableName(String s)", "testcase": false, "constructor": false}, {"identifier": "checkValidName", "parameters": "(String name)", "modifiers": "protected", "return": "void", "signature": "void checkValidName(String name)", "full_signature": "protected void checkValidName(String name)", "class_method_signature": "NameValidator.checkValidName(String name)", "testcase": false, "constructor": false}, {"identifier": "checkPrefix", "parameters": "(String prefix)", "modifiers": "private", "return": "void", "signature": "void checkPrefix(String prefix)", "full_signature": "private void checkPrefix(String prefix)", "class_method_signature": "NameValidator.checkPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Set<String> prefixes, NodeState namespaces, String prefix)", "modifiers": "private static", "return": "boolean", "signature": "boolean contains(Set<String> prefixes, NodeState namespaces, String prefix)", "full_signature": "private static boolean contains(Set<String> prefixes, NodeState namespaces, String prefix)", "class_method_signature": "NameValidator.contains(Set<String> prefixes, NodeState namespaces, String prefix)", "testcase": false, "constructor": false}, {"identifier": "checkValidValue", "parameters": "(PropertyState property)", "modifiers": "protected", "return": "void", "signature": "void checkValidValue(PropertyState property)", "full_signature": "protected void checkValidValue(PropertyState property)", "class_method_signature": "NameValidator.checkValidValue(PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "checkValidValue", "parameters": "(String value)", "modifiers": "protected", "return": "void", "signature": "void checkValidValue(String value)", "full_signature": "protected void checkValidValue(String value)", "class_method_signature": "NameValidator.checkValidValue(String value)", "testcase": false, "constructor": false}, {"identifier": "propertyAdded", "parameters": "(PropertyState after)", "modifiers": "@Override public", "return": "void", "signature": "void propertyAdded(PropertyState after)", "full_signature": "@Override public void propertyAdded(PropertyState after)", "class_method_signature": "NameValidator.propertyAdded(PropertyState after)", "testcase": false, "constructor": false}, {"identifier": "propertyChanged", "parameters": "(PropertyState before, PropertyState after)", "modifiers": "@Override public", "return": "void", "signature": "void propertyChanged(PropertyState before, PropertyState after)", "full_signature": "@Override public void propertyChanged(PropertyState before, PropertyState after)", "class_method_signature": "NameValidator.propertyChanged(PropertyState before, PropertyState after)", "testcase": false, "constructor": false}, {"identifier": "propertyDeleted", "parameters": "(PropertyState before)", "modifiers": "@Override public", "return": "void", "signature": "void propertyDeleted(PropertyState before)", "full_signature": "@Override public void propertyDeleted(PropertyState before)", "class_method_signature": "NameValidator.propertyDeleted(PropertyState before)", "testcase": false, "constructor": false}, {"identifier": "childNodeAdded", "parameters": "(String name, NodeState after)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator childNodeAdded(String name, NodeState after)", "full_signature": "@Override public Validator childNodeAdded(String name, NodeState after)", "class_method_signature": "NameValidator.childNodeAdded(String name, NodeState after)", "testcase": false, "constructor": false}, {"identifier": "childNodeChanged", "parameters": "(\n            String name, NodeState before, NodeState after)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator childNodeChanged(\n            String name, NodeState before, NodeState after)", "full_signature": "@Override public Validator childNodeChanged(\n            String name, NodeState before, NodeState after)", "class_method_signature": "NameValidator.childNodeChanged(\n            String name, NodeState before, NodeState after)", "testcase": false, "constructor": false}, {"identifier": "childNodeDeleted", "parameters": "(String name, NodeState before)", "modifiers": "@Override public", "return": "Validator", "signature": "Validator childNodeDeleted(String name, NodeState before)", "full_signature": "@Override public Validator childNodeDeleted(String name, NodeState before)", "class_method_signature": "NameValidator.childNodeDeleted(String name, NodeState before)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/name/NameValidator.java"}, "focal_method": {"identifier": "childNodeAdded", "parameters": "(String name, NodeState after)", "modifiers": "@Override public", "return": "Validator", "body": "@Override\n    public Validator childNodeAdded(String name, NodeState after)\n            throws CommitFailedException {\n        if (!NodeStateUtils.isHidden(name)) {\n            checkValidName(name);\n        }\n        return this;\n    }", "signature": "Validator childNodeAdded(String name, NodeState after)", "full_signature": "@Override public Validator childNodeAdded(String name, NodeState after)", "class_method_signature": "NameValidator.childNodeAdded(String name, NodeState after)", "testcase": false, "constructor": false, "invocations": ["isHidden", "checkValidName"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}