{"test_class": {"identifier": "NodeStoreBinaryResourceProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final TemporaryFolder temporaryFolder = new TemporaryFolder(new File(\"target\"));", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder(new File(\"target\"))", "var_name": "temporaryFolder"}], "file": "oak-run/src/test/java/org/apache/jackrabbit/oak/plugins/tika/NodeStoreBinaryResourceProviderTest.java"}, "test_case": {"identifier": "countBinaries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void countBinaries() throws Exception {\n        NodeBuilder builder = EMPTY_NODE.builder();\n        createFileNode(builder, \"a\", new IdBlob(\"hello\", null), \"text/plain\");\n        createFileNode(builder, \"b\", new IdBlob(\"hello\", \"id1\"), \"text/plain\");\n\n        createFileNode(builder.child(\"a2\"), \"c\", new IdBlob(\"hello\", \"id2\"), \"text/foo\")\n                .setProperty(JcrConstants.JCR_ENCODING, \"bar\");\n\n        NodeStore store = new MemoryNodeStore(builder.getNodeState());\n        BlobStore blobStore = new MemoryBlobStore();\n        NodeStoreBinaryResourceProvider extractor = new NodeStoreBinaryResourceProvider(store, blobStore);\n\n        assertEquals(2, extractor.getBinaries(\"/\").size());\n        assertEquals(1, extractor.getBinaries(\"/a2\").size());\n\n        BinaryResource bs = extractor.getBinaries(\"/a2\").first().get();\n        assertEquals(\"text/foo\", bs.getMimeType());\n        assertEquals(\"bar\", bs.getEncoding());\n        assertEquals(\"id2\", bs.getBlobId());\n    }", "signature": "void countBinaries()", "full_signature": "@Test public void countBinaries()", "class_method_signature": "NodeStoreBinaryResourceProviderTest.countBinaries()", "testcase": true, "constructor": false, "invocations": ["builder", "createFileNode", "createFileNode", "setProperty", "createFileNode", "child", "getNodeState", "assertEquals", "size", "getBinaries", "assertEquals", "size", "getBinaries", "get", "first", "getBinaries", "assertEquals", "getMimeType", "assertEquals", "getEncoding", "assertEquals", "getBlobId"]}, "focal_class": {"identifier": "NodeStoreBinaryResourceProvider", "superclass": "", "interfaces": "implements BinaryResourceProvider", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(NodeStoreBinaryResourceProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NodeStoreBinaryResourceProvider.class)", "var_name": "log"}, {"original_string": "private final NodeStore nodeStore;", "modifier": "private final", "type": "NodeStore", "declarator": "nodeStore", "var_name": "nodeStore"}, {"original_string": "private final BlobStore blobStore;", "modifier": "private final", "type": "BlobStore", "declarator": "blobStore", "var_name": "blobStore"}], "methods": [{"identifier": "NodeStoreBinaryResourceProvider", "parameters": "(NodeStore nodeStore, BlobStore blobStore)", "modifiers": "public", "return": "", "signature": " NodeStoreBinaryResourceProvider(NodeStore nodeStore, BlobStore blobStore)", "full_signature": "public  NodeStoreBinaryResourceProvider(NodeStore nodeStore, BlobStore blobStore)", "class_method_signature": "NodeStoreBinaryResourceProvider.NodeStoreBinaryResourceProvider(NodeStore nodeStore, BlobStore blobStore)", "testcase": false, "constructor": true}, {"identifier": "getBinaries", "parameters": "(String path)", "modifiers": "public", "return": "FluentIterable<BinaryResource>", "signature": "FluentIterable<BinaryResource> getBinaries(String path)", "full_signature": "public FluentIterable<BinaryResource> getBinaries(String path)", "class_method_signature": "NodeStoreBinaryResourceProvider.getBinaries(String path)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(Tree tree, String name)", "modifiers": "@Nullable private static", "return": "String", "signature": "String getString(Tree tree, String name)", "full_signature": "@Nullable private static String getString(Tree tree, String name)", "class_method_signature": "NodeStoreBinaryResourceProvider.getString(Tree tree, String name)", "testcase": false, "constructor": false}], "file": "oak-run/src/main/java/org/apache/jackrabbit/oak/plugins/tika/NodeStoreBinaryResourceProvider.java"}, "focal_method": {"identifier": "getBinaries", "parameters": "(String path)", "modifiers": "public", "return": "FluentIterable<BinaryResource>", "body": "public FluentIterable<BinaryResource> getBinaries(String path) {\n        return new OakTreeTraverser()\n                .preOrderTraversal(createReadOnlyTree(getNode(nodeStore.getRoot(), path)))\n                .transform(new TreeToBinarySource())\n                .filter(notNull());\n    }", "signature": "FluentIterable<BinaryResource> getBinaries(String path)", "full_signature": "public FluentIterable<BinaryResource> getBinaries(String path)", "class_method_signature": "NodeStoreBinaryResourceProvider.getBinaries(String path)", "testcase": false, "constructor": false, "invocations": ["filter", "transform", "preOrderTraversal", "createReadOnlyTree", "getNode", "getRoot", "notNull"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}