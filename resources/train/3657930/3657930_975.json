{"test_class": {"identifier": "AuthenticationConfigurationImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AuthenticationConfigurationImpl authConfiguration = new AuthenticationConfigurationImpl();", "modifier": "private final", "type": "AuthenticationConfigurationImpl", "declarator": "authConfiguration = new AuthenticationConfigurationImpl()", "var_name": "authConfiguration"}, {"original_string": "private final ContentRepository repo = mock(ContentRepository.class);", "modifier": "private final", "type": "ContentRepository", "declarator": "repo = mock(ContentRepository.class)", "var_name": "repo"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/AuthenticationConfigurationImplTest.java"}, "test_case": {"identifier": "testGetLoginCtxProviderNotInitialized", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testGetLoginCtxProviderNotInitialized() {\n       authConfiguration.getLoginContextProvider(repo);\n    }", "signature": "void testGetLoginCtxProviderNotInitialized()", "full_signature": "@Test(expected = IllegalStateException.class) public void testGetLoginCtxProviderNotInitialized()", "class_method_signature": "AuthenticationConfigurationImplTest.testGetLoginCtxProviderNotInitialized()", "testcase": true, "constructor": false, "invocations": ["getLoginContextProvider"]}, "focal_class": {"identifier": "AuthenticationConfigurationImpl", "superclass": "extends ConfigurationBase", "interfaces": "implements AuthenticationConfiguration, LoginModuleStatsCollector", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AuthenticationConfigurationImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AuthenticationConfigurationImpl.class)", "var_name": "log"}, {"original_string": "private LoginModuleMonitor lmMonitor = LoginModuleMonitor.NOOP;", "modifier": "private", "type": "LoginModuleMonitor", "declarator": "lmMonitor = LoginModuleMonitor.NOOP", "var_name": "lmMonitor"}], "methods": [{"identifier": "AuthenticationConfigurationImpl", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "signature": " AuthenticationConfigurationImpl()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  AuthenticationConfigurationImpl()", "class_method_signature": "AuthenticationConfigurationImpl.AuthenticationConfigurationImpl()", "testcase": false, "constructor": true}, {"identifier": "activate", "parameters": "(Configuration configuration, Map<String, Object> properties)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") @Activate // reference to @Configuration class needed for correct DS xml generation private", "return": "void", "signature": "void activate(Configuration configuration, Map<String, Object> properties)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") @Activate // reference to @Configuration class needed for correct DS xml generation private void activate(Configuration configuration, Map<String, Object> properties)", "class_method_signature": "AuthenticationConfigurationImpl.activate(Configuration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "AuthenticationConfigurationImpl", "parameters": "(SecurityProvider securityProvider)", "modifiers": "public", "return": "", "signature": " AuthenticationConfigurationImpl(SecurityProvider securityProvider)", "full_signature": "public  AuthenticationConfigurationImpl(SecurityProvider securityProvider)", "class_method_signature": "AuthenticationConfigurationImpl.AuthenticationConfigurationImpl(SecurityProvider securityProvider)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "AuthenticationConfigurationImpl.getName()", "testcase": false, "constructor": false}, {"identifier": "getLoginContextProvider", "parameters": "(@NotNull ContentRepository contentRepository)", "modifiers": "@NotNull @Override public", "return": "LoginContextProvider", "signature": "LoginContextProvider getLoginContextProvider(@NotNull ContentRepository contentRepository)", "full_signature": "@NotNull @Override public LoginContextProvider getLoginContextProvider(@NotNull ContentRepository contentRepository)", "class_method_signature": "AuthenticationConfigurationImpl.getLoginContextProvider(@NotNull ContentRepository contentRepository)", "testcase": false, "constructor": false}, {"identifier": "setLoginModuleMonitor", "parameters": "(@NotNull LoginModuleMonitor lmMonitor)", "modifiers": "@Override public", "return": "void", "signature": "void setLoginModuleMonitor(@NotNull LoginModuleMonitor lmMonitor)", "full_signature": "@Override public void setLoginModuleMonitor(@NotNull LoginModuleMonitor lmMonitor)", "class_method_signature": "AuthenticationConfigurationImpl.setLoginModuleMonitor(@NotNull LoginModuleMonitor lmMonitor)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/AuthenticationConfigurationImpl.java"}, "focal_method": {"identifier": "getLoginContextProvider", "parameters": "(@NotNull ContentRepository contentRepository)", "modifiers": "@NotNull @Override public", "return": "LoginContextProvider", "body": "@NotNull\n    @Override\n    public LoginContextProvider getLoginContextProvider(@NotNull ContentRepository contentRepository) {\n        String appName = getParameters().getConfigValue(PARAM_APP_NAME, DEFAULT_APP_NAME);\n        SecurityProvider provider = getSecurityProvider();\n        Whiteboard whiteboard = null;\n        if (provider instanceof WhiteboardAware) {\n            whiteboard = ((WhiteboardAware) provider).getWhiteboard();\n        } else {\n            log.warn(\"Unable to obtain whiteboard from SecurityProvider\");\n        }\n        return new LoginContextProviderImpl(appName, getParameters(), contentRepository, provider, whiteboard, lmMonitor);\n    }", "signature": "LoginContextProvider getLoginContextProvider(@NotNull ContentRepository contentRepository)", "full_signature": "@NotNull @Override public LoginContextProvider getLoginContextProvider(@NotNull ContentRepository contentRepository)", "class_method_signature": "AuthenticationConfigurationImpl.getLoginContextProvider(@NotNull ContentRepository contentRepository)", "testcase": false, "constructor": false, "invocations": ["getConfigValue", "getParameters", "getSecurityProvider", "getWhiteboard", "warn", "getParameters"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}