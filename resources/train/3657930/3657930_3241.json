{"test_class": {"identifier": "CompositeRestrictionProviderTest", "superclass": "", "interfaces": "implements AccessControlConstants", "fields": [{"original_string": "private static final String NAME_LONGS = \"longs\";", "modifier": "private static final", "type": "String", "declarator": "NAME_LONGS = \"longs\"", "var_name": "NAME_LONGS"}, {"original_string": "private static final String NAME_BOOLEAN = \"boolean\";", "modifier": "private static final", "type": "String", "declarator": "NAME_BOOLEAN = \"boolean\"", "var_name": "NAME_BOOLEAN"}, {"original_string": "private static final Restriction GLOB_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(REP_GLOB, \"*\"), false);", "modifier": "private static final", "type": "Restriction", "declarator": "GLOB_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(REP_GLOB, \"*\"), false)", "var_name": "GLOB_RESTRICTION"}, {"original_string": "private static final Restriction NT_PREFIXES_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(REP_PREFIXES, ImmutableList.of(), Type.STRINGS), false);", "modifier": "private static final", "type": "Restriction", "declarator": "NT_PREFIXES_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(REP_PREFIXES, ImmutableList.of(), Type.STRINGS), false)", "var_name": "NT_PREFIXES_RESTRICTION"}, {"original_string": "private static final Restriction MANDATORY_BOOLEAN_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(NAME_BOOLEAN, true, Type.BOOLEAN), true);", "modifier": "private static final", "type": "Restriction", "declarator": "MANDATORY_BOOLEAN_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(NAME_BOOLEAN, true, Type.BOOLEAN), true)", "var_name": "MANDATORY_BOOLEAN_RESTRICTION"}, {"original_string": "private static final Restriction LONGS_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(NAME_LONGS, ImmutableList.of(Long.MAX_VALUE), Type.LONGS), false);", "modifier": "private static final", "type": "Restriction", "declarator": "LONGS_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(NAME_LONGS, ImmutableList.of(Long.MAX_VALUE), Type.LONGS), false)", "var_name": "LONGS_RESTRICTION"}, {"original_string": "private static final Restriction UNKNOWN_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(\"unknown\", \"string\"), false);", "modifier": "private static final", "type": "Restriction", "declarator": "UNKNOWN_RESTRICTION = new RestrictionImpl(PropertyStates.createProperty(\"unknown\", \"string\"), false)", "var_name": "UNKNOWN_RESTRICTION"}, {"original_string": "private RestrictionProvider rp1 = spy(createRestrictionProvider(GLOB_RESTRICTION.getDefinition(), NT_PREFIXES_RESTRICTION.getDefinition()));", "modifier": "private", "type": "RestrictionProvider", "declarator": "rp1 = spy(createRestrictionProvider(GLOB_RESTRICTION.getDefinition(), NT_PREFIXES_RESTRICTION.getDefinition()))", "var_name": "rp1"}, {"original_string": "private RestrictionProvider rp2 = spy(createRestrictionProvider(MANDATORY_BOOLEAN_RESTRICTION.getDefinition(), LONGS_RESTRICTION.getDefinition()));", "modifier": "private", "type": "RestrictionProvider", "declarator": "rp2 = spy(createRestrictionProvider(MANDATORY_BOOLEAN_RESTRICTION.getDefinition(), LONGS_RESTRICTION.getDefinition()))", "var_name": "rp2"}, {"original_string": "private Set<String> supported = ImmutableSet.of(\n            MANDATORY_BOOLEAN_RESTRICTION.getDefinition().getName(),\n            LONGS_RESTRICTION.getDefinition().getName(),\n            REP_PREFIXES,\n            REP_GLOB);", "modifier": "private", "type": "Set<String>", "declarator": "supported = ImmutableSet.of(\n            MANDATORY_BOOLEAN_RESTRICTION.getDefinition().getName(),\n            LONGS_RESTRICTION.getDefinition().getName(),\n            REP_PREFIXES,\n            REP_GLOB)", "var_name": "supported"}, {"original_string": "private RestrictionProvider provider = CompositeRestrictionProvider.newInstance(rp1, rp2);", "modifier": "private", "type": "RestrictionProvider", "declarator": "provider = CompositeRestrictionProvider.newInstance(rp1, rp2)", "var_name": "provider"}, {"original_string": "private ValueFactory vf = new ValueFactoryImpl(mock(Root.class), NamePathMapper.DEFAULT);", "modifier": "private", "type": "ValueFactory", "declarator": "vf = new ValueFactoryImpl(mock(Root.class), NamePathMapper.DEFAULT)", "var_name": "vf"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/restriction/CompositeRestrictionProviderTest.java"}, "test_case": {"identifier": "testSingle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSingle() {\n        assertSame(rp1, CompositeRestrictionProvider.newInstance(Collections.singleton(rp1)));\n    }", "signature": "void testSingle()", "full_signature": "@Test public void testSingle()", "class_method_signature": "CompositeRestrictionProviderTest.testSingle()", "testcase": true, "constructor": false, "invocations": ["assertSame", "newInstance", "singleton"]}, "focal_class": {"identifier": "CompositeRestrictionProvider", "superclass": "", "interfaces": "implements RestrictionProvider", "fields": [{"original_string": "private final RestrictionProvider[] providers;", "modifier": "private final", "type": "RestrictionProvider[]", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "CompositeRestrictionProvider", "parameters": "(@NotNull Collection<? extends RestrictionProvider> providers)", "modifiers": "private", "return": "", "signature": " CompositeRestrictionProvider(@NotNull Collection<? extends RestrictionProvider> providers)", "full_signature": "private  CompositeRestrictionProvider(@NotNull Collection<? extends RestrictionProvider> providers)", "class_method_signature": "CompositeRestrictionProvider.CompositeRestrictionProvider(@NotNull Collection<? extends RestrictionProvider> providers)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(@NotNull RestrictionProvider... providers)", "modifiers": "public static", "return": "RestrictionProvider", "signature": "RestrictionProvider newInstance(@NotNull RestrictionProvider... providers)", "full_signature": "public static RestrictionProvider newInstance(@NotNull RestrictionProvider... providers)", "class_method_signature": "CompositeRestrictionProvider.newInstance(@NotNull RestrictionProvider... providers)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(@NotNull Collection<? extends RestrictionProvider> providers)", "modifiers": "public static", "return": "RestrictionProvider", "signature": "RestrictionProvider newInstance(@NotNull Collection<? extends RestrictionProvider> providers)", "full_signature": "public static RestrictionProvider newInstance(@NotNull Collection<? extends RestrictionProvider> providers)", "class_method_signature": "CompositeRestrictionProvider.newInstance(@NotNull Collection<? extends RestrictionProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "getSupportedRestrictions", "parameters": "(@Nullable String oakPath)", "modifiers": "@NotNull @Override public", "return": "Set<RestrictionDefinition>", "signature": "Set<RestrictionDefinition> getSupportedRestrictions(@Nullable String oakPath)", "full_signature": "@NotNull @Override public Set<RestrictionDefinition> getSupportedRestrictions(@Nullable String oakPath)", "class_method_signature": "CompositeRestrictionProvider.getSupportedRestrictions(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "createRestriction", "parameters": "(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "modifiers": "@NotNull @Override public", "return": "Restriction", "signature": "Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "full_signature": "@NotNull @Override public Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "class_method_signature": "CompositeRestrictionProvider.createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value value)", "testcase": false, "constructor": false}, {"identifier": "createRestriction", "parameters": "(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "modifiers": "@NotNull @Override public", "return": "Restriction", "signature": "Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "full_signature": "@NotNull @Override public Restriction createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "class_method_signature": "CompositeRestrictionProvider.createRestriction(@Nullable String oakPath, @NotNull String oakName, @NotNull Value... values)", "testcase": false, "constructor": false}, {"identifier": "readRestrictions", "parameters": "(@Nullable String oakPath, @NotNull Tree aceTree)", "modifiers": "@NotNull @Override public", "return": "Set<Restriction>", "signature": "Set<Restriction> readRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "full_signature": "@NotNull @Override public Set<Restriction> readRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "class_method_signature": "CompositeRestrictionProvider.readRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "writeRestrictions", "parameters": "(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "modifiers": "@Override public", "return": "void", "signature": "void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "full_signature": "@Override public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "class_method_signature": "CompositeRestrictionProvider.writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "validateRestrictions", "parameters": "(@Nullable String oakPath, @NotNull Tree aceTree)", "modifiers": "@Override public", "return": "void", "signature": "void validateRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "full_signature": "@Override public void validateRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "class_method_signature": "CompositeRestrictionProvider.validateRestrictions(@Nullable String oakPath, @NotNull Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(@Nullable String oakPath, @NotNull Tree tree)", "modifiers": "@NotNull @Override public", "return": "RestrictionPattern", "signature": "RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Tree tree)", "full_signature": "@NotNull @Override public RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Tree tree)", "class_method_signature": "CompositeRestrictionProvider.getPattern(@Nullable String oakPath, @NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "modifiers": "@NotNull @Override public", "return": "RestrictionPattern", "signature": "RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "full_signature": "@NotNull @Override public RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "class_method_signature": "CompositeRestrictionProvider.getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "(@Nullable String oakPath, @NotNull String oakName)", "modifiers": "private", "return": "RestrictionProvider", "signature": "RestrictionProvider getProvider(@Nullable String oakPath, @NotNull String oakName)", "full_signature": "private RestrictionProvider getProvider(@Nullable String oakPath, @NotNull String oakName)", "class_method_signature": "CompositeRestrictionProvider.getProvider(@Nullable String oakPath, @NotNull String oakName)", "testcase": false, "constructor": false}, {"identifier": "getSupported", "parameters": "(@Nullable String oakPath)", "modifiers": "private", "return": "Map<String, RestrictionDefinition>", "signature": "Map<String, RestrictionDefinition> getSupported(@Nullable String oakPath)", "full_signature": "private Map<String, RestrictionDefinition> getSupported(@Nullable String oakPath)", "class_method_signature": "CompositeRestrictionProvider.getSupported(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "hasRestrictionProperty", "parameters": "(Tree aceTree, String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasRestrictionProperty(Tree aceTree, String name)", "full_signature": "private static boolean hasRestrictionProperty(Tree aceTree, String name)", "class_method_signature": "CompositeRestrictionProvider.hasRestrictionProperty(Tree aceTree, String name)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(Restriction restriction)", "modifiers": "private static", "return": "String", "signature": "String getName(Restriction restriction)", "full_signature": "private static String getName(Restriction restriction)", "class_method_signature": "CompositeRestrictionProvider.getName(Restriction restriction)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/restriction/CompositeRestrictionProvider.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(@NotNull RestrictionProvider... providers)", "modifiers": "public static", "return": "RestrictionProvider", "body": "public static RestrictionProvider newInstance(@NotNull RestrictionProvider... providers) {\n        return newInstance(Arrays.asList(providers));\n    }", "signature": "RestrictionProvider newInstance(@NotNull RestrictionProvider... providers)", "full_signature": "public static RestrictionProvider newInstance(@NotNull RestrictionProvider... providers)", "class_method_signature": "CompositeRestrictionProvider.newInstance(@NotNull RestrictionProvider... providers)", "testcase": false, "constructor": false, "invocations": ["newInstance", "asList"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}