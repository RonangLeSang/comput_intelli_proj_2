{"test_class": {"identifier": "CompositeTokenProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOKEN = \"t\";", "modifier": "private static final", "type": "String", "declarator": "TOKEN = \"t\"", "var_name": "TOKEN"}, {"original_string": "private static final String USERID = \"userId\";", "modifier": "private static final", "type": "String", "declarator": "USERID = \"userId\"", "var_name": "USERID"}, {"original_string": "private TokenInfo info;", "modifier": "private", "type": "TokenInfo", "declarator": "info", "var_name": "info"}, {"original_string": "private TokenProvider composite;", "modifier": "private", "type": "TokenProvider", "declarator": "composite", "var_name": "composite"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/token/CompositeTokenProviderTest.java"}, "test_case": {"identifier": "testCreateTokenFromCredentials", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateTokenFromCredentials() {\n        assertSame(info, composite.createToken(new SimpleCredentials(USERID, new char[0])));\n        assertNull(composite.createToken(new GuestCredentials()));\n        assertNull(composite.createToken(new Credentials() {\n        }));\n    }", "signature": "void testCreateTokenFromCredentials()", "full_signature": "@Test public void testCreateTokenFromCredentials()", "class_method_signature": "CompositeTokenProviderTest.testCreateTokenFromCredentials()", "testcase": true, "constructor": false, "invocations": ["assertSame", "createToken", "assertNull", "createToken", "assertNull", "createToken"]}, "focal_class": {"identifier": "CompositeTokenProvider", "superclass": "", "interfaces": "implements TokenProvider", "fields": [{"original_string": "private final List<TokenProvider> providers;", "modifier": "private final", "type": "List<TokenProvider>", "declarator": "providers", "var_name": "providers"}, {"original_string": "private static final TokenProvider NULL_PROVIDER = new TokenProvider() {\n        @Override\n        public boolean doCreateToken(@NotNull Credentials credentials) {\n            return false;\n        }\n\n        @Nullable\n        @Override\n        public TokenInfo createToken(@NotNull Credentials credentials) {\n            return null;\n        }\n\n        @Nullable\n        @Override\n        public TokenInfo createToken(@NotNull String userId, @NotNull Map<String, ?> attributes) {\n            return null;\n        }\n\n        @Nullable\n        @Override\n        public TokenInfo getTokenInfo(@NotNull String token) {\n            return null;\n        }\n    };", "modifier": "private static final", "type": "TokenProvider", "declarator": "NULL_PROVIDER = new TokenProvider() {\n        @Override\n        public boolean doCreateToken(@NotNull Credentials credentials) {\n            return false;\n        }\n\n        @Nullable\n        @Override\n        public TokenInfo createToken(@NotNull Credentials credentials) {\n            return null;\n        }\n\n        @Nullable\n        @Override\n        public TokenInfo createToken(@NotNull String userId, @NotNull Map<String, ?> attributes) {\n            return null;\n        }\n\n        @Nullable\n        @Override\n        public TokenInfo getTokenInfo(@NotNull String token) {\n            return null;\n        }\n    }", "var_name": "NULL_PROVIDER"}], "methods": [{"identifier": "CompositeTokenProvider", "parameters": "(@NotNull List<? extends TokenProvider> providers)", "modifiers": "private", "return": "", "signature": " CompositeTokenProvider(@NotNull List<? extends TokenProvider> providers)", "full_signature": "private  CompositeTokenProvider(@NotNull List<? extends TokenProvider> providers)", "class_method_signature": "CompositeTokenProvider.CompositeTokenProvider(@NotNull List<? extends TokenProvider> providers)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(@NotNull TokenProvider... providers)", "modifiers": "@NotNull public static", "return": "TokenProvider", "signature": "TokenProvider newInstance(@NotNull TokenProvider... providers)", "full_signature": "@NotNull public static TokenProvider newInstance(@NotNull TokenProvider... providers)", "class_method_signature": "CompositeTokenProvider.newInstance(@NotNull TokenProvider... providers)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(@NotNull List<? extends TokenProvider> providers)", "modifiers": "@NotNull public static", "return": "TokenProvider", "signature": "TokenProvider newInstance(@NotNull List<? extends TokenProvider> providers)", "full_signature": "@NotNull public static TokenProvider newInstance(@NotNull List<? extends TokenProvider> providers)", "class_method_signature": "CompositeTokenProvider.newInstance(@NotNull List<? extends TokenProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "doCreateToken", "parameters": "(@NotNull Credentials credentials)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean doCreateToken(@NotNull Credentials credentials)", "full_signature": "@Override public boolean doCreateToken(@NotNull Credentials credentials)", "class_method_signature": "CompositeTokenProvider.doCreateToken(@NotNull Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "createToken", "parameters": "(@NotNull Credentials credentials)", "modifiers": "@Nullable @Override public", "return": "TokenInfo", "signature": "TokenInfo createToken(@NotNull Credentials credentials)", "full_signature": "@Nullable @Override public TokenInfo createToken(@NotNull Credentials credentials)", "class_method_signature": "CompositeTokenProvider.createToken(@NotNull Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "createToken", "parameters": "(@NotNull String userId, @NotNull Map<String, ?> attributes)", "modifiers": "@Nullable @Override public", "return": "TokenInfo", "signature": "TokenInfo createToken(@NotNull String userId, @NotNull Map<String, ?> attributes)", "full_signature": "@Nullable @Override public TokenInfo createToken(@NotNull String userId, @NotNull Map<String, ?> attributes)", "class_method_signature": "CompositeTokenProvider.createToken(@NotNull String userId, @NotNull Map<String, ?> attributes)", "testcase": false, "constructor": false}, {"identifier": "getTokenInfo", "parameters": "(@NotNull String token)", "modifiers": "@Nullable @Override public", "return": "TokenInfo", "signature": "TokenInfo getTokenInfo(@NotNull String token)", "full_signature": "@Nullable @Override public TokenInfo getTokenInfo(@NotNull String token)", "class_method_signature": "CompositeTokenProvider.getTokenInfo(@NotNull String token)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/token/CompositeTokenProvider.java"}, "focal_method": {"identifier": "createToken", "parameters": "(@NotNull Credentials credentials)", "modifiers": "@Nullable @Override public", "return": "TokenInfo", "body": "@Nullable\n    @Override\n    public TokenInfo createToken(@NotNull Credentials credentials) {\n        for (TokenProvider tp : providers) {\n            TokenInfo info = tp.createToken(credentials);\n            if (info != null) {\n                return info;\n            }\n        }\n        return null;\n    }", "signature": "TokenInfo createToken(@NotNull Credentials credentials)", "full_signature": "@Nullable @Override public TokenInfo createToken(@NotNull Credentials credentials)", "class_method_signature": "CompositeTokenProvider.createToken(@NotNull Credentials credentials)", "testcase": false, "constructor": false, "invocations": ["createToken"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}