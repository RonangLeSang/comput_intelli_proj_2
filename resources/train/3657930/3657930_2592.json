{"test_class": {"identifier": "CugPolicyImplTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private String path = \"/testPath\";", "modifier": "private", "type": "String", "declarator": "path = \"/testPath\"", "var_name": "path"}, {"original_string": "private PrincipalManager principalManager;", "modifier": "private", "type": "PrincipalManager", "declarator": "principalManager", "var_name": "principalManager"}, {"original_string": "private Principal testPrincipal = new PrincipalImpl(\"test\");", "modifier": "private", "type": "Principal", "declarator": "testPrincipal = new PrincipalImpl(\"test\")", "var_name": "testPrincipal"}, {"original_string": "Set<Principal> principals = ImmutableSet.of(testPrincipal);", "modifier": "", "type": "Set<Principal>", "declarator": "principals = ImmutableSet.of(testPrincipal)", "var_name": "principals"}, {"original_string": "private CugExclude exclude = new CugExclude.Default();", "modifier": "private", "type": "CugExclude", "declarator": "exclude = new CugExclude.Default()", "var_name": "exclude"}], "file": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugPolicyImplTest.java"}, "test_case": {"identifier": "testImmutableAddPrincipals", "parameters": "()", "modifiers": "@Test(expected = AccessControlException.class) public", "return": "void", "body": "@Test(expected = AccessControlException.class)\n    public void testImmutableAddPrincipals() throws Exception {\n        CugPolicy cug = new CugPolicyImpl(path, NamePathMapper.DEFAULT, principalManager, ImportBehavior.ABORT, exclude, principals, true);\n        cug.addPrincipals(EveryonePrincipal.getInstance());\n    }", "signature": "void testImmutableAddPrincipals()", "full_signature": "@Test(expected = AccessControlException.class) public void testImmutableAddPrincipals()", "class_method_signature": "CugPolicyImplTest.testImmutableAddPrincipals()", "testcase": true, "constructor": false, "invocations": ["addPrincipals", "getInstance"]}, "focal_class": {"identifier": "CugPolicyImpl", "superclass": "", "interfaces": "implements CugPolicy", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CugPolicyImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CugPolicyImpl.class)", "var_name": "log"}, {"original_string": "private static final String IMMUTABLE_ERR = \"Immutable CUG. Use getApplicablePolicies or getPolicies in order to obtain a modifiable policy.\";", "modifier": "private static final", "type": "String", "declarator": "IMMUTABLE_ERR = \"Immutable CUG. Use getApplicablePolicies or getPolicies in order to obtain a modifiable policy.\"", "var_name": "IMMUTABLE_ERR"}, {"original_string": "private final String oakPath;", "modifier": "private final", "type": "String", "declarator": "oakPath", "var_name": "oakPath"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private final PrincipalManager principalManager;", "modifier": "private final", "type": "PrincipalManager", "declarator": "principalManager", "var_name": "principalManager"}, {"original_string": "private final int importBehavior;", "modifier": "private final", "type": "int", "declarator": "importBehavior", "var_name": "importBehavior"}, {"original_string": "private final CugExclude cugExclude;", "modifier": "private final", "type": "CugExclude", "declarator": "cugExclude", "var_name": "cugExclude"}, {"original_string": "private final boolean immutable;", "modifier": "private final", "type": "boolean", "declarator": "immutable", "var_name": "immutable"}, {"original_string": "private final Map<String,Principal> principals = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<String,Principal>", "declarator": "principals = new LinkedHashMap<>()", "var_name": "principals"}], "methods": [{"identifier": "CugPolicyImpl", "parameters": "(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior, @NotNull CugExclude cugExclude)", "modifiers": "", "return": "", "signature": " CugPolicyImpl(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior, @NotNull CugExclude cugExclude)", "full_signature": "  CugPolicyImpl(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior, @NotNull CugExclude cugExclude)", "class_method_signature": "CugPolicyImpl.CugPolicyImpl(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior, @NotNull CugExclude cugExclude)", "testcase": false, "constructor": true}, {"identifier": "CugPolicyImpl", "parameters": "(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior,\n                  @NotNull CugExclude cugExclude, @NotNull Iterable<Principal> principals, boolean immutable)", "modifiers": "", "return": "", "signature": " CugPolicyImpl(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior,\n                  @NotNull CugExclude cugExclude, @NotNull Iterable<Principal> principals, boolean immutable)", "full_signature": "  CugPolicyImpl(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior,\n                  @NotNull CugExclude cugExclude, @NotNull Iterable<Principal> principals, boolean immutable)", "class_method_signature": "CugPolicyImpl.CugPolicyImpl(@NotNull String oakPath, @NotNull NamePathMapper namePathMapper,\n                  @NotNull PrincipalManager principalManager, int importBehavior,\n                  @NotNull CugExclude cugExclude, @NotNull Iterable<Principal> principals, boolean immutable)", "testcase": false, "constructor": true}, {"identifier": "checkIsMutable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkIsMutable()", "full_signature": "private void checkIsMutable()", "class_method_signature": "CugPolicyImpl.checkIsMutable()", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Set<Principal>", "signature": "Set<Principal> getPrincipals()", "full_signature": "@NotNull @Override public Set<Principal> getPrincipals()", "class_method_signature": "CugPolicyImpl.getPrincipals()", "testcase": false, "constructor": false}, {"identifier": "addPrincipals", "parameters": "(@NotNull Principal... principals)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addPrincipals(@NotNull Principal... principals)", "full_signature": "@Override public boolean addPrincipals(@NotNull Principal... principals)", "class_method_signature": "CugPolicyImpl.addPrincipals(@NotNull Principal... principals)", "testcase": false, "constructor": false}, {"identifier": "removePrincipals", "parameters": "(@NotNull Principal... principals)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removePrincipals(@NotNull Principal... principals)", "full_signature": "@Override public boolean removePrincipals(@NotNull Principal... principals)", "class_method_signature": "CugPolicyImpl.removePrincipals(@NotNull Principal... principals)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "CugPolicyImpl.getPath()", "testcase": false, "constructor": false}, {"identifier": "getPrincipalNames", "parameters": "()", "modifiers": "", "return": "Iterable<String>", "signature": "Iterable<String> getPrincipalNames()", "full_signature": " Iterable<String> getPrincipalNames()", "class_method_signature": "CugPolicyImpl.getPrincipalNames()", "testcase": false, "constructor": false}, {"identifier": "isValidPrincipal", "parameters": "(@Nullable Principal principal)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidPrincipal(@Nullable Principal principal)", "full_signature": "private boolean isValidPrincipal(@Nullable Principal principal)", "class_method_signature": "CugPolicyImpl.isValidPrincipal(@Nullable Principal principal)", "testcase": false, "constructor": false}], "file": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugPolicyImpl.java"}, "focal_method": {"identifier": "addPrincipals", "parameters": "(@NotNull Principal... principals)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean addPrincipals(@NotNull Principal... principals) throws AccessControlException {\n        checkIsMutable();\n        boolean modified = false;\n        for (Principal principal : principals) {\n            if (isValidPrincipal(principal) && !this.principals.containsKey(principal.getName())) {\n                this.principals.put(principal.getName(), principal);\n                modified = true;\n            }\n        }\n        return modified;\n    }", "signature": "boolean addPrincipals(@NotNull Principal... principals)", "full_signature": "@Override public boolean addPrincipals(@NotNull Principal... principals)", "class_method_signature": "CugPolicyImpl.addPrincipals(@NotNull Principal... principals)", "testcase": false, "constructor": false, "invocations": ["checkIsMutable", "isValidPrincipal", "containsKey", "getName", "put", "getName"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}