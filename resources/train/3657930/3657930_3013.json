{"test_class": {"identifier": "PrivilegeBitsProviderTest", "superclass": "", "interfaces": "implements PrivilegeConstants", "fields": [{"original_string": "private static final String KNOWN_PRIV_NAME = \"prefix:known\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_PRIV_NAME = \"prefix:known\"", "var_name": "KNOWN_PRIV_NAME"}, {"original_string": "private final PropertyState ps = PropertyStates.createProperty(REP_BITS, 5000L, Type.LONG);", "modifier": "private final", "type": "PropertyState", "declarator": "ps = PropertyStates.createProperty(REP_BITS, 5000L, Type.LONG)", "var_name": "ps"}, {"original_string": "private final PrivilegeBits bits = PrivilegeBits.getInstance(ps);", "modifier": "private final", "type": "PrivilegeBits", "declarator": "bits = PrivilegeBits.getInstance(ps)", "var_name": "bits"}, {"original_string": "private Tree privTree;", "modifier": "private", "type": "Tree", "declarator": "privTree", "var_name": "privTree"}, {"original_string": "private Tree pTree;", "modifier": "private", "type": "Tree", "declarator": "pTree", "var_name": "pTree"}, {"original_string": "private Root root;", "modifier": "private", "type": "Root", "declarator": "root", "var_name": "root"}, {"original_string": "private PrivilegeBitsProvider bitsProvider;", "modifier": "private", "type": "PrivilegeBitsProvider", "declarator": "bitsProvider", "var_name": "bitsProvider"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/privilege/PrivilegeBitsProviderTest.java"}, "test_case": {"identifier": "testGetAggregatedPrivilegeNamesNestedWithCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAggregatedPrivilegeNamesNestedWithCache() {\n        ImmutableSet<String> values = ImmutableSet.of(JCR_READ, JCR_ADD_CHILD_NODES);\n        when(pTree.getProperty(REP_AGGREGATES)).thenReturn(PropertyStates.createProperty(REP_AGGREGATES, values, Type.NAMES));\n        when(pTree.exists()).thenReturn(true);\n        when(privTree.getChild(KNOWN_PRIV_NAME)).thenReturn(pTree);\n\n        Iterable<String> result = bitsProvider.getAggregatedPrivilegeNames(KNOWN_PRIV_NAME);\n        Set<String> expected = ImmutableSet.copyOf(Iterables.concat(\n                ImmutableSet.of(JCR_ADD_CHILD_NODES),\n                bitsProvider.getAggregatedPrivilegeNames(JCR_READ)));\n\n        assertEquals(expected, ImmutableSet.copyOf(result));\n    }", "signature": "void testGetAggregatedPrivilegeNamesNestedWithCache()", "full_signature": "@Test public void testGetAggregatedPrivilegeNamesNestedWithCache()", "class_method_signature": "PrivilegeBitsProviderTest.testGetAggregatedPrivilegeNamesNestedWithCache()", "testcase": true, "constructor": false, "invocations": ["of", "thenReturn", "when", "getProperty", "createProperty", "thenReturn", "when", "exists", "thenReturn", "when", "getChild", "getAggregatedPrivilegeNames", "copyOf", "concat", "of", "getAggregatedPrivilegeNames", "assertEquals", "copyOf"]}, "focal_class": {"identifier": "PrivilegeBitsProvider", "superclass": "", "interfaces": "implements PrivilegeConstants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PrivilegeBitsProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PrivilegeBitsProvider.class)", "var_name": "log"}, {"original_string": "private final Map<PrivilegeBits, Set<String>> bitsToNames = new HashMap<>();", "modifier": "private final", "type": "Map<PrivilegeBits, Set<String>>", "declarator": "bitsToNames = new HashMap<>()", "var_name": "bitsToNames"}, {"original_string": "private final Map<String, PrivilegeBits> nameToBits = new HashMap<>();", "modifier": "private final", "type": "Map<String, PrivilegeBits>", "declarator": "nameToBits = new HashMap<>()", "var_name": "nameToBits"}, {"original_string": "private final Map<String, Set<String>> aggregation = new HashMap<>();", "modifier": "private final", "type": "Map<String, Set<String>>", "declarator": "aggregation = new HashMap<>()", "var_name": "aggregation"}, {"original_string": "private final Root root;", "modifier": "private final", "type": "Root", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "PrivilegeBitsProvider", "parameters": "(Root root)", "modifiers": "public", "return": "", "signature": " PrivilegeBitsProvider(Root root)", "full_signature": "public  PrivilegeBitsProvider(Root root)", "class_method_signature": "PrivilegeBitsProvider.PrivilegeBitsProvider(Root root)", "testcase": false, "constructor": true}, {"identifier": "getPrivilegesTree", "parameters": "()", "modifiers": "@NotNull public", "return": "Tree", "signature": "Tree getPrivilegesTree()", "full_signature": "@NotNull public Tree getPrivilegesTree()", "class_method_signature": "PrivilegeBitsProvider.getPrivilegesTree()", "testcase": false, "constructor": false}, {"identifier": "getBits", "parameters": "(@NotNull String... privilegeNames)", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits getBits(@NotNull String... privilegeNames)", "full_signature": "@NotNull public PrivilegeBits getBits(@NotNull String... privilegeNames)", "class_method_signature": "PrivilegeBitsProvider.getBits(@NotNull String... privilegeNames)", "testcase": false, "constructor": false}, {"identifier": "getBits", "parameters": "(@NotNull Iterable<String> privilegeNames)", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits getBits(@NotNull Iterable<String> privilegeNames)", "full_signature": "@NotNull public PrivilegeBits getBits(@NotNull Iterable<String> privilegeNames)", "class_method_signature": "PrivilegeBitsProvider.getBits(@NotNull Iterable<String> privilegeNames)", "testcase": false, "constructor": false}, {"identifier": "getBits", "parameters": "(@NotNull Privilege[] privileges, @NotNull final NameMapper nameMapper)", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits getBits(@NotNull Privilege[] privileges, @NotNull final NameMapper nameMapper)", "full_signature": "@NotNull public PrivilegeBits getBits(@NotNull Privilege[] privileges, @NotNull final NameMapper nameMapper)", "class_method_signature": "PrivilegeBitsProvider.getBits(@NotNull Privilege[] privileges, @NotNull final NameMapper nameMapper)", "testcase": false, "constructor": false}, {"identifier": "getPrivilegeNames", "parameters": "(PrivilegeBits privilegeBits)", "modifiers": "@NotNull public", "return": "Set<String>", "signature": "Set<String> getPrivilegeNames(PrivilegeBits privilegeBits)", "full_signature": "@NotNull public Set<String> getPrivilegeNames(PrivilegeBits privilegeBits)", "class_method_signature": "PrivilegeBitsProvider.getPrivilegeNames(PrivilegeBits privilegeBits)", "testcase": false, "constructor": false}, {"identifier": "getAggregatedPrivilegeNames", "parameters": "(@NotNull String... privilegeNames)", "modifiers": "@NotNull public", "return": "Iterable<String>", "signature": "Iterable<String> getAggregatedPrivilegeNames(@NotNull String... privilegeNames)", "full_signature": "@NotNull public Iterable<String> getAggregatedPrivilegeNames(@NotNull String... privilegeNames)", "class_method_signature": "PrivilegeBitsProvider.getAggregatedPrivilegeNames(@NotNull String... privilegeNames)", "testcase": false, "constructor": false}, {"identifier": "extractAggregatedPrivileges", "parameters": "(@NotNull Iterable<String> privilegeNames)", "modifiers": "private", "return": "Iterable<String>", "signature": "Iterable<String> extractAggregatedPrivileges(@NotNull Iterable<String> privilegeNames)", "full_signature": "private Iterable<String> extractAggregatedPrivileges(@NotNull Iterable<String> privilegeNames)", "class_method_signature": "PrivilegeBitsProvider.extractAggregatedPrivileges(@NotNull Iterable<String> privilegeNames)", "testcase": false, "constructor": false}, {"identifier": "resolveBuiltInAggregation", "parameters": "(@NotNull String privilegeName)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> resolveBuiltInAggregation(@NotNull String privilegeName)", "full_signature": "private Set<String> resolveBuiltInAggregation(@NotNull String privilegeName)", "class_method_signature": "PrivilegeBitsProvider.resolveBuiltInAggregation(@NotNull String privilegeName)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/privilege/PrivilegeBitsProvider.java"}, "focal_method": {"identifier": "getAggregatedPrivilegeNames", "parameters": "(@NotNull String... privilegeNames)", "modifiers": "@NotNull public", "return": "Iterable<String>", "body": "@NotNull\n    public Iterable<String> getAggregatedPrivilegeNames(@NotNull String... privilegeNames) {\n        if (privilegeNames.length == 0) {\n            return Collections.emptySet();\n        } else if (privilegeNames.length == 1) {\n            String privName = privilegeNames[0];\n            if (NON_AGGREGATE_PRIVILEGES.contains(privName)) {\n                return ImmutableSet.of(privName);\n            } else if (aggregation.containsKey(privName)) {\n                return aggregation.get(privName);\n            } else if (AGGREGATE_PRIVILEGES.keySet().contains(privName)) {\n                Set<String> aggregates = resolveBuiltInAggregation(privName);\n                aggregation.put(privName, aggregates);\n                return aggregates;\n            } else {\n                return extractAggregatedPrivileges(Collections.singleton(privName));\n            }\n        } else {\n            Set<String> pNames = ImmutableSet.copyOf(privilegeNames);\n            if (NON_AGGREGATE_PRIVILEGES.containsAll(pNames)) {\n                return pNames;\n            } else {\n                return extractAggregatedPrivileges(pNames);\n            }\n        }\n    }", "signature": "Iterable<String> getAggregatedPrivilegeNames(@NotNull String... privilegeNames)", "full_signature": "@NotNull public Iterable<String> getAggregatedPrivilegeNames(@NotNull String... privilegeNames)", "class_method_signature": "PrivilegeBitsProvider.getAggregatedPrivilegeNames(@NotNull String... privilegeNames)", "testcase": false, "constructor": false, "invocations": ["emptySet", "contains", "of", "containsKey", "get", "contains", "keySet", "resolveBuiltInAggregation", "put", "extractAggregatedPrivileges", "singleton", "copyOf", "containsAll", "extractAggregatedPrivileges"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}