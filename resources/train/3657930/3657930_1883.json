{"test_class": {"identifier": "EntryPredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TREE_PATH = \"/parent/path\";", "modifier": "private static final", "type": "String", "declarator": "TREE_PATH = \"/parent/path\"", "var_name": "TREE_PATH"}, {"original_string": "private static final String PROP_PATH = \"/parent/path/prop\";", "modifier": "private static final", "type": "String", "declarator": "PROP_PATH = \"/parent/path/prop\"", "var_name": "PROP_PATH"}, {"original_string": "private final String PARENT_PATH = PathUtils.getParentPath(TREE_PATH);", "modifier": "private final", "type": "String", "declarator": "PARENT_PATH = PathUtils.getParentPath(TREE_PATH)", "var_name": "PARENT_PATH"}, {"original_string": "private PermissionEntry pe = mock(PermissionEntry.class);", "modifier": "private", "type": "PermissionEntry", "declarator": "pe = mock(PermissionEntry.class)", "var_name": "pe"}, {"original_string": "private Tree tree;", "modifier": "private", "type": "Tree", "declarator": "tree", "var_name": "tree"}, {"original_string": "private PropertyState propertyState = PropertyStates.createProperty(\"prop\", \"value\");", "modifier": "private", "type": "PropertyState", "declarator": "propertyState = PropertyStates.createProperty(\"prop\", \"value\")", "var_name": "propertyState"}], "file": "oak-authorization-principalbased/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/EntryPredicateTest.java"}, "test_case": {"identifier": "testCreateParentPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateParentPath() {\n        when(pe.appliesTo(PARENT_PATH)).thenReturn(true);\n\n        Predicate<PermissionEntry> predicate = EntryPredicate.createParent(TREE_PATH, null, Permissions.ALL);\n        predicate.apply(pe);\n\n        verify(pe, never()).matches();\n        verify(pe, never()).matches(TREE_PATH);\n        verify(pe, times(1)).appliesTo(PARENT_PATH);\n        verify(pe, times(1)).matches(PARENT_PATH);\n        verify(pe, never()).matches(any(Tree.class), any(PropertyState.class));\n        verify(pe, never()).getPrivilegeBits();\n    }", "signature": "void testCreateParentPath()", "full_signature": "@Test public void testCreateParentPath()", "class_method_signature": "EntryPredicateTest.testCreateParentPath()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "appliesTo", "createParent", "apply", "matches", "verify", "never", "matches", "verify", "never", "appliesTo", "verify", "times", "matches", "verify", "times", "matches", "verify", "never", "any", "any", "getPrivilegeBits", "verify", "never"]}, "focal_class": {"identifier": "EntryPredicate", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "EntryPredicate", "parameters": "()", "modifiers": "private", "return": "", "signature": " EntryPredicate()", "full_signature": "private  EntryPredicate()", "class_method_signature": "EntryPredicate.EntryPredicate()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(@Nullable String oakPath)", "modifiers": "@NotNull static", "return": "Predicate<PermissionEntry>", "signature": "Predicate<PermissionEntry> create(@Nullable String oakPath)", "full_signature": "@NotNull static Predicate<PermissionEntry> create(@Nullable String oakPath)", "class_method_signature": "EntryPredicate.create(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@NotNull Tree tree, @Nullable PropertyState property)", "modifiers": "@NotNull static", "return": "Predicate<PermissionEntry>", "signature": "Predicate<PermissionEntry> create(@NotNull Tree tree, @Nullable PropertyState property)", "full_signature": "@NotNull static Predicate<PermissionEntry> create(@NotNull Tree tree, @Nullable PropertyState property)", "class_method_signature": "EntryPredicate.create(@NotNull Tree tree, @Nullable PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "createParent", "parameters": "(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "modifiers": "@NotNull static", "return": "Predicate<PermissionEntry>", "signature": "Predicate<PermissionEntry> createParent(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "full_signature": "@NotNull static Predicate<PermissionEntry> createParent(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "class_method_signature": "EntryPredicate.createParent(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "testcase": false, "constructor": false}, {"identifier": "createParent", "parameters": "(@NotNull Tree tree, long permissions)", "modifiers": "@NotNull static", "return": "Predicate<PermissionEntry>", "signature": "Predicate<PermissionEntry> createParent(@NotNull Tree tree, long permissions)", "full_signature": "@NotNull static Predicate<PermissionEntry> createParent(@NotNull Tree tree, long permissions)", "class_method_signature": "EntryPredicate.createParent(@NotNull Tree tree, long permissions)", "testcase": false, "constructor": false}], "file": "oak-authorization-principalbased/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/EntryPredicate.java"}, "focal_method": {"identifier": "createParent", "parameters": "(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "modifiers": "@NotNull static", "return": "Predicate<PermissionEntry>", "body": "@NotNull\n    static Predicate<PermissionEntry> createParent(@NotNull String treePath, @Nullable Tree parentTree, long permissions) {\n        if (!Permissions.respectParentPermissions(permissions)) {\n            return Predicates.alwaysFalse();\n        }\n        if (treePath.isEmpty() || PathUtils.denotesRoot(treePath)) {\n            return Predicates.alwaysFalse();\n        } else if (parentTree != null && parentTree.exists()) {\n            return permissionEntry -> permissionEntry.appliesTo(parentTree.getPath()) && permissionEntry.matches(parentTree, null);\n        } else {\n            String parentPath = PathUtils.getParentPath(treePath);\n            return permissionEntry -> permissionEntry.appliesTo(parentPath) && permissionEntry.matches(parentPath);\n        }\n    }", "signature": "Predicate<PermissionEntry> createParent(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "full_signature": "@NotNull static Predicate<PermissionEntry> createParent(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "class_method_signature": "EntryPredicate.createParent(@NotNull String treePath, @Nullable Tree parentTree, long permissions)", "testcase": false, "constructor": false, "invocations": ["respectParentPermissions", "alwaysFalse", "isEmpty", "denotesRoot", "alwaysFalse", "exists", "appliesTo", "getPath", "matches", "getParentPath", "appliesTo", "matches"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}