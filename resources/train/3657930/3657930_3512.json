{"test_class": {"identifier": "GcJournalTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final TemporaryFolder segmentFolder = new TemporaryFolder(new File(\"target\"));", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "segmentFolder = new TemporaryFolder(new File(\"target\"))", "var_name": "segmentFolder"}], "file": "oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/file/GcJournalTest.java"}, "test_case": {"identifier": "testReadOak16GCLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadOak16GCLog() throws Exception {\n        createOak16GCLog();\n        GCJournal gcJournal = new GCJournal(getPersistence().getGCJournalFile());\n        GCJournalEntry entry = gcJournal.read();\n        assertEquals(45919825920L, entry.getRepoSize());\n        assertEquals(41394306048L, entry.getReclaimedSize());\n        assertEquals(1493819563098L, entry.getTs());\n        assertEquals(newGCGeneration(1, 1, false), entry.getGcGeneration());\n        assertEquals(42, entry.getNodes());\n        assertEquals(RecordId.NULL.toString10(), entry.getRoot());\n    }", "signature": "void testReadOak16GCLog()", "full_signature": "@Test public void testReadOak16GCLog()", "class_method_signature": "GcJournalTest.testReadOak16GCLog()", "testcase": true, "constructor": false, "invocations": ["createOak16GCLog", "getGCJournalFile", "getPersistence", "read", "assertEquals", "getRepoSize", "assertEquals", "getReclaimedSize", "assertEquals", "getTs", "assertEquals", "newGCGeneration", "getGcGeneration", "assertEquals", "getNodes", "assertEquals", "toString10", "getRoot"]}, "focal_class": {"identifier": "GCJournal", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GCJournal.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GCJournal.class)", "var_name": "LOG"}, {"original_string": "private final GCJournalFile journalFile;", "modifier": "private final", "type": "GCJournalFile", "declarator": "journalFile", "var_name": "journalFile"}, {"original_string": "private GCJournalEntry latest;", "modifier": "private", "type": "GCJournalEntry", "declarator": "latest", "var_name": "latest"}], "methods": [{"identifier": "GCJournal", "parameters": "(@NotNull GCJournalFile journalFile)", "modifiers": "public", "return": "", "signature": " GCJournal(@NotNull GCJournalFile journalFile)", "full_signature": "public  GCJournal(@NotNull GCJournalFile journalFile)", "class_method_signature": "GCJournal.GCJournal(@NotNull GCJournalFile journalFile)", "testcase": false, "constructor": true}, {"identifier": "persist", "parameters": "(long reclaimedSize, long repoSize,\n            @NotNull GCGeneration gcGeneration, long nodes, @NotNull String root\n    )", "modifiers": "public synchronized", "return": "void", "signature": "void persist(long reclaimedSize, long repoSize,\n            @NotNull GCGeneration gcGeneration, long nodes, @NotNull String root\n    )", "full_signature": "public synchronized void persist(long reclaimedSize, long repoSize,\n            @NotNull GCGeneration gcGeneration, long nodes, @NotNull String root\n    )", "class_method_signature": "GCJournal.persist(long reclaimedSize, long repoSize,\n            @NotNull GCGeneration gcGeneration, long nodes, @NotNull String root\n    )", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "public synchronized", "return": "GCJournalEntry", "signature": "GCJournalEntry read()", "full_signature": "public synchronized GCJournalEntry read()", "class_method_signature": "GCJournal.read()", "testcase": false, "constructor": false}, {"identifier": "readAll", "parameters": "()", "modifiers": "public synchronized", "return": "Collection<GCJournalEntry>", "signature": "Collection<GCJournalEntry> readAll()", "full_signature": "public synchronized Collection<GCJournalEntry> readAll()", "class_method_signature": "GCJournal.readAll()", "testcase": false, "constructor": false}, {"identifier": "readLines", "parameters": "()", "modifiers": "private", "return": "List<String>", "signature": "List<String> readLines()", "full_signature": "private List<String> readLines()", "class_method_signature": "GCJournal.readLines()", "testcase": false, "constructor": false}], "file": "oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/GCJournal.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "public synchronized", "return": "GCJournalEntry", "body": "public synchronized GCJournalEntry read() {\n        if (latest == null) {\n            List<String> all = readLines();\n            if (all.isEmpty()) {\n                latest = GCJournalEntry.EMPTY;\n            } else {\n                String info = all.get(all.size() - 1);\n                latest = GCJournalEntry.fromString(info);\n            }\n        }\n        return latest;\n    }", "signature": "GCJournalEntry read()", "full_signature": "public synchronized GCJournalEntry read()", "class_method_signature": "GCJournal.read()", "testcase": false, "constructor": false, "invocations": ["readLines", "isEmpty", "get", "size", "fromString"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}