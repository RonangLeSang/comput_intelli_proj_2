{"test_class": {"identifier": "PathTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Path root = ROOT;", "modifier": "private final", "type": "Path", "declarator": "root = ROOT", "var_name": "root"}, {"original_string": "private final Path foo = new Path(root, \"foo\");", "modifier": "private final", "type": "Path", "declarator": "foo = new Path(root, \"foo\")", "var_name": "foo"}, {"original_string": "private final Path fooBar = new Path(foo, \"bar\");", "modifier": "private final", "type": "Path", "declarator": "fooBar = new Path(foo, \"bar\")", "var_name": "fooBar"}, {"original_string": "private final Path fooBarQuux = new Path(fooBar, \"quux\");", "modifier": "private final", "type": "Path", "declarator": "fooBarQuux = new Path(fooBar, \"quux\")", "var_name": "fooBarQuux"}, {"original_string": "private final Path relFoo = new Path(\"foo\");", "modifier": "private final", "type": "Path", "declarator": "relFoo = new Path(\"foo\")", "var_name": "relFoo"}, {"original_string": "private final Path relFooBar = new Path(relFoo, \"bar\");", "modifier": "private final", "type": "Path", "declarator": "relFooBar = new Path(relFoo, \"bar\")", "var_name": "relFooBar"}, {"original_string": "private final Path relFooBarQuux = new Path(relFooBar, \"quux\");", "modifier": "private final", "type": "Path", "declarator": "relFooBarQuux = new Path(relFooBar, \"quux\")", "var_name": "relFooBarQuux"}], "file": "oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/PathTest.java"}, "test_case": {"identifier": "getName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getName() {\n        assertEquals(\"\", root.getName());\n        assertEquals(\"foo\", foo.getName());\n        assertEquals(\"bar\", fooBar.getName());\n        assertEquals(\"quux\", fooBarQuux.getName());\n        assertEquals(\"foo\", relFoo.getName());\n        assertEquals(\"bar\", relFooBar.getName());\n        assertEquals(\"quux\", relFooBarQuux.getName());\n    }", "signature": "void getName()", "full_signature": "@Test public void getName()", "class_method_signature": "PathTest.getName()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName"]}, "focal_class": {"identifier": "Path", "superclass": "", "interfaces": "implements CacheValue, Comparable<Path>", "fields": [{"original_string": "public static final Path ROOT = new Path(null, \"\", \"\".hashCode());", "modifier": "public static final", "type": "Path", "declarator": "ROOT = new Path(null, \"\", \"\".hashCode())", "var_name": "ROOT"}, {"original_string": "@Nullable\n    private final Path parent;", "modifier": "@Nullable\n    private final", "type": "Path", "declarator": "parent", "var_name": "parent"}, {"original_string": "@NotNull\n    private final String name;", "modifier": "@NotNull\n    private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private int hash;", "modifier": "private", "type": "int", "declarator": "hash", "var_name": "hash"}], "methods": [{"identifier": "Path", "parameters": "(@Nullable Path parent,\n                 @NotNull String name,\n                 int hash)", "modifiers": "private", "return": "", "signature": " Path(@Nullable Path parent,\n                 @NotNull String name,\n                 int hash)", "full_signature": "private  Path(@Nullable Path parent,\n                 @NotNull String name,\n                 int hash)", "class_method_signature": "Path.Path(@Nullable Path parent,\n                 @NotNull String name,\n                 int hash)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(@NotNull Path parent, @NotNull String name)", "modifiers": "public", "return": "", "signature": " Path(@NotNull Path parent, @NotNull String name)", "full_signature": "public  Path(@NotNull Path parent, @NotNull String name)", "class_method_signature": "Path.Path(@NotNull Path parent, @NotNull String name)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(@NotNull String name)", "modifiers": "public", "return": "", "signature": " Path(@NotNull String name)", "full_signature": "public  Path(@NotNull String name)", "class_method_signature": "Path.Path(@NotNull String name)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull public String getName()", "class_method_signature": "Path.getName()", "testcase": false, "constructor": false}, {"identifier": "elements", "parameters": "()", "modifiers": "@NotNull public", "return": "Iterable<String>", "signature": "Iterable<String> elements()", "full_signature": "@NotNull public Iterable<String> elements()", "class_method_signature": "Path.elements()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "public boolean isRoot()", "class_method_signature": "Path.isRoot()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Nullable public", "return": "Path", "signature": "Path getParent()", "full_signature": "@Nullable public Path getParent()", "class_method_signature": "Path.getParent()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int length()", "full_signature": "public int length()", "class_method_signature": "Path.length()", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDepth()", "full_signature": "public int getDepth()", "class_method_signature": "Path.getDepth()", "testcase": false, "constructor": false}, {"identifier": "getAncestor", "parameters": "(int nth)", "modifiers": "@NotNull public", "return": "Path", "signature": "Path getAncestor(int nth)", "full_signature": "@NotNull public Path getAncestor(int nth)", "class_method_signature": "Path.getAncestor(int nth)", "testcase": false, "constructor": false}, {"identifier": "isAncestorOf", "parameters": "(@NotNull Path other)", "modifiers": "public", "return": "boolean", "signature": "boolean isAncestorOf(@NotNull Path other)", "full_signature": "public boolean isAncestorOf(@NotNull Path other)", "class_method_signature": "Path.isAncestorOf(@NotNull Path other)", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "public boolean isAbsolute()", "class_method_signature": "Path.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(@NotNull String path)", "modifiers": "@NotNull public static", "return": "Path", "signature": "Path fromString(@NotNull String path)", "full_signature": "@NotNull public static Path fromString(@NotNull String path)", "class_method_signature": "Path.fromString(@NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "toStringBuilder", "parameters": "(@NotNull StringBuilder sb)", "modifiers": "@NotNull public", "return": "StringBuilder", "signature": "StringBuilder toStringBuilder(@NotNull StringBuilder sb)", "full_signature": "@NotNull public StringBuilder toStringBuilder(@NotNull StringBuilder sb)", "class_method_signature": "Path.toStringBuilder(@NotNull StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "getMemory", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMemory()", "full_signature": "@Override public int getMemory()", "class_method_signature": "Path.getMemory()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@NotNull Path other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@NotNull Path other)", "full_signature": "@Override public int compareTo(@NotNull Path other)", "class_method_signature": "Path.compareTo(@NotNull Path other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Path.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Path.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Path.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "elements", "parameters": "(boolean withRoot)", "modifiers": "private", "return": "Iterable<String>", "signature": "Iterable<String> elements(boolean withRoot)", "full_signature": "private Iterable<String> elements(boolean withRoot)", "class_method_signature": "Path.elements(boolean withRoot)", "testcase": false, "constructor": false}, {"identifier": "buildPath", "parameters": "(StringBuilder sb)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder buildPath(StringBuilder sb)", "full_signature": "private StringBuilder buildPath(StringBuilder sb)", "class_method_signature": "Path.buildPath(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPathElements", "parameters": "(boolean withRoot)", "modifiers": "private", "return": "int", "signature": "int getNumberOfPathElements(boolean withRoot)", "full_signature": "private int getNumberOfPathElements(boolean withRoot)", "class_method_signature": "Path.getNumberOfPathElements(boolean withRoot)", "testcase": false, "constructor": false}, {"identifier": "comparePath", "parameters": "(Path a, Path b)", "modifiers": "private static", "return": "int", "signature": "int comparePath(Path a, Path b)", "full_signature": "private static int comparePath(Path a, Path b)", "class_method_signature": "Path.comparePath(Path a, Path b)", "testcase": false, "constructor": false}], "file": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/Path.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "body": "@NotNull\n    public String getName() {\n        return name;\n    }", "signature": "String getName()", "full_signature": "@NotNull public String getName()", "class_method_signature": "Path.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}