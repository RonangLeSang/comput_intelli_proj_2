{"test_class": {"identifier": "PasswordUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<String> plainPasswords;", "modifier": "private", "type": "List<String>", "declarator": "plainPasswords", "var_name": "plainPasswords"}, {"original_string": "private static Map<String, String> hashedPasswords;", "modifier": "private static", "type": "Map<String, String>", "declarator": "hashedPasswords", "var_name": "hashedPasswords"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/user/util/PasswordUtilTest.java"}, "test_case": {"identifier": "testIsPlainTextForPwHash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsPlainTextForPwHash() {\n        for (String pwHash : hashedPasswords.values()) {\n            assertFalse(pwHash + \" should not be plain text.\", PasswordUtil.isPlainTextPassword(pwHash));\n        }\n    }", "signature": "void testIsPlainTextForPwHash()", "full_signature": "@Test public void testIsPlainTextForPwHash()", "class_method_signature": "PasswordUtilTest.testIsPlainTextForPwHash()", "testcase": true, "constructor": false, "invocations": ["values", "assertFalse", "isPlainTextPassword"]}, "focal_class": {"identifier": "PasswordUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PasswordUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PasswordUtil.class)", "var_name": "log"}, {"original_string": "private static final char DELIMITER = '-';", "modifier": "private static final", "type": "char", "declarator": "DELIMITER = '-'", "var_name": "DELIMITER"}, {"original_string": "private static final int NO_ITERATIONS = 1;", "modifier": "private static final", "type": "int", "declarator": "NO_ITERATIONS = 1", "var_name": "NO_ITERATIONS"}, {"original_string": "private static final String ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"UTF-8\"", "var_name": "ENCODING"}, {"original_string": "private static final int PBKDF2_KEY_LENGTH = 128;", "modifier": "private static final", "type": "int", "declarator": "PBKDF2_KEY_LENGTH = 128", "var_name": "PBKDF2_KEY_LENGTH"}, {"original_string": "static final String PBKDF2_PREFIX = \"PBKDF2\";", "modifier": "static final", "type": "String", "declarator": "PBKDF2_PREFIX = \"PBKDF2\"", "var_name": "PBKDF2_PREFIX"}, {"original_string": "public static final String DEFAULT_ALGORITHM = \"SHA-256\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_ALGORITHM = \"SHA-256\"", "var_name": "DEFAULT_ALGORITHM"}, {"original_string": "public static final int DEFAULT_SALT_SIZE = 8;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SALT_SIZE = 8", "var_name": "DEFAULT_SALT_SIZE"}, {"original_string": "public static final int DEFAULT_ITERATIONS = 1000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_ITERATIONS = 1000", "var_name": "DEFAULT_ITERATIONS"}], "methods": [{"identifier": "PasswordUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " PasswordUtil()", "full_signature": "private  PasswordUtil()", "class_method_signature": "PasswordUtil.PasswordUtil()", "testcase": false, "constructor": true}, {"identifier": "buildPasswordHash", "parameters": "(@NotNull String password)", "modifiers": "public static", "return": "String", "signature": "String buildPasswordHash(@NotNull String password)", "full_signature": "public static String buildPasswordHash(@NotNull String password)", "class_method_signature": "PasswordUtil.buildPasswordHash(@NotNull String password)", "testcase": false, "constructor": false}, {"identifier": "buildPasswordHash", "parameters": "(@NotNull String password,\n                                           @Nullable String algorithm,\n                                           int saltSize, int iterations)", "modifiers": "public static", "return": "String", "signature": "String buildPasswordHash(@NotNull String password,\n                                           @Nullable String algorithm,\n                                           int saltSize, int iterations)", "full_signature": "public static String buildPasswordHash(@NotNull String password,\n                                           @Nullable String algorithm,\n                                           int saltSize, int iterations)", "class_method_signature": "PasswordUtil.buildPasswordHash(@NotNull String password,\n                                           @Nullable String algorithm,\n                                           int saltSize, int iterations)", "testcase": false, "constructor": false}, {"identifier": "buildPasswordHash", "parameters": "(@NotNull String password,\n                                           @NotNull ConfigurationParameters config)", "modifiers": "public static", "return": "String", "signature": "String buildPasswordHash(@NotNull String password,\n                                           @NotNull ConfigurationParameters config)", "full_signature": "public static String buildPasswordHash(@NotNull String password,\n                                           @NotNull ConfigurationParameters config)", "class_method_signature": "PasswordUtil.buildPasswordHash(@NotNull String password,\n                                           @NotNull ConfigurationParameters config)", "testcase": false, "constructor": false}, {"identifier": "isPlainTextPassword", "parameters": "(@Nullable String password)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPlainTextPassword(@Nullable String password)", "full_signature": "public static boolean isPlainTextPassword(@Nullable String password)", "class_method_signature": "PasswordUtil.isPlainTextPassword(@Nullable String password)", "testcase": false, "constructor": false}, {"identifier": "isSame", "parameters": "(@Nullable String hashedPassword, @NotNull char[] password)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSame(@Nullable String hashedPassword, @NotNull char[] password)", "full_signature": "public static boolean isSame(@Nullable String hashedPassword, @NotNull char[] password)", "class_method_signature": "PasswordUtil.isSame(@Nullable String hashedPassword, @NotNull char[] password)", "testcase": false, "constructor": false}, {"identifier": "isSame", "parameters": "(@Nullable String hashedPassword, @NotNull String password)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSame(@Nullable String hashedPassword, @NotNull String password)", "full_signature": "public static boolean isSame(@Nullable String hashedPassword, @NotNull String password)", "class_method_signature": "PasswordUtil.isSame(@Nullable String hashedPassword, @NotNull String password)", "testcase": false, "constructor": false}, {"identifier": "compareSecure", "parameters": "(@NotNull String a, @NotNull String b)", "modifiers": "private static", "return": "boolean", "signature": "boolean compareSecure(@NotNull String a, @NotNull String b)", "full_signature": "private static boolean compareSecure(@NotNull String a, @NotNull String b)", "class_method_signature": "PasswordUtil.compareSecure(@NotNull String a, @NotNull String b)", "testcase": false, "constructor": false}, {"identifier": "generateHash", "parameters": "(@NotNull String pwd, @NotNull String algorithm,\n                                       @Nullable String salt, int iterations)", "modifiers": "@NotNull private static", "return": "String", "signature": "String generateHash(@NotNull String pwd, @NotNull String algorithm,\n                                       @Nullable String salt, int iterations)", "full_signature": "@NotNull private static String generateHash(@NotNull String pwd, @NotNull String algorithm,\n                                       @Nullable String salt, int iterations)", "class_method_signature": "PasswordUtil.generateHash(@NotNull String pwd, @NotNull String algorithm,\n                                       @Nullable String salt, int iterations)", "testcase": false, "constructor": false}, {"identifier": "generateSalt", "parameters": "(int saltSize)", "modifiers": "@NotNull private static", "return": "String", "signature": "String generateSalt(int saltSize)", "full_signature": "@NotNull private static String generateSalt(int saltSize)", "class_method_signature": "PasswordUtil.generateSalt(int saltSize)", "testcase": false, "constructor": false}, {"identifier": "convertBytesToHex", "parameters": "(byte[] bytes)", "modifiers": "@NotNull private static", "return": "String", "signature": "String convertBytesToHex(byte[] bytes)", "full_signature": "@NotNull private static String convertBytesToHex(byte[] bytes)", "class_method_signature": "PasswordUtil.convertBytesToHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "convertHexToBytes", "parameters": "(String s)", "modifiers": "@NotNull private static", "return": "byte[]", "signature": "byte[] convertHexToBytes(String s)", "full_signature": "@NotNull private static byte[] convertHexToBytes(String s)", "class_method_signature": "PasswordUtil.convertHexToBytes(String s)", "testcase": false, "constructor": false}, {"identifier": "generatePBKDF2", "parameters": "(@NotNull String pwd, @NotNull String salt,\n                                         @NotNull String algorithm, int iterations)", "modifiers": "@NotNull private static", "return": "String", "signature": "String generatePBKDF2(@NotNull String pwd, @NotNull String salt,\n                                         @NotNull String algorithm, int iterations)", "full_signature": "@NotNull private static String generatePBKDF2(@NotNull String pwd, @NotNull String salt,\n                                         @NotNull String algorithm, int iterations)", "class_method_signature": "PasswordUtil.generatePBKDF2(@NotNull String pwd, @NotNull String salt,\n                                         @NotNull String algorithm, int iterations)", "testcase": false, "constructor": false}, {"identifier": "generateDigest", "parameters": "(@NotNull String data, @NotNull String algorithm, int iterations)", "modifiers": "@NotNull private static", "return": "String", "signature": "String generateDigest(@NotNull String data, @NotNull String algorithm, int iterations)", "full_signature": "@NotNull private static String generateDigest(@NotNull String data, @NotNull String algorithm, int iterations)", "class_method_signature": "PasswordUtil.generateDigest(@NotNull String data, @NotNull String algorithm, int iterations)", "testcase": false, "constructor": false}, {"identifier": "extractAlgorithm", "parameters": "(@Nullable String hashedPwd)", "modifiers": "@Nullable private static", "return": "String", "signature": "String extractAlgorithm(@Nullable String hashedPwd)", "full_signature": "@Nullable private static String extractAlgorithm(@Nullable String hashedPwd)", "class_method_signature": "PasswordUtil.extractAlgorithm(@Nullable String hashedPwd)", "testcase": false, "constructor": false}, {"identifier": "extractSalt", "parameters": "(@NotNull String hashedPwd, int start)", "modifiers": "@Nullable private static", "return": "String", "signature": "String extractSalt(@NotNull String hashedPwd, int start)", "full_signature": "@Nullable private static String extractSalt(@NotNull String hashedPwd, int start)", "class_method_signature": "PasswordUtil.extractSalt(@NotNull String hashedPwd, int start)", "testcase": false, "constructor": false}, {"identifier": "extractIterations", "parameters": "(@NotNull String hashedPwd, int start)", "modifiers": "private static", "return": "int", "signature": "int extractIterations(@NotNull String hashedPwd, int start)", "full_signature": "private static int extractIterations(@NotNull String hashedPwd, int start)", "class_method_signature": "PasswordUtil.extractIterations(@NotNull String hashedPwd, int start)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/user/util/PasswordUtil.java"}, "focal_method": {"identifier": "isPlainTextPassword", "parameters": "(@Nullable String password)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isPlainTextPassword(@Nullable String password) {\n        return extractAlgorithm(password) == null;\n    }", "signature": "boolean isPlainTextPassword(@Nullable String password)", "full_signature": "public static boolean isPlainTextPassword(@Nullable String password)", "class_method_signature": "PasswordUtil.isPlainTextPassword(@Nullable String password)", "testcase": false, "constructor": false, "invocations": ["extractAlgorithm"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}