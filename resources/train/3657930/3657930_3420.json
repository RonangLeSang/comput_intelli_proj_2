{"test_class": {"identifier": "ReaderCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/ReaderCacheTest.java"}, "test_case": {"identifier": "largeEntries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void largeEntries() {\n        final AtomicInteger counter = new AtomicInteger();\n        final String large = new String(new char[1024]);\n        Function<Integer, String> loader = new Function<Integer, String>() {\n            @Override @Nullable\n            public String apply(@Nullable Integer input) {\n                counter.incrementAndGet();\n                return large + input;\n            }\n        };\n        StringCache c = new StringCache(1024);\n        for (int repeat = 0; repeat < 10; repeat++) {\n            for (int i = 0; i < 1000; i++) {\n                assertEquals(large + i, c.get(i, i, i, loader));\n                assertEquals(large + 0, c.get(0, 0, 0, loader));\n            }\n        }\n        // the LIRS cache should be almost empty (low hit rate there)\n        // and large strings are not kept in the fast cache, so hit rate should be bad\n        assertTrue(valueOf(counter), counter.get() > 9000);\n        assertTrue(valueOf(counter), counter.get() < 10000);\n    }", "signature": "void largeEntries()", "full_signature": "@Test public void largeEntries()", "class_method_signature": "ReaderCacheTest.largeEntries()", "testcase": true, "constructor": false, "invocations": ["incrementAndGet", "assertEquals", "get", "assertEquals", "get", "assertTrue", "valueOf", "get", "assertTrue", "valueOf", "get"]}, "focal_class": {"identifier": "ReaderCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull\n    private final Weigher<CacheKey, T> weigher;", "modifier": "@NotNull\n    private final", "type": "Weigher<CacheKey, T>", "declarator": "weigher", "var_name": "weigher"}, {"original_string": "@NotNull\n    private final String name;", "modifier": "@NotNull\n    private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@Nullable\n    private final FastCache<T> fastCache;", "modifier": "@Nullable\n    private final", "type": "FastCache<T>", "declarator": "fastCache", "var_name": "fastCache"}, {"original_string": "@NotNull\n    private final CacheLIRS<CacheKey, T> cache;", "modifier": "@NotNull\n    private final", "type": "CacheLIRS<CacheKey, T>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "ReaderCache", "parameters": "(long maxWeight, int averageWeight,\n            @NotNull String name, @NotNull Weigher<CacheKey, T> weigher)", "modifiers": "protected", "return": "", "signature": " ReaderCache(long maxWeight, int averageWeight,\n            @NotNull String name, @NotNull Weigher<CacheKey, T> weigher)", "full_signature": "protected  ReaderCache(long maxWeight, int averageWeight,\n            @NotNull String name, @NotNull Weigher<CacheKey, T> weigher)", "class_method_signature": "ReaderCache.ReaderCache(long maxWeight, int averageWeight,\n            @NotNull String name, @NotNull Weigher<CacheKey, T> weigher)", "testcase": false, "constructor": true}, {"identifier": "getStats", "parameters": "()", "modifiers": "@NotNull public", "return": "CacheStats", "signature": "CacheStats getStats()", "full_signature": "@NotNull public CacheStats getStats()", "class_method_signature": "ReaderCache.getStats()", "testcase": false, "constructor": false}, {"identifier": "getEntryHash", "parameters": "(long lsb, long msb, int offset)", "modifiers": "private static", "return": "int", "signature": "int getEntryHash(long lsb, long msb, int offset)", "full_signature": "private static int getEntryHash(long lsb, long msb, int offset)", "class_method_signature": "ReaderCache.getEntryHash(long lsb, long msb, int offset)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long msb, long lsb, int offset, Function<Integer, T> loader)", "modifiers": "@NotNull public", "return": "T", "signature": "T get(long msb, long lsb, int offset, Function<Integer, T> loader)", "full_signature": "@NotNull public T get(long msb, long lsb, int offset, Function<Integer, T> loader)", "class_method_signature": "ReaderCache.get(long msb, long lsb, int offset, Function<Integer, T> loader)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ReaderCache.clear()", "testcase": false, "constructor": false}, {"identifier": "isSmall", "parameters": "(T value)", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean isSmall(T value)", "full_signature": "protected abstract boolean isSmall(T value)", "class_method_signature": "ReaderCache.isSmall(T value)", "testcase": false, "constructor": false}], "file": "oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/ReaderCache.java"}, "focal_method": {"identifier": "get", "parameters": "(long msb, long lsb, int offset, Function<Integer, T> loader)", "modifiers": "@NotNull public", "return": "T", "body": "@NotNull\n    public T get(long msb, long lsb, int offset, Function<Integer, T> loader) {\n        int hash = getEntryHash(msb, lsb, offset);\n        if (fastCache == null) {\n            // disabled cache\n            T value = loader.apply(offset);\n            assert value != null;\n            return value;\n        }\n\n        T value = fastCache.get(hash, msb, lsb, offset);\n        if (value != null) {\n            return value;\n        }\n        CacheKey key = new CacheKey(hash, msb, lsb, offset);\n        value = cache.getIfPresent(key);\n        if (value == null) {\n            value = loader.apply(offset);\n            assert value != null;\n            cache.put(key, value);\n        }\n        if (isSmall(value)) {\n            fastCache.put(hash, new FastCacheEntry<>(hash, msb, lsb, offset, value));\n        }\n        return value;\n    }", "signature": "T get(long msb, long lsb, int offset, Function<Integer, T> loader)", "full_signature": "@NotNull public T get(long msb, long lsb, int offset, Function<Integer, T> loader)", "class_method_signature": "ReaderCache.get(long msb, long lsb, int offset, Function<Integer, T> loader)", "testcase": false, "constructor": false, "invocations": ["getEntryHash", "apply", "get", "getIfPresent", "apply", "put", "isSmall", "put"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}