{"test_class": {"identifier": "AbstractRestrictionProviderTest", "superclass": "", "interfaces": "implements AccessControlConstants", "fields": [{"original_string": "private String unsupportedPath = null;", "modifier": "private", "type": "String", "declarator": "unsupportedPath = null", "var_name": "unsupportedPath"}, {"original_string": "private String testPath = \"/testRoot\";", "modifier": "private", "type": "String", "declarator": "testPath = \"/testRoot\"", "var_name": "testPath"}, {"original_string": "private Value globValue;", "modifier": "private", "type": "Value", "declarator": "globValue", "var_name": "globValue"}, {"original_string": "private Value[] nameValues;", "modifier": "private", "type": "Value[]", "declarator": "nameValues", "var_name": "nameValues"}, {"original_string": "private Value nameValue;", "modifier": "private", "type": "Value", "declarator": "nameValue", "var_name": "nameValue"}, {"original_string": "private final NamePathMapper namePathMapper = NamePathMapper.DEFAULT;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper = NamePathMapper.DEFAULT", "var_name": "namePathMapper"}, {"original_string": "private PartialValueFactory valueFactory;", "modifier": "private", "type": "PartialValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "private Map<String, ? extends RestrictionDefinition> supported;", "modifier": "private", "type": "Map<String, ? extends RestrictionDefinition>", "declarator": "supported", "var_name": "supported"}, {"original_string": "private AbstractRestrictionProvider restrictionProvider;", "modifier": "private", "type": "AbstractRestrictionProvider", "declarator": "restrictionProvider", "var_name": "restrictionProvider"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/restriction/AbstractRestrictionProviderTest.java"}, "test_case": {"identifier": "testWriteEmptyRestrictions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteEmptyRestrictions() throws Exception {\n        restrictionProvider.writeRestrictions(null, getAceTree(), Collections.emptySet());\n    }", "signature": "void testWriteEmptyRestrictions()", "full_signature": "@Test public void testWriteEmptyRestrictions()", "class_method_signature": "AbstractRestrictionProviderTest.testWriteEmptyRestrictions()", "testcase": true, "constructor": false, "invocations": ["writeRestrictions", "getAceTree", "emptySet"]}, "focal_class": {"identifier": "AbstractRestrictionProvider", "superclass": "", "interfaces": "implements RestrictionProvider, AccessControlConstants", "fields": [{"original_string": "private Map<String, RestrictionDefinition> supported;", "modifier": "private", "type": "Map<String, RestrictionDefinition>", "declarator": "supported", "var_name": "supported"}], "methods": [{"identifier": "AbstractRestrictionProvider", "parameters": "(@NotNull Map<String, ? extends RestrictionDefinition> definitions)", "modifiers": "public", "return": "", "signature": " AbstractRestrictionProvider(@NotNull Map<String, ? extends RestrictionDefinition> definitions)", "full_signature": "public  AbstractRestrictionProvider(@NotNull Map<String, ? extends RestrictionDefinition> definitions)", "class_method_signature": "AbstractRestrictionProvider.AbstractRestrictionProvider(@NotNull Map<String, ? extends RestrictionDefinition> definitions)", "testcase": false, "constructor": true}, {"identifier": "getSupportedRestrictions", "parameters": "(String oakPath)", "modifiers": "@NotNull @Override public", "return": "Set<RestrictionDefinition>", "signature": "Set<RestrictionDefinition> getSupportedRestrictions(String oakPath)", "full_signature": "@NotNull @Override public Set<RestrictionDefinition> getSupportedRestrictions(String oakPath)", "class_method_signature": "AbstractRestrictionProvider.getSupportedRestrictions(String oakPath)", "testcase": false, "constructor": false}, {"identifier": "createRestriction", "parameters": "(String oakPath, @NotNull String oakName, @NotNull Value value)", "modifiers": "@NotNull @Override public", "return": "Restriction", "signature": "Restriction createRestriction(String oakPath, @NotNull String oakName, @NotNull Value value)", "full_signature": "@NotNull @Override public Restriction createRestriction(String oakPath, @NotNull String oakName, @NotNull Value value)", "class_method_signature": "AbstractRestrictionProvider.createRestriction(String oakPath, @NotNull String oakName, @NotNull Value value)", "testcase": false, "constructor": false}, {"identifier": "createRestriction", "parameters": "(String oakPath, @NotNull String oakName, @NotNull Value... values)", "modifiers": "@NotNull @Override public", "return": "Restriction", "signature": "Restriction createRestriction(String oakPath, @NotNull String oakName, @NotNull Value... values)", "full_signature": "@NotNull @Override public Restriction createRestriction(String oakPath, @NotNull String oakName, @NotNull Value... values)", "class_method_signature": "AbstractRestrictionProvider.createRestriction(String oakPath, @NotNull String oakName, @NotNull Value... values)", "testcase": false, "constructor": false}, {"identifier": "readRestrictions", "parameters": "(String oakPath, @NotNull Tree aceTree)", "modifiers": "@NotNull @Override public", "return": "Set<Restriction>", "signature": "Set<Restriction> readRestrictions(String oakPath, @NotNull Tree aceTree)", "full_signature": "@NotNull @Override public Set<Restriction> readRestrictions(String oakPath, @NotNull Tree aceTree)", "class_method_signature": "AbstractRestrictionProvider.readRestrictions(String oakPath, @NotNull Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "writeRestrictions", "parameters": "(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "modifiers": "@Override public", "return": "void", "signature": "void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "full_signature": "@Override public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "class_method_signature": "AbstractRestrictionProvider.writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "validateRestrictions", "parameters": "(String oakPath, @NotNull Tree aceTree)", "modifiers": "@Override public", "return": "void", "signature": "void validateRestrictions(String oakPath, @NotNull Tree aceTree)", "full_signature": "@Override public void validateRestrictions(String oakPath, @NotNull Tree aceTree)", "class_method_signature": "AbstractRestrictionProvider.validateRestrictions(String oakPath, @NotNull Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "isUnsupportedPath", "parameters": "(@Nullable String oakPath)", "modifiers": "protected", "return": "boolean", "signature": "boolean isUnsupportedPath(@Nullable String oakPath)", "full_signature": "protected boolean isUnsupportedPath(@Nullable String oakPath)", "class_method_signature": "AbstractRestrictionProvider.isUnsupportedPath(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "getRestrictionsTree", "parameters": "(@NotNull Tree aceTree)", "modifiers": "@NotNull protected", "return": "Tree", "signature": "Tree getRestrictionsTree(@NotNull Tree aceTree)", "full_signature": "@NotNull protected Tree getRestrictionsTree(@NotNull Tree aceTree)", "class_method_signature": "AbstractRestrictionProvider.getRestrictionsTree(@NotNull Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "getDefinition", "parameters": "(@Nullable String oakPath, @NotNull String oakName)", "modifiers": "@NotNull private", "return": "RestrictionDefinition", "signature": "RestrictionDefinition getDefinition(@Nullable String oakPath, @NotNull String oakName)", "full_signature": "@NotNull private RestrictionDefinition getDefinition(@Nullable String oakPath, @NotNull String oakName)", "class_method_signature": "AbstractRestrictionProvider.getDefinition(@Nullable String oakPath, @NotNull String oakName)", "testcase": false, "constructor": false}, {"identifier": "createRestriction", "parameters": "(PropertyState propertyState, RestrictionDefinition definition)", "modifiers": "@NotNull private", "return": "Restriction", "signature": "Restriction createRestriction(PropertyState propertyState, RestrictionDefinition definition)", "full_signature": "@NotNull private Restriction createRestriction(PropertyState propertyState, RestrictionDefinition definition)", "class_method_signature": "AbstractRestrictionProvider.createRestriction(PropertyState propertyState, RestrictionDefinition definition)", "testcase": false, "constructor": false}, {"identifier": "getRestrictionProperties", "parameters": "(Tree aceTree)", "modifiers": "@NotNull private", "return": "Map<String, PropertyState>", "signature": "Map<String, PropertyState> getRestrictionProperties(Tree aceTree)", "full_signature": "@NotNull private Map<String, PropertyState> getRestrictionProperties(Tree aceTree)", "class_method_signature": "AbstractRestrictionProvider.getRestrictionProperties(Tree aceTree)", "testcase": false, "constructor": false}, {"identifier": "isRestrictionProperty", "parameters": "(String propertyName)", "modifiers": "private static", "return": "boolean", "signature": "boolean isRestrictionProperty(String propertyName)", "full_signature": "private static boolean isRestrictionProperty(String propertyName)", "class_method_signature": "AbstractRestrictionProvider.isRestrictionProperty(String propertyName)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/restriction/AbstractRestrictionProvider.java"}, "focal_method": {"identifier": "writeRestrictions", "parameters": "(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions) throws RepositoryException {\n        // validation of the restrictions is delegated to the commit hook\n        // see #validateRestrictions below\n        if (!restrictions.isEmpty()) {\n            Tree rTree = TreeUtil.getOrAddChild(aceTree, REP_RESTRICTIONS, NT_REP_RESTRICTIONS);\n            for (Restriction restriction : restrictions) {\n                rTree.setProperty(restriction.getProperty());\n            }\n        }\n    }", "signature": "void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "full_signature": "@Override public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "class_method_signature": "AbstractRestrictionProvider.writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getOrAddChild", "setProperty", "getProperty"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}