{"test_class": {"identifier": "RepoPolicyTreePermissionTest", "superclass": "extends AbstractSecurityTest", "interfaces": "implements AccessControlConstants", "fields": [{"original_string": "private static final String REPO_POLICY_PATH = '/' + REP_REPO_POLICY;", "modifier": "private static final", "type": "String", "declarator": "REPO_POLICY_PATH = '/' + REP_REPO_POLICY", "var_name": "REPO_POLICY_PATH"}, {"original_string": "private AuthorizationConfiguration config;", "modifier": "private", "type": "AuthorizationConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private ContentSession accessSession;", "modifier": "private", "type": "ContentSession", "declarator": "accessSession", "var_name": "accessSession"}, {"original_string": "private ContentSession noAccessSession;", "modifier": "private", "type": "ContentSession", "declarator": "noAccessSession", "var_name": "noAccessSession"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/permission/RepoPolicyTreePermissionTest.java"}, "test_case": {"identifier": "testIsGrantedProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsGrantedProperty() {\n        PropertyState ps = PropertyStates.createProperty(\"name\", \"value\");\n        TreePermission tp = getTreePermission(accessSession, REPO_POLICY_PATH);\n        assertTrue(tp.isGranted(Permissions.NAMESPACE_MANAGEMENT, ps));\n        assertFalse(tp.isGranted(Permissions.WORKSPACE_MANAGEMENT, ps));\n        assertFalse(tp.isGranted(Permissions.NAMESPACE_MANAGEMENT|Permissions.WORKSPACE_MANAGEMENT, ps));\n    }", "signature": "void testIsGrantedProperty()", "full_signature": "@Test public void testIsGrantedProperty()", "class_method_signature": "RepoPolicyTreePermissionTest.testIsGrantedProperty()", "testcase": true, "constructor": false, "invocations": ["createProperty", "getTreePermission", "assertTrue", "isGranted", "assertFalse", "isGranted", "assertFalse", "isGranted"]}, "focal_class": {"identifier": "RepoPolicyTreePermission", "superclass": "", "interfaces": "implements TreePermission", "fields": [{"original_string": "private RepositoryPermission repoPermission;", "modifier": "private", "type": "RepositoryPermission", "declarator": "repoPermission", "var_name": "repoPermission"}, {"original_string": "private ReadStatus readStatus;", "modifier": "private", "type": "ReadStatus", "declarator": "readStatus", "var_name": "readStatus"}], "methods": [{"identifier": "RepoPolicyTreePermission", "parameters": "(@NotNull RepositoryPermission repoPermission)", "modifiers": "", "return": "", "signature": " RepoPolicyTreePermission(@NotNull RepositoryPermission repoPermission)", "full_signature": "  RepoPolicyTreePermission(@NotNull RepositoryPermission repoPermission)", "class_method_signature": "RepoPolicyTreePermission.RepoPolicyTreePermission(@NotNull RepositoryPermission repoPermission)", "testcase": false, "constructor": true}, {"identifier": "getChildPermission", "parameters": "()", "modifiers": "@NotNull", "return": "TreePermission", "signature": "TreePermission getChildPermission()", "full_signature": "@NotNull TreePermission getChildPermission()", "class_method_signature": "RepoPolicyTreePermission.getChildPermission()", "testcase": false, "constructor": false}, {"identifier": "getChildPermission", "parameters": "(@NotNull String childName, @NotNull NodeState childState)", "modifiers": "@NotNull @Override public", "return": "TreePermission", "signature": "TreePermission getChildPermission(@NotNull String childName, @NotNull NodeState childState)", "full_signature": "@NotNull @Override public TreePermission getChildPermission(@NotNull String childName, @NotNull NodeState childState)", "class_method_signature": "RepoPolicyTreePermission.getChildPermission(@NotNull String childName, @NotNull NodeState childState)", "testcase": false, "constructor": false}, {"identifier": "canRead", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canRead()", "full_signature": "@Override public boolean canRead()", "class_method_signature": "RepoPolicyTreePermission.canRead()", "testcase": false, "constructor": false}, {"identifier": "canRead", "parameters": "(@NotNull PropertyState property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canRead(@NotNull PropertyState property)", "full_signature": "@Override public boolean canRead(@NotNull PropertyState property)", "class_method_signature": "RepoPolicyTreePermission.canRead(@NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "canReadAll", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canReadAll()", "full_signature": "@Override public boolean canReadAll()", "class_method_signature": "RepoPolicyTreePermission.canReadAll()", "testcase": false, "constructor": false}, {"identifier": "canReadProperties", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canReadProperties()", "full_signature": "@Override public boolean canReadProperties()", "class_method_signature": "RepoPolicyTreePermission.canReadProperties()", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(long permissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(long permissions)", "full_signature": "@Override public boolean isGranted(long permissions)", "class_method_signature": "RepoPolicyTreePermission.isGranted(long permissions)", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(long permissions, @NotNull PropertyState property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(long permissions, @NotNull PropertyState property)", "full_signature": "@Override public boolean isGranted(long permissions, @NotNull PropertyState property)", "class_method_signature": "RepoPolicyTreePermission.isGranted(long permissions, @NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "getReadStatus", "parameters": "()", "modifiers": "@NotNull private", "return": "ReadStatus", "signature": "ReadStatus getReadStatus()", "full_signature": "@NotNull private ReadStatus getReadStatus()", "class_method_signature": "RepoPolicyTreePermission.getReadStatus()", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/RepoPolicyTreePermission.java"}, "focal_method": {"identifier": "isGranted", "parameters": "(long permissions)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isGranted(long permissions) {\n        return repoPermission.isGranted(permissions);\n    }", "signature": "boolean isGranted(long permissions)", "full_signature": "@Override public boolean isGranted(long permissions)", "class_method_signature": "RepoPolicyTreePermission.isGranted(long permissions)", "testcase": false, "constructor": false, "invocations": ["isGranted"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}