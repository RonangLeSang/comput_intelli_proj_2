{"test_class": {"identifier": "ElasticBulkProcessorHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ElasticIndexDefinition indexDefinitionMock;", "modifier": "@Mock\n    private", "type": "ElasticIndexDefinition", "declarator": "indexDefinitionMock", "var_name": "indexDefinitionMock"}, {"original_string": "@Mock\n    private NodeState definitionNodeStateMock;", "modifier": "@Mock\n    private", "type": "NodeState", "declarator": "definitionNodeStateMock", "var_name": "definitionNodeStateMock"}, {"original_string": "@Mock\n    private ElasticConnection elasticConnectionMock;", "modifier": "@Mock\n    private", "type": "ElasticConnection", "declarator": "elasticConnectionMock", "var_name": "elasticConnectionMock"}, {"original_string": "@Mock\n    private NodeBuilder definitionBuilder;", "modifier": "@Mock\n    private", "type": "NodeBuilder", "declarator": "definitionBuilder", "var_name": "definitionBuilder"}, {"original_string": "@Mock\n    private CommitInfo commitInfo;", "modifier": "@Mock\n    private", "type": "CommitInfo", "declarator": "commitInfo", "var_name": "commitInfo"}], "file": "oak-search-elastic/src/test/java/org/apache/jackrabbit/oak/plugins/index/elastic/index/ElasticBulkProcessorHandlerTest.java"}, "test_case": {"identifier": "defaultModeWithCommitInfoOverride", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void defaultModeWithCommitInfoOverride() {\n        when(definitionNodeStateMock.getProperty(eq(\"async\"))).thenReturn(null);\n        when(commitInfo.getInfo()).thenReturn(Collections.singletonMap(\"sync-mode\", \"rt\"));\n\n        ElasticBulkProcessorHandler bulkProcessorHandler = ElasticBulkProcessorHandler\n                .getBulkProcessorHandler(elasticConnectionMock, indexDefinitionMock, definitionBuilder, commitInfo);\n\n        assertThat(bulkProcessorHandler, instanceOf(ElasticBulkProcessorHandler.RealTimeBulkProcessorHandler.class));\n    }", "signature": "void defaultModeWithCommitInfoOverride()", "full_signature": "@Test public void defaultModeWithCommitInfoOverride()", "class_method_signature": "ElasticBulkProcessorHandlerTest.defaultModeWithCommitInfoOverride()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProperty", "eq", "thenReturn", "when", "getInfo", "singletonMap", "getBulkProcessorHandler", "assertThat", "instanceOf"]}, "focal_class": {"identifier": "ElasticBulkProcessorHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ElasticBulkProcessorHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ElasticBulkProcessorHandler.class)", "var_name": "LOG"}, {"original_string": "private final int FAILED_DOC_COUNT_FOR_STATUS_NODE = Integer.getInteger(\"oak.failedDocStatusLimit\", 10000);", "modifier": "private final", "type": "int", "declarator": "FAILED_DOC_COUNT_FOR_STATUS_NODE = Integer.getInteger(\"oak.failedDocStatusLimit\", 10000)", "var_name": "FAILED_DOC_COUNT_FOR_STATUS_NODE"}, {"original_string": "private static final String SYNC_MODE_PROPERTY = \"sync-mode\";", "modifier": "private static final", "type": "String", "declarator": "SYNC_MODE_PROPERTY = \"sync-mode\"", "var_name": "SYNC_MODE_PROPERTY"}, {"original_string": "private static final String SYNC_RT_MODE = \"rt\";", "modifier": "private static final", "type": "String", "declarator": "SYNC_RT_MODE = \"rt\"", "var_name": "SYNC_RT_MODE"}, {"original_string": "private static boolean waitForESAcknowledgement = true;", "modifier": "private static", "type": "boolean", "declarator": "waitForESAcknowledgement = true", "var_name": "waitForESAcknowledgement"}, {"original_string": "protected final ElasticConnection elasticConnection;", "modifier": "protected final", "type": "ElasticConnection", "declarator": "elasticConnection", "var_name": "elasticConnection"}, {"original_string": "protected final ElasticIndexDefinition indexDefinition;", "modifier": "protected final", "type": "ElasticIndexDefinition", "declarator": "indexDefinition", "var_name": "indexDefinition"}, {"original_string": "private final NodeBuilder definitionBuilder;", "modifier": "private final", "type": "NodeBuilder", "declarator": "definitionBuilder", "var_name": "definitionBuilder"}, {"original_string": "protected final BulkProcessor bulkProcessor;", "modifier": "protected final", "type": "BulkProcessor", "declarator": "bulkProcessor", "var_name": "bulkProcessor"}, {"original_string": "private final Phaser phaser = new Phaser(1);", "modifier": "private final", "type": "Phaser", "declarator": "phaser = new Phaser(1)", "var_name": "phaser"}, {"original_string": "private volatile IOException ioException;", "modifier": "private volatile", "type": "IOException", "declarator": "ioException", "var_name": "ioException"}, {"original_string": "private final ConcurrentHashMap<Long, Boolean> updatesMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<Long, Boolean>", "declarator": "updatesMap = new ConcurrentHashMap<>()", "var_name": "updatesMap"}, {"original_string": "protected long totalOperations;", "modifier": "protected", "type": "long", "declarator": "totalOperations", "var_name": "totalOperations"}], "methods": [{"identifier": "ElasticBulkProcessorHandler", "parameters": "(@NotNull ElasticConnection elasticConnection,\n                                        @NotNull ElasticIndexDefinition indexDefinition,\n                                        @NotNull NodeBuilder definitionBuilder)", "modifiers": "private", "return": "", "signature": " ElasticBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                        @NotNull ElasticIndexDefinition indexDefinition,\n                                        @NotNull NodeBuilder definitionBuilder)", "full_signature": "private  ElasticBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                        @NotNull ElasticIndexDefinition indexDefinition,\n                                        @NotNull NodeBuilder definitionBuilder)", "class_method_signature": "ElasticBulkProcessorHandler.ElasticBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                        @NotNull ElasticIndexDefinition indexDefinition,\n                                        @NotNull NodeBuilder definitionBuilder)", "testcase": false, "constructor": true}, {"identifier": "getBulkProcessorHandler", "parameters": "(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "modifiers": "public static", "return": "ElasticBulkProcessorHandler", "signature": "ElasticBulkProcessorHandler getBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "full_signature": "public static ElasticBulkProcessorHandler getBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "class_method_signature": "ElasticBulkProcessorHandler.getBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "testcase": false, "constructor": false}, {"identifier": "initBulkProcessor", "parameters": "()", "modifiers": "private", "return": "BulkProcessor", "signature": "BulkProcessor initBulkProcessor()", "full_signature": "private BulkProcessor initBulkProcessor()", "class_method_signature": "ElasticBulkProcessorHandler.initBulkProcessor()", "testcase": false, "constructor": false}, {"identifier": "requestConsumer", "parameters": "()", "modifiers": "protected", "return": "BiConsumer<BulkRequest, ActionListener<BulkResponse>>", "signature": "BiConsumer<BulkRequest, ActionListener<BulkResponse>> requestConsumer()", "full_signature": "protected BiConsumer<BulkRequest, ActionListener<BulkResponse>> requestConsumer()", "class_method_signature": "ElasticBulkProcessorHandler.requestConsumer()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(DocWriteRequest<?> request)", "modifiers": "public", "return": "void", "signature": "void add(DocWriteRequest<?> request)", "full_signature": "public void add(DocWriteRequest<?> request)", "class_method_signature": "ElasticBulkProcessorHandler.add(DocWriteRequest<?> request)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean close()", "full_signature": "public boolean close()", "class_method_signature": "ElasticBulkProcessorHandler.close()", "testcase": false, "constructor": false}], "file": "oak-search-elastic/src/main/java/org/apache/jackrabbit/oak/plugins/index/elastic/index/ElasticBulkProcessorHandler.java"}, "focal_method": {"identifier": "getBulkProcessorHandler", "parameters": "(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "modifiers": "public static", "return": "ElasticBulkProcessorHandler", "body": "public static ElasticBulkProcessorHandler getBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo) {\n        PropertyState async = indexDefinition.getDefinitionNodeState().getProperty(\"async\");\n\n        if (async != null) {\n            Iterable<String> opt = async.getValue(Type.STRINGS);\n\n            // Check if this indexing call is a part of async cycle or a commit hook\n            // In case it's from async cycle - commit info will have a indexingCheckpointTime key.\n            // Otherwise it's part of commit hook based indexing due to async property having a value nrt\n            if (!commitInfo.getInfo().containsKey(IndexConstants.CHECKPOINT_CREATION_TIME)) {\n                waitForESAcknowledgement = false;\n            }\n            return new ElasticBulkProcessorHandler(elasticConnection, indexDefinition, definitionBuilder);\n        }\n\n        // commit-info has priority over configuration in index definition\n        String syncMode = null;\n        if (commitInfo != null) {\n            syncMode = (String) commitInfo.getInfo().get(SYNC_MODE_PROPERTY);\n        }\n\n        if (syncMode == null) {\n            PropertyState syncModeProp = indexDefinition.getDefinitionNodeState().getProperty(\"sync-mode\");\n            if (syncModeProp != null) {\n                syncMode = syncModeProp.getValue(Type.STRING);\n            }\n        }\n\n        if (SYNC_RT_MODE.equals(syncMode)) {\n            return new RealTimeBulkProcessorHandler(elasticConnection, indexDefinition, definitionBuilder);\n        }\n\n        return new ElasticBulkProcessorHandler(elasticConnection, indexDefinition, definitionBuilder);\n    }", "signature": "ElasticBulkProcessorHandler getBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "full_signature": "public static ElasticBulkProcessorHandler getBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "class_method_signature": "ElasticBulkProcessorHandler.getBulkProcessorHandler(@NotNull ElasticConnection elasticConnection,\n                                                                      @NotNull ElasticIndexDefinition indexDefinition,\n                                                                      @NotNull NodeBuilder definitionBuilder, CommitInfo commitInfo)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getDefinitionNodeState", "getValue", "containsKey", "getInfo", "get", "getInfo", "getProperty", "getDefinitionNodeState", "getValue", "equals"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}