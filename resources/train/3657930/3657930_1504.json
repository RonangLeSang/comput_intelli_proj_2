{"test_class": {"identifier": "UuidPredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/observation/filter/UuidPredicateTest.java"}, "test_case": {"identifier": "multipleUuidsMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void multipleUuidsMatch() {\n        String uuid = UUIDUtils.generateUUID();\n        UuidPredicate p = new UuidPredicate(\n                new String[] {UUIDUtils.generateUUID(), UUIDUtils.generateUUID(), uuid});\n        NodeState tree = createNodeWithUuid(uuid);\n        assertTrue(p.test(tree));\n    }", "signature": "void multipleUuidsMatch()", "full_signature": "@Test public void multipleUuidsMatch()", "class_method_signature": "UuidPredicateTest.multipleUuidsMatch()", "testcase": true, "constructor": false, "invocations": ["generateUUID", "generateUUID", "generateUUID", "createNodeWithUuid", "assertTrue", "test"]}, "focal_class": {"identifier": "UuidPredicate", "superclass": "", "interfaces": "implements Predicate<NodeState>, com.google.common.base.Predicate<NodeState>", "fields": [{"original_string": "private final String[] uuids;", "modifier": "private final", "type": "String[]", "declarator": "uuids", "var_name": "uuids"}], "methods": [{"identifier": "UuidPredicate", "parameters": "(@NotNull String[] uuids)", "modifiers": "public", "return": "", "signature": " UuidPredicate(@NotNull String[] uuids)", "full_signature": "public  UuidPredicate(@NotNull String[] uuids)", "class_method_signature": "UuidPredicate.UuidPredicate(@NotNull String[] uuids)", "testcase": false, "constructor": true}, {"identifier": "test", "parameters": "(NodeState node)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(NodeState node)", "full_signature": "@Override public boolean test(NodeState node)", "class_method_signature": "UuidPredicate.test(NodeState node)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(NodeState node)", "modifiers": "@Deprecated @Override public", "return": "boolean", "signature": "boolean apply(NodeState node)", "full_signature": "@Deprecated @Override public boolean apply(NodeState node)", "class_method_signature": "UuidPredicate.apply(NodeState node)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/UuidPredicate.java"}, "focal_method": {"identifier": "test", "parameters": "(NodeState node)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean test(NodeState node) {\n        if (uuids.length == 0) {\n            return false;\n        }\n\n        PropertyState uuidProperty = node.getProperty(JCR_UUID);\n        if (uuidProperty == null) {\n            return false;\n        }\n\n        String parentUuid = uuidProperty.getValue(Type.STRING);\n        for (String uuid : uuids) {\n            if (parentUuid.equals(uuid)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean test(NodeState node)", "full_signature": "@Override public boolean test(NodeState node)", "class_method_signature": "UuidPredicate.test(NodeState node)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getValue", "equals"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}