{"test_class": {"identifier": "DefaultStandbyBlobReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/DefaultStandbyBlobReaderTest.java"}, "test_case": {"identifier": "shouldReturnNegativeLengthIfBlobIsUnreadable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNegativeLengthIfBlobIsUnreadable() throws Exception {\n        BlobStore s = mock(BlobStore.class);\n        when(s.getBlobLength(\"id\")).thenReturn(-1L);\n        DefaultStandbyBlobReader r = new DefaultStandbyBlobReader(s);\n        assertEquals(-1L, r.getBlobLength(\"id\"));\n    }", "signature": "void shouldReturnNegativeLengthIfBlobIsUnreadable()", "full_signature": "@Test public void shouldReturnNegativeLengthIfBlobIsUnreadable()", "class_method_signature": "DefaultStandbyBlobReaderTest.shouldReturnNegativeLengthIfBlobIsUnreadable()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getBlobLength", "assertEquals", "getBlobLength"]}, "focal_class": {"identifier": "DefaultStandbyBlobReader", "superclass": "", "interfaces": "implements StandbyBlobReader", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(DefaultStandbyBlobReader.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultStandbyBlobReader.class)", "var_name": "log"}, {"original_string": "private final BlobStore store;", "modifier": "private final", "type": "BlobStore", "declarator": "store", "var_name": "store"}], "methods": [{"identifier": "DefaultStandbyBlobReader", "parameters": "(BlobStore store)", "modifiers": "", "return": "", "signature": " DefaultStandbyBlobReader(BlobStore store)", "full_signature": "  DefaultStandbyBlobReader(BlobStore store)", "class_method_signature": "DefaultStandbyBlobReader.DefaultStandbyBlobReader(BlobStore store)", "testcase": false, "constructor": true}, {"identifier": "readBlob", "parameters": "(String blobId)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream readBlob(String blobId)", "full_signature": "@Override public InputStream readBlob(String blobId)", "class_method_signature": "DefaultStandbyBlobReader.readBlob(String blobId)", "testcase": false, "constructor": false}, {"identifier": "getBlobLength", "parameters": "(String blobId)", "modifiers": "@Override public", "return": "long", "signature": "long getBlobLength(String blobId)", "full_signature": "@Override public long getBlobLength(String blobId)", "class_method_signature": "DefaultStandbyBlobReader.getBlobLength(String blobId)", "testcase": false, "constructor": false}], "file": "oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/DefaultStandbyBlobReader.java"}, "focal_method": {"identifier": "getBlobLength", "parameters": "(String blobId)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long getBlobLength(String blobId) {\n        if (store == null) {\n            return -1L;\n        }\n        \n        try {\n            return store.getBlobLength(blobId);\n        } catch (IOException e) {\n            log.warn(\"Error while reading blob content\", e);\n        }\n     \n        return -1L;\n    }", "signature": "long getBlobLength(String blobId)", "full_signature": "@Override public long getBlobLength(String blobId)", "class_method_signature": "DefaultStandbyBlobReader.getBlobLength(String blobId)", "testcase": false, "constructor": false, "invocations": ["getBlobLength", "warn"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}