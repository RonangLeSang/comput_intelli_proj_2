{"test_class": {"identifier": "ImmutableRootTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private ImmutableRoot root;", "modifier": "private", "type": "ImmutableRoot", "declarator": "root", "var_name": "root"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/core/ImmutableRootTest.java"}, "test_case": {"identifier": "testGetBlob", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBlob() {\n        assertNull(root.getBlob(\"reference\"));\n    }", "signature": "void testGetBlob()", "full_signature": "@Test public void testGetBlob()", "class_method_signature": "ImmutableRootTest.testGetBlob()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getBlob"]}, "focal_class": {"identifier": "ImmutableRoot", "superclass": "", "interfaces": "implements Root, ReadOnly", "fields": [{"original_string": "private final ImmutableTree rootTree;", "modifier": "private final", "type": "ImmutableTree", "declarator": "rootTree", "var_name": "rootTree"}, {"original_string": "private final AuthInfo authInfo;", "modifier": "private final", "type": "AuthInfo", "declarator": "authInfo", "var_name": "authInfo"}, {"original_string": "private final String wspName;", "modifier": "private final", "type": "String", "declarator": "wspName", "var_name": "wspName"}], "methods": [{"identifier": "ImmutableRoot", "parameters": "(@NotNull NodeState rootState)", "modifiers": "public", "return": "", "signature": " ImmutableRoot(@NotNull NodeState rootState)", "full_signature": "public  ImmutableRoot(@NotNull NodeState rootState)", "class_method_signature": "ImmutableRoot.ImmutableRoot(@NotNull NodeState rootState)", "testcase": false, "constructor": true}, {"identifier": "ImmutableRoot", "parameters": "(@NotNull Root root)", "modifiers": "public", "return": "", "signature": " ImmutableRoot(@NotNull Root root)", "full_signature": "public  ImmutableRoot(@NotNull Root root)", "class_method_signature": "ImmutableRoot.ImmutableRoot(@NotNull Root root)", "testcase": false, "constructor": true}, {"identifier": "ImmutableRoot", "parameters": "(@NotNull ImmutableTree rootTree)", "modifiers": "public", "return": "", "signature": " ImmutableRoot(@NotNull ImmutableTree rootTree)", "full_signature": "public  ImmutableRoot(@NotNull ImmutableTree rootTree)", "class_method_signature": "ImmutableRoot.ImmutableRoot(@NotNull ImmutableTree rootTree)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(@NotNull Root root)", "modifiers": "public static", "return": "ImmutableRoot", "signature": "ImmutableRoot getInstance(@NotNull Root root)", "full_signature": "public static ImmutableRoot getInstance(@NotNull Root root)", "class_method_signature": "ImmutableRoot.getInstance(@NotNull Root root)", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "(@NotNull String path)", "modifiers": "@NotNull @Override public", "return": "ImmutableTree", "signature": "ImmutableTree getTree(@NotNull String path)", "full_signature": "@NotNull @Override public ImmutableTree getTree(@NotNull String path)", "class_method_signature": "ImmutableRoot.getTree(@NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(String sourcePath, String destPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean move(String sourcePath, String destPath)", "full_signature": "@Override public boolean move(String sourcePath, String destPath)", "class_method_signature": "ImmutableRoot.move(String sourcePath, String destPath)", "testcase": false, "constructor": false}, {"identifier": "rebase", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rebase()", "full_signature": "@Override public void rebase()", "class_method_signature": "ImmutableRoot.rebase()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "ImmutableRoot.refresh()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(@NotNull Map<String, Object> info)", "modifiers": "@Override public", "return": "void", "signature": "void commit(@NotNull Map<String, Object> info)", "full_signature": "@Override public void commit(@NotNull Map<String, Object> info)", "class_method_signature": "ImmutableRoot.commit(@NotNull Map<String, Object> info)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commit()", "full_signature": "@Override public void commit()", "class_method_signature": "ImmutableRoot.commit()", "testcase": false, "constructor": false}, {"identifier": "hasPendingChanges", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPendingChanges()", "full_signature": "@Override public boolean hasPendingChanges()", "class_method_signature": "ImmutableRoot.hasPendingChanges()", "testcase": false, "constructor": false}, {"identifier": "getQueryEngine", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "QueryEngine", "signature": "QueryEngine getQueryEngine()", "full_signature": "@NotNull @Override public QueryEngine getQueryEngine()", "class_method_signature": "ImmutableRoot.getQueryEngine()", "testcase": false, "constructor": false}, {"identifier": "createBlob", "parameters": "(@NotNull InputStream stream)", "modifiers": "@Override @NotNull public", "return": "Blob", "signature": "Blob createBlob(@NotNull InputStream stream)", "full_signature": "@Override @NotNull public Blob createBlob(@NotNull InputStream stream)", "class_method_signature": "ImmutableRoot.createBlob(@NotNull InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getBlob", "parameters": "(@NotNull String reference)", "modifiers": "@Override public", "return": "Blob", "signature": "Blob getBlob(@NotNull String reference)", "full_signature": "@Override public Blob getBlob(@NotNull String reference)", "class_method_signature": "ImmutableRoot.getBlob(@NotNull String reference)", "testcase": false, "constructor": false}, {"identifier": "getContentSession", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ContentSession", "signature": "ContentSession getContentSession()", "full_signature": "@NotNull @Override public ContentSession getContentSession()", "class_method_signature": "ImmutableRoot.getContentSession()", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/core/ImmutableRoot.java"}, "focal_method": {"identifier": "getBlob", "parameters": "(@NotNull String reference)", "modifiers": "@Override public", "return": "Blob", "body": "@Override\n    public Blob getBlob(@NotNull String reference) {\n        return null;\n    }", "signature": "Blob getBlob(@NotNull String reference)", "full_signature": "@Override public Blob getBlob(@NotNull String reference)", "class_method_signature": "ImmutableRoot.getBlob(@NotNull String reference)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}