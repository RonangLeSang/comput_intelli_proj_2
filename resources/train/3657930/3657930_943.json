{"test_class": {"identifier": "TokenLoginModuleTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/token/TokenLoginModuleTest.java"}, "test_case": {"identifier": "testGuestLogin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGuestLogin() throws Exception {\n        try (ContentSession cs = login(new GuestCredentials())) {\n            fail(\"GuestCredentials login should fail\");\n        } catch (LoginException e) {\n            // success\n        }\n    }", "signature": "void testGuestLogin()", "full_signature": "@Test public void testGuestLogin()", "class_method_signature": "TokenLoginModuleTest.testGuestLogin()", "testcase": true, "constructor": false, "invocations": ["login", "fail"]}, "focal_class": {"identifier": "TokenLoginModule", "superclass": "extends AbstractLoginModule", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TokenLoginModule.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TokenLoginModule.class)", "var_name": "log"}, {"original_string": "private TokenProvider tokenProvider;", "modifier": "private", "type": "TokenProvider", "declarator": "tokenProvider", "var_name": "tokenProvider"}, {"original_string": "private TokenCredentials tokenCredentials;", "modifier": "private", "type": "TokenCredentials", "declarator": "tokenCredentials", "var_name": "tokenCredentials"}, {"original_string": "private TokenInfo tokenInfo;", "modifier": "private", "type": "TokenInfo", "declarator": "tokenInfo", "var_name": "tokenInfo"}, {"original_string": "private Principal principal;", "modifier": "private", "type": "Principal", "declarator": "principal", "var_name": "principal"}, {"original_string": "private Set<? extends Principal> principals;", "modifier": "private", "type": "Set<? extends Principal>", "declarator": "principals", "var_name": "principals"}, {"original_string": "private AuthInfo authInfo;", "modifier": "private", "type": "AuthInfo", "declarator": "authInfo", "var_name": "authInfo"}], "methods": [{"identifier": "login", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean login()", "full_signature": "@Override public boolean login()", "class_method_signature": "TokenLoginModule.login()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean commit()", "full_signature": "@Override public boolean commit()", "class_method_signature": "TokenLoginModule.commit()", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean logout()", "full_signature": "@Override public boolean logout()", "class_method_signature": "TokenLoginModule.logout()", "testcase": false, "constructor": false}, {"identifier": "getSupportedCredentials", "parameters": "()", "modifiers": "@NotNull @Override protected", "return": "Set<Class>", "signature": "Set<Class> getSupportedCredentials()", "full_signature": "@NotNull @Override protected Set<Class> getSupportedCredentials()", "class_method_signature": "TokenLoginModule.getSupportedCredentials()", "testcase": false, "constructor": false}, {"identifier": "clearState", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void clearState()", "full_signature": "@Override protected void clearState()", "class_method_signature": "TokenLoginModule.clearState()", "testcase": false, "constructor": false}, {"identifier": "getTokenProvider", "parameters": "()", "modifiers": "@Nullable private", "return": "TokenProvider", "signature": "TokenProvider getTokenProvider()", "full_signature": "@Nullable private TokenProvider getTokenProvider()", "class_method_signature": "TokenLoginModule.getTokenProvider()", "testcase": false, "constructor": false}, {"identifier": "getAuthInfo", "parameters": "(@NotNull TokenInfo tokenInfo, @NotNull Iterable<? extends Principal> principals)", "modifiers": "@NotNull private static", "return": "AuthInfo", "signature": "AuthInfo getAuthInfo(@NotNull TokenInfo tokenInfo, @NotNull Iterable<? extends Principal> principals)", "full_signature": "@NotNull private static AuthInfo getAuthInfo(@NotNull TokenInfo tokenInfo, @NotNull Iterable<? extends Principal> principals)", "class_method_signature": "TokenLoginModule.getAuthInfo(@NotNull TokenInfo tokenInfo, @NotNull Iterable<? extends Principal> principals)", "testcase": false, "constructor": false}, {"identifier": "updateSubject", "parameters": "(@NotNull Subject subject, @NotNull TokenCredentials tc, @Nullable AuthInfo authInfo)", "modifiers": "private static", "return": "void", "signature": "void updateSubject(@NotNull Subject subject, @NotNull TokenCredentials tc, @Nullable AuthInfo authInfo)", "full_signature": "private static void updateSubject(@NotNull Subject subject, @NotNull TokenCredentials tc, @Nullable AuthInfo authInfo)", "class_method_signature": "TokenLoginModule.updateSubject(@NotNull Subject subject, @NotNull TokenCredentials tc, @Nullable AuthInfo authInfo)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenLoginModule.java"}, "focal_method": {"identifier": "login", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean login() throws LoginException {\n        tokenProvider = getTokenProvider();\n        if (tokenProvider == null) {\n            return false;\n        }\n\n        Credentials credentials = getCredentials();\n        if (credentials instanceof TokenCredentials) {\n            TokenCredentials tc = (TokenCredentials) credentials;\n            TokenAuthentication authentication = new TokenAuthentication(tokenProvider);\n            if (authentication.authenticate(tc)) {\n                tokenCredentials = tc;\n                tokenInfo = authentication.getTokenInfo();\n                principal = authentication.getUserPrincipal();\n\n                log.debug(\"Login: adding login name to shared state.\");\n                sharedState.put(SHARED_KEY_LOGIN_NAME, tokenInfo.getUserId());\n                return true;\n            }\n        }\n\n        return false;\n    }", "signature": "boolean login()", "full_signature": "@Override public boolean login()", "class_method_signature": "TokenLoginModule.login()", "testcase": false, "constructor": false, "invocations": ["getTokenProvider", "getCredentials", "authenticate", "getTokenInfo", "getUserPrincipal", "debug", "put", "getUserId"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}