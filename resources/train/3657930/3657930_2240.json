{"test_class": {"identifier": "ExternalGroupPrincipalProviderTest", "superclass": "extends AbstractPrincipalTest", "interfaces": "", "fields": [], "file": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalGroupPrincipalProviderTest.java"}, "test_case": {"identifier": "testFindPrincipalsByTypeAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindPrincipalsByTypeAll() throws Exception {\n        Set<? extends Principal> res = ImmutableSet.copyOf(principalProvider.findPrincipals(PrincipalManager.SEARCH_TYPE_ALL));\n        assertEquals(getExpectedAllSearchResult(USER_ID), res);\n    }", "signature": "void testFindPrincipalsByTypeAll()", "full_signature": "@Test public void testFindPrincipalsByTypeAll()", "class_method_signature": "ExternalGroupPrincipalProviderTest.testFindPrincipalsByTypeAll()", "testcase": true, "constructor": false, "invocations": ["copyOf", "findPrincipals", "assertEquals", "getExpectedAllSearchResult"]}, "focal_class": {"identifier": "ExternalGroupPrincipalProvider", "superclass": "", "interfaces": "implements PrincipalProvider, ExternalIdentityConstants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ExternalGroupPrincipalProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExternalGroupPrincipalProvider.class)", "var_name": "log"}, {"original_string": "private static final String BINDING_PRINCIPAL_NAMES = \"principalNames\";", "modifier": "private static final", "type": "String", "declarator": "BINDING_PRINCIPAL_NAMES = \"principalNames\"", "var_name": "BINDING_PRINCIPAL_NAMES"}, {"original_string": "private final Root root;", "modifier": "private final", "type": "Root", "declarator": "root", "var_name": "root"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private final UserManager userManager;", "modifier": "private final", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "private final AutoMembershipPrincipals autoMembershipPrincipals;", "modifier": "private final", "type": "AutoMembershipPrincipals", "declarator": "autoMembershipPrincipals", "var_name": "autoMembershipPrincipals"}], "methods": [{"identifier": "ExternalGroupPrincipalProvider", "parameters": "(@NotNull Root root, @NotNull UserConfiguration uc,\n                                   @NotNull NamePathMapper namePathMapper,\n                                   @NotNull Map<String, String[]> autoMembershipMapping)", "modifiers": "", "return": "", "signature": " ExternalGroupPrincipalProvider(@NotNull Root root, @NotNull UserConfiguration uc,\n                                   @NotNull NamePathMapper namePathMapper,\n                                   @NotNull Map<String, String[]> autoMembershipMapping)", "full_signature": "  ExternalGroupPrincipalProvider(@NotNull Root root, @NotNull UserConfiguration uc,\n                                   @NotNull NamePathMapper namePathMapper,\n                                   @NotNull Map<String, String[]> autoMembershipMapping)", "class_method_signature": "ExternalGroupPrincipalProvider.ExternalGroupPrincipalProvider(@NotNull Root root, @NotNull UserConfiguration uc,\n                                   @NotNull NamePathMapper namePathMapper,\n                                   @NotNull Map<String, String[]> autoMembershipMapping)", "testcase": false, "constructor": true}, {"identifier": "getPrincipal", "parameters": "(@NotNull String principalName)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal getPrincipal(@NotNull String principalName)", "full_signature": "@Override public Principal getPrincipal(@NotNull String principalName)", "class_method_signature": "ExternalGroupPrincipalProvider.getPrincipal(@NotNull String principalName)", "testcase": false, "constructor": false}, {"identifier": "getMembershipPrincipals", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "Set<Principal>", "signature": "Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "full_signature": "@NotNull @Override public Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "class_method_signature": "ExternalGroupPrincipalProvider.getMembershipPrincipals(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "(@NotNull String userID)", "modifiers": "@NotNull @Override public", "return": "Set<? extends Principal>", "signature": "Set<? extends Principal> getPrincipals(@NotNull String userID)", "full_signature": "@NotNull @Override public Set<? extends Principal> getPrincipals(@NotNull String userID)", "class_method_signature": "ExternalGroupPrincipalProvider.getPrincipals(@NotNull String userID)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(@Nullable String nameHint, int searchType)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, int searchType)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, int searchType)", "class_method_signature": "ExternalGroupPrincipalProvider.findPrincipals(@Nullable String nameHint, int searchType)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(int searchType)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(int searchType)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(int searchType)", "class_method_signature": "ExternalGroupPrincipalProvider.findPrincipals(int searchType)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "class_method_signature": "ExternalGroupPrincipalProvider.findPrincipals(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "testcase": false, "constructor": false}, {"identifier": "getIdpName", "parameters": "(@NotNull Tree userTree)", "modifiers": "@Nullable private", "return": "String", "signature": "String getIdpName(@NotNull Tree userTree)", "full_signature": "@Nullable private String getIdpName(@NotNull Tree userTree)", "class_method_signature": "ExternalGroupPrincipalProvider.getIdpName(@NotNull Tree userTree)", "testcase": false, "constructor": false}, {"identifier": "getGroupPrincipals", "parameters": "(@Nullable Authorizable authorizable)", "modifiers": "private", "return": "Set<Principal>", "signature": "Set<Principal> getGroupPrincipals(@Nullable Authorizable authorizable)", "full_signature": "private Set<Principal> getGroupPrincipals(@Nullable Authorizable authorizable)", "class_method_signature": "ExternalGroupPrincipalProvider.getGroupPrincipals(@Nullable Authorizable authorizable)", "testcase": false, "constructor": false}, {"identifier": "getGroupPrincipals", "parameters": "(@NotNull Tree userTree)", "modifiers": "private", "return": "Set<Principal>", "signature": "Set<Principal> getGroupPrincipals(@NotNull Tree userTree)", "full_signature": "private Set<Principal> getGroupPrincipals(@NotNull Tree userTree)", "class_method_signature": "ExternalGroupPrincipalProvider.getGroupPrincipals(@NotNull Tree userTree)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(@NotNull String nameHint, boolean exactMatch)", "modifiers": "@Nullable private", "return": "Result", "signature": "Result findPrincipals(@NotNull String nameHint, boolean exactMatch)", "full_signature": "@Nullable private Result findPrincipals(@NotNull String nameHint, boolean exactMatch)", "class_method_signature": "ExternalGroupPrincipalProvider.findPrincipals(@NotNull String nameHint, boolean exactMatch)", "testcase": false, "constructor": false}, {"identifier": "buildBinding", "parameters": "(@NotNull String nameHint, boolean exactMatch)", "modifiers": "@NotNull private static", "return": "Map<String, ? extends PropertyValue>", "signature": "Map<String, ? extends PropertyValue> buildBinding(@NotNull String nameHint, boolean exactMatch)", "full_signature": "@NotNull private static Map<String, ? extends PropertyValue> buildBinding(@NotNull String nameHint, boolean exactMatch)", "class_method_signature": "ExternalGroupPrincipalProvider.buildBinding(@NotNull String nameHint, boolean exactMatch)", "testcase": false, "constructor": false}], "file": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalGroupPrincipalProvider.java"}, "focal_method": {"identifier": "findPrincipals", "parameters": "(@Nullable String nameHint, int searchType)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "body": "@NotNull\n    @Override\n    public Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, int searchType) {\n        if (PrincipalManager.SEARCH_TYPE_NOT_GROUP != searchType) {\n            Result result = findPrincipals(Strings.nullToEmpty(nameHint), false);\n            if (result != null) {\n                return Iterators.filter(new GroupPrincipalIterator(nameHint, result), Predicates.notNull());\n            }\n        }\n\n        return Collections.emptyIterator();\n    }", "signature": "Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, int searchType)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, int searchType)", "class_method_signature": "ExternalGroupPrincipalProvider.findPrincipals(@Nullable String nameHint, int searchType)", "testcase": false, "constructor": false, "invocations": ["findPrincipals", "nullToEmpty", "filter", "notNull", "emptyIterator"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}