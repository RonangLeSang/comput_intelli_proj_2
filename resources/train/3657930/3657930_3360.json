{"test_class": {"identifier": "TextPopulatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private File indexDir = null;", "modifier": "private", "type": "File", "declarator": "indexDir = null", "var_name": "indexDir"}, {"original_string": "private File csv = null;", "modifier": "private", "type": "File", "declarator": "csv = null", "var_name": "csv"}, {"original_string": "private FakeTextWriter textWriter = new FakeTextWriter();", "modifier": "private", "type": "FakeTextWriter", "declarator": "textWriter = new FakeTextWriter()", "var_name": "textWriter"}, {"original_string": "private PopulatorStats stats = new PopulatorStats();", "modifier": "private", "type": "PopulatorStats", "declarator": "stats = new PopulatorStats()", "var_name": "stats"}, {"original_string": "private TextPopulator textPopulator = new TextPopulator(textWriter);", "modifier": "private", "type": "TextPopulator", "declarator": "textPopulator = new TextPopulator(textWriter)", "var_name": "textPopulator"}], "file": "oak-run/src/test/java/org/apache/jackrabbit/oak/plugins/tika/TextPopulatorTest.java"}, "test_case": {"identifier": "indexDoesNotHaveDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void indexDoesNotHaveDocument() throws Exception {\n        setupCSV(\"/somethingRandom\");\n\n        textPopulator.populate(csv, indexDir);\n        assertEquals(\"No indexed doc not marked as error\",\n                1, stats.errored);\n\n        textPopulator.populate(csv, indexDir);\n        assertEquals(\"Repeated run for no indexed doc error should get processed again\", 0, stats.ignored);\n\n        assertStatsInvariants();\n    }", "signature": "void indexDoesNotHaveDocument()", "full_signature": "@Test public void indexDoesNotHaveDocument()", "class_method_signature": "TextPopulatorTest.indexDoesNotHaveDocument()", "testcase": true, "constructor": false, "invocations": ["setupCSV", "populate", "assertEquals", "populate", "assertEquals", "assertStatsInvariants"]}, "focal_class": {"identifier": "TextPopulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TextPopulator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TextPopulator.class)", "var_name": "log"}, {"original_string": "static final String BLOB_ID = \"blobId\";", "modifier": "static final", "type": "String", "declarator": "BLOB_ID = \"blobId\"", "var_name": "BLOB_ID"}, {"original_string": "static final String ERROR_TEXT = \"TextExtractionError\";", "modifier": "static final", "type": "String", "declarator": "ERROR_TEXT = \"TextExtractionError\"", "var_name": "ERROR_TEXT"}, {"original_string": "private final TextWriter textWriter;", "modifier": "private final", "type": "TextWriter", "declarator": "textWriter", "var_name": "textWriter"}, {"original_string": "private PopulatorStats stats;", "modifier": "private", "type": "PopulatorStats", "declarator": "stats", "var_name": "stats"}], "methods": [{"identifier": "TextPopulator", "parameters": "(TextWriter textWriter)", "modifiers": "", "return": "", "signature": " TextPopulator(TextWriter textWriter)", "full_signature": "  TextPopulator(TextWriter textWriter)", "class_method_signature": "TextPopulator.TextPopulator(TextWriter textWriter)", "testcase": false, "constructor": true}, {"identifier": "setStats", "parameters": "(PopulatorStats stats)", "modifiers": "", "return": "void", "signature": "void setStats(PopulatorStats stats)", "full_signature": " void setStats(PopulatorStats stats)", "class_method_signature": "TextPopulator.setStats(PopulatorStats stats)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(File dataFile, File indexDir)", "modifiers": "", "return": "void", "signature": "void populate(File dataFile, File indexDir)", "full_signature": " void populate(File dataFile, File indexDir)", "class_method_signature": "TextPopulator.populate(File dataFile, File indexDir)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "(DirectoryReader reader, IndexSearcher searcher, String path)", "modifiers": "private static", "return": "String", "signature": "String getText(DirectoryReader reader, IndexSearcher searcher, String path)", "full_signature": "private static String getText(DirectoryReader reader, IndexSearcher searcher, String path)", "class_method_signature": "TextPopulator.getText(DirectoryReader reader, IndexSearcher searcher, String path)", "testcase": false, "constructor": false}], "file": "oak-run/src/main/java/org/apache/jackrabbit/oak/plugins/tika/TextPopulator.java"}, "focal_method": {"identifier": "populate", "parameters": "(File dataFile, File indexDir)", "modifiers": "", "return": "void", "body": "void populate(File dataFile, File indexDir) throws IOException {\n        try (Closer closer = Closer.create()) {\n            Iterable<CSVRecord> csvRecords = closer.register(CSVParser.parse(dataFile, UTF_8, FORMAT));\n\n            final FSDirectory dir = closer.register(FSDirectory.open(indexDir));\n            final DirectoryReader reader = closer.register(DirectoryReader.open(dir));\n            final IndexSearcher searcher = new IndexSearcher(reader);\n\n            for (CSVRecord record : csvRecords) {\n                String blobId = record.get(BLOB_ID);\n                String jcrPath = record.get(JCR_PATH);\n\n                if (!textWriter.isProcessed(blobId)) {\n                    String text = getText(reader, searcher, jcrPath);\n\n                    stats.processed++;\n\n                    if (text == null) {\n                        // Ignore errors as we might be processing partial OR incorrect index\n                        // writer.markError(blobId);\n                        stats.errored++;\n                    } else if (ERROR_TEXT.equals(text)) {\n                        textWriter.markError(blobId);\n                        stats.errored++;\n                    } else if (text.length() == 0) {\n                        textWriter.markEmpty(blobId);\n                        stats.empty++;\n                    } else {\n                        textWriter.write(blobId, text);\n                        stats.parsed++;\n                    }\n                } else {\n                    stats.ignored++;\n                }\n\n                stats.readAndDumpStatsIfRequired(jcrPath);\n            }\n            log.info(stats.toString());\n        }\n    }", "signature": "void populate(File dataFile, File indexDir)", "full_signature": " void populate(File dataFile, File indexDir)", "class_method_signature": "TextPopulator.populate(File dataFile, File indexDir)", "testcase": false, "constructor": false, "invocations": ["create", "register", "parse", "register", "open", "register", "open", "get", "get", "isProcessed", "getText", "equals", "markError", "length", "markEmpty", "write", "readAndDumpStatsIfRequired", "info", "toString"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}