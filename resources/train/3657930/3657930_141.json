{"test_class": {"identifier": "CheckpointsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public DocumentMKBuilderProvider builderProvider = new DocumentMKBuilderProvider();", "modifier": "@Rule\n    public", "type": "DocumentMKBuilderProvider", "declarator": "builderProvider = new DocumentMKBuilderProvider()", "var_name": "builderProvider"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private DocumentNodeStore store;", "modifier": "private", "type": "DocumentNodeStore", "declarator": "store", "var_name": "store"}], "file": "oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/CheckpointsTest.java"}, "test_case": {"identifier": "crossClusterCheckpointNewClusterNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void crossClusterCheckpointNewClusterNode() throws Exception {\n        DocumentStore store = new MemoryDocumentStore();\n        DocumentNodeStore ns1 = builderProvider.newBuilder().setClusterId(1)\n                .setDocumentStore(store).setAsyncDelay(0).getNodeStore();\n\n        // create 'foo' on ns1\n        NodeBuilder b1 = ns1.getRoot().builder();\n        b1.child(\"foo\");\n        ns1.merge(b1, EmptyHook.INSTANCE, CommitInfo.EMPTY);\n\n        // checkpoint sees 'foo' but not 'bar'\n        String checkpoint = ns1.checkpoint(Long.MAX_VALUE);\n\n        // create 'bar' on ns1\n        b1 = ns1.getRoot().builder();\n        b1.child(\"bar\");\n        ns1.merge(b1, EmptyHook.INSTANCE, CommitInfo.EMPTY);\n\n        // make visible\n        ns1.runBackgroundOperations();\n\n        // now start second node store\n        DocumentNodeStore ns2 = builderProvider.newBuilder().setClusterId(2)\n                .setDocumentStore(store).setAsyncDelay(0).getNodeStore();\n        NodeBuilder b2 = ns2.getRoot().builder();\n        b2.child(\"baz\");\n        ns2.merge(b2, EmptyHook.INSTANCE, CommitInfo.EMPTY);\n\n        NodeState root = ns2.retrieve(checkpoint);\n        assertNotNull(root);\n        assertTrue(root.hasChildNode(\"foo\"));\n        assertFalse(root.hasChildNode(\"bar\"));\n        assertFalse(root.hasChildNode(\"baz\"));\n    }", "signature": "void crossClusterCheckpointNewClusterNode()", "full_signature": "@Test public void crossClusterCheckpointNewClusterNode()", "class_method_signature": "CheckpointsTest.crossClusterCheckpointNewClusterNode()", "testcase": true, "constructor": false, "invocations": ["getNodeStore", "setAsyncDelay", "setDocumentStore", "setClusterId", "newBuilder", "builder", "getRoot", "child", "merge", "checkpoint", "builder", "getRoot", "child", "merge", "runBackgroundOperations", "getNodeStore", "setAsyncDelay", "setDocumentStore", "setClusterId", "newBuilder", "builder", "getRoot", "child", "merge", "retrieve", "assertNotNull", "assertTrue", "hasChildNode", "assertFalse", "hasChildNode", "assertFalse", "hasChildNode"]}, "focal_class": {"identifier": "Checkpoints", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Checkpoints.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Checkpoints.class)", "var_name": "LOG"}, {"original_string": "private static final String ID = \"checkpoint\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"checkpoint\"", "var_name": "ID"}, {"original_string": "private static final String PROP_CHECKPOINT = \"data\";", "modifier": "private static final", "type": "String", "declarator": "PROP_CHECKPOINT = \"data\"", "var_name": "PROP_CHECKPOINT"}, {"original_string": "static final int CLEANUP_INTERVAL = 100;", "modifier": "static final", "type": "int", "declarator": "CLEANUP_INTERVAL = 100", "var_name": "CLEANUP_INTERVAL"}, {"original_string": "private final DocumentNodeStore nodeStore;", "modifier": "private final", "type": "DocumentNodeStore", "declarator": "nodeStore", "var_name": "nodeStore"}, {"original_string": "private final DocumentStore store;", "modifier": "private final", "type": "DocumentStore", "declarator": "store", "var_name": "store"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private final AtomicInteger createCounter = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "createCounter = new AtomicInteger()", "var_name": "createCounter"}, {"original_string": "private final Object cleanupLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "cleanupLock = new Object()", "var_name": "cleanupLock"}], "methods": [{"identifier": "Checkpoints", "parameters": "(DocumentNodeStore store)", "modifiers": "", "return": "", "signature": " Checkpoints(DocumentNodeStore store)", "full_signature": "  Checkpoints(DocumentNodeStore store)", "class_method_signature": "Checkpoints.Checkpoints(DocumentNodeStore store)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(long lifetimeInMillis, Map<String, String> info)", "modifiers": "public", "return": "Revision", "signature": "Revision create(long lifetimeInMillis, Map<String, String> info)", "full_signature": "public Revision create(long lifetimeInMillis, Map<String, String> info)", "class_method_signature": "Checkpoints.create(long lifetimeInMillis, Map<String, String> info)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(String checkpoint)", "modifiers": "public", "return": "void", "signature": "void release(String checkpoint)", "full_signature": "public void release(String checkpoint)", "class_method_signature": "Checkpoints.release(String checkpoint)", "testcase": false, "constructor": false}, {"identifier": "getOldestRevisionToKeep", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Nullable public", "return": "Revision", "signature": "Revision getOldestRevisionToKeep()", "full_signature": "@SuppressWarnings(\"unchecked\") @Nullable public Revision getOldestRevisionToKeep()", "class_method_signature": "Checkpoints.getOldestRevisionToKeep()", "testcase": false, "constructor": false}, {"identifier": "getCheckpoints", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NotNull", "return": "SortedMap<Revision, Info>", "signature": "SortedMap<Revision, Info> getCheckpoints()", "full_signature": "@SuppressWarnings(\"unchecked\") @NotNull SortedMap<Revision, Info> getCheckpoints()", "class_method_signature": "Checkpoints.getCheckpoints()", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(@NotNull String checkpoint)", "modifiers": "@Nullable", "return": "RevisionVector", "signature": "RevisionVector retrieve(@NotNull String checkpoint)", "full_signature": "@Nullable RevisionVector retrieve(@NotNull String checkpoint)", "class_method_signature": "Checkpoints.retrieve(@NotNull String checkpoint)", "testcase": false, "constructor": false}, {"identifier": "setInfoProperty", "parameters": "(@NotNull String checkpoint, @NotNull String key, @Nullable String value)", "modifiers": "", "return": "void", "signature": "void setInfoProperty(@NotNull String checkpoint, @NotNull String key, @Nullable String value)", "full_signature": " void setInfoProperty(@NotNull String checkpoint, @NotNull String key, @Nullable String value)", "class_method_signature": "Checkpoints.setInfoProperty(@NotNull String checkpoint, @NotNull String key, @Nullable String value)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "", "return": "int", "signature": "int size()", "full_signature": " int size()", "class_method_signature": "Checkpoints.size()", "testcase": false, "constructor": false}, {"identifier": "performCleanupIfRequired", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void performCleanupIfRequired()", "full_signature": "private void performCleanupIfRequired()", "class_method_signature": "Checkpoints.performCleanupIfRequired()", "testcase": false, "constructor": false}, {"identifier": "createIfNotExist", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createIfNotExist()", "full_signature": "private void createIfNotExist()", "class_method_signature": "Checkpoints.createIfNotExist()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(Revision checkpoint)", "modifiers": "private", "return": "RevisionVector", "signature": "RevisionVector expand(Revision checkpoint)", "full_signature": "private RevisionVector expand(Revision checkpoint)", "class_method_signature": "Checkpoints.expand(Revision checkpoint)", "testcase": false, "constructor": false}], "file": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/Checkpoints.java"}, "focal_method": {"identifier": "retrieve", "parameters": "(@NotNull String checkpoint)", "modifiers": "@Nullable", "return": "RevisionVector", "body": "@Nullable\n    RevisionVector retrieve(@NotNull String checkpoint)\n            throws IllegalArgumentException {\n        Revision r;\n        try {\n            r = Revision.fromString(checkNotNull(checkpoint));\n        } catch (IllegalArgumentException e) {\n            LOG.warn(\"Malformed checkpoint reference: {}\", checkpoint);\n            return null;\n        }\n        Info info = getCheckpoints().get(r);\n        if (info == null) {\n            return null;\n        }\n        RevisionVector rv = info.getCheckpoint();\n        if (rv == null) {\n            rv = expand(r);\n        }\n        return rv;\n    }", "signature": "RevisionVector retrieve(@NotNull String checkpoint)", "full_signature": "@Nullable RevisionVector retrieve(@NotNull String checkpoint)", "class_method_signature": "Checkpoints.retrieve(@NotNull String checkpoint)", "testcase": false, "constructor": false, "invocations": ["fromString", "checkNotNull", "warn", "get", "getCheckpoints", "getCheckpoint", "expand"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}