{"test_class": {"identifier": "IndexDefinitionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NodeState root = INITIAL_CONTENT;", "modifier": "private", "type": "NodeState", "declarator": "root = INITIAL_CONTENT", "var_name": "root"}, {"original_string": "private final NodeBuilder builder = root.builder();", "modifier": "private final", "type": "NodeBuilder", "declarator": "builder = root.builder()", "var_name": "builder"}, {"original_string": "final String testNodeTypeDefn = \"[oak:TestMixA]\\n\" +\n            \"  mixin\\n\" +\n            \"\\n\" +\n            \"[oak:TestSuperType]\\n\" +\n            \"- * (UNDEFINED) multiple\\n\" +\n            \"\\n\" +\n            \"[oak:TestTypeA] > oak:TestSuperType\\n\" +\n            \"- * (UNDEFINED) multiple\\n\" +\n            \"\\n\" +\n            \"[oak:TestTypeB] > oak:TestSuperType, oak:TestMixA\\n\" +\n            \"- * (UNDEFINED) multiple\";", "modifier": "final", "type": "String", "declarator": "testNodeTypeDefn = \"[oak:TestMixA]\\n\" +\n            \"  mixin\\n\" +\n            \"\\n\" +\n            \"[oak:TestSuperType]\\n\" +\n            \"- * (UNDEFINED) multiple\\n\" +\n            \"\\n\" +\n            \"[oak:TestTypeA] > oak:TestSuperType\\n\" +\n            \"- * (UNDEFINED) multiple\\n\" +\n            \"\\n\" +\n            \"[oak:TestTypeB] > oak:TestSuperType, oak:TestMixA\\n\" +\n            \"- * (UNDEFINED) multiple\"", "var_name": "testNodeTypeDefn"}], "file": "oak-search/src/test/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinitionTest.java"}, "test_case": {"identifier": "nodeFullTextIndexed_Regex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nodeFullTextIndexed_Regex() throws Exception {\n        NodeBuilder rules = builder.child(INDEX_RULES);\n        rules.child(\"nt:folder\");\n        TestUtil.child(rules, \"nt:folder/properties/prop1\")\n                .setProperty(PROP_NAME, \".*\")\n                .setProperty(FulltextIndexConstants.PROP_ANALYZED, true)\n                .setProperty(FulltextIndexConstants.PROP_IS_REGEX, true);\n\n        IndexDefinition defn = new IndexDefinition(root, builder.getNodeState(), \"/foo\");\n        IndexingRule rule = defn.getApplicableIndexingRule(asState(newNode(\"nt:folder\")));\n        assertNotNull(rule);\n        assertFalse(rule.isNodeFullTextIndexed());\n\n        TestUtil.child(rules, \"nt:folder/properties/prop1\")\n                .setProperty(FulltextIndexConstants.PROP_NODE_SCOPE_INDEX, true);\n        defn = new IndexDefinition(root, builder.getNodeState(), \"/foo\");\n        rule = defn.getApplicableIndexingRule(asState(newNode(\"nt:folder\")));\n        assertTrue(rule.isNodeFullTextIndexed());\n        assertTrue(rule.indexesAllNodesOfMatchingType());\n    }", "signature": "void nodeFullTextIndexed_Regex()", "full_signature": "@Test public void nodeFullTextIndexed_Regex()", "class_method_signature": "IndexDefinitionTest.nodeFullTextIndexed_Regex()", "testcase": true, "constructor": false, "invocations": ["child", "child", "setProperty", "setProperty", "setProperty", "child", "getNodeState", "getApplicableIndexingRule", "asState", "newNode", "assertNotNull", "assertFalse", "isNodeFullTextIndexed", "setProperty", "child", "getNodeState", "getApplicableIndexingRule", "asState", "newNode", "assertTrue", "isNodeFullTextIndexed", "assertTrue", "indexesAllNodesOfMatchingType"]}, "focal_class": {"identifier": "IndexDefinition", "superclass": "", "interfaces": "implements Aggregate.AggregateMapper", "fields": [{"original_string": "private static final String OAK_CHILD_ORDER = \":childOrder\";", "modifier": "private static final", "type": "String", "declarator": "OAK_CHILD_ORDER = \":childOrder\"", "var_name": "OAK_CHILD_ORDER"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(IndexDefinition.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(IndexDefinition.class)", "var_name": "log"}, {"original_string": "private static boolean disableStoredIndexDefinition;", "modifier": "private static", "type": "boolean", "declarator": "disableStoredIndexDefinition", "var_name": "disableStoredIndexDefinition"}, {"original_string": "public static final int DEFAULT_BLOB_SIZE = 1024 * 1024 - 1024;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BLOB_SIZE = 1024 * 1024 - 1024", "var_name": "DEFAULT_BLOB_SIZE"}, {"original_string": "public static final long DEFAULT_ENTRY_COUNT = 1000;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_ENTRY_COUNT = 1000", "var_name": "DEFAULT_ENTRY_COUNT"}, {"original_string": "public static final int DEFAULT_MAX_FIELD_LENGTH = 10000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAX_FIELD_LENGTH = 10000", "var_name": "DEFAULT_MAX_FIELD_LENGTH"}, {"original_string": "public static final int DEFAULT_MAX_EXTRACT_LENGTH = -10;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAX_EXTRACT_LENGTH = -10", "var_name": "DEFAULT_MAX_EXTRACT_LENGTH"}, {"original_string": "public static final String INDEX_VERSION = \":version\";", "modifier": "public static final", "type": "String", "declarator": "INDEX_VERSION = \":version\"", "var_name": "INDEX_VERSION"}, {"original_string": "public static final String INDEX_DEFINITION_NODE = \":index-definition\";", "modifier": "public static final", "type": "String", "declarator": "INDEX_DEFINITION_NODE = \":index-definition\"", "var_name": "INDEX_DEFINITION_NODE"}, {"original_string": "public static final String STATUS_NODE = \":status\";", "modifier": "public static final", "type": "String", "declarator": "STATUS_NODE = \":status\"", "var_name": "STATUS_NODE"}, {"original_string": "public static final String STATUS_LAST_UPDATED = \"lastUpdated\";", "modifier": "public static final", "type": "String", "declarator": "STATUS_LAST_UPDATED = \"lastUpdated\"", "var_name": "STATUS_LAST_UPDATED"}, {"original_string": "public static final String CREATION_TIMESTAMP = \"creationTimestamp\";", "modifier": "public static final", "type": "String", "declarator": "CREATION_TIMESTAMP = \"creationTimestamp\"", "var_name": "CREATION_TIMESTAMP"}, {"original_string": "public static final String REINDEX_COMPLETION_TIMESTAMP = \"reindexCompletionTimestamp\";", "modifier": "public static final", "type": "String", "declarator": "REINDEX_COMPLETION_TIMESTAMP = \"reindexCompletionTimestamp\"", "var_name": "REINDEX_COMPLETION_TIMESTAMP"}, {"original_string": "public static final String FAILED_DOC_PATHS = \"failedDocPaths\";", "modifier": "public static final", "type": "String", "declarator": "FAILED_DOC_PATHS = \"failedDocPaths\"", "var_name": "FAILED_DOC_PATHS"}, {"original_string": "public static final String PROP_UID = \"uid\";", "modifier": "public static final", "type": "String", "declarator": "PROP_UID = \"uid\"", "var_name": "PROP_UID"}, {"original_string": "private static final String TYPES_ALLOW_ALL_NAME = \"all\";", "modifier": "private static final", "type": "String", "declarator": "TYPES_ALLOW_ALL_NAME = \"all\"", "var_name": "TYPES_ALLOW_ALL_NAME"}, {"original_string": "static final int TYPES_ALLOW_NONE = PropertyType.UNDEFINED;", "modifier": "static final", "type": "int", "declarator": "TYPES_ALLOW_NONE = PropertyType.UNDEFINED", "var_name": "TYPES_ALLOW_NONE"}, {"original_string": "static final int TYPES_ALLOW_ALL = -1;", "modifier": "static final", "type": "int", "declarator": "TYPES_ALLOW_ALL = -1", "var_name": "TYPES_ALLOW_ALL"}, {"original_string": "public static final int DEFAULT_SUGGESTER_UPDATE_FREQUENCY_MINUTES = 10;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SUGGESTER_UPDATE_FREQUENCY_MINUTES = 10", "var_name": "DEFAULT_SUGGESTER_UPDATE_FREQUENCY_MINUTES"}, {"original_string": "static final int DEFAULT_FACET_COUNT = 10;", "modifier": "static final", "type": "int", "declarator": "DEFAULT_FACET_COUNT = 10", "var_name": "DEFAULT_FACET_COUNT"}, {"original_string": "public static final OrderEntry NATIVE_SORT_ORDER = new OrderEntry(JCR_SCORE, Type.UNDEFINED,\n        OrderEntry.Order.DESCENDING);", "modifier": "public static final", "type": "OrderEntry", "declarator": "NATIVE_SORT_ORDER = new OrderEntry(JCR_SCORE, Type.UNDEFINED,\n        OrderEntry.Order.DESCENDING)", "var_name": "NATIVE_SORT_ORDER"}, {"original_string": "protected final boolean fullTextEnabled;", "modifier": "protected final", "type": "boolean", "declarator": "fullTextEnabled", "var_name": "fullTextEnabled"}, {"original_string": "protected final NodeState definition;", "modifier": "protected final", "type": "NodeState", "declarator": "definition", "var_name": "definition"}, {"original_string": "private final NodeState root;", "modifier": "private final", "type": "NodeState", "declarator": "root", "var_name": "root"}, {"original_string": "private final IndexFormatVersion version;", "modifier": "private final", "type": "IndexFormatVersion", "declarator": "version", "var_name": "version"}, {"original_string": "private final String funcName;", "modifier": "private final", "type": "String", "declarator": "funcName", "var_name": "funcName"}, {"original_string": "private final int blobSize;", "modifier": "private final", "type": "int", "declarator": "blobSize", "var_name": "blobSize"}, {"original_string": "private final long entryCount;", "modifier": "private final", "type": "long", "declarator": "entryCount", "var_name": "entryCount"}, {"original_string": "private final boolean entryCountDefined;", "modifier": "private final", "type": "boolean", "declarator": "entryCountDefined", "var_name": "entryCountDefined"}, {"original_string": "private final double costPerEntry;", "modifier": "private final", "type": "double", "declarator": "costPerEntry", "var_name": "costPerEntry"}, {"original_string": "private final double costPerExecution;", "modifier": "private final", "type": "double", "declarator": "costPerExecution", "var_name": "costPerExecution"}, {"original_string": "private final Map<String, List<IndexingRule>> indexRules;", "modifier": "private final", "type": "Map<String, List<IndexingRule>>", "declarator": "indexRules", "var_name": "indexRules"}, {"original_string": "private final List<IndexingRule> definedRules;", "modifier": "private final", "type": "List<IndexingRule>", "declarator": "definedRules", "var_name": "definedRules"}, {"original_string": "private final String indexName;", "modifier": "private final", "type": "String", "declarator": "indexName", "var_name": "indexName"}, {"original_string": "private final boolean evaluatePathRestrictions;", "modifier": "private final", "type": "boolean", "declarator": "evaluatePathRestrictions", "var_name": "evaluatePathRestrictions"}, {"original_string": "private final Map<String, Aggregate> aggregates;", "modifier": "private final", "type": "Map<String, Aggregate>", "declarator": "aggregates", "var_name": "aggregates"}, {"original_string": "private final String scorerProviderName;", "modifier": "private final", "type": "String", "declarator": "scorerProviderName", "var_name": "scorerProviderName"}, {"original_string": "private final boolean hasCustomTikaConfig;", "modifier": "private final", "type": "boolean", "declarator": "hasCustomTikaConfig", "var_name": "hasCustomTikaConfig"}, {"original_string": "private final Map<String, String> customTikaMimeTypeMappings;", "modifier": "private final", "type": "Map<String, String>", "declarator": "customTikaMimeTypeMappings", "var_name": "customTikaMimeTypeMappings"}, {"original_string": "private final int maxFieldLength;", "modifier": "private final", "type": "int", "declarator": "maxFieldLength", "var_name": "maxFieldLength"}, {"original_string": "private final int maxExtractLength;", "modifier": "private final", "type": "int", "declarator": "maxExtractLength", "var_name": "maxExtractLength"}, {"original_string": "private final int suggesterUpdateFrequencyMinutes;", "modifier": "private final", "type": "int", "declarator": "suggesterUpdateFrequencyMinutes", "var_name": "suggesterUpdateFrequencyMinutes"}, {"original_string": "private final long reindexCount;", "modifier": "private final", "type": "long", "declarator": "reindexCount", "var_name": "reindexCount"}, {"original_string": "private final PathFilter pathFilter;", "modifier": "private final", "type": "PathFilter", "declarator": "pathFilter", "var_name": "pathFilter"}, {"original_string": "@Nullable\n    private final String[] queryPaths;", "modifier": "@Nullable\n    private final", "type": "String[]", "declarator": "queryPaths", "var_name": "queryPaths"}, {"original_string": "private final boolean suggestAnalyzed;", "modifier": "private final", "type": "boolean", "declarator": "suggestAnalyzed", "var_name": "suggestAnalyzed"}, {"original_string": "private final SecureFacetConfiguration secureFacets;", "modifier": "private final", "type": "SecureFacetConfiguration", "declarator": "secureFacets", "var_name": "secureFacets"}, {"original_string": "private final long randomSeed;", "modifier": "private final", "type": "long", "declarator": "randomSeed", "var_name": "randomSeed"}, {"original_string": "private final int numberOfTopFacets;", "modifier": "private final", "type": "int", "declarator": "numberOfTopFacets", "var_name": "numberOfTopFacets"}, {"original_string": "private final boolean suggestEnabled;", "modifier": "private final", "type": "boolean", "declarator": "suggestEnabled", "var_name": "suggestEnabled"}, {"original_string": "private final boolean spellcheckEnabled;", "modifier": "private final", "type": "boolean", "declarator": "spellcheckEnabled", "var_name": "spellcheckEnabled"}, {"original_string": "private final String indexPath;", "modifier": "private final", "type": "String", "declarator": "indexPath", "var_name": "indexPath"}, {"original_string": "private final boolean nrtIndexMode;", "modifier": "private final", "type": "boolean", "declarator": "nrtIndexMode", "var_name": "nrtIndexMode"}, {"original_string": "private final boolean syncIndexMode;", "modifier": "private final", "type": "boolean", "declarator": "syncIndexMode", "var_name": "syncIndexMode"}, {"original_string": "private final boolean nodeTypeIndex;", "modifier": "private final", "type": "boolean", "declarator": "nodeTypeIndex", "var_name": "nodeTypeIndex"}, {"original_string": "@Nullable\n    private final String uid;", "modifier": "@Nullable\n    private final", "type": "String", "declarator": "uid", "var_name": "uid"}, {"original_string": "@Nullable\n    private final String[] indexTags;", "modifier": "@Nullable\n    private final", "type": "String[]", "declarator": "indexTags", "var_name": "indexTags"}, {"original_string": "private final boolean syncPropertyIndexes;", "modifier": "private final", "type": "boolean", "declarator": "syncPropertyIndexes", "var_name": "syncPropertyIndexes"}, {"original_string": "private final String useIfExists;", "modifier": "private final", "type": "String", "declarator": "useIfExists", "var_name": "useIfExists"}, {"original_string": "private final boolean deprecated;", "modifier": "private final", "type": "boolean", "declarator": "deprecated", "var_name": "deprecated"}, {"original_string": "private final boolean testMode;", "modifier": "private final", "type": "boolean", "declarator": "testMode", "var_name": "testMode"}, {"original_string": "private final Pattern propertyRegex;", "modifier": "private final", "type": "Pattern", "declarator": "propertyRegex", "var_name": "propertyRegex"}], "methods": [{"identifier": "isTestMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTestMode()", "full_signature": "public boolean isTestMode()", "class_method_signature": "IndexDefinition.isTestMode()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(NodeState root, NodeState defn, String indexPath)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(NodeState root, NodeState defn, String indexPath)", "full_signature": "public static Builder newBuilder(NodeState root, NodeState defn, String indexPath)", "class_method_signature": "IndexDefinition.newBuilder(NodeState root, NodeState defn, String indexPath)", "testcase": false, "constructor": false}, {"identifier": "IndexDefinition", "parameters": "(NodeState root, NodeState defn, String indexPath)", "modifiers": "public", "return": "", "signature": " IndexDefinition(NodeState root, NodeState defn, String indexPath)", "full_signature": "public  IndexDefinition(NodeState root, NodeState defn, String indexPath)", "class_method_signature": "IndexDefinition.IndexDefinition(NodeState root, NodeState defn, String indexPath)", "testcase": false, "constructor": true}, {"identifier": "IndexDefinition", "parameters": "(NodeState root, NodeState defn, IndexFormatVersion version, String uid, String indexPath)", "modifiers": "protected", "return": "", "signature": " IndexDefinition(NodeState root, NodeState defn, IndexFormatVersion version, String uid, String indexPath)", "full_signature": "protected  IndexDefinition(NodeState root, NodeState defn, IndexFormatVersion version, String uid, String indexPath)", "class_method_signature": "IndexDefinition.IndexDefinition(NodeState root, NodeState defn, IndexFormatVersion version, String uid, String indexPath)", "testcase": false, "constructor": true}, {"identifier": "getDefinitionNodeState", "parameters": "()", "modifiers": "public", "return": "NodeState", "signature": "NodeState getDefinitionNodeState()", "full_signature": "public NodeState getDefinitionNodeState()", "class_method_signature": "IndexDefinition.getDefinitionNodeState()", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "public boolean isEnabled()", "class_method_signature": "IndexDefinition.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "isFullTextEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFullTextEnabled()", "full_signature": "public boolean isFullTextEnabled()", "class_method_signature": "IndexDefinition.isFullTextEnabled()", "testcase": false, "constructor": false}, {"identifier": "getFunctionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFunctionName()", "full_signature": "public String getFunctionName()", "class_method_signature": "IndexDefinition.getFunctionName()", "testcase": false, "constructor": false}, {"identifier": "getDefaultFunctionName", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getDefaultFunctionName()", "full_signature": "protected String getDefaultFunctionName()", "class_method_signature": "IndexDefinition.getDefaultFunctionName()", "testcase": false, "constructor": false}, {"identifier": "hasFunctionDefined", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasFunctionDefined()", "full_signature": "public boolean hasFunctionDefined()", "class_method_signature": "IndexDefinition.hasFunctionDefined()", "testcase": false, "constructor": false}, {"identifier": "getBlobSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBlobSize()", "full_signature": "public int getBlobSize()", "class_method_signature": "IndexDefinition.getBlobSize()", "testcase": false, "constructor": false}, {"identifier": "getReindexCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getReindexCount()", "full_signature": "public long getReindexCount()", "class_method_signature": "IndexDefinition.getReindexCount()", "testcase": false, "constructor": false}, {"identifier": "getEntryCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEntryCount()", "full_signature": "public long getEntryCount()", "class_method_signature": "IndexDefinition.getEntryCount()", "testcase": false, "constructor": false}, {"identifier": "evaluateSuggesterUpdateFrequencyMinutes", "parameters": "(NodeState defn, int defaultValue)", "modifiers": "private", "return": "int", "signature": "int evaluateSuggesterUpdateFrequencyMinutes(NodeState defn, int defaultValue)", "full_signature": "private int evaluateSuggesterUpdateFrequencyMinutes(NodeState defn, int defaultValue)", "class_method_signature": "IndexDefinition.evaluateSuggesterUpdateFrequencyMinutes(NodeState defn, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getSuggesterUpdateFrequencyMinutes", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSuggesterUpdateFrequencyMinutes()", "full_signature": "public int getSuggesterUpdateFrequencyMinutes()", "class_method_signature": "IndexDefinition.getSuggesterUpdateFrequencyMinutes()", "testcase": false, "constructor": false}, {"identifier": "isEntryCountDefined", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEntryCountDefined()", "full_signature": "public boolean isEntryCountDefined()", "class_method_signature": "IndexDefinition.isEntryCountDefined()", "testcase": false, "constructor": false}, {"identifier": "getCostPerEntry", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCostPerEntry()", "full_signature": "public double getCostPerEntry()", "class_method_signature": "IndexDefinition.getCostPerEntry()", "testcase": false, "constructor": false}, {"identifier": "getDefaultCostPerEntry", "parameters": "(IndexFormatVersion version)", "modifiers": "protected", "return": "double", "signature": "double getDefaultCostPerEntry(IndexFormatVersion version)", "full_signature": "protected double getDefaultCostPerEntry(IndexFormatVersion version)", "class_method_signature": "IndexDefinition.getDefaultCostPerEntry(IndexFormatVersion version)", "testcase": false, "constructor": false}, {"identifier": "getCostPerExecution", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCostPerExecution()", "full_signature": "public double getCostPerExecution()", "class_method_signature": "IndexDefinition.getCostPerExecution()", "testcase": false, "constructor": false}, {"identifier": "getFulltextEntryCount", "parameters": "(long numOfDocs)", "modifiers": "public", "return": "long", "signature": "long getFulltextEntryCount(long numOfDocs)", "full_signature": "public long getFulltextEntryCount(long numOfDocs)", "class_method_signature": "IndexDefinition.getFulltextEntryCount(long numOfDocs)", "testcase": false, "constructor": false}, {"identifier": "isDeprecated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDeprecated()", "full_signature": "public boolean isDeprecated()", "class_method_signature": "IndexDefinition.isDeprecated()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "IndexFormatVersion", "signature": "IndexFormatVersion getVersion()", "full_signature": "public IndexFormatVersion getVersion()", "class_method_signature": "IndexDefinition.getVersion()", "testcase": false, "constructor": false}, {"identifier": "isOfOldFormat", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOfOldFormat()", "full_signature": "public boolean isOfOldFormat()", "class_method_signature": "IndexDefinition.isOfOldFormat()", "testcase": false, "constructor": false}, {"identifier": "evaluatePathRestrictions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean evaluatePathRestrictions()", "full_signature": "public boolean evaluatePathRestrictions()", "class_method_signature": "IndexDefinition.evaluatePathRestrictions()", "testcase": false, "constructor": false}, {"identifier": "hasCustomTikaConfig", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasCustomTikaConfig()", "full_signature": "public boolean hasCustomTikaConfig()", "class_method_signature": "IndexDefinition.hasCustomTikaConfig()", "testcase": false, "constructor": false}, {"identifier": "getTikaConfig", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream getTikaConfig()", "full_signature": "public InputStream getTikaConfig()", "class_method_signature": "IndexDefinition.getTikaConfig()", "testcase": false, "constructor": false}, {"identifier": "getTikaMappedMimeType", "parameters": "(String type)", "modifiers": "public", "return": "String", "signature": "String getTikaMappedMimeType(String type)", "full_signature": "public String getTikaMappedMimeType(String type)", "class_method_signature": "IndexDefinition.getTikaMappedMimeType(String type)", "testcase": false, "constructor": false}, {"identifier": "getIndexName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIndexName()", "full_signature": "public String getIndexName()", "class_method_signature": "IndexDefinition.getIndexName()", "testcase": false, "constructor": false}, {"identifier": "getIndexTags", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getIndexTags()", "full_signature": "public String[] getIndexTags()", "class_method_signature": "IndexDefinition.getIndexTags()", "testcase": false, "constructor": false}, {"identifier": "getMaxExtractLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxExtractLength()", "full_signature": "public int getMaxExtractLength()", "class_method_signature": "IndexDefinition.getMaxExtractLength()", "testcase": false, "constructor": false}, {"identifier": "getScorerProviderName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScorerProviderName()", "full_signature": "public String getScorerProviderName()", "class_method_signature": "IndexDefinition.getScorerProviderName()", "testcase": false, "constructor": false}, {"identifier": "getPathFilter", "parameters": "()", "modifiers": "public", "return": "PathFilter", "signature": "PathFilter getPathFilter()", "full_signature": "public PathFilter getPathFilter()", "class_method_signature": "IndexDefinition.getPathFilter()", "testcase": false, "constructor": false}, {"identifier": "getQueryPaths", "parameters": "()", "modifiers": "@Nullable public", "return": "String[]", "signature": "String[] getQueryPaths()", "full_signature": "@Nullable public String[] getQueryPaths()", "class_method_signature": "IndexDefinition.getQueryPaths()", "testcase": false, "constructor": false}, {"identifier": "getUniqueId", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getUniqueId()", "full_signature": "@Nullable public String getUniqueId()", "class_method_signature": "IndexDefinition.getUniqueId()", "testcase": false, "constructor": false}, {"identifier": "isNRTIndexingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNRTIndexingEnabled()", "full_signature": "public boolean isNRTIndexingEnabled()", "class_method_signature": "IndexDefinition.isNRTIndexingEnabled()", "testcase": false, "constructor": false}, {"identifier": "isSyncIndexingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSyncIndexingEnabled()", "full_signature": "public boolean isSyncIndexingEnabled()", "class_method_signature": "IndexDefinition.isSyncIndexingEnabled()", "testcase": false, "constructor": false}, {"identifier": "hasSyncPropertyDefinitions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSyncPropertyDefinitions()", "full_signature": "public boolean hasSyncPropertyDefinitions()", "class_method_signature": "IndexDefinition.hasSyncPropertyDefinitions()", "testcase": false, "constructor": false}, {"identifier": "isPureNodeTypeIndex", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPureNodeTypeIndex()", "full_signature": "public boolean isPureNodeTypeIndex()", "class_method_signature": "IndexDefinition.isPureNodeTypeIndex()", "testcase": false, "constructor": false}, {"identifier": "hasPersistedIndex", "parameters": "(NodeState definition)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasPersistedIndex(NodeState definition)", "full_signature": "public static boolean hasPersistedIndex(NodeState definition)", "class_method_signature": "IndexDefinition.hasPersistedIndex(NodeState definition)", "testcase": false, "constructor": false}, {"identifier": "isDisableStoredIndexDefinition", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isDisableStoredIndexDefinition()", "full_signature": "public static boolean isDisableStoredIndexDefinition()", "class_method_signature": "IndexDefinition.isDisableStoredIndexDefinition()", "testcase": false, "constructor": false}, {"identifier": "setDisableStoredIndexDefinition", "parameters": "(boolean disableStoredIndexDefinitionDefault)", "modifiers": "public static", "return": "void", "signature": "void setDisableStoredIndexDefinition(boolean disableStoredIndexDefinitionDefault)", "full_signature": "public static void setDisableStoredIndexDefinition(boolean disableStoredIndexDefinitionDefault)", "class_method_signature": "IndexDefinition.setDisableStoredIndexDefinition(boolean disableStoredIndexDefinitionDefault)", "testcase": false, "constructor": false}, {"identifier": "getRelativeNodeNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getRelativeNodeNames()", "full_signature": "public Set<String> getRelativeNodeNames()", "class_method_signature": "IndexDefinition.getRelativeNodeNames()", "testcase": false, "constructor": false}, {"identifier": "indexesRelativeNodes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean indexesRelativeNodes()", "full_signature": "public boolean indexesRelativeNodes()", "class_method_signature": "IndexDefinition.indexesRelativeNodes()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IndexDefinition.toString()", "testcase": false, "constructor": false}, {"identifier": "getAggregate", "parameters": "(String nodeType)", "modifiers": "@Nullable public", "return": "Aggregate", "signature": "Aggregate getAggregate(String nodeType)", "full_signature": "@Nullable public Aggregate getAggregate(String nodeType)", "class_method_signature": "IndexDefinition.getAggregate(String nodeType)", "testcase": false, "constructor": false}, {"identifier": "collectAggregates", "parameters": "(NodeState defn)", "modifiers": "private", "return": "Map<String, Aggregate>", "signature": "Map<String, Aggregate> collectAggregates(NodeState defn)", "full_signature": "private Map<String, Aggregate> collectAggregates(NodeState defn)", "class_method_signature": "IndexDefinition.collectAggregates(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "hasMatchingNodeTypeReg", "parameters": "(NodeState root)", "modifiers": "public", "return": "boolean", "signature": "boolean hasMatchingNodeTypeReg(NodeState root)", "full_signature": "public boolean hasMatchingNodeTypeReg(NodeState root)", "class_method_signature": "IndexDefinition.hasMatchingNodeTypeReg(NodeState root)", "testcase": false, "constructor": false}, {"identifier": "getDefinedRules", "parameters": "()", "modifiers": "public", "return": "List<IndexingRule>", "signature": "List<IndexingRule> getDefinedRules()", "full_signature": "public List<IndexingRule> getDefinedRules()", "class_method_signature": "IndexDefinition.getDefinedRules()", "testcase": false, "constructor": false}, {"identifier": "getApplicableIndexingRule", "parameters": "(String primaryNodeType)", "modifiers": "@Nullable public", "return": "IndexingRule", "signature": "IndexingRule getApplicableIndexingRule(String primaryNodeType)", "full_signature": "@Nullable public IndexingRule getApplicableIndexingRule(String primaryNodeType)", "class_method_signature": "IndexDefinition.getApplicableIndexingRule(String primaryNodeType)", "testcase": false, "constructor": false}, {"identifier": "getApplicableIndexingRule", "parameters": "(NodeState state)", "modifiers": "@Nullable public", "return": "IndexingRule", "signature": "IndexingRule getApplicableIndexingRule(NodeState state)", "full_signature": "@Nullable public IndexingRule getApplicableIndexingRule(NodeState state)", "class_method_signature": "IndexDefinition.getApplicableIndexingRule(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "collectIndexRules", "parameters": "(NodeState indexRules,\n                                                              List<IndexingRule> definedIndexRules)", "modifiers": "private", "return": "Map<String, List<IndexingRule>>", "signature": "Map<String, List<IndexingRule>> collectIndexRules(NodeState indexRules,\n                                                              List<IndexingRule> definedIndexRules)", "full_signature": "private Map<String, List<IndexingRule>> collectIndexRules(NodeState indexRules,\n                                                              List<IndexingRule> definedIndexRules)", "class_method_signature": "IndexDefinition.collectIndexRules(NodeState indexRules,\n                                                              List<IndexingRule> definedIndexRules)", "testcase": false, "constructor": false}, {"identifier": "areAllTypesIndexed", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean areAllTypesIndexed()", "full_signature": "private boolean areAllTypesIndexed()", "class_method_signature": "IndexDefinition.areAllTypesIndexed()", "testcase": false, "constructor": false}, {"identifier": "evaluateSuggestionEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateSuggestionEnabled()", "full_signature": "private boolean evaluateSuggestionEnabled()", "class_method_signature": "IndexDefinition.evaluateSuggestionEnabled()", "testcase": false, "constructor": false}, {"identifier": "getPropertyRegex", "parameters": "()", "modifiers": "public", "return": "Pattern", "signature": "Pattern getPropertyRegex()", "full_signature": "public Pattern getPropertyRegex()", "class_method_signature": "IndexDefinition.getPropertyRegex()", "testcase": false, "constructor": false}, {"identifier": "isSuggestEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSuggestEnabled()", "full_signature": "public boolean isSuggestEnabled()", "class_method_signature": "IndexDefinition.isSuggestEnabled()", "testcase": false, "constructor": false}, {"identifier": "evaluateSpellcheckEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateSpellcheckEnabled()", "full_signature": "private boolean evaluateSpellcheckEnabled()", "class_method_signature": "IndexDefinition.evaluateSpellcheckEnabled()", "testcase": false, "constructor": false}, {"identifier": "isSpellcheckEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSpellcheckEnabled()", "full_signature": "public boolean isSpellcheckEnabled()", "class_method_signature": "IndexDefinition.isSpellcheckEnabled()", "testcase": false, "constructor": false}, {"identifier": "getIndexPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIndexPath()", "full_signature": "public String getIndexPath()", "class_method_signature": "IndexDefinition.getIndexPath()", "testcase": false, "constructor": false}, {"identifier": "evaluateSuggestAnalyzed", "parameters": "(NodeState defn, boolean defaultValue)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateSuggestAnalyzed(NodeState defn, boolean defaultValue)", "full_signature": "private boolean evaluateSuggestAnalyzed(NodeState defn, boolean defaultValue)", "class_method_signature": "IndexDefinition.evaluateSuggestAnalyzed(NodeState defn, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "isSuggestAnalyzed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSuggestAnalyzed()", "full_signature": "public boolean isSuggestAnalyzed()", "class_method_signature": "IndexDefinition.isSuggestAnalyzed()", "testcase": false, "constructor": false}, {"identifier": "getSecureFacetConfiguration", "parameters": "()", "modifiers": "public", "return": "SecureFacetConfiguration", "signature": "SecureFacetConfiguration getSecureFacetConfiguration()", "full_signature": "public SecureFacetConfiguration getSecureFacetConfiguration()", "class_method_signature": "IndexDefinition.getSecureFacetConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfTopFacets", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfTopFacets()", "full_signature": "public int getNumberOfTopFacets()", "class_method_signature": "IndexDefinition.getNumberOfTopFacets()", "testcase": false, "constructor": false}, {"identifier": "updateDefinition", "parameters": "(NodeBuilder indexDefn)", "modifiers": "public static", "return": "NodeBuilder", "signature": "NodeBuilder updateDefinition(NodeBuilder indexDefn)", "full_signature": "public static NodeBuilder updateDefinition(NodeBuilder indexDefn)", "class_method_signature": "IndexDefinition.updateDefinition(NodeBuilder indexDefn)", "testcase": false, "constructor": false}, {"identifier": "updateDefinition", "parameters": "(NodeBuilder indexDefn, String indexPath)", "modifiers": "public static", "return": "NodeBuilder", "signature": "NodeBuilder updateDefinition(NodeBuilder indexDefn, String indexPath)", "full_signature": "public static NodeBuilder updateDefinition(NodeBuilder indexDefn, String indexPath)", "class_method_signature": "IndexDefinition.updateDefinition(NodeBuilder indexDefn, String indexPath)", "testcase": false, "constructor": false}, {"identifier": "createIndexRules", "parameters": "(NodeState defn)", "modifiers": "private static", "return": "NodeBuilder", "signature": "NodeBuilder createIndexRules(NodeState defn)", "full_signature": "private static NodeBuilder createIndexRules(NodeState defn)", "class_method_signature": "IndexDefinition.createIndexRules(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "getPropDefnNode", "parameters": "(NodeState defn, String propName)", "modifiers": "private static", "return": "NodeState", "signature": "NodeState getPropDefnNode(NodeState defn, String propName)", "full_signature": "private static NodeState getPropDefnNode(NodeState defn, String propName)", "class_method_signature": "IndexDefinition.getPropDefnNode(NodeState defn, String propName)", "testcase": false, "constructor": false}, {"identifier": "determineMaxExtractLength", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int determineMaxExtractLength()", "full_signature": "private int determineMaxExtractLength()", "class_method_signature": "IndexDefinition.determineMaxExtractLength()", "testcase": false, "constructor": false}, {"identifier": "getTikaConfigNode", "parameters": "()", "modifiers": "private", "return": "NodeState", "signature": "NodeState getTikaConfigNode()", "full_signature": "private NodeState getTikaConfigNode()", "class_method_signature": "IndexDefinition.getTikaConfigNode()", "testcase": false, "constructor": false}, {"identifier": "getMultiProperty", "parameters": "(NodeState definition, String propName)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> getMultiProperty(NodeState definition, String propName)", "full_signature": "private static Set<String> getMultiProperty(NodeState definition, String propName)", "class_method_signature": "IndexDefinition.getMultiProperty(NodeState definition, String propName)", "testcase": false, "constructor": false}, {"identifier": "toLowerCase", "parameters": "(Set<String> values)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> toLowerCase(Set<String> values)", "full_signature": "private static Set<String> toLowerCase(Set<String> values)", "class_method_signature": "IndexDefinition.toLowerCase(Set<String> values)", "testcase": false, "constructor": false}, {"identifier": "getAllNodeTypes", "parameters": "(ReadOnlyNodeTypeManager ntReg)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getAllNodeTypes(ReadOnlyNodeTypeManager ntReg)", "full_signature": "private static List<String> getAllNodeTypes(ReadOnlyNodeTypeManager ntReg)", "class_method_signature": "IndexDefinition.getAllNodeTypes(ReadOnlyNodeTypeManager ntReg)", "testcase": false, "constructor": false}, {"identifier": "createNodeTypeManager", "parameters": "(final Root root)", "modifiers": "private static", "return": "ReadOnlyNodeTypeManager", "signature": "ReadOnlyNodeTypeManager createNodeTypeManager(final Root root)", "full_signature": "private static ReadOnlyNodeTypeManager createNodeTypeManager(final Root root)", "class_method_signature": "IndexDefinition.createNodeTypeManager(final Root root)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryTypeName", "parameters": "(NodeState state)", "modifiers": "private static", "return": "String", "signature": "String getPrimaryTypeName(NodeState state)", "full_signature": "private static String getPrimaryTypeName(NodeState state)", "class_method_signature": "IndexDefinition.getPrimaryTypeName(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "getMixinTypeNames", "parameters": "(NodeState state)", "modifiers": "private static", "return": "Iterable<String>", "signature": "Iterable<String> getMixinTypeNames(NodeState state)", "full_signature": "private static Iterable<String> getMixinTypeNames(NodeState state)", "class_method_signature": "IndexDefinition.getMixinTypeNames(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "hasOrderableChildren", "parameters": "(NodeState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasOrderableChildren(NodeState state)", "full_signature": "private static boolean hasOrderableChildren(NodeState state)", "class_method_signature": "IndexDefinition.hasOrderableChildren(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "getSupportedTypes", "parameters": "(NodeState defn, String typePropertyName, int defaultVal)", "modifiers": "static", "return": "int", "signature": "int getSupportedTypes(NodeState defn, String typePropertyName, int defaultVal)", "full_signature": "static int getSupportedTypes(NodeState defn, String typePropertyName, int defaultVal)", "class_method_signature": "IndexDefinition.getSupportedTypes(NodeState defn, String typePropertyName, int defaultVal)", "testcase": false, "constructor": false}, {"identifier": "includePropertyType", "parameters": "(int includedPropertyTypes, int type)", "modifiers": "static", "return": "boolean", "signature": "boolean includePropertyType(int includedPropertyTypes, int type)", "full_signature": "static boolean includePropertyType(int includedPropertyTypes, int type)", "class_method_signature": "IndexDefinition.includePropertyType(int includedPropertyTypes, int type)", "testcase": false, "constructor": false}, {"identifier": "hasFulltextEnabledIndexRule", "parameters": "(List<IndexingRule> rules)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasFulltextEnabledIndexRule(List<IndexingRule> rules)", "full_signature": "private static boolean hasFulltextEnabledIndexRule(List<IndexingRule> rules)", "class_method_signature": "IndexDefinition.hasFulltextEnabledIndexRule(List<IndexingRule> rules)", "testcase": false, "constructor": false}, {"identifier": "markAsNtUnstructured", "parameters": "(NodeBuilder nb)", "modifiers": "private static", "return": "void", "signature": "void markAsNtUnstructured(NodeBuilder nb)", "full_signature": "private static void markAsNtUnstructured(NodeBuilder nb)", "class_method_signature": "IndexDefinition.markAsNtUnstructured(NodeBuilder nb)", "testcase": false, "constructor": false}, {"identifier": "determineIndexFormatVersion", "parameters": "(NodeState defn)", "modifiers": "protected static", "return": "IndexFormatVersion", "signature": "IndexFormatVersion determineIndexFormatVersion(NodeState defn)", "full_signature": "protected static IndexFormatVersion determineIndexFormatVersion(NodeState defn)", "class_method_signature": "IndexDefinition.determineIndexFormatVersion(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "determineVersionForFreshIndex", "parameters": "(NodeState defn)", "modifiers": "static", "return": "IndexFormatVersion", "signature": "IndexFormatVersion determineVersionForFreshIndex(NodeState defn)", "full_signature": "static IndexFormatVersion determineVersionForFreshIndex(NodeState defn)", "class_method_signature": "IndexDefinition.determineVersionForFreshIndex(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "determineVersionForFreshIndex", "parameters": "(NodeBuilder defnb)", "modifiers": "static", "return": "IndexFormatVersion", "signature": "IndexFormatVersion determineVersionForFreshIndex(NodeBuilder defnb)", "full_signature": "static IndexFormatVersion determineVersionForFreshIndex(NodeBuilder defnb)", "class_method_signature": "IndexDefinition.determineVersionForFreshIndex(NodeBuilder defnb)", "testcase": false, "constructor": false}, {"identifier": "determineVersionForFreshIndex", "parameters": "(PropertyState fulltext,\n                                                                    PropertyState compat,\n                                                                    PropertyState version)", "modifiers": "private static", "return": "IndexFormatVersion", "signature": "IndexFormatVersion determineVersionForFreshIndex(PropertyState fulltext,\n                                                                    PropertyState compat,\n                                                                    PropertyState version)", "full_signature": "private static IndexFormatVersion determineVersionForFreshIndex(PropertyState fulltext,\n                                                                    PropertyState compat,\n                                                                    PropertyState version)", "class_method_signature": "IndexDefinition.determineVersionForFreshIndex(PropertyState fulltext,\n                                                                    PropertyState compat,\n                                                                    PropertyState version)", "testcase": false, "constructor": false}, {"identifier": "getOptionalStrings", "parameters": "(NodeState defn, String propertyName)", "modifiers": "private static", "return": "String[]", "signature": "String[] getOptionalStrings(NodeState defn, String propertyName)", "full_signature": "private static String[] getOptionalStrings(NodeState defn, String propertyName)", "class_method_signature": "IndexDefinition.getOptionalStrings(NodeState defn, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "versionFrom", "parameters": "(PropertyState ps)", "modifiers": "private static", "return": "IndexFormatVersion", "signature": "IndexFormatVersion versionFrom(PropertyState ps)", "full_signature": "private static IndexFormatVersion versionFrom(PropertyState ps)", "class_method_signature": "IndexDefinition.versionFrom(PropertyState ps)", "testcase": false, "constructor": false}, {"identifier": "hasIndexingRules", "parameters": "(NodeState defn)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasIndexingRules(NodeState defn)", "full_signature": "private static boolean hasIndexingRules(NodeState defn)", "class_method_signature": "IndexDefinition.hasIndexingRules(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "determineUniqueId", "parameters": "(NodeState defn)", "modifiers": "@Nullable protected static", "return": "String", "signature": "String determineUniqueId(NodeState defn)", "full_signature": "@Nullable protected static String determineUniqueId(NodeState defn)", "class_method_signature": "IndexDefinition.determineUniqueId(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "supportsNRTIndexing", "parameters": "(NodeState defn)", "modifiers": "private static", "return": "boolean", "signature": "boolean supportsNRTIndexing(NodeState defn)", "full_signature": "private static boolean supportsNRTIndexing(NodeState defn)", "class_method_signature": "IndexDefinition.supportsNRTIndexing(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "supportsSyncIndexing", "parameters": "(NodeState defn)", "modifiers": "private static", "return": "boolean", "signature": "boolean supportsSyncIndexing(NodeState defn)", "full_signature": "private static boolean supportsSyncIndexing(NodeState defn)", "class_method_signature": "IndexDefinition.supportsSyncIndexing(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "supportsSyncOrNRTIndexing", "parameters": "(NodeBuilder defn)", "modifiers": "public static", "return": "boolean", "signature": "boolean supportsSyncOrNRTIndexing(NodeBuilder defn)", "full_signature": "public static boolean supportsSyncOrNRTIndexing(NodeBuilder defn)", "class_method_signature": "IndexDefinition.supportsSyncOrNRTIndexing(NodeBuilder defn)", "testcase": false, "constructor": false}, {"identifier": "supportsIndexingMode", "parameters": "(NodeBuilder defn, String mode)", "modifiers": "private static", "return": "boolean", "signature": "boolean supportsIndexingMode(NodeBuilder defn, String mode)", "full_signature": "private static boolean supportsIndexingMode(NodeBuilder defn, String mode)", "class_method_signature": "IndexDefinition.supportsIndexingMode(NodeBuilder defn, String mode)", "testcase": false, "constructor": false}, {"identifier": "getIndexDefinitionState", "parameters": "(NodeState defn)", "modifiers": "protected static", "return": "NodeState", "signature": "NodeState getIndexDefinitionState(NodeState defn)", "full_signature": "protected static NodeState getIndexDefinitionState(NodeState defn)", "class_method_signature": "IndexDefinition.getIndexDefinitionState(NodeState defn)", "testcase": false, "constructor": false}, {"identifier": "buildMimeTypeMap", "parameters": "(NodeState node)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> buildMimeTypeMap(NodeState node)", "full_signature": "private static Map<String, String> buildMimeTypeMap(NodeState node)", "class_method_signature": "IndexDefinition.buildMimeTypeMap(NodeState node)", "testcase": false, "constructor": false}, {"identifier": "createNodeTypeDefinition", "parameters": "(IndexingRule rule, String name, boolean sync)", "modifiers": "private static", "return": "PropertyDefinition", "signature": "PropertyDefinition createNodeTypeDefinition(IndexingRule rule, String name, boolean sync)", "full_signature": "private static PropertyDefinition createNodeTypeDefinition(IndexingRule rule, String name, boolean sync)", "class_method_signature": "IndexDefinition.createNodeTypeDefinition(IndexingRule rule, String name, boolean sync)", "testcase": false, "constructor": false}], "file": "oak-search/src/main/java/org/apache/jackrabbit/oak/plugins/index/search/IndexDefinition.java"}, "focal_method": {"identifier": "getApplicableIndexingRule", "parameters": "(String primaryNodeType)", "modifiers": "@Nullable public", "return": "IndexingRule", "body": "@Nullable\n    public IndexingRule getApplicableIndexingRule(String primaryNodeType) {\n        //This method would be invoked for every node. So be as\n        //conservative as possible in object creation\n        List<IndexingRule> rules = null;\n        List<IndexingRule> r = indexRules.get(primaryNodeType);\n        if (r != null) {\n            rules = new ArrayList<IndexingRule>();\n            rules.addAll(r);\n        }\n\n        if (rules != null) {\n            for (IndexingRule rule : rules) {\n                if (rule.appliesTo(primaryNodeType)) {\n                    return rule;\n                }\n            }\n        }\n\n        // no applicable rule\n        return null;\n    }", "signature": "IndexingRule getApplicableIndexingRule(String primaryNodeType)", "full_signature": "@Nullable public IndexingRule getApplicableIndexingRule(String primaryNodeType)", "class_method_signature": "IndexDefinition.getApplicableIndexingRule(String primaryNodeType)", "testcase": false, "constructor": false, "invocations": ["get", "addAll", "appliesTo"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}