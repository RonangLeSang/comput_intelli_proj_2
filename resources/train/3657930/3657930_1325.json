{"test_class": {"identifier": "ChildOrderDiffTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/permission/ChildOrderDiffTest.java"}, "test_case": {"identifier": "testReorderedFirstToEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReorderedFirstToEnd() {\n        PropertyState before = createPropertyState(\"n1\", \"n2\", \"n3\");\n        PropertyState after = createPropertyState(\"n2\", \"n3\", \"n1\");\n        assertTrue(ChildOrderDiff.isReordered(before, after));\n    }", "signature": "void testReorderedFirstToEnd()", "full_signature": "@Test public void testReorderedFirstToEnd()", "class_method_signature": "ChildOrderDiffTest.testReorderedFirstToEnd()", "testcase": true, "constructor": false, "invocations": ["createPropertyState", "createPropertyState", "assertTrue", "isReordered"]}, "focal_class": {"identifier": "ChildOrderDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ChildOrderDiff", "parameters": "()", "modifiers": "private", "return": "", "signature": " ChildOrderDiff()", "full_signature": "private  ChildOrderDiff()", "class_method_signature": "ChildOrderDiff.ChildOrderDiff()", "testcase": false, "constructor": true}, {"identifier": "isReordered", "parameters": "(@NotNull PropertyState before, @NotNull PropertyState after)", "modifiers": "static", "return": "boolean", "signature": "boolean isReordered(@NotNull PropertyState before, @NotNull PropertyState after)", "full_signature": "static boolean isReordered(@NotNull PropertyState before, @NotNull PropertyState after)", "class_method_signature": "ChildOrderDiff.isReordered(@NotNull PropertyState before, @NotNull PropertyState after)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/ChildOrderDiff.java"}, "focal_method": {"identifier": "isReordered", "parameters": "(@NotNull PropertyState before, @NotNull PropertyState after)", "modifiers": "static", "return": "boolean", "body": "static boolean isReordered(@NotNull PropertyState before, @NotNull PropertyState after) {\n        Set<String> afterNames = newLinkedHashSet(after.getValue(Type.NAMES));\n        Set<String> beforeNames = newLinkedHashSet(before.getValue(Type.NAMES));\n\n        // drop all newly added values from 'afterNames'\n        afterNames.retainAll(beforeNames);\n        // drop all removed values from 'beforeNames'\n        beforeNames.retainAll(afterNames);\n\n        // names got reordered if the elements in the 2 intersections aren't equal\n        return !Iterables.elementsEqual(afterNames, beforeNames);\n    }", "signature": "boolean isReordered(@NotNull PropertyState before, @NotNull PropertyState after)", "full_signature": "static boolean isReordered(@NotNull PropertyState before, @NotNull PropertyState after)", "class_method_signature": "ChildOrderDiff.isReordered(@NotNull PropertyState before, @NotNull PropertyState after)", "testcase": false, "constructor": false, "invocations": ["newLinkedHashSet", "getValue", "newLinkedHashSet", "getValue", "retainAll", "retainAll", "elementsEqual"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}