{"test_class": {"identifier": "GroupImplTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private final String groupId = \"gr\" + UUID.randomUUID();", "modifier": "private final", "type": "String", "declarator": "groupId = \"gr\" + UUID.randomUUID()", "var_name": "groupId"}, {"original_string": "private UserManagerImpl uMgr;", "modifier": "private", "type": "UserManagerImpl", "declarator": "uMgr", "var_name": "uMgr"}, {"original_string": "private GroupImpl group;", "modifier": "private", "type": "GroupImpl", "declarator": "group", "var_name": "group"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/GroupImplTest.java"}, "test_case": {"identifier": "testIsGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsGroup() {\n        assertTrue(group.isGroup());\n    }", "signature": "void testIsGroup()", "full_signature": "@Test public void testIsGroup()", "class_method_signature": "GroupImplTest.testIsGroup()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isGroup"]}, "focal_class": {"identifier": "GroupImpl", "superclass": "extends AuthorizableImpl", "interfaces": "implements Group", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GroupImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GroupImpl.class)", "var_name": "log"}], "methods": [{"identifier": "GroupImpl", "parameters": "(String id, Tree tree, UserManagerImpl userManager)", "modifiers": "", "return": "", "signature": " GroupImpl(String id, Tree tree, UserManagerImpl userManager)", "full_signature": "  GroupImpl(String id, Tree tree, UserManagerImpl userManager)", "class_method_signature": "GroupImpl.GroupImpl(String id, Tree tree, UserManagerImpl userManager)", "testcase": false, "constructor": true}, {"identifier": "checkValidTree", "parameters": "(@NotNull Tree tree)", "modifiers": "@Override", "return": "void", "signature": "void checkValidTree(@NotNull Tree tree)", "full_signature": "@Override void checkValidTree(@NotNull Tree tree)", "class_method_signature": "GroupImpl.checkValidTree(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "isGroup", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGroup()", "full_signature": "@Override public boolean isGroup()", "class_method_signature": "GroupImpl.isGroup()", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Principal", "signature": "Principal getPrincipal()", "full_signature": "@NotNull @Override public Principal getPrincipal()", "class_method_signature": "GroupImpl.getPrincipal()", "testcase": false, "constructor": false}, {"identifier": "getDeclaredMembers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Iterator<Authorizable>", "signature": "Iterator<Authorizable> getDeclaredMembers()", "full_signature": "@NotNull @Override public Iterator<Authorizable> getDeclaredMembers()", "class_method_signature": "GroupImpl.getDeclaredMembers()", "testcase": false, "constructor": false}, {"identifier": "getMembers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Iterator<Authorizable>", "signature": "Iterator<Authorizable> getMembers()", "full_signature": "@NotNull @Override public Iterator<Authorizable> getMembers()", "class_method_signature": "GroupImpl.getMembers()", "testcase": false, "constructor": false}, {"identifier": "isDeclaredMember", "parameters": "(@NotNull Authorizable authorizable)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDeclaredMember(@NotNull Authorizable authorizable)", "full_signature": "@Override public boolean isDeclaredMember(@NotNull Authorizable authorizable)", "class_method_signature": "GroupImpl.isDeclaredMember(@NotNull Authorizable authorizable)", "testcase": false, "constructor": false}, {"identifier": "isMember", "parameters": "(@NotNull Authorizable authorizable)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMember(@NotNull Authorizable authorizable)", "full_signature": "@Override public boolean isMember(@NotNull Authorizable authorizable)", "class_method_signature": "GroupImpl.isMember(@NotNull Authorizable authorizable)", "testcase": false, "constructor": false}, {"identifier": "addMember", "parameters": "(@NotNull Authorizable authorizable)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addMember(@NotNull Authorizable authorizable)", "full_signature": "@Override public boolean addMember(@NotNull Authorizable authorizable)", "class_method_signature": "GroupImpl.addMember(@NotNull Authorizable authorizable)", "testcase": false, "constructor": false}, {"identifier": "addMembers", "parameters": "(@NotNull String... memberIds)", "modifiers": "@NotNull @Override public", "return": "Set<String>", "signature": "Set<String> addMembers(@NotNull String... memberIds)", "full_signature": "@NotNull @Override public Set<String> addMembers(@NotNull String... memberIds)", "class_method_signature": "GroupImpl.addMembers(@NotNull String... memberIds)", "testcase": false, "constructor": false}, {"identifier": "removeMember", "parameters": "(@NotNull Authorizable authorizable)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeMember(@NotNull Authorizable authorizable)", "full_signature": "@Override public boolean removeMember(@NotNull Authorizable authorizable)", "class_method_signature": "GroupImpl.removeMember(@NotNull Authorizable authorizable)", "testcase": false, "constructor": false}, {"identifier": "removeMembers", "parameters": "(@NotNull String... memberIds)", "modifiers": "@NotNull @Override public", "return": "Set<String>", "signature": "Set<String> removeMembers(@NotNull String... memberIds)", "full_signature": "@NotNull @Override public Set<String> removeMembers(@NotNull String... memberIds)", "class_method_signature": "GroupImpl.removeMembers(@NotNull String... memberIds)", "testcase": false, "constructor": false}, {"identifier": "getMembers", "parameters": "(boolean includeInherited)", "modifiers": "@NotNull private", "return": "Iterator<Authorizable>", "signature": "Iterator<Authorizable> getMembers(boolean includeInherited)", "full_signature": "@NotNull private Iterator<Authorizable> getMembers(boolean includeInherited)", "class_method_signature": "GroupImpl.getMembers(boolean includeInherited)", "testcase": false, "constructor": false}, {"identifier": "isMember", "parameters": "(@NotNull Authorizable authorizable, boolean includeInherited)", "modifiers": "private", "return": "boolean", "signature": "boolean isMember(@NotNull Authorizable authorizable, boolean includeInherited)", "full_signature": "private boolean isMember(@NotNull Authorizable authorizable, boolean includeInherited)", "class_method_signature": "GroupImpl.isMember(@NotNull Authorizable authorizable, boolean includeInherited)", "testcase": false, "constructor": false}, {"identifier": "updateMembers", "parameters": "(boolean isRemove, @NotNull String... memberIds)", "modifiers": "@NotNull private", "return": "Set<String>", "signature": "Set<String> updateMembers(boolean isRemove, @NotNull String... memberIds)", "full_signature": "@NotNull private Set<String> updateMembers(boolean isRemove, @NotNull String... memberIds)", "class_method_signature": "GroupImpl.updateMembers(boolean isRemove, @NotNull String... memberIds)", "testcase": false, "constructor": false}, {"identifier": "isValidMemberId", "parameters": "(@NotNull String memberId, int importBehavior)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidMemberId(@NotNull String memberId, int importBehavior)", "full_signature": "private boolean isValidMemberId(@NotNull String memberId, int importBehavior)", "class_method_signature": "GroupImpl.isValidMemberId(@NotNull String memberId, int importBehavior)", "testcase": false, "constructor": false}, {"identifier": "isCyclicMembership", "parameters": "(@NotNull Group member)", "modifiers": "private", "return": "boolean", "signature": "boolean isCyclicMembership(@NotNull Group member)", "full_signature": "private boolean isCyclicMembership(@NotNull Group member)", "class_method_signature": "GroupImpl.isCyclicMembership(@NotNull Group member)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/GroupImpl.java"}, "focal_method": {"identifier": "isGroup", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isGroup() {\n        return true;\n    }", "signature": "boolean isGroup()", "full_signature": "@Override public boolean isGroup()", "class_method_signature": "GroupImpl.isGroup()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}