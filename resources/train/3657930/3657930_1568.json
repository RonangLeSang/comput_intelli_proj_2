{"test_class": {"identifier": "FilteringNodeStateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> DEFAULT_INCLUDES = FilteringNodeState.ALL;", "modifier": "private static final", "type": "Set<String>", "declarator": "DEFAULT_INCLUDES = FilteringNodeState.ALL", "var_name": "DEFAULT_INCLUDES"}, {"original_string": "private static final Set<String> DEFAULT_EXCLUDES = FilteringNodeState.NONE;", "modifier": "private static final", "type": "Set<String>", "declarator": "DEFAULT_EXCLUDES = FilteringNodeState.NONE", "var_name": "DEFAULT_EXCLUDES"}, {"original_string": "private NodeState rootNodeState;", "modifier": "private", "type": "NodeState", "declarator": "rootNodeState", "var_name": "rootNodeState"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/migration/FilteringNodeStateTest.java"}, "test_case": {"identifier": "shouldHideMissingIncludedPathsViaHasChildNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHideMissingIncludedPathsViaHasChildNode() {\n        final NodeState decorated = wrap(\"/\", rootNodeState, of(\"/content\"), null, null, null);\n\n        assertExistingHasChildNode(decorated, \"content\");\n        assertMissingHasChildNode(decorated, \"apps\");\n        assertMissingHasChildNode(decorated, \"libs\");\n    }", "signature": "void shouldHideMissingIncludedPathsViaHasChildNode()", "full_signature": "@Test public void shouldHideMissingIncludedPathsViaHasChildNode()", "class_method_signature": "FilteringNodeStateTest.shouldHideMissingIncludedPathsViaHasChildNode()", "testcase": true, "constructor": false, "invocations": ["wrap", "of", "assertExistingHasChildNode", "assertMissingHasChildNode", "assertMissingHasChildNode"]}, "focal_class": {"identifier": "FilteringNodeState", "superclass": "extends AbstractDecoratedNodeState", "interfaces": "", "fields": [{"original_string": "public static final Set<String> ALL = ImmutableSet.of(\"/\");", "modifier": "public static final", "type": "Set<String>", "declarator": "ALL = ImmutableSet.of(\"/\")", "var_name": "ALL"}, {"original_string": "public static final Set<String> NONE = ImmutableSet.of();", "modifier": "public static final", "type": "Set<String>", "declarator": "NONE = ImmutableSet.of()", "var_name": "NONE"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final Set<String> includedPaths;", "modifier": "private final", "type": "Set<String>", "declarator": "includedPaths", "var_name": "includedPaths"}, {"original_string": "private final Set<String> excludedPaths;", "modifier": "private final", "type": "Set<String>", "declarator": "excludedPaths", "var_name": "excludedPaths"}, {"original_string": "private final Set<String> fragmentPaths;", "modifier": "private final", "type": "Set<String>", "declarator": "fragmentPaths", "var_name": "fragmentPaths"}, {"original_string": "private final Set<String> excludedFragments;", "modifier": "private final", "type": "Set<String>", "declarator": "excludedFragments", "var_name": "excludedFragments"}], "methods": [{"identifier": "wrap", "parameters": "(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "modifiers": "@NotNull public static", "return": "NodeState", "signature": "NodeState wrap(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "full_signature": "@NotNull public static NodeState wrap(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "class_method_signature": "FilteringNodeState.wrap(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "testcase": false, "constructor": false}, {"identifier": "FilteringNodeState", "parameters": "(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @NotNull final Set<String> includedPaths,\n            @NotNull final Set<String> excludedPaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "modifiers": "private", "return": "", "signature": " FilteringNodeState(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @NotNull final Set<String> includedPaths,\n            @NotNull final Set<String> excludedPaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "full_signature": "private  FilteringNodeState(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @NotNull final Set<String> includedPaths,\n            @NotNull final Set<String> excludedPaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "class_method_signature": "FilteringNodeState.FilteringNodeState(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @NotNull final Set<String> includedPaths,\n            @NotNull final Set<String> excludedPaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "testcase": false, "constructor": true}, {"identifier": "decorateChild", "parameters": "(@NotNull final String name, @NotNull final NodeState child)", "modifiers": "@NotNull @Override protected", "return": "NodeState", "signature": "NodeState decorateChild(@NotNull final String name, @NotNull final NodeState child)", "full_signature": "@NotNull @Override protected NodeState decorateChild(@NotNull final String name, @NotNull final NodeState child)", "class_method_signature": "FilteringNodeState.decorateChild(@NotNull final String name, @NotNull final NodeState child)", "testcase": false, "constructor": false}, {"identifier": "hideChild", "parameters": "(@NotNull final String name, @NotNull final NodeState delegateChild)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean hideChild(@NotNull final String name, @NotNull final NodeState delegateChild)", "full_signature": "@Override protected boolean hideChild(@NotNull final String name, @NotNull final NodeState delegateChild)", "class_method_signature": "FilteringNodeState.hideChild(@NotNull final String name, @NotNull final NodeState delegateChild)", "testcase": false, "constructor": false}, {"identifier": "decorateProperty", "parameters": "(@NotNull final PropertyState propertyState)", "modifiers": "@Override protected", "return": "PropertyState", "signature": "PropertyState decorateProperty(@NotNull final PropertyState propertyState)", "full_signature": "@Override protected PropertyState decorateProperty(@NotNull final PropertyState propertyState)", "class_method_signature": "FilteringNodeState.decorateProperty(@NotNull final PropertyState propertyState)", "testcase": false, "constructor": false}, {"identifier": "isHidden", "parameters": "(\n            @NotNull final String path,\n            @NotNull final Set<String> includes,\n            @NotNull final Set<String> excludes,\n            @NotNull final Set<String> excludedFragments\n    )", "modifiers": "private static", "return": "boolean", "signature": "boolean isHidden(\n            @NotNull final String path,\n            @NotNull final Set<String> includes,\n            @NotNull final Set<String> excludes,\n            @NotNull final Set<String> excludedFragments\n    )", "full_signature": "private static boolean isHidden(\n            @NotNull final String path,\n            @NotNull final Set<String> includes,\n            @NotNull final Set<String> excludes,\n            @NotNull final Set<String> excludedFragments\n    )", "class_method_signature": "FilteringNodeState.isHidden(\n            @NotNull final String path,\n            @NotNull final Set<String> includes,\n            @NotNull final Set<String> excludes,\n            @NotNull final Set<String> excludedFragments\n    )", "testcase": false, "constructor": false}, {"identifier": "hasHiddenDescendants", "parameters": "(\n            @NotNull final String path,\n            @NotNull final Set<String> includePaths,\n            @NotNull final Set<String> excludePaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "modifiers": "private static", "return": "boolean", "signature": "boolean hasHiddenDescendants(\n            @NotNull final String path,\n            @NotNull final Set<String> includePaths,\n            @NotNull final Set<String> excludePaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "full_signature": "private static boolean hasHiddenDescendants(\n            @NotNull final String path,\n            @NotNull final Set<String> includePaths,\n            @NotNull final Set<String> excludePaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "class_method_signature": "FilteringNodeState.hasHiddenDescendants(\n            @NotNull final String path,\n            @NotNull final Set<String> includePaths,\n            @NotNull final Set<String> excludePaths,\n            @NotNull final Set<String> fragmentPaths,\n            @NotNull final Set<String> excludedFragments\n    )", "testcase": false, "constructor": false}, {"identifier": "isIncluded", "parameters": "(@NotNull final String path, @NotNull final Set<String> includePaths)", "modifiers": "private static", "return": "boolean", "signature": "boolean isIncluded(@NotNull final String path, @NotNull final Set<String> includePaths)", "full_signature": "private static boolean isIncluded(@NotNull final String path, @NotNull final Set<String> includePaths)", "class_method_signature": "FilteringNodeState.isIncluded(@NotNull final String path, @NotNull final Set<String> includePaths)", "testcase": false, "constructor": false}, {"identifier": "isExcluded", "parameters": "(@NotNull final String path, @NotNull final Set<String> excludePaths, @NotNull final Set<String> excludedFragments)", "modifiers": "private static", "return": "boolean", "signature": "boolean isExcluded(@NotNull final String path, @NotNull final Set<String> excludePaths, @NotNull final Set<String> excludedFragments)", "full_signature": "private static boolean isExcluded(@NotNull final String path, @NotNull final Set<String> excludePaths, @NotNull final Set<String> excludedFragments)", "class_method_signature": "FilteringNodeState.isExcluded(@NotNull final String path, @NotNull final Set<String> excludePaths, @NotNull final Set<String> excludedFragments)", "testcase": false, "constructor": false}, {"identifier": "isAncestorOfAnyPath", "parameters": "(@NotNull final String ancestor, @NotNull final Set<String> paths)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAncestorOfAnyPath(@NotNull final String ancestor, @NotNull final Set<String> paths)", "full_signature": "private static boolean isAncestorOfAnyPath(@NotNull final String ancestor, @NotNull final Set<String> paths)", "class_method_signature": "FilteringNodeState.isAncestorOfAnyPath(@NotNull final String ancestor, @NotNull final Set<String> paths)", "testcase": false, "constructor": false}, {"identifier": "isDescendantOfAnyPath", "parameters": "(@NotNull final String descendant, @NotNull final Set<String> paths)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDescendantOfAnyPath(@NotNull final String descendant, @NotNull final Set<String> paths)", "full_signature": "private static boolean isDescendantOfAnyPath(@NotNull final String descendant, @NotNull final Set<String> paths)", "class_method_signature": "FilteringNodeState.isDescendantOfAnyPath(@NotNull final String descendant, @NotNull final Set<String> paths)", "testcase": false, "constructor": false}, {"identifier": "containsAnyFragment", "parameters": "(@NotNull final String path, @NotNull final Set<String> fragments)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsAnyFragment(@NotNull final String path, @NotNull final Set<String> fragments)", "full_signature": "private static boolean containsAnyFragment(@NotNull final String path, @NotNull final Set<String> fragments)", "class_method_signature": "FilteringNodeState.containsAnyFragment(@NotNull final String path, @NotNull final Set<String> fragments)", "testcase": false, "constructor": false}, {"identifier": "defaultIfEmpty", "parameters": "(@Nullable Set<T> value, @NotNull Set<T> defaultValue)", "modifiers": "@NotNull private static", "return": "Set<T>", "signature": "Set<T> defaultIfEmpty(@Nullable Set<T> value, @NotNull Set<T> defaultValue)", "full_signature": "@NotNull private static Set<T> defaultIfEmpty(@Nullable Set<T> value, @NotNull Set<T> defaultValue)", "class_method_signature": "FilteringNodeState.defaultIfEmpty(@Nullable Set<T> value, @NotNull Set<T> defaultValue)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(@Nullable final Set<T> set)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmpty(@Nullable final Set<T> set)", "full_signature": "private static boolean isEmpty(@Nullable final Set<T> set)", "class_method_signature": "FilteringNodeState.isEmpty(@Nullable final Set<T> set)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/migration/FilteringNodeState.java"}, "focal_method": {"identifier": "wrap", "parameters": "(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "modifiers": "@NotNull public static", "return": "NodeState", "body": "@NotNull\n    public static NodeState wrap(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    ) {\n        final Set<String> includes = defaultIfEmpty(includePaths, ALL);\n        final Set<String> excludes = defaultIfEmpty(excludePaths, NONE);\n        final Set<String> safeFragmentPaths = defaultIfEmpty(fragmentPaths, NONE);\n        final Set<String> safeExcludedFragments = defaultIfEmpty(excludedFragments, NONE);\n        if (hasHiddenDescendants(path, includes, excludes, safeFragmentPaths, safeExcludedFragments)) {\n            return new FilteringNodeState(path, delegate, includes, excludes, fragmentPaths, safeExcludedFragments);\n        }\n        return delegate;\n    }", "signature": "NodeState wrap(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "full_signature": "@NotNull public static NodeState wrap(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "class_method_signature": "FilteringNodeState.wrap(\n            @NotNull final String path,\n            @NotNull final NodeState delegate,\n            @Nullable final Set<String> includePaths,\n            @Nullable final Set<String> excludePaths,\n            @Nullable final Set<String> fragmentPaths,\n            @Nullable final Set<String> excludedFragments\n    )", "testcase": false, "constructor": false, "invocations": ["defaultIfEmpty", "defaultIfEmpty", "defaultIfEmpty", "defaultIfEmpty", "hasHiddenDescendants"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}