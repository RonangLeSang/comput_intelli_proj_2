{"test_class": {"identifier": "UserImplTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/UserImplTest.java"}, "test_case": {"identifier": "testChangePasswordWithOld", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChangePasswordWithOld() throws Exception {\n        String pwHash = root.getTree(user.getPath()).getProperty(UserConstants.REP_PASSWORD).getValue(Type.STRING);\n        assertTrue(PasswordUtil.isSame(pwHash, user.getID()));\n\n        user.changePassword(\"different\", user.getID());\n\n        String pwHash2 = root.getTree(user.getPath()).getProperty(UserConstants.REP_PASSWORD).getValue(Type.STRING);\n        assertTrue(PasswordUtil.isSame(pwHash2, \"different\"));\n    }", "signature": "void testChangePasswordWithOld()", "full_signature": "@Test public void testChangePasswordWithOld()", "class_method_signature": "UserImplTest.testChangePasswordWithOld()", "testcase": true, "constructor": false, "invocations": ["getValue", "getProperty", "getTree", "getPath", "assertTrue", "isSame", "getID", "changePassword", "getID", "getValue", "getProperty", "getTree", "getPath", "assertTrue", "isSame"]}, "focal_class": {"identifier": "UserImpl", "superclass": "extends AuthorizableImpl", "interfaces": "implements User", "fields": [{"original_string": "private final boolean isAdmin;", "modifier": "private final", "type": "boolean", "declarator": "isAdmin", "var_name": "isAdmin"}, {"original_string": "private final PasswordHistory pwHistory;", "modifier": "private final", "type": "PasswordHistory", "declarator": "pwHistory", "var_name": "pwHistory"}], "methods": [{"identifier": "UserImpl", "parameters": "(String id, Tree tree, UserManagerImpl userManager)", "modifiers": "", "return": "", "signature": " UserImpl(String id, Tree tree, UserManagerImpl userManager)", "full_signature": "  UserImpl(String id, Tree tree, UserManagerImpl userManager)", "class_method_signature": "UserImpl.UserImpl(String id, Tree tree, UserManagerImpl userManager)", "testcase": false, "constructor": true}, {"identifier": "checkValidTree", "parameters": "(@NotNull Tree tree)", "modifiers": "@Override", "return": "void", "signature": "void checkValidTree(@NotNull Tree tree)", "full_signature": "@Override void checkValidTree(@NotNull Tree tree)", "class_method_signature": "UserImpl.checkValidTree(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "isGroup", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGroup()", "full_signature": "@Override public boolean isGroup()", "class_method_signature": "UserImpl.isGroup()", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Principal", "signature": "Principal getPrincipal()", "full_signature": "@NotNull @Override public Principal getPrincipal()", "class_method_signature": "UserImpl.getPrincipal()", "testcase": false, "constructor": false}, {"identifier": "isAdmin", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAdmin()", "full_signature": "@Override public boolean isAdmin()", "class_method_signature": "UserImpl.isAdmin()", "testcase": false, "constructor": false}, {"identifier": "isSystemUser", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSystemUser()", "full_signature": "@Override public boolean isSystemUser()", "class_method_signature": "UserImpl.isSystemUser()", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Credentials", "signature": "Credentials getCredentials()", "full_signature": "@NotNull @Override public Credentials getCredentials()", "class_method_signature": "UserImpl.getCredentials()", "testcase": false, "constructor": false}, {"identifier": "getImpersonation", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Impersonation", "signature": "Impersonation getImpersonation()", "full_signature": "@NotNull @Override public Impersonation getImpersonation()", "class_method_signature": "UserImpl.getImpersonation()", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(String password)", "modifiers": "@Override public", "return": "void", "signature": "void changePassword(String password)", "full_signature": "@Override public void changePassword(String password)", "class_method_signature": "UserImpl.changePassword(String password)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(@Nullable String password, @NotNull String oldPassword)", "modifiers": "@Override public", "return": "void", "signature": "void changePassword(@Nullable String password, @NotNull String oldPassword)", "full_signature": "@Override public void changePassword(@Nullable String password, @NotNull String oldPassword)", "class_method_signature": "UserImpl.changePassword(@Nullable String password, @NotNull String oldPassword)", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "(@Nullable String reason)", "modifiers": "@Override public", "return": "void", "signature": "void disable(@Nullable String reason)", "full_signature": "@Override public void disable(@Nullable String reason)", "class_method_signature": "UserImpl.disable(@Nullable String reason)", "testcase": false, "constructor": false}, {"identifier": "isDisabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisabled()", "full_signature": "@Override public boolean isDisabled()", "class_method_signature": "UserImpl.isDisabled()", "testcase": false, "constructor": false}, {"identifier": "getDisabledReason", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getDisabledReason()", "full_signature": "@Nullable @Override public String getDisabledReason()", "class_method_signature": "UserImpl.getDisabledReason()", "testcase": false, "constructor": false}, {"identifier": "getPasswordHash", "parameters": "()", "modifiers": "@Nullable private", "return": "String", "signature": "String getPasswordHash()", "full_signature": "@Nullable private String getPasswordHash()", "class_method_signature": "UserImpl.getPasswordHash()", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserImpl.java"}, "focal_method": {"identifier": "changePassword", "parameters": "(String password)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void changePassword(String password) throws RepositoryException {\n        if (password == null) {\n            throw new RepositoryException(\"Attempt to set 'null' password for user \" + getID());\n        }\n        UserManagerImpl userManager = getUserManager();\n        userManager.onPasswordChange(this, password);\n\n        pwHistory.updatePasswordHistory(getTree(), password);\n\n        userManager.setPassword(getTree(), getID(),  password, false);\n    }", "signature": "void changePassword(String password)", "full_signature": "@Override public void changePassword(String password)", "class_method_signature": "UserImpl.changePassword(String password)", "testcase": false, "constructor": false, "invocations": ["getID", "getUserManager", "onPasswordChange", "updatePasswordHistory", "getTree", "setPassword", "getTree", "getID"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}