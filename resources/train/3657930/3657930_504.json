{"test_class": {"identifier": "UserPrincipalProviderTest", "superclass": "extends AbstractPrincipalProviderTest", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/UserPrincipalProviderTest.java"}, "test_case": {"identifier": "testMissingUserPrincipalName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissingUserPrincipalName() throws Exception {\n        User u = getTestUser();\n        Tree t = root.getTree(u.getPath());\n        t.removeProperty(REP_PRINCIPAL_NAME);\n\n        assertTrue(principalProvider.getPrincipals(u.getID()).isEmpty());\n    }", "signature": "void testMissingUserPrincipalName()", "full_signature": "@Test public void testMissingUserPrincipalName()", "class_method_signature": "UserPrincipalProviderTest.testMissingUserPrincipalName()", "testcase": true, "constructor": false, "invocations": ["getTestUser", "getTree", "getPath", "removeProperty", "assertTrue", "isEmpty", "getPrincipals", "getID"]}, "focal_class": {"identifier": "UserPrincipalProvider", "superclass": "", "interfaces": "implements PrincipalProvider", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(UserPrincipalProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(UserPrincipalProvider.class)", "var_name": "log"}, {"original_string": "static final String PARAM_CACHE_EXPIRATION = \"cacheExpiration\";", "modifier": "static final", "type": "String", "declarator": "PARAM_CACHE_EXPIRATION = \"cacheExpiration\"", "var_name": "PARAM_CACHE_EXPIRATION"}, {"original_string": "static final long EXPIRATION_NO_CACHE = 0;", "modifier": "static final", "type": "long", "declarator": "EXPIRATION_NO_CACHE = 0", "var_name": "EXPIRATION_NO_CACHE"}, {"original_string": "private static final long MEMBERSHIP_THRESHOLD = 0;", "modifier": "private static final", "type": "long", "declarator": "MEMBERSHIP_THRESHOLD = 0", "var_name": "MEMBERSHIP_THRESHOLD"}, {"original_string": "private final Root root;", "modifier": "private final", "type": "Root", "declarator": "root", "var_name": "root"}, {"original_string": "private final UserConfiguration config;", "modifier": "private final", "type": "UserConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}, {"original_string": "private final UserProvider userProvider;", "modifier": "private final", "type": "UserProvider", "declarator": "userProvider", "var_name": "userProvider"}, {"original_string": "private final MembershipProvider membershipProvider;", "modifier": "private final", "type": "MembershipProvider", "declarator": "membershipProvider", "var_name": "membershipProvider"}, {"original_string": "private final long expiration;", "modifier": "private final", "type": "long", "declarator": "expiration", "var_name": "expiration"}, {"original_string": "private final boolean cacheEnabled;", "modifier": "private final", "type": "boolean", "declarator": "cacheEnabled", "var_name": "cacheEnabled"}], "methods": [{"identifier": "UserPrincipalProvider", "parameters": "(@NotNull Root root,\n                          @NotNull UserConfiguration userConfiguration,\n                          @NotNull NamePathMapper namePathMapper)", "modifiers": "", "return": "", "signature": " UserPrincipalProvider(@NotNull Root root,\n                          @NotNull UserConfiguration userConfiguration,\n                          @NotNull NamePathMapper namePathMapper)", "full_signature": "  UserPrincipalProvider(@NotNull Root root,\n                          @NotNull UserConfiguration userConfiguration,\n                          @NotNull NamePathMapper namePathMapper)", "class_method_signature": "UserPrincipalProvider.UserPrincipalProvider(@NotNull Root root,\n                          @NotNull UserConfiguration userConfiguration,\n                          @NotNull NamePathMapper namePathMapper)", "testcase": false, "constructor": true}, {"identifier": "getPrincipal", "parameters": "(@NotNull String principalName)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal getPrincipal(@NotNull String principalName)", "full_signature": "@Override public Principal getPrincipal(@NotNull String principalName)", "class_method_signature": "UserPrincipalProvider.getPrincipal(@NotNull String principalName)", "testcase": false, "constructor": false}, {"identifier": "getItemBasedPrincipal", "parameters": "(@NotNull String principalOakPath)", "modifiers": "@Nullable @Override public", "return": "ItemBasedPrincipal", "signature": "ItemBasedPrincipal getItemBasedPrincipal(@NotNull String principalOakPath)", "full_signature": "@Nullable @Override public ItemBasedPrincipal getItemBasedPrincipal(@NotNull String principalOakPath)", "class_method_signature": "UserPrincipalProvider.getItemBasedPrincipal(@NotNull String principalOakPath)", "testcase": false, "constructor": false}, {"identifier": "getMembershipPrincipals", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "Set<Principal>", "signature": "Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "full_signature": "@NotNull @Override public Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "class_method_signature": "UserPrincipalProvider.getMembershipPrincipals(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "(@NotNull String userID)", "modifiers": "@NotNull @Override public", "return": "Set<? extends Principal>", "signature": "Set<? extends Principal> getPrincipals(@NotNull String userID)", "full_signature": "@NotNull @Override public Set<? extends Principal> getPrincipals(@NotNull String userID)", "class_method_signature": "UserPrincipalProvider.getPrincipals(@NotNull String userID)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(@Nullable final String nameHint, final int searchType)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(@Nullable final String nameHint, final int searchType)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(@Nullable final String nameHint, final int searchType)", "class_method_signature": "UserPrincipalProvider.findPrincipals(@Nullable final String nameHint, final int searchType)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(@Nullable final String nameHint, final boolean fullText, final int searchType, long offset,\n            long limit)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(@Nullable final String nameHint, final boolean fullText, final int searchType, long offset,\n            long limit)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(@Nullable final String nameHint, final boolean fullText, final int searchType, long offset,\n            long limit)", "class_method_signature": "UserPrincipalProvider.findPrincipals(@Nullable final String nameHint, final boolean fullText, final int searchType, long offset,\n            long limit)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(int searchType)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(int searchType)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(int searchType)", "class_method_signature": "UserPrincipalProvider.findPrincipals(int searchType)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizableTree", "parameters": "(@NotNull Principal principal)", "modifiers": "@Nullable private", "return": "Tree", "signature": "Tree getAuthorizableTree(@NotNull Principal principal)", "full_signature": "@Nullable private Tree getAuthorizableTree(@NotNull Principal principal)", "class_method_signature": "UserPrincipalProvider.getAuthorizableTree(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "createPrincipal", "parameters": "(@Nullable Tree authorizableTree)", "modifiers": "@Nullable private", "return": "Principal", "signature": "Principal createPrincipal(@Nullable Tree authorizableTree)", "full_signature": "@Nullable private Principal createPrincipal(@Nullable Tree authorizableTree)", "class_method_signature": "UserPrincipalProvider.createPrincipal(@Nullable Tree authorizableTree)", "testcase": false, "constructor": false}, {"identifier": "createUserPrincipal", "parameters": "(@NotNull String id, @NotNull Tree userTree)", "modifiers": "@Nullable private", "return": "Principal", "signature": "Principal createUserPrincipal(@NotNull String id, @NotNull Tree userTree)", "full_signature": "@Nullable private Principal createUserPrincipal(@NotNull String id, @NotNull Tree userTree)", "class_method_signature": "UserPrincipalProvider.createUserPrincipal(@NotNull String id, @NotNull Tree userTree)", "testcase": false, "constructor": false}, {"identifier": "createGroupPrincipal", "parameters": "(@NotNull Tree groupTree)", "modifiers": "@Nullable private", "return": "Principal", "signature": "Principal createGroupPrincipal(@NotNull Tree groupTree)", "full_signature": "@Nullable private Principal createGroupPrincipal(@NotNull Tree groupTree)", "class_method_signature": "UserPrincipalProvider.createGroupPrincipal(@NotNull Tree groupTree)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalName", "parameters": "(@NotNull Tree tree)", "modifiers": "@Nullable private static", "return": "String", "signature": "String getPrincipalName(@NotNull Tree tree)", "full_signature": "@Nullable private static String getPrincipalName(@NotNull Tree tree)", "class_method_signature": "UserPrincipalProvider.getPrincipalName(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getGroupMembership", "parameters": "(@NotNull Tree authorizableTree)", "modifiers": "@NotNull private", "return": "Set<Principal>", "signature": "Set<Principal> getGroupMembership(@NotNull Tree authorizableTree)", "full_signature": "@NotNull private Set<Principal> getGroupMembership(@NotNull Tree authorizableTree)", "class_method_signature": "UserPrincipalProvider.getGroupMembership(@NotNull Tree authorizableTree)", "testcase": false, "constructor": false}, {"identifier": "cacheGroups", "parameters": "(@NotNull Tree authorizableNode, @NotNull Set<Principal> groupPrincipals)", "modifiers": "private", "return": "void", "signature": "void cacheGroups(@NotNull Tree authorizableNode, @NotNull Set<Principal> groupPrincipals)", "full_signature": "private void cacheGroups(@NotNull Tree authorizableNode, @NotNull Set<Principal> groupPrincipals)", "class_method_signature": "UserPrincipalProvider.cacheGroups(@NotNull Tree authorizableNode, @NotNull Set<Principal> groupPrincipals)", "testcase": false, "constructor": false}, {"identifier": "readGroupsFromCache", "parameters": "(@NotNull Tree authorizableNode, @NotNull Set<Principal> groups)", "modifiers": "private", "return": "boolean", "signature": "boolean readGroupsFromCache(@NotNull Tree authorizableNode, @NotNull Set<Principal> groups)", "full_signature": "private boolean readGroupsFromCache(@NotNull Tree authorizableNode, @NotNull Set<Principal> groups)", "class_method_signature": "UserPrincipalProvider.readGroupsFromCache(@NotNull Tree authorizableNode, @NotNull Set<Principal> groups)", "testcase": false, "constructor": false}, {"identifier": "isValidCache", "parameters": "(Tree principalCache)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidCache(Tree principalCache)", "full_signature": "private static boolean isValidCache(Tree principalCache)", "class_method_signature": "UserPrincipalProvider.isValidCache(Tree principalCache)", "testcase": false, "constructor": false}, {"identifier": "buildSearchPatternContains", "parameters": "(@NotNull String nameHint)", "modifiers": "private static", "return": "String", "signature": "String buildSearchPatternContains(@NotNull String nameHint)", "full_signature": "private static String buildSearchPatternContains(@NotNull String nameHint)", "class_method_signature": "UserPrincipalProvider.buildSearchPatternContains(@NotNull String nameHint)", "testcase": false, "constructor": false}, {"identifier": "buildSearchPatternFT", "parameters": "(@NotNull String nameHint)", "modifiers": "private static", "return": "String", "signature": "String buildSearchPatternFT(@NotNull String nameHint)", "full_signature": "private static String buildSearchPatternFT(@NotNull String nameHint)", "class_method_signature": "UserPrincipalProvider.buildSearchPatternFT(@NotNull String nameHint)", "testcase": false, "constructor": false}, {"identifier": "matchesEveryone", "parameters": "(String nameHint, int searchType)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchesEveryone(String nameHint, int searchType)", "full_signature": "private static boolean matchesEveryone(String nameHint, int searchType)", "class_method_signature": "UserPrincipalProvider.matchesEveryone(String nameHint, int searchType)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserPrincipalProvider.java"}, "focal_method": {"identifier": "getPrincipals", "parameters": "(@NotNull String userID)", "modifiers": "@NotNull @Override public", "return": "Set<? extends Principal>", "body": "@NotNull\n    @Override\n    public Set<? extends Principal> getPrincipals(@NotNull String userID) {\n        Set<Principal> principals = new HashSet<>();\n        Tree tree = userProvider.getAuthorizable(userID);\n        if (UserUtil.isType(tree, AuthorizableType.USER)) {\n            Principal userPrincipal = createUserPrincipal(userID, tree);\n            if (userPrincipal != null) {\n                principals.add(userPrincipal);\n                principals.addAll(getGroupMembership(tree));\n            }\n        }\n        return principals;\n    }", "signature": "Set<? extends Principal> getPrincipals(@NotNull String userID)", "full_signature": "@NotNull @Override public Set<? extends Principal> getPrincipals(@NotNull String userID)", "class_method_signature": "UserPrincipalProvider.getPrincipals(@NotNull String userID)", "testcase": false, "constructor": false, "invocations": ["getAuthorizable", "isType", "createUserPrincipal", "add", "addAll", "getGroupMembership"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}