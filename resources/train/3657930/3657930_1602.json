{"test_class": {"identifier": "ImmutableTreeTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private static final String HIDDEN_PATH = \"/oak:index/acPrincipalName/:index\";", "modifier": "private static final", "type": "String", "declarator": "HIDDEN_PATH = \"/oak:index/acPrincipalName/:index\"", "var_name": "HIDDEN_PATH"}, {"original_string": "private ImmutableTree immutable;", "modifier": "private", "type": "ImmutableTree", "declarator": "immutable", "var_name": "immutable"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/tree/impl/ImmutableTreeTest.java"}, "test_case": {"identifier": "testGetPropertyStatus", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPropertyStatus() {\n        ImmutableTree orderable = immutable.getChild(\"orderable\");\n        assertSame(Tree.Status.UNCHANGED, orderable.getPropertyStatus(TreeConstants.OAK_CHILD_ORDER));\n    }", "signature": "void testGetPropertyStatus()", "full_signature": "@Test public void testGetPropertyStatus()", "class_method_signature": "ImmutableTreeTest.testGetPropertyStatus()", "testcase": true, "constructor": false, "invocations": ["getChild", "assertSame", "getPropertyStatus"]}, "focal_class": {"identifier": "ImmutableTree", "superclass": "extends AbstractTree", "interfaces": "implements TreeTypeAware, ReadOnly", "fields": [{"original_string": "private final NodeBuilder nodeBuilder;", "modifier": "private final", "type": "NodeBuilder", "declarator": "nodeBuilder", "var_name": "nodeBuilder"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final ParentProvider parentProvider;", "modifier": "private final", "type": "ParentProvider", "declarator": "parentProvider", "var_name": "parentProvider"}, {"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private TreeType type;", "modifier": "private", "type": "TreeType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "ImmutableTree", "parameters": "(@NotNull NodeState rootState)", "modifiers": "public", "return": "", "signature": " ImmutableTree(@NotNull NodeState rootState)", "full_signature": "public  ImmutableTree(@NotNull NodeState rootState)", "class_method_signature": "ImmutableTree.ImmutableTree(@NotNull NodeState rootState)", "testcase": false, "constructor": true}, {"identifier": "ImmutableTree", "parameters": "(@NotNull ImmutableTree parent, @NotNull String name, @NotNull NodeState state)", "modifiers": "public", "return": "", "signature": " ImmutableTree(@NotNull ImmutableTree parent, @NotNull String name, @NotNull NodeState state)", "full_signature": "public  ImmutableTree(@NotNull ImmutableTree parent, @NotNull String name, @NotNull NodeState state)", "class_method_signature": "ImmutableTree.ImmutableTree(@NotNull ImmutableTree parent, @NotNull String name, @NotNull NodeState state)", "testcase": false, "constructor": true}, {"identifier": "ImmutableTree", "parameters": "(@NotNull ParentProvider parentProvider, @NotNull String name, @NotNull NodeState state)", "modifiers": "public", "return": "", "signature": " ImmutableTree(@NotNull ParentProvider parentProvider, @NotNull String name, @NotNull NodeState state)", "full_signature": "public  ImmutableTree(@NotNull ParentProvider parentProvider, @NotNull String name, @NotNull NodeState state)", "class_method_signature": "ImmutableTree.ImmutableTree(@NotNull ParentProvider parentProvider, @NotNull String name, @NotNull NodeState state)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Nullable public", "return": "TreeType", "signature": "TreeType getType()", "full_signature": "@Nullable public TreeType getType()", "class_method_signature": "ImmutableTree.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(@NotNull TreeType type)", "modifiers": "public", "return": "void", "signature": "void setType(@NotNull TreeType type)", "full_signature": "public void setType(@NotNull TreeType type)", "class_method_signature": "ImmutableTree.setType(@NotNull TreeType type)", "testcase": false, "constructor": false}, {"identifier": "createChild", "parameters": "(@NotNull String name)", "modifiers": "@Override @NotNull protected", "return": "ImmutableTree", "signature": "ImmutableTree createChild(@NotNull String name)", "full_signature": "@Override @NotNull protected ImmutableTree createChild(@NotNull String name)", "class_method_signature": "ImmutableTree.createChild(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override public boolean isRoot()", "class_method_signature": "ImmutableTree.isRoot()", "testcase": false, "constructor": false}, {"identifier": "getParentOrNull", "parameters": "()", "modifiers": "@Override @Nullable protected", "return": "AbstractTree", "signature": "AbstractTree getParentOrNull()", "full_signature": "@Override @Nullable protected AbstractTree getParentOrNull()", "class_method_signature": "ImmutableTree.getParentOrNull()", "testcase": false, "constructor": false}, {"identifier": "getNodeBuilder", "parameters": "()", "modifiers": "@NotNull @Override protected", "return": "NodeBuilder", "signature": "NodeBuilder getNodeBuilder()", "full_signature": "@NotNull @Override protected NodeBuilder getNodeBuilder()", "class_method_signature": "ImmutableTree.getNodeBuilder()", "testcase": false, "constructor": false}, {"identifier": "isHidden", "parameters": "(@NotNull String name)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isHidden(@NotNull String name)", "full_signature": "@Override protected boolean isHidden(@NotNull String name)", "class_method_signature": "ImmutableTree.isHidden(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getInternalNodeNames", "parameters": "()", "modifiers": "@NotNull @Override protected", "return": "String[]", "signature": "String[] getInternalNodeNames()", "full_signature": "@NotNull @Override protected String[] getInternalNodeNames()", "class_method_signature": "ImmutableTree.getInternalNodeNames()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "ImmutableTree.getName()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "String", "signature": "String getPath()", "full_signature": "@Override @NotNull public String getPath()", "class_method_signature": "ImmutableTree.getPath()", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "(@NotNull String name)", "modifiers": "@NotNull @Override public", "return": "ImmutableTree", "signature": "ImmutableTree getChild(@NotNull String name)", "full_signature": "@NotNull @Override public ImmutableTree getChild(@NotNull String name)", "class_method_signature": "ImmutableTree.getChild(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove()", "full_signature": "@Override public boolean remove()", "class_method_signature": "ImmutableTree.remove()", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(@NotNull String name)", "modifiers": "@Override @NotNull public", "return": "Tree", "signature": "Tree addChild(@NotNull String name)", "full_signature": "@Override @NotNull public Tree addChild(@NotNull String name)", "class_method_signature": "ImmutableTree.addChild(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "setOrderableChildren", "parameters": "(boolean enable)", "modifiers": "@Override public", "return": "void", "signature": "void setOrderableChildren(boolean enable)", "full_signature": "@Override public void setOrderableChildren(boolean enable)", "class_method_signature": "ImmutableTree.setOrderableChildren(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "orderBefore", "parameters": "(@Nullable String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean orderBefore(@Nullable String name)", "full_signature": "@Override public boolean orderBefore(@Nullable String name)", "class_method_signature": "ImmutableTree.orderBefore(@Nullable String name)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(@NotNull PropertyState property)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(@NotNull PropertyState property)", "full_signature": "@Override public void setProperty(@NotNull PropertyState property)", "class_method_signature": "ImmutableTree.setProperty(@NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(@NotNull String name, @NotNull T value)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(@NotNull String name, @NotNull T value)", "full_signature": "@Override public void setProperty(@NotNull String name, @NotNull T value)", "class_method_signature": "ImmutableTree.setProperty(@NotNull String name, @NotNull T value)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(@NotNull String name, @NotNull T value, @NotNull Type<T> type)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(@NotNull String name, @NotNull T value, @NotNull Type<T> type)", "full_signature": "@Override public void setProperty(@NotNull String name, @NotNull T value, @NotNull Type<T> type)", "class_method_signature": "ImmutableTree.setProperty(@NotNull String name, @NotNull T value, @NotNull Type<T> type)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(@NotNull String name)", "modifiers": "@Override public", "return": "void", "signature": "void removeProperty(@NotNull String name)", "full_signature": "@Override public void removeProperty(@NotNull String name)", "class_method_signature": "ImmutableTree.removeProperty(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableTree.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ImmutableTree.equals(Object o)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/tree/impl/ImmutableTree.java"}, "focal_method": {"identifier": "getChild", "parameters": "(@NotNull String name)", "modifiers": "@NotNull @Override public", "return": "ImmutableTree", "body": "@NotNull\n    @Override\n    public ImmutableTree getChild(@NotNull String name) throws IllegalArgumentException {\n        return createChild(name);\n\n    }", "signature": "ImmutableTree getChild(@NotNull String name)", "full_signature": "@NotNull @Override public ImmutableTree getChild(@NotNull String name)", "class_method_signature": "ImmutableTree.getChild(@NotNull String name)", "testcase": false, "constructor": false, "invocations": ["createChild"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}