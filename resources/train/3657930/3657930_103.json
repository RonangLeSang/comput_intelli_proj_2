{"test_class": {"identifier": "RangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/RangeTest.java"}, "test_case": {"identifier": "includes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void includes() {\n        Revision lower = new Revision(0xff, 0, 1);\n        Revision low = new Revision(0x100, 0, 1);\n        Revision high = new Revision(0x300, 0, 1);\n        Revision higher = new Revision(0x301, 0, 1);\n        Revision r = new Revision(0x200, 0, 1);\n        Revision other = new Revision(0x200, 0, 2);\n\n        Range range = new Range(high, low, 0);\n\n        // bounds are inclusive\n        assertTrue(range.includes(low));\n        assertTrue(range.includes(high));\n        // within bounds\n        assertTrue(range.includes(r));\n        // outside bounds\n        assertFalse(range.includes(lower));\n        assertFalse(range.includes(higher));\n        // other cluster id\n        assertFalse(range.includes(other));\n    }", "signature": "void includes()", "full_signature": "@Test public void includes()", "class_method_signature": "RangeTest.includes()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "includes", "assertTrue", "includes", "assertTrue", "includes", "assertFalse", "includes", "assertFalse", "includes", "assertFalse", "includes"]}, "focal_class": {"identifier": "Range", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Revision high;", "modifier": "final", "type": "Revision", "declarator": "high", "var_name": "high"}, {"original_string": "final Revision low;", "modifier": "final", "type": "Revision", "declarator": "low", "var_name": "low"}, {"original_string": "final int height;", "modifier": "final", "type": "int", "declarator": "height", "var_name": "height"}], "methods": [{"identifier": "Range", "parameters": "(@NotNull Revision high, @NotNull Revision low, int height)", "modifiers": "", "return": "", "signature": " Range(@NotNull Revision high, @NotNull Revision low, int height)", "full_signature": "  Range(@NotNull Revision high, @NotNull Revision low, int height)", "class_method_signature": "Range.Range(@NotNull Revision high, @NotNull Revision low, int height)", "testcase": false, "constructor": true}, {"identifier": "fromEntry", "parameters": "(Revision rev, String value)", "modifiers": "@NotNull static", "return": "Range", "signature": "Range fromEntry(Revision rev, String value)", "full_signature": "@NotNull static Range fromEntry(Revision rev, String value)", "class_method_signature": "Range.fromEntry(Revision rev, String value)", "testcase": false, "constructor": false}, {"identifier": "getLowValue", "parameters": "()", "modifiers": "@NotNull", "return": "String", "signature": "String getLowValue()", "full_signature": "@NotNull String getLowValue()", "class_method_signature": "Range.getLowValue()", "testcase": false, "constructor": false}, {"identifier": "includes", "parameters": "(@NotNull Revision r)", "modifiers": "", "return": "boolean", "signature": "boolean includes(@NotNull Revision r)", "full_signature": " boolean includes(@NotNull Revision r)", "class_method_signature": "Range.includes(@NotNull Revision r)", "testcase": false, "constructor": false}, {"identifier": "getHeight", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getHeight()", "full_signature": " int getHeight()", "class_method_signature": "Range.getHeight()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Range.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Range.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Range.equals(Object obj)", "testcase": false, "constructor": false}], "file": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/Range.java"}, "focal_method": {"identifier": "includes", "parameters": "(@NotNull Revision r)", "modifiers": "", "return": "boolean", "body": "boolean includes(@NotNull Revision r) {\n        return high.getClusterId() == r.getClusterId()\n                && high.compareRevisionTime(r) >= 0\n                && low.compareRevisionTime(r) <= 0;\n    }", "signature": "boolean includes(@NotNull Revision r)", "full_signature": " boolean includes(@NotNull Revision r)", "class_method_signature": "Range.includes(@NotNull Revision r)", "testcase": false, "constructor": false, "invocations": ["getClusterId", "getClusterId", "compareRevisionTime", "compareRevisionTime"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}