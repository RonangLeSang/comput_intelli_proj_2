{"test_class": {"identifier": "NamePathMapperImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, String> GLOBAL = ImmutableMap.of(\n            \"oak-jcr\", \"http://www.jcp.org/jcr/1.0\",\n            \"oak-nt\", \"http://www.jcp.org/jcr/nt/1.0\",\n            \"oak-foo\", \"http://www.example.com/foo\",\n            \"oak-quu\", \"http://www.example.com/quu\",\n            \"oak\",     \"http://jackrabbit.apache.org/oak/ns/1.0\");", "modifier": "private static final", "type": "Map<String, String>", "declarator": "GLOBAL = ImmutableMap.of(\n            \"oak-jcr\", \"http://www.jcp.org/jcr/1.0\",\n            \"oak-nt\", \"http://www.jcp.org/jcr/nt/1.0\",\n            \"oak-foo\", \"http://www.example.com/foo\",\n            \"oak-quu\", \"http://www.example.com/quu\",\n            \"oak\",     \"http://jackrabbit.apache.org/oak/ns/1.0\")", "var_name": "GLOBAL"}, {"original_string": "private static final Map<String, String> LOCAL = ImmutableMap.of(\n            \"jcr-jcr\", \"http://www.jcp.org/jcr/1.0\",\n            \"jcr-nt\", \"http://www.jcp.org/jcr/nt/1.0\",\n            \"foo\", \"http://www.example.com/foo\",\n            \"quu\", \"http://www.example.com/quu\");", "modifier": "private static final", "type": "Map<String, String>", "declarator": "LOCAL = ImmutableMap.of(\n            \"jcr-jcr\", \"http://www.jcp.org/jcr/1.0\",\n            \"jcr-nt\", \"http://www.jcp.org/jcr/nt/1.0\",\n            \"foo\", \"http://www.example.com/foo\",\n            \"quu\", \"http://www.example.com/quu\")", "var_name": "LOCAL"}, {"original_string": "private final NameMapper mapper = new LocalNameMapper(GLOBAL, LOCAL);", "modifier": "private final", "type": "NameMapper", "declarator": "mapper = new LocalNameMapper(GLOBAL, LOCAL)", "var_name": "mapper"}, {"original_string": "private NamePathMapper npMapper = new NamePathMapperImpl(mapper);", "modifier": "private", "type": "NamePathMapper", "declarator": "npMapper = new NamePathMapperImpl(mapper)", "var_name": "npMapper"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/namepath/impl/NamePathMapperImplTest.java"}, "test_case": {"identifier": "testOakToJcr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOakToJcr() {\n        assertEquals(\"/foo:bar\", npMapper.getJcrPath(\"/oak-foo:bar\"));\n        assertEquals(\"/foo:bar/quu:qux\", npMapper.getJcrPath(\"/oak-foo:bar/oak-quu:qux\"));\n        assertEquals(\"foo:bar\", npMapper.getJcrPath(\"oak-foo:bar\"));\n        assertEquals(\".\", npMapper.getJcrPath(\"\"));\n\n        try {\n            npMapper.getJcrPath(\"{http://www.jcp.org/jcr/nt/1.0}unstructured\");\n            fail(\"expanded name should not be accepted\");\n        } catch (IllegalArgumentException expected) {\n        }\n\n        try {\n            npMapper.getJcrPath(\"foobar/{http://www.jcp.org/jcr/1.0}content\");\n            fail(\"expanded name should not be accepted\");\n        } catch (IllegalArgumentException expected) {\n        }\n    }", "signature": "void testOakToJcr()", "full_signature": "@Test public void testOakToJcr()", "class_method_signature": "NamePathMapperImplTest.testOakToJcr()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getJcrPath", "assertEquals", "getJcrPath", "assertEquals", "getJcrPath", "assertEquals", "getJcrPath", "getJcrPath", "fail", "getJcrPath", "fail"]}, "focal_class": {"identifier": "NamePathMapperImpl", "superclass": "", "interfaces": "implements NamePathMapper", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(NamePathMapperImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NamePathMapperImpl.class)", "var_name": "log"}, {"original_string": "private final NameMapper nameMapper;", "modifier": "private final", "type": "NameMapper", "declarator": "nameMapper", "var_name": "nameMapper"}, {"original_string": "private final IdentifierManager idManager;", "modifier": "private final", "type": "IdentifierManager", "declarator": "idManager", "var_name": "idManager"}], "methods": [{"identifier": "NamePathMapperImpl", "parameters": "(NameMapper nameMapper)", "modifiers": "public", "return": "", "signature": " NamePathMapperImpl(NameMapper nameMapper)", "full_signature": "public  NamePathMapperImpl(NameMapper nameMapper)", "class_method_signature": "NamePathMapperImpl.NamePathMapperImpl(NameMapper nameMapper)", "testcase": false, "constructor": true}, {"identifier": "NamePathMapperImpl", "parameters": "(NameMapper nameMapper, IdentifierManager idManager)", "modifiers": "public", "return": "", "signature": " NamePathMapperImpl(NameMapper nameMapper, IdentifierManager idManager)", "full_signature": "public  NamePathMapperImpl(NameMapper nameMapper, IdentifierManager idManager)", "class_method_signature": "NamePathMapperImpl.NamePathMapperImpl(NameMapper nameMapper, IdentifierManager idManager)", "testcase": false, "constructor": true}, {"identifier": "getOakNameOrNull", "parameters": "(@NotNull String jcrName)", "modifiers": "@Override public", "return": "String", "signature": "String getOakNameOrNull(@NotNull String jcrName)", "full_signature": "@Override public String getOakNameOrNull(@NotNull String jcrName)", "class_method_signature": "NamePathMapperImpl.getOakNameOrNull(@NotNull String jcrName)", "testcase": false, "constructor": false}, {"identifier": "getOakName", "parameters": "(@NotNull String jcrName)", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getOakName(@NotNull String jcrName)", "full_signature": "@NotNull @Override public String getOakName(@NotNull String jcrName)", "class_method_signature": "NamePathMapperImpl.getOakName(@NotNull String jcrName)", "testcase": false, "constructor": false}, {"identifier": "getJcrName", "parameters": "(@NotNull String oakName)", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getJcrName(@NotNull String oakName)", "full_signature": "@NotNull @Override public String getJcrName(@NotNull String oakName)", "class_method_signature": "NamePathMapperImpl.getJcrName(@NotNull String oakName)", "testcase": false, "constructor": false}, {"identifier": "getSessionLocalMappings", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "Map<String, String>", "signature": "Map<String, String> getSessionLocalMappings()", "full_signature": "@Override @NotNull public Map<String, String> getSessionLocalMappings()", "class_method_signature": "NamePathMapperImpl.getSessionLocalMappings()", "testcase": false, "constructor": false}, {"identifier": "getOakPath", "parameters": "(String jcrPath)", "modifiers": "@Override public", "return": "String", "signature": "String getOakPath(String jcrPath)", "full_signature": "@Override public String getOakPath(String jcrPath)", "class_method_signature": "NamePathMapperImpl.getOakPath(String jcrPath)", "testcase": false, "constructor": false}, {"identifier": "getJcrPath", "parameters": "(final String oakPath)", "modifiers": "@Override @NotNull public", "return": "String", "signature": "String getJcrPath(final String oakPath)", "full_signature": "@Override @NotNull public String getJcrPath(final String oakPath)", "class_method_signature": "NamePathMapperImpl.getJcrPath(final String oakPath)", "testcase": false, "constructor": false}, {"identifier": "needsFullMapping", "parameters": "(String path)", "modifiers": "private", "return": "boolean", "signature": "boolean needsFullMapping(String path)", "full_signature": "private boolean needsFullMapping(String path)", "class_method_signature": "NamePathMapperImpl.needsFullMapping(String path)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/impl/NamePathMapperImpl.java"}, "focal_method": {"identifier": "getJcrPath", "parameters": "(final String oakPath)", "modifiers": "@Override @NotNull public", "return": "String", "body": "@Override\n    @NotNull\n    public String getJcrPath(final String oakPath) {\n        if (\"/\".equals(oakPath)) {\n            // avoid the need to special case the root path later on\n            return \"/\";\n        } else if (oakPath.isEmpty()) {\n            // empty path: map to \".\"\n            return \".\";\n        } else if (nameMapper.getSessionLocalMappings().isEmpty()) {\n            // no local namespace mappings\n            return oakPath;\n        }\n\n        PathListener listener = new PathListener() {\n            @Override\n            public boolean current() {\n                // nothing to do here\n                return false;\n            }\n\n            @Override\n            public void error(String message) {\n                throw new IllegalArgumentException(message);\n            }\n\n            @Override\n            public boolean name(String name, int index) {\n                String p = nameMapper.getJcrName(name);\n                if (index == 0) {\n                    elements.add(p);\n                } else {\n                    elements.add(p + '[' + index + ']');\n                }\n                return true;\n            }\n        };\n\n        JcrPathParser.parse(oakPath, listener);\n\n        StringBuilder jcrPath = new StringBuilder();\n        for (String element : listener.elements) {\n            if (element.isEmpty()) {\n                // root\n                jcrPath.append('/');\n            }\n            else {\n                jcrPath.append(element);\n                jcrPath.append('/');\n            }\n        }\n\n        jcrPath.deleteCharAt(jcrPath.length() - 1);\n        return jcrPath.toString();\n    }", "signature": "String getJcrPath(final String oakPath)", "full_signature": "@Override @NotNull public String getJcrPath(final String oakPath)", "class_method_signature": "NamePathMapperImpl.getJcrPath(final String oakPath)", "testcase": false, "constructor": false, "invocations": ["equals", "isEmpty", "isEmpty", "getSessionLocalMappings", "getJcrName", "add", "add", "parse", "isEmpty", "append", "append", "append", "deleteCharAt", "length", "toString"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}