{"test_class": {"identifier": "PrincipalPolicyImplTest", "superclass": "extends AbstractPrincipalBasedTest", "interfaces": "", "fields": [{"original_string": "private static final String TEST_OAK_PATH = \"/oak:test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_OAK_PATH = \"/oak:test\"", "var_name": "TEST_OAK_PATH"}, {"original_string": "private static final String POLICY_OAK_PATH = SUPPORTED_PATH + \"/oak:testPath\";", "modifier": "private static final", "type": "String", "declarator": "POLICY_OAK_PATH = SUPPORTED_PATH + \"/oak:testPath\"", "var_name": "POLICY_OAK_PATH"}, {"original_string": "private Principal principal;", "modifier": "private", "type": "Principal", "declarator": "principal", "var_name": "principal"}, {"original_string": "private String testJcrPath;", "modifier": "private", "type": "String", "declarator": "testJcrPath", "var_name": "testJcrPath"}, {"original_string": "private String policyJcrPath;", "modifier": "private", "type": "String", "declarator": "policyJcrPath", "var_name": "policyJcrPath"}, {"original_string": "private PrincipalPolicyImpl emptyPolicy;", "modifier": "private", "type": "PrincipalPolicyImpl", "declarator": "emptyPolicy", "var_name": "emptyPolicy"}, {"original_string": "private PrincipalPolicyImpl policy;", "modifier": "private", "type": "PrincipalPolicyImpl", "declarator": "policy", "var_name": "policy"}, {"original_string": "private PrivilegeBitsProvider privilegeBitsProvider;", "modifier": "private", "type": "PrivilegeBitsProvider", "declarator": "privilegeBitsProvider", "var_name": "privilegeBitsProvider"}], "file": "oak-authorization-principalbased/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/PrincipalPolicyImplTest.java"}, "test_case": {"identifier": "testAddEntryUnknownPrivilege", "parameters": "()", "modifiers": "@Test(expected = AccessControlException.class) public", "return": "void", "body": "@Test(expected = AccessControlException.class)\n    public void testAddEntryUnknownPrivilege() throws Exception {\n        Privilege privilege = when(mock(Privilege.class).getName()).thenReturn(\"unknown\").getMock();\n        policy.addEntry(testJcrPath, new Privilege[] {privilege});\n    }", "signature": "void testAddEntryUnknownPrivilege()", "full_signature": "@Test(expected = AccessControlException.class) public void testAddEntryUnknownPrivilege()", "class_method_signature": "PrincipalPolicyImplTest.testAddEntryUnknownPrivilege()", "testcase": true, "constructor": false, "invocations": ["getMock", "thenReturn", "when", "getName", "mock", "addEntry"]}, "focal_class": {"identifier": "PrincipalPolicyImpl", "superclass": "extends AbstractAccessControlList", "interfaces": "implements PrincipalAccessControlList", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PrincipalPolicyImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PrincipalPolicyImpl.class)", "var_name": "log"}, {"original_string": "private final List<EntryImpl> entries = new ArrayList<>();", "modifier": "private final", "type": "List<EntryImpl>", "declarator": "entries = new ArrayList<>()", "var_name": "entries"}, {"original_string": "private final Principal principal;", "modifier": "private final", "type": "Principal", "declarator": "principal", "var_name": "principal"}, {"original_string": "private final RestrictionProvider restrictionProvider;", "modifier": "private final", "type": "RestrictionProvider", "declarator": "restrictionProvider", "var_name": "restrictionProvider"}, {"original_string": "private final PrivilegeManager privilegeManager;", "modifier": "private final", "type": "PrivilegeManager", "declarator": "privilegeManager", "var_name": "privilegeManager"}, {"original_string": "private final PrivilegeBitsProvider privilegeBitsProvider;", "modifier": "private final", "type": "PrivilegeBitsProvider", "declarator": "privilegeBitsProvider", "var_name": "privilegeBitsProvider"}], "methods": [{"identifier": "PrincipalPolicyImpl", "parameters": "(@NotNull Principal principal, @NotNull String oakPath, @NotNull MgrProvider mgrProvider)", "modifiers": "", "return": "", "signature": " PrincipalPolicyImpl(@NotNull Principal principal, @NotNull String oakPath, @NotNull MgrProvider mgrProvider)", "full_signature": "  PrincipalPolicyImpl(@NotNull Principal principal, @NotNull String oakPath, @NotNull MgrProvider mgrProvider)", "class_method_signature": "PrincipalPolicyImpl.PrincipalPolicyImpl(@NotNull Principal principal, @NotNull String oakPath, @NotNull MgrProvider mgrProvider)", "testcase": false, "constructor": true}, {"identifier": "addEntry", "parameters": "(@NotNull Tree entryTree)", "modifiers": "", "return": "boolean", "signature": "boolean addEntry(@NotNull Tree entryTree)", "full_signature": " boolean addEntry(@NotNull Tree entryTree)", "class_method_signature": "PrincipalPolicyImpl.addEntry(@NotNull Tree entryTree)", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "List<EntryImpl>", "signature": "List<EntryImpl> getEntries()", "full_signature": "@Override @NotNull public List<EntryImpl> getEntries()", "class_method_signature": "PrincipalPolicyImpl.getEntries()", "testcase": false, "constructor": false}, {"identifier": "getRestrictionProvider", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "RestrictionProvider", "signature": "RestrictionProvider getRestrictionProvider()", "full_signature": "@Override @NotNull public RestrictionProvider getRestrictionProvider()", "class_method_signature": "PrincipalPolicyImpl.getRestrictionProvider()", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "()", "modifiers": "@Override @NotNull public", "return": "Principal", "signature": "Principal getPrincipal()", "full_signature": "@Override @NotNull public Principal getPrincipal()", "class_method_signature": "PrincipalPolicyImpl.getPrincipal()", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(@Nullable String effectivePath, @NotNull Privilege[] privileges)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addEntry(@Nullable String effectivePath, @NotNull Privilege[] privileges)", "full_signature": "@Override public boolean addEntry(@Nullable String effectivePath, @NotNull Privilege[] privileges)", "class_method_signature": "PrincipalPolicyImpl.addEntry(@Nullable String effectivePath, @NotNull Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(@Nullable String effectivePath, @NotNull Privilege[] privileges, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addEntry(@Nullable String effectivePath, @NotNull Privilege[] privileges, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "full_signature": "@Override public boolean addEntry(@Nullable String effectivePath, @NotNull Privilege[] privileges, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "class_method_signature": "PrincipalPolicyImpl.addEntry(@Nullable String effectivePath, @NotNull Privilege[] privileges, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions, @Nullable Map<String, Value[]> mvRestrictions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions, @Nullable Map<String, Value[]> mvRestrictions)", "full_signature": "@Override public boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions, @Nullable Map<String, Value[]> mvRestrictions)", "class_method_signature": "PrincipalPolicyImpl.addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions, @Nullable Map<String, Value[]> mvRestrictions)", "testcase": false, "constructor": false}, {"identifier": "orderBefore", "parameters": "(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "modifiers": "@Override public", "return": "void", "signature": "void orderBefore(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "full_signature": "@Override public void orderBefore(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "class_method_signature": "PrincipalPolicyImpl.orderBefore(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "testcase": false, "constructor": false}, {"identifier": "removeAccessControlEntry", "parameters": "(AccessControlEntry ace)", "modifiers": "@Override public", "return": "void", "signature": "void removeAccessControlEntry(AccessControlEntry ace)", "full_signature": "@Override public void removeAccessControlEntry(AccessControlEntry ace)", "class_method_signature": "PrincipalPolicyImpl.removeAccessControlEntry(AccessControlEntry ace)", "testcase": false, "constructor": false}, {"identifier": "getOakName", "parameters": "(@NotNull String jcrName)", "modifiers": "@NotNull private", "return": "String", "signature": "String getOakName(@NotNull String jcrName)", "full_signature": "@NotNull private String getOakName(@NotNull String jcrName)", "class_method_signature": "PrincipalPolicyImpl.getOakName(@NotNull String jcrName)", "testcase": false, "constructor": false}, {"identifier": "validateRestrictions", "parameters": "(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull  Map<String, Value[]> mvRestrictions)", "modifiers": "@NotNull private", "return": "Set<Restriction>", "signature": "Set<Restriction> validateRestrictions(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull  Map<String, Value[]> mvRestrictions)", "full_signature": "@NotNull private Set<Restriction> validateRestrictions(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull  Map<String, Value[]> mvRestrictions)", "class_method_signature": "PrincipalPolicyImpl.validateRestrictions(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull  Map<String, Value[]> mvRestrictions)", "testcase": false, "constructor": false}, {"identifier": "computeRestrictions", "parameters": "(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "modifiers": "@NotNull private", "return": "Set<Restriction>", "signature": "Set<Restriction> computeRestrictions(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "full_signature": "@NotNull private Set<Restriction> computeRestrictions(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "class_method_signature": "PrincipalPolicyImpl.computeRestrictions(@Nullable String effectiveOakPath, @NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "testcase": false, "constructor": false}, {"identifier": "extractPathFromRestrictions", "parameters": "(@Nullable Map<String, Value> restrictions, @NotNull String jcrName)", "modifiers": "@Nullable private", "return": "String", "signature": "String extractPathFromRestrictions(@Nullable Map<String, Value> restrictions, @NotNull String jcrName)", "full_signature": "@Nullable private String extractPathFromRestrictions(@Nullable Map<String, Value> restrictions, @NotNull String jcrName)", "class_method_signature": "PrincipalPolicyImpl.extractPathFromRestrictions(@Nullable Map<String, Value> restrictions, @NotNull String jcrName)", "testcase": false, "constructor": false}, {"identifier": "validatePrivileges", "parameters": "(@NotNull Privilege[] privileges)", "modifiers": "@NotNull private", "return": "PrivilegeBits", "signature": "PrivilegeBits validatePrivileges(@NotNull Privilege[] privileges)", "full_signature": "@NotNull private PrivilegeBits validatePrivileges(@NotNull Privilege[] privileges)", "class_method_signature": "PrincipalPolicyImpl.validatePrivileges(@NotNull Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "validateEntry", "parameters": "(@Nullable AccessControlEntry entry)", "modifiers": "@NotNull private static", "return": "EntryImpl", "signature": "EntryImpl validateEntry(@Nullable AccessControlEntry entry)", "full_signature": "@NotNull private static EntryImpl validateEntry(@Nullable AccessControlEntry entry)", "class_method_signature": "PrincipalPolicyImpl.validateEntry(@Nullable AccessControlEntry entry)", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(@NotNull EntryImpl entry)", "modifiers": "private", "return": "boolean", "signature": "boolean addEntry(@NotNull EntryImpl entry)", "full_signature": "private boolean addEntry(@NotNull EntryImpl entry)", "class_method_signature": "PrincipalPolicyImpl.addEntry(@NotNull EntryImpl entry)", "testcase": false, "constructor": false}], "file": "oak-authorization-principalbased/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/PrincipalPolicyImpl.java"}, "focal_method": {"identifier": "addEntry", "parameters": "(@NotNull Tree entryTree)", "modifiers": "", "return": "boolean", "body": "boolean addEntry(@NotNull Tree entryTree) throws AccessControlException {\n        String oakPath = Strings.emptyToNull(TreeUtil.getString(entryTree, REP_EFFECTIVE_PATH));\n        PrivilegeBits bits = privilegeBitsProvider.getBits(entryTree.getProperty(Constants.REP_PRIVILEGES).getValue(Type.NAMES));\n        Set<Restriction> restrictions = restrictionProvider.readRestrictions(oakPath, entryTree);\n        return addEntry(new EntryImpl(oakPath, bits, restrictions));\n    }", "signature": "boolean addEntry(@NotNull Tree entryTree)", "full_signature": " boolean addEntry(@NotNull Tree entryTree)", "class_method_signature": "PrincipalPolicyImpl.addEntry(@NotNull Tree entryTree)", "testcase": false, "constructor": false, "invocations": ["emptyToNull", "getString", "getBits", "getValue", "getProperty", "readRestrictions", "addEntry"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}