{"test_class": {"identifier": "TokenAuthenticationTest", "superclass": "extends AbstractTokenTest", "interfaces": "", "fields": [{"original_string": "private TokenAuthentication authentication;", "modifier": "private", "type": "TokenAuthentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "private TokenProviderImpl tokenProvider;", "modifier": "private", "type": "TokenProviderImpl", "declarator": "tokenProvider", "var_name": "tokenProvider"}, {"original_string": "private String userId;", "modifier": "private", "type": "String", "declarator": "userId", "var_name": "userId"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/token/TokenAuthenticationTest.java"}, "test_case": {"identifier": "testGetUserPrincipalBeforeLogin", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testGetUserPrincipalBeforeLogin() {\n        authentication.getUserPrincipal();\n    }", "signature": "void testGetUserPrincipalBeforeLogin()", "full_signature": "@Test(expected = IllegalStateException.class) public void testGetUserPrincipalBeforeLogin()", "class_method_signature": "TokenAuthenticationTest.testGetUserPrincipalBeforeLogin()", "testcase": true, "constructor": false, "invocations": ["getUserPrincipal"]}, "focal_class": {"identifier": "TokenAuthentication", "superclass": "", "interfaces": "implements Authentication", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TokenAuthentication.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TokenAuthentication.class)", "var_name": "log"}, {"original_string": "private final TokenProvider tokenProvider;", "modifier": "private final", "type": "TokenProvider", "declarator": "tokenProvider", "var_name": "tokenProvider"}, {"original_string": "private TokenInfo tokenInfo;", "modifier": "private", "type": "TokenInfo", "declarator": "tokenInfo", "var_name": "tokenInfo"}], "methods": [{"identifier": "TokenAuthentication", "parameters": "(@NotNull TokenProvider tokenProvider)", "modifiers": "", "return": "", "signature": " TokenAuthentication(@NotNull TokenProvider tokenProvider)", "full_signature": "  TokenAuthentication(@NotNull TokenProvider tokenProvider)", "class_method_signature": "TokenAuthentication.TokenAuthentication(@NotNull TokenProvider tokenProvider)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(@Nullable Credentials credentials)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean authenticate(@Nullable Credentials credentials)", "full_signature": "@Override public boolean authenticate(@Nullable Credentials credentials)", "class_method_signature": "TokenAuthentication.authenticate(@Nullable Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "getUserId", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getUserId()", "full_signature": "@Nullable @Override public String getUserId()", "class_method_signature": "TokenAuthentication.getUserId()", "testcase": false, "constructor": false}, {"identifier": "getUserPrincipal", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "Principal", "signature": "Principal getUserPrincipal()", "full_signature": "@Nullable @Override public Principal getUserPrincipal()", "class_method_signature": "TokenAuthentication.getUserPrincipal()", "testcase": false, "constructor": false}, {"identifier": "getTokenInfo", "parameters": "()", "modifiers": "@NotNull", "return": "TokenInfo", "signature": "TokenInfo getTokenInfo()", "full_signature": "@NotNull TokenInfo getTokenInfo()", "class_method_signature": "TokenAuthentication.getTokenInfo()", "testcase": false, "constructor": false}, {"identifier": "validateCredentials", "parameters": "(@NotNull TokenCredentials tokenCredentials)", "modifiers": "private", "return": "boolean", "signature": "boolean validateCredentials(@NotNull TokenCredentials tokenCredentials)", "full_signature": "private boolean validateCredentials(@NotNull TokenCredentials tokenCredentials)", "class_method_signature": "TokenAuthentication.validateCredentials(@NotNull TokenCredentials tokenCredentials)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenAuthentication.java"}, "focal_method": {"identifier": "getUserPrincipal", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "Principal", "body": "@Nullable\n    @Override\n    public Principal getUserPrincipal() {\n        if (tokenInfo == null) {\n            throw new IllegalStateException(\"Token info can only be retrieved after successful authentication.\");\n        }\n        if (tokenInfo instanceof TokenProviderImpl.TokenInfoImpl) {\n            return ((TokenProviderImpl.TokenInfoImpl) tokenInfo).getPrincipal();\n        } else {\n            return null;\n        }\n    }", "signature": "Principal getUserPrincipal()", "full_signature": "@Nullable @Override public Principal getUserPrincipal()", "class_method_signature": "TokenAuthentication.getUserPrincipal()", "testcase": false, "constructor": false, "invocations": ["getPrincipal"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}