{"test_class": {"identifier": "PermissionEntryProviderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String GROUP_LONG_MAX = \"groupLongMax\";", "modifier": "private final", "type": "String", "declarator": "GROUP_LONG_MAX = \"groupLongMax\"", "var_name": "GROUP_LONG_MAX"}, {"original_string": "private final String GROUP_LONG_MAX_MINUS_10 = \"groupLongMaxMinus10\";", "modifier": "private final", "type": "String", "declarator": "GROUP_LONG_MAX_MINUS_10 = \"groupLongMaxMinus10\"", "var_name": "GROUP_LONG_MAX_MINUS_10"}, {"original_string": "private final String GROUP_50 = \"group50\";", "modifier": "private final", "type": "String", "declarator": "GROUP_50 = \"group50\"", "var_name": "GROUP_50"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntryProviderImplTest.java"}, "test_case": {"identifier": "testInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInit() throws Exception {\n        MockPermissionStore store = new MockPermissionStore();\n        Set<String> principalNames = Sets.newHashSet(\"noEntries\", \"noEntries2\", \"noEntries3\");\n\n        PermissionEntryProviderImpl provider = new PermissionEntryProviderImpl(store, principalNames, ConfigurationParameters.EMPTY);\n        assertFalse(getBooleanField(provider, \"initialized\"));\n\n        provider.getEntryIterator(EntryPredicate.create());\n        assertTrue(getBooleanField(provider, \"initialized\"));\n\n        provider.flush();\n        assertFalse(getBooleanField(provider, \"initialized\"));\n\n        provider.getEntries(mock(Tree.class));\n        assertTrue(getBooleanField(provider, \"initialized\"));\n    }", "signature": "void testInit()", "full_signature": "@Test public void testInit()", "class_method_signature": "PermissionEntryProviderImplTest.testInit()", "testcase": true, "constructor": false, "invocations": ["newHashSet", "assertFalse", "getBooleanField", "getEntryIterator", "create", "assertTrue", "getBooleanField", "flush", "assertFalse", "getBooleanField", "getEntries", "mock", "assertTrue", "getBooleanField"]}, "focal_class": {"identifier": "PermissionEntryProviderImpl", "superclass": "", "interfaces": "implements PermissionEntryProvider", "fields": [{"original_string": "private final Set<String> principalNames;", "modifier": "private final", "type": "Set<String>", "declarator": "principalNames", "var_name": "principalNames"}, {"original_string": "private final PermissionStore store;", "modifier": "private final", "type": "PermissionStore", "declarator": "store", "var_name": "store"}, {"original_string": "private final ConfigurationParameters options;", "modifier": "private final", "type": "ConfigurationParameters", "declarator": "options", "var_name": "options"}, {"original_string": "private boolean noExistingNames;", "modifier": "private", "type": "boolean", "declarator": "noExistingNames", "var_name": "noExistingNames"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private boolean isRefreshed = false;", "modifier": "private", "type": "boolean", "declarator": "isRefreshed = false", "var_name": "isRefreshed"}, {"original_string": "private PermissionCache permissionCache;", "modifier": "private", "type": "PermissionCache", "declarator": "permissionCache", "var_name": "permissionCache"}], "methods": [{"identifier": "PermissionEntryProviderImpl", "parameters": "(@NotNull PermissionStore store, @NotNull Set<String> principalNames, @NotNull ConfigurationParameters options)", "modifiers": "", "return": "", "signature": " PermissionEntryProviderImpl(@NotNull PermissionStore store, @NotNull Set<String> principalNames, @NotNull ConfigurationParameters options)", "full_signature": "  PermissionEntryProviderImpl(@NotNull PermissionStore store, @NotNull Set<String> principalNames, @NotNull ConfigurationParameters options)", "class_method_signature": "PermissionEntryProviderImpl.PermissionEntryProviderImpl(@NotNull PermissionStore store, @NotNull Set<String> principalNames, @NotNull ConfigurationParameters options)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "PermissionEntryProviderImpl.init()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "PermissionEntryProviderImpl.flush()", "testcase": false, "constructor": false}, {"identifier": "getEntryIterator", "parameters": "(@NotNull EntryPredicate predicate)", "modifiers": "@Override @NotNull public", "return": "Iterator<PermissionEntry>", "signature": "Iterator<PermissionEntry> getEntryIterator(@NotNull EntryPredicate predicate)", "full_signature": "@Override @NotNull public Iterator<PermissionEntry> getEntryIterator(@NotNull EntryPredicate predicate)", "class_method_signature": "PermissionEntryProviderImpl.getEntryIterator(@NotNull EntryPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "(@NotNull Tree accessControlledTree)", "modifiers": "@Override @NotNull public", "return": "Collection<PermissionEntry>", "signature": "Collection<PermissionEntry> getEntries(@NotNull Tree accessControlledTree)", "full_signature": "@Override @NotNull public Collection<PermissionEntry> getEntries(@NotNull Tree accessControlledTree)", "class_method_signature": "PermissionEntryProviderImpl.getEntries(@NotNull Tree accessControlledTree)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntryProviderImpl.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void init() {\n        if (!initialized) {\n            PermissionCacheBuilder builder = new PermissionCacheBuilder(store);\n            noExistingNames = builder.init(principalNames, new CacheStrategyImpl(options, isRefreshed));\n            permissionCache = builder.build();\n            initialized = true;\n        }\n    }", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "PermissionEntryProviderImpl.init()", "testcase": false, "constructor": false, "invocations": ["init", "build"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}