{"test_class": {"identifier": "FilterBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/observation/filter/FilterBuilderTest.java"}, "test_case": {"identifier": "emptyAnyShortcuts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptyAnyShortcuts() {\n        FilterBuilder builder = new FilterBuilder();\n        Condition condition = builder.any();\n        assertEquals(ConstantFilter.EXCLUDE_ALL, condition.createFilter(EMPTY_NODE, EMPTY_NODE));\n    }", "signature": "void emptyAnyShortcuts()", "full_signature": "@Test public void emptyAnyShortcuts()", "class_method_signature": "FilterBuilderTest.emptyAnyShortcuts()", "testcase": true, "constructor": false, "invocations": ["any", "assertEquals", "createFilter"]}, "focal_class": {"identifier": "FilterBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ALL_EVENTS = NODE_ADDED | NODE_REMOVED | NODE_MOVED | PROPERTY_ADDED |\n            PROPERTY_REMOVED | PROPERTY_CHANGED | PERSIST;", "modifier": "private static final", "type": "int", "declarator": "ALL_EVENTS = NODE_ADDED | NODE_REMOVED | NODE_MOVED | PROPERTY_ADDED |\n            PROPERTY_REMOVED | PROPERTY_CHANGED | PERSIST", "var_name": "ALL_EVENTS"}, {"original_string": "private boolean includeSessionLocal;", "modifier": "private", "type": "boolean", "declarator": "includeSessionLocal", "var_name": "includeSessionLocal"}, {"original_string": "private boolean includeClusterExternal;", "modifier": "private", "type": "boolean", "declarator": "includeClusterExternal", "var_name": "includeClusterExternal"}, {"original_string": "private boolean includeClusterLocal = true;", "modifier": "private", "type": "boolean", "declarator": "includeClusterLocal = true", "var_name": "includeClusterLocal"}, {"original_string": "private final List<String> subTrees = newArrayList();", "modifier": "private final", "type": "List<String>", "declarator": "subTrees = newArrayList()", "var_name": "subTrees"}, {"original_string": "private final Set<String> pathsForMBean = newHashSet();", "modifier": "private final", "type": "Set<String>", "declarator": "pathsForMBean = newHashSet()", "var_name": "pathsForMBean"}, {"original_string": "private Condition condition = includeAll();", "modifier": "private", "type": "Condition", "declarator": "condition = includeAll()", "var_name": "condition"}, {"original_string": "private ChangeSetFilter changeSetFilter = new ChangeSetFilter() {\n        \n        @Override\n        public boolean excludes(ChangeSet changeSet) {\n            return false;\n        }\n    };", "modifier": "private", "type": "ChangeSetFilter", "declarator": "changeSetFilter = new ChangeSetFilter() {\n        \n        @Override\n        public boolean excludes(ChangeSet changeSet) {\n            return false;\n        }\n    }", "var_name": "changeSetFilter"}, {"original_string": "private EventAggregator aggregator;", "modifier": "private", "type": "EventAggregator", "declarator": "aggregator", "var_name": "aggregator"}], "methods": [{"identifier": "setChangeSetFilter", "parameters": "(@NotNull ChangeSetFilter changeSetFilter)", "modifiers": "@NotNull public", "return": "FilterBuilder", "signature": "FilterBuilder setChangeSetFilter(@NotNull ChangeSetFilter changeSetFilter)", "full_signature": "@NotNull public FilterBuilder setChangeSetFilter(@NotNull ChangeSetFilter changeSetFilter)", "class_method_signature": "FilterBuilder.setChangeSetFilter(@NotNull ChangeSetFilter changeSetFilter)", "testcase": false, "constructor": false}, {"identifier": "addSubTree", "parameters": "(@NotNull String absPath)", "modifiers": "@NotNull public", "return": "FilterBuilder", "signature": "FilterBuilder addSubTree(@NotNull String absPath)", "full_signature": "@NotNull public FilterBuilder addSubTree(@NotNull String absPath)", "class_method_signature": "FilterBuilder.addSubTree(@NotNull String absPath)", "testcase": false, "constructor": false}, {"identifier": "addPathsForMBean", "parameters": "(@NotNull Set<String> paths)", "modifiers": "public", "return": "FilterBuilder", "signature": "FilterBuilder addPathsForMBean(@NotNull Set<String> paths)", "full_signature": "public FilterBuilder addPathsForMBean(@NotNull Set<String> paths)", "class_method_signature": "FilterBuilder.addPathsForMBean(@NotNull Set<String> paths)", "testcase": false, "constructor": false}, {"identifier": "getSubTrees", "parameters": "()", "modifiers": "@NotNull private", "return": "Iterable<String>", "signature": "Iterable<String> getSubTrees()", "full_signature": "@NotNull private Iterable<String> getSubTrees()", "class_method_signature": "FilterBuilder.getSubTrees()", "testcase": false, "constructor": false}, {"identifier": "aggregator", "parameters": "(EventAggregator aggregator)", "modifiers": "public", "return": "FilterBuilder", "signature": "FilterBuilder aggregator(EventAggregator aggregator)", "full_signature": "public FilterBuilder aggregator(EventAggregator aggregator)", "class_method_signature": "FilterBuilder.aggregator(EventAggregator aggregator)", "testcase": false, "constructor": false}, {"identifier": "includeSessionLocal", "parameters": "(boolean include)", "modifiers": "@NotNull public", "return": "FilterBuilder", "signature": "FilterBuilder includeSessionLocal(boolean include)", "full_signature": "@NotNull public FilterBuilder includeSessionLocal(boolean include)", "class_method_signature": "FilterBuilder.includeSessionLocal(boolean include)", "testcase": false, "constructor": false}, {"identifier": "includeClusterExternal", "parameters": "(boolean include)", "modifiers": "@NotNull public", "return": "FilterBuilder", "signature": "FilterBuilder includeClusterExternal(boolean include)", "full_signature": "@NotNull public FilterBuilder includeClusterExternal(boolean include)", "class_method_signature": "FilterBuilder.includeClusterExternal(boolean include)", "testcase": false, "constructor": false}, {"identifier": "includeClusterLocal", "parameters": "(boolean include)", "modifiers": "@NotNull public", "return": "FilterBuilder", "signature": "FilterBuilder includeClusterLocal(boolean include)", "full_signature": "@NotNull public FilterBuilder includeClusterLocal(boolean include)", "class_method_signature": "FilterBuilder.includeClusterLocal(boolean include)", "testcase": false, "constructor": false}, {"identifier": "condition", "parameters": "(@NotNull Condition condition)", "modifiers": "@NotNull public", "return": "FilterBuilder", "signature": "FilterBuilder condition(@NotNull Condition condition)", "full_signature": "@NotNull public FilterBuilder condition(@NotNull Condition condition)", "class_method_signature": "FilterBuilder.condition(@NotNull Condition condition)", "testcase": false, "constructor": false}, {"identifier": "includeAll", "parameters": "()", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition includeAll()", "full_signature": "@NotNull public Condition includeAll()", "class_method_signature": "FilterBuilder.includeAll()", "testcase": false, "constructor": false}, {"identifier": "excludeAll", "parameters": "()", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition excludeAll()", "full_signature": "@NotNull public Condition excludeAll()", "class_method_signature": "FilterBuilder.excludeAll()", "testcase": false, "constructor": false}, {"identifier": "accessControl", "parameters": "(@NotNull PermissionProviderFactory permissionProviderFactory)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition accessControl(@NotNull PermissionProviderFactory permissionProviderFactory)", "full_signature": "@NotNull public Condition accessControl(@NotNull PermissionProviderFactory permissionProviderFactory)", "class_method_signature": "FilterBuilder.accessControl(@NotNull PermissionProviderFactory permissionProviderFactory)", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(@NotNull String pathPattern)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition path(@NotNull String pathPattern)", "full_signature": "@NotNull public Condition path(@NotNull String pathPattern)", "class_method_signature": "FilterBuilder.path(@NotNull String pathPattern)", "testcase": false, "constructor": false}, {"identifier": "eventType", "parameters": "(int eventTypes)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition eventType(int eventTypes)", "full_signature": "@NotNull public Condition eventType(int eventTypes)", "class_method_signature": "FilterBuilder.eventType(int eventTypes)", "testcase": false, "constructor": false}, {"identifier": "nodeType", "parameters": "(@NotNull Selector selector, @Nullable String[] ntNames)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition nodeType(@NotNull Selector selector, @Nullable String[] ntNames)", "full_signature": "@NotNull public Condition nodeType(@NotNull Selector selector, @Nullable String[] ntNames)", "class_method_signature": "FilterBuilder.nodeType(@NotNull Selector selector, @Nullable String[] ntNames)", "testcase": false, "constructor": false}, {"identifier": "uuid", "parameters": "(@NotNull Selector selector, @Nullable String[] uuids)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition uuid(@NotNull Selector selector, @Nullable String[] uuids)", "full_signature": "@NotNull public Condition uuid(@NotNull Selector selector, @Nullable String[] uuids)", "class_method_signature": "FilterBuilder.uuid(@NotNull Selector selector, @Nullable String[] uuids)", "testcase": false, "constructor": false}, {"identifier": "property", "parameters": "(@NotNull Selector selector, @NotNull String name,\n            @NotNull Predicate<PropertyState> predicate)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition property(@NotNull Selector selector, @NotNull String name,\n            @NotNull Predicate<PropertyState> predicate)", "full_signature": "@NotNull public Condition property(@NotNull Selector selector, @NotNull String name,\n            @NotNull Predicate<PropertyState> predicate)", "class_method_signature": "FilterBuilder.property(@NotNull Selector selector, @NotNull String name,\n            @NotNull Predicate<PropertyState> predicate)", "testcase": false, "constructor": false}, {"identifier": "universal", "parameters": "(@NotNull Selector selector, @NotNull Predicate<NodeState> predicate)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition universal(@NotNull Selector selector, @NotNull Predicate<NodeState> predicate)", "full_signature": "@NotNull public Condition universal(@NotNull Selector selector, @NotNull Predicate<NodeState> predicate)", "class_method_signature": "FilterBuilder.universal(@NotNull Selector selector, @NotNull Predicate<NodeState> predicate)", "testcase": false, "constructor": false}, {"identifier": "addSubtree", "parameters": "()", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition addSubtree()", "full_signature": "@NotNull public Condition addSubtree()", "class_method_signature": "FilterBuilder.addSubtree()", "testcase": false, "constructor": false}, {"identifier": "deleteSubtree", "parameters": "()", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition deleteSubtree()", "full_signature": "@NotNull public Condition deleteSubtree()", "class_method_signature": "FilterBuilder.deleteSubtree()", "testcase": false, "constructor": false}, {"identifier": "moveSubtree", "parameters": "()", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition moveSubtree()", "full_signature": "@NotNull public Condition moveSubtree()", "class_method_signature": "FilterBuilder.moveSubtree()", "testcase": false, "constructor": false}, {"identifier": "any", "parameters": "(@NotNull Condition... conditions)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition any(@NotNull Condition... conditions)", "full_signature": "@NotNull public Condition any(@NotNull Condition... conditions)", "class_method_signature": "FilterBuilder.any(@NotNull Condition... conditions)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "(@NotNull Condition... conditions)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition all(@NotNull Condition... conditions)", "full_signature": "@NotNull public Condition all(@NotNull Condition... conditions)", "class_method_signature": "FilterBuilder.all(@NotNull Condition... conditions)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "(@NotNull List<Condition> conditions)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition all(@NotNull List<Condition> conditions)", "full_signature": "@NotNull public Condition all(@NotNull List<Condition> conditions)", "class_method_signature": "FilterBuilder.all(@NotNull List<Condition> conditions)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(@NotNull Condition condition)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition not(@NotNull Condition condition)", "full_signature": "@NotNull public Condition not(@NotNull Condition condition)", "class_method_signature": "FilterBuilder.not(@NotNull Condition condition)", "testcase": false, "constructor": false}, {"identifier": "any", "parameters": "(@NotNull Iterable<Condition> conditions)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition any(@NotNull Iterable<Condition> conditions)", "full_signature": "@NotNull public Condition any(@NotNull Iterable<Condition> conditions)", "class_method_signature": "FilterBuilder.any(@NotNull Iterable<Condition> conditions)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "(@NotNull Iterable<Condition> conditions)", "modifiers": "@NotNull public", "return": "Condition", "signature": "Condition all(@NotNull Iterable<Condition> conditions)", "full_signature": "@NotNull public Condition all(@NotNull Iterable<Condition> conditions)", "class_method_signature": "FilterBuilder.all(@NotNull Iterable<Condition> conditions)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "@NotNull public", "return": "FilterProvider", "signature": "FilterProvider build()", "full_signature": "@NotNull public FilterProvider build()", "class_method_signature": "FilterBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "getConfigMBean", "parameters": "()", "modifiers": "@NotNull private", "return": "FilterConfigMBean", "signature": "FilterConfigMBean getConfigMBean()", "full_signature": "@NotNull private FilterConfigMBean getConfigMBean()", "class_method_signature": "FilterBuilder.getConfigMBean()", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/observation/filter/FilterBuilder.java"}, "focal_method": {"identifier": "any", "parameters": "(@NotNull Condition... conditions)", "modifiers": "@NotNull public", "return": "Condition", "body": "@NotNull\n    public Condition any(@NotNull Condition... conditions) {\n        return new AnyCondition(newArrayList(checkNotNull(conditions)));\n    }", "signature": "Condition any(@NotNull Condition... conditions)", "full_signature": "@NotNull public Condition any(@NotNull Condition... conditions)", "class_method_signature": "FilterBuilder.any(@NotNull Condition... conditions)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "checkNotNull"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}