{"test_class": {"identifier": "RestrictionProviderImplTest", "superclass": "extends AbstractSecurityTest", "interfaces": "implements AccessControlConstants", "fields": [{"original_string": "private RestrictionProviderImpl provider;", "modifier": "private", "type": "RestrictionProviderImpl", "declarator": "provider", "var_name": "provider"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/restriction/RestrictionProviderImplTest.java"}, "test_case": {"identifier": "testGetPatternFromRestrictionsNullPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPatternFromRestrictionsNullPath() {\n        assertSame(RestrictionPattern.EMPTY, provider.getPattern(null, ImmutableSet.of(mock(Restriction.class))));\n    }", "signature": "void testGetPatternFromRestrictionsNullPath()", "full_signature": "@Test public void testGetPatternFromRestrictionsNullPath()", "class_method_signature": "RestrictionProviderImplTest.testGetPatternFromRestrictionsNullPath()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getPattern", "of", "mock"]}, "focal_class": {"identifier": "RestrictionProviderImpl", "superclass": "extends AbstractRestrictionProvider", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(RestrictionProviderImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RestrictionProviderImpl.class)", "var_name": "log"}, {"original_string": "private static final int NUMBER_OF_DEFINITIONS = 3;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_DEFINITIONS = 3", "var_name": "NUMBER_OF_DEFINITIONS"}], "methods": [{"identifier": "RestrictionProviderImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " RestrictionProviderImpl()", "full_signature": "public  RestrictionProviderImpl()", "class_method_signature": "RestrictionProviderImpl.RestrictionProviderImpl()", "testcase": false, "constructor": true}, {"identifier": "supportedRestrictions", "parameters": "()", "modifiers": "private static", "return": "Map<String, RestrictionDefinition>", "signature": "Map<String, RestrictionDefinition> supportedRestrictions()", "full_signature": "private static Map<String, RestrictionDefinition> supportedRestrictions()", "class_method_signature": "RestrictionProviderImpl.supportedRestrictions()", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(String oakPath, @NotNull Tree tree)", "modifiers": "@NotNull @Override public", "return": "RestrictionPattern", "signature": "RestrictionPattern getPattern(String oakPath, @NotNull Tree tree)", "full_signature": "@NotNull @Override public RestrictionPattern getPattern(String oakPath, @NotNull Tree tree)", "class_method_signature": "RestrictionProviderImpl.getPattern(String oakPath, @NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "modifiers": "@NotNull @Override public", "return": "RestrictionPattern", "signature": "RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "full_signature": "@NotNull @Override public RestrictionPattern getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "class_method_signature": "RestrictionProviderImpl.getPattern(@Nullable String oakPath, @NotNull Set<Restriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "validateRestrictions", "parameters": "(String oakPath, @NotNull Tree aceTree)", "modifiers": "@Override public", "return": "void", "signature": "void validateRestrictions(String oakPath, @NotNull Tree aceTree)", "full_signature": "@Override public void validateRestrictions(String oakPath, @NotNull Tree aceTree)", "class_method_signature": "RestrictionProviderImpl.validateRestrictions(String oakPath, @NotNull Tree aceTree)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/restriction/RestrictionProviderImpl.java"}, "focal_method": {"identifier": "getPattern", "parameters": "(String oakPath, @NotNull Tree tree)", "modifiers": "@NotNull @Override public", "return": "RestrictionPattern", "body": "@NotNull\n    @Override\n    public RestrictionPattern getPattern(String oakPath, @NotNull Tree tree) {\n        if (oakPath == null) {\n            return RestrictionPattern.EMPTY;\n        } else {\n            List<RestrictionPattern> patterns = new ArrayList<>(NUMBER_OF_DEFINITIONS);\n            PropertyState glob = tree.getProperty(REP_GLOB);\n            if (glob != null) {\n                patterns.add(GlobPattern.create(oakPath, glob.getValue(Type.STRING)));\n            }\n            PropertyState ntNames = tree.getProperty(REP_NT_NAMES);\n            if (ntNames != null) {\n                patterns.add(new NodeTypePattern(ntNames.getValue(Type.NAMES)));\n            }\n            PropertyState prefixes = tree.getProperty(REP_PREFIXES);\n            if (prefixes != null) {\n                patterns.add(new PrefixPattern(prefixes.getValue(Type.STRINGS)));\n            }\n            PropertyState itemNames = tree.getProperty(REP_ITEM_NAMES);\n            if (itemNames != null) {\n                patterns.add(new ItemNamePattern(itemNames.getValue(Type.NAMES)));\n            }\n\n            return CompositePattern.create(patterns);\n        }\n    }", "signature": "RestrictionPattern getPattern(String oakPath, @NotNull Tree tree)", "full_signature": "@NotNull @Override public RestrictionPattern getPattern(String oakPath, @NotNull Tree tree)", "class_method_signature": "RestrictionProviderImpl.getPattern(String oakPath, @NotNull Tree tree)", "testcase": false, "constructor": false, "invocations": ["getProperty", "add", "create", "getValue", "getProperty", "add", "getValue", "getProperty", "add", "getValue", "getProperty", "add", "getValue", "create"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}