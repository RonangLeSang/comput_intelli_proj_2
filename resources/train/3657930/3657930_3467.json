{"test_class": {"identifier": "SchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Scheduler scheduler = new Scheduler(\"test-scheduler\");", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler = new Scheduler(\"test-scheduler\")", "var_name": "scheduler"}], "file": "oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/file/SchedulerTest.java"}, "test_case": {"identifier": "execute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void execute() throws Exception {\n        TestTask task = new TestTask(1);\n        scheduler.execute(\"execute\", task);\n\n        assertTrue(task.await());\n        assertEquals(\"execute\", task.getThreadName());\n    }", "signature": "void execute()", "full_signature": "@Test public void execute()", "class_method_signature": "SchedulerTest.execute()", "testcase": true, "constructor": false, "invocations": ["execute", "assertTrue", "await", "assertEquals", "getThreadName"]}, "focal_class": {"identifier": "Scheduler", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static int schedulerNumber = 0;", "modifier": "private static", "type": "int", "declarator": "schedulerNumber = 0", "var_name": "schedulerNumber"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Scheduler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Scheduler.class)", "var_name": "LOG"}, {"original_string": "@NotNull\n    private final AtomicLong executionCounter = new AtomicLong();", "modifier": "@NotNull\n    private final", "type": "AtomicLong", "declarator": "executionCounter = new AtomicLong()", "var_name": "executionCounter"}, {"original_string": "@NotNull\n    private final String name;", "modifier": "@NotNull\n    private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@NotNull\n    private final ScheduledExecutorService executor;", "modifier": "@NotNull\n    private final", "type": "ScheduledExecutorService", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "Scheduler", "parameters": "(@Nullable String name)", "modifiers": "public", "return": "", "signature": " Scheduler(@Nullable String name)", "full_signature": "public  Scheduler(@Nullable String name)", "class_method_signature": "Scheduler.Scheduler(@Nullable String name)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(@NotNull String name, @NotNull Runnable task)", "modifiers": "public", "return": "void", "signature": "void execute(@NotNull String name, @NotNull Runnable task)", "full_signature": "public void execute(@NotNull String name, @NotNull Runnable task)", "class_method_signature": "Scheduler.execute(@NotNull String name, @NotNull Runnable task)", "testcase": false, "constructor": false}, {"identifier": "scheduleOnce", "parameters": "(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "modifiers": "public", "return": "void", "signature": "void scheduleOnce(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "full_signature": "public void scheduleOnce(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "class_method_signature": "Scheduler.scheduleOnce(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "testcase": false, "constructor": false}, {"identifier": "scheduleAtFixedRate", "parameters": "(\n            @NotNull String name,\n            long period,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "modifiers": "public", "return": "void", "signature": "void scheduleAtFixedRate(\n            @NotNull String name,\n            long period,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "full_signature": "public void scheduleAtFixedRate(\n            @NotNull String name,\n            long period,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "class_method_signature": "Scheduler.scheduleAtFixedRate(\n            @NotNull String name,\n            long period,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "testcase": false, "constructor": false}, {"identifier": "scheduleWithFixedDelay", "parameters": "(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "modifiers": "public", "return": "void", "signature": "void scheduleWithFixedDelay(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "full_signature": "public void scheduleWithFixedDelay(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "class_method_signature": "Scheduler.scheduleWithFixedDelay(\n            @NotNull String name,\n            long delay,\n            @NotNull TimeUnit unit,\n            @NotNull Runnable task)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "Scheduler.close()", "testcase": false, "constructor": false}], "file": "oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/Scheduler.java"}, "focal_method": {"identifier": "execute", "parameters": "(@NotNull String name, @NotNull Runnable task)", "modifiers": "public", "return": "void", "body": "public void execute(@NotNull String name, @NotNull Runnable task) {\n        executor.execute(new SafeRunnable(name, task));\n    }", "signature": "void execute(@NotNull String name, @NotNull Runnable task)", "full_signature": "public void execute(@NotNull String name, @NotNull Runnable task)", "class_method_signature": "Scheduler.execute(@NotNull String name, @NotNull Runnable task)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}