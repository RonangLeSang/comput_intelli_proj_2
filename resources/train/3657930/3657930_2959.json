{"test_class": {"identifier": "CompositeConfigurationTest", "superclass": "extends AbstractCompositeConfigurationTest", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"test\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"test\"", "var_name": "NAME"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/CompositeConfigurationTest.java"}, "test_case": {"identifier": "testGetConflictHandlers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetConflictHandlers() {\n        assertTrue(compositeConfiguration.getConflictHandlers().isEmpty());\n\n        addConfiguration(new SecurityConfiguration.Default());\n        assertTrue(compositeConfiguration.getConflictHandlers().isEmpty());\n\n        SecurityConfiguration withConflictHandler = new SecurityConfiguration.Default() {\n            @NotNull\n            @Override\n            public List<ThreeWayConflictHandler> getConflictHandlers() {\n                return ImmutableList.of(Mockito.mock(ThreeWayConflictHandler.class));\n            }\n        };\n        addConfiguration(withConflictHandler);\n\n        assertEquals(1, compositeConfiguration.getConflictHandlers().size());\n    }", "signature": "void testGetConflictHandlers()", "full_signature": "@Test public void testGetConflictHandlers()", "class_method_signature": "CompositeConfigurationTest.testGetConflictHandlers()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getConflictHandlers", "addConfiguration", "assertTrue", "isEmpty", "getConflictHandlers", "of", "mock", "addConfiguration", "assertEquals", "size", "getConflictHandlers"]}, "focal_class": {"identifier": "CompositeConfiguration", "superclass": "", "interfaces": "implements SecurityConfiguration", "fields": [{"original_string": "public static final String PARAM_RANKING = \"configurationRanking\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_RANKING = \"configurationRanking\"", "var_name": "PARAM_RANKING"}, {"original_string": "private static final int NO_RANKING = Integer.MIN_VALUE;", "modifier": "private static final", "type": "int", "declarator": "NO_RANKING = Integer.MIN_VALUE", "var_name": "NO_RANKING"}, {"original_string": "private final List<T> configurations = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "List<T>", "declarator": "configurations = new CopyOnWriteArrayList<>()", "var_name": "configurations"}, {"original_string": "private final Ranking rankings = new Ranking();", "modifier": "private final", "type": "Ranking", "declarator": "rankings = new Ranking()", "var_name": "rankings"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final CompositeContext ctx = new CompositeContext();", "modifier": "private final", "type": "CompositeContext", "declarator": "ctx = new CompositeContext()", "var_name": "ctx"}, {"original_string": "private SecurityProvider securityProvider;", "modifier": "private", "type": "SecurityProvider", "declarator": "securityProvider", "var_name": "securityProvider"}, {"original_string": "private RootProvider rootProvider;", "modifier": "private", "type": "RootProvider", "declarator": "rootProvider", "var_name": "rootProvider"}, {"original_string": "private TreeProvider treeProvider;", "modifier": "private", "type": "TreeProvider", "declarator": "treeProvider", "var_name": "treeProvider"}, {"original_string": "private T defaultConfig;", "modifier": "private", "type": "T", "declarator": "defaultConfig", "var_name": "defaultConfig"}], "methods": [{"identifier": "CompositeConfiguration", "parameters": "(@NotNull String name)", "modifiers": "public", "return": "", "signature": " CompositeConfiguration(@NotNull String name)", "full_signature": "public  CompositeConfiguration(@NotNull String name)", "class_method_signature": "CompositeConfiguration.CompositeConfiguration(@NotNull String name)", "testcase": false, "constructor": true}, {"identifier": "CompositeConfiguration", "parameters": "(@NotNull String name, @NotNull SecurityProvider securityProvider)", "modifiers": "public", "return": "", "signature": " CompositeConfiguration(@NotNull String name, @NotNull SecurityProvider securityProvider)", "full_signature": "public  CompositeConfiguration(@NotNull String name, @NotNull SecurityProvider securityProvider)", "class_method_signature": "CompositeConfiguration.CompositeConfiguration(@NotNull String name, @NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": true}, {"identifier": "getDefaultConfig", "parameters": "()", "modifiers": "@Nullable public", "return": "T", "signature": "T getDefaultConfig()", "full_signature": "@Nullable public T getDefaultConfig()", "class_method_signature": "CompositeConfiguration.getDefaultConfig()", "testcase": false, "constructor": false}, {"identifier": "setDefaultConfig", "parameters": "(@NotNull T defaultConfig)", "modifiers": "public", "return": "void", "signature": "void setDefaultConfig(@NotNull T defaultConfig)", "full_signature": "public void setDefaultConfig(@NotNull T defaultConfig)", "class_method_signature": "CompositeConfiguration.setDefaultConfig(@NotNull T defaultConfig)", "testcase": false, "constructor": false}, {"identifier": "addConfiguration", "parameters": "(@NotNull T configuration)", "modifiers": "public", "return": "void", "signature": "void addConfiguration(@NotNull T configuration)", "full_signature": "public void addConfiguration(@NotNull T configuration)", "class_method_signature": "CompositeConfiguration.addConfiguration(@NotNull T configuration)", "testcase": false, "constructor": false}, {"identifier": "addConfiguration", "parameters": "(@NotNull T configuration, @NotNull ConfigurationParameters params)", "modifiers": "public", "return": "void", "signature": "void addConfiguration(@NotNull T configuration, @NotNull ConfigurationParameters params)", "full_signature": "public void addConfiguration(@NotNull T configuration, @NotNull ConfigurationParameters params)", "class_method_signature": "CompositeConfiguration.addConfiguration(@NotNull T configuration, @NotNull ConfigurationParameters params)", "testcase": false, "constructor": false}, {"identifier": "removeConfiguration", "parameters": "(@NotNull T configuration)", "modifiers": "public", "return": "void", "signature": "void removeConfiguration(@NotNull T configuration)", "full_signature": "public void removeConfiguration(@NotNull T configuration)", "class_method_signature": "CompositeConfiguration.removeConfiguration(@NotNull T configuration)", "testcase": false, "constructor": false}, {"identifier": "getConfigurations", "parameters": "()", "modifiers": "@NotNull public", "return": "List<T>", "signature": "List<T> getConfigurations()", "full_signature": "@NotNull public List<T> getConfigurations()", "class_method_signature": "CompositeConfiguration.getConfigurations()", "testcase": false, "constructor": false}, {"identifier": "setSecurityProvider", "parameters": "(@NotNull SecurityProvider securityProvider)", "modifiers": "public", "return": "void", "signature": "void setSecurityProvider(@NotNull SecurityProvider securityProvider)", "full_signature": "public void setSecurityProvider(@NotNull SecurityProvider securityProvider)", "class_method_signature": "CompositeConfiguration.setSecurityProvider(@NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": false}, {"identifier": "getSecurityProvider", "parameters": "()", "modifiers": "@NotNull protected", "return": "SecurityProvider", "signature": "SecurityProvider getSecurityProvider()", "full_signature": "@NotNull protected SecurityProvider getSecurityProvider()", "class_method_signature": "CompositeConfiguration.getSecurityProvider()", "testcase": false, "constructor": false}, {"identifier": "setRootProvider", "parameters": "(@NotNull RootProvider rootProvider)", "modifiers": "public", "return": "void", "signature": "void setRootProvider(@NotNull RootProvider rootProvider)", "full_signature": "public void setRootProvider(@NotNull RootProvider rootProvider)", "class_method_signature": "CompositeConfiguration.setRootProvider(@NotNull RootProvider rootProvider)", "testcase": false, "constructor": false}, {"identifier": "getRootProvider", "parameters": "()", "modifiers": "@NotNull protected", "return": "RootProvider", "signature": "RootProvider getRootProvider()", "full_signature": "@NotNull protected RootProvider getRootProvider()", "class_method_signature": "CompositeConfiguration.getRootProvider()", "testcase": false, "constructor": false}, {"identifier": "setTreeProvider", "parameters": "(@NotNull TreeProvider treeProvider)", "modifiers": "public", "return": "void", "signature": "void setTreeProvider(@NotNull TreeProvider treeProvider)", "full_signature": "public void setTreeProvider(@NotNull TreeProvider treeProvider)", "class_method_signature": "CompositeConfiguration.setTreeProvider(@NotNull TreeProvider treeProvider)", "testcase": false, "constructor": false}, {"identifier": "getTreeProvider", "parameters": "()", "modifiers": "@NotNull protected", "return": "TreeProvider", "signature": "TreeProvider getTreeProvider()", "full_signature": "@NotNull protected TreeProvider getTreeProvider()", "class_method_signature": "CompositeConfiguration.getTreeProvider()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "CompositeConfiguration.getName()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ConfigurationParameters", "signature": "ConfigurationParameters getParameters()", "full_signature": "@NotNull @Override public ConfigurationParameters getParameters()", "class_method_signature": "CompositeConfiguration.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getWorkspaceInitializer", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "WorkspaceInitializer", "signature": "WorkspaceInitializer getWorkspaceInitializer()", "full_signature": "@NotNull @Override public WorkspaceInitializer getWorkspaceInitializer()", "class_method_signature": "CompositeConfiguration.getWorkspaceInitializer()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryInitializer", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RepositoryInitializer", "signature": "RepositoryInitializer getRepositoryInitializer()", "full_signature": "@NotNull @Override public RepositoryInitializer getRepositoryInitializer()", "class_method_signature": "CompositeConfiguration.getRepositoryInitializer()", "testcase": false, "constructor": false}, {"identifier": "getCommitHooks", "parameters": "(@NotNull final String workspaceName)", "modifiers": "@NotNull @Override public", "return": "List<? extends CommitHook>", "signature": "List<? extends CommitHook> getCommitHooks(@NotNull final String workspaceName)", "full_signature": "@NotNull @Override public List<? extends CommitHook> getCommitHooks(@NotNull final String workspaceName)", "class_method_signature": "CompositeConfiguration.getCommitHooks(@NotNull final String workspaceName)", "testcase": false, "constructor": false}, {"identifier": "getValidators", "parameters": "(@NotNull final String workspaceName, @NotNull final Set<Principal> principals, @NotNull final MoveTracker moveTracker)", "modifiers": "@NotNull @Override public", "return": "List<? extends ValidatorProvider>", "signature": "List<? extends ValidatorProvider> getValidators(@NotNull final String workspaceName, @NotNull final Set<Principal> principals, @NotNull final MoveTracker moveTracker)", "full_signature": "@NotNull @Override public List<? extends ValidatorProvider> getValidators(@NotNull final String workspaceName, @NotNull final Set<Principal> principals, @NotNull final MoveTracker moveTracker)", "class_method_signature": "CompositeConfiguration.getValidators(@NotNull final String workspaceName, @NotNull final Set<Principal> principals, @NotNull final MoveTracker moveTracker)", "testcase": false, "constructor": false}, {"identifier": "getConflictHandlers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ThreeWayConflictHandler>", "signature": "List<ThreeWayConflictHandler> getConflictHandlers()", "full_signature": "@NotNull @Override public List<ThreeWayConflictHandler> getConflictHandlers()", "class_method_signature": "CompositeConfiguration.getConflictHandlers()", "testcase": false, "constructor": false}, {"identifier": "getProtectedItemImporters", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ProtectedItemImporter>", "signature": "List<ProtectedItemImporter> getProtectedItemImporters()", "full_signature": "@NotNull @Override public List<ProtectedItemImporter> getProtectedItemImporters()", "class_method_signature": "CompositeConfiguration.getProtectedItemImporters()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Context", "signature": "Context getContext()", "full_signature": "@NotNull @Override public Context getContext()", "class_method_signature": "CompositeConfiguration.getContext()", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/CompositeConfiguration.java"}, "focal_method": {"identifier": "getConflictHandlers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ThreeWayConflictHandler>", "body": "@NotNull\n    @Override\n    public List<ThreeWayConflictHandler> getConflictHandlers() {\n        return ImmutableList.copyOf(Iterables.concat(Lists.transform(getConfigurations(), securityConfiguration -> securityConfiguration.getConflictHandlers())));\n    }", "signature": "List<ThreeWayConflictHandler> getConflictHandlers()", "full_signature": "@NotNull @Override public List<ThreeWayConflictHandler> getConflictHandlers()", "class_method_signature": "CompositeConfiguration.getConflictHandlers()", "testcase": false, "constructor": false, "invocations": ["copyOf", "concat", "transform", "getConfigurations", "getConflictHandlers"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}