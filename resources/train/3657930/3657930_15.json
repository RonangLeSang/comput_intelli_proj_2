{"test_class": {"identifier": "LdapProviderConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-auth-ldap/src/test/java/org/apache/jackrabbit/oak/security/authentication/ldap/impl/LdapProviderConfigTest.java"}, "test_case": {"identifier": "testEncodeFilterValueEscaped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeFilterValueEscaped() {\n        //test the encoding of character that need escaping (see RFC4515 chapter 3)\n        String value = \"\\u0000*()\\\\\";\n        String encodedValue = \"\\\\00\\\\2A\\\\28\\\\29\\\\5C\";\n        assertEquals(encodedValue, LdapProviderConfig.encodeFilterValue(value));\n    }", "signature": "void testEncodeFilterValueEscaped()", "full_signature": "@Test public void testEncodeFilterValueEscaped()", "class_method_signature": "LdapProviderConfigTest.testEncodeFilterValueEscaped()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "encodeFilterValue"]}, "focal_class": {"identifier": "LdapProviderConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PARAM_NAME_DEFAULT = \"ldap\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_NAME_DEFAULT = \"ldap\"", "var_name": "PARAM_NAME_DEFAULT"}, {"original_string": "@Property(\n            label = \"LDAP Provider Name\",\n            description = \"Name of this LDAP provider configuration. This is used to reference this provider by the login modules.\",\n            value = PARAM_NAME_DEFAULT\n    )\n    public static final String PARAM_NAME = \"provider.name\";", "modifier": "@Property(\n            label = \"LDAP Provider Name\",\n            description = \"Name of this LDAP provider configuration. This is used to reference this provider by the login modules.\",\n            value = PARAM_NAME_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_NAME = \"provider.name\"", "var_name": "PARAM_NAME"}, {"original_string": "public static final String PARAM_LDAP_HOST_DEFAULT = \"localhost\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_LDAP_HOST_DEFAULT = \"localhost\"", "var_name": "PARAM_LDAP_HOST_DEFAULT"}, {"original_string": "@Property(\n            label = \"LDAP Server Hostname\",\n            description = \"Hostname of the LDAP server\",\n            value = PARAM_LDAP_HOST_DEFAULT\n    )\n    public static final String PARAM_LDAP_HOST = \"host.name\";", "modifier": "@Property(\n            label = \"LDAP Server Hostname\",\n            description = \"Hostname of the LDAP server\",\n            value = PARAM_LDAP_HOST_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_LDAP_HOST = \"host.name\"", "var_name": "PARAM_LDAP_HOST"}, {"original_string": "public static final int PARAM_LDAP_PORT_DEFAULT = 389;", "modifier": "public static final", "type": "int", "declarator": "PARAM_LDAP_PORT_DEFAULT = 389", "var_name": "PARAM_LDAP_PORT_DEFAULT"}, {"original_string": "@Property(\n            label = \"LDAP Server Port\",\n            description = \"Port of the LDAP server\",\n            intValue = PARAM_LDAP_PORT_DEFAULT\n    )\n    public static final String PARAM_LDAP_PORT = \"host.port\";", "modifier": "@Property(\n            label = \"LDAP Server Port\",\n            description = \"Port of the LDAP server\",\n            intValue = PARAM_LDAP_PORT_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_LDAP_PORT = \"host.port\"", "var_name": "PARAM_LDAP_PORT"}, {"original_string": "public static final boolean PARAM_USE_SSL_DEFAULT = false;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_USE_SSL_DEFAULT = false", "var_name": "PARAM_USE_SSL_DEFAULT"}, {"original_string": "@Property(\n            label = \"Use SSL\",\n            description = \"Indicates if an SSL (LDAPs) connection should be used.\",\n            boolValue = PARAM_USE_SSL_DEFAULT\n    )\n    public static final String PARAM_USE_SSL = \"host.ssl\";", "modifier": "@Property(\n            label = \"Use SSL\",\n            description = \"Indicates if an SSL (LDAPs) connection should be used.\",\n            boolValue = PARAM_USE_SSL_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USE_SSL = \"host.ssl\"", "var_name": "PARAM_USE_SSL"}, {"original_string": "public static final boolean PARAM_USE_TLS_DEFAULT = false;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_USE_TLS_DEFAULT = false", "var_name": "PARAM_USE_TLS_DEFAULT"}, {"original_string": "@Property(\n            label = \"Use TLS\",\n            description = \"Indicates if TLS should be started on connections.\",\n            boolValue = PARAM_USE_TLS_DEFAULT\n    )\n    public static final String PARAM_USE_TLS = \"host.tls\";", "modifier": "@Property(\n            label = \"Use TLS\",\n            description = \"Indicates if TLS should be started on connections.\",\n            boolValue = PARAM_USE_TLS_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USE_TLS = \"host.tls\"", "var_name": "PARAM_USE_TLS"}, {"original_string": "public static final boolean PARAM_NO_CERT_CHECK_DEFAULT = false;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_NO_CERT_CHECK_DEFAULT = false", "var_name": "PARAM_NO_CERT_CHECK_DEFAULT"}, {"original_string": "@Property(\n            label = \"Disable certificate checking\",\n            description = \"Indicates if server certificate validation should be disabled.\",\n            boolValue = PARAM_NO_CERT_CHECK_DEFAULT\n    )\n    public static final String PARAM_NO_CERT_CHECK = \"host.noCertCheck\";", "modifier": "@Property(\n            label = \"Disable certificate checking\",\n            description = \"Indicates if server certificate validation should be disabled.\",\n            boolValue = PARAM_NO_CERT_CHECK_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_NO_CERT_CHECK = \"host.noCertCheck\"", "var_name": "PARAM_NO_CERT_CHECK"}, {"original_string": "public static final String PARAM_BIND_DN_DEFAULT = \"\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_BIND_DN_DEFAULT = \"\"", "var_name": "PARAM_BIND_DN_DEFAULT"}, {"original_string": "@Property(\n            label = \"Bind DN\",\n            description = \"DN of the user for authentication. Leave empty for anonymous bind.\",\n            value = PARAM_BIND_DN_DEFAULT\n    )\n    public static final String PARAM_BIND_DN = \"bind.dn\";", "modifier": "@Property(\n            label = \"Bind DN\",\n            description = \"DN of the user for authentication. Leave empty for anonymous bind.\",\n            value = PARAM_BIND_DN_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_BIND_DN = \"bind.dn\"", "var_name": "PARAM_BIND_DN"}, {"original_string": "public static final String PARAM_BIND_PASSWORD_DEFAULT = \"\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_BIND_PASSWORD_DEFAULT = \"\"", "var_name": "PARAM_BIND_PASSWORD_DEFAULT"}, {"original_string": "@Property(\n            label = \"Bind Password\",\n            description = \"Password of the user for authentication.\",\n            passwordValue = PARAM_BIND_PASSWORD_DEFAULT\n    )\n    public static final String PARAM_BIND_PASSWORD = \"bind.password\";", "modifier": "@Property(\n            label = \"Bind Password\",\n            description = \"Password of the user for authentication.\",\n            passwordValue = PARAM_BIND_PASSWORD_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_BIND_PASSWORD = \"bind.password\"", "var_name": "PARAM_BIND_PASSWORD"}, {"original_string": "public static final String PARAM_SEARCH_TIMEOUT_DEFAULT = \"60s\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_SEARCH_TIMEOUT_DEFAULT = \"60s\"", "var_name": "PARAM_SEARCH_TIMEOUT_DEFAULT"}, {"original_string": "@Property(\n            label = \"Search Timeout\",\n            description = \"Time in until a search times out (eg: '1s' or '1m 30s').\",\n            value = PARAM_SEARCH_TIMEOUT_DEFAULT\n    )\n    public static final String PARAM_SEARCH_TIMEOUT = \"searchTimeout\";", "modifier": "@Property(\n            label = \"Search Timeout\",\n            description = \"Time in until a search times out (eg: '1s' or '1m 30s').\",\n            value = PARAM_SEARCH_TIMEOUT_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_SEARCH_TIMEOUT = \"searchTimeout\"", "var_name": "PARAM_SEARCH_TIMEOUT"}, {"original_string": "public static final int PARAM_ADMIN_POOL_MAX_ACTIVE_DEFAULT = 8;", "modifier": "public static final", "type": "int", "declarator": "PARAM_ADMIN_POOL_MAX_ACTIVE_DEFAULT = 8", "var_name": "PARAM_ADMIN_POOL_MAX_ACTIVE_DEFAULT"}, {"original_string": "@Property(\n            label = \"Admin pool max active\",\n            description = \"The max active size of the admin connection pool.\",\n            longValue = PARAM_ADMIN_POOL_MAX_ACTIVE_DEFAULT\n    )\n    public static final String PARAM_ADMIN_POOL_MAX_ACTIVE = \"adminPool.maxActive\";", "modifier": "@Property(\n            label = \"Admin pool max active\",\n            description = \"The max active size of the admin connection pool.\",\n            longValue = PARAM_ADMIN_POOL_MAX_ACTIVE_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_ADMIN_POOL_MAX_ACTIVE = \"adminPool.maxActive\"", "var_name": "PARAM_ADMIN_POOL_MAX_ACTIVE"}, {"original_string": "public static final boolean PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE_DEFAULT = true;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE_DEFAULT = true", "var_name": "PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE_DEFAULT"}, {"original_string": "@Property(\n            label = \"Admin pool lookup on validate\",\n            description = \"Indicates an ROOT DSE lookup is performed to test if the connection is still valid when taking it out of the pool.\",\n            boolValue = PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE_DEFAULT\n    )\n    public static final String PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE = \"adminPool.lookupOnValidate\";", "modifier": "@Property(\n            label = \"Admin pool lookup on validate\",\n            description = \"Indicates an ROOT DSE lookup is performed to test if the connection is still valid when taking it out of the pool.\",\n            boolValue = PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE = \"adminPool.lookupOnValidate\"", "var_name": "PARAM_ADMIN_POOL_LOOKUP_ON_VALIDATE"}, {"original_string": "public static final String PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT = \"-1\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT = \"-1\"", "var_name": "PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT"}, {"original_string": "@Property(\n            label = \"Admin pool min evictable idle time\",\n            description = \"The minimum amount of time a connection from the admin pool must be idle before becoming eligible for eviction by the idle object evictor, if running (eg: '1m 30s'). When non-positive, no connections will be evicted from the pool due to idle time alone.\",\n            value = PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT\n    )\n    public static final String PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME = \"adminPool.minEvictableIdleTime\";", "modifier": "@Property(\n            label = \"Admin pool min evictable idle time\",\n            description = \"The minimum amount of time a connection from the admin pool must be idle before becoming eligible for eviction by the idle object evictor, if running (eg: '1m 30s'). When non-positive, no connections will be evicted from the pool due to idle time alone.\",\n            value = PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME = \"adminPool.minEvictableIdleTime\"", "var_name": "PARAM_ADMIN_POOL_MIN_EVICTABLE_IDLE_TIME"}, {"original_string": "public static final String PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT = \"-1\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT = \"-1\"", "var_name": "PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT"}, {"original_string": "@Property(\n            label = \"Time interval to sleep between evictor runs for the admin pool\",\n            description = \"Time interval to sleep between runs of the idle object evictor thread for the admin pool (eg: '1m 30s'). When non-positive, no idle object evictor thread will be run.\",\n            value = PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT\n    )\n    public static final String PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS = \"adminPool.timeBetweenEvictionRuns\";", "modifier": "@Property(\n            label = \"Time interval to sleep between evictor runs for the admin pool\",\n            description = \"Time interval to sleep between runs of the idle object evictor thread for the admin pool (eg: '1m 30s'). When non-positive, no idle object evictor thread will be run.\",\n            value = PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS = \"adminPool.timeBetweenEvictionRuns\"", "var_name": "PARAM_ADMIN_POOL_TIME_BETWEEN_EVICTION_RUNS"}, {"original_string": "public static final int PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT = 3;", "modifier": "public static final", "type": "int", "declarator": "PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT = 3", "var_name": "PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT"}, {"original_string": "@Property(\n            label = \"Max number of objects to be tested per run of the idle object evictor for the admin pool\",\n            description = \"The max number of objects to examine during each run of the idle object evictor thread for the admin pool (if any)\",\n            intValue = PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT\n    )\n    public static final String PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN = \"adminPool.numTestsPerEvictionRun\";", "modifier": "@Property(\n            label = \"Max number of objects to be tested per run of the idle object evictor for the admin pool\",\n            description = \"The max number of objects to examine during each run of the idle object evictor thread for the admin pool (if any)\",\n            intValue = PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN = \"adminPool.numTestsPerEvictionRun\"", "var_name": "PARAM_ADMIN_POOL_NUM_TESTS_PER_EVICTION_RUN"}, {"original_string": "public static final int PARAM_USER_POOL_MAX_ACTIVE_DEFAULT = 8;", "modifier": "public static final", "type": "int", "declarator": "PARAM_USER_POOL_MAX_ACTIVE_DEFAULT = 8", "var_name": "PARAM_USER_POOL_MAX_ACTIVE_DEFAULT"}, {"original_string": "@Property(\n            label = \"User pool max active\",\n            description = \"The max active size of the user connection pool.\",\n            longValue = PARAM_USER_POOL_MAX_ACTIVE_DEFAULT\n    )\n    public static final String PARAM_USER_POOL_MAX_ACTIVE = \"userPool.maxActive\";", "modifier": "@Property(\n            label = \"User pool max active\",\n            description = \"The max active size of the user connection pool.\",\n            longValue = PARAM_USER_POOL_MAX_ACTIVE_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_POOL_MAX_ACTIVE = \"userPool.maxActive\"", "var_name": "PARAM_USER_POOL_MAX_ACTIVE"}, {"original_string": "public static final boolean PARAM_USER_POOL_LOOKUP_ON_VALIDATE_DEFAULT = true;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_USER_POOL_LOOKUP_ON_VALIDATE_DEFAULT = true", "var_name": "PARAM_USER_POOL_LOOKUP_ON_VALIDATE_DEFAULT"}, {"original_string": "@Property(\n            label = \"User pool lookup on validate\",\n            description = \"Indicates an ROOT DSE lookup is performed to test if the connection is still valid when taking it out of the pool.\",\n            boolValue = PARAM_USER_POOL_LOOKUP_ON_VALIDATE_DEFAULT\n    )\n    public static final String PARAM_USER_POOL_LOOKUP_ON_VALIDATE = \"userPool.lookupOnValidate\";", "modifier": "@Property(\n            label = \"User pool lookup on validate\",\n            description = \"Indicates an ROOT DSE lookup is performed to test if the connection is still valid when taking it out of the pool.\",\n            boolValue = PARAM_USER_POOL_LOOKUP_ON_VALIDATE_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_POOL_LOOKUP_ON_VALIDATE = \"userPool.lookupOnValidate\"", "var_name": "PARAM_USER_POOL_LOOKUP_ON_VALIDATE"}, {"original_string": "public static final String PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT = \"-1\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT = \"-1\"", "var_name": "PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT"}, {"original_string": "@Property(\n            label = \"User pool min evictable idle time\",\n            description = \"The minimum amount of time a connection from the user pool must be idle before becoming eligible for eviction by the idle object evictor, if running (eg: '1m 30s'). When non-positive, no connections will be evicted from the pool due to idle time alone.\",\n            value = PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT\n    )\n    public static final String PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME = \"userPool.minEvictableIdleTime\";", "modifier": "@Property(\n            label = \"User pool min evictable idle time\",\n            description = \"The minimum amount of time a connection from the user pool must be idle before becoming eligible for eviction by the idle object evictor, if running (eg: '1m 30s'). When non-positive, no connections will be evicted from the pool due to idle time alone.\",\n            value = PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME = \"userPool.minEvictableIdleTime\"", "var_name": "PARAM_USER_POOL_MIN_EVICTABLE_IDLE_TIME"}, {"original_string": "public static final String PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT = \"-1\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT = \"-1\"", "var_name": "PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT"}, {"original_string": "@Property(\n            label = \"Time interval to sleep between evictor runs for the user pool\",\n            description = \"Time interval to sleep between runs of the idle object evictor thread for the user pool (eg: '1m 30s'). When non-positive, no idle object evictor thread will be run.\",\n            value = PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT\n    )\n    public static final String PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS = \"userPool.timeBetweenEvictionRuns\";", "modifier": "@Property(\n            label = \"Time interval to sleep between evictor runs for the user pool\",\n            description = \"Time interval to sleep between runs of the idle object evictor thread for the user pool (eg: '1m 30s'). When non-positive, no idle object evictor thread will be run.\",\n            value = PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS = \"userPool.timeBetweenEvictionRuns\"", "var_name": "PARAM_USER_POOL_TIME_BETWEEN_EVICTION_RUNS"}, {"original_string": "public static final int PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT = 3;", "modifier": "public static final", "type": "int", "declarator": "PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT = 3", "var_name": "PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT"}, {"original_string": "@Property(\n            label = \"Max number of objects to be tested per run of the idle object evictor for the user pool\",\n            description = \"The max number of objects to examine during each run of the idle object evictor thread for the user pool (if any)\",\n            intValue = PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT\n    )\n    public static final String PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN = \"userPool.numTestsPerEvictionRun\";", "modifier": "@Property(\n            label = \"Max number of objects to be tested per run of the idle object evictor for the user pool\",\n            description = \"The max number of objects to examine during each run of the idle object evictor thread for the user pool (if any)\",\n            intValue = PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN = \"userPool.numTestsPerEvictionRun\"", "var_name": "PARAM_USER_POOL_NUM_TESTS_PER_EVICTION_RUN"}, {"original_string": "public static final String PARAM_USER_BASE_DN_DEFAULT = \"ou=people,o=example,dc=com\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_USER_BASE_DN_DEFAULT = \"ou=people,o=example,dc=com\"", "var_name": "PARAM_USER_BASE_DN_DEFAULT"}, {"original_string": "@Property(\n            label = \"User base DN\",\n            description = \"The base DN for user searches.\",\n            value = PARAM_USER_BASE_DN_DEFAULT\n    )\n    public static final String PARAM_USER_BASE_DN = \"user.baseDN\";", "modifier": "@Property(\n            label = \"User base DN\",\n            description = \"The base DN for user searches.\",\n            value = PARAM_USER_BASE_DN_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_BASE_DN = \"user.baseDN\"", "var_name": "PARAM_USER_BASE_DN"}, {"original_string": "public static final String[] PARAM_USER_OBJECTCLASS_DEFAULT = {\"person\"};", "modifier": "public static final", "type": "String[]", "declarator": "PARAM_USER_OBJECTCLASS_DEFAULT = {\"person\"}", "var_name": "PARAM_USER_OBJECTCLASS_DEFAULT"}, {"original_string": "@Property(\n            label = \"User object classes\",\n            description = \"The list of object classes an user entry must contain.\",\n            value = {\"person\"},\n            cardinality = Integer.MAX_VALUE\n    )\n    public static final String PARAM_USER_OBJECTCLASS = \"user.objectclass\";", "modifier": "@Property(\n            label = \"User object classes\",\n            description = \"The list of object classes an user entry must contain.\",\n            value = {\"person\"},\n            cardinality = Integer.MAX_VALUE\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_OBJECTCLASS = \"user.objectclass\"", "var_name": "PARAM_USER_OBJECTCLASS"}, {"original_string": "public static final String PARAM_USER_ID_ATTRIBUTE_DEFAULT = \"uid\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_USER_ID_ATTRIBUTE_DEFAULT = \"uid\"", "var_name": "PARAM_USER_ID_ATTRIBUTE_DEFAULT"}, {"original_string": "@Property(\n            label = \"User id attribute\",\n            description = \"Name of the attribute that contains the user id.\",\n            value = PARAM_USER_ID_ATTRIBUTE_DEFAULT\n    )\n    public static final String PARAM_USER_ID_ATTRIBUTE = \"user.idAttribute\";", "modifier": "@Property(\n            label = \"User id attribute\",\n            description = \"Name of the attribute that contains the user id.\",\n            value = PARAM_USER_ID_ATTRIBUTE_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_ID_ATTRIBUTE = \"user.idAttribute\"", "var_name": "PARAM_USER_ID_ATTRIBUTE"}, {"original_string": "public static final String PARAM_USER_EXTRA_FILTER_DEFAULT = \"\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_USER_EXTRA_FILTER_DEFAULT = \"\"", "var_name": "PARAM_USER_EXTRA_FILTER_DEFAULT"}, {"original_string": "@Property(\n            label = \"User extra filter\",\n            description = \"Extra LDAP filter to use when searching for users. The final filter is\" +\n                    \"formatted like: '(&(<idAttr>=<userId>)(objectclass=<objectclass>)<extraFilter>)'\",\n            value = PARAM_USER_EXTRA_FILTER_DEFAULT\n    )\n    public static final String PARAM_USER_EXTRA_FILTER = \"user.extraFilter\";", "modifier": "@Property(\n            label = \"User extra filter\",\n            description = \"Extra LDAP filter to use when searching for users. The final filter is\" +\n                    \"formatted like: '(&(<idAttr>=<userId>)(objectclass=<objectclass>)<extraFilter>)'\",\n            value = PARAM_USER_EXTRA_FILTER_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_EXTRA_FILTER = \"user.extraFilter\"", "var_name": "PARAM_USER_EXTRA_FILTER"}, {"original_string": "public static final boolean PARAM_USER_MAKE_DN_PATH_DEFAULT = false;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_USER_MAKE_DN_PATH_DEFAULT = false", "var_name": "PARAM_USER_MAKE_DN_PATH_DEFAULT"}, {"original_string": "@Property(\n            label = \"User DN paths\",\n            description = \"Controls if the DN should be used for calculating a portion of the intermediate path.\",\n            boolValue = PARAM_USER_MAKE_DN_PATH_DEFAULT\n    )\n    public static final String PARAM_USER_MAKE_DN_PATH = \"user.makeDnPath\";", "modifier": "@Property(\n            label = \"User DN paths\",\n            description = \"Controls if the DN should be used for calculating a portion of the intermediate path.\",\n            boolValue = PARAM_USER_MAKE_DN_PATH_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USER_MAKE_DN_PATH = \"user.makeDnPath\"", "var_name": "PARAM_USER_MAKE_DN_PATH"}, {"original_string": "public static final String PARAM_GROUP_BASE_DN_DEFAULT = \"ou=groups,o=example,dc=com\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_GROUP_BASE_DN_DEFAULT = \"ou=groups,o=example,dc=com\"", "var_name": "PARAM_GROUP_BASE_DN_DEFAULT"}, {"original_string": "@Property(\n            label = \"Group base DN\",\n            description = \"The base DN for group searches.\",\n            value = PARAM_GROUP_BASE_DN_DEFAULT\n    )\n    public static final String PARAM_GROUP_BASE_DN = \"group.baseDN\";", "modifier": "@Property(\n            label = \"Group base DN\",\n            description = \"The base DN for group searches.\",\n            value = PARAM_GROUP_BASE_DN_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_GROUP_BASE_DN = \"group.baseDN\"", "var_name": "PARAM_GROUP_BASE_DN"}, {"original_string": "public static final String[] PARAM_GROUP_OBJECTCLASS_DEFAULT = {\"groupOfUniqueNames\"};", "modifier": "public static final", "type": "String[]", "declarator": "PARAM_GROUP_OBJECTCLASS_DEFAULT = {\"groupOfUniqueNames\"}", "var_name": "PARAM_GROUP_OBJECTCLASS_DEFAULT"}, {"original_string": "@Property(\n            label = \"Group object classes\",\n            description = \"The list of object classes a group entry must contain.\",\n            value = {\"groupOfUniqueNames\"},\n            cardinality = Integer.MAX_VALUE\n    )\n    public static final String PARAM_GROUP_OBJECTCLASS = \"group.objectclass\";", "modifier": "@Property(\n            label = \"Group object classes\",\n            description = \"The list of object classes a group entry must contain.\",\n            value = {\"groupOfUniqueNames\"},\n            cardinality = Integer.MAX_VALUE\n    )\n    public static final", "type": "String", "declarator": "PARAM_GROUP_OBJECTCLASS = \"group.objectclass\"", "var_name": "PARAM_GROUP_OBJECTCLASS"}, {"original_string": "public static final String PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT = \"cn\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT = \"cn\"", "var_name": "PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT"}, {"original_string": "@Property(\n            label = \"Group name attribute\",\n            description = \"Name of the attribute that contains the group name.\",\n            value = PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT\n    )\n    public static final String PARAM_GROUP_NAME_ATTRIBUTE = \"group.nameAttribute\";", "modifier": "@Property(\n            label = \"Group name attribute\",\n            description = \"Name of the attribute that contains the group name.\",\n            value = PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_GROUP_NAME_ATTRIBUTE = \"group.nameAttribute\"", "var_name": "PARAM_GROUP_NAME_ATTRIBUTE"}, {"original_string": "public static final String PARAM_GROUP_EXTRA_FILTER_DEFAULT = \"\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_GROUP_EXTRA_FILTER_DEFAULT = \"\"", "var_name": "PARAM_GROUP_EXTRA_FILTER_DEFAULT"}, {"original_string": "@Property(\n            label = \"Group extra filter\",\n            description = \"Extra LDAP filter to use when searching for groups. The final filter is\" +\n                    \"formatted like: '(&(<nameAttr>=<groupName>)(objectclass=<objectclass>)<extraFilter>)'\",\n            value = PARAM_GROUP_EXTRA_FILTER_DEFAULT\n    )\n    public static final String PARAM_GROUP_EXTRA_FILTER = \"group.extraFilter\";", "modifier": "@Property(\n            label = \"Group extra filter\",\n            description = \"Extra LDAP filter to use when searching for groups. The final filter is\" +\n                    \"formatted like: '(&(<nameAttr>=<groupName>)(objectclass=<objectclass>)<extraFilter>)'\",\n            value = PARAM_GROUP_EXTRA_FILTER_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_GROUP_EXTRA_FILTER = \"group.extraFilter\"", "var_name": "PARAM_GROUP_EXTRA_FILTER"}, {"original_string": "public static final boolean PARAM_GROUP_MAKE_DN_PATH_DEFAULT = false;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_GROUP_MAKE_DN_PATH_DEFAULT = false", "var_name": "PARAM_GROUP_MAKE_DN_PATH_DEFAULT"}, {"original_string": "@Property(\n            label = \"Group DN paths\",\n            description = \"Controls if the DN should be used for calculating a portion of the intermediate path.\",\n            boolValue = PARAM_GROUP_MAKE_DN_PATH_DEFAULT\n    )\n    public static final String PARAM_GROUP_MAKE_DN_PATH = \"group.makeDnPath\";", "modifier": "@Property(\n            label = \"Group DN paths\",\n            description = \"Controls if the DN should be used for calculating a portion of the intermediate path.\",\n            boolValue = PARAM_GROUP_MAKE_DN_PATH_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_GROUP_MAKE_DN_PATH = \"group.makeDnPath\"", "var_name": "PARAM_GROUP_MAKE_DN_PATH"}, {"original_string": "public static final String PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT = \"uniquemember\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT = \"uniquemember\"", "var_name": "PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT"}, {"original_string": "@Property(\n            label = \"Group member attribute\",\n            description = \"Group attribute that contains the member(s) of a group.\",\n            value = PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT\n    )\n    public static final String PARAM_GROUP_MEMBER_ATTRIBUTE = \"group.memberAttribute\";", "modifier": "@Property(\n            label = \"Group member attribute\",\n            description = \"Group attribute that contains the member(s) of a group.\",\n            value = PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_GROUP_MEMBER_ATTRIBUTE = \"group.memberAttribute\"", "var_name": "PARAM_GROUP_MEMBER_ATTRIBUTE"}, {"original_string": "public static final boolean PARAM_USE_UID_FOR_EXT_ID_DEFAULT = false;", "modifier": "public static final", "type": "boolean", "declarator": "PARAM_USE_UID_FOR_EXT_ID_DEFAULT = false", "var_name": "PARAM_USE_UID_FOR_EXT_ID_DEFAULT"}, {"original_string": "@Property(\n            label = \"Use user id for external ids\",\n            description = \"If enabled, the value of the user id (resp. group name) attribute will be used to create external identifiers. Leave disabled to use the DN instead.\",\n            boolValue = PARAM_USE_UID_FOR_EXT_ID_DEFAULT\n    )\n    public static final String PARAM_USE_UID_FOR_EXT_ID = \"useUidForExtId\";", "modifier": "@Property(\n            label = \"Use user id for external ids\",\n            description = \"If enabled, the value of the user id (resp. group name) attribute will be used to create external identifiers. Leave disabled to use the DN instead.\",\n            boolValue = PARAM_USE_UID_FOR_EXT_ID_DEFAULT\n    )\n    public static final", "type": "String", "declarator": "PARAM_USE_UID_FOR_EXT_ID = \"useUidForExtId\"", "var_name": "PARAM_USE_UID_FOR_EXT_ID"}, {"original_string": "public static final String[] PARAM_CUSTOM_ATTRIBUTES_DEFAULT = {};", "modifier": "public static final", "type": "String[]", "declarator": "PARAM_CUSTOM_ATTRIBUTES_DEFAULT = {}", "var_name": "PARAM_CUSTOM_ATTRIBUTES_DEFAULT"}, {"original_string": "@Property(\n            label = \"Custom Attributes\",\n            description = \"Attributes retrieved when looking up LDAP entries. Leave empty to retrieve all attributes.\",\n            value = {},\n            cardinality = Integer.MAX_VALUE\n    )\n    public static final String PARAM_CUSTOM_ATTRIBUTES = \"customattributes\";", "modifier": "@Property(\n            label = \"Custom Attributes\",\n            description = \"Attributes retrieved when looking up LDAP entries. Leave empty to retrieve all attributes.\",\n            value = {},\n            cardinality = Integer.MAX_VALUE\n    )\n    public static final", "type": "String", "declarator": "PARAM_CUSTOM_ATTRIBUTES = \"customattributes\"", "var_name": "PARAM_CUSTOM_ATTRIBUTES"}, {"original_string": "private String name = PARAM_NAME_DEFAULT;", "modifier": "private", "type": "String", "declarator": "name = PARAM_NAME_DEFAULT", "var_name": "name"}, {"original_string": "private String hostname = PARAM_LDAP_HOST_DEFAULT;", "modifier": "private", "type": "String", "declarator": "hostname = PARAM_LDAP_HOST_DEFAULT", "var_name": "hostname"}, {"original_string": "private int port = PARAM_LDAP_PORT_DEFAULT;", "modifier": "private", "type": "int", "declarator": "port = PARAM_LDAP_PORT_DEFAULT", "var_name": "port"}, {"original_string": "private boolean useSSL = PARAM_USE_SSL_DEFAULT;", "modifier": "private", "type": "boolean", "declarator": "useSSL = PARAM_USE_SSL_DEFAULT", "var_name": "useSSL"}, {"original_string": "private boolean useTLS = PARAM_USE_TLS_DEFAULT;", "modifier": "private", "type": "boolean", "declarator": "useTLS = PARAM_USE_TLS_DEFAULT", "var_name": "useTLS"}, {"original_string": "private boolean noCertCheck = PARAM_NO_CERT_CHECK_DEFAULT;", "modifier": "private", "type": "boolean", "declarator": "noCertCheck = PARAM_NO_CERT_CHECK_DEFAULT", "var_name": "noCertCheck"}, {"original_string": "private String bindDN = PARAM_BIND_DN_DEFAULT;", "modifier": "private", "type": "String", "declarator": "bindDN = PARAM_BIND_DN_DEFAULT", "var_name": "bindDN"}, {"original_string": "private String bindPassword = PARAM_BIND_PASSWORD_DEFAULT;", "modifier": "private", "type": "String", "declarator": "bindPassword = PARAM_BIND_PASSWORD_DEFAULT", "var_name": "bindPassword"}, {"original_string": "private long searchTimeout = ConfigurationParameters.Milliseconds.of(PARAM_SEARCH_TIMEOUT_DEFAULT).value;", "modifier": "private", "type": "long", "declarator": "searchTimeout = ConfigurationParameters.Milliseconds.of(PARAM_SEARCH_TIMEOUT_DEFAULT).value", "var_name": "searchTimeout"}, {"original_string": "private String groupMemberAttribute = PARAM_GROUP_MEMBER_ATTRIBUTE;", "modifier": "private", "type": "String", "declarator": "groupMemberAttribute = PARAM_GROUP_MEMBER_ATTRIBUTE", "var_name": "groupMemberAttribute"}, {"original_string": "private boolean useUidForExtId = PARAM_USE_UID_FOR_EXT_ID_DEFAULT;", "modifier": "private", "type": "boolean", "declarator": "useUidForExtId = PARAM_USE_UID_FOR_EXT_ID_DEFAULT", "var_name": "useUidForExtId"}, {"original_string": "private String memberOfFilterTemplate;", "modifier": "private", "type": "String", "declarator": "memberOfFilterTemplate", "var_name": "memberOfFilterTemplate"}, {"original_string": "private String[] customAttributes = PARAM_CUSTOM_ATTRIBUTES_DEFAULT;", "modifier": "private", "type": "String[]", "declarator": "customAttributes = PARAM_CUSTOM_ATTRIBUTES_DEFAULT", "var_name": "customAttributes"}, {"original_string": "private final PoolConfig adminPoolConfig = new PoolConfig()\n            .setMaxActive(PARAM_ADMIN_POOL_MAX_ACTIVE_DEFAULT);", "modifier": "private final", "type": "PoolConfig", "declarator": "adminPoolConfig = new PoolConfig()\n            .setMaxActive(PARAM_ADMIN_POOL_MAX_ACTIVE_DEFAULT)", "var_name": "adminPoolConfig"}, {"original_string": "private final PoolConfig userPoolConfig = new PoolConfig()\n            .setMaxActive(PARAM_USER_POOL_MAX_ACTIVE_DEFAULT);", "modifier": "private final", "type": "PoolConfig", "declarator": "userPoolConfig = new PoolConfig()\n            .setMaxActive(PARAM_USER_POOL_MAX_ACTIVE_DEFAULT)", "var_name": "userPoolConfig"}, {"original_string": "private final Identity userConfig = new Identity()\n            .setBaseDN(PARAM_USER_BASE_DN_DEFAULT)\n            .setExtraFilter(PARAM_USER_EXTRA_FILTER_DEFAULT)\n            .setIdAttribute(PARAM_USER_ID_ATTRIBUTE_DEFAULT)\n            .setMakeDnPath(PARAM_USER_MAKE_DN_PATH_DEFAULT)\n            .setObjectClasses(PARAM_USER_OBJECTCLASS_DEFAULT);", "modifier": "private final", "type": "Identity", "declarator": "userConfig = new Identity()\n            .setBaseDN(PARAM_USER_BASE_DN_DEFAULT)\n            .setExtraFilter(PARAM_USER_EXTRA_FILTER_DEFAULT)\n            .setIdAttribute(PARAM_USER_ID_ATTRIBUTE_DEFAULT)\n            .setMakeDnPath(PARAM_USER_MAKE_DN_PATH_DEFAULT)\n            .setObjectClasses(PARAM_USER_OBJECTCLASS_DEFAULT)", "var_name": "userConfig"}, {"original_string": "private final Identity groupConfig = new Identity()\n            .setBaseDN(PARAM_GROUP_BASE_DN_DEFAULT)\n            .setExtraFilter(PARAM_GROUP_EXTRA_FILTER_DEFAULT)\n            .setIdAttribute(PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT)\n            .setMakeDnPath(PARAM_GROUP_MAKE_DN_PATH_DEFAULT)\n            .setObjectClasses(PARAM_GROUP_OBJECTCLASS_DEFAULT);", "modifier": "private final", "type": "Identity", "declarator": "groupConfig = new Identity()\n            .setBaseDN(PARAM_GROUP_BASE_DN_DEFAULT)\n            .setExtraFilter(PARAM_GROUP_EXTRA_FILTER_DEFAULT)\n            .setIdAttribute(PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT)\n            .setMakeDnPath(PARAM_GROUP_MAKE_DN_PATH_DEFAULT)\n            .setObjectClasses(PARAM_GROUP_OBJECTCLASS_DEFAULT)", "var_name": "groupConfig"}], "methods": [{"identifier": "of", "parameters": "(ConfigurationParameters params)", "modifiers": "public static", "return": "LdapProviderConfig", "signature": "LdapProviderConfig of(ConfigurationParameters params)", "full_signature": "public static LdapProviderConfig of(ConfigurationParameters params)", "class_method_signature": "LdapProviderConfig.of(ConfigurationParameters params)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull public String getName()", "class_method_signature": "LdapProviderConfig.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(@NotNull String name)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setName(@NotNull String name)", "full_signature": "@NotNull public LdapProviderConfig setName(@NotNull String name)", "class_method_signature": "LdapProviderConfig.setName(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getHostname", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getHostname()", "full_signature": "@NotNull public String getHostname()", "class_method_signature": "LdapProviderConfig.getHostname()", "testcase": false, "constructor": false}, {"identifier": "setHostname", "parameters": "(@NotNull String hostname)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setHostname(@NotNull String hostname)", "full_signature": "@NotNull public LdapProviderConfig setHostname(@NotNull String hostname)", "class_method_signature": "LdapProviderConfig.setHostname(@NotNull String hostname)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "LdapProviderConfig.getPort()", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(int port)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setPort(int port)", "full_signature": "@NotNull public LdapProviderConfig setPort(int port)", "class_method_signature": "LdapProviderConfig.setPort(int port)", "testcase": false, "constructor": false}, {"identifier": "useSSL", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean useSSL()", "full_signature": "public boolean useSSL()", "class_method_signature": "LdapProviderConfig.useSSL()", "testcase": false, "constructor": false}, {"identifier": "setUseSSL", "parameters": "(boolean useSSL)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setUseSSL(boolean useSSL)", "full_signature": "@NotNull public LdapProviderConfig setUseSSL(boolean useSSL)", "class_method_signature": "LdapProviderConfig.setUseSSL(boolean useSSL)", "testcase": false, "constructor": false}, {"identifier": "useTLS", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean useTLS()", "full_signature": "public boolean useTLS()", "class_method_signature": "LdapProviderConfig.useTLS()", "testcase": false, "constructor": false}, {"identifier": "setUseTLS", "parameters": "(boolean useTLS)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setUseTLS(boolean useTLS)", "full_signature": "@NotNull public LdapProviderConfig setUseTLS(boolean useTLS)", "class_method_signature": "LdapProviderConfig.setUseTLS(boolean useTLS)", "testcase": false, "constructor": false}, {"identifier": "noCertCheck", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean noCertCheck()", "full_signature": "public boolean noCertCheck()", "class_method_signature": "LdapProviderConfig.noCertCheck()", "testcase": false, "constructor": false}, {"identifier": "setNoCertCheck", "parameters": "(boolean noCertCheck)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setNoCertCheck(boolean noCertCheck)", "full_signature": "@NotNull public LdapProviderConfig setNoCertCheck(boolean noCertCheck)", "class_method_signature": "LdapProviderConfig.setNoCertCheck(boolean noCertCheck)", "testcase": false, "constructor": false}, {"identifier": "getBindDN", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getBindDN()", "full_signature": "@Nullable public String getBindDN()", "class_method_signature": "LdapProviderConfig.getBindDN()", "testcase": false, "constructor": false}, {"identifier": "setBindDN", "parameters": "(@Nullable String bindDN)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setBindDN(@Nullable String bindDN)", "full_signature": "@NotNull public LdapProviderConfig setBindDN(@Nullable String bindDN)", "class_method_signature": "LdapProviderConfig.setBindDN(@Nullable String bindDN)", "testcase": false, "constructor": false}, {"identifier": "getBindPassword", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getBindPassword()", "full_signature": "@Nullable public String getBindPassword()", "class_method_signature": "LdapProviderConfig.getBindPassword()", "testcase": false, "constructor": false}, {"identifier": "setBindPassword", "parameters": "(@Nullable String bindPassword)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setBindPassword(@Nullable String bindPassword)", "full_signature": "@NotNull public LdapProviderConfig setBindPassword(@Nullable String bindPassword)", "class_method_signature": "LdapProviderConfig.setBindPassword(@Nullable String bindPassword)", "testcase": false, "constructor": false}, {"identifier": "getSearchTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSearchTimeout()", "full_signature": "public long getSearchTimeout()", "class_method_signature": "LdapProviderConfig.getSearchTimeout()", "testcase": false, "constructor": false}, {"identifier": "setSearchTimeout", "parameters": "(long searchTimeout)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setSearchTimeout(long searchTimeout)", "full_signature": "@NotNull public LdapProviderConfig setSearchTimeout(long searchTimeout)", "class_method_signature": "LdapProviderConfig.setSearchTimeout(long searchTimeout)", "testcase": false, "constructor": false}, {"identifier": "getGroupMemberAttribute", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getGroupMemberAttribute()", "full_signature": "@NotNull public String getGroupMemberAttribute()", "class_method_signature": "LdapProviderConfig.getGroupMemberAttribute()", "testcase": false, "constructor": false}, {"identifier": "setGroupMemberAttribute", "parameters": "(@NotNull String groupMemberAttribute)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setGroupMemberAttribute(@NotNull String groupMemberAttribute)", "full_signature": "@NotNull public LdapProviderConfig setGroupMemberAttribute(@NotNull String groupMemberAttribute)", "class_method_signature": "LdapProviderConfig.setGroupMemberAttribute(@NotNull String groupMemberAttribute)", "testcase": false, "constructor": false}, {"identifier": "getUseUidForExtId", "parameters": "()", "modifiers": "@NotNull public", "return": "boolean", "signature": "boolean getUseUidForExtId()", "full_signature": "@NotNull public boolean getUseUidForExtId()", "class_method_signature": "LdapProviderConfig.getUseUidForExtId()", "testcase": false, "constructor": false}, {"identifier": "setUseUidForExtId", "parameters": "(boolean useUidForExtId)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setUseUidForExtId(boolean useUidForExtId)", "full_signature": "@NotNull public LdapProviderConfig setUseUidForExtId(boolean useUidForExtId)", "class_method_signature": "LdapProviderConfig.setUseUidForExtId(boolean useUidForExtId)", "testcase": false, "constructor": false}, {"identifier": "getCustomAttributes", "parameters": "()", "modifiers": "@NotNull public", "return": "String[]", "signature": "String[] getCustomAttributes()", "full_signature": "@NotNull public String[] getCustomAttributes()", "class_method_signature": "LdapProviderConfig.getCustomAttributes()", "testcase": false, "constructor": false}, {"identifier": "setCustomAttributes", "parameters": "(@NotNull String[] customAttributes)", "modifiers": "@NotNull public", "return": "LdapProviderConfig", "signature": "LdapProviderConfig setCustomAttributes(@NotNull String[] customAttributes)", "full_signature": "@NotNull public LdapProviderConfig setCustomAttributes(@NotNull String[] customAttributes)", "class_method_signature": "LdapProviderConfig.setCustomAttributes(@NotNull String[] customAttributes)", "testcase": false, "constructor": false}, {"identifier": "getMemberOfSearchFilter", "parameters": "(@NotNull String dn)", "modifiers": "public", "return": "String", "signature": "String getMemberOfSearchFilter(@NotNull String dn)", "full_signature": "public String getMemberOfSearchFilter(@NotNull String dn)", "class_method_signature": "LdapProviderConfig.getMemberOfSearchFilter(@NotNull String dn)", "testcase": false, "constructor": false}, {"identifier": "getUserConfig", "parameters": "()", "modifiers": "@NotNull public", "return": "Identity", "signature": "Identity getUserConfig()", "full_signature": "@NotNull public Identity getUserConfig()", "class_method_signature": "LdapProviderConfig.getUserConfig()", "testcase": false, "constructor": false}, {"identifier": "getGroupConfig", "parameters": "()", "modifiers": "@NotNull public", "return": "Identity", "signature": "Identity getGroupConfig()", "full_signature": "@NotNull public Identity getGroupConfig()", "class_method_signature": "LdapProviderConfig.getGroupConfig()", "testcase": false, "constructor": false}, {"identifier": "getAdminPoolConfig", "parameters": "()", "modifiers": "@NotNull public", "return": "PoolConfig", "signature": "PoolConfig getAdminPoolConfig()", "full_signature": "@NotNull public PoolConfig getAdminPoolConfig()", "class_method_signature": "LdapProviderConfig.getAdminPoolConfig()", "testcase": false, "constructor": false}, {"identifier": "getUserPoolConfig", "parameters": "()", "modifiers": "@NotNull public", "return": "PoolConfig", "signature": "PoolConfig getUserPoolConfig()", "full_signature": "@NotNull public PoolConfig getUserPoolConfig()", "class_method_signature": "LdapProviderConfig.getUserPoolConfig()", "testcase": false, "constructor": false}, {"identifier": "encodeFilterValue", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String encodeFilterValue(String value)", "full_signature": "public static String encodeFilterValue(String value)", "class_method_signature": "LdapProviderConfig.encodeFilterValue(String value)", "testcase": false, "constructor": false}, {"identifier": "removeEmptyStrings", "parameters": "(@NotNull String[] params)", "modifiers": "private", "return": "String[]", "signature": "String[] removeEmptyStrings(@NotNull String[] params)", "full_signature": "private String[] removeEmptyStrings(@NotNull String[] params)", "class_method_signature": "LdapProviderConfig.removeEmptyStrings(@NotNull String[] params)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LdapProviderConfig.toString()", "testcase": false, "constructor": false}], "file": "oak-auth-ldap/src/main/java/org/apache/jackrabbit/oak/security/authentication/ldap/impl/LdapProviderConfig.java"}, "focal_method": {"identifier": "encodeFilterValue", "parameters": "(String value)", "modifiers": "public static", "return": "String", "body": "public static String encodeFilterValue(String value) {\n        StringBuilder sb = null;\n        for (int i = 0; i < value.length(); i++) {\n            char ch = value.charAt(i);\n            String replace;\n            switch (ch) {\n                case '*':\n                    replace = \"\\\\2A\";\n                    break;\n\n                case '(':\n                    replace = \"\\\\28\";\n                    break;\n\n                case ')':\n                    replace = \"\\\\29\";\n                    break;\n\n                case '\\\\':\n                    replace = \"\\\\5C\";\n                    break;\n\n                case '\\0':\n                    replace = \"\\\\00\";\n                    break;\n\n                default:\n                    replace = null;\n            }\n            if (replace != null) {\n                if (sb == null) {\n                    sb = new StringBuilder(value.length() * 2);\n                    sb.append(value.substring(0, i));\n                }\n                sb.append(replace);\n            } else if (sb != null) {\n                sb.append(ch);\n            }\n        }\n        return (sb == null ? value : sb.toString());\n    }", "signature": "String encodeFilterValue(String value)", "full_signature": "public static String encodeFilterValue(String value)", "class_method_signature": "LdapProviderConfig.encodeFilterValue(String value)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "length", "append", "substring", "append", "append", "toString"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}