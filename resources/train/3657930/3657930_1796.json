{"test_class": {"identifier": "PrincipalBasedAuthorizationConfigurationTest", "superclass": "extends AbstractPrincipalBasedTest", "interfaces": "", "fields": [], "file": "oak-authorization-principalbased/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/PrincipalBasedAuthorizationConfigurationTest.java"}, "test_case": {"identifier": "testModified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testModified() {\n        PrincipalBasedAuthorizationConfiguration pbac = getPrincipalBasedAuthorizationConfiguration();\n\n        ServiceRegistration registrationMock = mock(ServiceRegistration.class);\n        BundleContext ctx = when(mock(BundleContext.class).registerService(anyString(), any(AggregationFilter.class), any(Hashtable.class))).thenReturn(registrationMock).getMock();\n        PrincipalBasedAuthorizationConfiguration.Configuration config = mock(PrincipalBasedAuthorizationConfiguration.Configuration.class);\n        when(config.configurationRanking()).thenReturn(50);\n        when(config.enableAggregationFilter()).thenReturn(true);\n        pbac.activate(ctx, config);\n\n        when(config.configurationRanking()).thenReturn(85);\n        when(config.enableAggregationFilter()).thenReturn(true);\n        pbac.modified(ctx, config);\n\n        ConfigurationParameters params = pbac.getParameters();\n        assertEquals(85, params.get(PARAM_RANKING));\n        assertEquals(Boolean.TRUE, params.get(PARAM_ENABLE_AGGREGATION_FILTER));\n\n        verify(ctx, times(1)).registerService(anyString(), any(AggregationFilter.class), any(Hashtable.class));\n    }", "signature": "void testModified()", "full_signature": "@Test public void testModified()", "class_method_signature": "PrincipalBasedAuthorizationConfigurationTest.testModified()", "testcase": true, "constructor": false, "invocations": ["getPrincipalBasedAuthorizationConfiguration", "mock", "getMock", "thenReturn", "when", "registerService", "mock", "anyString", "any", "any", "mock", "thenReturn", "when", "configurationRanking", "thenReturn", "when", "enableAggregationFilter", "activate", "thenReturn", "when", "configurationRanking", "thenReturn", "when", "enableAggregationFilter", "modified", "getParameters", "assertEquals", "get", "assertEquals", "get", "registerService", "verify", "times", "anyString", "any", "any"]}, "focal_class": {"identifier": "PrincipalBasedAuthorizationConfiguration", "superclass": "extends ConfigurationBase", "interfaces": "implements AuthorizationConfiguration", "fields": [{"original_string": "private FilterProvider filterProvider;", "modifier": "private", "type": "FilterProvider", "declarator": "filterProvider", "var_name": "filterProvider"}, {"original_string": "private MountInfoProvider mountInfoProvider;", "modifier": "private", "type": "MountInfoProvider", "declarator": "mountInfoProvider", "var_name": "mountInfoProvider"}, {"original_string": "private ServiceRegistration aggregationFilterRegistration;", "modifier": "private", "type": "ServiceRegistration", "declarator": "aggregationFilterRegistration", "var_name": "aggregationFilterRegistration"}], "methods": [{"identifier": "PrincipalBasedAuthorizationConfiguration", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "signature": " PrincipalBasedAuthorizationConfiguration()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  PrincipalBasedAuthorizationConfiguration()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.PrincipalBasedAuthorizationConfiguration()", "testcase": false, "constructor": true}, {"identifier": "getAccessControlManager", "parameters": "(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "modifiers": "@NotNull @Override public", "return": "AccessControlManager", "signature": "AccessControlManager getAccessControlManager(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "full_signature": "@NotNull @Override public AccessControlManager getAccessControlManager(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getAccessControlManager(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "testcase": false, "constructor": false}, {"identifier": "getRestrictionProvider", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RestrictionProvider", "signature": "RestrictionProvider getRestrictionProvider()", "full_signature": "@NotNull @Override public RestrictionProvider getRestrictionProvider()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getRestrictionProvider()", "testcase": false, "constructor": false}, {"identifier": "getPermissionProvider", "parameters": "(@NotNull Root root, @NotNull String workspaceName, @NotNull Set<Principal> principals)", "modifiers": "@NotNull @Override public", "return": "PermissionProvider", "signature": "PermissionProvider getPermissionProvider(@NotNull Root root, @NotNull String workspaceName, @NotNull Set<Principal> principals)", "full_signature": "@NotNull @Override public PermissionProvider getPermissionProvider(@NotNull Root root, @NotNull String workspaceName, @NotNull Set<Principal> principals)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getPermissionProvider(@NotNull Root root, @NotNull String workspaceName, @NotNull Set<Principal> principals)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getName()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryInitializer", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RepositoryInitializer", "signature": "RepositoryInitializer getRepositoryInitializer()", "full_signature": "@NotNull @Override public RepositoryInitializer getRepositoryInitializer()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getRepositoryInitializer()", "testcase": false, "constructor": false}, {"identifier": "getCommitHooks", "parameters": "(@NotNull String workspaceName)", "modifiers": "@NotNull @Override public", "return": "List<? extends CommitHook>", "signature": "List<? extends CommitHook> getCommitHooks(@NotNull String workspaceName)", "full_signature": "@NotNull @Override public List<? extends CommitHook> getCommitHooks(@NotNull String workspaceName)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getCommitHooks(@NotNull String workspaceName)", "testcase": false, "constructor": false}, {"identifier": "getValidators", "parameters": "(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "modifiers": "@NotNull @Override public", "return": "List<? extends ValidatorProvider>", "signature": "List<? extends ValidatorProvider> getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "full_signature": "@NotNull @Override public List<? extends ValidatorProvider> getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "testcase": false, "constructor": false}, {"identifier": "getProtectedItemImporters", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ProtectedItemImporter>", "signature": "List<ProtectedItemImporter> getProtectedItemImporters()", "full_signature": "@NotNull @Override public List<ProtectedItemImporter> getProtectedItemImporters()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getProtectedItemImporters()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Context", "signature": "Context getContext()", "full_signature": "@NotNull @Override public Context getContext()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.getContext()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "(@NotNull BundleContext context, @NotNull Configuration configuration)", "modifiers": "@Activate public", "return": "void", "signature": "void activate(@NotNull BundleContext context, @NotNull Configuration configuration)", "full_signature": "@Activate public void activate(@NotNull BundleContext context, @NotNull Configuration configuration)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.activate(@NotNull BundleContext context, @NotNull Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(@NotNull BundleContext context, @NotNull Configuration configuration)", "modifiers": "@Modified public", "return": "void", "signature": "void modified(@NotNull BundleContext context, @NotNull Configuration configuration)", "full_signature": "@Modified public void modified(@NotNull BundleContext context, @NotNull Configuration configuration)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.modified(@NotNull BundleContext context, @NotNull Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "(@NotNull BundleContext context, @NotNull Configuration configuration)", "modifiers": "@Deactivate public", "return": "void", "signature": "void deactivate(@NotNull BundleContext context, @NotNull Configuration configuration)", "full_signature": "@Deactivate public void deactivate(@NotNull BundleContext context, @NotNull Configuration configuration)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.deactivate(@NotNull BundleContext context, @NotNull Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "bindFilterProvider", "parameters": "(@NotNull FilterProvider filterProvider)", "modifiers": "@Reference(name = \"filterProvider\", cardinality = ReferenceCardinality.MANDATORY) public", "return": "void", "signature": "void bindFilterProvider(@NotNull FilterProvider filterProvider)", "full_signature": "@Reference(name = \"filterProvider\", cardinality = ReferenceCardinality.MANDATORY) public void bindFilterProvider(@NotNull FilterProvider filterProvider)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.bindFilterProvider(@NotNull FilterProvider filterProvider)", "testcase": false, "constructor": false}, {"identifier": "unbindFilterProvider", "parameters": "(@NotNull FilterProvider filterProvider)", "modifiers": "public", "return": "void", "signature": "void unbindFilterProvider(@NotNull FilterProvider filterProvider)", "full_signature": "public void unbindFilterProvider(@NotNull FilterProvider filterProvider)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.unbindFilterProvider(@NotNull FilterProvider filterProvider)", "testcase": false, "constructor": false}, {"identifier": "bindMountInfoProvider", "parameters": "(@NotNull MountInfoProvider mountInfoProvider)", "modifiers": "@Reference(name = \"mountInfoProvider\", cardinality = ReferenceCardinality.MANDATORY) public", "return": "void", "signature": "void bindMountInfoProvider(@NotNull MountInfoProvider mountInfoProvider)", "full_signature": "@Reference(name = \"mountInfoProvider\", cardinality = ReferenceCardinality.MANDATORY) public void bindMountInfoProvider(@NotNull MountInfoProvider mountInfoProvider)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.bindMountInfoProvider(@NotNull MountInfoProvider mountInfoProvider)", "testcase": false, "constructor": false}, {"identifier": "unbindMountInfoProvider", "parameters": "(@NotNull MountInfoProvider mountInfoProvider)", "modifiers": "public", "return": "void", "signature": "void unbindMountInfoProvider(@NotNull MountInfoProvider mountInfoProvider)", "full_signature": "public void unbindMountInfoProvider(@NotNull MountInfoProvider mountInfoProvider)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.unbindMountInfoProvider(@NotNull MountInfoProvider mountInfoProvider)", "testcase": false, "constructor": false}, {"identifier": "checkConflictingMount", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkConflictingMount()", "full_signature": "private void checkConflictingMount()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.checkConflictingMount()", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "(@NotNull final Root root)", "modifiers": "private static", "return": "boolean", "signature": "boolean registerNodeTypes(@NotNull final Root root)", "full_signature": "private static boolean registerNodeTypes(@NotNull final Root root)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.registerNodeTypes(@NotNull final Root root)", "testcase": false, "constructor": false}, {"identifier": "registerAggregationFilter", "parameters": "(@NotNull BundleContext context)", "modifiers": "private", "return": "void", "signature": "void registerAggregationFilter(@NotNull BundleContext context)", "full_signature": "private void registerAggregationFilter(@NotNull BundleContext context)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.registerAggregationFilter(@NotNull BundleContext context)", "testcase": false, "constructor": false}, {"identifier": "unregisterAggregationFilter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unregisterAggregationFilter()", "full_signature": "private void unregisterAggregationFilter()", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.unregisterAggregationFilter()", "testcase": false, "constructor": false}], "file": "oak-authorization-principalbased/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/impl/PrincipalBasedAuthorizationConfiguration.java"}, "focal_method": {"identifier": "modified", "parameters": "(@NotNull BundleContext context, @NotNull Configuration configuration)", "modifiers": "@Modified public", "return": "void", "body": "@Modified\n    public void modified(@NotNull BundleContext context, @NotNull Configuration configuration) {\n        activate(context, configuration);\n    }", "signature": "void modified(@NotNull BundleContext context, @NotNull Configuration configuration)", "full_signature": "@Modified public void modified(@NotNull BundleContext context, @NotNull Configuration configuration)", "class_method_signature": "PrincipalBasedAuthorizationConfiguration.modified(@NotNull BundleContext context, @NotNull Configuration configuration)", "testcase": false, "constructor": false, "invocations": ["activate"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}