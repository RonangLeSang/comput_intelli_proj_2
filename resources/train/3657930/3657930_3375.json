{"test_class": {"identifier": "FlatFileBufferLinkedListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected NodeStateEntryList list;", "modifier": "protected", "type": "NodeStateEntryList", "declarator": "list", "var_name": "list"}], "file": "oak-run/src/test/java/org/apache/jackrabbit/oak/index/indexer/document/flatfile/linkedList/FlatFileBufferLinkedListTest.java"}, "test_case": {"identifier": "iterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void iterator() {\n        assertEquals(\"empty list must be 0-sized\", 0, Iterators.size(list.iterator()));\n\n        list.add(testNode(\"/\"));\n        assertEquals(\"single entry list must be 1-sized\", 1, Iterators.size(list.iterator()));\n        assertEquals(\"single entry list must be 1-sized on separate iterators\",\n                1, Iterators.size(list.iterator()));\n\n        list.add(testNode(\"/a\"));\n        assertEquals(\"2 entries in list must be 2-sized\", 2, Iterators.size(list.iterator()));\n\n        assertEquals(\"2 entries in list must be 2-sized on separate iterators\",\n                2, Iterators.size(list.iterator()));\n\n        Iterator<NodeStateEntry> iter2 = list.iterator();\n        Iterator<NodeStateEntry> iter1 = list.iterator();\n        assertEquals(\"/\", iter2.next().toString());\n        assertEquals(\"2 entries in list must be 1-sized after consuming an item\",\n                1, Iterators.size(iter2));\n        assertEquals(\"2 entries in list must be 2-sized even if some other iterator consumed an item\",\n                2, Iterators.size(iter1));\n\n        list.add(testNode(\"/b\"));\n        iter1 = list.iterator();\n        iter2 = list.iterator();\n\n        //move iter to point at node being removed below\n        assertEquals(\"/\", iter1.next().toString());\n        // move iter beyond node being removed - this should remain valid\n        assertEquals(\"/\", iter2.next().toString());\n        assertEquals(\"/a\", iter2.next().toString());\n\n        assertEquals(\"/\", list.remove().toString());\n        assertEquals(\"/a\", list.remove().toString());\n        try {\n            iter1.next();\n            fail(\"Iterator state once removed from list can't be traversed\");\n        } catch (IllegalStateException ise) {\n            //ignore\n        }\n        //this should work\n        assertEquals(testNode(\"/b\"), iter2.next());\n        assertEquals(\"2 entries in list must be 1-sized after removal of an iterm\",\n                1, Iterators.size(list.iterator()));\n    }", "signature": "void iterator()", "full_signature": "@Test public void iterator()", "class_method_signature": "FlatFileBufferLinkedListTest.iterator()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "iterator", "add", "testNode", "assertEquals", "size", "iterator", "assertEquals", "size", "iterator", "add", "testNode", "assertEquals", "size", "iterator", "assertEquals", "size", "iterator", "iterator", "iterator", "assertEquals", "toString", "next", "assertEquals", "size", "assertEquals", "size", "add", "testNode", "iterator", "iterator", "assertEquals", "toString", "next", "assertEquals", "toString", "next", "assertEquals", "toString", "next", "assertEquals", "toString", "remove", "assertEquals", "toString", "remove", "next", "fail", "assertEquals", "testNode", "next", "assertEquals", "size", "iterator"]}, "focal_class": {"identifier": "FlatFileBufferLinkedList", "superclass": "", "interfaces": "implements NodeStateEntryList", "fields": [{"original_string": "private ListNode head = new ListNode();", "modifier": "private", "type": "ListNode", "declarator": "head = new ListNode()", "var_name": "head"}, {"original_string": "private ListNode tail = head;", "modifier": "private", "type": "ListNode", "declarator": "tail = head", "var_name": "tail"}, {"original_string": "private int size = 0;", "modifier": "private", "type": "int", "declarator": "size = 0", "var_name": "size"}, {"original_string": "private long memUsage = 0;", "modifier": "private", "type": "long", "declarator": "memUsage = 0", "var_name": "memUsage"}, {"original_string": "private final long memLimit;", "modifier": "private final", "type": "long", "declarator": "memLimit", "var_name": "memLimit"}], "methods": [{"identifier": "FlatFileBufferLinkedList", "parameters": "()", "modifiers": "public", "return": "", "signature": " FlatFileBufferLinkedList()", "full_signature": "public  FlatFileBufferLinkedList()", "class_method_signature": "FlatFileBufferLinkedList.FlatFileBufferLinkedList()", "testcase": false, "constructor": true}, {"identifier": "FlatFileBufferLinkedList", "parameters": "(long memLimit)", "modifiers": "public", "return": "", "signature": " FlatFileBufferLinkedList(long memLimit)", "full_signature": "public  FlatFileBufferLinkedList(long memLimit)", "class_method_signature": "FlatFileBufferLinkedList.FlatFileBufferLinkedList(long memLimit)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(@NotNull NodeStateEntry item)", "modifiers": "public", "return": "void", "signature": "void add(@NotNull NodeStateEntry item)", "full_signature": "public void add(@NotNull NodeStateEntry item)", "class_method_signature": "FlatFileBufferLinkedList.add(@NotNull NodeStateEntry item)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "public", "return": "NodeStateEntry", "signature": "NodeStateEntry remove()", "full_signature": "public NodeStateEntry remove()", "class_method_signature": "FlatFileBufferLinkedList.remove()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<NodeStateEntry>", "signature": "Iterator<NodeStateEntry> iterator()", "full_signature": "@Override public Iterator<NodeStateEntry> iterator()", "class_method_signature": "FlatFileBufferLinkedList.iterator()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "FlatFileBufferLinkedList.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "FlatFileBufferLinkedList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "estimatedMemoryUsage", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long estimatedMemoryUsage()", "full_signature": "@Override public long estimatedMemoryUsage()", "class_method_signature": "FlatFileBufferLinkedList.estimatedMemoryUsage()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FlatFileBufferLinkedList.close()", "testcase": false, "constructor": false}], "file": "oak-run/src/main/java/org/apache/jackrabbit/oak/index/indexer/document/flatfile/linkedList/FlatFileBufferLinkedList.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<NodeStateEntry>", "body": "@Override\n    public Iterator<NodeStateEntry> iterator() {\n        return NodeIterator.iteratorFor(head);\n    }", "signature": "Iterator<NodeStateEntry> iterator()", "full_signature": "@Override public Iterator<NodeStateEntry> iterator()", "class_method_signature": "FlatFileBufferLinkedList.iterator()", "testcase": false, "constructor": false, "invocations": ["iteratorFor"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}