{"test_class": {"identifier": "UserConfigurationImplTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private static final String USER_PATH = \"/this/is/a/user/test\";", "modifier": "private static final", "type": "String", "declarator": "USER_PATH = \"/this/is/a/user/test\"", "var_name": "USER_PATH"}, {"original_string": "private static final String GROUP_PATH = \"/this/is/a/group/test\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_PATH = \"/this/is/a/group/test\"", "var_name": "GROUP_PATH"}, {"original_string": "private static final Integer DEFAULT_DEPTH = 10;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_DEPTH = 10", "var_name": "DEFAULT_DEPTH"}, {"original_string": "private static final String IMPORT_BEHAVIOR = ImportBehavior.NAME_BESTEFFORT;", "modifier": "private static final", "type": "String", "declarator": "IMPORT_BEHAVIOR = ImportBehavior.NAME_BESTEFFORT", "var_name": "IMPORT_BEHAVIOR"}, {"original_string": "private static final String HASH_ALGORITHM = \"MD5\";", "modifier": "private static final", "type": "String", "declarator": "HASH_ALGORITHM = \"MD5\"", "var_name": "HASH_ALGORITHM"}, {"original_string": "private static final Integer HASH_ITERATIONS = 500;", "modifier": "private static final", "type": "Integer", "declarator": "HASH_ITERATIONS = 500", "var_name": "HASH_ITERATIONS"}, {"original_string": "private static final Integer SALT_SIZE = 6;", "modifier": "private static final", "type": "Integer", "declarator": "SALT_SIZE = 6", "var_name": "SALT_SIZE"}, {"original_string": "private static final boolean SUPPORT_AUTOSAVE = true;", "modifier": "private static final", "type": "boolean", "declarator": "SUPPORT_AUTOSAVE = true", "var_name": "SUPPORT_AUTOSAVE"}, {"original_string": "private static final Integer MAX_AGE = 10;", "modifier": "private static final", "type": "Integer", "declarator": "MAX_AGE = 10", "var_name": "MAX_AGE"}, {"original_string": "private static final boolean INITIAL_PASSWORD_CHANGE = true;", "modifier": "private static final", "type": "boolean", "declarator": "INITIAL_PASSWORD_CHANGE = true", "var_name": "INITIAL_PASSWORD_CHANGE"}, {"original_string": "private static final Integer PASSWORD_HISTORY_SIZE = 12;", "modifier": "private static final", "type": "Integer", "declarator": "PASSWORD_HISTORY_SIZE = 12", "var_name": "PASSWORD_HISTORY_SIZE"}, {"original_string": "private static final boolean ENABLE_RFC7613_USERCASE_MAPPED_PROFILE = true;", "modifier": "private static final", "type": "boolean", "declarator": "ENABLE_RFC7613_USERCASE_MAPPED_PROFILE = true", "var_name": "ENABLE_RFC7613_USERCASE_MAPPED_PROFILE"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/UserConfigurationImplTest.java"}, "test_case": {"identifier": "testGetConflictHandlers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetConflictHandlers() {\n        UserConfigurationImpl configuration = new UserConfigurationImpl();\n\n        List<ThreeWayConflictHandler> conflictHandlers = configuration.getConflictHandlers();\n        assertEquals(1, conflictHandlers.size());\n        assertTrue(conflictHandlers.get(0) instanceof RepMembersConflictHandler);\n    }", "signature": "void testGetConflictHandlers()", "full_signature": "@Test public void testGetConflictHandlers()", "class_method_signature": "UserConfigurationImplTest.testGetConflictHandlers()", "testcase": true, "constructor": false, "invocations": ["getConflictHandlers", "assertEquals", "size", "assertTrue", "get"]}, "focal_class": {"identifier": "UserConfigurationImpl", "superclass": "extends ConfigurationBase", "interfaces": "implements UserConfiguration, SecurityConfiguration", "fields": [{"original_string": "private static final UserAuthenticationFactory DEFAULT_AUTH_FACTORY = new UserAuthenticationFactoryImpl();", "modifier": "private static final", "type": "UserAuthenticationFactory", "declarator": "DEFAULT_AUTH_FACTORY = new UserAuthenticationFactoryImpl()", "var_name": "DEFAULT_AUTH_FACTORY"}, {"original_string": "private BlobAccessProvider blobAccessProvider;", "modifier": "private", "type": "BlobAccessProvider", "declarator": "blobAccessProvider", "var_name": "blobAccessProvider"}], "methods": [{"identifier": "UserConfigurationImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " UserConfigurationImpl()", "full_signature": "public  UserConfigurationImpl()", "class_method_signature": "UserConfigurationImpl.UserConfigurationImpl()", "testcase": false, "constructor": true}, {"identifier": "UserConfigurationImpl", "parameters": "(SecurityProvider securityProvider)", "modifiers": "public", "return": "", "signature": " UserConfigurationImpl(SecurityProvider securityProvider)", "full_signature": "public  UserConfigurationImpl(SecurityProvider securityProvider)", "class_method_signature": "UserConfigurationImpl.UserConfigurationImpl(SecurityProvider securityProvider)", "testcase": false, "constructor": true}, {"identifier": "getDefaultAuthenticationFactory", "parameters": "()", "modifiers": "public static", "return": "UserAuthenticationFactory", "signature": "UserAuthenticationFactory getDefaultAuthenticationFactory()", "full_signature": "public static UserAuthenticationFactory getDefaultAuthenticationFactory()", "class_method_signature": "UserConfigurationImpl.getDefaultAuthenticationFactory()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "(Configuration configuration, Map<String, Object> properties)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") @Activate // reference to @Configuration class needed for correct DS xml generation private", "return": "void", "signature": "void activate(Configuration configuration, Map<String, Object> properties)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") @Activate // reference to @Configuration class needed for correct DS xml generation private void activate(Configuration configuration, Map<String, Object> properties)", "class_method_signature": "UserConfigurationImpl.activate(Configuration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "bindBlobAccessProvider", "parameters": "(BlobAccessProvider bap)", "modifiers": "@Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC)", "return": "void", "signature": "void bindBlobAccessProvider(BlobAccessProvider bap)", "full_signature": "@Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC) void bindBlobAccessProvider(BlobAccessProvider bap)", "class_method_signature": "UserConfigurationImpl.bindBlobAccessProvider(BlobAccessProvider bap)", "testcase": false, "constructor": false}, {"identifier": "unbindBlobAccessProvider", "parameters": "(BlobAccessProvider bap)", "modifiers": "", "return": "void", "signature": "void unbindBlobAccessProvider(BlobAccessProvider bap)", "full_signature": " void unbindBlobAccessProvider(BlobAccessProvider bap)", "class_method_signature": "UserConfigurationImpl.unbindBlobAccessProvider(BlobAccessProvider bap)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "UserConfigurationImpl.getName()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ConfigurationParameters", "signature": "ConfigurationParameters getParameters()", "full_signature": "@NotNull @Override public ConfigurationParameters getParameters()", "class_method_signature": "UserConfigurationImpl.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getWorkspaceInitializer", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "WorkspaceInitializer", "signature": "WorkspaceInitializer getWorkspaceInitializer()", "full_signature": "@NotNull @Override public WorkspaceInitializer getWorkspaceInitializer()", "class_method_signature": "UserConfigurationImpl.getWorkspaceInitializer()", "testcase": false, "constructor": false}, {"identifier": "getValidators", "parameters": "(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "modifiers": "@NotNull @Override public", "return": "List<? extends ValidatorProvider>", "signature": "List<? extends ValidatorProvider> getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "full_signature": "@NotNull @Override public List<? extends ValidatorProvider> getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "class_method_signature": "UserConfigurationImpl.getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "testcase": false, "constructor": false}, {"identifier": "getConflictHandlers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ThreeWayConflictHandler>", "signature": "List<ThreeWayConflictHandler> getConflictHandlers()", "full_signature": "@NotNull @Override public List<ThreeWayConflictHandler> getConflictHandlers()", "class_method_signature": "UserConfigurationImpl.getConflictHandlers()", "testcase": false, "constructor": false}, {"identifier": "getProtectedItemImporters", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ProtectedItemImporter>", "signature": "List<ProtectedItemImporter> getProtectedItemImporters()", "full_signature": "@NotNull @Override public List<ProtectedItemImporter> getProtectedItemImporters()", "class_method_signature": "UserConfigurationImpl.getProtectedItemImporters()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Context", "signature": "Context getContext()", "full_signature": "@NotNull @Override public Context getContext()", "class_method_signature": "UserConfigurationImpl.getContext()", "testcase": false, "constructor": false}, {"identifier": "getUserManager", "parameters": "(Root root, NamePathMapper namePathMapper)", "modifiers": "@NotNull @Override public", "return": "UserManager", "signature": "UserManager getUserManager(Root root, NamePathMapper namePathMapper)", "full_signature": "@NotNull @Override public UserManager getUserManager(Root root, NamePathMapper namePathMapper)", "class_method_signature": "UserConfigurationImpl.getUserManager(Root root, NamePathMapper namePathMapper)", "testcase": false, "constructor": false}, {"identifier": "getUserPrincipalProvider", "parameters": "(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "modifiers": "@Nullable @Override public", "return": "PrincipalProvider", "signature": "PrincipalProvider getUserPrincipalProvider(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "full_signature": "@Nullable @Override public PrincipalProvider getUserPrincipalProvider(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "class_method_signature": "UserConfigurationImpl.getUserPrincipalProvider(@NotNull Root root, @NotNull NamePathMapper namePathMapper)", "testcase": false, "constructor": false}, {"identifier": "getBlobAccessProvider", "parameters": "()", "modifiers": "@NotNull private", "return": "BlobAccessProvider", "signature": "BlobAccessProvider getBlobAccessProvider()", "full_signature": "@NotNull private BlobAccessProvider getBlobAccessProvider()", "class_method_signature": "UserConfigurationImpl.getBlobAccessProvider()", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserConfigurationImpl.java"}, "focal_method": {"identifier": "getConflictHandlers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ThreeWayConflictHandler>", "body": "@NotNull\n    @Override\n    public List<ThreeWayConflictHandler> getConflictHandlers() {\n        return ImmutableList.of(new RepMembersConflictHandler());\n    }", "signature": "List<ThreeWayConflictHandler> getConflictHandlers()", "full_signature": "@NotNull @Override public List<ThreeWayConflictHandler> getConflictHandlers()", "class_method_signature": "UserConfigurationImpl.getConflictHandlers()", "testcase": false, "constructor": false, "invocations": ["of"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}