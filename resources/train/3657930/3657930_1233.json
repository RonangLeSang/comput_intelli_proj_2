{"test_class": {"identifier": "NodeTypePatternTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private final Set<String> ntNames = ImmutableSet.of(JcrConstants.NT_UNSTRUCTURED, JcrConstants.NT_FOLDER);", "modifier": "private final", "type": "Set<String>", "declarator": "ntNames = ImmutableSet.of(JcrConstants.NT_UNSTRUCTURED, JcrConstants.NT_FOLDER)", "var_name": "ntNames"}, {"original_string": "private final NodeTypePattern pattern = new NodeTypePattern(ntNames);", "modifier": "private final", "type": "NodeTypePattern", "declarator": "pattern = new NodeTypePattern(ntNames)", "var_name": "pattern"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/restriction/NodeTypePatternTest.java"}, "test_case": {"identifier": "testMatchesPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatchesPath() {\n        List<String> notMatching = ImmutableList.of(\"/\", \"/a\", \"/b\", \"/c\", \"/d/e/a\", \"/a/b/c/d/b\", \"/test/c\", \"/d\", \"/b/d\", \"/d/e/f\", \"/c/b/abc\");\n        for (String p : notMatching) {\n            assertFalse(pattern.matches(p));\n        }\n    }", "signature": "void testMatchesPath()", "full_signature": "@Test public void testMatchesPath()", "class_method_signature": "NodeTypePatternTest.testMatchesPath()", "testcase": true, "constructor": false, "invocations": ["of", "assertFalse", "matches"]}, "focal_class": {"identifier": "NodeTypePattern", "superclass": "", "interfaces": "implements RestrictionPattern", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(NodeTypePattern.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NodeTypePattern.class)", "var_name": "log"}, {"original_string": "private final Set<String> nodeTypeNames;", "modifier": "private final", "type": "Set<String>", "declarator": "nodeTypeNames", "var_name": "nodeTypeNames"}], "methods": [{"identifier": "NodeTypePattern", "parameters": "(@NotNull Iterable<String> nodeTypeNames)", "modifiers": "", "return": "", "signature": " NodeTypePattern(@NotNull Iterable<String> nodeTypeNames)", "full_signature": "  NodeTypePattern(@NotNull Iterable<String> nodeTypeNames)", "class_method_signature": "NodeTypePattern.NodeTypePattern(@NotNull Iterable<String> nodeTypeNames)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(@NotNull Tree tree, @Nullable PropertyState property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(@NotNull Tree tree, @Nullable PropertyState property)", "full_signature": "@Override public boolean matches(@NotNull Tree tree, @Nullable PropertyState property)", "class_method_signature": "NodeTypePattern.matches(@NotNull Tree tree, @Nullable PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(@NotNull String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(@NotNull String path)", "full_signature": "@Override public boolean matches(@NotNull String path)", "class_method_signature": "NodeTypePattern.matches(@NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches()", "full_signature": "@Override public boolean matches()", "class_method_signature": "NodeTypePattern.matches()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NodeTypePattern.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NodeTypePattern.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "NodeTypePattern.equals(Object obj)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/restriction/NodeTypePattern.java"}, "focal_method": {"identifier": "matches", "parameters": "(@NotNull Tree tree, @Nullable PropertyState property)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean matches(@NotNull Tree tree, @Nullable PropertyState property) {\n        return nodeTypeNames.contains(TreeUtil.getPrimaryTypeName(tree));\n    }", "signature": "boolean matches(@NotNull Tree tree, @Nullable PropertyState property)", "full_signature": "@Override public boolean matches(@NotNull Tree tree, @Nullable PropertyState property)", "class_method_signature": "NodeTypePattern.matches(@NotNull Tree tree, @Nullable PropertyState property)", "testcase": false, "constructor": false, "invocations": ["contains", "getPrimaryTypeName"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}