{"test_class": {"identifier": "NodeStateAnalyzerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NodeStateAnalyzerFactory factory = new NodeStateAnalyzerFactory(LuceneIndexConstants.VERSION);", "modifier": "private", "type": "NodeStateAnalyzerFactory", "declarator": "factory = new NodeStateAnalyzerFactory(LuceneIndexConstants.VERSION)", "var_name": "factory"}], "file": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/NodeStateAnalyzerFactoryTest.java"}, "test_case": {"identifier": "analyzerViaReflection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void analyzerViaReflection() throws Exception{\n        NodeBuilder nb = EMPTY_NODE.builder();\n        nb.setProperty(ANL_CLASS, TestAnalyzer.class.getName());\n\n        TestAnalyzer analyzer = (TestAnalyzer) factory.createInstance(nb.getNodeState());\n        assertNotNull(analyzer);\n        assertEquals(LuceneIndexConstants.VERSION, analyzer.matchVersion);\n\n        nb.setProperty(LuceneIndexConstants.ANL_LUCENE_MATCH_VERSION, Version.LUCENE_31.toString());\n        analyzer = (TestAnalyzer) factory.createInstance(nb.getNodeState());\n        assertEquals(\"Version field not picked from config\",Version.LUCENE_31, analyzer.matchVersion);\n\n        byte[] stopWords = newCharArraySet(\"foo\", \"bar\");\n        createFileNode(nb, LuceneIndexConstants.ANL_STOPWORDS, stopWords);\n        analyzer = (TestAnalyzer) factory.createInstance(nb.getNodeState());\n\n        assertTrue(\"Configured stopword set not used\",analyzer.getStopwordSet().contains(\"foo\"));\n    }", "signature": "void analyzerViaReflection()", "full_signature": "@Test public void analyzerViaReflection()", "class_method_signature": "NodeStateAnalyzerFactoryTest.analyzerViaReflection()", "testcase": true, "constructor": false, "invocations": ["builder", "setProperty", "getName", "createInstance", "getNodeState", "assertNotNull", "assertEquals", "setProperty", "toString", "createInstance", "getNodeState", "assertEquals", "newCharArraySet", "createFileNode", "createInstance", "getNodeState", "assertTrue", "contains", "getStopwordSet"]}, "focal_class": {"identifier": "NodeStateAnalyzerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AtomicBoolean versionWarningAlreadyLogged = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "versionWarningAlreadyLogged = new AtomicBoolean(false)", "var_name": "versionWarningAlreadyLogged"}, {"original_string": "private static final Set<String> IGNORE_PROP_NAMES = ImmutableSet.of(\n            LuceneIndexConstants.ANL_CLASS,\n            LuceneIndexConstants.ANL_NAME,\n            JcrConstants.JCR_PRIMARYTYPE\n    );", "modifier": "private static final", "type": "Set<String>", "declarator": "IGNORE_PROP_NAMES = ImmutableSet.of(\n            LuceneIndexConstants.ANL_CLASS,\n            LuceneIndexConstants.ANL_NAME,\n            JcrConstants.JCR_PRIMARYTYPE\n    )", "var_name": "IGNORE_PROP_NAMES"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(NodeStateAnalyzerFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NodeStateAnalyzerFactory.class)", "var_name": "log"}, {"original_string": "private final ResourceLoader defaultLoader;", "modifier": "private final", "type": "ResourceLoader", "declarator": "defaultLoader", "var_name": "defaultLoader"}, {"original_string": "private final Version defaultVersion;", "modifier": "private final", "type": "Version", "declarator": "defaultVersion", "var_name": "defaultVersion"}], "methods": [{"identifier": "NodeStateAnalyzerFactory", "parameters": "(Version defaultVersion)", "modifiers": "", "return": "", "signature": " NodeStateAnalyzerFactory(Version defaultVersion)", "full_signature": "  NodeStateAnalyzerFactory(Version defaultVersion)", "class_method_signature": "NodeStateAnalyzerFactory.NodeStateAnalyzerFactory(Version defaultVersion)", "testcase": false, "constructor": true}, {"identifier": "NodeStateAnalyzerFactory", "parameters": "(ResourceLoader defaultLoader, Version defaultVersion)", "modifiers": "", "return": "", "signature": " NodeStateAnalyzerFactory(ResourceLoader defaultLoader, Version defaultVersion)", "full_signature": "  NodeStateAnalyzerFactory(ResourceLoader defaultLoader, Version defaultVersion)", "class_method_signature": "NodeStateAnalyzerFactory.NodeStateAnalyzerFactory(ResourceLoader defaultLoader, Version defaultVersion)", "testcase": false, "constructor": true}, {"identifier": "createInstance", "parameters": "(NodeState state)", "modifiers": "public", "return": "Analyzer", "signature": "Analyzer createInstance(NodeState state)", "full_signature": "public Analyzer createInstance(NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.createInstance(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "composeAnalyzer", "parameters": "(NodeState state)", "modifiers": "private", "return": "Analyzer", "signature": "Analyzer composeAnalyzer(NodeState state)", "full_signature": "private Analyzer composeAnalyzer(NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.composeAnalyzer(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "loadTokenFilterFactories", "parameters": "(NodeState tokenFiltersState)", "modifiers": "private", "return": "TokenFilterFactory[]", "signature": "TokenFilterFactory[] loadTokenFilterFactories(NodeState tokenFiltersState)", "full_signature": "private TokenFilterFactory[] loadTokenFilterFactories(NodeState tokenFiltersState)", "class_method_signature": "NodeStateAnalyzerFactory.loadTokenFilterFactories(NodeState tokenFiltersState)", "testcase": false, "constructor": false}, {"identifier": "loadCharFilterFactories", "parameters": "(NodeState charFiltersState)", "modifiers": "private", "return": "CharFilterFactory[]", "signature": "CharFilterFactory[] loadCharFilterFactories(NodeState charFiltersState)", "full_signature": "private CharFilterFactory[] loadCharFilterFactories(NodeState charFiltersState)", "class_method_signature": "NodeStateAnalyzerFactory.loadCharFilterFactories(NodeState charFiltersState)", "testcase": false, "constructor": false}, {"identifier": "loadTokenizer", "parameters": "(NodeState state)", "modifiers": "private", "return": "TokenizerFactory", "signature": "TokenizerFactory loadTokenizer(NodeState state)", "full_signature": "private TokenizerFactory loadTokenizer(NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.loadTokenizer(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "createAnalyzerViaReflection", "parameters": "(NodeState state)", "modifiers": "private", "return": "Analyzer", "signature": "Analyzer createAnalyzerViaReflection(NodeState state)", "full_signature": "private Analyzer createAnalyzerViaReflection(NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.createAnalyzerViaReflection(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(AbstractAnalysisFactory o, NodeState state)", "modifiers": "private", "return": "void", "signature": "void init(AbstractAnalysisFactory o, NodeState state)", "full_signature": "private void init(AbstractAnalysisFactory o, NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.init(AbstractAnalysisFactory o, NodeState state)", "testcase": false, "constructor": false}, {"identifier": "convertNodeState", "parameters": "(NodeState state)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> convertNodeState(NodeState state)", "full_signature": " Map<String, String> convertNodeState(NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.convertNodeState(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(NodeState state)", "modifiers": "private", "return": "Version", "signature": "Version getVersion(NodeState state)", "full_signature": "private Version getVersion(NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.getVersion(NodeState state)", "testcase": false, "constructor": false}, {"identifier": "getFactoryType", "parameters": "(NodeState state, String nodeStateName)", "modifiers": "private static", "return": "String", "signature": "String getFactoryType(NodeState state, String nodeStateName)", "full_signature": "private static String getFactoryType(NodeState state, String nodeStateName)", "class_method_signature": "NodeStateAnalyzerFactory.getFactoryType(NodeState state, String nodeStateName)", "testcase": false, "constructor": false}, {"identifier": "parseLuceneVersionString", "parameters": "(final String matchVersion)", "modifiers": "@SuppressWarnings(\"deprecation\") private static", "return": "Version", "signature": "Version parseLuceneVersionString(final String matchVersion)", "full_signature": "@SuppressWarnings(\"deprecation\") private static Version parseLuceneVersionString(final String matchVersion)", "class_method_signature": "NodeStateAnalyzerFactory.parseLuceneVersionString(final String matchVersion)", "testcase": false, "constructor": false}, {"identifier": "loadStopwordSet", "parameters": "(NodeState file, String name,\n                                                Version matchVersion)", "modifiers": "private static", "return": "CharArraySet", "signature": "CharArraySet loadStopwordSet(NodeState file, String name,\n                                                Version matchVersion)", "full_signature": "private static CharArraySet loadStopwordSet(NodeState file, String name,\n                                                Version matchVersion)", "class_method_signature": "NodeStateAnalyzerFactory.loadStopwordSet(NodeState file, String name,\n                                                Version matchVersion)", "testcase": false, "constructor": false}], "file": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/NodeStateAnalyzerFactory.java"}, "focal_method": {"identifier": "createInstance", "parameters": "(NodeState state)", "modifiers": "public", "return": "Analyzer", "body": "public Analyzer createInstance(NodeState state) {\n        if (state.hasProperty(LuceneIndexConstants.ANL_CLASS)){\n            return createAnalyzerViaReflection(state);\n        }\n        return composeAnalyzer(state);\n    }", "signature": "Analyzer createInstance(NodeState state)", "full_signature": "public Analyzer createInstance(NodeState state)", "class_method_signature": "NodeStateAnalyzerFactory.createInstance(NodeState state)", "testcase": false, "constructor": false, "invocations": ["hasProperty", "createAnalyzerViaReflection", "composeAnalyzer"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}