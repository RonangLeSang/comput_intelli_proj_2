{"test_class": {"identifier": "CommitBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public DocumentMKBuilderProvider builderProvider = new DocumentMKBuilderProvider();", "modifier": "@Rule\n    public", "type": "DocumentMKBuilderProvider", "declarator": "builderProvider = new DocumentMKBuilderProvider()", "var_name": "builderProvider"}, {"original_string": "private DocumentNodeStore ns;", "modifier": "private", "type": "DocumentNodeStore", "declarator": "ns", "var_name": "ns"}], "file": "oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/CommitBuilderTest.java"}, "test_case": {"identifier": "addNodeTwice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addNodeTwice() {\n        RevisionVector baseRev = ns.getHeadRevision();\n        Path foo = Path.fromString(\"/foo\");\n        CommitBuilder builder = new CommitBuilder(ns, baseRev);\n        builder.addNode(foo);\n        try {\n            builder.addNode(foo);\n            fail(\"Must fail with DocumentStoreException\");\n        } catch (DocumentStoreException e) {\n            assertThat(e.getMessage(), containsString(\"already added\"));\n        }\n    }", "signature": "void addNodeTwice()", "full_signature": "@Test public void addNodeTwice()", "class_method_signature": "CommitBuilderTest.addNodeTwice()", "testcase": true, "constructor": false, "invocations": ["getHeadRevision", "fromString", "addNode", "addNode", "fail", "assertThat", "getMessage", "containsString"]}, "focal_class": {"identifier": "CommitBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Revision PSEUDO_COMMIT_REVISION = new Revision(Long.MIN_VALUE, 0, 0);", "modifier": "static final", "type": "Revision", "declarator": "PSEUDO_COMMIT_REVISION = new Revision(Long.MIN_VALUE, 0, 0)", "var_name": "PSEUDO_COMMIT_REVISION"}, {"original_string": "private final DocumentNodeStore nodeStore;", "modifier": "private final", "type": "DocumentNodeStore", "declarator": "nodeStore", "var_name": "nodeStore"}, {"original_string": "private final Revision revision;", "modifier": "private final", "type": "Revision", "declarator": "revision", "var_name": "revision"}, {"original_string": "private final RevisionVector baseRevision;", "modifier": "private final", "type": "RevisionVector", "declarator": "baseRevision", "var_name": "baseRevision"}, {"original_string": "private RevisionVector startRevisions = new RevisionVector();", "modifier": "private", "type": "RevisionVector", "declarator": "startRevisions = new RevisionVector()", "var_name": "startRevisions"}, {"original_string": "private final Map<Path, UpdateOp> operations = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<Path, UpdateOp>", "declarator": "operations = new LinkedHashMap<>()", "var_name": "operations"}, {"original_string": "private final Set<Path> addedNodes = new HashSet<>();", "modifier": "private final", "type": "Set<Path>", "declarator": "addedNodes = new HashSet<>()", "var_name": "addedNodes"}, {"original_string": "private final Set<Path> removedNodes = new HashSet<>();", "modifier": "private final", "type": "Set<Path>", "declarator": "removedNodes = new HashSet<>()", "var_name": "removedNodes"}, {"original_string": "private final Set<Path> nodesWithBinaries = new HashSet<>();", "modifier": "private final", "type": "Set<Path>", "declarator": "nodesWithBinaries = new HashSet<>()", "var_name": "nodesWithBinaries"}, {"original_string": "private final Map<Path, Path> bundledNodes = new HashMap<>();", "modifier": "private final", "type": "Map<Path, Path>", "declarator": "bundledNodes = new HashMap<>()", "var_name": "bundledNodes"}], "methods": [{"identifier": "CommitBuilder", "parameters": "(@NotNull DocumentNodeStore nodeStore,\n                  @Nullable RevisionVector baseRevision)", "modifiers": "", "return": "", "signature": " CommitBuilder(@NotNull DocumentNodeStore nodeStore,\n                  @Nullable RevisionVector baseRevision)", "full_signature": "  CommitBuilder(@NotNull DocumentNodeStore nodeStore,\n                  @Nullable RevisionVector baseRevision)", "class_method_signature": "CommitBuilder.CommitBuilder(@NotNull DocumentNodeStore nodeStore,\n                  @Nullable RevisionVector baseRevision)", "testcase": false, "constructor": true}, {"identifier": "CommitBuilder", "parameters": "(@NotNull DocumentNodeStore nodeStore,\n                  @NotNull Revision revision,\n                  @Nullable RevisionVector baseRevision)", "modifiers": "", "return": "", "signature": " CommitBuilder(@NotNull DocumentNodeStore nodeStore,\n                  @NotNull Revision revision,\n                  @Nullable RevisionVector baseRevision)", "full_signature": "  CommitBuilder(@NotNull DocumentNodeStore nodeStore,\n                  @NotNull Revision revision,\n                  @Nullable RevisionVector baseRevision)", "class_method_signature": "CommitBuilder.CommitBuilder(@NotNull DocumentNodeStore nodeStore,\n                  @NotNull Revision revision,\n                  @Nullable RevisionVector baseRevision)", "testcase": false, "constructor": true}, {"identifier": "getRevision", "parameters": "()", "modifiers": "@NotNull", "return": "Revision", "signature": "Revision getRevision()", "full_signature": "@NotNull Revision getRevision()", "class_method_signature": "CommitBuilder.getRevision()", "testcase": false, "constructor": false}, {"identifier": "getBaseRevision", "parameters": "()", "modifiers": "@Nullable", "return": "RevisionVector", "signature": "RevisionVector getBaseRevision()", "full_signature": "@Nullable RevisionVector getBaseRevision()", "class_method_signature": "CommitBuilder.getBaseRevision()", "testcase": false, "constructor": false}, {"identifier": "addNode", "parameters": "(@NotNull Path path)", "modifiers": "@NotNull", "return": "CommitBuilder", "signature": "CommitBuilder addNode(@NotNull Path path)", "full_signature": "@NotNull CommitBuilder addNode(@NotNull Path path)", "class_method_signature": "CommitBuilder.addNode(@NotNull Path path)", "testcase": false, "constructor": false}, {"identifier": "addNode", "parameters": "(@NotNull DocumentNodeState node)", "modifiers": "@NotNull", "return": "CommitBuilder", "signature": "CommitBuilder addNode(@NotNull DocumentNodeState node)", "full_signature": "@NotNull CommitBuilder addNode(@NotNull DocumentNodeState node)", "class_method_signature": "CommitBuilder.addNode(@NotNull DocumentNodeState node)", "testcase": false, "constructor": false}, {"identifier": "addBundledNode", "parameters": "(@NotNull Path path,\n                                 @NotNull Path bundlingRootPath)", "modifiers": "@NotNull", "return": "CommitBuilder", "signature": "CommitBuilder addBundledNode(@NotNull Path path,\n                                 @NotNull Path bundlingRootPath)", "full_signature": "@NotNull CommitBuilder addBundledNode(@NotNull Path path,\n                                 @NotNull Path bundlingRootPath)", "class_method_signature": "CommitBuilder.addBundledNode(@NotNull Path path,\n                                 @NotNull Path bundlingRootPath)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(@NotNull Path path,\n                             @NotNull NodeState state)", "modifiers": "@NotNull", "return": "CommitBuilder", "signature": "CommitBuilder removeNode(@NotNull Path path,\n                             @NotNull NodeState state)", "full_signature": "@NotNull CommitBuilder removeNode(@NotNull Path path,\n                             @NotNull NodeState state)", "class_method_signature": "CommitBuilder.removeNode(@NotNull Path path,\n                             @NotNull NodeState state)", "testcase": false, "constructor": false}, {"identifier": "updateProperty", "parameters": "(@NotNull Path path,\n                                 @NotNull String propertyName,\n                                 @Nullable String value)", "modifiers": "@NotNull", "return": "CommitBuilder", "signature": "CommitBuilder updateProperty(@NotNull Path path,\n                                 @NotNull String propertyName,\n                                 @Nullable String value)", "full_signature": "@NotNull CommitBuilder updateProperty(@NotNull Path path,\n                                 @NotNull String propertyName,\n                                 @Nullable String value)", "class_method_signature": "CommitBuilder.updateProperty(@NotNull Path path,\n                                 @NotNull String propertyName,\n                                 @Nullable String value)", "testcase": false, "constructor": false}, {"identifier": "markNodeHavingBinary", "parameters": "(@NotNull Path path)", "modifiers": "@NotNull", "return": "CommitBuilder", "signature": "CommitBuilder markNodeHavingBinary(@NotNull Path path)", "full_signature": "@NotNull CommitBuilder markNodeHavingBinary(@NotNull Path path)", "class_method_signature": "CommitBuilder.markNodeHavingBinary(@NotNull Path path)", "testcase": false, "constructor": false}, {"identifier": "withStartRevisions", "parameters": "(@NotNull RevisionVector startRevisions)", "modifiers": "@NotNull", "return": "CommitBuilder", "signature": "CommitBuilder withStartRevisions(@NotNull RevisionVector startRevisions)", "full_signature": "@NotNull CommitBuilder withStartRevisions(@NotNull RevisionVector startRevisions)", "class_method_signature": "CommitBuilder.withStartRevisions(@NotNull RevisionVector startRevisions)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "@NotNull", "return": "Commit", "signature": "Commit build()", "full_signature": "@NotNull Commit build()", "class_method_signature": "CommitBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(@NotNull Revision revision)", "modifiers": "@NotNull", "return": "Commit", "signature": "Commit build(@NotNull Revision revision)", "full_signature": "@NotNull Commit build(@NotNull Revision revision)", "class_method_signature": "CommitBuilder.build(@NotNull Revision revision)", "testcase": false, "constructor": false}, {"identifier": "getNumOperations", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumOperations()", "full_signature": " int getNumOperations()", "class_method_signature": "CommitBuilder.getNumOperations()", "testcase": false, "constructor": false}, {"identifier": "getUpdateOperationForNode", "parameters": "(Path path)", "modifiers": "private", "return": "UpdateOp", "signature": "UpdateOp getUpdateOperationForNode(Path path)", "full_signature": "private UpdateOp getUpdateOperationForNode(Path path)", "class_method_signature": "CommitBuilder.getUpdateOperationForNode(Path path)", "testcase": false, "constructor": false}, {"identifier": "createUpdateOp", "parameters": "(Path path,\n                                           Revision revision,\n                                           boolean isBranch)", "modifiers": "private static", "return": "UpdateOp", "signature": "UpdateOp createUpdateOp(Path path,\n                                           Revision revision,\n                                           boolean isBranch)", "full_signature": "private static UpdateOp createUpdateOp(Path path,\n                                           Revision revision,\n                                           boolean isBranch)", "class_method_signature": "CommitBuilder.createUpdateOp(Path path,\n                                           Revision revision,\n                                           boolean isBranch)", "testcase": false, "constructor": false}, {"identifier": "isBranchCommit", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isBranchCommit()", "full_signature": "private boolean isBranchCommit()", "class_method_signature": "CommitBuilder.isBranchCommit()", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(UpdateOp up, Revision from, Revision to)", "modifiers": "private static", "return": "UpdateOp", "signature": "UpdateOp rewrite(UpdateOp up, Revision from, Revision to)", "full_signature": "private static UpdateOp rewrite(UpdateOp up, Revision from, Revision to)", "class_method_signature": "CommitBuilder.rewrite(UpdateOp up, Revision from, Revision to)", "testcase": false, "constructor": false}], "file": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/CommitBuilder.java"}, "focal_method": {"identifier": "addNode", "parameters": "(@NotNull Path path)", "modifiers": "@NotNull", "return": "CommitBuilder", "body": "@NotNull\n    CommitBuilder addNode(@NotNull Path path) {\n        addNode(new DocumentNodeState(nodeStore, path, new RevisionVector(revision)));\n        return this;\n    }", "signature": "CommitBuilder addNode(@NotNull Path path)", "full_signature": "@NotNull CommitBuilder addNode(@NotNull Path path)", "class_method_signature": "CommitBuilder.addNode(@NotNull Path path)", "testcase": false, "constructor": false, "invocations": ["addNode"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}