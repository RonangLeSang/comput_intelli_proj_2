{"test_class": {"identifier": "SecurityProviderRegistrationTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [{"original_string": "private static final Map<String, Object> PROPS = ImmutableMap.<String, Object>of(SERVICE_PID, \"pid\");", "modifier": "private static final", "type": "Map<String, Object>", "declarator": "PROPS = ImmutableMap.<String, Object>of(SERVICE_PID, \"pid\")", "var_name": "PROPS"}, {"original_string": "@Rule\n    public final OsgiContext context = new OsgiContext();", "modifier": "@Rule\n    public final", "type": "OsgiContext", "declarator": "context = new OsgiContext()", "var_name": "context"}, {"original_string": "private SecurityProviderRegistration registration = new SecurityProviderRegistration();", "modifier": "private", "type": "SecurityProviderRegistration", "declarator": "registration = new SecurityProviderRegistration()", "var_name": "registration"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/internal/SecurityProviderRegistrationTest.java"}, "test_case": {"identifier": "testUnbindAggregationFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnbindAggregationFilter() {\n        registration.activate(context.bundleContext(), configWithRequiredServiceIds(\"a1\", \"a2\", \"f1\"));\n\n        AggregationFilter filter = mock(AggregationFilter.class, withSettings().defaultAnswer(invocationOnMock -> Boolean.TRUE));\n        ServiceRegistration sr = context.bundleContext().registerService(AggregationFilter.class.getName(), filter, new Hashtable(ImmutableMap.of(SERVICE_PID, \"f1\")));\n        registration.bindAggregationFilter(sr.getReference(), filter);\n\n        AggregatedPermissionProvider pp = mock(AggregatedPermissionProvider.class);\n        AuthorizationConfiguration ac1 = mock(AuthorizationConfiguration.class);\n        AuthorizationConfiguration ac2 = mock(AuthorizationConfiguration.class);\n        for (AuthorizationConfiguration ac : new AuthorizationConfiguration[]{ac1, ac2}) {\n            when(ac.getPermissionProvider(any(Root.class), anyString(), any(Set.class))).thenReturn(pp);\n            when(ac.getParameters()).thenReturn(ConfigurationParameters.EMPTY);\n            when(ac.getContext()).thenReturn(Context.DEFAULT);\n        }\n\n        registration.bindAuthorizationConfiguration(ac1, new Hashtable(ImmutableMap.of(SERVICE_PID, \"a1\")));\n        registration.bindAuthorizationConfiguration(ac2, new Hashtable(ImmutableMap.of(SERVICE_PID, \"a2\")));\n\n        AuthorizationConfiguration ac = context.getService(SecurityProvider.class).getConfiguration(AuthorizationConfiguration.class);\n        assertTrue(ac instanceof CompositeAuthorizationConfiguration);\n\n        PermissionProvider permissionProvider = ac.getPermissionProvider(root, adminSession.getWorkspaceName(), ImmutableSet.of());\n        assertSame(pp, permissionProvider);\n        verify(filter, times(1)).stop(pp, ImmutableSet.of());\n\n        registration.unbindAggregationFilter(sr.getReference(), filter);\n        assertNull(context.getService(SecurityProvider.class));\n\n        registration.modified(configWithRequiredServiceIds(\"a1\", \"a2\"));\n\n        context.getService(SecurityProvider.class).getConfiguration(AuthorizationConfiguration.class).getPermissionProvider(root, adminSession.getWorkspaceName(), ImmutableSet.of());\n        // since unbind was called on filter -> no additional calls\n        verify(filter, times(1)).stop(pp, ImmutableSet.of());\n    }", "signature": "void testUnbindAggregationFilter()", "full_signature": "@Test public void testUnbindAggregationFilter()", "class_method_signature": "SecurityProviderRegistrationTest.testUnbindAggregationFilter()", "testcase": true, "constructor": false, "invocations": ["activate", "bundleContext", "configWithRequiredServiceIds", "mock", "defaultAnswer", "withSettings", "registerService", "bundleContext", "getName", "of", "bindAggregationFilter", "getReference", "mock", "mock", "mock", "thenReturn", "when", "getPermissionProvider", "any", "anyString", "any", "thenReturn", "when", "getParameters", "thenReturn", "when", "getContext", "bindAuthorizationConfiguration", "of", "bindAuthorizationConfiguration", "of", "getConfiguration", "getService", "assertTrue", "getPermissionProvider", "getWorkspaceName", "of", "assertSame", "stop", "verify", "times", "of", "unbindAggregationFilter", "getReference", "assertNull", "getService", "modified", "configWithRequiredServiceIds", "getPermissionProvider", "getConfiguration", "getService", "getWorkspaceName", "of", "stop", "verify", "times", "of"]}, "focal_class": {"identifier": "SecurityProviderRegistration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SecurityProviderRegistration.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SecurityProviderRegistration.class)", "var_name": "log"}, {"original_string": "private AuthenticationConfiguration authenticationConfiguration;", "modifier": "private", "type": "AuthenticationConfiguration", "declarator": "authenticationConfiguration", "var_name": "authenticationConfiguration"}, {"original_string": "private PrivilegeConfiguration privilegeConfiguration;", "modifier": "private", "type": "PrivilegeConfiguration", "declarator": "privilegeConfiguration", "var_name": "privilegeConfiguration"}, {"original_string": "private UserConfiguration userConfiguration;", "modifier": "private", "type": "UserConfiguration", "declarator": "userConfiguration", "var_name": "userConfiguration"}, {"original_string": "private BundleContext context;", "modifier": "private", "type": "BundleContext", "declarator": "context", "var_name": "context"}, {"original_string": "private ServiceRegistration registration;", "modifier": "private", "type": "ServiceRegistration", "declarator": "registration", "var_name": "registration"}, {"original_string": "private boolean registering;", "modifier": "private", "type": "boolean", "declarator": "registering", "var_name": "registering"}, {"original_string": "private final Preconditions preconditions = new Preconditions();", "modifier": "private final", "type": "Preconditions", "declarator": "preconditions = new Preconditions()", "var_name": "preconditions"}, {"original_string": "private final CompositeAuthorizationConfiguration authorizationConfiguration = new CompositeAuthorizationConfiguration();", "modifier": "private final", "type": "CompositeAuthorizationConfiguration", "declarator": "authorizationConfiguration = new CompositeAuthorizationConfiguration()", "var_name": "authorizationConfiguration"}, {"original_string": "private final CompositePrincipalConfiguration principalConfiguration = new CompositePrincipalConfiguration();", "modifier": "private final", "type": "CompositePrincipalConfiguration", "declarator": "principalConfiguration = new CompositePrincipalConfiguration()", "var_name": "principalConfiguration"}, {"original_string": "private final CompositeTokenConfiguration tokenConfiguration = new CompositeTokenConfiguration();", "modifier": "private final", "type": "CompositeTokenConfiguration", "declarator": "tokenConfiguration = new CompositeTokenConfiguration()", "var_name": "tokenConfiguration"}, {"original_string": "private final SortedMap<ServiceReference, AuthorizableNodeName> authorizableNodeNames = Collections.synchronizedSortedMap(new TreeMap<>());", "modifier": "private final", "type": "SortedMap<ServiceReference, AuthorizableNodeName>", "declarator": "authorizableNodeNames = Collections.synchronizedSortedMap(new TreeMap<>())", "var_name": "authorizableNodeNames"}, {"original_string": "private final SortedMap<ServiceReference, AuthorizableActionProvider> authorizableActionProviders = Collections.synchronizedSortedMap(new TreeMap<>());", "modifier": "private final", "type": "SortedMap<ServiceReference, AuthorizableActionProvider>", "declarator": "authorizableActionProviders = Collections.synchronizedSortedMap(new TreeMap<>())", "var_name": "authorizableActionProviders"}, {"original_string": "private final SortedMap<ServiceReference, RestrictionProvider> restrictionProviders = Collections.synchronizedSortedMap(new TreeMap<>());", "modifier": "private final", "type": "SortedMap<ServiceReference, RestrictionProvider>", "declarator": "restrictionProviders = Collections.synchronizedSortedMap(new TreeMap<>())", "var_name": "restrictionProviders"}, {"original_string": "private final SortedMap<ServiceReference, UserAuthenticationFactory> userAuthenticationFactories = Collections.synchronizedSortedMap(new TreeMap<>());", "modifier": "private final", "type": "SortedMap<ServiceReference, UserAuthenticationFactory>", "declarator": "userAuthenticationFactories = Collections.synchronizedSortedMap(new TreeMap<>())", "var_name": "userAuthenticationFactories"}, {"original_string": "private final SortedMap<ServiceReference, AggregationFilter> aggregationFilters = Collections.synchronizedSortedMap(new TreeMap<>());", "modifier": "private final", "type": "SortedMap<ServiceReference, AggregationFilter>", "declarator": "aggregationFilters = Collections.synchronizedSortedMap(new TreeMap<>())", "var_name": "aggregationFilters"}, {"original_string": "private RootProvider rootProvider;", "modifier": "private", "type": "RootProvider", "declarator": "rootProvider", "var_name": "rootProvider"}, {"original_string": "private TreeProvider treeProvider;", "modifier": "private", "type": "TreeProvider", "declarator": "treeProvider", "var_name": "treeProvider"}, {"original_string": "@Reference\n    private StatisticsProvider statisticsProvider = StatisticsProvider.NOOP;", "modifier": "@Reference\n    private", "type": "StatisticsProvider", "declarator": "statisticsProvider = StatisticsProvider.NOOP", "var_name": "statisticsProvider"}, {"original_string": "private Closer closer;", "modifier": "private", "type": "Closer", "declarator": "closer", "var_name": "closer"}], "methods": [{"identifier": "activate", "parameters": "(BundleContext context, Configuration configuration)", "modifiers": "@Activate public", "return": "void", "signature": "void activate(BundleContext context, Configuration configuration)", "full_signature": "@Activate public void activate(BundleContext context, Configuration configuration)", "class_method_signature": "SecurityProviderRegistration.activate(BundleContext context, Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Configuration configuration)", "modifiers": "@Modified public", "return": "void", "signature": "void modified(Configuration configuration)", "full_signature": "@Modified public void modified(Configuration configuration)", "class_method_signature": "SecurityProviderRegistration.modified(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Deactivate public", "return": "void", "signature": "void deactivate()", "full_signature": "@Deactivate public void deactivate()", "class_method_signature": "SecurityProviderRegistration.deactivate()", "testcase": false, "constructor": false}, {"identifier": "bindAuthenticationConfiguration", "parameters": "(AuthenticationConfiguration authenticationConfiguration)", "modifiers": "@Reference(name = \"authenticationConfiguration\") public", "return": "void", "signature": "void bindAuthenticationConfiguration(AuthenticationConfiguration authenticationConfiguration)", "full_signature": "@Reference(name = \"authenticationConfiguration\") public void bindAuthenticationConfiguration(AuthenticationConfiguration authenticationConfiguration)", "class_method_signature": "SecurityProviderRegistration.bindAuthenticationConfiguration(AuthenticationConfiguration authenticationConfiguration)", "testcase": false, "constructor": false}, {"identifier": "unbindAuthenticationConfiguration", "parameters": "(AuthenticationConfiguration authenticationConfiguration)", "modifiers": "public", "return": "void", "signature": "void unbindAuthenticationConfiguration(AuthenticationConfiguration authenticationConfiguration)", "full_signature": "public void unbindAuthenticationConfiguration(AuthenticationConfiguration authenticationConfiguration)", "class_method_signature": "SecurityProviderRegistration.unbindAuthenticationConfiguration(AuthenticationConfiguration authenticationConfiguration)", "testcase": false, "constructor": false}, {"identifier": "bindPrivilegeConfiguration", "parameters": "(PrivilegeConfiguration privilegeConfiguration)", "modifiers": "@Reference(name = \"privilegeConfiguration\") public", "return": "void", "signature": "void bindPrivilegeConfiguration(PrivilegeConfiguration privilegeConfiguration)", "full_signature": "@Reference(name = \"privilegeConfiguration\") public void bindPrivilegeConfiguration(PrivilegeConfiguration privilegeConfiguration)", "class_method_signature": "SecurityProviderRegistration.bindPrivilegeConfiguration(PrivilegeConfiguration privilegeConfiguration)", "testcase": false, "constructor": false}, {"identifier": "unbindPrivilegeConfiguration", "parameters": "(PrivilegeConfiguration privilegeConfiguration)", "modifiers": "public", "return": "void", "signature": "void unbindPrivilegeConfiguration(PrivilegeConfiguration privilegeConfiguration)", "full_signature": "public void unbindPrivilegeConfiguration(PrivilegeConfiguration privilegeConfiguration)", "class_method_signature": "SecurityProviderRegistration.unbindPrivilegeConfiguration(PrivilegeConfiguration privilegeConfiguration)", "testcase": false, "constructor": false}, {"identifier": "bindUserConfiguration", "parameters": "(UserConfiguration userConfiguration)", "modifiers": "@Reference(name = \"userConfiguration\") public", "return": "void", "signature": "void bindUserConfiguration(UserConfiguration userConfiguration)", "full_signature": "@Reference(name = \"userConfiguration\") public void bindUserConfiguration(UserConfiguration userConfiguration)", "class_method_signature": "SecurityProviderRegistration.bindUserConfiguration(UserConfiguration userConfiguration)", "testcase": false, "constructor": false}, {"identifier": "unbindUserConfiguration", "parameters": "(UserConfiguration userConfiguration)", "modifiers": "public", "return": "void", "signature": "void unbindUserConfiguration(UserConfiguration userConfiguration)", "full_signature": "public void unbindUserConfiguration(UserConfiguration userConfiguration)", "class_method_signature": "SecurityProviderRegistration.unbindUserConfiguration(UserConfiguration userConfiguration)", "testcase": false, "constructor": false}, {"identifier": "bindRootProvider", "parameters": "(RootProvider rootProvider)", "modifiers": "@Reference(name = \"rootProvider\") public", "return": "void", "signature": "void bindRootProvider(RootProvider rootProvider)", "full_signature": "@Reference(name = \"rootProvider\") public void bindRootProvider(RootProvider rootProvider)", "class_method_signature": "SecurityProviderRegistration.bindRootProvider(RootProvider rootProvider)", "testcase": false, "constructor": false}, {"identifier": "unbindRootProvider", "parameters": "(RootProvider rootProvider)", "modifiers": "public", "return": "void", "signature": "void unbindRootProvider(RootProvider rootProvider)", "full_signature": "public void unbindRootProvider(RootProvider rootProvider)", "class_method_signature": "SecurityProviderRegistration.unbindRootProvider(RootProvider rootProvider)", "testcase": false, "constructor": false}, {"identifier": "bindTreeProvider", "parameters": "(TreeProvider treeProvider)", "modifiers": "@Reference(name = \"treeProvider\") public", "return": "void", "signature": "void bindTreeProvider(TreeProvider treeProvider)", "full_signature": "@Reference(name = \"treeProvider\") public void bindTreeProvider(TreeProvider treeProvider)", "class_method_signature": "SecurityProviderRegistration.bindTreeProvider(TreeProvider treeProvider)", "testcase": false, "constructor": false}, {"identifier": "unbindTreeProvider", "parameters": "(TreeProvider treeProvider)", "modifiers": "public", "return": "void", "signature": "void unbindTreeProvider(TreeProvider treeProvider)", "full_signature": "public void unbindTreeProvider(TreeProvider treeProvider)", "class_method_signature": "SecurityProviderRegistration.unbindTreeProvider(TreeProvider treeProvider)", "testcase": false, "constructor": false}, {"identifier": "bindAuthorizationConfiguration", "parameters": "(AuthorizationConfiguration configuration, Map<String, Object> properties)", "modifiers": "@Reference( name = \"authorizationConfiguration\", service = AuthorizationConfiguration.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public", "return": "void", "signature": "void bindAuthorizationConfiguration(AuthorizationConfiguration configuration, Map<String, Object> properties)", "full_signature": "@Reference( name = \"authorizationConfiguration\", service = AuthorizationConfiguration.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public void bindAuthorizationConfiguration(AuthorizationConfiguration configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.bindAuthorizationConfiguration(AuthorizationConfiguration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "unbindAuthorizationConfiguration", "parameters": "(AuthorizationConfiguration configuration, Map<String, Object> properties)", "modifiers": "public", "return": "void", "signature": "void unbindAuthorizationConfiguration(AuthorizationConfiguration configuration, Map<String, Object> properties)", "full_signature": "public void unbindAuthorizationConfiguration(AuthorizationConfiguration configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.unbindAuthorizationConfiguration(AuthorizationConfiguration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "bindPrincipalConfiguration", "parameters": "(PrincipalConfiguration configuration, Map<String, Object> properties)", "modifiers": "@Reference( name = \"principalConfiguration\", service = PrincipalConfiguration.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public", "return": "void", "signature": "void bindPrincipalConfiguration(PrincipalConfiguration configuration, Map<String, Object> properties)", "full_signature": "@Reference( name = \"principalConfiguration\", service = PrincipalConfiguration.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public void bindPrincipalConfiguration(PrincipalConfiguration configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.bindPrincipalConfiguration(PrincipalConfiguration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "unbindPrincipalConfiguration", "parameters": "(PrincipalConfiguration configuration, Map<String, Object> properties)", "modifiers": "public", "return": "void", "signature": "void unbindPrincipalConfiguration(PrincipalConfiguration configuration, Map<String, Object> properties)", "full_signature": "public void unbindPrincipalConfiguration(PrincipalConfiguration configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.unbindPrincipalConfiguration(PrincipalConfiguration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "bindTokenConfiguration", "parameters": "(TokenConfiguration configuration, Map<String, Object> properties)", "modifiers": "@Reference( name = \"tokenConfiguration\", service = TokenConfiguration.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public", "return": "void", "signature": "void bindTokenConfiguration(TokenConfiguration configuration, Map<String, Object> properties)", "full_signature": "@Reference( name = \"tokenConfiguration\", service = TokenConfiguration.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public void bindTokenConfiguration(TokenConfiguration configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.bindTokenConfiguration(TokenConfiguration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "unbindTokenConfiguration", "parameters": "(TokenConfiguration configuration, Map<String, Object> properties)", "modifiers": "public", "return": "void", "signature": "void unbindTokenConfiguration(TokenConfiguration configuration, Map<String, Object> properties)", "full_signature": "public void unbindTokenConfiguration(TokenConfiguration configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.unbindTokenConfiguration(TokenConfiguration configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "bindConfiguration", "parameters": "(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "modifiers": "private", "return": "void", "signature": "void bindConfiguration(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "full_signature": "private void bindConfiguration(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.bindConfiguration(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "unbindConfiguration", "parameters": "(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "modifiers": "private", "return": "void", "signature": "void unbindConfiguration(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "full_signature": "private void unbindConfiguration(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.unbindConfiguration(@NotNull CompositeConfiguration<T> composite, @NotNull T configuration, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "bindAuthorizableNodeName", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "modifiers": "@Reference( name = \"authorizableNodeName\", service = AuthorizableNodeName.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public", "return": "void", "signature": "void bindAuthorizableNodeName(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "full_signature": "@Reference( name = \"authorizableNodeName\", service = AuthorizableNodeName.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public void bindAuthorizableNodeName(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "class_method_signature": "SecurityProviderRegistration.bindAuthorizableNodeName(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "testcase": false, "constructor": false}, {"identifier": "unbindAuthorizableNodeName", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "modifiers": "public", "return": "void", "signature": "void unbindAuthorizableNodeName(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "full_signature": "public void unbindAuthorizableNodeName(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "class_method_signature": "SecurityProviderRegistration.unbindAuthorizableNodeName(@NotNull ServiceReference serviceReference, @NotNull AuthorizableNodeName authorizableNodeName)", "testcase": false, "constructor": false}, {"identifier": "bindAuthorizableActionProvider", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "modifiers": "@Reference( name = \"authorizableActionProvider\", service = AuthorizableActionProvider.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public", "return": "void", "signature": "void bindAuthorizableActionProvider(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "full_signature": "@Reference( name = \"authorizableActionProvider\", service = AuthorizableActionProvider.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public void bindAuthorizableActionProvider(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "class_method_signature": "SecurityProviderRegistration.bindAuthorizableActionProvider(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "testcase": false, "constructor": false}, {"identifier": "unbindAuthorizableActionProvider", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "modifiers": "public", "return": "void", "signature": "void unbindAuthorizableActionProvider(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "full_signature": "public void unbindAuthorizableActionProvider(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "class_method_signature": "SecurityProviderRegistration.unbindAuthorizableActionProvider(@NotNull ServiceReference serviceReference, @NotNull AuthorizableActionProvider authorizableActionProvider)", "testcase": false, "constructor": false}, {"identifier": "bindRestrictionProvider", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "modifiers": "@Reference( name = \"restrictionProvider\", service = RestrictionProvider.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public", "return": "void", "signature": "void bindRestrictionProvider(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "full_signature": "@Reference( name = \"restrictionProvider\", service = RestrictionProvider.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public void bindRestrictionProvider(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "class_method_signature": "SecurityProviderRegistration.bindRestrictionProvider(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "testcase": false, "constructor": false}, {"identifier": "unbindRestrictionProvider", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "modifiers": "public", "return": "void", "signature": "void unbindRestrictionProvider(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "full_signature": "public void unbindRestrictionProvider(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "class_method_signature": "SecurityProviderRegistration.unbindRestrictionProvider(@NotNull ServiceReference serviceReference, @NotNull RestrictionProvider restrictionProvider)", "testcase": false, "constructor": false}, {"identifier": "bindUserAuthenticationFactory", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "modifiers": "@Reference( name = \"userAuthenticationFactory\", service = UserAuthenticationFactory.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public", "return": "void", "signature": "void bindUserAuthenticationFactory(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "full_signature": "@Reference( name = \"userAuthenticationFactory\", service = UserAuthenticationFactory.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC ) public void bindUserAuthenticationFactory(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "class_method_signature": "SecurityProviderRegistration.bindUserAuthenticationFactory(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "testcase": false, "constructor": false}, {"identifier": "unbindUserAuthenticationFactory", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "modifiers": "public", "return": "void", "signature": "void unbindUserAuthenticationFactory(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "full_signature": "public void unbindUserAuthenticationFactory(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "class_method_signature": "SecurityProviderRegistration.unbindUserAuthenticationFactory(@NotNull ServiceReference serviceReference, @NotNull UserAuthenticationFactory userAuthenticationFactory)", "testcase": false, "constructor": false}, {"identifier": "bindAggregationFilter", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "modifiers": "@Reference( name = \"aggregationFilters\", service = AggregationFilter.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public", "return": "void", "signature": "void bindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "full_signature": "@Reference( name = \"aggregationFilters\", service = AggregationFilter.class, cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public void bindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "class_method_signature": "SecurityProviderRegistration.bindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "testcase": false, "constructor": false}, {"identifier": "unbindAggregationFilter", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "modifiers": "public", "return": "void", "signature": "void unbindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "full_signature": "public void unbindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "class_method_signature": "SecurityProviderRegistration.unbindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "testcase": false, "constructor": false}, {"identifier": "maybeRegister", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeRegister()", "full_signature": "private void maybeRegister()", "class_method_signature": "SecurityProviderRegistration.maybeRegister()", "testcase": false, "constructor": false}, {"identifier": "maybeUnregister", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeUnregister()", "full_signature": "private void maybeUnregister()", "class_method_signature": "SecurityProviderRegistration.maybeUnregister()", "testcase": false, "constructor": false}, {"identifier": "createSecurityProvider", "parameters": "(@NotNull Whiteboard whiteboard)", "modifiers": "private", "return": "SecurityProvider", "signature": "SecurityProvider createSecurityProvider(@NotNull Whiteboard whiteboard)", "full_signature": "private SecurityProvider createSecurityProvider(@NotNull Whiteboard whiteboard)", "class_method_signature": "SecurityProviderRegistration.createSecurityProvider(@NotNull Whiteboard whiteboard)", "testcase": false, "constructor": false}, {"identifier": "createWhiteboardRestrictionProvider", "parameters": "()", "modifiers": "private", "return": "RestrictionProvider", "signature": "RestrictionProvider createWhiteboardRestrictionProvider()", "full_signature": "private RestrictionProvider createWhiteboardRestrictionProvider()", "class_method_signature": "SecurityProviderRegistration.createWhiteboardRestrictionProvider()", "testcase": false, "constructor": false}, {"identifier": "createWhiteboardAuthorizableActionProvider", "parameters": "()", "modifiers": "private", "return": "AuthorizableActionProvider", "signature": "AuthorizableActionProvider createWhiteboardAuthorizableActionProvider()", "full_signature": "private AuthorizableActionProvider createWhiteboardAuthorizableActionProvider()", "class_method_signature": "SecurityProviderRegistration.createWhiteboardAuthorizableActionProvider()", "testcase": false, "constructor": false}, {"identifier": "createWhiteboardAuthorizableNodeName", "parameters": "()", "modifiers": "private", "return": "AuthorizableNodeName", "signature": "AuthorizableNodeName createWhiteboardAuthorizableNodeName()", "full_signature": "private AuthorizableNodeName createWhiteboardAuthorizableNodeName()", "class_method_signature": "SecurityProviderRegistration.createWhiteboardAuthorizableNodeName()", "testcase": false, "constructor": false}, {"identifier": "createWhiteboardUserAuthenticationFactory", "parameters": "()", "modifiers": "private", "return": "UserAuthenticationFactory", "signature": "UserAuthenticationFactory createWhiteboardUserAuthenticationFactory()", "full_signature": "private UserAuthenticationFactory createWhiteboardUserAuthenticationFactory()", "class_method_signature": "SecurityProviderRegistration.createWhiteboardUserAuthenticationFactory()", "testcase": false, "constructor": false}, {"identifier": "createAggregationFilter", "parameters": "()", "modifiers": "private", "return": "AggregationFilter", "signature": "AggregationFilter createAggregationFilter()", "full_signature": "private AggregationFilter createAggregationFilter()", "class_method_signature": "SecurityProviderRegistration.createAggregationFilter()", "testcase": false, "constructor": false}, {"identifier": "addCandidate", "parameters": "(Map<String, Object> properties)", "modifiers": "private", "return": "void", "signature": "void addCandidate(Map<String, Object> properties)", "full_signature": "private void addCandidate(Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.addCandidate(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "addCandidate", "parameters": "(@NotNull ServiceReference serviceReference)", "modifiers": "private", "return": "void", "signature": "void addCandidate(@NotNull ServiceReference serviceReference)", "full_signature": "private void addCandidate(@NotNull ServiceReference serviceReference)", "class_method_signature": "SecurityProviderRegistration.addCandidate(@NotNull ServiceReference serviceReference)", "testcase": false, "constructor": false}, {"identifier": "removeCandidate", "parameters": "(Map<String, Object> properties)", "modifiers": "private", "return": "void", "signature": "void removeCandidate(Map<String, Object> properties)", "full_signature": "private void removeCandidate(Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.removeCandidate(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "removeCandidate", "parameters": "(@NotNull ServiceReference serviceReference)", "modifiers": "private", "return": "void", "signature": "void removeCandidate(@NotNull ServiceReference serviceReference)", "full_signature": "private void removeCandidate(@NotNull ServiceReference serviceReference)", "class_method_signature": "SecurityProviderRegistration.removeCandidate(@NotNull ServiceReference serviceReference)", "testcase": false, "constructor": false}, {"identifier": "getServicePidOrComponentName", "parameters": "(Map<String, Object> properties)", "modifiers": "private static", "return": "String", "signature": "String getServicePidOrComponentName(Map<String, Object> properties)", "full_signature": "private static String getServicePidOrComponentName(Map<String, Object> properties)", "class_method_signature": "SecurityProviderRegistration.getServicePidOrComponentName(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "getServicePidOrComponentName", "parameters": "(@NotNull ServiceReference serviceReference)", "modifiers": "private static", "return": "String", "signature": "String getServicePidOrComponentName(@NotNull ServiceReference serviceReference)", "full_signature": "private static String getServicePidOrComponentName(@NotNull ServiceReference serviceReference)", "class_method_signature": "SecurityProviderRegistration.getServicePidOrComponentName(@NotNull ServiceReference serviceReference)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/internal/SecurityProviderRegistration.java"}, "focal_method": {"identifier": "unbindAggregationFilter", "parameters": "(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "modifiers": "public", "return": "void", "body": "public void unbindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter) {\n        synchronized (this) {\n            aggregationFilters.remove(serviceReference);\n            removeCandidate(serviceReference);\n        }\n        maybeUnregister();\n    }", "signature": "void unbindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "full_signature": "public void unbindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "class_method_signature": "SecurityProviderRegistration.unbindAggregationFilter(@NotNull ServiceReference serviceReference, @NotNull AggregationFilter aggregationFilter)", "testcase": false, "constructor": false, "invocations": ["remove", "removeCandidate", "maybeUnregister"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}