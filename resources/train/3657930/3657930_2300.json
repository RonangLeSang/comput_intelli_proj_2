{"test_class": {"identifier": "DefaultSyncHandlerTest", "superclass": "extends ExternalLoginTestBase", "interfaces": "", "fields": [{"original_string": "private UserManager userManager;", "modifier": "private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "private DefaultSyncHandler syncHandler;", "modifier": "private", "type": "DefaultSyncHandler", "declarator": "syncHandler", "var_name": "syncHandler"}], "file": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DefaultSyncHandlerTest.java"}, "test_case": {"identifier": "testRequiresSyncMissingExternalIDRef", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequiresSyncMissingExternalIDRef() {\n        assertTrue(syncHandler.requiresSync(new DefaultSyncedIdentity(USER_ID, null, false, Long.MAX_VALUE)));\n    }", "signature": "void testRequiresSyncMissingExternalIDRef()", "full_signature": "@Test public void testRequiresSyncMissingExternalIDRef()", "class_method_signature": "DefaultSyncHandlerTest.testRequiresSyncMissingExternalIDRef()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "requiresSync"]}, "focal_class": {"identifier": "DefaultSyncHandler", "superclass": "", "interfaces": "implements SyncHandler", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultSyncHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultSyncHandler.class)", "var_name": "log"}, {"original_string": "private DefaultSyncConfig config;", "modifier": "private", "type": "DefaultSyncConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "DefaultSyncHandler", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "signature": " DefaultSyncHandler()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  DefaultSyncHandler()", "class_method_signature": "DefaultSyncHandler.DefaultSyncHandler()", "testcase": false, "constructor": true}, {"identifier": "DefaultSyncHandler", "parameters": "(DefaultSyncConfig config)", "modifiers": "public", "return": "", "signature": " DefaultSyncHandler(DefaultSyncConfig config)", "full_signature": "public  DefaultSyncHandler(DefaultSyncConfig config)", "class_method_signature": "DefaultSyncHandler.DefaultSyncHandler(DefaultSyncConfig config)", "testcase": false, "constructor": true}, {"identifier": "activate", "parameters": "(Map<String, Object> properties)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") @Activate private", "return": "void", "signature": "void activate(Map<String, Object> properties)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") @Activate private void activate(Map<String, Object> properties)", "class_method_signature": "DefaultSyncHandler.activate(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "DefaultSyncHandler.getName()", "testcase": false, "constructor": false}, {"identifier": "createContext", "parameters": "(@NotNull ExternalIdentityProvider idp, @NotNull UserManager userManager,\n                                     @NotNull ValueFactory valueFactory)", "modifiers": "@NotNull @Override public", "return": "SyncContext", "signature": "SyncContext createContext(@NotNull ExternalIdentityProvider idp, @NotNull UserManager userManager,\n                                     @NotNull ValueFactory valueFactory)", "full_signature": "@NotNull @Override public SyncContext createContext(@NotNull ExternalIdentityProvider idp, @NotNull UserManager userManager,\n                                     @NotNull ValueFactory valueFactory)", "class_method_signature": "DefaultSyncHandler.createContext(@NotNull ExternalIdentityProvider idp, @NotNull UserManager userManager,\n                                     @NotNull ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "findIdentity", "parameters": "(@NotNull UserManager userManager, @NotNull String id)", "modifiers": "@Override public", "return": "SyncedIdentity", "signature": "SyncedIdentity findIdentity(@NotNull UserManager userManager, @NotNull String id)", "full_signature": "@Override public SyncedIdentity findIdentity(@NotNull UserManager userManager, @NotNull String id)", "class_method_signature": "DefaultSyncHandler.findIdentity(@NotNull UserManager userManager, @NotNull String id)", "testcase": false, "constructor": false}, {"identifier": "requiresSync", "parameters": "(@NotNull SyncedIdentity identity)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean requiresSync(@NotNull SyncedIdentity identity)", "full_signature": "@Override public boolean requiresSync(@NotNull SyncedIdentity identity)", "class_method_signature": "DefaultSyncHandler.requiresSync(@NotNull SyncedIdentity identity)", "testcase": false, "constructor": false}, {"identifier": "listIdentities", "parameters": "(@NotNull UserManager userManager)", "modifiers": "@NotNull @Override public", "return": "Iterator<SyncedIdentity>", "signature": "Iterator<SyncedIdentity> listIdentities(@NotNull UserManager userManager)", "full_signature": "@NotNull @Override public Iterator<SyncedIdentity> listIdentities(@NotNull UserManager userManager)", "class_method_signature": "DefaultSyncHandler.listIdentities(@NotNull UserManager userManager)", "testcase": false, "constructor": false}], "file": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/DefaultSyncHandler.java"}, "focal_method": {"identifier": "requiresSync", "parameters": "(@NotNull SyncedIdentity identity)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean requiresSync(@NotNull SyncedIdentity identity) {\n        if (identity.getExternalIdRef() == null || identity.lastSynced() < 0) {\n            return true;\n        }\n        final long now = System.currentTimeMillis();\n        final long expirationTime = identity.isGroup()\n                ? config.group().getExpirationTime()\n                : config.user().getExpirationTime();\n        return now - identity.lastSynced() > expirationTime;\n    }", "signature": "boolean requiresSync(@NotNull SyncedIdentity identity)", "full_signature": "@Override public boolean requiresSync(@NotNull SyncedIdentity identity)", "class_method_signature": "DefaultSyncHandler.requiresSync(@NotNull SyncedIdentity identity)", "testcase": false, "constructor": false, "invocations": ["getExternalIdRef", "lastSynced", "currentTimeMillis", "isGroup", "getExpirationTime", "group", "getExpirationTime", "user", "lastSynced"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}