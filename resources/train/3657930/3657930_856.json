{"test_class": {"identifier": "UserContextTest", "superclass": "", "interfaces": "implements UserConstants", "fields": [{"original_string": "private final Context ctx = UserContext.getInstance();", "modifier": "private final", "type": "Context", "declarator": "ctx = UserContext.getInstance()", "var_name": "ctx"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/user/UserContextTest.java"}, "test_case": {"identifier": "testDefinesMemberProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefinesMemberProperty() {\n        for (String propName : new String[] {\"any\", \"prop\"}) {\n            PropertyState property = PropertyStates.createProperty(propName, \"value\");\n\n            assertTrue(ctx.definesProperty(mockTree(\"nodeName\", NT_REP_MEMBERS), property));\n\n            assertFalse(ctx.definesProperty(mockTree(\"nodeName\", NT_REP_GROUP), property));\n            assertFalse(ctx.definesProperty(mockTree(\"nodeName\", NT_REP_USER), property));\n            assertFalse(ctx.definesProperty(mockTree(\"nodeName\", NT_REP_SYSTEM_USER), property));\n        }\n    }", "signature": "void testDefinesMemberProperty()", "full_signature": "@Test public void testDefinesMemberProperty()", "class_method_signature": "UserContextTest.testDefinesMemberProperty()", "testcase": true, "constructor": false, "invocations": ["createProperty", "assertTrue", "definesProperty", "mockTree", "assertFalse", "definesProperty", "mockTree", "assertFalse", "definesProperty", "mockTree", "assertFalse", "definesProperty", "mockTree"]}, "focal_class": {"identifier": "UserContext", "superclass": "", "interfaces": "implements Context, UserConstants", "fields": [{"original_string": "private static final Context INSTANCE = new UserContext();", "modifier": "private static final", "type": "Context", "declarator": "INSTANCE = new UserContext()", "var_name": "INSTANCE"}], "methods": [{"identifier": "UserContext", "parameters": "()", "modifiers": "private", "return": "", "signature": " UserContext()", "full_signature": "private  UserContext()", "class_method_signature": "UserContext.UserContext()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "static", "return": "Context", "signature": "Context getInstance()", "full_signature": "static Context getInstance()", "class_method_signature": "UserContext.getInstance()", "testcase": false, "constructor": false}, {"identifier": "definesProperty", "parameters": "(@NotNull Tree parent, @NotNull PropertyState property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean definesProperty(@NotNull Tree parent, @NotNull PropertyState property)", "full_signature": "@Override public boolean definesProperty(@NotNull Tree parent, @NotNull PropertyState property)", "class_method_signature": "UserContext.definesProperty(@NotNull Tree parent, @NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "definesContextRoot", "parameters": "(@NotNull Tree tree)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean definesContextRoot(@NotNull Tree tree)", "full_signature": "@Override public boolean definesContextRoot(@NotNull Tree tree)", "class_method_signature": "UserContext.definesContextRoot(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "definesTree", "parameters": "(@NotNull Tree tree)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean definesTree(@NotNull Tree tree)", "full_signature": "@Override public boolean definesTree(@NotNull Tree tree)", "class_method_signature": "UserContext.definesTree(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "definesLocation", "parameters": "(@NotNull TreeLocation location)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean definesLocation(@NotNull TreeLocation location)", "full_signature": "@Override public boolean definesLocation(@NotNull TreeLocation location)", "class_method_signature": "UserContext.definesLocation(@NotNull TreeLocation location)", "testcase": false, "constructor": false}, {"identifier": "definesInternal", "parameters": "(@NotNull Tree tree)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean definesInternal(@NotNull Tree tree)", "full_signature": "@Override public boolean definesInternal(@NotNull Tree tree)", "class_method_signature": "UserContext.definesInternal(@NotNull Tree tree)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserContext.java"}, "focal_method": {"identifier": "definesProperty", "parameters": "(@NotNull Tree parent, @NotNull PropertyState property)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean definesProperty(@NotNull Tree parent, @NotNull PropertyState property) {\n        String propName = property.getName();\n        String ntName = TreeUtil.getPrimaryTypeName(parent);\n        if (NT_REP_USER.equals(ntName) || NT_REP_SYSTEM_USER.equals(ntName)) {\n            return USER_PROPERTY_NAMES.contains(propName);\n        } else if (NT_REP_GROUP.equals(ntName)) {\n            return GROUP_PROPERTY_NAMES.contains(propName);\n        } else if (NT_REP_PASSWORD.equals(ntName)) {\n            return PWD_PROPERTY_NAMES.contains(propName);\n        } else if (NT_REP_MEMBER_REFERENCES.equals(ntName)) {\n            return REP_MEMBERS.equals(propName);\n        } else return NT_REP_MEMBERS.equals(ntName);\n    }", "signature": "boolean definesProperty(@NotNull Tree parent, @NotNull PropertyState property)", "full_signature": "@Override public boolean definesProperty(@NotNull Tree parent, @NotNull PropertyState property)", "class_method_signature": "UserContext.definesProperty(@NotNull Tree parent, @NotNull PropertyState property)", "testcase": false, "constructor": false, "invocations": ["getName", "getPrimaryTypeName", "equals", "equals", "contains", "equals", "contains", "equals", "contains", "equals", "equals", "equals"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}