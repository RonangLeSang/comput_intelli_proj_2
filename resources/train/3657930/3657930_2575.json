{"test_class": {"identifier": "NestedCugHookTest", "superclass": "extends AbstractCugTest", "interfaces": "", "fields": [], "file": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/NestedCugHookTest.java"}, "test_case": {"identifier": "testRemoveWithMissingHiddenNestedCugProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveWithMissingHiddenNestedCugProperty() throws Exception {\n        createCug(\"/content\", getTestGroupPrincipal());\n        createCug(\"/content/subtree\", EveryonePrincipal.getInstance());\n        root.commit();\n\n        // after state:\n        // no longer contains cug-policy at /content (=> 'deletedChildNode' for that CUG node)\n        removeCug(\"/content/subtree\", false);\n        removeCug(\"/content\", false);\n\n        NodeState after = getTreeProvider().asNodeState(root.getTree(PathUtils.ROOT_PATH));\n\n        // NestedCugHook must not fail if the Diff doesn't manage to find a hidden-nested-cug property listing\n        // the nested cug of the before-state (and thus cannot clean-up the hidden structure)\n        NodeBuilder before = new MemoryNodeBuilder(getTreeProvider().asNodeState(adminSession.getLatestRoot().getTree(PathUtils.ROOT_PATH)));\n        NodeBuilder cugNode = before.getChildNode(\"content\").getChildNode(\"rep:cugPolicy\");\n        cugNode.removeProperty(HIDDEN_NESTED_CUGS);\n\n        NestedCugHook nch = new NestedCugHook();\n        nch.processCommit(before.getNodeState(), after, new CommitInfo(\"sid\", null));\n    }", "signature": "void testRemoveWithMissingHiddenNestedCugProperty()", "full_signature": "@Test public void testRemoveWithMissingHiddenNestedCugProperty()", "class_method_signature": "NestedCugHookTest.testRemoveWithMissingHiddenNestedCugProperty()", "testcase": true, "constructor": false, "invocations": ["createCug", "getTestGroupPrincipal", "createCug", "getInstance", "commit", "removeCug", "removeCug", "asNodeState", "getTreeProvider", "getTree", "asNodeState", "getTreeProvider", "getTree", "getLatestRoot", "getChildNode", "getChildNode", "removeProperty", "processCommit", "getNodeState"]}, "focal_class": {"identifier": "NestedCugHook", "superclass": "", "interfaces": "implements PostValidationHook, CugConstants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(NestedCugHook.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NestedCugHook.class)", "var_name": "log"}, {"original_string": "private Set<String> deletedCUGs = Sets.newHashSet();", "modifier": "private", "type": "Set<String>", "declarator": "deletedCUGs = Sets.newHashSet()", "var_name": "deletedCUGs"}, {"original_string": "private Set<String> moveSources = Sets.newHashSet();", "modifier": "private", "type": "Set<String>", "declarator": "moveSources = Sets.newHashSet()", "var_name": "moveSources"}], "methods": [{"identifier": "processCommit", "parameters": "(NodeState before, NodeState after, CommitInfo info)", "modifiers": "@NotNull @Override public", "return": "NodeState", "signature": "NodeState processCommit(NodeState before, NodeState after, CommitInfo info)", "full_signature": "@NotNull @Override public NodeState processCommit(NodeState before, NodeState after, CommitInfo info)", "class_method_signature": "NestedCugHook.processCommit(NodeState before, NodeState after, CommitInfo info)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NestedCugHook.toString()", "testcase": false, "constructor": false}, {"identifier": "addNestedCugPath", "parameters": "(@NotNull NodeBuilder parentBuilder, @NotNull NodeBuilder builder, @NotNull String pathWithNewCug, boolean setCugCnt)", "modifiers": "private", "return": "void", "signature": "void addNestedCugPath(@NotNull NodeBuilder parentBuilder, @NotNull NodeBuilder builder, @NotNull String pathWithNewCug, boolean setCugCnt)", "full_signature": "private void addNestedCugPath(@NotNull NodeBuilder parentBuilder, @NotNull NodeBuilder builder, @NotNull String pathWithNewCug, boolean setCugCnt)", "class_method_signature": "NestedCugHook.addNestedCugPath(@NotNull NodeBuilder parentBuilder, @NotNull NodeBuilder builder, @NotNull String pathWithNewCug, boolean setCugCnt)", "testcase": false, "constructor": false}, {"identifier": "isDeletedOrMoved", "parameters": "(@NotNull String path)", "modifiers": "private", "return": "boolean", "signature": "boolean isDeletedOrMoved(@NotNull String path)", "full_signature": "private boolean isDeletedOrMoved(@NotNull String path)", "class_method_signature": "NestedCugHook.isDeletedOrMoved(@NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "removeNestedCugPath", "parameters": "(@NotNull NodeBuilder parentBuilder, @NotNull String toRemove,\n                                        @NotNull Iterable<String> toReconnect, boolean setCugCnt)", "modifiers": "private static", "return": "boolean", "signature": "boolean removeNestedCugPath(@NotNull NodeBuilder parentBuilder, @NotNull String toRemove,\n                                        @NotNull Iterable<String> toReconnect, boolean setCugCnt)", "full_signature": "private static boolean removeNestedCugPath(@NotNull NodeBuilder parentBuilder, @NotNull String toRemove,\n                                        @NotNull Iterable<String> toReconnect, boolean setCugCnt)", "class_method_signature": "NestedCugHook.removeNestedCugPath(@NotNull NodeBuilder parentBuilder, @NotNull String toRemove,\n                                        @NotNull Iterable<String> toReconnect, boolean setCugCnt)", "testcase": false, "constructor": false}, {"identifier": "getHiddenPropertyBuilder", "parameters": "(@Nullable PropertyState ps)", "modifiers": "private static", "return": "PropertyBuilder<String>", "signature": "PropertyBuilder<String> getHiddenPropertyBuilder(@Nullable PropertyState ps)", "full_signature": "private static PropertyBuilder<String> getHiddenPropertyBuilder(@Nullable PropertyState ps)", "class_method_signature": "NestedCugHook.getHiddenPropertyBuilder(@Nullable PropertyState ps)", "testcase": false, "constructor": false}], "file": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/NestedCugHook.java"}, "focal_method": {"identifier": "processCommit", "parameters": "(NodeState before, NodeState after, CommitInfo info)", "modifiers": "@NotNull @Override public", "return": "NodeState", "body": "@NotNull\n    @Override\n    public NodeState processCommit(NodeState before, NodeState after, CommitInfo info) {\n        NodeBuilder builder = after.builder();\n        after.compareAgainstBaseState(before, new Diff(before, builder));\n        deletedCUGs.clear();\n        moveSources.clear();\n        return builder.getNodeState();\n    }", "signature": "NodeState processCommit(NodeState before, NodeState after, CommitInfo info)", "full_signature": "@NotNull @Override public NodeState processCommit(NodeState before, NodeState after, CommitInfo info)", "class_method_signature": "NestedCugHook.processCommit(NodeState before, NodeState after, CommitInfo info)", "testcase": false, "constructor": false, "invocations": ["builder", "compareAgainstBaseState", "clear", "clear", "getNodeState"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}