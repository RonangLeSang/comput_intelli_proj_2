{"test_class": {"identifier": "CugAccessControlManagerTest", "superclass": "extends AbstractCugTest", "interfaces": "", "fields": [{"original_string": "private CugAccessControlManager cugAccessControlManager;", "modifier": "private", "type": "CugAccessControlManager", "declarator": "cugAccessControlManager", "var_name": "cugAccessControlManager"}], "file": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugAccessControlManagerTest.java"}, "test_case": {"identifier": "testGetEffectivePoliciesNoReadPermission", "parameters": "()", "modifiers": "@Test(expected = PathNotFoundException.class) public", "return": "void", "body": "@Test(expected = PathNotFoundException.class)\n    public void testGetEffectivePoliciesNoReadPermission() throws Exception {\n        setupCugsAndAcls();\n        // test-user only has read-access on /content (no read-ac permission)\n        try (ContentSession cs = createTestSession()) {\n            Root r = cs.getLatestRoot();\n            CugAccessControlManager m = new CugAccessControlManager(r, NamePathMapper.DEFAULT, getSecurityProvider(), ImmutableSet.copyOf(SUPPORTED_PATHS), getExclude(), getRootProvider());\n            m.getEffectivePolicies(\"/content2\");\n        }\n    }", "signature": "void testGetEffectivePoliciesNoReadPermission()", "full_signature": "@Test(expected = PathNotFoundException.class) public void testGetEffectivePoliciesNoReadPermission()", "class_method_signature": "CugAccessControlManagerTest.testGetEffectivePoliciesNoReadPermission()", "testcase": true, "constructor": false, "invocations": ["setupCugsAndAcls", "createTestSession", "getLatestRoot", "getSecurityProvider", "copyOf", "getExclude", "getRootProvider", "getEffectivePolicies"]}, "focal_class": {"identifier": "CugAccessControlManager", "superclass": "extends AbstractAccessControlManager", "interfaces": "implements CugConstants, PolicyOwner", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CugAccessControlManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CugAccessControlManager.class)", "var_name": "log"}, {"original_string": "private final Set<String> supportedPaths;", "modifier": "private final", "type": "Set<String>", "declarator": "supportedPaths", "var_name": "supportedPaths"}, {"original_string": "private final CugExclude cugExclude;", "modifier": "private final", "type": "CugExclude", "declarator": "cugExclude", "var_name": "cugExclude"}, {"original_string": "private final ConfigurationParameters config;", "modifier": "private final", "type": "ConfigurationParameters", "declarator": "config", "var_name": "config"}, {"original_string": "private final PrincipalManager principalManager;", "modifier": "private final", "type": "PrincipalManager", "declarator": "principalManager", "var_name": "principalManager"}, {"original_string": "private final RootProvider rootProvider;", "modifier": "private final", "type": "RootProvider", "declarator": "rootProvider", "var_name": "rootProvider"}], "methods": [{"identifier": "CugAccessControlManager", "parameters": "(@NotNull Root root,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull SecurityProvider securityProvider,\n                            @NotNull Set<String> supportedPaths,\n                            @NotNull CugExclude cugExclude, RootProvider rootProvider)", "modifiers": "", "return": "", "signature": " CugAccessControlManager(@NotNull Root root,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull SecurityProvider securityProvider,\n                            @NotNull Set<String> supportedPaths,\n                            @NotNull CugExclude cugExclude, RootProvider rootProvider)", "full_signature": "  CugAccessControlManager(@NotNull Root root,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull SecurityProvider securityProvider,\n                            @NotNull Set<String> supportedPaths,\n                            @NotNull CugExclude cugExclude, RootProvider rootProvider)", "class_method_signature": "CugAccessControlManager.CugAccessControlManager(@NotNull Root root,\n                            @NotNull NamePathMapper namePathMapper,\n                            @NotNull SecurityProvider securityProvider,\n                            @NotNull Set<String> supportedPaths,\n                            @NotNull CugExclude cugExclude, RootProvider rootProvider)", "testcase": false, "constructor": true}, {"identifier": "getSupportedPrivileges", "parameters": "(@Nullable String absPath)", "modifiers": "@NotNull @Override public", "return": "Privilege[]", "signature": "Privilege[] getSupportedPrivileges(@Nullable String absPath)", "full_signature": "@NotNull @Override public Privilege[] getSupportedPrivileges(@Nullable String absPath)", "class_method_signature": "CugAccessControlManager.getSupportedPrivileges(@Nullable String absPath)", "testcase": false, "constructor": false}, {"identifier": "getPolicies", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getPolicies(String absPath)", "full_signature": "@Override public AccessControlPolicy[] getPolicies(String absPath)", "class_method_signature": "CugAccessControlManager.getPolicies(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getEffectivePolicies", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getEffectivePolicies(String absPath)", "full_signature": "@Override public AccessControlPolicy[] getEffectivePolicies(String absPath)", "class_method_signature": "CugAccessControlManager.getEffectivePolicies(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getApplicablePolicies", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "AccessControlPolicyIterator", "signature": "AccessControlPolicyIterator getApplicablePolicies(String absPath)", "full_signature": "@Override public AccessControlPolicyIterator getApplicablePolicies(String absPath)", "class_method_signature": "CugAccessControlManager.getApplicablePolicies(String absPath)", "testcase": false, "constructor": false}, {"identifier": "removePolicy", "parameters": "(String absPath, AccessControlPolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void removePolicy(String absPath, AccessControlPolicy policy)", "full_signature": "@Override public void removePolicy(String absPath, AccessControlPolicy policy)", "class_method_signature": "CugAccessControlManager.removePolicy(String absPath, AccessControlPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "setPolicy", "parameters": "(String absPath, AccessControlPolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void setPolicy(String absPath, AccessControlPolicy policy)", "full_signature": "@Override public void setPolicy(String absPath, AccessControlPolicy policy)", "class_method_signature": "CugAccessControlManager.setPolicy(String absPath, AccessControlPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "getApplicablePolicies", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "JackrabbitAccessControlPolicy[]", "signature": "JackrabbitAccessControlPolicy[] getApplicablePolicies(@NotNull Principal principal)", "full_signature": "@NotNull @Override public JackrabbitAccessControlPolicy[] getApplicablePolicies(@NotNull Principal principal)", "class_method_signature": "CugAccessControlManager.getApplicablePolicies(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getPolicies", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "JackrabbitAccessControlPolicy[]", "signature": "JackrabbitAccessControlPolicy[] getPolicies(@NotNull Principal principal)", "full_signature": "@NotNull @Override public JackrabbitAccessControlPolicy[] getPolicies(@NotNull Principal principal)", "class_method_signature": "CugAccessControlManager.getPolicies(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getEffectivePolicies", "parameters": "(@NotNull Set<Principal> principals)", "modifiers": "@NotNull @Override public", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getEffectivePolicies(@NotNull Set<Principal> principals)", "full_signature": "@NotNull @Override public AccessControlPolicy[] getEffectivePolicies(@NotNull Set<Principal> principals)", "class_method_signature": "CugAccessControlManager.getEffectivePolicies(@NotNull Set<Principal> principals)", "testcase": false, "constructor": false}, {"identifier": "defines", "parameters": "(@Nullable String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean defines(@Nullable String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "full_signature": "@Override public boolean defines(@Nullable String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "class_method_signature": "CugAccessControlManager.defines(@Nullable String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "testcase": false, "constructor": false}, {"identifier": "isSupportedPath", "parameters": "(@Nullable String oakPath)", "modifiers": "private", "return": "boolean", "signature": "boolean isSupportedPath(@Nullable String oakPath)", "full_signature": "private boolean isSupportedPath(@Nullable String oakPath)", "class_method_signature": "CugAccessControlManager.isSupportedPath(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "checkValidPath", "parameters": "(@Nullable String oakPath)", "modifiers": "private", "return": "void", "signature": "void checkValidPath(@Nullable String oakPath)", "full_signature": "private void checkValidPath(@Nullable String oakPath)", "class_method_signature": "CugAccessControlManager.checkValidPath(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "getCugPolicy", "parameters": "(@NotNull String oakPath)", "modifiers": "@Nullable private", "return": "CugPolicy", "signature": "CugPolicy getCugPolicy(@NotNull String oakPath)", "full_signature": "@Nullable private CugPolicy getCugPolicy(@NotNull String oakPath)", "class_method_signature": "CugAccessControlManager.getCugPolicy(@NotNull String oakPath)", "testcase": false, "constructor": false}, {"identifier": "getCugPolicy", "parameters": "(@NotNull String oakPath, @NotNull Tree tree, boolean isEffective)", "modifiers": "@Nullable private", "return": "CugPolicy", "signature": "CugPolicy getCugPolicy(@NotNull String oakPath, @NotNull Tree tree, boolean isEffective)", "full_signature": "@Nullable private CugPolicy getCugPolicy(@NotNull String oakPath, @NotNull Tree tree, boolean isEffective)", "class_method_signature": "CugAccessControlManager.getCugPolicy(@NotNull String oakPath, @NotNull Tree tree, boolean isEffective)", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "(@NotNull Tree cugTree)", "modifiers": "private", "return": "Iterable<Principal>", "signature": "Iterable<Principal> getPrincipals(@NotNull Tree cugTree)", "full_signature": "private Iterable<Principal> getPrincipals(@NotNull Tree cugTree)", "class_method_signature": "CugAccessControlManager.getPrincipals(@NotNull Tree cugTree)", "testcase": false, "constructor": false}, {"identifier": "isValidPolicy", "parameters": "(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "full_signature": "private static boolean isValidPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "class_method_signature": "CugAccessControlManager.isValidPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "checkValidPolicy", "parameters": "(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "modifiers": "private static", "return": "void", "signature": "void checkValidPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "full_signature": "private static void checkValidPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "class_method_signature": "CugAccessControlManager.checkValidPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "collectEffectiveCandidates", "parameters": "(@NotNull Root r, @NotNull Iterable<String> principalNames)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> collectEffectiveCandidates(@NotNull Root r, @NotNull Iterable<String> principalNames)", "full_signature": "private Set<String> collectEffectiveCandidates(@NotNull Root r, @NotNull Iterable<String> principalNames)", "class_method_signature": "CugAccessControlManager.collectEffectiveCandidates(@NotNull Root r, @NotNull Iterable<String> principalNames)", "testcase": false, "constructor": false}, {"identifier": "nestedCugPaths", "parameters": "(@NotNull Tree t)", "modifiers": "private static", "return": "Iterable<String>", "signature": "Iterable<String> nestedCugPaths(@NotNull Tree t)", "full_signature": "private static Iterable<String> nestedCugPaths(@NotNull Tree t)", "class_method_signature": "CugAccessControlManager.nestedCugPaths(@NotNull Tree t)", "testcase": false, "constructor": false}], "file": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugAccessControlManager.java"}, "focal_method": {"identifier": "getEffectivePolicies", "parameters": "(String absPath)", "modifiers": "@Override public", "return": "AccessControlPolicy[]", "body": "@Override\n    public AccessControlPolicy[] getEffectivePolicies(String absPath) throws RepositoryException {\n        String oakPath = getOakPath(absPath);\n        getTree(oakPath, Permissions.READ_ACCESS_CONTROL, true);\n\n        boolean enabled = config.getConfigValue(CugConstants.PARAM_CUG_ENABLED, false);\n        if (enabled) {\n            Root r = getLatestRoot();\n            List<AccessControlPolicy> effective = new ArrayList<>();\n            while (oakPath != null) {\n                if (CugUtil.isSupportedPath(oakPath, supportedPaths)) {\n                    CugPolicy cug = getCugPolicy(oakPath, r.getTree(oakPath), true);\n                    if (cug != null) {\n                        effective.add(cug);\n                    }\n                }\n                oakPath = (PathUtils.denotesRoot(oakPath)) ? null : PathUtils.getAncestorPath(oakPath, 1);\n            }\n            return effective.toArray(new AccessControlPolicy[0]);\n        } else {\n            return new AccessControlPolicy[0];\n        }\n    }", "signature": "AccessControlPolicy[] getEffectivePolicies(String absPath)", "full_signature": "@Override public AccessControlPolicy[] getEffectivePolicies(String absPath)", "class_method_signature": "CugAccessControlManager.getEffectivePolicies(String absPath)", "testcase": false, "constructor": false, "invocations": ["getOakPath", "getTree", "getConfigValue", "getLatestRoot", "isSupportedPath", "getCugPolicy", "getTree", "add", "denotesRoot", "getAncestorPath", "toArray"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}