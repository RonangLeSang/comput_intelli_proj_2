{"test_class": {"identifier": "RevisionVectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/RevisionVectorTest.java"}, "test_case": {"identifier": "update", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void update() {\n        Revision rev1 = new Revision(1, 0, 1);\n        RevisionVector rv = new RevisionVector(rev1);\n        assertEquals(1, Iterables.size(rv));\n        assertSame(rv, rv.update(rev1));\n\n        Revision rev2 = new Revision(2, 0, 1);\n        rv = rv.update(rev2);\n        assertEquals(newHashSet(rev2), newHashSet(rv));\n\n        Revision rev3 = new Revision(3, 0, 2);\n        rv = rv.update(rev3);\n        assertEquals(newHashSet(rev2, rev3), newHashSet(rv));\n\n        rev3 = rev3.asBranchRevision();\n        rv = rv.update(rev3);\n        assertEquals(newHashSet(rev2, rev3), newHashSet(rv));\n    }", "signature": "void update()", "full_signature": "@Test public void update()", "class_method_signature": "RevisionVectorTest.update()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "assertSame", "update", "update", "assertEquals", "newHashSet", "newHashSet", "update", "assertEquals", "newHashSet", "newHashSet", "asBranchRevision", "update", "assertEquals", "newHashSet", "newHashSet"]}, "focal_class": {"identifier": "RevisionVector", "superclass": "", "interfaces": "implements Iterable<Revision>, Comparable<RevisionVector>, CacheValue", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(RevisionVector.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RevisionVector.class)", "var_name": "log"}, {"original_string": "private final static RevisionVector EMPTY = new RevisionVector();", "modifier": "private final static", "type": "RevisionVector", "declarator": "EMPTY = new RevisionVector()", "var_name": "EMPTY"}, {"original_string": "private final Revision[] revisions;", "modifier": "private final", "type": "Revision[]", "declarator": "revisions", "var_name": "revisions"}, {"original_string": "private int hash;", "modifier": "private", "type": "int", "declarator": "hash", "var_name": "hash"}], "methods": [{"identifier": "RevisionVector", "parameters": "(@NotNull Revision[] revisions,\n                           boolean checkUniqueClusterIds,\n                           boolean sort)", "modifiers": "private", "return": "", "signature": " RevisionVector(@NotNull Revision[] revisions,\n                           boolean checkUniqueClusterIds,\n                           boolean sort)", "full_signature": "private  RevisionVector(@NotNull Revision[] revisions,\n                           boolean checkUniqueClusterIds,\n                           boolean sort)", "class_method_signature": "RevisionVector.RevisionVector(@NotNull Revision[] revisions,\n                           boolean checkUniqueClusterIds,\n                           boolean sort)", "testcase": false, "constructor": true}, {"identifier": "RevisionVector", "parameters": "(@NotNull Revision... revisions)", "modifiers": "public", "return": "", "signature": " RevisionVector(@NotNull Revision... revisions)", "full_signature": "public  RevisionVector(@NotNull Revision... revisions)", "class_method_signature": "RevisionVector.RevisionVector(@NotNull Revision... revisions)", "testcase": false, "constructor": true}, {"identifier": "RevisionVector", "parameters": "(@NotNull Iterable<Revision> revisions)", "modifiers": "public", "return": "", "signature": " RevisionVector(@NotNull Iterable<Revision> revisions)", "full_signature": "public  RevisionVector(@NotNull Iterable<Revision> revisions)", "class_method_signature": "RevisionVector.RevisionVector(@NotNull Iterable<Revision> revisions)", "testcase": false, "constructor": true}, {"identifier": "RevisionVector", "parameters": "(@NotNull Set<Revision> revisions)", "modifiers": "public", "return": "", "signature": " RevisionVector(@NotNull Set<Revision> revisions)", "full_signature": "public  RevisionVector(@NotNull Set<Revision> revisions)", "class_method_signature": "RevisionVector.RevisionVector(@NotNull Set<Revision> revisions)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(@NotNull Revision revision)", "modifiers": "public", "return": "RevisionVector", "signature": "RevisionVector update(@NotNull Revision revision)", "full_signature": "public RevisionVector update(@NotNull Revision revision)", "class_method_signature": "RevisionVector.update(@NotNull Revision revision)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int clusterId)", "modifiers": "public", "return": "RevisionVector", "signature": "RevisionVector remove(int clusterId)", "full_signature": "public RevisionVector remove(int clusterId)", "class_method_signature": "RevisionVector.remove(int clusterId)", "testcase": false, "constructor": false}, {"identifier": "pmin", "parameters": "(@NotNull RevisionVector vector)", "modifiers": "public", "return": "RevisionVector", "signature": "RevisionVector pmin(@NotNull RevisionVector vector)", "full_signature": "public RevisionVector pmin(@NotNull RevisionVector vector)", "class_method_signature": "RevisionVector.pmin(@NotNull RevisionVector vector)", "testcase": false, "constructor": false}, {"identifier": "pmax", "parameters": "(@NotNull RevisionVector vector)", "modifiers": "public", "return": "RevisionVector", "signature": "RevisionVector pmax(@NotNull RevisionVector vector)", "full_signature": "public RevisionVector pmax(@NotNull RevisionVector vector)", "class_method_signature": "RevisionVector.pmax(@NotNull RevisionVector vector)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(RevisionVector vector)", "modifiers": "public", "return": "RevisionVector", "signature": "RevisionVector difference(RevisionVector vector)", "full_signature": "public RevisionVector difference(RevisionVector vector)", "class_method_signature": "RevisionVector.difference(RevisionVector vector)", "testcase": false, "constructor": false}, {"identifier": "isRevisionNewer", "parameters": "(@NotNull Revision revision)", "modifiers": "public", "return": "boolean", "signature": "boolean isRevisionNewer(@NotNull Revision revision)", "full_signature": "public boolean isRevisionNewer(@NotNull Revision revision)", "class_method_signature": "RevisionVector.isRevisionNewer(@NotNull Revision revision)", "testcase": false, "constructor": false}, {"identifier": "isBranch", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBranch()", "full_signature": "public boolean isBranch()", "class_method_signature": "RevisionVector.isBranch()", "testcase": false, "constructor": false}, {"identifier": "getBranchRevision", "parameters": "()", "modifiers": "@NotNull public", "return": "Revision", "signature": "Revision getBranchRevision()", "full_signature": "@NotNull public Revision getBranchRevision()", "class_method_signature": "RevisionVector.getBranchRevision()", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "(int clusterId)", "modifiers": "public", "return": "Revision", "signature": "Revision getRevision(int clusterId)", "full_signature": "public Revision getRevision(int clusterId)", "class_method_signature": "RevisionVector.getRevision(int clusterId)", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String asString()", "full_signature": "public String asString()", "class_method_signature": "RevisionVector.asString()", "testcase": false, "constructor": false}, {"identifier": "toStringBuilder", "parameters": "(StringBuilder sb)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder toStringBuilder(StringBuilder sb)", "full_signature": "public StringBuilder toStringBuilder(StringBuilder sb)", "class_method_signature": "RevisionVector.toStringBuilder(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(String s)", "modifiers": "public static", "return": "RevisionVector", "signature": "RevisionVector fromString(String s)", "full_signature": "public static RevisionVector fromString(String s)", "class_method_signature": "RevisionVector.fromString(String s)", "testcase": false, "constructor": false}, {"identifier": "asTrunkRevision", "parameters": "()", "modifiers": "public", "return": "RevisionVector", "signature": "RevisionVector asTrunkRevision()", "full_signature": "public RevisionVector asTrunkRevision()", "class_method_signature": "RevisionVector.asTrunkRevision()", "testcase": false, "constructor": false}, {"identifier": "asBranchRevision", "parameters": "(int clusterId)", "modifiers": "public", "return": "RevisionVector", "signature": "RevisionVector asBranchRevision(int clusterId)", "full_signature": "public RevisionVector asBranchRevision(int clusterId)", "class_method_signature": "RevisionVector.asBranchRevision(int clusterId)", "testcase": false, "constructor": false}, {"identifier": "getDimensions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDimensions()", "full_signature": "public int getDimensions()", "class_method_signature": "RevisionVector.getDimensions()", "testcase": false, "constructor": false}, {"identifier": "getMemory", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMemory()", "full_signature": "@Override public int getMemory()", "class_method_signature": "RevisionVector.getMemory()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@NotNull RevisionVector other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@NotNull RevisionVector other)", "full_signature": "@Override public int compareTo(@NotNull RevisionVector other)", "class_method_signature": "RevisionVector.compareTo(@NotNull RevisionVector other)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Revision>", "signature": "Iterator<Revision> iterator()", "full_signature": "@Override public Iterator<Revision> iterator()", "class_method_signature": "RevisionVector.iterator()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RevisionVector.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RevisionVector.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RevisionVector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "peekRevision", "parameters": "(PeekingIterator<Revision> it,\n                                  int minClusterId)", "modifiers": "@Nullable private", "return": "Revision", "signature": "Revision peekRevision(PeekingIterator<Revision> it,\n                                  int minClusterId)", "full_signature": "@Nullable private Revision peekRevision(PeekingIterator<Revision> it,\n                                  int minClusterId)", "class_method_signature": "RevisionVector.peekRevision(PeekingIterator<Revision> it,\n                                  int minClusterId)", "testcase": false, "constructor": false}, {"identifier": "revisionArrayMemory", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long revisionArrayMemory()", "full_signature": "private long revisionArrayMemory()", "class_method_signature": "RevisionVector.revisionArrayMemory()", "testcase": false, "constructor": false}, {"identifier": "checkUniqueClusterIds", "parameters": "(Revision[] revisions)", "modifiers": "private static", "return": "void", "signature": "void checkUniqueClusterIds(Revision[] revisions)", "full_signature": "private static void checkUniqueClusterIds(Revision[] revisions)", "class_method_signature": "RevisionVector.checkUniqueClusterIds(Revision[] revisions)", "testcase": false, "constructor": false}], "file": "oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/RevisionVector.java"}, "focal_method": {"identifier": "update", "parameters": "(@NotNull Revision revision)", "modifiers": "public", "return": "RevisionVector", "body": "public RevisionVector update(@NotNull Revision revision) {\n        checkNotNull(revision);\n        Revision existing = null;\n        int i;\n        for (i = 0; i < revisions.length; i++) {\n            Revision r = revisions[i];\n            if (r.getClusterId() == revision.getClusterId()) {\n                existing = r;\n                break;\n            }\n        }\n        Revision[] newRevisions;\n        boolean sort;\n        if (existing != null) {\n            if (revision.equals(existing)) {\n                return this;\n            } else {\n                newRevisions = Arrays.copyOf(revisions, revisions.length);\n                newRevisions[i] = revision;\n                sort = false;\n            }\n        } else {\n            newRevisions = new Revision[revisions.length + 1];\n            System.arraycopy(revisions, 0, newRevisions, 0, revisions.length);\n            newRevisions[revisions.length] = revision;\n            sort = true;\n        }\n        return new RevisionVector(newRevisions, false, sort);\n    }", "signature": "RevisionVector update(@NotNull Revision revision)", "full_signature": "public RevisionVector update(@NotNull Revision revision)", "class_method_signature": "RevisionVector.update(@NotNull Revision revision)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "getClusterId", "getClusterId", "equals", "copyOf", "arraycopy"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}