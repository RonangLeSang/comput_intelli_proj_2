{"test_class": {"identifier": "AccessControlManagerImplTest", "superclass": "extends AbstractSecurityTest", "interfaces": "implements AccessControlConstants", "fields": [{"original_string": "private static final String TEST_LOCAL_PREFIX = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_LOCAL_PREFIX = \"test\"", "var_name": "TEST_LOCAL_PREFIX"}, {"original_string": "private static final String TEST_PREFIX = \"jr\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PREFIX = \"jr\"", "var_name": "TEST_PREFIX"}, {"original_string": "private static final String TEST_URI = \"http://jackrabbit.apache.org\";", "modifier": "private static final", "type": "String", "declarator": "TEST_URI = \"http://jackrabbit.apache.org\"", "var_name": "TEST_URI"}, {"original_string": "private final String testName = TEST_PREFIX + \":testRoot\";", "modifier": "private final", "type": "String", "declarator": "testName = TEST_PREFIX + \":testRoot\"", "var_name": "testName"}, {"original_string": "private final String testPath = '/' + testName;", "modifier": "private final", "type": "String", "declarator": "testPath = '/' + testName", "var_name": "testPath"}, {"original_string": "private Principal testPrincipal;", "modifier": "private", "type": "Principal", "declarator": "testPrincipal", "var_name": "testPrincipal"}, {"original_string": "private Privilege[] testPrivileges;", "modifier": "private", "type": "Privilege[]", "declarator": "testPrivileges", "var_name": "testPrivileges"}, {"original_string": "private AccessControlManagerImpl acMgr;", "modifier": "private", "type": "AccessControlManagerImpl", "declarator": "acMgr", "var_name": "acMgr"}, {"original_string": "private NamePathMapper npMapper;", "modifier": "private", "type": "NamePathMapper", "declarator": "npMapper", "var_name": "npMapper"}, {"original_string": "private ValueFactory valueFactory;", "modifier": "private", "type": "ValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlManagerImplTest.java"}, "test_case": {"identifier": "testSetPolicyWritesAcContent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetPolicyWritesAcContent() throws Exception {\n        ACL acl = TestUtility.getApplicablePolicy(acMgr, testPath);\n        acl.addAccessControlEntry(testPrincipal, testPrivileges);\n        acl.addEntry(EveryonePrincipal.getInstance(), testPrivileges, false, TestUtility.getGlobRestriction(\"*/something\", valueFactory));\n\n        acMgr.setPolicy(testPath, acl);\n        root.commit();\n\n        Root root2 = adminSession.getLatestRoot();\n        Tree tree = root2.getTree(testPath);\n        assertTrue(tree.hasChild(REP_POLICY));\n        Tree policyTree = tree.getChild(REP_POLICY);\n        assertEquals(NT_REP_ACL, TreeUtil.getPrimaryTypeName(policyTree));\n        assertEquals(2, policyTree.getChildrenCount(3));\n\n        Iterator<Tree> children = policyTree.getChildren().iterator();\n        Tree ace = children.next();\n        assertEquals(NT_REP_GRANT_ACE, TreeUtil.getPrimaryTypeName(ace));\n        assertEquals(testPrincipal.getName(), TreeUtil.getString(ace, REP_PRINCIPAL_NAME));\n        assertEquals(\n                newHashSet(testPrivileges),\n                newHashSet(privilegesFromNames(TreeUtil.getStrings(ace, REP_PRIVILEGES))));\n        assertFalse(ace.hasChild(REP_RESTRICTIONS));\n\n        Tree ace2 = children.next();\n        assertEquals(NT_REP_DENY_ACE, TreeUtil.getPrimaryTypeName(ace2));\n        assertEquals(EveryonePrincipal.NAME, checkNotNull(ace2.getProperty(REP_PRINCIPAL_NAME)).getValue(Type.STRING));\n        Privilege[] privs = privilegesFromNames(TreeUtil.getNames(ace2, REP_PRIVILEGES));\n        assertEquals(newHashSet(testPrivileges), newHashSet(privs));\n        assertTrue(ace2.hasChild(REP_RESTRICTIONS));\n        Tree restr = ace2.getChild(REP_RESTRICTIONS);\n        assertEquals(\"*/something\", checkNotNull(restr.getProperty(REP_GLOB)).getValue(Type.STRING));\n    }", "signature": "void testSetPolicyWritesAcContent()", "full_signature": "@Test public void testSetPolicyWritesAcContent()", "class_method_signature": "AccessControlManagerImplTest.testSetPolicyWritesAcContent()", "testcase": true, "constructor": false, "invocations": ["getApplicablePolicy", "addAccessControlEntry", "addEntry", "getInstance", "getGlobRestriction", "setPolicy", "commit", "getLatestRoot", "getTree", "assertTrue", "hasChild", "getChild", "assertEquals", "getPrimaryTypeName", "assertEquals", "getChildrenCount", "iterator", "getChildren", "next", "assertEquals", "getPrimaryTypeName", "assertEquals", "getName", "getString", "assertEquals", "newHashSet", "newHashSet", "privilegesFromNames", "getStrings", "assertFalse", "hasChild", "next", "assertEquals", "getPrimaryTypeName", "assertEquals", "getValue", "checkNotNull", "getProperty", "privilegesFromNames", "getNames", "assertEquals", "newHashSet", "newHashSet", "assertTrue", "hasChild", "getChild", "assertEquals", "getValue", "checkNotNull", "getProperty"]}, "focal_class": {"identifier": "AccessControlManagerImpl", "superclass": "extends AbstractAccessControlManager", "interfaces": "implements PolicyOwner", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AccessControlManagerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AccessControlManagerImpl.class)", "var_name": "log"}, {"original_string": "private final PrivilegeBitsProvider bitsProvider;", "modifier": "private final", "type": "PrivilegeBitsProvider", "declarator": "bitsProvider", "var_name": "bitsProvider"}, {"original_string": "private final ReadOnlyNodeTypeManager ntMgr;", "modifier": "private final", "type": "ReadOnlyNodeTypeManager", "declarator": "ntMgr", "var_name": "ntMgr"}, {"original_string": "private final PrincipalManager principalManager;", "modifier": "private final", "type": "PrincipalManager", "declarator": "principalManager", "var_name": "principalManager"}, {"original_string": "private final RestrictionProvider restrictionProvider;", "modifier": "private final", "type": "RestrictionProvider", "declarator": "restrictionProvider", "var_name": "restrictionProvider"}, {"original_string": "private final ConfigurationParameters configParams;", "modifier": "private final", "type": "ConfigurationParameters", "declarator": "configParams", "var_name": "configParams"}, {"original_string": "private final Set<String> readPaths;", "modifier": "private final", "type": "Set<String>", "declarator": "readPaths", "var_name": "readPaths"}], "methods": [{"identifier": "AccessControlManagerImpl", "parameters": "(@NotNull Root root, @NotNull NamePathMapper namePathMapper,\n                                    @NotNull SecurityProvider securityProvider)", "modifiers": "public", "return": "", "signature": " AccessControlManagerImpl(@NotNull Root root, @NotNull NamePathMapper namePathMapper,\n                                    @NotNull SecurityProvider securityProvider)", "full_signature": "public  AccessControlManagerImpl(@NotNull Root root, @NotNull NamePathMapper namePathMapper,\n                                    @NotNull SecurityProvider securityProvider)", "class_method_signature": "AccessControlManagerImpl.AccessControlManagerImpl(@NotNull Root root, @NotNull NamePathMapper namePathMapper,\n                                    @NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": true}, {"identifier": "getPolicies", "parameters": "(@Nullable String absPath)", "modifiers": "@NotNull @Override public", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getPolicies(@Nullable String absPath)", "full_signature": "@NotNull @Override public AccessControlPolicy[] getPolicies(@Nullable String absPath)", "class_method_signature": "AccessControlManagerImpl.getPolicies(@Nullable String absPath)", "testcase": false, "constructor": false}, {"identifier": "getEffectivePolicies", "parameters": "(@Nullable String absPath)", "modifiers": "@NotNull @Override public", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getEffectivePolicies(@Nullable String absPath)", "full_signature": "@NotNull @Override public AccessControlPolicy[] getEffectivePolicies(@Nullable String absPath)", "class_method_signature": "AccessControlManagerImpl.getEffectivePolicies(@Nullable String absPath)", "testcase": false, "constructor": false}, {"identifier": "isEffectiveReadPath", "parameters": "(@Nullable String oakPath)", "modifiers": "private", "return": "boolean", "signature": "boolean isEffectiveReadPath(@Nullable String oakPath)", "full_signature": "private boolean isEffectiveReadPath(@Nullable String oakPath)", "class_method_signature": "AccessControlManagerImpl.isEffectiveReadPath(@Nullable String oakPath)", "testcase": false, "constructor": false}, {"identifier": "getApplicablePolicies", "parameters": "(@Nullable String absPath)", "modifiers": "@NotNull @Override public", "return": "AccessControlPolicyIterator", "signature": "AccessControlPolicyIterator getApplicablePolicies(@Nullable String absPath)", "full_signature": "@NotNull @Override public AccessControlPolicyIterator getApplicablePolicies(@Nullable String absPath)", "class_method_signature": "AccessControlManagerImpl.getApplicablePolicies(@Nullable String absPath)", "testcase": false, "constructor": false}, {"identifier": "setPolicy", "parameters": "(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void setPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "full_signature": "@Override public void setPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "class_method_signature": "AccessControlManagerImpl.setPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "setPrincipalBasedAcl", "parameters": "(PrincipalACL principalAcl)", "modifiers": "private", "return": "void", "signature": "void setPrincipalBasedAcl(PrincipalACL principalAcl)", "full_signature": "private void setPrincipalBasedAcl(PrincipalACL principalAcl)", "class_method_signature": "AccessControlManagerImpl.setPrincipalBasedAcl(PrincipalACL principalAcl)", "testcase": false, "constructor": false}, {"identifier": "setNodeBasedAcl", "parameters": "(@Nullable String oakPath, @NotNull Tree tree,\n                                 @NotNull ACL acl)", "modifiers": "private", "return": "void", "signature": "void setNodeBasedAcl(@Nullable String oakPath, @NotNull Tree tree,\n                                 @NotNull ACL acl)", "full_signature": "private void setNodeBasedAcl(@Nullable String oakPath, @NotNull Tree tree,\n                                 @NotNull ACL acl)", "class_method_signature": "AccessControlManagerImpl.setNodeBasedAcl(@Nullable String oakPath, @NotNull Tree tree,\n                                 @NotNull ACL acl)", "testcase": false, "constructor": false}, {"identifier": "removePolicy", "parameters": "(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "modifiers": "@Override public", "return": "void", "signature": "void removePolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "full_signature": "@Override public void removePolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "class_method_signature": "AccessControlManagerImpl.removePolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "getApplicablePolicies", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "JackrabbitAccessControlPolicy[]", "signature": "JackrabbitAccessControlPolicy[] getApplicablePolicies(@NotNull Principal principal)", "full_signature": "@NotNull @Override public JackrabbitAccessControlPolicy[] getApplicablePolicies(@NotNull Principal principal)", "class_method_signature": "AccessControlManagerImpl.getApplicablePolicies(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getPolicies", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "JackrabbitAccessControlPolicy[]", "signature": "JackrabbitAccessControlPolicy[] getPolicies(@NotNull Principal principal)", "full_signature": "@NotNull @Override public JackrabbitAccessControlPolicy[] getPolicies(@NotNull Principal principal)", "class_method_signature": "AccessControlManagerImpl.getPolicies(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getEffectivePolicies", "parameters": "(@NotNull Set<Principal> principals)", "modifiers": "@NotNull @Override public", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getEffectivePolicies(@NotNull Set<Principal> principals)", "full_signature": "@NotNull @Override public AccessControlPolicy[] getEffectivePolicies(@NotNull Set<Principal> principals)", "class_method_signature": "AccessControlManagerImpl.getEffectivePolicies(@NotNull Set<Principal> principals)", "testcase": false, "constructor": false}, {"identifier": "defines", "parameters": "(String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean defines(String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "full_signature": "@Override public boolean defines(String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "class_method_signature": "AccessControlManagerImpl.defines(String absPath, @NotNull AccessControlPolicy accessControlPolicy)", "testcase": false, "constructor": false}, {"identifier": "getAclTree", "parameters": "(@Nullable String oakPath, @NotNull Tree accessControlledTree)", "modifiers": "@Nullable private", "return": "Tree", "signature": "Tree getAclTree(@Nullable String oakPath, @NotNull Tree accessControlledTree)", "full_signature": "@Nullable private Tree getAclTree(@Nullable String oakPath, @NotNull Tree accessControlledTree)", "class_method_signature": "AccessControlManagerImpl.getAclTree(@Nullable String oakPath, @NotNull Tree accessControlledTree)", "testcase": false, "constructor": false}, {"identifier": "createAclTree", "parameters": "(@Nullable String oakPath, @NotNull Tree tree)", "modifiers": "@NotNull private", "return": "Tree", "signature": "Tree createAclTree(@Nullable String oakPath, @NotNull Tree tree)", "full_signature": "@NotNull private Tree createAclTree(@Nullable String oakPath, @NotNull Tree tree)", "class_method_signature": "AccessControlManagerImpl.createAclTree(@Nullable String oakPath, @NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "createACL", "parameters": "(@Nullable String oakPath,\n                                                  @NotNull Tree accessControlledTree,\n                                                  boolean isEffectivePolicy,\n                                                  @NotNull Predicate<Tree> predicate)", "modifiers": "@Nullable private", "return": "JackrabbitAccessControlList", "signature": "JackrabbitAccessControlList createACL(@Nullable String oakPath,\n                                                  @NotNull Tree accessControlledTree,\n                                                  boolean isEffectivePolicy,\n                                                  @NotNull Predicate<Tree> predicate)", "full_signature": "@Nullable private JackrabbitAccessControlList createACL(@Nullable String oakPath,\n                                                  @NotNull Tree accessControlledTree,\n                                                  boolean isEffectivePolicy,\n                                                  @NotNull Predicate<Tree> predicate)", "class_method_signature": "AccessControlManagerImpl.createACL(@Nullable String oakPath,\n                                                  @NotNull Tree accessControlledTree,\n                                                  boolean isEffectivePolicy,\n                                                  @NotNull Predicate<Tree> predicate)", "testcase": false, "constructor": false}, {"identifier": "createPrincipalACL", "parameters": "(@Nullable String oakPath,\n                                                           @NotNull Principal principal)", "modifiers": "@Nullable private", "return": "JackrabbitAccessControlList", "signature": "JackrabbitAccessControlList createPrincipalACL(@Nullable String oakPath,\n                                                           @NotNull Principal principal)", "full_signature": "@Nullable private JackrabbitAccessControlList createPrincipalACL(@Nullable String oakPath,\n                                                           @NotNull Principal principal)", "class_method_signature": "AccessControlManagerImpl.createPrincipalACL(@Nullable String oakPath,\n                                                           @NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "createACE", "parameters": "(@Nullable String oakPath,\n                          @NotNull Tree aceTree,\n                          @NotNull RestrictionProvider restrictionProvider,\n                          @NotNull Map<String, Principal> principalMap)", "modifiers": "@NotNull private", "return": "ACE", "signature": "ACE createACE(@Nullable String oakPath,\n                          @NotNull Tree aceTree,\n                          @NotNull RestrictionProvider restrictionProvider,\n                          @NotNull Map<String, Principal> principalMap)", "full_signature": "@NotNull private ACE createACE(@Nullable String oakPath,\n                          @NotNull Tree aceTree,\n                          @NotNull RestrictionProvider restrictionProvider,\n                          @NotNull Map<String, Principal> principalMap)", "class_method_signature": "AccessControlManagerImpl.createACE(@Nullable String oakPath,\n                          @NotNull Tree aceTree,\n                          @NotNull RestrictionProvider restrictionProvider,\n                          @NotNull Map<String, Principal> principalMap)", "testcase": false, "constructor": false}, {"identifier": "searchAces", "parameters": "(@NotNull Set<Principal> principals, @NotNull Root root)", "modifiers": "@NotNull private static", "return": "Result", "signature": "Result searchAces(@NotNull Set<Principal> principals, @NotNull Root root)", "full_signature": "@NotNull private static Result searchAces(@NotNull Set<Principal> principals, @NotNull Root root)", "class_method_signature": "AccessControlManagerImpl.searchAces(@NotNull Set<Principal> principals, @NotNull Root root)", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "(@NotNull Tree aceTree, @NotNull Map<String, Principal> principalMap)", "modifiers": "@NotNull private", "return": "Principal", "signature": "Principal getPrincipal(@NotNull Tree aceTree, @NotNull Map<String, Principal> principalMap)", "full_signature": "@NotNull private Principal getPrincipal(@NotNull Tree aceTree, @NotNull Map<String, Principal> principalMap)", "class_method_signature": "AccessControlManagerImpl.getPrincipal(@NotNull Tree aceTree, @NotNull Map<String, Principal> principalMap)", "testcase": false, "constructor": false}, {"identifier": "getNodePath", "parameters": "(ACE principalBasedAce)", "modifiers": "private", "return": "String", "signature": "String getNodePath(ACE principalBasedAce)", "full_signature": "private String getNodePath(ACE principalBasedAce)", "class_method_signature": "AccessControlManagerImpl.getNodePath(ACE principalBasedAce)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlManagerImpl.java"}, "focal_method": {"identifier": "setPolicy", "parameters": "(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy) throws RepositoryException {\n        String oakPath = getOakPath(absPath);\n        Util.checkValidPolicy(oakPath, policy);\n\n        if (policy instanceof PrincipalACL) {\n            setPrincipalBasedAcl((PrincipalACL) policy);\n        } else {\n            Tree tree = getTree(oakPath, Permissions.MODIFY_ACCESS_CONTROL, true);\n            setNodeBasedAcl(oakPath, tree, (ACL) policy);\n        }\n    }", "signature": "void setPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "full_signature": "@Override public void setPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "class_method_signature": "AccessControlManagerImpl.setPolicy(@Nullable String absPath, @NotNull AccessControlPolicy policy)", "testcase": false, "constructor": false, "invocations": ["getOakPath", "checkValidPolicy", "setPrincipalBasedAcl", "getTree", "setNodeBasedAcl"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}