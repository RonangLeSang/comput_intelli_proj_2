{"test_class": {"identifier": "PrivilegeBitsTest", "superclass": "", "interfaces": "implements PrivilegeConstants", "fields": [{"original_string": "private static final long NO_PRIVILEGE = 0;", "modifier": "private static final", "type": "long", "declarator": "NO_PRIVILEGE = 0", "var_name": "NO_PRIVILEGE"}, {"original_string": "private static final PrivilegeBits READ_NODES_PRIVILEGE_BITS = BUILT_IN.get(REP_READ_NODES);", "modifier": "private static final", "type": "PrivilegeBits", "declarator": "READ_NODES_PRIVILEGE_BITS = BUILT_IN.get(REP_READ_NODES)", "var_name": "READ_NODES_PRIVILEGE_BITS"}, {"original_string": "private static final long[] LONGS = new long[]{1, 2, 13, 199, 512, Long.MAX_VALUE / 2, Long.MAX_VALUE - 1, Long.MAX_VALUE};", "modifier": "private static final", "type": "long[]", "declarator": "LONGS = new long[]{1, 2, 13, 199, 512, Long.MAX_VALUE / 2, Long.MAX_VALUE - 1, Long.MAX_VALUE}", "var_name": "LONGS"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/privilege/PrivilegeBitsTest.java"}, "test_case": {"identifier": "testCalculatePermissionsModifyPropertyAggregated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculatePermissionsModifyPropertyAggregated() {\n        PrivilegeBitsProvider provider = new PrivilegeBitsProvider(mock(Root.class));\n\n        // jcr:modifyProperty aggregate\n        PrivilegeBits add_change = provider.getBits(REP_ADD_PROPERTIES, REP_ALTER_PROPERTIES);\n        long permissions = (Permissions.ADD_PROPERTY | Permissions.MODIFY_PROPERTY);\n        assertEquals(permissions, PrivilegeBits.calculatePermissions(add_change, PrivilegeBits.EMPTY, true));\n        assertEquals(permissions, PrivilegeBits.calculatePermissions(add_change, add_change, true));\n\n        PrivilegeBits add_rm = provider.getBits(REP_ADD_PROPERTIES, REP_REMOVE_PROPERTIES);\n        permissions = (Permissions.ADD_PROPERTY | Permissions.REMOVE_PROPERTY);\n        assertEquals(permissions, PrivilegeBits.calculatePermissions(add_rm, PrivilegeBits.EMPTY, true));\n        assertEquals(permissions, PrivilegeBits.calculatePermissions(add_rm, add_rm, true));\n\n        PrivilegeBits ch_rm = provider.getBits(REP_ALTER_PROPERTIES, REP_REMOVE_PROPERTIES);\n        permissions = (Permissions.MODIFY_PROPERTY | Permissions.REMOVE_PROPERTY);\n        assertEquals(permissions, PrivilegeBits.calculatePermissions(ch_rm, PrivilegeBits.EMPTY, true));\n        assertEquals(permissions, PrivilegeBits.calculatePermissions(ch_rm, add_rm, true));\n    }", "signature": "void testCalculatePermissionsModifyPropertyAggregated()", "full_signature": "@Test public void testCalculatePermissionsModifyPropertyAggregated()", "class_method_signature": "PrivilegeBitsTest.testCalculatePermissionsModifyPropertyAggregated()", "testcase": true, "constructor": false, "invocations": ["mock", "getBits", "assertEquals", "calculatePermissions", "assertEquals", "calculatePermissions", "getBits", "assertEquals", "calculatePermissions", "assertEquals", "calculatePermissions", "getBits", "assertEquals", "calculatePermissions", "assertEquals", "calculatePermissions"]}, "focal_class": {"identifier": "PrivilegeBits", "superclass": "", "interfaces": "implements PrivilegeConstants", "fields": [{"original_string": "private static final long NO_PRIVILEGE = 0;", "modifier": "private static final", "type": "long", "declarator": "NO_PRIVILEGE = 0", "var_name": "NO_PRIVILEGE"}, {"original_string": "private static final long READ_NODES = 1;", "modifier": "private static final", "type": "long", "declarator": "READ_NODES = 1", "var_name": "READ_NODES"}, {"original_string": "private static final long READ_PROPERTIES = READ_NODES << 1;", "modifier": "private static final", "type": "long", "declarator": "READ_PROPERTIES = READ_NODES << 1", "var_name": "READ_PROPERTIES"}, {"original_string": "private static final long ADD_PROPERTIES = READ_PROPERTIES << 1;", "modifier": "private static final", "type": "long", "declarator": "ADD_PROPERTIES = READ_PROPERTIES << 1", "var_name": "ADD_PROPERTIES"}, {"original_string": "private static final long ALTER_PROPERTIES = ADD_PROPERTIES << 1;", "modifier": "private static final", "type": "long", "declarator": "ALTER_PROPERTIES = ADD_PROPERTIES << 1", "var_name": "ALTER_PROPERTIES"}, {"original_string": "private static final long REMOVE_PROPERTIES = ALTER_PROPERTIES << 1;", "modifier": "private static final", "type": "long", "declarator": "REMOVE_PROPERTIES = ALTER_PROPERTIES << 1", "var_name": "REMOVE_PROPERTIES"}, {"original_string": "private static final long ADD_CHILD_NODES = REMOVE_PROPERTIES << 1;", "modifier": "private static final", "type": "long", "declarator": "ADD_CHILD_NODES = REMOVE_PROPERTIES << 1", "var_name": "ADD_CHILD_NODES"}, {"original_string": "private static final long REMOVE_CHILD_NODES = ADD_CHILD_NODES << 1;", "modifier": "private static final", "type": "long", "declarator": "REMOVE_CHILD_NODES = ADD_CHILD_NODES << 1", "var_name": "REMOVE_CHILD_NODES"}, {"original_string": "private static final long REMOVE_NODE = REMOVE_CHILD_NODES << 1;", "modifier": "private static final", "type": "long", "declarator": "REMOVE_NODE = REMOVE_CHILD_NODES << 1", "var_name": "REMOVE_NODE"}, {"original_string": "private static final long READ_AC = REMOVE_NODE << 1;", "modifier": "private static final", "type": "long", "declarator": "READ_AC = REMOVE_NODE << 1", "var_name": "READ_AC"}, {"original_string": "private static final long MODIFY_AC = READ_AC << 1;", "modifier": "private static final", "type": "long", "declarator": "MODIFY_AC = READ_AC << 1", "var_name": "MODIFY_AC"}, {"original_string": "private static final long NODE_TYPE_MNGMT = MODIFY_AC << 1;", "modifier": "private static final", "type": "long", "declarator": "NODE_TYPE_MNGMT = MODIFY_AC << 1", "var_name": "NODE_TYPE_MNGMT"}, {"original_string": "private static final long VERSION_MNGMT = NODE_TYPE_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "VERSION_MNGMT = NODE_TYPE_MNGMT << 1", "var_name": "VERSION_MNGMT"}, {"original_string": "private static final long LOCK_MNGMT = VERSION_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "LOCK_MNGMT = VERSION_MNGMT << 1", "var_name": "LOCK_MNGMT"}, {"original_string": "private static final long LIFECYCLE_MNGMT = LOCK_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "LIFECYCLE_MNGMT = LOCK_MNGMT << 1", "var_name": "LIFECYCLE_MNGMT"}, {"original_string": "private static final long RETENTION_MNGMT = LIFECYCLE_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "RETENTION_MNGMT = LIFECYCLE_MNGMT << 1", "var_name": "RETENTION_MNGMT"}, {"original_string": "private static final long WORKSPACE_MNGMT = RETENTION_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "WORKSPACE_MNGMT = RETENTION_MNGMT << 1", "var_name": "WORKSPACE_MNGMT"}, {"original_string": "private static final long NODE_TYPE_DEF_MNGMT = WORKSPACE_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "NODE_TYPE_DEF_MNGMT = WORKSPACE_MNGMT << 1", "var_name": "NODE_TYPE_DEF_MNGMT"}, {"original_string": "private static final long NAMESPACE_MNGMT = NODE_TYPE_DEF_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "NAMESPACE_MNGMT = NODE_TYPE_DEF_MNGMT << 1", "var_name": "NAMESPACE_MNGMT"}, {"original_string": "private static final long PRIVILEGE_MNGMT = NAMESPACE_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "PRIVILEGE_MNGMT = NAMESPACE_MNGMT << 1", "var_name": "PRIVILEGE_MNGMT"}, {"original_string": "private static final long USER_MNGMT = PRIVILEGE_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "USER_MNGMT = PRIVILEGE_MNGMT << 1", "var_name": "USER_MNGMT"}, {"original_string": "private static final long INDEX_DEFINITION_MNGMT = USER_MNGMT << 1;", "modifier": "private static final", "type": "long", "declarator": "INDEX_DEFINITION_MNGMT = USER_MNGMT << 1", "var_name": "INDEX_DEFINITION_MNGMT"}, {"original_string": "private static final long READ = READ_NODES | READ_PROPERTIES;", "modifier": "private static final", "type": "long", "declarator": "READ = READ_NODES | READ_PROPERTIES", "var_name": "READ"}, {"original_string": "private static final long MODIFY_PROPERTIES = ADD_PROPERTIES | ALTER_PROPERTIES | REMOVE_PROPERTIES;", "modifier": "private static final", "type": "long", "declarator": "MODIFY_PROPERTIES = ADD_PROPERTIES | ALTER_PROPERTIES | REMOVE_PROPERTIES", "var_name": "MODIFY_PROPERTIES"}, {"original_string": "private static final long WRITE = MODIFY_PROPERTIES | ADD_CHILD_NODES | REMOVE_CHILD_NODES | REMOVE_NODE;", "modifier": "private static final", "type": "long", "declarator": "WRITE = MODIFY_PROPERTIES | ADD_CHILD_NODES | REMOVE_CHILD_NODES | REMOVE_NODE", "var_name": "WRITE"}, {"original_string": "private static final long WRITE2 = WRITE | NODE_TYPE_MNGMT;", "modifier": "private static final", "type": "long", "declarator": "WRITE2 = WRITE | NODE_TYPE_MNGMT", "var_name": "WRITE2"}, {"original_string": "public static final PrivilegeBits EMPTY = new PrivilegeBits(UnmodifiableData.EMPTY);", "modifier": "public static final", "type": "PrivilegeBits", "declarator": "EMPTY = new PrivilegeBits(UnmodifiableData.EMPTY)", "var_name": "EMPTY"}, {"original_string": "public static final Map<String, PrivilegeBits> BUILT_IN;", "modifier": "public static final", "type": "Map<String, PrivilegeBits>", "declarator": "BUILT_IN", "var_name": "BUILT_IN"}, {"original_string": "private static final Map<Long, String> BUILT_IN_BITS;", "modifier": "private static final", "type": "Map<Long, String>", "declarator": "BUILT_IN_BITS", "var_name": "BUILT_IN_BITS"}, {"original_string": "public static final PrivilegeBits NEXT_AFTER_BUILT_INS = getInstance(INDEX_DEFINITION_MNGMT).nextBits();", "modifier": "public static final", "type": "PrivilegeBits", "declarator": "NEXT_AFTER_BUILT_INS = getInstance(INDEX_DEFINITION_MNGMT).nextBits()", "var_name": "NEXT_AFTER_BUILT_INS"}, {"original_string": "private final Data d;", "modifier": "private final", "type": "Data", "declarator": "d", "var_name": "d"}], "methods": [{"identifier": "PrivilegeBits", "parameters": "(Data d)", "modifiers": "private", "return": "", "signature": " PrivilegeBits(Data d)", "full_signature": "private  PrivilegeBits(Data d)", "class_method_signature": "PrivilegeBits.PrivilegeBits(Data d)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "PrivilegeBits", "signature": "PrivilegeBits getInstance()", "full_signature": "public static PrivilegeBits getInstance()", "class_method_signature": "PrivilegeBits.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(@NotNull PrivilegeBits... base)", "modifiers": "@NotNull public static", "return": "PrivilegeBits", "signature": "PrivilegeBits getInstance(@NotNull PrivilegeBits... base)", "full_signature": "@NotNull public static PrivilegeBits getInstance(@NotNull PrivilegeBits... base)", "class_method_signature": "PrivilegeBits.getInstance(@NotNull PrivilegeBits... base)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(@Nullable PropertyState property)", "modifiers": "@NotNull public static", "return": "PrivilegeBits", "signature": "PrivilegeBits getInstance(@Nullable PropertyState property)", "full_signature": "@NotNull public static PrivilegeBits getInstance(@Nullable PropertyState property)", "class_method_signature": "PrivilegeBits.getInstance(@Nullable PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(@Nullable Tree tree)", "modifiers": "@NotNull public static", "return": "PrivilegeBits", "signature": "PrivilegeBits getInstance(@Nullable Tree tree)", "full_signature": "@NotNull public static PrivilegeBits getInstance(@Nullable Tree tree)", "class_method_signature": "PrivilegeBits.getInstance(@Nullable Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(long bits)", "modifiers": "@NotNull private static", "return": "PrivilegeBits", "signature": "PrivilegeBits getInstance(long bits)", "full_signature": "@NotNull private static PrivilegeBits getInstance(long bits)", "class_method_signature": "PrivilegeBits.getInstance(long bits)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(long[] bits)", "modifiers": "@NotNull private static", "return": "PrivilegeBits", "signature": "PrivilegeBits getInstance(long[] bits)", "full_signature": "@NotNull private static PrivilegeBits getInstance(long[] bits)", "class_method_signature": "PrivilegeBits.getInstance(long[] bits)", "testcase": false, "constructor": false}, {"identifier": "calculatePermissions", "parameters": "(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "modifiers": "public static", "return": "long", "signature": "long calculatePermissions(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "full_signature": "public static long calculatePermissions(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "class_method_signature": "PrivilegeBits.calculatePermissions(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "PrivilegeBits.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "unmodifiable", "parameters": "()", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits unmodifiable()", "full_signature": "@NotNull public PrivilegeBits unmodifiable()", "class_method_signature": "PrivilegeBits.unmodifiable()", "testcase": false, "constructor": false}, {"identifier": "modifiable", "parameters": "()", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits modifiable()", "full_signature": "@NotNull public PrivilegeBits modifiable()", "class_method_signature": "PrivilegeBits.modifiable()", "testcase": false, "constructor": false}, {"identifier": "includes", "parameters": "(@NotNull PrivilegeBits otherBits)", "modifiers": "public", "return": "boolean", "signature": "boolean includes(@NotNull PrivilegeBits otherBits)", "full_signature": "public boolean includes(@NotNull PrivilegeBits otherBits)", "class_method_signature": "PrivilegeBits.includes(@NotNull PrivilegeBits otherBits)", "testcase": false, "constructor": false}, {"identifier": "isBuiltin", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBuiltin()", "full_signature": "public boolean isBuiltin()", "class_method_signature": "PrivilegeBits.isBuiltin()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@NotNull PrivilegeBits other)", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits add(@NotNull PrivilegeBits other)", "full_signature": "@NotNull public PrivilegeBits add(@NotNull PrivilegeBits other)", "class_method_signature": "PrivilegeBits.add(@NotNull PrivilegeBits other)", "testcase": false, "constructor": false}, {"identifier": "diff", "parameters": "(@NotNull PrivilegeBits other)", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits diff(@NotNull PrivilegeBits other)", "full_signature": "@NotNull public PrivilegeBits diff(@NotNull PrivilegeBits other)", "class_method_signature": "PrivilegeBits.diff(@NotNull PrivilegeBits other)", "testcase": false, "constructor": false}, {"identifier": "addDifference", "parameters": "(@NotNull PrivilegeBits a, @NotNull PrivilegeBits b)", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits addDifference(@NotNull PrivilegeBits a, @NotNull PrivilegeBits b)", "full_signature": "@NotNull public PrivilegeBits addDifference(@NotNull PrivilegeBits a, @NotNull PrivilegeBits b)", "class_method_signature": "PrivilegeBits.addDifference(@NotNull PrivilegeBits a, @NotNull PrivilegeBits b)", "testcase": false, "constructor": false}, {"identifier": "retain", "parameters": "(@NotNull PrivilegeBits other)", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits retain(@NotNull PrivilegeBits other)", "full_signature": "@NotNull public PrivilegeBits retain(@NotNull PrivilegeBits other)", "class_method_signature": "PrivilegeBits.retain(@NotNull PrivilegeBits other)", "testcase": false, "constructor": false}, {"identifier": "asPropertyState", "parameters": "(@NotNull String name)", "modifiers": "@NotNull public", "return": "PropertyState", "signature": "PropertyState asPropertyState(@NotNull String name)", "full_signature": "@NotNull public PropertyState asPropertyState(@NotNull String name)", "class_method_signature": "PrivilegeBits.asPropertyState(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "nextBits", "parameters": "()", "modifiers": "@NotNull public", "return": "PrivilegeBits", "signature": "PrivilegeBits nextBits()", "full_signature": "@NotNull public PrivilegeBits nextBits()", "class_method_signature": "PrivilegeBits.nextBits()", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(@NotNull Tree tree)", "modifiers": "public", "return": "void", "signature": "void writeTo(@NotNull Tree tree)", "full_signature": "public void writeTo(@NotNull Tree tree)", "class_method_signature": "PrivilegeBits.writeTo(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "unsupported", "parameters": "()", "modifiers": "private static", "return": "UnsupportedOperationException", "signature": "UnsupportedOperationException unsupported()", "full_signature": "private static UnsupportedOperationException unsupported()", "class_method_signature": "PrivilegeBits.unsupported()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PrivilegeBits.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PrivilegeBits.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PrivilegeBits.toString()", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/privilege/PrivilegeBits.java"}, "focal_method": {"identifier": "calculatePermissions", "parameters": "(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "modifiers": "public static", "return": "long", "body": "public static long calculatePermissions(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow) {\n        long privs = bits.d.longValue();\n        long parentPrivs = parentBits.d.longValue();\n        long perm = Permissions.NO_PERMISSION;\n        if ((privs & READ) == READ) {\n            perm |= Permissions.READ;\n        } else {\n            if ((privs & READ_NODES) == READ_NODES) {\n                perm |= Permissions.READ_NODE;\n            } else if (((privs & READ_PROPERTIES) == READ_PROPERTIES)) {\n                perm |= Permissions.READ_PROPERTY;\n            }\n        }\n        if ((privs & MODIFY_PROPERTIES) == MODIFY_PROPERTIES) {\n            perm |= Permissions.SET_PROPERTY;\n        } else {\n            if ((privs & ADD_PROPERTIES) == ADD_PROPERTIES) {\n                perm |= Permissions.ADD_PROPERTY;\n            }\n            if ((privs & ALTER_PROPERTIES) == ALTER_PROPERTIES) {\n                perm |= Permissions.MODIFY_PROPERTY;\n            }\n            if ((privs & REMOVE_PROPERTIES) == REMOVE_PROPERTIES) {\n                perm |= Permissions.REMOVE_PROPERTY;\n            }\n        }\n\n        // add_node permission is granted through privilege on the parent.\n        if ((parentPrivs & ADD_CHILD_NODES) == ADD_CHILD_NODES) {\n            perm |= Permissions.ADD_NODE;\n        }\n\n        /*\n         remove_node is\n         allowed: only if remove_child_nodes privilege is present on\n                  the parent AND remove_node is present on the node itself\n         denied : if either remove_child_nodes is denied on the parent\n                  OR remove_node is denied on the node itself.\n        */\n        if (isAllow) {\n            if ((parentPrivs & REMOVE_CHILD_NODES) == REMOVE_CHILD_NODES &&\n                    (privs & REMOVE_NODE) == REMOVE_NODE) {\n                perm |= Permissions.REMOVE_NODE;\n            }\n        } else {\n            if ((parentPrivs & REMOVE_CHILD_NODES) == REMOVE_CHILD_NODES ||\n                    (privs & REMOVE_NODE) == REMOVE_NODE) {\n                perm |= Permissions.REMOVE_NODE;\n            }\n        }\n\n        // modify_child_node_collection permission\n        if ((privs & ADD_CHILD_NODES) == ADD_CHILD_NODES &&\n                (privs & REMOVE_CHILD_NODES) == REMOVE_CHILD_NODES) {\n            perm |= Permissions.MODIFY_CHILD_NODE_COLLECTION;\n        }\n\n        // the remaining (special) permissions are simply defined on the node\n        if ((privs & READ_AC) == READ_AC) {\n            perm |= Permissions.READ_ACCESS_CONTROL;\n        }\n        if ((privs & MODIFY_AC) == MODIFY_AC) {\n            perm |= Permissions.MODIFY_ACCESS_CONTROL;\n        }\n        if ((privs & LIFECYCLE_MNGMT) == LIFECYCLE_MNGMT) {\n            perm |= Permissions.LIFECYCLE_MANAGEMENT;\n        }\n        if ((privs & LOCK_MNGMT) == LOCK_MNGMT) {\n            perm |= Permissions.LOCK_MANAGEMENT;\n        }\n        if ((privs & NODE_TYPE_MNGMT) == NODE_TYPE_MNGMT) {\n            perm |= Permissions.NODE_TYPE_MANAGEMENT;\n        }\n        if ((privs & RETENTION_MNGMT) == RETENTION_MNGMT) {\n            perm |= Permissions.RETENTION_MANAGEMENT;\n        }\n        if ((privs & VERSION_MNGMT) == VERSION_MNGMT) {\n            perm |= Permissions.VERSION_MANAGEMENT;\n        }\n        if ((privs & WORKSPACE_MNGMT) == WORKSPACE_MNGMT) {\n            perm |= Permissions.WORKSPACE_MANAGEMENT;\n        }\n        if ((privs & NODE_TYPE_DEF_MNGMT) == NODE_TYPE_DEF_MNGMT) {\n            perm |= Permissions.NODE_TYPE_DEFINITION_MANAGEMENT;\n        }\n        if ((privs & NAMESPACE_MNGMT) == NAMESPACE_MNGMT) {\n            perm |= Permissions.NAMESPACE_MANAGEMENT;\n        }\n        if ((privs & PRIVILEGE_MNGMT) == PRIVILEGE_MNGMT) {\n            perm |= Permissions.PRIVILEGE_MANAGEMENT;\n        }\n        if ((privs & USER_MNGMT) == USER_MNGMT) {\n            perm |= Permissions.USER_MANAGEMENT;\n        }\n        if ((privs & INDEX_DEFINITION_MNGMT) == INDEX_DEFINITION_MNGMT) {\n            perm |= Permissions.INDEX_DEFINITION_MANAGEMENT;\n        }\n        return perm;\n    }", "signature": "long calculatePermissions(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "full_signature": "public static long calculatePermissions(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "class_method_signature": "PrivilegeBits.calculatePermissions(@NotNull PrivilegeBits bits,\n                                            @NotNull PrivilegeBits parentBits,\n                                            boolean isAllow)", "testcase": false, "constructor": false, "invocations": ["longValue", "longValue"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}