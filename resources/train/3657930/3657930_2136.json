{"test_class": {"identifier": "ExternalIdentityRefTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String USERID = \"user%id\";", "modifier": "private static final", "type": "String", "declarator": "USERID = \"user%id\"", "var_name": "USERID"}, {"original_string": "private static final String PROVIDER_NAME = \"provider;Name\";", "modifier": "private static final", "type": "String", "declarator": "PROVIDER_NAME = \"provider;Name\"", "var_name": "PROVIDER_NAME"}, {"original_string": "private ExternalIdentityRef refNullProvider = new ExternalIdentityRef(USERID, null);", "modifier": "private", "type": "ExternalIdentityRef", "declarator": "refNullProvider = new ExternalIdentityRef(USERID, null)", "var_name": "refNullProvider"}, {"original_string": "private ExternalIdentityRef refEmptyProvider = new ExternalIdentityRef(USERID, \"\");", "modifier": "private", "type": "ExternalIdentityRef", "declarator": "refEmptyProvider = new ExternalIdentityRef(USERID, \"\")", "var_name": "refEmptyProvider"}, {"original_string": "private ExternalIdentityRef ref = new ExternalIdentityRef(USERID, PROVIDER_NAME);", "modifier": "private", "type": "ExternalIdentityRef", "declarator": "ref = new ExternalIdentityRef(USERID, PROVIDER_NAME)", "var_name": "ref"}], "file": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalIdentityRefTest.java"}, "test_case": {"identifier": "testFromString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromString() {\n        ExternalIdentityRef r = ExternalIdentityRef.fromString(refNullProvider.getString());\n        assertEquals(refNullProvider, r);\n        assertEquals(USERID, r.getId());\n        assertEquals(refNullProvider.getString(), r.getString());\n        assertNull(r.getProviderName());\n\n        r = ExternalIdentityRef.fromString(refEmptyProvider.getString());\n        assertEquals(refEmptyProvider, r);\n        assertEquals(USERID, r.getId());\n        assertEquals(refEmptyProvider.getString(), r.getString());\n        assertNull(r.getProviderName()); // empty provider string is converted to null\n\n        r = ExternalIdentityRef.fromString(ref.getString());\n        assertEquals(ref, r);\n        assertEquals(USERID, r.getId());\n        assertEquals(PROVIDER_NAME, r.getProviderName());\n        assertEquals(ref.getString(), r.getString());\n    }", "signature": "void testFromString()", "full_signature": "@Test public void testFromString()", "class_method_signature": "ExternalIdentityRefTest.testFromString()", "testcase": true, "constructor": false, "invocations": ["fromString", "getString", "assertEquals", "assertEquals", "getId", "assertEquals", "getString", "getString", "assertNull", "getProviderName", "fromString", "getString", "assertEquals", "assertEquals", "getId", "assertEquals", "getString", "getString", "assertNull", "getProviderName", "fromString", "getString", "assertEquals", "assertEquals", "getId", "assertEquals", "getProviderName", "assertEquals", "getString", "getString"]}, "focal_class": {"identifier": "ExternalIdentityRef", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final String providerName;", "modifier": "private final", "type": "String", "declarator": "providerName", "var_name": "providerName"}, {"original_string": "private final String string;", "modifier": "private final", "type": "String", "declarator": "string", "var_name": "string"}], "methods": [{"identifier": "ExternalIdentityRef", "parameters": "(@NotNull String id, @Nullable String providerName)", "modifiers": "public", "return": "", "signature": " ExternalIdentityRef(@NotNull String id, @Nullable String providerName)", "full_signature": "public  ExternalIdentityRef(@NotNull String id, @Nullable String providerName)", "class_method_signature": "ExternalIdentityRef.ExternalIdentityRef(@NotNull String id, @Nullable String providerName)", "testcase": false, "constructor": true}, {"identifier": "getProviderName", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getProviderName()", "full_signature": "@Nullable public String getProviderName()", "class_method_signature": "ExternalIdentityRef.getProviderName()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getId()", "full_signature": "@NotNull public String getId()", "class_method_signature": "ExternalIdentityRef.getId()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getString()", "full_signature": "@NotNull public String getString()", "class_method_signature": "ExternalIdentityRef.getString()", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(@NotNull String str)", "modifiers": "@NotNull public static", "return": "ExternalIdentityRef", "signature": "ExternalIdentityRef fromString(@NotNull String str)", "full_signature": "@NotNull public static ExternalIdentityRef fromString(@NotNull String str)", "class_method_signature": "ExternalIdentityRef.fromString(@NotNull String str)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(@NotNull StringBuilder builder, @NotNull CharSequence str)", "modifiers": "private static", "return": "void", "signature": "void escape(@NotNull StringBuilder builder, @NotNull CharSequence str)", "full_signature": "private static void escape(@NotNull StringBuilder builder, @NotNull CharSequence str)", "class_method_signature": "ExternalIdentityRef.escape(@NotNull StringBuilder builder, @NotNull CharSequence str)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ExternalIdentityRef.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ExternalIdentityRef.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ExternalIdentityRef.hashCode()", "testcase": false, "constructor": false}], "file": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalIdentityRef.java"}, "focal_method": {"identifier": "fromString", "parameters": "(@NotNull String str)", "modifiers": "@NotNull public static", "return": "ExternalIdentityRef", "body": "@NotNull\n    public static ExternalIdentityRef fromString(@NotNull String str) {\n        int idx = str.indexOf(';');\n        if (idx < 0) {\n            return new ExternalIdentityRef(Text.unescape(str), null);\n        } else {\n            return new ExternalIdentityRef(\n                    Text.unescape(str.substring(0, idx)),\n                    Text.unescape(str.substring(idx+1))\n            );\n        }\n    }", "signature": "ExternalIdentityRef fromString(@NotNull String str)", "full_signature": "@NotNull public static ExternalIdentityRef fromString(@NotNull String str)", "class_method_signature": "ExternalIdentityRef.fromString(@NotNull String str)", "testcase": false, "constructor": false, "invocations": ["indexOf", "unescape", "unescape", "substring", "unescape", "substring"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}