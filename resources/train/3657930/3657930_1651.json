{"test_class": {"identifier": "IndexUpdateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EditorHook HOOK = new EditorHook(\n            new IndexUpdateProvider(new PropertyIndexEditorProvider()));", "modifier": "private static final", "type": "EditorHook", "declarator": "HOOK = new EditorHook(\n            new IndexUpdateProvider(new PropertyIndexEditorProvider()))", "var_name": "HOOK"}, {"original_string": "private NodeState root = INITIAL_CONTENT;", "modifier": "private", "type": "NodeState", "declarator": "root = INITIAL_CONTENT", "var_name": "root"}, {"original_string": "private NodeBuilder builder = root.builder();", "modifier": "private", "type": "NodeBuilder", "declarator": "builder = root.builder()", "var_name": "builder"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/index/IndexUpdateTest.java"}, "test_case": {"identifier": "testMissingProviderWithAsyncDef", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissingProviderWithAsyncDef() throws Exception {\n        final MissingIndexProviderStrategy mips = new MissingIndexProviderStrategy();\n        mips.setFailOnMissingIndexProvider(true);\n\n        // prepare different hooks for different types indexing cycles\n        EditorHook syncHook = new EditorHook((before, after, builder, info) ->\n                new IndexUpdate(emptyProvider(), null, after, builder, NOOP)\n                        .withMissingProviderStrategy(mips));\n        EditorHook asyncHook = new EditorHook((before, after, builder, info) ->\n                new IndexUpdate(emptyProvider(), \"async-run\", after, builder, NOOP)\n                        .withMissingProviderStrategy(mips));\n        EditorHook otherAsyncHook = new EditorHook((before, after, builder, info) ->\n                new IndexUpdate(emptyProvider(), \"other-async-run\", after, builder, NOOP)\n                        .withMissingProviderStrategy(mips));\n\n        builder = EmptyNodeState.EMPTY_NODE.builder();\n\n        // create async defs with nrt and sync mixed in\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME),\n                \"asyncIndex\", true, false, ImmutableSet.of(\"foo\"), null)\n                .setProperty(ASYNC_PROPERTY_NAME, ImmutableList.of(\"async-run\"), Type.STRINGS)\n                .setProperty(REINDEX_PROPERTY_NAME, false);\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME),\n                \"nrtIndex\", true, false, ImmutableSet.of(\"foo\"), null)\n                .setProperty(ASYNC_PROPERTY_NAME, ImmutableList.of(\"async-run\", \"nrt\"), Type.STRINGS)\n                .setProperty(REINDEX_PROPERTY_NAME, false);\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME),\n                \"asyncSyncIndex\", true, false, ImmutableSet.of(\"foo\"), null)\n                .setProperty(ASYNC_PROPERTY_NAME, ImmutableList.of(\"async-run\", \"sync\"), Type.STRINGS)\n                .setProperty(REINDEX_PROPERTY_NAME, false);\n\n        // node states to run hook on\n        NodeState before = builder.getNodeState();\n        builder.child(\"testRoot\").setProperty(\"foo\", \"abc\");\n        NodeState after = builder.getNodeState();\n\n        // sync run should be ok with missing provider for an async def\n        syncHook.processCommit(before, after, CommitInfo.EMPTY);\n\n        // unrelated async run should be ok with missing provider\n        otherAsyncHook.processCommit(before, after, CommitInfo.EMPTY);\n\n        // async run matching the def async lane still should fail\n        try {\n            asyncHook.processCommit(before, after, CommitInfo.EMPTY);\n            fail(\"commit should fail on missing index provider\");\n        } catch (CommitFailedException ex) {\n            // expected\n        }\n    }", "signature": "void testMissingProviderWithAsyncDef()", "full_signature": "@Test public void testMissingProviderWithAsyncDef()", "class_method_signature": "IndexUpdateTest.testMissingProviderWithAsyncDef()", "testcase": true, "constructor": false, "invocations": ["setFailOnMissingIndexProvider", "withMissingProviderStrategy", "emptyProvider", "withMissingProviderStrategy", "emptyProvider", "withMissingProviderStrategy", "emptyProvider", "builder", "setProperty", "setProperty", "createIndexDefinition", "child", "of", "of", "setProperty", "setProperty", "createIndexDefinition", "child", "of", "of", "setProperty", "setProperty", "createIndexDefinition", "child", "of", "of", "getNodeState", "setProperty", "child", "getNodeState", "processCommit", "processCommit", "processCommit", "fail"]}, "focal_class": {"identifier": "IndexUpdate", "superclass": "", "interfaces": "implements Editor, PathSource", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(IndexUpdate.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(IndexUpdate.class)", "var_name": "log"}, {"original_string": "private static final String TYPE_ELASTICSEARCH = \"elasticsearch\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_ELASTICSEARCH = \"elasticsearch\"", "var_name": "TYPE_ELASTICSEARCH"}, {"original_string": "static final boolean IGNORE_REINDEX_FLAGS = Boolean\n            .getBoolean(\"oak.indexUpdate.ignoreReindexFlags\");", "modifier": "static final", "type": "boolean", "declarator": "IGNORE_REINDEX_FLAGS = Boolean\n            .getBoolean(\"oak.indexUpdate.ignoreReindexFlags\")", "var_name": "IGNORE_REINDEX_FLAGS"}, {"original_string": "private final IndexUpdateRootState rootState;", "modifier": "private final", "type": "IndexUpdateRootState", "declarator": "rootState", "var_name": "rootState"}, {"original_string": "private final NodeBuilder builder;", "modifier": "private final", "type": "NodeBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private final IndexUpdate parent;", "modifier": "private final", "type": "IndexUpdate", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final List<Editor> editors = newArrayList();", "modifier": "private final", "type": "List<Editor>", "declarator": "editors = newArrayList()", "var_name": "editors"}, {"original_string": "private final Map<String, Editor> reindex = new HashMap<String, Editor>();", "modifier": "private final", "type": "Map<String, Editor>", "declarator": "reindex = new HashMap<String, Editor>()", "var_name": "reindex"}], "methods": [{"identifier": "IndexUpdate", "parameters": "(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback)", "modifiers": "public", "return": "", "signature": " IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback)", "full_signature": "public  IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback)", "class_method_signature": "IndexUpdate.IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback)", "testcase": false, "constructor": true}, {"identifier": "IndexUpdate", "parameters": "(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, CommitInfo commitInfo)", "modifiers": "public", "return": "", "signature": " IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, CommitInfo commitInfo)", "full_signature": "public  IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, CommitInfo commitInfo)", "class_method_signature": "IndexUpdate.IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, CommitInfo commitInfo)", "testcase": false, "constructor": true}, {"identifier": "IndexUpdate", "parameters": "(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, NodeTraversalCallback traversalCallback,\n            CommitInfo commitInfo, CorruptIndexHandler corruptIndexHandler)", "modifiers": "public", "return": "", "signature": " IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, NodeTraversalCallback traversalCallback,\n            CommitInfo commitInfo, CorruptIndexHandler corruptIndexHandler)", "full_signature": "public  IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, NodeTraversalCallback traversalCallback,\n            CommitInfo commitInfo, CorruptIndexHandler corruptIndexHandler)", "class_method_signature": "IndexUpdate.IndexUpdate(\n            IndexEditorProvider provider, String async,\n            NodeState root, NodeBuilder builder,\n            IndexUpdateCallback updateCallback, NodeTraversalCallback traversalCallback,\n            CommitInfo commitInfo, CorruptIndexHandler corruptIndexHandler)", "testcase": false, "constructor": true}, {"identifier": "IndexUpdate", "parameters": "(IndexUpdate parent, String name)", "modifiers": "private", "return": "", "signature": " IndexUpdate(IndexUpdate parent, String name)", "full_signature": "private  IndexUpdate(IndexUpdate parent, String name)", "class_method_signature": "IndexUpdate.IndexUpdate(IndexUpdate parent, String name)", "testcase": false, "constructor": true}, {"identifier": "enter", "parameters": "(NodeState before, NodeState after)", "modifiers": "@Override public", "return": "void", "signature": "void enter(NodeState before, NodeState after)", "full_signature": "@Override public void enter(NodeState before, NodeState after)", "class_method_signature": "IndexUpdate.enter(NodeState before, NodeState after)", "testcase": false, "constructor": false}, {"identifier": "isReindexingPerformed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReindexingPerformed()", "full_signature": "public boolean isReindexingPerformed()", "class_method_signature": "IndexUpdate.isReindexingPerformed()", "testcase": false, "constructor": false}, {"identifier": "getReindexStats", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getReindexStats()", "full_signature": "public List<String> getReindexStats()", "class_method_signature": "IndexUpdate.getReindexStats()", "testcase": false, "constructor": false}, {"identifier": "getUpdatedIndexPaths", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getUpdatedIndexPaths()", "full_signature": "public Set<String> getUpdatedIndexPaths()", "class_method_signature": "IndexUpdate.getUpdatedIndexPaths()", "testcase": false, "constructor": false}, {"identifier": "setTraversalRateEstimator", "parameters": "(TraversalRateEstimator estimator)", "modifiers": "public", "return": "void", "signature": "void setTraversalRateEstimator(TraversalRateEstimator estimator)", "full_signature": "public void setTraversalRateEstimator(TraversalRateEstimator estimator)", "class_method_signature": "IndexUpdate.setTraversalRateEstimator(TraversalRateEstimator estimator)", "testcase": false, "constructor": false}, {"identifier": "setNodeCountEstimator", "parameters": "(NodeCountEstimator nodeCountEstimator)", "modifiers": "public", "return": "void", "signature": "void setNodeCountEstimator(NodeCountEstimator nodeCountEstimator)", "full_signature": "public void setNodeCountEstimator(NodeCountEstimator nodeCountEstimator)", "class_method_signature": "IndexUpdate.setNodeCountEstimator(NodeCountEstimator nodeCountEstimator)", "testcase": false, "constructor": false}, {"identifier": "getIndexingStats", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIndexingStats()", "full_signature": "public String getIndexingStats()", "class_method_signature": "IndexUpdate.getIndexingStats()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreReindexFlags", "parameters": "(boolean ignoreReindexFlag)", "modifiers": "public", "return": "void", "signature": "void setIgnoreReindexFlags(boolean ignoreReindexFlag)", "full_signature": "public void setIgnoreReindexFlags(boolean ignoreReindexFlag)", "class_method_signature": "IndexUpdate.setIgnoreReindexFlags(boolean ignoreReindexFlag)", "testcase": false, "constructor": false}, {"identifier": "shouldReindex", "parameters": "(NodeBuilder definition, NodeState before,\n            String name)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldReindex(NodeBuilder definition, NodeState before,\n            String name)", "full_signature": "private boolean shouldReindex(NodeBuilder definition, NodeState before,\n            String name)", "class_method_signature": "IndexUpdate.shouldReindex(NodeBuilder definition, NodeState before,\n            String name)", "testcase": false, "constructor": false}, {"identifier": "hasAnyHiddenNodes", "parameters": "(NodeBuilder builder)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasAnyHiddenNodes(NodeBuilder builder)", "full_signature": "private static boolean hasAnyHiddenNodes(NodeBuilder builder)", "class_method_signature": "IndexUpdate.hasAnyHiddenNodes(NodeBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "collectIndexEditors", "parameters": "(NodeBuilder definitions,\n            NodeState before)", "modifiers": "private", "return": "void", "signature": "void collectIndexEditors(NodeBuilder definitions,\n            NodeState before)", "full_signature": "private void collectIndexEditors(NodeBuilder definitions,\n            NodeState before)", "class_method_signature": "IndexUpdate.collectIndexEditors(NodeBuilder definitions,\n            NodeState before)", "testcase": false, "constructor": false}, {"identifier": "removeIndexState", "parameters": "(NodeBuilder definition)", "modifiers": "private", "return": "void", "signature": "void removeIndexState(NodeBuilder definition)", "full_signature": "private void removeIndexState(NodeBuilder definition)", "class_method_signature": "IndexUpdate.removeIndexState(NodeBuilder definition)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedCount", "parameters": "(NodeBuilder indexDefinition)", "modifiers": "private", "return": "long", "signature": "long getEstimatedCount(NodeBuilder indexDefinition)", "full_signature": "private long getEstimatedCount(NodeBuilder indexDefinition)", "class_method_signature": "IndexUpdate.getEstimatedCount(NodeBuilder indexDefinition)", "testcase": false, "constructor": false}, {"identifier": "isIncluded", "parameters": "(String asyncRef, NodeBuilder definition)", "modifiers": "static", "return": "boolean", "signature": "boolean isIncluded(String asyncRef, NodeBuilder definition)", "full_signature": "static boolean isIncluded(String asyncRef, NodeBuilder definition)", "class_method_signature": "IndexUpdate.isIncluded(String asyncRef, NodeBuilder definition)", "testcase": false, "constructor": false}, {"identifier": "isMatchingIndexMode", "parameters": "(NodeBuilder definition)", "modifiers": "private", "return": "boolean", "signature": "boolean isMatchingIndexMode(NodeBuilder definition)", "full_signature": "private boolean isMatchingIndexMode(NodeBuilder definition)", "class_method_signature": "IndexUpdate.isMatchingIndexMode(NodeBuilder definition)", "testcase": false, "constructor": false}, {"identifier": "incrementReIndexCount", "parameters": "(NodeBuilder definition)", "modifiers": "private", "return": "void", "signature": "void incrementReIndexCount(NodeBuilder definition)", "full_signature": "private void incrementReIndexCount(NodeBuilder definition)", "class_method_signature": "IndexUpdate.incrementReIndexCount(NodeBuilder definition)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Override public String getPath()", "class_method_signature": "IndexUpdate.getPath()", "testcase": false, "constructor": false}, {"identifier": "leave", "parameters": "(NodeState before, NodeState after)", "modifiers": "@Override public", "return": "void", "signature": "void leave(NodeState before, NodeState after)", "full_signature": "@Override public void leave(NodeState before, NodeState after)", "class_method_signature": "IndexUpdate.leave(NodeState before, NodeState after)", "testcase": false, "constructor": false}, {"identifier": "propertyAdded", "parameters": "(PropertyState after)", "modifiers": "@Override public", "return": "void", "signature": "void propertyAdded(PropertyState after)", "full_signature": "@Override public void propertyAdded(PropertyState after)", "class_method_signature": "IndexUpdate.propertyAdded(PropertyState after)", "testcase": false, "constructor": false}, {"identifier": "propertyChanged", "parameters": "(PropertyState before, PropertyState after)", "modifiers": "@Override public", "return": "void", "signature": "void propertyChanged(PropertyState before, PropertyState after)", "full_signature": "@Override public void propertyChanged(PropertyState before, PropertyState after)", "class_method_signature": "IndexUpdate.propertyChanged(PropertyState before, PropertyState after)", "testcase": false, "constructor": false}, {"identifier": "propertyDeleted", "parameters": "(PropertyState before)", "modifiers": "@Override public", "return": "void", "signature": "void propertyDeleted(PropertyState before)", "full_signature": "@Override public void propertyDeleted(PropertyState before)", "class_method_signature": "IndexUpdate.propertyDeleted(PropertyState before)", "testcase": false, "constructor": false}, {"identifier": "childNodeAdded", "parameters": "(String name, NodeState after)", "modifiers": "@Override @NotNull public", "return": "Editor", "signature": "Editor childNodeAdded(String name, NodeState after)", "full_signature": "@Override @NotNull public Editor childNodeAdded(String name, NodeState after)", "class_method_signature": "IndexUpdate.childNodeAdded(String name, NodeState after)", "testcase": false, "constructor": false}, {"identifier": "childNodeChanged", "parameters": "(\n            String name, NodeState before, NodeState after)", "modifiers": "@Override @NotNull public", "return": "Editor", "signature": "Editor childNodeChanged(\n            String name, NodeState before, NodeState after)", "full_signature": "@Override @NotNull public Editor childNodeChanged(\n            String name, NodeState before, NodeState after)", "class_method_signature": "IndexUpdate.childNodeChanged(\n            String name, NodeState before, NodeState after)", "testcase": false, "constructor": false}, {"identifier": "childNodeDeleted", "parameters": "(String name, NodeState before)", "modifiers": "@Override @Nullable public", "return": "Editor", "signature": "Editor childNodeDeleted(String name, NodeState before)", "full_signature": "@Override @Nullable public Editor childNodeDeleted(String name, NodeState before)", "class_method_signature": "IndexUpdate.childNodeDeleted(String name, NodeState before)", "testcase": false, "constructor": false}, {"identifier": "commitProgress", "parameters": "(IndexProgress indexProgress)", "modifiers": "public", "return": "void", "signature": "void commitProgress(IndexProgress indexProgress)", "full_signature": "public void commitProgress(IndexProgress indexProgress)", "class_method_signature": "IndexUpdate.commitProgress(IndexProgress indexProgress)", "testcase": false, "constructor": false}, {"identifier": "getReindexedDefinitions", "parameters": "()", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> getReindexedDefinitions()", "full_signature": "protected Set<String> getReindexedDefinitions()", "class_method_signature": "IndexUpdate.getReindexedDefinitions()", "testcase": false, "constructor": false}, {"identifier": "clearCorruptFlag", "parameters": "(NodeBuilder definition, String indexPath)", "modifiers": "private", "return": "void", "signature": "void clearCorruptFlag(NodeBuilder definition, String indexPath)", "full_signature": "private void clearCorruptFlag(NodeBuilder definition, String indexPath)", "class_method_signature": "IndexUpdate.clearCorruptFlag(NodeBuilder definition, String indexPath)", "testcase": false, "constructor": false}, {"identifier": "getIndexPath", "parameters": "(String path, String indexName)", "modifiers": "private static", "return": "String", "signature": "String getIndexPath(String path, String indexName)", "full_signature": "private static String getIndexPath(String path, String indexName)", "class_method_signature": "IndexUpdate.getIndexPath(String path, String indexName)", "testcase": false, "constructor": false}, {"identifier": "wrapProgress", "parameters": "(Editor editor)", "modifiers": "private", "return": "Editor", "signature": "Editor wrapProgress(Editor editor)", "full_signature": "private Editor wrapProgress(Editor editor)", "class_method_signature": "IndexUpdate.wrapProgress(Editor editor)", "testcase": false, "constructor": false}, {"identifier": "withMissingProviderStrategy", "parameters": "(\n            MissingIndexProviderStrategy missingProvider)", "modifiers": "public", "return": "IndexUpdate", "signature": "IndexUpdate withMissingProviderStrategy(\n            MissingIndexProviderStrategy missingProvider)", "full_signature": "public IndexUpdate withMissingProviderStrategy(\n            MissingIndexProviderStrategy missingProvider)", "class_method_signature": "IndexUpdate.withMissingProviderStrategy(\n            MissingIndexProviderStrategy missingProvider)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/IndexUpdate.java"}, "focal_method": {"identifier": "withMissingProviderStrategy", "parameters": "(\n            MissingIndexProviderStrategy missingProvider)", "modifiers": "public", "return": "IndexUpdate", "body": "public IndexUpdate withMissingProviderStrategy(\n            MissingIndexProviderStrategy missingProvider) {\n        rootState.setMissingProvider(missingProvider);\n        return this;\n    }", "signature": "IndexUpdate withMissingProviderStrategy(\n            MissingIndexProviderStrategy missingProvider)", "full_signature": "public IndexUpdate withMissingProviderStrategy(\n            MissingIndexProviderStrategy missingProvider)", "class_method_signature": "IndexUpdate.withMissingProviderStrategy(\n            MissingIndexProviderStrategy missingProvider)", "testcase": false, "constructor": false, "invocations": ["setMissingProvider"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}