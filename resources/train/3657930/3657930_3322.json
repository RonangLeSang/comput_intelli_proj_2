{"test_class": {"identifier": "MountInfoProviderServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final OsgiContext context = new OsgiContext();", "modifier": "@Rule\n    public final", "type": "OsgiContext", "declarator": "context = new OsgiContext()", "var_name": "context"}, {"original_string": "private MountInfoProviderService service = new MountInfoProviderService();", "modifier": "private", "type": "MountInfoProviderService", "declarator": "service = new MountInfoProviderService()", "var_name": "service"}], "file": "oak-store-composite/src/test/java/org/apache/jackrabbit/oak/composite/MountInfoProviderServiceTest.java"}, "test_case": {"identifier": "mountWithConfig_Paths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mountWithConfig_Paths() throws Exception{\n        MockOsgi.activate(service, context.bundleContext(),\n                ImmutableMap.<String, Object>of(\"mountedPaths\", new String[] {\"/a\", \"/b\"}));\n\n        MountInfoProvider provider = context.getService(MountInfoProvider.class);\n        assertEquals(1, provider.getNonDefaultMounts().size());\n\n        Mount m = provider.getMountByName(MountInfoProviderService.PROP_MOUNT_NAME_DEFAULT);\n        assertNotNull(m);\n        Mount defMount = provider.getDefaultMount();\n        assertNotNull(defMount);\n        assertFalse(m.isReadOnly());\n        assertEquals(m, provider.getMountByPath(\"/a\"));\n        assertEquals(defMount, provider.getMountByPath(\"/x\"));\n    }", "signature": "void mountWithConfig_Paths()", "full_signature": "@Test public void mountWithConfig_Paths()", "class_method_signature": "MountInfoProviderServiceTest.mountWithConfig_Paths()", "testcase": true, "constructor": false, "invocations": ["activate", "bundleContext", "of", "getService", "assertEquals", "size", "getNonDefaultMounts", "getMountByName", "assertNotNull", "getDefaultMount", "assertNotNull", "assertFalse", "isReadOnly", "assertEquals", "getMountByPath", "assertEquals", "getMountByPath"]}, "focal_class": {"identifier": "MountInfoProviderService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Property(label = \"Mounted paths\",\n            unbounded = PropertyUnbounded.ARRAY,\n            description = \"Paths which are part of private mount\"\n    )\n    private static final String PROP_MOUNT_PATHS = \"mountedPaths\";", "modifier": "@Property(label = \"Mounted paths\",\n            unbounded = PropertyUnbounded.ARRAY,\n            description = \"Paths which are part of private mount\"\n    )\n    private static final", "type": "String", "declarator": "PROP_MOUNT_PATHS = \"mountedPaths\"", "var_name": "PROP_MOUNT_PATHS"}, {"original_string": "static final String PROP_MOUNT_NAME_DEFAULT = \"private\";", "modifier": "static final", "type": "String", "declarator": "PROP_MOUNT_NAME_DEFAULT = \"private\"", "var_name": "PROP_MOUNT_NAME_DEFAULT"}, {"original_string": "@Property(label = \"Mount name\",\n            description = \"Name of the mount\",\n            value = PROP_MOUNT_NAME_DEFAULT\n    )\n    private static final String PROP_MOUNT_NAME = \"mountName\";", "modifier": "@Property(label = \"Mount name\",\n            description = \"Name of the mount\",\n            value = PROP_MOUNT_NAME_DEFAULT\n    )\n    private static final", "type": "String", "declarator": "PROP_MOUNT_NAME = \"mountName\"", "var_name": "PROP_MOUNT_NAME"}, {"original_string": "private static final boolean PROP_MOUNT_READONLY_DEFAULT = false;", "modifier": "private static final", "type": "boolean", "declarator": "PROP_MOUNT_READONLY_DEFAULT = false", "var_name": "PROP_MOUNT_READONLY_DEFAULT"}, {"original_string": "@Property(label = \"Readonly\",\n            description = \"If enabled then mount would be considered as readonly\",\n            boolValue = PROP_MOUNT_READONLY_DEFAULT\n    )\n    private static final String PROP_MOUNT_READONLY = \"readOnlyMount\";", "modifier": "@Property(label = \"Readonly\",\n            description = \"If enabled then mount would be considered as readonly\",\n            boolValue = PROP_MOUNT_READONLY_DEFAULT\n    )\n    private static final", "type": "String", "declarator": "PROP_MOUNT_READONLY = \"readOnlyMount\"", "var_name": "PROP_MOUNT_READONLY"}, {"original_string": "private static final String[] PROP_PATHS_SUPPORTING_FRAGMENTS_DEFAULT = new String[] {\"/\"};", "modifier": "private static final", "type": "String[]", "declarator": "PROP_PATHS_SUPPORTING_FRAGMENTS_DEFAULT = new String[] {\"/\"}", "var_name": "PROP_PATHS_SUPPORTING_FRAGMENTS_DEFAULT"}, {"original_string": "@Property(label = \"Paths supporting fragments\",\n            unbounded = PropertyUnbounded.ARRAY,\n            description = \"oak:mount-* under this paths will be included to mounts\",\n            value = {\"/\"}\n    )\n    private static final String PROP_PATHS_SUPPORTING_FRAGMENTS = \"pathsSupportingFragments\";", "modifier": "@Property(label = \"Paths supporting fragments\",\n            unbounded = PropertyUnbounded.ARRAY,\n            description = \"oak:mount-* under this paths will be included to mounts\",\n            value = {\"/\"}\n    )\n    private static final", "type": "String", "declarator": "PROP_PATHS_SUPPORTING_FRAGMENTS = \"pathsSupportingFragments\"", "var_name": "PROP_PATHS_SUPPORTING_FRAGMENTS"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private ServiceRegistration reg;", "modifier": "private", "type": "ServiceRegistration", "declarator": "reg", "var_name": "reg"}], "methods": [{"identifier": "activate", "parameters": "(BundleContext bundleContext, Map<String, ?> config)", "modifiers": "@Activate private", "return": "void", "signature": "void activate(BundleContext bundleContext, Map<String, ?> config)", "full_signature": "@Activate private void activate(BundleContext bundleContext, Map<String, ?> config)", "class_method_signature": "MountInfoProviderService.activate(BundleContext bundleContext, Map<String, ?> config)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String[] array)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> trim(String[] array)", "full_signature": "private static List<String> trim(String[] array)", "class_method_signature": "MountInfoProviderService.trim(String[] array)", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Deactivate private", "return": "void", "signature": "void deactivate()", "full_signature": "@Deactivate private void deactivate()", "class_method_signature": "MountInfoProviderService.deactivate()", "testcase": false, "constructor": false}], "file": "oak-store-composite/src/main/java/org/apache/jackrabbit/oak/composite/MountInfoProviderService.java"}, "focal_method": {"identifier": "activate", "parameters": "(BundleContext bundleContext, Map<String, ?> config)", "modifiers": "@Activate private", "return": "void", "body": "@Activate\n    private void activate(BundleContext bundleContext, Map<String, ?> config) {\n        String[] paths = PropertiesUtil.toStringArray(config.get(PROP_MOUNT_PATHS));\n        String mountName = PropertiesUtil.toString(config.get(PROP_MOUNT_NAME), PROP_MOUNT_NAME_DEFAULT);\n        boolean readOnly = PropertiesUtil.toBoolean(config.get(PROP_MOUNT_READONLY), PROP_MOUNT_READONLY_DEFAULT);\n        String[] pathsSupportingFragments = PropertiesUtil.toStringArray(config.get(PROP_PATHS_SUPPORTING_FRAGMENTS), PROP_PATHS_SUPPORTING_FRAGMENTS_DEFAULT);\n\n        MountInfoProvider mip = Mounts.defaultMountInfoProvider();\n        if (paths != null) {\n            mip = Mounts.newBuilder()\n                    .mount(mountName.trim(), readOnly, trim(pathsSupportingFragments), trim(paths))\n                    .build();\n            log.info(\"Enabling mount for {}\", mip);\n        } else {\n            log.info(\"No mount config provided. Mounting would be disabled\");\n        }\n\n        reg = bundleContext.registerService(MountInfoProvider.class.getName(), mip, null);\n    }", "signature": "void activate(BundleContext bundleContext, Map<String, ?> config)", "full_signature": "@Activate private void activate(BundleContext bundleContext, Map<String, ?> config)", "class_method_signature": "MountInfoProviderService.activate(BundleContext bundleContext, Map<String, ?> config)", "testcase": false, "constructor": false, "invocations": ["toStringArray", "get", "toString", "get", "toBoolean", "get", "toStringArray", "get", "defaultMountInfoProvider", "build", "mount", "newBuilder", "trim", "trim", "trim", "info", "info", "registerService", "getName"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}