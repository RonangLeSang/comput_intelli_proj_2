{"test_class": {"identifier": "ChildNodeStateProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-run/src/test/java/org/apache/jackrabbit/oak/index/indexer/document/flatfile/ChildNodeStateProviderTest.java"}, "test_case": {"identifier": "childNames2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void childNames2() {\n        Set<String> preferred = ImmutableSet.of(\"jcr:content\");\n        CountingIterable<NodeStateEntry> citr = createList(preferred, asList(\"/a\", \"/a/jcr:content\", \"/a/jcr:content/metadata\",\n                \"/a/c\", \"/a/c/status\",\"/a/d\", \"/e\", \"/e/f\"));\n        ChildNodeStateProvider p = new ChildNodeStateProvider(citr, \"/a\", preferred);\n\n        assertEquals(asList(\"jcr:content\", \"c\", \"d\"), copyOf(childNames(p.children())));\n        assertEquals(7, citr.getCount());\n    }", "signature": "void childNames2()", "full_signature": "@Test public void childNames2()", "class_method_signature": "ChildNodeStateProviderTest.childNames2()", "testcase": true, "constructor": false, "invocations": ["of", "createList", "asList", "assertEquals", "asList", "copyOf", "childNames", "children", "assertEquals", "getCount"]}, "focal_class": {"identifier": "ChildNodeStateProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Iterable<NodeStateEntry> entries;", "modifier": "private final", "type": "Iterable<NodeStateEntry>", "declarator": "entries", "var_name": "entries"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final Set<String> preferredPathElements;", "modifier": "private final", "type": "Set<String>", "declarator": "preferredPathElements", "var_name": "preferredPathElements"}], "methods": [{"identifier": "ChildNodeStateProvider", "parameters": "(Iterable<NodeStateEntry> entries, String path, Set<String> preferredPathElements)", "modifiers": "public", "return": "", "signature": " ChildNodeStateProvider(Iterable<NodeStateEntry> entries, String path, Set<String> preferredPathElements)", "full_signature": "public  ChildNodeStateProvider(Iterable<NodeStateEntry> entries, String path, Set<String> preferredPathElements)", "class_method_signature": "ChildNodeStateProvider.ChildNodeStateProvider(Iterable<NodeStateEntry> entries, String path, Set<String> preferredPathElements)", "testcase": false, "constructor": true}, {"identifier": "hasChildNode", "parameters": "(@NotNull String name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasChildNode(@NotNull String name)", "full_signature": "public boolean hasChildNode(@NotNull String name)", "class_method_signature": "ChildNodeStateProvider.hasChildNode(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getChildNode", "parameters": "(@NotNull String name)", "modifiers": "@NotNull public", "return": "NodeState", "signature": "NodeState getChildNode(@NotNull String name)", "full_signature": "@NotNull public NodeState getChildNode(@NotNull String name)", "class_method_signature": "ChildNodeStateProvider.getChildNode(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getChildNodeCount", "parameters": "(long max)", "modifiers": "public", "return": "long", "signature": "long getChildNodeCount(long max)", "full_signature": "public long getChildNodeCount(long max)", "class_method_signature": "ChildNodeStateProvider.getChildNodeCount(long max)", "testcase": false, "constructor": false}, {"identifier": "getChildNodeNames", "parameters": "()", "modifiers": "public", "return": "Iterable<String>", "signature": "Iterable<String> getChildNodeNames()", "full_signature": "public Iterable<String> getChildNodeNames()", "class_method_signature": "ChildNodeStateProvider.getChildNodeNames()", "testcase": false, "constructor": false}, {"identifier": "getChildNodeEntries", "parameters": "()", "modifiers": "@NotNull public", "return": "Iterable<? extends ChildNodeEntry>", "signature": "Iterable<? extends ChildNodeEntry> getChildNodeEntries()", "full_signature": "@NotNull public Iterable<? extends ChildNodeEntry> getChildNodeEntries()", "class_method_signature": "ChildNodeStateProvider.getChildNodeEntries()", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "()", "modifiers": "", "return": "Iterator<NodeStateEntry>", "signature": "Iterator<NodeStateEntry> children()", "full_signature": " Iterator<NodeStateEntry> children()", "class_method_signature": "ChildNodeStateProvider.children()", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "(boolean preferred)", "modifiers": "", "return": "Iterator<NodeStateEntry>", "signature": "Iterator<NodeStateEntry> children(boolean preferred)", "full_signature": " Iterator<NodeStateEntry> children(boolean preferred)", "class_method_signature": "ChildNodeStateProvider.children(boolean preferred)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(NodeStateEntry p)", "modifiers": "private static", "return": "String", "signature": "String name(NodeStateEntry p)", "full_signature": "private static String name(NodeStateEntry p)", "class_method_signature": "ChildNodeStateProvider.name(NodeStateEntry p)", "testcase": false, "constructor": false}, {"identifier": "isImmediateChild", "parameters": "(String childPath)", "modifiers": "private", "return": "boolean", "signature": "boolean isImmediateChild(String childPath)", "full_signature": "private boolean isImmediateChild(String childPath)", "class_method_signature": "ChildNodeStateProvider.isImmediateChild(String childPath)", "testcase": false, "constructor": false}], "file": "oak-run/src/main/java/org/apache/jackrabbit/oak/index/indexer/document/flatfile/ChildNodeStateProvider.java"}, "focal_method": {"identifier": "children", "parameters": "()", "modifiers": "", "return": "Iterator<NodeStateEntry>", "body": "Iterator<NodeStateEntry> children() {\n        return children(false);\n    }", "signature": "Iterator<NodeStateEntry> children()", "full_signature": " Iterator<NodeStateEntry> children()", "class_method_signature": "ChildNodeStateProvider.children()", "testcase": false, "constructor": false, "invocations": ["children"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}