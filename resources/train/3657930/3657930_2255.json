{"test_class": {"identifier": "ExternalPrincipalConfigurationTest", "superclass": "extends AbstractExternalAuthTest", "interfaces": "", "fields": [], "file": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalPrincipalConfigurationTest.java"}, "test_case": {"identifier": "testGetRepositoryInitializer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRepositoryInitializer() {\n        assertTrue(externalPrincipalConfiguration.getRepositoryInitializer() instanceof ExternalIdentityRepositoryInitializer);\n\n        enable();\n        assertTrue(externalPrincipalConfiguration.getRepositoryInitializer() instanceof ExternalIdentityRepositoryInitializer);\n    }", "signature": "void testGetRepositoryInitializer()", "full_signature": "@Test public void testGetRepositoryInitializer()", "class_method_signature": "ExternalPrincipalConfigurationTest.testGetRepositoryInitializer()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getRepositoryInitializer", "enable", "assertTrue", "getRepositoryInitializer"]}, "focal_class": {"identifier": "ExternalPrincipalConfiguration", "superclass": "extends ConfigurationBase", "interfaces": "implements PrincipalConfiguration", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ExternalPrincipalConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExternalPrincipalConfiguration.class)", "var_name": "log"}, {"original_string": "private SyncConfigTracker syncConfigTracker;", "modifier": "private", "type": "SyncConfigTracker", "declarator": "syncConfigTracker", "var_name": "syncConfigTracker"}, {"original_string": "private SyncHandlerMappingTracker syncHandlerMappingTracker;", "modifier": "private", "type": "SyncHandlerMappingTracker", "declarator": "syncHandlerMappingTracker", "var_name": "syncHandlerMappingTracker"}], "methods": [{"identifier": "ExternalPrincipalConfiguration", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "signature": " ExternalPrincipalConfiguration()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  ExternalPrincipalConfiguration()", "class_method_signature": "ExternalPrincipalConfiguration.ExternalPrincipalConfiguration()", "testcase": false, "constructor": true}, {"identifier": "ExternalPrincipalConfiguration", "parameters": "(SecurityProvider securityProvider)", "modifiers": "public", "return": "", "signature": " ExternalPrincipalConfiguration(SecurityProvider securityProvider)", "full_signature": "public  ExternalPrincipalConfiguration(SecurityProvider securityProvider)", "class_method_signature": "ExternalPrincipalConfiguration.ExternalPrincipalConfiguration(SecurityProvider securityProvider)", "testcase": false, "constructor": true}, {"identifier": "getPrincipalManager", "parameters": "(Root root, NamePathMapper namePathMapper)", "modifiers": "@NotNull @Override public", "return": "PrincipalManager", "signature": "PrincipalManager getPrincipalManager(Root root, NamePathMapper namePathMapper)", "full_signature": "@NotNull @Override public PrincipalManager getPrincipalManager(Root root, NamePathMapper namePathMapper)", "class_method_signature": "ExternalPrincipalConfiguration.getPrincipalManager(Root root, NamePathMapper namePathMapper)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalProvider", "parameters": "(Root root, NamePathMapper namePathMapper)", "modifiers": "@NotNull @Override public", "return": "PrincipalProvider", "signature": "PrincipalProvider getPrincipalProvider(Root root, NamePathMapper namePathMapper)", "full_signature": "@NotNull @Override public PrincipalProvider getPrincipalProvider(Root root, NamePathMapper namePathMapper)", "class_method_signature": "ExternalPrincipalConfiguration.getPrincipalProvider(Root root, NamePathMapper namePathMapper)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "ExternalPrincipalConfiguration.getName()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryInitializer", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RepositoryInitializer", "signature": "RepositoryInitializer getRepositoryInitializer()", "full_signature": "@NotNull @Override public RepositoryInitializer getRepositoryInitializer()", "class_method_signature": "ExternalPrincipalConfiguration.getRepositoryInitializer()", "testcase": false, "constructor": false}, {"identifier": "getValidators", "parameters": "(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "modifiers": "@NotNull @Override public", "return": "List<? extends ValidatorProvider>", "signature": "List<? extends ValidatorProvider> getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "full_signature": "@NotNull @Override public List<? extends ValidatorProvider> getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "class_method_signature": "ExternalPrincipalConfiguration.getValidators(@NotNull String workspaceName, @NotNull Set<Principal> principals, @NotNull MoveTracker moveTracker)", "testcase": false, "constructor": false}, {"identifier": "getProtectedItemImporters", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ProtectedItemImporter>", "signature": "List<ProtectedItemImporter> getProtectedItemImporters()", "full_signature": "@NotNull @Override public List<ProtectedItemImporter> getProtectedItemImporters()", "class_method_signature": "ExternalPrincipalConfiguration.getProtectedItemImporters()", "testcase": false, "constructor": false}, {"identifier": "getConflictHandlers", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ThreeWayConflictHandler>", "signature": "List<ThreeWayConflictHandler> getConflictHandlers()", "full_signature": "@NotNull @Override public List<ThreeWayConflictHandler> getConflictHandlers()", "class_method_signature": "ExternalPrincipalConfiguration.getConflictHandlers()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "(BundleContext bundleContext, Map<String, Object> properties)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") @Activate private", "return": "void", "signature": "void activate(BundleContext bundleContext, Map<String, Object> properties)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") @Activate private void activate(BundleContext bundleContext, Map<String, Object> properties)", "class_method_signature": "ExternalPrincipalConfiguration.activate(BundleContext bundleContext, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") @Deactivate private", "return": "void", "signature": "void deactivate()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") @Deactivate private void deactivate()", "class_method_signature": "ExternalPrincipalConfiguration.deactivate()", "testcase": false, "constructor": false}, {"identifier": "dynamicMembershipEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean dynamicMembershipEnabled()", "full_signature": "private boolean dynamicMembershipEnabled()", "class_method_signature": "ExternalPrincipalConfiguration.dynamicMembershipEnabled()", "testcase": false, "constructor": false}, {"identifier": "protectedExternalIds", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean protectedExternalIds()", "full_signature": "private boolean protectedExternalIds()", "class_method_signature": "ExternalPrincipalConfiguration.protectedExternalIds()", "testcase": false, "constructor": false}], "file": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalPrincipalConfiguration.java"}, "focal_method": {"identifier": "getRepositoryInitializer", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RepositoryInitializer", "body": "@NotNull\n    @Override\n    public RepositoryInitializer getRepositoryInitializer() {\n        return new ExternalIdentityRepositoryInitializer(protectedExternalIds());\n    }", "signature": "RepositoryInitializer getRepositoryInitializer()", "full_signature": "@NotNull @Override public RepositoryInitializer getRepositoryInitializer()", "class_method_signature": "ExternalPrincipalConfiguration.getRepositoryInitializer()", "testcase": false, "constructor": false, "invocations": ["protectedExternalIds"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}